
/tmp/arduino_build_41303/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 c5 3d 	jmp	0x7b8a	; 0x7b8a <__ctors_end>
       4:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
       8:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
       c:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      10:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      14:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      18:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      1c:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      20:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      24:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      28:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      2c:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      30:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      34:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      38:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      3c:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      40:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      44:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      48:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      4c:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      50:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      54:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      58:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      5c:	0c 94 d0 59 	jmp	0xb3a0	; 0xb3a0 <__vector_23>
      60:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      64:	0c 94 d5 58 	jmp	0xb1aa	; 0xb1aa <__vector_25>
      68:	0c 94 ab 58 	jmp	0xb156	; 0xb156 <__vector_26>
      6c:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      70:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      74:	0c 94 1a 5a 	jmp	0xb434	; 0xb434 <__vector_29>
      78:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      7c:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      80:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      84:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      88:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      8c:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      90:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      94:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      98:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      9c:	0c 94 6b 5b 	jmp	0xb6d6	; 0xb6d6 <__vector_39>
      a0:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      a4:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      a8:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      ac:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      b0:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      b4:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      b8:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      bc:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      c0:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      c4:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>
      c8:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 f9 7a 	jmp	0xf5f2	; 0xf5f2 <EthernetClient::read()>
      d0:	0c 94 ae 46 	jmp	0x8d5c	; 0x8d5c <nullfce(unsigned int, unsigned int, unsigned char)>
      d4:	0c 94 29 47 	jmp	0x8e52	; 0x8e52 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
      d8:	0c 94 9d d0 	jmp	0x1a13a	; 0x1a13a <HardwareSerial::write(unsigned char)>
      dc:	0c 94 b3 4c 	jmp	0x9966	; 0x9966 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>
      e0:	0c 94 5b 3e 	jmp	0x7cb6	; 0x7cb6 <turnOffPWM+0x6c>
      e4:	0c 94 7d 7f 	jmp	0xfefa	; 0xfefa <EthernetClient::write(unsigned char const*, unsigned int)>
      e8:	0c 94 30 4b 	jmp	0x9660	; 0x9660 <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
      ec:	0c 94 f3 6f 	jmp	0xdfe6	; 0xdfe6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
      f0:	0c 94 66 4a 	jmp	0x94cc	; 0x94cc <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
      f4:	0c 94 88 3e 	jmp	0x7d10	; 0x7d10 <turnOffPWM+0xc6>
      f8:	0c 94 57 75 	jmp	0xeaae	; 0xeaae <display_element_show_network_detail(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
      fc:	0c 94 11 68 	jmp	0xd022	; 0xd022 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>
     100:	0c 94 8e 4c 	jmp	0x991c	; 0x991c <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>
     104:	0c 94 7f 6a 	jmp	0xd4fe	; 0xd4fe <button_select_term_ring_input_in_dialog_status_fnt(unsigned int, unsigned int, unsigned char)>
     108:	0c 94 74 76 	jmp	0xece8	; 0xece8 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     10c:	0c 94 13 74 	jmp	0xe826	; 0xe826 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     110:	0c 94 c9 51 	jmp	0xa392	; 0xa392 <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     114:	0c 94 4c 5f 	jmp	0xbe98	; 0xbe98 <helper_set_time_manualy(unsigned int, unsigned int, unsigned char)>
     118:	0c 94 e3 3f 	jmp	0x7fc6	; 0x7fc6 <EthernetUDP::remotePort()>
     11c:	0c 94 56 40 	jmp	0x80ac	; 0x80ac <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     120:	0c 94 46 65 	jmp	0xca8c	; 0xca8c <helper_dialog_ntp_set_server(unsigned int, unsigned int, unsigned char)>
     124:	0c 94 55 56 	jmp	0xacaa	; 0xacaa <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     128:	0c 94 e7 47 	jmp	0x8fce	; 0x8fce <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>
     12c:	0c 94 d6 6b 	jmp	0xd7ac	; 0xd7ac <helper_tds_associate(unsigned int, unsigned int, unsigned char)>
     130:	0c 94 4d 3e 	jmp	0x7c9a	; 0x7c9a <turnOffPWM+0x50>
     134:	0c 94 87 48 	jmp	0x910e	; 0x910e <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>
     138:	0c 94 95 55 	jmp	0xab2a	; 0xab2a <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>
     13c:	0c 94 57 3e 	jmp	0x7cae	; 0x7cae <turnOffPWM+0x64>
     140:	0c 94 5b 7a 	jmp	0xf4b6	; 0xf4b6 <EthernetUDP::read(unsigned char*, unsigned int)>
     144:	0c 94 92 88 	jmp	0x11124	; 0x11124 <mqtt_callback(char*, unsigned char*, unsigned int)>
     148:	0c 94 e8 aa 	jmp	0x155d0	; 0x155d0 <HardwareSerial::peek()>
     14c:	0c 94 a7 46 	jmp	0x8d4e	; 0x8d4e <valid_true()>
     150:	0c 94 9b 6e 	jmp	0xdd36	; 0xdd36 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>
     154:	0c 94 8e 55 	jmp	0xab1c	; 0xab1c <button_change_default_ring_via_dialog_onclick(unsigned int, unsigned int, unsigned char)>
     158:	0c 94 1d 47 	jmp	0x8e3a	; 0x8e3a <switch_brightness_automode_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     15c:	0c 94 44 6f 	jmp	0xde88	; 0xde88 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>
     160:	0c 94 cf 68 	jmp	0xd19e	; 0xd19e <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     164:	0c 94 e8 46 	jmp	0x8dd0	; 0x8dd0 <display_enable_show_brightness_manual_mode(unsigned int, unsigned int, unsigned char)>
     168:	0c 94 9a 65 	jmp	0xcb34	; 0xcb34 <helper_set_menu_time_offset(unsigned int, float, unsigned char)>
     16c:	0c 94 06 56 	jmp	0xac0c	; 0xac0c <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>
     170:	0c 94 66 66 	jmp	0xcccc	; 0xcccc <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     174:	0c 94 be 78 	jmp	0xf17c	; 0xf17c <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     178:	0c 94 43 3e 	jmp	0x7c86	; 0x7c86 <turnOffPWM+0x3c>
     17c:	0c 94 c9 3f 	jmp	0x7f92	; 0x7f92 <EthernetUDP::write(unsigned char)>
     180:	0c 94 23 40 	jmp	0x8046	; 0x8046 <EthernetClient::flush()>
     184:	0c 94 b1 74 	jmp	0xe962	; 0xe962 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>
     188:	0c 94 5b 57 	jmp	0xaeb6	; 0xaeb6 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     18c:	0c 94 98 47 	jmp	0x8f30	; 0x8f30 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>
     190:	0c 94 b4 74 	jmp	0xe968	; 0xe968 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     194:	0c 94 5f 6e 	jmp	0xdcbe	; 0xdcbe <button_click_set_time_offset(unsigned int, unsigned int, unsigned char)>
     198:	0c 94 2a 56 	jmp	0xac54	; 0xac54 <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>
     19c:	0c 94 4e 40 	jmp	0x809c	; 0x809c <LCDWIKI_KBV::Get_Height() const>
     1a0:	0c 94 bb 55 	jmp	0xab76	; 0xab76 <display_element_show_time_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     1a4:	0c 94 bc 69 	jmp	0xd378	; 0xd378 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>
     1a8:	0c 94 30 62 	jmp	0xc460	; 0xc460 <helper_thermostat_set_pid_time(unsigned int, float, unsigned char)>
     1ac:	0c 94 b0 46 	jmp	0x8d60	; 0x8d60 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     1b0:	0c 94 7d 69 	jmp	0xd2fa	; 0xd2fa <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     1b4:	0c 94 53 47 	jmp	0x8ea6	; 0x8ea6 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>
     1b8:	0c 94 f8 67 	jmp	0xcff0	; 0xcff0 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>
     1bc:	0c 94 73 82 	jmp	0x104e6	; 0x104e6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     1c0:	0c 94 a5 67 	jmp	0xcf4a	; 0xcf4a <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     1c4:	0c 94 39 71 	jmp	0xe272	; 0xe272 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     1c8:	0c 94 f3 7d 	jmp	0xfbe6	; 0xfbe6 <EthernetUDP::beginPacket(char const*, unsigned int)>
     1cc:	0c 94 14 4d 	jmp	0x9a28	; 0x9a28 <EthernetUDP::peek()>
     1d0:	0c 94 77 3e 	jmp	0x7cee	; 0x7cee <turnOffPWM+0xa4>
     1d4:	0c 94 93 53 	jmp	0xa726	; 0xa726 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     1d8:	0c 94 48 56 	jmp	0xac90	; 0xac90 <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>
     1dc:	0c 94 d8 6b 	jmp	0xd7b0	; 0xd7b0 <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>
     1e0:	0c 94 df 3f 	jmp	0x7fbe	; 0x7fbe <EthernetUDP::available()>
     1e4:	0c 94 63 79 	jmp	0xf2c6	; 0xf2c6 <EthernetClient::stop()>
     1e8:	0c 94 f6 aa 	jmp	0x155ec	; 0x155ec <HardwareSerial::available()>
     1ec:	0c 94 00 56 	jmp	0xac00	; 0xac00 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     1f0:	0c 94 47 40 	jmp	0x808e	; 0x808e <EthernetUDP::read(char*, unsigned int)>
     1f4:	0c 94 1b 40 	jmp	0x8036	; 0x8036 <EthernetClient::operator bool()>
     1f8:	0c 94 7d 3e 	jmp	0x7cfa	; 0x7cfa <turnOffPWM+0xb0>
     1fc:	0c 94 c4 67 	jmp	0xcf88	; 0xcf88 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     200:	0c 94 23 47 	jmp	0x8e46	; 0x8e46 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>
     204:	0c 94 29 55 	jmp	0xaa52	; 0xaa52 <button_ntp_set_server_onclick(unsigned int, unsigned int, unsigned char)>
     208:	0c 94 f9 3f 	jmp	0x7ff2	; 0x7ff2 <EthernetServer::write(unsigned char)>
     20c:	0c 94 9f 58 	jmp	0xb13e	; 0xb13e <serial_putc(char, __file*)>
     210:	0c 94 a9 78 	jmp	0xf152	; 0xf152 <EthernetUDP::stop()>
     214:	0c 94 1c 6e 	jmp	0xdc38	; 0xdc38 <menu_tds_save_offset(unsigned int, float, unsigned char)>
     218:	0c 94 94 68 	jmp	0xd128	; 0xd128 <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     21c:	0c 94 f7 76 	jmp	0xedee	; 0xedee <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     220:	0c 94 f8 3d 	jmp	0x7bf0	; 0x7bf0 <Print::write(unsigned char const*, unsigned int)>
     224:	0c 94 5b 88 	jmp	0x110b6	; 0x110b6 <printf_via_mqtt(char, __file*)>
     228:	0c 94 39 67 	jmp	0xce72	; 0xce72 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>
     22c:	0c 94 fb 3e 	jmp	0x7df6	; 0x7df6 <TwoWire::onReceiveService(unsigned char*, int)>
     230:	0c 94 36 47 	jmp	0x8e6c	; 0x8e6c <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     234:	0c 94 fd 3e 	jmp	0x7dfa	; 0x7dfa <TwoWire::peek()>
     238:	0c 94 ed 43 	jmp	0x87da	; 0x87da <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     23c:	0c 94 45 47 	jmp	0x8e8a	; 0x8e8a <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>
     240:	0c 94 35 72 	jmp	0xe46a	; 0xe46a <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     244:	0c 94 0f 40 	jmp	0x801e	; 0x801e <Print::flush()>
     248:	0c 94 7e 67 	jmp	0xcefc	; 0xcefc <display_enable_show_thermostat_deactive_ring(unsigned int, unsigned int, unsigned char)>
     24c:	0c 94 3b 54 	jmp	0xa876	; 0xa876 <button_set_mqtt_broker_onclick(unsigned int, unsigned int, unsigned char)>
     250:	0c 94 79 6f 	jmp	0xdef2	; 0xdef2 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>
     254:	0c 94 13 7b 	jmp	0xf626	; 0xf626 <EthernetUDP::endPacket()>
     258:	0c 94 52 40 	jmp	0x80a4	; 0x80a4 <LCDWIKI_KBV::Get_Width() const>
     25c:	0c 94 a0 49 	jmp	0x9340	; 0x9340 <display_enable_show(unsigned int, unsigned int, unsigned char)>
     260:	0c 94 de 47 	jmp	0x8fbc	; 0x8fbc <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>
     264:	0c 94 81 3e 	jmp	0x7d02	; 0x7d02 <turnOffPWM+0xb8>
     268:	0c 94 02 4b 	jmp	0x9604	; 0x9604 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     26c:	0c 94 61 3e 	jmp	0x7cc2	; 0x7cc2 <turnOffPWM+0x78>
     270:	0c 94 90 aa 	jmp	0x15520	; 0x15520 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>
     274:	0c 94 ee 4c 	jmp	0x99dc	; 0x99dc <EthernetClient::peek()>
     278:	0c 94 0a 69 	jmp	0xd214	; 0xd214 <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)>
     27c:	0c 94 a2 49 	jmp	0x9344	; 0x9344 <returnnullfceargs(unsigned int, unsigned int, unsigned char)>
     280:	0c 94 fe 64 	jmp	0xc9fc	; 0xc9fc <helper_dialog_mqtt_set_user(unsigned int, unsigned int, unsigned char)>
     284:	0c 94 7c 63 	jmp	0xc6f8	; 0xc6f8 <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)>
     288:	0c 94 cc 4c 	jmp	0x9998	; 0x9998 <click_keyboard_number(unsigned int, unsigned int, unsigned char)>
     28c:	0c 94 66 7e 	jmp	0xfccc	; 0xfccc <EthernetClient::connect(char const*, unsigned int)>
     290:	0c 94 4c 6c 	jmp	0xd898	; 0xd898 <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     294:	0c 94 3f 62 	jmp	0xc47e	; 0xc47e <helper_thermostat_set_pid_d(unsigned int, float, unsigned char)>
     298:	0c 94 87 67 	jmp	0xcf0e	; 0xcf0e <display_enable_show_thermostat_active_ring(unsigned int, unsigned int, unsigned char)>
     29c:	0c 94 a4 49 	jmp	0x9348	; 0x9348 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     2a0:	0c 94 99 47 	jmp	0x8f32	; 0x8f32 <menu_redraw_change_variable(unsigned int, unsigned int, unsigned char)>
     2a4:	0c 94 04 48 	jmp	0x9008	; 0x9008 <click_keyboard_type(unsigned int, unsigned int, unsigned char)>
     2a8:	0c 94 43 47 	jmp	0x8e86	; 0x8e86 <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     2ac:	0c 94 98 63 	jmp	0xc730	; 0xc730 <helper_thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     2b0:	0c 94 21 65 	jmp	0xca42	; 0xca42 <helper_dialog_mqtt_set_server(unsigned int, unsigned int, unsigned char)>
     2b4:	0c 94 e2 46 	jmp	0x8dc4	; 0x8dc4 <button_set_brightness_auto_shutdown_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     2b8:	0c 94 c1 6c 	jmp	0xd982	; 0xd982 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>
     2bc:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <TwoWire::read()>
     2c0:	0c 94 02 ab 	jmp	0x15604	; 0x15604 <serialEventRun()>
     2c4:	0c 94 83 74 	jmp	0xe906	; 0xe906 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>
     2c8:	0c 94 5e 68 	jmp	0xd0bc	; 0xd0bc <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>
     2cc:	0c 94 69 3e 	jmp	0x7cd2	; 0x7cd2 <turnOffPWM+0x88>
     2d0:	0c 94 66 47 	jmp	0x8ecc	; 0x8ecc <a2d_complete(unsigned char, unsigned int)>
     2d4:	0c 94 90 67 	jmp	0xcf20	; 0xcf20 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>
     2d8:	0c 94 8c 62 	jmp	0xc518	; 0xc518 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)>
     2dc:	0c 94 d4 aa 	jmp	0x155a8	; 0x155a8 <HardwareSerial::read()>
     2e0:	0c 94 fc 3e 	jmp	0x7df8	; 0x7df8 <TwoWire::flush()>
     2e4:	0c 94 2e 48 	jmp	0x905c	; 0x905c <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     2e8:	0c 94 8c 54 	jmp	0xa918	; 0xa918 <button_time_set_date_manualy_onclick(unsigned int, unsigned int, unsigned char)>
     2ec:	0c 94 10 40 	jmp	0x8020	; 0x8020 <EthernetClient::operator==(EthernetClient const&)>
     2f0:	0c 94 ff 53 	jmp	0xa7fe	; 0xa7fe <button_set_mqtt_pass_onclick(unsigned int, unsigned int, unsigned char)>
     2f4:	0c 94 d2 61 	jmp	0xc3a4	; 0xc3a4 <button_click_ring_term_set_pid_default(unsigned int, unsigned int, unsigned char)>
     2f8:	0c 94 e7 3f 	jmp	0x7fce	; 0x7fce <EthernetUDP::remoteIP()>
     2fc:	0c 94 92 70 	jmp	0xe124	; 0xe124 <button_get_show_default_temp_1(unsigned char, unsigned char, unsigned char, char*, char*)>
     300:	0c 94 24 40 	jmp	0x8048	; 0x8048 <EthernetClient::write(unsigned char)>
     304:	0c 94 40 48 	jmp	0x9080	; 0x9080 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>
     308:	0c 94 42 69 	jmp	0xd284	; 0xd284 <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     30c:	0c 94 11 66 	jmp	0xcc22	; 0xcc22 <term_ring_do_activate(unsigned int, unsigned int, unsigned char)>
     310:	0c 94 dd 54 	jmp	0xa9ba	; 0xa9ba <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)>
     314:	0c 94 fa 3e 	jmp	0x7df4	; 0x7df4 <TwoWire::onRequestService()>
     318:	0c 94 c2 3e 	jmp	0x7d84	; 0x7d84 <TwoWire::available()>
     31c:	0c 94 44 40 	jmp	0x8088	; 0x8088 <Print::availableForWrite()>
     320:	0c 94 7a 7a 	jmp	0xf4f4	; 0xf4f4 <EthernetUDP::read()>
     324:	0c 94 07 48 	jmp	0x900e	; 0x900e <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>
     328:	0c 94 ab 46 	jmp	0x8d56	; 0x8d56 <button_nastaveni_reload_onclick(unsigned int, unsigned int, unsigned char)>
     32c:	0c 94 a9 46 	jmp	0x8d52	; 0x8d52 <valid_ipv4_address_element_string()>
     330:	0c 94 b7 3f 	jmp	0x7f6e	; 0x7f6e <EthernetUDP::flush()>
     334:	0c 94 4f 80 	jmp	0x1009e	; 0x1009e <EthernetClient::connect(IPAddress, unsigned int)>
     338:	0c 94 56 6d 	jmp	0xdaac	; 0xdaac <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>
     33c:	0c 94 92 65 	jmp	0xcb24	; 0xcb24 <button_nastaveni_default_value(unsigned int, unsigned int, unsigned char)>
     340:	0c 94 a8 65 	jmp	0xcb50	; 0xcb50 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>
     344:	0c 94 a3 4a 	jmp	0x9546	; 0x9546 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     348:	0c 94 0b 6a 	jmp	0xd416	; 0xd416 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     34c:	0c 94 3a 40 	jmp	0x8074	; 0x8074 <EthernetClient::operator!=(EthernetClient const&)>
     350:	0c 94 ff 71 	jmp	0xe3fe	; 0xe3fe <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     354:	0c 94 e8 5e 	jmp	0xbdd0	; 0xbdd0 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)>
     358:	0c 94 89 3e 	jmp	0x7d12	; 0x7d12 <turnOffPWM+0xc8>
     35c:	0c 94 b5 6d 	jmp	0xdb6a	; 0xdb6a <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>
     360:	0c 94 0e 48 	jmp	0x901c	; 0x901c <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     364:	0c 94 6d 62 	jmp	0xc4da	; 0xc4da <helper_thermostat_set_pid_p(unsigned int, float, unsigned char)>
     368:	0c 94 5b 6a 	jmp	0xd4b6	; 0xd4b6 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     36c:	0c 94 ab 47 	jmp	0x8f56	; 0x8f56 <menu_redraw_slider(unsigned int, unsigned int, unsigned char)>
     370:	0c 94 a5 71 	jmp	0xe34a	; 0xe34a <display_element_show_temp_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     374:	0c 94 51 3e 	jmp	0x7ca2	; 0x7ca2 <turnOffPWM+0x58>
     378:	0c 94 f7 3f 	jmp	0x7fee	; 0x7fee <UDP::beginMulticast(IPAddress, unsigned int)>
     37c:	0c 94 aa 63 	jmp	0xc754	; 0xc754 <button_select_term_ring_input_in_dialog_onclick(unsigned int, unsigned int, unsigned char)>
     380:	0c 94 b9 62 	jmp	0xc572	; 0xc572 <helper_thermostat_set_mezni(unsigned int, float, unsigned char)>
     384:	0c 94 2f 58 	jmp	0xb05e	; 0xb05e <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     388:	0c 94 a2 47 	jmp	0x8f44	; 0x8f44 <menu_redraw_change_default_ring(unsigned int, unsigned int, unsigned char)>
     38c:	0c 94 1d 54 	jmp	0xa83a	; 0xa83a <button_set_mqtt_user_onclick(unsigned int, unsigned int, unsigned char)>
     390:	0c 94 73 3e 	jmp	0x7ce6	; 0x7ce6 <turnOffPWM+0x9c>
     394:	0c 94 2f 4d 	jmp	0x9a5e	; 0x9a5e <EthernetClient::available()>
     398:	0c 94 db 64 	jmp	0xc9b6	; 0xc9b6 <helper_dialog_mqtt_set_pass(unsigned int, unsigned int, unsigned char)>
     39c:	0c 94 e4 d0 	jmp	0x1a1c8	; 0x1a1c8 <HardwareSerial::flush()>
     3a0:	0c 94 42 48 	jmp	0x9084	; 0x9084 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>
     3a4:	0c 94 d9 7e 	jmp	0xfdb2	; 0xfdb2 <button_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)>
     3a8:	0c 94 b4 47 	jmp	0x8f68	; 0x8f68 <menu_redraw_date(unsigned int, unsigned int, unsigned char)>
     3ac:	0c 94 95 42 	jmp	0x852a	; 0x852a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     3b0:	0c 94 a8 53 	jmp	0xa750	; 0xa750 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     3b4:	0c 94 6f 3e 	jmp	0x7cde	; 0x7cde <turnOffPWM+0x94>
     3b8:	0c 94 e4 7f 	jmp	0xffc8	; 0xffc8 <EthernetServer::write(unsigned char const*, unsigned int)>
     3bc:	0c 94 e4 4c 	jmp	0x99c8	; 0x99c8 <Serial0_available()>
     3c0:	0c 94 38 4d 	jmp	0x9a70	; 0x9a70 <EthernetUDP::write(unsigned char const*, unsigned int)>
     3c4:	0c 94 1f 3f 	jmp	0x7e3e	; 0x7e3e <TwoWire::write(unsigned char const*, unsigned int)>
     3c8:	0c 94 02 6d 	jmp	0xda04	; 0xda04 <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>
     3cc:	0c 94 ef 65 	jmp	0xcbde	; 0xcbde <helper_display_set_brightness(unsigned int, float, unsigned char)>
     3d0:	0c 94 56 62 	jmp	0xc4ac	; 0xc4ac <helper_thermostat_set_pid_i(unsigned int, float, unsigned char)>
     3d4:	0c 94 28 66 	jmp	0xcc50	; 0xcc50 <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>
     3d8:	0c 94 85 3e 	jmp	0x7d0a	; 0x7d0a <turnOffPWM+0xc0>
     3dc:	0c 94 2e 4a 	jmp	0x945c	; 0x945c <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     3e0:	0c 94 82 55 	jmp	0xab04	; 0xab04 <button_change_brightness_display_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>
     3e4:	0c 94 f0 47 	jmp	0x8fe0	; 0x8fe0 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>
     3e8:	0c 94 7c 55 	jmp	0xaaf8	; 0xaaf8 <button_set_brightness_auto_shutdown_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>
     3ec:	0c 94 49 3e 	jmp	0x7c92	; 0x7c92 <turnOffPWM+0x48>
     3f0:	0c 94 db 43 	jmp	0x87b6	; 0x87b6 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     3f4:	0c 94 57 6c 	jmp	0xd8ae	; 0xd8ae <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     3f8:	0c 94 a1 63 	jmp	0xc742	; 0xc742 <button_deassociate_input_sensor_for_term_onclick(unsigned int, unsigned int, unsigned char)>
     3fc:	0c 94 09 42 	jmp	0x8412	; 0x8412 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     400:	0c 94 f5 7a 	jmp	0xf5ea	; 0xf5ea <EthernetClient::read(unsigned char*, unsigned int)>
     404:	0c 94 af 46 	jmp	0x8d5e	; 0x8d5e <button_check_mqtt_connection_onclick(unsigned int, unsigned int, unsigned char)>
     408:	0c 94 31 68 	jmp	0xd062	; 0xd062 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>
     40c:	0c 94 d5 56 	jmp	0xadaa	; 0xadaa <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     410:	0c 94 c5 aa 	jmp	0x1558a	; 0x1558a <HardwareSerial::availableForWrite()>
     414:	0c 94 4c 3f 	jmp	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>
     418:	0c 94 e6 6d 	jmp	0xdbcc	; 0xdbcc <menu_tds_save_period(unsigned int, float, unsigned char)>
     41c:	0c 94 cc 48 	jmp	0x9198	; 0x9198 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>
     420:	0c 94 16 7f 	jmp	0xfe2c	; 0xfe2c <EthernetServer::begin()>
     424:	0c 94 40 79 	jmp	0xf280	; 0xf280 <EthernetClient::connected()>
     428:	0c 94 3c 7b 	jmp	0xf678	; 0xf678 <EthernetUDP::begin(unsigned int)>
     42c:	0c 94 cd e0 	jmp	0x1c19a	; 0x1c19a <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7402>
     430:	0c 94 a3 aa 	jmp	0x15546	; 0x15546 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>
     434:	0c 94 88 55 	jmp	0xab10	; 0xab10 <dyn_button_show_all_thermostat_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>
     438:	0c 94 a4 7a 	jmp	0xf548	; 0xf548 <EthernetUDP::parsePacket()>
     43c:	0c 94 fb 65 	jmp	0xcbf6	; 0xcbf6 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)>
     440:	0c 94 65 3e 	jmp	0x7cca	; 0x7cca <turnOffPWM+0x80>
     444:	0c 94 7a 63 	jmp	0xc6f4	; 0xc6f4 <helper_thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     448:	0c 94 44 4c 	jmp	0x9888	; 0x9888 <IPAddress::printTo(Print&) const>
     44c:	0c 94 ef 46 	jmp	0x8dde	; 0x8dde <preload_display_setting_brightness(unsigned int, unsigned int, unsigned char)>

00000450 <__trampolines_end>:
__trampolines_end():
     450:	4e 41       	sbci	r20, 0x1E	; 30
     452:	4e 49       	Address 0x0000000000000452 is out of bounds.
.word	0xffff	; ????

00000453 <pstr_inity>:
     453:	49 4e 49 54 59                                      INITY

00000458 <pstr_inf>:
     458:	49 4e 46                                            INF

0000045b <pwr_m10>:
     45b:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     46b:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000473 <pwr_p10>:
     473:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     483:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     493:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     4a3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     4b3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     4c3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     4d3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     4e3:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     4f3:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     503:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     513:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     523:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     533:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     543:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     553:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     563:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     573:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     583:	3d 27                                               ='

00000585 <new_text_switch_brightness_automode>:
     585:	41 75 74 6f 6d 61 74 69 63 6b 79 20 6a 61 73 00     Automaticky jas.

00000595 <new_text_nastaveni_zobrazeni_full>:
     595:	4e 61 73 74 61 76 65 6e 69 20 7a 6f 62 72 61 7a     Nastaveni zobraz
     5a5:	65 6e 69 00                                         eni.

000005a9 <new_nastaveni_nrf_input>:
     5a9:	4e 52 46 20 76 73 74 75 70 00                       NRF vstup.

000005b3 <new_nastaveni_mqtt_topic>:
     5b3:	4d 51 54 54 20 74 6f 70 69 63 00                    MQTT topic.

000005be <new_text_nastaveni_periferii_full>:
     5be:	4e 61 73 74 61 76 65 6e 69 20 70 65 72 69 66 65     Nastaveni perife
     5ce:	72 69 69 00                                         rii.

000005d2 <new_text_nastaveni_periferie>:
     5d2:	4e 2e 20 70 65 72 69 66 65 72 69 69 00              N. periferii.

000005df <new_text_nastaveni_zobrazeni>:
     5df:	4e 2e 20 7a 6f 62 72 61 7a 65 6e 69 00              N. zobrazeni.

000005ec <new_text_nastaveni_regulatoru>:
     5ec:	4e 2e 20 72 65 67 75 6c 61 74 6f 72 75 00           N. regulatoru.

000005fa <new_text_nastaveni_system>:
     5fa:	4e 2e 20 73 79 73 74 65 6d 75 00                    N. systemu.

00000605 <new_text_nastaveni_reload>:
     605:	52 65 73 74 61 72 74 20 7a 61 72 69 7a 65 6e 69     Restart zarizeni
	...

00000616 <new_text_o_zarizeni>:
     616:	4f 20 7a 61 72 69 7a 65 6e 69 00                    O zarizeni.

00000621 <nastaveni_default>:
     621:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

00000631 <nastaveni_nrf>:
     631:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

0000063f <new_text_nastaveni_system_full>:
     63f:	4e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     Nastaveni system
     64f:	75 00                                               u.

00000651 <char_T>:
     651:	54 00                                               T.

00000653 <char_D>:
     653:	44 00                                               D.

00000655 <char_I>:
     655:	49 00                                               I.

00000657 <char_P>:
     657:	50 00                                               P.

00000659 <text_set_default>:
     659:	56 79 63 68 6f 7a 69 20 68 6f 64 6e 6f 74 79 00     Vychozi hodnoty.

00000669 <text_button_mode_cool>:
     669:	43 68 6c 61 7a 65 6e 69 00                          Chlazeni.

00000672 <text_button_mode_heat>:
     672:	54 6f 70 65 6e 69 00                                Topeni.

00000679 <text_select_term_mode>:
     679:	56 79 62 65 72 20 6d 6f 64 75 20 72 65 67 75 6c     Vyber modu regul
     689:	61 74 6f 72 75 00                                   atoru.

0000068f <nastaveni_deassociate_sensor>:
     68f:	55 76 6f 6c 6e 69 74 20 63 69 64 6c 6f 00           Uvolnit cidlo.

0000069d <text_current_ring_mode>:
     69d:	41 6b 74 75 61 6c 6e 69 20 6d 6f 64 20 72 65 67     Aktualni mod reg
     6ad:	75 6c 61 74 6f 72 75 00                             ulatoru.

000006b5 <text_nastavit_pid>:
     6b5:	50 49 44 20 76 6f 6c 62 79 00                       PID volby.

000006bf <text_assocoivat_output>:
     6bf:	4e 61 73 74 61 76 69 74 20 76 79 73 74 75 70 00     Nastavit vystup.

000006cf <text_assocoivat>:
     6cf:	4e 61 73 74 61 76 69 74 20 63 69 64 6c 6f 00        Nastavit cidlo.

000006de <ring_text_setup>:
     6de:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

000006e8 <text_select_term_default_ring>:
     6e8:	56 79 62 65 72 20 76 79 63 68 6f 7a 69 68 6f 20     Vyber vychoziho 
     6f8:	72 65 67 75 6c 61 74 6f 72 75 00                    regulatoru.

00000703 <new_text_set_time_program>:
     703:	43 61 73 6f 76 65 20 70 72 6f 67 72 61 6d 79 00     Casove programy.

00000713 <new_text_nastaveni_regulatoru_full>:
     713:	4e 61 73 74 61 76 65 6e 69 20 72 65 67 75 6c 61     Nastaveni regula
     723:	74 6f 72 75 00                                      toru.

00000728 <text_rtds_novy>:
     728:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
     738:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

00000743 <nastaveni_rtds_subscribe>:
     743:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

00000753 <nastaveni_tds_offset>:
     753:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

00000763 <nastaveni_name_sensor>:
     763:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

00000772 <nastaveni_delete_sensor>:
     772:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

00000780 <text_tds_sensors>:
     780:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
     790:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

0000079b <new_text_ok>:
     79b:	4f 4b 00                                            OK.

0000079e <text_special_case>:
     79e:	40 00                                               @.

000007a0 <text_lower_case>:
     7a0:	61 00                                               a.

000007a2 <text_upper_case>:
     7a2:	41 00                                               A.

000007a4 <text_delete_char>:
     7a4:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

000007ae <text_klavesnice>:
     7ae:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

000007b9 <text_zrusit>:
     7b9:	5a 72 75 73 69 74 00                                Zrusit.

000007c0 <text_ulozit>:
     7c0:	55 6c 6f 7a 69 74 00                                Ulozit.

000007c7 <text_no>:
     7c7:	4e 65 00                                            Ne.

000007ca <text_yes>:
     7ca:	41 6e 6f 00                                         Ano.

000007ce <text_upozorneni>:
     7ce:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

000007d9 <new_text_mqtt_check>:
     7d9:	4d 51 54 54 20 6f 76 65 72 69 74 20 73 70 6f 6a     MQTT overit spoj
     7e9:	65 6e 69 00                                         eni.

000007ed <new_text_mqtt_pass>:
     7ed:	4d 51 54 54 20 68 65 73 6c 6f 00                    MQTT heslo.

000007f8 <new_text_mqtt_user>:
     7f8:	4d 51 54 54 20 75 7a 69 76 61 74 65 6c 00           MQTT uzivatel.

00000806 <new_text_mqtt_broker>:
     806:	4d 51 54 54 20 73 65 72 76 65 72 00                 MQTT server.

00000812 <new_text_nastaveni_mqtt_pripojeni>:
     812:	4e 61 73 74 61 76 65 6e 69 20 4d 51 54 54 00        Nastaveni MQTT.

00000821 <text_select_default_temp>:
     821:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
     831:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

0000083b <new_text_time_set_date_manualy>:
     83b:	52 75 63 6e 69 20 6e 61 73 74 61 76 65 6e 69 20     Rucni nastaveni 
     84b:	64 61 74 75 6d 75 00                                datumu.

00000852 <new_text_time_set_time_manualy>:
     852:	52 75 63 6e 69 20 6e 61 73 74 61 76 65 6e 69 20     Rucni nastaveni 
     862:	63 61 73 75 00                                      casu.

00000867 <new_text_time_set_offset>:
     867:	4e 54 50 20 70 6f 73 75 6e 75 74 69 20 63 61 73     NTP posunuti cas
     877:	75 00                                               u.

00000879 <new_text_ntp_set_server>:
     879:	4e 61 73 74 61 76 65 6e 69 20 4e 54 50 20 73 65     Nastaveni NTP se
     889:	72 76 65 72 75 00                                   rveru.

0000088f <text_ntp_sync_time>:
     88f:	41 6b 74 75 61 6c 69 7a 61 63 65 20 63 61 73 75     Aktualizace casu
	...

000008a0 <new_text_nastaveni_casu>:
     8a0:	4e 61 73 74 61 76 65 6e 69 20 63 61 73 75 00        Nastaveni casu.

000008af <new_text_scan_onewire_bus>:
     8af:	53 63 61 6e 20 73 62 65 72 6e 69 63 65 00           Scan sbernice.

000008bd <new_text_set_network_test_connection>:
     8bd:	54 65 73 74 20 70 72 69 70 6f 6a 65 6e 69 00        Test pripojeni.

000008cc <new_text_set_network_ip>:
     8cc:	4e 61 73 74 61 76 65 6e 69 20 49 50 00              Nastaveni IP.

000008d9 <new_text_set_network_mask>:
     8d9:	4e 61 73 74 61 76 65 6e 69 20 6d 61 73 6b 79 20     Nastaveni masky 
     8e9:	73 69 74 65 00                                      site.

000008ee <new_text_set_network_gw>:
     8ee:	4e 61 73 74 61 76 65 6e 69 20 76 79 63 68 6f 7a     Nastaveni vychoz
     8fe:	69 20 62 72 61 6e 79 00                             i brany.

00000906 <new_text_set_network_name>:
     906:	4e 61 73 74 61 76 65 6e 69 20 6e 61 7a 76 75 20     Nastaveni nazvu 
     916:	7a 61 72 69 7a 65 6e 69 00                          zarizeni.

0000091f <new_text_set_network_dns>:
     91f:	4e 61 73 74 61 76 65 6e 69 20 44 4e 53 20 73 65     Nastaveni DNS se
     92f:	72 76 65 72 75 00                                   rveru.

00000935 <new_text_set_network_mac>:
     935:	4e 61 73 74 61 76 65 6e 69 20 4d 41 43 20 61 64     Nastaveni MAC ad
     945:	72 65 73 79 00                                      resy.

0000094a <button_zpet>:
     94a:	5a 70 65 74 00                                      Zpet.

0000094f <nastaveni_site>:
     94f:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

0000095e <char_NULL>:
	...

0000095f <nastaveni_text>:
     95f:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

00000969 <funkce_text>:
     969:	46 75 6e 6b 63 65 00                                Funkce.

00000970 <regulator_text>:
     970:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

0000097a <rf24_pa_dbm_e_str_3>:
     97a:	50 41 5f 4d 41 58 00                                PA_MAX.

00000981 <rf24_pa_dbm_e_str_2>:
     981:	50 41 5f 48 49 47 48 00                             PA_HIGH.

00000989 <rf24_pa_dbm_e_str_1>:
     989:	50 41 5f 4c 4f 57 00                                PA_LOW.

00000990 <rf24_pa_dbm_e_str_0>:
     990:	50 41 5f 4d 49 4e 00                                PA_MIN.

00000997 <rf24_crclength_e_str_2>:
     997:	31 36 20 62 69 74 73 00                             16 bits.

0000099f <rf24_crclength_e_str_1>:
     99f:	38 20 62 69 74 73 00                                8 bits.

000009a6 <rf24_crclength_e_str_0>:
     9a6:	44 69 73 61 62 6c 65 64 00                          Disabled.

000009af <rf24_model_e_str_1>:
     9af:	6e 52 46 32 34 4c 30 31 2b 00                       nRF24L01+.

000009b9 <rf24_model_e_str_0>:
     9b9:	6e 52 46 32 34 4c 30 31 00                          nRF24L01.

000009c2 <rf24_datarate_e_str_2>:
     9c2:	32 35 30 4b 42 50 53 00                             250KBPS.

000009ca <rf24_datarate_e_str_1>:
     9ca:	32 4d 42 50 53 00                                   2MBPS.

000009d0 <rf24_datarate_e_str_0>:
     9d0:	31 4d 42 50 53 00                                   1MBPS.

000009d6 <Menu_All>:
     9d6:	06 05 09 07 7e 70 70 09 22 01 96 00 aa 00 28 00     ....~pp.".....(.
     9e6:	02 05 ae 46 30 a0 49 69 09 22 01 5a 00 aa 00 28     ...F0.Ii.".Z...(
     9f6:	00 02 01 ae 46 30 a0 49 5f 09 22 01 1e 00 aa 00     ....F0.I_.".....
     a06:	28 00 02 02 90 aa 30 a0 49 00 00 00 00 00 00 00     (.....0.I.......
	...
     a86:	5e 72 0a 00 dc 00 52 00 3c 00 03 9a d6 ff ff 00     ^r....R.<.......
     a96:	f8 67 11 68 22 a0 49 44 72 64 00 dc 00 52 00 3c     .g.h".IDrd...R.<
     aa6:	00 03 00 f8 ff ff 01 f8 67 11 68 22 a0 49 2a 72     ........g.h".I*r
     ab6:	be 00 dc 00 52 00 3c 00 03 1f 00 ff ff 07 f8 67     ....R.<........g
     ac6:	11 68 22 a0 49 0e 72 18 01 dc 00 52 00 3c 00 03     .h".I.r....R.<..
     ad6:	e0 ff ff ff 02 f8 67 11 68 22 a0 49 f6 71 72 01     ......g.h".I.qr.
     ae6:	dc 00 52 00 3c 00 03 e0 07 ff ff 08 f8 67 11 68     ..R.<........g.h
     af6:	22 a0 49 0a 00 82 00 00 39 71 00 00 00 00 14 ae     ".I.....9q......
     b06:	46 a0 49 5e 09 18 01 22 01 00 2f 58 00 00 00 00     F.I^..."../X....
     b16:	18 ae 46 a0 49 5e 09 0a 00 1e 00 00 a8 53 00 00     ..F.I^.......S..
     b26:	00 00 11 ae 46 a0 49 5e 09 0a 00 1e 00 00 bb 55     ....F.I^.......U
     b36:	00 00 00 00 20 ae 46 a0 49 5e 09 0a 00 82 00 00     .... .F.I^......
     b46:	a5 71 00 00 00 00 20 ae 46 a0 49 5e 09 00 00 00     .q.... .F.I^....
	...
     ca6:	00 00 00 03 05 05 00 00 00 00 00 00 00 00 00 00     ................
     cb6:	e0 01 40 01 01 ff ff 20 f0 47 e7 47 de 47 b4 47     ..@.... .G.G.G.G
     cc6:	a2 49 4f 09 4a 09 0a 00 dc 00 be 00 28 00 02 00     .IO.J.......(...
     cd6:	a3 aa 10 a0 49 35 09 18 01 dc 00 be 00 1e 00 01     ....I5..........
     ce6:	00 ae 46 10 a0 49 1f 09 18 01 b4 00 be 00 1e 00     ..F..I..........
     cf6:	01 00 ae 46 10 a0 49 06 09 18 01 8c 00 be 00 1e     ...F..I.........
     d06:	00 01 00 ae 46 10 a0 49 ee 08 18 01 64 00 be 00     ....F..I....d...
     d16:	1e 00 01 00 ae 46 10 a0 49 d9 08 18 01 3c 00 be     .....F..I....<..
     d26:	00 1e 00 01 00 ae 46 10 a0 49 cc 08 18 01 14 00     ......F..I......
     d36:	be 00 1e 00 01 00 ae 46 10 a0 49 bd 08 0a 00 aa     .......F..I.....
     d46:	00 be 00 28 00 01 00 d9 7e 10 a0 49 00 00 00 00     ...(....~..I....
	...
     de6:	00 0a 00 28 00 00 57 75 c8 00 78 00 10 ae 46 a0     ...(..Wu..x...F.
     df6:	49 5e 09 00 00 00 00 00 00 00 00 00 00 00 00 00     I^..............
	...
     f96:	00 08 00 01 00 00 00 00 00 10 00 00 00 00 e0 01     ................
     fa6:	40 01 01 ff ff 10 a2 49 a2 49 a2 49 a2 49 a2 49     @......I.I.I.I.I
     fb6:	6f 71 4a 09 0a 00 dc 00 be 00 28 00 02 00 a3 aa     oqJ.......(.....
     fc6:	10 a0 49 af 08 0a 00 28 00 be 00 28 00 02 00 d8     ..I....(...(....
     fd6:	6b 10 a0 49 00 00 00 00 00 00 00 00 00 00 00 00     k..I............
	...
    10d2:	00 00 00 18 01 22 01 00 2f 58 00 00 00 00 18 ae     ....."../X......
    10e2:	46 a0 49 5e 09 9a 01 48 00 00 55 56 28 00 7e 00     F.I^...H..UV(.~.
    10f2:	10 ae 46 a0 49 5e 09 dc 00 14 00 00 00 56 f0 00     ..F.I^.......V..
    1102:	f0 00 10 ae 46 a0 49 5e 09 00 00 00 00 00 00 00     ....F.I^........
	...
    1172:	00 00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01     ....#...7..<<...
    1182:	00 01 74 76 95 55 36 47 10 00 00 00 00 00 00 00     ..tv.U6G........
	...
    11a2:	2b 9a 01 1e 00 28 00 28 00 02 00 45 47 10 a0 49     +....(.(...EG..I
    11b2:	2d 9a 01 c8 00 28 00 28 00 02 00 53 47 10 a0 49     -....(.(...SG..I
	...
    1282:	00 00 00 02 00 03 00 01 02 00 00 03 00 00 00 00     ................
    1292:	e0 01 40 01 01 ff ff 10 a2 49 a2 49 a2 49 a2 49     ..@......I.I.I.I
    12a2:	a2 49 a0 08 4a 09 0a 00 dc 00 be 00 28 00 02 00     .I..J.......(...
    12b2:	a3 aa 10 a0 49 8f 08 0a 00 28 00 be 00 28 00 01     ....I....(...(..
    12c2:	00 9b 6e 10 a0 49 79 08 0a 00 64 00 be 00 28 00     ..n..Iy...d...(.
    12d2:	01 00 29 55 10 a0 49 67 08 0a 00 a0 00 be 00 28     ..)U..Ig.......(
    12e2:	00 01 00 5f 6e 10 a0 49 52 08 18 01 28 00 be 00     ..._n..IR...(...
    12f2:	28 00 01 00 dd 54 10 a0 49 3b 08 18 01 64 00 be     (....T..I;...d..
    1302:	00 28 00 01 00 8c 54 10 a0 49 00 00 00 00 00 00     .(....T..I......
	...
    13c2:	00 18 01 22 01 00 2f 58 00 00 00 00 18 ae 46 a0     ..."../X......F.
    13d2:	49 5e 09 00 00 00 00 00 00 00 00 00 00 00 00 00     I^..............
	...
    1572:	00 06 00 01 00 00 00 00 00 99 00 00 00 00 e0 01     ................
    1582:	40 01 01 ff ff 20 a2 49 a2 49 a2 49 a2 49 a2 49     @.... .I.I.I.I.I
    1592:	21 08 4a 09 0a 00 dc 00 be 00 28 00 02 00 a3 aa     !.J.......(.....
    15a2:	10 a0 49 00 00 00 00 00 00 00 00 00 00 00 00 00     ..I.............
	...
    16ae:	00 00 00 18 01 22 01 00 2f 58 00 00 00 00 18 ae     ....."../X......
    16be:	46 a0 49 5e 09 9a 01 48 00 02 55 56 28 00 56 00     F.I^...H..UV(.V.
    16ce:	10 ae 46 a0 49 5e 09 05 00 1e 00 00 00 56 cc 01     ..F.I^.......V..
    16de:	b4 00 10 ae 46 a0 49 5e 09 00 00 00 00 00 00 00     ....F.I^........
	...
    177e:	2b 9a 01 1e 00 28 00 28 00 02 02 45 47 10 a0 49     +....(.(...EG..I
    178e:	2d 9a 01 a0 00 28 00 28 00 02 02 53 47 10 a0 49     -....(.(...SG..I
	...
    1842:	00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff ff 82     ...(.x.<........
    1852:	50 02 03 02 02 00 f3 6f 28 66 29 47 23 47 10 01     P......o(f)G#G..
    1862:	00 03 00 00 02 00 01 08 00 00 00 00 e0 01 40 01     ..............@.
    1872:	01 ff ff 10 a2 49 a2 49 a2 49 a2 49 a2 49 12 08     .....I.I.I.I.I..
    1882:	4a 09 0a 00 dc 00 be 00 28 00 02 00 a3 aa 10 a0     J.......(.......
    1892:	49 06 08 0a 00 28 00 be 00 28 00 01 00 3b 54 10     I....(...(...;T.
    18a2:	a0 49 f8 07 0a 00 64 00 be 00 28 00 01 00 1d 54     .I....d...(....T
    18b2:	10 a0 49 ed 07 0a 00 a0 00 be 00 28 00 01 00 ff     ..I........(....
    18c2:	53 10 a0 49 d9 07 18 01 28 00 be 00 28 00 01 00     S..I....(...(...
    18d2:	af 46 10 a0 49 00 00 00 00 00 00 00 00 00 00 00     .F..I...........
	...
    199e:	00 18 01 22 01 00 2f 58 00 00 00 00 18 ae 46 a0     ..."../X......F.
    19ae:	49 5e 09 00 00 00 00 00 00 00 00 00 00 00 00 00     I^..............
	...
    1b4e:	00 06 00 01 00 00 00 00 00 9a 00 00 00 00 e0 01     ................
    1b5e:	40 01 01 ff ff 10 a2 49 a2 49 a2 49 a2 49 a2 49     @......I.I.I.I.I
	...
    2726:	ce 07 ca 07 1e 00 3c 00 64 00 28 00 02 00 48 56     ......<.d.(...HV
    2736:	10 a0 49 c7 07 fa 00 3c 00 64 00 28 00 02 00 a3     ..I....<.d.(....
    2746:	aa 10 a0 49 00 00 00 00 00 00 00 00 00 00 00 00     ...I............
	...
    2842:	00 00 00 14 00 23 00 00 93 53 00 00 00 00 10 ae     .....#...S......
    2852:	46 a0 49 5e 09 00 00 00 00 00 00 00 00 00 00 00     F.I^............
	...
    29f2:	00 00 00 02 00 01 00 00 00 00 00 64 32 00 32 00     ...........d2.2.
    2a02:	7c 01 8c 00 06 e0 ff 10 a2 49 a2 49 a2 49 a2 49     |........I.I.I.I
    2a12:	a2 49 ce 07 c0 07 0a 00 c8 00 82 00 28 00 02 00     .I..........(...
    2a22:	2a 56 10 a0 49 b9 07 96 00 c8 00 82 00 28 00 02     *V..I........(..
    2a32:	00 a3 aa 10 a0 49 00 00 00 00 00 00 00 00 00 00     .....I..........
	...
    2b32:	00 64 00 2d 00 00 5b 57 b4 00 28 00 10 ae 46 a0     .d.-..[W..(...F.
    2b42:	49 5e 09 00 00 00 00 00 00 00 00 00 00 00 00 00     I^..............
	...
    2bfe:	00 00 2b 3c 00 2d 00 28 00 28 00 02 00 42 48 10     ..+<.-.(.(...BH.
    2c0e:	a0 49 2d 18 01 2d 00 28 00 28 00 02 00 87 48 10     .I-..-.(.(....H.
    2c1e:	a0 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .I..............
	...
    2ce2:	00 02 00 01 00 00 02 00 00 66 0a 00 0a 00 cc 01     .........f......
    2cf2:	04 01 06 e0 ff 10 a2 49 a2 49 a2 49 a2 49 a2 49     .......I.I.I.I.I
    2d02:	ae 07 c0 07 0a 00 c8 00 82 00 28 00 02 00 06 56     ..........(....V
    2d12:	10 a0 49 b9 07 96 00 c8 00 82 00 28 00 02 00 a3     ..I........(....
    2d22:	aa 10 a0 49 a4 07 2c 01 c8 00 82 00 28 00 02 00     ...I..,.....(...
    2d32:	8e 4c 10 a0 49 a2 07 40 01 23 00 28 00 28 00 02     .L..I..@.#.(.(..
    2d42:	00 04 48 10 a0 49 a0 07 6d 01 23 00 28 00 28 00     ..H..I..m.#.(.(.
    2d52:	02 01 04 48 10 a0 49 9e 07 9a 01 23 00 28 00 28     ...H..I....#.(.(
    2d62:	00 02 02 04 48 10 a0 49 00 00 00 00 00 00 00 00     ....H..I........
	...
    2e1e:	00 00 00 0a 00 23 00 00 d5 56 2c 01 28 00 10 ae     .....#...V,.(...
    2e2e:	46 a0 49 5e 09 00 00 00 00 00 00 00 00 00 00 00     F.I^............
	...
    2f6e:	0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00 00 03     ..P......((.....
    2f7e:	0e 48 b3 4c 07 48 10 00 00 00 00 00 00 00 00 00     .H.L.H..........
	...
    2fce:	00 00 00 06 00 01 00 00 00 01 00 67 0a 00 0a 00     ...........g....
    2fde:	cc 01 04 01 06 e0 ff 10 a2 49 a2 49 a2 49 a2 49     .........I.I.I.I
    2fee:	a2 49 ce 07 c0 07 0a 00 c8 00 82 00 28 00 02 00     .I..........(...
    2ffe:	06 56 10 a0 49 b9 07 96 00 c8 00 82 00 28 00 02     .V..I........(..
    300e:	00 a3 aa 10 a0 49 a4 07 2c 01 c8 00 82 00 28 00     .....I..,.....(.
    301e:	02 00 8e 4c 10 a0 49 00 00 00 00 00 00 00 00 00     ...L..I.........
	...
    310e:	00 0a 00 23 00 00 d5 56 2c 01 28 00 10 ae 46 a0     ...#...V,.(...F.
    311e:	49 5e 09 00 00 00 00 00 00 00 00 00 00 00 00 00     I^..............
	...
    325a:	00 00 0a 00 5a 00 23 00 23 00 02 2d 2d 02 0a 00     ....Z.#.#..--...
    326a:	00 02 2e 48 cc 4c 40 48 10 00 00 00 00 00 00 00     ...H.L@H........
	...
    32be:	00 03 00 01 00 00 00 01 00 65 0a 00 0a 00 cc 01     .........e......
    32ce:	04 01 06 e0 ff 10 a2 49 a2 49 a2 49 a2 49 a2 49     .......I.I.I.I.I
    32de:	ce 07 9b 07 fa 00 3c 00 64 00 28 00 02 00 a3 aa     ......<.d.(.....
    32ee:	10 a0 49 00 00 00 00 00 00 00 00 00 00 00 00 00     ..I.............
	...
    33fa:	00 00 00 14 00 23 00 00 93 53 00 00 00 00 10 ae     .....#...S......
    340a:	46 a0 49 5e 09 00 00 00 00 00 00 00 00 00 00 00     F.I^............
	...
    35aa:	00 00 00 01 00 01 00 00 00 00 00 68 32 00 32 00     ...........h2.2.
    35ba:	7c 01 8c 00 06 e0 ff 10 a2 49 a2 49 a2 49 a2 49     |........I.I.I.I
    35ca:	a2 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .I..............
	...
    3ba6:	00 00 80 07 4a 09 0a 00 dc 00 be 00 28 00 02 00     ....J.......(...
    3bb6:	a3 aa 10 a0 49 72 07 18 01 be 00 be 00 28 00 02     ....Ir.......(..
    3bc6:	00 4c 6c 10 a0 49 ca 70 18 01 8c 00 be 00 28 00     .Ll..I.p......(.
    3bd6:	02 00 02 6d 10 a0 49 63 07 18 01 5a 00 be 00 28     ...m..Ic...Z...(
    3be6:	00 02 00 c1 6c 10 a0 49 53 07 18 01 28 00 be 00     ....l..IS...(...
    3bf6:	28 00 02 00 56 6d 10 a0 49 00 00 00 00 00 00 00     (...Vm..I.......
	...
    3cc6:	00 18 01 22 01 00 2f 58 00 00 00 00 18 ae 46 a0     ..."../X......F.
    3cd6:	49 5e 09 14 00 14 00 00 f7 76 00 00 00 00 10 ae     I^.......v......
    3ce6:	46 a0 49 5e 09 14 00 14 00 00 57 6c 00 00 00 00     F.I^......Wl....
    3cf6:	14 ae 46 a0 49 5e 09 00 00 00 00 00 00 00 00 00     ..F.I^..........
	...
    3e76:	00 05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01     ................
    3e86:	40 01 01 ff ff 10 a2 49 a2 49 a2 49 a2 49 a2 49     @......I.I.I.I.I
    3e96:	60 71 4a 09 0a 00 dc 00 be 00 28 00 02 00 a3 aa     `qJ.......(.....
    3ea6:	10 a0 49 72 07 18 01 5a 00 be 00 28 00 02 00 66     ..Ir...Z...(...f
    3eb6:	66 10 a0 49 63 07 18 01 28 00 be 00 28 00 02 00     f..Ic...(...(...
    3ec6:	b4 74 10 a0 49 43 07 18 01 8c 00 be 00 28 00 02     .t..IC.......(..
    3ed6:	00 b1 74 10 a0 49 00 00 00 00 00 00 00 00 00 00     ..t..I..........
	...
    3fb2:	00 00 00 14 00 14 00 00 35 72 00 00 00 00 14 ae     ........5r......
    3fc2:	46 a0 49 5e 09 00 00 00 00 00 00 00 00 00 00 00     F.I^............
	...
    4162:	00 00 00 04 00 01 00 00 00 00 00 07 00 00 00 00     ................
    4172:	e0 01 40 01 01 ff ff 10 a2 49 a2 49 a2 49 a2 49     ..@......I.I.I.I
    4182:	a2 49 60 71 4a 09 0a 00 dc 00 be 00 28 00 02 00     .I`qJ.......(...
    4192:	a3 aa 10 a0 49 28 07 0a 00 28 00 be 00 28 00 01     ....I(...(...(..
    41a2:	00 79 6f 10 a0 49 00 00 00 00 00 00 00 00 00 00     .yo..I..........
	...
    42a2:	00 dc 00 14 00 00 00 56 f0 00 f0 00 10 ae 46 a0     .......V......F.
    42b2:	49 5e 09 18 01 22 01 00 2f 58 00 00 00 00 18 ae     I^..."../X......
    42c2:	46 a0 49 5e 09 9a 01 48 00 01 55 56 28 00 7e 00     F.I^...H..UV(.~.
    42d2:	10 ae 46 a0 49 5e 09 00 00 00 00 00 00 00 00 00     ..F.I^..........
	...
    4342:	e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 01 04     ..#...7..<<.....
    4352:	ff 71 44 6f 43 47 10 00 00 00 00 00 00 00 00 00     .qDoCG..........
	...
    436e:	00 00 2b 9a 01 1e 00 28 00 28 00 02 01 45 47 10     ..+....(.(...EG.
    437e:	a0 49 2d 9a 01 c8 00 28 00 28 00 02 01 53 47 10     .I-....(.(...SG.
    438e:	a0 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .I..............
	...
    4452:	00 02 00 03 00 01 02 00 00 06 00 00 00 00 e0 01     ................
    4462:	40 01 01 ff ff 10 a2 49 a2 49 a2 49 a2 49 a2 49     @......I.I.I.I.I
    4472:	13 07 4a 09 0a 00 dc 00 be 00 28 00 02 00 a3 aa     ..J.......(.....
    4482:	10 a0 49 03 07 0a 00 78 00 be 00 28 00 01 00 ae     ..I....x...(....
    4492:	46 20 a0 49 00 00 00 00 00 00 00 00 00 00 00 00     F .I............
	...
    458e:	00 00 00 18 01 22 01 00 2f 58 00 00 00 00 18 ae     ....."../X......
    459e:	46 a0 49 5e 09 9a 01 48 00 04 55 56 28 00 7e 00     F.I^...H..UV(.~.
    45ae:	28 ae 46 a0 49 5e 09 00 00 00 00 00 00 00 00 00     (.F.I^..........
	...
    462e:	00 00 0a 00 28 00 be 00 37 00 01 01 01 00 01 01     ....(...7.......
    463e:	00 01 7d 69 8e 55 98 47 20 e6 00 28 00 aa 00 37     ..}i.U.G ..(...7
    464e:	00 01 3c 3c 00 03 01 04 05 42 69 88 55 98 47 28     ..<<.....Bi.U.G(
    465e:	2b 9a 01 1e 00 28 00 28 00 02 04 45 47 20 a0 49     +....(.(...EG .I
    466e:	2d 9a 01 c8 00 28 00 28 00 02 04 53 47 20 a0 49     -....(.(...SG .I
	...
    473e:	00 00 00 02 00 02 00 02 02 00 00 9e 00 00 00 00     ................
    474e:	e0 01 40 01 01 ff ff 20 a2 49 a2 49 a2 49 ab 47     ..@.... .I.I.I.G
    475e:	a2 49 e8 06 4a 09 0a 00 dc 00 be 00 28 00 02 00     .I..J.......(...
    476e:	a3 aa 10 a0 49 00 00 00 00 00 00 00 00 00 00 00     ....I...........
	...
    4a0e:	00 00 00 0a 00 28 00 78 00 32 00 02 01 e0 07 ff     .....(.x.2......
    4a1e:	ff 82 3c 02 03 03 ff 05 bc 69 31 68 98 47 5e 68     ..<......i1h.G^h
    4a2e:	21 01 00 00 00 00 00 00 01 0a 0a 00 0a 00 cc 01     !...............
    4a3e:	2c 01 06 e0 ff 20 a2 47 a2 49 a2 49 a2 49 a2 49     ,.... .G.I.I.I.I
    4a4e:	de 06 4a 09 0a 00 dc 00 be 00 28 00 02 00 a3 aa     ..J.......(.....
    4a5e:	10 a0 49 63 07 18 01 28 00 be 00 28 00 02 00 0a     ..Ic...(...(....
    4a6e:	69 20 a0 49 c7 71 0a 00 28 00 be 00 28 00 01 00     i .I.q..(...(...
    4a7e:	cf 68 20 7e 67 d8 71 0a 00 28 00 be 00 28 00 01     .h ~g.q..(...(..
    4a8e:	00 94 68 20 87 67 cf 06 18 01 64 00 be 00 28 00     ..h .g....d...(.
    4a9e:	02 0b 90 aa 20 a0 49 bf 06 18 01 a0 00 be 00 28     .... .I........(
    4aae:	00 01 00 ae 46 20 a0 49 b5 06 18 01 dc 00 be 00     ....F .I........
    4abe:	28 00 02 0c 90 aa 20 a0 49 9d 06 0a 00 64 00 be     (..... .I....d..
    4ace:	00 28 00 01 9f 90 aa 20 a0 49 00 00 00 00 00 00     .(..... .I......
	...
    4b6a:	00 00 00 18 01 22 01 00 2f 58 00 00 00 00 18 ae     ....."../X......
    4b7a:	46 a0 49 5e 09 8c 00 05 00 00 0b 6a 00 00 00 00     F.I^.......j....
    4b8a:	20 ae 46 a0 49 5e 09 00 00 00 00 00 00 00 00 00      .F.I^..........
	...
    4d1a:	00 00 00 08 00 02 00 00 00 00 00 09 00 00 00 00     ................
    4d2a:	e0 01 40 01 01 ff ff 20 a2 49 a2 49 a2 49 a2 49     ..@.... .I.I.I.I
    4d3a:	a2 49 cf 06 4a 09 0a 00 dc 00 be 00 28 00 02 00     .I..J.......(...
    4d4a:	a3 aa 10 a0 49 8f 06 d2 00 dc 00 aa 00 28 00 02     ....I........(..
    4d5a:	00 a1 63 20 a0 49 00 00 00 00 00 00 00 00 00 00     ..c .I..........
	...
    4e5a:	00 9a 01 52 00 03 55 56 28 00 56 00 20 ae 46 a0     ...R..UV(.V. .F.
    4e6a:	49 5e 09 00 00 00 00 00 00 00 00 00 00 00 00 00     I^..............
	...
    4f26:	00 00 2b 9a 01 28 00 28 00 28 00 02 03 45 47 20     ..+..(.(.(...EG 
    4f36:	a0 49 2d 9a 01 aa 00 28 00 28 00 02 03 53 47 20     .I-....(.(...SG 
    4f46:	a0 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .I..............
	...
    4fea:	00 00 00 0a 00 28 00 78 00 32 00 01 01 e0 07 ff     .....(.x.2......
    4ffa:	ff 82 3c 02 03 03 03 01 92 70 aa 63 29 47 7f 6a     ..<......p.c)G.j
    500a:	20 02 00 01 00 00 02 00 01 0b 0a 00 0a 00 cc 01      ...............
    501a:	2c 01 06 e0 ff 20 a2 49 a2 49 a2 49 a2 49 a2 49     ,.... .I.I.I.I.I
    502a:	79 06 4a 09 0a 00 dc 00 be 00 28 00 02 00 a3 aa     y.J.......(.....
    503a:	10 a0 49 00 00 00 00 00 00 00 00 00 00 00 00 00     ..I.............
	...
    50d6:	72 06 0a 00 a0 00 5a 00 28 00 01 00 f8 ff ff 03     r.....Z.(.......
    50e6:	a5 67 5b 6a 22 90 67 69 06 6e 00 a0 00 5a 00 28     .g[j".gi.n...Z.(
    50f6:	00 01 1f 00 ff ff 05 a5 67 5b 6a 22 90 67 00 00     ........g[j".g..
	...
    5146:	00 00 00 32 00 28 00 00 5b 57 6e 00 28 00 23 ae     ...2.(..[Wn.(.#.
    5156:	46 90 67 5e 09 00 00 00 00 00 00 00 00 00 00 00     F.g^............
	...
    5216:	2b a0 00 28 00 28 00 28 00 02 00 42 48 22 90 67     +..(.(.(...BH".g
    5226:	2d 0a 00 28 00 28 00 28 00 02 00 87 48 22 90 67     -..(.(.(....H".g
	...
    52da:	00 e6 00 28 00 c8 00 28 00 02 01 e0 07 ff ff 01     ...(...(........
    52ea:	32 00 05 01 ff 05 2e 4a 8c 62 98 47 c4 67 22 01     2......J.b.G.g".
    52fa:	02 01 00 00 02 00 01 9f 0a 00 0a 00 cc 01 2c 01     ..............,.
    530a:	06 e0 ff 20 99 47 e7 47 a2 49 a2 49 39 67 95 6f     ... .G.G.I.I9g.o
    531a:	4a 09 0a 00 dc 00 be 00 28 00 02 00 a3 aa 10 a0     J.......(.......
    532a:	49 59 06 0a 00 28 00 be 00 28 00 01 00 d2 61 10     IY...(...(....a.
    533a:	a0 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .I..............
	...
    5436:	00 0e 01 28 00 00 5b 57 8c 00 28 00 10 ae 46 a0     ...(..[W..(...F.
    5446:	49 57 06 0e 01 5a 00 01 5b 57 8c 00 28 00 10 ae     IW...Z..[W..(...
    5456:	46 a0 49 55 06 0e 01 8c 00 02 5b 57 8c 00 28 00     F.IU......[W..(.
    5466:	10 ae 46 a0 49 53 06 0e 01 be 00 03 5b 57 8c 00     ..F.IS......[W..
    5476:	28 00 10 ae 46 a0 49 51 06 00 00 00 00 00 00 00     (...F.IQ........
	...
    5502:	00 00 2b 9a 01 28 00 28 00 28 00 02 00 42 48 10     ..+..(.(.(...BH.
    5512:	a0 49 2d e6 00 28 00 28 00 28 00 02 00 87 48 10     .I-..(.(.(....H.
    5522:	a0 49 2b 9a 01 5a 00 28 00 28 00 02 01 42 48 10     .I+..Z.(.(...BH.
    5532:	a0 49 2d e6 00 5a 00 28 00 28 00 02 01 87 48 10     .I-..Z.(.(....H.
    5542:	a0 49 2b 9a 01 8c 00 28 00 28 00 02 02 42 48 10     .I+....(.(...BH.
    5552:	a0 49 2d e6 00 8c 00 28 00 28 00 02 02 87 48 10     .I-....(.(....H.
    5562:	a0 49 2b 9a 01 be 00 28 00 28 00 02 03 42 48 10     .I+....(.(...BH.
    5572:	a0 49 2d e6 00 be 00 28 00 28 00 02 03 87 48 10     .I-....(.(....H.
    5582:	a0 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .I..............
	...
    55e6:	00 02 00 04 00 00 08 00 00 0c 0a 00 0a 00 cc 01     ................
    55f6:	2c 01 06 e0 ff 10 a2 49 a2 49 a2 49 a2 49 cc 48     ,......I.I.I.I.H
	...
    58f2:	00 00 3f 06 4a 09 0a 00 dc 00 be 00 28 00 02 00     ..?.J.......(...
    5902:	a3 aa 10 a0 49 4f 09 0a 00 28 00 be 00 28 00 02     ....IO...(...(..
    5912:	10 90 aa 10 a0 49 31 06 0a 00 64 00 be 00 28 00     .....I1...d...(.
    5922:	02 00 ae 46 10 a0 49 21 06 18 01 a0 00 be 00 28     ...F..I!.......(
    5932:	00 02 00 92 65 10 a0 49 a0 08 18 01 28 00 be 00     ....e..I....(...
    5942:	28 00 02 99 90 aa 10 a0 49 16 06 18 01 64 00 be     (.......I....d..
    5952:	00 28 00 02 9c 90 aa 10 a0 49 12 08 0a 00 a0 00     .(.......I......
    5962:	be 00 28 00 02 9a 90 aa 10 a0 49 05 06 18 01 dc     ..(.......I.....
    5972:	00 be 00 28 00 01 00 ab 46 10 a0 49 00 00 00 00     ...(....F..I....
	...
    5a12:	00 18 01 22 01 00 2f 58 00 00 00 00 18 ae 46 a0     ..."../X......F.
    5a22:	49 5e 09 00 00 00 00 00 00 00 00 00 00 00 00 00     I^..............
	...
    5bc2:	00 08 00 01 00 00 00 00 00 96 00 00 00 00 e0 01     ................
    5bd2:	40 01 01 ff ff 10 a2 49 a2 49 a2 49 a2 49 a2 49     @......I.I.I.I.I
    5be2:	5f 09 4a 09 0a 00 dc 00 be 00 28 00 02 00 a3 aa     _.J.......(.....
    5bf2:	10 a0 49 fa 05 0a 00 28 00 be 00 28 00 02 96 90     ..I....(...(....
    5c02:	aa 20 a0 49 ec 05 18 01 28 00 be 00 28 00 02 9e     . .I....(...(...
    5c12:	90 aa 20 a0 49 df 05 0a 00 a0 00 be 00 28 00 02     .. .I........(..
    5c22:	98 90 aa 20 a0 49 d2 05 0a 00 64 00 be 00 28 00     ... .I....d...(.
    5c32:	02 97 90 aa 20 a0 49 00 00 00 00 00 00 00 00 00     .... .I.........
	...
    5cfe:	00 00 00 18 01 22 01 00 2f 58 00 00 00 00 18 ae     ....."../X......
    5d0e:	46 a0 49 5e 09 00 00 00 00 00 00 00 00 00 00 00     F.I^............
	...
    5eae:	00 00 00 05 00 01 00 00 00 00 00 02 00 00 00 00     ................
    5ebe:	e0 01 40 01 01 ff ff 20 a2 49 a2 49 a2 49 a2 49     ..@.... .I.I.I.I
    5ece:	a2 49 be 05 4a 09 0a 00 dc 00 be 00 28 00 02 00     .I..J.......(...
    5ede:	a3 aa 10 a0 49 6f 71 0a 00 28 00 be 00 28 00 02     ....Ioq..(...(..
    5eee:	03 90 aa 10 a0 49 b3 05 0a 00 64 00 be 00 28 00     .....I....d...(.
    5efe:	02 06 90 aa 10 a0 49 a9 05 0a 00 a0 00 be 00 28     ......I........(
    5f0e:	00 02 00 ae 46 10 a0 49 00 00 00 00 00 00 00 00     ....F..I........
	...
    5fee:	00 18 01 22 01 00 2f 58 00 00 00 00 18 ae 46 a0     ..."../X......F.
    5ffe:	49 5e 09 00 00 00 00 00 00 00 00 00 00 00 00 00     I^..............
	...
    619e:	00 04 00 01 00 00 00 00 00 97 00 00 00 00 e0 01     ................
    61ae:	40 01 01 ff ff 10 a2 49 a2 49 a2 49 a2 49 a2 49     @......I.I.I.I.I
    61be:	95 05 4a 09 0a 00 dc 00 be 00 28 00 02 00 a3 aa     ..J.......(.....
    61ce:	10 a0 49 21 08 0a 00 28 00 be 00 28 00 01 08 90     ..I!...(...(....
    61de:	aa 10 a0 49 00 00 00 00 00 00 00 00 00 00 00 00     ...I............
	...
    62da:	00 00 00 18 01 22 01 00 2f 58 00 00 00 00 18 ae     ....."../X......
    62ea:	46 a0 49 5e 09 00 00 00 00 00 00 00 00 00 00 00     F.I^............
	...
    637a:	00 00 0a 00 64 00 be 00 28 00 01 01 01 00 01 01     ....d...(.......
    638a:	00 01 a3 4a 82 55 98 47 10 00 00 00 00 00 00 00     ...J.U.G........
	...
    646e:	00 0a 00 a0 00 be 00 28 00 01 01 e0 07 ff ff 01     .......(........
    647e:	32 00 01 01 ff 01 30 4b 7c 55 98 47 e2 46 10 02     2.....0K|U.G.F..
    648e:	00 01 00 01 00 00 01 98 00 00 00 00 e0 01 40 01     ..............@.
    649e:	01 ff ff 10 a2 49 a2 49 a2 49 a2 49 a2 49 95 05     .....I.I.I.I.I..
    64ae:	4a 09 0a 00 dc 00 be 00 28 00 02 00 a3 aa 10 a0     J.......(.......
    64be:	49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     I...............
	...
    65ca:	00 0e 01 28 00 00 5b 57 8c 00 28 00 10 ae 46 e8     ...(..[W..(...F.
    65da:	46 5e 09 00 00 00 00 00 00 00 00 00 00 00 00 00     F^..............
	...
    6622:	00 00 00 85 05 0a 00 28 00 be 00 28 00 01 e0 07     .......(...(....
    6632:	ff ff 00 fb 65 1d 47 66 4a 10 00 00 00 00 00 00     ....e.GfJ.......
	...
    6696:	00 00 2b 9a 01 28 00 28 00 28 00 02 00 42 48 10     ..+..(.(.(...BH.
    66a6:	e8 46 2d e6 00 28 00 28 00 28 00 02 00 87 48 10     .F-..(.(.(....H.
    66b6:	e8 46 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .F..............
	...
    677a:	00 01 00 01 01 00 02 00 00 9b 0a 00 0a 00 cc 01     ................
    678a:	18 01 06 e0 ff 10 a2 49 a2 49 a2 49 a2 49 ef 46     .......I.I.I.I.F
    679a:	16 06 4a 09 0a 00 dc 00 be 00 28 00 02 00 a3 aa     ..J.......(.....
    67aa:	10 a0 49 00 00 00 00 00 00 00 00 00 00 00 00 00     ..I.............
	...
    68b6:	00 00 00 18 01 22 01 00 2f 58 00 00 00 00 18 ae     ....."../X......
    68c6:	46 a0 49 5e 09 0a 00 1e 00 00 c9 51 00 00 00 00     F.I^.......Q....
    68d6:	10 ae 46 a0 49 5e 09 00 00 00 00 00 00 00 00 00     ..F.I^..........
	...
    6a66:	00 00 00 01 00 02 00 00 00 00 00 9c 00 00 00 00     ................
    6a76:	e0 01 40 01 01 ff ff 10 a2 49 a2 49 a2 49 a2 49     ..@......I.I.I.I
    6a86:	a2 49 9e 72 4a 09 0a 00 dc 00 be 00 28 00 02 00     .I.rJ.......(...
    6a96:	a3 aa 10 a0 49 00 00 00 00 00 00 00 00 00 00 00     ....I...........
	...
    6d36:	00 00 00 0a 00 28 00 64 00 28 00 01 01 e0 07 ff     .....(.d.(......
    6d46:	ff 6e 32 02 04 02 ff 06 02 4b a8 65 98 47 b0 46     .n2......K.e.G.F
    6d56:	10 01 00 00 01 00 00 00 01 9d 0a 00 0a 00 cc 01     ................
    6d66:	18 01 06 e0 ff 10 a2 49 a2 49 a2 49 a2 49 ef 46     .......I.I.I.I.F

00006d76 <keyboad_number_char_special>:
    6d76:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    6d86:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

00006d90 <keyboad_number_char_lower>:
    6d90:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    6da0:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

00006daa <keyboad_number_char_upper>:
    6daa:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    6dba:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

00006dc4 <network_name>:
    6dc4:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

00006dd1 <network_mqtt_key>:
    6dd1:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

00006de2 <network_mqtt_user>:
    6de2:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    6df2:	72 00                                               r.

00006df4 <network_mqtt_port>:
    6df4:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    6e04:	74 00                                               t.

00006e06 <network_mqtt_host>:
    6e06:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    6e16:	74 00                                               t.

00006e18 <network_ntp>:
    6e18:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

00006e24 <network_dns>:
    6e24:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

00006e30 <network_gw>:
    6e30:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

00006e3b <network_netmask>:
    6e3b:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

00006e4b <network_mac>:
    6e4b:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

00006e57 <new_text_slash_rtds_control_list>:
    6e57:	2f 72 74 64 73 2d 63 6f 6e 74 72 6f 6c 2f 6c 69     /rtds-control/li
    6e67:	73 74 00                                            st.

00006e6a <new_text_slash_rtds_slash>:
    6e6a:	2f 72 74 64 73 2f 00                                /rtds/.

00006e71 <global_time_offset>:
    6e71:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    6e81:	6f 66 66 73 65 74 00                                offset.

00006e88 <global_time_ntp>:
    6e88:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

00006e98 <global_time_set>:
    6e98:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

00006ea8 <termbig_header_out>:
    6ea8:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

00006eb6 <termbig_subscribe>:
    6eb6:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    6ec6:	73 63 72 69 62 65 00                                scribe.

00006ecd <thermctl_subscribe>:
    6ecd:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    6edd:	62 73 63 72 69 62 65 00                             bscribe.

00006ee5 <lightctl_header_out>:
    6ee5:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

00006ef4 <thermctl_header_in>:
    6ef4:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

00006f02 <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    6f02:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    6f12:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    6f22:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    6f32:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    6f42:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    6f52:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    6f62:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

00006f6e <text_rtc_cas>:
    6f6e:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    6f7e:	6e 79 00                                            ny.

00006f81 <text_ntp_cas>:
    6f81:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    6f91:	63 61 73 00                                         cas.

00006f95 <text_pid_regulator>:
    6f95:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

00006fa3 <text_nrf_rozhrani>:
    6fa3:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

00006fb0 <text_rest_rozhrani>:
    6fb0:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    6fc0:	69 00                                               i.

00006fc2 <thermctl_header_out>:
    6fc2:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

00006fd1 <text_mqtt_rozhrani>:
    6fd1:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

00006fdf <text_ethernet_rozhrani>:
    6fdf:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    6fef:	69 00                                               i.

00006ff1 <text_onewire_hledam>:
    6ff1:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

00006ffe <text_onewire_rozhrani>:
    6ffe:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

0000700d <text_touchscreen>:
    700d:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

00007019 <text_nastaveni_systemu>:
    7019:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    7029:	75 00                                               u.

0000702b <text_test_eeprom>:
    702b:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

0000703b <text_ok>:
    703b:	4f 4b 00                                            OK.

0000703e <text_test_ram>:
    703e:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

0000704b <text_bezny_start>:
    704b:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

00007057 <text_prog>:
    7057:	50 52 4f 47 00                                      PROG.

0000705c <text_vychozi_nastaveni>:
    705c:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    706c:	69 00                                               i.

0000706e <text_vnitrni_ochrany>:
    706e:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

0000707e <term_title>:
    707e:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    708e:	6f 72 20 76 33 00                                   or v3.

00007094 <new_text_regulator>:
    7094:	52 65 67 75 6c 61 74 6f 72 3a 20 00                 Regulator: .

000070a0 <current_time>:
    70a0:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

000070ad <current_temp>:
    70ad:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    70bd:	3a 00                                               :.

000070bf <new_text_date_error>:
    70bf:	2d 2d 2e 2d 2d 2e 2d 2d 2d 2d 00                    --.--.----.

000070ca <nastaveni_tds_period>:
    70ca:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

000070d9 <temp_offset_short>:
    70d9:	6f 66 66 73 65 74 3a 00                             offset:.

000070e1 <text_online>:
    70e1:	4f 6e 6c 69 6e 65 00                                Online.

000070e8 <text_last_update>:
    70e8:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    70f8:	7a 61 63 65 3a 00                                   zace:.

000070fe <current_temp_short>:
    70fe:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

00007107 <text_nazev>:
    7107:	4e 61 7a 65 76 3a 00                                Nazev:.

0000710e <new_text_rtds_type_temp>:
    710e:	54 79 70 3a 20 76 7a 64 61 6c 65 6e 61 20 74 65     Typ: vzdalena te
    711e:	70 6c 6f 74 61 00                                   plota.

00007124 <text_nastavit_tds>:
    7124:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    7134:	6c 6f 00                                            lo.

00007137 <text_not_used>:
    7137:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

00007144 <text_associovat_tds>:
    7144:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    7154:	64 6c 6f 00                                         dlo.

00007158 <text_rtds_prefix>:
    7158:	2f 00                                               /.

0000715a <text_err>:
    715a:	45 72 72 6f 72 00                                   Error.

00007160 <nastaveni_rtds>:
    7160:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

0000716f <nastaveni_onewire>:
    716f:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

0000717d <text_term_do_activate>:
    717d:	41 6b 74 69 76 6f 76 61 74 20 6e 6f 76 79 20 72     Aktivovat novy r
    718d:	65 67 75 6c 61 74 6f 72 3f 00                       egulator?.

00007197 <text_term_deactive>:
    7197:	4e 65 61 6b 74 69 76 6e 69 00                       Neaktivni.

000071a1 <text_term_active>:
    71a1:	41 6b 74 69 76 6e 69 00                             Aktivni.

000071a9 <text_change_default_ring>:
    71a9:	5a 6d 65 6e 69 74 20 76 79 63 68 6f 7a 69 20 72     Zmenit vychozi r
    71b9:	65 67 75 6c 61 74 6f 72 75 00                       egulatoru.

000071c3 <text_dashdash>:
    71c3:	2d 2d 2d 00                                         ---.

000071c7 <text_term_do_deactivate>:
    71c7:	44 65 61 6b 74 69 76 6f 76 61 74 20 72 65 67 2e     Deaktivovat reg.
	...

000071d8 <text_term_do_activate1>:
    71d8:	41 6b 74 69 76 6f 76 61 74 20 72 65 67 2e 00        Aktivovat reg..

000071e7 <text_button_term_man_comment>:
    71e7:	52 75 63 6e 69 20 6f 76 6c 61 64 61 6e 69 00        Rucni ovladani.

000071f6 <text_button_term_man>:
    71f6:	4d 41 4e 00                                         MAN.

000071fa <text_button_term_prog_comment>:
    71fa:	41 75 74 6f 6d 61 74 69 63 6b 79 20 70 72 6f 67     Automaticky prog
    720a:	72 61 6d 00                                         ram.

0000720e <text_button_term_prog>:
    720e:	50 52 4f 47 00                                      PROG.

00007213 <text_button_term_min_comment>:
    7213:	43 68 6c 61 7a 65 6e 69 2c 20 62 65 7a 20 72 65     Chlazeni, bez re
    7223:	67 75 6c 61 63 65 00                                gulace.

0000722a <text_button_term_min>:
    722a:	4d 49 4e 00                                         MIN.

0000722e <text_button_term_max_comment>:
    722e:	5a 61 70 6e 75 74 6f 2c 20 62 65 7a 20 72 65 67     Zapnuto, bez reg
    723e:	75 6c 61 63 65 00                                   ulace.

00007244 <text_button_term_max>:
    7244:	4d 41 58 00                                         MAX.

00007248 <text_button_term_off_comment>:
    7248:	56 79 70 6e 75 74 6f 2c 20 6f 63 68 72 61 6e 6e     Vypnuto, ochrann
    7258:	79 20 6d 6f 64 00                                   y mod.

0000725e <text_button_term_off>:
    725e:	4f 46 46 00                                         OFF.

00007262 <new_text_jas_display>:
    7262:	4e 61 73 74 61 76 65 6e 69 20 6a 61 73 75 20 64     Nastaveni jasu d
    7272:	69 73 70 6c 61 79 65 00                             isplaye.

0000727a <new_text_jas_display_manual>:
    727a:	4d 61 6e 75 61 6c 6e 69 20 72 69 7a 65 6e 69 20     Manualni rizeni 
	...

0000728b <new_text_jas_display_automat>:
    728b:	41 75 74 6f 6d 61 74 69 63 6b 65 20 72 69 7a 65     Automaticke rize
    729b:	6e 69 00                                            ni.

0000729e <new_text_auto_display_shutdown>:
    729e:	41 75 74 6f 6d 61 74 69 63 6b 65 20 76 79 70 6e     Automaticke vypn
    72ae:	75 74 69 20 64 69 73 70 6c 61 79 65 00              uti displaye.

000072bb <new_text_vypnuto>:
    72bb:	56 79 70 6e 75 74 6f 00                             Vypnuto.

000072c3 <new_text_device_dns>:
    72c3:	44 4e 53 20 73 65 72 76 65 72 00                    DNS server.

000072ce <new_text_device_gw>:
    72ce:	56 79 63 68 6f 7a 69 20 62 72 61 6e 61 00           Vychozi brana.

000072dc <new_text_device_mask>:
    72dc:	49 50 20 6d 61 73 6b 61 00                          IP maska.

000072e5 <new_text_device_ip>:
    72e5:	49 50 20 61 64 72 65 73 61 00                       IP adresa.

000072ef <new_text_device_nazev>:
    72ef:	4e 61 7a 65 76 20 7a 61 72 69 7a 65 6e 69 00        Nazev zarizeni.

000072fe <new_text_device_mac>:
    72fe:	4d 41 43 20 61 64 72 65 73 61 00                    MAC adresa.

00007309 <new_text_error_ntp_time>:
    7309:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    7319:	45 52 52 4f 52 00                                   ERROR.

0000731f <new_text_ok_ntp_time>:
    731f:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    732f:	4f 4b 00                                            OK.

00007332 <new_text_ok_connect_seznam>:
    7332:	4b 6f 6e 65 6b 74 69 76 69 74 61 20 4f 4b 00        Konektivita OK.

00007341 <new_text_err_connect_seznam>:
    7341:	4b 6f 6e 65 6b 74 69 76 69 74 61 20 45 52 52 4f     Konektivita ERRO
    7351:	52 00                                               R.

00007353 <seznam_server>:
    7353:	77 77 77 2e 73 65 7a 6e 61 6d 2e 63 7a 00           www.seznam.cz.

00007361 <new_text_mqtt_error>:
    7361:	4d 51 54 54 20 76 20 63 68 79 62 65 3a 20 00        MQTT v chybe: .

00007370 <new_text_mqtt_processed>:
    7370:	4d 51 54 54 20 7a 70 72 61 63 6f 76 61 6e 79 63     MQTT zpracovanyc
    7380:	68 3a 20 00                                         h: .

00007384 <new_text_mqtt_receive>:
    7384:	4d 51 54 54 20 70 72 69 6a 61 74 79 63 68 3a 20     MQTT prijatych: 
	...

00007395 <new_text_mqtt_send>:
    7395:	4d 51 54 54 20 6f 64 65 73 6c 61 6e 79 63 68 3a     MQTT odeslanych:
    73a5:	20 00                                                .

000073a7 <new_text_selfcheck_test>:
    73a7:	53 65 6c 66 63 68 65 63 6b 3a 20 00                 Selfcheck: .

000073b3 <new_text_internal_temp>:
    73b3:	49 6e 74 65 72 6e 69 20 74 65 70 6c 6f 74 61 3a     Interni teplota:
    73c3:	20 00                                                .

000073c5 <new_text_consume_ampere>:
    73c5:	4f 64 62 65 72 20 70 72 6f 75 64 75 3a 20 00        Odber proudu: .

000073d4 <new_text_tritri_volt>:
    73d4:	49 6e 74 65 72 6e 69 20 6e 61 70 65 74 69 20 33     Interni napeti 3
    73e4:	2e 33 20 00                                         .3 .

000073e8 <new_text_pet_volt>:
    73e8:	49 6e 74 65 72 6e 69 20 6e 61 70 65 74 69 20 35     Interni napeti 5
    73f8:	2e 30 20 00                                         .0 .

000073fc <new_text_input_volt>:
    73fc:	56 73 74 75 70 6e 69 20 6e 61 70 65 74 69 20 00     Vstupni napeti .

0000740c <port_to_mode_PGM>:
    740c:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

0000741c <digital_pin_to_timer_PGM>:
    741c:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    7450:	00 03                                               ..

00007452 <RF24::print_status(unsigned char)::__c>:
    7452:	53 54 41 54 55 53 09 09 20 3d 20 30 78 25 30 32     STATUS.. = 0x%02
    7462:	78 20 52 58 5f 44 52 3d 25 78 20 54 58 5f 44 53     x RX_DR=%x TX_DS
    7472:	3d 25 78 20 4d 41 58 5f 52 54 3d 25 78 20 52 58     =%x MAX_RT=%x RX
    7482:	5f 50 5f 4e 4f 3d 25 78 20 54 58 5f 46 55 4c 4c     _P_NO=%x TX_FULL
    7492:	3d 25 78 0d 0a 00                                   =%x...

00007498 <_ZZN4RF2412printDetailsEvE3__c__12_>:
    7498:	50 41 20 50 6f 77 65 72 09 20 3d 20 25 53 0d 0a     PA Power. = %S..
	...

000074a9 <rf24_pa_dbm_e_str_P>:
    74a9:	90 09 89 09 81 09 7a 09                             ......z.

000074b1 <_ZZN4RF2412printDetailsEvE3__c__11_>:
    74b1:	43 52 43 20 4c 65 6e 67 74 68 09 20 3d 20 25 53     CRC Length. = %S
    74c1:	0d 0a 00                                            ...

000074c4 <rf24_crclength_e_str_P>:
    74c4:	a6 09 9f 09 97 09                                   ......

000074ca <_ZZN4RF2412printDetailsEvE3__c__10_>:
    74ca:	4d 6f 64 65 6c 09 09 20 3d 20 25 53 0d 0a 00        Model.. = %S...

000074d9 <rf24_model_e_str_P>:
    74d9:	b9 09 af 09                                         ....

000074dd <RF24::printDetails()::__c>:
    74dd:	44 61 74 61 20 52 61 74 65 09 20 3d 20 25 53 0d     Data Rate. = %S.
    74ed:	0a 00                                               ..

000074ef <rf24_datarate_e_str_P>:
    74ef:	d0 09 ca 09 c2 09                                   ......

000074f5 <RF24::printDetails()::__c>:
    74f5:	44 59 4e 50 44 2f 46 45 41 54 55 52 45 00           DYNPD/FEATURE.

00007503 <RF24::printDetails()::__c>:
    7503:	43 4f 4e 46 49 47 09 00                             CONFIG..

0000750b <RF24::printDetails()::__c>:
    750b:	52 46 5f 53 45 54 55 50 00                          RF_SETUP.

00007514 <RF24::printDetails()::__c>:
    7514:	52 46 5f 43 48 09 00                                RF_CH..

0000751b <RF24::printDetails()::__c>:
    751b:	45 4e 5f 52 58 41 44 44 52 00                       EN_RXADDR.

00007525 <RF24::printDetails()::__c>:
    7525:	45 4e 5f 41 41 09 00                                EN_AA..

0000752c <RF24::printDetails()::__c>:
    752c:	52 58 5f 50 57 5f 50 30 2d 36 00                    RX_PW_P0-6.

00007537 <RF24::printDetails()::__c>:
    7537:	54 58 5f 41 44 44 52 09 00                          TX_ADDR..

00007540 <RF24::printDetails()::__c>:
    7540:	52 58 5f 41 44 44 52 5f 50 32 2d 35 00              RX_ADDR_P2-5.

0000754d <RF24::printDetails()::__c>:
    754d:	52 58 5f 41 44 44 52 5f 50 30 2d 31 00              RX_ADDR_P0-1.

0000755a <status_know_devices>:
    755a:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    756a:	63 65 73 00                                         ces.

0000756e <network_ip>:
    756e:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

00007579 <status_mqtt_process>:
    7579:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    7589:	65 73 73 00                                         ess.

0000758d <status_mqtt_receive>:
    758d:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    759d:	69 76 65 00                                         ive.

000075a1 <status_mqtt_error>:
    75a1:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    75b1:	72 00                                               r.

000075b3 <status_mqtt_send>:
    75b3:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

000075c4 <termbig_header_in>:
    75c4:	2f 74 65 72 6d 62 69 67 2d 69 6e 2f 00              /termbig-in/.

000075d1 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    75d1:	0d 0a 00                                            ...

000075d4 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    75d4:	25 30 32 78 00                                      %02x.

000075d9 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    75d9:	20 30 78 00                                          0x.

000075dd <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    75dd:	25 53 09 20 3d 00                                   %S. =.

000075e3 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    75e3:	0d 0a 00                                            ...

000075e6 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    75e6:	20 30 78 25 30 32 78 00                              0x%02x.

000075ee <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    75ee:	25 53 09 20 3d 00                                   %S. =.

000075f4 <_ZL11daysInMonth.lto_priv.265>:
    75f4:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00007600 <lcd_font>:
    7600:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    7610:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    7620:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    7630:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    7640:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    7650:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    7660:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    7670:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    7680:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    7690:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    76a0:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    76b0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    76c0:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    76d0:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    76e0:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    76f0:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    7700:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    7710:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    7720:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    7730:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    7740:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    7750:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    7760:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    7770:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    7780:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    7790:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    77a0:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    77b0:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    77c0:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    77d0:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    77e0:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    77f0:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    7800:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    7810:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    7820:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    7830:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    7840:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    7850:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    7860:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    7870:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    7880:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    7890:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    78a0:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    78b0:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    78c0:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    78d0:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    78e0:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    78f0:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    7900:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    7910:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    7920:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    7930:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    7940:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    7950:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    7960:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    7970:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    7980:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    7990:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    79a0:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    79b0:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    79c0:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    79d0:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    79e0:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    79f0:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    7a00:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    7a10:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    7a20:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    7a30:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    7a40:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    7a50:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    7a60:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    7a70:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    7a80:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    7a90:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    7aa0:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    7ab0:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    7ac0:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    7ad0:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    7ae0:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    7af0:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00007afb <port_to_input_PGM>:
    7afb:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

00007b0b <digital_pin_to_bit_mask_PGM>:
    7b0b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    7b1b:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    7b2b:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    7b3b:	08 10 20 40 80 20                                   .. @. 

00007b41 <port_to_output_PGM>:
    7b41:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00007b51 <digital_pin_to_port_PGM>:
    7b51:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    7b61:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    7b71:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    7b81:	06 06 06 06 06 07 00                                .......

00007b88 <__ctors_start>:
__ctors_start():
    7b88:	cd e0       	ldi	r28, 0x0D	; 13

00007b8a <__ctors_end>:
__dtors_end():
    7b8a:	11 24       	eor	r1, r1
    7b8c:	1f be       	out	0x3f, r1	; 63
    7b8e:	cf ef       	ldi	r28, 0xFF	; 255
    7b90:	d1 e2       	ldi	r29, 0x21	; 33
    7b92:	de bf       	out	0x3e, r29	; 62
    7b94:	cd bf       	out	0x3d, r28	; 61
    7b96:	00 e0       	ldi	r16, 0x00	; 0
    7b98:	0c bf       	out	0x3c, r16	; 60

00007b9a <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    7b9a:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    7b9c:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    7b9e:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    7ba0:	ea ef       	ldi	r30, 0xFA	; 250
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    7ba2:	f4 ee       	ldi	r31, 0xE4	; 228
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    7ba4:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    7ba6:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    7ba8:	02 c0       	rjmp	.+4      	; 0x7bae <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    7baa:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    7bac:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    7bae:	ac 3f       	cpi	r26, 0xFC	; 252
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    7bb0:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    7bb2:	d9 f7       	brne	.-10     	; 0x7baa <__do_copy_data+0x10>

00007bb4 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    7bb4:	24 e1       	ldi	r18, 0x14	; 20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    7bb6:	ac ef       	ldi	r26, 0xFC	; 252
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    7bb8:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    7bba:	01 c0       	rjmp	.+2      	; 0x7bbe <.do_clear_bss_start>

00007bbc <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    7bbc:	1d 92       	st	X+, r1

00007bbe <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    7bbe:	a7 38       	cpi	r26, 0x87	; 135
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    7bc0:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    7bc2:	e1 f7       	brne	.-8      	; 0x7bbc <.do_clear_bss_loop>

00007bc4 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    7bc4:	1d e3       	ldi	r17, 0x3D	; 61
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    7bc6:	c5 ec       	ldi	r28, 0xC5	; 197
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    7bc8:	dd e3       	ldi	r29, 0x3D	; 61
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    7bca:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    7bcc:	06 c0       	rjmp	.+12     	; 0x7bda <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    7bce:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    7bd0:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    7bd2:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    7bd4:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    7bd6:	0e 94 e6 f0 	call	0x1e1cc	; 0x1e1cc <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    7bda:	c4 3c       	cpi	r28, 0xC4	; 196
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    7bdc:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    7bde:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    7be0:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    7be2:	a9 f7       	brne	.-22     	; 0x7bce <__do_global_ctors+0xa>
    7be4:	0e 94 8f d2 	call	0x1a51e	; 0x1a51e <main>
    7be8:	0c 94 7b f2 	jmp	0x1e4f6	; 0x1e4f6 <_exit>

00007bec <__bad_interrupt>:
__vector_38():
    7bec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007bf0 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    7bf0:	af 92       	push	r10
    7bf2:	bf 92       	push	r11
    7bf4:	cf 92       	push	r12
    7bf6:	df 92       	push	r13
    7bf8:	ef 92       	push	r14
    7bfa:	ff 92       	push	r15
    7bfc:	0f 93       	push	r16
    7bfe:	1f 93       	push	r17
    7c00:	cf 93       	push	r28
    7c02:	df 93       	push	r29
    7c04:	6c 01       	movw	r12, r24
    7c06:	7b 01       	movw	r14, r22
    7c08:	8b 01       	movw	r16, r22
    7c0a:	04 0f       	add	r16, r20
    7c0c:	15 1f       	adc	r17, r21
    7c0e:	eb 01       	movw	r28, r22
    7c10:	5e 01       	movw	r10, r28
    7c12:	ae 18       	sub	r10, r14
    7c14:	bf 08       	sbc	r11, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    7c16:	c0 17       	cp	r28, r16
    7c18:	d1 07       	cpc	r29, r17
    7c1a:	59 f0       	breq	.+22     	; 0x7c32 <Print::write(unsigned char const*, unsigned int)+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    7c1c:	69 91       	ld	r22, Y+
    7c1e:	d6 01       	movw	r26, r12
    7c20:	ed 91       	ld	r30, X+
    7c22:	fc 91       	ld	r31, X
    7c24:	01 90       	ld	r0, Z+
    7c26:	f0 81       	ld	r31, Z
    7c28:	e0 2d       	mov	r30, r0
    7c2a:	c6 01       	movw	r24, r12
    7c2c:	19 95       	eicall
    7c2e:	89 2b       	or	r24, r25
    7c30:	79 f7       	brne	.-34     	; 0x7c10 <Print::write(unsigned char const*, unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    7c32:	c5 01       	movw	r24, r10
    7c34:	df 91       	pop	r29
    7c36:	cf 91       	pop	r28
    7c38:	1f 91       	pop	r17
    7c3a:	0f 91       	pop	r16
    7c3c:	ff 90       	pop	r15
    7c3e:	ef 90       	pop	r14
    7c40:	df 90       	pop	r13
    7c42:	cf 90       	pop	r12
    7c44:	bf 90       	pop	r11
    7c46:	af 90       	pop	r10
    7c48:	08 95       	ret

00007c4a <turnOffPWM>:
turnOffPWM():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    7c4a:	82 50       	subi	r24, 0x02	; 2
    7c4c:	82 31       	cpi	r24, 0x12	; 18
    7c4e:	08 f0       	brcs	.+2      	; 0x7c52 <turnOffPWM+0x8>
    7c50:	5f c0       	rjmp	.+190    	; 0x7d10 <turnOffPWM+0xc6>
    7c52:	e8 2f       	mov	r30, r24
    7c54:	f0 e0       	ldi	r31, 0x00	; 0
    7c56:	88 27       	eor	r24, r24
    7c58:	ef 5c       	subi	r30, 0xCF	; 207
    7c5a:	f1 4c       	sbci	r31, 0xC1	; 193
    7c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    7c5e:	0c 94 e6 f0 	jmp	0x1e1cc	; 0x1e1cc <__tablejump2__>
    7c62:	85 3e       	cpi	r24, 0xE5	; 229
    7c64:	89 3e       	cpi	r24, 0xE9	; 233
    7c66:	43 3e       	cpi	r20, 0xE3	; 227
    7c68:	49 3e       	cpi	r20, 0xE9	; 233
    7c6a:	4d 3e       	cpi	r20, 0xED	; 237
    7c6c:	88 3e       	cpi	r24, 0xE8	; 232
    7c6e:	51 3e       	cpi	r21, 0xE1	; 225
    7c70:	57 3e       	cpi	r21, 0xE7	; 231
    7c72:	5b 3e       	cpi	r21, 0xEB	; 235
    7c74:	61 3e       	cpi	r22, 0xE1	; 225
    7c76:	65 3e       	cpi	r22, 0xE5	; 229
    7c78:	69 3e       	cpi	r22, 0xE9	; 233
    7c7a:	6f 3e       	cpi	r22, 0xEF	; 239
    7c7c:	73 3e       	cpi	r23, 0xE3	; 227
    7c7e:	88 3e       	cpi	r24, 0xE8	; 232
    7c80:	77 3e       	cpi	r23, 0xE7	; 231
    7c82:	7d 3e       	cpi	r23, 0xED	; 237
    7c84:	81 3e       	cpi	r24, 0xE1	; 225
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    7c86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    7c8a:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    7c8c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    7c90:	08 95       	ret
    7c92:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    7c96:	8f 7d       	andi	r24, 0xDF	; 223
    7c98:	f9 cf       	rjmp	.-14     	; 0x7c8c <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    7c9a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    7c9e:	87 7f       	andi	r24, 0xF7	; 247
    7ca0:	f5 cf       	rjmp	.-22     	; 0x7c8c <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    7ca2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    7ca6:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    7ca8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    7cac:	08 95       	ret
    7cae:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    7cb2:	8f 7d       	andi	r24, 0xDF	; 223
    7cb4:	f9 cf       	rjmp	.-14     	; 0x7ca8 <turnOffPWM+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    7cb6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    7cba:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    7cbc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    7cc0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    7cc2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    7cc6:	8f 7d       	andi	r24, 0xDF	; 223
    7cc8:	f9 cf       	rjmp	.-14     	; 0x7cbc <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    7cca:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    7cce:	87 7f       	andi	r24, 0xF7	; 247
    7cd0:	f5 cf       	rjmp	.-22     	; 0x7cbc <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    7cd2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    7cd6:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    7cd8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    7cdc:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    7cde:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    7ce2:	8f 7d       	andi	r24, 0xDF	; 223
    7ce4:	f9 cf       	rjmp	.-14     	; 0x7cd8 <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    7ce6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    7cea:	87 7f       	andi	r24, 0xF7	; 247
    7cec:	f5 cf       	rjmp	.-22     	; 0x7cd8 <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    7cee:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    7cf2:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    7cf4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    7cf8:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    7cfa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    7cfe:	8f 7d       	andi	r24, 0xDF	; 223
    7d00:	f9 cf       	rjmp	.-14     	; 0x7cf4 <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    7d02:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    7d06:	87 7f       	andi	r24, 0xF7	; 247
    7d08:	f5 cf       	rjmp	.-22     	; 0x7cf4 <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    7d0a:	84 b5       	in	r24, 0x24	; 36
    7d0c:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    7d0e:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    7d10:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    7d12:	84 b5       	in	r24, 0x24	; 36
    7d14:	8f 7d       	andi	r24, 0xDF	; 223
    7d16:	fb cf       	rjmp	.-10     	; 0x7d0e <turnOffPWM+0xc4>

00007d18 <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    7d18:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    7d1a:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    7d1c:	80 91 66 0b 	lds	r24, 0x0B66	; 0x800b66 <timer0_overflow_count>
    7d20:	90 91 67 0b 	lds	r25, 0x0B67	; 0x800b67 <timer0_overflow_count+0x1>
    7d24:	a0 91 68 0b 	lds	r26, 0x0B68	; 0x800b68 <timer0_overflow_count+0x2>
    7d28:	b0 91 69 0b 	lds	r27, 0x0B69	; 0x800b69 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    7d2c:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    7d2e:	a8 9b       	sbis	0x15, 0	; 21
    7d30:	05 c0       	rjmp	.+10     	; 0x7d3c <micros+0x24>
    7d32:	2f 3f       	cpi	r18, 0xFF	; 255
    7d34:	19 f0       	breq	.+6      	; 0x7d3c <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    7d36:	01 96       	adiw	r24, 0x01	; 1
    7d38:	a1 1d       	adc	r26, r1
    7d3a:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    7d3c:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    7d3e:	ba 2f       	mov	r27, r26
    7d40:	a9 2f       	mov	r26, r25
    7d42:	98 2f       	mov	r25, r24
    7d44:	88 27       	eor	r24, r24
    7d46:	bc 01       	movw	r22, r24
    7d48:	cd 01       	movw	r24, r26
    7d4a:	62 0f       	add	r22, r18
    7d4c:	71 1d       	adc	r23, r1
    7d4e:	81 1d       	adc	r24, r1
    7d50:	91 1d       	adc	r25, r1
    7d52:	42 e0       	ldi	r20, 0x02	; 2
    7d54:	66 0f       	add	r22, r22
    7d56:	77 1f       	adc	r23, r23
    7d58:	88 1f       	adc	r24, r24
    7d5a:	99 1f       	adc	r25, r25
    7d5c:	4a 95       	dec	r20
    7d5e:	d1 f7       	brne	.-12     	; 0x7d54 <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    7d60:	08 95       	ret

00007d62 <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58
}


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
    7d62:	20 91 5d 0b 	lds	r18, 0x0B5D	; 0x800b5d <a2d_reference>
    7d66:	90 e4       	ldi	r25, 0x40	; 64
    7d68:	29 9f       	mul	r18, r25
    7d6a:	90 01       	movw	r18, r0
    7d6c:	11 24       	eor	r1, r1
    7d6e:	28 0f       	add	r18, r24
    7d70:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
    7d74:	80 93 5e 0b 	sts	0x0B5E, r24	; 0x800b5e <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
    7d78:	ea e7       	ldi	r30, 0x7A	; 122
    7d7a:	f0 e0       	ldi	r31, 0x00	; 0
    7d7c:	80 81       	ld	r24, Z
    7d7e:	80 64       	ori	r24, 0x40	; 64
    7d80:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
    7d82:	08 95       	ret

00007d84 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    7d84:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
    7d88:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:239
}
    7d8c:	89 1b       	sub	r24, r25
    7d8e:	99 0b       	sbc	r25, r25
    7d90:	08 95       	ret

00007d92 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    7d92:	85 ed       	ldi	r24, 0xD5	; 213
    7d94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    7d98:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    7d9c:	84 fd       	sbrc	r24, 4
    7d9e:	fc cf       	rjmp	.-8      	; 0x7d98 <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    7da0:	10 92 64 0d 	sts	0x0D64, r1	; 0x800d64 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:382
}
    7da4:	08 95       	ret

00007da6 <twi_transmit>:
twi_transmit():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    7da6:	20 91 3a 0b 	lds	r18, 0x0B3A	; 0x800b3a <twi_txBufferLength>
    7daa:	26 0f       	add	r18, r22
    7dac:	33 27       	eor	r19, r19
    7dae:	33 1f       	adc	r19, r19
    7db0:	21 32       	cpi	r18, 0x21	; 33
    7db2:	31 05       	cpc	r19, r1
    7db4:	ec f4       	brge	.+58     	; 0x7df0 <twi_transmit+0x4a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:312
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    7db6:	20 91 64 0d 	lds	r18, 0x0D64	; 0x800d64 <twi_state.lto_priv.272>
    7dba:	fc 01       	movw	r30, r24
    7dbc:	90 e0       	ldi	r25, 0x00	; 0
    7dbe:	80 e0       	ldi	r24, 0x00	; 0
    7dc0:	24 30       	cpi	r18, 0x04	; 4
    7dc2:	69 f0       	breq	.+26     	; 0x7dde <twi_transmit+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:313
    return 2;
    7dc4:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    7dc6:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:318
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    7dc8:	a0 91 3a 0b 	lds	r26, 0x0B3A	; 0x800b3a <twi_txBufferLength>
    7dcc:	21 91       	ld	r18, Z+
    7dce:	ac 01       	movw	r20, r24
    7dd0:	46 5e       	subi	r20, 0xE6	; 230
    7dd2:	54 4f       	sbci	r21, 0xF4	; 244
    7dd4:	a4 0f       	add	r26, r20
    7dd6:	b5 2f       	mov	r27, r21
    7dd8:	b1 1d       	adc	r27, r1
    7dda:	2c 93       	st	X, r18
    7ddc:	01 96       	adiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    7dde:	86 17       	cp	r24, r22
    7de0:	98 f3       	brcs	.-26     	; 0x7dc8 <twi_transmit+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    7de2:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <twi_txBufferLength>
    7de6:	68 0f       	add	r22, r24
    7de8:	60 93 3a 0b 	sts	0x0B3A, r22	; 0x800b3a <twi_txBufferLength>
    7dec:	80 e0       	ldi	r24, 0x00	; 0
    7dee:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    7df0:	81 e0       	ldi	r24, 0x01	; 1
    7df2:	08 95       	ret

00007df4 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:314
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    7df4:	08 95       	ret

00007df6 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:299
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    7df6:	08 95       	ret

00007df8 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:274
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    7df8:	08 95       	ret

00007dfa <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:264
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    7dfa:	e0 91 04 0d 	lds	r30, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
    7dfe:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
    7e02:	e8 17       	cp	r30, r24
    7e04:	30 f4       	brcc	.+12     	; 0x7e12 <TwoWire::peek()+0x18>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:265
    value = rxBuffer[rxBufferIndex];
    7e06:	f0 e0       	ldi	r31, 0x00	; 0
    7e08:	e2 5e       	subi	r30, 0xE2	; 226
    7e0a:	f2 4f       	sbci	r31, 0xF2	; 242
    7e0c:	80 81       	ld	r24, Z
    7e0e:	90 e0       	ldi	r25, 0x00	; 0
    7e10:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:262
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    7e12:	8f ef       	ldi	r24, 0xFF	; 255
    7e14:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:269
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    7e16:	08 95       	ret

00007e18 <TwoWire::read()>:
_ZN7TwoWire4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    7e18:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
    7e1c:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    7e20:	2f ef       	ldi	r18, 0xFF	; 255
    7e22:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    7e24:	98 17       	cp	r25, r24
    7e26:	48 f4       	brcc	.+18     	; 0x7e3a <TwoWire::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    7e28:	e9 2f       	mov	r30, r25
    7e2a:	f0 e0       	ldi	r31, 0x00	; 0
    7e2c:	e2 5e       	subi	r30, 0xE2	; 226
    7e2e:	f2 4f       	sbci	r31, 0xF2	; 242
    7e30:	20 81       	ld	r18, Z
    7e32:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    7e34:	9f 5f       	subi	r25, 0xFF	; 255
    7e36:	90 93 04 0d 	sts	0x0D04, r25	; 0x800d04 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    7e3a:	c9 01       	movw	r24, r18
    7e3c:	08 95       	ret

00007e3e <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:219

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    7e3e:	cf 92       	push	r12
    7e40:	df 92       	push	r13
    7e42:	ef 92       	push	r14
    7e44:	ff 92       	push	r15
    7e46:	0f 93       	push	r16
    7e48:	1f 93       	push	r17
    7e4a:	cf 93       	push	r28
    7e4c:	df 93       	push	r29
    7e4e:	7c 01       	movw	r14, r24
    7e50:	cb 01       	movw	r24, r22
    7e52:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:220
  if(transmitting){
    7e54:	20 91 1d 0d 	lds	r18, 0x0D1D	; 0x800d1d <TwoWire::transmitting>
    7e58:	22 23       	and	r18, r18
    7e5a:	89 f0       	breq	.+34     	; 0x7e7e <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    7e5c:	eb 01       	movw	r28, r22
    7e5e:	6b 01       	movw	r12, r22
    7e60:	c4 0e       	add	r12, r20
    7e62:	d5 1e       	adc	r13, r21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:222
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    7e64:	cc 15       	cp	r28, r12
    7e66:	dd 05       	cpc	r29, r13
    7e68:	69 f0       	breq	.+26     	; 0x7e84 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:223
      write(data[i]);
    7e6a:	69 91       	ld	r22, Y+
    7e6c:	d7 01       	movw	r26, r14
    7e6e:	ed 91       	ld	r30, X+
    7e70:	fc 91       	ld	r31, X
    7e72:	01 90       	ld	r0, Z+
    7e74:	f0 81       	ld	r31, Z
    7e76:	e0 2d       	mov	r30, r0
    7e78:	c7 01       	movw	r24, r14
    7e7a:	19 95       	eicall
    7e7c:	f3 cf       	rjmp	.-26     	; 0x7e64 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:228
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    7e7e:	64 2f       	mov	r22, r20
    7e80:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <twi_transmit>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:231
  }
  return quantity;
}
    7e84:	c8 01       	movw	r24, r16
    7e86:	df 91       	pop	r29
    7e88:	cf 91       	pop	r28
    7e8a:	1f 91       	pop	r17
    7e8c:	0f 91       	pop	r16
    7e8e:	ff 90       	pop	r15
    7e90:	ef 90       	pop	r14
    7e92:	df 90       	pop	r13
    7e94:	cf 90       	pop	r12
    7e96:	08 95       	ret

00007e98 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:194

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    7e98:	cf 93       	push	r28
    7e9a:	df 93       	push	r29
    7e9c:	1f 92       	push	r1
    7e9e:	cd b7       	in	r28, 0x3d	; 61
    7ea0:	de b7       	in	r29, 0x3e	; 62
    7ea2:	69 83       	std	Y+1, r22	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:195
  if(transmitting){
    7ea4:	20 91 1d 0d 	lds	r18, 0x0D1D	; 0x800d1d <TwoWire::transmitting>
    7ea8:	22 23       	and	r18, r18
    7eaa:	f9 f0       	breq	.+62     	; 0x7eea <TwoWire::write(unsigned char)+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:198
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
    7eac:	20 91 1a 0d 	lds	r18, 0x0D1A	; 0x800d1a <TwoWire::txBufferLength>
    7eb0:	20 32       	cpi	r18, 0x20	; 32
    7eb2:	58 f0       	brcs	.+22     	; 0x7eca <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    7eb4:	21 e0       	ldi	r18, 0x01	; 1
    7eb6:	30 e0       	ldi	r19, 0x00	; 0
    7eb8:	fc 01       	movw	r30, r24
    7eba:	33 83       	std	Z+3, r19	; 0x03
    7ebc:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:200
      setWriteError();
      return 0;
    7ebe:	90 e0       	ldi	r25, 0x00	; 0
    7ec0:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:213
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
    7ec2:	0f 90       	pop	r0
    7ec4:	df 91       	pop	r29
    7ec6:	cf 91       	pop	r28
    7ec8:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:203
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    7eca:	80 91 1b 0d 	lds	r24, 0x0D1B	; 0x800d1b <TwoWire::txBufferIndex>
    7ece:	e8 2f       	mov	r30, r24
    7ed0:	f0 e0       	ldi	r31, 0x00	; 0
    7ed2:	e6 50       	subi	r30, 0x06	; 6
    7ed4:	f5 4f       	sbci	r31, 0xF5	; 245
    7ed6:	99 81       	ldd	r25, Y+1	; 0x01
    7ed8:	90 83       	st	Z, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:204
    ++txBufferIndex;
    7eda:	8f 5f       	subi	r24, 0xFF	; 255
    7edc:	80 93 1b 0d 	sts	0x0D1B, r24	; 0x800d1b <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:206
    // update amount in buffer
    txBufferLength = txBufferIndex;
    7ee0:	80 93 1a 0d 	sts	0x0D1A, r24	; 0x800d1a <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:212
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    7ee4:	81 e0       	ldi	r24, 0x01	; 1
    7ee6:	90 e0       	ldi	r25, 0x00	; 0
    7ee8:	ec cf       	rjmp	.-40     	; 0x7ec2 <TwoWire::write(unsigned char)+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:210
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    7eea:	61 e0       	ldi	r22, 0x01	; 1
    7eec:	ce 01       	movw	r24, r28
    7eee:	01 96       	adiw	r24, 0x01	; 1
    7ef0:	0e 94 d3 3e 	call	0x7da6	; 0x7da6 <twi_transmit>
    7ef4:	f7 cf       	rjmp	.-18     	; 0x7ee4 <TwoWire::write(unsigned char)+0x4c>

00007ef6 <PID::SetControllerDirection(int)>:
_ZN3PID22SetControllerDirectionEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:204
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    7ef6:	0f 93       	push	r16
    7ef8:	1f 93       	push	r17
    7efa:	cf 93       	push	r28
    7efc:	df 93       	push	r29
    7efe:	ec 01       	movw	r28, r24
    7f00:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205
   if(inAuto && Direction !=controllerDirection)
    7f02:	8a ad       	ldd	r24, Y+58	; 0x3a
    7f04:	88 23       	and	r24, r24
    7f06:	61 f1       	breq	.+88     	; 0x7f60 <PID::SetControllerDirection(int)+0x6a>
    7f08:	88 8d       	ldd	r24, Y+24	; 0x18
    7f0a:	99 8d       	ldd	r25, Y+25	; 0x19
    7f0c:	86 17       	cp	r24, r22
    7f0e:	97 07       	cpc	r25, r23
    7f10:	39 f1       	breq	.+78     	; 0x7f60 <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:207
   {
	    kp = (0 - kp);
    7f12:	2c 85       	ldd	r18, Y+12	; 0x0c
    7f14:	3d 85       	ldd	r19, Y+13	; 0x0d
    7f16:	4e 85       	ldd	r20, Y+14	; 0x0e
    7f18:	5f 85       	ldd	r21, Y+15	; 0x0f
    7f1a:	60 e0       	ldi	r22, 0x00	; 0
    7f1c:	70 e0       	ldi	r23, 0x00	; 0
    7f1e:	cb 01       	movw	r24, r22
    7f20:	0e 94 c0 ef 	call	0x1df80	; 0x1df80 <__subsf3>
    7f24:	6c 87       	std	Y+12, r22	; 0x0c
    7f26:	7d 87       	std	Y+13, r23	; 0x0d
    7f28:	8e 87       	std	Y+14, r24	; 0x0e
    7f2a:	9f 87       	std	Y+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:208
      ki = (0 - ki);
    7f2c:	28 89       	ldd	r18, Y+16	; 0x10
    7f2e:	39 89       	ldd	r19, Y+17	; 0x11
    7f30:	4a 89       	ldd	r20, Y+18	; 0x12
    7f32:	5b 89       	ldd	r21, Y+19	; 0x13
    7f34:	60 e0       	ldi	r22, 0x00	; 0
    7f36:	70 e0       	ldi	r23, 0x00	; 0
    7f38:	cb 01       	movw	r24, r22
    7f3a:	0e 94 c0 ef 	call	0x1df80	; 0x1df80 <__subsf3>
    7f3e:	68 8b       	std	Y+16, r22	; 0x10
    7f40:	79 8b       	std	Y+17, r23	; 0x11
    7f42:	8a 8b       	std	Y+18, r24	; 0x12
    7f44:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:209
      kd = (0 - kd);
    7f46:	2c 89       	ldd	r18, Y+20	; 0x14
    7f48:	3d 89       	ldd	r19, Y+21	; 0x15
    7f4a:	4e 89       	ldd	r20, Y+22	; 0x16
    7f4c:	5f 89       	ldd	r21, Y+23	; 0x17
    7f4e:	60 e0       	ldi	r22, 0x00	; 0
    7f50:	70 e0       	ldi	r23, 0x00	; 0
    7f52:	cb 01       	movw	r24, r22
    7f54:	0e 94 c0 ef 	call	0x1df80	; 0x1df80 <__subsf3>
    7f58:	6c 8b       	std	Y+20, r22	; 0x14
    7f5a:	7d 8b       	std	Y+21, r23	; 0x15
    7f5c:	8e 8b       	std	Y+22, r24	; 0x16
    7f5e:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   }
   controllerDirection = Direction;
    7f60:	19 8f       	std	Y+25, r17	; 0x19
    7f62:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:212
}
    7f64:	df 91       	pop	r29
    7f66:	cf 91       	pop	r28
    7f68:	1f 91       	pop	r17
    7f6a:	0f 91       	pop	r16
    7f6c:	08 95       	ret

00007f6e <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    7f6e:	cf 93       	push	r28
    7f70:	df 93       	push	r29
    7f72:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    7f74:	89 8d       	ldd	r24, Y+25	; 0x19
    7f76:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7f78:	89 2b       	or	r24, r25
    7f7a:	41 f0       	breq	.+16     	; 0x7f8c <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
    7f7c:	e8 81       	ld	r30, Y
    7f7e:	f9 81       	ldd	r31, Y+1	; 0x01
    7f80:	02 84       	ldd	r0, Z+10	; 0x0a
    7f82:	f3 85       	ldd	r31, Z+11	; 0x0b
    7f84:	e0 2d       	mov	r30, r0
    7f86:	ce 01       	movw	r24, r28
    7f88:	19 95       	eicall
    7f8a:	f4 cf       	rjmp	.-24     	; 0x7f74 <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  }
}
    7f8c:	df 91       	pop	r29
    7f8e:	cf 91       	pop	r28
    7f90:	08 95       	ret

00007f92 <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    7f92:	cf 93       	push	r28
    7f94:	df 93       	push	r29
    7f96:	1f 92       	push	r1
    7f98:	cd b7       	in	r28, 0x3d	; 61
    7f9a:	de b7       	in	r29, 0x3e	; 62
    7f9c:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
    7f9e:	dc 01       	movw	r26, r24
    7fa0:	ed 91       	ld	r30, X+
    7fa2:	fc 91       	ld	r31, X
    7fa4:	02 80       	ldd	r0, Z+2	; 0x02
    7fa6:	f3 81       	ldd	r31, Z+3	; 0x03
    7fa8:	e0 2d       	mov	r30, r0
    7faa:	41 e0       	ldi	r20, 0x01	; 1
    7fac:	50 e0       	ldi	r21, 0x00	; 0
    7fae:	be 01       	movw	r22, r28
    7fb0:	6f 5f       	subi	r22, 0xFF	; 255
    7fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    7fb4:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
    7fb6:	0f 90       	pop	r0
    7fb8:	df 91       	pop	r29
    7fba:	cf 91       	pop	r28
    7fbc:	08 95       	ret

00007fbe <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    7fbe:	fc 01       	movw	r30, r24
    7fc0:	81 8d       	ldd	r24, Z+25	; 0x19
    7fc2:	92 8d       	ldd	r25, Z+26	; 0x1a
    7fc4:	08 95       	ret

00007fc6 <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    7fc6:	fc 01       	movw	r30, r24
    7fc8:	85 89       	ldd	r24, Z+21	; 0x15
    7fca:	96 89       	ldd	r25, Z+22	; 0x16
    7fcc:	08 95       	ret

00007fce <EthernetUDP::remoteIP()>:
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    7fce:	22 ef       	ldi	r18, 0xF2	; 242
    7fd0:	32 e0       	ldi	r19, 0x02	; 2
    7fd2:	fc 01       	movw	r30, r24
    7fd4:	31 83       	std	Z+1, r19	; 0x01
    7fd6:	20 83       	st	Z, r18
    7fd8:	fb 01       	movw	r30, r22
    7fda:	41 89       	ldd	r20, Z+17	; 0x11
    7fdc:	52 89       	ldd	r21, Z+18	; 0x12
    7fde:	63 89       	ldd	r22, Z+19	; 0x13
    7fe0:	74 89       	ldd	r23, Z+20	; 0x14
    7fe2:	fc 01       	movw	r30, r24
    7fe4:	42 83       	std	Z+2, r20	; 0x02
    7fe6:	53 83       	std	Z+3, r21	; 0x03
    7fe8:	64 83       	std	Z+4, r22	; 0x04
    7fea:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    7fec:	08 95       	ret

00007fee <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    7fee:	80 e0       	ldi	r24, 0x00	; 0
    7ff0:	08 95       	ret

00007ff2 <EthernetServer::write(unsigned char)>:
_ZN14EthernetServer5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:71

  return EthernetClient(MAX_SOCK_NUM);
}

size_t EthernetServer::write(uint8_t b) 
{
    7ff2:	cf 93       	push	r28
    7ff4:	df 93       	push	r29
    7ff6:	1f 92       	push	r1
    7ff8:	cd b7       	in	r28, 0x3d	; 61
    7ffa:	de b7       	in	r29, 0x3e	; 62
    7ffc:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:72
  return write(&b, 1);
    7ffe:	dc 01       	movw	r26, r24
    8000:	ed 91       	ld	r30, X+
    8002:	fc 91       	ld	r31, X
    8004:	02 80       	ldd	r0, Z+2	; 0x02
    8006:	f3 81       	ldd	r31, Z+3	; 0x03
    8008:	e0 2d       	mov	r30, r0
    800a:	41 e0       	ldi	r20, 0x01	; 1
    800c:	50 e0       	ldi	r21, 0x00	; 0
    800e:	be 01       	movw	r22, r28
    8010:	6f 5f       	subi	r22, 0xFF	; 255
    8012:	7f 4f       	sbci	r23, 0xFF	; 255
    8014:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:73
}
    8016:	0f 90       	pop	r0
    8018:	df 91       	pop	r29
    801a:	cf 91       	pop	r28
    801c:	08 95       	ret

0000801e <Print::flush()>:
_ZN5Print5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    801e:	08 95       	ret

00008020 <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
    8020:	fc 01       	movw	r30, r24
    8022:	94 85       	ldd	r25, Z+12	; 0x0c
    8024:	fb 01       	movw	r30, r22
    8026:	84 85       	ldd	r24, Z+12	; 0x0c
    8028:	98 13       	cpse	r25, r24
    802a:	03 c0       	rjmp	.+6      	; 0x8032 <EthernetClient::operator==(EthernetClient const&)+0x12>
    802c:	81 e0       	ldi	r24, 0x01	; 1
    802e:	98 30       	cpi	r25, 0x08	; 8
    8030:	09 f4       	brne	.+2      	; 0x8034 <EthernetClient::operator==(EthernetClient const&)+0x14>
    8032:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
    8034:	08 95       	ret

00008036 <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
    8036:	21 e0       	ldi	r18, 0x01	; 1
    8038:	fc 01       	movw	r30, r24
    803a:	84 85       	ldd	r24, Z+12	; 0x0c
    803c:	88 30       	cpi	r24, 0x08	; 8
    803e:	09 f4       	brne	.+2      	; 0x8042 <EthernetClient::operator bool()+0xc>
    8040:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
    8042:	82 2f       	mov	r24, r18
    8044:	08 95       	ret

00008046 <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:124
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
}
    8046:	08 95       	ret

00008048 <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    8048:	cf 93       	push	r28
    804a:	df 93       	push	r29
    804c:	1f 92       	push	r1
    804e:	cd b7       	in	r28, 0x3d	; 61
    8050:	de b7       	in	r29, 0x3e	; 62
    8052:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
    8054:	dc 01       	movw	r26, r24
    8056:	ed 91       	ld	r30, X+
    8058:	fc 91       	ld	r31, X
    805a:	02 80       	ldd	r0, Z+2	; 0x02
    805c:	f3 81       	ldd	r31, Z+3	; 0x03
    805e:	e0 2d       	mov	r30, r0
    8060:	41 e0       	ldi	r20, 0x01	; 1
    8062:	50 e0       	ldi	r21, 0x00	; 0
    8064:	be 01       	movw	r22, r28
    8066:	6f 5f       	subi	r22, 0xFF	; 255
    8068:	7f 4f       	sbci	r23, 0xFF	; 255
    806a:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
    806c:	0f 90       	pop	r0
    806e:	df 91       	pop	r29
    8070:	cf 91       	pop	r28
    8072:	08 95       	ret

00008074 <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    8074:	dc 01       	movw	r26, r24
    8076:	ed 91       	ld	r30, X+
    8078:	fc 91       	ld	r31, X
    807a:	02 8c       	ldd	r0, Z+26	; 0x1a
    807c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    807e:	e0 2d       	mov	r30, r0
    8080:	19 95       	eicall
    8082:	91 e0       	ldi	r25, 0x01	; 1
    8084:	89 27       	eor	r24, r25
    8086:	08 95       	ret

00008088 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    8088:	90 e0       	ldi	r25, 0x00	; 0
    808a:	80 e0       	ldi	r24, 0x00	; 0
    808c:	08 95       	ret

0000808e <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    808e:	dc 01       	movw	r26, r24
    8090:	ed 91       	ld	r30, X+
    8092:	fc 91       	ld	r31, X
    8094:	04 8c       	ldd	r0, Z+28	; 0x1c
    8096:	f5 8d       	ldd	r31, Z+29	; 0x1d
    8098:	e0 2d       	mov	r30, r0
    809a:	19 94       	eijmp

0000809c <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:744

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
}
    809c:	fc 01       	movw	r30, r24
    809e:	84 89       	ldd	r24, Z+20	; 0x14
    80a0:	95 89       	ldd	r25, Z+21	; 0x15
    80a2:	08 95       	ret

000080a4 <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:738

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
}
    80a4:	fc 01       	movw	r30, r24
    80a6:	82 89       	ldd	r24, Z+18	; 0x12
    80a8:	93 89       	ldd	r25, Z+19	; 0x13
    80aa:	08 95       	ret

000080ac <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:623
	CS_IDLE;
}

//fill area from x to x+w,y to y+h
void LCDWIKI_KBV::Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    80ac:	4f 92       	push	r4
    80ae:	5f 92       	push	r5
    80b0:	6f 92       	push	r6
    80b2:	7f 92       	push	r7
    80b4:	8f 92       	push	r8
    80b6:	9f 92       	push	r9
    80b8:	af 92       	push	r10
    80ba:	bf 92       	push	r11
    80bc:	cf 92       	push	r12
    80be:	df 92       	push	r13
    80c0:	ef 92       	push	r14
    80c2:	ff 92       	push	r15
    80c4:	0f 93       	push	r16
    80c6:	1f 93       	push	r17
    80c8:	cf 93       	push	r28
    80ca:	df 93       	push	r29
    80cc:	ec 01       	movw	r28, r24
    80ce:	5a 01       	movw	r10, r20
    80d0:	27 01       	movw	r4, r14
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:625
	int16_t end;
	if (w < 0) 
    80d2:	37 ff       	sbrs	r19, 7
    80d4:	05 c0       	rjmp	.+10     	; 0x80e0 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
    80d6:	62 0f       	add	r22, r18
    80d8:	73 1f       	adc	r23, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:627
	{
        w = -w;
    80da:	31 95       	neg	r19
    80dc:	21 95       	neg	r18
    80de:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:630
        x -= w;
    }                           //+ve w
    end = x + w;
    80e0:	7b 01       	movw	r14, r22
    80e2:	e2 0e       	add	r14, r18
    80e4:	f3 1e       	adc	r15, r19
    80e6:	6b 01       	movw	r12, r22
    80e8:	77 ff       	sbrs	r23, 7
    80ea:	02 c0       	rjmp	.+4      	; 0x80f0 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
    80ec:	d1 2c       	mov	r13, r1
    80ee:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:635
    if (x < 0)
    {
        x = 0;
    }
    if (end > Get_Width())
    80f0:	e8 81       	ld	r30, Y
    80f2:	f9 81       	ldd	r31, Y+1	; 0x01
    80f4:	06 84       	ldd	r0, Z+14	; 0x0e
    80f6:	f7 85       	ldd	r31, Z+15	; 0x0f
    80f8:	e0 2d       	mov	r30, r0
    80fa:	ce 01       	movw	r24, r28
    80fc:	19 95       	eicall
    80fe:	8e 15       	cp	r24, r14
    8100:	9f 05       	cpc	r25, r15
    8102:	44 f4       	brge	.+16     	; 0x8114 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:637
    {
        end = Get_Width();
    8104:	e8 81       	ld	r30, Y
    8106:	f9 81       	ldd	r31, Y+1	; 0x01
    8108:	06 84       	ldd	r0, Z+14	; 0x0e
    810a:	f7 85       	ldd	r31, Z+15	; 0x0f
    810c:	e0 2d       	mov	r30, r0
    810e:	ce 01       	movw	r24, r28
    8110:	19 95       	eicall
    8112:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:639
    }
    w = end - x;
    8114:	47 01       	movw	r8, r14
    8116:	8c 18       	sub	r8, r12
    8118:	9d 08       	sbc	r9, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:640
    if (h < 0) 
    811a:	17 ff       	sbrs	r17, 7
    811c:	05 c0       	rjmp	.+10     	; 0x8128 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
    811e:	a0 0e       	add	r10, r16
    8120:	b1 1e       	adc	r11, r17
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:642
	{
        h = -h;
    8122:	11 95       	neg	r17
    8124:	01 95       	neg	r16
    8126:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:645
        y -= h;
    }                           //+ve h
    end = y + h;
    8128:	0a 0d       	add	r16, r10
    812a:	1b 1d       	adc	r17, r11
    812c:	b7 fe       	sbrs	r11, 7
    812e:	02 c0       	rjmp	.+4      	; 0x8134 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
    8130:	b1 2c       	mov	r11, r1
    8132:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:650
    if (y < 0)
    {
        y = 0;
    }
    if (end > Get_Height())
    8134:	e8 81       	ld	r30, Y
    8136:	f9 81       	ldd	r31, Y+1	; 0x01
    8138:	04 84       	ldd	r0, Z+12	; 0x0c
    813a:	f5 85       	ldd	r31, Z+13	; 0x0d
    813c:	e0 2d       	mov	r30, r0
    813e:	ce 01       	movw	r24, r28
    8140:	19 95       	eicall
    8142:	80 17       	cp	r24, r16
    8144:	91 07       	cpc	r25, r17
    8146:	44 f4       	brge	.+16     	; 0x8158 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:652
    {
        end = Get_Height();
    8148:	e8 81       	ld	r30, Y
    814a:	f9 81       	ldd	r31, Y+1	; 0x01
    814c:	04 84       	ldd	r0, Z+12	; 0x0c
    814e:	f5 85       	ldd	r31, Z+13	; 0x0d
    8150:	e0 2d       	mov	r30, r0
    8152:	ce 01       	movw	r24, r28
    8154:	19 95       	eicall
    8156:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:654
    }
    h = end - y;
    8158:	38 01       	movw	r6, r16
    815a:	6a 18       	sub	r6, r10
    815c:	7b 08       	sbc	r7, r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:655
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);//set area
    815e:	01 50       	subi	r16, 0x01	; 1
    8160:	11 09       	sbc	r17, r1
    8162:	97 01       	movw	r18, r14
    8164:	21 50       	subi	r18, 0x01	; 1
    8166:	31 09       	sbc	r19, r1
    8168:	e8 81       	ld	r30, Y
    816a:	f9 81       	ldd	r31, Y+1	; 0x01
    816c:	06 80       	ldd	r0, Z+6	; 0x06
    816e:	f7 81       	ldd	r31, Z+7	; 0x07
    8170:	e0 2d       	mov	r30, r0
    8172:	a5 01       	movw	r20, r10
    8174:	b6 01       	movw	r22, r12
    8176:	ce 01       	movw	r24, r28
    8178:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:656
	CS_ACTIVE;
    817a:	ee a5       	ldd	r30, Y+46	; 0x2e
    817c:	ff a5       	ldd	r31, Y+47	; 0x2f
    817e:	80 81       	ld	r24, Z
    8180:	9a ad       	ldd	r25, Y+58	; 0x3a
    8182:	89 23       	and	r24, r25
    8184:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:657
    if(lcd_driver == ID_932X)
    8186:	88 8d       	ldd	r24, Y+24	; 0x18
    8188:	99 8d       	ldd	r25, Y+25	; 0x19
    818a:	89 2b       	or	r24, r25
    818c:	c9 f4       	brne	.+50     	; 0x81c0 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:659
	{
		writeCmd8(ILI932X_START_OSC);
    818e:	e8 a9       	ldd	r30, Y+48	; 0x30
    8190:	f9 a9       	ldd	r31, Y+49	; 0x31
    8192:	80 81       	ld	r24, Z
    8194:	9b ad       	ldd	r25, Y+59	; 0x3b
    8196:	89 23       	and	r24, r25
    8198:	80 83       	st	Z, r24
    819a:	12 b8       	out	0x02, r1	; 2
    819c:	ea a9       	ldd	r30, Y+50	; 0x32
    819e:	fb a9       	ldd	r31, Y+51	; 0x33
    81a0:	80 81       	ld	r24, Z
    81a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    81a4:	89 23       	and	r24, r25
    81a6:	80 83       	st	Z, r24
    81a8:	ea a9       	ldd	r30, Y+50	; 0x32
    81aa:	fb a9       	ldd	r31, Y+51	; 0x33
    81ac:	80 81       	ld	r24, Z
    81ae:	98 ad       	ldd	r25, Y+56	; 0x38
    81b0:	89 2b       	or	r24, r25
    81b2:	80 83       	st	Z, r24
    81b4:	e8 a9       	ldd	r30, Y+48	; 0x30
    81b6:	f9 a9       	ldd	r31, Y+49	; 0x31
    81b8:	80 81       	ld	r24, Z
    81ba:	9f a9       	ldd	r25, Y+55	; 0x37
    81bc:	89 2b       	or	r24, r25
    81be:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:662
			
	}
	writeCmd8(CC);	
    81c0:	e8 a9       	ldd	r30, Y+48	; 0x30
    81c2:	f9 a9       	ldd	r31, Y+49	; 0x31
    81c4:	80 81       	ld	r24, Z
    81c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    81c8:	89 23       	and	r24, r25
    81ca:	80 83       	st	Z, r24
    81cc:	88 a1       	ldd	r24, Y+32	; 0x20
    81ce:	82 b9       	out	0x02, r24	; 2
    81d0:	ea a9       	ldd	r30, Y+50	; 0x32
    81d2:	fb a9       	ldd	r31, Y+51	; 0x33
    81d4:	80 81       	ld	r24, Z
    81d6:	9c ad       	ldd	r25, Y+60	; 0x3c
    81d8:	89 23       	and	r24, r25
    81da:	80 83       	st	Z, r24
    81dc:	ea a9       	ldd	r30, Y+50	; 0x32
    81de:	fb a9       	ldd	r31, Y+51	; 0x33
    81e0:	80 81       	ld	r24, Z
    81e2:	98 ad       	ldd	r25, Y+56	; 0x38
    81e4:	89 2b       	or	r24, r25
    81e6:	80 83       	st	Z, r24
    81e8:	e8 a9       	ldd	r30, Y+48	; 0x30
    81ea:	f9 a9       	ldd	r31, Y+49	; 0x31
    81ec:	80 81       	ld	r24, Z
    81ee:	9f a9       	ldd	r25, Y+55	; 0x37
    81f0:	89 2b       	or	r24, r25
    81f2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:663
	if (h > w) 
    81f4:	86 14       	cp	r8, r6
    81f6:	97 04       	cpc	r9, r7
    81f8:	2c f0       	brlt	.+10     	; 0x8204 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
    81fa:	96 2d       	mov	r25, r6
    81fc:	87 2d       	mov	r24, r7
    81fe:	34 01       	movw	r6, r8
    8200:	89 2e       	mov	r8, r25
    8202:	98 2e       	mov	r9, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:669
	{
        end = h;
        h = w;
        w = end;
    }
	while (h-- > 0) 
    8204:	18 14       	cp	r1, r8
    8206:	19 04       	cpc	r1, r9
    8208:	0c f5       	brge	.+66     	; 0x824c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:671
	{
		end = w;
    820a:	c3 01       	movw	r24, r6
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:674
		do 
		{
   			writeData16(color);//set color data
    820c:	52 b8       	out	0x02, r5	; 2
    820e:	ea a9       	ldd	r30, Y+50	; 0x32
    8210:	fb a9       	ldd	r31, Y+51	; 0x33
    8212:	20 81       	ld	r18, Z
    8214:	3c ad       	ldd	r19, Y+60	; 0x3c
    8216:	23 23       	and	r18, r19
    8218:	20 83       	st	Z, r18
    821a:	ea a9       	ldd	r30, Y+50	; 0x32
    821c:	fb a9       	ldd	r31, Y+51	; 0x33
    821e:	20 81       	ld	r18, Z
    8220:	38 ad       	ldd	r19, Y+56	; 0x38
    8222:	23 2b       	or	r18, r19
    8224:	20 83       	st	Z, r18
    8226:	42 b8       	out	0x02, r4	; 2
    8228:	ea a9       	ldd	r30, Y+50	; 0x32
    822a:	fb a9       	ldd	r31, Y+51	; 0x33
    822c:	20 81       	ld	r18, Z
    822e:	3c ad       	ldd	r19, Y+60	; 0x3c
    8230:	23 23       	and	r18, r19
    8232:	20 83       	st	Z, r18
    8234:	ea a9       	ldd	r30, Y+50	; 0x32
    8236:	fb a9       	ldd	r31, Y+51	; 0x33
    8238:	20 81       	ld	r18, Z
    823a:	38 ad       	ldd	r19, Y+56	; 0x38
    823c:	23 2b       	or	r18, r19
    823e:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:675
        } while (--end != 0);
    8240:	01 97       	sbiw	r24, 0x01	; 1
    8242:	21 f7       	brne	.-56     	; 0x820c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
    8244:	81 e0       	ldi	r24, 0x01	; 1
    8246:	88 1a       	sub	r8, r24
    8248:	91 08       	sbc	r9, r1
    824a:	dc cf       	rjmp	.-72     	; 0x8204 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:677
	}
	if(lcd_driver == ID_932X)
    824c:	88 8d       	ldd	r24, Y+24	; 0x18
    824e:	99 8d       	ldd	r25, Y+25	; 0x19
    8250:	00 97       	sbiw	r24, 0x00	; 0
    8252:	51 f5       	brne	.+84     	; 0x82a8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:679
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
    8254:	0c 89       	ldd	r16, Y+20	; 0x14
    8256:	1d 89       	ldd	r17, Y+21	; 0x15
    8258:	01 50       	subi	r16, 0x01	; 1
    825a:	11 09       	sbc	r17, r1
    825c:	2a 89       	ldd	r18, Y+18	; 0x12
    825e:	3b 89       	ldd	r19, Y+19	; 0x13
    8260:	21 50       	subi	r18, 0x01	; 1
    8262:	31 09       	sbc	r19, r1
    8264:	e8 81       	ld	r30, Y
    8266:	f9 81       	ldd	r31, Y+1	; 0x01
    8268:	06 80       	ldd	r0, Z+6	; 0x06
    826a:	f7 81       	ldd	r31, Z+7	; 0x07
    826c:	e0 2d       	mov	r30, r0
    826e:	50 e0       	ldi	r21, 0x00	; 0
    8270:	40 e0       	ldi	r20, 0x00	; 0
    8272:	70 e0       	ldi	r23, 0x00	; 0
    8274:	60 e0       	ldi	r22, 0x00	; 0
    8276:	ce 01       	movw	r24, r28
    8278:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:685
	}
	else if(lcd_driver == ID_7575)
	{
		Set_LR();
	}
	CS_IDLE;
    827a:	ee a5       	ldd	r30, Y+46	; 0x2e
    827c:	ff a5       	ldd	r31, Y+47	; 0x2f
    827e:	80 81       	ld	r24, Z
    8280:	9e a9       	ldd	r25, Y+54	; 0x36
    8282:	89 2b       	or	r24, r25
    8284:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:686
}
    8286:	df 91       	pop	r29
    8288:	cf 91       	pop	r28
    828a:	1f 91       	pop	r17
    828c:	0f 91       	pop	r16
    828e:	ff 90       	pop	r15
    8290:	ef 90       	pop	r14
    8292:	df 90       	pop	r13
    8294:	cf 90       	pop	r12
    8296:	bf 90       	pop	r11
    8298:	af 90       	pop	r10
    829a:	9f 90       	pop	r9
    829c:	8f 90       	pop	r8
    829e:	7f 90       	pop	r7
    82a0:	6f 90       	pop	r6
    82a2:	5f 90       	pop	r5
    82a4:	4f 90       	pop	r4
    82a6:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:681
	}
	if(lcd_driver == ID_932X)
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
	}
	else if(lcd_driver == ID_7575)
    82a8:	01 97       	sbiw	r24, 0x01	; 1
    82aa:	39 f7       	brne	.-50     	; 0x827a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
    82ac:	ee a5       	ldd	r30, Y+46	; 0x2e
    82ae:	ff a5       	ldd	r31, Y+47	; 0x2f
Set_LR():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:408
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void LCDWIKI_KBV::Set_LR(void)
{
	CS_ACTIVE;
    82b0:	80 81       	ld	r24, Z
    82b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    82b4:	89 23       	and	r24, r25
    82b6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:409
	writeCmdData8(HX8347G_COLADDREND_HI,(width -1)>>8);
    82b8:	e8 a9       	ldd	r30, Y+48	; 0x30
    82ba:	f9 a9       	ldd	r31, Y+49	; 0x31
    82bc:	80 81       	ld	r24, Z
    82be:	9b ad       	ldd	r25, Y+59	; 0x3b
    82c0:	89 23       	and	r24, r25
    82c2:	80 83       	st	Z, r24
    82c4:	84 e0       	ldi	r24, 0x04	; 4
    82c6:	82 b9       	out	0x02, r24	; 2
    82c8:	ea a9       	ldd	r30, Y+50	; 0x32
    82ca:	fb a9       	ldd	r31, Y+51	; 0x33
    82cc:	80 81       	ld	r24, Z
    82ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    82d0:	89 23       	and	r24, r25
    82d2:	80 83       	st	Z, r24
    82d4:	ea a9       	ldd	r30, Y+50	; 0x32
    82d6:	fb a9       	ldd	r31, Y+51	; 0x33
    82d8:	80 81       	ld	r24, Z
    82da:	98 ad       	ldd	r25, Y+56	; 0x38
    82dc:	89 2b       	or	r24, r25
    82de:	80 83       	st	Z, r24
    82e0:	e8 a9       	ldd	r30, Y+48	; 0x30
    82e2:	f9 a9       	ldd	r31, Y+49	; 0x31
    82e4:	80 81       	ld	r24, Z
    82e6:	9f a9       	ldd	r25, Y+55	; 0x37
    82e8:	89 2b       	or	r24, r25
    82ea:	80 83       	st	Z, r24
    82ec:	8a 89       	ldd	r24, Y+18	; 0x12
    82ee:	9b 89       	ldd	r25, Y+19	; 0x13
    82f0:	01 97       	sbiw	r24, 0x01	; 1
    82f2:	92 b9       	out	0x02, r25	; 2
    82f4:	ea a9       	ldd	r30, Y+50	; 0x32
    82f6:	fb a9       	ldd	r31, Y+51	; 0x33
    82f8:	80 81       	ld	r24, Z
    82fa:	9c ad       	ldd	r25, Y+60	; 0x3c
    82fc:	89 23       	and	r24, r25
    82fe:	80 83       	st	Z, r24
    8300:	ea a9       	ldd	r30, Y+50	; 0x32
    8302:	fb a9       	ldd	r31, Y+51	; 0x33
    8304:	80 81       	ld	r24, Z
    8306:	98 ad       	ldd	r25, Y+56	; 0x38
    8308:	89 2b       	or	r24, r25
    830a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:410
	writeCmdData8(HX8347G_COLADDREND_LO,width -1);
    830c:	e8 a9       	ldd	r30, Y+48	; 0x30
    830e:	f9 a9       	ldd	r31, Y+49	; 0x31
    8310:	80 81       	ld	r24, Z
    8312:	9b ad       	ldd	r25, Y+59	; 0x3b
    8314:	89 23       	and	r24, r25
    8316:	80 83       	st	Z, r24
    8318:	85 e0       	ldi	r24, 0x05	; 5
    831a:	82 b9       	out	0x02, r24	; 2
    831c:	ea a9       	ldd	r30, Y+50	; 0x32
    831e:	fb a9       	ldd	r31, Y+51	; 0x33
    8320:	80 81       	ld	r24, Z
    8322:	9c ad       	ldd	r25, Y+60	; 0x3c
    8324:	89 23       	and	r24, r25
    8326:	80 83       	st	Z, r24
    8328:	ea a9       	ldd	r30, Y+50	; 0x32
    832a:	fb a9       	ldd	r31, Y+51	; 0x33
    832c:	80 81       	ld	r24, Z
    832e:	98 ad       	ldd	r25, Y+56	; 0x38
    8330:	89 2b       	or	r24, r25
    8332:	80 83       	st	Z, r24
    8334:	e8 a9       	ldd	r30, Y+48	; 0x30
    8336:	f9 a9       	ldd	r31, Y+49	; 0x31
    8338:	80 81       	ld	r24, Z
    833a:	9f a9       	ldd	r25, Y+55	; 0x37
    833c:	89 2b       	or	r24, r25
    833e:	80 83       	st	Z, r24
    8340:	8a 89       	ldd	r24, Y+18	; 0x12
    8342:	81 50       	subi	r24, 0x01	; 1
    8344:	82 b9       	out	0x02, r24	; 2
    8346:	ea a9       	ldd	r30, Y+50	; 0x32
    8348:	fb a9       	ldd	r31, Y+51	; 0x33
    834a:	80 81       	ld	r24, Z
    834c:	9c ad       	ldd	r25, Y+60	; 0x3c
    834e:	89 23       	and	r24, r25
    8350:	80 83       	st	Z, r24
    8352:	ea a9       	ldd	r30, Y+50	; 0x32
    8354:	fb a9       	ldd	r31, Y+51	; 0x33
    8356:	80 81       	ld	r24, Z
    8358:	98 ad       	ldd	r25, Y+56	; 0x38
    835a:	89 2b       	or	r24, r25
    835c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:411
	writeCmdData8(HX8347G_ROWADDREND_HI,(height -1)>>8);
    835e:	e8 a9       	ldd	r30, Y+48	; 0x30
    8360:	f9 a9       	ldd	r31, Y+49	; 0x31
    8362:	80 81       	ld	r24, Z
    8364:	9b ad       	ldd	r25, Y+59	; 0x3b
    8366:	89 23       	and	r24, r25
    8368:	80 83       	st	Z, r24
    836a:	88 e0       	ldi	r24, 0x08	; 8
    836c:	82 b9       	out	0x02, r24	; 2
    836e:	ea a9       	ldd	r30, Y+50	; 0x32
    8370:	fb a9       	ldd	r31, Y+51	; 0x33
    8372:	80 81       	ld	r24, Z
    8374:	9c ad       	ldd	r25, Y+60	; 0x3c
    8376:	89 23       	and	r24, r25
    8378:	80 83       	st	Z, r24
    837a:	ea a9       	ldd	r30, Y+50	; 0x32
    837c:	fb a9       	ldd	r31, Y+51	; 0x33
    837e:	80 81       	ld	r24, Z
    8380:	98 ad       	ldd	r25, Y+56	; 0x38
    8382:	89 2b       	or	r24, r25
    8384:	80 83       	st	Z, r24
    8386:	e8 a9       	ldd	r30, Y+48	; 0x30
    8388:	f9 a9       	ldd	r31, Y+49	; 0x31
    838a:	80 81       	ld	r24, Z
    838c:	9f a9       	ldd	r25, Y+55	; 0x37
    838e:	89 2b       	or	r24, r25
    8390:	80 83       	st	Z, r24
    8392:	8c 89       	ldd	r24, Y+20	; 0x14
    8394:	9d 89       	ldd	r25, Y+21	; 0x15
    8396:	01 97       	sbiw	r24, 0x01	; 1
    8398:	92 b9       	out	0x02, r25	; 2
    839a:	ea a9       	ldd	r30, Y+50	; 0x32
    839c:	fb a9       	ldd	r31, Y+51	; 0x33
    839e:	80 81       	ld	r24, Z
    83a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    83a2:	89 23       	and	r24, r25
    83a4:	80 83       	st	Z, r24
    83a6:	ea a9       	ldd	r30, Y+50	; 0x32
    83a8:	fb a9       	ldd	r31, Y+51	; 0x33
    83aa:	80 81       	ld	r24, Z
    83ac:	98 ad       	ldd	r25, Y+56	; 0x38
    83ae:	89 2b       	or	r24, r25
    83b0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:412
	writeCmdData8(HX8347G_ROWADDREND_LO,height -1);
    83b2:	e8 a9       	ldd	r30, Y+48	; 0x30
    83b4:	f9 a9       	ldd	r31, Y+49	; 0x31
    83b6:	80 81       	ld	r24, Z
    83b8:	9b ad       	ldd	r25, Y+59	; 0x3b
    83ba:	89 23       	and	r24, r25
    83bc:	80 83       	st	Z, r24
    83be:	89 e0       	ldi	r24, 0x09	; 9
    83c0:	82 b9       	out	0x02, r24	; 2
    83c2:	ea a9       	ldd	r30, Y+50	; 0x32
    83c4:	fb a9       	ldd	r31, Y+51	; 0x33
    83c6:	80 81       	ld	r24, Z
    83c8:	9c ad       	ldd	r25, Y+60	; 0x3c
    83ca:	89 23       	and	r24, r25
    83cc:	80 83       	st	Z, r24
    83ce:	ea a9       	ldd	r30, Y+50	; 0x32
    83d0:	fb a9       	ldd	r31, Y+51	; 0x33
    83d2:	80 81       	ld	r24, Z
    83d4:	98 ad       	ldd	r25, Y+56	; 0x38
    83d6:	89 2b       	or	r24, r25
    83d8:	80 83       	st	Z, r24
    83da:	e8 a9       	ldd	r30, Y+48	; 0x30
    83dc:	f9 a9       	ldd	r31, Y+49	; 0x31
    83de:	80 81       	ld	r24, Z
    83e0:	9f a9       	ldd	r25, Y+55	; 0x37
    83e2:	89 2b       	or	r24, r25
    83e4:	80 83       	st	Z, r24
    83e6:	8c 89       	ldd	r24, Y+20	; 0x14
    83e8:	81 50       	subi	r24, 0x01	; 1
    83ea:	82 b9       	out	0x02, r24	; 2
    83ec:	ea a9       	ldd	r30, Y+50	; 0x32
    83ee:	fb a9       	ldd	r31, Y+51	; 0x33
    83f0:	80 81       	ld	r24, Z
    83f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    83f4:	89 23       	and	r24, r25
    83f6:	80 83       	st	Z, r24
    83f8:	ea a9       	ldd	r30, Y+50	; 0x32
    83fa:	fb a9       	ldd	r31, Y+51	; 0x33
    83fc:	80 81       	ld	r24, Z
    83fe:	98 ad       	ldd	r25, Y+56	; 0x38
    8400:	89 2b       	or	r24, r25
    8402:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:413
	CS_IDLE;
    8404:	ee a5       	ldd	r30, Y+46	; 0x2e
    8406:	ff a5       	ldd	r31, Y+47	; 0x2f
    8408:	80 81       	ld	r24, Z
    840a:	9e a9       	ldd	r25, Y+54	; 0x36
    840c:	89 2b       	or	r24, r25
    840e:	80 83       	st	Z, r24
    8410:	34 cf       	rjmp	.-408    	; 0x827a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

00008412 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:610
	}
}

//set x,y  coordinate and color to draw a pixel point 
void LCDWIKI_KBV::Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
    8412:	af 92       	push	r10
    8414:	bf 92       	push	r11
    8416:	cf 92       	push	r12
    8418:	df 92       	push	r13
    841a:	ef 92       	push	r14
    841c:	ff 92       	push	r15
    841e:	0f 93       	push	r16
    8420:	1f 93       	push	r17
    8422:	cf 93       	push	r28
    8424:	df 93       	push	r29
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:611
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
    8426:	77 fd       	sbrc	r23, 7
    8428:	75 c0       	rjmp	.+234    	; 0x8514 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    842a:	57 fd       	sbrc	r21, 7
    842c:	73 c0       	rjmp	.+230    	; 0x8514 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    842e:	c3 2e       	mov	r12, r19
    8430:	d2 2e       	mov	r13, r18
    8432:	5a 01       	movw	r10, r20
    8434:	7b 01       	movw	r14, r22
    8436:	ec 01       	movw	r28, r24
    8438:	e8 81       	ld	r30, Y
    843a:	f9 81       	ldd	r31, Y+1	; 0x01
    843c:	06 84       	ldd	r0, Z+14	; 0x0e
    843e:	f7 85       	ldd	r31, Z+15	; 0x0f
    8440:	e0 2d       	mov	r30, r0
    8442:	19 95       	eicall
    8444:	8e 15       	cp	r24, r14
    8446:	9f 05       	cpc	r25, r15
    8448:	0c f4       	brge	.+2      	; 0x844c <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
    844a:	64 c0       	rjmp	.+200    	; 0x8514 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    844c:	e8 81       	ld	r30, Y
    844e:	f9 81       	ldd	r31, Y+1	; 0x01
    8450:	04 84       	ldd	r0, Z+12	; 0x0c
    8452:	f5 85       	ldd	r31, Z+13	; 0x0d
    8454:	e0 2d       	mov	r30, r0
    8456:	ce 01       	movw	r24, r28
    8458:	19 95       	eicall
    845a:	8a 15       	cp	r24, r10
    845c:	9b 05       	cpc	r25, r11
    845e:	0c f4       	brge	.+2      	; 0x8462 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
    8460:	59 c0       	rjmp	.+178    	; 0x8514 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:615
	{
		return;
	}
	Set_Addr_Window(x, y, x, y);
    8462:	e8 81       	ld	r30, Y
    8464:	f9 81       	ldd	r31, Y+1	; 0x01
    8466:	06 80       	ldd	r0, Z+6	; 0x06
    8468:	f7 81       	ldd	r31, Z+7	; 0x07
    846a:	e0 2d       	mov	r30, r0
    846c:	85 01       	movw	r16, r10
    846e:	97 01       	movw	r18, r14
    8470:	a5 01       	movw	r20, r10
    8472:	b7 01       	movw	r22, r14
    8474:	ce 01       	movw	r24, r28
    8476:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:616
	CS_ACTIVE;
    8478:	ee a5       	ldd	r30, Y+46	; 0x2e
    847a:	ff a5       	ldd	r31, Y+47	; 0x2f
    847c:	80 81       	ld	r24, Z
    847e:	9a ad       	ldd	r25, Y+58	; 0x3a
    8480:	89 23       	and	r24, r25
    8482:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:617
	writeCmdData16(CC, color);
    8484:	98 a1       	ldd	r25, Y+32	; 0x20
    8486:	29 a1       	ldd	r18, Y+33	; 0x21
    8488:	e8 a9       	ldd	r30, Y+48	; 0x30
    848a:	f9 a9       	ldd	r31, Y+49	; 0x31
    848c:	80 81       	ld	r24, Z
    848e:	3b ad       	ldd	r19, Y+59	; 0x3b
    8490:	83 23       	and	r24, r19
    8492:	80 83       	st	Z, r24
    8494:	22 b9       	out	0x02, r18	; 2
    8496:	ea a9       	ldd	r30, Y+50	; 0x32
    8498:	fb a9       	ldd	r31, Y+51	; 0x33
    849a:	80 81       	ld	r24, Z
    849c:	2c ad       	ldd	r18, Y+60	; 0x3c
    849e:	82 23       	and	r24, r18
    84a0:	80 83       	st	Z, r24
    84a2:	ea a9       	ldd	r30, Y+50	; 0x32
    84a4:	fb a9       	ldd	r31, Y+51	; 0x33
    84a6:	80 81       	ld	r24, Z
    84a8:	28 ad       	ldd	r18, Y+56	; 0x38
    84aa:	82 2b       	or	r24, r18
    84ac:	80 83       	st	Z, r24
    84ae:	92 b9       	out	0x02, r25	; 2
    84b0:	ea a9       	ldd	r30, Y+50	; 0x32
    84b2:	fb a9       	ldd	r31, Y+51	; 0x33
    84b4:	80 81       	ld	r24, Z
    84b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    84b8:	89 23       	and	r24, r25
    84ba:	80 83       	st	Z, r24
    84bc:	ea a9       	ldd	r30, Y+50	; 0x32
    84be:	fb a9       	ldd	r31, Y+51	; 0x33
    84c0:	80 81       	ld	r24, Z
    84c2:	98 ad       	ldd	r25, Y+56	; 0x38
    84c4:	89 2b       	or	r24, r25
    84c6:	80 83       	st	Z, r24
    84c8:	e8 a9       	ldd	r30, Y+48	; 0x30
    84ca:	f9 a9       	ldd	r31, Y+49	; 0x31
    84cc:	80 81       	ld	r24, Z
    84ce:	9f a9       	ldd	r25, Y+55	; 0x37
    84d0:	89 2b       	or	r24, r25
    84d2:	80 83       	st	Z, r24
    84d4:	c2 b8       	out	0x02, r12	; 2
    84d6:	ea a9       	ldd	r30, Y+50	; 0x32
    84d8:	fb a9       	ldd	r31, Y+51	; 0x33
    84da:	80 81       	ld	r24, Z
    84dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    84de:	89 23       	and	r24, r25
    84e0:	80 83       	st	Z, r24
    84e2:	ea a9       	ldd	r30, Y+50	; 0x32
    84e4:	fb a9       	ldd	r31, Y+51	; 0x33
    84e6:	80 81       	ld	r24, Z
    84e8:	98 ad       	ldd	r25, Y+56	; 0x38
    84ea:	89 2b       	or	r24, r25
    84ec:	80 83       	st	Z, r24
    84ee:	d2 b8       	out	0x02, r13	; 2
    84f0:	ea a9       	ldd	r30, Y+50	; 0x32
    84f2:	fb a9       	ldd	r31, Y+51	; 0x33
    84f4:	80 81       	ld	r24, Z
    84f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    84f8:	89 23       	and	r24, r25
    84fa:	80 83       	st	Z, r24
    84fc:	ea a9       	ldd	r30, Y+50	; 0x32
    84fe:	fb a9       	ldd	r31, Y+51	; 0x33
    8500:	80 81       	ld	r24, Z
    8502:	98 ad       	ldd	r25, Y+56	; 0x38
    8504:	89 2b       	or	r24, r25
    8506:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:618
	CS_IDLE;
    8508:	ee a5       	ldd	r30, Y+46	; 0x2e
    850a:	ff a5       	ldd	r31, Y+47	; 0x2f
    850c:	80 81       	ld	r24, Z
    850e:	9e a9       	ldd	r25, Y+54	; 0x36
    8510:	89 2b       	or	r24, r25
    8512:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:619
}
    8514:	df 91       	pop	r29
    8516:	cf 91       	pop	r28
    8518:	1f 91       	pop	r17
    851a:	0f 91       	pop	r16
    851c:	ff 90       	pop	r15
    851e:	ef 90       	pop	r14
    8520:	df 90       	pop	r13
    8522:	cf 90       	pop	r12
    8524:	bf 90       	pop	r11
    8526:	af 90       	pop	r10
    8528:	08 95       	ret

0000852a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:518
    return ret;
}

//read graph RAM data
int16_t LCDWIKI_KBV::Read_GRAM(int16_t x, int16_t y, uint16_t *block, int16_t w, int16_t h)
{
    852a:	7f 92       	push	r7
    852c:	8f 92       	push	r8
    852e:	9f 92       	push	r9
    8530:	af 92       	push	r10
    8532:	bf 92       	push	r11
    8534:	cf 92       	push	r12
    8536:	df 92       	push	r13
    8538:	ef 92       	push	r14
    853a:	ff 92       	push	r15
    853c:	0f 93       	push	r16
    853e:	1f 93       	push	r17
    8540:	cf 93       	push	r28
    8542:	df 93       	push	r29
    8544:	ec 01       	movw	r28, r24
    8546:	59 01       	movw	r10, r18
    8548:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:520
	uint16_t ret, dummy;
    int16_t n = w * h;
    854a:	0e 9d       	mul	r16, r14
    854c:	60 01       	movw	r12, r0
    854e:	0f 9d       	mul	r16, r15
    8550:	d0 0c       	add	r13, r0
    8552:	1e 9d       	mul	r17, r14
    8554:	d0 0c       	add	r13, r0
    8556:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:522
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    8558:	87 01       	movw	r16, r14
    855a:	04 0f       	add	r16, r20
    855c:	15 1f       	adc	r17, r21
    855e:	01 50       	subi	r16, 0x01	; 1
    8560:	11 09       	sbc	r17, r1
    8562:	26 0f       	add	r18, r22
    8564:	37 1f       	adc	r19, r23
    8566:	21 50       	subi	r18, 0x01	; 1
    8568:	31 09       	sbc	r19, r1
    856a:	e8 81       	ld	r30, Y
    856c:	f9 81       	ldd	r31, Y+1	; 0x01
    856e:	06 80       	ldd	r0, Z+6	; 0x06
    8570:	f7 81       	ldd	r31, Z+7	; 0x07
    8572:	e0 2d       	mov	r30, r0
    8574:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    8576:	77 24       	eor	r7, r7
    8578:	7a 94       	dec	r7
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:523
{
	uint16_t ret, dummy;
    int16_t n = w * h;
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    while (n > 0) 
    857a:	1c 14       	cp	r1, r12
    857c:	1d 04       	cpc	r1, r13
    857e:	0c f0       	brlt	.+2      	; 0x8582 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
    8580:	0a c1       	rjmp	.+532    	; 0x8796 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:525
	{
        CS_ACTIVE;
    8582:	ee a5       	ldd	r30, Y+46	; 0x2e
    8584:	ff a5       	ldd	r31, Y+47	; 0x2f
    8586:	80 81       	ld	r24, Z
    8588:	9a ad       	ldd	r25, Y+58	; 0x3a
    858a:	89 23       	and	r24, r25
    858c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:526
		writeCmd16(RC);
    858e:	e8 a9       	ldd	r30, Y+48	; 0x30
    8590:	f9 a9       	ldd	r31, Y+49	; 0x31
    8592:	80 81       	ld	r24, Z
    8594:	9b ad       	ldd	r25, Y+59	; 0x3b
    8596:	89 23       	and	r24, r25
    8598:	80 83       	st	Z, r24
    859a:	9a a1       	ldd	r25, Y+34	; 0x22
    859c:	8b a1       	ldd	r24, Y+35	; 0x23
    859e:	82 b9       	out	0x02, r24	; 2
    85a0:	ea a9       	ldd	r30, Y+50	; 0x32
    85a2:	fb a9       	ldd	r31, Y+51	; 0x33
    85a4:	80 81       	ld	r24, Z
    85a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    85a8:	82 23       	and	r24, r18
    85aa:	80 83       	st	Z, r24
    85ac:	ea a9       	ldd	r30, Y+50	; 0x32
    85ae:	fb a9       	ldd	r31, Y+51	; 0x33
    85b0:	80 81       	ld	r24, Z
    85b2:	28 ad       	ldd	r18, Y+56	; 0x38
    85b4:	82 2b       	or	r24, r18
    85b6:	80 83       	st	Z, r24
    85b8:	92 b9       	out	0x02, r25	; 2
    85ba:	ea a9       	ldd	r30, Y+50	; 0x32
    85bc:	fb a9       	ldd	r31, Y+51	; 0x33
    85be:	80 81       	ld	r24, Z
    85c0:	9c ad       	ldd	r25, Y+60	; 0x3c
    85c2:	89 23       	and	r24, r25
    85c4:	80 83       	st	Z, r24
    85c6:	ea a9       	ldd	r30, Y+50	; 0x32
    85c8:	fb a9       	ldd	r31, Y+51	; 0x33
    85ca:	80 81       	ld	r24, Z
    85cc:	98 ad       	ldd	r25, Y+56	; 0x38
    85ce:	89 2b       	or	r24, r25
    85d0:	80 83       	st	Z, r24
    85d2:	e8 a9       	ldd	r30, Y+48	; 0x30
    85d4:	f9 a9       	ldd	r31, Y+49	; 0x31
    85d6:	80 81       	ld	r24, Z
    85d8:	9f a9       	ldd	r25, Y+55	; 0x37
    85da:	89 2b       	or	r24, r25
    85dc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:527
        setReadDir();
    85de:	81 b1       	in	r24, 0x01	; 1
    85e0:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:528
		if(lcd_driver == ID_932X)
    85e2:	88 8d       	ldd	r24, Y+24	; 0x18
    85e4:	99 8d       	ldd	r25, Y+25	; 0x19
    85e6:	89 2b       	or	r24, r25
    85e8:	09 f0       	breq	.+2      	; 0x85ec <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
    85ea:	67 c0       	rjmp	.+206    	; 0x86ba <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
    85ec:	f5 01       	movw	r30, r10
    85ee:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    85f0:	42 e0       	ldi	r20, 0x02	; 2
    85f2:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:534
				{
					read8(r);
    85f4:	ac a9       	ldd	r26, Y+52	; 0x34
    85f6:	bd a9       	ldd	r27, Y+53	; 0x35
    85f8:	2c 91       	ld	r18, X
    85fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    85fc:	23 23       	and	r18, r19
    85fe:	2c 93       	st	X, r18
    8600:	20 b1       	in	r18, 0x00	; 0
    8602:	ac a9       	ldd	r26, Y+52	; 0x34
    8604:	bd a9       	ldd	r27, Y+53	; 0x35
    8606:	2c 91       	ld	r18, X
    8608:	39 ad       	ldd	r19, Y+57	; 0x39
    860a:	23 2b       	or	r18, r19
    860c:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:535
					read8(r);
    860e:	ac a9       	ldd	r26, Y+52	; 0x34
    8610:	bd a9       	ldd	r27, Y+53	; 0x35
    8612:	2c 91       	ld	r18, X
    8614:	3d ad       	ldd	r19, Y+61	; 0x3d
    8616:	23 23       	and	r18, r19
    8618:	2c 93       	st	X, r18
    861a:	20 b1       	in	r18, 0x00	; 0
    861c:	ac a9       	ldd	r26, Y+52	; 0x34
    861e:	bd a9       	ldd	r27, Y+53	; 0x35
    8620:	2c 91       	ld	r18, X
    8622:	39 ad       	ldd	r19, Y+57	; 0x39
    8624:	23 2b       	or	r18, r19
    8626:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:536
					read8(r);
    8628:	ac a9       	ldd	r26, Y+52	; 0x34
    862a:	bd a9       	ldd	r27, Y+53	; 0x35
    862c:	2c 91       	ld	r18, X
    862e:	3d ad       	ldd	r19, Y+61	; 0x3d
    8630:	23 23       	and	r18, r19
    8632:	2c 93       	st	X, r18
    8634:	20 b1       	in	r18, 0x00	; 0
    8636:	ac a9       	ldd	r26, Y+52	; 0x34
    8638:	bd a9       	ldd	r27, Y+53	; 0x35
    863a:	3c 91       	ld	r19, X
    863c:	69 ad       	ldd	r22, Y+57	; 0x39
    863e:	36 2b       	or	r19, r22
    8640:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:537
					read8(g);
    8642:	ac a9       	ldd	r26, Y+52	; 0x34
    8644:	bd a9       	ldd	r27, Y+53	; 0x35
    8646:	3c 91       	ld	r19, X
    8648:	6d ad       	ldd	r22, Y+61	; 0x3d
    864a:	36 23       	and	r19, r22
    864c:	3c 93       	st	X, r19
    864e:	60 b1       	in	r22, 0x00	; 0
    8650:	ac a9       	ldd	r26, Y+52	; 0x34
    8652:	bd a9       	ldd	r27, Y+53	; 0x35
    8654:	3c 91       	ld	r19, X
    8656:	79 ad       	ldd	r23, Y+57	; 0x39
    8658:	37 2b       	or	r19, r23
    865a:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    865c:	41 30       	cpi	r20, 0x01	; 1
    865e:	51 05       	cpc	r21, r1
    8660:	49 f5       	brne	.+82     	; 0x86b4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:539
					read8(r);
					read8(r);
					read8(r);
					read8(g);
				}
				*block++ = (r<<8 | g);
    8662:	32 2f       	mov	r19, r18
    8664:	26 2f       	mov	r18, r22
    8666:	21 93       	st	Z+, r18
    8668:	31 93       	st	Z+, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:540
				n--;
    866a:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:530
        CS_ACTIVE;
		writeCmd16(RC);
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
    866c:	09 f0       	breq	.+2      	; 0x8670 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
    866e:	c0 cf       	rjmp	.-128    	; 0x85f0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
    8670:	cc 0c       	add	r12, r12
    8672:	dd 1c       	adc	r13, r13
    8674:	ac 0c       	add	r10, r12
    8676:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:542
					read8(g);
				}
				*block++ = (r<<8 | g);
				n--;
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
    8678:	0c 89       	ldd	r16, Y+20	; 0x14
    867a:	1d 89       	ldd	r17, Y+21	; 0x15
    867c:	01 50       	subi	r16, 0x01	; 1
    867e:	11 09       	sbc	r17, r1
    8680:	2a 89       	ldd	r18, Y+18	; 0x12
    8682:	3b 89       	ldd	r19, Y+19	; 0x13
    8684:	21 50       	subi	r18, 0x01	; 1
    8686:	31 09       	sbc	r19, r1
    8688:	e8 81       	ld	r30, Y
    868a:	f9 81       	ldd	r31, Y+1	; 0x01
    868c:	06 80       	ldd	r0, Z+6	; 0x06
    868e:	f7 81       	ldd	r31, Z+7	; 0x07
    8690:	e0 2d       	mov	r30, r0
    8692:	50 e0       	ldi	r21, 0x00	; 0
    8694:	40 e0       	ldi	r20, 0x00	; 0
    8696:	70 e0       	ldi	r23, 0x00	; 0
    8698:	60 e0       	ldi	r22, 0x00	; 0
    869a:	ce 01       	movw	r24, r28
    869c:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:565
            	*block++ = ret;
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
    869e:	ee a5       	ldd	r30, Y+46	; 0x2e
    86a0:	ff a5       	ldd	r31, Y+47	; 0x2f
    86a2:	80 81       	ld	r24, Z
    86a4:	9e a9       	ldd	r25, Y+54	; 0x36
    86a6:	89 2b       	or	r24, r25
    86a8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
        setWriteDir();
    86aa:	81 b1       	in	r24, 0x01	; 1
    86ac:	71 b8       	out	0x01, r7	; 1
    86ae:	d1 2c       	mov	r13, r1
    86b0:	c1 2c       	mov	r12, r1
    86b2:	63 cf       	rjmp	.-314    	; 0x857a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    86b4:	41 e0       	ldi	r20, 0x01	; 1
    86b6:	50 e0       	ldi	r21, 0x00	; 0
    86b8:	9d cf       	rjmp	.-198    	; 0x85f4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:546
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
    86ba:	ec a9       	ldd	r30, Y+52	; 0x34
    86bc:	fd a9       	ldd	r31, Y+53	; 0x35
    86be:	80 81       	ld	r24, Z
    86c0:	9d ad       	ldd	r25, Y+61	; 0x3d
    86c2:	89 23       	and	r24, r25
    86c4:	80 83       	st	Z, r24
    86c6:	80 b1       	in	r24, 0x00	; 0
    86c8:	ec a9       	ldd	r30, Y+52	; 0x34
    86ca:	fd a9       	ldd	r31, Y+53	; 0x35
    86cc:	80 81       	ld	r24, Z
    86ce:	99 ad       	ldd	r25, Y+57	; 0x39
    86d0:	89 2b       	or	r24, r25
    86d2:	80 83       	st	Z, r24
    86d4:	75 01       	movw	r14, r10
    86d6:	86 01       	movw	r16, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:549
        	while (n) 
			{
				if(R24BIT == 1)
    86d8:	8c a5       	ldd	r24, Y+44	; 0x2c
    86da:	9d a5       	ldd	r25, Y+45	; 0x2d
    86dc:	81 30       	cpi	r24, 0x01	; 1
    86de:	91 05       	cpc	r25, r1
    86e0:	d9 f5       	brne	.+118    	; 0x8758 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:551
				{
        			read8(r);
    86e2:	ec a9       	ldd	r30, Y+52	; 0x34
    86e4:	fd a9       	ldd	r31, Y+53	; 0x35
    86e6:	80 81       	ld	r24, Z
    86e8:	9d ad       	ldd	r25, Y+61	; 0x3d
    86ea:	89 23       	and	r24, r25
    86ec:	80 83       	st	Z, r24
    86ee:	60 b1       	in	r22, 0x00	; 0
    86f0:	ec a9       	ldd	r30, Y+52	; 0x34
    86f2:	fd a9       	ldd	r31, Y+53	; 0x35
    86f4:	80 81       	ld	r24, Z
    86f6:	99 ad       	ldd	r25, Y+57	; 0x39
    86f8:	89 2b       	or	r24, r25
    86fa:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:552
         			read8(g);
    86fc:	ec a9       	ldd	r30, Y+52	; 0x34
    86fe:	fd a9       	ldd	r31, Y+53	; 0x35
    8700:	80 81       	ld	r24, Z
    8702:	9d ad       	ldd	r25, Y+61	; 0x3d
    8704:	89 23       	and	r24, r25
    8706:	80 83       	st	Z, r24
    8708:	40 b1       	in	r20, 0x00	; 0
    870a:	ec a9       	ldd	r30, Y+52	; 0x34
    870c:	fd a9       	ldd	r31, Y+53	; 0x35
    870e:	80 81       	ld	r24, Z
    8710:	99 ad       	ldd	r25, Y+57	; 0x39
    8712:	89 2b       	or	r24, r25
    8714:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:553
        			read8(b);
    8716:	ec a9       	ldd	r30, Y+52	; 0x34
    8718:	fd a9       	ldd	r31, Y+53	; 0x35
    871a:	80 81       	ld	r24, Z
    871c:	9d ad       	ldd	r25, Y+61	; 0x3d
    871e:	89 23       	and	r24, r25
    8720:	80 83       	st	Z, r24
    8722:	20 b1       	in	r18, 0x00	; 0
    8724:	ec a9       	ldd	r30, Y+52	; 0x34
    8726:	fd a9       	ldd	r31, Y+53	; 0x35
    8728:	80 81       	ld	r24, Z
    872a:	99 ad       	ldd	r25, Y+57	; 0x39
    872c:	89 2b       	or	r24, r25
    872e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:554
            		ret = Color_To_565(r, g, b);
    8730:	e8 81       	ld	r30, Y
    8732:	f9 81       	ldd	r31, Y+1	; 0x01
    8734:	01 90       	ld	r0, Z+
    8736:	f0 81       	ld	r31, Z
    8738:	e0 2d       	mov	r30, r0
    873a:	ce 01       	movw	r24, r28
    873c:	19 95       	eicall
    873e:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:560
				}
				else if(R24BIT == 0)
				{
					read16(ret);
				}
            	*block++ = ret;
    8740:	f7 01       	movw	r30, r14
    8742:	81 92       	st	Z+, r8
    8744:	91 92       	st	Z+, r9
    8746:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:561
            	n--;
    8748:	01 50       	subi	r16, 0x01	; 1
    874a:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:547
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
        	while (n) 
    874c:	29 f6       	brne	.-118    	; 0x86d8 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
    874e:	cc 0c       	add	r12, r12
    8750:	dd 1c       	adc	r13, r13
    8752:	ac 0c       	add	r10, r12
    8754:	bd 1c       	adc	r11, r13
    8756:	a3 cf       	rjmp	.-186    	; 0x869e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:556
        			read8(r);
         			read8(g);
        			read8(b);
            		ret = Color_To_565(r, g, b);
				}
				else if(R24BIT == 0)
    8758:	89 2b       	or	r24, r25
    875a:	91 f7       	brne	.-28     	; 0x8740 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:558
				{
					read16(ret);
    875c:	ec a9       	ldd	r30, Y+52	; 0x34
    875e:	fd a9       	ldd	r31, Y+53	; 0x35
    8760:	80 81       	ld	r24, Z
    8762:	9d ad       	ldd	r25, Y+61	; 0x3d
    8764:	89 23       	and	r24, r25
    8766:	80 83       	st	Z, r24
    8768:	80 b0       	in	r8, 0x00	; 0
    876a:	ec a9       	ldd	r30, Y+52	; 0x34
    876c:	fd a9       	ldd	r31, Y+53	; 0x35
    876e:	80 81       	ld	r24, Z
    8770:	99 ad       	ldd	r25, Y+57	; 0x39
    8772:	89 2b       	or	r24, r25
    8774:	80 83       	st	Z, r24
    8776:	ec a9       	ldd	r30, Y+52	; 0x34
    8778:	fd a9       	ldd	r31, Y+53	; 0x35
    877a:	80 81       	ld	r24, Z
    877c:	9d ad       	ldd	r25, Y+61	; 0x3d
    877e:	89 23       	and	r24, r25
    8780:	80 83       	st	Z, r24
    8782:	90 b1       	in	r25, 0x00	; 0
    8784:	ec a9       	ldd	r30, Y+52	; 0x34
    8786:	fd a9       	ldd	r31, Y+53	; 0x35
    8788:	80 81       	ld	r24, Z
    878a:	29 ad       	ldd	r18, Y+57	; 0x39
    878c:	82 2b       	or	r24, r18
    878e:	80 83       	st	Z, r24
    8790:	98 2c       	mov	r9, r8
    8792:	89 2e       	mov	r8, r25
    8794:	d5 cf       	rjmp	.-86     	; 0x8740 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:569
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    }
	return 0;
}
    8796:	90 e0       	ldi	r25, 0x00	; 0
    8798:	80 e0       	ldi	r24, 0x00	; 0
    879a:	df 91       	pop	r29
    879c:	cf 91       	pop	r28
    879e:	1f 91       	pop	r17
    87a0:	0f 91       	pop	r16
    87a2:	ff 90       	pop	r15
    87a4:	ef 90       	pop	r14
    87a6:	df 90       	pop	r13
    87a8:	cf 90       	pop	r12
    87aa:	bf 90       	pop	r11
    87ac:	af 90       	pop	r10
    87ae:	9f 90       	pop	r9
    87b0:	8f 90       	pop	r8
    87b2:	7f 90       	pop	r7
    87b4:	08 95       	ret

000087b6 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:487
}

//Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t LCDWIKI_KBV::Color_To_565(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    87b6:	38 e0       	ldi	r19, 0x08	; 8
    87b8:	43 9f       	mul	r20, r19
    87ba:	c0 01       	movw	r24, r0
    87bc:	11 24       	eor	r1, r1
    87be:	80 7e       	andi	r24, 0xE0	; 224
    87c0:	97 70       	andi	r25, 0x07	; 7
    87c2:	26 95       	lsr	r18
    87c4:	26 95       	lsr	r18
    87c6:	26 95       	lsr	r18
    87c8:	82 2b       	or	r24, r18
    87ca:	70 e0       	ldi	r23, 0x00	; 0
    87cc:	76 2f       	mov	r23, r22
    87ce:	66 27       	eor	r22, r22
    87d0:	66 27       	eor	r22, r22
    87d2:	78 7f       	andi	r23, 0xF8	; 248
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:488
}
    87d4:	86 2b       	or	r24, r22
    87d6:	97 2b       	or	r25, r23
    87d8:	08 95       	ret

000087da <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:418
	CS_IDLE;
}

//push color table for 16bits
void LCDWIKI_KBV::Push_Any_Color(uint16_t * block, int16_t n, bool first, uint8_t flags)
{
    87da:	0f 93       	push	r16
    87dc:	cf 93       	push	r28
    87de:	df 93       	push	r29
    87e0:	dc 01       	movw	r26, r24
    87e2:	01 70       	andi	r16, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:423
	uint16_t color;
    uint8_t h, l;
	bool isconst = flags & 1;
//	bool isbigend = (flags & 2) != 0;
    CS_ACTIVE;
    87e4:	9e 96       	adiw	r26, 0x2e	; 46
    87e6:	ed 91       	ld	r30, X+
    87e8:	fc 91       	ld	r31, X
    87ea:	9f 97       	sbiw	r26, 0x2f	; 47
    87ec:	80 81       	ld	r24, Z
    87ee:	da 96       	adiw	r26, 0x3a	; 58
    87f0:	9c 91       	ld	r25, X
    87f2:	da 97       	sbiw	r26, 0x3a	; 58
    87f4:	89 23       	and	r24, r25
    87f6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:424
    if (first) 
    87f8:	22 23       	and	r18, r18
    87fa:	09 f4       	brne	.+2      	; 0x87fe <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
    87fc:	5b c0       	rjmp	.+182    	; 0x88b4 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:426
	{  
		if(lcd_driver == ID_932X)
    87fe:	58 96       	adiw	r26, 0x18	; 24
    8800:	8d 91       	ld	r24, X+
    8802:	9c 91       	ld	r25, X
    8804:	59 97       	sbiw	r26, 0x19	; 25
    8806:	89 2b       	or	r24, r25
    8808:	49 f5       	brne	.+82     	; 0x885c <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
    880a:	d0 96       	adiw	r26, 0x30	; 48
    880c:	ed 91       	ld	r30, X+
    880e:	fc 91       	ld	r31, X
    8810:	d1 97       	sbiw	r26, 0x31	; 49
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:428
		{
			writeCmd8(ILI932X_START_OSC);
    8812:	80 81       	ld	r24, Z
    8814:	db 96       	adiw	r26, 0x3b	; 59
    8816:	9c 91       	ld	r25, X
    8818:	db 97       	sbiw	r26, 0x3b	; 59
    881a:	89 23       	and	r24, r25
    881c:	80 83       	st	Z, r24
    881e:	12 b8       	out	0x02, r1	; 2
    8820:	d2 96       	adiw	r26, 0x32	; 50
    8822:	ed 91       	ld	r30, X+
    8824:	fc 91       	ld	r31, X
    8826:	d3 97       	sbiw	r26, 0x33	; 51
    8828:	80 81       	ld	r24, Z
    882a:	dc 96       	adiw	r26, 0x3c	; 60
    882c:	9c 91       	ld	r25, X
    882e:	dc 97       	sbiw	r26, 0x3c	; 60
    8830:	89 23       	and	r24, r25
    8832:	80 83       	st	Z, r24
    8834:	d2 96       	adiw	r26, 0x32	; 50
    8836:	ed 91       	ld	r30, X+
    8838:	fc 91       	ld	r31, X
    883a:	d3 97       	sbiw	r26, 0x33	; 51
    883c:	80 81       	ld	r24, Z
    883e:	d8 96       	adiw	r26, 0x38	; 56
    8840:	9c 91       	ld	r25, X
    8842:	d8 97       	sbiw	r26, 0x38	; 56
    8844:	89 2b       	or	r24, r25
    8846:	80 83       	st	Z, r24
    8848:	d0 96       	adiw	r26, 0x30	; 48
    884a:	ed 91       	ld	r30, X+
    884c:	fc 91       	ld	r31, X
    884e:	d1 97       	sbiw	r26, 0x31	; 49
    8850:	80 81       	ld	r24, Z
    8852:	d7 96       	adiw	r26, 0x37	; 55
    8854:	9c 91       	ld	r25, X
    8856:	d7 97       	sbiw	r26, 0x37	; 55
    8858:	89 2b       	or	r24, r25
    885a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:431
			
		}
		writeCmd8(CC);			
    885c:	d0 96       	adiw	r26, 0x30	; 48
    885e:	ed 91       	ld	r30, X+
    8860:	fc 91       	ld	r31, X
    8862:	d1 97       	sbiw	r26, 0x31	; 49
    8864:	80 81       	ld	r24, Z
    8866:	db 96       	adiw	r26, 0x3b	; 59
    8868:	9c 91       	ld	r25, X
    886a:	db 97       	sbiw	r26, 0x3b	; 59
    886c:	89 23       	and	r24, r25
    886e:	80 83       	st	Z, r24
    8870:	90 96       	adiw	r26, 0x20	; 32
    8872:	8c 91       	ld	r24, X
    8874:	90 97       	sbiw	r26, 0x20	; 32
    8876:	82 b9       	out	0x02, r24	; 2
    8878:	d2 96       	adiw	r26, 0x32	; 50
    887a:	ed 91       	ld	r30, X+
    887c:	fc 91       	ld	r31, X
    887e:	d3 97       	sbiw	r26, 0x33	; 51
    8880:	80 81       	ld	r24, Z
    8882:	dc 96       	adiw	r26, 0x3c	; 60
    8884:	9c 91       	ld	r25, X
    8886:	dc 97       	sbiw	r26, 0x3c	; 60
    8888:	89 23       	and	r24, r25
    888a:	80 83       	st	Z, r24
    888c:	d2 96       	adiw	r26, 0x32	; 50
    888e:	ed 91       	ld	r30, X+
    8890:	fc 91       	ld	r31, X
    8892:	d3 97       	sbiw	r26, 0x33	; 51
    8894:	80 81       	ld	r24, Z
    8896:	d8 96       	adiw	r26, 0x38	; 56
    8898:	9c 91       	ld	r25, X
    889a:	d8 97       	sbiw	r26, 0x38	; 56
    889c:	89 2b       	or	r24, r25
    889e:	80 83       	st	Z, r24
    88a0:	d0 96       	adiw	r26, 0x30	; 48
    88a2:	ed 91       	ld	r30, X+
    88a4:	fc 91       	ld	r31, X
    88a6:	d1 97       	sbiw	r26, 0x31	; 49
    88a8:	80 81       	ld	r24, Z
    88aa:	d7 96       	adiw	r26, 0x37	; 55
    88ac:	9c 91       	ld	r25, X
    88ae:	d7 97       	sbiw	r26, 0x37	; 55
    88b0:	89 2b       	or	r24, r25
    88b2:	80 83       	st	Z, r24
    88b4:	eb 01       	movw	r28, r22
    88b6:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:433
    }
    while (n-- > 0) 
    88b8:	18 16       	cp	r1, r24
    88ba:	19 06       	cpc	r1, r25
    88bc:	bc f5       	brge	.+110    	; 0x892c <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:435
	{
        if (isconst) 
    88be:	00 23       	and	r16, r16
    88c0:	91 f1       	breq	.+100    	; 0x8926 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:437
		{
			color = pgm_read_word(block++);		
    88c2:	fe 01       	movw	r30, r28
    88c4:	45 91       	lpm	r20, Z+
    88c6:	54 91       	lpm	r21, Z
    88c8:	34 2f       	mov	r19, r20
    88ca:	25 2f       	mov	r18, r21
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:444
		else 
		{
			color = (*block++);			

		}		
        writeData16(color);
    88cc:	22 b9       	out	0x02, r18	; 2
    88ce:	d2 96       	adiw	r26, 0x32	; 50
    88d0:	ed 91       	ld	r30, X+
    88d2:	fc 91       	ld	r31, X
    88d4:	d3 97       	sbiw	r26, 0x33	; 51
    88d6:	20 81       	ld	r18, Z
    88d8:	dc 96       	adiw	r26, 0x3c	; 60
    88da:	4c 91       	ld	r20, X
    88dc:	dc 97       	sbiw	r26, 0x3c	; 60
    88de:	24 23       	and	r18, r20
    88e0:	20 83       	st	Z, r18
    88e2:	d2 96       	adiw	r26, 0x32	; 50
    88e4:	ed 91       	ld	r30, X+
    88e6:	fc 91       	ld	r31, X
    88e8:	d3 97       	sbiw	r26, 0x33	; 51
    88ea:	20 81       	ld	r18, Z
    88ec:	d8 96       	adiw	r26, 0x38	; 56
    88ee:	4c 91       	ld	r20, X
    88f0:	d8 97       	sbiw	r26, 0x38	; 56
    88f2:	24 2b       	or	r18, r20
    88f4:	20 83       	st	Z, r18
    88f6:	32 b9       	out	0x02, r19	; 2
    88f8:	d2 96       	adiw	r26, 0x32	; 50
    88fa:	ed 91       	ld	r30, X+
    88fc:	fc 91       	ld	r31, X
    88fe:	d3 97       	sbiw	r26, 0x33	; 51
    8900:	20 81       	ld	r18, Z
    8902:	dc 96       	adiw	r26, 0x3c	; 60
    8904:	3c 91       	ld	r19, X
    8906:	dc 97       	sbiw	r26, 0x3c	; 60
    8908:	23 23       	and	r18, r19
    890a:	20 83       	st	Z, r18
    890c:	d2 96       	adiw	r26, 0x32	; 50
    890e:	ed 91       	ld	r30, X+
    8910:	fc 91       	ld	r31, X
    8912:	d3 97       	sbiw	r26, 0x33	; 51
    8914:	20 81       	ld	r18, Z
    8916:	d8 96       	adiw	r26, 0x38	; 56
    8918:	3c 91       	ld	r19, X
    891a:	d8 97       	sbiw	r26, 0x38	; 56
    891c:	23 2b       	or	r18, r19
    891e:	20 83       	st	Z, r18
    8920:	22 96       	adiw	r28, 0x02	; 2
    8922:	01 97       	sbiw	r24, 0x01	; 1
    8924:	c9 cf       	rjmp	.-110    	; 0x88b8 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:441
		{
			color = pgm_read_word(block++);		
        } 
		else 
		{
			color = (*block++);			
    8926:	38 81       	ld	r19, Y
    8928:	29 81       	ldd	r18, Y+1	; 0x01
    892a:	d0 cf       	rjmp	.-96     	; 0x88cc <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:446

		}		
        writeData16(color);
    }
    CS_IDLE;
    892c:	9e 96       	adiw	r26, 0x2e	; 46
    892e:	ed 91       	ld	r30, X+
    8930:	fc 91       	ld	r31, X
    8932:	9f 97       	sbiw	r26, 0x2f	; 47
    8934:	80 81       	ld	r24, Z
    8936:	d6 96       	adiw	r26, 0x36	; 54
    8938:	9c 91       	ld	r25, X
    893a:	89 2b       	or	r24, r25
    893c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:447
}
    893e:	df 91       	pop	r29
    8940:	cf 91       	pop	r28
    8942:	0f 91       	pop	r16
    8944:	08 95       	ret

00008946 <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
    8946:	2f 92       	push	r2
    8948:	3f 92       	push	r3
    894a:	4f 92       	push	r4
    894c:	5f 92       	push	r5
    894e:	6f 92       	push	r6
    8950:	7f 92       	push	r7
    8952:	8f 92       	push	r8
    8954:	9f 92       	push	r9
    8956:	af 92       	push	r10
    8958:	bf 92       	push	r11
    895a:	cf 92       	push	r12
    895c:	df 92       	push	r13
    895e:	ef 92       	push	r14
    8960:	ff 92       	push	r15
    8962:	0f 93       	push	r16
    8964:	1f 93       	push	r17
    8966:	cf 93       	push	r28
    8968:	df 93       	push	r29
    896a:	00 d0       	rcall	.+0      	; 0x896c <thermostat_ring_update_pid_parameters(unsigned char)+0x26>
    896c:	00 d0       	rcall	.+0      	; 0x896e <thermostat_ring_update_pid_parameters(unsigned char)+0x28>
    896e:	cd b7       	in	r28, 0x3d	; 61
    8970:	de b7       	in	r29, 0x3e	; 62
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
    8972:	28 2e       	mov	r2, r24
    8974:	31 2c       	mov	r3, r1
    8976:	c1 01       	movw	r24, r2
    8978:	88 0f       	add	r24, r24
    897a:	99 1f       	adc	r25, r25
    897c:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <array_pids>
    8980:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <array_pids+0x1>
    8984:	e8 0f       	add	r30, r24
    8986:	f9 1f       	adc	r31, r25
    8988:	80 81       	ld	r24, Z
    898a:	91 81       	ldd	r25, Z+1	; 0x01
    898c:	9e 83       	std	Y+6, r25	; 0x06
    898e:	8d 83       	std	Y+5, r24	; 0x05
    8990:	81 01       	movw	r16, r2
    8992:	00 0f       	add	r16, r16
    8994:	11 1f       	adc	r17, r17
    8996:	00 0f       	add	r16, r16
    8998:	11 1f       	adc	r17, r17
    899a:	f8 01       	movw	r30, r16
    899c:	e8 54       	subi	r30, 0x48	; 72
    899e:	f5 4f       	sbci	r31, 0xF5	; 245
    89a0:	40 80       	ld	r4, Z
    89a2:	51 80       	ldd	r5, Z+1	; 0x01
    89a4:	62 80       	ldd	r6, Z+2	; 0x02
    89a6:	73 80       	ldd	r7, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    89a8:	20 e0       	ldi	r18, 0x00	; 0
    89aa:	30 e0       	ldi	r19, 0x00	; 0
    89ac:	a9 01       	movw	r20, r18
    89ae:	c3 01       	movw	r24, r6
    89b0:	b2 01       	movw	r22, r4
    89b2:	0e 94 f3 ed 	call	0x1dbe6	; 0x1dbe6 <__cmpsf2>
    89b6:	87 fd       	sbrc	r24, 7
    89b8:	97 c0       	rjmp	.+302    	; 0x8ae8 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
    89ba:	f8 01       	movw	r30, r16
    89bc:	e4 53       	subi	r30, 0x34	; 52
    89be:	f5 4f       	sbci	r31, 0xF5	; 245
    89c0:	80 80       	ld	r8, Z
    89c2:	91 80       	ldd	r9, Z+1	; 0x01
    89c4:	a2 80       	ldd	r10, Z+2	; 0x02
    89c6:	b3 80       	ldd	r11, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    89c8:	20 e0       	ldi	r18, 0x00	; 0
    89ca:	30 e0       	ldi	r19, 0x00	; 0
    89cc:	a9 01       	movw	r20, r18
    89ce:	c5 01       	movw	r24, r10
    89d0:	b4 01       	movw	r22, r8
    89d2:	0e 94 f3 ed 	call	0x1dbe6	; 0x1dbe6 <__cmpsf2>
    89d6:	87 fd       	sbrc	r24, 7
    89d8:	87 c0       	rjmp	.+270    	; 0x8ae8 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
    89da:	f8 01       	movw	r30, r16
    89dc:	e0 52       	subi	r30, 0x20	; 32
    89de:	f5 4f       	sbci	r31, 0xF5	; 245
    89e0:	c0 80       	ld	r12, Z
    89e2:	d1 80       	ldd	r13, Z+1	; 0x01
    89e4:	e2 80       	ldd	r14, Z+2	; 0x02
    89e6:	f3 80       	ldd	r15, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    89e8:	20 e0       	ldi	r18, 0x00	; 0
    89ea:	30 e0       	ldi	r19, 0x00	; 0
    89ec:	a9 01       	movw	r20, r18
    89ee:	c7 01       	movw	r24, r14
    89f0:	b6 01       	movw	r22, r12
    89f2:	0e 94 f3 ed 	call	0x1dbe6	; 0x1dbe6 <__cmpsf2>
    89f6:	87 fd       	sbrc	r24, 7
    89f8:	77 c0       	rjmp	.+238    	; 0x8ae8 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
    89fa:	81 e0       	ldi	r24, 0x01	; 1
    89fc:	ed 81       	ldd	r30, Y+5	; 0x05
    89fe:	fe 81       	ldd	r31, Y+6	; 0x06
    8a00:	22 8d       	ldd	r18, Z+26	; 0x1a
    8a02:	33 8d       	ldd	r19, Z+27	; 0x1b
    8a04:	21 30       	cpi	r18, 0x01	; 1
    8a06:	31 05       	cpc	r19, r1
    8a08:	09 f0       	breq	.+2      	; 0x8a0c <thermostat_ring_update_pid_parameters(unsigned char)+0xc6>
    8a0a:	80 e0       	ldi	r24, 0x00	; 0
    8a0c:	ed 81       	ldd	r30, Y+5	; 0x05
    8a0e:	fe 81       	ldd	r31, Y+6	; 0x06
    8a10:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    8a12:	40 82       	st	Z, r4
    8a14:	51 82       	std	Z+1, r5	; 0x01
    8a16:	62 82       	std	Z+2, r6	; 0x02
    8a18:	73 82       	std	Z+3, r7	; 0x03
    8a1a:	84 82       	std	Z+4, r8	; 0x04
    8a1c:	95 82       	std	Z+5, r9	; 0x05
    8a1e:	a6 82       	std	Z+6, r10	; 0x06
    8a20:	b7 82       	std	Z+7, r11	; 0x07
    8a22:	c0 86       	std	Z+8, r12	; 0x08
    8a24:	d1 86       	std	Z+9, r13	; 0x09
    8a26:	e2 86       	std	Z+10, r14	; 0x0a
    8a28:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
    8a2a:	66 a5       	ldd	r22, Z+46	; 0x2e
    8a2c:	77 a5       	ldd	r23, Z+47	; 0x2f
    8a2e:	80 a9       	ldd	r24, Z+48	; 0x30
    8a30:	91 a9       	ldd	r25, Z+49	; 0x31
    8a32:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
    8a36:	20 e0       	ldi	r18, 0x00	; 0
    8a38:	30 e0       	ldi	r19, 0x00	; 0
    8a3a:	4a e7       	ldi	r20, 0x7A	; 122
    8a3c:	54 e4       	ldi	r21, 0x44	; 68
    8a3e:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
    8a42:	69 83       	std	Y+1, r22	; 0x01
    8a44:	7a 83       	std	Y+2, r23	; 0x02
    8a46:	8b 83       	std	Y+3, r24	; 0x03
    8a48:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
    8a4a:	ed 81       	ldd	r30, Y+5	; 0x05
    8a4c:	fe 81       	ldd	r31, Y+6	; 0x06
    8a4e:	44 86       	std	Z+12, r4	; 0x0c
    8a50:	55 86       	std	Z+13, r5	; 0x0d
    8a52:	66 86       	std	Z+14, r6	; 0x0e
    8a54:	77 86       	std	Z+15, r7	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    8a56:	9b 01       	movw	r18, r22
    8a58:	ac 01       	movw	r20, r24
    8a5a:	c5 01       	movw	r24, r10
    8a5c:	b4 01       	movw	r22, r8
    8a5e:	0e 94 59 ee 	call	0x1dcb2	; 0x1dcb2 <__mulsf3>
    8a62:	4b 01       	movw	r8, r22
    8a64:	5c 01       	movw	r10, r24
    8a66:	ed 81       	ldd	r30, Y+5	; 0x05
    8a68:	fe 81       	ldd	r31, Y+6	; 0x06
    8a6a:	80 8a       	std	Z+16, r8	; 0x10
    8a6c:	91 8a       	std	Z+17, r9	; 0x11
    8a6e:	a2 8a       	std	Z+18, r10	; 0x12
    8a70:	b3 8a       	std	Z+19, r11	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    8a72:	29 81       	ldd	r18, Y+1	; 0x01
    8a74:	3a 81       	ldd	r19, Y+2	; 0x02
    8a76:	4b 81       	ldd	r20, Y+3	; 0x03
    8a78:	5c 81       	ldd	r21, Y+4	; 0x04
    8a7a:	c7 01       	movw	r24, r14
    8a7c:	b6 01       	movw	r22, r12
    8a7e:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
    8a82:	6b 01       	movw	r12, r22
    8a84:	7c 01       	movw	r14, r24
    8a86:	ed 81       	ldd	r30, Y+5	; 0x05
    8a88:	fe 81       	ldd	r31, Y+6	; 0x06
    8a8a:	c4 8a       	std	Z+20, r12	; 0x14
    8a8c:	d5 8a       	std	Z+21, r13	; 0x15
    8a8e:	e6 8a       	std	Z+22, r14	; 0x16
    8a90:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
    8a92:	80 8d       	ldd	r24, Z+24	; 0x18
    8a94:	91 8d       	ldd	r25, Z+25	; 0x19
    8a96:	01 97       	sbiw	r24, 0x01	; 1
    8a98:	39 f5       	brne	.+78     	; 0x8ae8 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
    8a9a:	a3 01       	movw	r20, r6
    8a9c:	92 01       	movw	r18, r4
    8a9e:	60 e0       	ldi	r22, 0x00	; 0
    8aa0:	70 e0       	ldi	r23, 0x00	; 0
    8aa2:	cb 01       	movw	r24, r22
    8aa4:	0e 94 c0 ef 	call	0x1df80	; 0x1df80 <__subsf3>
    8aa8:	ed 81       	ldd	r30, Y+5	; 0x05
    8aaa:	fe 81       	ldd	r31, Y+6	; 0x06
    8aac:	64 87       	std	Z+12, r22	; 0x0c
    8aae:	75 87       	std	Z+13, r23	; 0x0d
    8ab0:	86 87       	std	Z+14, r24	; 0x0e
    8ab2:	97 87       	std	Z+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
    8ab4:	a5 01       	movw	r20, r10
    8ab6:	94 01       	movw	r18, r8
    8ab8:	60 e0       	ldi	r22, 0x00	; 0
    8aba:	70 e0       	ldi	r23, 0x00	; 0
    8abc:	cb 01       	movw	r24, r22
    8abe:	0e 94 c0 ef 	call	0x1df80	; 0x1df80 <__subsf3>
    8ac2:	ed 81       	ldd	r30, Y+5	; 0x05
    8ac4:	fe 81       	ldd	r31, Y+6	; 0x06
    8ac6:	60 8b       	std	Z+16, r22	; 0x10
    8ac8:	71 8b       	std	Z+17, r23	; 0x11
    8aca:	82 8b       	std	Z+18, r24	; 0x12
    8acc:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
    8ace:	a7 01       	movw	r20, r14
    8ad0:	96 01       	movw	r18, r12
    8ad2:	60 e0       	ldi	r22, 0x00	; 0
    8ad4:	70 e0       	ldi	r23, 0x00	; 0
    8ad6:	cb 01       	movw	r24, r22
    8ad8:	0e 94 c0 ef 	call	0x1df80	; 0x1df80 <__subsf3>
    8adc:	ed 81       	ldd	r30, Y+5	; 0x05
    8ade:	fe 81       	ldd	r31, Y+6	; 0x06
    8ae0:	64 8b       	std	Z+20, r22	; 0x14
    8ae2:	75 8b       	std	Z+21, r23	; 0x15
    8ae4:	86 8b       	std	Z+22, r24	; 0x16
    8ae6:	97 8b       	std	Z+23, r25	; 0x17
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
    8ae8:	f1 01       	movw	r30, r2
    8aea:	ec 50       	subi	r30, 0x0C	; 12
    8aec:	f5 4f       	sbci	r31, 0xF5	; 245
    8aee:	10 81       	ld	r17, Z
    8af0:	61 2f       	mov	r22, r17
    8af2:	70 e0       	ldi	r23, 0x00	; 0
SetSampleTime():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
    8af4:	61 15       	cp	r22, r1
    8af6:	71 05       	cpc	r23, r1
    8af8:	f1 f1       	breq	.+124    	; 0x8b76 <thermostat_ring_update_pid_parameters(unsigned char)+0x230>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
    8afa:	07 2e       	mov	r0, r23
    8afc:	00 0c       	add	r0, r0
    8afe:	88 0b       	sbc	r24, r24
    8b00:	99 0b       	sbc	r25, r25
    8b02:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
    8b06:	6b 01       	movw	r12, r22
    8b08:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
    8b0a:	ed 81       	ldd	r30, Y+5	; 0x05
    8b0c:	fe 81       	ldd	r31, Y+6	; 0x06
    8b0e:	66 a5       	ldd	r22, Z+46	; 0x2e
    8b10:	77 a5       	ldd	r23, Z+47	; 0x2f
    8b12:	80 a9       	ldd	r24, Z+48	; 0x30
    8b14:	91 a9       	ldd	r25, Z+49	; 0x31
    8b16:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
    8b1a:	9b 01       	movw	r18, r22
    8b1c:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
    8b1e:	c7 01       	movw	r24, r14
    8b20:	b6 01       	movw	r22, r12
    8b22:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
    8b26:	6b 01       	movw	r12, r22
    8b28:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
    8b2a:	ac 01       	movw	r20, r24
    8b2c:	9b 01       	movw	r18, r22
    8b2e:	ed 81       	ldd	r30, Y+5	; 0x05
    8b30:	fe 81       	ldd	r31, Y+6	; 0x06
    8b32:	60 89       	ldd	r22, Z+16	; 0x10
    8b34:	71 89       	ldd	r23, Z+17	; 0x11
    8b36:	82 89       	ldd	r24, Z+18	; 0x12
    8b38:	93 89       	ldd	r25, Z+19	; 0x13
    8b3a:	0e 94 59 ee 	call	0x1dcb2	; 0x1dcb2 <__mulsf3>
    8b3e:	ed 81       	ldd	r30, Y+5	; 0x05
    8b40:	fe 81       	ldd	r31, Y+6	; 0x06
    8b42:	60 8b       	std	Z+16, r22	; 0x10
    8b44:	71 8b       	std	Z+17, r23	; 0x11
    8b46:	82 8b       	std	Z+18, r24	; 0x12
    8b48:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
    8b4a:	a7 01       	movw	r20, r14
    8b4c:	96 01       	movw	r18, r12
    8b4e:	64 89       	ldd	r22, Z+20	; 0x14
    8b50:	75 89       	ldd	r23, Z+21	; 0x15
    8b52:	86 89       	ldd	r24, Z+22	; 0x16
    8b54:	97 89       	ldd	r25, Z+23	; 0x17
    8b56:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
    8b5a:	ed 81       	ldd	r30, Y+5	; 0x05
    8b5c:	fe 81       	ldd	r31, Y+6	; 0x06
    8b5e:	64 8b       	std	Z+20, r22	; 0x14
    8b60:	75 8b       	std	Z+21, r23	; 0x15
    8b62:	86 8b       	std	Z+22, r24	; 0x16
    8b64:	97 8b       	std	Z+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
    8b66:	81 2f       	mov	r24, r17
    8b68:	90 e0       	ldi	r25, 0x00	; 0
    8b6a:	b0 e0       	ldi	r27, 0x00	; 0
    8b6c:	a0 e0       	ldi	r26, 0x00	; 0
    8b6e:	86 a7       	std	Z+46, r24	; 0x2e
    8b70:	97 a7       	std	Z+47, r25	; 0x2f
    8b72:	a0 ab       	std	Z+48, r26	; 0x30
    8b74:	b1 ab       	std	Z+49, r27	; 0x31
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:221
}
    8b76:	26 96       	adiw	r28, 0x06	; 6
    8b78:	0f b6       	in	r0, 0x3f	; 63
    8b7a:	f8 94       	cli
    8b7c:	de bf       	out	0x3e, r29	; 62
    8b7e:	0f be       	out	0x3f, r0	; 63
    8b80:	cd bf       	out	0x3d, r28	; 61
    8b82:	df 91       	pop	r29
    8b84:	cf 91       	pop	r28
    8b86:	1f 91       	pop	r17
    8b88:	0f 91       	pop	r16
    8b8a:	ff 90       	pop	r15
    8b8c:	ef 90       	pop	r14
    8b8e:	df 90       	pop	r13
    8b90:	cf 90       	pop	r12
    8b92:	bf 90       	pop	r11
    8b94:	af 90       	pop	r10
    8b96:	9f 90       	pop	r9
    8b98:	8f 90       	pop	r8
    8b9a:	7f 90       	pop	r7
    8b9c:	6f 90       	pop	r6
    8b9e:	5f 90       	pop	r5
    8ba0:	4f 90       	pop	r4
    8ba2:	3f 90       	pop	r3
    8ba4:	2f 90       	pop	r2
    8ba6:	08 95       	ret

00008ba8 <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:163
  }
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
    8ba8:	fb 01       	movw	r30, r22
    8baa:	9c 01       	movw	r18, r24
    8bac:	28 5f       	subi	r18, 0xF8	; 248
    8bae:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:166
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    8bb0:	dc 01       	movw	r26, r24
    8bb2:	5d 91       	ld	r21, X+
    8bb4:	cd 01       	movw	r24, r26
    8bb6:	41 91       	ld	r20, Z+
    8bb8:	54 13       	cpse	r21, r20
    8bba:	05 c0       	rjmp	.+10     	; 0x8bc6 <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:165

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    8bbc:	a2 17       	cp	r26, r18
    8bbe:	b3 07       	cpc	r27, r19
    8bc0:	b9 f7       	brne	.-18     	; 0x8bb0 <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:164
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
    8bc2:	81 e0       	ldi	r24, 0x01	; 1
    8bc4:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:168
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    {
      ret = False;
    8bc6:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:172
      break;
    }
  return ret;
}
    8bc8:	08 95       	ret

00008bca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    8bca:	80 33       	cpi	r24, 0x30	; 48
    8bcc:	9c f0       	brlt	.+38     	; 0x8bf4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    8bce:	8a 33       	cpi	r24, 0x3A	; 58
    8bd0:	24 f0       	brlt	.+8      	; 0x8bda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    8bd2:	8f 35       	cpi	r24, 0x5F	; 95
    8bd4:	24 f0       	brlt	.+8      	; 0x8bde <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    8bd6:	8b 37       	cpi	r24, 0x7B	; 123
    8bd8:	24 f4       	brge	.+8      	; 0x8be2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    8bda:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    8bdc:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    8bde:	81 34       	cpi	r24, 0x41	; 65
    8be0:	4c f0       	brlt	.+18     	; 0x8bf4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    8be2:	8b 35       	cpi	r24, 0x5B	; 91
    8be4:	d4 f3       	brlt	.-12     	; 0x8bda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    8be6:	93 ed       	ldi	r25, 0xD3	; 211
    8be8:	98 0f       	add	r25, r24
    8bea:	81 e0       	ldi	r24, 0x01	; 1
    8bec:	92 30       	cpi	r25, 0x02	; 2
    8bee:	b0 f3       	brcs	.-20     	; 0x8bdc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    8bf0:	80 e0       	ldi	r24, 0x00	; 0
    8bf2:	08 95       	ret
    8bf4:	8b 32       	cpi	r24, 0x2B	; 43
    8bf6:	b9 f7       	brne	.-18     	; 0x8be6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    8bf8:	f0 cf       	rjmp	.-32     	; 0x8bda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

00008bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    8bfa:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    8bfc:	80 85       	ldd	r24, Z+8	; 0x08
    8bfe:	81 11       	cpse	r24, r1
    8c00:	0a c0       	rjmp	.+20     	; 0x8c16 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    8c02:	a2 81       	ldd	r26, Z+2	; 0x02
    8c04:	b3 81       	ldd	r27, Z+3	; 0x03
    8c06:	cd 01       	movw	r24, r26
    8c08:	01 96       	adiw	r24, 0x01	; 1
    8c0a:	93 83       	std	Z+3, r25	; 0x03
    8c0c:	82 83       	std	Z+2, r24	; 0x02
    8c0e:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    8c10:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    8c12:	81 e0       	ldi	r24, 0x01	; 1
    8c14:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    8c16:	87 81       	ldd	r24, Z+7	; 0x07
    8c18:	08 95       	ret

00008c1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    8c1a:	df 92       	push	r13
    8c1c:	ef 92       	push	r14
    8c1e:	ff 92       	push	r15
    8c20:	0f 93       	push	r16
    8c22:	1f 93       	push	r17
    8c24:	cf 93       	push	r28
    8c26:	df 93       	push	r29
    8c28:	ec 01       	movw	r28, r24
    8c2a:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    8c2c:	0c 81       	ldd	r16, Y+4	; 0x04
    8c2e:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    8c30:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    8c34:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    8c36:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    8c38:	ce 01       	movw	r24, r28
    8c3a:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    8c3e:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    8c40:	d8 16       	cp	r13, r24
    8c42:	89 f1       	breq	.+98     	; 0x8ca6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    8c44:	81 11       	cpse	r24, r1
    8c46:	0a c0       	rjmp	.+20     	; 0x8c5c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    8c48:	81 e0       	ldi	r24, 0x01	; 1
    8c4a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    8c4c:	df 91       	pop	r29
    8c4e:	cf 91       	pop	r28
    8c50:	1f 91       	pop	r17
    8c52:	0f 91       	pop	r16
    8c54:	ff 90       	pop	r15
    8c56:	ef 90       	pop	r14
    8c58:	df 90       	pop	r13
    8c5a:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    8c5c:	8c 35       	cpi	r24, 0x5C	; 92
    8c5e:	d1 f4       	brne	.+52     	; 0x8c94 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    8c60:	ce 01       	movw	r24, r28
    8c62:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    8c66:	88 23       	and	r24, r24
    8c68:	79 f3       	breq	.-34     	; 0x8c48 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    8c6a:	85 37       	cpi	r24, 0x75	; 117
    8c6c:	19 f4       	brne	.+6      	; 0x8c74 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    8c6e:	84 e0       	ldi	r24, 0x04	; 4
    8c70:	90 e0       	ldi	r25, 0x00	; 0
    8c72:	ec cf       	rjmp	.-40     	; 0x8c4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    8c74:	e8 ef       	ldi	r30, 0xF8	; 248
    8c76:	f2 e0       	ldi	r31, 0x02	; 2
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    8c78:	90 81       	ld	r25, Z
    8c7a:	99 23       	and	r25, r25
    8c7c:	51 f0       	breq	.+20     	; 0x8c92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    8c7e:	89 13       	cpse	r24, r25
    8c80:	06 c0       	rjmp	.+12     	; 0x8c8e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    8c82:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    8c84:	81 11       	cpse	r24, r1
    8c86:	05 c0       	rjmp	.+10     	; 0x8c92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    8c88:	82 e0       	ldi	r24, 0x02	; 2
    8c8a:	90 e0       	ldi	r25, 0x00	; 0
    8c8c:	df cf       	rjmp	.-66     	; 0x8c4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    8c8e:	32 96       	adiw	r30, 0x02	; 2
    8c90:	f3 cf       	rjmp	.-26     	; 0x8c78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    8c92:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    8c94:	ec 81       	ldd	r30, Y+4	; 0x04
    8c96:	fd 81       	ldd	r31, Y+5	; 0x05
    8c98:	9f 01       	movw	r18, r30
    8c9a:	2f 5f       	subi	r18, 0xFF	; 255
    8c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    8c9e:	3d 83       	std	Y+5, r19	; 0x05
    8ca0:	2c 83       	std	Y+4, r18	; 0x04
    8ca2:	80 83       	st	Z, r24
    8ca4:	c9 cf       	rjmp	.-110    	; 0x8c38 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    8ca6:	ec 81       	ldd	r30, Y+4	; 0x04
    8ca8:	fd 81       	ldd	r31, Y+5	; 0x05
    8caa:	cf 01       	movw	r24, r30
    8cac:	01 96       	adiw	r24, 0x01	; 1
    8cae:	9d 83       	std	Y+5, r25	; 0x05
    8cb0:	8c 83       	std	Y+4, r24	; 0x04
    8cb2:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    8cb4:	f7 01       	movw	r30, r14
    8cb6:	11 83       	std	Z+1, r17	; 0x01
    8cb8:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    8cba:	83 e0       	ldi	r24, 0x03	; 3
    8cbc:	90 e0       	ldi	r25, 0x00	; 0
    8cbe:	01 2b       	or	r16, r17
    8cc0:	29 f2       	breq	.-118    	; 0x8c4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    8cc2:	90 e0       	ldi	r25, 0x00	; 0
    8cc4:	80 e0       	ldi	r24, 0x00	; 0
    8cc6:	c2 cf       	rjmp	.-124    	; 0x8c4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

00008cc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    8cc8:	1f 93       	push	r17
    8cca:	cf 93       	push	r28
    8ccc:	df 93       	push	r29
    8cce:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    8cd0:	ce 01       	movw	r24, r28
    8cd2:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    8cd6:	8b 30       	cpi	r24, 0x0B	; 11
    8cd8:	3c f4       	brge	.+14     	; 0x8ce8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    8cda:	89 30       	cpi	r24, 0x09	; 9
    8cdc:	5c f4       	brge	.+22     	; 0x8cf4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    8cde:	88 23       	and	r24, r24
    8ce0:	e9 f0       	breq	.+58     	; 0x8d1c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    8ce2:	90 e0       	ldi	r25, 0x00	; 0
    8ce4:	80 e0       	ldi	r24, 0x00	; 0
    8ce6:	1c c0       	rjmp	.+56     	; 0x8d20 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    8ce8:	80 32       	cpi	r24, 0x20	; 32
    8cea:	21 f0       	breq	.+8      	; 0x8cf4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    8cec:	8f 32       	cpi	r24, 0x2F	; 47
    8cee:	21 f0       	breq	.+8      	; 0x8cf8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    8cf0:	8d 30       	cpi	r24, 0x0D	; 13
    8cf2:	b9 f7       	brne	.-18     	; 0x8ce2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    8cf4:	18 86       	std	Y+8, r1	; 0x08
    8cf6:	ec cf       	rjmp	.-40     	; 0x8cd0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    8cf8:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    8cfa:	ce 01       	movw	r24, r28
    8cfc:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    8d00:	8a 32       	cpi	r24, 0x2A	; 42
    8d02:	29 f0       	breq	.+10     	; 0x8d0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    8d04:	8f 32       	cpi	r24, 0x2F	; 47
    8d06:	d1 f0       	breq	.+52     	; 0x8d3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    8d08:	82 e0       	ldi	r24, 0x02	; 2
    8d0a:	90 e0       	ldi	r25, 0x00	; 0
    8d0c:	09 c0       	rjmp	.+18     	; 0x8d20 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    8d0e:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    8d10:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    8d12:	ce 01       	movw	r24, r28
    8d14:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    8d18:	81 11       	cpse	r24, r1
    8d1a:	06 c0       	rjmp	.+12     	; 0x8d28 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    8d1c:	81 e0       	ldi	r24, 0x01	; 1
    8d1e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    8d20:	df 91       	pop	r29
    8d22:	cf 91       	pop	r28
    8d24:	1f 91       	pop	r17
    8d26:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    8d28:	8f 32       	cpi	r24, 0x2F	; 47
    8d2a:	11 f4       	brne	.+4      	; 0x8d30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
    8d2c:	11 11       	cpse	r17, r1
    8d2e:	e2 cf       	rjmp	.-60     	; 0x8cf4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    8d30:	11 e0       	ldi	r17, 0x01	; 1
    8d32:	8a 32       	cpi	r24, 0x2A	; 42
    8d34:	09 f0       	breq	.+2      	; 0x8d38 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    8d36:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    8d38:	18 86       	std	Y+8, r1	; 0x08
    8d3a:	eb cf       	rjmp	.-42     	; 0x8d12 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    8d3c:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    8d3e:	ce 01       	movw	r24, r28
    8d40:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    8d44:	88 23       	and	r24, r24
    8d46:	51 f3       	breq	.-44     	; 0x8d1c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    8d48:	8a 30       	cpi	r24, 0x0A	; 10
    8d4a:	c1 f7       	brne	.-16     	; 0x8d3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    8d4c:	c1 cf       	rjmp	.-126    	; 0x8cd0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

00008d4e <valid_true()>:
_Z10valid_truev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6083
}
////
uint8_t valid_true(void)
{
  return 1;
}
    8d4e:	81 e0       	ldi	r24, 0x01	; 1
    8d50:	08 95       	ret

00008d52 <valid_ipv4_address_element_string()>:
_Z33valid_ipv4_address_element_stringv():
    8d52:	81 e0       	ldi	r24, 0x01	; 1
    8d54:	08 95       	ret

00008d56 <button_nastaveni_reload_onclick(unsigned int, unsigned int, unsigned char)>:
_Z31button_nastaveni_reload_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5952
   funkce pro restartovani zarizeni
*/
void button_nastaveni_reload_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  /// TODO dialog ANO/NE
  resetFunc();
    8d56:	f0 e0       	ldi	r31, 0x00	; 0
    8d58:	e0 e0       	ldi	r30, 0x00	; 0
    8d5a:	19 94       	eijmp

00008d5c <nullfce(unsigned int, unsigned int, unsigned char)>:
_Z7nullfcejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:593





void nullfce(uint16_t args1, uint16_t args2, uint8_t args3) {};
    8d5c:	08 95       	ret

00008d5e <button_check_mqtt_connection_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_check_mqtt_connection_onclickjjh():
    8d5e:	08 95       	ret

00008d60 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z62button_set_brightness_auto_shutdown_select_time_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5707
}

uint8_t button_set_brightness_auto_shutdown_select_time_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (args3 == 0 && display_auto_shutdown == 0)
    8d60:	41 11       	cpse	r20, r1
    8d62:	07 c0       	rjmp	.+14     	; 0x8d72 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x12>
    8d64:	81 e0       	ldi	r24, 0x01	; 1
    8d66:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <display_auto_shutdown>
    8d6a:	99 23       	and	r25, r25
    8d6c:	49 f0       	breq	.+18     	; 0x8d80 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5715
    ret = 1;
  if (args3 == 2 && display_auto_shutdown == 60)
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    8d6e:	80 e0       	ldi	r24, 0x00	; 0
    8d70:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5709
uint8_t button_set_brightness_auto_shutdown_select_time_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (args3 == 0 && display_auto_shutdown == 0)
    ret = 1;
  if (args3 == 1 && display_auto_shutdown == 30)
    8d72:	41 30       	cpi	r20, 0x01	; 1
    8d74:	31 f4       	brne	.+12     	; 0x8d82 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x22>
    8d76:	81 e0       	ldi	r24, 0x01	; 1
    8d78:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <display_auto_shutdown>
    8d7c:	9e 31       	cpi	r25, 0x1E	; 30
    8d7e:	b9 f7       	brne	.-18     	; 0x8d6e <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5720
  if (args3 == 4 && display_auto_shutdown == 180)
    ret = 1;
  if (args3 == 5 && display_auto_shutdown == 250)
    ret = 1;
  return ret;
}
    8d80:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5711
  uint8_t ret = 0;
  if (args3 == 0 && display_auto_shutdown == 0)
    ret = 1;
  if (args3 == 1 && display_auto_shutdown == 30)
    ret = 1;
  if (args3 == 2 && display_auto_shutdown == 60)
    8d82:	42 30       	cpi	r20, 0x02	; 2
    8d84:	31 f4       	brne	.+12     	; 0x8d92 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    8d86:	81 e0       	ldi	r24, 0x01	; 1
    8d88:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <display_auto_shutdown>
    8d8c:	9c 33       	cpi	r25, 0x3C	; 60
    8d8e:	79 f7       	brne	.-34     	; 0x8d6e <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    8d90:	f7 cf       	rjmp	.-18     	; 0x8d80 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5713
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    8d92:	43 30       	cpi	r20, 0x03	; 3
    8d94:	31 f4       	brne	.+12     	; 0x8da2 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x42>
    8d96:	81 e0       	ldi	r24, 0x01	; 1
    8d98:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <display_auto_shutdown>
    8d9c:	98 37       	cpi	r25, 0x78	; 120
    8d9e:	39 f7       	brne	.-50     	; 0x8d6e <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    8da0:	ef cf       	rjmp	.-34     	; 0x8d80 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5715
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    8da2:	44 30       	cpi	r20, 0x04	; 4
    8da4:	31 f4       	brne	.+12     	; 0x8db2 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x52>
    8da6:	81 e0       	ldi	r24, 0x01	; 1
    8da8:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <display_auto_shutdown>
    8dac:	94 3b       	cpi	r25, 0xB4	; 180
    8dae:	f9 f6       	brne	.-66     	; 0x8d6e <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    8db0:	e7 cf       	rjmp	.-50     	; 0x8d80 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5706
  }
}

uint8_t button_set_brightness_auto_shutdown_select_time_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    8db2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5717
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    ret = 1;
  if (args3 == 5 && display_auto_shutdown == 250)
    8db4:	45 30       	cpi	r20, 0x05	; 5
    8db6:	21 f7       	brne	.-56     	; 0x8d80 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
    8db8:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <display_auto_shutdown>
    8dbc:	9a 3f       	cpi	r25, 0xFA	; 250
    8dbe:	01 f7       	brne	.-64     	; 0x8d80 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5716
  if (args3 == 2 && display_auto_shutdown == 60)
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    ret = 1;
    8dc0:	81 e0       	ldi	r24, 0x01	; 1
    8dc2:	de cf       	rjmp	.-68     	; 0x8d80 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>

00008dc4 <button_set_brightness_auto_shutdown_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z50button_set_brightness_auto_shutdown_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5635
}

uint8_t button_set_brightness_auto_shutdown_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0)
    8dc4:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5638
    ret = 1;
  return ret;
}
    8dc8:	86 fb       	bst	r24, 6
    8dca:	88 27       	eor	r24, r24
    8dcc:	80 f9       	bld	r24, 0
    8dce:	08 95       	ret

00008dd0 <display_enable_show_brightness_manual_mode(unsigned int, unsigned int, unsigned char)>:
_Z42display_enable_show_brightness_manual_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5548
/////////
/// Funkce, ktera vrati jestli je zapnute automaticke rizeni podsvetleni
uint8_t switch_brightness_automode_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 ) ret = 1;
    8dd0:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    8dd4:	80 95       	com	r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5606
{
  uint8_t ret = 0;
  if (switch_brightness_automode_get_status_fnt(0, 0, 0) == 0)
    ret = 1;
  return ret;
}
    8dd6:	88 1f       	adc	r24, r24
    8dd8:	88 27       	eor	r24, r24
    8dda:	88 1f       	adc	r24, r24
    8ddc:	08 95       	ret

00008dde <preload_display_setting_brightness(unsigned int, unsigned int, unsigned char)>:
_Z34preload_display_setting_brightnessjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5588
  EEPROM.write(my_brightness_mode, brigthness_display_mode);
}
////////
/// Nastaveni dialogu nastaveni promene
uint8_t preload_display_setting_brightness(uint16_t args1, uint16_t args2, uint8_t args3)
{
    8dde:	cf 93       	push	r28
    8de0:	df 93       	push	r29
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    8de2:	cb e9       	ldi	r28, 0x9B	; 155
    8de4:	d9 e0       	ldi	r29, 0x09	; 9
_Z34preload_display_setting_brightnessjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5589
}
////////
/// Nastaveni dialogu nastaveni promene
uint8_t preload_display_setting_brightness(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(brigthness_display_values, 5, 100, 5, 0, NUMBER_TYPE_INT,  H_TRUE, 0, &helper_display_set_brightness);
    8de6:	60 91 87 0b 	lds	r22, 0x0B87	; 0x800b87 <brigthness_display_values>
    8dea:	70 e0       	ldi	r23, 0x00	; 0
    8dec:	90 e0       	ldi	r25, 0x00	; 0
    8dee:	80 e0       	ldi	r24, 0x00	; 0
    8df0:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
    8df4:	68 83       	st	Y, r22
    8df6:	79 83       	std	Y+1, r23	; 0x01
    8df8:	8a 83       	std	Y+2, r24	; 0x02
    8dfa:	9b 83       	std	Y+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    8dfc:	80 e0       	ldi	r24, 0x00	; 0
    8dfe:	90 e0       	ldi	r25, 0x00	; 0
    8e00:	a0 ea       	ldi	r26, 0xA0	; 160
    8e02:	b0 e4       	ldi	r27, 0x40	; 64
    8e04:	88 87       	std	Y+8, r24	; 0x08
    8e06:	99 87       	std	Y+9, r25	; 0x09
    8e08:	aa 87       	std	Y+10, r26	; 0x0a
    8e0a:	bb 87       	std	Y+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  menu_dialog_variable[idx].variable_max = max;
    8e0c:	40 e0       	ldi	r20, 0x00	; 0
    8e0e:	50 e0       	ldi	r21, 0x00	; 0
    8e10:	68 ec       	ldi	r22, 0xC8	; 200
    8e12:	72 e4       	ldi	r23, 0x42	; 66
    8e14:	4c 83       	std	Y+4, r20	; 0x04
    8e16:	5d 83       	std	Y+5, r21	; 0x05
    8e18:	6e 83       	std	Y+6, r22	; 0x06
    8e1a:	7f 83       	std	Y+7, r23	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  menu_dialog_variable[idx].variable_step = step;
    8e1c:	8e 87       	std	Y+14, r24	; 0x0e
    8e1e:	9f 87       	std	Y+15, r25	; 0x0f
    8e20:	a8 8b       	std	Y+16, r26	; 0x10
    8e22:	b9 8b       	std	Y+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  menu_dialog_variable[idx].number_type = number_type;
    8e24:	81 e0       	ldi	r24, 0x01	; 1
    8e26:	8d 87       	std	Y+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
  menu_dialog_variable[idx].args = args;
    8e28:	1a 8a       	std	Y+18, r1	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1372
  menu_dialog_variable[idx].update_now = update_now;
    8e2a:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
  menu_dialog_variable[idx].save_function = save_function;
    8e2c:	8f ee       	ldi	r24, 0xEF	; 239
    8e2e:	95 e6       	ldi	r25, 0x65	; 101
    8e30:	9c 8b       	std	Y+20, r25	; 0x14
    8e32:	8b 8b       	std	Y+19, r24	; 0x13
_Z34preload_display_setting_brightnessjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5590
////////
/// Nastaveni dialogu nastaveni promene
uint8_t preload_display_setting_brightness(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(brigthness_display_values, 5, 100, 5, 0, NUMBER_TYPE_INT,  H_TRUE, 0, &helper_display_set_brightness);
}
    8e34:	df 91       	pop	r29
    8e36:	cf 91       	pop	r28
    8e38:	08 95       	ret

00008e3a <switch_brightness_automode_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z41switch_brightness_automode_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5548
/////////
/// Funkce, ktera vrati jestli je zapnute automaticke rizeni podsvetleni
uint8_t switch_brightness_automode_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 ) ret = 1;
    8e3a:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5550
  return ret;
}
    8e3e:	88 1f       	adc	r24, r24
    8e40:	88 27       	eor	r24, r24
    8e42:	88 1f       	adc	r24, r24
    8e44:	08 95       	ret

00008e46 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z35button_get_show_default_temp_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4899
   funkce pro zobrazeni defaultniho cidla zobrazeni teploty
*/
uint8_t button_get_show_default_temp_active(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (default_show_temp == args3)
    8e46:	81 e0       	ldi	r24, 0x01	; 1
    8e48:	90 91 93 09 	lds	r25, 0x0993	; 0x800993 <default_show_temp>
    8e4c:	94 13       	cpse	r25, r20
    8e4e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4903
    ret = 1;

  return ret;
}
    8e50:	08 95       	ret

00008e52 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z38button_get_show_default_temp_max_itemsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4886
}
//////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci soucet vsech cidel v systemu
uint8_t button_get_show_default_temp_max_items(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (args1 == INPUT_SENSOR_SHOW_ACTIVE)
    8e52:	00 97       	sbiw	r24, 0x00	; 0
    8e54:	31 f4       	brne	.+12     	; 0x8e62 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4887
    return use_tds + use_rtds;
    8e56:	80 91 90 0c 	lds	r24, 0x0C90	; 0x800c90 <use_tds>
    8e5a:	90 91 91 0c 	lds	r25, 0x0C91	; 0x800c91 <use_rtds>
    8e5e:	89 0f       	add	r24, r25
    8e60:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4889

  if (args1 == INPUT_SENSOR_SHOW_ALL)
    8e62:	01 97       	sbiw	r24, 0x01	; 1
    8e64:	09 f0       	breq	.+2      	; 0x8e68 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x16>
    8e66:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4890
    return HW_ONEWIRE_MAXROMS + MAX_RTDS;
    8e68:	80 e1       	ldi	r24, 0x10	; 16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4891
}
    8e6a:	08 95       	ret

00008e6c <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4638
  }
}

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
    8e6c:	ee eb       	ldi	r30, 0xBE	; 190
    8e6e:	fc e0       	ldi	r31, 0x0C	; 12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4639
  uint8_t active = 0;
    8e70:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4641
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    if (w_rom[cnt].used == 1) active++;
    8e72:	91 85       	ldd	r25, Z+9	; 0x09
    8e74:	91 30       	cpi	r25, 0x01	; 1
    8e76:	09 f4       	brne	.+2      	; 0x8e7a <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    8e78:	8f 5f       	subi	r24, 0xFF	; 255
    8e7a:	3b 96       	adiw	r30, 0x0b	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4640

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
  uint8_t active = 0;
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    8e7c:	9d e0       	ldi	r25, 0x0D	; 13
    8e7e:	e0 30       	cpi	r30, 0x00	; 0
    8e80:	f9 07       	cpc	r31, r25
    8e82:	b9 f7       	brne	.-18     	; 0x8e72 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4643
    if (w_rom[cnt].used == 1) active++;
  return active;
}
    8e84:	08 95       	ret

00008e86 <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4555
/// funkce vraci pocet obsazenych rtds snimacu
uint8_t get_function_rtds_last_index_for_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return MAX_RTDS;
  //return use_rtds;
}
    8e86:	8a e0       	ldi	r24, 0x0A	; 10
    8e88:	08 95       	ret

00008e8a <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_decjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4372
  }
}
///
void display_function_vertical_slider_dec(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    8e8a:	fc 01       	movw	r30, r24
    8e8c:	e6 57       	subi	r30, 0x76	; 118
    8e8e:	f6 4f       	sbci	r31, 0xF6	; 246
    8e90:	90 81       	ld	r25, Z
    8e92:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <menu_slider_data_min>
    8e96:	89 17       	cp	r24, r25
    8e98:	28 f4       	brcc	.+10     	; 0x8ea4 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4374
  {
    menu_slider_data_current[args1]--;
    8e9a:	91 50       	subi	r25, 0x01	; 1
    8e9c:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4375
    display_update_slider = 1;
    8e9e:	81 e0       	ldi	r24, 0x01	; 1
    8ea0:	80 93 89 09 	sts	0x0989, r24	; 0x800989 <display_update_slider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4377
  }
}
    8ea4:	08 95       	ret

00008ea6 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_incjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4363
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
}
///
void display_function_vertical_slider_inc(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_slider_data_current[args1] < (menu_slider_data_max - menu_slider_data_max_element))
    8ea6:	fc 01       	movw	r30, r24
    8ea8:	e6 57       	subi	r30, 0x76	; 118
    8eaa:	f6 4f       	sbci	r31, 0xF6	; 246
    8eac:	90 81       	ld	r25, Z
    8eae:	20 91 92 09 	lds	r18, 0x0992	; 0x800992 <menu_slider_data_max>
    8eb2:	80 91 90 09 	lds	r24, 0x0990	; 0x800990 <menu_slider_data_max_element>
    8eb6:	28 1b       	sub	r18, r24
    8eb8:	33 0b       	sbc	r19, r19
    8eba:	92 17       	cp	r25, r18
    8ebc:	13 06       	cpc	r1, r19
    8ebe:	2c f4       	brge	.+10     	; 0x8eca <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4365
  {
    menu_slider_data_current[args1]++;
    8ec0:	9f 5f       	subi	r25, 0xFF	; 255
    8ec2:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4366
    display_update_slider = 1;
    8ec4:	81 e0       	ldi	r24, 0x01	; 1
    8ec6:	80 93 89 09 	sts	0x0989, r24	; 0x800989 <display_update_slider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4368
  }
}
    8eca:	08 95       	ret

00008ecc <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3115
}
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
    8ecc:	83 30       	cpi	r24, 0x03	; 3
    8ece:	41 f4       	brne	.+16     	; 0x8ee0 <a2d_complete(unsigned char, unsigned int)+0x14>
    8ed0:	70 93 7f 0b 	sts	0x0B7F, r23	; 0x800b7f <proud+0x1>
    8ed4:	60 93 7e 0b 	sts	0x0B7E, r22	; 0x800b7e <proud>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3120
  if (channel == A_TRIV ) tritri = data;
  if (channel == A_PETV) petnula = data;
  if (channel == A_DVANACTV) dvanact = data;
  if (channel == A_LIGHT) light_curr = data;
  a2d_run_now = 1;
    8ed8:	81 e0       	ldi	r24, 0x01	; 1
    8eda:	80 93 8b 0c 	sts	0x0C8B, r24	; 0x800c8b <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3121
}
    8ede:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3116
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
  if (channel == A_TRIV ) tritri = data;
    8ee0:	86 30       	cpi	r24, 0x06	; 6
    8ee2:	29 f4       	brne	.+10     	; 0x8eee <a2d_complete(unsigned char, unsigned int)+0x22>
    8ee4:	70 93 85 0b 	sts	0x0B85, r23	; 0x800b85 <tritri+0x1>
    8ee8:	60 93 84 0b 	sts	0x0B84, r22	; 0x800b84 <tritri>
    8eec:	f5 cf       	rjmp	.-22     	; 0x8ed8 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3117
  if (channel == A_PETV) petnula = data;
    8eee:	85 30       	cpi	r24, 0x05	; 5
    8ef0:	29 f4       	brne	.+10     	; 0x8efc <a2d_complete(unsigned char, unsigned int)+0x30>
    8ef2:	70 93 83 0b 	sts	0x0B83, r23	; 0x800b83 <petnula+0x1>
    8ef6:	60 93 82 0b 	sts	0x0B82, r22	; 0x800b82 <petnula>
    8efa:	ee cf       	rjmp	.-36     	; 0x8ed8 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3118
  if (channel == A_DVANACTV) dvanact = data;
    8efc:	84 30       	cpi	r24, 0x04	; 4
    8efe:	29 f4       	brne	.+10     	; 0x8f0a <a2d_complete(unsigned char, unsigned int)+0x3e>
    8f00:	70 93 81 0b 	sts	0x0B81, r23	; 0x800b81 <dvanact+0x1>
    8f04:	60 93 80 0b 	sts	0x0B80, r22	; 0x800b80 <dvanact>
    8f08:	e7 cf       	rjmp	.-50     	; 0x8ed8 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3119
  if (channel == A_LIGHT) light_curr = data;
    8f0a:	87 30       	cpi	r24, 0x07	; 7
    8f0c:	29 f7       	brne	.-54     	; 0x8ed8 <a2d_complete(unsigned char, unsigned int)+0xc>
    8f0e:	70 93 a4 0c 	sts	0x0CA4, r23	; 0x800ca4 <light_curr+0x1>
    8f12:	60 93 a3 0c 	sts	0x0CA3, r22	; 0x800ca3 <light_curr>
    8f16:	e0 cf       	rjmp	.-64     	; 0x8ed8 <a2d_complete(unsigned char, unsigned int)+0xc>

00008f18 <selftest_set_0(unsigned char)>:
_Z14selftest_set_0h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3132
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    8f18:	21 e0       	ldi	r18, 0x01	; 1
    8f1a:	30 e0       	ldi	r19, 0x00	; 0
    8f1c:	01 c0       	rjmp	.+2      	; 0x8f20 <selftest_set_0(unsigned char)+0x8>
    8f1e:	22 0f       	add	r18, r18
    8f20:	8a 95       	dec	r24
    8f22:	ea f7       	brpl	.-6      	; 0x8f1e <selftest_set_0(unsigned char)+0x6>
    8f24:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
    8f28:	82 2b       	or	r24, r18
    8f2a:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <selftest_data>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3133
}
    8f2e:	08 95       	ret

00008f30 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_return_args_1jjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1706


uint8_t get_function_return_args_1(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return args1;
}
    8f30:	08 95       	ret

00008f32 <menu_redraw_change_variable(unsigned int, unsigned int, unsigned char)>:
_Z27menu_redraw_change_variablejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1693
  return 0;
}

uint8_t menu_redraw_change_variable(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_dialog_variable_change == 1)
    8f32:	80 91 04 09 	lds	r24, 0x0904	; 0x800904 <menu_dialog_variable_change>
    8f36:	81 30       	cpi	r24, 0x01	; 1
    8f38:	19 f4       	brne	.+6      	; 0x8f40 <menu_redraw_change_variable(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1695
  {
    menu_dialog_variable_change = 0;
    8f3a:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <menu_dialog_variable_change>
    8f3e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1698
    return 1;
  }
  return 0;
    8f40:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1699
}
    8f42:	08 95       	ret

00008f44 <menu_redraw_change_default_ring(unsigned int, unsigned int, unsigned char)>:
_Z31menu_redraw_change_default_ringjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1683
}


uint8_t menu_redraw_change_default_ring(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (display_redraw_default_ring == 1)
    8f44:	80 91 94 09 	lds	r24, 0x0994	; 0x800994 <display_redraw_default_ring>
    8f48:	81 30       	cpi	r24, 0x01	; 1
    8f4a:	19 f4       	brne	.+6      	; 0x8f52 <menu_redraw_change_default_ring(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1685
  {
    display_redraw_default_ring = 0;
    8f4c:	10 92 94 09 	sts	0x0994, r1	; 0x800994 <display_redraw_default_ring>
    8f50:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
    return 1;
  }
  return 0;
    8f52:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1689
}
    8f54:	08 95       	ret

00008f56 <menu_redraw_slider(unsigned int, unsigned int, unsigned char)>:
_Z18menu_redraw_sliderjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1672
}


uint8_t menu_redraw_slider(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (display_update_slider == 1)
    8f56:	80 91 89 09 	lds	r24, 0x0989	; 0x800989 <display_update_slider>
    8f5a:	81 30       	cpi	r24, 0x01	; 1
    8f5c:	19 f4       	brne	.+6      	; 0x8f64 <menu_redraw_slider(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1674
  {
    display_update_slider = 0;
    8f5e:	10 92 89 09 	sts	0x0989, r1	; 0x800989 <display_update_slider>
    8f62:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
    return 1;
  }
  return 0;
    8f64:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1678
}
    8f66:	08 95       	ret

00008f68 <menu_redraw_date(unsigned int, unsigned int, unsigned char)>:
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    DateTime (uint16_t year, uint8_t month, uint8_t day, 
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    8f68:	80 91 74 12 	lds	r24, 0x1274	; 0x801274 <now>
    8f6c:	90 e0       	ldi	r25, 0x00	; 0
    8f6e:	80 53       	subi	r24, 0x30	; 48
    8f70:	98 4f       	sbci	r25, 0xF8	; 248
    8f72:	30 91 75 12 	lds	r19, 0x1275	; 0x801275 <now+0x1>
    8f76:	20 91 76 12 	lds	r18, 0x1276	; 0x801276 <now+0x2>
_Z16menu_redraw_datejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1658
}


uint8_t menu_redraw_date(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (now.year() != last_year || now.month() != last_month || now.day() != last_day || display_update_date == 1)
    8f7a:	40 91 02 09 	lds	r20, 0x0902	; 0x800902 <last_year>
    8f7e:	50 91 03 09 	lds	r21, 0x0903	; 0x800903 <last_year+0x1>
    8f82:	48 17       	cp	r20, r24
    8f84:	59 07       	cpc	r21, r25
    8f86:	61 f4       	brne	.+24     	; 0x8fa0 <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x38>
    8f88:	40 91 01 09 	lds	r20, 0x0901	; 0x800901 <last_month>
    8f8c:	43 13       	cpse	r20, r19
    8f8e:	08 c0       	rjmp	.+16     	; 0x8fa0 <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x38>
    8f90:	40 91 00 09 	lds	r20, 0x0900	; 0x800900 <last_day>
    8f94:	42 13       	cpse	r20, r18
    8f96:	04 c0       	rjmp	.+8      	; 0x8fa0 <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x38>
    8f98:	40 91 ff 08 	lds	r20, 0x08FF	; 0x8008ff <display_update_date>
    8f9c:	41 30       	cpi	r20, 0x01	; 1
    8f9e:	61 f4       	brne	.+24     	; 0x8fb8 <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1660
  {
    display_update_date = 0;
    8fa0:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <display_update_date>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1661
    last_year = now.year();
    8fa4:	90 93 03 09 	sts	0x0903, r25	; 0x800903 <last_year+0x1>
    8fa8:	80 93 02 09 	sts	0x0902, r24	; 0x800902 <last_year>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1662
    last_month = now.month();
    8fac:	30 93 01 09 	sts	0x0901, r19	; 0x800901 <last_month>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1663
    last_day = now.day();
    8fb0:	20 93 00 09 	sts	0x0900, r18	; 0x800900 <last_day>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1664
    return 1;
    8fb4:	81 e0       	ldi	r24, 0x01	; 1
    8fb6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1666
  }
  return 0;
    8fb8:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1667
}
    8fba:	08 95       	ret

00008fbc <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>:
_Z23menu_redraw_update_tempjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1647
  return 0;
}

uint8_t menu_redraw_update_temp(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_redraw10s == 1)
    8fbc:	80 91 aa 0c 	lds	r24, 0x0CAA	; 0x800caa <menu_redraw10s>
    8fc0:	81 30       	cpi	r24, 0x01	; 1
    8fc2:	19 f4       	brne	.+6      	; 0x8fca <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1649
  {
    menu_redraw10s = 0;
    8fc4:	10 92 aa 0c 	sts	0x0CAA, r1	; 0x800caa <menu_redraw10s>
    8fc8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1652
    return 1;
  }
  return 0;
    8fca:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1653
}
    8fcc:	08 95       	ret

00008fce <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>:
_Z28menu_redraw_change_term_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1637



uint8_t menu_redraw_change_term_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (change_term_mode == 1)
    8fce:	80 91 9a 09 	lds	r24, 0x099A	; 0x80099a <change_term_mode>
    8fd2:	81 30       	cpi	r24, 0x01	; 1
    8fd4:	19 f4       	brne	.+6      	; 0x8fdc <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1639
  {
    change_term_mode = 0;
    8fd6:	10 92 9a 09 	sts	0x099A, r1	; 0x80099a <change_term_mode>
    8fda:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1642
    return 1;
  }
  return 0;
    8fdc:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1643
}
    8fde:	08 95       	ret

00008fe0 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>:
_Z19menu_redraw_time05sjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1614
  return 0;
}


uint8_t menu_redraw_time05s(uint16_t args1, uint16_t args2, uint8_t args3)
{
    8fe0:	90 91 77 12 	lds	r25, 0x1277	; 0x801277 <now+0x3>
    8fe4:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <now+0x4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1624
      return 1;
    }
    return 0;
  */

  if (last_time_hour != now.hour() || last_time_minute != now.minute())
    8fe8:	20 91 fe 08 	lds	r18, 0x08FE	; 0x8008fe <last_time_hour>
    8fec:	29 13       	cpse	r18, r25
    8fee:	04 c0       	rjmp	.+8      	; 0x8ff8 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0x18>
    8ff0:	20 91 fd 08 	lds	r18, 0x08FD	; 0x8008fd <last_time_minute>
    8ff4:	28 17       	cp	r18, r24
    8ff6:	31 f0       	breq	.+12     	; 0x9004 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1626
  {
    last_time_hour = now.hour();
    8ff8:	90 93 fe 08 	sts	0x08FE, r25	; 0x8008fe <last_time_hour>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1627
    last_time_minute = now.minute();
    8ffc:	80 93 fd 08 	sts	0x08FD, r24	; 0x8008fd <last_time_minute>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1628
    return 1;
    9000:	81 e0       	ldi	r24, 0x01	; 1
    9002:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1630
  }
  return 0;
    9004:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1631
}
    9006:	08 95       	ret

00009008 <click_keyboard_type(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_typejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1573
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}

void click_keyboard_type(uint16_t args1, uint16_t args2, uint8_t args3)
{
  dialog_set_string_keyboard_type = args1;
    9008:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <__data_end>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1574
}
    900c:	08 95       	ret

0000900e <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1563
  display_element_set_string_add_char(znak);
}
/// vraci pocet prvku pro zobrazeni
uint8_t get_function_keyboard_alfa_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    900e:	80 91 fc 08 	lds	r24, 0x08FC	; 0x8008fc <__data_end>
    9012:	83 30       	cpi	r24, 0x03	; 3
    9014:	08 f0       	brcs	.+2      	; 0x9018 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    9016:	08 95       	ret
    9018:	8a e1       	ldi	r24, 0x1A	; 26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1569
    return KEYBOARD_SIZE_CHAR_UPPER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    return KEYBOARD_SIZE_CHAR_LOWER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}
    901a:	08 95       	ret

0000901c <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1532
  line2[0] = 0;
}

/////
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    901c:	0f 93       	push	r16
    901e:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1534
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    9020:	90 91 fc 08 	lds	r25, 0x08FC	; 0x8008fc <__data_end>
    9024:	91 11       	cpse	r25, r1
    9026:	0c c0       	rjmp	.+24     	; 0x9040 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1535
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
    9028:	e8 2f       	mov	r30, r24
    902a:	f0 e0       	ldi	r31, 0x00	; 0
    902c:	e6 55       	subi	r30, 0x56	; 86
    902e:	f2 49       	sbci	r31, 0x92	; 146
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1539
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    9030:	e4 91       	lpm	r30, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1540
  line1[0] = znak;
    9032:	d9 01       	movw	r26, r18
    9034:	ec 93       	st	X, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1541
  line2[0] = 0;
    9036:	f8 01       	movw	r30, r16
    9038:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1542
}
    903a:	1f 91       	pop	r17
    903c:	0f 91       	pop	r16
    903e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1536
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    9040:	91 30       	cpi	r25, 0x01	; 1
    9042:	29 f4       	brne	.+10     	; 0x904e <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1537
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
    9044:	e8 2f       	mov	r30, r24
    9046:	f0 e0       	ldi	r31, 0x00	; 0
    9048:	e0 57       	subi	r30, 0x70	; 112
    904a:	f2 49       	sbci	r31, 0x92	; 146
    904c:	f1 cf       	rjmp	.-30     	; 0x9030 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1538
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    904e:	92 30       	cpi	r25, 0x02	; 2
    9050:	81 f7       	brne	.-32     	; 0x9032 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1539
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    9052:	e8 2f       	mov	r30, r24
    9054:	f0 e0       	ldi	r31, 0x00	; 0
    9056:	ea 58       	subi	r30, 0x8A	; 138
    9058:	f2 49       	sbci	r31, 0x92	; 146
    905a:	ea cf       	rjmp	.-44     	; 0x9030 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>

0000905c <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1523
/*
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    905c:	0f 93       	push	r16
    905e:	1f 93       	push	r17
    9060:	f9 01       	movw	r30, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1525
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    9062:	8a 30       	cpi	r24, 0x0A	; 10
    9064:	39 f4       	brne	.+14     	; 0x9074 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    9066:	8e e2       	ldi	r24, 0x2E	; 46
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1526
  if (args1 == 11) line1[0] = ':';
    9068:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1527
  line2[0] = 0;
    906a:	f8 01       	movw	r30, r16
    906c:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1528
}
    906e:	1f 91       	pop	r17
    9070:	0f 91       	pop	r16
    9072:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1526
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
  if (args1 == 11) line1[0] = ':';
    9074:	8b 30       	cpi	r24, 0x0B	; 11
    9076:	11 f0       	breq	.+4      	; 0x907c <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1524
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line1[0] = '0' + args1;
    9078:	80 5d       	subi	r24, 0xD0	; 208
    907a:	f6 cf       	rjmp	.-20     	; 0x9068 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1526
  if (args1 == 10) line1[0] = '.';
  if (args1 == 11) line1[0] = ':';
    907c:	8a e3       	ldi	r24, 0x3A	; 58
    907e:	f4 cf       	rjmp	.-24     	; 0x9068 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>

00009080 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_keyboard_number_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1503
//////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci pocet polozek dynamickeho menu
uint8_t get_function_keyboard_number_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 12;
}
    9080:	8c e0       	ldi	r24, 0x0C	; 12
    9082:	08 95       	ret

00009084 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>:
_Z34display_function_set_variable_plusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1353
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    }
  }
}
void display_function_set_variable_plus(uint16_t idx, uint16_t args2, uint8_t args3)
{
    9084:	cf 92       	push	r12
    9086:	df 92       	push	r13
    9088:	ef 92       	push	r14
    908a:	ff 92       	push	r15
    908c:	cf 93       	push	r28
    908e:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
  if ((menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step) <= menu_dialog_variable[idx].variable_max)
    9090:	25 e1       	ldi	r18, 0x15	; 21
    9092:	28 9f       	mul	r18, r24
    9094:	e0 01       	movw	r28, r0
    9096:	29 9f       	mul	r18, r25
    9098:	d0 0d       	add	r29, r0
    909a:	11 24       	eor	r1, r1
    909c:	c5 56       	subi	r28, 0x65	; 101
    909e:	d6 4f       	sbci	r29, 0xF6	; 246
    90a0:	2e 85       	ldd	r18, Y+14	; 0x0e
    90a2:	3f 85       	ldd	r19, Y+15	; 0x0f
    90a4:	48 89       	ldd	r20, Y+16	; 0x10
    90a6:	59 89       	ldd	r21, Y+17	; 0x11
    90a8:	68 81       	ld	r22, Y
    90aa:	79 81       	ldd	r23, Y+1	; 0x01
    90ac:	8a 81       	ldd	r24, Y+2	; 0x02
    90ae:	9b 81       	ldd	r25, Y+3	; 0x03
    90b0:	0e 94 c1 ef 	call	0x1df82	; 0x1df82 <__addsf3>
    90b4:	6b 01       	movw	r12, r22
    90b6:	7c 01       	movw	r14, r24
    90b8:	2c 81       	ldd	r18, Y+4	; 0x04
    90ba:	3d 81       	ldd	r19, Y+5	; 0x05
    90bc:	4e 81       	ldd	r20, Y+6	; 0x06
    90be:	5f 81       	ldd	r21, Y+7	; 0x07
    90c0:	0e 94 f3 ed 	call	0x1dbe6	; 0x1dbe6 <__cmpsf2>
    90c4:	18 16       	cp	r1, r24
    90c6:	e4 f0       	brlt	.+56     	; 0x9100 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1356
  {
    menu_dialog_variable_change = 1;
    90c8:	81 e0       	ldi	r24, 0x01	; 1
    90ca:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <menu_dialog_variable_change>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step;
    90ce:	c8 82       	st	Y, r12
    90d0:	d9 82       	std	Y+1, r13	; 0x01
    90d2:	ea 82       	std	Y+2, r14	; 0x02
    90d4:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    90d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    90d8:	81 30       	cpi	r24, 0x01	; 1
    90da:	91 f4       	brne	.+36     	; 0x9100 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x7c>
float_to_int():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}

int float_to_int(float x)
{
 return x;
    90dc:	c7 01       	movw	r24, r14
    90de:	b6 01       	movw	r22, r12
    90e0:	0e 94 9f f0 	call	0x1e13e	; 0x1e13e <__fixsfsi>
    90e4:	26 2f       	mov	r18, r22
_Z34display_function_set_variable_plusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    90e6:	8a 89       	ldd	r24, Y+18	; 0x12
    90e8:	eb 89       	ldd	r30, Y+19	; 0x13
    90ea:	fc 89       	ldd	r31, Y+20	; 0x14
    90ec:	b7 01       	movw	r22, r14
    90ee:	a6 01       	movw	r20, r12
    90f0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1363
    }
  }
}
    90f2:	df 91       	pop	r29
    90f4:	cf 91       	pop	r28
    90f6:	ff 90       	pop	r15
    90f8:	ef 90       	pop	r14
    90fa:	df 90       	pop	r13
    90fc:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  {
    menu_dialog_variable_change = 1;
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step;
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    90fe:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1363
    }
  }
}
    9100:	df 91       	pop	r29
    9102:	cf 91       	pop	r28
    9104:	ff 90       	pop	r15
    9106:	ef 90       	pop	r14
    9108:	df 90       	pop	r13
    910a:	cf 90       	pop	r12
    910c:	08 95       	ret

0000910e <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>:
_Z35display_function_set_variable_minusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1341
{
  return menu_dialog_variable[idx].variable_now ;
}

void display_function_set_variable_minus(uint16_t idx, uint16_t args2, uint8_t args3)
{
    910e:	cf 92       	push	r12
    9110:	df 92       	push	r13
    9112:	ef 92       	push	r14
    9114:	ff 92       	push	r15
    9116:	cf 93       	push	r28
    9118:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1342
  if (menu_dialog_variable[idx].variable_now - menu_dialog_variable[idx].variable_step >= menu_dialog_variable[idx].variable_min)
    911a:	25 e1       	ldi	r18, 0x15	; 21
    911c:	28 9f       	mul	r18, r24
    911e:	e0 01       	movw	r28, r0
    9120:	29 9f       	mul	r18, r25
    9122:	d0 0d       	add	r29, r0
    9124:	11 24       	eor	r1, r1
    9126:	c5 56       	subi	r28, 0x65	; 101
    9128:	d6 4f       	sbci	r29, 0xF6	; 246
    912a:	2e 85       	ldd	r18, Y+14	; 0x0e
    912c:	3f 85       	ldd	r19, Y+15	; 0x0f
    912e:	48 89       	ldd	r20, Y+16	; 0x10
    9130:	59 89       	ldd	r21, Y+17	; 0x11
    9132:	68 81       	ld	r22, Y
    9134:	79 81       	ldd	r23, Y+1	; 0x01
    9136:	8a 81       	ldd	r24, Y+2	; 0x02
    9138:	9b 81       	ldd	r25, Y+3	; 0x03
    913a:	0e 94 c0 ef 	call	0x1df80	; 0x1df80 <__subsf3>
    913e:	6b 01       	movw	r12, r22
    9140:	7c 01       	movw	r14, r24
    9142:	28 85       	ldd	r18, Y+8	; 0x08
    9144:	39 85       	ldd	r19, Y+9	; 0x09
    9146:	4a 85       	ldd	r20, Y+10	; 0x0a
    9148:	5b 85       	ldd	r21, Y+11	; 0x0b
    914a:	0e 94 d5 f0 	call	0x1e1aa	; 0x1e1aa <__gesf2>
    914e:	87 fd       	sbrc	r24, 7
    9150:	1c c0       	rjmp	.+56     	; 0x918a <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1344
  {
    menu_dialog_variable_change = 1;
    9152:	81 e0       	ldi	r24, 0x01	; 1
    9154:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <menu_dialog_variable_change>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1345
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now  - menu_dialog_variable[idx].variable_step;
    9158:	c8 82       	st	Y, r12
    915a:	d9 82       	std	Y+1, r13	; 0x01
    915c:	ea 82       	std	Y+2, r14	; 0x02
    915e:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1346
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    9160:	8c 85       	ldd	r24, Y+12	; 0x0c
    9162:	81 30       	cpi	r24, 0x01	; 1
    9164:	91 f4       	brne	.+36     	; 0x918a <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x7c>
float_to_int():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102
    9166:	c7 01       	movw	r24, r14
    9168:	b6 01       	movw	r22, r12
    916a:	0e 94 9f f0 	call	0x1e13e	; 0x1e13e <__fixsfsi>
    916e:	26 2f       	mov	r18, r22
_Z35display_function_set_variable_minusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1348
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    9170:	8a 89       	ldd	r24, Y+18	; 0x12
    9172:	eb 89       	ldd	r30, Y+19	; 0x13
    9174:	fc 89       	ldd	r31, Y+20	; 0x14
    9176:	b7 01       	movw	r22, r14
    9178:	a6 01       	movw	r20, r12
    917a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1351
    }
  }
}
    917c:	df 91       	pop	r29
    917e:	cf 91       	pop	r28
    9180:	ff 90       	pop	r15
    9182:	ef 90       	pop	r14
    9184:	df 90       	pop	r13
    9186:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1348
  {
    menu_dialog_variable_change = 1;
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now  - menu_dialog_variable[idx].variable_step;
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    9188:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1351
    }
  }
}
    918a:	df 91       	pop	r29
    918c:	cf 91       	pop	r28
    918e:	ff 90       	pop	r15
    9190:	ef 90       	pop	r14
    9192:	df 90       	pop	r13
    9194:	cf 90       	pop	r12
    9196:	08 95       	ret

00009198 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>:
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1309
}


/// TODO spravne predat id ringu
uint8_t preload_pid_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
    9198:	4f 92       	push	r4
    919a:	5f 92       	push	r5
    919c:	6f 92       	push	r6
    919e:	7f 92       	push	r7
    91a0:	8f 92       	push	r8
    91a2:	9f 92       	push	r9
    91a4:	af 92       	push	r10
    91a6:	bf 92       	push	r11
    91a8:	cf 92       	push	r12
    91aa:	df 92       	push	r13
    91ac:	ef 92       	push	r14
    91ae:	ff 92       	push	r15
    91b0:	0f 93       	push	r16
    91b2:	1f 93       	push	r17
    91b4:	cf 93       	push	r28
    91b6:	8b 01       	movw	r16, r22
thermostat_get_pid_p():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    91b8:	9b 01       	movw	r18, r22
    91ba:	33 27       	eor	r19, r19
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    91bc:	eb e9       	ldi	r30, 0x9B	; 155
    91be:	f9 e0       	ldi	r31, 0x09	; 9
thermostat_get_pid_p():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:65
    91c0:	c9 01       	movw	r24, r18
    91c2:	88 0f       	add	r24, r24
    91c4:	99 1f       	adc	r25, r25
    91c6:	88 0f       	add	r24, r24
    91c8:	99 1f       	adc	r25, r25
    91ca:	dc 01       	movw	r26, r24
    91cc:	a8 54       	subi	r26, 0x48	; 72
    91ce:	b5 4f       	sbci	r27, 0xF5	; 245
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
    91d0:	4d 91       	ld	r20, X+
    91d2:	5d 91       	ld	r21, X+
    91d4:	6d 91       	ld	r22, X+
    91d6:	7c 91       	ld	r23, X
    91d8:	40 83       	st	Z, r20
    91da:	51 83       	std	Z+1, r21	; 0x01
    91dc:	62 83       	std	Z+2, r22	; 0x02
    91de:	73 83       	std	Z+3, r23	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  menu_dialog_variable[idx].variable_min = min;
    91e0:	41 2c       	mov	r4, r1
    91e2:	51 2c       	mov	r5, r1
    91e4:	50 e2       	ldi	r21, 0x20	; 32
    91e6:	65 2e       	mov	r6, r21
    91e8:	51 ec       	ldi	r21, 0xC1	; 193
    91ea:	75 2e       	mov	r7, r21
    91ec:	40 86       	std	Z+8, r4	; 0x08
    91ee:	51 86       	std	Z+9, r5	; 0x09
    91f0:	62 86       	std	Z+10, r6	; 0x0a
    91f2:	73 86       	std	Z+11, r7	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  menu_dialog_variable[idx].variable_max = max;
    91f4:	c1 2c       	mov	r12, r1
    91f6:	d1 2c       	mov	r13, r1
    91f8:	60 e2       	ldi	r22, 0x20	; 32
    91fa:	e6 2e       	mov	r14, r22
    91fc:	61 e4       	ldi	r22, 0x41	; 65
    91fe:	f6 2e       	mov	r15, r22
    9200:	c4 82       	std	Z+4, r12	; 0x04
    9202:	d5 82       	std	Z+5, r13	; 0x05
    9204:	e6 82       	std	Z+6, r14	; 0x06
    9206:	f7 82       	std	Z+7, r15	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  menu_dialog_variable[idx].variable_step = step;
    9208:	7d ec       	ldi	r23, 0xCD	; 205
    920a:	87 2e       	mov	r8, r23
    920c:	7c ec       	ldi	r23, 0xCC	; 204
    920e:	97 2e       	mov	r9, r23
    9210:	a9 2c       	mov	r10, r9
    9212:	7d e3       	ldi	r23, 0x3D	; 61
    9214:	b7 2e       	mov	r11, r23
    9216:	86 86       	std	Z+14, r8	; 0x0e
    9218:	97 86       	std	Z+15, r9	; 0x0f
    921a:	a0 8a       	std	Z+16, r10	; 0x10
    921c:	b1 8a       	std	Z+17, r11	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  menu_dialog_variable[idx].number_type = number_type;
    921e:	15 86       	std	Z+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
  menu_dialog_variable[idx].args = args;
    9220:	02 8b       	std	Z+18, r16	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1372
  menu_dialog_variable[idx].update_now = update_now;
    9222:	c1 e0       	ldi	r28, 0x01	; 1
    9224:	c4 87       	std	Z+12, r28	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
  menu_dialog_variable[idx].save_function = save_function;
    9226:	4d e6       	ldi	r20, 0x6D	; 109
    9228:	52 e6       	ldi	r21, 0x62	; 98
    922a:	54 8b       	std	Z+20, r21	; 0x14
    922c:	43 8b       	std	Z+19, r20	; 0x13
thermostat_get_pid_i():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    922e:	dc 01       	movw	r26, r24
    9230:	a4 53       	subi	r26, 0x34	; 52
    9232:	b5 4f       	sbci	r27, 0xF5	; 245
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    9234:	4d 91       	ld	r20, X+
    9236:	5d 91       	ld	r21, X+
    9238:	6d 91       	ld	r22, X+
    923a:	7c 91       	ld	r23, X
    923c:	45 8b       	std	Z+21, r20	; 0x15
    923e:	56 8b       	std	Z+22, r21	; 0x16
    9240:	67 8b       	std	Z+23, r22	; 0x17
    9242:	70 8f       	std	Z+24, r23	; 0x18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  menu_dialog_variable[idx].variable_min = min;
    9244:	45 8e       	std	Z+29, r4	; 0x1d
    9246:	56 8e       	std	Z+30, r5	; 0x1e
    9248:	67 8e       	std	Z+31, r6	; 0x1f
    924a:	70 a2       	std	Z+32, r7	; 0x20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  menu_dialog_variable[idx].variable_max = max;
    924c:	c1 8e       	std	Z+25, r12	; 0x19
    924e:	d2 8e       	std	Z+26, r13	; 0x1a
    9250:	e3 8e       	std	Z+27, r14	; 0x1b
    9252:	f4 8e       	std	Z+28, r15	; 0x1c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  menu_dialog_variable[idx].variable_step = step;
    9254:	83 a2       	std	Z+35, r8	; 0x23
    9256:	94 a2       	std	Z+36, r9	; 0x24
    9258:	a5 a2       	std	Z+37, r10	; 0x25
    925a:	b6 a2       	std	Z+38, r11	; 0x26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  menu_dialog_variable[idx].number_type = number_type;
    925c:	12 a2       	std	Z+34, r1	; 0x22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
  menu_dialog_variable[idx].args = args;
    925e:	07 a3       	std	Z+39, r16	; 0x27
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1372
  menu_dialog_variable[idx].update_now = update_now;
    9260:	c1 a3       	std	Z+33, r28	; 0x21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
  menu_dialog_variable[idx].save_function = save_function;
    9262:	46 e5       	ldi	r20, 0x56	; 86
    9264:	52 e6       	ldi	r21, 0x62	; 98
    9266:	51 a7       	std	Z+41, r21	; 0x29
    9268:	40 a7       	std	Z+40, r20	; 0x28
thermostat_get_pid_d():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    926a:	80 52       	subi	r24, 0x20	; 32
    926c:	95 4f       	sbci	r25, 0xF5	; 245
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    926e:	dc 01       	movw	r26, r24
    9270:	4d 91       	ld	r20, X+
    9272:	5d 91       	ld	r21, X+
    9274:	6d 91       	ld	r22, X+
    9276:	7c 91       	ld	r23, X
    9278:	42 a7       	std	Z+42, r20	; 0x2a
    927a:	53 a7       	std	Z+43, r21	; 0x2b
    927c:	64 a7       	std	Z+44, r22	; 0x2c
    927e:	75 a7       	std	Z+45, r23	; 0x2d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  menu_dialog_variable[idx].variable_min = min;
    9280:	42 aa       	std	Z+50, r4	; 0x32
    9282:	53 aa       	std	Z+51, r5	; 0x33
    9284:	64 aa       	std	Z+52, r6	; 0x34
    9286:	75 aa       	std	Z+53, r7	; 0x35
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  menu_dialog_variable[idx].variable_max = max;
    9288:	c6 a6       	std	Z+46, r12	; 0x2e
    928a:	d7 a6       	std	Z+47, r13	; 0x2f
    928c:	e0 aa       	std	Z+48, r14	; 0x30
    928e:	f1 aa       	std	Z+49, r15	; 0x31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  menu_dialog_variable[idx].variable_step = step;
    9290:	80 ae       	std	Z+56, r8	; 0x38
    9292:	91 ae       	std	Z+57, r9	; 0x39
    9294:	a2 ae       	std	Z+58, r10	; 0x3a
    9296:	b3 ae       	std	Z+59, r11	; 0x3b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  menu_dialog_variable[idx].number_type = number_type;
    9298:	17 aa       	std	Z+55, r1	; 0x37
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
  menu_dialog_variable[idx].args = args;
    929a:	04 af       	std	Z+60, r16	; 0x3c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1372
  menu_dialog_variable[idx].update_now = update_now;
    929c:	c6 ab       	std	Z+54, r28	; 0x36
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
  menu_dialog_variable[idx].save_function = save_function;
    929e:	8f e3       	ldi	r24, 0x3F	; 63
    92a0:	92 e6       	ldi	r25, 0x62	; 98
    92a2:	96 af       	std	Z+62, r25	; 0x3e
    92a4:	85 af       	std	Z+61, r24	; 0x3d
thermostat_get_pid_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    92a6:	2c 50       	subi	r18, 0x0C	; 12
    92a8:	35 4f       	sbci	r19, 0xF5	; 245
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1313
uint8_t preload_pid_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_get_pid_p(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
  display_function_set_variable(thermostat_get_pid_i(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_I, &helper_thermostat_set_pid_i);
  display_function_set_variable(thermostat_get_pid_d(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_D, &helper_thermostat_set_pid_d);
  display_function_set_variable(thermostat_get_pid_time(args2),  10, 254, 2, args2, NUMBER_TYPE_INT,  H_TRUE, DIALOG_SET_VARIABLE_PID_T, &helper_thermostat_set_pid_time);
    92aa:	f9 01       	movw	r30, r18
    92ac:	60 81       	ld	r22, Z
    92ae:	70 e0       	ldi	r23, 0x00	; 0
    92b0:	90 e0       	ldi	r25, 0x00	; 0
    92b2:	80 e0       	ldi	r24, 0x00	; 0
    92b4:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
    92b8:	60 93 da 09 	sts	0x09DA, r22	; 0x8009da <menu_dialog_variable+0x3f>
    92bc:	70 93 db 09 	sts	0x09DB, r23	; 0x8009db <menu_dialog_variable+0x40>
    92c0:	80 93 dc 09 	sts	0x09DC, r24	; 0x8009dc <menu_dialog_variable+0x41>
    92c4:	90 93 dd 09 	sts	0x09DD, r25	; 0x8009dd <menu_dialog_variable+0x42>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    92c8:	c0 92 e2 09 	sts	0x09E2, r12	; 0x8009e2 <menu_dialog_variable+0x47>
    92cc:	d0 92 e3 09 	sts	0x09E3, r13	; 0x8009e3 <menu_dialog_variable+0x48>
    92d0:	e0 92 e4 09 	sts	0x09E4, r14	; 0x8009e4 <menu_dialog_variable+0x49>
    92d4:	f0 92 e5 09 	sts	0x09E5, r15	; 0x8009e5 <menu_dialog_variable+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  menu_dialog_variable[idx].variable_max = max;
    92d8:	80 e0       	ldi	r24, 0x00	; 0
    92da:	90 e0       	ldi	r25, 0x00	; 0
    92dc:	ae e7       	ldi	r26, 0x7E	; 126
    92de:	b3 e4       	ldi	r27, 0x43	; 67
    92e0:	80 93 de 09 	sts	0x09DE, r24	; 0x8009de <menu_dialog_variable+0x43>
    92e4:	90 93 df 09 	sts	0x09DF, r25	; 0x8009df <menu_dialog_variable+0x44>
    92e8:	a0 93 e0 09 	sts	0x09E0, r26	; 0x8009e0 <menu_dialog_variable+0x45>
    92ec:	b0 93 e1 09 	sts	0x09E1, r27	; 0x8009e1 <menu_dialog_variable+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  menu_dialog_variable[idx].variable_step = step;
    92f0:	80 e0       	ldi	r24, 0x00	; 0
    92f2:	90 e0       	ldi	r25, 0x00	; 0
    92f4:	a0 e0       	ldi	r26, 0x00	; 0
    92f6:	b0 e4       	ldi	r27, 0x40	; 64
    92f8:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <menu_dialog_variable+0x4d>
    92fc:	90 93 e9 09 	sts	0x09E9, r25	; 0x8009e9 <menu_dialog_variable+0x4e>
    9300:	a0 93 ea 09 	sts	0x09EA, r26	; 0x8009ea <menu_dialog_variable+0x4f>
    9304:	b0 93 eb 09 	sts	0x09EB, r27	; 0x8009eb <menu_dialog_variable+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  menu_dialog_variable[idx].number_type = number_type;
    9308:	c0 93 e7 09 	sts	0x09E7, r28	; 0x8009e7 <menu_dialog_variable+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
  menu_dialog_variable[idx].args = args;
    930c:	00 93 ec 09 	sts	0x09EC, r16	; 0x8009ec <menu_dialog_variable+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1372
  menu_dialog_variable[idx].update_now = update_now;
    9310:	c0 93 e6 09 	sts	0x09E6, r28	; 0x8009e6 <menu_dialog_variable+0x4b>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
  menu_dialog_variable[idx].save_function = save_function;
    9314:	80 e3       	ldi	r24, 0x30	; 48
    9316:	92 e6       	ldi	r25, 0x62	; 98
    9318:	90 93 ee 09 	sts	0x09EE, r25	; 0x8009ee <menu_dialog_variable+0x53>
    931c:	80 93 ed 09 	sts	0x09ED, r24	; 0x8009ed <menu_dialog_variable+0x52>
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1314
{
  display_function_set_variable(thermostat_get_pid_p(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
  display_function_set_variable(thermostat_get_pid_i(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_I, &helper_thermostat_set_pid_i);
  display_function_set_variable(thermostat_get_pid_d(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_D, &helper_thermostat_set_pid_d);
  display_function_set_variable(thermostat_get_pid_time(args2),  10, 254, 2, args2, NUMBER_TYPE_INT,  H_TRUE, DIALOG_SET_VARIABLE_PID_T, &helper_thermostat_set_pid_time);
}
    9320:	cf 91       	pop	r28
    9322:	1f 91       	pop	r17
    9324:	0f 91       	pop	r16
    9326:	ff 90       	pop	r15
    9328:	ef 90       	pop	r14
    932a:	df 90       	pop	r13
    932c:	cf 90       	pop	r12
    932e:	bf 90       	pop	r11
    9330:	af 90       	pop	r10
    9332:	9f 90       	pop	r9
    9334:	8f 90       	pop	r8
    9336:	7f 90       	pop	r7
    9338:	6f 90       	pop	r6
    933a:	5f 90       	pop	r5
    933c:	4f 90       	pop	r4
    933e:	08 95       	ret

00009340 <display_enable_show(unsigned int, unsigned int, unsigned char)>:
_Z19display_enable_showjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:602
  return 0;
}
uint8_t display_enable_show(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 1;
}
    9340:	81 e0       	ldi	r24, 0x01	; 1
    9342:	08 95       	ret

00009344 <returnnullfceargs(unsigned int, unsigned int, unsigned char)>:
_Z17returnnullfceargsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:598
void nullfce(uint16_t args1, uint16_t args2, uint8_t args3) {};
void nullfceargs(uint16_t args1, uint16_t args2, uint8_t args3) {};
uint8_t returnnullfceargs(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 0;
}
    9344:	80 e0       	ldi	r24, 0x00	; 0
    9346:	08 95       	ret

00009348 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:57
  size_t size() const {
    return _size;
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    9348:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:82
  void alignNextAlloc() {
    _size = round_size_up(_size);
  }

  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
    934a:	86 81       	ldd	r24, Z+6	; 0x06
    934c:	97 81       	ldd	r25, Z+7	; 0x07
    934e:	68 0f       	add	r22, r24
    9350:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    9352:	24 81       	ldd	r18, Z+4	; 0x04
    9354:	35 81       	ldd	r19, Z+5	; 0x05
    9356:	26 17       	cp	r18, r22
    9358:	37 07       	cpc	r19, r23
    935a:	38 f0       	brcs	.+14     	; 0x936a <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:86
  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
  }

  void* doAlloc(size_t bytes) {
    void* p = &_buffer[_size];
    935c:	22 81       	ldd	r18, Z+2	; 0x02
    935e:	33 81       	ldd	r19, Z+3	; 0x03
    9360:	82 0f       	add	r24, r18
    9362:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:87
    _size += bytes;
    9364:	77 83       	std	Z+7, r23	; 0x07
    9366:	66 83       	std	Z+6, r22	; 0x06
    9368:	08 95       	ret
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    936a:	90 e0       	ldi	r25, 0x00	; 0
    936c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:61
    return doAlloc(bytes);
  }
    936e:	08 95       	ret

00009370 <remote_tds_get_data(unsigned char) [clone .part.31]>:
_Z19remote_tds_get_datah.part.31():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1935
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (value & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((value >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
    9370:	0f 93       	push	r16
    9372:	1f 93       	push	r17
    9374:	cf 93       	push	r28
    9376:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
{
  int value = 0;
  if (idx < MAX_RTDS)
  {
    value = SRAM.readByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx)) << 8;
    9378:	94 e0       	ldi	r25, 0x04	; 4
    937a:	89 9f       	mul	r24, r25
    937c:	e0 01       	movw	r28, r0
    937e:	11 24       	eor	r1, r1
    9380:	be 01       	movw	r22, r28
    9382:	6b 59       	subi	r22, 0x9B	; 155
    9384:	7f 4f       	sbci	r23, 0xFF	; 255
    9386:	07 2e       	mov	r0, r23
    9388:	00 0c       	add	r0, r0
    938a:	88 0b       	sbc	r24, r24
    938c:	99 0b       	sbc	r25, r25
    938e:	0e 94 2c ae 	call	0x15c58	; 0x15c58 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
    9392:	08 2f       	mov	r16, r24
    9394:	10 e0       	ldi	r17, 0x00	; 0
    9396:	10 2f       	mov	r17, r16
    9398:	00 27       	eor	r16, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1941
    value = value + SRAM.readByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx));
    939a:	be 01       	movw	r22, r28
    939c:	6c 59       	subi	r22, 0x9C	; 156
    939e:	7f 4f       	sbci	r23, 0xFF	; 255
    93a0:	07 2e       	mov	r0, r23
    93a2:	00 0c       	add	r0, r0
    93a4:	88 0b       	sbc	r24, r24
    93a6:	99 0b       	sbc	r25, r25
    93a8:	0e 94 2c ae 	call	0x15c58	; 0x15c58 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1944
  }
  return value;
}
    93ac:	80 0f       	add	r24, r16
    93ae:	91 2f       	mov	r25, r17
    93b0:	91 1d       	adc	r25, r1
    93b2:	df 91       	pop	r29
    93b4:	cf 91       	pop	r28
    93b6:	1f 91       	pop	r17
    93b8:	0f 91       	pop	r16
    93ba:	08 95       	ret

000093bc <remote_tds_get_last_update(unsigned char)>:
_Z26remote_tds_get_last_updateh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1948
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
    93bc:	8a 30       	cpi	r24, 0x0A	; 10
    93be:	60 f4       	brcc	.+24     	; 0x93d8 <remote_tds_get_last_update(unsigned char)+0x1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1950
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    93c0:	94 e0       	ldi	r25, 0x04	; 4
    93c2:	89 9f       	mul	r24, r25
    93c4:	b0 01       	movw	r22, r0
    93c6:	11 24       	eor	r1, r1
    93c8:	6a 59       	subi	r22, 0x9A	; 154
    93ca:	7f 4f       	sbci	r23, 0xFF	; 255
    93cc:	07 2e       	mov	r0, r23
    93ce:	00 0c       	add	r0, r0
    93d0:	88 0b       	sbc	r24, r24
    93d2:	99 0b       	sbc	r25, r25
    93d4:	0c 94 2c ae 	jmp	0x15c58	; 0x15c58 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1953
  }
  return last;
}
    93d8:	8f ef       	ldi	r24, 0xFF	; 255
    93da:	08 95       	ret

000093dc <remote_tds_get_type(unsigned char)>:
_Z19remote_tds_get_typeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1919
  }
}
uint8_t remote_tds_get_type(uint8_t idx)
{
  uint8_t type = 255;
  if (idx < MAX_RTDS)
    93dc:	8a 30       	cpi	r24, 0x0A	; 10
    93de:	60 f4       	brcc	.+24     	; 0x93f8 <remote_tds_get_type(unsigned char)+0x1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1921
  {
    type = SRAM.readByte(ram_remote_tds_store_type + (ram_remote_tds_store_size * idx));
    93e0:	94 e0       	ldi	r25, 0x04	; 4
    93e2:	89 9f       	mul	r24, r25
    93e4:	b0 01       	movw	r22, r0
    93e6:	11 24       	eor	r1, r1
    93e8:	69 59       	subi	r22, 0x99	; 153
    93ea:	7f 4f       	sbci	r23, 0xFF	; 255
    93ec:	07 2e       	mov	r0, r23
    93ee:	00 0c       	add	r0, r0
    93f0:	88 0b       	sbc	r24, r24
    93f2:	99 0b       	sbc	r25, r25
    93f4:	0c 94 2c ae 	jmp	0x15c58	; 0x15c58 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1924
  }
  return type;
}
    93f8:	8f ef       	ldi	r24, 0xFF	; 255
    93fa:	08 95       	ret

000093fc <remote_tds_set_data(unsigned char, int)>:
_Z19remote_tds_set_datahi():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1927

void remote_tds_set_data(uint8_t idx, int value)
{
    93fc:	1f 93       	push	r17
    93fe:	cf 93       	push	r28
    9400:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1928
  if (idx < MAX_RTDS)
    9402:	8a 30       	cpi	r24, 0x0A	; 10
    9404:	39 f1       	breq	.+78     	; 0x9454 <remote_tds_set_data(unsigned char, int)+0x58>
    9406:	17 2f       	mov	r17, r23
    9408:	46 2f       	mov	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1930
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (value & 0xff));
    940a:	90 e0       	ldi	r25, 0x00	; 0
    940c:	49 96       	adiw	r24, 0x19	; 25
    940e:	ec 01       	movw	r28, r24
    9410:	cc 0f       	add	r28, r28
    9412:	dd 1f       	adc	r29, r29
    9414:	cc 0f       	add	r28, r28
    9416:	dd 1f       	adc	r29, r29
    9418:	be 01       	movw	r22, r28
    941a:	0d 2e       	mov	r0, r29
    941c:	00 0c       	add	r0, r0
    941e:	88 0b       	sbc	r24, r24
    9420:	99 0b       	sbc	r25, r25
    9422:	0e 94 f0 ad 	call	0x15be0	; 0x15be0 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1931
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((value >> 8) & 0xff));
    9426:	be 01       	movw	r22, r28
    9428:	6f 5f       	subi	r22, 0xFF	; 255
    942a:	7f 4f       	sbci	r23, 0xFF	; 255
    942c:	07 2e       	mov	r0, r23
    942e:	00 0c       	add	r0, r0
    9430:	88 0b       	sbc	r24, r24
    9432:	99 0b       	sbc	r25, r25
    9434:	41 2f       	mov	r20, r17
    9436:	0e 94 f0 ad 	call	0x15be0	; 0x15be0 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1932
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    943a:	be 01       	movw	r22, r28
    943c:	6e 5f       	subi	r22, 0xFE	; 254
    943e:	7f 4f       	sbci	r23, 0xFF	; 255
    9440:	07 2e       	mov	r0, r23
    9442:	00 0c       	add	r0, r0
    9444:	88 0b       	sbc	r24, r24
    9446:	99 0b       	sbc	r25, r25
    9448:	40 e0       	ldi	r20, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
  }
}
    944a:	df 91       	pop	r29
    944c:	cf 91       	pop	r28
    944e:	1f 91       	pop	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1932
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (value & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((value >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    9450:	0c 94 f0 ad 	jmp	0x15be0	; 0x15be0 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
  }
}
    9454:	df 91       	pop	r29
    9456:	cf 91       	pop	r28
    9458:	1f 91       	pop	r17
    945a:	08 95       	ret

0000945c <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z41button_select_term_mode_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5379
   off,max,min,prog,man
   line1 ... kratke pojmenovani modu
   line2 ... komentar
*/
void button_select_term_mode_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    945c:	0f 93       	push	r16
    945e:	1f 93       	push	r17
    9460:	48 2f       	mov	r20, r24
    9462:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5380
  if (args1 == 0)
    9464:	41 11       	cpse	r20, r1
    9466:	0b c0       	rjmp	.+22     	; 0x947e <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5382
  {
    strcpy_P(line1, text_button_term_off);
    9468:	6e e5       	ldi	r22, 0x5E	; 94
    946a:	72 e7       	ldi	r23, 0x72	; 114
    946c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5383
    strcpy_P(line2, text_button_term_off_comment);
    9470:	68 e4       	ldi	r22, 0x48	; 72
    9472:	72 e7       	ldi	r23, 0x72	; 114
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5403
    strcpy_P(line2, text_button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, text_button_term_man);
    strcpy_P(line2, text_button_term_man_comment);
    9474:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5405
  }
}
    9476:	1f 91       	pop	r17
    9478:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5403
    strcpy_P(line2, text_button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, text_button_term_man);
    strcpy_P(line2, text_button_term_man_comment);
    947a:	0c 94 4f e5 	jmp	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5385
  if (args1 == 0)
  {
    strcpy_P(line1, text_button_term_off);
    strcpy_P(line2, text_button_term_off_comment);
  }
  if (args1 == 1)
    947e:	41 30       	cpi	r20, 0x01	; 1
    9480:	39 f4       	brne	.+14     	; 0x9490 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5387
  {
    strcpy_P(line1, text_button_term_max);
    9482:	64 e4       	ldi	r22, 0x44	; 68
    9484:	72 e7       	ldi	r23, 0x72	; 114
    9486:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5388
    strcpy_P(line2, text_button_term_max_comment);
    948a:	6e e2       	ldi	r22, 0x2E	; 46
    948c:	72 e7       	ldi	r23, 0x72	; 114
    948e:	f2 cf       	rjmp	.-28     	; 0x9474 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5390
  }
  if (args1 == 2)
    9490:	42 30       	cpi	r20, 0x02	; 2
    9492:	39 f4       	brne	.+14     	; 0x94a2 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5392
  {
    strcpy_P(line1, text_button_term_min);
    9494:	6a e2       	ldi	r22, 0x2A	; 42
    9496:	72 e7       	ldi	r23, 0x72	; 114
    9498:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5393
    strcpy_P(line2, text_button_term_min_comment);
    949c:	63 e1       	ldi	r22, 0x13	; 19
    949e:	72 e7       	ldi	r23, 0x72	; 114
    94a0:	e9 cf       	rjmp	.-46     	; 0x9474 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5395
  }
  if (args1 == 3)
    94a2:	43 30       	cpi	r20, 0x03	; 3
    94a4:	39 f4       	brne	.+14     	; 0x94b4 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5397
  {
    strcpy_P(line1, text_button_term_prog);
    94a6:	6e e0       	ldi	r22, 0x0E	; 14
    94a8:	72 e7       	ldi	r23, 0x72	; 114
    94aa:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5398
    strcpy_P(line2, text_button_term_prog_comment);
    94ae:	6a ef       	ldi	r22, 0xFA	; 250
    94b0:	71 e7       	ldi	r23, 0x71	; 113
    94b2:	e0 cf       	rjmp	.-64     	; 0x9474 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5400
  }
  if (args1 == 4)
    94b4:	44 30       	cpi	r20, 0x04	; 4
    94b6:	39 f4       	brne	.+14     	; 0x94c6 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5402
  {
    strcpy_P(line1, text_button_term_man);
    94b8:	66 ef       	ldi	r22, 0xF6	; 246
    94ba:	71 e7       	ldi	r23, 0x71	; 113
    94bc:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5403
    strcpy_P(line2, text_button_term_man_comment);
    94c0:	67 ee       	ldi	r22, 0xE7	; 231
    94c2:	71 e7       	ldi	r23, 0x71	; 113
    94c4:	d7 cf       	rjmp	.-82     	; 0x9474 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5405
  }
}
    94c6:	1f 91       	pop	r17
    94c8:	0f 91       	pop	r16
    94ca:	08 95       	ret

000094cc <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z44switch_brightness_automode_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5554
  return ret;
}
////////
/// Funkce, ktera vraci popisky pro dynamicke tlacitko
void switch_brightness_automode_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    94cc:	0f 93       	push	r16
    94ce:	1f 93       	push	r17
    94d0:	cf 93       	push	r28
    94d2:	df 93       	push	r29
    94d4:	00 d0       	rcall	.+0      	; 0x94d6 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>
    94d6:	00 d0       	rcall	.+0      	; 0x94d8 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    94d8:	1f 92       	push	r1
    94da:	1f 92       	push	r1
    94dc:	cd b7       	in	r28, 0x3d	; 61
    94de:	de b7       	in	r29, 0x3e	; 62
    94e0:	89 01       	movw	r16, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5556
  char str2[8];
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 )
    94e2:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    94e6:	87 ff       	sbrs	r24, 7
    94e8:	1a c0       	rjmp	.+52     	; 0x951e <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5558
  {
    strcpy_P(line1, new_text_jas_display_automat);
    94ea:	6b e8       	ldi	r22, 0x8B	; 139
    94ec:	72 e7       	ldi	r23, 0x72	; 114
    94ee:	c9 01       	movw	r24, r18
    94f0:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5559
    itoa(brigthness_display_auto_values / 2, str2, 10);
    94f4:	80 91 a0 0c 	lds	r24, 0x0CA0	; 0x800ca0 <brigthness_display_auto_values>
    94f8:	86 95       	lsr	r24
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    94fa:	4a e0       	ldi	r20, 0x0A	; 10
    94fc:	be 01       	movw	r22, r28
    94fe:	6f 5f       	subi	r22, 0xFF	; 255
    9500:	7f 4f       	sbci	r23, 0xFF	; 255
    9502:	90 e0       	ldi	r25, 0x00	; 0
    9504:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z44switch_brightness_automode_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5560
    strcat(line1, str2);
    9508:	be 01       	movw	r22, r28
    950a:	6f 5f       	subi	r22, 0xFF	; 255
    950c:	7f 4f       	sbci	r23, 0xFF	; 255
    950e:	c8 01       	movw	r24, r16
    9510:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5561
    strcat(line1, "%");
    9514:	63 e0       	ldi	r22, 0x03	; 3
    9516:	73 e0       	ldi	r23, 0x03	; 3
    9518:	c8 01       	movw	r24, r16
    951a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5563
  }
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
    951e:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    9522:	87 fd       	sbrc	r24, 7
    9524:	05 c0       	rjmp	.+10     	; 0x9530 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5565
  {
    strcpy_P(line1, new_text_jas_display_manual);
    9526:	6a e7       	ldi	r22, 0x7A	; 122
    9528:	72 e7       	ldi	r23, 0x72	; 114
    952a:	c8 01       	movw	r24, r16
    952c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5567
  }
}
    9530:	28 96       	adiw	r28, 0x08	; 8
    9532:	0f b6       	in	r0, 0x3f	; 63
    9534:	f8 94       	cli
    9536:	de bf       	out	0x3e, r29	; 62
    9538:	0f be       	out	0x3f, r0	; 63
    953a:	cd bf       	out	0x3d, r28	; 61
    953c:	df 91       	pop	r29
    953e:	cf 91       	pop	r28
    9540:	1f 91       	pop	r17
    9542:	0f 91       	pop	r16
    9544:	08 95       	ret

00009546 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5519
   Display funkce

*/
/// Funkce ktera vrati popisek pro tlacitko
void button_change_brightness_display_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    9546:	0f 93       	push	r16
    9548:	1f 93       	push	r17
    954a:	cf 93       	push	r28
    954c:	df 93       	push	r29
    954e:	00 d0       	rcall	.+0      	; 0x9550 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>
    9550:	00 d0       	rcall	.+0      	; 0x9552 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    9552:	1f 92       	push	r1
    9554:	1f 92       	push	r1
    9556:	cd b7       	in	r28, 0x3d	; 61
    9558:	de b7       	in	r29, 0x3e	; 62
    955a:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5521
  char str2[8];
  strcpy_P(line1, new_text_jas_display);
    955c:	62 e6       	ldi	r22, 0x62	; 98
    955e:	72 e7       	ldi	r23, 0x72	; 114
    9560:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5522
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 )
    9564:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    9568:	87 ff       	sbrs	r24, 7
    956a:	1a c0       	rjmp	.+52     	; 0x95a0 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5524
  {
    strcpy_P(line2, new_text_jas_display_automat);
    956c:	6b e8       	ldi	r22, 0x8B	; 139
    956e:	72 e7       	ldi	r23, 0x72	; 114
    9570:	c8 01       	movw	r24, r16
    9572:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5525
    itoa(brigthness_display_auto_values / 2, str2, 10);
    9576:	80 91 a0 0c 	lds	r24, 0x0CA0	; 0x800ca0 <brigthness_display_auto_values>
    957a:	86 95       	lsr	r24
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    957c:	4a e0       	ldi	r20, 0x0A	; 10
    957e:	be 01       	movw	r22, r28
    9580:	6f 5f       	subi	r22, 0xFF	; 255
    9582:	7f 4f       	sbci	r23, 0xFF	; 255
    9584:	90 e0       	ldi	r25, 0x00	; 0
    9586:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5526
    strcat(line2, str2);
    958a:	be 01       	movw	r22, r28
    958c:	6f 5f       	subi	r22, 0xFF	; 255
    958e:	7f 4f       	sbci	r23, 0xFF	; 255
    9590:	c8 01       	movw	r24, r16
    9592:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5527
    strcat(line2, "%");
    9596:	63 e0       	ldi	r22, 0x03	; 3
    9598:	73 e0       	ldi	r23, 0x03	; 3
    959a:	c8 01       	movw	r24, r16
    959c:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5529
  }
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
    95a0:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    95a4:	87 fd       	sbrc	r24, 7
    95a6:	23 c0       	rjmp	.+70     	; 0x95ee <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5531
  {
    strcpy_P(line2, new_text_jas_display_manual);
    95a8:	6a e7       	ldi	r22, 0x7A	; 122
    95aa:	72 e7       	ldi	r23, 0x72	; 114
    95ac:	c8 01       	movw	r24, r16
    95ae:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5532
    itoa(brigthness_display_values, str2, 10);
    95b2:	80 91 87 0b 	lds	r24, 0x0B87	; 0x800b87 <brigthness_display_values>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    95b6:	4a e0       	ldi	r20, 0x0A	; 10
    95b8:	be 01       	movw	r22, r28
    95ba:	6f 5f       	subi	r22, 0xFF	; 255
    95bc:	7f 4f       	sbci	r23, 0xFF	; 255
    95be:	90 e0       	ldi	r25, 0x00	; 0
    95c0:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5533
    strcat(line2, str2);
    95c4:	be 01       	movw	r22, r28
    95c6:	6f 5f       	subi	r22, 0xFF	; 255
    95c8:	7f 4f       	sbci	r23, 0xFF	; 255
    95ca:	c8 01       	movw	r24, r16
    95cc:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5534
    strcat(line2, "%");
    95d0:	63 e0       	ldi	r22, 0x03	; 3
    95d2:	73 e0       	ldi	r23, 0x03	; 3
    95d4:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5536
  }
}
    95d6:	28 96       	adiw	r28, 0x08	; 8
    95d8:	0f b6       	in	r0, 0x3f	; 63
    95da:	f8 94       	cli
    95dc:	de bf       	out	0x3e, r29	; 62
    95de:	0f be       	out	0x3f, r0	; 63
    95e0:	cd bf       	out	0x3d, r28	; 61
    95e2:	df 91       	pop	r29
    95e4:	cf 91       	pop	r28
    95e6:	1f 91       	pop	r17
    95e8:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5534
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
  {
    strcpy_P(line2, new_text_jas_display_manual);
    itoa(brigthness_display_values, str2, 10);
    strcat(line2, str2);
    strcat(line2, "%");
    95ea:	0c 94 dd f1 	jmp	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5536
  }
}
    95ee:	28 96       	adiw	r28, 0x08	; 8
    95f0:	0f b6       	in	r0, 0x3f	; 63
    95f2:	f8 94       	cli
    95f4:	de bf       	out	0x3e, r29	; 62
    95f6:	0f be       	out	0x3f, r0	; 63
    95f8:	cd bf       	out	0x3d, r28	; 61
    95fa:	df 91       	pop	r29
    95fc:	cf 91       	pop	r28
    95fe:	1f 91       	pop	r17
    9600:	0f 91       	pop	r16
    9602:	08 95       	ret

00009604 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z65button_set_brightness_auto_shutdown_select_time_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5641
    ret = 1;
  return ret;
}

void button_set_brightness_auto_shutdown_select_time_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    9604:	0f 93       	push	r16
    9606:	1f 93       	push	r17
    9608:	48 2f       	mov	r20, r24
    960a:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5642
  line2[0] = 0;
    960c:	f8 01       	movw	r30, r16
    960e:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5643
  if (args1 == 0)
    9610:	41 11       	cpse	r20, r1
    9612:	07 c0       	rjmp	.+14     	; 0x9622 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5644
    strcpy_P(line1, new_text_vypnuto);
    9614:	6b eb       	ldi	r22, 0xBB	; 187
    9616:	72 e7       	ldi	r23, 0x72	; 114
    9618:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5655
    strcpy(line1, "2 min");
  if (args1 == 4)
    strcpy(line1, "3 min");
  if (args1 == 5)
    strcpy(line1, "4 min");
}
    961c:	1f 91       	pop	r17
    961e:	0f 91       	pop	r16
    9620:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5645
void button_set_brightness_auto_shutdown_select_time_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line2[0] = 0;
  if (args1 == 0)
    strcpy_P(line1, new_text_vypnuto);
  if (args1 == 1)
    9622:	41 30       	cpi	r20, 0x01	; 1
    9624:	29 f4       	brne	.+10     	; 0x9630 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5646
    strcpy(line1, "30 sec");
    9626:	65 e0       	ldi	r22, 0x05	; 5
    9628:	73 e0       	ldi	r23, 0x03	; 3
    962a:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
    962e:	f6 cf       	rjmp	.-20     	; 0x961c <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5648
  if (args1 == 2)
    strcpy(line1, "1 min");
    9630:	6c e0       	ldi	r22, 0x0C	; 12
    9632:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5647
  line2[0] = 0;
  if (args1 == 0)
    strcpy_P(line1, new_text_vypnuto);
  if (args1 == 1)
    strcpy(line1, "30 sec");
  if (args1 == 2)
    9634:	42 30       	cpi	r20, 0x02	; 2
    9636:	61 f0       	breq	.+24     	; 0x9650 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5650
    strcpy(line1, "1 min");
  if (args1 == 3)
    strcpy(line1, "2 min");
    9638:	62 e1       	ldi	r22, 0x12	; 18
    963a:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5649
    strcpy_P(line1, new_text_vypnuto);
  if (args1 == 1)
    strcpy(line1, "30 sec");
  if (args1 == 2)
    strcpy(line1, "1 min");
  if (args1 == 3)
    963c:	43 30       	cpi	r20, 0x03	; 3
    963e:	41 f0       	breq	.+16     	; 0x9650 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5652
    strcpy(line1, "2 min");
  if (args1 == 4)
    strcpy(line1, "3 min");
    9640:	68 e1       	ldi	r22, 0x18	; 24
    9642:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5651
    strcpy(line1, "30 sec");
  if (args1 == 2)
    strcpy(line1, "1 min");
  if (args1 == 3)
    strcpy(line1, "2 min");
  if (args1 == 4)
    9644:	44 30       	cpi	r20, 0x04	; 4
    9646:	21 f0       	breq	.+8      	; 0x9650 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5653
    strcpy(line1, "3 min");
  if (args1 == 5)
    9648:	45 30       	cpi	r20, 0x05	; 5
    964a:	41 f7       	brne	.-48     	; 0x961c <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5654
    strcpy(line1, "4 min");
    964c:	6e e1       	ldi	r22, 0x1E	; 30
    964e:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5655
}
    9650:	1f 91       	pop	r17
    9652:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5654
  if (args1 == 3)
    strcpy(line1, "2 min");
  if (args1 == 4)
    strcpy(line1, "3 min");
  if (args1 == 5)
    strcpy(line1, "4 min");
    9654:	0c 94 fc f1 	jmp	0x1e3f8	; 0x1e3f8 <strcpy>

00009658 <display_element_get_string(char*)>:
_Z26display_element_get_stringPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1392
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    9658:	65 ef       	ldi	r22, 0xF5	; 245
    965a:	79 e0       	ldi	r23, 0x09	; 9
    965c:	0c 94 fc f1 	jmp	0x1e3f8	; 0x1e3f8 <strcpy>

00009660 <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z53button_set_brightness_auto_shutdown_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5619
   Funkce pro automaticke vypinani displaye pri neaktivite


*/
void button_set_brightness_auto_shutdown_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    9660:	0f 93       	push	r16
    9662:	1f 93       	push	r17
    9664:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5620
  strcpy_P(line1, new_text_auto_display_shutdown);
    9666:	6e e9       	ldi	r22, 0x9E	; 158
    9668:	72 e7       	ldi	r23, 0x72	; 114
    966a:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5621
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) == 0)
    966e:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    9672:	86 fd       	sbrc	r24, 6
    9674:	07 c0       	rjmp	.+14     	; 0x9684 <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5622
    strcpy_P(line2, new_text_vypnuto);
    9676:	6b eb       	ldi	r22, 0xBB	; 187
    9678:	72 e7       	ldi	r23, 0x72	; 114
    967a:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5625
  else
    sprintf(line2, "Povoleno: %d sec", display_auto_shutdown);
}
    967c:	1f 91       	pop	r17
    967e:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5622
*/
void button_set_brightness_auto_shutdown_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  strcpy_P(line1, new_text_auto_display_shutdown);
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) == 0)
    strcpy_P(line2, new_text_vypnuto);
    9680:	0c 94 4f e5 	jmp	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5624
  else
    sprintf(line2, "Povoleno: %d sec", display_auto_shutdown);
    9684:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <display_auto_shutdown>
    9688:	1f 92       	push	r1
    968a:	8f 93       	push	r24
    968c:	84 e2       	ldi	r24, 0x24	; 36
    968e:	93 e0       	ldi	r25, 0x03	; 3
    9690:	9f 93       	push	r25
    9692:	8f 93       	push	r24
    9694:	1f 93       	push	r17
    9696:	0f 93       	push	r16
    9698:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
    969c:	0f 90       	pop	r0
    969e:	0f 90       	pop	r0
    96a0:	0f 90       	pop	r0
    96a2:	0f 90       	pop	r0
    96a4:	0f 90       	pop	r0
    96a6:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5625
}
    96a8:	1f 91       	pop	r17
    96aa:	0f 91       	pop	r16
    96ac:	08 95       	ret

000096ae <ip2CharArray(IPAddress, char*)>:
_Z12ip2CharArray9IPAddressPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1757
/// ip2CharArray - jednoducha funkce prevodu objectu IPAddress na char pole
/*
   ip - object typu IP address
 * *buf - ukazatel na pole s vysledkem
*/
void ip2CharArray(IPAddress ip, char* buf) {
    96ae:	fc 01       	movw	r30, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1758
  sprintf(buf, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);
    96b0:	85 81       	ldd	r24, Z+5	; 0x05
    96b2:	1f 92       	push	r1
    96b4:	8f 93       	push	r24
    96b6:	84 81       	ldd	r24, Z+4	; 0x04
    96b8:	1f 92       	push	r1
    96ba:	8f 93       	push	r24
    96bc:	83 81       	ldd	r24, Z+3	; 0x03
    96be:	1f 92       	push	r1
    96c0:	8f 93       	push	r24
    96c2:	82 81       	ldd	r24, Z+2	; 0x02
    96c4:	1f 92       	push	r1
    96c6:	8f 93       	push	r24
    96c8:	85 e3       	ldi	r24, 0x35	; 53
    96ca:	93 e0       	ldi	r25, 0x03	; 3
    96cc:	9f 93       	push	r25
    96ce:	8f 93       	push	r24
    96d0:	7f 93       	push	r23
    96d2:	6f 93       	push	r22
    96d4:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
    96d8:	8d b7       	in	r24, 0x3d	; 61
    96da:	9e b7       	in	r25, 0x3e	; 62
    96dc:	0c 96       	adiw	r24, 0x0c	; 12
    96de:	0f b6       	in	r0, 0x3f	; 63
    96e0:	f8 94       	cli
    96e2:	9e bf       	out	0x3e, r25	; 62
    96e4:	0f be       	out	0x3f, r0	; 63
    96e6:	8d bf       	out	0x3d, r24	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1759
}
    96e8:	08 95       	ret

000096ea <mqtt_send_pid_variable(unsigned char)>:
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3011
   /thermctl-out/XXXXX/pid/IDX/kp
   /thermctl-out/XXXXX/pid/IDX/ki
   /thermctl-out/XXXXX/pid/IDX/kd
*/
void mqtt_send_pid_variable(uint8_t idx)
{
    96ea:	af 92       	push	r10
    96ec:	bf 92       	push	r11
    96ee:	cf 92       	push	r12
    96f0:	df 92       	push	r13
    96f2:	ff 92       	push	r15
    96f4:	0f 93       	push	r16
    96f6:	1f 93       	push	r17
    96f8:	cf 93       	push	r28
    96fa:	df 93       	push	r29
    96fc:	cd b7       	in	r28, 0x3d	; 61
    96fe:	de b7       	in	r29, 0x3e	; 62
    9700:	a0 97       	sbiw	r28, 0x20	; 32
    9702:	0f b6       	in	r0, 0x3f	; 63
    9704:	f8 94       	cli
    9706:	de bf       	out	0x3e, r29	; 62
    9708:	0f be       	out	0x3f, r0	; 63
    970a:	cd bf       	out	0x3d, r28	; 61
    970c:	f8 2e       	mov	r15, r24
thermostat_get_pid_p():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    970e:	a8 2e       	mov	r10, r24
    9710:	b1 2c       	mov	r11, r1
    9712:	65 01       	movw	r12, r10
    9714:	cc 0c       	add	r12, r12
    9716:	dd 1c       	adc	r13, r13
    9718:	cc 0c       	add	r12, r12
    971a:	dd 1c       	adc	r13, r13
    971c:	f6 01       	movw	r30, r12
    971e:	e8 54       	subi	r30, 0x48	; 72
    9720:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3013
  char payload[32];
  dtostrf(thermostat_get_pid_p(idx), 7, 2, payload);
    9722:	60 81       	ld	r22, Z
    9724:	71 81       	ldd	r23, Z+1	; 0x01
    9726:	82 81       	ldd	r24, Z+2	; 0x02
    9728:	93 81       	ldd	r25, Z+3	; 0x03
    972a:	8e 01       	movw	r16, r28
    972c:	0f 5f       	subi	r16, 0xFF	; 255
    972e:	1f 4f       	sbci	r17, 0xFF	; 255
    9730:	22 e0       	ldi	r18, 0x02	; 2
    9732:	47 e0       	ldi	r20, 0x07	; 7
    9734:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3014
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kp", payload);
    9738:	98 01       	movw	r18, r16
    973a:	40 ed       	ldi	r20, 0xD0	; 208
    973c:	56 e0       	ldi	r21, 0x06	; 6
    973e:	6f 2d       	mov	r22, r15
    9740:	81 e4       	ldi	r24, 0x41	; 65
    9742:	93 e0       	ldi	r25, 0x03	; 3
    9744:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_get_pid_i():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    9748:	f6 01       	movw	r30, r12
    974a:	e4 53       	subi	r30, 0x34	; 52
    974c:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3015
  dtostrf(thermostat_get_pid_i(idx), 7, 2, payload);
    974e:	60 81       	ld	r22, Z
    9750:	71 81       	ldd	r23, Z+1	; 0x01
    9752:	82 81       	ldd	r24, Z+2	; 0x02
    9754:	93 81       	ldd	r25, Z+3	; 0x03
    9756:	22 e0       	ldi	r18, 0x02	; 2
    9758:	47 e0       	ldi	r20, 0x07	; 7
    975a:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3016
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "ki", payload);
    975e:	98 01       	movw	r18, r16
    9760:	47 ed       	ldi	r20, 0xD7	; 215
    9762:	56 e0       	ldi	r21, 0x06	; 6
    9764:	6f 2d       	mov	r22, r15
    9766:	81 e4       	ldi	r24, 0x41	; 65
    9768:	93 e0       	ldi	r25, 0x03	; 3
    976a:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_get_pid_d():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    976e:	f6 01       	movw	r30, r12
    9770:	e0 52       	subi	r30, 0x20	; 32
    9772:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3017
  dtostrf(thermostat_get_pid_d(idx), 7, 2, payload);
    9774:	60 81       	ld	r22, Z
    9776:	71 81       	ldd	r23, Z+1	; 0x01
    9778:	82 81       	ldd	r24, Z+2	; 0x02
    977a:	93 81       	ldd	r25, Z+3	; 0x03
    977c:	22 e0       	ldi	r18, 0x02	; 2
    977e:	47 e0       	ldi	r20, 0x07	; 7
    9780:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3018
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kd", payload);
    9784:	98 01       	movw	r18, r16
    9786:	4e ed       	ldi	r20, 0xDE	; 222
    9788:	56 e0       	ldi	r21, 0x06	; 6
    978a:	6f 2d       	mov	r22, r15
    978c:	81 e4       	ldi	r24, 0x41	; 65
    978e:	93 e0       	ldi	r25, 0x03	; 3
    9790:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_get_pid_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    9794:	f5 01       	movw	r30, r10
    9796:	ec 50       	subi	r30, 0x0C	; 12
    9798:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3019
  itoa(thermostat_get_pid_time(idx), payload, 10);
    979a:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    979c:	4a e0       	ldi	r20, 0x0A	; 10
    979e:	b8 01       	movw	r22, r16
    97a0:	90 e0       	ldi	r25, 0x00	; 0
    97a2:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3020
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "time", payload);
    97a6:	98 01       	movw	r18, r16
    97a8:	45 ee       	ldi	r20, 0xE5	; 229
    97aa:	56 e0       	ldi	r21, 0x06	; 6
    97ac:	6f 2d       	mov	r22, r15
    97ae:	81 e4       	ldi	r24, 0x41	; 65
    97b0:	93 e0       	ldi	r25, 0x03	; 3
    97b2:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3021
}
    97b6:	a0 96       	adiw	r28, 0x20	; 32
    97b8:	0f b6       	in	r0, 0x3f	; 63
    97ba:	f8 94       	cli
    97bc:	de bf       	out	0x3e, r29	; 62
    97be:	0f be       	out	0x3f, r0	; 63
    97c0:	cd bf       	out	0x3d, r28	; 61
    97c2:	df 91       	pop	r29
    97c4:	cf 91       	pop	r28
    97c6:	1f 91       	pop	r17
    97c8:	0f 91       	pop	r16
    97ca:	ff 90       	pop	r15
    97cc:	df 90       	pop	r13
    97ce:	cf 90       	pop	r12
    97d0:	bf 90       	pop	r11
    97d2:	af 90       	pop	r10
    97d4:	08 95       	ret

000097d6 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    97d6:	8f 92       	push	r8
    97d8:	9f 92       	push	r9
    97da:	af 92       	push	r10
    97dc:	bf 92       	push	r11
    97de:	ef 92       	push	r14
    97e0:	ff 92       	push	r15
    97e2:	0f 93       	push	r16
    97e4:	1f 93       	push	r17
    97e6:	cf 93       	push	r28
    97e8:	df 93       	push	r29
    97ea:	cd b7       	in	r28, 0x3d	; 61
    97ec:	de b7       	in	r29, 0x3e	; 62
    97ee:	a1 97       	sbiw	r28, 0x21	; 33
    97f0:	0f b6       	in	r0, 0x3f	; 63
    97f2:	f8 94       	cli
    97f4:	de bf       	out	0x3e, r29	; 62
    97f6:	0f be       	out	0x3f, r0	; 63
    97f8:	cd bf       	out	0x3d, r28	; 61
    97fa:	7c 01       	movw	r14, r24
    97fc:	fa 01       	movw	r30, r20
    97fe:	cb 01       	movw	r24, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    9800:	19 a2       	std	Y+33, r1	; 0x21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    9802:	22 30       	cpi	r18, 0x02	; 2
    9804:	08 f4       	brcc	.+2      	; 0x9808 <Print::printNumber(unsigned long, unsigned char)+0x32>
    9806:	2a e0       	ldi	r18, 0x0A	; 10
    9808:	8e 01       	movw	r16, r28
    980a:	0f 5d       	subi	r16, 0xDF	; 223
    980c:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    980e:	82 2e       	mov	r8, r18
    9810:	91 2c       	mov	r9, r1
    9812:	b1 2c       	mov	r11, r1
    9814:	a1 2c       	mov	r10, r1
    9816:	bf 01       	movw	r22, r30
    9818:	a5 01       	movw	r20, r10
    981a:	94 01       	movw	r18, r8
    981c:	0e 94 65 ef 	call	0x1deca	; 0x1deca <__udivmodsi4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
    9820:	f9 01       	movw	r30, r18
    9822:	ca 01       	movw	r24, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    9824:	6a 30       	cpi	r22, 0x0A	; 10
    9826:	74 f5       	brge	.+92     	; 0x9884 <Print::printNumber(unsigned long, unsigned char)+0xae>
    9828:	60 5d       	subi	r22, 0xD0	; 208
    982a:	d8 01       	movw	r26, r16
    982c:	6e 93       	st	-X, r22
    982e:	8d 01       	movw	r16, r26
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
    9830:	23 2b       	or	r18, r19
    9832:	24 2b       	or	r18, r20
    9834:	25 2b       	or	r18, r21
    9836:	79 f7       	brne	.-34     	; 0x9816 <Print::printNumber(unsigned long, unsigned char)+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    9838:	90 e0       	ldi	r25, 0x00	; 0
    983a:	80 e0       	ldi	r24, 0x00	; 0
write():
    983c:	10 97       	sbiw	r26, 0x00	; 0
    983e:	89 f0       	breq	.+34     	; 0x9862 <Print::printNumber(unsigned long, unsigned char)+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    9840:	fd 01       	movw	r30, r26
    9842:	01 90       	ld	r0, Z+
    9844:	00 20       	and	r0, r0
    9846:	e9 f7       	brne	.-6      	; 0x9842 <Print::printNumber(unsigned long, unsigned char)+0x6c>
    9848:	31 97       	sbiw	r30, 0x01	; 1
    984a:	af 01       	movw	r20, r30
    984c:	4a 1b       	sub	r20, r26
    984e:	5b 0b       	sbc	r21, r27
    9850:	d7 01       	movw	r26, r14
    9852:	ed 91       	ld	r30, X+
    9854:	fc 91       	ld	r31, X
    9856:	02 80       	ldd	r0, Z+2	; 0x02
    9858:	f3 81       	ldd	r31, Z+3	; 0x03
    985a:	e0 2d       	mov	r30, r0
    985c:	b8 01       	movw	r22, r16
    985e:	c7 01       	movw	r24, r14
    9860:	19 95       	eicall
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    9862:	a1 96       	adiw	r28, 0x21	; 33
    9864:	0f b6       	in	r0, 0x3f	; 63
    9866:	f8 94       	cli
    9868:	de bf       	out	0x3e, r29	; 62
    986a:	0f be       	out	0x3f, r0	; 63
    986c:	cd bf       	out	0x3d, r28	; 61
    986e:	df 91       	pop	r29
    9870:	cf 91       	pop	r28
    9872:	1f 91       	pop	r17
    9874:	0f 91       	pop	r16
    9876:	ff 90       	pop	r15
    9878:	ef 90       	pop	r14
    987a:	bf 90       	pop	r11
    987c:	af 90       	pop	r10
    987e:	9f 90       	pop	r9
    9880:	8f 90       	pop	r8
    9882:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    9884:	69 5c       	subi	r22, 0xC9	; 201
    9886:	d1 cf       	rjmp	.-94     	; 0x982a <Print::printNumber(unsigned long, unsigned char)+0x54>

00009888 <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:104
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    9888:	8f 92       	push	r8
    988a:	9f 92       	push	r9
    988c:	af 92       	push	r10
    988e:	bf 92       	push	r11
    9890:	cf 92       	push	r12
    9892:	df 92       	push	r13
    9894:	ef 92       	push	r14
    9896:	ff 92       	push	r15
    9898:	0f 93       	push	r16
    989a:	1f 93       	push	r17
    989c:	cf 93       	push	r28
    989e:	df 93       	push	r29
    98a0:	7c 01       	movw	r14, r24
    98a2:	eb 01       	movw	r28, r22
    98a4:	6c 01       	movw	r12, r24
    98a6:	82 e0       	ldi	r24, 0x02	; 2
    98a8:	c8 0e       	add	r12, r24
    98aa:	d1 1c       	adc	r13, r1
    98ac:	47 01       	movw	r8, r14
    98ae:	e5 e0       	ldi	r30, 0x05	; 5
    98b0:	8e 0e       	add	r8, r30
    98b2:	91 1c       	adc	r9, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:105
    size_t n = 0;
    98b4:	10 e0       	ldi	r17, 0x00	; 0
    98b6:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:108
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    98b8:	f6 01       	movw	r30, r12
    98ba:	41 91       	ld	r20, Z+
    98bc:	6f 01       	movw	r12, r30
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    98be:	50 e0       	ldi	r21, 0x00	; 0
    98c0:	70 e0       	ldi	r23, 0x00	; 0
    98c2:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    98c4:	2a e0       	ldi	r18, 0x0A	; 10
    98c6:	ce 01       	movw	r24, r28
    98c8:	0e 94 eb 4b 	call	0x97d6	; 0x97d6 <Print::printNumber(unsigned long, unsigned char)>
    98cc:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    98ce:	e8 81       	ld	r30, Y
    98d0:	f9 81       	ldd	r31, Y+1	; 0x01
    98d2:	01 90       	ld	r0, Z+
    98d4:	f0 81       	ld	r31, Z
    98d6:	e0 2d       	mov	r30, r0
    98d8:	6e e2       	ldi	r22, 0x2E	; 46
    98da:	ce 01       	movw	r24, r28
    98dc:	19 95       	eicall
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:109
        n += p.print('.');
    98de:	8a 0d       	add	r24, r10
    98e0:	9b 1d       	adc	r25, r11
    98e2:	08 0f       	add	r16, r24
    98e4:	19 1f       	adc	r17, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:106
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    98e6:	c8 14       	cp	r12, r8
    98e8:	d9 04       	cpc	r13, r9
    98ea:	31 f7       	brne	.-52     	; 0x98b8 <IPAddress::printTo(Print&) const+0x30>
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    98ec:	f7 01       	movw	r30, r14
    98ee:	45 81       	ldd	r20, Z+5	; 0x05
    98f0:	50 e0       	ldi	r21, 0x00	; 0
    98f2:	70 e0       	ldi	r23, 0x00	; 0
    98f4:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    98f6:	2a e0       	ldi	r18, 0x0A	; 10
    98f8:	ce 01       	movw	r24, r28
    98fa:	0e 94 eb 4b 	call	0x97d6	; 0x97d6 <Print::printNumber(unsigned long, unsigned char)>
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:113
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
    98fe:	80 0f       	add	r24, r16
    9900:	91 1f       	adc	r25, r17
    9902:	df 91       	pop	r29
    9904:	cf 91       	pop	r28
    9906:	1f 91       	pop	r17
    9908:	0f 91       	pop	r16
    990a:	ff 90       	pop	r15
    990c:	ef 90       	pop	r14
    990e:	df 90       	pop	r13
    9910:	cf 90       	pop	r12
    9912:	bf 90       	pop	r11
    9914:	af 90       	pop	r10
    9916:	9f 90       	pop	r9
    9918:	8f 90       	pop	r8
    991a:	08 95       	ret

0000991c <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>:
_Z35display_element_set_string_del_charjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1407
  }
}

void display_element_set_string_del_char(uint16_t args1, uint16_t idx, uint8_t args3)
{
  uint8_t len = strlen(dialog_set_string);
    991c:	85 ef       	ldi	r24, 0xF5	; 245
    991e:	99 e0       	ldi	r25, 0x09	; 9
    9920:	fc 01       	movw	r30, r24
    9922:	01 90       	ld	r0, Z+
    9924:	00 20       	and	r0, r0
    9926:	e9 f7       	brne	.-6      	; 0x9922 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x6>
    9928:	cf 01       	movw	r24, r30
    992a:	86 5f       	subi	r24, 0xF6	; 246
    992c:	99 40       	sbci	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1408
  if (len > 0)
    992e:	88 23       	and	r24, r24
    9930:	29 f0       	breq	.+10     	; 0x993c <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1409
    dialog_set_string[len - 1] = 0;
    9932:	99 27       	eor	r25, r25
    9934:	fc 01       	movw	r30, r24
    9936:	ec 50       	subi	r30, 0x0C	; 12
    9938:	f6 4f       	sbci	r31, 0xF6	; 246
    993a:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1410
}
    993c:	08 95       	ret

0000993e <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1397
  strcpy(str, dialog_set_string);
}

void display_element_set_string_add_char(char znak)
{
  uint8_t len = strlen(dialog_set_string);
    993e:	e5 ef       	ldi	r30, 0xF5	; 245
    9940:	f9 e0       	ldi	r31, 0x09	; 9
    9942:	01 90       	ld	r0, Z+
    9944:	00 20       	and	r0, r0
    9946:	e9 f7       	brne	.-6      	; 0x9942 <display_element_set_string_add_char(char)+0x4>
    9948:	e6 5f       	subi	r30, 0xF6	; 246
    994a:	f9 40       	sbci	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1398
  if (len  < dialog_set_string_max_length - 1)
    994c:	ff 27       	eor	r31, r31
    994e:	20 91 f4 09 	lds	r18, 0x09F4	; 0x8009f4 <dialog_set_string_max_length>
    9952:	21 50       	subi	r18, 0x01	; 1
    9954:	33 0b       	sbc	r19, r19
    9956:	e2 17       	cp	r30, r18
    9958:	f3 07       	cpc	r31, r19
    995a:	24 f4       	brge	.+8      	; 0x9964 <display_element_set_string_add_char(char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1400
  {
    dialog_set_string[len] = znak;
    995c:	eb 50       	subi	r30, 0x0B	; 11
    995e:	f6 4f       	sbci	r31, 0xF6	; 246
    9960:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1401
    dialog_set_string[len + 1] = 0;
    9962:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1403
  }
}
    9964:	08 95       	ret

00009966 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_alfajjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1551
   args3 ... index prvku
*/
void click_keyboard_alfa(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    9966:	90 91 fc 08 	lds	r25, 0x08FC	; 0x8008fc <__data_end>
    996a:	91 11       	cpse	r25, r1
    996c:	07 c0       	rjmp	.+14     	; 0x997c <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1552
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
    996e:	e4 2f       	mov	r30, r20
    9970:	f0 e0       	ldi	r31, 0x00	; 0
    9972:	e6 55       	subi	r30, 0x56	; 86
    9974:	f2 49       	sbci	r31, 0x92	; 146
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1556
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    9976:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1558
  ///
  display_element_set_string_add_char(znak);
    9978:	0c 94 9f 4c 	jmp	0x993e	; 0x993e <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1553
void click_keyboard_alfa(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    997c:	91 30       	cpi	r25, 0x01	; 1
    997e:	29 f4       	brne	.+10     	; 0x998a <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1554
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
    9980:	e4 2f       	mov	r30, r20
    9982:	f0 e0       	ldi	r31, 0x00	; 0
    9984:	e0 57       	subi	r30, 0x70	; 112
    9986:	f2 49       	sbci	r31, 0x92	; 146
    9988:	f6 cf       	rjmp	.-20     	; 0x9976 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1555
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    998a:	92 30       	cpi	r25, 0x02	; 2
    998c:	a9 f7       	brne	.-22     	; 0x9978 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1556
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    998e:	e4 2f       	mov	r30, r20
    9990:	f0 e0       	ldi	r31, 0x00	; 0
    9992:	ea 58       	subi	r30, 0x8A	; 138
    9994:	f2 49       	sbci	r31, 0x92	; 146
    9996:	ef cf       	rjmp	.-34     	; 0x9976 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>

00009998 <click_keyboard_number(unsigned int, unsigned int, unsigned char)>:
_Z21click_keyboard_numberjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1513
*/
void click_keyboard_number(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  znak = '0' + args3;
  if (args3 == 10) znak = '.';
    9998:	8e e2       	ldi	r24, 0x2E	; 46
    999a:	4a 30       	cpi	r20, 0x0A	; 10
    999c:	29 f0       	breq	.+10     	; 0x99a8 <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1512
   args3 ... index prvku
*/
void click_keyboard_number(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  znak = '0' + args3;
    999e:	80 e3       	ldi	r24, 0x30	; 48
    99a0:	84 0f       	add	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1514
  if (args3 == 10) znak = '.';
  if (args3 == 11) znak = ':';
    99a2:	4b 30       	cpi	r20, 0x0B	; 11
    99a4:	09 f4       	brne	.+2      	; 0x99a8 <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0x10>
    99a6:	8a e3       	ldi	r24, 0x3A	; 58
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1515
  display_element_set_string_add_char(znak);
    99a8:	0c 94 9f 4c 	jmp	0x993e	; 0x993e <display_element_set_string_add_char(char)>

000099ac <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    99ac:	0e 94 cf f1 	call	0x1e39e	; 0x1e39e <abort>

000099b0 <IPAddress::IPAddress(unsigned char const*)>:
_ZN9IPAddressC2EPKh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    99b0:	dc 01       	movw	r26, r24
    99b2:	82 ef       	ldi	r24, 0xF2	; 242
    99b4:	92 e0       	ldi	r25, 0x02	; 2
    99b6:	8d 93       	st	X+, r24
    99b8:	9d 93       	st	X+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    99ba:	84 e0       	ldi	r24, 0x04	; 4
    99bc:	fb 01       	movw	r30, r22
    99be:	01 90       	ld	r0, Z+
    99c0:	0d 92       	st	X+, r0
    99c2:	8a 95       	dec	r24
    99c4:	e1 f7       	brne	.-8      	; 0x99be <IPAddress::IPAddress(unsigned char const*)+0xe>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:44
}
    99c6:	08 95       	ret

000099c8 <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    99c8:	85 e6       	ldi	r24, 0x65	; 101
    99ca:	9d e0       	ldi	r25, 0x0D	; 13
    99cc:	0e 94 f6 aa 	call	0x155ec	; 0x155ec <HardwareSerial::available()>
    99d0:	21 e0       	ldi	r18, 0x01	; 1
    99d2:	89 2b       	or	r24, r25
    99d4:	09 f4       	brne	.+2      	; 0x99d8 <Serial0_available()+0x10>
    99d6:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    99d8:	82 2f       	mov	r24, r18
    99da:	08 95       	ret

000099dc <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
}

int EthernetClient::peek() {
    99dc:	0f 93       	push	r16
    99de:	1f 93       	push	r17
    99e0:	cf 93       	push	r28
    99e2:	df 93       	push	r29
    99e4:	1f 92       	push	r1
    99e6:	cd b7       	in	r28, 0x3d	; 61
    99e8:	de b7       	in	r29, 0x3e	; 62
    99ea:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    99ec:	dc 01       	movw	r26, r24
    99ee:	ed 91       	ld	r30, X+
    99f0:	fc 91       	ld	r31, X
    99f2:	00 84       	ldd	r0, Z+8	; 0x08
    99f4:	f1 85       	ldd	r31, Z+9	; 0x09
    99f6:	e0 2d       	mov	r30, r0
    99f8:	19 95       	eicall
    99fa:	89 2b       	or	r24, r25
    99fc:	91 f0       	breq	.+36     	; 0x9a22 <EthernetClient::peek()+0x46>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
    99fe:	21 e0       	ldi	r18, 0x01	; 1
    9a00:	41 e0       	ldi	r20, 0x01	; 1
    9a02:	50 e0       	ldi	r21, 0x00	; 0
    9a04:	be 01       	movw	r22, r28
    9a06:	6f 5f       	subi	r22, 0xFF	; 255
    9a08:	7f 4f       	sbci	r23, 0xFF	; 255
    9a0a:	f8 01       	movw	r30, r16
    9a0c:	84 85       	ldd	r24, Z+12	; 0x0c
    9a0e:	0e 94 9c cf 	call	0x19f38	; 0x19f38 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
    return -1;
  ::peek(_sock, &b);
  return b;
    9a12:	89 81       	ldd	r24, Y+1	; 0x01
    9a14:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
    9a16:	0f 90       	pop	r0
    9a18:	df 91       	pop	r29
    9a1a:	cf 91       	pop	r28
    9a1c:	1f 91       	pop	r17
    9a1e:	0f 91       	pop	r16
    9a20:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    9a22:	8f ef       	ldi	r24, 0xFF	; 255
    9a24:	9f ef       	ldi	r25, 0xFF	; 255
    9a26:	f7 cf       	rjmp	.-18     	; 0x9a16 <EthernetClient::peek()+0x3a>

00009a28 <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
    9a28:	cf 93       	push	r28
    9a2a:	df 93       	push	r29
    9a2c:	1f 92       	push	r1
    9a2e:	cd b7       	in	r28, 0x3d	; 61
    9a30:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    9a32:	fc 01       	movw	r30, r24
    9a34:	21 8d       	ldd	r18, Z+25	; 0x19
    9a36:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
    9a38:	8f ef       	ldi	r24, 0xFF	; 255
    9a3a:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    9a3c:	23 2b       	or	r18, r19
    9a3e:	59 f0       	breq	.+22     	; 0x9a56 <EthernetUDP::peek()+0x2e>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
    9a40:	21 e0       	ldi	r18, 0x01	; 1
    9a42:	41 e0       	ldi	r20, 0x01	; 1
    9a44:	50 e0       	ldi	r21, 0x00	; 0
    9a46:	be 01       	movw	r22, r28
    9a48:	6f 5f       	subi	r22, 0xFF	; 255
    9a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    9a4c:	84 85       	ldd	r24, Z+12	; 0x0c
    9a4e:	0e 94 9c cf 	call	0x19f38	; 0x19f38 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
    return -1;
  ::peek(_sock, &b);
  return b;
    9a52:	89 81       	ldd	r24, Y+1	; 0x01
    9a54:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
    9a56:	0f 90       	pop	r0
    9a58:	df 91       	pop	r29
    9a5a:	cf 91       	pop	r28
    9a5c:	08 95       	ret

00009a5e <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    9a5e:	fc 01       	movw	r30, r24
    9a60:	84 85       	ldd	r24, Z+12	; 0x0c
    9a62:	88 30       	cpi	r24, 0x08	; 8
    9a64:	11 f0       	breq	.+4      	; 0x9a6a <EthernetClient::available()+0xc>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
    9a66:	0c 94 04 d0 	jmp	0x1a008	; 0x1a008 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
    9a6a:	90 e0       	ldi	r25, 0x00	; 0
    9a6c:	80 e0       	ldi	r24, 0x00	; 0
    9a6e:	08 95       	ret

00009a70 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    9a70:	af 92       	push	r10
    9a72:	bf 92       	push	r11
    9a74:	cf 92       	push	r12
    9a76:	df 92       	push	r13
    9a78:	ff 92       	push	r15
    9a7a:	0f 93       	push	r16
    9a7c:	1f 93       	push	r17
    9a7e:	cf 93       	push	r28
    9a80:	df 93       	push	r29
    9a82:	8c 01       	movw	r16, r24
    9a84:	5b 01       	movw	r10, r22
    9a86:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    9a88:	fc 01       	movw	r30, r24
    9a8a:	c7 88       	ldd	r12, Z+23	; 0x17
    9a8c:	d0 8c       	ldd	r13, Z+24	; 0x18
    9a8e:	f4 84       	ldd	r15, Z+12	; 0x0c
bufferData():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    9a90:	8f 2d       	mov	r24, r15
    9a92:	0e 94 60 d0 	call	0x1a0c0	; 0x1a0c0 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
    9a96:	8c 17       	cp	r24, r28
    9a98:	9d 07       	cpc	r25, r29
    9a9a:	20 f4       	brcc	.+8      	; 0x9aa4 <EthernetUDP::write(unsigned char const*, unsigned int)+0x34>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    9a9c:	8f 2d       	mov	r24, r15
    9a9e:	0e 94 60 d0 	call	0x1a0c0	; 0x1a0c0 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
    9aa2:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    9aa4:	9e 01       	movw	r18, r28
    9aa6:	a5 01       	movw	r20, r10
    9aa8:	b6 01       	movw	r22, r12
    9aaa:	8f 2d       	mov	r24, r15
    9aac:	0e 94 20 d0 	call	0x1a040	; 0x1a040 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
    9ab0:	f8 01       	movw	r30, r16
    9ab2:	87 89       	ldd	r24, Z+23	; 0x17
    9ab4:	90 8d       	ldd	r25, Z+24	; 0x18
    9ab6:	8c 0f       	add	r24, r28
    9ab8:	9d 1f       	adc	r25, r29
    9aba:	90 8f       	std	Z+24, r25	; 0x18
    9abc:	87 8b       	std	Z+23, r24	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
    9abe:	ce 01       	movw	r24, r28
    9ac0:	df 91       	pop	r29
    9ac2:	cf 91       	pop	r28
    9ac4:	1f 91       	pop	r17
    9ac6:	0f 91       	pop	r16
    9ac8:	ff 90       	pop	r15
    9aca:	df 90       	pop	r13
    9acc:	cf 90       	pop	r12
    9ace:	bf 90       	pop	r11
    9ad0:	af 90       	pop	r10
    9ad2:	08 95       	ret

00009ad4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.41():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:294
  template <typename TStringRef>
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    9ad4:	0f 93       	push	r16
    9ad6:	1f 93       	push	r17
    9ad8:	cf 93       	push	r28
    9ada:	df 93       	push	r29
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
    if (!_data) return 0;
    9adc:	00 97       	sbiw	r24, 0x00	; 0
    9ade:	01 f1       	breq	.+64     	; 0x9b20 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x4c>
    9ae0:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:296
    Internals::Slot* slot = _data->head;
    9ae2:	fc 01       	movw	r30, r24
    9ae4:	c0 81       	ld	r28, Z
    9ae6:	d1 81       	ldd	r29, Z+1	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:297
    while (slot) {
    9ae8:	20 97       	sbiw	r28, 0x00	; 0
    9aea:	d1 f0       	breq	.+52     	; 0x9b20 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x4c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:298
      if (Internals::makeString(key).equals(slot->key)) break;
    9aec:	6a 85       	ldd	r22, Y+10	; 0x0a
    9aee:	7b 85       	ldd	r23, Y+11	; 0x0b
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:16
 public:
  ZeroTerminatedRamString(const char* str) : _str(str) {}

  bool equals(const char* expected) const {
    const char* actual = reinterpret_cast<const char*>(_str);
    if (!actual || !expected) return actual == expected;
    9af0:	01 15       	cp	r16, r1
    9af2:	11 05       	cpc	r17, r1
    9af4:	19 f0       	breq	.+6      	; 0x9afc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x28>
    9af6:	61 15       	cp	r22, r1
    9af8:	71 05       	cpc	r23, r1
    9afa:	49 f4       	brne	.+18     	; 0x9b0e <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x3a>
    9afc:	06 17       	cp	r16, r22
    9afe:	17 07       	cpc	r17, r23
    9b00:	59 f4       	brne	.+22     	; 0x9b18 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.41():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:302
      slot = slot->next;
    }
    return slot;
  }
    9b02:	ce 01       	movw	r24, r28
    9b04:	df 91       	pop	r29
    9b06:	cf 91       	pop	r28
    9b08:	1f 91       	pop	r17
    9b0a:	0f 91       	pop	r16
    9b0c:	08 95       	ret
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:17
    return strcmp(actual, expected) == 0;
    9b0e:	c8 01       	movw	r24, r16
    9b10:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
    9b14:	89 2b       	or	r24, r25
    9b16:	a9 f3       	breq	.-22     	; 0x9b02 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.41():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:299
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    Internals::Slot* slot = _data->head;
    while (slot) {
      if (Internals::makeString(key).equals(slot->key)) break;
      slot = slot->next;
    9b18:	0e 80       	ldd	r0, Y+6	; 0x06
    9b1a:	df 81       	ldd	r29, Y+7	; 0x07
    9b1c:	c0 2d       	mov	r28, r0
    9b1e:	e4 cf       	rjmp	.-56     	; 0x9ae8 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x14>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    9b20:	d0 e0       	ldi	r29, 0x00	; 0
    9b22:	c0 e0       	ldi	r28, 0x00	; 0
    9b24:	ee cf       	rjmp	.-36     	; 0x9b02 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x2e>

00009b26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    9b26:	4f 92       	push	r4
    9b28:	5f 92       	push	r5
    9b2a:	6f 92       	push	r6
    9b2c:	7f 92       	push	r7
    9b2e:	8f 92       	push	r8
    9b30:	9f 92       	push	r9
    9b32:	af 92       	push	r10
    9b34:	bf 92       	push	r11
    9b36:	df 92       	push	r13
    9b38:	ef 92       	push	r14
    9b3a:	ff 92       	push	r15
    9b3c:	0f 93       	push	r16
    9b3e:	1f 93       	push	r17
    9b40:	cf 93       	push	r28
    9b42:	df 93       	push	r29
    9b44:	cd b7       	in	r28, 0x3d	; 61
    9b46:	de b7       	in	r29, 0x3e	; 62
    9b48:	c4 54       	subi	r28, 0x44	; 68
    9b4a:	d1 09       	sbc	r29, r1
    9b4c:	0f b6       	in	r0, 0x3f	; 63
    9b4e:	f8 94       	cli
    9b50:	de bf       	out	0x3e, r29	; 62
    9b52:	0f be       	out	0x3f, r0	; 63
    9b54:	cd bf       	out	0x3d, r28	; 61
    9b56:	8c 01       	movw	r16, r24
    9b58:	4a 01       	movw	r8, r20
    9b5a:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    9b5c:	0e 94 64 46 	call	0x8cc8	; 0x8cc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    9b60:	00 97       	sbiw	r24, 0x00	; 0
    9b62:	09 f0       	breq	.+2      	; 0x9b66 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40>
    9b64:	b0 c0       	rjmp	.+352    	; 0x9cc6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    9b66:	c8 01       	movw	r24, r16
    9b68:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9b6c:	75 01       	movw	r14, r10
    9b6e:	8b 35       	cpi	r24, 0x5B	; 91
    9b70:	49 f1       	breq	.+82     	; 0x9bc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x9e>
    9b72:	8b 37       	cpi	r24, 0x7B	; 123
    9b74:	09 f4       	brne	.+2      	; 0x9b78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x52>
    9b76:	d2 c0       	rjmp	.+420    	; 0x9d1c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1f6>
parseValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    9b78:	c8 01       	movw	r24, r16
    9b7a:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    9b7e:	87 32       	cpi	r24, 0x27	; 39
    9b80:	09 f4       	brne	.+2      	; 0x9b84 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e>
    9b82:	eb c1       	rjmp	.+982    	; 0x9f5a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
    9b84:	82 32       	cpi	r24, 0x22	; 34
    9b86:	09 f4       	brne	.+2      	; 0x9b8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64>
    9b88:	e8 c1       	rjmp	.+976    	; 0x9f5a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    9b8a:	c8 01       	movw	r24, r16
    9b8c:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9b90:	b8 2e       	mov	r11, r24
    9b92:	ce 01       	movw	r24, r28
    9b94:	01 96       	adiw	r24, 0x01	; 1
    9b96:	4c 01       	movw	r8, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    9b98:	d1 2c       	mov	r13, r1
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    9b9a:	8b 2d       	mov	r24, r11
    9b9c:	0e 94 e5 45 	call	0x8bca	; 0x8bca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    9ba0:	88 23       	and	r24, r24
    9ba2:	09 f4       	brne	.+2      	; 0x9ba6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x80>
    9ba4:	f5 c1       	rjmp	.+1002   	; 0x9f90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
    9ba6:	bf e3       	ldi	r27, 0x3F	; 63
    9ba8:	db 16       	cp	r13, r27
    9baa:	09 f4       	brne	.+2      	; 0x9bae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    9bac:	f1 c1       	rjmp	.+994    	; 0x9f90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9bae:	f8 01       	movw	r30, r16
    9bb0:	10 86       	std	Z+8, r1	; 0x08
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    9bb2:	d3 94       	inc	r13
    9bb4:	d4 01       	movw	r26, r8
    9bb6:	bd 92       	st	X+, r11
    9bb8:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    9bba:	c8 01       	movw	r24, r16
    9bbc:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9bc0:	b8 2e       	mov	r11, r24
    9bc2:	eb cf       	rjmp	.-42     	; 0x9b9a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74>
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    9bc4:	d8 01       	movw	r26, r16
    9bc6:	16 96       	adiw	r26, 0x06	; 6
    9bc8:	8c 91       	ld	r24, X
    9bca:	88 23       	and	r24, r24
    9bcc:	09 f4       	brne	.+2      	; 0x9bd0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xaa>
    9bce:	c1 c1       	rjmp	.+898    	; 0x9f52 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    9bd0:	a1 14       	cp	r10, r1
    9bd2:	b1 04       	cpc	r11, r1
    9bd4:	09 f4       	brne	.+2      	; 0x9bd8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
    9bd6:	2d c1       	rjmp	.+602    	; 0x9e32 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    9bd8:	88 e0       	ldi	r24, 0x08	; 8
    9bda:	90 e0       	ldi	r25, 0x00	; 0
    9bdc:	f5 01       	movw	r30, r10
    9bde:	91 83       	std	Z+1, r25	; 0x01
    9be0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    9be2:	13 82       	std	Z+3, r1	; 0x03
    9be4:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    9be6:	15 82       	std	Z+5, r1	; 0x05
    9be8:	14 82       	std	Z+4, r1	; 0x04
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    9bea:	c8 01       	movw	r24, r16
    9bec:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9bf0:	8b 35       	cpi	r24, 0x5B	; 91
    9bf2:	09 f0       	breq	.+2      	; 0x9bf6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xd0>
    9bf4:	ef c0       	rjmp	.+478    	; 0x9dd4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9bf6:	d8 01       	movw	r26, r16
    9bf8:	18 96       	adiw	r26, 0x08	; 8
    9bfa:	1c 92       	st	X, r1
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    9bfc:	c8 01       	movw	r24, r16
    9bfe:	0e 94 64 46 	call	0x8cc8	; 0x8cc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    9c02:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    9c04:	89 2b       	or	r24, r25
    9c06:	09 f0       	breq	.+2      	; 0x9c0a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xe4>
    9c08:	5d c0       	rjmp	.+186    	; 0x9cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    9c0a:	c8 01       	movw	r24, r16
    9c0c:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9c10:	8d 35       	cpi	r24, 0x5D	; 93
    9c12:	09 f4       	brne	.+2      	; 0x9c16 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf0>
    9c14:	55 c0       	rjmp	.+170    	; 0x9cc0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19a>
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
  }

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    9c16:	8c e0       	ldi	r24, 0x0C	; 12
    9c18:	d8 2e       	mov	r13, r24
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    9c1a:	d4 01       	movw	r26, r8
    9c1c:	ed 91       	ld	r30, X+
    9c1e:	fc 91       	ld	r31, X
    9c20:	01 90       	ld	r0, Z+
    9c22:	f0 81       	ld	r31, Z
    9c24:	e0 2d       	mov	r30, r0
    9c26:	6c e0       	ldi	r22, 0x0C	; 12
    9c28:	70 e0       	ldi	r23, 0x00	; 0
    9c2a:	c4 01       	movw	r24, r8
    9c2c:	19 95       	eicall
    9c2e:	fc 01       	movw	r30, r24
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
    9c30:	00 97       	sbiw	r24, 0x00	; 0
    9c32:	09 f4       	brne	.+2      	; 0x9c36 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x110>
    9c34:	64 c0       	rjmp	.+200    	; 0x9cfe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1d8>
    9c36:	dc 01       	movw	r26, r24
    9c38:	2d 2d       	mov	r18, r13
    9c3a:	1d 92       	st	X+, r1
    9c3c:	2a 95       	dec	r18
    9c3e:	e9 f7       	brne	.-6      	; 0x9c3a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x114>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    9c40:	11 82       	std	Z+1, r1	; 0x01
    9c42:	10 82       	st	Z, r1
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:62
    if (!slot) return JsonVariant();

    slot->next = 0;

    if (_data->tail) {
    9c44:	d7 01       	movw	r26, r14
    9c46:	14 96       	adiw	r26, 0x04	; 4
    9c48:	8d 91       	ld	r24, X+
    9c4a:	9c 91       	ld	r25, X
    9c4c:	15 97       	sbiw	r26, 0x05	; 5
    9c4e:	00 97       	sbiw	r24, 0x00	; 0
    9c50:	09 f4       	brne	.+2      	; 0x9c54 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x12e>
    9c52:	50 c0       	rjmp	.+160    	; 0x9cf4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:63
      slot->prev = _data->tail;
    9c54:	91 87       	std	Z+9, r25	; 0x09
    9c56:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:64
      _data->tail->next = slot;
    9c58:	14 96       	adiw	r26, 0x04	; 4
    9c5a:	8d 91       	ld	r24, X+
    9c5c:	9c 91       	ld	r25, X
    9c5e:	dc 01       	movw	r26, r24
    9c60:	17 96       	adiw	r26, 0x07	; 7
    9c62:	fc 93       	st	X, r31
    9c64:	ee 93       	st	-X, r30
    9c66:	16 97       	sbiw	r26, 0x06	; 6
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:65
      _data->tail = slot;
    9c68:	d7 01       	movw	r26, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:69
    } else {
      slot->prev = 0;
      _data->head = slot;
      _data->tail = slot;
    9c6a:	15 96       	adiw	r26, 0x05	; 5
    9c6c:	fc 93       	st	X, r31
    9c6e:	ee 93       	st	-X, r30
    9c70:	14 97       	sbiw	r26, 0x04	; 4
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:79
  return JsonArray(_memoryPool, _data->toArray());
    9c72:	98 2d       	mov	r25, r8
    9c74:	89 2d       	mov	r24, r9
    9c76:	49 2e       	mov	r4, r25
    9c78:	58 2e       	mov	r5, r24
    9c7a:	3f 01       	movw	r6, r30
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    9c7c:	ef 2b       	or	r30, r31
    9c7e:	09 f4       	brne	.+2      	; 0x9c82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x15c>
    9c80:	d8 c0       	rjmp	.+432    	; 0x9e32 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    9c82:	f8 01       	movw	r30, r16
    9c84:	86 81       	ldd	r24, Z+6	; 0x06
    9c86:	81 50       	subi	r24, 0x01	; 1
    9c88:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    9c8a:	b3 01       	movw	r22, r6
    9c8c:	a2 01       	movw	r20, r4
    9c8e:	c8 01       	movw	r24, r16
    9c90:	0e 94 93 4d 	call	0x9b26	; 0x9b26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    9c94:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    9c96:	d8 01       	movw	r26, r16
    9c98:	16 96       	adiw	r26, 0x06	; 6
    9c9a:	8c 91       	ld	r24, X
    9c9c:	16 97       	sbiw	r26, 0x06	; 6
    9c9e:	8f 5f       	subi	r24, 0xFF	; 255
    9ca0:	16 96       	adiw	r26, 0x06	; 6
    9ca2:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    9ca4:	a1 14       	cp	r10, r1
    9ca6:	b1 04       	cpc	r11, r1
    9ca8:	69 f4       	brne	.+26     	; 0x9cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    9caa:	c8 01       	movw	r24, r16
    9cac:	0e 94 64 46 	call	0x8cc8	; 0x8cc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    9cb0:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    9cb2:	89 2b       	or	r24, r25
    9cb4:	39 f4       	brne	.+14     	; 0x9cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    9cb6:	c8 01       	movw	r24, r16
    9cb8:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9cbc:	8d 35       	cpi	r24, 0x5D	; 93
    9cbe:	21 f5       	brne	.+72     	; 0x9d08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1e2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9cc0:	f8 01       	movw	r30, r16
    9cc2:	10 86       	std	Z+8, r1	; 0x08
    9cc4:	c5 01       	movw	r24, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    9cc6:	cc 5b       	subi	r28, 0xBC	; 188
    9cc8:	df 4f       	sbci	r29, 0xFF	; 255
    9cca:	0f b6       	in	r0, 0x3f	; 63
    9ccc:	f8 94       	cli
    9cce:	de bf       	out	0x3e, r29	; 62
    9cd0:	0f be       	out	0x3f, r0	; 63
    9cd2:	cd bf       	out	0x3d, r28	; 61
    9cd4:	df 91       	pop	r29
    9cd6:	cf 91       	pop	r28
    9cd8:	1f 91       	pop	r17
    9cda:	0f 91       	pop	r16
    9cdc:	ff 90       	pop	r15
    9cde:	ef 90       	pop	r14
    9ce0:	df 90       	pop	r13
    9ce2:	bf 90       	pop	r11
    9ce4:	af 90       	pop	r10
    9ce6:	9f 90       	pop	r9
    9ce8:	8f 90       	pop	r8
    9cea:	7f 90       	pop	r7
    9cec:	6f 90       	pop	r6
    9cee:	5f 90       	pop	r5
    9cf0:	4f 90       	pop	r4
    9cf2:	08 95       	ret
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:68
      slot->prev = _data->tail;
      _data->tail->next = slot;
      _data->tail = slot;
    } else {
      slot->prev = 0;
      _data->head = slot;
    9cf4:	13 96       	adiw	r26, 0x03	; 3
    9cf6:	fc 93       	st	X, r31
    9cf8:	ee 93       	st	-X, r30
    9cfa:	12 97       	sbiw	r26, 0x02	; 2
    9cfc:	b6 cf       	rjmp	.-148    	; 0x9c6a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x144>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:58

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    if (!slot) return JsonVariant();
    9cfe:	f0 e0       	ldi	r31, 0x00	; 0
    9d00:	e0 e0       	ldi	r30, 0x00	; 0
    9d02:	90 e0       	ldi	r25, 0x00	; 0
    9d04:	80 e0       	ldi	r24, 0x00	; 0
    9d06:	b7 cf       	rjmp	.-146    	; 0x9c76 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x150>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    9d08:	c8 01       	movw	r24, r16
    9d0a:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9d0e:	8c 32       	cpi	r24, 0x2C	; 44
    9d10:	09 f0       	breq	.+2      	; 0x9d14 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ee>
    9d12:	60 c0       	rjmp	.+192    	; 0x9dd4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9d14:	d8 01       	movw	r26, r16
    9d16:	18 96       	adiw	r26, 0x08	; 8
    9d18:	1c 92       	st	X, r1
    9d1a:	7f cf       	rjmp	.-258    	; 0x9c1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf4>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    9d1c:	f8 01       	movw	r30, r16
    9d1e:	86 81       	ldd	r24, Z+6	; 0x06
    9d20:	88 23       	and	r24, r24
    9d22:	09 f4       	brne	.+2      	; 0x9d26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x200>
    9d24:	16 c1       	rjmp	.+556    	; 0x9f52 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    9d26:	a1 14       	cp	r10, r1
    9d28:	b1 04       	cpc	r11, r1
    9d2a:	09 f4       	brne	.+2      	; 0x9d2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x208>
    9d2c:	82 c0       	rjmp	.+260    	; 0x9e32 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
    9d2e:	34 01       	movw	r6, r8
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    9d30:	89 e0       	ldi	r24, 0x09	; 9
    9d32:	90 e0       	ldi	r25, 0x00	; 0
    9d34:	d5 01       	movw	r26, r10
    9d36:	11 96       	adiw	r26, 0x01	; 1
    9d38:	9c 93       	st	X, r25
    9d3a:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    9d3c:	13 96       	adiw	r26, 0x03	; 3
    9d3e:	1c 92       	st	X, r1
    9d40:	1e 92       	st	-X, r1
    9d42:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    9d44:	15 96       	adiw	r26, 0x05	; 5
    9d46:	1c 92       	st	X, r1
    9d48:	1e 92       	st	-X, r1
    9d4a:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    9d4c:	45 01       	movw	r8, r10
    9d4e:	b2 e0       	ldi	r27, 0x02	; 2
    9d50:	8b 0e       	add	r8, r27
    9d52:	91 1c       	adc	r9, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    9d54:	c8 01       	movw	r24, r16
    9d56:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9d5a:	8b 37       	cpi	r24, 0x7B	; 123
    9d5c:	d9 f5       	brne	.+118    	; 0x9dd4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9d5e:	f8 01       	movw	r30, r16
    9d60:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    9d62:	c8 01       	movw	r24, r16
    9d64:	0e 94 64 46 	call	0x8cc8	; 0x8cc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    9d68:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    9d6a:	89 2b       	or	r24, r25
    9d6c:	09 f0       	breq	.+2      	; 0x9d70 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x24a>
    9d6e:	aa cf       	rjmp	.-172    	; 0x9cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    9d70:	c8 01       	movw	r24, r16
    9d72:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9d76:	8d 37       	cpi	r24, 0x7D	; 125
    9d78:	09 f4       	brne	.+2      	; 0x9d7c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x256>
    9d7a:	9c c0       	rjmp	.+312    	; 0x9eb4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    9d7c:	bc e0       	ldi	r27, 0x0C	; 12
    9d7e:	5b 2e       	mov	r5, r27
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
    9d80:	c8 01       	movw	r24, r16
    9d82:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    9d86:	87 32       	cpi	r24, 0x27	; 39
    9d88:	79 f0       	breq	.+30     	; 0x9da8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
    9d8a:	82 32       	cpi	r24, 0x22	; 34
    9d8c:	69 f0       	breq	.+26     	; 0x9da8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    9d8e:	f8 01       	movw	r30, r16
    9d90:	a4 80       	ldd	r10, Z+4	; 0x04
    9d92:	b5 80       	ldd	r11, Z+5	; 0x05
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    9d94:	c8 01       	movw	r24, r16
    9d96:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9d9a:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    9d9c:	81 11       	cpse	r24, r1
    9d9e:	1e c0       	rjmp	.+60     	; 0x9ddc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2b6>
    9da0:	aa 24       	eor	r10, r10
    9da2:	a3 94       	inc	r10
    9da4:	b1 2c       	mov	r11, r1
    9da6:	8e cf       	rjmp	.-228    	; 0x9cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    9da8:	be 01       	movw	r22, r28
    9daa:	6f 5f       	subi	r22, 0xFF	; 255
    9dac:	7f 4f       	sbci	r23, 0xFF	; 255
    9dae:	c8 01       	movw	r24, r16
    9db0:	0e 94 0d 46 	call	0x8c1a	; 0x8c1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    9db4:	5c 01       	movw	r10, r24
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
      if (err) return err;
    9db6:	89 2b       	or	r24, r25
    9db8:	09 f0       	breq	.+2      	; 0x9dbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
    9dba:	84 cf       	rjmp	.-248    	; 0x9cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    9dbc:	c8 01       	movw	r24, r16
    9dbe:	0e 94 64 46 	call	0x8cc8	; 0x8cc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    9dc2:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    9dc4:	89 2b       	or	r24, r25
    9dc6:	09 f0       	breq	.+2      	; 0x9dca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2a4>
    9dc8:	7d cf       	rjmp	.-262    	; 0x9cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    9dca:	c8 01       	movw	r24, r16
    9dcc:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9dd0:	8a 33       	cpi	r24, 0x3A	; 58
    9dd2:	99 f1       	breq	.+102    	; 0x9e3a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x314>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:113

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;
    9dd4:	72 e0       	ldi	r23, 0x02	; 2
    9dd6:	a7 2e       	mov	r10, r23
    9dd8:	b1 2c       	mov	r11, r1
    9dda:	74 cf       	rjmp	.-280    	; 0x9cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    9ddc:	0e 94 e5 45 	call	0x8bca	; 0x8bca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    9de0:	88 23       	and	r24, r24
    9de2:	c1 f3       	breq	.-16     	; 0x9dd4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9de4:	d8 01       	movw	r26, r16
    9de6:	18 96       	adiw	r26, 0x08	; 8
    9de8:	1c 92       	st	X, r1
    9dea:	18 97       	sbiw	r26, 0x08	; 8
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    9dec:	14 96       	adiw	r26, 0x04	; 4
    9dee:	ed 91       	ld	r30, X+
    9df0:	fc 91       	ld	r31, X
    9df2:	15 97       	sbiw	r26, 0x05	; 5
    9df4:	cf 01       	movw	r24, r30
    9df6:	01 96       	adiw	r24, 0x01	; 1
    9df8:	15 96       	adiw	r26, 0x05	; 5
    9dfa:	9c 93       	st	X, r25
    9dfc:	8e 93       	st	-X, r24
    9dfe:	14 97       	sbiw	r26, 0x04	; 4
    9e00:	d0 82       	st	Z, r13
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    9e02:	c8 01       	movw	r24, r16
    9e04:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9e08:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    9e0a:	0e 94 e5 45 	call	0x8bca	; 0x8bca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    9e0e:	81 11       	cpse	r24, r1
    9e10:	e9 cf       	rjmp	.-46     	; 0x9de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2be>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    9e12:	d8 01       	movw	r26, r16
    9e14:	14 96       	adiw	r26, 0x04	; 4
    9e16:	ed 91       	ld	r30, X+
    9e18:	fc 91       	ld	r31, X
    9e1a:	15 97       	sbiw	r26, 0x05	; 5
    9e1c:	cf 01       	movw	r24, r30
    9e1e:	01 96       	adiw	r24, 0x01	; 1
    9e20:	15 96       	adiw	r26, 0x05	; 5
    9e22:	9c 93       	st	X, r25
    9e24:	8e 93       	st	-X, r24
    9e26:	14 97       	sbiw	r26, 0x04	; 4
    9e28:	10 82       	st	Z, r1
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    9e2a:	ba 82       	std	Y+2, r11	; 0x02
    9e2c:	a9 82       	std	Y+1, r10	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    if (*result == NULL) return DeserializationError::NoMemory;
    9e2e:	ab 28       	or	r10, r11
    9e30:	29 f6       	brne	.-118    	; 0x9dbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    9e32:	e3 e0       	ldi	r30, 0x03	; 3
    9e34:	ae 2e       	mov	r10, r30
    9e36:	b1 2c       	mov	r11, r1
    9e38:	45 cf       	rjmp	.-374    	; 0x9cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9e3a:	f8 01       	movw	r30, r16
    9e3c:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    9e3e:	a9 80       	ldd	r10, Y+1	; 0x01
    9e40:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    9e42:	a1 14       	cp	r10, r1
    9e44:	b1 04       	cpc	r11, r1
    9e46:	d1 f5       	brne	.+116    	; 0x9ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x396>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    9e48:	90 e0       	ldi	r25, 0x00	; 0
    9e4a:	80 e0       	ldi	r24, 0x00	; 0
    9e4c:	30 e0       	ldi	r19, 0x00	; 0
    9e4e:	20 e0       	ldi	r18, 0x00	; 0
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    9e50:	22 96       	adiw	r28, 0x02	; 2
    9e52:	3f af       	std	Y+63, r19	; 0x3f
    9e54:	22 97       	sbiw	r28, 0x02	; 2
    9e56:	23 96       	adiw	r28, 0x03	; 3
    9e58:	2f af       	std	Y+63, r18	; 0x3f
    9e5a:	23 97       	sbiw	r28, 0x03	; 3
    9e5c:	25 96       	adiw	r28, 0x05	; 5
    9e5e:	9f af       	std	Y+63, r25	; 0x3f
    9e60:	8e af       	std	Y+62, r24	; 0x3e
    9e62:	25 97       	sbiw	r28, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    9e64:	89 2b       	or	r24, r25
    9e66:	29 f3       	breq	.-54     	; 0x9e32 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    9e68:	d8 01       	movw	r26, r16
    9e6a:	16 96       	adiw	r26, 0x06	; 6
    9e6c:	8c 91       	ld	r24, X
    9e6e:	16 97       	sbiw	r26, 0x06	; 6
    9e70:	81 50       	subi	r24, 0x01	; 1
    9e72:	16 96       	adiw	r26, 0x06	; 6
    9e74:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    9e76:	25 96       	adiw	r28, 0x05	; 5
    9e78:	4c ad       	ldd	r20, Y+60	; 0x3c
    9e7a:	5d ad       	ldd	r21, Y+61	; 0x3d
    9e7c:	6e ad       	ldd	r22, Y+62	; 0x3e
    9e7e:	7f ad       	ldd	r23, Y+63	; 0x3f
    9e80:	25 97       	sbiw	r28, 0x05	; 5
    9e82:	c8 01       	movw	r24, r16
    9e84:	0e 94 93 4d 	call	0x9b26	; 0x9b26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    9e88:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    9e8a:	f8 01       	movw	r30, r16
    9e8c:	86 81       	ldd	r24, Z+6	; 0x06
    9e8e:	8f 5f       	subi	r24, 0xFF	; 255
    9e90:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    9e92:	a1 14       	cp	r10, r1
    9e94:	b1 04       	cpc	r11, r1
    9e96:	09 f0       	breq	.+2      	; 0x9e9a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x374>
    9e98:	15 cf       	rjmp	.-470    	; 0x9cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    9e9a:	c8 01       	movw	r24, r16
    9e9c:	0e 94 64 46 	call	0x8cc8	; 0x8cc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    9ea0:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    9ea2:	89 2b       	or	r24, r25
    9ea4:	09 f0       	breq	.+2      	; 0x9ea8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x382>
    9ea6:	0e cf       	rjmp	.-484    	; 0x9cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    9ea8:	c8 01       	movw	r24, r16
    9eaa:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9eae:	8d 37       	cpi	r24, 0x7D	; 125
    9eb0:	09 f0       	breq	.+2      	; 0x9eb4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
    9eb2:	3f c0       	rjmp	.+126    	; 0x9f32 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9eb4:	d8 01       	movw	r26, r16
    9eb6:	18 96       	adiw	r26, 0x08	; 8
    9eb8:	1c 92       	st	X, r1
    9eba:	04 cf       	rjmp	.-504    	; 0x9cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    9ebc:	b5 01       	movw	r22, r10
    9ebe:	c4 01       	movw	r24, r8
    9ec0:	0e 94 6a 4d 	call	0x9ad4	; 0x9ad4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    9ec4:	00 97       	sbiw	r24, 0x00	; 0
    9ec6:	49 f5       	brne	.+82     	; 0x9f1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3f4>
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
    9ec8:	d3 01       	movw	r26, r6
    9eca:	ed 91       	ld	r30, X+
    9ecc:	fc 91       	ld	r31, X
    9ece:	01 90       	ld	r0, Z+
    9ed0:	f0 81       	ld	r31, Z
    9ed2:	e0 2d       	mov	r30, r0
    9ed4:	6c e0       	ldi	r22, 0x0C	; 12
    9ed6:	70 e0       	ldi	r23, 0x00	; 0
    9ed8:	c3 01       	movw	r24, r6
    9eda:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    9edc:	00 97       	sbiw	r24, 0x00	; 0
    9ede:	09 f4       	brne	.+2      	; 0x9ee2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3bc>
    9ee0:	b3 cf       	rjmp	.-154    	; 0x9e48 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x322>
    9ee2:	fc 01       	movw	r30, r24
    9ee4:	25 2d       	mov	r18, r5
    9ee6:	11 92       	st	Z+, r1
    9ee8:	2a 95       	dec	r18
    9eea:	e9 f7       	brne	.-6      	; 0x9ee6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3c0>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    9eec:	dc 01       	movw	r26, r24
    9eee:	1d 92       	st	X+, r1
    9ef0:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    9ef2:	d7 01       	movw	r26, r14
    9ef4:	14 96       	adiw	r26, 0x04	; 4
    9ef6:	ed 91       	ld	r30, X+
    9ef8:	fc 91       	ld	r31, X
    9efa:	15 97       	sbiw	r26, 0x05	; 5
    9efc:	30 97       	sbiw	r30, 0x00	; 0
    9efe:	81 f0       	breq	.+32     	; 0x9f20 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3fa>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    9f00:	dc 01       	movw	r26, r24
    9f02:	19 96       	adiw	r26, 0x09	; 9
    9f04:	fc 93       	st	X, r31
    9f06:	ee 93       	st	-X, r30
    9f08:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    9f0a:	97 83       	std	Z+7, r25	; 0x07
    9f0c:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    9f0e:	f7 01       	movw	r30, r14
    9f10:	95 83       	std	Z+5, r25	; 0x05
    9f12:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    9f14:	fc 01       	movw	r30, r24
    9f16:	b3 86       	std	Z+11, r11	; 0x0b
    9f18:	a2 86       	std	Z+10, r10	; 0x0a
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    9f1a:	36 2d       	mov	r19, r6
    9f1c:	27 2d       	mov	r18, r7
    9f1e:	98 cf       	rjmp	.-208    	; 0x9e50 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x32a>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    9f20:	13 96       	adiw	r26, 0x03	; 3
    9f22:	9c 93       	st	X, r25
    9f24:	8e 93       	st	-X, r24
    9f26:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    9f28:	15 96       	adiw	r26, 0x05	; 5
    9f2a:	9c 93       	st	X, r25
    9f2c:	8e 93       	st	-X, r24
    9f2e:	14 97       	sbiw	r26, 0x04	; 4
    9f30:	f1 cf       	rjmp	.-30     	; 0x9f14 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    9f32:	c8 01       	movw	r24, r16
    9f34:	0e 94 fd 45 	call	0x8bfa	; 0x8bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9f38:	8c 32       	cpi	r24, 0x2C	; 44
    9f3a:	09 f0       	breq	.+2      	; 0x9f3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x418>
    9f3c:	4b cf       	rjmp	.-362    	; 0x9dd4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9f3e:	f8 01       	movw	r30, r16
    9f40:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    9f42:	c8 01       	movw	r24, r16
    9f44:	0e 94 64 46 	call	0x8cc8	; 0x8cc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    9f48:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    9f4a:	89 2b       	or	r24, r25
    9f4c:	09 f4       	brne	.+2      	; 0x9f50 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42a>
    9f4e:	18 cf       	rjmp	.-464    	; 0x9d80 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x25a>
    9f50:	b9 ce       	rjmp	.-654    	; 0x9cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    9f52:	f5 e0       	ldi	r31, 0x05	; 5
    9f54:	af 2e       	mov	r10, r31
    9f56:	b1 2c       	mov	r11, r1
    9f58:	b5 ce       	rjmp	.-662    	; 0x9cc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.49():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    9f5a:	be 01       	movw	r22, r28
    9f5c:	6f 5f       	subi	r22, 0xFF	; 255
    9f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    9f60:	c8 01       	movw	r24, r16
    9f62:	0e 94 0d 46 	call	0x8c1a	; 0x8c1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    9f66:	00 97       	sbiw	r24, 0x00	; 0
    9f68:	09 f0       	breq	.+2      	; 0x9f6c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x446>
    9f6a:	ad ce       	rjmp	.-678    	; 0x9cc6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    9f6c:	e1 14       	cp	r14, r1
    9f6e:	f1 04       	cpc	r15, r1
    9f70:	61 f0       	breq	.+24     	; 0x9f8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.49():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    9f72:	89 81       	ldd	r24, Y+1	; 0x01
    9f74:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    9f76:	23 e0       	ldi	r18, 0x03	; 3
    9f78:	30 e0       	ldi	r19, 0x00	; 0
    9f7a:	d7 01       	movw	r26, r14
    9f7c:	11 96       	adiw	r26, 0x01	; 1
    9f7e:	3c 93       	st	X, r19
    9f80:	2e 93       	st	-X, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    9f82:	13 96       	adiw	r26, 0x03	; 3
    9f84:	9c 93       	st	X, r25
    9f86:	8e 93       	st	-X, r24
    9f88:	12 97       	sbiw	r26, 0x02	; 2
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    9f8a:	90 e0       	ldi	r25, 0x00	; 0
    9f8c:	80 e0       	ldi	r24, 0x00	; 0
    9f8e:	9b ce       	rjmp	.-714    	; 0x9cc6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    9f90:	e1 e0       	ldi	r30, 0x01	; 1
    9f92:	f0 e0       	ldi	r31, 0x00	; 0
    9f94:	ec 0f       	add	r30, r28
    9f96:	fd 1f       	adc	r31, r29
    9f98:	ed 0d       	add	r30, r13
    9f9a:	f1 1d       	adc	r31, r1
    9f9c:	10 82       	st	Z, r1
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    9f9e:	19 81       	ldd	r17, Y+1	; 0x01
    9fa0:	11 23       	and	r17, r17
    9fa2:	09 f4       	brne	.+2      	; 0x9fa6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x480>
    9fa4:	51 c0       	rjmp	.+162    	; 0xa048 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    9fa6:	fe 01       	movw	r30, r28
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    9fa8:	1d 32       	cpi	r17, 0x2D	; 45
    9faa:	71 f1       	breq	.+92     	; 0xa008 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    9fac:	1b 32       	cpi	r17, 0x2B	; 43
    9fae:	61 f1       	breq	.+88     	; 0xa008 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    9fb0:	31 96       	adiw	r30, 0x01	; 1
isInteger():
  while (isdigit(*s)) s++;
    9fb2:	81 91       	ld	r24, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    9fb4:	90 ed       	ldi	r25, 0xD0	; 208
    9fb6:	98 0f       	add	r25, r24
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    9fb8:	9a 30       	cpi	r25, 0x0A	; 10
    9fba:	d8 f3       	brcs	.-10     	; 0x9fb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    9fbc:	81 11       	cpse	r24, r1
    9fbe:	44 c0       	rjmp	.+136    	; 0xa048 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    9fc0:	14 37       	cpi	r17, 0x74	; 116
    9fc2:	09 f4       	brne	.+2      	; 0x9fc6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4a0>
    9fc4:	dd c1       	rjmp	.+954    	; 0xa380 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x85a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    9fc6:	1b 32       	cpi	r17, 0x2B	; 43
    9fc8:	09 f1       	breq	.+66     	; 0xa00c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e6>
    9fca:	1d 32       	cpi	r17, 0x2D	; 45
    9fcc:	19 f1       	breq	.+70     	; 0xa014 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    9fce:	10 e0       	ldi	r17, 0x00	; 0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    9fd0:	fe 01       	movw	r30, r28
    9fd2:	31 96       	adiw	r30, 0x01	; 1
    9fd4:	20 e0       	ldi	r18, 0x00	; 0
    9fd6:	30 e0       	ldi	r19, 0x00	; 0
    9fd8:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    9fda:	01 91       	ld	r16, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    9fdc:	80 ed       	ldi	r24, 0xD0	; 208
    9fde:	80 0f       	add	r24, r16
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    9fe0:	8a 30       	cpi	r24, 0x0A	; 10
    9fe2:	d0 f4       	brcc	.+52     	; 0xa018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f2>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    9fe4:	aa e0       	ldi	r26, 0x0A	; 10
    9fe6:	b0 e0       	ldi	r27, 0x00	; 0
    9fe8:	0e 94 a6 ef 	call	0x1df4c	; 0x1df4c <__muluhisi3>
    9fec:	20 2f       	mov	r18, r16
    9fee:	00 0f       	add	r16, r16
    9ff0:	33 0b       	sbc	r19, r19
    9ff2:	20 53       	subi	r18, 0x30	; 48
    9ff4:	31 09       	sbc	r19, r1
    9ff6:	03 2e       	mov	r0, r19
    9ff8:	00 0c       	add	r0, r0
    9ffa:	44 0b       	sbc	r20, r20
    9ffc:	55 0b       	sbc	r21, r21
    9ffe:	26 0f       	add	r18, r22
    a000:	37 1f       	adc	r19, r23
    a002:	48 1f       	adc	r20, r24
    a004:	59 1f       	adc	r21, r25
    a006:	e9 cf       	rjmp	.-46     	; 0x9fda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4b4>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
  if (issign(*s)) s++;
    a008:	32 96       	adiw	r30, 0x02	; 2
    a00a:	d3 cf       	rjmp	.-90     	; 0x9fb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    a00c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26

  switch (*s) {
    case '-':
      negative_result = true;
      s++;
    a00e:	fe 01       	movw	r30, r28
    a010:	32 96       	adiw	r30, 0x02	; 2
    a012:	e0 cf       	rjmp	.-64     	; 0x9fd4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    a014:	11 e0       	ldi	r17, 0x01	; 1
    a016:	fb cf       	rjmp	.-10     	; 0xa00e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e8>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    a018:	11 23       	and	r17, r17
    a01a:	09 f4       	brne	.+2      	; 0xa01e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f8>
    a01c:	b5 c1       	rjmp	.+874    	; 0xa388 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x862>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    a01e:	e1 14       	cp	r14, r1
    a020:	f1 04       	cpc	r15, r1
    a022:	09 f4       	brne	.+2      	; 0xa026 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x500>
    a024:	b2 cf       	rjmp	.-156    	; 0x9f8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    a026:	87 e0       	ldi	r24, 0x07	; 7
    a028:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    a02a:	21 15       	cp	r18, r1
    a02c:	31 05       	cpc	r19, r1
    a02e:	41 05       	cpc	r20, r1
    a030:	51 05       	cpc	r21, r1
    a032:	11 f4       	brne	.+4      	; 0xa038 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x512>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    a034:	86 e0       	ldi	r24, 0x06	; 6
    a036:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    a038:	f7 01       	movw	r30, r14
    a03a:	91 83       	std	Z+1, r25	; 0x01
    a03c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    a03e:	22 83       	std	Z+2, r18	; 0x02
    a040:	33 83       	std	Z+3, r19	; 0x03
    a042:	44 83       	std	Z+4, r20	; 0x04
    a044:	55 83       	std	Z+5, r21	; 0x05
    a046:	a1 cf       	rjmp	.-190    	; 0x9f8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:16
namespace Internals {

inline bool isFloat(const char* s) {
  if (!s) return false;

  if (!strcmp(s, "NaN")) return true;
    a048:	65 e4       	ldi	r22, 0x45	; 69
    a04a:	73 e0       	ldi	r23, 0x03	; 3
    a04c:	ce 01       	movw	r24, r28
    a04e:	01 96       	adiw	r24, 0x01	; 1
    a050:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
    a054:	89 2b       	or	r24, r25
    a056:	09 f4       	brne	.+2      	; 0xa05a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x534>
    a058:	46 c0       	rjmp	.+140    	; 0xa0e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
  if (issign(*s)) s++;
    a05a:	5e 01       	movw	r10, r28
    a05c:	f2 e0       	ldi	r31, 0x02	; 2
    a05e:	af 0e       	add	r10, r31
    a060:	b1 1c       	adc	r11, r1
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    a062:	1d 32       	cpi	r17, 0x2D	; 45
    a064:	49 f0       	breq	.+18     	; 0xa078 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
    a066:	fe 01       	movw	r30, r28
    a068:	31 96       	adiw	r30, 0x01	; 1
    a06a:	5f 01       	movw	r10, r30
    a06c:	1b 32       	cpi	r17, 0x2B	; 43
    a06e:	21 f4       	brne	.+8      	; 0xa078 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
    a070:	5e 01       	movw	r10, r28
    a072:	22 e0       	ldi	r18, 0x02	; 2
    a074:	a2 0e       	add	r10, r18
    a076:	b1 1c       	adc	r11, r1
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:18
  if (!strcmp(s, "Infinity")) return true;
    a078:	69 e4       	ldi	r22, 0x49	; 73
    a07a:	73 e0       	ldi	r23, 0x03	; 3
    a07c:	c5 01       	movw	r24, r10
    a07e:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
    a082:	89 2b       	or	r24, r25
    a084:	81 f1       	breq	.+96     	; 0xa0e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:19
  if (*s == '\0') return false;
    a086:	d5 01       	movw	r26, r10
    a088:	8c 91       	ld	r24, X
    a08a:	88 23       	and	r24, r24
    a08c:	09 f4       	brne	.+2      	; 0xa090 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
    a08e:	3b c1       	rjmp	.+630    	; 0xa306 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    a090:	fd 01       	movw	r30, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21

  while (isdigit(*s)) s++;
    a092:	8d 91       	ld	r24, X+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    a094:	90 ed       	ldi	r25, 0xD0	; 208
    a096:	98 0f       	add	r25, r24
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21
    a098:	9a 30       	cpi	r25, 0x0A	; 10
    a09a:	d0 f3       	brcs	.-12     	; 0xa090 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:23

  if (*s == '.') {
    a09c:	8e 32       	cpi	r24, 0x2E	; 46
    a09e:	41 f4       	brne	.+16     	; 0xa0b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:24
    s++;
    a0a0:	9d 01       	movw	r18, r26
    a0a2:	f9 01       	movw	r30, r18
    a0a4:	2f 5f       	subi	r18, 0xFF	; 255
    a0a6:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    a0a8:	80 81       	ld	r24, Z
    a0aa:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:25
    while (isdigit(*s)) s++;
    a0ac:	8a 30       	cpi	r24, 0x0A	; 10
    a0ae:	c8 f3       	brcs	.-14     	; 0xa0a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x57c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:28
  }

  if (*s == 'e' || *s == 'E') {
    a0b0:	80 81       	ld	r24, Z
    a0b2:	8f 7d       	andi	r24, 0xDF	; 223
    a0b4:	85 34       	cpi	r24, 0x45	; 69
    a0b6:	a1 f4       	brne	.+40     	; 0xa0e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    s++;
    if (issign(*s)) s++;
    a0b8:	81 81       	ldd	r24, Z+1	; 0x01
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    a0ba:	8d 32       	cpi	r24, 0x2D	; 45
    a0bc:	09 f4       	brne	.+2      	; 0xa0c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x59a>
    a0be:	57 c0       	rjmp	.+174    	; 0xa16e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
    a0c0:	8b 32       	cpi	r24, 0x2B	; 43
    a0c2:	09 f4       	brne	.+2      	; 0xa0c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a0>
    a0c4:	54 c0       	rjmp	.+168    	; 0xa16e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:29
    s++;
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    a0c6:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    a0c8:	80 81       	ld	r24, Z
    a0ca:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:31
    if (issign(*s)) s++;
    if (!isdigit(*s)) return false;
    a0cc:	8a 30       	cpi	r24, 0x0A	; 10
    a0ce:	08 f0       	brcs	.+2      	; 0xa0d2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ac>
    a0d0:	1a c1       	rjmp	.+564    	; 0xa306 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    a0d2:	cf 01       	movw	r24, r30
    a0d4:	fc 01       	movw	r30, r24
    a0d6:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    a0d8:	20 81       	ld	r18, Z
    a0da:	20 53       	subi	r18, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:32
    while (isdigit(*s)) s++;
    a0dc:	2a 30       	cpi	r18, 0x0A	; 10
    a0de:	d0 f3       	brcs	.-12     	; 0xa0d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ae>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    a0e0:	80 81       	ld	r24, Z
    a0e2:	81 11       	cpse	r24, r1
    a0e4:	10 c1       	rjmp	.+544    	; 0xa306 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    a0e6:	1b 32       	cpi	r17, 0x2B	; 43
    a0e8:	09 f4       	brne	.+2      	; 0xa0ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c6>
    a0ea:	43 c0       	rjmp	.+134    	; 0xa172 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64c>
    a0ec:	1d 32       	cpi	r17, 0x2D	; 45
    a0ee:	09 f0       	breq	.+2      	; 0xa0f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5cc>
    a0f0:	47 c0       	rjmp	.+142    	; 0xa180 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x65a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    a0f2:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    a0f4:	dd 24       	eor	r13, r13
    a0f6:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
      s++;
    a0f8:	5e 01       	movw	r10, r28
    a0fa:	b2 e0       	ldi	r27, 0x02	; 2
    a0fc:	ab 0e       	add	r10, r27
    a0fe:	b1 1c       	adc	r11, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    a100:	60 e0       	ldi	r22, 0x00	; 0
    a102:	70 e0       	ldi	r23, 0x00	; 0
    a104:	80 e8       	ldi	r24, 0x80	; 128
    a106:	9f e3       	ldi	r25, 0x3F	; 63
parseFloat():
    a108:	14 37       	cpi	r17, 0x74	; 116
    a10a:	09 f4       	brne	.+2      	; 0xa10e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e8>
    a10c:	d2 c0       	rjmp	.+420    	; 0xa2b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    a10e:	1f 7d       	andi	r17, 0xDF	; 223
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    a110:	60 e0       	ldi	r22, 0x00	; 0
    a112:	70 e0       	ldi	r23, 0x00	; 0
    a114:	80 ec       	ldi	r24, 0xC0	; 192
    a116:	9f e7       	ldi	r25, 0x7F	; 127
parseFloat():
    a118:	1e 34       	cpi	r17, 0x4E	; 78
    a11a:	09 f4       	brne	.+2      	; 0xa11e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5f8>
    a11c:	ca c0       	rjmp	.+404    	; 0xa2b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35
  if (*s == 'i' || *s == 'I')
    a11e:	19 34       	cpi	r17, 0x49	; 73
    a120:	09 f4       	brne	.+2      	; 0xa124 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5fe>
    a122:	97 c0       	rjmp	.+302    	; 0xa252 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    a124:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    a126:	20 e0       	ldi	r18, 0x00	; 0
    a128:	30 e0       	ldi	r19, 0x00	; 0
    a12a:	a9 01       	movw	r20, r18
    a12c:	f5 01       	movw	r30, r10
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    a12e:	d5 01       	movw	r26, r10
    a130:	1d 91       	ld	r17, X+
    a132:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    a134:	80 ed       	ldi	r24, 0xD0	; 208
    a136:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    a138:	8a 30       	cpi	r24, 0x0A	; 10
    a13a:	48 f5       	brcc	.+82     	; 0xa18e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x668>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    a13c:	2c 3c       	cpi	r18, 0xCC	; 204
    a13e:	bc ec       	ldi	r27, 0xCC	; 204
    a140:	3b 07       	cpc	r19, r27
    a142:	bc e0       	ldi	r27, 0x0C	; 12
    a144:	4b 07       	cpc	r20, r27
    a146:	51 05       	cpc	r21, r1
    a148:	04 f5       	brge	.+64     	; 0xa18a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x664>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    a14a:	aa e0       	ldi	r26, 0x0A	; 10
    a14c:	b0 e0       	ldi	r27, 0x00	; 0
    a14e:	0e 94 a6 ef 	call	0x1df4c	; 0x1df4c <__muluhisi3>
    a152:	21 2f       	mov	r18, r17
    a154:	11 0f       	add	r17, r17
    a156:	33 0b       	sbc	r19, r19
    a158:	20 53       	subi	r18, 0x30	; 48
    a15a:	31 09       	sbc	r19, r1
    a15c:	03 2e       	mov	r0, r19
    a15e:	00 0c       	add	r0, r0
    a160:	44 0b       	sbc	r20, r20
    a162:	55 0b       	sbc	r21, r21
    a164:	26 0f       	add	r18, r22
    a166:	37 1f       	adc	r19, r23
    a168:	48 1f       	adc	r20, r24
    a16a:	59 1f       	adc	r21, r25
    a16c:	df cf       	rjmp	.-66     	; 0xa12c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    if (issign(*s)) s++;
    a16e:	32 96       	adiw	r30, 0x02	; 2
    a170:	ab cf       	rjmp	.-170    	; 0xa0c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    a172:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    a174:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    a176:	5e 01       	movw	r10, r28
    a178:	e2 e0       	ldi	r30, 0x02	; 2
    a17a:	ae 0e       	add	r10, r30
    a17c:	b1 1c       	adc	r11, r1
    a17e:	c0 cf       	rjmp	.-128    	; 0xa100 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    a180:	d1 2c       	mov	r13, r1
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  switch (*s) {
    a182:	ce 01       	movw	r24, r28
    a184:	01 96       	adiw	r24, 0x01	; 1
    a186:	5c 01       	movw	r10, r24
    a188:	bb cf       	rjmp	.-138    	; 0xa100 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    a18a:	0f 5f       	subi	r16, 0xFF	; 255
    a18c:	cf cf       	rjmp	.-98     	; 0xa12c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    s++;
  }

  if (*s == '.') {
    a18e:	1e 32       	cpi	r17, 0x2E	; 46
    a190:	31 f5       	brne	.+76     	; 0xa1de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    a192:	5f 01       	movw	r10, r30
    a194:	8f ef       	ldi	r24, 0xFF	; 255
    a196:	a8 1a       	sub	r10, r24
    a198:	b8 0a       	sbc	r11, r24
    a19a:	f5 01       	movw	r30, r10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    a19c:	d5 01       	movw	r26, r10
    a19e:	1d 91       	ld	r17, X+
    a1a0:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    a1a2:	80 ed       	ldi	r24, 0xD0	; 208
    a1a4:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    a1a6:	8a 30       	cpi	r24, 0x0A	; 10
    a1a8:	d0 f4       	brcc	.+52     	; 0xa1de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    a1aa:	2c 3c       	cpi	r18, 0xCC	; 204
    a1ac:	bc ec       	ldi	r27, 0xCC	; 204
    a1ae:	3b 07       	cpc	r19, r27
    a1b0:	bc e0       	ldi	r27, 0x0C	; 12
    a1b2:	4b 07       	cpc	r20, r27
    a1b4:	51 05       	cpc	r21, r1
    a1b6:	8c f7       	brge	.-30     	; 0xa19a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    a1b8:	aa e0       	ldi	r26, 0x0A	; 10
    a1ba:	b0 e0       	ldi	r27, 0x00	; 0
    a1bc:	0e 94 a6 ef 	call	0x1df4c	; 0x1df4c <__muluhisi3>
    a1c0:	21 2f       	mov	r18, r17
    a1c2:	11 0f       	add	r17, r17
    a1c4:	33 0b       	sbc	r19, r19
    a1c6:	20 53       	subi	r18, 0x30	; 48
    a1c8:	31 09       	sbc	r19, r1
    a1ca:	03 2e       	mov	r0, r19
    a1cc:	00 0c       	add	r0, r0
    a1ce:	44 0b       	sbc	r20, r20
    a1d0:	55 0b       	sbc	r21, r21
    a1d2:	26 0f       	add	r18, r22
    a1d4:	37 1f       	adc	r19, r23
    a1d6:	48 1f       	adc	r20, r24
    a1d8:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    a1da:	01 50       	subi	r16, 0x01	; 1
    a1dc:	de cf       	rjmp	.-68     	; 0xa19a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    a1de:	80 81       	ld	r24, Z
    a1e0:	8f 7d       	andi	r24, 0xDF	; 223
    a1e2:	00 2e       	mov	r0, r16
    a1e4:	00 0c       	add	r0, r0
    a1e6:	11 0b       	sbc	r17, r17
    a1e8:	85 34       	cpi	r24, 0x45	; 69
    a1ea:	09 f0       	breq	.+2      	; 0xa1ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6c8>
    a1ec:	70 c0       	rjmp	.+224    	; 0xa2ce <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    a1ee:	81 81       	ldd	r24, Z+1	; 0x01
    a1f0:	8d 32       	cpi	r24, 0x2D	; 45
    a1f2:	41 f5       	brne	.+80     	; 0xa244 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x71e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    a1f4:	32 96       	adiw	r30, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    a1f6:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    a1f8:	90 e0       	ldi	r25, 0x00	; 0
    a1fa:	80 e0       	ldi	r24, 0x00	; 0
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    a1fc:	6a e0       	ldi	r22, 0x0A	; 10
    a1fe:	b6 2e       	mov	r11, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    a200:	a1 91       	ld	r26, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    a202:	60 ed       	ldi	r22, 0xD0	; 208
    a204:	6a 0f       	add	r22, r26
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    a206:	6a 30       	cpi	r22, 0x0A	; 10
    a208:	78 f5       	brcc	.+94     	; 0xa268 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x742>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    a20a:	b8 9e       	mul	r11, r24
    a20c:	b0 01       	movw	r22, r0
    a20e:	b9 9e       	mul	r11, r25
    a210:	70 0d       	add	r23, r0
    a212:	11 24       	eor	r1, r1
    a214:	8a 2f       	mov	r24, r26
    a216:	aa 0f       	add	r26, r26
    a218:	99 0b       	sbc	r25, r25
    a21a:	c0 97       	sbiw	r24, 0x30	; 48
    a21c:	86 0f       	add	r24, r22
    a21e:	97 1f       	adc	r25, r23
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    a220:	b8 01       	movw	r22, r16
    a222:	68 0f       	add	r22, r24
    a224:	79 1f       	adc	r23, r25
    a226:	67 32       	cpi	r22, 0x27	; 39
    a228:	71 05       	cpc	r23, r1
    a22a:	54 f3       	brlt	.-44     	; 0xa200 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    a22c:	bb 23       	and	r27, r27
    a22e:	89 f0       	breq	.+34     	; 0xa252 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    a230:	60 e0       	ldi	r22, 0x00	; 0
    a232:	70 e0       	ldi	r23, 0x00	; 0
    a234:	80 e0       	ldi	r24, 0x00	; 0
    a236:	90 e8       	ldi	r25, 0x80	; 128
parseFloat():
    a238:	d1 10       	cpse	r13, r1
    a23a:	3b c0       	rjmp	.+118    	; 0xa2b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    a23c:	60 e0       	ldi	r22, 0x00	; 0
    a23e:	70 e0       	ldi	r23, 0x00	; 0
    a240:	cb 01       	movw	r24, r22
    a242:	37 c0       	rjmp	.+110    	; 0xa2b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    a244:	8b 32       	cpi	r24, 0x2B	; 43
    a246:	19 f0       	breq	.+6      	; 0xa24e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x728>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    a248:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    a24a:	b0 e0       	ldi	r27, 0x00	; 0
    a24c:	d5 cf       	rjmp	.-86     	; 0xa1f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6d2>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    a24e:	32 96       	adiw	r30, 0x02	; 2
    a250:	fc cf       	rjmp	.-8      	; 0xa24a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x724>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    a252:	60 e0       	ldi	r22, 0x00	; 0
    a254:	70 e0       	ldi	r23, 0x00	; 0
    a256:	80 e8       	ldi	r24, 0x80	; 128
    a258:	9f ef       	ldi	r25, 0xFF	; 255
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    a25a:	d1 10       	cpse	r13, r1
    a25c:	2a c0       	rjmp	.+84     	; 0xa2b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    a25e:	60 e0       	ldi	r22, 0x00	; 0
    a260:	70 e0       	ldi	r23, 0x00	; 0
    a262:	80 e8       	ldi	r24, 0x80	; 128
    a264:	9f e7       	ldi	r25, 0x7F	; 127
    a266:	25 c0       	rjmp	.+74     	; 0xa2b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    a268:	bb 23       	and	r27, r27
    a26a:	19 f0       	breq	.+6      	; 0xa272 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
    a26c:	91 95       	neg	r25
    a26e:	81 95       	neg	r24
    a270:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    a272:	08 0f       	add	r16, r24
    a274:	19 1f       	adc	r17, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    a276:	ca 01       	movw	r24, r20
    a278:	b9 01       	movw	r22, r18
    a27a:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    a27e:	10 16       	cp	r1, r16
    a280:	11 06       	cpc	r1, r17
    a282:	44 f5       	brge	.+80     	; 0xa2d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    a284:	b1 2c       	mov	r11, r1
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    a286:	00 ff       	sbrs	r16, 0
    a288:	0c c0       	rjmp	.+24     	; 0xa2a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x77c>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    a28a:	24 e0       	ldi	r18, 0x04	; 4
    a28c:	b2 9e       	mul	r11, r18
    a28e:	f0 01       	movw	r30, r0
    a290:	11 24       	eor	r1, r1
    a292:	e6 5c       	subi	r30, 0xC6	; 198
    a294:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    a296:	20 81       	ld	r18, Z
    a298:	31 81       	ldd	r19, Z+1	; 0x01
    a29a:	42 81       	ldd	r20, Z+2	; 0x02
    a29c:	53 81       	ldd	r21, Z+3	; 0x03
    a29e:	0e 94 59 ee 	call	0x1dcb2	; 0x1dcb2 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    a2a2:	15 95       	asr	r17
    a2a4:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    a2a6:	b3 94       	inc	r11
    a2a8:	01 15       	cp	r16, r1
    a2aa:	11 05       	cpc	r17, r1
    a2ac:	61 f7       	brne	.-40     	; 0xa286 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x760>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    a2ae:	d1 10       	cpse	r13, r1
    a2b0:	90 58       	subi	r25, 0x80	; 128
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    a2b2:	e1 14       	cp	r14, r1
    a2b4:	f1 04       	cpc	r15, r1
    a2b6:	09 f4       	brne	.+2      	; 0xa2ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x794>
    a2b8:	68 ce       	rjmp	.-816    	; 0x9f8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    a2ba:	2a e0       	ldi	r18, 0x0A	; 10
    a2bc:	30 e0       	ldi	r19, 0x00	; 0
    a2be:	f7 01       	movw	r30, r14
    a2c0:	31 83       	std	Z+1, r19	; 0x01
    a2c2:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    a2c4:	62 83       	std	Z+2, r22	; 0x02
    a2c6:	73 83       	std	Z+3, r23	; 0x03
    a2c8:	84 83       	std	Z+4, r24	; 0x04
    a2ca:	95 83       	std	Z+5, r25	; 0x05
    a2cc:	5e ce       	rjmp	.-836    	; 0x9f8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    a2ce:	90 e0       	ldi	r25, 0x00	; 0
    a2d0:	80 e0       	ldi	r24, 0x00	; 0
    a2d2:	cf cf       	rjmp	.-98     	; 0xa272 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    a2d4:	11 95       	neg	r17
    a2d6:	01 95       	neg	r16
    a2d8:	11 09       	sbc	r17, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    a2da:	b1 2c       	mov	r11, r1
make_float():
    a2dc:	01 15       	cp	r16, r1
    a2de:	11 05       	cpc	r17, r1
    a2e0:	31 f3       	breq	.-52     	; 0xa2ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x788>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    a2e2:	00 ff       	sbrs	r16, 0
    a2e4:	0c c0       	rjmp	.+24     	; 0xa2fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7d8>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    a2e6:	a4 e0       	ldi	r26, 0x04	; 4
    a2e8:	ba 9e       	mul	r11, r26
    a2ea:	f0 01       	movw	r30, r0
    a2ec:	11 24       	eor	r1, r1
    a2ee:	ee 5d       	subi	r30, 0xDE	; 222
    a2f0:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    a2f2:	20 81       	ld	r18, Z
    a2f4:	31 81       	ldd	r19, Z+1	; 0x01
    a2f6:	42 81       	ldd	r20, Z+2	; 0x02
    a2f8:	53 81       	ldd	r21, Z+3	; 0x03
    a2fa:	0e 94 59 ee 	call	0x1dcb2	; 0x1dcb2 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    a2fe:	15 95       	asr	r17
    a300:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    a302:	b3 94       	inc	r11
    a304:	eb cf       	rjmp	.-42     	; 0xa2dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7b6>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
      result.set(parseFloat<JsonFloat>(buffer));
    } else if (!strcmp(buffer, "true")) {
    a306:	62 e5       	ldi	r22, 0x52	; 82
    a308:	73 e0       	ldi	r23, 0x03	; 3
    a30a:	ce 01       	movw	r24, r28
    a30c:	01 96       	adiw	r24, 0x01	; 1
    a30e:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
    a312:	89 2b       	or	r24, r25
    a314:	91 f4       	brne	.+36     	; 0xa33a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x814>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    a316:	e1 14       	cp	r14, r1
    a318:	f1 04       	cpc	r15, r1
    a31a:	09 f4       	brne	.+2      	; 0xa31e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7f8>
    a31c:	36 ce       	rjmp	.-916    	; 0x9f8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    a31e:	85 e0       	ldi	r24, 0x05	; 5
    a320:	90 e0       	ldi	r25, 0x00	; 0
    a322:	f7 01       	movw	r30, r14
    a324:	91 83       	std	Z+1, r25	; 0x01
    a326:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    a328:	81 e0       	ldi	r24, 0x01	; 1
    a32a:	90 e0       	ldi	r25, 0x00	; 0
    a32c:	a0 e0       	ldi	r26, 0x00	; 0
    a32e:	b0 e0       	ldi	r27, 0x00	; 0
    a330:	82 83       	std	Z+2, r24	; 0x02
    a332:	93 83       	std	Z+3, r25	; 0x03
    a334:	a4 83       	std	Z+4, r26	; 0x04
    a336:	b5 83       	std	Z+5, r27	; 0x05
    a338:	28 ce       	rjmp	.-944    	; 0x9f8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    a33a:	67 e5       	ldi	r22, 0x57	; 87
    a33c:	73 e0       	ldi	r23, 0x03	; 3
    a33e:	ce 01       	movw	r24, r28
    a340:	01 96       	adiw	r24, 0x01	; 1
    a342:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
    a346:	89 2b       	or	r24, r25
    a348:	79 f4       	brne	.+30     	; 0xa368 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x842>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    a34a:	e1 14       	cp	r14, r1
    a34c:	f1 04       	cpc	r15, r1
    a34e:	09 f4       	brne	.+2      	; 0xa352 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x82c>
    a350:	1c ce       	rjmp	.-968    	; 0x9f8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    a352:	85 e0       	ldi	r24, 0x05	; 5
    a354:	90 e0       	ldi	r25, 0x00	; 0
    a356:	d7 01       	movw	r26, r14
    a358:	8d 93       	st	X+, r24
    a35a:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    a35c:	f7 01       	movw	r30, r14
    a35e:	12 82       	std	Z+2, r1	; 0x02
    a360:	13 82       	std	Z+3, r1	; 0x03
    a362:	14 82       	std	Z+4, r1	; 0x04
    a364:	15 82       	std	Z+5, r1	; 0x05
    a366:	11 ce       	rjmp	.-990    	; 0x9f8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    a368:	6d e5       	ldi	r22, 0x5D	; 93
    a36a:	73 e0       	ldi	r23, 0x03	; 3
    a36c:	ce 01       	movw	r24, r28
    a36e:	01 96       	adiw	r24, 0x01	; 1
    a370:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
    a374:	89 2b       	or	r24, r25
    a376:	09 f4       	brne	.+2      	; 0xa37a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x854>
    a378:	08 ce       	rjmp	.-1008   	; 0x9f8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    a37a:	82 e0       	ldi	r24, 0x02	; 2
    a37c:	90 e0       	ldi	r25, 0x00	; 0
    a37e:	a3 cc       	rjmp	.-1722   	; 0x9cc6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    a380:	21 e0       	ldi	r18, 0x01	; 1
    a382:	30 e0       	ldi	r19, 0x00	; 0
    a384:	40 e0       	ldi	r20, 0x00	; 0
    a386:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    a388:	e1 14       	cp	r14, r1
    a38a:	f1 04       	cpc	r15, r1
    a38c:	09 f0       	breq	.+2      	; 0xa390 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x86a>
    a38e:	52 ce       	rjmp	.-860    	; 0xa034 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x50e>
    a390:	fc cd       	rjmp	.-1032   	; 0x9f8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>

0000a392 <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6001
/*

   Funkce ktera zobrazuje vsechny interni veliciny vhodne k diagnostice zarizeni
*/
void display_element_show_about_device(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    a392:	af 92       	push	r10
    a394:	bf 92       	push	r11
    a396:	cf 92       	push	r12
    a398:	df 92       	push	r13
    a39a:	ef 92       	push	r14
    a39c:	ff 92       	push	r15
    a39e:	0f 93       	push	r16
    a3a0:	1f 93       	push	r17
    a3a2:	cf 93       	push	r28
    a3a4:	df 93       	push	r29
    a3a6:	cd b7       	in	r28, 0x3d	; 61
    a3a8:	de b7       	in	r29, 0x3e	; 62
    a3aa:	a8 97       	sbiw	r28, 0x28	; 40
    a3ac:	0f b6       	in	r0, 0x3f	; 63
    a3ae:	f8 94       	cli
    a3b0:	de bf       	out	0x3e, r29	; 62
    a3b2:	0f be       	out	0x3f, r0	; 63
    a3b4:	cd bf       	out	0x3d, r28	; 61
    a3b6:	6c 01       	movw	r12, r24
    a3b8:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6004
  char str1[32];
  char str2[8];
  strcpy_P(str1, new_text_input_volt);
    a3ba:	6c ef       	ldi	r22, 0xFC	; 252
    a3bc:	73 e7       	ldi	r23, 0x73	; 115
    a3be:	ce 01       	movw	r24, r28
    a3c0:	01 96       	adiw	r24, 0x01	; 1
    a3c2:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3176
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    a3c6:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <dvanact>
    a3ca:	90 91 81 0b 	lds	r25, 0x0B81	; 0x800b81 <dvanact+0x1>
    a3ce:	29 e3       	ldi	r18, 0x39	; 57
    a3d0:	28 9f       	mul	r18, r24
    a3d2:	b0 01       	movw	r22, r0
    a3d4:	29 9f       	mul	r18, r25
    a3d6:	70 0d       	add	r23, r0
    a3d8:	11 24       	eor	r1, r1
    a3da:	90 e0       	ldi	r25, 0x00	; 0
    a3dc:	80 e0       	ldi	r24, 0x00	; 0
    a3de:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
    a3e2:	20 e0       	ldi	r18, 0x00	; 0
    a3e4:	30 e0       	ldi	r19, 0x00	; 0
    a3e6:	4a e7       	ldi	r20, 0x7A	; 122
    a3e8:	54 e4       	ldi	r21, 0x44	; 68
    a3ea:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6005
void display_element_show_about_device(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  char str1[32];
  char str2[8];
  strcpy_P(str1, new_text_input_volt);
  dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, str2);
    a3ee:	8e 01       	movw	r16, r28
    a3f0:	0f 5d       	subi	r16, 0xDF	; 223
    a3f2:	1f 4f       	sbci	r17, 0xFF	; 255
    a3f4:	22 e0       	ldi	r18, 0x02	; 2
    a3f6:	44 e0       	ldi	r20, 0x04	; 4
    a3f8:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6006
  strcat(str1, str2);
    a3fc:	b8 01       	movw	r22, r16
    a3fe:	ce 01       	movw	r24, r28
    a400:	01 96       	adiw	r24, 0x01	; 1
    a402:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6007
  strcat(str1, "V");
    a406:	64 e4       	ldi	r22, 0x44	; 68
    a408:	78 e0       	ldi	r23, 0x08	; 8
    a40a:	ce 01       	movw	r24, r28
    a40c:	01 96       	adiw	r24, 0x01	; 1
    a40e:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6008
  show_string(str1, x + 5 , y + 10 , 1, BLACK, WHITE, 0);
    a412:	85 e0       	ldi	r24, 0x05	; 5
    a414:	c8 0e       	add	r12, r24
    a416:	d1 1c       	adc	r13, r1
    a418:	a5 01       	movw	r20, r10
    a41a:	46 5f       	subi	r20, 0xF6	; 246
    a41c:	5f 4f       	sbci	r21, 0xFF	; 255
    a41e:	ee 24       	eor	r14, r14
    a420:	ea 94       	dec	r14
    a422:	fe 2c       	mov	r15, r14
    a424:	10 e0       	ldi	r17, 0x00	; 0
    a426:	00 e0       	ldi	r16, 0x00	; 0
    a428:	21 e0       	ldi	r18, 0x01	; 1
    a42a:	b6 01       	movw	r22, r12
    a42c:	ce 01       	movw	r24, r28
    a42e:	01 96       	adiw	r24, 0x01	; 1
    a430:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6010

  strcpy_P(str1, new_text_pet_volt);
    a434:	68 ee       	ldi	r22, 0xE8	; 232
    a436:	73 e7       	ldi	r23, 0x73	; 115
    a438:	ce 01       	movw	r24, r28
    a43a:	01 96       	adiw	r24, 0x01	; 1
    a43c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6011
  strcat(str1, ": ");
    a440:	63 e4       	ldi	r22, 0x43	; 67
    a442:	77 e0       	ldi	r23, 0x07	; 7
    a444:	ce 01       	movw	r24, r28
    a446:	01 96       	adiw	r24, 0x01	; 1
    a448:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3176
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    a44c:	60 91 82 0b 	lds	r22, 0x0B82	; 0x800b82 <petnula>
    a450:	70 91 83 0b 	lds	r23, 0x0B83	; 0x800b83 <petnula+0x1>
    a454:	93 e0       	ldi	r25, 0x03	; 3
    a456:	66 0f       	add	r22, r22
    a458:	77 1f       	adc	r23, r23
    a45a:	9a 95       	dec	r25
    a45c:	e1 f7       	brne	.-8      	; 0xa456 <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xc4>
    a45e:	90 e0       	ldi	r25, 0x00	; 0
    a460:	80 e0       	ldi	r24, 0x00	; 0
    a462:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
    a466:	20 e0       	ldi	r18, 0x00	; 0
    a468:	30 e0       	ldi	r19, 0x00	; 0
    a46a:	4a e7       	ldi	r20, 0x7A	; 122
    a46c:	54 e4       	ldi	r21, 0x44	; 68
    a46e:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6012
  strcat(str1, "V");
  show_string(str1, x + 5 , y + 10 , 1, BLACK, WHITE, 0);

  strcpy_P(str1, new_text_pet_volt);
  strcat(str1, ": ");
  dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, str2);
    a472:	8e 01       	movw	r16, r28
    a474:	0f 5d       	subi	r16, 0xDF	; 223
    a476:	1f 4f       	sbci	r17, 0xFF	; 255
    a478:	22 e0       	ldi	r18, 0x02	; 2
    a47a:	44 e0       	ldi	r20, 0x04	; 4
    a47c:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6013
  strcat(str1, str2);
    a480:	b8 01       	movw	r22, r16
    a482:	ce 01       	movw	r24, r28
    a484:	01 96       	adiw	r24, 0x01	; 1
    a486:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6014
  strcat(str1, "V");
    a48a:	64 e4       	ldi	r22, 0x44	; 68
    a48c:	78 e0       	ldi	r23, 0x08	; 8
    a48e:	ce 01       	movw	r24, r28
    a490:	01 96       	adiw	r24, 0x01	; 1
    a492:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6015
  show_string(str1, x + 5 , y + 25 , 1, BLACK, WHITE, 0);
    a496:	a5 01       	movw	r20, r10
    a498:	47 5e       	subi	r20, 0xE7	; 231
    a49a:	5f 4f       	sbci	r21, 0xFF	; 255
    a49c:	10 e0       	ldi	r17, 0x00	; 0
    a49e:	00 e0       	ldi	r16, 0x00	; 0
    a4a0:	21 e0       	ldi	r18, 0x01	; 1
    a4a2:	b6 01       	movw	r22, r12
    a4a4:	ce 01       	movw	r24, r28
    a4a6:	01 96       	adiw	r24, 0x01	; 1
    a4a8:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6017

  strcpy_P(str1, new_text_tritri_volt);
    a4ac:	64 ed       	ldi	r22, 0xD4	; 212
    a4ae:	73 e7       	ldi	r23, 0x73	; 115
    a4b0:	ce 01       	movw	r24, r28
    a4b2:	01 96       	adiw	r24, 0x01	; 1
    a4b4:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3176
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    a4b8:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <tritri>
    a4bc:	90 91 85 0b 	lds	r25, 0x0B85	; 0x800b85 <tritri+0x1>
    a4c0:	25 e0       	ldi	r18, 0x05	; 5
    a4c2:	28 9f       	mul	r18, r24
    a4c4:	b0 01       	movw	r22, r0
    a4c6:	29 9f       	mul	r18, r25
    a4c8:	70 0d       	add	r23, r0
    a4ca:	11 24       	eor	r1, r1
    a4cc:	90 e0       	ldi	r25, 0x00	; 0
    a4ce:	80 e0       	ldi	r24, 0x00	; 0
    a4d0:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
    a4d4:	20 e0       	ldi	r18, 0x00	; 0
    a4d6:	30 e0       	ldi	r19, 0x00	; 0
    a4d8:	4a e7       	ldi	r20, 0x7A	; 122
    a4da:	54 e4       	ldi	r21, 0x44	; 68
    a4dc:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6018
  strcat(str1, str2);
  strcat(str1, "V");
  show_string(str1, x + 5 , y + 25 , 1, BLACK, WHITE, 0);

  strcpy_P(str1, new_text_tritri_volt);
  dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, str2);
    a4e0:	8e 01       	movw	r16, r28
    a4e2:	0f 5d       	subi	r16, 0xDF	; 223
    a4e4:	1f 4f       	sbci	r17, 0xFF	; 255
    a4e6:	22 e0       	ldi	r18, 0x02	; 2
    a4e8:	44 e0       	ldi	r20, 0x04	; 4
    a4ea:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6019
  strcat(str1, str2);
    a4ee:	b8 01       	movw	r22, r16
    a4f0:	ce 01       	movw	r24, r28
    a4f2:	01 96       	adiw	r24, 0x01	; 1
    a4f4:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6020
  strcat(str1, "V");
    a4f8:	64 e4       	ldi	r22, 0x44	; 68
    a4fa:	78 e0       	ldi	r23, 0x08	; 8
    a4fc:	ce 01       	movw	r24, r28
    a4fe:	01 96       	adiw	r24, 0x01	; 1
    a500:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6021
  show_string(str1, x + 5 , y + 40 , 1, BLACK, WHITE, 0);
    a504:	a5 01       	movw	r20, r10
    a506:	48 5d       	subi	r20, 0xD8	; 216
    a508:	5f 4f       	sbci	r21, 0xFF	; 255
    a50a:	10 e0       	ldi	r17, 0x00	; 0
    a50c:	00 e0       	ldi	r16, 0x00	; 0
    a50e:	21 e0       	ldi	r18, 0x01	; 1
    a510:	b6 01       	movw	r22, r12
    a512:	ce 01       	movw	r24, r28
    a514:	01 96       	adiw	r24, 0x01	; 1
    a516:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6023

  strcpy_P(str1, new_text_consume_ampere);;
    a51a:	65 ec       	ldi	r22, 0xC5	; 197
    a51c:	73 e7       	ldi	r23, 0x73	; 115
    a51e:	ce 01       	movw	r24, r28
    a520:	01 96       	adiw	r24, 0x01	; 1
    a522:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3191
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    a526:	60 91 7e 0b 	lds	r22, 0x0B7E	; 0x800b7e <proud>
    a52a:	70 91 7f 0b 	lds	r23, 0x0B7F	; 0x800b7f <proud+0x1>
    a52e:	90 e0       	ldi	r25, 0x00	; 0
    a530:	80 e0       	ldi	r24, 0x00	; 0
    a532:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6024
  strcat(str1, str2);
  strcat(str1, "V");
  show_string(str1, x + 5 , y + 40 , 1, BLACK, WHITE, 0);

  strcpy_P(str1, new_text_consume_ampere);;
  dtostrf(prepocet_proudu(proud), 4, 2, str2);
    a536:	8e 01       	movw	r16, r28
    a538:	0f 5d       	subi	r16, 0xDF	; 223
    a53a:	1f 4f       	sbci	r17, 0xFF	; 255
    a53c:	22 e0       	ldi	r18, 0x02	; 2
    a53e:	44 e0       	ldi	r20, 0x04	; 4
    a540:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6025
  strcat(str1, str2);
    a544:	b8 01       	movw	r22, r16
    a546:	ce 01       	movw	r24, r28
    a548:	01 96       	adiw	r24, 0x01	; 1
    a54a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6026
  strcat(str1, "mA");
    a54e:	62 e6       	ldi	r22, 0x62	; 98
    a550:	73 e0       	ldi	r23, 0x03	; 3
    a552:	ce 01       	movw	r24, r28
    a554:	01 96       	adiw	r24, 0x01	; 1
    a556:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6027
  show_string(str1, x + 5 , y + 55 , 1, BLACK, WHITE, 0);
    a55a:	a5 01       	movw	r20, r10
    a55c:	49 5c       	subi	r20, 0xC9	; 201
    a55e:	5f 4f       	sbci	r21, 0xFF	; 255
    a560:	10 e0       	ldi	r17, 0x00	; 0
    a562:	00 e0       	ldi	r16, 0x00	; 0
    a564:	21 e0       	ldi	r18, 0x01	; 1
    a566:	b6 01       	movw	r22, r12
    a568:	ce 01       	movw	r24, r28
    a56a:	01 96       	adiw	r24, 0x01	; 1
    a56c:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6029

  strcpy_P(str1, new_text_internal_temp);
    a570:	63 eb       	ldi	r22, 0xB3	; 179
    a572:	73 e7       	ldi	r23, 0x73	; 115
    a574:	ce 01       	movw	r24, r28
    a576:	01 96       	adiw	r24, 0x01	; 1
    a578:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6030
  dtostrf(internal_temp, 4, 2, str2);
    a57c:	60 91 a6 0c 	lds	r22, 0x0CA6	; 0x800ca6 <internal_temp>
    a580:	70 91 a7 0c 	lds	r23, 0x0CA7	; 0x800ca7 <internal_temp+0x1>
    a584:	80 91 a8 0c 	lds	r24, 0x0CA8	; 0x800ca8 <internal_temp+0x2>
    a588:	90 91 a9 0c 	lds	r25, 0x0CA9	; 0x800ca9 <internal_temp+0x3>
    a58c:	8e 01       	movw	r16, r28
    a58e:	0f 5d       	subi	r16, 0xDF	; 223
    a590:	1f 4f       	sbci	r17, 0xFF	; 255
    a592:	22 e0       	ldi	r18, 0x02	; 2
    a594:	44 e0       	ldi	r20, 0x04	; 4
    a596:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6031
  strcat(str1, str2);
    a59a:	b8 01       	movw	r22, r16
    a59c:	ce 01       	movw	r24, r28
    a59e:	01 96       	adiw	r24, 0x01	; 1
    a5a0:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6032
  strcat(str1, "C");
    a5a4:	6e e1       	ldi	r22, 0x1E	; 30
    a5a6:	77 e0       	ldi	r23, 0x07	; 7
    a5a8:	ce 01       	movw	r24, r28
    a5aa:	01 96       	adiw	r24, 0x01	; 1
    a5ac:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6033
  show_string(str1, x + 5 , y + 70 , 1, BLACK, WHITE, 0);
    a5b0:	a5 01       	movw	r20, r10
    a5b2:	4a 5b       	subi	r20, 0xBA	; 186
    a5b4:	5f 4f       	sbci	r21, 0xFF	; 255
    a5b6:	10 e0       	ldi	r17, 0x00	; 0
    a5b8:	00 e0       	ldi	r16, 0x00	; 0
    a5ba:	21 e0       	ldi	r18, 0x01	; 1
    a5bc:	b6 01       	movw	r22, r12
    a5be:	ce 01       	movw	r24, r28
    a5c0:	01 96       	adiw	r24, 0x01	; 1
    a5c2:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6035

  strcpy_P(str1, new_text_selfcheck_test);
    a5c6:	67 ea       	ldi	r22, 0xA7	; 167
    a5c8:	73 e7       	ldi	r23, 0x73	; 115
    a5ca:	ce 01       	movw	r24, r28
    a5cc:	01 96       	adiw	r24, 0x01	; 1
    a5ce:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6036
  itoa(selftest_data, str2, 16);
    a5d2:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    a5d6:	40 e1       	ldi	r20, 0x10	; 16
    a5d8:	be 01       	movw	r22, r28
    a5da:	6f 5d       	subi	r22, 0xDF	; 223
    a5dc:	7f 4f       	sbci	r23, 0xFF	; 255
    a5de:	90 e0       	ldi	r25, 0x00	; 0
    a5e0:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6037
  strcat(str1, str2);
    a5e4:	be 01       	movw	r22, r28
    a5e6:	6f 5d       	subi	r22, 0xDF	; 223
    a5e8:	7f 4f       	sbci	r23, 0xFF	; 255
    a5ea:	ce 01       	movw	r24, r28
    a5ec:	01 96       	adiw	r24, 0x01	; 1
    a5ee:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6038
  show_string(str1, x + 5 , y + 85 , 1, BLACK, WHITE, 0);
    a5f2:	a5 01       	movw	r20, r10
    a5f4:	4b 5a       	subi	r20, 0xAB	; 171
    a5f6:	5f 4f       	sbci	r21, 0xFF	; 255
    a5f8:	21 e0       	ldi	r18, 0x01	; 1
    a5fa:	b6 01       	movw	r22, r12
    a5fc:	ce 01       	movw	r24, r28
    a5fe:	01 96       	adiw	r24, 0x01	; 1
    a600:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6040

  strcpy_P(str1, new_text_mqtt_send);
    a604:	65 e9       	ldi	r22, 0x95	; 149
    a606:	73 e7       	ldi	r23, 0x73	; 115
    a608:	ce 01       	movw	r24, r28
    a60a:	01 96       	adiw	r24, 0x01	; 1
    a60c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    a610:	4a e0       	ldi	r20, 0x0A	; 10
    a612:	be 01       	movw	r22, r28
    a614:	6f 5d       	subi	r22, 0xDF	; 223
    a616:	7f 4f       	sbci	r23, 0xFF	; 255
    a618:	80 91 ba 0c 	lds	r24, 0x0CBA	; 0x800cba <mqtt_send_message>
    a61c:	90 91 bb 0c 	lds	r25, 0x0CBB	; 0x800cbb <mqtt_send_message+0x1>
    a620:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6042
  itoa(mqtt_send_message, str2, 10);
  strcat(str1, str2);
    a624:	be 01       	movw	r22, r28
    a626:	6f 5d       	subi	r22, 0xDF	; 223
    a628:	7f 4f       	sbci	r23, 0xFF	; 255
    a62a:	ce 01       	movw	r24, r28
    a62c:	01 96       	adiw	r24, 0x01	; 1
    a62e:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6043
  show_string(str1, x + 5 , y + 100 , 1, BLACK, WHITE, 0);
    a632:	a5 01       	movw	r20, r10
    a634:	4c 59       	subi	r20, 0x9C	; 156
    a636:	5f 4f       	sbci	r21, 0xFF	; 255
    a638:	21 e0       	ldi	r18, 0x01	; 1
    a63a:	b6 01       	movw	r22, r12
    a63c:	ce 01       	movw	r24, r28
    a63e:	01 96       	adiw	r24, 0x01	; 1
    a640:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6045

  strcpy_P(str1, new_text_mqtt_receive);
    a644:	64 e8       	ldi	r22, 0x84	; 132
    a646:	73 e7       	ldi	r23, 0x73	; 115
    a648:	ce 01       	movw	r24, r28
    a64a:	01 96       	adiw	r24, 0x01	; 1
    a64c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    a650:	4a e0       	ldi	r20, 0x0A	; 10
    a652:	be 01       	movw	r22, r28
    a654:	6f 5d       	subi	r22, 0xDF	; 223
    a656:	7f 4f       	sbci	r23, 0xFF	; 255
    a658:	80 91 7c 0b 	lds	r24, 0x0B7C	; 0x800b7c <mqtt_receive_message>
    a65c:	90 91 7d 0b 	lds	r25, 0x0B7D	; 0x800b7d <mqtt_receive_message+0x1>
    a660:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6047
  itoa(mqtt_receive_message, str2, 10);
  strcat(str1, str2);
    a664:	be 01       	movw	r22, r28
    a666:	6f 5d       	subi	r22, 0xDF	; 223
    a668:	7f 4f       	sbci	r23, 0xFF	; 255
    a66a:	ce 01       	movw	r24, r28
    a66c:	01 96       	adiw	r24, 0x01	; 1
    a66e:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6048
  show_string(str1, x + 5 , y + 115 , 1, BLACK, WHITE, 0);
    a672:	a5 01       	movw	r20, r10
    a674:	4d 58       	subi	r20, 0x8D	; 141
    a676:	5f 4f       	sbci	r21, 0xFF	; 255
    a678:	21 e0       	ldi	r18, 0x01	; 1
    a67a:	b6 01       	movw	r22, r12
    a67c:	ce 01       	movw	r24, r28
    a67e:	01 96       	adiw	r24, 0x01	; 1
    a680:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6050

  strcpy_P(str1, new_text_mqtt_processed);
    a684:	60 e7       	ldi	r22, 0x70	; 112
    a686:	73 e7       	ldi	r23, 0x73	; 115
    a688:	ce 01       	movw	r24, r28
    a68a:	01 96       	adiw	r24, 0x01	; 1
    a68c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    a690:	4a e0       	ldi	r20, 0x0A	; 10
    a692:	be 01       	movw	r22, r28
    a694:	6f 5d       	subi	r22, 0xDF	; 223
    a696:	7f 4f       	sbci	r23, 0xFF	; 255
    a698:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
    a69c:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
    a6a0:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6052
  itoa(mqtt_process_message, str2, 10);
  strcat(str1, str2);
    a6a4:	be 01       	movw	r22, r28
    a6a6:	6f 5d       	subi	r22, 0xDF	; 223
    a6a8:	7f 4f       	sbci	r23, 0xFF	; 255
    a6aa:	ce 01       	movw	r24, r28
    a6ac:	01 96       	adiw	r24, 0x01	; 1
    a6ae:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6053
  show_string(str1, x + 5 , y + 130 , 1, BLACK, WHITE, 0);
    a6b2:	a5 01       	movw	r20, r10
    a6b4:	4e 57       	subi	r20, 0x7E	; 126
    a6b6:	5f 4f       	sbci	r21, 0xFF	; 255
    a6b8:	21 e0       	ldi	r18, 0x01	; 1
    a6ba:	b6 01       	movw	r22, r12
    a6bc:	ce 01       	movw	r24, r28
    a6be:	01 96       	adiw	r24, 0x01	; 1
    a6c0:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6055

  strcpy_P(str1, new_text_mqtt_error);
    a6c4:	61 e6       	ldi	r22, 0x61	; 97
    a6c6:	73 e7       	ldi	r23, 0x73	; 115
    a6c8:	ce 01       	movw	r24, r28
    a6ca:	01 96       	adiw	r24, 0x01	; 1
    a6cc:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    a6d0:	4a e0       	ldi	r20, 0x0A	; 10
    a6d2:	be 01       	movw	r22, r28
    a6d4:	6f 5d       	subi	r22, 0xDF	; 223
    a6d6:	7f 4f       	sbci	r23, 0xFF	; 255
    a6d8:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <mqtt_error>
    a6dc:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <mqtt_error+0x1>
    a6e0:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6057
  itoa(mqtt_error, str2, 10);
  strcat(str1, str2);
    a6e4:	be 01       	movw	r22, r28
    a6e6:	6f 5d       	subi	r22, 0xDF	; 223
    a6e8:	7f 4f       	sbci	r23, 0xFF	; 255
    a6ea:	ce 01       	movw	r24, r28
    a6ec:	01 96       	adiw	r24, 0x01	; 1
    a6ee:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6058
  show_string(str1, x + 5 , y + 145 , 1, BLACK, WHITE, 0);
    a6f2:	a5 01       	movw	r20, r10
    a6f4:	4f 56       	subi	r20, 0x6F	; 111
    a6f6:	5f 4f       	sbci	r21, 0xFF	; 255
    a6f8:	21 e0       	ldi	r18, 0x01	; 1
    a6fa:	b6 01       	movw	r22, r12
    a6fc:	ce 01       	movw	r24, r28
    a6fe:	01 96       	adiw	r24, 0x01	; 1
    a700:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6059
}
    a704:	a8 96       	adiw	r28, 0x28	; 40
    a706:	0f b6       	in	r0, 0x3f	; 63
    a708:	f8 94       	cli
    a70a:	de bf       	out	0x3e, r29	; 62
    a70c:	0f be       	out	0x3f, r0	; 63
    a70e:	cd bf       	out	0x3d, r28	; 61
    a710:	df 91       	pop	r29
    a712:	cf 91       	pop	r28
    a714:	1f 91       	pop	r17
    a716:	0f 91       	pop	r16
    a718:	ff 90       	pop	r15
    a71a:	ef 90       	pop	r14
    a71c:	df 90       	pop	r13
    a71e:	cf 90       	pop	r12
    a720:	bf 90       	pop	r11
    a722:	af 90       	pop	r10
    a724:	08 95       	ret

0000a726 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z32display_element_dialog_show_textjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4191
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
}
/////
void display_element_dialog_show_text(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    a726:	ef 92       	push	r14
    a728:	ff 92       	push	r15
    a72a:	0f 93       	push	r16
    a72c:	1f 93       	push	r17
    a72e:	ab 01       	movw	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4192
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
    a730:	ee 24       	eor	r14, r14
    a732:	ea 94       	dec	r14
    a734:	fe 2c       	mov	r15, r14
    a736:	10 e0       	ldi	r17, 0x00	; 0
    a738:	00 e0       	ldi	r16, 0x00	; 0
    a73a:	22 e0       	ldi	r18, 0x02	; 2
    a73c:	bc 01       	movw	r22, r24
    a73e:	85 e1       	ldi	r24, 0x15	; 21
    a740:	9a e0       	ldi	r25, 0x0A	; 10
    a742:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4193
}
    a746:	1f 91       	pop	r17
    a748:	0f 91       	pop	r16
    a74a:	ff 90       	pop	r15
    a74c:	ef 90       	pop	r14
    a74e:	08 95       	ret

0000a750 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_time_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4125
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}

/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    a750:	cf 92       	push	r12
    a752:	df 92       	push	r13
    a754:	ef 92       	push	r14
    a756:	ff 92       	push	r15
    a758:	0f 93       	push	r16
    a75a:	1f 93       	push	r17
    a75c:	cf 93       	push	r28
    a75e:	df 93       	push	r29
    a760:	cd b7       	in	r28, 0x3d	; 61
    a762:	de b7       	in	r29, 0x3e	; 62
    a764:	68 97       	sbiw	r28, 0x18	; 24
    a766:	0f b6       	in	r0, 0x3f	; 63
    a768:	f8 94       	cli
    a76a:	de bf       	out	0x3e, r29	; 62
    a76c:	0f be       	out	0x3f, r0	; 63
    a76e:	cd bf       	out	0x3d, r28	; 61
    a770:	8c 01       	movw	r16, r24
    a772:	7b 01       	movw	r14, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3154
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    a774:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
    a778:	9e 01       	movw	r18, r28
    a77a:	2f 5f       	subi	r18, 0xFF	; 255
    a77c:	3f 4f       	sbci	r19, 0xFF	; 255
    a77e:	69 01       	movw	r12, r18
_Z27display_element_show_time_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4127

/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  char str1[24];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    a780:	80 fd       	sbrc	r24, 0
    a782:	37 c0       	rjmp	.+110    	; 0xa7f2 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xa2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4129
  {
    sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    a784:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <now+0x4>
    a788:	1f 92       	push	r1
    a78a:	8f 93       	push	r24
    a78c:	80 91 77 12 	lds	r24, 0x1277	; 0x801277 <now+0x3>
    a790:	1f 92       	push	r1
    a792:	8f 93       	push	r24
    a794:	8f e7       	ldi	r24, 0x7F	; 127
    a796:	93 e0       	ldi	r25, 0x03	; 3
    a798:	9f 93       	push	r25
    a79a:	8f 93       	push	r24
    a79c:	3f 93       	push	r19
    a79e:	2f 93       	push	r18
    a7a0:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
    a7a4:	0f b6       	in	r0, 0x3f	; 63
    a7a6:	f8 94       	cli
    a7a8:	de bf       	out	0x3e, r29	; 62
    a7aa:	0f be       	out	0x3f, r0	; 63
    a7ac:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    a7ae:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    a7b2:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
_Z27display_element_show_time_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4136
  else
  {
    strcpy(str1, "--:--");
  }
  my_lcd.Set_Draw_color(BLACK);
  show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    a7b6:	a7 01       	movw	r20, r14
    a7b8:	4c 5e       	subi	r20, 0xEC	; 236
    a7ba:	5f 4f       	sbci	r21, 0xFF	; 255
    a7bc:	b8 01       	movw	r22, r16
    a7be:	6c 5f       	subi	r22, 0xFC	; 252
    a7c0:	7f 4f       	sbci	r23, 0xFF	; 255
    a7c2:	ee 24       	eor	r14, r14
    a7c4:	ea 94       	dec	r14
    a7c6:	fe 2c       	mov	r15, r14
    a7c8:	10 e0       	ldi	r17, 0x00	; 0
    a7ca:	00 e0       	ldi	r16, 0x00	; 0
    a7cc:	28 e0       	ldi	r18, 0x08	; 8
    a7ce:	c6 01       	movw	r24, r12
    a7d0:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4137
}
    a7d4:	68 96       	adiw	r28, 0x18	; 24
    a7d6:	0f b6       	in	r0, 0x3f	; 63
    a7d8:	f8 94       	cli
    a7da:	de bf       	out	0x3e, r29	; 62
    a7dc:	0f be       	out	0x3f, r0	; 63
    a7de:	cd bf       	out	0x3d, r28	; 61
    a7e0:	df 91       	pop	r29
    a7e2:	cf 91       	pop	r28
    a7e4:	1f 91       	pop	r17
    a7e6:	0f 91       	pop	r16
    a7e8:	ff 90       	pop	r15
    a7ea:	ef 90       	pop	r14
    a7ec:	df 90       	pop	r13
    a7ee:	cf 90       	pop	r12
    a7f0:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4133
  {
    sprintf(str1, "%02d:%02d", now.hour(), now.minute());
  }
  else
  {
    strcpy(str1, "--:--");
    a7f2:	65 e6       	ldi	r22, 0x65	; 101
    a7f4:	73 e0       	ldi	r23, 0x03	; 3
    a7f6:	c9 01       	movw	r24, r18
    a7f8:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
    a7fc:	d8 cf       	rjmp	.-80     	; 0xa7ae <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x5e>

0000a7fe <button_set_mqtt_pass_onclick(unsigned int, unsigned int, unsigned char)>:
_Z28button_set_mqtt_pass_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5896
  display_element_set_string(device.mqtt_user, 20, 0, &helper_dialog_mqtt_set_user, &valid_true);
}
//// funkce obsluha tlacika nastaveni mqtt klice
void button_set_mqtt_pass_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    a7fe:	70 e0       	ldi	r23, 0x00	; 0
    a800:	60 e0       	ldi	r22, 0x00	; 0
    a802:	87 e6       	ldi	r24, 0x67	; 103
    a804:	90 e0       	ldi	r25, 0x00	; 0
    a806:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    a80a:	63 e5       	ldi	r22, 0x53	; 83
    a80c:	7e e0       	ldi	r23, 0x0E	; 14
    a80e:	85 ef       	ldi	r24, 0xF5	; 245
    a810:	99 e0       	ldi	r25, 0x09	; 9
    a812:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1379
  dialog_set_string_max_length = max_length;
    a816:	84 e1       	ldi	r24, 0x14	; 20
    a818:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1380
  dialog_set_string_args = idx;
    a81c:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1381
  dialog_save_string_function = save_function;
    a820:	8b ed       	ldi	r24, 0xDB	; 219
    a822:	94 e6       	ldi	r25, 0x64	; 100
    a824:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    a828:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1382
  dialog_save_valid_function = valid_function;
    a82c:	87 ea       	ldi	r24, 0xA7	; 167
    a82e:	96 e4       	ldi	r25, 0x46	; 70
    a830:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    a834:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z28button_set_mqtt_pass_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5898
//// funkce obsluha tlacika nastaveni mqtt klice
void button_set_mqtt_pass_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
  display_element_set_string(device.mqtt_key, 20, 0, &helper_dialog_mqtt_set_pass, &valid_true);
}
    a838:	08 95       	ret

0000a83a <button_set_mqtt_user_onclick(unsigned int, unsigned int, unsigned char)>:
_Z28button_set_mqtt_user_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5890
  display_element_set_string(ip_text, 16, 0, &helper_dialog_mqtt_set_server, &valid_ipv4_address_element_string);
}
//// funkce obsluha tlacitka nastaveni mqtt uzivatele
void button_set_mqtt_user_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    a83a:	70 e0       	ldi	r23, 0x00	; 0
    a83c:	60 e0       	ldi	r22, 0x00	; 0
    a83e:	87 e6       	ldi	r24, 0x67	; 103
    a840:	90 e0       	ldi	r25, 0x00	; 0
    a842:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    a846:	6f e3       	ldi	r22, 0x3F	; 63
    a848:	7e e0       	ldi	r23, 0x0E	; 14
    a84a:	85 ef       	ldi	r24, 0xF5	; 245
    a84c:	99 e0       	ldi	r25, 0x09	; 9
    a84e:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1379
  dialog_set_string_max_length = max_length;
    a852:	84 e1       	ldi	r24, 0x14	; 20
    a854:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1380
  dialog_set_string_args = idx;
    a858:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1381
  dialog_save_string_function = save_function;
    a85c:	8e ef       	ldi	r24, 0xFE	; 254
    a85e:	94 e6       	ldi	r25, 0x64	; 100
    a860:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    a864:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1382
  dialog_save_valid_function = valid_function;
    a868:	87 ea       	ldi	r24, 0xA7	; 167
    a86a:	96 e4       	ldi	r25, 0x46	; 70
    a86c:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    a870:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z28button_set_mqtt_user_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5892
//// funkce obsluha tlacitka nastaveni mqtt uzivatele
void button_set_mqtt_user_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
  display_element_set_string(device.mqtt_user, 20, 0, &helper_dialog_mqtt_set_user, &valid_true);
}
    a874:	08 95       	ret

0000a876 <button_set_mqtt_broker_onclick(unsigned int, unsigned int, unsigned char)>:
_Z30button_set_mqtt_broker_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5881


*/
//// funkce obsluha tlacitka nastaveni mqqt serveru
void button_set_mqtt_broker_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a876:	0f 93       	push	r16
    a878:	1f 93       	push	r17
    a87a:	cf 93       	push	r28
    a87c:	df 93       	push	r29
    a87e:	cd b7       	in	r28, 0x3d	; 61
    a880:	de b7       	in	r29, 0x3e	; 62
    a882:	60 97       	sbiw	r28, 0x10	; 16
    a884:	0f b6       	in	r0, 0x3f	; 63
    a886:	f8 94       	cli
    a888:	de bf       	out	0x3e, r29	; 62
    a88a:	0f be       	out	0x3f, r0	; 63
    a88c:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5883
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    a88e:	70 e0       	ldi	r23, 0x00	; 0
    a890:	60 e0       	ldi	r22, 0x00	; 0
    a892:	85 e6       	ldi	r24, 0x65	; 101
    a894:	90 e0       	ldi	r25, 0x00	; 0
    a896:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5884
  sprintf(ip_text, "%d.%d.%d.%d", device.mqtt_server[0], device.mqtt_server[1], device.mqtt_server[2], device.mqtt_server[3]);
    a89a:	e9 e1       	ldi	r30, 0x19	; 25
    a89c:	fe e0       	ldi	r31, 0x0E	; 14
    a89e:	83 a1       	ldd	r24, Z+35	; 0x23
    a8a0:	1f 92       	push	r1
    a8a2:	8f 93       	push	r24
    a8a4:	82 a1       	ldd	r24, Z+34	; 0x22
    a8a6:	1f 92       	push	r1
    a8a8:	8f 93       	push	r24
    a8aa:	81 a1       	ldd	r24, Z+33	; 0x21
    a8ac:	1f 92       	push	r1
    a8ae:	8f 93       	push	r24
    a8b0:	80 a1       	ldd	r24, Z+32	; 0x20
    a8b2:	1f 92       	push	r1
    a8b4:	8f 93       	push	r24
    a8b6:	85 e3       	ldi	r24, 0x35	; 53
    a8b8:	93 e0       	ldi	r25, 0x03	; 3
    a8ba:	9f 93       	push	r25
    a8bc:	8f 93       	push	r24
    a8be:	8e 01       	movw	r16, r28
    a8c0:	0f 5f       	subi	r16, 0xFF	; 255
    a8c2:	1f 4f       	sbci	r17, 0xFF	; 255
    a8c4:	1f 93       	push	r17
    a8c6:	0f 93       	push	r16
    a8c8:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    a8cc:	b8 01       	movw	r22, r16
    a8ce:	85 ef       	ldi	r24, 0xF5	; 245
    a8d0:	99 e0       	ldi	r25, 0x09	; 9
    a8d2:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1379
  dialog_set_string_max_length = max_length;
    a8d6:	80 e1       	ldi	r24, 0x10	; 16
    a8d8:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1380
  dialog_set_string_args = idx;
    a8dc:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1381
  dialog_save_string_function = save_function;
    a8e0:	81 e2       	ldi	r24, 0x21	; 33
    a8e2:	95 e6       	ldi	r25, 0x65	; 101
    a8e4:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    a8e8:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1382
  dialog_save_valid_function = valid_function;
    a8ec:	89 ea       	ldi	r24, 0xA9	; 169
    a8ee:	96 e4       	ldi	r25, 0x46	; 70
    a8f0:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    a8f4:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z30button_set_mqtt_broker_onclickjjh():
    a8f8:	0f b6       	in	r0, 0x3f	; 63
    a8fa:	f8 94       	cli
    a8fc:	de bf       	out	0x3e, r29	; 62
    a8fe:	0f be       	out	0x3f, r0	; 63
    a900:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5886
{
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(ip_text, "%d.%d.%d.%d", device.mqtt_server[0], device.mqtt_server[1], device.mqtt_server[2], device.mqtt_server[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_mqtt_set_server, &valid_ipv4_address_element_string);
}
    a902:	60 96       	adiw	r28, 0x10	; 16
    a904:	0f b6       	in	r0, 0x3f	; 63
    a906:	f8 94       	cli
    a908:	de bf       	out	0x3e, r29	; 62
    a90a:	0f be       	out	0x3f, r0	; 63
    a90c:	cd bf       	out	0x3d, r28	; 61
    a90e:	df 91       	pop	r29
    a910:	cf 91       	pop	r28
    a912:	1f 91       	pop	r17
    a914:	0f 91       	pop	r16
    a916:	08 95       	ret

0000a918 <button_time_set_date_manualy_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_time_set_date_manualy_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5857
  parseBytes(cas_text, ':', tim, 3, 10);
  rtc.adjust(DateTime(now.year(), now.month(), now.day(), tim[0], tim[1], tim[2]));
}
////
void button_time_set_date_manualy_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a918:	0f 93       	push	r16
    a91a:	1f 93       	push	r17
    a91c:	cf 93       	push	r28
    a91e:	df 93       	push	r29
    a920:	cd b7       	in	r28, 0x3d	; 61
    a922:	de b7       	in	r29, 0x3e	; 62
    a924:	2c 97       	sbiw	r28, 0x0c	; 12
    a926:	0f b6       	in	r0, 0x3f	; 63
    a928:	f8 94       	cli
    a92a:	de bf       	out	0x3e, r29	; 62
    a92c:	0f be       	out	0x3f, r0	; 63
    a92e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5859
  char datum_text[12];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    a930:	70 e0       	ldi	r23, 0x00	; 0
    a932:	60 e0       	ldi	r22, 0x00	; 0
    a934:	85 e6       	ldi	r24, 0x65	; 101
    a936:	90 e0       	ldi	r25, 0x00	; 0
    a938:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    a93c:	e4 e7       	ldi	r30, 0x74	; 116
    a93e:	f2 e1       	ldi	r31, 0x12	; 18
    a940:	80 81       	ld	r24, Z
    a942:	90 e0       	ldi	r25, 0x00	; 0
    a944:	80 53       	subi	r24, 0x30	; 48
    a946:	98 4f       	sbci	r25, 0xF8	; 248
_Z36button_time_set_date_manualy_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5860
  sprintf(datum_text, "%02d.%02d.%04d", now.day() , now.month() , now.year());
    a948:	9f 93       	push	r25
    a94a:	8f 93       	push	r24
    a94c:	81 81       	ldd	r24, Z+1	; 0x01
    a94e:	1f 92       	push	r1
    a950:	8f 93       	push	r24
    a952:	82 81       	ldd	r24, Z+2	; 0x02
    a954:	1f 92       	push	r1
    a956:	8f 93       	push	r24
    a958:	8b e6       	ldi	r24, 0x6B	; 107
    a95a:	93 e0       	ldi	r25, 0x03	; 3
    a95c:	9f 93       	push	r25
    a95e:	8f 93       	push	r24
    a960:	8e 01       	movw	r16, r28
    a962:	0f 5f       	subi	r16, 0xFF	; 255
    a964:	1f 4f       	sbci	r17, 0xFF	; 255
    a966:	1f 93       	push	r17
    a968:	0f 93       	push	r16
    a96a:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    a96e:	b8 01       	movw	r22, r16
    a970:	85 ef       	ldi	r24, 0xF5	; 245
    a972:	99 e0       	ldi	r25, 0x09	; 9
    a974:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1379
  dialog_set_string_max_length = max_length;
    a978:	8b e0       	ldi	r24, 0x0B	; 11
    a97a:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1380
  dialog_set_string_args = idx;
    a97e:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1381
  dialog_save_string_function = save_function;
    a982:	88 ee       	ldi	r24, 0xE8	; 232
    a984:	9e e5       	ldi	r25, 0x5E	; 94
    a986:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    a98a:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1382
  dialog_save_valid_function = valid_function;
    a98e:	87 ea       	ldi	r24, 0xA7	; 167
    a990:	96 e4       	ldi	r25, 0x46	; 70
    a992:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    a996:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z36button_time_set_date_manualy_onclickjjh():
    a99a:	0f b6       	in	r0, 0x3f	; 63
    a99c:	f8 94       	cli
    a99e:	de bf       	out	0x3e, r29	; 62
    a9a0:	0f be       	out	0x3f, r0	; 63
    a9a2:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5862
{
  char datum_text[12];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(datum_text, "%02d.%02d.%04d", now.day() , now.month() , now.year());
  display_element_set_string(datum_text, 11, 0, &helper_set_date_manualy, &valid_true);
}
    a9a4:	2c 96       	adiw	r28, 0x0c	; 12
    a9a6:	0f b6       	in	r0, 0x3f	; 63
    a9a8:	f8 94       	cli
    a9aa:	de bf       	out	0x3e, r29	; 62
    a9ac:	0f be       	out	0x3f, r0	; 63
    a9ae:	cd bf       	out	0x3d, r28	; 61
    a9b0:	df 91       	pop	r29
    a9b2:	cf 91       	pop	r28
    a9b4:	1f 91       	pop	r17
    a9b6:	0f 91       	pop	r16
    a9b8:	08 95       	ret

0000a9ba <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_time_set_time_manualy_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5841
/////////////////////////////////////////////////////////////////////////////////
/*
   Funkce pro rucni nastaveni casu a datumu
*/
void button_time_set_time_manualy_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a9ba:	0f 93       	push	r16
    a9bc:	1f 93       	push	r17
    a9be:	cf 93       	push	r28
    a9c0:	df 93       	push	r29
    a9c2:	00 d0       	rcall	.+0      	; 0xa9c4 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0xa>
    a9c4:	00 d0       	rcall	.+0      	; 0xa9c6 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    a9c6:	00 d0       	rcall	.+0      	; 0xa9c8 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0xe>
    a9c8:	1f 92       	push	r1
    a9ca:	cd b7       	in	r28, 0x3d	; 61
    a9cc:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5843
  char cas_text[10];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    a9ce:	70 e0       	ldi	r23, 0x00	; 0
    a9d0:	60 e0       	ldi	r22, 0x00	; 0
    a9d2:	85 e6       	ldi	r24, 0x65	; 101
    a9d4:	90 e0       	ldi	r25, 0x00	; 0
    a9d6:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5844
  sprintf(cas_text, "%02d:%02d:%02d", now.hour(), now.minute(), now.second());
    a9da:	e4 e7       	ldi	r30, 0x74	; 116
    a9dc:	f2 e1       	ldi	r31, 0x12	; 18
    a9de:	85 81       	ldd	r24, Z+5	; 0x05
    a9e0:	1f 92       	push	r1
    a9e2:	8f 93       	push	r24
    a9e4:	84 81       	ldd	r24, Z+4	; 0x04
    a9e6:	1f 92       	push	r1
    a9e8:	8f 93       	push	r24
    a9ea:	83 81       	ldd	r24, Z+3	; 0x03
    a9ec:	1f 92       	push	r1
    a9ee:	8f 93       	push	r24
    a9f0:	8a e7       	ldi	r24, 0x7A	; 122
    a9f2:	93 e0       	ldi	r25, 0x03	; 3
    a9f4:	9f 93       	push	r25
    a9f6:	8f 93       	push	r24
    a9f8:	8e 01       	movw	r16, r28
    a9fa:	0f 5f       	subi	r16, 0xFF	; 255
    a9fc:	1f 4f       	sbci	r17, 0xFF	; 255
    a9fe:	1f 93       	push	r17
    aa00:	0f 93       	push	r16
    aa02:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    aa06:	b8 01       	movw	r22, r16
    aa08:	85 ef       	ldi	r24, 0xF5	; 245
    aa0a:	99 e0       	ldi	r25, 0x09	; 9
    aa0c:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1379
  dialog_set_string_max_length = max_length;
    aa10:	89 e0       	ldi	r24, 0x09	; 9
    aa12:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1380
  dialog_set_string_args = idx;
    aa16:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1381
  dialog_save_string_function = save_function;
    aa1a:	8c e4       	ldi	r24, 0x4C	; 76
    aa1c:	9f e5       	ldi	r25, 0x5F	; 95
    aa1e:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    aa22:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1382
  dialog_save_valid_function = valid_function;
    aa26:	87 ea       	ldi	r24, 0xA7	; 167
    aa28:	96 e4       	ldi	r25, 0x46	; 70
    aa2a:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    aa2e:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z36button_time_set_time_manualy_onclickjjh():
    aa32:	0f b6       	in	r0, 0x3f	; 63
    aa34:	f8 94       	cli
    aa36:	de bf       	out	0x3e, r29	; 62
    aa38:	0f be       	out	0x3f, r0	; 63
    aa3a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5846
{
  char cas_text[10];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(cas_text, "%02d:%02d:%02d", now.hour(), now.minute(), now.second());
  display_element_set_string(cas_text, 9, 0, &helper_set_time_manualy, &valid_true);
}
    aa3c:	2a 96       	adiw	r28, 0x0a	; 10
    aa3e:	0f b6       	in	r0, 0x3f	; 63
    aa40:	f8 94       	cli
    aa42:	de bf       	out	0x3e, r29	; 62
    aa44:	0f be       	out	0x3f, r0	; 63
    aa46:	cd bf       	out	0x3d, r28	; 61
    aa48:	df 91       	pop	r29
    aa4a:	cf 91       	pop	r28
    aa4c:	1f 91       	pop	r17
    aa4e:	0f 91       	pop	r16
    aa50:	08 95       	ret

0000aa52 <button_ntp_set_server_onclick(unsigned int, unsigned int, unsigned char)>:
_Z29button_ntp_set_server_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5802
    strcpy_P(dialog_text, new_text_error_ntp_time);
  }
}
///
void button_ntp_set_server_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    aa52:	0f 93       	push	r16
    aa54:	1f 93       	push	r17
    aa56:	cf 93       	push	r28
    aa58:	df 93       	push	r29
    aa5a:	cd b7       	in	r28, 0x3d	; 61
    aa5c:	de b7       	in	r29, 0x3e	; 62
    aa5e:	60 97       	sbiw	r28, 0x10	; 16
    aa60:	0f b6       	in	r0, 0x3f	; 63
    aa62:	f8 94       	cli
    aa64:	de bf       	out	0x3e, r29	; 62
    aa66:	0f be       	out	0x3f, r0	; 63
    aa68:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5804
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    aa6a:	70 e0       	ldi	r23, 0x00	; 0
    aa6c:	60 e0       	ldi	r22, 0x00	; 0
    aa6e:	85 e6       	ldi	r24, 0x65	; 101
    aa70:	90 e0       	ldi	r25, 0x00	; 0
    aa72:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5805
  sprintf(ip_text, "%d.%d.%d.%d", device.ntp_server[0], device.ntp_server[1], device.ntp_server[2], device.ntp_server[3]);
    aa76:	80 91 6a 0e 	lds	r24, 0x0E6A	; 0x800e6a <device+0x51>
    aa7a:	1f 92       	push	r1
    aa7c:	8f 93       	push	r24
    aa7e:	80 91 69 0e 	lds	r24, 0x0E69	; 0x800e69 <device+0x50>
    aa82:	1f 92       	push	r1
    aa84:	8f 93       	push	r24
    aa86:	80 91 68 0e 	lds	r24, 0x0E68	; 0x800e68 <device+0x4f>
    aa8a:	1f 92       	push	r1
    aa8c:	8f 93       	push	r24
    aa8e:	80 91 67 0e 	lds	r24, 0x0E67	; 0x800e67 <device+0x4e>
    aa92:	1f 92       	push	r1
    aa94:	8f 93       	push	r24
    aa96:	85 e3       	ldi	r24, 0x35	; 53
    aa98:	93 e0       	ldi	r25, 0x03	; 3
    aa9a:	9f 93       	push	r25
    aa9c:	8f 93       	push	r24
    aa9e:	8e 01       	movw	r16, r28
    aaa0:	0f 5f       	subi	r16, 0xFF	; 255
    aaa2:	1f 4f       	sbci	r17, 0xFF	; 255
    aaa4:	1f 93       	push	r17
    aaa6:	0f 93       	push	r16
    aaa8:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    aaac:	b8 01       	movw	r22, r16
    aaae:	85 ef       	ldi	r24, 0xF5	; 245
    aab0:	99 e0       	ldi	r25, 0x09	; 9
    aab2:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1379
  dialog_set_string_max_length = max_length;
    aab6:	80 e1       	ldi	r24, 0x10	; 16
    aab8:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1380
  dialog_set_string_args = idx;
    aabc:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1381
  dialog_save_string_function = save_function;
    aac0:	86 e4       	ldi	r24, 0x46	; 70
    aac2:	95 e6       	ldi	r25, 0x65	; 101
    aac4:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    aac8:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1382
  dialog_save_valid_function = valid_function;
    aacc:	89 ea       	ldi	r24, 0xA9	; 169
    aace:	96 e4       	ldi	r25, 0x46	; 70
    aad0:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    aad4:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z29button_ntp_set_server_onclickjjh():
    aad8:	0f b6       	in	r0, 0x3f	; 63
    aada:	f8 94       	cli
    aadc:	de bf       	out	0x3e, r29	; 62
    aade:	0f be       	out	0x3f, r0	; 63
    aae0:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5807
{
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(ip_text, "%d.%d.%d.%d", device.ntp_server[0], device.ntp_server[1], device.ntp_server[2], device.ntp_server[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_ntp_set_server, &valid_ipv4_address_element_string);
}
    aae2:	60 96       	adiw	r28, 0x10	; 16
    aae4:	0f b6       	in	r0, 0x3f	; 63
    aae6:	f8 94       	cli
    aae8:	de bf       	out	0x3e, r29	; 62
    aaea:	0f be       	out	0x3f, r0	; 63
    aaec:	cd bf       	out	0x3d, r28	; 61
    aaee:	df 91       	pop	r29
    aaf0:	cf 91       	pop	r28
    aaf2:	1f 91       	pop	r17
    aaf4:	0f 91       	pop	r16
    aaf6:	08 95       	ret

0000aaf8 <button_set_brightness_auto_shutdown_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>:
_Z54button_set_brightness_auto_shutdown_dyn_symbol_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5629
    sprintf(line2, "Povoleno: %d sec", display_auto_shutdown);
}

void button_set_brightness_auto_shutdown_dyn_symbol_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(NEW_MENU_DISPLAY_NASTAVENI_AUTO_SHUTDOWN_SCREEN, 0, 0);
    aaf8:	70 e0       	ldi	r23, 0x00	; 0
    aafa:	60 e0       	ldi	r22, 0x00	; 0
    aafc:	8d e9       	ldi	r24, 0x9D	; 157
    aafe:	90 e0       	ldi	r25, 0x00	; 0
    ab00:	0c 94 48 af 	jmp	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000ab04 <button_change_brightness_display_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>:
_Z51button_change_brightness_display_dyn_button_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5541
}
///
/// Funce pro nastaveni dialogu pro zobrazeni nastaveni podsvetleni
void button_change_brightness_display_dyn_button_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(NEW_MENU_DISPLAY_NASTAVENI_BRIGTHNESS_SCREEN, 0, 0);
    ab04:	70 e0       	ldi	r23, 0x00	; 0
    ab06:	60 e0       	ldi	r22, 0x00	; 0
    ab08:	8b e9       	ldi	r24, 0x9B	; 155
    ab0a:	90 e0       	ldi	r25, 0x00	; 0
    ab0c:	0c 94 48 af 	jmp	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000ab10 <dyn_button_show_all_thermostat_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>:
_Z49dyn_button_show_all_thermostat_dyn_button_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5129
   funkce pro vyber menu nastaveni regulatoru
   args3 je index dynamickeho tlacitka
*/
void dyn_button_show_all_thermostat_dyn_button_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_NASTAVENI_RING_SCREEN, args3, 0);
    ab10:	64 2f       	mov	r22, r20
    ab12:	70 e0       	ldi	r23, 0x00	; 0
    ab14:	89 e0       	ldi	r24, 0x09	; 9
    ab16:	90 e0       	ldi	r25, 0x00	; 0
    ab18:	0c 94 48 af 	jmp	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000ab1c <button_change_default_ring_via_dialog_onclick(unsigned int, unsigned int, unsigned char)>:
_Z45button_change_default_ring_via_dialog_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4940
/////

/// funkce vyberu vychozi ringu regulatoru
void button_change_default_ring_via_dialog_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_NASTAVENI_SELECT_RING_SCREEN, default_ring, 0);
    ab1c:	60 91 86 0b 	lds	r22, 0x0B86	; 0x800b86 <default_ring>
    ab20:	70 e0       	ldi	r23, 0x00	; 0
    ab22:	8a e0       	ldi	r24, 0x0A	; 10
    ab24:	90 e0       	ldi	r25, 0x00	; 0
    ab26:	0c 94 48 af 	jmp	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000ab2a <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4652
  tds_associate(idx);
}

/// funkce. ktera
void click_tds_associate_or_setting_onewire(uint16_t args1, uint16_t args2, uint8_t idx)
{
    ab2a:	cf 93       	push	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4654
  //printf("%d %d\n", args1, idx);
  if (w_rom[idx].tds_idx == 255)
    ab2c:	8b e0       	ldi	r24, 0x0B	; 11
    ab2e:	48 9f       	mul	r20, r24
    ab30:	f0 01       	movw	r30, r0
    ab32:	11 24       	eor	r1, r1
    ab34:	e2 54       	subi	r30, 0x42	; 66
    ab36:	f3 4f       	sbci	r31, 0xF3	; 243
    ab38:	62 85       	ldd	r22, Z+10	; 0x0a
    ab3a:	6f 3f       	cpi	r22, 0xFF	; 255
    ab3c:	b1 f4       	brne	.+44     	; 0xab6a <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)+0x40>
    ab3e:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4656
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    ab40:	70 e0       	ldi	r23, 0x00	; 0
    ab42:	60 e0       	ldi	r22, 0x00	; 0
    ab44:	84 e6       	ldi	r24, 0x64	; 100
    ab46:	90 e0       	ldi	r25, 0x00	; 0
    ab48:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4657
    dialog_yes_function = &helper_tds_associate;
    ab4c:	86 ed       	ldi	r24, 0xD6	; 214
    ab4e:	9b e6       	ldi	r25, 0x6B	; 107
    ab50:	90 93 98 09 	sts	0x0998, r25	; 0x800998 <dialog_yes_function+0x1>
    ab54:	80 93 97 09 	sts	0x0997, r24	; 0x800997 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4658
    dialog_yes_args1 = idx;
    ab58:	c0 93 96 09 	sts	0x0996, r28	; 0x800996 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4659
    strcpy_P(dialog_text, text_associovat_tds);
    ab5c:	64 e4       	ldi	r22, 0x44	; 68
    ab5e:	71 e7       	ldi	r23, 0x71	; 113
    ab60:	85 e1       	ldi	r24, 0x15	; 21
    ab62:	9a e0       	ldi	r25, 0x0A	; 10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4665
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
  }
}
    ab64:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4659
  if (w_rom[idx].tds_idx == 255)
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    dialog_yes_function = &helper_tds_associate;
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
    ab66:	0c 94 4f e5 	jmp	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4663
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
    ab6a:	70 e0       	ldi	r23, 0x00	; 0
    ab6c:	84 e0       	ldi	r24, 0x04	; 4
    ab6e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4665
  }
}
    ab70:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4663
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
    ab72:	0c 94 48 af 	jmp	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000ab76 <display_element_show_time_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z36display_element_show_time_decorate_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4114
*/


/// dekorativni funkce zobrazeni casu
void display_element_show_time_decorate_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    ab76:	af 92       	push	r10
    ab78:	bf 92       	push	r11
    ab7a:	cf 92       	push	r12
    ab7c:	df 92       	push	r13
    ab7e:	ef 92       	push	r14
    ab80:	ff 92       	push	r15
    ab82:	0f 93       	push	r16
    ab84:	1f 93       	push	r17
    ab86:	cf 93       	push	r28
    ab88:	df 93       	push	r29
    ab8a:	cd b7       	in	r28, 0x3d	; 61
    ab8c:	de b7       	in	r29, 0x3e	; 62
    ab8e:	68 97       	sbiw	r28, 0x18	; 24
    ab90:	0f b6       	in	r0, 0x3f	; 63
    ab92:	f8 94       	cli
    ab94:	de bf       	out	0x3e, r29	; 62
    ab96:	0f be       	out	0x3f, r0	; 63
    ab98:	cd bf       	out	0x3d, r28	; 61
    ab9a:	6c 01       	movw	r12, r24
    ab9c:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4117
  uint16_t pos = 0;
  char str1[24];
  strcpy_P(str1, current_time);
    ab9e:	60 ea       	ldi	r22, 0xA0	; 160
    aba0:	70 e7       	ldi	r23, 0x70	; 112
    aba2:	ce 01       	movw	r24, r28
    aba4:	01 96       	adiw	r24, 0x01	; 1
    aba6:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4119
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
    abaa:	a5 01       	movw	r20, r10
    abac:	4b 5f       	subi	r20, 0xFB	; 251
    abae:	5f 4f       	sbci	r21, 0xFF	; 255
    abb0:	b6 01       	movw	r22, r12
    abb2:	61 5b       	subi	r22, 0xB1	; 177
    abb4:	7f 4f       	sbci	r23, 0xFF	; 255
    abb6:	ee 24       	eor	r14, r14
    abb8:	ea 94       	dec	r14
    abba:	fe 2c       	mov	r15, r14
    abbc:	10 e0       	ldi	r17, 0x00	; 0
    abbe:	00 e0       	ldi	r16, 0x00	; 0
    abc0:	21 e0       	ldi	r18, 0x01	; 1
    abc2:	ce 01       	movw	r24, r28
    abc4:	01 96       	adiw	r24, 0x01	; 1
    abc6:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4120
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    abca:	95 01       	movw	r18, r10
    abcc:	2c 5a       	subi	r18, 0xAC	; 172
    abce:	3f 4f       	sbci	r19, 0xFF	; 255
    abd0:	a6 01       	movw	r20, r12
    abd2:	4c 50       	subi	r20, 0x0C	; 12
    abd4:	5f 4f       	sbci	r21, 0xFF	; 255
    abd6:	b5 01       	movw	r22, r10
    abd8:	c6 01       	movw	r24, r12
    abda:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4121
}
    abde:	68 96       	adiw	r28, 0x18	; 24
    abe0:	0f b6       	in	r0, 0x3f	; 63
    abe2:	f8 94       	cli
    abe4:	de bf       	out	0x3e, r29	; 62
    abe6:	0f be       	out	0x3f, r0	; 63
    abe8:	cd bf       	out	0x3d, r28	; 61
    abea:	df 91       	pop	r29
    abec:	cf 91       	pop	r28
    abee:	1f 91       	pop	r17
    abf0:	0f 91       	pop	r16
    abf2:	ff 90       	pop	r15
    abf4:	ef 90       	pop	r14
    abf6:	df 90       	pop	r13
    abf8:	cf 90       	pop	r12
    abfa:	bf 90       	pop	r11
    abfc:	af 90       	pop	r10
    abfe:	08 95       	ret

0000ac00 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z25display_element_rectanglejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4081
}

//-----------------------------------------------------------------------------------------------------------------------------------
void display_element_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    ac00:	26 0f       	add	r18, r22
    ac02:	37 1f       	adc	r19, r23
    ac04:	48 0f       	add	r20, r24
    ac06:	59 1f       	adc	r21, r25
    ac08:	0c 94 37 ad 	jmp	0x15a6e	; 0x15a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>

0000ac0c <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>:
_Z30dialog_set_string_button_clickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1595
  menu_dialog_variable[args1].save_function(args1, args2, args3);
  MenuHistoryPrevMenu(0, 0, 0);
}

void dialog_set_string_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
    ac0c:	ff 92       	push	r15
    ac0e:	0f 93       	push	r16
    ac10:	1f 93       	push	r17
    ac12:	cf 93       	push	r28
    ac14:	df 93       	push	r29
    ac16:	ec 01       	movw	r28, r24
    ac18:	8b 01       	movw	r16, r22
    ac1a:	f4 2e       	mov	r15, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1596
  if (dialog_save_valid_function() == 1)
    ac1c:	e0 91 ef 09 	lds	r30, 0x09EF	; 0x8009ef <dialog_save_valid_function>
    ac20:	f0 91 f0 09 	lds	r31, 0x09F0	; 0x8009f0 <dialog_save_valid_function+0x1>
    ac24:	19 95       	eicall
    ac26:	81 30       	cpi	r24, 0x01	; 1
    ac28:	79 f4       	brne	.+30     	; 0xac48 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1598
  {
    dialog_save_string_function(args1, args2, args3);
    ac2a:	e0 91 f1 09 	lds	r30, 0x09F1	; 0x8009f1 <dialog_save_string_function>
    ac2e:	f0 91 f2 09 	lds	r31, 0x09F2	; 0x8009f2 <dialog_save_string_function+0x1>
    ac32:	4f 2d       	mov	r20, r15
    ac34:	b8 01       	movw	r22, r16
    ac36:	ce 01       	movw	r24, r28
    ac38:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1601
    MenuHistoryPrevMenu(0, 0, 0);
  }
}
    ac3a:	df 91       	pop	r29
    ac3c:	cf 91       	pop	r28
    ac3e:	1f 91       	pop	r17
    ac40:	0f 91       	pop	r16
    ac42:	ff 90       	pop	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1599
void dialog_set_string_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (dialog_save_valid_function() == 1)
  {
    dialog_save_string_function(args1, args2, args3);
    MenuHistoryPrevMenu(0, 0, 0);
    ac44:	0c 94 3e af 	jmp	0x15e7c	; 0x15e7c <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1601
  }
}
    ac48:	df 91       	pop	r29
    ac4a:	cf 91       	pop	r28
    ac4c:	1f 91       	pop	r17
    ac4e:	0f 91       	pop	r16
    ac50:	ff 90       	pop	r15
    ac52:	08 95       	ret

0000ac54 <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>:
_Z32dialog_set_variable_button_clickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1589
  dialog_yes_function(dialog_yes_args1, 0, 0);
  MenuHistoryPrevMenu(0, 0, 0);
}

void dialog_set_variable_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
    ac54:	1f 93       	push	r17
    ac56:	cf 93       	push	r28
    ac58:	df 93       	push	r29
    ac5a:	ec 01       	movw	r28, r24
    ac5c:	14 2f       	mov	r17, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1590
  menu_dialog_variable[args1].save_function(args1, args2, args3);
    ac5e:	90 e0       	ldi	r25, 0x00	; 0
    ac60:	80 e0       	ldi	r24, 0x00	; 0
    ac62:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
    ac66:	ab 01       	movw	r20, r22
    ac68:	bc 01       	movw	r22, r24
    ac6a:	85 e1       	ldi	r24, 0x15	; 21
    ac6c:	8c 9f       	mul	r24, r28
    ac6e:	f0 01       	movw	r30, r0
    ac70:	8d 9f       	mul	r24, r29
    ac72:	f0 0d       	add	r31, r0
    ac74:	11 24       	eor	r1, r1
    ac76:	e5 56       	subi	r30, 0x65	; 101
    ac78:	f6 4f       	sbci	r31, 0xF6	; 246
    ac7a:	03 88       	ldd	r0, Z+19	; 0x13
    ac7c:	f4 89       	ldd	r31, Z+20	; 0x14
    ac7e:	e0 2d       	mov	r30, r0
    ac80:	21 2f       	mov	r18, r17
    ac82:	ce 01       	movw	r24, r28
    ac84:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1592
  MenuHistoryPrevMenu(0, 0, 0);
}
    ac86:	df 91       	pop	r29
    ac88:	cf 91       	pop	r28
    ac8a:	1f 91       	pop	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1591
}

void dialog_set_variable_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
  menu_dialog_variable[args1].save_function(args1, args2, args3);
  MenuHistoryPrevMenu(0, 0, 0);
    ac8c:	0c 94 3e af 	jmp	0x15e7c	; 0x15e7c <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>

0000ac90 <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>:
_Z23click_dialog_button_yesjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1584
   args1 - jsou data z definice funkce
   args2 - jsou globalni data z definice menu
*/
void click_dialog_button_yes(uint16_t args1, uint16_t args2, uint8_t args3)
{
  dialog_yes_function(dialog_yes_args1, 0, 0);
    ac90:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <dialog_yes_args1>
    ac94:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <dialog_yes_function>
    ac98:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <dialog_yes_function+0x1>
    ac9c:	40 e0       	ldi	r20, 0x00	; 0
    ac9e:	70 e0       	ldi	r23, 0x00	; 0
    aca0:	60 e0       	ldi	r22, 0x00	; 0
    aca2:	90 e0       	ldi	r25, 0x00	; 0
    aca4:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1585
  MenuHistoryPrevMenu(0, 0, 0);
    aca6:	0c 94 3e af 	jmp	0x15e7c	; 0x15e7c <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>

0000acaa <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z31display_element_vertical_sliderjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4349
///
/*
   dynamicke posouvani v menu
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    acaa:	4f 92       	push	r4
    acac:	5f 92       	push	r5
    acae:	6f 92       	push	r6
    acb0:	7f 92       	push	r7
    acb2:	8f 92       	push	r8
    acb4:	9f 92       	push	r9
    acb6:	af 92       	push	r10
    acb8:	bf 92       	push	r11
    acba:	cf 92       	push	r12
    acbc:	df 92       	push	r13
    acbe:	ef 92       	push	r14
    acc0:	ff 92       	push	r15
    acc2:	0f 93       	push	r16
    acc4:	cf 93       	push	r28
    acc6:	df 93       	push	r29
    acc8:	ec 01       	movw	r28, r24
    acca:	6b 01       	movw	r12, r22
    accc:	2a 01       	movw	r4, r20
    acce:	59 01       	movw	r10, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    acd0:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    acd4:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
    acd8:	f1 2c       	mov	r15, r1
    acda:	e1 2c       	mov	r14, r1
_Z31display_element_vertical_sliderjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4353
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    acdc:	3b 01       	movw	r6, r22
    acde:	62 0e       	add	r6, r18
    ace0:	73 1e       	adc	r7, r19
    ace2:	4c 01       	movw	r8, r24
    ace4:	84 0e       	add	r8, r20
    ace6:	95 1e       	adc	r9, r21
    ace8:	93 01       	movw	r18, r6
    acea:	2e 19       	sub	r18, r14
    acec:	3f 09       	sbc	r19, r15
    acee:	a4 01       	movw	r20, r8
    acf0:	4e 19       	sub	r20, r14
    acf2:	5f 09       	sbc	r21, r15
    acf4:	b7 01       	movw	r22, r14
    acf6:	6c 0d       	add	r22, r12
    acf8:	7d 1d       	adc	r23, r13
    acfa:	c7 01       	movw	r24, r14
    acfc:	8c 0f       	add	r24, r28
    acfe:	9d 1f       	adc	r25, r29
    ad00:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>
    ad04:	8f ef       	ldi	r24, 0xFF	; 255
    ad06:	e8 1a       	sub	r14, r24
    ad08:	f8 0a       	sbc	r15, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4352
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    ad0a:	83 e0       	ldi	r24, 0x03	; 3
    ad0c:	e8 16       	cp	r14, r24
    ad0e:	f1 04       	cpc	r15, r1
    ad10:	59 f7       	brne	.-42     	; 0xace8 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x3e>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    ad12:	8f ef       	ldi	r24, 0xFF	; 255
    ad14:	9f ef       	ldi	r25, 0xFF	; 255
    ad16:	90 93 c4 0f 	sts	0x0FC4, r25	; 0x800fc4 <my_lcd+0xb>
    ad1a:	80 93 c3 0f 	sts	0x0FC3, r24	; 0x800fc3 <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4355
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    ad1e:	83 e0       	ldi	r24, 0x03	; 3
    ad20:	48 1a       	sub	r4, r24
    ad22:	51 08       	sbc	r5, r1
    ad24:	4c 0e       	add	r4, r28
    ad26:	5d 1e       	adc	r5, r29
    ad28:	23 96       	adiw	r28, 0x03	; 3
    ad2a:	95 01       	movw	r18, r10
    ad2c:	23 50       	subi	r18, 0x03	; 3
    ad2e:	31 09       	sbc	r19, r1
    ad30:	2c 0d       	add	r18, r12
    ad32:	3d 1d       	adc	r19, r13
    ad34:	b6 01       	movw	r22, r12
    ad36:	6d 5f       	subi	r22, 0xFD	; 253
    ad38:	7f 4f       	sbci	r23, 0xFF	; 255
    ad3a:	a2 01       	movw	r20, r4
    ad3c:	ce 01       	movw	r24, r28
    ad3e:	0e 94 90 ad 	call	0x15b20	; 0x15b20 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.226]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4356
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
    ad42:	60 91 92 09 	lds	r22, 0x0992	; 0x800992 <menu_slider_data_max>
    ad46:	80 91 90 09 	lds	r24, 0x0990	; 0x800990 <menu_slider_data_max_element>
    ad4a:	68 1b       	sub	r22, r24
    ad4c:	77 0b       	sbc	r23, r23
    ad4e:	6f 5f       	subi	r22, 0xFF	; 255
    ad50:	7f 4f       	sbci	r23, 0xFF	; 255
    ad52:	c5 01       	movw	r24, r10
    ad54:	0e 94 3d ef 	call	0x1de7a	; 0x1de7a <__udivmodhi4>
    ad58:	e0 2f       	mov	r30, r16
    ad5a:	f0 e0       	ldi	r31, 0x00	; 0
    ad5c:	e6 57       	subi	r30, 0x76	; 118
    ad5e:	f6 4f       	sbci	r31, 0xF6	; 246
    ad60:	80 81       	ld	r24, Z
    ad62:	86 9f       	mul	r24, r22
    ad64:	60 2d       	mov	r22, r0
    ad66:	11 24       	eor	r1, r1
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    ad68:	8a e9       	ldi	r24, 0x9A	; 154
    ad6a:	96 ed       	ldi	r25, 0xD6	; 214
    ad6c:	90 93 c4 0f 	sts	0x0FC4, r25	; 0x800fc4 <my_lcd+0xb>
    ad70:	80 93 c3 0f 	sts	0x0FC3, r24	; 0x800fc3 <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4358
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    ad74:	6c 0d       	add	r22, r12
    ad76:	7d 2d       	mov	r23, r13
    ad78:	71 1d       	adc	r23, r1
    ad7a:	9b 01       	movw	r18, r22
    ad7c:	26 5f       	subi	r18, 0xF6	; 246
    ad7e:	3f 4f       	sbci	r19, 0xFF	; 255
    ad80:	6b 5f       	subi	r22, 0xFB	; 251
    ad82:	7f 4f       	sbci	r23, 0xFF	; 255
    ad84:	a2 01       	movw	r20, r4
    ad86:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4359
}
    ad88:	df 91       	pop	r29
    ad8a:	cf 91       	pop	r28
    ad8c:	0f 91       	pop	r16
    ad8e:	ff 90       	pop	r15
    ad90:	ef 90       	pop	r14
    ad92:	df 90       	pop	r13
    ad94:	cf 90       	pop	r12
    ad96:	bf 90       	pop	r11
    ad98:	af 90       	pop	r10
    ad9a:	9f 90       	pop	r9
    ad9c:	8f 90       	pop	r8
    ad9e:	7f 90       	pop	r7
    ada0:	6f 90       	pop	r6
    ada2:	5f 90       	pop	r5
    ada4:	4f 90       	pop	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4358
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    ada6:	0c 94 90 ad 	jmp	0x15b20	; 0x15b20 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.226]>

0000adaa <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4328
  if (strlen(text) > 0)
    show_string(text, x + 5 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
}
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    adaa:	6f 92       	push	r6
    adac:	7f 92       	push	r7
    adae:	8f 92       	push	r8
    adb0:	9f 92       	push	r9
    adb2:	af 92       	push	r10
    adb4:	bf 92       	push	r11
    adb6:	cf 92       	push	r12
    adb8:	df 92       	push	r13
    adba:	ef 92       	push	r14
    adbc:	ff 92       	push	r15
    adbe:	0f 93       	push	r16
    adc0:	1f 93       	push	r17
    adc2:	cf 93       	push	r28
    adc4:	df 93       	push	r29
    adc6:	6c 01       	movw	r12, r24
    adc8:	8b 01       	movw	r16, r22
    adca:	3a 01       	movw	r6, r20
    adcc:	e9 01       	movw	r28, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    adce:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    add2:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
    add6:	f1 2c       	mov	r15, r1
    add8:	e1 2c       	mov	r14, r1
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4332
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    adda:	4b 01       	movw	r8, r22
    addc:	82 0e       	add	r8, r18
    adde:	93 1e       	adc	r9, r19
    ade0:	5c 01       	movw	r10, r24
    ade2:	a4 0e       	add	r10, r20
    ade4:	b5 1e       	adc	r11, r21
    ade6:	94 01       	movw	r18, r8
    ade8:	2e 19       	sub	r18, r14
    adea:	3f 09       	sbc	r19, r15
    adec:	a5 01       	movw	r20, r10
    adee:	4e 19       	sub	r20, r14
    adf0:	5f 09       	sbc	r21, r15
    adf2:	b7 01       	movw	r22, r14
    adf4:	60 0f       	add	r22, r16
    adf6:	71 1f       	adc	r23, r17
    adf8:	c7 01       	movw	r24, r14
    adfa:	8c 0d       	add	r24, r12
    adfc:	9d 1d       	adc	r25, r13
    adfe:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>
    ae02:	2f ef       	ldi	r18, 0xFF	; 255
    ae04:	e2 1a       	sub	r14, r18
    ae06:	f2 0a       	sbc	r15, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4331
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    ae08:	83 e0       	ldi	r24, 0x03	; 3
    ae0a:	e8 16       	cp	r14, r24
    ae0c:	f1 04       	cpc	r15, r1
    ae0e:	59 f7       	brne	.-42     	; 0xade6 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x3c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    ae10:	8f ef       	ldi	r24, 0xFF	; 255
    ae12:	9f ef       	ldi	r25, 0xFF	; 255
    ae14:	90 93 c4 0f 	sts	0x0FC4, r25	; 0x800fc4 <my_lcd+0xb>
    ae18:	80 93 c3 0f 	sts	0x0FC3, r24	; 0x800fc3 <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4334
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    ae1c:	9e 01       	movw	r18, r28
    ae1e:	23 50       	subi	r18, 0x03	; 3
    ae20:	31 09       	sbc	r19, r1
    ae22:	20 0f       	add	r18, r16
    ae24:	31 1f       	adc	r19, r17
    ae26:	a3 01       	movw	r20, r6
    ae28:	43 50       	subi	r20, 0x03	; 3
    ae2a:	51 09       	sbc	r21, r1
    ae2c:	4c 0d       	add	r20, r12
    ae2e:	5d 1d       	adc	r21, r13
    ae30:	b8 01       	movw	r22, r16
    ae32:	6d 5f       	subi	r22, 0xFD	; 253
    ae34:	7f 4f       	sbci	r23, 0xFF	; 255
    ae36:	c6 01       	movw	r24, r12
    ae38:	03 96       	adiw	r24, 0x03	; 3
    ae3a:	0e 94 90 ad 	call	0x15b20	; 0x15b20 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.226]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    ae3e:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    ae42:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4337

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
    ae46:	85 ef       	ldi	r24, 0xF5	; 245
    ae48:	99 e0       	ldi	r25, 0x09	; 9
    ae4a:	fc 01       	movw	r30, r24
    ae4c:	01 90       	ld	r0, Z+
    ae4e:	00 20       	and	r0, r0
    ae50:	e9 f7       	brne	.-6      	; 0xae4c <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xa2>
    ae52:	cf 01       	movw	r24, r30
    ae54:	86 5f       	subi	r24, 0xF6	; 246
    ae56:	99 40       	sbci	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4339
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    ae58:	ae 01       	movw	r20, r28
    ae5a:	4c 50       	subi	r20, 0x0C	; 12
    ae5c:	51 09       	sbc	r21, r1
    ae5e:	56 95       	lsr	r21
    ae60:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4340
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    ae62:	01 50       	subi	r16, 0x01	; 1
    ae64:	11 09       	sbc	r17, r1
    ae66:	40 0f       	add	r20, r16
    ae68:	51 1f       	adc	r21, r17
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    ae6a:	f6 e0       	ldi	r31, 0x06	; 6
    ae6c:	8f 9f       	mul	r24, r31
    ae6e:	c0 01       	movw	r24, r0
    ae70:	11 24       	eor	r1, r1
    ae72:	88 0f       	add	r24, r24
    ae74:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4338
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
  posx1 = (size_x - tmp1) / 2;
    ae76:	b3 01       	movw	r22, r6
    ae78:	68 1b       	sub	r22, r24
    ae7a:	79 0b       	sbc	r23, r25
    ae7c:	76 95       	lsr	r23
    ae7e:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4340
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    ae80:	6c 0d       	add	r22, r12
    ae82:	7d 1d       	adc	r23, r13
    ae84:	ee 24       	eor	r14, r14
    ae86:	ea 94       	dec	r14
    ae88:	fe 2c       	mov	r15, r14
    ae8a:	10 e0       	ldi	r17, 0x00	; 0
    ae8c:	00 e0       	ldi	r16, 0x00	; 0
    ae8e:	22 e0       	ldi	r18, 0x02	; 2
    ae90:	85 ef       	ldi	r24, 0xF5	; 245
    ae92:	99 e0       	ldi	r25, 0x09	; 9
    ae94:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4341
}
    ae98:	df 91       	pop	r29
    ae9a:	cf 91       	pop	r28
    ae9c:	1f 91       	pop	r17
    ae9e:	0f 91       	pop	r16
    aea0:	ff 90       	pop	r15
    aea2:	ef 90       	pop	r14
    aea4:	df 90       	pop	r13
    aea6:	cf 90       	pop	r12
    aea8:	bf 90       	pop	r11
    aeaa:	af 90       	pop	r10
    aeac:	9f 90       	pop	r9
    aeae:	8f 90       	pop	r8
    aeb0:	7f 90       	pop	r7
    aeb2:	6f 90       	pop	r6
    aeb4:	08 95       	ret

0000aeb6 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4299
    }
  }
}
////////////////////////////////////////////////////////
void display_element_dialog_set_variable(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t idx, uint8_t args2, char *text)
{
    aeb6:	2f 92       	push	r2
    aeb8:	3f 92       	push	r3
    aeba:	4f 92       	push	r4
    aebc:	5f 92       	push	r5
    aebe:	6f 92       	push	r6
    aec0:	7f 92       	push	r7
    aec2:	8f 92       	push	r8
    aec4:	9f 92       	push	r9
    aec6:	af 92       	push	r10
    aec8:	bf 92       	push	r11
    aeca:	cf 92       	push	r12
    aecc:	df 92       	push	r13
    aece:	ef 92       	push	r14
    aed0:	ff 92       	push	r15
    aed2:	0f 93       	push	r16
    aed4:	1f 93       	push	r17
    aed6:	cf 93       	push	r28
    aed8:	df 93       	push	r29
    aeda:	00 d0       	rcall	.+0      	; 0xaedc <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x26>
    aedc:	00 d0       	rcall	.+0      	; 0xaede <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x28>
    aede:	00 d0       	rcall	.+0      	; 0xaee0 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x2a>
    aee0:	1f 92       	push	r1
    aee2:	cd b7       	in	r28, 0x3d	; 61
    aee4:	de b7       	in	r29, 0x3e	; 62
    aee6:	5c 01       	movw	r10, r24
    aee8:	7b 01       	movw	r14, r22
    aeea:	2a 01       	movw	r4, r20
    aeec:	39 01       	movw	r6, r18
    aeee:	0a 87       	std	Y+10, r16	; 0x0a
    aef0:	16 01       	movw	r2, r12
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    aef2:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    aef6:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
    aefa:	10 e0       	ldi	r17, 0x00	; 0
    aefc:	00 e0       	ldi	r16, 0x00	; 0
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4306
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    aefe:	4b 01       	movw	r8, r22
    af00:	82 0e       	add	r8, r18
    af02:	93 1e       	adc	r9, r19
    af04:	6c 01       	movw	r12, r24
    af06:	c4 0e       	add	r12, r20
    af08:	d5 1e       	adc	r13, r21
    af0a:	94 01       	movw	r18, r8
    af0c:	20 1b       	sub	r18, r16
    af0e:	31 0b       	sbc	r19, r17
    af10:	a6 01       	movw	r20, r12
    af12:	40 1b       	sub	r20, r16
    af14:	51 0b       	sbc	r21, r17
    af16:	b8 01       	movw	r22, r16
    af18:	6e 0d       	add	r22, r14
    af1a:	7f 1d       	adc	r23, r15
    af1c:	c8 01       	movw	r24, r16
    af1e:	8a 0d       	add	r24, r10
    af20:	9b 1d       	adc	r25, r11
    af22:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>
    af26:	0f 5f       	subi	r16, 0xFF	; 255
    af28:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4305
  uint16_t tmp1, posx1, posy1;
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    af2a:	03 30       	cpi	r16, 0x03	; 3
    af2c:	11 05       	cpc	r17, r1
    af2e:	69 f7       	brne	.-38     	; 0xaf0a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x54>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    af30:	8f ef       	ldi	r24, 0xFF	; 255
    af32:	9f ef       	ldi	r25, 0xFF	; 255
    af34:	90 93 c4 0f 	sts	0x0FC4, r25	; 0x800fc4 <my_lcd+0xb>
    af38:	80 93 c3 0f 	sts	0x0FC3, r24	; 0x800fc3 <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4308
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    af3c:	93 01       	movw	r18, r6
    af3e:	23 50       	subi	r18, 0x03	; 3
    af40:	31 09       	sbc	r19, r1
    af42:	2e 0d       	add	r18, r14
    af44:	3f 1d       	adc	r19, r15
    af46:	a2 01       	movw	r20, r4
    af48:	43 50       	subi	r20, 0x03	; 3
    af4a:	51 09       	sbc	r21, r1
    af4c:	4a 0d       	add	r20, r10
    af4e:	5b 1d       	adc	r21, r11
    af50:	b7 01       	movw	r22, r14
    af52:	6d 5f       	subi	r22, 0xFD	; 253
    af54:	7f 4f       	sbci	r23, 0xFF	; 255
    af56:	c5 01       	movw	r24, r10
    af58:	03 96       	adiw	r24, 0x03	; 3
    af5a:	0e 94 90 ad 	call	0x15b20	; 0x15b20 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.226]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4310

  if (menu_dialog_variable[idx].number_type == NUMBER_TYPE_FLOAT)
    af5e:	2a 85       	ldd	r18, Y+10	; 0x0a
    af60:	82 2e       	mov	r8, r18
    af62:	91 2c       	mov	r9, r1
    af64:	35 e1       	ldi	r19, 0x15	; 21
    af66:	23 9f       	mul	r18, r19
    af68:	f0 01       	movw	r30, r0
    af6a:	11 24       	eor	r1, r1
    af6c:	e5 56       	subi	r30, 0x65	; 101
    af6e:	f6 4f       	sbci	r31, 0xF6	; 246
    af70:	85 85       	ldd	r24, Z+13	; 0x0d
    af72:	9e 01       	movw	r18, r28
    af74:	2f 5f       	subi	r18, 0xFF	; 255
    af76:	3f 4f       	sbci	r19, 0xFF	; 255
    af78:	69 01       	movw	r12, r18
    af7a:	81 11       	cpse	r24, r1
    af7c:	09 c0       	rjmp	.+18     	; 0xaf90 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4311
    dtostrf(menu_dialog_variable[idx].variable_now, 4, 2, line1);
    af7e:	60 81       	ld	r22, Z
    af80:	71 81       	ldd	r23, Z+1	; 0x01
    af82:	82 81       	ldd	r24, Z+2	; 0x02
    af84:	93 81       	ldd	r25, Z+3	; 0x03
    af86:	89 01       	movw	r16, r18
    af88:	22 e0       	ldi	r18, 0x02	; 2
    af8a:	44 e0       	ldi	r20, 0x04	; 4
    af8c:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4313

  if (menu_dialog_variable[idx].number_type == NUMBER_TYPE_INT)
    af90:	85 e1       	ldi	r24, 0x15	; 21
    af92:	88 9d       	mul	r24, r8
    af94:	f0 01       	movw	r30, r0
    af96:	89 9d       	mul	r24, r9
    af98:	f0 0d       	add	r31, r0
    af9a:	11 24       	eor	r1, r1
    af9c:	e5 56       	subi	r30, 0x65	; 101
    af9e:	f6 4f       	sbci	r31, 0xF6	; 246
    afa0:	85 85       	ldd	r24, Z+13	; 0x0d
    afa2:	81 30       	cpi	r24, 0x01	; 1
    afa4:	59 f4       	brne	.+22     	; 0xafbc <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x106>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4314
    itoa(menu_dialog_variable[idx].variable_now, line1, 10);
    afa6:	60 81       	ld	r22, Z
    afa8:	71 81       	ldd	r23, Z+1	; 0x01
    afaa:	82 81       	ldd	r24, Z+2	; 0x02
    afac:	93 81       	ldd	r25, Z+3	; 0x03
    afae:	0e 94 9f f0 	call	0x1e13e	; 0x1e13e <__fixsfsi>
    afb2:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    afb4:	4a e0       	ldi	r20, 0x0A	; 10
    afb6:	b6 01       	movw	r22, r12
    afb8:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    afbc:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    afc0:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4318

  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
    afc4:	f6 01       	movw	r30, r12
    afc6:	01 90       	ld	r0, Z+
    afc8:	00 20       	and	r0, r0
    afca:	e9 f7       	brne	.-6      	; 0xafc6 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x110>
    afcc:	31 97       	sbiw	r30, 0x01	; 1
    afce:	ec 19       	sub	r30, r12
    afd0:	fd 09       	sbc	r31, r13
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4320
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    afd2:	3c e0       	ldi	r19, 0x0C	; 12
    afd4:	63 1a       	sub	r6, r19
    afd6:	71 08       	sbc	r7, r1
    afd8:	76 94       	lsr	r7
    afda:	67 94       	ror	r6
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4321
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    afdc:	81 e0       	ldi	r24, 0x01	; 1
    afde:	e8 1a       	sub	r14, r24
    afe0:	f1 08       	sbc	r15, r1
    afe2:	6e 0c       	add	r6, r14
    afe4:	7f 1c       	adc	r7, r15
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    afe6:	96 e0       	ldi	r25, 0x06	; 6
    afe8:	e9 9f       	mul	r30, r25
    afea:	f0 01       	movw	r30, r0
    afec:	11 24       	eor	r1, r1
    afee:	ee 0f       	add	r30, r30
    aff0:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4319
    itoa(menu_dialog_variable[idx].variable_now, line1, 10);

  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
  posx1 = (size_x - tmp1) / 2;
    aff2:	b2 01       	movw	r22, r4
    aff4:	6e 1b       	sub	r22, r30
    aff6:	7f 0b       	sbc	r23, r31
    aff8:	76 95       	lsr	r23
    affa:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4321
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    affc:	6a 0d       	add	r22, r10
    affe:	7b 1d       	adc	r23, r11
    b000:	ee 24       	eor	r14, r14
    b002:	ea 94       	dec	r14
    b004:	fe 2c       	mov	r15, r14
    b006:	10 e0       	ldi	r17, 0x00	; 0
    b008:	00 e0       	ldi	r16, 0x00	; 0
    b00a:	22 e0       	ldi	r18, 0x02	; 2
    b00c:	a3 01       	movw	r20, r6
    b00e:	c6 01       	movw	r24, r12
    b010:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4323

  if (strlen(text) > 0)
    b014:	f1 01       	movw	r30, r2
    b016:	80 81       	ld	r24, Z
    b018:	88 23       	and	r24, r24
    b01a:	41 f0       	breq	.+16     	; 0xb02c <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x176>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4324
    show_string(text, x + 5 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    b01c:	b5 01       	movw	r22, r10
    b01e:	6b 5f       	subi	r22, 0xFB	; 251
    b020:	7f 4f       	sbci	r23, 0xFF	; 255
    b022:	22 e0       	ldi	r18, 0x02	; 2
    b024:	a3 01       	movw	r20, r6
    b026:	c1 01       	movw	r24, r2
    b028:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4325
}
    b02c:	2a 96       	adiw	r28, 0x0a	; 10
    b02e:	0f b6       	in	r0, 0x3f	; 63
    b030:	f8 94       	cli
    b032:	de bf       	out	0x3e, r29	; 62
    b034:	0f be       	out	0x3f, r0	; 63
    b036:	cd bf       	out	0x3d, r28	; 61
    b038:	df 91       	pop	r29
    b03a:	cf 91       	pop	r28
    b03c:	1f 91       	pop	r17
    b03e:	0f 91       	pop	r16
    b040:	ff 90       	pop	r15
    b042:	ef 90       	pop	r14
    b044:	df 90       	pop	r13
    b046:	cf 90       	pop	r12
    b048:	bf 90       	pop	r11
    b04a:	af 90       	pop	r10
    b04c:	9f 90       	pop	r9
    b04e:	8f 90       	pop	r8
    b050:	7f 90       	pop	r7
    b052:	6f 90       	pop	r6
    b054:	5f 90       	pop	r5
    b056:	4f 90       	pop	r4
    b058:	3f 90       	pop	r3
    b05a:	2f 90       	pop	r2
    b05c:	08 95       	ret

0000b05e <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_date_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4177
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
  }
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    b05e:	af 92       	push	r10
    b060:	bf 92       	push	r11
    b062:	cf 92       	push	r12
    b064:	df 92       	push	r13
    b066:	ef 92       	push	r14
    b068:	ff 92       	push	r15
    b06a:	0f 93       	push	r16
    b06c:	1f 93       	push	r17
    b06e:	cf 93       	push	r28
    b070:	df 93       	push	r29
    b072:	cd b7       	in	r28, 0x3d	; 61
    b074:	de b7       	in	r29, 0x3e	; 62
    b076:	60 97       	sbiw	r28, 0x10	; 16
    b078:	0f b6       	in	r0, 0x3f	; 63
    b07a:	f8 94       	cli
    b07c:	de bf       	out	0x3e, r29	; 62
    b07e:	0f be       	out	0x3f, r0	; 63
    b080:	cd bf       	out	0x3d, r28	; 61
    b082:	5c 01       	movw	r10, r24
    b084:	8b 01       	movw	r16, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3154
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    b086:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
    b08a:	9e 01       	movw	r18, r28
    b08c:	2f 5f       	subi	r18, 0xFF	; 255
    b08e:	3f 4f       	sbci	r19, 0xFF	; 255
    b090:	69 01       	movw	r12, r18
_Z27display_element_show_date_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4179
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  char str1[16];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    b092:	80 fd       	sbrc	r24, 0
    b094:	4e c0       	rjmp	.+156    	; 0xb132 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xd4>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    b096:	80 91 74 12 	lds	r24, 0x1274	; 0x801274 <now>
    b09a:	90 e0       	ldi	r25, 0x00	; 0
    b09c:	80 53       	subi	r24, 0x30	; 48
    b09e:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4181
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
    b0a0:	9f 93       	push	r25
    b0a2:	8f 93       	push	r24
    b0a4:	80 91 75 12 	lds	r24, 0x1275	; 0x801275 <now+0x1>
    b0a8:	1f 92       	push	r1
    b0aa:	8f 93       	push	r24
    b0ac:	80 91 76 12 	lds	r24, 0x1276	; 0x801276 <now+0x2>
    b0b0:	1f 92       	push	r1
    b0b2:	8f 93       	push	r24
    b0b4:	8b e6       	ldi	r24, 0x6B	; 107
    b0b6:	93 e0       	ldi	r25, 0x03	; 3
    b0b8:	9f 93       	push	r25
    b0ba:	8f 93       	push	r24
    b0bc:	3f 93       	push	r19
    b0be:	2f 93       	push	r18
    b0c0:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
    b0c4:	0f b6       	in	r0, 0x3f	; 63
    b0c6:	f8 94       	cli
    b0c8:	de bf       	out	0x3e, r29	; 62
    b0ca:	0f be       	out	0x3f, r0	; 63
    b0cc:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    b0ce:	8f ef       	ldi	r24, 0xFF	; 255
    b0d0:	9f ef       	ldi	r25, 0xFF	; 255
    b0d2:	90 93 c4 0f 	sts	0x0FC4, r25	; 0x800fc4 <my_lcd+0xb>
    b0d6:	80 93 c3 0f 	sts	0x0FC3, r24	; 0x800fc3 <my_lcd+0xa>
_Z27display_element_show_date_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4187
  }
  else
  {
    strcpy_P(str1, new_text_date_error);
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
    b0da:	4e e8       	ldi	r20, 0x8E	; 142
    b0dc:	50 e0       	ldi	r21, 0x00	; 0
    b0de:	b8 01       	movw	r22, r16
    b0e0:	c5 01       	movw	r24, r10
    b0e2:	0e 94 21 ad 	call	0x15a42	; 0x15a42 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.228]>
    b0e6:	b8 01       	movw	r22, r16
    b0e8:	6f 5f       	subi	r22, 0xFF	; 255
    b0ea:	7f 4f       	sbci	r23, 0xFF	; 255
    b0ec:	4e e8       	ldi	r20, 0x8E	; 142
    b0ee:	50 e0       	ldi	r21, 0x00	; 0
    b0f0:	c5 01       	movw	r24, r10
    b0f2:	0e 94 21 ad 	call	0x15a42	; 0x15a42 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.228]>
    b0f6:	a8 01       	movw	r20, r16
    b0f8:	4e 5f       	subi	r20, 0xFE	; 254
    b0fa:	5f 4f       	sbci	r21, 0xFF	; 255
    b0fc:	ee 24       	eor	r14, r14
    b0fe:	ea 94       	dec	r14
    b100:	fe 2c       	mov	r15, r14
    b102:	10 e0       	ldi	r17, 0x00	; 0
    b104:	00 e0       	ldi	r16, 0x00	; 0
    b106:	23 e0       	ldi	r18, 0x03	; 3
    b108:	b5 01       	movw	r22, r10
    b10a:	c6 01       	movw	r24, r12
    b10c:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4188
}
    b110:	60 96       	adiw	r28, 0x10	; 16
    b112:	0f b6       	in	r0, 0x3f	; 63
    b114:	f8 94       	cli
    b116:	de bf       	out	0x3e, r29	; 62
    b118:	0f be       	out	0x3f, r0	; 63
    b11a:	cd bf       	out	0x3d, r28	; 61
    b11c:	df 91       	pop	r29
    b11e:	cf 91       	pop	r28
    b120:	1f 91       	pop	r17
    b122:	0f 91       	pop	r16
    b124:	ff 90       	pop	r15
    b126:	ef 90       	pop	r14
    b128:	df 90       	pop	r13
    b12a:	cf 90       	pop	r12
    b12c:	bf 90       	pop	r11
    b12e:	af 90       	pop	r10
    b130:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4185
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
  }
  else
  {
    strcpy_P(str1, new_text_date_error);
    b132:	6f eb       	ldi	r22, 0xBF	; 191
    b134:	70 e7       	ldi	r23, 0x70	; 112
    b136:	c9 01       	movw	r24, r18
    b138:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
    b13c:	c8 cf       	rjmp	.-112    	; 0xb0ce <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x70>

0000b13e <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
    b13e:	cf 93       	push	r28
    b140:	c8 2f       	mov	r28, r24
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    b142:	68 2f       	mov	r22, r24
    b144:	85 e6       	ldi	r24, 0x65	; 101
    b146:	9d e0       	ldi	r25, 0x0D	; 13
    b148:	0e 94 9d d0 	call	0x1a13a	; 0x1a13a <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
    b14c:	8c 2f       	mov	r24, r28
    b14e:	cc 0f       	add	r28, r28
    b150:	99 0b       	sbc	r25, r25
    b152:	cf 91       	pop	r28
    b154:	08 95       	ret

0000b156 <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    b156:	1f 92       	push	r1
    b158:	0f 92       	push	r0
    b15a:	0f b6       	in	r0, 0x3f	; 63
    b15c:	0f 92       	push	r0
    b15e:	11 24       	eor	r1, r1
    b160:	0b b6       	in	r0, 0x3b	; 59
    b162:	0f 92       	push	r0
    b164:	2f 93       	push	r18
    b166:	3f 93       	push	r19
    b168:	4f 93       	push	r20
    b16a:	5f 93       	push	r21
    b16c:	6f 93       	push	r22
    b16e:	7f 93       	push	r23
    b170:	8f 93       	push	r24
    b172:	9f 93       	push	r25
    b174:	af 93       	push	r26
    b176:	bf 93       	push	r27
    b178:	ef 93       	push	r30
    b17a:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    b17c:	85 e6       	ldi	r24, 0x65	; 101
    b17e:	9d e0       	ldi	r25, 0x0D	; 13
    b180:	0e 94 7c d0 	call	0x1a0f8	; 0x1a0f8 <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    b184:	ff 91       	pop	r31
    b186:	ef 91       	pop	r30
    b188:	bf 91       	pop	r27
    b18a:	af 91       	pop	r26
    b18c:	9f 91       	pop	r25
    b18e:	8f 91       	pop	r24
    b190:	7f 91       	pop	r23
    b192:	6f 91       	pop	r22
    b194:	5f 91       	pop	r21
    b196:	4f 91       	pop	r20
    b198:	3f 91       	pop	r19
    b19a:	2f 91       	pop	r18
    b19c:	0f 90       	pop	r0
    b19e:	0b be       	out	0x3b, r0	; 59
    b1a0:	0f 90       	pop	r0
    b1a2:	0f be       	out	0x3f, r0	; 63
    b1a4:	0f 90       	pop	r0
    b1a6:	1f 90       	pop	r1
    b1a8:	18 95       	reti

0000b1aa <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    b1aa:	1f 92       	push	r1
    b1ac:	0f 92       	push	r0
    b1ae:	0f b6       	in	r0, 0x3f	; 63
    b1b0:	0f 92       	push	r0
    b1b2:	11 24       	eor	r1, r1
    b1b4:	0b b6       	in	r0, 0x3b	; 59
    b1b6:	0f 92       	push	r0
    b1b8:	2f 93       	push	r18
    b1ba:	8f 93       	push	r24
    b1bc:	9f 93       	push	r25
    b1be:	ef 93       	push	r30
    b1c0:	ff 93       	push	r31
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    b1c2:	e0 91 75 0d 	lds	r30, 0x0D75	; 0x800d75 <Serial+0x10>
    b1c6:	f0 91 76 0d 	lds	r31, 0x0D76	; 0x800d76 <Serial+0x11>
    b1ca:	80 81       	ld	r24, Z
    b1cc:	e0 91 7b 0d 	lds	r30, 0x0D7B	; 0x800d7b <Serial+0x16>
    b1d0:	f0 91 7c 0d 	lds	r31, 0x0D7C	; 0x800d7c <Serial+0x17>
    b1d4:	82 fd       	sbrc	r24, 2
    b1d6:	1d c0       	rjmp	.+58     	; 0xb212 <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    b1d8:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    b1da:	80 91 7e 0d 	lds	r24, 0x0D7E	; 0x800d7e <Serial+0x19>
    b1de:	8f 5f       	subi	r24, 0xFF	; 255
    b1e0:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    b1e2:	20 91 7f 0d 	lds	r18, 0x0D7F	; 0x800d7f <Serial+0x1a>
    b1e6:	82 17       	cp	r24, r18
    b1e8:	41 f0       	breq	.+16     	; 0xb1fa <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    b1ea:	e0 91 7e 0d 	lds	r30, 0x0D7E	; 0x800d7e <Serial+0x19>
    b1ee:	f0 e0       	ldi	r31, 0x00	; 0
    b1f0:	eb 59       	subi	r30, 0x9B	; 155
    b1f2:	f2 4f       	sbci	r31, 0xF2	; 242
    b1f4:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    b1f6:	80 93 7e 0d 	sts	0x0D7E, r24	; 0x800d7e <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    b1fa:	ff 91       	pop	r31
    b1fc:	ef 91       	pop	r30
    b1fe:	9f 91       	pop	r25
    b200:	8f 91       	pop	r24
    b202:	2f 91       	pop	r18
    b204:	0f 90       	pop	r0
    b206:	0b be       	out	0x3b, r0	; 59
    b208:	0f 90       	pop	r0
    b20a:	0f be       	out	0x3f, r0	; 63
    b20c:	0f 90       	pop	r0
    b20e:	1f 90       	pop	r1
    b210:	18 95       	reti
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    b212:	80 81       	ld	r24, Z
    b214:	f2 cf       	rjmp	.-28     	; 0xb1fa <__vector_25+0x50>

0000b216 <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    b216:	1f 93       	push	r17
    b218:	cf 93       	push	r28
    b21a:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    b21c:	28 2f       	mov	r18, r24
    b21e:	30 e0       	ldi	r19, 0x00	; 0
    b220:	f9 01       	movw	r30, r18
    b222:	e4 5e       	subi	r30, 0xE4	; 228
    b224:	fb 48       	sbci	r31, 0x8B	; 139
    b226:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    b228:	f9 01       	movw	r30, r18
    b22a:	e5 5f       	subi	r30, 0xF5	; 245
    b22c:	f4 48       	sbci	r31, 0x84	; 132
    b22e:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    b230:	f9 01       	movw	r30, r18
    b232:	ef 5a       	subi	r30, 0xAF	; 175
    b234:	f4 48       	sbci	r31, 0x84	; 132
    b236:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    b238:	cc 23       	and	r28, r28
    b23a:	a9 f0       	breq	.+42     	; 0xb266 <digitalWrite+0x50>
    b23c:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    b23e:	81 11       	cpse	r24, r1
    b240:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    b244:	ec 2f       	mov	r30, r28
    b246:	f0 e0       	ldi	r31, 0x00	; 0
    b248:	ee 0f       	add	r30, r30
    b24a:	ff 1f       	adc	r31, r31
    b24c:	ef 5b       	subi	r30, 0xBF	; 191
    b24e:	f4 48       	sbci	r31, 0x84	; 132
    b250:	a5 91       	lpm	r26, Z+
    b252:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    b254:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    b256:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    b258:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    b25a:	11 11       	cpse	r17, r1
    b25c:	08 c0       	rjmp	.+16     	; 0xb26e <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    b25e:	d0 95       	com	r29
    b260:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    b262:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    b264:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:212
}
    b266:	df 91       	pop	r29
    b268:	cf 91       	pop	r28
    b26a:	1f 91       	pop	r17
    b26c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    b26e:	de 2b       	or	r29, r30
    b270:	f8 cf       	rjmp	.-16     	; 0xb262 <digitalWrite+0x4c>

0000b272 <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    b272:	cf 93       	push	r28
    b274:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    b276:	90 e0       	ldi	r25, 0x00	; 0
    b278:	fc 01       	movw	r30, r24
    b27a:	e5 5f       	subi	r30, 0xF5	; 245
    b27c:	f4 48       	sbci	r31, 0x84	; 132
    b27e:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    b280:	8f 5a       	subi	r24, 0xAF	; 175
    b282:	94 48       	sbci	r25, 0x84	; 132
    b284:	fc 01       	movw	r30, r24
    b286:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    b288:	88 23       	and	r24, r24
    b28a:	c9 f0       	breq	.+50     	; 0xb2be <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    b28c:	90 e0       	ldi	r25, 0x00	; 0
    b28e:	88 0f       	add	r24, r24
    b290:	99 1f       	adc	r25, r25
    b292:	fc 01       	movw	r30, r24
    b294:	e4 5f       	subi	r30, 0xF4	; 244
    b296:	fb 48       	sbci	r31, 0x8B	; 139
    b298:	a5 91       	lpm	r26, Z+
    b29a:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    b29c:	fc 01       	movw	r30, r24
    b29e:	ef 5b       	subi	r30, 0xBF	; 191
    b2a0:	f4 48       	sbci	r31, 0x84	; 132
    b2a2:	c5 91       	lpm	r28, Z+
    b2a4:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    b2a6:	61 11       	cpse	r22, r1
    b2a8:	0d c0       	rjmp	.+26     	; 0xb2c4 <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    b2aa:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    b2ac:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    b2ae:	8c 91       	ld	r24, X
    b2b0:	20 95       	com	r18
    b2b2:	82 23       	and	r24, r18
    b2b4:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    b2b6:	88 81       	ld	r24, Y
    b2b8:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    b2ba:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    b2bc:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    b2be:	df 91       	pop	r29
    b2c0:	cf 91       	pop	r28
    b2c2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    b2c4:	62 30       	cpi	r22, 0x02	; 2
    b2c6:	51 f4       	brne	.+20     	; 0xb2dc <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    b2c8:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    b2ca:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    b2cc:	3c 91       	ld	r19, X
    b2ce:	82 2f       	mov	r24, r18
    b2d0:	80 95       	com	r24
    b2d2:	83 23       	and	r24, r19
    b2d4:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    b2d6:	e8 81       	ld	r30, Y
    b2d8:	2e 2b       	or	r18, r30
    b2da:	ef cf       	rjmp	.-34     	; 0xb2ba <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    b2dc:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    b2de:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    b2e0:	ec 91       	ld	r30, X
    b2e2:	2e 2b       	or	r18, r30
    b2e4:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    b2e6:	8f bf       	out	0x3f, r24	; 63
    b2e8:	ea cf       	rjmp	.-44     	; 0xb2be <pinMode+0x4c>

0000b2ea <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:15
    _ckp = 0;
    _order = MSBFIRST;
    digitalWrite(_sck, _ckp ? HIGH : LOW);
}

void SoftSPIB::begin() {
    b2ea:	cf 93       	push	r28
    b2ec:	df 93       	push	r29
    b2ee:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:16
    pinMode(_mosi, OUTPUT);
    b2f0:	61 e0       	ldi	r22, 0x01	; 1
    b2f2:	8c 81       	ldd	r24, Y+4	; 0x04
    b2f4:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:17
    pinMode(_miso, INPUT);
    b2f8:	60 e0       	ldi	r22, 0x00	; 0
    b2fa:	8b 81       	ldd	r24, Y+3	; 0x03
    b2fc:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
    pinMode(_sck, OUTPUT);
    b300:	61 e0       	ldi	r22, 0x01	; 1
    b302:	8d 81       	ldd	r24, Y+5	; 0x05
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:19
}
    b304:	df 91       	pop	r29
    b306:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
}

void SoftSPIB::begin() {
    pinMode(_mosi, OUTPUT);
    pinMode(_miso, INPUT);
    pinMode(_sck, OUTPUT);
    b308:	0c 94 39 59 	jmp	0xb272	; 0xb272 <pinMode>

0000b30c <delayMicroseconds>:
delayMicroseconds():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    b30c:	82 30       	cpi	r24, 0x02	; 2
    b30e:	91 05       	cpc	r25, r1
    b310:	38 f0       	brcs	.+14     	; 0xb320 <delayMicroseconds+0x14>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    b312:	88 0f       	add	r24, r24
    b314:	99 1f       	adc	r25, r25
    b316:	88 0f       	add	r24, r24
    b318:	99 1f       	adc	r25, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    b31a:	05 97       	sbiw	r24, 0x05	; 5
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    b31c:	01 97       	sbiw	r24, 0x01	; 1
    b31e:	f1 f7       	brne	.-4      	; 0xb31c <delayMicroseconds+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    b320:	08 95       	ret

0000b322 <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:396
#endif
#endif // 0
}

void delay(unsigned long ms)
{
    b322:	8f 92       	push	r8
    b324:	9f 92       	push	r9
    b326:	af 92       	push	r10
    b328:	bf 92       	push	r11
    b32a:	cf 92       	push	r12
    b32c:	df 92       	push	r13
    b32e:	ef 92       	push	r14
    b330:	ff 92       	push	r15
    b332:	6b 01       	movw	r12, r22
    b334:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    b336:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <micros>
    b33a:	4b 01       	movw	r8, r22
    b33c:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    b33e:	c1 14       	cp	r12, r1
    b340:	d1 04       	cpc	r13, r1
    b342:	e1 04       	cpc	r14, r1
    b344:	f1 04       	cpc	r15, r1
    b346:	b9 f0       	breq	.+46     	; 0xb376 <delay+0x54>
    b348:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <micros>
    b34c:	68 19       	sub	r22, r8
    b34e:	79 09       	sbc	r23, r9
    b350:	8a 09       	sbc	r24, r10
    b352:	9b 09       	sbc	r25, r11
    b354:	68 3e       	cpi	r22, 0xE8	; 232
    b356:	73 40       	sbci	r23, 0x03	; 3
    b358:	81 05       	cpc	r24, r1
    b35a:	91 05       	cpc	r25, r1
    b35c:	80 f3       	brcs	.-32     	; 0xb33e <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    b35e:	21 e0       	ldi	r18, 0x01	; 1
    b360:	c2 1a       	sub	r12, r18
    b362:	d1 08       	sbc	r13, r1
    b364:	e1 08       	sbc	r14, r1
    b366:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    b368:	88 ee       	ldi	r24, 0xE8	; 232
    b36a:	88 0e       	add	r8, r24
    b36c:	83 e0       	ldi	r24, 0x03	; 3
    b36e:	98 1e       	adc	r9, r24
    b370:	a1 1c       	adc	r10, r1
    b372:	b1 1c       	adc	r11, r1
    b374:	e4 cf       	rjmp	.-56     	; 0xb33e <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:406
    }
  }
}
    b376:	ff 90       	pop	r15
    b378:	ef 90       	pop	r14
    b37a:	df 90       	pop	r13
    b37c:	cf 90       	pop	r12
    b37e:	bf 90       	pop	r11
    b380:	af 90       	pop	r10
    b382:	9f 90       	pop	r9
    b384:	8f 90       	pop	r8
    b386:	08 95       	ret

0000b388 <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    b388:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    b38a:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    b38c:	60 91 62 0b 	lds	r22, 0x0B62	; 0x800b62 <timer0_millis>
    b390:	70 91 63 0b 	lds	r23, 0x0B63	; 0x800b63 <timer0_millis+0x1>
    b394:	80 91 64 0b 	lds	r24, 0x0B64	; 0x800b64 <timer0_millis+0x2>
    b398:	90 91 65 0b 	lds	r25, 0x0B65	; 0x800b65 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    b39c:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
    b39e:	08 95       	ret

0000b3a0 <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    b3a0:	1f 92       	push	r1
    b3a2:	0f 92       	push	r0
    b3a4:	0f b6       	in	r0, 0x3f	; 63
    b3a6:	0f 92       	push	r0
    b3a8:	11 24       	eor	r1, r1
    b3aa:	2f 93       	push	r18
    b3ac:	3f 93       	push	r19
    b3ae:	8f 93       	push	r24
    b3b0:	9f 93       	push	r25
    b3b2:	af 93       	push	r26
    b3b4:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    b3b6:	80 91 62 0b 	lds	r24, 0x0B62	; 0x800b62 <timer0_millis>
    b3ba:	90 91 63 0b 	lds	r25, 0x0B63	; 0x800b63 <timer0_millis+0x1>
    b3be:	a0 91 64 0b 	lds	r26, 0x0B64	; 0x800b64 <timer0_millis+0x2>
    b3c2:	b0 91 65 0b 	lds	r27, 0x0B65	; 0x800b65 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    b3c6:	30 91 61 0b 	lds	r19, 0x0B61	; 0x800b61 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    b3ca:	23 e0       	ldi	r18, 0x03	; 3
    b3cc:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    b3ce:	2d 37       	cpi	r18, 0x7D	; 125
    b3d0:	68 f1       	brcs	.+90     	; 0xb42c <__vector_23+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    b3d2:	26 e8       	ldi	r18, 0x86	; 134
    b3d4:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    b3d6:	02 96       	adiw	r24, 0x02	; 2
    b3d8:	a1 1d       	adc	r26, r1
    b3da:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    b3dc:	20 93 61 0b 	sts	0x0B61, r18	; 0x800b61 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    b3e0:	80 93 62 0b 	sts	0x0B62, r24	; 0x800b62 <timer0_millis>
    b3e4:	90 93 63 0b 	sts	0x0B63, r25	; 0x800b63 <timer0_millis+0x1>
    b3e8:	a0 93 64 0b 	sts	0x0B64, r26	; 0x800b64 <timer0_millis+0x2>
    b3ec:	b0 93 65 0b 	sts	0x0B65, r27	; 0x800b65 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    b3f0:	80 91 66 0b 	lds	r24, 0x0B66	; 0x800b66 <timer0_overflow_count>
    b3f4:	90 91 67 0b 	lds	r25, 0x0B67	; 0x800b67 <timer0_overflow_count+0x1>
    b3f8:	a0 91 68 0b 	lds	r26, 0x0B68	; 0x800b68 <timer0_overflow_count+0x2>
    b3fc:	b0 91 69 0b 	lds	r27, 0x0B69	; 0x800b69 <timer0_overflow_count+0x3>
    b400:	01 96       	adiw	r24, 0x01	; 1
    b402:	a1 1d       	adc	r26, r1
    b404:	b1 1d       	adc	r27, r1
    b406:	80 93 66 0b 	sts	0x0B66, r24	; 0x800b66 <timer0_overflow_count>
    b40a:	90 93 67 0b 	sts	0x0B67, r25	; 0x800b67 <timer0_overflow_count+0x1>
    b40e:	a0 93 68 0b 	sts	0x0B68, r26	; 0x800b68 <timer0_overflow_count+0x2>
    b412:	b0 93 69 0b 	sts	0x0B69, r27	; 0x800b69 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    b416:	bf 91       	pop	r27
    b418:	af 91       	pop	r26
    b41a:	9f 91       	pop	r25
    b41c:	8f 91       	pop	r24
    b41e:	3f 91       	pop	r19
    b420:	2f 91       	pop	r18
    b422:	0f 90       	pop	r0
    b424:	0f be       	out	0x3f, r0	; 63
    b426:	0f 90       	pop	r0
    b428:	1f 90       	pop	r1
    b42a:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    b42c:	01 96       	adiw	r24, 0x01	; 1
    b42e:	a1 1d       	adc	r26, r1
    b430:	b1 1d       	adc	r27, r1
    b432:	d4 cf       	rjmp	.-88     	; 0xb3dc <__vector_23+0x3c>

0000b434 <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95
{
  return a2d_index;
}

ISR(ADC_vect)
{
    b434:	1f 92       	push	r1
    b436:	0f 92       	push	r0
    b438:	0f b6       	in	r0, 0x3f	; 63
    b43a:	0f 92       	push	r0
    b43c:	11 24       	eor	r1, r1
    b43e:	0b b6       	in	r0, 0x3b	; 59
    b440:	0f 92       	push	r0
    b442:	2f 93       	push	r18
    b444:	3f 93       	push	r19
    b446:	4f 93       	push	r20
    b448:	5f 93       	push	r21
    b44a:	6f 93       	push	r22
    b44c:	7f 93       	push	r23
    b44e:	8f 93       	push	r24
    b450:	9f 93       	push	r25
    b452:	af 93       	push	r26
    b454:	bf 93       	push	r27
    b456:	cf 93       	push	r28
    b458:	ef 93       	push	r30
    b45a:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
    b45c:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
    b45e:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    b462:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
    b466:	e0 91 5f 0b 	lds	r30, 0x0B5F	; 0x800b5f <a2d_interupt_func>
    b46a:	f0 91 60 0b 	lds	r31, 0x0B60	; 0x800b60 <a2d_interupt_func+0x1>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
}

ISR(ADC_vect)
{
  uint8_t back = SREG;
  a2d_data = ADCL + (ADCH<<8);
    b46e:	68 2f       	mov	r22, r24
    b470:	70 e0       	ldi	r23, 0x00	; 0
    b472:	76 2f       	mov	r23, r22
    b474:	66 27       	eor	r22, r22
    b476:	69 0f       	add	r22, r25
    b478:	71 1d       	adc	r23, r1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
    b47a:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <a2d_input>
    b47e:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
    b480:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
    b482:	ff 91       	pop	r31
    b484:	ef 91       	pop	r30
    b486:	cf 91       	pop	r28
    b488:	bf 91       	pop	r27
    b48a:	af 91       	pop	r26
    b48c:	9f 91       	pop	r25
    b48e:	8f 91       	pop	r24
    b490:	7f 91       	pop	r23
    b492:	6f 91       	pop	r22
    b494:	5f 91       	pop	r21
    b496:	4f 91       	pop	r20
    b498:	3f 91       	pop	r19
    b49a:	2f 91       	pop	r18
    b49c:	0f 90       	pop	r0
    b49e:	0b be       	out	0x3b, r0	; 59
    b4a0:	0f 90       	pop	r0
    b4a2:	0f be       	out	0x3f, r0	; 63
    b4a4:	0f 90       	pop	r0
    b4a6:	1f 90       	pop	r1
    b4a8:	18 95       	reti

0000b4aa <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:105
    return this->forceUpdate();
  }
  return true;
}

unsigned long NTPClient::getEpochTime() const {
    b4aa:	cf 92       	push	r12
    b4ac:	df 92       	push	r13
    b4ae:	ef 92       	push	r14
    b4b0:	ff 92       	push	r15
    b4b2:	0f 93       	push	r16
    b4b4:	1f 93       	push	r17
    b4b6:	cf 93       	push	r28
    b4b8:	df 93       	push	r29
    b4ba:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:106
  return this->_timeOffset + // User offset
    b4bc:	cf 80       	ldd	r12, Y+7	; 0x07
    b4be:	d8 84       	ldd	r13, Y+8	; 0x08
    b4c0:	e9 84       	ldd	r14, Y+9	; 0x09
    b4c2:	fa 84       	ldd	r15, Y+10	; 0x0a
    b4c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    b4c6:	98 89       	ldd	r25, Y+16	; 0x10
    b4c8:	a9 89       	ldd	r26, Y+17	; 0x11
    b4ca:	ba 89       	ldd	r27, Y+18	; 0x12
    b4cc:	c8 0e       	add	r12, r24
    b4ce:	d9 1e       	adc	r13, r25
    b4d0:	ea 1e       	adc	r14, r26
    b4d2:	fb 1e       	adc	r15, r27
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:108
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
    b4d4:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
    b4d8:	0b 89       	ldd	r16, Y+19	; 0x13
    b4da:	1c 89       	ldd	r17, Y+20	; 0x14
    b4dc:	2d 89       	ldd	r18, Y+21	; 0x15
    b4de:	3e 89       	ldd	r19, Y+22	; 0x16
    b4e0:	60 1b       	sub	r22, r16
    b4e2:	71 0b       	sbc	r23, r17
    b4e4:	82 0b       	sbc	r24, r18
    b4e6:	93 0b       	sbc	r25, r19
    b4e8:	28 ee       	ldi	r18, 0xE8	; 232
    b4ea:	33 e0       	ldi	r19, 0x03	; 3
    b4ec:	40 e0       	ldi	r20, 0x00	; 0
    b4ee:	50 e0       	ldi	r21, 0x00	; 0
    b4f0:	0e 94 65 ef 	call	0x1deca	; 0x1deca <__udivmodsi4>
    b4f4:	ca 01       	movw	r24, r20
    b4f6:	b9 01       	movw	r22, r18
    b4f8:	6c 0d       	add	r22, r12
    b4fa:	7d 1d       	adc	r23, r13
    b4fc:	8e 1d       	adc	r24, r14
    b4fe:	9f 1d       	adc	r25, r15
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:109
}
    b500:	df 91       	pop	r29
    b502:	cf 91       	pop	r28
    b504:	1f 91       	pop	r17
    b506:	0f 91       	pop	r16
    b508:	ff 90       	pop	r15
    b50a:	ef 90       	pop	r14
    b50c:	df 90       	pop	r13
    b50e:	cf 90       	pop	r12
    b510:	08 95       	ret

0000b512 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:52
  this->_timeOffset     = timeOffset;
  this->_poolServerName = poolServerName;
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
    b512:	cf 93       	push	r28
    b514:	df 93       	push	r29
    b516:	ec 01       	movw	r28, r24
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
    b518:	89 e3       	ldi	r24, 0x39	; 57
    b51a:	95 e0       	ldi	r25, 0x05	; 5
    b51c:	9e 83       	std	Y+6, r25	; 0x06
    b51e:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
    b520:	88 81       	ld	r24, Y
    b522:	99 81       	ldd	r25, Y+1	; 0x01
    b524:	dc 01       	movw	r26, r24
    b526:	ed 91       	ld	r30, X+
    b528:	fc 91       	ld	r31, X
    b52a:	06 84       	ldd	r0, Z+14	; 0x0e
    b52c:	f7 85       	ldd	r31, Z+15	; 0x0f
    b52e:	e0 2d       	mov	r30, r0
    b530:	69 e3       	ldi	r22, 0x39	; 57
    b532:	75 e0       	ldi	r23, 0x05	; 5
    b534:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
    b536:	81 e0       	ldi	r24, 0x01	; 1
    b538:	8a 83       	std	Y+2, r24	; 0x02
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:54
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}
    b53a:	df 91       	pop	r29
    b53c:	cf 91       	pop	r28
    b53e:	08 95       	ret

0000b540 <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
    b540:	cf 92       	push	r12
    b542:	df 92       	push	r13
    b544:	ef 92       	push	r14
    b546:	ff 92       	push	r15
    b548:	0f 93       	push	r16
    b54a:	1f 93       	push	r17
    b54c:	cf 93       	push	r28
    b54e:	df 93       	push	r29
    b550:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    b552:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
    b556:	0b 89       	ldd	r16, Y+19	; 0x13
    b558:	1c 89       	ldd	r17, Y+20	; 0x14
    b55a:	2d 89       	ldd	r18, Y+21	; 0x15
    b55c:	3e 89       	ldd	r19, Y+22	; 0x16
    b55e:	60 1b       	sub	r22, r16
    b560:	71 0b       	sbc	r23, r17
    b562:	82 0b       	sbc	r24, r18
    b564:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    b566:	cb 84       	ldd	r12, Y+11	; 0x0b
    b568:	dc 84       	ldd	r13, Y+12	; 0x0c
    b56a:	ed 84       	ldd	r14, Y+13	; 0x0d
    b56c:	fe 84       	ldd	r15, Y+14	; 0x0e
    b56e:	6c 15       	cp	r22, r12
    b570:	7d 05       	cpc	r23, r13
    b572:	8e 05       	cpc	r24, r14
    b574:	9f 05       	cpc	r25, r15
    b576:	28 f4       	brcc	.+10     	; 0xb582 <NTPClient::update()+0x42>
    b578:	01 2b       	or	r16, r17
    b57a:	02 2b       	or	r16, r18
    b57c:	03 2b       	or	r16, r19
    b57e:	09 f0       	breq	.+2      	; 0xb582 <NTPClient::update()+0x42>
    b580:	9e c0       	rjmp	.+316    	; 0xb6be <NTPClient::update()+0x17e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    b582:	8a 81       	ldd	r24, Y+2	; 0x02
    b584:	81 11       	cpse	r24, r1
    b586:	03 c0       	rjmp	.+6      	; 0xb58e <NTPClient::update()+0x4e>
    b588:	ce 01       	movw	r24, r28
    b58a:	0e 94 89 5a 	call	0xb512	; 0xb512 <NTPClient::begin()>
sendNTPPacket():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
    b58e:	7e 01       	movw	r14, r28
    b590:	87 e1       	ldi	r24, 0x17	; 23
    b592:	e8 0e       	add	r14, r24
    b594:	f1 1c       	adc	r15, r1
    b596:	8c e2       	ldi	r24, 0x2C	; 44
    b598:	fe 01       	movw	r30, r28
    b59a:	7b 96       	adiw	r30, 0x1b	; 27
    b59c:	df 01       	movw	r26, r30
    b59e:	1d 92       	st	X+, r1
    b5a0:	8a 95       	dec	r24
    b5a2:	e9 f7       	brne	.-6      	; 0xb59e <NTPClient::update()+0x5e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
    b5a4:	83 ee       	ldi	r24, 0xE3	; 227
    b5a6:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
    b5a8:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
    b5aa:	86 e0       	ldi	r24, 0x06	; 6
    b5ac:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
    b5ae:	8c ee       	ldi	r24, 0xEC	; 236
    b5b0:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
    b5b2:	81 e3       	ldi	r24, 0x31	; 49
    b5b4:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
    b5b6:	9e e4       	ldi	r25, 0x4E	; 78
    b5b8:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
    b5ba:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
    b5bc:	84 e3       	ldi	r24, 0x34	; 52
    b5be:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
    b5c0:	88 81       	ld	r24, Y
    b5c2:	99 81       	ldd	r25, Y+1	; 0x01
    b5c4:	6b 81       	ldd	r22, Y+3	; 0x03
    b5c6:	7c 81       	ldd	r23, Y+4	; 0x04
    b5c8:	dc 01       	movw	r26, r24
    b5ca:	ed 91       	ld	r30, X+
    b5cc:	fc 91       	ld	r31, X
    b5ce:	06 88       	ldd	r0, Z+22	; 0x16
    b5d0:	f7 89       	ldd	r31, Z+23	; 0x17
    b5d2:	e0 2d       	mov	r30, r0
    b5d4:	4b e7       	ldi	r20, 0x7B	; 123
    b5d6:	50 e0       	ldi	r21, 0x00	; 0
    b5d8:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
    b5da:	88 81       	ld	r24, Y
    b5dc:	99 81       	ldd	r25, Y+1	; 0x01
    b5de:	dc 01       	movw	r26, r24
    b5e0:	ed 91       	ld	r30, X+
    b5e2:	fc 91       	ld	r31, X
    b5e4:	02 80       	ldd	r0, Z+2	; 0x02
    b5e6:	f3 81       	ldd	r31, Z+3	; 0x03
    b5e8:	e0 2d       	mov	r30, r0
    b5ea:	40 e3       	ldi	r20, 0x30	; 48
    b5ec:	50 e0       	ldi	r21, 0x00	; 0
    b5ee:	b7 01       	movw	r22, r14
    b5f0:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
    b5f2:	88 81       	ld	r24, Y
    b5f4:	99 81       	ldd	r25, Y+1	; 0x01
    b5f6:	dc 01       	movw	r26, r24
    b5f8:	ed 91       	ld	r30, X+
    b5fa:	fc 91       	ld	r31, X
    b5fc:	00 8c       	ldd	r0, Z+24	; 0x18
    b5fe:	f1 8d       	ldd	r31, Z+25	; 0x19
    b600:	e0 2d       	mov	r30, r0
    b602:	19 95       	eicall
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72
  #endif

  this->sendNTPPacket();

  // Wait till data is there or timeout...
  byte timeout = 0;
    b604:	10 e0       	ldi	r17, 0x00	; 0
forceUpdate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
    b606:	6a e0       	ldi	r22, 0x0A	; 10
    b608:	70 e0       	ldi	r23, 0x00	; 0
    b60a:	80 e0       	ldi	r24, 0x00	; 0
    b60c:	90 e0       	ldi	r25, 0x00	; 0
    b60e:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
    b612:	88 81       	ld	r24, Y
    b614:	99 81       	ldd	r25, Y+1	; 0x01
    b616:	dc 01       	movw	r26, r24
    b618:	ed 91       	ld	r30, X+
    b61a:	fc 91       	ld	r31, X
    b61c:	02 8c       	ldd	r0, Z+26	; 0x1a
    b61e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    b620:	e0 2d       	mov	r30, r0
    b622:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
    b624:	15 36       	cpi	r17, 0x65	; 101
    b626:	09 f4       	brne	.+2      	; 0xb62a <NTPClient::update()+0xea>
    b628:	54 c0       	rjmp	.+168    	; 0xb6d2 <NTPClient::update()+0x192>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
    b62a:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
    b62c:	89 2b       	or	r24, r25
    b62e:	59 f3       	breq	.-42     	; 0xb606 <NTPClient::update()+0xc6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
    b630:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
    b634:	21 2f       	mov	r18, r17
    b636:	30 e0       	ldi	r19, 0x00	; 0
    b638:	a9 01       	movw	r20, r18
    b63a:	4f 5f       	subi	r20, 0xFF	; 255
    b63c:	5f 4f       	sbci	r21, 0xFF	; 255
    b63e:	ea e0       	ldi	r30, 0x0A	; 10
    b640:	e4 9f       	mul	r30, r20
    b642:	90 01       	movw	r18, r0
    b644:	e5 9f       	mul	r30, r21
    b646:	30 0d       	add	r19, r0
    b648:	11 24       	eor	r1, r1
    b64a:	89 01       	movw	r16, r18
    b64c:	33 0f       	add	r19, r19
    b64e:	22 0b       	sbc	r18, r18
    b650:	33 0b       	sbc	r19, r19
    b652:	ab 01       	movw	r20, r22
    b654:	bc 01       	movw	r22, r24
    b656:	40 1b       	sub	r20, r16
    b658:	51 0b       	sbc	r21, r17
    b65a:	62 0b       	sbc	r22, r18
    b65c:	73 0b       	sbc	r23, r19
    b65e:	4b 8b       	std	Y+19, r20	; 0x13
    b660:	5c 8b       	std	Y+20, r21	; 0x14
    b662:	6d 8b       	std	Y+21, r22	; 0x15
    b664:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
    b666:	88 81       	ld	r24, Y
    b668:	99 81       	ldd	r25, Y+1	; 0x01
    b66a:	dc 01       	movw	r26, r24
    b66c:	ed 91       	ld	r30, X+
    b66e:	fc 91       	ld	r31, X
    b670:	04 8c       	ldd	r0, Z+28	; 0x1c
    b672:	f5 8d       	ldd	r31, Z+29	; 0x1d
    b674:	e0 2d       	mov	r30, r0
    b676:	40 e3       	ldi	r20, 0x30	; 48
    b678:	50 e0       	ldi	r21, 0x00	; 0
    b67a:	b7 01       	movw	r22, r14
    b67c:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
    b67e:	fe 01       	movw	r30, r28
    b680:	ff 96       	adiw	r30, 0x3f	; 63
    b682:	80 81       	ld	r24, Z
    b684:	91 81       	ldd	r25, Z+1	; 0x01
    b686:	98 27       	eor	r25, r24
    b688:	89 27       	eor	r24, r25
    b68a:	98 27       	eor	r25, r24
    b68c:	b0 e0       	ldi	r27, 0x00	; 0
    b68e:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
    b690:	dc 01       	movw	r26, r24
    b692:	99 27       	eor	r25, r25
    b694:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
    b696:	32 96       	adiw	r30, 0x02	; 2
    b698:	40 81       	ld	r20, Z
    b69a:	51 81       	ldd	r21, Z+1	; 0x01
    b69c:	54 27       	eor	r21, r20
    b69e:	45 27       	eor	r20, r21
    b6a0:	54 27       	eor	r21, r20
    b6a2:	70 e0       	ldi	r23, 0x00	; 0
    b6a4:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
    b6a6:	84 2b       	or	r24, r20
    b6a8:	95 2b       	or	r25, r21
    b6aa:	a6 2b       	or	r26, r22
    b6ac:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
    b6ae:	80 58       	subi	r24, 0x80	; 128
    b6b0:	9e 47       	sbci	r25, 0x7E	; 126
    b6b2:	aa 4a       	sbci	r26, 0xAA	; 170
    b6b4:	b3 48       	sbci	r27, 0x83	; 131
    b6b6:	8f 87       	std	Y+15, r24	; 0x0f
    b6b8:	98 8b       	std	Y+16, r25	; 0x10
    b6ba:	a9 8b       	std	Y+17, r26	; 0x11
    b6bc:	ba 8b       	std	Y+18, r27	; 0x12
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:102
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
  }
  return true;
    b6be:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
}
    b6c0:	df 91       	pop	r29
    b6c2:	cf 91       	pop	r28
    b6c4:	1f 91       	pop	r17
    b6c6:	0f 91       	pop	r16
    b6c8:	ff 90       	pop	r15
    b6ca:	ef 90       	pop	r14
    b6cc:	df 90       	pop	r13
    b6ce:	cf 90       	pop	r12
    b6d0:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
    b6d2:	80 e0       	ldi	r24, 0x00	; 0
    b6d4:	f5 cf       	rjmp	.-22     	; 0xb6c0 <NTPClient::update()+0x180>

0000b6d6 <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    b6d6:	1f 92       	push	r1
    b6d8:	0f 92       	push	r0
    b6da:	0f b6       	in	r0, 0x3f	; 63
    b6dc:	0f 92       	push	r0
    b6de:	11 24       	eor	r1, r1
    b6e0:	0b b6       	in	r0, 0x3b	; 59
    b6e2:	0f 92       	push	r0
    b6e4:	2f 93       	push	r18
    b6e6:	3f 93       	push	r19
    b6e8:	4f 93       	push	r20
    b6ea:	5f 93       	push	r21
    b6ec:	6f 93       	push	r22
    b6ee:	7f 93       	push	r23
    b6f0:	8f 93       	push	r24
    b6f2:	9f 93       	push	r25
    b6f4:	af 93       	push	r26
    b6f6:	bf 93       	push	r27
    b6f8:	ef 93       	push	r30
    b6fa:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
    b6fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    b700:	88 7f       	andi	r24, 0xF8	; 248
    b702:	80 36       	cpi	r24, 0x60	; 96
    b704:	09 f4       	brne	.+2      	; 0xb708 <__vector_39+0x32>
    b706:	4d c0       	rjmp	.+154    	; 0xb7a2 <__vector_39+0xcc>
    b708:	08 f0       	brcs	.+2      	; 0xb70c <__vector_39+0x36>
    b70a:	40 c0       	rjmp	.+128    	; 0xb78c <__vector_39+0xb6>
    b70c:	88 32       	cpi	r24, 0x28	; 40
    b70e:	09 f4       	brne	.+2      	; 0xb712 <__vector_39+0x3c>
    b710:	a9 c0       	rjmp	.+338    	; 0xb864 <__vector_39+0x18e>
    b712:	28 f5       	brcc	.+74     	; 0xb75e <__vector_39+0x88>
    b714:	80 31       	cpi	r24, 0x10	; 16
    b716:	09 f4       	brne	.+2      	; 0xb71a <__vector_39+0x44>
    b718:	9d c0       	rjmp	.+314    	; 0xb854 <__vector_39+0x17e>
    b71a:	c8 f4       	brcc	.+50     	; 0xb74e <__vector_39+0x78>
    b71c:	88 23       	and	r24, r24
    b71e:	09 f4       	brne	.+2      	; 0xb722 <__vector_39+0x4c>
    b720:	fb c0       	rjmp	.+502    	; 0xb918 <__vector_39+0x242>
    b722:	88 30       	cpi	r24, 0x08	; 8
    b724:	09 f4       	brne	.+2      	; 0xb728 <__vector_39+0x52>
    b726:	96 c0       	rjmp	.+300    	; 0xb854 <__vector_39+0x17e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    b728:	ff 91       	pop	r31
    b72a:	ef 91       	pop	r30
    b72c:	bf 91       	pop	r27
    b72e:	af 91       	pop	r26
    b730:	9f 91       	pop	r25
    b732:	8f 91       	pop	r24
    b734:	7f 91       	pop	r23
    b736:	6f 91       	pop	r22
    b738:	5f 91       	pop	r21
    b73a:	4f 91       	pop	r20
    b73c:	3f 91       	pop	r19
    b73e:	2f 91       	pop	r18
    b740:	0f 90       	pop	r0
    b742:	0b be       	out	0x3b, r0	; 59
    b744:	0f 90       	pop	r0
    b746:	0f be       	out	0x3f, r0	; 63
    b748:	0f 90       	pop	r0
    b74a:	1f 90       	pop	r1
    b74c:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    b74e:	88 31       	cpi	r24, 0x18	; 24
    b750:	09 f4       	brne	.+2      	; 0xb754 <__vector_39+0x7e>
    b752:	88 c0       	rjmp	.+272    	; 0xb864 <__vector_39+0x18e>
    b754:	80 32       	cpi	r24, 0x20	; 32
    b756:	41 f7       	brne	.-48     	; 0xb728 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    b758:	80 93 62 0d 	sts	0x0D62, r24	; 0x800d62 <twi_error.lto_priv.273>
    b75c:	14 c0       	rjmp	.+40     	; 0xb786 <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    b75e:	80 34       	cpi	r24, 0x40	; 64
    b760:	09 f4       	brne	.+2      	; 0xb764 <__vector_39+0x8e>
    b762:	9d c0       	rjmp	.+314    	; 0xb89e <__vector_39+0x1c8>
    b764:	40 f4       	brcc	.+16     	; 0xb776 <__vector_39+0xa0>
    b766:	80 33       	cpi	r24, 0x30	; 48
    b768:	b9 f3       	breq	.-18     	; 0xb758 <__vector_39+0x82>
    b76a:	88 33       	cpi	r24, 0x38	; 56
    b76c:	e9 f6       	brne	.-70     	; 0xb728 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    b76e:	80 93 62 0d 	sts	0x0D62, r24	; 0x800d62 <twi_error.lto_priv.273>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    b772:	85 ec       	ldi	r24, 0xC5	; 197
    b774:	b0 c0       	rjmp	.+352    	; 0xb8d6 <__vector_39+0x200>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    b776:	80 35       	cpi	r24, 0x50	; 80
    b778:	09 f4       	brne	.+2      	; 0xb77c <__vector_39+0xa6>
    b77a:	85 c0       	rjmp	.+266    	; 0xb886 <__vector_39+0x1b0>
    b77c:	88 35       	cpi	r24, 0x58	; 88
    b77e:	09 f4       	brne	.+2      	; 0xb782 <__vector_39+0xac>
    b780:	96 c0       	rjmp	.+300    	; 0xb8ae <__vector_39+0x1d8>
    b782:	88 34       	cpi	r24, 0x48	; 72
    b784:	89 f6       	brne	.-94     	; 0xb728 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    b786:	0e 94 c9 3e 	call	0x7d92	; 0x7d92 <twi_stop>
    b78a:	ce cf       	rjmp	.-100    	; 0xb728 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    b78c:	88 39       	cpi	r24, 0x98	; 152
    b78e:	09 f4       	brne	.+2      	; 0xb792 <__vector_39+0xbc>
    b790:	8c c0       	rjmp	.+280    	; 0xb8aa <__vector_39+0x1d4>
    b792:	38 f5       	brcc	.+78     	; 0xb7e2 <__vector_39+0x10c>
    b794:	88 37       	cpi	r24, 0x78	; 120
    b796:	29 f0       	breq	.+10     	; 0xb7a2 <__vector_39+0xcc>
    b798:	50 f4       	brcc	.+20     	; 0xb7ae <__vector_39+0xd8>
    b79a:	88 36       	cpi	r24, 0x68	; 104
    b79c:	11 f0       	breq	.+4      	; 0xb7a2 <__vector_39+0xcc>
    b79e:	80 37       	cpi	r24, 0x70	; 112
    b7a0:	19 f6       	brne	.-122    	; 0xb728 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    b7a2:	83 e0       	ldi	r24, 0x03	; 3
    b7a4:	80 93 64 0d 	sts	0x0D64, r24	; 0x800d64 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    b7a8:	10 92 5c 0b 	sts	0x0B5C, r1	; 0x800b5c <twi_rxBufferIndex>
    b7ac:	57 c0       	rjmp	.+174    	; 0xb85c <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    b7ae:	88 38       	cpi	r24, 0x88	; 136
    b7b0:	09 f4       	brne	.+2      	; 0xb7b4 <__vector_39+0xde>
    b7b2:	7b c0       	rjmp	.+246    	; 0xb8aa <__vector_39+0x1d4>
    b7b4:	80 39       	cpi	r24, 0x90	; 144
    b7b6:	19 f0       	breq	.+6      	; 0xb7be <__vector_39+0xe8>
    b7b8:	80 38       	cpi	r24, 0x80	; 128
    b7ba:	09 f0       	breq	.+2      	; 0xb7be <__vector_39+0xe8>
    b7bc:	b5 cf       	rjmp	.-150    	; 0xb728 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    b7be:	80 91 5c 0b 	lds	r24, 0x0B5C	; 0x800b5c <twi_rxBufferIndex>
    b7c2:	80 32       	cpi	r24, 0x20	; 32
    b7c4:	08 f0       	brcs	.+2      	; 0xb7c8 <__vector_39+0xf2>
    b7c6:	71 c0       	rjmp	.+226    	; 0xb8aa <__vector_39+0x1d4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    b7c8:	e0 91 5c 0b 	lds	r30, 0x0B5C	; 0x800b5c <twi_rxBufferIndex>
    b7cc:	81 e0       	ldi	r24, 0x01	; 1
    b7ce:	8e 0f       	add	r24, r30
    b7d0:	80 93 5c 0b 	sts	0x0B5C, r24	; 0x800b5c <twi_rxBufferIndex>
    b7d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    b7d8:	f0 e0       	ldi	r31, 0x00	; 0
    b7da:	e4 5c       	subi	r30, 0xC4	; 196
    b7dc:	f4 4f       	sbci	r31, 0xF4	; 244
    b7de:	80 83       	st	Z, r24
    b7e0:	3d c0       	rjmp	.+122    	; 0xb85c <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    b7e2:	80 3b       	cpi	r24, 0xB0	; 176
    b7e4:	39 f0       	breq	.+14     	; 0xb7f4 <__vector_39+0x11e>
    b7e6:	e0 f4       	brcc	.+56     	; 0xb820 <__vector_39+0x14a>
    b7e8:	80 3a       	cpi	r24, 0xA0	; 160
    b7ea:	09 f4       	brne	.+2      	; 0xb7ee <__vector_39+0x118>
    b7ec:	79 c0       	rjmp	.+242    	; 0xb8e0 <__vector_39+0x20a>
    b7ee:	88 3a       	cpi	r24, 0xA8	; 168
    b7f0:	09 f0       	breq	.+2      	; 0xb7f4 <__vector_39+0x11e>
    b7f2:	9a cf       	rjmp	.-204    	; 0xb728 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    b7f4:	84 e0       	ldi	r24, 0x04	; 4
    b7f6:	80 93 64 0d 	sts	0x0D64, r24	; 0x800d64 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    b7fa:	10 92 3b 0b 	sts	0x0B3B, r1	; 0x800b3b <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    b7fe:	10 92 3a 0b 	sts	0x0B3A, r1	; 0x800b3a <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    b802:	e0 91 b2 0c 	lds	r30, 0x0CB2	; 0x800cb2 <twi_onSlaveTransmit.lto_priv.275>
    b806:	f0 91 b3 0c 	lds	r31, 0x0CB3	; 0x800cb3 <twi_onSlaveTransmit.lto_priv.275+0x1>
    b80a:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    b80c:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <twi_txBufferLength>
    b810:	81 11       	cpse	r24, r1
    b812:	0f c0       	rjmp	.+30     	; 0xb832 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
    b814:	81 e0       	ldi	r24, 0x01	; 1
    b816:	80 93 3a 0b 	sts	0x0B3A, r24	; 0x800b3a <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    b81a:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <twi_txBuffer>
    b81e:	09 c0       	rjmp	.+18     	; 0xb832 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    b820:	80 3c       	cpi	r24, 0xC0	; 192
    b822:	09 f4       	brne	.+2      	; 0xb826 <__vector_39+0x150>
    b824:	a6 cf       	rjmp	.-180    	; 0xb772 <__vector_39+0x9c>
    b826:	88 3c       	cpi	r24, 0xC8	; 200
    b828:	09 f4       	brne	.+2      	; 0xb82c <__vector_39+0x156>
    b82a:	a3 cf       	rjmp	.-186    	; 0xb772 <__vector_39+0x9c>
    b82c:	88 3b       	cpi	r24, 0xB8	; 184
    b82e:	09 f0       	breq	.+2      	; 0xb832 <__vector_39+0x15c>
    b830:	7b cf       	rjmp	.-266    	; 0xb728 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    b832:	e0 91 3b 0b 	lds	r30, 0x0B3B	; 0x800b3b <twi_txBufferIndex>
    b836:	81 e0       	ldi	r24, 0x01	; 1
    b838:	8e 0f       	add	r24, r30
    b83a:	80 93 3b 0b 	sts	0x0B3B, r24	; 0x800b3b <twi_txBufferIndex>
    b83e:	f0 e0       	ldi	r31, 0x00	; 0
    b840:	e6 5e       	subi	r30, 0xE6	; 230
    b842:	f4 4f       	sbci	r31, 0xF4	; 244
    b844:	80 81       	ld	r24, Z
    b846:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    b84a:	90 91 3b 0b 	lds	r25, 0x0B3B	; 0x800b3b <twi_txBufferIndex>
    b84e:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <twi_txBufferLength>
    b852:	29 c0       	rjmp	.+82     	; 0xb8a6 <__vector_39+0x1d0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    b854:	80 91 5f 0d 	lds	r24, 0x0D5F	; 0x800d5f <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    b858:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    b85c:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    b85e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    b862:	62 cf       	rjmp	.-316    	; 0xb728 <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    b864:	90 91 61 0d 	lds	r25, 0x0D61	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    b868:	80 91 60 0d 	lds	r24, 0x0D60	; 0x800d60 <twi_masterBufferLength.lto_priv.268>
    b86c:	98 17       	cp	r25, r24
    b86e:	58 f5       	brcc	.+86     	; 0xb8c6 <__vector_39+0x1f0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    b870:	e0 91 61 0d 	lds	r30, 0x0D61	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    b874:	81 e0       	ldi	r24, 0x01	; 1
    b876:	8e 0f       	add	r24, r30
    b878:	80 93 61 0d 	sts	0x0D61, r24	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    b87c:	f0 e0       	ldi	r31, 0x00	; 0
    b87e:	e2 5c       	subi	r30, 0xC2	; 194
    b880:	f2 4f       	sbci	r31, 0xF2	; 242
    b882:	80 81       	ld	r24, Z
    b884:	e9 cf       	rjmp	.-46     	; 0xb858 <__vector_39+0x182>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    b886:	e0 91 61 0d 	lds	r30, 0x0D61	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    b88a:	81 e0       	ldi	r24, 0x01	; 1
    b88c:	8e 0f       	add	r24, r30
    b88e:	80 93 61 0d 	sts	0x0D61, r24	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    b892:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    b896:	f0 e0       	ldi	r31, 0x00	; 0
    b898:	e2 5c       	subi	r30, 0xC2	; 194
    b89a:	f2 4f       	sbci	r31, 0xF2	; 242
    b89c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    b89e:	90 91 61 0d 	lds	r25, 0x0D61	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    b8a2:	80 91 60 0d 	lds	r24, 0x0D60	; 0x800d60 <twi_masterBufferLength.lto_priv.268>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    b8a6:	98 17       	cp	r25, r24
    b8a8:	c8 f2       	brcs	.-78     	; 0xb85c <__vector_39+0x186>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    b8aa:	85 e8       	ldi	r24, 0x85	; 133
    b8ac:	d8 cf       	rjmp	.-80     	; 0xb85e <__vector_39+0x188>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    b8ae:	e0 91 61 0d 	lds	r30, 0x0D61	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    b8b2:	81 e0       	ldi	r24, 0x01	; 1
    b8b4:	8e 0f       	add	r24, r30
    b8b6:	80 93 61 0d 	sts	0x0D61, r24	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    b8ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    b8be:	f0 e0       	ldi	r31, 0x00	; 0
    b8c0:	e2 5c       	subi	r30, 0xC2	; 194
    b8c2:	f2 4f       	sbci	r31, 0xF2	; 242
    b8c4:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
    b8c6:	80 91 63 0d 	lds	r24, 0x0D63	; 0x800d63 <twi_sendStop.lto_priv.270>
    b8ca:	81 11       	cpse	r24, r1
    b8cc:	5c cf       	rjmp	.-328    	; 0xb786 <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    b8ce:	81 e0       	ldi	r24, 0x01	; 1
    b8d0:	80 93 5e 0d 	sts	0x0D5E, r24	; 0x800d5e <twi_inRepStart.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    b8d4:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    b8d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    b8da:	10 92 64 0d 	sts	0x0D64, r1	; 0x800d64 <twi_state.lto_priv.272>
    b8de:	24 cf       	rjmp	.-440    	; 0xb728 <__vector_39+0x52>
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    b8e0:	85 ec       	ldi	r24, 0xC5	; 197
    b8e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    b8e6:	10 92 64 0d 	sts	0x0D64, r1	; 0x800d64 <twi_state.lto_priv.272>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    b8ea:	80 91 5c 0b 	lds	r24, 0x0B5C	; 0x800b5c <twi_rxBufferIndex>
    b8ee:	80 32       	cpi	r24, 0x20	; 32
    b8f0:	30 f4       	brcc	.+12     	; 0xb8fe <__vector_39+0x228>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    b8f2:	e0 91 5c 0b 	lds	r30, 0x0B5C	; 0x800b5c <twi_rxBufferIndex>
    b8f6:	f0 e0       	ldi	r31, 0x00	; 0
    b8f8:	e4 5c       	subi	r30, 0xC4	; 196
    b8fa:	f4 4f       	sbci	r31, 0xF4	; 244
    b8fc:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    b8fe:	60 91 5c 0b 	lds	r22, 0x0B5C	; 0x800b5c <twi_rxBufferIndex>
    b902:	70 e0       	ldi	r23, 0x00	; 0
    b904:	e0 91 b0 0c 	lds	r30, 0x0CB0	; 0x800cb0 <twi_onSlaveReceive.lto_priv.274>
    b908:	f0 91 b1 0c 	lds	r31, 0x0CB1	; 0x800cb1 <twi_onSlaveReceive.lto_priv.274+0x1>
    b90c:	8c e3       	ldi	r24, 0x3C	; 60
    b90e:	9b e0       	ldi	r25, 0x0B	; 11
    b910:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    b912:	10 92 5c 0b 	sts	0x0B5C, r1	; 0x800b5c <twi_rxBufferIndex>
    b916:	08 cf       	rjmp	.-496    	; 0xb728 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    b918:	10 92 62 0d 	sts	0x0D62, r1	; 0x800d62 <twi_error.lto_priv.273>
    b91c:	34 cf       	rjmp	.-408    	; 0xb786 <__vector_39+0xb0>

0000b91e <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:173
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    b91e:	20 91 1a 0d 	lds	r18, 0x0D1A	; 0x800d1a <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    b922:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    b924:	21 32       	cpi	r18, 0x21	; 33
    b926:	08 f0       	brcs	.+2      	; 0xb92a <TwoWire::endTransmission()+0xc>
    b928:	44 c0       	rjmp	.+136    	; 0xb9b2 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    b92a:	80 91 64 0d 	lds	r24, 0x0D64	; 0x800d64 <twi_state.lto_priv.272>
    b92e:	81 11       	cpse	r24, r1
    b930:	fc cf       	rjmp	.-8      	; 0xb92a <TwoWire::endTransmission()+0xc>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:173
    b932:	80 91 1c 0d 	lds	r24, 0x0D1C	; 0x800d1c <TwoWire::txAddress>
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
    b936:	92 e0       	ldi	r25, 0x02	; 2
    b938:	90 93 64 0d 	sts	0x0D64, r25	; 0x800d64 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:240
  twi_sendStop = sendStop;
    b93c:	91 e0       	ldi	r25, 0x01	; 1
    b93e:	90 93 63 0d 	sts	0x0D63, r25	; 0x800d63 <twi_sendStop.lto_priv.270>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:242
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    b942:	9f ef       	ldi	r25, 0xFF	; 255
    b944:	90 93 62 0d 	sts	0x0D62, r25	; 0x800d62 <twi_error.lto_priv.273>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    b948:	10 92 61 0d 	sts	0x0D61, r1	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:246
  twi_masterBufferLength = length;
    b94c:	20 93 60 0d 	sts	0x0D60, r18	; 0x800d60 <twi_masterBufferLength.lto_priv.268>
    b950:	aa ef       	ldi	r26, 0xFA	; 250
    b952:	ba e0       	ldi	r27, 0x0A	; 10
    b954:	ee e3       	ldi	r30, 0x3E	; 62
    b956:	fd e0       	ldi	r31, 0x0D	; 13
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:249

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    b958:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
    b95a:	29 13       	cpse	r18, r25
    b95c:	31 c0       	rjmp	.+98     	; 0xb9c0 <TwoWire::endTransmission()+0xa2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    b95e:	10 92 5f 0d 	sts	0x0D5F, r1	; 0x800d5f <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:255
  twi_slarw |= address << 1;
    b962:	90 91 5f 0d 	lds	r25, 0x0D5F	; 0x800d5f <twi_slarw.lto_priv.266>
    b966:	88 0f       	add	r24, r24
    b968:	89 2b       	or	r24, r25
    b96a:	80 93 5f 0d 	sts	0x0D5F, r24	; 0x800d5f <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:260

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    b96e:	80 91 5e 0d 	lds	r24, 0x0D5E	; 0x800d5e <twi_inRepStart.lto_priv.271>
    b972:	81 30       	cpi	r24, 0x01	; 1
    b974:	49 f5       	brne	.+82     	; 0xb9c8 <TwoWire::endTransmission()+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    b976:	10 92 5e 0d 	sts	0x0D5E, r1	; 0x800d5e <twi_inRepStart.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:269
    do {
      TWDR = twi_slarw;
    b97a:	80 91 5f 0d 	lds	r24, 0x0D5F	; 0x800d5f <twi_slarw.lto_priv.266>
    b97e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:270
    } while(TWCR & _BV(TWWC));
    b982:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    b986:	83 fd       	sbrc	r24, 3
    b988:	f8 cf       	rjmp	.-16     	; 0xb97a <TwoWire::endTransmission()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    b98a:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    b98c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    b990:	80 91 64 0d 	lds	r24, 0x0D64	; 0x800d64 <twi_state.lto_priv.272>
    b994:	82 30       	cpi	r24, 0x02	; 2
    b996:	e1 f3       	breq	.-8      	; 0xb990 <TwoWire::endTransmission()+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:282
    continue;
  }

  if (twi_error == 0xFF)
    b998:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <twi_error.lto_priv.273>
    b99c:	8f 3f       	cpi	r24, 0xFF	; 255
    b99e:	b1 f0       	breq	.+44     	; 0xb9cc <TwoWire::endTransmission()+0xae>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    b9a0:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <twi_error.lto_priv.273>
    b9a4:	80 32       	cpi	r24, 0x20	; 32
    b9a6:	a1 f0       	breq	.+40     	; 0xb9d0 <TwoWire::endTransmission()+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    b9a8:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <twi_error.lto_priv.273>
    b9ac:	80 33       	cpi	r24, 0x30	; 48
    b9ae:	91 f0       	breq	.+36     	; 0xb9d4 <TwoWire::endTransmission()+0xb6>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    b9b0:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:175
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    b9b2:	10 92 1b 0d 	sts	0x0D1B, r1	; 0x800d1b <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:176
  txBufferLength = 0;
    b9b6:	10 92 1a 0d 	sts	0x0D1A, r1	; 0x800d1a <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:178
  // indicate that we are done transmitting
  transmitting = 0;
    b9ba:	10 92 1d 0d 	sts	0x0D1D, r1	; 0x800d1d <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:188
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
    b9be:	08 95       	ret
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    b9c0:	3d 91       	ld	r19, X+
    b9c2:	31 93       	st	Z+, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    b9c4:	9f 5f       	subi	r25, 0xFF	; 255
    b9c6:	c9 cf       	rjmp	.-110    	; 0xb95a <TwoWire::endTransmission()+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    b9c8:	85 ee       	ldi	r24, 0xE5	; 229
    b9ca:	e0 cf       	rjmp	.-64     	; 0xb98c <TwoWire::endTransmission()+0x6e>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }

  if (twi_error == 0xFF)
    return 0; // success
    b9cc:	80 e0       	ldi	r24, 0x00	; 0
    b9ce:	f1 cf       	rjmp	.-30     	; 0xb9b2 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    b9d0:	82 e0       	ldi	r24, 0x02	; 2
    b9d2:	ef cf       	rjmp	.-34     	; 0xb9b2 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    b9d4:	83 e0       	ldi	r24, 0x03	; 3
    b9d6:	ed cf       	rjmp	.-38     	; 0xb9b2 <TwoWire::endTransmission()+0x94>

0000b9d8 <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:170
	if(i2c_write(DS2482_C_DRST)==FALSE) { i2c_stop();return DS2482_ERR_WRITE; }
	i2c_stop();
	return DS2482_ERR_OK;
	*/        

        Wire.beginTransmission(address);
    b9d8:	0e 94 c8 ae 	call	0x15d90	; 0x15d90 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:171
        Wire.write(DS2482_C_DRST);
    b9dc:	80 ef       	ldi	r24, 0xF0	; 240
    b9de:	90 e0       	ldi	r25, 0x00	; 0
    b9e0:	0e 94 6e af 	call	0x15edc	; 0x15edc <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:172
        if (Wire.endTransmission() == I2C_ERROR_OK)
    b9e4:	88 ef       	ldi	r24, 0xF8	; 248
    b9e6:	9f e0       	ldi	r25, 0x0F	; 15
    b9e8:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <TwoWire::endTransmission()>
    b9ec:	81 11       	cpse	r24, r1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:175
          return DS2482_ERR_OK;
        else
          return DS2482_ERR_I2C_DEVICE;        
    b9ee:	8a e0       	ldi	r24, 0x0A	; 10
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:177

}
    b9f0:	08 95       	ret

0000b9f2 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:127
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    b9f2:	86 2f       	mov	r24, r22
twi_readFrom():
    b9f4:	64 2f       	mov	r22, r20
    b9f6:	0e 94 86 ae 	call	0x15d0c	; 0x15d0c <twi_readFrom.part.0.constprop.201>
requestFrom():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    b9fa:	10 92 04 0d 	sts	0x0D04, r1	; 0x800d04 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
    b9fe:	80 93 03 0d 	sts	0x0D03, r24	; 0x800d03 <TwoWire::rxBufferLength>
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:129
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    ba02:	08 95       	ret

0000ba04 <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
    ba04:	ff 92       	push	r15
    ba06:	0f 93       	push	r16
    ba08:	1f 93       	push	r17
    ba0a:	cf 93       	push	r28
    ba0c:	df 93       	push	r29
    ba0e:	d8 2f       	mov	r29, r24
    ba10:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
    ba12:	0e 94 c8 ae 	call	0x15d90	; 0x15d90 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
    ba16:	86 e9       	ldi	r24, 0x96	; 150
    ba18:	90 e0       	ldi	r25, 0x00	; 0
    ba1a:	0e 94 6e af 	call	0x15edc	; 0x15edc <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
    ba1e:	88 ef       	ldi	r24, 0xF8	; 248
    ba20:	9f e0       	ldi	r25, 0x0F	; 15
    ba22:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <TwoWire::endTransmission()>
    ba26:	ce ef       	ldi	r28, 0xFE	; 254
    ba28:	88 23       	and	r24, r24
    ba2a:	41 f0       	breq	.+16     	; 0xba3c <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
    ba2c:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809
	Wire.requestFrom(address, cnt);	
        if ( Wire.available() >= 1 )
             *byte = Wire.read();	

	return DS2482_ERR_OK;
}
    ba2e:	8c 2f       	mov	r24, r28
    ba30:	df 91       	pop	r29
    ba32:	cf 91       	pop	r28
    ba34:	1f 91       	pop	r17
    ba36:	0f 91       	pop	r16
    ba38:	ff 90       	pop	r15
    ba3a:	08 95       	ret
    ba3c:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
    ba3e:	e1 f1       	breq	.+120    	; 0xbab8 <ds2482owReadByte(unsigned char, unsigned char*)+0xb4>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
    ba40:	41 e0       	ldi	r20, 0x01	; 1
    ba42:	6d 2f       	mov	r22, r29
    ba44:	88 ef       	ldi	r24, 0xF8	; 248
    ba46:	9f e0       	ldi	r25, 0x0F	; 15
    ba48:	0e 94 f9 5c 	call	0xb9f2	; 0xb9f2 <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    ba4c:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
    ba50:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
    ba54:	89 1b       	sub	r24, r25
    ba56:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
    ba58:	18 16       	cp	r1, r24
    ba5a:	19 06       	cpc	r1, r25
    ba5c:	1c f4       	brge	.+6      	; 0xba64 <ds2482owReadByte(unsigned char, unsigned char*)+0x60>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
    ba5e:	0e 94 5b af 	call	0x15eb6	; 0x15eb6 <TwoWire::read() [clone .constprop.190]>
    ba62:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
    ba64:	f0 fc       	sbrc	r15, 0
    ba66:	ea cf       	rjmp	.-44     	; 0xba3c <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
ds2482setReadPointer():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:258
	if(i2c_write(pointer)==FALSE){i2c_stop(); return DS2482_ERR_WRITE;}
	i2c_stop();
	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
    ba68:	8d 2f       	mov	r24, r29
    ba6a:	0e 94 c8 ae 	call	0x15d90	; 0x15d90 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:259
        Wire.write(DS2482_C_SRP);
    ba6e:	81 ee       	ldi	r24, 0xE1	; 225
    ba70:	90 e0       	ldi	r25, 0x00	; 0
    ba72:	0e 94 6e af 	call	0x15edc	; 0x15edc <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:260
        Wire.write(pointer);
    ba76:	61 ee       	ldi	r22, 0xE1	; 225
    ba78:	88 ef       	ldi	r24, 0xF8	; 248
    ba7a:	9f e0       	ldi	r25, 0x0F	; 15
    ba7c:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:261
        if (Wire.endTransmission() == I2C_ERROR_OK)
    ba80:	88 ef       	ldi	r24, 0xF8	; 248
    ba82:	9f e0       	ldi	r25, 0x0F	; 15
    ba84:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <TwoWire::endTransmission()>
    ba88:	c8 2f       	mov	r28, r24
    ba8a:	81 11       	cpse	r24, r1
    ba8c:	cf cf       	rjmp	.-98     	; 0xba2c <ds2482owReadByte(unsigned char, unsigned char*)+0x28>
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
    ba8e:	41 e0       	ldi	r20, 0x01	; 1
    ba90:	6d 2f       	mov	r22, r29
    ba92:	88 ef       	ldi	r24, 0xF8	; 248
    ba94:	9f e0       	ldi	r25, 0x0F	; 15
    ba96:	0e 94 f9 5c 	call	0xb9f2	; 0xb9f2 <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
    ba9a:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
    ba9e:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
    baa2:	89 1b       	sub	r24, r25
    baa4:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
    baa6:	18 16       	cp	r1, r24
    baa8:	19 06       	cpc	r1, r25
    baaa:	0c f0       	brlt	.+2      	; 0xbaae <ds2482owReadByte(unsigned char, unsigned char*)+0xaa>
    baac:	c0 cf       	rjmp	.-128    	; 0xba2e <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
    baae:	0e 94 5b af 	call	0x15eb6	; 0x15eb6 <TwoWire::read() [clone .constprop.190]>
    bab2:	f8 01       	movw	r30, r16
    bab4:	80 83       	st	Z, r24
    bab6:	bb cf       	rjmp	.-138    	; 0xba2e <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
    bab8:	c4 e0       	ldi	r28, 0x04	; 4
    baba:	b9 cf       	rjmp	.-142    	; 0xba2e <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>

0000babc <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
    babc:	0f 93       	push	r16
    babe:	1f 93       	push	r17
    bac0:	cf 93       	push	r28
    bac2:	df 93       	push	r29
    bac4:	08 2f       	mov	r16, r24
    bac6:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
    bac8:	0e 94 c8 ae 	call	0x15d90	; 0x15d90 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
    bacc:	85 ea       	ldi	r24, 0xA5	; 165
    bace:	90 e0       	ldi	r25, 0x00	; 0
    bad0:	0e 94 6e af 	call	0x15edc	; 0x15edc <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
    bad4:	6d 2f       	mov	r22, r29
    bad6:	88 ef       	ldi	r24, 0xF8	; 248
    bad8:	9f e0       	ldi	r25, 0x0F	; 15
    bada:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
    bade:	88 ef       	ldi	r24, 0xF8	; 248
    bae0:	9f e0       	ldi	r25, 0x0F	; 15
    bae2:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <TwoWire::endTransmission()>
    bae6:	c8 2f       	mov	r28, r24
    bae8:	81 11       	cpse	r24, r1
    baea:	1d c0       	rjmp	.+58     	; 0xbb26 <ds2482owWriteByte(unsigned char, unsigned char)+0x6a>
    baec:	1e ef       	ldi	r17, 0xFE	; 254
    baee:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
    baf0:	e1 f0       	breq	.+56     	; 0xbb2a <ds2482owWriteByte(unsigned char, unsigned char)+0x6e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
    baf2:	41 e0       	ldi	r20, 0x01	; 1
    baf4:	60 2f       	mov	r22, r16
    baf6:	88 ef       	ldi	r24, 0xF8	; 248
    baf8:	9f e0       	ldi	r25, 0x0F	; 15
    bafa:	0e 94 f9 5c 	call	0xb9f2	; 0xb9f2 <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
    bafe:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
    bb02:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
    bb06:	89 1b       	sub	r24, r25
    bb08:	99 0b       	sbc	r25, r25
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
    bb0a:	18 16       	cp	r1, r24
    bb0c:	19 06       	cpc	r1, r25
    bb0e:	1c f4       	brge	.+6      	; 0xbb16 <ds2482owWriteByte(unsigned char, unsigned char)+0x5a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
    bb10:	0e 94 5b af 	call	0x15eb6	; 0x15eb6 <TwoWire::read() [clone .constprop.190]>
    bb14:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
    bb16:	d0 fd       	sbrc	r29, 0
    bb18:	ea cf       	rjmp	.-44     	; 0xbaee <ds2482owWriteByte(unsigned char, unsigned char)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
    bb1a:	8c 2f       	mov	r24, r28
    bb1c:	df 91       	pop	r29
    bb1e:	cf 91       	pop	r28
    bb20:	1f 91       	pop	r17
    bb22:	0f 91       	pop	r16
    bb24:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
    bb26:	c3 e0       	ldi	r28, 0x03	; 3
    bb28:	f8 cf       	rjmp	.-16     	; 0xbb1a <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
    bb2a:	c4 e0       	ldi	r28, 0x04	; 4
    bb2c:	f6 cf       	rjmp	.-20     	; 0xbb1a <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>

0000bb2e <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:48
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t owMatchRom(uint8_t ds2482_address, uint8_t *rom)
{
    bb2e:	ef 92       	push	r14
    bb30:	ff 92       	push	r15
    bb32:	1f 93       	push	r17
    bb34:	cf 93       	push	r28
    bb36:	df 93       	push	r29
    bb38:	18 2f       	mov	r17, r24
    bb3a:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:50
	uint8_t r;
	r = ds2482owWriteByte(ds2482_address, OW_MATCH_ROM);
    bb3c:	65 e5       	ldi	r22, 0x55	; 85
    bb3e:	0e 94 5e 5d 	call	0xbabc	; 0xbabc <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:51
	if(r)
    bb42:	81 11       	cpse	r24, r1
    bb44:	0d c0       	rjmp	.+26     	; 0xbb60 <owMatchRom(unsigned char, unsigned char*)+0x32>
    bb46:	e7 01       	movw	r28, r14
    bb48:	88 e0       	ldi	r24, 0x08	; 8
    bb4a:	e8 0e       	add	r14, r24
    bb4c:	f1 1c       	adc	r15, r1
owWriteBlock():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:29
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
	{
		r = ds2482owWriteByte(ds2482_address, *(block+c));
    bb4e:	69 91       	ld	r22, Y+
    bb50:	81 2f       	mov	r24, r17
    bb52:	0e 94 5e 5d 	call	0xbabc	; 0xbabc <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:30
		if(r)
    bb56:	81 11       	cpse	r24, r1
    bb58:	03 c0       	rjmp	.+6      	; 0xbb60 <owMatchRom(unsigned char, unsigned char*)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:27
 */
uint8_t owWriteBlock(uint8_t ds2482_address, uint8_t *block, uint8_t length)
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
    bb5a:	ec 16       	cp	r14, r28
    bb5c:	fd 06       	cpc	r15, r29
    bb5e:	b9 f7       	brne	.-18     	; 0xbb4e <owMatchRom(unsigned char, unsigned char*)+0x20>
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:59
	r = owWriteBlock(ds2482_address, rom, 8);
	if(r)
		return r;
	
	return DS2482_ERR_OK;
}
    bb60:	df 91       	pop	r29
    bb62:	cf 91       	pop	r28
    bb64:	1f 91       	pop	r17
    bb66:	ff 90       	pop	r15
    bb68:	ef 90       	pop	r14
    bb6a:	08 95       	ret

0000bb6c <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
    bb6c:	0f 93       	push	r16
    bb6e:	1f 93       	push	r17
    bb70:	cf 93       	push	r28
    bb72:	df 93       	push	r29
    bb74:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
    bb76:	0e 94 c8 ae 	call	0x15d90	; 0x15d90 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
    bb7a:	84 eb       	ldi	r24, 0xB4	; 180
    bb7c:	90 e0       	ldi	r25, 0x00	; 0
    bb7e:	0e 94 6e af 	call	0x15edc	; 0x15edc <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
    bb82:	88 ef       	ldi	r24, 0xF8	; 248
    bb84:	9f e0       	ldi	r25, 0x0F	; 15
    bb86:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <TwoWire::endTransmission()>
    bb8a:	c8 2f       	mov	r28, r24
    bb8c:	81 11       	cpse	r24, r1
    bb8e:	1b c0       	rjmp	.+54     	; 0xbbc6 <ds2482owReset(unsigned char)+0x5a>
    bb90:	de ef       	ldi	r29, 0xFE	; 254
    bb92:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
    bb94:	f9 f0       	breq	.+62     	; 0xbbd4 <ds2482owReset(unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
    bb96:	41 e0       	ldi	r20, 0x01	; 1
    bb98:	60 2f       	mov	r22, r16
    bb9a:	88 ef       	ldi	r24, 0xF8	; 248
    bb9c:	9f e0       	ldi	r25, 0x0F	; 15
    bb9e:	0e 94 f9 5c 	call	0xb9f2	; 0xb9f2 <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
    bba2:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
    bba6:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
    bbaa:	89 1b       	sub	r24, r25
    bbac:	99 0b       	sbc	r25, r25
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
    bbae:	18 16       	cp	r1, r24
    bbb0:	19 06       	cpc	r1, r25
    bbb2:	1c f4       	brge	.+6      	; 0xbbba <ds2482owReset(unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
    bbb4:	0e 94 5b af 	call	0x15eb6	; 0x15eb6 <TwoWire::read() [clone .constprop.190]>
    bbb8:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
    bbba:	10 fd       	sbrc	r17, 0
    bbbc:	ea cf       	rjmp	.-44     	; 0xbb92 <ds2482owReset(unsigned char)+0x26>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
    bbbe:	11 fd       	sbrc	r17, 1
    bbc0:	03 c0       	rjmp	.+6      	; 0xbbc8 <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
    bbc2:	c5 e0       	ldi	r28, 0x05	; 5
    bbc4:	01 c0       	rjmp	.+2      	; 0xbbc8 <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
    bbc6:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
    bbc8:	8c 2f       	mov	r24, r28
    bbca:	df 91       	pop	r29
    bbcc:	cf 91       	pop	r28
    bbce:	1f 91       	pop	r17
    bbd0:	0f 91       	pop	r16
    bbd2:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
    bbd4:	c4 e0       	ldi	r28, 0x04	; 4
    bbd6:	f8 cf       	rjmp	.-16     	; 0xbbc8 <ds2482owReset(unsigned char)+0x5c>

0000bbd8 <RTC_DS1307::now()>:
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:268
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
}

DateTime RTC_DS1307::now() {
    bbd8:	cf 92       	push	r12
    bbda:	df 92       	push	r13
    bbdc:	ff 92       	push	r15
    bbde:	0f 93       	push	r16
    bbe0:	1f 93       	push	r17
    bbe2:	cf 93       	push	r28
    bbe4:	df 93       	push	r29
    bbe6:	6c 01       	movw	r12, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    bbe8:	88 e6       	ldi	r24, 0x68	; 104
    bbea:	0e 94 c8 ae 	call	0x15d90	; 0x15d90 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);	
    bbee:	60 e0       	ldi	r22, 0x00	; 0
    bbf0:	88 ef       	ldi	r24, 0xF8	; 248
    bbf2:	9f e0       	ldi	r25, 0x0F	; 15
    bbf4:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
    bbf8:	88 ef       	ldi	r24, 0xF8	; 248
    bbfa:	9f e0       	ldi	r25, 0x0F	; 15
    bbfc:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
    bc00:	87 e0       	ldi	r24, 0x07	; 7
    bc02:	90 e0       	ldi	r25, 0x00	; 0
    bc04:	0e 94 72 b3 	call	0x166e4	; 0x166e4 <TwoWire::requestFrom(int, int) [clone .constprop.150]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
    bc08:	0e 94 5b af 	call	0x15eb6	; 0x15eb6 <TwoWire::read() [clone .constprop.190]>
    bc0c:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    bc0e:	28 2f       	mov	r18, r24
    bc10:	30 e0       	ldi	r19, 0x00	; 0
    bc12:	94 e0       	ldi	r25, 0x04	; 4
    bc14:	35 95       	asr	r19
    bc16:	27 95       	ror	r18
    bc18:	9a 95       	dec	r25
    bc1a:	e1 f7       	brne	.-8      	; 0xbc14 <RTC_DS1307::now()+0x3c>
    bc1c:	92 2f       	mov	r25, r18
    bc1e:	99 0f       	add	r25, r25
    bc20:	99 0f       	add	r25, r25
    bc22:	c2 2f       	mov	r28, r18
    bc24:	c9 1b       	sub	r28, r25
    bc26:	cc 0f       	add	r28, r28
    bc28:	c8 0f       	add	r28, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
    bc2a:	0e 94 5b af 	call	0x15eb6	; 0x15eb6 <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    bc2e:	9c 01       	movw	r18, r24
    bc30:	44 e0       	ldi	r20, 0x04	; 4
    bc32:	35 95       	asr	r19
    bc34:	27 95       	ror	r18
    bc36:	4a 95       	dec	r20
    bc38:	e1 f7       	brne	.-8      	; 0xbc32 <RTC_DS1307::now()+0x5a>
    bc3a:	2f 70       	andi	r18, 0x0F	; 15
    bc3c:	33 27       	eor	r19, r19
    bc3e:	92 2f       	mov	r25, r18
    bc40:	99 0f       	add	r25, r25
    bc42:	99 0f       	add	r25, r25
    bc44:	d2 2f       	mov	r29, r18
    bc46:	d9 1b       	sub	r29, r25
    bc48:	dd 0f       	add	r29, r29
    bc4a:	d8 0f       	add	r29, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
    bc4c:	0e 94 5b af 	call	0x15eb6	; 0x15eb6 <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    bc50:	9c 01       	movw	r18, r24
    bc52:	54 e0       	ldi	r21, 0x04	; 4
    bc54:	35 95       	asr	r19
    bc56:	27 95       	ror	r18
    bc58:	5a 95       	dec	r21
    bc5a:	e1 f7       	brne	.-8      	; 0xbc54 <RTC_DS1307::now()+0x7c>
    bc5c:	2f 70       	andi	r18, 0x0F	; 15
    bc5e:	33 27       	eor	r19, r19
    bc60:	92 2f       	mov	r25, r18
    bc62:	99 0f       	add	r25, r25
    bc64:	99 0f       	add	r25, r25
    bc66:	12 2f       	mov	r17, r18
    bc68:	19 1b       	sub	r17, r25
    bc6a:	11 0f       	add	r17, r17
    bc6c:	18 0f       	add	r17, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
    bc6e:	0e 94 5b af 	call	0x15eb6	; 0x15eb6 <TwoWire::read() [clone .constprop.190]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
    bc72:	0e 94 5b af 	call	0x15eb6	; 0x15eb6 <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    bc76:	9c 01       	movw	r18, r24
    bc78:	64 e0       	ldi	r22, 0x04	; 4
    bc7a:	35 95       	asr	r19
    bc7c:	27 95       	ror	r18
    bc7e:	6a 95       	dec	r22
    bc80:	e1 f7       	brne	.-8      	; 0xbc7a <RTC_DS1307::now()+0xa2>
    bc82:	2f 70       	andi	r18, 0x0F	; 15
    bc84:	33 27       	eor	r19, r19
    bc86:	92 2f       	mov	r25, r18
    bc88:	99 0f       	add	r25, r25
    bc8a:	99 0f       	add	r25, r25
    bc8c:	02 2f       	mov	r16, r18
    bc8e:	09 1b       	sub	r16, r25
    bc90:	00 0f       	add	r16, r16
    bc92:	08 0f       	add	r16, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
    bc94:	0e 94 5b af 	call	0x15eb6	; 0x15eb6 <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    bc98:	9c 01       	movw	r18, r24
    bc9a:	74 e0       	ldi	r23, 0x04	; 4
    bc9c:	35 95       	asr	r19
    bc9e:	27 95       	ror	r18
    bca0:	7a 95       	dec	r23
    bca2:	e1 f7       	brne	.-8      	; 0xbc9c <RTC_DS1307::now()+0xc4>
    bca4:	2f 70       	andi	r18, 0x0F	; 15
    bca6:	33 27       	eor	r19, r19
    bca8:	92 2f       	mov	r25, r18
    bcaa:	99 0f       	add	r25, r25
    bcac:	99 0f       	add	r25, r25
    bcae:	f2 2e       	mov	r15, r18
    bcb0:	f9 1a       	sub	r15, r25
    bcb2:	ff 0c       	add	r15, r15
    bcb4:	f8 0e       	add	r15, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
    bcb6:	0e 94 5b af 	call	0x15eb6	; 0x15eb6 <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    bcba:	9c 01       	movw	r18, r24
    bcbc:	e4 e0       	ldi	r30, 0x04	; 4
    bcbe:	35 95       	asr	r19
    bcc0:	27 95       	ror	r18
    bcc2:	ea 95       	dec	r30
    bcc4:	e1 f7       	brne	.-8      	; 0xbcbe <RTC_DS1307::now()+0xe6>
    bcc6:	2f 70       	andi	r18, 0x0F	; 15
    bcc8:	33 27       	eor	r19, r19
    bcca:	92 2f       	mov	r25, r18
    bccc:	99 0f       	add	r25, r25
    bcce:	99 0f       	add	r25, r25
    bcd0:	29 1b       	sub	r18, r25
    bcd2:	22 0f       	add	r18, r18
    bcd4:	82 0f       	add	r24, r18
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    bcd6:	f6 01       	movw	r30, r12
    bcd8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    bcda:	f1 82       	std	Z+1, r15	; 0x01
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    bcdc:	02 83       	std	Z+2, r16	; 0x02
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    bcde:	13 83       	std	Z+3, r17	; 0x03
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    bce0:	d4 83       	std	Z+4, r29	; 0x04
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    bce2:	c5 83       	std	Z+5, r28	; 0x05
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:283
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
    bce4:	c6 01       	movw	r24, r12
    bce6:	df 91       	pop	r29
    bce8:	cf 91       	pop	r28
    bcea:	1f 91       	pop	r17
    bcec:	0f 91       	pop	r16
    bcee:	ff 90       	pop	r15
    bcf0:	df 90       	pop	r13
    bcf2:	cf 90       	pop	r12
    bcf4:	08 95       	ret

0000bcf6 <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:254
  Wire.requestFrom(DS1307_ADDRESS, 1);
  uint8_t ss = Wire._I2C_READ();
  return !(ss>>7);
}

void RTC_DS1307::adjust(const DateTime& dt) {
    bcf6:	1f 93       	push	r17
    bcf8:	cf 93       	push	r28
    bcfa:	df 93       	push	r29
    bcfc:	ec 01       	movw	r28, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
    bcfe:	88 e6       	ldi	r24, 0x68	; 104
    bd00:	0e 94 c8 ae 	call	0x15d90	; 0x15d90 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:256
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
    bd04:	60 e0       	ldi	r22, 0x00	; 0
    bd06:	88 ef       	ldi	r24, 0xF8	; 248
    bd08:	9f e0       	ldi	r25, 0x0F	; 15
    bd0a:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>
    bd0e:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    bd10:	1a e0       	ldi	r17, 0x0A	; 10
    bd12:	82 2f       	mov	r24, r18
    bd14:	61 2f       	mov	r22, r17
    bd16:	0e 94 da f0 	call	0x1e1b4	; 0x1e1b4 <__udivmodqi4>
    bd1a:	68 2f       	mov	r22, r24
    bd1c:	66 0f       	add	r22, r22
    bd1e:	68 0f       	add	r22, r24
    bd20:	66 0f       	add	r22, r22
    bd22:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:258

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    bd24:	88 ef       	ldi	r24, 0xF8	; 248
    bd26:	9f e0       	ldi	r25, 0x0F	; 15
    bd28:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>
    bd2c:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    bd2e:	82 2f       	mov	r24, r18
    bd30:	61 2f       	mov	r22, r17
    bd32:	0e 94 da f0 	call	0x1e1b4	; 0x1e1b4 <__udivmodqi4>
    bd36:	68 2f       	mov	r22, r24
    bd38:	66 0f       	add	r22, r22
    bd3a:	68 0f       	add	r22, r24
    bd3c:	66 0f       	add	r22, r22
    bd3e:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:259
void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
    bd40:	88 ef       	ldi	r24, 0xF8	; 248
    bd42:	9f e0       	ldi	r25, 0x0F	; 15
    bd44:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>
    bd48:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    bd4a:	82 2f       	mov	r24, r18
    bd4c:	61 2f       	mov	r22, r17
    bd4e:	0e 94 da f0 	call	0x1e1b4	; 0x1e1b4 <__udivmodqi4>
    bd52:	68 2f       	mov	r22, r24
    bd54:	66 0f       	add	r22, r22
    bd56:	68 0f       	add	r22, r24
    bd58:	66 0f       	add	r22, r22
    bd5a:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:260
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
    bd5c:	88 ef       	ldi	r24, 0xF8	; 248
    bd5e:	9f e0       	ldi	r25, 0x0F	; 15
    bd60:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:261
  Wire._I2C_WRITE(bin2bcd(0));
    bd64:	60 e0       	ldi	r22, 0x00	; 0
    bd66:	88 ef       	ldi	r24, 0xF8	; 248
    bd68:	9f e0       	ldi	r25, 0x0F	; 15
    bd6a:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>
    bd6e:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    bd70:	82 2f       	mov	r24, r18
    bd72:	61 2f       	mov	r22, r17
    bd74:	0e 94 da f0 	call	0x1e1b4	; 0x1e1b4 <__udivmodqi4>
    bd78:	68 2f       	mov	r22, r24
    bd7a:	66 0f       	add	r22, r22
    bd7c:	68 0f       	add	r22, r24
    bd7e:	66 0f       	add	r22, r22
    bd80:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:262
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
    bd82:	88 ef       	ldi	r24, 0xF8	; 248
    bd84:	9f e0       	ldi	r25, 0x0F	; 15
    bd86:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>
    bd8a:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    bd8c:	82 2f       	mov	r24, r18
    bd8e:	61 2f       	mov	r22, r17
    bd90:	0e 94 da f0 	call	0x1e1b4	; 0x1e1b4 <__udivmodqi4>
    bd94:	68 2f       	mov	r22, r24
    bd96:	66 0f       	add	r22, r22
    bd98:	68 0f       	add	r22, r24
    bd9a:	66 0f       	add	r22, r22
    bd9c:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:263
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
    bd9e:	88 ef       	ldi	r24, 0xF8	; 248
    bda0:	9f e0       	ldi	r25, 0x0F	; 15
    bda2:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>
    bda6:	28 81       	ld	r18, Y
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    bda8:	82 2f       	mov	r24, r18
    bdaa:	61 2f       	mov	r22, r17
    bdac:	0e 94 da f0 	call	0x1e1b4	; 0x1e1b4 <__udivmodqi4>
    bdb0:	68 2f       	mov	r22, r24
    bdb2:	66 0f       	add	r22, r22
    bdb4:	68 0f       	add	r22, r24
    bdb6:	66 0f       	add	r22, r22
    bdb8:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:264
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
    bdba:	88 ef       	ldi	r24, 0xF8	; 248
    bdbc:	9f e0       	ldi	r25, 0x0F	; 15
    bdbe:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire.endTransmission();
    bdc2:	88 ef       	ldi	r24, 0xF8	; 248
    bdc4:	9f e0       	ldi	r25, 0x0F	; 15
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:266
}
    bdc6:	df 91       	pop	r29
    bdc8:	cf 91       	pop	r28
    bdca:	1f 91       	pop	r17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
    bdcc:	0c 94 8f 5c 	jmp	0xb91e	; 0xb91e <TwoWire::endTransmission()>

0000bdd0 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)>:
_Z23helper_set_date_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5864
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(datum_text, "%02d.%02d.%04d", now.day() , now.month() , now.year());
  display_element_set_string(datum_text, 11, 0, &helper_set_date_manualy, &valid_true);
}
void helper_set_date_manualy(uint16_t args1, uint16_t args2, uint8_t args3)
{
    bdd0:	cf 92       	push	r12
    bdd2:	df 92       	push	r13
    bdd4:	ef 92       	push	r14
    bdd6:	ff 92       	push	r15
    bdd8:	0f 93       	push	r16
    bdda:	1f 93       	push	r17
    bddc:	cf 93       	push	r28
    bdde:	df 93       	push	r29
    bde0:	cd b7       	in	r28, 0x3d	; 61
    bde2:	de b7       	in	r29, 0x3e	; 62
    bde4:	69 97       	sbiw	r28, 0x19	; 25
    bde6:	0f b6       	in	r0, 0x3f	; 63
    bde8:	f8 94       	cli
    bdea:	de bf       	out	0x3e, r29	; 62
    bdec:	0f be       	out	0x3f, r0	; 63
    bdee:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5867
  char datum_text[12];
  uint16_t dat[3];
  display_element_get_string(datum_text);
    bdf0:	ce 01       	movw	r24, r28
    bdf2:	01 96       	adiw	r24, 0x01	; 1
    bdf4:	0e 94 2c 4b 	call	0x9658	; 0x9658 <display_element_get_string(char*)>
    bdf8:	7e 01       	movw	r14, r28
    bdfa:	74 e1       	ldi	r23, 0x14	; 20
    bdfc:	e7 0e       	add	r14, r23
    bdfe:	f1 1c       	adc	r15, r1
    be00:	6e 01       	movw	r12, r28
    be02:	8a e1       	ldi	r24, 0x1A	; 26
    be04:	c8 0e       	add	r12, r24
    be06:	d1 1c       	adc	r13, r1
    be08:	8e 01       	movw	r16, r28
    be0a:	0f 5f       	subi	r16, 0xFF	; 255
    be0c:	1f 4f       	sbci	r17, 0xFF	; 255
parseBytes():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123


void parseBytes(const char* str, char sep, uint16_t* bytes, int maxBytes, int base) 
{
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    be0e:	4a e0       	ldi	r20, 0x0A	; 10
    be10:	50 e0       	ldi	r21, 0x00	; 0
    be12:	70 e0       	ldi	r23, 0x00	; 0
    be14:	60 e0       	ldi	r22, 0x00	; 0
    be16:	c8 01       	movw	r24, r16
    be18:	0e 94 16 e4 	call	0x1c82c	; 0x1c82c <strtoul>
    be1c:	f7 01       	movw	r30, r14
    be1e:	61 93       	st	Z+, r22
    be20:	71 93       	st	Z+, r23
    be22:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
    str = strchr(str, sep);               // Find next separator
    be24:	6e e2       	ldi	r22, 0x2E	; 46
    be26:	70 e0       	ldi	r23, 0x00	; 0
    be28:	c8 01       	movw	r24, r16
    be2a:	0e 94 e8 f1 	call	0x1e3d0	; 0x1e3d0 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    if (str == NULL || *str == '\0') {
    be2e:	00 97       	sbiw	r24, 0x00	; 0
    be30:	51 f0       	breq	.+20     	; 0xbe46 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x76>
    be32:	fc 01       	movw	r30, r24
    be34:	20 81       	ld	r18, Z
    be36:	22 23       	and	r18, r18
    be38:	31 f0       	breq	.+12     	; 0xbe46 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x76>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:128
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
    be3a:	8c 01       	movw	r16, r24
    be3c:	0f 5f       	subi	r16, 0xFF	; 255
    be3e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122
}


void parseBytes(const char* str, char sep, uint16_t* bytes, int maxBytes, int base) 
{
  for (int i = 0; i < maxBytes; i++) {
    be40:	ce 14       	cp	r12, r14
    be42:	df 04       	cpc	r13, r15
    be44:	21 f7       	brne	.-56     	; 0xbe0e <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x3e>
    be46:	20 91 79 12 	lds	r18, 0x1279	; 0x801279 <now+0x5>
    be4a:	30 91 78 12 	lds	r19, 0x1278	; 0x801278 <now+0x4>
    be4e:	40 91 77 12 	lds	r20, 0x1277	; 0x801277 <now+0x3>
_Z23helper_set_date_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5869
  parseBytes(datum_text, '.', dat, 3, 10);
  rtc.adjust(DateTime(dat[2], dat[1], dat[0], now.hour(), now.minute(), now.second()));
    be52:	5c 89       	ldd	r21, Y+20	; 0x14
    be54:	6e 89       	ldd	r22, Y+22	; 0x16
    be56:	88 8d       	ldd	r24, Y+24	; 0x18
    be58:	99 8d       	ldd	r25, Y+25	; 0x19
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    be5a:	80 3d       	cpi	r24, 0xD0	; 208
    be5c:	f7 e0       	ldi	r31, 0x07	; 7
    be5e:	9f 07       	cpc	r25, r31
    be60:	10 f0       	brcs	.+4      	; 0xbe66 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x96>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    be62:	80 5d       	subi	r24, 0xD0	; 208
    be64:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
    be66:	8d 87       	std	Y+13, r24	; 0x0d
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    be68:	6e 87       	std	Y+14, r22	; 0x0e
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    be6a:	5f 87       	std	Y+15, r21	; 0x0f
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    be6c:	48 8b       	std	Y+16, r20	; 0x10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    be6e:	39 8b       	std	Y+17, r19	; 0x11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    be70:	2a 8b       	std	Y+18, r18	; 0x12
_Z23helper_set_date_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5869
    be72:	ce 01       	movw	r24, r28
    be74:	0d 96       	adiw	r24, 0x0d	; 13
    be76:	0e 94 7b 5e 	call	0xbcf6	; 0xbcf6 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5870
}
    be7a:	69 96       	adiw	r28, 0x19	; 25
    be7c:	0f b6       	in	r0, 0x3f	; 63
    be7e:	f8 94       	cli
    be80:	de bf       	out	0x3e, r29	; 62
    be82:	0f be       	out	0x3f, r0	; 63
    be84:	cd bf       	out	0x3d, r28	; 61
    be86:	df 91       	pop	r29
    be88:	cf 91       	pop	r28
    be8a:	1f 91       	pop	r17
    be8c:	0f 91       	pop	r16
    be8e:	ff 90       	pop	r15
    be90:	ef 90       	pop	r14
    be92:	df 90       	pop	r13
    be94:	cf 90       	pop	r12
    be96:	08 95       	ret

0000be98 <helper_set_time_manualy(unsigned int, unsigned int, unsigned char)>:
_Z23helper_set_time_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5848
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(cas_text, "%02d:%02d:%02d", now.hour(), now.minute(), now.second());
  display_element_set_string(cas_text, 9, 0, &helper_set_time_manualy, &valid_true);
}
void helper_set_time_manualy(uint16_t args1, uint16_t args2, uint8_t args3)
{
    be98:	cf 93       	push	r28
    be9a:	df 93       	push	r29
    be9c:	cd b7       	in	r28, 0x3d	; 61
    be9e:	de b7       	in	r29, 0x3e	; 62
    bea0:	64 97       	sbiw	r28, 0x14	; 20
    bea2:	0f b6       	in	r0, 0x3f	; 63
    bea4:	f8 94       	cli
    bea6:	de bf       	out	0x3e, r29	; 62
    bea8:	0f be       	out	0x3f, r0	; 63
    beaa:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5851
  char cas_text[10];
  uint8_t tim[3];
  display_element_get_string(cas_text);
    beac:	ce 01       	movw	r24, r28
    beae:	01 96       	adiw	r24, 0x01	; 1
    beb0:	0e 94 2c 4b 	call	0x9658	; 0x9658 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5852
  parseBytes(cas_text, ':', tim, 3, 10);
    beb4:	23 e0       	ldi	r18, 0x03	; 3
    beb6:	30 e0       	ldi	r19, 0x00	; 0
    beb8:	ae 01       	movw	r20, r28
    beba:	4e 5e       	subi	r20, 0xEE	; 238
    bebc:	5f 4f       	sbci	r21, 0xFF	; 255
    bebe:	6a e3       	ldi	r22, 0x3A	; 58
    bec0:	ce 01       	movw	r24, r28
    bec2:	01 96       	adiw	r24, 0x01	; 1
    bec4:	0e 94 81 b0 	call	0x16102	; 0x16102 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5853
  rtc.adjust(DateTime(now.year(), now.month(), now.day(), tim[0], tim[1], tim[2]));
    bec8:	8c 89       	ldd	r24, Y+20	; 0x14
    beca:	9b 89       	ldd	r25, Y+19	; 0x13
    becc:	2a 89       	ldd	r18, Y+18	; 0x12
    bece:	e4 e7       	ldi	r30, 0x74	; 116
    bed0:	f2 e1       	ldi	r31, 0x12	; 18
    bed2:	32 81       	ldd	r19, Z+2	; 0x02
    bed4:	41 81       	ldd	r20, Z+1	; 0x01
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    bed6:	50 81       	ld	r21, Z
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    bed8:	5b 87       	std	Y+11, r21	; 0x0b
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    beda:	4c 87       	std	Y+12, r20	; 0x0c
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    bedc:	3d 87       	std	Y+13, r19	; 0x0d
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    bede:	2e 87       	std	Y+14, r18	; 0x0e
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    bee0:	9f 87       	std	Y+15, r25	; 0x0f
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    bee2:	88 8b       	std	Y+16, r24	; 0x10
_Z23helper_set_time_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5853
    bee4:	ce 01       	movw	r24, r28
    bee6:	0b 96       	adiw	r24, 0x0b	; 11
    bee8:	0e 94 7b 5e 	call	0xbcf6	; 0xbcf6 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5854
}
    beec:	64 96       	adiw	r28, 0x14	; 20
    beee:	0f b6       	in	r0, 0x3f	; 63
    bef0:	f8 94       	cli
    bef2:	de bf       	out	0x3e, r29	; 62
    bef4:	0f be       	out	0x3f, r0	; 63
    bef6:	cd bf       	out	0x3d, r28	; 61
    bef8:	df 91       	pop	r29
    befa:	cf 91       	pop	r28
    befc:	08 95       	ret

0000befe <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:538
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


boolean PubSubClient::connected() {
    befe:	cf 93       	push	r28
    bf00:	df 93       	push	r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:540
    boolean rc;
    if (_client == NULL ) {
    bf02:	fc 01       	movw	r30, r24
    bf04:	a0 81       	ld	r26, Z
    bf06:	b1 81       	ldd	r27, Z+1	; 0x01
    bf08:	10 97       	sbiw	r26, 0x00	; 0
    bf0a:	21 f4       	brne	.+8      	; 0xbf14 <PubSubClient::connected()+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
        rc = false;
    } else {
        rc = (int)_client->connected();
    bf0c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:553
                _client->stop();
            }
        }
    }
    return rc;
}
    bf0e:	df 91       	pop	r29
    bf10:	cf 91       	pop	r28
    bf12:	08 95       	ret
    bf14:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
    bf16:	ed 91       	ld	r30, X+
    bf18:	fc 91       	ld	r31, X
    bf1a:	11 97       	sbiw	r26, 0x01	; 1
    bf1c:	06 88       	ldd	r0, Z+22	; 0x16
    bf1e:	f7 89       	ldd	r31, Z+23	; 0x17
    bf20:	e0 2d       	mov	r30, r0
    bf22:	cd 01       	movw	r24, r26
    bf24:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:544
        if (!rc) {
    bf26:	81 11       	cpse	r24, r1
    bf28:	1e c0       	rjmp	.+60     	; 0xbf66 <PubSubClient::connected()+0x68>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:545
            if (this->_state == MQTT_CONNECTED) {
    bf2a:	fe 01       	movw	r30, r28
    bf2c:	e5 5e       	subi	r30, 0xE5	; 229
    bf2e:	fd 4f       	sbci	r31, 0xFD	; 253
    bf30:	80 81       	ld	r24, Z
    bf32:	91 81       	ldd	r25, Z+1	; 0x01
    bf34:	89 2b       	or	r24, r25
    bf36:	51 f7       	brne	.-44     	; 0xbf0c <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:546
                this->_state = MQTT_CONNECTION_LOST;
    bf38:	8d ef       	ldi	r24, 0xFD	; 253
    bf3a:	9f ef       	ldi	r25, 0xFF	; 255
    bf3c:	91 83       	std	Z+1, r25	; 0x01
    bf3e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:547
                _client->flush();
    bf40:	88 81       	ld	r24, Y
    bf42:	99 81       	ldd	r25, Y+1	; 0x01
    bf44:	dc 01       	movw	r26, r24
    bf46:	ed 91       	ld	r30, X+
    bf48:	fc 91       	ld	r31, X
    bf4a:	06 80       	ldd	r0, Z+6	; 0x06
    bf4c:	f7 81       	ldd	r31, Z+7	; 0x07
    bf4e:	e0 2d       	mov	r30, r0
    bf50:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:548
                _client->stop();
    bf52:	88 81       	ld	r24, Y
    bf54:	99 81       	ldd	r25, Y+1	; 0x01
    bf56:	dc 01       	movw	r26, r24
    bf58:	ed 91       	ld	r30, X+
    bf5a:	fc 91       	ld	r31, X
    bf5c:	04 88       	ldd	r0, Z+20	; 0x14
    bf5e:	f5 89       	ldd	r31, Z+21	; 0x15
    bf60:	e0 2d       	mov	r30, r0
    bf62:	19 95       	eicall
    bf64:	d3 cf       	rjmp	.-90     	; 0xbf0c <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
    bf66:	81 e0       	ldi	r24, 0x01	; 1
    bf68:	d2 cf       	rjmp	.-92     	; 0xbf0e <PubSubClient::connected()+0x10>

0000bf6a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:426
    lastOutActivity = millis();

    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    bf6a:	bf 92       	push	r11
    bf6c:	cf 92       	push	r12
    bf6e:	df 92       	push	r13
    bf70:	ef 92       	push	r14
    bf72:	ff 92       	push	r15
    bf74:	0f 93       	push	r16
    bf76:	1f 93       	push	r17
    bf78:	cf 93       	push	r28
    bf7a:	df 93       	push	r29
    bf7c:	00 d0       	rcall	.+0      	; 0xbf7e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
    bf7e:	1f 92       	push	r1
    bf80:	cd b7       	in	r28, 0x3d	; 61
    bf82:	de b7       	in	r29, 0x3e	; 62
    bf84:	7c 01       	movw	r14, r24
    bf86:	b6 2e       	mov	r11, r22
    bf88:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:432
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    bf8a:	c9 01       	movw	r24, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:428
    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    bf8c:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
    bf8e:	be 01       	movw	r22, r28
    bf90:	6f 5f       	subi	r22, 0xFF	; 255
    bf92:	7f 4f       	sbci	r23, 0xFF	; 255
    bf94:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:434
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
    bf96:	28 2f       	mov	r18, r24
    bf98:	2f 77       	andi	r18, 0x7F	; 127
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:435
        len = len / 128;
    bf9a:	88 0f       	add	r24, r24
    bf9c:	89 2f       	mov	r24, r25
    bf9e:	88 1f       	adc	r24, r24
    bfa0:	99 0b       	sbc	r25, r25
    bfa2:	91 95       	neg	r25
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:436
        if (len > 0) {
    bfa4:	00 97       	sbiw	r24, 0x00	; 0
    bfa6:	09 f0       	breq	.+2      	; 0xbfaa <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:437
            digit |= 0x80;
    bfa8:	20 68       	ori	r18, 0x80	; 128
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        }
        lenBuf[pos++] = digit;
    bfaa:	f6 01       	movw	r30, r12
    bfac:	e3 0f       	add	r30, r19
    bfae:	f1 1d       	adc	r31, r1
    bfb0:	20 83       	st	Z, r18
    bfb2:	3f 5f       	subi	r19, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:441
        llen++;
    } while(len>0);
    bfb4:	00 97       	sbiw	r24, 0x00	; 0
    bfb6:	79 f7       	brne	.-34     	; 0xbf96 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:443

    buf[4-llen] = header;
    bfb8:	e3 2f       	mov	r30, r19
    bfba:	f0 e0       	ldi	r31, 0x00	; 0
    bfbc:	ba 01       	movw	r22, r20
    bfbe:	6e 1b       	sub	r22, r30
    bfc0:	7f 0b       	sbc	r23, r31
    bfc2:	6c 5f       	subi	r22, 0xFC	; 252
    bfc4:	7f 4f       	sbci	r23, 0xFF	; 255
    bfc6:	db 01       	movw	r26, r22
    bfc8:	bc 92       	st	X, r11
    bfca:	4e 1b       	sub	r20, r30
    bfcc:	5f 0b       	sbc	r21, r31
    bfce:	4b 5f       	subi	r20, 0xFB	; 251
    bfd0:	5f 4f       	sbci	r21, 0xFF	; 255
    bfd2:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:444
    for (int i=0;i<llen;i++) {
    bfd4:	9c 01       	movw	r18, r24
    bfd6:	2c 19       	sub	r18, r12
    bfd8:	3d 09       	sbc	r19, r13
    bfda:	2e 17       	cp	r18, r30
    bfdc:	3f 07       	cpc	r19, r31
    bfde:	3c f4       	brge	.+14     	; 0xbfee <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:445
        buf[5-llen+i] = lenBuf[i];
    bfe0:	dc 01       	movw	r26, r24
    bfe2:	2d 91       	ld	r18, X+
    bfe4:	cd 01       	movw	r24, r26
    bfe6:	da 01       	movw	r26, r20
    bfe8:	2d 93       	st	X+, r18
    bfea:	ad 01       	movw	r20, r26
    bfec:	f3 cf       	rjmp	.-26     	; 0xbfd4 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:462
        bytesRemaining -= rc;
        writeBuf += rc;
    }
    return result;
#else
    rc = _client->write(buf+(4-llen),length+1+llen);
    bfee:	d7 01       	movw	r26, r14
    bff0:	8d 91       	ld	r24, X+
    bff2:	9c 91       	ld	r25, X
    bff4:	0f 5f       	subi	r16, 0xFF	; 255
    bff6:	1f 4f       	sbci	r17, 0xFF	; 255
    bff8:	0e 0f       	add	r16, r30
    bffa:	1f 1f       	adc	r17, r31
    bffc:	dc 01       	movw	r26, r24
    bffe:	ed 91       	ld	r30, X+
    c000:	fc 91       	ld	r31, X
    c002:	02 80       	ldd	r0, Z+2	; 0x02
    c004:	f3 81       	ldd	r31, Z+3	; 0x03
    c006:	e0 2d       	mov	r30, r0
    c008:	a8 01       	movw	r20, r16
    c00a:	19 95       	eicall
    c00c:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:463
    lastOutActivity = millis();
    c00e:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
    c012:	f7 01       	movw	r30, r14
    c014:	ec 5f       	subi	r30, 0xFC	; 252
    c016:	fd 4f       	sbci	r31, 0xFD	; 253
    c018:	60 83       	st	Z, r22
    c01a:	71 83       	std	Z+1, r23	; 0x01
    c01c:	82 83       	std	Z+2, r24	; 0x02
    c01e:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:464
    return (rc == 1+llen+length);
    c020:	81 e0       	ldi	r24, 0x01	; 1
    c022:	0c 15       	cp	r16, r12
    c024:	1d 05       	cpc	r17, r13
    c026:	09 f0       	breq	.+2      	; 0xc02a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
    c028:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:466
#endif
}
    c02a:	0f 90       	pop	r0
    c02c:	0f 90       	pop	r0
    c02e:	0f 90       	pop	r0
    c030:	0f 90       	pop	r0
    c032:	df 91       	pop	r29
    c034:	cf 91       	pop	r28
    c036:	1f 91       	pop	r17
    c038:	0f 91       	pop	r16
    c03a:	ff 90       	pop	r15
    c03c:	ef 90       	pop	r14
    c03e:	df 90       	pop	r13
    c040:	cf 90       	pop	r12
    c042:	bf 90       	pop	r11
    c044:	08 95       	ret

0000c046 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:347
        return true;
    }
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    c046:	af 92       	push	r10
    c048:	bf 92       	push	r11
    c04a:	cf 92       	push	r12
    c04c:	df 92       	push	r13
    c04e:	ef 92       	push	r14
    c050:	ff 92       	push	r15
    c052:	0f 93       	push	r16
    c054:	1f 93       	push	r17
    c056:	cf 93       	push	r28
    c058:	df 93       	push	r29
    c05a:	7c 01       	movw	r14, r24
    c05c:	5b 01       	movw	r10, r22
    c05e:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:348
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
    c060:	ea 01       	movw	r28, r20
    c062:	09 90       	ld	r0, Y+
    c064:	00 20       	and	r0, r0
    c066:	e9 f7       	brne	.-6      	; 0xc062 <PubSubClient::publish(char const*, char const*)+0x1c>
    c068:	21 97       	sbiw	r28, 0x01	; 1
    c06a:	c4 1b       	sub	r28, r20
    c06c:	d5 0b       	sbc	r29, r21
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:360
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
    return publish(topic, payload, plength, false);
}

boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retained) {
    if (connected()) {
    c06e:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <PubSubClient::connected()>
    c072:	88 23       	and	r24, r24
    c074:	c9 f1       	breq	.+114    	; 0xc0e8 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:361
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
    c076:	f5 01       	movw	r30, r10
    c078:	01 90       	ld	r0, Z+
    c07a:	00 20       	and	r0, r0
    c07c:	e9 f7       	brne	.-6      	; 0xc078 <PubSubClient::publish(char const*, char const*)+0x32>
    c07e:	31 97       	sbiw	r30, 0x01	; 1
    c080:	ea 19       	sub	r30, r10
    c082:	fb 09       	sbc	r31, r11
    c084:	ce 01       	movw	r24, r28
    c086:	07 96       	adiw	r24, 0x07	; 7
    c088:	e8 0f       	add	r30, r24
    c08a:	f9 1f       	adc	r31, r25
    c08c:	e1 30       	cpi	r30, 0x01	; 1
    c08e:	f2 40       	sbci	r31, 0x02	; 2
    c090:	58 f5       	brcc	.+86     	; 0xc0e8 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:367
            // Too long
            return false;
        }
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        length = writeString(topic,buffer,length);
    c092:	67 01       	movw	r12, r14
    c094:	82 e0       	ldi	r24, 0x02	; 2
    c096:	c8 0e       	add	r12, r24
    c098:	d1 1c       	adc	r13, r1
    c09a:	45 e0       	ldi	r20, 0x05	; 5
    c09c:	50 e0       	ldi	r21, 0x00	; 0
    c09e:	b6 01       	movw	r22, r12
    c0a0:	c5 01       	movw	r24, r10
    c0a2:	0e 94 64 ae 	call	0x15cc8	; 0x15cc8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>
    c0a6:	f8 01       	movw	r30, r16
    c0a8:	dc 01       	movw	r26, r24
    c0aa:	12 96       	adiw	r26, 0x02	; 2
    c0ac:	ae 0d       	add	r26, r14
    c0ae:	bf 1d       	adc	r27, r15
    c0b0:	a8 01       	movw	r20, r16
    c0b2:	4c 0f       	add	r20, r28
    c0b4:	5d 1f       	adc	r21, r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:369
        uint16_t i;
        for (i=0;i<plength;i++) {
    c0b6:	e4 17       	cp	r30, r20
    c0b8:	f5 07       	cpc	r31, r21
    c0ba:	19 f0       	breq	.+6      	; 0xc0c2 <PubSubClient::publish(char const*, char const*)+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:370
            buffer[length++] = payload[i];
    c0bc:	21 91       	ld	r18, Z+
    c0be:	2d 93       	st	X+, r18
    c0c0:	fa cf       	rjmp	.-12     	; 0xc0b6 <PubSubClient::publish(char const*, char const*)+0x70>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
    c0c2:	25 97       	sbiw	r28, 0x05	; 5
    c0c4:	9e 01       	movw	r18, r28
    c0c6:	28 0f       	add	r18, r24
    c0c8:	39 1f       	adc	r19, r25
    c0ca:	a6 01       	movw	r20, r12
    c0cc:	60 e3       	ldi	r22, 0x30	; 48
    c0ce:	c7 01       	movw	r24, r14
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
    c0d0:	df 91       	pop	r29
    c0d2:	cf 91       	pop	r28
    c0d4:	1f 91       	pop	r17
    c0d6:	0f 91       	pop	r16
    c0d8:	ff 90       	pop	r15
    c0da:	ef 90       	pop	r14
    c0dc:	df 90       	pop	r13
    c0de:	cf 90       	pop	r12
    c0e0:	bf 90       	pop	r11
    c0e2:	af 90       	pop	r10
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
    c0e4:	0c 94 b5 5f 	jmp	0xbf6a	; 0xbf6a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
    c0e8:	80 e0       	ldi	r24, 0x00	; 0
    c0ea:	df 91       	pop	r29
    c0ec:	cf 91       	pop	r28
    c0ee:	1f 91       	pop	r17
    c0f0:	0f 91       	pop	r16
    c0f2:	ff 90       	pop	r15
    c0f4:	ef 90       	pop	r14
    c0f6:	df 90       	pop	r13
    c0f8:	cf 90       	pop	r12
    c0fa:	bf 90       	pop	r11
    c0fc:	af 90       	pop	r10
    c0fe:	08 95       	ret

0000c100 <mqtt_publis_output(unsigned char, unsigned char) [clone .part.35]>:
_Z18mqtt_publis_outputhh.part.35():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3069
    }
  }
}
///
///
void mqtt_publis_output(uint8_t idx, uint8_t state)
    c100:	0f 93       	push	r16
    c102:	1f 93       	push	r17
    c104:	cf 93       	push	r28
    c106:	df 93       	push	r29
    c108:	cd b7       	in	r28, 0x3d	; 61
    c10a:	de b7       	in	r29, 0x3e	; 62
    c10c:	c8 58       	subi	r28, 0x88	; 136
    c10e:	d1 09       	sbc	r29, r1
    c110:	0f b6       	in	r0, 0x3f	; 63
    c112:	f8 94       	cli
    c114:	de bf       	out	0x3e, r29	; 62
    c116:	0f be       	out	0x3f, r0	; 63
    c118:	cd bf       	out	0x3d, r28	; 61
    c11a:	08 2f       	mov	r16, r24
    c11c:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3076
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
  {
    strcpy_P(str_topic, termbig_header_in);
    c11e:	64 ec       	ldi	r22, 0xC4	; 196
    c120:	75 e7       	ldi	r23, 0x75	; 117
    c122:	ce 01       	movw	r24, r28
    c124:	01 96       	adiw	r24, 0x01	; 1
    c126:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3077
    strcat(str_topic, "power-output/");
    c12a:	69 e8       	ldi	r22, 0x89	; 137
    c12c:	73 e0       	ldi	r23, 0x03	; 3
    c12e:	ce 01       	movw	r24, r28
    c130:	01 96       	adiw	r24, 0x01	; 1
    c132:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    c136:	4a e0       	ldi	r20, 0x0A	; 10
    c138:	be 01       	movw	r22, r28
    c13a:	6f 57       	subi	r22, 0x7F	; 127
    c13c:	7f 4f       	sbci	r23, 0xFF	; 255
    c13e:	80 2f       	mov	r24, r16
    c140:	90 e0       	ldi	r25, 0x00	; 0
    c142:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z18mqtt_publis_outputhh.part.35():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3079
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
    c146:	be 01       	movw	r22, r28
    c148:	6f 57       	subi	r22, 0x7F	; 127
    c14a:	7f 4f       	sbci	r23, 0xFF	; 255
    c14c:	ce 01       	movw	r24, r28
    c14e:	01 96       	adiw	r24, 0x01	; 1
    c150:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3080
    strcat(str_topic, "/state");
    c154:	67 e9       	ldi	r22, 0x97	; 151
    c156:	73 e0       	ldi	r23, 0x03	; 3
    c158:	ce 01       	movw	r24, r28
    c15a:	01 96       	adiw	r24, 0x01	; 1
    c15c:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    c160:	4a e0       	ldi	r20, 0x0A	; 10
    c162:	be 01       	movw	r22, r28
    c164:	6f 5b       	subi	r22, 0xBF	; 191
    c166:	7f 4f       	sbci	r23, 0xFF	; 255
    c168:	81 2f       	mov	r24, r17
    c16a:	90 e0       	ldi	r25, 0x00	; 0
    c16c:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z18mqtt_publis_outputhh.part.35():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3082
    itoa(state, payload, 10);
    mqtt_client.publish(str_topic, payload);
    c170:	ae 01       	movw	r20, r28
    c172:	4f 5b       	subi	r20, 0xBF	; 191
    c174:	5f 4f       	sbci	r21, 0xFF	; 255
    c176:	be 01       	movw	r22, r28
    c178:	6f 5f       	subi	r22, 0xFF	; 255
    c17a:	7f 4f       	sbci	r23, 0xFF	; 255
    c17c:	8f e2       	ldi	r24, 0x2F	; 47
    c17e:	90 e1       	ldi	r25, 0x10	; 16
    c180:	0e 94 23 60 	call	0xc046	; 0xc046 <PubSubClient::publish(char const*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3084
  }
}
    c184:	c8 57       	subi	r28, 0x78	; 120
    c186:	df 4f       	sbci	r29, 0xFF	; 255
    c188:	0f b6       	in	r0, 0x3f	; 63
    c18a:	f8 94       	cli
    c18c:	de bf       	out	0x3e, r29	; 62
    c18e:	0f be       	out	0x3f, r0	; 63
    c190:	cd bf       	out	0x3d, r28	; 61
    c192:	df 91       	pop	r29
    c194:	cf 91       	pop	r28
    c196:	1f 91       	pop	r17
    c198:	0f 91       	pop	r16
    c19a:	08 95       	ret

0000c19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>:
_ZN11EEPROMClass5writeEih.isra.1.lto_priv.276():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    c19c:	0c 94 1f ef 	jmp	0x1de3e	; 0x1de3e <eeprom_write_byte>

0000c1a0 <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:70
  return data.f;
}


void EEPROMwriteFloat(unsigned int addr, float x)
{
    c1a0:	cf 92       	push	r12
    c1a2:	df 92       	push	r13
    c1a4:	ef 92       	push	r14
    c1a6:	ff 92       	push	r15
    c1a8:	0f 93       	push	r16
    c1aa:	1f 93       	push	r17
    c1ac:	cf 93       	push	r28
    c1ae:	df 93       	push	r29
    c1b0:	00 d0       	rcall	.+0      	; 0xc1b2 <EEPROMwriteFloat(unsigned int, float)+0x12>
    c1b2:	1f 92       	push	r1
    c1b4:	cd b7       	in	r28, 0x3d	; 61
    c1b6:	de b7       	in	r29, 0x3e	; 62
    c1b8:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:75
  union {
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
    c1ba:	49 83       	std	Y+1, r20	; 0x01
    c1bc:	5a 83       	std	Y+2, r21	; 0x02
    c1be:	6b 83       	std	Y+3, r22	; 0x03
    c1c0:	7c 83       	std	Y+4, r23	; 0x04
    c1c2:	ce 01       	movw	r24, r28
    c1c4:	01 96       	adiw	r24, 0x01	; 1
    c1c6:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:76
  for (int i = 0; i < 4; i++) EEPROM.write(addr + i, data.b[i]);
    c1c8:	10 e0       	ldi	r17, 0x00	; 0
    c1ca:	00 e0       	ldi	r16, 0x00	; 0
    c1cc:	f7 01       	movw	r30, r14
    c1ce:	61 91       	ld	r22, Z+
    c1d0:	7f 01       	movw	r14, r30
    c1d2:	c8 01       	movw	r24, r16
    c1d4:	8c 0d       	add	r24, r12
    c1d6:	9d 1d       	adc	r25, r13
    c1d8:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c1dc:	0f 5f       	subi	r16, 0xFF	; 255
    c1de:	1f 4f       	sbci	r17, 0xFF	; 255
    c1e0:	04 30       	cpi	r16, 0x04	; 4
    c1e2:	11 05       	cpc	r17, r1
    c1e4:	99 f7       	brne	.-26     	; 0xc1cc <EEPROMwriteFloat(unsigned int, float)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:77
}
    c1e6:	0f 90       	pop	r0
    c1e8:	0f 90       	pop	r0
    c1ea:	0f 90       	pop	r0
    c1ec:	0f 90       	pop	r0
    c1ee:	df 91       	pop	r29
    c1f0:	cf 91       	pop	r28
    c1f2:	1f 91       	pop	r17
    c1f4:	0f 91       	pop	r16
    c1f6:	ff 90       	pop	r15
    c1f8:	ef 90       	pop	r14
    c1fa:	df 90       	pop	r13
    c1fc:	cf 90       	pop	r12
    c1fe:	08 95       	ret

0000c200 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:371
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
    c200:	2d e4       	ldi	r18, 0x4D	; 77
    c202:	82 9f       	mul	r24, r18
    c204:	c0 01       	movw	r24, r0
    c206:	11 24       	eor	r1, r1
    c208:	26 e0       	ldi	r18, 0x06	; 6
    c20a:	62 9f       	mul	r22, r18
    c20c:	80 0d       	add	r24, r0
    c20e:	91 1d       	adc	r25, r1
    c210:	11 24       	eor	r1, r1
    c212:	64 2f       	mov	r22, r20
    c214:	8e 50       	subi	r24, 0x0E	; 14
    c216:	9e 4f       	sbci	r25, 0xFE	; 254
    c218:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000c21c <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:330
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
  return ret;
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
    c21c:	1f 93       	push	r17
    c21e:	cf 93       	push	r28
    c220:	df 93       	push	r29
    c222:	14 2f       	mov	r17, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
    c224:	9d e4       	ldi	r25, 0x4D	; 77
    c226:	89 9f       	mul	r24, r25
    c228:	e0 01       	movw	r28, r0
    c22a:	11 24       	eor	r1, r1
    c22c:	cf 50       	subi	r28, 0x0F	; 15
    c22e:	de 4f       	sbci	r29, 0xFE	; 254
    c230:	86 e0       	ldi	r24, 0x06	; 6
    c232:	68 9f       	mul	r22, r24
    c234:	c0 0d       	add	r28, r0
    c236:	d1 1d       	adc	r29, r1
    c238:	11 24       	eor	r1, r1
    c23a:	65 2f       	mov	r22, r21
    c23c:	ce 01       	movw	r24, r28
    c23e:	05 96       	adiw	r24, 0x05	; 5
    c240:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    c244:	61 2f       	mov	r22, r17
    c246:	ce 01       	movw	r24, r28
    c248:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:333
}
    c24a:	df 91       	pop	r29
    c24c:	cf 91       	pop	r28
    c24e:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    c250:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000c254 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:312
  *stop_min = (stop & 0b00000011) * 15;
  *active = start & 0b00000001;
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
    c254:	cf 92       	push	r12
    c256:	ef 92       	push	r14
    c258:	0f 93       	push	r16
    c25a:	1f 93       	push	r17
    c25c:	cf 93       	push	r28
    c25e:	df 93       	push	r29
    c260:	c8 2f       	mov	r28, r24
    c262:	56 2f       	mov	r21, r22
    c264:	8e 2d       	mov	r24, r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
    c266:	3f e0       	ldi	r19, 0x0F	; 15
    c268:	63 2f       	mov	r22, r19
    c26a:	0e 94 da f0 	call	0x1e1b4	; 0x1e1b4 <__udivmodqi4>
    c26e:	83 70       	andi	r24, 0x03	; 3
    c270:	98 e0       	ldi	r25, 0x08	; 8
    c272:	09 9f       	mul	r16, r25
    c274:	80 01       	movw	r16, r0
    c276:	11 24       	eor	r1, r1
    c278:	08 0f       	add	r16, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    c27a:	8d e4       	ldi	r24, 0x4D	; 77
    c27c:	c8 9f       	mul	r28, r24
    c27e:	e0 01       	movw	r28, r0
    c280:	11 24       	eor	r1, r1
    c282:	cf 50       	subi	r28, 0x0F	; 15
    c284:	de 4f       	sbci	r29, 0xFE	; 254
    c286:	96 e0       	ldi	r25, 0x06	; 6
    c288:	59 9f       	mul	r21, r25
    c28a:	c0 0d       	add	r28, r0
    c28c:	d1 1d       	adc	r29, r1
    c28e:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
    c290:	82 2f       	mov	r24, r18
    c292:	0e 94 da f0 	call	0x1e1b4	; 0x1e1b4 <__udivmodqi4>
    c296:	68 2f       	mov	r22, r24
    c298:	66 0f       	add	r22, r22
    c29a:	66 70       	andi	r22, 0x06	; 6
    c29c:	88 e0       	ldi	r24, 0x08	; 8
    c29e:	48 9f       	mul	r20, r24
    c2a0:	a0 01       	movw	r20, r0
    c2a2:	11 24       	eor	r1, r1
    c2a4:	9c 2d       	mov	r25, r12
    c2a6:	91 70       	andi	r25, 0x01	; 1
    c2a8:	c9 2e       	mov	r12, r25
    c2aa:	c4 0e       	add	r12, r20
    c2ac:	6c 0d       	add	r22, r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    c2ae:	ce 01       	movw	r24, r28
    c2b0:	02 96       	adiw	r24, 0x02	; 2
    c2b2:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    c2b6:	60 2f       	mov	r22, r16
    c2b8:	ce 01       	movw	r24, r28
    c2ba:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:318
}
    c2bc:	df 91       	pop	r29
    c2be:	cf 91       	pop	r28
    c2c0:	1f 91       	pop	r17
    c2c2:	0f 91       	pop	r16
    c2c4:	ef 90       	pop	r14
    c2c6:	cf 90       	pop	r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    c2c8:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000c2cc <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:281
    if (t == 0) break;
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
    c2cc:	ef 92       	push	r14
    c2ce:	ff 92       	push	r15
    c2d0:	0f 93       	push	r16
    c2d2:	1f 93       	push	r17
    c2d4:	cf 93       	push	r28
    c2d6:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    c2d8:	9d e4       	ldi	r25, 0x4D	; 77
    c2da:	89 9f       	mul	r24, r25
    c2dc:	80 01       	movw	r16, r0
    c2de:	11 24       	eor	r1, r1
    c2e0:	eb 01       	movw	r28, r22
    c2e2:	78 01       	movw	r14, r16
    c2e4:	8c ec       	ldi	r24, 0xCC	; 204
    c2e6:	e8 1a       	sub	r14, r24
    c2e8:	8d ef       	ldi	r24, 0xFD	; 253
    c2ea:	f8 0a       	sbc	r15, r24
    c2ec:	02 5c       	subi	r16, 0xC2	; 194
    c2ee:	1d 4f       	sbci	r17, 0xFD	; 253
    c2f0:	69 91       	ld	r22, Y+
    c2f2:	c7 01       	movw	r24, r14
    c2f4:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
    c2f8:	fe 01       	movw	r30, r28
    c2fa:	31 97       	sbiw	r30, 0x01	; 1
    c2fc:	80 81       	ld	r24, Z
    c2fe:	88 23       	and	r24, r24
    c300:	31 f0       	breq	.+12     	; 0xc30e <thermostat_program_set_name(unsigned char, char*)+0x42>
    c302:	9f ef       	ldi	r25, 0xFF	; 255
    c304:	e9 1a       	sub	r14, r25
    c306:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:282
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
    c308:	e0 16       	cp	r14, r16
    c30a:	f1 06       	cpc	r15, r17
    c30c:	89 f7       	brne	.-30     	; 0xc2f0 <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
    c30e:	df 91       	pop	r29
    c310:	cf 91       	pop	r28
    c312:	1f 91       	pop	r17
    c314:	0f 91       	pop	r16
    c316:	ff 90       	pop	r15
    c318:	ef 90       	pop	r14
    c31a:	08 95       	ret

0000c31c <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:232
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
}

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
    c31c:	ef 92       	push	r14
    c31e:	ff 92       	push	r15
    c320:	0f 93       	push	r16
    c322:	1f 93       	push	r17
    c324:	cf 93       	push	r28
    c326:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
    c328:	e8 2e       	mov	r14, r24
    c32a:	f1 2c       	mov	r15, r1
    c32c:	91 e2       	ldi	r25, 0x21	; 33
    c32e:	89 9f       	mul	r24, r25
    c330:	e0 01       	movw	r28, r0
    c332:	11 24       	eor	r1, r1
    c334:	87 01       	movw	r16, r14
    c336:	00 0f       	add	r16, r16
    c338:	11 1f       	adc	r17, r17
    c33a:	00 0f       	add	r16, r16
    c33c:	11 1f       	adc	r17, r17
    c33e:	f8 01       	movw	r30, r16
    c340:	e8 54       	subi	r30, 0x48	; 72
    c342:	f5 4f       	sbci	r31, 0xF5	; 245
    c344:	40 81       	ld	r20, Z
    c346:	51 81       	ldd	r21, Z+1	; 0x01
    c348:	62 81       	ldd	r22, Z+2	; 0x02
    c34a:	73 81       	ldd	r23, Z+3	; 0x03
    c34c:	ce 01       	movw	r24, r28
    c34e:	80 5a       	subi	r24, 0xA0	; 160
    c350:	9e 4f       	sbci	r25, 0xFE	; 254
    c352:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
    c356:	f8 01       	movw	r30, r16
    c358:	e4 53       	subi	r30, 0x34	; 52
    c35a:	f5 4f       	sbci	r31, 0xF5	; 245
    c35c:	40 81       	ld	r20, Z
    c35e:	51 81       	ldd	r21, Z+1	; 0x01
    c360:	62 81       	ldd	r22, Z+2	; 0x02
    c362:	73 81       	ldd	r23, Z+3	; 0x03
    c364:	ce 01       	movw	r24, r28
    c366:	8c 59       	subi	r24, 0x9C	; 156
    c368:	9e 4f       	sbci	r25, 0xFE	; 254
    c36a:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
    c36e:	f8 01       	movw	r30, r16
    c370:	e0 52       	subi	r30, 0x20	; 32
    c372:	f5 4f       	sbci	r31, 0xF5	; 245
    c374:	40 81       	ld	r20, Z
    c376:	51 81       	ldd	r21, Z+1	; 0x01
    c378:	62 81       	ldd	r22, Z+2	; 0x02
    c37a:	73 81       	ldd	r23, Z+3	; 0x03
    c37c:	ce 01       	movw	r24, r28
    c37e:	88 59       	subi	r24, 0x98	; 152
    c380:	9e 4f       	sbci	r25, 0xFE	; 254
    c382:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    c386:	f7 01       	movw	r30, r14
    c388:	ec 50       	subi	r30, 0x0C	; 12
    c38a:	f5 4f       	sbci	r31, 0xF5	; 245
    c38c:	60 81       	ld	r22, Z
    c38e:	ce 01       	movw	r24, r28
    c390:	84 59       	subi	r24, 0x94	; 148
    c392:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:237
}
    c394:	df 91       	pop	r29
    c396:	cf 91       	pop	r28
    c398:	1f 91       	pop	r17
    c39a:	0f 91       	pop	r16
    c39c:	ff 90       	pop	r15
    c39e:	ef 90       	pop	r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    c3a0:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000c3a4 <button_click_ring_term_set_pid_default(unsigned int, unsigned int, unsigned char)>:
_Z38button_click_ring_term_set_pid_defaultjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1292
void helper_thermostat_set_pid_time(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_time(args1, args3);
}
void button_click_ring_term_set_pid_default(uint16_t args1, uint16_t args2, uint8_t args3)
{
    c3a4:	8f 92       	push	r8
    c3a6:	9f 92       	push	r9
    c3a8:	af 92       	push	r10
    c3aa:	bf 92       	push	r11
    c3ac:	ef 92       	push	r14
    c3ae:	ff 92       	push	r15
    c3b0:	0f 93       	push	r16
    c3b2:	1f 93       	push	r17
    c3b4:	cf 93       	push	r28
    c3b6:	df 93       	push	r29
    c3b8:	eb 01       	movw	r28, r22
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    c3ba:	7b 01       	movw	r14, r22
    c3bc:	ff 24       	eor	r15, r15
    c3be:	87 01       	movw	r16, r14
    c3c0:	00 0f       	add	r16, r16
    c3c2:	11 1f       	adc	r17, r17
    c3c4:	00 0f       	add	r16, r16
    c3c6:	11 1f       	adc	r17, r17
    c3c8:	f8 01       	movw	r30, r16
    c3ca:	e8 54       	subi	r30, 0x48	; 72
    c3cc:	f5 4f       	sbci	r31, 0xF5	; 245
    c3ce:	81 2c       	mov	r8, r1
    c3d0:	91 2c       	mov	r9, r1
    c3d2:	90 e8       	ldi	r25, 0x80	; 128
    c3d4:	a9 2e       	mov	r10, r25
    c3d6:	9f e3       	ldi	r25, 0x3F	; 63
    c3d8:	b9 2e       	mov	r11, r25
    c3da:	80 82       	st	Z, r8
    c3dc:	91 82       	std	Z+1, r9	; 0x01
    c3de:	a2 82       	std	Z+2, r10	; 0x02
    c3e0:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    c3e2:	86 2f       	mov	r24, r22
    c3e4:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    c3e8:	8c 2f       	mov	r24, r28
    c3ea:	0e 94 8e 61 	call	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    c3ee:	f8 01       	movw	r30, r16
    c3f0:	e4 53       	subi	r30, 0x34	; 52
    c3f2:	f5 4f       	sbci	r31, 0xF5	; 245
    c3f4:	80 e0       	ldi	r24, 0x00	; 0
    c3f6:	90 e0       	ldi	r25, 0x00	; 0
    c3f8:	a0 e0       	ldi	r26, 0x00	; 0
    c3fa:	bf e3       	ldi	r27, 0x3F	; 63
    c3fc:	80 83       	st	Z, r24
    c3fe:	91 83       	std	Z+1, r25	; 0x01
    c400:	a2 83       	std	Z+2, r26	; 0x02
    c402:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    c404:	8c 2f       	mov	r24, r28
    c406:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    c40a:	8c 2f       	mov	r24, r28
    c40c:	0e 94 8e 61 	call	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    c410:	f8 01       	movw	r30, r16
    c412:	e0 52       	subi	r30, 0x20	; 32
    c414:	f5 4f       	sbci	r31, 0xF5	; 245
    c416:	80 82       	st	Z, r8
    c418:	91 82       	std	Z+1, r9	; 0x01
    c41a:	a2 82       	std	Z+2, r10	; 0x02
    c41c:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    c41e:	8c 2f       	mov	r24, r28
    c420:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    c424:	8c 2f       	mov	r24, r28
    c426:	0e 94 8e 61 	call	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    c42a:	f7 01       	movw	r30, r14
    c42c:	ec 50       	subi	r30, 0x0C	; 12
    c42e:	f5 4f       	sbci	r31, 0xF5	; 245
    c430:	8c e3       	ldi	r24, 0x3C	; 60
    c432:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    c434:	8c 2f       	mov	r24, r28
    c436:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    c43a:	8c 2f       	mov	r24, r28
    c43c:	0e 94 8e 61 	call	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z38button_click_ring_term_set_pid_defaultjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1297
  thermostat_ring_pid_set_kp(args2, 1.0);
  thermostat_ring_pid_set_ki(args2, 0.5);
  thermostat_ring_pid_set_kd(args2, 1.0);
  thermostat_ring_pid_set_time(args2, 60);
  preload_pid_menu(0, args2, 0);
    c440:	40 e0       	ldi	r20, 0x00	; 0
    c442:	be 01       	movw	r22, r28
    c444:	90 e0       	ldi	r25, 0x00	; 0
    c446:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1298
}
    c448:	df 91       	pop	r29
    c44a:	cf 91       	pop	r28
    c44c:	1f 91       	pop	r17
    c44e:	0f 91       	pop	r16
    c450:	ff 90       	pop	r15
    c452:	ef 90       	pop	r14
    c454:	bf 90       	pop	r11
    c456:	af 90       	pop	r10
    c458:	9f 90       	pop	r9
    c45a:	8f 90       	pop	r8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1297
{
  thermostat_ring_pid_set_kp(args2, 1.0);
  thermostat_ring_pid_set_ki(args2, 0.5);
  thermostat_ring_pid_set_kd(args2, 1.0);
  thermostat_ring_pid_set_time(args2, 60);
  preload_pid_menu(0, args2, 0);
    c45c:	0c 94 cc 48 	jmp	0x9198	; 0x9198 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>

0000c460 <helper_thermostat_set_pid_time(unsigned int, float, unsigned char)>:
_Z30helper_thermostat_set_pid_timejfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1288
void helper_thermostat_set_pid_d(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_kd(args1, args2);
}
void helper_thermostat_set_pid_time(uint16_t args1, float args2, uint8_t args3)
{
    c460:	cf 93       	push	r28
    c462:	df 93       	push	r29
    c464:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
  thermostat_ring_set_pid_eeprom(id);
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    c466:	fc 01       	movw	r30, r24
    c468:	ff 27       	eor	r31, r31
    c46a:	ec 50       	subi	r30, 0x0C	; 12
    c46c:	f5 4f       	sbci	r31, 0xF5	; 245
    c46e:	20 83       	st	Z, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    c470:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    c474:	8c 2f       	mov	r24, r28
_Z30helper_thermostat_set_pid_timejfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1290
  thermostat_ring_pid_set_time(args1, args3);
}
    c476:	df 91       	pop	r29
    c478:	cf 91       	pop	r28
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
    c47a:	0c 94 8e 61 	jmp	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>

0000c47e <helper_thermostat_set_pid_d(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_djfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1284
void helper_thermostat_set_pid_i(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_ki(args1, args2);
}
void helper_thermostat_set_pid_d(uint16_t args1, float args2, uint8_t args3)
{
    c47e:	cf 93       	push	r28
    c480:	df 93       	push	r29
    c482:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    c484:	fc 01       	movw	r30, r24
    c486:	ff 27       	eor	r31, r31
    c488:	ee 0f       	add	r30, r30
    c48a:	ff 1f       	adc	r31, r31
    c48c:	ee 0f       	add	r30, r30
    c48e:	ff 1f       	adc	r31, r31
    c490:	e0 52       	subi	r30, 0x20	; 32
    c492:	f5 4f       	sbci	r31, 0xF5	; 245
    c494:	40 83       	st	Z, r20
    c496:	51 83       	std	Z+1, r21	; 0x01
    c498:	62 83       	std	Z+2, r22	; 0x02
    c49a:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    c49c:	8c 2f       	mov	r24, r28
    c49e:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    c4a2:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_djfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1286
  thermostat_ring_pid_set_kd(args1, args2);
}
    c4a4:	df 91       	pop	r29
    c4a6:	cf 91       	pop	r28
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
    c4a8:	0c 94 8e 61 	jmp	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>

0000c4ac <helper_thermostat_set_pid_i(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_ijfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1280
void helper_thermostat_set_pid_p(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_kp(args1, args2);
}
void helper_thermostat_set_pid_i(uint16_t args1, float args2, uint8_t args3)
{
    c4ac:	cf 93       	push	r28
    c4ae:	df 93       	push	r29
    c4b0:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    c4b2:	fc 01       	movw	r30, r24
    c4b4:	ff 27       	eor	r31, r31
    c4b6:	ee 0f       	add	r30, r30
    c4b8:	ff 1f       	adc	r31, r31
    c4ba:	ee 0f       	add	r30, r30
    c4bc:	ff 1f       	adc	r31, r31
    c4be:	e4 53       	subi	r30, 0x34	; 52
    c4c0:	f5 4f       	sbci	r31, 0xF5	; 245
    c4c2:	40 83       	st	Z, r20
    c4c4:	51 83       	std	Z+1, r21	; 0x01
    c4c6:	62 83       	std	Z+2, r22	; 0x02
    c4c8:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    c4ca:	8c 2f       	mov	r24, r28
    c4cc:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    c4d0:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_ijfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1282
  thermostat_ring_pid_set_ki(args1, args2);
}
    c4d2:	df 91       	pop	r29
    c4d4:	cf 91       	pop	r28
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
    c4d6:	0c 94 8e 61 	jmp	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>

0000c4da <helper_thermostat_set_pid_p(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_pjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1276
void helper_thermostat_set_mezni(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
}
void helper_thermostat_set_pid_p(uint16_t args1, float args2, uint8_t args3)
{
    c4da:	cf 93       	push	r28
    c4dc:	df 93       	push	r29
    c4de:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    c4e0:	fc 01       	movw	r30, r24
    c4e2:	ff 27       	eor	r31, r31
    c4e4:	ee 0f       	add	r30, r30
    c4e6:	ff 1f       	adc	r31, r31
    c4e8:	ee 0f       	add	r30, r30
    c4ea:	ff 1f       	adc	r31, r31
    c4ec:	e8 54       	subi	r30, 0x48	; 72
    c4ee:	f5 4f       	sbci	r31, 0xF5	; 245
    c4f0:	40 83       	st	Z, r20
    c4f2:	51 83       	std	Z+1, r21	; 0x01
    c4f4:	62 83       	std	Z+2, r22	; 0x02
    c4f6:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    c4f8:	8c 2f       	mov	r24, r28
    c4fa:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    c4fe:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_pjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1278
  thermostat_ring_pid_set_kp(args1, args2);
}
    c500:	df 91       	pop	r29
    c502:	cf 91       	pop	r28
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
    c504:	0c 94 8e 61 	jmp	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>

0000c508 <thermostat_ring_set_mode(unsigned char, unsigned char)>:
_Z24thermostat_ring_set_modehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    c508:	21 e2       	ldi	r18, 0x21	; 33
    c50a:	82 9f       	mul	r24, r18
    c50c:	c0 01       	movw	r24, r0
    c50e:	11 24       	eor	r1, r1
    c510:	82 5a       	subi	r24, 0xA2	; 162
    c512:	9e 4f       	sbci	r25, 0xFE	; 254
    c514:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000c518 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)>:
_Z31button_select_term_mode_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5361
   args2 ... zde je cislo ringu,
   args3 ... id polozky menu
*/

void button_select_term_mode_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    c518:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5362
  if (args3 == 0) thermostat_ring_set_mode(args2, TERM_MODE_OFF);
    c51a:	60 e0       	ldi	r22, 0x00	; 0
    c51c:	44 23       	and	r20, r20
    c51e:	61 f0       	breq	.+24     	; 0xc538 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5363
  if (args3 == 1) thermostat_ring_set_mode(args2, TERM_MODE_MAX);
    c520:	61 e0       	ldi	r22, 0x01	; 1
    c522:	41 30       	cpi	r20, 0x01	; 1
    c524:	49 f0       	breq	.+18     	; 0xc538 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5364
  if (args3 == 2) thermostat_ring_set_mode(args2, TERM_MODE_MIN);
    c526:	67 e0       	ldi	r22, 0x07	; 7
    c528:	42 30       	cpi	r20, 0x02	; 2
    c52a:	31 f0       	breq	.+12     	; 0xc538 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5365
  if (args3 == 3) thermostat_ring_set_mode(args2, TERM_MODE_PROG);
    c52c:	62 e0       	ldi	r22, 0x02	; 2
    c52e:	43 30       	cpi	r20, 0x03	; 3
    c530:	19 f0       	breq	.+6      	; 0xc538 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5366
  if (args3 == 4) thermostat_ring_set_mode(args2, TERM_MODE_MAN);
    c532:	44 30       	cpi	r20, 0x04	; 4
    c534:	19 f4       	brne	.+6      	; 0xc53c <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x24>
    c536:	68 e0       	ldi	r22, 0x08	; 8
    c538:	0e 94 84 62 	call	0xc508	; 0xc508 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5367
  change_term_mode = 1;
    c53c:	81 e0       	ldi	r24, 0x01	; 1
    c53e:	80 93 9a 09 	sts	0x099A, r24	; 0x80099a <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5368
}
    c542:	08 95       	ret

0000c544 <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:157
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
    c544:	1f 93       	push	r17
    c546:	cf 93       	push	r28
    c548:	df 93       	push	r29
    c54a:	16 2f       	mov	r17, r22
    c54c:	67 2f       	mov	r22, r23
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
    c54e:	91 e2       	ldi	r25, 0x21	; 33
    c550:	89 9f       	mul	r24, r25
    c552:	e0 01       	movw	r28, r0
    c554:	11 24       	eor	r1, r1
    c556:	ce 01       	movw	r24, r28
    c558:	8a 5a       	subi	r24, 0xAA	; 170
    c55a:	9e 4f       	sbci	r25, 0xFE	; 254
    c55c:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    c560:	61 2f       	mov	r22, r17
    c562:	ce 01       	movw	r24, r28
    c564:	89 5a       	subi	r24, 0xA9	; 169
    c566:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:160
}
    c568:	df 91       	pop	r29
    c56a:	cf 91       	pop	r28
    c56c:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    c56e:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000c572 <helper_thermostat_set_mezni(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_meznijfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1272
  args2 -- menu_dialog_set_variable_now, aktualni hodnota
  args1 -- menu_dialog_set_variable_args, id ringu
  args3 -- menu_dialog_set_variable_now, aktualni hodnota uint8_t format
*/
void helper_thermostat_set_mezni(uint16_t args1, float args2, uint8_t args3)
{
    c572:	cf 93       	push	r28
    c574:	c8 2f       	mov	r28, r24
    c576:	cb 01       	movw	r24, r22
    c578:	ba 01       	movw	r22, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1273
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
    c57a:	20 e0       	ldi	r18, 0x00	; 0
    c57c:	30 e0       	ldi	r19, 0x00	; 0
    c57e:	40 e2       	ldi	r20, 0x20	; 32
    c580:	51 e4       	ldi	r21, 0x41	; 65
    c582:	0e 94 59 ee 	call	0x1dcb2	; 0x1dcb2 <__mulsf3>
    c586:	0e 94 9f f0 	call	0x1e13e	; 0x1e13e <__fixsfsi>
    c58a:	8c 2f       	mov	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
}
    c58c:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1273
  args1 -- menu_dialog_set_variable_args, id ringu
  args3 -- menu_dialog_set_variable_now, aktualni hodnota uint8_t format
*/
void helper_thermostat_set_mezni(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
    c58e:	0c 94 a2 62 	jmp	0xc544	; 0xc544 <thermostat_ring_set_mezni(unsigned char, int)>

0000c592 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:110
    name[i] = t;
    if (t == 0) break;
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
    c592:	df 92       	push	r13
    c594:	ef 92       	push	r14
    c596:	ff 92       	push	r15
    c598:	0f 93       	push	r16
    c59a:	1f 93       	push	r17
    c59c:	cf 93       	push	r28
    c59e:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    c5a0:	91 e2       	ldi	r25, 0x21	; 33
    c5a2:	89 9f       	mul	r24, r25
    c5a4:	e0 01       	movw	r28, r0
    c5a6:	11 24       	eor	r1, r1
    c5a8:	7b 01       	movw	r14, r22
    c5aa:	8e 01       	movw	r16, r28
    c5ac:	04 5b       	subi	r16, 0xB4	; 180
    c5ae:	1e 4f       	sbci	r17, 0xFE	; 254
    c5b0:	cb 5a       	subi	r28, 0xAB	; 171
    c5b2:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    c5b4:	f7 01       	movw	r30, r14
    c5b6:	d1 90       	ld	r13, Z+
    c5b8:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    c5ba:	6d 2d       	mov	r22, r13
    c5bc:	c8 01       	movw	r24, r16
    c5be:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
    c5c2:	dd 20       	and	r13, r13
    c5c4:	29 f0       	breq	.+10     	; 0xc5d0 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
    c5c6:	0f 5f       	subi	r16, 0xFF	; 255
    c5c8:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:112
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    c5ca:	0c 17       	cp	r16, r28
    c5cc:	1d 07       	cpc	r17, r29
    c5ce:	91 f7       	brne	.-28     	; 0xc5b4 <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
    c5d0:	df 91       	pop	r29
    c5d2:	cf 91       	pop	r28
    c5d4:	1f 91       	pop	r17
    c5d6:	0f 91       	pop	r16
    c5d8:	ff 90       	pop	r15
    c5da:	ef 90       	pop	r14
    c5dc:	df 90       	pop	r13
    c5de:	08 95       	ret

0000c5e0 <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
    c5e0:	8f 92       	push	r8
    c5e2:	9f 92       	push	r9
    c5e4:	af 92       	push	r10
    c5e6:	bf 92       	push	r11
    c5e8:	ef 92       	push	r14
    c5ea:	ff 92       	push	r15
    c5ec:	0f 93       	push	r16
    c5ee:	1f 93       	push	r17
    c5f0:	cf 93       	push	r28
    c5f2:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    c5f4:	e8 2e       	mov	r14, r24
    c5f6:	f1 2c       	mov	r15, r1
    c5f8:	87 01       	movw	r16, r14
    c5fa:	00 0f       	add	r16, r16
    c5fc:	11 1f       	adc	r17, r17
    c5fe:	00 0f       	add	r16, r16
    c600:	11 1f       	adc	r17, r17
    c602:	f8 01       	movw	r30, r16
    c604:	e8 54       	subi	r30, 0x48	; 72
    c606:	f5 4f       	sbci	r31, 0xF5	; 245
    c608:	81 2c       	mov	r8, r1
    c60a:	91 2c       	mov	r9, r1
    c60c:	90 e8       	ldi	r25, 0x80	; 128
    c60e:	a9 2e       	mov	r10, r25
    c610:	9f e3       	ldi	r25, 0x3F	; 63
    c612:	b9 2e       	mov	r11, r25
    c614:	80 82       	st	Z, r8
    c616:	91 82       	std	Z+1, r9	; 0x01
    c618:	a2 82       	std	Z+2, r10	; 0x02
    c61a:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    c61c:	8c 2f       	mov	r24, r28
    c61e:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    c622:	8c 2f       	mov	r24, r28
    c624:	0e 94 8e 61 	call	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    c628:	f8 01       	movw	r30, r16
    c62a:	e4 53       	subi	r30, 0x34	; 52
    c62c:	f5 4f       	sbci	r31, 0xF5	; 245
    c62e:	80 e0       	ldi	r24, 0x00	; 0
    c630:	90 e0       	ldi	r25, 0x00	; 0
    c632:	a0 e0       	ldi	r26, 0x00	; 0
    c634:	bf e3       	ldi	r27, 0x3F	; 63
    c636:	80 83       	st	Z, r24
    c638:	91 83       	std	Z+1, r25	; 0x01
    c63a:	a2 83       	std	Z+2, r26	; 0x02
    c63c:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    c63e:	8c 2f       	mov	r24, r28
    c640:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    c644:	8c 2f       	mov	r24, r28
    c646:	0e 94 8e 61 	call	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    c64a:	f8 01       	movw	r30, r16
    c64c:	e0 52       	subi	r30, 0x20	; 32
    c64e:	f5 4f       	sbci	r31, 0xF5	; 245
    c650:	80 82       	st	Z, r8
    c652:	91 82       	std	Z+1, r9	; 0x01
    c654:	a2 82       	std	Z+2, r10	; 0x02
    c656:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    c658:	8c 2f       	mov	r24, r28
    c65a:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    c65e:	8c 2f       	mov	r24, r28
    c660:	0e 94 8e 61 	call	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    c664:	f7 01       	movw	r30, r14
    c666:	ec 50       	subi	r30, 0x0C	; 12
    c668:	f5 4f       	sbci	r31, 0xF5	; 245
    c66a:	8c e3       	ldi	r24, 0x3C	; 60
    c66c:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    c66e:	8c 2f       	mov	r24, r28
    c670:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    c674:	8c 2f       	mov	r24, r28
    c676:	0e 94 8e 61 	call	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    c67a:	81 e2       	ldi	r24, 0x21	; 33
    c67c:	c8 9f       	mul	r28, r24
    c67e:	80 01       	movw	r16, r0
    c680:	11 24       	eor	r1, r1
    c682:	6f ef       	ldi	r22, 0xFF	; 255
    c684:	c8 01       	movw	r24, r16
    c686:	84 5a       	subi	r24, 0xA4	; 164
    c688:	9e 4f       	sbci	r25, 0xFE	; 254
    c68a:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:424
  thermostat_ring_pid_set_kp(idx, 1);
  thermostat_ring_pid_set_ki(idx, 0.5);
  thermostat_ring_pid_set_kd(idx, 1);
  thermostat_ring_pid_set_time(idx, 60);
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
  thermostat_ring_set_mezni(idx, 220);
    c68e:	6c ed       	ldi	r22, 0xDC	; 220
    c690:	70 e0       	ldi	r23, 0x00	; 0
    c692:	8c 2f       	mov	r24, r28
    c694:	0e 94 a2 62 	call	0xc544	; 0xc544 <thermostat_ring_set_mezni(unsigned char, int)>
thermostat_ring_set_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    c698:	6f ef       	ldi	r22, 0xFF	; 255
    c69a:	c8 01       	movw	r24, r16
    c69c:	85 5a       	subi	r24, 0xA5	; 165
    c69e:	9e 4f       	sbci	r25, 0xFE	; 254
    c6a0:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
thermostat_ring_set_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    c6a4:	f7 01       	movw	r30, r14
    c6a6:	e3 57       	subi	r30, 0x73	; 115
    c6a8:	f4 4f       	sbci	r31, 0xF4	; 244
    c6aa:	10 82       	st	Z, r1
thermostat_ring_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    c6ac:	6f ef       	ldi	r22, 0xFF	; 255
    c6ae:	c8 01       	movw	r24, r16
    c6b0:	83 5a       	subi	r24, 0xA3	; 163
    c6b2:	9e 4f       	sbci	r25, 0xFE	; 254
    c6b4:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
thermostat_ring_set_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    c6b8:	6f ef       	ldi	r22, 0xFF	; 255
    c6ba:	c8 01       	movw	r24, r16
    c6bc:	81 5a       	subi	r24, 0xA1	; 161
    c6be:	9e 4f       	sbci	r25, 0xFE	; 254
    c6c0:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:430
  thermostat_ring_set_program_id(idx, PROG_FREE);
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
    c6c4:	60 e0       	ldi	r22, 0x00	; 0
    c6c6:	8c 2f       	mov	r24, r28
    c6c8:	0e 94 84 62 	call	0xc508	; 0xc508 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_name(idx, "FREE");
    c6cc:	6e e9       	ldi	r22, 0x9E	; 158
    c6ce:	73 e0       	ldi	r23, 0x03	; 3
    c6d0:	8c 2f       	mov	r24, r28
    c6d2:	0e 94 c9 62 	call	0xc592	; 0xc592 <thermostat_ring_set_name(unsigned char, char*)>
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    c6d6:	60 e0       	ldi	r22, 0x00	; 0
    c6d8:	c8 01       	movw	r24, r16
    c6da:	88 5a       	subi	r24, 0xA8	; 168
    c6dc:	9e 4f       	sbci	r25, 0xFE	; 254
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
    c6de:	cf 91       	pop	r28
    c6e0:	1f 91       	pop	r17
    c6e2:	0f 91       	pop	r16
    c6e4:	ff 90       	pop	r15
    c6e6:	ef 90       	pop	r14
    c6e8:	bf 90       	pop	r11
    c6ea:	af 90       	pop	r10
    c6ec:	9f 90       	pop	r9
    c6ee:	8f 90       	pop	r8
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    c6f0:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000c6f4 <helper_thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z48helper_thermostat_button_deactivate_ring_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5180
   Funkce pro aktivovani/deaktivovani ringu termostatu
*/

void helper_thermostat_button_deactivate_ring_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  thermostat_ring_clear(args1);
    c6f4:	0c 94 f0 62 	jmp	0xc5e0	; 0xc5e0 <thermostat_ring_clear(unsigned char)>

0000c6f8 <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)>:
_Z38helper_thermostat_button_set_ring_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5147
   args3
   promene nemaji zadny vyznam
*/

void helper_thermostat_button_set_ring_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    c6f8:	cf 93       	push	r28
    c6fa:	df 93       	push	r29
    c6fc:	00 d0       	rcall	.+0      	; 0xc6fe <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)+0x6>
    c6fe:	00 d0       	rcall	.+0      	; 0xc700 <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)+0x8>
    c700:	00 d0       	rcall	.+0      	; 0xc702 <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)+0xa>
    c702:	1f 92       	push	r1
    c704:	cd b7       	in	r28, 0x3d	; 61
    c706:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5149
  char name[10];
  display_element_get_string(name);
    c708:	ce 01       	movw	r24, r28
    c70a:	01 96       	adiw	r24, 0x01	; 1
    c70c:	0e 94 2c 4b 	call	0x9658	; 0x9658 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5151
  args2 = display_element_get_string_args();
  thermostat_ring_set_name(args2, name);
    c710:	be 01       	movw	r22, r28
    c712:	6f 5f       	subi	r22, 0xFF	; 255
    c714:	7f 4f       	sbci	r23, 0xFF	; 255
    c716:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <dialog_set_string_args>
    c71a:	0e 94 c9 62 	call	0xc592	; 0xc592 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5152
}
    c71e:	2a 96       	adiw	r28, 0x0a	; 10
    c720:	0f b6       	in	r0, 0x3f	; 63
    c722:	f8 94       	cli
    c724:	de bf       	out	0x3e, r29	; 62
    c726:	0f be       	out	0x3f, r0	; 63
    c728:	cd bf       	out	0x3d, r28	; 61
    c72a:	df 91       	pop	r29
    c72c:	cf 91       	pop	r28
    c72e:	08 95       	ret

0000c730 <helper_thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z46helper_thermostat_button_activate_ring_onclickjjh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    c730:	21 e2       	ldi	r18, 0x21	; 33
    c732:	82 9f       	mul	r24, r18
    c734:	c0 01       	movw	r24, r0
    c736:	11 24       	eor	r1, r1
    c738:	61 e0       	ldi	r22, 0x01	; 1
    c73a:	83 5a       	subi	r24, 0xA3	; 163
    c73c:	9e 4f       	sbci	r25, 0xFE	; 254
    c73e:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000c742 <button_deassociate_input_sensor_for_term_onclick(unsigned int, unsigned int, unsigned char)>:
_Z48button_deassociate_input_sensor_for_term_onclickjjh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    c742:	21 e2       	ldi	r18, 0x21	; 33
    c744:	62 9f       	mul	r22, r18
    c746:	c0 01       	movw	r24, r0
    c748:	11 24       	eor	r1, r1
    c74a:	6f ef       	ldi	r22, 0xFF	; 255
    c74c:	84 5a       	subi	r24, 0xA4	; 164
    c74e:	9e 4f       	sbci	r25, 0xFE	; 254
    c750:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000c754 <button_select_term_ring_input_in_dialog_onclick(unsigned int, unsigned int, unsigned char)>:
_Z47button_select_term_ring_input_in_dialog_onclickjjh():
    c754:	21 e2       	ldi	r18, 0x21	; 33
    c756:	62 9f       	mul	r22, r18
    c758:	c0 01       	movw	r24, r0
    c75a:	11 24       	eor	r1, r1
    c75c:	64 2f       	mov	r22, r20
    c75e:	84 5a       	subi	r24, 0xA4	; 164
    c760:	9e 4f       	sbci	r25, 0xFE	; 254
    c762:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000c766 <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:55
  }
  return ret;
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    c766:	af 92       	push	r10
    c768:	bf 92       	push	r11
    c76a:	cf 92       	push	r12
    c76c:	df 92       	push	r13
    c76e:	ef 92       	push	r14
    c770:	ff 92       	push	r15
    c772:	0f 93       	push	r16
    c774:	1f 93       	push	r17
    c776:	cf 93       	push	r28
    c778:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:56
  if (idx < HW_ONEWIRE_MAXROMS)
    c77a:	86 30       	cpi	r24, 0x06	; 6
    c77c:	08 f0       	brcs	.+2      	; 0xc780 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    c77e:	49 c0       	rjmp	.+146    	; 0xc812 <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
    c780:	6b 01       	movw	r12, r22
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:58
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    c782:	96 e1       	ldi	r25, 0x16	; 22
    c784:	89 9f       	mul	r24, r25
    c786:	e0 01       	movw	r28, r0
    c788:	11 24       	eor	r1, r1
    c78a:	f6 01       	movw	r30, r12
    c78c:	61 91       	ld	r22, Z+
    c78e:	7f 01       	movw	r14, r30
    c790:	ce 01       	movw	r24, r28
    c792:	88 53       	subi	r24, 0x38	; 56
    c794:	9f 4f       	sbci	r25, 0xFF	; 255
    c796:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c79a:	8e 01       	movw	r16, r28
    c79c:	07 53       	subi	r16, 0x37	; 55
    c79e:	1f 4f       	sbci	r17, 0xFF	; 255
    c7a0:	5e 01       	movw	r10, r28
    c7a2:	f1 ed       	ldi	r31, 0xD1	; 209
    c7a4:	af 0e       	add	r10, r31
    c7a6:	b1 1c       	adc	r11, r1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:61
    for (uint8_t m = 0; m < 8; m++)
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    c7a8:	f7 01       	movw	r30, r14
    c7aa:	61 91       	ld	r22, Z+
    c7ac:	7f 01       	movw	r14, r30
    c7ae:	c8 01       	movw	r24, r16
    c7b0:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:62
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    c7b4:	f7 01       	movw	r30, r14
    c7b6:	62 85       	ldd	r22, Z+10	; 0x0a
    c7b8:	c8 01       	movw	r24, r16
    c7ba:	0b 96       	adiw	r24, 0x0b	; 11
    c7bc:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c7c0:	0f 5f       	subi	r16, 0xFF	; 255
    c7c2:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:59
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    for (uint8_t m = 0; m < 8; m++)
    c7c4:	0a 15       	cp	r16, r10
    c7c6:	1b 05       	cpc	r17, r11
    c7c8:	79 f7       	brne	.-34     	; 0xc7a8 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:64
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    c7ca:	f6 01       	movw	r30, r12
    c7cc:	61 85       	ldd	r22, Z+9	; 0x09
    c7ce:	c8 01       	movw	r24, r16
    c7d0:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:65
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    c7d4:	f6 01       	movw	r30, r12
    c7d6:	63 85       	ldd	r22, Z+11	; 0x0b
    c7d8:	ce 01       	movw	r24, r28
    c7da:	8e 52       	subi	r24, 0x2E	; 46
    c7dc:	9f 4f       	sbci	r25, 0xFF	; 255
    c7de:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:66
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    c7e2:	f6 01       	movw	r30, r12
    c7e4:	62 85       	ldd	r22, Z+10	; 0x0a
    c7e6:	ce 01       	movw	r24, r28
    c7e8:	8d 52       	subi	r24, 0x2D	; 45
    c7ea:	9f 4f       	sbci	r25, 0xFF	; 255
    c7ec:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:67
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    c7f0:	f6 01       	movw	r30, r12
    c7f2:	64 89       	ldd	r22, Z+20	; 0x14
    c7f4:	ce 01       	movw	r24, r28
    c7f6:	84 52       	subi	r24, 0x24	; 36
    c7f8:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:69
  }
}
    c7fa:	df 91       	pop	r29
    c7fc:	cf 91       	pop	r28
    c7fe:	1f 91       	pop	r17
    c800:	0f 91       	pop	r16
    c802:	ff 90       	pop	r15
    c804:	ef 90       	pop	r14
    c806:	df 90       	pop	r13
    c808:	cf 90       	pop	r12
    c80a:	bf 90       	pop	r11
    c80c:	af 90       	pop	r10
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:67
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    c80e:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:69
  }
}
    c812:	df 91       	pop	r29
    c814:	cf 91       	pop	r28
    c816:	1f 91       	pop	r17
    c818:	0f 91       	pop	r16
    c81a:	ff 90       	pop	r15
    c81c:	ef 90       	pop	r14
    c81e:	df 90       	pop	r13
    c820:	cf 90       	pop	r12
    c822:	bf 90       	pop	r11
    c824:	af 90       	pop	r10
    c826:	08 95       	ret

0000c828 <device_set_name(char*)>:
_Z15device_set_namePc():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:74
    }
  }
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
    c828:	ff 92       	push	r15
    c82a:	0f 93       	push	r16
    c82c:	1f 93       	push	r17
    c82e:	cf 93       	push	r28
    c830:	df 93       	push	r29
    c832:	8c 01       	movw	r16, r24
    c834:	d0 e0       	ldi	r29, 0x00	; 0
    c836:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:78
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    c838:	f8 01       	movw	r30, r16
    c83a:	f1 90       	ld	r15, Z+
    c83c:	8f 01       	movw	r16, r30
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:79
    EEPROM.write(device_nazev +  i, t);
    c83e:	6f 2d       	mov	r22, r15
    c840:	ce 01       	movw	r24, r28
    c842:	8c 59       	subi	r24, 0x9C	; 156
    c844:	9f 4f       	sbci	r25, 0xFF	; 255
    c846:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:80
    if (t == 0)
    c84a:	f1 10       	cpse	r15, r1
    c84c:	0b c0       	rjmp	.+22     	; 0xc864 <device_set_name(char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:82
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    c84e:	60 e0       	ldi	r22, 0x00	; 0
    c850:	ce 01       	movw	r24, r28
    c852:	8b 59       	subi	r24, 0x9B	; 155
    c854:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:86
      break;
    }
  }
}
    c856:	df 91       	pop	r29
    c858:	cf 91       	pop	r28
    c85a:	1f 91       	pop	r17
    c85c:	0f 91       	pop	r16
    c85e:	ff 90       	pop	r15
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:82
  {
    t = name[i];
    EEPROM.write(device_nazev +  i, t);
    if (t == 0)
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    c860:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c864:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:76
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    c866:	c9 30       	cpi	r28, 0x09	; 9
    c868:	d1 05       	cpc	r29, r1
    c86a:	31 f7       	brne	.-52     	; 0xc838 <device_set_name(char*)+0x10>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:86
    {
      EEPROM.write(device_nazev +  i + 1, 0);
      break;
    }
  }
}
    c86c:	df 91       	pop	r29
    c86e:	cf 91       	pop	r28
    c870:	1f 91       	pop	r17
    c872:	0f 91       	pop	r16
    c874:	ff 90       	pop	r15
    c876:	08 95       	ret

0000c878 <save_setup_network()>:
_Z18save_setup_networkv():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:41
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ulozi nastaveni site
void save_setup_network(void)
{
    c878:	ef 92       	push	r14
    c87a:	ff 92       	push	r15
    c87c:	0f 93       	push	r16
    c87e:	1f 93       	push	r17
    c880:	cf 93       	push	r28
    c882:	df 93       	push	r29
    c884:	09 e1       	ldi	r16, 0x19	; 25
    c886:	1e e0       	ldi	r17, 0x0E	; 14
    c888:	ce e6       	ldi	r28, 0x6E	; 110
    c88a:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:42
  for (uint8_t m = 0; m < 6; m++) EEPROM.write(device_mac + m, device.mac[m]);
    c88c:	f8 01       	movw	r30, r16
    c88e:	61 91       	ld	r22, Z+
    c890:	8f 01       	movw	r16, r30
    c892:	ce 01       	movw	r24, r28
    c894:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c898:	21 96       	adiw	r28, 0x01	; 1
    c89a:	c4 37       	cpi	r28, 0x74	; 116
    c89c:	d1 05       	cpc	r29, r1
    c89e:	b1 f7       	brne	.-20     	; 0xc88c <save_setup_network()+0x14>
    c8a0:	0f e1       	ldi	r16, 0x1F	; 31
    c8a2:	1e e0       	ldi	r17, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:43
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ip + m, device.myIP[m]);
    c8a4:	f8 01       	movw	r30, r16
    c8a6:	61 91       	ld	r22, Z+
    c8a8:	8f 01       	movw	r16, r30
    c8aa:	ce 01       	movw	r24, r28
    c8ac:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c8b0:	21 96       	adiw	r28, 0x01	; 1
    c8b2:	c8 37       	cpi	r28, 0x78	; 120
    c8b4:	d1 05       	cpc	r29, r1
    c8b6:	b1 f7       	brne	.-20     	; 0xc8a4 <save_setup_network()+0x2c>
    c8b8:	03 e2       	ldi	r16, 0x23	; 35
    c8ba:	1e e0       	ldi	r17, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:44
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mask + m, device.myMASK[m]);
    c8bc:	f8 01       	movw	r30, r16
    c8be:	61 91       	ld	r22, Z+
    c8c0:	8f 01       	movw	r16, r30
    c8c2:	ce 01       	movw	r24, r28
    c8c4:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c8c8:	21 96       	adiw	r28, 0x01	; 1
    c8ca:	cc 37       	cpi	r28, 0x7C	; 124
    c8cc:	d1 05       	cpc	r29, r1
    c8ce:	b1 f7       	brne	.-20     	; 0xc8bc <save_setup_network()+0x44>
    c8d0:	2b e2       	ldi	r18, 0x2B	; 43
    c8d2:	e2 2e       	mov	r14, r18
    c8d4:	2e e0       	ldi	r18, 0x0E	; 14
    c8d6:	f2 2e       	mov	r15, r18
    c8d8:	00 e8       	ldi	r16, 0x80	; 128
    c8da:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:45
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_gw + m, device.myGW[m]);
    c8dc:	f7 01       	movw	r30, r14
    c8de:	61 91       	ld	r22, Z+
    c8e0:	7f 01       	movw	r14, r30
    c8e2:	c8 01       	movw	r24, r16
    c8e4:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c8e8:	0f 5f       	subi	r16, 0xFF	; 255
    c8ea:	1f 4f       	sbci	r17, 0xFF	; 255
    c8ec:	04 38       	cpi	r16, 0x84	; 132
    c8ee:	11 05       	cpc	r17, r1
    c8f0:	a9 f7       	brne	.-22     	; 0xc8dc <save_setup_network()+0x64>
    c8f2:	97 e2       	ldi	r25, 0x27	; 39
    c8f4:	e9 2e       	mov	r14, r25
    c8f6:	9e e0       	ldi	r25, 0x0E	; 14
    c8f8:	f9 2e       	mov	r15, r25
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:46
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_dns + m, device.myDNS[m]);
    c8fa:	f7 01       	movw	r30, r14
    c8fc:	61 91       	ld	r22, Z+
    c8fe:	7f 01       	movw	r14, r30
    c900:	ce 01       	movw	r24, r28
    c902:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c906:	21 96       	adiw	r28, 0x01	; 1
    c908:	c0 38       	cpi	r28, 0x80	; 128
    c90a:	d1 05       	cpc	r29, r1
    c90c:	b1 f7       	brne	.-20     	; 0xc8fa <save_setup_network()+0x82>
    c90e:	8f e2       	ldi	r24, 0x2F	; 47
    c910:	e8 2e       	mov	r14, r24
    c912:	8e e0       	ldi	r24, 0x0E	; 14
    c914:	f8 2e       	mov	r15, r24
    c916:	c4 e6       	ldi	r28, 0x64	; 100
    c918:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:47
  for (uint8_t m = 0; m < 9; m++) EEPROM.write(device_nazev + m, device.nazev[m]);
    c91a:	f7 01       	movw	r30, r14
    c91c:	61 91       	ld	r22, Z+
    c91e:	7f 01       	movw	r14, r30
    c920:	ce 01       	movw	r24, r28
    c922:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c926:	21 96       	adiw	r28, 0x01	; 1
    c928:	cd 36       	cpi	r28, 0x6D	; 109
    c92a:	d1 05       	cpc	r29, r1
    c92c:	b1 f7       	brne	.-20     	; 0xc91a <save_setup_network()+0xa2>
    c92e:	c9 e3       	ldi	r28, 0x39	; 57
    c930:	de e0       	ldi	r29, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:48
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mqtt_server + m, device.mqtt_server[m]);
    c932:	69 91       	ld	r22, Y+
    c934:	c8 01       	movw	r24, r16
    c936:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c93a:	0f 5f       	subi	r16, 0xFF	; 255
    c93c:	1f 4f       	sbci	r17, 0xFF	; 255
    c93e:	08 38       	cpi	r16, 0x88	; 136
    c940:	11 05       	cpc	r17, r1
    c942:	b9 f7       	brne	.-18     	; 0xc932 <save_setup_network()+0xba>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:49
  EEPROM.write(device_mqtt_port, device.mqtt_port >> 8);
    c944:	60 91 3e 0e 	lds	r22, 0x0E3E	; 0x800e3e <device+0x25>
    c948:	88 e8       	ldi	r24, 0x88	; 136
    c94a:	90 e0       	ldi	r25, 0x00	; 0
    c94c:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:50
  EEPROM.write(device_mqtt_port + 1, device.mqtt_port & 0xff);
    c950:	60 91 3d 0e 	lds	r22, 0x0E3D	; 0x800e3d <device+0x24>
    c954:	89 e8       	ldi	r24, 0x89	; 137
    c956:	90 e0       	ldi	r25, 0x00	; 0
    c958:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c95c:	0f e3       	ldi	r16, 0x3F	; 63
    c95e:	1e e0       	ldi	r17, 0x0E	; 14
    c960:	ca e8       	ldi	r28, 0x8A	; 138
    c962:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:51
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_user + m, device.mqtt_user[m]);
    c964:	f8 01       	movw	r30, r16
    c966:	61 91       	ld	r22, Z+
    c968:	8f 01       	movw	r16, r30
    c96a:	ce 01       	movw	r24, r28
    c96c:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c970:	21 96       	adiw	r28, 0x01	; 1
    c972:	ce 39       	cpi	r28, 0x9E	; 158
    c974:	d1 05       	cpc	r29, r1
    c976:	b1 f7       	brne	.-20     	; 0xc964 <save_setup_network()+0xec>
    c978:	03 e5       	ldi	r16, 0x53	; 83
    c97a:	1e e0       	ldi	r17, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:52
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_key + m, device.mqtt_key[m]);
    c97c:	f8 01       	movw	r30, r16
    c97e:	61 91       	ld	r22, Z+
    c980:	8f 01       	movw	r16, r30
    c982:	ce 01       	movw	r24, r28
    c984:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c988:	21 96       	adiw	r28, 0x01	; 1
    c98a:	c2 3b       	cpi	r28, 0xB2	; 178
    c98c:	d1 05       	cpc	r29, r1
    c98e:	b1 f7       	brne	.-20     	; 0xc97c <save_setup_network()+0x104>
    c990:	07 e6       	ldi	r16, 0x67	; 103
    c992:	1e e0       	ldi	r17, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:53
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ntp_server + m, device.ntp_server[m]);
    c994:	f8 01       	movw	r30, r16
    c996:	61 91       	ld	r22, Z+
    c998:	8f 01       	movw	r16, r30
    c99a:	ce 01       	movw	r24, r28
    c99c:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    c9a0:	21 96       	adiw	r28, 0x01	; 1
    c9a2:	c6 3b       	cpi	r28, 0xB6	; 182
    c9a4:	d1 05       	cpc	r29, r1
    c9a6:	b1 f7       	brne	.-20     	; 0xc994 <save_setup_network()+0x11c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:54
}
    c9a8:	df 91       	pop	r29
    c9aa:	cf 91       	pop	r28
    c9ac:	1f 91       	pop	r17
    c9ae:	0f 91       	pop	r16
    c9b0:	ff 90       	pop	r15
    c9b2:	ef 90       	pop	r14
    c9b4:	08 95       	ret

0000c9b6 <helper_dialog_mqtt_set_pass(unsigned int, unsigned int, unsigned char)>:
_Z27helper_dialog_mqtt_set_passjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5925
  strcpy(device.mqtt_user, user);
  save_setup_network();
  selftest_set_0(SELFTEST_RESTART_NEEDED);
}
void helper_dialog_mqtt_set_pass(uint16_t args1, uint16_t args2, uint8_t args3)
{
    c9b6:	cf 93       	push	r28
    c9b8:	df 93       	push	r29
    c9ba:	cd b7       	in	r28, 0x3d	; 61
    c9bc:	de b7       	in	r29, 0x3e	; 62
    c9be:	64 97       	sbiw	r28, 0x14	; 20
    c9c0:	0f b6       	in	r0, 0x3f	; 63
    c9c2:	f8 94       	cli
    c9c4:	de bf       	out	0x3e, r29	; 62
    c9c6:	0f be       	out	0x3f, r0	; 63
    c9c8:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5927
  char key[20];
  display_element_get_string(key);
    c9ca:	ce 01       	movw	r24, r28
    c9cc:	01 96       	adiw	r24, 0x01	; 1
    c9ce:	0e 94 2c 4b 	call	0x9658	; 0x9658 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5928
  strcpy(device.mqtt_key, key);
    c9d2:	be 01       	movw	r22, r28
    c9d4:	6f 5f       	subi	r22, 0xFF	; 255
    c9d6:	7f 4f       	sbci	r23, 0xFF	; 255
    c9d8:	83 e5       	ldi	r24, 0x53	; 83
    c9da:	9e e0       	ldi	r25, 0x0E	; 14
    c9dc:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5929
  save_setup_network();
    c9e0:	0e 94 3c 64 	call	0xc878	; 0xc878 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5930
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    c9e4:	87 e0       	ldi	r24, 0x07	; 7
    c9e6:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5931
}
    c9ea:	64 96       	adiw	r28, 0x14	; 20
    c9ec:	0f b6       	in	r0, 0x3f	; 63
    c9ee:	f8 94       	cli
    c9f0:	de bf       	out	0x3e, r29	; 62
    c9f2:	0f be       	out	0x3f, r0	; 63
    c9f4:	cd bf       	out	0x3d, r28	; 61
    c9f6:	df 91       	pop	r29
    c9f8:	cf 91       	pop	r28
    c9fa:	08 95       	ret

0000c9fc <helper_dialog_mqtt_set_user(unsigned int, unsigned int, unsigned char)>:
_Z27helper_dialog_mqtt_set_userjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5917
  parseBytes(ip_text, '.', device.mqtt_server, 4, 10);
  save_setup_network();
  selftest_set_0(SELFTEST_RESTART_NEEDED);
}
void helper_dialog_mqtt_set_user(uint16_t args1, uint16_t args2, uint8_t args3)
{
    c9fc:	cf 93       	push	r28
    c9fe:	df 93       	push	r29
    ca00:	cd b7       	in	r28, 0x3d	; 61
    ca02:	de b7       	in	r29, 0x3e	; 62
    ca04:	64 97       	sbiw	r28, 0x14	; 20
    ca06:	0f b6       	in	r0, 0x3f	; 63
    ca08:	f8 94       	cli
    ca0a:	de bf       	out	0x3e, r29	; 62
    ca0c:	0f be       	out	0x3f, r0	; 63
    ca0e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5919
  char user[20];
  display_element_get_string(user);
    ca10:	ce 01       	movw	r24, r28
    ca12:	01 96       	adiw	r24, 0x01	; 1
    ca14:	0e 94 2c 4b 	call	0x9658	; 0x9658 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5920
  strcpy(device.mqtt_user, user);
    ca18:	be 01       	movw	r22, r28
    ca1a:	6f 5f       	subi	r22, 0xFF	; 255
    ca1c:	7f 4f       	sbci	r23, 0xFF	; 255
    ca1e:	8f e3       	ldi	r24, 0x3F	; 63
    ca20:	9e e0       	ldi	r25, 0x0E	; 14
    ca22:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5921
  save_setup_network();
    ca26:	0e 94 3c 64 	call	0xc878	; 0xc878 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5922
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    ca2a:	87 e0       	ldi	r24, 0x07	; 7
    ca2c:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5923
}
    ca30:	64 96       	adiw	r28, 0x14	; 20
    ca32:	0f b6       	in	r0, 0x3f	; 63
    ca34:	f8 94       	cli
    ca36:	de bf       	out	0x3e, r29	; 62
    ca38:	0f be       	out	0x3f, r0	; 63
    ca3a:	cd bf       	out	0x3d, r28	; 61
    ca3c:	df 91       	pop	r29
    ca3e:	cf 91       	pop	r28
    ca40:	08 95       	ret

0000ca42 <helper_dialog_mqtt_set_server(unsigned int, unsigned int, unsigned char)>:
_Z29helper_dialog_mqtt_set_serverjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5909

/*

*/
void helper_dialog_mqtt_set_server(uint16_t args1, uint16_t args2, uint8_t args3)
{
    ca42:	cf 93       	push	r28
    ca44:	df 93       	push	r29
    ca46:	cd b7       	in	r28, 0x3d	; 61
    ca48:	de b7       	in	r29, 0x3e	; 62
    ca4a:	60 97       	sbiw	r28, 0x10	; 16
    ca4c:	0f b6       	in	r0, 0x3f	; 63
    ca4e:	f8 94       	cli
    ca50:	de bf       	out	0x3e, r29	; 62
    ca52:	0f be       	out	0x3f, r0	; 63
    ca54:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5911
  char ip_text[16];
  display_element_get_string(ip_text);
    ca56:	ce 01       	movw	r24, r28
    ca58:	01 96       	adiw	r24, 0x01	; 1
    ca5a:	0e 94 2c 4b 	call	0x9658	; 0x9658 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5912
  parseBytes(ip_text, '.', device.mqtt_server, 4, 10);
    ca5e:	24 e0       	ldi	r18, 0x04	; 4
    ca60:	30 e0       	ldi	r19, 0x00	; 0
    ca62:	49 e3       	ldi	r20, 0x39	; 57
    ca64:	5e e0       	ldi	r21, 0x0E	; 14
    ca66:	6e e2       	ldi	r22, 0x2E	; 46
    ca68:	ce 01       	movw	r24, r28
    ca6a:	01 96       	adiw	r24, 0x01	; 1
    ca6c:	0e 94 81 b0 	call	0x16102	; 0x16102 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5913
  save_setup_network();
    ca70:	0e 94 3c 64 	call	0xc878	; 0xc878 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5914
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    ca74:	87 e0       	ldi	r24, 0x07	; 7
    ca76:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5915
}
    ca7a:	60 96       	adiw	r28, 0x10	; 16
    ca7c:	0f b6       	in	r0, 0x3f	; 63
    ca7e:	f8 94       	cli
    ca80:	de bf       	out	0x3e, r29	; 62
    ca82:	0f be       	out	0x3f, r0	; 63
    ca84:	cd bf       	out	0x3d, r28	; 61
    ca86:	df 91       	pop	r29
    ca88:	cf 91       	pop	r28
    ca8a:	08 95       	ret

0000ca8c <helper_dialog_ntp_set_server(unsigned int, unsigned int, unsigned char)>:
_Z28helper_dialog_ntp_set_serverjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5810
  sprintf(ip_text, "%d.%d.%d.%d", device.ntp_server[0], device.ntp_server[1], device.ntp_server[2], device.ntp_server[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_ntp_set_server, &valid_ipv4_address_element_string);
}

void helper_dialog_ntp_set_server(uint16_t args1, uint16_t args2, uint8_t args3)
{
    ca8c:	cf 93       	push	r28
    ca8e:	df 93       	push	r29
    ca90:	cd b7       	in	r28, 0x3d	; 61
    ca92:	de b7       	in	r29, 0x3e	; 62
    ca94:	60 97       	sbiw	r28, 0x10	; 16
    ca96:	0f b6       	in	r0, 0x3f	; 63
    ca98:	f8 94       	cli
    ca9a:	de bf       	out	0x3e, r29	; 62
    ca9c:	0f be       	out	0x3f, r0	; 63
    ca9e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5813
  uint8_t ip[4];
  char ip_text[16];
  display_element_get_string(ip_text);
    caa0:	ce 01       	movw	r24, r28
    caa2:	01 96       	adiw	r24, 0x01	; 1
    caa4:	0e 94 2c 4b 	call	0x9658	; 0x9658 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5814
  parseBytes(ip_text, '.', device.ntp_server, 4, 10);
    caa8:	24 e0       	ldi	r18, 0x04	; 4
    caaa:	30 e0       	ldi	r19, 0x00	; 0
    caac:	47 e6       	ldi	r20, 0x67	; 103
    caae:	5e e0       	ldi	r21, 0x0E	; 14
    cab0:	6e e2       	ldi	r22, 0x2E	; 46
    cab2:	ce 01       	movw	r24, r28
    cab4:	01 96       	adiw	r24, 0x01	; 1
    cab6:	0e 94 81 b0 	call	0x16102	; 0x16102 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5815
  save_setup_network();
    caba:	0e 94 3c 64 	call	0xc878	; 0xc878 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5816
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    cabe:	87 e0       	ldi	r24, 0x07	; 7
    cac0:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5817
}
    cac4:	60 96       	adiw	r28, 0x10	; 16
    cac6:	0f b6       	in	r0, 0x3f	; 63
    cac8:	f8 94       	cli
    caca:	de bf       	out	0x3e, r29	; 62
    cacc:	0f be       	out	0x3f, r0	; 63
    cace:	cd bf       	out	0x3d, r28	; 61
    cad0:	df 91       	pop	r29
    cad2:	cf 91       	pop	r28
    cad4:	08 95       	ret

0000cad6 <remote_tds_set_name(unsigned char, char*) [clone .part.24]>:
_Z19remote_tds_set_namehPc.part.24():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1796
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
    cad6:	df 92       	push	r13
    cad8:	ef 92       	push	r14
    cada:	ff 92       	push	r15
    cadc:	0f 93       	push	r16
    cade:	1f 93       	push	r17
    cae0:	cf 93       	push	r28
    cae2:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1803
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    cae4:	94 e1       	ldi	r25, 0x14	; 20
    cae6:	89 9f       	mul	r24, r25
    cae8:	e0 01       	movw	r28, r0
    caea:	11 24       	eor	r1, r1
    caec:	7b 01       	movw	r14, r22
    caee:	8e 01       	movw	r16, r28
    caf0:	06 55       	subi	r16, 0x56	; 86
    caf2:	1a 4f       	sbci	r17, 0xFA	; 250
    caf4:	c4 54       	subi	r28, 0x44	; 68
    caf6:	da 4f       	sbci	r29, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1802
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
    caf8:	f7 01       	movw	r30, r14
    cafa:	d1 90       	ld	r13, Z+
    cafc:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1803
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    cafe:	6d 2d       	mov	r22, r13
    cb00:	c8 01       	movw	r24, r16
    cb02:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1804
      if (t == 0) break;
    cb06:	dd 20       	and	r13, r13
    cb08:	29 f0       	breq	.+10     	; 0xcb14 <remote_tds_set_name(unsigned char, char*) [clone .part.24]+0x3e>
    cb0a:	0f 5f       	subi	r16, 0xFF	; 255
    cb0c:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1800
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    cb0e:	0c 17       	cp	r16, r28
    cb10:	1d 07       	cpc	r17, r29
    cb12:	91 f7       	brne	.-28     	; 0xcaf8 <remote_tds_set_name(unsigned char, char*) [clone .part.24]+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1806
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
      if (t == 0) break;
    }
}
    cb14:	df 91       	pop	r29
    cb16:	cf 91       	pop	r28
    cb18:	1f 91       	pop	r17
    cb1a:	0f 91       	pop	r16
    cb1c:	ff 90       	pop	r15
    cb1e:	ef 90       	pop	r14
    cb20:	df 90       	pop	r13
    cb22:	08 95       	ret

0000cb24 <button_nastaveni_default_value(unsigned int, unsigned int, unsigned char)>:
_Z30button_nastaveni_default_valuejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5943
   a pak restart
*/
void button_nastaveni_default_value(uint16_t args1, uint16_t args2, uint8_t args3)
{
  /// TODO dialog ANO/NE
  EEPROM.write(set_default_values, 255);
    cb24:	6f ef       	ldi	r22, 0xFF	; 255
    cb26:	8a e5       	ldi	r24, 0x5A	; 90
    cb28:	90 e0       	ldi	r25, 0x00	; 0
    cb2a:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5944
  resetFunc();
    cb2e:	f0 e0       	ldi	r31, 0x00	; 0
    cb30:	e0 e0       	ldi	r30, 0x00	; 0
    cb32:	19 94       	eijmp

0000cb34 <helper_set_menu_time_offset(unsigned int, float, unsigned char)>:
_Z27helper_set_menu_time_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1337
  return menu_dialog_variable[idx].variable_now ;
}

int display_function_get_variable_int(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    cb34:	60 91 9b 09 	lds	r22, 0x099B	; 0x80099b <menu_dialog_variable>
    cb38:	70 91 9c 09 	lds	r23, 0x099C	; 0x80099c <menu_dialog_variable+0x1>
    cb3c:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <menu_dialog_variable+0x2>
    cb40:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <menu_dialog_variable+0x3>
    cb44:	0e 94 9f f0 	call	0x1e13e	; 0x1e13e <__fixsfsi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3203
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(int8_t offset)
{
  EEPROM.write(time_offset, offset);
    cb48:	81 e0       	ldi	r24, 0x01	; 1
    cb4a:	90 e0       	ldi	r25, 0x00	; 0
    cb4c:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000cb50 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>:
_Z66button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5660
}

void button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t click1 = 0;
  display_auto_shutdown_now = 0;
    cb50:	10 92 96 0c 	sts	0x0C96, r1	; 0x800c96 <display_auto_shutdown_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5661
  if (args3 == 0)
    cb54:	41 11       	cpse	r20, r1
    cb56:	13 c0       	rjmp	.+38     	; 0xcb7e <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x2e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5663
  {
    cbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    cb58:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    cb5c:	8f 7b       	andi	r24, 0xBF	; 191
    cb5e:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5664
    display_auto_shutdown = 0;
    cb62:	10 92 97 0c 	sts	0x0C97, r1	; 0x800c97 <display_auto_shutdown>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5699
    display_auto_shutdown = 250;
    click1 = 1;
  }
  if (click1 == 1)
  {
    EEPROM.write(my_display_auto_shutdown, display_auto_shutdown);
    cb66:	60 91 97 0c 	lds	r22, 0x0C97	; 0x800c97 <display_auto_shutdown>
    cb6a:	80 e6       	ldi	r24, 0x60	; 96
    cb6c:	90 e0       	ldi	r25, 0x00	; 0
    cb6e:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5700
    EEPROM.write(my_brightness_mode, brigthness_display_mode);
    cb72:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    cb76:	8f e5       	ldi	r24, 0x5F	; 95
    cb78:	90 e0       	ldi	r25, 0x00	; 0
    cb7a:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5667
  {
    cbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    display_auto_shutdown = 0;
    click1 = 1;
  }
  if (args3 == 1)
    cb7e:	41 30       	cpi	r20, 0x01	; 1
    cb80:	49 f4       	brne	.+18     	; 0xcb94 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5669
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    cb82:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    cb86:	80 64       	ori	r24, 0x40	; 64
    cb88:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5670
    display_auto_shutdown = 30;
    cb8c:	8e e1       	ldi	r24, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5694
    click1 = 1;
  }
  if (args3 == 5)
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    display_auto_shutdown = 250;
    cb8e:	80 93 97 0c 	sts	0x0C97, r24	; 0x800c97 <display_auto_shutdown>
    cb92:	e9 cf       	rjmp	.-46     	; 0xcb66 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5673
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    display_auto_shutdown = 30;
    click1 = 1;
  }
  if (args3 == 2)
    cb94:	42 30       	cpi	r20, 0x02	; 2
    cb96:	39 f4       	brne	.+14     	; 0xcba6 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5675
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    cb98:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    cb9c:	80 64       	ori	r24, 0x40	; 64
    cb9e:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5676
    display_auto_shutdown = 60;
    cba2:	8c e3       	ldi	r24, 0x3C	; 60
    cba4:	f4 cf       	rjmp	.-24     	; 0xcb8e <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5679
    click1 = 1;
  }
  if (args3 == 3)
    cba6:	43 30       	cpi	r20, 0x03	; 3
    cba8:	39 f4       	brne	.+14     	; 0xcbb8 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5681
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    cbaa:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    cbae:	80 64       	ori	r24, 0x40	; 64
    cbb0:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5682
    display_auto_shutdown = 120;
    cbb4:	88 e7       	ldi	r24, 0x78	; 120
    cbb6:	eb cf       	rjmp	.-42     	; 0xcb8e <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5685
    click1 = 1;
  }
  if (args3 == 4)
    cbb8:	44 30       	cpi	r20, 0x04	; 4
    cbba:	39 f4       	brne	.+14     	; 0xcbca <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x7a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5687
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    cbbc:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    cbc0:	80 64       	ori	r24, 0x40	; 64
    cbc2:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5688
    display_auto_shutdown = 180;
    cbc6:	84 eb       	ldi	r24, 0xB4	; 180
    cbc8:	e2 cf       	rjmp	.-60     	; 0xcb8e <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5691
    click1 = 1;
  }
  if (args3 == 5)
    cbca:	45 30       	cpi	r20, 0x05	; 5
    cbcc:	39 f4       	brne	.+14     	; 0xcbdc <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5693
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    cbce:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    cbd2:	80 64       	ori	r24, 0x40	; 64
    cbd4:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5694
    display_auto_shutdown = 250;
    cbd8:	8a ef       	ldi	r24, 0xFA	; 250
    cbda:	d9 cf       	rjmp	.-78     	; 0xcb8e <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5702
  if (click1 == 1)
  {
    EEPROM.write(my_display_auto_shutdown, display_auto_shutdown);
    EEPROM.write(my_brightness_mode, brigthness_display_mode);
  }
}
    cbdc:	08 95       	ret

0000cbde <helper_display_set_brightness(unsigned int, float, unsigned char)>:
_Z29helper_display_set_brightnessjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5594
  display_function_set_variable(brigthness_display_values, 5, 100, 5, 0, NUMBER_TYPE_INT,  H_TRUE, 0, &helper_display_set_brightness);
}

void helper_display_set_brightness(uint16_t args1, float args2, uint8_t args3)
{
  brigthness_display_values = args3;
    cbde:	20 93 87 0b 	sts	0x0B87, r18	; 0x800b87 <brigthness_display_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5595
  my_touch.TP_SetBacklight(brigthness_display_values * 2);
    cbe2:	82 2f       	mov	r24, r18
    cbe4:	88 0f       	add	r24, r24
    cbe6:	0e 94 f1 ac 	call	0x159e2	; 0x159e2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5596
  EEPROM.write(my_brightness_values, brigthness_display_values);
    cbea:	60 91 87 0b 	lds	r22, 0x0B87	; 0x800b87 <brigthness_display_values>
    cbee:	8e e5       	ldi	r24, 0x5E	; 94
    cbf0:	90 e0       	ldi	r25, 0x00	; 0
    cbf2:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000cbf6 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)>:
_Z34switch_brightness_automode_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5572
}
////////
/// Obsluzna funkce nastaveni rizeni podsvetleni
void switch_brightness_automode_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 )
    cbf6:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    cbfa:	87 ff       	sbrs	r24, 7
    cbfc:	0e c0       	rjmp	.+28     	; 0xcc1a <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5574
  {
    cbi(brigthness_display_mode, DISPLAY_MODE_STATUS_BIT);
    cbfe:	8f 77       	andi	r24, 0x7F	; 127
    cc00:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5575
    my_touch.TP_SetBacklight(brigthness_display_values * 2);
    cc04:	80 91 87 0b 	lds	r24, 0x0B87	; 0x800b87 <brigthness_display_values>
    cc08:	88 0f       	add	r24, r24
    cc0a:	0e 94 f1 ac 	call	0x159e2	; 0x159e2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5583
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_STATUS_BIT);
  }
switch_brightness_automode_onclick_end:
  EEPROM.write(my_brightness_mode, brigthness_display_mode);
    cc0e:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    cc12:	8f e5       	ldi	r24, 0x5F	; 95
    cc14:	90 e0       	ldi	r25, 0x00	; 0
    cc16:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5580
    my_touch.TP_SetBacklight(brigthness_display_values * 2);
    goto switch_brightness_automode_onclick_end;
  }
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_STATUS_BIT);
    cc1a:	80 68       	ori	r24, 0x80	; 128
    cc1c:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
    cc20:	f6 cf       	rjmp	.-20     	; 0xcc0e <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)+0x18>

0000cc22 <term_ring_do_activate(unsigned int, unsigned int, unsigned char)>:
_Z21term_ring_do_activatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5031
    ret = 2;
  return ret;
}
////
void term_ring_do_activate(uint16_t args1, uint16_t args2, uint8_t args3)
{
    cc22:	cf 93       	push	r28
    cc24:	c8 2f       	mov	r28, r24
thermostat_ring_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    cc26:	21 e2       	ldi	r18, 0x21	; 33
    cc28:	82 9f       	mul	r24, r18
    cc2a:	c0 01       	movw	r24, r0
    cc2c:	11 24       	eor	r1, r1
    cc2e:	61 e0       	ldi	r22, 0x01	; 1
    cc30:	83 5a       	subi	r24, 0xA3	; 163
    cc32:	9e 4f       	sbci	r25, 0xFE	; 254
    cc34:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z21term_ring_do_activatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5033
  thermostat_ring_set_active(args1, 1);
  last_default_ring = default_ring;
    cc38:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
    cc3c:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <last_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5034
  default_ring = args1;
    cc40:	c0 93 86 0b 	sts	0x0B86, r28	; 0x800b86 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1992
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    cc44:	6c 2f       	mov	r22, r28
    cc46:	8c e5       	ldi	r24, 0x5C	; 92
    cc48:	90 e0       	ldi	r25, 0x00	; 0
_Z21term_ring_do_activatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5036
{
  thermostat_ring_set_active(args1, 1);
  last_default_ring = default_ring;
  default_ring = args1;
  set_default_ring(default_ring);
}
    cc4a:	cf 91       	pop	r28
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1992
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    cc4c:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000cc50 <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_show_default_tempjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4879
   args2 -- globalni argument celeho menu
   args3 -- id polozky menu kliku
*/
void button_click_set_show_default_temp(uint16_t args1, uint16_t args2, uint8_t args3)
{
  default_show_temp = args3;
    cc50:	40 93 93 09 	sts	0x0993, r20	; 0x800993 <default_show_temp>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2007
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    cc54:	64 2f       	mov	r22, r20
    cc56:	8d e5       	ldi	r24, 0x5D	; 93
    cc58:	90 e0       	ldi	r25, 0x00	; 0
    cc5a:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000cc5e <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1791
    *active = 255;
  }
}
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
    cc5e:	cf 93       	push	r28
    cc60:	df 93       	push	r29
    cc62:	d6 2f       	mov	r29, r22
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1799
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    cc64:	8a 30       	cpi	r24, 0x0A	; 10
    cc66:	78 f4       	brcc	.+30     	; 0xcc86 <remote_tds_set_complete(unsigned char, unsigned char, char*)+0x28>
    cc68:	ba 01       	movw	r22, r20
    cc6a:	c8 2f       	mov	r28, r24
    cc6c:	0e 94 6b 65 	call	0xcad6	; 0xcad6 <remote_tds_set_name(unsigned char, char*) [clone .part.24]>
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1823


void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    cc70:	24 e1       	ldi	r18, 0x14	; 20
    cc72:	c2 9f       	mul	r28, r18
    cc74:	c0 01       	movw	r24, r0
    cc76:	11 24       	eor	r1, r1
    cc78:	6d 2f       	mov	r22, r29
    cc7a:	83 54       	subi	r24, 0x43	; 67
    cc7c:	9a 4f       	sbci	r25, 0xFA	; 250
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1794
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    cc7e:	df 91       	pop	r29
    cc80:	cf 91       	pop	r28
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1823


void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    cc82:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1794
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    cc86:	df 91       	pop	r29
    cc88:	cf 91       	pop	r28
    cc8a:	08 95       	ret

0000cc8c <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1830



///
void remote_tds_clear(uint8_t idx)
{
    cc8c:	cf 93       	push	r28
    cc8e:	df 93       	push	r29
    cc90:	cd b7       	in	r28, 0x3d	; 61
    cc92:	de b7       	in	r29, 0x3e	; 62
    cc94:	62 97       	sbiw	r28, 0x12	; 18
    cc96:	0f b6       	in	r0, 0x3f	; 63
    cc98:	f8 94       	cli
    cc9a:	de bf       	out	0x3e, r29	; 62
    cc9c:	0f be       	out	0x3f, r0	; 63
    cc9e:	cd bf       	out	0x3d, r28	; 61
    cca0:	e1 e0       	ldi	r30, 0x01	; 1
    cca2:	f0 e0       	ldi	r31, 0x00	; 0
    cca4:	ec 0f       	add	r30, r28
    cca6:	fd 1f       	adc	r31, r29
    cca8:	e8 0f       	add	r30, r24
    ccaa:	f1 1d       	adc	r31, r1
    ccac:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1834
  char rtds_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    rtds_name[idx] = 0;
  remote_tds_set_complete(idx, 0, rtds_name);
    ccae:	ae 01       	movw	r20, r28
    ccb0:	4f 5f       	subi	r20, 0xFF	; 255
    ccb2:	5f 4f       	sbci	r21, 0xFF	; 255
    ccb4:	60 e0       	ldi	r22, 0x00	; 0
    ccb6:	0e 94 2f 66 	call	0xcc5e	; 0xcc5e <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1835
}
    ccba:	62 96       	adiw	r28, 0x12	; 18
    ccbc:	0f b6       	in	r0, 0x3f	; 63
    ccbe:	f8 94       	cli
    ccc0:	de bf       	out	0x3e, r29	; 62
    ccc2:	0f be       	out	0x3f, r0	; 63
    ccc4:	cd bf       	out	0x3d, r28	; 61
    ccc6:	df 91       	pop	r29
    ccc8:	cf 91       	pop	r28
    ccca:	08 95       	ret

0000cccc <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z30click_rtds_deassociate_onewirejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4592
/*
   args1 --- atributy z nastaveni tlacitka
   args2 --- index polozky z menu
*/
void click_rtds_deassociate_onewire(uint16_t args1, uint16_t args2, uint8_t args3)
{
    cccc:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4593
  remote_tds_clear(args2);
    ccce:	0e 94 46 66 	call	0xcc8c	; 0xcc8c <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4594
  MenuHistoryPrevMenu(0, 0, 0);
    ccd2:	0c 94 3e af 	jmp	0x15e7c	; 0x15e7c <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>

0000ccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>:
_ZN11EEPROMClass4readEi.isra.0.lto_priv.279():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    ccd6:	0c 94 17 ef 	jmp	0x1de2e	; 0x1de2e <eeprom_read_byte>

0000ccda <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:59
}


//// cteni zapis eeprom float datovy typ
float EEPROMreadFloat(unsigned int addr)
{
    ccda:	cf 92       	push	r12
    ccdc:	df 92       	push	r13
    ccde:	ef 92       	push	r14
    cce0:	ff 92       	push	r15
    cce2:	0f 93       	push	r16
    cce4:	1f 93       	push	r17
    cce6:	cf 93       	push	r28
    cce8:	df 93       	push	r29
    ccea:	00 d0       	rcall	.+0      	; 0xccec <EEPROMreadFloat(unsigned int)+0x12>
    ccec:	1f 92       	push	r1
    ccee:	cd b7       	in	r28, 0x3d	; 61
    ccf0:	de b7       	in	r29, 0x3e	; 62
    ccf2:	7e 01       	movw	r14, r28
    ccf4:	25 e0       	ldi	r18, 0x05	; 5
    ccf6:	e2 0e       	add	r14, r18
    ccf8:	f1 1c       	adc	r15, r1
    ccfa:	8e 01       	movw	r16, r28
    ccfc:	0f 5f       	subi	r16, 0xFF	; 255
    ccfe:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:64
  union {
    uint8_t b[4];
    float f;
  } data;
  for (int i = 0; i < 4; i++) data.b[i] = EEPROM.read(addr + i);
    cd00:	6c 01       	movw	r12, r24
    cd02:	c0 1a       	sub	r12, r16
    cd04:	d1 0a       	sbc	r13, r17
    cd06:	c6 01       	movw	r24, r12
    cd08:	80 0f       	add	r24, r16
    cd0a:	91 1f       	adc	r25, r17
    cd0c:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    cd10:	f8 01       	movw	r30, r16
    cd12:	81 93       	st	Z+, r24
    cd14:	8f 01       	movw	r16, r30
    cd16:	ee 15       	cp	r30, r14
    cd18:	ff 05       	cpc	r31, r15
    cd1a:	a9 f7       	brne	.-22     	; 0xcd06 <EEPROMreadFloat(unsigned int)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:65
  return data.f;
    cd1c:	69 81       	ldd	r22, Y+1	; 0x01
    cd1e:	7a 81       	ldd	r23, Y+2	; 0x02
    cd20:	8b 81       	ldd	r24, Y+3	; 0x03
    cd22:	9c 81       	ldd	r25, Y+4	; 0x04
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:66
}
    cd24:	0f 90       	pop	r0
    cd26:	0f 90       	pop	r0
    cd28:	0f 90       	pop	r0
    cd2a:	0f 90       	pop	r0
    cd2c:	df 91       	pop	r29
    cd2e:	cf 91       	pop	r28
    cd30:	1f 91       	pop	r17
    cd32:	0f 91       	pop	r16
    cd34:	ff 90       	pop	r15
    cd36:	ef 90       	pop	r14
    cd38:	df 90       	pop	r13
    cd3a:	cf 90       	pop	r12
    cd3c:	08 95       	ret

0000cd3e <thermostat_program_get_threshold(unsigned char, unsigned char)>:
_Z32thermostat_program_get_thresholdhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:323
}


//// ziska rozhodovaci uroven termostatu
uint16_t thermostat_program_get_threshold(uint8_t program_id, uint8_t interval_id)
{
    cd3e:	1f 93       	push	r17
    cd40:	cf 93       	push	r28
    cd42:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:325
  uint16_t ret = 0;
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
    cd44:	9d e4       	ldi	r25, 0x4D	; 77
    cd46:	89 9f       	mul	r24, r25
    cd48:	e0 01       	movw	r28, r0
    cd4a:	11 24       	eor	r1, r1
    cd4c:	cf 50       	subi	r28, 0x0F	; 15
    cd4e:	de 4f       	sbci	r29, 0xFE	; 254
    cd50:	86 e0       	ldi	r24, 0x06	; 6
    cd52:	68 9f       	mul	r22, r24
    cd54:	c0 0d       	add	r28, r0
    cd56:	d1 1d       	adc	r29, r1
    cd58:	11 24       	eor	r1, r1
    cd5a:	ce 01       	movw	r24, r28
    cd5c:	05 96       	adiw	r24, 0x05	; 5
    cd5e:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    cd62:	18 2f       	mov	r17, r24
    cd64:	ce 01       	movw	r24, r28
    cd66:	04 96       	adiw	r24, 0x04	; 4
    cd68:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    cd6c:	21 2f       	mov	r18, r17
    cd6e:	30 e0       	ldi	r19, 0x00	; 0
    cd70:	32 2f       	mov	r19, r18
    cd72:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:327
  return ret;
}
    cd74:	82 0f       	add	r24, r18
    cd76:	93 2f       	mov	r25, r19
    cd78:	91 1d       	adc	r25, r1
    cd7a:	df 91       	pop	r29
    cd7c:	cf 91       	pop	r28
    cd7e:	1f 91       	pop	r17
    cd80:	08 95       	ret

0000cd82 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>:
_Z27thermostat_program_get_timehhPhS_S_S_S_():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:301
}


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
    cd82:	7f 92       	push	r7
    cd84:	8f 92       	push	r8
    cd86:	9f 92       	push	r9
    cd88:	af 92       	push	r10
    cd8a:	bf 92       	push	r11
    cd8c:	cf 92       	push	r12
    cd8e:	df 92       	push	r13
    cd90:	ef 92       	push	r14
    cd92:	ff 92       	push	r15
    cd94:	0f 93       	push	r16
    cd96:	1f 93       	push	r17
    cd98:	cf 93       	push	r28
    cd9a:	df 93       	push	r29
    cd9c:	5a 01       	movw	r10, r20
    cd9e:	e9 01       	movw	r28, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:302
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    cda0:	9d e4       	ldi	r25, 0x4D	; 77
    cda2:	89 9f       	mul	r24, r25
    cda4:	40 01       	movw	r8, r0
    cda6:	11 24       	eor	r1, r1
    cda8:	ef e0       	ldi	r30, 0x0F	; 15
    cdaa:	8e 1a       	sub	r8, r30
    cdac:	ee ef       	ldi	r30, 0xFE	; 254
    cdae:	9e 0a       	sbc	r9, r30
    cdb0:	f6 e0       	ldi	r31, 0x06	; 6
    cdb2:	6f 9f       	mul	r22, r31
    cdb4:	80 0c       	add	r8, r0
    cdb6:	91 1c       	adc	r9, r1
    cdb8:	11 24       	eor	r1, r1
    cdba:	c4 01       	movw	r24, r8
    cdbc:	02 96       	adiw	r24, 0x02	; 2
    cdbe:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    cdc2:	78 2e       	mov	r7, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
    cdc4:	c4 01       	movw	r24, r8
    cdc6:	03 96       	adiw	r24, 0x03	; 3
    cdc8:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
    cdcc:	97 2d       	mov	r25, r7
    cdce:	96 95       	lsr	r25
    cdd0:	96 95       	lsr	r25
    cdd2:	96 95       	lsr	r25
    cdd4:	f5 01       	movw	r30, r10
    cdd6:	90 83       	st	Z, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
    cdd8:	27 2d       	mov	r18, r7
    cdda:	30 e0       	ldi	r19, 0x00	; 0
    cddc:	35 95       	asr	r19
    cdde:	27 95       	ror	r18
    cde0:	23 70       	andi	r18, 0x03	; 3
    cde2:	9f e0       	ldi	r25, 0x0F	; 15
    cde4:	29 9f       	mul	r18, r25
    cde6:	20 2d       	mov	r18, r0
    cde8:	11 24       	eor	r1, r1
    cdea:	28 83       	st	Y, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
    cdec:	28 2f       	mov	r18, r24
    cdee:	26 95       	lsr	r18
    cdf0:	26 95       	lsr	r18
    cdf2:	26 95       	lsr	r18
    cdf4:	f8 01       	movw	r30, r16
    cdf6:	20 83       	st	Z, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
    cdf8:	83 70       	andi	r24, 0x03	; 3
    cdfa:	89 9f       	mul	r24, r25
    cdfc:	80 2d       	mov	r24, r0
    cdfe:	11 24       	eor	r1, r1
    ce00:	f7 01       	movw	r30, r14
    ce02:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
    ce04:	87 2d       	mov	r24, r7
    ce06:	81 70       	andi	r24, 0x01	; 1
    ce08:	f6 01       	movw	r30, r12
    ce0a:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:309
}
    ce0c:	df 91       	pop	r29
    ce0e:	cf 91       	pop	r28
    ce10:	1f 91       	pop	r17
    ce12:	0f 91       	pop	r16
    ce14:	ff 90       	pop	r15
    ce16:	ef 90       	pop	r14
    ce18:	df 90       	pop	r13
    ce1a:	cf 90       	pop	r12
    ce1c:	bf 90       	pop	r11
    ce1e:	af 90       	pop	r10
    ce20:	9f 90       	pop	r9
    ce22:	8f 90       	pop	r8
    ce24:	7f 90       	pop	r7
    ce26:	08 95       	ret

0000ce28 <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
    ce28:	21 e2       	ldi	r18, 0x21	; 33
    ce2a:	82 9f       	mul	r24, r18
    ce2c:	c0 01       	movw	r24, r0
    ce2e:	11 24       	eor	r1, r1
    ce30:	82 5a       	subi	r24, 0xA2	; 162
    ce32:	9e 4f       	sbci	r25, 0xFE	; 254
    ce34:	0c 94 6b 66 	jmp	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>

0000ce38 <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:153
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
    ce38:	0f 93       	push	r16
    ce3a:	1f 93       	push	r17
    ce3c:	cf 93       	push	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:154
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
    ce3e:	91 e2       	ldi	r25, 0x21	; 33
    ce40:	89 9f       	mul	r24, r25
    ce42:	80 01       	movw	r16, r0
    ce44:	11 24       	eor	r1, r1
    ce46:	c8 01       	movw	r24, r16
    ce48:	8a 5a       	subi	r24, 0xAA	; 170
    ce4a:	9e 4f       	sbci	r25, 0xFE	; 254
    ce4c:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    ce50:	c8 2f       	mov	r28, r24
    ce52:	c8 01       	movw	r24, r16
    ce54:	89 5a       	subi	r24, 0xA9	; 169
    ce56:	9e 4f       	sbci	r25, 0xFE	; 254
    ce58:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    ce5c:	2c 2f       	mov	r18, r28
    ce5e:	30 e0       	ldi	r19, 0x00	; 0
    ce60:	32 2f       	mov	r19, r18
    ce62:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:155
}
    ce64:	82 0f       	add	r24, r18
    ce66:	93 2f       	mov	r25, r19
    ce68:	91 1d       	adc	r25, r1
    ce6a:	cf 91       	pop	r28
    ce6c:	1f 91       	pop	r17
    ce6e:	0f 91       	pop	r16
    ce70:	08 95       	ret

0000ce72 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>:
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1302
  preload_pid_menu(0, args2, 0);
}


uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
    ce72:	1f 93       	push	r17
    ce74:	cf 93       	push	r28
    ce76:	df 93       	push	r29
    ce78:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1303
  display_function_set_variable(thermostat_ring_get_mezni(args2) / 10.0, 16.0, 32.0, 0.5, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
    ce7a:	86 2f       	mov	r24, r22
    ce7c:	0e 94 1c 67 	call	0xce38	; 0xce38 <thermostat_ring_get_mezni(unsigned char)>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    ce80:	cb e9       	ldi	r28, 0x9B	; 155
    ce82:	d9 e0       	ldi	r29, 0x09	; 9
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1303
}


uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(args2) / 10.0, 16.0, 32.0, 0.5, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
    ce84:	bc 01       	movw	r22, r24
    ce86:	99 0f       	add	r25, r25
    ce88:	88 0b       	sbc	r24, r24
    ce8a:	99 0b       	sbc	r25, r25
    ce8c:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
    ce90:	20 e0       	ldi	r18, 0x00	; 0
    ce92:	30 e0       	ldi	r19, 0x00	; 0
    ce94:	40 e2       	ldi	r20, 0x20	; 32
    ce96:	51 e4       	ldi	r21, 0x41	; 65
    ce98:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    ce9c:	68 83       	st	Y, r22
    ce9e:	79 83       	std	Y+1, r23	; 0x01
    cea0:	8a 83       	std	Y+2, r24	; 0x02
    cea2:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  menu_dialog_variable[idx].variable_min = min;
    cea4:	80 e0       	ldi	r24, 0x00	; 0
    cea6:	90 e0       	ldi	r25, 0x00	; 0
    cea8:	a0 e8       	ldi	r26, 0x80	; 128
    ceaa:	b1 e4       	ldi	r27, 0x41	; 65
    ceac:	88 87       	std	Y+8, r24	; 0x08
    ceae:	99 87       	std	Y+9, r25	; 0x09
    ceb0:	aa 87       	std	Y+10, r26	; 0x0a
    ceb2:	bb 87       	std	Y+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  menu_dialog_variable[idx].variable_max = max;
    ceb4:	80 e0       	ldi	r24, 0x00	; 0
    ceb6:	90 e0       	ldi	r25, 0x00	; 0
    ceb8:	a0 e0       	ldi	r26, 0x00	; 0
    ceba:	b2 e4       	ldi	r27, 0x42	; 66
    cebc:	8c 83       	std	Y+4, r24	; 0x04
    cebe:	9d 83       	std	Y+5, r25	; 0x05
    cec0:	ae 83       	std	Y+6, r26	; 0x06
    cec2:	bf 83       	std	Y+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  menu_dialog_variable[idx].variable_step = step;
    cec4:	80 e0       	ldi	r24, 0x00	; 0
    cec6:	90 e0       	ldi	r25, 0x00	; 0
    cec8:	a0 e0       	ldi	r26, 0x00	; 0
    ceca:	bf e3       	ldi	r27, 0x3F	; 63
    cecc:	8e 87       	std	Y+14, r24	; 0x0e
    cece:	9f 87       	std	Y+15, r25	; 0x0f
    ced0:	a8 8b       	std	Y+16, r26	; 0x10
    ced2:	b9 8b       	std	Y+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  menu_dialog_variable[idx].number_type = number_type;
    ced4:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
  menu_dialog_variable[idx].args = args;
    ced6:	1a 8b       	std	Y+18, r17	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1372
  menu_dialog_variable[idx].update_now = update_now;
    ced8:	81 e0       	ldi	r24, 0x01	; 1
    ceda:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
  menu_dialog_variable[idx].save_function = save_function;
    cedc:	89 eb       	ldi	r24, 0xB9	; 185
    cede:	92 e6       	ldi	r25, 0x62	; 98
    cee0:	9c 8b       	std	Y+20, r25	; 0x14
    cee2:	8b 8b       	std	Y+19, r24	; 0x13
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1304


uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(args2) / 10.0, 16.0, 32.0, 0.5, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
}
    cee4:	df 91       	pop	r29
    cee6:	cf 91       	pop	r28
    cee8:	1f 91       	pop	r17
    ceea:	08 95       	ret

0000ceec <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
    ceec:	21 e2       	ldi	r18, 0x21	; 33
    ceee:	82 9f       	mul	r24, r18
    cef0:	c0 01       	movw	r24, r0
    cef2:	11 24       	eor	r1, r1
    cef4:	83 5a       	subi	r24, 0xA3	; 163
    cef6:	9e 4f       	sbci	r25, 0xFE	; 254
    cef8:	0c 94 6b 66 	jmp	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>

0000cefc <display_enable_show_thermostat_deactive_ring(unsigned int, unsigned int, unsigned char)>:
_Z44display_enable_show_thermostat_deactive_ringjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5504
    ret = 1;
  return ret;
}

uint8_t display_enable_show_thermostat_deactive_ring(uint16_t args1, uint16_t args2, uint8_t args3)
{
    cefc:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5506
  uint8_t ret = 0;
  if (thermostat_ring_get_active(args2) != RING_FREE)
    cefe:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
    cf02:	91 e0       	ldi	r25, 0x01	; 1
    cf04:	8f 3f       	cpi	r24, 0xFF	; 255
    cf06:	09 f4       	brne	.+2      	; 0xcf0a <display_enable_show_thermostat_deactive_ring(unsigned int, unsigned int, unsigned char)+0xe>
    cf08:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5509
    ret = 1;
  return ret;
}
    cf0a:	89 2f       	mov	r24, r25
    cf0c:	08 95       	ret

0000cf0e <display_enable_show_thermostat_active_ring(unsigned int, unsigned int, unsigned char)>:
_Z42display_enable_show_thermostat_active_ringjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5496
  }
*/


uint8_t display_enable_show_thermostat_active_ring(uint16_t args1, uint16_t args2, uint8_t args3)
{
    cf0e:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5498
  uint8_t ret = 0;
  if (thermostat_ring_get_active(args2) == RING_FREE)
    cf10:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
    cf14:	91 e0       	ldi	r25, 0x01	; 1
    cf16:	8f 3f       	cpi	r24, 0xFF	; 255
    cf18:	09 f0       	breq	.+2      	; 0xcf1c <display_enable_show_thermostat_active_ring(unsigned int, unsigned int, unsigned char)+0xe>
    cf1a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5501
    ret = 1;
  return ret;
}
    cf1c:	89 2f       	mov	r24, r25
    cf1e:	08 95       	ret

0000cf20 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>:
_Z33display_enable_show_term_mode_manjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5472
   kdyz 0 tak se nezobrazuji polozky v menu
   args1, args2, args3 nejsou zatim potreba
*/

uint8_t display_enable_show_term_mode_man(uint16_t args1, uint16_t args2, uint8_t args3)
{
    cf20:	cf 93       	push	r28
    cf22:	c6 2f       	mov	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5474
  uint8_t mode = 0;
  if (thermostat_ring_get_active(args2) != RING_FREE)
    cf24:	86 2f       	mov	r24, r22
    cf26:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
    cf2a:	8f 3f       	cpi	r24, 0xFF	; 255
    cf2c:	59 f0       	breq	.+22     	; 0xcf44 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5476
  {
    mode = thermostat_ring_get_mode(args2);
    cf2e:	8c 2f       	mov	r24, r28
    cf30:	0e 94 14 67 	call	0xce28	; 0xce28 <thermostat_ring_get_mode(unsigned char)>
    cf34:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5478
    if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
      return 1;
    cf36:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5477
{
  uint8_t mode = 0;
  if (thermostat_ring_get_active(args2) != RING_FREE)
  {
    mode = thermostat_ring_get_mode(args2);
    if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
    cf38:	93 30       	cpi	r25, 0x03	; 3
    cf3a:	29 f0       	breq	.+10     	; 0xcf46 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x26>
    cf3c:	95 30       	cpi	r25, 0x05	; 5
    cf3e:	19 f0       	breq	.+6      	; 0xcf46 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x26>
    cf40:	98 30       	cpi	r25, 0x08	; 8
    cf42:	09 f0       	breq	.+2      	; 0xcf46 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5480
      return 1;
  }
  return 0;
    cf44:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5481
}
    cf46:	cf 91       	pop	r28
    cf48:	08 95       	ret

0000cf4a <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5454
   args2 ... parametr z menu
   args3 ... index prvku v poradi menu
*/

void button_click_set_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
    cf4a:	0f 93       	push	r16
    cf4c:	1f 93       	push	r17
    cf4e:	cf 93       	push	r28
    cf50:	8c 01       	movw	r16, r24
    cf52:	c6 2f       	mov	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5455
  if (thermostat_ring_get_active(args2) != RING_FREE)
    cf54:	86 2f       	mov	r24, r22
    cf56:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
    cf5a:	8f 3f       	cpi	r24, 0xFF	; 255
    cf5c:	89 f0       	breq	.+34     	; 0xcf80 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5457
  {
    change_term_mode = 1;
    cf5e:	81 e0       	ldi	r24, 0x01	; 1
    cf60:	80 93 9a 09 	sts	0x099A, r24	; 0x80099a <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5459
    if (args1 == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(args2, STATUS_BIT_HEAT_OR_COOL, 0);
    cf64:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5458
void button_click_set_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (thermostat_ring_get_active(args2) != RING_FREE)
  {
    change_term_mode = 1;
    if (args1 == TERM_MODE_MAN_HEAT)
    cf66:	03 30       	cpi	r16, 0x03	; 3
    cf68:	11 05       	cpc	r17, r1
    cf6a:	21 f0       	breq	.+8      	; 0xcf74 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5460
      thermostat_ring_update_bites(args2, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args1 == TERM_MODE_MAN_COOL)
    cf6c:	05 30       	cpi	r16, 0x05	; 5
    cf6e:	11 05       	cpc	r17, r1
    cf70:	39 f4       	brne	.+14     	; 0xcf80 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5461
      thermostat_ring_update_bites(args2, STATUS_BIT_HEAT_OR_COOL, 1);
    cf72:	61 e0       	ldi	r22, 0x01	; 1
    cf74:	8c 2f       	mov	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5463
  }
}
    cf76:	cf 91       	pop	r28
    cf78:	1f 91       	pop	r17
    cf7a:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5461
  {
    change_term_mode = 1;
    if (args1 == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(args2, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args1 == TERM_MODE_MAN_COOL)
      thermostat_ring_update_bites(args2, STATUS_BIT_HEAT_OR_COOL, 1);
    cf7c:	0c 94 04 d1 	jmp	0x1a208	; 0x1a208 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5463
  }
}
    cf80:	cf 91       	pop	r28
    cf82:	1f 91       	pop	r17
    cf84:	0f 91       	pop	r16
    cf86:	08 95       	ret

0000cf88 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z38button_select_term_mode_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5337
   args1 ... globalni argument z definice menu
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_select_term_mode_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
    cf88:	cf 93       	push	r28
    cf8a:	df 93       	push	r29
    cf8c:	d6 2f       	mov	r29, r22
    cf8e:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5340
  uint8_t mode;
  uint8_t ret = 2;
  if (thermostat_ring_get_active(args2) != RING_FREE)
    cf90:	86 2f       	mov	r24, r22
    cf92:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
    cf96:	8f 3f       	cpi	r24, 0xFF	; 255
    cf98:	49 f1       	breq	.+82     	; 0xcfec <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5343
  {
    ret = 0;
    mode = thermostat_ring_get_mode(args2);
    cf9a:	8d 2f       	mov	r24, r29
    cf9c:	0e 94 14 67 	call	0xce28	; 0xce28 <thermostat_ring_get_mode(unsigned char)>
    cfa0:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5344
    if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
    cfa2:	c1 11       	cpse	r28, r1
    cfa4:	05 c0       	rjmp	.+10     	; 0xcfb0 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x28>
    cfa6:	81 e0       	ldi	r24, 0x01	; 1
    cfa8:	99 23       	and	r25, r25
    cfaa:	39 f0       	breq	.+14     	; 0xcfba <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5342
{
  uint8_t mode;
  uint8_t ret = 2;
  if (thermostat_ring_get_active(args2) != RING_FREE)
  {
    ret = 0;
    cfac:	80 e0       	ldi	r24, 0x00	; 0
    cfae:	05 c0       	rjmp	.+10     	; 0xcfba <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5345
    mode = thermostat_ring_get_mode(args2);
    if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
    if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
    cfb0:	c1 30       	cpi	r28, 0x01	; 1
    cfb2:	31 f4       	brne	.+12     	; 0xcfc0 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x38>
    cfb4:	81 e0       	ldi	r24, 0x01	; 1
    cfb6:	91 30       	cpi	r25, 0x01	; 1
    cfb8:	c9 f7       	brne	.-14     	; 0xcfac <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5351
    if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
    if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
    if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
  }
  return ret;
}
    cfba:	df 91       	pop	r29
    cfbc:	cf 91       	pop	r28
    cfbe:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5346
  {
    ret = 0;
    mode = thermostat_ring_get_mode(args2);
    if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
    if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
    if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
    cfc0:	c2 30       	cpi	r28, 0x02	; 2
    cfc2:	21 f4       	brne	.+8      	; 0xcfcc <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x44>
    cfc4:	81 e0       	ldi	r24, 0x01	; 1
    cfc6:	97 30       	cpi	r25, 0x07	; 7
    cfc8:	89 f7       	brne	.-30     	; 0xcfac <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    cfca:	f7 cf       	rjmp	.-18     	; 0xcfba <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5347
    if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
    cfcc:	c3 30       	cpi	r28, 0x03	; 3
    cfce:	21 f4       	brne	.+8      	; 0xcfd8 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x50>
    cfd0:	81 e0       	ldi	r24, 0x01	; 1
    cfd2:	92 30       	cpi	r25, 0x02	; 2
    cfd4:	59 f7       	brne	.-42     	; 0xcfac <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    cfd6:	f1 cf       	rjmp	.-30     	; 0xcfba <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5348
    if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
    cfd8:	c4 30       	cpi	r28, 0x04	; 4
    cfda:	41 f7       	brne	.-48     	; 0xcfac <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    cfdc:	81 e0       	ldi	r24, 0x01	; 1
    cfde:	98 30       	cpi	r25, 0x08	; 8
    cfe0:	61 f3       	breq	.-40     	; 0xcfba <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    cfe2:	93 30       	cpi	r25, 0x03	; 3
    cfe4:	51 f3       	breq	.-44     	; 0xcfba <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    cfe6:	95 30       	cpi	r25, 0x05	; 5
    cfe8:	09 f7       	brne	.-62     	; 0xcfac <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    cfea:	e7 cf       	rjmp	.-50     	; 0xcfba <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5339
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_select_term_mode_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode;
  uint8_t ret = 2;
    cfec:	82 e0       	ldi	r24, 0x02	; 2
    cfee:	e5 cf       	rjmp	.-54     	; 0xcfba <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>

0000cff0 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_default_term_set_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5258
   args2 ... parametr z defini menu
   args3 ... index prvku v menu
*/

void button_click_default_term_set_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
    cff0:	cf 93       	push	r28
    cff2:	df 93       	push	r29
    cff4:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5259
  if (thermostat_ring_get_active(default_ring) != RING_FREE)
    cff6:	c0 91 86 0b 	lds	r28, 0x0B86	; 0x800b86 <default_ring>
    cffa:	8c 2f       	mov	r24, r28
    cffc:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
    d000:	8f 3f       	cpi	r24, 0xFF	; 255
    d002:	61 f0       	breq	.+24     	; 0xd01c <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5261
  {
    thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
    d004:	8c 2f       	mov	r24, r28
    d006:	0e 94 14 67 	call	0xce28	; 0xce28 <thermostat_ring_get_mode(unsigned char)>
    d00a:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <thermostat_mode_default_ring_last_state>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5262
    thermostat_ring_set_mode(default_ring, args1);
    d00e:	6d 2f       	mov	r22, r29
    d010:	8c 2f       	mov	r24, r28
    d012:	0e 94 84 62 	call	0xc508	; 0xc508 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5263
    change_term_mode = 1;
    d016:	81 e0       	ldi	r24, 0x01	; 1
    d018:	80 93 9a 09 	sts	0x099A, r24	; 0x80099a <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5265
  }
}
    d01c:	df 91       	pop	r29
    d01e:	cf 91       	pop	r28
    d020:	08 95       	ret

0000d022 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>:
_Z40button_status_default_ring_term_has_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5236
   return
     - uint8_t 1... activni, 0... neaktivni
*/

uint8_t button_status_default_ring_term_has_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d022:	1f 93       	push	r17
    d024:	cf 93       	push	r28
    d026:	df 93       	push	r29
    d028:	ec 01       	movw	r28, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5238
  uint8_t ret = 0;
  if (thermostat_ring_get_active(default_ring) != RING_FREE)
    d02a:	10 91 86 0b 	lds	r17, 0x0B86	; 0x800b86 <default_ring>
    d02e:	81 2f       	mov	r24, r17
    d030:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
    d034:	8f 3f       	cpi	r24, 0xFF	; 255
    d036:	71 f0       	breq	.+28     	; 0xd054 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x32>
thermostat_ring_get_mode_1():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:185
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
    d038:	81 2f       	mov	r24, r17
    d03a:	0e 94 14 67 	call	0xce28	; 0xce28 <thermostat_ring_get_mode(unsigned char)>
    d03e:	98 2f       	mov	r25, r24
_Z40button_status_default_ring_term_has_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5242
  {
    if (thermostat_ring_get_mode_1(default_ring, args1) == true)
      ret = 1;
    if (thermostat_ring_get_mode(default_ring) != args1 && thermostat_mode_default_ring_last_state != args1)
    d040:	8c 17       	cp	r24, r28
    d042:	1d 06       	cpc	r1, r29
    d044:	29 f0       	breq	.+10     	; 0xd050 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x2e>
    d046:	80 91 99 09 	lds	r24, 0x0999	; 0x800999 <thermostat_mode_default_ring_last_state>
    d04a:	8c 17       	cp	r24, r28
    d04c:	1d 06       	cpc	r1, r29
    d04e:	39 f4       	brne	.+14     	; 0xd05e <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x3c>
thermostat_ring_get_mode_1():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:185
    d050:	81 e0       	ldi	r24, 0x01	; 1
    d052:	9c 13       	cpse	r25, r28
_Z40button_status_default_ring_term_has_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5237
     - uint8_t 1... activni, 0... neaktivni
*/

uint8_t button_status_default_ring_term_has_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    d054:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5248
      ret = 2;
    //printf("last:%d, mode%d, idx%d\n", thermostat_mode_default_ring_last_state, thermostat_ring_get_mode(default_ring), args1);
  }
  //printf("ret %d\n\n", ret);
  return ret;
}
    d056:	df 91       	pop	r29
    d058:	cf 91       	pop	r28
    d05a:	1f 91       	pop	r17
    d05c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5243
  if (thermostat_ring_get_active(default_ring) != RING_FREE)
  {
    if (thermostat_ring_get_mode_1(default_ring, args1) == true)
      ret = 1;
    if (thermostat_ring_get_mode(default_ring) != args1 && thermostat_mode_default_ring_last_state != args1)
      ret = 2;
    d05e:	82 e0       	ldi	r24, 0x02	; 2
    d060:	fa cf       	rjmp	.-12     	; 0xd056 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x34>

0000d062 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>:
_Z43button_click_set_new_default_ring_in_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5045
   funkce pro nastaveni vychozi ringu z menu, v promene args3 mam id polozky tlacitka z menu
   ulozim rovnou do promene default ring
   ulozim do globalniho parametru menu
*/
void button_click_set_new_default_ring_in_dialog(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d062:	cf 93       	push	r28
    d064:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5046
  if (thermostat_ring_get_active(args3) != RING_FREE)
    d066:	84 2f       	mov	r24, r20
    d068:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
    d06c:	8f 3f       	cpi	r24, 0xFF	; 255
    d06e:	89 f0       	breq	.+34     	; 0xd092 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)+0x30>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5048
  {
    last_default_ring = default_ring;
    d070:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
    d074:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <last_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5049
    default_ring = args3;
    d078:	c0 93 86 0b 	sts	0x0B86, r28	; 0x800b86 <default_ring>
MenuHistoryUpdateArgs1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1207
  }
}
///
void MenuHistoryUpdateArgs1(uint8_t args1)
{
  Global_menu_args1[MenuHistoryIndex] = args1;
    d07c:	e0 91 19 0d 	lds	r30, 0x0D19	; 0x800d19 <MenuHistoryIndex>
    d080:	f0 e0       	ldi	r31, 0x00	; 0
    d082:	eb 5f       	subi	r30, 0xFB	; 251
    d084:	f2 4f       	sbci	r31, 0xF2	; 242
    d086:	c0 83       	st	Z, r28
_Z43button_click_set_new_default_ring_in_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5059
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    dialog_yes_function = &term_ring_do_activate;
    dialog_yes_args1 = args3;
    strcpy_P(dialog_text, text_term_do_activate);
  }
  display_redraw_default_ring = 1;
    d088:	81 e0       	ldi	r24, 0x01	; 1
    d08a:	80 93 94 09 	sts	0x0994, r24	; 0x800994 <display_redraw_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5060
}
    d08e:	cf 91       	pop	r28
    d090:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5054
    default_ring = args3;
    MenuHistoryUpdateArgs1(args3);
  }
  else
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    d092:	70 e0       	ldi	r23, 0x00	; 0
    d094:	60 e0       	ldi	r22, 0x00	; 0
    d096:	84 e6       	ldi	r24, 0x64	; 100
    d098:	90 e0       	ldi	r25, 0x00	; 0
    d09a:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5055
    dialog_yes_function = &term_ring_do_activate;
    d09e:	81 e1       	ldi	r24, 0x11	; 17
    d0a0:	96 e6       	ldi	r25, 0x66	; 102
    d0a2:	90 93 98 09 	sts	0x0998, r25	; 0x800998 <dialog_yes_function+0x1>
    d0a6:	80 93 97 09 	sts	0x0997, r24	; 0x800997 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5056
    dialog_yes_args1 = args3;
    d0aa:	c0 93 96 09 	sts	0x0996, r28	; 0x800996 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5057
    strcpy_P(dialog_text, text_term_do_activate);
    d0ae:	6d e7       	ldi	r22, 0x7D	; 125
    d0b0:	71 e7       	ldi	r23, 0x71	; 113
    d0b2:	85 e1       	ldi	r24, 0x15	; 21
    d0b4:	9a e0       	ldi	r25, 0x0A	; 10
    d0b6:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
    d0ba:	e6 cf       	rjmp	.-52     	; 0xd088 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)+0x26>

0000d0bc <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_ring_is_selectedjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5023
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_ring_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((args3 == default_ring) && (thermostat_ring_get_active(default_ring) == 1))
    d0bc:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
    d0c0:	84 13       	cpse	r24, r20
    d0c2:	08 c0       	rjmp	.+16     	; 0xd0d4 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x18>
    d0c4:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
    d0c8:	91 e0       	ldi	r25, 0x01	; 1
    d0ca:	81 30       	cpi	r24, 0x01	; 1
    d0cc:	09 f0       	breq	.+2      	; 0xd0d0 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5022
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_ring_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    d0ce:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5028
  if ((args3 == default_ring) && (thermostat_ring_get_active(default_ring) == 1))
    ret = 1;
  if ((args3 != default_ring) && (args3 != last_default_ring))
    ret = 2;
  return ret;
}
    d0d0:	89 2f       	mov	r24, r25
    d0d2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5025
uint8_t button_get_term_ring_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((args3 == default_ring) && (thermostat_ring_get_active(default_ring) == 1))
    ret = 1;
  if ((args3 != default_ring) && (args3 != last_default_ring))
    d0d4:	80 91 95 09 	lds	r24, 0x0995	; 0x800995 <last_default_ring>
    d0d8:	84 17       	cp	r24, r20
    d0da:	c9 f3       	breq	.-14     	; 0xd0ce <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5026
    ret = 2;
    d0dc:	92 e0       	ldi	r25, 0x02	; 2
    d0de:	f8 cf       	rjmp	.-16     	; 0xd0d0 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x14>

0000d0e0 <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:100
  return PID_time[idx];
}

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
    d0e0:	ef 92       	push	r14
    d0e2:	ff 92       	push	r15
    d0e4:	0f 93       	push	r16
    d0e6:	1f 93       	push	r17
    d0e8:	cf 93       	push	r28
    d0ea:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:104
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    d0ec:	91 e2       	ldi	r25, 0x21	; 33
    d0ee:	89 9f       	mul	r24, r25
    d0f0:	e0 01       	movw	r28, r0
    d0f2:	11 24       	eor	r1, r1
    d0f4:	8e 01       	movw	r16, r28
    d0f6:	04 5b       	subi	r16, 0xB4	; 180
    d0f8:	1e 4f       	sbci	r17, 0xFE	; 254
    d0fa:	7b 01       	movw	r14, r22
    d0fc:	cb 5a       	subi	r28, 0xAB	; 171
    d0fe:	de 4f       	sbci	r29, 0xFE	; 254
    d100:	c8 01       	movw	r24, r16
    d102:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:105
    name[i] = t;
    d106:	f7 01       	movw	r30, r14
    d108:	81 93       	st	Z+, r24
    d10a:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
    d10c:	88 23       	and	r24, r24
    d10e:	29 f0       	breq	.+10     	; 0xd11a <thermostat_ring_get_name(unsigned char, char*)+0x3a>
    d110:	0f 5f       	subi	r16, 0xFF	; 255
    d112:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:102

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    d114:	0c 17       	cp	r16, r28
    d116:	1d 07       	cpc	r17, r29
    d118:	99 f7       	brne	.-26     	; 0xd100 <thermostat_ring_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:108
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    name[i] = t;
    if (t == 0) break;
  }
}
    d11a:	df 91       	pop	r29
    d11c:	cf 91       	pop	r28
    d11e:	1f 91       	pop	r17
    d120:	0f 91       	pop	r16
    d122:	ff 90       	pop	r15
    d124:	ef 90       	pop	r14
    d126:	08 95       	ret

0000d128 <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z39thermostat_button_activate_ring_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5203
  thermostat_ring_get_name(args2, str2);
  strcat(dialog_text, str2);
}

void thermostat_button_activate_ring_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d128:	1f 93       	push	r17
    d12a:	cf 93       	push	r28
    d12c:	df 93       	push	r29
    d12e:	00 d0       	rcall	.+0      	; 0xd130 <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)+0x8>
    d130:	00 d0       	rcall	.+0      	; 0xd132 <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xa>
    d132:	00 d0       	rcall	.+0      	; 0xd134 <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    d134:	1f 92       	push	r1
    d136:	cd b7       	in	r28, 0x3d	; 61
    d138:	de b7       	in	r29, 0x3e	; 62
    d13a:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5206
  //printf("aktivece %d-%d-%d\n", args1, args2, args3);
  char str2[10];
  MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    d13c:	70 e0       	ldi	r23, 0x00	; 0
    d13e:	60 e0       	ldi	r22, 0x00	; 0
    d140:	84 e6       	ldi	r24, 0x64	; 100
    d142:	90 e0       	ldi	r25, 0x00	; 0
    d144:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5207
  dialog_yes_function = &helper_thermostat_button_activate_ring_onclick;
    d148:	88 e9       	ldi	r24, 0x98	; 152
    d14a:	93 e6       	ldi	r25, 0x63	; 99
    d14c:	90 93 98 09 	sts	0x0998, r25	; 0x800998 <dialog_yes_function+0x1>
    d150:	80 93 97 09 	sts	0x0997, r24	; 0x800997 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5208
  dialog_yes_args1 = args2;
    d154:	10 93 96 09 	sts	0x0996, r17	; 0x800996 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5209
  strcpy_P(dialog_text, text_term_do_activate1);
    d158:	68 ed       	ldi	r22, 0xD8	; 216
    d15a:	71 e7       	ldi	r23, 0x71	; 113
    d15c:	85 e1       	ldi	r24, 0x15	; 21
    d15e:	9a e0       	ldi	r25, 0x0A	; 10
    d160:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5210
  strcat(dialog_text, ": ");
    d164:	63 e4       	ldi	r22, 0x43	; 67
    d166:	77 e0       	ldi	r23, 0x07	; 7
    d168:	85 e1       	ldi	r24, 0x15	; 21
    d16a:	9a e0       	ldi	r25, 0x0A	; 10
    d16c:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5211
  thermostat_ring_get_name(args2, str2);
    d170:	be 01       	movw	r22, r28
    d172:	6f 5f       	subi	r22, 0xFF	; 255
    d174:	7f 4f       	sbci	r23, 0xFF	; 255
    d176:	81 2f       	mov	r24, r17
    d178:	0e 94 70 68 	call	0xd0e0	; 0xd0e0 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5212
  strcat(dialog_text, str2);
    d17c:	be 01       	movw	r22, r28
    d17e:	6f 5f       	subi	r22, 0xFF	; 255
    d180:	7f 4f       	sbci	r23, 0xFF	; 255
    d182:	85 e1       	ldi	r24, 0x15	; 21
    d184:	9a e0       	ldi	r25, 0x0A	; 10
    d186:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5213
}
    d18a:	2a 96       	adiw	r28, 0x0a	; 10
    d18c:	0f b6       	in	r0, 0x3f	; 63
    d18e:	f8 94       	cli
    d190:	de bf       	out	0x3e, r29	; 62
    d192:	0f be       	out	0x3f, r0	; 63
    d194:	cd bf       	out	0x3d, r28	; 61
    d196:	df 91       	pop	r29
    d198:	cf 91       	pop	r28
    d19a:	1f 91       	pop	r17
    d19c:	08 95       	ret

0000d19e <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z41thermostat_button_deactivate_ring_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5190
  thermostat_ring_set_active(args1, 1);
}

/// funkce pro deaktivaci termostatu
void thermostat_button_deactivate_ring_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d19e:	1f 93       	push	r17
    d1a0:	cf 93       	push	r28
    d1a2:	df 93       	push	r29
    d1a4:	00 d0       	rcall	.+0      	; 0xd1a6 <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)+0x8>
    d1a6:	00 d0       	rcall	.+0      	; 0xd1a8 <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xa>
    d1a8:	00 d0       	rcall	.+0      	; 0xd1aa <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    d1aa:	1f 92       	push	r1
    d1ac:	cd b7       	in	r28, 0x3d	; 61
    d1ae:	de b7       	in	r29, 0x3e	; 62
    d1b0:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5193
  //printf("deaktivece %d-%d-%d\n", args1, args2, args3);
  char str2[10];
  MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    d1b2:	70 e0       	ldi	r23, 0x00	; 0
    d1b4:	60 e0       	ldi	r22, 0x00	; 0
    d1b6:	84 e6       	ldi	r24, 0x64	; 100
    d1b8:	90 e0       	ldi	r25, 0x00	; 0
    d1ba:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5194
  dialog_yes_function = &helper_thermostat_button_deactivate_ring_onclick;
    d1be:	8a e7       	ldi	r24, 0x7A	; 122
    d1c0:	93 e6       	ldi	r25, 0x63	; 99
    d1c2:	90 93 98 09 	sts	0x0998, r25	; 0x800998 <dialog_yes_function+0x1>
    d1c6:	80 93 97 09 	sts	0x0997, r24	; 0x800997 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5195
  dialog_yes_args1 = args2;
    d1ca:	10 93 96 09 	sts	0x0996, r17	; 0x800996 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5196
  strcpy_P(dialog_text, text_term_do_deactivate);
    d1ce:	67 ec       	ldi	r22, 0xC7	; 199
    d1d0:	71 e7       	ldi	r23, 0x71	; 113
    d1d2:	85 e1       	ldi	r24, 0x15	; 21
    d1d4:	9a e0       	ldi	r25, 0x0A	; 10
    d1d6:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5197
  strcat(dialog_text, ": ");
    d1da:	63 e4       	ldi	r22, 0x43	; 67
    d1dc:	77 e0       	ldi	r23, 0x07	; 7
    d1de:	85 e1       	ldi	r24, 0x15	; 21
    d1e0:	9a e0       	ldi	r25, 0x0A	; 10
    d1e2:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5198
  thermostat_ring_get_name(args2, str2);
    d1e6:	be 01       	movw	r22, r28
    d1e8:	6f 5f       	subi	r22, 0xFF	; 255
    d1ea:	7f 4f       	sbci	r23, 0xFF	; 255
    d1ec:	81 2f       	mov	r24, r17
    d1ee:	0e 94 70 68 	call	0xd0e0	; 0xd0e0 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5199
  strcat(dialog_text, str2);
    d1f2:	be 01       	movw	r22, r28
    d1f4:	6f 5f       	subi	r22, 0xFF	; 255
    d1f6:	7f 4f       	sbci	r23, 0xFF	; 255
    d1f8:	85 e1       	ldi	r24, 0x15	; 21
    d1fa:	9a e0       	ldi	r25, 0x0A	; 10
    d1fc:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5200
}
    d200:	2a 96       	adiw	r28, 0x0a	; 10
    d202:	0f b6       	in	r0, 0x3f	; 63
    d204:	f8 94       	cli
    d206:	de bf       	out	0x3e, r29	; 62
    d208:	0f be       	out	0x3f, r0	; 63
    d20a:	cd bf       	out	0x3d, r28	; 61
    d20c:	df 91       	pop	r29
    d20e:	cf 91       	pop	r28
    d210:	1f 91       	pop	r17
    d212:	08 95       	ret

0000d214 <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)>:
_Z39thermostat_button_set_ring_name_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5164
   args3 - nepotrebuji
   promene nemaji zadny vyznam
*/

void thermostat_button_set_ring_name_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d214:	1f 93       	push	r17
    d216:	cf 93       	push	r28
    d218:	df 93       	push	r29
    d21a:	00 d0       	rcall	.+0      	; 0xd21c <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)+0x8>
    d21c:	00 d0       	rcall	.+0      	; 0xd21e <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)+0xa>
    d21e:	00 d0       	rcall	.+0      	; 0xd220 <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    d220:	1f 92       	push	r1
    d222:	cd b7       	in	r28, 0x3d	; 61
    d224:	de b7       	in	r29, 0x3e	; 62
    d226:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5167
  char name[10];
  //printf("%d -- %d -- %d\n", args1, args2, args3);
  thermostat_ring_get_name(args2, name);
    d228:	be 01       	movw	r22, r28
    d22a:	6f 5f       	subi	r22, 0xFF	; 255
    d22c:	7f 4f       	sbci	r23, 0xFF	; 255
    d22e:	81 2f       	mov	r24, r17
    d230:	0e 94 70 68 	call	0xd0e0	; 0xd0e0 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5168
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    d234:	70 e0       	ldi	r23, 0x00	; 0
    d236:	60 e0       	ldi	r22, 0x00	; 0
    d238:	87 e6       	ldi	r24, 0x67	; 103
    d23a:	90 e0       	ldi	r25, 0x00	; 0
    d23c:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    d240:	be 01       	movw	r22, r28
    d242:	6f 5f       	subi	r22, 0xFF	; 255
    d244:	7f 4f       	sbci	r23, 0xFF	; 255
    d246:	85 ef       	ldi	r24, 0xF5	; 245
    d248:	99 e0       	ldi	r25, 0x09	; 9
    d24a:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1379
  dialog_set_string_max_length = max_length;
    d24e:	89 e0       	ldi	r24, 0x09	; 9
    d250:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1380
  dialog_set_string_args = idx;
    d254:	10 93 f3 09 	sts	0x09F3, r17	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1381
  dialog_save_string_function = save_function;
    d258:	8c e7       	ldi	r24, 0x7C	; 124
    d25a:	93 e6       	ldi	r25, 0x63	; 99
    d25c:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    d260:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1382
  dialog_save_valid_function = valid_function;
    d264:	87 ea       	ldi	r24, 0xA7	; 167
    d266:	96 e4       	ldi	r25, 0x46	; 70
    d268:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    d26c:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z39thermostat_button_set_ring_name_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5170
  char name[10];
  //printf("%d -- %d -- %d\n", args1, args2, args3);
  thermostat_ring_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
  display_element_set_string(name, 9, args2, &helper_thermostat_button_set_ring_name, &valid_true);
}
    d270:	2a 96       	adiw	r28, 0x0a	; 10
    d272:	0f b6       	in	r0, 0x3f	; 63
    d274:	f8 94       	cli
    d276:	de bf       	out	0x3e, r29	; 62
    d278:	0f be       	out	0x3f, r0	; 63
    d27a:	cd bf       	out	0x3d, r28	; 61
    d27c:	df 91       	pop	r29
    d27e:	cf 91       	pop	r28
    d280:	1f 91       	pop	r17
    d282:	08 95       	ret

0000d284 <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z48dyn_button_show_all_thermostat_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5116


/////////////////////
/// Funkce pro vyplneni popisku vyberoveho menu ringu termostatu
void dyn_button_show_all_thermostat_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    d284:	cf 92       	push	r12
    d286:	df 92       	push	r13
    d288:	ef 92       	push	r14
    d28a:	ff 92       	push	r15
    d28c:	0f 93       	push	r16
    d28e:	1f 93       	push	r17
    d290:	cf 93       	push	r28
    d292:	df 93       	push	r29
    d294:	00 d0       	rcall	.+0      	; 0xd296 <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x12>
    d296:	00 d0       	rcall	.+0      	; 0xd298 <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
    d298:	00 d0       	rcall	.+0      	; 0xd29a <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
    d29a:	1f 92       	push	r1
    d29c:	cd b7       	in	r28, 0x3d	; 61
    d29e:	de b7       	in	r29, 0x3e	; 62
    d2a0:	d2 2e       	mov	r13, r18
    d2a2:	c3 2e       	mov	r12, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5118
  char name[10];
  thermostat_ring_get_name(args1, name);
    d2a4:	9e 01       	movw	r18, r28
    d2a6:	2f 5f       	subi	r18, 0xFF	; 255
    d2a8:	3f 4f       	sbci	r19, 0xFF	; 255
    d2aa:	79 01       	movw	r14, r18
    d2ac:	b9 01       	movw	r22, r18
    d2ae:	0e 94 70 68 	call	0xd0e0	; 0xd0e0 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5119
  sprintf(line1, "Regulator: %s", name);
    d2b2:	ff 92       	push	r15
    d2b4:	ef 92       	push	r14
    d2b6:	83 ea       	ldi	r24, 0xA3	; 163
    d2b8:	93 e0       	ldi	r25, 0x03	; 3
    d2ba:	9f 93       	push	r25
    d2bc:	8f 93       	push	r24
    d2be:	cf 92       	push	r12
    d2c0:	df 92       	push	r13
    d2c2:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5120
  strcpy_P(line2, text_dashdash);
    d2c6:	63 ec       	ldi	r22, 0xC3	; 195
    d2c8:	71 e7       	ldi	r23, 0x71	; 113
    d2ca:	c8 01       	movw	r24, r16
    d2cc:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
    d2d0:	0f 90       	pop	r0
    d2d2:	0f 90       	pop	r0
    d2d4:	0f 90       	pop	r0
    d2d6:	0f 90       	pop	r0
    d2d8:	0f 90       	pop	r0
    d2da:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5121
}
    d2dc:	2a 96       	adiw	r28, 0x0a	; 10
    d2de:	0f b6       	in	r0, 0x3f	; 63
    d2e0:	f8 94       	cli
    d2e2:	de bf       	out	0x3e, r29	; 62
    d2e4:	0f be       	out	0x3f, r0	; 63
    d2e6:	cd bf       	out	0x3d, r28	; 61
    d2e8:	df 91       	pop	r29
    d2ea:	cf 91       	pop	r28
    d2ec:	1f 91       	pop	r17
    d2ee:	0f 91       	pop	r16
    d2f0:	ff 90       	pop	r15
    d2f2:	ef 90       	pop	r14
    d2f4:	df 90       	pop	r13
    d2f6:	cf 90       	pop	r12
    d2f8:	08 95       	ret

0000d2fa <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z30button_get_default_ring_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5090
   nazev vychoziho ringu
   index vychoziho ringu
   zadne vstupni argumenty
*/
void button_get_default_ring_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    d2fa:	ef 92       	push	r14
    d2fc:	ff 92       	push	r15
    d2fe:	0f 93       	push	r16
    d300:	1f 93       	push	r17
    d302:	cf 93       	push	r28
    d304:	df 93       	push	r29
    d306:	00 d0       	rcall	.+0      	; 0xd308 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0xe>
    d308:	00 d0       	rcall	.+0      	; 0xd30a <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x10>
    d30a:	00 d0       	rcall	.+0      	; 0xd30c <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x12>
    d30c:	1f 92       	push	r1
    d30e:	cd b7       	in	r28, 0x3d	; 61
    d310:	de b7       	in	r29, 0x3e	; 62
    d312:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5092
  char name[10];
  strcpy_P(line1, text_change_default_ring);
    d314:	69 ea       	ldi	r22, 0xA9	; 169
    d316:	71 e7       	ldi	r23, 0x71	; 113
    d318:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5093
  if (default_ring != NO_DEFAULT_RING)
    d31c:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
    d320:	8f 3f       	cpi	r24, 0xFF	; 255
    d322:	21 f1       	breq	.+72     	; 0xd36c <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5095
  {
    thermostat_ring_get_name(default_ring, name);
    d324:	9e 01       	movw	r18, r28
    d326:	2f 5f       	subi	r18, 0xFF	; 255
    d328:	3f 4f       	sbci	r19, 0xFF	; 255
    d32a:	79 01       	movw	r14, r18
    d32c:	b9 01       	movw	r22, r18
    d32e:	0e 94 70 68 	call	0xd0e0	; 0xd0e0 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5096
    sprintf(line2, "Regulator: %s", name);
    d332:	ff 92       	push	r15
    d334:	ef 92       	push	r14
    d336:	83 ea       	ldi	r24, 0xA3	; 163
    d338:	93 e0       	ldi	r25, 0x03	; 3
    d33a:	9f 93       	push	r25
    d33c:	8f 93       	push	r24
    d33e:	1f 93       	push	r17
    d340:	0f 93       	push	r16
    d342:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
    d346:	0f 90       	pop	r0
    d348:	0f 90       	pop	r0
    d34a:	0f 90       	pop	r0
    d34c:	0f 90       	pop	r0
    d34e:	0f 90       	pop	r0
    d350:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5102
  }
  else
  {
    strcpy_P(line2, text_dashdash);
  }
}
    d352:	2a 96       	adiw	r28, 0x0a	; 10
    d354:	0f b6       	in	r0, 0x3f	; 63
    d356:	f8 94       	cli
    d358:	de bf       	out	0x3e, r29	; 62
    d35a:	0f be       	out	0x3f, r0	; 63
    d35c:	cd bf       	out	0x3d, r28	; 61
    d35e:	df 91       	pop	r29
    d360:	cf 91       	pop	r28
    d362:	1f 91       	pop	r17
    d364:	0f 91       	pop	r16
    d366:	ff 90       	pop	r15
    d368:	ef 90       	pop	r14
    d36a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5100
    thermostat_ring_get_name(default_ring, name);
    sprintf(line2, "Regulator: %s", name);
  }
  else
  {
    strcpy_P(line2, text_dashdash);
    d36c:	63 ec       	ldi	r22, 0xC3	; 195
    d36e:	71 e7       	ldi	r23, 0x71	; 113
    d370:	c8 01       	movw	r24, r16
    d372:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
    d376:	ed cf       	rjmp	.-38     	; 0xd352 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>

0000d378 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z43button_change_default_ring_labels_in_dialoghhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5071
   informace aktivni/neaktivni regulacni okruh
   args1 ... loop_id z menu
   args2 ... globalni parametr z menu
*/
void button_change_default_ring_labels_in_dialog(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    d378:	af 92       	push	r10
    d37a:	bf 92       	push	r11
    d37c:	cf 92       	push	r12
    d37e:	df 92       	push	r13
    d380:	ff 92       	push	r15
    d382:	0f 93       	push	r16
    d384:	1f 93       	push	r17
    d386:	cf 93       	push	r28
    d388:	df 93       	push	r29
    d38a:	cd b7       	in	r28, 0x3d	; 61
    d38c:	de b7       	in	r29, 0x3e	; 62
    d38e:	66 97       	sbiw	r28, 0x16	; 22
    d390:	0f b6       	in	r0, 0x3f	; 63
    d392:	f8 94       	cli
    d394:	de bf       	out	0x3e, r29	; 62
    d396:	0f be       	out	0x3f, r0	; 63
    d398:	cd bf       	out	0x3d, r28	; 61
    d39a:	f8 2e       	mov	r15, r24
    d39c:	59 01       	movw	r10, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5074
  char name[10];
  char active[12];
  if (thermostat_ring_get_active(args1) != RING_FREE)
    d39e:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
    d3a2:	9e 01       	movw	r18, r28
    d3a4:	2f 5f       	subi	r18, 0xFF	; 255
    d3a6:	3f 4f       	sbci	r19, 0xFF	; 255
    d3a8:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5075
    strcpy_P(active, text_term_active);
    d3aa:	61 ea       	ldi	r22, 0xA1	; 161
    d3ac:	71 e7       	ldi	r23, 0x71	; 113
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5074
*/
void button_change_default_ring_labels_in_dialog(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char name[10];
  char active[12];
  if (thermostat_ring_get_active(args1) != RING_FREE)
    d3ae:	8f 3f       	cpi	r24, 0xFF	; 255
    d3b0:	11 f4       	brne	.+4      	; 0xd3b6 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5077
    strcpy_P(active, text_term_active);
  else
    strcpy_P(active, text_term_deactive);
    d3b2:	67 e9       	ldi	r22, 0x97	; 151
    d3b4:	71 e7       	ldi	r23, 0x71	; 113
    d3b6:	c6 01       	movw	r24, r12
    d3b8:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5078
  thermostat_ring_get_name(args1, name);
    d3bc:	be 01       	movw	r22, r28
    d3be:	63 5f       	subi	r22, 0xF3	; 243
    d3c0:	7f 4f       	sbci	r23, 0xFF	; 255
    d3c2:	8f 2d       	mov	r24, r15
    d3c4:	0e 94 70 68 	call	0xd0e0	; 0xd0e0 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5079
  sprintf(line2, "Reg. %d %s", args1, active);
    d3c8:	df 92       	push	r13
    d3ca:	cf 92       	push	r12
    d3cc:	1f 92       	push	r1
    d3ce:	ff 92       	push	r15
    d3d0:	81 eb       	ldi	r24, 0xB1	; 177
    d3d2:	93 e0       	ldi	r25, 0x03	; 3
    d3d4:	9f 93       	push	r25
    d3d6:	8f 93       	push	r24
    d3d8:	1f 93       	push	r17
    d3da:	0f 93       	push	r16
    d3dc:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5080
  strcpy(line1, name);
    d3e0:	be 01       	movw	r22, r28
    d3e2:	63 5f       	subi	r22, 0xF3	; 243
    d3e4:	7f 4f       	sbci	r23, 0xFF	; 255
    d3e6:	c5 01       	movw	r24, r10
    d3e8:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
    d3ec:	0f b6       	in	r0, 0x3f	; 63
    d3ee:	f8 94       	cli
    d3f0:	de bf       	out	0x3e, r29	; 62
    d3f2:	0f be       	out	0x3f, r0	; 63
    d3f4:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5081
}
    d3f6:	66 96       	adiw	r28, 0x16	; 22
    d3f8:	0f b6       	in	r0, 0x3f	; 63
    d3fa:	f8 94       	cli
    d3fc:	de bf       	out	0x3e, r29	; 62
    d3fe:	0f be       	out	0x3f, r0	; 63
    d400:	cd bf       	out	0x3d, r28	; 61
    d402:	df 91       	pop	r29
    d404:	cf 91       	pop	r28
    d406:	1f 91       	pop	r17
    d408:	0f 91       	pop	r16
    d40a:	ff 90       	pop	r15
    d40c:	df 90       	pop	r13
    d40e:	cf 90       	pop	r12
    d410:	bf 90       	pop	r11
    d412:	af 90       	pop	r10
    d414:	08 95       	ret

0000d416 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_dialog_default_ringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4086
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void display_element_dialog_default_ring(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    d416:	af 92       	push	r10
    d418:	bf 92       	push	r11
    d41a:	cf 92       	push	r12
    d41c:	df 92       	push	r13
    d41e:	ef 92       	push	r14
    d420:	ff 92       	push	r15
    d422:	0f 93       	push	r16
    d424:	1f 93       	push	r17
    d426:	cf 93       	push	r28
    d428:	df 93       	push	r29
    d42a:	cd b7       	in	r28, 0x3d	; 61
    d42c:	de b7       	in	r29, 0x3e	; 62
    d42e:	a8 97       	sbiw	r28, 0x28	; 40
    d430:	0f b6       	in	r0, 0x3f	; 63
    d432:	f8 94       	cli
    d434:	de bf       	out	0x3e, r29	; 62
    d436:	0f be       	out	0x3f, r0	; 63
    d438:	cd bf       	out	0x3d, r28	; 61
    d43a:	6c 01       	movw	r12, r24
    d43c:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4089
  char name[10];
  char default_text[30];
  strcpy_P(default_text, new_text_regulator);
    d43e:	64 e9       	ldi	r22, 0x94	; 148
    d440:	70 e7       	ldi	r23, 0x70	; 112
    d442:	ce 01       	movw	r24, r28
    d444:	01 96       	adiw	r24, 0x01	; 1
    d446:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4090
  if (thermostat_ring_get_active(args2) != RING_FREE)
    d44a:	8e 2d       	mov	r24, r14
    d44c:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
    d450:	8f 3f       	cpi	r24, 0xFF	; 255
    d452:	51 f1       	breq	.+84     	; 0xd4a8 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4092
  {
    thermostat_ring_get_name(args2, name);
    d454:	be 01       	movw	r22, r28
    d456:	61 5e       	subi	r22, 0xE1	; 225
    d458:	7f 4f       	sbci	r23, 0xFF	; 255
    d45a:	8e 2d       	mov	r24, r14
    d45c:	0e 94 70 68 	call	0xd0e0	; 0xd0e0 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4098
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_term_deactive);
    strcat(default_text, name);
    d460:	be 01       	movw	r22, r28
    d462:	61 5e       	subi	r22, 0xE1	; 225
    d464:	7f 4f       	sbci	r23, 0xFF	; 255
    d466:	ce 01       	movw	r24, r28
    d468:	01 96       	adiw	r24, 0x01	; 1
    d46a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4100
  }
  show_string(default_text, x, y, 2, BLACK, WHITE, 0);
    d46e:	ee 24       	eor	r14, r14
    d470:	ea 94       	dec	r14
    d472:	fe 2c       	mov	r15, r14
    d474:	10 e0       	ldi	r17, 0x00	; 0
    d476:	00 e0       	ldi	r16, 0x00	; 0
    d478:	22 e0       	ldi	r18, 0x02	; 2
    d47a:	a5 01       	movw	r20, r10
    d47c:	b6 01       	movw	r22, r12
    d47e:	ce 01       	movw	r24, r28
    d480:	01 96       	adiw	r24, 0x01	; 1
    d482:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4101
}
    d486:	a8 96       	adiw	r28, 0x28	; 40
    d488:	0f b6       	in	r0, 0x3f	; 63
    d48a:	f8 94       	cli
    d48c:	de bf       	out	0x3e, r29	; 62
    d48e:	0f be       	out	0x3f, r0	; 63
    d490:	cd bf       	out	0x3d, r28	; 61
    d492:	df 91       	pop	r29
    d494:	cf 91       	pop	r28
    d496:	1f 91       	pop	r17
    d498:	0f 91       	pop	r16
    d49a:	ff 90       	pop	r15
    d49c:	ef 90       	pop	r14
    d49e:	df 90       	pop	r13
    d4a0:	cf 90       	pop	r12
    d4a2:	bf 90       	pop	r11
    d4a4:	af 90       	pop	r10
    d4a6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4097
    thermostat_ring_get_name(args2, name);
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_term_deactive);
    d4a8:	67 e9       	ldi	r22, 0x97	; 151
    d4aa:	71 e7       	ldi	r23, 0x71	; 113
    d4ac:	ce 01       	movw	r24, r28
    d4ae:	4f 96       	adiw	r24, 0x1f	; 31
    d4b0:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
    d4b4:	d5 cf       	rjmp	.-86     	; 0xd460 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x4a>

0000d4b6 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z28button_get_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5431
   args2 ... paramentr z define menu
   args3 ... index prvku v menu
*/

uint8_t button_get_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d4b6:	0f 93       	push	r16
    d4b8:	1f 93       	push	r17
    d4ba:	cf 93       	push	r28
    d4bc:	8c 01       	movw	r16, r24
    d4be:	c6 2f       	mov	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5434
  uint8_t ret = 2;
  uint8_t b;
  if (thermostat_ring_get_active(args2) != RING_FREE)
    d4c0:	86 2f       	mov	r24, r22
    d4c2:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
    d4c6:	8f 3f       	cpi	r24, 0xFF	; 255
    d4c8:	81 f0       	breq	.+32     	; 0xd4ea <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x34>
thermostat_ring_get_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:197
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
    d4ca:	21 e2       	ldi	r18, 0x21	; 33
    d4cc:	c2 9f       	mul	r28, r18
    d4ce:	c0 01       	movw	r24, r0
    d4d0:	11 24       	eor	r1, r1
    d4d2:	88 5a       	subi	r24, 0xA8	; 168
    d4d4:	9e 4f       	sbci	r25, 0xFE	; 254
    d4d6:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z28button_get_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5438
  {
    ret = 0;
    b = thermostat_ring_get_status_bites(args2, STATUS_BIT_HEAT_OR_COOL);
    if (b == 0 && args1 == TERM_MODE_MAN_HEAT)
    d4da:	80 fd       	sbrc	r24, 0
    d4dc:	0b c0       	rjmp	.+22     	; 0xd4f4 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x3e>
    d4de:	81 e0       	ldi	r24, 0x01	; 1
    d4e0:	03 30       	cpi	r16, 0x03	; 3
    d4e2:	11 05       	cpc	r17, r1
    d4e4:	19 f0       	breq	.+6      	; 0xd4ec <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5440
      ret = 1;
    if (b != 0 && args1 == TERM_MODE_MAN_COOL)
    d4e6:	80 e0       	ldi	r24, 0x00	; 0
    d4e8:	01 c0       	rjmp	.+2      	; 0xd4ec <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5432
   args3 ... index prvku v menu
*/

uint8_t button_get_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 2;
    d4ea:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5444
      ret = 1;
    if (b != 0 && args1 == TERM_MODE_MAN_COOL)
      ret = 1;
  }
  return ret;
}
    d4ec:	cf 91       	pop	r28
    d4ee:	1f 91       	pop	r17
    d4f0:	0f 91       	pop	r16
    d4f2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5440
  {
    ret = 0;
    b = thermostat_ring_get_status_bites(args2, STATUS_BIT_HEAT_OR_COOL);
    if (b == 0 && args1 == TERM_MODE_MAN_HEAT)
      ret = 1;
    if (b != 0 && args1 == TERM_MODE_MAN_COOL)
    d4f4:	81 e0       	ldi	r24, 0x01	; 1
    d4f6:	05 30       	cpi	r16, 0x05	; 5
    d4f8:	11 05       	cpc	r17, r1
    d4fa:	a9 f7       	brne	.-22     	; 0xd4e6 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x30>
    d4fc:	f7 cf       	rjmp	.-18     	; 0xd4ec <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>

0000d4fe <button_select_term_ring_input_in_dialog_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z50button_select_term_ring_input_in_dialog_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4910
/*
   funkce pro zobrazeni prizareneho vstupniho cidla k ringu
   args3 ... id polozky menu
*/
uint8_t button_select_term_ring_input_in_dialog_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d4fe:	cf 93       	push	r28
    d500:	c4 2f       	mov	r28, r20
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
    d502:	21 e2       	ldi	r18, 0x21	; 33
    d504:	62 9f       	mul	r22, r18
    d506:	c0 01       	movw	r24, r0
    d508:	11 24       	eor	r1, r1
    d50a:	84 5a       	subi	r24, 0xA4	; 164
    d50c:	9e 4f       	sbci	r25, 0xFE	; 254
    d50e:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z50button_select_term_ring_input_in_dialog_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4912
  uint8_t ret = 0;
  if (thermostat_ring_get_asociate_tds(args2) == args3)
    d512:	91 e0       	ldi	r25, 0x01	; 1
    d514:	c8 13       	cpse	r28, r24
    d516:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4915
    ret = 1;
  return ret;
}
    d518:	89 2f       	mov	r24, r25
    d51a:	cf 91       	pop	r28
    d51c:	08 95       	ret

0000d51e <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:35
  }
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    d51e:	af 92       	push	r10
    d520:	bf 92       	push	r11
    d522:	cf 92       	push	r12
    d524:	df 92       	push	r13
    d526:	ef 92       	push	r14
    d528:	ff 92       	push	r15
    d52a:	0f 93       	push	r16
    d52c:	1f 93       	push	r17
    d52e:	cf 93       	push	r28
    d530:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:37
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
    d532:	86 30       	cpi	r24, 0x06	; 6
    d534:	08 f0       	brcs	.+2      	; 0xd538 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    d536:	56 c0       	rjmp	.+172    	; 0xd5e4 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
    d538:	8b 01       	movw	r16, r22
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:39
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    d53a:	96 e1       	ldi	r25, 0x16	; 22
    d53c:	89 9f       	mul	r24, r25
    d53e:	e0 01       	movw	r28, r0
    d540:	11 24       	eor	r1, r1
    d542:	ce 01       	movw	r24, r28
    d544:	88 53       	subi	r24, 0x38	; 56
    d546:	9f 4f       	sbci	r25, 0xFF	; 255
    d548:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    d54c:	f8 01       	movw	r30, r16
    d54e:	81 93       	st	Z+, r24
    d550:	6f 01       	movw	r12, r30
    d552:	7e 01       	movw	r14, r28
    d554:	f9 ec       	ldi	r31, 0xC9	; 201
    d556:	ef 0e       	add	r14, r31
    d558:	f1 1c       	adc	r15, r1
    d55a:	5e 01       	movw	r10, r28
    d55c:	81 ed       	ldi	r24, 0xD1	; 209
    d55e:	a8 0e       	add	r10, r24
    d560:	b1 1c       	adc	r11, r1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:42
    for (uint8_t m = 0; m < 8; m++)
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
    d562:	c7 01       	movw	r24, r14
    d564:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    d568:	f6 01       	movw	r30, r12
    d56a:	81 93       	st	Z+, r24
    d56c:	6f 01       	movw	r12, r30
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:43
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    d56e:	c7 01       	movw	r24, r14
    d570:	0b 96       	adiw	r24, 0x0b	; 11
    d572:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    d576:	f6 01       	movw	r30, r12
    d578:	82 87       	std	Z+10, r24	; 0x0a
    d57a:	ff ef       	ldi	r31, 0xFF	; 255
    d57c:	ef 1a       	sub	r14, r31
    d57e:	ff 0a       	sbc	r15, r31
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:40
{
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    for (uint8_t m = 0; m < 8; m++)
    d580:	ea 14       	cp	r14, r10
    d582:	fb 04       	cpc	r15, r11
    d584:	71 f7       	brne	.-36     	; 0xd562 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:45
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    }
    tds->name[7] = 0;
    d586:	f8 01       	movw	r30, r16
    d588:	13 8a       	std	Z+19, r1	; 0x13
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:46
    tds->assigned_ds2482 = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned);
    d58a:	c7 01       	movw	r24, r14
    d58c:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    d590:	f8 01       	movw	r30, r16
    d592:	81 87       	std	Z+9, r24	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:47
    tds->offset = (EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high) << 8) + EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low);
    d594:	ce 01       	movw	r24, r28
    d596:	8e 52       	subi	r24, 0x2E	; 46
    d598:	9f 4f       	sbci	r25, 0xFF	; 255
    d59a:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    d59e:	f8 2e       	mov	r15, r24
    d5a0:	ce 01       	movw	r24, r28
    d5a2:	8d 52       	subi	r24, 0x2D	; 45
    d5a4:	9f 4f       	sbci	r25, 0xFF	; 255
    d5a6:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    d5aa:	2f 2d       	mov	r18, r15
    d5ac:	30 e0       	ldi	r19, 0x00	; 0
    d5ae:	32 2f       	mov	r19, r18
    d5b0:	22 27       	eor	r18, r18
    d5b2:	82 0f       	add	r24, r18
    d5b4:	93 2f       	mov	r25, r19
    d5b6:	91 1d       	adc	r25, r1
    d5b8:	f8 01       	movw	r30, r16
    d5ba:	93 87       	std	Z+11, r25	; 0x0b
    d5bc:	82 87       	std	Z+10, r24	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:48
    tds->period = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period);
    d5be:	ce 01       	movw	r24, r28
    d5c0:	84 52       	subi	r24, 0x24	; 36
    d5c2:	9f 4f       	sbci	r25, 0xFF	; 255
    d5c4:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    d5c8:	f8 01       	movw	r30, r16
    d5ca:	84 8b       	std	Z+20, r24	; 0x14
    d5cc:	81 e0       	ldi	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:52
    ret = 1;
  }
  return ret;
}
    d5ce:	df 91       	pop	r29
    d5d0:	cf 91       	pop	r28
    d5d2:	1f 91       	pop	r17
    d5d4:	0f 91       	pop	r16
    d5d6:	ff 90       	pop	r15
    d5d8:	ef 90       	pop	r14
    d5da:	df 90       	pop	r13
    d5dc:	cf 90       	pop	r12
    d5de:	bf 90       	pop	r11
    d5e0:	af 90       	pop	r10
    d5e2:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:36
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  uint8_t ret = 0;
    d5e4:	80 e0       	ldi	r24, 0x00	; 0
    d5e6:	f3 cf       	rjmp	.-26     	; 0xd5ce <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

0000d5e8 <tds_update_associate()>:
_Z20tds_update_associatev():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:141
  tds_set_clear(w_rom[idx].tds_idx);
}

//// funkce, ktera zpetne nastavi do w_rom tds_idx, do jake realne tds je to assiciovano
void tds_update_associate(void)
{
    d5e8:	ef 92       	push	r14
    d5ea:	ff 92       	push	r15
    d5ec:	0f 93       	push	r16
    d5ee:	1f 93       	push	r17
    d5f0:	cf 93       	push	r28
    d5f2:	df 93       	push	r29
    d5f4:	cd b7       	in	r28, 0x3d	; 61
    d5f6:	de b7       	in	r29, 0x3e	; 62
    d5f8:	6e 97       	sbiw	r28, 0x1e	; 30
    d5fa:	0f b6       	in	r0, 0x3f	; 63
    d5fc:	f8 94       	cli
    d5fe:	de bf       	out	0x3e, r29	; 62
    d600:	0f be       	out	0x3f, r0	; 63
    d602:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:144
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;
    d604:	1f 8a       	std	Y+23, r1	; 0x17
    d606:	18 8e       	std	Y+24, r1	; 0x18
    d608:	19 8e       	std	Y+25, r1	; 0x19
    d60a:	1a 8e       	std	Y+26, r1	; 0x1a
    d60c:	1b 8e       	std	Y+27, r1	; 0x1b
    d60e:	1c 8e       	std	Y+28, r1	; 0x1c
    d610:	1d 8e       	std	Y+29, r1	; 0x1d
    d612:	1e 8e       	std	Y+30, r1	; 0x1e
    d614:	0e eb       	ldi	r16, 0xBE	; 190
    d616:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:148

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
  {
    w_rom[wrom_id].tds_idx = 255;
    d618:	ee 24       	eor	r14, r14
    d61a:	ea 94       	dec	r14
    d61c:	f8 01       	movw	r30, r16
    d61e:	e2 86       	std	Z+10, r14	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:149
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
    d620:	b8 01       	movw	r22, r16
    d622:	ce 01       	movw	r24, r28
    d624:	47 96       	adiw	r24, 0x17	; 23
    d626:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <tds_compare_rom(unsigned char*, unsigned char*)>
    d62a:	81 11       	cpse	r24, r1
    d62c:	14 c0       	rjmp	.+40     	; 0xd656 <tds_update_associate()+0x6e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:152
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    d62e:	f1 2c       	mov	r15, r1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:154
    {
      get_tds18s20(tds_id, &tds);
    d630:	be 01       	movw	r22, r28
    d632:	6f 5f       	subi	r22, 0xFF	; 255
    d634:	7f 4f       	sbci	r23, 0xFF	; 255
    d636:	8f 2d       	mov	r24, r15
    d638:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:155
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
    d63c:	b8 01       	movw	r22, r16
    d63e:	ce 01       	movw	r24, r28
    d640:	02 96       	adiw	r24, 0x02	; 2
    d642:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <tds_compare_rom(unsigned char*, unsigned char*)>
    d646:	88 23       	and	r24, r24
    d648:	11 f0       	breq	.+4      	; 0xd64e <tds_update_associate()+0x66>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:156
        w_rom[wrom_id].tds_idx = tds_id;
    d64a:	f8 01       	movw	r30, r16
    d64c:	f2 86       	std	Z+10, r15	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:152
  {
    w_rom[wrom_id].tds_idx = 255;
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    d64e:	f3 94       	inc	r15
    d650:	f6 e0       	ldi	r31, 0x06	; 6
    d652:	ff 12       	cpse	r15, r31
    d654:	ed cf       	rjmp	.-38     	; 0xd630 <tds_update_associate()+0x48>
    d656:	05 5f       	subi	r16, 0xF5	; 245
    d658:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:146
{
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
    d65a:	8d e0       	ldi	r24, 0x0D	; 13
    d65c:	00 30       	cpi	r16, 0x00	; 0
    d65e:	18 07       	cpc	r17, r24
    d660:	e9 f6       	brne	.-70     	; 0xd61c <tds_update_associate()+0x34>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:159
      get_tds18s20(tds_id, &tds);
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
        w_rom[wrom_id].tds_idx = tds_id;
    }
  }
}
    d662:	6e 96       	adiw	r28, 0x1e	; 30
    d664:	0f b6       	in	r0, 0x3f	; 63
    d666:	f8 94       	cli
    d668:	de bf       	out	0x3e, r29	; 62
    d66a:	0f be       	out	0x3f, r0	; 63
    d66c:	cd bf       	out	0x3d, r28	; 61
    d66e:	df 91       	pop	r29
    d670:	cf 91       	pop	r28
    d672:	1f 91       	pop	r17
    d674:	0f 91       	pop	r16
    d676:	ff 90       	pop	r15
    d678:	ef 90       	pop	r14
    d67a:	08 95       	ret

0000d67c <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:202
{
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
    d67c:	af 92       	push	r10
    d67e:	bf 92       	push	r11
    d680:	cf 92       	push	r12
    d682:	df 92       	push	r13
    d684:	ef 92       	push	r14
    d686:	ff 92       	push	r15
    d688:	1f 93       	push	r17
    d68a:	cf 93       	push	r28
    d68c:	df 93       	push	r29
    d68e:	cd b7       	in	r28, 0x3d	; 61
    d690:	de b7       	in	r29, 0x3e	; 62
    d692:	66 97       	sbiw	r28, 0x16	; 22
    d694:	0f b6       	in	r0, 0x3f	; 63
    d696:	f8 94       	cli
    d698:	de bf       	out	0x3e, r29	; 62
    d69a:	0f be       	out	0x3f, r0	; 63
    d69c:	cd bf       	out	0x3d, r28	; 61
tds_check_associate():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:179
/// funkce overeni associace
uint8_t tds_check_associate(uint8_t id)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
    d69e:	90 91 00 0d 	lds	r25, 0x0D00	; 0x800d00 <Global_HWwirenum>
    d6a2:	89 17       	cp	r24, r25
    d6a4:	a0 f0       	brcs	.+40     	; 0xd6ce <tds_associate(unsigned char)+0x52>
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
    d6a6:	1f ef       	ldi	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
    d6a8:	0e 94 f4 6a 	call	0xd5e8	; 0xd5e8 <tds_update_associate()>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:226
  return ret;
}
    d6ac:	81 2f       	mov	r24, r17
    d6ae:	66 96       	adiw	r28, 0x16	; 22
    d6b0:	0f b6       	in	r0, 0x3f	; 63
    d6b2:	f8 94       	cli
    d6b4:	de bf       	out	0x3e, r29	; 62
    d6b6:	0f be       	out	0x3f, r0	; 63
    d6b8:	cd bf       	out	0x3d, r28	; 61
    d6ba:	df 91       	pop	r29
    d6bc:	cf 91       	pop	r28
    d6be:	1f 91       	pop	r17
    d6c0:	ff 90       	pop	r15
    d6c2:	ef 90       	pop	r14
    d6c4:	df 90       	pop	r13
    d6c6:	cf 90       	pop	r12
    d6c8:	bf 90       	pop	r11
    d6ca:	af 90       	pop	r10
    d6cc:	08 95       	ret
tds_check_associate():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:184
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    d6ce:	a8 2e       	mov	r10, r24
    d6d0:	b1 2c       	mov	r11, r1
    d6d2:	2b e0       	ldi	r18, 0x0B	; 11
    d6d4:	82 9f       	mul	r24, r18
    d6d6:	c0 01       	movw	r24, r0
    d6d8:	11 24       	eor	r1, r1
    d6da:	fc 01       	movw	r30, r24
    d6dc:	e2 54       	subi	r30, 0x42	; 66
    d6de:	f3 4f       	sbci	r31, 0xF3	; 243
    d6e0:	7f 01       	movw	r14, r30
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    d6e2:	10 e0       	ldi	r17, 0x00	; 0
tds_check_associate():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:183
    {
      get_tds18s20(idx, &tds);
    d6e4:	be 01       	movw	r22, r28
    d6e6:	6f 5f       	subi	r22, 0xFF	; 255
    d6e8:	7f 4f       	sbci	r23, 0xFF	; 255
    d6ea:	81 2f       	mov	r24, r17
    d6ec:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:184
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    d6f0:	b7 01       	movw	r22, r14
    d6f2:	ce 01       	movw	r24, r28
    d6f4:	02 96       	adiw	r24, 0x02	; 2
    d6f6:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <tds_compare_rom(unsigned char*, unsigned char*)>
    d6fa:	81 11       	cpse	r24, r1
    d6fc:	d4 cf       	rjmp	.-88     	; 0xd6a6 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    d6fe:	1f 5f       	subi	r17, 0xFF	; 255
    d700:	16 30       	cpi	r17, 0x06	; 6
    d702:	81 f7       	brne	.-32     	; 0xd6e4 <tds_associate(unsigned char)+0x68>
    d704:	10 e0       	ldi	r17, 0x00	; 0
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
    d706:	2b e0       	ldi	r18, 0x0B	; 11
    d708:	2a 9d       	mul	r18, r10
    d70a:	c0 01       	movw	r24, r0
    d70c:	2b 9d       	mul	r18, r11
    d70e:	90 0d       	add	r25, r0
    d710:	11 24       	eor	r1, r1
    d712:	fc 01       	movw	r30, r24
    d714:	e9 53       	subi	r30, 0x39	; 57
    d716:	f3 4f       	sbci	r31, 0xF3	; 243
    d718:	6f 01       	movw	r12, r30
    d71a:	03 c0       	rjmp	.+6      	; 0xd722 <tds_associate(unsigned char)+0xa6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:207
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    d71c:	1f 5f       	subi	r17, 0xFF	; 255
    d71e:	16 30       	cpi	r17, 0x06	; 6
    d720:	11 f2       	breq	.-124    	; 0xd6a6 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:209
    {
      get_tds18s20(idx, &tds);
    d722:	be 01       	movw	r22, r28
    d724:	6f 5f       	subi	r22, 0xFF	; 255
    d726:	7f 4f       	sbci	r23, 0xFF	; 255
    d728:	81 2f       	mov	r24, r17
    d72a:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
    d72e:	89 81       	ldd	r24, Y+1	; 0x01
    d730:	81 11       	cpse	r24, r1
    d732:	f4 cf       	rjmp	.-24     	; 0xd71c <tds_associate(unsigned char)+0xa0>
    d734:	f6 01       	movw	r30, r12
    d736:	80 81       	ld	r24, Z
    d738:	81 30       	cpi	r24, 0x01	; 1
    d73a:	81 f7       	brne	.-32     	; 0xd71c <tds_associate(unsigned char)+0xa0>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
    d73c:	89 83       	std	Y+1, r24	; 0x01
    d73e:	fe 01       	movw	r30, r28
    d740:	32 96       	adiw	r30, 0x02	; 2
    d742:	90 e0       	ldi	r25, 0x00	; 0
    d744:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:214
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
    d746:	d7 01       	movw	r26, r14
    d748:	a8 0f       	add	r26, r24
    d74a:	b9 1f       	adc	r27, r25
    d74c:	2c 91       	ld	r18, X
    d74e:	21 93       	st	Z+, r18
    d750:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:213
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
    d752:	88 30       	cpi	r24, 0x08	; 8
    d754:	91 05       	cpc	r25, r1
    d756:	b9 f7       	brne	.-18     	; 0xd746 <tds_associate(unsigned char)+0xca>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
    d758:	2b e0       	ldi	r18, 0x0B	; 11
    d75a:	12 9f       	mul	r17, r18
    d75c:	f0 01       	movw	r30, r0
    d75e:	11 24       	eor	r1, r1
    d760:	e2 54       	subi	r30, 0x42	; 66
    d762:	f3 4f       	sbci	r31, 0xF3	; 243
    d764:	e0 85       	ldd	r30, Z+8	; 0x08
    d766:	f0 e0       	ldi	r31, 0x00	; 0
    d768:	ee 0f       	add	r30, r30
    d76a:	ff 1f       	adc	r31, r31
    d76c:	ef 5f       	subi	r30, 0xFF	; 255
    d76e:	f2 4f       	sbci	r31, 0xF2	; 242
    d770:	80 81       	ld	r24, Z
    d772:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
    d774:	be 01       	movw	r22, r28
    d776:	6f 5f       	subi	r22, 0xFF	; 255
    d778:	7f 4f       	sbci	r23, 0xFF	; 255
    d77a:	81 2f       	mov	r24, r17
    d77c:	0e 94 b3 63 	call	0xc766	; 0xc766 <set_tds18s20(unsigned char, struct_DDS18s20*)>
    d780:	3e e1       	ldi	r19, 0x1E	; 30
    d782:	13 9f       	mul	r17, r19
    d784:	a0 01       	movw	r20, r0
    d786:	11 24       	eor	r1, r1
    d788:	90 e0       	ldi	r25, 0x00	; 0
    d78a:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    d78c:	20 e2       	ldi	r18, 0x20	; 32
    d78e:	3e e4       	ldi	r19, 0x4E	; 78
    d790:	fc 01       	movw	r30, r24
    d792:	ee 0f       	add	r30, r30
    d794:	ff 1f       	adc	r31, r31
    d796:	e4 0f       	add	r30, r20
    d798:	f5 1f       	adc	r31, r21
    d79a:	e2 53       	subi	r30, 0x32	; 50
    d79c:	f4 4f       	sbci	r31, 0xF4	; 244
    d79e:	30 87       	std	Z+8, r19	; 0x08
    d7a0:	27 83       	std	Z+7, r18	; 0x07
    d7a2:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:217
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    d7a4:	8a 30       	cpi	r24, 0x0A	; 10
    d7a6:	91 05       	cpc	r25, r1
    d7a8:	99 f7       	brne	.-26     	; 0xd790 <tds_associate(unsigned char)+0x114>
    d7aa:	7e cf       	rjmp	.-260    	; 0xd6a8 <tds_associate(unsigned char)+0x2c>

0000d7ac <helper_tds_associate(unsigned int, unsigned int, unsigned char)>:
_Z20helper_tds_associatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4647
  return active;
}

void helper_tds_associate(uint16_t idx, uint16_t args2, uint8_t args3)
{
  tds_associate(idx);
    d7ac:	0c 94 3e 6b 	jmp	0xd67c	; 0xd67c <tds_associate(unsigned char)>

0000d7b0 <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>:
_Z28clik_button_onewire_scan_busjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4675
  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu(0, 0, 0);
}

void clik_button_onewire_scan_bus(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d7b0:	0f 93       	push	r16
    d7b2:	1f 93       	push	r17
    d7b4:	cf 93       	push	r28
    d7b6:	df 93       	push	r29
    d7b8:	cd b7       	in	r28, 0x3d	; 61
    d7ba:	de b7       	in	r29, 0x3e	; 62
    d7bc:	a0 97       	sbiw	r28, 0x20	; 32
    d7be:	0f b6       	in	r0, 0x3f	; 63
    d7c0:	f8 94       	cli
    d7c2:	de bf       	out	0x3e, r29	; 62
    d7c4:	0f be       	out	0x3f, r0	; 63
    d7c6:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4677
  char str1[32];
  Global_HWwirenum = 0;
    d7c8:	10 92 00 0d 	sts	0x0D00, r1	; 0x800d00 <Global_HWwirenum>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4678
  one_hw_search_device(0);
    d7cc:	0e 94 15 b0 	call	0x1602a	; 0x1602a <one_hw_search_device(unsigned char) [clone .constprop.184]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4679
  tds_update_associate();
    d7d0:	0e 94 f4 6a 	call	0xd5e8	; 0xd5e8 <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4680
  MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    d7d4:	70 e0       	ldi	r23, 0x00	; 0
    d7d6:	60 e0       	ldi	r22, 0x00	; 0
    d7d8:	88 e6       	ldi	r24, 0x68	; 104
    d7da:	90 e0       	ldi	r25, 0x00	; 0
    d7dc:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4682
  /// TODO text
  sprintf(str1, "Nalezeno: %d novych 1Wire", Global_HWwirenum);
    d7e0:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <Global_HWwirenum>
    d7e4:	1f 92       	push	r1
    d7e6:	8f 93       	push	r24
    d7e8:	8c eb       	ldi	r24, 0xBC	; 188
    d7ea:	93 e0       	ldi	r25, 0x03	; 3
    d7ec:	9f 93       	push	r25
    d7ee:	8f 93       	push	r24
    d7f0:	8e 01       	movw	r16, r28
    d7f2:	0f 5f       	subi	r16, 0xFF	; 255
    d7f4:	1f 4f       	sbci	r17, 0xFF	; 255
    d7f6:	1f 93       	push	r17
    d7f8:	0f 93       	push	r16
    d7fa:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4683
  strcpy(dialog_text, str1);
    d7fe:	b8 01       	movw	r22, r16
    d800:	85 e1       	ldi	r24, 0x15	; 21
    d802:	9a e0       	ldi	r25, 0x0A	; 10
    d804:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
    d808:	0f 90       	pop	r0
    d80a:	0f 90       	pop	r0
    d80c:	0f 90       	pop	r0
    d80e:	0f 90       	pop	r0
    d810:	0f 90       	pop	r0
    d812:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4684
}
    d814:	a0 96       	adiw	r28, 0x20	; 32
    d816:	0f b6       	in	r0, 0x3f	; 63
    d818:	f8 94       	cli
    d81a:	de bf       	out	0x3e, r29	; 62
    d81c:	0f be       	out	0x3f, r0	; 63
    d81e:	cd bf       	out	0x3d, r28	; 61
    d820:	df 91       	pop	r29
    d822:	cf 91       	pop	r28
    d824:	1f 91       	pop	r17
    d826:	0f 91       	pop	r16
    d828:	08 95       	ret

0000d82a <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:120
  return tds.period;
}

//// funkce vymaze associovane 1wire -> tds
void tds_set_clear(uint8_t idx)
{
    d82a:	1f 93       	push	r17
    d82c:	cf 93       	push	r28
    d82e:	df 93       	push	r29
    d830:	cd b7       	in	r28, 0x3d	; 61
    d832:	de b7       	in	r29, 0x3e	; 62
    d834:	66 97       	sbiw	r28, 0x16	; 22
    d836:	0f b6       	in	r0, 0x3f	; 63
    d838:	f8 94       	cli
    d83a:	de bf       	out	0x3e, r29	; 62
    d83c:	0f be       	out	0x3f, r0	; 63
    d83e:	cd bf       	out	0x3d, r28	; 61
    d840:	18 2f       	mov	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:122
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    d842:	be 01       	movw	r22, r28
    d844:	6f 5f       	subi	r22, 0xFF	; 255
    d846:	7f 4f       	sbci	r23, 0xFF	; 255
    d848:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:123
  tds.used = 0;
    d84c:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:124
  strcpy(tds.name, "FREE");
    d84e:	6e e9       	ldi	r22, 0x9E	; 158
    d850:	73 e0       	ldi	r23, 0x03	; 3
    d852:	ce 01       	movw	r24, r28
    d854:	0d 96       	adiw	r24, 0x0d	; 13
    d856:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:125
  tds.offset = 0;
    d85a:	1c 86       	std	Y+12, r1	; 0x0c
    d85c:	1b 86       	std	Y+11, r1	; 0x0b
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:126
  tds.period = 10;
    d85e:	8a e0       	ldi	r24, 0x0A	; 10
    d860:	8d 8b       	std	Y+21, r24	; 0x15
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:128
  for (uint8_t i = 0; i < 8; i++)
    tds.rom[i] = 0;
    d862:	1a 82       	std	Y+2, r1	; 0x02
    d864:	1b 82       	std	Y+3, r1	; 0x03
    d866:	1c 82       	std	Y+4, r1	; 0x04
    d868:	1d 82       	std	Y+5, r1	; 0x05
    d86a:	1e 82       	std	Y+6, r1	; 0x06
    d86c:	1f 82       	std	Y+7, r1	; 0x07
    d86e:	18 86       	std	Y+8, r1	; 0x08
    d870:	19 86       	std	Y+9, r1	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:129
  tds.assigned_ds2482 = 0;
    d872:	1a 86       	std	Y+10, r1	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:130
  set_tds18s20(idx, &tds);
    d874:	be 01       	movw	r22, r28
    d876:	6f 5f       	subi	r22, 0xFF	; 255
    d878:	7f 4f       	sbci	r23, 0xFF	; 255
    d87a:	81 2f       	mov	r24, r17
    d87c:	0e 94 b3 63 	call	0xc766	; 0xc766 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:131
  tds_update_associate();
    d880:	0e 94 f4 6a 	call	0xd5e8	; 0xd5e8 <tds_update_associate()>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:132
}
    d884:	66 96       	adiw	r28, 0x16	; 22
    d886:	0f b6       	in	r0, 0x3f	; 63
    d888:	f8 94       	cli
    d88a:	de bf       	out	0x3e, r29	; 62
    d88c:	0f be       	out	0x3f, r0	; 63
    d88e:	cd bf       	out	0x3d, r28	; 61
    d890:	df 91       	pop	r29
    d892:	cf 91       	pop	r28
    d894:	1f 91       	pop	r17
    d896:	08 95       	ret

0000d898 <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z29click_tds_deassociate_onewirejjh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:136

void tds_set_clear_wrom_id(uint8_t idx)
{
  tds_set_clear(w_rom[idx].tds_idx);
    d898:	8b e0       	ldi	r24, 0x0B	; 11
    d89a:	68 9f       	mul	r22, r24
    d89c:	f0 01       	movw	r30, r0
    d89e:	11 24       	eor	r1, r1
    d8a0:	e2 54       	subi	r30, 0x42	; 66
    d8a2:	f3 4f       	sbci	r31, 0xF3	; 243
    d8a4:	82 85       	ldd	r24, Z+10	; 0x0a
    d8a6:	0e 94 15 6c 	call	0xd82a	; 0xd82a <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4671
/// zruseni associace
void click_tds_deassociate_onewire(uint16_t args1, uint16_t idx, uint8_t args3)
{

  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu(0, 0, 0);
    d8aa:	0c 94 3e af 	jmp	0x15e7c	; 0x15e7c <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>

0000d8ae <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z38display_element_show_tds_info_dynamicsjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4196
{
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
}
//////////////////////////////////////////////
void display_element_show_tds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    d8ae:	af 92       	push	r10
    d8b0:	bf 92       	push	r11
    d8b2:	cf 92       	push	r12
    d8b4:	df 92       	push	r13
    d8b6:	ef 92       	push	r14
    d8b8:	ff 92       	push	r15
    d8ba:	0f 93       	push	r16
    d8bc:	1f 93       	push	r17
    d8be:	cf 93       	push	r28
    d8c0:	df 93       	push	r29
    d8c2:	cd b7       	in	r28, 0x3d	; 61
    d8c4:	de b7       	in	r29, 0x3e	; 62
    d8c6:	ca 54       	subi	r28, 0x4A	; 74
    d8c8:	d1 09       	sbc	r29, r1
    d8ca:	0f b6       	in	r0, 0x3f	; 63
    d8cc:	f8 94       	cli
    d8ce:	de bf       	out	0x3e, r29	; 62
    d8d0:	0f be       	out	0x3f, r0	; 63
    d8d2:	cd bf       	out	0x3d, r28	; 61
    d8d4:	6c 01       	movw	r12, r24
    d8d6:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4201
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  if (get_tds18s20(args2, &tds) == 1)
    d8d8:	be 01       	movw	r22, r28
    d8da:	6b 5c       	subi	r22, 0xCB	; 203
    d8dc:	7f 4f       	sbci	r23, 0xFF	; 255
    d8de:	8e 2d       	mov	r24, r14
    d8e0:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
    d8e4:	81 30       	cpi	r24, 0x01	; 1
    d8e6:	d9 f5       	brne	.+118    	; 0xd95e <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4204
  {
    /// zobrazeni teploty
    te = status_tds18s20[args2].temp / 1000.0;
    d8e8:	8e e1       	ldi	r24, 0x1E	; 30
    d8ea:	e8 9e       	mul	r14, r24
    d8ec:	f0 01       	movw	r30, r0
    d8ee:	11 24       	eor	r1, r1
    d8f0:	e2 53       	subi	r30, 0x32	; 50
    d8f2:	f4 4f       	sbci	r31, 0xF4	; 244
    d8f4:	65 81       	ldd	r22, Z+5	; 0x05
    d8f6:	76 81       	ldd	r23, Z+6	; 0x06
    d8f8:	07 2e       	mov	r0, r23
    d8fa:	00 0c       	add	r0, r0
    d8fc:	88 0b       	sbc	r24, r24
    d8fe:	99 0b       	sbc	r25, r25
    d900:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
    d904:	20 e0       	ldi	r18, 0x00	; 0
    d906:	30 e0       	ldi	r19, 0x00	; 0
    d908:	4a e7       	ldi	r20, 0x7A	; 122
    d90a:	54 e4       	ldi	r21, 0x44	; 68
    d90c:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4205
    dtostrf(te, 4, 2, str1);
    d910:	8e 01       	movw	r16, r28
    d912:	05 5e       	subi	r16, 0xE5	; 229
    d914:	1f 4f       	sbci	r17, 0xFF	; 255
    d916:	22 e0       	ldi	r18, 0x02	; 2
    d918:	44 e0       	ldi	r20, 0x04	; 4
    d91a:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4206
    strcat(str1, "C");
    d91e:	6e e1       	ldi	r22, 0x1E	; 30
    d920:	77 e0       	ldi	r23, 0x07	; 7
    d922:	c8 01       	movw	r24, r16
    d924:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4207
    strcpy_P(str2, current_temp_short);
    d928:	6e ef       	ldi	r22, 0xFE	; 254
    d92a:	70 e7       	ldi	r23, 0x70	; 112
    d92c:	ce 01       	movw	r24, r28
    d92e:	01 96       	adiw	r24, 0x01	; 1
    d930:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4208
    strcat(str2, str1);
    d934:	b8 01       	movw	r22, r16
    d936:	ce 01       	movw	r24, r28
    d938:	01 96       	adiw	r24, 0x01	; 1
    d93a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4209
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
    d93e:	a5 01       	movw	r20, r10
    d940:	44 57       	subi	r20, 0x74	; 116
    d942:	5f 4f       	sbci	r21, 0xFF	; 255
    d944:	b6 01       	movw	r22, r12
    d946:	66 5f       	subi	r22, 0xF6	; 246
    d948:	7f 4f       	sbci	r23, 0xFF	; 255
    d94a:	ee 24       	eor	r14, r14
    d94c:	ea 94       	dec	r14
    d94e:	fe 2c       	mov	r15, r14
    d950:	10 e0       	ldi	r17, 0x00	; 0
    d952:	00 e0       	ldi	r16, 0x00	; 0
    d954:	22 e0       	ldi	r18, 0x02	; 2
    d956:	ce 01       	movw	r24, r28
    d958:	01 96       	adiw	r24, 0x01	; 1
    d95a:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4211
  }
}
    d95e:	c6 5b       	subi	r28, 0xB6	; 182
    d960:	df 4f       	sbci	r29, 0xFF	; 255
    d962:	0f b6       	in	r0, 0x3f	; 63
    d964:	f8 94       	cli
    d966:	de bf       	out	0x3e, r29	; 62
    d968:	0f be       	out	0x3f, r0	; 63
    d96a:	cd bf       	out	0x3d, r28	; 61
    d96c:	df 91       	pop	r29
    d96e:	cf 91       	pop	r28
    d970:	1f 91       	pop	r17
    d972:	0f 91       	pop	r16
    d974:	ff 90       	pop	r15
    d976:	ef 90       	pop	r14
    d978:	df 90       	pop	r13
    d97a:	cf 90       	pop	r12
    d97c:	bf 90       	pop	r11
    d97e:	af 90       	pop	r10
    d980:	08 95       	ret

0000d982 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>:
_Z25display_menu_tds_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1460
  //dialog_save_variable_function = ;
}

/// funkce pro nastaveni nazvu cidla
void display_menu_tds_set_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d982:	1f 93       	push	r17
    d984:	cf 93       	push	r28
    d986:	df 93       	push	r29
    d988:	cd b7       	in	r28, 0x3d	; 61
    d98a:	de b7       	in	r29, 0x3e	; 62
    d98c:	a0 97       	sbiw	r28, 0x20	; 32
    d98e:	0f b6       	in	r0, 0x3f	; 63
    d990:	f8 94       	cli
    d992:	de bf       	out	0x3e, r29	; 62
    d994:	0f be       	out	0x3f, r0	; 63
    d996:	cd bf       	out	0x3d, r28	; 61
    d998:	16 2f       	mov	r17, r22
tds_get_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    d99a:	be 01       	movw	r22, r28
    d99c:	6f 5f       	subi	r22, 0xFF	; 255
    d99e:	7f 4f       	sbci	r23, 0xFF	; 255
    d9a0:	81 2f       	mov	r24, r17
    d9a2:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    d9a6:	be 01       	movw	r22, r28
    d9a8:	63 5f       	subi	r22, 0xF3	; 243
    d9aa:	7f 4f       	sbci	r23, 0xFF	; 255
    d9ac:	ce 01       	movw	r24, r28
    d9ae:	47 96       	adiw	r24, 0x17	; 23
    d9b0:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
_Z25display_menu_tds_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1463
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    d9b4:	70 e0       	ldi	r23, 0x00	; 0
    d9b6:	60 e0       	ldi	r22, 0x00	; 0
    d9b8:	87 e6       	ldi	r24, 0x67	; 103
    d9ba:	90 e0       	ldi	r25, 0x00	; 0
    d9bc:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    d9c0:	be 01       	movw	r22, r28
    d9c2:	69 5e       	subi	r22, 0xE9	; 233
    d9c4:	7f 4f       	sbci	r23, 0xFF	; 255
    d9c6:	85 ef       	ldi	r24, 0xF5	; 245
    d9c8:	99 e0       	ldi	r25, 0x09	; 9
    d9ca:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1379
  dialog_set_string_max_length = max_length;
    d9ce:	88 e0       	ldi	r24, 0x08	; 8
    d9d0:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1380
  dialog_set_string_args = idx;
    d9d4:	10 93 f3 09 	sts	0x09F3, r17	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1381
  dialog_save_string_function = save_function;
    d9d8:	85 eb       	ldi	r24, 0xB5	; 181
    d9da:	9d e6       	ldi	r25, 0x6D	; 109
    d9dc:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    d9e0:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1382
  dialog_save_valid_function = valid_function;
    d9e4:	87 ea       	ldi	r24, 0xA7	; 167
    d9e6:	96 e4       	ldi	r25, 0x46	; 70
    d9e8:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    d9ec:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z25display_menu_tds_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1466
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
  display_element_set_string(name, 8, args2, &menu_tds_save_name, &valid_true);
  //dialog_save_variable_function = ;
}
    d9f0:	a0 96       	adiw	r28, 0x20	; 32
    d9f2:	0f b6       	in	r0, 0x3f	; 63
    d9f4:	f8 94       	cli
    d9f6:	de bf       	out	0x3e, r29	; 62
    d9f8:	0f be       	out	0x3f, r0	; 63
    d9fa:	cd bf       	out	0x3d, r28	; 61
    d9fc:	df 91       	pop	r29
    d9fe:	cf 91       	pop	r28
    da00:	1f 91       	pop	r17
    da02:	08 95       	ret

0000da04 <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1452
  //dialog_save_variable_function = ;
}

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
    da04:	ff 92       	push	r15
    da06:	0f 93       	push	r16
    da08:	1f 93       	push	r17
    da0a:	cf 93       	push	r28
    da0c:	df 93       	push	r29
    da0e:	cd b7       	in	r28, 0x3d	; 61
    da10:	de b7       	in	r29, 0x3e	; 62
    da12:	66 97       	sbiw	r28, 0x16	; 22
    da14:	0f b6       	in	r0, 0x3f	; 63
    da16:	f8 94       	cli
    da18:	de bf       	out	0x3e, r29	; 62
    da1a:	0f be       	out	0x3f, r0	; 63
    da1c:	cd bf       	out	0x3d, r28	; 61
    da1e:	08 2f       	mov	r16, r24
    da20:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1453
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
    da22:	70 e0       	ldi	r23, 0x00	; 0
    da24:	60 e0       	ldi	r22, 0x00	; 0
    da26:	86 e6       	ldi	r24, 0x66	; 102
    da28:	90 e0       	ldi	r25, 0x00	; 0
    da2a:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
tds_get_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:114
}
//// funkce ziska periodu mereni
int tds_get_period(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    da2e:	be 01       	movw	r22, r28
    da30:	6f 5f       	subi	r22, 0xFF	; 255
    da32:	7f 4f       	sbci	r23, 0xFF	; 255
    da34:	8f 2d       	mov	r24, r15
    da36:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:115
  return tds.period;
    da3a:	6d 89       	ldd	r22, Y+21	; 0x15
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    da3c:	85 e1       	ldi	r24, 0x15	; 21
    da3e:	08 9f       	mul	r16, r24
    da40:	80 01       	movw	r16, r0
    da42:	11 24       	eor	r1, r1
    da44:	05 56       	subi	r16, 0x65	; 101
    da46:	16 4f       	sbci	r17, 0xF6	; 246
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1454

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable((float)tds_get_period(args2), 1, 255, 1, args2, NUMBER_TYPE_INT , H_FALSE, args1, &menu_tds_save_period);
    da48:	70 e0       	ldi	r23, 0x00	; 0
    da4a:	90 e0       	ldi	r25, 0x00	; 0
    da4c:	80 e0       	ldi	r24, 0x00	; 0
    da4e:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
    da52:	f8 01       	movw	r30, r16
    da54:	60 83       	st	Z, r22
    da56:	71 83       	std	Z+1, r23	; 0x01
    da58:	82 83       	std	Z+2, r24	; 0x02
    da5a:	93 83       	std	Z+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    da5c:	80 e0       	ldi	r24, 0x00	; 0
    da5e:	90 e0       	ldi	r25, 0x00	; 0
    da60:	a0 e8       	ldi	r26, 0x80	; 128
    da62:	bf e3       	ldi	r27, 0x3F	; 63
    da64:	80 87       	std	Z+8, r24	; 0x08
    da66:	91 87       	std	Z+9, r25	; 0x09
    da68:	a2 87       	std	Z+10, r26	; 0x0a
    da6a:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  menu_dialog_variable[idx].variable_max = max;
    da6c:	40 e0       	ldi	r20, 0x00	; 0
    da6e:	50 e0       	ldi	r21, 0x00	; 0
    da70:	6f e7       	ldi	r22, 0x7F	; 127
    da72:	73 e4       	ldi	r23, 0x43	; 67
    da74:	44 83       	std	Z+4, r20	; 0x04
    da76:	55 83       	std	Z+5, r21	; 0x05
    da78:	66 83       	std	Z+6, r22	; 0x06
    da7a:	77 83       	std	Z+7, r23	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  menu_dialog_variable[idx].variable_step = step;
    da7c:	86 87       	std	Z+14, r24	; 0x0e
    da7e:	97 87       	std	Z+15, r25	; 0x0f
    da80:	a0 8b       	std	Z+16, r26	; 0x10
    da82:	b1 8b       	std	Z+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  menu_dialog_variable[idx].number_type = number_type;
    da84:	81 e0       	ldi	r24, 0x01	; 1
    da86:	85 87       	std	Z+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
  menu_dialog_variable[idx].args = args;
    da88:	f2 8a       	std	Z+18, r15	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1372
  menu_dialog_variable[idx].update_now = update_now;
    da8a:	14 86       	std	Z+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
  menu_dialog_variable[idx].save_function = save_function;
    da8c:	86 ee       	ldi	r24, 0xE6	; 230
    da8e:	9d e6       	ldi	r25, 0x6D	; 109
    da90:	94 8b       	std	Z+20, r25	; 0x14
    da92:	83 8b       	std	Z+19, r24	; 0x13
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1456
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable((float)tds_get_period(args2), 1, 255, 1, args2, NUMBER_TYPE_INT , H_FALSE, args1, &menu_tds_save_period);
  //dialog_save_variable_function = ;
}
    da94:	66 96       	adiw	r28, 0x16	; 22
    da96:	0f b6       	in	r0, 0x3f	; 63
    da98:	f8 94       	cli
    da9a:	de bf       	out	0x3e, r29	; 62
    da9c:	0f be       	out	0x3f, r0	; 63
    da9e:	cd bf       	out	0x3d, r28	; 61
    daa0:	df 91       	pop	r29
    daa2:	cf 91       	pop	r28
    daa4:	1f 91       	pop	r17
    daa6:	0f 91       	pop	r16
    daa8:	ff 90       	pop	r15
    daaa:	08 95       	ret

0000daac <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1444
   args2 ... je dynamicky parametr nastaveni menu

*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
    daac:	ff 92       	push	r15
    daae:	0f 93       	push	r16
    dab0:	1f 93       	push	r17
    dab2:	cf 93       	push	r28
    dab4:	df 93       	push	r29
    dab6:	cd b7       	in	r28, 0x3d	; 61
    dab8:	de b7       	in	r29, 0x3e	; 62
    daba:	66 97       	sbiw	r28, 0x16	; 22
    dabc:	0f b6       	in	r0, 0x3f	; 63
    dabe:	f8 94       	cli
    dac0:	de bf       	out	0x3e, r29	; 62
    dac2:	0f be       	out	0x3f, r0	; 63
    dac4:	cd bf       	out	0x3d, r28	; 61
    dac6:	08 2f       	mov	r16, r24
    dac8:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1445
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
    daca:	70 e0       	ldi	r23, 0x00	; 0
    dacc:	60 e0       	ldi	r22, 0x00	; 0
    dace:	86 e6       	ldi	r24, 0x66	; 102
    dad0:	90 e0       	ldi	r25, 0x00	; 0
    dad2:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
tds_get_offset():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:98
}
//// funkce ziska offset cidlu tds
int tds_get_offset(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    dad6:	be 01       	movw	r22, r28
    dad8:	6f 5f       	subi	r22, 0xFF	; 255
    dada:	7f 4f       	sbci	r23, 0xFF	; 255
    dadc:	8f 2d       	mov	r24, r15
    dade:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:99
  return tds.offset;
    dae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    dae4:	7c 85       	ldd	r23, Y+12	; 0x0c
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    dae6:	85 e1       	ldi	r24, 0x15	; 21
    dae8:	08 9f       	mul	r16, r24
    daea:	80 01       	movw	r16, r0
    daec:	11 24       	eor	r1, r1
    daee:	05 56       	subi	r16, 0x65	; 101
    daf0:	16 4f       	sbci	r17, 0xF6	; 246
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1446
*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable(tds_get_offset(args2) / 1000.0, -10, 10, 0.1, args2, NUMBER_TYPE_FLOAT, H_FALSE, args1, &menu_tds_save_offset);
    daf2:	07 2e       	mov	r0, r23
    daf4:	00 0c       	add	r0, r0
    daf6:	88 0b       	sbc	r24, r24
    daf8:	99 0b       	sbc	r25, r25
    dafa:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
    dafe:	20 e0       	ldi	r18, 0x00	; 0
    db00:	30 e0       	ldi	r19, 0x00	; 0
    db02:	4a e7       	ldi	r20, 0x7A	; 122
    db04:	54 e4       	ldi	r21, 0x44	; 68
    db06:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    db0a:	f8 01       	movw	r30, r16
    db0c:	60 83       	st	Z, r22
    db0e:	71 83       	std	Z+1, r23	; 0x01
    db10:	82 83       	std	Z+2, r24	; 0x02
    db12:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  menu_dialog_variable[idx].variable_min = min;
    db14:	80 e0       	ldi	r24, 0x00	; 0
    db16:	90 e0       	ldi	r25, 0x00	; 0
    db18:	a0 e2       	ldi	r26, 0x20	; 32
    db1a:	b1 ec       	ldi	r27, 0xC1	; 193
    db1c:	80 87       	std	Z+8, r24	; 0x08
    db1e:	91 87       	std	Z+9, r25	; 0x09
    db20:	a2 87       	std	Z+10, r26	; 0x0a
    db22:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  menu_dialog_variable[idx].variable_max = max;
    db24:	80 e0       	ldi	r24, 0x00	; 0
    db26:	90 e0       	ldi	r25, 0x00	; 0
    db28:	a0 e2       	ldi	r26, 0x20	; 32
    db2a:	b1 e4       	ldi	r27, 0x41	; 65
    db2c:	84 83       	std	Z+4, r24	; 0x04
    db2e:	95 83       	std	Z+5, r25	; 0x05
    db30:	a6 83       	std	Z+6, r26	; 0x06
    db32:	b7 83       	std	Z+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  menu_dialog_variable[idx].variable_step = step;
    db34:	8d ec       	ldi	r24, 0xCD	; 205
    db36:	9c ec       	ldi	r25, 0xCC	; 204
    db38:	ac ec       	ldi	r26, 0xCC	; 204
    db3a:	bd e3       	ldi	r27, 0x3D	; 61
    db3c:	86 87       	std	Z+14, r24	; 0x0e
    db3e:	97 87       	std	Z+15, r25	; 0x0f
    db40:	a0 8b       	std	Z+16, r26	; 0x10
    db42:	b1 8b       	std	Z+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  menu_dialog_variable[idx].number_type = number_type;
    db44:	15 86       	std	Z+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
  menu_dialog_variable[idx].args = args;
    db46:	f2 8a       	std	Z+18, r15	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1372
  menu_dialog_variable[idx].update_now = update_now;
    db48:	14 86       	std	Z+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
  menu_dialog_variable[idx].save_function = save_function;
    db4a:	8c e1       	ldi	r24, 0x1C	; 28
    db4c:	9e e6       	ldi	r25, 0x6E	; 110
    db4e:	94 8b       	std	Z+20, r25	; 0x14
    db50:	83 8b       	std	Z+19, r24	; 0x13
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1448
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable(tds_get_offset(args2) / 1000.0, -10, 10, 0.1, args2, NUMBER_TYPE_FLOAT, H_FALSE, args1, &menu_tds_save_offset);
  //dialog_save_variable_function = ;
}
    db52:	66 96       	adiw	r28, 0x16	; 22
    db54:	0f b6       	in	r0, 0x3f	; 63
    db56:	f8 94       	cli
    db58:	de bf       	out	0x3e, r29	; 62
    db5a:	0f be       	out	0x3f, r0	; 63
    db5c:	cd bf       	out	0x3d, r28	; 61
    db5e:	df 91       	pop	r29
    db60:	cf 91       	pop	r28
    db62:	1f 91       	pop	r17
    db64:	0f 91       	pop	r16
    db66:	ff 90       	pop	r15
    db68:	08 95       	ret

0000db6a <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>:
_Z18menu_tds_save_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1427
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable_float(args1));
}
/////
void menu_tds_save_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    db6a:	1f 93       	push	r17
    db6c:	cf 93       	push	r28
    db6e:	df 93       	push	r29
    db70:	cd b7       	in	r28, 0x3d	; 61
    db72:	de b7       	in	r29, 0x3e	; 62
    db74:	a0 97       	sbiw	r28, 0x20	; 32
    db76:	0f b6       	in	r0, 0x3f	; 63
    db78:	f8 94       	cli
    db7a:	de bf       	out	0x3e, r29	; 62
    db7c:	0f be       	out	0x3f, r0	; 63
    db7e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1429
  char name[10];
  display_element_get_string(name);
    db80:	ce 01       	movw	r24, r28
    db82:	47 96       	adiw	r24, 0x17	; 23
    db84:	0e 94 2c 4b 	call	0x9658	; 0x9658 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1430
  if (strlen(name) > 0)
    db88:	8f 89       	ldd	r24, Y+23	; 0x17
    db8a:	88 23       	and	r24, r24
    db8c:	a9 f0       	breq	.+42     	; 0xdbb8 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x4e>
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1387
  dialog_save_valid_function = valid_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    db8e:	10 91 f3 09 	lds	r17, 0x09F3	; 0x8009f3 <dialog_set_string_args>
tds_set_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    db92:	be 01       	movw	r22, r28
    db94:	6f 5f       	subi	r22, 0xFF	; 255
    db96:	7f 4f       	sbci	r23, 0xFF	; 255
    db98:	81 2f       	mov	r24, r17
    db9a:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    db9e:	be 01       	movw	r22, r28
    dba0:	69 5e       	subi	r22, 0xE9	; 233
    dba2:	7f 4f       	sbci	r23, 0xFF	; 255
    dba4:	ce 01       	movw	r24, r28
    dba6:	0d 96       	adiw	r24, 0x0d	; 13
    dba8:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    dbac:	be 01       	movw	r22, r28
    dbae:	6f 5f       	subi	r22, 0xFF	; 255
    dbb0:	7f 4f       	sbci	r23, 0xFF	; 255
    dbb2:	81 2f       	mov	r24, r17
    dbb4:	0e 94 b3 63 	call	0xc766	; 0xc766 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z18menu_tds_save_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1432
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    tds_set_name(display_element_get_string_args(), name);
}
    dbb8:	a0 96       	adiw	r28, 0x20	; 32
    dbba:	0f b6       	in	r0, 0x3f	; 63
    dbbc:	f8 94       	cli
    dbbe:	de bf       	out	0x3e, r29	; 62
    dbc0:	0f be       	out	0x3f, r0	; 63
    dbc2:	cd bf       	out	0x3d, r28	; 61
    dbc4:	df 91       	pop	r29
    dbc6:	cf 91       	pop	r28
    dbc8:	1f 91       	pop	r17
    dbca:	08 95       	ret

0000dbcc <menu_tds_save_period(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1422
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
    dbcc:	ff 92       	push	r15
    dbce:	0f 93       	push	r16
    dbd0:	1f 93       	push	r17
    dbd2:	cf 93       	push	r28
    dbd4:	df 93       	push	r29
    dbd6:	cd b7       	in	r28, 0x3d	; 61
    dbd8:	de b7       	in	r29, 0x3e	; 62
    dbda:	66 97       	sbiw	r28, 0x16	; 22
    dbdc:	0f b6       	in	r0, 0x3f	; 63
    dbde:	f8 94       	cli
    dbe0:	de bf       	out	0x3e, r29	; 62
    dbe2:	0f be       	out	0x3f, r0	; 63
    dbe4:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable_float():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1332
  return menu_dialog_variable[idx].args;
}

float display_function_get_variable_float(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    dbe6:	95 e1       	ldi	r25, 0x15	; 21
    dbe8:	89 9f       	mul	r24, r25
    dbea:	80 01       	movw	r16, r0
    dbec:	11 24       	eor	r1, r1
    dbee:	05 56       	subi	r16, 0x65	; 101
    dbf0:	16 4f       	sbci	r17, 0xF6	; 246
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1423
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable_float(args1));
    dbf2:	f8 01       	movw	r30, r16
    dbf4:	60 81       	ld	r22, Z
    dbf6:	71 81       	ldd	r23, Z+1	; 0x01
    dbf8:	82 81       	ldd	r24, Z+2	; 0x02
    dbfa:	93 81       	ldd	r25, Z+3	; 0x03
    dbfc:	0e 94 a6 f0 	call	0x1e14c	; 0x1e14c <__fixunssfsi>
    dc00:	f6 2e       	mov	r15, r22
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1327
   kdyz je vice techto dialogu v jednom nenu
*/

uint8_t display_function_get_variable_args(uint8_t idx)
{
  return menu_dialog_variable[idx].args;
    dc02:	f8 01       	movw	r30, r16
    dc04:	12 89       	ldd	r17, Z+18	; 0x12
tds_set_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    dc06:	be 01       	movw	r22, r28
    dc08:	6f 5f       	subi	r22, 0xFF	; 255
    dc0a:	7f 4f       	sbci	r23, 0xFF	; 255
    dc0c:	81 2f       	mov	r24, r17
    dc0e:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:107
  tds.period = period;
    dc12:	fd 8a       	std	Y+21, r15	; 0x15
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:108
  set_tds18s20(idx, &tds);
    dc14:	be 01       	movw	r22, r28
    dc16:	6f 5f       	subi	r22, 0xFF	; 255
    dc18:	7f 4f       	sbci	r23, 0xFF	; 255
    dc1a:	81 2f       	mov	r24, r17
    dc1c:	0e 94 b3 63 	call	0xc766	; 0xc766 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1424
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable_float(args1));
}
    dc20:	66 96       	adiw	r28, 0x16	; 22
    dc22:	0f b6       	in	r0, 0x3f	; 63
    dc24:	f8 94       	cli
    dc26:	de bf       	out	0x3e, r29	; 62
    dc28:	0f be       	out	0x3f, r0	; 63
    dc2a:	cd bf       	out	0x3d, r28	; 61
    dc2c:	df 91       	pop	r29
    dc2e:	cf 91       	pop	r28
    dc30:	1f 91       	pop	r17
    dc32:	0f 91       	pop	r16
    dc34:	ff 90       	pop	r15
    dc36:	08 95       	ret

0000dc38 <menu_tds_save_offset(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1417
/////
/*
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
    dc38:	cf 92       	push	r12
    dc3a:	df 92       	push	r13
    dc3c:	ef 92       	push	r14
    dc3e:	ff 92       	push	r15
    dc40:	0f 93       	push	r16
    dc42:	1f 93       	push	r17
    dc44:	cf 93       	push	r28
    dc46:	df 93       	push	r29
    dc48:	cd b7       	in	r28, 0x3d	; 61
    dc4a:	de b7       	in	r29, 0x3e	; 62
    dc4c:	66 97       	sbiw	r28, 0x16	; 22
    dc4e:	0f b6       	in	r0, 0x3f	; 63
    dc50:	f8 94       	cli
    dc52:	de bf       	out	0x3e, r29	; 62
    dc54:	0f be       	out	0x3f, r0	; 63
    dc56:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable_float():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1332
  return menu_dialog_variable[idx].args;
}

float display_function_get_variable_float(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    dc58:	95 e1       	ldi	r25, 0x15	; 21
    dc5a:	89 9f       	mul	r24, r25
    dc5c:	80 01       	movw	r16, r0
    dc5e:	11 24       	eor	r1, r1
    dc60:	05 56       	subi	r16, 0x65	; 101
    dc62:	16 4f       	sbci	r17, 0xF6	; 246
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1418
/*
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
    dc64:	20 e0       	ldi	r18, 0x00	; 0
    dc66:	30 e0       	ldi	r19, 0x00	; 0
    dc68:	4a e7       	ldi	r20, 0x7A	; 122
    dc6a:	54 e4       	ldi	r21, 0x44	; 68
    dc6c:	f8 01       	movw	r30, r16
    dc6e:	60 81       	ld	r22, Z
    dc70:	71 81       	ldd	r23, Z+1	; 0x01
    dc72:	82 81       	ldd	r24, Z+2	; 0x02
    dc74:	93 81       	ldd	r25, Z+3	; 0x03
    dc76:	0e 94 59 ee 	call	0x1dcb2	; 0x1dcb2 <__mulsf3>
    dc7a:	0e 94 9f f0 	call	0x1e13e	; 0x1e13e <__fixsfsi>
    dc7e:	6b 01       	movw	r12, r22
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1327
   kdyz je vice techto dialogu v jednom nenu
*/

uint8_t display_function_get_variable_args(uint8_t idx)
{
  return menu_dialog_variable[idx].args;
    dc80:	f8 01       	movw	r30, r16
    dc82:	12 89       	ldd	r17, Z+18	; 0x12
tds_set_offset():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    dc84:	be 01       	movw	r22, r28
    dc86:	6f 5f       	subi	r22, 0xFF	; 255
    dc88:	7f 4f       	sbci	r23, 0xFF	; 255
    dc8a:	81 2f       	mov	r24, r17
    dc8c:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    dc90:	dc 86       	std	Y+12, r13	; 0x0c
    dc92:	cb 86       	std	Y+11, r12	; 0x0b
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    dc94:	be 01       	movw	r22, r28
    dc96:	6f 5f       	subi	r22, 0xFF	; 255
    dc98:	7f 4f       	sbci	r23, 0xFF	; 255
    dc9a:	81 2f       	mov	r24, r17
    dc9c:	0e 94 b3 63 	call	0xc766	; 0xc766 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1419
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
}
    dca0:	66 96       	adiw	r28, 0x16	; 22
    dca2:	0f b6       	in	r0, 0x3f	; 63
    dca4:	f8 94       	cli
    dca6:	de bf       	out	0x3e, r29	; 62
    dca8:	0f be       	out	0x3f, r0	; 63
    dcaa:	cd bf       	out	0x3d, r28	; 61
    dcac:	df 91       	pop	r29
    dcae:	cf 91       	pop	r28
    dcb0:	1f 91       	pop	r17
    dcb2:	0f 91       	pop	r16
    dcb4:	ff 90       	pop	r15
    dcb6:	ef 90       	pop	r14
    dcb8:	df 90       	pop	r13
    dcba:	cf 90       	pop	r12
    dcbc:	08 95       	ret

0000dcbe <button_click_set_time_offset(unsigned int, unsigned int, unsigned char)>:
_Z28button_click_set_time_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5825
////////////////////////////////////////////////////////////////////////////////
/*
   Obsluha tlacitka casovy offset
*/
void button_click_set_time_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
    dcbe:	cf 93       	push	r28
    dcc0:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5826
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
    dcc2:	70 e0       	ldi	r23, 0x00	; 0
    dcc4:	60 e0       	ldi	r22, 0x00	; 0
    dcc6:	86 e6       	ldi	r24, 0x66	; 102
    dcc8:	90 e0       	ldi	r25, 0x00	; 0
    dcca:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3198
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    dcce:	81 e0       	ldi	r24, 0x01	; 1
    dcd0:	90 e0       	ldi	r25, 0x00	; 0
    dcd2:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    dcd6:	cb e9       	ldi	r28, 0x9B	; 155
    dcd8:	d9 e0       	ldi	r29, 0x09	; 9
_Z28button_click_set_time_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5827
   Obsluha tlacitka casovy offset
*/
void button_click_set_time_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable(time_get_offset(), -12, 12, 1, 0, NUMBER_TYPE_INT, H_FALSE, 0, &helper_set_menu_time_offset);
    dcda:	68 2f       	mov	r22, r24
    dcdc:	88 0f       	add	r24, r24
    dcde:	77 0b       	sbc	r23, r23
    dce0:	88 0b       	sbc	r24, r24
    dce2:	99 0b       	sbc	r25, r25
    dce4:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
    dce8:	68 83       	st	Y, r22
    dcea:	79 83       	std	Y+1, r23	; 0x01
    dcec:	8a 83       	std	Y+2, r24	; 0x02
    dcee:	9b 83       	std	Y+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    dcf0:	80 e0       	ldi	r24, 0x00	; 0
    dcf2:	90 e0       	ldi	r25, 0x00	; 0
    dcf4:	a0 e4       	ldi	r26, 0x40	; 64
    dcf6:	b1 ec       	ldi	r27, 0xC1	; 193
    dcf8:	88 87       	std	Y+8, r24	; 0x08
    dcfa:	99 87       	std	Y+9, r25	; 0x09
    dcfc:	aa 87       	std	Y+10, r26	; 0x0a
    dcfe:	bb 87       	std	Y+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  menu_dialog_variable[idx].variable_max = max;
    dd00:	80 e0       	ldi	r24, 0x00	; 0
    dd02:	90 e0       	ldi	r25, 0x00	; 0
    dd04:	a0 e4       	ldi	r26, 0x40	; 64
    dd06:	b1 e4       	ldi	r27, 0x41	; 65
    dd08:	8c 83       	std	Y+4, r24	; 0x04
    dd0a:	9d 83       	std	Y+5, r25	; 0x05
    dd0c:	ae 83       	std	Y+6, r26	; 0x06
    dd0e:	bf 83       	std	Y+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  menu_dialog_variable[idx].variable_step = step;
    dd10:	80 e0       	ldi	r24, 0x00	; 0
    dd12:	90 e0       	ldi	r25, 0x00	; 0
    dd14:	a0 e8       	ldi	r26, 0x80	; 128
    dd16:	bf e3       	ldi	r27, 0x3F	; 63
    dd18:	8e 87       	std	Y+14, r24	; 0x0e
    dd1a:	9f 87       	std	Y+15, r25	; 0x0f
    dd1c:	a8 8b       	std	Y+16, r26	; 0x10
    dd1e:	b9 8b       	std	Y+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  menu_dialog_variable[idx].number_type = number_type;
    dd20:	81 e0       	ldi	r24, 0x01	; 1
    dd22:	8d 87       	std	Y+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
  menu_dialog_variable[idx].args = args;
    dd24:	1a 8a       	std	Y+18, r1	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1372
  menu_dialog_variable[idx].update_now = update_now;
    dd26:	1c 86       	std	Y+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
  menu_dialog_variable[idx].save_function = save_function;
    dd28:	8a e9       	ldi	r24, 0x9A	; 154
    dd2a:	95 e6       	ldi	r25, 0x65	; 101
    dd2c:	9c 8b       	std	Y+20, r25	; 0x14
    dd2e:	8b 8b       	std	Y+19, r24	; 0x13
_Z28button_click_set_time_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5828
*/
void button_click_set_time_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable(time_get_offset(), -12, 12, 1, 0, NUMBER_TYPE_INT, H_FALSE, 0, &helper_set_menu_time_offset);
}
    dd30:	df 91       	pop	r29
    dd32:	cf 91       	pop	r28
    dd34:	08 95       	ret

0000dd36 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>:
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5780
/*

   Obsluha tlacitka synchronizace NTP casu
*/
void button_click_ntp_sync_time(uint16_t args1, uint16_t args2, uint8_t args3)
{
    dd36:	0f 93       	push	r16
    dd38:	1f 93       	push	r17
    dd3a:	cf 93       	push	r28
    dd3c:	df 93       	push	r29
    dd3e:	cd b7       	in	r28, 0x3d	; 61
    dd40:	de b7       	in	r29, 0x3e	; 62
    dd42:	c4 55       	subi	r28, 0x54	; 84
    dd44:	d1 09       	sbc	r29, r1
    dd46:	0f b6       	in	r0, 0x3f	; 63
    dd48:	f8 94       	cli
    dd4a:	de bf       	out	0x3e, r29	; 62
    dd4c:	0f be       	out	0x3f, r0	; 63
    dd4e:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    dd50:	1b 82       	std	Y+3, r1	; 0x03
    dd52:	86 ed       	ldi	r24, 0xD6	; 214
    dd54:	93 e0       	ldi	r25, 0x03	; 3
    dd56:	9d 83       	std	Y+5, r25	; 0x05
    dd58:	8c 83       	std	Y+4, r24	; 0x04
    dd5a:	89 e3       	ldi	r24, 0x39	; 57
    dd5c:	95 e0       	ldi	r25, 0x05	; 5
    dd5e:	9f 83       	std	Y+7, r25	; 0x07
    dd60:	8e 83       	std	Y+6, r24	; 0x06
    dd62:	18 86       	std	Y+8, r1	; 0x08
    dd64:	19 86       	std	Y+9, r1	; 0x09
    dd66:	1a 86       	std	Y+10, r1	; 0x0a
    dd68:	1b 86       	std	Y+11, r1	; 0x0b
    dd6a:	80 e6       	ldi	r24, 0x60	; 96
    dd6c:	9a ee       	ldi	r25, 0xEA	; 234
    dd6e:	a0 e0       	ldi	r26, 0x00	; 0
    dd70:	b0 e0       	ldi	r27, 0x00	; 0
    dd72:	8c 87       	std	Y+12, r24	; 0x0c
    dd74:	9d 87       	std	Y+13, r25	; 0x0d
    dd76:	ae 87       	std	Y+14, r26	; 0x0e
    dd78:	bf 87       	std	Y+15, r27	; 0x0f
    dd7a:	18 8a       	std	Y+16, r1	; 0x10
    dd7c:	19 8a       	std	Y+17, r1	; 0x11
    dd7e:	1a 8a       	std	Y+18, r1	; 0x12
    dd80:	1b 8a       	std	Y+19, r1	; 0x13
    dd82:	1c 8a       	std	Y+20, r1	; 0x14
    dd84:	1d 8a       	std	Y+21, r1	; 0x15
    dd86:	1e 8a       	std	Y+22, r1	; 0x16
    dd88:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    dd8a:	8c e4       	ldi	r24, 0x4C	; 76
    dd8c:	92 e1       	ldi	r25, 0x12	; 18
    dd8e:	9a 83       	std	Y+2, r25	; 0x02
    dd90:	89 83       	std	Y+1, r24	; 0x01
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5783
  char str2[6];
  NTPClient timeClient(udpClient);
  DateTime ted;
    dd92:	ce 01       	movw	r24, r28
    dd94:	88 5b       	subi	r24, 0xB8	; 184
    dd96:	9f 4f       	sbci	r25, 0xFF	; 255
    dd98:	0e 94 76 b4 	call	0x168ec	; 0x168ec <DateTime::DateTime(unsigned long) [clone .constprop.146]>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3198
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    dd9c:	81 e0       	ldi	r24, 0x01	; 1
    dd9e:	90 e0       	ldi	r25, 0x00	; 0
    dda0:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5784
void button_click_ntp_sync_time(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char str2[6];
  NTPClient timeClient(udpClient);
  DateTime ted;
  if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
    dda4:	ae 01       	movw	r20, r28
    dda6:	48 5b       	subi	r20, 0xB8	; 184
    dda8:	5f 4f       	sbci	r21, 0xFF	; 255
    ddaa:	68 2f       	mov	r22, r24
    ddac:	ce 01       	movw	r24, r28
    ddae:	01 96       	adiw	r24, 0x01	; 1
    ddb0:	0e 94 92 b3 	call	0x16724	; 0x16724 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]>
    ddb4:	81 30       	cpi	r24, 0x01	; 1
    ddb6:	09 f0       	breq	.+2      	; 0xddba <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x84>
    ddb8:	42 c0       	rjmp	.+132    	; 0xde3e <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x108>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3141
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    ddba:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
    ddbe:	8d 7f       	andi	r24, 0xFD	; 253
    ddc0:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <selftest_data>
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5787
  NTPClient timeClient(udpClient);
  DateTime ted;
  if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
  {
    selftest_clear_0(SELFTEST_ERR_NTP);
    MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    ddc4:	70 e0       	ldi	r23, 0x00	; 0
    ddc6:	60 e0       	ldi	r22, 0x00	; 0
    ddc8:	88 e6       	ldi	r24, 0x68	; 104
    ddca:	90 e0       	ldi	r25, 0x00	; 0
    ddcc:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5788
    sprintf(str2, "%02d:%02d", ted.hour(), ted.minute());
    ddd0:	2d 96       	adiw	r28, 0x0d	; 13
    ddd2:	8f ad       	ldd	r24, Y+63	; 0x3f
    ddd4:	2d 97       	sbiw	r28, 0x0d	; 13
    ddd6:	1f 92       	push	r1
    ddd8:	8f 93       	push	r24
    ddda:	2c 96       	adiw	r28, 0x0c	; 12
    dddc:	8f ad       	ldd	r24, Y+63	; 0x3f
    ddde:	2c 97       	sbiw	r28, 0x0c	; 12
    dde0:	1f 92       	push	r1
    dde2:	8f 93       	push	r24
    dde4:	8f e7       	ldi	r24, 0x7F	; 127
    dde6:	93 e0       	ldi	r25, 0x03	; 3
    dde8:	9f 93       	push	r25
    ddea:	8f 93       	push	r24
    ddec:	8e 01       	movw	r16, r28
    ddee:	01 5b       	subi	r16, 0xB1	; 177
    ddf0:	1f 4f       	sbci	r17, 0xFF	; 255
    ddf2:	1f 93       	push	r17
    ddf4:	0f 93       	push	r16
    ddf6:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5789
    strcpy_P(dialog_text, new_text_ok_ntp_time);
    ddfa:	6f e1       	ldi	r22, 0x1F	; 31
    ddfc:	73 e7       	ldi	r23, 0x73	; 115
    ddfe:	85 e1       	ldi	r24, 0x15	; 21
    de00:	9a e0       	ldi	r25, 0x0A	; 10
    de02:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5790
    strcat(dialog_text, " ");
    de06:	60 e7       	ldi	r22, 0x70	; 112
    de08:	76 e0       	ldi	r23, 0x06	; 6
    de0a:	85 e1       	ldi	r24, 0x15	; 21
    de0c:	9a e0       	ldi	r25, 0x0A	; 10
    de0e:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5791
    strcat(dialog_text, str2);
    de12:	b8 01       	movw	r22, r16
    de14:	85 e1       	ldi	r24, 0x15	; 21
    de16:	9a e0       	ldi	r25, 0x0A	; 10
    de18:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
    de1c:	0f b6       	in	r0, 0x3f	; 63
    de1e:	f8 94       	cli
    de20:	de bf       	out	0x3e, r29	; 62
    de22:	0f be       	out	0x3f, r0	; 63
    de24:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5799
  {
    selftest_set_0(SELFTEST_ERR_NTP);
    MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    strcpy_P(dialog_text, new_text_error_ntp_time);
  }
}
    de26:	cc 5a       	subi	r28, 0xAC	; 172
    de28:	df 4f       	sbci	r29, 0xFF	; 255
    de2a:	0f b6       	in	r0, 0x3f	; 63
    de2c:	f8 94       	cli
    de2e:	de bf       	out	0x3e, r29	; 62
    de30:	0f be       	out	0x3f, r0	; 63
    de32:	cd bf       	out	0x3d, r28	; 61
    de34:	df 91       	pop	r29
    de36:	cf 91       	pop	r28
    de38:	1f 91       	pop	r17
    de3a:	0f 91       	pop	r16
    de3c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5795
    strcat(dialog_text, " ");
    strcat(dialog_text, str2);
  }
  else
  {
    selftest_set_0(SELFTEST_ERR_NTP);
    de3e:	81 e0       	ldi	r24, 0x01	; 1
    de40:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5796
    MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    de44:	70 e0       	ldi	r23, 0x00	; 0
    de46:	60 e0       	ldi	r22, 0x00	; 0
    de48:	88 e6       	ldi	r24, 0x68	; 104
    de4a:	90 e0       	ldi	r25, 0x00	; 0
    de4c:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5797
    strcpy_P(dialog_text, new_text_error_ntp_time);
    de50:	69 e0       	ldi	r22, 0x09	; 9
    de52:	73 e7       	ldi	r23, 0x73	; 115
    de54:	85 e1       	ldi	r24, 0x15	; 21
    de56:	9a e0       	ldi	r25, 0x0A	; 10
    de58:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
    de5c:	e4 cf       	rjmp	.-56     	; 0xde26 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0xf0>

0000de5e <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1810
    }
}
///
/// je aktivni
void remote_tds_get_active(uint8_t idx, uint8_t *active)
{
    de5e:	cf 93       	push	r28
    de60:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1811
  if (idx < MAX_RTDS)
    de62:	8a 30       	cpi	r24, 0x0A	; 10
    de64:	68 f4       	brcc	.+26     	; 0xde80 <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    de66:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1813
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    de68:	24 e1       	ldi	r18, 0x14	; 20
    de6a:	82 9f       	mul	r24, r18
    de6c:	c0 01       	movw	r24, r0
    de6e:	11 24       	eor	r1, r1
    de70:	83 54       	subi	r24, 0x43	; 67
    de72:	9a 4f       	sbci	r25, 0xFA	; 250
    de74:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    de78:	88 83       	st	Y, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1817
  }
  else
    *active = 255;
}
    de7a:	df 91       	pop	r29
    de7c:	cf 91       	pop	r28
    de7e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1816
  if (idx < MAX_RTDS)
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
    *active = 255;
    de80:	8f ef       	ldi	r24, 0xFF	; 255
    de82:	fb 01       	movw	r30, r22
    de84:	80 83       	st	Z, r24
    de86:	f9 cf       	rjmp	.-14     	; 0xde7a <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

0000de88 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>:
_Z25click_rtds_setting_sensorjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4747
    args1 - parametr z globalniho nastaveni tlacitek
    args2 / definice menu
    loop_idx - polozka z menu
*/
void click_rtds_setting_sensor(uint16_t args1, uint16_t args2, uint8_t loop_idx)
{
    de88:	1f 93       	push	r17
    de8a:	cf 93       	push	r28
    de8c:	df 93       	push	r29
    de8e:	1f 92       	push	r1
    de90:	cd b7       	in	r28, 0x3d	; 61
    de92:	de b7       	in	r29, 0x3e	; 62
    de94:	14 2f       	mov	r17, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4752
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  //printf("pr %d %d %d\n", args1, args2, loop_idx);

  remote_tds_get_active(loop_idx, &active);
    de96:	be 01       	movw	r22, r28
    de98:	6f 5f       	subi	r22, 0xFF	; 255
    de9a:	7f 4f       	sbci	r23, 0xFF	; 255
    de9c:	84 2f       	mov	r24, r20
    de9e:	0e 94 2f 6f 	call	0xde5e	; 0xde5e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4753
  if (active == 1)
    dea2:	89 81       	ldd	r24, Y+1	; 0x01
    dea4:	81 30       	cpi	r24, 0x01	; 1
    dea6:	31 f4       	brne	.+12     	; 0xdeb4 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4755
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_RTDS_DETAIL, loop_idx, 0);
    dea8:	61 2f       	mov	r22, r17
    deaa:	70 e0       	ldi	r23, 0x00	; 0
    deac:	87 e0       	ldi	r24, 0x07	; 7
    deae:	90 e0       	ldi	r25, 0x00	; 0
    deb0:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4757
  }
}
    deb4:	0f 90       	pop	r0
    deb6:	df 91       	pop	r29
    deb8:	cf 91       	pop	r28
    deba:	1f 91       	pop	r17
    debc:	08 95       	ret

0000debe <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1875
  }
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
    debe:	1f 93       	push	r17
    dec0:	cf 93       	push	r28
    dec2:	df 93       	push	r29
    dec4:	1f 92       	push	r1
    dec6:	cd b7       	in	r28, 0x3d	; 61
    dec8:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1878
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    deca:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1880
  {
    remote_tds_get_active(idx, &active);
    decc:	be 01       	movw	r22, r28
    dece:	6f 5f       	subi	r22, 0xFF	; 255
    ded0:	7f 4f       	sbci	r23, 0xFF	; 255
    ded2:	81 2f       	mov	r24, r17
    ded4:	0e 94 2f 6f 	call	0xde5e	; 0xde5e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1881
    if (active == 0)
    ded8:	89 81       	ldd	r24, Y+1	; 0x01
    deda:	88 23       	and	r24, r24
    dedc:	21 f0       	breq	.+8      	; 0xdee6 <remote_tds_find_free()+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1878
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    dede:	1f 5f       	subi	r17, 0xFF	; 255
    dee0:	1a 30       	cpi	r17, 0x0A	; 10
    dee2:	a1 f7       	brne	.-24     	; 0xdecc <remote_tds_find_free()+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1876
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
    dee4:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1888
      ret = idx;
      break;
    }
  }
  return ret;
}
    dee6:	81 2f       	mov	r24, r17
    dee8:	0f 90       	pop	r0
    deea:	df 91       	pop	r29
    deec:	cf 91       	pop	r28
    deee:	1f 91       	pop	r17
    def0:	08 95       	ret

0000def2 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>:
_Z21click_rtds_add_sensorjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4701
  }
  return cnt;
}

void click_rtds_add_sensor(uint16_t args1, uint16_t args2, uint8_t args3)
{
    def2:	1f 93       	push	r17
    def4:	cf 93       	push	r28
    def6:	df 93       	push	r29
    def8:	00 d0       	rcall	.+0      	; 0xdefa <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x8>
    defa:	1f 92       	push	r1
    defc:	1f 92       	push	r1
    defe:	cd b7       	in	r28, 0x3d	; 61
    df00:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4704
  char rtds_topic[5];
  uint8_t idx;
  idx = remote_tds_find_free();
    df02:	0e 94 5f 6f 	call	0xdebe	; 0xdebe <remote_tds_find_free()>
    df06:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4705
  if (idx != 255)
    df08:	8f 3f       	cpi	r24, 0xFF	; 255
    df0a:	21 f1       	breq	.+72     	; 0xdf54 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x62>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4707
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    df0c:	68 e5       	ldi	r22, 0x58	; 88
    df0e:	71 e7       	ldi	r23, 0x71	; 113
    df10:	ce 01       	movw	r24, r28
    df12:	01 96       	adiw	r24, 0x01	; 1
    df14:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4708
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    df18:	70 e0       	ldi	r23, 0x00	; 0
    df1a:	60 e0       	ldi	r22, 0x00	; 0
    df1c:	87 e6       	ldi	r24, 0x67	; 103
    df1e:	90 e0       	ldi	r25, 0x00	; 0
    df20:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    df24:	be 01       	movw	r22, r28
    df26:	6f 5f       	subi	r22, 0xFF	; 255
    df28:	7f 4f       	sbci	r23, 0xFF	; 255
    df2a:	85 ef       	ldi	r24, 0xF5	; 245
    df2c:	99 e0       	ldi	r25, 0x09	; 9
    df2e:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1379
  dialog_set_string_max_length = max_length;
    df32:	82 e1       	ldi	r24, 0x12	; 18
    df34:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1380
  dialog_set_string_args = idx;
    df38:	10 93 f3 09 	sts	0x09F3, r17	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1381
  dialog_save_string_function = save_function;
    df3c:	83 e8       	ldi	r24, 0x83	; 131
    df3e:	94 e7       	ldi	r25, 0x74	; 116
    df40:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    df44:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1382
  dialog_save_valid_function = valid_function;
    df48:	87 ea       	ldi	r24, 0xA7	; 167
    df4a:	96 e4       	ldi	r25, 0x46	; 70
    df4c:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    df50:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z21click_rtds_add_sensorjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4711
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx, &menu_rtds_create_name, &valid_true);
  }
}
    df54:	0f 90       	pop	r0
    df56:	0f 90       	pop	r0
    df58:	0f 90       	pop	r0
    df5a:	0f 90       	pop	r0
    df5c:	0f 90       	pop	r0
    df5e:	df 91       	pop	r29
    df60:	cf 91       	pop	r28
    df62:	1f 91       	pop	r17
    df64:	08 95       	ret

0000df66 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1771
  active - ukazatel na promenou active
  name - ukazatel na nazev topicu
*/
/// ziska nazev topicu
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
    df66:	af 92       	push	r10
    df68:	bf 92       	push	r11
    df6a:	cf 92       	push	r12
    df6c:	df 92       	push	r13
    df6e:	ef 92       	push	r14
    df70:	ff 92       	push	r15
    df72:	0f 93       	push	r16
    df74:	1f 93       	push	r17
    df76:	cf 93       	push	r28
    df78:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1773
  char t;
  if (idx < MAX_RTDS)
    df7a:	8a 30       	cpi	r24, 0x0A	; 10
    df7c:	88 f5       	brcc	.+98     	; 0xdfe0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    df7e:	7b 01       	movw	r14, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1777
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    {
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
    df80:	94 e1       	ldi	r25, 0x14	; 20
    df82:	89 9f       	mul	r24, r25
    df84:	e0 01       	movw	r28, r0
    df86:	11 24       	eor	r1, r1
    df88:	6e 01       	movw	r12, r28
    df8a:	e6 e5       	ldi	r30, 0x56	; 86
    df8c:	ce 1a       	sub	r12, r30
    df8e:	ea ef       	ldi	r30, 0xFA	; 250
    df90:	de 0a       	sbc	r13, r30
    df92:	8a 01       	movw	r16, r20
    df94:	5e 01       	movw	r10, r28
    df96:	f4 e4       	ldi	r31, 0x44	; 68
    df98:	af 1a       	sub	r10, r31
    df9a:	fa ef       	ldi	r31, 0xFA	; 250
    df9c:	bf 0a       	sbc	r11, r31
    df9e:	c6 01       	movw	r24, r12
    dfa0:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1778
      name[i] = t;
    dfa4:	f8 01       	movw	r30, r16
    dfa6:	81 93       	st	Z+, r24
    dfa8:	8f 01       	movw	r16, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1779
      name[i + 1] = 0;
    dfaa:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1780
      if (t == 0) break;
    dfac:	88 23       	and	r24, r24
    dfae:	31 f0       	breq	.+12     	; 0xdfbc <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    dfb0:	ff ef       	ldi	r31, 0xFF	; 255
    dfb2:	cf 1a       	sub	r12, r31
    dfb4:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1775
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
  char t;
  if (idx < MAX_RTDS)
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    dfb6:	ca 14       	cp	r12, r10
    dfb8:	db 04       	cpc	r13, r11
    dfba:	89 f7       	brne	.-30     	; 0xdf9e <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1782
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
      name[i] = t;
      name[i + 1] = 0;
      if (t == 0) break;
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    dfbc:	ce 01       	movw	r24, r28
    dfbe:	83 54       	subi	r24, 0x43	; 67
    dfc0:	9a 4f       	sbci	r25, 0xFA	; 250
    dfc2:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    dfc6:	f7 01       	movw	r30, r14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1786
  }
  else
  {
    *active = 255;
    dfc8:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1788
  }
}
    dfca:	df 91       	pop	r29
    dfcc:	cf 91       	pop	r28
    dfce:	1f 91       	pop	r17
    dfd0:	0f 91       	pop	r16
    dfd2:	ff 90       	pop	r15
    dfd4:	ef 90       	pop	r14
    dfd6:	df 90       	pop	r13
    dfd8:	cf 90       	pop	r12
    dfda:	bf 90       	pop	r11
    dfdc:	af 90       	pop	r10
    dfde:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1786
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
  {
    *active = 255;
    dfe0:	8f ef       	ldi	r24, 0xFF	; 255
    dfe2:	fb 01       	movw	r30, r22
    dfe4:	f1 cf       	rjmp	.-30     	; 0xdfc8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

0000dfe6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4817
/*
   v args2 je bud vylistovat vsechny a nebo pouze aktivni, pouze neaktivni
   v args1 je index poradi prvku grafickeho menu
*/
void button_get_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    dfe6:	7f 92       	push	r7
    dfe8:	8f 92       	push	r8
    dfea:	9f 92       	push	r9
    dfec:	af 92       	push	r10
    dfee:	bf 92       	push	r11
    dff0:	cf 92       	push	r12
    dff2:	df 92       	push	r13
    dff4:	ef 92       	push	r14
    dff6:	ff 92       	push	r15
    dff8:	0f 93       	push	r16
    dffa:	1f 93       	push	r17
    dffc:	cf 93       	push	r28
    dffe:	df 93       	push	r29
    e000:	cd b7       	in	r28, 0x3d	; 61
    e002:	de b7       	in	r29, 0x3e	; 62
    e004:	aa 97       	sbiw	r28, 0x2a	; 42
    e006:	0f b6       	in	r0, 0x3f	; 63
    e008:	f8 94       	cli
    e00a:	de bf       	out	0x3e, r29	; 62
    e00c:	0f be       	out	0x3f, r0	; 63
    e00e:	cd bf       	out	0x3d, r28	; 61
    e010:	78 2e       	mov	r7, r24
    e012:	e4 2e       	mov	r14, r20
    e014:	69 01       	movw	r12, r18
    e016:	58 01       	movw	r10, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4821
  char name[20];
  uint8_t cri = 0;
  uint8_t active;
  strcpy_P(line1, nastaveni_onewire);
    e018:	6f e6       	ldi	r22, 0x6F	; 111
    e01a:	71 e7       	ldi	r23, 0x71	; 113
    e01c:	c9 01       	movw	r24, r18
    e01e:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4822
  strcpy(line2, "");
    e022:	62 e0       	ldi	r22, 0x02	; 2
    e024:	73 e0       	ldi	r23, 0x03	; 3
    e026:	c8 01       	movw	r24, r16
    e028:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
    e02c:	88 ec       	ldi	r24, 0xC8	; 200
    e02e:	88 2e       	mov	r8, r24
    e030:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4825
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    e032:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4819
   v args1 je index poradi prvku grafickeho menu
*/
void button_get_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char name[20];
  uint8_t cri = 0;
    e034:	f1 2c       	mov	r15, r1
tds_used():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:29

uint8_t tds_used(uint8_t idx)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    return EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    e036:	c4 01       	movw	r24, r8
    e038:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4827
  strcpy(line2, "");
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
  {
    if (((tds_used(idx) == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE)) || args3 == INPUT_SENSOR_SHOW_ALL)
    e03c:	81 30       	cpi	r24, 0x01	; 1
    e03e:	11 f4       	brne	.+4      	; 0xe044 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x5e>
    e040:	ee 20       	and	r14, r14
    e042:	19 f0       	breq	.+6      	; 0xe04a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x64>
    e044:	81 e0       	ldi	r24, 0x01	; 1
    e046:	e8 12       	cpse	r14, r24
    e048:	2f c0       	rjmp	.+94     	; 0xe0a8 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4829
    {
      if (cri == args1)
    e04a:	7f 10       	cpse	r7, r15
    e04c:	2c c0       	rjmp	.+88     	; 0xe0a6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc0>
tds_get_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    e04e:	be 01       	movw	r22, r28
    e050:	6f 5f       	subi	r22, 0xFF	; 255
    e052:	7f 4f       	sbci	r23, 0xFF	; 255
    e054:	81 2f       	mov	r24, r17
    e056:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    e05a:	be 01       	movw	r22, r28
    e05c:	63 5f       	subi	r22, 0xF3	; 243
    e05e:	7f 4f       	sbci	r23, 0xFF	; 255
    e060:	ce 01       	movw	r24, r28
    e062:	47 96       	adiw	r24, 0x17	; 23
    e064:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4832
      {
        tds_get_name(idx, name);
        strcpy(line2, name);
    e068:	be 01       	movw	r22, r28
    e06a:	69 5e       	subi	r22, 0xE9	; 233
    e06c:	7f 4f       	sbci	r23, 0xFF	; 255
    e06e:	c5 01       	movw	r24, r10
    e070:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4833
        strcpy_P(line1, nastaveni_onewire);
    e074:	6f e6       	ldi	r22, 0x6F	; 111
    e076:	71 e7       	ldi	r23, 0x71	; 113
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4851
    {
      if (cri == args1)
      {
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
    e078:	c6 01       	movw	r24, r12
    e07a:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4860
    }
  }
button_get_show_default_temp_end:
  /// hack kvuli goto
  cri = 0;
}
    e07e:	aa 96       	adiw	r28, 0x2a	; 42
    e080:	0f b6       	in	r0, 0x3f	; 63
    e082:	f8 94       	cli
    e084:	de bf       	out	0x3e, r29	; 62
    e086:	0f be       	out	0x3f, r0	; 63
    e088:	cd bf       	out	0x3d, r28	; 61
    e08a:	df 91       	pop	r29
    e08c:	cf 91       	pop	r28
    e08e:	1f 91       	pop	r17
    e090:	0f 91       	pop	r16
    e092:	ff 90       	pop	r15
    e094:	ef 90       	pop	r14
    e096:	df 90       	pop	r13
    e098:	cf 90       	pop	r12
    e09a:	bf 90       	pop	r11
    e09c:	af 90       	pop	r10
    e09e:	9f 90       	pop	r9
    e0a0:	8f 90       	pop	r8
    e0a2:	7f 90       	pop	r7
    e0a4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4836
        tds_get_name(idx, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_onewire);
        goto button_get_show_default_temp_end;
      }
      cri++;
    e0a6:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4825
  uint8_t active;
  strcpy_P(line1, nastaveni_onewire);
  strcpy(line2, "");
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    e0a8:	1f 5f       	subi	r17, 0xFF	; 255
    e0aa:	86 e1       	ldi	r24, 0x16	; 22
    e0ac:	88 0e       	add	r8, r24
    e0ae:	91 1c       	adc	r9, r1
    e0b0:	16 30       	cpi	r17, 0x06	; 6
    e0b2:	09 f6       	brne	.-126    	; 0xe036 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4840
      }
      cri++;
    }
  }
  /// pro rtds
  strcpy_P(line1, nastaveni_rtds);
    e0b4:	60 e6       	ldi	r22, 0x60	; 96
    e0b6:	71 e7       	ldi	r23, 0x71	; 113
    e0b8:	c6 01       	movw	r24, r12
    e0ba:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4841
  strcpy(line2, "");
    e0be:	62 e0       	ldi	r22, 0x02	; 2
    e0c0:	73 e0       	ldi	r23, 0x03	; 3
    e0c2:	c5 01       	movw	r24, r10
    e0c4:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4842
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e0c8:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4844
  {
    remote_tds_get_active(idx, &active);
    e0ca:	be 01       	movw	r22, r28
    e0cc:	6f 5f       	subi	r22, 0xFF	; 255
    e0ce:	7f 4f       	sbci	r23, 0xFF	; 255
    e0d0:	81 2f       	mov	r24, r17
    e0d2:	0e 94 2f 6f 	call	0xde5e	; 0xde5e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4845
    if (((active == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE) && (remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP )) || args3 == INPUT_SENSOR_SHOW_ALL)
    e0d6:	89 81       	ldd	r24, Y+1	; 0x01
    e0d8:	81 30       	cpi	r24, 0x01	; 1
    e0da:	d9 f4       	brne	.+54     	; 0xe112 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x12c>
    e0dc:	e1 10       	cpse	r14, r1
    e0de:	19 c0       	rjmp	.+50     	; 0xe112 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x12c>
    e0e0:	81 2f       	mov	r24, r17
    e0e2:	0e 94 ee 49 	call	0x93dc	; 0x93dc <remote_tds_get_type(unsigned char)>
    e0e6:	81 30       	cpi	r24, 0x01	; 1
    e0e8:	b9 f4       	brne	.+46     	; 0xe118 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x132>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4847
    {
      if (cri == args1)
    e0ea:	7f 10       	cpse	r7, r15
    e0ec:	19 c0       	rjmp	.+50     	; 0xe120 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x13a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4849
      {
        remote_tds_get_complete(idx, &active, name);
    e0ee:	ae 01       	movw	r20, r28
    e0f0:	49 5e       	subi	r20, 0xE9	; 233
    e0f2:	5f 4f       	sbci	r21, 0xFF	; 255
    e0f4:	be 01       	movw	r22, r28
    e0f6:	6f 5f       	subi	r22, 0xFF	; 255
    e0f8:	7f 4f       	sbci	r23, 0xFF	; 255
    e0fa:	81 2f       	mov	r24, r17
    e0fc:	0e 94 b3 6f 	call	0xdf66	; 0xdf66 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4850
        strcpy(line2, name);
    e100:	be 01       	movw	r22, r28
    e102:	69 5e       	subi	r22, 0xE9	; 233
    e104:	7f 4f       	sbci	r23, 0xFF	; 255
    e106:	c5 01       	movw	r24, r10
    e108:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4851
        strcpy_P(line1, nastaveni_rtds);
    e10c:	60 e6       	ldi	r22, 0x60	; 96
    e10e:	71 e7       	ldi	r23, 0x71	; 113
    e110:	b3 cf       	rjmp	.-154    	; 0xe078 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4845
  strcpy_P(line1, nastaveni_rtds);
  strcpy(line2, "");
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_active(idx, &active);
    if (((active == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE) && (remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP )) || args3 == INPUT_SENSOR_SHOW_ALL)
    e112:	81 e0       	ldi	r24, 0x01	; 1
    e114:	e8 16       	cp	r14, r24
    e116:	49 f3       	breq	.-46     	; 0xe0ea <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x104>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4842
    }
  }
  /// pro rtds
  strcpy_P(line1, nastaveni_rtds);
  strcpy(line2, "");
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e118:	1f 5f       	subi	r17, 0xFF	; 255
    e11a:	1a 30       	cpi	r17, 0x0A	; 10
    e11c:	b1 f6       	brne	.-84     	; 0xe0ca <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xe4>
    e11e:	af cf       	rjmp	.-162    	; 0xe07e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x98>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4854
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
        goto button_get_show_default_temp_end;
      }
      cri++;
    e120:	f3 94       	inc	r15
    e122:	fa cf       	rjmp	.-12     	; 0xe118 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x132>

0000e124 <button_get_show_default_temp_1(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z30button_get_show_default_temp_1hhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4863
  /// hack kvuli goto
  cri = 0;
}

void button_get_show_default_temp_1(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    e124:	0f 93       	push	r16
    e126:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4864
  button_get_show_default_temp(args1, args2, args3, line1, line2);
    e128:	0e 94 f3 6f 	call	0xdfe6	; 0xdfe6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4865
}
    e12c:	1f 91       	pop	r17
    e12e:	0f 91       	pop	r16
    e130:	08 95       	ret

0000e132 <get_global_temp(unsigned char, char*, float*)>:
_Z15get_global_temphPcPf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4762
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
    e132:	8f 92       	push	r8
    e134:	9f 92       	push	r9
    e136:	af 92       	push	r10
    e138:	bf 92       	push	r11
    e13a:	cf 92       	push	r12
    e13c:	df 92       	push	r13
    e13e:	ef 92       	push	r14
    e140:	ff 92       	push	r15
    e142:	0f 93       	push	r16
    e144:	1f 93       	push	r17
    e146:	cf 93       	push	r28
    e148:	df 93       	push	r29
    e14a:	cd b7       	in	r28, 0x3d	; 61
    e14c:	de b7       	in	r29, 0x3e	; 62
    e14e:	67 97       	sbiw	r28, 0x17	; 23
    e150:	0f b6       	in	r0, 0x3f	; 63
    e152:	f8 94       	cli
    e154:	de bf       	out	0x3e, r29	; 62
    e156:	0f be       	out	0x3f, r0	; 63
    e158:	cd bf       	out	0x3d, r28	; 61
    e15a:	e8 2e       	mov	r14, r24
    e15c:	5b 01       	movw	r10, r22
    e15e:	4a 01       	movw	r8, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4767
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
    e160:	6a e5       	ldi	r22, 0x5A	; 90
    e162:	71 e7       	ldi	r23, 0x71	; 113
    e164:	c5 01       	movw	r24, r10
    e166:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4768
  *temp = 0.0;
    e16a:	f4 01       	movw	r30, r8
    e16c:	10 82       	st	Z, r1
    e16e:	11 82       	std	Z+1, r1	; 0x01
    e170:	12 82       	std	Z+2, r1	; 0x02
    e172:	13 82       	std	Z+3, r1	; 0x03
    e174:	d1 2c       	mov	r13, r1
    e176:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4764
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
    e178:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4777
      if (tds.used == 1)
      {
        if (cri == device)
        {
          strcpy(name, tds.name);
          if (status_tds18s20[idx].online == True)
    e17a:	1e e1       	ldi	r17, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4771
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if (get_tds18s20(idx, &tds) == 1)
    e17c:	be 01       	movw	r22, r28
    e17e:	6f 5f       	subi	r22, 0xFF	; 255
    e180:	7f 4f       	sbci	r23, 0xFF	; 255
    e182:	8c 2d       	mov	r24, r12
    e184:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
    e188:	81 30       	cpi	r24, 0x01	; 1
    e18a:	f1 f5       	brne	.+124    	; 0xe208 <get_global_temp(unsigned char, char*, float*)+0xd6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4772
      if (tds.used == 1)
    e18c:	89 81       	ldd	r24, Y+1	; 0x01
    e18e:	81 30       	cpi	r24, 0x01	; 1
    e190:	d9 f5       	brne	.+118    	; 0xe208 <get_global_temp(unsigned char, char*, float*)+0xd6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4774
      {
        if (cri == device)
    e192:	e0 12       	cpse	r14, r16
    e194:	38 c0       	rjmp	.+112    	; 0xe206 <get_global_temp(unsigned char, char*, float*)+0xd4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4776
        {
          strcpy(name, tds.name);
    e196:	be 01       	movw	r22, r28
    e198:	63 5f       	subi	r22, 0xF3	; 243
    e19a:	7f 4f       	sbci	r23, 0xFF	; 255
    e19c:	c5 01       	movw	r24, r10
    e19e:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4777
          if (status_tds18s20[idx].online == True)
    e1a2:	1c 9d       	mul	r17, r12
    e1a4:	f0 01       	movw	r30, r0
    e1a6:	1d 9d       	mul	r17, r13
    e1a8:	f0 0d       	add	r31, r0
    e1aa:	11 24       	eor	r1, r1
    e1ac:	e2 53       	subi	r30, 0x32	; 50
    e1ae:	f4 4f       	sbci	r31, 0xF4	; 244
    e1b0:	f3 8c       	ldd	r15, Z+27	; 0x1b
    e1b2:	81 e0       	ldi	r24, 0x01	; 1
    e1b4:	f8 12       	cpse	r15, r24
    e1b6:	27 c0       	rjmp	.+78     	; 0xe206 <get_global_temp(unsigned char, char*, float*)+0xd4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4779
          {
            *temp = status_tds18s20[idx].temp / 1000.0;
    e1b8:	65 81       	ldd	r22, Z+5	; 0x05
    e1ba:	76 81       	ldd	r23, Z+6	; 0x06
    e1bc:	07 2e       	mov	r0, r23
    e1be:	00 0c       	add	r0, r0
    e1c0:	88 0b       	sbc	r24, r24
    e1c2:	99 0b       	sbc	r25, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4797
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250 && remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP)
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    e1c4:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
    e1c8:	20 e0       	ldi	r18, 0x00	; 0
    e1ca:	30 e0       	ldi	r19, 0x00	; 0
    e1cc:	4a e7       	ldi	r20, 0x7A	; 122
    e1ce:	54 e4       	ldi	r21, 0x44	; 68
    e1d0:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
    e1d4:	f4 01       	movw	r30, r8
    e1d6:	60 83       	st	Z, r22
    e1d8:	71 83       	std	Z+1, r23	; 0x01
    e1da:	82 83       	std	Z+2, r24	; 0x02
    e1dc:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4808
    }
  }
  /// goto skok
get_global_temp_end:
  return ret;
}
    e1de:	8f 2d       	mov	r24, r15
    e1e0:	67 96       	adiw	r28, 0x17	; 23
    e1e2:	0f b6       	in	r0, 0x3f	; 63
    e1e4:	f8 94       	cli
    e1e6:	de bf       	out	0x3e, r29	; 62
    e1e8:	0f be       	out	0x3f, r0	; 63
    e1ea:	cd bf       	out	0x3d, r28	; 61
    e1ec:	df 91       	pop	r29
    e1ee:	cf 91       	pop	r28
    e1f0:	1f 91       	pop	r17
    e1f2:	0f 91       	pop	r16
    e1f4:	ff 90       	pop	r15
    e1f6:	ef 90       	pop	r14
    e1f8:	df 90       	pop	r13
    e1fa:	cf 90       	pop	r12
    e1fc:	bf 90       	pop	r11
    e1fe:	af 90       	pop	r10
    e200:	9f 90       	pop	r9
    e202:	8f 90       	pop	r8
    e204:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4784
            *temp = status_tds18s20[idx].temp / 1000.0;
            ret = 1;
            goto get_global_temp_end;
          }
        }
        cri++;
    e206:	0f 5f       	subi	r16, 0xFF	; 255
    e208:	ff ef       	ldi	r31, 0xFF	; 255
    e20a:	cf 1a       	sub	r12, r31
    e20c:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4770
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    e20e:	86 e0       	ldi	r24, 0x06	; 6
    e210:	c8 16       	cp	r12, r24
    e212:	d1 04       	cpc	r13, r1
    e214:	09 f0       	breq	.+2      	; 0xe218 <get_global_temp(unsigned char, char*, float*)+0xe6>
    e216:	b2 cf       	rjmp	.-156    	; 0xe17c <get_global_temp(unsigned char, char*, float*)+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4787
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e218:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4789
  {
    remote_tds_get_active(idx, &active);
    e21a:	be 01       	movw	r22, r28
    e21c:	69 5e       	subi	r22, 0xE9	; 233
    e21e:	7f 4f       	sbci	r23, 0xFF	; 255
    e220:	81 2f       	mov	r24, r17
    e222:	0e 94 2f 6f 	call	0xde5e	; 0xde5e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4790
    if (active == 1)
    e226:	8f 89       	ldd	r24, Y+23	; 0x17
    e228:	81 30       	cpi	r24, 0x01	; 1
    e22a:	f1 f4       	brne	.+60     	; 0xe268 <get_global_temp(unsigned char, char*, float*)+0x136>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4792
    {
      if (cri == device)
    e22c:	e0 12       	cpse	r14, r16
    e22e:	1b c0       	rjmp	.+54     	; 0xe266 <get_global_temp(unsigned char, char*, float*)+0x134>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4794
      {
        remote_tds_get_complete(idx, &active, name);
    e230:	a5 01       	movw	r20, r10
    e232:	be 01       	movw	r22, r28
    e234:	69 5e       	subi	r22, 0xE9	; 233
    e236:	7f 4f       	sbci	r23, 0xFF	; 255
    e238:	81 2f       	mov	r24, r17
    e23a:	0e 94 b3 6f 	call	0xdf66	; 0xdf66 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4795
        if (remote_tds_get_last_update(idx) < 250 && remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP)
    e23e:	81 2f       	mov	r24, r17
    e240:	0e 94 de 49 	call	0x93bc	; 0x93bc <remote_tds_get_last_update(unsigned char)>
    e244:	8a 3f       	cpi	r24, 0xFA	; 250
    e246:	78 f4       	brcc	.+30     	; 0xe266 <get_global_temp(unsigned char, char*, float*)+0x134>
    e248:	81 2f       	mov	r24, r17
    e24a:	0e 94 ee 49 	call	0x93dc	; 0x93dc <remote_tds_get_type(unsigned char)>
    e24e:	f8 2e       	mov	r15, r24
    e250:	e1 e0       	ldi	r30, 0x01	; 1
    e252:	8e 13       	cpse	r24, r30
    e254:	08 c0       	rjmp	.+16     	; 0xe266 <get_global_temp(unsigned char, char*, float*)+0x134>
remote_tds_get_data():
    e256:	81 2f       	mov	r24, r17
    e258:	0e 94 b8 49 	call	0x9370	; 0x9370 <remote_tds_get_data(unsigned char) [clone .part.31]>
_Z15get_global_temphPcPf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4797
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    e25c:	bc 01       	movw	r22, r24
    e25e:	99 0f       	add	r25, r25
    e260:	88 0b       	sbc	r24, r24
    e262:	99 0b       	sbc	r25, r25
    e264:	af cf       	rjmp	.-162    	; 0xe1c4 <get_global_temp(unsigned char, char*, float*)+0x92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4802
          ret = 1;
          goto get_global_temp_end;
        }
      }
      cri++;
    e266:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4787
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e268:	1f 5f       	subi	r17, 0xFF	; 255
    e26a:	1a 30       	cpi	r17, 0x0A	; 10
    e26c:	b1 f6       	brne	.-84     	; 0xe21a <get_global_temp(unsigned char, char*, float*)+0xe8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4765
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
    e26e:	f1 2c       	mov	r15, r1
    e270:	b6 cf       	rjmp	.-148    	; 0xe1de <get_global_temp(unsigned char, char*, float*)+0xac>

0000e272 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4156
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    e272:	8f 92       	push	r8
    e274:	9f 92       	push	r9
    e276:	af 92       	push	r10
    e278:	bf 92       	push	r11
    e27a:	cf 92       	push	r12
    e27c:	df 92       	push	r13
    e27e:	ef 92       	push	r14
    e280:	ff 92       	push	r15
    e282:	0f 93       	push	r16
    e284:	1f 93       	push	r17
    e286:	cf 93       	push	r28
    e288:	df 93       	push	r29
    e28a:	cd b7       	in	r28, 0x3d	; 61
    e28c:	de b7       	in	r29, 0x3e	; 62
    e28e:	e8 97       	sbiw	r28, 0x38	; 56
    e290:	0f b6       	in	r0, 0x3f	; 63
    e292:	f8 94       	cli
    e294:	de bf       	out	0x3e, r29	; 62
    e296:	0f be       	out	0x3f, r0	; 63
    e298:	cd bf       	out	0x3d, r28	; 61
    e29a:	5c 01       	movw	r10, r24
    e29c:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4161
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  stat = get_global_temp(default_show_temp, str2, &te);
    e29e:	ae 01       	movw	r20, r28
    e2a0:	4b 5c       	subi	r20, 0xCB	; 203
    e2a2:	5f 4f       	sbci	r21, 0xFF	; 255
    e2a4:	be 01       	movw	r22, r28
    e2a6:	6f 5d       	subi	r22, 0xDF	; 223
    e2a8:	7f 4f       	sbci	r23, 0xFF	; 255
    e2aa:	80 91 93 09 	lds	r24, 0x0993	; 0x800993 <default_show_temp>
    e2ae:	0e 94 99 70 	call	0xe132	; 0xe132 <get_global_temp(unsigned char, char*, float*)>
    e2b2:	24 e1       	ldi	r18, 0x14	; 20
    e2b4:	82 0e       	add	r8, r18
    e2b6:	91 1c       	adc	r9, r1
    e2b8:	34 e0       	ldi	r19, 0x04	; 4
    e2ba:	a3 0e       	add	r10, r19
    e2bc:	b1 1c       	adc	r11, r1
    e2be:	9e 01       	movw	r18, r28
    e2c0:	2f 5f       	subi	r18, 0xFF	; 255
    e2c2:	3f 4f       	sbci	r19, 0xFF	; 255
    e2c4:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4162
  if (stat == 1)
    e2c6:	81 30       	cpi	r24, 0x01	; 1
    e2c8:	a9 f5       	brne	.+106    	; 0xe334 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4164
  {
    dtostrf(te, 4, 1, str1);
    e2ca:	6d a9       	ldd	r22, Y+53	; 0x35
    e2cc:	7e a9       	ldd	r23, Y+54	; 0x36
    e2ce:	8f a9       	ldd	r24, Y+55	; 0x37
    e2d0:	98 ad       	ldd	r25, Y+56	; 0x38
    e2d2:	89 01       	movw	r16, r18
    e2d4:	21 e0       	ldi	r18, 0x01	; 1
    e2d6:	44 e0       	ldi	r20, 0x04	; 4
    e2d8:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4165
    if (strlen(str1) <= 4)
    e2dc:	f6 01       	movw	r30, r12
    e2de:	01 90       	ld	r0, Z+
    e2e0:	00 20       	and	r0, r0
    e2e2:	e9 f7       	brne	.-6      	; 0xe2de <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x6c>
    e2e4:	31 97       	sbiw	r30, 0x01	; 1
    e2e6:	ec 19       	sub	r30, r12
    e2e8:	fd 09       	sbc	r31, r13
    e2ea:	35 97       	sbiw	r30, 0x05	; 5
    e2ec:	28 f4       	brcc	.+10     	; 0xe2f8 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x86>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4166
      strcat(str1, "C");
    e2ee:	6e e1       	ldi	r22, 0x1E	; 30
    e2f0:	77 e0       	ldi	r23, 0x07	; 7
    e2f2:	c6 01       	movw	r24, r12
    e2f4:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4167
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    e2f8:	ee 24       	eor	r14, r14
    e2fa:	ea 94       	dec	r14
    e2fc:	fe 2c       	mov	r15, r14
    e2fe:	10 e0       	ldi	r17, 0x00	; 0
    e300:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4172
  }
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    e302:	28 e0       	ldi	r18, 0x08	; 8
    e304:	a4 01       	movw	r20, r8
    e306:	b5 01       	movw	r22, r10
    e308:	c6 01       	movw	r24, r12
    e30a:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4174
  }
}
    e30e:	e8 96       	adiw	r28, 0x38	; 56
    e310:	0f b6       	in	r0, 0x3f	; 63
    e312:	f8 94       	cli
    e314:	de bf       	out	0x3e, r29	; 62
    e316:	0f be       	out	0x3f, r0	; 63
    e318:	cd bf       	out	0x3d, r28	; 61
    e31a:	df 91       	pop	r29
    e31c:	cf 91       	pop	r28
    e31e:	1f 91       	pop	r17
    e320:	0f 91       	pop	r16
    e322:	ff 90       	pop	r15
    e324:	ef 90       	pop	r14
    e326:	df 90       	pop	r13
    e328:	cf 90       	pop	r12
    e32a:	bf 90       	pop	r11
    e32c:	af 90       	pop	r10
    e32e:	9f 90       	pop	r9
    e330:	8f 90       	pop	r8
    e332:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4171
      strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    e334:	6a e5       	ldi	r22, 0x5A	; 90
    e336:	71 e7       	ldi	r23, 0x71	; 113
    e338:	c9 01       	movw	r24, r18
    e33a:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4172
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    e33e:	ee 24       	eor	r14, r14
    e340:	ea 94       	dec	r14
    e342:	fe 2c       	mov	r15, r14
    e344:	00 e0       	ldi	r16, 0x00	; 0
    e346:	18 ef       	ldi	r17, 0xF8	; 248
    e348:	dc cf       	rjmp	.-72     	; 0xe302 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x90>

0000e34a <display_element_show_temp_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z36display_element_show_temp_decorate_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4142
}
///

/// dekorativni funkce pro zobrazeni teploty
void display_element_show_temp_decorate_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    e34a:	af 92       	push	r10
    e34c:	bf 92       	push	r11
    e34e:	cf 92       	push	r12
    e350:	df 92       	push	r13
    e352:	ef 92       	push	r14
    e354:	ff 92       	push	r15
    e356:	0f 93       	push	r16
    e358:	1f 93       	push	r17
    e35a:	cf 93       	push	r28
    e35c:	df 93       	push	r29
    e35e:	cd b7       	in	r28, 0x3d	; 61
    e360:	de b7       	in	r29, 0x3e	; 62
    e362:	e8 97       	sbiw	r28, 0x38	; 56
    e364:	0f b6       	in	r0, 0x3f	; 63
    e366:	f8 94       	cli
    e368:	de bf       	out	0x3e, r29	; 62
    e36a:	0f be       	out	0x3f, r0	; 63
    e36c:	cd bf       	out	0x3d, r28	; 61
    e36e:	6c 01       	movw	r12, r24
    e370:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4147
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
    e372:	6d ea       	ldi	r22, 0xAD	; 173
    e374:	70 e7       	ldi	r23, 0x70	; 112
    e376:	ce 01       	movw	r24, r28
    e378:	01 96       	adiw	r24, 0x01	; 1
    e37a:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4148
  stat = get_global_temp(default_show_temp, str2, &te);
    e37e:	ae 01       	movw	r20, r28
    e380:	4b 5c       	subi	r20, 0xCB	; 203
    e382:	5f 4f       	sbci	r21, 0xFF	; 255
    e384:	be 01       	movw	r22, r28
    e386:	6f 5d       	subi	r22, 0xDF	; 223
    e388:	7f 4f       	sbci	r23, 0xFF	; 255
    e38a:	80 91 93 09 	lds	r24, 0x0993	; 0x800993 <default_show_temp>
    e38e:	0e 94 99 70 	call	0xe132	; 0xe132 <get_global_temp(unsigned char, char*, float*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4149
  strcat(str1, str2);
    e392:	be 01       	movw	r22, r28
    e394:	6f 5d       	subi	r22, 0xDF	; 223
    e396:	7f 4f       	sbci	r23, 0xFF	; 255
    e398:	ce 01       	movw	r24, r28
    e39a:	01 96       	adiw	r24, 0x01	; 1
    e39c:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4150
  show_string(str1, x + 5, y + 5, 1, BLACK, WHITE, 0);
    e3a0:	a5 01       	movw	r20, r10
    e3a2:	4b 5f       	subi	r20, 0xFB	; 251
    e3a4:	5f 4f       	sbci	r21, 0xFF	; 255
    e3a6:	b6 01       	movw	r22, r12
    e3a8:	6b 5f       	subi	r22, 0xFB	; 251
    e3aa:	7f 4f       	sbci	r23, 0xFF	; 255
    e3ac:	ee 24       	eor	r14, r14
    e3ae:	ea 94       	dec	r14
    e3b0:	fe 2c       	mov	r15, r14
    e3b2:	10 e0       	ldi	r17, 0x00	; 0
    e3b4:	00 e0       	ldi	r16, 0x00	; 0
    e3b6:	21 e0       	ldi	r18, 0x01	; 1
    e3b8:	ce 01       	movw	r24, r28
    e3ba:	01 96       	adiw	r24, 0x01	; 1
    e3bc:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    e3c0:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    e3c4:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
_Z36display_element_show_temp_decorate_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4152
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    e3c8:	95 01       	movw	r18, r10
    e3ca:	2c 5a       	subi	r18, 0xAC	; 172
    e3cc:	3f 4f       	sbci	r19, 0xFF	; 255
    e3ce:	a6 01       	movw	r20, r12
    e3d0:	4c 50       	subi	r20, 0x0C	; 12
    e3d2:	5f 4f       	sbci	r21, 0xFF	; 255
    e3d4:	b5 01       	movw	r22, r10
    e3d6:	c6 01       	movw	r24, r12
    e3d8:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4153
}
    e3dc:	e8 96       	adiw	r28, 0x38	; 56
    e3de:	0f b6       	in	r0, 0x3f	; 63
    e3e0:	f8 94       	cli
    e3e2:	de bf       	out	0x3e, r29	; 62
    e3e4:	0f be       	out	0x3f, r0	; 63
    e3e6:	cd bf       	out	0x3d, r28	; 61
    e3e8:	df 91       	pop	r29
    e3ea:	cf 91       	pop	r28
    e3ec:	1f 91       	pop	r17
    e3ee:	0f 91       	pop	r16
    e3f0:	ff 90       	pop	r15
    e3f2:	ef 90       	pop	r14
    e3f4:	df 90       	pop	r13
    e3f6:	cf 90       	pop	r12
    e3f8:	bf 90       	pop	r11
    e3fa:	af 90       	pop	r10
    e3fc:	08 95       	ret

0000e3fe <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4574
  return active;
  }
*/

void get_function_rtds_text_button(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    e3fe:	cf 92       	push	r12
    e400:	df 92       	push	r13
    e402:	ff 92       	push	r15
    e404:	0f 93       	push	r16
    e406:	1f 93       	push	r17
    e408:	cf 93       	push	r28
    e40a:	df 93       	push	r29
    e40c:	1f 92       	push	r1
    e40e:	cd b7       	in	r28, 0x3d	; 61
    e410:	de b7       	in	r29, 0x3e	; 62
    e412:	f8 2e       	mov	r15, r24
    e414:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4576
  uint8_t active;
  strcpy_P(line1, text_not_used);
    e416:	67 e3       	ldi	r22, 0x37	; 55
    e418:	71 e7       	ldi	r23, 0x71	; 113
    e41a:	c9 01       	movw	r24, r18
    e41c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4577
  line2[0] = 0;
    e420:	f8 01       	movw	r30, r16
    e422:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4578
  remote_tds_get_active(args1, &active);
    e424:	be 01       	movw	r22, r28
    e426:	6f 5f       	subi	r22, 0xFF	; 255
    e428:	7f 4f       	sbci	r23, 0xFF	; 255
    e42a:	8f 2d       	mov	r24, r15
    e42c:	0e 94 2f 6f 	call	0xde5e	; 0xde5e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4579
  if (active == 1)
    e430:	89 81       	ldd	r24, Y+1	; 0x01
    e432:	81 30       	cpi	r24, 0x01	; 1
    e434:	89 f4       	brne	.+34     	; 0xe458 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4581
  {
    remote_tds_get_complete(args1, &active, line1);
    e436:	a6 01       	movw	r20, r12
    e438:	be 01       	movw	r22, r28
    e43a:	6f 5f       	subi	r22, 0xFF	; 255
    e43c:	7f 4f       	sbci	r23, 0xFF	; 255
    e43e:	8f 2d       	mov	r24, r15
    e440:	0e 94 b3 6f 	call	0xdf66	; 0xdf66 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4582
    if (remote_tds_get_type(args1) == RTDS_REMOTE_TYPE_TEMP)
    e444:	8f 2d       	mov	r24, r15
    e446:	0e 94 ee 49 	call	0x93dc	; 0x93dc <remote_tds_get_type(unsigned char)>
    e44a:	81 30       	cpi	r24, 0x01	; 1
    e44c:	29 f4       	brne	.+10     	; 0xe458 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4583
      strcpy_P(line2, new_text_rtds_type_temp);
    e44e:	6e e0       	ldi	r22, 0x0E	; 14
    e450:	71 e7       	ldi	r23, 0x71	; 113
    e452:	c8 01       	movw	r24, r16
    e454:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4585
  }
}
    e458:	0f 90       	pop	r0
    e45a:	df 91       	pop	r29
    e45c:	cf 91       	pop	r28
    e45e:	1f 91       	pop	r17
    e460:	0f 91       	pop	r16
    e462:	ff 90       	pop	r15
    e464:	df 90       	pop	r13
    e466:	cf 90       	pop	r12
    e468:	08 95       	ret

0000e46a <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4255
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
/////
void display_element_show_rtds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    e46a:	5f 92       	push	r5
    e46c:	6f 92       	push	r6
    e46e:	7f 92       	push	r7
    e470:	8f 92       	push	r8
    e472:	9f 92       	push	r9
    e474:	af 92       	push	r10
    e476:	bf 92       	push	r11
    e478:	cf 92       	push	r12
    e47a:	df 92       	push	r13
    e47c:	ef 92       	push	r14
    e47e:	ff 92       	push	r15
    e480:	0f 93       	push	r16
    e482:	1f 93       	push	r17
    e484:	cf 93       	push	r28
    e486:	df 93       	push	r29
    e488:	cd b7       	in	r28, 0x3d	; 61
    e48a:	de b7       	in	r29, 0x3e	; 62
    e48c:	cd 54       	subi	r28, 0x4D	; 77
    e48e:	d1 09       	sbc	r29, r1
    e490:	0f b6       	in	r0, 0x3f	; 63
    e492:	f8 94       	cli
    e494:	de bf       	out	0x3e, r29	; 62
    e496:	0f be       	out	0x3f, r0	; 63
    e498:	cd bf       	out	0x3d, r28	; 61
    e49a:	3c 01       	movw	r6, r24
    e49c:	5b 01       	movw	r10, r22
    e49e:	5e 2c       	mov	r5, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    e4a0:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    e4a4:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4263
  char name[RTDS_DEVICE_STRING_LEN];
  float te;
  uint8_t last_update;
  uint8_t active;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    e4a8:	26 0f       	add	r18, r22
    e4aa:	37 1f       	adc	r19, r23
    e4ac:	48 0f       	add	r20, r24
    e4ae:	59 1f       	adc	r21, r25
    e4b0:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4264
  remote_tds_get_complete(args2, &active, name);
    e4b4:	ae 01       	movw	r20, r28
    e4b6:	45 5c       	subi	r20, 0xC5	; 197
    e4b8:	5f 4f       	sbci	r21, 0xFF	; 255
    e4ba:	be 01       	movw	r22, r28
    e4bc:	63 5b       	subi	r22, 0xB3	; 179
    e4be:	7f 4f       	sbci	r23, 0xFF	; 255
    e4c0:	8e 2d       	mov	r24, r14
    e4c2:	0e 94 b3 6f 	call	0xdf66	; 0xdf66 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4265
  if (active == 1)
    e4c6:	2e 96       	adiw	r28, 0x0e	; 14
    e4c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    e4ca:	2e 97       	sbiw	r28, 0x0e	; 14
    e4cc:	81 30       	cpi	r24, 0x01	; 1
    e4ce:	09 f0       	breq	.+2      	; 0xe4d2 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x68>
    e4d0:	c2 c0       	rjmp	.+388    	; 0xe656 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1ec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4268
  {
    /// nazev
    strcpy_P(str1, text_nazev);
    e4d2:	67 e0       	ldi	r22, 0x07	; 7
    e4d4:	71 e7       	ldi	r23, 0x71	; 113
    e4d6:	ce 01       	movw	r24, r28
    e4d8:	01 96       	adiw	r24, 0x01	; 1
    e4da:	6c 01       	movw	r12, r24
    e4dc:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4269
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    e4e0:	43 01       	movw	r8, r6
    e4e2:	95 e0       	ldi	r25, 0x05	; 5
    e4e4:	89 0e       	add	r8, r25
    e4e6:	91 1c       	adc	r9, r1
    e4e8:	ee 24       	eor	r14, r14
    e4ea:	ea 94       	dec	r14
    e4ec:	fe 2c       	mov	r15, r14
    e4ee:	10 e0       	ldi	r17, 0x00	; 0
    e4f0:	00 e0       	ldi	r16, 0x00	; 0
    e4f2:	22 e0       	ldi	r18, 0x02	; 2
    e4f4:	a5 01       	movw	r20, r10
    e4f6:	46 5f       	subi	r20, 0xF6	; 246
    e4f8:	5f 4f       	sbci	r21, 0xFF	; 255
    e4fa:	b4 01       	movw	r22, r8
    e4fc:	c6 01       	movw	r24, r12
    e4fe:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4270
    strcpy(str1, name);
    e502:	be 01       	movw	r22, r28
    e504:	65 5c       	subi	r22, 0xC5	; 197
    e506:	7f 4f       	sbci	r23, 0xFF	; 255
    e508:	c6 01       	movw	r24, r12
    e50a:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4271
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    e50e:	b3 01       	movw	r22, r6
    e510:	6c 5e       	subi	r22, 0xEC	; 236
    e512:	7f 4f       	sbci	r23, 0xFF	; 255
    e514:	22 e0       	ldi	r18, 0x02	; 2
    e516:	a5 01       	movw	r20, r10
    e518:	42 5e       	subi	r20, 0xE2	; 226
    e51a:	5f 4f       	sbci	r21, 0xFF	; 255
    e51c:	c6 01       	movw	r24, r12
    e51e:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4272
    if (remote_tds_get_type(args2) == RTDS_REMOTE_TYPE_TEMP)
    e522:	85 2d       	mov	r24, r5
    e524:	0e 94 ee 49 	call	0x93dc	; 0x93dc <remote_tds_get_type(unsigned char)>
    e528:	81 30       	cpi	r24, 0x01	; 1
    e52a:	09 f0       	breq	.+2      	; 0xe52e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xc4>
    e52c:	94 c0       	rjmp	.+296    	; 0xe656 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1ec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4275
    {
      /// teplota
      strcpy_P(str1, new_text_rtds_type_temp);
    e52e:	6e e0       	ldi	r22, 0x0E	; 14
    e530:	71 e7       	ldi	r23, 0x71	; 113
    e532:	c6 01       	movw	r24, r12
    e534:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4276
      show_string(str1, x + 5, y + 60 , 1, BLACK, WHITE, 0);
    e538:	21 e0       	ldi	r18, 0x01	; 1
    e53a:	a5 01       	movw	r20, r10
    e53c:	44 5c       	subi	r20, 0xC4	; 196
    e53e:	5f 4f       	sbci	r21, 0xFF	; 255
    e540:	b4 01       	movw	r22, r8
    e542:	c6 01       	movw	r24, r12
    e544:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
remote_tds_get_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1938
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int value = 0;
  if (idx < MAX_RTDS)
    e548:	89 e0       	ldi	r24, 0x09	; 9
    e54a:	85 15       	cp	r24, r5
    e54c:	08 f4       	brcc	.+2      	; 0xe550 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xe6>
    e54e:	9a c0       	rjmp	.+308    	; 0xe684 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x21a>
    e550:	85 2d       	mov	r24, r5
    e552:	0e 94 b8 49 	call	0x9370	; 0x9370 <remote_tds_get_data(unsigned char) [clone .part.31]>
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4278
    {
      /// teplota
      strcpy_P(str1, new_text_rtds_type_temp);
      show_string(str1, x + 5, y + 60 , 1, BLACK, WHITE, 0);

      te = remote_tds_get_data(args2) / 1000.0;
    e556:	bc 01       	movw	r22, r24
    e558:	99 0f       	add	r25, r25
    e55a:	88 0b       	sbc	r24, r24
    e55c:	99 0b       	sbc	r25, r25
    e55e:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
    e562:	20 e0       	ldi	r18, 0x00	; 0
    e564:	30 e0       	ldi	r19, 0x00	; 0
    e566:	4a e7       	ldi	r20, 0x7A	; 122
    e568:	54 e4       	ldi	r21, 0x44	; 68
    e56a:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4279
      dtostrf(te, 4, 2, str1);
    e56e:	86 01       	movw	r16, r12
    e570:	22 e0       	ldi	r18, 0x02	; 2
    e572:	44 e0       	ldi	r20, 0x04	; 4
    e574:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4280
      strcat(str1, "C");
    e578:	6e e1       	ldi	r22, 0x1E	; 30
    e57a:	77 e0       	ldi	r23, 0x07	; 7
    e57c:	c6 01       	movw	r24, r12
    e57e:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4281
      strcpy_P(str2, current_temp_short);
    e582:	3e 01       	movw	r6, r28
    e584:	91 e2       	ldi	r25, 0x21	; 33
    e586:	69 0e       	add	r6, r25
    e588:	71 1c       	adc	r7, r1
    e58a:	6e ef       	ldi	r22, 0xFE	; 254
    e58c:	70 e7       	ldi	r23, 0x70	; 112
    e58e:	c3 01       	movw	r24, r6
    e590:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4282
      strcat(str2, str1);
    e594:	b6 01       	movw	r22, r12
    e596:	c3 01       	movw	r24, r6
    e598:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4283
      show_string(str2, x + 5, y + 80 , 2, BLACK, WHITE, 0);
    e59c:	ee 24       	eor	r14, r14
    e59e:	ea 94       	dec	r14
    e5a0:	fe 2c       	mov	r15, r14
    e5a2:	10 e0       	ldi	r17, 0x00	; 0
    e5a4:	00 e0       	ldi	r16, 0x00	; 0
    e5a6:	22 e0       	ldi	r18, 0x02	; 2
    e5a8:	a5 01       	movw	r20, r10
    e5aa:	40 5b       	subi	r20, 0xB0	; 176
    e5ac:	5f 4f       	sbci	r21, 0xFF	; 255
    e5ae:	b4 01       	movw	r22, r8
    e5b0:	c3 01       	movw	r24, r6
    e5b2:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4285
      /// posledni aktualizace
      last_update = remote_tds_get_last_update(args2);
    e5b6:	85 2d       	mov	r24, r5
    e5b8:	0e 94 de 49 	call	0x93bc	; 0x93bc <remote_tds_get_last_update(unsigned char)>
    e5bc:	58 2e       	mov	r5, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4286
      strcpy_P(str2, text_last_update);
    e5be:	68 ee       	ldi	r22, 0xE8	; 232
    e5c0:	70 e7       	ldi	r23, 0x70	; 112
    e5c2:	c3 01       	movw	r24, r6
    e5c4:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4287
      sprintf(str1, "%s: %d", str2, last_update);
    e5c8:	1f 92       	push	r1
    e5ca:	5f 92       	push	r5
    e5cc:	7f 92       	push	r7
    e5ce:	6f 92       	push	r6
    e5d0:	83 ee       	ldi	r24, 0xE3	; 227
    e5d2:	93 e0       	ldi	r25, 0x03	; 3
    e5d4:	9f 93       	push	r25
    e5d6:	8f 93       	push	r24
    e5d8:	df 92       	push	r13
    e5da:	cf 92       	push	r12
    e5dc:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4288
      show_string(str1, x + 5, y + 100 , 1, BLACK, WHITE, 0);
    e5e0:	21 e0       	ldi	r18, 0x01	; 1
    e5e2:	a5 01       	movw	r20, r10
    e5e4:	4c 59       	subi	r20, 0x9C	; 156
    e5e6:	5f 4f       	sbci	r21, 0xFF	; 255
    e5e8:	b4 01       	movw	r22, r8
    e5ea:	c6 01       	movw	r24, r12
    e5ec:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4290
      active = 1;
      if (last_update >= 250) active = 0;
    e5f0:	0f b6       	in	r0, 0x3f	; 63
    e5f2:	f8 94       	cli
    e5f4:	de bf       	out	0x3e, r29	; 62
    e5f6:	0f be       	out	0x3f, r0	; 63
    e5f8:	cd bf       	out	0x3d, r28	; 61
    e5fa:	99 ef       	ldi	r25, 0xF9	; 249
    e5fc:	95 15       	cp	r25, r5
    e5fe:	08 f4       	brcc	.+2      	; 0xe602 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x198>
    e600:	44 c0       	rjmp	.+136    	; 0xe68a <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x220>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4289
      /// posledni aktualizace
      last_update = remote_tds_get_last_update(args2);
      strcpy_P(str2, text_last_update);
      sprintf(str1, "%s: %d", str2, last_update);
      show_string(str1, x + 5, y + 100 , 1, BLACK, WHITE, 0);
      active = 1;
    e602:	81 e0       	ldi	r24, 0x01	; 1
    e604:	2e 96       	adiw	r28, 0x0e	; 14
    e606:	8f af       	std	Y+63, r24	; 0x3f
    e608:	2e 97       	sbiw	r28, 0x0e	; 14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4291
      if (last_update >= 250) active = 0;
      strcpy_P(str2, text_online);
    e60a:	61 ee       	ldi	r22, 0xE1	; 225
    e60c:	70 e7       	ldi	r23, 0x70	; 112
    e60e:	c3 01       	movw	r24, r6
    e610:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4292
      sprintf(str1, "%s: %d", str2, active);
    e614:	2e 96       	adiw	r28, 0x0e	; 14
    e616:	8f ad       	ldd	r24, Y+63	; 0x3f
    e618:	2e 97       	sbiw	r28, 0x0e	; 14
    e61a:	1f 92       	push	r1
    e61c:	8f 93       	push	r24
    e61e:	7f 92       	push	r7
    e620:	6f 92       	push	r6
    e622:	83 ee       	ldi	r24, 0xE3	; 227
    e624:	93 e0       	ldi	r25, 0x03	; 3
    e626:	9f 93       	push	r25
    e628:	8f 93       	push	r24
    e62a:	df 92       	push	r13
    e62c:	cf 92       	push	r12
    e62e:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4293
      show_string(str1, x + 5, y + 120 , 2, BLACK, WHITE, 0);
    e632:	a5 01       	movw	r20, r10
    e634:	48 58       	subi	r20, 0x88	; 136
    e636:	5f 4f       	sbci	r21, 0xFF	; 255
    e638:	ee 24       	eor	r14, r14
    e63a:	ea 94       	dec	r14
    e63c:	fe 2c       	mov	r15, r14
    e63e:	10 e0       	ldi	r17, 0x00	; 0
    e640:	00 e0       	ldi	r16, 0x00	; 0
    e642:	22 e0       	ldi	r18, 0x02	; 2
    e644:	b4 01       	movw	r22, r8
    e646:	c6 01       	movw	r24, r12
    e648:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
    e64c:	0f b6       	in	r0, 0x3f	; 63
    e64e:	f8 94       	cli
    e650:	de bf       	out	0x3e, r29	; 62
    e652:	0f be       	out	0x3f, r0	; 63
    e654:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4296
    }
  }
}
    e656:	c3 5b       	subi	r28, 0xB3	; 179
    e658:	df 4f       	sbci	r29, 0xFF	; 255
    e65a:	0f b6       	in	r0, 0x3f	; 63
    e65c:	f8 94       	cli
    e65e:	de bf       	out	0x3e, r29	; 62
    e660:	0f be       	out	0x3f, r0	; 63
    e662:	cd bf       	out	0x3d, r28	; 61
    e664:	df 91       	pop	r29
    e666:	cf 91       	pop	r28
    e668:	1f 91       	pop	r17
    e66a:	0f 91       	pop	r16
    e66c:	ff 90       	pop	r15
    e66e:	ef 90       	pop	r14
    e670:	df 90       	pop	r13
    e672:	cf 90       	pop	r12
    e674:	bf 90       	pop	r11
    e676:	af 90       	pop	r10
    e678:	9f 90       	pop	r9
    e67a:	8f 90       	pop	r8
    e67c:	7f 90       	pop	r7
    e67e:	6f 90       	pop	r6
    e680:	5f 90       	pop	r5
    e682:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1937
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int value = 0;
    e684:	90 e0       	ldi	r25, 0x00	; 0
    e686:	80 e0       	ldi	r24, 0x00	; 0
    e688:	66 cf       	rjmp	.-308    	; 0xe556 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4290
      last_update = remote_tds_get_last_update(args2);
      strcpy_P(str2, text_last_update);
      sprintf(str1, "%s: %d", str2, last_update);
      show_string(str1, x + 5, y + 100 , 1, BLACK, WHITE, 0);
      active = 1;
      if (last_update >= 250) active = 0;
    e68a:	2e 96       	adiw	r28, 0x0e	; 14
    e68c:	1f ae       	std	Y+63, r1	; 0x3f
    e68e:	2e 97       	sbiw	r28, 0x0e	; 14
    e690:	bc cf       	rjmp	.-136    	; 0xe60a <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1a0>

0000e692 <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3046
  }
*/
///
///
void send_mqtt_remote_tds_status(void)
{
    e692:	cf 92       	push	r12
    e694:	df 92       	push	r13
    e696:	ef 92       	push	r14
    e698:	ff 92       	push	r15
    e69a:	1f 93       	push	r17
    e69c:	cf 93       	push	r28
    e69e:	df 93       	push	r29
    e6a0:	cd b7       	in	r28, 0x3d	; 61
    e6a2:	de b7       	in	r29, 0x3e	; 62
    e6a4:	63 97       	sbiw	r28, 0x13	; 19
    e6a6:	0f b6       	in	r0, 0x3f	; 63
    e6a8:	f8 94       	cli
    e6aa:	de bf       	out	0x3e, r29	; 62
    e6ac:	0f be       	out	0x3f, r0	; 63
    e6ae:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3047
  uint8_t active = 0;
    e6b0:	1b 8a       	std	Y+19, r1	; 0x13
    e6b2:	86 e6       	ldi	r24, 0x66	; 102
    e6b4:	c8 2e       	mov	r12, r24
    e6b6:	d1 2c       	mov	r13, r1
    e6b8:	e1 2c       	mov	r14, r1
    e6ba:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3049
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e6bc:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3051
  {
    remote_tds_get_complete(idx, &active, payload);
    e6be:	ae 01       	movw	r20, r28
    e6c0:	4f 5f       	subi	r20, 0xFF	; 255
    e6c2:	5f 4f       	sbci	r21, 0xFF	; 255
    e6c4:	be 01       	movw	r22, r28
    e6c6:	6d 5e       	subi	r22, 0xED	; 237
    e6c8:	7f 4f       	sbci	r23, 0xFF	; 255
    e6ca:	81 2f       	mov	r24, r17
    e6cc:	0e 94 b3 6f 	call	0xdf66	; 0xdf66 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3053
    /// odeslu pouze pokud je neco aktivni, jinak ne
    if (active == 1)
    e6d0:	8b 89       	ldd	r24, Y+19	; 0x13
    e6d2:	81 30       	cpi	r24, 0x01	; 1
    e6d4:	09 f0       	breq	.+2      	; 0xe6d8 <send_mqtt_remote_tds_status()+0x46>
    e6d6:	58 c0       	rjmp	.+176    	; 0xe788 <send_mqtt_remote_tds_status()+0xf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3055
    {
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "name", payload);
    e6d8:	9e 01       	movw	r18, r28
    e6da:	2f 5f       	subi	r18, 0xFF	; 255
    e6dc:	3f 4f       	sbci	r19, 0xFF	; 255
    e6de:	4a ee       	ldi	r20, 0xEA	; 234
    e6e0:	53 e0       	ldi	r21, 0x03	; 3
    e6e2:	61 2f       	mov	r22, r17
    e6e4:	8f ee       	ldi	r24, 0xEF	; 239
    e6e6:	93 e0       	ldi	r25, 0x03	; 3
    e6e8:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3056
      itoa(active, payload, 10);
    e6ec:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    e6ee:	4a e0       	ldi	r20, 0x0A	; 10
    e6f0:	be 01       	movw	r22, r28
    e6f2:	6f 5f       	subi	r22, 0xFF	; 255
    e6f4:	7f 4f       	sbci	r23, 0xFF	; 255
    e6f6:	90 e0       	ldi	r25, 0x00	; 0
    e6f8:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3057
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
    e6fc:	9e 01       	movw	r18, r28
    e6fe:	2f 5f       	subi	r18, 0xFF	; 255
    e700:	3f 4f       	sbci	r19, 0xFF	; 255
    e702:	44 ef       	ldi	r20, 0xF4	; 244
    e704:	53 e0       	ldi	r21, 0x03	; 3
    e706:	61 2f       	mov	r22, r17
    e708:	8f ee       	ldi	r24, 0xEF	; 239
    e70a:	93 e0       	ldi	r25, 0x03	; 3
    e70c:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
remote_tds_get_data():
    e710:	81 2f       	mov	r24, r17
    e712:	0e 94 b8 49 	call	0x9370	; 0x9370 <remote_tds_get_data(unsigned char) [clone .part.31]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    e716:	4a e0       	ldi	r20, 0x0A	; 10
    e718:	be 01       	movw	r22, r28
    e71a:	6f 5f       	subi	r22, 0xFF	; 255
    e71c:	7f 4f       	sbci	r23, 0xFF	; 255
    e71e:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3059
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "value", payload);
    e722:	9e 01       	movw	r18, r28
    e724:	2f 5f       	subi	r18, 0xFF	; 255
    e726:	3f 4f       	sbci	r19, 0xFF	; 255
    e728:	4b ef       	ldi	r20, 0xFB	; 251
    e72a:	53 e0       	ldi	r21, 0x03	; 3
    e72c:	61 2f       	mov	r22, r17
    e72e:	8f ee       	ldi	r24, 0xEF	; 239
    e730:	93 e0       	ldi	r25, 0x03	; 3
    e732:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3060
      itoa(remote_tds_get_type(idx), payload, 10);
    e736:	81 2f       	mov	r24, r17
    e738:	0e 94 ee 49 	call	0x93dc	; 0x93dc <remote_tds_get_type(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    e73c:	4a e0       	ldi	r20, 0x0A	; 10
    e73e:	be 01       	movw	r22, r28
    e740:	6f 5f       	subi	r22, 0xFF	; 255
    e742:	7f 4f       	sbci	r23, 0xFF	; 255
    e744:	90 e0       	ldi	r25, 0x00	; 0
    e746:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3061
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "type", payload);
    e74a:	9e 01       	movw	r18, r28
    e74c:	2f 5f       	subi	r18, 0xFF	; 255
    e74e:	3f 4f       	sbci	r19, 0xFF	; 255
    e750:	41 e0       	ldi	r20, 0x01	; 1
    e752:	54 e0       	ldi	r21, 0x04	; 4
    e754:	61 2f       	mov	r22, r17
    e756:	8f ee       	ldi	r24, 0xEF	; 239
    e758:	93 e0       	ldi	r25, 0x03	; 3
    e75a:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1950
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    e75e:	c7 01       	movw	r24, r14
    e760:	b6 01       	movw	r22, r12
    e762:	0e 94 2c ae 	call	0x15c58	; 0x15c58 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    e766:	4a e0       	ldi	r20, 0x0A	; 10
    e768:	be 01       	movw	r22, r28
    e76a:	6f 5f       	subi	r22, 0xFF	; 255
    e76c:	7f 4f       	sbci	r23, 0xFF	; 255
    e76e:	90 e0       	ldi	r25, 0x00	; 0
    e770:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3063
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "value", payload);
      itoa(remote_tds_get_type(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "type", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    e774:	9e 01       	movw	r18, r28
    e776:	2f 5f       	subi	r18, 0xFF	; 255
    e778:	3f 4f       	sbci	r19, 0xFF	; 255
    e77a:	46 e0       	ldi	r20, 0x06	; 6
    e77c:	54 e0       	ldi	r21, 0x04	; 4
    e77e:	61 2f       	mov	r22, r17
    e780:	8f ee       	ldi	r24, 0xEF	; 239
    e782:	93 e0       	ldi	r25, 0x03	; 3
    e784:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3049
///
void send_mqtt_remote_tds_status(void)
{
  uint8_t active = 0;
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e788:	1f 5f       	subi	r17, 0xFF	; 255
    e78a:	84 e0       	ldi	r24, 0x04	; 4
    e78c:	c8 0e       	add	r12, r24
    e78e:	d1 1c       	adc	r13, r1
    e790:	e1 1c       	adc	r14, r1
    e792:	f1 1c       	adc	r15, r1
    e794:	8e e8       	ldi	r24, 0x8E	; 142
    e796:	c8 16       	cp	r12, r24
    e798:	d1 04       	cpc	r13, r1
    e79a:	e1 04       	cpc	r14, r1
    e79c:	f1 04       	cpc	r15, r1
    e79e:	09 f0       	breq	.+2      	; 0xe7a2 <send_mqtt_remote_tds_status()+0x110>
    e7a0:	8e cf       	rjmp	.-228    	; 0xe6be <send_mqtt_remote_tds_status()+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3066
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "type", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    }
  }
}
    e7a2:	63 96       	adiw	r28, 0x13	; 19
    e7a4:	0f b6       	in	r0, 0x3f	; 63
    e7a6:	f8 94       	cli
    e7a8:	de bf       	out	0x3e, r29	; 62
    e7aa:	0f be       	out	0x3f, r0	; 63
    e7ac:	cd bf       	out	0x3d, r28	; 61
    e7ae:	df 91       	pop	r29
    e7b0:	cf 91       	pop	r28
    e7b2:	1f 91       	pop	r17
    e7b4:	ff 90       	pop	r15
    e7b6:	ef 90       	pop	r14
    e7b8:	df 90       	pop	r13
    e7ba:	cf 90       	pop	r12
    e7bc:	08 95       	ret

0000e7be <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1896
   navratove hodnoty
   255 ... nenalezeno
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
    e7be:	ef 92       	push	r14
    e7c0:	ff 92       	push	r15
    e7c2:	0f 93       	push	r16
    e7c4:	1f 93       	push	r17
    e7c6:	cf 93       	push	r28
    e7c8:	df 93       	push	r29
    e7ca:	cd b7       	in	r28, 0x3d	; 61
    e7cc:	de b7       	in	r29, 0x3e	; 62
    e7ce:	63 97       	sbiw	r28, 0x13	; 19
    e7d0:	0f b6       	in	r0, 0x3f	; 63
    e7d2:	f8 94       	cli
    e7d4:	de bf       	out	0x3e, r29	; 62
    e7d6:	0f be       	out	0x3f, r0	; 63
    e7d8:	cd bf       	out	0x3d, r28	; 61
    e7da:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1900
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e7dc:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1898
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
    e7de:	0f ef       	ldi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1902
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_complete(idx, &active, tmp_name);
    e7e0:	ae 01       	movw	r20, r28
    e7e2:	4f 5f       	subi	r20, 0xFF	; 255
    e7e4:	5f 4f       	sbci	r21, 0xFF	; 255
    e7e6:	be 01       	movw	r22, r28
    e7e8:	6d 5e       	subi	r22, 0xED	; 237
    e7ea:	7f 4f       	sbci	r23, 0xFF	; 255
    e7ec:	81 2f       	mov	r24, r17
    e7ee:	0e 94 b3 6f 	call	0xdf66	; 0xdf66 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1903
    if (strcmp(name, tmp_name) == 0)
    e7f2:	be 01       	movw	r22, r28
    e7f4:	6f 5f       	subi	r22, 0xFF	; 255
    e7f6:	7f 4f       	sbci	r23, 0xFF	; 255
    e7f8:	c7 01       	movw	r24, r14
    e7fa:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
    e7fe:	89 2b       	or	r24, r25
    e800:	09 f4       	brne	.+2      	; 0xe804 <remote_tds_name_exist(char*)+0x46>
    e802:	01 2f       	mov	r16, r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1900
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e804:	1f 5f       	subi	r17, 0xFF	; 255
    e806:	1a 30       	cpi	r17, 0x0A	; 10
    e808:	59 f7       	brne	.-42     	; 0xe7e0 <remote_tds_name_exist(char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1907
    remote_tds_get_complete(idx, &active, tmp_name);
    if (strcmp(name, tmp_name) == 0)
      found = idx;
  }
  return found;
}
    e80a:	80 2f       	mov	r24, r16
    e80c:	63 96       	adiw	r28, 0x13	; 19
    e80e:	0f b6       	in	r0, 0x3f	; 63
    e810:	f8 94       	cli
    e812:	de bf       	out	0x3e, r29	; 62
    e814:	0f be       	out	0x3f, r0	; 63
    e816:	cd bf       	out	0x3d, r28	; 61
    e818:	df 91       	pop	r29
    e81a:	cf 91       	pop	r28
    e81c:	1f 91       	pop	r17
    e81e:	0f 91       	pop	r16
    e820:	ff 90       	pop	r15
    e822:	ef 90       	pop	r14
    e824:	08 95       	ret

0000e826 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4729
      remote_tds_subscibe_topic(idx);
    }
}

void menu_rtds_update_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e826:	1f 93       	push	r17
    e828:	cf 93       	push	r28
    e82a:	df 93       	push	r29
    e82c:	cd b7       	in	r28, 0x3d	; 61
    e82e:	de b7       	in	r29, 0x3e	; 62
    e830:	62 97       	sbiw	r28, 0x12	; 18
    e832:	0f b6       	in	r0, 0x3f	; 63
    e834:	f8 94       	cli
    e836:	de bf       	out	0x3e, r29	; 62
    e838:	0f be       	out	0x3f, r0	; 63
    e83a:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1387
  dialog_save_valid_function = valid_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    e83c:	10 91 f3 09 	lds	r17, 0x09F3	; 0x8009f3 <dialog_set_string_args>
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4732

void menu_rtds_update_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
    e840:	ce 01       	movw	r24, r28
    e842:	01 96       	adiw	r24, 0x01	; 1
    e844:	0e 94 2c 4b 	call	0x9658	; 0x9658 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4734
  //printf("update %s, %d\n", name, idx);
  if (strlen(name) > 0)
    e848:	89 81       	ldd	r24, Y+1	; 0x01
    e84a:	88 23       	and	r24, r24
    e84c:	71 f0       	breq	.+28     	; 0xe86a <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4736
  {
    if (remote_tds_name_exist(name) == 255)
    e84e:	ce 01       	movw	r24, r28
    e850:	01 96       	adiw	r24, 0x01	; 1
    e852:	0e 94 df 73 	call	0xe7be	; 0xe7be <remote_tds_name_exist(char*)>
    e856:	8f 3f       	cpi	r24, 0xFF	; 255
    e858:	41 f4       	brne	.+16     	; 0xe86a <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x44>
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1799
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    e85a:	1a 30       	cpi	r17, 0x0A	; 10
    e85c:	30 f4       	brcc	.+12     	; 0xe86a <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x44>
    e85e:	be 01       	movw	r22, r28
    e860:	6f 5f       	subi	r22, 0xFF	; 255
    e862:	7f 4f       	sbci	r23, 0xFF	; 255
    e864:	81 2f       	mov	r24, r17
    e866:	0e 94 6b 65 	call	0xcad6	; 0xcad6 <remote_tds_set_name(unsigned char, char*) [clone .part.24]>
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4739
  if (strlen(name) > 0)
  {
    if (remote_tds_name_exist(name) == 255)
      remote_tds_set_name(idx, name);
  }
}
    e86a:	62 96       	adiw	r28, 0x12	; 18
    e86c:	0f b6       	in	r0, 0x3f	; 63
    e86e:	f8 94       	cli
    e870:	de bf       	out	0x3e, r29	; 62
    e872:	0f be       	out	0x3f, r0	; 63
    e874:	cd bf       	out	0x3d, r28	; 61
    e876:	df 91       	pop	r29
    e878:	cf 91       	pop	r28
    e87a:	1f 91       	pop	r17
    e87c:	08 95       	ret

0000e87e <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1843
  idx - index nazvu topicu, ktery si chci subscribnout/unsubscribnout
*/


void remote_tds_subscibe_topic(uint8_t idx)
{
    e87e:	cf 93       	push	r28
    e880:	df 93       	push	r29
    e882:	cd b7       	in	r28, 0x3d	; 61
    e884:	de b7       	in	r29, 0x3e	; 62
    e886:	c1 58       	subi	r28, 0x81	; 129
    e888:	d1 09       	sbc	r29, r1
    e88a:	0f b6       	in	r0, 0x3f	; 63
    e88c:	f8 94       	cli
    e88e:	de bf       	out	0x3e, r29	; 62
    e890:	0f be       	out	0x3f, r0	; 63
    e892:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1846
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    e894:	cf 57       	subi	r28, 0x7F	; 127
    e896:	df 4f       	sbci	r29, 0xFF	; 255
    e898:	18 82       	st	Y, r1
    e89a:	c1 58       	subi	r28, 0x81	; 129
    e89c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1847
  remote_tds_get_complete(idx, &active, tmp1);
    e89e:	ae 01       	movw	r20, r28
    e8a0:	4f 5f       	subi	r20, 0xFF	; 255
    e8a2:	5f 4f       	sbci	r21, 0xFF	; 255
    e8a4:	be 01       	movw	r22, r28
    e8a6:	6f 57       	subi	r22, 0x7F	; 127
    e8a8:	7f 4f       	sbci	r23, 0xFF	; 255
    e8aa:	0e 94 b3 6f 	call	0xdf66	; 0xdf66 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1848
  if (active == 1)
    e8ae:	cf 57       	subi	r28, 0x7F	; 127
    e8b0:	df 4f       	sbci	r29, 0xFF	; 255
    e8b2:	88 81       	ld	r24, Y
    e8b4:	c1 58       	subi	r28, 0x81	; 129
    e8b6:	d0 40       	sbci	r29, 0x00	; 0
    e8b8:	81 30       	cpi	r24, 0x01	; 1
    e8ba:	d9 f4       	brne	.+54     	; 0xe8f2 <remote_tds_subscibe_topic(unsigned char)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1850
  {
    strcpy_P(tmp2, new_text_slash_rtds_slash); /// /rtds/
    e8bc:	6a e6       	ldi	r22, 0x6A	; 106
    e8be:	7e e6       	ldi	r23, 0x6E	; 110
    e8c0:	ce 01       	movw	r24, r28
    e8c2:	8f 5b       	subi	r24, 0xBF	; 191
    e8c4:	9f 4f       	sbci	r25, 0xFF	; 255
    e8c6:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1851
    strcat(tmp2, tmp1);
    e8ca:	be 01       	movw	r22, r28
    e8cc:	6f 5f       	subi	r22, 0xFF	; 255
    e8ce:	7f 4f       	sbci	r23, 0xFF	; 255
    e8d0:	ce 01       	movw	r24, r28
    e8d2:	8f 5b       	subi	r24, 0xBF	; 191
    e8d4:	9f 4f       	sbci	r25, 0xFF	; 255
    e8d6:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1852
    strcat(tmp2, "/#");
    e8da:	60 ef       	ldi	r22, 0xF0	; 240
    e8dc:	76 e0       	ldi	r23, 0x06	; 6
    e8de:	ce 01       	movw	r24, r28
    e8e0:	8f 5b       	subi	r24, 0xBF	; 191
    e8e2:	9f 4f       	sbci	r25, 0xFF	; 255
    e8e4:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1853
    mqtt_client.subscribe(tmp2);
    e8e8:	ce 01       	movw	r24, r28
    e8ea:	8f 5b       	subi	r24, 0xBF	; 191
    e8ec:	9f 4f       	sbci	r25, 0xFF	; 255
    e8ee:	0e 94 24 b1 	call	0x16248	; 0x16248 <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1855
  }
}
    e8f2:	cf 57       	subi	r28, 0x7F	; 127
    e8f4:	df 4f       	sbci	r29, 0xFF	; 255
    e8f6:	0f b6       	in	r0, 0x3f	; 63
    e8f8:	f8 94       	cli
    e8fa:	de bf       	out	0x3e, r29	; 62
    e8fc:	0f be       	out	0x3f, r0	; 63
    e8fe:	cd bf       	out	0x3d, r28	; 61
    e900:	df 91       	pop	r29
    e902:	cf 91       	pop	r28
    e904:	08 95       	ret

0000e906 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_create_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4714
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx, &menu_rtds_create_name, &valid_true);
  }
}

void menu_rtds_create_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e906:	1f 93       	push	r17
    e908:	cf 93       	push	r28
    e90a:	df 93       	push	r29
    e90c:	cd b7       	in	r28, 0x3d	; 61
    e90e:	de b7       	in	r29, 0x3e	; 62
    e910:	62 97       	sbiw	r28, 0x12	; 18
    e912:	0f b6       	in	r0, 0x3f	; 63
    e914:	f8 94       	cli
    e916:	de bf       	out	0x3e, r29	; 62
    e918:	0f be       	out	0x3f, r0	; 63
    e91a:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1387
  dialog_save_valid_function = valid_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    e91c:	10 91 f3 09 	lds	r17, 0x09F3	; 0x8009f3 <dialog_set_string_args>
_Z21menu_rtds_create_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4718
void menu_rtds_create_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active = 1;
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
    e920:	ce 01       	movw	r24, r28
    e922:	01 96       	adiw	r24, 0x01	; 1
    e924:	0e 94 2c 4b 	call	0x9658	; 0x9658 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4720
  //printf("create %s, %d\n", name, idx);
  if (strlen(name) > 0)
    e928:	89 81       	ldd	r24, Y+1	; 0x01
    e92a:	88 23       	and	r24, r24
    e92c:	81 f0       	breq	.+32     	; 0xe94e <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4721
    if (remote_tds_name_exist(name) == 255)
    e92e:	ce 01       	movw	r24, r28
    e930:	01 96       	adiw	r24, 0x01	; 1
    e932:	0e 94 df 73 	call	0xe7be	; 0xe7be <remote_tds_name_exist(char*)>
    e936:	8f 3f       	cpi	r24, 0xFF	; 255
    e938:	51 f4       	brne	.+20     	; 0xe94e <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4723
    {
      remote_tds_set_complete(idx, active, name);
    e93a:	ae 01       	movw	r20, r28
    e93c:	4f 5f       	subi	r20, 0xFF	; 255
    e93e:	5f 4f       	sbci	r21, 0xFF	; 255
    e940:	61 e0       	ldi	r22, 0x01	; 1
    e942:	81 2f       	mov	r24, r17
    e944:	0e 94 2f 66 	call	0xcc5e	; 0xcc5e <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4724
      remote_tds_subscibe_topic(idx);
    e948:	81 2f       	mov	r24, r17
    e94a:	0e 94 3f 74 	call	0xe87e	; 0xe87e <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4726
    }
}
    e94e:	62 96       	adiw	r28, 0x12	; 18
    e950:	0f b6       	in	r0, 0x3f	; 63
    e952:	f8 94       	cli
    e954:	de bf       	out	0x3e, r29	; 62
    e956:	0f be       	out	0x3f, r0	; 63
    e958:	cd bf       	out	0x3d, r28	; 61
    e95a:	df 91       	pop	r29
    e95c:	cf 91       	pop	r28
    e95e:	1f 91       	pop	r17
    e960:	08 95       	ret

0000e962 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>:
_Z20click_rtds_subscribejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4598
  remote_tds_clear(args2);
  MenuHistoryPrevMenu(0, 0, 0);
}
////
void click_rtds_subscribe(uint16_t args1, uint16_t idx, uint8_t args3)
{
    e962:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4599
  remote_tds_subscibe_topic(idx);
    e964:	0c 94 3f 74 	jmp	0xe87e	; 0xe87e <remote_tds_subscibe_topic(unsigned char)>

0000e968 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z29display_menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1469
  display_element_set_string(name, 8, args2, &menu_tds_save_name, &valid_true);
  //dialog_save_variable_function = ;
}
/// funkce pro nastaveni nazvu rtds
void display_menu_rtds_update_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e968:	1f 93       	push	r17
    e96a:	cf 93       	push	r28
    e96c:	df 93       	push	r29
    e96e:	cd b7       	in	r28, 0x3d	; 61
    e970:	de b7       	in	r29, 0x3e	; 62
    e972:	63 97       	sbiw	r28, 0x13	; 19
    e974:	0f b6       	in	r0, 0x3f	; 63
    e976:	f8 94       	cli
    e978:	de bf       	out	0x3e, r29	; 62
    e97a:	0f be       	out	0x3f, r0	; 63
    e97c:	cd bf       	out	0x3d, r28	; 61
    e97e:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1472
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
    e980:	ae 01       	movw	r20, r28
    e982:	4f 5f       	subi	r20, 0xFF	; 255
    e984:	5f 4f       	sbci	r21, 0xFF	; 255
    e986:	be 01       	movw	r22, r28
    e988:	6d 5e       	subi	r22, 0xED	; 237
    e98a:	7f 4f       	sbci	r23, 0xFF	; 255
    e98c:	81 2f       	mov	r24, r17
    e98e:	0e 94 b3 6f 	call	0xdf66	; 0xdf66 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1473
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    e992:	70 e0       	ldi	r23, 0x00	; 0
    e994:	60 e0       	ldi	r22, 0x00	; 0
    e996:	87 e6       	ldi	r24, 0x67	; 103
    e998:	90 e0       	ldi	r25, 0x00	; 0
    e99a:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    e99e:	be 01       	movw	r22, r28
    e9a0:	6f 5f       	subi	r22, 0xFF	; 255
    e9a2:	7f 4f       	sbci	r23, 0xFF	; 255
    e9a4:	85 ef       	ldi	r24, 0xF5	; 245
    e9a6:	99 e0       	ldi	r25, 0x09	; 9
    e9a8:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1379
  dialog_set_string_max_length = max_length;
    e9ac:	82 e1       	ldi	r24, 0x12	; 18
    e9ae:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1380
  dialog_set_string_args = idx;
    e9b2:	10 93 f3 09 	sts	0x09F3, r17	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1381
  dialog_save_string_function = save_function;
    e9b6:	83 e1       	ldi	r24, 0x13	; 19
    e9b8:	94 e7       	ldi	r25, 0x74	; 116
    e9ba:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    e9be:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1382
  dialog_save_valid_function = valid_function;
    e9c2:	87 ea       	ldi	r24, 0xA7	; 167
    e9c4:	96 e4       	ldi	r25, 0x46	; 70
    e9c6:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    e9ca:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z29display_menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1476
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
  display_element_set_string(name, RTDS_DEVICE_STRING_LEN, args2, &menu_rtds_update_name, &valid_true);
  //dialog_save_variable_function = ;
}
    e9ce:	63 96       	adiw	r28, 0x13	; 19
    e9d0:	0f b6       	in	r0, 0x3f	; 63
    e9d2:	f8 94       	cli
    e9d4:	de bf       	out	0x3e, r29	; 62
    e9d6:	0f be       	out	0x3f, r0	; 63
    e9d8:	cd bf       	out	0x3d, r28	; 61
    e9da:	df 91       	pop	r29
    e9dc:	cf 91       	pop	r28
    e9de:	1f 91       	pop	r17
    e9e0:	08 95       	ret

0000e9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:135
}



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
    e9e2:	4f 92       	push	r4
    e9e4:	5f 92       	push	r5
    e9e6:	6f 92       	push	r6
    e9e8:	7f 92       	push	r7
    e9ea:	8f 92       	push	r8
    e9ec:	9f 92       	push	r9
    e9ee:	af 92       	push	r10
    e9f0:	bf 92       	push	r11
    e9f2:	cf 92       	push	r12
    e9f4:	df 92       	push	r13
    e9f6:	ef 92       	push	r14
    e9f8:	ff 92       	push	r15
    e9fa:	0f 93       	push	r16
    e9fc:	1f 93       	push	r17
    e9fe:	cf 93       	push	r28
    ea00:	df 93       	push	r29
    ea02:	00 d0       	rcall	.+0      	; 0xea04 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x22>
    ea04:	00 d0       	rcall	.+0      	; 0xea06 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
    ea06:	1f 92       	push	r1
    ea08:	1f 92       	push	r1
    ea0a:	cd b7       	in	r28, 0x3d	; 61
    ea0c:	de b7       	in	r29, 0x3e	; 62
    ea0e:	6c 01       	movw	r12, r24
    ea10:	46 2e       	mov	r4, r22
    ea12:	52 2e       	mov	r5, r18
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:137
  char tmp1[8];
  str[0] = 0;
    ea14:	fc 01       	movw	r30, r24
    ea16:	10 82       	st	Z, r1
    ea18:	3a 01       	movw	r6, r20
    ea1a:	f1 2c       	mov	r15, r1
    ea1c:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:140
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
    ea1e:	a0 2e       	mov	r10, r16
    ea20:	b1 2c       	mov	r11, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
    ea22:	8e 01       	movw	r16, r28
    ea24:	0f 5f       	subi	r16, 0xFF	; 255
    ea26:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:144
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
    ea28:	82 2f       	mov	r24, r18
    ea2a:	81 50       	subi	r24, 0x01	; 1
    ea2c:	99 0b       	sbc	r25, r25
    ea2e:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:140
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
    ea30:	f3 01       	movw	r30, r6
    ea32:	81 91       	ld	r24, Z+
    ea34:	3f 01       	movw	r6, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
    ea36:	a5 01       	movw	r20, r10
    ea38:	b8 01       	movw	r22, r16
    ea3a:	90 e0       	ldi	r25, 0x00	; 0
    ea3c:	0e 94 81 e5 	call	0x1cb02	; 0x1cb02 <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:141
    if (strlen(tmp1) < 2)
    ea40:	f8 01       	movw	r30, r16
    ea42:	01 90       	ld	r0, Z+
    ea44:	00 20       	and	r0, r0
    ea46:	e9 f7       	brne	.-6      	; 0xea42 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x60>
    ea48:	31 97       	sbiw	r30, 0x01	; 1
    ea4a:	e0 1b       	sub	r30, r16
    ea4c:	f1 0b       	sbc	r31, r17
    ea4e:	32 97       	sbiw	r30, 0x02	; 2
    ea50:	28 f4       	brcc	.+10     	; 0xea5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x7a>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:142
      strcat(str, "0");
    ea52:	62 e1       	ldi	r22, 0x12	; 18
    ea54:	74 e0       	ldi	r23, 0x04	; 4
    ea56:	c6 01       	movw	r24, r12
    ea58:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:143
    strcat(str, tmp1); 
    ea5c:	b8 01       	movw	r22, r16
    ea5e:	c6 01       	movw	r24, r12
    ea60:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:144
    if (a < maxBytes - 1)
    ea64:	e8 14       	cp	r14, r8
    ea66:	f9 04       	cpc	r15, r9
    ea68:	34 f4       	brge	.+12     	; 0xea76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x94>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:146
    {
      tmp1[0] = sep;
    ea6a:	49 82       	std	Y+1, r4	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:147
      tmp1[1] = 0;
    ea6c:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:148
      strcat(str, tmp1);
    ea6e:	b8 01       	movw	r22, r16
    ea70:	c6 01       	movw	r24, r12
    ea72:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
    ea76:	ff ef       	ldi	r31, 0xFF	; 255
    ea78:	ef 1a       	sub	r14, r31
    ea7a:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:138

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
    ea7c:	e5 14       	cp	r14, r5
    ea7e:	c0 f2       	brcs	.-80     	; 0xea30 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:151
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
    ea80:	28 96       	adiw	r28, 0x08	; 8
    ea82:	0f b6       	in	r0, 0x3f	; 63
    ea84:	f8 94       	cli
    ea86:	de bf       	out	0x3e, r29	; 62
    ea88:	0f be       	out	0x3f, r0	; 63
    ea8a:	cd bf       	out	0x3d, r28	; 61
    ea8c:	df 91       	pop	r29
    ea8e:	cf 91       	pop	r28
    ea90:	1f 91       	pop	r17
    ea92:	0f 91       	pop	r16
    ea94:	ff 90       	pop	r15
    ea96:	ef 90       	pop	r14
    ea98:	df 90       	pop	r13
    ea9a:	cf 90       	pop	r12
    ea9c:	bf 90       	pop	r11
    ea9e:	af 90       	pop	r10
    eaa0:	9f 90       	pop	r9
    eaa2:	8f 90       	pop	r8
    eaa4:	7f 90       	pop	r7
    eaa6:	6f 90       	pop	r6
    eaa8:	5f 90       	pop	r5
    eaaa:	4f 90       	pop	r4
    eaac:	08 95       	ret

0000eaae <display_element_show_network_detail(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_show_network_detailjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5732

   Funkce pro zobrazeni sitovych informaci

*/
void display_element_show_network_detail(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    eaae:	af 92       	push	r10
    eab0:	bf 92       	push	r11
    eab2:	cf 92       	push	r12
    eab4:	df 92       	push	r13
    eab6:	ef 92       	push	r14
    eab8:	ff 92       	push	r15
    eaba:	0f 93       	push	r16
    eabc:	1f 93       	push	r17
    eabe:	cf 93       	push	r28
    eac0:	df 93       	push	r29
    eac2:	cd b7       	in	r28, 0x3d	; 61
    eac4:	de b7       	in	r29, 0x3e	; 62
    eac6:	c2 54       	subi	r28, 0x42	; 66
    eac8:	d1 09       	sbc	r29, r1
    eaca:	0f b6       	in	r0, 0x3f	; 63
    eacc:	f8 94       	cli
    eace:	de bf       	out	0x3e, r29	; 62
    ead0:	0f be       	out	0x3f, r0	; 63
    ead2:	cd bf       	out	0x3d, r28	; 61
    ead4:	6c 01       	movw	r12, r24
    ead6:	5b 01       	movw	r10, r22
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    ead8:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    eadc:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
_Z35display_element_show_network_detailjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5736
  char str1[36];
  char str2[24];
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    eae0:	26 0f       	add	r18, r22
    eae2:	37 1f       	adc	r19, r23
    eae4:	48 0f       	add	r20, r24
    eae6:	59 1f       	adc	r21, r25
    eae8:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5738
  /// mac adresa
  strcpy_P(str1, new_text_device_mac);
    eaec:	6e ef       	ldi	r22, 0xFE	; 254
    eaee:	72 e7       	ldi	r23, 0x72	; 114
    eaf0:	ce 01       	movw	r24, r28
    eaf2:	01 96       	adiw	r24, 0x01	; 1
    eaf4:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5739
  strcat(str1, ": ");
    eaf8:	63 e4       	ldi	r22, 0x43	; 67
    eafa:	77 e0       	ldi	r23, 0x07	; 7
    eafc:	ce 01       	movw	r24, r28
    eafe:	01 96       	adiw	r24, 0x01	; 1
    eb00:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5740
  createString(str2, '.', device.mac, 6, 16);
    eb04:	00 e1       	ldi	r16, 0x10	; 16
    eb06:	26 e0       	ldi	r18, 0x06	; 6
    eb08:	49 e1       	ldi	r20, 0x19	; 25
    eb0a:	5e e0       	ldi	r21, 0x0E	; 14
    eb0c:	6e e2       	ldi	r22, 0x2E	; 46
    eb0e:	ce 01       	movw	r24, r28
    eb10:	85 96       	adiw	r24, 0x25	; 37
    eb12:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5741
  strcat(str1, str2);
    eb16:	be 01       	movw	r22, r28
    eb18:	6b 5d       	subi	r22, 0xDB	; 219
    eb1a:	7f 4f       	sbci	r23, 0xFF	; 255
    eb1c:	ce 01       	movw	r24, r28
    eb1e:	01 96       	adiw	r24, 0x01	; 1
    eb20:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5742
  show_string(str1, x + 5 , y + 10 , 1, BLACK, WHITE, 0);
    eb24:	85 e0       	ldi	r24, 0x05	; 5
    eb26:	c8 0e       	add	r12, r24
    eb28:	d1 1c       	adc	r13, r1
    eb2a:	a5 01       	movw	r20, r10
    eb2c:	46 5f       	subi	r20, 0xF6	; 246
    eb2e:	5f 4f       	sbci	r21, 0xFF	; 255
    eb30:	ee 24       	eor	r14, r14
    eb32:	ea 94       	dec	r14
    eb34:	fe 2c       	mov	r15, r14
    eb36:	10 e0       	ldi	r17, 0x00	; 0
    eb38:	00 e0       	ldi	r16, 0x00	; 0
    eb3a:	21 e0       	ldi	r18, 0x01	; 1
    eb3c:	b6 01       	movw	r22, r12
    eb3e:	ce 01       	movw	r24, r28
    eb40:	01 96       	adiw	r24, 0x01	; 1
    eb42:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5744
  /// nazev
  strcpy_P(str1, new_text_device_nazev);
    eb46:	6f ee       	ldi	r22, 0xEF	; 239
    eb48:	72 e7       	ldi	r23, 0x72	; 114
    eb4a:	ce 01       	movw	r24, r28
    eb4c:	01 96       	adiw	r24, 0x01	; 1
    eb4e:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5745
  strcat(str1, ": ");
    eb52:	63 e4       	ldi	r22, 0x43	; 67
    eb54:	77 e0       	ldi	r23, 0x07	; 7
    eb56:	ce 01       	movw	r24, r28
    eb58:	01 96       	adiw	r24, 0x01	; 1
    eb5a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5746
  strcat(str1, device.nazev);
    eb5e:	6f e2       	ldi	r22, 0x2F	; 47
    eb60:	7e e0       	ldi	r23, 0x0E	; 14
    eb62:	ce 01       	movw	r24, r28
    eb64:	01 96       	adiw	r24, 0x01	; 1
    eb66:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5747
  show_string(str1, x + 5 , y + 25 , 1, BLACK, WHITE, 0);
    eb6a:	a5 01       	movw	r20, r10
    eb6c:	47 5e       	subi	r20, 0xE7	; 231
    eb6e:	5f 4f       	sbci	r21, 0xFF	; 255
    eb70:	21 e0       	ldi	r18, 0x01	; 1
    eb72:	b6 01       	movw	r22, r12
    eb74:	ce 01       	movw	r24, r28
    eb76:	01 96       	adiw	r24, 0x01	; 1
    eb78:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5749
  /// ip adresa
  ip2CharArray(device.myIP, str2);
    eb7c:	6f e1       	ldi	r22, 0x1F	; 31
    eb7e:	7e e0       	ldi	r23, 0x0E	; 14
    eb80:	ce 01       	movw	r24, r28
    eb82:	cd 96       	adiw	r24, 0x3d	; 61
    eb84:	0e 94 d8 4c 	call	0x99b0	; 0x99b0 <IPAddress::IPAddress(unsigned char const*)>
    eb88:	be 01       	movw	r22, r28
    eb8a:	6b 5d       	subi	r22, 0xDB	; 219
    eb8c:	7f 4f       	sbci	r23, 0xFF	; 255
    eb8e:	ce 01       	movw	r24, r28
    eb90:	cd 96       	adiw	r24, 0x3d	; 61
    eb92:	0e 94 57 4b 	call	0x96ae	; 0x96ae <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5750
  strcpy_P(str1, new_text_device_ip);
    eb96:	65 ee       	ldi	r22, 0xE5	; 229
    eb98:	72 e7       	ldi	r23, 0x72	; 114
    eb9a:	ce 01       	movw	r24, r28
    eb9c:	01 96       	adiw	r24, 0x01	; 1
    eb9e:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5751
  strcat(str1, ": ");
    eba2:	63 e4       	ldi	r22, 0x43	; 67
    eba4:	77 e0       	ldi	r23, 0x07	; 7
    eba6:	ce 01       	movw	r24, r28
    eba8:	01 96       	adiw	r24, 0x01	; 1
    ebaa:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5752
  strcat(str1, str2);
    ebae:	be 01       	movw	r22, r28
    ebb0:	6b 5d       	subi	r22, 0xDB	; 219
    ebb2:	7f 4f       	sbci	r23, 0xFF	; 255
    ebb4:	ce 01       	movw	r24, r28
    ebb6:	01 96       	adiw	r24, 0x01	; 1
    ebb8:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5753
  show_string(str1, x + 5 , y + 55 , 1, BLACK, WHITE, 0);
    ebbc:	a5 01       	movw	r20, r10
    ebbe:	49 5c       	subi	r20, 0xC9	; 201
    ebc0:	5f 4f       	sbci	r21, 0xFF	; 255
    ebc2:	21 e0       	ldi	r18, 0x01	; 1
    ebc4:	b6 01       	movw	r22, r12
    ebc6:	ce 01       	movw	r24, r28
    ebc8:	01 96       	adiw	r24, 0x01	; 1
    ebca:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5755
  /// ip maska
  ip2CharArray(device.myMASK, str2);
    ebce:	63 e2       	ldi	r22, 0x23	; 35
    ebd0:	7e e0       	ldi	r23, 0x0E	; 14
    ebd2:	ce 01       	movw	r24, r28
    ebd4:	cd 96       	adiw	r24, 0x3d	; 61
    ebd6:	0e 94 d8 4c 	call	0x99b0	; 0x99b0 <IPAddress::IPAddress(unsigned char const*)>
    ebda:	be 01       	movw	r22, r28
    ebdc:	6b 5d       	subi	r22, 0xDB	; 219
    ebde:	7f 4f       	sbci	r23, 0xFF	; 255
    ebe0:	ce 01       	movw	r24, r28
    ebe2:	cd 96       	adiw	r24, 0x3d	; 61
    ebe4:	0e 94 57 4b 	call	0x96ae	; 0x96ae <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5756
  strcpy_P(str1, new_text_device_mask);
    ebe8:	6c ed       	ldi	r22, 0xDC	; 220
    ebea:	72 e7       	ldi	r23, 0x72	; 114
    ebec:	ce 01       	movw	r24, r28
    ebee:	01 96       	adiw	r24, 0x01	; 1
    ebf0:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5757
  strcat(str1, ": ");
    ebf4:	63 e4       	ldi	r22, 0x43	; 67
    ebf6:	77 e0       	ldi	r23, 0x07	; 7
    ebf8:	ce 01       	movw	r24, r28
    ebfa:	01 96       	adiw	r24, 0x01	; 1
    ebfc:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5758
  strcat(str1, str2);
    ec00:	be 01       	movw	r22, r28
    ec02:	6b 5d       	subi	r22, 0xDB	; 219
    ec04:	7f 4f       	sbci	r23, 0xFF	; 255
    ec06:	ce 01       	movw	r24, r28
    ec08:	01 96       	adiw	r24, 0x01	; 1
    ec0a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5759
  show_string(str1, x + 5 , y + 70 , 1, BLACK, WHITE, 0);
    ec0e:	a5 01       	movw	r20, r10
    ec10:	4a 5b       	subi	r20, 0xBA	; 186
    ec12:	5f 4f       	sbci	r21, 0xFF	; 255
    ec14:	21 e0       	ldi	r18, 0x01	; 1
    ec16:	b6 01       	movw	r22, r12
    ec18:	ce 01       	movw	r24, r28
    ec1a:	01 96       	adiw	r24, 0x01	; 1
    ec1c:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5761
  /// ip gw
  ip2CharArray(device.myGW, str2);
    ec20:	6b e2       	ldi	r22, 0x2B	; 43
    ec22:	7e e0       	ldi	r23, 0x0E	; 14
    ec24:	ce 01       	movw	r24, r28
    ec26:	cd 96       	adiw	r24, 0x3d	; 61
    ec28:	0e 94 d8 4c 	call	0x99b0	; 0x99b0 <IPAddress::IPAddress(unsigned char const*)>
    ec2c:	be 01       	movw	r22, r28
    ec2e:	6b 5d       	subi	r22, 0xDB	; 219
    ec30:	7f 4f       	sbci	r23, 0xFF	; 255
    ec32:	ce 01       	movw	r24, r28
    ec34:	cd 96       	adiw	r24, 0x3d	; 61
    ec36:	0e 94 57 4b 	call	0x96ae	; 0x96ae <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5762
  strcpy_P(str1, new_text_device_gw);
    ec3a:	6e ec       	ldi	r22, 0xCE	; 206
    ec3c:	72 e7       	ldi	r23, 0x72	; 114
    ec3e:	ce 01       	movw	r24, r28
    ec40:	01 96       	adiw	r24, 0x01	; 1
    ec42:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5763
  strcat(str1, ": ");
    ec46:	63 e4       	ldi	r22, 0x43	; 67
    ec48:	77 e0       	ldi	r23, 0x07	; 7
    ec4a:	ce 01       	movw	r24, r28
    ec4c:	01 96       	adiw	r24, 0x01	; 1
    ec4e:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5764
  strcat(str1, str2);
    ec52:	be 01       	movw	r22, r28
    ec54:	6b 5d       	subi	r22, 0xDB	; 219
    ec56:	7f 4f       	sbci	r23, 0xFF	; 255
    ec58:	ce 01       	movw	r24, r28
    ec5a:	01 96       	adiw	r24, 0x01	; 1
    ec5c:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5765
  show_string(str1, x + 5 , y + 85 , 1, BLACK, WHITE, 0);
    ec60:	a5 01       	movw	r20, r10
    ec62:	4b 5a       	subi	r20, 0xAB	; 171
    ec64:	5f 4f       	sbci	r21, 0xFF	; 255
    ec66:	21 e0       	ldi	r18, 0x01	; 1
    ec68:	b6 01       	movw	r22, r12
    ec6a:	ce 01       	movw	r24, r28
    ec6c:	01 96       	adiw	r24, 0x01	; 1
    ec6e:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5767
  /// ip dns serveru
  ip2CharArray(device.myDNS, str2);
    ec72:	67 e2       	ldi	r22, 0x27	; 39
    ec74:	7e e0       	ldi	r23, 0x0E	; 14
    ec76:	ce 01       	movw	r24, r28
    ec78:	cd 96       	adiw	r24, 0x3d	; 61
    ec7a:	0e 94 d8 4c 	call	0x99b0	; 0x99b0 <IPAddress::IPAddress(unsigned char const*)>
    ec7e:	be 01       	movw	r22, r28
    ec80:	6b 5d       	subi	r22, 0xDB	; 219
    ec82:	7f 4f       	sbci	r23, 0xFF	; 255
    ec84:	ce 01       	movw	r24, r28
    ec86:	cd 96       	adiw	r24, 0x3d	; 61
    ec88:	0e 94 57 4b 	call	0x96ae	; 0x96ae <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5768
  strcpy_P(str1, new_text_device_dns);
    ec8c:	63 ec       	ldi	r22, 0xC3	; 195
    ec8e:	72 e7       	ldi	r23, 0x72	; 114
    ec90:	ce 01       	movw	r24, r28
    ec92:	01 96       	adiw	r24, 0x01	; 1
    ec94:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5769
  strcat(str1, ": ");
    ec98:	63 e4       	ldi	r22, 0x43	; 67
    ec9a:	77 e0       	ldi	r23, 0x07	; 7
    ec9c:	ce 01       	movw	r24, r28
    ec9e:	01 96       	adiw	r24, 0x01	; 1
    eca0:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5770
  strcat(str1, str2);
    eca4:	be 01       	movw	r22, r28
    eca6:	6b 5d       	subi	r22, 0xDB	; 219
    eca8:	7f 4f       	sbci	r23, 0xFF	; 255
    ecaa:	ce 01       	movw	r24, r28
    ecac:	01 96       	adiw	r24, 0x01	; 1
    ecae:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5771
  show_string(str1, x + 5 , y + 100 , 1, BLACK, WHITE, 0);
    ecb2:	a5 01       	movw	r20, r10
    ecb4:	4c 59       	subi	r20, 0x9C	; 156
    ecb6:	5f 4f       	sbci	r21, 0xFF	; 255
    ecb8:	21 e0       	ldi	r18, 0x01	; 1
    ecba:	b6 01       	movw	r22, r12
    ecbc:	ce 01       	movw	r24, r28
    ecbe:	01 96       	adiw	r24, 0x01	; 1
    ecc0:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5772
}
    ecc4:	ce 5b       	subi	r28, 0xBE	; 190
    ecc6:	df 4f       	sbci	r29, 0xFF	; 255
    ecc8:	0f b6       	in	r0, 0x3f	; 63
    ecca:	f8 94       	cli
    eccc:	de bf       	out	0x3e, r29	; 62
    ecce:	0f be       	out	0x3f, r0	; 63
    ecd0:	cd bf       	out	0x3d, r28	; 61
    ecd2:	df 91       	pop	r29
    ecd4:	cf 91       	pop	r28
    ecd6:	1f 91       	pop	r17
    ecd8:	0f 91       	pop	r16
    ecda:	ff 90       	pop	r15
    ecdc:	ef 90       	pop	r14
    ecde:	df 90       	pop	r13
    ece0:	cf 90       	pop	r12
    ece2:	bf 90       	pop	r11
    ece4:	af 90       	pop	r10
    ece6:	08 95       	ret

0000ece8 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4615
   args2 parametr ... definece z globalniho nastaveni menu, zde v nasem pripade je to index 1w cidla na sbernici
 * *line1 - vraci ROM adresu
 * *line2 - vraci akci associovat/nastavit
*/
void get_function_one_wire_associate_or_setting_text_button(uint8_t args1, uint8_t args2 , uint8_t args3, char *line1, char *line2)
{
    ece8:	7f 92       	push	r7
    ecea:	8f 92       	push	r8
    ecec:	9f 92       	push	r9
    ecee:	af 92       	push	r10
    ecf0:	bf 92       	push	r11
    ecf2:	cf 92       	push	r12
    ecf4:	df 92       	push	r13
    ecf6:	ef 92       	push	r14
    ecf8:	ff 92       	push	r15
    ecfa:	0f 93       	push	r16
    ecfc:	1f 93       	push	r17
    ecfe:	cf 93       	push	r28
    ed00:	df 93       	push	r29
    ed02:	cd b7       	in	r28, 0x3d	; 61
    ed04:	de b7       	in	r29, 0x3e	; 62
    ed06:	e0 97       	sbiw	r28, 0x30	; 48
    ed08:	0f b6       	in	r0, 0x3f	; 63
    ed0a:	f8 94       	cli
    ed0c:	de bf       	out	0x3e, r29	; 62
    ed0e:	0f be       	out	0x3f, r0	; 63
    ed10:	cd bf       	out	0x3d, r28	; 61
    ed12:	98 2e       	mov	r9, r24
    ed14:	82 2e       	mov	r8, r18
    ed16:	73 2e       	mov	r7, r19
    ed18:	78 01       	movw	r14, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4617
  char str2[26];
  strcpy_P(line1, text_not_used);
    ed1a:	67 e3       	ldi	r22, 0x37	; 55
    ed1c:	71 e7       	ldi	r23, 0x71	; 113
    ed1e:	82 2f       	mov	r24, r18
    ed20:	93 2f       	mov	r25, r19
    ed22:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4618
  strcpy(line2, "-");
    ed26:	69 e6       	ldi	r22, 0x69	; 105
    ed28:	73 e0       	ldi	r23, 0x03	; 3
    ed2a:	c8 01       	movw	r24, r16
    ed2c:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4619
  if (w_rom[args1].used == 1)
    ed30:	4b e0       	ldi	r20, 0x0B	; 11
    ed32:	49 9d       	mul	r20, r9
    ed34:	c0 01       	movw	r24, r0
    ed36:	11 24       	eor	r1, r1
    ed38:	9c 01       	movw	r18, r24
    ed3a:	22 54       	subi	r18, 0x42	; 66
    ed3c:	33 4f       	sbci	r19, 0xF3	; 243
    ed3e:	69 01       	movw	r12, r18
    ed40:	f9 01       	movw	r30, r18
    ed42:	81 85       	ldd	r24, Z+9	; 0x09
    ed44:	81 30       	cpi	r24, 0x01	; 1
    ed46:	c9 f5       	brne	.+114    	; 0xedba <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4621
  {
    createString(str2, ':', w_rom[args1].rom, 8, 16);
    ed48:	a9 01       	movw	r20, r18
    ed4a:	00 e1       	ldi	r16, 0x10	; 16
    ed4c:	28 e0       	ldi	r18, 0x08	; 8
    ed4e:	6a e3       	ldi	r22, 0x3A	; 58
    ed50:	ce 01       	movw	r24, r28
    ed52:	01 96       	adiw	r24, 0x01	; 1
    ed54:	5c 01       	movw	r10, r24
    ed56:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4622
    sprintf(line1, "%d: %s", args1, str2);
    ed5a:	bf 92       	push	r11
    ed5c:	af 92       	push	r10
    ed5e:	1f 92       	push	r1
    ed60:	9f 92       	push	r9
    ed62:	84 e1       	ldi	r24, 0x14	; 20
    ed64:	94 e0       	ldi	r25, 0x04	; 4
    ed66:	9f 93       	push	r25
    ed68:	8f 93       	push	r24
    ed6a:	7f 92       	push	r7
    ed6c:	8f 92       	push	r8
    ed6e:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4624

    if (w_rom[args1].tds_idx != 255)
    ed72:	0f b6       	in	r0, 0x3f	; 63
    ed74:	f8 94       	cli
    ed76:	de bf       	out	0x3e, r29	; 62
    ed78:	0f be       	out	0x3f, r0	; 63
    ed7a:	cd bf       	out	0x3d, r28	; 61
    ed7c:	f6 01       	movw	r30, r12
    ed7e:	82 85       	ldd	r24, Z+10	; 0x0a
    ed80:	8f 3f       	cpi	r24, 0xFF	; 255
    ed82:	79 f1       	breq	.+94     	; 0xede2 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4626
    {
      strcpy_P(line2, text_nastavit_tds);
    ed84:	64 e2       	ldi	r22, 0x24	; 36
    ed86:	71 e7       	ldi	r23, 0x71	; 113
    ed88:	c7 01       	movw	r24, r14
    ed8a:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
tds_get_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ed8e:	be 01       	movw	r22, r28
    ed90:	65 5e       	subi	r22, 0xE5	; 229
    ed92:	7f 4f       	sbci	r23, 0xFF	; 255
    ed94:	f6 01       	movw	r30, r12
    ed96:	82 85       	ldd	r24, Z+10	; 0x0a
    ed98:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    ed9c:	be 01       	movw	r22, r28
    ed9e:	69 5d       	subi	r22, 0xD9	; 217
    eda0:	7f 4f       	sbci	r23, 0xFF	; 255
    eda2:	c5 01       	movw	r24, r10
    eda4:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4628
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
    eda8:	60 e7       	ldi	r22, 0x70	; 112
    edaa:	76 e0       	ldi	r23, 0x06	; 6
    edac:	c7 01       	movw	r24, r14
    edae:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4629
      strcat(line2, str2);
    edb2:	b5 01       	movw	r22, r10
    edb4:	c7 01       	movw	r24, r14
    edb6:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4634
    }
    else
      strcpy_P(line2, text_associovat_tds);
  }
}
    edba:	e0 96       	adiw	r28, 0x30	; 48
    edbc:	0f b6       	in	r0, 0x3f	; 63
    edbe:	f8 94       	cli
    edc0:	de bf       	out	0x3e, r29	; 62
    edc2:	0f be       	out	0x3f, r0	; 63
    edc4:	cd bf       	out	0x3d, r28	; 61
    edc6:	df 91       	pop	r29
    edc8:	cf 91       	pop	r28
    edca:	1f 91       	pop	r17
    edcc:	0f 91       	pop	r16
    edce:	ff 90       	pop	r15
    edd0:	ef 90       	pop	r14
    edd2:	df 90       	pop	r13
    edd4:	cf 90       	pop	r12
    edd6:	bf 90       	pop	r11
    edd8:	af 90       	pop	r10
    edda:	9f 90       	pop	r9
    eddc:	8f 90       	pop	r8
    edde:	7f 90       	pop	r7
    ede0:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4632
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
      strcat(line2, str2);
    }
    else
      strcpy_P(line2, text_associovat_tds);
    ede2:	64 e4       	ldi	r22, 0x44	; 68
    ede4:	71 e7       	ldi	r23, 0x71	; 113
    ede6:	c7 01       	movw	r24, r14
    ede8:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
    edec:	e6 cf       	rjmp	.-52     	; 0xedba <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xd2>

0000edee <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z36display_element_show_tds_info_staticjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4214
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
  }
}
////
void display_element_show_tds_info_static(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    edee:	3f 92       	push	r3
    edf0:	4f 92       	push	r4
    edf2:	5f 92       	push	r5
    edf4:	6f 92       	push	r6
    edf6:	7f 92       	push	r7
    edf8:	8f 92       	push	r8
    edfa:	9f 92       	push	r9
    edfc:	af 92       	push	r10
    edfe:	bf 92       	push	r11
    ee00:	cf 92       	push	r12
    ee02:	df 92       	push	r13
    ee04:	ef 92       	push	r14
    ee06:	ff 92       	push	r15
    ee08:	0f 93       	push	r16
    ee0a:	1f 93       	push	r17
    ee0c:	cf 93       	push	r28
    ee0e:	df 93       	push	r29
    ee10:	cd b7       	in	r28, 0x3d	; 61
    ee12:	de b7       	in	r29, 0x3e	; 62
    ee14:	ca 54       	subi	r28, 0x4A	; 74
    ee16:	d1 09       	sbc	r29, r1
    ee18:	0f b6       	in	r0, 0x3f	; 63
    ee1a:	f8 94       	cli
    ee1c:	de bf       	out	0x3e, r29	; 62
    ee1e:	0f be       	out	0x3f, r0	; 63
    ee20:	cd bf       	out	0x3d, r28	; 61
    ee22:	4c 01       	movw	r8, r24
    ee24:	3b 01       	movw	r6, r22
    ee26:	3e 2c       	mov	r3, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    ee28:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    ee2c:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
_Z36display_element_show_tds_info_staticjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4220
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    ee30:	26 0f       	add	r18, r22
    ee32:	37 1f       	adc	r19, r23
    ee34:	48 0f       	add	r20, r24
    ee36:	59 1f       	adc	r21, r25
    ee38:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4221
  if (get_tds18s20(args2, &tds) == 1)
    ee3c:	be 01       	movw	r22, r28
    ee3e:	6b 5c       	subi	r22, 0xCB	; 203
    ee40:	7f 4f       	sbci	r23, 0xFF	; 255
    ee42:	8e 2d       	mov	r24, r14
    ee44:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
    ee48:	23 01       	movw	r4, r6
    ee4a:	28 e2       	ldi	r18, 0x28	; 40
    ee4c:	42 0e       	add	r4, r18
    ee4e:	51 1c       	adc	r5, r1
    ee50:	9e 01       	movw	r18, r28
    ee52:	2f 5f       	subi	r18, 0xFF	; 255
    ee54:	3f 4f       	sbci	r19, 0xFF	; 255
    ee56:	59 01       	movw	r10, r18
    ee58:	81 30       	cpi	r24, 0x01	; 1
    ee5a:	09 f0       	breq	.+2      	; 0xee5e <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x70>
    ee5c:	ca c0       	rjmp	.+404    	; 0xeff2 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x204>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4223
  {
    createString(str2, ':', tds.rom, 8, 16);
    ee5e:	6e 01       	movw	r12, r28
    ee60:	3b e1       	ldi	r19, 0x1B	; 27
    ee62:	c3 0e       	add	r12, r19
    ee64:	d1 1c       	adc	r13, r1
    ee66:	00 e1       	ldi	r16, 0x10	; 16
    ee68:	28 e0       	ldi	r18, 0x08	; 8
    ee6a:	ae 01       	movw	r20, r28
    ee6c:	4a 5c       	subi	r20, 0xCA	; 202
    ee6e:	5f 4f       	sbci	r21, 0xFF	; 255
    ee70:	6a e3       	ldi	r22, 0x3A	; 58
    ee72:	c6 01       	movw	r24, r12
    ee74:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4224
    sprintf(str1, "rom: %s", str2);
    ee78:	df 92       	push	r13
    ee7a:	cf 92       	push	r12
    ee7c:	8b e1       	ldi	r24, 0x1B	; 27
    ee7e:	94 e0       	ldi	r25, 0x04	; 4
    ee80:	9f 93       	push	r25
    ee82:	8f 93       	push	r24
    ee84:	bf 92       	push	r11
    ee86:	af 92       	push	r10
    ee88:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4225
    show_string(str1, x + 10, y + 85, 1, BLACK, WHITE, 0);
    ee8c:	8a e0       	ldi	r24, 0x0A	; 10
    ee8e:	88 0e       	add	r8, r24
    ee90:	91 1c       	adc	r9, r1
    ee92:	a3 01       	movw	r20, r6
    ee94:	4b 5a       	subi	r20, 0xAB	; 171
    ee96:	5f 4f       	sbci	r21, 0xFF	; 255
    ee98:	ee 24       	eor	r14, r14
    ee9a:	ea 94       	dec	r14
    ee9c:	fe 2c       	mov	r15, r14
    ee9e:	10 e0       	ldi	r17, 0x00	; 0
    eea0:	00 e0       	ldi	r16, 0x00	; 0
    eea2:	21 e0       	ldi	r18, 0x01	; 1
    eea4:	b4 01       	movw	r22, r8
    eea6:	c5 01       	movw	r24, r10
    eea8:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4227
    ///
    strcpy_P(str2, text_nazev);
    eeac:	67 e0       	ldi	r22, 0x07	; 7
    eeae:	71 e7       	ldi	r23, 0x71	; 113
    eeb0:	c6 01       	movw	r24, r12
    eeb2:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4228
    sprintf(str1, "%s: %s", str2, tds.name);
    eeb6:	85 e3       	ldi	r24, 0x35	; 53
    eeb8:	90 e0       	ldi	r25, 0x00	; 0
    eeba:	8c 0f       	add	r24, r28
    eebc:	9d 1f       	adc	r25, r29
    eebe:	0c 96       	adiw	r24, 0x0c	; 12
    eec0:	9f 93       	push	r25
    eec2:	8f 93       	push	r24
    eec4:	df 92       	push	r13
    eec6:	cf 92       	push	r12
    eec8:	83 e2       	ldi	r24, 0x23	; 35
    eeca:	94 e0       	ldi	r25, 0x04	; 4
    eecc:	9f 93       	push	r25
    eece:	8f 93       	push	r24
    eed0:	bf 92       	push	r11
    eed2:	af 92       	push	r10
    eed4:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4229
    show_string(str1, x + 10, y + 40, 2, BLACK, WHITE, 0);
    eed8:	22 e0       	ldi	r18, 0x02	; 2
    eeda:	a2 01       	movw	r20, r4
    eedc:	b4 01       	movw	r22, r8
    eede:	c5 01       	movw	r24, r10
    eee0:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4231
    /// zobrazeni offsetu
    te = tds.offset / 1000.0;
    eee4:	21 96       	adiw	r28, 0x01	; 1
    eee6:	6e ad       	ldd	r22, Y+62	; 0x3e
    eee8:	7f ad       	ldd	r23, Y+63	; 0x3f
    eeea:	21 97       	sbiw	r28, 0x01	; 1
    eeec:	07 2e       	mov	r0, r23
    eeee:	00 0c       	add	r0, r0
    eef0:	88 0b       	sbc	r24, r24
    eef2:	99 0b       	sbc	r25, r25
    eef4:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
    eef8:	20 e0       	ldi	r18, 0x00	; 0
    eefa:	30 e0       	ldi	r19, 0x00	; 0
    eefc:	4a e7       	ldi	r20, 0x7A	; 122
    eefe:	54 e4       	ldi	r21, 0x44	; 68
    ef00:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4232
    dtostrf(te, 4, 2, str1);
    ef04:	85 01       	movw	r16, r10
    ef06:	22 e0       	ldi	r18, 0x02	; 2
    ef08:	44 e0       	ldi	r20, 0x04	; 4
    ef0a:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4233
    strcat(str1, "C");
    ef0e:	6e e1       	ldi	r22, 0x1E	; 30
    ef10:	77 e0       	ldi	r23, 0x07	; 7
    ef12:	c5 01       	movw	r24, r10
    ef14:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4234
    strcpy_P(str2, temp_offset_short);
    ef18:	69 ed       	ldi	r22, 0xD9	; 217
    ef1a:	70 e7       	ldi	r23, 0x70	; 112
    ef1c:	c6 01       	movw	r24, r12
    ef1e:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4235
    strcat(str2, str1);
    ef22:	b5 01       	movw	r22, r10
    ef24:	c6 01       	movw	r24, r12
    ef26:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4236
    show_string(str2, x + 10, y + 60 , 2, BLACK, WHITE, 0);
    ef2a:	a3 01       	movw	r20, r6
    ef2c:	44 5c       	subi	r20, 0xC4	; 196
    ef2e:	5f 4f       	sbci	r21, 0xFF	; 255
    ef30:	10 e0       	ldi	r17, 0x00	; 0
    ef32:	00 e0       	ldi	r16, 0x00	; 0
    ef34:	22 e0       	ldi	r18, 0x02	; 2
    ef36:	b4 01       	movw	r22, r8
    ef38:	c6 01       	movw	r24, r12
    ef3a:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4238
    ///
    strcpy_P(str2, nastaveni_tds_period);
    ef3e:	6a ec       	ldi	r22, 0xCA	; 202
    ef40:	70 e7       	ldi	r23, 0x70	; 112
    ef42:	c6 01       	movw	r24, r12
    ef44:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4239
    sprintf(str1, "%s: %ds", str2, tds.period);
    ef48:	2a 96       	adiw	r28, 0x0a	; 10
    ef4a:	8f ad       	ldd	r24, Y+63	; 0x3f
    ef4c:	2a 97       	sbiw	r28, 0x0a	; 10
    ef4e:	1f 92       	push	r1
    ef50:	8f 93       	push	r24
    ef52:	df 92       	push	r13
    ef54:	cf 92       	push	r12
    ef56:	8a e2       	ldi	r24, 0x2A	; 42
    ef58:	94 e0       	ldi	r25, 0x04	; 4
    ef5a:	9f 93       	push	r25
    ef5c:	8f 93       	push	r24
    ef5e:	bf 92       	push	r11
    ef60:	af 92       	push	r10
    ef62:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4240
    show_string(str1, x + 10, y + 100 , 2, BLACK, WHITE, 0);
    ef66:	a3 01       	movw	r20, r6
    ef68:	4c 59       	subi	r20, 0x9C	; 156
    ef6a:	5f 4f       	sbci	r21, 0xFF	; 255
    ef6c:	22 e0       	ldi	r18, 0x02	; 2
    ef6e:	b4 01       	movw	r22, r8
    ef70:	c5 01       	movw	r24, r10
    ef72:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4243

    ///
    strcpy_P(str2, text_online);
    ef76:	61 ee       	ldi	r22, 0xE1	; 225
    ef78:	70 e7       	ldi	r23, 0x70	; 112
    ef7a:	c6 01       	movw	r24, r12
    ef7c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4244
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    ef80:	9e e1       	ldi	r25, 0x1E	; 30
    ef82:	39 9e       	mul	r3, r25
    ef84:	f0 01       	movw	r30, r0
    ef86:	11 24       	eor	r1, r1
    ef88:	e2 53       	subi	r30, 0x32	; 50
    ef8a:	f4 4f       	sbci	r31, 0xF4	; 244
    ef8c:	83 8d       	ldd	r24, Z+27	; 0x1b
    ef8e:	1f 92       	push	r1
    ef90:	8f 93       	push	r24
    ef92:	df 92       	push	r13
    ef94:	cf 92       	push	r12
    ef96:	83 ee       	ldi	r24, 0xE3	; 227
    ef98:	93 e0       	ldi	r25, 0x03	; 3
    ef9a:	9f 93       	push	r25
    ef9c:	8f 93       	push	r24
    ef9e:	bf 92       	push	r11
    efa0:	af 92       	push	r10
    efa2:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4245
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
    efa6:	a3 01       	movw	r20, r6
    efa8:	48 58       	subi	r20, 0x88	; 136
    efaa:	5f 4f       	sbci	r21, 0xFF	; 255
    efac:	22 e0       	ldi	r18, 0x02	; 2
    efae:	b4 01       	movw	r22, r8
    efb0:	c5 01       	movw	r24, r10
    efb2:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
    efb6:	0f b6       	in	r0, 0x3f	; 63
    efb8:	f8 94       	cli
    efba:	de bf       	out	0x3e, r29	; 62
    efbc:	0f be       	out	0x3f, r0	; 63
    efbe:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4252
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
    efc0:	c6 5b       	subi	r28, 0xB6	; 182
    efc2:	df 4f       	sbci	r29, 0xFF	; 255
    efc4:	0f b6       	in	r0, 0x3f	; 63
    efc6:	f8 94       	cli
    efc8:	de bf       	out	0x3e, r29	; 62
    efca:	0f be       	out	0x3f, r0	; 63
    efcc:	cd bf       	out	0x3d, r28	; 61
    efce:	df 91       	pop	r29
    efd0:	cf 91       	pop	r28
    efd2:	1f 91       	pop	r17
    efd4:	0f 91       	pop	r16
    efd6:	ff 90       	pop	r15
    efd8:	ef 90       	pop	r14
    efda:	df 90       	pop	r13
    efdc:	cf 90       	pop	r12
    efde:	bf 90       	pop	r11
    efe0:	af 90       	pop	r10
    efe2:	9f 90       	pop	r9
    efe4:	8f 90       	pop	r8
    efe6:	7f 90       	pop	r7
    efe8:	6f 90       	pop	r6
    efea:	5f 90       	pop	r5
    efec:	4f 90       	pop	r4
    efee:	3f 90       	pop	r3
    eff0:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4249
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    eff2:	6a e5       	ldi	r22, 0x5A	; 90
    eff4:	71 e7       	ldi	r23, 0x71	; 113
    eff6:	c9 01       	movw	r24, r18
    eff8:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4250
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
    effc:	b4 01       	movw	r22, r8
    effe:	67 5e       	subi	r22, 0xE7	; 231
    f000:	7f 4f       	sbci	r23, 0xFF	; 255
    f002:	ee 24       	eor	r14, r14
    f004:	ea 94       	dec	r14
    f006:	fe 2c       	mov	r15, r14
    f008:	00 e0       	ldi	r16, 0x00	; 0
    f00a:	18 ef       	ldi	r17, 0xF8	; 248
    f00c:	24 e0       	ldi	r18, 0x04	; 4
    f00e:	a2 01       	movw	r20, r4
    f010:	c5 01       	movw	r24, r10
    f012:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
    f016:	d4 cf       	rjmp	.-88     	; 0xefc0 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1d2>

0000f018 <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:342

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
    f018:	61 e0       	ldi	r22, 0x01	; 1
    f01a:	80 91 b4 0c 	lds	r24, 0x0CB4	; 0x800cb4 <SPI_CS>
    f01e:	0c 94 0b 59 	jmp	0xb216	; 0xb216 <digitalWrite>

0000f022 <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:341
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
    f022:	60 e0       	ldi	r22, 0x00	; 0
    f024:	80 91 b4 0c 	lds	r24, 0x0CB4	; 0x800cb4 <SPI_CS>
    f028:	0c 94 0b 59 	jmp	0xb216	; 0xb216 <digitalWrite>

0000f02c <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
    f02c:	08 95       	ret

0000f02e <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    f02e:	8e bd       	out	0x2e, r24	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    f030:	00 00       	nop
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
    f032:	0d b4       	in	r0, 0x2d	; 45
    f034:	07 fe       	sbrs	r0, 7
    f036:	fd cf       	rjmp	.-6      	; 0xf032 <SPIClass::transfer(unsigned char)+0x4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:221
    return SPDR;
    f038:	8e b5       	in	r24, 0x2e	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:222
  }
    f03a:	08 95       	ret

0000f03c <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    f03c:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
    f03e:	9d bd       	out	0x2d, r25	; 45
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:208
  }
    f040:	08 95       	ret

0000f042 <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:134

    return _len;
}

uint8_t W5500Class::read(uint16_t _addr, uint8_t _cb)
{
    f042:	cf 93       	push	r28
    f044:	df 93       	push	r29
    f046:	d8 2f       	mov	r29, r24
    f048:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:135
    SPI.beginTransaction(wiznet_SPI_settings);
    f04a:	80 91 02 0e 	lds	r24, 0x0E02	; 0x800e02 <wiznet_SPI_settings>
    f04e:	90 91 03 0e 	lds	r25, 0x0E03	; 0x800e03 <wiznet_SPI_settings+0x1>
    f052:	0e 94 1e 78 	call	0xf03c	; 0xf03c <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:136
    setSS();
    f056:	0e 94 11 78 	call	0xf022	; 0xf022 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:137
    SPI.transfer(_addr >> 8);
    f05a:	80 e0       	ldi	r24, 0x00	; 0
    f05c:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:138
    SPI.transfer(_addr & 0xFF);
    f060:	8d 2f       	mov	r24, r29
    f062:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:139
    SPI.transfer(_cb);
    f066:	8c 2f       	mov	r24, r28
    f068:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:140
    uint8_t _data = SPI.transfer(0);
    f06c:	80 e0       	ldi	r24, 0x00	; 0
    f06e:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
    f072:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:141
    resetSS();
    f074:	0e 94 0c 78 	call	0xf018	; 0xf018 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:145
    SPI.endTransaction();

    return _data;
}
    f078:	8c 2f       	mov	r24, r28
    f07a:	df 91       	pop	r29
    f07c:	cf 91       	pop	r28
    f07e:	08 95       	ret

0000f080 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:118

    return 1;
}

uint16_t W5500Class::write(uint16_t _addr, uint8_t _cb, const uint8_t *_buf, uint16_t _len)
{
    f080:	df 92       	push	r13
    f082:	ef 92       	push	r14
    f084:	ff 92       	push	r15
    f086:	0f 93       	push	r16
    f088:	1f 93       	push	r17
    f08a:	cf 93       	push	r28
    f08c:	df 93       	push	r29
    f08e:	d8 2f       	mov	r29, r24
    f090:	d9 2e       	mov	r13, r25
    f092:	c6 2f       	mov	r28, r22
    f094:	7a 01       	movw	r14, r20
    f096:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:119
    SPI.beginTransaction(wiznet_SPI_settings);
    f098:	80 91 02 0e 	lds	r24, 0x0E02	; 0x800e02 <wiznet_SPI_settings>
    f09c:	90 91 03 0e 	lds	r25, 0x0E03	; 0x800e03 <wiznet_SPI_settings+0x1>
    f0a0:	0e 94 1e 78 	call	0xf03c	; 0xf03c <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:120
    setSS();
    f0a4:	0e 94 11 78 	call	0xf022	; 0xf022 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:121
    SPI.transfer(_addr >> 8);
    f0a8:	8d 2d       	mov	r24, r13
    f0aa:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:122
    SPI.transfer(_addr & 0xFF);
    f0ae:	8d 2f       	mov	r24, r29
    f0b0:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:123
    SPI.transfer(_cb);
    f0b4:	8c 2f       	mov	r24, r28
    f0b6:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
    f0ba:	e7 01       	movw	r28, r14
    f0bc:	e0 0e       	add	r14, r16
    f0be:	f1 1e       	adc	r15, r17
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:124
    for (uint16_t i=0; i<_len; i++){
    f0c0:	ce 15       	cp	r28, r14
    f0c2:	df 05       	cpc	r29, r15
    f0c4:	21 f0       	breq	.+8      	; 0xf0ce <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:125
        SPI.transfer(_buf[i]);
    f0c6:	89 91       	ld	r24, Y+
    f0c8:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
    f0cc:	f9 cf       	rjmp	.-14     	; 0xf0c0 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:127
    }
    resetSS();
    f0ce:	0e 94 0c 78 	call	0xf018	; 0xf018 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:131
    SPI.endTransaction();

    return _len;
}
    f0d2:	c8 01       	movw	r24, r16
    f0d4:	df 91       	pop	r29
    f0d6:	cf 91       	pop	r28
    f0d8:	1f 91       	pop	r17
    f0da:	0f 91       	pop	r16
    f0dc:	ff 90       	pop	r15
    f0de:	ef 90       	pop	r14
    f0e0:	df 90       	pop	r13
    f0e2:	08 95       	ret

0000f0e4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:104
    uint8_t cntl_byte = (0x18+(s<<5));
    read((uint16_t)src , cntl_byte, (uint8_t *)dst, len);
}

uint8_t W5500Class::write(uint16_t _addr, uint8_t _cb, uint8_t _data)
{
    f0e4:	1f 93       	push	r17
    f0e6:	cf 93       	push	r28
    f0e8:	df 93       	push	r29
    f0ea:	18 2f       	mov	r17, r24
    f0ec:	d6 2f       	mov	r29, r22
    f0ee:	c4 2f       	mov	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:105
    SPI.beginTransaction(wiznet_SPI_settings);
    f0f0:	80 91 02 0e 	lds	r24, 0x0E02	; 0x800e02 <wiznet_SPI_settings>
    f0f4:	90 91 03 0e 	lds	r25, 0x0E03	; 0x800e03 <wiznet_SPI_settings+0x1>
    f0f8:	0e 94 1e 78 	call	0xf03c	; 0xf03c <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:106
    setSS();  
    f0fc:	0e 94 11 78 	call	0xf022	; 0xf022 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:107
    SPI.transfer(_addr >> 8);
    f100:	80 e0       	ldi	r24, 0x00	; 0
    f102:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:108
    SPI.transfer(_addr & 0xFF);
    f106:	81 2f       	mov	r24, r17
    f108:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:109
    SPI.transfer(_cb);
    f10c:	8d 2f       	mov	r24, r29
    f10e:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:110
    SPI.transfer(_data);
    f112:	8c 2f       	mov	r24, r28
    f114:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:111
    resetSS();
    f118:	0e 94 0c 78 	call	0xf018	; 0xf018 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:115
    SPI.endTransaction();

    return 1;
}
    f11c:	81 e0       	ldi	r24, 0x01	; 1
    f11e:	df 91       	pop	r29
    f120:	cf 91       	pop	r28
    f122:	1f 91       	pop	r17
    f124:	08 95       	ret

0000f126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:352
uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
}

uint8_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
    f126:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:353
    uint8_t cntl_byte = (_s<<5)+0x0C;
    f128:	82 95       	swap	r24
    f12a:	88 0f       	add	r24, r24
    f12c:	80 7e       	andi	r24, 0xE0	; 224
    f12e:	6c e0       	ldi	r22, 0x0C	; 12
    f130:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:354
    return write(_addr, cntl_byte, _data);
    f132:	c9 01       	movw	r24, r18
    f134:	0c 94 72 78 	jmp	0xf0e4	; 0xf0e4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>

0000f138 <close(unsigned char)>:
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:43

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
    f138:	cf 93       	push	r28
    f13a:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:44
  w5500.execCmdSn(s, Sock_CLOSE);
    f13c:	60 e1       	ldi	r22, 0x10	; 16
    f13e:	70 e0       	ldi	r23, 0x00	; 0
    f140:	0e 94 b3 c8 	call	0x19166	; 0x19166 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    f144:	4f ef       	ldi	r20, 0xFF	; 255
    f146:	62 e0       	ldi	r22, 0x02	; 2
    f148:	70 e0       	ldi	r23, 0x00	; 0
    f14a:	8c 2f       	mov	r24, r28
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:46
  w5500.writeSnIR(s, 0xFF);
}
    f14c:	cf 91       	pop	r28
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
    f14e:	0c 94 93 78 	jmp	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0000f152 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
    f152:	cf 93       	push	r28
    f154:	df 93       	push	r29
    f156:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
    f158:	8c 85       	ldd	r24, Y+12	; 0x0c
    f15a:	88 30       	cpi	r24, 0x08	; 8
    f15c:	61 f0       	breq	.+24     	; 0xf176 <EthernetUDP::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
    f15e:	0e 94 9c 78 	call	0xf138	; 0xf138 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:79

  EthernetClass::_server_port[_sock] = 0;
    f162:	ec 85       	ldd	r30, Y+12	; 0x0c
    f164:	f0 e0       	ldi	r31, 0x00	; 0
    f166:	ee 0f       	add	r30, r30
    f168:	ff 1f       	adc	r31, r31
    f16a:	e6 59       	subi	r30, 0x96	; 150
    f16c:	f4 4f       	sbci	r31, 0xF4	; 244
    f16e:	11 82       	std	Z+1, r1	; 0x01
    f170:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80
  _sock = MAX_SOCK_NUM;
    f172:	88 e0       	ldi	r24, 0x08	; 8
    f174:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
    f176:	df 91       	pop	r29
    f178:	cf 91       	pop	r28
    f17a:	08 95       	ret

0000f17c <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:100
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
    f17c:	1f 93       	push	r17
    f17e:	cf 93       	push	r28
    f180:	df 93       	push	r29
    f182:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  _offset = 0;
    f184:	dc 01       	movw	r26, r24
    f186:	58 96       	adiw	r26, 0x18	; 24
    f188:	1c 92       	st	X, r1
    f18a:	1e 92       	st	-X, r1
    f18c:	57 97       	sbiw	r26, 0x17	; 23
startUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  return ret;
}

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
  if
    f18e:	22 81       	ldd	r18, Z+2	; 0x02
    f190:	21 11       	cpse	r18, r1
    f192:	09 c0       	rjmp	.+18     	; 0xf1a6 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    f194:	23 81       	ldd	r18, Z+3	; 0x03
    f196:	21 11       	cpse	r18, r1
    f198:	06 c0       	rjmp	.+12     	; 0xf1a6 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
    f19a:	24 81       	ldd	r18, Z+4	; 0x04
    f19c:	21 11       	cpse	r18, r1
    f19e:	03 c0       	rjmp	.+6      	; 0xf1a6 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
    f1a0:	25 81       	ldd	r18, Z+5	; 0x05
    f1a2:	22 23       	and	r18, r18
    f1a4:	39 f1       	breq	.+78     	; 0xf1f4 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
    f1a6:	41 15       	cp	r20, r1
    f1a8:	51 05       	cpc	r21, r1
    f1aa:	21 f1       	breq	.+72     	; 0xf1f4 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
    f1ac:	ea 01       	movw	r28, r20
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
    f1ae:	dc 01       	movw	r26, r24
    f1b0:	1c 96       	adiw	r26, 0x0c	; 12
    f1b2:	1c 91       	ld	r17, X
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    f1b4:	af 01       	movw	r20, r30
    f1b6:	4e 5f       	subi	r20, 0xFE	; 254
    f1b8:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
    f1ba:	61 2f       	mov	r22, r17
    f1bc:	62 95       	swap	r22
    f1be:	66 0f       	add	r22, r22
    f1c0:	60 7e       	andi	r22, 0xE0	; 224
    f1c2:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
    f1c4:	24 e0       	ldi	r18, 0x04	; 4
    f1c6:	30 e0       	ldi	r19, 0x00	; 0
    f1c8:	8c e0       	ldi	r24, 0x0C	; 12
    f1ca:	90 e0       	ldi	r25, 0x00	; 0
    f1cc:	0e 94 40 78 	call	0xf080	; 0xf080 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
    f1d0:	4d 2f       	mov	r20, r29
    f1d2:	60 e1       	ldi	r22, 0x10	; 16
    f1d4:	70 e0       	ldi	r23, 0x00	; 0
    f1d6:	81 2f       	mov	r24, r17
    f1d8:	0e 94 93 78 	call	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    f1dc:	4c 2f       	mov	r20, r28
    f1de:	61 e1       	ldi	r22, 0x11	; 17
    f1e0:	70 e0       	ldi	r23, 0x00	; 0
    f1e2:	81 2f       	mov	r24, r17
    f1e4:	0e 94 93 78 	call	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    f1e8:	81 e0       	ldi	r24, 0x01	; 1
    f1ea:	90 e0       	ldi	r25, 0x00	; 0
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:103
}
    f1ec:	df 91       	pop	r29
    f1ee:	cf 91       	pop	r28
    f1f0:	1f 91       	pop	r17
    f1f2:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
     ((port == 0x00))
    ) 
  {
    return 0;
    f1f4:	90 e0       	ldi	r25, 0x00	; 0
    f1f6:	80 e0       	ldi	r24, 0x00	; 0
    f1f8:	f9 cf       	rjmp	.-14     	; 0xf1ec <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x70>

0000f1fa <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:347
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    f1fa:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
    uint8_t cntl_byte = (_s<<5)+0x08;
    f1fc:	82 95       	swap	r24
    f1fe:	88 0f       	add	r24, r24
    f200:	80 7e       	andi	r24, 0xE0	; 224
    f202:	68 e0       	ldi	r22, 0x08	; 8
    f204:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
    f206:	c9 01       	movw	r24, r18
    f208:	0c 94 21 78 	jmp	0xf042	; 0xf042 <W5500Class::read(unsigned int, unsigned char)>

0000f20c <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:320
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
    f20c:	1f 93       	push	r17
    f20e:	cf 93       	push	r28
    f210:	df 93       	push	r29
    f212:	18 2f       	mov	r17, r24
    f214:	66 e2       	ldi	r22, 0x26	; 38
    f216:	70 e0       	ldi	r23, 0x00	; 0
    f218:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
    f21c:	c8 2f       	mov	r28, r24
    f21e:	d0 e0       	ldi	r29, 0x00	; 0
    f220:	dc 2f       	mov	r29, r28
    f222:	cc 27       	eor	r28, r28
    f224:	67 e2       	ldi	r22, 0x27	; 39
    f226:	70 e0       	ldi	r23, 0x00	; 0
    f228:	81 2f       	mov	r24, r17
    f22a:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
    f22e:	8c 0f       	add	r24, r28
    f230:	9d 2f       	mov	r25, r29
    f232:	91 1d       	adc	r25, r1
    f234:	df 91       	pop	r29
    f236:	cf 91       	pop	r28
    f238:	1f 91       	pop	r17
    f23a:	08 95       	ret

0000f23c <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:317
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
    f23c:	1f 93       	push	r17
    f23e:	cf 93       	push	r28
    f240:	df 93       	push	r29
    f242:	18 2f       	mov	r17, r24
    f244:	60 e2       	ldi	r22, 0x20	; 32
    f246:	70 e0       	ldi	r23, 0x00	; 0
    f248:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
    f24c:	c8 2f       	mov	r28, r24
    f24e:	d0 e0       	ldi	r29, 0x00	; 0
    f250:	dc 2f       	mov	r29, r28
    f252:	cc 27       	eor	r28, r28
    f254:	61 e2       	ldi	r22, 0x21	; 33
    f256:	70 e0       	ldi	r23, 0x00	; 0
    f258:	81 2f       	mov	r24, r17
    f25a:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
    f25e:	8c 0f       	add	r24, r28
    f260:	9d 2f       	mov	r25, r29
    f262:	91 1d       	adc	r25, r1
    f264:	df 91       	pop	r29
    f266:	cf 91       	pop	r28
    f268:	1f 91       	pop	r17
    f26a:	08 95       	ret

0000f26c <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
    f26c:	fc 01       	movw	r30, r24
    f26e:	84 85       	ldd	r24, Z+12	; 0x0c
    f270:	88 30       	cpi	r24, 0x08	; 8
    f272:	21 f0       	breq	.+8      	; 0xf27c <EthernetClient::status()+0x10>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    f274:	63 e0       	ldi	r22, 0x03	; 3
    f276:	70 e0       	ldi	r23, 0x00	; 0
    f278:	0c 94 fd 78 	jmp	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
    f27c:	80 e0       	ldi	r24, 0x00	; 0
    f27e:	08 95       	ret

0000f280 <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    f280:	cf 93       	push	r28
    f282:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
    f284:	fc 01       	movw	r30, r24
    f286:	24 85       	ldd	r18, Z+12	; 0x0c
    f288:	28 30       	cpi	r18, 0x08	; 8
    f28a:	d9 f0       	breq	.+54     	; 0xf2c2 <EthernetClient::connected()+0x42>
    f28c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
    f28e:	0e 94 36 79 	call	0xf26c	; 0xf26c <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    f292:	84 31       	cpi	r24, 0x14	; 20
    f294:	89 f0       	breq	.+34     	; 0xf2b8 <EthernetClient::connected()+0x38>
    f296:	88 23       	and	r24, r24
    f298:	79 f0       	breq	.+30     	; 0xf2b8 <EthernetClient::connected()+0x38>
    f29a:	88 31       	cpi	r24, 0x18	; 24
    f29c:	69 f0       	breq	.+26     	; 0xf2b8 <EthernetClient::connected()+0x38>
    f29e:	21 e0       	ldi	r18, 0x01	; 1
    f2a0:	8c 31       	cpi	r24, 0x1C	; 28
    f2a2:	59 f4       	brne	.+22     	; 0xf2ba <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
    f2a4:	e8 81       	ld	r30, Y
    f2a6:	f9 81       	ldd	r31, Y+1	; 0x01
    f2a8:	00 84       	ldd	r0, Z+8	; 0x08
    f2aa:	f1 85       	ldd	r31, Z+9	; 0x09
    f2ac:	e0 2d       	mov	r30, r0
    f2ae:	ce 01       	movw	r24, r28
    f2b0:	19 95       	eicall
    f2b2:	21 e0       	ldi	r18, 0x01	; 1
    f2b4:	89 2b       	or	r24, r25
    f2b6:	09 f4       	brne	.+2      	; 0xf2ba <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    f2b8:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
    f2ba:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
    f2bc:	df 91       	pop	r29
    f2be:	cf 91       	pop	r28
    f2c0:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    f2c2:	80 e0       	ldi	r24, 0x00	; 0
    f2c4:	fb cf       	rjmp	.-10     	; 0xf2bc <EthernetClient::connected()+0x3c>

0000f2c6 <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    f2c6:	cf 92       	push	r12
    f2c8:	df 92       	push	r13
    f2ca:	ef 92       	push	r14
    f2cc:	ff 92       	push	r15
    f2ce:	cf 93       	push	r28
    f2d0:	df 93       	push	r29
    f2d2:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
    f2d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    f2d6:	88 30       	cpi	r24, 0x08	; 8
    f2d8:	89 f1       	breq	.+98     	; 0xf33c <EthernetClient::stop()+0x76>
disconnect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:94
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
  w5500.execCmdSn(s, Sock_DISCON);
    f2da:	68 e0       	ldi	r22, 0x08	; 8
    f2dc:	70 e0       	ldi	r23, 0x00	; 0
    f2de:	0e 94 b3 c8 	call	0x19166	; 0x19166 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();
    f2e2:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
    f2e6:	6b 01       	movw	r12, r22
    f2e8:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    f2ea:	ce 01       	movw	r24, r28
    f2ec:	0e 94 36 79 	call	0xf26c	; 0xf26c <EthernetClient::status()>
    f2f0:	88 23       	and	r24, r24
    f2f2:	91 f0       	breq	.+36     	; 0xf318 <EthernetClient::stop()+0x52>
    f2f4:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
    f2f8:	6c 19       	sub	r22, r12
    f2fa:	7d 09       	sbc	r23, r13
    f2fc:	8e 09       	sbc	r24, r14
    f2fe:	9f 09       	sbc	r25, r15
    f300:	68 3e       	cpi	r22, 0xE8	; 232
    f302:	73 40       	sbci	r23, 0x03	; 3
    f304:	81 05       	cpc	r24, r1
    f306:	91 05       	cpc	r25, r1
    f308:	38 f4       	brcc	.+14     	; 0xf318 <EthernetClient::stop()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
    f30a:	61 e0       	ldi	r22, 0x01	; 1
    f30c:	70 e0       	ldi	r23, 0x00	; 0
    f30e:	80 e0       	ldi	r24, 0x00	; 0
    f310:	90 e0       	ldi	r25, 0x00	; 0
    f312:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
    f316:	e9 cf       	rjmp	.-46     	; 0xf2ea <EthernetClient::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    f318:	ce 01       	movw	r24, r28
    f31a:	0e 94 36 79 	call	0xf26c	; 0xf26c <EthernetClient::status()>
    f31e:	88 23       	and	r24, r24
    f320:	19 f0       	breq	.+6      	; 0xf328 <EthernetClient::stop()+0x62>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
    f322:	8c 85       	ldd	r24, Y+12	; 0x0c
    f324:	0e 94 9c 78 	call	0xf138	; 0xf138 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:142

  EthernetClass::_server_port[_sock] = 0;
    f328:	ec 85       	ldd	r30, Y+12	; 0x0c
    f32a:	f0 e0       	ldi	r31, 0x00	; 0
    f32c:	ee 0f       	add	r30, r30
    f32e:	ff 1f       	adc	r31, r31
    f330:	e6 59       	subi	r30, 0x96	; 150
    f332:	f4 4f       	sbci	r31, 0xF4	; 244
    f334:	11 82       	std	Z+1, r1	; 0x01
    f336:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143
  _sock = MAX_SOCK_NUM;
    f338:	88 e0       	ldi	r24, 0x08	; 8
    f33a:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
    f33c:	df 91       	pop	r29
    f33e:	cf 91       	pop	r28
    f340:	ff 90       	pop	r15
    f342:	ef 90       	pop	r14
    f344:	df 90       	pop	r13
    f346:	cf 90       	pop	r12
    f348:	08 95       	ret

0000f34a <EthernetServer::accept()>:
_ZN14EthernetServer6acceptEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:30
    }
  }  
}

void EthernetServer::accept()
{
    f34a:	4f 92       	push	r4
    f34c:	5f 92       	push	r5
    f34e:	6f 92       	push	r6
    f350:	7f 92       	push	r7
    f352:	8f 92       	push	r8
    f354:	9f 92       	push	r9
    f356:	af 92       	push	r10
    f358:	bf 92       	push	r11
    f35a:	cf 92       	push	r12
    f35c:	df 92       	push	r13
    f35e:	ef 92       	push	r14
    f360:	ff 92       	push	r15
    f362:	1f 93       	push	r17
    f364:	cf 93       	push	r28
    f366:	df 93       	push	r29
    f368:	cd b7       	in	r28, 0x3d	; 61
    f36a:	de b7       	in	r29, 0x3e	; 62
    f36c:	2d 97       	sbiw	r28, 0x0d	; 13
    f36e:	0f b6       	in	r0, 0x3f	; 63
    f370:	f8 94       	cli
    f372:	de bf       	out	0x3e, r29	; 62
    f374:	0f be       	out	0x3f, r0	; 63
    f376:	cd bf       	out	0x3d, r28	; 61
    f378:	7c 01       	movw	r14, r24
    f37a:	9a e6       	ldi	r25, 0x6A	; 106
    f37c:	a9 2e       	mov	r10, r25
    f37e:	9b e0       	ldi	r25, 0x0B	; 11
    f380:	b9 2e       	mov	r11, r25
    f382:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:31
  int listening = 0;
    f384:	d1 2c       	mov	r13, r1
    f386:	c1 2c       	mov	r12, r1
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    f388:	28 ee       	ldi	r18, 0xE8	; 232
    f38a:	42 2e       	mov	r4, r18
    f38c:	23 e0       	ldi	r18, 0x03	; 3
    f38e:	52 2e       	mov	r5, r18
    f390:	61 2c       	mov	r6, r1
    f392:	71 2c       	mov	r7, r1
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    f394:	30 ed       	ldi	r19, 0xD0	; 208
    f396:	83 2e       	mov	r8, r19
    f398:	32 e0       	ldi	r19, 0x02	; 2
    f39a:	93 2e       	mov	r9, r19
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    f39c:	1c 82       	std	Y+4, r1	; 0x04
    f39e:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
    f3a0:	4d 82       	std	Y+5, r4	; 0x05
    f3a2:	5e 82       	std	Y+6, r5	; 0x06
    f3a4:	6f 82       	std	Y+7, r6	; 0x07
    f3a6:	78 86       	std	Y+8, r7	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
    f3a8:	9a 82       	std	Y+2, r9	; 0x02
    f3aa:	89 82       	std	Y+1, r8	; 0x01
    f3ac:	1d 87       	std	Y+13, r17	; 0x0d
_ZN14EthernetServer6acceptEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:36

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port) {
    f3ae:	d5 01       	movw	r26, r10
    f3b0:	2d 91       	ld	r18, X+
    f3b2:	3d 91       	ld	r19, X+
    f3b4:	5d 01       	movw	r10, r26
    f3b6:	f7 01       	movw	r30, r14
    f3b8:	84 81       	ldd	r24, Z+4	; 0x04
    f3ba:	95 81       	ldd	r25, Z+5	; 0x05
    f3bc:	28 17       	cp	r18, r24
    f3be:	39 07       	cpc	r19, r25
    f3c0:	b1 f4       	brne	.+44     	; 0xf3ee <EthernetServer::accept()+0xa4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:37
      if (client.status() == SnSR::LISTEN) {
    f3c2:	ce 01       	movw	r24, r28
    f3c4:	01 96       	adiw	r24, 0x01	; 1
    f3c6:	0e 94 36 79 	call	0xf26c	; 0xf26c <EthernetClient::status()>
    f3ca:	84 31       	cpi	r24, 0x14	; 20
    f3cc:	99 f1       	breq	.+102    	; 0xf434 <EthernetServer::accept()+0xea>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:40
        listening = 1;
      } 
      else if (client.status() == SnSR::CLOSE_WAIT && !client.available()) {
    f3ce:	ce 01       	movw	r24, r28
    f3d0:	01 96       	adiw	r24, 0x01	; 1
    f3d2:	0e 94 36 79 	call	0xf26c	; 0xf26c <EthernetClient::status()>
    f3d6:	8c 31       	cpi	r24, 0x1C	; 28
    f3d8:	51 f4       	brne	.+20     	; 0xf3ee <EthernetServer::accept()+0xa4>
    f3da:	ce 01       	movw	r24, r28
    f3dc:	01 96       	adiw	r24, 0x01	; 1
    f3de:	0e 94 2f 4d 	call	0x9a5e	; 0x9a5e <EthernetClient::available()>
    f3e2:	89 2b       	or	r24, r25
    f3e4:	21 f4       	brne	.+8      	; 0xf3ee <EthernetServer::accept()+0xa4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:41
        client.stop();
    f3e6:	ce 01       	movw	r24, r28
    f3e8:	01 96       	adiw	r24, 0x01	; 1
    f3ea:	0e 94 63 79 	call	0xf2c6	; 0xf2c6 <EthernetClient::stop()>
    f3ee:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:33

void EthernetServer::accept()
{
  int listening = 0;

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    f3f0:	18 30       	cpi	r17, 0x08	; 8
    f3f2:	a1 f6       	brne	.-88     	; 0xf39c <EthernetServer::accept()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:46
        client.stop();
      }
    } 
  }

  if (!listening) {
    f3f4:	cd 28       	or	r12, r13
    f3f6:	41 f4       	brne	.+16     	; 0xf408 <EthernetServer::accept()+0xbe>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:47
    begin();
    f3f8:	d7 01       	movw	r26, r14
    f3fa:	ed 91       	ld	r30, X+
    f3fc:	fc 91       	ld	r31, X
    f3fe:	00 84       	ldd	r0, Z+8	; 0x08
    f400:	f1 85       	ldd	r31, Z+9	; 0x09
    f402:	e0 2d       	mov	r30, r0
    f404:	c7 01       	movw	r24, r14
    f406:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:49
  }
}
    f408:	2d 96       	adiw	r28, 0x0d	; 13
    f40a:	0f b6       	in	r0, 0x3f	; 63
    f40c:	f8 94       	cli
    f40e:	de bf       	out	0x3e, r29	; 62
    f410:	0f be       	out	0x3f, r0	; 63
    f412:	cd bf       	out	0x3d, r28	; 61
    f414:	df 91       	pop	r29
    f416:	cf 91       	pop	r28
    f418:	1f 91       	pop	r17
    f41a:	ff 90       	pop	r15
    f41c:	ef 90       	pop	r14
    f41e:	df 90       	pop	r13
    f420:	cf 90       	pop	r12
    f422:	bf 90       	pop	r11
    f424:	af 90       	pop	r10
    f426:	9f 90       	pop	r9
    f428:	8f 90       	pop	r8
    f42a:	7f 90       	pop	r7
    f42c:	6f 90       	pop	r6
    f42e:	5f 90       	pop	r5
    f430:	4f 90       	pop	r4
    f432:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:38
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port) {
      if (client.status() == SnSR::LISTEN) {
        listening = 1;
    f434:	cc 24       	eor	r12, r12
    f436:	c3 94       	inc	r12
    f438:	d1 2c       	mov	r13, r1
    f43a:	d9 cf       	rjmp	.-78     	; 0xf3ee <EthernetServer::accept()+0xa4>

0000f43c <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:153
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
    f43c:	cf 92       	push	r12
    f43e:	df 92       	push	r13
    f440:	ef 92       	push	r14
    f442:	ff 92       	push	r15
    f444:	1f 93       	push	r17
    f446:	cf 93       	push	r28
    f448:	df 93       	push	r29
    f44a:	18 2f       	mov	r17, r24
    f44c:	6b 01       	movw	r12, r22
    f44e:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:155
  // Check how much data is available
  int16_t ret = w5500.getRXReceivedSize(s);
    f450:	0e 94 04 d0 	call	0x1a008	; 0x1a008 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>
    f454:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:156
  if ( ret == 0 )
    f456:	00 97       	sbiw	r24, 0x00	; 0
    f458:	d9 f4       	brne	.+54     	; 0xf490 <recv(unsigned char, unsigned char*, int)+0x54>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
    f45a:	63 e0       	ldi	r22, 0x03	; 3
    f45c:	70 e0       	ldi	r23, 0x00	; 0
    f45e:	81 2f       	mov	r24, r17
    f460:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:160
  {
    // No data available.
    uint8_t status = w5500.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
    f464:	84 31       	cpi	r24, 0x14	; 20
    f466:	59 f0       	breq	.+22     	; 0xf47e <recv(unsigned char, unsigned char*, int)+0x42>
    f468:	88 23       	and	r24, r24
    f46a:	49 f0       	breq	.+18     	; 0xf47e <recv(unsigned char, unsigned char*, int)+0x42>
    f46c:	c1 e0       	ldi	r28, 0x01	; 1
    f46e:	d0 e0       	ldi	r29, 0x00	; 0
    f470:	8c 31       	cpi	r24, 0x1C	; 28
    f472:	11 f4       	brne	.+4      	; 0xf478 <recv(unsigned char, unsigned char*, int)+0x3c>
    f474:	d0 e0       	ldi	r29, 0x00	; 0
    f476:	c0 e0       	ldi	r28, 0x00	; 0
    f478:	d1 95       	neg	r29
    f47a:	c1 95       	neg	r28
    f47c:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:182
  {
    w5500.recv_data_processing(s, buf, ret);
    w5500.execCmdSn(s, Sock_RECV);
  }
  return ret;
}
    f47e:	ce 01       	movw	r24, r28
    f480:	df 91       	pop	r29
    f482:	cf 91       	pop	r28
    f484:	1f 91       	pop	r17
    f486:	ff 90       	pop	r15
    f488:	ef 90       	pop	r14
    f48a:	df 90       	pop	r13
    f48c:	cf 90       	pop	r12
    f48e:	08 95       	ret
    f490:	e8 16       	cp	r14, r24
    f492:	f9 06       	cpc	r15, r25
    f494:	0c f4       	brge	.+2      	; 0xf498 <recv(unsigned char, unsigned char*, int)+0x5c>
    f496:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:176
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
    f498:	1c 16       	cp	r1, r28
    f49a:	1d 06       	cpc	r1, r29
    f49c:	84 f7       	brge	.-32     	; 0xf47e <recv(unsigned char, unsigned char*, int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:178
  {
    w5500.recv_data_processing(s, buf, ret);
    f49e:	20 e0       	ldi	r18, 0x00	; 0
    f4a0:	ae 01       	movw	r20, r28
    f4a2:	b6 01       	movw	r22, r12
    f4a4:	81 2f       	mov	r24, r17
    f4a6:	0e 94 9c cf 	call	0x19f38	; 0x19f38 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:179
    w5500.execCmdSn(s, Sock_RECV);
    f4aa:	60 e4       	ldi	r22, 0x40	; 64
    f4ac:	70 e0       	ldi	r23, 0x00	; 0
    f4ae:	81 2f       	mov	r24, r17
    f4b0:	0e 94 b3 c8 	call	0x19166	; 0x19166 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
    f4b4:	e4 cf       	rjmp	.-56     	; 0xf47e <recv(unsigned char, unsigned char*, int)+0x42>

0000f4b6 <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
    f4b6:	cf 93       	push	r28
    f4b8:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
    f4ba:	fc 01       	movw	r30, r24
    f4bc:	21 8d       	ldd	r18, Z+25	; 0x19
    f4be:	32 8d       	ldd	r19, Z+26	; 0x1a
    f4c0:	21 15       	cp	r18, r1
    f4c2:	31 05       	cpc	r19, r1
    f4c4:	29 f4       	brne	.+10     	; 0xf4d0 <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
    f4c6:	8f ef       	ldi	r24, 0xFF	; 255
    f4c8:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
    f4ca:	df 91       	pop	r29
    f4cc:	cf 91       	pop	r28
    f4ce:	08 95       	ret
    f4d0:	ec 01       	movw	r28, r24
    f4d2:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
    f4d4:	42 17       	cp	r20, r18
    f4d6:	53 07       	cpc	r21, r19
    f4d8:	08 f0       	brcs	.+2      	; 0xf4dc <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
    f4da:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
    f4dc:	0e 94 1e 7a 	call	0xf43c	; 0xf43c <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
    f4e0:	18 16       	cp	r1, r24
    f4e2:	19 06       	cpc	r1, r25
    f4e4:	84 f7       	brge	.-32     	; 0xf4c6 <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
    f4e6:	29 8d       	ldd	r18, Y+25	; 0x19
    f4e8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    f4ea:	28 1b       	sub	r18, r24
    f4ec:	39 0b       	sbc	r19, r25
    f4ee:	3a 8f       	std	Y+26, r19	; 0x1a
    f4f0:	29 8f       	std	Y+25, r18	; 0x19
    f4f2:	eb cf       	rjmp	.-42     	; 0xf4ca <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

0000f4f4 <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
    f4f4:	0f 93       	push	r16
    f4f6:	1f 93       	push	r17
    f4f8:	cf 93       	push	r28
    f4fa:	df 93       	push	r29
    f4fc:	1f 92       	push	r1
    f4fe:	cd b7       	in	r28, 0x3d	; 61
    f500:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    f502:	fc 01       	movw	r30, r24
    f504:	21 8d       	ldd	r18, Z+25	; 0x19
    f506:	32 8d       	ldd	r19, Z+26	; 0x1a
    f508:	23 2b       	or	r18, r19
    f50a:	41 f4       	brne	.+16     	; 0xf51c <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
    f50c:	8f ef       	ldi	r24, 0xFF	; 255
    f50e:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
    f510:	0f 90       	pop	r0
    f512:	df 91       	pop	r29
    f514:	cf 91       	pop	r28
    f516:	1f 91       	pop	r17
    f518:	0f 91       	pop	r16
    f51a:	08 95       	ret
    f51c:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
    f51e:	41 e0       	ldi	r20, 0x01	; 1
    f520:	50 e0       	ldi	r21, 0x00	; 0
    f522:	be 01       	movw	r22, r28
    f524:	6f 5f       	subi	r22, 0xFF	; 255
    f526:	7f 4f       	sbci	r23, 0xFF	; 255
    f528:	fc 01       	movw	r30, r24
    f52a:	84 85       	ldd	r24, Z+12	; 0x0c
    f52c:	0e 94 1e 7a 	call	0xf43c	; 0xf43c <recv(unsigned char, unsigned char*, int)>
    f530:	18 16       	cp	r1, r24
    f532:	19 06       	cpc	r1, r25
    f534:	5c f7       	brge	.-42     	; 0xf50c <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
    f536:	f8 01       	movw	r30, r16
    f538:	81 8d       	ldd	r24, Z+25	; 0x19
    f53a:	92 8d       	ldd	r25, Z+26	; 0x1a
    f53c:	01 97       	sbiw	r24, 0x01	; 1
    f53e:	92 8f       	std	Z+26, r25	; 0x1a
    f540:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
    f542:	89 81       	ldd	r24, Y+1	; 0x01
    f544:	90 e0       	ldi	r25, 0x00	; 0
    f546:	e4 cf       	rjmp	.-56     	; 0xf510 <EthernetUDP::read()+0x1c>

0000f548 <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
    f548:	0f 93       	push	r16
    f54a:	1f 93       	push	r17
    f54c:	cf 93       	push	r28
    f54e:	df 93       	push	r29
    f550:	00 d0       	rcall	.+0      	; 0xf552 <EthernetUDP::parsePacket()+0xa>
    f552:	00 d0       	rcall	.+0      	; 0xf554 <EthernetUDP::parsePacket()+0xc>
    f554:	1f 92       	push	r1
    f556:	1f 92       	push	r1
    f558:	cd b7       	in	r28, 0x3d	; 61
    f55a:	de b7       	in	r29, 0x3e	; 62
    f55c:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
    f55e:	dc 01       	movw	r26, r24
    f560:	ed 91       	ld	r30, X+
    f562:	fc 91       	ld	r31, X
    f564:	06 80       	ldd	r0, Z+6	; 0x06
    f566:	f7 81       	ldd	r31, Z+7	; 0x07
    f568:	e0 2d       	mov	r30, r0
    f56a:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
    f56c:	f8 01       	movw	r30, r16
    f56e:	84 85       	ldd	r24, Z+12	; 0x0c
    f570:	0e 94 04 d0 	call	0x1a008	; 0x1a008 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>
    f574:	89 2b       	or	r24, r25
    f576:	b1 f1       	breq	.+108    	; 0xf5e4 <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
    f578:	48 e0       	ldi	r20, 0x08	; 8
    f57a:	50 e0       	ldi	r21, 0x00	; 0
    f57c:	be 01       	movw	r22, r28
    f57e:	6f 5f       	subi	r22, 0xFF	; 255
    f580:	7f 4f       	sbci	r23, 0xFF	; 255
    f582:	d8 01       	movw	r26, r16
    f584:	1c 96       	adiw	r26, 0x0c	; 12
    f586:	8c 91       	ld	r24, X
    f588:	0e 94 1e 7a 	call	0xf43c	; 0xf43c <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
    f58c:	18 16       	cp	r1, r24
    f58e:	19 06       	cpc	r1, r25
    f590:	f4 f4       	brge	.+60     	; 0xf5ce <EthernetUDP::parsePacket()+0x86>
operator=():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:88
    return true;
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    f592:	d8 01       	movw	r26, r16
    f594:	51 96       	adiw	r26, 0x11	; 17
    f596:	84 e0       	ldi	r24, 0x04	; 4
    f598:	fe 01       	movw	r30, r28
    f59a:	31 96       	adiw	r30, 0x01	; 1
    f59c:	01 90       	ld	r0, Z+
    f59e:	0d 92       	st	X+, r0
    f5a0:	8a 95       	dec	r24
    f5a2:	e1 f7       	brne	.-8      	; 0xf59c <EthernetUDP::parsePacket()+0x54>
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
    {
      _remoteIP = tmpBuf;
      _remotePort = tmpBuf[4];
    f5a4:	8d 81       	ldd	r24, Y+5	; 0x05
    f5a6:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
    f5a8:	98 2f       	mov	r25, r24
    f5aa:	88 27       	eor	r24, r24
    f5ac:	2e 81       	ldd	r18, Y+6	; 0x06
    f5ae:	82 0f       	add	r24, r18
    f5b0:	91 1d       	adc	r25, r1
    f5b2:	f8 01       	movw	r30, r16
    f5b4:	96 8b       	std	Z+22, r25	; 0x16
    f5b6:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
    f5b8:	8f 81       	ldd	r24, Y+7	; 0x07
    f5ba:	28 2f       	mov	r18, r24
    f5bc:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
    f5be:	32 2f       	mov	r19, r18
    f5c0:	22 27       	eor	r18, r18
    f5c2:	88 85       	ldd	r24, Y+8	; 0x08
    f5c4:	82 0f       	add	r24, r18
    f5c6:	93 2f       	mov	r25, r19
    f5c8:	91 1d       	adc	r25, r1
    f5ca:	92 8f       	std	Z+26, r25	; 0x1a
    f5cc:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
    f5ce:	28 96       	adiw	r28, 0x08	; 8
    f5d0:	0f b6       	in	r0, 0x3f	; 63
    f5d2:	f8 94       	cli
    f5d4:	de bf       	out	0x3e, r29	; 62
    f5d6:	0f be       	out	0x3f, r0	; 63
    f5d8:	cd bf       	out	0x3d, r28	; 61
    f5da:	df 91       	pop	r29
    f5dc:	cf 91       	pop	r28
    f5de:	1f 91       	pop	r17
    f5e0:	0f 91       	pop	r16
    f5e2:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
    f5e4:	90 e0       	ldi	r25, 0x00	; 0
    f5e6:	80 e0       	ldi	r24, 0x00	; 0
    f5e8:	f2 cf       	rjmp	.-28     	; 0xf5ce <EthernetUDP::parsePacket()+0x86>

0000f5ea <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
    return -1;
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    f5ea:	fc 01       	movw	r30, r24
    f5ec:	84 85       	ldd	r24, Z+12	; 0x0c
    f5ee:	0c 94 1e 7a 	jmp	0xf43c	; 0xf43c <recv(unsigned char, unsigned char*, int)>

0000f5f2 <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95
  if (_sock != MAX_SOCK_NUM)
    return w5500.getRXReceivedSize(_sock);
  return 0;
}

int EthernetClient::read() {
    f5f2:	cf 93       	push	r28
    f5f4:	df 93       	push	r29
    f5f6:	1f 92       	push	r1
    f5f8:	cd b7       	in	r28, 0x3d	; 61
    f5fa:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    f5fc:	41 e0       	ldi	r20, 0x01	; 1
    f5fe:	50 e0       	ldi	r21, 0x00	; 0
    f600:	be 01       	movw	r22, r28
    f602:	6f 5f       	subi	r22, 0xFF	; 255
    f604:	7f 4f       	sbci	r23, 0xFF	; 255
    f606:	fc 01       	movw	r30, r24
    f608:	84 85       	ldd	r24, Z+12	; 0x0c
    f60a:	0e 94 1e 7a 	call	0xf43c	; 0xf43c <recv(unsigned char, unsigned char*, int)>
    f60e:	18 16       	cp	r1, r24
    f610:	19 06       	cpc	r1, r25
    f612:	34 f4       	brge	.+12     	; 0xf620 <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
    f614:	89 81       	ldd	r24, Y+1	; 0x01
    f616:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
    f618:	0f 90       	pop	r0
    f61a:	df 91       	pop	r29
    f61c:	cf 91       	pop	r28
    f61e:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
    f620:	8f ef       	ldi	r24, 0xFF	; 255
    f622:	9f ef       	ldi	r25, 0xFF	; 255
    f624:	f9 cf       	rjmp	.-14     	; 0xf618 <EthernetClient::read()+0x26>

0000f626 <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:106
  _offset = 0;
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
    f626:	cf 93       	push	r28
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
  return sendUDP(_sock);
    f628:	fc 01       	movw	r30, r24
    f62a:	c4 85       	ldd	r28, Z+12	; 0x0c
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  }
}

int sendUDP(SOCKET s)
{
  w5500.execCmdSn(s, Sock_SEND);
    f62c:	60 e2       	ldi	r22, 0x20	; 32
    f62e:	70 e0       	ldi	r23, 0x00	; 0
    f630:	8c 2f       	mov	r24, r28
    f632:	0e 94 b3 c8 	call	0x19166	; 0x19166 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    f636:	62 e0       	ldi	r22, 0x02	; 2
    f638:	70 e0       	ldi	r23, 0x00	; 0
    f63a:	8c 2f       	mov	r24, r28
    f63c:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    f640:	84 fd       	sbrc	r24, 4
    f642:	11 c0       	rjmp	.+34     	; 0xf666 <EthernetUDP::endPacket()+0x40>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
    f644:	62 e0       	ldi	r22, 0x02	; 2
    f646:	70 e0       	ldi	r23, 0x00	; 0
    f648:	8c 2f       	mov	r24, r28
    f64a:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
    f64e:	83 ff       	sbrs	r24, 3
    f650:	f2 cf       	rjmp	.-28     	; 0xf636 <EthernetUDP::endPacket()+0x10>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
    f652:	48 e1       	ldi	r20, 0x18	; 24
    f654:	62 e0       	ldi	r22, 0x02	; 2
    f656:	70 e0       	ldi	r23, 0x00	; 0
    f658:	8c 2f       	mov	r24, r28
    f65a:	0e 94 93 78 	call	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
    f65e:	90 e0       	ldi	r25, 0x00	; 0
    f660:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:108
}
    f662:	cf 91       	pop	r28
    f664:	08 95       	ret
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
    f666:	40 e1       	ldi	r20, 0x10	; 16
    f668:	62 e0       	ldi	r22, 0x02	; 2
    f66a:	70 e0       	ldi	r23, 0x00	; 0
    f66c:	8c 2f       	mov	r24, r28
    f66e:	0e 94 93 78 	call	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
    f672:	81 e0       	ldi	r24, 0x01	; 1
    f674:	90 e0       	ldi	r25, 0x00	; 0
    f676:	f5 cf       	rjmp	.-22     	; 0xf662 <EthernetUDP::endPacket()+0x3c>

0000f678 <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
    f678:	ef 92       	push	r14
    f67a:	ff 92       	push	r15
    f67c:	1f 93       	push	r17
    f67e:	cf 93       	push	r28
    f680:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
    f682:	fc 01       	movw	r30, r24
    f684:	24 85       	ldd	r18, Z+12	; 0x0c
    f686:	28 30       	cpi	r18, 0x08	; 8
    f688:	39 f0       	breq	.+14     	; 0xf698 <EthernetUDP::begin(unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
    f68a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
    f68c:	df 91       	pop	r29
    f68e:	cf 91       	pop	r28
    f690:	1f 91       	pop	r17
    f692:	ff 90       	pop	r15
    f694:	ef 90       	pop	r14
    f696:	08 95       	ret
    f698:	7b 01       	movw	r14, r22
    f69a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    f69c:	10 e0       	ldi	r17, 0x00	; 0
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    f69e:	63 e0       	ldi	r22, 0x03	; 3
    f6a0:	70 e0       	ldi	r23, 0x00	; 0
    f6a2:	81 2f       	mov	r24, r17
    f6a4:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    f6a8:	81 11       	cpse	r24, r1
    f6aa:	0e c0       	rjmp	.+28     	; 0xf6c8 <EthernetUDP::begin(unsigned int)+0x50>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
    f6ac:	1c 87       	std	Y+12, r17	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    f6ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    f6b0:	88 30       	cpi	r24, 0x08	; 8
    f6b2:	59 f3       	breq	.-42     	; 0xf68a <EthernetUDP::begin(unsigned int)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
    f6b4:	fe 86       	std	Y+14, r15	; 0x0e
    f6b6:	ed 86       	std	Y+13, r14	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
    f6b8:	1a 8e       	std	Y+26, r1	; 0x1a
    f6ba:	19 8e       	std	Y+25, r1	; 0x19
socket():
    f6bc:	a7 01       	movw	r20, r14
    f6be:	62 e0       	ldi	r22, 0x02	; 2
    f6c0:	0e 94 c3 c8 	call	0x19186	; 0x19186 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
    f6c4:	81 e0       	ldi	r24, 0x01	; 1
    f6c6:	e2 cf       	rjmp	.-60     	; 0xf68c <EthernetUDP::begin(unsigned int)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
    f6c8:	88 31       	cpi	r24, 0x18	; 24
    f6ca:	81 f3       	breq	.-32     	; 0xf6ac <EthernetUDP::begin(unsigned int)+0x34>
    f6cc:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    f6ce:	18 30       	cpi	r17, 0x08	; 8
    f6d0:	31 f7       	brne	.-52     	; 0xf69e <EthernetUDP::begin(unsigned int)+0x26>
    f6d2:	ed cf       	rjmp	.-38     	; 0xf6ae <EthernetUDP::begin(unsigned int)+0x36>

0000f6d4 <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    f6d4:	4f 92       	push	r4
    f6d6:	5f 92       	push	r5
    f6d8:	6f 92       	push	r6
    f6da:	7f 92       	push	r7
    f6dc:	8f 92       	push	r8
    f6de:	9f 92       	push	r9
    f6e0:	af 92       	push	r10
    f6e2:	bf 92       	push	r11
    f6e4:	cf 92       	push	r12
    f6e6:	df 92       	push	r13
    f6e8:	ef 92       	push	r14
    f6ea:	ff 92       	push	r15
    f6ec:	0f 93       	push	r16
    f6ee:	1f 93       	push	r17
    f6f0:	cf 93       	push	r28
    f6f2:	df 93       	push	r29
    f6f4:	cd b7       	in	r28, 0x3d	; 61
    f6f6:	de b7       	in	r29, 0x3e	; 62
    f6f8:	63 97       	sbiw	r28, 0x13	; 19
    f6fa:	0f b6       	in	r0, 0x3f	; 63
    f6fc:	f8 94       	cli
    f6fe:	de bf       	out	0x3e, r29	; 62
    f700:	0f be       	out	0x3f, r0	; 63
    f702:	cd bf       	out	0x3d, r28	; 61
    f704:	7c 01       	movw	r14, r24
    f706:	6b 01       	movw	r12, r22
    f708:	3a 01       	movw	r6, r20
    f70a:	fb 01       	movw	r30, r22
    f70c:	db 01       	movw	r26, r22
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62

int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    f70e:	8d 91       	ld	r24, X+
    f710:	81 11       	cpse	r24, r1
    f712:	fd cf       	rjmp	.-6      	; 0xf70e <DNSClient::getHostByName(char const*, IPAddress&)+0x3a>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
    f714:	30 e0       	ldi	r19, 0x00	; 0
    f716:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
    f718:	90 e0       	ldi	r25, 0x00	; 0
    f71a:	80 e0       	ldi	r24, 0x00	; 0
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    f71c:	5a e0       	ldi	r21, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    f71e:	41 91       	ld	r20, Z+
    f720:	44 23       	and	r20, r20
    f722:	01 f1       	breq	.+64     	; 0xf764 <DNSClient::getHostByName(char const*, IPAddress&)+0x90>
    f724:	84 30       	cpi	r24, 0x04	; 4
    f726:	91 05       	cpc	r25, r1
    f728:	0c f0       	brlt	.+2      	; 0xf72c <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
    f72a:	42 c0       	rjmp	.+132    	; 0xf7b0 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
    f72c:	4e 32       	cpi	r20, 0x2E	; 46
    f72e:	69 f4       	brne	.+26     	; 0xf74a <DNSClient::getHostByName(char const*, IPAddress&)+0x76>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    f730:	2f 3f       	cpi	r18, 0xFF	; 255
    f732:	31 05       	cpc	r19, r1
    f734:	09 f0       	breq	.+2      	; 0xf738 <DNSClient::getHostByName(char const*, IPAddress&)+0x64>
    f736:	e4 f5       	brge	.+120    	; 0xf7b0 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    f738:	d3 01       	movw	r26, r6
    f73a:	a8 0f       	add	r26, r24
    f73c:	b9 1f       	adc	r27, r25
    f73e:	12 96       	adiw	r26, 0x02	; 2
    f740:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
    f742:	01 96       	adiw	r24, 0x01	; 1
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
    f744:	30 e0       	ldi	r19, 0x00	; 0
    f746:	20 e0       	ldi	r18, 0x00	; 0
    f748:	ea cf       	rjmp	.-44     	; 0xf71e <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    f74a:	52 9f       	mul	r21, r18
    f74c:	b0 01       	movw	r22, r0
    f74e:	53 9f       	mul	r21, r19
    f750:	70 0d       	add	r23, r0
    f752:	11 24       	eor	r1, r1
    f754:	24 2f       	mov	r18, r20
    f756:	44 0f       	add	r20, r20
    f758:	33 0b       	sbc	r19, r19
    f75a:	20 53       	subi	r18, 0x30	; 48
    f75c:	31 09       	sbc	r19, r1
    f75e:	26 0f       	add	r18, r22
    f760:	37 1f       	adc	r19, r23
    f762:	dd cf       	rjmp	.-70     	; 0xf71e <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    f764:	2f 3f       	cpi	r18, 0xFF	; 255
    f766:	31 05       	cpc	r19, r1
    f768:	09 f0       	breq	.+2      	; 0xf76c <DNSClient::getHostByName(char const*, IPAddress&)+0x98>
    f76a:	14 f5       	brge	.+68     	; 0xf7b0 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
    f76c:	84 30       	cpi	r24, 0x04	; 4
    f76e:	91 05       	cpc	r25, r1
    f770:	fc f4       	brge	.+62     	; 0xf7b0 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    f772:	68 0e       	add	r6, r24
    f774:	79 1e       	adc	r7, r25
    f776:	f3 01       	movw	r30, r6
    f778:	22 83       	std	Z+2, r18	; 0x02
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    f77a:	cc 24       	eor	r12, r12
    f77c:	c3 94       	inc	r12
    f77e:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    f780:	c6 01       	movw	r24, r12
    f782:	63 96       	adiw	r28, 0x13	; 19
    f784:	0f b6       	in	r0, 0x3f	; 63
    f786:	f8 94       	cli
    f788:	de bf       	out	0x3e, r29	; 62
    f78a:	0f be       	out	0x3f, r0	; 63
    f78c:	cd bf       	out	0x3d, r28	; 61
    f78e:	df 91       	pop	r29
    f790:	cf 91       	pop	r28
    f792:	1f 91       	pop	r17
    f794:	0f 91       	pop	r16
    f796:	ff 90       	pop	r15
    f798:	ef 90       	pop	r14
    f79a:	df 90       	pop	r13
    f79c:	cf 90       	pop	r12
    f79e:	bf 90       	pop	r11
    f7a0:	af 90       	pop	r10
    f7a2:	9f 90       	pop	r9
    f7a4:	8f 90       	pop	r8
    f7a6:	7f 90       	pop	r7
    f7a8:	6f 90       	pop	r6
    f7aa:	5f 90       	pop	r5
    f7ac:	4f 90       	pop	r4
    f7ae:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    f7b0:	f7 01       	movw	r30, r14
    f7b2:	42 81       	ldd	r20, Z+2	; 0x02
    f7b4:	53 81       	ldd	r21, Z+3	; 0x03
    f7b6:	64 81       	ldd	r22, Z+4	; 0x04
    f7b8:	75 81       	ldd	r23, Z+5	; 0x05
    f7ba:	80 91 13 0e 	lds	r24, 0x0E13	; 0x800e13 <_ZL11INADDR_NONE.lto_priv.237+0x2>
    f7be:	90 91 14 0e 	lds	r25, 0x0E14	; 0x800e14 <_ZL11INADDR_NONE.lto_priv.237+0x3>
    f7c2:	a0 91 15 0e 	lds	r26, 0x0E15	; 0x800e15 <_ZL11INADDR_NONE.lto_priv.237+0x4>
    f7c6:	b0 91 16 0e 	lds	r27, 0x0E16	; 0x800e16 <_ZL11INADDR_NONE.lto_priv.237+0x5>
    f7ca:	48 17       	cp	r20, r24
    f7cc:	59 07       	cpc	r21, r25
    f7ce:	6a 07       	cpc	r22, r26
    f7d0:	7b 07       	cpc	r23, r27
    f7d2:	09 f4       	brne	.+2      	; 0xf7d6 <DNSClient::getHostByName(char const*, IPAddress&)+0x102>
    f7d4:	00 c2       	rjmp	.+1024   	; 0xfbd6 <DNSClient::getHostByName(char const*, IPAddress&)+0x502>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    f7d6:	87 01       	movw	r16, r14
    f7d8:	08 5f       	subi	r16, 0xF8	; 248
    f7da:	1f 4f       	sbci	r17, 0xFF	; 255
    f7dc:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
    f7e0:	6f 70       	andi	r22, 0x0F	; 15
    f7e2:	77 27       	eor	r23, r23
    f7e4:	7c 5f       	subi	r23, 0xFC	; 252
    f7e6:	c8 01       	movw	r24, r16
    f7e8:	0e 94 3c 7b 	call	0xf678	; 0xf678 <EthernetUDP::begin(unsigned int)>
    f7ec:	81 30       	cpi	r24, 0x01	; 1
    f7ee:	09 f0       	breq	.+2      	; 0xf7f2 <DNSClient::getHostByName(char const*, IPAddress&)+0x11e>
    f7f0:	f7 c1       	rjmp	.+1006   	; 0xfbe0 <DNSClient::getHostByName(char const*, IPAddress&)+0x50c>
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    f7f2:	82 ef       	ldi	r24, 0xF2	; 242
    f7f4:	92 e0       	ldi	r25, 0x02	; 2
    f7f6:	9a 83       	std	Y+2, r25	; 0x02
    f7f8:	89 83       	std	Y+1, r24	; 0x01
    f7fa:	f7 01       	movw	r30, r14
    f7fc:	82 81       	ldd	r24, Z+2	; 0x02
    f7fe:	93 81       	ldd	r25, Z+3	; 0x03
    f800:	a4 81       	ldd	r26, Z+4	; 0x04
    f802:	b5 81       	ldd	r27, Z+5	; 0x05
    f804:	8b 83       	std	Y+3, r24	; 0x03
    f806:	9c 83       	std	Y+4, r25	; 0x04
    f808:	ad 83       	std	Y+5, r26	; 0x05
    f80a:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    f80c:	45 e3       	ldi	r20, 0x35	; 53
    f80e:	50 e0       	ldi	r21, 0x00	; 0
    f810:	be 01       	movw	r22, r28
    f812:	6f 5f       	subi	r22, 0xFF	; 255
    f814:	7f 4f       	sbci	r23, 0xFF	; 255
    f816:	c8 01       	movw	r24, r16
    f818:	0e 94 be 78 	call	0xf17c	; 0xf17c <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
    f81c:	89 2b       	or	r24, r25
    f81e:	31 f4       	brne	.+12     	; 0xf82c <DNSClient::getHostByName(char const*, IPAddress&)+0x158>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    f820:	d1 2c       	mov	r13, r1
    f822:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    f824:	c8 01       	movw	r24, r16
    f826:	0e 94 a9 78 	call	0xf152	; 0xf152 <EthernetUDP::stop()>
    f82a:	aa cf       	rjmp	.-172    	; 0xf780 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    f82c:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
    f830:	f7 01       	movw	r30, r14
    f832:	77 83       	std	Z+7, r23	; 0x07
    f834:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    f836:	42 e0       	ldi	r20, 0x02	; 2
    f838:	50 e0       	ldi	r21, 0x00	; 0
    f83a:	b7 01       	movw	r22, r14
    f83c:	6a 5f       	subi	r22, 0xFA	; 250
    f83e:	7f 4f       	sbci	r23, 0xFF	; 255
    f840:	c8 01       	movw	r24, r16
    f842:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    f846:	81 e0       	ldi	r24, 0x01	; 1
    f848:	90 e0       	ldi	r25, 0x00	; 0
    f84a:	9a 83       	std	Y+2, r25	; 0x02
    f84c:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    f84e:	42 e0       	ldi	r20, 0x02	; 2
    f850:	50 e0       	ldi	r21, 0x00	; 0
    f852:	be 01       	movw	r22, r28
    f854:	6f 5f       	subi	r22, 0xFF	; 255
    f856:	7f 4f       	sbci	r23, 0xFF	; 255
    f858:	c8 01       	movw	r24, r16
    f85a:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
    f85e:	80 e0       	ldi	r24, 0x00	; 0
    f860:	91 e0       	ldi	r25, 0x01	; 1
    f862:	9a 83       	std	Y+2, r25	; 0x02
    f864:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    f866:	42 e0       	ldi	r20, 0x02	; 2
    f868:	50 e0       	ldi	r21, 0x00	; 0
    f86a:	be 01       	movw	r22, r28
    f86c:	6f 5f       	subi	r22, 0xFF	; 255
    f86e:	7f 4f       	sbci	r23, 0xFF	; 255
    f870:	c8 01       	movw	r24, r16
    f872:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
    f876:	1a 82       	std	Y+2, r1	; 0x02
    f878:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    f87a:	42 e0       	ldi	r20, 0x02	; 2
    f87c:	50 e0       	ldi	r21, 0x00	; 0
    f87e:	be 01       	movw	r22, r28
    f880:	6f 5f       	subi	r22, 0xFF	; 255
    f882:	7f 4f       	sbci	r23, 0xFF	; 255
    f884:	c8 01       	movw	r24, r16
    f886:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    f88a:	42 e0       	ldi	r20, 0x02	; 2
    f88c:	50 e0       	ldi	r21, 0x00	; 0
    f88e:	be 01       	movw	r22, r28
    f890:	6f 5f       	subi	r22, 0xFF	; 255
    f892:	7f 4f       	sbci	r23, 0xFF	; 255
    f894:	c8 01       	movw	r24, r16
    f896:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    f89a:	42 e0       	ldi	r20, 0x02	; 2
    f89c:	50 e0       	ldi	r21, 0x00	; 0
    f89e:	be 01       	movw	r22, r28
    f8a0:	6f 5f       	subi	r22, 0xFF	; 255
    f8a2:	7f 4f       	sbci	r23, 0xFF	; 255
    f8a4:	c8 01       	movw	r24, r16
    f8a6:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
    f8aa:	56 01       	movw	r10, r12
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    f8ac:	f6 01       	movw	r30, r12
    f8ae:	80 81       	ld	r24, Z
    f8b0:	88 23       	and	r24, r24
    f8b2:	01 f1       	breq	.+64     	; 0xf8f4 <DNSClient::getHostByName(char const*, IPAddress&)+0x220>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
    f8b4:	65 01       	movw	r12, r10
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
    f8b6:	f6 01       	movw	r30, r12
    f8b8:	81 91       	ld	r24, Z+
    f8ba:	2f 01       	movw	r4, r30
    f8bc:	88 23       	and	r24, r24
    f8be:	11 f0       	breq	.+4      	; 0xf8c4 <DNSClient::getHostByName(char const*, IPAddress&)+0x1f0>
    f8c0:	8e 32       	cpi	r24, 0x2E	; 46
    f8c2:	b1 f4       	brne	.+44     	; 0xf8f0 <DNSClient::getHostByName(char const*, IPAddress&)+0x21c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
    f8c4:	46 01       	movw	r8, r12
    f8c6:	8a 18       	sub	r8, r10
    f8c8:	9b 08       	sbc	r9, r11
    f8ca:	18 14       	cp	r1, r8
    f8cc:	19 04       	cpc	r1, r9
    f8ce:	74 f4       	brge	.+28     	; 0xf8ec <DNSClient::getHostByName(char const*, IPAddress&)+0x218>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
    f8d0:	8d 86       	std	Y+13, r8	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
    f8d2:	41 e0       	ldi	r20, 0x01	; 1
    f8d4:	50 e0       	ldi	r21, 0x00	; 0
    f8d6:	be 01       	movw	r22, r28
    f8d8:	63 5f       	subi	r22, 0xF3	; 243
    f8da:	7f 4f       	sbci	r23, 0xFF	; 255
    f8dc:	c8 01       	movw	r24, r16
    f8de:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    f8e2:	a4 01       	movw	r20, r8
    f8e4:	b5 01       	movw	r22, r10
    f8e6:	c8 01       	movw	r24, r16
    f8e8:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    f8ec:	52 01       	movw	r10, r4
    f8ee:	de cf       	rjmp	.-68     	; 0xf8ac <DNSClient::getHostByName(char const*, IPAddress&)+0x1d8>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    f8f0:	62 01       	movw	r12, r4
    f8f2:	e1 cf       	rjmp	.-62     	; 0xf8b6 <DNSClient::getHostByName(char const*, IPAddress&)+0x1e2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    f8f4:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
    f8f6:	41 e0       	ldi	r20, 0x01	; 1
    f8f8:	50 e0       	ldi	r21, 0x00	; 0
    f8fa:	be 01       	movw	r22, r28
    f8fc:	63 5f       	subi	r22, 0xF3	; 243
    f8fe:	7f 4f       	sbci	r23, 0xFF	; 255
    f900:	c8 01       	movw	r24, r16
    f902:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    f906:	c1 2c       	mov	r12, r1
    f908:	dd 24       	eor	r13, r13
    f90a:	d3 94       	inc	r13
    f90c:	da 82       	std	Y+2, r13	; 0x02
    f90e:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    f910:	42 e0       	ldi	r20, 0x02	; 2
    f912:	50 e0       	ldi	r21, 0x00	; 0
    f914:	be 01       	movw	r22, r28
    f916:	6f 5f       	subi	r22, 0xFF	; 255
    f918:	7f 4f       	sbci	r23, 0xFF	; 255
    f91a:	c8 01       	movw	r24, r16
    f91c:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    f920:	da 82       	std	Y+2, r13	; 0x02
    f922:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    f924:	42 e0       	ldi	r20, 0x02	; 2
    f926:	50 e0       	ldi	r21, 0x00	; 0
    f928:	be 01       	movw	r22, r28
    f92a:	6f 5f       	subi	r22, 0xFF	; 255
    f92c:	7f 4f       	sbci	r23, 0xFF	; 255
    f92e:	c8 01       	movw	r24, r16
    f930:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                // Now output the request data
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    f934:	c8 01       	movw	r24, r16
    f936:	0e 94 13 7b 	call	0xf626	; 0xf626 <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
    f93a:	89 2b       	or	r24, r25
    f93c:	09 f4       	brne	.+2      	; 0xf940 <DNSClient::getHostByName(char const*, IPAddress&)+0x26c>
    f93e:	70 cf       	rjmp	.-288    	; 0xf820 <DNSClient::getHostByName(char const*, IPAddress&)+0x14c>
    f940:	f3 e0       	ldi	r31, 0x03	; 3
    f942:	af 2e       	mov	r10, r31
    f944:	b1 2c       	mov	r11, r1
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    f946:	23 01       	movw	r4, r6
    f948:	22 e0       	ldi	r18, 0x02	; 2
    f94a:	42 0e       	add	r4, r18
    f94c:	51 1c       	adc	r5, r1
    f94e:	43 c0       	rjmp	.+134    	; 0xf9d6 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    f950:	f7 01       	movw	r30, r14
    f952:	42 81       	ldd	r20, Z+2	; 0x02
    f954:	53 81       	ldd	r21, Z+3	; 0x03
    f956:	64 81       	ldd	r22, Z+4	; 0x04
    f958:	75 81       	ldd	r23, Z+5	; 0x05
    f95a:	81 8d       	ldd	r24, Z+25	; 0x19
    f95c:	92 8d       	ldd	r25, Z+26	; 0x1a
    f95e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    f960:	b4 8d       	ldd	r27, Z+28	; 0x1c
    f962:	48 17       	cp	r20, r24
    f964:	59 07       	cpc	r21, r25
    f966:	6a 07       	cpc	r22, r26
    f968:	7b 07       	cpc	r23, r27
    f96a:	09 f0       	breq	.+2      	; 0xf96e <DNSClient::getHostByName(char const*, IPAddress&)+0x29a>
    f96c:	2a c1       	rjmp	.+596    	; 0xfbc2 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
    f96e:	85 8d       	ldd	r24, Z+29	; 0x1d
    f970:	96 8d       	ldd	r25, Z+30	; 0x1e
    f972:	c5 97       	sbiw	r24, 0x35	; 53
    f974:	09 f0       	breq	.+2      	; 0xf978 <DNSClient::getHostByName(char const*, IPAddress&)+0x2a4>
    f976:	25 c1       	rjmp	.+586    	; 0xfbc2 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    f978:	81 a1       	ldd	r24, Z+33	; 0x21
    f97a:	92 a1       	ldd	r25, Z+34	; 0x22
    f97c:	0c 97       	sbiw	r24, 0x0c	; 12
    f97e:	0c f4       	brge	.+2      	; 0xf982 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ae>
    f980:	25 c1       	rjmp	.+586    	; 0xfbcc <DNSClient::getHostByName(char const*, IPAddress&)+0x4f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    f982:	4c e0       	ldi	r20, 0x0C	; 12
    f984:	50 e0       	ldi	r21, 0x00	; 0
    f986:	be 01       	movw	r22, r28
    f988:	6f 5f       	subi	r22, 0xFF	; 255
    f98a:	7f 4f       	sbci	r23, 0xFF	; 255
    f98c:	c8 01       	movw	r24, r16
    f98e:	0e 94 5b 7a 	call	0xf4b6	; 0xf4b6 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    f992:	8b 81       	ldd	r24, Y+3	; 0x03
    f994:	9c 81       	ldd	r25, Y+4	; 0x04
    f996:	98 27       	eor	r25, r24
    f998:	89 27       	eor	r24, r25
    f99a:	98 27       	eor	r25, r24
    f99c:	9a 8b       	std	Y+18, r25	; 0x12
    f99e:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    f9a0:	f7 01       	movw	r30, r14
    f9a2:	46 81       	ldd	r20, Z+6	; 0x06
    f9a4:	57 81       	ldd	r21, Z+7	; 0x07
    f9a6:	29 81       	ldd	r18, Y+1	; 0x01
    f9a8:	3a 81       	ldd	r19, Y+2	; 0x02
    f9aa:	42 17       	cp	r20, r18
    f9ac:	53 07       	cpc	r21, r19
    f9ae:	11 f4       	brne	.+4      	; 0xf9b4 <DNSClient::getHostByName(char const*, IPAddress&)+0x2e0>
    f9b0:	97 fd       	sbrc	r25, 7
    f9b2:	2f c0       	rjmp	.+94     	; 0xfa12 <DNSClient::getHostByName(char const*, IPAddress&)+0x33e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    f9b4:	c8 01       	movw	r24, r16
    f9b6:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
    f9ba:	ec ef       	ldi	r30, 0xFC	; 252
    f9bc:	ce 2e       	mov	r12, r30
    f9be:	dd 24       	eor	r13, r13
    f9c0:	da 94       	dec	r13
    f9c2:	81 e0       	ldi	r24, 0x01	; 1
    f9c4:	a8 1a       	sub	r10, r24
    f9c6:	b1 08       	sbc	r11, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    f9c8:	09 f4       	brne	.+2      	; 0xf9cc <DNSClient::getHostByName(char const*, IPAddress&)+0x2f8>
    f9ca:	2c cf       	rjmp	.-424    	; 0xf824 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
    f9cc:	ff ef       	ldi	r31, 0xFF	; 255
    f9ce:	cf 16       	cp	r12, r31
    f9d0:	df 06       	cpc	r13, r31
    f9d2:	09 f0       	breq	.+2      	; 0xf9d6 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
    f9d4:	27 cf       	rjmp	.-434    	; 0xf824 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();
    f9d6:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
    f9da:	3b 01       	movw	r6, r22
    f9dc:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    f9de:	c8 01       	movw	r24, r16
    f9e0:	0e 94 a4 7a 	call	0xf548	; 0xf548 <EthernetUDP::parsePacket()>
    f9e4:	18 16       	cp	r1, r24
    f9e6:	19 06       	cpc	r1, r25
    f9e8:	0c f4       	brge	.+2      	; 0xf9ec <DNSClient::getHostByName(char const*, IPAddress&)+0x318>
    f9ea:	b2 cf       	rjmp	.-156    	; 0xf950 <DNSClient::getHostByName(char const*, IPAddress&)+0x27c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
    f9ec:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
    f9f0:	66 19       	sub	r22, r6
    f9f2:	77 09       	sbc	r23, r7
    f9f4:	88 09       	sbc	r24, r8
    f9f6:	99 09       	sbc	r25, r9
    f9f8:	69 38       	cpi	r22, 0x89	; 137
    f9fa:	73 41       	sbci	r23, 0x13	; 19
    f9fc:	81 05       	cpc	r24, r1
    f9fe:	91 05       	cpc	r25, r1
    fa00:	08 f0       	brcs	.+2      	; 0xfa04 <DNSClient::getHostByName(char const*, IPAddress&)+0x330>
    fa02:	db c0       	rjmp	.+438    	; 0xfbba <DNSClient::getHostByName(char const*, IPAddress&)+0x4e6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
    fa04:	62 e3       	ldi	r22, 0x32	; 50
    fa06:	70 e0       	ldi	r23, 0x00	; 0
    fa08:	80 e0       	ldi	r24, 0x00	; 0
    fa0a:	90 e0       	ldi	r25, 0x00	; 0
    fa0c:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
    fa10:	e6 cf       	rjmp	.-52     	; 0xf9de <DNSClient::getHostByName(char const*, IPAddress&)+0x30a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    fa12:	8f 70       	andi	r24, 0x0F	; 15
    fa14:	92 70       	andi	r25, 0x02	; 2
    fa16:	89 2b       	or	r24, r25
    fa18:	41 f0       	breq	.+16     	; 0xfa2a <DNSClient::getHostByName(char const*, IPAddress&)+0x356>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
    fa1a:	c8 01       	movw	r24, r16
    fa1c:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
    fa20:	7b ef       	ldi	r23, 0xFB	; 251
    fa22:	c7 2e       	mov	r12, r23
    fa24:	dd 24       	eor	r13, r13
    fa26:	da 94       	dec	r13
    fa28:	cc cf       	rjmp	.-104    	; 0xf9c2 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    fa2a:	6f 80       	ldd	r6, Y+7	; 0x07
    fa2c:	78 84       	ldd	r7, Y+8	; 0x08
    fa2e:	76 24       	eor	r7, r6
    fa30:	67 24       	eor	r6, r7
    fa32:	76 24       	eor	r7, r6
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    fa34:	d1 2c       	mov	r13, r1
    fa36:	c1 2c       	mov	r12, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    fa38:	61 14       	cp	r6, r1
    fa3a:	71 04       	cpc	r7, r1
    fa3c:	d1 f4       	brne	.+52     	; 0xfa72 <DNSClient::getHostByName(char const*, IPAddress&)+0x39e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
    fa3e:	c8 01       	movw	r24, r16
    fa40:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
    fa44:	6a ef       	ldi	r22, 0xFA	; 250
    fa46:	c6 2e       	mov	r12, r22
    fa48:	dd 24       	eor	r13, r13
    fa4a:	da 94       	dec	r13
    fa4c:	ba cf       	rjmp	.-140    	; 0xf9c2 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    fa4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    fa50:	81 11       	cpse	r24, r1
    fa52:	17 c0       	rjmp	.+46     	; 0xfa82 <DNSClient::getHostByName(char const*, IPAddress&)+0x3ae>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    fa54:	c8 01       	movw	r24, r16
    fa56:	0e 94 7a 7a 	call	0xf4f4	; 0xf4f4 <EthernetUDP::read()>
    fa5a:	c8 01       	movw	r24, r16
    fa5c:	0e 94 7a 7a 	call	0xf4f4	; 0xf4f4 <EthernetUDP::read()>
    fa60:	c8 01       	movw	r24, r16
    fa62:	0e 94 7a 7a 	call	0xf4f4	; 0xf4f4 <EthernetUDP::read()>
    fa66:	c8 01       	movw	r24, r16
    fa68:	0e 94 7a 7a 	call	0xf4f4	; 0xf4f4 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    fa6c:	ff ef       	ldi	r31, 0xFF	; 255
    fa6e:	cf 1a       	sub	r12, r31
    fa70:	df 0a       	sbc	r13, r31
    fa72:	8d 81       	ldd	r24, Y+5	; 0x05
    fa74:	9e 81       	ldd	r25, Y+6	; 0x06
    fa76:	98 27       	eor	r25, r24
    fa78:	89 27       	eor	r24, r25
    fa7a:	98 27       	eor	r25, r24
    fa7c:	c8 16       	cp	r12, r24
    fa7e:	d9 06       	cpc	r13, r25
    fa80:	a8 f4       	brcc	.+42     	; 0xfaac <DNSClient::getHostByName(char const*, IPAddress&)+0x3d8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    fa82:	41 e0       	ldi	r20, 0x01	; 1
    fa84:	50 e0       	ldi	r21, 0x00	; 0
    fa86:	be 01       	movw	r22, r28
    fa88:	63 5f       	subi	r22, 0xF3	; 243
    fa8a:	7f 4f       	sbci	r23, 0xFF	; 255
    fa8c:	c8 01       	movw	r24, r16
    fa8e:	0e 94 5b 7a 	call	0xf4b6	; 0xf4b6 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
    fa92:	8d 85       	ldd	r24, Y+13	; 0x0d
    fa94:	88 23       	and	r24, r24
    fa96:	d9 f2       	breq	.-74     	; 0xfa4e <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    fa98:	8d 85       	ldd	r24, Y+13	; 0x0d
    fa9a:	9f ef       	ldi	r25, 0xFF	; 255
    fa9c:	98 0f       	add	r25, r24
    fa9e:	9d 87       	std	Y+13, r25	; 0x0d
    faa0:	88 23       	and	r24, r24
    faa2:	a9 f2       	breq	.-86     	; 0xfa4e <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
    faa4:	c8 01       	movw	r24, r16
    faa6:	0e 94 7a 7a 	call	0xf4f4	; 0xf4f4 <EthernetUDP::read()>
    faaa:	f6 cf       	rjmp	.-20     	; 0xfa98 <DNSClient::getHostByName(char const*, IPAddress&)+0x3c4>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    faac:	91 2c       	mov	r9, r1
    faae:	81 2c       	mov	r8, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    fab0:	41 e0       	ldi	r20, 0x01	; 1
    fab2:	50 e0       	ldi	r21, 0x00	; 0
    fab4:	be 01       	movw	r22, r28
    fab6:	6d 5e       	subi	r22, 0xED	; 237
    fab8:	7f 4f       	sbci	r23, 0xFF	; 255
    faba:	c8 01       	movw	r24, r16
    fabc:	0e 94 5b 7a 	call	0xf4b6	; 0xf4b6 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    fac0:	8b 89       	ldd	r24, Y+19	; 0x13
    fac2:	98 2f       	mov	r25, r24
    fac4:	90 7c       	andi	r25, 0xC0	; 192
    fac6:	61 f4       	brne	.+24     	; 0xfae0 <DNSClient::getHostByName(char const*, IPAddress&)+0x40c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
    fac8:	88 23       	and	r24, r24
    faca:	89 f0       	breq	.+34     	; 0xfaee <DNSClient::getHostByName(char const*, IPAddress&)+0x41a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    facc:	8b 89       	ldd	r24, Y+19	; 0x13
    face:	9f ef       	ldi	r25, 0xFF	; 255
    fad0:	98 0f       	add	r25, r24
    fad2:	9b 8b       	std	Y+19, r25	; 0x13
    fad4:	88 23       	and	r24, r24
    fad6:	41 f0       	breq	.+16     	; 0xfae8 <DNSClient::getHostByName(char const*, IPAddress&)+0x414>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
    fad8:	c8 01       	movw	r24, r16
    fada:	0e 94 7a 7a 	call	0xf4f4	; 0xf4f4 <EthernetUDP::read()>
    fade:	f6 cf       	rjmp	.-20     	; 0xfacc <DNSClient::getHostByName(char const*, IPAddress&)+0x3f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    fae0:	c8 01       	movw	r24, r16
    fae2:	0e 94 7a 7a 	call	0xf4f4	; 0xf4f4 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
    fae6:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
    fae8:	8b 89       	ldd	r24, Y+19	; 0x13
    faea:	81 11       	cpse	r24, r1
    faec:	e1 cf       	rjmp	.-62     	; 0xfab0 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    faee:	42 e0       	ldi	r20, 0x02	; 2
    faf0:	50 e0       	ldi	r21, 0x00	; 0
    faf2:	be 01       	movw	r22, r28
    faf4:	61 5f       	subi	r22, 0xF1	; 241
    faf6:	7f 4f       	sbci	r23, 0xFF	; 255
    faf8:	c8 01       	movw	r24, r16
    fafa:	0e 94 5b 7a 	call	0xf4b6	; 0xf4b6 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    fafe:	42 e0       	ldi	r20, 0x02	; 2
    fb00:	50 e0       	ldi	r21, 0x00	; 0
    fb02:	be 01       	movw	r22, r28
    fb04:	63 5f       	subi	r22, 0xF3	; 243
    fb06:	7f 4f       	sbci	r23, 0xFF	; 255
    fb08:	c8 01       	movw	r24, r16
    fb0a:	0e 94 5b 7a 	call	0xf4b6	; 0xf4b6 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    fb0e:	c8 01       	movw	r24, r16
    fb10:	0e 94 7a 7a 	call	0xf4f4	; 0xf4f4 <EthernetUDP::read()>
    fb14:	c8 01       	movw	r24, r16
    fb16:	0e 94 7a 7a 	call	0xf4f4	; 0xf4f4 <EthernetUDP::read()>
    fb1a:	c8 01       	movw	r24, r16
    fb1c:	0e 94 7a 7a 	call	0xf4f4	; 0xf4f4 <EthernetUDP::read()>
    fb20:	c8 01       	movw	r24, r16
    fb22:	0e 94 7a 7a 	call	0xf4f4	; 0xf4f4 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    fb26:	42 e0       	ldi	r20, 0x02	; 2
    fb28:	50 e0       	ldi	r21, 0x00	; 0
    fb2a:	be 01       	movw	r22, r28
    fb2c:	6f 5e       	subi	r22, 0xEF	; 239
    fb2e:	7f 4f       	sbci	r23, 0xFF	; 255
    fb30:	c8 01       	movw	r24, r16
    fb32:	0e 94 5b 7a 	call	0xf4b6	; 0xf4b6 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    fb36:	8f 85       	ldd	r24, Y+15	; 0x0f
    fb38:	98 89       	ldd	r25, Y+16	; 0x10
    fb3a:	81 15       	cp	r24, r1
    fb3c:	91 40       	sbci	r25, 0x01	; 1
    fb3e:	e9 f4       	brne	.+58     	; 0xfb7a <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
    fb40:	cd 84       	ldd	r12, Y+13	; 0x0d
    fb42:	de 84       	ldd	r13, Y+14	; 0x0e
    fb44:	dc 24       	eor	r13, r12
    fb46:	cd 24       	eor	r12, r13
    fb48:	dc 24       	eor	r13, r12
    fb4a:	81 e0       	ldi	r24, 0x01	; 1
    fb4c:	c8 16       	cp	r12, r24
    fb4e:	d1 04       	cpc	r13, r1
    fb50:	a1 f4       	brne	.+40     	; 0xfb7a <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
    fb52:	89 89       	ldd	r24, Y+17	; 0x11
    fb54:	9a 89       	ldd	r25, Y+18	; 0x12
    fb56:	81 15       	cp	r24, r1
    fb58:	94 40       	sbci	r25, 0x04	; 4
    fb5a:	41 f0       	breq	.+16     	; 0xfb6c <DNSClient::getHostByName(char const*, IPAddress&)+0x498>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    fb5c:	c8 01       	movw	r24, r16
    fb5e:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
    fb62:	57 ef       	ldi	r21, 0xF7	; 247
    fb64:	c5 2e       	mov	r12, r21
    fb66:	dd 24       	eor	r13, r13
    fb68:	da 94       	dec	r13
    fb6a:	2b cf       	rjmp	.-426    	; 0xf9c2 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
    fb6c:	44 e0       	ldi	r20, 0x04	; 4
    fb6e:	50 e0       	ldi	r21, 0x00	; 0
    fb70:	b2 01       	movw	r22, r4
    fb72:	c8 01       	movw	r24, r16
    fb74:	0e 94 5b 7a 	call	0xf4b6	; 0xf4b6 <EthernetUDP::read(unsigned char*, unsigned int)>
    fb78:	24 cf       	rjmp	.-440    	; 0xf9c2 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    fb7a:	d1 2c       	mov	r13, r1
    fb7c:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    fb7e:	89 89       	ldd	r24, Y+17	; 0x11
    fb80:	9a 89       	ldd	r25, Y+18	; 0x12
    fb82:	98 27       	eor	r25, r24
    fb84:	89 27       	eor	r24, r25
    fb86:	98 27       	eor	r25, r24
    fb88:	c8 16       	cp	r12, r24
    fb8a:	d9 06       	cpc	r13, r25
    fb8c:	38 f4       	brcc	.+14     	; 0xfb9c <DNSClient::getHostByName(char const*, IPAddress&)+0x4c8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412
            {
                iUdp.read(); // we don't care about the returned byte
    fb8e:	c8 01       	movw	r24, r16
    fb90:	0e 94 7a 7a 	call	0xf4f4	; 0xf4f4 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    fb94:	ff ef       	ldi	r31, 0xFF	; 255
    fb96:	cf 1a       	sub	r12, r31
    fb98:	df 0a       	sbc	r13, r31
    fb9a:	f1 cf       	rjmp	.-30     	; 0xfb7e <DNSClient::getHostByName(char const*, IPAddress&)+0x4aa>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    fb9c:	2f ef       	ldi	r18, 0xFF	; 255
    fb9e:	82 1a       	sub	r8, r18
    fba0:	92 0a       	sbc	r9, r18
    fba2:	68 14       	cp	r6, r8
    fba4:	79 04       	cpc	r7, r9
    fba6:	09 f0       	breq	.+2      	; 0xfbaa <DNSClient::getHostByName(char const*, IPAddress&)+0x4d6>
    fba8:	83 cf       	rjmp	.-250    	; 0xfab0 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    fbaa:	c8 01       	movw	r24, r16
    fbac:	0e 94 b7 3f 	call	0x7f6e	; 0x7f6e <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    fbb0:	46 ef       	ldi	r20, 0xF6	; 246
    fbb2:	c4 2e       	mov	r12, r20
    fbb4:	dd 24       	eor	r13, r13
    fbb6:	da 94       	dec	r13
    fbb8:	04 cf       	rjmp	.-504    	; 0xf9c2 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    fbba:	cc 24       	eor	r12, r12
    fbbc:	ca 94       	dec	r12
    fbbe:	dc 2c       	mov	r13, r12
    fbc0:	00 cf       	rjmp	.-512    	; 0xf9c2 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    fbc2:	2e ef       	ldi	r18, 0xFE	; 254
    fbc4:	c2 2e       	mov	r12, r18
    fbc6:	dd 24       	eor	r13, r13
    fbc8:	da 94       	dec	r13
    fbca:	fb ce       	rjmp	.-522    	; 0xf9c2 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    fbcc:	9d ef       	ldi	r25, 0xFD	; 253
    fbce:	c9 2e       	mov	r12, r25
    fbd0:	dd 24       	eor	r13, r13
    fbd2:	da 94       	dec	r13
    fbd4:	f6 ce       	rjmp	.-532    	; 0xf9c2 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    fbd6:	8e ef       	ldi	r24, 0xFE	; 254
    fbd8:	c8 2e       	mov	r12, r24
    fbda:	dd 24       	eor	r13, r13
    fbdc:	da 94       	dec	r13
    fbde:	d0 cd       	rjmp	.-1120   	; 0xf780 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:120
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    fbe0:	d1 2c       	mov	r13, r1
    fbe2:	c1 2c       	mov	r12, r1
    fbe4:	cd cd       	rjmp	.-1126   	; 0xf780 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>

0000fbe6 <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
    fbe6:	cf 92       	push	r12
    fbe8:	df 92       	push	r13
    fbea:	ef 92       	push	r14
    fbec:	ff 92       	push	r15
    fbee:	0f 93       	push	r16
    fbf0:	1f 93       	push	r17
    fbf2:	cf 93       	push	r28
    fbf4:	df 93       	push	r29
    fbf6:	cd b7       	in	r28, 0x3d	; 61
    fbf8:	de b7       	in	r29, 0x3e	; 62
    fbfa:	af 97       	sbiw	r28, 0x2f	; 47
    fbfc:	0f b6       	in	r0, 0x3f	; 63
    fbfe:	f8 94       	cli
    fc00:	de bf       	out	0x3e, r29	; 62
    fc02:	0f be       	out	0x3f, r0	; 63
    fc04:	cd bf       	out	0x3d, r28	; 61
    fc06:	7c 01       	movw	r14, r24
    fc08:	6a 01       	movw	r12, r20
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    fc0a:	02 ef       	ldi	r16, 0xF2	; 242
    fc0c:	12 e0       	ldi	r17, 0x02	; 2
    fc0e:	1a 83       	std	Y+2, r17	; 0x02
    fc10:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    fc12:	1c 86       	std	Y+12, r1	; 0x0c
    fc14:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
    fc16:	88 ee       	ldi	r24, 0xE8	; 232
    fc18:	93 e0       	ldi	r25, 0x03	; 3
    fc1a:	a0 e0       	ldi	r26, 0x00	; 0
    fc1c:	b0 e0       	ldi	r27, 0x00	; 0
    fc1e:	8d 87       	std	Y+13, r24	; 0x0d
    fc20:	9e 87       	std	Y+14, r25	; 0x0e
    fc22:	af 87       	std	Y+15, r26	; 0x0f
    fc24:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    fc26:	88 ea       	ldi	r24, 0xA8	; 168
    fc28:	92 e0       	ldi	r25, 0x02	; 2
    fc2a:	9a 87       	std	Y+10, r25	; 0x0a
    fc2c:	89 87       	std	Y+9, r24	; 0x09
    fc2e:	88 e0       	ldi	r24, 0x08	; 8
    fc30:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
    fc32:	19 8f       	std	Y+25, r17	; 0x19
    fc34:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    fc36:	1a 8e       	std	Y+26, r1	; 0x1a
    fc38:	1b 8e       	std	Y+27, r1	; 0x1b
    fc3a:	1c 8e       	std	Y+28, r1	; 0x1c
    fc3c:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    fc3e:	1b a7       	std	Y+43, r17	; 0x2b
    fc40:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    fc42:	1c a6       	std	Y+44, r1	; 0x2c
    fc44:	1d a6       	std	Y+45, r1	; 0x2d
    fc46:	1e a6       	std	Y+46, r1	; 0x2e
    fc48:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    fc4a:	80 91 06 0e 	lds	r24, 0x0E06	; 0x800e06 <Ethernet+0x2>
    fc4e:	90 91 07 0e 	lds	r25, 0x0E07	; 0x800e07 <Ethernet+0x3>
    fc52:	a0 91 08 0e 	lds	r26, 0x0E08	; 0x800e08 <Ethernet+0x4>
    fc56:	b0 91 09 0e 	lds	r27, 0x0E09	; 0x800e09 <Ethernet+0x5>
    fc5a:	8e a3       	std	Y+38, r24	; 0x26
    fc5c:	9f a3       	std	Y+39, r25	; 0x27
    fc5e:	a8 a7       	std	Y+40, r26	; 0x28
    fc60:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    fc62:	8b 83       	std	Y+3, r24	; 0x03
    fc64:	9c 83       	std	Y+4, r25	; 0x04
    fc66:	ad 83       	std	Y+5, r26	; 0x05
    fc68:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    fc6a:	18 86       	std	Y+8, r1	; 0x08
    fc6c:	1f 82       	std	Y+7, r1	; 0x07
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    fc6e:	ae 01       	movw	r20, r28
    fc70:	46 5d       	subi	r20, 0xD6	; 214
    fc72:	5f 4f       	sbci	r21, 0xFF	; 255
    fc74:	ce 01       	movw	r24, r28
    fc76:	01 96       	adiw	r24, 0x01	; 1
    fc78:	0e 94 6a 7b 	call	0xf6d4	; 0xf6d4 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
    fc7c:	81 30       	cpi	r24, 0x01	; 1
    fc7e:	91 05       	cpc	r25, r1
    fc80:	b1 f4       	brne	.+44     	; 0xfcae <EthernetUDP::beginPacket(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
    fc82:	d7 01       	movw	r26, r14
    fc84:	ed 91       	ld	r30, X+
    fc86:	fc 91       	ld	r31, X
    fc88:	04 88       	ldd	r0, Z+20	; 0x14
    fc8a:	f5 89       	ldd	r31, Z+21	; 0x15
    fc8c:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
    fc8e:	1d a3       	std	Y+37, r17	; 0x25
    fc90:	0c a3       	std	Y+36, r16	; 0x24
    fc92:	8c a5       	ldd	r24, Y+44	; 0x2c
    fc94:	9d a5       	ldd	r25, Y+45	; 0x2d
    fc96:	ae a5       	ldd	r26, Y+46	; 0x2e
    fc98:	bf a5       	ldd	r27, Y+47	; 0x2f
    fc9a:	8e a3       	std	Y+38, r24	; 0x26
    fc9c:	9f a3       	std	Y+39, r25	; 0x27
    fc9e:	a8 a7       	std	Y+40, r26	; 0x28
    fca0:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    fca2:	a6 01       	movw	r20, r12
    fca4:	be 01       	movw	r22, r28
    fca6:	6c 5d       	subi	r22, 0xDC	; 220
    fca8:	7f 4f       	sbci	r23, 0xFF	; 255
    fcaa:	c7 01       	movw	r24, r14
    fcac:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
    fcae:	af 96       	adiw	r28, 0x2f	; 47
    fcb0:	0f b6       	in	r0, 0x3f	; 63
    fcb2:	f8 94       	cli
    fcb4:	de bf       	out	0x3e, r29	; 62
    fcb6:	0f be       	out	0x3f, r0	; 63
    fcb8:	cd bf       	out	0x3d, r28	; 61
    fcba:	df 91       	pop	r29
    fcbc:	cf 91       	pop	r28
    fcbe:	1f 91       	pop	r17
    fcc0:	0f 91       	pop	r16
    fcc2:	ff 90       	pop	r15
    fcc4:	ef 90       	pop	r14
    fcc6:	df 90       	pop	r13
    fcc8:	cf 90       	pop	r12
    fcca:	08 95       	ret

0000fccc <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    fccc:	cf 92       	push	r12
    fcce:	df 92       	push	r13
    fcd0:	ef 92       	push	r14
    fcd2:	ff 92       	push	r15
    fcd4:	0f 93       	push	r16
    fcd6:	1f 93       	push	r17
    fcd8:	cf 93       	push	r28
    fcda:	df 93       	push	r29
    fcdc:	cd b7       	in	r28, 0x3d	; 61
    fcde:	de b7       	in	r29, 0x3e	; 62
    fce0:	af 97       	sbiw	r28, 0x2f	; 47
    fce2:	0f b6       	in	r0, 0x3f	; 63
    fce4:	f8 94       	cli
    fce6:	de bf       	out	0x3e, r29	; 62
    fce8:	0f be       	out	0x3f, r0	; 63
    fcea:	cd bf       	out	0x3d, r28	; 61
    fcec:	7c 01       	movw	r14, r24
    fcee:	6a 01       	movw	r12, r20
__base_ctor ():
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    fcf0:	02 ef       	ldi	r16, 0xF2	; 242
    fcf2:	12 e0       	ldi	r17, 0x02	; 2
    fcf4:	1a 83       	std	Y+2, r17	; 0x02
    fcf6:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    fcf8:	1c 86       	std	Y+12, r1	; 0x0c
    fcfa:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
    fcfc:	88 ee       	ldi	r24, 0xE8	; 232
    fcfe:	93 e0       	ldi	r25, 0x03	; 3
    fd00:	a0 e0       	ldi	r26, 0x00	; 0
    fd02:	b0 e0       	ldi	r27, 0x00	; 0
    fd04:	8d 87       	std	Y+13, r24	; 0x0d
    fd06:	9e 87       	std	Y+14, r25	; 0x0e
    fd08:	af 87       	std	Y+15, r26	; 0x0f
    fd0a:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    fd0c:	88 ea       	ldi	r24, 0xA8	; 168
    fd0e:	92 e0       	ldi	r25, 0x02	; 2
    fd10:	9a 87       	std	Y+10, r25	; 0x0a
    fd12:	89 87       	std	Y+9, r24	; 0x09
    fd14:	88 e0       	ldi	r24, 0x08	; 8
    fd16:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
    fd18:	19 8f       	std	Y+25, r17	; 0x19
    fd1a:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    fd1c:	1a 8e       	std	Y+26, r1	; 0x1a
    fd1e:	1b 8e       	std	Y+27, r1	; 0x1b
    fd20:	1c 8e       	std	Y+28, r1	; 0x1c
    fd22:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    fd24:	1b a7       	std	Y+43, r17	; 0x2b
    fd26:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    fd28:	1c a6       	std	Y+44, r1	; 0x2c
    fd2a:	1d a6       	std	Y+45, r1	; 0x2d
    fd2c:	1e a6       	std	Y+46, r1	; 0x2e
    fd2e:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
    fd30:	80 91 06 0e 	lds	r24, 0x0E06	; 0x800e06 <Ethernet+0x2>
    fd34:	90 91 07 0e 	lds	r25, 0x0E07	; 0x800e07 <Ethernet+0x3>
    fd38:	a0 91 08 0e 	lds	r26, 0x0E08	; 0x800e08 <Ethernet+0x4>
    fd3c:	b0 91 09 0e 	lds	r27, 0x0E09	; 0x800e09 <Ethernet+0x5>
    fd40:	8e a3       	std	Y+38, r24	; 0x26
    fd42:	9f a3       	std	Y+39, r25	; 0x27
    fd44:	a8 a7       	std	Y+40, r26	; 0x28
    fd46:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    fd48:	8b 83       	std	Y+3, r24	; 0x03
    fd4a:	9c 83       	std	Y+4, r25	; 0x04
    fd4c:	ad 83       	std	Y+5, r26	; 0x05
    fd4e:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
    fd50:	18 86       	std	Y+8, r1	; 0x08
    fd52:	1f 82       	std	Y+7, r1	; 0x07
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    fd54:	ae 01       	movw	r20, r28
    fd56:	46 5d       	subi	r20, 0xD6	; 214
    fd58:	5f 4f       	sbci	r21, 0xFF	; 255
    fd5a:	ce 01       	movw	r24, r28
    fd5c:	01 96       	adiw	r24, 0x01	; 1
    fd5e:	0e 94 6a 7b 	call	0xf6d4	; 0xf6d4 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
    fd62:	81 30       	cpi	r24, 0x01	; 1
    fd64:	91 05       	cpc	r25, r1
    fd66:	b1 f4       	brne	.+44     	; 0xfd94 <EthernetClient::connect(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
    fd68:	d7 01       	movw	r26, r14
    fd6a:	ed 91       	ld	r30, X+
    fd6c:	fc 91       	ld	r31, X
    fd6e:	06 84       	ldd	r0, Z+14	; 0x0e
    fd70:	f7 85       	ldd	r31, Z+15	; 0x0f
    fd72:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
    fd74:	1d a3       	std	Y+37, r17	; 0x25
    fd76:	0c a3       	std	Y+36, r16	; 0x24
    fd78:	8c a5       	ldd	r24, Y+44	; 0x2c
    fd7a:	9d a5       	ldd	r25, Y+45	; 0x2d
    fd7c:	ae a5       	ldd	r26, Y+46	; 0x2e
    fd7e:	bf a5       	ldd	r27, Y+47	; 0x2f
    fd80:	8e a3       	std	Y+38, r24	; 0x26
    fd82:	9f a3       	std	Y+39, r25	; 0x27
    fd84:	a8 a7       	std	Y+40, r26	; 0x28
    fd86:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    fd88:	a6 01       	movw	r20, r12
    fd8a:	be 01       	movw	r22, r28
    fd8c:	6c 5d       	subi	r22, 0xDC	; 220
    fd8e:	7f 4f       	sbci	r23, 0xFF	; 255
    fd90:	c7 01       	movw	r24, r14
    fd92:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
    fd94:	af 96       	adiw	r28, 0x2f	; 47
    fd96:	0f b6       	in	r0, 0x3f	; 63
    fd98:	f8 94       	cli
    fd9a:	de bf       	out	0x3e, r29	; 62
    fd9c:	0f be       	out	0x3f, r0	; 63
    fd9e:	cd bf       	out	0x3d, r28	; 61
    fda0:	df 91       	pop	r29
    fda2:	cf 91       	pop	r28
    fda4:	1f 91       	pop	r17
    fda6:	0f 91       	pop	r16
    fda8:	ff 90       	pop	r15
    fdaa:	ef 90       	pop	r14
    fdac:	df 90       	pop	r13
    fdae:	cf 90       	pop	r12
    fdb0:	08 95       	ret

0000fdb2 <button_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)>:
_Z38button_network_test_connection_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5959
///////////////////////////////////////////////////////////////////
/*
   Obsluha tlacitka kontrola konektivity
*/
void button_network_test_connection_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    fdb2:	cf 93       	push	r28
    fdb4:	df 93       	push	r29
    fdb6:	cd b7       	in	r28, 0x3d	; 61
    fdb8:	de b7       	in	r29, 0x3e	; 62
    fdba:	60 97       	sbiw	r28, 0x10	; 16
    fdbc:	0f b6       	in	r0, 0x3f	; 63
    fdbe:	f8 94       	cli
    fdc0:	de bf       	out	0x3e, r29	; 62
    fdc2:	0f be       	out	0x3f, r0	; 63
    fdc4:	cd bf       	out	0x3d, r28	; 61
check_connectivity_connection():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5974
*/
uint8_t check_connectivity_connection(void)
{
  char server[16];
  uint8_t ret = 0;
  strcpy_P(server, seznam_server);
    fdc6:	63 e5       	ldi	r22, 0x53	; 83
    fdc8:	73 e7       	ldi	r23, 0x73	; 115
    fdca:	ce 01       	movw	r24, r28
    fdcc:	01 96       	adiw	r24, 0x01	; 1
    fdce:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5975
  if (!ethClient1.connected())
    fdd2:	87 e6       	ldi	r24, 0x67	; 103
    fdd4:	92 e1       	ldi	r25, 0x12	; 18
    fdd6:	0e 94 40 79 	call	0xf280	; 0xf280 <EthernetClient::connected()>
    fdda:	81 11       	cpse	r24, r1
    fddc:	17 c0       	rjmp	.+46     	; 0xfe0c <__DATA_REGION_LENGTH__+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5977
  {
    if (ethClient1.connect(server, 80))
    fdde:	40 e5       	ldi	r20, 0x50	; 80
    fde0:	50 e0       	ldi	r21, 0x00	; 0
    fde2:	be 01       	movw	r22, r28
    fde4:	6f 5f       	subi	r22, 0xFF	; 255
    fde6:	7f 4f       	sbci	r23, 0xFF	; 255
    fde8:	87 e6       	ldi	r24, 0x67	; 103
    fdea:	92 e1       	ldi	r25, 0x12	; 18
    fdec:	0e 94 66 7e 	call	0xfccc	; 0xfccc <EthernetClient::connect(char const*, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5979
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    fdf0:	70 e0       	ldi	r23, 0x00	; 0
    fdf2:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5977
  char server[16];
  uint8_t ret = 0;
  strcpy_P(server, seznam_server);
  if (!ethClient1.connected())
  {
    if (ethClient1.connect(server, 80))
    fdf4:	89 2b       	or	r24, r25
    fdf6:	99 f0       	breq	.+38     	; 0xfe1e <__DATA_REGION_LENGTH__+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5979
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    fdf8:	88 e6       	ldi	r24, 0x68	; 104
    fdfa:	90 e0       	ldi	r25, 0x00	; 0
    fdfc:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5980
      strcpy_P(dialog_text, new_text_ok_connect_seznam);
    fe00:	62 e3       	ldi	r22, 0x32	; 50
    fe02:	73 e7       	ldi	r23, 0x73	; 115
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5986
      ret = 1;
    }
    else
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
      strcpy_P(dialog_text, new_text_err_connect_seznam);
    fe04:	85 e1       	ldi	r24, 0x15	; 21
    fe06:	9a e0       	ldi	r25, 0x0A	; 10
    fe08:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
_Z38button_network_test_connection_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5962
*/
void button_network_test_connection_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  check_connectivity_connection();
  /// TODO - pridat do selfcheck testu
}
    fe0c:	60 96       	adiw	r28, 0x10	; 16
    fe0e:	0f b6       	in	r0, 0x3f	; 63
    fe10:	f8 94       	cli
    fe12:	de bf       	out	0x3e, r29	; 62
    fe14:	0f be       	out	0x3f, r0	; 63
    fe16:	cd bf       	out	0x3d, r28	; 61
    fe18:	df 91       	pop	r29
    fe1a:	cf 91       	pop	r28
    fe1c:	08 95       	ret
check_connectivity_connection():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5985
      strcpy_P(dialog_text, new_text_ok_connect_seznam);
      ret = 1;
    }
    else
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    fe1e:	88 e6       	ldi	r24, 0x68	; 104
    fe20:	90 e0       	ldi	r25, 0x00	; 0
    fe22:	0e 94 48 af 	call	0x15e90	; 0x15e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5986
      strcpy_P(dialog_text, new_text_err_connect_seznam);
    fe26:	61 e4       	ldi	r22, 0x41	; 65
    fe28:	73 e7       	ldi	r23, 0x73	; 115
    fe2a:	ec cf       	rjmp	.-40     	; 0xfe04 <__DATA_REGION_LENGTH__+0x4>

0000fe2c <EthernetServer::begin()>:
_ZN14EthernetServer5beginEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:17
{
  _port = port;
}

void EthernetServer::begin()
{
    fe2c:	8f 92       	push	r8
    fe2e:	9f 92       	push	r9
    fe30:	af 92       	push	r10
    fe32:	bf 92       	push	r11
    fe34:	cf 92       	push	r12
    fe36:	df 92       	push	r13
    fe38:	ef 92       	push	r14
    fe3a:	ff 92       	push	r15
    fe3c:	0f 93       	push	r16
    fe3e:	1f 93       	push	r17
    fe40:	cf 93       	push	r28
    fe42:	df 93       	push	r29
    fe44:	cd b7       	in	r28, 0x3d	; 61
    fe46:	de b7       	in	r29, 0x3e	; 62
    fe48:	2d 97       	sbiw	r28, 0x0d	; 13
    fe4a:	0f b6       	in	r0, 0x3f	; 63
    fe4c:	f8 94       	cli
    fe4e:	de bf       	out	0x3e, r29	; 62
    fe50:	0f be       	out	0x3f, r0	; 63
    fe52:	cd bf       	out	0x3d, r28	; 61
    fe54:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:18
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    fe56:	10 e0       	ldi	r17, 0x00	; 0
    fe58:	00 e0       	ldi	r16, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
    fe5a:	38 ee       	ldi	r19, 0xE8	; 232
    fe5c:	83 2e       	mov	r8, r19
    fe5e:	33 e0       	ldi	r19, 0x03	; 3
    fe60:	93 2e       	mov	r9, r19
    fe62:	a1 2c       	mov	r10, r1
    fe64:	b1 2c       	mov	r11, r1
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
    fe66:	40 ed       	ldi	r20, 0xD0	; 208
    fe68:	c4 2e       	mov	r12, r20
    fe6a:	42 e0       	ldi	r20, 0x02	; 2
    fe6c:	d4 2e       	mov	r13, r20
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    fe6e:	1c 82       	std	Y+4, r1	; 0x04
    fe70:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
    fe72:	8d 82       	std	Y+5, r8	; 0x05
    fe74:	9e 82       	std	Y+6, r9	; 0x06
    fe76:	af 82       	std	Y+7, r10	; 0x07
    fe78:	b8 86       	std	Y+8, r11	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
    fe7a:	da 82       	std	Y+2, r13	; 0x02
    fe7c:	c9 82       	std	Y+1, r12	; 0x01
    fe7e:	0d 87       	std	Y+13, r16	; 0x0d
_ZN14EthernetServer5beginEv():
    EthernetClient client(sock);
    if (client.status() == SnSR::CLOSED) {
    fe80:	ce 01       	movw	r24, r28
    fe82:	01 96       	adiw	r24, 0x01	; 1
    fe84:	0e 94 36 79 	call	0xf26c	; 0xf26c <EthernetClient::status()>
    fe88:	81 11       	cpse	r24, r1
    fe8a:	30 c0       	rjmp	.+96     	; 0xfeec <EthernetServer::begin()+0xc0>
socket():
    fe8c:	f7 01       	movw	r30, r14
    fe8e:	44 81       	ldd	r20, Z+4	; 0x04
    fe90:	55 81       	ldd	r21, Z+5	; 0x05
    fe92:	61 e0       	ldi	r22, 0x01	; 1
    fe94:	80 2f       	mov	r24, r16
    fe96:	0e 94 c3 c8 	call	0x19186	; 0x19186 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
    fe9a:	63 e0       	ldi	r22, 0x03	; 3
    fe9c:	70 e0       	ldi	r23, 0x00	; 0
    fe9e:	80 2f       	mov	r24, r16
    fea0:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
listen():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:55
 * @brief	This function established  the connection for the channel in passive (server) mode. This function waits for the request from the peer.
 * @return	1 for success else 0.
 */
uint8_t listen(SOCKET s)
{
  if (w5500.readSnSR(s) != SnSR::INIT)
    fea4:	83 31       	cpi	r24, 0x13	; 19
    fea6:	29 f4       	brne	.+10     	; 0xfeb2 <EthernetServer::begin()+0x86>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:57
    return 0;
  w5500.execCmdSn(s, Sock_LISTEN);
    fea8:	62 e0       	ldi	r22, 0x02	; 2
    feaa:	70 e0       	ldi	r23, 0x00	; 0
    feac:	80 2f       	mov	r24, r16
    feae:	0e 94 b3 c8 	call	0x19166	; 0x19166 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
_ZN14EthernetServer5beginEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:23
      socket(sock, SnMR::TCP, _port, 0);
      listen(sock);
      EthernetClass::_server_port[sock] = _port;
    feb2:	f7 01       	movw	r30, r14
    feb4:	84 81       	ldd	r24, Z+4	; 0x04
    feb6:	95 81       	ldd	r25, Z+5	; 0x05
    feb8:	00 0f       	add	r16, r16
    feba:	11 1f       	adc	r17, r17
    febc:	f8 01       	movw	r30, r16
    febe:	e6 59       	subi	r30, 0x96	; 150
    fec0:	f4 4f       	sbci	r31, 0xF4	; 244
    fec2:	91 83       	std	Z+1, r25	; 0x01
    fec4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:27
      break;
    }
  }  
}
    fec6:	2d 96       	adiw	r28, 0x0d	; 13
    fec8:	0f b6       	in	r0, 0x3f	; 63
    feca:	f8 94       	cli
    fecc:	de bf       	out	0x3e, r29	; 62
    fece:	0f be       	out	0x3f, r0	; 63
    fed0:	cd bf       	out	0x3d, r28	; 61
    fed2:	df 91       	pop	r29
    fed4:	cf 91       	pop	r28
    fed6:	1f 91       	pop	r17
    fed8:	0f 91       	pop	r16
    feda:	ff 90       	pop	r15
    fedc:	ef 90       	pop	r14
    fede:	df 90       	pop	r13
    fee0:	cf 90       	pop	r12
    fee2:	bf 90       	pop	r11
    fee4:	af 90       	pop	r10
    fee6:	9f 90       	pop	r9
    fee8:	8f 90       	pop	r8
    feea:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:18
  _port = port;
}

void EthernetServer::begin()
{
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    feec:	0f 5f       	subi	r16, 0xFF	; 255
    feee:	1f 4f       	sbci	r17, 0xFF	; 255
    fef0:	08 30       	cpi	r16, 0x08	; 8
    fef2:	11 05       	cpc	r17, r1
    fef4:	09 f0       	breq	.+2      	; 0xfef8 <EthernetServer::begin()+0xcc>
    fef6:	bb cf       	rjmp	.-138    	; 0xfe6e <EthernetServer::begin()+0x42>
    fef8:	e6 cf       	rjmp	.-52     	; 0xfec6 <EthernetServer::begin()+0x9a>

0000fefa <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    fefa:	8f 92       	push	r8
    fefc:	9f 92       	push	r9
    fefe:	af 92       	push	r10
    ff00:	bf 92       	push	r11
    ff02:	cf 92       	push	r12
    ff04:	df 92       	push	r13
    ff06:	ef 92       	push	r14
    ff08:	ff 92       	push	r15
    ff0a:	0f 93       	push	r16
    ff0c:	1f 93       	push	r17
    ff0e:	cf 93       	push	r28
    ff10:	6c 01       	movw	r12, r24
    ff12:	5b 01       	movw	r10, r22
    ff14:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
    ff16:	fc 01       	movw	r30, r24
    ff18:	c4 85       	ldd	r28, Z+12	; 0x0c
    ff1a:	c8 30       	cpi	r28, 0x08	; 8
    ff1c:	a1 f4       	brne	.+40     	; 0xff46 <EthernetClient::write(unsigned char const*, unsigned int)+0x4c>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    ff1e:	81 e0       	ldi	r24, 0x01	; 1
    ff20:	90 e0       	ldi	r25, 0x00	; 0
    ff22:	f6 01       	movw	r30, r12
    ff24:	93 83       	std	Z+3, r25	; 0x03
    ff26:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
    ff28:	f1 2c       	mov	r15, r1
    ff2a:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
    ff2c:	c7 01       	movw	r24, r14
    ff2e:	cf 91       	pop	r28
    ff30:	1f 91       	pop	r17
    ff32:	0f 91       	pop	r16
    ff34:	ff 90       	pop	r15
    ff36:	ef 90       	pop	r14
    ff38:	df 90       	pop	r13
    ff3a:	cf 90       	pop	r12
    ff3c:	bf 90       	pop	r11
    ff3e:	af 90       	pop	r10
    ff40:	9f 90       	pop	r9
    ff42:	8f 90       	pop	r8
    ff44:	08 95       	ret
    ff46:	8a 01       	movw	r16, r20
    ff48:	41 30       	cpi	r20, 0x01	; 1
    ff4a:	58 40       	sbci	r21, 0x08	; 8
    ff4c:	10 f0       	brcs	.+4      	; 0xff52 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
    ff4e:	00 e0       	ldi	r16, 0x00	; 0
    ff50:	18 e0       	ldi	r17, 0x08	; 8
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:116
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = w5500.getTXFreeSize(s);
    ff52:	8c 2f       	mov	r24, r28
    ff54:	0e 94 60 d0 	call	0x1a0c0	; 0x1a0c0 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
    ff58:	4c 01       	movw	r8, r24
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
    ff5a:	63 e0       	ldi	r22, 0x03	; 3
    ff5c:	70 e0       	ldi	r23, 0x00	; 0
    ff5e:	8c 2f       	mov	r24, r28
    ff60:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:118
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    ff64:	87 31       	cpi	r24, 0x17	; 23
    ff66:	11 f0       	breq	.+4      	; 0xff6c <EthernetClient::write(unsigned char const*, unsigned int)+0x72>
    ff68:	8c 31       	cpi	r24, 0x1C	; 28
    ff6a:	09 f5       	brne	.+66     	; 0xffae <EthernetClient::write(unsigned char const*, unsigned int)+0xb4>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:124
    {
      ret = 0; 
      break;
    }
  } 
  while (freesize < ret);
    ff6c:	80 16       	cp	r8, r16
    ff6e:	91 06       	cpc	r9, r17
    ff70:	80 f3       	brcs	.-32     	; 0xff52 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
send_data_processing():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:70
}

void W5500Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    ff72:	98 01       	movw	r18, r16
    ff74:	a5 01       	movw	r20, r10
    ff76:	70 e0       	ldi	r23, 0x00	; 0
    ff78:	60 e0       	ldi	r22, 0x00	; 0
    ff7a:	8c 2f       	mov	r24, r28
    ff7c:	0e 94 20 d0 	call	0x1a040	; 0x1a040 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:128

  // copy data
  w5500.send_data_processing(s, (uint8_t *)buf, ret);
  w5500.execCmdSn(s, Sock_SEND);
    ff80:	60 e2       	ldi	r22, 0x20	; 32
    ff82:	70 e0       	ldi	r23, 0x00	; 0
    ff84:	8c 2f       	mov	r24, r28
    ff86:	0e 94 b3 c8 	call	0x19166	; 0x19166 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    ff8a:	62 e0       	ldi	r22, 0x02	; 2
    ff8c:	70 e0       	ldi	r23, 0x00	; 0
    ff8e:	8c 2f       	mov	r24, r28
    ff90:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:131

  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    ff94:	84 fd       	sbrc	r24, 4
    ff96:	0e c0       	rjmp	.+28     	; 0xffb4 <EthernetClient::write(unsigned char const*, unsigned int)+0xba>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    ff98:	63 e0       	ldi	r22, 0x03	; 3
    ff9a:	70 e0       	ldi	r23, 0x00	; 0
    ff9c:	8c 2f       	mov	r24, r28
    ff9e:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:134
  {
    /* m2008.01 [bj] : reduce code */
    if ( w5500.readSnSR(s) == SnSR::CLOSED )
    ffa2:	81 11       	cpse	r24, r1
    ffa4:	f2 cf       	rjmp	.-28     	; 0xff8a <EthernetClient::write(unsigned char const*, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:136
    {
      close(s);
    ffa6:	8c 2f       	mov	r24, r28
    ffa8:	0e 94 9c 78 	call	0xf138	; 0xf138 <close(unsigned char)>
    ffac:	b8 cf       	rjmp	.-144    	; 0xff1e <EthernetClient::write(unsigned char const*, unsigned int)+0x24>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:120
  {
    freesize = w5500.getTXFreeSize(s);
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
    ffae:	10 e0       	ldi	r17, 0x00	; 0
    ffb0:	00 e0       	ldi	r16, 0x00	; 0
    ffb2:	df cf       	rjmp	.-66     	; 0xff72 <EthernetClient::write(unsigned char const*, unsigned int)+0x78>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    ffb4:	40 e1       	ldi	r20, 0x10	; 16
    ffb6:	62 e0       	ldi	r22, 0x02	; 2
    ffb8:	70 e0       	ldi	r23, 0x00	; 0
    ffba:	8c 2f       	mov	r24, r28
    ffbc:	0e 94 93 78 	call	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
    ffc0:	01 2b       	or	r16, r17
    ffc2:	09 f0       	breq	.+2      	; 0xffc6 <EthernetClient::write(unsigned char const*, unsigned int)+0xcc>
    ffc4:	b3 cf       	rjmp	.-154    	; 0xff2c <EthernetClient::write(unsigned char const*, unsigned int)+0x32>
    ffc6:	ab cf       	rjmp	.-170    	; 0xff1e <EthernetClient::write(unsigned char const*, unsigned int)+0x24>

0000ffc8 <EthernetServer::write(unsigned char const*, unsigned int)>:
_ZN14EthernetServer5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:76
{
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
    ffc8:	3f 92       	push	r3
    ffca:	4f 92       	push	r4
    ffcc:	5f 92       	push	r5
    ffce:	6f 92       	push	r6
    ffd0:	7f 92       	push	r7
    ffd2:	8f 92       	push	r8
    ffd4:	9f 92       	push	r9
    ffd6:	af 92       	push	r10
    ffd8:	bf 92       	push	r11
    ffda:	cf 92       	push	r12
    ffdc:	df 92       	push	r13
    ffde:	ef 92       	push	r14
    ffe0:	ff 92       	push	r15
    ffe2:	0f 93       	push	r16
    ffe4:	1f 93       	push	r17
    ffe6:	cf 93       	push	r28
    ffe8:	df 93       	push	r29
    ffea:	cd b7       	in	r28, 0x3d	; 61
    ffec:	de b7       	in	r29, 0x3e	; 62
    ffee:	2d 97       	sbiw	r28, 0x0d	; 13
    fff0:	0f b6       	in	r0, 0x3f	; 63
    fff2:	f8 94       	cli
    fff4:	de bf       	out	0x3e, r29	; 62
    fff6:	0f be       	out	0x3f, r0	; 63
    fff8:	cd bf       	out	0x3d, r28	; 61
    fffa:	6c 01       	movw	r12, r24
    fffc:	5b 01       	movw	r10, r22
    fffe:	4a 01       	movw	r8, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:79
  size_t n = 0;
  
  accept();
   10000:	0e 94 a5 79 	call	0xf34a	; 0xf34a <EthernetServer::accept()>
   10004:	8a e6       	ldi	r24, 0x6A	; 106
   10006:	e8 2e       	mov	r14, r24
   10008:	8b e0       	ldi	r24, 0x0B	; 11
   1000a:	f8 2e       	mov	r15, r24
   1000c:	31 2c       	mov	r3, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:77
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
  size_t n = 0;
   1000e:	10 e0       	ldi	r17, 0x00	; 0
   10010:	00 e0       	ldi	r16, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   10012:	98 ee       	ldi	r25, 0xE8	; 232
   10014:	49 2e       	mov	r4, r25
   10016:	93 e0       	ldi	r25, 0x03	; 3
   10018:	59 2e       	mov	r5, r25
   1001a:	61 2c       	mov	r6, r1
   1001c:	71 2c       	mov	r7, r1
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
   1001e:	1c 82       	std	Y+4, r1	; 0x04
   10020:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   10022:	4d 82       	std	Y+5, r4	; 0x05
   10024:	5e 82       	std	Y+6, r5	; 0x06
   10026:	6f 82       	std	Y+7, r6	; 0x07
   10028:	78 86       	std	Y+8, r7	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
   1002a:	80 ed       	ldi	r24, 0xD0	; 208
   1002c:	92 e0       	ldi	r25, 0x02	; 2
   1002e:	9a 83       	std	Y+2, r25	; 0x02
   10030:	89 83       	std	Y+1, r24	; 0x01
   10032:	3d 86       	std	Y+13, r3	; 0x0d
_ZN14EthernetServer5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:84
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port &&
   10034:	f7 01       	movw	r30, r14
   10036:	21 91       	ld	r18, Z+
   10038:	31 91       	ld	r19, Z+
   1003a:	7f 01       	movw	r14, r30
   1003c:	f6 01       	movw	r30, r12
   1003e:	84 81       	ldd	r24, Z+4	; 0x04
   10040:	95 81       	ldd	r25, Z+5	; 0x05
   10042:	28 17       	cp	r18, r24
   10044:	39 07       	cpc	r19, r25
   10046:	71 f4       	brne	.+28     	; 0x10064 <__EEPROM_REGION_LENGTH__+0x64>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:85
      client.status() == SnSR::ESTABLISHED) {
   10048:	ce 01       	movw	r24, r28
   1004a:	01 96       	adiw	r24, 0x01	; 1
   1004c:	0e 94 36 79 	call	0xf26c	; 0xf26c <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:84
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port &&
   10050:	87 31       	cpi	r24, 0x17	; 23
   10052:	41 f4       	brne	.+16     	; 0x10064 <__EEPROM_REGION_LENGTH__+0x64>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:86
      client.status() == SnSR::ESTABLISHED) {
      n += client.write(buffer, size);
   10054:	a4 01       	movw	r20, r8
   10056:	b5 01       	movw	r22, r10
   10058:	ce 01       	movw	r24, r28
   1005a:	01 96       	adiw	r24, 0x01	; 1
   1005c:	0e 94 7d 7f 	call	0xfefa	; 0xfefa <EthernetClient::write(unsigned char const*, unsigned int)>
   10060:	08 0f       	add	r16, r24
   10062:	19 1f       	adc	r17, r25
   10064:	33 94       	inc	r3
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:81
{
  size_t n = 0;
  
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   10066:	f8 e0       	ldi	r31, 0x08	; 8
   10068:	3f 12       	cpse	r3, r31
   1006a:	d9 cf       	rjmp	.-78     	; 0x1001e <__EEPROM_REGION_LENGTH__+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
   1006c:	c8 01       	movw	r24, r16
   1006e:	2d 96       	adiw	r28, 0x0d	; 13
   10070:	0f b6       	in	r0, 0x3f	; 63
   10072:	f8 94       	cli
   10074:	de bf       	out	0x3e, r29	; 62
   10076:	0f be       	out	0x3f, r0	; 63
   10078:	cd bf       	out	0x3d, r28	; 61
   1007a:	df 91       	pop	r29
   1007c:	cf 91       	pop	r28
   1007e:	1f 91       	pop	r17
   10080:	0f 91       	pop	r16
   10082:	ff 90       	pop	r15
   10084:	ef 90       	pop	r14
   10086:	df 90       	pop	r13
   10088:	cf 90       	pop	r12
   1008a:	bf 90       	pop	r11
   1008c:	af 90       	pop	r10
   1008e:	9f 90       	pop	r9
   10090:	8f 90       	pop	r8
   10092:	7f 90       	pop	r7
   10094:	6f 90       	pop	r6
   10096:	5f 90       	pop	r5
   10098:	4f 90       	pop	r4
   1009a:	3f 90       	pop	r3
   1009c:	08 95       	ret

0001009e <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
   1009e:	df 92       	push	r13
   100a0:	ef 92       	push	r14
   100a2:	ff 92       	push	r15
   100a4:	0f 93       	push	r16
   100a6:	1f 93       	push	r17
   100a8:	cf 93       	push	r28
   100aa:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
   100ac:	fc 01       	movw	r30, r24
   100ae:	24 85       	ldd	r18, Z+12	; 0x0c
   100b0:	28 30       	cpi	r18, 0x08	; 8
   100b2:	51 f0       	breq	.+20     	; 0x100c8 <EthernetClient::connect(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
   100b4:	90 e0       	ldi	r25, 0x00	; 0
   100b6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
   100b8:	df 91       	pop	r29
   100ba:	cf 91       	pop	r28
   100bc:	1f 91       	pop	r17
   100be:	0f 91       	pop	r16
   100c0:	ff 90       	pop	r15
   100c2:	ef 90       	pop	r14
   100c4:	df 90       	pop	r13
   100c6:	08 95       	ret
   100c8:	7a 01       	movw	r14, r20
   100ca:	eb 01       	movw	r28, r22
   100cc:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
   100ce:	d1 2c       	mov	r13, r1
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   100d0:	63 e0       	ldi	r22, 0x03	; 3
   100d2:	70 e0       	ldi	r23, 0x00	; 0
   100d4:	8d 2d       	mov	r24, r13
   100d6:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   100da:	81 11       	cpse	r24, r1
   100dc:	28 c0       	rjmp	.+80     	; 0x1012e <EthernetClient::connect(IPAddress, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
   100de:	f8 01       	movw	r30, r16
   100e0:	d4 86       	std	Z+12, r13	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   100e2:	f8 01       	movw	r30, r16
   100e4:	84 85       	ldd	r24, Z+12	; 0x0c
   100e6:	88 30       	cpi	r24, 0x08	; 8
   100e8:	29 f3       	breq	.-54     	; 0x100b4 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
   100ea:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   100ee:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   100f2:	2f 5f       	subi	r18, 0xFF	; 255
   100f4:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
   100f6:	19 f1       	breq	.+70     	; 0x1013e <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
   100f8:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   100fc:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
socket():
   10100:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   10104:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   10108:	61 e0       	ldi	r22, 0x01	; 1
   1010a:	0e 94 c3 c8 	call	0x19186	; 0x19186 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
   1010e:	8a 81       	ldd	r24, Y+2	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:70
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
   10110:	8f 3f       	cpi	r24, 0xFF	; 255
   10112:	c1 f4       	brne	.+48     	; 0x10144 <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
   10114:	8b 81       	ldd	r24, Y+3	; 0x03
   10116:	8f 3f       	cpi	r24, 0xFF	; 255
   10118:	01 f5       	brne	.+64     	; 0x1015a <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
   1011a:	8c 81       	ldd	r24, Y+4	; 0x04
   1011c:	8f 3f       	cpi	r24, 0xFF	; 255
   1011e:	e9 f4       	brne	.+58     	; 0x1015a <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
   10120:	8d 81       	ldd	r24, Y+5	; 0x05
   10122:	8f 3f       	cpi	r24, 0xFF	; 255
   10124:	d1 f4       	brne	.+52     	; 0x1015a <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
   10126:	88 e0       	ldi	r24, 0x08	; 8
   10128:	f8 01       	movw	r30, r16
   1012a:	84 87       	std	Z+12, r24	; 0x0c
   1012c:	c3 cf       	rjmp	.-122    	; 0x100b4 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   1012e:	8b 7f       	andi	r24, 0xFB	; 251
   10130:	88 31       	cpi	r24, 0x18	; 24
   10132:	a9 f2       	breq	.-86     	; 0x100de <EthernetClient::connect(IPAddress, unsigned int)+0x40>
   10134:	d3 94       	inc	r13
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   10136:	f8 e0       	ldi	r31, 0x08	; 8
   10138:	df 12       	cpse	r13, r31
   1013a:	ca cf       	rjmp	.-108    	; 0x100d0 <EthernetClient::connect(IPAddress, unsigned int)+0x32>
   1013c:	d2 cf       	rjmp	.-92     	; 0x100e2 <EthernetClient::connect(IPAddress, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
   1013e:	20 e0       	ldi	r18, 0x00	; 0
   10140:	34 e0       	ldi	r19, 0x04	; 4
   10142:	da cf       	rjmp	.-76     	; 0x100f8 <EthernetClient::connect(IPAddress, unsigned int)+0x5a>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
   10144:	81 11       	cpse	r24, r1
   10146:	09 c0       	rjmp	.+18     	; 0x1015a <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:73
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   10148:	8b 81       	ldd	r24, Y+3	; 0x03
   1014a:	81 11       	cpse	r24, r1
   1014c:	06 c0       	rjmp	.+12     	; 0x1015a <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
   1014e:	8c 81       	ldd	r24, Y+4	; 0x04
   10150:	81 11       	cpse	r24, r1
   10152:	03 c0       	rjmp	.+6      	; 0x1015a <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
   10154:	8d 81       	ldd	r24, Y+5	; 0x05
   10156:	88 23       	and	r24, r24
   10158:	31 f3       	breq	.-52     	; 0x10126 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
   1015a:	e1 14       	cp	r14, r1
   1015c:	f1 04       	cpc	r15, r1
   1015e:	19 f3       	breq	.-58     	; 0x10126 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
   10160:	f8 01       	movw	r30, r16
   10162:	d4 84       	ldd	r13, Z+12	; 0x0c
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   10164:	ae 01       	movw	r20, r28
   10166:	4e 5f       	subi	r20, 0xFE	; 254
   10168:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
   1016a:	6d 2d       	mov	r22, r13
   1016c:	62 95       	swap	r22
   1016e:	66 0f       	add	r22, r22
   10170:	60 7e       	andi	r22, 0xE0	; 224
   10172:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
   10174:	24 e0       	ldi	r18, 0x04	; 4
   10176:	30 e0       	ldi	r19, 0x00	; 0
   10178:	8c e0       	ldi	r24, 0x0C	; 12
   1017a:	90 e0       	ldi	r25, 0x00	; 0
   1017c:	0e 94 40 78 	call	0xf080	; 0xf080 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
   10180:	4f 2d       	mov	r20, r15
   10182:	60 e1       	ldi	r22, 0x10	; 16
   10184:	70 e0       	ldi	r23, 0x00	; 0
   10186:	8d 2d       	mov	r24, r13
   10188:	0e 94 93 78 	call	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1018c:	4e 2d       	mov	r20, r14
   1018e:	61 e1       	ldi	r22, 0x11	; 17
   10190:	70 e0       	ldi	r23, 0x00	; 0
   10192:	8d 2d       	mov	r24, r13
   10194:	0e 94 93 78 	call	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:81
    return 0;

  // set destination IP
  w5500.writeSnDIPR(s, addr);
  w5500.writeSnDPORT(s, port);
  w5500.execCmdSn(s, Sock_CONNECT);
   10198:	64 e0       	ldi	r22, 0x04	; 4
   1019a:	70 e0       	ldi	r23, 0x00	; 0
   1019c:	8d 2d       	mov	r24, r13
   1019e:	0e 94 b3 c8 	call	0x19166	; 0x19166 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
   101a2:	c8 01       	movw	r24, r16
   101a4:	0e 94 36 79 	call	0xf26c	; 0xf26c <EthernetClient::status()>
   101a8:	87 31       	cpi	r24, 0x17	; 23
   101aa:	61 f0       	breq	.+24     	; 0x101c4 <EthernetClient::connect(IPAddress, unsigned int)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
   101ac:	61 e0       	ldi	r22, 0x01	; 1
   101ae:	70 e0       	ldi	r23, 0x00	; 0
   101b0:	80 e0       	ldi	r24, 0x00	; 0
   101b2:	90 e0       	ldi	r25, 0x00	; 0
   101b4:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
   101b8:	c8 01       	movw	r24, r16
   101ba:	0e 94 36 79 	call	0xf26c	; 0xf26c <EthernetClient::status()>
   101be:	81 11       	cpse	r24, r1
   101c0:	f0 cf       	rjmp	.-32     	; 0x101a2 <EthernetClient::connect(IPAddress, unsigned int)+0x104>
   101c2:	b1 cf       	rjmp	.-158    	; 0x10126 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
   101c4:	81 e0       	ldi	r24, 0x01	; 1
   101c6:	90 e0       	ldi	r25, 0x00	; 0
   101c8:	77 cf       	rjmp	.-274    	; 0x100b8 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>

000101ca <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
   101ca:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
   101cc:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
   101ce:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
   101d0:	80 91 f9 0a 	lds	r24, 0x0AF9	; 0x800af9 <SPIClass::initialized>
   101d4:	81 11       	cpse	r24, r1
   101d6:	27 c0       	rjmp	.+78     	; 0x10226 <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
   101d8:	e9 e5       	ldi	r30, 0x59	; 89
   101da:	fb e7       	ldi	r31, 0x7B	; 123
   101dc:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
   101de:	e3 e1       	ldi	r30, 0x13	; 19
   101e0:	fb e7       	ldi	r31, 0x7B	; 123
   101e2:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
   101e4:	e8 2f       	mov	r30, r24
   101e6:	f0 e0       	ldi	r31, 0x00	; 0
   101e8:	ee 0f       	add	r30, r30
   101ea:	ff 1f       	adc	r31, r31
   101ec:	e4 5f       	subi	r30, 0xF4	; 244
   101ee:	fb 48       	sbci	r31, 0x8B	; 139
   101f0:	a5 91       	lpm	r26, Z+
   101f2:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
   101f4:	ec 91       	ld	r30, X
   101f6:	e9 23       	and	r30, r25
   101f8:	21 f4       	brne	.+8      	; 0x10202 <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
   101fa:	61 e0       	ldi	r22, 0x01	; 1
   101fc:	88 e0       	ldi	r24, 0x08	; 8
   101fe:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
   10202:	61 e0       	ldi	r22, 0x01	; 1
   10204:	88 e0       	ldi	r24, 0x08	; 8
   10206:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
   1020a:	8c b5       	in	r24, 0x2c	; 44
   1020c:	80 61       	ori	r24, 0x10	; 16
   1020e:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
   10210:	8c b5       	in	r24, 0x2c	; 44
   10212:	80 64       	ori	r24, 0x40	; 64
   10214:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
   10216:	61 e0       	ldi	r22, 0x01	; 1
   10218:	89 e0       	ldi	r24, 0x09	; 9
   1021a:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
   1021e:	61 e0       	ldi	r22, 0x01	; 1
   10220:	8a e0       	ldi	r24, 0x0A	; 10
   10222:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
   10226:	80 91 f9 0a 	lds	r24, 0x0AF9	; 0x800af9 <SPIClass::initialized>
   1022a:	8f 5f       	subi	r24, 0xFF	; 255
   1022c:	80 93 f9 0a 	sts	0x0AF9, r24	; 0x800af9 <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
   10230:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:64
}
   10232:	cf 91       	pop	r28
   10234:	08 95       	ret

00010236 <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
   10236:	7f 92       	push	r7
   10238:	8f 92       	push	r8
   1023a:	9f 92       	push	r9
   1023c:	af 92       	push	r10
   1023e:	bf 92       	push	r11
   10240:	cf 92       	push	r12
   10242:	df 92       	push	r13
   10244:	ef 92       	push	r14
   10246:	ff 92       	push	r15
   10248:	0f 93       	push	r16
   1024a:	1f 93       	push	r17
   1024c:	cf 93       	push	r28
   1024e:	df 93       	push	r29
   10250:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
   10252:	fc 01       	movw	r30, r24
   10254:	86 81       	ldd	r24, Z+6	; 0x06
   10256:	81 11       	cpse	r24, r1
   10258:	35 c0       	rjmp	.+106    	; 0x102c4 <SoftSPIB::transfer(unsigned char)+0x8e>
   1025a:	86 2f       	mov	r24, r22
   1025c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
   1025e:	ec 01       	movw	r28, r24
   10260:	d6 95       	lsr	r29
   10262:	dc 2f       	mov	r29, r28
   10264:	cc 27       	eor	r28, r28
   10266:	d7 95       	ror	r29
   10268:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
   1026a:	66 1f       	adc	r22, r22
   1026c:	66 27       	eor	r22, r22
   1026e:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   10270:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
   10272:	ec 01       	movw	r28, r24
   10274:	55 e0       	ldi	r21, 0x05	; 5
   10276:	cc 0f       	add	r28, r28
   10278:	dd 1f       	adc	r29, r29
   1027a:	5a 95       	dec	r21
   1027c:	e1 f7       	brne	.-8      	; 0x10276 <SoftSPIB::transfer(unsigned char)+0x40>
   1027e:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   10280:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
   10282:	ec 01       	movw	r28, r24
   10284:	73 e0       	ldi	r23, 0x03	; 3
   10286:	cc 0f       	add	r28, r28
   10288:	dd 1f       	adc	r29, r29
   1028a:	7a 95       	dec	r23
   1028c:	e1 f7       	brne	.-8      	; 0x10286 <SoftSPIB::transfer(unsigned char)+0x50>
   1028e:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   10290:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
   10292:	ec 01       	movw	r28, r24
   10294:	cc 0f       	add	r28, r28
   10296:	dd 1f       	adc	r29, r29
   10298:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   1029a:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
   1029c:	ec 01       	movw	r28, r24
   1029e:	d5 95       	asr	r29
   102a0:	c7 95       	ror	r28
   102a2:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   102a4:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
   102a6:	ec 01       	movw	r28, r24
   102a8:	a3 e0       	ldi	r26, 0x03	; 3
   102aa:	d5 95       	asr	r29
   102ac:	c7 95       	ror	r28
   102ae:	aa 95       	dec	r26
   102b0:	e1 f7       	brne	.-8      	; 0x102aa <SoftSPIB::transfer(unsigned char)+0x74>
   102b2:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
   102b4:	6c 2b       	or	r22, r28
   102b6:	b5 e0       	ldi	r27, 0x05	; 5
   102b8:	95 95       	asr	r25
   102ba:	87 95       	ror	r24
   102bc:	ba 95       	dec	r27
   102be:	e1 f7       	brne	.-8      	; 0x102b8 <SoftSPIB::transfer(unsigned char)+0x82>
   102c0:	82 70       	andi	r24, 0x02	; 2
   102c2:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
   102c4:	91 e0       	ldi	r25, 0x01	; 1
   102c6:	80 e0       	ldi	r24, 0x00	; 0
   102c8:	f8 01       	movw	r30, r16
   102ca:	21 81       	ldd	r18, Z+1	; 0x01
   102cc:	21 11       	cpse	r18, r1
   102ce:	01 c0       	rjmp	.+2      	; 0x102d2 <SoftSPIB::transfer(unsigned char)+0x9c>
   102d0:	90 e0       	ldi	r25, 0x00	; 0
   102d2:	e9 2e       	mov	r14, r25
   102d4:	f8 2e       	mov	r15, r24
   102d6:	d1 2c       	mov	r13, r1
   102d8:	c1 2c       	mov	r12, r1
   102da:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   102dc:	c6 2f       	mov	r28, r22
   102de:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
   102e0:	f8 01       	movw	r30, r16
   102e2:	80 81       	ld	r24, Z
   102e4:	88 23       	and	r24, r24
   102e6:	39 f0       	breq	.+14     	; 0x102f6 <SoftSPIB::transfer(unsigned char)+0xc0>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
   102e8:	f1 e0       	ldi	r31, 0x01	; 1
   102ea:	ef 26       	eor	r14, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
   102ec:	6e 2d       	mov	r22, r14
   102ee:	f8 01       	movw	r30, r16
   102f0:	85 81       	ldd	r24, Z+5	; 0x05
   102f2:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   102f6:	be 01       	movw	r22, r28
   102f8:	0c 2c       	mov	r0, r12
   102fa:	02 c0       	rjmp	.+4      	; 0x10300 <SoftSPIB::transfer(unsigned char)+0xca>
   102fc:	75 95       	asr	r23
   102fe:	67 95       	ror	r22
   10300:	0a 94       	dec	r0
   10302:	e2 f7       	brpl	.-8      	; 0x102fc <SoftSPIB::transfer(unsigned char)+0xc6>
   10304:	61 70       	andi	r22, 0x01	; 1
   10306:	f8 01       	movw	r30, r16
   10308:	84 81       	ldd	r24, Z+4	; 0x04
   1030a:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
   1030e:	57 01       	movw	r10, r14
   10310:	f1 e0       	ldi	r31, 0x01	; 1
   10312:	af 26       	eor	r10, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
   10314:	6a 2d       	mov	r22, r10
   10316:	f8 01       	movw	r30, r16
   10318:	85 81       	ldd	r24, Z+5	; 0x05
   1031a:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
   1031e:	f8 01       	movw	r30, r16
   10320:	23 81       	ldd	r18, Z+3	; 0x03
   10322:	30 e0       	ldi	r19, 0x00	; 0
   10324:	f9 01       	movw	r30, r18
   10326:	e4 5e       	subi	r30, 0xE4	; 228
   10328:	fb 48       	sbci	r31, 0x8B	; 139
   1032a:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
   1032c:	f9 01       	movw	r30, r18
   1032e:	e5 5f       	subi	r30, 0xF5	; 245
   10330:	f4 48       	sbci	r31, 0x84	; 132
   10332:	84 90       	lpm	r8, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
   10334:	f9 01       	movw	r30, r18
   10336:	ef 5a       	subi	r30, 0xAF	; 175
   10338:	f4 48       	sbci	r31, 0x84	; 132
   1033a:	74 90       	lpm	r7, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
   1033c:	77 20       	and	r7, r7
   1033e:	a9 f1       	breq	.+106    	; 0x103aa <SoftSPIB::transfer(unsigned char)+0x174>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   10340:	81 11       	cpse	r24, r1
   10342:	0e 94 25 3e 	call	0x7c4a	; 0x7c4a <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
   10346:	e7 2d       	mov	r30, r7
   10348:	f0 e0       	ldi	r31, 0x00	; 0
   1034a:	ee 0f       	add	r30, r30
   1034c:	ff 1f       	adc	r31, r31
   1034e:	e5 50       	subi	r30, 0x05	; 5
   10350:	f5 48       	sbci	r31, 0x85	; 133
   10352:	a5 91       	lpm	r26, Z+
   10354:	b4 91       	lpm	r27, Z
   10356:	ec 91       	ld	r30, X
   10358:	8e 22       	and	r8, r30
   1035a:	31 e0       	ldi	r19, 0x01	; 1
   1035c:	20 e0       	ldi	r18, 0x00	; 0
   1035e:	09 f4       	brne	.+2      	; 0x10362 <SoftSPIB::transfer(unsigned char)+0x12c>
   10360:	30 e0       	ldi	r19, 0x00	; 0
_ZN8SoftSPIB8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
   10362:	83 2f       	mov	r24, r19
   10364:	92 2f       	mov	r25, r18
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

        /* ... Read bit */
        {
            bval = digitalRead(_miso);

            if (_order == MSBFIRST) {
   10366:	f8 01       	movw	r30, r16
   10368:	26 81       	ldd	r18, Z+6	; 0x06
   1036a:	21 11       	cpse	r18, r1
   1036c:	21 c0       	rjmp	.+66     	; 0x103b0 <SoftSPIB::transfer(unsigned char)+0x17a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
   1036e:	99 0c       	add	r9, r9
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   10370:	98 2a       	or	r9, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
   10372:	f8 01       	movw	r30, r16
   10374:	80 81       	ld	r24, Z
   10376:	88 23       	and	r24, r24
   10378:	11 f1       	breq	.+68     	; 0x103be <SoftSPIB::transfer(unsigned char)+0x188>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
   1037a:	75 01       	movw	r14, r10
   1037c:	ff ef       	ldi	r31, 0xFF	; 255
   1037e:	cf 1a       	sub	r12, r31
   10380:	df 0a       	sbc	r13, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
   10382:	28 e0       	ldi	r18, 0x08	; 8
   10384:	c2 16       	cp	r12, r18
   10386:	d1 04       	cpc	r13, r1
   10388:	09 f0       	breq	.+2      	; 0x1038c <SoftSPIB::transfer(unsigned char)+0x156>
   1038a:	aa cf       	rjmp	.-172    	; 0x102e0 <SoftSPIB::transfer(unsigned char)+0xaa>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
   1038c:	89 2d       	mov	r24, r9
   1038e:	df 91       	pop	r29
   10390:	cf 91       	pop	r28
   10392:	1f 91       	pop	r17
   10394:	0f 91       	pop	r16
   10396:	ff 90       	pop	r15
   10398:	ef 90       	pop	r14
   1039a:	df 90       	pop	r13
   1039c:	cf 90       	pop	r12
   1039e:	bf 90       	pop	r11
   103a0:	af 90       	pop	r10
   103a2:	9f 90       	pop	r9
   103a4:	8f 90       	pop	r8
   103a6:	7f 90       	pop	r7
   103a8:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
   103aa:	90 e0       	ldi	r25, 0x00	; 0
   103ac:	80 e0       	ldi	r24, 0x00	; 0
   103ae:	db cf       	rjmp	.-74     	; 0x10366 <SoftSPIB::transfer(unsigned char)+0x130>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   103b0:	96 95       	lsr	r25
   103b2:	98 2f       	mov	r25, r24
   103b4:	88 27       	eor	r24, r24
   103b6:	97 95       	ror	r25
   103b8:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
   103ba:	96 94       	lsr	r9
   103bc:	d9 cf       	rjmp	.-78     	; 0x10370 <SoftSPIB::transfer(unsigned char)+0x13a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
   103be:	6e 2d       	mov	r22, r14
   103c0:	85 81       	ldd	r24, Z+5	; 0x05
   103c2:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
   103c6:	da cf       	rjmp	.-76     	; 0x1037c <SoftSPIB::transfer(unsigned char)+0x146>

000103c8 <delay_hus(unsigned long)>:
_Z9delay_husm():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:13
#include "LCDWIKI_TOUCH.h"
#include "mcu_touch_magic.h"
#include "cali_para.h"

void delay_hus(u32 us)
{
   103c8:	0f 93       	push	r16
   103ca:	1f 93       	push	r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:16
    //u32 time=100*us/7; 
    //while(--time);
    for (uint8_t i=0; i< us; i++) __asm__("nop\n\t");
   103cc:	40 e0       	ldi	r20, 0x00	; 0
   103ce:	04 2f       	mov	r16, r20
   103d0:	10 e0       	ldi	r17, 0x00	; 0
   103d2:	30 e0       	ldi	r19, 0x00	; 0
   103d4:	20 e0       	ldi	r18, 0x00	; 0
   103d6:	06 17       	cp	r16, r22
   103d8:	17 07       	cpc	r17, r23
   103da:	28 07       	cpc	r18, r24
   103dc:	39 07       	cpc	r19, r25
   103de:	18 f4       	brcc	.+6      	; 0x103e6 <delay_hus(unsigned long)+0x1e>
   103e0:	00 00       	nop
   103e2:	4f 5f       	subi	r20, 0xFF	; 255
   103e4:	f4 cf       	rjmp	.-24     	; 0x103ce <delay_hus(unsigned long)+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:17
}
   103e6:	1f 91       	pop	r17
   103e8:	0f 91       	pop	r16
   103ea:	08 95       	ret

000103ec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
   103ec:	cf 93       	push	r28
   103ee:	df 93       	push	r29
   103f0:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:306
  	CS_ACTIVE;
   103f2:	a6 a5       	ldd	r26, Z+46	; 0x2e
   103f4:	b7 a5       	ldd	r27, Z+47	; 0x2f
   103f6:	8c 91       	ld	r24, X
   103f8:	92 ad       	ldd	r25, Z+58	; 0x3a
   103fa:	89 23       	and	r24, r25
   103fc:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:307
    writeCmd16(cmd);
   103fe:	a0 a9       	ldd	r26, Z+48	; 0x30
   10400:	b1 a9       	ldd	r27, Z+49	; 0x31
   10402:	8c 91       	ld	r24, X
   10404:	93 ad       	ldd	r25, Z+59	; 0x3b
   10406:	89 23       	and	r24, r25
   10408:	8c 93       	st	X, r24
   1040a:	72 b9       	out	0x02, r23	; 2
   1040c:	a2 a9       	ldd	r26, Z+50	; 0x32
   1040e:	b3 a9       	ldd	r27, Z+51	; 0x33
   10410:	8c 91       	ld	r24, X
   10412:	94 ad       	ldd	r25, Z+60	; 0x3c
   10414:	89 23       	and	r24, r25
   10416:	8c 93       	st	X, r24
   10418:	a2 a9       	ldd	r26, Z+50	; 0x32
   1041a:	b3 a9       	ldd	r27, Z+51	; 0x33
   1041c:	8c 91       	ld	r24, X
   1041e:	90 ad       	ldd	r25, Z+56	; 0x38
   10420:	89 2b       	or	r24, r25
   10422:	8c 93       	st	X, r24
   10424:	62 b9       	out	0x02, r22	; 2
   10426:	a2 a9       	ldd	r26, Z+50	; 0x32
   10428:	b3 a9       	ldd	r27, Z+51	; 0x33
   1042a:	8c 91       	ld	r24, X
   1042c:	94 ad       	ldd	r25, Z+60	; 0x3c
   1042e:	89 23       	and	r24, r25
   10430:	8c 93       	st	X, r24
   10432:	a2 a9       	ldd	r26, Z+50	; 0x32
   10434:	b3 a9       	ldd	r27, Z+51	; 0x33
   10436:	8c 91       	ld	r24, X
   10438:	90 ad       	ldd	r25, Z+56	; 0x38
   1043a:	89 2b       	or	r24, r25
   1043c:	8c 93       	st	X, r24
   1043e:	a0 a9       	ldd	r26, Z+48	; 0x30
   10440:	b1 a9       	ldd	r27, Z+49	; 0x31
   10442:	8c 91       	ld	r24, X
   10444:	97 a9       	ldd	r25, Z+55	; 0x37
   10446:	89 2b       	or	r24, r25
   10448:	8c 93       	st	X, r24
   1044a:	da 01       	movw	r26, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:308
    while (N-- > 0) 
   1044c:	9f ef       	ldi	r25, 0xFF	; 255
   1044e:	92 0f       	add	r25, r18
   10450:	12 16       	cp	r1, r18
   10452:	0c f0       	brlt	.+2      	; 0x10456 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
   10454:	3f c0       	rjmp	.+126    	; 0x104d4 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:310
	{
        uint8_t u8 = *block++;
   10456:	8d 91       	ld	r24, X+
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:311
        writeData8(u8); 
   10458:	82 b9       	out	0x02, r24	; 2
   1045a:	c2 a9       	ldd	r28, Z+50	; 0x32
   1045c:	d3 a9       	ldd	r29, Z+51	; 0x33
   1045e:	88 81       	ld	r24, Y
   10460:	24 ad       	ldd	r18, Z+60	; 0x3c
   10462:	82 23       	and	r24, r18
   10464:	88 83       	st	Y, r24
   10466:	c2 a9       	ldd	r28, Z+50	; 0x32
   10468:	d3 a9       	ldd	r29, Z+51	; 0x33
   1046a:	88 81       	ld	r24, Y
   1046c:	20 ad       	ldd	r18, Z+56	; 0x38
   1046e:	82 2b       	or	r24, r18
   10470:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:312
		if(N && (lcd_driver == ID_7575))
   10472:	99 23       	and	r25, r25
   10474:	69 f1       	breq	.+90     	; 0x104d0 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   10476:	20 8d       	ldd	r18, Z+24	; 0x18
   10478:	31 8d       	ldd	r19, Z+25	; 0x19
   1047a:	21 30       	cpi	r18, 0x01	; 1
   1047c:	31 05       	cpc	r19, r1
   1047e:	41 f5       	brne	.+80     	; 0x104d0 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:314
		{
			cmd++;
   10480:	6f 5f       	subi	r22, 0xFF	; 255
   10482:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:315
			writeCmd16(cmd);
   10484:	c0 a9       	ldd	r28, Z+48	; 0x30
   10486:	d1 a9       	ldd	r29, Z+49	; 0x31
   10488:	88 81       	ld	r24, Y
   1048a:	23 ad       	ldd	r18, Z+59	; 0x3b
   1048c:	82 23       	and	r24, r18
   1048e:	88 83       	st	Y, r24
   10490:	72 b9       	out	0x02, r23	; 2
   10492:	c2 a9       	ldd	r28, Z+50	; 0x32
   10494:	d3 a9       	ldd	r29, Z+51	; 0x33
   10496:	88 81       	ld	r24, Y
   10498:	24 ad       	ldd	r18, Z+60	; 0x3c
   1049a:	82 23       	and	r24, r18
   1049c:	88 83       	st	Y, r24
   1049e:	c2 a9       	ldd	r28, Z+50	; 0x32
   104a0:	d3 a9       	ldd	r29, Z+51	; 0x33
   104a2:	88 81       	ld	r24, Y
   104a4:	20 ad       	ldd	r18, Z+56	; 0x38
   104a6:	82 2b       	or	r24, r18
   104a8:	88 83       	st	Y, r24
   104aa:	62 b9       	out	0x02, r22	; 2
   104ac:	c2 a9       	ldd	r28, Z+50	; 0x32
   104ae:	d3 a9       	ldd	r29, Z+51	; 0x33
   104b0:	88 81       	ld	r24, Y
   104b2:	24 ad       	ldd	r18, Z+60	; 0x3c
   104b4:	82 23       	and	r24, r18
   104b6:	88 83       	st	Y, r24
   104b8:	c2 a9       	ldd	r28, Z+50	; 0x32
   104ba:	d3 a9       	ldd	r29, Z+51	; 0x33
   104bc:	88 81       	ld	r24, Y
   104be:	20 ad       	ldd	r18, Z+56	; 0x38
   104c0:	82 2b       	or	r24, r18
   104c2:	88 83       	st	Y, r24
   104c4:	c0 a9       	ldd	r28, Z+48	; 0x30
   104c6:	d1 a9       	ldd	r29, Z+49	; 0x31
   104c8:	88 81       	ld	r24, Y
   104ca:	27 a9       	ldd	r18, Z+55	; 0x37
   104cc:	82 2b       	or	r24, r18
   104ce:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
   104d0:	29 2f       	mov	r18, r25
   104d2:	bc cf       	rjmp	.-136    	; 0x1044c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:318
		{
			cmd++;
			writeCmd16(cmd);
		}
    }
    CS_IDLE;
   104d4:	a6 a5       	ldd	r26, Z+46	; 0x2e
   104d6:	b7 a5       	ldd	r27, Z+47	; 0x2f
   104d8:	8c 91       	ld	r24, X
   104da:	96 a9       	ldd	r25, Z+54	; 0x36
   104dc:	89 2b       	or	r24, r25
   104de:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:319
}
   104e0:	df 91       	pop	r29
   104e2:	cf 91       	pop	r28
   104e4:	08 95       	ret

000104e6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:323

// Sets the LCD address window 
void LCDWIKI_KBV::Set_Addr_Window(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
   104e6:	af 92       	push	r10
   104e8:	bf 92       	push	r11
   104ea:	cf 92       	push	r12
   104ec:	df 92       	push	r13
   104ee:	ef 92       	push	r14
   104f0:	ff 92       	push	r15
   104f2:	0f 93       	push	r16
   104f4:	1f 93       	push	r17
   104f6:	cf 93       	push	r28
   104f8:	df 93       	push	r29
   104fa:	00 d0       	rcall	.+0      	; 0x104fc <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
   104fc:	00 d0       	rcall	.+0      	; 0x104fe <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
   104fe:	1f 92       	push	r1
   10500:	1f 92       	push	r1
   10502:	cd b7       	in	r28, 0x3d	; 61
   10504:	de b7       	in	r29, 0x3e	; 62
   10506:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:324
	CS_ACTIVE;
   10508:	dc 01       	movw	r26, r24
   1050a:	9e 96       	adiw	r26, 0x2e	; 46
   1050c:	ed 91       	ld	r30, X+
   1050e:	fc 91       	ld	r31, X
   10510:	9f 97       	sbiw	r26, 0x2f	; 47
   10512:	80 81       	ld	r24, Z
   10514:	da 96       	adiw	r26, 0x3a	; 58
   10516:	9c 91       	ld	r25, X
   10518:	da 97       	sbiw	r26, 0x3a	; 58
   1051a:	89 23       	and	r24, r25
   1051c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:325
	if(lcd_driver == ID_932X) 
   1051e:	58 96       	adiw	r26, 0x18	; 24
   10520:	8d 91       	ld	r24, X+
   10522:	9c 91       	ld	r25, X
   10524:	59 97       	sbiw	r26, 0x19	; 25
   10526:	00 97       	sbiw	r24, 0x00	; 0
   10528:	09 f0       	breq	.+2      	; 0x1052c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
   1052a:	44 c3       	rjmp	.+1672   	; 0x10bb4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:336
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
   1052c:	56 96       	adiw	r26, 0x16	; 22
   1052e:	8d 91       	ld	r24, X+
   10530:	9c 91       	ld	r25, X
   10532:	57 97       	sbiw	r26, 0x17	; 23
   10534:	82 30       	cpi	r24, 0x02	; 2
   10536:	91 05       	cpc	r25, r1
   10538:	09 f4       	brne	.+2      	; 0x1053c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
   1053a:	0b c3       	rjmp	.+1558   	; 0x10b52 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
   1053c:	83 30       	cpi	r24, 0x03	; 3
   1053e:	91 05       	cpc	r25, r1
   10540:	09 f4       	brne	.+2      	; 0x10544 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
   10542:	23 c3       	rjmp	.+1606   	; 0x10b8a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
   10544:	01 97       	sbiw	r24, 0x01	; 1
   10546:	09 f0       	breq	.+2      	; 0x1054a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
   10548:	32 c3       	rjmp	.+1636   	; 0x10bae <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
   1054a:	1e 96       	adiw	r26, 0x0e	; 14
   1054c:	0d 90       	ld	r0, X+
   1054e:	bc 91       	ld	r27, X
   10550:	a0 2d       	mov	r26, r0
   10552:	68 01       	movw	r12, r16
   10554:	c0 94       	com	r12
   10556:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      y2 = x2;
			      x2 = WIDTH  - 1 - t;
   10558:	40 95       	com	r20
   1055a:	50 95       	com	r21
   1055c:	fa 01       	movw	r30, r20
   1055e:	ea 0f       	add	r30, r26
   10560:	fb 1f       	adc	r31, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:349
			      x  = x2;
			      y  = y1;
   10562:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:346
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
			      y2 = x2;
   10564:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      x2 = WIDTH  - 1 - t;
   10566:	9f 01       	movw	r18, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:344
			      x  = x1;
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
   10568:	ab 01       	movw	r20, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      x1 = WIDTH  - 1 - y2;
   1056a:	b6 01       	movw	r22, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
   1056c:	6a 0f       	add	r22, r26
   1056e:	7b 1f       	adc	r23, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:371
			      y2 = HEIGHT - 1 - t;
			      x  = x1;
			      y  = y2;
			      break;
    	}
    writeCmdData16(ILI932X_HOR_START_AD, x1); // Set address window
   10570:	d7 01       	movw	r26, r14
   10572:	d0 96       	adiw	r26, 0x30	; 48
   10574:	cd 90       	ld	r12, X+
   10576:	dc 90       	ld	r13, X
   10578:	d6 01       	movw	r26, r12
   1057a:	bc 90       	ld	r11, X
   1057c:	d7 01       	movw	r26, r14
   1057e:	db 96       	adiw	r26, 0x3b	; 59
   10580:	ac 90       	ld	r10, X
   10582:	ba 20       	and	r11, r10
   10584:	d6 01       	movw	r26, r12
   10586:	bc 92       	st	X, r11
   10588:	12 b8       	out	0x02, r1	; 2
   1058a:	d7 01       	movw	r26, r14
   1058c:	d2 96       	adiw	r26, 0x32	; 50
   1058e:	cd 90       	ld	r12, X+
   10590:	dc 90       	ld	r13, X
   10592:	d6 01       	movw	r26, r12
   10594:	bc 90       	ld	r11, X
   10596:	d7 01       	movw	r26, r14
   10598:	dc 96       	adiw	r26, 0x3c	; 60
   1059a:	ac 90       	ld	r10, X
   1059c:	ba 20       	and	r11, r10
   1059e:	d6 01       	movw	r26, r12
   105a0:	bc 92       	st	X, r11
   105a2:	d7 01       	movw	r26, r14
   105a4:	d2 96       	adiw	r26, 0x32	; 50
   105a6:	cd 90       	ld	r12, X+
   105a8:	dc 90       	ld	r13, X
   105aa:	d6 01       	movw	r26, r12
   105ac:	bc 90       	ld	r11, X
   105ae:	d7 01       	movw	r26, r14
   105b0:	d8 96       	adiw	r26, 0x38	; 56
   105b2:	ac 90       	ld	r10, X
   105b4:	ba 28       	or	r11, r10
   105b6:	d6 01       	movw	r26, r12
   105b8:	bc 92       	st	X, r11
   105ba:	a0 e5       	ldi	r26, 0x50	; 80
   105bc:	a2 b9       	out	0x02, r26	; 2
   105be:	d7 01       	movw	r26, r14
   105c0:	d2 96       	adiw	r26, 0x32	; 50
   105c2:	cd 90       	ld	r12, X+
   105c4:	dc 90       	ld	r13, X
   105c6:	d6 01       	movw	r26, r12
   105c8:	bc 90       	ld	r11, X
   105ca:	d7 01       	movw	r26, r14
   105cc:	dc 96       	adiw	r26, 0x3c	; 60
   105ce:	ac 90       	ld	r10, X
   105d0:	ba 20       	and	r11, r10
   105d2:	d6 01       	movw	r26, r12
   105d4:	bc 92       	st	X, r11
   105d6:	d7 01       	movw	r26, r14
   105d8:	d2 96       	adiw	r26, 0x32	; 50
   105da:	cd 90       	ld	r12, X+
   105dc:	dc 90       	ld	r13, X
   105de:	d6 01       	movw	r26, r12
   105e0:	bc 90       	ld	r11, X
   105e2:	d7 01       	movw	r26, r14
   105e4:	d8 96       	adiw	r26, 0x38	; 56
   105e6:	ac 90       	ld	r10, X
   105e8:	ba 28       	or	r11, r10
   105ea:	d6 01       	movw	r26, r12
   105ec:	bc 92       	st	X, r11
   105ee:	d7 01       	movw	r26, r14
   105f0:	d0 96       	adiw	r26, 0x30	; 48
   105f2:	cd 90       	ld	r12, X+
   105f4:	dc 90       	ld	r13, X
   105f6:	d6 01       	movw	r26, r12
   105f8:	bc 90       	ld	r11, X
   105fa:	d7 01       	movw	r26, r14
   105fc:	d7 96       	adiw	r26, 0x37	; 55
   105fe:	ac 90       	ld	r10, X
   10600:	ba 28       	or	r11, r10
   10602:	d6 01       	movw	r26, r12
   10604:	bc 92       	st	X, r11
   10606:	72 b9       	out	0x02, r23	; 2
   10608:	d7 01       	movw	r26, r14
   1060a:	d2 96       	adiw	r26, 0x32	; 50
   1060c:	ad 90       	ld	r10, X+
   1060e:	bc 90       	ld	r11, X
   10610:	d5 01       	movw	r26, r10
   10612:	7c 91       	ld	r23, X
   10614:	d7 01       	movw	r26, r14
   10616:	dc 96       	adiw	r26, 0x3c	; 60
   10618:	dc 90       	ld	r13, X
   1061a:	7d 21       	and	r23, r13
   1061c:	d5 01       	movw	r26, r10
   1061e:	7c 93       	st	X, r23
   10620:	d7 01       	movw	r26, r14
   10622:	d2 96       	adiw	r26, 0x32	; 50
   10624:	ad 90       	ld	r10, X+
   10626:	bc 90       	ld	r11, X
   10628:	d5 01       	movw	r26, r10
   1062a:	7c 91       	ld	r23, X
   1062c:	d7 01       	movw	r26, r14
   1062e:	d8 96       	adiw	r26, 0x38	; 56
   10630:	dc 90       	ld	r13, X
   10632:	7d 29       	or	r23, r13
   10634:	d5 01       	movw	r26, r10
   10636:	7c 93       	st	X, r23
   10638:	62 b9       	out	0x02, r22	; 2
   1063a:	d7 01       	movw	r26, r14
   1063c:	d2 96       	adiw	r26, 0x32	; 50
   1063e:	cd 90       	ld	r12, X+
   10640:	dc 90       	ld	r13, X
   10642:	d6 01       	movw	r26, r12
   10644:	6c 91       	ld	r22, X
   10646:	d7 01       	movw	r26, r14
   10648:	dc 96       	adiw	r26, 0x3c	; 60
   1064a:	7c 91       	ld	r23, X
   1064c:	67 23       	and	r22, r23
   1064e:	d6 01       	movw	r26, r12
   10650:	6c 93       	st	X, r22
   10652:	d7 01       	movw	r26, r14
   10654:	d2 96       	adiw	r26, 0x32	; 50
   10656:	cd 90       	ld	r12, X+
   10658:	dc 90       	ld	r13, X
   1065a:	d6 01       	movw	r26, r12
   1065c:	6c 91       	ld	r22, X
   1065e:	d7 01       	movw	r26, r14
   10660:	d8 96       	adiw	r26, 0x38	; 56
   10662:	7c 91       	ld	r23, X
   10664:	67 2b       	or	r22, r23
   10666:	d6 01       	movw	r26, r12
   10668:	6c 93       	st	X, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:372
    writeCmdData16(ILI932X_HOR_END_AD, x2);
   1066a:	d7 01       	movw	r26, r14
   1066c:	d0 96       	adiw	r26, 0x30	; 48
   1066e:	cd 90       	ld	r12, X+
   10670:	dc 90       	ld	r13, X
   10672:	d6 01       	movw	r26, r12
   10674:	6c 91       	ld	r22, X
   10676:	d7 01       	movw	r26, r14
   10678:	db 96       	adiw	r26, 0x3b	; 59
   1067a:	7c 91       	ld	r23, X
   1067c:	67 23       	and	r22, r23
   1067e:	d6 01       	movw	r26, r12
   10680:	6c 93       	st	X, r22
   10682:	12 b8       	out	0x02, r1	; 2
   10684:	d7 01       	movw	r26, r14
   10686:	d2 96       	adiw	r26, 0x32	; 50
   10688:	cd 90       	ld	r12, X+
   1068a:	dc 90       	ld	r13, X
   1068c:	d6 01       	movw	r26, r12
   1068e:	6c 91       	ld	r22, X
   10690:	d7 01       	movw	r26, r14
   10692:	dc 96       	adiw	r26, 0x3c	; 60
   10694:	7c 91       	ld	r23, X
   10696:	67 23       	and	r22, r23
   10698:	d6 01       	movw	r26, r12
   1069a:	6c 93       	st	X, r22
   1069c:	d7 01       	movw	r26, r14
   1069e:	d2 96       	adiw	r26, 0x32	; 50
   106a0:	cd 90       	ld	r12, X+
   106a2:	dc 90       	ld	r13, X
   106a4:	d6 01       	movw	r26, r12
   106a6:	6c 91       	ld	r22, X
   106a8:	d7 01       	movw	r26, r14
   106aa:	d8 96       	adiw	r26, 0x38	; 56
   106ac:	7c 91       	ld	r23, X
   106ae:	67 2b       	or	r22, r23
   106b0:	d6 01       	movw	r26, r12
   106b2:	6c 93       	st	X, r22
   106b4:	61 e5       	ldi	r22, 0x51	; 81
   106b6:	62 b9       	out	0x02, r22	; 2
   106b8:	d7 01       	movw	r26, r14
   106ba:	d2 96       	adiw	r26, 0x32	; 50
   106bc:	cd 90       	ld	r12, X+
   106be:	dc 90       	ld	r13, X
   106c0:	d6 01       	movw	r26, r12
   106c2:	6c 91       	ld	r22, X
   106c4:	d7 01       	movw	r26, r14
   106c6:	dc 96       	adiw	r26, 0x3c	; 60
   106c8:	7c 91       	ld	r23, X
   106ca:	67 23       	and	r22, r23
   106cc:	d6 01       	movw	r26, r12
   106ce:	6c 93       	st	X, r22
   106d0:	d7 01       	movw	r26, r14
   106d2:	d2 96       	adiw	r26, 0x32	; 50
   106d4:	cd 90       	ld	r12, X+
   106d6:	dc 90       	ld	r13, X
   106d8:	d6 01       	movw	r26, r12
   106da:	6c 91       	ld	r22, X
   106dc:	d7 01       	movw	r26, r14
   106de:	d8 96       	adiw	r26, 0x38	; 56
   106e0:	7c 91       	ld	r23, X
   106e2:	67 2b       	or	r22, r23
   106e4:	d6 01       	movw	r26, r12
   106e6:	6c 93       	st	X, r22
   106e8:	d7 01       	movw	r26, r14
   106ea:	d0 96       	adiw	r26, 0x30	; 48
   106ec:	cd 90       	ld	r12, X+
   106ee:	dc 90       	ld	r13, X
   106f0:	d6 01       	movw	r26, r12
   106f2:	6c 91       	ld	r22, X
   106f4:	d7 01       	movw	r26, r14
   106f6:	d7 96       	adiw	r26, 0x37	; 55
   106f8:	7c 91       	ld	r23, X
   106fa:	67 2b       	or	r22, r23
   106fc:	d6 01       	movw	r26, r12
   106fe:	6c 93       	st	X, r22
   10700:	32 b9       	out	0x02, r19	; 2
   10702:	d7 01       	movw	r26, r14
   10704:	d2 96       	adiw	r26, 0x32	; 50
   10706:	cd 90       	ld	r12, X+
   10708:	dc 90       	ld	r13, X
   1070a:	d6 01       	movw	r26, r12
   1070c:	3c 91       	ld	r19, X
   1070e:	d7 01       	movw	r26, r14
   10710:	dc 96       	adiw	r26, 0x3c	; 60
   10712:	6c 91       	ld	r22, X
   10714:	36 23       	and	r19, r22
   10716:	d6 01       	movw	r26, r12
   10718:	3c 93       	st	X, r19
   1071a:	d7 01       	movw	r26, r14
   1071c:	d2 96       	adiw	r26, 0x32	; 50
   1071e:	cd 90       	ld	r12, X+
   10720:	dc 90       	ld	r13, X
   10722:	d6 01       	movw	r26, r12
   10724:	3c 91       	ld	r19, X
   10726:	d7 01       	movw	r26, r14
   10728:	d8 96       	adiw	r26, 0x38	; 56
   1072a:	6c 91       	ld	r22, X
   1072c:	36 2b       	or	r19, r22
   1072e:	d6 01       	movw	r26, r12
   10730:	3c 93       	st	X, r19
   10732:	22 b9       	out	0x02, r18	; 2
   10734:	d7 01       	movw	r26, r14
   10736:	d2 96       	adiw	r26, 0x32	; 50
   10738:	6d 91       	ld	r22, X+
   1073a:	7c 91       	ld	r23, X
   1073c:	db 01       	movw	r26, r22
   1073e:	2c 91       	ld	r18, X
   10740:	d7 01       	movw	r26, r14
   10742:	dc 96       	adiw	r26, 0x3c	; 60
   10744:	3c 91       	ld	r19, X
   10746:	23 23       	and	r18, r19
   10748:	db 01       	movw	r26, r22
   1074a:	2c 93       	st	X, r18
   1074c:	d7 01       	movw	r26, r14
   1074e:	d2 96       	adiw	r26, 0x32	; 50
   10750:	6d 91       	ld	r22, X+
   10752:	7c 91       	ld	r23, X
   10754:	db 01       	movw	r26, r22
   10756:	2c 91       	ld	r18, X
   10758:	d7 01       	movw	r26, r14
   1075a:	d8 96       	adiw	r26, 0x38	; 56
   1075c:	3c 91       	ld	r19, X
   1075e:	23 2b       	or	r18, r19
   10760:	db 01       	movw	r26, r22
   10762:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:373
    writeCmdData16(ILI932X_VER_START_AD, y1);
   10764:	d7 01       	movw	r26, r14
   10766:	d0 96       	adiw	r26, 0x30	; 48
   10768:	6d 91       	ld	r22, X+
   1076a:	7c 91       	ld	r23, X
   1076c:	db 01       	movw	r26, r22
   1076e:	2c 91       	ld	r18, X
   10770:	d7 01       	movw	r26, r14
   10772:	db 96       	adiw	r26, 0x3b	; 59
   10774:	3c 91       	ld	r19, X
   10776:	23 23       	and	r18, r19
   10778:	db 01       	movw	r26, r22
   1077a:	2c 93       	st	X, r18
   1077c:	12 b8       	out	0x02, r1	; 2
   1077e:	d7 01       	movw	r26, r14
   10780:	d2 96       	adiw	r26, 0x32	; 50
   10782:	6d 91       	ld	r22, X+
   10784:	7c 91       	ld	r23, X
   10786:	db 01       	movw	r26, r22
   10788:	2c 91       	ld	r18, X
   1078a:	d7 01       	movw	r26, r14
   1078c:	dc 96       	adiw	r26, 0x3c	; 60
   1078e:	3c 91       	ld	r19, X
   10790:	23 23       	and	r18, r19
   10792:	db 01       	movw	r26, r22
   10794:	2c 93       	st	X, r18
   10796:	d7 01       	movw	r26, r14
   10798:	d2 96       	adiw	r26, 0x32	; 50
   1079a:	6d 91       	ld	r22, X+
   1079c:	7c 91       	ld	r23, X
   1079e:	db 01       	movw	r26, r22
   107a0:	2c 91       	ld	r18, X
   107a2:	d7 01       	movw	r26, r14
   107a4:	d8 96       	adiw	r26, 0x38	; 56
   107a6:	3c 91       	ld	r19, X
   107a8:	23 2b       	or	r18, r19
   107aa:	db 01       	movw	r26, r22
   107ac:	2c 93       	st	X, r18
   107ae:	22 e5       	ldi	r18, 0x52	; 82
   107b0:	22 b9       	out	0x02, r18	; 2
   107b2:	d7 01       	movw	r26, r14
   107b4:	d2 96       	adiw	r26, 0x32	; 50
   107b6:	6d 91       	ld	r22, X+
   107b8:	7c 91       	ld	r23, X
   107ba:	db 01       	movw	r26, r22
   107bc:	2c 91       	ld	r18, X
   107be:	d7 01       	movw	r26, r14
   107c0:	dc 96       	adiw	r26, 0x3c	; 60
   107c2:	3c 91       	ld	r19, X
   107c4:	23 23       	and	r18, r19
   107c6:	db 01       	movw	r26, r22
   107c8:	2c 93       	st	X, r18
   107ca:	d7 01       	movw	r26, r14
   107cc:	d2 96       	adiw	r26, 0x32	; 50
   107ce:	6d 91       	ld	r22, X+
   107d0:	7c 91       	ld	r23, X
   107d2:	db 01       	movw	r26, r22
   107d4:	2c 91       	ld	r18, X
   107d6:	d7 01       	movw	r26, r14
   107d8:	d8 96       	adiw	r26, 0x38	; 56
   107da:	3c 91       	ld	r19, X
   107dc:	23 2b       	or	r18, r19
   107de:	db 01       	movw	r26, r22
   107e0:	2c 93       	st	X, r18
   107e2:	d7 01       	movw	r26, r14
   107e4:	d0 96       	adiw	r26, 0x30	; 48
   107e6:	6d 91       	ld	r22, X+
   107e8:	7c 91       	ld	r23, X
   107ea:	db 01       	movw	r26, r22
   107ec:	2c 91       	ld	r18, X
   107ee:	d7 01       	movw	r26, r14
   107f0:	d7 96       	adiw	r26, 0x37	; 55
   107f2:	3c 91       	ld	r19, X
   107f4:	23 2b       	or	r18, r19
   107f6:	db 01       	movw	r26, r22
   107f8:	2c 93       	st	X, r18
   107fa:	52 b9       	out	0x02, r21	; 2
   107fc:	d7 01       	movw	r26, r14
   107fe:	d2 96       	adiw	r26, 0x32	; 50
   10800:	6d 91       	ld	r22, X+
   10802:	7c 91       	ld	r23, X
   10804:	db 01       	movw	r26, r22
   10806:	2c 91       	ld	r18, X
   10808:	d7 01       	movw	r26, r14
   1080a:	dc 96       	adiw	r26, 0x3c	; 60
   1080c:	3c 91       	ld	r19, X
   1080e:	23 23       	and	r18, r19
   10810:	db 01       	movw	r26, r22
   10812:	2c 93       	st	X, r18
   10814:	d7 01       	movw	r26, r14
   10816:	d2 96       	adiw	r26, 0x32	; 50
   10818:	6d 91       	ld	r22, X+
   1081a:	7c 91       	ld	r23, X
   1081c:	db 01       	movw	r26, r22
   1081e:	2c 91       	ld	r18, X
   10820:	d7 01       	movw	r26, r14
   10822:	d8 96       	adiw	r26, 0x38	; 56
   10824:	3c 91       	ld	r19, X
   10826:	23 2b       	or	r18, r19
   10828:	db 01       	movw	r26, r22
   1082a:	2c 93       	st	X, r18
   1082c:	42 b9       	out	0x02, r20	; 2
   1082e:	d7 01       	movw	r26, r14
   10830:	d2 96       	adiw	r26, 0x32	; 50
   10832:	4d 91       	ld	r20, X+
   10834:	5c 91       	ld	r21, X
   10836:	da 01       	movw	r26, r20
   10838:	2c 91       	ld	r18, X
   1083a:	d7 01       	movw	r26, r14
   1083c:	dc 96       	adiw	r26, 0x3c	; 60
   1083e:	3c 91       	ld	r19, X
   10840:	23 23       	and	r18, r19
   10842:	da 01       	movw	r26, r20
   10844:	2c 93       	st	X, r18
   10846:	d7 01       	movw	r26, r14
   10848:	d2 96       	adiw	r26, 0x32	; 50
   1084a:	4d 91       	ld	r20, X+
   1084c:	5c 91       	ld	r21, X
   1084e:	da 01       	movw	r26, r20
   10850:	2c 91       	ld	r18, X
   10852:	d7 01       	movw	r26, r14
   10854:	d8 96       	adiw	r26, 0x38	; 56
   10856:	3c 91       	ld	r19, X
   10858:	23 2b       	or	r18, r19
   1085a:	da 01       	movw	r26, r20
   1085c:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:374
    writeCmdData16(ILI932X_VER_END_AD, y2);
   1085e:	d7 01       	movw	r26, r14
   10860:	d0 96       	adiw	r26, 0x30	; 48
   10862:	4d 91       	ld	r20, X+
   10864:	5c 91       	ld	r21, X
   10866:	da 01       	movw	r26, r20
   10868:	2c 91       	ld	r18, X
   1086a:	d7 01       	movw	r26, r14
   1086c:	db 96       	adiw	r26, 0x3b	; 59
   1086e:	3c 91       	ld	r19, X
   10870:	23 23       	and	r18, r19
   10872:	da 01       	movw	r26, r20
   10874:	2c 93       	st	X, r18
   10876:	12 b8       	out	0x02, r1	; 2
   10878:	d7 01       	movw	r26, r14
   1087a:	d2 96       	adiw	r26, 0x32	; 50
   1087c:	4d 91       	ld	r20, X+
   1087e:	5c 91       	ld	r21, X
   10880:	da 01       	movw	r26, r20
   10882:	2c 91       	ld	r18, X
   10884:	d7 01       	movw	r26, r14
   10886:	dc 96       	adiw	r26, 0x3c	; 60
   10888:	3c 91       	ld	r19, X
   1088a:	23 23       	and	r18, r19
   1088c:	da 01       	movw	r26, r20
   1088e:	2c 93       	st	X, r18
   10890:	d7 01       	movw	r26, r14
   10892:	d2 96       	adiw	r26, 0x32	; 50
   10894:	4d 91       	ld	r20, X+
   10896:	5c 91       	ld	r21, X
   10898:	da 01       	movw	r26, r20
   1089a:	2c 91       	ld	r18, X
   1089c:	d7 01       	movw	r26, r14
   1089e:	d8 96       	adiw	r26, 0x38	; 56
   108a0:	3c 91       	ld	r19, X
   108a2:	23 2b       	or	r18, r19
   108a4:	da 01       	movw	r26, r20
   108a6:	2c 93       	st	X, r18
   108a8:	23 e5       	ldi	r18, 0x53	; 83
   108aa:	22 b9       	out	0x02, r18	; 2
   108ac:	d7 01       	movw	r26, r14
   108ae:	d2 96       	adiw	r26, 0x32	; 50
   108b0:	4d 91       	ld	r20, X+
   108b2:	5c 91       	ld	r21, X
   108b4:	da 01       	movw	r26, r20
   108b6:	2c 91       	ld	r18, X
   108b8:	d7 01       	movw	r26, r14
   108ba:	dc 96       	adiw	r26, 0x3c	; 60
   108bc:	3c 91       	ld	r19, X
   108be:	23 23       	and	r18, r19
   108c0:	da 01       	movw	r26, r20
   108c2:	2c 93       	st	X, r18
   108c4:	d7 01       	movw	r26, r14
   108c6:	d2 96       	adiw	r26, 0x32	; 50
   108c8:	4d 91       	ld	r20, X+
   108ca:	5c 91       	ld	r21, X
   108cc:	da 01       	movw	r26, r20
   108ce:	2c 91       	ld	r18, X
   108d0:	d7 01       	movw	r26, r14
   108d2:	d8 96       	adiw	r26, 0x38	; 56
   108d4:	3c 91       	ld	r19, X
   108d6:	23 2b       	or	r18, r19
   108d8:	da 01       	movw	r26, r20
   108da:	2c 93       	st	X, r18
   108dc:	d7 01       	movw	r26, r14
   108de:	d0 96       	adiw	r26, 0x30	; 48
   108e0:	4d 91       	ld	r20, X+
   108e2:	5c 91       	ld	r21, X
   108e4:	da 01       	movw	r26, r20
   108e6:	2c 91       	ld	r18, X
   108e8:	d7 01       	movw	r26, r14
   108ea:	d7 96       	adiw	r26, 0x37	; 55
   108ec:	3c 91       	ld	r19, X
   108ee:	23 2b       	or	r18, r19
   108f0:	da 01       	movw	r26, r20
   108f2:	2c 93       	st	X, r18
   108f4:	12 b9       	out	0x02, r17	; 2
   108f6:	d7 01       	movw	r26, r14
   108f8:	d2 96       	adiw	r26, 0x32	; 50
   108fa:	4d 91       	ld	r20, X+
   108fc:	5c 91       	ld	r21, X
   108fe:	da 01       	movw	r26, r20
   10900:	2c 91       	ld	r18, X
   10902:	d7 01       	movw	r26, r14
   10904:	dc 96       	adiw	r26, 0x3c	; 60
   10906:	3c 91       	ld	r19, X
   10908:	23 23       	and	r18, r19
   1090a:	da 01       	movw	r26, r20
   1090c:	2c 93       	st	X, r18
   1090e:	d7 01       	movw	r26, r14
   10910:	d2 96       	adiw	r26, 0x32	; 50
   10912:	4d 91       	ld	r20, X+
   10914:	5c 91       	ld	r21, X
   10916:	da 01       	movw	r26, r20
   10918:	2c 91       	ld	r18, X
   1091a:	d7 01       	movw	r26, r14
   1091c:	d8 96       	adiw	r26, 0x38	; 56
   1091e:	3c 91       	ld	r19, X
   10920:	23 2b       	or	r18, r19
   10922:	da 01       	movw	r26, r20
   10924:	2c 93       	st	X, r18
   10926:	02 b9       	out	0x02, r16	; 2
   10928:	d7 01       	movw	r26, r14
   1092a:	d2 96       	adiw	r26, 0x32	; 50
   1092c:	4d 91       	ld	r20, X+
   1092e:	5c 91       	ld	r21, X
   10930:	da 01       	movw	r26, r20
   10932:	2c 91       	ld	r18, X
   10934:	d7 01       	movw	r26, r14
   10936:	dc 96       	adiw	r26, 0x3c	; 60
   10938:	3c 91       	ld	r19, X
   1093a:	23 23       	and	r18, r19
   1093c:	da 01       	movw	r26, r20
   1093e:	2c 93       	st	X, r18
   10940:	d7 01       	movw	r26, r14
   10942:	d2 96       	adiw	r26, 0x32	; 50
   10944:	4d 91       	ld	r20, X+
   10946:	5c 91       	ld	r21, X
   10948:	da 01       	movw	r26, r20
   1094a:	2c 91       	ld	r18, X
   1094c:	d7 01       	movw	r26, r14
   1094e:	d8 96       	adiw	r26, 0x38	; 56
   10950:	3c 91       	ld	r19, X
   10952:	23 2b       	or	r18, r19
   10954:	da 01       	movw	r26, r20
   10956:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:375
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
   10958:	d7 01       	movw	r26, r14
   1095a:	d0 96       	adiw	r26, 0x30	; 48
   1095c:	4d 91       	ld	r20, X+
   1095e:	5c 91       	ld	r21, X
   10960:	da 01       	movw	r26, r20
   10962:	2c 91       	ld	r18, X
   10964:	d7 01       	movw	r26, r14
   10966:	db 96       	adiw	r26, 0x3b	; 59
   10968:	3c 91       	ld	r19, X
   1096a:	23 23       	and	r18, r19
   1096c:	da 01       	movw	r26, r20
   1096e:	2c 93       	st	X, r18
   10970:	12 b8       	out	0x02, r1	; 2
   10972:	d7 01       	movw	r26, r14
   10974:	d2 96       	adiw	r26, 0x32	; 50
   10976:	4d 91       	ld	r20, X+
   10978:	5c 91       	ld	r21, X
   1097a:	da 01       	movw	r26, r20
   1097c:	2c 91       	ld	r18, X
   1097e:	d7 01       	movw	r26, r14
   10980:	dc 96       	adiw	r26, 0x3c	; 60
   10982:	3c 91       	ld	r19, X
   10984:	23 23       	and	r18, r19
   10986:	da 01       	movw	r26, r20
   10988:	2c 93       	st	X, r18
   1098a:	d7 01       	movw	r26, r14
   1098c:	d2 96       	adiw	r26, 0x32	; 50
   1098e:	4d 91       	ld	r20, X+
   10990:	5c 91       	ld	r21, X
   10992:	da 01       	movw	r26, r20
   10994:	2c 91       	ld	r18, X
   10996:	d7 01       	movw	r26, r14
   10998:	d8 96       	adiw	r26, 0x38	; 56
   1099a:	3c 91       	ld	r19, X
   1099c:	23 2b       	or	r18, r19
   1099e:	da 01       	movw	r26, r20
   109a0:	2c 93       	st	X, r18
   109a2:	20 e2       	ldi	r18, 0x20	; 32
   109a4:	22 b9       	out	0x02, r18	; 2
   109a6:	d7 01       	movw	r26, r14
   109a8:	d2 96       	adiw	r26, 0x32	; 50
   109aa:	4d 91       	ld	r20, X+
   109ac:	5c 91       	ld	r21, X
   109ae:	da 01       	movw	r26, r20
   109b0:	2c 91       	ld	r18, X
   109b2:	d7 01       	movw	r26, r14
   109b4:	dc 96       	adiw	r26, 0x3c	; 60
   109b6:	3c 91       	ld	r19, X
   109b8:	23 23       	and	r18, r19
   109ba:	da 01       	movw	r26, r20
   109bc:	2c 93       	st	X, r18
   109be:	d7 01       	movw	r26, r14
   109c0:	d2 96       	adiw	r26, 0x32	; 50
   109c2:	4d 91       	ld	r20, X+
   109c4:	5c 91       	ld	r21, X
   109c6:	da 01       	movw	r26, r20
   109c8:	2c 91       	ld	r18, X
   109ca:	d7 01       	movw	r26, r14
   109cc:	d8 96       	adiw	r26, 0x38	; 56
   109ce:	3c 91       	ld	r19, X
   109d0:	23 2b       	or	r18, r19
   109d2:	da 01       	movw	r26, r20
   109d4:	2c 93       	st	X, r18
   109d6:	d7 01       	movw	r26, r14
   109d8:	d0 96       	adiw	r26, 0x30	; 48
   109da:	4d 91       	ld	r20, X+
   109dc:	5c 91       	ld	r21, X
   109de:	da 01       	movw	r26, r20
   109e0:	2c 91       	ld	r18, X
   109e2:	d7 01       	movw	r26, r14
   109e4:	d7 96       	adiw	r26, 0x37	; 55
   109e6:	3c 91       	ld	r19, X
   109e8:	23 2b       	or	r18, r19
   109ea:	da 01       	movw	r26, r20
   109ec:	2c 93       	st	X, r18
   109ee:	f2 b9       	out	0x02, r31	; 2
   109f0:	d7 01       	movw	r26, r14
   109f2:	d2 96       	adiw	r26, 0x32	; 50
   109f4:	4d 91       	ld	r20, X+
   109f6:	5c 91       	ld	r21, X
   109f8:	da 01       	movw	r26, r20
   109fa:	2c 91       	ld	r18, X
   109fc:	d7 01       	movw	r26, r14
   109fe:	dc 96       	adiw	r26, 0x3c	; 60
   10a00:	3c 91       	ld	r19, X
   10a02:	23 23       	and	r18, r19
   10a04:	da 01       	movw	r26, r20
   10a06:	2c 93       	st	X, r18
   10a08:	d7 01       	movw	r26, r14
   10a0a:	d2 96       	adiw	r26, 0x32	; 50
   10a0c:	4d 91       	ld	r20, X+
   10a0e:	5c 91       	ld	r21, X
   10a10:	da 01       	movw	r26, r20
   10a12:	2c 91       	ld	r18, X
   10a14:	d7 01       	movw	r26, r14
   10a16:	d8 96       	adiw	r26, 0x38	; 56
   10a18:	3c 91       	ld	r19, X
   10a1a:	23 2b       	or	r18, r19
   10a1c:	da 01       	movw	r26, r20
   10a1e:	2c 93       	st	X, r18
   10a20:	e2 b9       	out	0x02, r30	; 2
   10a22:	d7 01       	movw	r26, r14
   10a24:	d2 96       	adiw	r26, 0x32	; 50
   10a26:	ed 91       	ld	r30, X+
   10a28:	fc 91       	ld	r31, X
   10a2a:	d3 97       	sbiw	r26, 0x33	; 51
   10a2c:	20 81       	ld	r18, Z
   10a2e:	dc 96       	adiw	r26, 0x3c	; 60
   10a30:	3c 91       	ld	r19, X
   10a32:	dc 97       	sbiw	r26, 0x3c	; 60
   10a34:	23 23       	and	r18, r19
   10a36:	20 83       	st	Z, r18
   10a38:	d2 96       	adiw	r26, 0x32	; 50
   10a3a:	ed 91       	ld	r30, X+
   10a3c:	fc 91       	ld	r31, X
   10a3e:	d3 97       	sbiw	r26, 0x33	; 51
   10a40:	20 81       	ld	r18, Z
   10a42:	d8 96       	adiw	r26, 0x38	; 56
   10a44:	3c 91       	ld	r19, X
   10a46:	d8 97       	sbiw	r26, 0x38	; 56
   10a48:	23 2b       	or	r18, r19
   10a4a:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:376
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
   10a4c:	d0 96       	adiw	r26, 0x30	; 48
   10a4e:	ed 91       	ld	r30, X+
   10a50:	fc 91       	ld	r31, X
   10a52:	d1 97       	sbiw	r26, 0x31	; 49
   10a54:	20 81       	ld	r18, Z
   10a56:	db 96       	adiw	r26, 0x3b	; 59
   10a58:	3c 91       	ld	r19, X
   10a5a:	db 97       	sbiw	r26, 0x3b	; 59
   10a5c:	23 23       	and	r18, r19
   10a5e:	20 83       	st	Z, r18
   10a60:	12 b8       	out	0x02, r1	; 2
   10a62:	d2 96       	adiw	r26, 0x32	; 50
   10a64:	ed 91       	ld	r30, X+
   10a66:	fc 91       	ld	r31, X
   10a68:	d3 97       	sbiw	r26, 0x33	; 51
   10a6a:	20 81       	ld	r18, Z
   10a6c:	dc 96       	adiw	r26, 0x3c	; 60
   10a6e:	3c 91       	ld	r19, X
   10a70:	dc 97       	sbiw	r26, 0x3c	; 60
   10a72:	23 23       	and	r18, r19
   10a74:	20 83       	st	Z, r18
   10a76:	d2 96       	adiw	r26, 0x32	; 50
   10a78:	ed 91       	ld	r30, X+
   10a7a:	fc 91       	ld	r31, X
   10a7c:	d3 97       	sbiw	r26, 0x33	; 51
   10a7e:	20 81       	ld	r18, Z
   10a80:	d8 96       	adiw	r26, 0x38	; 56
   10a82:	3c 91       	ld	r19, X
   10a84:	d8 97       	sbiw	r26, 0x38	; 56
   10a86:	23 2b       	or	r18, r19
   10a88:	20 83       	st	Z, r18
   10a8a:	21 e2       	ldi	r18, 0x21	; 33
   10a8c:	22 b9       	out	0x02, r18	; 2
   10a8e:	d2 96       	adiw	r26, 0x32	; 50
   10a90:	ed 91       	ld	r30, X+
   10a92:	fc 91       	ld	r31, X
   10a94:	d3 97       	sbiw	r26, 0x33	; 51
   10a96:	20 81       	ld	r18, Z
   10a98:	dc 96       	adiw	r26, 0x3c	; 60
   10a9a:	3c 91       	ld	r19, X
   10a9c:	dc 97       	sbiw	r26, 0x3c	; 60
   10a9e:	23 23       	and	r18, r19
   10aa0:	20 83       	st	Z, r18
   10aa2:	d2 96       	adiw	r26, 0x32	; 50
   10aa4:	ed 91       	ld	r30, X+
   10aa6:	fc 91       	ld	r31, X
   10aa8:	d3 97       	sbiw	r26, 0x33	; 51
   10aaa:	20 81       	ld	r18, Z
   10aac:	d8 96       	adiw	r26, 0x38	; 56
   10aae:	3c 91       	ld	r19, X
   10ab0:	d8 97       	sbiw	r26, 0x38	; 56
   10ab2:	23 2b       	or	r18, r19
   10ab4:	20 83       	st	Z, r18
   10ab6:	d0 96       	adiw	r26, 0x30	; 48
   10ab8:	ed 91       	ld	r30, X+
   10aba:	fc 91       	ld	r31, X
   10abc:	d1 97       	sbiw	r26, 0x31	; 49
   10abe:	20 81       	ld	r18, Z
   10ac0:	d7 96       	adiw	r26, 0x37	; 55
   10ac2:	3c 91       	ld	r19, X
   10ac4:	d7 97       	sbiw	r26, 0x37	; 55
   10ac6:	23 2b       	or	r18, r19
   10ac8:	20 83       	st	Z, r18
   10aca:	92 b9       	out	0x02, r25	; 2
   10acc:	d2 96       	adiw	r26, 0x32	; 50
   10ace:	ed 91       	ld	r30, X+
   10ad0:	fc 91       	ld	r31, X
   10ad2:	d3 97       	sbiw	r26, 0x33	; 51
   10ad4:	90 81       	ld	r25, Z
   10ad6:	dc 96       	adiw	r26, 0x3c	; 60
   10ad8:	2c 91       	ld	r18, X
   10ada:	dc 97       	sbiw	r26, 0x3c	; 60
   10adc:	92 23       	and	r25, r18
   10ade:	90 83       	st	Z, r25
   10ae0:	d2 96       	adiw	r26, 0x32	; 50
   10ae2:	ed 91       	ld	r30, X+
   10ae4:	fc 91       	ld	r31, X
   10ae6:	d3 97       	sbiw	r26, 0x33	; 51
   10ae8:	90 81       	ld	r25, Z
   10aea:	d8 96       	adiw	r26, 0x38	; 56
   10aec:	2c 91       	ld	r18, X
   10aee:	d8 97       	sbiw	r26, 0x38	; 56
   10af0:	92 2b       	or	r25, r18
   10af2:	90 83       	st	Z, r25
   10af4:	82 b9       	out	0x02, r24	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
   10af6:	d2 96       	adiw	r26, 0x32	; 50
   10af8:	ed 91       	ld	r30, X+
   10afa:	fc 91       	ld	r31, X
   10afc:	d3 97       	sbiw	r26, 0x33	; 51
   10afe:	80 81       	ld	r24, Z
   10b00:	dc 96       	adiw	r26, 0x3c	; 60
   10b02:	9c 91       	ld	r25, X
   10b04:	dc 97       	sbiw	r26, 0x3c	; 60
   10b06:	89 23       	and	r24, r25
   10b08:	80 83       	st	Z, r24
   10b0a:	d2 96       	adiw	r26, 0x32	; 50
   10b0c:	ed 91       	ld	r30, X+
   10b0e:	fc 91       	ld	r31, X
   10b10:	d3 97       	sbiw	r26, 0x33	; 51
   10b12:	80 81       	ld	r24, Z
   10b14:	d8 96       	adiw	r26, 0x38	; 56
   10b16:	9c 91       	ld	r25, X
   10b18:	89 2b       	or	r24, r25
   10b1a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:397
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
	
		Push_Command(XC, x_buf, 4); //set x address
		Push_Command(YC, y_buf, 4); //set y address
	}
	CS_IDLE;		
   10b1c:	d7 01       	movw	r26, r14
   10b1e:	9e 96       	adiw	r26, 0x2e	; 46
   10b20:	ed 91       	ld	r30, X+
   10b22:	fc 91       	ld	r31, X
   10b24:	9f 97       	sbiw	r26, 0x2f	; 47
   10b26:	80 81       	ld	r24, Z
   10b28:	d6 96       	adiw	r26, 0x36	; 54
   10b2a:	9c 91       	ld	r25, X
   10b2c:	89 2b       	or	r24, r25
   10b2e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:398
}
   10b30:	28 96       	adiw	r28, 0x08	; 8
   10b32:	0f b6       	in	r0, 0x3f	; 63
   10b34:	f8 94       	cli
   10b36:	de bf       	out	0x3e, r29	; 62
   10b38:	0f be       	out	0x3f, r0	; 63
   10b3a:	cd bf       	out	0x3d, r28	; 61
   10b3c:	df 91       	pop	r29
   10b3e:	cf 91       	pop	r28
   10b40:	1f 91       	pop	r17
   10b42:	0f 91       	pop	r16
   10b44:	ff 90       	pop	r15
   10b46:	ef 90       	pop	r14
   10b48:	df 90       	pop	r13
   10b4a:	cf 90       	pop	r12
   10b4c:	bf 90       	pop	r11
   10b4e:	af 90       	pop	r10
   10b50:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
   10b52:	f7 01       	movw	r30, r14
   10b54:	a6 85       	ldd	r26, Z+14	; 0x0e
   10b56:	b7 85       	ldd	r27, Z+15	; 0x0f
   10b58:	59 01       	movw	r10, r18
   10b5a:	a0 94       	com	r10
   10b5c:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:354
			      x2 = WIDTH  - 1 - t;
   10b5e:	9d 01       	movw	r18, r26
   10b60:	26 1b       	sub	r18, r22
   10b62:	37 0b       	sbc	r19, r23
   10b64:	21 50       	subi	r18, 0x01	; 1
   10b66:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
   10b68:	60 89       	ldd	r22, Z+16	; 0x10
   10b6a:	71 89       	ldd	r23, Z+17	; 0x11
   10b6c:	68 01       	movw	r12, r16
   10b6e:	c0 94       	com	r12
   10b70:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:357
			      y2 = HEIGHT - 1 - t;
   10b72:	8a 01       	movw	r16, r20
   10b74:	00 95       	com	r16
   10b76:	10 95       	com	r17
   10b78:	06 0f       	add	r16, r22
   10b7a:	17 1f       	adc	r17, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:359
			      x  = x2;
			      y  = y2;
   10b7c:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:358
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
			      y2 = HEIGHT - 1 - t;
			      x  = x2;
   10b7e:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
   10b80:	a6 01       	movw	r20, r12
   10b82:	46 0f       	add	r20, r22
   10b84:	57 1f       	adc	r21, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
   10b86:	b5 01       	movw	r22, r10
   10b88:	f1 cc       	rjmp	.-1566   	; 0x1056c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
   10b8a:	f7 01       	movw	r30, r14
   10b8c:	a0 89       	ldd	r26, Z+16	; 0x10
   10b8e:	b1 89       	ldd	r27, Z+17	; 0x11
   10b90:	69 01       	movw	r12, r18
   10b92:	c0 94       	com	r12
   10b94:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      x2 = y2;
			      y2 = HEIGHT - 1 - t;
   10b96:	cd 01       	movw	r24, r26
   10b98:	86 1b       	sub	r24, r22
   10b9a:	97 0b       	sbc	r25, r23
   10b9c:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:367
			      x  = x1;
   10b9e:	fa 01       	movw	r30, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:365
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
			      x2 = y2;
   10ba0:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      y2 = HEIGHT - 1 - t;
   10ba2:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:363
			      x  = x2;
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
   10ba4:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y1 = HEIGHT - 1 - x2;
   10ba6:	a6 01       	movw	r20, r12
   10ba8:	4a 0f       	add	r20, r26
   10baa:	5b 1f       	adc	r21, r27
   10bac:	e1 cc       	rjmp	.-1598   	; 0x10570 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:340
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
			      y  = y1;
   10bae:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:339
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
   10bb0:	fb 01       	movw	r30, r22
   10bb2:	de cc       	rjmp	.-1604   	; 0x10570 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:378
    writeCmdData16(ILI932X_VER_START_AD, y1);
    writeCmdData16(ILI932X_VER_END_AD, y2);
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
 	} 
	else if(lcd_driver == ID_7575)
   10bb4:	01 97       	sbiw	r24, 0x01	; 1
   10bb6:	09 f0       	breq	.+2      	; 0x10bba <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
   10bb8:	e5 c1       	rjmp	.+970    	; 0x10f84 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:380
	{
		writeCmdData8(HX8347G_COLADDRSTART_HI,x1>>8);
   10bba:	d0 96       	adiw	r26, 0x30	; 48
   10bbc:	ed 91       	ld	r30, X+
   10bbe:	fc 91       	ld	r31, X
   10bc0:	d1 97       	sbiw	r26, 0x31	; 49
   10bc2:	80 81       	ld	r24, Z
   10bc4:	db 96       	adiw	r26, 0x3b	; 59
   10bc6:	9c 91       	ld	r25, X
   10bc8:	db 97       	sbiw	r26, 0x3b	; 59
   10bca:	89 23       	and	r24, r25
   10bcc:	80 83       	st	Z, r24
   10bce:	82 e0       	ldi	r24, 0x02	; 2
   10bd0:	82 b9       	out	0x02, r24	; 2
   10bd2:	d2 96       	adiw	r26, 0x32	; 50
   10bd4:	ed 91       	ld	r30, X+
   10bd6:	fc 91       	ld	r31, X
   10bd8:	d3 97       	sbiw	r26, 0x33	; 51
   10bda:	80 81       	ld	r24, Z
   10bdc:	dc 96       	adiw	r26, 0x3c	; 60
   10bde:	9c 91       	ld	r25, X
   10be0:	dc 97       	sbiw	r26, 0x3c	; 60
   10be2:	89 23       	and	r24, r25
   10be4:	80 83       	st	Z, r24
   10be6:	d2 96       	adiw	r26, 0x32	; 50
   10be8:	ed 91       	ld	r30, X+
   10bea:	fc 91       	ld	r31, X
   10bec:	d3 97       	sbiw	r26, 0x33	; 51
   10bee:	80 81       	ld	r24, Z
   10bf0:	d8 96       	adiw	r26, 0x38	; 56
   10bf2:	9c 91       	ld	r25, X
   10bf4:	d8 97       	sbiw	r26, 0x38	; 56
   10bf6:	89 2b       	or	r24, r25
   10bf8:	80 83       	st	Z, r24
   10bfa:	d0 96       	adiw	r26, 0x30	; 48
   10bfc:	ed 91       	ld	r30, X+
   10bfe:	fc 91       	ld	r31, X
   10c00:	d1 97       	sbiw	r26, 0x31	; 49
   10c02:	80 81       	ld	r24, Z
   10c04:	d7 96       	adiw	r26, 0x37	; 55
   10c06:	9c 91       	ld	r25, X
   10c08:	d7 97       	sbiw	r26, 0x37	; 55
   10c0a:	89 2b       	or	r24, r25
   10c0c:	80 83       	st	Z, r24
   10c0e:	72 b9       	out	0x02, r23	; 2
   10c10:	d2 96       	adiw	r26, 0x32	; 50
   10c12:	ed 91       	ld	r30, X+
   10c14:	fc 91       	ld	r31, X
   10c16:	d3 97       	sbiw	r26, 0x33	; 51
   10c18:	80 81       	ld	r24, Z
   10c1a:	dc 96       	adiw	r26, 0x3c	; 60
   10c1c:	9c 91       	ld	r25, X
   10c1e:	dc 97       	sbiw	r26, 0x3c	; 60
   10c20:	89 23       	and	r24, r25
   10c22:	80 83       	st	Z, r24
   10c24:	d2 96       	adiw	r26, 0x32	; 50
   10c26:	ed 91       	ld	r30, X+
   10c28:	fc 91       	ld	r31, X
   10c2a:	d3 97       	sbiw	r26, 0x33	; 51
   10c2c:	80 81       	ld	r24, Z
   10c2e:	d8 96       	adiw	r26, 0x38	; 56
   10c30:	9c 91       	ld	r25, X
   10c32:	d8 97       	sbiw	r26, 0x38	; 56
   10c34:	89 2b       	or	r24, r25
   10c36:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:381
		writeCmdData8(HX8347G_COLADDRSTART_LO,x1);
   10c38:	d0 96       	adiw	r26, 0x30	; 48
   10c3a:	ed 91       	ld	r30, X+
   10c3c:	fc 91       	ld	r31, X
   10c3e:	d1 97       	sbiw	r26, 0x31	; 49
   10c40:	80 81       	ld	r24, Z
   10c42:	db 96       	adiw	r26, 0x3b	; 59
   10c44:	9c 91       	ld	r25, X
   10c46:	db 97       	sbiw	r26, 0x3b	; 59
   10c48:	89 23       	and	r24, r25
   10c4a:	80 83       	st	Z, r24
   10c4c:	83 e0       	ldi	r24, 0x03	; 3
   10c4e:	82 b9       	out	0x02, r24	; 2
   10c50:	d2 96       	adiw	r26, 0x32	; 50
   10c52:	ed 91       	ld	r30, X+
   10c54:	fc 91       	ld	r31, X
   10c56:	d3 97       	sbiw	r26, 0x33	; 51
   10c58:	80 81       	ld	r24, Z
   10c5a:	dc 96       	adiw	r26, 0x3c	; 60
   10c5c:	9c 91       	ld	r25, X
   10c5e:	dc 97       	sbiw	r26, 0x3c	; 60
   10c60:	89 23       	and	r24, r25
   10c62:	80 83       	st	Z, r24
   10c64:	d2 96       	adiw	r26, 0x32	; 50
   10c66:	ed 91       	ld	r30, X+
   10c68:	fc 91       	ld	r31, X
   10c6a:	d3 97       	sbiw	r26, 0x33	; 51
   10c6c:	80 81       	ld	r24, Z
   10c6e:	d8 96       	adiw	r26, 0x38	; 56
   10c70:	9c 91       	ld	r25, X
   10c72:	d8 97       	sbiw	r26, 0x38	; 56
   10c74:	89 2b       	or	r24, r25
   10c76:	80 83       	st	Z, r24
   10c78:	d0 96       	adiw	r26, 0x30	; 48
   10c7a:	ed 91       	ld	r30, X+
   10c7c:	fc 91       	ld	r31, X
   10c7e:	d1 97       	sbiw	r26, 0x31	; 49
   10c80:	80 81       	ld	r24, Z
   10c82:	d7 96       	adiw	r26, 0x37	; 55
   10c84:	9c 91       	ld	r25, X
   10c86:	d7 97       	sbiw	r26, 0x37	; 55
   10c88:	89 2b       	or	r24, r25
   10c8a:	80 83       	st	Z, r24
   10c8c:	62 b9       	out	0x02, r22	; 2
   10c8e:	d2 96       	adiw	r26, 0x32	; 50
   10c90:	ed 91       	ld	r30, X+
   10c92:	fc 91       	ld	r31, X
   10c94:	d3 97       	sbiw	r26, 0x33	; 51
   10c96:	80 81       	ld	r24, Z
   10c98:	dc 96       	adiw	r26, 0x3c	; 60
   10c9a:	9c 91       	ld	r25, X
   10c9c:	dc 97       	sbiw	r26, 0x3c	; 60
   10c9e:	89 23       	and	r24, r25
   10ca0:	80 83       	st	Z, r24
   10ca2:	d2 96       	adiw	r26, 0x32	; 50
   10ca4:	ed 91       	ld	r30, X+
   10ca6:	fc 91       	ld	r31, X
   10ca8:	d3 97       	sbiw	r26, 0x33	; 51
   10caa:	80 81       	ld	r24, Z
   10cac:	d8 96       	adiw	r26, 0x38	; 56
   10cae:	9c 91       	ld	r25, X
   10cb0:	d8 97       	sbiw	r26, 0x38	; 56
   10cb2:	89 2b       	or	r24, r25
   10cb4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:382
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
   10cb6:	d0 96       	adiw	r26, 0x30	; 48
   10cb8:	ed 91       	ld	r30, X+
   10cba:	fc 91       	ld	r31, X
   10cbc:	d1 97       	sbiw	r26, 0x31	; 49
   10cbe:	80 81       	ld	r24, Z
   10cc0:	db 96       	adiw	r26, 0x3b	; 59
   10cc2:	9c 91       	ld	r25, X
   10cc4:	db 97       	sbiw	r26, 0x3b	; 59
   10cc6:	89 23       	and	r24, r25
   10cc8:	80 83       	st	Z, r24
   10cca:	86 e0       	ldi	r24, 0x06	; 6
   10ccc:	82 b9       	out	0x02, r24	; 2
   10cce:	d2 96       	adiw	r26, 0x32	; 50
   10cd0:	ed 91       	ld	r30, X+
   10cd2:	fc 91       	ld	r31, X
   10cd4:	d3 97       	sbiw	r26, 0x33	; 51
   10cd6:	80 81       	ld	r24, Z
   10cd8:	dc 96       	adiw	r26, 0x3c	; 60
   10cda:	9c 91       	ld	r25, X
   10cdc:	dc 97       	sbiw	r26, 0x3c	; 60
   10cde:	89 23       	and	r24, r25
   10ce0:	80 83       	st	Z, r24
   10ce2:	d2 96       	adiw	r26, 0x32	; 50
   10ce4:	ed 91       	ld	r30, X+
   10ce6:	fc 91       	ld	r31, X
   10ce8:	d3 97       	sbiw	r26, 0x33	; 51
   10cea:	80 81       	ld	r24, Z
   10cec:	d8 96       	adiw	r26, 0x38	; 56
   10cee:	9c 91       	ld	r25, X
   10cf0:	d8 97       	sbiw	r26, 0x38	; 56
   10cf2:	89 2b       	or	r24, r25
   10cf4:	80 83       	st	Z, r24
   10cf6:	d0 96       	adiw	r26, 0x30	; 48
   10cf8:	ed 91       	ld	r30, X+
   10cfa:	fc 91       	ld	r31, X
   10cfc:	d1 97       	sbiw	r26, 0x31	; 49
   10cfe:	80 81       	ld	r24, Z
   10d00:	d7 96       	adiw	r26, 0x37	; 55
   10d02:	9c 91       	ld	r25, X
   10d04:	d7 97       	sbiw	r26, 0x37	; 55
   10d06:	89 2b       	or	r24, r25
   10d08:	80 83       	st	Z, r24
   10d0a:	52 b9       	out	0x02, r21	; 2
   10d0c:	d2 96       	adiw	r26, 0x32	; 50
   10d0e:	ed 91       	ld	r30, X+
   10d10:	fc 91       	ld	r31, X
   10d12:	d3 97       	sbiw	r26, 0x33	; 51
   10d14:	80 81       	ld	r24, Z
   10d16:	dc 96       	adiw	r26, 0x3c	; 60
   10d18:	9c 91       	ld	r25, X
   10d1a:	dc 97       	sbiw	r26, 0x3c	; 60
   10d1c:	89 23       	and	r24, r25
   10d1e:	80 83       	st	Z, r24
   10d20:	d2 96       	adiw	r26, 0x32	; 50
   10d22:	ed 91       	ld	r30, X+
   10d24:	fc 91       	ld	r31, X
   10d26:	d3 97       	sbiw	r26, 0x33	; 51
   10d28:	80 81       	ld	r24, Z
   10d2a:	d8 96       	adiw	r26, 0x38	; 56
   10d2c:	9c 91       	ld	r25, X
   10d2e:	d8 97       	sbiw	r26, 0x38	; 56
   10d30:	89 2b       	or	r24, r25
   10d32:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:383
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
   10d34:	d0 96       	adiw	r26, 0x30	; 48
   10d36:	ed 91       	ld	r30, X+
   10d38:	fc 91       	ld	r31, X
   10d3a:	d1 97       	sbiw	r26, 0x31	; 49
   10d3c:	80 81       	ld	r24, Z
   10d3e:	db 96       	adiw	r26, 0x3b	; 59
   10d40:	9c 91       	ld	r25, X
   10d42:	db 97       	sbiw	r26, 0x3b	; 59
   10d44:	89 23       	and	r24, r25
   10d46:	80 83       	st	Z, r24
   10d48:	87 e0       	ldi	r24, 0x07	; 7
   10d4a:	82 b9       	out	0x02, r24	; 2
   10d4c:	d2 96       	adiw	r26, 0x32	; 50
   10d4e:	ed 91       	ld	r30, X+
   10d50:	fc 91       	ld	r31, X
   10d52:	d3 97       	sbiw	r26, 0x33	; 51
   10d54:	80 81       	ld	r24, Z
   10d56:	dc 96       	adiw	r26, 0x3c	; 60
   10d58:	9c 91       	ld	r25, X
   10d5a:	dc 97       	sbiw	r26, 0x3c	; 60
   10d5c:	89 23       	and	r24, r25
   10d5e:	80 83       	st	Z, r24
   10d60:	d2 96       	adiw	r26, 0x32	; 50
   10d62:	ed 91       	ld	r30, X+
   10d64:	fc 91       	ld	r31, X
   10d66:	d3 97       	sbiw	r26, 0x33	; 51
   10d68:	80 81       	ld	r24, Z
   10d6a:	d8 96       	adiw	r26, 0x38	; 56
   10d6c:	9c 91       	ld	r25, X
   10d6e:	d8 97       	sbiw	r26, 0x38	; 56
   10d70:	89 2b       	or	r24, r25
   10d72:	80 83       	st	Z, r24
   10d74:	d0 96       	adiw	r26, 0x30	; 48
   10d76:	ed 91       	ld	r30, X+
   10d78:	fc 91       	ld	r31, X
   10d7a:	d1 97       	sbiw	r26, 0x31	; 49
   10d7c:	80 81       	ld	r24, Z
   10d7e:	d7 96       	adiw	r26, 0x37	; 55
   10d80:	9c 91       	ld	r25, X
   10d82:	d7 97       	sbiw	r26, 0x37	; 55
   10d84:	89 2b       	or	r24, r25
   10d86:	80 83       	st	Z, r24
   10d88:	42 b9       	out	0x02, r20	; 2
   10d8a:	d2 96       	adiw	r26, 0x32	; 50
   10d8c:	ed 91       	ld	r30, X+
   10d8e:	fc 91       	ld	r31, X
   10d90:	d3 97       	sbiw	r26, 0x33	; 51
   10d92:	80 81       	ld	r24, Z
   10d94:	dc 96       	adiw	r26, 0x3c	; 60
   10d96:	9c 91       	ld	r25, X
   10d98:	dc 97       	sbiw	r26, 0x3c	; 60
   10d9a:	89 23       	and	r24, r25
   10d9c:	80 83       	st	Z, r24
   10d9e:	d2 96       	adiw	r26, 0x32	; 50
   10da0:	ed 91       	ld	r30, X+
   10da2:	fc 91       	ld	r31, X
   10da4:	d3 97       	sbiw	r26, 0x33	; 51
   10da6:	80 81       	ld	r24, Z
   10da8:	d8 96       	adiw	r26, 0x38	; 56
   10daa:	9c 91       	ld	r25, X
   10dac:	d8 97       	sbiw	r26, 0x38	; 56
   10dae:	89 2b       	or	r24, r25
   10db0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:384
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
   10db2:	d0 96       	adiw	r26, 0x30	; 48
   10db4:	ed 91       	ld	r30, X+
   10db6:	fc 91       	ld	r31, X
   10db8:	d1 97       	sbiw	r26, 0x31	; 49
   10dba:	80 81       	ld	r24, Z
   10dbc:	db 96       	adiw	r26, 0x3b	; 59
   10dbe:	9c 91       	ld	r25, X
   10dc0:	db 97       	sbiw	r26, 0x3b	; 59
   10dc2:	89 23       	and	r24, r25
   10dc4:	80 83       	st	Z, r24
   10dc6:	84 e0       	ldi	r24, 0x04	; 4
   10dc8:	82 b9       	out	0x02, r24	; 2
   10dca:	d2 96       	adiw	r26, 0x32	; 50
   10dcc:	ed 91       	ld	r30, X+
   10dce:	fc 91       	ld	r31, X
   10dd0:	d3 97       	sbiw	r26, 0x33	; 51
   10dd2:	80 81       	ld	r24, Z
   10dd4:	dc 96       	adiw	r26, 0x3c	; 60
   10dd6:	9c 91       	ld	r25, X
   10dd8:	dc 97       	sbiw	r26, 0x3c	; 60
   10dda:	89 23       	and	r24, r25
   10ddc:	80 83       	st	Z, r24
   10dde:	d2 96       	adiw	r26, 0x32	; 50
   10de0:	ed 91       	ld	r30, X+
   10de2:	fc 91       	ld	r31, X
   10de4:	d3 97       	sbiw	r26, 0x33	; 51
   10de6:	80 81       	ld	r24, Z
   10de8:	d8 96       	adiw	r26, 0x38	; 56
   10dea:	9c 91       	ld	r25, X
   10dec:	d8 97       	sbiw	r26, 0x38	; 56
   10dee:	89 2b       	or	r24, r25
   10df0:	80 83       	st	Z, r24
   10df2:	d0 96       	adiw	r26, 0x30	; 48
   10df4:	ed 91       	ld	r30, X+
   10df6:	fc 91       	ld	r31, X
   10df8:	d1 97       	sbiw	r26, 0x31	; 49
   10dfa:	80 81       	ld	r24, Z
   10dfc:	d7 96       	adiw	r26, 0x37	; 55
   10dfe:	9c 91       	ld	r25, X
   10e00:	d7 97       	sbiw	r26, 0x37	; 55
   10e02:	89 2b       	or	r24, r25
   10e04:	80 83       	st	Z, r24
   10e06:	32 b9       	out	0x02, r19	; 2
   10e08:	d2 96       	adiw	r26, 0x32	; 50
   10e0a:	ed 91       	ld	r30, X+
   10e0c:	fc 91       	ld	r31, X
   10e0e:	d3 97       	sbiw	r26, 0x33	; 51
   10e10:	80 81       	ld	r24, Z
   10e12:	dc 96       	adiw	r26, 0x3c	; 60
   10e14:	9c 91       	ld	r25, X
   10e16:	dc 97       	sbiw	r26, 0x3c	; 60
   10e18:	89 23       	and	r24, r25
   10e1a:	80 83       	st	Z, r24
   10e1c:	d2 96       	adiw	r26, 0x32	; 50
   10e1e:	ed 91       	ld	r30, X+
   10e20:	fc 91       	ld	r31, X
   10e22:	d3 97       	sbiw	r26, 0x33	; 51
   10e24:	80 81       	ld	r24, Z
   10e26:	d8 96       	adiw	r26, 0x38	; 56
   10e28:	9c 91       	ld	r25, X
   10e2a:	d8 97       	sbiw	r26, 0x38	; 56
   10e2c:	89 2b       	or	r24, r25
   10e2e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:385
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
   10e30:	d0 96       	adiw	r26, 0x30	; 48
   10e32:	ed 91       	ld	r30, X+
   10e34:	fc 91       	ld	r31, X
   10e36:	d1 97       	sbiw	r26, 0x31	; 49
   10e38:	80 81       	ld	r24, Z
   10e3a:	db 96       	adiw	r26, 0x3b	; 59
   10e3c:	9c 91       	ld	r25, X
   10e3e:	db 97       	sbiw	r26, 0x3b	; 59
   10e40:	89 23       	and	r24, r25
   10e42:	80 83       	st	Z, r24
   10e44:	85 e0       	ldi	r24, 0x05	; 5
   10e46:	82 b9       	out	0x02, r24	; 2
   10e48:	d2 96       	adiw	r26, 0x32	; 50
   10e4a:	ed 91       	ld	r30, X+
   10e4c:	fc 91       	ld	r31, X
   10e4e:	d3 97       	sbiw	r26, 0x33	; 51
   10e50:	80 81       	ld	r24, Z
   10e52:	dc 96       	adiw	r26, 0x3c	; 60
   10e54:	9c 91       	ld	r25, X
   10e56:	dc 97       	sbiw	r26, 0x3c	; 60
   10e58:	89 23       	and	r24, r25
   10e5a:	80 83       	st	Z, r24
   10e5c:	d2 96       	adiw	r26, 0x32	; 50
   10e5e:	ed 91       	ld	r30, X+
   10e60:	fc 91       	ld	r31, X
   10e62:	d3 97       	sbiw	r26, 0x33	; 51
   10e64:	80 81       	ld	r24, Z
   10e66:	d8 96       	adiw	r26, 0x38	; 56
   10e68:	9c 91       	ld	r25, X
   10e6a:	d8 97       	sbiw	r26, 0x38	; 56
   10e6c:	89 2b       	or	r24, r25
   10e6e:	80 83       	st	Z, r24
   10e70:	d0 96       	adiw	r26, 0x30	; 48
   10e72:	ed 91       	ld	r30, X+
   10e74:	fc 91       	ld	r31, X
   10e76:	d1 97       	sbiw	r26, 0x31	; 49
   10e78:	80 81       	ld	r24, Z
   10e7a:	d7 96       	adiw	r26, 0x37	; 55
   10e7c:	9c 91       	ld	r25, X
   10e7e:	d7 97       	sbiw	r26, 0x37	; 55
   10e80:	89 2b       	or	r24, r25
   10e82:	80 83       	st	Z, r24
   10e84:	22 b9       	out	0x02, r18	; 2
   10e86:	d2 96       	adiw	r26, 0x32	; 50
   10e88:	ed 91       	ld	r30, X+
   10e8a:	fc 91       	ld	r31, X
   10e8c:	d3 97       	sbiw	r26, 0x33	; 51
   10e8e:	80 81       	ld	r24, Z
   10e90:	dc 96       	adiw	r26, 0x3c	; 60
   10e92:	9c 91       	ld	r25, X
   10e94:	dc 97       	sbiw	r26, 0x3c	; 60
   10e96:	89 23       	and	r24, r25
   10e98:	80 83       	st	Z, r24
   10e9a:	d2 96       	adiw	r26, 0x32	; 50
   10e9c:	ed 91       	ld	r30, X+
   10e9e:	fc 91       	ld	r31, X
   10ea0:	d3 97       	sbiw	r26, 0x33	; 51
   10ea2:	80 81       	ld	r24, Z
   10ea4:	d8 96       	adiw	r26, 0x38	; 56
   10ea6:	9c 91       	ld	r25, X
   10ea8:	d8 97       	sbiw	r26, 0x38	; 56
   10eaa:	89 2b       	or	r24, r25
   10eac:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:386
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
   10eae:	d0 96       	adiw	r26, 0x30	; 48
   10eb0:	ed 91       	ld	r30, X+
   10eb2:	fc 91       	ld	r31, X
   10eb4:	d1 97       	sbiw	r26, 0x31	; 49
   10eb6:	80 81       	ld	r24, Z
   10eb8:	db 96       	adiw	r26, 0x3b	; 59
   10eba:	9c 91       	ld	r25, X
   10ebc:	db 97       	sbiw	r26, 0x3b	; 59
   10ebe:	89 23       	and	r24, r25
   10ec0:	80 83       	st	Z, r24
   10ec2:	88 e0       	ldi	r24, 0x08	; 8
   10ec4:	82 b9       	out	0x02, r24	; 2
   10ec6:	d2 96       	adiw	r26, 0x32	; 50
   10ec8:	ed 91       	ld	r30, X+
   10eca:	fc 91       	ld	r31, X
   10ecc:	d3 97       	sbiw	r26, 0x33	; 51
   10ece:	80 81       	ld	r24, Z
   10ed0:	dc 96       	adiw	r26, 0x3c	; 60
   10ed2:	9c 91       	ld	r25, X
   10ed4:	dc 97       	sbiw	r26, 0x3c	; 60
   10ed6:	89 23       	and	r24, r25
   10ed8:	80 83       	st	Z, r24
   10eda:	d2 96       	adiw	r26, 0x32	; 50
   10edc:	ed 91       	ld	r30, X+
   10ede:	fc 91       	ld	r31, X
   10ee0:	d3 97       	sbiw	r26, 0x33	; 51
   10ee2:	80 81       	ld	r24, Z
   10ee4:	d8 96       	adiw	r26, 0x38	; 56
   10ee6:	9c 91       	ld	r25, X
   10ee8:	d8 97       	sbiw	r26, 0x38	; 56
   10eea:	89 2b       	or	r24, r25
   10eec:	80 83       	st	Z, r24
   10eee:	d0 96       	adiw	r26, 0x30	; 48
   10ef0:	ed 91       	ld	r30, X+
   10ef2:	fc 91       	ld	r31, X
   10ef4:	d1 97       	sbiw	r26, 0x31	; 49
   10ef6:	80 81       	ld	r24, Z
   10ef8:	d7 96       	adiw	r26, 0x37	; 55
   10efa:	9c 91       	ld	r25, X
   10efc:	d7 97       	sbiw	r26, 0x37	; 55
   10efe:	89 2b       	or	r24, r25
   10f00:	80 83       	st	Z, r24
   10f02:	12 b9       	out	0x02, r17	; 2
   10f04:	d2 96       	adiw	r26, 0x32	; 50
   10f06:	ed 91       	ld	r30, X+
   10f08:	fc 91       	ld	r31, X
   10f0a:	d3 97       	sbiw	r26, 0x33	; 51
   10f0c:	80 81       	ld	r24, Z
   10f0e:	dc 96       	adiw	r26, 0x3c	; 60
   10f10:	9c 91       	ld	r25, X
   10f12:	dc 97       	sbiw	r26, 0x3c	; 60
   10f14:	89 23       	and	r24, r25
   10f16:	80 83       	st	Z, r24
   10f18:	d2 96       	adiw	r26, 0x32	; 50
   10f1a:	ed 91       	ld	r30, X+
   10f1c:	fc 91       	ld	r31, X
   10f1e:	d3 97       	sbiw	r26, 0x33	; 51
   10f20:	80 81       	ld	r24, Z
   10f22:	d8 96       	adiw	r26, 0x38	; 56
   10f24:	9c 91       	ld	r25, X
   10f26:	d8 97       	sbiw	r26, 0x38	; 56
   10f28:	89 2b       	or	r24, r25
   10f2a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
   10f2c:	d0 96       	adiw	r26, 0x30	; 48
   10f2e:	ed 91       	ld	r30, X+
   10f30:	fc 91       	ld	r31, X
   10f32:	d1 97       	sbiw	r26, 0x31	; 49
   10f34:	80 81       	ld	r24, Z
   10f36:	db 96       	adiw	r26, 0x3b	; 59
   10f38:	9c 91       	ld	r25, X
   10f3a:	db 97       	sbiw	r26, 0x3b	; 59
   10f3c:	89 23       	and	r24, r25
   10f3e:	80 83       	st	Z, r24
   10f40:	89 e0       	ldi	r24, 0x09	; 9
   10f42:	82 b9       	out	0x02, r24	; 2
   10f44:	d2 96       	adiw	r26, 0x32	; 50
   10f46:	ed 91       	ld	r30, X+
   10f48:	fc 91       	ld	r31, X
   10f4a:	d3 97       	sbiw	r26, 0x33	; 51
   10f4c:	80 81       	ld	r24, Z
   10f4e:	dc 96       	adiw	r26, 0x3c	; 60
   10f50:	9c 91       	ld	r25, X
   10f52:	dc 97       	sbiw	r26, 0x3c	; 60
   10f54:	89 23       	and	r24, r25
   10f56:	80 83       	st	Z, r24
   10f58:	d2 96       	adiw	r26, 0x32	; 50
   10f5a:	ed 91       	ld	r30, X+
   10f5c:	fc 91       	ld	r31, X
   10f5e:	d3 97       	sbiw	r26, 0x33	; 51
   10f60:	80 81       	ld	r24, Z
   10f62:	d8 96       	adiw	r26, 0x38	; 56
   10f64:	9c 91       	ld	r25, X
   10f66:	d8 97       	sbiw	r26, 0x38	; 56
   10f68:	89 2b       	or	r24, r25
   10f6a:	80 83       	st	Z, r24
   10f6c:	d0 96       	adiw	r26, 0x30	; 48
   10f6e:	ed 91       	ld	r30, X+
   10f70:	fc 91       	ld	r31, X
   10f72:	d1 97       	sbiw	r26, 0x31	; 49
   10f74:	80 81       	ld	r24, Z
   10f76:	d7 96       	adiw	r26, 0x37	; 55
   10f78:	9c 91       	ld	r25, X
   10f7a:	d7 97       	sbiw	r26, 0x37	; 55
   10f7c:	89 2b       	or	r24, r25
   10f7e:	80 83       	st	Z, r24
   10f80:	02 b9       	out	0x02, r16	; 2
   10f82:	b9 cd       	rjmp	.-1166   	; 0x10af6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:391
	}
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF}; 
   10f84:	7d 83       	std	Y+5, r23	; 0x05
   10f86:	6e 83       	std	Y+6, r22	; 0x06
   10f88:	3f 83       	std	Y+7, r19	; 0x07
   10f8a:	28 87       	std	Y+8, r18	; 0x08
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:392
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
   10f8c:	59 83       	std	Y+1, r21	; 0x01
   10f8e:	4a 83       	std	Y+2, r20	; 0x02
   10f90:	1b 83       	std	Y+3, r17	; 0x03
   10f92:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:394
	
		Push_Command(XC, x_buf, 4); //set x address
   10f94:	f7 01       	movw	r30, r14
   10f96:	64 8d       	ldd	r22, Z+28	; 0x1c
   10f98:	75 8d       	ldd	r23, Z+29	; 0x1d
   10f9a:	24 e0       	ldi	r18, 0x04	; 4
   10f9c:	ae 01       	movw	r20, r28
   10f9e:	4b 5f       	subi	r20, 0xFB	; 251
   10fa0:	5f 4f       	sbci	r21, 0xFF	; 255
   10fa2:	c7 01       	movw	r24, r14
   10fa4:	0e 94 f6 81 	call	0x103ec	; 0x103ec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:395
		Push_Command(YC, y_buf, 4); //set y address
   10fa8:	d7 01       	movw	r26, r14
   10faa:	5e 96       	adiw	r26, 0x1e	; 30
   10fac:	6d 91       	ld	r22, X+
   10fae:	7c 91       	ld	r23, X
   10fb0:	24 e0       	ldi	r18, 0x04	; 4
   10fb2:	ae 01       	movw	r20, r28
   10fb4:	4f 5f       	subi	r20, 0xFF	; 255
   10fb6:	5f 4f       	sbci	r21, 0xFF	; 255
   10fb8:	c7 01       	movw	r24, r14
   10fba:	0e 94 f6 81 	call	0x103ec	; 0x103ec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   10fbe:	ae cd       	rjmp	.-1188   	; 0x10b1c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

00010fc0 <device_get_name(char*)>:
_Z15device_get_namePc():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:59

//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
   10fc0:	0f 93       	push	r16
   10fc2:	1f 93       	push	r17
   10fc4:	cf 93       	push	r28
   10fc6:	df 93       	push	r29
   10fc8:	8c 01       	movw	r16, r24
   10fca:	c4 e6       	ldi	r28, 0x64	; 100
   10fcc:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:63
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(device_nazev  + i);
   10fce:	ce 01       	movw	r24, r28
   10fd0:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:64
    name[i] = t;
   10fd4:	f8 01       	movw	r30, r16
   10fd6:	81 93       	st	Z+, r24
   10fd8:	8f 01       	movw	r16, r30
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:65
    name[i + 1] = 0;
   10fda:	10 82       	st	Z, r1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:66
    if (t == 0)
   10fdc:	88 23       	and	r24, r24
   10fde:	21 f0       	breq	.+8      	; 0x10fe8 <device_get_name(char*)+0x28>
   10fe0:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:61
//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
   10fe2:	cd 36       	cpi	r28, 0x6D	; 109
   10fe4:	d1 05       	cpc	r29, r1
   10fe6:	99 f7       	brne	.-26     	; 0x10fce <device_get_name(char*)+0xe>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:71
    if (t == 0)
    {
      break;
    }
  }
}
   10fe8:	df 91       	pop	r29
   10fea:	cf 91       	pop	r28
   10fec:	1f 91       	pop	r17
   10fee:	0f 91       	pop	r16
   10ff0:	08 95       	ret

00010ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:217
  else
    mqtt_error++;
}
///
void send_mqtt_general_payload(PubSubClient *mqtt_client, char *topic, const char *payload)
{
   10ff2:	cf 92       	push	r12
   10ff4:	df 92       	push	r13
   10ff6:	ef 92       	push	r14
   10ff8:	ff 92       	push	r15
   10ffa:	0f 93       	push	r16
   10ffc:	1f 93       	push	r17
   10ffe:	cf 93       	push	r28
   11000:	df 93       	push	r29
   11002:	cd b7       	in	r28, 0x3d	; 61
   11004:	de b7       	in	r29, 0x3e	; 62
   11006:	ca 54       	subi	r28, 0x4A	; 74
   11008:	d1 09       	sbc	r29, r1
   1100a:	0f b6       	in	r0, 0x3f	; 63
   1100c:	f8 94       	cli
   1100e:	de bf       	out	0x3e, r29	; 62
   11010:	0f be       	out	0x3f, r0	; 63
   11012:	cd bf       	out	0x3d, r28	; 61
   11014:	8c 01       	movw	r16, r24
   11016:	6b 01       	movw	r12, r22
   11018:	7a 01       	movw	r14, r20
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:220
  char str_topic[64];
  char hostname[10];
  if (mqtt_client->connected())
   1101a:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <PubSubClient::connected()>
   1101e:	88 23       	and	r24, r24
   11020:	89 f1       	breq	.+98     	; 0x11084 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:222
  {
    mqtt_send_message++;
   11022:	80 91 ba 0c 	lds	r24, 0x0CBA	; 0x800cba <mqtt_send_message>
   11026:	90 91 bb 0c 	lds	r25, 0x0CBB	; 0x800cbb <mqtt_send_message+0x1>
   1102a:	01 96       	adiw	r24, 0x01	; 1
   1102c:	90 93 bb 0c 	sts	0x0CBB, r25	; 0x800cbb <mqtt_send_message+0x1>
   11030:	80 93 ba 0c 	sts	0x0CBA, r24	; 0x800cba <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:223
    device_get_name(hostname);
   11034:	ce 01       	movw	r24, r28
   11036:	8f 5b       	subi	r24, 0xBF	; 191
   11038:	9f 4f       	sbci	r25, 0xFF	; 255
   1103a:	0e 94 e0 87 	call	0x10fc0	; 0x10fc0 <device_get_name(char*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:224
    strcpy_P(str_topic, header_out);
   1103e:	60 91 b8 0c 	lds	r22, 0x0CB8	; 0x800cb8 <header_out>
   11042:	70 91 b9 0c 	lds	r23, 0x0CB9	; 0x800cb9 <header_out+0x1>
   11046:	ce 01       	movw	r24, r28
   11048:	01 96       	adiw	r24, 0x01	; 1
   1104a:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:225
    strcat(str_topic, hostname);
   1104e:	be 01       	movw	r22, r28
   11050:	6f 5b       	subi	r22, 0xBF	; 191
   11052:	7f 4f       	sbci	r23, 0xFF	; 255
   11054:	ce 01       	movw	r24, r28
   11056:	01 96       	adiw	r24, 0x01	; 1
   11058:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:226
    strcat(str_topic, "/");
   1105c:	60 e9       	ldi	r22, 0x90	; 144
   1105e:	75 e0       	ldi	r23, 0x05	; 5
   11060:	ce 01       	movw	r24, r28
   11062:	01 96       	adiw	r24, 0x01	; 1
   11064:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:227
    strcat(str_topic, topic);
   11068:	b6 01       	movw	r22, r12
   1106a:	ce 01       	movw	r24, r28
   1106c:	01 96       	adiw	r24, 0x01	; 1
   1106e:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:228
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   11072:	a7 01       	movw	r20, r14
   11074:	be 01       	movw	r22, r28
   11076:	6f 5f       	subi	r22, 0xFF	; 255
   11078:	7f 4f       	sbci	r23, 0xFF	; 255
   1107a:	c8 01       	movw	r24, r16
   1107c:	0e 94 23 60 	call	0xc046	; 0xc046 <PubSubClient::publish(char const*, char const*)>
   11080:	81 11       	cpse	r24, r1
   11082:	09 c0       	rjmp	.+18     	; 0x11096 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:231
  }
  else
    mqtt_error++;
   11084:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <mqtt_error>
   11088:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <mqtt_error+0x1>
   1108c:	01 96       	adiw	r24, 0x01	; 1
   1108e:	90 93 bd 0c 	sts	0x0CBD, r25	; 0x800cbd <mqtt_error+0x1>
   11092:	80 93 bc 0c 	sts	0x0CBC, r24	; 0x800cbc <mqtt_error>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:232
}
   11096:	c6 5b       	subi	r28, 0xB6	; 182
   11098:	df 4f       	sbci	r29, 0xFF	; 255
   1109a:	0f b6       	in	r0, 0x3f	; 63
   1109c:	f8 94       	cli
   1109e:	de bf       	out	0x3e, r29	; 62
   110a0:	0f be       	out	0x3f, r0	; 63
   110a2:	cd bf       	out	0x3d, r28	; 61
   110a4:	df 91       	pop	r29
   110a6:	cf 91       	pop	r28
   110a8:	1f 91       	pop	r17
   110aa:	0f 91       	pop	r16
   110ac:	ff 90       	pop	r15
   110ae:	ef 90       	pop	r14
   110b0:	df 90       	pop	r13
   110b2:	cf 90       	pop	r12
   110b4:	08 95       	ret

000110b6 <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:438
  return ret;
}
//////////////////////////////////////////////////////////////////////
/// servisni logovatko pres mqtt ///
int printf_via_mqtt(char c, FILE * t)
{
   110b6:	cf 93       	push	r28
   110b8:	df 93       	push	r29
   110ba:	cd b7       	in	r28, 0x3d	; 61
   110bc:	de b7       	in	r29, 0x3e	; 62
   110be:	60 97       	sbiw	r28, 0x10	; 16
   110c0:	0f b6       	in	r0, 0x3f	; 63
   110c2:	f8 94       	cli
   110c4:	de bf       	out	0x3e, r29	; 62
   110c6:	0f be       	out	0x3f, r0	; 63
   110c8:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:440
  char topic[16];
  mqtt_log[mqtt_log_cnt] = c;
   110ca:	90 91 b7 0a 	lds	r25, 0x0AB7	; 0x800ab7 <mqtt_log_cnt>
   110ce:	e9 2f       	mov	r30, r25
   110d0:	f0 e0       	ldi	r31, 0x00	; 0
   110d2:	e9 5c       	subi	r30, 0xC9	; 201
   110d4:	f5 4f       	sbci	r31, 0xF5	; 245
   110d6:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:441
  mqtt_log[mqtt_log_cnt + 1] = 0;
   110d8:	11 82       	std	Z+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:442
  mqtt_log_cnt++;
   110da:	9f 5f       	subi	r25, 0xFF	; 255
   110dc:	90 93 b7 0a 	sts	0x0AB7, r25	; 0x800ab7 <mqtt_log_cnt>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:443
  if (mqtt_log_cnt > 127 || c == '\n' || c == 0)
   110e0:	97 fd       	sbrc	r25, 7
   110e2:	04 c0       	rjmp	.+8      	; 0x110ec <printf_via_mqtt(char, __file*)+0x36>
   110e4:	8a 30       	cpi	r24, 0x0A	; 10
   110e6:	11 f0       	breq	.+4      	; 0x110ec <printf_via_mqtt(char, __file*)+0x36>
   110e8:	81 11       	cpse	r24, r1
   110ea:	13 c0       	rjmp	.+38     	; 0x11112 <printf_via_mqtt(char, __file*)+0x5c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:445
  {
    strcpy(topic, "log-printf");
   110ec:	62 e3       	ldi	r22, 0x32	; 50
   110ee:	74 e0       	ldi	r23, 0x04	; 4
   110f0:	ce 01       	movw	r24, r28
   110f2:	01 96       	adiw	r24, 0x01	; 1
   110f4:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:446
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
   110f8:	47 e3       	ldi	r20, 0x37	; 55
   110fa:	5a e0       	ldi	r21, 0x0A	; 10
   110fc:	be 01       	movw	r22, r28
   110fe:	6f 5f       	subi	r22, 0xFF	; 255
   11100:	7f 4f       	sbci	r23, 0xFF	; 255
   11102:	80 91 35 0a 	lds	r24, 0x0A35	; 0x800a35 <pub_mqtt_client>
   11106:	90 91 36 0a 	lds	r25, 0x0A36	; 0x800a36 <pub_mqtt_client+0x1>
   1110a:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:447
    mqtt_log_cnt = 0;
   1110e:	10 92 b7 0a 	sts	0x0AB7, r1	; 0x800ab7 <mqtt_log_cnt>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:449
  }
}
   11112:	60 96       	adiw	r28, 0x10	; 16
   11114:	0f b6       	in	r0, 0x3f	; 63
   11116:	f8 94       	cli
   11118:	de bf       	out	0x3e, r29	; 62
   1111a:	0f be       	out	0x3f, r0	; 63
   1111c:	cd bf       	out	0x3d, r28	; 61
   1111e:	df 91       	pop	r29
   11120:	cf 91       	pop	r28
   11122:	08 95       	ret

00011124 <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2049
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
   11124:	2f 92       	push	r2
   11126:	3f 92       	push	r3
   11128:	4f 92       	push	r4
   1112a:	5f 92       	push	r5
   1112c:	6f 92       	push	r6
   1112e:	7f 92       	push	r7
   11130:	8f 92       	push	r8
   11132:	9f 92       	push	r9
   11134:	af 92       	push	r10
   11136:	bf 92       	push	r11
   11138:	cf 92       	push	r12
   1113a:	df 92       	push	r13
   1113c:	ef 92       	push	r14
   1113e:	ff 92       	push	r15
   11140:	0f 93       	push	r16
   11142:	1f 93       	push	r17
   11144:	cf 93       	push	r28
   11146:	df 93       	push	r29
   11148:	cd b7       	in	r28, 0x3d	; 61
   1114a:	de b7       	in	r29, 0x3e	; 62
   1114c:	c6 54       	subi	r28, 0x46	; 70
   1114e:	d1 40       	sbci	r29, 0x01	; 1
   11150:	0f b6       	in	r0, 0x3f	; 63
   11152:	f8 94       	cli
   11154:	de bf       	out	0x3e, r29	; 62
   11156:	0f be       	out	0x3f, r0	; 63
   11158:	cd bf       	out	0x3d, r28	; 61
   1115a:	4c 01       	movw	r8, r24
   1115c:	8b 01       	movw	r16, r22
   1115e:	7a 01       	movw	r14, r20
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
   11160:	1b 82       	std	Y+3, r1	; 0x03
   11162:	86 ed       	ldi	r24, 0xD6	; 214
   11164:	93 e0       	ldi	r25, 0x03	; 3
   11166:	9d 83       	std	Y+5, r25	; 0x05
   11168:	8c 83       	std	Y+4, r24	; 0x04
   1116a:	89 e3       	ldi	r24, 0x39	; 57
   1116c:	95 e0       	ldi	r25, 0x05	; 5
   1116e:	9f 83       	std	Y+7, r25	; 0x07
   11170:	8e 83       	std	Y+6, r24	; 0x06
   11172:	18 86       	std	Y+8, r1	; 0x08
   11174:	19 86       	std	Y+9, r1	; 0x09
   11176:	1a 86       	std	Y+10, r1	; 0x0a
   11178:	1b 86       	std	Y+11, r1	; 0x0b
   1117a:	80 e6       	ldi	r24, 0x60	; 96
   1117c:	9a ee       	ldi	r25, 0xEA	; 234
   1117e:	a0 e0       	ldi	r26, 0x00	; 0
   11180:	b0 e0       	ldi	r27, 0x00	; 0
   11182:	8c 87       	std	Y+12, r24	; 0x0c
   11184:	9d 87       	std	Y+13, r25	; 0x0d
   11186:	ae 87       	std	Y+14, r26	; 0x0e
   11188:	bf 87       	std	Y+15, r27	; 0x0f
   1118a:	18 8a       	std	Y+16, r1	; 0x10
   1118c:	19 8a       	std	Y+17, r1	; 0x11
   1118e:	1a 8a       	std	Y+18, r1	; 0x12
   11190:	1b 8a       	std	Y+19, r1	; 0x13
   11192:	1c 8a       	std	Y+20, r1	; 0x14
   11194:	1d 8a       	std	Y+21, r1	; 0x15
   11196:	1e 8a       	std	Y+22, r1	; 0x16
   11198:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
   1119a:	8c e4       	ldi	r24, 0x4C	; 76
   1119c:	92 e1       	ldi	r25, 0x12	; 18
   1119e:	9a 83       	std	Y+2, r25	; 0x02
   111a0:	89 83       	std	Y+1, r24	; 0x01
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2063
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;

  NTPClient timeClient(udpClient);
  DateTime ted;
   111a2:	ce 01       	movw	r24, r28
   111a4:	84 5c       	subi	r24, 0xC4	; 196
   111a6:	9e 4f       	sbci	r25, 0xFE	; 254
   111a8:	0e 94 76 b4 	call	0x168ec	; 0x168ec <DateTime::DateTime(unsigned long) [clone .constprop.146]>
   111ac:	e5 e0       	ldi	r30, 0x05	; 5
   111ae:	f9 e0       	ldi	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2064
  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
   111b0:	80 e0       	ldi	r24, 0x00	; 0
   111b2:	11 92       	st	Z+, r1
   111b4:	8f 5f       	subi	r24, 0xFF	; 255
   111b6:	80 38       	cpi	r24, 0x80	; 128
   111b8:	e1 f7       	brne	.-8      	; 0x111b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2066
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
   111ba:	80 91 7c 0b 	lds	r24, 0x0B7C	; 0x800b7c <mqtt_receive_message>
   111be:	90 91 7d 0b 	lds	r25, 0x0B7D	; 0x800b7d <mqtt_receive_message+0x1>
   111c2:	01 96       	adiw	r24, 0x01	; 1
   111c4:	90 93 7d 0b 	sts	0x0B7D, r25	; 0x800b7d <mqtt_receive_message+0x1>
   111c8:	80 93 7c 0b 	sts	0x0B7C, r24	; 0x800b7c <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2067
  strncpy(my_payload, (char*) payload, length);
   111cc:	a7 01       	movw	r20, r14
   111ce:	b8 01       	movw	r22, r16
   111d0:	85 e0       	ldi	r24, 0x05	; 5
   111d2:	99 e0       	ldi	r25, 0x09	; 9
   111d4:	0e 94 11 f2 	call	0x1e422	; 0x1e422 <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2070
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
   111d8:	5e 01       	movw	r10, r28
   111da:	28 ec       	ldi	r18, 0xC8	; 200
   111dc:	a2 0e       	add	r10, r18
   111de:	b1 1c       	adc	r11, r1
   111e0:	66 eb       	ldi	r22, 0xB6	; 182
   111e2:	7e e6       	ldi	r23, 0x6E	; 110
   111e4:	c5 01       	movw	r24, r10
   111e6:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2071
  if (strcmp(str1, topic) == 0)
   111ea:	b4 01       	movw	r22, r8
   111ec:	c5 01       	movw	r24, r10
   111ee:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   111f2:	89 2b       	or	r24, r25
   111f4:	49 f4       	brne	.+18     	; 0x11208 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2073
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
   111f6:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   111fa:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   111fe:	01 96       	adiw	r24, 0x01	; 1
   11200:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   11204:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2076
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
  }
  strcpy_P(str1, thermctl_subscribe);
   11208:	6d ec       	ldi	r22, 0xCD	; 205
   1120a:	7e e6       	ldi	r23, 0x6E	; 110
   1120c:	c5 01       	movw	r24, r10
   1120e:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2077
  if (strcmp(str1, topic) == 0)
   11212:	b4 01       	movw	r22, r8
   11214:	c5 01       	movw	r24, r10
   11216:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   1121a:	89 2b       	or	r24, r25
   1121c:	49 f4       	brne	.+18     	; 0x11230 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2079
  {
    mqtt_process_message++;
   1121e:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   11222:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   11226:	01 96       	adiw	r24, 0x01	; 1
   11228:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   1122c:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2085
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
   11230:	64 ef       	ldi	r22, 0xF4	; 244
   11232:	7e e6       	ldi	r23, 0x6E	; 110
   11234:	c5 01       	movw	r24, r10
   11236:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2086
  strcat_P(str1, global_time_set);
   1123a:	68 e9       	ldi	r22, 0x98	; 152
   1123c:	7e e6       	ldi	r23, 0x6E	; 110
   1123e:	c5 01       	movw	r24, r10
   11240:	0e 94 44 e5 	call	0x1ca88	; 0x1ca88 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2087
  if (strcmp(str1, topic) == 0)
   11244:	b4 01       	movw	r22, r8
   11246:	c5 01       	movw	r24, r10
   11248:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   1124c:	89 2b       	or	r24, r25
   1124e:	09 f0       	breq	.+2      	; 0x11252 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e>
   11250:	b5 c0       	rjmp	.+362    	; 0x113bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2089
  {
    mqtt_process_message++;
   11252:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   11256:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   1125a:	01 96       	adiw	r24, 0x01	; 1
   1125c:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   11260:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
   11264:	20 91 87 0e 	lds	r18, 0x0E87	; 0x800e87 <doc>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC2ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
   11268:	88 e8       	ldi	r24, 0x88	; 136
   1126a:	9e e0       	ldi	r25, 0x0E	; 14
   1126c:	2a 96       	adiw	r28, 0x0a	; 10
   1126e:	9f af       	std	Y+63, r25	; 0x3f
   11270:	8e af       	std	Y+62, r24	; 0x3e
   11272:	2a 97       	sbiw	r28, 0x0a	; 10
   11274:	85 e0       	ldi	r24, 0x05	; 5
   11276:	99 e0       	ldi	r25, 0x09	; 9
   11278:	2c 96       	adiw	r28, 0x0c	; 12
   1127a:	9f af       	std	Y+63, r25	; 0x3f
   1127c:	8e af       	std	Y+62, r24	; 0x3e
   1127e:	2c 97       	sbiw	r28, 0x0c	; 12
   11280:	2e 96       	adiw	r28, 0x0e	; 14
   11282:	9f af       	std	Y+63, r25	; 0x3f
   11284:	8e af       	std	Y+62, r24	; 0x3e
   11286:	2e 97       	sbiw	r28, 0x0e	; 14
   11288:	2f 96       	adiw	r28, 0x0f	; 15
   1128a:	2f af       	std	Y+63, r18	; 0x3f
   1128c:	2f 97       	sbiw	r28, 0x0f	; 15
   1128e:	61 96       	adiw	r28, 0x11	; 17
   11290:	1f ae       	std	Y+63, r1	; 0x3f
   11292:	61 97       	sbiw	r28, 0x11	; 17
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
   11294:	10 92 8f 0e 	sts	0x0E8F, r1	; 0x800e8f <doc+0x8>
   11298:	10 92 8e 0e 	sts	0x0E8E, r1	; 0x800e8e <doc+0x7>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
   1129c:	80 e9       	ldi	r24, 0x90	; 144
   1129e:	9f e0       	ldi	r25, 0x0F	; 15
   112a0:	89 2b       	or	r24, r25
   112a2:	09 f4       	brne	.+2      	; 0x112a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x182>
   112a4:	51 c1       	rjmp	.+674    	; 0x11548 <mqtt_callback(char*, unsigned char*, unsigned int)+0x424>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:66
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
   112a6:	10 92 91 0f 	sts	0x0F91, r1	; 0x800f91 <doc+0x10a>
   112aa:	10 92 90 0f 	sts	0x0F90, r1	; 0x800f90 <doc+0x109>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:96
  _data->setNull();
  return *this;
   112ae:	88 e8       	ldi	r24, 0x88	; 136
   112b0:	9e e0       	ldi	r25, 0x0E	; 14
   112b2:	ac 01       	movw	r20, r24
   112b4:	60 e9       	ldi	r22, 0x90	; 144
   112b6:	7f e0       	ldi	r23, 0x0F	; 15
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
   112b8:	ce 01       	movw	r24, r28
   112ba:	88 5b       	subi	r24, 0xB8	; 184
   112bc:	9f 4f       	sbci	r25, 0xFF	; 255
   112be:	0e 94 93 4d 	call	0x9b26	; 0x9b26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
inline typename Internals::enable_if<
    Internals::is_same<typename Internals::remove_const<T>::type,
                       JsonObject>::value,
    T>::type
JsonVariant::as() const {
  return _data ? JsonObject(_memoryPool, _data->asObject()) : JsonObject();
   112c2:	80 e9       	ldi	r24, 0x90	; 144
   112c4:	9f e0       	ldi	r25, 0x0F	; 15
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
  friend class JsonVariant;

 public:
  typedef JsonObjectIterator iterator;

  FORCE_INLINE JsonObject() : _memoryPool(0), _data(0) {}
   112c6:	00 e9       	ldi	r16, 0x90	; 144
   112c8:	1f e0       	ldi	r17, 0x0F	; 15
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
   112ca:	89 2b       	or	r24, r25
   112cc:	51 f0       	breq	.+20     	; 0x112e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
   112ce:	80 91 90 0f 	lds	r24, 0x0F90	; 0x800f90 <doc+0x109>
   112d2:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <doc+0x10a>
_Z13mqtt_callbackPcPhj():
   112d6:	02 e9       	ldi	r16, 0x92	; 146
   112d8:	1f e0       	ldi	r17, 0x0F	; 15
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
   112da:	09 97       	sbiw	r24, 0x09	; 9
   112dc:	11 f0       	breq	.+4      	; 0x112e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
   112de:	10 e0       	ldi	r17, 0x00	; 0
   112e0:	00 e0       	ldi	r16, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
   112e2:	6d e3       	ldi	r22, 0x3D	; 61
   112e4:	74 e0       	ldi	r23, 0x04	; 4
   112e6:	c8 01       	movw	r24, r16
   112e8:	0e 94 6a 4d 	call	0x9ad4	; 0x9ad4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   112ec:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2092
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
   112ee:	89 2b       	or	r24, r25
   112f0:	09 f4       	brne	.+2      	; 0x112f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d0>
   112f2:	64 c0       	rjmp	.+200    	; 0x113bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   112f4:	62 e4       	ldi	r22, 0x42	; 66
   112f6:	74 e0       	ldi	r23, 0x04	; 4
   112f8:	c8 01       	movw	r24, r16
   112fa:	0e 94 6a 4d 	call	0x9ad4	; 0x9ad4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   112fe:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2092
   11300:	89 2b       	or	r24, r25
   11302:	09 f4       	brne	.+2      	; 0x11306 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1e2>
   11304:	5b c0       	rjmp	.+182    	; 0x113bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   11306:	68 e4       	ldi	r22, 0x48	; 72
   11308:	74 e0       	ldi	r23, 0x04	; 4
   1130a:	c8 01       	movw	r24, r16
   1130c:	0e 94 6a 4d 	call	0x9ad4	; 0x9ad4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   11310:	3c 01       	movw	r6, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2092
   11312:	89 2b       	or	r24, r25
   11314:	09 f4       	brne	.+2      	; 0x11318 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1f4>
   11316:	52 c0       	rjmp	.+164    	; 0x113bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   11318:	6d e4       	ldi	r22, 0x4D	; 77
   1131a:	74 e0       	ldi	r23, 0x04	; 4
   1131c:	c8 01       	movw	r24, r16
   1131e:	0e 94 6a 4d 	call	0x9ad4	; 0x9ad4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   11322:	6c 01       	movw	r12, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2092
   11324:	89 2b       	or	r24, r25
   11326:	09 f4       	brne	.+2      	; 0x1132a <mqtt_callback(char*, unsigned char*, unsigned int)+0x206>
   11328:	49 c0       	rjmp	.+146    	; 0x113bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   1132a:	64 e5       	ldi	r22, 0x54	; 84
   1132c:	74 e0       	ldi	r23, 0x04	; 4
   1132e:	c8 01       	movw	r24, r16
   11330:	0e 94 6a 4d 	call	0x9ad4	; 0x9ad4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2092
   11334:	00 97       	sbiw	r24, 0x00	; 0
   11336:	09 f4       	brne	.+2      	; 0x1133a <mqtt_callback(char*, unsigned char*, unsigned int)+0x216>
   11338:	41 c0       	rjmp	.+130    	; 0x113bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
   1133a:	0e 94 4d d2 	call	0x1a49a	; 0x1a49a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   1133e:	38 2e       	mov	r3, r24
   11340:	c6 01       	movw	r24, r12
   11342:	0e 94 4d d2 	call	0x1a49a	; 0x1a49a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   11346:	d8 2e       	mov	r13, r24
   11348:	c3 01       	movw	r24, r6
   1134a:	0e 94 4d d2 	call	0x1a49a	; 0x1a49a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   1134e:	c8 2e       	mov	r12, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   11350:	6b e5       	ldi	r22, 0x5B	; 91
   11352:	74 e0       	ldi	r23, 0x04	; 4
   11354:	c8 01       	movw	r24, r16
   11356:	0e 94 6a 4d 	call	0x9ad4	; 0x9ad4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
   1135a:	10 e0       	ldi	r17, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
   1135c:	00 97       	sbiw	r24, 0x00	; 0
   1135e:	19 f0       	breq	.+6      	; 0x11366 <mqtt_callback(char*, unsigned char*, unsigned int)+0x242>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
   11360:	0e 94 4d d2 	call	0x1a49a	; 0x1a49a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   11364:	18 2f       	mov	r17, r24
   11366:	c2 01       	movw	r24, r4
   11368:	0e 94 4d d2 	call	0x1a49a	; 0x1a49a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   1136c:	08 2f       	mov	r16, r24
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
   1136e:	d7 01       	movw	r26, r14
   11370:	8d 91       	ld	r24, X+
   11372:	9c 91       	ld	r25, X
   11374:	11 97       	sbiw	r26, 0x01	; 1
   11376:	87 30       	cpi	r24, 0x07	; 7
   11378:	91 05       	cpc	r25, r1
   1137a:	08 f0       	brcs	.+2      	; 0x1137e <mqtt_callback(char*, unsigned char*, unsigned int)+0x25a>
   1137c:	e8 c0       	rjmp	.+464    	; 0x1154e <mqtt_callback(char*, unsigned char*, unsigned int)+0x42a>
   1137e:	85 30       	cpi	r24, 0x05	; 5
   11380:	91 05       	cpc	r25, r1
   11382:	08 f0       	brcs	.+2      	; 0x11386 <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
   11384:	f2 c0       	rjmp	.+484    	; 0x1156a <mqtt_callback(char*, unsigned char*, unsigned int)+0x446>
   11386:	03 97       	sbiw	r24, 0x03	; 3
   11388:	08 f0       	brcs	.+2      	; 0x1138c <mqtt_callback(char*, unsigned char*, unsigned int)+0x268>
   1138a:	01 c1       	rjmp	.+514    	; 0x1158e <mqtt_callback(char*, unsigned char*, unsigned int)+0x46a>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   1138c:	60 e0       	ldi	r22, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   1138e:	29 96       	adiw	r28, 0x09	; 9
   11390:	6f af       	std	Y+63, r22	; 0x3f
   11392:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   11394:	2a 96       	adiw	r28, 0x0a	; 10
   11396:	0f af       	std	Y+63, r16	; 0x3f
   11398:	2a 97       	sbiw	r28, 0x0a	; 10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   1139a:	2b 96       	adiw	r28, 0x0b	; 11
   1139c:	1f af       	std	Y+63, r17	; 0x3f
   1139e:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   113a0:	2c 96       	adiw	r28, 0x0c	; 12
   113a2:	cf ae       	std	Y+63, r12	; 0x3f
   113a4:	2c 97       	sbiw	r28, 0x0c	; 12
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   113a6:	2d 96       	adiw	r28, 0x0d	; 13
   113a8:	df ae       	std	Y+63, r13	; 0x3f
   113aa:	2d 97       	sbiw	r28, 0x0d	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   113ac:	2e 96       	adiw	r28, 0x0e	; 14
   113ae:	3f ae       	std	Y+63, r3	; 0x3f
   113b0:	2e 97       	sbiw	r28, 0x0e	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2093
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
   113b2:	ce 01       	movw	r24, r28
   113b4:	88 5b       	subi	r24, 0xB8	; 184
   113b6:	9f 4f       	sbci	r25, 0xFF	; 255
   113b8:	0e 94 7b 5e 	call	0xbcf6	; 0xbcf6 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2096
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
   113bc:	64 ef       	ldi	r22, 0xF4	; 244
   113be:	7e e6       	ldi	r23, 0x6E	; 110
   113c0:	c5 01       	movw	r24, r10
   113c2:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2097
  strcat_P(str1, global_time_ntp);
   113c6:	68 e8       	ldi	r22, 0x88	; 136
   113c8:	7e e6       	ldi	r23, 0x6E	; 110
   113ca:	c5 01       	movw	r24, r10
   113cc:	0e 94 44 e5 	call	0x1ca88	; 0x1ca88 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2098
  if (strcmp(str1, topic) == 0)
   113d0:	b4 01       	movw	r22, r8
   113d2:	c5 01       	movw	r24, r10
   113d4:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   113d8:	89 2b       	or	r24, r25
   113da:	e9 f4       	brne	.+58     	; 0x11416 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2100
  {
    mqtt_process_message++;
   113dc:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   113e0:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   113e4:	01 96       	adiw	r24, 0x01	; 1
   113e6:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   113ea:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3198
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   113ee:	81 e0       	ldi	r24, 0x01	; 1
   113f0:	90 e0       	ldi	r25, 0x00	; 0
   113f2:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2101
  strcpy_P(str1, thermctl_header_in);
  strcat_P(str1, global_time_ntp);
  if (strcmp(str1, topic) == 0)
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
   113f6:	ae 01       	movw	r20, r28
   113f8:	44 5c       	subi	r20, 0xC4	; 196
   113fa:	5e 4f       	sbci	r21, 0xFE	; 254
   113fc:	68 2f       	mov	r22, r24
   113fe:	ce 01       	movw	r24, r28
   11400:	01 96       	adiw	r24, 0x01	; 1
   11402:	0e 94 92 b3 	call	0x16724	; 0x16724 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]>
   11406:	81 30       	cpi	r24, 0x01	; 1
   11408:	09 f0       	breq	.+2      	; 0x1140c <mqtt_callback(char*, unsigned char*, unsigned int)+0x2e8>
   1140a:	ee c0       	rjmp	.+476    	; 0x115e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4c4>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3141
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   1140c:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
   11410:	8d 7f       	andi	r24, 0xFD	; 253
   11412:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <selftest_data>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2107
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
   11416:	64 ef       	ldi	r22, 0xF4	; 244
   11418:	7e e6       	ldi	r23, 0x6E	; 110
   1141a:	c5 01       	movw	r24, r10
   1141c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2108
  strcat_P(str1, global_time_offset);
   11420:	61 e7       	ldi	r22, 0x71	; 113
   11422:	7e e6       	ldi	r23, 0x6E	; 110
   11424:	c5 01       	movw	r24, r10
   11426:	0e 94 44 e5 	call	0x1ca88	; 0x1ca88 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2109
  if (strcmp(str1, topic) == 0)
   1142a:	b4 01       	movw	r22, r8
   1142c:	c5 01       	movw	r24, r10
   1142e:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   11432:	89 2b       	or	r24, r25
   11434:	91 f4       	brne	.+36     	; 0x1145a <mqtt_callback(char*, unsigned char*, unsigned int)+0x336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2111
  {
    mqtt_process_message++;
   11436:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   1143a:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   1143e:	01 96       	adiw	r24, 0x01	; 1
   11440:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   11444:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2112
    time_set_offset(atoi(my_payload));
   11448:	85 e0       	ldi	r24, 0x05	; 5
   1144a:	99 e0       	ldi	r25, 0x09	; 9
   1144c:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3203
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(int8_t offset)
{
  EEPROM.write(time_offset, offset);
   11450:	68 2f       	mov	r22, r24
   11452:	81 e0       	ldi	r24, 0x01	; 1
   11454:	90 e0       	ldi	r25, 0x00	; 0
   11456:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2116
    mqtt_process_message++;
    time_set_offset(atoi(my_payload));
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
   1145a:	64 ef       	ldi	r22, 0xF4	; 244
   1145c:	7e e6       	ldi	r23, 0x6E	; 110
   1145e:	c5 01       	movw	r24, r10
   11460:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117
  strcat(str1, device.nazev);
   11464:	6f e2       	ldi	r22, 0x2F	; 47
   11466:	7e e0       	ldi	r23, 0x0E	; 14
   11468:	c5 01       	movw	r24, r10
   1146a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2118
  strcat(str1, "/tds/associate");
   1146e:	6f e5       	ldi	r22, 0x5F	; 95
   11470:	74 e0       	ldi	r23, 0x04	; 4
   11472:	c5 01       	movw	r24, r10
   11474:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2119
  if (strcmp(str1, topic) == 0)
   11478:	b4 01       	movw	r22, r8
   1147a:	c5 01       	movw	r24, r10
   1147c:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2056
  char tmp1[32];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
   11480:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2119
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
   11482:	89 2b       	or	r24, r25
   11484:	b1 f4       	brne	.+44     	; 0x114b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x38e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2121
  {
    mqtt_process_message++;
   11486:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   1148a:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   1148e:	01 96       	adiw	r24, 0x01	; 1
   11490:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   11494:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2122
    id = atoi(my_payload);
   11498:	85 e0       	ldi	r24, 0x05	; 5
   1149a:	99 e0       	ldi	r25, 0x09	; 9
   1149c:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   114a0:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2123
    if (tds_associate(id) == 255)
   114a2:	0e 94 3e 6b 	call	0xd67c	; 0xd67c <tds_associate(unsigned char)>
   114a6:	8f 3f       	cpi	r24, 0xFF	; 255
   114a8:	21 f4       	brne	.+8      	; 0x114b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x38e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2124
      log_error(&mqtt_client, "tds/associate full or bad id");
   114aa:	8e e6       	ldi	r24, 0x6E	; 110
   114ac:	94 e0       	ldi	r25, 0x04	; 4
   114ae:	0e 94 da c6 	call	0x18db4	; 0x18db4 <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2130
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
   114b2:	64 ef       	ldi	r22, 0xF4	; 244
   114b4:	7e e6       	ldi	r23, 0x6E	; 110
   114b6:	c5 01       	movw	r24, r10
   114b8:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2131
  strcat(str1, device.nazev);
   114bc:	6f e2       	ldi	r22, 0x2F	; 47
   114be:	7e e0       	ldi	r23, 0x0E	; 14
   114c0:	c5 01       	movw	r24, r10
   114c2:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2132
  strcat(str1, "/tds/set/");
   114c6:	6b e8       	ldi	r22, 0x8B	; 139
   114c8:	74 e0       	ldi	r23, 0x04	; 4
   114ca:	c5 01       	movw	r24, r10
   114cc:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2133
  if (strncmp(str1, topic, strlen(str1)) == 0)
   114d0:	f5 01       	movw	r30, r10
   114d2:	01 90       	ld	r0, Z+
   114d4:	00 20       	and	r0, r0
   114d6:	e9 f7       	brne	.-6      	; 0x114d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3ae>
   114d8:	31 97       	sbiw	r30, 0x01	; 1
   114da:	af 01       	movw	r20, r30
   114dc:	4a 19       	sub	r20, r10
   114de:	5b 09       	sbc	r21, r11
   114e0:	b4 01       	movw	r22, r8
   114e2:	c5 01       	movw	r24, r10
   114e4:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   114e8:	89 2b       	or	r24, r25
   114ea:	09 f0       	breq	.+2      	; 0x114ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x3ca>
   114ec:	01 c1       	rjmp	.+514    	; 0x116f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2135
  {
    mqtt_process_message++;
   114ee:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   114f2:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   114f6:	01 96       	adiw	r24, 0x01	; 1
   114f8:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   114fc:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2137
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   11500:	f5 01       	movw	r30, r10
   11502:	01 90       	ld	r0, Z+
   11504:	00 20       	and	r0, r0
   11506:	e9 f7       	brne	.-6      	; 0x11502 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3de>
   11508:	31 97       	sbiw	r30, 0x01	; 1
   1150a:	ea 19       	sub	r30, r10
   1150c:	fb 09       	sbc	r31, r11
   1150e:	9e 2f       	mov	r25, r30
   11510:	4e 2f       	mov	r20, r30
   11512:	84 2f       	mov	r24, r20
   11514:	89 1b       	sub	r24, r25
   11516:	24 2f       	mov	r18, r20
   11518:	30 e0       	ldi	r19, 0x00	; 0
   1151a:	d4 01       	movw	r26, r8
   1151c:	0d 90       	ld	r0, X+
   1151e:	00 20       	and	r0, r0
   11520:	e9 f7       	brne	.-6      	; 0x1151c <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f8>
   11522:	11 97       	sbiw	r26, 0x01	; 1
   11524:	a8 19       	sub	r26, r8
   11526:	b9 09       	sbc	r27, r9
   11528:	2a 17       	cp	r18, r26
   1152a:	3b 07       	cpc	r19, r27
   1152c:	08 f0       	brcs	.+2      	; 0x11530 <mqtt_callback(char*, unsigned char*, unsigned int)+0x40c>
   1152e:	60 c0       	rjmp	.+192    	; 0x115f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2139
    {
      str1[cnt] = topic[f];
   11530:	d5 01       	movw	r26, r10
   11532:	a8 0f       	add	r26, r24
   11534:	b1 1d       	adc	r27, r1
   11536:	28 0d       	add	r18, r8
   11538:	39 1d       	adc	r19, r9
   1153a:	f9 01       	movw	r30, r18
   1153c:	80 81       	ld	r24, Z
   1153e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2140
      str1[cnt + 1] = 0;
   11540:	11 96       	adiw	r26, 0x01	; 1
   11542:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2137
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   11544:	4f 5f       	subi	r20, 0xFF	; 255
   11546:	e5 cf       	rjmp	.-54     	; 0x11512 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3ee>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
   11548:	80 e9       	ldi	r24, 0x90	; 144
   1154a:	9f e0       	ldi	r25, 0x0F	; 15
   1154c:	b2 ce       	rjmp	.-668    	; 0x112b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18e>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   1154e:	87 30       	cpi	r24, 0x07	; 7
   11550:	91 05       	cpc	r25, r1
   11552:	b1 f0       	breq	.+44     	; 0x11580 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45c>
   11554:	0a 97       	sbiw	r24, 0x0a	; 10
   11556:	09 f0       	breq	.+2      	; 0x1155a <mqtt_callback(char*, unsigned char*, unsigned int)+0x436>
   11558:	19 cf       	rjmp	.-462    	; 0x1138c <mqtt_callback(char*, unsigned char*, unsigned int)+0x268>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   1155a:	f7 01       	movw	r30, r14
   1155c:	62 81       	ldd	r22, Z+2	; 0x02
   1155e:	73 81       	ldd	r23, Z+3	; 0x03
   11560:	84 81       	ldd	r24, Z+4	; 0x04
   11562:	95 81       	ldd	r25, Z+5	; 0x05
   11564:	0e 94 a6 f0 	call	0x1e14c	; 0x1e14c <__fixunssfsi>
   11568:	03 c0       	rjmp	.+6      	; 0x11570 <mqtt_callback(char*, unsigned char*, unsigned int)+0x44c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   1156a:	f7 01       	movw	r30, r14
   1156c:	62 81       	ldd	r22, Z+2	; 0x02
   1156e:	73 81       	ldd	r23, Z+3	; 0x03
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
   11570:	60 3d       	cpi	r22, 0xD0	; 208
   11572:	f7 e0       	ldi	r31, 0x07	; 7
   11574:	7f 07       	cpc	r23, r31
   11576:	08 f4       	brcc	.+2      	; 0x1157a <mqtt_callback(char*, unsigned char*, unsigned int)+0x456>
   11578:	0a cf       	rjmp	.-492    	; 0x1138e <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
   1157a:	60 5d       	subi	r22, 0xD0	; 208
   1157c:	77 40       	sbci	r23, 0x07	; 7
   1157e:	07 cf       	rjmp	.-498    	; 0x1138e <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   11580:	12 96       	adiw	r26, 0x02	; 2
   11582:	6d 91       	ld	r22, X+
   11584:	7c 91       	ld	r23, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   11586:	71 95       	neg	r23
   11588:	61 95       	neg	r22
   1158a:	71 09       	sbc	r23, r1
   1158c:	f1 cf       	rjmp	.-30     	; 0x11570 <mqtt_callback(char*, unsigned char*, unsigned int)+0x44c>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   1158e:	12 96       	adiw	r26, 0x02	; 2
   11590:	ed 91       	ld	r30, X+
   11592:	fc 91       	ld	r31, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   11594:	30 97       	sbiw	r30, 0x00	; 0
   11596:	09 f4       	brne	.+2      	; 0x1159a <mqtt_callback(char*, unsigned char*, unsigned int)+0x476>
   11598:	f9 ce       	rjmp	.-526    	; 0x1138c <mqtt_callback(char*, unsigned char*, unsigned int)+0x268>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   1159a:	80 81       	ld	r24, Z
_Z13mqtt_callbackPcPhj():
   1159c:	61 e0       	ldi	r22, 0x01	; 1
   1159e:	70 e0       	ldi	r23, 0x00	; 0
parseInteger():
   115a0:	84 37       	cpi	r24, 0x74	; 116
   115a2:	09 f4       	brne	.+2      	; 0x115a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x482>
   115a4:	f4 ce       	rjmp	.-536    	; 0x1138e <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   115a6:	8b 32       	cpi	r24, 0x2B	; 43
   115a8:	c9 f0       	breq	.+50     	; 0x115dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x4b8>
   115aa:	8d 32       	cpi	r24, 0x2D	; 45
   115ac:	c1 f4       	brne	.+48     	; 0x115de <mqtt_callback(char*, unsigned char*, unsigned int)+0x4ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   115ae:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   115b0:	81 e0       	ldi	r24, 0x01	; 1
parseInteger():
   115b2:	70 e0       	ldi	r23, 0x00	; 0
   115b4:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   115b6:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   115b8:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   115ba:	20 ed       	ldi	r18, 0xD0	; 208
   115bc:	29 0f       	add	r18, r25
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   115be:	2a 30       	cpi	r18, 0x0A	; 10
   115c0:	80 f4       	brcc	.+32     	; 0x115e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4be>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   115c2:	46 9f       	mul	r20, r22
   115c4:	90 01       	movw	r18, r0
   115c6:	47 9f       	mul	r20, r23
   115c8:	30 0d       	add	r19, r0
   115ca:	11 24       	eor	r1, r1
   115cc:	b9 01       	movw	r22, r18
   115ce:	60 53       	subi	r22, 0x30	; 48
   115d0:	71 09       	sbc	r23, r1
   115d2:	69 0f       	add	r22, r25
   115d4:	71 1d       	adc	r23, r1
   115d6:	97 fd       	sbrc	r25, 7
   115d8:	7a 95       	dec	r23
   115da:	ee cf       	rjmp	.-36     	; 0x115b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x494>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   115dc:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   115de:	80 e0       	ldi	r24, 0x00	; 0
   115e0:	e8 cf       	rjmp	.-48     	; 0x115b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x48e>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   115e2:	81 11       	cpse	r24, r1
   115e4:	d0 cf       	rjmp	.-96     	; 0x11586 <mqtt_callback(char*, unsigned char*, unsigned int)+0x462>
   115e6:	c4 cf       	rjmp	.-120    	; 0x11570 <mqtt_callback(char*, unsigned char*, unsigned int)+0x44c>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2104
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
   115e8:	81 e0       	ldi	r24, 0x01	; 1
   115ea:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <selftest_set_0(unsigned char)>
   115ee:	13 cf       	rjmp	.-474    	; 0x11416 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2144
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   115f0:	60 e9       	ldi	r22, 0x90	; 144
   115f2:	75 e0       	ldi	r23, 0x05	; 5
   115f4:	c5 01       	movw	r24, r10
   115f6:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
   115fa:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2143
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   115fc:	61 2c       	mov	r6, r1
tds_set_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:83
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
  strcpy(tds.name, name);
   115fe:	e8 e4       	ldi	r30, 0x48	; 72
   11600:	ce 2e       	mov	r12, r30
   11602:	d1 2c       	mov	r13, r1
   11604:	cc 0e       	add	r12, r28
   11606:	dd 1e       	adc	r13, r29
   11608:	fc e0       	ldi	r31, 0x0C	; 12
   1160a:	cf 0e       	add	r12, r31
   1160c:	d1 1c       	adc	r13, r1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2145
    pch = strtok (str1, "/");
    while (pch != NULL)
   1160e:	01 15       	cp	r16, r1
   11610:	11 05       	cpc	r17, r1
   11612:	09 f4       	brne	.+2      	; 0x11616 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f2>
   11614:	6d c0       	rjmp	.+218    	; 0x116f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2147
    {
      if (cnt == 0) id = atoi(pch);
   11616:	61 10       	cpse	r6, r1
   11618:	0d c0       	rjmp	.+26     	; 0x11634 <mqtt_callback(char*, unsigned char*, unsigned int)+0x510>
   1161a:	c8 01       	movw	r24, r16
   1161c:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11620:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2148
      if (id < HW_ONEWIRE_MAXROMS)
   11622:	25 e0       	ldi	r18, 0x05	; 5
   11624:	28 17       	cp	r18, r24
   11626:	08 f0       	brcs	.+2      	; 0x1162a <mqtt_callback(char*, unsigned char*, unsigned int)+0x506>
   11628:	5a c0       	rjmp	.+180    	; 0x116de <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2156
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
   1162a:	8c ed       	ldi	r24, 0xDC	; 220
   1162c:	94 e0       	ldi	r25, 0x04	; 4
   1162e:	0e 94 da c6 	call	0x18db4	; 0x18db4 <log_error(PubSubClient*, char*) [clone .constprop.125]>
   11632:	55 c0       	rjmp	.+170    	; 0x116de <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2148
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
   11634:	85 e0       	ldi	r24, 0x05	; 5
   11636:	87 15       	cp	r24, r7
   11638:	c0 f3       	brcs	.-16     	; 0x1162a <mqtt_callback(char*, unsigned char*, unsigned int)+0x506>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2150
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
   1163a:	91 e0       	ldi	r25, 0x01	; 1
   1163c:	69 12       	cpse	r6, r25
   1163e:	4f c0       	rjmp	.+158    	; 0x116de <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
   11640:	6a ee       	ldi	r22, 0xEA	; 234
   11642:	73 e0       	ldi	r23, 0x03	; 3
   11644:	c8 01       	movw	r24, r16
   11646:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   1164a:	89 2b       	or	r24, r25
   1164c:	89 f4       	brne	.+34     	; 0x11670 <mqtt_callback(char*, unsigned char*, unsigned int)+0x54c>
tds_set_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
   1164e:	be 01       	movw	r22, r28
   11650:	68 5b       	subi	r22, 0xB8	; 184
   11652:	7f 4f       	sbci	r23, 0xFF	; 255
   11654:	87 2d       	mov	r24, r7
   11656:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
   1165a:	65 e0       	ldi	r22, 0x05	; 5
   1165c:	79 e0       	ldi	r23, 0x09	; 9
   1165e:	c6 01       	movw	r24, r12
   11660:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
   11664:	be 01       	movw	r22, r28
   11666:	68 5b       	subi	r22, 0xB8	; 184
   11668:	7f 4f       	sbci	r23, 0xFF	; 255
   1166a:	87 2d       	mov	r24, r7
   1166c:	0e 94 b3 63 	call	0xc766	; 0xc766 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2151
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
   11670:	69 e1       	ldi	r22, 0x19	; 25
   11672:	78 e0       	ldi	r23, 0x08	; 8
   11674:	c8 01       	movw	r24, r16
   11676:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   1167a:	89 2b       	or	r24, r25
   1167c:	a9 f4       	brne	.+42     	; 0x116a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x584>
   1167e:	85 e0       	ldi	r24, 0x05	; 5
   11680:	99 e0       	ldi	r25, 0x09	; 9
   11682:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11686:	7c 01       	movw	r14, r24
tds_set_offset():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
   11688:	be 01       	movw	r22, r28
   1168a:	68 5b       	subi	r22, 0xB8	; 184
   1168c:	7f 4f       	sbci	r23, 0xFF	; 255
   1168e:	87 2d       	mov	r24, r7
   11690:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
   11694:	64 96       	adiw	r28, 0x14	; 20
   11696:	ff ae       	std	Y+63, r15	; 0x3f
   11698:	ee ae       	std	Y+62, r14	; 0x3e
   1169a:	64 97       	sbiw	r28, 0x14	; 20
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
   1169c:	be 01       	movw	r22, r28
   1169e:	68 5b       	subi	r22, 0xB8	; 184
   116a0:	7f 4f       	sbci	r23, 0xFF	; 255
   116a2:	87 2d       	mov	r24, r7
   116a4:	0e 94 b3 63 	call	0xc766	; 0xc766 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2152
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
   116a8:	60 e9       	ldi	r22, 0x90	; 144
   116aa:	76 e0       	ldi	r23, 0x06	; 6
   116ac:	c8 01       	movw	r24, r16
   116ae:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   116b2:	89 2b       	or	r24, r25
   116b4:	a1 f4       	brne	.+40     	; 0x116de <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
   116b6:	85 e0       	ldi	r24, 0x05	; 5
   116b8:	99 e0       	ldi	r25, 0x09	; 9
   116ba:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   116be:	18 2f       	mov	r17, r24
tds_set_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
   116c0:	be 01       	movw	r22, r28
   116c2:	68 5b       	subi	r22, 0xB8	; 184
   116c4:	7f 4f       	sbci	r23, 0xFF	; 255
   116c6:	87 2d       	mov	r24, r7
   116c8:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2152
   116cc:	6d 96       	adiw	r28, 0x1d	; 29
   116ce:	1f af       	std	Y+63, r17	; 0x3f
   116d0:	6d 97       	sbiw	r28, 0x1d	; 29
tds_set_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:108
  tds.period = period;
  set_tds18s20(idx, &tds);
   116d2:	be 01       	movw	r22, r28
   116d4:	68 5b       	subi	r22, 0xB8	; 184
   116d6:	7f 4f       	sbci	r23, 0xFF	; 255
   116d8:	87 2d       	mov	r24, r7
   116da:	0e 94 b3 63 	call	0xc766	; 0xc766 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2158
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
   116de:	60 e9       	ldi	r22, 0x90	; 144
   116e0:	75 e0       	ldi	r23, 0x05	; 5
   116e2:	90 e0       	ldi	r25, 0x00	; 0
   116e4:	80 e0       	ldi	r24, 0x00	; 0
   116e6:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
   116ea:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2159
      cnt++;
   116ec:	63 94       	inc	r6
   116ee:	8f cf       	rjmp	.-226    	; 0x1160e <mqtt_callback(char*, unsigned char*, unsigned int)+0x4ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2164
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
   116f0:	64 ef       	ldi	r22, 0xF4	; 244
   116f2:	7e e6       	ldi	r23, 0x6E	; 110
   116f4:	c5 01       	movw	r24, r10
   116f6:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2165
  strcat(str1, device.nazev);
   116fa:	6f e2       	ldi	r22, 0x2F	; 47
   116fc:	7e e0       	ldi	r23, 0x0E	; 14
   116fe:	c5 01       	movw	r24, r10
   11700:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2166
  strcat(str1, "/tds/clear");
   11704:	65 e9       	ldi	r22, 0x95	; 149
   11706:	74 e0       	ldi	r23, 0x04	; 4
   11708:	c5 01       	movw	r24, r10
   1170a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2167
  if (strncmp(str1, topic, strlen(str1)) == 0)
   1170e:	f5 01       	movw	r30, r10
   11710:	01 90       	ld	r0, Z+
   11712:	00 20       	and	r0, r0
   11714:	e9 f7       	brne	.-6      	; 0x11710 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ec>
   11716:	31 97       	sbiw	r30, 0x01	; 1
   11718:	af 01       	movw	r20, r30
   1171a:	4a 19       	sub	r20, r10
   1171c:	5b 09       	sbc	r21, r11
   1171e:	b4 01       	movw	r22, r8
   11720:	c5 01       	movw	r24, r10
   11722:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   11726:	89 2b       	or	r24, r25
   11728:	a1 f4       	brne	.+40     	; 0x11752 <mqtt_callback(char*, unsigned char*, unsigned int)+0x62e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2169
  {
    mqtt_process_message++;
   1172a:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   1172e:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   11732:	01 96       	adiw	r24, 0x01	; 1
   11734:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   11738:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2170
    id = atoi(my_payload);
   1173c:	85 e0       	ldi	r24, 0x05	; 5
   1173e:	99 e0       	ldi	r25, 0x09	; 9
   11740:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11744:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2171
    if (id < HW_ONEWIRE_MAXROMS)
   11746:	a5 e0       	ldi	r26, 0x05	; 5
   11748:	a8 17       	cp	r26, r24
   1174a:	08 f4       	brcc	.+2      	; 0x1174e <mqtt_callback(char*, unsigned char*, unsigned int)+0x62a>
   1174c:	83 c0       	rjmp	.+262    	; 0x11854 <mqtt_callback(char*, unsigned char*, unsigned int)+0x730>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2172
      tds_set_clear(id);
   1174e:	0e 94 15 6c 	call	0xd82a	; 0xd82a <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2181
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///
  ///
  //// thermctl-in/XXXXX/rtds-control/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
   11752:	64 ef       	ldi	r22, 0xF4	; 244
   11754:	7e e6       	ldi	r23, 0x6E	; 110
   11756:	c5 01       	movw	r24, r10
   11758:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2182
  strcat(str1, device.nazev);
   1175c:	6f e2       	ldi	r22, 0x2F	; 47
   1175e:	7e e0       	ldi	r23, 0x0E	; 14
   11760:	c5 01       	movw	r24, r10
   11762:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2183
  strcat(str1, "/rtds-control/register");
   11766:	61 eb       	ldi	r22, 0xB1	; 177
   11768:	74 e0       	ldi	r23, 0x04	; 4
   1176a:	c5 01       	movw	r24, r10
   1176c:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2184
  if (strncmp(str1, topic, strlen(str1)) == 0)
   11770:	f5 01       	movw	r30, r10
   11772:	01 90       	ld	r0, Z+
   11774:	00 20       	and	r0, r0
   11776:	e9 f7       	brne	.-6      	; 0x11772 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64e>
   11778:	31 97       	sbiw	r30, 0x01	; 1
   1177a:	af 01       	movw	r20, r30
   1177c:	4a 19       	sub	r20, r10
   1177e:	5b 09       	sbc	r21, r11
   11780:	b4 01       	movw	r22, r8
   11782:	c5 01       	movw	r24, r10
   11784:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   11788:	89 2b       	or	r24, r25
   1178a:	d1 f4       	brne	.+52     	; 0x117c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2186
  {
    mqtt_process_message++;
   1178c:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   11790:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   11794:	01 96       	adiw	r24, 0x01	; 1
   11796:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   1179a:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2187
    if (remote_tds_name_exist(my_payload) == 255)
   1179e:	85 e0       	ldi	r24, 0x05	; 5
   117a0:	99 e0       	ldi	r25, 0x09	; 9
   117a2:	0e 94 df 73 	call	0xe7be	; 0xe7be <remote_tds_name_exist(char*)>
   117a6:	8f 3f       	cpi	r24, 0xFF	; 255
   117a8:	59 f4       	brne	.+22     	; 0x117c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2189
    {
      id = remote_tds_find_free();
   117aa:	0e 94 5f 6f 	call	0xdebe	; 0xdebe <remote_tds_find_free()>
   117ae:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2190
      remote_tds_set_complete(id, 1, my_payload);
   117b0:	45 e0       	ldi	r20, 0x05	; 5
   117b2:	59 e0       	ldi	r21, 0x09	; 9
   117b4:	61 e0       	ldi	r22, 0x01	; 1
   117b6:	0e 94 2f 66 	call	0xcc5e	; 0xcc5e <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2191
      remote_tds_subscibe_topic(id);
   117ba:	87 2d       	mov	r24, r7
   117bc:	0e 94 3f 74 	call	0xe87e	; 0xe87e <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2197
    }
    ///TODO - vratit ze jiz existuje
  }
  ///
  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
   117c0:	64 ef       	ldi	r22, 0xF4	; 244
   117c2:	7e e6       	ldi	r23, 0x6E	; 110
   117c4:	c5 01       	movw	r24, r10
   117c6:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2198
  strcat(str1, device.nazev);
   117ca:	6f e2       	ldi	r22, 0x2F	; 47
   117cc:	7e e0       	ldi	r23, 0x0E	; 14
   117ce:	c5 01       	movw	r24, r10
   117d0:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2199
  strcat(str1, "/rtds-control/set/");
   117d4:	68 ec       	ldi	r22, 0xC8	; 200
   117d6:	74 e0       	ldi	r23, 0x04	; 4
   117d8:	c5 01       	movw	r24, r10
   117da:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2200
  if (strncmp(str1, topic, strlen(str1)) == 0)
   117de:	f5 01       	movw	r30, r10
   117e0:	01 90       	ld	r0, Z+
   117e2:	00 20       	and	r0, r0
   117e4:	e9 f7       	brne	.-6      	; 0x117e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6bc>
   117e6:	31 97       	sbiw	r30, 0x01	; 1
   117e8:	af 01       	movw	r20, r30
   117ea:	4a 19       	sub	r20, r10
   117ec:	5b 09       	sbc	r21, r11
   117ee:	b4 01       	movw	r22, r8
   117f0:	c5 01       	movw	r24, r10
   117f2:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   117f6:	89 2b       	or	r24, r25
   117f8:	09 f0       	breq	.+2      	; 0x117fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x6d8>
   117fa:	6a c0       	rjmp	.+212    	; 0x118d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2202
  {
    mqtt_process_message++;
   117fc:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   11800:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   11804:	01 96       	adiw	r24, 0x01	; 1
   11806:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   1180a:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2204
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   1180e:	f5 01       	movw	r30, r10
   11810:	01 90       	ld	r0, Z+
   11812:	00 20       	and	r0, r0
   11814:	e9 f7       	brne	.-6      	; 0x11810 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6ec>
   11816:	31 97       	sbiw	r30, 0x01	; 1
   11818:	ea 19       	sub	r30, r10
   1181a:	fb 09       	sbc	r31, r11
   1181c:	9e 2f       	mov	r25, r30
   1181e:	4e 2f       	mov	r20, r30
   11820:	84 2f       	mov	r24, r20
   11822:	89 1b       	sub	r24, r25
   11824:	24 2f       	mov	r18, r20
   11826:	30 e0       	ldi	r19, 0x00	; 0
   11828:	d4 01       	movw	r26, r8
   1182a:	0d 90       	ld	r0, X+
   1182c:	00 20       	and	r0, r0
   1182e:	e9 f7       	brne	.-6      	; 0x1182a <mqtt_callback(char*, unsigned char*, unsigned int)+0x706>
   11830:	11 97       	sbiw	r26, 0x01	; 1
   11832:	a8 19       	sub	r26, r8
   11834:	b9 09       	sbc	r27, r9
   11836:	2a 17       	cp	r18, r26
   11838:	3b 07       	cpc	r19, r27
   1183a:	88 f4       	brcc	.+34     	; 0x1185e <mqtt_callback(char*, unsigned char*, unsigned int)+0x73a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2206
    {
      str1[cnt] = topic[f];
   1183c:	d5 01       	movw	r26, r10
   1183e:	a8 0f       	add	r26, r24
   11840:	b1 1d       	adc	r27, r1
   11842:	28 0d       	add	r18, r8
   11844:	39 1d       	adc	r19, r9
   11846:	f9 01       	movw	r30, r18
   11848:	80 81       	ld	r24, Z
   1184a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2207
      str1[cnt + 1] = 0;
   1184c:	11 96       	adiw	r26, 0x01	; 1
   1184e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2204
  strcat(str1, "/rtds-control/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   11850:	4f 5f       	subi	r20, 0xFF	; 255
   11852:	e6 cf       	rjmp	.-52     	; 0x11820 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2174
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
   11854:	80 ea       	ldi	r24, 0xA0	; 160
   11856:	94 e0       	ldi	r25, 0x04	; 4
   11858:	0e 94 da c6 	call	0x18db4	; 0x18db4 <log_error(PubSubClient*, char*) [clone .constprop.125]>
   1185c:	7a cf       	rjmp	.-268    	; 0x11752 <mqtt_callback(char*, unsigned char*, unsigned int)+0x62e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2211
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   1185e:	60 e9       	ldi	r22, 0x90	; 144
   11860:	75 e0       	ldi	r23, 0x05	; 5
   11862:	c5 01       	movw	r24, r10
   11864:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2210
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   11868:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2212
    pch = strtok (str1, "/");
    while (pch != NULL)
   1186a:	00 97       	sbiw	r24, 0x00	; 0
   1186c:	89 f1       	breq	.+98     	; 0x118d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2214
    {
      if (cnt == 0) id = atoi(pch);
   1186e:	11 11       	cpse	r17, r1
   11870:	0b c0       	rjmp	.+22     	; 0x11888 <mqtt_callback(char*, unsigned char*, unsigned int)+0x764>
   11872:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11876:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2228
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
   11878:	60 e9       	ldi	r22, 0x90	; 144
   1187a:	75 e0       	ldi	r23, 0x05	; 5
   1187c:	90 e0       	ldi	r25, 0x00	; 0
   1187e:	80 e0       	ldi	r24, 0x00	; 0
   11880:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2229
      cnt++;
   11884:	1f 5f       	subi	r17, 0xFF	; 255
   11886:	f1 cf       	rjmp	.-30     	; 0x1186a <mqtt_callback(char*, unsigned char*, unsigned int)+0x746>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2215
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
   11888:	11 30       	cpi	r17, 0x01	; 1
   1188a:	b1 f7       	brne	.-20     	; 0x11878 <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
   1188c:	6a ee       	ldi	r22, 0xEA	; 234
   1188e:	73 e0       	ldi	r23, 0x03	; 3
   11890:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   11894:	89 2b       	or	r24, r25
   11896:	81 f7       	brne	.-32     	; 0x11878 <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2217
      {
        remote_tds_get_active(id, &active);
   11898:	be 01       	movw	r22, r28
   1189a:	6a 5b       	subi	r22, 0xBA	; 186
   1189c:	7e 4f       	sbci	r23, 0xFE	; 254
   1189e:	87 2d       	mov	r24, r7
   118a0:	0e 94 2f 6f 	call	0xde5e	; 0xde5e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2218
        if (active == 0)
   118a4:	ca 5b       	subi	r28, 0xBA	; 186
   118a6:	de 4f       	sbci	r29, 0xFE	; 254
   118a8:	88 81       	ld	r24, Y
   118aa:	c6 54       	subi	r28, 0x46	; 70
   118ac:	d1 40       	sbci	r29, 0x01	; 1
   118ae:	81 11       	cpse	r24, r1
   118b0:	0a c0       	rjmp	.+20     	; 0x118c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2220
        {
          remote_tds_set_complete(id, 1, my_payload);
   118b2:	45 e0       	ldi	r20, 0x05	; 5
   118b4:	59 e0       	ldi	r21, 0x09	; 9
   118b6:	61 e0       	ldi	r22, 0x01	; 1
   118b8:	87 2d       	mov	r24, r7
   118ba:	0e 94 2f 66 	call	0xcc5e	; 0xcc5e <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2221
          remote_tds_subscibe_topic(id);
   118be:	87 2d       	mov	r24, r7
   118c0:	0e 94 3f 74 	call	0xe87e	; 0xe87e <remote_tds_subscibe_topic(unsigned char)>
   118c4:	d9 cf       	rjmp	.-78     	; 0x11878 <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2225
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
   118c6:	8b ed       	ldi	r24, 0xDB	; 219
   118c8:	94 e0       	ldi	r25, 0x04	; 4
   118ca:	0e 94 da c6 	call	0x18db4	; 0x18db4 <log_error(PubSubClient*, char*) [clone .constprop.125]>
   118ce:	d4 cf       	rjmp	.-88     	; 0x11878 <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2234
      cnt++;
    }
  }
  ///
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
   118d0:	64 ef       	ldi	r22, 0xF4	; 244
   118d2:	7e e6       	ldi	r23, 0x6E	; 110
   118d4:	c5 01       	movw	r24, r10
   118d6:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2235
  strcat(str1, device.nazev);
   118da:	6f e2       	ldi	r22, 0x2F	; 47
   118dc:	7e e0       	ldi	r23, 0x0E	; 14
   118de:	c5 01       	movw	r24, r10
   118e0:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2236
  strcat(str1, "/rtds-control/clear");
   118e4:	6b ee       	ldi	r22, 0xEB	; 235
   118e6:	74 e0       	ldi	r23, 0x04	; 4
   118e8:	c5 01       	movw	r24, r10
   118ea:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2237
  if (strncmp(str1, topic, strlen(str1)) == 0)
   118ee:	f5 01       	movw	r30, r10
   118f0:	01 90       	ld	r0, Z+
   118f2:	00 20       	and	r0, r0
   118f4:	e9 f7       	brne	.-6      	; 0x118f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7cc>
   118f6:	31 97       	sbiw	r30, 0x01	; 1
   118f8:	af 01       	movw	r20, r30
   118fa:	4a 19       	sub	r20, r10
   118fc:	5b 09       	sbc	r21, r11
   118fe:	b4 01       	movw	r22, r8
   11900:	c5 01       	movw	r24, r10
   11902:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   11906:	89 2b       	or	r24, r25
   11908:	09 f0       	breq	.+2      	; 0x1190c <mqtt_callback(char*, unsigned char*, unsigned int)+0x7e8>
   1190a:	74 c0       	rjmp	.+232    	; 0x119f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2239
  {
    mqtt_process_message++;
   1190c:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   11910:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   11914:	01 96       	adiw	r24, 0x01	; 1
   11916:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   1191a:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2240
    id = atoi(my_payload);
   1191e:	85 e0       	ldi	r24, 0x05	; 5
   11920:	99 e0       	ldi	r25, 0x09	; 9
   11922:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11926:	78 2e       	mov	r7, r24
remote_tds_unsubscibe_topic():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1862
/// funkce pro zruseni odebirani topicu vzdalenych cidel
void remote_tds_unsubscibe_topic(uint8_t idx)
{
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
   11928:	c8 5f       	subi	r28, 0xF8	; 248
   1192a:	de 4f       	sbci	r29, 0xFE	; 254
   1192c:	18 82       	st	Y, r1
   1192e:	c8 50       	subi	r28, 0x08	; 8
   11930:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1863
  remote_tds_get_complete(idx, &active, tmp1);
   11932:	ae 01       	movw	r20, r28
   11934:	48 57       	subi	r20, 0x78	; 120
   11936:	5f 4f       	sbci	r21, 0xFF	; 255
   11938:	be 01       	movw	r22, r28
   1193a:	68 5f       	subi	r22, 0xF8	; 248
   1193c:	7e 4f       	sbci	r23, 0xFE	; 254
   1193e:	0e 94 b3 6f 	call	0xdf66	; 0xdf66 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1864
  if (active == 1)
   11942:	c8 5f       	subi	r28, 0xF8	; 248
   11944:	de 4f       	sbci	r29, 0xFE	; 254
   11946:	88 81       	ld	r24, Y
   11948:	c8 50       	subi	r28, 0x08	; 8
   1194a:	d1 40       	sbci	r29, 0x01	; 1
   1194c:	81 30       	cpi	r24, 0x01	; 1
   1194e:	09 f0       	breq	.+2      	; 0x11952 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82e>
   11950:	4e c0       	rjmp	.+156    	; 0x119ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1866
  {
    strcpy_P(tmp2, new_text_slash_rtds_slash);
   11952:	8e 01       	movw	r16, r28
   11954:	08 5b       	subi	r16, 0xB8	; 184
   11956:	1f 4f       	sbci	r17, 0xFF	; 255
   11958:	6a e6       	ldi	r22, 0x6A	; 106
   1195a:	7e e6       	ldi	r23, 0x6E	; 110
   1195c:	c8 01       	movw	r24, r16
   1195e:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1867
    strcat(tmp2, tmp1);
   11962:	be 01       	movw	r22, r28
   11964:	68 57       	subi	r22, 0x78	; 120
   11966:	7f 4f       	sbci	r23, 0xFF	; 255
   11968:	c8 01       	movw	r24, r16
   1196a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1868
    strcat(tmp2, "/#");
   1196e:	60 ef       	ldi	r22, 0xF0	; 240
   11970:	76 e0       	ldi	r23, 0x06	; 6
   11972:	c8 01       	movw	r24, r16
   11974:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
unsubscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:497
    }
    return false;
}

boolean PubSubClient::unsubscribe(const char* topic) {
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   11978:	d8 01       	movw	r26, r16
   1197a:	0d 90       	ld	r0, X+
   1197c:	00 20       	and	r0, r0
   1197e:	e9 f7       	brne	.-6      	; 0x1197a <mqtt_callback(char*, unsigned char*, unsigned int)+0x856>
   11980:	cd 01       	movw	r24, r26
   11982:	80 1b       	sub	r24, r16
   11984:	91 0b       	sbc	r25, r17
   11986:	08 96       	adiw	r24, 0x08	; 8
   11988:	81 30       	cpi	r24, 0x01	; 1
   1198a:	92 40       	sbci	r25, 0x02	; 2
   1198c:	80 f5       	brcc	.+96     	; 0x119ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:501
        // Too long
        return false;
    }
    if (connected()) {
   1198e:	8f e2       	ldi	r24, 0x2F	; 47
   11990:	90 e1       	ldi	r25, 0x10	; 16
   11992:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <PubSubClient::connected()>
   11996:	88 23       	and	r24, r24
   11998:	51 f1       	breq	.+84     	; 0x119ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:503
        uint16_t length = 5;
        nextMsgId++;
   1199a:	80 91 31 12 	lds	r24, 0x1231	; 0x801231 <mqtt_client+0x202>
   1199e:	90 91 32 12 	lds	r25, 0x1232	; 0x801232 <mqtt_client+0x203>
   119a2:	01 96       	adiw	r24, 0x01	; 1
   119a4:	90 93 32 12 	sts	0x1232, r25	; 0x801232 <mqtt_client+0x203>
   119a8:	80 93 31 12 	sts	0x1231, r24	; 0x801231 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:504
        if (nextMsgId == 0) {
   119ac:	89 2b       	or	r24, r25
   119ae:	31 f4       	brne	.+12     	; 0x119bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x898>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:505
            nextMsgId = 1;
   119b0:	81 e0       	ldi	r24, 0x01	; 1
   119b2:	90 e0       	ldi	r25, 0x00	; 0
   119b4:	90 93 32 12 	sts	0x1232, r25	; 0x801232 <mqtt_client+0x203>
   119b8:	80 93 31 12 	sts	0x1231, r24	; 0x801231 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:507
        }
        buffer[length++] = (nextMsgId >> 8);
   119bc:	80 91 31 12 	lds	r24, 0x1231	; 0x801231 <mqtt_client+0x202>
   119c0:	90 91 32 12 	lds	r25, 0x1232	; 0x801232 <mqtt_client+0x203>
   119c4:	90 93 36 10 	sts	0x1036, r25	; 0x801036 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:508
        buffer[length++] = (nextMsgId & 0xFF);
   119c8:	80 93 37 10 	sts	0x1037, r24	; 0x801037 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:509
        length = writeString(topic, buffer,length);
   119cc:	47 e0       	ldi	r20, 0x07	; 7
   119ce:	50 e0       	ldi	r21, 0x00	; 0
   119d0:	61 e3       	ldi	r22, 0x31	; 49
   119d2:	70 e1       	ldi	r23, 0x10	; 16
   119d4:	c8 01       	movw	r24, r16
   119d6:	0e 94 64 ae 	call	0x15cc8	; 0x15cc8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:510
        return write(MQTTUNSUBSCRIBE|MQTTQOS1,buffer,length-5);
   119da:	9c 01       	movw	r18, r24
   119dc:	25 50       	subi	r18, 0x05	; 5
   119de:	31 09       	sbc	r19, r1
   119e0:	41 e3       	ldi	r20, 0x31	; 49
   119e2:	50 e1       	ldi	r21, 0x10	; 16
   119e4:	62 ea       	ldi	r22, 0xA2	; 162
   119e6:	8f e2       	ldi	r24, 0x2F	; 47
   119e8:	90 e1       	ldi	r25, 0x10	; 16
   119ea:	0e 94 b5 5f 	call	0xbf6a	; 0xbf6a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2243
  {
    mqtt_process_message++;
    id = atoi(my_payload);
    remote_tds_unsubscibe_topic(id);
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
   119ee:	87 2d       	mov	r24, r7
   119f0:	0e 94 46 66 	call	0xcc8c	; 0xcc8c <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2247
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
   119f4:	64 ef       	ldi	r22, 0xF4	; 244
   119f6:	7e e6       	ldi	r23, 0x6E	; 110
   119f8:	c5 01       	movw	r24, r10
   119fa:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2248
  strcat(str1, device.nazev);
   119fe:	6f e2       	ldi	r22, 0x2F	; 47
   11a00:	7e e0       	ldi	r23, 0x0E	; 14
   11a02:	c5 01       	movw	r24, r10
   11a04:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2249
  strcat(str1, "/rtds-control/get");
   11a08:	6f ef       	ldi	r22, 0xFF	; 255
   11a0a:	74 e0       	ldi	r23, 0x04	; 4
   11a0c:	c5 01       	movw	r24, r10
   11a0e:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2250
  if (strncmp(str1, topic, strlen(str1)) == 0)
   11a12:	f5 01       	movw	r30, r10
   11a14:	01 90       	ld	r0, Z+
   11a16:	00 20       	and	r0, r0
   11a18:	e9 f7       	brne	.-6      	; 0x11a14 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8f0>
   11a1a:	31 97       	sbiw	r30, 0x01	; 1
   11a1c:	af 01       	movw	r20, r30
   11a1e:	4a 19       	sub	r20, r10
   11a20:	5b 09       	sbc	r21, r11
   11a22:	b4 01       	movw	r22, r8
   11a24:	c5 01       	movw	r24, r10
   11a26:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   11a2a:	89 2b       	or	r24, r25
   11a2c:	11 f4       	brne	.+4      	; 0x11a32 <mqtt_callback(char*, unsigned char*, unsigned int)+0x90e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2252
  {
    send_mqtt_remote_tds_status();
   11a2e:	0e 94 49 73 	call	0xe692	; 0xe692 <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2256
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy_P(str1, new_text_slash_rtds_slash); /// /rtds/
   11a32:	6a e6       	ldi	r22, 0x6A	; 106
   11a34:	7e e6       	ldi	r23, 0x6E	; 110
   11a36:	c5 01       	movw	r24, r10
   11a38:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2257
  if (strncmp(str1, topic, strlen(str1)) == 0)
   11a3c:	f5 01       	movw	r30, r10
   11a3e:	01 90       	ld	r0, Z+
   11a40:	00 20       	and	r0, r0
   11a42:	e9 f7       	brne	.-6      	; 0x11a3e <mqtt_callback(char*, unsigned char*, unsigned int)+0x91a>
   11a44:	31 97       	sbiw	r30, 0x01	; 1
   11a46:	af 01       	movw	r20, r30
   11a48:	4a 19       	sub	r20, r10
   11a4a:	5b 09       	sbc	r21, r11
   11a4c:	b4 01       	movw	r22, r8
   11a4e:	c5 01       	movw	r24, r10
   11a50:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   11a54:	89 2b       	or	r24, r25
   11a56:	09 f0       	breq	.+2      	; 0x11a5a <mqtt_callback(char*, unsigned char*, unsigned int)+0x936>
   11a58:	9a c0       	rjmp	.+308    	; 0x11b8e <mqtt_callback(char*, unsigned char*, unsigned int)+0xa6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2259
  {
    mqtt_process_message++;
   11a5a:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   11a5e:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   11a62:	01 96       	adiw	r24, 0x01	; 1
   11a64:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   11a68:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2261
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   11a6c:	f5 01       	movw	r30, r10
   11a6e:	01 90       	ld	r0, Z+
   11a70:	00 20       	and	r0, r0
   11a72:	e9 f7       	brne	.-6      	; 0x11a6e <mqtt_callback(char*, unsigned char*, unsigned int)+0x94a>
   11a74:	31 97       	sbiw	r30, 0x01	; 1
   11a76:	ea 19       	sub	r30, r10
   11a78:	fb 09       	sbc	r31, r11
   11a7a:	9e 2f       	mov	r25, r30
   11a7c:	4e 2f       	mov	r20, r30
   11a7e:	84 2f       	mov	r24, r20
   11a80:	89 1b       	sub	r24, r25
   11a82:	24 2f       	mov	r18, r20
   11a84:	30 e0       	ldi	r19, 0x00	; 0
   11a86:	d4 01       	movw	r26, r8
   11a88:	0d 90       	ld	r0, X+
   11a8a:	00 20       	and	r0, r0
   11a8c:	e9 f7       	brne	.-6      	; 0x11a88 <mqtt_callback(char*, unsigned char*, unsigned int)+0x964>
   11a8e:	11 97       	sbiw	r26, 0x01	; 1
   11a90:	a8 19       	sub	r26, r8
   11a92:	b9 09       	sbc	r27, r9
   11a94:	2a 17       	cp	r18, r26
   11a96:	3b 07       	cpc	r19, r27
   11a98:	60 f4       	brcc	.+24     	; 0x11ab2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x98e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2263
    {
      str1[cnt] = topic[f];
   11a9a:	d5 01       	movw	r26, r10
   11a9c:	a8 0f       	add	r26, r24
   11a9e:	b1 1d       	adc	r27, r1
   11aa0:	28 0d       	add	r18, r8
   11aa2:	39 1d       	adc	r19, r9
   11aa4:	f9 01       	movw	r30, r18
   11aa6:	80 81       	ld	r24, Z
   11aa8:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2264
      str1[cnt + 1] = 0;
   11aaa:	11 96       	adiw	r26, 0x01	; 1
   11aac:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2261
  strcpy_P(str1, new_text_slash_rtds_slash); /// /rtds/
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   11aae:	4f 5f       	subi	r20, 0xFF	; 255
   11ab0:	e6 cf       	rjmp	.-52     	; 0x11a7e <mqtt_callback(char*, unsigned char*, unsigned int)+0x95a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2268
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   11ab2:	60 e9       	ldi	r22, 0x90	; 144
   11ab4:	75 e0       	ldi	r23, 0x05	; 5
   11ab6:	c5 01       	movw	r24, r10
   11ab8:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2267
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   11abc:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2269
    pch = strtok (str1, "/");
    while (pch != NULL)
   11abe:	00 97       	sbiw	r24, 0x00	; 0
   11ac0:	b9 f0       	breq	.+46     	; 0x11af0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2271
    {
      if (cnt == 0)
   11ac2:	11 11       	cpse	r17, r1
   11ac4:	0e c0       	rjmp	.+28     	; 0x11ae2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2272
        strcpy(tmp1, pch);
   11ac6:	bc 01       	movw	r22, r24
   11ac8:	ce 01       	movw	r24, r28
   11aca:	88 57       	subi	r24, 0x78	; 120
   11acc:	9f 4f       	sbci	r25, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2274
      if (cnt == 1)
        strcpy(tmp2, pch);
   11ace:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2275
      pch = strtok (NULL, "/");
   11ad2:	60 e9       	ldi	r22, 0x90	; 144
   11ad4:	75 e0       	ldi	r23, 0x05	; 5
   11ad6:	90 e0       	ldi	r25, 0x00	; 0
   11ad8:	80 e0       	ldi	r24, 0x00	; 0
   11ada:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2276
      cnt++;
   11ade:	1f 5f       	subi	r17, 0xFF	; 255
   11ae0:	ee cf       	rjmp	.-36     	; 0x11abe <mqtt_callback(char*, unsigned char*, unsigned int)+0x99a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0)
        strcpy(tmp1, pch);
      if (cnt == 1)
   11ae2:	11 30       	cpi	r17, 0x01	; 1
   11ae4:	b1 f7       	brne	.-20     	; 0x11ad2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2274
        strcpy(tmp2, pch);
   11ae6:	bc 01       	movw	r22, r24
   11ae8:	ce 01       	movw	r24, r28
   11aea:	88 5f       	subi	r24, 0xF8	; 248
   11aec:	9e 4f       	sbci	r25, 0xFE	; 254
   11aee:	ef cf       	rjmp	.-34     	; 0x11ace <mqtt_callback(char*, unsigned char*, unsigned int)+0x9aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2269
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   11af0:	77 e6       	ldi	r23, 0x67	; 103
   11af2:	c7 2e       	mov	r12, r23
   11af4:	d1 2c       	mov	r13, r1
   11af6:	e1 2c       	mov	r14, r1
   11af8:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278
      if (cnt == 1)
        strcpy(tmp2, pch);
      pch = strtok (NULL, "/");
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   11afa:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2280
    {
      uint8_t active = 0;
   11afc:	29 96       	adiw	r28, 0x09	; 9
   11afe:	1f ae       	std	Y+63, r1	; 0x3f
   11b00:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2281
      str1[0] = 0;
   11b02:	d5 01       	movw	r26, r10
   11b04:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
      remote_tds_get_complete(idx, &active, str1);
   11b06:	a5 01       	movw	r20, r10
   11b08:	be 01       	movw	r22, r28
   11b0a:	68 5b       	subi	r22, 0xB8	; 184
   11b0c:	7f 4f       	sbci	r23, 0xFF	; 255
   11b0e:	81 2f       	mov	r24, r17
   11b10:	0e 94 b3 6f 	call	0xdf66	; 0xdf66 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
      if (active == 1 && strcmp(str1, tmp1) == 0)
   11b14:	29 96       	adiw	r28, 0x09	; 9
   11b16:	8f ad       	ldd	r24, Y+63	; 0x3f
   11b18:	29 97       	sbiw	r28, 0x09	; 9
   11b1a:	81 30       	cpi	r24, 0x01	; 1
   11b1c:	59 f5       	brne	.+86     	; 0x11b74 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa50>
   11b1e:	be 01       	movw	r22, r28
   11b20:	68 57       	subi	r22, 0x78	; 120
   11b22:	7f 4f       	sbci	r23, 0xFF	; 255
   11b24:	c5 01       	movw	r24, r10
   11b26:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   11b2a:	89 2b       	or	r24, r25
   11b2c:	19 f5       	brne	.+70     	; 0x11b74 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
      {
        if (strcmp(tmp2, "value") == 0)
   11b2e:	6b ef       	ldi	r22, 0xFB	; 251
   11b30:	73 e0       	ldi	r23, 0x03	; 3
   11b32:	ce 01       	movw	r24, r28
   11b34:	88 5f       	subi	r24, 0xF8	; 248
   11b36:	9e 4f       	sbci	r25, 0xFE	; 254
   11b38:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   11b3c:	89 2b       	or	r24, r25
   11b3e:	41 f4       	brne	.+16     	; 0x11b50 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286
          remote_tds_set_data(idx, atoi(my_payload));
   11b40:	85 e0       	ldi	r24, 0x05	; 5
   11b42:	99 e0       	ldi	r25, 0x09	; 9
   11b44:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11b48:	bc 01       	movw	r22, r24
   11b4a:	81 2f       	mov	r24, r17
   11b4c:	0e 94 fe 49 	call	0x93fc	; 0x93fc <remote_tds_set_data(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
        if (strcmp(tmp2, "type") == 0)
   11b50:	61 e0       	ldi	r22, 0x01	; 1
   11b52:	74 e0       	ldi	r23, 0x04	; 4
   11b54:	ce 01       	movw	r24, r28
   11b56:	88 5f       	subi	r24, 0xF8	; 248
   11b58:	9e 4f       	sbci	r25, 0xFE	; 254
   11b5a:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   11b5e:	89 2b       	or	r24, r25
   11b60:	49 f4       	brne	.+18     	; 0x11b74 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
          remote_tds_set_type(idx, atoi(my_payload));
   11b62:	85 e0       	ldi	r24, 0x05	; 5
   11b64:	99 e0       	ldi	r25, 0x09	; 9
   11b66:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
remote_tds_set_type():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1913
///
void remote_tds_set_type(uint8_t idx, uint8_t type)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_type + (ram_remote_tds_store_size * idx), type);
   11b6a:	48 2f       	mov	r20, r24
   11b6c:	c7 01       	movw	r24, r14
   11b6e:	b6 01       	movw	r22, r12
   11b70:	0e 94 f0 ad 	call	0x15be0	; 0x15be0 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278
      if (cnt == 1)
        strcpy(tmp2, pch);
      pch = strtok (NULL, "/");
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   11b74:	1f 5f       	subi	r17, 0xFF	; 255
   11b76:	b4 e0       	ldi	r27, 0x04	; 4
   11b78:	cb 0e       	add	r12, r27
   11b7a:	d1 1c       	adc	r13, r1
   11b7c:	e1 1c       	adc	r14, r1
   11b7e:	f1 1c       	adc	r15, r1
   11b80:	ef e8       	ldi	r30, 0x8F	; 143
   11b82:	ce 16       	cp	r12, r30
   11b84:	d1 04       	cpc	r13, r1
   11b86:	e1 04       	cpc	r14, r1
   11b88:	f1 04       	cpc	r15, r1
   11b8a:	09 f0       	breq	.+2      	; 0x11b8e <mqtt_callback(char*, unsigned char*, unsigned int)+0xa6a>
   11b8c:	b7 cf       	rjmp	.-146    	; 0x11afc <mqtt_callback(char*, unsigned char*, unsigned int)+0x9d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2294
      }
    }
  }
  ///

  strcpy_P(str1, new_text_slash_rtds_control_list); /// /rtds-control/list"
   11b8e:	67 e5       	ldi	r22, 0x57	; 87
   11b90:	7e e6       	ldi	r23, 0x6E	; 110
   11b92:	c5 01       	movw	r24, r10
   11b94:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
   11b98:	64 ef       	ldi	r22, 0xF4	; 244
   11b9a:	7e e6       	ldi	r23, 0x6E	; 110
   11b9c:	c5 01       	movw	r24, r10
   11b9e:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2310
  strcat(str1, device.nazev);
   11ba2:	6f e2       	ldi	r22, 0x2F	; 47
   11ba4:	7e e0       	ldi	r23, 0x0E	; 14
   11ba6:	c5 01       	movw	r24, r10
   11ba8:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
  strcat(str1, "/prog/set/");
   11bac:	61 e1       	ldi	r22, 0x11	; 17
   11bae:	75 e0       	ldi	r23, 0x05	; 5
   11bb0:	c5 01       	movw	r24, r10
   11bb2:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2312
  if (strncmp(str1, topic, strlen(str1)) == 0)
   11bb6:	f5 01       	movw	r30, r10
   11bb8:	01 90       	ld	r0, Z+
   11bba:	00 20       	and	r0, r0
   11bbc:	e9 f7       	brne	.-6      	; 0x11bb8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa94>
   11bbe:	31 97       	sbiw	r30, 0x01	; 1
   11bc0:	af 01       	movw	r20, r30
   11bc2:	4a 19       	sub	r20, r10
   11bc4:	5b 09       	sbc	r21, r11
   11bc6:	b4 01       	movw	r22, r8
   11bc8:	c5 01       	movw	r24, r10
   11bca:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   11bce:	89 2b       	or	r24, r25
   11bd0:	09 f0       	breq	.+2      	; 0x11bd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xab0>
   11bd2:	46 c0       	rjmp	.+140    	; 0x11c60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2314
  {
    mqtt_process_message++;
   11bd4:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   11bd8:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   11bdc:	01 96       	adiw	r24, 0x01	; 1
   11bde:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   11be2:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   11be6:	f5 01       	movw	r30, r10
   11be8:	01 90       	ld	r0, Z+
   11bea:	00 20       	and	r0, r0
   11bec:	e9 f7       	brne	.-6      	; 0x11be8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xac4>
   11bee:	31 97       	sbiw	r30, 0x01	; 1
   11bf0:	ea 19       	sub	r30, r10
   11bf2:	fb 09       	sbc	r31, r11
   11bf4:	9e 2f       	mov	r25, r30
   11bf6:	4e 2f       	mov	r20, r30
   11bf8:	84 2f       	mov	r24, r20
   11bfa:	89 1b       	sub	r24, r25
   11bfc:	24 2f       	mov	r18, r20
   11bfe:	30 e0       	ldi	r19, 0x00	; 0
   11c00:	d4 01       	movw	r26, r8
   11c02:	0d 90       	ld	r0, X+
   11c04:	00 20       	and	r0, r0
   11c06:	e9 f7       	brne	.-6      	; 0x11c02 <mqtt_callback(char*, unsigned char*, unsigned int)+0xade>
   11c08:	11 97       	sbiw	r26, 0x01	; 1
   11c0a:	a8 19       	sub	r26, r8
   11c0c:	b9 09       	sbc	r27, r9
   11c0e:	2a 17       	cp	r18, r26
   11c10:	3b 07       	cpc	r19, r27
   11c12:	60 f4       	brcc	.+24     	; 0x11c2c <mqtt_callback(char*, unsigned char*, unsigned int)+0xb08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
    {
      str1[cnt] = topic[f];
   11c14:	d5 01       	movw	r26, r10
   11c16:	a8 0f       	add	r26, r24
   11c18:	b1 1d       	adc	r27, r1
   11c1a:	28 0d       	add	r18, r8
   11c1c:	39 1d       	adc	r19, r9
   11c1e:	f9 01       	movw	r30, r18
   11c20:	80 81       	ld	r24, Z
   11c22:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2319
      str1[cnt + 1] = 0;
   11c24:	11 96       	adiw	r26, 0x01	; 1
   11c26:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   11c28:	4f 5f       	subi	r20, 0xFF	; 255
   11c2a:	e6 cf       	rjmp	.-52     	; 0x11bf8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xad4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2323
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   11c2c:	60 e9       	ldi	r22, 0x90	; 144
   11c2e:	75 e0       	ldi	r23, 0x05	; 5
   11c30:	c5 01       	movw	r24, r10
   11c32:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
   11c36:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2322
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   11c38:	f1 2c       	mov	r15, r1
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   11c3a:	6d e4       	ldi	r22, 0x4D	; 77
   11c3c:	e6 2e       	mov	r14, r22
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2324
    pch = strtok (str1, "/");
    while (pch != NULL)
   11c3e:	01 15       	cp	r16, r1
   11c40:	11 05       	cpc	r17, r1
   11c42:	71 f0       	breq	.+28     	; 0x11c60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
    {
      if (cnt == 0) id = atoi(pch);
   11c44:	f1 10       	cpse	r15, r1
   11c46:	c7 c0       	rjmp	.+398    	; 0x11dd6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb2>
   11c48:	c8 01       	movw	r24, r16
   11c4a:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11c4e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2327
      if (id < AVAILABLE_PROGRAM)
   11c50:	f7 e0       	ldi	r31, 0x07	; 7
   11c52:	f8 17       	cp	r31, r24
   11c54:	08 f0       	brcs	.+2      	; 0x11c58 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb34>
   11c56:	e6 c0       	rjmp	.+460    	; 0x11e24 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd00>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2334
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
   11c58:	8c e1       	ldi	r24, 0x1C	; 28
   11c5a:	95 e0       	ldi	r25, 0x05	; 5
   11c5c:	0e 94 da c6 	call	0x18db4	; 0x18db4 <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2342
      pch = strtok (NULL, "/");
      cnt++;
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
   11c60:	64 ef       	ldi	r22, 0xF4	; 244
   11c62:	7e e6       	ldi	r23, 0x6E	; 110
   11c64:	c5 01       	movw	r24, r10
   11c66:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2343
  strcat(str1, device.nazev);
   11c6a:	6f e2       	ldi	r22, 0x2F	; 47
   11c6c:	7e e0       	ldi	r23, 0x0E	; 14
   11c6e:	c5 01       	movw	r24, r10
   11c70:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2344
  strcat(str1, "/prog/clear");
   11c74:	6c e2       	ldi	r22, 0x2C	; 44
   11c76:	75 e0       	ldi	r23, 0x05	; 5
   11c78:	c5 01       	movw	r24, r10
   11c7a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2345
  if (strncmp(str1, topic, strlen(str1)) == 0)
   11c7e:	f5 01       	movw	r30, r10
   11c80:	01 90       	ld	r0, Z+
   11c82:	00 20       	and	r0, r0
   11c84:	e9 f7       	brne	.-6      	; 0x11c80 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb5c>
   11c86:	31 97       	sbiw	r30, 0x01	; 1
   11c88:	af 01       	movw	r20, r30
   11c8a:	4a 19       	sub	r20, r10
   11c8c:	5b 09       	sbc	r21, r11
   11c8e:	b4 01       	movw	r22, r8
   11c90:	c5 01       	movw	r24, r10
   11c92:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   11c96:	89 2b       	or	r24, r25
   11c98:	09 f0       	breq	.+2      	; 0x11c9c <mqtt_callback(char*, unsigned char*, unsigned int)+0xb78>
   11c9a:	52 c0       	rjmp	.+164    	; 0x11d40 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347
  {
    mqtt_process_message++;
   11c9c:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   11ca0:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   11ca4:	01 96       	adiw	r24, 0x01	; 1
   11ca6:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   11caa:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2348
    id = atoi(my_payload);
   11cae:	85 e0       	ldi	r24, 0x05	; 5
   11cb0:	99 e0       	ldi	r25, 0x09	; 9
   11cb2:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11cb6:	18 2f       	mov	r17, r24
   11cb8:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2349
    if (id < AVAILABLE_PROGRAM)
   11cba:	97 e0       	ldi	r25, 0x07	; 7
   11cbc:	91 17       	cp	r25, r17
   11cbe:	08 f4       	brcc	.+2      	; 0x11cc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb9e>
   11cc0:	ba c0       	rjmp	.+372    	; 0x11e36 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2351
    {
      strcpy_P(tmp2, text_prog);
   11cc2:	67 e5       	ldi	r22, 0x57	; 87
   11cc4:	70 e7       	ldi	r23, 0x70	; 112
   11cc6:	ce 01       	movw	r24, r28
   11cc8:	88 5f       	subi	r24, 0xF8	; 248
   11cca:	9e 4f       	sbci	r25, 0xFE	; 254
   11ccc:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2352
      thermostat_program_set_name(id, tmp2);
   11cd0:	be 01       	movw	r22, r28
   11cd2:	68 5f       	subi	r22, 0xF8	; 248
   11cd4:	7e 4f       	sbci	r23, 0xFE	; 254
   11cd6:	81 2f       	mov	r24, r17
   11cd8:	0e 94 66 61 	call	0xc2cc	; 0xc2cc <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
   11cdc:	ad e4       	ldi	r26, 0x4D	; 77
   11cde:	1a 9f       	mul	r17, r26
   11ce0:	c0 01       	movw	r24, r0
   11ce2:	11 24       	eor	r1, r1
   11ce4:	6f ef       	ldi	r22, 0xFF	; 255
   11ce6:	8f 50       	subi	r24, 0x0F	; 15
   11ce8:	9e 4f       	sbci	r25, 0xFE	; 254
   11cea:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2354
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
   11cee:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2356
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
   11cf0:	c1 2c       	mov	r12, r1
   11cf2:	e1 2c       	mov	r14, r1
   11cf4:	00 e0       	ldi	r16, 0x00	; 0
   11cf6:	20 e0       	ldi	r18, 0x00	; 0
   11cf8:	40 e0       	ldi	r20, 0x00	; 0
   11cfa:	61 2f       	mov	r22, r17
   11cfc:	87 2d       	mov	r24, r7
   11cfe:	0e 94 2a 61 	call	0xc254	; 0xc254 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2357
        thermostat_program_set_threshold(id, progid, 220);
   11d02:	4c ed       	ldi	r20, 0xDC	; 220
   11d04:	50 e0       	ldi	r21, 0x00	; 0
   11d06:	61 2f       	mov	r22, r17
   11d08:	87 2d       	mov	r24, r7
   11d0a:	0e 94 0e 61 	call	0xc21c	; 0xc21c <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2358
        thermostat_program_set_week(id, progid, 0);
   11d0e:	40 e0       	ldi	r20, 0x00	; 0
   11d10:	61 2f       	mov	r22, r17
   11d12:	87 2d       	mov	r24, r7
   11d14:	0e 94 00 61 	call	0xc200	; 0xc200 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2354
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy_P(tmp2, text_prog);
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
   11d18:	1f 5f       	subi	r17, 0xFF	; 255
   11d1a:	1b 30       	cpi	r17, 0x0B	; 11
   11d1c:	49 f7       	brne	.-46     	; 0x11cf0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbcc>
   11d1e:	0b e5       	ldi	r16, 0x5B	; 91
   11d20:	11 e0       	ldi	r17, 0x01	; 1
thermostat_ring_get_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   11d22:	c8 01       	movw	r24, r16
   11d24:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2362
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
   11d28:	78 12       	cpse	r7, r24
   11d2a:	04 c0       	rjmp	.+8      	; 0x11d34 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc10>
thermostat_ring_set_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
   11d2c:	6f ef       	ldi	r22, 0xFF	; 255
   11d2e:	c8 01       	movw	r24, r16
   11d30:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
   11d34:	0f 5d       	subi	r16, 0xDF	; 223
   11d36:	1f 4f       	sbci	r17, 0xFF	; 255
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2360
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
   11d38:	01 15       	cp	r16, r1
   11d3a:	b2 e0       	ldi	r27, 0x02	; 2
   11d3c:	1b 07       	cpc	r17, r27
   11d3e:	89 f7       	brne	.-30     	; 0x11d22 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbfe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2374
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
   11d40:	64 ef       	ldi	r22, 0xF4	; 244
   11d42:	7e e6       	ldi	r23, 0x6E	; 110
   11d44:	c5 01       	movw	r24, r10
   11d46:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2375
  strcat(str1, device.nazev);
   11d4a:	6f e2       	ldi	r22, 0x2F	; 47
   11d4c:	7e e0       	ldi	r23, 0x0E	; 14
   11d4e:	c5 01       	movw	r24, r10
   11d50:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2376
  strcat(str1, "/prog_interval/set/");
   11d54:	6a e4       	ldi	r22, 0x4A	; 74
   11d56:	75 e0       	ldi	r23, 0x05	; 5
   11d58:	c5 01       	movw	r24, r10
   11d5a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2377
  if (strncmp(str1, topic, strlen(str1)) == 0)
   11d5e:	f5 01       	movw	r30, r10
   11d60:	01 90       	ld	r0, Z+
   11d62:	00 20       	and	r0, r0
   11d64:	e9 f7       	brne	.-6      	; 0x11d60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc3c>
   11d66:	31 97       	sbiw	r30, 0x01	; 1
   11d68:	af 01       	movw	r20, r30
   11d6a:	4a 19       	sub	r20, r10
   11d6c:	5b 09       	sbc	r21, r11
   11d6e:	b4 01       	movw	r22, r8
   11d70:	c5 01       	movw	r24, r10
   11d72:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   11d76:	89 2b       	or	r24, r25
   11d78:	09 f0       	breq	.+2      	; 0x11d7c <mqtt_callback(char*, unsigned char*, unsigned int)+0xc58>
   11d7a:	32 c1       	rjmp	.+612    	; 0x11fe0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xebc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2379
  {
    mqtt_process_message++;
   11d7c:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   11d80:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   11d84:	01 96       	adiw	r24, 0x01	; 1
   11d86:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   11d8a:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2381
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   11d8e:	f5 01       	movw	r30, r10
   11d90:	01 90       	ld	r0, Z+
   11d92:	00 20       	and	r0, r0
   11d94:	e9 f7       	brne	.-6      	; 0x11d90 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc6c>
   11d96:	31 97       	sbiw	r30, 0x01	; 1
   11d98:	ea 19       	sub	r30, r10
   11d9a:	fb 09       	sbc	r31, r11
   11d9c:	9e 2f       	mov	r25, r30
   11d9e:	4e 2f       	mov	r20, r30
   11da0:	84 2f       	mov	r24, r20
   11da2:	89 1b       	sub	r24, r25
   11da4:	24 2f       	mov	r18, r20
   11da6:	30 e0       	ldi	r19, 0x00	; 0
   11da8:	d4 01       	movw	r26, r8
   11daa:	0d 90       	ld	r0, X+
   11dac:	00 20       	and	r0, r0
   11dae:	e9 f7       	brne	.-6      	; 0x11daa <mqtt_callback(char*, unsigned char*, unsigned int)+0xc86>
   11db0:	11 97       	sbiw	r26, 0x01	; 1
   11db2:	a8 19       	sub	r26, r8
   11db4:	b9 09       	sbc	r27, r9
   11db6:	2a 17       	cp	r18, r26
   11db8:	3b 07       	cpc	r19, r27
   11dba:	08 f0       	brcs	.+2      	; 0x11dbe <mqtt_callback(char*, unsigned char*, unsigned int)+0xc9a>
   11dbc:	41 c0       	rjmp	.+130    	; 0x11e40 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2383
    {
      str1[cnt] = topic[f];
   11dbe:	d5 01       	movw	r26, r10
   11dc0:	a8 0f       	add	r26, r24
   11dc2:	b1 1d       	adc	r27, r1
   11dc4:	28 0d       	add	r18, r8
   11dc6:	39 1d       	adc	r19, r9
   11dc8:	f9 01       	movw	r30, r18
   11dca:	80 81       	ld	r24, Z
   11dcc:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2384
      str1[cnt + 1] = 0;
   11dce:	11 96       	adiw	r26, 0x01	; 1
   11dd0:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2381
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   11dd2:	4f 5f       	subi	r20, 0xFF	; 255
   11dd4:	e5 cf       	rjmp	.-54     	; 0x11da0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2327
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
   11dd6:	27 e0       	ldi	r18, 0x07	; 7
   11dd8:	27 15       	cp	r18, r7
   11dda:	08 f4       	brcc	.+2      	; 0x11dde <mqtt_callback(char*, unsigned char*, unsigned int)+0xcba>
   11ddc:	3d cf       	rjmp	.-390    	; 0x11c58 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2329
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
   11dde:	81 e0       	ldi	r24, 0x01	; 1
   11de0:	f8 12       	cpse	r15, r24
   11de2:	20 c0       	rjmp	.+64     	; 0x11e24 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd00>
   11de4:	6a ee       	ldi	r22, 0xEA	; 234
   11de6:	73 e0       	ldi	r23, 0x03	; 3
   11de8:	c8 01       	movw	r24, r16
   11dea:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   11dee:	89 2b       	or	r24, r25
   11df0:	29 f4       	brne	.+10     	; 0x11dfc <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd8>
   11df2:	65 e0       	ldi	r22, 0x05	; 5
   11df4:	79 e0       	ldi	r23, 0x09	; 9
   11df6:	87 2d       	mov	r24, r7
   11df8:	0e 94 66 61 	call	0xc2cc	; 0xc2cc <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2330
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
   11dfc:	64 ef       	ldi	r22, 0xF4	; 244
   11dfe:	73 e0       	ldi	r23, 0x03	; 3
   11e00:	c8 01       	movw	r24, r16
   11e02:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   11e06:	89 2b       	or	r24, r25
   11e08:	69 f4       	brne	.+26     	; 0x11e24 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd00>
   11e0a:	85 e0       	ldi	r24, 0x05	; 5
   11e0c:	99 e0       	ldi	r25, 0x09	; 9
   11e0e:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   11e12:	7e 9c       	mul	r7, r14
   11e14:	90 01       	movw	r18, r0
   11e16:	11 24       	eor	r1, r1
   11e18:	68 2f       	mov	r22, r24
   11e1a:	c9 01       	movw	r24, r18
   11e1c:	8f 50       	subi	r24, 0x0F	; 15
   11e1e:	9e 4f       	sbci	r25, 0xFE	; 254
   11e20:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
   11e24:	60 e9       	ldi	r22, 0x90	; 144
   11e26:	75 e0       	ldi	r23, 0x05	; 5
   11e28:	90 e0       	ldi	r25, 0x00	; 0
   11e2a:	80 e0       	ldi	r24, 0x00	; 0
   11e2c:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
   11e30:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2338
      cnt++;
   11e32:	f3 94       	inc	r15
   11e34:	04 cf       	rjmp	.-504    	; 0x11c3e <mqtt_callback(char*, unsigned char*, unsigned int)+0xb1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2370
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
   11e36:	88 e3       	ldi	r24, 0x38	; 56
   11e38:	95 e0       	ldi	r25, 0x05	; 5
   11e3a:	0e 94 da c6 	call	0x18db4	; 0x18db4 <log_error(PubSubClient*, char*) [clone .constprop.125]>
   11e3e:	80 cf       	rjmp	.-256    	; 0x11d40 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2388
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   11e40:	60 e9       	ldi	r22, 0x90	; 144
   11e42:	75 e0       	ldi	r23, 0x05	; 5
   11e44:	c5 01       	movw	r24, r10
   11e46:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
   11e4a:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2057
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
   11e4c:	61 2c       	mov	r6, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2387
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   11e4e:	31 2c       	mov	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2389
    pch = strtok (str1, "/");
    while (pch != NULL)
   11e50:	41 14       	cp	r4, r1
   11e52:	51 04       	cpc	r5, r1
   11e54:	09 f4       	brne	.+2      	; 0x11e58 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd34>
   11e56:	c4 c0       	rjmp	.+392    	; 0x11fe0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xebc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2391
    {
      if (cnt == 0) id = atoi(pch);
   11e58:	31 10       	cpse	r3, r1
   11e5a:	82 c0       	rjmp	.+260    	; 0x11f60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe3c>
   11e5c:	c2 01       	movw	r24, r4
   11e5e:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11e62:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2393
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
   11e64:	27 e0       	ldi	r18, 0x07	; 7
   11e66:	27 15       	cp	r18, r7
   11e68:	08 f4       	brcc	.+2      	; 0x11e6c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd48>
   11e6a:	b6 c0       	rjmp	.+364    	; 0x11fd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xeb4>
   11e6c:	8a e0       	ldi	r24, 0x0A	; 10
   11e6e:	86 15       	cp	r24, r6
   11e70:	08 f4       	brcc	.+2      	; 0x11e74 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd50>
   11e72:	b2 c0       	rjmp	.+356    	; 0x11fd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xeb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2395
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
   11e74:	92 e0       	ldi	r25, 0x02	; 2
   11e76:	39 12       	cpse	r3, r25
   11e78:	a6 c0       	rjmp	.+332    	; 0x11fc6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
   11e7a:	64 ef       	ldi	r22, 0xF4	; 244
   11e7c:	73 e0       	ldi	r23, 0x03	; 3
   11e7e:	c2 01       	movw	r24, r4
   11e80:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   11e84:	89 2b       	or	r24, r25
   11e86:	c1 f5       	brne	.+112    	; 0x11ef8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdd4>
   11e88:	85 e0       	ldi	r24, 0x05	; 5
   11e8a:	99 e0       	ldi	r25, 0x09	; 9
   11e8c:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11e90:	28 2e       	mov	r2, r24
thermostat_program_set_interval_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:379

/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   11e92:	de 01       	movw	r26, r28
   11e94:	a8 5b       	subi	r26, 0xB8	; 184
   11e96:	bf 4f       	sbci	r27, 0xFF	; 255
   11e98:	6d 01       	movw	r12, r26
   11e9a:	fe 01       	movw	r30, r28
   11e9c:	e8 5d       	subi	r30, 0xD8	; 216
   11e9e:	fe 4f       	sbci	r31, 0xFE	; 254
   11ea0:	7f 01       	movw	r14, r30
   11ea2:	8e 01       	movw	r16, r28
   11ea4:	0d 5b       	subi	r16, 0xBD	; 189
   11ea6:	1e 4f       	sbci	r17, 0xFE	; 254
   11ea8:	9e 01       	movw	r18, r28
   11eaa:	2c 5b       	subi	r18, 0xBC	; 188
   11eac:	3e 4f       	sbci	r19, 0xFE	; 254
   11eae:	ae 01       	movw	r20, r28
   11eb0:	4b 5b       	subi	r20, 0xBB	; 187
   11eb2:	5e 4f       	sbci	r21, 0xFE	; 254
   11eb4:	66 2d       	mov	r22, r6
   11eb6:	87 2d       	mov	r24, r7
   11eb8:	0e 94 c1 66 	call	0xcd82	; 0xcd82 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:380
  if (active != set_active)
   11ebc:	29 96       	adiw	r28, 0x09	; 9
   11ebe:	8f ad       	ldd	r24, Y+63	; 0x3f
   11ec0:	29 97       	sbiw	r28, 0x09	; 9
   11ec2:	28 16       	cp	r2, r24
   11ec4:	c9 f0       	breq	.+50     	; 0x11ef8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdd4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
   11ec6:	c2 2c       	mov	r12, r2
   11ec8:	c8 5d       	subi	r28, 0xD8	; 216
   11eca:	de 4f       	sbci	r29, 0xFE	; 254
   11ecc:	e8 80       	ld	r14, Y
   11ece:	c8 52       	subi	r28, 0x28	; 40
   11ed0:	d1 40       	sbci	r29, 0x01	; 1
   11ed2:	cd 5b       	subi	r28, 0xBD	; 189
   11ed4:	de 4f       	sbci	r29, 0xFE	; 254
   11ed6:	08 81       	ld	r16, Y
   11ed8:	c3 54       	subi	r28, 0x43	; 67
   11eda:	d1 40       	sbci	r29, 0x01	; 1
   11edc:	cc 5b       	subi	r28, 0xBC	; 188
   11ede:	de 4f       	sbci	r29, 0xFE	; 254
   11ee0:	28 81       	ld	r18, Y
   11ee2:	c4 54       	subi	r28, 0x44	; 68
   11ee4:	d1 40       	sbci	r29, 0x01	; 1
   11ee6:	cb 5b       	subi	r28, 0xBB	; 187
   11ee8:	de 4f       	sbci	r29, 0xFE	; 254
   11eea:	48 81       	ld	r20, Y
   11eec:	c5 54       	subi	r28, 0x45	; 69
   11eee:	d1 40       	sbci	r29, 0x01	; 1
   11ef0:	66 2d       	mov	r22, r6
   11ef2:	87 2d       	mov	r24, r7
   11ef4:	0e 94 2a 61 	call	0xc254	; 0xc254 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2396
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
   11ef8:	67 e9       	ldi	r22, 0x97	; 151
   11efa:	76 e0       	ldi	r23, 0x06	; 6
   11efc:	c2 01       	movw	r24, r4
   11efe:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   11f02:	89 2b       	or	r24, r25
   11f04:	49 f4       	brne	.+18     	; 0x11f18 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdf4>
   11f06:	85 e0       	ldi	r24, 0x05	; 5
   11f08:	99 e0       	ldi	r25, 0x09	; 9
   11f0a:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11f0e:	ac 01       	movw	r20, r24
   11f10:	66 2d       	mov	r22, r6
   11f12:	87 2d       	mov	r24, r7
   11f14:	0e 94 0e 61 	call	0xc21c	; 0xc21c <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2397
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
   11f18:	65 ee       	ldi	r22, 0xE5	; 229
   11f1a:	76 e0       	ldi	r23, 0x06	; 6
   11f1c:	c2 01       	movw	r24, r4
   11f1e:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   11f22:	89 2b       	or	r24, r25
   11f24:	09 f0       	breq	.+2      	; 0x11f28 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe04>
   11f26:	4f c0       	rjmp	.+158    	; 0x11fc6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
thermostat_program_set_parse_interval():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:343
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
   11f28:	6e e5       	ldi	r22, 0x5E	; 94
   11f2a:	75 e0       	ldi	r23, 0x05	; 5
   11f2c:	85 e0       	ldi	r24, 0x05	; 5
   11f2e:	99 e0       	ldi	r25, 0x09	; 9
   11f30:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
   11f34:	f1 2c       	mov	r15, r1
   11f36:	c1 2c       	mov	r12, r1
   11f38:	e1 2c       	mov	r14, r1
   11f3a:	00 e0       	ldi	r16, 0x00	; 0
   11f3c:	51 2c       	mov	r5, r1
   11f3e:	d1 2c       	mov	r13, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
   11f40:	10 e0       	ldi	r17, 0x00	; 0
thermostat_program_set_parse_interval():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
   11f42:	00 97       	sbiw	r24, 0x00	; 0
   11f44:	99 f1       	breq	.+102    	; 0x11fac <mqtt_callback(char*, unsigned char*, unsigned int)+0xe88>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
   11f46:	11 11       	cpse	r17, r1
   11f48:	13 c0       	rjmp	.+38     	; 0x11f70 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4c>
   11f4a:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11f4e:	d8 2e       	mov	r13, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
   11f50:	6e e5       	ldi	r22, 0x5E	; 94
   11f52:	75 e0       	ldi	r23, 0x05	; 5
   11f54:	90 e0       	ldi	r25, 0x00	; 0
   11f56:	80 e0       	ldi	r24, 0x00	; 0
   11f58:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:354
    cnt++;
   11f5c:	1f 5f       	subi	r17, 0xFF	; 255
   11f5e:	f1 cf       	rjmp	.-30     	; 0x11f42 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe1e>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2392
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
   11f60:	f1 e0       	ldi	r31, 0x01	; 1
   11f62:	3f 12       	cpse	r3, r31
   11f64:	7f cf       	rjmp	.-258    	; 0x11e64 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd40>
   11f66:	c2 01       	movw	r24, r4
   11f68:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11f6c:	68 2e       	mov	r6, r24
   11f6e:	7a cf       	rjmp	.-268    	; 0x11e64 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd40>
thermostat_program_set_parse_interval():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:347
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
   11f70:	11 30       	cpi	r17, 0x01	; 1
   11f72:	21 f4       	brne	.+8      	; 0x11f7c <mqtt_callback(char*, unsigned char*, unsigned int)+0xe58>
   11f74:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11f78:	58 2e       	mov	r5, r24
   11f7a:	ea cf       	rjmp	.-44     	; 0x11f50 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
   11f7c:	12 30       	cpi	r17, 0x02	; 2
   11f7e:	21 f4       	brne	.+8      	; 0x11f88 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe64>
   11f80:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11f84:	08 2f       	mov	r16, r24
   11f86:	e4 cf       	rjmp	.-56     	; 0x11f50 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
   11f88:	13 30       	cpi	r17, 0x03	; 3
   11f8a:	21 f4       	brne	.+8      	; 0x11f94 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe70>
   11f8c:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11f90:	e8 2e       	mov	r14, r24
   11f92:	de cf       	rjmp	.-68     	; 0x11f50 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
   11f94:	14 30       	cpi	r17, 0x04	; 4
   11f96:	21 f4       	brne	.+8      	; 0x11fa0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
   11f98:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11f9c:	f8 2e       	mov	r15, r24
   11f9e:	d8 cf       	rjmp	.-80     	; 0x11f50 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
   11fa0:	15 30       	cpi	r17, 0x05	; 5
   11fa2:	b1 f6       	brne	.-84     	; 0x11f50 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
   11fa4:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   11fa8:	c8 2e       	mov	r12, r24
   11faa:	d2 cf       	rjmp	.-92     	; 0x11f50 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
   11fac:	16 30       	cpi	r17, 0x06	; 6
   11fae:	59 f4       	brne	.+22     	; 0x11fc6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
   11fb0:	25 2d       	mov	r18, r5
   11fb2:	4d 2d       	mov	r20, r13
   11fb4:	66 2d       	mov	r22, r6
   11fb6:	87 2d       	mov	r24, r7
   11fb8:	0e 94 2a 61 	call	0xc254	; 0xc254 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
   11fbc:	4f 2d       	mov	r20, r15
   11fbe:	66 2d       	mov	r22, r6
   11fc0:	87 2d       	mov	r24, r7
   11fc2:	0e 94 00 61 	call	0xc200	; 0xc200 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2404
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
   11fc6:	60 e9       	ldi	r22, 0x90	; 144
   11fc8:	75 e0       	ldi	r23, 0x05	; 5
   11fca:	90 e0       	ldi	r25, 0x00	; 0
   11fcc:	80 e0       	ldi	r24, 0x00	; 0
   11fce:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
   11fd2:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2405
      cnt++;
   11fd4:	33 94       	inc	r3
   11fd6:	3c cf       	rjmp	.-392    	; 0x11e50 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2401
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
   11fd8:	80 e6       	ldi	r24, 0x60	; 96
   11fda:	95 e0       	ldi	r25, 0x05	; 5
   11fdc:	0e 94 da c6 	call	0x18db4	; 0x18db4 <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2410
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
   11fe0:	64 ef       	ldi	r22, 0xF4	; 244
   11fe2:	7e e6       	ldi	r23, 0x6E	; 110
   11fe4:	c5 01       	movw	r24, r10
   11fe6:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2411
  strcat(str1, device.nazev);
   11fea:	6f e2       	ldi	r22, 0x2F	; 47
   11fec:	7e e0       	ldi	r23, 0x0E	; 14
   11fee:	c5 01       	movw	r24, r10
   11ff0:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2412
  strcat(str1, "/ring/default");
   11ff4:	69 e7       	ldi	r22, 0x79	; 121
   11ff6:	75 e0       	ldi	r23, 0x05	; 5
   11ff8:	c5 01       	movw	r24, r10
   11ffa:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2413
  if (strcmp(str1, topic) == 0)
   11ffe:	b4 01       	movw	r22, r8
   12000:	c5 01       	movw	r24, r10
   12002:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12006:	89 2b       	or	r24, r25
   12008:	d9 f4       	brne	.+54     	; 0x12040 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2415
  {
    mqtt_process_message++;
   1200a:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   1200e:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12012:	01 96       	adiw	r24, 0x01	; 1
   12014:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12018:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2416
    last_default_ring = default_ring;
   1201c:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
   12020:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <last_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2417
    default_ring = atoi(my_payload);
   12024:	85 e0       	ldi	r24, 0x05	; 5
   12026:	99 e0       	ldi	r25, 0x09	; 9
   12028:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   1202c:	80 93 86 0b 	sts	0x0B86, r24	; 0x800b86 <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2418
    display_redraw_default_ring = 1;
   12030:	91 e0       	ldi	r25, 0x01	; 1
   12032:	90 93 94 09 	sts	0x0994, r25	; 0x800994 <display_redraw_default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1992
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
   12036:	68 2f       	mov	r22, r24
   12038:	8c e5       	ldi	r24, 0x5C	; 92
   1203a:	90 e0       	ldi	r25, 0x00	; 0
   1203c:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2423
    display_redraw_default_ring = 1;
    set_default_ring(default_ring);
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
   12040:	64 ef       	ldi	r22, 0xF4	; 244
   12042:	7e e6       	ldi	r23, 0x6E	; 110
   12044:	c5 01       	movw	r24, r10
   12046:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2424
  strcat(str1, device.nazev);
   1204a:	6f e2       	ldi	r22, 0x2F	; 47
   1204c:	7e e0       	ldi	r23, 0x0E	; 14
   1204e:	c5 01       	movw	r24, r10
   12050:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2425
  strcat(str1, "/ring/get/");
   12054:	67 e8       	ldi	r22, 0x87	; 135
   12056:	75 e0       	ldi	r23, 0x05	; 5
   12058:	c5 01       	movw	r24, r10
   1205a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2426
  if (strncmp(str1, topic, strlen(str1)) == 0)
   1205e:	f5 01       	movw	r30, r10
   12060:	01 90       	ld	r0, Z+
   12062:	00 20       	and	r0, r0
   12064:	e9 f7       	brne	.-6      	; 0x12060 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf3c>
   12066:	31 97       	sbiw	r30, 0x01	; 1
   12068:	8f 01       	movw	r16, r30
   1206a:	0a 19       	sub	r16, r10
   1206c:	1b 09       	sbc	r17, r11
   1206e:	a8 01       	movw	r20, r16
   12070:	b4 01       	movw	r22, r8
   12072:	c5 01       	movw	r24, r10
   12074:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   12078:	89 2b       	or	r24, r25
   1207a:	09 f0       	breq	.+2      	; 0x1207e <mqtt_callback(char*, unsigned char*, unsigned int)+0xf5a>
   1207c:	4c c0       	rjmp	.+152    	; 0x12116 <mqtt_callback(char*, unsigned char*, unsigned int)+0xff2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2429
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   1207e:	90 2f       	mov	r25, r16
   12080:	80 2f       	mov	r24, r16
   12082:	89 1b       	sub	r24, r25
   12084:	20 2f       	mov	r18, r16
   12086:	30 e0       	ldi	r19, 0x00	; 0
   12088:	f4 01       	movw	r30, r8
   1208a:	01 90       	ld	r0, Z+
   1208c:	00 20       	and	r0, r0
   1208e:	e9 f7       	brne	.-6      	; 0x1208a <mqtt_callback(char*, unsigned char*, unsigned int)+0xf66>
   12090:	31 97       	sbiw	r30, 0x01	; 1
   12092:	e8 19       	sub	r30, r8
   12094:	f9 09       	sbc	r31, r9
   12096:	2e 17       	cp	r18, r30
   12098:	3f 07       	cpc	r19, r31
   1209a:	70 f4       	brcc	.+28     	; 0x120b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2431
    {
      str1[cnt] = topic[f];
   1209c:	e8 ec       	ldi	r30, 0xC8	; 200
   1209e:	f0 e0       	ldi	r31, 0x00	; 0
   120a0:	ec 0f       	add	r30, r28
   120a2:	fd 1f       	adc	r31, r29
   120a4:	e8 0f       	add	r30, r24
   120a6:	f1 1d       	adc	r31, r1
   120a8:	28 0d       	add	r18, r8
   120aa:	39 1d       	adc	r19, r9
   120ac:	d9 01       	movw	r26, r18
   120ae:	8c 91       	ld	r24, X
   120b0:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2432
      str1[cnt + 1] = 0;
   120b2:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2429
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   120b4:	0f 5f       	subi	r16, 0xFF	; 255
   120b6:	e4 cf       	rjmp	.-56     	; 0x12080 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   120b8:	60 e9       	ldi	r22, 0x90	; 144
   120ba:	75 e0       	ldi	r23, 0x05	; 5
   120bc:	ce 01       	movw	r24, r28
   120be:	88 53       	subi	r24, 0x38	; 56
   120c0:	9f 4f       	sbci	r25, 0xFF	; 255
   120c2:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2435
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   120c6:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
    pch = strtok (str1, "/");
    while (pch != NULL)
   120c8:	00 97       	sbiw	r24, 0x00	; 0
   120ca:	29 f1       	breq	.+74     	; 0x12116 <mqtt_callback(char*, unsigned char*, unsigned int)+0xff2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
    {
      if (cnt == 0) id = atoi(my_payload);
   120cc:	11 11       	cpse	r17, r1
   120ce:	0d c0       	rjmp	.+26     	; 0x120ea <mqtt_callback(char*, unsigned char*, unsigned int)+0xfc6>
   120d0:	85 e0       	ldi	r24, 0x05	; 5
   120d2:	99 e0       	ldi	r25, 0x09	; 9
   120d4:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   120d8:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
      if (id < MAX_THERMOSTAT)
   120da:	b4 e0       	ldi	r27, 0x04	; 4
   120dc:	b8 17       	cp	r27, r24
   120de:	98 f4       	brcc	.+38     	; 0x12106 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2446
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
   120e0:	82 e9       	ldi	r24, 0x92	; 146
   120e2:	95 e0       	ldi	r25, 0x05	; 5
   120e4:	0e 94 da c6 	call	0x18db4	; 0x18db4 <log_error(PubSubClient*, char*) [clone .constprop.125]>
   120e8:	0e c0       	rjmp	.+28     	; 0x12106 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
   120ea:	e4 e0       	ldi	r30, 0x04	; 4
   120ec:	e7 15       	cp	r30, r7
   120ee:	c0 f3       	brcs	.-16     	; 0x120e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfbc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2442
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
   120f0:	11 30       	cpi	r17, 0x01	; 1
   120f2:	49 f4       	brne	.+18     	; 0x12106 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe2>
   120f4:	61 e4       	ldi	r22, 0x41	; 65
   120f6:	73 e0       	ldi	r23, 0x03	; 3
   120f8:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   120fc:	89 2b       	or	r24, r25
   120fe:	19 f4       	brne	.+6      	; 0x12106 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe2>
   12100:	87 2d       	mov	r24, r7
   12102:	0e 94 75 4b 	call	0x96ea	; 0x96ea <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
   12106:	60 e9       	ldi	r22, 0x90	; 144
   12108:	75 e0       	ldi	r23, 0x05	; 5
   1210a:	90 e0       	ldi	r25, 0x00	; 0
   1210c:	80 e0       	ldi	r24, 0x00	; 0
   1210e:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2449
      cnt++;
   12112:	1f 5f       	subi	r17, 0xFF	; 255
   12114:	d9 cf       	rjmp	.-78     	; 0x120c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2468
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
   12116:	64 ef       	ldi	r22, 0xF4	; 244
   12118:	7e e6       	ldi	r23, 0x6E	; 110
   1211a:	c5 01       	movw	r24, r10
   1211c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2469
  strcat(str1, device.nazev);
   12120:	6f e2       	ldi	r22, 0x2F	; 47
   12122:	7e e0       	ldi	r23, 0x0E	; 14
   12124:	c5 01       	movw	r24, r10
   12126:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2470
  strcat(str1, "/ring/set/");
   1212a:	62 ea       	ldi	r22, 0xA2	; 162
   1212c:	75 e0       	ldi	r23, 0x05	; 5
   1212e:	c5 01       	movw	r24, r10
   12130:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2471
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12134:	f5 01       	movw	r30, r10
   12136:	01 90       	ld	r0, Z+
   12138:	00 20       	and	r0, r0
   1213a:	e9 f7       	brne	.-6      	; 0x12136 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1012>
   1213c:	31 97       	sbiw	r30, 0x01	; 1
   1213e:	8f 01       	movw	r16, r30
   12140:	0a 19       	sub	r16, r10
   12142:	1b 09       	sbc	r17, r11
   12144:	a8 01       	movw	r20, r16
   12146:	b4 01       	movw	r22, r8
   12148:	c5 01       	movw	r24, r10
   1214a:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   1214e:	89 2b       	or	r24, r25
   12150:	09 f0       	breq	.+2      	; 0x12154 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1030>
   12152:	cb c1       	rjmp	.+918    	; 0x124ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2474
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12154:	90 2f       	mov	r25, r16
   12156:	80 2f       	mov	r24, r16
   12158:	89 1b       	sub	r24, r25
   1215a:	20 2f       	mov	r18, r16
   1215c:	30 e0       	ldi	r19, 0x00	; 0
   1215e:	f4 01       	movw	r30, r8
   12160:	01 90       	ld	r0, Z+
   12162:	00 20       	and	r0, r0
   12164:	e9 f7       	brne	.-6      	; 0x12160 <mqtt_callback(char*, unsigned char*, unsigned int)+0x103c>
   12166:	31 97       	sbiw	r30, 0x01	; 1
   12168:	e8 19       	sub	r30, r8
   1216a:	f9 09       	sbc	r31, r9
   1216c:	2e 17       	cp	r18, r30
   1216e:	3f 07       	cpc	r19, r31
   12170:	70 f4       	brcc	.+28     	; 0x1218e <mqtt_callback(char*, unsigned char*, unsigned int)+0x106a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
    {
      str1[cnt] = topic[f];
   12172:	e8 ec       	ldi	r30, 0xC8	; 200
   12174:	f0 e0       	ldi	r31, 0x00	; 0
   12176:	ec 0f       	add	r30, r28
   12178:	fd 1f       	adc	r31, r29
   1217a:	e8 0f       	add	r30, r24
   1217c:	f1 1d       	adc	r31, r1
   1217e:	28 0d       	add	r18, r8
   12180:	39 1d       	adc	r19, r9
   12182:	d9 01       	movw	r26, r18
   12184:	8c 91       	ld	r24, X
   12186:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2477
      str1[cnt + 1] = 0;
   12188:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2474
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   1218a:	0f 5f       	subi	r16, 0xFF	; 255
   1218c:	e4 cf       	rjmp	.-56     	; 0x12156 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1032>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2481
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   1218e:	60 e9       	ldi	r22, 0x90	; 144
   12190:	75 e0       	ldi	r23, 0x05	; 5
   12192:	ce 01       	movw	r24, r28
   12194:	88 53       	subi	r24, 0x38	; 56
   12196:	9f 4f       	sbci	r25, 0xFF	; 255
   12198:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
   1219c:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2480
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   1219e:	e1 2c       	mov	r14, r1
thermostat_ring_set_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
   121a0:	51 e2       	ldi	r21, 0x21	; 33
   121a2:	d5 2e       	mov	r13, r21
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2520
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
          if (active == TERM_MODE_MAN_COOL)
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
          change_term_mode = 1;
   121a4:	cc 24       	eor	r12, r12
   121a6:	c3 94       	inc	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2482
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   121a8:	01 15       	cp	r16, r1
   121aa:	11 05       	cpc	r17, r1
   121ac:	09 f4       	brne	.+2      	; 0x121b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x108c>
   121ae:	9d c1       	rjmp	.+826    	; 0x124ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2484
    {
      if (cnt == 0) id = atoi(pch);
   121b0:	e1 10       	cpse	r14, r1
   121b2:	0d c0       	rjmp	.+26     	; 0x121ce <mqtt_callback(char*, unsigned char*, unsigned int)+0x10aa>
   121b4:	c8 01       	movw	r24, r16
   121b6:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   121ba:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2485
      if (id < MAX_THERMOSTAT)
   121bc:	b4 e0       	ldi	r27, 0x04	; 4
   121be:	b8 17       	cp	r27, r24
   121c0:	08 f0       	brcs	.+2      	; 0x121c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10a0>
   121c2:	8a c1       	rjmp	.+788    	; 0x124d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2533
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
   121c4:	82 e9       	ldi	r24, 0x92	; 146
   121c6:	95 e0       	ldi	r25, 0x05	; 5
   121c8:	0e 94 da c6 	call	0x18db4	; 0x18db4 <log_error(PubSubClient*, char*) [clone .constprop.125]>
   121cc:	85 c1       	rjmp	.+778    	; 0x124d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2485
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
   121ce:	e4 e0       	ldi	r30, 0x04	; 4
   121d0:	e7 15       	cp	r30, r7
   121d2:	c0 f3       	brcs	.-16     	; 0x121c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2487
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
   121d4:	f1 e0       	ldi	r31, 0x01	; 1
   121d6:	ef 12       	cpse	r14, r31
   121d8:	7f c1       	rjmp	.+766    	; 0x124d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b4>
   121da:	6a ee       	ldi	r22, 0xEA	; 234
   121dc:	73 e0       	ldi	r23, 0x03	; 3
   121de:	c8 01       	movw	r24, r16
   121e0:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   121e4:	89 2b       	or	r24, r25
   121e6:	29 f4       	brne	.+10     	; 0x121f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ce>
   121e8:	65 e0       	ldi	r22, 0x05	; 5
   121ea:	79 e0       	ldi	r23, 0x09	; 9
   121ec:	87 2d       	mov	r24, r7
   121ee:	0e 94 c9 62 	call	0xc592	; 0xc592 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2488
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
   121f2:	61 ea       	ldi	r22, 0xA1	; 161
   121f4:	76 e0       	ldi	r23, 0x06	; 6
   121f6:	c8 01       	movw	r24, r16
   121f8:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   121fc:	89 2b       	or	r24, r25
   121fe:	81 f4       	brne	.+32     	; 0x12220 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2489
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
   12200:	85 e0       	ldi	r24, 0x05	; 5
   12202:	99 e0       	ldi	r25, 0x09	; 9
   12204:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   12208:	88 30       	cpi	r24, 0x08	; 8
   1220a:	91 05       	cpc	r25, r1
   1220c:	4c f4       	brge	.+18     	; 0x12220 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10fc>
thermostat_ring_set_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
   1220e:	7d 9c       	mul	r7, r13
   12210:	90 01       	movw	r18, r0
   12212:	11 24       	eor	r1, r1
   12214:	68 2f       	mov	r22, r24
   12216:	c9 01       	movw	r24, r18
   12218:	85 5a       	subi	r24, 0xA5	; 165
   1221a:	9e 4f       	sbci	r25, 0xFE	; 254
   1221c:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2491
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0))
   12220:	69 ea       	ldi	r22, 0xA9	; 169
   12222:	76 e0       	ldi	r23, 0x06	; 6
   12224:	c8 01       	movw	r24, r16
   12226:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   1222a:	89 2b       	or	r24, r25
   1222c:	79 f4       	brne	.+30     	; 0x1224c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2493
        {
          thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
   1222e:	85 e0       	ldi	r24, 0x05	; 5
   12230:	99 e0       	ldi	r25, 0x09	; 9
   12232:	0e 94 19 e5 	call	0x1ca32	; 0x1ca32 <atof>
   12236:	20 e0       	ldi	r18, 0x00	; 0
   12238:	30 e0       	ldi	r19, 0x00	; 0
   1223a:	40 e2       	ldi	r20, 0x20	; 32
   1223c:	51 e4       	ldi	r21, 0x41	; 65
   1223e:	0e 94 59 ee 	call	0x1dcb2	; 0x1dcb2 <__mulsf3>
   12242:	0e 94 9f f0 	call	0x1e13e	; 0x1e13e <__fixsfsi>
   12246:	87 2d       	mov	r24, r7
   12248:	0e 94 a2 62 	call	0xc544	; 0xc544 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2495
        }
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0))
   1224c:	67 e9       	ldi	r22, 0x97	; 151
   1224e:	76 e0       	ldi	r23, 0x06	; 6
   12250:	c8 01       	movw	r24, r16
   12252:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12256:	89 2b       	or	r24, r25
   12258:	41 f4       	brne	.+16     	; 0x1226a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1146>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2497
        {
          thermostat_ring_set_mezni(id, atoi(my_payload));
   1225a:	85 e0       	ldi	r24, 0x05	; 5
   1225c:	99 e0       	ldi	r25, 0x09	; 9
   1225e:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   12262:	bc 01       	movw	r22, r24
   12264:	87 2d       	mov	r24, r7
   12266:	0e 94 a2 62 	call	0xc544	; 0xc544 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2499
        }
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
   1226a:	65 eb       	ldi	r22, 0xB5	; 181
   1226c:	76 e0       	ldi	r23, 0x06	; 6
   1226e:	c8 01       	movw	r24, r16
   12270:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12274:	89 2b       	or	r24, r25
   12276:	09 f0       	breq	.+2      	; 0x1227a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1156>
   12278:	5a c0       	rjmp	.+180    	; 0x1232e <mqtt_callback(char*, unsigned char*, unsigned int)+0x120a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2501
        {
          thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
   1227a:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
   1227e:	0e 94 14 67 	call	0xce28	; 0xce28 <thermostat_ring_get_mode(unsigned char)>
   12282:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <thermostat_mode_default_ring_last_state>
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3232
/// funkce prevadi ciselnou hodnotu na skutecne pojmenovani
uint8_t convert_text_mode(char *str2)
{
  uint8_t mode = 0;
  if (strcmp(str2, "off") == 0) mode = TERM_MODE_OFF;
  if (strcmp(str2, "heat") == 0) mode = TERM_MODE_MAX;
   12286:	6f ec       	ldi	r22, 0xCF	; 207
   12288:	78 e0       	ldi	r23, 0x08	; 8
   1228a:	85 e0       	ldi	r24, 0x05	; 5
   1228c:	99 e0       	ldi	r25, 0x09	; 9
   1228e:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12292:	ff 24       	eor	r15, r15
   12294:	f3 94       	inc	r15
   12296:	89 2b       	or	r24, r25
   12298:	09 f0       	breq	.+2      	; 0x1229c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1178>
   1229a:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3233
  if (strcmp(str2, "manual") == 0) mode = TERM_MODE_MAN_HEAT;
   1229c:	6d ea       	ldi	r22, 0xAD	; 173
   1229e:	75 e0       	ldi	r23, 0x05	; 5
   122a0:	85 e0       	ldi	r24, 0x05	; 5
   122a2:	99 e0       	ldi	r25, 0x09	; 9
   122a4:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   122a8:	89 2b       	or	r24, r25
   122aa:	11 f4       	brne	.+4      	; 0x122b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x118c>
_Z13mqtt_callbackPcPhj():
   122ac:	43 e0       	ldi	r20, 0x03	; 3
   122ae:	f4 2e       	mov	r15, r20
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3234
  if (strcmp(str2, "auto") == 0) mode = TERM_MODE_PROG;
   122b0:	64 eb       	ldi	r22, 0xB4	; 180
   122b2:	75 e0       	ldi	r23, 0x05	; 5
   122b4:	85 e0       	ldi	r24, 0x05	; 5
   122b6:	99 e0       	ldi	r25, 0x09	; 9
   122b8:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   122bc:	89 2b       	or	r24, r25
   122be:	11 f4       	brne	.+4      	; 0x122c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11a0>
_Z13mqtt_callbackPcPhj():
   122c0:	32 e0       	ldi	r19, 0x02	; 2
   122c2:	f3 2e       	mov	r15, r19
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3235
  if (strcmp(str2, "cool") == 0) mode = TERM_MODE_CLIMATE_MAX;
   122c4:	6f eb       	ldi	r22, 0xBF	; 191
   122c6:	78 e0       	ldi	r23, 0x08	; 8
   122c8:	85 e0       	ldi	r24, 0x05	; 5
   122ca:	99 e0       	ldi	r25, 0x09	; 9
   122cc:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   122d0:	89 2b       	or	r24, r25
   122d2:	11 f4       	brne	.+4      	; 0x122d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11b4>
_Z13mqtt_callbackPcPhj():
   122d4:	24 e0       	ldi	r18, 0x04	; 4
   122d6:	f2 2e       	mov	r15, r18
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3236
  if (strcmp(str2, "fan_only") == 0) mode = TERM_MODE_FAN;
   122d8:	69 eb       	ldi	r22, 0xB9	; 185
   122da:	75 e0       	ldi	r23, 0x05	; 5
   122dc:	85 e0       	ldi	r24, 0x05	; 5
   122de:	99 e0       	ldi	r25, 0x09	; 9
   122e0:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   122e4:	89 2b       	or	r24, r25
   122e6:	11 f4       	brne	.+4      	; 0x122ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x11c8>
_Z13mqtt_callbackPcPhj():
   122e8:	96 e0       	ldi	r25, 0x06	; 6
   122ea:	f9 2e       	mov	r15, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2502
          thermostat_ring_set_mezni(id, atoi(my_payload));
        }
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
        {
          thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
          active = convert_text_mode(my_payload);
   122ec:	ca 5b       	subi	r28, 0xBA	; 186
   122ee:	de 4f       	sbci	r29, 0xFE	; 254
   122f0:	f8 82       	st	Y, r15
   122f2:	c6 54       	subi	r28, 0x46	; 70
   122f4:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2503
          thermostat_ring_set_mode(id, active);
   122f6:	6f 2d       	mov	r22, r15
   122f8:	87 2d       	mov	r24, r7
   122fa:	0e 94 84 62 	call	0xc508	; 0xc508 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2504
          if (active == TERM_MODE_MAN_HEAT)
   122fe:	ca 5b       	subi	r28, 0xBA	; 186
   12300:	de 4f       	sbci	r29, 0xFE	; 254
   12302:	88 81       	ld	r24, Y
   12304:	c6 54       	subi	r28, 0x46	; 70
   12306:	d1 40       	sbci	r29, 0x01	; 1
   12308:	83 30       	cpi	r24, 0x03	; 3
   1230a:	21 f4       	brne	.+8      	; 0x12314 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2505
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
   1230c:	60 e0       	ldi	r22, 0x00	; 0
   1230e:	87 2d       	mov	r24, r7
   12310:	0e 94 04 d1 	call	0x1a208	; 0x1a208 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2506
          if (active == TERM_MODE_MAN_COOL)
   12314:	ca 5b       	subi	r28, 0xBA	; 186
   12316:	de 4f       	sbci	r29, 0xFE	; 254
   12318:	88 81       	ld	r24, Y
   1231a:	c6 54       	subi	r28, 0x46	; 70
   1231c:	d1 40       	sbci	r29, 0x01	; 1
   1231e:	85 30       	cpi	r24, 0x05	; 5
   12320:	21 f4       	brne	.+8      	; 0x1232a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1206>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
   12322:	61 e0       	ldi	r22, 0x01	; 1
   12324:	87 2d       	mov	r24, r7
   12326:	0e 94 04 d1 	call	0x1a208	; 0x1a208 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508
          change_term_mode = 1;
   1232a:	c0 92 9a 09 	sts	0x099A, r12	; 0x80099a <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2511

        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
   1232e:	6a eb       	ldi	r22, 0xBA	; 186
   12330:	76 e0       	ldi	r23, 0x06	; 6
   12332:	c8 01       	movw	r24, r16
   12334:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12338:	89 2b       	or	r24, r25
   1233a:	59 f5       	brne	.+86     	; 0x12392 <mqtt_callback(char*, unsigned char*, unsigned int)+0x126e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2513
        {
          thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
   1233c:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
   12340:	0e 94 14 67 	call	0xce28	; 0xce28 <thermostat_ring_get_mode(unsigned char)>
   12344:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <thermostat_mode_default_ring_last_state>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2514
          active = atoi(my_payload);
   12348:	85 e0       	ldi	r24, 0x05	; 5
   1234a:	99 e0       	ldi	r25, 0x09	; 9
   1234c:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   12350:	ca 5b       	subi	r28, 0xBA	; 186
   12352:	de 4f       	sbci	r29, 0xFE	; 254
   12354:	88 83       	st	Y, r24
   12356:	c6 54       	subi	r28, 0x46	; 70
   12358:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2515
          thermostat_ring_set_mode(id, active);
   1235a:	68 2f       	mov	r22, r24
   1235c:	87 2d       	mov	r24, r7
   1235e:	0e 94 84 62 	call	0xc508	; 0xc508 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2516
          if (active == TERM_MODE_MAN_HEAT)
   12362:	ca 5b       	subi	r28, 0xBA	; 186
   12364:	de 4f       	sbci	r29, 0xFE	; 254
   12366:	88 81       	ld	r24, Y
   12368:	c6 54       	subi	r28, 0x46	; 70
   1236a:	d1 40       	sbci	r29, 0x01	; 1
   1236c:	83 30       	cpi	r24, 0x03	; 3
   1236e:	21 f4       	brne	.+8      	; 0x12378 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1254>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2517
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
   12370:	60 e0       	ldi	r22, 0x00	; 0
   12372:	87 2d       	mov	r24, r7
   12374:	0e 94 04 d1 	call	0x1a208	; 0x1a208 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2518
          if (active == TERM_MODE_MAN_COOL)
   12378:	ca 5b       	subi	r28, 0xBA	; 186
   1237a:	de 4f       	sbci	r29, 0xFE	; 254
   1237c:	88 81       	ld	r24, Y
   1237e:	c6 54       	subi	r28, 0x46	; 70
   12380:	d1 40       	sbci	r29, 0x01	; 1
   12382:	85 30       	cpi	r24, 0x05	; 5
   12384:	21 f4       	brne	.+8      	; 0x1238e <mqtt_callback(char*, unsigned char*, unsigned int)+0x126a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2519
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
   12386:	61 e0       	ldi	r22, 0x01	; 1
   12388:	87 2d       	mov	r24, r7
   1238a:	0e 94 04 d1 	call	0x1a208	; 0x1a208 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2520
          change_term_mode = 1;
   1238e:	c0 92 9a 09 	sts	0x099A, r12	; 0x80099a <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2522
        }
        if ((cnt == 1) && (strcmp(pch, "input") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
   12392:	6f eb       	ldi	r22, 0xBF	; 191
   12394:	76 e0       	ldi	r23, 0x06	; 6
   12396:	c8 01       	movw	r24, r16
   12398:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   1239c:	89 2b       	or	r24, r25
   1239e:	69 f4       	brne	.+26     	; 0x123ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x1296>
   123a0:	85 e0       	ldi	r24, 0x05	; 5
   123a2:	99 e0       	ldi	r25, 0x09	; 9
   123a4:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
   123a8:	7d 9c       	mul	r7, r13
   123aa:	90 01       	movw	r18, r0
   123ac:	11 24       	eor	r1, r1
   123ae:	68 2f       	mov	r22, r24
   123b0:	c9 01       	movw	r24, r18
   123b2:	84 5a       	subi	r24, 0xA4	; 164
   123b4:	9e 4f       	sbci	r25, 0xFE	; 254
   123b6:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2524
        //if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
   123ba:	64 ef       	ldi	r22, 0xF4	; 244
   123bc:	73 e0       	ldi	r23, 0x03	; 3
   123be:	c8 01       	movw	r24, r16
   123c0:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   123c4:	89 2b       	or	r24, r25
   123c6:	69 f4       	brne	.+26     	; 0x123e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12be>
   123c8:	85 e0       	ldi	r24, 0x05	; 5
   123ca:	99 e0       	ldi	r25, 0x09	; 9
   123cc:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
thermostat_ring_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
   123d0:	7d 9c       	mul	r7, r13
   123d2:	90 01       	movw	r18, r0
   123d4:	11 24       	eor	r1, r1
   123d6:	68 2f       	mov	r22, r24
   123d8:	c9 01       	movw	r24, r18
   123da:	83 5a       	subi	r24, 0xA3	; 163
   123dc:	9e 4f       	sbci	r25, 0xFE	; 254
   123de:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2525
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
   123e2:	65 ec       	ldi	r22, 0xC5	; 197
   123e4:	76 e0       	ldi	r23, 0x06	; 6
   123e6:	c8 01       	movw	r24, r16
   123e8:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   123ec:	89 2b       	or	r24, r25
   123ee:	69 f4       	brne	.+26     	; 0x1240a <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e6>
   123f0:	85 e0       	ldi	r24, 0x05	; 5
   123f2:	99 e0       	ldi	r25, 0x09	; 9
   123f4:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
thermostat_ring_set_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
   123f8:	7d 9c       	mul	r7, r13
   123fa:	90 01       	movw	r18, r0
   123fc:	11 24       	eor	r1, r1
   123fe:	68 2f       	mov	r22, r24
   12400:	c9 01       	movw	r24, r18
   12402:	81 5a       	subi	r24, 0xA1	; 161
   12404:	9e 4f       	sbci	r25, 0xFE	; 254
   12406:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2526
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
   1240a:	6c ec       	ldi	r22, 0xCC	; 204
   1240c:	76 e0       	ldi	r23, 0x06	; 6
   1240e:	c8 01       	movw	r24, r16
   12410:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12414:	89 2b       	or	r24, r25
   12416:	a1 f4       	brne	.+40     	; 0x12440 <mqtt_callback(char*, unsigned char*, unsigned int)+0x131c>
   12418:	85 e0       	ldi	r24, 0x05	; 5
   1241a:	99 e0       	ldi	r25, 0x09	; 9
   1241c:	0e 94 19 e5 	call	0x1ca32	; 0x1ca32 <atof>
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
   12420:	24 e0       	ldi	r18, 0x04	; 4
   12422:	72 9e       	mul	r7, r18
   12424:	f0 01       	movw	r30, r0
   12426:	11 24       	eor	r1, r1
   12428:	e8 54       	subi	r30, 0x48	; 72
   1242a:	f5 4f       	sbci	r31, 0xF5	; 245
   1242c:	60 83       	st	Z, r22
   1242e:	71 83       	std	Z+1, r23	; 0x01
   12430:	82 83       	std	Z+2, r24	; 0x02
   12432:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
   12434:	87 2d       	mov	r24, r7
   12436:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
   1243a:	87 2d       	mov	r24, r7
   1243c:	0e 94 8e 61 	call	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2527
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
   12440:	63 ed       	ldi	r22, 0xD3	; 211
   12442:	76 e0       	ldi	r23, 0x06	; 6
   12444:	c8 01       	movw	r24, r16
   12446:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   1244a:	89 2b       	or	r24, r25
   1244c:	a1 f4       	brne	.+40     	; 0x12476 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1352>
   1244e:	85 e0       	ldi	r24, 0x05	; 5
   12450:	99 e0       	ldi	r25, 0x09	; 9
   12452:	0e 94 19 e5 	call	0x1ca32	; 0x1ca32 <atof>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
   12456:	a4 e0       	ldi	r26, 0x04	; 4
   12458:	7a 9e       	mul	r7, r26
   1245a:	f0 01       	movw	r30, r0
   1245c:	11 24       	eor	r1, r1
   1245e:	e4 53       	subi	r30, 0x34	; 52
   12460:	f5 4f       	sbci	r31, 0xF5	; 245
   12462:	60 83       	st	Z, r22
   12464:	71 83       	std	Z+1, r23	; 0x01
   12466:	82 83       	std	Z+2, r24	; 0x02
   12468:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
   1246a:	87 2d       	mov	r24, r7
   1246c:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
   12470:	87 2d       	mov	r24, r7
   12472:	0e 94 8e 61 	call	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2528
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
   12476:	6a ed       	ldi	r22, 0xDA	; 218
   12478:	76 e0       	ldi	r23, 0x06	; 6
   1247a:	c8 01       	movw	r24, r16
   1247c:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12480:	89 2b       	or	r24, r25
   12482:	a1 f4       	brne	.+40     	; 0x124ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x1388>
   12484:	85 e0       	ldi	r24, 0x05	; 5
   12486:	99 e0       	ldi	r25, 0x09	; 9
   12488:	0e 94 19 e5 	call	0x1ca32	; 0x1ca32 <atof>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
   1248c:	b4 e0       	ldi	r27, 0x04	; 4
   1248e:	7b 9e       	mul	r7, r27
   12490:	f0 01       	movw	r30, r0
   12492:	11 24       	eor	r1, r1
   12494:	e0 52       	subi	r30, 0x20	; 32
   12496:	f5 4f       	sbci	r31, 0xF5	; 245
   12498:	60 83       	st	Z, r22
   1249a:	71 83       	std	Z+1, r23	; 0x01
   1249c:	82 83       	std	Z+2, r24	; 0x02
   1249e:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
   124a0:	87 2d       	mov	r24, r7
   124a2:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
   124a6:	87 2d       	mov	r24, r7
   124a8:	0e 94 8e 61 	call	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2529
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
   124ac:	61 ee       	ldi	r22, 0xE1	; 225
   124ae:	76 e0       	ldi	r23, 0x06	; 6
   124b0:	c8 01       	movw	r24, r16
   124b2:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   124b6:	89 2b       	or	r24, r25
   124b8:	79 f4       	brne	.+30     	; 0x124d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b4>
   124ba:	85 e0       	ldi	r24, 0x05	; 5
   124bc:	99 e0       	ldi	r25, 0x09	; 9
   124be:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
   124c2:	e7 2d       	mov	r30, r7
   124c4:	f0 e0       	ldi	r31, 0x00	; 0
   124c6:	ec 50       	subi	r30, 0x0C	; 12
   124c8:	f5 4f       	sbci	r31, 0xF5	; 245
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2529
   124ca:	80 83       	st	Z, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
   124cc:	87 2d       	mov	r24, r7
   124ce:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
   124d2:	87 2d       	mov	r24, r7
   124d4:	0e 94 8e 61 	call	0xc31c	; 0xc31c <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2535
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
   124d8:	60 e9       	ldi	r22, 0x90	; 144
   124da:	75 e0       	ldi	r23, 0x05	; 5
   124dc:	90 e0       	ldi	r25, 0x00	; 0
   124de:	80 e0       	ldi	r24, 0x00	; 0
   124e0:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
   124e4:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2536
      cnt++;
   124e6:	e3 94       	inc	r14
   124e8:	5f ce       	rjmp	.-834    	; 0x121a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1084>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2541
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
   124ea:	64 ef       	ldi	r22, 0xF4	; 244
   124ec:	7e e6       	ldi	r23, 0x6E	; 110
   124ee:	c5 01       	movw	r24, r10
   124f0:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2542
  strcat(str1, device.nazev);
   124f4:	6f e2       	ldi	r22, 0x2F	; 47
   124f6:	7e e0       	ldi	r23, 0x0E	; 14
   124f8:	c5 01       	movw	r24, r10
   124fa:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2543
  strcat(str1, "/ring/clear");
   124fe:	62 ec       	ldi	r22, 0xC2	; 194
   12500:	75 e0       	ldi	r23, 0x05	; 5
   12502:	c5 01       	movw	r24, r10
   12504:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2544
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12508:	f5 01       	movw	r30, r10
   1250a:	01 90       	ld	r0, Z+
   1250c:	00 20       	and	r0, r0
   1250e:	e9 f7       	brne	.-6      	; 0x1250a <mqtt_callback(char*, unsigned char*, unsigned int)+0x13e6>
   12510:	31 97       	sbiw	r30, 0x01	; 1
   12512:	af 01       	movw	r20, r30
   12514:	4a 19       	sub	r20, r10
   12516:	5b 09       	sbc	r21, r11
   12518:	b4 01       	movw	r22, r8
   1251a:	c5 01       	movw	r24, r10
   1251c:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   12520:	89 2b       	or	r24, r25
   12522:	a1 f4       	brne	.+40     	; 0x1254c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1428>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2546
  {
    mqtt_process_message++;
   12524:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12528:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   1252c:	01 96       	adiw	r24, 0x01	; 1
   1252e:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12532:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2547
    id = atoi(my_payload);
   12536:	85 e0       	ldi	r24, 0x05	; 5
   12538:	99 e0       	ldi	r25, 0x09	; 9
   1253a:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   1253e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2548
    if (id < MAX_THERMOSTAT)
   12540:	e4 e0       	ldi	r30, 0x04	; 4
   12542:	e8 17       	cp	r30, r24
   12544:	08 f4       	brcc	.+2      	; 0x12548 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1424>
   12546:	9c c1       	rjmp	.+824    	; 0x12880 <mqtt_callback(char*, unsigned char*, unsigned int)+0x175c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2550
    {
      thermostat_ring_clear(id);
   12548:	0e 94 f0 62 	call	0xc5e0	; 0xc5e0 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2561
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
   1254c:	64 ef       	ldi	r22, 0xF4	; 244
   1254e:	7e e6       	ldi	r23, 0x6E	; 110
   12550:	c5 01       	movw	r24, r10
   12552:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2562
  strcat(str1, device.nazev);
   12556:	6f e2       	ldi	r22, 0x2F	; 47
   12558:	7e e0       	ldi	r23, 0x0E	; 14
   1255a:	c5 01       	movw	r24, r10
   1255c:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2563
  strcat(str1, "/network/get/config");
   12560:	60 ee       	ldi	r22, 0xE0	; 224
   12562:	75 e0       	ldi	r23, 0x05	; 5
   12564:	c5 01       	movw	r24, r10
   12566:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2564
  if (strncmp(str1, topic, strlen(str1)) == 0)
   1256a:	f5 01       	movw	r30, r10
   1256c:	01 90       	ld	r0, Z+
   1256e:	00 20       	and	r0, r0
   12570:	e9 f7       	brne	.-6      	; 0x1256c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1448>
   12572:	31 97       	sbiw	r30, 0x01	; 1
   12574:	af 01       	movw	r20, r30
   12576:	4a 19       	sub	r20, r10
   12578:	5b 09       	sbc	r21, r11
   1257a:	b4 01       	movw	r22, r8
   1257c:	c5 01       	movw	r24, r10
   1257e:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   12582:	89 2b       	or	r24, r25
   12584:	09 f0       	breq	.+2      	; 0x12588 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1464>
   12586:	2f c1       	rjmp	.+606    	; 0x127e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x16c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2566
  {
    mqtt_process_message++;
   12588:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   1258c:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12590:	01 96       	adiw	r24, 0x01	; 1
   12592:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12596:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
send_network_config():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:263
//// thermctl-out/XXXXX/network/name
void send_network_config(PubSubClient *mqtt_client)
{
  char payload[20];
  char str_topic[32];
  payload[0] = 0;
   1259a:	c8 5d       	subi	r28, 0xD8	; 216
   1259c:	de 4f       	sbci	r29, 0xFE	; 254
   1259e:	18 82       	st	Y, r1
   125a0:	c8 52       	subi	r28, 0x28	; 40
   125a2:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:264
  createString(payload, ':', device.mac, 6, 16);
   125a4:	00 e1       	ldi	r16, 0x10	; 16
   125a6:	26 e0       	ldi	r18, 0x06	; 6
   125a8:	49 e1       	ldi	r20, 0x19	; 25
   125aa:	5e e0       	ldi	r21, 0x0E	; 14
   125ac:	6a e3       	ldi	r22, 0x3A	; 58
   125ae:	ce 01       	movw	r24, r28
   125b0:	88 5d       	subi	r24, 0xD8	; 216
   125b2:	9e 4f       	sbci	r25, 0xFE	; 254
   125b4:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:265
  strcpy_P(str_topic, network_mac);
   125b8:	6b e4       	ldi	r22, 0x4B	; 75
   125ba:	7e e6       	ldi	r23, 0x6E	; 110
   125bc:	ce 01       	movw	r24, r28
   125be:	88 5b       	subi	r24, 0xB8	; 184
   125c0:	9f 4f       	sbci	r25, 0xFF	; 255
   125c2:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:266
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   125c6:	ae 01       	movw	r20, r28
   125c8:	48 5d       	subi	r20, 0xD8	; 216
   125ca:	5e 4f       	sbci	r21, 0xFE	; 254
   125cc:	be 01       	movw	r22, r28
   125ce:	68 5b       	subi	r22, 0xB8	; 184
   125d0:	7f 4f       	sbci	r23, 0xFF	; 255
   125d2:	8f e2       	ldi	r24, 0x2F	; 47
   125d4:	90 e1       	ldi	r25, 0x10	; 16
   125d6:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:268
  ///
  payload[0] = 0;
   125da:	c8 5d       	subi	r28, 0xD8	; 216
   125dc:	de 4f       	sbci	r29, 0xFE	; 254
   125de:	18 82       	st	Y, r1
   125e0:	c8 52       	subi	r28, 0x28	; 40
   125e2:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:269
  createString(payload, '.', device.myIP, 4, 10);
   125e4:	0a e0       	ldi	r16, 0x0A	; 10
   125e6:	24 e0       	ldi	r18, 0x04	; 4
   125e8:	4f e1       	ldi	r20, 0x1F	; 31
   125ea:	5e e0       	ldi	r21, 0x0E	; 14
   125ec:	6e e2       	ldi	r22, 0x2E	; 46
   125ee:	ce 01       	movw	r24, r28
   125f0:	88 5d       	subi	r24, 0xD8	; 216
   125f2:	9e 4f       	sbci	r25, 0xFE	; 254
   125f4:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:270
  strcpy_P(str_topic, network_ip);
   125f8:	6e e6       	ldi	r22, 0x6E	; 110
   125fa:	75 e7       	ldi	r23, 0x75	; 117
   125fc:	ce 01       	movw	r24, r28
   125fe:	88 5b       	subi	r24, 0xB8	; 184
   12600:	9f 4f       	sbci	r25, 0xFF	; 255
   12602:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:271
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   12606:	ae 01       	movw	r20, r28
   12608:	48 5d       	subi	r20, 0xD8	; 216
   1260a:	5e 4f       	sbci	r21, 0xFE	; 254
   1260c:	be 01       	movw	r22, r28
   1260e:	68 5b       	subi	r22, 0xB8	; 184
   12610:	7f 4f       	sbci	r23, 0xFF	; 255
   12612:	8f e2       	ldi	r24, 0x2F	; 47
   12614:	90 e1       	ldi	r25, 0x10	; 16
   12616:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:273
  ///
  payload[0] = 0;
   1261a:	c8 5d       	subi	r28, 0xD8	; 216
   1261c:	de 4f       	sbci	r29, 0xFE	; 254
   1261e:	18 82       	st	Y, r1
   12620:	c8 52       	subi	r28, 0x28	; 40
   12622:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:274
  createString(payload, '.', device.myMASK, 4, 10);
   12624:	24 e0       	ldi	r18, 0x04	; 4
   12626:	43 e2       	ldi	r20, 0x23	; 35
   12628:	5e e0       	ldi	r21, 0x0E	; 14
   1262a:	6e e2       	ldi	r22, 0x2E	; 46
   1262c:	ce 01       	movw	r24, r28
   1262e:	88 5d       	subi	r24, 0xD8	; 216
   12630:	9e 4f       	sbci	r25, 0xFE	; 254
   12632:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:275
  strcpy_P(str_topic, network_netmask);
   12636:	6b e3       	ldi	r22, 0x3B	; 59
   12638:	7e e6       	ldi	r23, 0x6E	; 110
   1263a:	ce 01       	movw	r24, r28
   1263c:	88 5b       	subi	r24, 0xB8	; 184
   1263e:	9f 4f       	sbci	r25, 0xFF	; 255
   12640:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:276
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   12644:	ae 01       	movw	r20, r28
   12646:	48 5d       	subi	r20, 0xD8	; 216
   12648:	5e 4f       	sbci	r21, 0xFE	; 254
   1264a:	be 01       	movw	r22, r28
   1264c:	68 5b       	subi	r22, 0xB8	; 184
   1264e:	7f 4f       	sbci	r23, 0xFF	; 255
   12650:	8f e2       	ldi	r24, 0x2F	; 47
   12652:	90 e1       	ldi	r25, 0x10	; 16
   12654:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:278
  ///
  payload[0] = 0;
   12658:	c8 5d       	subi	r28, 0xD8	; 216
   1265a:	de 4f       	sbci	r29, 0xFE	; 254
   1265c:	18 82       	st	Y, r1
   1265e:	c8 52       	subi	r28, 0x28	; 40
   12660:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:279
  createString(payload, '.', device.myGW, 4, 10);
   12662:	24 e0       	ldi	r18, 0x04	; 4
   12664:	4b e2       	ldi	r20, 0x2B	; 43
   12666:	5e e0       	ldi	r21, 0x0E	; 14
   12668:	6e e2       	ldi	r22, 0x2E	; 46
   1266a:	ce 01       	movw	r24, r28
   1266c:	88 5d       	subi	r24, 0xD8	; 216
   1266e:	9e 4f       	sbci	r25, 0xFE	; 254
   12670:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:280
  strcpy_P(str_topic, network_gw);
   12674:	60 e3       	ldi	r22, 0x30	; 48
   12676:	7e e6       	ldi	r23, 0x6E	; 110
   12678:	ce 01       	movw	r24, r28
   1267a:	88 5b       	subi	r24, 0xB8	; 184
   1267c:	9f 4f       	sbci	r25, 0xFF	; 255
   1267e:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:281
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   12682:	ae 01       	movw	r20, r28
   12684:	48 5d       	subi	r20, 0xD8	; 216
   12686:	5e 4f       	sbci	r21, 0xFE	; 254
   12688:	be 01       	movw	r22, r28
   1268a:	68 5b       	subi	r22, 0xB8	; 184
   1268c:	7f 4f       	sbci	r23, 0xFF	; 255
   1268e:	8f e2       	ldi	r24, 0x2F	; 47
   12690:	90 e1       	ldi	r25, 0x10	; 16
   12692:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:283
  ///
  payload[0] = 0;
   12696:	c8 5d       	subi	r28, 0xD8	; 216
   12698:	de 4f       	sbci	r29, 0xFE	; 254
   1269a:	18 82       	st	Y, r1
   1269c:	c8 52       	subi	r28, 0x28	; 40
   1269e:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:284
  createString(payload, '.', device.myDNS, 4, 10);
   126a0:	24 e0       	ldi	r18, 0x04	; 4
   126a2:	47 e2       	ldi	r20, 0x27	; 39
   126a4:	5e e0       	ldi	r21, 0x0E	; 14
   126a6:	6e e2       	ldi	r22, 0x2E	; 46
   126a8:	ce 01       	movw	r24, r28
   126aa:	88 5d       	subi	r24, 0xD8	; 216
   126ac:	9e 4f       	sbci	r25, 0xFE	; 254
   126ae:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:285
  strcpy_P(str_topic, network_dns);
   126b2:	64 e2       	ldi	r22, 0x24	; 36
   126b4:	7e e6       	ldi	r23, 0x6E	; 110
   126b6:	ce 01       	movw	r24, r28
   126b8:	88 5b       	subi	r24, 0xB8	; 184
   126ba:	9f 4f       	sbci	r25, 0xFF	; 255
   126bc:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:286
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   126c0:	ae 01       	movw	r20, r28
   126c2:	48 5d       	subi	r20, 0xD8	; 216
   126c4:	5e 4f       	sbci	r21, 0xFE	; 254
   126c6:	be 01       	movw	r22, r28
   126c8:	68 5b       	subi	r22, 0xB8	; 184
   126ca:	7f 4f       	sbci	r23, 0xFF	; 255
   126cc:	8f e2       	ldi	r24, 0x2F	; 47
   126ce:	90 e1       	ldi	r25, 0x10	; 16
   126d0:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:288
  ///
  payload[0] = 0;
   126d4:	c8 5d       	subi	r28, 0xD8	; 216
   126d6:	de 4f       	sbci	r29, 0xFE	; 254
   126d8:	18 82       	st	Y, r1
   126da:	c8 52       	subi	r28, 0x28	; 40
   126dc:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:289
  createString(payload, '.', device.ntp_server, 4, 10);
   126de:	24 e0       	ldi	r18, 0x04	; 4
   126e0:	47 e6       	ldi	r20, 0x67	; 103
   126e2:	5e e0       	ldi	r21, 0x0E	; 14
   126e4:	6e e2       	ldi	r22, 0x2E	; 46
   126e6:	ce 01       	movw	r24, r28
   126e8:	88 5d       	subi	r24, 0xD8	; 216
   126ea:	9e 4f       	sbci	r25, 0xFE	; 254
   126ec:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:290
  strcpy_P(str_topic, network_ntp);
   126f0:	68 e1       	ldi	r22, 0x18	; 24
   126f2:	7e e6       	ldi	r23, 0x6E	; 110
   126f4:	ce 01       	movw	r24, r28
   126f6:	88 5b       	subi	r24, 0xB8	; 184
   126f8:	9f 4f       	sbci	r25, 0xFF	; 255
   126fa:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:291
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   126fe:	ae 01       	movw	r20, r28
   12700:	48 5d       	subi	r20, 0xD8	; 216
   12702:	5e 4f       	sbci	r21, 0xFE	; 254
   12704:	be 01       	movw	r22, r28
   12706:	68 5b       	subi	r22, 0xB8	; 184
   12708:	7f 4f       	sbci	r23, 0xFF	; 255
   1270a:	8f e2       	ldi	r24, 0x2F	; 47
   1270c:	90 e1       	ldi	r25, 0x10	; 16
   1270e:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:293
  ///
  payload[0] = 0;
   12712:	c8 5d       	subi	r28, 0xD8	; 216
   12714:	de 4f       	sbci	r29, 0xFE	; 254
   12716:	18 82       	st	Y, r1
   12718:	c8 52       	subi	r28, 0x28	; 40
   1271a:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:294
  createString(payload, '.', device.mqtt_server, 4, 10);
   1271c:	24 e0       	ldi	r18, 0x04	; 4
   1271e:	49 e3       	ldi	r20, 0x39	; 57
   12720:	5e e0       	ldi	r21, 0x0E	; 14
   12722:	6e e2       	ldi	r22, 0x2E	; 46
   12724:	ce 01       	movw	r24, r28
   12726:	88 5d       	subi	r24, 0xD8	; 216
   12728:	9e 4f       	sbci	r25, 0xFE	; 254
   1272a:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:295
  strcpy_P(str_topic, network_mqtt_host);
   1272e:	66 e0       	ldi	r22, 0x06	; 6
   12730:	7e e6       	ldi	r23, 0x6E	; 110
   12732:	ce 01       	movw	r24, r28
   12734:	88 5b       	subi	r24, 0xB8	; 184
   12736:	9f 4f       	sbci	r25, 0xFF	; 255
   12738:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:296
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1273c:	ae 01       	movw	r20, r28
   1273e:	48 5d       	subi	r20, 0xD8	; 216
   12740:	5e 4f       	sbci	r21, 0xFE	; 254
   12742:	be 01       	movw	r22, r28
   12744:	68 5b       	subi	r22, 0xB8	; 184
   12746:	7f 4f       	sbci	r23, 0xFF	; 255
   12748:	8f e2       	ldi	r24, 0x2F	; 47
   1274a:	90 e1       	ldi	r25, 0x10	; 16
   1274c:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
   12750:	4a e0       	ldi	r20, 0x0A	; 10
   12752:	be 01       	movw	r22, r28
   12754:	68 5d       	subi	r22, 0xD8	; 216
   12756:	7e 4f       	sbci	r23, 0xFE	; 254
   12758:	80 91 3d 0e 	lds	r24, 0x0E3D	; 0x800e3d <device+0x24>
   1275c:	90 91 3e 0e 	lds	r25, 0x0E3E	; 0x800e3e <device+0x25>
   12760:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_network_config():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:299
  ///
  itoa(device.mqtt_port, payload, 10);
  strcpy_P(str_topic, network_mqtt_port);
   12764:	64 ef       	ldi	r22, 0xF4	; 244
   12766:	7d e6       	ldi	r23, 0x6D	; 109
   12768:	ce 01       	movw	r24, r28
   1276a:	88 5b       	subi	r24, 0xB8	; 184
   1276c:	9f 4f       	sbci	r25, 0xFF	; 255
   1276e:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:300
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   12772:	ae 01       	movw	r20, r28
   12774:	48 5d       	subi	r20, 0xD8	; 216
   12776:	5e 4f       	sbci	r21, 0xFE	; 254
   12778:	be 01       	movw	r22, r28
   1277a:	68 5b       	subi	r22, 0xB8	; 184
   1277c:	7f 4f       	sbci	r23, 0xFF	; 255
   1277e:	8f e2       	ldi	r24, 0x2F	; 47
   12780:	90 e1       	ldi	r25, 0x10	; 16
   12782:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:302
  ///
  strcpy_P(str_topic, network_mqtt_user);
   12786:	62 ee       	ldi	r22, 0xE2	; 226
   12788:	7d e6       	ldi	r23, 0x6D	; 109
   1278a:	ce 01       	movw	r24, r28
   1278c:	88 5b       	subi	r24, 0xB8	; 184
   1278e:	9f 4f       	sbci	r25, 0xFF	; 255
   12790:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:303
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_user);
   12794:	4f e3       	ldi	r20, 0x3F	; 63
   12796:	5e e0       	ldi	r21, 0x0E	; 14
   12798:	be 01       	movw	r22, r28
   1279a:	68 5b       	subi	r22, 0xB8	; 184
   1279c:	7f 4f       	sbci	r23, 0xFF	; 255
   1279e:	8f e2       	ldi	r24, 0x2F	; 47
   127a0:	90 e1       	ldi	r25, 0x10	; 16
   127a2:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:305
  ///
  strcpy_P(str_topic, network_mqtt_key);
   127a6:	61 ed       	ldi	r22, 0xD1	; 209
   127a8:	7d e6       	ldi	r23, 0x6D	; 109
   127aa:	ce 01       	movw	r24, r28
   127ac:	88 5b       	subi	r24, 0xB8	; 184
   127ae:	9f 4f       	sbci	r25, 0xFF	; 255
   127b0:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:306
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_key);
   127b4:	43 e5       	ldi	r20, 0x53	; 83
   127b6:	5e e0       	ldi	r21, 0x0E	; 14
   127b8:	be 01       	movw	r22, r28
   127ba:	68 5b       	subi	r22, 0xB8	; 184
   127bc:	7f 4f       	sbci	r23, 0xFF	; 255
   127be:	8f e2       	ldi	r24, 0x2F	; 47
   127c0:	90 e1       	ldi	r25, 0x10	; 16
   127c2:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:308
  ///
  strcpy_P(str_topic, network_name);
   127c6:	64 ec       	ldi	r22, 0xC4	; 196
   127c8:	7d e6       	ldi	r23, 0x6D	; 109
   127ca:	ce 01       	movw	r24, r28
   127cc:	88 5b       	subi	r24, 0xB8	; 184
   127ce:	9f 4f       	sbci	r25, 0xFF	; 255
   127d0:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:309
  send_mqtt_general_payload(mqtt_client, str_topic, device.nazev);
   127d4:	4f e2       	ldi	r20, 0x2F	; 47
   127d6:	5e e0       	ldi	r21, 0x0E	; 14
   127d8:	be 01       	movw	r22, r28
   127da:	68 5b       	subi	r22, 0xB8	; 184
   127dc:	7f 4f       	sbci	r23, 0xFF	; 255
   127de:	8f e2       	ldi	r24, 0x2F	; 47
   127e0:	90 e1       	ldi	r25, 0x10	; 16
   127e2:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2581
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
   127e6:	64 ef       	ldi	r22, 0xF4	; 244
   127e8:	7e e6       	ldi	r23, 0x6E	; 110
   127ea:	c5 01       	movw	r24, r10
   127ec:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
  strcat(str1, device.nazev);
   127f0:	6f e2       	ldi	r22, 0x2F	; 47
   127f2:	7e e0       	ldi	r23, 0x0E	; 14
   127f4:	c5 01       	movw	r24, r10
   127f6:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2583
  strcat(str1, "/network/set/");
   127fa:	64 ef       	ldi	r22, 0xF4	; 244
   127fc:	75 e0       	ldi	r23, 0x05	; 5
   127fe:	c5 01       	movw	r24, r10
   12800:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2584
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12804:	f5 01       	movw	r30, r10
   12806:	01 90       	ld	r0, Z+
   12808:	00 20       	and	r0, r0
   1280a:	e9 f7       	brne	.-6      	; 0x12806 <mqtt_callback(char*, unsigned char*, unsigned int)+0x16e2>
   1280c:	31 97       	sbiw	r30, 0x01	; 1
   1280e:	af 01       	movw	r20, r30
   12810:	4a 19       	sub	r20, r10
   12812:	5b 09       	sbc	r21, r11
   12814:	b4 01       	movw	r22, r8
   12816:	c5 01       	movw	r24, r10
   12818:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   1281c:	89 2b       	or	r24, r25
   1281e:	09 f0       	breq	.+2      	; 0x12822 <mqtt_callback(char*, unsigned char*, unsigned int)+0x16fe>
   12820:	04 c1       	rjmp	.+520    	; 0x12a2a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1906>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2586
  {
    mqtt_process_message++;
   12822:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12826:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   1282a:	01 96       	adiw	r24, 0x01	; 1
   1282c:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12830:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2588
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12834:	f5 01       	movw	r30, r10
   12836:	01 90       	ld	r0, Z+
   12838:	00 20       	and	r0, r0
   1283a:	e9 f7       	brne	.-6      	; 0x12836 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1712>
   1283c:	31 97       	sbiw	r30, 0x01	; 1
   1283e:	ea 19       	sub	r30, r10
   12840:	fb 09       	sbc	r31, r11
   12842:	9e 2f       	mov	r25, r30
   12844:	4e 2f       	mov	r20, r30
   12846:	84 2f       	mov	r24, r20
   12848:	89 1b       	sub	r24, r25
   1284a:	24 2f       	mov	r18, r20
   1284c:	30 e0       	ldi	r19, 0x00	; 0
   1284e:	d4 01       	movw	r26, r8
   12850:	0d 90       	ld	r0, X+
   12852:	00 20       	and	r0, r0
   12854:	e9 f7       	brne	.-6      	; 0x12850 <mqtt_callback(char*, unsigned char*, unsigned int)+0x172c>
   12856:	11 97       	sbiw	r26, 0x01	; 1
   12858:	a8 19       	sub	r26, r8
   1285a:	b9 09       	sbc	r27, r9
   1285c:	2a 17       	cp	r18, r26
   1285e:	3b 07       	cpc	r19, r27
   12860:	a0 f4       	brcc	.+40     	; 0x1288a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2590
    {
      str1[cnt] = topic[f];
   12862:	a8 ec       	ldi	r26, 0xC8	; 200
   12864:	b0 e0       	ldi	r27, 0x00	; 0
   12866:	ac 0f       	add	r26, r28
   12868:	bd 1f       	adc	r27, r29
   1286a:	a8 0f       	add	r26, r24
   1286c:	b1 1d       	adc	r27, r1
   1286e:	28 0d       	add	r18, r8
   12870:	39 1d       	adc	r19, r9
   12872:	f9 01       	movw	r30, r18
   12874:	80 81       	ld	r24, Z
   12876:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2591
      str1[cnt + 1] = 0;
   12878:	11 96       	adiw	r26, 0x01	; 1
   1287a:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2588
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   1287c:	4f 5f       	subi	r20, 0xFF	; 255
   1287e:	e3 cf       	rjmp	.-58     	; 0x12846 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1722>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
   12880:	8e ec       	ldi	r24, 0xCE	; 206
   12882:	95 e0       	ldi	r25, 0x05	; 5
   12884:	0e 94 da c6 	call	0x18db4	; 0x18db4 <log_error(PubSubClient*, char*) [clone .constprop.125]>
   12888:	61 ce       	rjmp	.-830    	; 0x1254c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1428>
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:94
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
  pch = strtok (data, "/");
   1288a:	60 e9       	ldi	r22, 0x90	; 144
   1288c:	75 e0       	ldi	r23, 0x05	; 5
   1288e:	ce 01       	movw	r24, r28
   12890:	88 53       	subi	r24, 0x38	; 56
   12892:	9f 4f       	sbci	r25, 0xFF	; 255
   12894:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
   12898:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:93
uint8_t setting_network(char *data, char *my_payload)
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
   1289a:	10 e0       	ldi	r17, 0x00	; 0
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:95
  pch = strtok (data, "/");
  while (pch != NULL)
   1289c:	e1 14       	cp	r14, r1
   1289e:	f1 04       	cpc	r15, r1
   128a0:	09 f4       	brne	.+2      	; 0x128a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1780>
   128a2:	b7 c0       	rjmp	.+366    	; 0x12a12 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18ee>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:97
  {
    if (strcmp(pch, "mac") == 0)
   128a4:	62 e0       	ldi	r22, 0x02	; 2
   128a6:	76 e0       	ldi	r23, 0x06	; 6
   128a8:	c7 01       	movw	r24, r14
   128aa:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   128ae:	89 2b       	or	r24, r25
   128b0:	51 f4       	brne	.+20     	; 0x128c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17a2>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:99
    {
      parseBytes(my_payload, ':', device.mac, 6, 10);
   128b2:	26 e0       	ldi	r18, 0x06	; 6
   128b4:	30 e0       	ldi	r19, 0x00	; 0
   128b6:	49 e1       	ldi	r20, 0x19	; 25
   128b8:	5e e0       	ldi	r21, 0x0E	; 14
   128ba:	6a e3       	ldi	r22, 0x3A	; 58
   128bc:	85 e0       	ldi	r24, 0x05	; 5
   128be:	99 e0       	ldi	r25, 0x09	; 9
   128c0:	0e 94 81 b0 	call	0x16102	; 0x16102 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:100
      cnt = 1;
   128c4:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:102
    }
    if (strcmp(pch, "ip") == 0)
   128c6:	66 e0       	ldi	r22, 0x06	; 6
   128c8:	76 e0       	ldi	r23, 0x06	; 6
   128ca:	c7 01       	movw	r24, r14
   128cc:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   128d0:	89 2b       	or	r24, r25
   128d2:	51 f4       	brne	.+20     	; 0x128e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17c4>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:104
    {
      parseBytes(my_payload, '.', device.myIP, 4, 10);
   128d4:	24 e0       	ldi	r18, 0x04	; 4
   128d6:	30 e0       	ldi	r19, 0x00	; 0
   128d8:	4f e1       	ldi	r20, 0x1F	; 31
   128da:	5e e0       	ldi	r21, 0x0E	; 14
   128dc:	6e e2       	ldi	r22, 0x2E	; 46
   128de:	85 e0       	ldi	r24, 0x05	; 5
   128e0:	99 e0       	ldi	r25, 0x09	; 9
   128e2:	0e 94 81 b0 	call	0x16102	; 0x16102 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:105
      cnt = 1;
   128e6:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:107
    }
    if (strcmp(pch, "netmask") == 0)
   128e8:	69 e0       	ldi	r22, 0x09	; 9
   128ea:	76 e0       	ldi	r23, 0x06	; 6
   128ec:	c7 01       	movw	r24, r14
   128ee:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   128f2:	89 2b       	or	r24, r25
   128f4:	51 f4       	brne	.+20     	; 0x1290a <mqtt_callback(char*, unsigned char*, unsigned int)+0x17e6>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:109
    {
      parseBytes(my_payload, '.', device.myMASK, 4, 10);
   128f6:	24 e0       	ldi	r18, 0x04	; 4
   128f8:	30 e0       	ldi	r19, 0x00	; 0
   128fa:	43 e2       	ldi	r20, 0x23	; 35
   128fc:	5e e0       	ldi	r21, 0x0E	; 14
   128fe:	6e e2       	ldi	r22, 0x2E	; 46
   12900:	85 e0       	ldi	r24, 0x05	; 5
   12902:	99 e0       	ldi	r25, 0x09	; 9
   12904:	0e 94 81 b0 	call	0x16102	; 0x16102 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:110
      cnt = 1;
   12908:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:112
    }
    if (strcmp(pch, "gw") == 0)
   1290a:	61 e1       	ldi	r22, 0x11	; 17
   1290c:	76 e0       	ldi	r23, 0x06	; 6
   1290e:	c7 01       	movw	r24, r14
   12910:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12914:	89 2b       	or	r24, r25
   12916:	51 f4       	brne	.+20     	; 0x1292c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1808>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:114
    {
      parseBytes(my_payload, '.', device.myGW, 4, 10);
   12918:	24 e0       	ldi	r18, 0x04	; 4
   1291a:	30 e0       	ldi	r19, 0x00	; 0
   1291c:	4b e2       	ldi	r20, 0x2B	; 43
   1291e:	5e e0       	ldi	r21, 0x0E	; 14
   12920:	6e e2       	ldi	r22, 0x2E	; 46
   12922:	85 e0       	ldi	r24, 0x05	; 5
   12924:	99 e0       	ldi	r25, 0x09	; 9
   12926:	0e 94 81 b0 	call	0x16102	; 0x16102 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:115
      cnt = 1;
   1292a:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:117
    }
    if (strcmp(pch, "dns") == 0)
   1292c:	64 e1       	ldi	r22, 0x14	; 20
   1292e:	76 e0       	ldi	r23, 0x06	; 6
   12930:	c7 01       	movw	r24, r14
   12932:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12936:	89 2b       	or	r24, r25
   12938:	51 f4       	brne	.+20     	; 0x1294e <mqtt_callback(char*, unsigned char*, unsigned int)+0x182a>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:119
    {
      parseBytes(my_payload, '.', device.myDNS, 4, 10);
   1293a:	24 e0       	ldi	r18, 0x04	; 4
   1293c:	30 e0       	ldi	r19, 0x00	; 0
   1293e:	47 e2       	ldi	r20, 0x27	; 39
   12940:	5e e0       	ldi	r21, 0x0E	; 14
   12942:	6e e2       	ldi	r22, 0x2E	; 46
   12944:	85 e0       	ldi	r24, 0x05	; 5
   12946:	99 e0       	ldi	r25, 0x09	; 9
   12948:	0e 94 81 b0 	call	0x16102	; 0x16102 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:120
      cnt = 1;
   1294c:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:122
    }
    if (strcmp(pch, "ntp") == 0)
   1294e:	68 e1       	ldi	r22, 0x18	; 24
   12950:	76 e0       	ldi	r23, 0x06	; 6
   12952:	c7 01       	movw	r24, r14
   12954:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12958:	89 2b       	or	r24, r25
   1295a:	51 f4       	brne	.+20     	; 0x12970 <mqtt_callback(char*, unsigned char*, unsigned int)+0x184c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:124
    {
      parseBytes(my_payload, '.',device.ntp_server, 4, 10);
   1295c:	24 e0       	ldi	r18, 0x04	; 4
   1295e:	30 e0       	ldi	r19, 0x00	; 0
   12960:	47 e6       	ldi	r20, 0x67	; 103
   12962:	5e e0       	ldi	r21, 0x0E	; 14
   12964:	6e e2       	ldi	r22, 0x2E	; 46
   12966:	85 e0       	ldi	r24, 0x05	; 5
   12968:	99 e0       	ldi	r25, 0x09	; 9
   1296a:	0e 94 81 b0 	call	0x16102	; 0x16102 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:125
      cnt = 1;
   1296e:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:127
    }
    if (strcmp(pch, "mqtt_host") == 0)
   12970:	6c e1       	ldi	r22, 0x1C	; 28
   12972:	76 e0       	ldi	r23, 0x06	; 6
   12974:	c7 01       	movw	r24, r14
   12976:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   1297a:	89 2b       	or	r24, r25
   1297c:	51 f4       	brne	.+20     	; 0x12992 <mqtt_callback(char*, unsigned char*, unsigned int)+0x186e>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:129
    {
      parseBytes(my_payload, '.', device.mqtt_server, 4, 10);
   1297e:	24 e0       	ldi	r18, 0x04	; 4
   12980:	30 e0       	ldi	r19, 0x00	; 0
   12982:	49 e3       	ldi	r20, 0x39	; 57
   12984:	5e e0       	ldi	r21, 0x0E	; 14
   12986:	6e e2       	ldi	r22, 0x2E	; 46
   12988:	85 e0       	ldi	r24, 0x05	; 5
   1298a:	99 e0       	ldi	r25, 0x09	; 9
   1298c:	0e 94 81 b0 	call	0x16102	; 0x16102 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:130
      cnt = 1;
   12990:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:132
    }
    if (strcmp(pch, "mqtt_port") == 0)
   12992:	66 e2       	ldi	r22, 0x26	; 38
   12994:	76 e0       	ldi	r23, 0x06	; 6
   12996:	c7 01       	movw	r24, r14
   12998:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   1299c:	89 2b       	or	r24, r25
   1299e:	49 f4       	brne	.+18     	; 0x129b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x188e>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:134
    {
      device.mqtt_port = atoi(my_payload);
   129a0:	85 e0       	ldi	r24, 0x05	; 5
   129a2:	99 e0       	ldi	r25, 0x09	; 9
   129a4:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   129a8:	90 93 3e 0e 	sts	0x0E3E, r25	; 0x800e3e <device+0x25>
   129ac:	80 93 3d 0e 	sts	0x0E3D, r24	; 0x800e3d <device+0x24>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:135
      cnt = 1;
   129b0:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:137
    }
    if (strcmp(pch, "mqtt_user") == 0)
   129b2:	60 e3       	ldi	r22, 0x30	; 48
   129b4:	76 e0       	ldi	r23, 0x06	; 6
   129b6:	c7 01       	movw	r24, r14
   129b8:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   129bc:	89 2b       	or	r24, r25
   129be:	39 f4       	brne	.+14     	; 0x129ce <mqtt_callback(char*, unsigned char*, unsigned int)+0x18aa>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:139
    {
      strcpy(device.mqtt_user, my_payload);
   129c0:	65 e0       	ldi	r22, 0x05	; 5
   129c2:	79 e0       	ldi	r23, 0x09	; 9
   129c4:	8f e3       	ldi	r24, 0x3F	; 63
   129c6:	9e e0       	ldi	r25, 0x0E	; 14
   129c8:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:140
      cnt = 1;
   129cc:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:142
    }
    if (strcmp(pch, "mqtt_pass") == 0)
   129ce:	6a e3       	ldi	r22, 0x3A	; 58
   129d0:	76 e0       	ldi	r23, 0x06	; 6
   129d2:	c7 01       	movw	r24, r14
   129d4:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   129d8:	89 2b       	or	r24, r25
   129da:	39 f4       	brne	.+14     	; 0x129ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x18c6>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:144
    {
      strcpy(device.mqtt_key, my_payload);
   129dc:	65 e0       	ldi	r22, 0x05	; 5
   129de:	79 e0       	ldi	r23, 0x09	; 9
   129e0:	83 e5       	ldi	r24, 0x53	; 83
   129e2:	9e e0       	ldi	r25, 0x0E	; 14
   129e4:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:145
      cnt = 1;
   129e8:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:147
    }
    if (strcmp(pch, "name") == 0)
   129ea:	6a ee       	ldi	r22, 0xEA	; 234
   129ec:	73 e0       	ldi	r23, 0x03	; 3
   129ee:	c7 01       	movw	r24, r14
   129f0:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   129f4:	89 2b       	or	r24, r25
   129f6:	29 f4       	brne	.+10     	; 0x12a02 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18de>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:149
    {
      device_set_name(my_payload);
   129f8:	85 e0       	ldi	r24, 0x05	; 5
   129fa:	99 e0       	ldi	r25, 0x09	; 9
   129fc:	0e 94 14 64 	call	0xc828	; 0xc828 <device_set_name(char*)>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:150
      cnt = 2;
   12a00:	12 e0       	ldi	r17, 0x02	; 2
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:152
    }
    pch = strtok (NULL, "/");
   12a02:	60 e9       	ldi	r22, 0x90	; 144
   12a04:	75 e0       	ldi	r23, 0x05	; 5
   12a06:	90 e0       	ldi	r25, 0x00	; 0
   12a08:	80 e0       	ldi	r24, 0x00	; 0
   12a0a:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
   12a0e:	7c 01       	movw	r14, r24
   12a10:	45 cf       	rjmp	.-374    	; 0x1289c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1778>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2595
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    if (cnt == 1)
   12a12:	11 30       	cpi	r17, 0x01	; 1
   12a14:	41 f4       	brne	.+16     	; 0x12a26 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1902>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2597
    {
      save_setup_network();
   12a16:	0e 94 3c 64 	call	0xc878	; 0xc878 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2602
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
   12a1a:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
   12a1e:	80 68       	ori	r24, 0x80	; 128
   12a20:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <selftest_data>
   12a24:	02 c0       	rjmp	.+4      	; 0x12a2a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1906>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2600
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
   12a26:	12 30       	cpi	r17, 0x02	; 2
   12a28:	c1 f3       	breq	.-16     	; 0x12a1a <mqtt_callback(char*, unsigned char*, unsigned int)+0x18f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2607
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
   12a2a:	64 ef       	ldi	r22, 0xF4	; 244
   12a2c:	7e e6       	ldi	r23, 0x6E	; 110
   12a2e:	c5 01       	movw	r24, r10
   12a30:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2608
  strcat(str1, device.nazev);
   12a34:	6f e2       	ldi	r22, 0x2F	; 47
   12a36:	7e e0       	ldi	r23, 0x0E	; 14
   12a38:	c5 01       	movw	r24, r10
   12a3a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2609
  strcat(str1, "/light/set/");
   12a3e:	64 e4       	ldi	r22, 0x44	; 68
   12a40:	76 e0       	ldi	r23, 0x06	; 6
   12a42:	c5 01       	movw	r24, r10
   12a44:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2610
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12a48:	f5 01       	movw	r30, r10
   12a4a:	01 90       	ld	r0, Z+
   12a4c:	00 20       	and	r0, r0
   12a4e:	e9 f7       	brne	.-6      	; 0x12a4a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1926>
   12a50:	31 97       	sbiw	r30, 0x01	; 1
   12a52:	af 01       	movw	r20, r30
   12a54:	4a 19       	sub	r20, r10
   12a56:	5b 09       	sbc	r21, r11
   12a58:	b4 01       	movw	r22, r8
   12a5a:	c5 01       	movw	r24, r10
   12a5c:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   12a60:	89 2b       	or	r24, r25
   12a62:	09 f0       	breq	.+2      	; 0x12a66 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1942>
   12a64:	46 c0       	rjmp	.+140    	; 0x12af2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2612
  {
    mqtt_process_message++;
   12a66:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12a6a:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12a6e:	01 96       	adiw	r24, 0x01	; 1
   12a70:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12a74:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12a78:	f5 01       	movw	r30, r10
   12a7a:	01 90       	ld	r0, Z+
   12a7c:	00 20       	and	r0, r0
   12a7e:	e9 f7       	brne	.-6      	; 0x12a7a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1956>
   12a80:	31 97       	sbiw	r30, 0x01	; 1
   12a82:	ea 19       	sub	r30, r10
   12a84:	fb 09       	sbc	r31, r11
   12a86:	9e 2f       	mov	r25, r30
   12a88:	4e 2f       	mov	r20, r30
   12a8a:	84 2f       	mov	r24, r20
   12a8c:	89 1b       	sub	r24, r25
   12a8e:	24 2f       	mov	r18, r20
   12a90:	30 e0       	ldi	r19, 0x00	; 0
   12a92:	d4 01       	movw	r26, r8
   12a94:	0d 90       	ld	r0, X+
   12a96:	00 20       	and	r0, r0
   12a98:	e9 f7       	brne	.-6      	; 0x12a94 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1970>
   12a9a:	11 97       	sbiw	r26, 0x01	; 1
   12a9c:	a8 19       	sub	r26, r8
   12a9e:	b9 09       	sbc	r27, r9
   12aa0:	2a 17       	cp	r18, r26
   12aa2:	3b 07       	cpc	r19, r27
   12aa4:	78 f4       	brcc	.+30     	; 0x12ac4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2617
    {
      str1[cnt] = topic[f];
   12aa6:	a8 ec       	ldi	r26, 0xC8	; 200
   12aa8:	b0 e0       	ldi	r27, 0x00	; 0
   12aaa:	ac 0f       	add	r26, r28
   12aac:	bd 1f       	adc	r27, r29
   12aae:	a8 0f       	add	r26, r24
   12ab0:	b1 1d       	adc	r27, r1
   12ab2:	28 0d       	add	r18, r8
   12ab4:	39 1d       	adc	r19, r9
   12ab6:	f9 01       	movw	r30, r18
   12ab8:	80 81       	ld	r24, Z
   12aba:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2618
      str1[cnt + 1] = 0;
   12abc:	11 96       	adiw	r26, 0x01	; 1
   12abe:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12ac0:	4f 5f       	subi	r20, 0xFF	; 255
   12ac2:	e3 cf       	rjmp	.-58     	; 0x12a8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1966>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2622
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   12ac4:	60 e9       	ldi	r22, 0x90	; 144
   12ac6:	75 e0       	ldi	r23, 0x05	; 5
   12ac8:	ce 01       	movw	r24, r28
   12aca:	88 53       	subi	r24, 0x38	; 56
   12acc:	9f 4f       	sbci	r25, 0xFF	; 255
   12ace:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2621
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   12ad2:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2623
    pch = strtok (str1, "/");
    while (pch != NULL)
   12ad4:	00 97       	sbiw	r24, 0x00	; 0
   12ad6:	69 f0       	breq	.+26     	; 0x12af2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2625
    {
      if (cnt == 0) id = atoi(pch);
   12ad8:	11 11       	cpse	r17, r1
   12ada:	03 c0       	rjmp	.+6      	; 0x12ae2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19be>
   12adc:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   12ae0:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2628
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
   12ae2:	60 e9       	ldi	r22, 0x90	; 144
   12ae4:	75 e0       	ldi	r23, 0x05	; 5
   12ae6:	90 e0       	ldi	r25, 0x00	; 0
   12ae8:	80 e0       	ldi	r24, 0x00	; 0
   12aea:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2629
      cnt++;
   12aee:	1f 5f       	subi	r17, 0xFF	; 255
   12af0:	f1 cf       	rjmp	.-30     	; 0x12ad4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2634
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
   12af2:	68 ea       	ldi	r22, 0xA8	; 168
   12af4:	7e e6       	ldi	r23, 0x6E	; 110
   12af6:	c5 01       	movw	r24, r10
   12af8:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2635
  strcat(str1, "output/");
   12afc:	6f e8       	ldi	r22, 0x8F	; 143
   12afe:	73 e0       	ldi	r23, 0x03	; 3
   12b00:	c5 01       	movw	r24, r10
   12b02:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2636
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12b06:	f5 01       	movw	r30, r10
   12b08:	01 90       	ld	r0, Z+
   12b0a:	00 20       	and	r0, r0
   12b0c:	e9 f7       	brne	.-6      	; 0x12b08 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19e4>
   12b0e:	31 97       	sbiw	r30, 0x01	; 1
   12b10:	af 01       	movw	r20, r30
   12b12:	4a 19       	sub	r20, r10
   12b14:	5b 09       	sbc	r21, r11
   12b16:	b4 01       	movw	r22, r8
   12b18:	c5 01       	movw	r24, r10
   12b1a:	0e 94 03 f2 	call	0x1e406	; 0x1e406 <strncmp>
   12b1e:	89 2b       	or	r24, r25
   12b20:	09 f0       	breq	.+2      	; 0x12b24 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a00>
   12b22:	78 c0       	rjmp	.+240    	; 0x12c14 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1af0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2638
  {
    mqtt_process_message++;
   12b24:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12b28:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12b2c:	01 96       	adiw	r24, 0x01	; 1
   12b2e:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12b32:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2640
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12b36:	f5 01       	movw	r30, r10
   12b38:	01 90       	ld	r0, Z+
   12b3a:	00 20       	and	r0, r0
   12b3c:	e9 f7       	brne	.-6      	; 0x12b38 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a14>
   12b3e:	31 97       	sbiw	r30, 0x01	; 1
   12b40:	ea 19       	sub	r30, r10
   12b42:	fb 09       	sbc	r31, r11
   12b44:	9e 2f       	mov	r25, r30
   12b46:	4e 2f       	mov	r20, r30
   12b48:	84 2f       	mov	r24, r20
   12b4a:	89 1b       	sub	r24, r25
   12b4c:	24 2f       	mov	r18, r20
   12b4e:	30 e0       	ldi	r19, 0x00	; 0
   12b50:	d4 01       	movw	r26, r8
   12b52:	0d 90       	ld	r0, X+
   12b54:	00 20       	and	r0, r0
   12b56:	e9 f7       	brne	.-6      	; 0x12b52 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a2e>
   12b58:	11 97       	sbiw	r26, 0x01	; 1
   12b5a:	a8 19       	sub	r26, r8
   12b5c:	b9 09       	sbc	r27, r9
   12b5e:	2a 17       	cp	r18, r26
   12b60:	3b 07       	cpc	r19, r27
   12b62:	78 f4       	brcc	.+30     	; 0x12b82 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2642
    {
      str1[cnt] = topic[f];
   12b64:	a8 ec       	ldi	r26, 0xC8	; 200
   12b66:	b0 e0       	ldi	r27, 0x00	; 0
   12b68:	ac 0f       	add	r26, r28
   12b6a:	bd 1f       	adc	r27, r29
   12b6c:	a8 0f       	add	r26, r24
   12b6e:	b1 1d       	adc	r27, r1
   12b70:	28 0d       	add	r18, r8
   12b72:	39 1d       	adc	r19, r9
   12b74:	f9 01       	movw	r30, r18
   12b76:	80 81       	ld	r24, Z
   12b78:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2643
      str1[cnt + 1] = 0;
   12b7a:	11 96       	adiw	r26, 0x01	; 1
   12b7c:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2640
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12b7e:	4f 5f       	subi	r20, 0xFF	; 255
   12b80:	e3 cf       	rjmp	.-58     	; 0x12b48 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2647
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   12b82:	60 e9       	ldi	r22, 0x90	; 144
   12b84:	75 e0       	ldi	r23, 0x05	; 5
   12b86:	ce 01       	movw	r24, r28
   12b88:	88 53       	subi	r24, 0x38	; 56
   12b8a:	9f 4f       	sbci	r25, 0xFF	; 255
   12b8c:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
   12b90:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2646
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   12b92:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2648
    pch = strtok (str1, "/");
    while (pch != NULL)
   12b94:	01 15       	cp	r16, r1
   12b96:	11 05       	cpc	r17, r1
   12b98:	e9 f1       	breq	.+122    	; 0x12c14 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1af0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650
    {
      if (cnt == 0) id = atoi(pch);
   12b9a:	f1 10       	cpse	r15, r1
   12b9c:	0d c0       	rjmp	.+26     	; 0x12bb8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a94>
   12b9e:	c8 01       	movw	r24, r16
   12ba0:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   12ba4:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2661
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
   12ba6:	60 e9       	ldi	r22, 0x90	; 144
   12ba8:	75 e0       	ldi	r23, 0x05	; 5
   12baa:	90 e0       	ldi	r25, 0x00	; 0
   12bac:	80 e0       	ldi	r24, 0x00	; 0
   12bae:	0e 94 56 e5 	call	0x1caac	; 0x1caac <strtok>
   12bb2:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2662
      cnt++;
   12bb4:	f3 94       	inc	r15
   12bb6:	ee cf       	rjmp	.-36     	; 0x12b94 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2651
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
   12bb8:	f1 e0       	ldi	r31, 0x01	; 1
   12bba:	ff 12       	cpse	r15, r31
   12bbc:	f4 cf       	rjmp	.-24     	; 0x12ba6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a82>
   12bbe:	8f e5       	ldi	r24, 0x5F	; 95
   12bc0:	c8 2e       	mov	r12, r24
   12bc2:	dd 24       	eor	r13, r13
   12bc4:	d3 94       	inc	r13
thermostat_ring_get_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   12bc6:	c6 01       	movw	r24, r12
   12bc8:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2654
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
   12bcc:	78 12       	cpse	r7, r24
   12bce:	19 c0       	rjmp	.+50     	; 0x12c02 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ade>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2656
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
   12bd0:	6a ec       	ldi	r22, 0xCA	; 202
   12bd2:	78 e0       	ldi	r23, 0x08	; 8
   12bd4:	c8 01       	movw	r24, r16
   12bd6:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12bda:	89 2b       	or	r24, r25
   12bdc:	29 f0       	breq	.+10     	; 0x12be8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ac4>
   12bde:	e7 2d       	mov	r30, r7
   12be0:	f0 e0       	ldi	r31, 0x00	; 0
   12be2:	e8 57       	subi	r30, 0x78	; 120
   12be4:	f4 4f       	sbci	r31, 0xF4	; 244
   12be6:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2657
            if (strcmp(pch, "state")) last_output_update[id] = 0;
   12be8:	68 e9       	ldi	r22, 0x98	; 152
   12bea:	73 e0       	ldi	r23, 0x03	; 3
   12bec:	c8 01       	movw	r24, r16
   12bee:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12bf2:	89 2b       	or	r24, r25
   12bf4:	c1 f2       	breq	.-80     	; 0x12ba6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a82>
   12bf6:	e7 2d       	mov	r30, r7
   12bf8:	f0 e0       	ldi	r31, 0x00	; 0
   12bfa:	e8 57       	subi	r30, 0x78	; 120
   12bfc:	f4 4f       	sbci	r31, 0xF4	; 244
   12bfe:	10 82       	st	Z, r1
   12c00:	d2 cf       	rjmp	.-92     	; 0x12ba6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a82>
   12c02:	21 e2       	ldi	r18, 0x21	; 33
   12c04:	c2 0e       	add	r12, r18
   12c06:	d1 1c       	adc	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2653
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   12c08:	84 e0       	ldi	r24, 0x04	; 4
   12c0a:	c8 16       	cp	r12, r24
   12c0c:	82 e0       	ldi	r24, 0x02	; 2
   12c0e:	d8 06       	cpc	r13, r24
   12c10:	d1 f6       	brne	.-76     	; 0x12bc6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa2>
   12c12:	c9 cf       	rjmp	.-110    	; 0x12ba6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2667
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/brightness
  strcpy_P(str1, thermctl_header_in);
   12c14:	64 ef       	ldi	r22, 0xF4	; 244
   12c16:	7e e6       	ldi	r23, 0x6E	; 110
   12c18:	c5 01       	movw	r24, r10
   12c1a:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668
  strcat(str1, device.nazev);
   12c1e:	6f e2       	ldi	r22, 0x2F	; 47
   12c20:	7e e0       	ldi	r23, 0x0E	; 14
   12c22:	c5 01       	movw	r24, r10
   12c24:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2669
  strcat(str1, "/brightness");
   12c28:	60 e5       	ldi	r22, 0x50	; 80
   12c2a:	76 e0       	ldi	r23, 0x06	; 6
   12c2c:	c5 01       	movw	r24, r10
   12c2e:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2670
  if (strcmp(str1, topic) == 0)
   12c32:	b4 01       	movw	r22, r8
   12c34:	c5 01       	movw	r24, r10
   12c36:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12c3a:	89 2b       	or	r24, r25
   12c3c:	79 f4       	brne	.+30     	; 0x12c5c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2672
  {
    mqtt_process_message++;
   12c3e:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12c42:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12c46:	01 96       	adiw	r24, 0x01	; 1
   12c48:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12c4c:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2673
    my_touch.TP_SetBacklight(atoi(my_payload));
   12c50:	85 e0       	ldi	r24, 0x05	; 5
   12c52:	99 e0       	ldi	r25, 0x09	; 9
   12c54:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   12c58:	0e 94 f1 ac 	call	0x159e2	; 0x159e2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
   12c5c:	64 ef       	ldi	r22, 0xF4	; 244
   12c5e:	7e e6       	ldi	r23, 0x6E	; 110
   12c60:	c5 01       	movw	r24, r10
   12c62:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
  strcat(str1, device.nazev);
   12c66:	6f e2       	ldi	r22, 0x2F	; 47
   12c68:	7e e0       	ldi	r23, 0x0E	; 14
   12c6a:	c5 01       	movw	r24, r10
   12c6c:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679
  strcat(str1, "/reload");
   12c70:	6c e5       	ldi	r22, 0x5C	; 92
   12c72:	76 e0       	ldi	r23, 0x06	; 6
   12c74:	c5 01       	movw	r24, r10
   12c76:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2680
  if (strcmp(str1, topic) == 0)
   12c7a:	b4 01       	movw	r22, r8
   12c7c:	c5 01       	movw	r24, r10
   12c7e:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12c82:	8c 01       	movw	r16, r24
   12c84:	89 2b       	or	r24, r25
   12c86:	79 f4       	brne	.+30     	; 0x12ca6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2682
  {
    mqtt_process_message++;
   12c88:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12c8c:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12c90:	01 96       	adiw	r24, 0x01	; 1
   12c92:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12c96:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2683
    log_error(&mqtt_client, "reload ..... ");
   12c9a:	84 e6       	ldi	r24, 0x64	; 100
   12c9c:	96 e0       	ldi	r25, 0x06	; 6
   12c9e:	0e 94 da c6 	call	0x18db4	; 0x18db4 <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2684
    resetFunc();
   12ca2:	f8 01       	movw	r30, r16
   12ca4:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2688
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
   12ca6:	64 ef       	ldi	r22, 0xF4	; 244
   12ca8:	7e e6       	ldi	r23, 0x6E	; 110
   12caa:	c5 01       	movw	r24, r10
   12cac:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2689
  strcat(str1, device.nazev);
   12cb0:	6f e2       	ldi	r22, 0x2F	; 47
   12cb2:	7e e0       	ldi	r23, 0x0E	; 14
   12cb4:	c5 01       	movw	r24, r10
   12cb6:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2690
  strcat(str1, "/bootloader");
   12cba:	62 e7       	ldi	r22, 0x72	; 114
   12cbc:	76 e0       	ldi	r23, 0x06	; 6
   12cbe:	c5 01       	movw	r24, r10
   12cc0:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2691
  if (strcmp(str1, topic) == 0)
   12cc4:	b4 01       	movw	r22, r8
   12cc6:	c5 01       	movw	r24, r10
   12cc8:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12ccc:	89 2b       	or	r24, r25
   12cce:	e9 f4       	brne	.+58     	; 0x12d0a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2693
  {
    mqtt_process_message++;
   12cd0:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12cd4:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12cd8:	01 96       	adiw	r24, 0x01	; 1
   12cda:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12cde:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2694
    log_error(&mqtt_client, "bootloader ..... ");
   12ce2:	8e e7       	ldi	r24, 0x7E	; 126
   12ce4:	96 e0       	ldi	r25, 0x06	; 6
   12ce6:	0e 94 da c6 	call	0x18db4	; 0x18db4 <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2695
    EEPROM.write(bootloader_tag, 255);
   12cea:	6f ef       	ldi	r22, 0xFF	; 255
   12cec:	90 e0       	ldi	r25, 0x00	; 0
   12cee:	80 e0       	ldi	r24, 0x00	; 0
   12cf0:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
   12cf4:	88 e1       	ldi	r24, 0x18	; 24
   12cf6:	9e e0       	ldi	r25, 0x0E	; 14
   12cf8:	0f b6       	in	r0, 0x3f	; 63
   12cfa:	f8 94       	cli
   12cfc:	a8 95       	wdr
   12cfe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12d02:	0f be       	out	0x3f, r0	; 63
   12d04:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   12d08:	ff cf       	rjmp	.-2      	; 0x12d08 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be4>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2701
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
   12d0a:	64 ef       	ldi	r22, 0xF4	; 244
   12d0c:	7e e6       	ldi	r23, 0x6E	; 110
   12d0e:	c5 01       	movw	r24, r10
   12d10:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2702
  strcat(str1, device.nazev);
   12d14:	6f e2       	ldi	r22, 0x2F	; 47
   12d16:	7e e0       	ldi	r23, 0x0E	; 14
   12d18:	c5 01       	movw	r24, r10
   12d1a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2703
  strcat(str1, "/default");
   12d1e:	6e e7       	ldi	r22, 0x7E	; 126
   12d20:	75 e0       	ldi	r23, 0x05	; 5
   12d22:	c5 01       	movw	r24, r10
   12d24:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2704
  if (strcmp(str1, topic) == 0)
   12d28:	b4 01       	movw	r22, r8
   12d2a:	c5 01       	movw	r24, r10
   12d2c:	0e 94 f3 f1 	call	0x1e3e6	; 0x1e3e6 <strcmp>
   12d30:	89 2b       	or	r24, r25
   12d32:	91 f4       	brne	.+36     	; 0x12d58 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2706
  {
    mqtt_process_message++;
   12d34:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12d38:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12d3c:	01 96       	adiw	r24, 0x01	; 1
   12d3e:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12d42:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2708
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
   12d46:	85 e0       	ldi	r24, 0x05	; 5
   12d48:	99 e0       	ldi	r25, 0x09	; 9
   12d4a:	0e 94 1d e5 	call	0x1ca3a	; 0x1ca3a <atoi>
   12d4e:	68 2f       	mov	r22, r24
   12d50:	8a e5       	ldi	r24, 0x5A	; 90
   12d52:	90 e0       	ldi	r25, 0x00	; 0
   12d54:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2711
  }

}
   12d58:	ca 5b       	subi	r28, 0xBA	; 186
   12d5a:	de 4f       	sbci	r29, 0xFE	; 254
   12d5c:	0f b6       	in	r0, 0x3f	; 63
   12d5e:	f8 94       	cli
   12d60:	de bf       	out	0x3e, r29	; 62
   12d62:	0f be       	out	0x3f, r0	; 63
   12d64:	cd bf       	out	0x3d, r28	; 61
   12d66:	df 91       	pop	r29
   12d68:	cf 91       	pop	r28
   12d6a:	1f 91       	pop	r17
   12d6c:	0f 91       	pop	r16
   12d6e:	ff 90       	pop	r15
   12d70:	ef 90       	pop	r14
   12d72:	df 90       	pop	r13
   12d74:	cf 90       	pop	r12
   12d76:	bf 90       	pop	r11
   12d78:	af 90       	pop	r10
   12d7a:	9f 90       	pop	r9
   12d7c:	8f 90       	pop	r8
   12d7e:	7f 90       	pop	r7
   12d80:	6f 90       	pop	r6
   12d82:	5f 90       	pop	r5
   12d84:	4f 90       	pop	r4
   12d86:	3f 90       	pop	r3
   12d88:	2f 90       	pop	r2
   12d8a:	08 95       	ret

00012d8c <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2715
/*************************************************************************************************************************/
/// mqtt_reconent - funkce pro prihlaseni k MQTT topicum
byte mqtt_reconnect(void)
{
   12d8c:	0f 93       	push	r16
   12d8e:	1f 93       	push	r17
   12d90:	cf 93       	push	r28
   12d92:	df 93       	push	r29
   12d94:	cd b7       	in	r28, 0x3d	; 61
   12d96:	de b7       	in	r29, 0x3e	; 62
   12d98:	a5 97       	sbiw	r28, 0x25	; 37
   12d9a:	0f b6       	in	r0, 0x3f	; 63
   12d9c:	f8 94       	cli
   12d9e:	de bf       	out	0x3e, r29	; 62
   12da0:	0f be       	out	0x3f, r0	; 63
   12da2:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2722
  char topic[26];
  byte ret = MQTT_DISCONNECTED;
  long mil;
  ///  /thermctl/xxxxxxxx/#
  ///  /thermctl/global/#
  if (!mqtt_client.connected())
   12da4:	8f e2       	ldi	r24, 0x2F	; 47
   12da6:	90 e1       	ldi	r25, 0x10	; 16
   12da8:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <PubSubClient::connected()>
   12dac:	81 11       	cpse	r24, r1
   12dae:	b7 c0       	rjmp	.+366    	; 0x12f1e <mqtt_reconnect()+0x192>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2724
  {
    device_get_name(nazev);
   12db0:	ce 01       	movw	r24, r28
   12db2:	4b 96       	adiw	r24, 0x1b	; 27
   12db4:	0e 94 e0 87 	call	0x10fc0	; 0x10fc0 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2725
    mil = millis();
   12db8:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2726
    if (mil > lastmqttconnect)
   12dbc:	00 91 85 09 	lds	r16, 0x0985	; 0x800985 <lastmqttconnect>
   12dc0:	10 91 86 09 	lds	r17, 0x0986	; 0x800986 <lastmqttconnect+0x1>
   12dc4:	20 91 87 09 	lds	r18, 0x0987	; 0x800987 <lastmqttconnect+0x2>
   12dc8:	30 91 88 09 	lds	r19, 0x0988	; 0x800988 <lastmqttconnect+0x3>
   12dcc:	06 17       	cp	r16, r22
   12dce:	17 07       	cpc	r17, r23
   12dd0:	28 07       	cpc	r18, r24
   12dd2:	39 07       	cpc	r19, r25
   12dd4:	0c f0       	brlt	.+2      	; 0x12dd8 <mqtt_reconnect()+0x4c>
   12dd6:	a3 c0       	rjmp	.+326    	; 0x12f1e <mqtt_reconnect()+0x192>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2728
    {
      lastmqttconnect = mil + 5000;
   12dd8:	68 57       	subi	r22, 0x78	; 120
   12dda:	7c 4e       	sbci	r23, 0xEC	; 236
   12ddc:	8f 4f       	sbci	r24, 0xFF	; 255
   12dde:	9f 4f       	sbci	r25, 0xFF	; 255
   12de0:	60 93 85 09 	sts	0x0985, r22	; 0x800985 <lastmqttconnect>
   12de4:	70 93 86 09 	sts	0x0986, r23	; 0x800986 <lastmqttconnect+0x1>
   12de8:	80 93 87 09 	sts	0x0987, r24	; 0x800987 <lastmqttconnect+0x2>
   12dec:	90 93 88 09 	sts	0x0988, r25	; 0x800988 <lastmqttconnect+0x3>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:117
boolean PubSubClient::connect(const char *id, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage);
}

boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    if (!connected()) {
   12df0:	8f e2       	ldi	r24, 0x2F	; 47
   12df2:	90 e1       	ldi	r25, 0x10	; 16
   12df4:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <PubSubClient::connected()>
   12df8:	81 11       	cpse	r24, r1
   12dfa:	d0 c0       	rjmp	.+416    	; 0x12f9c <mqtt_reconnect()+0x210>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:120
        int result = 0;

        if (domain != NULL) {
   12dfc:	60 91 44 12 	lds	r22, 0x1244	; 0x801244 <mqtt_client+0x215>
   12e00:	70 91 45 12 	lds	r23, 0x1245	; 0x801245 <mqtt_client+0x216>
   12e04:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   12e08:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   12e0c:	dc 01       	movw	r26, r24
   12e0e:	ed 91       	ld	r30, X+
   12e10:	fc 91       	ld	r31, X
   12e12:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <mqtt_client+0x217>
   12e16:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <mqtt_client+0x218>
   12e1a:	61 15       	cp	r22, r1
   12e1c:	71 05       	cpc	r23, r1
   12e1e:	09 f4       	brne	.+2      	; 0x12e22 <mqtt_reconnect()+0x96>
   12e20:	8b c0       	rjmp	.+278    	; 0x12f38 <mqtt_reconnect()+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:121
            result = _client->connect(this->domain, this->port);
   12e22:	00 88       	ldd	r0, Z+16	; 0x10
   12e24:	f1 89       	ldd	r31, Z+17	; 0x11
   12e26:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        } else {
            result = _client->connect(this->ip, this->port);
   12e28:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:125
        }
        if (result == 1) {
   12e2a:	81 30       	cpi	r24, 0x01	; 1
   12e2c:	91 05       	cpc	r25, r1
   12e2e:	09 f0       	breq	.+2      	; 0x12e32 <mqtt_reconnect()+0xa6>
   12e30:	12 c1       	rjmp	.+548    	; 0x13056 <mqtt_reconnect()+0x2ca>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:126
            nextMsgId = 1;
   12e32:	90 93 32 12 	sts	0x1232, r25	; 0x801232 <mqtt_client+0x203>
   12e36:	80 93 31 12 	sts	0x1231, r24	; 0x801231 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:135

#if MQTT_VERSION == MQTT_VERSION_3_1
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   12e3a:	87 e0       	ldi	r24, 0x07	; 7
   12e3c:	e8 e1       	ldi	r30, 0x18	; 24
   12e3e:	f2 e0       	ldi	r31, 0x02	; 2
   12e40:	de 01       	movw	r26, r28
   12e42:	11 96       	adiw	r26, 0x01	; 1
   12e44:	01 90       	ld	r0, Z+
   12e46:	0d 92       	st	X+, r0
   12e48:	8a 95       	dec	r24
   12e4a:	e1 f7       	brne	.-8      	; 0x12e44 <mqtt_reconnect()+0xb8>
   12e4c:	fe 01       	movw	r30, r28
   12e4e:	31 96       	adiw	r30, 0x01	; 1
   12e50:	a6 e3       	ldi	r26, 0x36	; 54
   12e52:	b0 e1       	ldi	r27, 0x10	; 16
   12e54:	ce 01       	movw	r24, r28
   12e56:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:139
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
                buffer[length++] = d[j];
   12e58:	21 91       	ld	r18, Z+
   12e5a:	2d 93       	st	X+, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:138
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
   12e5c:	8e 17       	cp	r24, r30
   12e5e:	9f 07       	cpc	r25, r31
   12e60:	d9 f7       	brne	.-10     	; 0x12e58 <mqtt_reconnect()+0xcc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:157
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
   12e62:	82 e0       	ldi	r24, 0x02	; 2
   12e64:	80 93 3d 10 	sts	0x103D, r24	; 0x80103d <mqtt_client+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:159

            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
   12e68:	10 92 3e 10 	sts	0x103E, r1	; 0x80103e <mqtt_client+0xf>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:160
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   12e6c:	8f e0       	ldi	r24, 0x0F	; 15
   12e6e:	80 93 3f 10 	sts	0x103F, r24	; 0x80103f <mqtt_client+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:161
            length = writeString(id,buffer,length);
   12e72:	4f e0       	ldi	r20, 0x0F	; 15
   12e74:	50 e0       	ldi	r21, 0x00	; 0
   12e76:	61 e3       	ldi	r22, 0x31	; 49
   12e78:	70 e1       	ldi	r23, 0x10	; 16
   12e7a:	ce 01       	movw	r24, r28
   12e7c:	4b 96       	adiw	r24, 0x1b	; 27
   12e7e:	0e 94 64 ae 	call	0x15cc8	; 0x15cc8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:174
                if(pass != NULL) {
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT,buffer,length-5);
   12e82:	9c 01       	movw	r18, r24
   12e84:	25 50       	subi	r18, 0x05	; 5
   12e86:	31 09       	sbc	r19, r1
   12e88:	41 e3       	ldi	r20, 0x31	; 49
   12e8a:	50 e1       	ldi	r21, 0x10	; 16
   12e8c:	60 e1       	ldi	r22, 0x10	; 16
   12e8e:	8f e2       	ldi	r24, 0x2F	; 47
   12e90:	90 e1       	ldi	r25, 0x10	; 16
   12e92:	0e 94 b5 5f 	call	0xbf6a	; 0xbf6a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:176

            lastInActivity = lastOutActivity = millis();
   12e96:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   12e9a:	60 93 33 12 	sts	0x1233, r22	; 0x801233 <mqtt_client+0x204>
   12e9e:	70 93 34 12 	sts	0x1234, r23	; 0x801234 <mqtt_client+0x205>
   12ea2:	80 93 35 12 	sts	0x1235, r24	; 0x801235 <mqtt_client+0x206>
   12ea6:	90 93 36 12 	sts	0x1236, r25	; 0x801236 <mqtt_client+0x207>
   12eaa:	60 93 37 12 	sts	0x1237, r22	; 0x801237 <mqtt_client+0x208>
   12eae:	70 93 38 12 	sts	0x1238, r23	; 0x801238 <mqtt_client+0x209>
   12eb2:	80 93 39 12 	sts	0x1239, r24	; 0x801239 <mqtt_client+0x20a>
   12eb6:	90 93 3a 12 	sts	0x123A, r25	; 0x80123a <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:178

            while (!_client->available()) {
   12eba:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   12ebe:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   12ec2:	dc 01       	movw	r26, r24
   12ec4:	ed 91       	ld	r30, X+
   12ec6:	fc 91       	ld	r31, X
   12ec8:	00 84       	ldd	r0, Z+8	; 0x08
   12eca:	f1 85       	ldd	r31, Z+9	; 0x09
   12ecc:	e0 2d       	mov	r30, r0
   12ece:	19 95       	eicall
   12ed0:	89 2b       	or	r24, r25
   12ed2:	09 f0       	breq	.+2      	; 0x12ed6 <mqtt_reconnect()+0x14a>
   12ed4:	48 c0       	rjmp	.+144    	; 0x12f66 <mqtt_reconnect()+0x1da>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:179
                unsigned long t = millis();
   12ed6:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:180
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*10)) {
   12eda:	00 91 37 12 	lds	r16, 0x1237	; 0x801237 <mqtt_client+0x208>
   12ede:	10 91 38 12 	lds	r17, 0x1238	; 0x801238 <mqtt_client+0x209>
   12ee2:	20 91 39 12 	lds	r18, 0x1239	; 0x801239 <mqtt_client+0x20a>
   12ee6:	30 91 3a 12 	lds	r19, 0x123A	; 0x80123a <mqtt_client+0x20b>
   12eea:	60 1b       	sub	r22, r16
   12eec:	71 0b       	sbc	r23, r17
   12eee:	82 0b       	sbc	r24, r18
   12ef0:	93 0b       	sbc	r25, r19
   12ef2:	62 33       	cpi	r22, 0x32	; 50
   12ef4:	71 05       	cpc	r23, r1
   12ef6:	81 05       	cpc	r24, r1
   12ef8:	91 05       	cpc	r25, r1
   12efa:	f8 f2       	brcs	.-66     	; 0x12eba <mqtt_reconnect()+0x12e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:181
                    _state = MQTT_CONNECTION_TIMEOUT;
   12efc:	8c ef       	ldi	r24, 0xFC	; 252
   12efe:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
   12f00:	90 93 4b 12 	sts	0x124B, r25	; 0x80124b <mqtt_client+0x21c>
   12f04:	80 93 4a 12 	sts	0x124A, r24	; 0x80124a <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:199
                }
            }
            _client->stop();
   12f08:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   12f0c:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   12f10:	dc 01       	movw	r26, r24
   12f12:	ed 91       	ld	r30, X+
   12f14:	fc 91       	ld	r31, X
   12f16:	04 88       	ldd	r0, Z+20	; 0x14
   12f18:	f5 89       	ldd	r31, Z+21	; 0x15
   12f1a:	e0 2d       	mov	r30, r0
   12f1c:	19 95       	eicall
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2759
      }
    }
  }
  ret = mqtt_client.state();
  return ret;
}
   12f1e:	80 91 4a 12 	lds	r24, 0x124A	; 0x80124a <mqtt_client+0x21b>
   12f22:	a5 96       	adiw	r28, 0x25	; 37
   12f24:	0f b6       	in	r0, 0x3f	; 63
   12f26:	f8 94       	cli
   12f28:	de bf       	out	0x3e, r29	; 62
   12f2a:	0f be       	out	0x3f, r0	; 63
   12f2c:	cd bf       	out	0x3d, r28	; 61
   12f2e:	df 91       	pop	r29
   12f30:	cf 91       	pop	r28
   12f32:	1f 91       	pop	r17
   12f34:	0f 91       	pop	r16
   12f36:	08 95       	ret
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        int result = 0;

        if (domain != NULL) {
            result = _client->connect(this->domain, this->port);
        } else {
            result = _client->connect(this->ip, this->port);
   12f38:	06 84       	ldd	r0, Z+14	; 0x0e
   12f3a:	f7 85       	ldd	r31, Z+15	; 0x0f
   12f3c:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   12f3e:	22 ef       	ldi	r18, 0xF2	; 242
   12f40:	32 e0       	ldi	r19, 0x02	; 2
   12f42:	3a 83       	std	Y+2, r19	; 0x02
   12f44:	29 83       	std	Y+1, r18	; 0x01
   12f46:	00 91 40 12 	lds	r16, 0x1240	; 0x801240 <mqtt_client+0x211>
   12f4a:	10 91 41 12 	lds	r17, 0x1241	; 0x801241 <mqtt_client+0x212>
   12f4e:	20 91 42 12 	lds	r18, 0x1242	; 0x801242 <mqtt_client+0x213>
   12f52:	30 91 43 12 	lds	r19, 0x1243	; 0x801243 <mqtt_client+0x214>
   12f56:	0b 83       	std	Y+3, r16	; 0x03
   12f58:	1c 83       	std	Y+4, r17	; 0x04
   12f5a:	2d 83       	std	Y+5, r18	; 0x05
   12f5c:	3e 83       	std	Y+6, r19	; 0x06
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
   12f5e:	be 01       	movw	r22, r28
   12f60:	6f 5f       	subi	r22, 0xFF	; 255
   12f62:	7f 4f       	sbci	r23, 0xFF	; 255
   12f64:	61 cf       	rjmp	.-318    	; 0x12e28 <mqtt_reconnect()+0x9c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:187
                    _client->stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   12f66:	ce 01       	movw	r24, r28
   12f68:	85 96       	adiw	r24, 0x25	; 37
   12f6a:	0e 94 69 b1 	call	0x162d2	; 0x162d2 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:189

            if (len == 4) {
   12f6e:	04 97       	sbiw	r24, 0x04	; 4
   12f70:	59 f6       	brne	.-106    	; 0x12f08 <mqtt_reconnect()+0x17c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
                if (buffer[3] == 0) {
   12f72:	80 91 34 10 	lds	r24, 0x1034	; 0x801034 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
   12f76:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == 0) {
   12f78:	81 11       	cpse	r24, r1
   12f7a:	c2 cf       	rjmp	.-124    	; 0x12f00 <mqtt_reconnect()+0x174>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:191
                    lastInActivity = millis();
   12f7c:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   12f80:	60 93 37 12 	sts	0x1237, r22	; 0x801237 <mqtt_client+0x208>
   12f84:	70 93 38 12 	sts	0x1238, r23	; 0x801238 <mqtt_client+0x209>
   12f88:	80 93 39 12 	sts	0x1239, r24	; 0x801239 <mqtt_client+0x20a>
   12f8c:	90 93 3a 12 	sts	0x123A, r25	; 0x80123a <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:192
                    pingOutstanding = false;
   12f90:	10 92 3b 12 	sts	0x123B, r1	; 0x80123b <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:193
                    _state = MQTT_CONNECTED;
   12f94:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <mqtt_client+0x21c>
   12f98:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <mqtt_client+0x21b>
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
    if (mil > lastmqttconnect)
    {
      lastmqttconnect = mil + 5000;
      if (mqtt_client.connect(nazev))
      {
        strcpy_P(topic, thermctl_header_in);
   12f9c:	64 ef       	ldi	r22, 0xF4	; 244
   12f9e:	7e e6       	ldi	r23, 0x6E	; 110
   12fa0:	ce 01       	movw	r24, r28
   12fa2:	01 96       	adiw	r24, 0x01	; 1
   12fa4:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2732
        strcat(topic, nazev);
   12fa8:	be 01       	movw	r22, r28
   12faa:	65 5e       	subi	r22, 0xE5	; 229
   12fac:	7f 4f       	sbci	r23, 0xFF	; 255
   12fae:	ce 01       	movw	r24, r28
   12fb0:	01 96       	adiw	r24, 0x01	; 1
   12fb2:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
        strcat(topic, "/#");
   12fb6:	60 ef       	ldi	r22, 0xF0	; 240
   12fb8:	76 e0       	ldi	r23, 0x06	; 6
   12fba:	ce 01       	movw	r24, r28
   12fbc:	01 96       	adiw	r24, 0x01	; 1
   12fbe:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2734
        mqtt_client.subscribe(topic);
   12fc2:	ce 01       	movw	r24, r28
   12fc4:	01 96       	adiw	r24, 0x01	; 1
   12fc6:	0e 94 24 b1 	call	0x16248	; 0x16248 <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
        strcpy_P(topic, thermctl_header_in);
   12fca:	64 ef       	ldi	r22, 0xF4	; 244
   12fcc:	7e e6       	ldi	r23, 0x6E	; 110
   12fce:	ce 01       	movw	r24, r28
   12fd0:	01 96       	adiw	r24, 0x01	; 1
   12fd2:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
        strcat(topic, "global/#");
   12fd6:	6a ee       	ldi	r22, 0xEA	; 234
   12fd8:	76 e0       	ldi	r23, 0x06	; 6
   12fda:	ce 01       	movw	r24, r28
   12fdc:	01 96       	adiw	r24, 0x01	; 1
   12fde:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2737
        mqtt_client.subscribe(topic);
   12fe2:	ce 01       	movw	r24, r28
   12fe4:	01 96       	adiw	r24, 0x01	; 1
   12fe6:	0e 94 24 b1 	call	0x16248	; 0x16248 <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2739
        //// /rtds/xxxxx
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   12fea:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2740
          remote_tds_subscibe_topic(idx);
   12fec:	81 2f       	mov	r24, r17
   12fee:	0e 94 3f 74 	call	0xe87e	; 0xe87e <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2739
        mqtt_client.subscribe(topic);
        strcpy_P(topic, thermctl_header_in);
        strcat(topic, "global/#");
        mqtt_client.subscribe(topic);
        //// /rtds/xxxxx
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   12ff2:	1f 5f       	subi	r17, 0xFF	; 255
   12ff4:	1a 30       	cpi	r17, 0x0A	; 10
   12ff6:	d1 f7       	brne	.-12     	; 0x12fec <mqtt_reconnect()+0x260>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2742
          remote_tds_subscibe_topic(idx);
        //// svetelny controller
        strcpy_P(topic, lightctl_header_out);
   12ff8:	65 ee       	ldi	r22, 0xE5	; 229
   12ffa:	7e e6       	ldi	r23, 0x6E	; 110
   12ffc:	ce 01       	movw	r24, r28
   12ffe:	01 96       	adiw	r24, 0x01	; 1
   13000:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743
        strcat(topic, "/#");
   13004:	60 ef       	ldi	r22, 0xF0	; 240
   13006:	76 e0       	ldi	r23, 0x06	; 6
   13008:	ce 01       	movw	r24, r28
   1300a:	01 96       	adiw	r24, 0x01	; 1
   1300c:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
        mqtt_client.subscribe(topic);
   13010:	ce 01       	movw	r24, r28
   13012:	01 96       	adiw	r24, 0x01	; 1
   13014:	0e 94 24 b1 	call	0x16248	; 0x16248 <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
        /// zpetna vazba od ostatnich room controleru
        strcpy_P(topic, thermctl_subscribe);
   13018:	6d ec       	ldi	r22, 0xCD	; 205
   1301a:	7e e6       	ldi	r23, 0x6E	; 110
   1301c:	ce 01       	movw	r24, r28
   1301e:	01 96       	adiw	r24, 0x01	; 1
   13020:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2747
        mqtt_client.subscribe(topic);
   13024:	ce 01       	movw	r24, r28
   13026:	01 96       	adiw	r24, 0x01	; 1
   13028:	0e 94 24 b1 	call	0x16248	; 0x16248 <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2749
        /// zpetna vazba od ostatnich term controlleru
        strcpy_P(topic, termbig_subscribe);
   1302c:	66 eb       	ldi	r22, 0xB6	; 182
   1302e:	7e e6       	ldi	r23, 0x6E	; 110
   13030:	ce 01       	movw	r24, r28
   13032:	01 96       	adiw	r24, 0x01	; 1
   13034:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2750
        mqtt_client.subscribe(topic);
   13038:	ce 01       	movw	r24, r28
   1303a:	01 96       	adiw	r24, 0x01	; 1
   1303c:	0e 94 24 b1 	call	0x16248	; 0x16248 <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2752
        /// zpetna vazba od vystupu
        strcpy_P(topic, termbig_header_out);
   13040:	68 ea       	ldi	r22, 0xA8	; 168
   13042:	7e e6       	ldi	r23, 0x6E	; 110
   13044:	ce 01       	movw	r24, r28
   13046:	01 96       	adiw	r24, 0x01	; 1
   13048:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2753
        mqtt_client.subscribe(topic);
   1304c:	ce 01       	movw	r24, r28
   1304e:	01 96       	adiw	r24, 0x01	; 1
   13050:	0e 94 24 b1 	call	0x16248	; 0x16248 <PubSubClient::subscribe(char const*) [clone .constprop.166]>
   13054:	64 cf       	rjmp	.-312    	; 0x12f1e <mqtt_reconnect()+0x192>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:201
                    _state = buffer[3];
                }
            }
            _client->stop();
        } else {
            _state = MQTT_CONNECT_FAILED;
   13056:	8e ef       	ldi	r24, 0xFE	; 254
   13058:	9f ef       	ldi	r25, 0xFF	; 255
   1305a:	90 93 4b 12 	sts	0x124B, r25	; 0x80124b <mqtt_client+0x21c>
   1305e:	80 93 4a 12 	sts	0x124A, r24	; 0x80124a <mqtt_client+0x21b>
   13062:	5d cf       	rjmp	.-326    	; 0x12f1e <mqtt_reconnect()+0x192>

00013064 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4531
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
   13064:	ef 92       	push	r14
   13066:	ff 92       	push	r15
   13068:	0f 93       	push	r16
   1306a:	1f 93       	push	r17
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1742
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
   1306c:	80 17       	cp	r24, r16
   1306e:	91 07       	cpc	r25, r17
   13070:	74 f4       	brge	.+28     	; 0x1308e <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4533
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
   13072:	84 0f       	add	r24, r20
   13074:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1742
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
   13076:	08 17       	cp	r16, r24
   13078:	19 07       	cpc	r17, r25
   1307a:	4c f4       	brge	.+18     	; 0x1308e <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
   1307c:	6e 15       	cp	r22, r14
   1307e:	7f 05       	cpc	r23, r15
   13080:	34 f4       	brge	.+12     	; 0x1308e <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4533
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
   13082:	62 0f       	add	r22, r18
   13084:	73 1f       	adc	r23, r19
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1742
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
   13086:	81 e0       	ldi	r24, 0x01	; 1
   13088:	e6 16       	cp	r14, r22
   1308a:	f7 06       	cpc	r15, r23
   1308c:	0c f0       	brlt	.+2      	; 0x13090 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4532
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
   1308e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4538
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
  {
    ret = true;
  }
  return ret;
}
   13090:	1f 91       	pop	r17
   13092:	0f 91       	pop	r16
   13094:	ff 90       	pop	r15
   13096:	ef 90       	pop	r14
   13098:	08 95       	ret

0001309a <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4515
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
}
/////////////////////
/// typ_button_3 ////
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
   1309a:	2f 92       	push	r2
   1309c:	3f 92       	push	r3
   1309e:	4f 92       	push	r4
   130a0:	5f 92       	push	r5
   130a2:	6f 92       	push	r6
   130a4:	7f 92       	push	r7
   130a6:	9f 92       	push	r9
   130a8:	af 92       	push	r10
   130aa:	bf 92       	push	r11
   130ac:	cf 92       	push	r12
   130ae:	df 92       	push	r13
   130b0:	ef 92       	push	r14
   130b2:	ff 92       	push	r15
   130b4:	0f 93       	push	r16
   130b6:	1f 93       	push	r17
   130b8:	cf 93       	push	r28
   130ba:	df 93       	push	r29
   130bc:	00 d0       	rcall	.+0      	; 0x130be <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x24>
   130be:	1f 92       	push	r1
   130c0:	1f 92       	push	r1
   130c2:	cd b7       	in	r28, 0x3d	; 61
   130c4:	de b7       	in	r29, 0x3e	; 62
   130c6:	6c 01       	movw	r12, r24
   130c8:	5b 01       	movw	r10, r22
   130ca:	1a 01       	movw	r2, r20
   130cc:	29 01       	movw	r4, r18
   130ce:	90 2e       	mov	r9, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   130d0:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
   130d4:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
   130d8:	10 e0       	ldi	r17, 0x00	; 0
   130da:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4520
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
   130dc:	3b 01       	movw	r6, r22
   130de:	62 0e       	add	r6, r18
   130e0:	73 1e       	adc	r7, r19
   130e2:	84 0f       	add	r24, r20
   130e4:	95 1f       	adc	r25, r21
   130e6:	9d 83       	std	Y+5, r25	; 0x05
   130e8:	8c 83       	std	Y+4, r24	; 0x04
   130ea:	93 01       	movw	r18, r6
   130ec:	20 1b       	sub	r18, r16
   130ee:	31 0b       	sbc	r19, r17
   130f0:	4c 81       	ldd	r20, Y+4	; 0x04
   130f2:	5d 81       	ldd	r21, Y+5	; 0x05
   130f4:	40 1b       	sub	r20, r16
   130f6:	51 0b       	sbc	r21, r17
   130f8:	b5 01       	movw	r22, r10
   130fa:	60 0f       	add	r22, r16
   130fc:	71 1f       	adc	r23, r17
   130fe:	c6 01       	movw	r24, r12
   13100:	80 0f       	add	r24, r16
   13102:	91 1f       	adc	r25, r17
   13104:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>
   13108:	0f 5f       	subi	r16, 0xFF	; 255
   1310a:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4519
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
   1310c:	03 30       	cpi	r16, 0x03	; 3
   1310e:	11 05       	cpc	r17, r1
   13110:	61 f7       	brne	.-40     	; 0x130ea <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4521
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
   13112:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4522
  str1[1] = 0;
   13114:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4524
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
   13116:	ce 01       	movw	r24, r28
   13118:	01 96       	adiw	r24, 0x01	; 1
   1311a:	fc 01       	movw	r30, r24
   1311c:	01 90       	ld	r0, Z+
   1311e:	00 20       	and	r0, r0
   13120:	e9 f7       	brne	.-6      	; 0x1311c <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x82>
   13122:	31 97       	sbiw	r30, 0x01	; 1
   13124:	e8 1b       	sub	r30, r24
   13126:	f9 0b       	sbc	r31, r25
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1736
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   13128:	29 2d       	mov	r18, r9
   1312a:	22 0f       	add	r18, r18
   1312c:	29 0d       	add	r18, r9
   1312e:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4526
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
   13130:	a2 01       	movw	r20, r4
   13132:	42 1b       	sub	r20, r18
   13134:	51 09       	sbc	r21, r1
   13136:	56 95       	lsr	r21
   13138:	47 95       	ror	r20
   1313a:	56 95       	lsr	r21
   1313c:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4527
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
   1313e:	4a 0d       	add	r20, r10
   13140:	5b 2d       	mov	r21, r11
   13142:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   13144:	26 e0       	ldi	r18, 0x06	; 6
   13146:	e2 9f       	mul	r30, r18
   13148:	f0 01       	movw	r30, r0
   1314a:	11 24       	eor	r1, r1
   1314c:	9e 9e       	mul	r9, r30
   1314e:	90 01       	movw	r18, r0
   13150:	9f 9e       	mul	r9, r31
   13152:	30 0d       	add	r19, r0
   13154:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4525
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
   13156:	33 27       	eor	r19, r19
   13158:	b1 01       	movw	r22, r2
   1315a:	62 1b       	sub	r22, r18
   1315c:	73 0b       	sbc	r23, r19
   1315e:	76 95       	lsr	r23
   13160:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4527
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
   13162:	6c 0d       	add	r22, r12
   13164:	7d 2d       	mov	r23, r13
   13166:	71 1d       	adc	r23, r1
   13168:	ee 24       	eor	r14, r14
   1316a:	ea 94       	dec	r14
   1316c:	fe 2c       	mov	r15, r14
   1316e:	10 e0       	ldi	r17, 0x00	; 0
   13170:	00 e0       	ldi	r16, 0x00	; 0
   13172:	29 2d       	mov	r18, r9
   13174:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4528
}
   13178:	0f 90       	pop	r0
   1317a:	0f 90       	pop	r0
   1317c:	0f 90       	pop	r0
   1317e:	0f 90       	pop	r0
   13180:	0f 90       	pop	r0
   13182:	df 91       	pop	r29
   13184:	cf 91       	pop	r28
   13186:	1f 91       	pop	r17
   13188:	0f 91       	pop	r16
   1318a:	ff 90       	pop	r15
   1318c:	ef 90       	pop	r14
   1318e:	df 90       	pop	r13
   13190:	cf 90       	pop	r12
   13192:	bf 90       	pop	r11
   13194:	af 90       	pop	r10
   13196:	9f 90       	pop	r9
   13198:	7f 90       	pop	r7
   1319a:	6f 90       	pop	r6
   1319c:	5f 90       	pop	r5
   1319e:	4f 90       	pop	r4
   131a0:	3f 90       	pop	r3
   131a2:	2f 90       	pop	r2
   131a4:	08 95       	ret

000131a6 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4440
  }
}
///////////////////////
/// typ tlacitka 2 ////
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{
   131a6:	2f 92       	push	r2
   131a8:	3f 92       	push	r3
   131aa:	4f 92       	push	r4
   131ac:	5f 92       	push	r5
   131ae:	6f 92       	push	r6
   131b0:	7f 92       	push	r7
   131b2:	8f 92       	push	r8
   131b4:	9f 92       	push	r9
   131b6:	af 92       	push	r10
   131b8:	bf 92       	push	r11
   131ba:	cf 92       	push	r12
   131bc:	df 92       	push	r13
   131be:	ef 92       	push	r14
   131c0:	ff 92       	push	r15
   131c2:	0f 93       	push	r16
   131c4:	1f 93       	push	r17
   131c6:	cf 93       	push	r28
   131c8:	df 93       	push	r29
   131ca:	00 d0       	rcall	.+0      	; 0x131cc <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
   131cc:	1f 92       	push	r1
   131ce:	cd b7       	in	r28, 0x3d	; 61
   131d0:	de b7       	in	r29, 0x3e	; 62
   131d2:	2c 01       	movw	r4, r24
   131d4:	3b 01       	movw	r6, r22
   131d6:	0a 83       	std	Y+2, r16	; 0x02
   131d8:	eb 82       	std	Y+3, r14	; 0x03
   131da:	3c 2c       	mov	r3, r12
   131dc:	2d 2c       	mov	r2, r13
   131de:	98 2d       	mov	r25, r8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4453
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
  uint8_t druhy = 0;
  back_color = LIGHTGREY;
  if (state == 0)
   131e0:	88 20       	and	r8, r8
   131e2:	51 f0       	breq	.+20     	; 0x131f8 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4455
    back_color = color_inactive;
  if (state == 1)
   131e4:	91 30       	cpi	r25, 0x01	; 1
   131e6:	51 f0       	breq	.+20     	; 0x131fc <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4457
    back_color = color_active;
  if (state == 2)
   131e8:	92 30       	cpi	r25, 0x02	; 2
   131ea:	09 f4       	brne	.+2      	; 0x131ee <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x48>
   131ec:	cf c0       	rjmp	.+414    	; 0x1338c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4452
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
  uint8_t druhy = 0;
  back_color = LIGHTGREY;
   131ee:	a8 e1       	ldi	r26, 0x18	; 24
   131f0:	3a 2e       	mov	r3, r26
   131f2:	b6 ec       	ldi	r27, 0xC6	; 198
   131f4:	2b 2e       	mov	r2, r27
   131f6:	02 c0       	rjmp	.+4      	; 0x131fc <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4454
  if (state == 0)
    back_color = color_inactive;
   131f8:	3a 2c       	mov	r3, r10
   131fa:	2b 2c       	mov	r2, r11
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   131fc:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
   13200:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
   13204:	10 e0       	ldi	r17, 0x00	; 0
   13206:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4463
  {
    goto button_click_2_end ;
  }
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
   13208:	a2 2e       	mov	r10, r18
   1320a:	b1 2c       	mov	r11, r1
   1320c:	84 2e       	mov	r8, r20
   1320e:	91 2c       	mov	r9, r1
   13210:	65 01       	movw	r12, r10
   13212:	c6 0c       	add	r12, r6
   13214:	d7 1c       	adc	r13, r7
   13216:	74 01       	movw	r14, r8
   13218:	e4 0c       	add	r14, r4
   1321a:	f5 1c       	adc	r15, r5
   1321c:	96 01       	movw	r18, r12
   1321e:	20 1b       	sub	r18, r16
   13220:	31 0b       	sbc	r19, r17
   13222:	a7 01       	movw	r20, r14
   13224:	40 1b       	sub	r20, r16
   13226:	51 0b       	sbc	r21, r17
   13228:	b8 01       	movw	r22, r16
   1322a:	66 0d       	add	r22, r6
   1322c:	77 1d       	adc	r23, r7
   1322e:	c8 01       	movw	r24, r16
   13230:	84 0d       	add	r24, r4
   13232:	95 1d       	adc	r25, r5
   13234:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>
   13238:	0f 5f       	subi	r16, 0xFF	; 255
   1323a:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4462
  if (state == 2)
  {
    goto button_click_2_end ;
  }
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
   1323c:	03 30       	cpi	r16, 0x03	; 3
   1323e:	11 05       	cpc	r17, r1
   13240:	69 f7       	brne	.-38     	; 0x1321c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x76>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   13242:	30 92 c3 0f 	sts	0x0FC3, r3	; 0x800fc3 <my_lcd+0xa>
   13246:	20 92 c4 0f 	sts	0x0FC4, r2	; 0x800fc4 <my_lcd+0xb>
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4465
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
   1324a:	93 01       	movw	r18, r6
   1324c:	23 50       	subi	r18, 0x03	; 3
   1324e:	31 09       	sbc	r19, r1
   13250:	2a 0d       	add	r18, r10
   13252:	3b 1d       	adc	r19, r11
   13254:	a2 01       	movw	r20, r4
   13256:	43 50       	subi	r20, 0x03	; 3
   13258:	51 09       	sbc	r21, r1
   1325a:	48 0d       	add	r20, r8
   1325c:	59 1d       	adc	r21, r9
   1325e:	b3 01       	movw	r22, r6
   13260:	6d 5f       	subi	r22, 0xFD	; 253
   13262:	7f 4f       	sbci	r23, 0xFF	; 255
   13264:	c2 01       	movw	r24, r4
   13266:	03 96       	adiw	r24, 0x03	; 3
   13268:	0e 94 90 ad 	call	0x15b20	; 0x15b20 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.226]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4466
  if (strlen(line1) > 0)
   1326c:	ea 8d       	ldd	r30, Y+26	; 0x1a
   1326e:	fb 8d       	ldd	r31, Y+27	; 0x1b
   13270:	80 81       	ld	r24, Z
   13272:	88 23       	and	r24, r24
   13274:	09 f4       	brne	.+2      	; 0x13278 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xd2>
   13276:	a1 c0       	rjmp	.+322    	; 0x133ba <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x214>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4468
  {
    prvni = 1;
   13278:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4469
    num_lines_const = 2;
   1327a:	f2 e0       	ldi	r31, 0x02	; 2
   1327c:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4471
  }
  if (strlen(line2) > 0)
   1327e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   13280:	fd 8d       	ldd	r31, Y+29	; 0x1d
   13282:	90 81       	ld	r25, Z
   13284:	99 23       	and	r25, r25
   13286:	09 f4       	brne	.+2      	; 0x1328a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xe4>
   13288:	9b c0       	rjmp	.+310    	; 0x133c0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x21a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4474
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
   1328a:	f9 81       	ldd	r31, Y+1	; 0x01
   1328c:	fe 5f       	subi	r31, 0xFE	; 254
   1328e:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4473
    prvni = 1;
    num_lines_const = 2;
  }
  if (strlen(line2) > 0)
  {
    druhy = 1;
   13290:	21 e0       	ldi	r18, 0x01	; 1
   13292:	2c 83       	std	Y+4, r18	; 0x04
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4444
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{

  uint16_t back_color;
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
   13294:	d1 2c       	mov	r13, r1
   13296:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4476
  if (strlen(line2) > 0)
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
   13298:	81 30       	cpi	r24, 0x01	; 1
   1329a:	d1 f5       	brne	.+116    	; 0x13310 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x16a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4478
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
   1329c:	ea 8d       	ldd	r30, Y+26	; 0x1a
   1329e:	fb 8d       	ldd	r31, Y+27	; 0x1b
   132a0:	01 90       	ld	r0, Z+
   132a2:	00 20       	and	r0, r0
   132a4:	e9 f7       	brne	.-6      	; 0x132a0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xfa>
   132a6:	9f 01       	movw	r18, r30
   132a8:	21 50       	subi	r18, 0x01	; 1
   132aa:	31 09       	sbc	r19, r1
   132ac:	4a 8d       	ldd	r20, Y+26	; 0x1a
   132ae:	5b 8d       	ldd	r21, Y+27	; 0x1b
   132b0:	24 1b       	sub	r18, r20
   132b2:	35 0b       	sbc	r19, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1736
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   132b4:	8a 81       	ldd	r24, Y+2	; 0x02
   132b6:	88 0f       	add	r24, r24
   132b8:	5a 81       	ldd	r21, Y+2	; 0x02
   132ba:	85 0f       	add	r24, r21
   132bc:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4480
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
   132be:	f5 01       	movw	r30, r10
   132c0:	e8 1b       	sub	r30, r24
   132c2:	f1 09       	sbc	r31, r1
   132c4:	cf 01       	movw	r24, r30
   132c6:	f9 81       	ldd	r31, Y+1	; 0x01
   132c8:	6f 2f       	mov	r22, r31
   132ca:	70 e0       	ldi	r23, 0x00	; 0
   132cc:	0e 94 51 ef 	call	0x1dea2	; 0x1dea2 <__divmodhi4>
   132d0:	6b 01       	movw	r12, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4481
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
   132d2:	a3 01       	movw	r20, r6
   132d4:	41 50       	subi	r20, 0x01	; 1
   132d6:	51 09       	sbc	r21, r1
   132d8:	46 0f       	add	r20, r22
   132da:	57 1f       	adc	r21, r23
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   132dc:	66 e0       	ldi	r22, 0x06	; 6
   132de:	26 9f       	mul	r18, r22
   132e0:	90 01       	movw	r18, r0
   132e2:	11 24       	eor	r1, r1
   132e4:	ea 81       	ldd	r30, Y+2	; 0x02
   132e6:	e2 9f       	mul	r30, r18
   132e8:	c0 01       	movw	r24, r0
   132ea:	e3 9f       	mul	r30, r19
   132ec:	90 0d       	add	r25, r0
   132ee:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4479
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
   132f0:	b4 01       	movw	r22, r8
   132f2:	68 1b       	sub	r22, r24
   132f4:	79 0b       	sbc	r23, r25
   132f6:	76 95       	lsr	r23
   132f8:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4481
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
   132fa:	64 0d       	add	r22, r4
   132fc:	75 1d       	adc	r23, r5
   132fe:	e3 2c       	mov	r14, r3
   13300:	f2 2c       	mov	r15, r2
   13302:	10 e0       	ldi	r17, 0x00	; 0
   13304:	00 e0       	ldi	r16, 0x00	; 0
   13306:	2e 2f       	mov	r18, r30
   13308:	8a 8d       	ldd	r24, Y+26	; 0x1a
   1330a:	9b 8d       	ldd	r25, Y+27	; 0x1b
   1330c:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4483
  }
  if (druhy == 1)
   13310:	fc 81       	ldd	r31, Y+4	; 0x04
   13312:	f1 30       	cpi	r31, 0x01	; 1
   13314:	d9 f5       	brne	.+118    	; 0x1338c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4485
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
   13316:	ec 8d       	ldd	r30, Y+28	; 0x1c
   13318:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1331a:	01 90       	ld	r0, Z+
   1331c:	00 20       	and	r0, r0
   1331e:	e9 f7       	brne	.-6      	; 0x1331a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x174>
   13320:	31 97       	sbiw	r30, 0x01	; 1
   13322:	2c 8d       	ldd	r18, Y+28	; 0x1c
   13324:	3d 8d       	ldd	r19, Y+29	; 0x1d
   13326:	e2 1b       	sub	r30, r18
   13328:	f3 0b       	sbc	r31, r19
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1736
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   1332a:	8b 81       	ldd	r24, Y+3	; 0x03
   1332c:	88 0f       	add	r24, r24
   1332e:	3b 81       	ldd	r19, Y+3	; 0x03
   13330:	83 0f       	add	r24, r19
   13332:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4487
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
   13334:	a5 01       	movw	r20, r10
   13336:	48 1b       	sub	r20, r24
   13338:	51 09       	sbc	r21, r1
   1333a:	ca 01       	movw	r24, r20
   1333c:	88 0f       	add	r24, r24
   1333e:	99 1f       	adc	r25, r25
   13340:	59 81       	ldd	r21, Y+1	; 0x01
   13342:	65 2f       	mov	r22, r21
   13344:	70 e0       	ldi	r23, 0x00	; 0
   13346:	0e 94 51 ef 	call	0x1dea2	; 0x1dea2 <__divmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4488
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
   1334a:	81 e0       	ldi	r24, 0x01	; 1
   1334c:	68 1a       	sub	r6, r24
   1334e:	71 08       	sbc	r7, r1
   13350:	66 0e       	add	r6, r22
   13352:	77 1e       	adc	r7, r23
   13354:	a3 01       	movw	r20, r6
   13356:	4c 0d       	add	r20, r12
   13358:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   1335a:	96 e0       	ldi	r25, 0x06	; 6
   1335c:	e9 9f       	mul	r30, r25
   1335e:	f0 01       	movw	r30, r0
   13360:	11 24       	eor	r1, r1
   13362:	3e 9f       	mul	r19, r30
   13364:	c0 01       	movw	r24, r0
   13366:	3f 9f       	mul	r19, r31
   13368:	90 0d       	add	r25, r0
   1336a:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4486
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
   1336c:	b4 01       	movw	r22, r8
   1336e:	68 1b       	sub	r22, r24
   13370:	79 0b       	sbc	r23, r25
   13372:	76 95       	lsr	r23
   13374:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4488
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
   13376:	64 0d       	add	r22, r4
   13378:	75 1d       	adc	r23, r5
   1337a:	e3 2c       	mov	r14, r3
   1337c:	f2 2c       	mov	r15, r2
   1337e:	10 e0       	ldi	r17, 0x00	; 0
   13380:	00 e0       	ldi	r16, 0x00	; 0
   13382:	23 2f       	mov	r18, r19
   13384:	8c 8d       	ldd	r24, Y+28	; 0x1c
   13386:	9d 8d       	ldd	r25, Y+29	; 0x1d
   13388:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4492
  }
button_click_2_end:
  state = 0;
}
   1338c:	0f 90       	pop	r0
   1338e:	0f 90       	pop	r0
   13390:	0f 90       	pop	r0
   13392:	0f 90       	pop	r0
   13394:	df 91       	pop	r29
   13396:	cf 91       	pop	r28
   13398:	1f 91       	pop	r17
   1339a:	0f 91       	pop	r16
   1339c:	ff 90       	pop	r15
   1339e:	ef 90       	pop	r14
   133a0:	df 90       	pop	r13
   133a2:	cf 90       	pop	r12
   133a4:	bf 90       	pop	r11
   133a6:	af 90       	pop	r10
   133a8:	9f 90       	pop	r9
   133aa:	8f 90       	pop	r8
   133ac:	7f 90       	pop	r7
   133ae:	6f 90       	pop	r6
   133b0:	5f 90       	pop	r5
   133b2:	4f 90       	pop	r4
   133b4:	3f 90       	pop	r3
   133b6:	2f 90       	pop	r2
   133b8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4450
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
   133ba:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4449
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
   133bc:	19 82       	std	Y+1, r1	; 0x01
   133be:	5f cf       	rjmp	.-322    	; 0x1327e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4451
  uint8_t prvni = 0;
  uint8_t druhy = 0;
   133c0:	1c 82       	std	Y+4, r1	; 0x04
   133c2:	68 cf       	rjmp	.-304    	; 0x13294 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xee>

000133c4 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4404
//////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
   133c4:	2f 92       	push	r2
   133c6:	3f 92       	push	r3
   133c8:	4f 92       	push	r4
   133ca:	5f 92       	push	r5
   133cc:	6f 92       	push	r6
   133ce:	7f 92       	push	r7
   133d0:	8f 92       	push	r8
   133d2:	9f 92       	push	r9
   133d4:	af 92       	push	r10
   133d6:	bf 92       	push	r11
   133d8:	cf 92       	push	r12
   133da:	df 92       	push	r13
   133dc:	ef 92       	push	r14
   133de:	ff 92       	push	r15
   133e0:	0f 93       	push	r16
   133e2:	1f 93       	push	r17
   133e4:	cf 93       	push	r28
   133e6:	df 93       	push	r29
   133e8:	00 d0       	rcall	.+0      	; 0x133ea <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
   133ea:	1f 92       	push	r1
   133ec:	1f 92       	push	r1
   133ee:	cd b7       	in	r28, 0x3d	; 61
   133f0:	de b7       	in	r29, 0x3e	; 62
   133f2:	2c 01       	movw	r4, r24
   133f4:	3b 01       	movw	r6, r22
   133f6:	5a 83       	std	Y+2, r21	; 0x02
   133f8:	49 83       	std	Y+1, r20	; 0x01
   133fa:	19 01       	movw	r2, r18
   133fc:	90 2e       	mov	r9, r16
   133fe:	eb 82       	std	Y+3, r14	; 0x03
   13400:	dd 82       	std	Y+5, r13	; 0x05
   13402:	cc 82       	std	Y+4, r12	; 0x04
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   13404:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
   13408:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
   1340c:	10 e0       	ldi	r17, 0x00	; 0
   1340e:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4414
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
   13410:	6b 01       	movw	r12, r22
   13412:	c2 0e       	add	r12, r18
   13414:	d3 1e       	adc	r13, r19
   13416:	7a 01       	movw	r14, r20
   13418:	e8 0e       	add	r14, r24
   1341a:	f9 1e       	adc	r15, r25
   1341c:	96 01       	movw	r18, r12
   1341e:	20 1b       	sub	r18, r16
   13420:	31 0b       	sbc	r19, r17
   13422:	a7 01       	movw	r20, r14
   13424:	40 1b       	sub	r20, r16
   13426:	51 0b       	sbc	r21, r17
   13428:	b8 01       	movw	r22, r16
   1342a:	66 0d       	add	r22, r6
   1342c:	77 1d       	adc	r23, r7
   1342e:	c8 01       	movw	r24, r16
   13430:	84 0d       	add	r24, r4
   13432:	95 1d       	adc	r25, r5
   13434:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>
   13438:	0f 5f       	subi	r16, 0xFF	; 255
   1343a:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4413
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
   1343c:	03 30       	cpi	r16, 0x03	; 3
   1343e:	11 05       	cpc	r17, r1
   13440:	69 f7       	brne	.-38     	; 0x1341c <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x58>
   13442:	91 01       	movw	r18, r2
   13444:	23 50       	subi	r18, 0x03	; 3
   13446:	31 09       	sbc	r19, r1
   13448:	49 81       	ldd	r20, Y+1	; 0x01
   1344a:	5a 81       	ldd	r21, Y+2	; 0x02
   1344c:	43 50       	subi	r20, 0x03	; 3
   1344e:	51 09       	sbc	r21, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4415
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  if (clean == 1)
   13450:	61 e0       	ldi	r22, 0x01	; 1
   13452:	86 12       	cpse	r8, r22
   13454:	11 c0       	rjmp	.+34     	; 0x13478 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xb4>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   13456:	8f ef       	ldi	r24, 0xFF	; 255
   13458:	9f ef       	ldi	r25, 0xFF	; 255
   1345a:	90 93 c4 0f 	sts	0x0FC4, r25	; 0x800fc4 <my_lcd+0xb>
   1345e:	80 93 c3 0f 	sts	0x0FC3, r24	; 0x800fc3 <my_lcd+0xa>
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4418
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
   13462:	26 0d       	add	r18, r6
   13464:	37 1d       	adc	r19, r7
   13466:	44 0d       	add	r20, r4
   13468:	55 1d       	adc	r21, r5
   1346a:	b3 01       	movw	r22, r6
   1346c:	6d 5f       	subi	r22, 0xFD	; 253
   1346e:	7f 4f       	sbci	r23, 0xFF	; 255
   13470:	c2 01       	movw	r24, r4
   13472:	03 96       	adiw	r24, 0x03	; 3
   13474:	0e 94 90 ad 	call	0x15b20	; 0x15b20 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.226]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4420
  }
  if (strlen(line1) > 0)
   13478:	ec 81       	ldd	r30, Y+4	; 0x04
   1347a:	fd 81       	ldd	r31, Y+5	; 0x05
   1347c:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4411
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
   1347e:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4406
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
   13480:	d1 2c       	mov	r13, r1
   13482:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4420
  if (clean == 1)
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
   13484:	88 23       	and	r24, r24
   13486:	91 f1       	breq	.+100    	; 0x134ec <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4423
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
   13488:	01 90       	ld	r0, Z+
   1348a:	00 20       	and	r0, r0
   1348c:	e9 f7       	brne	.-6      	; 0x13488 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xc4>
   1348e:	31 97       	sbiw	r30, 0x01	; 1
   13490:	4c 81       	ldd	r20, Y+4	; 0x04
   13492:	5d 81       	ldd	r21, Y+5	; 0x05
   13494:	e4 1b       	sub	r30, r20
   13496:	f5 0b       	sbc	r31, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1736
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   13498:	89 2d       	mov	r24, r9
   1349a:	88 0f       	add	r24, r24
   1349c:	89 0d       	add	r24, r9
   1349e:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4425
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
   134a0:	61 01       	movw	r12, r2
   134a2:	c8 1a       	sub	r12, r24
   134a4:	d1 08       	sbc	r13, r1
   134a6:	d6 94       	lsr	r13
   134a8:	c7 94       	ror	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4426
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
   134aa:	a3 01       	movw	r20, r6
   134ac:	41 50       	subi	r20, 0x01	; 1
   134ae:	51 09       	sbc	r21, r1
   134b0:	4c 0d       	add	r20, r12
   134b2:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   134b4:	66 e0       	ldi	r22, 0x06	; 6
   134b6:	e6 9f       	mul	r30, r22
   134b8:	f0 01       	movw	r30, r0
   134ba:	11 24       	eor	r1, r1
   134bc:	9e 9e       	mul	r9, r30
   134be:	c0 01       	movw	r24, r0
   134c0:	9f 9e       	mul	r9, r31
   134c2:	90 0d       	add	r25, r0
   134c4:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4424
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
   134c6:	69 81       	ldd	r22, Y+1	; 0x01
   134c8:	7a 81       	ldd	r23, Y+2	; 0x02
   134ca:	68 1b       	sub	r22, r24
   134cc:	79 0b       	sbc	r23, r25
   134ce:	76 95       	lsr	r23
   134d0:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4426
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
   134d2:	64 0d       	add	r22, r4
   134d4:	75 1d       	adc	r23, r5
   134d6:	ee 24       	eor	r14, r14
   134d8:	ea 94       	dec	r14
   134da:	fe 2c       	mov	r15, r14
   134dc:	10 e0       	ldi	r17, 0x00	; 0
   134de:	00 e0       	ldi	r16, 0x00	; 0
   134e0:	29 2d       	mov	r18, r9
   134e2:	8c 81       	ldd	r24, Y+4	; 0x04
   134e4:	9d 81       	ldd	r25, Y+5	; 0x05
   134e6:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4422
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
   134ea:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4428
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
   134ec:	f5 01       	movw	r30, r10
   134ee:	80 81       	ld	r24, Z
   134f0:	88 23       	and	r24, r24
   134f2:	b9 f1       	breq	.+110    	; 0x13562 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4431
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
   134f4:	01 90       	ld	r0, Z+
   134f6:	00 20       	and	r0, r0
   134f8:	e9 f7       	brne	.-6      	; 0x134f4 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x130>
   134fa:	9f 01       	movw	r18, r30
   134fc:	21 50       	subi	r18, 0x01	; 1
   134fe:	31 09       	sbc	r19, r1
   13500:	2a 19       	sub	r18, r10
   13502:	3b 09       	sbc	r19, r11
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1736
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   13504:	8b 81       	ldd	r24, Y+3	; 0x03
   13506:	88 0f       	add	r24, r24
   13508:	fb 81       	ldd	r31, Y+3	; 0x03
   1350a:	8f 0f       	add	r24, r31
   1350c:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4433
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
   1350e:	a1 01       	movw	r20, r2
   13510:	48 1b       	sub	r20, r24
   13512:	51 09       	sbc	r21, r1
   13514:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4430
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
   13516:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4433
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
   13518:	70 e0       	ldi	r23, 0x00	; 0
   1351a:	0e 94 3d ef 	call	0x1de7a	; 0x1de7a <__udivmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4434
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
   1351e:	51 e0       	ldi	r21, 0x01	; 1
   13520:	65 1a       	sub	r6, r21
   13522:	71 08       	sbc	r7, r1
   13524:	c6 0c       	add	r12, r6
   13526:	d7 1c       	adc	r13, r7
   13528:	ab 01       	movw	r20, r22
   1352a:	4c 0d       	add	r20, r12
   1352c:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   1352e:	66 e0       	ldi	r22, 0x06	; 6
   13530:	26 9f       	mul	r18, r22
   13532:	90 01       	movw	r18, r0
   13534:	11 24       	eor	r1, r1
   13536:	f2 9f       	mul	r31, r18
   13538:	c0 01       	movw	r24, r0
   1353a:	f3 9f       	mul	r31, r19
   1353c:	90 0d       	add	r25, r0
   1353e:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4432
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
   13540:	69 81       	ldd	r22, Y+1	; 0x01
   13542:	7a 81       	ldd	r23, Y+2	; 0x02
   13544:	68 1b       	sub	r22, r24
   13546:	79 0b       	sbc	r23, r25
   13548:	76 95       	lsr	r23
   1354a:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4434
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
   1354c:	64 0d       	add	r22, r4
   1354e:	75 1d       	adc	r23, r5
   13550:	ee 24       	eor	r14, r14
   13552:	ea 94       	dec	r14
   13554:	fe 2c       	mov	r15, r14
   13556:	10 e0       	ldi	r17, 0x00	; 0
   13558:	00 e0       	ldi	r16, 0x00	; 0
   1355a:	2f 2f       	mov	r18, r31
   1355c:	c5 01       	movw	r24, r10
   1355e:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4436
  }
}
   13562:	0f 90       	pop	r0
   13564:	0f 90       	pop	r0
   13566:	0f 90       	pop	r0
   13568:	0f 90       	pop	r0
   1356a:	0f 90       	pop	r0
   1356c:	df 91       	pop	r29
   1356e:	cf 91       	pop	r28
   13570:	1f 91       	pop	r17
   13572:	0f 91       	pop	r16
   13574:	ff 90       	pop	r15
   13576:	ef 90       	pop	r14
   13578:	df 90       	pop	r13
   1357a:	cf 90       	pop	r12
   1357c:	bf 90       	pop	r11
   1357e:	af 90       	pop	r10
   13580:	9f 90       	pop	r9
   13582:	8f 90       	pop	r8
   13584:	7f 90       	pop	r7
   13586:	6f 90       	pop	r6
   13588:	5f 90       	pop	r5
   1358a:	4f 90       	pop	r4
   1358c:	3f 90       	pop	r3
   1358e:	2f 90       	pop	r2
   13590:	08 95       	ret

00013592 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4380
    display_update_slider = 1;
  }
}
///
void process_display_element_slider(uint8_t *start, uint8_t *stop, uint8_t args, uint8_t max_element)
{
   13592:	cf 93       	push	r28
   13594:	df 93       	push	r29
   13596:	fc 01       	movw	r30, r24
   13598:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4381
  if (max_element > 0)
   1359a:	22 23       	and	r18, r18
   1359c:	09 f1       	breq	.+66     	; 0x135e0 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4383
  {
    menu_slider_data_max = *stop;
   1359e:	98 81       	ld	r25, Y
   135a0:	90 93 92 09 	sts	0x0992, r25	; 0x800992 <menu_slider_data_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4384
    menu_slider_data_min = *start;
   135a4:	80 81       	ld	r24, Z
   135a6:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <menu_slider_data_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4385
    menu_slider_data_max_element = max_element;
   135aa:	20 93 90 09 	sts	0x0990, r18	; 0x800990 <menu_slider_data_max_element>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4387
    ///
    *start = menu_slider_data_current[args];
   135ae:	a4 2f       	mov	r26, r20
   135b0:	b0 e0       	ldi	r27, 0x00	; 0
   135b2:	a6 57       	subi	r26, 0x76	; 118
   135b4:	b6 4f       	sbci	r27, 0xF6	; 246
   135b6:	3c 91       	ld	r19, X
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4388
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
   135b8:	62 2f       	mov	r22, r18
   135ba:	70 e0       	ldi	r23, 0x00	; 0
   135bc:	49 2f       	mov	r20, r25
   135be:	50 e0       	ldi	r21, 0x00	; 0
   135c0:	db 01       	movw	r26, r22
   135c2:	a3 0f       	add	r26, r19
   135c4:	b1 1d       	adc	r27, r1
   135c6:	4a 17       	cp	r20, r26
   135c8:	5b 07       	cpc	r21, r27
   135ca:	6c f0       	brlt	.+26     	; 0x135e6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4387
  {
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
   135cc:	30 83       	st	Z, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4390
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
   135ce:	80 81       	ld	r24, Z
   135d0:	98 17       	cp	r25, r24
   135d2:	08 f4       	brcc	.+2      	; 0x135d6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4391
      *start = menu_slider_data_max;
   135d4:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4394
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
   135d6:	29 17       	cp	r18, r25
   135d8:	78 f4       	brcc	.+30     	; 0x135f8 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4393
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
   135da:	80 81       	ld	r24, Z
   135dc:	28 0f       	add	r18, r24
   135de:	28 83       	st	Y, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4397
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
  }
}
   135e0:	df 91       	pop	r29
   135e2:	cf 91       	pop	r28
   135e4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4388
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
   135e6:	48 1b       	sub	r20, r24
   135e8:	51 09       	sbc	r21, r1
   135ea:	64 17       	cp	r22, r20
   135ec:	75 07       	cpc	r23, r21
   135ee:	74 f7       	brge	.-36     	; 0x135cc <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4389
      *start = menu_slider_data_max - max_element;
   135f0:	89 2f       	mov	r24, r25
   135f2:	82 1b       	sub	r24, r18
   135f4:	80 83       	st	Z, r24
   135f6:	eb cf       	rjmp	.-42     	; 0x135ce <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4395
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
   135f8:	98 83       	st	Y, r25
   135fa:	f2 cf       	rjmp	.-28     	; 0x135e0 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>

000135fc <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1216
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
   135fc:	ff 92       	push	r15
   135fe:	0f 93       	push	r16
   13600:	1f 93       	push	r17
   13602:	cf 93       	push	r28
   13604:	df 93       	push	r29
   13606:	dc 01       	movw	r26, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1221
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   13608:	20 91 19 0d 	lds	r18, 0x0D19	; 0x800d19 <MenuHistoryIndex>
   1360c:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1218
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
   1360e:	80 e0       	ldi	r24, 0x00	; 0
   13610:	66 ed       	ldi	r22, 0xD6	; 214
   13612:	79 e0       	ldi	r23, 0x09	; 9
   13614:	ce ee       	ldi	r28, 0xEE	; 238
   13616:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1221
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   13618:	89 01       	movw	r16, r18
   1361a:	01 5f       	subi	r16, 0xF1	; 241
   1361c:	12 4f       	sbci	r17, 0xF2	; 242
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1218
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
   1361e:	fb 01       	movw	r30, r22
   13620:	94 91       	lpm	r25, Z
   13622:	89 17       	cp	r24, r25
   13624:	e8 f4       	brcc	.+58     	; 0x13660 <MenuHistoryGetMenu(unsigned char*)+0x64>
   13626:	8c 9f       	mul	r24, r28
   13628:	a0 01       	movw	r20, r0
   1362a:	8d 9f       	mul	r24, r29
   1362c:	50 0d       	add	r21, r0
   1362e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1221
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   13630:	fa 01       	movw	r30, r20
   13632:	ef 54       	subi	r30, 0x4F	; 79
   13634:	f3 4f       	sbci	r31, 0xF3	; 243
   13636:	f4 90       	lpm	r15, Z
   13638:	f8 01       	movw	r30, r16
   1363a:	90 81       	ld	r25, Z
   1363c:	9f 11       	cpse	r25, r15
   1363e:	0e c0       	rjmp	.+28     	; 0x1365c <MenuHistoryGetMenu(unsigned char*)+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1220
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
   13640:	46 52       	subi	r20, 0x26	; 38
   13642:	56 4f       	sbci	r21, 0xF6	; 246
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1252
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
   13644:	2b 5f       	subi	r18, 0xFB	; 251
   13646:	32 4f       	sbci	r19, 0xF2	; 242
   13648:	f9 01       	movw	r30, r18
   1364a:	20 81       	ld	r18, Z
   1364c:	2c 93       	st	X, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1256
      return menus;
    }
  }
}
   1364e:	ca 01       	movw	r24, r20
   13650:	df 91       	pop	r29
   13652:	cf 91       	pop	r28
   13654:	1f 91       	pop	r17
   13656:	0f 91       	pop	r16
   13658:	ff 90       	pop	r15
   1365a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1218
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
   1365c:	8f 5f       	subi	r24, 0xFF	; 255
   1365e:	df cf       	rjmp	.-66     	; 0x1361e <MenuHistoryGetMenu(unsigned char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1227
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
   13660:	80 e0       	ldi	r24, 0x00	; 0
   13662:	67 ed       	ldi	r22, 0xD7	; 215
   13664:	79 e0       	ldi	r23, 0x09	; 9
   13666:	ce ee       	ldi	r28, 0xEE	; 238
   13668:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1230
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   1366a:	89 01       	movw	r16, r18
   1366c:	01 5f       	subi	r16, 0xF1	; 241
   1366e:	12 4f       	sbci	r17, 0xF2	; 242
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1227
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
   13670:	fb 01       	movw	r30, r22
   13672:	94 91       	lpm	r25, Z
   13674:	89 17       	cp	r24, r25
   13676:	90 f4       	brcc	.+36     	; 0x1369c <MenuHistoryGetMenu(unsigned char*)+0xa0>
   13678:	8c 9f       	mul	r24, r28
   1367a:	a0 01       	movw	r20, r0
   1367c:	8d 9f       	mul	r24, r29
   1367e:	50 0d       	add	r21, r0
   13680:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1230
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   13682:	fa 01       	movw	r30, r20
   13684:	e3 50       	subi	r30, 0x03	; 3
   13686:	f6 4d       	sbci	r31, 0xD6	; 214
   13688:	f4 90       	lpm	r15, Z
   1368a:	f8 01       	movw	r30, r16
   1368c:	90 81       	ld	r25, Z
   1368e:	9f 11       	cpse	r25, r15
   13690:	03 c0       	rjmp	.+6      	; 0x13698 <MenuHistoryGetMenu(unsigned char*)+0x9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1229
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
  {
    menus = &Menu_All.ListMenu2[idx];
   13692:	4a 5d       	subi	r20, 0xDA	; 218
   13694:	58 4d       	sbci	r21, 0xD8	; 216
   13696:	d6 cf       	rjmp	.-84     	; 0x13644 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1227
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
   13698:	8f 5f       	subi	r24, 0xFF	; 255
   1369a:	ea cf       	rjmp	.-44     	; 0x13670 <MenuHistoryGetMenu(unsigned char*)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1237
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
   1369c:	80 e0       	ldi	r24, 0x00	; 0
   1369e:	68 ed       	ldi	r22, 0xD8	; 216
   136a0:	79 e0       	ldi	r23, 0x09	; 9
   136a2:	ce ee       	ldi	r28, 0xEE	; 238
   136a4:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1240
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   136a6:	89 01       	movw	r16, r18
   136a8:	01 5f       	subi	r16, 0xF1	; 241
   136aa:	12 4f       	sbci	r17, 0xF2	; 242
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1237
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
   136ac:	fb 01       	movw	r30, r22
   136ae:	94 91       	lpm	r25, Z
   136b0:	89 17       	cp	r24, r25
   136b2:	90 f4       	brcc	.+36     	; 0x136d8 <MenuHistoryGetMenu(unsigned char*)+0xdc>
   136b4:	8c 9f       	mul	r24, r28
   136b6:	a0 01       	movw	r20, r0
   136b8:	8d 9f       	mul	r24, r29
   136ba:	50 0d       	add	r21, r0
   136bc:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1240
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   136be:	fa 01       	movw	r30, r20
   136c0:	e1 58       	subi	r30, 0x81	; 129
   136c2:	f1 4c       	sbci	r31, 0xC1	; 193
   136c4:	f4 90       	lpm	r15, Z
   136c6:	f8 01       	movw	r30, r16
   136c8:	90 81       	ld	r25, Z
   136ca:	9f 11       	cpse	r25, r15
   136cc:	03 c0       	rjmp	.+6      	; 0x136d4 <MenuHistoryGetMenu(unsigned char*)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1239
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
   136ce:	48 55       	subi	r20, 0x58	; 88
   136d0:	54 4c       	sbci	r21, 0xC4	; 196
   136d2:	b8 cf       	rjmp	.-144    	; 0x13644 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1237
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
   136d4:	8f 5f       	subi	r24, 0xFF	; 255
   136d6:	ea cf       	rjmp	.-44     	; 0x136ac <MenuHistoryGetMenu(unsigned char*)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1247
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
   136d8:	90 e0       	ldi	r25, 0x00	; 0
   136da:	69 ed       	ldi	r22, 0xD9	; 217
   136dc:	79 e0       	ldi	r23, 0x09	; 9
   136de:	ce ee       	ldi	r28, 0xEE	; 238
   136e0:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1250
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   136e2:	89 01       	movw	r16, r18
   136e4:	01 5f       	subi	r16, 0xF1	; 241
   136e6:	12 4f       	sbci	r17, 0xF2	; 242
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1247
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
   136e8:	fb 01       	movw	r30, r22
   136ea:	84 91       	lpm	r24, Z
   136ec:	98 17       	cp	r25, r24
   136ee:	08 f0       	brcs	.+2      	; 0x136f2 <MenuHistoryGetMenu(unsigned char*)+0xf6>
   136f0:	ae cf       	rjmp	.-164    	; 0x1364e <MenuHistoryGetMenu(unsigned char*)+0x52>
   136f2:	9c 9f       	mul	r25, r28
   136f4:	a0 01       	movw	r20, r0
   136f6:	9d 9f       	mul	r25, r29
   136f8:	50 0d       	add	r21, r0
   136fa:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1250
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   136fc:	fa 01       	movw	r30, r20
   136fe:	e5 53       	subi	r30, 0x35	; 53
   13700:	f4 4a       	sbci	r31, 0xA4	; 164
   13702:	f4 90       	lpm	r15, Z
   13704:	f8 01       	movw	r30, r16
   13706:	80 81       	ld	r24, Z
   13708:	8f 11       	cpse	r24, r15
   1370a:	03 c0       	rjmp	.+6      	; 0x13712 <MenuHistoryGetMenu(unsigned char*)+0x116>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1249
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
  {
    menus = &Menu_All.ListMenu4[idx];
   1370c:	4c 50       	subi	r20, 0x0C	; 12
   1370e:	57 4a       	sbci	r21, 0xA7	; 167
   13710:	99 cf       	rjmp	.-206    	; 0x13644 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1247
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
   13712:	9f 5f       	subi	r25, 0xFF	; 255
   13714:	e9 cf       	rjmp	.-46     	; 0x136e8 <MenuHistoryGetMenu(unsigned char*)+0xec>

00013716 <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1134



/////////////////////////////////////////////////////////////////////////////////////////////
void MenuPrepareStyle(void)
{
   13716:	4f 92       	push	r4
   13718:	5f 92       	push	r5
   1371a:	6f 92       	push	r6
   1371c:	7f 92       	push	r7
   1371e:	8f 92       	push	r8
   13720:	9f 92       	push	r9
   13722:	af 92       	push	r10
   13724:	bf 92       	push	r11
   13726:	cf 92       	push	r12
   13728:	df 92       	push	r13
   1372a:	ef 92       	push	r14
   1372c:	ff 92       	push	r15
   1372e:	0f 93       	push	r16
   13730:	1f 93       	push	r17
   13732:	cf 93       	push	r28
   13734:	df 93       	push	r29
   13736:	1f 92       	push	r1
   13738:	cd b7       	in	r28, 0x3d	; 61
   1373a:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1145
  uint16_t color_background;
  uint8_t args1;
  const Menu1 *current;
  ret_fptr *rfnt;

  current = MenuHistoryGetMenu(&args1);
   1373c:	ce 01       	movw	r24, r28
   1373e:	01 96       	adiw	r24, 0x01	; 1
   13740:	0e 94 fe 9a 	call	0x135fc	; 0x135fc <MenuHistoryGetMenu(unsigned char*)>
   13744:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1146
  attr = pgm_read_byte(&current->atributes);
   13746:	fc 01       	movw	r30, r24
   13748:	e0 52       	subi	r30, 0x20	; 32
   1374a:	fd 4f       	sbci	r31, 0xFD	; 253
   1374c:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1147
  x = pgm_read_word(&current->x);
   1374e:	38 97       	sbiw	r30, 0x08	; 8
   13750:	c5 90       	lpm	r12, Z+
   13752:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1148
  y = pgm_read_word(&current->y);
   13754:	fc 01       	movw	r30, r24
   13756:	e6 52       	subi	r30, 0x26	; 38
   13758:	fd 4f       	sbci	r31, 0xFD	; 253
   1375a:	e5 90       	lpm	r14, Z+
   1375c:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1149
  size_x = pgm_read_word(&current->size_x);
   1375e:	fc 01       	movw	r30, r24
   13760:	e4 52       	subi	r30, 0x24	; 36
   13762:	fd 4f       	sbci	r31, 0xFD	; 253
   13764:	a5 90       	lpm	r10, Z+
   13766:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1150
  size_y = pgm_read_word(&current->size_y);
   13768:	fc 01       	movw	r30, r24
   1376a:	e2 52       	subi	r30, 0x22	; 34
   1376c:	fd 4f       	sbci	r31, 0xFD	; 253
   1376e:	65 90       	lpm	r6, Z+
   13770:	74 90       	lpm	r7, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1151
  color_background = pgm_read_word(&current->color_background);
   13772:	fc 01       	movw	r30, r24
   13774:	ef 51       	subi	r30, 0x1F	; 31
   13776:	fd 4f       	sbci	r31, 0xFD	; 253
   13778:	85 90       	lpm	r8, Z+
   1377a:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1153

  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
   1377c:	50 fe       	sbrs	r5, 0
   1377e:	03 c0       	rjmp	.+6      	; 0x13786 <MenuPrepareStyle()+0x70>
DisplayClean():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1262

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
void DisplayClean(uint16_t color)
{
  my_lcd.Fill_Screen(color);
   13780:	c4 01       	movw	r24, r8
   13782:	0e 94 27 af 	call	0x15e4e	; 0x15e4e <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.193]>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1158
  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
  {
    DisplayClean(color_background);
  }

  if ((attr & (1 << MENU_ATTRIBUTES_FILL_COLOR_RECTANGLE)) != 0)
   13786:	51 fe       	sbrs	r5, 1
   13788:	0e c0       	rjmp	.+28     	; 0x137a6 <MenuPrepareStyle()+0x90>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   1378a:	90 92 c4 0f 	sts	0x0FC4, r9	; 0x800fc4 <my_lcd+0xb>
   1378e:	80 92 c3 0f 	sts	0x0FC3, r8	; 0x800fc3 <my_lcd+0xa>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1161
  {
    my_lcd.Set_Draw_color(color_background);
    my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
   13792:	97 01       	movw	r18, r14
   13794:	26 0d       	add	r18, r6
   13796:	37 1d       	adc	r19, r7
   13798:	a6 01       	movw	r20, r12
   1379a:	4a 0d       	add	r20, r10
   1379c:	5b 1d       	adc	r21, r11
   1379e:	b7 01       	movw	r22, r14
   137a0:	c6 01       	movw	r24, r12
   137a2:	0e 94 90 ad 	call	0x15b20	; 0x15b20 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.226]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1164
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
   137a6:	52 fe       	sbrs	r5, 2
   137a8:	2a c0       	rjmp	.+84     	; 0x137fe <MenuPrepareStyle()+0xe8>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   137aa:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
   137ae:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
   137b2:	91 2c       	mov	r9, r1
   137b4:	81 2c       	mov	r8, r1
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1169
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
   137b6:	6e 0c       	add	r6, r14
   137b8:	7f 1c       	adc	r7, r15
   137ba:	26 01       	movw	r4, r12
   137bc:	4a 0c       	add	r4, r10
   137be:	5b 1c       	adc	r5, r11
   137c0:	93 01       	movw	r18, r6
   137c2:	28 19       	sub	r18, r8
   137c4:	39 09       	sbc	r19, r9
   137c6:	a2 01       	movw	r20, r4
   137c8:	48 19       	sub	r20, r8
   137ca:	59 09       	sbc	r21, r9
   137cc:	b7 01       	movw	r22, r14
   137ce:	c6 01       	movw	r24, r12
   137d0:	88 0d       	add	r24, r8
   137d2:	99 1d       	adc	r25, r9
   137d4:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1170
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
   137d8:	a5 01       	movw	r20, r10
   137da:	48 19       	sub	r20, r8
   137dc:	59 09       	sbc	r21, r9
   137de:	b7 01       	movw	r22, r14
   137e0:	69 5e       	subi	r22, 0xE9	; 233
   137e2:	7f 4f       	sbci	r23, 0xFF	; 255
   137e4:	c6 01       	movw	r24, r12
   137e6:	0e 94 21 ad 	call	0x15a42	; 0x15a42 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.228]>
   137ea:	8f ef       	ldi	r24, 0xFF	; 255
   137ec:	88 1a       	sub	r8, r24
   137ee:	98 0a       	sbc	r9, r24
   137f0:	ef ef       	ldi	r30, 0xFF	; 255
   137f2:	ee 1a       	sub	r14, r30
   137f4:	fe 0a       	sbc	r15, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1167
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
   137f6:	f4 e0       	ldi	r31, 0x04	; 4
   137f8:	8f 16       	cp	r8, r31
   137fa:	91 04       	cpc	r9, r1
   137fc:	09 f7       	brne	.-62     	; 0x137c0 <MenuPrepareStyle()+0xaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1173
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    }
  }
  rfnt = (ret_fptr*)pgm_read_word(&current->preload_function);
   137fe:	f8 01       	movw	r30, r16
   13800:	e4 51       	subi	r30, 0x14	; 20
   13802:	fd 4f       	sbci	r31, 0xFD	; 253
   13804:	25 91       	lpm	r18, Z+
   13806:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1174
  (ret_fptr(rfnt))(pgm_read_byte(&current->idx), args1, -1);
   13808:	f8 01       	movw	r30, r16
   1380a:	e9 52       	subi	r30, 0x29	; 41
   1380c:	fd 4f       	sbci	r31, 0xFD	; 253
   1380e:	e4 91       	lpm	r30, Z
   13810:	69 81       	ldd	r22, Y+1	; 0x01
   13812:	70 e0       	ldi	r23, 0x00	; 0
   13814:	4f ef       	ldi	r20, 0xFF	; 255
   13816:	8e 2f       	mov	r24, r30
   13818:	90 e0       	ldi	r25, 0x00	; 0
   1381a:	f9 01       	movw	r30, r18
   1381c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1176

  display_redraw_once = 0;
   1381e:	10 92 b6 0c 	sts	0x0CB6, r1	; 0x800cb6 <display_redraw_once>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1177
}
   13822:	0f 90       	pop	r0
   13824:	df 91       	pop	r29
   13826:	cf 91       	pop	r28
   13828:	1f 91       	pop	r17
   1382a:	0f 91       	pop	r16
   1382c:	ff 90       	pop	r15
   1382e:	ef 90       	pop	r14
   13830:	df 90       	pop	r13
   13832:	cf 90       	pop	r12
   13834:	bf 90       	pop	r11
   13836:	af 90       	pop	r10
   13838:	9f 90       	pop	r9
   1383a:	8f 90       	pop	r8
   1383c:	7f 90       	pop	r7
   1383e:	6f 90       	pop	r6
   13840:	5f 90       	pop	r5
   13842:	4f 90       	pop	r4
   13844:	08 95       	ret

00013846 <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3426
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
   13846:	2f 92       	push	r2
   13848:	3f 92       	push	r3
   1384a:	4f 92       	push	r4
   1384c:	5f 92       	push	r5
   1384e:	6f 92       	push	r6
   13850:	7f 92       	push	r7
   13852:	8f 92       	push	r8
   13854:	9f 92       	push	r9
   13856:	af 92       	push	r10
   13858:	bf 92       	push	r11
   1385a:	cf 92       	push	r12
   1385c:	df 92       	push	r13
   1385e:	ef 92       	push	r14
   13860:	ff 92       	push	r15
   13862:	0f 93       	push	r16
   13864:	1f 93       	push	r17
   13866:	cf 93       	push	r28
   13868:	df 93       	push	r29
   1386a:	cd b7       	in	r28, 0x3d	; 61
   1386c:	de b7       	in	r29, 0x3e	; 62
   1386e:	c0 54       	subi	r28, 0x40	; 64
   13870:	d1 40       	sbci	r29, 0x01	; 1
   13872:	0f b6       	in	r0, 0x3f	; 63
   13874:	f8 94       	cli
   13876:	de bf       	out	0x3e, r29	; 62
   13878:	0f be       	out	0x3f, r0	; 63
   1387a:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
   1387c:	1b 82       	std	Y+3, r1	; 0x03
   1387e:	86 ed       	ldi	r24, 0xD6	; 214
   13880:	93 e0       	ldi	r25, 0x03	; 3
   13882:	9d 83       	std	Y+5, r25	; 0x05
   13884:	8c 83       	std	Y+4, r24	; 0x04
   13886:	89 e3       	ldi	r24, 0x39	; 57
   13888:	95 e0       	ldi	r25, 0x05	; 5
   1388a:	9f 83       	std	Y+7, r25	; 0x07
   1388c:	8e 83       	std	Y+6, r24	; 0x06
   1388e:	18 86       	std	Y+8, r1	; 0x08
   13890:	19 86       	std	Y+9, r1	; 0x09
   13892:	1a 86       	std	Y+10, r1	; 0x0a
   13894:	1b 86       	std	Y+11, r1	; 0x0b
   13896:	80 e6       	ldi	r24, 0x60	; 96
   13898:	9a ee       	ldi	r25, 0xEA	; 234
   1389a:	a0 e0       	ldi	r26, 0x00	; 0
   1389c:	b0 e0       	ldi	r27, 0x00	; 0
   1389e:	8c 87       	std	Y+12, r24	; 0x0c
   138a0:	9d 87       	std	Y+13, r25	; 0x0d
   138a2:	ae 87       	std	Y+14, r26	; 0x0e
   138a4:	bf 87       	std	Y+15, r27	; 0x0f
   138a6:	18 8a       	std	Y+16, r1	; 0x10
   138a8:	19 8a       	std	Y+17, r1	; 0x11
   138aa:	1a 8a       	std	Y+18, r1	; 0x12
   138ac:	1b 8a       	std	Y+19, r1	; 0x13
   138ae:	1c 8a       	std	Y+20, r1	; 0x14
   138b0:	1d 8a       	std	Y+21, r1	; 0x15
   138b2:	1e 8a       	std	Y+22, r1	; 0x16
   138b4:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
   138b6:	8c e4       	ldi	r24, 0x4C	; 76
   138b8:	92 e1       	ldi	r25, 0x12	; 18
   138ba:	9a 83       	std	Y+2, r25	; 0x02
   138bc:	89 83       	std	Y+1, r24	; 0x01
setup_io_pin():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3210
/////////////// HW funkce ///////////////////////////////////////////////////////////////////////

/// setup_io_pin - nastaveni IO pinu
void setup_io_pin(void)
{
  pinMode(ETH_RST, OUTPUT);
   138be:	61 e0       	ldi	r22, 0x01	; 1
   138c0:	86 e0       	ldi	r24, 0x06	; 6
   138c2:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3211
  pinMode(ETH_CS, OUTPUT);
   138c6:	61 e0       	ldi	r22, 0x01	; 1
   138c8:	8f e0       	ldi	r24, 0x0F	; 15
   138ca:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3212
  pinMode(LED, OUTPUT);
   138ce:	61 e0       	ldi	r22, 0x01	; 1
   138d0:	88 e0       	ldi	r24, 0x08	; 8
   138d2:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3213
  pinMode(PIEZO, OUTPUT);
   138d6:	61 e0       	ldi	r22, 0x01	; 1
   138d8:	8c e0       	ldi	r24, 0x0C	; 12
   138da:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3214
  pinMode(STORAGE_RAM_CS, OUTPUT);
   138de:	61 e0       	ldi	r22, 0x01	; 1
   138e0:	86 e1       	ldi	r24, 0x16	; 22
   138e2:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3215
  pinMode(STORAGE_EEPROM_CS, OUTPUT);
   138e6:	61 e0       	ldi	r22, 0x01	; 1
   138e8:	87 e1       	ldi	r24, 0x17	; 23
   138ea:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3216
  pinMode(JUMPER, INPUT_PULLUP);
   138ee:	62 e0       	ldi	r22, 0x02	; 2
   138f0:	8e e0       	ldi	r24, 0x0E	; 14
   138f2:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3218

  digitalWrite(PIEZO, LOW);
   138f6:	60 e0       	ldi	r22, 0x00	; 0
   138f8:	8c e0       	ldi	r24, 0x0C	; 12
   138fa:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3219
  delay(1000);
   138fe:	68 ee       	ldi	r22, 0xE8	; 232
   13900:	73 e0       	ldi	r23, 0x03	; 3
   13902:	80 e0       	ldi	r24, 0x00	; 0
   13904:	90 e0       	ldi	r25, 0x00	; 0
   13906:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3220
  digitalWrite(PIEZO, HIGH);
   1390a:	61 e0       	ldi	r22, 0x01	; 1
   1390c:	8c e0       	ldi	r24, 0x0C	; 12
   1390e:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3442

  NTPClient timeClient(udpClient);

  setup_io_pin();

  interrupts();             // enable all interrupts
   13912:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3443
  SPI.begin();
   13914:	0e 94 e5 80 	call	0x101ca	; 0x101ca <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3444
  Wire.begin();
   13918:	0e 94 9e cd 	call	0x19b3c	; 0x19b3c <TwoWire::begin() [clone .constprop.54]>
begin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:240

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
  Wire.begin();
   1391c:	0e 94 9e cd 	call	0x19b3c	; 0x19b3c <TwoWire::begin() [clone .constprop.54]>
mqtt_set_public_mqtt_client():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:460
  send_mqtt_general_payload(mqtt_client, topic, log);
}
///////////////////////////////////////////////////////////////////////////
void mqtt_set_public_mqtt_client(PubSubClient *mqtt_client)
{
  pub_mqtt_client = mqtt_client;
   13920:	8f e2       	ldi	r24, 0x2F	; 47
   13922:	90 e1       	ldi	r25, 0x10	; 16
   13924:	90 93 36 0a 	sts	0x0A36, r25	; 0x800a36 <pub_mqtt_client+0x1>
   13928:	80 93 35 0a 	sts	0x0A35, r24	; 0x800a35 <pub_mqtt_client>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3448
  rtc.begin();

  mqtt_set_public_mqtt_client(&mqtt_client);
  fdevopen( &printf_via_mqtt, 0);
   1392c:	70 e0       	ldi	r23, 0x00	; 0
   1392e:	60 e0       	ldi	r22, 0x00	; 0
   13930:	8b e5       	ldi	r24, 0x5B	; 91
   13932:	98 e8       	ldi	r25, 0x88	; 136
   13934:	0e 94 b9 e5 	call	0x1cb72	; 0x1cb72 <fdevopen>
printf_begin():
/home/saric/Arduino/libraries/RF24/printf.h:31

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
   13938:	70 e0       	ldi	r23, 0x00	; 0
   1393a:	60 e0       	ldi	r22, 0x00	; 0
   1393c:	8f e9       	ldi	r24, 0x9F	; 159
   1393e:	98 e5       	ldi	r25, 0x58	; 88
   13940:	0e 94 b9 e5 	call	0x1cb72	; 0x1cb72 <fdevopen>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3451
  printf_begin();

  swSPI.begin();
   13944:	8b e7       	ldi	r24, 0x7B	; 123
   13946:	92 e1       	ldi	r25, 0x12	; 18
   13948:	0e 94 75 59 	call	0xb2ea	; 0xb2ea <SoftSPIB::begin()>
MenuHistoryInit():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1212
  Global_menu_args1[MenuHistoryIndex] = args1;
}
///
void MenuHistoryInit(void)
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
   1394c:	e0 91 19 0d 	lds	r30, 0x0D19	; 0x800d19 <MenuHistoryIndex>
   13950:	f0 e0       	ldi	r31, 0x00	; 0
   13952:	e1 5f       	subi	r30, 0xF1	; 241
   13954:	f2 4f       	sbci	r31, 0xF2	; 242
   13956:	10 82       	st	Z, r1
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
   13958:	0e 94 a9 cc 	call	0x19952	; 0x19952 <LCDWIKI_KBV::reset() [clone .constprop.62]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
   1395c:	80 91 d3 0f 	lds	r24, 0x0FD3	; 0x800fd3 <my_lcd+0x1a>
   13960:	90 91 d4 0f 	lds	r25, 0x0FD4	; 0x800fd4 <my_lcd+0x1b>
   13964:	01 96       	adiw	r24, 0x01	; 1
   13966:	09 f0       	breq	.+2      	; 0x1396a <setup+0x124>
   13968:	4c c0       	rjmp	.+152    	; 0x13a02 <setup+0x1bc>
Read_ID():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:575

//read LCD controller chip ID 
uint16_t LCDWIKI_KBV::Read_ID(void)
{
	uint16_t ret;
	if ((Read_Reg(0x04,0) == 0x00)&&(Read_Reg(0x04,1) == 0x8000))
   1396a:	60 e0       	ldi	r22, 0x00	; 0
   1396c:	84 e0       	ldi	r24, 0x04	; 4
   1396e:	90 e0       	ldi	r25, 0x00	; 0
   13970:	0e 94 1a cd 	call	0x19a34	; 0x19a34 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
   13974:	89 2b       	or	r24, r25
   13976:	39 f5       	brne	.+78     	; 0x139c6 <setup+0x180>
   13978:	61 e0       	ldi	r22, 0x01	; 1
   1397a:	84 e0       	ldi	r24, 0x04	; 4
   1397c:	90 e0       	ldi	r25, 0x00	; 0
   1397e:	0e 94 1a cd 	call	0x19a34	; 0x19a34 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
   13982:	81 15       	cp	r24, r1
   13984:	90 48       	sbci	r25, 0x80	; 128
   13986:	f9 f4       	brne	.+62     	; 0x139c6 <setup+0x180>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:577
	{
		uint8_t buf[] = {0xFF, 0x83, 0x57};
   13988:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <__malloc_margin+0x9>
   1398c:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <__malloc_margin+0xa>
   13990:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <__malloc_margin+0xb>
   13994:	2b 96       	adiw	r28, 0x0b	; 11
   13996:	8d af       	std	Y+61, r24	; 0x3d
   13998:	9e af       	std	Y+62, r25	; 0x3e
   1399a:	af af       	std	Y+63, r26	; 0x3f
   1399c:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:578
		Push_Command(HX8357D_SETC, buf, sizeof(buf));
   1399e:	23 e0       	ldi	r18, 0x03	; 3
   139a0:	ae 01       	movw	r20, r28
   139a2:	48 5b       	subi	r20, 0xB8	; 184
   139a4:	5f 4f       	sbci	r21, 0xFF	; 255
   139a6:	69 eb       	ldi	r22, 0xB9	; 185
   139a8:	70 e0       	ldi	r23, 0x00	; 0
   139aa:	89 eb       	ldi	r24, 0xB9	; 185
   139ac:	9f e0       	ldi	r25, 0x0F	; 15
   139ae:	0e 94 f6 81 	call	0x103ec	; 0x103ec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:579
		ret = (Read_Reg(0xD0,0) << 16) | Read_Reg(0xD0,1);
   139b2:	60 e0       	ldi	r22, 0x00	; 0
   139b4:	80 ed       	ldi	r24, 0xD0	; 208
   139b6:	90 e0       	ldi	r25, 0x00	; 0
   139b8:	0e 94 1a cd 	call	0x19a34	; 0x19a34 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
   139bc:	61 e0       	ldi	r22, 0x01	; 1
   139be:	80 ed       	ldi	r24, 0xD0	; 208
   139c0:	90 e0       	ldi	r25, 0x00	; 0
   139c2:	0e 94 1a cd 	call	0x19a34	; 0x19a34 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:585
		if((ret == 0x990000) || (ret == 0x900000))
		{
			return 0x9090;
		}
	}
	ret = Read_Reg(0xD3,1); //0x9341 0x9486
   139c6:	61 e0       	ldi	r22, 0x01	; 1
   139c8:	83 ed       	ldi	r24, 0xD3	; 211
   139ca:	90 e0       	ldi	r25, 0x00	; 0
   139cc:	0e 94 1a cd 	call	0x19a34	; 0x19a34 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:586
	if(ret == 0x9341)
   139d0:	81 34       	cpi	r24, 0x41	; 65
   139d2:	b3 e9       	ldi	r27, 0x93	; 147
   139d4:	9b 07       	cpc	r25, r27
   139d6:	89 f0       	breq	.+34     	; 0x139fa <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:590
	{
		return 0x9341;
	}
	else if(ret == 0x9486)
   139d8:	86 38       	cpi	r24, 0x86	; 134
   139da:	e4 e9       	ldi	r30, 0x94	; 148
   139dc:	9e 07       	cpc	r25, r30
   139de:	69 f0       	breq	.+26     	; 0x139fa <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:594
	{
		return 0x9486;
	}
	else if(ret == 0x9488)
   139e0:	88 38       	cpi	r24, 0x88	; 136
   139e2:	f4 e9       	ldi	r31, 0x94	; 148
   139e4:	9f 07       	cpc	r25, r31
   139e6:	49 f0       	breq	.+18     	; 0x139fa <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:598
	{
		return 0x9488;
	}
	else if(ret == 0x7796)
   139e8:	86 39       	cpi	r24, 0x96	; 150
   139ea:	27 e7       	ldi	r18, 0x77	; 119
   139ec:	92 07       	cpc	r25, r18
   139ee:	29 f0       	breq	.+10     	; 0x139fa <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:604
	{
		return 0x7796;
	}
	else
	{
		return Read_Reg(0, 0); //others
   139f0:	60 e0       	ldi	r22, 0x00	; 0
   139f2:	90 e0       	ldi	r25, 0x00	; 0
   139f4:	80 e0       	ldi	r24, 0x00	; 0
   139f6:	0e 94 1a cd 	call	0x19a34	; 0x19a34 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
   139fa:	90 93 d4 0f 	sts	0x0FD4, r25	; 0x800fd4 <my_lcd+0x1b>
   139fe:	80 93 d3 0f 	sts	0x0FD3, r24	; 0x800fd3 <my_lcd+0x1a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   13a02:	00 91 d3 0f 	lds	r16, 0x0FD3	; 0x800fd3 <my_lcd+0x1a>
   13a06:	10 91 d4 0f 	lds	r17, 0x0FD4	; 0x800fd4 <my_lcd+0x1b>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
    }
}

void LCDWIKI_KBV::start(uint16_t ID)
{
	reset();
   13a0a:	0e 94 a9 cc 	call	0x19952	; 0x19952 <LCDWIKI_KBV::reset() [clone .constprop.62]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
   13a0e:	68 ec       	ldi	r22, 0xC8	; 200
   13a10:	70 e0       	ldi	r23, 0x00	; 0
   13a12:	80 e0       	ldi	r24, 0x00	; 0
   13a14:	90 e0       	ldi	r25, 0x00	; 0
   13a16:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
   13a1a:	06 39       	cpi	r16, 0x96	; 150
   13a1c:	17 47       	sbci	r17, 0x77	; 119
   13a1e:	09 f0       	breq	.+2      	; 0x13a22 <setup+0x1dc>
   13a20:	c7 c2       	rjmp	.+1422   	; 0x13fb0 <setup+0x76a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
   13a22:	89 e0       	ldi	r24, 0x09	; 9
   13a24:	90 e0       	ldi	r25, 0x00	; 0
   13a26:	90 93 d2 0f 	sts	0x0FD2, r25	; 0x800fd2 <my_lcd+0x19>
   13a2a:	80 93 d1 0f 	sts	0x0FD1, r24	; 0x800fd1 <my_lcd+0x18>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   13a2e:	8a e2       	ldi	r24, 0x2A	; 42
   13a30:	90 e0       	ldi	r25, 0x00	; 0
   13a32:	90 93 d6 0f 	sts	0x0FD6, r25	; 0x800fd6 <my_lcd+0x1d>
   13a36:	80 93 d5 0f 	sts	0x0FD5, r24	; 0x800fd5 <my_lcd+0x1c>
   13a3a:	8b e2       	ldi	r24, 0x2B	; 43
   13a3c:	90 e0       	ldi	r25, 0x00	; 0
   13a3e:	90 93 d8 0f 	sts	0x0FD8, r25	; 0x800fd8 <my_lcd+0x1f>
   13a42:	80 93 d7 0f 	sts	0x0FD7, r24	; 0x800fd7 <my_lcd+0x1e>
   13a46:	8c e2       	ldi	r24, 0x2C	; 44
   13a48:	90 e0       	ldi	r25, 0x00	; 0
   13a4a:	90 93 da 0f 	sts	0x0FDA, r25	; 0x800fda <my_lcd+0x21>
   13a4e:	80 93 d9 0f 	sts	0x0FD9, r24	; 0x800fd9 <my_lcd+0x20>
   13a52:	8e e2       	ldi	r24, 0x2E	; 46
   13a54:	90 e0       	ldi	r25, 0x00	; 0
   13a56:	90 93 dc 0f 	sts	0x0FDC, r25	; 0x800fdc <my_lcd+0x23>
   13a5a:	80 93 db 0f 	sts	0x0FDB, r24	; 0x800fdb <my_lcd+0x22>
   13a5e:	83 e3       	ldi	r24, 0x33	; 51
   13a60:	90 e0       	ldi	r25, 0x00	; 0
   13a62:	90 93 de 0f 	sts	0x0FDE, r25	; 0x800fde <my_lcd+0x25>
   13a66:	80 93 dd 0f 	sts	0x0FDD, r24	; 0x800fdd <my_lcd+0x24>
   13a6a:	87 e3       	ldi	r24, 0x37	; 55
   13a6c:	90 e0       	ldi	r25, 0x00	; 0
   13a6e:	90 93 e0 0f 	sts	0x0FE0, r25	; 0x800fe0 <my_lcd+0x27>
   13a72:	80 93 df 0f 	sts	0x0FDF, r24	; 0x800fdf <my_lcd+0x26>
   13a76:	86 e3       	ldi	r24, 0x36	; 54
   13a78:	90 e0       	ldi	r25, 0x00	; 0
   13a7a:	90 93 e2 0f 	sts	0x0FE2, r25	; 0x800fe2 <my_lcd+0x29>
   13a7e:	80 93 e1 0f 	sts	0x0FE1, r24	; 0x800fe1 <my_lcd+0x28>
   13a82:	10 92 e4 0f 	sts	0x0FE4, r1	; 0x800fe4 <my_lcd+0x2b>
   13a86:	10 92 e3 0f 	sts	0x0FE3, r1	; 0x800fe3 <my_lcd+0x2a>
   13a8a:	10 92 e6 0f 	sts	0x0FE6, r1	; 0x800fe6 <my_lcd+0x2d>
   13a8e:	10 92 e5 0f 	sts	0x0FE5, r1	; 0x800fe5 <my_lcd+0x2c>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:912
}

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
   13a92:	02 e0       	ldi	r16, 0x02	; 2
   13a94:	1f e6       	ldi	r17, 0x6F	; 111
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965

		case 0x7796:
			lcd_driver = ID_7796;
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   13a96:	3c e6       	ldi	r19, 0x6C	; 108
   13a98:	e3 2e       	mov	r14, r19
   13a9a:	f1 2c       	mov	r15, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:915
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
	{
        uint8_t cmd = pgm_read_byte(p++);
   13a9c:	f8 01       	movw	r30, r16
   13a9e:	64 91       	lpm	r22, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:916
        uint8_t len = pgm_read_byte(p++);
   13aa0:	31 96       	adiw	r30, 0x01	; 1
   13aa2:	d4 90       	lpm	r13, Z
   13aa4:	0e 5f       	subi	r16, 0xFE	; 254
   13aa6:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:917
        if (cmd == TFTLCD_DELAY8) 
   13aa8:	6f 37       	cpi	r22, 0x7F	; 127
   13aaa:	89 f0       	breq	.+34     	; 0x13ace <setup+0x288>
   13aac:	de 01       	movw	r26, r28
   13aae:	a8 5b       	subi	r26, 0xB8	; 184
   13ab0:	bf 4f       	sbci	r27, 0xFF	; 255
   13ab2:	30 e0       	ldi	r19, 0x00	; 0
   13ab4:	20 e0       	ldi	r18, 0x00	; 0
   13ab6:	ad 01       	movw	r20, r26
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:924
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
   13ab8:	2d 15       	cp	r18, r13
   13aba:	08 f0       	brcs	.+2      	; 0x13abe <setup+0x278>
   13abc:	70 c2       	rjmp	.+1248   	; 0x13f9e <setup+0x758>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:926
            {
                dat[i] = pgm_read_byte(p++);
   13abe:	f8 01       	movw	r30, r16
   13ac0:	e2 0f       	add	r30, r18
   13ac2:	f3 1f       	adc	r31, r19
   13ac4:	e4 91       	lpm	r30, Z
   13ac6:	ed 93       	st	X+, r30
   13ac8:	2f 5f       	subi	r18, 0xFF	; 255
   13aca:	3f 4f       	sbci	r19, 0xFF	; 255
   13acc:	f5 cf       	rjmp	.-22     	; 0x13ab8 <setup+0x272>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:919
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
   13ace:	6d 2d       	mov	r22, r13
   13ad0:	70 e0       	ldi	r23, 0x00	; 0
   13ad2:	90 e0       	ldi	r25, 0x00	; 0
   13ad4:	80 e0       	ldi	r24, 0x00	; 0
   13ad6:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:920
            len = 0;
   13ada:	d1 2c       	mov	r13, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:930
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
   13adc:	6d 2d       	mov	r22, r13
   13ade:	70 e0       	ldi	r23, 0x00	; 0
   13ae0:	6e 5f       	subi	r22, 0xFE	; 254
   13ae2:	7f 4f       	sbci	r23, 0xFF	; 255
   13ae4:	e6 1a       	sub	r14, r22
   13ae6:	f7 0a       	sbc	r15, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:913

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
   13ae8:	1e 14       	cp	r1, r14
   13aea:	1f 04       	cpc	r1, r15
   13aec:	bc f2       	brlt	.-82     	; 0x13a9c <setup+0x256>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
   13aee:	80 91 cf 0f 	lds	r24, 0x0FCF	; 0x800fcf <my_lcd+0x16>
   13af2:	0e 94 08 ca 	call	0x19410	; 0x19410 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:892
}

//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
   13af6:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   13afa:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   13afe:	80 81       	ld	r24, Z
   13b00:	90 91 f3 0f 	lds	r25, 0x0FF3	; 0x800ff3 <my_lcd+0x3a>
   13b04:	89 23       	and	r24, r25
   13b06:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:893
	uint8_t val = VL^i;
   13b08:	20 91 e3 0f 	lds	r18, 0x0FE3	; 0x800fe3 <my_lcd+0x2a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
	if(lcd_driver == ID_932X)
   13b0c:	40 91 d1 0f 	lds	r20, 0x0FD1	; 0x800fd1 <my_lcd+0x18>
   13b10:	50 91 d2 0f 	lds	r21, 0x0FD2	; 0x800fd2 <my_lcd+0x19>
   13b14:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   13b18:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   13b1c:	90 91 f4 0f 	lds	r25, 0x0FF4	; 0x800ff4 <my_lcd+0x3b>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
   13b20:	80 81       	ld	r24, Z
   13b22:	89 23       	and	r24, r25
   13b24:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
   13b26:	41 15       	cp	r20, r1
   13b28:	51 05       	cpc	r21, r1
   13b2a:	09 f0       	breq	.+2      	; 0x13b2e <setup+0x2e8>
   13b2c:	48 c2       	rjmp	.+1168   	; 0x13fbe <setup+0x778>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
   13b2e:	81 e6       	ldi	r24, 0x61	; 97
   13b30:	82 b9       	out	0x02, r24	; 2
   13b32:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   13b36:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   13b3a:	80 81       	ld	r24, Z
   13b3c:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   13b40:	89 23       	and	r24, r25
   13b42:	80 83       	st	Z, r24
   13b44:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   13b48:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   13b4c:	80 81       	ld	r24, Z
   13b4e:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   13b52:	89 2b       	or	r24, r25
   13b54:	80 83       	st	Z, r24
   13b56:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   13b5a:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   13b5e:	80 81       	ld	r24, Z
   13b60:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   13b64:	89 2b       	or	r24, r25
   13b66:	80 83       	st	Z, r24
   13b68:	22 b9       	out	0x02, r18	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	}
	else if(lcd_driver == ID_7575)
	{
		writeCmdData8(0x01, val ? 8 : 10);
   13b6a:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   13b6e:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   13b72:	80 81       	ld	r24, Z
   13b74:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   13b78:	89 23       	and	r24, r25
   13b7a:	80 83       	st	Z, r24
   13b7c:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   13b80:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   13b84:	80 81       	ld	r24, Z
   13b86:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
   13b8a:	89 2b       	or	r24, r25
   13b8c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:906
	}
	CS_IDLE;
   13b8e:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   13b92:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   13b96:	80 81       	ld	r24, Z
   13b98:	90 91 ef 0f 	lds	r25, 0x0FEF	; 0x800fef <my_lcd+0x36>
   13b9c:	89 2b       	or	r24, r25
   13b9e:	80 83       	st	Z, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3456
  swSPI.begin();

  MenuHistoryInit();

  my_lcd.Init_LCD();
  my_lcd.Set_Rotation(3);
   13ba0:	83 e0       	ldi	r24, 0x03	; 3
   13ba2:	0e 94 08 ca 	call	0x19410	; 0x19410 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3457
  my_lcd.Fill_Screen(WHITE);
   13ba6:	8f ef       	ldi	r24, 0xFF	; 255
   13ba8:	9f ef       	ldi	r25, 0xFF	; 255
   13baa:	0e 94 27 af 	call	0x15e4e	; 0x15e4e <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.193]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   13bae:	8f e1       	ldi	r24, 0x1F	; 31
   13bb0:	90 e0       	ldi	r25, 0x00	; 0
   13bb2:	90 93 c4 0f 	sts	0x0FC4, r25	; 0x800fc4 <my_lcd+0xb>
   13bb6:	80 93 c3 0f 	sts	0x0FC3, r24	; 0x800fc3 <my_lcd+0xa>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3459
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
   13bba:	6e e7       	ldi	r22, 0x7E	; 126
   13bbc:	70 e7       	ldi	r23, 0x70	; 112
   13bbe:	ce 01       	movw	r24, r28
   13bc0:	88 5b       	subi	r24, 0xB8	; 184
   13bc2:	9f 4f       	sbci	r25, 0xFF	; 255
   13bc4:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3460
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
   13bc8:	ee 24       	eor	r14, r14
   13bca:	ea 94       	dec	r14
   13bcc:	fe 2c       	mov	r15, r14
   13bce:	0f e1       	ldi	r16, 0x1F	; 31
   13bd0:	10 e0       	ldi	r17, 0x00	; 0
   13bd2:	22 e0       	ldi	r18, 0x02	; 2
   13bd4:	4a e0       	ldi	r20, 0x0A	; 10
   13bd6:	50 e0       	ldi	r21, 0x00	; 0
   13bd8:	6e e1       	ldi	r22, 0x1E	; 30
   13bda:	70 e0       	ldi	r23, 0x00	; 0
   13bdc:	ce 01       	movw	r24, r28
   13bde:	88 5b       	subi	r24, 0xB8	; 184
   13be0:	9f 4f       	sbci	r25, 0xFF	; 255
   13be2:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   13be6:	8e e1       	ldi	r24, 0x1E	; 30
   13be8:	90 e0       	ldi	r25, 0x00	; 0
   13bea:	c3 5c       	subi	r28, 0xC3	; 195
   13bec:	de 4f       	sbci	r29, 0xFE	; 254
   13bee:	99 83       	std	Y+1, r25	; 0x01
   13bf0:	88 83       	st	Y, r24
   13bf2:	cd 53       	subi	r28, 0x3D	; 61
   13bf4:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3462
  ///
  for (uint8_t init = 0;  init < 16; init++)
   13bf6:	c8 5c       	subi	r28, 0xC8	; 200
   13bf8:	de 4f       	sbci	r29, 0xFE	; 254
   13bfa:	18 82       	st	Y, r1
   13bfc:	c8 53       	subi	r28, 0x38	; 56
   13bfe:	d1 40       	sbci	r29, 0x01	; 1
ntp_check():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:422

uint8_t ntp_check(NTPClient *timeClient)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
   13c00:	3e 01       	movw	r6, r28
   13c02:	9e ed       	ldi	r25, 0xDE	; 222
   13c04:	69 0e       	add	r6, r25
   13c06:	71 1c       	adc	r7, r1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3564
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
   13c08:	a8 ec       	ldi	r26, 0xC8	; 200
   13c0a:	b0 e0       	ldi	r27, 0x00	; 0
   13c0c:	ac 0f       	add	r26, r28
   13c0e:	bd 1f       	adc	r27, r29
   13c10:	1c 96       	adiw	r26, 0x0c	; 12
   13c12:	c1 5c       	subi	r28, 0xC1	; 193
   13c14:	de 4f       	sbci	r29, 0xFE	; 254
   13c16:	b9 83       	std	Y+1, r27	; 0x01
   13c18:	a8 83       	st	Y, r26
   13c1a:	cf 53       	subi	r28, 0x3F	; 63
   13c1c:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3464
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
   13c1e:	ee 24       	eor	r14, r14
   13c20:	ea 94       	dec	r14
   13c22:	fe 2c       	mov	r15, r14
   13c24:	00 e0       	ldi	r16, 0x00	; 0
   13c26:	18 ef       	ldi	r17, 0xF8	; 248
   13c28:	21 e0       	ldi	r18, 0x01	; 1
   13c2a:	4e e1       	ldi	r20, 0x1E	; 30
   13c2c:	50 e0       	ldi	r21, 0x00	; 0
   13c2e:	c3 5c       	subi	r28, 0xC3	; 195
   13c30:	de 4f       	sbci	r29, 0xFE	; 254
   13c32:	68 81       	ld	r22, Y
   13c34:	79 81       	ldd	r23, Y+1	; 0x01
   13c36:	cd 53       	subi	r28, 0x3D	; 61
   13c38:	d1 40       	sbci	r29, 0x01	; 1
   13c3a:	83 ef       	ldi	r24, 0xF3	; 243
   13c3c:	96 e0       	ldi	r25, 0x06	; 6
   13c3e:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3466
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
   13c42:	c8 5c       	subi	r28, 0xC8	; 200
   13c44:	de 4f       	sbci	r29, 0xFE	; 254
   13c46:	b8 81       	ld	r27, Y
   13c48:	c8 53       	subi	r28, 0x38	; 56
   13c4a:	d1 40       	sbci	r29, 0x01	; 1
   13c4c:	b1 11       	cpse	r27, r1
   13c4e:	fc c1       	rjmp	.+1016   	; 0x14048 <setup+0x802>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3468
    {
      strcpy_P(str1, text_vnitrni_ochrany);
   13c50:	6e e6       	ldi	r22, 0x6E	; 110
   13c52:	70 e7       	ldi	r23, 0x70	; 112
   13c54:	ce 01       	movw	r24, r28
   13c56:	88 5b       	subi	r24, 0xB8	; 184
   13c58:	9f 4f       	sbci	r25, 0xFF	; 255
   13c5a:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3469
      strcat(str1, ":1");
   13c5e:	65 ef       	ldi	r22, 0xF5	; 245
   13c60:	76 e0       	ldi	r23, 0x06	; 6
   13c62:	ce 01       	movw	r24, r28
   13c64:	88 5b       	subi	r24, 0xB8	; 184
   13c66:	9f 4f       	sbci	r25, 0xFF	; 255
   13c68:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3470
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   13c6c:	00 ee       	ldi	r16, 0xE0	; 224
   13c6e:	17 e0       	ldi	r17, 0x07	; 7
   13c70:	21 e0       	ldi	r18, 0x01	; 1
   13c72:	42 e3       	ldi	r20, 0x32	; 50
   13c74:	50 e0       	ldi	r21, 0x00	; 0
   13c76:	6e e1       	ldi	r22, 0x1E	; 30
   13c78:	70 e0       	ldi	r23, 0x00	; 0
   13c7a:	ce 01       	movw	r24, r28
   13c7c:	88 5b       	subi	r24, 0xB8	; 184
   13c7e:	9f 4f       	sbci	r25, 0xFF	; 255
   13c80:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3472

      tritri = 0;
   13c84:	10 92 85 0b 	sts	0x0B85, r1	; 0x800b85 <tritri+0x1>
   13c88:	10 92 84 0b 	sts	0x0B84, r1	; 0x800b84 <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3473
      petnula = 0;
   13c8c:	10 92 83 0b 	sts	0x0B83, r1	; 0x800b83 <petnula+0x1>
   13c90:	10 92 82 0b 	sts	0x0B82, r1	; 0x800b82 <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3474
      dvanact = 0;
   13c94:	10 92 81 0b 	sts	0x0B81, r1	; 0x800b81 <dvanact+0x1>
   13c98:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3476
      dvanact = 0;
      light_curr = 0;
   13c9c:	10 92 a4 0c 	sts	0x0CA4, r1	; 0x800ca4 <light_curr+0x1>
   13ca0:	10 92 a3 0c 	sts	0x0CA3, r1	; 0x800ca3 <light_curr>
init_a2d():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:35

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// inicializace a2d prevodniku //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_a2d(uint8_t enable_channel, uint8_t delicka, uint8_t reference)
{
a2d_enable = enable_channel;
   13ca4:	88 ef       	ldi	r24, 0xF8	; 248
   13ca6:	80 93 83 0c 	sts	0x0C83, r24	; 0x800c83 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:36
a2d_reference = reference;
   13caa:	83 e0       	ldi	r24, 0x03	; 3
   13cac:	80 93 5d 0b 	sts	0x0B5D, r24	; 0x800b5d <a2d_reference>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:38
a2d_delicka = delicka;
a2d_index = 0;
   13cb0:	10 92 84 0c 	sts	0x0C84, r1	; 0x800c84 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:39
a2d_input = 0;
   13cb4:	10 92 5e 0b 	sts	0x0B5E, r1	; 0x800b5e <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:41
a2d_data = 0;
ADCSRA = ((1<<ADEN|1<<ADIE) + (a2d_delicka & 7));
   13cb8:	8e e8       	ldi	r24, 0x8E	; 142
   13cba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:42
ADMUX = 0;
   13cbe:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:43
ADMUX = ((a2d_reference & 3) << 6) ;
   13cc2:	80 91 5d 0b 	lds	r24, 0x0B5D	; 0x800b5d <a2d_reference>
   13cc6:	e0 e4       	ldi	r30, 0x40	; 64
   13cc8:	8e 9f       	mul	r24, r30
   13cca:	c0 01       	movw	r24, r0
   13ccc:	11 24       	eor	r1, r1
   13cce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
a2d_handler():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:18
typedef void (*a2d_interupt)(uint8_t, uint16_t);
volatile static a2d_interupt a2d_interupt_func;

void a2d_handler(void (*a2d_command)(uint8_t channel, uint16_t data))
{
a2d_interupt_func = a2d_command;
   13cd2:	86 e6       	ldi	r24, 0x66	; 102
   13cd4:	97 e4       	ldi	r25, 0x47	; 71
   13cd6:	90 93 60 0b 	sts	0x0B60, r25	; 0x800b60 <a2d_interupt_func+0x1>
   13cda:	80 93 5f 0b 	sts	0x0B5F, r24	; 0x800b5f <a2d_interupt_func>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3482
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
      a2d_handler(a2d_complete);
      ///
      /// spotreba proudu
      a2d_run_now = 0;
   13cde:	10 92 8b 0c 	sts	0x0C8B, r1	; 0x800c8b <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3483
      a2d_start_first(A_PROUD);
   13ce2:	83 e0       	ldi	r24, 0x03	; 3
   13ce4:	0e 94 b1 3e 	call	0x7d62	; 0x7d62 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3484
      milis = millis();
   13ce8:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   13cec:	6b 01       	movw	r12, r22
   13cee:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3485
      while (a2d_run_now == 0 && millis() - milis < 10);
   13cf0:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   13cf4:	6c 19       	sub	r22, r12
   13cf6:	7d 09       	sbc	r23, r13
   13cf8:	8e 09       	sbc	r24, r14
   13cfa:	9f 09       	sbc	r25, r15
   13cfc:	6a 30       	cpi	r22, 0x0A	; 10
   13cfe:	71 05       	cpc	r23, r1
   13d00:	81 05       	cpc	r24, r1
   13d02:	91 05       	cpc	r25, r1
   13d04:	a8 f3       	brcs	.-22     	; 0x13cf0 <setup+0x4aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3488
      /// regulator 3.3V
      a2d_run_now = 0;
      a2d_start_first(A_TRIV);
   13d06:	86 e0       	ldi	r24, 0x06	; 6
   13d08:	0e 94 b1 3e 	call	0x7d62	; 0x7d62 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3489
      milis = millis();
   13d0c:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   13d10:	6b 01       	movw	r12, r22
   13d12:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3490
      while (a2d_run_now == 0 && millis() - milis < 10);
   13d14:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   13d18:	6c 19       	sub	r22, r12
   13d1a:	7d 09       	sbc	r23, r13
   13d1c:	8e 09       	sbc	r24, r14
   13d1e:	9f 09       	sbc	r25, r15
   13d20:	6a 30       	cpi	r22, 0x0A	; 10
   13d22:	71 05       	cpc	r23, r1
   13d24:	81 05       	cpc	r24, r1
   13d26:	91 05       	cpc	r25, r1
   13d28:	a8 f3       	brcs	.-22     	; 0x13d14 <setup+0x4ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3493
      /// regulator 5.0V
      a2d_run_now = 0;
      a2d_start_first(A_PETV);
   13d2a:	85 e0       	ldi	r24, 0x05	; 5
   13d2c:	0e 94 b1 3e 	call	0x7d62	; 0x7d62 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3494
      milis = millis();
   13d30:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   13d34:	6b 01       	movw	r12, r22
   13d36:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3495
      while (a2d_run_now == 0 && millis() - milis < 10);
   13d38:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   13d3c:	6c 19       	sub	r22, r12
   13d3e:	7d 09       	sbc	r23, r13
   13d40:	8e 09       	sbc	r24, r14
   13d42:	9f 09       	sbc	r25, r15
   13d44:	6a 30       	cpi	r22, 0x0A	; 10
   13d46:	71 05       	cpc	r23, r1
   13d48:	81 05       	cpc	r24, r1
   13d4a:	91 05       	cpc	r25, r1
   13d4c:	a8 f3       	brcs	.-22     	; 0x13d38 <setup+0x4f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3498
      /// vstupni napeti 12V
      a2d_run_now = 0;
      a2d_start_first(A_DVANACTV);
   13d4e:	84 e0       	ldi	r24, 0x04	; 4
   13d50:	0e 94 b1 3e 	call	0x7d62	; 0x7d62 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3499
      milis = millis();
   13d54:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   13d58:	6b 01       	movw	r12, r22
   13d5a:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3500
      while (a2d_run_now == 0 && millis() - milis < 10);
   13d5c:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   13d60:	6c 19       	sub	r22, r12
   13d62:	7d 09       	sbc	r23, r13
   13d64:	8e 09       	sbc	r24, r14
   13d66:	9f 09       	sbc	r25, r15
   13d68:	6a 30       	cpi	r22, 0x0A	; 10
   13d6a:	71 05       	cpc	r23, r1
   13d6c:	81 05       	cpc	r24, r1
   13d6e:	91 05       	cpc	r25, r1
   13d70:	a8 f3       	brcs	.-22     	; 0x13d5c <setup+0x516>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3503
      /// aktualni intenzita svetla
      a2d_run_now = 0;
      a2d_start_first(A_LIGHT);
   13d72:	87 e0       	ldi	r24, 0x07	; 7
   13d74:	0e 94 b1 3e 	call	0x7d62	; 0x7d62 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3504
      milis = millis();
   13d78:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   13d7c:	6b 01       	movw	r12, r22
   13d7e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3505
      while (a2d_run_now == 0 && millis() - milis < 10);
   13d80:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   13d84:	6c 19       	sub	r22, r12
   13d86:	7d 09       	sbc	r23, r13
   13d88:	8e 09       	sbc	r24, r14
   13d8a:	9f 09       	sbc	r25, r15
   13d8c:	6a 30       	cpi	r22, 0x0A	; 10
   13d8e:	71 05       	cpc	r23, r1
   13d90:	81 05       	cpc	r24, r1
   13d92:	91 05       	cpc	r25, r1
   13d94:	a8 f3       	brcs	.-22     	; 0x13d80 <setup+0x53a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3509
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
   13d96:	7e 01       	movw	r14, r28
   13d98:	fa ef       	ldi	r31, 0xFA	; 250
   13d9a:	ef 1a       	sub	r14, r31
   13d9c:	fe ef       	ldi	r31, 0xFE	; 254
   13d9e:	ff 0a       	sbc	r15, r31
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3176
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   13da0:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <tritri>
   13da4:	90 91 85 0b 	lds	r25, 0x0B85	; 0x800b85 <tritri+0x1>
   13da8:	25 e0       	ldi	r18, 0x05	; 5
   13daa:	28 9f       	mul	r18, r24
   13dac:	b0 01       	movw	r22, r0
   13dae:	29 9f       	mul	r18, r25
   13db0:	70 0d       	add	r23, r0
   13db2:	11 24       	eor	r1, r1
   13db4:	90 e0       	ldi	r25, 0x00	; 0
   13db6:	80 e0       	ldi	r24, 0x00	; 0
   13db8:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
   13dbc:	20 e0       	ldi	r18, 0x00	; 0
   13dbe:	30 e0       	ldi	r19, 0x00	; 0
   13dc0:	4a e7       	ldi	r20, 0x7A	; 122
   13dc2:	54 e4       	ldi	r21, 0x44	; 68
   13dc4:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3509
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
   13dc8:	87 01       	movw	r16, r14
   13dca:	22 e0       	ldi	r18, 0x02	; 2
   13dcc:	44 e0       	ldi	r20, 0x04	; 4
   13dce:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3510
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
   13dd2:	6e 01       	movw	r12, r28
   13dd4:	22 ef       	ldi	r18, 0xF2	; 242
   13dd6:	c2 1a       	sub	r12, r18
   13dd8:	2e ef       	ldi	r18, 0xFE	; 254
   13dda:	d2 0a       	sbc	r13, r18
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3176
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   13ddc:	60 91 82 0b 	lds	r22, 0x0B82	; 0x800b82 <petnula>
   13de0:	70 91 83 0b 	lds	r23, 0x0B83	; 0x800b83 <petnula+0x1>
   13de4:	03 e0       	ldi	r16, 0x03	; 3
   13de6:	66 0f       	add	r22, r22
   13de8:	77 1f       	adc	r23, r23
   13dea:	0a 95       	dec	r16
   13dec:	e1 f7       	brne	.-8      	; 0x13de6 <setup+0x5a0>
   13dee:	90 e0       	ldi	r25, 0x00	; 0
   13df0:	80 e0       	ldi	r24, 0x00	; 0
   13df2:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
   13df6:	20 e0       	ldi	r18, 0x00	; 0
   13df8:	30 e0       	ldi	r19, 0x00	; 0
   13dfa:	4a e7       	ldi	r20, 0x7A	; 122
   13dfc:	54 e4       	ldi	r21, 0x44	; 68
   13dfe:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3510
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
   13e02:	86 01       	movw	r16, r12
   13e04:	22 e0       	ldi	r18, 0x02	; 2
   13e06:	44 e0       	ldi	r20, 0x04	; 4
   13e08:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3511
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
   13e0c:	5e 01       	movw	r10, r28
   13e0e:	8a ee       	ldi	r24, 0xEA	; 234
   13e10:	a8 1a       	sub	r10, r24
   13e12:	8e ef       	ldi	r24, 0xFE	; 254
   13e14:	b8 0a       	sbc	r11, r24
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3176
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   13e16:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <dvanact>
   13e1a:	90 91 81 0b 	lds	r25, 0x0B81	; 0x800b81 <dvanact+0x1>
   13e1e:	29 e3       	ldi	r18, 0x39	; 57
   13e20:	28 9f       	mul	r18, r24
   13e22:	b0 01       	movw	r22, r0
   13e24:	29 9f       	mul	r18, r25
   13e26:	70 0d       	add	r23, r0
   13e28:	11 24       	eor	r1, r1
   13e2a:	90 e0       	ldi	r25, 0x00	; 0
   13e2c:	80 e0       	ldi	r24, 0x00	; 0
   13e2e:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
   13e32:	20 e0       	ldi	r18, 0x00	; 0
   13e34:	30 e0       	ldi	r19, 0x00	; 0
   13e36:	4a e7       	ldi	r20, 0x7A	; 122
   13e38:	54 e4       	ldi	r21, 0x44	; 68
   13e3a:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3511
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
   13e3e:	85 01       	movw	r16, r10
   13e40:	22 e0       	ldi	r18, 0x02	; 2
   13e42:	44 e0       	ldi	r20, 0x04	; 4
   13e44:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3512
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
   13e48:	4e 01       	movw	r8, r28
   13e4a:	92 ee       	ldi	r25, 0xE2	; 226
   13e4c:	89 1a       	sub	r8, r25
   13e4e:	9e ef       	ldi	r25, 0xFE	; 254
   13e50:	99 0a       	sbc	r9, r25
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3191
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   13e52:	60 91 7e 0b 	lds	r22, 0x0B7E	; 0x800b7e <proud>
   13e56:	70 91 7f 0b 	lds	r23, 0x0B7F	; 0x800b7f <proud+0x1>
   13e5a:	90 e0       	ldi	r25, 0x00	; 0
   13e5c:	80 e0       	ldi	r24, 0x00	; 0
   13e5e:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3512
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
   13e62:	84 01       	movw	r16, r8
   13e64:	22 e0       	ldi	r18, 0x02	; 2
   13e66:	44 e0       	ldi	r20, 0x04	; 4
   13e68:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3513
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
   13e6c:	9f 92       	push	r9
   13e6e:	8f 92       	push	r8
   13e70:	bf 92       	push	r11
   13e72:	af 92       	push	r10
   13e74:	df 92       	push	r13
   13e76:	cf 92       	push	r12
   13e78:	ff 92       	push	r15
   13e7a:	ef 92       	push	r14
   13e7c:	88 ef       	ldi	r24, 0xF8	; 248
   13e7e:	96 e0       	ldi	r25, 0x06	; 6
   13e80:	9f 93       	push	r25
   13e82:	8f 93       	push	r24
   13e84:	6e 01       	movw	r12, r28
   13e86:	a8 e8       	ldi	r26, 0x88	; 136
   13e88:	ca 0e       	add	r12, r26
   13e8a:	d1 1c       	adc	r13, r1
   13e8c:	df 92       	push	r13
   13e8e:	cf 92       	push	r12
   13e90:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3514
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   13e94:	ee 24       	eor	r14, r14
   13e96:	ea 94       	dec	r14
   13e98:	fe 2c       	mov	r15, r14
   13e9a:	00 ee       	ldi	r16, 0xE0	; 224
   13e9c:	17 e0       	ldi	r17, 0x07	; 7
   13e9e:	21 e0       	ldi	r18, 0x01	; 1
   13ea0:	42 e3       	ldi	r20, 0x32	; 50
   13ea2:	50 e0       	ldi	r21, 0x00	; 0
   13ea4:	60 ea       	ldi	r22, 0xA0	; 160
   13ea6:	70 e0       	ldi	r23, 0x00	; 0
   13ea8:	c6 01       	movw	r24, r12
   13eaa:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   13eae:	0f b6       	in	r0, 0x3f	; 63
   13eb0:	f8 94       	cli
   13eb2:	de bf       	out	0x3e, r29	; 62
   13eb4:	0f be       	out	0x3f, r0	; 63
   13eb6:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3837
      default_show_temp = get_default_show_temp();
      thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
   13eb8:	c8 5c       	subi	r28, 0xC8	; 200
   13eba:	de 4f       	sbci	r29, 0xFE	; 254
   13ebc:	28 81       	ld	r18, Y
   13ebe:	c8 53       	subi	r28, 0x38	; 56
   13ec0:	d1 40       	sbci	r29, 0x01	; 1
   13ec2:	2e 30       	cpi	r18, 0x0E	; 14
   13ec4:	11 f0       	breq	.+4      	; 0x13eca <setup+0x684>
   13ec6:	0c 94 1e a8 	jmp	0x1503c	; 0x1503c <setup+0x17f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3839
    {
      strcpy_P(str1, text_ntp_cas);
   13eca:	61 e8       	ldi	r22, 0x81	; 129
   13ecc:	7f e6       	ldi	r23, 0x6F	; 111
   13ece:	ce 01       	movw	r24, r28
   13ed0:	88 5b       	subi	r24, 0xB8	; 184
   13ed2:	9f 4f       	sbci	r25, 0xFF	; 255
   13ed4:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3840
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   13ed8:	ee 24       	eor	r14, r14
   13eda:	ea 94       	dec	r14
   13edc:	fe 2c       	mov	r15, r14
   13ede:	00 ee       	ldi	r16, 0xE0	; 224
   13ee0:	17 e0       	ldi	r17, 0x07	; 7
   13ee2:	21 e0       	ldi	r18, 0x01	; 1
   13ee4:	4e eb       	ldi	r20, 0xBE	; 190
   13ee6:	50 e0       	ldi	r21, 0x00	; 0
   13ee8:	6e e1       	ldi	r22, 0x1E	; 30
   13eea:	70 e0       	ldi	r23, 0x00	; 0
   13eec:	ce 01       	movw	r24, r28
   13eee:	88 5b       	subi	r24, 0xB8	; 184
   13ef0:	9f 4f       	sbci	r25, 0xFF	; 255
   13ef2:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
ntp_check():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:422
   13ef6:	d3 01       	movw	r26, r6
   13ef8:	1c 92       	st	X, r1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:423
  createString(tmp1, '.', device.ntp_server, 4, 10);
   13efa:	0a e0       	ldi	r16, 0x0A	; 10
   13efc:	24 e0       	ldi	r18, 0x04	; 4
   13efe:	47 e6       	ldi	r20, 0x67	; 103
   13f00:	5e e0       	ldi	r21, 0x0E	; 14
   13f02:	6e e2       	ldi	r22, 0x2E	; 46
   13f04:	c3 01       	movw	r24, r6
   13f06:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
   13f0a:	89 e3       	ldi	r24, 0x39	; 57
   13f0c:	95 e0       	ldi	r25, 0x05	; 5
   13f0e:	9f 83       	std	Y+7, r25	; 0x07
   13f10:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
   13f12:	89 81       	ldd	r24, Y+1	; 0x01
   13f14:	9a 81       	ldd	r25, Y+2	; 0x02
   13f16:	dc 01       	movw	r26, r24
   13f18:	ed 91       	ld	r30, X+
   13f1a:	fc 91       	ld	r31, X
   13f1c:	06 84       	ldd	r0, Z+14	; 0x0e
   13f1e:	f7 85       	ldd	r31, Z+15	; 0x0f
   13f20:	e0 2d       	mov	r30, r0
   13f22:	69 e3       	ldi	r22, 0x39	; 57
   13f24:	75 e0       	ldi	r23, 0x05	; 5
   13f26:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
   13f28:	81 e0       	ldi	r24, 0x01	; 1
   13f2a:	8b 83       	std	Y+3, r24	; 0x03
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   13f2c:	80 e1       	ldi	r24, 0x10	; 16
   13f2e:	9e e0       	ldi	r25, 0x0E	; 14
   13f30:	a0 e0       	ldi	r26, 0x00	; 0
   13f32:	b0 e0       	ldi	r27, 0x00	; 0
   13f34:	88 87       	std	Y+8, r24	; 0x08
   13f36:	99 87       	std	Y+9, r25	; 0x09
   13f38:	aa 87       	std	Y+10, r26	; 0x0a
   13f3a:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   13f3c:	7d 82       	std	Y+5, r7	; 0x05
   13f3e:	6c 82       	std	Y+4, r6	; 0x04
setUpdateInterval():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176
void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
}

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
   13f40:	81 e0       	ldi	r24, 0x01	; 1
   13f42:	90 e0       	ldi	r25, 0x00	; 0
   13f44:	a0 e0       	ldi	r26, 0x00	; 0
   13f46:	b0 e0       	ldi	r27, 0x00	; 0
   13f48:	8c 87       	std	Y+12, r24	; 0x0c
   13f4a:	9d 87       	std	Y+13, r25	; 0x0d
   13f4c:	ae 87       	std	Y+14, r26	; 0x0e
   13f4e:	bf 87       	std	Y+15, r27	; 0x0f
ntp_check():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:428
  timeClient->begin();
  timeClient->setTimeOffset(3600);
  timeClient->setPoolServerName(tmp1);
  timeClient->setUpdateInterval(1);
  if (timeClient->update() == true)
   13f50:	ce 01       	movw	r24, r28
   13f52:	01 96       	adiw	r24, 0x01	; 1
   13f54:	0e 94 a0 5a 	call	0xb540	; 0xb540 <NTPClient::update()>
   13f58:	18 2f       	mov	r17, r24
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
   13f5a:	89 81       	ldd	r24, Y+1	; 0x01
   13f5c:	9a 81       	ldd	r25, Y+2	; 0x02
   13f5e:	dc 01       	movw	r26, r24
   13f60:	ed 91       	ld	r30, X+
   13f62:	fc 91       	ld	r31, X
   13f64:	02 88       	ldd	r0, Z+18	; 0x12
   13f66:	f3 89       	ldd	r31, Z+19	; 0x13
   13f68:	e0 2d       	mov	r30, r0
   13f6a:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   13f6c:	1b 82       	std	Y+3, r1	; 0x03
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3841
      if (ntp_check(&timeClient) == 0)
   13f6e:	11 11       	cpse	r17, r1
   13f70:	0c 94 04 a8 	jmp	0x15008	; 0x15008 <setup+0x17c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3843
      {
        strcpy_P(str1, text_err);
   13f74:	6a e5       	ldi	r22, 0x5A	; 90
   13f76:	71 e7       	ldi	r23, 0x71	; 113
   13f78:	ce 01       	movw	r24, r28
   13f7a:	88 5b       	subi	r24, 0xB8	; 184
   13f7c:	9f 4f       	sbci	r25, 0xFF	; 255
   13f7e:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3844
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   13f82:	00 e0       	ldi	r16, 0x00	; 0
   13f84:	18 ef       	ldi	r17, 0xF8	; 248
   13f86:	21 e0       	ldi	r18, 0x01	; 1
   13f88:	4e eb       	ldi	r20, 0xBE	; 190
   13f8a:	50 e0       	ldi	r21, 0x00	; 0
   13f8c:	60 ea       	ldi	r22, 0xA0	; 160
   13f8e:	70 e0       	ldi	r23, 0x00	; 0
   13f90:	ce 01       	movw	r24, r28
   13f92:	88 5b       	subi	r24, 0xB8	; 184
   13f94:	9f 4f       	sbci	r25, 0xFF	; 255
   13f96:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3845
        selftest_set_0(SELFTEST_ERR_NTP);
   13f9a:	81 e0       	ldi	r24, 0x01	; 1
   13f9c:	72 c5       	rjmp	.+2788   	; 0x14a82 <setup+0x123c>
   13f9e:	0d 0d       	add	r16, r13
   13fa0:	11 1d       	adc	r17, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:928
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
   13fa2:	70 e0       	ldi	r23, 0x00	; 0
   13fa4:	2d 2d       	mov	r18, r13
   13fa6:	89 eb       	ldi	r24, 0xB9	; 185
   13fa8:	9f e0       	ldi	r25, 0x0F	; 15
   13faa:	0e 94 f6 81 	call	0x103ec	; 0x103ec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   13fae:	96 cd       	rjmp	.-1236   	; 0x13adc <setup+0x296>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
   13fb0:	8f ef       	ldi	r24, 0xFF	; 255
   13fb2:	90 e0       	ldi	r25, 0x00	; 0
   13fb4:	90 93 d2 0f 	sts	0x0FD2, r25	; 0x800fd2 <my_lcd+0x19>
   13fb8:	80 93 d1 0f 	sts	0x0FD1, r24	; 0x800fd1 <my_lcd+0x18>
   13fbc:	98 cd       	rjmp	.-1232   	; 0x13aee <setup+0x2a8>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:898
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
	{
		writeCmdData8(0x61, val);
	}
	else if(lcd_driver == ID_7575)
   13fbe:	41 30       	cpi	r20, 0x01	; 1
   13fc0:	51 05       	cpc	r21, r1
   13fc2:	19 f5       	brne	.+70     	; 0x1400a <setup+0x7c4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	{
		writeCmdData8(0x01, val ? 8 : 10);
   13fc4:	81 e0       	ldi	r24, 0x01	; 1
   13fc6:	82 b9       	out	0x02, r24	; 2
   13fc8:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   13fcc:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   13fd0:	80 81       	ld	r24, Z
   13fd2:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   13fd6:	89 23       	and	r24, r25
   13fd8:	80 83       	st	Z, r24
   13fda:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   13fde:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   13fe2:	80 81       	ld	r24, Z
   13fe4:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   13fe8:	89 2b       	or	r24, r25
   13fea:	80 83       	st	Z, r24
   13fec:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   13ff0:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   13ff4:	80 81       	ld	r24, Z
   13ff6:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   13ffa:	89 2b       	or	r24, r25
   13ffc:	80 83       	st	Z, r24
setup():
   13ffe:	88 e0       	ldi	r24, 0x08	; 8
Invert_Display():
   14000:	21 11       	cpse	r18, r1
   14002:	01 c0       	rjmp	.+2      	; 0x14006 <setup+0x7c0>
setup():
   14004:	8a e0       	ldi	r24, 0x0A	; 10
Invert_Display():
   14006:	82 b9       	out	0x02, r24	; 2
   14008:	b0 cd       	rjmp	.-1184   	; 0x13b6a <setup+0x324>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
   1400a:	81 e2       	ldi	r24, 0x21	; 33
Invert_Display():
   1400c:	21 11       	cpse	r18, r1
   1400e:	01 c0       	rjmp	.+2      	; 0x14012 <setup+0x7cc>
setup():
   14010:	80 e2       	ldi	r24, 0x20	; 32
Invert_Display():
   14012:	82 b9       	out	0x02, r24	; 2
   14014:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   14018:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1401c:	80 81       	ld	r24, Z
   1401e:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   14022:	89 23       	and	r24, r25
   14024:	80 83       	st	Z, r24
   14026:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1402a:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1402e:	80 81       	ld	r24, Z
   14030:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   14034:	89 2b       	or	r24, r25
   14036:	80 83       	st	Z, r24
   14038:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1403c:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   14040:	80 81       	ld	r24, Z
   14042:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   14046:	a1 cd       	rjmp	.-1214   	; 0x13b8a <setup+0x344>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3518
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
   14048:	c8 5c       	subi	r28, 0xC8	; 200
   1404a:	de 4f       	sbci	r29, 0xFE	; 254
   1404c:	f8 81       	ld	r31, Y
   1404e:	c8 53       	subi	r28, 0x38	; 56
   14050:	d1 40       	sbci	r29, 0x01	; 1
   14052:	f1 30       	cpi	r31, 0x01	; 1
   14054:	09 f0       	breq	.+2      	; 0x14058 <setup+0x812>
   14056:	63 c0       	rjmp	.+198    	; 0x1411e <setup+0x8d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3520
    {
      strcpy_P(str1, text_vnitrni_ochrany);
   14058:	6e e6       	ldi	r22, 0x6E	; 110
   1405a:	70 e7       	ldi	r23, 0x70	; 112
   1405c:	ce 01       	movw	r24, r28
   1405e:	88 5b       	subi	r24, 0xB8	; 184
   14060:	9f 4f       	sbci	r25, 0xFF	; 255
   14062:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3521
      strcat(str1, ":2");
   14066:	66 e1       	ldi	r22, 0x16	; 22
   14068:	77 e0       	ldi	r23, 0x07	; 7
   1406a:	ce 01       	movw	r24, r28
   1406c:	88 5b       	subi	r24, 0xB8	; 184
   1406e:	9f 4f       	sbci	r25, 0xFF	; 255
   14070:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3522
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14074:	ee 24       	eor	r14, r14
   14076:	ea 94       	dec	r14
   14078:	fe 2c       	mov	r15, r14
   1407a:	00 ee       	ldi	r16, 0xE0	; 224
   1407c:	17 e0       	ldi	r17, 0x07	; 7
   1407e:	21 e0       	ldi	r18, 0x01	; 1
   14080:	4c e3       	ldi	r20, 0x3C	; 60
   14082:	50 e0       	ldi	r21, 0x00	; 0
   14084:	6e e1       	ldi	r22, 0x1E	; 30
   14086:	70 e0       	ldi	r23, 0x00	; 0
   14088:	ce 01       	movw	r24, r28
   1408a:	88 5b       	subi	r24, 0xB8	; 184
   1408c:	9f 4f       	sbci	r25, 0xFF	; 255
   1408e:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
   14092:	e0 91 0f 10 	lds	r30, 0x100F	; 0x80100f <lm75_temp+0xb>
   14096:	f0 91 10 10 	lds	r31, 0x1010	; 0x801010 <lm75_temp+0xc>
   1409a:	04 80       	ldd	r0, Z+4	; 0x04
   1409c:	f5 81       	ldd	r31, Z+5	; 0x05
   1409e:	e0 2d       	mov	r30, r0
   140a0:	80 81       	ld	r24, Z
   140a2:	0e 94 d2 ae 	call	0x15da4	; 0x15da4 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.196]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3523
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
   140a6:	7e 01       	movw	r14, r28
   140a8:	22 ee       	ldi	r18, 0xE2	; 226
   140aa:	e2 1a       	sub	r14, r18
   140ac:	2e ef       	ldi	r18, 0xFE	; 254
   140ae:	f2 0a       	sbc	r15, r18
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
   140b0:	bc 01       	movw	r22, r24
   140b2:	99 0f       	add	r25, r25
   140b4:	88 0b       	sbc	r24, r24
   140b6:	99 0b       	sbc	r25, r25
   140b8:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
   140bc:	20 91 0b 10 	lds	r18, 0x100B	; 0x80100b <lm75_temp+0x7>
   140c0:	30 91 0c 10 	lds	r19, 0x100C	; 0x80100c <lm75_temp+0x8>
   140c4:	40 91 0d 10 	lds	r20, 0x100D	; 0x80100d <lm75_temp+0x9>
   140c8:	50 91 0e 10 	lds	r21, 0x100E	; 0x80100e <lm75_temp+0xa>
   140cc:	0e 94 59 ee 	call	0x1dcb2	; 0x1dcb2 <__mulsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3523
   140d0:	87 01       	movw	r16, r14
   140d2:	22 e0       	ldi	r18, 0x02	; 2
   140d4:	44 e0       	ldi	r20, 0x04	; 4
   140d6:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3524
      sprintf(str2, "iT=%sC", s_current);
   140da:	ff 92       	push	r15
   140dc:	ef 92       	push	r14
   140de:	89 e1       	ldi	r24, 0x19	; 25
   140e0:	97 e0       	ldi	r25, 0x07	; 7
   140e2:	9f 93       	push	r25
   140e4:	8f 93       	push	r24
   140e6:	6e 01       	movw	r12, r28
   140e8:	88 e8       	ldi	r24, 0x88	; 136
   140ea:	c8 0e       	add	r12, r24
   140ec:	d1 1c       	adc	r13, r1
   140ee:	df 92       	push	r13
   140f0:	cf 92       	push	r12
   140f2:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3525
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   140f6:	ee 24       	eor	r14, r14
   140f8:	ea 94       	dec	r14
   140fa:	fe 2c       	mov	r15, r14
   140fc:	00 ee       	ldi	r16, 0xE0	; 224
   140fe:	17 e0       	ldi	r17, 0x07	; 7
   14100:	21 e0       	ldi	r18, 0x01	; 1
   14102:	4c e3       	ldi	r20, 0x3C	; 60
   14104:	50 e0       	ldi	r21, 0x00	; 0
   14106:	60 ea       	ldi	r22, 0xA0	; 160
   14108:	70 e0       	ldi	r23, 0x00	; 0
   1410a:	c6 01       	movw	r24, r12
   1410c:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   14110:	0f 90       	pop	r0
   14112:	0f 90       	pop	r0
   14114:	0f 90       	pop	r0
   14116:	0f 90       	pop	r0
   14118:	0f 90       	pop	r0
   1411a:	0f 90       	pop	r0
   1411c:	cd ce       	rjmp	.-614    	; 0x13eb8 <setup+0x672>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3529
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
   1411e:	c8 5c       	subi	r28, 0xC8	; 200
   14120:	de 4f       	sbci	r29, 0xFE	; 254
   14122:	98 81       	ld	r25, Y
   14124:	c8 53       	subi	r28, 0x38	; 56
   14126:	d1 40       	sbci	r29, 0x01	; 1
   14128:	92 30       	cpi	r25, 0x02	; 2
   1412a:	09 f0       	breq	.+2      	; 0x1412e <setup+0x8e8>
   1412c:	87 c1       	rjmp	.+782    	; 0x1443c <setup+0xbf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3531
    {
      if (EEPROM.read(set_default_values) == 255)
   1412e:	8a e5       	ldi	r24, 0x5A	; 90
   14130:	90 e0       	ldi	r25, 0x00	; 0
   14132:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   14136:	8f 3f       	cpi	r24, 0xFF	; 255
   14138:	09 f0       	breq	.+2      	; 0x1413c <setup+0x8f6>
   1413a:	6e c1       	rjmp	.+732    	; 0x14418 <setup+0xbd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3533
      {
        EEPROM.write(set_default_values, 0);
   1413c:	60 e0       	ldi	r22, 0x00	; 0
   1413e:	8a e5       	ldi	r24, 0x5A	; 90
   14140:	90 e0       	ldi	r25, 0x00	; 0
   14142:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3534
        strcpy_P(str1, text_vychozi_nastaveni);
   14146:	6c e5       	ldi	r22, 0x5C	; 92
   14148:	70 e7       	ldi	r23, 0x70	; 112
   1414a:	ce 01       	movw	r24, r28
   1414c:	88 5b       	subi	r24, 0xB8	; 184
   1414e:	9f 4f       	sbci	r25, 0xFF	; 255
   14150:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3535
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   14154:	ee 24       	eor	r14, r14
   14156:	ea 94       	dec	r14
   14158:	fe 2c       	mov	r15, r14
   1415a:	00 e0       	ldi	r16, 0x00	; 0
   1415c:	18 ef       	ldi	r17, 0xF8	; 248
   1415e:	21 e0       	ldi	r18, 0x01	; 1
   14160:	46 e4       	ldi	r20, 0x46	; 70
   14162:	50 e0       	ldi	r21, 0x00	; 0
   14164:	6e e1       	ldi	r22, 0x1E	; 30
   14166:	70 e0       	ldi	r23, 0x00	; 0
   14168:	ce 01       	movw	r24, r28
   1416a:	88 5b       	subi	r24, 0xB8	; 184
   1416c:	9f 4f       	sbci	r25, 0xFF	; 255
   1416e:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2007
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
   14172:	6f ef       	ldi	r22, 0xFF	; 255
   14174:	8d e5       	ldi	r24, 0x5D	; 93
   14176:	90 e0       	ldi	r25, 0x00	; 0
   14178:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3540
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );

        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
   1417c:	80 e0       	ldi	r24, 0x00	; 0
   1417e:	0e 94 f0 62 	call	0xc5e0	; 0xc5e0 <thermostat_ring_clear(unsigned char)>
   14182:	81 e0       	ldi	r24, 0x01	; 1
   14184:	0e 94 f0 62 	call	0xc5e0	; 0xc5e0 <thermostat_ring_clear(unsigned char)>
   14188:	82 e0       	ldi	r24, 0x02	; 2
   1418a:	0e 94 f0 62 	call	0xc5e0	; 0xc5e0 <thermostat_ring_clear(unsigned char)>
   1418e:	83 e0       	ldi	r24, 0x03	; 3
   14190:	0e 94 f0 62 	call	0xc5e0	; 0xc5e0 <thermostat_ring_clear(unsigned char)>
   14194:	84 e0       	ldi	r24, 0x04	; 4
   14196:	0e 94 f0 62 	call	0xc5e0	; 0xc5e0 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3542
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1419a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3544
        {
          strcpy(tmp1, "");
   1419c:	62 e0       	ldi	r22, 0x02	; 2
   1419e:	73 e0       	ldi	r23, 0x03	; 3
   141a0:	ce 01       	movw	r24, r28
   141a2:	8e 50       	subi	r24, 0x0E	; 14
   141a4:	9f 4f       	sbci	r25, 0xFF	; 255
   141a6:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3545
          remote_tds_clear(idx);
   141aa:	81 2f       	mov	r24, r17
   141ac:	0e 94 46 66 	call	0xcc8c	; 0xcc8c <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3542
        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   141b0:	1f 5f       	subi	r17, 0xFF	; 255
   141b2:	1a 30       	cpi	r17, 0x0A	; 10
   141b4:	99 f7       	brne	.-26     	; 0x1419c <setup+0x956>
   141b6:	f1 ef       	ldi	r31, 0xF1	; 241
   141b8:	af 2e       	mov	r10, r31
   141ba:	bb 24       	eor	r11, r11
   141bc:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3548
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   141be:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3550
        {
          strcpy_P(str2, text_prog);
   141c0:	67 e5       	ldi	r22, 0x57	; 87
   141c2:	70 e7       	ldi	r23, 0x70	; 112
   141c4:	ce 01       	movw	r24, r28
   141c6:	88 57       	subi	r24, 0x78	; 120
   141c8:	9f 4f       	sbci	r25, 0xFF	; 255
   141ca:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3551
          thermostat_program_set_name(idx, str2);
   141ce:	be 01       	movw	r22, r28
   141d0:	68 57       	subi	r22, 0x78	; 120
   141d2:	7f 4f       	sbci	r23, 0xFF	; 255
   141d4:	81 2f       	mov	r24, r17
   141d6:	0e 94 66 61 	call	0xc2cc	; 0xc2cc <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   141da:	6f ef       	ldi	r22, 0xFF	; 255
   141dc:	c5 01       	movw	r24, r10
   141de:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3553
          thermostat_program_set_active(idx, PROG_FREE);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   141e2:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3555
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
   141e4:	c1 2c       	mov	r12, r1
   141e6:	e1 2c       	mov	r14, r1
   141e8:	00 e0       	ldi	r16, 0x00	; 0
   141ea:	20 e0       	ldi	r18, 0x00	; 0
   141ec:	40 e0       	ldi	r20, 0x00	; 0
   141ee:	6f 2d       	mov	r22, r15
   141f0:	81 2f       	mov	r24, r17
   141f2:	0e 94 2a 61 	call	0xc254	; 0xc254 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3556
            thermostat_program_set_threshold(idx, interval_id, 220);
   141f6:	4c ed       	ldi	r20, 0xDC	; 220
   141f8:	50 e0       	ldi	r21, 0x00	; 0
   141fa:	6f 2d       	mov	r22, r15
   141fc:	81 2f       	mov	r24, r17
   141fe:	0e 94 0e 61 	call	0xc21c	; 0xc21c <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3557
            thermostat_program_set_week(idx, interval_id, 0);
   14202:	40 e0       	ldi	r20, 0x00	; 0
   14204:	6f 2d       	mov	r22, r15
   14206:	81 2f       	mov	r24, r17
   14208:	0e 94 00 61 	call	0xc200	; 0xc200 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3553
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy_P(str2, text_prog);
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, PROG_FREE);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   1420c:	f3 94       	inc	r15
   1420e:	ab e0       	ldi	r26, 0x0B	; 11
   14210:	fa 12       	cpse	r15, r26
   14212:	e8 cf       	rjmp	.-48     	; 0x141e4 <setup+0x99e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3548
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   14214:	1f 5f       	subi	r17, 0xFF	; 255
   14216:	bd e4       	ldi	r27, 0x4D	; 77
   14218:	ab 0e       	add	r10, r27
   1421a:	b1 1c       	adc	r11, r1
   1421c:	18 30       	cpi	r17, 0x08	; 8
   1421e:	81 f6       	brne	.-96     	; 0x141c0 <setup+0x97a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3568
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
   14220:	ea e0       	ldi	r30, 0x0A	; 10
   14222:	fe 2e       	mov	r15, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3569
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
   14224:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3563
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
   14226:	be 01       	movw	r22, r28
   14228:	68 53       	subi	r22, 0x38	; 56
   1422a:	7f 4f       	sbci	r23, 0xFF	; 255
   1422c:	80 2f       	mov	r24, r16
   1422e:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3564
          strcpy(tds.name, "FREE");
   14232:	6e e9       	ldi	r22, 0x9E	; 158
   14234:	73 e0       	ldi	r23, 0x03	; 3
   14236:	c1 5c       	subi	r28, 0xC1	; 193
   14238:	de 4f       	sbci	r29, 0xFE	; 254
   1423a:	88 81       	ld	r24, Y
   1423c:	99 81       	ldd	r25, Y+1	; 0x01
   1423e:	cf 53       	subi	r28, 0x3F	; 63
   14240:	d1 40       	sbci	r29, 0x01	; 1
   14242:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3565
          tds.used = 0;
   14246:	c8 53       	subi	r28, 0x38	; 56
   14248:	df 4f       	sbci	r29, 0xFF	; 255
   1424a:	18 82       	st	Y, r1
   1424c:	c8 5c       	subi	r28, 0xC8	; 200
   1424e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3566
          tds.offset = 0;
   14250:	ce 52       	subi	r28, 0x2E	; 46
   14252:	df 4f       	sbci	r29, 0xFF	; 255
   14254:	19 82       	std	Y+1, r1	; 0x01
   14256:	18 82       	st	Y, r1
   14258:	c2 5d       	subi	r28, 0xD2	; 210
   1425a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3567
          tds.assigned_ds2482 = 0;
   1425c:	cf 52       	subi	r28, 0x2F	; 47
   1425e:	df 4f       	sbci	r29, 0xFF	; 255
   14260:	18 82       	st	Y, r1
   14262:	c1 5d       	subi	r28, 0xD1	; 209
   14264:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3568
          tds.period = 10;
   14266:	c4 52       	subi	r28, 0x24	; 36
   14268:	df 4f       	sbci	r29, 0xFF	; 255
   1426a:	f8 82       	st	Y, r15
   1426c:	cc 5d       	subi	r28, 0xDC	; 220
   1426e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3569
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
   14270:	c7 53       	subi	r28, 0x37	; 55
   14272:	df 4f       	sbci	r29, 0xFF	; 255
   14274:	18 83       	st	Y, r17
   14276:	c9 5c       	subi	r28, 0xC9	; 201
   14278:	d0 40       	sbci	r29, 0x00	; 0
   1427a:	c6 53       	subi	r28, 0x36	; 54
   1427c:	df 4f       	sbci	r29, 0xFF	; 255
   1427e:	18 83       	st	Y, r17
   14280:	ca 5c       	subi	r28, 0xCA	; 202
   14282:	d0 40       	sbci	r29, 0x00	; 0
   14284:	c5 53       	subi	r28, 0x35	; 53
   14286:	df 4f       	sbci	r29, 0xFF	; 255
   14288:	18 83       	st	Y, r17
   1428a:	cb 5c       	subi	r28, 0xCB	; 203
   1428c:	d0 40       	sbci	r29, 0x00	; 0
   1428e:	c4 53       	subi	r28, 0x34	; 52
   14290:	df 4f       	sbci	r29, 0xFF	; 255
   14292:	18 83       	st	Y, r17
   14294:	cc 5c       	subi	r28, 0xCC	; 204
   14296:	d0 40       	sbci	r29, 0x00	; 0
   14298:	c3 53       	subi	r28, 0x33	; 51
   1429a:	df 4f       	sbci	r29, 0xFF	; 255
   1429c:	18 83       	st	Y, r17
   1429e:	cd 5c       	subi	r28, 0xCD	; 205
   142a0:	d0 40       	sbci	r29, 0x00	; 0
   142a2:	c2 53       	subi	r28, 0x32	; 50
   142a4:	df 4f       	sbci	r29, 0xFF	; 255
   142a6:	18 83       	st	Y, r17
   142a8:	ce 5c       	subi	r28, 0xCE	; 206
   142aa:	d0 40       	sbci	r29, 0x00	; 0
   142ac:	c1 53       	subi	r28, 0x31	; 49
   142ae:	df 4f       	sbci	r29, 0xFF	; 255
   142b0:	18 83       	st	Y, r17
   142b2:	cf 5c       	subi	r28, 0xCF	; 207
   142b4:	d0 40       	sbci	r29, 0x00	; 0
   142b6:	c0 53       	subi	r28, 0x30	; 48
   142b8:	df 4f       	sbci	r29, 0xFF	; 255
   142ba:	18 83       	st	Y, r17
   142bc:	c0 5d       	subi	r28, 0xD0	; 208
   142be:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3570
          set_tds18s20(idx, &tds);
   142c0:	be 01       	movw	r22, r28
   142c2:	68 53       	subi	r22, 0x38	; 56
   142c4:	7f 4f       	sbci	r23, 0xFF	; 255
   142c6:	80 2f       	mov	r24, r16
   142c8:	0e 94 b3 63 	call	0xc766	; 0xc766 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3561
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   142cc:	0f 5f       	subi	r16, 0xFF	; 255
   142ce:	06 30       	cpi	r16, 0x06	; 6
   142d0:	09 f0       	breq	.+2      	; 0x142d4 <setup+0xa8e>
   142d2:	a9 cf       	rjmp	.-174    	; 0x14226 <setup+0x9e0>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   142d4:	84 e1       	ldi	r24, 0x14	; 20
   142d6:	f3 01       	movw	r30, r6
   142d8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   142da:	8c e0       	ldi	r24, 0x0C	; 12
   142dc:	81 83       	std	Z+1, r24	; 0x01
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   142de:	8e e0       	ldi	r24, 0x0E	; 14
   142e0:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   142e2:	91 e1       	ldi	r25, 0x11	; 17
   142e4:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   142e6:	84 83       	std	Z+4, r24	; 0x04
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   142e8:	15 82       	std	Z+5, r1	; 0x05
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3573
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
   142ea:	c3 01       	movw	r24, r6
   142ec:	0e 94 7b 5e 	call	0xbcf6	; 0xbcf6 <RTC_DS1307::adjust(DateTime const&)>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3203
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(int8_t offset)
{
  EEPROM.write(time_offset, offset);
   142f0:	61 e0       	ldi	r22, 0x01	; 1
   142f2:	81 e0       	ldi	r24, 0x01	; 1
   142f4:	90 e0       	ldi	r25, 0x00	; 0
   142f6:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3576
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
        time_set_offset(1);
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
   142fa:	22 e0       	ldi	r18, 0x02	; 2
   142fc:	20 93 19 0e 	sts	0x0E19, r18	; 0x800e19 <device>
   14300:	31 e0       	ldi	r19, 0x01	; 1
   14302:	30 93 1a 0e 	sts	0x0E1A, r19	; 0x800e1a <device+0x1>
   14306:	20 93 1b 0e 	sts	0x0E1B, r18	; 0x800e1b <device+0x2>
   1430a:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <dvanact>
   1430e:	90 91 81 0b 	lds	r25, 0x0B81	; 0x800b81 <dvanact+0x1>
   14312:	96 95       	lsr	r25
   14314:	87 95       	ror	r24
   14316:	80 93 1c 0e 	sts	0x0E1C, r24	; 0x800e1c <device+0x3>
   1431a:	80 91 a3 0c 	lds	r24, 0x0CA3	; 0x800ca3 <light_curr>
   1431e:	90 91 a4 0c 	lds	r25, 0x0CA4	; 0x800ca4 <light_curr+0x1>
   14322:	96 95       	lsr	r25
   14324:	87 95       	ror	r24
   14326:	80 93 1d 0e 	sts	0x0E1D, r24	; 0x800e1d <device+0x4>
   1432a:	80 91 7e 0b 	lds	r24, 0x0B7E	; 0x800b7e <proud>
   1432e:	90 91 7f 0b 	lds	r25, 0x0B7F	; 0x800b7f <proud+0x1>
   14332:	96 95       	lsr	r25
   14334:	87 95       	ror	r24
   14336:	80 93 1e 0e 	sts	0x0E1E, r24	; 0x800e1e <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3577
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 111;
   1433a:	90 ec       	ldi	r25, 0xC0	; 192
   1433c:	90 93 1f 0e 	sts	0x0E1F, r25	; 0x800e1f <device+0x6>
   14340:	88 ea       	ldi	r24, 0xA8	; 168
   14342:	80 93 20 0e 	sts	0x0E20, r24	; 0x800e20 <device+0x7>
   14346:	20 93 21 0e 	sts	0x0E21, r18	; 0x800e21 <device+0x8>
   1434a:	4f e6       	ldi	r20, 0x6F	; 111
   1434c:	40 93 22 0e 	sts	0x0E22, r20	; 0x800e22 <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3578
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
   14350:	10 93 23 0e 	sts	0x0E23, r17	; 0x800e23 <device+0xa>
   14354:	10 93 24 0e 	sts	0x0E24, r17	; 0x800e24 <device+0xb>
   14358:	10 93 25 0e 	sts	0x0E25, r17	; 0x800e25 <device+0xc>
   1435c:	10 92 26 0e 	sts	0x0E26, r1	; 0x800e26 <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3580

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
   14360:	90 93 2b 0e 	sts	0x0E2B, r25	; 0x800e2b <device+0x12>
   14364:	80 93 2c 0e 	sts	0x0E2C, r24	; 0x800e2c <device+0x13>
   14368:	20 93 2d 0e 	sts	0x0E2D, r18	; 0x800e2d <device+0x14>
   1436c:	30 93 2e 0e 	sts	0x0E2E, r19	; 0x800e2e <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3581
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
   14370:	90 93 27 0e 	sts	0x0E27, r25	; 0x800e27 <device+0xe>
   14374:	80 93 28 0e 	sts	0x0E28, r24	; 0x800e28 <device+0xf>
   14378:	20 93 29 0e 	sts	0x0E29, r18	; 0x800e29 <device+0x10>
   1437c:	30 93 2a 0e 	sts	0x0E2A, r19	; 0x800e2a <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3582
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
   14380:	90 93 39 0e 	sts	0x0E39, r25	; 0x800e39 <device+0x20>
   14384:	80 93 3a 0e 	sts	0x0E3A, r24	; 0x800e3a <device+0x21>
   14388:	20 93 3b 0e 	sts	0x0E3B, r18	; 0x800e3b <device+0x22>
   1438c:	30 93 3c 0e 	sts	0x0E3C, r19	; 0x800e3c <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3583
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
   14390:	90 93 67 0e 	sts	0x0E67, r25	; 0x800e67 <device+0x4e>
   14394:	80 93 68 0e 	sts	0x0E68, r24	; 0x800e68 <device+0x4f>
   14398:	20 93 69 0e 	sts	0x0E69, r18	; 0x800e69 <device+0x50>
   1439c:	30 93 6a 0e 	sts	0x0E6A, r19	; 0x800e6a <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3584
        device.mqtt_port = 1883;
   143a0:	8b e5       	ldi	r24, 0x5B	; 91
   143a2:	97 e0       	ldi	r25, 0x07	; 7
   143a4:	90 93 3e 0e 	sts	0x0E3E, r25	; 0x800e3e <device+0x25>
   143a8:	80 93 3d 0e 	sts	0x0E3D, r24	; 0x800e3d <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3585
        strcpy(device.mqtt_user, "saric");
   143ac:	60 e2       	ldi	r22, 0x20	; 32
   143ae:	77 e0       	ldi	r23, 0x07	; 7
   143b0:	8f e3       	ldi	r24, 0x3F	; 63
   143b2:	9e e0       	ldi	r25, 0x0E	; 14
   143b4:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3586
        strcpy(device.mqtt_key, "no");
   143b8:	66 e2       	ldi	r22, 0x26	; 38
   143ba:	77 e0       	ldi	r23, 0x07	; 7
   143bc:	83 e5       	ldi	r24, 0x53	; 83
   143be:	9e e0       	ldi	r25, 0x0E	; 14
   143c0:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3587
        save_setup_network();
   143c4:	0e 94 3c 64 	call	0xc878	; 0xc878 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3588
        strcpy(str1, "TERM D2");
   143c8:	69 e2       	ldi	r22, 0x29	; 41
   143ca:	77 e0       	ldi	r23, 0x07	; 7
   143cc:	ce 01       	movw	r24, r28
   143ce:	88 5b       	subi	r24, 0xB8	; 184
   143d0:	9f 4f       	sbci	r25, 0xFF	; 255
   143d2:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3589
        device_set_name(str1);
   143d6:	ce 01       	movw	r24, r28
   143d8:	88 5b       	subi	r24, 0xB8	; 184
   143da:	9f 4f       	sbci	r25, 0xFF	; 255
   143dc:	0e 94 14 64 	call	0xc828	; 0xc828 <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3591
        char hostname[10];
        device_get_name(hostname);
   143e0:	c3 01       	movw	r24, r6
   143e2:	0e 94 e0 87 	call	0x10fc0	; 0x10fc0 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3592
        default_ring = NO_DEFAULT_RING;
   143e6:	10 93 86 0b 	sts	0x0B86, r17	; 0x800b86 <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3593
        last_default_ring = NO_DEFAULT_RING;
   143ea:	10 93 95 09 	sts	0x0995, r17	; 0x800995 <last_default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1992
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
   143ee:	6f ef       	ldi	r22, 0xFF	; 255
   143f0:	8c e5       	ldi	r24, 0x5C	; 92
   143f2:	90 e0       	ldi	r25, 0x00	; 0
   143f4:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3595
        char hostname[10];
        device_get_name(hostname);
        default_ring = NO_DEFAULT_RING;
        last_default_ring = NO_DEFAULT_RING;
        set_default_ring(default_ring);
        EEPROM.write(my_brightness_values, 50);
   143f8:	62 e3       	ldi	r22, 0x32	; 50
   143fa:	8e e5       	ldi	r24, 0x5E	; 94
   143fc:	90 e0       	ldi	r25, 0x00	; 0
   143fe:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3596
        EEPROM.write(my_brightness_mode, 0);
   14402:	60 e0       	ldi	r22, 0x00	; 0
   14404:	8f e5       	ldi	r24, 0x5F	; 95
   14406:	90 e0       	ldi	r25, 0x00	; 0
   14408:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3597
        EEPROM.write(my_display_auto_shutdown, 60);
   1440c:	6c e3       	ldi	r22, 0x3C	; 60
   1440e:	80 e6       	ldi	r24, 0x60	; 96
   14410:	90 e0       	ldi	r25, 0x00	; 0
   14412:	0e 94 ce 60 	call	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
   14416:	50 cd       	rjmp	.-1376   	; 0x13eb8 <setup+0x672>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3601
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
   14418:	6b e4       	ldi	r22, 0x4B	; 75
   1441a:	70 e7       	ldi	r23, 0x70	; 112
   1441c:	ce 01       	movw	r24, r28
   1441e:	88 5b       	subi	r24, 0xB8	; 184
   14420:	9f 4f       	sbci	r25, 0xFF	; 255
   14422:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3602
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14426:	ee 24       	eor	r14, r14
   14428:	ea 94       	dec	r14
   1442a:	fe 2c       	mov	r15, r14
   1442c:	00 ee       	ldi	r16, 0xE0	; 224
   1442e:	17 e0       	ldi	r17, 0x07	; 7
   14430:	21 e0       	ldi	r18, 0x01	; 1
   14432:	46 e4       	ldi	r20, 0x46	; 70
   14434:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3635
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   14436:	6e e1       	ldi	r22, 0x1E	; 30
   14438:	70 e0       	ldi	r23, 0x00	; 0
   1443a:	66 c0       	rjmp	.+204    	; 0x14508 <setup+0xcc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3607
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
   1443c:	c8 5c       	subi	r28, 0xC8	; 200
   1443e:	de 4f       	sbci	r29, 0xFE	; 254
   14440:	f8 81       	ld	r31, Y
   14442:	c8 53       	subi	r28, 0x38	; 56
   14444:	d1 40       	sbci	r29, 0x01	; 1
   14446:	f3 30       	cpi	r31, 0x03	; 3
   14448:	09 f0       	breq	.+2      	; 0x1444c <setup+0xc06>
   1444a:	79 c0       	rjmp	.+242    	; 0x1453e <setup+0xcf8>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50



void SRAM_23LC::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
   1444c:	61 e0       	ldi	r22, 0x01	; 1
   1444e:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   14452:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
   14456:	61 e0       	ldi	r22, 0x01	; 1
   14458:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   1445c:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
   14460:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   14464:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   14468:	0e 94 75 59 	call	0xb2ea	; 0xb2ea <SoftSPIB::begin()>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   1446c:	60 e0       	ldi	r22, 0x00	; 0
   1446e:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   14472:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   14476:	61 e0       	ldi	r22, 0x01	; 1
   14478:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   1447c:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   14480:	0e 94 1b 81 	call	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  pinMode(_chipSelect, OUTPUT);

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
   14484:	60 e4       	ldi	r22, 0x40	; 64
   14486:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   1448a:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   1448e:	0e 94 1b 81 	call	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   14492:	61 e0       	ldi	r22, 0x01	; 1
   14494:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   14498:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3610
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
   1449c:	4b ea       	ldi	r20, 0xAB	; 171
   1449e:	60 e0       	ldi	r22, 0x00	; 0
   144a0:	70 e0       	ldi	r23, 0x00	; 0
   144a2:	cb 01       	movw	r24, r22
   144a4:	0e 94 f0 ad 	call	0x15be0	; 0x15be0 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3611
      if (SRAM.readByte(0) == 0xAB)
   144a8:	60 e0       	ldi	r22, 0x00	; 0
   144aa:	70 e0       	ldi	r23, 0x00	; 0
   144ac:	cb 01       	movw	r24, r22
   144ae:	0e 94 2c ae 	call	0x15c58	; 0x15c58 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3613
      {
        strcpy_P(str1, text_test_ram);
   144b2:	6e e3       	ldi	r22, 0x3E	; 62
   144b4:	70 e7       	ldi	r23, 0x70	; 112
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3611
    /// test SRAM
    if (init == 3)
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
   144b6:	8b 3a       	cpi	r24, 0xAB	; 171
   144b8:	69 f5       	brne	.+90     	; 0x14514 <setup+0xcce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3613
      {
        strcpy_P(str1, text_test_ram);
   144ba:	ce 01       	movw	r24, r28
   144bc:	88 5b       	subi	r24, 0xB8	; 184
   144be:	9f 4f       	sbci	r25, 0xFF	; 255
   144c0:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3614
        strcat(str1, " init ...");
   144c4:	61 e3       	ldi	r22, 0x31	; 49
   144c6:	77 e0       	ldi	r23, 0x07	; 7
   144c8:	ce 01       	movw	r24, r28
   144ca:	88 5b       	subi	r24, 0xB8	; 184
   144cc:	9f 4f       	sbci	r25, 0xFF	; 255
   144ce:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3615
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   144d2:	ee 24       	eor	r14, r14
   144d4:	ea 94       	dec	r14
   144d6:	fe 2c       	mov	r15, r14
   144d8:	00 ee       	ldi	r16, 0xE0	; 224
   144da:	17 e0       	ldi	r17, 0x07	; 7
   144dc:	21 e0       	ldi	r18, 0x01	; 1
   144de:	40 e5       	ldi	r20, 0x50	; 80
   144e0:	50 e0       	ldi	r21, 0x00	; 0
   144e2:	6e e1       	ldi	r22, 0x1E	; 30
   144e4:	70 e0       	ldi	r23, 0x00	; 0
   144e6:	ce 01       	movw	r24, r28
   144e8:	88 5b       	subi	r24, 0xB8	; 184
   144ea:	9f 4f       	sbci	r25, 0xFF	; 255
   144ec:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3628
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
   144f0:	6b e3       	ldi	r22, 0x3B	; 59
   144f2:	70 e7       	ldi	r23, 0x70	; 112
   144f4:	ce 01       	movw	r24, r28
   144f6:	88 5b       	subi	r24, 0xB8	; 184
   144f8:	9f 4f       	sbci	r25, 0xFF	; 255
   144fa:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3629
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   144fe:	21 e0       	ldi	r18, 0x01	; 1
   14500:	40 e5       	ldi	r20, 0x50	; 80
   14502:	50 e0       	ldi	r21, 0x00	; 0
   14504:	62 ed       	ldi	r22, 0xD2	; 210
   14506:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3635
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   14508:	ce 01       	movw	r24, r28
   1450a:	88 5b       	subi	r24, 0xB8	; 184
   1450c:	9f 4f       	sbci	r25, 0xFF	; 255
   1450e:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   14512:	d2 cc       	rjmp	.-1628   	; 0x13eb8 <setup+0x672>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3633
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
   14514:	ce 01       	movw	r24, r28
   14516:	88 5b       	subi	r24, 0xB8	; 184
   14518:	9f 4f       	sbci	r25, 0xFF	; 255
   1451a:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3634
        strcat_P(str1, text_err);
   1451e:	6a e5       	ldi	r22, 0x5A	; 90
   14520:	71 e7       	ldi	r23, 0x71	; 113
   14522:	ce 01       	movw	r24, r28
   14524:	88 5b       	subi	r24, 0xB8	; 184
   14526:	9f 4f       	sbci	r25, 0xFF	; 255
   14528:	0e 94 44 e5 	call	0x1ca88	; 0x1ca88 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3635
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   1452c:	ee 24       	eor	r14, r14
   1452e:	ea 94       	dec	r14
   14530:	fe 2c       	mov	r15, r14
   14532:	00 e0       	ldi	r16, 0x00	; 0
   14534:	18 ef       	ldi	r17, 0xF8	; 248
   14536:	21 e0       	ldi	r18, 0x01	; 1
   14538:	40 e5       	ldi	r20, 0x50	; 80
   1453a:	50 e0       	ldi	r21, 0x00	; 0
   1453c:	7c cf       	rjmp	.-264    	; 0x14436 <setup+0xbf0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3640
      }
    }
    ///
    /// init EEPROMKY
    if (init == 4)
   1453e:	c8 5c       	subi	r28, 0xC8	; 200
   14540:	de 4f       	sbci	r29, 0xFE	; 254
   14542:	28 81       	ld	r18, Y
   14544:	c8 53       	subi	r28, 0x38	; 56
   14546:	d1 40       	sbci	r29, 0x01	; 1
   14548:	24 30       	cpi	r18, 0x04	; 4
   1454a:	09 f0       	breq	.+2      	; 0x1454e <setup+0xd08>
   1454c:	c6 c5       	rjmp	.+2956   	; 0x150da <setup+0x1894>
begin():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:31
}


void EEPROM_CAT25::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
   1454e:	61 e0       	ldi	r22, 0x01	; 1
   14550:	80 91 75 0e 	lds	r24, 0x0E75	; 0x800e75 <SROM+0xa>
   14554:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:32
  pinMode(_chipSelect, OUTPUT);
   14558:	61 e0       	ldi	r22, 0x01	; 1
   1455a:	80 91 75 0e 	lds	r24, 0x0E75	; 0x800e75 <SROM+0xa>
   1455e:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:34

  _spi->begin();
   14562:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   14566:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
   1456a:	0e 94 75 59 	call	0xb2ea	; 0xb2ea <SoftSPIB::begin()>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90
}

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
   1456e:	80 91 6f 0e 	lds	r24, 0x0E6F	; 0x800e6f <SROM+0x4>
   14572:	90 91 70 0e 	lds	r25, 0x0E70	; 0x800e70 <SROM+0x5>
   14576:	a0 91 71 0e 	lds	r26, 0x0E71	; 0x800e71 <SROM+0x6>
   1457a:	b0 91 72 0e 	lds	r27, 0x0E72	; 0x800e72 <SROM+0x7>
   1457e:	89 2b       	or	r24, r25
   14580:	8a 2b       	or	r24, r26
   14582:	8b 2b       	or	r24, r27
   14584:	a9 f0       	breq	.+42     	; 0x145b0 <setup+0xd6a>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
   14586:	0e 94 f7 c9 	call	0x193ee	; 0x193ee <EEPROM_CAT25::getStatusRegister() [clone .constprop.77]>
   1458a:	80 fd       	sbrc	r24, 0
   1458c:	fc cf       	rjmp	.-8      	; 0x14586 <setup+0xd40>
enableWrite():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:60
  return(true);
}

void EEPROM_CAT25::enableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WREN, 0);
   1458e:	86 e0       	ldi	r24, 0x06	; 6
   14590:	0e 94 af c9 	call	0x1935e	; 0x1935e <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:61
  endCommand();
   14594:	0e 94 aa c9 	call	0x19354	; 0x19354 <EEPROM_CAT25::endCommand() [clone .constprop.80]>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  while (!isReady()) {
    yield();
  }

  enableWrite();
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
   14598:	82 e0       	ldi	r24, 0x02	; 2
   1459a:	0e 94 af c9 	call	0x1935e	; 0x1935e <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
   1459e:	6a eb       	ldi	r22, 0xBA	; 186
   145a0:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   145a4:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
   145a8:	0e 94 1b 81 	call	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
   145ac:	0e 94 aa c9 	call	0x19354	; 0x19354 <EEPROM_CAT25::endCommand() [clone .constprop.80]>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
   145b0:	80 91 6f 0e 	lds	r24, 0x0E6F	; 0x800e6f <SROM+0x4>
   145b4:	90 91 70 0e 	lds	r25, 0x0E70	; 0x800e70 <SROM+0x5>
   145b8:	a0 91 71 0e 	lds	r26, 0x0E71	; 0x800e71 <SROM+0x6>
   145bc:	b0 91 72 0e 	lds	r27, 0x0E72	; 0x800e72 <SROM+0x7>
   145c0:	89 2b       	or	r24, r25
   145c2:	8a 2b       	or	r24, r26
   145c4:	8b 2b       	or	r24, r27
   145c6:	61 f1       	breq	.+88     	; 0x14620 <setup+0xdda>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
   145c8:	0e 94 f7 c9 	call	0x193ee	; 0x193ee <EEPROM_CAT25::getStatusRegister() [clone .constprop.77]>
   145cc:	80 fd       	sbrc	r24, 0
   145ce:	fc cf       	rjmp	.-8      	; 0x145c8 <setup+0xd82>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80

  while (!isReady()) {
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
   145d0:	83 e0       	ldi	r24, 0x03	; 3
   145d2:	0e 94 af c9 	call	0x1935e	; 0x1935e <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   145d6:	6f ef       	ldi	r22, 0xFF	; 255
   145d8:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   145dc:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
   145e0:	0e 94 1b 81 	call	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
   145e4:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
   145e6:	0e 94 aa c9 	call	0x19354	; 0x19354 <EEPROM_CAT25::endCommand() [clone .constprop.80]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3644
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
   145ea:	1a 3b       	cpi	r17, 0xBA	; 186
   145ec:	c9 f4       	brne	.+50     	; 0x14620 <setup+0xdda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3646
      {
        strcpy_P(str1, text_test_eeprom);
   145ee:	6b e2       	ldi	r22, 0x2B	; 43
   145f0:	70 e7       	ldi	r23, 0x70	; 112
   145f2:	ce 01       	movw	r24, r28
   145f4:	88 5b       	subi	r24, 0xB8	; 184
   145f6:	9f 4f       	sbci	r25, 0xFF	; 255
   145f8:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3647
        strcat_P(str1, text_ok);
   145fc:	6b e3       	ldi	r22, 0x3B	; 59
   145fe:	70 e7       	ldi	r23, 0x70	; 112
   14600:	ce 01       	movw	r24, r28
   14602:	88 5b       	subi	r24, 0xB8	; 184
   14604:	9f 4f       	sbci	r25, 0xFF	; 255
   14606:	0e 94 44 e5 	call	0x1ca88	; 0x1ca88 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3648
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1460a:	ee 24       	eor	r14, r14
   1460c:	ea 94       	dec	r14
   1460e:	fe 2c       	mov	r15, r14
   14610:	00 ee       	ldi	r16, 0xE0	; 224
   14612:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3654
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   14614:	21 e0       	ldi	r18, 0x01	; 1
   14616:	4a e5       	ldi	r20, 0x5A	; 90
   14618:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3803
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    {
      strcpy_P(str1, text_rest_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1461a:	6e e1       	ldi	r22, 0x1E	; 30
   1461c:	70 e0       	ldi	r23, 0x00	; 0
   1461e:	75 c2       	rjmp	.+1258   	; 0x14b0a <setup+0x12c4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3652
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
   14620:	6b e2       	ldi	r22, 0x2B	; 43
   14622:	70 e7       	ldi	r23, 0x70	; 112
   14624:	ce 01       	movw	r24, r28
   14626:	88 5b       	subi	r24, 0xB8	; 184
   14628:	9f 4f       	sbci	r25, 0xFF	; 255
   1462a:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3653
        strcat_P(str1, text_err);
   1462e:	6a e5       	ldi	r22, 0x5A	; 90
   14630:	71 e7       	ldi	r23, 0x71	; 113
   14632:	ce 01       	movw	r24, r28
   14634:	88 5b       	subi	r24, 0xB8	; 184
   14636:	9f 4f       	sbci	r25, 0xFF	; 255
   14638:	0e 94 44 e5 	call	0x1ca88	; 0x1ca88 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3654
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   1463c:	ee 24       	eor	r14, r14
   1463e:	ea 94       	dec	r14
   14640:	fe 2c       	mov	r15, r14
   14642:	00 e0       	ldi	r16, 0x00	; 0
   14644:	18 ef       	ldi	r17, 0xF8	; 248
   14646:	e6 cf       	rjmp	.-52     	; 0x14614 <setup+0xdce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3661
    }
    ///
    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
   14648:	69 e1       	ldi	r22, 0x19	; 25
   1464a:	70 e7       	ldi	r23, 0x70	; 112
   1464c:	ce 01       	movw	r24, r28
   1464e:	88 5b       	subi	r24, 0xB8	; 184
   14650:	9f 4f       	sbci	r25, 0xFF	; 255
   14652:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3662
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14656:	ee 24       	eor	r14, r14
   14658:	ea 94       	dec	r14
   1465a:	fe 2c       	mov	r15, r14
   1465c:	00 ee       	ldi	r16, 0xE0	; 224
   1465e:	17 e0       	ldi	r17, 0x07	; 7
   14660:	21 e0       	ldi	r18, 0x01	; 1
   14662:	44 e6       	ldi	r20, 0x64	; 100
   14664:	50 e0       	ldi	r21, 0x00	; 0
   14666:	6e e1       	ldi	r22, 0x1E	; 30
   14668:	70 e0       	ldi	r23, 0x00	; 0
   1466a:	ce 01       	movw	r24, r28
   1466c:	88 5b       	subi	r24, 0xB8	; 184
   1466e:	9f 4f       	sbci	r25, 0xFF	; 255
   14670:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   14674:	09 e1       	ldi	r16, 0x19	; 25
   14676:	e0 2e       	mov	r14, r16
   14678:	0e e0       	ldi	r16, 0x0E	; 14
   1467a:	f0 2e       	mov	r15, r16
   1467c:	0e e6       	ldi	r16, 0x6E	; 110
   1467e:	10 e0       	ldi	r17, 0x00	; 0
load_setup_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:25

///////////////////////////////////////// MQTT network funkce //////////////////////////////////////////////////////
//
void load_setup_network(void)
{
  for (uint8_t m = 0; m < 6; m++) device.mac[m] = EEPROM.read(device_mac + m);
   14680:	c8 01       	movw	r24, r16
   14682:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   14686:	d7 01       	movw	r26, r14
   14688:	8d 93       	st	X+, r24
   1468a:	7d 01       	movw	r14, r26
   1468c:	0f 5f       	subi	r16, 0xFF	; 255
   1468e:	1f 4f       	sbci	r17, 0xFF	; 255
   14690:	04 37       	cpi	r16, 0x74	; 116
   14692:	11 05       	cpc	r17, r1
   14694:	a9 f7       	brne	.-22     	; 0x14680 <setup+0xe3a>
   14696:	bf e1       	ldi	r27, 0x1F	; 31
   14698:	eb 2e       	mov	r14, r27
   1469a:	be e0       	ldi	r27, 0x0E	; 14
   1469c:	fb 2e       	mov	r15, r27
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:26
  for (uint8_t m = 0; m < 4; m++) device.myIP[m] = EEPROM.read(device_ip + m);
   1469e:	c8 01       	movw	r24, r16
   146a0:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   146a4:	f7 01       	movw	r30, r14
   146a6:	81 93       	st	Z+, r24
   146a8:	7f 01       	movw	r14, r30
   146aa:	0f 5f       	subi	r16, 0xFF	; 255
   146ac:	1f 4f       	sbci	r17, 0xFF	; 255
   146ae:	08 37       	cpi	r16, 0x78	; 120
   146b0:	11 05       	cpc	r17, r1
   146b2:	a9 f7       	brne	.-22     	; 0x1469e <setup+0xe58>
   146b4:	a3 e2       	ldi	r26, 0x23	; 35
   146b6:	ea 2e       	mov	r14, r26
   146b8:	ae e0       	ldi	r26, 0x0E	; 14
   146ba:	fa 2e       	mov	r15, r26
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:27
  for (uint8_t m = 0; m < 4; m++) device.myMASK[m] = EEPROM.read(device_mask + m);
   146bc:	c8 01       	movw	r24, r16
   146be:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   146c2:	d7 01       	movw	r26, r14
   146c4:	8d 93       	st	X+, r24
   146c6:	7d 01       	movw	r14, r26
   146c8:	0f 5f       	subi	r16, 0xFF	; 255
   146ca:	1f 4f       	sbci	r17, 0xFF	; 255
   146cc:	0c 37       	cpi	r16, 0x7C	; 124
   146ce:	11 05       	cpc	r17, r1
   146d0:	a9 f7       	brne	.-22     	; 0x146bc <setup+0xe76>
   146d2:	eb e2       	ldi	r30, 0x2B	; 43
   146d4:	ce 2e       	mov	r12, r30
   146d6:	ee e0       	ldi	r30, 0x0E	; 14
   146d8:	de 2e       	mov	r13, r30
   146da:	f0 e8       	ldi	r31, 0x80	; 128
   146dc:	ef 2e       	mov	r14, r31
   146de:	f1 2c       	mov	r15, r1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:28
  for (uint8_t m = 0; m < 4; m++) device.myGW[m] = EEPROM.read(device_gw + m);
   146e0:	c7 01       	movw	r24, r14
   146e2:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   146e6:	f6 01       	movw	r30, r12
   146e8:	81 93       	st	Z+, r24
   146ea:	6f 01       	movw	r12, r30
   146ec:	ff ef       	ldi	r31, 0xFF	; 255
   146ee:	ef 1a       	sub	r14, r31
   146f0:	ff 0a       	sbc	r15, r31
   146f2:	24 e8       	ldi	r18, 0x84	; 132
   146f4:	e2 16       	cp	r14, r18
   146f6:	f1 04       	cpc	r15, r1
   146f8:	99 f7       	brne	.-26     	; 0x146e0 <setup+0xe9a>
   146fa:	77 e2       	ldi	r23, 0x27	; 39
   146fc:	c7 2e       	mov	r12, r23
   146fe:	7e e0       	ldi	r23, 0x0E	; 14
   14700:	d7 2e       	mov	r13, r23
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:29
  for (uint8_t m = 0; m < 4; m++) device.myDNS[m] = EEPROM.read(device_dns + m);
   14702:	c8 01       	movw	r24, r16
   14704:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   14708:	d6 01       	movw	r26, r12
   1470a:	8d 93       	st	X+, r24
   1470c:	6d 01       	movw	r12, r26
   1470e:	0f 5f       	subi	r16, 0xFF	; 255
   14710:	1f 4f       	sbci	r17, 0xFF	; 255
   14712:	00 38       	cpi	r16, 0x80	; 128
   14714:	11 05       	cpc	r17, r1
   14716:	a9 f7       	brne	.-22     	; 0x14702 <setup+0xebc>
   14718:	6f e2       	ldi	r22, 0x2F	; 47
   1471a:	c6 2e       	mov	r12, r22
   1471c:	6e e0       	ldi	r22, 0x0E	; 14
   1471e:	d6 2e       	mov	r13, r22
   14720:	04 e6       	ldi	r16, 0x64	; 100
   14722:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:30
  for (uint8_t m = 0; m < 9; m++) device.nazev[m] = EEPROM.read(device_nazev + m);
   14724:	c8 01       	movw	r24, r16
   14726:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1472a:	f6 01       	movw	r30, r12
   1472c:	81 93       	st	Z+, r24
   1472e:	6f 01       	movw	r12, r30
   14730:	0f 5f       	subi	r16, 0xFF	; 255
   14732:	1f 4f       	sbci	r17, 0xFF	; 255
   14734:	0d 36       	cpi	r16, 0x6D	; 109
   14736:	11 05       	cpc	r17, r1
   14738:	a9 f7       	brne	.-22     	; 0x14724 <setup+0xede>
   1473a:	09 e3       	ldi	r16, 0x39	; 57
   1473c:	1e e0       	ldi	r17, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:31
  for (uint8_t m = 0; m < 4; m++) device.mqtt_server[m] = EEPROM.read(device_mqtt_server + m);
   1473e:	c7 01       	movw	r24, r14
   14740:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   14744:	d8 01       	movw	r26, r16
   14746:	8d 93       	st	X+, r24
   14748:	8d 01       	movw	r16, r26
   1474a:	bf ef       	ldi	r27, 0xFF	; 255
   1474c:	eb 1a       	sub	r14, r27
   1474e:	fb 0a       	sbc	r15, r27
   14750:	e8 e8       	ldi	r30, 0x88	; 136
   14752:	ee 16       	cp	r14, r30
   14754:	f1 04       	cpc	r15, r1
   14756:	99 f7       	brne	.-26     	; 0x1473e <setup+0xef8>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:32
  device.mqtt_port = (EEPROM.read(device_mqtt_port) << 8) + EEPROM.read(device_mqtt_port + 1);
   14758:	88 e8       	ldi	r24, 0x88	; 136
   1475a:	90 e0       	ldi	r25, 0x00	; 0
   1475c:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   14760:	18 2f       	mov	r17, r24
   14762:	89 e8       	ldi	r24, 0x89	; 137
   14764:	90 e0       	ldi	r25, 0x00	; 0
   14766:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1476a:	21 2f       	mov	r18, r17
   1476c:	30 e0       	ldi	r19, 0x00	; 0
   1476e:	32 2f       	mov	r19, r18
   14770:	22 27       	eor	r18, r18
   14772:	82 0f       	add	r24, r18
   14774:	93 2f       	mov	r25, r19
   14776:	91 1d       	adc	r25, r1
   14778:	90 93 3e 0e 	sts	0x0E3E, r25	; 0x800e3e <device+0x25>
   1477c:	80 93 3d 0e 	sts	0x0E3D, r24	; 0x800e3d <device+0x24>
   14780:	5f e3       	ldi	r21, 0x3F	; 63
   14782:	e5 2e       	mov	r14, r21
   14784:	5e e0       	ldi	r21, 0x0E	; 14
   14786:	f5 2e       	mov	r15, r21
   14788:	0a e8       	ldi	r16, 0x8A	; 138
   1478a:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:33
  for (uint8_t m = 0; m < 20; m++) device.mqtt_user[m] = EEPROM.read(device_mqtt_user + m);
   1478c:	c8 01       	movw	r24, r16
   1478e:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   14792:	d7 01       	movw	r26, r14
   14794:	8d 93       	st	X+, r24
   14796:	7d 01       	movw	r14, r26
   14798:	0f 5f       	subi	r16, 0xFF	; 255
   1479a:	1f 4f       	sbci	r17, 0xFF	; 255
   1479c:	0e 39       	cpi	r16, 0x9E	; 158
   1479e:	11 05       	cpc	r17, r1
   147a0:	a9 f7       	brne	.-22     	; 0x1478c <setup+0xf46>
   147a2:	93 e5       	ldi	r25, 0x53	; 83
   147a4:	e9 2e       	mov	r14, r25
   147a6:	9e e0       	ldi	r25, 0x0E	; 14
   147a8:	f9 2e       	mov	r15, r25
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:34
  for (uint8_t m = 0; m < 20; m++) device.mqtt_key[m] = EEPROM.read(device_mqtt_key + m);
   147aa:	c8 01       	movw	r24, r16
   147ac:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   147b0:	f7 01       	movw	r30, r14
   147b2:	81 93       	st	Z+, r24
   147b4:	7f 01       	movw	r14, r30
   147b6:	0f 5f       	subi	r16, 0xFF	; 255
   147b8:	1f 4f       	sbci	r17, 0xFF	; 255
   147ba:	02 3b       	cpi	r16, 0xB2	; 178
   147bc:	11 05       	cpc	r17, r1
   147be:	a9 f7       	brne	.-22     	; 0x147aa <setup+0xf64>
   147c0:	87 e6       	ldi	r24, 0x67	; 103
   147c2:	e8 2e       	mov	r14, r24
   147c4:	8e e0       	ldi	r24, 0x0E	; 14
   147c6:	f8 2e       	mov	r15, r24
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:35
  for (uint8_t m = 0; m < 4; m++) device.ntp_server[m] = EEPROM.read(device_ntp_server + m);
   147c8:	c8 01       	movw	r24, r16
   147ca:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   147ce:	d7 01       	movw	r26, r14
   147d0:	8d 93       	st	X+, r24
   147d2:	7d 01       	movw	r14, r26
   147d4:	0f 5f       	subi	r16, 0xFF	; 255
   147d6:	1f 4f       	sbci	r17, 0xFF	; 255
   147d8:	06 3b       	cpi	r16, 0xB6	; 182
   147da:	11 05       	cpc	r17, r1
   147dc:	a9 f7       	brne	.-22     	; 0x147c8 <setup+0xf82>
   147de:	4e ec       	ldi	r20, 0xCE	; 206
   147e0:	5b e0       	ldi	r21, 0x0B	; 11
   147e2:	26 e0       	ldi	r18, 0x06	; 6
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3668
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
   147e4:	60 e2       	ldi	r22, 0x20	; 32
   147e6:	7e e4       	ldi	r23, 0x4E	; 78
load_setup_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:35
   147e8:	90 e0       	ldi	r25, 0x00	; 0
   147ea:	80 e0       	ldi	r24, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3668
   147ec:	fc 01       	movw	r30, r24
   147ee:	ee 0f       	add	r30, r30
   147f0:	ff 1f       	adc	r31, r31
   147f2:	e4 0f       	add	r30, r20
   147f4:	f5 1f       	adc	r31, r21
   147f6:	70 87       	std	Z+8, r23	; 0x08
   147f8:	67 83       	std	Z+7, r22	; 0x07
   147fa:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3667
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
   147fc:	8a 30       	cpi	r24, 0x0A	; 10
   147fe:	91 05       	cpc	r25, r1
   14800:	a9 f7       	brne	.-22     	; 0x147ec <setup+0xfa6>
   14802:	21 50       	subi	r18, 0x01	; 1
   14804:	42 5e       	subi	r20, 0xE2	; 226
   14806:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3666
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   14808:	21 11       	cpse	r18, r1
   1480a:	ee cf       	rjmp	.-36     	; 0x147e8 <setup+0xfa2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3671
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
   1480c:	10 92 88 0b 	sts	0x0B88, r1	; 0x800b88 <last_output_update>
   14810:	10 92 89 0b 	sts	0x0B89, r1	; 0x800b89 <last_output_update+0x1>
   14814:	10 92 8a 0b 	sts	0x0B8A, r1	; 0x800b8a <last_output_update+0x2>
   14818:	10 92 8b 0b 	sts	0x0B8B, r1	; 0x800b8b <last_output_update+0x3>
   1481c:	10 92 8c 0b 	sts	0x0B8C, r1	; 0x800b8c <last_output_update+0x4>
   14820:	b7 e6       	ldi	r27, 0x67	; 103
   14822:	cb 2e       	mov	r12, r27
   14824:	d1 2c       	mov	r13, r1
   14826:	e1 2c       	mov	r14, r1
   14828:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3673

      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1482a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3675
      {
        remote_tds_set_data(idx, 0);
   1482c:	70 e0       	ldi	r23, 0x00	; 0
   1482e:	60 e0       	ldi	r22, 0x00	; 0
   14830:	81 2f       	mov	r24, r17
   14832:	0e 94 fe 49 	call	0x93fc	; 0x93fc <remote_tds_set_data(unsigned char, int)>
remote_tds_set_type():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1913
///
void remote_tds_set_type(uint8_t idx, uint8_t type)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_type + (ram_remote_tds_store_size * idx), type);
   14836:	4f ef       	ldi	r20, 0xFF	; 255
   14838:	c7 01       	movw	r24, r14
   1483a:	b6 01       	movw	r22, r12
   1483c:	0e 94 f0 ad 	call	0x15be0	; 0x15be0 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
remote_tds_set_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1958
}
uint8_t remote_tds_set_last_update(uint8_t idx, uint8_t value)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), value);
   14840:	c7 01       	movw	r24, r14
   14842:	b6 01       	movw	r22, r12
   14844:	61 50       	subi	r22, 0x01	; 1
   14846:	71 09       	sbc	r23, r1
   14848:	81 09       	sbc	r24, r1
   1484a:	91 09       	sbc	r25, r1
   1484c:	4f ef       	ldi	r20, 0xFF	; 255
   1484e:	0e 94 f0 ad 	call	0x15be0	; 0x15be0 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3673
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;

      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14852:	1f 5f       	subi	r17, 0xFF	; 255
   14854:	b4 e0       	ldi	r27, 0x04	; 4
   14856:	cb 0e       	add	r12, r27
   14858:	d1 1c       	adc	r13, r1
   1485a:	e1 1c       	adc	r14, r1
   1485c:	f1 1c       	adc	r15, r1
   1485e:	1a 30       	cpi	r17, 0x0A	; 10
   14860:	29 f7       	brne	.-54     	; 0x1482c <setup+0xfe6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3462
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
   14862:	c8 5c       	subi	r28, 0xC8	; 200
   14864:	de 4f       	sbci	r29, 0xFE	; 254
   14866:	e8 81       	ld	r30, Y
   14868:	c8 53       	subi	r28, 0x38	; 56
   1486a:	d1 40       	sbci	r29, 0x01	; 1
   1486c:	ef 5f       	subi	r30, 0xFF	; 255
   1486e:	c8 5c       	subi	r28, 0xC8	; 200
   14870:	de 4f       	sbci	r29, 0xFE	; 254
   14872:	e8 83       	st	Y, r30
   14874:	c8 53       	subi	r28, 0x38	; 56
   14876:	d1 40       	sbci	r29, 0x01	; 1
   14878:	c3 5c       	subi	r28, 0xC3	; 195
   1487a:	de 4f       	sbci	r29, 0xFE	; 254
   1487c:	88 81       	ld	r24, Y
   1487e:	99 81       	ldd	r25, Y+1	; 0x01
   14880:	cd 53       	subi	r28, 0x3D	; 61
   14882:	d1 40       	sbci	r29, 0x01	; 1
   14884:	0f 96       	adiw	r24, 0x0f	; 15
   14886:	c3 5c       	subi	r28, 0xC3	; 195
   14888:	de 4f       	sbci	r29, 0xFE	; 254
   1488a:	99 83       	std	Y+1, r25	; 0x01
   1488c:	88 83       	st	Y, r24
   1488e:	cd 53       	subi	r28, 0x3D	; 61
   14890:	d1 40       	sbci	r29, 0x01	; 1
   14892:	e0 31       	cpi	r30, 0x10	; 16
   14894:	09 f0       	breq	.+2      	; 0x14898 <setup+0x1052>
   14896:	c3 c9       	rjmp	.-3194   	; 0x13c1e <setup+0x3d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3875
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
   14898:	64 ef       	ldi	r22, 0xF4	; 244
   1489a:	71 e0       	ldi	r23, 0x01	; 1
   1489c:	80 e0       	ldi	r24, 0x00	; 0
   1489e:	90 e0       	ldi	r25, 0x00	; 0
   148a0:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3876
  MenuPrepareStyle();
   148a4:	0e 94 8b 9b 	call	0x13716	; 0x13716 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3877
  draw_menu(true, 0, 0, 0);
   148a8:	50 e0       	ldi	r21, 0x00	; 0
   148aa:	40 e0       	ldi	r20, 0x00	; 0
   148ac:	70 e0       	ldi	r23, 0x00	; 0
   148ae:	60 e0       	ldi	r22, 0x00	; 0
   148b0:	81 e0       	ldi	r24, 0x01	; 1
   148b2:	0e 94 bc b4 	call	0x16978	; 0x16978 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3878
  a2d_run_now = 1;
   148b6:	81 e0       	ldi	r24, 0x01	; 1
   148b8:	80 93 8b 0c 	sts	0x0C8B, r24	; 0x800c8b <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3880

  milis_10s = millis();
   148bc:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   148c0:	60 93 ab 0c 	sts	0x0CAB, r22	; 0x800cab <milis_10s>
   148c4:	70 93 ac 0c 	sts	0x0CAC, r23	; 0x800cac <milis_10s+0x1>
   148c8:	80 93 ad 0c 	sts	0x0CAD, r24	; 0x800cad <milis_10s+0x2>
   148cc:	90 93 ae 0c 	sts	0x0CAE, r25	; 0x800cae <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3881
  milis_1s = millis();
   148d0:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   148d4:	60 93 9c 0c 	sts	0x0C9C, r22	; 0x800c9c <milis_1s>
   148d8:	70 93 9d 0c 	sts	0x0C9D, r23	; 0x800c9d <milis_1s+0x1>
   148dc:	80 93 9e 0c 	sts	0x0C9E, r24	; 0x800c9e <milis_1s+0x2>
   148e0:	90 93 9f 0c 	sts	0x0C9F, r25	; 0x800c9f <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3882
  milis_05s = millis();
   148e4:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   148e8:	60 93 92 0c 	sts	0x0C92, r22	; 0x800c92 <milis_05s>
   148ec:	70 93 93 0c 	sts	0x0C93, r23	; 0x800c93 <milis_05s+0x1>
   148f0:	80 93 94 0c 	sts	0x0C94, r24	; 0x800c94 <milis_05s+0x2>
   148f4:	90 93 95 0c 	sts	0x0C95, r25	; 0x800c95 <milis_05s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3883
  milis_005s = millis();
   148f8:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   148fc:	60 93 8c 0c 	sts	0x0C8C, r22	; 0x800c8c <milis_005s>
   14900:	70 93 8d 0c 	sts	0x0C8D, r23	; 0x800c8d <milis_005s+0x1>
   14904:	80 93 8e 0c 	sts	0x0C8E, r24	; 0x800c8e <milis_005s+0x2>
   14908:	90 93 8f 0c 	sts	0x0C8F, r25	; 0x800c8f <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3885

}
   1490c:	c0 5c       	subi	r28, 0xC0	; 192
   1490e:	de 4f       	sbci	r29, 0xFE	; 254
   14910:	0f b6       	in	r0, 0x3f	; 63
   14912:	f8 94       	cli
   14914:	de bf       	out	0x3e, r29	; 62
   14916:	0f be       	out	0x3f, r0	; 63
   14918:	cd bf       	out	0x3d, r28	; 61
   1491a:	df 91       	pop	r29
   1491c:	cf 91       	pop	r28
   1491e:	1f 91       	pop	r17
   14920:	0f 91       	pop	r16
   14922:	ff 90       	pop	r15
   14924:	ef 90       	pop	r14
   14926:	df 90       	pop	r13
   14928:	cf 90       	pop	r12
   1492a:	bf 90       	pop	r11
   1492c:	af 90       	pop	r10
   1492e:	9f 90       	pop	r9
   14930:	8f 90       	pop	r8
   14932:	7f 90       	pop	r7
   14934:	6f 90       	pop	r6
   14936:	5f 90       	pop	r5
   14938:	4f 90       	pop	r4
   1493a:	3f 90       	pop	r3
   1493c:	2f 90       	pop	r2
   1493e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3684
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
   14940:	6d e0       	ldi	r22, 0x0D	; 13
   14942:	70 e7       	ldi	r23, 0x70	; 112
   14944:	ce 01       	movw	r24, r28
   14946:	88 5b       	subi	r24, 0xB8	; 184
   14948:	9f 4f       	sbci	r25, 0xFF	; 255
   1494a:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3685
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1494e:	ee 24       	eor	r14, r14
   14950:	ea 94       	dec	r14
   14952:	fe 2c       	mov	r15, r14
   14954:	00 ee       	ldi	r16, 0xE0	; 224
   14956:	17 e0       	ldi	r17, 0x07	; 7
   14958:	21 e0       	ldi	r18, 0x01	; 1
   1495a:	4e e6       	ldi	r20, 0x6E	; 110
   1495c:	50 e0       	ldi	r21, 0x00	; 0
   1495e:	6e e1       	ldi	r22, 0x1E	; 30
   14960:	70 e0       	ldi	r23, 0x00	; 0
   14962:	ce 01       	movw	r24, r28
   14964:	88 5b       	subi	r24, 0xB8	; 184
   14966:	9f 4f       	sbci	r25, 0xFF	; 255
   14968:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   1496c:	20 91 cd 0f 	lds	r18, 0x0FCD	; 0x800fcd <my_lcd+0x14>
   14970:	30 91 ce 0f 	lds	r19, 0x0FCE	; 0x800fce <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
   14974:	40 91 cb 0f 	lds	r20, 0x0FCB	; 0x800fcb <my_lcd+0x12>
   14978:	50 91 cc 0f 	lds	r21, 0x0FCC	; 0x800fcc <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
   1497c:	90 91 cf 0f 	lds	r25, 0x0FCF	; 0x800fcf <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:93
  return onoff_mode;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
   14980:	e0 91 ad 0f 	lds	r30, 0x0FAD	; 0x800fad <my_touch+0x17>
   14984:	f0 91 ae 0f 	lds	r31, 0x0FAE	; 0x800fae <my_touch+0x18>
   14988:	80 81       	ld	r24, Z
   1498a:	60 91 b6 0f 	lds	r22, 0x0FB6	; 0x800fb6 <my_touch+0x20>
   1498e:	86 2b       	or	r24, r22
   14990:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:94
	TCLK_HIGH; 
   14992:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   14996:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   1499a:	80 81       	ld	r24, Z
   1499c:	60 91 b4 0f 	lds	r22, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   149a0:	86 2b       	or	r24, r22
   149a2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:95
	TCS_HIGH;
   149a4:	e0 91 a7 0f 	lds	r30, 0x0FA7	; 0x800fa7 <my_touch+0x11>
   149a8:	f0 91 a8 0f 	lds	r31, 0x0FA8	; 0x800fa8 <my_touch+0x12>
   149ac:	80 81       	ld	r24, Z
   149ae:	60 91 b3 0f 	lds	r22, 0x0FB3	; 0x800fb3 <my_touch+0x1d>
   149b2:	86 2b       	or	r24, r22
   149b4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:96
	SDCS_HIGH;
   149b6:	e0 91 b1 0f 	lds	r30, 0x0FB1	; 0x800fb1 <my_touch+0x1b>
   149ba:	f0 91 b2 0f 	lds	r31, 0x0FB2	; 0x800fb2 <my_touch+0x1c>
   149be:	80 81       	ld	r24, Z
   149c0:	60 91 b8 0f 	lds	r22, 0x0FB8	; 0x800fb8 <my_touch+0x22>
   149c4:	86 2b       	or	r24, r22
   149c6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:97
	wid = w;
   149c8:	50 93 9f 0f 	sts	0x0F9F, r21	; 0x800f9f <my_touch+0x9>
   149cc:	40 93 9e 0f 	sts	0x0F9E, r20	; 0x800f9e <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:98
	heig = h;	
   149d0:	30 93 a1 0f 	sts	0x0FA1, r19	; 0x800fa1 <my_touch+0xb>
   149d4:	20 93 a0 0f 	sts	0x0FA0, r18	; 0x800fa0 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:420
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
   149d8:	90 93 a4 0f 	sts	0x0FA4, r25	; 0x800fa4 <my_touch+0xe>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:100
	TCS_HIGH;
	SDCS_HIGH;
	wid = w;
	heig = h;	
	LCD_Set_Rotation(r);
	TP_SetBacklight(10);
   149dc:	8a e0       	ldi	r24, 0x0A	; 10
   149de:	0e 94 f1 ac 	call	0x159e2	; 0x159e2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
TP_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:410
	return touch_statue&TP_PRES_DOWN;
}

void LCDWIKI_TOUCH::TP_Set_Rotation(uint8_t val)
{
	touch_rotation = val;
   149e2:	83 e0       	ldi	r24, 0x03	; 3
   149e4:	80 93 a3 0f 	sts	0x0FA3, r24	; 0x800fa3 <my_touch+0xd>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3688
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
      my_touch.TP_Set_Rotation(3);
      my_touch.TP_SetOnOff(LED_ON);
   149e8:	81 e0       	ldi	r24, 0x01	; 1
   149ea:	0e 94 7a c9 	call	0x192f4	; 0x192f4 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.85]>
   149ee:	1b e0       	ldi	r17, 0x0B	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3691
      for (uint8_t i = 1; i < 8; i++)
      {
        digitalWrite(LED, LOW);
   149f0:	60 e0       	ldi	r22, 0x00	; 0
   149f2:	88 e0       	ldi	r24, 0x08	; 8
   149f4:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3692
        my_touch.TP_SetBacklight(i * 11);
   149f8:	81 2f       	mov	r24, r17
   149fa:	0e 94 f1 ac 	call	0x159e2	; 0x159e2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3693
        delay(100);
   149fe:	64 e6       	ldi	r22, 0x64	; 100
   14a00:	70 e0       	ldi	r23, 0x00	; 0
   14a02:	80 e0       	ldi	r24, 0x00	; 0
   14a04:	90 e0       	ldi	r25, 0x00	; 0
   14a06:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3694
        digitalWrite(LED, HIGH);
   14a0a:	61 e0       	ldi	r22, 0x01	; 1
   14a0c:	88 e0       	ldi	r24, 0x08	; 8
   14a0e:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3695
        delay(100);
   14a12:	64 e6       	ldi	r22, 0x64	; 100
   14a14:	70 e0       	ldi	r23, 0x00	; 0
   14a16:	80 e0       	ldi	r24, 0x00	; 0
   14a18:	90 e0       	ldi	r25, 0x00	; 0
   14a1a:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
   14a1e:	15 5f       	subi	r17, 0xF5	; 245
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3689
      strcpy_P(str1, text_touchscreen);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
      my_touch.TP_Set_Rotation(3);
      my_touch.TP_SetOnOff(LED_ON);
      for (uint8_t i = 1; i < 8; i++)
   14a20:	18 35       	cpi	r17, 0x58	; 88
   14a22:	31 f7       	brne	.-52     	; 0x149f0 <setup+0x11aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3697
        my_touch.TP_SetBacklight(i * 11);
        delay(100);
        digitalWrite(LED, HIGH);
        delay(100);
      }
      display_auto_shutdown = EEPROM.read(my_display_auto_shutdown);
   14a24:	80 e6       	ldi	r24, 0x60	; 96
   14a26:	90 e0       	ldi	r25, 0x00	; 0
   14a28:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   14a2c:	80 93 97 0c 	sts	0x0C97, r24	; 0x800c97 <display_auto_shutdown>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3698
      brigthness_display_values = EEPROM.read(my_brightness_values);
   14a30:	8e e5       	ldi	r24, 0x5E	; 94
   14a32:	90 e0       	ldi	r25, 0x00	; 0
   14a34:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   14a38:	18 2f       	mov	r17, r24
   14a3a:	80 93 87 0b 	sts	0x0B87, r24	; 0x800b87 <brigthness_display_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3699
      brigthness_display_mode = EEPROM.read(my_brightness_mode);
   14a3e:	8f e5       	ldi	r24, 0x5F	; 95
   14a40:	90 e0       	ldi	r25, 0x00	; 0
   14a42:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   14a46:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3700
      my_touch.TP_SetBacklight(brigthness_display_values * 2);
   14a4a:	81 2f       	mov	r24, r17
   14a4c:	88 0f       	add	r24, r24
   14a4e:	0e 94 f1 ac 	call	0x159e2	; 0x159e2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
   14a52:	07 cf       	rjmp	.-498    	; 0x14862 <setup+0x101c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3725
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
   14a54:	6a e5       	ldi	r22, 0x5A	; 90
   14a56:	71 e7       	ldi	r23, 0x71	; 113
   14a58:	ce 01       	movw	r24, r28
   14a5a:	88 5b       	subi	r24, 0xB8	; 184
   14a5c:	9f 4f       	sbci	r25, 0xFF	; 255
   14a5e:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3726
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   14a62:	ee 24       	eor	r14, r14
   14a64:	ea 94       	dec	r14
   14a66:	fe 2c       	mov	r15, r14
   14a68:	00 e0       	ldi	r16, 0x00	; 0
   14a6a:	18 ef       	ldi	r17, 0xF8	; 248
   14a6c:	21 e0       	ldi	r18, 0x01	; 1
   14a6e:	48 e7       	ldi	r20, 0x78	; 120
   14a70:	50 e0       	ldi	r21, 0x00	; 0
   14a72:	60 ea       	ldi	r22, 0xA0	; 160
   14a74:	70 e0       	ldi	r23, 0x00	; 0
   14a76:	ce 01       	movw	r24, r28
   14a78:	88 5b       	subi	r24, 0xB8	; 184
   14a7a:	9f 4f       	sbci	r25, 0xFF	; 255
   14a7c:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3727
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
   14a80:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3870
      }
      else
      {
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_RTC);
   14a82:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <selftest_set_0(unsigned char)>
   14a86:	ed ce       	rjmp	.-550    	; 0x14862 <setup+0x101c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3732
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
   14a88:	c8 5c       	subi	r28, 0xC8	; 200
   14a8a:	de 4f       	sbci	r29, 0xFE	; 254
   14a8c:	e8 81       	ld	r30, Y
   14a8e:	c8 53       	subi	r28, 0x38	; 56
   14a90:	d1 40       	sbci	r29, 0x01	; 1
   14a92:	e8 30       	cpi	r30, 0x08	; 8
   14a94:	09 f0       	breq	.+2      	; 0x14a98 <setup+0x1252>
   14a96:	3f c0       	rjmp	.+126    	; 0x14b16 <setup+0x12d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3734
    {
      strcpy_P(str1, text_onewire_hledam);
   14a98:	61 ef       	ldi	r22, 0xF1	; 241
   14a9a:	7f e6       	ldi	r23, 0x6F	; 111
   14a9c:	ce 01       	movw	r24, r28
   14a9e:	88 5b       	subi	r24, 0xB8	; 184
   14aa0:	9f 4f       	sbci	r25, 0xFF	; 255
   14aa2:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3735
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14aa6:	ee 24       	eor	r14, r14
   14aa8:	ea 94       	dec	r14
   14aaa:	fe 2c       	mov	r15, r14
   14aac:	00 ee       	ldi	r16, 0xE0	; 224
   14aae:	17 e0       	ldi	r17, 0x07	; 7
   14ab0:	21 e0       	ldi	r18, 0x01	; 1
   14ab2:	42 e8       	ldi	r20, 0x82	; 130
   14ab4:	50 e0       	ldi	r21, 0x00	; 0
   14ab6:	6e e1       	ldi	r22, 0x1E	; 30
   14ab8:	70 e0       	ldi	r23, 0x00	; 0
   14aba:	ce 01       	movw	r24, r28
   14abc:	88 5b       	subi	r24, 0xB8	; 184
   14abe:	9f 4f       	sbci	r25, 0xFF	; 255
   14ac0:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3736
      Global_HWwirenum = 0;
   14ac4:	10 92 00 0d 	sts	0x0D00, r1	; 0x800d00 <Global_HWwirenum>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3737
      one_hw_search_device(0);
   14ac8:	0e 94 15 b0 	call	0x1602a	; 0x1602a <one_hw_search_device(unsigned char) [clone .constprop.184]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3738
      tds_update_associate();
   14acc:	0e 94 f4 6a 	call	0xd5e8	; 0xd5e8 <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3739
      strcpy (str1, "Nalezeno: ");
   14ad0:	6b e3       	ldi	r22, 0x3B	; 59
   14ad2:	77 e0       	ldi	r23, 0x07	; 7
   14ad4:	ce 01       	movw	r24, r28
   14ad6:	88 5b       	subi	r24, 0xB8	; 184
   14ad8:	9f 4f       	sbci	r25, 0xFF	; 255
   14ada:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3740
      itoa(Global_HWwirenum, str2, 10);
   14ade:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   14ae2:	4a e0       	ldi	r20, 0x0A	; 10
   14ae4:	be 01       	movw	r22, r28
   14ae6:	68 57       	subi	r22, 0x78	; 120
   14ae8:	7f 4f       	sbci	r23, 0xFF	; 255
   14aea:	90 e0       	ldi	r25, 0x00	; 0
   14aec:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3741
      strcat(str1, str2);
   14af0:	be 01       	movw	r22, r28
   14af2:	68 57       	subi	r22, 0x78	; 120
   14af4:	7f 4f       	sbci	r23, 0xFF	; 255
   14af6:	ce 01       	movw	r24, r28
   14af8:	88 5b       	subi	r24, 0xB8	; 184
   14afa:	9f 4f       	sbci	r25, 0xFF	; 255
   14afc:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14b00:	21 e0       	ldi	r18, 0x01	; 1
   14b02:	42 e8       	ldi	r20, 0x82	; 130
   14b04:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3795
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14b06:	60 ea       	ldi	r22, 0xA0	; 160
   14b08:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3803
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    {
      strcpy_P(str1, text_rest_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14b0a:	ce 01       	movw	r24, r28
   14b0c:	88 5b       	subi	r24, 0xB8	; 184
   14b0e:	9f 4f       	sbci	r25, 0xFF	; 255
   14b10:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   14b14:	a6 ce       	rjmp	.-692    	; 0x14862 <setup+0x101c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3746
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
   14b16:	c8 5c       	subi	r28, 0xC8	; 200
   14b18:	de 4f       	sbci	r29, 0xFE	; 254
   14b1a:	f8 81       	ld	r31, Y
   14b1c:	c8 53       	subi	r28, 0x38	; 56
   14b1e:	d1 40       	sbci	r29, 0x01	; 1
   14b20:	f9 30       	cpi	r31, 0x09	; 9
   14b22:	09 f0       	breq	.+2      	; 0x14b26 <setup+0x12e0>
   14b24:	37 c3       	rjmp	.+1646   	; 0x15194 <setup+0x194e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3748
    {
      digitalWrite(ETH_RST, HIGH);
   14b26:	61 e0       	ldi	r22, 0x01	; 1
   14b28:	86 e0       	ldi	r24, 0x06	; 6
   14b2a:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3749
      delay(10);
   14b2e:	6a e0       	ldi	r22, 0x0A	; 10
   14b30:	70 e0       	ldi	r23, 0x00	; 0
   14b32:	80 e0       	ldi	r24, 0x00	; 0
   14b34:	90 e0       	ldi	r25, 0x00	; 0
   14b36:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3750
      digitalWrite(ETH_RST, LOW);
   14b3a:	60 e0       	ldi	r22, 0x00	; 0
   14b3c:	86 e0       	ldi	r24, 0x06	; 6
   14b3e:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3751
      delay(10);
   14b42:	6a e0       	ldi	r22, 0x0A	; 10
   14b44:	70 e0       	ldi	r23, 0x00	; 0
   14b46:	80 e0       	ldi	r24, 0x00	; 0
   14b48:	90 e0       	ldi	r25, 0x00	; 0
   14b4a:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3752
      digitalWrite(ETH_RST, HIGH);
   14b4e:	61 e0       	ldi	r22, 0x01	; 1
   14b50:	86 e0       	ldi	r24, 0x06	; 6
   14b52:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3753
      delay(100);
   14b56:	64 e6       	ldi	r22, 0x64	; 100
   14b58:	70 e0       	ldi	r23, 0x00	; 0
   14b5a:	80 e0       	ldi	r24, 0x00	; 0
   14b5c:	90 e0       	ldi	r25, 0x00	; 0
   14b5e:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
   14b62:	8f e0       	ldi	r24, 0x0F	; 15
   14b64:	80 93 10 0e 	sts	0x0E10, r24	; 0x800e10 <Ethernet+0xc>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3755
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
   14b68:	63 e2       	ldi	r22, 0x23	; 35
   14b6a:	7e e0       	ldi	r23, 0x0E	; 14
   14b6c:	ce 01       	movw	r24, r28
   14b6e:	8e 5c       	subi	r24, 0xCE	; 206
   14b70:	9e 4f       	sbci	r25, 0xFE	; 254
   14b72:	0e 94 d8 4c 	call	0x99b0	; 0x99b0 <IPAddress::IPAddress(unsigned char const*)>
   14b76:	6b e2       	ldi	r22, 0x2B	; 43
   14b78:	7e e0       	ldi	r23, 0x0E	; 14
   14b7a:	ce 01       	movw	r24, r28
   14b7c:	84 5d       	subi	r24, 0xD4	; 212
   14b7e:	9e 4f       	sbci	r25, 0xFE	; 254
   14b80:	0e 94 d8 4c 	call	0x99b0	; 0x99b0 <IPAddress::IPAddress(unsigned char const*)>
   14b84:	67 e2       	ldi	r22, 0x27	; 39
   14b86:	7e e0       	ldi	r23, 0x0E	; 14
   14b88:	ce 01       	movw	r24, r28
   14b8a:	8a 5d       	subi	r24, 0xDA	; 218
   14b8c:	9e 4f       	sbci	r25, 0xFE	; 254
   14b8e:	0e 94 d8 4c 	call	0x99b0	; 0x99b0 <IPAddress::IPAddress(unsigned char const*)>
   14b92:	6f e1       	ldi	r22, 0x1F	; 31
   14b94:	7e e0       	ldi	r23, 0x0E	; 14
   14b96:	c3 01       	movw	r24, r6
   14b98:	0e 94 d8 4c 	call	0x99b0	; 0x99b0 <IPAddress::IPAddress(unsigned char const*)>
   14b9c:	9e 01       	movw	r18, r28
   14b9e:	2e 5c       	subi	r18, 0xCE	; 206
   14ba0:	3e 4f       	sbci	r19, 0xFE	; 254
   14ba2:	ae 01       	movw	r20, r28
   14ba4:	44 5d       	subi	r20, 0xD4	; 212
   14ba6:	5e 4f       	sbci	r21, 0xFE	; 254
   14ba8:	be 01       	movw	r22, r28
   14baa:	6a 5d       	subi	r22, 0xDA	; 218
   14bac:	7e 4f       	sbci	r23, 0xFE	; 254
   14bae:	c3 01       	movw	r24, r6
   14bb0:	0e 94 f7 c8 	call	0x191ee	; 0x191ee <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.86]>
writeRCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:242
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0019);    // Timeout address
  __GP_REGISTER8 (RCR,    0x001B);    // Retry count
   14bb4:	42 e0       	ldi	r20, 0x02	; 2
   14bb6:	64 e0       	ldi	r22, 0x04	; 4
   14bb8:	8b e1       	ldi	r24, 0x1B	; 27
   14bba:	90 e0       	ldi	r25, 0x00	; 0
   14bbc:	0e 94 72 78 	call	0xf0e4	; 0xf0e4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
writeRTR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:241
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0019);    // Timeout address
   14bc0:	42 e0       	ldi	r20, 0x02	; 2
   14bc2:	64 e0       	ldi	r22, 0x04	; 4
   14bc4:	89 e1       	ldi	r24, 0x19	; 25
   14bc6:	90 e0       	ldi	r25, 0x00	; 0
   14bc8:	0e 94 72 78 	call	0xf0e4	; 0xf0e4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   14bcc:	48 e5       	ldi	r20, 0x58	; 88
   14bce:	64 e0       	ldi	r22, 0x04	; 4
   14bd0:	8a e1       	ldi	r24, 0x1A	; 26
   14bd2:	90 e0       	ldi	r25, 0x00	; 0
   14bd4:	0e 94 72 78 	call	0xf0e4	; 0xf0e4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3758
      w5500.setRetransmissionCount(2);
      w5500.setRetransmissionTime(600);
      strcpy_P(str1, text_ethernet_rozhrani);
   14bd8:	6f ed       	ldi	r22, 0xDF	; 223
   14bda:	7f e6       	ldi	r23, 0x6F	; 111
   14bdc:	ce 01       	movw	r24, r28
   14bde:	88 5b       	subi	r24, 0xB8	; 184
   14be0:	9f 4f       	sbci	r25, 0xFF	; 255
   14be2:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3759
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14be6:	ee 24       	eor	r14, r14
   14be8:	ea 94       	dec	r14
   14bea:	fe 2c       	mov	r15, r14
   14bec:	00 ee       	ldi	r16, 0xE0	; 224
   14bee:	17 e0       	ldi	r17, 0x07	; 7
   14bf0:	21 e0       	ldi	r18, 0x01	; 1
   14bf2:	4c e8       	ldi	r20, 0x8C	; 140
   14bf4:	50 e0       	ldi	r21, 0x00	; 0
   14bf6:	6e e1       	ldi	r22, 0x1E	; 30
   14bf8:	70 e0       	ldi	r23, 0x00	; 0
   14bfa:	ce 01       	movw	r24, r28
   14bfc:	88 5b       	subi	r24, 0xB8	; 184
   14bfe:	9f 4f       	sbci	r25, 0xFF	; 255
   14c00:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3760
      delay(100);
   14c04:	64 e6       	ldi	r22, 0x64	; 100
   14c06:	70 e0       	ldi	r23, 0x00	; 0
   14c08:	80 e0       	ldi	r24, 0x00	; 0
   14c0a:	90 e0       	ldi	r25, 0x00	; 0
   14c0c:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3761
      http_server.begin();
   14c10:	89 e2       	ldi	r24, 0x29	; 41
   14c12:	90 e1       	ldi	r25, 0x10	; 16
   14c14:	0e 94 16 7f 	call	0xfe2c	; 0xfe2c <EthernetServer::begin()>
   14c18:	24 ce       	rjmp	.-952    	; 0x14862 <setup+0x101c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3784
        {
          selftest_clear_0(SELFTEST_MQTT_LINK);
          break;
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
   14c1a:	85 e0       	ldi	r24, 0x05	; 5
   14c1c:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <selftest_set_0(unsigned char)>
   14c20:	03 c3       	rjmp	.+1542   	; 0x15228 <setup+0x19e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3794
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
   14c22:	6b e3       	ldi	r22, 0x3B	; 59
   14c24:	70 e7       	ldi	r23, 0x70	; 112
   14c26:	ce 01       	movw	r24, r28
   14c28:	88 5b       	subi	r24, 0xB8	; 184
   14c2a:	9f 4f       	sbci	r25, 0xFF	; 255
   14c2c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3795
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14c30:	ee 24       	eor	r14, r14
   14c32:	ea 94       	dec	r14
   14c34:	fe 2c       	mov	r15, r14
   14c36:	00 ee       	ldi	r16, 0xE0	; 224
   14c38:	17 e0       	ldi	r17, 0x07	; 7
   14c3a:	2c c3       	rjmp	.+1624   	; 0x15294 <setup+0x1a4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3800
      }
    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
   14c3c:	c8 5c       	subi	r28, 0xC8	; 200
   14c3e:	de 4f       	sbci	r29, 0xFE	; 254
   14c40:	88 81       	ld	r24, Y
   14c42:	c8 53       	subi	r28, 0x38	; 56
   14c44:	d1 40       	sbci	r29, 0x01	; 1
   14c46:	8b 30       	cpi	r24, 0x0B	; 11
   14c48:	81 f4       	brne	.+32     	; 0x14c6a <setup+0x1424>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3802
    {
      strcpy_P(str1, text_rest_rozhrani);
   14c4a:	60 eb       	ldi	r22, 0xB0	; 176
   14c4c:	7f e6       	ldi	r23, 0x6F	; 111
   14c4e:	ce 01       	movw	r24, r28
   14c50:	88 5b       	subi	r24, 0xB8	; 184
   14c52:	9f 4f       	sbci	r25, 0xFF	; 255
   14c54:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3803
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14c58:	ee 24       	eor	r14, r14
   14c5a:	ea 94       	dec	r14
   14c5c:	fe 2c       	mov	r15, r14
   14c5e:	00 ee       	ldi	r16, 0xE0	; 224
   14c60:	17 e0       	ldi	r17, 0x07	; 7
   14c62:	21 e0       	ldi	r18, 0x01	; 1
   14c64:	40 ea       	ldi	r20, 0xA0	; 160
   14c66:	50 e0       	ldi	r21, 0x00	; 0
   14c68:	d8 cc       	rjmp	.-1616   	; 0x1461a <setup+0xdd4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3807
    }
    ///
    /// inicializace nrf
    if (init == 12)
   14c6a:	c8 5c       	subi	r28, 0xC8	; 200
   14c6c:	de 4f       	sbci	r29, 0xFE	; 254
   14c6e:	98 81       	ld	r25, Y
   14c70:	c8 53       	subi	r28, 0x38	; 56
   14c72:	d1 40       	sbci	r29, 0x01	; 1
   14c74:	9c 30       	cpi	r25, 0x0C	; 12
   14c76:	09 f0       	breq	.+2      	; 0x14c7a <setup+0x1434>
   14c78:	11 c3       	rjmp	.+1570   	; 0x1529c <setup+0x1a56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3809
    {
      strcpy_P(str1, text_nrf_rozhrani);
   14c7a:	63 ea       	ldi	r22, 0xA3	; 163
   14c7c:	7f e6       	ldi	r23, 0x6F	; 111
   14c7e:	ce 01       	movw	r24, r28
   14c80:	88 5b       	subi	r24, 0xB8	; 184
   14c82:	9f 4f       	sbci	r25, 0xFF	; 255
   14c84:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3810
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14c88:	ee 24       	eor	r14, r14
   14c8a:	ea 94       	dec	r14
   14c8c:	fe 2c       	mov	r15, r14
   14c8e:	00 ee       	ldi	r16, 0xE0	; 224
   14c90:	17 e0       	ldi	r17, 0x07	; 7
   14c92:	21 e0       	ldi	r18, 0x01	; 1
   14c94:	4a ea       	ldi	r20, 0xAA	; 170
   14c96:	50 e0       	ldi	r21, 0x00	; 0
   14c98:	6e e1       	ldi	r22, 0x1E	; 30
   14c9a:	70 e0       	ldi	r23, 0x00	; 0
   14c9c:	ce 01       	movw	r24, r28
   14c9e:	88 5b       	subi	r24, 0xB8	; 184
   14ca0:	9f 4f       	sbci	r25, 0xFF	; 255
   14ca2:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3811
      scan_rf_net_enable = 2;
   14ca6:	82 e0       	ldi	r24, 0x02	; 2
   14ca8:	80 93 af 0c 	sts	0x0CAF, r24	; 0x800caf <scan_rf_net_enable>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:631
	ce(LOW);
	csn(HIGH);
	delay(200);
  #else
    // Initialize pins
    if (ce_pin != csn_pin) pinMode(ce_pin,OUTPUT);  
   14cac:	80 91 11 10 	lds	r24, 0x1011	; 0x801011 <radio>
   14cb0:	90 91 12 10 	lds	r25, 0x1012	; 0x801012 <radio+0x1>
   14cb4:	20 91 13 10 	lds	r18, 0x1013	; 0x801013 <radio+0x2>
   14cb8:	30 91 14 10 	lds	r19, 0x1014	; 0x801014 <radio+0x3>
   14cbc:	82 17       	cp	r24, r18
   14cbe:	93 07       	cpc	r25, r19
   14cc0:	19 f0       	breq	.+6      	; 0x14cc8 <setup+0x1482>
   14cc2:	61 e0       	ldi	r22, 0x01	; 1
   14cc4:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/Arduino/libraries/RF24/RF24.cpp:634
  
    #if ! defined(LITTLEWIRE)
      if (ce_pin != csn_pin)
   14cc8:	80 91 13 10 	lds	r24, 0x1013	; 0x801013 <radio+0x2>
   14ccc:	90 91 14 10 	lds	r25, 0x1014	; 0x801014 <radio+0x3>
   14cd0:	20 91 11 10 	lds	r18, 0x1011	; 0x801011 <radio>
   14cd4:	30 91 12 10 	lds	r19, 0x1012	; 0x801012 <radio+0x1>
   14cd8:	28 17       	cp	r18, r24
   14cda:	39 07       	cpc	r19, r25
   14cdc:	19 f0       	breq	.+6      	; 0x14ce4 <setup+0x149e>
/home/saric/Arduino/libraries/RF24/RF24.cpp:636
    #endif
        pinMode(csn_pin,OUTPUT);
   14cde:	61 e0       	ldi	r22, 0x01	; 1
   14ce0:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
/home/saric/Arduino/libraries/RF24/RF24.cpp:638
    
    _SPI.begin();
   14ce4:	0e 94 e5 80 	call	0x101ca	; 0x101ca <SPIClass::begin()>
ce():
/home/saric/Arduino/libraries/RF24/RF24.cpp:80
/****************************************************************************/

void RF24::ce(bool level)
{
  //Allow for 3-pin use on ATTiny
  if (ce_pin != csn_pin) digitalWrite(ce_pin,level);
   14ce8:	80 91 11 10 	lds	r24, 0x1011	; 0x801011 <radio>
   14cec:	90 91 12 10 	lds	r25, 0x1012	; 0x801012 <radio+0x1>
   14cf0:	20 91 13 10 	lds	r18, 0x1013	; 0x801013 <radio+0x2>
   14cf4:	30 91 14 10 	lds	r19, 0x1014	; 0x801014 <radio+0x3>
   14cf8:	82 17       	cp	r24, r18
   14cfa:	93 07       	cpc	r25, r19
   14cfc:	19 f0       	breq	.+6      	; 0x14d04 <setup+0x14be>
   14cfe:	60 e0       	ldi	r22, 0x00	; 0
   14d00:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:640
    #endif
        pinMode(csn_pin,OUTPUT);
    
    _SPI.begin();
    ce(LOW);
  	csn(HIGH);
   14d04:	81 e0       	ldi	r24, 0x01	; 1
   14d06:	0e 94 fd c6 	call	0x18dfa	; 0x18dfa <RF24::csn(bool) [clone .constprop.111]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:652
  // This is actually only required following power up but some settling time also appears to
  // be required after resets too. For full coverage, we'll always assume the worst.
  // Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
  delay( 5 ) ;
   14d0a:	65 e0       	ldi	r22, 0x05	; 5
   14d0c:	70 e0       	ldi	r23, 0x00	; 0
   14d0e:	80 e0       	ldi	r24, 0x00	; 0
   14d10:	90 e0       	ldi	r25, 0x00	; 0
   14d12:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
/home/saric/Arduino/libraries/RF24/RF24.cpp:655

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0x0C ) ;
   14d16:	6c e0       	ldi	r22, 0x0C	; 12
   14d18:	80 e0       	ldi	r24, 0x00	; 0
   14d1a:	0e 94 17 c7 	call	0x18e2e	; 0x18e2e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
setRetries():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1588
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
   14d1e:	6f e5       	ldi	r22, 0x5F	; 95
   14d20:	84 e0       	ldi	r24, 0x04	; 4
   14d22:	0e 94 17 c7 	call	0x18e2e	; 0x18e2e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
setPALevel():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1437
/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{

  uint8_t setup = read_register(RF_SETUP) & 0xF8;
   14d26:	86 e0       	ldi	r24, 0x06	; 6
   14d28:	0e 94 2d c7 	call	0x18e5a	; 0x18e5a <RF24::read_register(unsigned char) [clone .constprop.107]>
   14d2c:	88 7f       	andi	r24, 0xF8	; 248
/home/saric/Arduino/libraries/RF24/RF24.cpp:1446
  }else{
	  level = (level << 1) + 1;	 		// Else set level as requested
  }


  write_register( RF_SETUP, setup |= level ) ;	// Write it to the chip
   14d2e:	68 2f       	mov	r22, r24
   14d30:	61 60       	ori	r22, 0x01	; 1
   14d32:	86 e0       	ldi	r24, 0x06	; 6
   14d34:	0e 94 17 c7 	call	0x18e2e	; 0x18e2e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
setDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1462
/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
   14d38:	86 e0       	ldi	r24, 0x06	; 6
   14d3a:	0e 94 2d c7 	call	0x18e5a	; 0x18e5a <RF24::read_register(unsigned char) [clone .constprop.107]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1465

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   14d3e:	87 7d       	andi	r24, 0xD7	; 215
/home/saric/Arduino/libraries/RF24/RF24.cpp:1476
  #endif
  if( speed == RF24_250KBPS )
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
   14d40:	18 2f       	mov	r17, r24
   14d42:	10 62       	ori	r17, 0x20	; 32
/home/saric/Arduino/libraries/RF24/RF24.cpp:1480
  #if !defined(F_CPU) || F_CPU > 20000000
    txDelay=450;
  #else //16Mhz Arduino
	txDelay=155;
   14d44:	8b e9       	ldi	r24, 0x9B	; 155
   14d46:	90 e0       	ldi	r25, 0x00	; 0
   14d48:	a0 e0       	ldi	r26, 0x00	; 0
   14d4a:	b0 e0       	ldi	r27, 0x00	; 0
   14d4c:	80 93 21 10 	sts	0x1021, r24	; 0x801021 <radio+0x10>
   14d50:	90 93 22 10 	sts	0x1022, r25	; 0x801022 <radio+0x11>
   14d54:	a0 93 23 10 	sts	0x1023, r26	; 0x801023 <radio+0x12>
   14d58:	b0 93 24 10 	sts	0x1024, r27	; 0x801024 <radio+0x13>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1497
      #else //16Mhz Arduino	  
	  txDelay=65;
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
   14d5c:	61 2f       	mov	r22, r17
   14d5e:	86 e0       	ldi	r24, 0x06	; 6
   14d60:	0e 94 17 c7 	call	0x18e2e	; 0x18e2e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1500

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
   14d64:	86 e0       	ldi	r24, 0x06	; 6
   14d66:	0e 94 2d c7 	call	0x18e5a	; 0x18e5a <RF24::read_register(unsigned char) [clone .constprop.107]>
   14d6a:	18 13       	cpse	r17, r24
   14d6c:	03 c0       	rjmp	.+6      	; 0x14d74 <setup+0x152e>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:669

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
  {
    p_variant = true ;
   14d6e:	81 e0       	ldi	r24, 0x01	; 1
   14d70:	80 93 17 10 	sts	0x1017, r24	; 0x801017 <radio+0x6>
/home/saric/Arduino/libraries/RF24/RF24.cpp:671
  }
  setup = read_register(RF_SETUP);
   14d74:	86 e0       	ldi	r24, 0x06	; 6
   14d76:	0e 94 2d c7 	call	0x18e5a	; 0x18e5a <RF24::read_register(unsigned char) [clone .constprop.107]>
setDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1462
/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
   14d7a:	86 e0       	ldi	r24, 0x06	; 6
   14d7c:	0e 94 2d c7 	call	0x18e5a	; 0x18e5a <RF24::read_register(unsigned char) [clone .constprop.107]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1470
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
  
  #if !defined(F_CPU) || F_CPU > 20000000
    txDelay=250;
  #else //16Mhz Arduino
    txDelay=85;
   14d80:	45 e5       	ldi	r20, 0x55	; 85
   14d82:	50 e0       	ldi	r21, 0x00	; 0
   14d84:	60 e0       	ldi	r22, 0x00	; 0
   14d86:	70 e0       	ldi	r23, 0x00	; 0
   14d88:	40 93 21 10 	sts	0x1021, r20	; 0x801021 <radio+0x10>
   14d8c:	50 93 22 10 	sts	0x1022, r21	; 0x801022 <radio+0x11>
   14d90:	60 93 23 10 	sts	0x1023, r22	; 0x801023 <radio+0x12>
   14d94:	70 93 24 10 	sts	0x1024, r23	; 0x801024 <radio+0x13>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1465
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   14d98:	68 2f       	mov	r22, r24
   14d9a:	67 7d       	andi	r22, 0xD7	; 215
/home/saric/Arduino/libraries/RF24/RF24.cpp:1497
      #else //16Mhz Arduino	  
	  txDelay=65;
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
   14d9c:	86 e0       	ldi	r24, 0x06	; 6
   14d9e:	0e 94 17 c7 	call	0x18e2e	; 0x18e2e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1500

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
   14da2:	86 e0       	ldi	r24, 0x06	; 6
   14da4:	0e 94 2d c7 	call	0x18e5a	; 0x18e5a <RF24::read_register(unsigned char) [clone .constprop.107]>
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   14da8:	80 e0       	ldi	r24, 0x00	; 0
   14daa:	0e 94 fd c6 	call	0x18dfa	; 0x18dfa <RF24::csn(bool) [clone .constprop.111]>
toggle_features():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1263
/****************************************************************************/

void RF24::toggle_features(void)
{
    beginTransaction();
	_SPI.transfer( ACTIVATE );
   14dae:	80 e5       	ldi	r24, 0x50	; 80
   14db0:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1264
    _SPI.transfer( 0x73 );
   14db4:	83 e7       	ldi	r24, 0x73	; 115
   14db6:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   14dba:	81 e0       	ldi	r24, 0x01	; 1
   14dbc:	0e 94 fd c6 	call	0x18dfa	; 0x18dfa <RF24::csn(bool) [clone .constprop.111]>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:686
  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
  write_register(FEATURE,0 );
   14dc0:	60 e0       	ldi	r22, 0x00	; 0
   14dc2:	8d e1       	ldi	r24, 0x1D	; 29
   14dc4:	0e 94 17 c7 	call	0x18e2e	; 0x18e2e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:687
  write_register(DYNPD,0);
   14dc8:	60 e0       	ldi	r22, 0x00	; 0
   14dca:	8c e1       	ldi	r24, 0x1C	; 28
   14dcc:	0e 94 17 c7 	call	0x18e2e	; 0x18e2e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:688
  dynamic_payloads_enabled = false;
   14dd0:	10 92 19 10 	sts	0x1019, r1	; 0x801019 <radio+0x8>
/home/saric/Arduino/libraries/RF24/RF24.cpp:692

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
   14dd4:	60 e7       	ldi	r22, 0x70	; 112
   14dd6:	87 e0       	ldi	r24, 0x07	; 7
   14dd8:	0e 94 17 c7 	call	0x18e2e	; 0x18e2e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
setChannel():
/home/saric/Arduino/libraries/RF24/RF24.cpp:458
/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
  const uint8_t max_channel = 125;
  write_register(RF_CH,rf24_min(channel,max_channel));
   14ddc:	6c e4       	ldi	r22, 0x4C	; 76
   14dde:	85 e0       	ldi	r24, 0x05	; 5
   14de0:	0e 94 17 c7 	call	0x18e2e	; 0x18e2e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
flush_rx():
/home/saric/Arduino/libraries/RF24/RF24.cpp:338

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
  return spiTrans( FLUSH_RX );
   14de4:	82 ee       	ldi	r24, 0xE2	; 226
   14de6:	0e 94 40 c7 	call	0x18e80	; 0x18e80 <RF24::spiTrans(unsigned char) [clone .constprop.105]>
flush_tx():
/home/saric/Arduino/libraries/RF24/RF24.cpp:345

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
  return spiTrans( FLUSH_TX );
   14dea:	81 ee       	ldi	r24, 0xE1	; 225
   14dec:	0e 94 40 c7 	call	0x18e80	; 0x18e80 <RF24::spiTrans(unsigned char) [clone .constprop.105]>
powerUp():
/home/saric/Arduino/libraries/RF24/RF24.cpp:798
/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
   uint8_t cfg = read_register(NRF_CONFIG);
   14df0:	80 e0       	ldi	r24, 0x00	; 0
   14df2:	0e 94 2d c7 	call	0x18e5a	; 0x18e5a <RF24::read_register(unsigned char) [clone .constprop.107]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:801

   // if not powered up then power up and wait for the radio to initialize
   if (!(cfg & _BV(PWR_UP))){
   14df6:	81 fd       	sbrc	r24, 1
   14df8:	0b c0       	rjmp	.+22     	; 0x14e10 <setup+0x15ca>
/home/saric/Arduino/libraries/RF24/RF24.cpp:802
      write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
   14dfa:	68 2f       	mov	r22, r24
   14dfc:	62 60       	ori	r22, 0x02	; 2
   14dfe:	80 e0       	ldi	r24, 0x00	; 0
   14e00:	0e 94 17 c7 	call	0x18e2e	; 0x18e2e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:807

      // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
	  // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
	  // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
      delay(5);
   14e04:	65 e0       	ldi	r22, 0x05	; 5
   14e06:	70 e0       	ldi	r23, 0x00	; 0
   14e08:	80 e0       	ldi	r24, 0x00	; 0
   14e0a:	90 e0       	ldi	r25, 0x00	; 0
   14e0c:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:707

  powerUp(); //Power up by default when begin() is called

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
   14e10:	80 e0       	ldi	r24, 0x00	; 0
   14e12:	0e 94 2d c7 	call	0x18e5a	; 0x18e5a <RF24::read_register(unsigned char) [clone .constprop.107]>
   14e16:	68 2f       	mov	r22, r24
   14e18:	6e 7f       	andi	r22, 0xFE	; 254
   14e1a:	80 e0       	ldi	r24, 0x00	; 0
   14e1c:	0e 94 17 c7 	call	0x18e2e	; 0x18e2e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:708
  delay(100);
   14e20:	64 e6       	ldi	r22, 0x64	; 100
   14e22:	70 e0       	ldi	r23, 0x00	; 0
   14e24:	80 e0       	ldi	r24, 0x00	; 0
   14e26:	90 e0       	ldi	r25, 0x00	; 0
   14e28:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
   14e2c:	1a cd       	rjmp	.-1484   	; 0x14862 <setup+0x101c>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
   14e2e:	f8 01       	movw	r30, r16
   14e30:	22 a8       	ldd	r2, Z+50	; 0x32
   14e32:	33 a8       	ldd	r3, Z+51	; 0x33
   14e34:	44 a8       	ldd	r4, Z+52	; 0x34
   14e36:	55 a8       	ldd	r5, Z+53	; 0x35
   14e38:	a2 01       	movw	r20, r4
   14e3a:	91 01       	movw	r18, r2
   14e3c:	c5 01       	movw	r24, r10
   14e3e:	b4 01       	movw	r22, r8
   14e40:	0e 94 f3 ed 	call	0x1dbe6	; 0x1dbe6 <__cmpsf2>
   14e44:	87 fd       	sbrc	r24, 7
   14e46:	64 c3       	rjmp	.+1736   	; 0x15510 <setup+0x1cca>
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  /*we just went from manual to auto*/
        PID::Initialize();
    }
    inAuto = newAuto;
   14e48:	21 e0       	ldi	r18, 0x01	; 1
   14e4a:	f8 01       	movw	r30, r16
   14e4c:	22 af       	std	Z+58, r18	; 0x3a
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   14e4e:	12 aa       	std	Z+50, r1	; 0x32
   14e50:	13 aa       	std	Z+51, r1	; 0x33
   14e52:	14 aa       	std	Z+52, r1	; 0x34
   14e54:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   14e56:	80 e0       	ldi	r24, 0x00	; 0
   14e58:	90 e0       	ldi	r25, 0x00	; 0
   14e5a:	af e7       	ldi	r26, 0x7F	; 127
   14e5c:	b3 e4       	ldi	r27, 0x43	; 67
   14e5e:	86 ab       	std	Z+54, r24	; 0x36
   14e60:	97 ab       	std	Z+55, r25	; 0x37
   14e62:	a0 af       	std	Z+56, r26	; 0x38
   14e64:	b1 af       	std	Z+57, r27	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   14e66:	46 8c       	ldd	r4, Z+30	; 0x1e
   14e68:	57 8c       	ldd	r5, Z+31	; 0x1f
   14e6a:	d2 01       	movw	r26, r4
   14e6c:	8d 90       	ld	r8, X+
   14e6e:	9d 90       	ld	r9, X+
   14e70:	ad 90       	ld	r10, X+
   14e72:	bc 90       	ld	r11, X
   14e74:	20 e0       	ldi	r18, 0x00	; 0
   14e76:	30 e0       	ldi	r19, 0x00	; 0
   14e78:	4f e7       	ldi	r20, 0x7F	; 127
   14e7a:	53 e4       	ldi	r21, 0x43	; 67
   14e7c:	c5 01       	movw	r24, r10
   14e7e:	b4 01       	movw	r22, r8
   14e80:	0e 94 d5 f0 	call	0x1e1aa	; 0x1e1aa <__gesf2>
   14e84:	18 16       	cp	r1, r24
   14e86:	14 f5       	brge	.+68     	; 0x14ecc <setup+0x1686>
   14e88:	80 e0       	ldi	r24, 0x00	; 0
   14e8a:	90 e0       	ldi	r25, 0x00	; 0
   14e8c:	af e7       	ldi	r26, 0x7F	; 127
   14e8e:	b3 e4       	ldi	r27, 0x43	; 67
   14e90:	f2 01       	movw	r30, r4
   14e92:	80 83       	st	Z, r24
   14e94:	91 83       	std	Z+1, r25	; 0x01
   14e96:	a2 83       	std	Z+2, r26	; 0x02
   14e98:	b3 83       	std	Z+3, r27	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
   14e9a:	f8 01       	movw	r30, r16
   14e9c:	26 a0       	ldd	r2, Z+38	; 0x26
   14e9e:	37 a0       	ldd	r3, Z+39	; 0x27
   14ea0:	40 a4       	ldd	r4, Z+40	; 0x28
   14ea2:	51 a4       	ldd	r5, Z+41	; 0x29
   14ea4:	86 a8       	ldd	r8, Z+54	; 0x36
   14ea6:	97 a8       	ldd	r9, Z+55	; 0x37
   14ea8:	a0 ac       	ldd	r10, Z+56	; 0x38
   14eaa:	b1 ac       	ldd	r11, Z+57	; 0x39
   14eac:	a5 01       	movw	r20, r10
   14eae:	94 01       	movw	r18, r8
   14eb0:	c2 01       	movw	r24, r4
   14eb2:	b1 01       	movw	r22, r2
   14eb4:	0e 94 d5 f0 	call	0x1e1aa	; 0x1e1aa <__gesf2>
   14eb8:	18 16       	cp	r1, r24
   14eba:	c4 f4       	brge	.+48     	; 0x14eec <setup+0x16a6>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
   14ebc:	d8 01       	movw	r26, r16
   14ebe:	96 96       	adiw	r26, 0x26	; 38
   14ec0:	8d 92       	st	X+, r8
   14ec2:	9d 92       	st	X+, r9
   14ec4:	ad 92       	st	X+, r10
   14ec6:	bc 92       	st	X, r11
   14ec8:	99 97       	sbiw	r26, 0x29	; 41
   14eca:	1d c0       	rjmp	.+58     	; 0x14f06 <setup+0x16c0>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
   14ecc:	20 e0       	ldi	r18, 0x00	; 0
   14ece:	30 e0       	ldi	r19, 0x00	; 0
   14ed0:	a9 01       	movw	r20, r18
   14ed2:	c5 01       	movw	r24, r10
   14ed4:	b4 01       	movw	r22, r8
   14ed6:	0e 94 f3 ed 	call	0x1dbe6	; 0x1dbe6 <__cmpsf2>
   14eda:	87 ff       	sbrs	r24, 7
   14edc:	de cf       	rjmp	.-68     	; 0x14e9a <setup+0x1654>
   14ede:	d2 01       	movw	r26, r4
   14ee0:	1d 92       	st	X+, r1
   14ee2:	1d 92       	st	X+, r1
   14ee4:	1d 92       	st	X+, r1
   14ee6:	1c 92       	st	X, r1
   14ee8:	13 97       	sbiw	r26, 0x03	; 3
   14eea:	d7 cf       	rjmp	.-82     	; 0x14e9a <setup+0x1654>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   14eec:	f8 01       	movw	r30, r16
   14eee:	82 a8       	ldd	r8, Z+50	; 0x32
   14ef0:	93 a8       	ldd	r9, Z+51	; 0x33
   14ef2:	a4 a8       	ldd	r10, Z+52	; 0x34
   14ef4:	b5 a8       	ldd	r11, Z+53	; 0x35
   14ef6:	a5 01       	movw	r20, r10
   14ef8:	94 01       	movw	r18, r8
   14efa:	c2 01       	movw	r24, r4
   14efc:	b1 01       	movw	r22, r2
   14efe:	0e 94 f3 ed 	call	0x1dbe6	; 0x1dbe6 <__cmpsf2>
   14f02:	87 fd       	sbrc	r24, 7
   14f04:	db cf       	rjmp	.-74     	; 0x14ebc <setup+0x1676>
   14f06:	c5 5c       	subi	r28, 0xC5	; 197
   14f08:	de 4f       	sbci	r29, 0xFE	; 254
   14f0a:	e8 81       	ld	r30, Y
   14f0c:	f9 81       	ldd	r31, Y+1	; 0x01
   14f0e:	cb 53       	subi	r28, 0x3B	; 59
   14f10:	d1 40       	sbci	r29, 0x01	; 1
   14f12:	34 96       	adiw	r30, 0x04	; 4
   14f14:	c5 5c       	subi	r28, 0xC5	; 197
   14f16:	de 4f       	sbci	r29, 0xFE	; 254
   14f18:	f9 83       	std	Y+1, r31	; 0x01
   14f1a:	e8 83       	st	Y, r30
   14f1c:	cb 53       	subi	r28, 0x3B	; 59
   14f1e:	d1 40       	sbci	r29, 0x01	; 1
   14f20:	c7 5c       	subi	r28, 0xC7	; 199
   14f22:	de 4f       	sbci	r29, 0xFE	; 254
   14f24:	88 81       	ld	r24, Y
   14f26:	99 81       	ldd	r25, Y+1	; 0x01
   14f28:	c9 53       	subi	r28, 0x39	; 57
   14f2a:	d1 40       	sbci	r29, 0x01	; 1
   14f2c:	04 96       	adiw	r24, 0x04	; 4
   14f2e:	c7 5c       	subi	r28, 0xC7	; 199
   14f30:	de 4f       	sbci	r29, 0xFE	; 254
   14f32:	99 83       	std	Y+1, r25	; 0x01
   14f34:	88 83       	st	Y, r24
   14f36:	c9 53       	subi	r28, 0x39	; 57
   14f38:	d1 40       	sbci	r29, 0x01	; 1
   14f3a:	94 e0       	ldi	r25, 0x04	; 4
   14f3c:	c9 0e       	add	r12, r25
   14f3e:	d1 1c       	adc	r13, r1
   14f40:	a2 e0       	ldi	r26, 0x02	; 2
   14f42:	ea 0e       	add	r14, r26
   14f44:	f1 1c       	adc	r15, r1
thermostat_init_pid():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:40

PID** array_pids = new PID*[MAX_THERMOSTAT];

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
   14f46:	ba e0       	ldi	r27, 0x0A	; 10
   14f48:	eb 16       	cp	r14, r27
   14f4a:	f1 04       	cpc	r15, r1
   14f4c:	09 f0       	breq	.+2      	; 0x14f50 <setup+0x170a>
   14f4e:	db c1       	rjmp	.+950    	; 0x15306 <setup+0x1ac0>
   14f50:	4d e8       	ldi	r20, 0x8D	; 141
   14f52:	24 2e       	mov	r2, r20
   14f54:	4b e0       	ldi	r20, 0x0B	; 11
   14f56:	34 2e       	mov	r3, r20
   14f58:	58 eb       	ldi	r21, 0xB8	; 184
   14f5a:	85 2e       	mov	r8, r21
   14f5c:	5a e0       	ldi	r21, 0x0A	; 10
   14f5e:	95 2e       	mov	r9, r21
   14f60:	6c ec       	ldi	r22, 0xCC	; 204
   14f62:	a6 2e       	mov	r10, r22
   14f64:	6a e0       	ldi	r22, 0x0A	; 10
   14f66:	b6 2e       	mov	r11, r22
   14f68:	70 ee       	ldi	r23, 0xE0	; 224
   14f6a:	c7 2e       	mov	r12, r23
   14f6c:	7a e0       	ldi	r23, 0x0A	; 10
   14f6e:	d7 2e       	mov	r13, r23
   14f70:	e4 ef       	ldi	r30, 0xF4	; 244
   14f72:	ee 2e       	mov	r14, r30
   14f74:	ea e0       	ldi	r30, 0x0A	; 10
   14f76:	fe 2e       	mov	r15, r30
   14f78:	00 e6       	ldi	r16, 0x60	; 96
   14f7a:	11 e0       	ldi	r17, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3822
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   14f7c:	51 2c       	mov	r5, r1
thermostat_ring_set_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   14f7e:	f1 01       	movw	r30, r2
   14f80:	11 92       	st	Z+, r1
   14f82:	1f 01       	movw	r2, r30
thermostat_ring_get_pid_eeprom():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:225
  array_pids[idx]->SetSampleTime(PID_time[idx]);
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
   14f84:	c8 01       	movw	r24, r16
   14f86:	0e 94 6d 66 	call	0xccda	; 0xccda <EEPROMreadFloat(unsigned int)>
   14f8a:	d4 01       	movw	r26, r8
   14f8c:	6d 93       	st	X+, r22
   14f8e:	7d 93       	st	X+, r23
   14f90:	8d 93       	st	X+, r24
   14f92:	9d 93       	st	X+, r25
   14f94:	4d 01       	movw	r8, r26
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
   14f96:	c8 01       	movw	r24, r16
   14f98:	04 96       	adiw	r24, 0x04	; 4
   14f9a:	0e 94 6d 66 	call	0xccda	; 0xccda <EEPROMreadFloat(unsigned int)>
   14f9e:	f5 01       	movw	r30, r10
   14fa0:	61 93       	st	Z+, r22
   14fa2:	71 93       	st	Z+, r23
   14fa4:	81 93       	st	Z+, r24
   14fa6:	91 93       	st	Z+, r25
   14fa8:	5f 01       	movw	r10, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
   14faa:	c8 01       	movw	r24, r16
   14fac:	08 96       	adiw	r24, 0x08	; 8
   14fae:	0e 94 6d 66 	call	0xccda	; 0xccda <EEPROMreadFloat(unsigned int)>
   14fb2:	d6 01       	movw	r26, r12
   14fb4:	6d 93       	st	X+, r22
   14fb6:	7d 93       	st	X+, r23
   14fb8:	8d 93       	st	X+, r24
   14fba:	9d 93       	st	X+, r25
   14fbc:	6d 01       	movw	r12, r26
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
   14fbe:	c8 01       	movw	r24, r16
   14fc0:	0c 96       	adiw	r24, 0x0c	; 12
   14fc2:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   14fc6:	f7 01       	movw	r30, r14
   14fc8:	81 93       	st	Z+, r24
   14fca:	7f 01       	movw	r14, r30
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3827
      {
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
   14fcc:	85 2d       	mov	r24, r5
   14fce:	0e 94 a3 44 	call	0x8946	; 0x8946 <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3822
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   14fd2:	53 94       	inc	r5
   14fd4:	0f 5d       	subi	r16, 0xDF	; 223
   14fd6:	1f 4f       	sbci	r17, 0xFF	; 255
   14fd8:	f5 e0       	ldi	r31, 0x05	; 5
   14fda:	5f 12       	cpse	r5, r31
   14fdc:	d0 cf       	rjmp	.-96     	; 0x14f7e <setup+0x1738>
get_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2001
   return
     - uint8_t s id ringu
*/
uint8_t get_default_ring(void)
{
  return EEPROM.read(my_default_ring);
   14fde:	8c e5       	ldi	r24, 0x5C	; 92
   14fe0:	90 e0       	ldi	r25, 0x00	; 0
   14fe2:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   14fe6:	18 2f       	mov	r17, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3830
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }

      default_ring = get_default_ring();
   14fe8:	80 93 86 0b 	sts	0x0B86, r24	; 0x800b86 <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3831
      last_default_ring = default_ring;
   14fec:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <last_default_ring>
get_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2016
   return
     - uint8_t s id cislo cidla
*/
uint8_t get_default_show_temp(void)
{
  return EEPROM.read(my_default_show_temp);
   14ff0:	8d e5       	ldi	r24, 0x5D	; 93
   14ff2:	90 e0       	ldi	r25, 0x00	; 0
   14ff4:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3832
        thermostat_ring_update_pid_parameters(idx);
      }

      default_ring = get_default_ring();
      last_default_ring = default_ring;
      default_show_temp = get_default_show_temp();
   14ff8:	80 93 93 09 	sts	0x0993, r24	; 0x800993 <default_show_temp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3833
      thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
   14ffc:	81 2f       	mov	r24, r17
   14ffe:	0e 94 14 67 	call	0xce28	; 0xce28 <thermostat_ring_get_mode(unsigned char)>
   15002:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <thermostat_mode_default_ring_last_state>
   15006:	2d cc       	rjmp	.-1958   	; 0x14862 <setup+0x101c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3849
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
   15008:	6b e3       	ldi	r22, 0x3B	; 59
   1500a:	70 e7       	ldi	r23, 0x70	; 112
   1500c:	ce 01       	movw	r24, r28
   1500e:	88 5b       	subi	r24, 0xB8	; 184
   15010:	9f 4f       	sbci	r25, 0xFF	; 255
   15012:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3850
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15016:	ee 24       	eor	r14, r14
   15018:	ea 94       	dec	r14
   1501a:	fe 2c       	mov	r15, r14
   1501c:	00 ee       	ldi	r16, 0xE0	; 224
   1501e:	17 e0       	ldi	r17, 0x07	; 7
   15020:	21 e0       	ldi	r18, 0x01	; 1
   15022:	4e eb       	ldi	r20, 0xBE	; 190
   15024:	50 e0       	ldi	r21, 0x00	; 0
   15026:	60 ea       	ldi	r22, 0xA0	; 160
   15028:	70 e0       	ldi	r23, 0x00	; 0
   1502a:	ce 01       	movw	r24, r28
   1502c:	88 5b       	subi	r24, 0xB8	; 184
   1502e:	9f 4f       	sbci	r25, 0xFF	; 255
   15030:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3141
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   15034:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
   15038:	8d 7f       	andi	r24, 0xFD	; 253
   1503a:	a9 c0       	rjmp	.+338    	; 0x1518e <setup+0x1948>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3856
        selftest_clear_0(SELFTEST_ERR_NTP);
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
   1503c:	c8 5c       	subi	r28, 0xC8	; 200
   1503e:	de 4f       	sbci	r29, 0xFE	; 254
   15040:	b8 81       	ld	r27, Y
   15042:	c8 53       	subi	r28, 0x38	; 56
   15044:	d1 40       	sbci	r29, 0x01	; 1
   15046:	bf 30       	cpi	r27, 0x0F	; 15
   15048:	09 f0       	breq	.+2      	; 0x1504c <setup+0x1806>
   1504a:	0b cc       	rjmp	.-2026   	; 0x14862 <setup+0x101c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3858
    {
      strcpy_P(str1, text_rtc_cas);
   1504c:	6e e6       	ldi	r22, 0x6E	; 110
   1504e:	7f e6       	ldi	r23, 0x6F	; 111
   15050:	ce 01       	movw	r24, r28
   15052:	88 5b       	subi	r24, 0xB8	; 184
   15054:	9f 4f       	sbci	r25, 0xFF	; 255
   15056:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3859
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1505a:	ee 24       	eor	r14, r14
   1505c:	ea 94       	dec	r14
   1505e:	fe 2c       	mov	r15, r14
   15060:	00 ee       	ldi	r16, 0xE0	; 224
   15062:	17 e0       	ldi	r17, 0x07	; 7
   15064:	21 e0       	ldi	r18, 0x01	; 1
   15066:	48 ec       	ldi	r20, 0xC8	; 200
   15068:	50 e0       	ldi	r21, 0x00	; 0
   1506a:	6e e1       	ldi	r22, 0x1E	; 30
   1506c:	70 e0       	ldi	r23, 0x00	; 0
   1506e:	ce 01       	movw	r24, r28
   15070:	88 5b       	subi	r24, 0xB8	; 184
   15072:	9f 4f       	sbci	r25, 0xFF	; 255
   15074:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3860
      if (rtc.isrunning())
   15078:	0e 94 7b b3 	call	0x166f6	; 0x166f6 <RTC_DS1307::isrunning() [clone .constprop.149]>
   1507c:	88 23       	and	r24, r24
   1507e:	a9 f0       	breq	.+42     	; 0x150aa <setup+0x1864>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3862
      {
        strcpy_P(str1, text_ok);
   15080:	6b e3       	ldi	r22, 0x3B	; 59
   15082:	70 e7       	ldi	r23, 0x70	; 112
   15084:	ce 01       	movw	r24, r28
   15086:	88 5b       	subi	r24, 0xB8	; 184
   15088:	9f 4f       	sbci	r25, 0xFF	; 255
   1508a:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3863
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1508e:	21 e0       	ldi	r18, 0x01	; 1
   15090:	48 ec       	ldi	r20, 0xC8	; 200
   15092:	50 e0       	ldi	r21, 0x00	; 0
   15094:	60 ea       	ldi	r22, 0xA0	; 160
   15096:	70 e0       	ldi	r23, 0x00	; 0
   15098:	ce 01       	movw	r24, r28
   1509a:	88 5b       	subi	r24, 0xB8	; 184
   1509c:	9f 4f       	sbci	r25, 0xFF	; 255
   1509e:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3141
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   150a2:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
   150a6:	8e 7f       	andi	r24, 0xFE	; 254
   150a8:	72 c0       	rjmp	.+228    	; 0x1518e <setup+0x1948>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3868
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
      }
      else
      {
        strcpy_P(str1, text_err);
   150aa:	6a e5       	ldi	r22, 0x5A	; 90
   150ac:	71 e7       	ldi	r23, 0x71	; 113
   150ae:	ce 01       	movw	r24, r28
   150b0:	88 5b       	subi	r24, 0xB8	; 184
   150b2:	9f 4f       	sbci	r25, 0xFF	; 255
   150b4:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3869
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   150b8:	ee 24       	eor	r14, r14
   150ba:	ea 94       	dec	r14
   150bc:	fe 2c       	mov	r15, r14
   150be:	00 e0       	ldi	r16, 0x00	; 0
   150c0:	18 ef       	ldi	r17, 0xF8	; 248
   150c2:	21 e0       	ldi	r18, 0x01	; 1
   150c4:	48 ec       	ldi	r20, 0xC8	; 200
   150c6:	50 e0       	ldi	r21, 0x00	; 0
   150c8:	60 ea       	ldi	r22, 0xA0	; 160
   150ca:	70 e0       	ldi	r23, 0x00	; 0
   150cc:	ce 01       	movw	r24, r28
   150ce:	88 5b       	subi	r24, 0xB8	; 184
   150d0:	9f 4f       	sbci	r25, 0xFF	; 255
   150d2:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3870
        selftest_set_0(SELFTEST_ERR_RTC);
   150d6:	80 e0       	ldi	r24, 0x00	; 0
   150d8:	d4 cc       	rjmp	.-1624   	; 0x14a82 <setup+0x123c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3659
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }
    ///
    ///  nacteni provoznich parametru
    if (init == 5)
   150da:	c8 5c       	subi	r28, 0xC8	; 200
   150dc:	de 4f       	sbci	r29, 0xFE	; 254
   150de:	98 81       	ld	r25, Y
   150e0:	c8 53       	subi	r28, 0x38	; 56
   150e2:	d1 40       	sbci	r29, 0x01	; 1
   150e4:	95 30       	cpi	r25, 0x05	; 5
   150e6:	09 f4       	brne	.+2      	; 0x150ea <setup+0x18a4>
   150e8:	af ca       	rjmp	.-2722   	; 0x14648 <setup+0xe02>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3682
        remote_tds_set_last_update(idx, 255);
      }
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
   150ea:	96 30       	cpi	r25, 0x06	; 6
   150ec:	09 f4       	brne	.+2      	; 0x150f0 <setup+0x18aa>
   150ee:	28 cc       	rjmp	.-1968   	; 0x14940 <setup+0x10fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3704
      brigthness_display_mode = EEPROM.read(my_brightness_mode);
      my_touch.TP_SetBacklight(brigthness_display_values * 2);
    }
    ///
    /// inicializace ds2482
    if (init == 7)
   150f0:	97 30       	cpi	r25, 0x07	; 7
   150f2:	09 f0       	breq	.+2      	; 0x150f6 <setup+0x18b0>
   150f4:	c9 cc       	rjmp	.-1646   	; 0x14a88 <setup+0x1242>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3706
    {
      strcpy_P(str1, text_onewire_rozhrani);
   150f6:	6e ef       	ldi	r22, 0xFE	; 254
   150f8:	7f e6       	ldi	r23, 0x6F	; 111
   150fa:	ce 01       	movw	r24, r28
   150fc:	88 5b       	subi	r24, 0xB8	; 184
   150fe:	9f 4f       	sbci	r25, 0xFF	; 255
   15100:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3707
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15104:	ee 24       	eor	r14, r14
   15106:	ea 94       	dec	r14
   15108:	fe 2c       	mov	r15, r14
   1510a:	00 ee       	ldi	r16, 0xE0	; 224
   1510c:	17 e0       	ldi	r17, 0x07	; 7
   1510e:	21 e0       	ldi	r18, 0x01	; 1
   15110:	48 e7       	ldi	r20, 0x78	; 120
   15112:	50 e0       	ldi	r21, 0x00	; 0
   15114:	6e e1       	ldi	r22, 0x1E	; 30
   15116:	70 e0       	ldi	r23, 0x00	; 0
   15118:	ce 01       	movw	r24, r28
   1511a:	88 5b       	subi	r24, 0xB8	; 184
   1511c:	9f 4f       	sbci	r25, 0xFF	; 255
   1511e:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3708
      ds2482_address[0].i2c_addr = 0b0011000;
   15122:	88 e1       	ldi	r24, 0x18	; 24
   15124:	80 93 01 0d 	sts	0x0D01, r24	; 0x800d01 <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3709
      ds2482_address[0].HWwirenum = 0;
   15128:	10 92 02 0d 	sts	0x0D02, r1	; 0x800d02 <ds2482_address+0x1>
   1512c:	ee ec       	ldi	r30, 0xCE	; 206
   1512e:	fb e0       	ldi	r31, 0x0B	; 11
   15130:	82 e8       	ldi	r24, 0x82	; 130
   15132:	9c e0       	ldi	r25, 0x0C	; 12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3713
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
   15134:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3714
        status_tds18s20[idx].period_now = 0;
   15136:	14 8e       	std	Z+28, r1	; 0x1c
   15138:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3711
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
   1513a:	8e 17       	cp	r24, r30
   1513c:	9f 07       	cpc	r25, r31
   1513e:	d1 f7       	brne	.-12     	; 0x15134 <setup+0x18ee>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   15140:	4a e0       	ldi	r20, 0x0A	; 10
   15142:	be 01       	movw	r22, r28
   15144:	6e 50       	subi	r22, 0x0E	; 14
   15146:	7f 4f       	sbci	r23, 0xFF	; 255
   15148:	88 e1       	ldi	r24, 0x18	; 24
   1514a:	90 e0       	ldi	r25, 0x00	; 0
   1514c:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3717
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
   15150:	80 91 01 0d 	lds	r24, 0x0D01	; 0x800d01 <ds2482_address>
   15154:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <ds2482reset(unsigned char)>
   15158:	81 11       	cpse	r24, r1
   1515a:	7c cc       	rjmp	.-1800   	; 0x14a54 <setup+0x120e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3719
      {
        strcpy_P(str1, text_ok);
   1515c:	6b e3       	ldi	r22, 0x3B	; 59
   1515e:	70 e7       	ldi	r23, 0x70	; 112
   15160:	ce 01       	movw	r24, r28
   15162:	88 5b       	subi	r24, 0xB8	; 184
   15164:	9f 4f       	sbci	r25, 0xFF	; 255
   15166:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3720
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1516a:	ee 24       	eor	r14, r14
   1516c:	ea 94       	dec	r14
   1516e:	fe 2c       	mov	r15, r14
   15170:	00 ee       	ldi	r16, 0xE0	; 224
   15172:	17 e0       	ldi	r17, 0x07	; 7
   15174:	21 e0       	ldi	r18, 0x01	; 1
   15176:	48 e7       	ldi	r20, 0x78	; 120
   15178:	50 e0       	ldi	r21, 0x00	; 0
   1517a:	60 ea       	ldi	r22, 0xA0	; 160
   1517c:	70 e0       	ldi	r23, 0x00	; 0
   1517e:	ce 01       	movw	r24, r28
   15180:	88 5b       	subi	r24, 0xB8	; 184
   15182:	9f 4f       	sbci	r25, 0xFF	; 255
   15184:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3141
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   15188:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
   1518c:	8b 7f       	andi	r24, 0xFB	; 251
   1518e:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <selftest_data>
   15192:	67 cb       	rjmp	.-2354   	; 0x14862 <setup+0x101c>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3765
      delay(100);
      http_server.begin();
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
   15194:	c8 5c       	subi	r28, 0xC8	; 200
   15196:	de 4f       	sbci	r29, 0xFE	; 254
   15198:	a8 81       	ld	r26, Y
   1519a:	c8 53       	subi	r28, 0x38	; 56
   1519c:	d1 40       	sbci	r29, 0x01	; 1
   1519e:	aa 30       	cpi	r26, 0x0A	; 10
   151a0:	09 f0       	breq	.+2      	; 0x151a4 <setup+0x195e>
   151a2:	4c cd       	rjmp	.-1384   	; 0x14c3c <setup+0x13f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3767
    {
      strcpy_P(str1, text_mqtt_rozhrani);
   151a4:	61 ed       	ldi	r22, 0xD1	; 209
   151a6:	7f e6       	ldi	r23, 0x6F	; 111
   151a8:	ce 01       	movw	r24, r28
   151aa:	88 5b       	subi	r24, 0xB8	; 184
   151ac:	9f 4f       	sbci	r25, 0xFF	; 255
   151ae:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3768
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   151b2:	ee 24       	eor	r14, r14
   151b4:	ea 94       	dec	r14
   151b6:	fe 2c       	mov	r15, r14
   151b8:	00 ee       	ldi	r16, 0xE0	; 224
   151ba:	17 e0       	ldi	r17, 0x07	; 7
   151bc:	21 e0       	ldi	r18, 0x01	; 1
   151be:	46 e9       	ldi	r20, 0x96	; 150
   151c0:	50 e0       	ldi	r21, 0x00	; 0
   151c2:	6e e1       	ldi	r22, 0x1E	; 30
   151c4:	70 e0       	ldi	r23, 0x00	; 0
   151c6:	ce 01       	movw	r24, r28
   151c8:	88 5b       	subi	r24, 0xB8	; 184
   151ca:	9f 4f       	sbci	r25, 0xFF	; 255
   151cc:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3770

      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
   151d0:	80 91 3d 0e 	lds	r24, 0x0E3D	; 0x800e3d <device+0x24>
   151d4:	90 91 3e 0e 	lds	r25, 0x0E3E	; 0x800e3e <device+0x25>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:556
    }
    return rc;
}

PubSubClient& PubSubClient::setServer(uint8_t * ip, uint16_t port) {
    IPAddress addr(ip[0],ip[1],ip[2],ip[3]);
   151d8:	20 91 3c 0e 	lds	r18, 0x0E3C	; 0x800e3c <device+0x23>
   151dc:	30 91 3b 0e 	lds	r19, 0x0E3B	; 0x800e3b <device+0x22>
   151e0:	40 91 3a 0e 	lds	r20, 0x0E3A	; 0x800e3a <device+0x21>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   151e4:	50 91 39 0e 	lds	r21, 0x0E39	; 0x800e39 <device+0x20>
   151e8:	50 93 40 12 	sts	0x1240, r21	; 0x801240 <mqtt_client+0x211>
   151ec:	40 93 41 12 	sts	0x1241, r20	; 0x801241 <mqtt_client+0x212>
   151f0:	30 93 42 12 	sts	0x1242, r19	; 0x801242 <mqtt_client+0x213>
   151f4:	20 93 43 12 	sts	0x1243, r18	; 0x801243 <mqtt_client+0x214>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:562
    return setServer(addr,port);
}

PubSubClient& PubSubClient::setServer(IPAddress ip, uint16_t port) {
    this->ip = ip;
    this->port = port;
   151f8:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <mqtt_client+0x218>
   151fc:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <mqtt_client+0x217>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:563
    this->domain = NULL;
   15200:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <mqtt_client+0x216>
   15204:	10 92 44 12 	sts	0x1244, r1	; 0x801244 <mqtt_client+0x215>
setCallback():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:574
    this->port = port;
    return *this;
}

PubSubClient& PubSubClient::setCallback(MQTT_CALLBACK_SIGNATURE) {
    this->callback = callback;
   15208:	82 e9       	ldi	r24, 0x92	; 146
   1520a:	98 e8       	ldi	r25, 0x88	; 136
   1520c:	90 93 3d 12 	sts	0x123D, r25	; 0x80123d <mqtt_client+0x20e>
   15210:	80 93 3c 12 	sts	0x123C, r24	; 0x80123c <mqtt_client+0x20d>
send_mqtt_set_header():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:162

////////////////////////////////////////////////////////////////////////////////////////////////////////
//****************************************************************************************************//
void send_mqtt_set_header(const char* header)
{
  header_out = header;
   15214:	82 ec       	ldi	r24, 0xC2	; 194
   15216:	9f e6       	ldi	r25, 0x6F	; 111
   15218:	90 93 b9 0c 	sts	0x0CB9, r25	; 0x800cb9 <header_out+0x1>
   1521c:	80 93 b8 0c 	sts	0x0CB8, r24	; 0x800cb8 <header_out>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3773
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
   15220:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   15224:	6b 01       	movw	r12, r22
   15226:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3774
      while ((millis() - milis) < 3000 )
   15228:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   1522c:	6c 19       	sub	r22, r12
   1522e:	7d 09       	sbc	r23, r13
   15230:	8e 09       	sbc	r24, r14
   15232:	9f 09       	sbc	r25, r15
   15234:	68 3b       	cpi	r22, 0xB8	; 184
   15236:	7b 40       	sbci	r23, 0x0B	; 11
   15238:	81 05       	cpc	r24, r1
   1523a:	91 05       	cpc	r25, r1
   1523c:	98 f4       	brcc	.+38     	; 0x15264 <setup+0x1a1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3776
      {
        lastmqttconnect = 0;
   1523e:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <lastmqttconnect>
   15242:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <lastmqttconnect+0x1>
   15246:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <lastmqttconnect+0x2>
   1524a:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <lastmqttconnect+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3777
        mqtt_client.loop();
   1524e:	0e 94 4f c7 	call	0x18e9e	; 0x18e9e <PubSubClient::loop() [clone .constprop.95]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3778
        if (mqtt_reconnect() == 0)
   15252:	0e 94 c6 96 	call	0x12d8c	; 0x12d8c <mqtt_reconnect()>
   15256:	81 11       	cpse	r24, r1
   15258:	e0 cc       	rjmp	.-1600   	; 0x14c1a <setup+0x13d4>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3141
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   1525a:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
   1525e:	8f 7d       	andi	r24, 0xDF	; 223
   15260:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3786
          break;
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }
      lastmqttconnect = 0;
   15264:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <lastmqttconnect>
   15268:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <lastmqttconnect+0x1>
   1526c:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <lastmqttconnect+0x2>
   15270:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <lastmqttconnect+0x3>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3154
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
   15274:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3787
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }
      lastmqttconnect = 0;
      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
   15278:	85 ff       	sbrs	r24, 5
   1527a:	d3 cc       	rjmp	.-1626   	; 0x14c22 <setup+0x13dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3789
      {
        strcpy_P(str1, text_err);
   1527c:	6a e5       	ldi	r22, 0x5A	; 90
   1527e:	71 e7       	ldi	r23, 0x71	; 113
   15280:	ce 01       	movw	r24, r28
   15282:	88 5b       	subi	r24, 0xB8	; 184
   15284:	9f 4f       	sbci	r25, 0xFF	; 255
   15286:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3790
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   1528a:	ee 24       	eor	r14, r14
   1528c:	ea 94       	dec	r14
   1528e:	fe 2c       	mov	r15, r14
   15290:	00 e0       	ldi	r16, 0x00	; 0
   15292:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3795
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15294:	21 e0       	ldi	r18, 0x01	; 1
   15296:	46 e9       	ldi	r20, 0x96	; 150
   15298:	50 e0       	ldi	r21, 0x00	; 0
   1529a:	35 cc       	rjmp	.-1942   	; 0x14b06 <setup+0x12c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3816
      scan_rf_net_enable = 2;
      radio.begin();
    }
    ///
    /// inicializace termostatu
    if (init == 13)
   1529c:	c8 5c       	subi	r28, 0xC8	; 200
   1529e:	de 4f       	sbci	r29, 0xFE	; 254
   152a0:	b8 81       	ld	r27, Y
   152a2:	c8 53       	subi	r28, 0x38	; 56
   152a4:	d1 40       	sbci	r29, 0x01	; 1
   152a6:	bd 30       	cpi	r27, 0x0D	; 13
   152a8:	11 f0       	breq	.+4      	; 0x152ae <setup+0x1a68>
   152aa:	0c 94 5c 9f 	jmp	0x13eb8	; 0x13eb8 <setup+0x672>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3818
    {
      strcpy_P(str1, text_pid_regulator);
   152ae:	65 e9       	ldi	r22, 0x95	; 149
   152b0:	7f e6       	ldi	r23, 0x6F	; 111
   152b2:	ce 01       	movw	r24, r28
   152b4:	88 5b       	subi	r24, 0xB8	; 184
   152b6:	9f 4f       	sbci	r25, 0xFF	; 255
   152b8:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3819
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   152bc:	ee 24       	eor	r14, r14
   152be:	ea 94       	dec	r14
   152c0:	fe 2c       	mov	r15, r14
   152c2:	00 ee       	ldi	r16, 0xE0	; 224
   152c4:	17 e0       	ldi	r17, 0x07	; 7
   152c6:	21 e0       	ldi	r18, 0x01	; 1
   152c8:	44 eb       	ldi	r20, 0xB4	; 180
   152ca:	50 e0       	ldi	r21, 0x00	; 0
   152cc:	6e e1       	ldi	r22, 0x1E	; 30
   152ce:	70 e0       	ldi	r23, 0x00	; 0
   152d0:	ce 01       	movw	r24, r28
   152d2:	88 5b       	subi	r24, 0xB8	; 184
   152d4:	9f 4f       	sbci	r25, 0xFF	; 255
   152d6:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   152da:	aa eb       	ldi	r26, 0xBA	; 186
   152dc:	bb e0       	ldi	r27, 0x0B	; 11
   152de:	c5 5c       	subi	r28, 0xC5	; 197
   152e0:	de 4f       	sbci	r29, 0xFE	; 254
   152e2:	b9 83       	std	Y+1, r27	; 0x01
   152e4:	a8 83       	st	Y, r26
   152e6:	cb 53       	subi	r28, 0x3B	; 59
   152e8:	d1 40       	sbci	r29, 0x01	; 1
   152ea:	e2 e9       	ldi	r30, 0x92	; 146
   152ec:	fb e0       	ldi	r31, 0x0B	; 11
   152ee:	c7 5c       	subi	r28, 0xC7	; 199
   152f0:	de 4f       	sbci	r29, 0xFE	; 254
   152f2:	f9 83       	std	Y+1, r31	; 0x01
   152f4:	e8 83       	st	Y, r30
   152f6:	c9 53       	subi	r28, 0x39	; 57
   152f8:	d1 40       	sbci	r29, 0x01	; 1
   152fa:	a6 ea       	ldi	r26, 0xA6	; 166
   152fc:	ca 2e       	mov	r12, r26
   152fe:	ab e0       	ldi	r26, 0x0B	; 11
   15300:	da 2e       	mov	r13, r26
   15302:	f1 2c       	mov	r15, r1
   15304:	e1 2c       	mov	r14, r1
operator new():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   15306:	8c e3       	ldi	r24, 0x3C	; 60
   15308:	90 e0       	ldi	r25, 0x00	; 0
   1530a:	0e 94 c2 e9 	call	0x1d384	; 0x1d384 <malloc>
   1530e:	8c 01       	movw	r16, r24
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
   15310:	c5 5c       	subi	r28, 0xC5	; 197
   15312:	de 4f       	sbci	r29, 0xFE	; 254
   15314:	e8 81       	ld	r30, Y
   15316:	f9 81       	ldd	r31, Y+1	; 0x01
   15318:	cb 53       	subi	r28, 0x3B	; 59
   1531a:	d1 40       	sbci	r29, 0x01	; 1
   1531c:	dc 01       	movw	r26, r24
   1531e:	5f 96       	adiw	r26, 0x1f	; 31
   15320:	fc 93       	st	X, r31
   15322:	ee 93       	st	-X, r30
   15324:	5e 97       	sbiw	r26, 0x1e	; 30
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
   15326:	c7 5c       	subi	r28, 0xC7	; 199
   15328:	de 4f       	sbci	r29, 0xFE	; 254
   1532a:	88 81       	ld	r24, Y
   1532c:	99 81       	ldd	r25, Y+1	; 0x01
   1532e:	c9 53       	subi	r28, 0x39	; 57
   15330:	d1 40       	sbci	r29, 0x01	; 1
   15332:	5d 96       	adiw	r26, 0x1d	; 29
   15334:	9c 93       	st	X, r25
   15336:	8e 93       	st	-X, r24
   15338:	5c 97       	sbiw	r26, 0x1c	; 28
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
   1533a:	91 96       	adiw	r26, 0x21	; 33
   1533c:	dc 92       	st	X, r13
   1533e:	ce 92       	st	-X, r12
   15340:	90 97       	sbiw	r26, 0x20	; 32
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
   15342:	da 96       	adiw	r26, 0x3a	; 58
   15344:	1c 92       	st	X, r1
   15346:	da 97       	sbiw	r26, 0x3a	; 58
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   15348:	d2 96       	adiw	r26, 0x32	; 50
   1534a:	1d 92       	st	X+, r1
   1534c:	1d 92       	st	X+, r1
   1534e:	1d 92       	st	X+, r1
   15350:	1c 92       	st	X, r1
   15352:	d5 97       	sbiw	r26, 0x35	; 53
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   15354:	80 e0       	ldi	r24, 0x00	; 0
   15356:	90 e0       	ldi	r25, 0x00	; 0
   15358:	af e7       	ldi	r26, 0x7F	; 127
   1535a:	b3 e4       	ldi	r27, 0x43	; 67
   1535c:	f8 01       	movw	r30, r16
   1535e:	86 ab       	std	Z+54, r24	; 0x36
   15360:	97 ab       	std	Z+55, r25	; 0x37
   15362:	a0 af       	std	Z+56, r26	; 0x38
   15364:	b1 af       	std	Z+57, r27	; 0x39
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   15366:	84 e6       	ldi	r24, 0x64	; 100
   15368:	90 e0       	ldi	r25, 0x00	; 0
   1536a:	a0 e0       	ldi	r26, 0x00	; 0
   1536c:	b0 e0       	ldi	r27, 0x00	; 0
   1536e:	86 a7       	std	Z+46, r24	; 0x2e
   15370:	97 a7       	std	Z+47, r25	; 0x2f
   15372:	a0 ab       	std	Z+48, r26	; 0x30
   15374:	b1 ab       	std	Z+49, r27	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:33

    PID::SetControllerDirection(ControllerDirection);
   15376:	70 e0       	ldi	r23, 0x00	; 0
   15378:	60 e0       	ldi	r22, 0x00	; 0
   1537a:	c8 01       	movw	r24, r16
   1537c:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <PID::SetControllerDirection(int)>
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   15380:	e1 e0       	ldi	r30, 0x01	; 1
   15382:	f0 e0       	ldi	r31, 0x00	; 0
   15384:	d8 01       	movw	r26, r16
   15386:	5b 96       	adiw	r26, 0x1b	; 27
   15388:	fc 93       	st	X, r31
   1538a:	ee 93       	st	-X, r30
   1538c:	5a 97       	sbiw	r26, 0x1a	; 26
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
   1538e:	f1 e0       	ldi	r31, 0x01	; 1
   15390:	db 96       	adiw	r26, 0x3b	; 59
   15392:	fc 93       	st	X, r31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   15394:	80 e0       	ldi	r24, 0x00	; 0
   15396:	90 e0       	ldi	r25, 0x00	; 0
   15398:	a0 e0       	ldi	r26, 0x00	; 0
   1539a:	b0 e4       	ldi	r27, 0x40	; 64
   1539c:	f8 01       	movw	r30, r16
   1539e:	80 83       	st	Z, r24
   153a0:	91 83       	std	Z+1, r25	; 0x01
   153a2:	a2 83       	std	Z+2, r26	; 0x02
   153a4:	b3 83       	std	Z+3, r27	; 0x03
   153a6:	80 e0       	ldi	r24, 0x00	; 0
   153a8:	90 e0       	ldi	r25, 0x00	; 0
   153aa:	a0 ea       	ldi	r26, 0xA0	; 160
   153ac:	b0 e4       	ldi	r27, 0x40	; 64
   153ae:	84 83       	std	Z+4, r24	; 0x04
   153b0:	95 83       	std	Z+5, r25	; 0x05
   153b2:	a6 83       	std	Z+6, r26	; 0x06
   153b4:	b7 83       	std	Z+7, r27	; 0x07
   153b6:	80 e0       	ldi	r24, 0x00	; 0
   153b8:	90 e0       	ldi	r25, 0x00	; 0
   153ba:	a0 e8       	ldi	r26, 0x80	; 128
   153bc:	bf e3       	ldi	r27, 0x3F	; 63
   153be:	80 87       	std	Z+8, r24	; 0x08
   153c0:	91 87       	std	Z+9, r25	; 0x09
   153c2:	a2 87       	std	Z+10, r26	; 0x0a
   153c4:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
   153c6:	66 a5       	ldd	r22, Z+46	; 0x2e
   153c8:	77 a5       	ldd	r23, Z+47	; 0x2f
   153ca:	80 a9       	ldd	r24, Z+48	; 0x30
   153cc:	91 a9       	ldd	r25, Z+49	; 0x31
   153ce:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
   153d2:	20 e0       	ldi	r18, 0x00	; 0
   153d4:	30 e0       	ldi	r19, 0x00	; 0
   153d6:	4a e7       	ldi	r20, 0x7A	; 122
   153d8:	54 e4       	ldi	r21, 0x44	; 68
   153da:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
   153de:	4b 01       	movw	r8, r22
   153e0:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
   153e2:	80 e0       	ldi	r24, 0x00	; 0
   153e4:	90 e0       	ldi	r25, 0x00	; 0
   153e6:	a0 e0       	ldi	r26, 0x00	; 0
   153e8:	b0 e4       	ldi	r27, 0x40	; 64
   153ea:	f8 01       	movw	r30, r16
   153ec:	84 87       	std	Z+12, r24	; 0x0c
   153ee:	95 87       	std	Z+13, r25	; 0x0d
   153f0:	a6 87       	std	Z+14, r26	; 0x0e
   153f2:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
   153f4:	20 e0       	ldi	r18, 0x00	; 0
   153f6:	30 e0       	ldi	r19, 0x00	; 0
   153f8:	40 ea       	ldi	r20, 0xA0	; 160
   153fa:	50 e4       	ldi	r21, 0x40	; 64
   153fc:	c5 01       	movw	r24, r10
   153fe:	b4 01       	movw	r22, r8
   15400:	0e 94 59 ee 	call	0x1dcb2	; 0x1dcb2 <__mulsf3>
   15404:	1b 01       	movw	r2, r22
   15406:	2c 01       	movw	r4, r24
   15408:	d8 01       	movw	r26, r16
   1540a:	50 96       	adiw	r26, 0x10	; 16
   1540c:	2d 92       	st	X+, r2
   1540e:	3d 92       	st	X+, r3
   15410:	4d 92       	st	X+, r4
   15412:	5c 92       	st	X, r5
   15414:	53 97       	sbiw	r26, 0x13	; 19
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
   15416:	a5 01       	movw	r20, r10
   15418:	94 01       	movw	r18, r8
   1541a:	60 e0       	ldi	r22, 0x00	; 0
   1541c:	70 e0       	ldi	r23, 0x00	; 0
   1541e:	80 e8       	ldi	r24, 0x80	; 128
   15420:	9f e3       	ldi	r25, 0x3F	; 63
   15422:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
   15426:	4b 01       	movw	r8, r22
   15428:	5c 01       	movw	r10, r24
   1542a:	f8 01       	movw	r30, r16
   1542c:	84 8a       	std	Z+20, r8	; 0x14
   1542e:	95 8a       	std	Z+21, r9	; 0x15
   15430:	a6 8a       	std	Z+22, r10	; 0x16
   15432:	b7 8a       	std	Z+23, r11	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
   15434:	80 8d       	ldd	r24, Z+24	; 0x18
   15436:	91 8d       	ldd	r25, Z+25	; 0x19
   15438:	01 97       	sbiw	r24, 0x01	; 1
   1543a:	11 f5       	brne	.+68     	; 0x15480 <setup+0x1c3a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
   1543c:	80 e0       	ldi	r24, 0x00	; 0
   1543e:	90 e0       	ldi	r25, 0x00	; 0
   15440:	a0 e0       	ldi	r26, 0x00	; 0
   15442:	b0 ec       	ldi	r27, 0xC0	; 192
   15444:	84 87       	std	Z+12, r24	; 0x0c
   15446:	95 87       	std	Z+13, r25	; 0x0d
   15448:	a6 87       	std	Z+14, r26	; 0x0e
   1544a:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
   1544c:	a2 01       	movw	r20, r4
   1544e:	91 01       	movw	r18, r2
   15450:	60 e0       	ldi	r22, 0x00	; 0
   15452:	70 e0       	ldi	r23, 0x00	; 0
   15454:	cb 01       	movw	r24, r22
   15456:	0e 94 c0 ef 	call	0x1df80	; 0x1df80 <__subsf3>
   1545a:	d8 01       	movw	r26, r16
   1545c:	50 96       	adiw	r26, 0x10	; 16
   1545e:	6d 93       	st	X+, r22
   15460:	7d 93       	st	X+, r23
   15462:	8d 93       	st	X+, r24
   15464:	9c 93       	st	X, r25
   15466:	53 97       	sbiw	r26, 0x13	; 19
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
   15468:	a5 01       	movw	r20, r10
   1546a:	94 01       	movw	r18, r8
   1546c:	60 e0       	ldi	r22, 0x00	; 0
   1546e:	70 e0       	ldi	r23, 0x00	; 0
   15470:	cb 01       	movw	r24, r22
   15472:	0e 94 c0 ef 	call	0x1df80	; 0x1df80 <__subsf3>
   15476:	f8 01       	movw	r30, r16
   15478:	64 8b       	std	Z+20, r22	; 0x14
   1547a:	75 8b       	std	Z+21, r23	; 0x15
   1547c:	86 8b       	std	Z+22, r24	; 0x16
   1547e:	97 8b       	std	Z+23, r25	; 0x17
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd, POn);

    lastTime = (millis() / 1000) - SampleTime;
   15480:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   15484:	28 ee       	ldi	r18, 0xE8	; 232
   15486:	33 e0       	ldi	r19, 0x03	; 3
   15488:	40 e0       	ldi	r20, 0x00	; 0
   1548a:	50 e0       	ldi	r21, 0x00	; 0
   1548c:	0e 94 65 ef 	call	0x1deca	; 0x1deca <__udivmodsi4>
   15490:	f8 01       	movw	r30, r16
   15492:	86 a5       	ldd	r24, Z+46	; 0x2e
   15494:	97 a5       	ldd	r25, Z+47	; 0x2f
   15496:	a0 a9       	ldd	r26, Z+48	; 0x30
   15498:	b1 a9       	ldd	r27, Z+49	; 0x31
   1549a:	28 1b       	sub	r18, r24
   1549c:	39 0b       	sbc	r19, r25
   1549e:	4a 0b       	sbc	r20, r26
   154a0:	5b 0b       	sbc	r21, r27
   154a2:	d8 01       	movw	r26, r16
   154a4:	22 a3       	std	Z+34, r18	; 0x22
   154a6:	33 a3       	std	Z+35, r19	; 0x23
   154a8:	44 a3       	std	Z+36, r20	; 0x24
   154aa:	55 a3       	std	Z+37, r21	; 0x25
thermostat_init_pid():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:42

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
  {
    array_pids[p] = new PID(&PID_Input[p], &PID_Output[p], &PID_Setpoint[p], 2, 5, 1, DIRECT);
   154ac:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <array_pids>
   154b0:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <array_pids+0x1>
   154b4:	ee 0d       	add	r30, r14
   154b6:	ff 1d       	adc	r31, r15
   154b8:	11 83       	std	Z+1, r17	; 0x01
   154ba:	00 83       	st	Z, r16
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
   154bc:	da 96       	adiw	r26, 0x3a	; 58
   154be:	8c 91       	ld	r24, X
   154c0:	da 97       	sbiw	r26, 0x3a	; 58
   154c2:	81 11       	cpse	r24, r1
   154c4:	c1 cc       	rjmp	.-1662   	; 0x14e48 <setup+0x1602>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   outputSum = *myOutput;
   154c6:	5e 96       	adiw	r26, 0x1e	; 30
   154c8:	ed 91       	ld	r30, X+
   154ca:	fc 91       	ld	r31, X
   154cc:	80 80       	ld	r8, Z
   154ce:	91 80       	ldd	r9, Z+1	; 0x01
   154d0:	a2 80       	ldd	r10, Z+2	; 0x02
   154d2:	b3 80       	ldd	r11, Z+3	; 0x03
   154d4:	f8 01       	movw	r30, r16
   154d6:	86 a2       	std	Z+38, r8	; 0x26
   154d8:	97 a2       	std	Z+39, r9	; 0x27
   154da:	a0 a6       	std	Z+40, r10	; 0x28
   154dc:	b1 a6       	std	Z+41, r11	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
   154de:	04 8c       	ldd	r0, Z+28	; 0x1c
   154e0:	f5 8d       	ldd	r31, Z+29	; 0x1d
   154e2:	e0 2d       	mov	r30, r0
   154e4:	80 81       	ld	r24, Z
   154e6:	91 81       	ldd	r25, Z+1	; 0x01
   154e8:	a2 81       	ldd	r26, Z+2	; 0x02
   154ea:	b3 81       	ldd	r27, Z+3	; 0x03
   154ec:	f8 01       	movw	r30, r16
   154ee:	82 a7       	std	Z+42, r24	; 0x2a
   154f0:	93 a7       	std	Z+43, r25	; 0x2b
   154f2:	a4 a7       	std	Z+44, r26	; 0x2c
   154f4:	b5 a7       	std	Z+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
   154f6:	26 a8       	ldd	r2, Z+54	; 0x36
   154f8:	37 a8       	ldd	r3, Z+55	; 0x37
   154fa:	40 ac       	ldd	r4, Z+56	; 0x38
   154fc:	51 ac       	ldd	r5, Z+57	; 0x39
   154fe:	a2 01       	movw	r20, r4
   15500:	91 01       	movw	r18, r2
   15502:	c5 01       	movw	r24, r10
   15504:	b4 01       	movw	r22, r8
   15506:	0e 94 d5 f0 	call	0x1e1aa	; 0x1e1aa <__gesf2>
   1550a:	18 16       	cp	r1, r24
   1550c:	0c f0       	brlt	.+2      	; 0x15510 <setup+0x1cca>
   1550e:	8f cc       	rjmp	.-1762   	; 0x14e2e <setup+0x15e8>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
   else if(outputSum < outMin) outputSum = outMin;
   15510:	d8 01       	movw	r26, r16
   15512:	96 96       	adiw	r26, 0x26	; 38
   15514:	2d 92       	st	X+, r2
   15516:	3d 92       	st	X+, r3
   15518:	4d 92       	st	X+, r4
   1551a:	5c 92       	st	X, r5
   1551c:	99 97       	sbiw	r26, 0x29	; 41
   1551e:	94 cc       	rjmp	.-1752   	; 0x14e48 <setup+0x1602>

00015520 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryNextMenujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1196
  }
}
///
void MenuHistoryNextMenu(uint16_t id, uint16_t args1, uint8_t fake)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
   15520:	20 91 19 0d 	lds	r18, 0x0D19	; 0x800d19 <MenuHistoryIndex>
   15524:	2a 30       	cpi	r18, 0x0A	; 10
   15526:	70 f4       	brcc	.+28     	; 0x15544 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1198
  {
    MenuHistoryIndex++;
   15528:	2f 5f       	subi	r18, 0xFF	; 255
   1552a:	20 93 19 0d 	sts	0x0D19, r18	; 0x800d19 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1199
    MenuHistory[MenuHistoryIndex] = id;
   1552e:	30 e0       	ldi	r19, 0x00	; 0
   15530:	f9 01       	movw	r30, r18
   15532:	e1 5f       	subi	r30, 0xF1	; 241
   15534:	f2 4f       	sbci	r31, 0xF2	; 242
   15536:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1200
    Global_menu_args1[MenuHistoryIndex] = args1;
   15538:	2b 5f       	subi	r18, 0xFB	; 251
   1553a:	32 4f       	sbci	r19, 0xF2	; 242
   1553c:	f9 01       	movw	r30, r18
   1553e:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1201
    MenuPrepareStyle();
   15540:	0c 94 8b 9b 	jmp	0x13716	; 0x13716 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1203
  }
}
   15544:	08 95       	ret

00015546 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryPrevMenujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1187


/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (MenuHistoryIndex > 0)
   15546:	80 91 19 0d 	lds	r24, 0x0D19	; 0x800d19 <MenuHistoryIndex>
   1554a:	88 23       	and	r24, r24
   1554c:	29 f0       	breq	.+10     	; 0x15558 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1189
  {
    MenuHistoryIndex--;
   1554e:	81 50       	subi	r24, 0x01	; 1
   15550:	80 93 19 0d 	sts	0x0D19, r24	; 0x800d19 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1190
    MenuPrepareStyle();
   15554:	0c 94 8b 9b 	jmp	0x13716	; 0x13716 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1192
  }
}
   15558:	08 95       	ret

0001555a <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:613




bool enable_redraw(uint8_t mask, uint8_t data)
{
   1555a:	30 e0       	ldi	r19, 0x00	; 0
   1555c:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:617
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
  {
    uint8_t v = (1 << i);
   1555e:	e1 e0       	ldi	r30, 0x01	; 1
   15560:	f0 e0       	ldi	r31, 0x00	; 0
   15562:	af 01       	movw	r20, r30
   15564:	02 2e       	mov	r0, r18
   15566:	01 c0       	rjmp	.+2      	; 0x1556a <enable_redraw(unsigned char, unsigned char)+0x10>
   15568:	44 0f       	add	r20, r20
   1556a:	0a 94       	dec	r0
   1556c:	ea f7       	brpl	.-6      	; 0x15568 <enable_redraw(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:618
    if ( (mask & v) != 0 )
   1556e:	98 2f       	mov	r25, r24
   15570:	94 23       	and	r25, r20
   15572:	11 f0       	breq	.+4      	; 0x15578 <enable_redraw(unsigned char, unsigned char)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:619
      if ( (data & v) != 0)
   15574:	46 23       	and	r20, r22
   15576:	39 f4       	brne	.+14     	; 0x15586 <enable_redraw(unsigned char, unsigned char)+0x2c>
   15578:	2f 5f       	subi	r18, 0xFF	; 255
   1557a:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:615


bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
   1557c:	28 30       	cpi	r18, 0x08	; 8
   1557e:	31 05       	cpc	r19, r1
   15580:	81 f7       	brne	.-32     	; 0x15562 <enable_redraw(unsigned char, unsigned char)+0x8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:614



bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
   15582:	80 e0       	ldi	r24, 0x00	; 0
   15584:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:621
  {
    uint8_t v = (1 << i);
    if ( (mask & v) != 0 )
      if ( (data & v) != 0)
      {
        ret = true;
   15586:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:626
        break;
      }
  }
  return ret;
}
   15588:	08 95       	ret

0001558a <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   1558a:	fc 01       	movw	r30, r24
   1558c:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
   1558e:	44 8d       	ldd	r20, Z+28	; 0x1c
   15590:	25 2f       	mov	r18, r21
   15592:	30 e0       	ldi	r19, 0x00	; 0
   15594:	84 2f       	mov	r24, r20
   15596:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   15598:	82 1b       	sub	r24, r18
   1559a:	93 0b       	sbc	r25, r19
   1559c:	54 17       	cp	r21, r20
   1559e:	10 f0       	brcs	.+4      	; 0x155a4 <HardwareSerial::availableForWrite()+0x1a>
   155a0:	cf 96       	adiw	r24, 0x3f	; 63
   155a2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
   155a4:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
   155a6:	08 95       	ret

000155a8 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
   155a8:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
   155aa:	91 8d       	ldd	r25, Z+25	; 0x19
   155ac:	82 8d       	ldd	r24, Z+26	; 0x1a
   155ae:	98 17       	cp	r25, r24
   155b0:	61 f0       	breq	.+24     	; 0x155ca <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
   155b2:	a2 8d       	ldd	r26, Z+26	; 0x1a
   155b4:	ae 0f       	add	r26, r30
   155b6:	bf 2f       	mov	r27, r31
   155b8:	b1 1d       	adc	r27, r1
   155ba:	5d 96       	adiw	r26, 0x1d	; 29
   155bc:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
   155be:	92 8d       	ldd	r25, Z+26	; 0x1a
   155c0:	9f 5f       	subi	r25, 0xFF	; 255
   155c2:	9f 73       	andi	r25, 0x3F	; 63
   155c4:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
   155c6:	90 e0       	ldi	r25, 0x00	; 0
   155c8:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   155ca:	8f ef       	ldi	r24, 0xFF	; 255
   155cc:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
   155ce:	08 95       	ret

000155d0 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
   155d0:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
   155d2:	91 8d       	ldd	r25, Z+25	; 0x19
   155d4:	82 8d       	ldd	r24, Z+26	; 0x1a
   155d6:	98 17       	cp	r25, r24
   155d8:	31 f0       	breq	.+12     	; 0x155e6 <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
   155da:	82 8d       	ldd	r24, Z+26	; 0x1a
   155dc:	e8 0f       	add	r30, r24
   155de:	f1 1d       	adc	r31, r1
   155e0:	85 8d       	ldd	r24, Z+29	; 0x1d
   155e2:	90 e0       	ldi	r25, 0x00	; 0
   155e4:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   155e6:	8f ef       	ldi	r24, 0xFF	; 255
   155e8:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
   155ea:	08 95       	ret

000155ec <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
   155ec:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
   155ee:	91 8d       	ldd	r25, Z+25	; 0x19
   155f0:	22 8d       	ldd	r18, Z+26	; 0x1a
   155f2:	89 2f       	mov	r24, r25
   155f4:	90 e0       	ldi	r25, 0x00	; 0
   155f6:	80 5c       	subi	r24, 0xC0	; 192
   155f8:	9f 4f       	sbci	r25, 0xFF	; 255
   155fa:	82 1b       	sub	r24, r18
   155fc:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
   155fe:	8f 73       	andi	r24, 0x3F	; 63
   15600:	99 27       	eor	r25, r25
   15602:	08 95       	ret

00015604 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
   15604:	84 ee       	ldi	r24, 0xE4	; 228
   15606:	9c e4       	ldi	r25, 0x4C	; 76
   15608:	89 2b       	or	r24, r25
   1560a:	49 f0       	breq	.+18     	; 0x1561e <serialEventRun()+0x1a>
   1560c:	80 e0       	ldi	r24, 0x00	; 0
   1560e:	90 e0       	ldi	r25, 0x00	; 0
   15610:	89 2b       	or	r24, r25
   15612:	29 f0       	breq	.+10     	; 0x1561e <serialEventRun()+0x1a>
   15614:	0e 94 e4 4c 	call	0x99c8	; 0x99c8 <Serial0_available()>
   15618:	81 11       	cpse	r24, r1
   1561a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
   1561e:	80 e0       	ldi	r24, 0x00	; 0
   15620:	90 e0       	ldi	r25, 0x00	; 0
   15622:	89 2b       	or	r24, r25
   15624:	49 f0       	breq	.+18     	; 0x15638 <serialEventRun()+0x34>
   15626:	80 e0       	ldi	r24, 0x00	; 0
   15628:	90 e0       	ldi	r25, 0x00	; 0
   1562a:	89 2b       	or	r24, r25
   1562c:	29 f0       	breq	.+10     	; 0x15638 <serialEventRun()+0x34>
   1562e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   15632:	81 11       	cpse	r24, r1
   15634:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
   15638:	08 95       	ret

0001563a <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>:
_ZN13LCDWIKI_TOUCH22TP_Write_Byte_LowSpeedEh.constprop.231():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:104
	LCD_Set_Rotation(r);
	TP_SetBacklight(10);
}


void LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(uint8_t data)
   1563a:	0f 93       	push	r16
   1563c:	1f 93       	push	r17
   1563e:	cf 93       	push	r28
   15640:	df 93       	push	r29
   15642:	10 e0       	ldi	r17, 0x00	; 0
   15644:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:109
{
        uint8_t val = 0;
        while(val < 8)
        {
                if(data & (1<< val))
   15646:	c8 2f       	mov	r28, r24
   15648:	d0 e0       	ldi	r29, 0x00	; 0
   1564a:	e0 91 ad 0f 	lds	r30, 0x0FAD	; 0x800fad <my_touch+0x17>
   1564e:	f0 91 ae 0f 	lds	r31, 0x0FAE	; 0x800fae <my_touch+0x18>
   15652:	90 91 b6 0f 	lds	r25, 0x0FB6	; 0x800fb6 <my_touch+0x20>
   15656:	9e 01       	movw	r18, r28
   15658:	00 2e       	mov	r0, r16
   1565a:	02 c0       	rjmp	.+4      	; 0x15660 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x26>
   1565c:	35 95       	asr	r19
   1565e:	27 95       	ror	r18
   15660:	0a 94       	dec	r0
   15662:	e2 f7       	brpl	.-8      	; 0x1565c <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x22>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:111
                {
                        TDIN_HIGH;
   15664:	80 81       	ld	r24, Z
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:109
void LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(uint8_t data)
{
        uint8_t val = 0;
        while(val < 8)
        {
                if(data & (1<< val))
   15666:	20 ff       	sbrs	r18, 0
   15668:	31 c0       	rjmp	.+98     	; 0x156cc <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x92>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:111
                {
                        TDIN_HIGH;
   1566a:	98 2b       	or	r25, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:115
                }
                else
                {
                        TDIN_LOW;
   1566c:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:118
                }

		delay_hus(80);
   1566e:	60 e5       	ldi	r22, 0x50	; 80
   15670:	70 e0       	ldi	r23, 0x00	; 0
   15672:	80 e0       	ldi	r24, 0x00	; 0
   15674:	90 e0       	ldi	r25, 0x00	; 0
   15676:	0e 94 e4 81 	call	0x103c8	; 0x103c8 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:119
                TCLK_LOW;
   1567a:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   1567e:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   15682:	80 81       	ld	r24, Z
   15684:	90 91 b4 0f 	lds	r25, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   15688:	90 95       	com	r25
   1568a:	98 23       	and	r25, r24
   1568c:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:120
                delay_hus(120);
   1568e:	68 e7       	ldi	r22, 0x78	; 120
   15690:	70 e0       	ldi	r23, 0x00	; 0
   15692:	80 e0       	ldi	r24, 0x00	; 0
   15694:	90 e0       	ldi	r25, 0x00	; 0
   15696:	0e 94 e4 81 	call	0x103c8	; 0x103c8 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:121
                TCLK_HIGH;
   1569a:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   1569e:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   156a2:	80 81       	ld	r24, Z
   156a4:	90 91 b4 0f 	lds	r25, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   156a8:	89 2b       	or	r24, r25
   156aa:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:122
                delay_hus(120);
   156ac:	68 e7       	ldi	r22, 0x78	; 120
   156ae:	70 e0       	ldi	r23, 0x00	; 0
   156b0:	80 e0       	ldi	r24, 0x00	; 0
   156b2:	90 e0       	ldi	r25, 0x00	; 0
   156b4:	0e 94 e4 81 	call	0x103c8	; 0x103c8 <delay_hus(unsigned long)>
   156b8:	0f 5f       	subi	r16, 0xFF	; 255
   156ba:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:107


void LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(uint8_t data)
{
        uint8_t val = 0;
        while(val < 8)
   156bc:	08 30       	cpi	r16, 0x08	; 8
   156be:	11 05       	cpc	r17, r1
   156c0:	21 f6       	brne	.-120    	; 0x1564a <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x10>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:125
                delay_hus(120);
                TCLK_HIGH;
                delay_hus(120);
                val++;
        }
}
   156c2:	df 91       	pop	r29
   156c4:	cf 91       	pop	r28
   156c6:	1f 91       	pop	r17
   156c8:	0f 91       	pop	r16
   156ca:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:115
                {
                        TDIN_HIGH;
                }
                else
                {
                        TDIN_LOW;
   156cc:	90 95       	com	r25
   156ce:	98 23       	and	r25, r24
   156d0:	cd cf       	rjmp	.-102    	; 0x1566c <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x32>

000156d2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:657
{
	Print(st, x, y);
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
   156d2:	2f 92       	push	r2
   156d4:	3f 92       	push	r3
   156d6:	4f 92       	push	r4
   156d8:	5f 92       	push	r5
   156da:	6f 92       	push	r6
   156dc:	7f 92       	push	r7
   156de:	8f 92       	push	r8
   156e0:	9f 92       	push	r9
   156e2:	af 92       	push	r10
   156e4:	bf 92       	push	r11
   156e6:	cf 92       	push	r12
   156e8:	df 92       	push	r13
   156ea:	ef 92       	push	r14
   156ec:	ff 92       	push	r15
   156ee:	0f 93       	push	r16
   156f0:	1f 93       	push	r17
   156f2:	cf 93       	push	r28
   156f4:	df 93       	push	r29
   156f6:	cd b7       	in	r28, 0x3d	; 61
   156f8:	de b7       	in	r29, 0x3e	; 62
   156fa:	2d 97       	sbiw	r28, 0x0d	; 13
   156fc:	0f b6       	in	r0, 0x3f	; 63
   156fe:	f8 94       	cli
   15700:	de bf       	out	0x3e, r29	; 62
   15702:	0f be       	out	0x3f, r0	; 63
   15704:	cd bf       	out	0x3d, r28	; 61
   15706:	fc 01       	movw	r30, r24
   15708:	a0 81       	ld	r26, Z
   1570a:	b1 81       	ldd	r27, Z+1	; 0x01
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:611
{
	int16_t pos;
	uint16_t len;
	const char * p = (const char *)st;
	size_t n = 0;
	if (x == CENTER || x == RIGHT) 
   1570c:	cb 01       	movw	r24, r22
   1570e:	8e 50       	subi	r24, 0x0E	; 14
   15710:	97 42       	sbci	r25, 0x27	; 39
   15712:	02 97       	sbiw	r24, 0x02	; 2
   15714:	20 f5       	brcc	.+72     	; 0x1575e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x8c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:613
	{
		len = strlen((const char *)st) * 6 * text_size;		
   15716:	fd 01       	movw	r30, r26
   15718:	01 90       	ld	r0, Z+
   1571a:	00 20       	and	r0, r0
   1571c:	e9 f7       	brne	.-6      	; 0x15718 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x46>
   1571e:	31 97       	sbiw	r30, 0x01	; 1
   15720:	ea 1b       	sub	r30, r26
   15722:	fb 0b       	sbc	r31, r27
   15724:	80 91 c5 0f 	lds	r24, 0x0FC5	; 0x800fc5 <my_lcd+0xc>
   15728:	26 e0       	ldi	r18, 0x06	; 6
   1572a:	82 9f       	mul	r24, r18
   1572c:	c0 01       	movw	r24, r0
   1572e:	11 24       	eor	r1, r1
   15730:	8e 9f       	mul	r24, r30
   15732:	90 01       	movw	r18, r0
   15734:	8f 9f       	mul	r24, r31
   15736:	30 0d       	add	r19, r0
   15738:	9e 9f       	mul	r25, r30
   1573a:	30 0d       	add	r19, r0
   1573c:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:614
		pos = (Get_Display_Width() - len); 
   1573e:	80 91 cb 0f 	lds	r24, 0x0FCB	; 0x800fcb <my_lcd+0x12>
   15742:	90 91 cc 0f 	lds	r25, 0x0FCC	; 0x800fcc <my_lcd+0x13>
   15746:	82 1b       	sub	r24, r18
   15748:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:615
		if (x == CENTER)
   1574a:	6e 30       	cpi	r22, 0x0E	; 14
   1574c:	77 42       	sbci	r23, 0x27	; 39
   1574e:	89 f5       	brne	.+98     	; 0x157b2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xe0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:617
		{
			x = pos/2;
   15750:	bc 01       	movw	r22, r24
   15752:	97 ff       	sbrs	r25, 7
   15754:	02 c0       	rjmp	.+4      	; 0x1575a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x88>
   15756:	6f 5f       	subi	r22, 0xFF	; 255
   15758:	7f 4f       	sbci	r23, 0xFF	; 255
   1575a:	75 95       	asr	r23
   1575c:	67 95       	ror	r22
Set_Text_Cousur():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:474
}

//set text coordinate
void LCDWIKI_GUI::Set_Text_Cousur(int16_t x, int16_t y)
{
	text_x = x;
   1575e:	70 93 bc 0f 	sts	0x0FBC, r23	; 0x800fbc <my_lcd+0x3>
   15762:	60 93 bb 0f 	sts	0x0FBB, r22	; 0x800fbb <my_lcd+0x2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:475
	text_y = y;
   15766:	50 93 be 0f 	sts	0x0FBE, r21	; 0x800fbe <my_lcd+0x5>
   1576a:	40 93 bd 0f 	sts	0x0FBD, r20	; 0x800fbd <my_lcd+0x4>
   1576e:	be 83       	std	Y+6, r27	; 0x06
   15770:	ad 83       	std	Y+5, r26	; 0x05
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:627
		}
	}
    Set_Text_Cousur(x, y);
	while(1)
	{
		unsigned char ch = *(p++);//pgm_read_byte(p++);
   15772:	ed 81       	ldd	r30, Y+5	; 0x05
   15774:	fe 81       	ldd	r31, Y+6	; 0x06
   15776:	91 91       	ld	r25, Z+
   15778:	fe 83       	std	Y+6, r31	; 0x06
   1577a:	ed 83       	std	Y+5, r30	; 0x05
   1577c:	89 2f       	mov	r24, r25
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:628
		if(ch == 0)
   1577e:	99 23       	and	r25, r25
   15780:	09 f4       	brne	.+2      	; 0x15784 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xb2>
   15782:	dd c0       	rjmp	.+442    	; 0x1593e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x26c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:792
}

//write a char
size_t LCDWIKI_GUI::write(uint8_t c) 
{
	if (c == '\n') 
   15784:	9a 30       	cpi	r25, 0x0A	; 10
   15786:	c9 f4       	brne	.+50     	; 0x157ba <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:794
	{
    	text_y += text_size*8;
   15788:	80 91 c5 0f 	lds	r24, 0x0FC5	; 0x800fc5 <my_lcd+0xc>
   1578c:	f8 e0       	ldi	r31, 0x08	; 8
   1578e:	8f 9f       	mul	r24, r31
   15790:	c0 01       	movw	r24, r0
   15792:	11 24       	eor	r1, r1
   15794:	20 91 bd 0f 	lds	r18, 0x0FBD	; 0x800fbd <my_lcd+0x4>
   15798:	30 91 be 0f 	lds	r19, 0x0FBE	; 0x800fbe <my_lcd+0x5>
   1579c:	82 0f       	add	r24, r18
   1579e:	93 1f       	adc	r25, r19
   157a0:	90 93 be 0f 	sts	0x0FBE, r25	; 0x800fbe <my_lcd+0x5>
   157a4:	80 93 bd 0f 	sts	0x0FBD, r24	; 0x800fbd <my_lcd+0x4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:795
    	text_x  = 0;
   157a8:	10 92 bc 0f 	sts	0x0FBC, r1	; 0x800fbc <my_lcd+0x3>
   157ac:	10 92 bb 0f 	sts	0x0FBB, r1	; 0x800fbb <my_lcd+0x2>
   157b0:	e0 cf       	rjmp	.-64     	; 0x15772 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xa0>
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:621
		{
			x = pos/2;
		}
		else
		{
			x = pos - 1;
   157b2:	bc 01       	movw	r22, r24
   157b4:	61 50       	subi	r22, 0x01	; 1
   157b6:	71 09       	sbc	r23, r1
   157b8:	d2 cf       	rjmp	.-92     	; 0x1575e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x8c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:797
	if (c == '\n') 
	{
    	text_y += text_size*8;
    	text_x  = 0;
 	} 
	else if(c == '\r')
   157ba:	9d 30       	cpi	r25, 0x0D	; 13
   157bc:	d1 f2       	breq	.-76     	; 0x15772 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xa0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   157be:	20 91 bb 0f 	lds	r18, 0x0FBB	; 0x800fbb <my_lcd+0x2>
   157c2:	30 91 bc 0f 	lds	r19, 0x0FBC	; 0x800fbc <my_lcd+0x3>
   157c6:	39 87       	std	Y+9, r19	; 0x09
   157c8:	28 87       	std	Y+8, r18	; 0x08
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   157ca:	20 91 cb 0f 	lds	r18, 0x0FCB	; 0x800fcb <my_lcd+0x12>
   157ce:	30 91 cc 0f 	lds	r19, 0x0FCC	; 0x800fcc <my_lcd+0x13>
   157d2:	48 85       	ldd	r20, Y+8	; 0x08
   157d4:	59 85       	ldd	r21, Y+9	; 0x09
   157d6:	42 17       	cp	r20, r18
   157d8:	53 07       	cpc	r21, r19
   157da:	0c f0       	brlt	.+2      	; 0x157de <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x10c>
   157dc:	88 c0       	rjmp	.+272    	; 0x158ee <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   157de:	60 90 bd 0f 	lds	r6, 0x0FBD	; 0x800fbd <my_lcd+0x4>
   157e2:	70 90 be 0f 	lds	r7, 0x0FBE	; 0x800fbe <my_lcd+0x5>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   157e6:	20 91 cd 0f 	lds	r18, 0x0FCD	; 0x800fcd <my_lcd+0x14>
   157ea:	30 91 ce 0f 	lds	r19, 0x0FCE	; 0x800fce <my_lcd+0x15>
   157ee:	62 16       	cp	r6, r18
   157f0:	73 06       	cpc	r7, r19
   157f2:	0c f0       	brlt	.+2      	; 0x157f6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x124>
   157f4:	7c c0       	rjmp	.+248    	; 0x158ee <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   157f6:	50 91 c5 0f 	lds	r21, 0x0FC5	; 0x800fc5 <my_lcd+0xc>
   157fa:	5a 83       	std	Y+2, r21	; 0x02
   157fc:	c5 2e       	mov	r12, r21
   157fe:	d1 2c       	mov	r13, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   15800:	28 85       	ldd	r18, Y+8	; 0x08
   15802:	39 85       	ldd	r19, Y+9	; 0x09
   15804:	e6 e0       	ldi	r30, 0x06	; 6
   15806:	5e 9f       	mul	r21, r30
   15808:	20 0d       	add	r18, r0
   1580a:	31 1d       	adc	r19, r1
   1580c:	11 24       	eor	r1, r1
   1580e:	12 16       	cp	r1, r18
   15810:	13 06       	cpc	r1, r19
   15812:	0c f0       	brlt	.+2      	; 0x15816 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x144>
   15814:	6c c0       	rjmp	.+216    	; 0x158ee <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
   15816:	96 01       	movw	r18, r12
   15818:	93 e0       	ldi	r25, 0x03	; 3
   1581a:	22 0f       	add	r18, r18
   1581c:	33 1f       	adc	r19, r19
   1581e:	9a 95       	dec	r25
   15820:	e1 f7       	brne	.-8      	; 0x1581a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x148>
   15822:	26 0d       	add	r18, r6
   15824:	37 1d       	adc	r19, r7
   15826:	12 16       	cp	r1, r18
   15828:	13 06       	cpc	r1, r19
   1582a:	0c f0       	brlt	.+2      	; 0x1582e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x15c>
   1582c:	60 c0       	rjmp	.+192    	; 0x158ee <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:557
	{
    	return;
	}		
  	if(c >= 176)
   1582e:	80 3b       	cpi	r24, 0xB0	; 176
   15830:	08 f0       	brcs	.+2      	; 0x15834 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x162>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:559
  	{
		c++; 
   15832:	8f 5f       	subi	r24, 0xFF	; 255
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   15834:	f0 91 c6 0f 	lds	r31, 0x0FC6	; 0x800fc6 <my_lcd+0xd>
   15838:	ff 83       	std	Y+7, r31	; 0x07
   1583a:	20 90 c1 0f 	lds	r2, 0x0FC1	; 0x800fc1 <my_lcd+0x8>
   1583e:	30 90 c2 0f 	lds	r3, 0x0FC2	; 0x800fc2 <my_lcd+0x9>
   15842:	20 91 bf 0f 	lds	r18, 0x0FBF	; 0x800fbf <my_lcd+0x6>
   15846:	30 91 c0 0f 	lds	r19, 0x0FC0	; 0x800fc0 <my_lcd+0x7>
   1584a:	3c 83       	std	Y+4, r19	; 0x04
   1584c:	2b 83       	std	Y+3, r18	; 0x03
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   1584e:	48 85       	ldd	r20, Y+8	; 0x08
   15850:	59 85       	ldd	r21, Y+9	; 0x09
   15852:	5d 87       	std	Y+13, r21	; 0x0d
   15854:	4c 87       	std	Y+12, r20	; 0x0c
   15856:	5a 01       	movw	r10, r20
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   15858:	19 82       	std	Y+1, r1	; 0x01
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   1585a:	20 e0       	ldi	r18, 0x00	; 0
   1585c:	36 e7       	ldi	r19, 0x76	; 118
   1585e:	24 1b       	sub	r18, r20
   15860:	35 0b       	sbc	r19, r21
   15862:	f9 01       	movw	r30, r18
   15864:	45 e0       	ldi	r20, 0x05	; 5
   15866:	84 9f       	mul	r24, r20
   15868:	e0 0d       	add	r30, r0
   1586a:	f1 1d       	adc	r31, r1
   1586c:	11 24       	eor	r1, r1
   1586e:	fb 87       	std	Y+11, r31	; 0x0b
   15870:	ea 87       	std	Y+10, r30	; 0x0a
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   15872:	59 81       	ldd	r21, Y+1	; 0x01
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
    	{
      		line = 0x0;
   15874:	e0 e0       	ldi	r30, 0x00	; 0
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   15876:	55 30       	cpi	r21, 0x05	; 5
   15878:	29 f0       	breq	.+10     	; 0x15884 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1b2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   1587a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1587c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1587e:	ea 0d       	add	r30, r10
   15880:	fb 1d       	adc	r31, r11
   15882:	e4 91       	lpm	r30, Z
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    	{
      		line = 0x0;
   15884:	23 01       	movw	r4, r6
   15886:	91 2c       	mov	r9, r1
   15888:	81 2c       	mov	r8, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:574
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
   1588a:	8e 2f       	mov	r24, r30
   1588c:	90 e0       	ldi	r25, 0x00	; 0
   1588e:	99 87       	std	Y+9, r25	; 0x09
   15890:	88 87       	std	Y+8, r24	; 0x08
   15892:	e0 ff       	sbrs	r30, 0
   15894:	3c c0       	rjmp	.+120    	; 0x1590e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x23c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
			{
        		if (size == 1)
   15896:	9a 81       	ldd	r25, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:578
        		{
        			Draw_Pixe(x+i, y+j, color);
   15898:	2b 81       	ldd	r18, Y+3	; 0x03
   1589a:	3c 81       	ldd	r19, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:582
        		}
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
   1589c:	eb 80       	ldd	r14, Y+3	; 0x03
   1589e:	fc 80       	ldd	r15, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
			{
        		if (size == 1)
   158a0:	91 30       	cpi	r25, 0x01	; 1
   158a2:	09 f0       	breq	.+2      	; 0x158a6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1d4>
   158a4:	42 c0       	rjmp	.+132    	; 0x1592a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
			{
				if(!mode)
				{
	        		if (size == 1) 
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   158a6:	a3 01       	movw	r20, r6
   158a8:	48 0d       	add	r20, r8
   158aa:	59 1d       	adc	r21, r9
   158ac:	b5 01       	movw	r22, r10
   158ae:	89 eb       	ldi	r24, 0xB9	; 185
   158b0:	9f e0       	ldi	r25, 0x0F	; 15
   158b2:	0e 94 09 42 	call	0x8412	; 0x8412 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:599
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
					}
				}
			}
      		line >>= 1;
   158b6:	e8 85       	ldd	r30, Y+8	; 0x08
   158b8:	f9 85       	ldd	r31, Y+9	; 0x09
   158ba:	f5 95       	asr	r31
   158bc:	e7 95       	ror	r30
   158be:	3f ef       	ldi	r19, 0xFF	; 255
   158c0:	83 1a       	sub	r8, r19
   158c2:	93 0a       	sbc	r9, r19
   158c4:	4c 0c       	add	r4, r12
   158c6:	5d 1c       	adc	r5, r13
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:572
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
   158c8:	48 e0       	ldi	r20, 0x08	; 8
   158ca:	84 16       	cp	r8, r20
   158cc:	91 04       	cpc	r9, r1
   158ce:	e9 f6       	brne	.-70     	; 0x1588a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1b8>
   158d0:	5f ef       	ldi	r21, 0xFF	; 255
   158d2:	a5 1a       	sub	r10, r21
   158d4:	b5 0a       	sbc	r11, r21
   158d6:	8c 85       	ldd	r24, Y+12	; 0x0c
   158d8:	9d 85       	ldd	r25, Y+13	; 0x0d
   158da:	8c 0d       	add	r24, r12
   158dc:	9d 1d       	adc	r25, r13
   158de:	9d 87       	std	Y+13, r25	; 0x0d
   158e0:	8c 87       	std	Y+12, r24	; 0x0c
   158e2:	99 81       	ldd	r25, Y+1	; 0x01
   158e4:	9f 5f       	subi	r25, 0xFF	; 255
   158e6:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   158e8:	96 30       	cpi	r25, 0x06	; 6
   158ea:	09 f0       	breq	.+2      	; 0x158ee <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
   158ec:	c2 cf       	rjmp	.-124    	; 0x15872 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1a0>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:803
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    	text_x += text_size*6;		
   158ee:	20 91 c5 0f 	lds	r18, 0x0FC5	; 0x800fc5 <my_lcd+0xc>
   158f2:	80 91 bb 0f 	lds	r24, 0x0FBB	; 0x800fbb <my_lcd+0x2>
   158f6:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x3>
   158fa:	e6 e0       	ldi	r30, 0x06	; 6
   158fc:	2e 9f       	mul	r18, r30
   158fe:	80 0d       	add	r24, r0
   15900:	91 1d       	adc	r25, r1
   15902:	11 24       	eor	r1, r1
   15904:	90 93 bc 0f 	sts	0x0FBC, r25	; 0x800fbc <my_lcd+0x3>
   15908:	80 93 bb 0f 	sts	0x0FBB, r24	; 0x800fbb <my_lcd+0x2>
   1590c:	32 cf       	rjmp	.-412    	; 0x15772 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xa0>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:585
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
        		}
        	} 
			else if (bg != color) 				
   1590e:	eb 81       	ldd	r30, Y+3	; 0x03
   15910:	fc 81       	ldd	r31, Y+4	; 0x04
   15912:	2e 16       	cp	r2, r30
   15914:	3f 06       	cpc	r3, r31
   15916:	79 f2       	breq	.-98     	; 0x158b6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:587
			{
				if(!mode)
   15918:	ff 81       	ldd	r31, Y+7	; 0x07
   1591a:	f1 11       	cpse	r31, r1
   1591c:	cc cf       	rjmp	.-104    	; 0x158b6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
				{
	        		if (size == 1) 
   1591e:	2a 81       	ldd	r18, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   15920:	71 01       	movw	r14, r2
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
        	} 
			else if (bg != color) 				
			{
				if(!mode)
				{
	        		if (size == 1) 
   15922:	21 30       	cpi	r18, 0x01	; 1
   15924:	11 f4       	brne	.+4      	; 0x1592a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   15926:	91 01       	movw	r18, r2
   15928:	be cf       	rjmp	.-132    	; 0x158a6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1d4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   1592a:	86 01       	movw	r16, r12
   1592c:	96 01       	movw	r18, r12
   1592e:	a2 01       	movw	r20, r4
   15930:	6c 85       	ldd	r22, Y+12	; 0x0c
   15932:	7d 85       	ldd	r23, Y+13	; 0x0d
   15934:	89 eb       	ldi	r24, 0xB9	; 185
   15936:	9f e0       	ldi	r25, 0x0F	; 15
   15938:	0e 94 56 40 	call	0x80ac	; 0x80ac <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   1593c:	bc cf       	rjmp	.-136    	; 0x158b6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1e4>
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:660

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
}
   1593e:	2d 96       	adiw	r28, 0x0d	; 13
   15940:	0f b6       	in	r0, 0x3f	; 63
   15942:	f8 94       	cli
   15944:	de bf       	out	0x3e, r29	; 62
   15946:	0f be       	out	0x3f, r0	; 63
   15948:	cd bf       	out	0x3d, r28	; 61
   1594a:	df 91       	pop	r29
   1594c:	cf 91       	pop	r28
   1594e:	1f 91       	pop	r17
   15950:	0f 91       	pop	r16
   15952:	ff 90       	pop	r15
   15954:	ef 90       	pop	r14
   15956:	df 90       	pop	r13
   15958:	cf 90       	pop	r12
   1595a:	bf 90       	pop	r11
   1595c:	af 90       	pop	r10
   1595e:	9f 90       	pop	r9
   15960:	8f 90       	pop	r8
   15962:	7f 90       	pop	r7
   15964:	6f 90       	pop	r6
   15966:	5f 90       	pop	r5
   15968:	4f 90       	pop	r4
   1596a:	3f 90       	pop	r3
   1596c:	2f 90       	pop	r2
   1596e:	08 95       	ret

00015970 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>:
_ZN12PubSubClient8readByteEPh.constprop.160():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:209
    }
    return true;
}

// reads a byte into result
boolean PubSubClient::readByte(uint8_t * result) {
   15970:	cf 92       	push	r12
   15972:	df 92       	push	r13
   15974:	ef 92       	push	r14
   15976:	ff 92       	push	r15
   15978:	cf 93       	push	r28
   1597a:	df 93       	push	r29
   1597c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:210
   uint32_t previousMillis = millis();
   1597e:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   15982:	6b 01       	movw	r12, r22
   15984:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:211
   while(!_client->available()) {
   15986:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   1598a:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   1598e:	dc 01       	movw	r26, r24
   15990:	ed 91       	ld	r30, X+
   15992:	fc 91       	ld	r31, X
   15994:	00 84       	ldd	r0, Z+8	; 0x08
   15996:	f1 85       	ldd	r31, Z+9	; 0x09
   15998:	e0 2d       	mov	r30, r0
   1599a:	19 95       	eicall
   1599c:	89 2b       	or	r24, r25
   1599e:	69 f4       	brne	.+26     	; 0x159ba <PubSubClient::readByte(unsigned char*) [clone .constprop.160]+0x4a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:212
     uint32_t currentMillis = millis();
   159a0:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:213
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 10)){
   159a4:	6c 19       	sub	r22, r12
   159a6:	7d 09       	sbc	r23, r13
   159a8:	8e 09       	sbc	r24, r14
   159aa:	9f 09       	sbc	r25, r15
   159ac:	62 33       	cpi	r22, 0x32	; 50
   159ae:	71 05       	cpc	r23, r1
   159b0:	81 05       	cpc	r24, r1
   159b2:	91 05       	cpc	r25, r1
   159b4:	40 f3       	brcs	.-48     	; 0x15986 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:214
       return false;
   159b6:	80 e0       	ldi	r24, 0x00	; 0
   159b8:	0d c0       	rjmp	.+26     	; 0x159d4 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:217
     }
   }
   *result = _client->read();
   159ba:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   159be:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   159c2:	dc 01       	movw	r26, r24
   159c4:	ed 91       	ld	r30, X+
   159c6:	fc 91       	ld	r31, X
   159c8:	02 84       	ldd	r0, Z+10	; 0x0a
   159ca:	f3 85       	ldd	r31, Z+11	; 0x0b
   159cc:	e0 2d       	mov	r30, r0
   159ce:	19 95       	eicall
   159d0:	88 83       	st	Y, r24
   159d2:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:219
   return true;
}
   159d4:	df 91       	pop	r29
   159d6:	cf 91       	pop	r28
   159d8:	ff 90       	pop	r15
   159da:	ef 90       	pop	r14
   159dc:	df 90       	pop	r13
   159de:	cf 90       	pop	r12
   159e0:	08 95       	ret

000159e2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>:
_ZN13LCDWIKI_TOUCH15TP_SetBacklightEh.constprop.230():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	y0=0;
	x=0xffff;
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_SetBacklight(uint8_t ibacklight)
   159e2:	1f 93       	push	r17
   159e4:	cf 93       	push	r28
   159e6:	df 93       	push	r29
   159e8:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:59
{
backlight = ibacklight;
   159ea:	c6 e9       	ldi	r28, 0x96	; 150
   159ec:	df e0       	ldi	r29, 0x0F	; 15
   159ee:	8f 87       	std	Y+15, r24	; 0x0f
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:60
TCS_LOW;
   159f0:	e9 89       	ldd	r30, Y+17	; 0x11
   159f2:	fa 89       	ldd	r31, Y+18	; 0x12
   159f4:	90 81       	ld	r25, Z
   159f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
   159f8:	80 95       	com	r24
   159fa:	89 23       	and	r24, r25
   159fc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:61
SDCS_LOW;
   159fe:	eb 8d       	ldd	r30, Y+27	; 0x1b
   15a00:	fc 8d       	ldd	r31, Y+28	; 0x1c
   15a02:	90 81       	ld	r25, Z
   15a04:	8a a1       	ldd	r24, Y+34	; 0x22
   15a06:	80 95       	com	r24
   15a08:	89 23       	and	r24, r25
   15a0a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:62
delay_hus(200);
   15a0c:	68 ec       	ldi	r22, 0xC8	; 200
   15a0e:	70 e0       	ldi	r23, 0x00	; 0
   15a10:	80 e0       	ldi	r24, 0x00	; 0
   15a12:	90 e0       	ldi	r25, 0x00	; 0
   15a14:	0e 94 e4 81 	call	0x103c8	; 0x103c8 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:63
TCS_HIGH;
   15a18:	e9 89       	ldd	r30, Y+17	; 0x11
   15a1a:	fa 89       	ldd	r31, Y+18	; 0x12
   15a1c:	80 81       	ld	r24, Z
   15a1e:	9d 8d       	ldd	r25, Y+29	; 0x1d
   15a20:	89 2b       	or	r24, r25
   15a22:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:64
SDCS_HIGH;
   15a24:	eb 8d       	ldd	r30, Y+27	; 0x1b
   15a26:	fc 8d       	ldd	r31, Y+28	; 0x1c
   15a28:	80 81       	ld	r24, Z
   15a2a:	9a a1       	ldd	r25, Y+34	; 0x22
   15a2c:	89 2b       	or	r24, r25
   15a2e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:65
TP_Write_Byte_LowSpeed(SET_BACKLIGHT);
   15a30:	85 e5       	ldi	r24, 0x55	; 85
   15a32:	0e 94 1d ab 	call	0x1563a	; 0x1563a <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
TP_Write_Byte_LowSpeed(ibacklight);
   15a36:	81 2f       	mov	r24, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:67
}
   15a38:	df 91       	pop	r29
   15a3a:	cf 91       	pop	r28
   15a3c:	1f 91       	pop	r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
SDCS_LOW;
delay_hus(200);
TCS_HIGH;
SDCS_HIGH;
TP_Write_Byte_LowSpeed(SET_BACKLIGHT);
TP_Write_Byte_LowSpeed(ibacklight);
   15a3e:	0c 94 1d ab 	jmp	0x1563a	; 0x1563a <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>

00015a42 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.228]>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii.constprop.228():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:93
{
	Fill_Rect(x, y, 1, h, draw_color);
}

//draw a horizontal line
void LCDWIKI_GUI::Draw_Fast_HLine(int16_t x, int16_t y, int16_t w)
   15a42:	ef 92       	push	r14
   15a44:	ff 92       	push	r15
   15a46:	0f 93       	push	r16
   15a48:	1f 93       	push	r17
   15a4a:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:95
{
	Fill_Rect(x, y, w, 1, draw_color);
   15a4c:	e0 90 c3 0f 	lds	r14, 0x0FC3	; 0x800fc3 <my_lcd+0xa>
   15a50:	f0 90 c4 0f 	lds	r15, 0x0FC4	; 0x800fc4 <my_lcd+0xb>
   15a54:	01 e0       	ldi	r16, 0x01	; 1
   15a56:	10 e0       	ldi	r17, 0x00	; 0
   15a58:	ab 01       	movw	r20, r22
   15a5a:	bc 01       	movw	r22, r24
   15a5c:	89 eb       	ldi	r24, 0xB9	; 185
   15a5e:	9f e0       	ldi	r25, 0x0F	; 15
   15a60:	0e 94 56 40 	call	0x80ac	; 0x80ac <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:96
}
   15a64:	1f 91       	pop	r17
   15a66:	0f 91       	pop	r16
   15a68:	ff 90       	pop	r15
   15a6a:	ef 90       	pop	r14
   15a6c:	08 95       	ret

00015a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.227():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:162
    	}
  	}
}

//draw a rectangle
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   15a6e:	8f 92       	push	r8
   15a70:	9f 92       	push	r9
   15a72:	af 92       	push	r10
   15a74:	bf 92       	push	r11
   15a76:	cf 92       	push	r12
   15a78:	df 92       	push	r13
   15a7a:	ef 92       	push	r14
   15a7c:	ff 92       	push	r15
   15a7e:	0f 93       	push	r16
   15a80:	1f 93       	push	r17
   15a82:	cf 93       	push	r28
   15a84:	df 93       	push	r29
   15a86:	6c 01       	movw	r12, r24
   15a88:	eb 01       	movw	r28, r22
   15a8a:	4a 01       	movw	r8, r20
   15a8c:	79 01       	movw	r14, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:164
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
   15a8e:	9a 01       	movw	r18, r20
   15a90:	28 1b       	sub	r18, r24
   15a92:	39 0b       	sbc	r19, r25
   15a94:	89 01       	movw	r16, r18
   15a96:	0f 5f       	subi	r16, 0xFF	; 255
   15a98:	1f 4f       	sbci	r17, 0xFF	; 255
   15a9a:	c7 01       	movw	r24, r14
   15a9c:	86 1b       	sub	r24, r22
   15a9e:	97 0b       	sbc	r25, r23
   15aa0:	5c 01       	movw	r10, r24
   15aa2:	4f ef       	ldi	r20, 0xFF	; 255
   15aa4:	a4 1a       	sub	r10, r20
   15aa6:	b4 0a       	sbc	r11, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:165
	if (w < 0) 
   15aa8:	17 ff       	sbrs	r17, 7
   15aaa:	04 c0       	rjmp	.+8      	; 0x15ab4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]+0x46>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:168
	{ 
		x1 = x2; 
		w = -w; 
   15aac:	89 01       	movw	r16, r18
   15aae:	00 95       	com	r16
   15ab0:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:167
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
	if (w < 0) 
	{ 
		x1 = x2; 
   15ab2:	64 01       	movw	r12, r8
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:170
		w = -w; 
	}
	if (h < 0) 
   15ab4:	b7 fe       	sbrs	r11, 7
   15ab6:	04 c0       	rjmp	.+8      	; 0x15ac0 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]+0x52>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:173
	{ 
		y1 = y2; 
		h = -h; 
   15ab8:	5c 01       	movw	r10, r24
   15aba:	a0 94       	com	r10
   15abc:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:172
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   15abe:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:175
		h = -h; 
	}
	Draw_Fast_HLine(x1, y1, w);
   15ac0:	a8 01       	movw	r20, r16
   15ac2:	be 01       	movw	r22, r28
   15ac4:	c6 01       	movw	r24, r12
   15ac6:	0e 94 21 ad 	call	0x15a42	; 0x15a42 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.228]>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:176
  	Draw_Fast_HLine(x1, y2, w);
   15aca:	a8 01       	movw	r20, r16
   15acc:	b7 01       	movw	r22, r14
   15ace:	c6 01       	movw	r24, r12
   15ad0:	0e 94 21 ad 	call	0x15a42	; 0x15a42 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.228]>
Draw_Fast_VLine():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:89
}

//draw a vertical line 
void LCDWIKI_GUI::Draw_Fast_VLine(int16_t x, int16_t y, int16_t h)
{
	Fill_Rect(x, y, 1, h, draw_color);
   15ad4:	e0 90 c3 0f 	lds	r14, 0x0FC3	; 0x800fc3 <my_lcd+0xa>
   15ad8:	f0 90 c4 0f 	lds	r15, 0x0FC4	; 0x800fc4 <my_lcd+0xb>
   15adc:	85 01       	movw	r16, r10
   15ade:	21 e0       	ldi	r18, 0x01	; 1
   15ae0:	30 e0       	ldi	r19, 0x00	; 0
   15ae2:	ae 01       	movw	r20, r28
   15ae4:	b6 01       	movw	r22, r12
   15ae6:	89 eb       	ldi	r24, 0xB9	; 185
   15ae8:	9f e0       	ldi	r25, 0x0F	; 15
   15aea:	0e 94 56 40 	call	0x80ac	; 0x80ac <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   15aee:	e0 90 c3 0f 	lds	r14, 0x0FC3	; 0x800fc3 <my_lcd+0xa>
   15af2:	f0 90 c4 0f 	lds	r15, 0x0FC4	; 0x800fc4 <my_lcd+0xb>
   15af6:	21 e0       	ldi	r18, 0x01	; 1
   15af8:	30 e0       	ldi	r19, 0x00	; 0
   15afa:	ae 01       	movw	r20, r28
   15afc:	b4 01       	movw	r22, r8
   15afe:	89 eb       	ldi	r24, 0xB9	; 185
   15b00:	9f e0       	ldi	r25, 0x0F	; 15
   15b02:	0e 94 56 40 	call	0x80ac	; 0x80ac <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.227():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:179
	}
	Draw_Fast_HLine(x1, y1, w);
  	Draw_Fast_HLine(x1, y2, w);
	Draw_Fast_VLine(x1, y1, h);
	Draw_Fast_VLine(x2, y1, h);
}
   15b06:	df 91       	pop	r29
   15b08:	cf 91       	pop	r28
   15b0a:	1f 91       	pop	r17
   15b0c:	0f 91       	pop	r16
   15b0e:	ff 90       	pop	r15
   15b10:	ef 90       	pop	r14
   15b12:	df 90       	pop	r13
   15b14:	cf 90       	pop	r12
   15b16:	bf 90       	pop	r11
   15b18:	af 90       	pop	r10
   15b1a:	9f 90       	pop	r9
   15b1c:	8f 90       	pop	r8
   15b1e:	08 95       	ret

00015b20 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.226]>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii.constprop.226():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:70
	Read_GRAM(x, y, &colour, 1, 1);
	return colour;
}

//fill a rectangle
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   15b20:	ef 92       	push	r14
   15b22:	ff 92       	push	r15
   15b24:	0f 93       	push	r16
   15b26:	1f 93       	push	r17
   15b28:	cf 93       	push	r28
   15b2a:	df 93       	push	r29
   15b2c:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:72
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   15b2e:	ea 01       	movw	r28, r20
   15b30:	c8 1b       	sub	r28, r24
   15b32:	d9 0b       	sbc	r29, r25
   15b34:	9e 01       	movw	r18, r28
   15b36:	2f 5f       	subi	r18, 0xFF	; 255
   15b38:	3f 4f       	sbci	r19, 0xFF	; 255
   15b3a:	df 01       	movw	r26, r30
   15b3c:	a6 1b       	sub	r26, r22
   15b3e:	b7 0b       	sbc	r27, r23
   15b40:	8d 01       	movw	r16, r26
   15b42:	0f 5f       	subi	r16, 0xFF	; 255
   15b44:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:73
   	if (w < 0) 
   15b46:	37 ff       	sbrs	r19, 7
   15b48:	04 c0       	rjmp	.+8      	; 0x15b52 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.226]+0x32>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:76
	{ 
		x1 = x2; 
		w = -w; 
   15b4a:	9e 01       	movw	r18, r28
   15b4c:	20 95       	com	r18
   15b4e:	30 95       	com	r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:75
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   	if (w < 0) 
	{ 
		x1 = x2; 
   15b50:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:78
		w = -w; 
	}
	if (h < 0) 
   15b52:	17 ff       	sbrs	r17, 7
   15b54:	04 c0       	rjmp	.+8      	; 0x15b5e <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.226]+0x3e>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:81
	{ 
		y1 = y2; 
		h = -h; 
   15b56:	8d 01       	movw	r16, r26
   15b58:	00 95       	com	r16
   15b5a:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:80
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   15b5c:	bf 01       	movw	r22, r30
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:83
		h = -h; 
	}
	Fill_Rect(x1, y1, w, h, draw_color);
   15b5e:	e0 90 c3 0f 	lds	r14, 0x0FC3	; 0x800fc3 <my_lcd+0xa>
   15b62:	f0 90 c4 0f 	lds	r15, 0x0FC4	; 0x800fc4 <my_lcd+0xb>
   15b66:	ab 01       	movw	r20, r22
   15b68:	bc 01       	movw	r22, r24
   15b6a:	89 eb       	ldi	r24, 0xB9	; 185
   15b6c:	9f e0       	ldi	r25, 0x0F	; 15
   15b6e:	0e 94 56 40 	call	0x80ac	; 0x80ac <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:84
}
   15b72:	df 91       	pop	r29
   15b74:	cf 91       	pop	r28
   15b76:	1f 91       	pop	r17
   15b78:	0f 91       	pop	r16
   15b7a:	ff 90       	pop	r15
   15b7c:	ef 90       	pop	r14
   15b7e:	08 95       	ret

00015b80 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.222]>:
_ZN9SRAM_23LC16sendAddressBytesEm.constprop.222():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:133
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
   15b80:	cf 92       	push	r12
   15b82:	df 92       	push	r13
   15b84:	ef 92       	push	r14
   15b86:	ff 92       	push	r15
   15b88:	6b 01       	movw	r12, r22
   15b8a:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
{
  if (_capacity > 0x10000) {
   15b8c:	80 91 7e 0e 	lds	r24, 0x0E7E	; 0x800e7e <SRAM+0x4>
   15b90:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <SRAM+0x5>
   15b94:	a0 91 80 0e 	lds	r26, 0x0E80	; 0x800e80 <SRAM+0x6>
   15b98:	b0 91 81 0e 	lds	r27, 0x0E81	; 0x800e81 <SRAM+0x7>
   15b9c:	01 97       	sbiw	r24, 0x01	; 1
   15b9e:	a1 40       	sbci	r26, 0x01	; 1
   15ba0:	b1 05       	cpc	r27, r1
   15ba2:	48 f0       	brcs	.+18     	; 0x15bb6 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.222]+0x36>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   15ba4:	b7 01       	movw	r22, r14
   15ba6:	88 27       	eor	r24, r24
   15ba8:	99 27       	eor	r25, r25
   15baa:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   15bae:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   15bb2:	0e 94 1b 81 	call	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   15bb6:	99 27       	eor	r25, r25
   15bb8:	8f 2d       	mov	r24, r15
   15bba:	7e 2d       	mov	r23, r14
   15bbc:	6d 2d       	mov	r22, r13
   15bbe:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   15bc2:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   15bc6:	0e 94 1b 81 	call	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   15bca:	6c 2d       	mov	r22, r12
   15bcc:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   15bd0:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   15bd4:	ff 90       	pop	r15
   15bd6:	ef 90       	pop	r14
   15bd8:	df 90       	pop	r13
   15bda:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   15bdc:	0c 94 1b 81 	jmp	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>

00015be0 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>:
_ZN9SRAM_23LC9writeByteEmh.constprop.218():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:78
  endCommand();

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
   15be0:	cf 92       	push	r12
   15be2:	df 92       	push	r13
   15be4:	ef 92       	push	r14
   15be6:	ff 92       	push	r15
   15be8:	cf 93       	push	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
{
  if (address >= _capacity) {
   15bea:	c0 90 7e 0e 	lds	r12, 0x0E7E	; 0x800e7e <SRAM+0x4>
   15bee:	d0 90 7f 0e 	lds	r13, 0x0E7F	; 0x800e7f <SRAM+0x5>
   15bf2:	e0 90 80 0e 	lds	r14, 0x0E80	; 0x800e80 <SRAM+0x6>
   15bf6:	f0 90 81 0e 	lds	r15, 0x0E81	; 0x800e81 <SRAM+0x7>
   15bfa:	6c 15       	cp	r22, r12
   15bfc:	7d 05       	cpc	r23, r13
   15bfe:	8e 05       	cpc	r24, r14
   15c00:	9f 05       	cpc	r25, r15
   15c02:	38 f5       	brcc	.+78     	; 0x15c52 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]+0x72>
   15c04:	c4 2f       	mov	r28, r20
   15c06:	6b 01       	movw	r12, r22
   15c08:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   15c0a:	60 e0       	ldi	r22, 0x00	; 0
   15c0c:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   15c10:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   15c14:	62 e0       	ldi	r22, 0x02	; 2
   15c16:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   15c1a:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   15c1e:	0e 94 1b 81 	call	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   15c22:	c7 01       	movw	r24, r14
   15c24:	b6 01       	movw	r22, r12
   15c26:	0e 94 c0 ad 	call	0x15b80	; 0x15b80 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.222]>
_ZN9SRAM_23LC9writeByteEmh.constprop.218():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
   15c2a:	6c 2f       	mov	r22, r28
   15c2c:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   15c30:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   15c34:	0e 94 1b 81 	call	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   15c38:	61 e0       	ldi	r22, 0x01	; 1
   15c3a:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   15c3e:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
   15c42:	81 e0       	ldi	r24, 0x01	; 1
   15c44:	90 e0       	ldi	r25, 0x00	; 0
_ZN9SRAM_23LC9writeByteEmh.constprop.218():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
  endCommand();
  return(1);
}
   15c46:	cf 91       	pop	r28
   15c48:	ff 90       	pop	r15
   15c4a:	ef 90       	pop	r14
   15c4c:	df 90       	pop	r13
   15c4e:	cf 90       	pop	r12
   15c50:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   15c52:	90 e0       	ldi	r25, 0x00	; 0
   15c54:	80 e0       	ldi	r24, 0x00	; 0
   15c56:	f7 cf       	rjmp	.-18     	; 0x15c46 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]+0x66>

00015c58 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>:
_ZN9SRAM_23LC8readByteEm.constprop.216():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:65
void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
   15c58:	cf 92       	push	r12
   15c5a:	df 92       	push	r13
   15c5c:	ef 92       	push	r14
   15c5e:	ff 92       	push	r15
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
{
  if (address >= _capacity) {
   15c60:	c0 90 7e 0e 	lds	r12, 0x0E7E	; 0x800e7e <SRAM+0x4>
   15c64:	d0 90 7f 0e 	lds	r13, 0x0E7F	; 0x800e7f <SRAM+0x5>
   15c68:	e0 90 80 0e 	lds	r14, 0x0E80	; 0x800e80 <SRAM+0x6>
   15c6c:	f0 90 81 0e 	lds	r15, 0x0E81	; 0x800e81 <SRAM+0x7>
   15c70:	6c 15       	cp	r22, r12
   15c72:	7d 05       	cpc	r23, r13
   15c74:	8e 05       	cpc	r24, r14
   15c76:	9f 05       	cpc	r25, r15
   15c78:	28 f5       	brcc	.+74     	; 0x15cc4 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]+0x6c>
   15c7a:	6b 01       	movw	r12, r22
   15c7c:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   15c7e:	60 e0       	ldi	r22, 0x00	; 0
   15c80:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   15c84:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   15c88:	63 e0       	ldi	r22, 0x03	; 3
   15c8a:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   15c8e:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   15c92:	0e 94 1b 81 	call	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   15c96:	c7 01       	movw	r24, r14
   15c98:	b6 01       	movw	r22, r12
   15c9a:	0e 94 c0 ad 	call	0x15b80	; 0x15b80 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.222]>
_ZN9SRAM_23LC8readByteEm.constprop.216():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   15c9e:	6f ef       	ldi	r22, 0xFF	; 255
   15ca0:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   15ca4:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   15ca8:	0e 94 1b 81 	call	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
   15cac:	f8 2e       	mov	r15, r24
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   15cae:	61 e0       	ldi	r22, 0x01	; 1
   15cb0:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   15cb4:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
_ZN9SRAM_23LC8readByteEm.constprop.216():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76
  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
  endCommand();

  return(ret);
}
   15cb8:	8f 2d       	mov	r24, r15
   15cba:	ff 90       	pop	r15
   15cbc:	ef 90       	pop	r14
   15cbe:	df 90       	pop	r13
   15cc0:	cf 90       	pop	r12
   15cc2:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   15cc4:	f1 2c       	mov	r15, r1
   15cc6:	f8 cf       	rjmp	.-16     	; 0x15cb8 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]+0x60>

00015cc8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>:
_ZN12PubSubClient11writeStringEPKcPhj.constprop.214():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:524
    _state = MQTT_DISCONNECTED;
    _client->stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   15cc8:	cf 93       	push	r28
   15cca:	df 93       	push	r29
   15ccc:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:527
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   15cce:	fa 01       	movw	r30, r20
   15cd0:	32 96       	adiw	r30, 0x02	; 2
   15cd2:	e6 0f       	add	r30, r22
   15cd4:	f7 1f       	adc	r31, r23
   15cd6:	dc 01       	movw	r26, r24
   15cd8:	9d 01       	movw	r18, r26
   15cda:	2c 1b       	sub	r18, r28
   15cdc:	3d 0b       	sbc	r19, r29
   15cde:	cf 01       	movw	r24, r30
   15ce0:	86 1b       	sub	r24, r22
   15ce2:	97 0b       	sbc	r25, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:528
    while (*idp) {
   15ce4:	4d 91       	ld	r20, X+
   15ce6:	44 23       	and	r20, r20
   15ce8:	11 f0       	breq	.+4      	; 0x15cee <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]+0x26>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:529
        buf[pos++] = *idp++;
   15cea:	41 93       	st	Z+, r20
   15cec:	f5 cf       	rjmp	.-22     	; 0x15cd8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:532
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   15cee:	ac 01       	movw	r20, r24
   15cf0:	42 1b       	sub	r20, r18
   15cf2:	53 0b       	sbc	r21, r19
   15cf4:	64 0f       	add	r22, r20
   15cf6:	75 1f       	adc	r23, r21
   15cf8:	fb 01       	movw	r30, r22
   15cfa:	32 97       	sbiw	r30, 0x02	; 2
   15cfc:	30 83       	st	Z, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:533
    buf[pos-i-1] = (i & 0xFF);
   15cfe:	61 50       	subi	r22, 0x01	; 1
   15d00:	71 09       	sbc	r23, r1
   15d02:	fb 01       	movw	r30, r22
   15d04:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:535
    return pos;
}
   15d06:	df 91       	pop	r29
   15d08:	cf 91       	pop	r28
   15d0a:	08 95       	ret

00015d0c <twi_readFrom.part.0.constprop.201>:
twi_readFrom.part.0.constprop.201():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
   15d0c:	90 91 64 0d 	lds	r25, 0x0D64	; 0x800d64 <twi_state.lto_priv.272>
   15d10:	91 11       	cpse	r25, r1
   15d12:	fc cf       	rjmp	.-8      	; 0x15d0c <twi_readFrom.part.0.constprop.201>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
   15d14:	91 e0       	ldi	r25, 0x01	; 1
   15d16:	90 93 64 0d 	sts	0x0D64, r25	; 0x800d64 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:161
  twi_sendStop = sendStop;
   15d1a:	90 93 63 0d 	sts	0x0D63, r25	; 0x800d63 <twi_sendStop.lto_priv.270>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:163
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
   15d1e:	2f ef       	ldi	r18, 0xFF	; 255
   15d20:	20 93 62 0d 	sts	0x0D62, r18	; 0x800d62 <twi_error.lto_priv.273>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
   15d24:	10 92 61 0d 	sts	0x0D61, r1	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
   15d28:	26 0f       	add	r18, r22
   15d2a:	20 93 60 0d 	sts	0x0D60, r18	; 0x800d60 <twi_masterBufferLength.lto_priv.268>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:175
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
   15d2e:	90 93 5f 0d 	sts	0x0D5F, r25	; 0x800d5f <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:176
  twi_slarw |= address << 1;
   15d32:	90 91 5f 0d 	lds	r25, 0x0D5F	; 0x800d5f <twi_slarw.lto_priv.266>
   15d36:	88 0f       	add	r24, r24
   15d38:	89 2b       	or	r24, r25
   15d3a:	80 93 5f 0d 	sts	0x0D5F, r24	; 0x800d5f <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:178

  if (true == twi_inRepStart) {
   15d3e:	80 91 5e 0d 	lds	r24, 0x0D5E	; 0x800d5e <twi_inRepStart.lto_priv.271>
   15d42:	81 30       	cpi	r24, 0x01	; 1
   15d44:	f9 f4       	brne	.+62     	; 0x15d84 <twi_readFrom.part.0.constprop.201+0x78>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
   15d46:	10 92 5e 0d 	sts	0x0D5E, r1	; 0x800d5e <twi_inRepStart.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:187
    do {
      TWDR = twi_slarw;
   15d4a:	80 91 5f 0d 	lds	r24, 0x0D5F	; 0x800d5f <twi_slarw.lto_priv.266>
   15d4e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:188
    } while(TWCR & _BV(TWWC));
   15d52:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   15d56:	83 fd       	sbrc	r24, 3
   15d58:	f8 cf       	rjmp	.-16     	; 0x15d4a <twi_readFrom.part.0.constprop.201+0x3e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
   15d5a:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
   15d5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
   15d60:	80 91 64 0d 	lds	r24, 0x0D64	; 0x800d64 <twi_state.lto_priv.272>
   15d64:	81 30       	cpi	r24, 0x01	; 1
   15d66:	e1 f3       	breq	.-8      	; 0x15d60 <twi_readFrom.part.0.constprop.201+0x54>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
   15d68:	80 91 61 0d 	lds	r24, 0x0D61	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
   15d6c:	86 17       	cp	r24, r22
   15d6e:	10 f4       	brcc	.+4      	; 0x15d74 <twi_readFrom.part.0.constprop.201+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:201
    length = twi_masterBufferIndex;
   15d70:	60 91 61 0d 	lds	r22, 0x0D61	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
   15d74:	ae e3       	ldi	r26, 0x3E	; 62
   15d76:	bd e0       	ldi	r27, 0x0D	; 13
   15d78:	ee e1       	ldi	r30, 0x1E	; 30
   15d7a:	fd e0       	ldi	r31, 0x0D	; 13
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
   15d7c:	80 e0       	ldi	r24, 0x00	; 0
   15d7e:	86 13       	cpse	r24, r22
   15d80:	03 c0       	rjmp	.+6      	; 0x15d88 <twi_readFrom.part.0.constprop.201+0x7c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
   15d82:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
   15d84:	85 ee       	ldi	r24, 0xE5	; 229
   15d86:	ea cf       	rjmp	.-44     	; 0x15d5c <twi_readFrom.part.0.constprop.201+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
   15d88:	9d 91       	ld	r25, X+
   15d8a:	91 93       	st	Z+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
   15d8c:	8f 5f       	subi	r24, 0xFF	; 255
   15d8e:	f7 cf       	rjmp	.-18     	; 0x15d7e <twi_readFrom.part.0.constprop.201+0x72>

00015d90 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>:
_ZN7TwoWire17beginTransmissionEh.constprop.199():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:144
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
   15d90:	91 e0       	ldi	r25, 0x01	; 1
   15d92:	90 93 1d 0d 	sts	0x0D1D, r25	; 0x800d1d <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:146
  // set address of targeted slave
  txAddress = address;
   15d96:	80 93 1c 0d 	sts	0x0D1C, r24	; 0x800d1c <TwoWire::txAddress>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:148
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   15d9a:	10 92 1b 0d 	sts	0x0D1B, r1	; 0x800d1b <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:149
  txBufferLength = 0;
   15d9e:	10 92 1a 0d 	sts	0x0D1A, r1	; 0x800d1a <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:150
}
   15da2:	08 95       	ret

00015da4 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.196]>:
_ZN24Temperature_LM75_Derived30readIntegerTemperatureRegisterEh.constprop.196():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:51
  .default_temperature_frac_width = 8,
  .max_temperature_resolution     = 13,
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
   15da4:	cf 93       	push	r28
   15da6:	df 93       	push	r29
   15da8:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
   15daa:	80 91 06 10 	lds	r24, 0x1006	; 0x801006 <lm75_temp+0x2>
   15dae:	0e 94 c8 ae 	call	0x15d90	; 0x15d90 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
   15db2:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <lm75_temp>
   15db6:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <lm75_temp+0x1>
   15dba:	dc 01       	movw	r26, r24
   15dbc:	ed 91       	ld	r30, X+
   15dbe:	fc 91       	ld	r31, X
   15dc0:	01 90       	ld	r0, Z+
   15dc2:	f0 81       	ld	r31, Z
   15dc4:	e0 2d       	mov	r30, r0
   15dc6:	6c 2f       	mov	r22, r28
   15dc8:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
   15dca:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <lm75_temp>
   15dce:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <lm75_temp+0x1>
   15dd2:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
   15dd6:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <lm75_temp>
   15dda:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <lm75_temp+0x1>
   15dde:	20 91 07 10 	lds	r18, 0x1007	; 0x801007 <lm75_temp+0x3>
   15de2:	42 e0       	ldi	r20, 0x02	; 2
   15de4:	29 30       	cpi	r18, 0x09	; 9
   15de6:	08 f4       	brcc	.+2      	; 0x15dea <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.196]+0x46>
   15de8:	41 e0       	ldi	r20, 0x01	; 1
   15dea:	60 91 06 10 	lds	r22, 0x1006	; 0x801006 <lm75_temp+0x2>
   15dee:	0e 94 f9 5c 	call	0xb9f2	; 0xb9f2 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
   15df2:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <lm75_temp>
   15df6:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <lm75_temp+0x1>
   15dfa:	dc 01       	movw	r26, r24
   15dfc:	ed 91       	ld	r30, X+
   15dfe:	fc 91       	ld	r31, X
   15e00:	02 84       	ldd	r0, Z+10	; 0x0a
   15e02:	f3 85       	ldd	r31, Z+11	; 0x0b
   15e04:	e0 2d       	mov	r30, r0
   15e06:	19 95       	eicall
   15e08:	d8 2f       	mov	r29, r24
   15e0a:	b0 e0       	ldi	r27, 0x00	; 0
   15e0c:	cb 2f       	mov	r28, r27
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
   15e0e:	80 91 07 10 	lds	r24, 0x1007	; 0x801007 <lm75_temp+0x3>
   15e12:	89 30       	cpi	r24, 0x09	; 9
   15e14:	68 f0       	brcs	.+26     	; 0x15e30 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.196]+0x8c>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
   15e16:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <lm75_temp>
   15e1a:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <lm75_temp+0x1>
   15e1e:	dc 01       	movw	r26, r24
   15e20:	ed 91       	ld	r30, X+
   15e22:	fc 91       	ld	r31, X
   15e24:	02 84       	ldd	r0, Z+10	; 0x0a
   15e26:	f3 85       	ldd	r31, Z+11	; 0x0b
   15e28:	e0 2d       	mov	r30, r0
   15e2a:	19 95       	eicall
   15e2c:	c8 2b       	or	r28, r24
   15e2e:	d9 2b       	or	r29, r25
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
   15e30:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <lm75_temp>
   15e34:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <lm75_temp+0x1>
   15e38:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
   15e3c:	80 91 08 10 	lds	r24, 0x1008	; 0x801008 <lm75_temp+0x4>
   15e40:	90 91 09 10 	lds	r25, 0x1009	; 0x801009 <lm75_temp+0x5>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:76

  // Read the raw memory as a 16-bit signed integer and return.
  return *(int16_t *)(&t);
}
   15e44:	8c 23       	and	r24, r28
   15e46:	9d 23       	and	r25, r29
   15e48:	df 91       	pop	r29
   15e4a:	cf 91       	pop	r28
   15e4c:	08 95       	ret

00015e4e <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.193]>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.193():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:99
{
	Fill_Rect(x, y, w, 1, draw_color);
}

//Fill the full screen with color
void LCDWIKI_GUI::Fill_Screen(uint16_t color)
   15e4e:	ef 92       	push	r14
   15e50:	ff 92       	push	r15
   15e52:	0f 93       	push	r16
   15e54:	1f 93       	push	r17
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   15e56:	e9 eb       	ldi	r30, 0xB9	; 185
   15e58:	ff e0       	ldi	r31, 0x0F	; 15
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.193():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:101
{
	Fill_Rect(0, 0, Get_Width(), Get_Height(), color);
   15e5a:	04 89       	ldd	r16, Z+20	; 0x14
   15e5c:	15 89       	ldd	r17, Z+21	; 0x15
   15e5e:	22 89       	ldd	r18, Z+18	; 0x12
   15e60:	33 89       	ldd	r19, Z+19	; 0x13
   15e62:	7c 01       	movw	r14, r24
   15e64:	50 e0       	ldi	r21, 0x00	; 0
   15e66:	40 e0       	ldi	r20, 0x00	; 0
   15e68:	70 e0       	ldi	r23, 0x00	; 0
   15e6a:	60 e0       	ldi	r22, 0x00	; 0
   15e6c:	cf 01       	movw	r24, r30
   15e6e:	0e 94 56 40 	call	0x80ac	; 0x80ac <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:102
}
   15e72:	1f 91       	pop	r17
   15e74:	0f 91       	pop	r16
   15e76:	ff 90       	pop	r15
   15e78:	ef 90       	pop	r14
   15e7a:	08 95       	ret

00015e7c <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>:
_Z19MenuHistoryPrevMenujjh.constprop.192():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1187


/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (MenuHistoryIndex > 0)
   15e7c:	80 91 19 0d 	lds	r24, 0x0D19	; 0x800d19 <MenuHistoryIndex>
   15e80:	88 23       	and	r24, r24
   15e82:	29 f0       	breq	.+10     	; 0x15e8e <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1189
  {
    MenuHistoryIndex--;
   15e84:	81 50       	subi	r24, 0x01	; 1
   15e86:	80 93 19 0d 	sts	0x0D19, r24	; 0x800d19 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1190
    MenuPrepareStyle();
   15e8a:	0c 94 8b 9b 	jmp	0x13716	; 0x13716 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1192
  }
}
   15e8e:	08 95       	ret

00015e90 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>:
_Z19MenuHistoryNextMenujjh.constprop.191():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1196
///
void MenuHistoryNextMenu(uint16_t id, uint16_t args1, uint8_t fake)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
   15e90:	20 91 19 0d 	lds	r18, 0x0D19	; 0x800d19 <MenuHistoryIndex>
   15e94:	2a 30       	cpi	r18, 0x0A	; 10
   15e96:	70 f4       	brcc	.+28     	; 0x15eb4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1198
  {
    MenuHistoryIndex++;
   15e98:	2f 5f       	subi	r18, 0xFF	; 255
   15e9a:	20 93 19 0d 	sts	0x0D19, r18	; 0x800d19 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1199
    MenuHistory[MenuHistoryIndex] = id;
   15e9e:	30 e0       	ldi	r19, 0x00	; 0
   15ea0:	f9 01       	movw	r30, r18
   15ea2:	e1 5f       	subi	r30, 0xF1	; 241
   15ea4:	f2 4f       	sbci	r31, 0xF2	; 242
   15ea6:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1200
    Global_menu_args1[MenuHistoryIndex] = args1;
   15ea8:	2b 5f       	subi	r18, 0xFB	; 251
   15eaa:	32 4f       	sbci	r19, 0xF2	; 242
   15eac:	f9 01       	movw	r30, r18
   15eae:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1201
    MenuPrepareStyle();
   15eb0:	0c 94 8b 9b 	jmp	0x13716	; 0x13716 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1203
  }
}
   15eb4:	08 95       	ret

00015eb6 <TwoWire::read() [clone .constprop.190]>:
_ZN7TwoWire4readEv.constprop.190():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   15eb6:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
   15eba:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
   15ebe:	2f ef       	ldi	r18, 0xFF	; 255
   15ec0:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   15ec2:	98 17       	cp	r25, r24
   15ec4:	48 f4       	brcc	.+18     	; 0x15ed8 <TwoWire::read() [clone .constprop.190]+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
   15ec6:	e9 2f       	mov	r30, r25
   15ec8:	f0 e0       	ldi	r31, 0x00	; 0
   15eca:	e2 5e       	subi	r30, 0xE2	; 226
   15ecc:	f2 4f       	sbci	r31, 0xF2	; 242
   15ece:	20 81       	ld	r18, Z
   15ed0:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
   15ed2:	9f 5f       	subi	r25, 0xFF	; 255
   15ed4:	90 93 04 0d 	sts	0x0D04, r25	; 0x800d04 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
   15ed8:	c9 01       	movw	r24, r18
   15eda:	08 95       	ret

00015edc <TwoWire::write(int) [clone .constprop.189]>:
_ZN7TwoWire5writeEi.constprop.189():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.h:78
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   15edc:	68 2f       	mov	r22, r24
   15ede:	88 ef       	ldi	r24, 0xF8	; 248
   15ee0:	9f e0       	ldi	r25, 0x0F	; 15
   15ee2:	0c 94 4c 3f 	jmp	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>

00015ee6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]>:
_Z11owMatchNexthPh.constprop.187():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:122
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
   15ee6:	df 92       	push	r13
   15ee8:	ef 92       	push	r14
   15eea:	ff 92       	push	r15
   15eec:	0f 93       	push	r16
   15eee:	1f 93       	push	r17
   15ef0:	cf 93       	push	r28
   15ef2:	df 93       	push	r29
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   15ef4:	90 91 8d 12 	lds	r25, 0x128D	; 0x80128d <lastDevice>
   15ef8:	99 23       	and	r25, r25
   15efa:	51 f0       	breq	.+20     	; 0x15f10 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   15efc:	d5 e0       	ldi	r29, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   15efe:	8d 2f       	mov	r24, r29
   15f00:	df 91       	pop	r29
   15f02:	cf 91       	pop	r28
   15f04:	1f 91       	pop	r17
   15f06:	0f 91       	pop	r16
   15f08:	ff 90       	pop	r15
   15f0a:	ef 90       	pop	r14
   15f0c:	df 90       	pop	r13
   15f0e:	08 95       	ret
   15f10:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
	serial_byte_number = 0;

	if(lastDevice)
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   15f12:	0e 94 b6 5d 	call	0xbb6c	; 0xbb6c <ds2482owReset(unsigned char)>
   15f16:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   15f18:	81 11       	cpse	r24, r1
   15f1a:	f1 cf       	rjmp	.-30     	; 0x15efe <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   15f1c:	60 ef       	ldi	r22, 0xF0	; 240
   15f1e:	8f 2d       	mov	r24, r15
   15f20:	0e 94 5e 5d 	call	0xbabc	; 0xbabc <ds2482owWriteByte(unsigned char, unsigned char)>
   15f24:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   15f26:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   15f28:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   15f2a:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   15f2c:	81 11       	cpse	r24, r1
   15f2e:	e7 cf       	rjmp	.-50     	; 0x15efe <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	
	while(serial_byte_number < 8)
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   15f30:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <lastDiscrepancy>
   15f34:	08 17       	cp	r16, r24
   15f36:	50 f4       	brcc	.+20     	; 0x15f4c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   15f38:	ee 2d       	mov	r30, r14
   15f3a:	f0 e0       	ldi	r31, 0x00	; 0
   15f3c:	eb 57       	subi	r30, 0x7B	; 123
   15f3e:	fd 4e       	sbci	r31, 0xED	; 237
   15f40:	80 81       	ld	r24, Z
   15f42:	81 23       	and	r24, r17
   15f44:	c1 e0       	ldi	r28, 0x01	; 1
   15f46:	29 f4       	brne	.+10     	; 0x15f52 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x6c>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   15f48:	c0 e0       	ldi	r28, 0x00	; 0
   15f4a:	03 c0       	rjmp	.+6      	; 0x15f52 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x6c>
   15f4c:	c1 e0       	ldi	r28, 0x01	; 1
   15f4e:	80 13       	cpse	r24, r16
   15f50:	fb cf       	rjmp	.-10     	; 0x15f48 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x62>
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   15f52:	8f 2d       	mov	r24, r15
   15f54:	0e 94 c8 ae 	call	0x15d90	; 0x15d90 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   15f58:	88 e7       	ldi	r24, 0x78	; 120
   15f5a:	90 e0       	ldi	r25, 0x00	; 0
   15f5c:	0e 94 6e af 	call	0x15edc	; 0x15edc <TwoWire::write(int) [clone .constprop.189]>
_Z11owMatchNexthPh.constprop.187():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   15f60:	90 e0       	ldi	r25, 0x00	; 0
   15f62:	80 e0       	ldi	r24, 0x00	; 0
ds2482owWriteTriplet():
   15f64:	cc 23       	and	r28, r28
   15f66:	11 f0       	breq	.+4      	; 0x15f6c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x86>
_Z11owMatchNexthPh.constprop.187():
   15f68:	80 e8       	ldi	r24, 0x80	; 128
   15f6a:	90 e0       	ldi	r25, 0x00	; 0
ds2482owWriteTriplet():
   15f6c:	0e 94 6e af 	call	0x15edc	; 0x15edc <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669
        if (Wire.endTransmission() != I2C_ERROR_OK)
   15f70:	88 ef       	ldi	r24, 0xF8	; 248
   15f72:	9f e0       	ldi	r25, 0x0F	; 15
   15f74:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <TwoWire::endTransmission()>
   15f78:	81 11       	cpse	r24, r1
   15f7a:	53 c0       	rjmp	.+166    	; 0x16022 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x13c>
   15f7c:	6e ef       	ldi	r22, 0xFE	; 254
   15f7e:	d6 2e       	mov	r13, r22
   15f80:	da 94       	dec	r13
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   15f82:	dd 20       	and	r13, r13
   15f84:	09 f4       	brne	.+2      	; 0x15f88 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xa2>
   15f86:	4f c0       	rjmp	.+158    	; 0x16026 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x140>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   15f88:	41 e0       	ldi	r20, 0x01	; 1
   15f8a:	6f 2d       	mov	r22, r15
   15f8c:	88 ef       	ldi	r24, 0xF8	; 248
   15f8e:	9f e0       	ldi	r25, 0x0F	; 15
   15f90:	0e 94 f9 5c 	call	0xb9f2	; 0xb9f2 <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
   15f94:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
   15f98:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
   15f9c:	89 1b       	sub	r24, r25
   15f9e:	99 0b       	sbc	r25, r25
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   15fa0:	18 16       	cp	r1, r24
   15fa2:	19 06       	cpc	r1, r25
   15fa4:	1c f4       	brge	.+6      	; 0x15fac <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xc6>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   15fa6:	0e 94 5b af 	call	0x15eb6	; 0x15eb6 <TwoWire::read() [clone .constprop.190]>
   15faa:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   15fac:	c0 fd       	sbrc	r28, 0
   15fae:	e8 cf       	rjmp	.-48     	; 0x15f80 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x9a>
_Z11owMatchNexthPh.constprop.187():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		r=ds2482owWriteTriplet(ds2482_address, &direction);
		if(r) return r;

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   15fb0:	2c 2f       	mov	r18, r28
   15fb2:	30 e0       	ldi	r19, 0x00	; 0
   15fb4:	c9 01       	movw	r24, r18
   15fb6:	45 e0       	ldi	r20, 0x05	; 5
   15fb8:	95 95       	asr	r25
   15fba:	87 95       	ror	r24
   15fbc:	4a 95       	dec	r20
   15fbe:	e1 f7       	brne	.-8      	; 0x15fb8 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xd2>
   15fc0:	83 70       	andi	r24, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   15fc2:	22 0f       	add	r18, r18
   15fc4:	23 2f       	mov	r18, r19
   15fc6:	22 1f       	adc	r18, r18
   15fc8:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   15fca:	83 30       	cpi	r24, 0x03	; 3
   15fcc:	99 f0       	breq	.+38     	; 0x15ff4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x10e>
   15fce:	ee 2d       	mov	r30, r14
   15fd0:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   15fd2:	81 11       	cpse	r24, r1
   15fd4:	1b c0       	rjmp	.+54     	; 0x1600c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x126>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   15fd6:	22 23       	and	r18, r18
   15fd8:	11 f1       	breq	.+68     	; 0x1601e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x138>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   15fda:	eb 57       	subi	r30, 0x7B	; 123
   15fdc:	fd 4e       	sbci	r31, 0xED	; 237
   15fde:	80 81       	ld	r24, Z
   15fe0:	81 2b       	or	r24, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   15fe2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   15fe4:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   15fe6:	11 0f       	add	r17, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   15fe8:	11 f4       	brne	.+4      	; 0x15fee <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   15fea:	e3 94       	inc	r14
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   15fec:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   15fee:	88 e0       	ldi	r24, 0x08	; 8
   15ff0:	e8 12       	cpse	r14, r24
   15ff2:	9e cf       	rjmp	.-196    	; 0x15f30 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x4a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   15ff4:	01 34       	cpi	r16, 0x41	; 65
   15ff6:	08 f4       	brcc	.+2      	; 0x15ffa <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x114>
   15ff8:	81 cf       	rjmp	.-254    	; 0x15efc <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x16>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   15ffa:	d0 93 84 12 	sts	0x1284, r29	; 0x801284 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   15ffe:	81 e0       	ldi	r24, 0x01	; 1
   16000:	d1 11       	cpse	r29, r1
   16002:	80 e0       	ldi	r24, 0x00	; 0
   16004:	80 93 8d 12 	sts	0x128D, r24	; 0x80128d <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:189
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
   16008:	d0 e0       	ldi	r29, 0x00	; 0
   1600a:	79 cf       	rjmp	.-270    	; 0x15efe <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   1600c:	21 11       	cpse	r18, r1
   1600e:	e5 cf       	rjmp	.-54     	; 0x15fda <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xf4>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   16010:	eb 57       	subi	r30, 0x7B	; 123
   16012:	fd 4e       	sbci	r31, 0xED	; 237
   16014:	80 81       	ld	r24, Z
   16016:	91 2f       	mov	r25, r17
   16018:	90 95       	com	r25
   1601a:	89 23       	and	r24, r25
   1601c:	e2 cf       	rjmp	.-60     	; 0x15fe2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xfc>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   1601e:	d0 2f       	mov	r29, r16
   16020:	f7 cf       	rjmp	.-18     	; 0x16010 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x12a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   16022:	d3 e0       	ldi	r29, 0x03	; 3
   16024:	6c cf       	rjmp	.-296    	; 0x15efe <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   16026:	d4 e0       	ldi	r29, 0x04	; 4
   16028:	6a cf       	rjmp	.-300    	; 0x15efe <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>

0001602a <one_hw_search_device(unsigned char) [clone .constprop.184]>:
_Z20one_hw_search_deviceh.constprop.184():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:231
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
   1602a:	ff 92       	push	r15
   1602c:	0f 93       	push	r16
   1602e:	1f 93       	push	r17
   16030:	cf 93       	push	r28
   16032:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:234
{
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
   16034:	10 92 02 0d 	sts	0x0D02, r1	; 0x800d02 <ds2482_address+0x1>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
   16038:	c0 91 01 0d 	lds	r28, 0x0D01	; 0x800d01 <ds2482_address>
ds2482init():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:186
 * Initialize TWI, this routine is designed for 8Mhz operation.
 */
uint8_t ds2482init(uint8_t addr)
{

	Wire.beginTransmission(addr);
   1603c:	8c 2f       	mov	r24, r28
   1603e:	0e 94 c8 ae 	call	0x15d90	; 0x15d90 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:187
        if (Wire.endTransmission() == I2C_ERROR_OK)
   16042:	88 ef       	ldi	r24, 0xF8	; 248
   16044:	9f e0       	ldi	r25, 0x0F	; 15
   16046:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <TwoWire::endTransmission()>
   1604a:	81 11       	cpse	r24, r1
   1604c:	10 c0       	rjmp	.+32     	; 0x1606e <one_hw_search_device(unsigned char) [clone .constprop.184]+0x44>
ds2482setConfig():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:352
	//	return DS2482_ERR_WRITE;

	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
   1604e:	8c 2f       	mov	r24, r28
   16050:	0e 94 c8 ae 	call	0x15d90	; 0x15d90 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:353
        Wire.write(DS2482_C_WCFG);
   16054:	82 ed       	ldi	r24, 0xD2	; 210
   16056:	90 e0       	ldi	r25, 0x00	; 0
   16058:	0e 94 6e af 	call	0x15edc	; 0x15edc <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:354
        Wire.write(config);
   1605c:	60 e0       	ldi	r22, 0x00	; 0
   1605e:	88 ef       	ldi	r24, 0xF8	; 248
   16060:	9f e0       	ldi	r25, 0x0F	; 15
   16062:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:355
        if (Wire.endTransmission() == I2C_ERROR_OK)
   16066:	88 ef       	ldi	r24, 0xF8	; 248
   16068:	9f e0       	ldi	r25, 0x0F	; 15
   1606a:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <TwoWire::endTransmission()>
_Z20one_hw_search_deviceh.constprop.184():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
   1606e:	80 91 01 0d 	lds	r24, 0x0D01	; 0x800d01 <ds2482_address>
   16072:	0e 94 ec 5c 	call	0xb9d8	; 0xb9d8 <ds2482reset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
   16076:	80 91 01 0d 	lds	r24, 0x0D01	; 0x800d01 <ds2482_address>
   1607a:	0e 94 b6 5d 	call	0xbb6c	; 0xbb6c <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
   1607e:	10 91 01 0d 	lds	r17, 0x0D01	; 0x800d01 <ds2482_address>
owMatchFirst():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
   16082:	10 92 8d 12 	sts	0x128D, r1	; 0x80128d <lastDevice>
   16086:	10 92 84 12 	sts	0x1284, r1	; 0x801284 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
   1608a:	81 2f       	mov	r24, r17
   1608c:	0e 94 73 af 	call	0x15ee6	; 0x15ee6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]>
_Z20one_hw_search_deviceh.constprop.184():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
   16090:	81 11       	cpse	r24, r1
   16092:	31 c0       	rjmp	.+98     	; 0x160f6 <one_hw_search_device(unsigned char) [clone .constprop.184]+0xcc>
   16094:	0b e0       	ldi	r16, 0x0B	; 11
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
   16096:	ff 24       	eor	r15, r15
   16098:	f3 94       	inc	r15
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   1609a:	d0 91 02 0d 	lds	r29, 0x0D02	; 0x800d02 <ds2482_address+0x1>
   1609e:	d6 30       	cpi	r29, 0x06	; 6
   160a0:	50 f5       	brcc	.+84     	; 0x160f6 <one_hw_search_device(unsigned char) [clone .constprop.184]+0xcc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
   160a2:	c0 91 00 0d 	lds	r28, 0x0D00	; 0x800d00 <Global_HWwirenum>
   160a6:	2c 2f       	mov	r18, r28
   160a8:	30 e0       	ldi	r19, 0x00	; 0
   160aa:	a5 e8       	ldi	r26, 0x85	; 133
   160ac:	b2 e1       	ldi	r27, 0x12	; 18
   160ae:	c0 9f       	mul	r28, r16
   160b0:	b0 01       	movw	r22, r0
   160b2:	11 24       	eor	r1, r1
   160b4:	90 e0       	ldi	r25, 0x00	; 0
   160b6:	80 e0       	ldi	r24, 0x00	; 0
   160b8:	4d 91       	ld	r20, X+
   160ba:	fc 01       	movw	r30, r24
   160bc:	e6 0f       	add	r30, r22
   160be:	f7 1f       	adc	r31, r23
   160c0:	e2 54       	subi	r30, 0x42	; 66
   160c2:	f3 4f       	sbci	r31, 0xF3	; 243
   160c4:	40 83       	st	Z, r20
   160c6:	01 96       	adiw	r24, 0x01	; 1
   160c8:	88 30       	cpi	r24, 0x08	; 8
   160ca:	91 05       	cpc	r25, r1
   160cc:	a9 f7       	brne	.-22     	; 0x160b8 <one_hw_search_device(unsigned char) [clone .constprop.184]+0x8e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
   160ce:	02 9f       	mul	r16, r18
   160d0:	f0 01       	movw	r30, r0
   160d2:	03 9f       	mul	r16, r19
   160d4:	f0 0d       	add	r31, r0
   160d6:	11 24       	eor	r1, r1
   160d8:	e2 54       	subi	r30, 0x42	; 66
   160da:	f3 4f       	sbci	r31, 0xF3	; 243
   160dc:	10 86       	std	Z+8, r1	; 0x08
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
   160de:	f1 86       	std	Z+9, r15	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
   160e0:	81 2f       	mov	r24, r17
   160e2:	0e 94 73 af 	call	0x15ee6	; 0x15ee6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
   160e6:	df 5f       	subi	r29, 0xFF	; 255
   160e8:	d0 93 02 0d 	sts	0x0D02, r29	; 0x800d02 <ds2482_address+0x1>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
   160ec:	cf 5f       	subi	r28, 0xFF	; 255
   160ee:	c0 93 00 0d 	sts	0x0D00, r28	; 0x800d00 <Global_HWwirenum>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
   160f2:	85 30       	cpi	r24, 0x05	; 5
   160f4:	91 f6       	brne	.-92     	; 0x1609a <one_hw_search_device(unsigned char) [clone .constprop.184]+0x70>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:262
      { ///hledani dokonceno
        break;
      }
    }
  return r;
}
   160f6:	df 91       	pop	r29
   160f8:	cf 91       	pop	r28
   160fa:	1f 91       	pop	r17
   160fc:	0f 91       	pop	r16
   160fe:	ff 90       	pop	r15
   16100:	08 95       	ret

00016102 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>:
_Z10parseBytesPKccPhii.constprop.183():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106
{
 return x;
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
   16102:	cf 92       	push	r12
   16104:	df 92       	push	r13
   16106:	ef 92       	push	r14
   16108:	ff 92       	push	r15
   1610a:	0f 93       	push	r16
   1610c:	1f 93       	push	r17
   1610e:	cf 93       	push	r28
   16110:	df 93       	push	r29
   16112:	ec 01       	movw	r28, r24
   16114:	8a 01       	movw	r16, r20
   16116:	7a 01       	movw	r14, r20
   16118:	e2 0e       	add	r14, r18
   1611a:	f3 1e       	adc	r15, r19
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   1611c:	c6 2e       	mov	r12, r22
   1611e:	66 0f       	add	r22, r22
   16120:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:110

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   16122:	4a e0       	ldi	r20, 0x0A	; 10
   16124:	50 e0       	ldi	r21, 0x00	; 0
   16126:	70 e0       	ldi	r23, 0x00	; 0
   16128:	60 e0       	ldi	r22, 0x00	; 0
   1612a:	ce 01       	movw	r24, r28
   1612c:	0e 94 16 e4 	call	0x1c82c	; 0x1c82c <strtoul>
   16130:	f8 01       	movw	r30, r16
   16132:	61 93       	st	Z+, r22
   16134:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
    str = strchr(str, sep);               // Find next separator
   16136:	b6 01       	movw	r22, r12
   16138:	ce 01       	movw	r24, r28
   1613a:	0e 94 e8 f1 	call	0x1e3d0	; 0x1e3d0 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:112
    if (str == NULL || *str == '\0') {
   1613e:	00 97       	sbiw	r24, 0x00	; 0
   16140:	49 f0       	breq	.+18     	; 0x16154 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]+0x52>
   16142:	fc 01       	movw	r30, r24
   16144:	20 81       	ld	r18, Z
   16146:	22 23       	and	r18, r18
   16148:	29 f0       	breq	.+10     	; 0x16154 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]+0x52>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:115
      break;                            // No more separators, exit
    }
    str++;                               // Point to next character after separator
   1614a:	ec 01       	movw	r28, r24
   1614c:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
   1614e:	0e 15       	cp	r16, r14
   16150:	1f 05       	cpc	r17, r15
   16152:	39 f7       	brne	.-50     	; 0x16122 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]+0x20>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:117
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                               // Point to next character after separator
  }
}
   16154:	df 91       	pop	r29
   16156:	cf 91       	pop	r28
   16158:	1f 91       	pop	r17
   1615a:	0f 91       	pop	r16
   1615c:	ff 90       	pop	r15
   1615e:	ef 90       	pop	r14
   16160:	df 90       	pop	r13
   16162:	cf 90       	pop	r12
   16164:	08 95       	ret

00016166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>:
_Z11show_stringPciihjjb.constprop.169():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1720
    csize - velikost pisma
    fc - foreground color
    bc - backgroud color
    mode - ?
*/
void show_string(char *str, int16_t x, int16_t y, uint8_t csize, uint16_t fc, uint16_t bc, boolean mode)
   16166:	8f 92       	push	r8
   16168:	9f 92       	push	r9
   1616a:	af 92       	push	r10
   1616c:	bf 92       	push	r11
   1616e:	cf 92       	push	r12
   16170:	df 92       	push	r13
   16172:	ef 92       	push	r14
   16174:	ff 92       	push	r15
   16176:	0f 93       	push	r16
   16178:	1f 93       	push	r17
   1617a:	cf 93       	push	r28
   1617c:	df 93       	push	r29
   1617e:	00 d0       	rcall	.+0      	; 0x16180 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x1a>
   16180:	00 d0       	rcall	.+0      	; 0x16182 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x1c>
   16182:	cd b7       	in	r28, 0x3d	; 61
   16184:	de b7       	in	r29, 0x3e	; 62
   16186:	6c 01       	movw	r12, r24
   16188:	5b 01       	movw	r10, r22
   1618a:	4a 01       	movw	r8, r20
Set_Text_Mode():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
   1618c:	10 92 c6 0f 	sts	0x0FC6, r1	; 0x800fc6 <my_lcd+0xd>
Set_Text_Size():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:529
}

//set text size
void LCDWIKI_GUI::Set_Text_Size(uint8_t s)
{
	text_size = s;
   16190:	20 93 c5 0f 	sts	0x0FC5, r18	; 0x800fc5 <my_lcd+0xc>
Set_Text_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:493
}

//set text colour with 16bit color
void LCDWIKI_GUI::Set_Text_colour(uint16_t color)
{
	text_color = color;
   16194:	10 93 c0 0f 	sts	0x0FC0, r17	; 0x800fc0 <my_lcd+0x7>
   16198:	00 93 bf 0f 	sts	0x0FBF, r16	; 0x800fbf <my_lcd+0x6>
Set_Text_Back_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:511
}

//set text background colour with 16bits color
void LCDWIKI_GUI::Set_Text_Back_colour(uint16_t color)
{
	text_bgcolor = color;	
   1619c:	f0 92 c2 0f 	sts	0x0FC2, r15	; 0x800fc2 <my_lcd+0x9>
   161a0:	e0 92 c1 0f 	sts	0x0FC1, r14	; 0x800fc1 <my_lcd+0x8>
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   161a4:	1a 82       	std	Y+2, r1	; 0x02
   161a6:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   161a8:	1c 82       	std	Y+4, r1	; 0x04
   161aa:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   161ac:	1e 82       	std	Y+6, r1	; 0x06
   161ae:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   161b0:	00 97       	sbiw	r24, 0x00	; 0
   161b2:	69 f1       	breq	.+90     	; 0x1620e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0xa8>
   161b4:	fc 01       	movw	r30, r24
   161b6:	01 90       	ld	r0, Z+
   161b8:	00 20       	and	r0, r0
   161ba:	e9 f7       	brne	.-6      	; 0x161b6 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x50>
   161bc:	31 97       	sbiw	r30, 0x01	; 1
   161be:	8f 01       	movw	r16, r30
   161c0:	08 1b       	sub	r16, r24
   161c2:	19 0b       	sbc	r17, r25
changeBuffer():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:157
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   161c4:	b8 01       	movw	r22, r16
   161c6:	6f 5f       	subi	r22, 0xFF	; 255
   161c8:	7f 4f       	sbci	r23, 0xFF	; 255
   161ca:	90 e0       	ldi	r25, 0x00	; 0
   161cc:	80 e0       	ldi	r24, 0x00	; 0
   161ce:	0e 94 ee f0 	call	0x1e1dc	; 0x1e1dc <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   161d2:	00 97       	sbiw	r24, 0x00	; 0
   161d4:	81 f0       	breq	.+32     	; 0x161f6 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x90>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   161d6:	9a 83       	std	Y+2, r25	; 0x02
   161d8:	89 83       	std	Y+1, r24	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   161da:	1c 83       	std	Y+4, r17	; 0x04
   161dc:	0b 83       	std	Y+3, r16	; 0x03
reserve():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   161de:	2d 81       	ldd	r18, Y+5	; 0x05
   161e0:	3e 81       	ldd	r19, Y+6	; 0x06
   161e2:	23 2b       	or	r18, r19
   161e4:	11 f4       	brne	.+4      	; 0x161ea <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x84>
   161e6:	fc 01       	movw	r30, r24
   161e8:	10 82       	st	Z, r1
copy():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   161ea:	1e 83       	std	Y+6, r17	; 0x06
   161ec:	0d 83       	std	Y+5, r16	; 0x05
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   161ee:	b6 01       	movw	r22, r12
   161f0:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
   161f4:	0c c0       	rjmp	.+24     	; 0x1620e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0xa8>
invalidate():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
   161f6:	89 81       	ldd	r24, Y+1	; 0x01
   161f8:	9a 81       	ldd	r25, Y+2	; 0x02
   161fa:	00 97       	sbiw	r24, 0x00	; 0
   161fc:	11 f0       	breq	.+4      	; 0x16202 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x9c>
   161fe:	0e 94 5e ea 	call	0x1d4bc	; 0x1d4bc <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   16202:	1a 82       	std	Y+2, r1	; 0x02
   16204:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   16206:	1e 82       	std	Y+6, r1	; 0x06
   16208:	1d 82       	std	Y+5, r1	; 0x05
   1620a:	1c 82       	std	Y+4, r1	; 0x04
   1620c:	1b 82       	std	Y+3, r1	; 0x03
_Z11show_stringPciihjjb.constprop.169():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1726
{
  my_lcd.Set_Text_Mode(mode);
  my_lcd.Set_Text_Size(csize);
  my_lcd.Set_Text_colour(fc);
  my_lcd.Set_Text_Back_colour(bc);
  my_lcd.Print_String(str, x, y);
   1620e:	a4 01       	movw	r20, r8
   16210:	b5 01       	movw	r22, r10
   16212:	ce 01       	movw	r24, r28
   16214:	01 96       	adiw	r24, 0x01	; 1
   16216:	0e 94 69 ab 	call	0x156d2	; 0x156d2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]>
__base_dtor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   1621a:	89 81       	ldd	r24, Y+1	; 0x01
   1621c:	9a 81       	ldd	r25, Y+2	; 0x02
   1621e:	0e 94 5e ea 	call	0x1d4bc	; 0x1d4bc <free>
_Z11show_stringPciihjjb.constprop.169():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1727
}
   16222:	26 96       	adiw	r28, 0x06	; 6
   16224:	0f b6       	in	r0, 0x3f	; 63
   16226:	f8 94       	cli
   16228:	de bf       	out	0x3e, r29	; 62
   1622a:	0f be       	out	0x3f, r0	; 63
   1622c:	cd bf       	out	0x3d, r28	; 61
   1622e:	df 91       	pop	r29
   16230:	cf 91       	pop	r28
   16232:	1f 91       	pop	r17
   16234:	0f 91       	pop	r16
   16236:	ff 90       	pop	r15
   16238:	ef 90       	pop	r14
   1623a:	df 90       	pop	r13
   1623c:	cf 90       	pop	r12
   1623e:	bf 90       	pop	r11
   16240:	af 90       	pop	r10
   16242:	9f 90       	pop	r9
   16244:	8f 90       	pop	r8
   16246:	08 95       	ret

00016248 <PubSubClient::subscribe(char const*) [clone .constprop.166]>:
_ZN12PubSubClient9subscribeEPKc.constprop.166():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:468
    lastOutActivity = millis();
    return (rc == 1+llen+length);
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
   16248:	cf 93       	push	r28
   1624a:	df 93       	push	r29
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:476

boolean PubSubClient::subscribe(const char* topic, uint8_t qos) {
    if (qos < 0 || qos > 1) {
        return false;
    }
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   1624c:	fc 01       	movw	r30, r24
   1624e:	01 90       	ld	r0, Z+
   16250:	00 20       	and	r0, r0
   16252:	e9 f7       	brne	.-6      	; 0x1624e <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x6>
   16254:	9f 01       	movw	r18, r30
   16256:	28 1b       	sub	r18, r24
   16258:	39 0b       	sbc	r19, r25
   1625a:	28 5f       	subi	r18, 0xF8	; 248
   1625c:	3f 4f       	sbci	r19, 0xFF	; 255
   1625e:	21 30       	cpi	r18, 0x01	; 1
   16260:	32 40       	sbci	r19, 0x02	; 2
   16262:	98 f5       	brcc	.+102    	; 0x162ca <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x82>
   16264:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:480
        // Too long
        return false;
    }
    if (connected()) {
   16266:	8f e2       	ldi	r24, 0x2F	; 47
   16268:	90 e1       	ldi	r25, 0x10	; 16
   1626a:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <PubSubClient::connected()>
   1626e:	88 23       	and	r24, r24
   16270:	61 f1       	breq	.+88     	; 0x162ca <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:483
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   16272:	80 91 31 12 	lds	r24, 0x1231	; 0x801231 <mqtt_client+0x202>
   16276:	90 91 32 12 	lds	r25, 0x1232	; 0x801232 <mqtt_client+0x203>
   1627a:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:484
        if (nextMsgId == 0) {
   1627c:	19 f1       	breq	.+70     	; 0x162c4 <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
            nextMsgId = 1;
   1627e:	90 93 32 12 	sts	0x1232, r25	; 0x801232 <mqtt_client+0x203>
   16282:	80 93 31 12 	sts	0x1231, r24	; 0x801231 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:487
        }
        buffer[length++] = (nextMsgId >> 8);
   16286:	80 91 31 12 	lds	r24, 0x1231	; 0x801231 <mqtt_client+0x202>
   1628a:	90 91 32 12 	lds	r25, 0x1232	; 0x801232 <mqtt_client+0x203>
   1628e:	90 93 36 10 	sts	0x1036, r25	; 0x801036 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:488
        buffer[length++] = (nextMsgId & 0xFF);
   16292:	80 93 37 10 	sts	0x1037, r24	; 0x801037 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:489
        length = writeString((char*)topic, buffer,length);
   16296:	47 e0       	ldi	r20, 0x07	; 7
   16298:	50 e0       	ldi	r21, 0x00	; 0
   1629a:	61 e3       	ldi	r22, 0x31	; 49
   1629c:	70 e1       	ldi	r23, 0x10	; 16
   1629e:	ce 01       	movw	r24, r28
   162a0:	0e 94 64 ae 	call	0x15cc8	; 0x15cc8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:490
        buffer[length++] = qos;
   162a4:	fc 01       	movw	r30, r24
   162a6:	e1 5d       	subi	r30, 0xD1	; 209
   162a8:	ff 4e       	sbci	r31, 0xEF	; 239
   162aa:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   162ac:	9c 01       	movw	r18, r24
   162ae:	24 50       	subi	r18, 0x04	; 4
   162b0:	31 09       	sbc	r19, r1
   162b2:	41 e3       	ldi	r20, 0x31	; 49
   162b4:	50 e1       	ldi	r21, 0x10	; 16
   162b6:	62 e8       	ldi	r22, 0x82	; 130
   162b8:	8f e2       	ldi	r24, 0x2F	; 47
   162ba:	90 e1       	ldi	r25, 0x10	; 16
_ZN12PubSubClient9subscribeEPKc.constprop.166():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   162bc:	df 91       	pop	r29
   162be:	cf 91       	pop	r28
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString((char*)topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   162c0:	0c 94 b5 5f 	jmp	0xbf6a	; 0xbf6a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
    if (connected()) {
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
   162c4:	81 e0       	ldi	r24, 0x01	; 1
   162c6:	90 e0       	ldi	r25, 0x00	; 0
   162c8:	da cf       	rjmp	.-76     	; 0x1627e <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x36>
_ZN12PubSubClient9subscribeEPKc.constprop.166():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   162ca:	80 e0       	ldi	r24, 0x00	; 0
   162cc:	df 91       	pop	r29
   162ce:	cf 91       	pop	r28
   162d0:	08 95       	ret

000162d2 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]>:
_ZN12PubSubClient10readPacketEPh.constprop.158():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:232
    return true;
  }
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   162d2:	3f 92       	push	r3
   162d4:	4f 92       	push	r4
   162d6:	5f 92       	push	r5
   162d8:	6f 92       	push	r6
   162da:	7f 92       	push	r7
   162dc:	8f 92       	push	r8
   162de:	9f 92       	push	r9
   162e0:	af 92       	push	r10
   162e2:	bf 92       	push	r11
   162e4:	cf 92       	push	r12
   162e6:	df 92       	push	r13
   162e8:	ef 92       	push	r14
   162ea:	ff 92       	push	r15
   162ec:	0f 93       	push	r16
   162ee:	1f 93       	push	r17
   162f0:	cf 93       	push	r28
   162f2:	df 93       	push	r29
   162f4:	1f 92       	push	r1
   162f6:	cd b7       	in	r28, 0x3d	; 61
   162f8:	de b7       	in	r29, 0x3e	; 62
   162fa:	5c 01       	movw	r10, r24
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   162fc:	81 e3       	ldi	r24, 0x31	; 49
   162fe:	90 e1       	ldi	r25, 0x10	; 16
   16300:	0e 94 b8 ac 	call	0x15970	; 0x15970 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   16304:	81 11       	cpse	r24, r1
   16306:	16 c0       	rjmp	.+44     	; 0x16334 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x62>
_ZN12PubSubClient10readPacketEPh.constprop.158():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:234
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
   16308:	10 e0       	ldi	r17, 0x00	; 0
   1630a:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:280
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   1630c:	c8 01       	movw	r24, r16
   1630e:	0f 90       	pop	r0
   16310:	df 91       	pop	r29
   16312:	cf 91       	pop	r28
   16314:	1f 91       	pop	r17
   16316:	0f 91       	pop	r16
   16318:	ff 90       	pop	r15
   1631a:	ef 90       	pop	r14
   1631c:	df 90       	pop	r13
   1631e:	cf 90       	pop	r12
   16320:	bf 90       	pop	r11
   16322:	af 90       	pop	r10
   16324:	9f 90       	pop	r9
   16326:	8f 90       	pop	r8
   16328:	7f 90       	pop	r7
   1632a:	6f 90       	pop	r6
   1632c:	5f 90       	pop	r5
   1632e:	4f 90       	pop	r4
   16330:	3f 90       	pop	r3
   16332:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:235
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   16334:	30 90 31 10 	lds	r3, 0x1031	; 0x801031 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:238
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
   16338:	19 82       	std	Y+1, r1	; 0x01
   1633a:	32 e3       	ldi	r19, 0x32	; 50
   1633c:	83 2e       	mov	r8, r19
   1633e:	30 e1       	ldi	r19, 0x10	; 16
   16340:	93 2e       	mov	r9, r19
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    *index = current_index + 1;
   16342:	ee 24       	eor	r14, r14
   16344:	e3 94       	inc	r14
   16346:	f1 2c       	mov	r15, r1
_ZN12PubSubClient10readPacketEPh.constprop.158():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:237
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
   16348:	d1 2c       	mov	r13, r1
   1634a:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:236

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
   1634c:	41 2c       	mov	r4, r1
   1634e:	51 2c       	mov	r5, r1
   16350:	32 01       	movw	r6, r4
   16352:	43 94       	inc	r4
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:243
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
   16354:	ce 01       	movw	r24, r28
   16356:	01 96       	adiw	r24, 0x01	; 1
   16358:	0e 94 b8 ac 	call	0x15970	; 0x15970 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   1635c:	88 23       	and	r24, r24
   1635e:	a1 f2       	breq	.-88     	; 0x16308 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
        buffer[len++] = digit;
   16360:	87 01       	movw	r16, r14
   16362:	0f 5f       	subi	r16, 0xFF	; 255
   16364:	1f 4f       	sbci	r17, 0xFF	; 255
   16366:	89 81       	ldd	r24, Y+1	; 0x01
   16368:	d4 01       	movw	r26, r8
   1636a:	8d 93       	st	X+, r24
   1636c:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:245
        length += (digit & 127) * multiplier;
   1636e:	28 2f       	mov	r18, r24
   16370:	2f 77       	andi	r18, 0x7F	; 127
   16372:	30 e0       	ldi	r19, 0x00	; 0
   16374:	24 9d       	mul	r18, r4
   16376:	a0 01       	movw	r20, r0
   16378:	25 9d       	mul	r18, r5
   1637a:	50 0d       	add	r21, r0
   1637c:	34 9d       	mul	r19, r4
   1637e:	50 0d       	add	r21, r0
   16380:	11 24       	eor	r1, r1
   16382:	c4 0e       	add	r12, r20
   16384:	d5 1e       	adc	r13, r21
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:246
        multiplier *= 128;
   16386:	27 e0       	ldi	r18, 0x07	; 7
   16388:	44 0c       	add	r4, r4
   1638a:	55 1c       	adc	r5, r5
   1638c:	66 1c       	adc	r6, r6
   1638e:	77 1c       	adc	r7, r7
   16390:	2a 95       	dec	r18
   16392:	d1 f7       	brne	.-12     	; 0x16388 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0xb6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:247
    } while ((digit & 128) != 0);
   16394:	87 fd       	sbrc	r24, 7
   16396:	31 c0       	rjmp	.+98     	; 0x163fa <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x128>
   16398:	b3 2d       	mov	r27, r3
   1639a:	b0 7f       	andi	r27, 0xF0	; 240
   1639c:	3b 2e       	mov	r3, r27
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:248
    *lengthLength = len-1;
   1639e:	8f ef       	ldi	r24, 0xFF	; 255
   163a0:	80 0f       	add	r24, r16
   163a2:	f5 01       	movw	r30, r10
   163a4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:250

    if (isPublish) {
   163a6:	f0 e3       	ldi	r31, 0x30	; 48
   163a8:	bf 13       	cpse	r27, r31
   163aa:	29 c0       	rjmp	.+82     	; 0x163fe <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x12c>
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   163ac:	c8 01       	movw	r24, r16
   163ae:	8f 5c       	subi	r24, 0xCF	; 207
   163b0:	9f 4e       	sbci	r25, 0xEF	; 239
   163b2:	0e 94 b8 ac 	call	0x15970	; 0x15970 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   163b6:	88 23       	and	r24, r24
   163b8:	09 f4       	brne	.+2      	; 0x163bc <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0xea>
   163ba:	a6 cf       	rjmp	.-180    	; 0x16308 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
   163bc:	c7 01       	movw	r24, r14
   163be:	8d 5c       	subi	r24, 0xCD	; 205
   163c0:	9f 4e       	sbci	r25, 0xEF	; 239
   163c2:	0e 94 b8 ac 	call	0x15970	; 0x15970 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   163c6:	88 23       	and	r24, r24
   163c8:	09 f4       	brne	.+2      	; 0x163cc <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0xfa>
   163ca:	9e cf       	rjmp	.-196    	; 0x16308 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
    *index = current_index + 1;
   163cc:	0e 5f       	subi	r16, 0xFE	; 254
   163ce:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN12PubSubClient10readPacketEPh.constprop.158():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:254

    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   163d0:	d5 01       	movw	r26, r10
   163d2:	ec 91       	ld	r30, X
   163d4:	f0 e0       	ldi	r31, 0x00	; 0
   163d6:	e1 5d       	subi	r30, 0xD1	; 209
   163d8:	ff 4e       	sbci	r31, 0xEF	; 239
   163da:	e3 80       	ldd	r14, Z+3	; 0x03
   163dc:	f1 2c       	mov	r15, r1
   163de:	fe 2c       	mov	r15, r14
   163e0:	ee 24       	eor	r14, r14
   163e2:	84 81       	ldd	r24, Z+4	; 0x04
   163e4:	e8 0e       	add	r14, r24
   163e6:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:256
        start = 2;
        if (buffer[0]&MQTTQOS1) {
   163e8:	80 91 31 10 	lds	r24, 0x1031	; 0x801031 <mqtt_client+0x2>
   163ec:	81 ff       	sbrs	r24, 1
   163ee:	03 c0       	rjmp	.+6      	; 0x163f6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x124>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:258
            // skip message id
            skip += 2;
   163f0:	b2 e0       	ldi	r27, 0x02	; 2
   163f2:	eb 0e       	add	r14, r27
   163f4:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:255
    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   163f6:	92 e0       	ldi	r25, 0x02	; 2
   163f8:	05 c0       	rjmp	.+10     	; 0x16404 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x132>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
        buffer[len++] = digit;
   163fa:	78 01       	movw	r14, r16
   163fc:	ab cf       	rjmp	.-170    	; 0x16354 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:240
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   163fe:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:239
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
   16400:	f1 2c       	mov	r15, r1
   16402:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   16404:	69 2e       	mov	r6, r25
   16406:	71 2c       	mov	r7, r1
   16408:	60 1a       	sub	r6, r16
   1640a:	71 0a       	sbc	r7, r17
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
        if(!readByte(&digit)) return 0;
        if (this->stream) {
            if (isPublish && len-*lengthLength-2>skip) {
   1640c:	8e ef       	ldi	r24, 0xFE	; 254
   1640e:	88 2e       	mov	r8, r24
   16410:	99 24       	eor	r9, r9
   16412:	9a 94       	dec	r9
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   16414:	c3 01       	movw	r24, r6
   16416:	80 0f       	add	r24, r16
   16418:	91 1f       	adc	r25, r17
   1641a:	8c 15       	cp	r24, r12
   1641c:	9d 05       	cpc	r25, r13
   1641e:	78 f5       	brcc	.+94     	; 0x1647e <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:263
        if(!readByte(&digit)) return 0;
   16420:	ce 01       	movw	r24, r28
   16422:	01 96       	adiw	r24, 0x01	; 1
   16424:	0e 94 b8 ac 	call	0x15970	; 0x15970 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   16428:	88 23       	and	r24, r24
   1642a:	09 f4       	brne	.+2      	; 0x1642e <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x15c>
   1642c:	6d cf       	rjmp	.-294    	; 0x16308 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:264
        if (this->stream) {
   1642e:	80 91 48 12 	lds	r24, 0x1248	; 0x801248 <mqtt_client+0x219>
   16432:	90 91 49 12 	lds	r25, 0x1249	; 0x801249 <mqtt_client+0x21a>
   16436:	00 97       	sbiw	r24, 0x00	; 0
   16438:	b1 f0       	breq	.+44     	; 0x16466 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
            if (isPublish && len-*lengthLength-2>skip) {
   1643a:	e0 e3       	ldi	r30, 0x30	; 48
   1643c:	3e 12       	cpse	r3, r30
   1643e:	13 c0       	rjmp	.+38     	; 0x16466 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x194>
   16440:	d5 01       	movw	r26, r10
   16442:	2c 91       	ld	r18, X
   16444:	f4 01       	movw	r30, r8
   16446:	e2 1b       	sub	r30, r18
   16448:	f1 09       	sbc	r31, r1
   1644a:	9f 01       	movw	r18, r30
   1644c:	20 0f       	add	r18, r16
   1644e:	31 1f       	adc	r19, r17
   16450:	e2 16       	cp	r14, r18
   16452:	f3 06       	cpc	r15, r19
   16454:	40 f4       	brcc	.+16     	; 0x16466 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:266
                this->stream->write(digit);
   16456:	dc 01       	movw	r26, r24
   16458:	ed 91       	ld	r30, X+
   1645a:	fc 91       	ld	r31, X
   1645c:	01 90       	ld	r0, Z+
   1645e:	f0 81       	ld	r31, Z
   16460:	e0 2d       	mov	r30, r0
   16462:	69 81       	ldd	r22, Y+1	; 0x01
   16464:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:269
            }
        }
        if (len < MQTT_MAX_PACKET_SIZE) {
   16466:	01 15       	cp	r16, r1
   16468:	b2 e0       	ldi	r27, 0x02	; 2
   1646a:	1b 07       	cpc	r17, r27
   1646c:	28 f4       	brcc	.+10     	; 0x16478 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x1a6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:270
            buffer[len] = digit;
   1646e:	89 81       	ldd	r24, Y+1	; 0x01
   16470:	f8 01       	movw	r30, r16
   16472:	e1 5d       	subi	r30, 0xD1	; 209
   16474:	ff 4e       	sbci	r31, 0xEF	; 239
   16476:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:272
        }
        len++;
   16478:	0f 5f       	subi	r16, 0xFF	; 255
   1647a:	1f 4f       	sbci	r17, 0xFF	; 255
   1647c:	cb cf       	rjmp	.-106    	; 0x16414 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x142>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:275
    }

    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   1647e:	80 91 48 12 	lds	r24, 0x1248	; 0x801248 <mqtt_client+0x219>
   16482:	90 91 49 12 	lds	r25, 0x1249	; 0x801249 <mqtt_client+0x21a>
   16486:	89 2b       	or	r24, r25
   16488:	09 f0       	breq	.+2      	; 0x1648c <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x1ba>
   1648a:	40 cf       	rjmp	.-384    	; 0x1630c <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x3a>
   1648c:	01 30       	cpi	r16, 0x01	; 1
   1648e:	e2 e0       	ldi	r30, 0x02	; 2
   16490:	1e 07       	cpc	r17, r30
   16492:	08 f0       	brcs	.+2      	; 0x16496 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x1c4>
   16494:	39 cf       	rjmp	.-398    	; 0x16308 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
   16496:	3a cf       	rjmp	.-396    	; 0x1630c <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x3a>

00016498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.153():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:165
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void send_mqtt_message_prefix_id_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, char *topic, char *payload)
   16498:	af 92       	push	r10
   1649a:	bf 92       	push	r11
   1649c:	df 92       	push	r13
   1649e:	ef 92       	push	r14
   164a0:	ff 92       	push	r15
   164a2:	0f 93       	push	r16
   164a4:	1f 93       	push	r17
   164a6:	cf 93       	push	r28
   164a8:	df 93       	push	r29
   164aa:	cd b7       	in	r28, 0x3d	; 61
   164ac:	de b7       	in	r29, 0x3e	; 62
   164ae:	c6 55       	subi	r28, 0x56	; 86
   164b0:	d1 09       	sbc	r29, r1
   164b2:	0f b6       	in	r0, 0x3f	; 63
   164b4:	f8 94       	cli
   164b6:	de bf       	out	0x3e, r29	; 62
   164b8:	0f be       	out	0x3f, r0	; 63
   164ba:	cd bf       	out	0x3d, r28	; 61
   164bc:	5c 01       	movw	r10, r24
   164be:	d6 2e       	mov	r13, r22
   164c0:	7a 01       	movw	r14, r20
   164c2:	89 01       	movw	r16, r18
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:170
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   164c4:	8f e2       	ldi	r24, 0x2F	; 47
   164c6:	90 e1       	ldi	r25, 0x10	; 16
   164c8:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <PubSubClient::connected()>
   164cc:	88 23       	and	r24, r24
   164ce:	09 f4       	brne	.+2      	; 0x164d2 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]+0x3a>
   164d0:	52 c0       	rjmp	.+164    	; 0x16576 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]+0xde>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:172
  {
    mqtt_send_message++;
   164d2:	80 91 ba 0c 	lds	r24, 0x0CBA	; 0x800cba <mqtt_send_message>
   164d6:	90 91 bb 0c 	lds	r25, 0x0CBB	; 0x800cbb <mqtt_send_message+0x1>
   164da:	01 96       	adiw	r24, 0x01	; 1
   164dc:	90 93 bb 0c 	sts	0x0CBB, r25	; 0x800cbb <mqtt_send_message+0x1>
   164e0:	80 93 ba 0c 	sts	0x0CBA, r24	; 0x800cba <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:173
    device_get_name(hostname);
   164e4:	ce 01       	movw	r24, r28
   164e6:	83 5b       	subi	r24, 0xB3	; 179
   164e8:	9f 4f       	sbci	r25, 0xFF	; 255
   164ea:	0e 94 e0 87 	call	0x10fc0	; 0x10fc0 <device_get_name(char*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:174
    strcpy_P(str_topic, header_out);
   164ee:	60 91 b8 0c 	lds	r22, 0x0CB8	; 0x800cb8 <header_out>
   164f2:	70 91 b9 0c 	lds	r23, 0x0CB9	; 0x800cb9 <header_out+0x1>
   164f6:	ce 01       	movw	r24, r28
   164f8:	01 96       	adiw	r24, 0x01	; 1
   164fa:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:175
    strcat(str_topic, hostname);
   164fe:	be 01       	movw	r22, r28
   16500:	63 5b       	subi	r22, 0xB3	; 179
   16502:	7f 4f       	sbci	r23, 0xFF	; 255
   16504:	ce 01       	movw	r24, r28
   16506:	01 96       	adiw	r24, 0x01	; 1
   16508:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:176
    strcat(str_topic, "/");
   1650c:	60 e9       	ldi	r22, 0x90	; 144
   1650e:	75 e0       	ldi	r23, 0x05	; 5
   16510:	ce 01       	movw	r24, r28
   16512:	01 96       	adiw	r24, 0x01	; 1
   16514:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:177
    strcat(str_topic, prefix);
   16518:	b5 01       	movw	r22, r10
   1651a:	ce 01       	movw	r24, r28
   1651c:	01 96       	adiw	r24, 0x01	; 1
   1651e:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:178
    strcat(str_topic, "/");
   16522:	60 e9       	ldi	r22, 0x90	; 144
   16524:	75 e0       	ldi	r23, 0x05	; 5
   16526:	ce 01       	movw	r24, r28
   16528:	01 96       	adiw	r24, 0x01	; 1
   1652a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1652e:	4a e0       	ldi	r20, 0x0A	; 10
   16530:	be 01       	movw	r22, r28
   16532:	6f 5b       	subi	r22, 0xBF	; 191
   16534:	7f 4f       	sbci	r23, 0xFF	; 255
   16536:	8d 2d       	mov	r24, r13
   16538:	90 e0       	ldi	r25, 0x00	; 0
   1653a:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.153():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:180
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   1653e:	be 01       	movw	r22, r28
   16540:	6f 5b       	subi	r22, 0xBF	; 191
   16542:	7f 4f       	sbci	r23, 0xFF	; 255
   16544:	ce 01       	movw	r24, r28
   16546:	01 96       	adiw	r24, 0x01	; 1
   16548:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:181
    strcat(str_topic, "/");
   1654c:	60 e9       	ldi	r22, 0x90	; 144
   1654e:	75 e0       	ldi	r23, 0x05	; 5
   16550:	ce 01       	movw	r24, r28
   16552:	01 96       	adiw	r24, 0x01	; 1
   16554:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:182
    strcat(str_topic, topic);
   16558:	b7 01       	movw	r22, r14
   1655a:	ce 01       	movw	r24, r28
   1655c:	01 96       	adiw	r24, 0x01	; 1
   1655e:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:183
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   16562:	a8 01       	movw	r20, r16
   16564:	be 01       	movw	r22, r28
   16566:	6f 5f       	subi	r22, 0xFF	; 255
   16568:	7f 4f       	sbci	r23, 0xFF	; 255
   1656a:	8f e2       	ldi	r24, 0x2F	; 47
   1656c:	90 e1       	ldi	r25, 0x10	; 16
   1656e:	0e 94 23 60 	call	0xc046	; 0xc046 <PubSubClient::publish(char const*, char const*)>
   16572:	81 11       	cpse	r24, r1
   16574:	09 c0       	rjmp	.+18     	; 0x16588 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]+0xf0>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:186
  }
  else
    mqtt_error++;
   16576:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <mqtt_error>
   1657a:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <mqtt_error+0x1>
   1657e:	01 96       	adiw	r24, 0x01	; 1
   16580:	90 93 bd 0c 	sts	0x0CBD, r25	; 0x800cbd <mqtt_error+0x1>
   16584:	80 93 bc 0c 	sts	0x0CBC, r24	; 0x800cbc <mqtt_error>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:187
}
   16588:	ca 5a       	subi	r28, 0xAA	; 170
   1658a:	df 4f       	sbci	r29, 0xFF	; 255
   1658c:	0f b6       	in	r0, 0x3f	; 63
   1658e:	f8 94       	cli
   16590:	de bf       	out	0x3e, r29	; 62
   16592:	0f be       	out	0x3f, r0	; 63
   16594:	cd bf       	out	0x3d, r28	; 61
   16596:	df 91       	pop	r29
   16598:	cf 91       	pop	r28
   1659a:	1f 91       	pop	r17
   1659c:	0f 91       	pop	r16
   1659e:	ff 90       	pop	r15
   165a0:	ef 90       	pop	r14
   165a2:	df 90       	pop	r13
   165a4:	bf 90       	pop	r11
   165a6:	af 90       	pop	r10
   165a8:	08 95       	ret

000165aa <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>:
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.151():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:189
///
void send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, uint8_t idx, char *topic, char *payload)
   165aa:	cf 92       	push	r12
   165ac:	df 92       	push	r13
   165ae:	ef 92       	push	r14
   165b0:	ff 92       	push	r15
   165b2:	0f 93       	push	r16
   165b4:	1f 93       	push	r17
   165b6:	cf 93       	push	r28
   165b8:	df 93       	push	r29
   165ba:	cd b7       	in	r28, 0x3d	; 61
   165bc:	de b7       	in	r29, 0x3e	; 62
   165be:	c6 55       	subi	r28, 0x56	; 86
   165c0:	d1 09       	sbc	r29, r1
   165c2:	0f b6       	in	r0, 0x3f	; 63
   165c4:	f8 94       	cli
   165c6:	de bf       	out	0x3e, r29	; 62
   165c8:	0f be       	out	0x3f, r0	; 63
   165ca:	cd bf       	out	0x3d, r28	; 61
   165cc:	c8 2e       	mov	r12, r24
   165ce:	d6 2e       	mov	r13, r22
   165d0:	7a 01       	movw	r14, r20
   165d2:	89 01       	movw	r16, r18
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:194
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   165d4:	8f e2       	ldi	r24, 0x2F	; 47
   165d6:	90 e1       	ldi	r25, 0x10	; 16
   165d8:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <PubSubClient::connected()>
   165dc:	88 23       	and	r24, r24
   165de:	09 f4       	brne	.+2      	; 0x165e2 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]+0x38>
   165e0:	68 c0       	rjmp	.+208    	; 0x166b2 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]+0x108>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:196
  {
    mqtt_send_message++;
   165e2:	80 91 ba 0c 	lds	r24, 0x0CBA	; 0x800cba <mqtt_send_message>
   165e6:	90 91 bb 0c 	lds	r25, 0x0CBB	; 0x800cbb <mqtt_send_message+0x1>
   165ea:	01 96       	adiw	r24, 0x01	; 1
   165ec:	90 93 bb 0c 	sts	0x0CBB, r25	; 0x800cbb <mqtt_send_message+0x1>
   165f0:	80 93 ba 0c 	sts	0x0CBA, r24	; 0x800cba <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:197
    device_get_name(hostname);
   165f4:	ce 01       	movw	r24, r28
   165f6:	83 5b       	subi	r24, 0xB3	; 179
   165f8:	9f 4f       	sbci	r25, 0xFF	; 255
   165fa:	0e 94 e0 87 	call	0x10fc0	; 0x10fc0 <device_get_name(char*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:198
    strcpy_P(str_topic, header_out);
   165fe:	60 91 b8 0c 	lds	r22, 0x0CB8	; 0x800cb8 <header_out>
   16602:	70 91 b9 0c 	lds	r23, 0x0CB9	; 0x800cb9 <header_out+0x1>
   16606:	ce 01       	movw	r24, r28
   16608:	01 96       	adiw	r24, 0x01	; 1
   1660a:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:199
    strcat(str_topic, hostname);
   1660e:	be 01       	movw	r22, r28
   16610:	63 5b       	subi	r22, 0xB3	; 179
   16612:	7f 4f       	sbci	r23, 0xFF	; 255
   16614:	ce 01       	movw	r24, r28
   16616:	01 96       	adiw	r24, 0x01	; 1
   16618:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:200
    strcat(str_topic, "/");
   1661c:	60 e9       	ldi	r22, 0x90	; 144
   1661e:	75 e0       	ldi	r23, 0x05	; 5
   16620:	ce 01       	movw	r24, r28
   16622:	01 96       	adiw	r24, 0x01	; 1
   16624:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:201
    strcat(str_topic, prefix);
   16628:	69 ed       	ldi	r22, 0xD9	; 217
   1662a:	78 e0       	ldi	r23, 0x08	; 8
   1662c:	ce 01       	movw	r24, r28
   1662e:	01 96       	adiw	r24, 0x01	; 1
   16630:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:202
    strcat(str_topic, "/");
   16634:	60 e9       	ldi	r22, 0x90	; 144
   16636:	75 e0       	ldi	r23, 0x05	; 5
   16638:	ce 01       	movw	r24, r28
   1663a:	01 96       	adiw	r24, 0x01	; 1
   1663c:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   16640:	4a e0       	ldi	r20, 0x0A	; 10
   16642:	be 01       	movw	r22, r28
   16644:	6f 5b       	subi	r22, 0xBF	; 191
   16646:	7f 4f       	sbci	r23, 0xFF	; 255
   16648:	8c 2d       	mov	r24, r12
   1664a:	90 e0       	ldi	r25, 0x00	; 0
   1664c:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.151():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:204
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   16650:	be 01       	movw	r22, r28
   16652:	6f 5b       	subi	r22, 0xBF	; 191
   16654:	7f 4f       	sbci	r23, 0xFF	; 255
   16656:	ce 01       	movw	r24, r28
   16658:	01 96       	adiw	r24, 0x01	; 1
   1665a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:205
    strcat(str_topic, "/");
   1665e:	60 e9       	ldi	r22, 0x90	; 144
   16660:	75 e0       	ldi	r23, 0x05	; 5
   16662:	ce 01       	movw	r24, r28
   16664:	01 96       	adiw	r24, 0x01	; 1
   16666:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1666a:	4a e0       	ldi	r20, 0x0A	; 10
   1666c:	be 01       	movw	r22, r28
   1666e:	6f 5b       	subi	r22, 0xBF	; 191
   16670:	7f 4f       	sbci	r23, 0xFF	; 255
   16672:	8d 2d       	mov	r24, r13
   16674:	90 e0       	ldi	r25, 0x00	; 0
   16676:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.151():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:207
    itoa(idx, tmp1, 10);
    strcat(str_topic, tmp1);
   1667a:	be 01       	movw	r22, r28
   1667c:	6f 5b       	subi	r22, 0xBF	; 191
   1667e:	7f 4f       	sbci	r23, 0xFF	; 255
   16680:	ce 01       	movw	r24, r28
   16682:	01 96       	adiw	r24, 0x01	; 1
   16684:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:208
    strcat(str_topic, "/");
   16688:	60 e9       	ldi	r22, 0x90	; 144
   1668a:	75 e0       	ldi	r23, 0x05	; 5
   1668c:	ce 01       	movw	r24, r28
   1668e:	01 96       	adiw	r24, 0x01	; 1
   16690:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:209
    strcat(str_topic, topic);
   16694:	b7 01       	movw	r22, r14
   16696:	ce 01       	movw	r24, r28
   16698:	01 96       	adiw	r24, 0x01	; 1
   1669a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:210
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   1669e:	a8 01       	movw	r20, r16
   166a0:	be 01       	movw	r22, r28
   166a2:	6f 5f       	subi	r22, 0xFF	; 255
   166a4:	7f 4f       	sbci	r23, 0xFF	; 255
   166a6:	8f e2       	ldi	r24, 0x2F	; 47
   166a8:	90 e1       	ldi	r25, 0x10	; 16
   166aa:	0e 94 23 60 	call	0xc046	; 0xc046 <PubSubClient::publish(char const*, char const*)>
   166ae:	81 11       	cpse	r24, r1
   166b0:	09 c0       	rjmp	.+18     	; 0x166c4 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]+0x11a>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:213
  }
  else
    mqtt_error++;
   166b2:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <mqtt_error>
   166b6:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <mqtt_error+0x1>
   166ba:	01 96       	adiw	r24, 0x01	; 1
   166bc:	90 93 bd 0c 	sts	0x0CBD, r25	; 0x800cbd <mqtt_error+0x1>
   166c0:	80 93 bc 0c 	sts	0x0CBC, r24	; 0x800cbc <mqtt_error>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:214
}
   166c4:	ca 5a       	subi	r28, 0xAA	; 170
   166c6:	df 4f       	sbci	r29, 0xFF	; 255
   166c8:	0f b6       	in	r0, 0x3f	; 63
   166ca:	f8 94       	cli
   166cc:	de bf       	out	0x3e, r29	; 62
   166ce:	0f be       	out	0x3f, r0	; 63
   166d0:	cd bf       	out	0x3d, r28	; 61
   166d2:	df 91       	pop	r29
   166d4:	cf 91       	pop	r28
   166d6:	1f 91       	pop	r17
   166d8:	0f 91       	pop	r16
   166da:	ff 90       	pop	r15
   166dc:	ef 90       	pop	r14
   166de:	df 90       	pop	r13
   166e0:	cf 90       	pop	r12
   166e2:	08 95       	ret

000166e4 <TwoWire::requestFrom(int, int) [clone .constprop.150]>:
_ZN7TwoWire11requestFromEii.constprop.150():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:131
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
   166e4:	68 2f       	mov	r22, r24
   166e6:	88 e6       	ldi	r24, 0x68	; 104
   166e8:	0e 94 86 ae 	call	0x15d0c	; 0x15d0c <twi_readFrom.part.0.constprop.201>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   166ec:	10 92 04 0d 	sts	0x0D04, r1	; 0x800d04 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   166f0:	80 93 03 0d 	sts	0x0D03, r24	; 0x800d03 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:134
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   166f4:	08 95       	ret

000166f6 <RTC_DS1307::isrunning() [clone .constprop.149]>:
_ZN10RTC_DS13079isrunningEv.constprop.149():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   166f6:	88 e6       	ldi	r24, 0x68	; 104
   166f8:	0e 94 c8 ae 	call	0x15d90	; 0x15d90 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
   166fc:	60 e0       	ldi	r22, 0x00	; 0
   166fe:	88 ef       	ldi	r24, 0xF8	; 248
   16700:	9f e0       	ldi	r25, 0x0F	; 15
   16702:	0e 94 4c 3f 	call	0x7e98	; 0x7e98 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   16706:	88 ef       	ldi	r24, 0xF8	; 248
   16708:	9f e0       	ldi	r25, 0x0F	; 15
   1670a:	0e 94 8f 5c 	call	0xb91e	; 0xb91e <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   1670e:	81 e0       	ldi	r24, 0x01	; 1
   16710:	90 e0       	ldi	r25, 0x00	; 0
   16712:	0e 94 72 b3 	call	0x166e4	; 0x166e4 <TwoWire::requestFrom(int, int) [clone .constprop.150]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   16716:	0e 94 5b af 	call	0x15eb6	; 0x15eb6 <TwoWire::read() [clone .constprop.190]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   1671a:	80 58       	subi	r24, 0x80	; 128
   1671c:	87 fb       	bst	r24, 7
   1671e:	88 27       	eor	r24, r24
   16720:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   16722:	08 95       	ret

00016724 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]>:
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:399
  }
}


//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset,  DateTime *now)
   16724:	3f 92       	push	r3
   16726:	4f 92       	push	r4
   16728:	5f 92       	push	r5
   1672a:	6f 92       	push	r6
   1672c:	7f 92       	push	r7
   1672e:	8f 92       	push	r8
   16730:	9f 92       	push	r9
   16732:	af 92       	push	r10
   16734:	bf 92       	push	r11
   16736:	cf 92       	push	r12
   16738:	df 92       	push	r13
   1673a:	ef 92       	push	r14
   1673c:	ff 92       	push	r15
   1673e:	0f 93       	push	r16
   16740:	1f 93       	push	r17
   16742:	cf 93       	push	r28
   16744:	df 93       	push	r29
   16746:	cd b7       	in	r28, 0x3d	; 61
   16748:	de b7       	in	r29, 0x3e	; 62
   1674a:	6b 97       	sbiw	r28, 0x1b	; 27
   1674c:	0f b6       	in	r0, 0x3f	; 63
   1674e:	f8 94       	cli
   16750:	de bf       	out	0x3e, r29	; 62
   16752:	0f be       	out	0x3f, r0	; 63
   16754:	cd bf       	out	0x3d, r28	; 61
   16756:	7c 01       	movw	r14, r24
   16758:	16 2f       	mov	r17, r22
   1675a:	6a 01       	movw	r12, r20
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:403
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
   1675c:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:404
  createString(tmp1, '.', device.ntp_server, 4, 10);
   1675e:	0a e0       	ldi	r16, 0x0A	; 10
   16760:	24 e0       	ldi	r18, 0x04	; 4
   16762:	47 e6       	ldi	r20, 0x67	; 103
   16764:	5e e0       	ldi	r21, 0x0E	; 14
   16766:	6e e2       	ldi	r22, 0x2E	; 46
   16768:	ce 01       	movw	r24, r28
   1676a:	01 96       	adiw	r24, 0x01	; 1
   1676c:	5c 01       	movw	r10, r24
   1676e:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:405
  timeClient->begin();
   16772:	c7 01       	movw	r24, r14
   16774:	0e 94 89 5a 	call	0xb512	; 0xb512 <NTPClient::begin()>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:406
  timeClient->setTimeOffset(3600 * offset);
   16778:	20 e1       	ldi	r18, 0x10	; 16
   1677a:	3e e0       	ldi	r19, 0x0E	; 14
   1677c:	12 9f       	mul	r17, r18
   1677e:	c0 01       	movw	r24, r0
   16780:	13 9f       	mul	r17, r19
   16782:	90 0d       	add	r25, r0
   16784:	11 24       	eor	r1, r1
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   16786:	09 2e       	mov	r0, r25
   16788:	00 0c       	add	r0, r0
   1678a:	aa 0b       	sbc	r26, r26
   1678c:	bb 0b       	sbc	r27, r27
   1678e:	f7 01       	movw	r30, r14
   16790:	87 83       	std	Z+7, r24	; 0x07
   16792:	90 87       	std	Z+8, r25	; 0x08
   16794:	a1 87       	std	Z+9, r26	; 0x09
   16796:	b2 87       	std	Z+10, r27	; 0x0a
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   16798:	b4 82       	std	Z+4, r11	; 0x04
   1679a:	a3 82       	std	Z+3, r10	; 0x03
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:408
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
   1679c:	c7 01       	movw	r24, r14
   1679e:	0e 94 a0 5a 	call	0xb540	; 0xb540 <NTPClient::update()>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:402

//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset,  DateTime *now)
{
  char tmp1[20];
  uint8_t ret = 0;
   167a2:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:408
  tmp1[0] = 0;
  createString(tmp1, '.', device.ntp_server, 4, 10);
  timeClient->begin();
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
   167a4:	88 23       	and	r24, r24
   167a6:	09 f4       	brne	.+2      	; 0x167aa <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]+0x86>
   167a8:	7c c0       	rjmp	.+248    	; 0x168a2 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]+0x17e>
getSeconds():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:148
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
}
int NTPClient::getSeconds() const {
  return (this->getEpochTime() % 60);
   167aa:	c7 01       	movw	r24, r14
   167ac:	0e 94 55 5a 	call	0xb4aa	; 0xb4aa <NTPClient::getEpochTime() const>
   167b0:	2c e3       	ldi	r18, 0x3C	; 60
   167b2:	82 2e       	mov	r8, r18
   167b4:	91 2c       	mov	r9, r1
   167b6:	a1 2c       	mov	r10, r1
   167b8:	b1 2c       	mov	r11, r1
   167ba:	a5 01       	movw	r20, r10
   167bc:	94 01       	movw	r18, r8
   167be:	0e 94 65 ef 	call	0x1deca	; 0x1deca <__udivmodsi4>
   167c2:	36 2e       	mov	r3, r22
getMinutes():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:145
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
   167c4:	c7 01       	movw	r24, r14
   167c6:	0e 94 55 5a 	call	0xb4aa	; 0xb4aa <NTPClient::getEpochTime() const>
   167ca:	30 e1       	ldi	r19, 0x10	; 16
   167cc:	43 2e       	mov	r4, r19
   167ce:	3e e0       	ldi	r19, 0x0E	; 14
   167d0:	53 2e       	mov	r5, r19
   167d2:	61 2c       	mov	r6, r1
   167d4:	71 2c       	mov	r7, r1
   167d6:	a3 01       	movw	r20, r6
   167d8:	92 01       	movw	r18, r4
   167da:	0e 94 65 ef 	call	0x1deca	; 0x1deca <__udivmodsi4>
   167de:	a5 01       	movw	r20, r10
   167e0:	94 01       	movw	r18, r8
   167e2:	0e 94 65 ef 	call	0x1deca	; 0x1deca <__udivmodsi4>
   167e6:	a2 2e       	mov	r10, r18
getHours():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:142

int NTPClient::getDay() const {
  return (((this->getEpochTime()  / 86400L) + 4 ) % 7); //0 is Sunday
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
   167e8:	c7 01       	movw	r24, r14
   167ea:	0e 94 55 5a 	call	0xb4aa	; 0xb4aa <NTPClient::getEpochTime() const>
   167ee:	20 e8       	ldi	r18, 0x80	; 128
   167f0:	31 e5       	ldi	r19, 0x51	; 81
   167f2:	41 e0       	ldi	r20, 0x01	; 1
   167f4:	50 e0       	ldi	r21, 0x00	; 0
   167f6:	0e 94 65 ef 	call	0x1deca	; 0x1deca <__udivmodsi4>
   167fa:	a3 01       	movw	r20, r6
   167fc:	92 01       	movw	r18, r4
   167fe:	0e 94 65 ef 	call	0x1deca	; 0x1deca <__udivmodsi4>
   16802:	92 2e       	mov	r9, r18
getDate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:130

  return month;
}

int NTPClient::getDate() const {
  time_t rawtime = this->getEpochTime();
   16804:	c7 01       	movw	r24, r14
   16806:	0e 94 55 5a 	call	0xb4aa	; 0xb4aa <NTPClient::getEpochTime() const>
   1680a:	6d 8b       	std	Y+21, r22	; 0x15
   1680c:	7e 8b       	std	Y+22, r23	; 0x16
   1680e:	8f 8b       	std	Y+23, r24	; 0x17
   16810:	98 8f       	std	Y+24, r25	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:132
  struct tm * ti;
  ti = localtime (&rawtime);
   16812:	ce 01       	movw	r24, r28
   16814:	45 96       	adiw	r24, 0x15	; 21
   16816:	0e 94 1d d1 	call	0x1a23a	; 0x1a23a <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:133
  int month = (ti->tm_mday) < 10 ? 0 + (ti->tm_mday) : (ti->tm_mday);
   1681a:	dc 01       	movw	r26, r24
   1681c:	13 96       	adiw	r26, 0x03	; 3
   1681e:	8c 90       	ld	r8, X
getMonth():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:121

  return year;
}

int NTPClient::getMonth() const {
  time_t rawtime = this->getEpochTime();
   16820:	c7 01       	movw	r24, r14
   16822:	0e 94 55 5a 	call	0xb4aa	; 0xb4aa <NTPClient::getEpochTime() const>
   16826:	6d 8b       	std	Y+21, r22	; 0x15
   16828:	7e 8b       	std	Y+22, r23	; 0x16
   1682a:	8f 8b       	std	Y+23, r24	; 0x17
   1682c:	98 8f       	std	Y+24, r25	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:123
  struct tm * ti;
  ti = localtime (&rawtime);
   1682e:	ce 01       	movw	r24, r28
   16830:	45 96       	adiw	r24, 0x15	; 21
   16832:	0e 94 1d d1 	call	0x1a23a	; 0x1a23a <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:124
  int month = (ti->tm_mon + 1) < 10 ? 0 + (ti->tm_mon + 1) : (ti->tm_mon + 1);
   16836:	fc 01       	movw	r30, r24
   16838:	05 81       	ldd	r16, Z+5	; 0x05
   1683a:	00 2e       	mov	r0, r16
   1683c:	00 0c       	add	r0, r0
   1683e:	11 0b       	sbc	r17, r17
   16840:	0f 5f       	subi	r16, 0xFF	; 255
   16842:	1f 4f       	sbci	r17, 0xFF	; 255
getYear():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:112
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
}

int NTPClient::getYear() const {
  time_t rawtime = this->getEpochTime();
   16844:	c7 01       	movw	r24, r14
   16846:	0e 94 55 5a 	call	0xb4aa	; 0xb4aa <NTPClient::getEpochTime() const>
   1684a:	6d 8b       	std	Y+21, r22	; 0x15
   1684c:	7e 8b       	std	Y+22, r23	; 0x16
   1684e:	8f 8b       	std	Y+23, r24	; 0x17
   16850:	98 8f       	std	Y+24, r25	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:114
  struct tm * ti;
  ti = localtime (&rawtime);
   16852:	ce 01       	movw	r24, r28
   16854:	45 96       	adiw	r24, 0x15	; 21
   16856:	0e 94 1d d1 	call	0x1a23a	; 0x1a23a <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:115
  int year = ti->tm_year + 1900;
   1685a:	dc 01       	movw	r26, r24
   1685c:	16 96       	adiw	r26, 0x06	; 6
   1685e:	2d 91       	ld	r18, X+
   16860:	3c 91       	ld	r19, X
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:410
  {
    rtc->adjust(DateTime(timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
   16862:	c9 01       	movw	r24, r18
   16864:	84 59       	subi	r24, 0x94	; 148
   16866:	98 4f       	sbci	r25, 0xF8	; 248
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
   16868:	80 3d       	cpi	r24, 0xD0	; 208
   1686a:	b7 e0       	ldi	r27, 0x07	; 7
   1686c:	9b 07       	cpc	r25, r27
   1686e:	10 f0       	brcs	.+4      	; 0x16874 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]+0x150>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
   16870:	80 5d       	subi	r24, 0xD0	; 208
   16872:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
   16874:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   16876:	0e 8b       	std	Y+22, r16	; 0x16
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   16878:	8f 8a       	std	Y+23, r8	; 0x17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   1687a:	98 8e       	std	Y+24, r9	; 0x18
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   1687c:	a9 8e       	std	Y+25, r10	; 0x19
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   1687e:	3a 8e       	std	Y+26, r3	; 0x1a
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:410
   16880:	ce 01       	movw	r24, r28
   16882:	45 96       	adiw	r24, 0x15	; 21
   16884:	0e 94 7b 5e 	call	0xbcf6	; 0xbcf6 <RTC_DS1307::adjust(DateTime const&)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:411
    *now = rtc->now();
   16888:	ce 01       	movw	r24, r28
   1688a:	45 96       	adiw	r24, 0x15	; 21
   1688c:	0e 94 ec 5d 	call	0xbbd8	; 0xbbd8 <RTC_DS1307::now()>
   16890:	87 e0       	ldi	r24, 0x07	; 7
   16892:	fe 01       	movw	r30, r28
   16894:	75 96       	adiw	r30, 0x15	; 21
   16896:	d6 01       	movw	r26, r12
   16898:	01 90       	ld	r0, Z+
   1689a:	0d 92       	st	X+, r0
   1689c:	8a 95       	dec	r24
   1689e:	e1 f7       	brne	.-8      	; 0x16898 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]+0x174>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:412
    ret = 1;
   168a0:	11 e0       	ldi	r17, 0x01	; 1
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
   168a2:	f7 01       	movw	r30, r14
   168a4:	80 81       	ld	r24, Z
   168a6:	91 81       	ldd	r25, Z+1	; 0x01
   168a8:	dc 01       	movw	r26, r24
   168aa:	ed 91       	ld	r30, X+
   168ac:	fc 91       	ld	r31, X
   168ae:	02 88       	ldd	r0, Z+18	; 0x12
   168b0:	f3 89       	ldd	r31, Z+19	; 0x13
   168b2:	e0 2d       	mov	r30, r0
   168b4:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   168b6:	f7 01       	movw	r30, r14
   168b8:	12 82       	std	Z+2, r1	; 0x02
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:416
  }
  timeClient->end();
  return ret;
}
   168ba:	81 2f       	mov	r24, r17
   168bc:	6b 96       	adiw	r28, 0x1b	; 27
   168be:	0f b6       	in	r0, 0x3f	; 63
   168c0:	f8 94       	cli
   168c2:	de bf       	out	0x3e, r29	; 62
   168c4:	0f be       	out	0x3f, r0	; 63
   168c6:	cd bf       	out	0x3d, r28	; 61
   168c8:	df 91       	pop	r29
   168ca:	cf 91       	pop	r28
   168cc:	1f 91       	pop	r17
   168ce:	0f 91       	pop	r16
   168d0:	ff 90       	pop	r15
   168d2:	ef 90       	pop	r14
   168d4:	df 90       	pop	r13
   168d6:	cf 90       	pop	r12
   168d8:	bf 90       	pop	r11
   168da:	af 90       	pop	r10
   168dc:	9f 90       	pop	r9
   168de:	8f 90       	pop	r8
   168e0:	7f 90       	pop	r7
   168e2:	6f 90       	pop	r6
   168e4:	5f 90       	pop	r5
   168e6:	4f 90       	pop	r4
   168e8:	3f 90       	pop	r3
   168ea:	08 95       	ret

000168ec <DateTime::DateTime(unsigned long) [clone .constprop.146]>:
_ZN8DateTimeC2Em.constprop.146():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:74

////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
   168ec:	dc 01       	movw	r26, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:77
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970

    ss = t % 60;
   168ee:	80 e1       	ldi	r24, 0x10	; 16
   168f0:	15 96       	adiw	r26, 0x05	; 5
   168f2:	8c 93       	st	X, r24
   168f4:	15 97       	sbiw	r26, 0x05	; 5
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:79
    t /= 60;
    mm = t % 60;
   168f6:	8c e1       	ldi	r24, 0x1C	; 28
   168f8:	14 96       	adiw	r26, 0x04	; 4
   168fa:	8c 93       	st	X, r24
   168fc:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:81
    t /= 60;
    hh = t % 24;
   168fe:	86 e0       	ldi	r24, 0x06	; 6
   16900:	13 96       	adiw	r26, 0x03	; 3
   16902:	8c 93       	st	X, r24
   16904:	13 97       	sbiw	r26, 0x03	; 3
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:84
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   16906:	1c 92       	st	X, r1
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:82
    ss = t % 60;
    t /= 60;
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
   16908:	81 e6       	ldi	r24, 0x61	; 97
   1690a:	97 e9       	ldi	r25, 0x97	; 151
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:88
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
   1690c:	63 e9       	ldi	r22, 0x93	; 147
   1690e:	7e ef       	ldi	r23, 0xFE	; 254
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:85
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
        leap = yOff % 4 == 0;
   16910:	4c 91       	ld	r20, X
   16912:	54 2f       	mov	r21, r20
   16914:	53 70       	andi	r21, 0x03	; 3
   16916:	21 e0       	ldi	r18, 0x01	; 1
   16918:	09 f0       	breq	.+2      	; 0x1691c <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x30>
   1691a:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:86
        if (days < 365 + leap)
   1691c:	30 e0       	ldi	r19, 0x00	; 0
   1691e:	f9 01       	movw	r30, r18
   16920:	e3 59       	subi	r30, 0x93	; 147
   16922:	fe 4f       	sbci	r31, 0xFE	; 254
   16924:	8e 17       	cp	r24, r30
   16926:	9f 07       	cpc	r25, r31
   16928:	40 f0       	brcs	.+16     	; 0x1693a <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x4e>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:88
            break;
        days -= 365 + leap;
   1692a:	fb 01       	movw	r30, r22
   1692c:	e2 1b       	sub	r30, r18
   1692e:	f3 0b       	sbc	r31, r19
   16930:	8e 0f       	add	r24, r30
   16932:	9f 1f       	adc	r25, r31
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:84
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   16934:	4f 5f       	subi	r20, 0xFF	; 255
   16936:	4c 93       	st	X, r20
   16938:	eb cf       	rjmp	.-42     	; 0x16910 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x24>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:90
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   1693a:	21 e0       	ldi	r18, 0x01	; 1
   1693c:	11 96       	adiw	r26, 0x01	; 1
   1693e:	2c 93       	st	X, r18
   16940:	11 97       	sbiw	r26, 0x01	; 1
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:91
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
   16942:	11 96       	adiw	r26, 0x01	; 1
   16944:	2c 91       	ld	r18, X
   16946:	11 97       	sbiw	r26, 0x01	; 1
   16948:	62 2f       	mov	r22, r18
   1694a:	61 50       	subi	r22, 0x01	; 1
   1694c:	77 0b       	sbc	r23, r23
   1694e:	fb 01       	movw	r30, r22
   16950:	ec 50       	subi	r30, 0x0C	; 12
   16952:	fa 48       	sbci	r31, 0x8A	; 138
   16954:	e4 91       	lpm	r30, Z
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:92
        if (leap && m == 2)
   16956:	51 11       	cpse	r21, r1
   16958:	03 c0       	rjmp	.+6      	; 0x16960 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x74>
   1695a:	22 30       	cpi	r18, 0x02	; 2
   1695c:	09 f4       	brne	.+2      	; 0x16960 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x74>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:93
            ++daysPerMonth;
   1695e:	ef 5f       	subi	r30, 0xFF	; 255
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:94
        if (days < daysPerMonth)
   16960:	f0 e0       	ldi	r31, 0x00	; 0
   16962:	8e 17       	cp	r24, r30
   16964:	9f 07       	cpc	r25, r31
   16966:	20 f0       	brcs	.+8      	; 0x16970 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x84>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:96
            break;
        days -= daysPerMonth;
   16968:	8e 1b       	sub	r24, r30
   1696a:	9f 0b       	sbc	r25, r31
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:90
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   1696c:	2f 5f       	subi	r18, 0xFF	; 255
   1696e:	e6 cf       	rjmp	.-52     	; 0x1693c <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x50>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:98
            ++daysPerMonth;
        if (days < daysPerMonth)
            break;
        days -= daysPerMonth;
    }
    d = days + 1;
   16970:	8f 5f       	subi	r24, 0xFF	; 255
   16972:	12 96       	adiw	r26, 0x02	; 2
   16974:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:99
}
   16976:	08 95       	ret

00016978 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]>:
_Z9draw_menubhjj.constprop.141():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:632





bool draw_menu(bool redraw, uint8_t click_type, uint16_t click_x, uint16_t click_y)
   16978:	2f 92       	push	r2
   1697a:	3f 92       	push	r3
   1697c:	4f 92       	push	r4
   1697e:	5f 92       	push	r5
   16980:	6f 92       	push	r6
   16982:	7f 92       	push	r7
   16984:	8f 92       	push	r8
   16986:	9f 92       	push	r9
   16988:	af 92       	push	r10
   1698a:	bf 92       	push	r11
   1698c:	cf 92       	push	r12
   1698e:	df 92       	push	r13
   16990:	ef 92       	push	r14
   16992:	ff 92       	push	r15
   16994:	0f 93       	push	r16
   16996:	1f 93       	push	r17
   16998:	cf 93       	push	r28
   1699a:	df 93       	push	r29
   1699c:	cd b7       	in	r28, 0x3d	; 61
   1699e:	de b7       	in	r29, 0x3e	; 62
   169a0:	c3 5e       	subi	r28, 0xE3	; 227
   169a2:	d1 09       	sbc	r29, r1
   169a4:	0f b6       	in	r0, 0x3f	; 63
   169a6:	f8 94       	cli
   169a8:	de bf       	out	0x3e, r29	; 62
   169aa:	0f be       	out	0x3f, r0	; 63
   169ac:	cd bf       	out	0x3d, r28	; 61
   169ae:	a8 2e       	mov	r10, r24
   169b0:	ca 53       	subi	r28, 0x3A	; 58
   169b2:	df 4f       	sbci	r29, 0xFF	; 255
   169b4:	79 83       	std	Y+1, r23	; 0x01
   169b6:	68 83       	st	Y, r22
   169b8:	c6 5c       	subi	r28, 0xC6	; 198
   169ba:	d0 40       	sbci	r29, 0x00	; 0
   169bc:	c8 53       	subi	r28, 0x38	; 56
   169be:	df 4f       	sbci	r29, 0xFF	; 255
   169c0:	59 83       	std	Y+1, r21	; 0x01
   169c2:	48 83       	st	Y, r20
   169c4:	c8 5c       	subi	r28, 0xC8	; 200
   169c6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:665
  uint8_t menu_args1;
  uint8_t redraw_class;
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);
   169c8:	ce 01       	movw	r24, r28
   169ca:	8f 54       	subi	r24, 0x4F	; 79
   169cc:	9f 4f       	sbci	r25, 0xFF	; 255
   169ce:	0e 94 fe 9a 	call	0x135fc	; 0x135fc <MenuHistoryGetMenu(unsigned char*)>
   169d2:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:690
      }
    }
    }
  */

  global_x = pgm_read_word(&current->x);
   169d4:	8c 01       	movw	r16, r24
   169d6:	08 52       	subi	r16, 0x28	; 40
   169d8:	1d 4f       	sbci	r17, 0xFD	; 253
   169da:	f8 01       	movw	r30, r16
   169dc:	25 91       	lpm	r18, Z+
   169de:	34 91       	lpm	r19, Z
   169e0:	c8 54       	subi	r28, 0x48	; 72
   169e2:	df 4f       	sbci	r29, 0xFF	; 255
   169e4:	39 83       	std	Y+1, r19	; 0x01
   169e6:	28 83       	st	Y, r18
   169e8:	c8 5b       	subi	r28, 0xB8	; 184
   169ea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:691
  global_y = pgm_read_word(&current->y);
   169ec:	7c 01       	movw	r14, r24
   169ee:	36 e2       	ldi	r19, 0x26	; 38
   169f0:	e3 1a       	sub	r14, r19
   169f2:	3d ef       	ldi	r19, 0xFD	; 253
   169f4:	f3 0a       	sbc	r15, r19
   169f6:	f7 01       	movw	r30, r14
   169f8:	45 91       	lpm	r20, Z+
   169fa:	54 91       	lpm	r21, Z
   169fc:	c6 54       	subi	r28, 0x46	; 70
   169fe:	df 4f       	sbci	r29, 0xFF	; 255
   16a00:	59 83       	std	Y+1, r21	; 0x01
   16a02:	48 83       	st	Y, r20
   16a04:	ca 5b       	subi	r28, 0xBA	; 186
   16a06:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:694


  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_0);
   16a08:	fc 01       	movw	r30, r24
   16a0a:	ec 51       	subi	r30, 0x1C	; 28
   16a0c:	fd 4f       	sbci	r31, 0xFD	; 253
   16a0e:	25 91       	lpm	r18, Z+
   16a10:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:695
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   16a12:	6c 01       	movw	r12, r24
   16a14:	59 e2       	ldi	r21, 0x29	; 41
   16a16:	c5 1a       	sub	r12, r21
   16a18:	5d ef       	ldi	r21, 0xFD	; 253
   16a1a:	d5 0a       	sbc	r13, r21
   16a1c:	f6 01       	movw	r30, r12
   16a1e:	84 91       	lpm	r24, Z
   16a20:	cf 54       	subi	r28, 0x4F	; 79
   16a22:	df 4f       	sbci	r29, 0xFF	; 255
   16a24:	68 81       	ld	r22, Y
   16a26:	c1 5b       	subi	r28, 0xB1	; 177
   16a28:	d0 40       	sbci	r29, 0x00	; 0
   16a2a:	70 e0       	ldi	r23, 0x00	; 0
   16a2c:	4f ef       	ldi	r20, 0xFF	; 255
   16a2e:	90 e0       	ldi	r25, 0x00	; 0
   16a30:	f9 01       	movw	r30, r18
   16a32:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:697
  if (rdr == 0)
    cbi(redraw_class, 0);
   16a34:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:696
  global_y = pgm_read_word(&current->y);


  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_0);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
   16a36:	88 23       	and	r24, r24
   16a38:	11 f0       	breq	.+4      	; 0x16a3e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:699
    cbi(redraw_class, 0);
  else
    sbi(redraw_class, 0);
   16a3a:	bb 24       	eor	r11, r11
   16a3c:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:701
  ///
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_1);
   16a3e:	f3 01       	movw	r30, r6
   16a40:	ea 51       	subi	r30, 0x1A	; 26
   16a42:	fd 4f       	sbci	r31, 0xFD	; 253
   16a44:	25 91       	lpm	r18, Z+
   16a46:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:702
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   16a48:	f6 01       	movw	r30, r12
   16a4a:	84 91       	lpm	r24, Z
   16a4c:	cf 54       	subi	r28, 0x4F	; 79
   16a4e:	df 4f       	sbci	r29, 0xFF	; 255
   16a50:	68 81       	ld	r22, Y
   16a52:	c1 5b       	subi	r28, 0xB1	; 177
   16a54:	d0 40       	sbci	r29, 0x00	; 0
   16a56:	70 e0       	ldi	r23, 0x00	; 0
   16a58:	4f ef       	ldi	r20, 0xFF	; 255
   16a5a:	90 e0       	ldi	r25, 0x00	; 0
   16a5c:	f9 01       	movw	r30, r18
   16a5e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:703
  if (rdr == 0)
   16a60:	81 11       	cpse	r24, r1
   16a62:	56 c1       	rjmp	.+684    	; 0x16d10 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x398>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:704
    cbi(redraw_class, 1);
   16a64:	e8 94       	clt
   16a66:	b1 f8       	bld	r11, 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:708
  else
    sbi(redraw_class, 1);
  ///
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_2);
   16a68:	f3 01       	movw	r30, r6
   16a6a:	e8 51       	subi	r30, 0x18	; 24
   16a6c:	fd 4f       	sbci	r31, 0xFD	; 253
   16a6e:	25 91       	lpm	r18, Z+
   16a70:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:709
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   16a72:	f6 01       	movw	r30, r12
   16a74:	84 91       	lpm	r24, Z
   16a76:	cf 54       	subi	r28, 0x4F	; 79
   16a78:	df 4f       	sbci	r29, 0xFF	; 255
   16a7a:	68 81       	ld	r22, Y
   16a7c:	c1 5b       	subi	r28, 0xB1	; 177
   16a7e:	d0 40       	sbci	r29, 0x00	; 0
   16a80:	70 e0       	ldi	r23, 0x00	; 0
   16a82:	4f ef       	ldi	r20, 0xFF	; 255
   16a84:	90 e0       	ldi	r25, 0x00	; 0
   16a86:	f9 01       	movw	r30, r18
   16a88:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:710
  if (rdr == 0)
   16a8a:	81 11       	cpse	r24, r1
   16a8c:	44 c1       	rjmp	.+648    	; 0x16d16 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x39e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:711
    cbi(redraw_class, 2);
   16a8e:	e8 94       	clt
   16a90:	b2 f8       	bld	r11, 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:715
  else
    sbi(redraw_class, 2);
  ///
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_3);
   16a92:	f3 01       	movw	r30, r6
   16a94:	e6 51       	subi	r30, 0x16	; 22
   16a96:	fd 4f       	sbci	r31, 0xFD	; 253
   16a98:	25 91       	lpm	r18, Z+
   16a9a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:716
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   16a9c:	f6 01       	movw	r30, r12
   16a9e:	84 91       	lpm	r24, Z
   16aa0:	cf 54       	subi	r28, 0x4F	; 79
   16aa2:	df 4f       	sbci	r29, 0xFF	; 255
   16aa4:	68 81       	ld	r22, Y
   16aa6:	c1 5b       	subi	r28, 0xB1	; 177
   16aa8:	d0 40       	sbci	r29, 0x00	; 0
   16aaa:	70 e0       	ldi	r23, 0x00	; 0
   16aac:	4f ef       	ldi	r20, 0xFF	; 255
   16aae:	90 e0       	ldi	r25, 0x00	; 0
   16ab0:	f9 01       	movw	r30, r18
   16ab2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:717
  if (rdr == 0)
   16ab4:	81 11       	cpse	r24, r1
   16ab6:	32 c1       	rjmp	.+612    	; 0x16d1c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:718
    cbi(redraw_class, 3);
   16ab8:	8b 2d       	mov	r24, r11
   16aba:	87 7f       	andi	r24, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:722
  else
    sbi(redraw_class, 3);
  ///
  if (redraw == false)
   16abc:	a1 10       	cpse	r10, r1
   16abe:	31 c1       	rjmp	.+610    	; 0x16d22 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:723
    cbi(redraw_class, 4);
   16ac0:	8f 7e       	andi	r24, 0xEF	; 239
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:727
  else
    sbi(redraw_class, 4);
  /////
  if (display_redraw_once == 0)
   16ac2:	90 91 b6 0c 	lds	r25, 0x0CB6	; 0x800cb6 <display_redraw_once>
   16ac6:	91 11       	cpse	r25, r1
   16ac8:	2e c1       	rjmp	.+604    	; 0x16d26 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:729
  {
    display_redraw_once = 1;
   16aca:	91 e0       	ldi	r25, 0x01	; 1
   16acc:	90 93 b6 0c 	sts	0x0CB6, r25	; 0x800cb6 <display_redraw_once>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:730
    sbi(redraw_class, 5);
   16ad0:	80 62       	ori	r24, 0x20	; 32
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:733
  }
  else
    cbi(redraw_class, 5);
   16ad2:	c1 53       	subi	r28, 0x31	; 49
   16ad4:	df 4f       	sbci	r29, 0xFF	; 255
   16ad6:	88 83       	st	Y, r24
   16ad8:	cf 5c       	subi	r28, 0xCF	; 207
   16ada:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:736

  /////
  rdr = pgm_read_byte(&current->redraw_class);
   16adc:	f3 01       	movw	r30, r6
   16ade:	ed 51       	subi	r30, 0x1D	; 29
   16ae0:	fd 4f       	sbci	r31, 0xFD	; 253
   16ae2:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:737
  if (enable_redraw(rdr, redraw_class) == true)
   16ae4:	c1 53       	subi	r28, 0x31	; 49
   16ae6:	df 4f       	sbci	r29, 0xFF	; 255
   16ae8:	68 81       	ld	r22, Y
   16aea:	cf 5c       	subi	r28, 0xCF	; 207
   16aec:	d0 40       	sbci	r29, 0x00	; 0
   16aee:	0e 94 ad aa 	call	0x1555a	; 0x1555a <enable_redraw(unsigned char, unsigned char)>
   16af2:	88 23       	and	r24, r24
   16af4:	d9 f0       	breq	.+54     	; 0x16b2c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:739
  {
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
   16af6:	f3 01       	movw	r30, r6
   16af8:	65 91       	lpm	r22, Z+
   16afa:	74 91       	lpm	r23, Z
   16afc:	ce 01       	movw	r24, r28
   16afe:	01 96       	adiw	r24, 0x01	; 1
   16b00:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:740
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
   16b04:	f7 01       	movw	r30, r14
   16b06:	45 91       	lpm	r20, Z+
   16b08:	54 91       	lpm	r21, Z
   16b0a:	f8 01       	movw	r30, r16
   16b0c:	65 91       	lpm	r22, Z+
   16b0e:	74 91       	lpm	r23, Z
   16b10:	4b 5f       	subi	r20, 0xFB	; 251
   16b12:	5f 4f       	sbci	r21, 0xFF	; 255
   16b14:	6b 5f       	subi	r22, 0xFB	; 251
   16b16:	7f 4f       	sbci	r23, 0xFF	; 255
   16b18:	ee 24       	eor	r14, r14
   16b1a:	ea 94       	dec	r14
   16b1c:	fe 2c       	mov	r15, r14
   16b1e:	10 e0       	ldi	r17, 0x00	; 0
   16b20:	00 e0       	ldi	r16, 0x00	; 0
   16b22:	22 e0       	ldi	r18, 0x02	; 2
   16b24:	ce 01       	movw	r24, r28
   16b26:	01 96       	adiw	r24, 0x01	; 1
   16b28:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:632





bool draw_menu(bool redraw, uint8_t click_type, uint16_t click_x, uint16_t click_y)
   16b2c:	91 2c       	mov	r9, r1
   16b2e:	c4 53       	subi	r28, 0x34	; 52
   16b30:	df 4f       	sbci	r29, 0xFF	; 255
   16b32:	18 82       	st	Y, r1
   16b34:	cc 5c       	subi	r28, 0xCC	; 204
   16b36:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:744
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
   16b38:	93 01       	movw	r18, r6
   16b3a:	21 53       	subi	r18, 0x31	; 49
   16b3c:	3d 4f       	sbci	r19, 0xFD	; 253
   16b3e:	ca 54       	subi	r28, 0x4A	; 74
   16b40:	df 4f       	sbci	r29, 0xFF	; 255
   16b42:	39 83       	std	Y+1, r19	; 0x01
   16b44:	28 83       	st	Y, r18
   16b46:	c6 5b       	subi	r28, 0xB6	; 182
   16b48:	d0 40       	sbci	r29, 0x00	; 0
   16b4a:	ca 54       	subi	r28, 0x4A	; 74
   16b4c:	df 4f       	sbci	r29, 0xFF	; 255
   16b4e:	e8 81       	ld	r30, Y
   16b50:	f9 81       	ldd	r31, Y+1	; 0x01
   16b52:	c6 5b       	subi	r28, 0xB6	; 182
   16b54:	d0 40       	sbci	r29, 0x00	; 0
   16b56:	84 91       	lpm	r24, Z
   16b58:	98 16       	cp	r9, r24
   16b5a:	08 f0       	brcs	.+2      	; 0x16b5e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1e6>
   16b5c:	e6 c0       	rjmp	.+460    	; 0x16d2a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3b2>
   16b5e:	89 2d       	mov	r24, r9
   16b60:	90 e0       	ldi	r25, 0x00	; 0
   16b62:	01 96       	adiw	r24, 0x01	; 1
   16b64:	f1 e1       	ldi	r31, 0x11	; 17
   16b66:	f8 9f       	mul	r31, r24
   16b68:	20 01       	movw	r4, r0
   16b6a:	f9 9f       	mul	r31, r25
   16b6c:	50 0c       	add	r5, r0
   16b6e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:747
  {
    button_1 = &current->button_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&button_1->enable_show);
   16b70:	f3 01       	movw	r30, r6
   16b72:	e4 0d       	add	r30, r4
   16b74:	f5 1d       	adc	r31, r5
   16b76:	25 91       	lpm	r18, Z+
   16b78:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:748
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_1->args), menu_args1, idx);
   16b7a:	12 01       	movw	r2, r4
   16b7c:	44 e0       	ldi	r20, 0x04	; 4
   16b7e:	24 1a       	sub	r2, r20
   16b80:	31 08       	sbc	r3, r1
   16b82:	26 0c       	add	r2, r6
   16b84:	37 1c       	adc	r3, r7
   16b86:	f1 01       	movw	r30, r2
   16b88:	84 91       	lpm	r24, Z
   16b8a:	cf 54       	subi	r28, 0x4F	; 79
   16b8c:	df 4f       	sbci	r29, 0xFF	; 255
   16b8e:	68 81       	ld	r22, Y
   16b90:	c1 5b       	subi	r28, 0xB1	; 177
   16b92:	d0 40       	sbci	r29, 0x00	; 0
   16b94:	70 e0       	ldi	r23, 0x00	; 0
   16b96:	49 2d       	mov	r20, r9
   16b98:	90 e0       	ldi	r25, 0x00	; 0
   16b9a:	f9 01       	movw	r30, r18
   16b9c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:749
    if (active == 0) continue;
   16b9e:	88 23       	and	r24, r24
   16ba0:	09 f4       	brne	.+2      	; 0x16ba4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x22c>
   16ba2:	b4 c0       	rjmp	.+360    	; 0x16d0c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x394>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:750
    rdr = pgm_read_byte(&button_1->redraw_class);
   16ba4:	f2 01       	movw	r30, r4
   16ba6:	31 97       	sbiw	r30, 0x01	; 1
   16ba8:	e6 0d       	add	r30, r6
   16baa:	f7 1d       	adc	r31, r7
   16bac:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:751
    if (enable_redraw(rdr, redraw_class) == true)
   16bae:	c1 53       	subi	r28, 0x31	; 49
   16bb0:	df 4f       	sbci	r29, 0xFF	; 255
   16bb2:	68 81       	ld	r22, Y
   16bb4:	cf 5c       	subi	r28, 0xCF	; 207
   16bb6:	d0 40       	sbci	r29, 0x00	; 0
   16bb8:	0e 94 ad aa 	call	0x1555a	; 0x1555a <enable_redraw(unsigned char, unsigned char)>
   16bbc:	88 23       	and	r24, r24
   16bbe:	09 f4       	brne	.+2      	; 0x16bc2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x24a>
   16bc0:	43 c0       	rjmp	.+134    	; 0x16c48 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:753
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_1->name));
   16bc2:	f2 01       	movw	r30, r4
   16bc4:	3f 97       	sbiw	r30, 0x0f	; 15
   16bc6:	e6 0d       	add	r30, r6
   16bc8:	f7 1d       	adc	r31, r7
   16bca:	65 91       	lpm	r22, Z+
   16bcc:	74 91       	lpm	r23, Z
   16bce:	ce 01       	movw	r24, r28
   16bd0:	8f 57       	subi	r24, 0x7F	; 127
   16bd2:	9f 4f       	sbci	r25, 0xFF	; 255
   16bd4:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:754
      str1[0] = 0;
   16bd8:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:755
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&button_1->font_size), str2, str1, 0);
   16bda:	f2 01       	movw	r30, r4
   16bdc:	35 97       	sbiw	r30, 0x05	; 5
   16bde:	e6 0d       	add	r30, r6
   16be0:	f7 1d       	adc	r31, r7
   16be2:	e4 90       	lpm	r14, Z
   16be4:	04 91       	lpm	r16, Z
   16be6:	f2 01       	movw	r30, r4
   16be8:	37 97       	sbiw	r30, 0x07	; 7
   16bea:	e6 0d       	add	r30, r6
   16bec:	f7 1d       	adc	r31, r7
   16bee:	25 91       	lpm	r18, Z+
   16bf0:	34 91       	lpm	r19, Z
   16bf2:	f2 01       	movw	r30, r4
   16bf4:	39 97       	sbiw	r30, 0x09	; 9
   16bf6:	e6 0d       	add	r30, r6
   16bf8:	f7 1d       	adc	r31, r7
   16bfa:	45 91       	lpm	r20, Z+
   16bfc:	54 91       	lpm	r21, Z
   16bfe:	f2 01       	movw	r30, r4
   16c00:	3b 97       	sbiw	r30, 0x0b	; 11
   16c02:	e6 0d       	add	r30, r6
   16c04:	f7 1d       	adc	r31, r7
   16c06:	65 91       	lpm	r22, Z+
   16c08:	74 91       	lpm	r23, Z
   16c0a:	f2 01       	movw	r30, r4
   16c0c:	3d 97       	sbiw	r30, 0x0d	; 13
   16c0e:	e6 0d       	add	r30, r6
   16c10:	f7 1d       	adc	r31, r7
   16c12:	85 91       	lpm	r24, Z+
   16c14:	94 91       	lpm	r25, Z
   16c16:	c6 54       	subi	r28, 0x46	; 70
   16c18:	df 4f       	sbci	r29, 0xFF	; 255
   16c1a:	e8 81       	ld	r30, Y
   16c1c:	f9 81       	ldd	r31, Y+1	; 0x01
   16c1e:	ca 5b       	subi	r28, 0xBA	; 186
   16c20:	d0 40       	sbci	r29, 0x00	; 0
   16c22:	6e 0f       	add	r22, r30
   16c24:	7f 1f       	adc	r23, r31
   16c26:	81 2c       	mov	r8, r1
   16c28:	fe 01       	movw	r30, r28
   16c2a:	31 96       	adiw	r30, 0x01	; 1
   16c2c:	5f 01       	movw	r10, r30
   16c2e:	e0 58       	subi	r30, 0x80	; 128
   16c30:	ff 4f       	sbci	r31, 0xFF	; 255
   16c32:	6f 01       	movw	r12, r30
   16c34:	c8 54       	subi	r28, 0x48	; 72
   16c36:	df 4f       	sbci	r29, 0xFF	; 255
   16c38:	e8 81       	ld	r30, Y
   16c3a:	f9 81       	ldd	r31, Y+1	; 0x01
   16c3c:	c8 5b       	subi	r28, 0xB8	; 184
   16c3e:	d0 40       	sbci	r29, 0x00	; 0
   16c40:	8e 0f       	add	r24, r30
   16c42:	9f 1f       	adc	r25, r31
   16c44:	0e 94 e2 99 	call	0x133c4	; 0x133c4 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:757
    }
    if (click_x > 0 && click_y > 0)
   16c48:	ca 53       	subi	r28, 0x3A	; 58
   16c4a:	df 4f       	sbci	r29, 0xFF	; 255
   16c4c:	28 81       	ld	r18, Y
   16c4e:	39 81       	ldd	r19, Y+1	; 0x01
   16c50:	c6 5c       	subi	r28, 0xC6	; 198
   16c52:	d0 40       	sbci	r29, 0x00	; 0
   16c54:	23 2b       	or	r18, r19
   16c56:	09 f4       	brne	.+2      	; 0x16c5a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2e2>
   16c58:	59 c0       	rjmp	.+178    	; 0x16d0c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x394>
   16c5a:	c8 53       	subi	r28, 0x38	; 56
   16c5c:	df 4f       	sbci	r29, 0xFF	; 255
   16c5e:	48 81       	ld	r20, Y
   16c60:	59 81       	ldd	r21, Y+1	; 0x01
   16c62:	c8 5c       	subi	r28, 0xC8	; 200
   16c64:	d0 40       	sbci	r29, 0x00	; 0
   16c66:	45 2b       	or	r20, r21
   16c68:	09 f4       	brne	.+2      	; 0x16c6c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2f4>
   16c6a:	50 c0       	rjmp	.+160    	; 0x16d0c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x394>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:758
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
   16c6c:	f2 01       	movw	r30, r4
   16c6e:	37 97       	sbiw	r30, 0x07	; 7
   16c70:	e6 0d       	add	r30, r6
   16c72:	f7 1d       	adc	r31, r7
   16c74:	25 91       	lpm	r18, Z+
   16c76:	34 91       	lpm	r19, Z
   16c78:	f2 01       	movw	r30, r4
   16c7a:	39 97       	sbiw	r30, 0x09	; 9
   16c7c:	e6 0d       	add	r30, r6
   16c7e:	f7 1d       	adc	r31, r7
   16c80:	45 91       	lpm	r20, Z+
   16c82:	54 91       	lpm	r21, Z
   16c84:	f2 01       	movw	r30, r4
   16c86:	3b 97       	sbiw	r30, 0x0b	; 11
   16c88:	e6 0d       	add	r30, r6
   16c8a:	f7 1d       	adc	r31, r7
   16c8c:	65 91       	lpm	r22, Z+
   16c8e:	74 91       	lpm	r23, Z
   16c90:	f2 01       	movw	r30, r4
   16c92:	3d 97       	sbiw	r30, 0x0d	; 13
   16c94:	e6 0d       	add	r30, r6
   16c96:	f7 1d       	adc	r31, r7
   16c98:	85 91       	lpm	r24, Z+
   16c9a:	94 91       	lpm	r25, Z
   16c9c:	c6 54       	subi	r28, 0x46	; 70
   16c9e:	df 4f       	sbci	r29, 0xFF	; 255
   16ca0:	e8 81       	ld	r30, Y
   16ca2:	f9 81       	ldd	r31, Y+1	; 0x01
   16ca4:	ca 5b       	subi	r28, 0xBA	; 186
   16ca6:	d0 40       	sbci	r29, 0x00	; 0
   16ca8:	6e 0f       	add	r22, r30
   16caa:	7f 1f       	adc	r23, r31
   16cac:	c8 53       	subi	r28, 0x38	; 56
   16cae:	df 4f       	sbci	r29, 0xFF	; 255
   16cb0:	e8 80       	ld	r14, Y
   16cb2:	f9 80       	ldd	r15, Y+1	; 0x01
   16cb4:	c8 5c       	subi	r28, 0xC8	; 200
   16cb6:	d0 40       	sbci	r29, 0x00	; 0
   16cb8:	ca 53       	subi	r28, 0x3A	; 58
   16cba:	df 4f       	sbci	r29, 0xFF	; 255
   16cbc:	08 81       	ld	r16, Y
   16cbe:	19 81       	ldd	r17, Y+1	; 0x01
   16cc0:	c6 5c       	subi	r28, 0xC6	; 198
   16cc2:	d0 40       	sbci	r29, 0x00	; 0
   16cc4:	c8 54       	subi	r28, 0x48	; 72
   16cc6:	df 4f       	sbci	r29, 0xFF	; 255
   16cc8:	e8 81       	ld	r30, Y
   16cca:	f9 81       	ldd	r31, Y+1	; 0x01
   16ccc:	c8 5b       	subi	r28, 0xB8	; 184
   16cce:	d0 40       	sbci	r29, 0x00	; 0
   16cd0:	8e 0f       	add	r24, r30
   16cd2:	9f 1f       	adc	r25, r31
   16cd4:	0e 94 32 98 	call	0x13064	; 0x13064 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   16cd8:	18 2f       	mov	r17, r24
   16cda:	88 23       	and	r24, r24
   16cdc:	b9 f0       	breq	.+46     	; 0x16d0c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x394>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:760
      {
        fntargs =  (fptr_args*)pgm_read_word(&button_1->onclick);
   16cde:	f2 01       	movw	r30, r4
   16ce0:	33 97       	sbiw	r30, 0x03	; 3
   16ce2:	e6 0d       	add	r30, r6
   16ce4:	f7 1d       	adc	r31, r7
   16ce6:	25 91       	lpm	r18, Z+
   16ce8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:761
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
   16cea:	f1 01       	movw	r30, r2
   16cec:	84 91       	lpm	r24, Z
   16cee:	cf 54       	subi	r28, 0x4F	; 79
   16cf0:	df 4f       	sbci	r29, 0xFF	; 255
   16cf2:	68 81       	ld	r22, Y
   16cf4:	c1 5b       	subi	r28, 0xB1	; 177
   16cf6:	d0 40       	sbci	r29, 0x00	; 0
   16cf8:	70 e0       	ldi	r23, 0x00	; 0
   16cfa:	49 2d       	mov	r20, r9
   16cfc:	90 e0       	ldi	r25, 0x00	; 0
   16cfe:	f9 01       	movw	r30, r18
   16d00:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:762
        ret = true;
   16d02:	c4 53       	subi	r28, 0x34	; 52
   16d04:	df 4f       	sbci	r29, 0xFF	; 255
   16d06:	18 83       	st	Y, r17
   16d08:	cc 5c       	subi	r28, 0xCC	; 204
   16d0a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:744
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
   16d0c:	93 94       	inc	r9
   16d0e:	1d cf       	rjmp	.-454    	; 0x16b4a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:706
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_1);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 1);
  else
    sbi(redraw_class, 1);
   16d10:	68 94       	set
   16d12:	b1 f8       	bld	r11, 1
   16d14:	a9 ce       	rjmp	.-686    	; 0x16a68 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xf0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:713
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_2);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 2);
  else
    sbi(redraw_class, 2);
   16d16:	68 94       	set
   16d18:	b2 f8       	bld	r11, 2
   16d1a:	bb ce       	rjmp	.-650    	; 0x16a92 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x11a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:720
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_3);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 3);
  else
    sbi(redraw_class, 3);
   16d1c:	8b 2d       	mov	r24, r11
   16d1e:	88 60       	ori	r24, 0x08	; 8
   16d20:	cd ce       	rjmp	.-614    	; 0x16abc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x144>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:725
  ///
  if (redraw == false)
    cbi(redraw_class, 4);
  else
    sbi(redraw_class, 4);
   16d22:	80 61       	ori	r24, 0x10	; 16
   16d24:	ce ce       	rjmp	.-612    	; 0x16ac2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x14a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:733
  {
    display_redraw_once = 1;
    sbi(redraw_class, 5);
  }
  else
    cbi(redraw_class, 5);
   16d26:	8f 7d       	andi	r24, 0xDF	; 223
   16d28:	d4 ce       	rjmp	.-600    	; 0x16ad2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x15a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:765
        fntargs =  (fptr_args*)pgm_read_word(&button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   16d2a:	c4 53       	subi	r28, 0x34	; 52
   16d2c:	df 4f       	sbci	r29, 0xFF	; 255
   16d2e:	f8 81       	ld	r31, Y
   16d30:	cc 5c       	subi	r28, 0xCC	; 204
   16d32:	d0 40       	sbci	r29, 0x00	; 0
   16d34:	f1 11       	cpse	r31, r1
   16d36:	0c 94 b5 c6 	jmp	0x18d6a	; 0x18d6a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:767
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
   16d3a:	91 2c       	mov	r9, r1
   16d3c:	93 01       	movw	r18, r6
   16d3e:	20 53       	subi	r18, 0x30	; 48
   16d40:	3d 4f       	sbci	r19, 0xFD	; 253
   16d42:	c4 54       	subi	r28, 0x44	; 68
   16d44:	df 4f       	sbci	r29, 0xFF	; 255
   16d46:	39 83       	std	Y+1, r19	; 0x01
   16d48:	28 83       	st	Y, r18
   16d4a:	cc 5b       	subi	r28, 0xBC	; 188
   16d4c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:776
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
   16d4e:	1e 01       	movw	r2, r28
   16d50:	31 e8       	ldi	r19, 0x81	; 129
   16d52:	23 0e       	add	r2, r19
   16d54:	31 1c       	adc	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:767
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
   16d56:	c4 54       	subi	r28, 0x44	; 68
   16d58:	df 4f       	sbci	r29, 0xFF	; 255
   16d5a:	e8 81       	ld	r30, Y
   16d5c:	f9 81       	ldd	r31, Y+1	; 0x01
   16d5e:	cc 5b       	subi	r28, 0xBC	; 188
   16d60:	d0 40       	sbci	r29, 0x00	; 0
   16d62:	84 91       	lpm	r24, Z
   16d64:	98 16       	cp	r9, r24
   16d66:	08 f0       	brcs	.+2      	; 0x16d6a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3f2>
   16d68:	26 c1       	rjmp	.+588    	; 0x16fb6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x63e>
   16d6a:	f7 e1       	ldi	r31, 0x17	; 23
   16d6c:	9f 9e       	mul	r9, r31
   16d6e:	20 01       	movw	r4, r0
   16d70:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:770
  {
    button_2 = &current->button_2[idx];
    rfnt = (ret_fptr*)pgm_read_word(&button_2->enable_show);
   16d72:	f2 01       	movw	r30, r4
   16d74:	ef 53       	subi	r30, 0x3F	; 63
   16d76:	ff 4f       	sbci	r31, 0xFF	; 255
   16d78:	e6 0d       	add	r30, r6
   16d7a:	f7 1d       	adc	r31, r7
   16d7c:	25 91       	lpm	r18, Z+
   16d7e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:771
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
   16d80:	c2 01       	movw	r24, r4
   16d82:	85 54       	subi	r24, 0x45	; 69
   16d84:	9f 4f       	sbci	r25, 0xFF	; 255
   16d86:	a3 01       	movw	r20, r6
   16d88:	48 0f       	add	r20, r24
   16d8a:	59 1f       	adc	r21, r25
   16d8c:	ca 54       	subi	r28, 0x4A	; 74
   16d8e:	df 4f       	sbci	r29, 0xFF	; 255
   16d90:	59 83       	std	Y+1, r21	; 0x01
   16d92:	48 83       	st	Y, r20
   16d94:	c6 5b       	subi	r28, 0xB6	; 182
   16d96:	d0 40       	sbci	r29, 0x00	; 0
   16d98:	fa 01       	movw	r30, r20
   16d9a:	84 91       	lpm	r24, Z
   16d9c:	cf 54       	subi	r28, 0x4F	; 79
   16d9e:	df 4f       	sbci	r29, 0xFF	; 255
   16da0:	68 81       	ld	r22, Y
   16da2:	c1 5b       	subi	r28, 0xB1	; 177
   16da4:	d0 40       	sbci	r29, 0x00	; 0
   16da6:	70 e0       	ldi	r23, 0x00	; 0
   16da8:	49 2d       	mov	r20, r9
   16daa:	90 e0       	ldi	r25, 0x00	; 0
   16dac:	f9 01       	movw	r30, r18
   16dae:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:772
    if (active == 0) continue;
   16db0:	88 23       	and	r24, r24
   16db2:	09 f4       	brne	.+2      	; 0x16db6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x43e>
   16db4:	fe c0       	rjmp	.+508    	; 0x16fb2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x63a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:773
    rdr = pgm_read_byte(&button_2->redraw_class);
   16db6:	f2 01       	movw	r30, r4
   16db8:	e0 54       	subi	r30, 0x40	; 64
   16dba:	ff 4f       	sbci	r31, 0xFF	; 255
   16dbc:	e6 0d       	add	r30, r6
   16dbe:	f7 1d       	adc	r31, r7
   16dc0:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:774
    if (enable_redraw(rdr, redraw_class) == true)
   16dc2:	c1 53       	subi	r28, 0x31	; 49
   16dc4:	df 4f       	sbci	r29, 0xFF	; 255
   16dc6:	68 81       	ld	r22, Y
   16dc8:	cf 5c       	subi	r28, 0xCF	; 207
   16dca:	d0 40       	sbci	r29, 0x00	; 0
   16dcc:	0e 94 ad aa 	call	0x1555a	; 0x1555a <enable_redraw(unsigned char, unsigned char)>
   16dd0:	88 23       	and	r24, r24
   16dd2:	09 f4       	brne	.+2      	; 0x16dd6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x45e>
   16dd4:	82 c0       	rjmp	.+260    	; 0x16eda <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x562>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:776
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
   16dd6:	f2 01       	movw	r30, r4
   16dd8:	e4 55       	subi	r30, 0x54	; 84
   16dda:	ff 4f       	sbci	r31, 0xFF	; 255
   16ddc:	e6 0d       	add	r30, r6
   16dde:	f7 1d       	adc	r31, r7
   16de0:	65 91       	lpm	r22, Z+
   16de2:	74 91       	lpm	r23, Z
   16de4:	c1 01       	movw	r24, r2
   16de6:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:777
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
   16dea:	f2 01       	movw	r30, r4
   16dec:	e2 54       	subi	r30, 0x42	; 66
   16dee:	ff 4f       	sbci	r31, 0xFF	; 255
   16df0:	e6 0d       	add	r30, r6
   16df2:	f7 1d       	adc	r31, r7
   16df4:	25 91       	lpm	r18, Z+
   16df6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:778
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
   16df8:	ca 54       	subi	r28, 0x4A	; 74
   16dfa:	df 4f       	sbci	r29, 0xFF	; 255
   16dfc:	e8 81       	ld	r30, Y
   16dfe:	f9 81       	ldd	r31, Y+1	; 0x01
   16e00:	c6 5b       	subi	r28, 0xB6	; 182
   16e02:	d0 40       	sbci	r29, 0x00	; 0
   16e04:	84 91       	lpm	r24, Z
   16e06:	cf 54       	subi	r28, 0x4F	; 79
   16e08:	df 4f       	sbci	r29, 0xFF	; 255
   16e0a:	68 81       	ld	r22, Y
   16e0c:	c1 5b       	subi	r28, 0xB1	; 177
   16e0e:	d0 40       	sbci	r29, 0x00	; 0
   16e10:	70 e0       	ldi	r23, 0x00	; 0
   16e12:	49 2d       	mov	r20, r9
   16e14:	90 e0       	ldi	r25, 0x00	; 0
   16e16:	f9 01       	movw	r30, r18
   16e18:	19 95       	eicall
   16e1a:	88 2e       	mov	r8, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:780
      /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
   16e1c:	60 e2       	ldi	r22, 0x20	; 32
   16e1e:	c1 53       	subi	r28, 0x31	; 49
   16e20:	df 4f       	sbci	r29, 0xFF	; 255
   16e22:	88 81       	ld	r24, Y
   16e24:	cf 5c       	subi	r28, 0xCF	; 207
   16e26:	d0 40       	sbci	r29, 0x00	; 0
   16e28:	0e 94 ad aa 	call	0x1555a	; 0x1555a <enable_redraw(unsigned char, unsigned char)>
   16e2c:	88 23       	and	r24, r24
   16e2e:	21 f0       	breq	.+8      	; 0x16e38 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x4c0>
   16e30:	f2 e0       	ldi	r31, 0x02	; 2
   16e32:	8f 12       	cpse	r8, r31
   16e34:	01 c0       	rjmp	.+2      	; 0x16e38 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x4c0>
   16e36:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:781
      str1[0] = 0;
   16e38:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:786
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
   16e3a:	f2 01       	movw	r30, r4
   16e3c:	e7 54       	subi	r30, 0x47	; 71
   16e3e:	ff 4f       	sbci	r31, 0xFF	; 255
   16e40:	e6 0d       	add	r30, r6
   16e42:	f7 1d       	adc	r31, r7
   16e44:	a5 90       	lpm	r10, Z+
   16e46:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:785
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
   16e48:	f2 01       	movw	r30, r4
   16e4a:	e9 54       	subi	r30, 0x49	; 73
   16e4c:	ff 4f       	sbci	r31, 0xFF	; 255
   16e4e:	e6 0d       	add	r30, r6
   16e50:	f7 1d       	adc	r31, r7
   16e52:	c5 90       	lpm	r12, Z+
   16e54:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:784
      /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
   16e56:	82 01       	movw	r16, r4
   16e58:	0a 54       	subi	r16, 0x4A	; 74
   16e5a:	1f 4f       	sbci	r17, 0xFF	; 255
   16e5c:	06 0d       	add	r16, r6
   16e5e:	17 1d       	adc	r17, r7
   16e60:	f8 01       	movw	r30, r16
   16e62:	04 91       	lpm	r16, Z
   16e64:	f2 01       	movw	r30, r4
   16e66:	ec 54       	subi	r30, 0x4C	; 76
   16e68:	ff 4f       	sbci	r31, 0xFF	; 255
   16e6a:	e6 0d       	add	r30, r6
   16e6c:	f7 1d       	adc	r31, r7
   16e6e:	25 91       	lpm	r18, Z+
   16e70:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:783
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
   16e72:	f2 01       	movw	r30, r4
   16e74:	ee 54       	subi	r30, 0x4E	; 78
   16e76:	ff 4f       	sbci	r31, 0xFF	; 255
   16e78:	e6 0d       	add	r30, r6
   16e7a:	f7 1d       	adc	r31, r7
   16e7c:	45 91       	lpm	r20, Z+
   16e7e:	54 91       	lpm	r21, Z
   16e80:	f2 01       	movw	r30, r4
   16e82:	e0 55       	subi	r30, 0x50	; 80
   16e84:	ff 4f       	sbci	r31, 0xFF	; 255
   16e86:	e6 0d       	add	r30, r6
   16e88:	f7 1d       	adc	r31, r7
   16e8a:	65 91       	lpm	r22, Z+
   16e8c:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:782
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
   16e8e:	f2 01       	movw	r30, r4
   16e90:	e2 55       	subi	r30, 0x52	; 82
   16e92:	ff 4f       	sbci	r31, 0xFF	; 255
   16e94:	e6 0d       	add	r30, r6
   16e96:	f7 1d       	adc	r31, r7
   16e98:	85 91       	lpm	r24, Z+
   16e9a:	94 91       	lpm	r25, Z
   16e9c:	c6 54       	subi	r28, 0x46	; 70
   16e9e:	df 4f       	sbci	r29, 0xFF	; 255
   16ea0:	e8 81       	ld	r30, Y
   16ea2:	f9 81       	ldd	r31, Y+1	; 0x01
   16ea4:	ca 5b       	subi	r28, 0xBA	; 186
   16ea6:	d0 40       	sbci	r29, 0x00	; 0
   16ea8:	6e 0f       	add	r22, r30
   16eaa:	7f 1f       	adc	r23, r31
   16eac:	e1 e0       	ldi	r30, 0x01	; 1
   16eae:	f0 e0       	ldi	r31, 0x00	; 0
   16eb0:	ec 0f       	add	r30, r28
   16eb2:	fd 1f       	adc	r31, r29
   16eb4:	ff 93       	push	r31
   16eb6:	ef 93       	push	r30
   16eb8:	3f 92       	push	r3
   16eba:	2f 92       	push	r2
   16ebc:	e1 2c       	mov	r14, r1
   16ebe:	c8 54       	subi	r28, 0x48	; 72
   16ec0:	df 4f       	sbci	r29, 0xFF	; 255
   16ec2:	e8 81       	ld	r30, Y
   16ec4:	f9 81       	ldd	r31, Y+1	; 0x01
   16ec6:	c8 5b       	subi	r28, 0xB8	; 184
   16ec8:	d0 40       	sbci	r29, 0x00	; 0
   16eca:	8e 0f       	add	r24, r30
   16ecc:	9f 1f       	adc	r25, r31
   16ece:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
   16ed2:	0f 90       	pop	r0
   16ed4:	0f 90       	pop	r0
   16ed6:	0f 90       	pop	r0
   16ed8:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:788
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    }
    if (click_x > 0 && click_y > 0)
   16eda:	ca 53       	subi	r28, 0x3A	; 58
   16edc:	df 4f       	sbci	r29, 0xFF	; 255
   16ede:	28 81       	ld	r18, Y
   16ee0:	39 81       	ldd	r19, Y+1	; 0x01
   16ee2:	c6 5c       	subi	r28, 0xC6	; 198
   16ee4:	d0 40       	sbci	r29, 0x00	; 0
   16ee6:	23 2b       	or	r18, r19
   16ee8:	09 f4       	brne	.+2      	; 0x16eec <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x574>
   16eea:	63 c0       	rjmp	.+198    	; 0x16fb2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x63a>
   16eec:	c8 53       	subi	r28, 0x38	; 56
   16eee:	df 4f       	sbci	r29, 0xFF	; 255
   16ef0:	48 81       	ld	r20, Y
   16ef2:	59 81       	ldd	r21, Y+1	; 0x01
   16ef4:	c8 5c       	subi	r28, 0xC8	; 200
   16ef6:	d0 40       	sbci	r29, 0x00	; 0
   16ef8:	45 2b       	or	r20, r21
   16efa:	09 f4       	brne	.+2      	; 0x16efe <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x586>
   16efc:	5a c0       	rjmp	.+180    	; 0x16fb2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x63a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:789
      if (button_click_touch(global_x + pgm_read_word(&button_2->x), global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
   16efe:	f2 01       	movw	r30, r4
   16f00:	ec 54       	subi	r30, 0x4C	; 76
   16f02:	ff 4f       	sbci	r31, 0xFF	; 255
   16f04:	e6 0d       	add	r30, r6
   16f06:	f7 1d       	adc	r31, r7
   16f08:	25 91       	lpm	r18, Z+
   16f0a:	34 91       	lpm	r19, Z
   16f0c:	f2 01       	movw	r30, r4
   16f0e:	ee 54       	subi	r30, 0x4E	; 78
   16f10:	ff 4f       	sbci	r31, 0xFF	; 255
   16f12:	e6 0d       	add	r30, r6
   16f14:	f7 1d       	adc	r31, r7
   16f16:	45 91       	lpm	r20, Z+
   16f18:	54 91       	lpm	r21, Z
   16f1a:	f2 01       	movw	r30, r4
   16f1c:	e0 55       	subi	r30, 0x50	; 80
   16f1e:	ff 4f       	sbci	r31, 0xFF	; 255
   16f20:	e6 0d       	add	r30, r6
   16f22:	f7 1d       	adc	r31, r7
   16f24:	65 91       	lpm	r22, Z+
   16f26:	74 91       	lpm	r23, Z
   16f28:	f2 01       	movw	r30, r4
   16f2a:	e2 55       	subi	r30, 0x52	; 82
   16f2c:	ff 4f       	sbci	r31, 0xFF	; 255
   16f2e:	e6 0d       	add	r30, r6
   16f30:	f7 1d       	adc	r31, r7
   16f32:	85 91       	lpm	r24, Z+
   16f34:	94 91       	lpm	r25, Z
   16f36:	c6 54       	subi	r28, 0x46	; 70
   16f38:	df 4f       	sbci	r29, 0xFF	; 255
   16f3a:	e8 81       	ld	r30, Y
   16f3c:	f9 81       	ldd	r31, Y+1	; 0x01
   16f3e:	ca 5b       	subi	r28, 0xBA	; 186
   16f40:	d0 40       	sbci	r29, 0x00	; 0
   16f42:	6e 0f       	add	r22, r30
   16f44:	7f 1f       	adc	r23, r31
   16f46:	c8 53       	subi	r28, 0x38	; 56
   16f48:	df 4f       	sbci	r29, 0xFF	; 255
   16f4a:	e8 80       	ld	r14, Y
   16f4c:	f9 80       	ldd	r15, Y+1	; 0x01
   16f4e:	c8 5c       	subi	r28, 0xC8	; 200
   16f50:	d0 40       	sbci	r29, 0x00	; 0
   16f52:	ca 53       	subi	r28, 0x3A	; 58
   16f54:	df 4f       	sbci	r29, 0xFF	; 255
   16f56:	08 81       	ld	r16, Y
   16f58:	19 81       	ldd	r17, Y+1	; 0x01
   16f5a:	c6 5c       	subi	r28, 0xC6	; 198
   16f5c:	d0 40       	sbci	r29, 0x00	; 0
   16f5e:	c8 54       	subi	r28, 0x48	; 72
   16f60:	df 4f       	sbci	r29, 0xFF	; 255
   16f62:	e8 81       	ld	r30, Y
   16f64:	f9 81       	ldd	r31, Y+1	; 0x01
   16f66:	c8 5b       	subi	r28, 0xB8	; 184
   16f68:	d0 40       	sbci	r29, 0x00	; 0
   16f6a:	8e 0f       	add	r24, r30
   16f6c:	9f 1f       	adc	r25, r31
   16f6e:	0e 94 32 98 	call	0x13064	; 0x13064 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   16f72:	18 2f       	mov	r17, r24
   16f74:	88 23       	and	r24, r24
   16f76:	e9 f0       	breq	.+58     	; 0x16fb2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x63a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:791
      {
        fntargs =  (fptr_args*)pgm_read_word(&button_2->onclick);
   16f78:	f2 01       	movw	r30, r4
   16f7a:	e4 54       	subi	r30, 0x44	; 68
   16f7c:	ff 4f       	sbci	r31, 0xFF	; 255
   16f7e:	e6 0d       	add	r30, r6
   16f80:	f7 1d       	adc	r31, r7
   16f82:	25 91       	lpm	r18, Z+
   16f84:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:792
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
   16f86:	ca 54       	subi	r28, 0x4A	; 74
   16f88:	df 4f       	sbci	r29, 0xFF	; 255
   16f8a:	e8 81       	ld	r30, Y
   16f8c:	f9 81       	ldd	r31, Y+1	; 0x01
   16f8e:	c6 5b       	subi	r28, 0xB6	; 182
   16f90:	d0 40       	sbci	r29, 0x00	; 0
   16f92:	84 91       	lpm	r24, Z
   16f94:	cf 54       	subi	r28, 0x4F	; 79
   16f96:	df 4f       	sbci	r29, 0xFF	; 255
   16f98:	68 81       	ld	r22, Y
   16f9a:	c1 5b       	subi	r28, 0xB1	; 177
   16f9c:	d0 40       	sbci	r29, 0x00	; 0
   16f9e:	70 e0       	ldi	r23, 0x00	; 0
   16fa0:	49 2d       	mov	r20, r9
   16fa2:	90 e0       	ldi	r25, 0x00	; 0
   16fa4:	f9 01       	movw	r30, r18
   16fa6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:793
        ret = true;
   16fa8:	c4 53       	subi	r28, 0x34	; 52
   16faa:	df 4f       	sbci	r29, 0xFF	; 255
   16fac:	18 83       	st	Y, r17
   16fae:	cc 5c       	subi	r28, 0xCC	; 204
   16fb0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:767
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
   16fb2:	93 94       	inc	r9
   16fb4:	d0 ce       	rjmp	.-608    	; 0x16d56 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:796
        fntargs =  (fptr_args*)pgm_read_word(&button_2->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   16fb6:	c4 53       	subi	r28, 0x34	; 52
   16fb8:	df 4f       	sbci	r29, 0xFF	; 255
   16fba:	f8 81       	ld	r31, Y
   16fbc:	cc 5c       	subi	r28, 0xCC	; 204
   16fbe:	d0 40       	sbci	r29, 0x00	; 0
   16fc0:	f1 11       	cpse	r31, r1
   16fc2:	0c 94 b5 c6 	jmp	0x18d6a	; 0x18d6a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:798
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
   16fc6:	b1 2c       	mov	r11, r1
   16fc8:	13 01       	movw	r2, r6
   16fca:	2f e2       	ldi	r18, 0x2F	; 47
   16fcc:	22 1a       	sub	r2, r18
   16fce:	2d ef       	ldi	r18, 0xFD	; 253
   16fd0:	32 0a       	sbc	r3, r18
   16fd2:	b2 e1       	ldi	r27, 0x12	; 18
   16fd4:	5b 2e       	mov	r5, r27
   16fd6:	f1 01       	movw	r30, r2
   16fd8:	84 91       	lpm	r24, Z
   16fda:	b8 16       	cp	r11, r24
   16fdc:	08 f0       	brcs	.+2      	; 0x16fe0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x668>
   16fde:	cc c0       	rjmp	.+408    	; 0x17178 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x800>
   16fe0:	b5 9c       	mul	r11, r5
   16fe2:	40 01       	movw	r8, r0
   16fe4:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:801
  {
    function_1 = &current->function_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&function_1->enable_show);
   16fe6:	f4 01       	movw	r30, r8
   16fe8:	e3 5d       	subi	r30, 0xD3	; 211
   16fea:	fe 4f       	sbci	r31, 0xFE	; 254
   16fec:	e6 0d       	add	r30, r6
   16fee:	f7 1d       	adc	r31, r7
   16ff0:	25 91       	lpm	r18, Z+
   16ff2:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:802
    active = (ret_fptr(rfnt))(pgm_read_byte(&function_1->args), menu_args1, idx);
   16ff4:	84 01       	movw	r16, r8
   16ff6:	0d 5d       	subi	r16, 0xDD	; 221
   16ff8:	1e 4f       	sbci	r17, 0xFE	; 254
   16ffa:	06 0d       	add	r16, r6
   16ffc:	17 1d       	adc	r17, r7
   16ffe:	f8 01       	movw	r30, r16
   17000:	84 91       	lpm	r24, Z
   17002:	cf 54       	subi	r28, 0x4F	; 79
   17004:	df 4f       	sbci	r29, 0xFF	; 255
   17006:	68 81       	ld	r22, Y
   17008:	c1 5b       	subi	r28, 0xB1	; 177
   1700a:	d0 40       	sbci	r29, 0x00	; 0
   1700c:	70 e0       	ldi	r23, 0x00	; 0
   1700e:	4b 2d       	mov	r20, r11
   17010:	90 e0       	ldi	r25, 0x00	; 0
   17012:	f9 01       	movw	r30, r18
   17014:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:803
    if (active == 0) continue;
   17016:	88 23       	and	r24, r24
   17018:	09 f4       	brne	.+2      	; 0x1701c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x6a4>
   1701a:	ac c0       	rjmp	.+344    	; 0x17174 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x7fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:804
    rdr = pgm_read_byte(&function_1->redraw_class);
   1701c:	f4 01       	movw	r30, r8
   1701e:	e6 5d       	subi	r30, 0xD6	; 214
   17020:	fe 4f       	sbci	r31, 0xFE	; 254
   17022:	e6 0d       	add	r30, r6
   17024:	f7 1d       	adc	r31, r7
   17026:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:805
    if (enable_redraw(rdr, redraw_class) == true)
   17028:	c1 53       	subi	r28, 0x31	; 49
   1702a:	df 4f       	sbci	r29, 0xFF	; 255
   1702c:	68 81       	ld	r22, Y
   1702e:	cf 5c       	subi	r28, 0xCF	; 207
   17030:	d0 40       	sbci	r29, 0x00	; 0
   17032:	0e 94 ad aa 	call	0x1555a	; 0x1555a <enable_redraw(unsigned char, unsigned char)>
   17036:	88 23       	and	r24, r24
   17038:	09 f4       	brne	.+2      	; 0x1703c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x6c4>
   1703a:	4a c0       	rjmp	.+148    	; 0x170d0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x758>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:807
    {
      strcpy_P(str1, (char*)pgm_read_word(&function_1->name));
   1703c:	f4 01       	movw	r30, r8
   1703e:	e1 5d       	subi	r30, 0xD1	; 209
   17040:	fe 4f       	sbci	r31, 0xFE	; 254
   17042:	e6 0d       	add	r30, r6
   17044:	f7 1d       	adc	r31, r7
   17046:	65 91       	lpm	r22, Z+
   17048:	74 91       	lpm	r23, Z
   1704a:	ce 01       	movw	r24, r28
   1704c:	01 96       	adiw	r24, 0x01	; 1
   1704e:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:808
      fnt_coordinate_xy =  (fptr_coordinate_xy*)pgm_read_word(&function_1->fnt_coordinate_xy);
   17052:	f4 01       	movw	r30, r8
   17054:	ec 5d       	subi	r30, 0xDC	; 220
   17056:	fe 4f       	sbci	r31, 0xFE	; 254
   17058:	e6 0d       	add	r30, r6
   1705a:	f7 1d       	adc	r31, r7
   1705c:	a5 91       	lpm	r26, Z+
   1705e:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:809
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_byte(&function_1->args), menu_args1, str1);
   17060:	f8 01       	movw	r30, r16
   17062:	04 91       	lpm	r16, Z
   17064:	f4 01       	movw	r30, r8
   17066:	e8 5d       	subi	r30, 0xD8	; 216
   17068:	fe 4f       	sbci	r31, 0xFE	; 254
   1706a:	e6 0d       	add	r30, r6
   1706c:	f7 1d       	adc	r31, r7
   1706e:	25 91       	lpm	r18, Z+
   17070:	34 91       	lpm	r19, Z
   17072:	f4 01       	movw	r30, r8
   17074:	ea 5d       	subi	r30, 0xDA	; 218
   17076:	fe 4f       	sbci	r31, 0xFE	; 254
   17078:	e6 0d       	add	r30, r6
   1707a:	f7 1d       	adc	r31, r7
   1707c:	45 91       	lpm	r20, Z+
   1707e:	54 91       	lpm	r21, Z
   17080:	f4 01       	movw	r30, r8
   17082:	ef 5d       	subi	r30, 0xDF	; 223
   17084:	fe 4f       	sbci	r31, 0xFE	; 254
   17086:	e6 0d       	add	r30, r6
   17088:	f7 1d       	adc	r31, r7
   1708a:	65 91       	lpm	r22, Z+
   1708c:	74 91       	lpm	r23, Z
   1708e:	f4 01       	movw	r30, r8
   17090:	e1 5e       	subi	r30, 0xE1	; 225
   17092:	fe 4f       	sbci	r31, 0xFE	; 254
   17094:	e6 0d       	add	r30, r6
   17096:	f7 1d       	adc	r31, r7
   17098:	85 91       	lpm	r24, Z+
   1709a:	94 91       	lpm	r25, Z
   1709c:	c6 54       	subi	r28, 0x46	; 70
   1709e:	df 4f       	sbci	r29, 0xFF	; 255
   170a0:	e8 81       	ld	r30, Y
   170a2:	f9 81       	ldd	r31, Y+1	; 0x01
   170a4:	ca 5b       	subi	r28, 0xBA	; 186
   170a6:	d0 40       	sbci	r29, 0x00	; 0
   170a8:	6e 0f       	add	r22, r30
   170aa:	7f 1f       	adc	r23, r31
   170ac:	fe 01       	movw	r30, r28
   170ae:	31 96       	adiw	r30, 0x01	; 1
   170b0:	6f 01       	movw	r12, r30
   170b2:	cf 54       	subi	r28, 0x4F	; 79
   170b4:	df 4f       	sbci	r29, 0xFF	; 255
   170b6:	e8 80       	ld	r14, Y
   170b8:	c1 5b       	subi	r28, 0xB1	; 177
   170ba:	d0 40       	sbci	r29, 0x00	; 0
   170bc:	c8 54       	subi	r28, 0x48	; 72
   170be:	df 4f       	sbci	r29, 0xFF	; 255
   170c0:	e8 81       	ld	r30, Y
   170c2:	f9 81       	ldd	r31, Y+1	; 0x01
   170c4:	c8 5b       	subi	r28, 0xB8	; 184
   170c6:	d0 40       	sbci	r29, 0x00	; 0
   170c8:	8e 0f       	add	r24, r30
   170ca:	9f 1f       	adc	r25, r31
   170cc:	fd 01       	movw	r30, r26
   170ce:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:811
    }
    if (click_x > 0 && click_y > 0)
   170d0:	ca 53       	subi	r28, 0x3A	; 58
   170d2:	df 4f       	sbci	r29, 0xFF	; 255
   170d4:	28 81       	ld	r18, Y
   170d6:	39 81       	ldd	r19, Y+1	; 0x01
   170d8:	c6 5c       	subi	r28, 0xC6	; 198
   170da:	d0 40       	sbci	r29, 0x00	; 0
   170dc:	23 2b       	or	r18, r19
   170de:	09 f4       	brne	.+2      	; 0x170e2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x76a>
   170e0:	49 c0       	rjmp	.+146    	; 0x17174 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x7fc>
   170e2:	c8 53       	subi	r28, 0x38	; 56
   170e4:	df 4f       	sbci	r29, 0xFF	; 255
   170e6:	48 81       	ld	r20, Y
   170e8:	59 81       	ldd	r21, Y+1	; 0x01
   170ea:	c8 5c       	subi	r28, 0xC8	; 200
   170ec:	d0 40       	sbci	r29, 0x00	; 0
   170ee:	45 2b       	or	r20, r21
   170f0:	09 f4       	brne	.+2      	; 0x170f4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x77c>
   170f2:	40 c0       	rjmp	.+128    	; 0x17174 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x7fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:812
      if (button_click_touch(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), click_x, click_y) == true)
   170f4:	f4 01       	movw	r30, r8
   170f6:	e8 5d       	subi	r30, 0xD8	; 216
   170f8:	fe 4f       	sbci	r31, 0xFE	; 254
   170fa:	e6 0d       	add	r30, r6
   170fc:	f7 1d       	adc	r31, r7
   170fe:	25 91       	lpm	r18, Z+
   17100:	34 91       	lpm	r19, Z
   17102:	f4 01       	movw	r30, r8
   17104:	ea 5d       	subi	r30, 0xDA	; 218
   17106:	fe 4f       	sbci	r31, 0xFE	; 254
   17108:	e6 0d       	add	r30, r6
   1710a:	f7 1d       	adc	r31, r7
   1710c:	45 91       	lpm	r20, Z+
   1710e:	54 91       	lpm	r21, Z
   17110:	f4 01       	movw	r30, r8
   17112:	ef 5d       	subi	r30, 0xDF	; 223
   17114:	fe 4f       	sbci	r31, 0xFE	; 254
   17116:	e6 0d       	add	r30, r6
   17118:	f7 1d       	adc	r31, r7
   1711a:	65 91       	lpm	r22, Z+
   1711c:	74 91       	lpm	r23, Z
   1711e:	f4 01       	movw	r30, r8
   17120:	e1 5e       	subi	r30, 0xE1	; 225
   17122:	fe 4f       	sbci	r31, 0xFE	; 254
   17124:	e6 0d       	add	r30, r6
   17126:	f7 1d       	adc	r31, r7
   17128:	85 91       	lpm	r24, Z+
   1712a:	94 91       	lpm	r25, Z
   1712c:	c6 54       	subi	r28, 0x46	; 70
   1712e:	df 4f       	sbci	r29, 0xFF	; 255
   17130:	e8 81       	ld	r30, Y
   17132:	f9 81       	ldd	r31, Y+1	; 0x01
   17134:	ca 5b       	subi	r28, 0xBA	; 186
   17136:	d0 40       	sbci	r29, 0x00	; 0
   17138:	6e 0f       	add	r22, r30
   1713a:	7f 1f       	adc	r23, r31
   1713c:	c8 53       	subi	r28, 0x38	; 56
   1713e:	df 4f       	sbci	r29, 0xFF	; 255
   17140:	e8 80       	ld	r14, Y
   17142:	f9 80       	ldd	r15, Y+1	; 0x01
   17144:	c8 5c       	subi	r28, 0xC8	; 200
   17146:	d0 40       	sbci	r29, 0x00	; 0
   17148:	ca 53       	subi	r28, 0x3A	; 58
   1714a:	df 4f       	sbci	r29, 0xFF	; 255
   1714c:	08 81       	ld	r16, Y
   1714e:	19 81       	ldd	r17, Y+1	; 0x01
   17150:	c6 5c       	subi	r28, 0xC6	; 198
   17152:	d0 40       	sbci	r29, 0x00	; 0
   17154:	c8 54       	subi	r28, 0x48	; 72
   17156:	df 4f       	sbci	r29, 0xFF	; 255
   17158:	e8 81       	ld	r30, Y
   1715a:	f9 81       	ldd	r31, Y+1	; 0x01
   1715c:	c8 5b       	subi	r28, 0xB8	; 184
   1715e:	d0 40       	sbci	r29, 0x00	; 0
   17160:	8e 0f       	add	r24, r30
   17162:	9f 1f       	adc	r25, r31
   17164:	0e 94 32 98 	call	0x13064	; 0x13064 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   17168:	88 23       	and	r24, r24
   1716a:	21 f0       	breq	.+8      	; 0x17174 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x7fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:817
      {
        //fntargs =  pgm_read_word(&function_1->onclick);
        //((fptr_args)fntargs)(pgm_read_byte(&function_1->args), menu_args1);
        //ret = true;
        printf("mrdka funkce\n");
   1716c:	87 ee       	ldi	r24, 0xE7	; 231
   1716e:	98 e0       	ldi	r25, 0x08	; 8
   17170:	0e 94 20 f2 	call	0x1e440	; 0x1e440 <puts>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:798
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
   17174:	b3 94       	inc	r11
   17176:	2f cf       	rjmp	.-418    	; 0x16fd6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x65e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:823
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
   17178:	ca 54       	subi	r28, 0x4A	; 74
   1717a:	df 4f       	sbci	r29, 0xFF	; 255
   1717c:	18 82       	st	Y, r1
   1717e:	c6 5b       	subi	r28, 0xB6	; 182
   17180:	d0 40       	sbci	r29, 0x00	; 0
   17182:	93 01       	movw	r18, r6
   17184:	2e 52       	subi	r18, 0x2E	; 46
   17186:	3d 4f       	sbci	r19, 0xFD	; 253
   17188:	cc 53       	subi	r28, 0x3C	; 60
   1718a:	df 4f       	sbci	r29, 0xFF	; 255
   1718c:	39 83       	std	Y+1, r19	; 0x01
   1718e:	28 83       	st	Y, r18
   17190:	c4 5c       	subi	r28, 0xC4	; 196
   17192:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:829
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, (char*)pgm_read_word(&switch_1->name));
   17194:	4e 01       	movw	r8, r28
   17196:	31 e8       	ldi	r19, 0x81	; 129
   17198:	83 0e       	add	r8, r19
   1719a:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:834
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
   1719c:	ae 01       	movw	r20, r28
   1719e:	4f 5f       	subi	r20, 0xFF	; 255
   171a0:	5f 4f       	sbci	r21, 0xFF	; 255
   171a2:	cc 54       	subi	r28, 0x4C	; 76
   171a4:	df 4f       	sbci	r29, 0xFF	; 255
   171a6:	59 83       	std	Y+1, r21	; 0x01
   171a8:	48 83       	st	Y, r20
   171aa:	c4 5b       	subi	r28, 0xB4	; 180
   171ac:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:823
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
   171ae:	cc 53       	subi	r28, 0x3C	; 60
   171b0:	df 4f       	sbci	r29, 0xFF	; 255
   171b2:	e8 81       	ld	r30, Y
   171b4:	f9 81       	ldd	r31, Y+1	; 0x01
   171b6:	c4 5c       	subi	r28, 0xC4	; 196
   171b8:	d0 40       	sbci	r29, 0x00	; 0
   171ba:	84 91       	lpm	r24, Z
   171bc:	ca 54       	subi	r28, 0x4A	; 74
   171be:	df 4f       	sbci	r29, 0xFF	; 255
   171c0:	f8 81       	ld	r31, Y
   171c2:	c6 5b       	subi	r28, 0xB6	; 182
   171c4:	d0 40       	sbci	r29, 0x00	; 0
   171c6:	f8 17       	cp	r31, r24
   171c8:	08 f0       	brcs	.+2      	; 0x171cc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x854>
   171ca:	d1 c1       	rjmp	.+930    	; 0x1756e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xbf6>
   171cc:	27 e1       	ldi	r18, 0x17	; 23
   171ce:	f2 9f       	mul	r31, r18
   171d0:	60 01       	movw	r12, r0
   171d2:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:826
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
   171d4:	f6 01       	movw	r30, r12
   171d6:	e1 57       	subi	r30, 0x71	; 113
   171d8:	fe 4f       	sbci	r31, 0xFE	; 254
   171da:	e6 0d       	add	r30, r6
   171dc:	f7 1d       	adc	r31, r7
   171de:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:827
    if (enable_redraw(rdr, redraw_class) == true)
   171e0:	c1 53       	subi	r28, 0x31	; 49
   171e2:	df 4f       	sbci	r29, 0xFF	; 255
   171e4:	68 81       	ld	r22, Y
   171e6:	cf 5c       	subi	r28, 0xCF	; 207
   171e8:	d0 40       	sbci	r29, 0x00	; 0
   171ea:	0e 94 ad aa 	call	0x1555a	; 0x1555a <enable_redraw(unsigned char, unsigned char)>
   171ee:	88 23       	and	r24, r24
   171f0:	09 f4       	brne	.+2      	; 0x171f4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x87c>
   171f2:	42 c1       	rjmp	.+644    	; 0x17478 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xb00>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:829
    {
      strcpy_P(str2, (char*)pgm_read_word(&switch_1->name));
   171f4:	f6 01       	movw	r30, r12
   171f6:	e7 58       	subi	r30, 0x87	; 135
   171f8:	fe 4f       	sbci	r31, 0xFE	; 254
   171fa:	e6 0d       	add	r30, r6
   171fc:	f7 1d       	adc	r31, r7
   171fe:	65 91       	lpm	r22, Z+
   17200:	74 91       	lpm	r23, Z
   17202:	c4 01       	movw	r24, r8
   17204:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:830
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
   17208:	f6 01       	movw	r30, r12
   1720a:	e5 57       	subi	r30, 0x75	; 117
   1720c:	fe 4f       	sbci	r31, 0xFE	; 254
   1720e:	e6 0d       	add	r30, r6
   17210:	f7 1d       	adc	r31, r7
   17212:	25 91       	lpm	r18, Z+
   17214:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:831
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
   17216:	f6 01       	movw	r30, r12
   17218:	e3 57       	subi	r30, 0x73	; 115
   1721a:	fe 4f       	sbci	r31, 0xFE	; 254
   1721c:	e6 0d       	add	r30, r6
   1721e:	f7 1d       	adc	r31, r7
   17220:	e5 90       	lpm	r14, Z+
   17222:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:832
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
   17224:	86 01       	movw	r16, r12
   17226:	08 57       	subi	r16, 0x78	; 120
   17228:	1e 4f       	sbci	r17, 0xFE	; 254
   1722a:	06 0d       	add	r16, r6
   1722c:	17 1d       	adc	r17, r7
   1722e:	f8 01       	movw	r30, r16
   17230:	84 91       	lpm	r24, Z
   17232:	cf 54       	subi	r28, 0x4F	; 79
   17234:	df 4f       	sbci	r29, 0xFF	; 255
   17236:	68 81       	ld	r22, Y
   17238:	c1 5b       	subi	r28, 0xB1	; 177
   1723a:	d0 40       	sbci	r29, 0x00	; 0
   1723c:	70 e0       	ldi	r23, 0x00	; 0
   1723e:	ca 54       	subi	r28, 0x4A	; 74
   17240:	df 4f       	sbci	r29, 0xFF	; 255
   17242:	48 81       	ld	r20, Y
   17244:	c6 5b       	subi	r28, 0xB6	; 182
   17246:	d0 40       	sbci	r29, 0x00	; 0
   17248:	90 e0       	ldi	r25, 0x00	; 0
   1724a:	f9 01       	movw	r30, r18
   1724c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:833
      str3[0] = 0;
   1724e:	cf 55       	subi	r28, 0x5F	; 95
   17250:	df 4f       	sbci	r29, 0xFF	; 255
   17252:	18 82       	st	Y, r1
   17254:	c1 5a       	subi	r28, 0xA1	; 161
   17256:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:834
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
   17258:	f8 01       	movw	r30, r16
   1725a:	44 91       	lpm	r20, Z
   1725c:	84 91       	lpm	r24, Z
   1725e:	8e 01       	movw	r16, r28
   17260:	0f 55       	subi	r16, 0x5F	; 95
   17262:	1f 4f       	sbci	r17, 0xFF	; 255
   17264:	9e 01       	movw	r18, r28
   17266:	2f 5f       	subi	r18, 0xFF	; 255
   17268:	3f 4f       	sbci	r19, 0xFF	; 255
   1726a:	cf 54       	subi	r28, 0x4F	; 79
   1726c:	df 4f       	sbci	r29, 0xFF	; 255
   1726e:	68 81       	ld	r22, Y
   17270:	c1 5b       	subi	r28, 0xB1	; 177
   17272:	d0 40       	sbci	r29, 0x00	; 0
   17274:	f7 01       	movw	r30, r14
   17276:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:839
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);
   17278:	f6 01       	movw	r30, r12
   1727a:	ed 57       	subi	r30, 0x7D	; 125
   1727c:	fe 4f       	sbci	r31, 0xFE	; 254
   1727e:	e6 0d       	add	r30, r6
   17280:	f7 1d       	adc	r31, r7
   17282:	25 91       	lpm	r18, Z+
   17284:	34 91       	lpm	r19, Z
   17286:	c4 54       	subi	r28, 0x44	; 68
   17288:	df 4f       	sbci	r29, 0xFF	; 255
   1728a:	39 83       	std	Y+1, r19	; 0x01
   1728c:	28 83       	st	Y, r18
   1728e:	cc 5b       	subi	r28, 0xBC	; 188
   17290:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:838
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
   17292:	f6 01       	movw	r30, r12
   17294:	ef 57       	subi	r30, 0x7F	; 127
   17296:	fe 4f       	sbci	r31, 0xFE	; 254
   17298:	e6 0d       	add	r30, r6
   1729a:	f7 1d       	adc	r31, r7
   1729c:	45 90       	lpm	r4, Z+
   1729e:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:837
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
   172a0:	f6 01       	movw	r30, r12
   172a2:	e1 58       	subi	r30, 0x81	; 129
   172a4:	fe 4f       	sbci	r31, 0xFE	; 254
   172a6:	e6 0d       	add	r30, r6
   172a8:	f7 1d       	adc	r31, r7
   172aa:	85 91       	lpm	r24, Z+
   172ac:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:836
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
   172ae:	f6 01       	movw	r30, r12
   172b0:	e3 58       	subi	r30, 0x83	; 131
   172b2:	fe 4f       	sbci	r31, 0xFE	; 254
   172b4:	e6 0d       	add	r30, r6
   172b6:	f7 1d       	adc	r31, r7
   172b8:	25 90       	lpm	r2, Z+
   172ba:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:835
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
   172bc:	c6 54       	subi	r28, 0x46	; 70
   172be:	df 4f       	sbci	r29, 0xFF	; 255
   172c0:	48 81       	ld	r20, Y
   172c2:	59 81       	ldd	r21, Y+1	; 0x01
   172c4:	ca 5b       	subi	r28, 0xBA	; 186
   172c6:	d0 40       	sbci	r29, 0x00	; 0
   172c8:	24 0e       	add	r2, r20
   172ca:	35 1e       	adc	r3, r21
   172cc:	f6 01       	movw	r30, r12
   172ce:	e5 58       	subi	r30, 0x85	; 133
   172d0:	fe 4f       	sbci	r31, 0xFE	; 254
   172d2:	e6 0d       	add	r30, r6
   172d4:	f7 1d       	adc	r31, r7
   172d6:	a5 90       	lpm	r10, Z+
   172d8:	b4 90       	lpm	r11, Z
   172da:	c8 54       	subi	r28, 0x48	; 72
   172dc:	df 4f       	sbci	r29, 0xFF	; 255
   172de:	68 81       	ld	r22, Y
   172e0:	79 81       	ldd	r23, Y+1	; 0x01
   172e2:	c8 5b       	subi	r28, 0xB8	; 184
   172e4:	d0 40       	sbci	r29, 0x00	; 0
   172e6:	a6 0e       	add	r10, r22
   172e8:	b7 1e       	adc	r11, r23
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
   172ea:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
   172ee:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
   172f2:	10 e0       	ldi	r17, 0x00	; 0
   172f4:	00 e0       	ldi	r16, 0x00	; 0
   172f6:	55 24       	eor	r5, r5
   172f8:	fc 01       	movw	r30, r24
   172fa:	ff 27       	eor	r31, r31
   172fc:	c2 54       	subi	r28, 0x42	; 66
   172fe:	df 4f       	sbci	r29, 0xFF	; 255
   17300:	f9 83       	std	Y+1, r31	; 0x01
   17302:	e8 83       	st	Y, r30
   17304:	ce 5b       	subi	r28, 0xBE	; 190
   17306:	d0 40       	sbci	r29, 0x00	; 0
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4500
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
   17308:	91 01       	movw	r18, r2
   1730a:	24 0d       	add	r18, r4
   1730c:	35 1d       	adc	r19, r5
   1730e:	c6 53       	subi	r28, 0x36	; 54
   17310:	df 4f       	sbci	r29, 0xFF	; 255
   17312:	39 83       	std	Y+1, r19	; 0x01
   17314:	28 83       	st	Y, r18
   17316:	ca 5c       	subi	r28, 0xCA	; 202
   17318:	d0 40       	sbci	r29, 0x00	; 0
   1731a:	7f 01       	movw	r14, r30
   1731c:	ea 0c       	add	r14, r10
   1731e:	fb 1c       	adc	r15, r11
   17320:	c6 53       	subi	r28, 0x36	; 54
   17322:	df 4f       	sbci	r29, 0xFF	; 255
   17324:	28 81       	ld	r18, Y
   17326:	39 81       	ldd	r19, Y+1	; 0x01
   17328:	ca 5c       	subi	r28, 0xCA	; 202
   1732a:	d0 40       	sbci	r29, 0x00	; 0
   1732c:	20 1b       	sub	r18, r16
   1732e:	31 0b       	sbc	r19, r17
   17330:	a7 01       	movw	r20, r14
   17332:	40 1b       	sub	r20, r16
   17334:	51 0b       	sbc	r21, r17
   17336:	b1 01       	movw	r22, r2
   17338:	60 0f       	add	r22, r16
   1733a:	71 1f       	adc	r23, r17
   1733c:	c5 01       	movw	r24, r10
   1733e:	80 0f       	add	r24, r16
   17340:	91 1f       	adc	r25, r17
   17342:	0e 94 37 ad 	call	0x15a6e	; 0x15a6e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.227]>
   17346:	0f 5f       	subi	r16, 0xFF	; 255
   17348:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4499
/// typ button_1 ////
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
   1734a:	03 30       	cpi	r16, 0x03	; 3
   1734c:	11 05       	cpc	r17, r1
   1734e:	41 f7       	brne	.-48     	; 0x17320 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x9a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4502
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
   17350:	f4 01       	movw	r30, r8
   17352:	01 90       	ld	r0, Z+
   17354:	00 20       	and	r0, r0
   17356:	e9 f7       	brne	.-6      	; 0x17352 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x9da>
   17358:	31 97       	sbiw	r30, 0x01	; 1
   1735a:	e8 19       	sub	r30, r8
   1735c:	f9 09       	sbc	r31, r9
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1736
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   1735e:	c4 54       	subi	r28, 0x44	; 68
   17360:	df 4f       	sbci	r29, 0xFF	; 255
   17362:	88 81       	ld	r24, Y
   17364:	cc 5b       	subi	r28, 0xBC	; 188
   17366:	d0 40       	sbci	r29, 0x00	; 0
   17368:	88 0f       	add	r24, r24
   1736a:	c4 54       	subi	r28, 0x44	; 68
   1736c:	df 4f       	sbci	r29, 0xFF	; 255
   1736e:	38 81       	ld	r19, Y
   17370:	cc 5b       	subi	r28, 0xBC	; 188
   17372:	d0 40       	sbci	r29, 0x00	; 0
   17374:	83 0f       	add	r24, r19
   17376:	88 0f       	add	r24, r24
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4504
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
   17378:	a2 01       	movw	r20, r4
   1737a:	48 1b       	sub	r20, r24
   1737c:	51 09       	sbc	r21, r1
   1737e:	57 ff       	sbrs	r21, 7
   17380:	02 c0       	rjmp	.+4      	; 0x17386 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xa0e>
   17382:	4d 5f       	subi	r20, 0xFD	; 253
   17384:	5f 4f       	sbci	r21, 0xFF	; 255
   17386:	55 95       	asr	r21
   17388:	47 95       	ror	r20
   1738a:	55 95       	asr	r21
   1738c:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4505
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
   1738e:	42 0d       	add	r20, r2
   17390:	53 2d       	mov	r21, r3
   17392:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   17394:	66 e0       	ldi	r22, 0x06	; 6
   17396:	e6 9f       	mul	r30, r22
   17398:	f0 01       	movw	r30, r0
   1739a:	11 24       	eor	r1, r1
   1739c:	c4 54       	subi	r28, 0x44	; 68
   1739e:	df 4f       	sbci	r29, 0xFF	; 255
   173a0:	78 81       	ld	r23, Y
   173a2:	cc 5b       	subi	r28, 0xBC	; 188
   173a4:	d0 40       	sbci	r29, 0x00	; 0
   173a6:	7e 9f       	mul	r23, r30
   173a8:	c0 01       	movw	r24, r0
   173aa:	7f 9f       	mul	r23, r31
   173ac:	90 0d       	add	r25, r0
   173ae:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4503
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
   173b0:	99 27       	eor	r25, r25
   173b2:	c2 54       	subi	r28, 0x42	; 66
   173b4:	df 4f       	sbci	r29, 0xFF	; 255
   173b6:	68 81       	ld	r22, Y
   173b8:	79 81       	ldd	r23, Y+1	; 0x01
   173ba:	ce 5b       	subi	r28, 0xBE	; 190
   173bc:	d0 40       	sbci	r29, 0x00	; 0
   173be:	68 1b       	sub	r22, r24
   173c0:	79 0b       	sbc	r23, r25
   173c2:	77 ff       	sbrs	r23, 7
   173c4:	02 c0       	rjmp	.+4      	; 0x173ca <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xa52>
   173c6:	6f 5f       	subi	r22, 0xFF	; 255
   173c8:	7f 4f       	sbci	r23, 0xFF	; 255
   173ca:	75 95       	asr	r23
   173cc:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4505
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
   173ce:	6a 0d       	add	r22, r10
   173d0:	7b 2d       	mov	r23, r11
   173d2:	71 1d       	adc	r23, r1
   173d4:	ee 24       	eor	r14, r14
   173d6:	ea 94       	dec	r14
   173d8:	fe 2c       	mov	r15, r14
   173da:	10 e0       	ldi	r17, 0x00	; 0
   173dc:	00 e0       	ldi	r16, 0x00	; 0
   173de:	c4 54       	subi	r28, 0x44	; 68
   173e0:	df 4f       	sbci	r29, 0xFF	; 255
   173e2:	28 81       	ld	r18, Y
   173e4:	cc 5b       	subi	r28, 0xBC	; 188
   173e6:	d0 40       	sbci	r29, 0x00	; 0
   173e8:	c4 01       	movw	r24, r8
   173ea:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4507
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
   173ee:	cc 54       	subi	r28, 0x4C	; 76
   173f0:	df 4f       	sbci	r29, 0xFF	; 255
   173f2:	e8 81       	ld	r30, Y
   173f4:	f9 81       	ldd	r31, Y+1	; 0x01
   173f6:	c4 5b       	subi	r28, 0xB4	; 180
   173f8:	d0 40       	sbci	r29, 0x00	; 0
   173fa:	01 90       	ld	r0, Z+
   173fc:	00 20       	and	r0, r0
   173fe:	e9 f7       	brne	.-6      	; 0x173fa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xa82>
   17400:	31 97       	sbiw	r30, 0x01	; 1
   17402:	cc 54       	subi	r28, 0x4C	; 76
   17404:	df 4f       	sbci	r29, 0xFF	; 255
   17406:	88 81       	ld	r24, Y
   17408:	99 81       	ldd	r25, Y+1	; 0x01
   1740a:	c4 5b       	subi	r28, 0xB4	; 180
   1740c:	d0 40       	sbci	r29, 0x00	; 0
   1740e:	e8 1b       	sub	r30, r24
   17410:	f9 0b       	sbc	r31, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4509
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
   17412:	a2 01       	movw	r20, r4
   17414:	46 50       	subi	r20, 0x06	; 6
   17416:	51 09       	sbc	r21, r1
   17418:	57 ff       	sbrs	r21, 7
   1741a:	02 c0       	rjmp	.+4      	; 0x17420 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xaa8>
   1741c:	4d 5f       	subi	r20, 0xFD	; 253
   1741e:	5f 4f       	sbci	r21, 0xFF	; 255
   17420:	55 95       	asr	r21
   17422:	47 95       	ror	r20
   17424:	55 95       	asr	r21
   17426:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4510
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
   17428:	55 27       	eor	r21, r21
   1742a:	ca 01       	movw	r24, r20
   1742c:	88 0f       	add	r24, r24
   1742e:	99 1f       	adc	r25, r25
   17430:	48 0f       	add	r20, r24
   17432:	59 1f       	adc	r21, r25
   17434:	42 0d       	add	r20, r2
   17436:	53 1d       	adc	r21, r3
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   17438:	96 e0       	ldi	r25, 0x06	; 6
   1743a:	e9 9f       	mul	r30, r25
   1743c:	f0 01       	movw	r30, r0
   1743e:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4508
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
  posx = (size_x - tmpx) / 2;
   17440:	ff 27       	eor	r31, r31
   17442:	c2 54       	subi	r28, 0x42	; 66
   17444:	df 4f       	sbci	r29, 0xFF	; 255
   17446:	68 81       	ld	r22, Y
   17448:	79 81       	ldd	r23, Y+1	; 0x01
   1744a:	ce 5b       	subi	r28, 0xBE	; 190
   1744c:	d0 40       	sbci	r29, 0x00	; 0
   1744e:	6e 1b       	sub	r22, r30
   17450:	7f 0b       	sbc	r23, r31
   17452:	77 ff       	sbrs	r23, 7
   17454:	02 c0       	rjmp	.+4      	; 0x1745a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xae2>
   17456:	6f 5f       	subi	r22, 0xFF	; 255
   17458:	7f 4f       	sbci	r23, 0xFF	; 255
   1745a:	75 95       	asr	r23
   1745c:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4510
  posy = (size_y - tmpy) / 4;
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
   1745e:	6a 0d       	add	r22, r10
   17460:	7b 2d       	mov	r23, r11
   17462:	71 1d       	adc	r23, r1
   17464:	ee 24       	eor	r14, r14
   17466:	ea 94       	dec	r14
   17468:	fe 2c       	mov	r15, r14
   1746a:	10 e0       	ldi	r17, 0x00	; 0
   1746c:	00 e0       	ldi	r16, 0x00	; 0
   1746e:	21 e0       	ldi	r18, 0x01	; 1
   17470:	ce 01       	movw	r24, r28
   17472:	01 96       	adiw	r24, 0x01	; 1
   17474:	0e 94 b3 b0 	call	0x16166	; 0x16166 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
_Z9draw_menubhjj.constprop.141():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:842
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);

    }
    if (click_x > 0 && click_y > 0)
   17478:	ca 53       	subi	r28, 0x3A	; 58
   1747a:	df 4f       	sbci	r29, 0xFF	; 255
   1747c:	e8 81       	ld	r30, Y
   1747e:	f9 81       	ldd	r31, Y+1	; 0x01
   17480:	c6 5c       	subi	r28, 0xC6	; 198
   17482:	d0 40       	sbci	r29, 0x00	; 0
   17484:	ef 2b       	or	r30, r31
   17486:	09 f4       	brne	.+2      	; 0x1748a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xb12>
   17488:	66 c0       	rjmp	.+204    	; 0x17556 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xbde>
   1748a:	c8 53       	subi	r28, 0x38	; 56
   1748c:	df 4f       	sbci	r29, 0xFF	; 255
   1748e:	28 81       	ld	r18, Y
   17490:	39 81       	ldd	r19, Y+1	; 0x01
   17492:	c8 5c       	subi	r28, 0xC8	; 200
   17494:	d0 40       	sbci	r29, 0x00	; 0
   17496:	23 2b       	or	r18, r19
   17498:	09 f4       	brne	.+2      	; 0x1749c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xb24>
   1749a:	5d c0       	rjmp	.+186    	; 0x17556 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xbde>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:843
      if (button_click_touch(global_x + pgm_read_word(&switch_1->x), global_y + pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
   1749c:	f6 01       	movw	r30, r12
   1749e:	ef 57       	subi	r30, 0x7F	; 127
   174a0:	fe 4f       	sbci	r31, 0xFE	; 254
   174a2:	e6 0d       	add	r30, r6
   174a4:	f7 1d       	adc	r31, r7
   174a6:	25 91       	lpm	r18, Z+
   174a8:	34 91       	lpm	r19, Z
   174aa:	f6 01       	movw	r30, r12
   174ac:	e1 58       	subi	r30, 0x81	; 129
   174ae:	fe 4f       	sbci	r31, 0xFE	; 254
   174b0:	e6 0d       	add	r30, r6
   174b2:	f7 1d       	adc	r31, r7
   174b4:	45 91       	lpm	r20, Z+
   174b6:	54 91       	lpm	r21, Z
   174b8:	f6 01       	movw	r30, r12
   174ba:	e3 58       	subi	r30, 0x83	; 131
   174bc:	fe 4f       	sbci	r31, 0xFE	; 254
   174be:	e6 0d       	add	r30, r6
   174c0:	f7 1d       	adc	r31, r7
   174c2:	65 91       	lpm	r22, Z+
   174c4:	74 91       	lpm	r23, Z
   174c6:	f6 01       	movw	r30, r12
   174c8:	e5 58       	subi	r30, 0x85	; 133
   174ca:	fe 4f       	sbci	r31, 0xFE	; 254
   174cc:	e6 0d       	add	r30, r6
   174ce:	f7 1d       	adc	r31, r7
   174d0:	85 91       	lpm	r24, Z+
   174d2:	94 91       	lpm	r25, Z
   174d4:	c6 54       	subi	r28, 0x46	; 70
   174d6:	df 4f       	sbci	r29, 0xFF	; 255
   174d8:	e8 81       	ld	r30, Y
   174da:	f9 81       	ldd	r31, Y+1	; 0x01
   174dc:	ca 5b       	subi	r28, 0xBA	; 186
   174de:	d0 40       	sbci	r29, 0x00	; 0
   174e0:	6e 0f       	add	r22, r30
   174e2:	7f 1f       	adc	r23, r31
   174e4:	c8 53       	subi	r28, 0x38	; 56
   174e6:	df 4f       	sbci	r29, 0xFF	; 255
   174e8:	e8 80       	ld	r14, Y
   174ea:	f9 80       	ldd	r15, Y+1	; 0x01
   174ec:	c8 5c       	subi	r28, 0xC8	; 200
   174ee:	d0 40       	sbci	r29, 0x00	; 0
   174f0:	ca 53       	subi	r28, 0x3A	; 58
   174f2:	df 4f       	sbci	r29, 0xFF	; 255
   174f4:	08 81       	ld	r16, Y
   174f6:	19 81       	ldd	r17, Y+1	; 0x01
   174f8:	c6 5c       	subi	r28, 0xC6	; 198
   174fa:	d0 40       	sbci	r29, 0x00	; 0
   174fc:	c8 54       	subi	r28, 0x48	; 72
   174fe:	df 4f       	sbci	r29, 0xFF	; 255
   17500:	e8 81       	ld	r30, Y
   17502:	f9 81       	ldd	r31, Y+1	; 0x01
   17504:	c8 5b       	subi	r28, 0xB8	; 184
   17506:	d0 40       	sbci	r29, 0x00	; 0
   17508:	8e 0f       	add	r24, r30
   1750a:	9f 1f       	adc	r25, r31
   1750c:	0e 94 32 98 	call	0x13064	; 0x13064 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   17510:	18 2f       	mov	r17, r24
   17512:	88 23       	and	r24, r24
   17514:	01 f1       	breq	.+64     	; 0x17556 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xbde>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:845
      {
        fntargs =  (fptr_args*)pgm_read_word(&switch_1->onclick);
   17516:	f6 01       	movw	r30, r12
   17518:	e7 57       	subi	r30, 0x77	; 119
   1751a:	fe 4f       	sbci	r31, 0xFE	; 254
   1751c:	e6 0d       	add	r30, r6
   1751e:	f7 1d       	adc	r31, r7
   17520:	25 91       	lpm	r18, Z+
   17522:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:846
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
   17524:	f6 01       	movw	r30, r12
   17526:	e8 57       	subi	r30, 0x78	; 120
   17528:	fe 4f       	sbci	r31, 0xFE	; 254
   1752a:	e6 0d       	add	r30, r6
   1752c:	f7 1d       	adc	r31, r7
   1752e:	84 91       	lpm	r24, Z
   17530:	cf 54       	subi	r28, 0x4F	; 79
   17532:	df 4f       	sbci	r29, 0xFF	; 255
   17534:	68 81       	ld	r22, Y
   17536:	c1 5b       	subi	r28, 0xB1	; 177
   17538:	d0 40       	sbci	r29, 0x00	; 0
   1753a:	70 e0       	ldi	r23, 0x00	; 0
   1753c:	ca 54       	subi	r28, 0x4A	; 74
   1753e:	df 4f       	sbci	r29, 0xFF	; 255
   17540:	48 81       	ld	r20, Y
   17542:	c6 5b       	subi	r28, 0xB6	; 182
   17544:	d0 40       	sbci	r29, 0x00	; 0
   17546:	90 e0       	ldi	r25, 0x00	; 0
   17548:	f9 01       	movw	r30, r18
   1754a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:847
        ret = true;
   1754c:	c4 53       	subi	r28, 0x34	; 52
   1754e:	df 4f       	sbci	r29, 0xFF	; 255
   17550:	18 83       	st	Y, r17
   17552:	cc 5c       	subi	r28, 0xCC	; 204
   17554:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:823
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
   17556:	ca 54       	subi	r28, 0x4A	; 74
   17558:	df 4f       	sbci	r29, 0xFF	; 255
   1755a:	f8 81       	ld	r31, Y
   1755c:	c6 5b       	subi	r28, 0xB6	; 182
   1755e:	d0 40       	sbci	r29, 0x00	; 0
   17560:	ff 5f       	subi	r31, 0xFF	; 255
   17562:	ca 54       	subi	r28, 0x4A	; 74
   17564:	df 4f       	sbci	r29, 0xFF	; 255
   17566:	f8 83       	st	Y, r31
   17568:	c6 5b       	subi	r28, 0xB6	; 182
   1756a:	d0 40       	sbci	r29, 0x00	; 0
   1756c:	20 ce       	rjmp	.-960    	; 0x171ae <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x836>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:850
        fntargs =  (fptr_args*)pgm_read_word(&switch_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   1756e:	c4 53       	subi	r28, 0x34	; 52
   17570:	df 4f       	sbci	r29, 0xFF	; 255
   17572:	28 81       	ld	r18, Y
   17574:	cc 5c       	subi	r28, 0xCC	; 204
   17576:	d0 40       	sbci	r29, 0x00	; 0
   17578:	21 11       	cpse	r18, r1
   1757a:	0c 94 b5 c6 	jmp	0x18d6a	; 0x18d6a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:852
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
   1757e:	51 2c       	mov	r5, r1
   17580:	43 01       	movw	r8, r6
   17582:	3c e2       	ldi	r19, 0x2C	; 44
   17584:	83 1a       	sub	r8, r19
   17586:	3d ef       	ldi	r19, 0xFD	; 253
   17588:	93 0a       	sbc	r9, r19
   1758a:	f4 01       	movw	r30, r8
   1758c:	84 91       	lpm	r24, Z
   1758e:	58 16       	cp	r5, r24
   17590:	08 f0       	brcs	.+2      	; 0x17594 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc1c>
   17592:	d6 c0       	rjmp	.+428    	; 0x17740 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xdc8>
   17594:	f0 e1       	ldi	r31, 0x10	; 16
   17596:	5f 9e       	mul	r5, r31
   17598:	60 01       	movw	r12, r0
   1759a:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:855
  {
    symbol_button_1 = &current->symbol_button_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&symbol_button_1->enable_show);
   1759c:	f6 01       	movw	r30, r12
   1759e:	e6 50       	subi	r30, 0x06	; 6
   175a0:	fe 4f       	sbci	r31, 0xFE	; 254
   175a2:	e6 0d       	add	r30, r6
   175a4:	f7 1d       	adc	r31, r7
   175a6:	25 91       	lpm	r18, Z+
   175a8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:856
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
   175aa:	56 01       	movw	r10, r12
   175ac:	4a e0       	ldi	r20, 0x0A	; 10
   175ae:	a4 1a       	sub	r10, r20
   175b0:	4e ef       	ldi	r20, 0xFE	; 254
   175b2:	b4 0a       	sbc	r11, r20
   175b4:	a6 0c       	add	r10, r6
   175b6:	b7 1c       	adc	r11, r7
   175b8:	f5 01       	movw	r30, r10
   175ba:	84 91       	lpm	r24, Z
   175bc:	cf 54       	subi	r28, 0x4F	; 79
   175be:	df 4f       	sbci	r29, 0xFF	; 255
   175c0:	68 81       	ld	r22, Y
   175c2:	c1 5b       	subi	r28, 0xB1	; 177
   175c4:	d0 40       	sbci	r29, 0x00	; 0
   175c6:	70 e0       	ldi	r23, 0x00	; 0
   175c8:	45 2d       	mov	r20, r5
   175ca:	90 e0       	ldi	r25, 0x00	; 0
   175cc:	f9 01       	movw	r30, r18
   175ce:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:857
    if (active == 0) continue;
   175d0:	88 23       	and	r24, r24
   175d2:	09 f4       	brne	.+2      	; 0x175d6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc5e>
   175d4:	b3 c0       	rjmp	.+358    	; 0x1773c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xdc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:858
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
   175d6:	f6 01       	movw	r30, r12
   175d8:	e7 50       	subi	r30, 0x07	; 7
   175da:	fe 4f       	sbci	r31, 0xFE	; 254
   175dc:	e6 0d       	add	r30, r6
   175de:	f7 1d       	adc	r31, r7
   175e0:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:859
    if (enable_redraw(rdr, redraw_class) == true)
   175e2:	c1 53       	subi	r28, 0x31	; 49
   175e4:	df 4f       	sbci	r29, 0xFF	; 255
   175e6:	68 81       	ld	r22, Y
   175e8:	cf 5c       	subi	r28, 0xCF	; 207
   175ea:	d0 40       	sbci	r29, 0x00	; 0
   175ec:	0e 94 ad aa 	call	0x1555a	; 0x1555a <enable_redraw(unsigned char, unsigned char)>
   175f0:	88 23       	and	r24, r24
   175f2:	09 f4       	brne	.+2      	; 0x175f6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc7e>
   175f4:	3c c0       	rjmp	.+120    	; 0x1766e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xcf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:863
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
   175f6:	f6 01       	movw	r30, r12
   175f8:	e4 51       	subi	r30, 0x14	; 20
   175fa:	fe 4f       	sbci	r31, 0xFE	; 254
   175fc:	e6 0d       	add	r30, r6
   175fe:	f7 1d       	adc	r31, r7
   17600:	e5 90       	lpm	r14, Z+
   17602:	f4 90       	lpm	r15, Z
   17604:	f6 01       	movw	r30, r12
   17606:	eb 50       	subi	r30, 0x0B	; 11
   17608:	fe 4f       	sbci	r31, 0xFE	; 254
   1760a:	e6 0d       	add	r30, r6
   1760c:	f7 1d       	adc	r31, r7
   1760e:	05 91       	lpm	r16, Z+
   17610:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:862
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
   17612:	f6 01       	movw	r30, r12
   17614:	ed 50       	subi	r30, 0x0D	; 13
   17616:	fe 4f       	sbci	r31, 0xFE	; 254
   17618:	e6 0d       	add	r30, r6
   1761a:	f7 1d       	adc	r31, r7
   1761c:	25 91       	lpm	r18, Z+
   1761e:	34 91       	lpm	r19, Z
   17620:	f6 01       	movw	r30, r12
   17622:	ef 50       	subi	r30, 0x0F	; 15
   17624:	fe 4f       	sbci	r31, 0xFE	; 254
   17626:	e6 0d       	add	r30, r6
   17628:	f7 1d       	adc	r31, r7
   1762a:	45 91       	lpm	r20, Z+
   1762c:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:861
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
   1762e:	f6 01       	movw	r30, r12
   17630:	e1 51       	subi	r30, 0x11	; 17
   17632:	fe 4f       	sbci	r31, 0xFE	; 254
   17634:	e6 0d       	add	r30, r6
   17636:	f7 1d       	adc	r31, r7
   17638:	65 91       	lpm	r22, Z+
   1763a:	74 91       	lpm	r23, Z
   1763c:	f6 01       	movw	r30, r12
   1763e:	e3 51       	subi	r30, 0x13	; 19
   17640:	fe 4f       	sbci	r31, 0xFE	; 254
   17642:	e6 0d       	add	r30, r6
   17644:	f7 1d       	adc	r31, r7
   17646:	85 91       	lpm	r24, Z+
   17648:	94 91       	lpm	r25, Z
   1764a:	c6 54       	subi	r28, 0x46	; 70
   1764c:	df 4f       	sbci	r29, 0xFF	; 255
   1764e:	e8 81       	ld	r30, Y
   17650:	f9 81       	ldd	r31, Y+1	; 0x01
   17652:	ca 5b       	subi	r28, 0xBA	; 186
   17654:	d0 40       	sbci	r29, 0x00	; 0
   17656:	6e 0f       	add	r22, r30
   17658:	7f 1f       	adc	r23, r31
   1765a:	c8 54       	subi	r28, 0x48	; 72
   1765c:	df 4f       	sbci	r29, 0xFF	; 255
   1765e:	e8 81       	ld	r30, Y
   17660:	f9 81       	ldd	r31, Y+1	; 0x01
   17662:	c8 5b       	subi	r28, 0xB8	; 184
   17664:	d0 40       	sbci	r29, 0x00	; 0
   17666:	8e 0f       	add	r24, r30
   17668:	9f 1f       	adc	r25, r31
   1766a:	0e 94 4d 98 	call	0x1309a	; 0x1309a <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:865
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    }
    if (click_x > 0 && click_y > 0)
   1766e:	ca 53       	subi	r28, 0x3A	; 58
   17670:	df 4f       	sbci	r29, 0xFF	; 255
   17672:	28 81       	ld	r18, Y
   17674:	39 81       	ldd	r19, Y+1	; 0x01
   17676:	c6 5c       	subi	r28, 0xC6	; 198
   17678:	d0 40       	sbci	r29, 0x00	; 0
   1767a:	23 2b       	or	r18, r19
   1767c:	09 f4       	brne	.+2      	; 0x17680 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xd08>
   1767e:	5e c0       	rjmp	.+188    	; 0x1773c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xdc4>
   17680:	c8 53       	subi	r28, 0x38	; 56
   17682:	df 4f       	sbci	r29, 0xFF	; 255
   17684:	48 81       	ld	r20, Y
   17686:	59 81       	ldd	r21, Y+1	; 0x01
   17688:	c8 5c       	subi	r28, 0xC8	; 200
   1768a:	d0 40       	sbci	r29, 0x00	; 0
   1768c:	45 2b       	or	r20, r21
   1768e:	09 f4       	brne	.+2      	; 0x17692 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xd1a>
   17690:	55 c0       	rjmp	.+170    	; 0x1773c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xdc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:866
      if (button_click_touch(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), click_x, click_y) == true)
   17692:	f6 01       	movw	r30, r12
   17694:	ed 50       	subi	r30, 0x0D	; 13
   17696:	fe 4f       	sbci	r31, 0xFE	; 254
   17698:	e6 0d       	add	r30, r6
   1769a:	f7 1d       	adc	r31, r7
   1769c:	25 91       	lpm	r18, Z+
   1769e:	34 91       	lpm	r19, Z
   176a0:	f6 01       	movw	r30, r12
   176a2:	ef 50       	subi	r30, 0x0F	; 15
   176a4:	fe 4f       	sbci	r31, 0xFE	; 254
   176a6:	e6 0d       	add	r30, r6
   176a8:	f7 1d       	adc	r31, r7
   176aa:	45 91       	lpm	r20, Z+
   176ac:	54 91       	lpm	r21, Z
   176ae:	f6 01       	movw	r30, r12
   176b0:	e1 51       	subi	r30, 0x11	; 17
   176b2:	fe 4f       	sbci	r31, 0xFE	; 254
   176b4:	e6 0d       	add	r30, r6
   176b6:	f7 1d       	adc	r31, r7
   176b8:	65 91       	lpm	r22, Z+
   176ba:	74 91       	lpm	r23, Z
   176bc:	f6 01       	movw	r30, r12
   176be:	e3 51       	subi	r30, 0x13	; 19
   176c0:	fe 4f       	sbci	r31, 0xFE	; 254
   176c2:	e6 0d       	add	r30, r6
   176c4:	f7 1d       	adc	r31, r7
   176c6:	85 91       	lpm	r24, Z+
   176c8:	94 91       	lpm	r25, Z
   176ca:	c6 54       	subi	r28, 0x46	; 70
   176cc:	df 4f       	sbci	r29, 0xFF	; 255
   176ce:	e8 81       	ld	r30, Y
   176d0:	f9 81       	ldd	r31, Y+1	; 0x01
   176d2:	ca 5b       	subi	r28, 0xBA	; 186
   176d4:	d0 40       	sbci	r29, 0x00	; 0
   176d6:	6e 0f       	add	r22, r30
   176d8:	7f 1f       	adc	r23, r31
   176da:	c8 53       	subi	r28, 0x38	; 56
   176dc:	df 4f       	sbci	r29, 0xFF	; 255
   176de:	e8 80       	ld	r14, Y
   176e0:	f9 80       	ldd	r15, Y+1	; 0x01
   176e2:	c8 5c       	subi	r28, 0xC8	; 200
   176e4:	d0 40       	sbci	r29, 0x00	; 0
   176e6:	ca 53       	subi	r28, 0x3A	; 58
   176e8:	df 4f       	sbci	r29, 0xFF	; 255
   176ea:	08 81       	ld	r16, Y
   176ec:	19 81       	ldd	r17, Y+1	; 0x01
   176ee:	c6 5c       	subi	r28, 0xC6	; 198
   176f0:	d0 40       	sbci	r29, 0x00	; 0
   176f2:	c8 54       	subi	r28, 0x48	; 72
   176f4:	df 4f       	sbci	r29, 0xFF	; 255
   176f6:	e8 81       	ld	r30, Y
   176f8:	f9 81       	ldd	r31, Y+1	; 0x01
   176fa:	c8 5b       	subi	r28, 0xB8	; 184
   176fc:	d0 40       	sbci	r29, 0x00	; 0
   176fe:	8e 0f       	add	r24, r30
   17700:	9f 1f       	adc	r25, r31
   17702:	0e 94 32 98 	call	0x13064	; 0x13064 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   17706:	18 2f       	mov	r17, r24
   17708:	88 23       	and	r24, r24
   1770a:	c1 f0       	breq	.+48     	; 0x1773c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xdc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:868
      {
        fntargs =  (fptr_args*)pgm_read_word(&symbol_button_1->onclick);
   1770c:	f6 01       	movw	r30, r12
   1770e:	e9 50       	subi	r30, 0x09	; 9
   17710:	fe 4f       	sbci	r31, 0xFE	; 254
   17712:	e6 0d       	add	r30, r6
   17714:	f7 1d       	adc	r31, r7
   17716:	25 91       	lpm	r18, Z+
   17718:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:869
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
   1771a:	f5 01       	movw	r30, r10
   1771c:	84 91       	lpm	r24, Z
   1771e:	cf 54       	subi	r28, 0x4F	; 79
   17720:	df 4f       	sbci	r29, 0xFF	; 255
   17722:	68 81       	ld	r22, Y
   17724:	c1 5b       	subi	r28, 0xB1	; 177
   17726:	d0 40       	sbci	r29, 0x00	; 0
   17728:	70 e0       	ldi	r23, 0x00	; 0
   1772a:	45 2d       	mov	r20, r5
   1772c:	90 e0       	ldi	r25, 0x00	; 0
   1772e:	f9 01       	movw	r30, r18
   17730:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:870
        ret = true;
   17732:	c4 53       	subi	r28, 0x34	; 52
   17734:	df 4f       	sbci	r29, 0xFF	; 255
   17736:	18 83       	st	Y, r17
   17738:	cc 5c       	subi	r28, 0xCC	; 204
   1773a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:852
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
   1773c:	53 94       	inc	r5
   1773e:	25 cf       	rjmp	.-438    	; 0x1758a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:873
        fntargs =  (fptr_args*)pgm_read_word(&symbol_button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   17740:	c4 53       	subi	r28, 0x34	; 52
   17742:	df 4f       	sbci	r29, 0xFF	; 255
   17744:	f8 81       	ld	r31, Y
   17746:	cc 5c       	subi	r28, 0xCC	; 204
   17748:	d0 40       	sbci	r29, 0x00	; 0
   1774a:	f1 11       	cpse	r31, r1
   1774c:	0c 94 b5 c6 	jmp	0x18d6a	; 0x18d6a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:875
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
   17750:	51 2c       	mov	r5, r1
   17752:	93 01       	movw	r18, r6
   17754:	2b 52       	subi	r18, 0x2B	; 43
   17756:	3d 4f       	sbci	r19, 0xFD	; 253
   17758:	cc 52       	subi	r28, 0x2C	; 44
   1775a:	df 4f       	sbci	r29, 0xFF	; 255
   1775c:	39 83       	std	Y+1, r19	; 0x01
   1775e:	28 83       	st	Y, r18
   17760:	c4 5d       	subi	r28, 0xD4	; 212
   17762:	d0 40       	sbci	r29, 0x00	; 0
   17764:	cc 52       	subi	r28, 0x2C	; 44
   17766:	df 4f       	sbci	r29, 0xFF	; 255
   17768:	e8 81       	ld	r30, Y
   1776a:	f9 81       	ldd	r31, Y+1	; 0x01
   1776c:	c4 5d       	subi	r28, 0xD4	; 212
   1776e:	d0 40       	sbci	r29, 0x00	; 0
   17770:	84 91       	lpm	r24, Z
   17772:	58 16       	cp	r5, r24
   17774:	08 f0       	brcs	.+2      	; 0x17778 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xe00>
   17776:	60 c3       	rjmp	.+1728   	; 0x17e38 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x14c0>
   17778:	f7 e1       	ldi	r31, 0x17	; 23
   1777a:	5f 9e       	mul	r5, r31
   1777c:	60 01       	movw	r12, r0
   1777e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:878
  {
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
   17780:	f6 01       	movw	r30, r12
   17782:	ee 57       	subi	r30, 0x7E	; 126
   17784:	fd 4f       	sbci	r31, 0xFD	; 253
   17786:	e6 0d       	add	r30, r6
   17788:	f7 1d       	adc	r31, r7
   1778a:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:879
    if (enable_redraw(rdr, redraw_class) == true)
   1778c:	c1 53       	subi	r28, 0x31	; 49
   1778e:	df 4f       	sbci	r29, 0xFF	; 255
   17790:	68 81       	ld	r22, Y
   17792:	cf 5c       	subi	r28, 0xCF	; 207
   17794:	d0 40       	sbci	r29, 0x00	; 0
   17796:	0e 94 ad aa 	call	0x1555a	; 0x1555a <enable_redraw(unsigned char, unsigned char)>
   1779a:	88 23       	and	r24, r24
   1779c:	09 f4       	brne	.+2      	; 0x177a0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xe28>
   1779e:	98 c1       	rjmp	.+816    	; 0x17ad0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1158>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:881
    {
      loop_i = 0;
   177a0:	ce 54       	subi	r28, 0x4E	; 78
   177a2:	df 4f       	sbci	r29, 0xFF	; 255
   177a4:	18 82       	st	Y, r1
   177a6:	c2 5b       	subi	r28, 0xB2	; 178
   177a8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:884
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
   177aa:	f6 01       	movw	r30, r12
   177ac:	e0 58       	subi	r30, 0x80	; 128
   177ae:	fd 4f       	sbci	r31, 0xFD	; 253
   177b0:	e6 0d       	add	r30, r6
   177b2:	f7 1d       	adc	r31, r7
   177b4:	25 91       	lpm	r18, Z+
   177b6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:885
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
   177b8:	c6 01       	movw	r24, r12
   177ba:	85 58       	subi	r24, 0x85	; 133
   177bc:	9d 4f       	sbci	r25, 0xFD	; 253
   177be:	a3 01       	movw	r20, r6
   177c0:	48 0f       	add	r20, r24
   177c2:	59 1f       	adc	r21, r25
   177c4:	ca 54       	subi	r28, 0x4A	; 74
   177c6:	df 4f       	sbci	r29, 0xFF	; 255
   177c8:	59 83       	std	Y+1, r21	; 0x01
   177ca:	48 83       	st	Y, r20
   177cc:	c6 5b       	subi	r28, 0xB6	; 182
   177ce:	d0 40       	sbci	r29, 0x00	; 0
   177d0:	fa 01       	movw	r30, r20
   177d2:	84 91       	lpm	r24, Z
   177d4:	cf 54       	subi	r28, 0x4F	; 79
   177d6:	df 4f       	sbci	r29, 0xFF	; 255
   177d8:	68 81       	ld	r22, Y
   177da:	c1 5b       	subi	r28, 0xB1	; 177
   177dc:	d0 40       	sbci	r29, 0x00	; 0
   177de:	70 e0       	ldi	r23, 0x00	; 0
   177e0:	40 e0       	ldi	r20, 0x00	; 0
   177e2:	90 e0       	ldi	r25, 0x00	; 0
   177e4:	f9 01       	movw	r30, r18
   177e6:	19 95       	eicall
   177e8:	cd 54       	subi	r28, 0x4D	; 77
   177ea:	df 4f       	sbci	r29, 0xFF	; 255
   177ec:	88 83       	st	Y, r24
   177ee:	c3 5b       	subi	r28, 0xB3	; 179
   177f0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:886
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
   177f2:	f6 01       	movw	r30, r12
   177f4:	e4 58       	subi	r30, 0x84	; 132
   177f6:	fd 4f       	sbci	r31, 0xFD	; 253
   177f8:	e6 0d       	add	r30, r6
   177fa:	f7 1d       	adc	r31, r7
   177fc:	25 91       	lpm	r18, Z+
   177fe:	34 91       	lpm	r19, Z
   17800:	ce 52       	subi	r28, 0x2E	; 46
   17802:	df 4f       	sbci	r29, 0xFF	; 255
   17804:	39 83       	std	Y+1, r19	; 0x01
   17806:	28 83       	st	Y, r18
   17808:	c2 5d       	subi	r28, 0xD2	; 210
   1780a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:889
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   1780c:	56 01       	movw	r10, r12
   1780e:	34 e9       	ldi	r19, 0x94	; 148
   17810:	a3 1a       	sub	r10, r19
   17812:	3d ef       	ldi	r19, 0xFD	; 253
   17814:	b3 0a       	sbc	r11, r19
   17816:	a6 0c       	add	r10, r6
   17818:	b7 1c       	adc	r11, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:890
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   1781a:	46 01       	movw	r8, r12
   1781c:	42 e9       	ldi	r20, 0x92	; 146
   1781e:	84 1a       	sub	r8, r20
   17820:	4d ef       	ldi	r20, 0xFD	; 253
   17822:	94 0a       	sbc	r9, r20
   17824:	86 0c       	add	r8, r6
   17826:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:891
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   17828:	16 01       	movw	r2, r12
   1782a:	59 e8       	ldi	r21, 0x89	; 137
   1782c:	25 1a       	sub	r2, r21
   1782e:	5d ef       	ldi	r21, 0xFD	; 253
   17830:	35 0a       	sbc	r3, r21
   17832:	26 0c       	add	r2, r6
   17834:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:893
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   17836:	c6 01       	movw	r24, r12
   17838:	8a 58       	subi	r24, 0x8A	; 138
   1783a:	9d 4f       	sbci	r25, 0xFD	; 253
   1783c:	b3 01       	movw	r22, r6
   1783e:	68 0f       	add	r22, r24
   17840:	79 1f       	adc	r23, r25
   17842:	c4 54       	subi	r28, 0x44	; 68
   17844:	df 4f       	sbci	r29, 0xFF	; 255
   17846:	79 83       	std	Y+1, r23	; 0x01
   17848:	68 83       	st	Y, r22
   1784a:	cc 5b       	subi	r28, 0xBC	; 188
   1784c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:898
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   1784e:	01 97       	sbiw	r24, 0x01	; 1
   17850:	f3 01       	movw	r30, r6
   17852:	e8 0f       	add	r30, r24
   17854:	f9 1f       	adc	r31, r25
   17856:	c2 54       	subi	r28, 0x42	; 66
   17858:	df 4f       	sbci	r29, 0xFF	; 255
   1785a:	f9 83       	std	Y+1, r31	; 0x01
   1785c:	e8 83       	st	Y, r30
   1785e:	ce 5b       	subi	r28, 0xBE	; 190
   17860:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:906
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   17862:	03 96       	adiw	r24, 0x03	; 3
   17864:	93 01       	movw	r18, r6
   17866:	28 0f       	add	r18, r24
   17868:	39 1f       	adc	r19, r25
   1786a:	cc 53       	subi	r28, 0x3C	; 60
   1786c:	df 4f       	sbci	r29, 0xFF	; 255
   1786e:	39 83       	std	Y+1, r19	; 0x01
   17870:	28 83       	st	Y, r18
   17872:	c4 5c       	subi	r28, 0xC4	; 196
   17874:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:914
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_symbol_1->args), str1, str2);
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
   17876:	04 97       	sbiw	r24, 0x04	; 4
   17878:	a3 01       	movw	r20, r6
   1787a:	48 0f       	add	r20, r24
   1787c:	59 1f       	adc	r21, r25
   1787e:	c6 53       	subi	r28, 0x36	; 54
   17880:	df 4f       	sbci	r29, 0xFF	; 255
   17882:	59 83       	std	Y+1, r21	; 0x01
   17884:	48 83       	st	Y, r20
   17886:	ca 5c       	subi	r28, 0xCA	; 202
   17888:	d0 40       	sbci	r29, 0x00	; 0
   1788a:	02 97       	sbiw	r24, 0x02	; 2
   1788c:	b3 01       	movw	r22, r6
   1788e:	68 0f       	add	r22, r24
   17890:	79 1f       	adc	r23, r25
   17892:	c3 53       	subi	r28, 0x33	; 51
   17894:	df 4f       	sbci	r29, 0xFF	; 255
   17896:	79 83       	std	Y+1, r23	; 0x01
   17898:	68 83       	st	Y, r22
   1789a:	cd 5c       	subi	r28, 0xCD	; 205
   1789c:	d0 40       	sbci	r29, 0x00	; 0
   1789e:	02 97       	sbiw	r24, 0x02	; 2
   178a0:	f3 01       	movw	r30, r6
   178a2:	e8 0f       	add	r30, r24
   178a4:	f9 1f       	adc	r31, r25
   178a6:	c0 53       	subi	r28, 0x30	; 48
   178a8:	df 4f       	sbci	r29, 0xFF	; 255
   178aa:	f9 83       	std	Y+1, r31	; 0x01
   178ac:	e8 83       	st	Y, r30
   178ae:	c0 5d       	subi	r28, 0xD0	; 208
   178b0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:883
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
   178b2:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:882
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
   178b4:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:887
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
   178b6:	ce 54       	subi	r28, 0x4E	; 78
   178b8:	df 4f       	sbci	r29, 0xFF	; 255
   178ba:	88 81       	ld	r24, Y
   178bc:	c2 5b       	subi	r28, 0xB2	; 178
   178be:	d0 40       	sbci	r29, 0x00	; 0
   178c0:	cd 54       	subi	r28, 0x4D	; 77
   178c2:	df 4f       	sbci	r29, 0xFF	; 255
   178c4:	98 81       	ld	r25, Y
   178c6:	c3 5b       	subi	r28, 0xB3	; 179
   178c8:	d0 40       	sbci	r29, 0x00	; 0
   178ca:	89 17       	cp	r24, r25
   178cc:	08 f0       	brcs	.+2      	; 0x178d0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xf58>
   178ce:	00 c1       	rjmp	.+512    	; 0x17ad0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1158>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:889
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   178d0:	f5 01       	movw	r30, r10
   178d2:	45 91       	lpm	r20, Z+
   178d4:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:890
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   178d6:	f4 01       	movw	r30, r8
   178d8:	25 91       	lpm	r18, Z+
   178da:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:891
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   178dc:	f1 01       	movw	r30, r2
   178de:	94 91       	lpm	r25, Z
   178e0:	99 23       	and	r25, r25
   178e2:	09 f4       	brne	.+2      	; 0x178e6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xf6e>
   178e4:	b7 c0       	rjmp	.+366    	; 0x17a54 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x10dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:890
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   178e6:	c6 54       	subi	r28, 0x46	; 70
   178e8:	df 4f       	sbci	r29, 0xFF	; 255
   178ea:	68 81       	ld	r22, Y
   178ec:	79 81       	ldd	r23, Y+1	; 0x01
   178ee:	ca 5b       	subi	r28, 0xBA	; 186
   178f0:	d0 40       	sbci	r29, 0x00	; 0
   178f2:	62 0f       	add	r22, r18
   178f4:	73 1f       	adc	r23, r19
   178f6:	ce 53       	subi	r28, 0x3E	; 62
   178f8:	df 4f       	sbci	r29, 0xFF	; 255
   178fa:	79 83       	std	Y+1, r23	; 0x01
   178fc:	68 83       	st	Y, r22
   178fe:	c2 5c       	subi	r28, 0xC2	; 194
   17900:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:896
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
   17902:	f1 01       	movw	r30, r2
   17904:	94 91       	lpm	r25, Z
   17906:	91 30       	cpi	r25, 0x01	; 1
   17908:	09 f4       	brne	.+2      	; 0x1790c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xf94>
   1790a:	c3 c0       	rjmp	.+390    	; 0x17a92 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x111a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:889
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   1790c:	c8 54       	subi	r28, 0x48	; 72
   1790e:	df 4f       	sbci	r29, 0xFF	; 255
   17910:	28 81       	ld	r18, Y
   17912:	39 81       	ldd	r19, Y+1	; 0x01
   17914:	c8 5b       	subi	r28, 0xB8	; 184
   17916:	d0 40       	sbci	r29, 0x00	; 0
   17918:	24 0f       	add	r18, r20
   1791a:	35 1f       	adc	r19, r21
   1791c:	c0 54       	subi	r28, 0x40	; 64
   1791e:	df 4f       	sbci	r29, 0xFF	; 255
   17920:	39 83       	std	Y+1, r19	; 0x01
   17922:	28 83       	st	Y, r18
   17924:	c0 5c       	subi	r28, 0xC0	; 192
   17926:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:901
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
   17928:	f1 01       	movw	r30, r2
   1792a:	94 91       	lpm	r25, Z
   1792c:	92 30       	cpi	r25, 0x02	; 2
   1792e:	09 f0       	breq	.+2      	; 0x17932 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xfba>
   17930:	46 c0       	rjmp	.+140    	; 0x179be <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1046>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:903
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   17932:	f5 01       	movw	r30, r10
   17934:	25 91       	lpm	r18, Z+
   17936:	34 91       	lpm	r19, Z
   17938:	c2 54       	subi	r28, 0x42	; 66
   1793a:	df 4f       	sbci	r29, 0xFF	; 255
   1793c:	e8 81       	ld	r30, Y
   1793e:	f9 81       	ldd	r31, Y+1	; 0x01
   17940:	ce 5b       	subi	r28, 0xBE	; 190
   17942:	d0 40       	sbci	r29, 0x00	; 0
   17944:	94 91       	lpm	r25, Z
   17946:	c8 54       	subi	r28, 0x48	; 72
   17948:	df 4f       	sbci	r29, 0xFF	; 255
   1794a:	48 81       	ld	r20, Y
   1794c:	59 81       	ldd	r21, Y+1	; 0x01
   1794e:	c8 5b       	subi	r28, 0xB8	; 184
   17950:	d0 40       	sbci	r29, 0x00	; 0
   17952:	24 0f       	add	r18, r20
   17954:	35 1f       	adc	r19, r21
   17956:	b9 01       	movw	r22, r18
   17958:	9f 9d       	mul	r25, r15
   1795a:	60 0d       	add	r22, r0
   1795c:	71 1d       	adc	r23, r1
   1795e:	11 24       	eor	r1, r1
   17960:	c0 54       	subi	r28, 0x40	; 64
   17962:	df 4f       	sbci	r29, 0xFF	; 255
   17964:	79 83       	std	Y+1, r23	; 0x01
   17966:	68 83       	st	Y, r22
   17968:	c0 5c       	subi	r28, 0xC0	; 192
   1796a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:904
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
   1796c:	f4 01       	movw	r30, r8
   1796e:	25 91       	lpm	r18, Z+
   17970:	34 91       	lpm	r19, Z
   17972:	c4 54       	subi	r28, 0x44	; 68
   17974:	df 4f       	sbci	r29, 0xFF	; 255
   17976:	e8 81       	ld	r30, Y
   17978:	f9 81       	ldd	r31, Y+1	; 0x01
   1797a:	cc 5b       	subi	r28, 0xBC	; 188
   1797c:	d0 40       	sbci	r29, 0x00	; 0
   1797e:	94 91       	lpm	r25, Z
   17980:	c6 54       	subi	r28, 0x46	; 70
   17982:	df 4f       	sbci	r29, 0xFF	; 255
   17984:	48 81       	ld	r20, Y
   17986:	59 81       	ldd	r21, Y+1	; 0x01
   17988:	ca 5b       	subi	r28, 0xBA	; 186
   1798a:	d0 40       	sbci	r29, 0x00	; 0
   1798c:	24 0f       	add	r18, r20
   1798e:	35 1f       	adc	r19, r21
   17990:	b9 01       	movw	r22, r18
   17992:	94 9d       	mul	r25, r4
   17994:	60 0d       	add	r22, r0
   17996:	71 1d       	adc	r23, r1
   17998:	11 24       	eor	r1, r1
   1799a:	ce 53       	subi	r28, 0x3E	; 62
   1799c:	df 4f       	sbci	r29, 0xFF	; 255
   1799e:	79 83       	std	Y+1, r23	; 0x01
   179a0:	68 83       	st	Y, r22
   179a2:	c2 5c       	subi	r28, 0xC2	; 194
   179a4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:905
          loop_t++;
   179a6:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:906
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   179a8:	cc 53       	subi	r28, 0x3C	; 60
   179aa:	df 4f       	sbci	r29, 0xFF	; 255
   179ac:	e8 81       	ld	r30, Y
   179ae:	f9 81       	ldd	r31, Y+1	; 0x01
   179b0:	c4 5c       	subi	r28, 0xC4	; 196
   179b2:	d0 40       	sbci	r29, 0x00	; 0
   179b4:	94 91       	lpm	r25, Z
   179b6:	f9 16       	cp	r15, r25
   179b8:	10 f0       	brcs	.+4      	; 0x179be <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1046>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:909
          {
            loop_t = 0;
            loop_r++;
   179ba:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:908
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
   179bc:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:912
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_symbol_1->args), str1, str2);
   179be:	ca 54       	subi	r28, 0x4A	; 74
   179c0:	df 4f       	sbci	r29, 0xFF	; 255
   179c2:	e8 81       	ld	r30, Y
   179c4:	f9 81       	ldd	r31, Y+1	; 0x01
   179c6:	c6 5b       	subi	r28, 0xB6	; 182
   179c8:	d0 40       	sbci	r29, 0x00	; 0
   179ca:	44 91       	lpm	r20, Z
   179cc:	8e 01       	movw	r16, r28
   179ce:	0f 57       	subi	r16, 0x7F	; 127
   179d0:	1f 4f       	sbci	r17, 0xFF	; 255
   179d2:	9e 01       	movw	r18, r28
   179d4:	2f 5f       	subi	r18, 0xFF	; 255
   179d6:	3f 4f       	sbci	r19, 0xFF	; 255
   179d8:	cf 54       	subi	r28, 0x4F	; 79
   179da:	df 4f       	sbci	r29, 0xFF	; 255
   179dc:	68 81       	ld	r22, Y
   179de:	c1 5b       	subi	r28, 0xB1	; 177
   179e0:	d0 40       	sbci	r29, 0x00	; 0
   179e2:	ce 52       	subi	r28, 0x2E	; 46
   179e4:	df 4f       	sbci	r29, 0xFF	; 255
   179e6:	e8 81       	ld	r30, Y
   179e8:	f9 81       	ldd	r31, Y+1	; 0x01
   179ea:	c2 5d       	subi	r28, 0xD2	; 210
   179ec:	d0 40       	sbci	r29, 0x00	; 0
   179ee:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:914
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
   179f0:	c6 53       	subi	r28, 0x36	; 54
   179f2:	df 4f       	sbci	r29, 0xFF	; 255
   179f4:	e8 81       	ld	r30, Y
   179f6:	f9 81       	ldd	r31, Y+1	; 0x01
   179f8:	ca 5c       	subi	r28, 0xCA	; 202
   179fa:	d0 40       	sbci	r29, 0x00	; 0
   179fc:	04 91       	lpm	r16, Z
   179fe:	c3 53       	subi	r28, 0x33	; 51
   17a00:	df 4f       	sbci	r29, 0xFF	; 255
   17a02:	e8 81       	ld	r30, Y
   17a04:	f9 81       	ldd	r31, Y+1	; 0x01
   17a06:	cd 5c       	subi	r28, 0xCD	; 205
   17a08:	d0 40       	sbci	r29, 0x00	; 0
   17a0a:	25 91       	lpm	r18, Z+
   17a0c:	34 91       	lpm	r19, Z
   17a0e:	c0 53       	subi	r28, 0x30	; 48
   17a10:	df 4f       	sbci	r29, 0xFF	; 255
   17a12:	e8 81       	ld	r30, Y
   17a14:	f9 81       	ldd	r31, Y+1	; 0x01
   17a16:	c0 5d       	subi	r28, 0xD0	; 208
   17a18:	d0 40       	sbci	r29, 0x00	; 0
   17a1a:	45 91       	lpm	r20, Z+
   17a1c:	54 91       	lpm	r21, Z
   17a1e:	e9 80       	ldd	r14, Y+1	; 0x01
   17a20:	ce 53       	subi	r28, 0x3E	; 62
   17a22:	df 4f       	sbci	r29, 0xFF	; 255
   17a24:	68 81       	ld	r22, Y
   17a26:	79 81       	ldd	r23, Y+1	; 0x01
   17a28:	c2 5c       	subi	r28, 0xC2	; 194
   17a2a:	d0 40       	sbci	r29, 0x00	; 0
   17a2c:	c0 54       	subi	r28, 0x40	; 64
   17a2e:	df 4f       	sbci	r29, 0xFF	; 255
   17a30:	88 81       	ld	r24, Y
   17a32:	99 81       	ldd	r25, Y+1	; 0x01
   17a34:	c0 5c       	subi	r28, 0xC0	; 192
   17a36:	d0 40       	sbci	r29, 0x00	; 0
   17a38:	0e 94 4d 98 	call	0x1309a	; 0x1309a <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:915
        loop_i++;
   17a3c:	ce 54       	subi	r28, 0x4E	; 78
   17a3e:	df 4f       	sbci	r29, 0xFF	; 255
   17a40:	88 81       	ld	r24, Y
   17a42:	c2 5b       	subi	r28, 0xB2	; 178
   17a44:	d0 40       	sbci	r29, 0x00	; 0
   17a46:	8f 5f       	subi	r24, 0xFF	; 255
   17a48:	ce 54       	subi	r28, 0x4E	; 78
   17a4a:	df 4f       	sbci	r29, 0xFF	; 255
   17a4c:	88 83       	st	Y, r24
   17a4e:	c2 5b       	subi	r28, 0xB2	; 178
   17a50:	d0 40       	sbci	r29, 0x00	; 0
   17a52:	31 cf       	rjmp	.-414    	; 0x178b6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xf3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:893
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   17a54:	f4 01       	movw	r30, r8
   17a56:	25 91       	lpm	r18, Z+
   17a58:	34 91       	lpm	r19, Z
   17a5a:	c4 54       	subi	r28, 0x44	; 68
   17a5c:	df 4f       	sbci	r29, 0xFF	; 255
   17a5e:	e8 81       	ld	r30, Y
   17a60:	f9 81       	ldd	r31, Y+1	; 0x01
   17a62:	cc 5b       	subi	r28, 0xBC	; 188
   17a64:	d0 40       	sbci	r29, 0x00	; 0
   17a66:	94 91       	lpm	r25, Z
   17a68:	c6 54       	subi	r28, 0x46	; 70
   17a6a:	df 4f       	sbci	r29, 0xFF	; 255
   17a6c:	68 81       	ld	r22, Y
   17a6e:	79 81       	ldd	r23, Y+1	; 0x01
   17a70:	ca 5b       	subi	r28, 0xBA	; 186
   17a72:	d0 40       	sbci	r29, 0x00	; 0
   17a74:	26 0f       	add	r18, r22
   17a76:	37 1f       	adc	r19, r23
   17a78:	f9 01       	movw	r30, r18
   17a7a:	9f 9d       	mul	r25, r15
   17a7c:	e0 0d       	add	r30, r0
   17a7e:	f1 1d       	adc	r31, r1
   17a80:	11 24       	eor	r1, r1
   17a82:	ce 53       	subi	r28, 0x3E	; 62
   17a84:	df 4f       	sbci	r29, 0xFF	; 255
   17a86:	f9 83       	std	Y+1, r31	; 0x01
   17a88:	e8 83       	st	Y, r30
   17a8a:	c2 5c       	subi	r28, 0xC2	; 194
   17a8c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:894
          loop_t++;
   17a8e:	f3 94       	inc	r15
   17a90:	38 cf       	rjmp	.-400    	; 0x17902 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xf8a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:898
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   17a92:	f5 01       	movw	r30, r10
   17a94:	25 91       	lpm	r18, Z+
   17a96:	34 91       	lpm	r19, Z
   17a98:	c2 54       	subi	r28, 0x42	; 66
   17a9a:	df 4f       	sbci	r29, 0xFF	; 255
   17a9c:	e8 81       	ld	r30, Y
   17a9e:	f9 81       	ldd	r31, Y+1	; 0x01
   17aa0:	ce 5b       	subi	r28, 0xBE	; 190
   17aa2:	d0 40       	sbci	r29, 0x00	; 0
   17aa4:	94 91       	lpm	r25, Z
   17aa6:	c8 54       	subi	r28, 0x48	; 72
   17aa8:	df 4f       	sbci	r29, 0xFF	; 255
   17aaa:	48 81       	ld	r20, Y
   17aac:	59 81       	ldd	r21, Y+1	; 0x01
   17aae:	c8 5b       	subi	r28, 0xB8	; 184
   17ab0:	d0 40       	sbci	r29, 0x00	; 0
   17ab2:	24 0f       	add	r18, r20
   17ab4:	35 1f       	adc	r19, r21
   17ab6:	b9 01       	movw	r22, r18
   17ab8:	9f 9d       	mul	r25, r15
   17aba:	60 0d       	add	r22, r0
   17abc:	71 1d       	adc	r23, r1
   17abe:	11 24       	eor	r1, r1
   17ac0:	c0 54       	subi	r28, 0x40	; 64
   17ac2:	df 4f       	sbci	r29, 0xFF	; 255
   17ac4:	79 83       	std	Y+1, r23	; 0x01
   17ac6:	68 83       	st	Y, r22
   17ac8:	c0 5c       	subi	r28, 0xC0	; 192
   17aca:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:899
          loop_t++;
   17acc:	f3 94       	inc	r15
   17ace:	2c cf       	rjmp	.-424    	; 0x17928 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xfb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:918
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
   17ad0:	ca 53       	subi	r28, 0x3A	; 58
   17ad2:	df 4f       	sbci	r29, 0xFF	; 255
   17ad4:	28 81       	ld	r18, Y
   17ad6:	39 81       	ldd	r19, Y+1	; 0x01
   17ad8:	c6 5c       	subi	r28, 0xC6	; 198
   17ada:	d0 40       	sbci	r29, 0x00	; 0
   17adc:	23 2b       	or	r18, r19
   17ade:	09 f4       	brne	.+2      	; 0x17ae2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x116a>
   17ae0:	69 c1       	rjmp	.+722    	; 0x17db4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x143c>
   17ae2:	c8 53       	subi	r28, 0x38	; 56
   17ae4:	df 4f       	sbci	r29, 0xFF	; 255
   17ae6:	48 81       	ld	r20, Y
   17ae8:	59 81       	ldd	r21, Y+1	; 0x01
   17aea:	c8 5c       	subi	r28, 0xC8	; 200
   17aec:	d0 40       	sbci	r29, 0x00	; 0
   17aee:	45 2b       	or	r20, r21
   17af0:	09 f4       	brne	.+2      	; 0x17af4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x117c>
   17af2:	60 c1       	rjmp	.+704    	; 0x17db4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x143c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:920
    {
      loop_i = 0;
   17af4:	ce 54       	subi	r28, 0x4E	; 78
   17af6:	df 4f       	sbci	r29, 0xFF	; 255
   17af8:	18 82       	st	Y, r1
   17afa:	c2 5b       	subi	r28, 0xB2	; 178
   17afc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:923
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
   17afe:	f6 01       	movw	r30, r12
   17b00:	e0 58       	subi	r30, 0x80	; 128
   17b02:	fd 4f       	sbci	r31, 0xFD	; 253
   17b04:	e6 0d       	add	r30, r6
   17b06:	f7 1d       	adc	r31, r7
   17b08:	25 91       	lpm	r18, Z+
   17b0a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:924
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
   17b0c:	c6 01       	movw	r24, r12
   17b0e:	85 58       	subi	r24, 0x85	; 133
   17b10:	9d 4f       	sbci	r25, 0xFD	; 253
   17b12:	b3 01       	movw	r22, r6
   17b14:	68 0f       	add	r22, r24
   17b16:	79 1f       	adc	r23, r25
   17b18:	c4 54       	subi	r28, 0x44	; 68
   17b1a:	df 4f       	sbci	r29, 0xFF	; 255
   17b1c:	79 83       	std	Y+1, r23	; 0x01
   17b1e:	68 83       	st	Y, r22
   17b20:	cc 5b       	subi	r28, 0xBC	; 188
   17b22:	d0 40       	sbci	r29, 0x00	; 0
   17b24:	fb 01       	movw	r30, r22
   17b26:	84 91       	lpm	r24, Z
   17b28:	cf 54       	subi	r28, 0x4F	; 79
   17b2a:	df 4f       	sbci	r29, 0xFF	; 255
   17b2c:	68 81       	ld	r22, Y
   17b2e:	c1 5b       	subi	r28, 0xB1	; 177
   17b30:	d0 40       	sbci	r29, 0x00	; 0
   17b32:	70 e0       	ldi	r23, 0x00	; 0
   17b34:	40 e0       	ldi	r20, 0x00	; 0
   17b36:	90 e0       	ldi	r25, 0x00	; 0
   17b38:	f9 01       	movw	r30, r18
   17b3a:	19 95       	eicall
   17b3c:	c2 54       	subi	r28, 0x42	; 66
   17b3e:	df 4f       	sbci	r29, 0xFF	; 255
   17b40:	88 83       	st	Y, r24
   17b42:	ce 5b       	subi	r28, 0xBE	; 190
   17b44:	d0 40       	sbci	r29, 0x00	; 0
   17b46:	cd 54       	subi	r28, 0x4D	; 77
   17b48:	df 4f       	sbci	r29, 0xFF	; 255
   17b4a:	88 83       	st	Y, r24
   17b4c:	c3 5b       	subi	r28, 0xB3	; 179
   17b4e:	d0 40       	sbci	r29, 0x00	; 0
   17b50:	ce 54       	subi	r28, 0x4E	; 78
   17b52:	df 4f       	sbci	r29, 0xFF	; 255
   17b54:	a8 80       	ld	r10, Y
   17b56:	c2 5b       	subi	r28, 0xB2	; 178
   17b58:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:927
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   17b5a:	16 01       	movw	r2, r12
   17b5c:	f4 e9       	ldi	r31, 0x94	; 148
   17b5e:	2f 1a       	sub	r2, r31
   17b60:	fd ef       	ldi	r31, 0xFD	; 253
   17b62:	3f 0a       	sbc	r3, r31
   17b64:	26 0c       	add	r2, r6
   17b66:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:928
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   17b68:	46 01       	movw	r8, r12
   17b6a:	22 e9       	ldi	r18, 0x92	; 146
   17b6c:	82 1a       	sub	r8, r18
   17b6e:	2d ef       	ldi	r18, 0xFD	; 253
   17b70:	92 0a       	sbc	r9, r18
   17b72:	86 0c       	add	r8, r6
   17b74:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:929
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   17b76:	c6 01       	movw	r24, r12
   17b78:	89 58       	subi	r24, 0x89	; 137
   17b7a:	9d 4f       	sbci	r25, 0xFD	; 253
   17b7c:	a3 01       	movw	r20, r6
   17b7e:	48 0f       	add	r20, r24
   17b80:	59 1f       	adc	r21, r25
   17b82:	ca 54       	subi	r28, 0x4A	; 74
   17b84:	df 4f       	sbci	r29, 0xFF	; 255
   17b86:	59 83       	std	Y+1, r21	; 0x01
   17b88:	48 83       	st	Y, r20
   17b8a:	c6 5b       	subi	r28, 0xB6	; 182
   17b8c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:931
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   17b8e:	01 97       	sbiw	r24, 0x01	; 1
   17b90:	b3 01       	movw	r22, r6
   17b92:	68 0f       	add	r22, r24
   17b94:	79 1f       	adc	r23, r25
   17b96:	cc 53       	subi	r28, 0x3C	; 60
   17b98:	df 4f       	sbci	r29, 0xFF	; 255
   17b9a:	79 83       	std	Y+1, r23	; 0x01
   17b9c:	68 83       	st	Y, r22
   17b9e:	c4 5c       	subi	r28, 0xC4	; 196
   17ba0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:936
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   17ba2:	01 97       	sbiw	r24, 0x01	; 1
   17ba4:	f3 01       	movw	r30, r6
   17ba6:	e8 0f       	add	r30, r24
   17ba8:	f9 1f       	adc	r31, r25
   17baa:	c6 53       	subi	r28, 0x36	; 54
   17bac:	df 4f       	sbci	r29, 0xFF	; 255
   17bae:	f9 83       	std	Y+1, r31	; 0x01
   17bb0:	e8 83       	st	Y, r30
   17bb2:	ca 5c       	subi	r28, 0xCA	; 202
   17bb4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:944
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   17bb6:	03 96       	adiw	r24, 0x03	; 3
   17bb8:	93 01       	movw	r18, r6
   17bba:	28 0f       	add	r18, r24
   17bbc:	39 1f       	adc	r19, r25
   17bbe:	c3 53       	subi	r28, 0x33	; 51
   17bc0:	df 4f       	sbci	r29, 0xFF	; 255
   17bc2:	39 83       	std	Y+1, r19	; 0x01
   17bc4:	28 83       	st	Y, r18
   17bc6:	cd 5c       	subi	r28, 0xCD	; 205
   17bc8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:950
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
   17bca:	06 97       	sbiw	r24, 0x06	; 6
   17bcc:	a3 01       	movw	r20, r6
   17bce:	48 0f       	add	r20, r24
   17bd0:	59 1f       	adc	r21, r25
   17bd2:	c0 53       	subi	r28, 0x30	; 48
   17bd4:	df 4f       	sbci	r29, 0xFF	; 255
   17bd6:	59 83       	std	Y+1, r21	; 0x01
   17bd8:	48 83       	st	Y, r20
   17bda:	c0 5d       	subi	r28, 0xD0	; 208
   17bdc:	d0 40       	sbci	r29, 0x00	; 0
   17bde:	02 97       	sbiw	r24, 0x02	; 2
   17be0:	b3 01       	movw	r22, r6
   17be2:	68 0f       	add	r22, r24
   17be4:	79 1f       	adc	r23, r25
   17be6:	ce 52       	subi	r28, 0x2E	; 46
   17be8:	df 4f       	sbci	r29, 0xFF	; 255
   17bea:	79 83       	std	Y+1, r23	; 0x01
   17bec:	68 83       	st	Y, r22
   17bee:	c2 5d       	subi	r28, 0xD2	; 210
   17bf0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:922
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
   17bf2:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:921
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
   17bf4:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:925
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
   17bf6:	c2 54       	subi	r28, 0x42	; 66
   17bf8:	df 4f       	sbci	r29, 0xFF	; 255
   17bfa:	78 81       	ld	r23, Y
   17bfc:	ce 5b       	subi	r28, 0xBE	; 190
   17bfe:	d0 40       	sbci	r29, 0x00	; 0
   17c00:	a7 16       	cp	r10, r23
   17c02:	08 f0       	brcs	.+2      	; 0x17c06 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x128e>
   17c04:	d7 c0       	rjmp	.+430    	; 0x17db4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x143c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:927
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   17c06:	f1 01       	movw	r30, r2
   17c08:	25 91       	lpm	r18, Z+
   17c0a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:928
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   17c0c:	f4 01       	movw	r30, r8
   17c0e:	85 91       	lpm	r24, Z+
   17c10:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:929
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   17c12:	ca 54       	subi	r28, 0x4A	; 74
   17c14:	df 4f       	sbci	r29, 0xFF	; 255
   17c16:	e8 81       	ld	r30, Y
   17c18:	f9 81       	ldd	r31, Y+1	; 0x01
   17c1a:	c6 5b       	subi	r28, 0xB6	; 182
   17c1c:	d0 40       	sbci	r29, 0x00	; 0
   17c1e:	44 91       	lpm	r20, Z
   17c20:	44 23       	and	r20, r20
   17c22:	09 f4       	brne	.+2      	; 0x17c26 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x12ae>
   17c24:	cb c0       	rjmp	.+406    	; 0x17dbc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1444>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:928
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   17c26:	c6 54       	subi	r28, 0x46	; 70
   17c28:	df 4f       	sbci	r29, 0xFF	; 255
   17c2a:	48 81       	ld	r20, Y
   17c2c:	59 81       	ldd	r21, Y+1	; 0x01
   17c2e:	ca 5b       	subi	r28, 0xBA	; 186
   17c30:	d0 40       	sbci	r29, 0x00	; 0
   17c32:	48 0f       	add	r20, r24
   17c34:	59 1f       	adc	r21, r25
   17c36:	ce 53       	subi	r28, 0x3E	; 62
   17c38:	df 4f       	sbci	r29, 0xFF	; 255
   17c3a:	59 83       	std	Y+1, r21	; 0x01
   17c3c:	48 83       	st	Y, r20
   17c3e:	c2 5c       	subi	r28, 0xC2	; 194
   17c40:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:934
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
   17c42:	ca 54       	subi	r28, 0x4A	; 74
   17c44:	df 4f       	sbci	r29, 0xFF	; 255
   17c46:	e8 81       	ld	r30, Y
   17c48:	f9 81       	ldd	r31, Y+1	; 0x01
   17c4a:	c6 5b       	subi	r28, 0xB6	; 182
   17c4c:	d0 40       	sbci	r29, 0x00	; 0
   17c4e:	84 91       	lpm	r24, Z
   17c50:	81 30       	cpi	r24, 0x01	; 1
   17c52:	09 f4       	brne	.+2      	; 0x17c56 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x12de>
   17c54:	d2 c0       	rjmp	.+420    	; 0x17dfa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1482>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:927
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   17c56:	c8 54       	subi	r28, 0x48	; 72
   17c58:	df 4f       	sbci	r29, 0xFF	; 255
   17c5a:	48 81       	ld	r20, Y
   17c5c:	59 81       	ldd	r21, Y+1	; 0x01
   17c5e:	c8 5b       	subi	r28, 0xB8	; 184
   17c60:	d0 40       	sbci	r29, 0x00	; 0
   17c62:	42 0f       	add	r20, r18
   17c64:	53 1f       	adc	r21, r19
   17c66:	c0 54       	subi	r28, 0x40	; 64
   17c68:	df 4f       	sbci	r29, 0xFF	; 255
   17c6a:	59 83       	std	Y+1, r21	; 0x01
   17c6c:	48 83       	st	Y, r20
   17c6e:	c0 5c       	subi	r28, 0xC0	; 192
   17c70:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:939
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
   17c72:	ca 54       	subi	r28, 0x4A	; 74
   17c74:	df 4f       	sbci	r29, 0xFF	; 255
   17c76:	e8 81       	ld	r30, Y
   17c78:	f9 81       	ldd	r31, Y+1	; 0x01
   17c7a:	c6 5b       	subi	r28, 0xB6	; 182
   17c7c:	d0 40       	sbci	r29, 0x00	; 0
   17c7e:	84 91       	lpm	r24, Z
   17c80:	82 30       	cpi	r24, 0x02	; 2
   17c82:	09 f0       	breq	.+2      	; 0x17c86 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x130e>
   17c84:	46 c0       	rjmp	.+140    	; 0x17d12 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x139a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:941
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   17c86:	f1 01       	movw	r30, r2
   17c88:	85 91       	lpm	r24, Z+
   17c8a:	94 91       	lpm	r25, Z
   17c8c:	c6 53       	subi	r28, 0x36	; 54
   17c8e:	df 4f       	sbci	r29, 0xFF	; 255
   17c90:	e8 81       	ld	r30, Y
   17c92:	f9 81       	ldd	r31, Y+1	; 0x01
   17c94:	ca 5c       	subi	r28, 0xCA	; 202
   17c96:	d0 40       	sbci	r29, 0x00	; 0
   17c98:	24 91       	lpm	r18, Z
   17c9a:	c8 54       	subi	r28, 0x48	; 72
   17c9c:	df 4f       	sbci	r29, 0xFF	; 255
   17c9e:	48 81       	ld	r20, Y
   17ca0:	59 81       	ldd	r21, Y+1	; 0x01
   17ca2:	c8 5b       	subi	r28, 0xB8	; 184
   17ca4:	d0 40       	sbci	r29, 0x00	; 0
   17ca6:	84 0f       	add	r24, r20
   17ca8:	95 1f       	adc	r25, r21
   17caa:	bc 01       	movw	r22, r24
   17cac:	2b 9d       	mul	r18, r11
   17cae:	60 0d       	add	r22, r0
   17cb0:	71 1d       	adc	r23, r1
   17cb2:	11 24       	eor	r1, r1
   17cb4:	c0 54       	subi	r28, 0x40	; 64
   17cb6:	df 4f       	sbci	r29, 0xFF	; 255
   17cb8:	79 83       	std	Y+1, r23	; 0x01
   17cba:	68 83       	st	Y, r22
   17cbc:	c0 5c       	subi	r28, 0xC0	; 192
   17cbe:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:942
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
   17cc0:	f4 01       	movw	r30, r8
   17cc2:	85 91       	lpm	r24, Z+
   17cc4:	94 91       	lpm	r25, Z
   17cc6:	cc 53       	subi	r28, 0x3C	; 60
   17cc8:	df 4f       	sbci	r29, 0xFF	; 255
   17cca:	e8 81       	ld	r30, Y
   17ccc:	f9 81       	ldd	r31, Y+1	; 0x01
   17cce:	c4 5c       	subi	r28, 0xC4	; 196
   17cd0:	d0 40       	sbci	r29, 0x00	; 0
   17cd2:	24 91       	lpm	r18, Z
   17cd4:	c6 54       	subi	r28, 0x46	; 70
   17cd6:	df 4f       	sbci	r29, 0xFF	; 255
   17cd8:	48 81       	ld	r20, Y
   17cda:	59 81       	ldd	r21, Y+1	; 0x01
   17cdc:	ca 5b       	subi	r28, 0xBA	; 186
   17cde:	d0 40       	sbci	r29, 0x00	; 0
   17ce0:	84 0f       	add	r24, r20
   17ce2:	95 1f       	adc	r25, r21
   17ce4:	bc 01       	movw	r22, r24
   17ce6:	24 9d       	mul	r18, r4
   17ce8:	60 0d       	add	r22, r0
   17cea:	71 1d       	adc	r23, r1
   17cec:	11 24       	eor	r1, r1
   17cee:	ce 53       	subi	r28, 0x3E	; 62
   17cf0:	df 4f       	sbci	r29, 0xFF	; 255
   17cf2:	79 83       	std	Y+1, r23	; 0x01
   17cf4:	68 83       	st	Y, r22
   17cf6:	c2 5c       	subi	r28, 0xC2	; 194
   17cf8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:943
          loop_t++;
   17cfa:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:944
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   17cfc:	c3 53       	subi	r28, 0x33	; 51
   17cfe:	df 4f       	sbci	r29, 0xFF	; 255
   17d00:	e8 81       	ld	r30, Y
   17d02:	f9 81       	ldd	r31, Y+1	; 0x01
   17d04:	cd 5c       	subi	r28, 0xCD	; 205
   17d06:	d0 40       	sbci	r29, 0x00	; 0
   17d08:	84 91       	lpm	r24, Z
   17d0a:	b8 16       	cp	r11, r24
   17d0c:	10 f0       	brcs	.+4      	; 0x17d12 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x139a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:947
          {
            loop_t = 0;
            loop_r++;
   17d0e:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:946
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
   17d10:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:950
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
   17d12:	c0 53       	subi	r28, 0x30	; 48
   17d14:	df 4f       	sbci	r29, 0xFF	; 255
   17d16:	e8 81       	ld	r30, Y
   17d18:	f9 81       	ldd	r31, Y+1	; 0x01
   17d1a:	c0 5d       	subi	r28, 0xD0	; 208
   17d1c:	d0 40       	sbci	r29, 0x00	; 0
   17d1e:	25 91       	lpm	r18, Z+
   17d20:	34 91       	lpm	r19, Z
   17d22:	ce 52       	subi	r28, 0x2E	; 46
   17d24:	df 4f       	sbci	r29, 0xFF	; 255
   17d26:	e8 81       	ld	r30, Y
   17d28:	f9 81       	ldd	r31, Y+1	; 0x01
   17d2a:	c2 5d       	subi	r28, 0xD2	; 210
   17d2c:	d0 40       	sbci	r29, 0x00	; 0
   17d2e:	45 91       	lpm	r20, Z+
   17d30:	54 91       	lpm	r21, Z
   17d32:	c8 53       	subi	r28, 0x38	; 56
   17d34:	df 4f       	sbci	r29, 0xFF	; 255
   17d36:	e8 80       	ld	r14, Y
   17d38:	f9 80       	ldd	r15, Y+1	; 0x01
   17d3a:	c8 5c       	subi	r28, 0xC8	; 200
   17d3c:	d0 40       	sbci	r29, 0x00	; 0
   17d3e:	ca 53       	subi	r28, 0x3A	; 58
   17d40:	df 4f       	sbci	r29, 0xFF	; 255
   17d42:	08 81       	ld	r16, Y
   17d44:	19 81       	ldd	r17, Y+1	; 0x01
   17d46:	c6 5c       	subi	r28, 0xC6	; 198
   17d48:	d0 40       	sbci	r29, 0x00	; 0
   17d4a:	ce 53       	subi	r28, 0x3E	; 62
   17d4c:	df 4f       	sbci	r29, 0xFF	; 255
   17d4e:	68 81       	ld	r22, Y
   17d50:	79 81       	ldd	r23, Y+1	; 0x01
   17d52:	c2 5c       	subi	r28, 0xC2	; 194
   17d54:	d0 40       	sbci	r29, 0x00	; 0
   17d56:	c0 54       	subi	r28, 0x40	; 64
   17d58:	df 4f       	sbci	r29, 0xFF	; 255
   17d5a:	88 81       	ld	r24, Y
   17d5c:	99 81       	ldd	r25, Y+1	; 0x01
   17d5e:	c0 5c       	subi	r28, 0xC0	; 192
   17d60:	d0 40       	sbci	r29, 0x00	; 0
   17d62:	0e 94 32 98 	call	0x13064	; 0x13064 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   17d66:	18 2f       	mov	r17, r24
   17d68:	81 e0       	ldi	r24, 0x01	; 1
   17d6a:	8a 0d       	add	r24, r10
   17d6c:	11 23       	and	r17, r17
   17d6e:	21 f1       	breq	.+72     	; 0x17db8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1440>
   17d70:	ce 54       	subi	r28, 0x4E	; 78
   17d72:	df 4f       	sbci	r29, 0xFF	; 255
   17d74:	a8 82       	st	Y, r10
   17d76:	c2 5b       	subi	r28, 0xB2	; 178
   17d78:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:952
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_symbol_1->dyn_symbol_onclick);
   17d7a:	f6 01       	movw	r30, r12
   17d7c:	e2 58       	subi	r30, 0x82	; 130
   17d7e:	fd 4f       	sbci	r31, 0xFD	; 253
   17d80:	e6 0d       	add	r30, r6
   17d82:	f7 1d       	adc	r31, r7
   17d84:	25 91       	lpm	r18, Z+
   17d86:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:953
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
   17d88:	c4 54       	subi	r28, 0x44	; 68
   17d8a:	df 4f       	sbci	r29, 0xFF	; 255
   17d8c:	e8 81       	ld	r30, Y
   17d8e:	f9 81       	ldd	r31, Y+1	; 0x01
   17d90:	cc 5b       	subi	r28, 0xBC	; 188
   17d92:	d0 40       	sbci	r29, 0x00	; 0
   17d94:	84 91       	lpm	r24, Z
   17d96:	cf 54       	subi	r28, 0x4F	; 79
   17d98:	df 4f       	sbci	r29, 0xFF	; 255
   17d9a:	68 81       	ld	r22, Y
   17d9c:	c1 5b       	subi	r28, 0xB1	; 177
   17d9e:	d0 40       	sbci	r29, 0x00	; 0
   17da0:	70 e0       	ldi	r23, 0x00	; 0
   17da2:	4a 2d       	mov	r20, r10
   17da4:	90 e0       	ldi	r25, 0x00	; 0
   17da6:	f9 01       	movw	r30, r18
   17da8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:954
          ret = true;
   17daa:	c4 53       	subi	r28, 0x34	; 52
   17dac:	df 4f       	sbci	r29, 0xFF	; 255
   17dae:	18 83       	st	Y, r17
   17db0:	cc 5c       	subi	r28, 0xCC	; 204
   17db2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:875
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
   17db4:	53 94       	inc	r5
   17db6:	d6 cc       	rjmp	.-1620   	; 0x17764 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xdec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:950
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
   17db8:	a8 2e       	mov	r10, r24
   17dba:	1d cf       	rjmp	.-454    	; 0x17bf6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x127e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:931
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   17dbc:	f4 01       	movw	r30, r8
   17dbe:	85 91       	lpm	r24, Z+
   17dc0:	94 91       	lpm	r25, Z
   17dc2:	cc 53       	subi	r28, 0x3C	; 60
   17dc4:	df 4f       	sbci	r29, 0xFF	; 255
   17dc6:	e8 81       	ld	r30, Y
   17dc8:	f9 81       	ldd	r31, Y+1	; 0x01
   17dca:	c4 5c       	subi	r28, 0xC4	; 196
   17dcc:	d0 40       	sbci	r29, 0x00	; 0
   17dce:	44 91       	lpm	r20, Z
   17dd0:	c6 54       	subi	r28, 0x46	; 70
   17dd2:	df 4f       	sbci	r29, 0xFF	; 255
   17dd4:	68 81       	ld	r22, Y
   17dd6:	79 81       	ldd	r23, Y+1	; 0x01
   17dd8:	ca 5b       	subi	r28, 0xBA	; 186
   17dda:	d0 40       	sbci	r29, 0x00	; 0
   17ddc:	86 0f       	add	r24, r22
   17dde:	97 1f       	adc	r25, r23
   17de0:	fc 01       	movw	r30, r24
   17de2:	4b 9d       	mul	r20, r11
   17de4:	e0 0d       	add	r30, r0
   17de6:	f1 1d       	adc	r31, r1
   17de8:	11 24       	eor	r1, r1
   17dea:	ce 53       	subi	r28, 0x3E	; 62
   17dec:	df 4f       	sbci	r29, 0xFF	; 255
   17dee:	f9 83       	std	Y+1, r31	; 0x01
   17df0:	e8 83       	st	Y, r30
   17df2:	c2 5c       	subi	r28, 0xC2	; 194
   17df4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:932
          loop_t++;
   17df6:	b3 94       	inc	r11
   17df8:	24 cf       	rjmp	.-440    	; 0x17c42 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x12ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:936
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   17dfa:	f1 01       	movw	r30, r2
   17dfc:	85 91       	lpm	r24, Z+
   17dfe:	94 91       	lpm	r25, Z
   17e00:	c6 53       	subi	r28, 0x36	; 54
   17e02:	df 4f       	sbci	r29, 0xFF	; 255
   17e04:	e8 81       	ld	r30, Y
   17e06:	f9 81       	ldd	r31, Y+1	; 0x01
   17e08:	ca 5c       	subi	r28, 0xCA	; 202
   17e0a:	d0 40       	sbci	r29, 0x00	; 0
   17e0c:	24 91       	lpm	r18, Z
   17e0e:	c8 54       	subi	r28, 0x48	; 72
   17e10:	df 4f       	sbci	r29, 0xFF	; 255
   17e12:	48 81       	ld	r20, Y
   17e14:	59 81       	ldd	r21, Y+1	; 0x01
   17e16:	c8 5b       	subi	r28, 0xB8	; 184
   17e18:	d0 40       	sbci	r29, 0x00	; 0
   17e1a:	84 0f       	add	r24, r20
   17e1c:	95 1f       	adc	r25, r21
   17e1e:	bc 01       	movw	r22, r24
   17e20:	2b 9d       	mul	r18, r11
   17e22:	60 0d       	add	r22, r0
   17e24:	71 1d       	adc	r23, r1
   17e26:	11 24       	eor	r1, r1
   17e28:	c0 54       	subi	r28, 0x40	; 64
   17e2a:	df 4f       	sbci	r29, 0xFF	; 255
   17e2c:	79 83       	std	Y+1, r23	; 0x01
   17e2e:	68 83       	st	Y, r22
   17e30:	c0 5c       	subi	r28, 0xC0	; 192
   17e32:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:937
          loop_t++;
   17e34:	b3 94       	inc	r11
   17e36:	1d cf       	rjmp	.-454    	; 0x17c72 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x12fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:961
        }
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
   17e38:	c4 53       	subi	r28, 0x34	; 52
   17e3a:	df 4f       	sbci	r29, 0xFF	; 255
   17e3c:	f8 81       	ld	r31, Y
   17e3e:	cc 5c       	subi	r28, 0xCC	; 204
   17e40:	d0 40       	sbci	r29, 0x00	; 0
   17e42:	f1 11       	cpse	r31, r1
   17e44:	0c 94 b5 c6 	jmp	0x18d6a	; 0x18d6a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:963
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
   17e48:	91 2c       	mov	r9, r1
   17e4a:	93 01       	movw	r18, r6
   17e4c:	2d 52       	subi	r18, 0x2D	; 45
   17e4e:	3d 4f       	sbci	r19, 0xFD	; 253
   17e50:	cc 52       	subi	r28, 0x2C	; 44
   17e52:	df 4f       	sbci	r29, 0xFF	; 255
   17e54:	39 83       	std	Y+1, r19	; 0x01
   17e56:	28 83       	st	Y, r18
   17e58:	c4 5d       	subi	r28, 0xD4	; 212
   17e5a:	d0 40       	sbci	r29, 0x00	; 0
   17e5c:	cc 52       	subi	r28, 0x2C	; 44
   17e5e:	df 4f       	sbci	r29, 0xFF	; 255
   17e60:	e8 81       	ld	r30, Y
   17e62:	f9 81       	ldd	r31, Y+1	; 0x01
   17e64:	c4 5d       	subi	r28, 0xD4	; 212
   17e66:	d0 40       	sbci	r29, 0x00	; 0
   17e68:	84 91       	lpm	r24, Z
   17e6a:	98 16       	cp	r9, r24
   17e6c:	08 f0       	brcs	.+2      	; 0x17e70 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x14f8>
   17e6e:	14 c3       	rjmp	.+1576   	; 0x18498 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1b20>
   17e70:	f7 e1       	ldi	r31, 0x17	; 23
   17e72:	9f 9e       	mul	r9, r31
   17e74:	20 01       	movw	r4, r0
   17e76:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:966
  {
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
   17e78:	f2 01       	movw	r30, r4
   17e7a:	ec 52       	subi	r30, 0x2C	; 44
   17e7c:	fe 4f       	sbci	r31, 0xFE	; 254
   17e7e:	e6 0d       	add	r30, r6
   17e80:	f7 1d       	adc	r31, r7
   17e82:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:967
    if (enable_redraw(rdr, redraw_class) == true)
   17e84:	c1 53       	subi	r28, 0x31	; 49
   17e86:	df 4f       	sbci	r29, 0xFF	; 255
   17e88:	68 81       	ld	r22, Y
   17e8a:	cf 5c       	subi	r28, 0xCF	; 207
   17e8c:	d0 40       	sbci	r29, 0x00	; 0
   17e8e:	0e 94 ad aa 	call	0x1555a	; 0x1555a <enable_redraw(unsigned char, unsigned char)>
   17e92:	88 23       	and	r24, r24
   17e94:	09 f4       	brne	.+2      	; 0x17e98 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1520>
   17e96:	83 c1       	rjmp	.+774    	; 0x1819e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1826>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:969
    {
      loop_i = 0;
   17e98:	ce 54       	subi	r28, 0x4E	; 78
   17e9a:	df 4f       	sbci	r29, 0xFF	; 255
   17e9c:	18 82       	st	Y, r1
   17e9e:	c2 5b       	subi	r28, 0xB2	; 178
   17ea0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:971
      loop_t = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_button_1->function_for_max_items);
   17ea2:	f2 01       	movw	r30, r4
   17ea4:	ee 52       	subi	r30, 0x2E	; 46
   17ea6:	fe 4f       	sbci	r31, 0xFE	; 254
   17ea8:	e6 0d       	add	r30, r6
   17eaa:	f7 1d       	adc	r31, r7
   17eac:	25 91       	lpm	r18, Z+
   17eae:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:972
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
   17eb0:	c2 01       	movw	r24, r4
   17eb2:	83 53       	subi	r24, 0x33	; 51
   17eb4:	9e 4f       	sbci	r25, 0xFE	; 254
   17eb6:	a3 01       	movw	r20, r6
   17eb8:	48 0f       	add	r20, r24
   17eba:	59 1f       	adc	r21, r25
   17ebc:	ca 54       	subi	r28, 0x4A	; 74
   17ebe:	df 4f       	sbci	r29, 0xFF	; 255
   17ec0:	59 83       	std	Y+1, r21	; 0x01
   17ec2:	48 83       	st	Y, r20
   17ec4:	c6 5b       	subi	r28, 0xB6	; 182
   17ec6:	d0 40       	sbci	r29, 0x00	; 0
   17ec8:	fa 01       	movw	r30, r20
   17eca:	84 91       	lpm	r24, Z
   17ecc:	cf 54       	subi	r28, 0x4F	; 79
   17ece:	df 4f       	sbci	r29, 0xFF	; 255
   17ed0:	68 81       	ld	r22, Y
   17ed2:	c1 5b       	subi	r28, 0xB1	; 177
   17ed4:	d0 40       	sbci	r29, 0x00	; 0
   17ed6:	70 e0       	ldi	r23, 0x00	; 0
   17ed8:	40 e0       	ldi	r20, 0x00	; 0
   17eda:	90 e0       	ldi	r25, 0x00	; 0
   17edc:	f9 01       	movw	r30, r18
   17ede:	19 95       	eicall
   17ee0:	cd 54       	subi	r28, 0x4D	; 77
   17ee2:	df 4f       	sbci	r29, 0xFF	; 255
   17ee4:	88 83       	st	Y, r24
   17ee6:	c3 5b       	subi	r28, 0xB3	; 179
   17ee8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:973
      gss = (ret_string_fptr*)pgm_read_word(&dyn_button_1->get_status_string);
   17eea:	f2 01       	movw	r30, r4
   17eec:	e2 53       	subi	r30, 0x32	; 50
   17eee:	fe 4f       	sbci	r31, 0xFE	; 254
   17ef0:	e6 0d       	add	r30, r6
   17ef2:	f7 1d       	adc	r31, r7
   17ef4:	25 91       	lpm	r18, Z+
   17ef6:	34 91       	lpm	r19, Z
   17ef8:	ca 52       	subi	r28, 0x2A	; 42
   17efa:	df 4f       	sbci	r29, 0xFF	; 255
   17efc:	39 83       	std	Y+1, r19	; 0x01
   17efe:	28 83       	st	Y, r18
   17f00:	c6 5d       	subi	r28, 0xD6	; 214
   17f02:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:975

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
   17f04:	f2 01       	movw	r30, r4
   17f06:	e4 53       	subi	r30, 0x34	; 52
   17f08:	fe 4f       	sbci	r31, 0xFE	; 254
   17f0a:	e6 0d       	add	r30, r6
   17f0c:	f7 1d       	adc	r31, r7
   17f0e:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:976
      if (slider_active != MENU_SLIDER_OFF)
   17f10:	4f 3f       	cpi	r20, 0xFF	; 255
   17f12:	b9 f0       	breq	.+46     	; 0x17f42 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x15ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:977
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
   17f14:	f2 01       	movw	r30, r4
   17f16:	e6 53       	subi	r30, 0x36	; 54
   17f18:	fe 4f       	sbci	r31, 0xFE	; 254
   17f1a:	e6 0d       	add	r30, r6
   17f1c:	f7 1d       	adc	r31, r7
   17f1e:	24 91       	lpm	r18, Z
   17f20:	f2 01       	movw	r30, r4
   17f22:	e5 53       	subi	r30, 0x35	; 53
   17f24:	fe 4f       	sbci	r31, 0xFE	; 254
   17f26:	e6 0d       	add	r30, r6
   17f28:	f7 1d       	adc	r31, r7
   17f2a:	e4 91       	lpm	r30, Z
   17f2c:	2e 9f       	mul	r18, r30
   17f2e:	20 2d       	mov	r18, r0
   17f30:	11 24       	eor	r1, r1
   17f32:	be 01       	movw	r22, r28
   17f34:	6d 54       	subi	r22, 0x4D	; 77
   17f36:	7f 4f       	sbci	r23, 0xFF	; 255
   17f38:	ce 01       	movw	r24, r28
   17f3a:	8e 54       	subi	r24, 0x4E	; 78
   17f3c:	9f 4f       	sbci	r25, 0xFF	; 255
   17f3e:	0e 94 c9 9a 	call	0x13592	; 0x13592 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:980
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   17f42:	c2 01       	movw	r24, r4
   17f44:	82 54       	subi	r24, 0x42	; 66
   17f46:	9e 4f       	sbci	r25, 0xFE	; 254
   17f48:	a3 01       	movw	r20, r6
   17f4a:	48 0f       	add	r20, r24
   17f4c:	59 1f       	adc	r21, r25
   17f4e:	c4 54       	subi	r28, 0x44	; 68
   17f50:	df 4f       	sbci	r29, 0xFF	; 255
   17f52:	59 83       	std	Y+1, r21	; 0x01
   17f54:	48 83       	st	Y, r20
   17f56:	cc 5b       	subi	r28, 0xBC	; 188
   17f58:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:981
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   17f5a:	12 01       	movw	r2, r4
   17f5c:	50 e4       	ldi	r21, 0x40	; 64
   17f5e:	25 1a       	sub	r2, r21
   17f60:	5e ef       	ldi	r21, 0xFE	; 254
   17f62:	35 0a       	sbc	r3, r21
   17f64:	26 0c       	add	r2, r6
   17f66:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:982
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   17f68:	0b 96       	adiw	r24, 0x0b	; 11
   17f6a:	b3 01       	movw	r22, r6
   17f6c:	68 0f       	add	r22, r24
   17f6e:	79 1f       	adc	r23, r25
   17f70:	c2 54       	subi	r28, 0x42	; 66
   17f72:	df 4f       	sbci	r29, 0xFF	; 255
   17f74:	79 83       	std	Y+1, r23	; 0x01
   17f76:	68 83       	st	Y, r22
   17f78:	ce 5b       	subi	r28, 0xBE	; 190
   17f7a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:983
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   17f7c:	01 97       	sbiw	r24, 0x01	; 1
   17f7e:	f3 01       	movw	r30, r6
   17f80:	e8 0f       	add	r30, r24
   17f82:	f9 1f       	adc	r31, r25
   17f84:	c6 53       	subi	r28, 0x36	; 54
   17f86:	df 4f       	sbci	r29, 0xFF	; 255
   17f88:	f9 83       	std	Y+1, r31	; 0x01
   17f8a:	e8 83       	st	Y, r30
   17f8c:	ca 5c       	subi	r28, 0xCA	; 202
   17f8e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:985
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   17f90:	01 97       	sbiw	r24, 0x01	; 1
   17f92:	93 01       	movw	r18, r6
   17f94:	28 0f       	add	r18, r24
   17f96:	39 1f       	adc	r19, r25
   17f98:	c3 53       	subi	r28, 0x33	; 51
   17f9a:	df 4f       	sbci	r29, 0xFF	; 255
   17f9c:	39 83       	std	Y+1, r19	; 0x01
   17f9e:	28 83       	st	Y, r18
   17fa0:	cd 5c       	subi	r28, 0xCD	; 205
   17fa2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:987
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_button_1->args) , str1, str2);
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
   17fa4:	01 97       	sbiw	r24, 0x01	; 1
   17fa6:	a3 01       	movw	r20, r6
   17fa8:	48 0f       	add	r20, r24
   17faa:	59 1f       	adc	r21, r25
   17fac:	cc 53       	subi	r28, 0x3C	; 60
   17fae:	df 4f       	sbci	r29, 0xFF	; 255
   17fb0:	59 83       	std	Y+1, r21	; 0x01
   17fb2:	48 83       	st	Y, r20
   17fb4:	c4 5c       	subi	r28, 0xC4	; 196
   17fb6:	d0 40       	sbci	r29, 0x00	; 0
   17fb8:	02 97       	sbiw	r24, 0x02	; 2
   17fba:	b3 01       	movw	r22, r6
   17fbc:	68 0f       	add	r22, r24
   17fbe:	79 1f       	adc	r23, r25
   17fc0:	c0 53       	subi	r28, 0x30	; 48
   17fc2:	df 4f       	sbci	r29, 0xFF	; 255
   17fc4:	79 83       	std	Y+1, r23	; 0x01
   17fc6:	68 83       	st	Y, r22
   17fc8:	c0 5d       	subi	r28, 0xD0	; 208
   17fca:	d0 40       	sbci	r29, 0x00	; 0
   17fcc:	02 97       	sbiw	r24, 0x02	; 2
   17fce:	f3 01       	movw	r30, r6
   17fd0:	e8 0f       	add	r30, r24
   17fd2:	f9 1f       	adc	r31, r25
   17fd4:	ce 52       	subi	r28, 0x2E	; 46
   17fd6:	df 4f       	sbci	r29, 0xFF	; 255
   17fd8:	f9 83       	std	Y+1, r31	; 0x01
   17fda:	e8 83       	st	Y, r30
   17fdc:	c2 5d       	subi	r28, 0xD2	; 210
   17fde:	d0 40       	sbci	r29, 0x00	; 0
   17fe0:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:978
      gss = (ret_string_fptr*)pgm_read_word(&dyn_button_1->get_status_string);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
   17fe2:	ce 54       	subi	r28, 0x4E	; 78
   17fe4:	df 4f       	sbci	r29, 0xFF	; 255
   17fe6:	88 81       	ld	r24, Y
   17fe8:	c2 5b       	subi	r28, 0xB2	; 178
   17fea:	d0 40       	sbci	r29, 0x00	; 0
   17fec:	cd 54       	subi	r28, 0x4D	; 77
   17fee:	df 4f       	sbci	r29, 0xFF	; 255
   17ff0:	98 81       	ld	r25, Y
   17ff2:	c3 5b       	subi	r28, 0xB3	; 179
   17ff4:	d0 40       	sbci	r29, 0x00	; 0
   17ff6:	89 17       	cp	r24, r25
   17ff8:	08 f0       	brcs	.+2      	; 0x17ffc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1684>
   17ffa:	d1 c0       	rjmp	.+418    	; 0x1819e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1826>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:980
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   17ffc:	c4 54       	subi	r28, 0x44	; 68
   17ffe:	df 4f       	sbci	r29, 0xFF	; 255
   18000:	e8 81       	ld	r30, Y
   18002:	f9 81       	ldd	r31, Y+1	; 0x01
   18004:	cc 5b       	subi	r28, 0xBC	; 188
   18006:	d0 40       	sbci	r29, 0x00	; 0
   18008:	45 91       	lpm	r20, Z+
   1800a:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:981
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   1800c:	f1 01       	movw	r30, r2
   1800e:	25 91       	lpm	r18, Z+
   18010:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:982
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   18012:	c2 54       	subi	r28, 0x42	; 66
   18014:	df 4f       	sbci	r29, 0xFF	; 255
   18016:	e8 81       	ld	r30, Y
   18018:	f9 81       	ldd	r31, Y+1	; 0x01
   1801a:	ce 5b       	subi	r28, 0xBE	; 190
   1801c:	d0 40       	sbci	r29, 0x00	; 0
   1801e:	94 91       	lpm	r25, Z
   18020:	99 23       	and	r25, r25
   18022:	09 f4       	brne	.+2      	; 0x18026 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x16ae>
   18024:	7b c0       	rjmp	.+246    	; 0x1811c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x17a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:981
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   18026:	c6 54       	subi	r28, 0x46	; 70
   18028:	df 4f       	sbci	r29, 0xFF	; 255
   1802a:	68 81       	ld	r22, Y
   1802c:	79 81       	ldd	r23, Y+1	; 0x01
   1802e:	ca 5b       	subi	r28, 0xBA	; 186
   18030:	d0 40       	sbci	r29, 0x00	; 0
   18032:	62 0f       	add	r22, r18
   18034:	73 1f       	adc	r23, r19
   18036:	ce 53       	subi	r28, 0x3E	; 62
   18038:	df 4f       	sbci	r29, 0xFF	; 255
   1803a:	79 83       	std	Y+1, r23	; 0x01
   1803c:	68 83       	st	Y, r22
   1803e:	c2 5c       	subi	r28, 0xC2	; 194
   18040:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:984
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
   18042:	c2 54       	subi	r28, 0x42	; 66
   18044:	df 4f       	sbci	r29, 0xFF	; 255
   18046:	e8 81       	ld	r30, Y
   18048:	f9 81       	ldd	r31, Y+1	; 0x01
   1804a:	ce 5b       	subi	r28, 0xBE	; 190
   1804c:	d0 40       	sbci	r29, 0x00	; 0
   1804e:	94 91       	lpm	r25, Z
   18050:	91 30       	cpi	r25, 0x01	; 1
   18052:	09 f4       	brne	.+2      	; 0x18056 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x16de>
   18054:	81 c0       	rjmp	.+258    	; 0x18158 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x17e0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:980
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   18056:	c8 54       	subi	r28, 0x48	; 72
   18058:	df 4f       	sbci	r29, 0xFF	; 255
   1805a:	28 81       	ld	r18, Y
   1805c:	39 81       	ldd	r19, Y+1	; 0x01
   1805e:	c8 5b       	subi	r28, 0xB8	; 184
   18060:	d0 40       	sbci	r29, 0x00	; 0
   18062:	24 0f       	add	r18, r20
   18064:	35 1f       	adc	r19, r21
   18066:	c0 54       	subi	r28, 0x40	; 64
   18068:	df 4f       	sbci	r29, 0xFF	; 255
   1806a:	39 83       	std	Y+1, r19	; 0x01
   1806c:	28 83       	st	Y, r18
   1806e:	c0 5c       	subi	r28, 0xC0	; 192
   18070:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:986
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_button_1->args) , str1, str2);
   18072:	ca 54       	subi	r28, 0x4A	; 74
   18074:	df 4f       	sbci	r29, 0xFF	; 255
   18076:	e8 81       	ld	r30, Y
   18078:	f9 81       	ldd	r31, Y+1	; 0x01
   1807a:	c6 5b       	subi	r28, 0xB6	; 182
   1807c:	d0 40       	sbci	r29, 0x00	; 0
   1807e:	44 91       	lpm	r20, Z
   18080:	8e 01       	movw	r16, r28
   18082:	0f 57       	subi	r16, 0x7F	; 127
   18084:	1f 4f       	sbci	r17, 0xFF	; 255
   18086:	9e 01       	movw	r18, r28
   18088:	2f 5f       	subi	r18, 0xFF	; 255
   1808a:	3f 4f       	sbci	r19, 0xFF	; 255
   1808c:	cf 54       	subi	r28, 0x4F	; 79
   1808e:	df 4f       	sbci	r29, 0xFF	; 255
   18090:	68 81       	ld	r22, Y
   18092:	c1 5b       	subi	r28, 0xB1	; 177
   18094:	d0 40       	sbci	r29, 0x00	; 0
   18096:	ca 52       	subi	r28, 0x2A	; 42
   18098:	df 4f       	sbci	r29, 0xFF	; 255
   1809a:	e8 81       	ld	r30, Y
   1809c:	f9 81       	ldd	r31, Y+1	; 0x01
   1809e:	c6 5d       	subi	r28, 0xD6	; 214
   180a0:	d0 40       	sbci	r29, 0x00	; 0
   180a2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:987
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
   180a4:	cc 53       	subi	r28, 0x3C	; 60
   180a6:	df 4f       	sbci	r29, 0xFF	; 255
   180a8:	e8 81       	ld	r30, Y
   180aa:	f9 81       	ldd	r31, Y+1	; 0x01
   180ac:	c4 5c       	subi	r28, 0xC4	; 196
   180ae:	d0 40       	sbci	r29, 0x00	; 0
   180b0:	e4 90       	lpm	r14, Z
   180b2:	04 91       	lpm	r16, Z
   180b4:	c0 53       	subi	r28, 0x30	; 48
   180b6:	df 4f       	sbci	r29, 0xFF	; 255
   180b8:	e8 81       	ld	r30, Y
   180ba:	f9 81       	ldd	r31, Y+1	; 0x01
   180bc:	c0 5d       	subi	r28, 0xD0	; 208
   180be:	d0 40       	sbci	r29, 0x00	; 0
   180c0:	25 91       	lpm	r18, Z+
   180c2:	34 91       	lpm	r19, Z
   180c4:	ce 52       	subi	r28, 0x2E	; 46
   180c6:	df 4f       	sbci	r29, 0xFF	; 255
   180c8:	e8 81       	ld	r30, Y
   180ca:	f9 81       	ldd	r31, Y+1	; 0x01
   180cc:	c2 5d       	subi	r28, 0xD2	; 210
   180ce:	d0 40       	sbci	r29, 0x00	; 0
   180d0:	45 91       	lpm	r20, Z+
   180d2:	54 91       	lpm	r21, Z
   180d4:	88 24       	eor	r8, r8
   180d6:	83 94       	inc	r8
   180d8:	be 01       	movw	r22, r28
   180da:	6f 57       	subi	r22, 0x7F	; 127
   180dc:	7f 4f       	sbci	r23, 0xFF	; 255
   180de:	5b 01       	movw	r10, r22
   180e0:	ce 01       	movw	r24, r28
   180e2:	01 96       	adiw	r24, 0x01	; 1
   180e4:	6c 01       	movw	r12, r24
   180e6:	ce 53       	subi	r28, 0x3E	; 62
   180e8:	df 4f       	sbci	r29, 0xFF	; 255
   180ea:	68 81       	ld	r22, Y
   180ec:	79 81       	ldd	r23, Y+1	; 0x01
   180ee:	c2 5c       	subi	r28, 0xC2	; 194
   180f0:	d0 40       	sbci	r29, 0x00	; 0
   180f2:	c0 54       	subi	r28, 0x40	; 64
   180f4:	df 4f       	sbci	r29, 0xFF	; 255
   180f6:	88 81       	ld	r24, Y
   180f8:	99 81       	ldd	r25, Y+1	; 0x01
   180fa:	c0 5c       	subi	r28, 0xC0	; 192
   180fc:	d0 40       	sbci	r29, 0x00	; 0
   180fe:	0e 94 e2 99 	call	0x133c4	; 0x133c4 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:988
        loop_t++;
   18102:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:989
        loop_i++;
   18104:	ce 54       	subi	r28, 0x4E	; 78
   18106:	df 4f       	sbci	r29, 0xFF	; 255
   18108:	88 81       	ld	r24, Y
   1810a:	c2 5b       	subi	r28, 0xB2	; 178
   1810c:	d0 40       	sbci	r29, 0x00	; 0
   1810e:	8f 5f       	subi	r24, 0xFF	; 255
   18110:	ce 54       	subi	r28, 0x4E	; 78
   18112:	df 4f       	sbci	r29, 0xFF	; 255
   18114:	88 83       	st	Y, r24
   18116:	c2 5b       	subi	r28, 0xB2	; 178
   18118:	d0 40       	sbci	r29, 0x00	; 0
   1811a:	63 cf       	rjmp	.-314    	; 0x17fe2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x166a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:983
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   1811c:	f1 01       	movw	r30, r2
   1811e:	25 91       	lpm	r18, Z+
   18120:	34 91       	lpm	r19, Z
   18122:	c6 53       	subi	r28, 0x36	; 54
   18124:	df 4f       	sbci	r29, 0xFF	; 255
   18126:	e8 81       	ld	r30, Y
   18128:	f9 81       	ldd	r31, Y+1	; 0x01
   1812a:	ca 5c       	subi	r28, 0xCA	; 202
   1812c:	d0 40       	sbci	r29, 0x00	; 0
   1812e:	94 91       	lpm	r25, Z
   18130:	c6 54       	subi	r28, 0x46	; 70
   18132:	df 4f       	sbci	r29, 0xFF	; 255
   18134:	68 81       	ld	r22, Y
   18136:	79 81       	ldd	r23, Y+1	; 0x01
   18138:	ca 5b       	subi	r28, 0xBA	; 186
   1813a:	d0 40       	sbci	r29, 0x00	; 0
   1813c:	26 0f       	add	r18, r22
   1813e:	37 1f       	adc	r19, r23
   18140:	f9 01       	movw	r30, r18
   18142:	9f 9d       	mul	r25, r15
   18144:	e0 0d       	add	r30, r0
   18146:	f1 1d       	adc	r31, r1
   18148:	11 24       	eor	r1, r1
   1814a:	ce 53       	subi	r28, 0x3E	; 62
   1814c:	df 4f       	sbci	r29, 0xFF	; 255
   1814e:	f9 83       	std	Y+1, r31	; 0x01
   18150:	e8 83       	st	Y, r30
   18152:	c2 5c       	subi	r28, 0xC2	; 194
   18154:	d0 40       	sbci	r29, 0x00	; 0
   18156:	75 cf       	rjmp	.-278    	; 0x18042 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x16ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:985
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   18158:	c4 54       	subi	r28, 0x44	; 68
   1815a:	df 4f       	sbci	r29, 0xFF	; 255
   1815c:	e8 81       	ld	r30, Y
   1815e:	f9 81       	ldd	r31, Y+1	; 0x01
   18160:	cc 5b       	subi	r28, 0xBC	; 188
   18162:	d0 40       	sbci	r29, 0x00	; 0
   18164:	25 91       	lpm	r18, Z+
   18166:	34 91       	lpm	r19, Z
   18168:	c3 53       	subi	r28, 0x33	; 51
   1816a:	df 4f       	sbci	r29, 0xFF	; 255
   1816c:	e8 81       	ld	r30, Y
   1816e:	f9 81       	ldd	r31, Y+1	; 0x01
   18170:	cd 5c       	subi	r28, 0xCD	; 205
   18172:	d0 40       	sbci	r29, 0x00	; 0
   18174:	94 91       	lpm	r25, Z
   18176:	c8 54       	subi	r28, 0x48	; 72
   18178:	df 4f       	sbci	r29, 0xFF	; 255
   1817a:	48 81       	ld	r20, Y
   1817c:	59 81       	ldd	r21, Y+1	; 0x01
   1817e:	c8 5b       	subi	r28, 0xB8	; 184
   18180:	d0 40       	sbci	r29, 0x00	; 0
   18182:	24 0f       	add	r18, r20
   18184:	35 1f       	adc	r19, r21
   18186:	b9 01       	movw	r22, r18
   18188:	9f 9d       	mul	r25, r15
   1818a:	60 0d       	add	r22, r0
   1818c:	71 1d       	adc	r23, r1
   1818e:	11 24       	eor	r1, r1
   18190:	c0 54       	subi	r28, 0x40	; 64
   18192:	df 4f       	sbci	r29, 0xFF	; 255
   18194:	79 83       	std	Y+1, r23	; 0x01
   18196:	68 83       	st	Y, r22
   18198:	c0 5c       	subi	r28, 0xC0	; 192
   1819a:	d0 40       	sbci	r29, 0x00	; 0
   1819c:	6a cf       	rjmp	.-300    	; 0x18072 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x16fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:992
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
        loop_t++;
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
   1819e:	ca 53       	subi	r28, 0x3A	; 58
   181a0:	df 4f       	sbci	r29, 0xFF	; 255
   181a2:	e8 81       	ld	r30, Y
   181a4:	f9 81       	ldd	r31, Y+1	; 0x01
   181a6:	c6 5c       	subi	r28, 0xC6	; 198
   181a8:	d0 40       	sbci	r29, 0x00	; 0
   181aa:	ef 2b       	or	r30, r31
   181ac:	09 f4       	brne	.+2      	; 0x181b0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1838>
   181ae:	51 c1       	rjmp	.+674    	; 0x18452 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1ada>
   181b0:	c8 53       	subi	r28, 0x38	; 56
   181b2:	df 4f       	sbci	r29, 0xFF	; 255
   181b4:	28 81       	ld	r18, Y
   181b6:	39 81       	ldd	r19, Y+1	; 0x01
   181b8:	c8 5c       	subi	r28, 0xC8	; 200
   181ba:	d0 40       	sbci	r29, 0x00	; 0
   181bc:	23 2b       	or	r18, r19
   181be:	09 f4       	brne	.+2      	; 0x181c2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x184a>
   181c0:	48 c1       	rjmp	.+656    	; 0x18452 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1ada>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:994
    {
      loop_i = 0;
   181c2:	ce 54       	subi	r28, 0x4E	; 78
   181c4:	df 4f       	sbci	r29, 0xFF	; 255
   181c6:	18 82       	st	Y, r1
   181c8:	c2 5b       	subi	r28, 0xB2	; 178
   181ca:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:996
      loop_t = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_button_1->function_for_max_items);
   181cc:	f2 01       	movw	r30, r4
   181ce:	ee 52       	subi	r30, 0x2E	; 46
   181d0:	fe 4f       	sbci	r31, 0xFE	; 254
   181d2:	e6 0d       	add	r30, r6
   181d4:	f7 1d       	adc	r31, r7
   181d6:	25 91       	lpm	r18, Z+
   181d8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:997
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
   181da:	c2 01       	movw	r24, r4
   181dc:	83 53       	subi	r24, 0x33	; 51
   181de:	9e 4f       	sbci	r25, 0xFE	; 254
   181e0:	a3 01       	movw	r20, r6
   181e2:	48 0f       	add	r20, r24
   181e4:	59 1f       	adc	r21, r25
   181e6:	ca 54       	subi	r28, 0x4A	; 74
   181e8:	df 4f       	sbci	r29, 0xFF	; 255
   181ea:	59 83       	std	Y+1, r21	; 0x01
   181ec:	48 83       	st	Y, r20
   181ee:	c6 5b       	subi	r28, 0xB6	; 182
   181f0:	d0 40       	sbci	r29, 0x00	; 0
   181f2:	fa 01       	movw	r30, r20
   181f4:	84 91       	lpm	r24, Z
   181f6:	cf 54       	subi	r28, 0x4F	; 79
   181f8:	df 4f       	sbci	r29, 0xFF	; 255
   181fa:	68 81       	ld	r22, Y
   181fc:	c1 5b       	subi	r28, 0xB1	; 177
   181fe:	d0 40       	sbci	r29, 0x00	; 0
   18200:	70 e0       	ldi	r23, 0x00	; 0
   18202:	40 e0       	ldi	r20, 0x00	; 0
   18204:	90 e0       	ldi	r25, 0x00	; 0
   18206:	f9 01       	movw	r30, r18
   18208:	19 95       	eicall
   1820a:	cd 54       	subi	r28, 0x4D	; 77
   1820c:	df 4f       	sbci	r29, 0xFF	; 255
   1820e:	88 83       	st	Y, r24
   18210:	c3 5b       	subi	r28, 0xB3	; 179
   18212:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:999

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
   18214:	f2 01       	movw	r30, r4
   18216:	e4 53       	subi	r30, 0x34	; 52
   18218:	fe 4f       	sbci	r31, 0xFE	; 254
   1821a:	e6 0d       	add	r30, r6
   1821c:	f7 1d       	adc	r31, r7
   1821e:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1000
      if (slider_active != MENU_SLIDER_OFF)
   18220:	4f 3f       	cpi	r20, 0xFF	; 255
   18222:	b9 f0       	breq	.+46     	; 0x18252 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x18da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1001
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
   18224:	f2 01       	movw	r30, r4
   18226:	e6 53       	subi	r30, 0x36	; 54
   18228:	fe 4f       	sbci	r31, 0xFE	; 254
   1822a:	e6 0d       	add	r30, r6
   1822c:	f7 1d       	adc	r31, r7
   1822e:	24 91       	lpm	r18, Z
   18230:	f2 01       	movw	r30, r4
   18232:	e5 53       	subi	r30, 0x35	; 53
   18234:	fe 4f       	sbci	r31, 0xFE	; 254
   18236:	e6 0d       	add	r30, r6
   18238:	f7 1d       	adc	r31, r7
   1823a:	e4 91       	lpm	r30, Z
   1823c:	2e 9f       	mul	r18, r30
   1823e:	20 2d       	mov	r18, r0
   18240:	11 24       	eor	r1, r1
   18242:	be 01       	movw	r22, r28
   18244:	6d 54       	subi	r22, 0x4D	; 77
   18246:	7f 4f       	sbci	r23, 0xFF	; 255
   18248:	ce 01       	movw	r24, r28
   1824a:	8e 54       	subi	r24, 0x4E	; 78
   1824c:	9f 4f       	sbci	r25, 0xFF	; 255
   1824e:	0e 94 c9 9a 	call	0x13592	; 0x13592 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
   18252:	ce 54       	subi	r28, 0x4E	; 78
   18254:	df 4f       	sbci	r29, 0xFF	; 255
   18256:	a8 80       	ld	r10, Y
   18258:	c2 5b       	subi	r28, 0xB2	; 178
   1825a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1002
      while (loop_i < loop_cnt)
   1825c:	cd 54       	subi	r28, 0x4D	; 77
   1825e:	df 4f       	sbci	r29, 0xFF	; 255
   18260:	88 80       	ld	r8, Y
   18262:	c3 5b       	subi	r28, 0xB3	; 179
   18264:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1004
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   18266:	c2 01       	movw	r24, r4
   18268:	82 54       	subi	r24, 0x42	; 66
   1826a:	9e 4f       	sbci	r25, 0xFE	; 254
   1826c:	93 01       	movw	r18, r6
   1826e:	28 0f       	add	r18, r24
   18270:	39 1f       	adc	r19, r25
   18272:	c4 54       	subi	r28, 0x44	; 68
   18274:	df 4f       	sbci	r29, 0xFF	; 255
   18276:	39 83       	std	Y+1, r19	; 0x01
   18278:	28 83       	st	Y, r18
   1827a:	cc 5b       	subi	r28, 0xBC	; 188
   1827c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1005
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   1827e:	12 01       	movw	r2, r4
   18280:	30 e4       	ldi	r19, 0x40	; 64
   18282:	23 1a       	sub	r2, r19
   18284:	3e ef       	ldi	r19, 0xFE	; 254
   18286:	33 0a       	sbc	r3, r19
   18288:	26 0c       	add	r2, r6
   1828a:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1006
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   1828c:	0b 96       	adiw	r24, 0x0b	; 11
   1828e:	a3 01       	movw	r20, r6
   18290:	48 0f       	add	r20, r24
   18292:	59 1f       	adc	r21, r25
   18294:	c2 54       	subi	r28, 0x42	; 66
   18296:	df 4f       	sbci	r29, 0xFF	; 255
   18298:	59 83       	std	Y+1, r21	; 0x01
   1829a:	48 83       	st	Y, r20
   1829c:	ce 5b       	subi	r28, 0xBE	; 190
   1829e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1007
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   182a0:	01 97       	sbiw	r24, 0x01	; 1
   182a2:	b3 01       	movw	r22, r6
   182a4:	68 0f       	add	r22, r24
   182a6:	79 1f       	adc	r23, r25
   182a8:	cc 53       	subi	r28, 0x3C	; 60
   182aa:	df 4f       	sbci	r29, 0xFF	; 255
   182ac:	79 83       	std	Y+1, r23	; 0x01
   182ae:	68 83       	st	Y, r22
   182b0:	c4 5c       	subi	r28, 0xC4	; 196
   182b2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1009
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   182b4:	01 97       	sbiw	r24, 0x01	; 1
   182b6:	f3 01       	movw	r30, r6
   182b8:	e8 0f       	add	r30, r24
   182ba:	f9 1f       	adc	r31, r25
   182bc:	c6 53       	subi	r28, 0x36	; 54
   182be:	df 4f       	sbci	r29, 0xFF	; 255
   182c0:	f9 83       	std	Y+1, r31	; 0x01
   182c2:	e8 83       	st	Y, r30
   182c4:	ca 5c       	subi	r28, 0xCA	; 202
   182c6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1010
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
   182c8:	03 97       	sbiw	r24, 0x03	; 3
   182ca:	93 01       	movw	r18, r6
   182cc:	28 0f       	add	r18, r24
   182ce:	39 1f       	adc	r19, r25
   182d0:	c3 53       	subi	r28, 0x33	; 51
   182d2:	df 4f       	sbci	r29, 0xFF	; 255
   182d4:	39 83       	std	Y+1, r19	; 0x01
   182d6:	28 83       	st	Y, r18
   182d8:	cd 5c       	subi	r28, 0xCD	; 205
   182da:	d0 40       	sbci	r29, 0x00	; 0
   182dc:	02 97       	sbiw	r24, 0x02	; 2
   182de:	a3 01       	movw	r20, r6
   182e0:	48 0f       	add	r20, r24
   182e2:	59 1f       	adc	r21, r25
   182e4:	c0 53       	subi	r28, 0x30	; 48
   182e6:	df 4f       	sbci	r29, 0xFF	; 255
   182e8:	59 83       	std	Y+1, r21	; 0x01
   182ea:	48 83       	st	Y, r20
   182ec:	c0 5d       	subi	r28, 0xD0	; 208
   182ee:	d0 40       	sbci	r29, 0x00	; 0
   182f0:	d1 2c       	mov	r13, r1
   182f2:	c1 2c       	mov	r12, r1
   182f4:	ba 2c       	mov	r11, r10
   182f6:	bc 0c       	add	r11, r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1002
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
   182f8:	b8 14       	cp	r11, r8
   182fa:	08 f0       	brcs	.+2      	; 0x182fe <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1986>
   182fc:	aa c0       	rjmp	.+340    	; 0x18452 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1ada>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1004
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   182fe:	c4 54       	subi	r28, 0x44	; 68
   18300:	df 4f       	sbci	r29, 0xFF	; 255
   18302:	e8 81       	ld	r30, Y
   18304:	f9 81       	ldd	r31, Y+1	; 0x01
   18306:	cc 5b       	subi	r28, 0xBC	; 188
   18308:	d0 40       	sbci	r29, 0x00	; 0
   1830a:	25 91       	lpm	r18, Z+
   1830c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1005
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   1830e:	f1 01       	movw	r30, r2
   18310:	85 91       	lpm	r24, Z+
   18312:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1006
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   18314:	c2 54       	subi	r28, 0x42	; 66
   18316:	df 4f       	sbci	r29, 0xFF	; 255
   18318:	e8 81       	ld	r30, Y
   1831a:	f9 81       	ldd	r31, Y+1	; 0x01
   1831c:	ce 5b       	subi	r28, 0xBE	; 190
   1831e:	d0 40       	sbci	r29, 0x00	; 0
   18320:	44 91       	lpm	r20, Z
   18322:	44 23       	and	r20, r20
   18324:	09 f4       	brne	.+2      	; 0x18328 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x19b0>
   18326:	97 c0       	rjmp	.+302    	; 0x18456 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1ade>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1005
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   18328:	c6 54       	subi	r28, 0x46	; 70
   1832a:	df 4f       	sbci	r29, 0xFF	; 255
   1832c:	48 81       	ld	r20, Y
   1832e:	59 81       	ldd	r21, Y+1	; 0x01
   18330:	ca 5b       	subi	r28, 0xBA	; 186
   18332:	d0 40       	sbci	r29, 0x00	; 0
   18334:	48 0f       	add	r20, r24
   18336:	59 1f       	adc	r21, r25
   18338:	ce 53       	subi	r28, 0x3E	; 62
   1833a:	df 4f       	sbci	r29, 0xFF	; 255
   1833c:	59 83       	std	Y+1, r21	; 0x01
   1833e:	48 83       	st	Y, r20
   18340:	c2 5c       	subi	r28, 0xC2	; 194
   18342:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1008
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
   18344:	c2 54       	subi	r28, 0x42	; 66
   18346:	df 4f       	sbci	r29, 0xFF	; 255
   18348:	e8 81       	ld	r30, Y
   1834a:	f9 81       	ldd	r31, Y+1	; 0x01
   1834c:	ce 5b       	subi	r28, 0xBE	; 190
   1834e:	d0 40       	sbci	r29, 0x00	; 0
   18350:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1004
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   18352:	c8 54       	subi	r28, 0x48	; 72
   18354:	df 4f       	sbci	r29, 0xFF	; 255
   18356:	48 81       	ld	r20, Y
   18358:	59 81       	ldd	r21, Y+1	; 0x01
   1835a:	c8 5b       	subi	r28, 0xB8	; 184
   1835c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1008
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
   1835e:	81 30       	cpi	r24, 0x01	; 1
   18360:	e9 f4       	brne	.+58     	; 0x1839c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1a24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1009
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   18362:	c4 54       	subi	r28, 0x44	; 68
   18364:	df 4f       	sbci	r29, 0xFF	; 255
   18366:	e8 81       	ld	r30, Y
   18368:	f9 81       	ldd	r31, Y+1	; 0x01
   1836a:	cc 5b       	subi	r28, 0xBC	; 188
   1836c:	d0 40       	sbci	r29, 0x00	; 0
   1836e:	85 91       	lpm	r24, Z+
   18370:	94 91       	lpm	r25, Z
   18372:	c6 53       	subi	r28, 0x36	; 54
   18374:	df 4f       	sbci	r29, 0xFF	; 255
   18376:	e8 81       	ld	r30, Y
   18378:	f9 81       	ldd	r31, Y+1	; 0x01
   1837a:	ca 5c       	subi	r28, 0xCA	; 202
   1837c:	d0 40       	sbci	r29, 0x00	; 0
   1837e:	44 91       	lpm	r20, Z
   18380:	c8 54       	subi	r28, 0x48	; 72
   18382:	df 4f       	sbci	r29, 0xFF	; 255
   18384:	28 81       	ld	r18, Y
   18386:	39 81       	ldd	r19, Y+1	; 0x01
   18388:	c8 5b       	subi	r28, 0xB8	; 184
   1838a:	d0 40       	sbci	r29, 0x00	; 0
   1838c:	82 0f       	add	r24, r18
   1838e:	93 1f       	adc	r25, r19
   18390:	4c 9d       	mul	r20, r12
   18392:	90 01       	movw	r18, r0
   18394:	4d 9d       	mul	r20, r13
   18396:	30 0d       	add	r19, r0
   18398:	11 24       	eor	r1, r1
   1839a:	ac 01       	movw	r20, r24
   1839c:	42 0f       	add	r20, r18
   1839e:	53 1f       	adc	r21, r19
   183a0:	c0 54       	subi	r28, 0x40	; 64
   183a2:	df 4f       	sbci	r29, 0xFF	; 255
   183a4:	59 83       	std	Y+1, r21	; 0x01
   183a6:	48 83       	st	Y, r20
   183a8:	c0 5c       	subi	r28, 0xC0	; 192
   183aa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1010
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
   183ac:	c3 53       	subi	r28, 0x33	; 51
   183ae:	df 4f       	sbci	r29, 0xFF	; 255
   183b0:	e8 81       	ld	r30, Y
   183b2:	f9 81       	ldd	r31, Y+1	; 0x01
   183b4:	cd 5c       	subi	r28, 0xCD	; 205
   183b6:	d0 40       	sbci	r29, 0x00	; 0
   183b8:	25 91       	lpm	r18, Z+
   183ba:	34 91       	lpm	r19, Z
   183bc:	c0 53       	subi	r28, 0x30	; 48
   183be:	df 4f       	sbci	r29, 0xFF	; 255
   183c0:	e8 81       	ld	r30, Y
   183c2:	f9 81       	ldd	r31, Y+1	; 0x01
   183c4:	c0 5d       	subi	r28, 0xD0	; 208
   183c6:	d0 40       	sbci	r29, 0x00	; 0
   183c8:	45 91       	lpm	r20, Z+
   183ca:	54 91       	lpm	r21, Z
   183cc:	c8 53       	subi	r28, 0x38	; 56
   183ce:	df 4f       	sbci	r29, 0xFF	; 255
   183d0:	e8 80       	ld	r14, Y
   183d2:	f9 80       	ldd	r15, Y+1	; 0x01
   183d4:	c8 5c       	subi	r28, 0xC8	; 200
   183d6:	d0 40       	sbci	r29, 0x00	; 0
   183d8:	ca 53       	subi	r28, 0x3A	; 58
   183da:	df 4f       	sbci	r29, 0xFF	; 255
   183dc:	08 81       	ld	r16, Y
   183de:	19 81       	ldd	r17, Y+1	; 0x01
   183e0:	c6 5c       	subi	r28, 0xC6	; 198
   183e2:	d0 40       	sbci	r29, 0x00	; 0
   183e4:	ce 53       	subi	r28, 0x3E	; 62
   183e6:	df 4f       	sbci	r29, 0xFF	; 255
   183e8:	68 81       	ld	r22, Y
   183ea:	79 81       	ldd	r23, Y+1	; 0x01
   183ec:	c2 5c       	subi	r28, 0xC2	; 194
   183ee:	d0 40       	sbci	r29, 0x00	; 0
   183f0:	c0 54       	subi	r28, 0x40	; 64
   183f2:	df 4f       	sbci	r29, 0xFF	; 255
   183f4:	88 81       	ld	r24, Y
   183f6:	99 81       	ldd	r25, Y+1	; 0x01
   183f8:	c0 5c       	subi	r28, 0xC0	; 192
   183fa:	d0 40       	sbci	r29, 0x00	; 0
   183fc:	0e 94 32 98 	call	0x13064	; 0x13064 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   18400:	18 2f       	mov	r17, r24
   18402:	5f ef       	ldi	r21, 0xFF	; 255
   18404:	c5 1a       	sub	r12, r21
   18406:	d5 0a       	sbc	r13, r21
   18408:	88 23       	and	r24, r24
   1840a:	09 f4       	brne	.+2      	; 0x1840e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1a96>
   1840c:	73 cf       	rjmp	.-282    	; 0x182f4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x197c>
   1840e:	ce 54       	subi	r28, 0x4E	; 78
   18410:	df 4f       	sbci	r29, 0xFF	; 255
   18412:	b8 82       	st	Y, r11
   18414:	c2 5b       	subi	r28, 0xB2	; 178
   18416:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1012
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_button_1->dyn_button_onclick);
   18418:	f2 01       	movw	r30, r4
   1841a:	e0 53       	subi	r30, 0x30	; 48
   1841c:	fe 4f       	sbci	r31, 0xFE	; 254
   1841e:	e6 0d       	add	r30, r6
   18420:	f7 1d       	adc	r31, r7
   18422:	25 91       	lpm	r18, Z+
   18424:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1013
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
   18426:	ca 54       	subi	r28, 0x4A	; 74
   18428:	df 4f       	sbci	r29, 0xFF	; 255
   1842a:	e8 81       	ld	r30, Y
   1842c:	f9 81       	ldd	r31, Y+1	; 0x01
   1842e:	c6 5b       	subi	r28, 0xB6	; 182
   18430:	d0 40       	sbci	r29, 0x00	; 0
   18432:	84 91       	lpm	r24, Z
   18434:	cf 54       	subi	r28, 0x4F	; 79
   18436:	df 4f       	sbci	r29, 0xFF	; 255
   18438:	68 81       	ld	r22, Y
   1843a:	c1 5b       	subi	r28, 0xB1	; 177
   1843c:	d0 40       	sbci	r29, 0x00	; 0
   1843e:	70 e0       	ldi	r23, 0x00	; 0
   18440:	4b 2d       	mov	r20, r11
   18442:	90 e0       	ldi	r25, 0x00	; 0
   18444:	f9 01       	movw	r30, r18
   18446:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1014
          ret = true;
   18448:	c4 53       	subi	r28, 0x34	; 52
   1844a:	df 4f       	sbci	r29, 0xFF	; 255
   1844c:	18 83       	st	Y, r17
   1844e:	cc 5c       	subi	r28, 0xCC	; 204
   18450:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:963
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
   18452:	93 94       	inc	r9
   18454:	03 cd       	rjmp	.-1530   	; 0x17e5c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x14e4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1007
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   18456:	f1 01       	movw	r30, r2
   18458:	85 91       	lpm	r24, Z+
   1845a:	94 91       	lpm	r25, Z
   1845c:	cc 53       	subi	r28, 0x3C	; 60
   1845e:	df 4f       	sbci	r29, 0xFF	; 255
   18460:	e8 81       	ld	r30, Y
   18462:	f9 81       	ldd	r31, Y+1	; 0x01
   18464:	c4 5c       	subi	r28, 0xC4	; 196
   18466:	d0 40       	sbci	r29, 0x00	; 0
   18468:	64 91       	lpm	r22, Z
   1846a:	c6 54       	subi	r28, 0x46	; 70
   1846c:	df 4f       	sbci	r29, 0xFF	; 255
   1846e:	48 81       	ld	r20, Y
   18470:	59 81       	ldd	r21, Y+1	; 0x01
   18472:	ca 5b       	subi	r28, 0xBA	; 186
   18474:	d0 40       	sbci	r29, 0x00	; 0
   18476:	84 0f       	add	r24, r20
   18478:	95 1f       	adc	r25, r21
   1847a:	6c 9d       	mul	r22, r12
   1847c:	a0 01       	movw	r20, r0
   1847e:	6d 9d       	mul	r22, r13
   18480:	50 0d       	add	r21, r0
   18482:	11 24       	eor	r1, r1
   18484:	bc 01       	movw	r22, r24
   18486:	64 0f       	add	r22, r20
   18488:	75 1f       	adc	r23, r21
   1848a:	ce 53       	subi	r28, 0x3E	; 62
   1848c:	df 4f       	sbci	r29, 0xFF	; 255
   1848e:	79 83       	std	Y+1, r23	; 0x01
   18490:	68 83       	st	Y, r22
   18492:	c2 5c       	subi	r28, 0xC2	; 194
   18494:	d0 40       	sbci	r29, 0x00	; 0
   18496:	56 cf       	rjmp	.-340    	; 0x18344 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x19cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1022
        loop_t++;
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
   18498:	c4 53       	subi	r28, 0x34	; 52
   1849a:	df 4f       	sbci	r29, 0xFF	; 255
   1849c:	f8 81       	ld	r31, Y
   1849e:	cc 5c       	subi	r28, 0xCC	; 204
   184a0:	d0 40       	sbci	r29, 0x00	; 0
   184a2:	f1 11       	cpse	r31, r1
   184a4:	62 c4       	rjmp	.+2244   	; 0x18d6a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1023
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
   184a6:	ca 54       	subi	r28, 0x4A	; 74
   184a8:	df 4f       	sbci	r29, 0xFF	; 255
   184aa:	18 82       	st	Y, r1
   184ac:	c6 5b       	subi	r28, 0xB6	; 182
   184ae:	d0 40       	sbci	r29, 0x00	; 0
   184b0:	93 01       	movw	r18, r6
   184b2:	2a 52       	subi	r18, 0x2A	; 42
   184b4:	3d 4f       	sbci	r19, 0xFD	; 253
   184b6:	c0 52       	subi	r28, 0x20	; 32
   184b8:	df 4f       	sbci	r29, 0xFF	; 255
   184ba:	39 83       	std	Y+1, r19	; 0x01
   184bc:	28 83       	st	Y, r18
   184be:	c0 5e       	subi	r28, 0xE0	; 224
   184c0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1063
          {
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
   184c2:	ae 01       	movw	r20, r28
   184c4:	4f 57       	subi	r20, 0x7F	; 127
   184c6:	5f 4f       	sbci	r21, 0xFF	; 255
   184c8:	cc 54       	subi	r28, 0x4C	; 76
   184ca:	df 4f       	sbci	r29, 0xFF	; 255
   184cc:	59 83       	std	Y+1, r21	; 0x01
   184ce:	48 83       	st	Y, r20
   184d0:	c4 5b       	subi	r28, 0xB4	; 180
   184d2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1023
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
   184d4:	c0 52       	subi	r28, 0x20	; 32
   184d6:	df 4f       	sbci	r29, 0xFF	; 255
   184d8:	e8 81       	ld	r30, Y
   184da:	f9 81       	ldd	r31, Y+1	; 0x01
   184dc:	c0 5e       	subi	r28, 0xE0	; 224
   184de:	d0 40       	sbci	r29, 0x00	; 0
   184e0:	84 91       	lpm	r24, Z
   184e2:	ca 54       	subi	r28, 0x4A	; 74
   184e4:	df 4f       	sbci	r29, 0xFF	; 255
   184e6:	f8 81       	ld	r31, Y
   184e8:	c6 5b       	subi	r28, 0xB6	; 182
   184ea:	d0 40       	sbci	r29, 0x00	; 0
   184ec:	f8 17       	cp	r31, r24
   184ee:	08 f0       	brcs	.+2      	; 0x184f2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1b7a>
   184f0:	42 c4       	rjmp	.+2180   	; 0x18d76 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23fe>
   184f2:	2e e1       	ldi	r18, 0x1E	; 30
   184f4:	f2 9f       	mul	r31, r18
   184f6:	20 01       	movw	r4, r0
   184f8:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1026
  {
    dyn_select_box_1 = &current->dyn_select_box_1[idx];
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
   184fa:	f2 01       	movw	r30, r4
   184fc:	e2 53       	subi	r30, 0x32	; 50
   184fe:	fd 4f       	sbci	r31, 0xFD	; 253
   18500:	e6 0d       	add	r30, r6
   18502:	f7 1d       	adc	r31, r7
   18504:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1027
    if (enable_redraw(rdr, redraw_class) == true)
   18506:	c1 53       	subi	r28, 0x31	; 49
   18508:	df 4f       	sbci	r29, 0xFF	; 255
   1850a:	68 81       	ld	r22, Y
   1850c:	cf 5c       	subi	r28, 0xCF	; 207
   1850e:	d0 40       	sbci	r29, 0x00	; 0
   18510:	0e 94 ad aa 	call	0x1555a	; 0x1555a <enable_redraw(unsigned char, unsigned char)>
   18514:	88 23       	and	r24, r24
   18516:	09 f4       	brne	.+2      	; 0x1851a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1ba2>
   18518:	56 c2       	rjmp	.+1196   	; 0x189c6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x204e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1029
    {
      loop_i = 0;
   1851a:	ce 54       	subi	r28, 0x4E	; 78
   1851c:	df 4f       	sbci	r29, 0xFF	; 255
   1851e:	18 82       	st	Y, r1
   18520:	c2 5b       	subi	r28, 0xB2	; 178
   18522:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1032
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
   18524:	f2 01       	movw	r30, r4
   18526:	e6 53       	subi	r30, 0x36	; 54
   18528:	fd 4f       	sbci	r31, 0xFD	; 253
   1852a:	e6 0d       	add	r30, r6
   1852c:	f7 1d       	adc	r31, r7
   1852e:	25 91       	lpm	r18, Z+
   18530:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1033
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   18532:	c2 01       	movw	r24, r4
   18534:	8b 53       	subi	r24, 0x3B	; 59
   18536:	9d 4f       	sbci	r25, 0xFD	; 253
   18538:	a3 01       	movw	r20, r6
   1853a:	48 0f       	add	r20, r24
   1853c:	59 1f       	adc	r21, r25
   1853e:	c4 54       	subi	r28, 0x44	; 68
   18540:	df 4f       	sbci	r29, 0xFF	; 255
   18542:	59 83       	std	Y+1, r21	; 0x01
   18544:	48 83       	st	Y, r20
   18546:	cc 5b       	subi	r28, 0xBC	; 188
   18548:	d0 40       	sbci	r29, 0x00	; 0
   1854a:	fa 01       	movw	r30, r20
   1854c:	84 91       	lpm	r24, Z
   1854e:	cf 54       	subi	r28, 0x4F	; 79
   18550:	df 4f       	sbci	r29, 0xFF	; 255
   18552:	68 81       	ld	r22, Y
   18554:	c1 5b       	subi	r28, 0xB1	; 177
   18556:	d0 40       	sbci	r29, 0x00	; 0
   18558:	70 e0       	ldi	r23, 0x00	; 0
   1855a:	40 e0       	ldi	r20, 0x00	; 0
   1855c:	90 e0       	ldi	r25, 0x00	; 0
   1855e:	f9 01       	movw	r30, r18
   18560:	19 95       	eicall
   18562:	cd 54       	subi	r28, 0x4D	; 77
   18564:	df 4f       	sbci	r29, 0xFF	; 255
   18566:	88 83       	st	Y, r24
   18568:	c3 5b       	subi	r28, 0xB3	; 179
   1856a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1034
      gss = (ret_string_fptr*)pgm_read_word(&dyn_select_box_1->get_status_string);
   1856c:	f2 01       	movw	r30, r4
   1856e:	ea 53       	subi	r30, 0x3A	; 58
   18570:	fd 4f       	sbci	r31, 0xFD	; 253
   18572:	e6 0d       	add	r30, r6
   18574:	f7 1d       	adc	r31, r7
   18576:	25 91       	lpm	r18, Z+
   18578:	34 91       	lpm	r19, Z
   1857a:	ce 51       	subi	r28, 0x1E	; 30
   1857c:	df 4f       	sbci	r29, 0xFF	; 255
   1857e:	39 83       	std	Y+1, r19	; 0x01
   18580:	28 83       	st	Y, r18
   18582:	c2 5e       	subi	r28, 0xE2	; 226
   18584:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1035
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
   18586:	f2 01       	movw	r30, r4
   18588:	ec 53       	subi	r30, 0x3C	; 60
   1858a:	fd 4f       	sbci	r31, 0xFD	; 253
   1858c:	e6 0d       	add	r30, r6
   1858e:	f7 1d       	adc	r31, r7
   18590:	44 91       	lpm	r20, Z
   18592:	c2 01       	movw	r24, r4
   18594:	8e 53       	subi	r24, 0x3E	; 62
   18596:	9d 4f       	sbci	r25, 0xFD	; 253
   18598:	b3 01       	movw	r22, r6
   1859a:	68 0f       	add	r22, r24
   1859c:	79 1f       	adc	r23, r25
   1859e:	c0 53       	subi	r28, 0x30	; 48
   185a0:	df 4f       	sbci	r29, 0xFF	; 255
   185a2:	79 83       	std	Y+1, r23	; 0x01
   185a4:	68 83       	st	Y, r22
   185a6:	c0 5d       	subi	r28, 0xD0	; 208
   185a8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1036
      if (slider_active != MENU_SLIDER_OFF)
   185aa:	4f 3f       	cpi	r20, 0xFF	; 255
   185ac:	99 f0       	breq	.+38     	; 0x185d4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1c5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1037
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
   185ae:	fb 01       	movw	r30, r22
   185b0:	24 91       	lpm	r18, Z
   185b2:	f2 01       	movw	r30, r4
   185b4:	ed 53       	subi	r30, 0x3D	; 61
   185b6:	fd 4f       	sbci	r31, 0xFD	; 253
   185b8:	e6 0d       	add	r30, r6
   185ba:	f7 1d       	adc	r31, r7
   185bc:	e4 91       	lpm	r30, Z
   185be:	2e 9f       	mul	r18, r30
   185c0:	20 2d       	mov	r18, r0
   185c2:	11 24       	eor	r1, r1
   185c4:	be 01       	movw	r22, r28
   185c6:	6d 54       	subi	r22, 0x4D	; 77
   185c8:	7f 4f       	sbci	r23, 0xFF	; 255
   185ca:	ce 01       	movw	r24, r28
   185cc:	8e 54       	subi	r24, 0x4E	; 78
   185ce:	9f 4f       	sbci	r25, 0xFF	; 255
   185d0:	0e 94 c9 9a 	call	0x13592	; 0x13592 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1040
      while (loop_i < loop_cnt)
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   185d4:	c2 01       	movw	r24, r4
   185d6:	8f 53       	subi	r24, 0x3F	; 63
   185d8:	9d 4f       	sbci	r25, 0xFD	; 253
   185da:	93 01       	movw	r18, r6
   185dc:	28 0f       	add	r18, r24
   185de:	39 1f       	adc	r19, r25
   185e0:	c2 54       	subi	r28, 0x42	; 66
   185e2:	df 4f       	sbci	r29, 0xFF	; 255
   185e4:	39 83       	std	Y+1, r19	; 0x01
   185e6:	28 83       	st	Y, r18
   185e8:	ce 5b       	subi	r28, 0xBE	; 190
   185ea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1042
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   185ec:	40 97       	sbiw	r24, 0x10	; 16
   185ee:	a3 01       	movw	r20, r6
   185f0:	48 0f       	add	r20, r24
   185f2:	59 1f       	adc	r21, r25
   185f4:	cc 53       	subi	r28, 0x3C	; 60
   185f6:	df 4f       	sbci	r29, 0xFF	; 255
   185f8:	59 83       	std	Y+1, r21	; 0x01
   185fa:	48 83       	st	Y, r20
   185fc:	c4 5c       	subi	r28, 0xC4	; 196
   185fe:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1043
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   18600:	12 01       	movw	r2, r4
   18602:	5d e4       	ldi	r21, 0x4D	; 77
   18604:	25 1a       	sub	r2, r21
   18606:	5d ef       	ldi	r21, 0xFD	; 253
   18608:	35 0a       	sbc	r3, r21
   1860a:	26 0c       	add	r2, r6
   1860c:	37 1c       	adc	r3, r7
   1860e:	0f 96       	adiw	r24, 0x0f	; 15
   18610:	b3 01       	movw	r22, r6
   18612:	68 0f       	add	r22, r24
   18614:	79 1f       	adc	r23, r25
   18616:	c6 53       	subi	r28, 0x36	; 54
   18618:	df 4f       	sbci	r29, 0xFF	; 255
   1861a:	79 83       	std	Y+1, r23	; 0x01
   1861c:	68 83       	st	Y, r22
   1861e:	ca 5c       	subi	r28, 0xCA	; 202
   18620:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1049
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   18622:	01 97       	sbiw	r24, 0x01	; 1
   18624:	f3 01       	movw	r30, r6
   18626:	e8 0f       	add	r30, r24
   18628:	f9 1f       	adc	r31, r25
   1862a:	c3 53       	subi	r28, 0x33	; 51
   1862c:	df 4f       	sbci	r29, 0xFF	; 255
   1862e:	f9 83       	std	Y+1, r31	; 0x01
   18630:	e8 83       	st	Y, r30
   18632:	cd 5c       	subi	r28, 0xCD	; 205
   18634:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1064
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
   18636:	0d 96       	adiw	r24, 0x0d	; 13
   18638:	93 01       	movw	r18, r6
   1863a:	28 0f       	add	r18, r24
   1863c:	39 1f       	adc	r19, r25
   1863e:	ce 52       	subi	r28, 0x2E	; 46
   18640:	df 4f       	sbci	r29, 0xFF	; 255
   18642:	39 83       	std	Y+1, r19	; 0x01
   18644:	28 83       	st	Y, r18
   18646:	c2 5d       	subi	r28, 0xD2	; 210
   18648:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1071
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
   1864a:	0f 97       	sbiw	r24, 0x0f	; 15
   1864c:	a3 01       	movw	r20, r6
   1864e:	48 0f       	add	r20, r24
   18650:	59 1f       	adc	r21, r25
   18652:	cc 52       	subi	r28, 0x2C	; 44
   18654:	df 4f       	sbci	r29, 0xFF	; 255
   18656:	59 83       	std	Y+1, r21	; 0x01
   18658:	48 83       	st	Y, r20
   1865a:	c4 5d       	subi	r28, 0xD4	; 212
   1865c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1070
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
   1865e:	02 97       	sbiw	r24, 0x02	; 2
   18660:	b3 01       	movw	r22, r6
   18662:	68 0f       	add	r22, r24
   18664:	79 1f       	adc	r23, r25
   18666:	ca 52       	subi	r28, 0x2A	; 42
   18668:	df 4f       	sbci	r29, 0xFF	; 255
   1866a:	79 83       	std	Y+1, r23	; 0x01
   1866c:	68 83       	st	Y, r22
   1866e:	c6 5d       	subi	r28, 0xD6	; 214
   18670:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1069
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
   18672:	01 97       	sbiw	r24, 0x01	; 1
   18674:	f3 01       	movw	r30, r6
   18676:	e8 0f       	add	r30, r24
   18678:	f9 1f       	adc	r31, r25
   1867a:	c8 52       	subi	r28, 0x28	; 40
   1867c:	df 4f       	sbci	r29, 0xFF	; 255
   1867e:	f9 83       	std	Y+1, r31	; 0x01
   18680:	e8 83       	st	Y, r30
   18682:	c8 5d       	subi	r28, 0xD8	; 216
   18684:	d0 40       	sbci	r29, 0x00	; 0
   18686:	01 97       	sbiw	r24, 0x01	; 1
   18688:	93 01       	movw	r18, r6
   1868a:	28 0f       	add	r18, r24
   1868c:	39 1f       	adc	r19, r25
   1868e:	c6 52       	subi	r28, 0x26	; 38
   18690:	df 4f       	sbci	r29, 0xFF	; 255
   18692:	39 83       	std	Y+1, r19	; 0x01
   18694:	28 83       	st	Y, r18
   18696:	ca 5d       	subi	r28, 0xDA	; 218
   18698:	d0 40       	sbci	r29, 0x00	; 0
   1869a:	02 97       	sbiw	r24, 0x02	; 2
   1869c:	a3 01       	movw	r20, r6
   1869e:	48 0f       	add	r20, r24
   186a0:	59 1f       	adc	r21, r25
   186a2:	c4 52       	subi	r28, 0x24	; 36
   186a4:	df 4f       	sbci	r29, 0xFF	; 255
   186a6:	59 83       	std	Y+1, r21	; 0x01
   186a8:	48 83       	st	Y, r20
   186aa:	cc 5d       	subi	r28, 0xDC	; 220
   186ac:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1068
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
   186ae:	02 97       	sbiw	r24, 0x02	; 2
   186b0:	b3 01       	movw	r22, r6
   186b2:	68 0f       	add	r22, r24
   186b4:	79 1f       	adc	r23, r25
   186b6:	c2 52       	subi	r28, 0x22	; 34
   186b8:	df 4f       	sbci	r29, 0xFF	; 255
   186ba:	79 83       	std	Y+1, r23	; 0x01
   186bc:	68 83       	st	Y, r22
   186be:	ce 5d       	subi	r28, 0xDE	; 222
   186c0:	d0 40       	sbci	r29, 0x00	; 0
   186c2:	91 2c       	mov	r9, r1
   186c4:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1038
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_select_box_1->get_status_string);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
   186c6:	ce 54       	subi	r28, 0x4E	; 78
   186c8:	df 4f       	sbci	r29, 0xFF	; 255
   186ca:	88 81       	ld	r24, Y
   186cc:	c2 5b       	subi	r28, 0xB2	; 178
   186ce:	d0 40       	sbci	r29, 0x00	; 0
   186d0:	cd 54       	subi	r28, 0x4D	; 77
   186d2:	df 4f       	sbci	r29, 0xFF	; 255
   186d4:	98 81       	ld	r25, Y
   186d6:	c3 5b       	subi	r28, 0xB3	; 179
   186d8:	d0 40       	sbci	r29, 0x00	; 0
   186da:	89 17       	cp	r24, r25
   186dc:	08 f0       	brcs	.+2      	; 0x186e0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1d68>
   186de:	73 c1       	rjmp	.+742    	; 0x189c6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x204e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1040
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   186e0:	c2 54       	subi	r28, 0x42	; 66
   186e2:	df 4f       	sbci	r29, 0xFF	; 255
   186e4:	e8 81       	ld	r30, Y
   186e6:	f9 81       	ldd	r31, Y+1	; 0x01
   186e8:	ce 5b       	subi	r28, 0xBE	; 190
   186ea:	d0 40       	sbci	r29, 0x00	; 0
   186ec:	94 91       	lpm	r25, Z
   186ee:	91 11       	cpse	r25, r1
   186f0:	34 c0       	rjmp	.+104    	; 0x1875a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1de2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1042
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   186f2:	cc 53       	subi	r28, 0x3C	; 60
   186f4:	df 4f       	sbci	r29, 0xFF	; 255
   186f6:	e8 81       	ld	r30, Y
   186f8:	f9 81       	ldd	r31, Y+1	; 0x01
   186fa:	c4 5c       	subi	r28, 0xC4	; 196
   186fc:	d0 40       	sbci	r29, 0x00	; 0
   186fe:	25 91       	lpm	r18, Z+
   18700:	34 91       	lpm	r19, Z
   18702:	c8 54       	subi	r28, 0x48	; 72
   18704:	df 4f       	sbci	r29, 0xFF	; 255
   18706:	48 81       	ld	r20, Y
   18708:	59 81       	ldd	r21, Y+1	; 0x01
   1870a:	c8 5b       	subi	r28, 0xB8	; 184
   1870c:	d0 40       	sbci	r29, 0x00	; 0
   1870e:	42 0f       	add	r20, r18
   18710:	53 1f       	adc	r21, r19
   18712:	c0 54       	subi	r28, 0x40	; 64
   18714:	df 4f       	sbci	r29, 0xFF	; 255
   18716:	59 83       	std	Y+1, r21	; 0x01
   18718:	48 83       	st	Y, r20
   1871a:	c0 5c       	subi	r28, 0xC0	; 192
   1871c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1043
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   1871e:	f1 01       	movw	r30, r2
   18720:	25 91       	lpm	r18, Z+
   18722:	34 91       	lpm	r19, Z
   18724:	c6 53       	subi	r28, 0x36	; 54
   18726:	df 4f       	sbci	r29, 0xFF	; 255
   18728:	e8 81       	ld	r30, Y
   1872a:	f9 81       	ldd	r31, Y+1	; 0x01
   1872c:	ca 5c       	subi	r28, 0xCA	; 202
   1872e:	d0 40       	sbci	r29, 0x00	; 0
   18730:	94 91       	lpm	r25, Z
   18732:	c6 54       	subi	r28, 0x46	; 70
   18734:	df 4f       	sbci	r29, 0xFF	; 255
   18736:	48 81       	ld	r20, Y
   18738:	59 81       	ldd	r21, Y+1	; 0x01
   1873a:	ca 5b       	subi	r28, 0xBA	; 186
   1873c:	d0 40       	sbci	r29, 0x00	; 0
   1873e:	24 0f       	add	r18, r20
   18740:	35 1f       	adc	r19, r21
   18742:	b9 01       	movw	r22, r18
   18744:	9f 9d       	mul	r25, r15
   18746:	60 0d       	add	r22, r0
   18748:	71 1d       	adc	r23, r1
   1874a:	11 24       	eor	r1, r1
   1874c:	ce 53       	subi	r28, 0x3E	; 62
   1874e:	df 4f       	sbci	r29, 0xFF	; 255
   18750:	79 83       	std	Y+1, r23	; 0x01
   18752:	68 83       	st	Y, r22
   18754:	c2 5c       	subi	r28, 0xC2	; 194
   18756:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1044
          loop_t++;
   18758:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1046
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
   1875a:	c2 54       	subi	r28, 0x42	; 66
   1875c:	df 4f       	sbci	r29, 0xFF	; 255
   1875e:	e8 81       	ld	r30, Y
   18760:	f9 81       	ldd	r31, Y+1	; 0x01
   18762:	ce 5b       	subi	r28, 0xBE	; 190
   18764:	d0 40       	sbci	r29, 0x00	; 0
   18766:	94 91       	lpm	r25, Z
   18768:	91 30       	cpi	r25, 0x01	; 1
   1876a:	09 f0       	breq	.+2      	; 0x1876e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1df6>
   1876c:	34 c0       	rjmp	.+104    	; 0x187d6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1e5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1048
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
   1876e:	f1 01       	movw	r30, r2
   18770:	25 91       	lpm	r18, Z+
   18772:	34 91       	lpm	r19, Z
   18774:	c6 54       	subi	r28, 0x46	; 70
   18776:	df 4f       	sbci	r29, 0xFF	; 255
   18778:	48 81       	ld	r20, Y
   1877a:	59 81       	ldd	r21, Y+1	; 0x01
   1877c:	ca 5b       	subi	r28, 0xBA	; 186
   1877e:	d0 40       	sbci	r29, 0x00	; 0
   18780:	42 0f       	add	r20, r18
   18782:	53 1f       	adc	r21, r19
   18784:	ce 53       	subi	r28, 0x3E	; 62
   18786:	df 4f       	sbci	r29, 0xFF	; 255
   18788:	59 83       	std	Y+1, r21	; 0x01
   1878a:	48 83       	st	Y, r20
   1878c:	c2 5c       	subi	r28, 0xC2	; 194
   1878e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1049
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   18790:	cc 53       	subi	r28, 0x3C	; 60
   18792:	df 4f       	sbci	r29, 0xFF	; 255
   18794:	e8 81       	ld	r30, Y
   18796:	f9 81       	ldd	r31, Y+1	; 0x01
   18798:	c4 5c       	subi	r28, 0xC4	; 196
   1879a:	d0 40       	sbci	r29, 0x00	; 0
   1879c:	25 91       	lpm	r18, Z+
   1879e:	34 91       	lpm	r19, Z
   187a0:	c3 53       	subi	r28, 0x33	; 51
   187a2:	df 4f       	sbci	r29, 0xFF	; 255
   187a4:	e8 81       	ld	r30, Y
   187a6:	f9 81       	ldd	r31, Y+1	; 0x01
   187a8:	cd 5c       	subi	r28, 0xCD	; 205
   187aa:	d0 40       	sbci	r29, 0x00	; 0
   187ac:	94 91       	lpm	r25, Z
   187ae:	c8 54       	subi	r28, 0x48	; 72
   187b0:	df 4f       	sbci	r29, 0xFF	; 255
   187b2:	48 81       	ld	r20, Y
   187b4:	59 81       	ldd	r21, Y+1	; 0x01
   187b6:	c8 5b       	subi	r28, 0xB8	; 184
   187b8:	d0 40       	sbci	r29, 0x00	; 0
   187ba:	24 0f       	add	r18, r20
   187bc:	35 1f       	adc	r19, r21
   187be:	b9 01       	movw	r22, r18
   187c0:	9f 9d       	mul	r25, r15
   187c2:	60 0d       	add	r22, r0
   187c4:	71 1d       	adc	r23, r1
   187c6:	11 24       	eor	r1, r1
   187c8:	c0 54       	subi	r28, 0x40	; 64
   187ca:	df 4f       	sbci	r29, 0xFF	; 255
   187cc:	79 83       	std	Y+1, r23	; 0x01
   187ce:	68 83       	st	Y, r22
   187d0:	c0 5c       	subi	r28, 0xC0	; 192
   187d2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1050
          loop_t++;
   187d4:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1052
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
   187d6:	c2 54       	subi	r28, 0x42	; 66
   187d8:	df 4f       	sbci	r29, 0xFF	; 255
   187da:	e8 81       	ld	r30, Y
   187dc:	f9 81       	ldd	r31, Y+1	; 0x01
   187de:	ce 5b       	subi	r28, 0xBE	; 190
   187e0:	d0 40       	sbci	r29, 0x00	; 0
   187e2:	94 91       	lpm	r25, Z
   187e4:	92 30       	cpi	r25, 0x02	; 2
   187e6:	09 f0       	breq	.+2      	; 0x187ea <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1e72>
   187e8:	4b c0       	rjmp	.+150    	; 0x18880 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1f08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1054
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   187ea:	cc 53       	subi	r28, 0x3C	; 60
   187ec:	df 4f       	sbci	r29, 0xFF	; 255
   187ee:	e8 81       	ld	r30, Y
   187f0:	f9 81       	ldd	r31, Y+1	; 0x01
   187f2:	c4 5c       	subi	r28, 0xC4	; 196
   187f4:	d0 40       	sbci	r29, 0x00	; 0
   187f6:	25 91       	lpm	r18, Z+
   187f8:	34 91       	lpm	r19, Z
   187fa:	c3 53       	subi	r28, 0x33	; 51
   187fc:	df 4f       	sbci	r29, 0xFF	; 255
   187fe:	e8 81       	ld	r30, Y
   18800:	f9 81       	ldd	r31, Y+1	; 0x01
   18802:	cd 5c       	subi	r28, 0xCD	; 205
   18804:	d0 40       	sbci	r29, 0x00	; 0
   18806:	94 91       	lpm	r25, Z
   18808:	c8 54       	subi	r28, 0x48	; 72
   1880a:	df 4f       	sbci	r29, 0xFF	; 255
   1880c:	48 81       	ld	r20, Y
   1880e:	59 81       	ldd	r21, Y+1	; 0x01
   18810:	c8 5b       	subi	r28, 0xB8	; 184
   18812:	d0 40       	sbci	r29, 0x00	; 0
   18814:	24 0f       	add	r18, r20
   18816:	35 1f       	adc	r19, r21
   18818:	b9 01       	movw	r22, r18
   1881a:	9f 9d       	mul	r25, r15
   1881c:	60 0d       	add	r22, r0
   1881e:	71 1d       	adc	r23, r1
   18820:	11 24       	eor	r1, r1
   18822:	c0 54       	subi	r28, 0x40	; 64
   18824:	df 4f       	sbci	r29, 0xFF	; 255
   18826:	79 83       	std	Y+1, r23	; 0x01
   18828:	68 83       	st	Y, r22
   1882a:	c0 5c       	subi	r28, 0xC0	; 192
   1882c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1055
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
   1882e:	f1 01       	movw	r30, r2
   18830:	25 91       	lpm	r18, Z+
   18832:	34 91       	lpm	r19, Z
   18834:	c6 53       	subi	r28, 0x36	; 54
   18836:	df 4f       	sbci	r29, 0xFF	; 255
   18838:	e8 81       	ld	r30, Y
   1883a:	f9 81       	ldd	r31, Y+1	; 0x01
   1883c:	ca 5c       	subi	r28, 0xCA	; 202
   1883e:	d0 40       	sbci	r29, 0x00	; 0
   18840:	94 91       	lpm	r25, Z
   18842:	c6 54       	subi	r28, 0x46	; 70
   18844:	df 4f       	sbci	r29, 0xFF	; 255
   18846:	48 81       	ld	r20, Y
   18848:	59 81       	ldd	r21, Y+1	; 0x01
   1884a:	ca 5b       	subi	r28, 0xBA	; 186
   1884c:	d0 40       	sbci	r29, 0x00	; 0
   1884e:	24 0f       	add	r18, r20
   18850:	35 1f       	adc	r19, r21
   18852:	b9 01       	movw	r22, r18
   18854:	99 9d       	mul	r25, r9
   18856:	60 0d       	add	r22, r0
   18858:	71 1d       	adc	r23, r1
   1885a:	11 24       	eor	r1, r1
   1885c:	ce 53       	subi	r28, 0x3E	; 62
   1885e:	df 4f       	sbci	r29, 0xFF	; 255
   18860:	79 83       	std	Y+1, r23	; 0x01
   18862:	68 83       	st	Y, r22
   18864:	c2 5c       	subi	r28, 0xC2	; 194
   18866:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1056
          loop_t++;
   18868:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1057
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
   1886a:	c0 53       	subi	r28, 0x30	; 48
   1886c:	df 4f       	sbci	r29, 0xFF	; 255
   1886e:	e8 81       	ld	r30, Y
   18870:	f9 81       	ldd	r31, Y+1	; 0x01
   18872:	c0 5d       	subi	r28, 0xD0	; 208
   18874:	d0 40       	sbci	r29, 0x00	; 0
   18876:	94 91       	lpm	r25, Z
   18878:	f9 16       	cp	r15, r25
   1887a:	10 f0       	brcs	.+4      	; 0x18880 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1f08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1060
          {
            loop_t = 0;
            loop_r++;
   1887c:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1059
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
          {
            loop_t = 0;
   1887e:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1063
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
   18880:	c4 54       	subi	r28, 0x44	; 68
   18882:	df 4f       	sbci	r29, 0xFF	; 255
   18884:	e8 81       	ld	r30, Y
   18886:	f9 81       	ldd	r31, Y+1	; 0x01
   18888:	cc 5b       	subi	r28, 0xBC	; 188
   1888a:	d0 40       	sbci	r29, 0x00	; 0
   1888c:	44 91       	lpm	r20, Z
   1888e:	8e 01       	movw	r16, r28
   18890:	0f 57       	subi	r16, 0x7F	; 127
   18892:	1f 4f       	sbci	r17, 0xFF	; 255
   18894:	9e 01       	movw	r18, r28
   18896:	2f 5f       	subi	r18, 0xFF	; 255
   18898:	3f 4f       	sbci	r19, 0xFF	; 255
   1889a:	cf 54       	subi	r28, 0x4F	; 79
   1889c:	df 4f       	sbci	r29, 0xFF	; 255
   1889e:	68 81       	ld	r22, Y
   188a0:	c1 5b       	subi	r28, 0xB1	; 177
   188a2:	d0 40       	sbci	r29, 0x00	; 0
   188a4:	ce 51       	subi	r28, 0x1E	; 30
   188a6:	df 4f       	sbci	r29, 0xFF	; 255
   188a8:	e8 81       	ld	r30, Y
   188aa:	f9 81       	ldd	r31, Y+1	; 0x01
   188ac:	c2 5e       	subi	r28, 0xE2	; 226
   188ae:	d0 40       	sbci	r29, 0x00	; 0
   188b0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1064
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
   188b2:	ce 52       	subi	r28, 0x2E	; 46
   188b4:	df 4f       	sbci	r29, 0xFF	; 255
   188b6:	e8 81       	ld	r30, Y
   188b8:	f9 81       	ldd	r31, Y+1	; 0x01
   188ba:	c2 5d       	subi	r28, 0xD2	; 210
   188bc:	d0 40       	sbci	r29, 0x00	; 0
   188be:	25 91       	lpm	r18, Z+
   188c0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1065
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   188c2:	c4 54       	subi	r28, 0x44	; 68
   188c4:	df 4f       	sbci	r29, 0xFF	; 255
   188c6:	e8 81       	ld	r30, Y
   188c8:	f9 81       	ldd	r31, Y+1	; 0x01
   188ca:	cc 5b       	subi	r28, 0xBC	; 188
   188cc:	d0 40       	sbci	r29, 0x00	; 0
   188ce:	84 91       	lpm	r24, Z
   188d0:	cf 54       	subi	r28, 0x4F	; 79
   188d2:	df 4f       	sbci	r29, 0xFF	; 255
   188d4:	68 81       	ld	r22, Y
   188d6:	c1 5b       	subi	r28, 0xB1	; 177
   188d8:	d0 40       	sbci	r29, 0x00	; 0
   188da:	70 e0       	ldi	r23, 0x00	; 0
   188dc:	ce 54       	subi	r28, 0x4E	; 78
   188de:	df 4f       	sbci	r29, 0xFF	; 255
   188e0:	48 81       	ld	r20, Y
   188e2:	c2 5b       	subi	r28, 0xB2	; 178
   188e4:	d0 40       	sbci	r29, 0x00	; 0
   188e6:	90 e0       	ldi	r25, 0x00	; 0
   188e8:	f9 01       	movw	r30, r18
   188ea:	19 95       	eicall
   188ec:	88 2e       	mov	r8, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1067
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
   188ee:	60 e2       	ldi	r22, 0x20	; 32
   188f0:	c1 53       	subi	r28, 0x31	; 49
   188f2:	df 4f       	sbci	r29, 0xFF	; 255
   188f4:	88 81       	ld	r24, Y
   188f6:	cf 5c       	subi	r28, 0xCF	; 207
   188f8:	d0 40       	sbci	r29, 0x00	; 0
   188fa:	0e 94 ad aa 	call	0x1555a	; 0x1555a <enable_redraw(unsigned char, unsigned char)>
   188fe:	88 23       	and	r24, r24
   18900:	21 f0       	breq	.+8      	; 0x1890a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1f92>
   18902:	f2 e0       	ldi	r31, 0x02	; 2
   18904:	8f 12       	cpse	r8, r31
   18906:	01 c0       	rjmp	.+2      	; 0x1890a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1f92>
   18908:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1071
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
   1890a:	cc 52       	subi	r28, 0x2C	; 44
   1890c:	df 4f       	sbci	r29, 0xFF	; 255
   1890e:	e8 81       	ld	r30, Y
   18910:	f9 81       	ldd	r31, Y+1	; 0x01
   18912:	c4 5d       	subi	r28, 0xD4	; 212
   18914:	d0 40       	sbci	r29, 0x00	; 0
   18916:	a5 90       	lpm	r10, Z+
   18918:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1070
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
   1891a:	ca 52       	subi	r28, 0x2A	; 42
   1891c:	df 4f       	sbci	r29, 0xFF	; 255
   1891e:	e8 81       	ld	r30, Y
   18920:	f9 81       	ldd	r31, Y+1	; 0x01
   18922:	c6 5d       	subi	r28, 0xD6	; 214
   18924:	d0 40       	sbci	r29, 0x00	; 0
   18926:	c5 90       	lpm	r12, Z+
   18928:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1069
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
   1892a:	c8 52       	subi	r28, 0x28	; 40
   1892c:	df 4f       	sbci	r29, 0xFF	; 255
   1892e:	e8 81       	ld	r30, Y
   18930:	f9 81       	ldd	r31, Y+1	; 0x01
   18932:	c8 5d       	subi	r28, 0xD8	; 216
   18934:	d0 40       	sbci	r29, 0x00	; 0
   18936:	e4 90       	lpm	r14, Z
   18938:	c6 52       	subi	r28, 0x26	; 38
   1893a:	df 4f       	sbci	r29, 0xFF	; 255
   1893c:	e8 81       	ld	r30, Y
   1893e:	f9 81       	ldd	r31, Y+1	; 0x01
   18940:	ca 5d       	subi	r28, 0xDA	; 218
   18942:	d0 40       	sbci	r29, 0x00	; 0
   18944:	04 91       	lpm	r16, Z
   18946:	c4 52       	subi	r28, 0x24	; 36
   18948:	df 4f       	sbci	r29, 0xFF	; 255
   1894a:	e8 81       	ld	r30, Y
   1894c:	f9 81       	ldd	r31, Y+1	; 0x01
   1894e:	cc 5d       	subi	r28, 0xDC	; 220
   18950:	d0 40       	sbci	r29, 0x00	; 0
   18952:	25 91       	lpm	r18, Z+
   18954:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1068
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
   18956:	c2 52       	subi	r28, 0x22	; 34
   18958:	df 4f       	sbci	r29, 0xFF	; 255
   1895a:	e8 81       	ld	r30, Y
   1895c:	f9 81       	ldd	r31, Y+1	; 0x01
   1895e:	ce 5d       	subi	r28, 0xDE	; 222
   18960:	d0 40       	sbci	r29, 0x00	; 0
   18962:	45 91       	lpm	r20, Z+
   18964:	54 91       	lpm	r21, Z
   18966:	cb 54       	subi	r28, 0x4B	; 75
   18968:	df 4f       	sbci	r29, 0xFF	; 255
   1896a:	f8 81       	ld	r31, Y
   1896c:	c5 5b       	subi	r28, 0xB5	; 181
   1896e:	d0 40       	sbci	r29, 0x00	; 0
   18970:	ff 93       	push	r31
   18972:	cc 54       	subi	r28, 0x4C	; 76
   18974:	df 4f       	sbci	r29, 0xFF	; 255
   18976:	68 81       	ld	r22, Y
   18978:	c4 5b       	subi	r28, 0xB4	; 180
   1897a:	d0 40       	sbci	r29, 0x00	; 0
   1897c:	6f 93       	push	r22
   1897e:	81 e0       	ldi	r24, 0x01	; 1
   18980:	90 e0       	ldi	r25, 0x00	; 0
   18982:	8c 0f       	add	r24, r28
   18984:	9d 1f       	adc	r25, r29
   18986:	9f 93       	push	r25
   18988:	8f 93       	push	r24
   1898a:	ce 53       	subi	r28, 0x3E	; 62
   1898c:	df 4f       	sbci	r29, 0xFF	; 255
   1898e:	68 81       	ld	r22, Y
   18990:	79 81       	ldd	r23, Y+1	; 0x01
   18992:	c2 5c       	subi	r28, 0xC2	; 194
   18994:	d0 40       	sbci	r29, 0x00	; 0
   18996:	c0 54       	subi	r28, 0x40	; 64
   18998:	df 4f       	sbci	r29, 0xFF	; 255
   1899a:	88 81       	ld	r24, Y
   1899c:	99 81       	ldd	r25, Y+1	; 0x01
   1899e:	c0 5c       	subi	r28, 0xC0	; 192
   189a0:	d0 40       	sbci	r29, 0x00	; 0
   189a2:	0e 94 d3 98 	call	0x131a6	; 0x131a6 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1072
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
        loop_i++;
   189a6:	ce 54       	subi	r28, 0x4E	; 78
   189a8:	df 4f       	sbci	r29, 0xFF	; 255
   189aa:	88 81       	ld	r24, Y
   189ac:	c2 5b       	subi	r28, 0xB2	; 178
   189ae:	d0 40       	sbci	r29, 0x00	; 0
   189b0:	8f 5f       	subi	r24, 0xFF	; 255
   189b2:	ce 54       	subi	r28, 0x4E	; 78
   189b4:	df 4f       	sbci	r29, 0xFF	; 255
   189b6:	88 83       	st	Y, r24
   189b8:	c2 5b       	subi	r28, 0xB2	; 178
   189ba:	d0 40       	sbci	r29, 0x00	; 0
   189bc:	0f 90       	pop	r0
   189be:	0f 90       	pop	r0
   189c0:	0f 90       	pop	r0
   189c2:	0f 90       	pop	r0
   189c4:	80 ce       	rjmp	.-768    	; 0x186c6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1d4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1075
      }
    }
    if (click_x > 0 && click_y > 0)
   189c6:	ca 53       	subi	r28, 0x3A	; 58
   189c8:	df 4f       	sbci	r29, 0xFF	; 255
   189ca:	e8 81       	ld	r30, Y
   189cc:	f9 81       	ldd	r31, Y+1	; 0x01
   189ce:	c6 5c       	subi	r28, 0xC6	; 198
   189d0:	d0 40       	sbci	r29, 0x00	; 0
   189d2:	ef 2b       	or	r30, r31
   189d4:	09 f4       	brne	.+2      	; 0x189d8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2060>
   189d6:	bb c1       	rjmp	.+886    	; 0x18d4e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23d6>
   189d8:	c8 53       	subi	r28, 0x38	; 56
   189da:	df 4f       	sbci	r29, 0xFF	; 255
   189dc:	28 81       	ld	r18, Y
   189de:	39 81       	ldd	r19, Y+1	; 0x01
   189e0:	c8 5c       	subi	r28, 0xC8	; 200
   189e2:	d0 40       	sbci	r29, 0x00	; 0
   189e4:	23 2b       	or	r18, r19
   189e6:	09 f4       	brne	.+2      	; 0x189ea <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2072>
   189e8:	b2 c1       	rjmp	.+868    	; 0x18d4e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1077
    {
      loop_i = 0;
   189ea:	ce 54       	subi	r28, 0x4E	; 78
   189ec:	df 4f       	sbci	r29, 0xFF	; 255
   189ee:	18 82       	st	Y, r1
   189f0:	c2 5b       	subi	r28, 0xB2	; 178
   189f2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1080
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
   189f4:	f2 01       	movw	r30, r4
   189f6:	e6 53       	subi	r30, 0x36	; 54
   189f8:	fd 4f       	sbci	r31, 0xFD	; 253
   189fa:	e6 0d       	add	r30, r6
   189fc:	f7 1d       	adc	r31, r7
   189fe:	25 91       	lpm	r18, Z+
   18a00:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1081
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   18a02:	c2 01       	movw	r24, r4
   18a04:	8b 53       	subi	r24, 0x3B	; 59
   18a06:	9d 4f       	sbci	r25, 0xFD	; 253
   18a08:	a3 01       	movw	r20, r6
   18a0a:	48 0f       	add	r20, r24
   18a0c:	59 1f       	adc	r21, r25
   18a0e:	c2 54       	subi	r28, 0x42	; 66
   18a10:	df 4f       	sbci	r29, 0xFF	; 255
   18a12:	59 83       	std	Y+1, r21	; 0x01
   18a14:	48 83       	st	Y, r20
   18a16:	ce 5b       	subi	r28, 0xBE	; 190
   18a18:	d0 40       	sbci	r29, 0x00	; 0
   18a1a:	fa 01       	movw	r30, r20
   18a1c:	84 91       	lpm	r24, Z
   18a1e:	cf 54       	subi	r28, 0x4F	; 79
   18a20:	df 4f       	sbci	r29, 0xFF	; 255
   18a22:	68 81       	ld	r22, Y
   18a24:	c1 5b       	subi	r28, 0xB1	; 177
   18a26:	d0 40       	sbci	r29, 0x00	; 0
   18a28:	70 e0       	ldi	r23, 0x00	; 0
   18a2a:	40 e0       	ldi	r20, 0x00	; 0
   18a2c:	90 e0       	ldi	r25, 0x00	; 0
   18a2e:	f9 01       	movw	r30, r18
   18a30:	19 95       	eicall
   18a32:	cd 54       	subi	r28, 0x4D	; 77
   18a34:	df 4f       	sbci	r29, 0xFF	; 255
   18a36:	88 83       	st	Y, r24
   18a38:	c3 5b       	subi	r28, 0xB3	; 179
   18a3a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1082
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
   18a3c:	f2 01       	movw	r30, r4
   18a3e:	ec 53       	subi	r30, 0x3C	; 60
   18a40:	fd 4f       	sbci	r31, 0xFD	; 253
   18a42:	e6 0d       	add	r30, r6
   18a44:	f7 1d       	adc	r31, r7
   18a46:	44 91       	lpm	r20, Z
   18a48:	c2 01       	movw	r24, r4
   18a4a:	8e 53       	subi	r24, 0x3E	; 62
   18a4c:	9d 4f       	sbci	r25, 0xFD	; 253
   18a4e:	93 01       	movw	r18, r6
   18a50:	28 0f       	add	r18, r24
   18a52:	39 1f       	adc	r19, r25
   18a54:	c3 53       	subi	r28, 0x33	; 51
   18a56:	df 4f       	sbci	r29, 0xFF	; 255
   18a58:	39 83       	std	Y+1, r19	; 0x01
   18a5a:	28 83       	st	Y, r18
   18a5c:	cd 5c       	subi	r28, 0xCD	; 205
   18a5e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1083
      if (slider_active != MENU_SLIDER_OFF)
   18a60:	4f 3f       	cpi	r20, 0xFF	; 255
   18a62:	99 f0       	breq	.+38     	; 0x18a8a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2112>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1084
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
   18a64:	f9 01       	movw	r30, r18
   18a66:	24 91       	lpm	r18, Z
   18a68:	f2 01       	movw	r30, r4
   18a6a:	ed 53       	subi	r30, 0x3D	; 61
   18a6c:	fd 4f       	sbci	r31, 0xFD	; 253
   18a6e:	e6 0d       	add	r30, r6
   18a70:	f7 1d       	adc	r31, r7
   18a72:	e4 91       	lpm	r30, Z
   18a74:	2e 9f       	mul	r18, r30
   18a76:	20 2d       	mov	r18, r0
   18a78:	11 24       	eor	r1, r1
   18a7a:	be 01       	movw	r22, r28
   18a7c:	6d 54       	subi	r22, 0x4D	; 77
   18a7e:	7f 4f       	sbci	r23, 0xFF	; 255
   18a80:	ce 01       	movw	r24, r28
   18a82:	8e 54       	subi	r24, 0x4E	; 78
   18a84:	9f 4f       	sbci	r25, 0xFF	; 255
   18a86:	0e 94 c9 9a 	call	0x13592	; 0x13592 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
   18a8a:	ce 54       	subi	r28, 0x4E	; 78
   18a8c:	df 4f       	sbci	r29, 0xFF	; 255
   18a8e:	88 80       	ld	r8, Y
   18a90:	c2 5b       	subi	r28, 0xB2	; 178
   18a92:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1085
      while (loop_i < loop_cnt)
   18a94:	cd 54       	subi	r28, 0x4D	; 77
   18a96:	df 4f       	sbci	r29, 0xFF	; 255
   18a98:	28 80       	ld	r2, Y
   18a9a:	c3 5b       	subi	r28, 0xB3	; 179
   18a9c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1087
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   18a9e:	c2 01       	movw	r24, r4
   18aa0:	8f 53       	subi	r24, 0x3F	; 63
   18aa2:	9d 4f       	sbci	r25, 0xFD	; 253
   18aa4:	93 01       	movw	r18, r6
   18aa6:	28 0f       	add	r18, r24
   18aa8:	39 1f       	adc	r19, r25
   18aaa:	c4 54       	subi	r28, 0x44	; 68
   18aac:	df 4f       	sbci	r29, 0xFF	; 255
   18aae:	39 83       	std	Y+1, r19	; 0x01
   18ab0:	28 83       	st	Y, r18
   18ab2:	cc 5b       	subi	r28, 0xBC	; 188
   18ab4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1089
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   18ab6:	62 01       	movw	r12, r4
   18ab8:	3f e4       	ldi	r19, 0x4F	; 79
   18aba:	c3 1a       	sub	r12, r19
   18abc:	3d ef       	ldi	r19, 0xFD	; 253
   18abe:	d3 0a       	sbc	r13, r19
   18ac0:	c6 0c       	add	r12, r6
   18ac2:	d7 1c       	adc	r13, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1090
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   18ac4:	52 01       	movw	r10, r4
   18ac6:	4d e4       	ldi	r20, 0x4D	; 77
   18ac8:	a4 1a       	sub	r10, r20
   18aca:	4d ef       	ldi	r20, 0xFD	; 253
   18acc:	b4 0a       	sbc	r11, r20
   18ace:	a6 0c       	add	r10, r6
   18ad0:	b7 1c       	adc	r11, r7
   18ad2:	01 97       	sbiw	r24, 0x01	; 1
   18ad4:	b3 01       	movw	r22, r6
   18ad6:	68 0f       	add	r22, r24
   18ad8:	79 1f       	adc	r23, r25
   18ada:	cc 53       	subi	r28, 0x3C	; 60
   18adc:	df 4f       	sbci	r29, 0xFF	; 255
   18ade:	79 83       	std	Y+1, r23	; 0x01
   18ae0:	68 83       	st	Y, r22
   18ae2:	c4 5c       	subi	r28, 0xC4	; 196
   18ae4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1096
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   18ae6:	01 97       	sbiw	r24, 0x01	; 1
   18ae8:	f3 01       	movw	r30, r6
   18aea:	e8 0f       	add	r30, r24
   18aec:	f9 1f       	adc	r31, r25
   18aee:	c6 53       	subi	r28, 0x36	; 54
   18af0:	df 4f       	sbci	r29, 0xFF	; 255
   18af2:	f9 83       	std	Y+1, r31	; 0x01
   18af4:	e8 83       	st	Y, r30
   18af6:	ca 5c       	subi	r28, 0xCA	; 202
   18af8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1110
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
   18afa:	08 97       	sbiw	r24, 0x08	; 8
   18afc:	93 01       	movw	r18, r6
   18afe:	28 0f       	add	r18, r24
   18b00:	39 1f       	adc	r19, r25
   18b02:	c0 53       	subi	r28, 0x30	; 48
   18b04:	df 4f       	sbci	r29, 0xFF	; 255
   18b06:	39 83       	std	Y+1, r19	; 0x01
   18b08:	28 83       	st	Y, r18
   18b0a:	c0 5d       	subi	r28, 0xD0	; 208
   18b0c:	d0 40       	sbci	r29, 0x00	; 0
   18b0e:	02 97       	sbiw	r24, 0x02	; 2
   18b10:	a3 01       	movw	r20, r6
   18b12:	48 0f       	add	r20, r24
   18b14:	59 1f       	adc	r21, r25
   18b16:	ce 52       	subi	r28, 0x2E	; 46
   18b18:	df 4f       	sbci	r29, 0xFF	; 255
   18b1a:	59 83       	std	Y+1, r21	; 0x01
   18b1c:	48 83       	st	Y, r20
   18b1e:	c2 5d       	subi	r28, 0xD2	; 210
   18b20:	d0 40       	sbci	r29, 0x00	; 0
   18b22:	31 2c       	mov	r3, r1
   18b24:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1085
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
   18b26:	82 14       	cp	r8, r2
   18b28:	08 f0       	brcs	.+2      	; 0x18b2c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x21b4>
   18b2a:	11 c1       	rjmp	.+546    	; 0x18d4e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1087
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   18b2c:	c4 54       	subi	r28, 0x44	; 68
   18b2e:	df 4f       	sbci	r29, 0xFF	; 255
   18b30:	e8 81       	ld	r30, Y
   18b32:	f9 81       	ldd	r31, Y+1	; 0x01
   18b34:	cc 5b       	subi	r28, 0xBC	; 188
   18b36:	d0 40       	sbci	r29, 0x00	; 0
   18b38:	84 91       	lpm	r24, Z
   18b3a:	81 11       	cpse	r24, r1
   18b3c:	2f c0       	rjmp	.+94     	; 0x18b9c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2224>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1089
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   18b3e:	f6 01       	movw	r30, r12
   18b40:	85 91       	lpm	r24, Z+
   18b42:	94 91       	lpm	r25, Z
   18b44:	c8 54       	subi	r28, 0x48	; 72
   18b46:	df 4f       	sbci	r29, 0xFF	; 255
   18b48:	28 81       	ld	r18, Y
   18b4a:	39 81       	ldd	r19, Y+1	; 0x01
   18b4c:	c8 5b       	subi	r28, 0xB8	; 184
   18b4e:	d0 40       	sbci	r29, 0x00	; 0
   18b50:	28 0f       	add	r18, r24
   18b52:	39 1f       	adc	r19, r25
   18b54:	c0 54       	subi	r28, 0x40	; 64
   18b56:	df 4f       	sbci	r29, 0xFF	; 255
   18b58:	39 83       	std	Y+1, r19	; 0x01
   18b5a:	28 83       	st	Y, r18
   18b5c:	c0 5c       	subi	r28, 0xC0	; 192
   18b5e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1090
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   18b60:	f5 01       	movw	r30, r10
   18b62:	85 91       	lpm	r24, Z+
   18b64:	94 91       	lpm	r25, Z
   18b66:	cc 53       	subi	r28, 0x3C	; 60
   18b68:	df 4f       	sbci	r29, 0xFF	; 255
   18b6a:	e8 81       	ld	r30, Y
   18b6c:	f9 81       	ldd	r31, Y+1	; 0x01
   18b6e:	c4 5c       	subi	r28, 0xC4	; 196
   18b70:	d0 40       	sbci	r29, 0x00	; 0
   18b72:	24 91       	lpm	r18, Z
   18b74:	c6 54       	subi	r28, 0x46	; 70
   18b76:	df 4f       	sbci	r29, 0xFF	; 255
   18b78:	48 81       	ld	r20, Y
   18b7a:	59 81       	ldd	r21, Y+1	; 0x01
   18b7c:	ca 5b       	subi	r28, 0xBA	; 186
   18b7e:	d0 40       	sbci	r29, 0x00	; 0
   18b80:	84 0f       	add	r24, r20
   18b82:	95 1f       	adc	r25, r21
   18b84:	bc 01       	movw	r22, r24
   18b86:	29 9d       	mul	r18, r9
   18b88:	60 0d       	add	r22, r0
   18b8a:	71 1d       	adc	r23, r1
   18b8c:	11 24       	eor	r1, r1
   18b8e:	ce 53       	subi	r28, 0x3E	; 62
   18b90:	df 4f       	sbci	r29, 0xFF	; 255
   18b92:	79 83       	std	Y+1, r23	; 0x01
   18b94:	68 83       	st	Y, r22
   18b96:	c2 5c       	subi	r28, 0xC2	; 194
   18b98:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1091
          loop_t++;
   18b9a:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1093
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
   18b9c:	c4 54       	subi	r28, 0x44	; 68
   18b9e:	df 4f       	sbci	r29, 0xFF	; 255
   18ba0:	e8 81       	ld	r30, Y
   18ba2:	f9 81       	ldd	r31, Y+1	; 0x01
   18ba4:	cc 5b       	subi	r28, 0xBC	; 188
   18ba6:	d0 40       	sbci	r29, 0x00	; 0
   18ba8:	84 91       	lpm	r24, Z
   18baa:	81 30       	cpi	r24, 0x01	; 1
   18bac:	79 f5       	brne	.+94     	; 0x18c0c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2294>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1095
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
   18bae:	f5 01       	movw	r30, r10
   18bb0:	85 91       	lpm	r24, Z+
   18bb2:	94 91       	lpm	r25, Z
   18bb4:	c6 54       	subi	r28, 0x46	; 70
   18bb6:	df 4f       	sbci	r29, 0xFF	; 255
   18bb8:	28 81       	ld	r18, Y
   18bba:	39 81       	ldd	r19, Y+1	; 0x01
   18bbc:	ca 5b       	subi	r28, 0xBA	; 186
   18bbe:	d0 40       	sbci	r29, 0x00	; 0
   18bc0:	28 0f       	add	r18, r24
   18bc2:	39 1f       	adc	r19, r25
   18bc4:	ce 53       	subi	r28, 0x3E	; 62
   18bc6:	df 4f       	sbci	r29, 0xFF	; 255
   18bc8:	39 83       	std	Y+1, r19	; 0x01
   18bca:	28 83       	st	Y, r18
   18bcc:	c2 5c       	subi	r28, 0xC2	; 194
   18bce:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1096
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   18bd0:	f6 01       	movw	r30, r12
   18bd2:	85 91       	lpm	r24, Z+
   18bd4:	94 91       	lpm	r25, Z
   18bd6:	c6 53       	subi	r28, 0x36	; 54
   18bd8:	df 4f       	sbci	r29, 0xFF	; 255
   18bda:	e8 81       	ld	r30, Y
   18bdc:	f9 81       	ldd	r31, Y+1	; 0x01
   18bde:	ca 5c       	subi	r28, 0xCA	; 202
   18be0:	d0 40       	sbci	r29, 0x00	; 0
   18be2:	24 91       	lpm	r18, Z
   18be4:	c8 54       	subi	r28, 0x48	; 72
   18be6:	df 4f       	sbci	r29, 0xFF	; 255
   18be8:	48 81       	ld	r20, Y
   18bea:	59 81       	ldd	r21, Y+1	; 0x01
   18bec:	c8 5b       	subi	r28, 0xB8	; 184
   18bee:	d0 40       	sbci	r29, 0x00	; 0
   18bf0:	84 0f       	add	r24, r20
   18bf2:	95 1f       	adc	r25, r21
   18bf4:	bc 01       	movw	r22, r24
   18bf6:	29 9d       	mul	r18, r9
   18bf8:	60 0d       	add	r22, r0
   18bfa:	71 1d       	adc	r23, r1
   18bfc:	11 24       	eor	r1, r1
   18bfe:	c0 54       	subi	r28, 0x40	; 64
   18c00:	df 4f       	sbci	r29, 0xFF	; 255
   18c02:	79 83       	std	Y+1, r23	; 0x01
   18c04:	68 83       	st	Y, r22
   18c06:	c0 5c       	subi	r28, 0xC0	; 192
   18c08:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1097
          loop_t++;
   18c0a:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1099
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
   18c0c:	c4 54       	subi	r28, 0x44	; 68
   18c0e:	df 4f       	sbci	r29, 0xFF	; 255
   18c10:	e8 81       	ld	r30, Y
   18c12:	f9 81       	ldd	r31, Y+1	; 0x01
   18c14:	cc 5b       	subi	r28, 0xBC	; 188
   18c16:	d0 40       	sbci	r29, 0x00	; 0
   18c18:	84 91       	lpm	r24, Z
   18c1a:	82 30       	cpi	r24, 0x02	; 2
   18c1c:	09 f0       	breq	.+2      	; 0x18c20 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x22a8>
   18c1e:	46 c0       	rjmp	.+140    	; 0x18cac <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2334>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1101
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   18c20:	f6 01       	movw	r30, r12
   18c22:	85 91       	lpm	r24, Z+
   18c24:	94 91       	lpm	r25, Z
   18c26:	c6 53       	subi	r28, 0x36	; 54
   18c28:	df 4f       	sbci	r29, 0xFF	; 255
   18c2a:	e8 81       	ld	r30, Y
   18c2c:	f9 81       	ldd	r31, Y+1	; 0x01
   18c2e:	ca 5c       	subi	r28, 0xCA	; 202
   18c30:	d0 40       	sbci	r29, 0x00	; 0
   18c32:	24 91       	lpm	r18, Z
   18c34:	c8 54       	subi	r28, 0x48	; 72
   18c36:	df 4f       	sbci	r29, 0xFF	; 255
   18c38:	48 81       	ld	r20, Y
   18c3a:	59 81       	ldd	r21, Y+1	; 0x01
   18c3c:	c8 5b       	subi	r28, 0xB8	; 184
   18c3e:	d0 40       	sbci	r29, 0x00	; 0
   18c40:	84 0f       	add	r24, r20
   18c42:	95 1f       	adc	r25, r21
   18c44:	bc 01       	movw	r22, r24
   18c46:	29 9d       	mul	r18, r9
   18c48:	60 0d       	add	r22, r0
   18c4a:	71 1d       	adc	r23, r1
   18c4c:	11 24       	eor	r1, r1
   18c4e:	c0 54       	subi	r28, 0x40	; 64
   18c50:	df 4f       	sbci	r29, 0xFF	; 255
   18c52:	79 83       	std	Y+1, r23	; 0x01
   18c54:	68 83       	st	Y, r22
   18c56:	c0 5c       	subi	r28, 0xC0	; 192
   18c58:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1102
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
   18c5a:	f5 01       	movw	r30, r10
   18c5c:	85 91       	lpm	r24, Z+
   18c5e:	94 91       	lpm	r25, Z
   18c60:	cc 53       	subi	r28, 0x3C	; 60
   18c62:	df 4f       	sbci	r29, 0xFF	; 255
   18c64:	e8 81       	ld	r30, Y
   18c66:	f9 81       	ldd	r31, Y+1	; 0x01
   18c68:	c4 5c       	subi	r28, 0xC4	; 196
   18c6a:	d0 40       	sbci	r29, 0x00	; 0
   18c6c:	24 91       	lpm	r18, Z
   18c6e:	c6 54       	subi	r28, 0x46	; 70
   18c70:	df 4f       	sbci	r29, 0xFF	; 255
   18c72:	48 81       	ld	r20, Y
   18c74:	59 81       	ldd	r21, Y+1	; 0x01
   18c76:	ca 5b       	subi	r28, 0xBA	; 186
   18c78:	d0 40       	sbci	r29, 0x00	; 0
   18c7a:	84 0f       	add	r24, r20
   18c7c:	95 1f       	adc	r25, r21
   18c7e:	bc 01       	movw	r22, r24
   18c80:	23 9d       	mul	r18, r3
   18c82:	60 0d       	add	r22, r0
   18c84:	71 1d       	adc	r23, r1
   18c86:	11 24       	eor	r1, r1
   18c88:	ce 53       	subi	r28, 0x3E	; 62
   18c8a:	df 4f       	sbci	r29, 0xFF	; 255
   18c8c:	79 83       	std	Y+1, r23	; 0x01
   18c8e:	68 83       	st	Y, r22
   18c90:	c2 5c       	subi	r28, 0xC2	; 194
   18c92:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1103
          loop_t++;
   18c94:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1104
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
   18c96:	c3 53       	subi	r28, 0x33	; 51
   18c98:	df 4f       	sbci	r29, 0xFF	; 255
   18c9a:	e8 81       	ld	r30, Y
   18c9c:	f9 81       	ldd	r31, Y+1	; 0x01
   18c9e:	cd 5c       	subi	r28, 0xCD	; 205
   18ca0:	d0 40       	sbci	r29, 0x00	; 0
   18ca2:	84 91       	lpm	r24, Z
   18ca4:	98 16       	cp	r9, r24
   18ca6:	10 f0       	brcs	.+4      	; 0x18cac <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2334>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1107
          {
            loop_t = 0;
            loop_r++;
   18ca8:	33 94       	inc	r3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1106
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
          {
            loop_t = 0;
   18caa:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1110
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
   18cac:	c0 53       	subi	r28, 0x30	; 48
   18cae:	df 4f       	sbci	r29, 0xFF	; 255
   18cb0:	e8 81       	ld	r30, Y
   18cb2:	f9 81       	ldd	r31, Y+1	; 0x01
   18cb4:	c0 5d       	subi	r28, 0xD0	; 208
   18cb6:	d0 40       	sbci	r29, 0x00	; 0
   18cb8:	25 91       	lpm	r18, Z+
   18cba:	34 91       	lpm	r19, Z
   18cbc:	ce 52       	subi	r28, 0x2E	; 46
   18cbe:	df 4f       	sbci	r29, 0xFF	; 255
   18cc0:	e8 81       	ld	r30, Y
   18cc2:	f9 81       	ldd	r31, Y+1	; 0x01
   18cc4:	c2 5d       	subi	r28, 0xD2	; 210
   18cc6:	d0 40       	sbci	r29, 0x00	; 0
   18cc8:	45 91       	lpm	r20, Z+
   18cca:	54 91       	lpm	r21, Z
   18ccc:	c8 53       	subi	r28, 0x38	; 56
   18cce:	df 4f       	sbci	r29, 0xFF	; 255
   18cd0:	e8 80       	ld	r14, Y
   18cd2:	f9 80       	ldd	r15, Y+1	; 0x01
   18cd4:	c8 5c       	subi	r28, 0xC8	; 200
   18cd6:	d0 40       	sbci	r29, 0x00	; 0
   18cd8:	ca 53       	subi	r28, 0x3A	; 58
   18cda:	df 4f       	sbci	r29, 0xFF	; 255
   18cdc:	08 81       	ld	r16, Y
   18cde:	19 81       	ldd	r17, Y+1	; 0x01
   18ce0:	c6 5c       	subi	r28, 0xC6	; 198
   18ce2:	d0 40       	sbci	r29, 0x00	; 0
   18ce4:	ce 53       	subi	r28, 0x3E	; 62
   18ce6:	df 4f       	sbci	r29, 0xFF	; 255
   18ce8:	68 81       	ld	r22, Y
   18cea:	79 81       	ldd	r23, Y+1	; 0x01
   18cec:	c2 5c       	subi	r28, 0xC2	; 194
   18cee:	d0 40       	sbci	r29, 0x00	; 0
   18cf0:	c0 54       	subi	r28, 0x40	; 64
   18cf2:	df 4f       	sbci	r29, 0xFF	; 255
   18cf4:	88 81       	ld	r24, Y
   18cf6:	99 81       	ldd	r25, Y+1	; 0x01
   18cf8:	c0 5c       	subi	r28, 0xC0	; 192
   18cfa:	d0 40       	sbci	r29, 0x00	; 0
   18cfc:	0e 94 32 98 	call	0x13064	; 0x13064 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   18d00:	18 2f       	mov	r17, r24
   18d02:	81 e0       	ldi	r24, 0x01	; 1
   18d04:	88 0d       	add	r24, r8
   18d06:	11 23       	and	r17, r17
   18d08:	71 f1       	breq	.+92     	; 0x18d66 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23ee>
   18d0a:	ce 54       	subi	r28, 0x4E	; 78
   18d0c:	df 4f       	sbci	r29, 0xFF	; 255
   18d0e:	88 82       	st	Y, r8
   18d10:	c2 5b       	subi	r28, 0xB2	; 178
   18d12:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1112
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
   18d14:	f2 01       	movw	r30, r4
   18d16:	e8 53       	subi	r30, 0x38	; 56
   18d18:	fd 4f       	sbci	r31, 0xFD	; 253
   18d1a:	e6 0d       	add	r30, r6
   18d1c:	f7 1d       	adc	r31, r7
   18d1e:	25 91       	lpm	r18, Z+
   18d20:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1113
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   18d22:	c2 54       	subi	r28, 0x42	; 66
   18d24:	df 4f       	sbci	r29, 0xFF	; 255
   18d26:	e8 81       	ld	r30, Y
   18d28:	f9 81       	ldd	r31, Y+1	; 0x01
   18d2a:	ce 5b       	subi	r28, 0xBE	; 190
   18d2c:	d0 40       	sbci	r29, 0x00	; 0
   18d2e:	84 91       	lpm	r24, Z
   18d30:	cf 54       	subi	r28, 0x4F	; 79
   18d32:	df 4f       	sbci	r29, 0xFF	; 255
   18d34:	68 81       	ld	r22, Y
   18d36:	c1 5b       	subi	r28, 0xB1	; 177
   18d38:	d0 40       	sbci	r29, 0x00	; 0
   18d3a:	70 e0       	ldi	r23, 0x00	; 0
   18d3c:	48 2d       	mov	r20, r8
   18d3e:	90 e0       	ldi	r25, 0x00	; 0
   18d40:	f9 01       	movw	r30, r18
   18d42:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1114
          ret = true;
   18d44:	c4 53       	subi	r28, 0x34	; 52
   18d46:	df 4f       	sbci	r29, 0xFF	; 255
   18d48:	18 83       	st	Y, r17
   18d4a:	cc 5c       	subi	r28, 0xCC	; 204
   18d4c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1023
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
   18d4e:	ca 54       	subi	r28, 0x4A	; 74
   18d50:	df 4f       	sbci	r29, 0xFF	; 255
   18d52:	f8 81       	ld	r31, Y
   18d54:	c6 5b       	subi	r28, 0xB6	; 182
   18d56:	d0 40       	sbci	r29, 0x00	; 0
   18d58:	ff 5f       	subi	r31, 0xFF	; 255
   18d5a:	ca 54       	subi	r28, 0x4A	; 74
   18d5c:	df 4f       	sbci	r29, 0xFF	; 255
   18d5e:	f8 83       	st	Y, r31
   18d60:	c6 5b       	subi	r28, 0xB6	; 182
   18d62:	d0 40       	sbci	r29, 0x00	; 0
   18d64:	b7 cb       	rjmp	.-2194   	; 0x184d4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1b5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1110
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
   18d66:	88 2e       	mov	r8, r24
   18d68:	de ce       	rjmp	.-580    	; 0x18b26 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x21ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1114
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
          ret = true;
   18d6a:	21 e0       	ldi	r18, 0x01	; 1
   18d6c:	c4 53       	subi	r28, 0x34	; 52
   18d6e:	df 4f       	sbci	r29, 0xFF	; 255
   18d70:	28 83       	st	Y, r18
   18d72:	cc 5c       	subi	r28, 0xCC	; 204
   18d74:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1125
  }


draw_menu_end:
  return ret;
}
   18d76:	c4 53       	subi	r28, 0x34	; 52
   18d78:	df 4f       	sbci	r29, 0xFF	; 255
   18d7a:	88 81       	ld	r24, Y
   18d7c:	cc 5c       	subi	r28, 0xCC	; 204
   18d7e:	d0 40       	sbci	r29, 0x00	; 0
   18d80:	cd 51       	subi	r28, 0x1D	; 29
   18d82:	df 4f       	sbci	r29, 0xFF	; 255
   18d84:	0f b6       	in	r0, 0x3f	; 63
   18d86:	f8 94       	cli
   18d88:	de bf       	out	0x3e, r29	; 62
   18d8a:	0f be       	out	0x3f, r0	; 63
   18d8c:	cd bf       	out	0x3d, r28	; 61
   18d8e:	df 91       	pop	r29
   18d90:	cf 91       	pop	r28
   18d92:	1f 91       	pop	r17
   18d94:	0f 91       	pop	r16
   18d96:	ff 90       	pop	r15
   18d98:	ef 90       	pop	r14
   18d9a:	df 90       	pop	r13
   18d9c:	cf 90       	pop	r12
   18d9e:	bf 90       	pop	r11
   18da0:	af 90       	pop	r10
   18da2:	9f 90       	pop	r9
   18da4:	8f 90       	pop	r8
   18da6:	7f 90       	pop	r7
   18da8:	6f 90       	pop	r6
   18daa:	5f 90       	pop	r5
   18dac:	4f 90       	pop	r4
   18dae:	3f 90       	pop	r3
   18db0:	2f 90       	pop	r2
   18db2:	08 95       	ret

00018db4 <log_error(PubSubClient*, char*) [clone .constprop.125]>:
_Z9log_errorP12PubSubClientPc.constprop.125():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:451
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    mqtt_log_cnt = 0;
  }
}
///////////////////////////////////////////////////////////////////////////
void log_error(PubSubClient *mqtt_client, char *log)
   18db4:	0f 93       	push	r16
   18db6:	1f 93       	push	r17
   18db8:	cf 93       	push	r28
   18dba:	df 93       	push	r29
   18dbc:	00 d0       	rcall	.+0      	; 0x18dbe <log_error(PubSubClient*, char*) [clone .constprop.125]+0xa>
   18dbe:	00 d0       	rcall	.+0      	; 0x18dc0 <log_error(PubSubClient*, char*) [clone .constprop.125]+0xc>
   18dc0:	00 d0       	rcall	.+0      	; 0x18dc2 <log_error(PubSubClient*, char*) [clone .constprop.125]+0xe>
   18dc2:	cd b7       	in	r28, 0x3d	; 61
   18dc4:	de b7       	in	r29, 0x3e	; 62
   18dc6:	8c 01       	movw	r16, r24
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:454
{
  char topic[9];
  strcpy(topic, "log-app");
   18dc8:	64 ef       	ldi	r22, 0xF4	; 244
   18dca:	78 e0       	ldi	r23, 0x08	; 8
   18dcc:	ce 01       	movw	r24, r28
   18dce:	01 96       	adiw	r24, 0x01	; 1
   18dd0:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:455
  send_mqtt_general_payload(mqtt_client, topic, log);
   18dd4:	a8 01       	movw	r20, r16
   18dd6:	be 01       	movw	r22, r28
   18dd8:	6f 5f       	subi	r22, 0xFF	; 255
   18dda:	7f 4f       	sbci	r23, 0xFF	; 255
   18ddc:	8f e2       	ldi	r24, 0x2F	; 47
   18dde:	90 e1       	ldi	r25, 0x10	; 16
   18de0:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:456
}
   18de4:	29 96       	adiw	r28, 0x09	; 9
   18de6:	0f b6       	in	r0, 0x3f	; 63
   18de8:	f8 94       	cli
   18dea:	de bf       	out	0x3e, r29	; 62
   18dec:	0f be       	out	0x3f, r0	; 63
   18dee:	cd bf       	out	0x3d, r28	; 61
   18df0:	df 91       	pop	r29
   18df2:	cf 91       	pop	r28
   18df4:	1f 91       	pop	r17
   18df6:	0f 91       	pop	r16
   18df8:	08 95       	ret

00018dfa <RF24::csn(bool) [clone .constprop.111]>:
_ZN4RF243csnEb.constprop.111():
/home/saric/Arduino/libraries/RF24/RF24.cpp:15
#include "RF24_config.h"
#include "RF24.h"

/****************************************************************************/

void RF24::csn(bool mode)
   18dfa:	cf 93       	push	r28
   18dfc:	df 93       	push	r29
setBitOrder():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:296

  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setBitOrder(uint8_t bitOrder) {
    if (bitOrder == LSBFIRST) SPCR |= _BV(DORD);
    else SPCR &= ~(_BV(DORD));
   18dfe:	9c b5       	in	r25, 0x2c	; 44
   18e00:	9f 7d       	andi	r25, 0xDF	; 223
   18e02:	9c bd       	out	0x2c, r25	; 44
setDataMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:301
  }
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setDataMode(uint8_t dataMode) {
    SPCR = (SPCR & ~SPI_MODE_MASK) | dataMode;
   18e04:	9c b5       	in	r25, 0x2c	; 44
   18e06:	93 7f       	andi	r25, 0xF3	; 243
   18e08:	9c bd       	out	0x2c, r25	; 44
setClockDivider():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:306
  }
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setClockDivider(uint8_t clockDiv) {
    SPCR = (SPCR & ~SPI_CLOCK_MASK) | (clockDiv & SPI_CLOCK_MASK);
   18e0a:	9c b5       	in	r25, 0x2c	; 44
   18e0c:	9c 7f       	andi	r25, 0xFC	; 252
   18e0e:	9c bd       	out	0x2c, r25	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:307
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
   18e10:	9d b5       	in	r25, 0x2d	; 45
   18e12:	91 60       	ori	r25, 0x01	; 1
   18e14:	9d bd       	out	0x2d, r25	; 45
_ZN4RF243csnEb.constprop.111():
/home/saric/Arduino/libraries/RF24/RF24.cpp:69
      if(!mode)
	    _SPI.chipSelect(csn_pin);
#endif

#if !defined (RF24_LINUX)
	digitalWrite(csn_pin,mode);
   18e16:	c1 e1       	ldi	r28, 0x11	; 17
   18e18:	d0 e1       	ldi	r29, 0x10	; 16
   18e1a:	68 2f       	mov	r22, r24
   18e1c:	8a 81       	ldd	r24, Y+2	; 0x02
   18e1e:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/libraries/RF24/RF24.cpp:70
	delayMicroseconds(csDelay);
   18e22:	8c 89       	ldd	r24, Y+20	; 0x14
   18e24:	9d 89       	ldd	r25, Y+21	; 0x15
/home/saric/Arduino/libraries/RF24/RF24.cpp:73
#endif

}
   18e26:	df 91       	pop	r29
   18e28:	cf 91       	pop	r28
/home/saric/Arduino/libraries/RF24/RF24.cpp:70
	    _SPI.chipSelect(csn_pin);
#endif

#if !defined (RF24_LINUX)
	digitalWrite(csn_pin,mode);
	delayMicroseconds(csDelay);
   18e2a:	0c 94 86 59 	jmp	0xb30c	; 0xb30c <delayMicroseconds>

00018e2e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>:
_ZN4RF2414write_registerEhh.constprop.108():
/home/saric/Arduino/libraries/RF24/RF24.cpp:204
  return status;
}

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
   18e2e:	cf 93       	push	r28
   18e30:	df 93       	push	r29
   18e32:	c8 2f       	mov	r28, r24
   18e34:	d6 2f       	mov	r29, r22
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   18e36:	80 e0       	ldi	r24, 0x00	; 0
   18e38:	0e 94 fd c6 	call	0x18dfa	; 0x18dfa <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2414write_registerEhh.constprop.108():
/home/saric/Arduino/libraries/RF24/RF24.cpp:223
	status = *prx++; // status is 1st byte of receive buffer
	endTransaction();
  #else

  beginTransaction();
  status = _SPI.transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
   18e3c:	8c 2f       	mov	r24, r28
   18e3e:	80 62       	ori	r24, 0x20	; 32
   18e40:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
   18e44:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:224
  _SPI.transfer(value);
   18e46:	8d 2f       	mov	r24, r29
   18e48:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   18e4c:	81 e0       	ldi	r24, 0x01	; 1
   18e4e:	0e 94 fd c6 	call	0x18dfa	; 0x18dfa <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2414write_registerEhh.constprop.108():
/home/saric/Arduino/libraries/RF24/RF24.cpp:230
  endTransaction();

  #endif

  return status;
}
   18e52:	8c 2f       	mov	r24, r28
   18e54:	df 91       	pop	r29
   18e56:	cf 91       	pop	r28
   18e58:	08 95       	ret

00018e5a <RF24::read_register(unsigned char) [clone .constprop.107]>:
_ZN4RF2413read_registerEh.constprop.107():
/home/saric/Arduino/libraries/RF24/RF24.cpp:141
  return status;
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
   18e5a:	cf 93       	push	r28
   18e5c:	c8 2f       	mov	r28, r24
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   18e5e:	80 e0       	ldi	r24, 0x00	; 0
   18e60:	0e 94 fd c6 	call	0x18dfa	; 0x18dfa <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2413read_registerEh.constprop.107():
/home/saric/Arduino/libraries/RF24/RF24.cpp:161
  
  endTransaction();
  #else

  beginTransaction();
  _SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
   18e64:	8c 2f       	mov	r24, r28
   18e66:	8f 71       	andi	r24, 0x1F	; 31
   18e68:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:162
  result = _SPI.transfer(0xff);
   18e6c:	8f ef       	ldi	r24, 0xFF	; 255
   18e6e:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
   18e72:	c8 2f       	mov	r28, r24
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   18e74:	81 e0       	ldi	r24, 0x01	; 1
   18e76:	0e 94 fd c6 	call	0x18dfa	; 0x18dfa <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2413read_registerEh.constprop.107():
/home/saric/Arduino/libraries/RF24/RF24.cpp:168
  endTransaction();

  #endif

  return result;
}
   18e7a:	8c 2f       	mov	r24, r28
   18e7c:	cf 91       	pop	r28
   18e7e:	08 95       	ret

00018e80 <RF24::spiTrans(unsigned char) [clone .constprop.105]>:
_ZN4RF248spiTransEh.constprop.105():
/home/saric/Arduino/libraries/RF24/RF24.cpp:350
  return spiTrans( FLUSH_TX );
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd){
   18e80:	cf 93       	push	r28
   18e82:	c8 2f       	mov	r28, r24
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   18e84:	80 e0       	ldi	r24, 0x00	; 0
   18e86:	0e 94 fd c6 	call	0x18dfa	; 0x18dfa <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF248spiTransEh.constprop.105():
/home/saric/Arduino/libraries/RF24/RF24.cpp:355
uint8_t RF24::spiTrans(uint8_t cmd){

  uint8_t status;
  
  beginTransaction();
  status = _SPI.transfer( cmd );
   18e8a:	8c 2f       	mov	r24, r28
   18e8c:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
   18e90:	c8 2f       	mov	r28, r24
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   18e92:	81 e0       	ldi	r24, 0x01	; 1
   18e94:	0e 94 fd c6 	call	0x18dfa	; 0x18dfa <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF248spiTransEh.constprop.105():
/home/saric/Arduino/libraries/RF24/RF24.cpp:359
  beginTransaction();
  status = _SPI.transfer( cmd );
  endTransaction();
  
  return status;
}
   18e98:	8c 2f       	mov	r24, r28
   18e9a:	cf 91       	pop	r28
   18e9c:	08 95       	ret

00018e9e <PubSubClient::loop() [clone .constprop.95]>:
_ZN12PubSubClient4loopEv.constprop.95():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:282
    }

    return len;
}

boolean PubSubClient::loop() {
   18e9e:	3f 92       	push	r3
   18ea0:	4f 92       	push	r4
   18ea2:	5f 92       	push	r5
   18ea4:	6f 92       	push	r6
   18ea6:	7f 92       	push	r7
   18ea8:	8f 92       	push	r8
   18eaa:	9f 92       	push	r9
   18eac:	af 92       	push	r10
   18eae:	bf 92       	push	r11
   18eb0:	cf 92       	push	r12
   18eb2:	df 92       	push	r13
   18eb4:	ef 92       	push	r14
   18eb6:	ff 92       	push	r15
   18eb8:	0f 93       	push	r16
   18eba:	1f 93       	push	r17
   18ebc:	cf 93       	push	r28
   18ebe:	df 93       	push	r29
   18ec0:	1f 92       	push	r1
   18ec2:	cd b7       	in	r28, 0x3d	; 61
   18ec4:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   18ec6:	4d b6       	in	r4, 0x3d	; 61
   18ec8:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:283

    return len;
}

boolean PubSubClient::loop() {
    if (connected()) {
   18eca:	8f e2       	ldi	r24, 0x2F	; 47
   18ecc:	90 e1       	ldi	r25, 0x10	; 16
   18ece:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <PubSubClient::connected()>
   18ed2:	98 2e       	mov	r9, r24
   18ed4:	88 23       	and	r24, r24
   18ed6:	09 f4       	brne	.+2      	; 0x18eda <PubSubClient::loop() [clone .constprop.95]+0x3c>
   18ed8:	45 c0       	rjmp	.+138    	; 0x18f64 <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:284
        unsigned long t = millis();
   18eda:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   18ede:	6b 01       	movw	r12, r22
   18ee0:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:285
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   18ee2:	80 91 37 12 	lds	r24, 0x1237	; 0x801237 <mqtt_client+0x208>
   18ee6:	90 91 38 12 	lds	r25, 0x1238	; 0x801238 <mqtt_client+0x209>
   18eea:	a0 91 39 12 	lds	r26, 0x1239	; 0x801239 <mqtt_client+0x20a>
   18eee:	b0 91 3a 12 	lds	r27, 0x123A	; 0x80123a <mqtt_client+0x20b>
   18ef2:	a7 01       	movw	r20, r14
   18ef4:	96 01       	movw	r18, r12
   18ef6:	28 1b       	sub	r18, r24
   18ef8:	39 0b       	sbc	r19, r25
   18efa:	4a 0b       	sbc	r20, r26
   18efc:	5b 0b       	sbc	r21, r27
   18efe:	da 01       	movw	r26, r20
   18f00:	c9 01       	movw	r24, r18
   18f02:	89 39       	cpi	r24, 0x99	; 153
   18f04:	9a 43       	sbci	r25, 0x3A	; 58
   18f06:	a1 05       	cpc	r26, r1
   18f08:	b1 05       	cpc	r27, r1
   18f0a:	b0 f4       	brcc	.+44     	; 0x18f38 <PubSubClient::loop() [clone .constprop.95]+0x9a>
   18f0c:	80 91 33 12 	lds	r24, 0x1233	; 0x801233 <mqtt_client+0x204>
   18f10:	90 91 34 12 	lds	r25, 0x1234	; 0x801234 <mqtt_client+0x205>
   18f14:	a0 91 35 12 	lds	r26, 0x1235	; 0x801235 <mqtt_client+0x206>
   18f18:	b0 91 36 12 	lds	r27, 0x1236	; 0x801236 <mqtt_client+0x207>
   18f1c:	a7 01       	movw	r20, r14
   18f1e:	96 01       	movw	r18, r12
   18f20:	28 1b       	sub	r18, r24
   18f22:	39 0b       	sbc	r19, r25
   18f24:	4a 0b       	sbc	r20, r26
   18f26:	5b 0b       	sbc	r21, r27
   18f28:	da 01       	movw	r26, r20
   18f2a:	c9 01       	movw	r24, r18
   18f2c:	89 39       	cpi	r24, 0x99	; 153
   18f2e:	9a 43       	sbci	r25, 0x3A	; 58
   18f30:	a1 05       	cpc	r26, r1
   18f32:	b1 05       	cpc	r27, r1
   18f34:	08 f4       	brcc	.+2      	; 0x18f38 <PubSubClient::loop() [clone .constprop.95]+0x9a>
   18f36:	52 c0       	rjmp	.+164    	; 0x18fdc <PubSubClient::loop() [clone .constprop.95]+0x13e>
   18f38:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   18f3c:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:286
            if (pingOutstanding) {
   18f40:	20 91 3b 12 	lds	r18, 0x123B	; 0x80123b <mqtt_client+0x20c>
   18f44:	22 23       	and	r18, r18
   18f46:	39 f1       	breq	.+78     	; 0x18f96 <PubSubClient::loop() [clone .constprop.95]+0xf8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:287
                this->_state = MQTT_CONNECTION_TIMEOUT;
   18f48:	2c ef       	ldi	r18, 0xFC	; 252
   18f4a:	3f ef       	ldi	r19, 0xFF	; 255
   18f4c:	30 93 4b 12 	sts	0x124B, r19	; 0x80124b <mqtt_client+0x21c>
   18f50:	20 93 4a 12 	sts	0x124A, r18	; 0x80124a <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:288
                _client->stop();
   18f54:	dc 01       	movw	r26, r24
   18f56:	ed 91       	ld	r30, X+
   18f58:	fc 91       	ld	r31, X
   18f5a:	04 88       	ldd	r0, Z+20	; 0x14
   18f5c:	f5 89       	ldd	r31, Z+21	; 0x15
   18f5e:	e0 2d       	mov	r30, r0
   18f60:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:289
                return false;
   18f62:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   18f64:	89 2d       	mov	r24, r9
   18f66:	0f b6       	in	r0, 0x3f	; 63
   18f68:	f8 94       	cli
   18f6a:	5e be       	out	0x3e, r5	; 62
   18f6c:	0f be       	out	0x3f, r0	; 63
   18f6e:	4d be       	out	0x3d, r4	; 61
   18f70:	0f 90       	pop	r0
   18f72:	df 91       	pop	r29
   18f74:	cf 91       	pop	r28
   18f76:	1f 91       	pop	r17
   18f78:	0f 91       	pop	r16
   18f7a:	ff 90       	pop	r15
   18f7c:	ef 90       	pop	r14
   18f7e:	df 90       	pop	r13
   18f80:	cf 90       	pop	r12
   18f82:	bf 90       	pop	r11
   18f84:	af 90       	pop	r10
   18f86:	9f 90       	pop	r9
   18f88:	8f 90       	pop	r8
   18f8a:	7f 90       	pop	r7
   18f8c:	6f 90       	pop	r6
   18f8e:	5f 90       	pop	r5
   18f90:	4f 90       	pop	r4
   18f92:	3f 90       	pop	r3
   18f94:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:291
            if (pingOutstanding) {
                this->_state = MQTT_CONNECTION_TIMEOUT;
                _client->stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
   18f96:	20 ec       	ldi	r18, 0xC0	; 192
   18f98:	20 93 31 10 	sts	0x1031, r18	; 0x801031 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:292
                buffer[1] = 0;
   18f9c:	10 92 32 10 	sts	0x1032, r1	; 0x801032 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:293
                _client->write(buffer,2);
   18fa0:	dc 01       	movw	r26, r24
   18fa2:	ed 91       	ld	r30, X+
   18fa4:	fc 91       	ld	r31, X
   18fa6:	02 80       	ldd	r0, Z+2	; 0x02
   18fa8:	f3 81       	ldd	r31, Z+3	; 0x03
   18faa:	e0 2d       	mov	r30, r0
   18fac:	42 e0       	ldi	r20, 0x02	; 2
   18fae:	50 e0       	ldi	r21, 0x00	; 0
   18fb0:	61 e3       	ldi	r22, 0x31	; 49
   18fb2:	70 e1       	ldi	r23, 0x10	; 16
   18fb4:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:294
                lastOutActivity = t;
   18fb6:	c0 92 33 12 	sts	0x1233, r12	; 0x801233 <mqtt_client+0x204>
   18fba:	d0 92 34 12 	sts	0x1234, r13	; 0x801234 <mqtt_client+0x205>
   18fbe:	e0 92 35 12 	sts	0x1235, r14	; 0x801235 <mqtt_client+0x206>
   18fc2:	f0 92 36 12 	sts	0x1236, r15	; 0x801236 <mqtt_client+0x207>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:295
                lastInActivity = t;
   18fc6:	c0 92 37 12 	sts	0x1237, r12	; 0x801237 <mqtt_client+0x208>
   18fca:	d0 92 38 12 	sts	0x1238, r13	; 0x801238 <mqtt_client+0x209>
   18fce:	e0 92 39 12 	sts	0x1239, r14	; 0x801239 <mqtt_client+0x20a>
   18fd2:	f0 92 3a 12 	sts	0x123A, r15	; 0x80123a <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:296
                pingOutstanding = true;
   18fd6:	81 e0       	ldi	r24, 0x01	; 1
   18fd8:	80 93 3b 12 	sts	0x123B, r24	; 0x80123b <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:299
            }
        }
        if (_client->available()) {
   18fdc:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   18fe0:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   18fe4:	dc 01       	movw	r26, r24
   18fe6:	ed 91       	ld	r30, X+
   18fe8:	fc 91       	ld	r31, X
   18fea:	00 84       	ldd	r0, Z+8	; 0x08
   18fec:	f1 85       	ldd	r31, Z+9	; 0x09
   18fee:	e0 2d       	mov	r30, r0
   18ff0:	19 95       	eicall
   18ff2:	89 2b       	or	r24, r25
   18ff4:	09 f4       	brne	.+2      	; 0x18ff8 <PubSubClient::loop() [clone .constprop.95]+0x15a>
   18ff6:	b6 cf       	rjmp	.-148    	; 0x18f64 <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:301
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   18ff8:	ce 01       	movw	r24, r28
   18ffa:	01 96       	adiw	r24, 0x01	; 1
   18ffc:	0e 94 69 b1 	call	0x162d2	; 0x162d2 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]>
   19000:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:304
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   19002:	89 2b       	or	r24, r25
   19004:	09 f4       	brne	.+2      	; 0x19008 <PubSubClient::loop() [clone .constprop.95]+0x16a>
   19006:	ae cf       	rjmp	.-164    	; 0x18f64 <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:305
                lastInActivity = t;
   19008:	c0 92 37 12 	sts	0x1237, r12	; 0x801237 <mqtt_client+0x208>
   1900c:	d0 92 38 12 	sts	0x1238, r13	; 0x801238 <mqtt_client+0x209>
   19010:	e0 92 39 12 	sts	0x1239, r14	; 0x801239 <mqtt_client+0x20a>
   19014:	f0 92 3a 12 	sts	0x123A, r15	; 0x80123a <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:306
                uint8_t type = buffer[0]&0xF0;
   19018:	80 90 31 10 	lds	r8, 0x1031	; 0x801031 <mqtt_client+0x2>
   1901c:	88 2d       	mov	r24, r8
   1901e:	80 7f       	andi	r24, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:307
                if (type == MQTTPUBLISH) {
   19020:	80 33       	cpi	r24, 0x30	; 48
   19022:	09 f0       	breq	.+2      	; 0x19026 <PubSubClient::loop() [clone .constprop.95]+0x188>
   19024:	83 c0       	rjmp	.+262    	; 0x1912c <PubSubClient::loop() [clone .constprop.95]+0x28e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:308
                    if (callback) {
   19026:	a0 90 3c 12 	lds	r10, 0x123C	; 0x80123c <mqtt_client+0x20d>
   1902a:	b0 90 3d 12 	lds	r11, 0x123D	; 0x80123d <mqtt_client+0x20e>
   1902e:	a1 14       	cp	r10, r1
   19030:	b1 04       	cpc	r11, r1
   19032:	09 f4       	brne	.+2      	; 0x19036 <PubSubClient::loop() [clone .constprop.95]+0x198>
   19034:	97 cf       	rjmp	.-210    	; 0x18f64 <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:331
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   19036:	6d b6       	in	r6, 0x3d	; 61
   19038:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:309
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   1903a:	69 81       	ldd	r22, Y+1	; 0x01
   1903c:	70 e0       	ldi	r23, 0x00	; 0
   1903e:	fb 01       	movw	r30, r22
   19040:	e1 5d       	subi	r30, 0xD1	; 209
   19042:	ff 4e       	sbci	r31, 0xEF	; 239
   19044:	23 81       	ldd	r18, Z+3	; 0x03
   19046:	30 e0       	ldi	r19, 0x00	; 0
   19048:	32 2f       	mov	r19, r18
   1904a:	22 27       	eor	r18, r18
   1904c:	84 81       	ldd	r24, Z+4	; 0x04
   1904e:	28 0f       	add	r18, r24
   19050:	31 1d       	adc	r19, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:310
                        char topic[tl+1];
   19052:	c9 01       	movw	r24, r18
   19054:	01 96       	adiw	r24, 0x01	; 1
   19056:	ed b7       	in	r30, 0x3d	; 61
   19058:	fe b7       	in	r31, 0x3e	; 62
   1905a:	e8 1b       	sub	r30, r24
   1905c:	f9 0b       	sbc	r31, r25
   1905e:	0f b6       	in	r0, 0x3f	; 63
   19060:	f8 94       	cli
   19062:	fe bf       	out	0x3e, r31	; 62
   19064:	0f be       	out	0x3f, r0	; 63
   19066:	ed bf       	out	0x3d, r30	; 61
   19068:	8d b7       	in	r24, 0x3d	; 61
   1906a:	9e b7       	in	r25, 0x3e	; 62
   1906c:	01 96       	adiw	r24, 0x01	; 1
   1906e:	db 01       	movw	r26, r22
   19070:	ac 5c       	subi	r26, 0xCC	; 204
   19072:	bf 4e       	sbci	r27, 0xEF	; 239
   19074:	fc 01       	movw	r30, r24
   19076:	8c 01       	movw	r16, r24
   19078:	02 0f       	add	r16, r18
   1907a:	13 1f       	adc	r17, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:311
                        for (uint16_t i=0;i<tl;i++) {
   1907c:	e0 17       	cp	r30, r16
   1907e:	f1 07       	cpc	r31, r17
   19080:	19 f0       	breq	.+6      	; 0x19088 <PubSubClient::loop() [clone .constprop.95]+0x1ea>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:312
                            topic[i] = buffer[llen+3+i];
   19082:	3d 90       	ld	r3, X+
   19084:	31 92       	st	Z+, r3
   19086:	fa cf       	rjmp	.-12     	; 0x1907c <PubSubClient::loop() [clone .constprop.95]+0x1de>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:314
                        }
                        topic[tl] = 0;
   19088:	10 82       	st	Z, r1
   1908a:	da 01       	movw	r26, r20
   1908c:	a6 1b       	sub	r26, r22
   1908e:	b7 0b       	sbc	r27, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:316
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   19090:	f8 2d       	mov	r31, r8
   19092:	f6 70       	andi	r31, 0x06	; 6
   19094:	8f 2e       	mov	r8, r31
   19096:	42 e0       	ldi	r20, 0x02	; 2
   19098:	f4 13       	cpse	r31, r20
   1909a:	3c c0       	rjmp	.+120    	; 0x19114 <PubSubClient::loop() [clone .constprop.95]+0x276>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:317
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   1909c:	62 0f       	add	r22, r18
   1909e:	73 1f       	adc	r23, r19
   190a0:	fb 01       	movw	r30, r22
   190a2:	e1 5d       	subi	r30, 0xD1	; 209
   190a4:	ff 4e       	sbci	r31, 0xEF	; 239
   190a6:	45 81       	ldd	r20, Z+5	; 0x05
   190a8:	50 e0       	ldi	r21, 0x00	; 0
   190aa:	54 2f       	mov	r21, r20
   190ac:	44 27       	eor	r20, r20
   190ae:	06 81       	ldd	r16, Z+6	; 0x06
   190b0:	04 0f       	add	r16, r20
   190b2:	15 2f       	mov	r17, r21
   190b4:	11 1d       	adc	r17, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   190b6:	ad 01       	movw	r20, r26
   190b8:	42 1b       	sub	r20, r18
   190ba:	53 0b       	sbc	r21, r19
   190bc:	45 50       	subi	r20, 0x05	; 5
   190be:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:318
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
                            payload = buffer+llen+3+tl+2;
   190c0:	6a 5c       	subi	r22, 0xCA	; 202
   190c2:	7f 4e       	sbci	r23, 0xEF	; 239
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            callback(topic,payload,len-llen-3-tl-2);
   190c4:	f5 01       	movw	r30, r10
   190c6:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:321

                            buffer[0] = MQTTPUBACK;
   190c8:	80 e4       	ldi	r24, 0x40	; 64
   190ca:	80 93 31 10 	sts	0x1031, r24	; 0x801031 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:322
                            buffer[1] = 2;
   190ce:	80 92 32 10 	sts	0x1032, r8	; 0x801032 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:323
                            buffer[2] = (msgId >> 8);
   190d2:	10 93 33 10 	sts	0x1033, r17	; 0x801033 <mqtt_client+0x4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:324
                            buffer[3] = (msgId & 0xFF);
   190d6:	00 93 34 10 	sts	0x1034, r16	; 0x801034 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:325
                            _client->write(buffer,4);
   190da:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   190de:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   190e2:	dc 01       	movw	r26, r24
   190e4:	ed 91       	ld	r30, X+
   190e6:	fc 91       	ld	r31, X
   190e8:	02 80       	ldd	r0, Z+2	; 0x02
   190ea:	f3 81       	ldd	r31, Z+3	; 0x03
   190ec:	e0 2d       	mov	r30, r0
   190ee:	44 e0       	ldi	r20, 0x04	; 4
   190f0:	50 e0       	ldi	r21, 0x00	; 0
   190f2:	61 e3       	ldi	r22, 0x31	; 49
   190f4:	70 e1       	ldi	r23, 0x10	; 16
   190f6:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:326
                            lastOutActivity = t;
   190f8:	c0 92 33 12 	sts	0x1233, r12	; 0x801233 <mqtt_client+0x204>
   190fc:	d0 92 34 12 	sts	0x1234, r13	; 0x801234 <mqtt_client+0x205>
   19100:	e0 92 35 12 	sts	0x1235, r14	; 0x801235 <mqtt_client+0x206>
   19104:	f0 92 36 12 	sts	0x1236, r15	; 0x801236 <mqtt_client+0x207>
   19108:	0f b6       	in	r0, 0x3f	; 63
   1910a:	f8 94       	cli
   1910c:	7e be       	out	0x3e, r7	; 62
   1910e:	0f be       	out	0x3f, r0	; 63
   19110:	6d be       	out	0x3d, r6	; 61
   19112:	28 cf       	rjmp	.-432    	; 0x18f64 <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   19114:	ad 01       	movw	r20, r26
   19116:	42 1b       	sub	r20, r18
   19118:	53 0b       	sbc	r21, r19
   1911a:	43 50       	subi	r20, 0x03	; 3
   1911c:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:329
                            buffer[3] = (msgId & 0xFF);
                            _client->write(buffer,4);
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
   1911e:	62 0f       	add	r22, r18
   19120:	73 1f       	adc	r23, r19
   19122:	6c 5c       	subi	r22, 0xCC	; 204
   19124:	7f 4e       	sbci	r23, 0xEF	; 239
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330
                            callback(topic,payload,len-llen-3-tl);
   19126:	f5 01       	movw	r30, r10
   19128:	19 95       	eicall
   1912a:	ee cf       	rjmp	.-36     	; 0x19108 <PubSubClient::loop() [clone .constprop.95]+0x26a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:333
                        }
                    }
                } else if (type == MQTTPINGREQ) {
   1912c:	80 3c       	cpi	r24, 0xC0	; 192
   1912e:	a9 f4       	brne	.+42     	; 0x1915a <PubSubClient::loop() [clone .constprop.95]+0x2bc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:334
                    buffer[0] = MQTTPINGRESP;
   19130:	80 ed       	ldi	r24, 0xD0	; 208
   19132:	80 93 31 10 	sts	0x1031, r24	; 0x801031 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:335
                    buffer[1] = 0;
   19136:	10 92 32 10 	sts	0x1032, r1	; 0x801032 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:336
                    _client->write(buffer,2);
   1913a:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   1913e:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   19142:	dc 01       	movw	r26, r24
   19144:	ed 91       	ld	r30, X+
   19146:	fc 91       	ld	r31, X
   19148:	02 80       	ldd	r0, Z+2	; 0x02
   1914a:	f3 81       	ldd	r31, Z+3	; 0x03
   1914c:	e0 2d       	mov	r30, r0
   1914e:	42 e0       	ldi	r20, 0x02	; 2
   19150:	50 e0       	ldi	r21, 0x00	; 0
   19152:	61 e3       	ldi	r22, 0x31	; 49
   19154:	70 e1       	ldi	r23, 0x10	; 16
   19156:	19 95       	eicall
   19158:	05 cf       	rjmp	.-502    	; 0x18f64 <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:337
                } else if (type == MQTTPINGRESP) {
   1915a:	80 3d       	cpi	r24, 0xD0	; 208
   1915c:	09 f0       	breq	.+2      	; 0x19160 <PubSubClient::loop() [clone .constprop.95]+0x2c2>
   1915e:	02 cf       	rjmp	.-508    	; 0x18f64 <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:338
                    pingOutstanding = false;
   19160:	10 92 3b 12 	sts	0x123B, r1	; 0x80123b <mqtt_client+0x20c>
   19164:	ff ce       	rjmp	.-514    	; 0x18f64 <PubSubClient::loop() [clone .constprop.95]+0xc6>

00019166 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>:
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.91():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:163
    SPI.endTransaction();

    return _len;
}

void W5500Class::execCmdSn(SOCKET s, SockCMD _cmd) {
   19166:	cf 93       	push	r28
   19168:	c8 2f       	mov	r28, r24
   1916a:	46 2f       	mov	r20, r22
writeSnCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:306
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
   1916c:	61 e0       	ldi	r22, 0x01	; 1
   1916e:	70 e0       	ldi	r23, 0x00	; 0
   19170:	0e 94 93 78 	call	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
readSnCR():
   19174:	61 e0       	ldi	r22, 0x01	; 1
   19176:	70 e0       	ldi	r23, 0x00	; 0
   19178:	8c 2f       	mov	r24, r28
   1917a:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.91():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:167
    // Send command to socket
    writeSnCR(s, _cmd);
    // Wait for command to complete
    while (readSnCR(s))
   1917e:	81 11       	cpse	r24, r1
   19180:	f9 cf       	rjmp	.-14     	; 0x19174 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]+0xe>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:169
    ;
}
   19182:	cf 91       	pop	r28
   19184:	08 95       	ret

00019186 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]>:
_Z6sockethhjh.part.0.constprop.90():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:16

/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for w5500 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
   19186:	0f 93       	push	r16
   19188:	1f 93       	push	r17
   1918a:	cf 93       	push	r28
   1918c:	df 93       	push	r29
   1918e:	c8 2f       	mov	r28, r24
   19190:	d6 2f       	mov	r29, r22
   19192:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:20
{
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
  {
    close(s);
   19194:	0e 94 9c 78 	call	0xf138	; 0xf138 <close(unsigned char)>
writeSnMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:305
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
   19198:	4d 2f       	mov	r20, r29
   1919a:	70 e0       	ldi	r23, 0x00	; 0
   1919c:	60 e0       	ldi	r22, 0x00	; 0
   1919e:	8c 2f       	mov	r24, r28
   191a0:	0e 94 93 78 	call	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.90():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:22
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
   191a4:	01 15       	cp	r16, r1
   191a6:	11 05       	cpc	r17, r1
   191a8:	b9 f0       	breq	.+46     	; 0x191d8 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]+0x52>
writeSnPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:309
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
   191aa:	41 2f       	mov	r20, r17
   191ac:	64 e0       	ldi	r22, 0x04	; 4
   191ae:	70 e0       	ldi	r23, 0x00	; 0
   191b0:	8c 2f       	mov	r24, r28
   191b2:	0e 94 93 78 	call	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   191b6:	40 2f       	mov	r20, r16
   191b8:	65 e0       	ldi	r22, 0x05	; 5
   191ba:	70 e0       	ldi	r23, 0x00	; 0
   191bc:	8c 2f       	mov	r24, r28
   191be:	0e 94 93 78 	call	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.90():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:30
    else {
      local_port++; // if don't set the source port, set local_port number.
      w5500.writeSnPORT(s, local_port);
    }

    w5500.execCmdSn(s, Sock_OPEN);
   191c2:	61 e0       	ldi	r22, 0x01	; 1
   191c4:	70 e0       	ldi	r23, 0x00	; 0
   191c6:	8c 2f       	mov	r24, r28
   191c8:	0e 94 b3 c8 	call	0x19166	; 0x19166 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:36
    
    return 1;
  }

  return 0;
}
   191cc:	81 e0       	ldi	r24, 0x01	; 1
   191ce:	df 91       	pop	r29
   191d0:	cf 91       	pop	r28
   191d2:	1f 91       	pop	r17
   191d4:	0f 91       	pop	r16
   191d6:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:26
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
      w5500.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
   191d8:	00 91 82 12 	lds	r16, 0x1282	; 0x801282 <local_port>
   191dc:	10 91 83 12 	lds	r17, 0x1283	; 0x801283 <local_port+0x1>
   191e0:	0f 5f       	subi	r16, 0xFF	; 255
   191e2:	1f 4f       	sbci	r17, 0xFF	; 255
   191e4:	10 93 83 12 	sts	0x1283, r17	; 0x801283 <local_port+0x1>
   191e8:	00 93 82 12 	sts	0x1282, r16	; 0x801282 <local_port>
   191ec:	de cf       	rjmp	.-68     	; 0x191aa <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]+0x24>

000191ee <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.86]>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.86():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:136
{
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
   191ee:	8f 92       	push	r8
   191f0:	9f 92       	push	r9
   191f2:	af 92       	push	r10
   191f4:	bf 92       	push	r11
   191f6:	cf 92       	push	r12
   191f8:	df 92       	push	r13
   191fa:	ef 92       	push	r14
   191fc:	ff 92       	push	r15
   191fe:	0f 93       	push	r16
   19200:	1f 93       	push	r17
   19202:	cf 93       	push	r28
   19204:	5c 01       	movw	r10, r24
   19206:	6b 01       	movw	r12, r22
   19208:	7a 01       	movw	r14, r20
   1920a:	89 01       	movw	r16, r18
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:30
SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;

void W5500Class::init(uint8_t ss_pin)
{
  SPI_CS = ss_pin;
   1920c:	80 91 10 0e 	lds	r24, 0x0E10	; 0x800e10 <Ethernet+0xc>
   19210:	80 93 b4 0c 	sts	0x0CB4, r24	; 0x800cb4 <SPI_CS>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:32

  delay(1000);
   19214:	68 ee       	ldi	r22, 0xE8	; 232
   19216:	73 e0       	ldi	r23, 0x03	; 3
   19218:	80 e0       	ldi	r24, 0x00	; 0
   1921a:	90 e0       	ldi	r25, 0x00	; 0
   1921c:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
initSS():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:340
private:
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
   19220:	61 e0       	ldi	r22, 0x01	; 1
   19222:	80 91 b4 0c 	lds	r24, 0x0CB4	; 0x800cb4 <SPI_CS>
   19226:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:34
  initSS();
  SPI.begin();
   1922a:	0e 94 e5 80 	call	0x101ca	; 0x101ca <SPIClass::begin()>
readMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   1922e:	60 e0       	ldi	r22, 0x00	; 0
   19230:	90 e0       	ldi	r25, 0x00	; 0
   19232:	80 e0       	ldi	r24, 0x00	; 0
   19234:	0e 94 21 78 	call	0xf042	; 0xf042 <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv.isra.1():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:417
//  readPHYCFGR();
  return read(0x002E, 0x00);
}

void W5500Class::swReset() {
  writeMR( (readMR() | 0x80) );
   19238:	48 2f       	mov	r20, r24
   1923a:	40 68       	ori	r20, 0x80	; 128
writeMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   1923c:	64 e0       	ldi	r22, 0x04	; 4
   1923e:	90 e0       	ldi	r25, 0x00	; 0
   19240:	80 e0       	ldi	r24, 0x00	; 0
   19242:	0e 94 72 78 	call	0xf0e4	; 0xf0e4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   19246:	cc e0       	ldi	r28, 0x0C	; 12
   19248:	88 e0       	ldi	r24, 0x08	; 8
   1924a:	88 2e       	mov	r8, r24
   1924c:	91 2c       	mov	r9, r1
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:38
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
    uint8_t cntl_byte = (0x0C + (i<<5));
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
   1924e:	42 e0       	ldi	r20, 0x02	; 2
   19250:	6c 2f       	mov	r22, r28
   19252:	8e e1       	ldi	r24, 0x1E	; 30
   19254:	90 e0       	ldi	r25, 0x00	; 0
   19256:	0e 94 72 78 	call	0xf0e4	; 0xf0e4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:39
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
   1925a:	42 e0       	ldi	r20, 0x02	; 2
   1925c:	6c 2f       	mov	r22, r28
   1925e:	8f e1       	ldi	r24, 0x1F	; 31
   19260:	90 e0       	ldi	r25, 0x00	; 0
   19262:	0e 94 72 78 	call	0xf0e4	; 0xf0e4 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   19266:	81 e0       	ldi	r24, 0x01	; 1
   19268:	88 1a       	sub	r8, r24
   1926a:	91 08       	sbc	r9, r1
   1926c:	c0 5e       	subi	r28, 0xE0	; 224
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:36

  delay(1000);
  initSS();
  SPI.begin();
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
   1926e:	81 14       	cp	r8, r1
   19270:	91 04       	cpc	r9, r1
   19272:	69 f7       	brne	.-38     	; 0x1924e <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.86]+0x60>
writeSHAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:237
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
   19274:	26 e0       	ldi	r18, 0x06	; 6
   19276:	30 e0       	ldi	r19, 0x00	; 0
   19278:	49 e1       	ldi	r20, 0x19	; 25
   1927a:	5e e0       	ldi	r21, 0x0E	; 14
   1927c:	64 e0       	ldi	r22, 0x04	; 4
   1927e:	89 e0       	ldi	r24, 0x09	; 9
   19280:	90 e0       	ldi	r25, 0x00	; 0
   19282:	0e 94 40 78 	call	0xf080	; 0xf080 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   19286:	a5 01       	movw	r20, r10
   19288:	4e 5f       	subi	r20, 0xFE	; 254
   1928a:	5f 4f       	sbci	r21, 0xFF	; 255
writeSIPR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:238
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
   1928c:	24 e0       	ldi	r18, 0x04	; 4
   1928e:	30 e0       	ldi	r19, 0x00	; 0
   19290:	64 e0       	ldi	r22, 0x04	; 4
   19292:	8f e0       	ldi	r24, 0x0F	; 15
   19294:	90 e0       	ldi	r25, 0x00	; 0
   19296:	0e 94 40 78 	call	0xf080	; 0xf080 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40
   1929a:	a7 01       	movw	r20, r14
   1929c:	4e 5f       	subi	r20, 0xFE	; 254
   1929e:	5f 4f       	sbci	r21, 0xFF	; 255
writeGAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:235
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
   192a0:	24 e0       	ldi	r18, 0x04	; 4
   192a2:	30 e0       	ldi	r19, 0x00	; 0
   192a4:	64 e0       	ldi	r22, 0x04	; 4
   192a6:	81 e0       	ldi	r24, 0x01	; 1
   192a8:	90 e0       	ldi	r25, 0x00	; 0
   192aa:	0e 94 40 78 	call	0xf080	; 0xf080 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40
   192ae:	a8 01       	movw	r20, r16
   192b0:	4e 5f       	subi	r20, 0xFE	; 254
   192b2:	5f 4f       	sbci	r21, 0xFF	; 255
writeSUBR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:236
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
   192b4:	24 e0       	ldi	r18, 0x04	; 4
   192b6:	30 e0       	ldi	r19, 0x00	; 0
   192b8:	64 e0       	ldi	r22, 0x04	; 4
   192ba:	85 e0       	ldi	r24, 0x05	; 5
   192bc:	90 e0       	ldi	r25, 0x00	; 0
   192be:	0e 94 40 78 	call	0xf080	; 0xf080 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   192c2:	f6 01       	movw	r30, r12
   192c4:	82 81       	ldd	r24, Z+2	; 0x02
   192c6:	93 81       	ldd	r25, Z+3	; 0x03
   192c8:	a4 81       	ldd	r26, Z+4	; 0x04
   192ca:	b5 81       	ldd	r27, Z+5	; 0x05
   192cc:	80 93 06 0e 	sts	0x0E06, r24	; 0x800e06 <Ethernet+0x2>
   192d0:	90 93 07 0e 	sts	0x0E07, r25	; 0x800e07 <Ethernet+0x3>
   192d4:	a0 93 08 0e 	sts	0x0E08, r26	; 0x800e08 <Ethernet+0x4>
   192d8:	b0 93 09 0e 	sts	0x0E09, r27	; 0x800e09 <Ethernet+0x5>
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.86():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:144
  w5500.setMACAddress(mac);
  w5500.setIPAddress(local_ip.raw_address());
  w5500.setGatewayIp(gateway.raw_address());
  w5500.setSubnetMask(subnet.raw_address());
  _dnsServerAddress = dns_server;
}
   192dc:	cf 91       	pop	r28
   192de:	1f 91       	pop	r17
   192e0:	0f 91       	pop	r16
   192e2:	ff 90       	pop	r15
   192e4:	ef 90       	pop	r14
   192e6:	df 90       	pop	r13
   192e8:	cf 90       	pop	r12
   192ea:	bf 90       	pop	r11
   192ec:	af 90       	pop	r10
   192ee:	9f 90       	pop	r9
   192f0:	8f 90       	pop	r8
   192f2:	08 95       	ret

000192f4 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.85]>:
_ZN13LCDWIKI_TOUCH11TP_SetOnOffEh.constprop.85():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:74
uint8_t LCDWIKI_TOUCH::TP_GetBacklight(void)
{
return backlight;
}

void LCDWIKI_TOUCH::TP_SetOnOff(uint8_t mode)
   192f4:	1f 93       	push	r17
   192f6:	cf 93       	push	r28
   192f8:	df 93       	push	r29
   192fa:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:76
{
onoff_mode = mode;
   192fc:	c6 e9       	ldi	r28, 0x96	; 150
   192fe:	df e0       	ldi	r29, 0x0F	; 15
   19300:	88 8b       	std	Y+16, r24	; 0x10
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:77
TCS_LOW;
   19302:	e9 89       	ldd	r30, Y+17	; 0x11
   19304:	fa 89       	ldd	r31, Y+18	; 0x12
   19306:	90 81       	ld	r25, Z
   19308:	8d 8d       	ldd	r24, Y+29	; 0x1d
   1930a:	80 95       	com	r24
   1930c:	89 23       	and	r24, r25
   1930e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:78
SDCS_LOW;
   19310:	eb 8d       	ldd	r30, Y+27	; 0x1b
   19312:	fc 8d       	ldd	r31, Y+28	; 0x1c
   19314:	90 81       	ld	r25, Z
   19316:	8a a1       	ldd	r24, Y+34	; 0x22
   19318:	80 95       	com	r24
   1931a:	89 23       	and	r24, r25
   1931c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:79
delay_hus(200);
   1931e:	68 ec       	ldi	r22, 0xC8	; 200
   19320:	70 e0       	ldi	r23, 0x00	; 0
   19322:	80 e0       	ldi	r24, 0x00	; 0
   19324:	90 e0       	ldi	r25, 0x00	; 0
   19326:	0e 94 e4 81 	call	0x103c8	; 0x103c8 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:80
TCS_HIGH;
   1932a:	e9 89       	ldd	r30, Y+17	; 0x11
   1932c:	fa 89       	ldd	r31, Y+18	; 0x12
   1932e:	80 81       	ld	r24, Z
   19330:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19332:	89 2b       	or	r24, r25
   19334:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:81
SDCS_HIGH;
   19336:	eb 8d       	ldd	r30, Y+27	; 0x1b
   19338:	fc 8d       	ldd	r31, Y+28	; 0x1c
   1933a:	80 81       	ld	r24, Z
   1933c:	9a a1       	ldd	r25, Y+34	; 0x22
   1933e:	89 2b       	or	r24, r25
   19340:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
TP_Write_Byte_LowSpeed(SET_ON_OFF);
   19342:	86 e5       	ldi	r24, 0x56	; 86
   19344:	0e 94 1d ab 	call	0x1563a	; 0x1563a <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:83
TP_Write_Byte_LowSpeed(mode);
   19348:	81 2f       	mov	r24, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:84
}
   1934a:	df 91       	pop	r29
   1934c:	cf 91       	pop	r28
   1934e:	1f 91       	pop	r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:83
SDCS_LOW;
delay_hus(200);
TCS_HIGH;
SDCS_HIGH;
TP_Write_Byte_LowSpeed(SET_ON_OFF);
TP_Write_Byte_LowSpeed(mode);
   19350:	0c 94 1d ab 	jmp	0x1563a	; 0x1563a <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>

00019354 <EEPROM_CAT25::endCommand() [clone .constprop.80]>:
_ZN12EEPROM_CAT2510endCommandEv.constprop.80():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:215
  _spi->transfer((uint8_t)(address & 0xFF));
}

void EEPROM_CAT25::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   19354:	61 e0       	ldi	r22, 0x01	; 1
   19356:	80 91 75 0e 	lds	r24, 0x0E75	; 0x800e75 <SROM+0xa>
   1935a:	0c 94 0b 59 	jmp	0xb216	; 0xb216 <digitalWrite>

0001935e <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>:
_ZN12EEPROM_CAT2512startCommandEhm.constprop.78():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:180
  endCommand();

  return(length);
}

void EEPROM_CAT25::startCommand(uint8_t command, const uint32_t address)
   1935e:	cf 93       	push	r28
   19360:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:183
{
  //_spi->beginTransaction();
  digitalWrite(_chipSelect, LOW);
   19362:	60 e0       	ldi	r22, 0x00	; 0
   19364:	80 91 75 0e 	lds	r24, 0x0E75	; 0x800e75 <SROM+0xa>
   19368:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:193
    } else if (command == EEPROM_CAT25_COMMAND_WRITE) {
      command = EEPROM_CAT25_COMMAND_WRITE_A8_HIGH;
    }
  }

  _spi->transfer(command);
   1936c:	6c 2f       	mov	r22, r28
   1936e:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   19372:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
   19376:	0e 94 1b 81 	call	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:195

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
   1937a:	c2 50       	subi	r28, 0x02	; 2
   1937c:	c2 30       	cpi	r28, 0x02	; 2
   1937e:	a8 f5       	brcc	.+106    	; 0x193ea <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]+0x8c>
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:202
  }
}

void EEPROM_CAT25::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
   19380:	80 91 6f 0e 	lds	r24, 0x0E6F	; 0x800e6f <SROM+0x4>
   19384:	90 91 70 0e 	lds	r25, 0x0E70	; 0x800e70 <SROM+0x5>
   19388:	a0 91 71 0e 	lds	r26, 0x0E71	; 0x800e71 <SROM+0x6>
   1938c:	b0 91 72 0e 	lds	r27, 0x0E72	; 0x800e72 <SROM+0x7>
   19390:	01 97       	sbiw	r24, 0x01	; 1
   19392:	a1 40       	sbci	r26, 0x01	; 1
   19394:	b1 05       	cpc	r27, r1
   19396:	38 f0       	brcs	.+14     	; 0x193a6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]+0x48>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:203
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   19398:	60 e0       	ldi	r22, 0x00	; 0
   1939a:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   1939e:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
   193a2:	0e 94 1b 81 	call	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:206
  }

  if ((_capacity > 0x100) && (_device != CAT25040)) {
   193a6:	80 91 6f 0e 	lds	r24, 0x0E6F	; 0x800e6f <SROM+0x4>
   193aa:	90 91 70 0e 	lds	r25, 0x0E70	; 0x800e70 <SROM+0x5>
   193ae:	a0 91 71 0e 	lds	r26, 0x0E71	; 0x800e71 <SROM+0x6>
   193b2:	b0 91 72 0e 	lds	r27, 0x0E72	; 0x800e72 <SROM+0x7>
   193b6:	81 30       	cpi	r24, 0x01	; 1
   193b8:	91 40       	sbci	r25, 0x01	; 1
   193ba:	a1 05       	cpc	r26, r1
   193bc:	b1 05       	cpc	r27, r1
   193be:	68 f0       	brcs	.+26     	; 0x193da <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]+0x7c>
   193c0:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <SROM+0x2>
   193c4:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <SROM+0x3>
   193c8:	0b 97       	sbiw	r24, 0x0b	; 11
   193ca:	39 f0       	breq	.+14     	; 0x193da <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]+0x7c>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:207
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   193cc:	60 e0       	ldi	r22, 0x00	; 0
   193ce:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   193d2:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
   193d6:	0e 94 1b 81 	call	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   193da:	60 e0       	ldi	r22, 0x00	; 0
   193dc:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   193e0:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.78():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   193e4:	cf 91       	pop	r28
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   193e6:	0c 94 1b 81 	jmp	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.78():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   193ea:	cf 91       	pop	r28
   193ec:	08 95       	ret

000193ee <EEPROM_CAT25::getStatusRegister() [clone .constprop.77]>:
_ZN12EEPROM_CAT2517getStatusRegisterEv.constprop.77():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:42
void EEPROM_CAT25::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t EEPROM_CAT25::getStatusRegister(void)
   193ee:	cf 93       	push	r28
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:44
{
  startCommand(EEPROM_CAT25_COMMAND_RDSR, 0);
   193f0:	85 e0       	ldi	r24, 0x05	; 5
   193f2:	0e 94 af c9 	call	0x1935e	; 0x1935e <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:45
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   193f6:	6f ef       	ldi	r22, 0xFF	; 255
   193f8:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   193fc:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
   19400:	0e 94 1b 81 	call	0x10236	; 0x10236 <SoftSPIB::transfer(unsigned char)>
   19404:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:46
  endCommand();
   19406:	0e 94 aa c9 	call	0x19354	; 0x19354 <EEPROM_CAT25::endCommand() [clone .constprop.80]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:48
  return(ret);
}
   1940a:	8c 2f       	mov	r24, r28
   1940c:	cf 91       	pop	r28
   1940e:	08 95       	ret

00019410 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]>:
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.65():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:747
}

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
   19410:	0f 93       	push	r16
   19412:	1f 93       	push	r17
   19414:	cf 93       	push	r28
   19416:	df 93       	push	r29
   19418:	00 d0       	rcall	.+0      	; 0x1941a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0xa>
   1941a:	00 d0       	rcall	.+0      	; 0x1941c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0xc>
   1941c:	cd b7       	in	r28, 0x3d	; 61
   1941e:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:749
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
   19420:	48 2f       	mov	r20, r24
   19422:	43 70       	andi	r20, 0x03	; 3
   19424:	50 e0       	ldi	r21, 0x00	; 0
   19426:	50 93 d0 0f 	sts	0x0FD0, r21	; 0x800fd0 <my_lcd+0x17>
   1942a:	40 93 cf 0f 	sts	0x0FCF, r20	; 0x800fcf <my_lcd+0x16>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750
    width = (rotation & 1) ? HEIGHT : WIDTH;
   1942e:	28 2f       	mov	r18, r24
   19430:	21 70       	andi	r18, 0x01	; 1
   19432:	80 ff       	sbrs	r24, 0
   19434:	3d c1       	rjmp	.+634    	; 0x196b0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2a0>
   19436:	80 91 c9 0f 	lds	r24, 0x0FC9	; 0x800fc9 <my_lcd+0x10>
   1943a:	90 91 ca 0f 	lds	r25, 0x0FCA	; 0x800fca <my_lcd+0x11>
   1943e:	90 93 cc 0f 	sts	0x0FCC, r25	; 0x800fcc <my_lcd+0x13>
   19442:	80 93 cb 0f 	sts	0x0FCB, r24	; 0x800fcb <my_lcd+0x12>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:751
    height = (rotation & 1) ? WIDTH : HEIGHT;
   19446:	80 91 c7 0f 	lds	r24, 0x0FC7	; 0x800fc7 <my_lcd+0xe>
   1944a:	90 91 c8 0f 	lds	r25, 0x0FC8	; 0x800fc8 <my_lcd+0xf>
   1944e:	21 11       	cpse	r18, r1
   19450:	04 c0       	rjmp	.+8      	; 0x1945a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4a>
   19452:	80 91 c9 0f 	lds	r24, 0x0FC9	; 0x800fc9 <my_lcd+0x10>
   19456:	90 91 ca 0f 	lds	r25, 0x0FCA	; 0x800fca <my_lcd+0x11>
   1945a:	90 93 ce 0f 	sts	0x0FCE, r25	; 0x800fce <my_lcd+0x15>
   1945e:	80 93 cd 0f 	sts	0x0FCD, r24	; 0x800fcd <my_lcd+0x14>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:752
	CS_ACTIVE;
   19462:	a0 91 e7 0f 	lds	r26, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   19466:	b0 91 e8 0f 	lds	r27, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   1946a:	8c 91       	ld	r24, X
   1946c:	90 91 f3 0f 	lds	r25, 0x0FF3	; 0x800ff3 <my_lcd+0x3a>
   19470:	89 23       	and	r24, r25
   19472:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:753
	if(lcd_driver == ID_932X)
   19474:	40 91 d1 0f 	lds	r20, 0x0FD1	; 0x800fd1 <my_lcd+0x18>
   19478:	50 91 d2 0f 	lds	r21, 0x0FD2	; 0x800fd2 <my_lcd+0x19>
   1947c:	80 91 cf 0f 	lds	r24, 0x0FCF	; 0x800fcf <my_lcd+0x16>
   19480:	90 91 d0 0f 	lds	r25, 0x0FD0	; 0x800fd0 <my_lcd+0x17>
   19484:	a0 91 e9 0f 	lds	r26, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   19488:	b0 91 ea 0f 	lds	r27, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1948c:	20 91 f4 0f 	lds	r18, 0x0FF4	; 0x800ff4 <my_lcd+0x3b>
   19490:	41 15       	cp	r20, r1
   19492:	51 05       	cpc	r21, r1
   19494:	09 f0       	breq	.+2      	; 0x19498 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x88>
   19496:	13 c1       	rjmp	.+550    	; 0x196be <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2ae>
   19498:	01 97       	sbiw	r24, 0x01	; 1
   1949a:	83 30       	cpi	r24, 0x03	; 3
   1949c:	91 05       	cpc	r25, r1
   1949e:	08 f0       	brcs	.+2      	; 0x194a2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x92>
   194a0:	0c c1       	rjmp	.+536    	; 0x196ba <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2aa>
   194a2:	88 0f       	add	r24, r24
   194a4:	99 1f       	adc	r25, r25
   194a6:	fc 01       	movw	r30, r24
   194a8:	ee 5a       	subi	r30, 0xAE	; 174
   194aa:	fd 4f       	sbci	r31, 0xFD	; 253
   194ac:	90 81       	ld	r25, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:771
				break;
		 	case 3 : 
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
   194ae:	30 91 e1 0f 	lds	r19, 0x0FE1	; 0x800fe1 <my_lcd+0x28>
   194b2:	40 91 e2 0f 	lds	r20, 0x0FE2	; 0x800fe2 <my_lcd+0x29>
   194b6:	8c 91       	ld	r24, X
   194b8:	28 23       	and	r18, r24
   194ba:	2c 93       	st	X, r18
   194bc:	42 b9       	out	0x02, r20	; 2
   194be:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   194c2:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   194c6:	80 81       	ld	r24, Z
   194c8:	20 91 f5 0f 	lds	r18, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   194cc:	82 23       	and	r24, r18
   194ce:	80 83       	st	Z, r24
   194d0:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   194d4:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   194d8:	80 81       	ld	r24, Z
   194da:	20 91 f1 0f 	lds	r18, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   194de:	82 2b       	or	r24, r18
   194e0:	80 83       	st	Z, r24
   194e2:	32 b9       	out	0x02, r19	; 2
   194e4:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   194e8:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   194ec:	80 81       	ld	r24, Z
   194ee:	20 91 f5 0f 	lds	r18, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   194f2:	82 23       	and	r24, r18
   194f4:	80 83       	st	Z, r24
   194f6:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   194fa:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   194fe:	80 81       	ld	r24, Z
   19500:	20 91 f1 0f 	lds	r18, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   19504:	82 2b       	or	r24, r18
   19506:	80 83       	st	Z, r24
   19508:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1950c:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   19510:	80 81       	ld	r24, Z
   19512:	20 91 f0 0f 	lds	r18, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   19516:	82 2b       	or	r24, r18
   19518:	80 83       	st	Z, r24
   1951a:	80 e1       	ldi	r24, 0x10	; 16
   1951c:	82 b9       	out	0x02, r24	; 2
   1951e:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   19522:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19526:	80 81       	ld	r24, Z
   19528:	20 91 f5 0f 	lds	r18, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1952c:	82 23       	and	r24, r18
   1952e:	80 83       	st	Z, r24
   19530:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   19534:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19538:	80 81       	ld	r24, Z
   1953a:	20 91 f1 0f 	lds	r18, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1953e:	82 2b       	or	r24, r18
   19540:	80 83       	st	Z, r24
   19542:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   19544:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   19548:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1954c:	80 81       	ld	r24, Z
   1954e:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   19552:	89 23       	and	r24, r25
   19554:	80 83       	st	Z, r24
   19556:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1955a:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1955e:	80 81       	ld	r24, Z
   19560:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   19564:	89 2b       	or	r24, r25
   19566:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:874
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
   19568:	00 91 cd 0f 	lds	r16, 0x0FCD	; 0x800fcd <my_lcd+0x14>
   1956c:	10 91 ce 0f 	lds	r17, 0x0FCE	; 0x800fce <my_lcd+0x15>
   19570:	01 50       	subi	r16, 0x01	; 1
   19572:	11 09       	sbc	r17, r1
   19574:	20 91 cb 0f 	lds	r18, 0x0FCB	; 0x800fcb <my_lcd+0x12>
   19578:	30 91 cc 0f 	lds	r19, 0x0FCC	; 0x800fcc <my_lcd+0x13>
   1957c:	21 50       	subi	r18, 0x01	; 1
   1957e:	31 09       	sbc	r19, r1
   19580:	50 e0       	ldi	r21, 0x00	; 0
   19582:	40 e0       	ldi	r20, 0x00	; 0
   19584:	70 e0       	ldi	r23, 0x00	; 0
   19586:	60 e0       	ldi	r22, 0x00	; 0
   19588:	89 eb       	ldi	r24, 0xB9	; 185
   1958a:	9f e0       	ldi	r25, 0x0F	; 15
   1958c:	0e 94 73 82 	call	0x104e6	; 0x104e6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:704
    if (offset < 0)
    {
        vsp += scrollines;          //keep in unsigned range
    }
    sea = top + scrollines - 1;
	if(lcd_driver == ID_932X)
   19590:	80 91 d1 0f 	lds	r24, 0x0FD1	; 0x800fd1 <my_lcd+0x18>
   19594:	90 91 d2 0f 	lds	r25, 0x0FD2	; 0x800fd2 <my_lcd+0x19>
   19598:	89 2b       	or	r24, r25
   1959a:	09 f0       	breq	.+2      	; 0x1959e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x18e>
   1959c:	9e c1       	rjmp	.+828    	; 0x198da <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:706
	{
		writeCmdData8(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
   1959e:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   195a2:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   195a6:	80 81       	ld	r24, Z
   195a8:	90 91 f4 0f 	lds	r25, 0x0FF4	; 0x800ff4 <my_lcd+0x3b>
   195ac:	89 23       	and	r24, r25
   195ae:	80 83       	st	Z, r24
   195b0:	80 91 dd 0f 	lds	r24, 0x0FDD	; 0x800fdd <my_lcd+0x24>
   195b4:	82 b9       	out	0x02, r24	; 2
   195b6:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   195ba:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   195be:	80 81       	ld	r24, Z
   195c0:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   195c4:	89 23       	and	r24, r25
   195c6:	80 83       	st	Z, r24
   195c8:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   195cc:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   195d0:	80 81       	ld	r24, Z
   195d2:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   195d6:	89 2b       	or	r24, r25
   195d8:	80 83       	st	Z, r24
   195da:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   195de:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   195e2:	80 81       	ld	r24, Z
   195e4:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   195e8:	89 2b       	or	r24, r25
   195ea:	80 83       	st	Z, r24
   195ec:	83 e0       	ldi	r24, 0x03	; 3
   195ee:	82 b9       	out	0x02, r24	; 2
   195f0:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   195f4:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   195f8:	80 81       	ld	r24, Z
   195fa:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   195fe:	89 23       	and	r24, r25
   19600:	80 83       	st	Z, r24
   19602:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   19606:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1960a:	80 81       	ld	r24, Z
   1960c:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   19610:	89 2b       	or	r24, r25
   19612:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:707
        writeCmdData8(SC2, vsp);        //VL#
   19614:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   19618:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1961c:	80 81       	ld	r24, Z
   1961e:	90 91 f4 0f 	lds	r25, 0x0FF4	; 0x800ff4 <my_lcd+0x3b>
   19622:	89 23       	and	r24, r25
   19624:	80 83       	st	Z, r24
   19626:	80 91 df 0f 	lds	r24, 0x0FDF	; 0x800fdf <my_lcd+0x26>
   1962a:	82 b9       	out	0x02, r24	; 2
   1962c:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   19630:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19634:	80 81       	ld	r24, Z
   19636:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1963a:	89 23       	and	r24, r25
   1963c:	80 83       	st	Z, r24
   1963e:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   19642:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19646:	80 81       	ld	r24, Z
   19648:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1964c:	89 2b       	or	r24, r25
   1964e:	80 83       	st	Z, r24
   19650:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   19654:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   19658:	80 81       	ld	r24, Z
   1965a:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   1965e:	89 2b       	or	r24, r25
   19660:	80 83       	st	Z, r24
   19662:	12 b8       	out	0x02, r1	; 2
   19664:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   19668:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1966c:	80 81       	ld	r24, Z
   1966e:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   19672:	89 23       	and	r24, r25
   19674:	80 83       	st	Z, r24
   19676:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1967a:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1967e:	80 81       	ld	r24, Z
   19680:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   19684:	89 2b       	or	r24, r25
   19686:	80 83       	st	Z, r24
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.65():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:876
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
	CS_IDLE;
   19688:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   1968c:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   19690:	80 81       	ld	r24, Z
   19692:	90 91 ef 0f 	lds	r25, 0x0FEF	; 0x800fef <my_lcd+0x36>
   19696:	89 2b       	or	r24, r25
   19698:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:877
}
   1969a:	26 96       	adiw	r28, 0x06	; 6
   1969c:	0f b6       	in	r0, 0x3f	; 63
   1969e:	f8 94       	cli
   196a0:	de bf       	out	0x3e, r29	; 62
   196a2:	0f be       	out	0x3f, r0	; 63
   196a4:	cd bf       	out	0x3d, r28	; 61
   196a6:	df 91       	pop	r29
   196a8:	cf 91       	pop	r28
   196aa:	1f 91       	pop	r17
   196ac:	0f 91       	pop	r16
   196ae:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    width = (rotation & 1) ? HEIGHT : WIDTH;
   196b0:	80 91 c7 0f 	lds	r24, 0x0FC7	; 0x800fc7 <my_lcd+0xe>
   196b4:	90 91 c8 0f 	lds	r25, 0x0FC8	; 0x800fc8 <my_lcd+0xf>
   196b8:	c2 ce       	rjmp	.-636    	; 0x1943e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:756
    height = (rotation & 1) ? WIDTH : HEIGHT;
	CS_ACTIVE;
	if(lcd_driver == ID_932X)
	{
		uint16_t val;
		switch(rotation) 
   196ba:	90 e3       	ldi	r25, 0x30	; 48
   196bc:	f8 ce       	rjmp	.-528    	; 0x194ae <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:773
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
   196be:	46 30       	cpi	r20, 0x06	; 6
   196c0:	51 05       	cpc	r21, r1
   196c2:	99 f5       	brne	.+102    	; 0x1972a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x31a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:782
		{
			case 0: 
				val = 0xD0; //0 degree 
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
   196c4:	f0 ea       	ldi	r31, 0xA0	; 160
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   196c6:	81 30       	cpi	r24, 0x01	; 1
   196c8:	91 05       	cpc	r25, r1
   196ca:	51 f0       	breq	.+20     	; 0x196e0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:779
		{
			case 0: 
				val = 0xD0; //0 degree 
   196cc:	f0 ed       	ldi	r31, 0xD0	; 208
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   196ce:	81 30       	cpi	r24, 0x01	; 1
   196d0:	91 05       	cpc	r25, r1
   196d2:	30 f0       	brcs	.+12     	; 0x196e0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:785
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
				break;
		 	case 2: 
				val = 0x00; //180 degree 
   196d4:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   196d6:	82 30       	cpi	r24, 0x02	; 2
   196d8:	91 05       	cpc	r25, r1
   196da:	11 f0       	breq	.+4      	; 0x196e0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2d0>
   196dc:	03 97       	sbiw	r24, 0x03	; 3
   196de:	19 f1       	breq	.+70     	; 0x19726 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x316>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:791
				break;
		 	case 3: 
				val = 0x60; //270 degree
				break;			
		}
		writeCmdData8(MD, val);
   196e0:	8c 91       	ld	r24, X
   196e2:	28 23       	and	r18, r24
   196e4:	2c 93       	st	X, r18
   196e6:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <my_lcd+0x28>
   196ea:	82 b9       	out	0x02, r24	; 2
   196ec:	a0 91 eb 0f 	lds	r26, 0x0FEB	; 0x800feb <my_lcd+0x32>
   196f0:	b0 91 ec 0f 	lds	r27, 0x0FEC	; 0x800fec <my_lcd+0x33>
   196f4:	8c 91       	ld	r24, X
   196f6:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   196fa:	89 23       	and	r24, r25
   196fc:	8c 93       	st	X, r24
   196fe:	a0 91 eb 0f 	lds	r26, 0x0FEB	; 0x800feb <my_lcd+0x32>
   19702:	b0 91 ec 0f 	lds	r27, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19706:	8c 91       	ld	r24, X
   19708:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1970c:	89 2b       	or	r24, r25
   1970e:	8c 93       	st	X, r24
   19710:	a0 91 e9 0f 	lds	r26, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   19714:	b0 91 ea 0f 	lds	r27, 0x0FEA	; 0x800fea <my_lcd+0x31>
   19718:	8c 91       	ld	r24, X
   1971a:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   1971e:	89 2b       	or	r24, r25
   19720:	8c 93       	st	X, r24
   19722:	f2 b9       	out	0x02, r31	; 2
   19724:	0f cf       	rjmp	.-482    	; 0x19544 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:788
				break;
		 	case 2: 
				val = 0x00; //180 degree 
				break;
		 	case 3: 
				val = 0x60; //270 degree
   19726:	f0 e6       	ldi	r31, 0x60	; 96
   19728:	db cf       	rjmp	.-74     	; 0x196e0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:793
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
   1972a:	48 30       	cpi	r20, 0x08	; 8
   1972c:	51 05       	cpc	r21, r1
   1972e:	99 f5       	brne	.+102    	; 0x19796 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x386>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:802
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
   19730:	eb e2       	ldi	r30, 0x2B	; 43
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   19732:	81 30       	cpi	r24, 0x01	; 1
   19734:	91 05       	cpc	r25, r1
   19736:	51 f0       	breq	.+20     	; 0x1974c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:799
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
   19738:	e9 e0       	ldi	r30, 0x09	; 9
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   1973a:	81 30       	cpi	r24, 0x01	; 1
   1973c:	91 05       	cpc	r25, r1
   1973e:	30 f0       	brcs	.+12     	; 0x1974c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:805
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
   19740:	ea e0       	ldi	r30, 0x0A	; 10
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   19742:	82 30       	cpi	r24, 0x02	; 2
   19744:	91 05       	cpc	r25, r1
   19746:	11 f0       	breq	.+4      	; 0x1974c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x33c>
   19748:	03 97       	sbiw	r24, 0x03	; 3
   1974a:	19 f1       	breq	.+70     	; 0x19792 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x382>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:811
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
		     	break;
		 }
		 writeCmdData8(MD, val); 
   1974c:	8c 91       	ld	r24, X
   1974e:	28 23       	and	r18, r24
   19750:	2c 93       	st	X, r18
   19752:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <my_lcd+0x28>
   19756:	82 b9       	out	0x02, r24	; 2
   19758:	a0 91 eb 0f 	lds	r26, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1975c:	b0 91 ec 0f 	lds	r27, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19760:	8c 91       	ld	r24, X
   19762:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   19766:	89 23       	and	r24, r25
   19768:	8c 93       	st	X, r24
   1976a:	a0 91 eb 0f 	lds	r26, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1976e:	b0 91 ec 0f 	lds	r27, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19772:	8c 91       	ld	r24, X
   19774:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   19778:	89 2b       	or	r24, r25
   1977a:	8c 93       	st	X, r24
   1977c:	a0 91 e9 0f 	lds	r26, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   19780:	b0 91 ea 0f 	lds	r27, 0x0FEA	; 0x800fea <my_lcd+0x31>
   19784:	8c 91       	ld	r24, X
   19786:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   1978a:	89 2b       	or	r24, r25
   1978c:	8c 93       	st	X, r24
   1978e:	e2 b9       	out	0x02, r30	; 2
   19790:	d9 ce       	rjmp	.-590    	; 0x19544 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:808
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
   19792:	e8 e2       	ldi	r30, 0x28	; 40
   19794:	db cf       	rjmp	.-74     	; 0x1974c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:814
		     	break;
		 }
		 writeCmdData8(MD, val); 

	}
	else if(lcd_driver == ID_9486)
   19796:	45 30       	cpi	r20, 0x05	; 5
   19798:	51 05       	cpc	r21, r1
   1979a:	a1 f5       	brne	.+104    	; 0x19804 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3f4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:817
	{
		uint8_t val;
		switch (rotation) 
   1979c:	81 30       	cpi	r24, 0x01	; 1
   1979e:	91 05       	cpc	r25, r1
   197a0:	49 f1       	breq	.+82     	; 0x197f4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3e4>
   197a2:	70 f1       	brcs	.+92     	; 0x19800 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3f0>
   197a4:	82 30       	cpi	r24, 0x02	; 2
   197a6:	91 05       	cpc	r25, r1
   197a8:	39 f1       	breq	.+78     	; 0x197f8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3e8>
   197aa:	03 97       	sbiw	r24, 0x03	; 3
   197ac:	39 f1       	breq	.+78     	; 0x197fc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3ec>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:832
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   197ae:	8c 91       	ld	r24, X
   197b0:	28 23       	and	r18, r24
   197b2:	2c 93       	st	X, r18
   197b4:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <my_lcd+0x28>
   197b8:	82 b9       	out	0x02, r24	; 2
   197ba:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   197be:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   197c2:	80 81       	ld	r24, Z
   197c4:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   197c8:	89 23       	and	r24, r25
   197ca:	80 83       	st	Z, r24
   197cc:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   197d0:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   197d4:	80 81       	ld	r24, Z
   197d6:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   197da:	89 2b       	or	r24, r25
   197dc:	80 83       	st	Z, r24
   197de:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   197e2:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   197e6:	80 81       	ld	r24, Z
   197e8:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   197ec:	89 2b       	or	r24, r25
   197ee:	80 83       	st	Z, r24
   197f0:	72 b9       	out	0x02, r23	; 2
   197f2:	a8 ce       	rjmp	.-688    	; 0x19544 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:823
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MV | ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR ; //90 degree 
   197f4:	78 e7       	ldi	r23, 0x78	; 120
   197f6:	db cf       	rjmp	.-74     	; 0x197ae <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:826
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MX |ILI9341_MADCTL_BGR; //180 degree 
   197f8:	78 ec       	ldi	r23, 0xC8	; 200
   197fa:	d9 cf       	rjmp	.-78     	; 0x197ae <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:829
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   197fc:	78 ea       	ldi	r23, 0xA8	; 168
   197fe:	d7 cf       	rjmp	.-82     	; 0x197ae <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:820
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
   19800:	78 e0       	ldi	r23, 0x08	; 8
   19802:	d5 cf       	rjmp	.-86     	; 0x197ae <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:834
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
	else if(lcd_driver == ID_9488)
   19804:	47 30       	cpi	r20, 0x07	; 7
   19806:	51 05       	cpc	r21, r1
   19808:	a1 f5       	brne	.+104    	; 0x19872 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x462>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:837
	{
		uint8_t val;
		switch (rotation) 
   1980a:	81 30       	cpi	r24, 0x01	; 1
   1980c:	91 05       	cpc	r25, r1
   1980e:	49 f1       	breq	.+82     	; 0x19862 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x452>
   19810:	70 f1       	brcs	.+92     	; 0x1986e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x45e>
   19812:	82 30       	cpi	r24, 0x02	; 2
   19814:	91 05       	cpc	r25, r1
   19816:	39 f1       	breq	.+78     	; 0x19866 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x456>
   19818:	03 97       	sbiw	r24, 0x03	; 3
   1981a:	39 f1       	breq	.+78     	; 0x1986a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x45a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:852
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   1981c:	8c 91       	ld	r24, X
   1981e:	28 23       	and	r18, r24
   19820:	2c 93       	st	X, r18
   19822:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <my_lcd+0x28>
   19826:	82 b9       	out	0x02, r24	; 2
   19828:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1982c:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19830:	80 81       	ld	r24, Z
   19832:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   19836:	89 23       	and	r24, r25
   19838:	80 83       	st	Z, r24
   1983a:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1983e:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19842:	80 81       	ld	r24, Z
   19844:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   19848:	89 2b       	or	r24, r25
   1984a:	80 83       	st	Z, r24
   1984c:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   19850:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   19854:	80 81       	ld	r24, Z
   19856:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   1985a:	89 2b       	or	r24, r25
   1985c:	80 83       	st	Z, r24
   1985e:	62 b9       	out	0x02, r22	; 2
   19860:	71 ce       	rjmp	.-798    	; 0x19544 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:843
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //90 degree 
   19862:	68 ea       	ldi	r22, 0xA8	; 168
   19864:	db cf       	rjmp	.-74     	; 0x1981c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:846
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR; //180 degree 
   19866:	68 e1       	ldi	r22, 0x18	; 24
   19868:	d9 cf       	rjmp	.-78     	; 0x1981c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:849
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   1986a:	68 e7       	ldi	r22, 0x78	; 120
   1986c:	d7 cf       	rjmp	.-82     	; 0x1981c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:840
	{
		uint8_t val;
		switch (rotation) 
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
   1986e:	68 ec       	ldi	r22, 0xC8	; 200
   19870:	d5 cf       	rjmp	.-86     	; 0x1981c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:857
		 writeCmdData8(MD, val); 
	}
	else
	{
		uint8_t val;
		switch (rotation) 
   19872:	81 30       	cpi	r24, 0x01	; 1
   19874:	91 05       	cpc	r25, r1
   19876:	49 f1       	breq	.+82     	; 0x198ca <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4ba>
   19878:	70 f1       	brcs	.+92     	; 0x198d6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4c6>
   1987a:	82 30       	cpi	r24, 0x02	; 2
   1987c:	91 05       	cpc	r25, r1
   1987e:	39 f1       	breq	.+78     	; 0x198ce <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4be>
   19880:	03 97       	sbiw	r24, 0x03	; 3
   19882:	39 f1       	breq	.+78     	; 0x198d2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4c2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   19884:	8c 91       	ld	r24, X
   19886:	28 23       	and	r18, r24
   19888:	2c 93       	st	X, r18
   1988a:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <my_lcd+0x28>
   1988e:	82 b9       	out	0x02, r24	; 2
   19890:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   19894:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19898:	80 81       	ld	r24, Z
   1989a:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1989e:	89 23       	and	r24, r25
   198a0:	80 83       	st	Z, r24
   198a2:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   198a6:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   198aa:	80 81       	ld	r24, Z
   198ac:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   198b0:	89 2b       	or	r24, r25
   198b2:	80 83       	st	Z, r24
   198b4:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   198b8:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   198bc:	80 81       	ld	r24, Z
   198be:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   198c2:	89 2b       	or	r24, r25
   198c4:	80 83       	st	Z, r24
   198c6:	32 b9       	out	0x02, r19	; 2
   198c8:	3d ce       	rjmp	.-902    	; 0x19544 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:863
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //90 degree 
   198ca:	38 e2       	ldi	r19, 0x28	; 40
   198cc:	db cf       	rjmp	.-74     	; 0x19884 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:866
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_ML |ILI9341_MADCTL_BGR; //180 degree 
   198ce:	38 e9       	ldi	r19, 0x98	; 152
   198d0:	d9 cf       	rjmp	.-78     	; 0x19884 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:869
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   198d2:	38 ef       	ldi	r19, 0xF8	; 248
   198d4:	d7 cf       	rjmp	.-82     	; 0x19884 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:860
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
   198d6:	38 e4       	ldi	r19, 0x48	; 72
   198d8:	d5 cf       	rjmp	.-86     	; 0x19884 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:875
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
   198da:	80 91 c9 0f 	lds	r24, 0x0FC9	; 0x800fc9 <my_lcd+0x10>
   198de:	90 91 ca 0f 	lds	r25, 0x0FCA	; 0x800fca <my_lcd+0x11>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:712
        writeCmdData8(SC2, vsp);        //VL#
	}
	else
	{
  		uint8_t d[6];           // for multi-byte parameters
  		d[0] = top >> 8;        //TFA
   198e2:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:713
  		d[1] = top;
   198e4:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:714
  		d[2] = scrollines >> 8; //VSA
   198e6:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:715
  		d[3] = scrollines;
   198e8:	8c 83       	std	Y+4, r24	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:716
  		d[4] = bfa >> 8;        //BFA
   198ea:	1d 82       	std	Y+5, r1	; 0x05
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:717
  		d[5] = bfa;
   198ec:	1e 82       	std	Y+6, r1	; 0x06
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:718
		Push_Command(SC1, d, 6);
   198ee:	60 91 dd 0f 	lds	r22, 0x0FDD	; 0x800fdd <my_lcd+0x24>
   198f2:	70 91 de 0f 	lds	r23, 0x0FDE	; 0x800fde <my_lcd+0x25>
   198f6:	26 e0       	ldi	r18, 0x06	; 6
   198f8:	ae 01       	movw	r20, r28
   198fa:	4f 5f       	subi	r20, 0xFF	; 255
   198fc:	5f 4f       	sbci	r21, 0xFF	; 255
   198fe:	89 eb       	ldi	r24, 0xB9	; 185
   19900:	9f e0       	ldi	r25, 0x0F	; 15
   19902:	0e 94 f6 81 	call	0x103ec	; 0x103ec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:719
		d[0] = vsp >> 8;        //VSP
   19906:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:720
  		d[1] = vsp;
   19908:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:721
		Push_Command(SC2, d, 2);
   1990a:	60 91 df 0f 	lds	r22, 0x0FDF	; 0x800fdf <my_lcd+0x26>
   1990e:	70 91 e0 0f 	lds	r23, 0x0FE0	; 0x800fe0 <my_lcd+0x27>
   19912:	22 e0       	ldi	r18, 0x02	; 2
   19914:	ae 01       	movw	r20, r28
   19916:	4f 5f       	subi	r20, 0xFF	; 255
   19918:	5f 4f       	sbci	r21, 0xFF	; 255
   1991a:	89 eb       	ldi	r24, 0xB9	; 185
   1991c:	9f e0       	ldi	r25, 0x0F	; 15
   1991e:	0e 94 f6 81 	call	0x103ec	; 0x103ec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:722
		if(lcd_driver == ID_7575)
   19922:	80 91 d1 0f 	lds	r24, 0x0FD1	; 0x800fd1 <my_lcd+0x18>
   19926:	90 91 d2 0f 	lds	r25, 0x0FD2	; 0x800fd2 <my_lcd+0x19>
   1992a:	01 97       	sbiw	r24, 0x01	; 1
   1992c:	61 f4       	brne	.+24     	; 0x19946 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x536>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:724
		{
			d[0] = (offset != 0) ? 0x08:0;
   1992e:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:725
			Push_Command(0x01, d, 1);
   19930:	21 e0       	ldi	r18, 0x01	; 1
   19932:	ae 01       	movw	r20, r28
   19934:	4f 5f       	subi	r20, 0xFF	; 255
   19936:	5f 4f       	sbci	r21, 0xFF	; 255
   19938:	61 e0       	ldi	r22, 0x01	; 1
   1993a:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:729
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
   1993c:	89 eb       	ldi	r24, 0xB9	; 185
   1993e:	9f e0       	ldi	r25, 0x0F	; 15
   19940:	0e 94 f6 81 	call	0x103ec	; 0x103ec <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   19944:	a1 ce       	rjmp	.-702    	; 0x19688 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x278>
   19946:	20 e0       	ldi	r18, 0x00	; 0
   19948:	50 e0       	ldi	r21, 0x00	; 0
   1994a:	40 e0       	ldi	r20, 0x00	; 0
   1994c:	63 e1       	ldi	r22, 0x13	; 19
   1994e:	70 e0       	ldi	r23, 0x00	; 0
   19950:	f5 cf       	rjmp	.-22     	; 0x1993c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x52c>

00019952 <LCDWIKI_KBV::reset() [clone .constprop.62]>:
_ZN11LCDWIKI_KBV5resetEv.constprop.62():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:250
void LCDWIKI_KBV::reset(void)
{
//	have_reset = 1;
//    setWriteDir();
//Set all control bits to idle state
    CS_IDLE;
   19952:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   19956:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   1995a:	80 81       	ld	r24, Z
   1995c:	90 91 ef 0f 	lds	r25, 0x0FEF	; 0x800fef <my_lcd+0x36>
   19960:	89 2b       	or	r24, r25
   19962:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:251
    RD_IDLE;
   19964:	e0 91 ed 0f 	lds	r30, 0x0FED	; 0x800fed <my_lcd+0x34>
   19968:	f0 91 ee 0f 	lds	r31, 0x0FEE	; 0x800fee <my_lcd+0x35>
   1996c:	80 81       	ld	r24, Z
   1996e:	90 91 f2 0f 	lds	r25, 0x0FF2	; 0x800ff2 <my_lcd+0x39>
   19972:	89 2b       	or	r24, r25
   19974:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:252
    WR_IDLE;
   19976:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1997a:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1997e:	80 81       	ld	r24, Z
   19980:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   19984:	89 2b       	or	r24, r25
   19986:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:262
  digitalWrite(5, HIGH);
//  delay(100);
  //digitalWrite(5, LOW);
 // delay(100);
#else
  if(_reset) 
   19988:	80 91 f7 0f 	lds	r24, 0x0FF7	; 0x800ff7 <my_lcd+0x3e>
   1998c:	88 23       	and	r24, r24
   1998e:	71 f0       	breq	.+28     	; 0x199ac <LCDWIKI_KBV::reset() [clone .constprop.62]+0x5a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:264
  {
    digitalWrite(_reset, LOW);
   19990:	60 e0       	ldi	r22, 0x00	; 0
   19992:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:265
    delay(2);
   19996:	62 e0       	ldi	r22, 0x02	; 2
   19998:	70 e0       	ldi	r23, 0x00	; 0
   1999a:	80 e0       	ldi	r24, 0x00	; 0
   1999c:	90 e0       	ldi	r25, 0x00	; 0
   1999e:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:266
    digitalWrite(_reset, HIGH);
   199a2:	61 e0       	ldi	r22, 0x01	; 1
   199a4:	80 91 f7 0f 	lds	r24, 0x0FF7	; 0x800ff7 <my_lcd+0x3e>
   199a8:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:272
//	delay(100);
	//digitalWrite(_reset, LOW);
	//delay(100);
  }
#endif
  CS_ACTIVE;
   199ac:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   199b0:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   199b4:	80 81       	ld	r24, Z
   199b6:	90 91 f3 0f 	lds	r25, 0x0FF3	; 0x800ff3 <my_lcd+0x3a>
   199ba:	89 23       	and	r24, r25
   199bc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:273
  CD_COMMAND;
   199be:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   199c2:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   199c6:	80 81       	ld	r24, Z
   199c8:	90 91 f4 0f 	lds	r25, 0x0FF4	; 0x800ff4 <my_lcd+0x3b>
   199cc:	89 23       	and	r24, r25
   199ce:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:274
  write8(0x00);
   199d0:	12 b8       	out	0x02, r1	; 2
   199d2:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   199d6:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   199da:	80 81       	ld	r24, Z
   199dc:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   199e0:	89 23       	and	r24, r25
   199e2:	80 83       	st	Z, r24
   199e4:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   199e8:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   199ec:	80 81       	ld	r24, Z
   199ee:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   199f2:	89 2b       	or	r24, r25
   199f4:	80 83       	st	Z, r24
   199f6:	83 e0       	ldi	r24, 0x03	; 3
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:277
  for(uint8_t i=0; i<3; i++)
  {
  	WR_STROBE; // Three extra 0x00s
   199f8:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   199fc:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19a00:	90 81       	ld	r25, Z
   19a02:	20 91 f5 0f 	lds	r18, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   19a06:	92 23       	and	r25, r18
   19a08:	90 83       	st	Z, r25
   19a0a:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   19a0e:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19a12:	90 81       	ld	r25, Z
   19a14:	20 91 f1 0f 	lds	r18, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   19a18:	92 2b       	or	r25, r18
   19a1a:	90 83       	st	Z, r25
   19a1c:	81 50       	subi	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:275
  }
#endif
  CS_ACTIVE;
  CD_COMMAND;
  write8(0x00);
  for(uint8_t i=0; i<3; i++)
   19a1e:	61 f7       	brne	.-40     	; 0x199f8 <LCDWIKI_KBV::reset() [clone .constprop.62]+0xa6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:279
  {
  	WR_STROBE; // Three extra 0x00s
  }
  CS_IDLE;
   19a20:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   19a24:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   19a28:	80 81       	ld	r24, Z
   19a2a:	90 91 ef 0f 	lds	r25, 0x0FEF	; 0x800fef <my_lcd+0x36>
   19a2e:	89 2b       	or	r24, r25
   19a30:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:280
}
   19a32:	08 95       	ret

00019a34 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>:
_ZN11LCDWIKI_KBV8Read_RegEja.constprop.60():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:491
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

//read value from lcd register 
uint16_t LCDWIKI_KBV::Read_Reg(uint16_t reg, int8_t index)
   19a34:	cf 93       	push	r28
   19a36:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:499
    uint8_t low;
//  if (!have_reset)
 // {
 //     reset();
//  }
	CS_ACTIVE;
   19a38:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   19a3c:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   19a40:	90 81       	ld	r25, Z
   19a42:	20 91 f3 0f 	lds	r18, 0x0FF3	; 0x800ff3 <my_lcd+0x3a>
   19a46:	92 23       	and	r25, r18
   19a48:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:500
    writeCmd16(reg);
   19a4a:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   19a4e:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   19a52:	90 81       	ld	r25, Z
   19a54:	20 91 f4 0f 	lds	r18, 0x0FF4	; 0x800ff4 <my_lcd+0x3b>
   19a58:	92 23       	and	r25, r18
   19a5a:	90 83       	st	Z, r25
   19a5c:	12 b8       	out	0x02, r1	; 2
   19a5e:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   19a62:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19a66:	90 81       	ld	r25, Z
   19a68:	20 91 f5 0f 	lds	r18, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   19a6c:	92 23       	and	r25, r18
   19a6e:	90 83       	st	Z, r25
   19a70:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   19a74:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19a78:	90 81       	ld	r25, Z
   19a7a:	20 91 f1 0f 	lds	r18, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   19a7e:	92 2b       	or	r25, r18
   19a80:	90 83       	st	Z, r25
   19a82:	82 b9       	out	0x02, r24	; 2
   19a84:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   19a88:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19a8c:	80 81       	ld	r24, Z
   19a8e:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   19a92:	89 23       	and	r24, r25
   19a94:	80 83       	st	Z, r24
   19a96:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   19a9a:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   19a9e:	80 81       	ld	r24, Z
   19aa0:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   19aa4:	89 2b       	or	r24, r25
   19aa6:	80 83       	st	Z, r24
   19aa8:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   19aac:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   19ab0:	80 81       	ld	r24, Z
   19ab2:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   19ab6:	89 2b       	or	r24, r25
   19ab8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:501
    setReadDir();
   19aba:	81 b1       	in	r24, 0x01	; 1
   19abc:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:502
    delay(1); 
   19abe:	61 e0       	ldi	r22, 0x01	; 1
   19ac0:	70 e0       	ldi	r23, 0x00	; 0
   19ac2:	80 e0       	ldi	r24, 0x00	; 0
   19ac4:	90 e0       	ldi	r25, 0x00	; 0
   19ac6:	0e 94 91 59 	call	0xb322	; 0xb322 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:508
	do 
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
   19aca:	e0 91 ed 0f 	lds	r30, 0x0FED	; 0x800fed <my_lcd+0x34>
   19ace:	f0 91 ee 0f 	lds	r31, 0x0FEE	; 0x800fee <my_lcd+0x35>
   19ad2:	80 81       	ld	r24, Z
   19ad4:	90 91 f6 0f 	lds	r25, 0x0FF6	; 0x800ff6 <my_lcd+0x3d>
   19ad8:	89 23       	and	r24, r25
   19ada:	80 83       	st	Z, r24
   19adc:	20 b1       	in	r18, 0x00	; 0
   19ade:	e0 91 ed 0f 	lds	r30, 0x0FED	; 0x800fed <my_lcd+0x34>
   19ae2:	f0 91 ee 0f 	lds	r31, 0x0FEE	; 0x800fee <my_lcd+0x35>
   19ae6:	90 81       	ld	r25, Z
   19ae8:	80 91 f2 0f 	lds	r24, 0x0FF2	; 0x800ff2 <my_lcd+0x39>
   19aec:	98 2b       	or	r25, r24
   19aee:	90 83       	st	Z, r25
   19af0:	e0 91 ed 0f 	lds	r30, 0x0FED	; 0x800fed <my_lcd+0x34>
   19af4:	f0 91 ee 0f 	lds	r31, 0x0FEE	; 0x800fee <my_lcd+0x35>
   19af8:	90 81       	ld	r25, Z
   19afa:	80 91 f6 0f 	lds	r24, 0x0FF6	; 0x800ff6 <my_lcd+0x3d>
   19afe:	98 23       	and	r25, r24
   19b00:	90 83       	st	Z, r25
   19b02:	80 b1       	in	r24, 0x00	; 0
   19b04:	e0 91 ed 0f 	lds	r30, 0x0FED	; 0x800fed <my_lcd+0x34>
   19b08:	f0 91 ee 0f 	lds	r31, 0x0FEE	; 0x800fee <my_lcd+0x35>
   19b0c:	90 81       	ld	r25, Z
   19b0e:	30 91 f2 0f 	lds	r19, 0x0FF2	; 0x800ff2 <my_lcd+0x39>
   19b12:	93 2b       	or	r25, r19
   19b14:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	}while (--index >= 0);   
   19b16:	c1 30       	cpi	r28, 0x01	; 1
   19b18:	79 f0       	breq	.+30     	; 0x19b38 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]+0x104>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:511
//    RD_IDLE;
    CS_IDLE;
   19b1a:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   19b1e:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   19b22:	90 81       	ld	r25, Z
   19b24:	30 91 ef 0f 	lds	r19, 0x0FEF	; 0x800fef <my_lcd+0x36>
   19b28:	93 2b       	or	r25, r19
   19b2a:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:512
    setWriteDir();
   19b2c:	91 b1       	in	r25, 0x01	; 1
   19b2e:	9f ef       	ldi	r25, 0xFF	; 255
   19b30:	91 b9       	out	0x01, r25	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:514
    return ret;
}
   19b32:	92 2f       	mov	r25, r18
   19b34:	cf 91       	pop	r28
   19b36:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
	}while (--index >= 0);   
   19b38:	c0 e0       	ldi	r28, 0x00	; 0
   19b3a:	c7 cf       	rjmp	.-114    	; 0x19aca <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]+0x96>

00019b3c <TwoWire::begin() [clone .constprop.54]>:
_ZN7TwoWire5beginEv.constprop.54():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:57

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
   19b3c:	10 92 04 0d 	sts	0x0D04, r1	; 0x800d04 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:58
  rxBufferLength = 0;
   19b40:	10 92 03 0d 	sts	0x0D03, r1	; 0x800d03 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:60

  txBufferIndex = 0;
   19b44:	10 92 1b 0d 	sts	0x0D1B, r1	; 0x800d1b <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:61
  txBufferLength = 0;
   19b48:	10 92 1a 0d 	sts	0x0D1A, r1	; 0x800d1a <TwoWire::txBufferLength>
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
   19b4c:	10 92 64 0d 	sts	0x0D64, r1	; 0x800d64 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:72
  twi_sendStop = true; // default value
   19b50:	81 e0       	ldi	r24, 0x01	; 1
   19b52:	80 93 63 0d 	sts	0x0D63, r24	; 0x800d63 <twi_sendStop.lto_priv.270>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:73
  twi_inRepStart = false;
   19b56:	10 92 5e 0d 	sts	0x0D5E, r1	; 0x800d5e <twi_inRepStart.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:76

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
   19b5a:	61 e0       	ldi	r22, 0x01	; 1
   19b5c:	83 e1       	ldi	r24, 0x13	; 19
   19b5e:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:77
  digitalWrite(SCL, 1);
   19b62:	61 e0       	ldi	r22, 0x01	; 1
   19b64:	82 e1       	ldi	r24, 0x12	; 18
   19b66:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
   19b6a:	e9 eb       	ldi	r30, 0xB9	; 185
   19b6c:	f0 e0       	ldi	r31, 0x00	; 0
   19b6e:	80 81       	ld	r24, Z
   19b70:	8e 7f       	andi	r24, 0xFE	; 254
   19b72:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:81
  cbi(TWSR, TWPS1);
   19b74:	80 81       	ld	r24, Z
   19b76:	8d 7f       	andi	r24, 0xFD	; 253
   19b78:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
   19b7a:	88 e4       	ldi	r24, 0x48	; 72
   19b7c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
   19b80:	85 e4       	ldi	r24, 0x45	; 69
   19b82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
twi_attachSlaveTxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
   19b86:	8a ef       	ldi	r24, 0xFA	; 250
   19b88:	9e e3       	ldi	r25, 0x3E	; 62
   19b8a:	90 93 b3 0c 	sts	0x0CB3, r25	; 0x800cb3 <twi_onSlaveTransmit.lto_priv.275+0x1>
   19b8e:	80 93 b2 0c 	sts	0x0CB2, r24	; 0x800cb2 <twi_onSlaveTransmit.lto_priv.275>
twi_attachSlaveRxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
   19b92:	8b ef       	ldi	r24, 0xFB	; 251
   19b94:	9e e3       	ldi	r25, 0x3E	; 62
   19b96:	90 93 b1 0c 	sts	0x0CB1, r25	; 0x800cb1 <twi_onSlaveReceive.lto_priv.274+0x1>
   19b9a:	80 93 b0 0c 	sts	0x0CB0, r24	; 0x800cb0 <twi_onSlaveReceive.lto_priv.274>
_ZN7TwoWire5beginEv.constprop.54():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:66

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
   19b9e:	08 95       	ret

00019ba0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.48():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:183
   	return num; 
}

#define READ_TIMES 5 //the times for read
#define LOST_VAL 1          //
uint16_t LCDWIKI_TOUCH::TP_Read_XY(uint8_t xy)
   19ba0:	bf 92       	push	r11
   19ba2:	cf 92       	push	r12
   19ba4:	df 92       	push	r13
   19ba6:	ef 92       	push	r14
   19ba8:	ff 92       	push	r15
   19baa:	0f 93       	push	r16
   19bac:	1f 93       	push	r17
   19bae:	cf 93       	push	r28
   19bb0:	df 93       	push	r29
   19bb2:	00 d0       	rcall	.+0      	; 0x19bb4 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x14>
   19bb4:	00 d0       	rcall	.+0      	; 0x19bb6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x16>
   19bb6:	00 d0       	rcall	.+0      	; 0x19bb8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x18>
   19bb8:	1f 92       	push	r1
   19bba:	cd b7       	in	r28, 0x3d	; 61
   19bbc:	de b7       	in	r29, 0x3e	; 62
   19bbe:	b8 2e       	mov	r11, r24
   19bc0:	8e 01       	movw	r16, r28
   19bc2:	0f 5f       	subi	r16, 0xFF	; 255
   19bc4:	1f 4f       	sbci	r17, 0xFF	; 255
   19bc6:	7e 01       	movw	r14, r28
   19bc8:	8b e0       	ldi	r24, 0x0B	; 11
   19bca:	e8 0e       	add	r14, r24
   19bcc:	f1 1c       	adc	r15, r1
   19bce:	68 01       	movw	r12, r16
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:153

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
	uint8_t count=0; 
	TCS_LOW; 
   19bd0:	e0 91 a7 0f 	lds	r30, 0x0FA7	; 0x800fa7 <my_touch+0x11>
   19bd4:	f0 91 a8 0f 	lds	r31, 0x0FA8	; 0x800fa8 <my_touch+0x12>
   19bd8:	90 81       	ld	r25, Z
   19bda:	80 91 b3 0f 	lds	r24, 0x0FB3	; 0x800fb3 <my_touch+0x1d>
   19bde:	80 95       	com	r24
   19be0:	89 23       	and	r24, r25
   19be2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:154
	TCLK_LOW;           
   19be4:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   19be8:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   19bec:	90 81       	ld	r25, Z
   19bee:	80 91 b4 0f 	lds	r24, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   19bf2:	80 95       	com	r24
   19bf4:	89 23       	and	r24, r25
   19bf6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:155
	TDIN_LOW;
   19bf8:	e0 91 ad 0f 	lds	r30, 0x0FAD	; 0x800fad <my_touch+0x17>
   19bfc:	f0 91 ae 0f 	lds	r31, 0x0FAE	; 0x800fae <my_touch+0x18>
   19c00:	90 81       	ld	r25, Z
   19c02:	80 91 b6 0f 	lds	r24, 0x0FB6	; 0x800fb6 <my_touch+0x20>
   19c06:	80 95       	com	r24
   19c08:	89 23       	and	r24, r25
   19c0a:	80 83       	st	Z, r24
   19c0c:	28 e0       	ldi	r18, 0x08	; 8
   19c0e:	30 e0       	ldi	r19, 0x00	; 0
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.48():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:130
}


void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
   19c10:	90 e8       	ldi	r25, 0x80	; 128
   19c12:	e0 91 ad 0f 	lds	r30, 0x0FAD	; 0x800fad <my_touch+0x17>
   19c16:	f0 91 ae 0f 	lds	r31, 0x0FAE	; 0x800fae <my_touch+0x18>
   19c1a:	80 91 b6 0f 	lds	r24, 0x0FB6	; 0x800fb6 <my_touch+0x20>
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:133
	while(val)
	{
		if(data&val)
   19c1e:	4b 2d       	mov	r20, r11
   19c20:	49 23       	and	r20, r25
   19c22:	09 f4       	brne	.+2      	; 0x19c26 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x86>
   19c24:	af c0       	rjmp	.+350    	; 0x19d84 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:135
		{
			TDIN_HIGH; 
   19c26:	40 81       	ld	r20, Z
   19c28:	84 2b       	or	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:139
		}
		else
		{
			TDIN_LOW;
   19c2a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:141
		}
		TCLK_LOW;
   19c2c:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   19c30:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   19c34:	40 81       	ld	r20, Z
   19c36:	80 91 b4 0f 	lds	r24, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   19c3a:	80 95       	com	r24
   19c3c:	84 23       	and	r24, r20
   19c3e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:143
		//delay_hus(30);
		TCLK_HIGH;
   19c40:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   19c44:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   19c48:	80 81       	ld	r24, Z
   19c4a:	40 91 b4 0f 	lds	r20, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   19c4e:	84 2b       	or	r24, r20
   19c50:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:145
		//delay_hus(30);
		val >>= 1;
   19c52:	96 95       	lsr	r25
   19c54:	21 50       	subi	r18, 0x01	; 1
   19c56:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:131


void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
   19c58:	e1 f6       	brne	.-72     	; 0x19c12 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x72>
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:158
	TCS_LOW; 
	TCLK_LOW;           
	TDIN_LOW;
	TP_Write_Byte(cmd);
	//delay_hus(6);              
	TCLK_LOW; 
   19c5a:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   19c5e:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   19c62:	90 81       	ld	r25, Z
   19c64:	80 91 b4 0f 	lds	r24, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   19c68:	80 95       	com	r24
   19c6a:	89 23       	and	r24, r25
   19c6c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:159
	delay_hus(1); 
   19c6e:	61 e0       	ldi	r22, 0x01	; 1
   19c70:	70 e0       	ldi	r23, 0x00	; 0
   19c72:	80 e0       	ldi	r24, 0x00	; 0
   19c74:	90 e0       	ldi	r25, 0x00	; 0
   19c76:	0e 94 e4 81 	call	0x103c8	; 0x103c8 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:160
	TCLK_HIGH;
   19c7a:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   19c7e:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   19c82:	80 81       	ld	r24, Z
   19c84:	90 91 b4 0f 	lds	r25, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   19c88:	89 2b       	or	r24, r25
   19c8a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:161
	TCLK_LOW;
   19c8c:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   19c90:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   19c94:	90 81       	ld	r25, Z
   19c96:	80 91 b4 0f 	lds	r24, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   19c9a:	80 95       	com	r24
   19c9c:	89 23       	and	r24, r25
   19c9e:	80 83       	st	Z, r24
   19ca0:	30 e1       	ldi	r19, 0x10	; 16
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.48():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:151
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   19ca2:	90 e0       	ldi	r25, 0x00	; 0
   19ca4:	80 e0       	ldi	r24, 0x00	; 0
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:164
	delay_hus(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
	{   
	    num<<=1;          
   19ca6:	88 0f       	add	r24, r24
   19ca8:	99 1f       	adc	r25, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:165
	    TCLK_LOW;	    
   19caa:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   19cae:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   19cb2:	40 81       	ld	r20, Z
   19cb4:	20 91 b4 0f 	lds	r18, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   19cb8:	20 95       	com	r18
   19cba:	24 23       	and	r18, r20
   19cbc:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:166
	    TCLK_HIGH;
   19cbe:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   19cc2:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   19cc6:	20 81       	ld	r18, Z
   19cc8:	40 91 b4 0f 	lds	r20, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   19ccc:	24 2b       	or	r18, r20
   19cce:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:167
	    if(TDOUT_STATE)
   19cd0:	e0 91 ab 0f 	lds	r30, 0x0FAB	; 0x800fab <my_touch+0x15>
   19cd4:	f0 91 ac 0f 	lds	r31, 0x0FAC	; 0x800fac <my_touch+0x16>
   19cd8:	20 81       	ld	r18, Z
   19cda:	40 91 b5 0f 	lds	r20, 0x0FB5	; 0x800fb5 <my_touch+0x1f>
   19cde:	24 23       	and	r18, r20
   19ce0:	09 f0       	breq	.+2      	; 0x19ce4 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x144>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:169
	    {
	         num += 1;                  
   19ce2:	01 96       	adiw	r24, 0x01	; 1
   19ce4:	31 50       	subi	r19, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:162
	//delay_hus(6);              
	TCLK_LOW; 
	delay_hus(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
   19ce6:	f9 f6       	brne	.-66     	; 0x19ca6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x106>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:177
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
       TCS_HIGH;   
   19ce8:	e0 91 a7 0f 	lds	r30, 0x0FA7	; 0x800fa7 <my_touch+0x11>
   19cec:	f0 91 a8 0f 	lds	r31, 0x0FA8	; 0x800fa8 <my_touch+0x12>
   19cf0:	20 81       	ld	r18, Z
   19cf2:	30 91 b3 0f 	lds	r19, 0x0FB3	; 0x800fb3 <my_touch+0x1d>
   19cf6:	23 2b       	or	r18, r19
   19cf8:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:176
		else
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
   19cfa:	24 e0       	ldi	r18, 0x04	; 4
   19cfc:	96 95       	lsr	r25
   19cfe:	87 95       	ror	r24
   19d00:	2a 95       	dec	r18
   19d02:	e1 f7       	brne	.-8      	; 0x19cfc <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x15c>
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.48():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:191
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
   19d04:	d6 01       	movw	r26, r12
   19d06:	8d 93       	st	X+, r24
   19d08:	9d 93       	st	X+, r25
   19d0a:	6d 01       	movw	r12, r26
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:189
{
 	uint16_t i, j;
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
   19d0c:	ae 15       	cp	r26, r14
   19d0e:	bf 05       	cpc	r27, r15
   19d10:	09 f0       	breq	.+2      	; 0x19d14 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x174>
   19d12:	5e cf       	rjmp	.-324    	; 0x19bd0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x30>
   19d14:	c8 01       	movw	r24, r16
   19d16:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:151
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   19d18:	f8 01       	movw	r30, r16
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:197
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
       	{
        	if(buf[i]>buf[j])
   19d1a:	d8 01       	movw	r26, r16
   19d1c:	2d 91       	ld	r18, X+
   19d1e:	3c 91       	ld	r19, X
   19d20:	11 97       	sbiw	r26, 0x01	; 1
   19d22:	42 81       	ldd	r20, Z+2	; 0x02
   19d24:	53 81       	ldd	r21, Z+3	; 0x03
   19d26:	42 17       	cp	r20, r18
   19d28:	53 07       	cpc	r21, r19
   19d2a:	20 f4       	brcc	.+8      	; 0x19d34 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x194>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:200
            {
             	temp=buf[i];
             	buf[i]=buf[j];
   19d2c:	4d 93       	st	X+, r20
   19d2e:	5c 93       	st	X, r21
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:201
             	buf[j]=temp;
   19d30:	33 83       	std	Z+3, r19	; 0x03
   19d32:	22 83       	std	Z+2, r18	; 0x02
   19d34:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:195
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
   19d36:	8e 17       	cp	r24, r30
   19d38:	9f 07       	cpc	r25, r31
   19d3a:	79 f7       	brne	.-34     	; 0x19d1a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x17a>
   19d3c:	0e 5f       	subi	r16, 0xFE	; 254
   19d3e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:193
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
   19d40:	08 17       	cp	r16, r24
   19d42:	19 07       	cpc	r17, r25
   19d44:	49 f7       	brne	.-46     	; 0x19d18 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x178>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:207
          	}
      	}
  	}          
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++) //Remove maximum and minimum values
	{
		sum+=buf[i];
   19d46:	8b 81       	ldd	r24, Y+3	; 0x03
   19d48:	9c 81       	ldd	r25, Y+4	; 0x04
   19d4a:	2d 81       	ldd	r18, Y+5	; 0x05
   19d4c:	3e 81       	ldd	r19, Y+6	; 0x06
   19d4e:	82 0f       	add	r24, r18
   19d50:	93 1f       	adc	r25, r19
   19d52:	2f 81       	ldd	r18, Y+7	; 0x07
   19d54:	38 85       	ldd	r19, Y+8	; 0x08
   19d56:	82 0f       	add	r24, r18
   19d58:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:209
	}
	temp=sum/(READ_TIMES-2*LOST_VAL);
   19d5a:	63 e0       	ldi	r22, 0x03	; 3
   19d5c:	70 e0       	ldi	r23, 0x00	; 0
   19d5e:	0e 94 3d ef 	call	0x1de7a	; 0x1de7a <__udivmodhi4>
   19d62:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:211
	return temp;   
} 
   19d64:	2a 96       	adiw	r28, 0x0a	; 10
   19d66:	0f b6       	in	r0, 0x3f	; 63
   19d68:	f8 94       	cli
   19d6a:	de bf       	out	0x3e, r29	; 62
   19d6c:	0f be       	out	0x3f, r0	; 63
   19d6e:	cd bf       	out	0x3d, r28	; 61
   19d70:	df 91       	pop	r29
   19d72:	cf 91       	pop	r28
   19d74:	1f 91       	pop	r17
   19d76:	0f 91       	pop	r16
   19d78:	ff 90       	pop	r15
   19d7a:	ef 90       	pop	r14
   19d7c:	df 90       	pop	r13
   19d7e:	cf 90       	pop	r12
   19d80:	bf 90       	pop	r11
   19d82:	08 95       	ret
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:139
		{
			TDIN_HIGH; 
		}
		else
		{
			TDIN_LOW;
   19d84:	40 81       	ld	r20, Z
   19d86:	80 95       	com	r24
   19d88:	84 23       	and	r24, r20
   19d8a:	4f cf       	rjmp	.-354    	; 0x19c2a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x8a>

00019d8c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>:
_ZN4RF2419print_byte_registerEPKchh.constprop.38():
/home/saric/Arduino/libraries/RF24/RF24.cpp:395
          );
}

/****************************************************************************/

void RF24::print_byte_register(const char* name, uint8_t reg, uint8_t qty)
   19d8c:	ff 92       	push	r15
   19d8e:	0f 93       	push	r16
   19d90:	1f 93       	push	r17
   19d92:	cf 93       	push	r28
   19d94:	df 93       	push	r29
   19d96:	c6 2f       	mov	r28, r22
   19d98:	d4 2f       	mov	r29, r20
/home/saric/Arduino/libraries/RF24/RF24.cpp:402
  //char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
  //printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);
  #if defined (RF24_LINUX)
    printf("%s\t =", name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
   19d9a:	9f 93       	push	r25
   19d9c:	8f 93       	push	r24
   19d9e:	8e ee       	ldi	r24, 0xEE	; 238
   19da0:	95 e7       	ldi	r25, 0x75	; 117
   19da2:	9f 93       	push	r25
   19da4:	8f 93       	push	r24
   19da6:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <printf_P>
   19daa:	dc 0f       	add	r29, r28
   19dac:	0f 90       	pop	r0
   19dae:	0f 90       	pop	r0
   19db0:	0f 90       	pop	r0
   19db2:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:405
  #endif
  while (qty--)
    printf_P(PSTR(" 0x%02x"),read_register(reg++));
   19db4:	06 ee       	ldi	r16, 0xE6	; 230
   19db6:	15 e7       	ldi	r17, 0x75	; 117
/home/saric/Arduino/libraries/RF24/RF24.cpp:404
  #if defined (RF24_LINUX)
    printf("%s\t =", name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
   19db8:	cd 17       	cp	r28, r29
   19dba:	91 f0       	breq	.+36     	; 0x19de0 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]+0x54>
/home/saric/Arduino/libraries/RF24/RF24.cpp:405
    printf_P(PSTR(" 0x%02x"),read_register(reg++));
   19dbc:	ff 24       	eor	r15, r15
   19dbe:	f3 94       	inc	r15
   19dc0:	fc 0e       	add	r15, r28
   19dc2:	8c 2f       	mov	r24, r28
   19dc4:	0e 94 2d c7 	call	0x18e5a	; 0x18e5a <RF24::read_register(unsigned char) [clone .constprop.107]>
   19dc8:	1f 92       	push	r1
   19dca:	8f 93       	push	r24
   19dcc:	1f 93       	push	r17
   19dce:	0f 93       	push	r16
   19dd0:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <printf_P>
   19dd4:	0f 90       	pop	r0
   19dd6:	0f 90       	pop	r0
   19dd8:	0f 90       	pop	r0
   19dda:	0f 90       	pop	r0
   19ddc:	cf 2d       	mov	r28, r15
   19dde:	ec cf       	rjmp	.-40     	; 0x19db8 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]+0x2c>
/home/saric/Arduino/libraries/RF24/RF24.cpp:406
  printf_P(PSTR("\r\n"));
   19de0:	83 ee       	ldi	r24, 0xE3	; 227
   19de2:	95 e7       	ldi	r25, 0x75	; 117
   19de4:	9f 93       	push	r25
   19de6:	8f 93       	push	r24
   19de8:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <printf_P>
   19dec:	0f 90       	pop	r0
   19dee:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:407
}
   19df0:	df 91       	pop	r29
   19df2:	cf 91       	pop	r28
   19df4:	1f 91       	pop	r17
   19df6:	0f 91       	pop	r16
   19df8:	ff 90       	pop	r15
   19dfa:	08 95       	ret

00019dfc <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]>:
_ZN4RF2422print_address_registerEPKchh.constprop.36():
/home/saric/Arduino/libraries/RF24/RF24.cpp:411

/****************************************************************************/

void RF24::print_address_register(const char* name, uint8_t reg, uint8_t qty)
   19dfc:	2f 92       	push	r2
   19dfe:	3f 92       	push	r3
   19e00:	4f 92       	push	r4
   19e02:	5f 92       	push	r5
   19e04:	6f 92       	push	r6
   19e06:	7f 92       	push	r7
   19e08:	8f 92       	push	r8
   19e0a:	9f 92       	push	r9
   19e0c:	af 92       	push	r10
   19e0e:	bf 92       	push	r11
   19e10:	cf 92       	push	r12
   19e12:	df 92       	push	r13
   19e14:	ef 92       	push	r14
   19e16:	ff 92       	push	r15
   19e18:	0f 93       	push	r16
   19e1a:	1f 93       	push	r17
   19e1c:	cf 93       	push	r28
   19e1e:	df 93       	push	r29
   19e20:	1f 92       	push	r1
   19e22:	cd b7       	in	r28, 0x3d	; 61
   19e24:	de b7       	in	r29, 0x3e	; 62
   19e26:	96 2e       	mov	r9, r22
   19e28:	34 2e       	mov	r3, r20
/home/saric/Arduino/libraries/RF24/RF24.cpp:431
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
  }

  printf_P(PSTR("\r\n"));
}
   19e2a:	4d b6       	in	r4, 0x3d	; 61
   19e2c:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/RF24/RF24.cpp:417
{

  #if defined (RF24_LINUX)
    printf("%s\t =",name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
   19e2e:	9f 93       	push	r25
   19e30:	8f 93       	push	r24
   19e32:	8d ed       	ldi	r24, 0xDD	; 221
   19e34:	95 e7       	ldi	r25, 0x75	; 117
   19e36:	9f 93       	push	r25
   19e38:	8f 93       	push	r24
   19e3a:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <printf_P>
   19e3e:	39 0c       	add	r3, r9
   19e40:	0f 90       	pop	r0
   19e42:	0f 90       	pop	r0
   19e44:	0f 90       	pop	r0
   19e46:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:424
  while (qty--)
  {
    uint8_t buffer[addr_width];
    read_register(reg++,buffer,sizeof buffer);

    printf_P(PSTR(" 0x"));
   19e48:	89 ed       	ldi	r24, 0xD9	; 217
   19e4a:	c8 2e       	mov	r12, r24
   19e4c:	85 e7       	ldi	r24, 0x75	; 117
   19e4e:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:427
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
   19e50:	94 ed       	ldi	r25, 0xD4	; 212
   19e52:	a9 2e       	mov	r10, r25
   19e54:	95 e7       	ldi	r25, 0x75	; 117
   19e56:	b9 2e       	mov	r11, r25
/home/saric/Arduino/libraries/RF24/RF24.cpp:419
  #if defined (RF24_LINUX)
    printf("%s\t =",name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
   19e58:	93 14       	cp	r9, r3
   19e5a:	09 f4       	brne	.+2      	; 0x19e5e <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0x62>
   19e5c:	4c c0       	rjmp	.+152    	; 0x19ef6 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xfa>
/home/saric/Arduino/libraries/RF24/RF24.cpp:428

    printf_P(PSTR(" 0x"));
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
  }
   19e5e:	6d b6       	in	r6, 0x3d	; 61
   19e60:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/RF24/RF24.cpp:421
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
  {
    uint8_t buffer[addr_width];
   19e62:	20 90 1f 10 	lds	r2, 0x101F	; 0x80101f <radio+0xe>
   19e66:	02 2d       	mov	r16, r2
   19e68:	10 e0       	ldi	r17, 0x00	; 0
   19e6a:	8d b7       	in	r24, 0x3d	; 61
   19e6c:	9e b7       	in	r25, 0x3e	; 62
   19e6e:	80 1b       	sub	r24, r16
   19e70:	91 0b       	sbc	r25, r17
   19e72:	0f b6       	in	r0, 0x3f	; 63
   19e74:	f8 94       	cli
   19e76:	9e bf       	out	0x3e, r25	; 62
   19e78:	0f be       	out	0x3f, r0	; 63
   19e7a:	8d bf       	out	0x3d, r24	; 61
   19e7c:	ed b7       	in	r30, 0x3d	; 61
   19e7e:	fe b7       	in	r31, 0x3e	; 62
   19e80:	31 96       	adiw	r30, 0x01	; 1
   19e82:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/RF24/RF24.cpp:422
    read_register(reg++,buffer,sizeof buffer);
   19e84:	f1 e0       	ldi	r31, 0x01	; 1
   19e86:	f9 0d       	add	r31, r9
   19e88:	f9 83       	std	Y+1, r31	; 0x01
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   19e8a:	80 e0       	ldi	r24, 0x00	; 0
   19e8c:	0e 94 fd c6 	call	0x18dfa	; 0x18dfa <RF24::csn(bool) [clone .constprop.111]>
read_register():
/home/saric/Arduino/libraries/RF24/RF24.cpp:128
  endTransaction(); //unlocks mutex and setting csn high

#else

  beginTransaction();
  status = _SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
   19e90:	89 2d       	mov	r24, r9
   19e92:	8f 71       	andi	r24, 0x1F	; 31
   19e94:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
   19e98:	47 01       	movw	r8, r14
/home/saric/Arduino/libraries/RF24/RF24.cpp:129
  while ( len-- ){
   19e9a:	2a 94       	dec	r2
   19e9c:	8f ef       	ldi	r24, 0xFF	; 255
   19e9e:	28 16       	cp	r2, r24
   19ea0:	31 f0       	breq	.+12     	; 0x19eae <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xb2>
/home/saric/Arduino/libraries/RF24/RF24.cpp:130
    *buf++ = _SPI.transfer(0xff);
   19ea2:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
   19ea6:	f4 01       	movw	r30, r8
   19ea8:	81 93       	st	Z+, r24
   19eaa:	4f 01       	movw	r8, r30
   19eac:	f6 cf       	rjmp	.-20     	; 0x19e9a <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0x9e>
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   19eae:	81 e0       	ldi	r24, 0x01	; 1
   19eb0:	0e 94 fd c6 	call	0x18dfa	; 0x18dfa <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2422print_address_registerEPKchh.constprop.36():
/home/saric/Arduino/libraries/RF24/RF24.cpp:424
  while (qty--)
  {
    uint8_t buffer[addr_width];
    read_register(reg++,buffer,sizeof buffer);

    printf_P(PSTR(" 0x"));
   19eb4:	df 92       	push	r13
   19eb6:	cf 92       	push	r12
   19eb8:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:425
    uint8_t* bufptr = buffer + sizeof buffer;
   19ebc:	0e 0d       	add	r16, r14
   19ebe:	1f 1d       	adc	r17, r15
   19ec0:	0f 90       	pop	r0
   19ec2:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:426
    while( --bufptr >= buffer )
   19ec4:	01 50       	subi	r16, 0x01	; 1
   19ec6:	11 09       	sbc	r17, r1
   19ec8:	0e 15       	cp	r16, r14
   19eca:	1f 05       	cpc	r17, r15
   19ecc:	68 f0       	brcs	.+26     	; 0x19ee8 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xec>
/home/saric/Arduino/libraries/RF24/RF24.cpp:427
      printf_P(PSTR("%02x"),*bufptr);
   19ece:	f8 01       	movw	r30, r16
   19ed0:	80 81       	ld	r24, Z
   19ed2:	1f 92       	push	r1
   19ed4:	8f 93       	push	r24
   19ed6:	bf 92       	push	r11
   19ed8:	af 92       	push	r10
   19eda:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <printf_P>
   19ede:	0f 90       	pop	r0
   19ee0:	0f 90       	pop	r0
   19ee2:	0f 90       	pop	r0
   19ee4:	0f 90       	pop	r0
   19ee6:	ee cf       	rjmp	.-36     	; 0x19ec4 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xc8>
   19ee8:	0f b6       	in	r0, 0x3f	; 63
   19eea:	f8 94       	cli
   19eec:	7e be       	out	0x3e, r7	; 62
   19eee:	0f be       	out	0x3f, r0	; 63
   19ef0:	6d be       	out	0x3d, r6	; 61
/home/saric/Arduino/libraries/RF24/RF24.cpp:422
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
  {
    uint8_t buffer[addr_width];
    read_register(reg++,buffer,sizeof buffer);
   19ef2:	99 80       	ldd	r9, Y+1	; 0x01
   19ef4:	b1 cf       	rjmp	.-158    	; 0x19e58 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0x5c>
/home/saric/Arduino/libraries/RF24/RF24.cpp:430
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
  }

  printf_P(PSTR("\r\n"));
   19ef6:	81 ed       	ldi	r24, 0xD1	; 209
   19ef8:	95 e7       	ldi	r25, 0x75	; 117
   19efa:	9f 93       	push	r25
   19efc:	8f 93       	push	r24
   19efe:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <printf_P>
   19f02:	0f 90       	pop	r0
   19f04:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:431
}
   19f06:	0f b6       	in	r0, 0x3f	; 63
   19f08:	f8 94       	cli
   19f0a:	5e be       	out	0x3e, r5	; 62
   19f0c:	0f be       	out	0x3f, r0	; 63
   19f0e:	4d be       	out	0x3d, r4	; 61
   19f10:	0f 90       	pop	r0
   19f12:	df 91       	pop	r29
   19f14:	cf 91       	pop	r28
   19f16:	1f 91       	pop	r17
   19f18:	0f 91       	pop	r16
   19f1a:	ff 90       	pop	r15
   19f1c:	ef 90       	pop	r14
   19f1e:	df 90       	pop	r13
   19f20:	cf 90       	pop	r12
   19f22:	bf 90       	pop	r11
   19f24:	af 90       	pop	r10
   19f26:	9f 90       	pop	r9
   19f28:	8f 90       	pop	r8
   19f2a:	7f 90       	pop	r7
   19f2c:	6f 90       	pop	r6
   19f2e:	5f 90       	pop	r5
   19f30:	4f 90       	pop	r4
   19f32:	3f 90       	pop	r3
   19f34:	2f 90       	pop	r2
   19f36:	08 95       	ret

00019f38 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>:
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:84
    write(ptr, cntl_byte, data, len);
    ptr += len;
    writeSnTX_WR(s, ptr);
}

void W5500Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
   19f38:	af 92       	push	r10
   19f3a:	bf 92       	push	r11
   19f3c:	cf 92       	push	r12
   19f3e:	df 92       	push	r13
   19f40:	ef 92       	push	r14
   19f42:	ff 92       	push	r15
   19f44:	0f 93       	push	r16
   19f46:	1f 93       	push	r17
   19f48:	cf 93       	push	r28
   19f4a:	df 93       	push	r29
   19f4c:	f8 2e       	mov	r15, r24
   19f4e:	5b 01       	movw	r10, r22
   19f50:	6a 01       	movw	r12, r20
   19f52:	e2 2e       	mov	r14, r18
readSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
   19f54:	68 e2       	ldi	r22, 0x28	; 40
   19f56:	70 e0       	ldi	r23, 0x00	; 0
   19f58:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
   19f5c:	08 2f       	mov	r16, r24
   19f5e:	10 e0       	ldi	r17, 0x00	; 0
   19f60:	10 2f       	mov	r17, r16
   19f62:	00 27       	eor	r16, r16
   19f64:	69 e2       	ldi	r22, 0x29	; 41
   19f66:	70 e0       	ldi	r23, 0x00	; 0
   19f68:	8f 2d       	mov	r24, r15
   19f6a:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
   19f6e:	e8 01       	movw	r28, r16
   19f70:	c8 0f       	add	r28, r24
   19f72:	d1 1d       	adc	r29, r1
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:149
    return _data;
}

uint16_t W5500Class::read(uint16_t _addr, uint8_t _cb, uint8_t *_buf, uint16_t _len)
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
   19f74:	80 91 02 0e 	lds	r24, 0x0E02	; 0x800e02 <wiznet_SPI_settings>
   19f78:	90 91 03 0e 	lds	r25, 0x0E03	; 0x800e03 <wiznet_SPI_settings+0x1>
   19f7c:	0e 94 1e 78 	call	0xf03c	; 0xf03c <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:150
    setSS();
   19f80:	0e 94 11 78 	call	0xf022	; 0xf022 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:151
    SPI.transfer(_addr >> 8);
   19f84:	8d 2f       	mov	r24, r29
   19f86:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:152
    SPI.transfer(_addr & 0xFF);
   19f8a:	8c 2f       	mov	r24, r28
   19f8c:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
read_data():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:99
    }
}

void W5500Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    uint8_t cntl_byte = (0x18+(s<<5));
   19f90:	8f 2d       	mov	r24, r15
   19f92:	82 95       	swap	r24
   19f94:	88 0f       	add	r24, r24
   19f96:	80 7e       	andi	r24, 0xE0	; 224
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:153
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
   19f98:	88 5e       	subi	r24, 0xE8	; 232
   19f9a:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
   19f9e:	85 01       	movw	r16, r10
   19fa0:	ac 0c       	add	r10, r12
   19fa2:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:155
    for (uint16_t i=0; i<_len; i++){
        _buf[i] = SPI.transfer(0);
   19fa4:	80 e0       	ldi	r24, 0x00	; 0
   19fa6:	0e 94 17 78 	call	0xf02e	; 0xf02e <SPIClass::transfer(unsigned char)>
   19faa:	f8 01       	movw	r30, r16
   19fac:	81 93       	st	Z+, r24
   19fae:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:154
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
    for (uint16_t i=0; i<_len; i++){
   19fb0:	ea 15       	cp	r30, r10
   19fb2:	fb 05       	cpc	r31, r11
   19fb4:	b9 f7       	brne	.-18     	; 0x19fa4 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]+0x6c>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:157
        _buf[i] = SPI.transfer(0);
    }
    resetSS();
   19fb6:	0e 94 0c 78 	call	0xf018	; 0xf018 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:158
    SPI.endTransaction();
   19fba:	0e 94 16 78 	call	0xf02c	; 0xf02c <SPIClass::endTransaction()>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:90
{
    uint16_t ptr;
    ptr = readSnRX_RD(s);

    read_data(s, ptr, data, len);
    if (!peek)
   19fbe:	e1 10       	cpse	r14, r1
   19fc0:	18 c0       	rjmp	.+48     	; 0x19ff2 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]+0xba>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:92
    {
        ptr += len;
   19fc2:	cc 0d       	add	r28, r12
   19fc4:	dd 1d       	adc	r29, r13
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   19fc6:	4d 2f       	mov	r20, r29
   19fc8:	68 e2       	ldi	r22, 0x28	; 40
   19fca:	70 e0       	ldi	r23, 0x00	; 0
   19fcc:	8f 2d       	mov	r24, r15
   19fce:	0e 94 93 78 	call	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   19fd2:	4c 2f       	mov	r20, r28
   19fd4:	69 e2       	ldi	r22, 0x29	; 41
   19fd6:	70 e0       	ldi	r23, 0x00	; 0
   19fd8:	8f 2d       	mov	r24, r15
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
        writeSnRX_RD(s, ptr);
    }
}
   19fda:	df 91       	pop	r29
   19fdc:	cf 91       	pop	r28
   19fde:	1f 91       	pop	r17
   19fe0:	0f 91       	pop	r16
   19fe2:	ff 90       	pop	r15
   19fe4:	ef 90       	pop	r14
   19fe6:	df 90       	pop	r13
   19fe8:	cf 90       	pop	r12
   19fea:	bf 90       	pop	r11
   19fec:	af 90       	pop	r10
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   19fee:	0c 94 93 78 	jmp	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
   19ff2:	df 91       	pop	r29
   19ff4:	cf 91       	pop	r28
   19ff6:	1f 91       	pop	r17
   19ff8:	0f 91       	pop	r16
   19ffa:	ff 90       	pop	r15
   19ffc:	ef 90       	pop	r14
   19ffe:	df 90       	pop	r13
   1a000:	cf 90       	pop	r12
   1a002:	bf 90       	pop	r11
   1a004:	af 90       	pop	r10
   1a006:	08 95       	ret

0001a008 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>:
_ZN10W5500Class17getRXReceivedSizeEh.constprop.30():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:55
    } 
    while (val != val1);
    return val;
}

uint16_t W5500Class::getRXReceivedSize(SOCKET s)
   1a008:	ff 92       	push	r15
   1a00a:	0f 93       	push	r16
   1a00c:	1f 93       	push	r17
   1a00e:	cf 93       	push	r28
   1a010:	df 93       	push	r29
   1a012:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:57
{
    uint16_t val=0,val1=0;
   1a014:	10 e0       	ldi	r17, 0x00	; 0
   1a016:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:59
    do {
        val1 = readSnRX_RSR(s);
   1a018:	8f 2d       	mov	r24, r15
   1a01a:	0e 94 06 79 	call	0xf20c	; 0xf20c <W5500Class::readSnRX_RSR(unsigned char)>
   1a01e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:60
        if (val1 != 0)
   1a020:	89 2b       	or	r24, r25
   1a022:	21 f0       	breq	.+8      	; 0x1a02c <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:61
            val = readSnRX_RSR(s);
   1a024:	8f 2d       	mov	r24, r15
   1a026:	0e 94 06 79 	call	0xf20c	; 0xf20c <W5500Class::readSnRX_RSR(unsigned char)>
   1a02a:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:63
    } 
    while (val != val1);
   1a02c:	c0 17       	cp	r28, r16
   1a02e:	d1 07       	cpc	r29, r17
   1a030:	99 f7       	brne	.-26     	; 0x1a018 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:65
    return val;
}
   1a032:	ce 01       	movw	r24, r28
   1a034:	df 91       	pop	r29
   1a036:	cf 91       	pop	r28
   1a038:	1f 91       	pop	r17
   1a03a:	0f 91       	pop	r16
   1a03c:	ff 90       	pop	r15
   1a03e:	08 95       	ret

0001a040 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:74
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);

}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
   1a040:	bf 92       	push	r11
   1a042:	cf 92       	push	r12
   1a044:	df 92       	push	r13
   1a046:	ef 92       	push	r14
   1a048:	ff 92       	push	r15
   1a04a:	0f 93       	push	r16
   1a04c:	1f 93       	push	r17
   1a04e:	cf 93       	push	r28
   1a050:	df 93       	push	r29
   1a052:	b8 2e       	mov	r11, r24
   1a054:	6b 01       	movw	r12, r22
   1a056:	7a 01       	movw	r14, r20
   1a058:	89 01       	movw	r16, r18
readSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
   1a05a:	64 e2       	ldi	r22, 0x24	; 36
   1a05c:	70 e0       	ldi	r23, 0x00	; 0
   1a05e:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
   1a062:	c8 2f       	mov	r28, r24
   1a064:	65 e2       	ldi	r22, 0x25	; 37
   1a066:	70 e0       	ldi	r23, 0x00	; 0
   1a068:	8b 2d       	mov	r24, r11
   1a06a:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <W5500Class::readSn(unsigned char, unsigned int)>
   1a06e:	d0 e0       	ldi	r29, 0x00	; 0
   1a070:	dc 2f       	mov	r29, r28
   1a072:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:78
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
    ptr += data_offset;
   1a074:	8c 0d       	add	r24, r12
   1a076:	9d 2d       	mov	r25, r13
   1a078:	91 1d       	adc	r25, r1
   1a07a:	c8 0f       	add	r28, r24
   1a07c:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:77
}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
   1a07e:	6b 2d       	mov	r22, r11
   1a080:	62 95       	swap	r22
   1a082:	66 0f       	add	r22, r22
   1a084:	60 7e       	andi	r22, 0xE0	; 224
   1a086:	6c 5e       	subi	r22, 0xEC	; 236
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:79
    ptr += data_offset;
    write(ptr, cntl_byte, data, len);
   1a088:	98 01       	movw	r18, r16
   1a08a:	a7 01       	movw	r20, r14
   1a08c:	ce 01       	movw	r24, r28
   1a08e:	0e 94 40 78 	call	0xf080	; 0xf080 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:80
    ptr += len;
   1a092:	c0 0f       	add	r28, r16
   1a094:	d1 1f       	adc	r29, r17
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   1a096:	4d 2f       	mov	r20, r29
   1a098:	64 e2       	ldi	r22, 0x24	; 36
   1a09a:	70 e0       	ldi	r23, 0x00	; 0
   1a09c:	8b 2d       	mov	r24, r11
   1a09e:	0e 94 93 78 	call	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1a0a2:	4c 2f       	mov	r20, r28
   1a0a4:	65 e2       	ldi	r22, 0x25	; 37
   1a0a6:	70 e0       	ldi	r23, 0x00	; 0
   1a0a8:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:82
    writeSnTX_WR(s, ptr);
}
   1a0aa:	df 91       	pop	r29
   1a0ac:	cf 91       	pop	r28
   1a0ae:	1f 91       	pop	r17
   1a0b0:	0f 91       	pop	r16
   1a0b2:	ff 90       	pop	r15
   1a0b4:	ef 90       	pop	r14
   1a0b6:	df 90       	pop	r13
   1a0b8:	cf 90       	pop	r12
   1a0ba:	bf 90       	pop	r11
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   1a0bc:	0c 94 93 78 	jmp	0xf126	; 0xf126 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0001a0c0 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>:
_ZN10W5500Class13getTXFreeSizeEh.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:43
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
  }
}

uint16_t W5500Class::getTXFreeSize(SOCKET s)
   1a0c0:	ff 92       	push	r15
   1a0c2:	0f 93       	push	r16
   1a0c4:	1f 93       	push	r17
   1a0c6:	cf 93       	push	r28
   1a0c8:	df 93       	push	r29
   1a0ca:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:45
{
    uint16_t val=0, val1=0;
   1a0cc:	10 e0       	ldi	r17, 0x00	; 0
   1a0ce:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:47
    do {
        val1 = readSnTX_FSR(s);
   1a0d0:	8f 2d       	mov	r24, r15
   1a0d2:	0e 94 1e 79 	call	0xf23c	; 0xf23c <W5500Class::readSnTX_FSR(unsigned char)>
   1a0d6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:48
        if (val1 != 0)
   1a0d8:	89 2b       	or	r24, r25
   1a0da:	21 f0       	breq	.+8      	; 0x1a0e4 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:49
            val = readSnTX_FSR(s);
   1a0dc:	8f 2d       	mov	r24, r15
   1a0de:	0e 94 1e 79 	call	0xf23c	; 0xf23c <W5500Class::readSnTX_FSR(unsigned char)>
   1a0e2:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:51
    } 
    while (val != val1);
   1a0e4:	c0 17       	cp	r28, r16
   1a0e6:	d1 07       	cpc	r29, r17
   1a0e8:	99 f7       	brne	.-26     	; 0x1a0d0 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:53
    return val;
}
   1a0ea:	ce 01       	movw	r24, r28
   1a0ec:	df 91       	pop	r29
   1a0ee:	cf 91       	pop	r28
   1a0f0:	1f 91       	pop	r17
   1a0f2:	0f 91       	pop	r16
   1a0f4:	ff 90       	pop	r15
   1a0f6:	08 95       	ret

0001a0f8 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
   1a0f8:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
   1a0fa:	a4 8d       	ldd	r26, Z+28	; 0x1c
   1a0fc:	a8 0f       	add	r26, r24
   1a0fe:	b9 2f       	mov	r27, r25
   1a100:	b1 1d       	adc	r27, r1
   1a102:	a3 5a       	subi	r26, 0xA3	; 163
   1a104:	bf 4f       	sbci	r27, 0xFF	; 255
   1a106:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
   1a108:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a10a:	90 e0       	ldi	r25, 0x00	; 0
   1a10c:	01 96       	adiw	r24, 0x01	; 1
   1a10e:	8f 73       	andi	r24, 0x3F	; 63
   1a110:	99 27       	eor	r25, r25
   1a112:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
   1a114:	a6 89       	ldd	r26, Z+22	; 0x16
   1a116:	b7 89       	ldd	r27, Z+23	; 0x17
   1a118:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
   1a11a:	a0 89       	ldd	r26, Z+16	; 0x10
   1a11c:	b1 89       	ldd	r27, Z+17	; 0x11
   1a11e:	8c 91       	ld	r24, X
   1a120:	80 64       	ori	r24, 0x40	; 64
   1a122:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
   1a124:	93 8d       	ldd	r25, Z+27	; 0x1b
   1a126:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a128:	98 13       	cpse	r25, r24
   1a12a:	06 c0       	rjmp	.+12     	; 0x1a138 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
   1a12c:	02 88       	ldd	r0, Z+18	; 0x12
   1a12e:	f3 89       	ldd	r31, Z+19	; 0x13
   1a130:	e0 2d       	mov	r30, r0
   1a132:	80 81       	ld	r24, Z
   1a134:	8f 7d       	andi	r24, 0xDF	; 223
   1a136:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
   1a138:	08 95       	ret

0001a13a <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
   1a13a:	ef 92       	push	r14
   1a13c:	ff 92       	push	r15
   1a13e:	0f 93       	push	r16
   1a140:	1f 93       	push	r17
   1a142:	cf 93       	push	r28
   1a144:	df 93       	push	r29
   1a146:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
   1a148:	81 e0       	ldi	r24, 0x01	; 1
   1a14a:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
   1a14c:	9b 8d       	ldd	r25, Y+27	; 0x1b
   1a14e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a150:	98 13       	cpse	r25, r24
   1a152:	16 c0       	rjmp	.+44     	; 0x1a180 <HardwareSerial::write(unsigned char)+0x46>
   1a154:	e8 89       	ldd	r30, Y+16	; 0x10
   1a156:	f9 89       	ldd	r31, Y+17	; 0x11
   1a158:	80 81       	ld	r24, Z
   1a15a:	85 ff       	sbrs	r24, 5
   1a15c:	11 c0       	rjmp	.+34     	; 0x1a180 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
   1a15e:	ee 89       	ldd	r30, Y+22	; 0x16
   1a160:	ff 89       	ldd	r31, Y+23	; 0x17
   1a162:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
   1a164:	e8 89       	ldd	r30, Y+16	; 0x10
   1a166:	f9 89       	ldd	r31, Y+17	; 0x11
   1a168:	80 81       	ld	r24, Z
   1a16a:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
   1a16c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
   1a16e:	81 e0       	ldi	r24, 0x01	; 1
   1a170:	90 e0       	ldi	r25, 0x00	; 0
   1a172:	df 91       	pop	r29
   1a174:	cf 91       	pop	r28
   1a176:	1f 91       	pop	r17
   1a178:	0f 91       	pop	r16
   1a17a:	ff 90       	pop	r15
   1a17c:	ef 90       	pop	r14
   1a17e:	08 95       	ret
   1a180:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
   1a182:	0b 8d       	ldd	r16, Y+27	; 0x1b
   1a184:	10 e0       	ldi	r17, 0x00	; 0
   1a186:	0f 5f       	subi	r16, 0xFF	; 255
   1a188:	1f 4f       	sbci	r17, 0xFF	; 255
   1a18a:	0f 73       	andi	r16, 0x3F	; 63
   1a18c:	11 27       	eor	r17, r17
   1a18e:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
   1a190:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a192:	8e 11       	cpse	r24, r14
   1a194:	0c c0       	rjmp	.+24     	; 0x1a1ae <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
   1a196:	0f b6       	in	r0, 0x3f	; 63
   1a198:	07 fc       	sbrc	r0, 7
   1a19a:	fa cf       	rjmp	.-12     	; 0x1a190 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
   1a19c:	e8 89       	ldd	r30, Y+16	; 0x10
   1a19e:	f9 89       	ldd	r31, Y+17	; 0x11
   1a1a0:	80 81       	ld	r24, Z
   1a1a2:	85 ff       	sbrs	r24, 5
   1a1a4:	f5 cf       	rjmp	.-22     	; 0x1a190 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
   1a1a6:	ce 01       	movw	r24, r28
   1a1a8:	0e 94 7c d0 	call	0x1a0f8	; 0x1a0f8 <HardwareSerial::_tx_udr_empty_irq()>
   1a1ac:	f1 cf       	rjmp	.-30     	; 0x1a190 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
   1a1ae:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1a1b0:	ec 0f       	add	r30, r28
   1a1b2:	fd 2f       	mov	r31, r29
   1a1b4:	f1 1d       	adc	r31, r1
   1a1b6:	e3 5a       	subi	r30, 0xA3	; 163
   1a1b8:	ff 4f       	sbci	r31, 0xFF	; 255
   1a1ba:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
   1a1bc:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
   1a1be:	ea 89       	ldd	r30, Y+18	; 0x12
   1a1c0:	fb 89       	ldd	r31, Y+19	; 0x13
   1a1c2:	80 81       	ld	r24, Z
   1a1c4:	80 62       	ori	r24, 0x20	; 32
   1a1c6:	d2 cf       	rjmp	.-92     	; 0x1a16c <HardwareSerial::write(unsigned char)+0x32>

0001a1c8 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
   1a1c8:	cf 93       	push	r28
   1a1ca:	df 93       	push	r29
   1a1cc:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
   1a1ce:	88 8d       	ldd	r24, Y+24	; 0x18
   1a1d0:	88 23       	and	r24, r24
   1a1d2:	b9 f0       	breq	.+46     	; 0x1a202 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
   1a1d4:	aa 89       	ldd	r26, Y+18	; 0x12
   1a1d6:	bb 89       	ldd	r27, Y+19	; 0x13
   1a1d8:	e8 89       	ldd	r30, Y+16	; 0x10
   1a1da:	f9 89       	ldd	r31, Y+17	; 0x11
   1a1dc:	8c 91       	ld	r24, X
   1a1de:	85 fd       	sbrc	r24, 5
   1a1e0:	03 c0       	rjmp	.+6      	; 0x1a1e8 <HardwareSerial::flush()+0x20>
   1a1e2:	80 81       	ld	r24, Z
   1a1e4:	86 fd       	sbrc	r24, 6
   1a1e6:	0d c0       	rjmp	.+26     	; 0x1a202 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
   1a1e8:	0f b6       	in	r0, 0x3f	; 63
   1a1ea:	07 fc       	sbrc	r0, 7
   1a1ec:	f7 cf       	rjmp	.-18     	; 0x1a1dc <HardwareSerial::flush()+0x14>
   1a1ee:	8c 91       	ld	r24, X
   1a1f0:	85 ff       	sbrs	r24, 5
   1a1f2:	f2 cf       	rjmp	.-28     	; 0x1a1d8 <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
   1a1f4:	80 81       	ld	r24, Z
   1a1f6:	85 ff       	sbrs	r24, 5
   1a1f8:	ed cf       	rjmp	.-38     	; 0x1a1d4 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
   1a1fa:	ce 01       	movw	r24, r28
   1a1fc:	0e 94 7c d0 	call	0x1a0f8	; 0x1a0f8 <HardwareSerial::_tx_udr_empty_irq()>
   1a200:	e9 cf       	rjmp	.-46     	; 0x1a1d4 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
   1a202:	df 91       	pop	r29
   1a204:	cf 91       	pop	r28
   1a206:	08 95       	ret

0001a208 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>:
_Z28thermostat_ring_update_biteshhh.constprop.224():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:203
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
   1a208:	1f 93       	push	r17
   1a20a:	cf 93       	push	r28
   1a20c:	df 93       	push	r29
   1a20e:	16 2f       	mov	r17, r22
thermostat_ring_get_status_data():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   1a210:	91 e2       	ldi	r25, 0x21	; 33
   1a212:	89 9f       	mul	r24, r25
   1a214:	e0 01       	movw	r28, r0
   1a216:	11 24       	eor	r1, r1
   1a218:	c8 5a       	subi	r28, 0xA8	; 168
   1a21a:	de 4f       	sbci	r29, 0xFE	; 254
   1a21c:	ce 01       	movw	r24, r28
   1a21e:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1a222:	68 2f       	mov	r22, r24
_Z28thermostat_ring_update_biteshhh.constprop.224():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:206
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
   1a224:	11 11       	cpse	r17, r1
   1a226:	07 c0       	rjmp	.+14     	; 0x1a236 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]+0x2e>
   1a228:	6e 7f       	andi	r22, 0xFE	; 254
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   1a22a:	ce 01       	movw	r24, r28
_Z28thermostat_ring_update_biteshhh.constprop.224():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:209
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
}
   1a22c:	df 91       	pop	r29
   1a22e:	cf 91       	pop	r28
   1a230:	1f 91       	pop	r17
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   1a232:	0c 94 ce 60 	jmp	0xc19c	; 0xc19c <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z28thermostat_ring_update_biteshhh.constprop.224():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   1a236:	61 60       	ori	r22, 0x01	; 1
   1a238:	f8 cf       	rjmp	.-16     	; 0x1a22a <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]+0x22>

0001a23a <localtime>:
localtime():
   1a23a:	6f e6       	ldi	r22, 0x6F	; 111
   1a23c:	74 e1       	ldi	r23, 0x14	; 20
   1a23e:	0e 94 24 d1 	call	0x1a248	; 0x1a248 <localtime_r>
   1a242:	8f e6       	ldi	r24, 0x6F	; 111
   1a244:	94 e1       	ldi	r25, 0x14	; 20
   1a246:	08 95       	ret

0001a248 <localtime_r>:
localtime_r():
   1a248:	cf 92       	push	r12
   1a24a:	df 92       	push	r13
   1a24c:	ef 92       	push	r14
   1a24e:	ff 92       	push	r15
   1a250:	0f 93       	push	r16
   1a252:	1f 93       	push	r17
   1a254:	cf 93       	push	r28
   1a256:	df 93       	push	r29
   1a258:	00 d0       	rcall	.+0      	; 0x1a25a <localtime_r+0x12>
   1a25a:	1f 92       	push	r1
   1a25c:	cd b7       	in	r28, 0x3d	; 61
   1a25e:	de b7       	in	r29, 0x3e	; 62
   1a260:	6c 01       	movw	r12, r24
   1a262:	7b 01       	movw	r14, r22
   1a264:	e0 91 85 14 	lds	r30, 0x1485	; 0x801485 <__dst_ptr>
   1a268:	f0 91 86 14 	lds	r31, 0x1486	; 0x801486 <__dst_ptr+0x1>
   1a26c:	0f ef       	ldi	r16, 0xFF	; 255
   1a26e:	1f ef       	ldi	r17, 0xFF	; 255
   1a270:	30 97       	sbiw	r30, 0x00	; 0
   1a272:	21 f0       	breq	.+8      	; 0x1a27c <localtime_r+0x34>
   1a274:	6b e7       	ldi	r22, 0x7B	; 123
   1a276:	74 e1       	ldi	r23, 0x14	; 20
   1a278:	19 95       	eicall
   1a27a:	8c 01       	movw	r16, r24
   1a27c:	f6 01       	movw	r30, r12
   1a27e:	80 81       	ld	r24, Z
   1a280:	91 81       	ldd	r25, Z+1	; 0x01
   1a282:	a2 81       	ldd	r26, Z+2	; 0x02
   1a284:	b3 81       	ldd	r27, Z+3	; 0x03
   1a286:	40 91 7b 14 	lds	r20, 0x147B	; 0x80147b <__utc_offset>
   1a28a:	50 91 7c 14 	lds	r21, 0x147C	; 0x80147c <__utc_offset+0x1>
   1a28e:	60 91 7d 14 	lds	r22, 0x147D	; 0x80147d <__utc_offset+0x2>
   1a292:	70 91 7e 14 	lds	r23, 0x147E	; 0x80147e <__utc_offset+0x3>
   1a296:	84 0f       	add	r24, r20
   1a298:	95 1f       	adc	r25, r21
   1a29a:	a6 1f       	adc	r26, r22
   1a29c:	b7 1f       	adc	r27, r23
   1a29e:	10 16       	cp	r1, r16
   1a2a0:	11 06       	cpc	r1, r17
   1a2a2:	cc f0       	brlt	.+50     	; 0x1a2d6 <localtime_r+0x8e>
   1a2a4:	89 83       	std	Y+1, r24	; 0x01
   1a2a6:	9a 83       	std	Y+2, r25	; 0x02
   1a2a8:	ab 83       	std	Y+3, r26	; 0x03
   1a2aa:	bc 83       	std	Y+4, r27	; 0x04
   1a2ac:	b7 01       	movw	r22, r14
   1a2ae:	ce 01       	movw	r24, r28
   1a2b0:	01 96       	adiw	r24, 0x01	; 1
   1a2b2:	0e 94 75 d1 	call	0x1a2ea	; 0x1a2ea <gmtime_r>
   1a2b6:	f7 01       	movw	r30, r14
   1a2b8:	13 87       	std	Z+11, r17	; 0x0b
   1a2ba:	02 87       	std	Z+10, r16	; 0x0a
   1a2bc:	0f 90       	pop	r0
   1a2be:	0f 90       	pop	r0
   1a2c0:	0f 90       	pop	r0
   1a2c2:	0f 90       	pop	r0
   1a2c4:	df 91       	pop	r29
   1a2c6:	cf 91       	pop	r28
   1a2c8:	1f 91       	pop	r17
   1a2ca:	0f 91       	pop	r16
   1a2cc:	ff 90       	pop	r15
   1a2ce:	ef 90       	pop	r14
   1a2d0:	df 90       	pop	r13
   1a2d2:	cf 90       	pop	r12
   1a2d4:	08 95       	ret
   1a2d6:	a8 01       	movw	r20, r16
   1a2d8:	01 2e       	mov	r0, r17
   1a2da:	00 0c       	add	r0, r0
   1a2dc:	66 0b       	sbc	r22, r22
   1a2de:	77 0b       	sbc	r23, r23
   1a2e0:	84 0f       	add	r24, r20
   1a2e2:	95 1f       	adc	r25, r21
   1a2e4:	a6 1f       	adc	r26, r22
   1a2e6:	b7 1f       	adc	r27, r23
   1a2e8:	dd cf       	rjmp	.-70     	; 0x1a2a4 <localtime_r+0x5c>

0001a2ea <gmtime_r>:
gmtime_r():
   1a2ea:	cf 92       	push	r12
   1a2ec:	df 92       	push	r13
   1a2ee:	ef 92       	push	r14
   1a2f0:	ff 92       	push	r15
   1a2f2:	0f 93       	push	r16
   1a2f4:	1f 93       	push	r17
   1a2f6:	cf 93       	push	r28
   1a2f8:	df 93       	push	r29
   1a2fa:	00 d0       	rcall	.+0      	; 0x1a2fc <gmtime_r+0x12>
   1a2fc:	00 d0       	rcall	.+0      	; 0x1a2fe <gmtime_r+0x14>
   1a2fe:	1f 92       	push	r1
   1a300:	1f 92       	push	r1
   1a302:	cd b7       	in	r28, 0x3d	; 61
   1a304:	de b7       	in	r29, 0x3e	; 62
   1a306:	8b 01       	movw	r16, r22
   1a308:	fc 01       	movw	r30, r24
   1a30a:	60 81       	ld	r22, Z
   1a30c:	71 81       	ldd	r23, Z+1	; 0x01
   1a30e:	82 81       	ldd	r24, Z+2	; 0x02
   1a310:	93 81       	ldd	r25, Z+3	; 0x03
   1a312:	20 e8       	ldi	r18, 0x80	; 128
   1a314:	31 e5       	ldi	r19, 0x51	; 81
   1a316:	41 e0       	ldi	r20, 0x01	; 1
   1a318:	50 e0       	ldi	r21, 0x00	; 0
   1a31a:	0e 94 65 ef 	call	0x1deca	; 0x1deca <__udivmodsi4>
   1a31e:	69 01       	movw	r12, r18
   1a320:	7a 01       	movw	r14, r20
   1a322:	2c e3       	ldi	r18, 0x3C	; 60
   1a324:	30 e0       	ldi	r19, 0x00	; 0
   1a326:	40 e0       	ldi	r20, 0x00	; 0
   1a328:	50 e0       	ldi	r21, 0x00	; 0
   1a32a:	0e 94 87 ef 	call	0x1df0e	; 0x1df0e <__divmodsi4>
   1a32e:	29 83       	std	Y+1, r18	; 0x01
   1a330:	3a 83       	std	Y+2, r19	; 0x02
   1a332:	4b 83       	std	Y+3, r20	; 0x03
   1a334:	5c 83       	std	Y+4, r21	; 0x04
   1a336:	89 81       	ldd	r24, Y+1	; 0x01
   1a338:	9a 81       	ldd	r25, Y+2	; 0x02
   1a33a:	ab 81       	ldd	r26, Y+3	; 0x03
   1a33c:	bc 81       	ldd	r27, Y+4	; 0x04
   1a33e:	f8 01       	movw	r30, r16
   1a340:	60 83       	st	Z, r22
   1a342:	6c e3       	ldi	r22, 0x3C	; 60
   1a344:	70 e0       	ldi	r23, 0x00	; 0
   1a346:	0e 94 51 ef 	call	0x1dea2	; 0x1dea2 <__divmodhi4>
   1a34a:	dc 01       	movw	r26, r24
   1a34c:	f8 01       	movw	r30, r16
   1a34e:	a1 83       	std	Z+1, r26	; 0x01
   1a350:	62 83       	std	Z+2, r22	; 0x02
   1a352:	c6 01       	movw	r24, r12
   1a354:	06 96       	adiw	r24, 0x06	; 6
   1a356:	67 e0       	ldi	r22, 0x07	; 7
   1a358:	70 e0       	ldi	r23, 0x00	; 0
   1a35a:	0e 94 3d ef 	call	0x1de7a	; 0x1de7a <__udivmodhi4>
   1a35e:	84 83       	std	Z+4, r24	; 0x04
   1a360:	2d ea       	ldi	r18, 0xAD	; 173
   1a362:	3e e8       	ldi	r19, 0x8E	; 142
   1a364:	40 e0       	ldi	r20, 0x00	; 0
   1a366:	50 e0       	ldi	r21, 0x00	; 0
   1a368:	c7 01       	movw	r24, r14
   1a36a:	b6 01       	movw	r22, r12
   1a36c:	0e 94 87 ef 	call	0x1df0e	; 0x1df0e <__divmodsi4>
   1a370:	29 83       	std	Y+1, r18	; 0x01
   1a372:	3a 83       	std	Y+2, r19	; 0x02
   1a374:	6d 83       	std	Y+5, r22	; 0x05
   1a376:	7e 83       	std	Y+6, r23	; 0x06
   1a378:	8f 83       	std	Y+7, r24	; 0x07
   1a37a:	98 87       	std	Y+8, r25	; 0x08
   1a37c:	89 81       	ldd	r24, Y+1	; 0x01
   1a37e:	9a 81       	ldd	r25, Y+2	; 0x02
   1a380:	24 e6       	ldi	r18, 0x64	; 100
   1a382:	28 9f       	mul	r18, r24
   1a384:	60 01       	movw	r12, r0
   1a386:	29 9f       	mul	r18, r25
   1a388:	d0 0c       	add	r13, r0
   1a38a:	11 24       	eor	r1, r1
   1a38c:	6d 81       	ldd	r22, Y+5	; 0x05
   1a38e:	7e 81       	ldd	r23, Y+6	; 0x06
   1a390:	8f 81       	ldd	r24, Y+7	; 0x07
   1a392:	98 85       	ldd	r25, Y+8	; 0x08
   1a394:	25 eb       	ldi	r18, 0xB5	; 181
   1a396:	35 e0       	ldi	r19, 0x05	; 5
   1a398:	40 e0       	ldi	r20, 0x00	; 0
   1a39a:	50 e0       	ldi	r21, 0x00	; 0
   1a39c:	0e 94 87 ef 	call	0x1df0e	; 0x1df0e <__divmodsi4>
   1a3a0:	29 83       	std	Y+1, r18	; 0x01
   1a3a2:	3a 83       	std	Y+2, r19	; 0x02
   1a3a4:	6d 83       	std	Y+5, r22	; 0x05
   1a3a6:	7e 83       	std	Y+6, r23	; 0x06
   1a3a8:	e9 80       	ldd	r14, Y+1	; 0x01
   1a3aa:	fa 80       	ldd	r15, Y+2	; 0x02
   1a3ac:	ee 0c       	add	r14, r14
   1a3ae:	ff 1c       	adc	r15, r15
   1a3b0:	ee 0c       	add	r14, r14
   1a3b2:	ff 1c       	adc	r15, r15
   1a3b4:	ec 0c       	add	r14, r12
   1a3b6:	fd 1c       	adc	r15, r13
   1a3b8:	8d 81       	ldd	r24, Y+5	; 0x05
   1a3ba:	9e 81       	ldd	r25, Y+6	; 0x06
   1a3bc:	f5 e6       	ldi	r31, 0x65	; 101
   1a3be:	ef 16       	cp	r14, r31
   1a3c0:	f1 04       	cpc	r15, r1
   1a3c2:	08 f4       	brcc	.+2      	; 0x1a3c6 <gmtime_r+0xdc>
   1a3c4:	3f c0       	rjmp	.+126    	; 0x1a444 <gmtime_r+0x15a>
   1a3c6:	01 96       	adiw	r24, 0x01	; 1
   1a3c8:	21 e0       	ldi	r18, 0x01	; 1
   1a3ca:	30 e0       	ldi	r19, 0x00	; 0
   1a3cc:	a9 01       	movw	r20, r18
   1a3ce:	44 59       	subi	r20, 0x94	; 148
   1a3d0:	5e 4f       	sbci	r21, 0xFE	; 254
   1a3d2:	48 17       	cp	r20, r24
   1a3d4:	59 07       	cpc	r21, r25
   1a3d6:	60 f4       	brcc	.+24     	; 0x1a3f0 <gmtime_r+0x106>
   1a3d8:	6d e6       	ldi	r22, 0x6D	; 109
   1a3da:	71 e0       	ldi	r23, 0x01	; 1
   1a3dc:	82 1b       	sub	r24, r18
   1a3de:	93 0b       	sbc	r25, r19
   1a3e0:	0e 94 51 ef 	call	0x1dea2	; 0x1dea2 <__divmodhi4>
   1a3e4:	dc 01       	movw	r26, r24
   1a3e6:	e6 0e       	add	r14, r22
   1a3e8:	f7 1e       	adc	r15, r23
   1a3ea:	cd 01       	movw	r24, r26
   1a3ec:	30 e0       	ldi	r19, 0x00	; 0
   1a3ee:	20 e0       	ldi	r18, 0x00	; 0
   1a3f0:	44 e6       	ldi	r20, 0x64	; 100
   1a3f2:	e4 0e       	add	r14, r20
   1a3f4:	f1 1c       	adc	r15, r1
   1a3f6:	f8 01       	movw	r30, r16
   1a3f8:	f7 82       	std	Z+7, r15	; 0x07
   1a3fa:	e6 82       	std	Z+6, r14	; 0x06
   1a3fc:	91 87       	std	Z+9, r25	; 0x09
   1a3fe:	80 87       	std	Z+8, r24	; 0x08
   1a400:	25 5c       	subi	r18, 0xC5	; 197
   1a402:	3f 4f       	sbci	r19, 0xFF	; 255
   1a404:	82 17       	cp	r24, r18
   1a406:	93 07       	cpc	r25, r19
   1a408:	38 f5       	brcc	.+78     	; 0x1a458 <gmtime_r+0x16e>
   1a40a:	6f e1       	ldi	r22, 0x1F	; 31
   1a40c:	70 e0       	ldi	r23, 0x00	; 0
   1a40e:	0e 94 51 ef 	call	0x1dea2	; 0x1dea2 <__divmodhi4>
   1a412:	dc 01       	movw	r26, r24
   1a414:	f8 01       	movw	r30, r16
   1a416:	65 83       	std	Z+5, r22	; 0x05
   1a418:	a3 83       	std	Z+3, r26	; 0x03
   1a41a:	f8 01       	movw	r30, r16
   1a41c:	13 86       	std	Z+11, r1	; 0x0b
   1a41e:	12 86       	std	Z+10, r1	; 0x0a
   1a420:	83 81       	ldd	r24, Z+3	; 0x03
   1a422:	8f 5f       	subi	r24, 0xFF	; 255
   1a424:	83 83       	std	Z+3, r24	; 0x03
   1a426:	28 96       	adiw	r28, 0x08	; 8
   1a428:	0f b6       	in	r0, 0x3f	; 63
   1a42a:	f8 94       	cli
   1a42c:	de bf       	out	0x3e, r29	; 62
   1a42e:	0f be       	out	0x3f, r0	; 63
   1a430:	cd bf       	out	0x3d, r28	; 61
   1a432:	df 91       	pop	r29
   1a434:	cf 91       	pop	r28
   1a436:	1f 91       	pop	r17
   1a438:	0f 91       	pop	r16
   1a43a:	ff 90       	pop	r15
   1a43c:	ef 90       	pop	r14
   1a43e:	df 90       	pop	r13
   1a440:	cf 90       	pop	r12
   1a442:	08 95       	ret
   1a444:	51 e0       	ldi	r21, 0x01	; 1
   1a446:	40 e0       	ldi	r20, 0x00	; 0
   1a448:	24 e6       	ldi	r18, 0x64	; 100
   1a44a:	e2 16       	cp	r14, r18
   1a44c:	f1 04       	cpc	r15, r1
   1a44e:	09 f4       	brne	.+2      	; 0x1a452 <gmtime_r+0x168>
   1a450:	50 e0       	ldi	r21, 0x00	; 0
   1a452:	25 2f       	mov	r18, r21
   1a454:	34 2f       	mov	r19, r20
   1a456:	ba cf       	rjmp	.-140    	; 0x1a3cc <gmtime_r+0xe2>
   1a458:	69 e9       	ldi	r22, 0x99	; 153
   1a45a:	70 e0       	ldi	r23, 0x00	; 0
   1a45c:	82 1b       	sub	r24, r18
   1a45e:	93 0b       	sbc	r25, r19
   1a460:	0e 94 51 ef 	call	0x1dea2	; 0x1dea2 <__divmodhi4>
   1a464:	dc 01       	movw	r26, r24
   1a466:	26 2f       	mov	r18, r22
   1a468:	22 0f       	add	r18, r18
   1a46a:	22 0f       	add	r18, r18
   1a46c:	f2 2e       	mov	r15, r18
   1a46e:	f6 0e       	add	r15, r22
   1a470:	6d e3       	ldi	r22, 0x3D	; 61
   1a472:	70 e0       	ldi	r23, 0x00	; 0
   1a474:	cd 01       	movw	r24, r26
   1a476:	0e 94 51 ef 	call	0x1dea2	; 0x1dea2 <__divmodhi4>
   1a47a:	dc 01       	movw	r26, r24
   1a47c:	e6 2e       	mov	r14, r22
   1a47e:	ee 0c       	add	r14, r14
   1a480:	6f e1       	ldi	r22, 0x1F	; 31
   1a482:	70 e0       	ldi	r23, 0x00	; 0
   1a484:	cd 01       	movw	r24, r26
   1a486:	0e 94 51 ef 	call	0x1dea2	; 0x1dea2 <__divmodhi4>
   1a48a:	dc 01       	movw	r26, r24
   1a48c:	22 e0       	ldi	r18, 0x02	; 2
   1a48e:	26 0f       	add	r18, r22
   1a490:	2f 0d       	add	r18, r15
   1a492:	2e 0d       	add	r18, r14
   1a494:	f8 01       	movw	r30, r16
   1a496:	25 83       	std	Z+5, r18	; 0x05
   1a498:	bf cf       	rjmp	.-130    	; 0x1a418 <gmtime_r+0x12e>

0001a49a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
   1a49a:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
   1a49c:	80 81       	ld	r24, Z
   1a49e:	91 81       	ldd	r25, Z+1	; 0x01
   1a4a0:	87 30       	cpi	r24, 0x07	; 7
   1a4a2:	91 05       	cpc	r25, r1
   1a4a4:	38 f4       	brcc	.+14     	; 0x1a4b4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
   1a4a6:	85 30       	cpi	r24, 0x05	; 5
   1a4a8:	91 05       	cpc	r25, r1
   1a4aa:	88 f4       	brcc	.+34     	; 0x1a4ce <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
   1a4ac:	03 97       	sbiw	r24, 0x03	; 3
   1a4ae:	a0 f4       	brcc	.+40     	; 0x1a4d8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   1a4b0:	80 e0       	ldi	r24, 0x00	; 0
   1a4b2:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   1a4b4:	87 30       	cpi	r24, 0x07	; 7
   1a4b6:	91 05       	cpc	r25, r1
   1a4b8:	61 f0       	breq	.+24     	; 0x1a4d2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
   1a4ba:	0a 97       	sbiw	r24, 0x0a	; 10
   1a4bc:	c9 f7       	brne	.-14     	; 0x1a4b0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   1a4be:	62 81       	ldd	r22, Z+2	; 0x02
   1a4c0:	73 81       	ldd	r23, Z+3	; 0x03
   1a4c2:	84 81       	ldd	r24, Z+4	; 0x04
   1a4c4:	95 81       	ldd	r25, Z+5	; 0x05
   1a4c6:	0e 94 a6 f0 	call	0x1e14c	; 0x1e14c <__fixunssfsi>
   1a4ca:	86 2f       	mov	r24, r22
   1a4cc:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   1a4ce:	82 81       	ldd	r24, Z+2	; 0x02
   1a4d0:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   1a4d2:	82 81       	ldd	r24, Z+2	; 0x02
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   1a4d4:	81 95       	neg	r24
   1a4d6:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   1a4d8:	02 80       	ldd	r0, Z+2	; 0x02
   1a4da:	f3 81       	ldd	r31, Z+3	; 0x03
   1a4dc:	e0 2d       	mov	r30, r0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   1a4de:	30 97       	sbiw	r30, 0x00	; 0
   1a4e0:	39 f3       	breq	.-50     	; 0x1a4b0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   1a4e2:	80 81       	ld	r24, Z
   1a4e4:	84 37       	cpi	r24, 0x74	; 116
   1a4e6:	c9 f0       	breq	.+50     	; 0x1a51a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   1a4e8:	8b 32       	cpi	r24, 0x2B	; 43
   1a4ea:	89 f0       	breq	.+34     	; 0x1a50e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
   1a4ec:	8d 32       	cpi	r24, 0x2D	; 45
   1a4ee:	81 f4       	brne	.+32     	; 0x1a510 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   1a4f0:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   1a4f2:	91 e0       	ldi	r25, 0x01	; 1
parseInteger():
   1a4f4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   1a4f6:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   1a4f8:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   1a4fa:	30 ed       	ldi	r19, 0xD0	; 208
   1a4fc:	36 0f       	add	r19, r22
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   1a4fe:	3a 30       	cpi	r19, 0x0A	; 10
   1a500:	48 f4       	brcc	.+18     	; 0x1a514 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
   1a502:	82 9f       	mul	r24, r18
   1a504:	60 0d       	add	r22, r0
   1a506:	11 24       	eor	r1, r1
   1a508:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   1a50a:	80 53       	subi	r24, 0x30	; 48
   1a50c:	f5 cf       	rjmp	.-22     	; 0x1a4f8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   1a50e:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   1a510:	90 e0       	ldi	r25, 0x00	; 0
   1a512:	f0 cf       	rjmp	.-32     	; 0x1a4f4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   1a514:	91 11       	cpse	r25, r1
   1a516:	de cf       	rjmp	.-68     	; 0x1a4d4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
   1a518:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   1a51a:	81 e0       	ldi	r24, 0x01	; 1
   1a51c:	fd cf       	rjmp	.-6      	; 0x1a518 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

0001a51e <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
   1a51e:	cf 93       	push	r28
   1a520:	df 93       	push	r29
   1a522:	cd b7       	in	r28, 0x3d	; 61
   1a524:	de b7       	in	r29, 0x3e	; 62
   1a526:	cc 5b       	subi	r28, 0xBC	; 188
   1a528:	d1 09       	sbc	r29, r1
   1a52a:	0f b6       	in	r0, 0x3f	; 63
   1a52c:	f8 94       	cli
   1a52e:	de bf       	out	0x3e, r29	; 62
   1a530:	0f be       	out	0x3f, r0	; 63
   1a532:	cd bf       	out	0x3d, r28	; 61
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   1a534:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   1a536:	84 b5       	in	r24, 0x24	; 36
   1a538:	83 60       	ori	r24, 0x03	; 3
   1a53a:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   1a53c:	85 b5       	in	r24, 0x25	; 37
   1a53e:	83 60       	ori	r24, 0x03	; 3
   1a540:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   1a542:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   1a546:	81 60       	ori	r24, 0x01	; 1
   1a548:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   1a54c:	82 e0       	ldi	r24, 0x02	; 2
   1a54e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   1a552:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   1a556:	81 60       	ori	r24, 0x01	; 1
   1a558:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   1a55c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1a560:	81 60       	ori	r24, 0x01	; 1
   1a562:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   1a566:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   1a56a:	84 60       	ori	r24, 0x04	; 4
   1a56c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   1a570:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1a574:	81 60       	ori	r24, 0x01	; 1
   1a576:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   1a57a:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   1a57e:	83 60       	ori	r24, 0x03	; 3
   1a580:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   1a584:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1a588:	81 60       	ori	r24, 0x01	; 1
   1a58a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   1a58e:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   1a592:	83 60       	ori	r24, 0x03	; 3
   1a594:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   1a598:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1a59c:	81 60       	ori	r24, 0x01	; 1
   1a59e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   1a5a2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   1a5a6:	83 60       	ori	r24, 0x03	; 3
   1a5a8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   1a5ac:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1a5b0:	81 60       	ori	r24, 0x01	; 1
   1a5b2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   1a5b6:	87 e8       	ldi	r24, 0x87	; 135
   1a5b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   1a5bc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   1a5c0:	0e 94 23 9c 	call	0x13846	; 0x13846 <setup>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2929
        avg = avg / MAX_AVG_TEMP;
        avg = avg / 10;
        itoa(avg, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);

        strcpy(payload, tds.name);
   1a5c4:	21 e4       	ldi	r18, 0x41	; 65
   1a5c6:	30 e0       	ldi	r19, 0x00	; 0
   1a5c8:	2c 0f       	add	r18, r28
   1a5ca:	3d 1f       	adc	r19, r29
   1a5cc:	24 5f       	subi	r18, 0xF4	; 244
   1a5ce:	3f 4f       	sbci	r19, 0xFF	; 255
   1a5d0:	c5 54       	subi	r28, 0x45	; 69
   1a5d2:	df 4f       	sbci	r29, 0xFF	; 255
   1a5d4:	39 83       	std	Y+1, r19	; 0x01
   1a5d6:	28 83       	st	Y, r18
   1a5d8:	cb 5b       	subi	r28, 0xBB	; 187
   1a5da:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3901
  long mil;
  uint16_t click_x, click_y;



  load_now = millis();
   1a5dc:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   1a5e0:	cb 54       	subi	r28, 0x4B	; 75
   1a5e2:	df 4f       	sbci	r29, 0xFF	; 255
   1a5e4:	68 83       	st	Y, r22
   1a5e6:	79 83       	std	Y+1, r23	; 0x01
   1a5e8:	8a 83       	std	Y+2, r24	; 0x02
   1a5ea:	9b 83       	std	Y+3, r25	; 0x03
   1a5ec:	c5 5b       	subi	r28, 0xB5	; 181
   1a5ee:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3902
  if (mqtt_reconnect() == 0)
   1a5f0:	0e 94 c6 96 	call	0x12d8c	; 0x12d8c <mqtt_reconnect()>
   1a5f4:	81 11       	cpse	r24, r1
   1a5f6:	8a c0       	rjmp	.+276    	; 0x1a70c <main+0x1ee>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3141
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   1a5f8:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
   1a5fc:	8f 7d       	andi	r24, 0xDF	; 223
   1a5fe:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3907
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
   1a602:	0e 94 4f c7 	call	0x18e9e	; 0x18e9e <PubSubClient::loop() [clone .constprop.95]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3910


  if (ethClient1.connected())
   1a606:	87 e6       	ldi	r24, 0x67	; 103
   1a608:	92 e1       	ldi	r25, 0x12	; 18
   1a60a:	0e 94 40 79 	call	0xf280	; 0xf280 <EthernetClient::connected()>
   1a60e:	88 23       	and	r24, r24
   1a610:	21 f0       	breq	.+8      	; 0x1a61a <main+0xfc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3911
    ethClient1.stop();
   1a612:	87 e6       	ldi	r24, 0x67	; 103
   1a614:	92 e1       	ldi	r25, 0x12	; 18
   1a616:	0e 94 63 79 	call	0xf2c6	; 0xf2c6 <EthernetClient::stop()>
available():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:53
  }
}

EthernetClient EthernetServer::available()
{
  accept();
   1a61a:	89 e2       	ldi	r24, 0x29	; 41
   1a61c:	90 e1       	ldi	r25, 0x10	; 16
   1a61e:	0e 94 a5 79 	call	0xf34a	; 0xf34a <EthernetServer::accept()>
   1a622:	1a e6       	ldi	r17, 0x6A	; 106
   1a624:	a1 2e       	mov	r10, r17
   1a626:	1b e0       	ldi	r17, 0x0B	; 11
   1a628:	b1 2e       	mov	r11, r17
   1a62a:	10 e0       	ldi	r17, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1a62c:	08 ee       	ldi	r16, 0xE8	; 232
   1a62e:	40 2e       	mov	r4, r16
   1a630:	03 e0       	ldi	r16, 0x03	; 3
   1a632:	50 2e       	mov	r5, r16
   1a634:	61 2c       	mov	r6, r1
   1a636:	71 2c       	mov	r7, r1
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
   1a638:	80 ed       	ldi	r24, 0xD0	; 208
   1a63a:	88 2e       	mov	r8, r24
   1a63c:	82 e0       	ldi	r24, 0x02	; 2
   1a63e:	98 2e       	mov	r9, r24
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   1a640:	1c 82       	std	Y+4, r1	; 0x04
   1a642:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1a644:	4d 82       	std	Y+5, r4	; 0x05
   1a646:	5e 82       	std	Y+6, r5	; 0x06
   1a648:	6f 82       	std	Y+7, r6	; 0x07
   1a64a:	78 86       	std	Y+8, r7	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   1a64c:	9a 82       	std	Y+2, r9	; 0x02
   1a64e:	89 82       	std	Y+1, r8	; 0x01
   1a650:	1d 87       	std	Y+13, r17	; 0x0d
available():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:57

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
   1a652:	f5 01       	movw	r30, r10
   1a654:	21 91       	ld	r18, Z+
   1a656:	31 91       	ld	r19, Z+
   1a658:	5f 01       	movw	r10, r30
   1a65a:	80 91 2d 10 	lds	r24, 0x102D	; 0x80102d <http_server+0x4>
   1a65e:	90 91 2e 10 	lds	r25, 0x102E	; 0x80102e <http_server+0x5>
   1a662:	28 17       	cp	r18, r24
   1a664:	39 07       	cpc	r19, r25
   1a666:	09 f0       	breq	.+2      	; 0x1a66a <main+0x14c>
   1a668:	5c c0       	rjmp	.+184    	; 0x1a722 <main+0x204>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:58
        (client.status() == SnSR::ESTABLISHED ||
   1a66a:	ce 01       	movw	r24, r28
   1a66c:	01 96       	adiw	r24, 0x01	; 1
   1a66e:	0e 94 36 79 	call	0xf26c	; 0xf26c <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:57
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
   1a672:	87 31       	cpi	r24, 0x17	; 23
   1a674:	09 f0       	breq	.+2      	; 0x1a678 <main+0x15a>
   1a676:	4e c0       	rjmp	.+156    	; 0x1a714 <main+0x1f6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:60
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
      if (client.available()) {
   1a678:	ce 01       	movw	r24, r28
   1a67a:	01 96       	adiw	r24, 0x01	; 1
   1a67c:	0e 94 2f 4d 	call	0x9a5e	; 0x9a5e <EthernetClient::available()>
   1a680:	89 2b       	or	r24, r25
   1a682:	09 f4       	brne	.+2      	; 0x1a686 <main+0x168>
   1a684:	4e c0       	rjmp	.+156    	; 0x1a722 <main+0x204>
_ZN5PrintC2EOS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:37
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
   1a686:	8b 81       	ldd	r24, Y+3	; 0x03
   1a688:	9c 81       	ldd	r25, Y+4	; 0x04
   1a68a:	c7 56       	subi	r28, 0x67	; 103
   1a68c:	df 4f       	sbci	r29, 0xFF	; 255
   1a68e:	99 83       	std	Y+1, r25	; 0x01
   1a690:	88 83       	st	Y, r24
   1a692:	c9 59       	subi	r28, 0x99	; 153
   1a694:	d0 40       	sbci	r29, 0x00	; 0
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:49
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
   1a696:	8d 81       	ldd	r24, Y+5	; 0x05
   1a698:	9e 81       	ldd	r25, Y+6	; 0x06
   1a69a:	af 81       	ldd	r26, Y+7	; 0x07
   1a69c:	b8 85       	ldd	r27, Y+8	; 0x08
   1a69e:	c5 56       	subi	r28, 0x65	; 101
   1a6a0:	df 4f       	sbci	r29, 0xFF	; 255
   1a6a2:	88 83       	st	Y, r24
   1a6a4:	99 83       	std	Y+1, r25	; 0x01
   1a6a6:	aa 83       	std	Y+2, r26	; 0x02
   1a6a8:	bb 83       	std	Y+3, r27	; 0x03
   1a6aa:	cb 59       	subi	r28, 0x9B	; 155
   1a6ac:	d0 40       	sbci	r29, 0x00	; 0
   1a6ae:	89 85       	ldd	r24, Y+9	; 0x09
   1a6b0:	9a 85       	ldd	r25, Y+10	; 0x0a
   1a6b2:	ab 85       	ldd	r26, Y+11	; 0x0b
   1a6b4:	bc 85       	ldd	r27, Y+12	; 0x0c
   1a6b6:	c1 56       	subi	r28, 0x61	; 97
   1a6b8:	df 4f       	sbci	r29, 0xFF	; 255
   1a6ba:	88 83       	st	Y, r24
   1a6bc:	99 83       	std	Y+1, r25	; 0x01
   1a6be:	aa 83       	std	Y+2, r26	; 0x02
   1a6c0:	bb 83       	std	Y+3, r27	; 0x03
   1a6c2:	cf 59       	subi	r28, 0x9F	; 159
   1a6c4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:8
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
   1a6c6:	80 ed       	ldi	r24, 0xD0	; 208
   1a6c8:	92 e0       	ldi	r25, 0x02	; 2
   1a6ca:	c9 56       	subi	r28, 0x69	; 105
   1a6cc:	df 4f       	sbci	r29, 0xFF	; 255
   1a6ce:	99 83       	std	Y+1, r25	; 0x01
   1a6d0:	88 83       	st	Y, r24
   1a6d2:	c7 59       	subi	r28, 0x97	; 151
   1a6d4:	d0 40       	sbci	r29, 0x00	; 0
   1a6d6:	8d 85       	ldd	r24, Y+13	; 0x0d
   1a6d8:	cd 55       	subi	r28, 0x5D	; 93
   1a6da:	df 4f       	sbci	r29, 0xFF	; 255
   1a6dc:	88 83       	st	Y, r24
   1a6de:	c3 5a       	subi	r28, 0xA3	; 163
   1a6e0:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3915


  EthernetClient http_client = http_server.available();
  if (http_client.connected())
   1a6e2:	ce 01       	movw	r24, r28
   1a6e4:	89 56       	subi	r24, 0x69	; 105
   1a6e6:	9f 4f       	sbci	r25, 0xFF	; 255
   1a6e8:	0e 94 40 79 	call	0xf280	; 0xf280 <EthernetClient::connected()>
   1a6ec:	88 23       	and	r24, r24
   1a6ee:	09 f4       	brne	.+2      	; 0x1a6f2 <main+0x1d4>
   1a6f0:	45 c0       	rjmp	.+138    	; 0x1a77c <main+0x25e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3917
  {
    while (http_client.available())
   1a6f2:	ce 01       	movw	r24, r28
   1a6f4:	89 56       	subi	r24, 0x69	; 105
   1a6f6:	9f 4f       	sbci	r25, 0xFF	; 255
   1a6f8:	0e 94 2f 4d 	call	0x9a5e	; 0x9a5e <EthernetClient::available()>
   1a6fc:	89 2b       	or	r24, r25
   1a6fe:	a9 f1       	breq	.+106    	; 0x1a76a <main+0x24c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3918
      http_client.read();
   1a700:	ce 01       	movw	r24, r28
   1a702:	89 56       	subi	r24, 0x69	; 105
   1a704:	9f 4f       	sbci	r25, 0xFF	; 255
   1a706:	0e 94 f9 7a 	call	0xf5f2	; 0xf5f2 <EthernetClient::read()>
   1a70a:	f3 cf       	rjmp	.-26     	; 0x1a6f2 <main+0x1d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3905

  load_now = millis();
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);
   1a70c:	85 e0       	ldi	r24, 0x05	; 5
   1a70e:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <selftest_set_0(unsigned char)>
   1a712:	77 cf       	rjmp	.-274    	; 0x1a602 <main+0xe4>
available():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:59

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
   1a714:	ce 01       	movw	r24, r28
   1a716:	01 96       	adiw	r24, 0x01	; 1
   1a718:	0e 94 36 79 	call	0xf26c	; 0xf26c <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:58
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
   1a71c:	8c 31       	cpi	r24, 0x1C	; 28
   1a71e:	09 f4       	brne	.+2      	; 0x1a722 <main+0x204>
   1a720:	ab cf       	rjmp	.-170    	; 0x1a678 <main+0x15a>
   1a722:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:55

EthernetClient EthernetServer::available()
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   1a724:	18 30       	cpi	r17, 0x08	; 8
   1a726:	09 f0       	breq	.+2      	; 0x1a72a <main+0x20c>
   1a728:	8b cf       	rjmp	.-234    	; 0x1a640 <main+0x122>
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   1a72a:	c7 56       	subi	r28, 0x67	; 103
   1a72c:	df 4f       	sbci	r29, 0xFF	; 255
   1a72e:	19 82       	std	Y+1, r1	; 0x01
   1a730:	18 82       	st	Y, r1
   1a732:	c9 59       	subi	r28, 0x99	; 153
   1a734:	d0 40       	sbci	r29, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   1a736:	88 ee       	ldi	r24, 0xE8	; 232
   1a738:	93 e0       	ldi	r25, 0x03	; 3
   1a73a:	a0 e0       	ldi	r26, 0x00	; 0
   1a73c:	b0 e0       	ldi	r27, 0x00	; 0
   1a73e:	c5 56       	subi	r28, 0x65	; 101
   1a740:	df 4f       	sbci	r29, 0xFF	; 255
   1a742:	88 83       	st	Y, r24
   1a744:	99 83       	std	Y+1, r25	; 0x01
   1a746:	aa 83       	std	Y+2, r26	; 0x02
   1a748:	bb 83       	std	Y+3, r27	; 0x03
   1a74a:	cb 59       	subi	r28, 0x9B	; 155
   1a74c:	d0 40       	sbci	r29, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   1a74e:	80 ed       	ldi	r24, 0xD0	; 208
   1a750:	92 e0       	ldi	r25, 0x02	; 2
   1a752:	c9 56       	subi	r28, 0x69	; 105
   1a754:	df 4f       	sbci	r29, 0xFF	; 255
   1a756:	99 83       	std	Y+1, r25	; 0x01
   1a758:	88 83       	st	Y, r24
   1a75a:	c7 59       	subi	r28, 0x97	; 151
   1a75c:	d0 40       	sbci	r29, 0x00	; 0
   1a75e:	cd 55       	subi	r28, 0x5D	; 93
   1a760:	df 4f       	sbci	r29, 0xFF	; 255
   1a762:	18 83       	st	Y, r17
   1a764:	c3 5a       	subi	r28, 0xA3	; 163
   1a766:	d0 40       	sbci	r29, 0x00	; 0
   1a768:	bc cf       	rjmp	.-136    	; 0x1a6e2 <main+0x1c4>
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   1a76a:	44 e0       	ldi	r20, 0x04	; 4
   1a76c:	50 e0       	ldi	r21, 0x00	; 0
   1a76e:	66 e4       	ldi	r22, 0x46	; 70
   1a770:	77 e0       	ldi	r23, 0x07	; 7
   1a772:	ce 01       	movw	r24, r28
   1a774:	89 56       	subi	r24, 0x69	; 105
   1a776:	9f 4f       	sbci	r25, 0xFF	; 255
   1a778:	0e 94 7d 7f 	call	0xfefa	; 0xfefa <EthernetClient::write(unsigned char const*, unsigned int)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3927





  if (scan_rf_net_enable == 2)
   1a77c:	80 91 af 0c 	lds	r24, 0x0CAF	; 0x800caf <scan_rf_net_enable>
   1a780:	82 30       	cpi	r24, 0x02	; 2
   1a782:	09 f0       	breq	.+2      	; 0x1a786 <main+0x268>
   1a784:	da c0       	rjmp	.+436    	; 0x1a93a <main+0x41c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3929
  {
    scan_rf_net_enable = 0;
   1a786:	10 92 af 0c 	sts	0x0CAF, r1	; 0x800caf <scan_rf_net_enable>
get_status():
/home/saric/Arduino/libraries/RF24/RF24.cpp:365

/****************************************************************************/

uint8_t RF24::get_status(void)
{
  return spiTrans(RF24_NOP);
   1a78a:	8f ef       	ldi	r24, 0xFF	; 255
   1a78c:	0e 94 40 c7 	call	0x18e80	; 0x18e80 <RF24::spiTrans(unsigned char) [clone .constprop.105]>
print_status():
/home/saric/Arduino/libraries/RF24/RF24.cpp:372

/****************************************************************************/
#if !defined (MINIMAL)
void RF24::print_status(uint8_t status)
{
  printf_P(PSTR("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n"),
   1a790:	28 2f       	mov	r18, r24
   1a792:	30 e0       	ldi	r19, 0x00	; 0
   1a794:	98 2f       	mov	r25, r24
   1a796:	91 70       	andi	r25, 0x01	; 1
   1a798:	1f 92       	push	r1
   1a79a:	9f 93       	push	r25
/home/saric/Arduino/libraries/RF24/RF24.cpp:377
           status,
           (status & _BV(RX_DR))?1:0,
           (status & _BV(TX_DS))?1:0,
           (status & _BV(MAX_RT))?1:0,
           ((status >> RX_P_NO) & 0x07),
   1a79c:	a9 01       	movw	r20, r18
   1a79e:	55 95       	asr	r21
   1a7a0:	47 95       	ror	r20
/home/saric/Arduino/libraries/RF24/RF24.cpp:372

/****************************************************************************/
#if !defined (MINIMAL)
void RF24::print_status(uint8_t status)
{
  printf_P(PSTR("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n"),
   1a7a2:	47 70       	andi	r20, 0x07	; 7
   1a7a4:	55 27       	eor	r21, r21
   1a7a6:	5f 93       	push	r21
   1a7a8:	4f 93       	push	r20
   1a7aa:	84 fb       	bst	r24, 4
   1a7ac:	99 27       	eor	r25, r25
   1a7ae:	90 f9       	bld	r25, 0
   1a7b0:	1f 92       	push	r1
   1a7b2:	9f 93       	push	r25
   1a7b4:	85 fb       	bst	r24, 5
   1a7b6:	99 27       	eor	r25, r25
   1a7b8:	90 f9       	bld	r25, 0
   1a7ba:	1f 92       	push	r1
   1a7bc:	9f 93       	push	r25
   1a7be:	86 fb       	bst	r24, 6
   1a7c0:	22 27       	eor	r18, r18
   1a7c2:	20 f9       	bld	r18, 0
   1a7c4:	1f 92       	push	r1
   1a7c6:	2f 93       	push	r18
   1a7c8:	1f 92       	push	r1
   1a7ca:	8f 93       	push	r24
   1a7cc:	82 e5       	ldi	r24, 0x52	; 82
   1a7ce:	94 e7       	ldi	r25, 0x74	; 116
   1a7d0:	9f 93       	push	r25
   1a7d2:	8f 93       	push	r24
   1a7d4:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <printf_P>
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:567
 
#endif //Linux

  print_status(get_status());

  print_address_register(PSTR("RX_ADDR_P0-1"),RX_ADDR_P0,2);
   1a7d8:	42 e0       	ldi	r20, 0x02	; 2
   1a7da:	6a e0       	ldi	r22, 0x0A	; 10
   1a7dc:	8d e4       	ldi	r24, 0x4D	; 77
   1a7de:	95 e7       	ldi	r25, 0x75	; 117
   1a7e0:	0e 94 fe ce 	call	0x19dfc	; 0x19dfc <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:568
  print_byte_register(PSTR("RX_ADDR_P2-5"),RX_ADDR_P2,4);
   1a7e4:	44 e0       	ldi	r20, 0x04	; 4
   1a7e6:	6c e0       	ldi	r22, 0x0C	; 12
   1a7e8:	80 e4       	ldi	r24, 0x40	; 64
   1a7ea:	95 e7       	ldi	r25, 0x75	; 117
   1a7ec:	0e 94 c6 ce 	call	0x19d8c	; 0x19d8c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:569
  print_address_register(PSTR("TX_ADDR\t"),TX_ADDR);
   1a7f0:	41 e0       	ldi	r20, 0x01	; 1
   1a7f2:	60 e1       	ldi	r22, 0x10	; 16
   1a7f4:	87 e3       	ldi	r24, 0x37	; 55
   1a7f6:	95 e7       	ldi	r25, 0x75	; 117
   1a7f8:	0e 94 fe ce 	call	0x19dfc	; 0x19dfc <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:571

  print_byte_register(PSTR("RX_PW_P0-6"),RX_PW_P0,6);
   1a7fc:	46 e0       	ldi	r20, 0x06	; 6
   1a7fe:	61 e1       	ldi	r22, 0x11	; 17
   1a800:	8c e2       	ldi	r24, 0x2C	; 44
   1a802:	95 e7       	ldi	r25, 0x75	; 117
   1a804:	0e 94 c6 ce 	call	0x19d8c	; 0x19d8c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:572
  print_byte_register(PSTR("EN_AA\t"),EN_AA);
   1a808:	41 e0       	ldi	r20, 0x01	; 1
   1a80a:	61 e0       	ldi	r22, 0x01	; 1
   1a80c:	85 e2       	ldi	r24, 0x25	; 37
   1a80e:	95 e7       	ldi	r25, 0x75	; 117
   1a810:	0e 94 c6 ce 	call	0x19d8c	; 0x19d8c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:573
  print_byte_register(PSTR("EN_RXADDR"),EN_RXADDR);
   1a814:	41 e0       	ldi	r20, 0x01	; 1
   1a816:	62 e0       	ldi	r22, 0x02	; 2
   1a818:	8b e1       	ldi	r24, 0x1B	; 27
   1a81a:	95 e7       	ldi	r25, 0x75	; 117
   1a81c:	0e 94 c6 ce 	call	0x19d8c	; 0x19d8c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:574
  print_byte_register(PSTR("RF_CH\t"),RF_CH);
   1a820:	41 e0       	ldi	r20, 0x01	; 1
   1a822:	65 e0       	ldi	r22, 0x05	; 5
   1a824:	84 e1       	ldi	r24, 0x14	; 20
   1a826:	95 e7       	ldi	r25, 0x75	; 117
   1a828:	0e 94 c6 ce 	call	0x19d8c	; 0x19d8c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:575
  print_byte_register(PSTR("RF_SETUP"),RF_SETUP);
   1a82c:	41 e0       	ldi	r20, 0x01	; 1
   1a82e:	66 e0       	ldi	r22, 0x06	; 6
   1a830:	8b e0       	ldi	r24, 0x0B	; 11
   1a832:	95 e7       	ldi	r25, 0x75	; 117
   1a834:	0e 94 c6 ce 	call	0x19d8c	; 0x19d8c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:576
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
   1a838:	41 e0       	ldi	r20, 0x01	; 1
   1a83a:	60 e0       	ldi	r22, 0x00	; 0
   1a83c:	83 e0       	ldi	r24, 0x03	; 3
   1a83e:	95 e7       	ldi	r25, 0x75	; 117
   1a840:	0e 94 c6 ce 	call	0x19d8c	; 0x19d8c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:577
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);
   1a844:	42 e0       	ldi	r20, 0x02	; 2
   1a846:	6c e1       	ldi	r22, 0x1C	; 28
   1a848:	85 ef       	ldi	r24, 0xF5	; 245
   1a84a:	94 e7       	ldi	r25, 0x74	; 116
   1a84c:	0e 94 c6 ce 	call	0x19d8c	; 0x19d8c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
getDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1512
/****************************************************************************/

rf24_datarate_e RF24::getDataRate( void )
{
  rf24_datarate_e result ;
  uint8_t dr = read_register(RF_SETUP) & (_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
   1a850:	86 e0       	ldi	r24, 0x06	; 6
   1a852:	0e 94 2d c7 	call	0x18e5a	; 0x18e5a <RF24::read_register(unsigned char) [clone .constprop.107]>
   1a856:	88 72       	andi	r24, 0x28	; 40
/home/saric/Arduino/libraries/RF24/RF24.cpp:1516

  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
   1a858:	0f b6       	in	r0, 0x3f	; 63
   1a85a:	f8 94       	cli
   1a85c:	de bf       	out	0x3e, r29	; 62
   1a85e:	0f be       	out	0x3f, r0	; 63
   1a860:	cd bf       	out	0x3d, r28	; 61
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1519
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
   1a862:	e2 e0       	ldi	r30, 0x02	; 2
   1a864:	f0 e0       	ldi	r31, 0x00	; 0
getDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1516
  rf24_datarate_e result ;
  uint8_t dr = read_register(RF_SETUP) & (_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));

  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
   1a866:	80 32       	cpi	r24, 0x20	; 32
   1a868:	39 f0       	breq	.+14     	; 0x1a878 <main+0x35a>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1521
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
  }
  else if ( dr == _BV(RF_DR_HIGH) )
   1a86a:	21 e0       	ldi	r18, 0x01	; 1
   1a86c:	90 e0       	ldi	r25, 0x00	; 0
   1a86e:	88 30       	cpi	r24, 0x08	; 8
   1a870:	09 f0       	breq	.+2      	; 0x1a874 <main+0x356>
   1a872:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1519
  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
   1a874:	e2 2f       	mov	r30, r18
   1a876:	f9 2f       	mov	r31, r25
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:579
  print_byte_register(PSTR("RF_CH\t"),RF_CH);
  print_byte_register(PSTR("RF_SETUP"),RF_SETUP);
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
   1a878:	ee 0f       	add	r30, r30
   1a87a:	ff 1f       	adc	r31, r31
   1a87c:	e1 51       	subi	r30, 0x11	; 17
   1a87e:	fb 48       	sbci	r31, 0x8B	; 139
   1a880:	85 91       	lpm	r24, Z+
   1a882:	94 91       	lpm	r25, Z
   1a884:	9f 93       	push	r25
   1a886:	8f 93       	push	r24
   1a888:	8d ed       	ldi	r24, 0xDD	; 221
   1a88a:	94 e7       	ldi	r25, 0x74	; 116
   1a88c:	9f 93       	push	r25
   1a88e:	8f 93       	push	r24
   1a890:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:580
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
   1a894:	e0 91 17 10 	lds	r30, 0x1017	; 0x801017 <radio+0x6>
   1a898:	f0 e0       	ldi	r31, 0x00	; 0
   1a89a:	ee 0f       	add	r30, r30
   1a89c:	ff 1f       	adc	r31, r31
   1a89e:	e7 52       	subi	r30, 0x27	; 39
   1a8a0:	fb 48       	sbci	r31, 0x8B	; 139
   1a8a2:	85 91       	lpm	r24, Z+
   1a8a4:	94 91       	lpm	r25, Z
   1a8a6:	9f 93       	push	r25
   1a8a8:	8f 93       	push	r24
   1a8aa:	8a ec       	ldi	r24, 0xCA	; 202
   1a8ac:	94 e7       	ldi	r25, 0x74	; 116
   1a8ae:	9f 93       	push	r25
   1a8b0:	8f 93       	push	r24
   1a8b2:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <printf_P>
getCRCLength():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1563

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
  
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
   1a8b6:	80 e0       	ldi	r24, 0x00	; 0
   1a8b8:	0e 94 2d c7 	call	0x18e5a	; 0x18e5a <RF24::read_register(unsigned char) [clone .constprop.107]>
   1a8bc:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:1564
  uint8_t AA = read_register(EN_AA);
   1a8be:	81 e0       	ldi	r24, 0x01	; 1
   1a8c0:	0e 94 2d c7 	call	0x18e5a	; 0x18e5a <RF24::read_register(unsigned char) [clone .constprop.107]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566
  
  if ( config & _BV(EN_CRC ) || AA)
   1a8c4:	0f b6       	in	r0, 0x3f	; 63
   1a8c6:	f8 94       	cli
   1a8c8:	de bf       	out	0x3e, r29	; 62
   1a8ca:	0f be       	out	0x3f, r0	; 63
   1a8cc:	cd bf       	out	0x3d, r28	; 61
   1a8ce:	13 fd       	sbrc	r17, 3
   1a8d0:	04 c0       	rjmp	.+8      	; 0x1a8da <main+0x3bc>
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1561

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
   1a8d2:	f0 e0       	ldi	r31, 0x00	; 0
   1a8d4:	e0 e0       	ldi	r30, 0x00	; 0
getCRCLength():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566
  
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
  uint8_t AA = read_register(EN_AA);
  
  if ( config & _BV(EN_CRC ) || AA)
   1a8d6:	88 23       	and	r24, r24
   1a8d8:	31 f0       	breq	.+12     	; 0x1a8e6 <main+0x3c8>
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1569
  {
    if ( config & _BV(CRCO) )
      result = RF24_CRC_16;
   1a8da:	e2 e0       	ldi	r30, 0x02	; 2
   1a8dc:	f0 e0       	ldi	r31, 0x00	; 0
getCRCLength():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1568
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
  uint8_t AA = read_register(EN_AA);
  
  if ( config & _BV(EN_CRC ) || AA)
  {
    if ( config & _BV(CRCO) )
   1a8de:	12 fd       	sbrc	r17, 2
   1a8e0:	02 c0       	rjmp	.+4      	; 0x1a8e6 <main+0x3c8>
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1571
      result = RF24_CRC_16;
    else
      result = RF24_CRC_8;
   1a8e2:	e1 e0       	ldi	r30, 0x01	; 1
   1a8e4:	f0 e0       	ldi	r31, 0x00	; 0
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:581
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
  printf_P(PSTR("CRC Length\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
   1a8e6:	ee 0f       	add	r30, r30
   1a8e8:	ff 1f       	adc	r31, r31
   1a8ea:	ec 53       	subi	r30, 0x3C	; 60
   1a8ec:	fb 48       	sbci	r31, 0x8B	; 139
   1a8ee:	85 91       	lpm	r24, Z+
   1a8f0:	94 91       	lpm	r25, Z
   1a8f2:	9f 93       	push	r25
   1a8f4:	8f 93       	push	r24
   1a8f6:	81 eb       	ldi	r24, 0xB1	; 177
   1a8f8:	94 e7       	ldi	r25, 0x74	; 116
   1a8fa:	9f 93       	push	r25
   1a8fc:	8f 93       	push	r24
   1a8fe:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <printf_P>
getPALevel():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1454
/****************************************************************************/

uint8_t RF24::getPALevel(void)
{

  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
   1a902:	86 e0       	ldi	r24, 0x06	; 6
   1a904:	0e 94 2d c7 	call	0x18e5a	; 0x18e5a <RF24::read_register(unsigned char) [clone .constprop.107]>
   1a908:	e8 2f       	mov	r30, r24
   1a90a:	f0 e0       	ldi	r31, 0x00	; 0
   1a90c:	f5 95       	asr	r31
   1a90e:	e7 95       	ror	r30
   1a910:	e3 70       	andi	r30, 0x03	; 3
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:582
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
  printf_P(PSTR("CRC Length\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
  printf_P(PSTR("PA Power\t = " PRIPSTR "\r\n"),  pgm_read_word(&rf24_pa_dbm_e_str_P[getPALevel()]));
   1a912:	f0 e0       	ldi	r31, 0x00	; 0
   1a914:	ee 0f       	add	r30, r30
   1a916:	ff 1f       	adc	r31, r31
   1a918:	e7 55       	subi	r30, 0x57	; 87
   1a91a:	fb 48       	sbci	r31, 0x8B	; 139
   1a91c:	85 91       	lpm	r24, Z+
   1a91e:	94 91       	lpm	r25, Z
   1a920:	9f 93       	push	r25
   1a922:	8f 93       	push	r24
   1a924:	88 e9       	ldi	r24, 0x98	; 152
   1a926:	94 e7       	ldi	r25, 0x74	; 116
   1a928:	9f 93       	push	r25
   1a92a:	8f 93       	push	r24
   1a92c:	0e 94 04 e6 	call	0x1cc08	; 0x1cc08 <printf_P>
   1a930:	0f b6       	in	r0, 0x3f	; 63
   1a932:	f8 94       	cli
   1a934:	de bf       	out	0x3e, r29	; 62
   1a936:	0f be       	out	0x3f, r0	; 63
   1a938:	cd bf       	out	0x3d, r28	; 61
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3936
  }


  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) >= 10000)
   1a93a:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   1a93e:	00 91 ab 0c 	lds	r16, 0x0CAB	; 0x800cab <milis_10s>
   1a942:	10 91 ac 0c 	lds	r17, 0x0CAC	; 0x800cac <milis_10s+0x1>
   1a946:	20 91 ad 0c 	lds	r18, 0x0CAD	; 0x800cad <milis_10s+0x2>
   1a94a:	30 91 ae 0c 	lds	r19, 0x0CAE	; 0x800cae <milis_10s+0x3>
   1a94e:	ab 01       	movw	r20, r22
   1a950:	bc 01       	movw	r22, r24
   1a952:	40 1b       	sub	r20, r16
   1a954:	51 0b       	sbc	r21, r17
   1a956:	62 0b       	sbc	r22, r18
   1a958:	73 0b       	sbc	r23, r19
   1a95a:	40 31       	cpi	r20, 0x10	; 16
   1a95c:	57 42       	sbci	r21, 0x27	; 39
   1a95e:	61 05       	cpc	r22, r1
   1a960:	71 05       	cpc	r23, r1
   1a962:	08 f4       	brcc	.+2      	; 0x1a966 <main+0x448>
   1a964:	3f c7       	rjmp	.+3710   	; 0x1b7e4 <main+0x12c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3938
  {
    milis_10s += 10000;
   1a966:	d9 01       	movw	r26, r18
   1a968:	c8 01       	movw	r24, r16
   1a96a:	80 5f       	subi	r24, 0xF0	; 240
   1a96c:	98 4d       	sbci	r25, 0xD8	; 216
   1a96e:	af 4f       	sbci	r26, 0xFF	; 255
   1a970:	bf 4f       	sbci	r27, 0xFF	; 255
   1a972:	80 93 ab 0c 	sts	0x0CAB, r24	; 0x800cab <milis_10s>
   1a976:	90 93 ac 0c 	sts	0x0CAC, r25	; 0x800cac <milis_10s+0x1>
   1a97a:	a0 93 ad 0c 	sts	0x0CAD, r26	; 0x800cad <milis_10s+0x2>
   1a97e:	b0 93 ae 0c 	sts	0x0CAE, r27	; 0x800cae <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3939
    menu_redraw10s = 1;
   1a982:	81 e0       	ldi	r24, 0x01	; 1
   1a984:	80 93 aa 0c 	sts	0x0CAA, r24	; 0x800caa <menu_redraw10s>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2773
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
   1a988:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1a98c:	4a e0       	ldi	r20, 0x0A	; 10
   1a98e:	fe 01       	movw	r30, r28
   1a990:	31 96       	adiw	r30, 0x01	; 1
   1a992:	5f 01       	movw	r10, r30
   1a994:	bf 01       	movw	r22, r30
   1a996:	90 e0       	ldi	r25, 0x00	; 0
   1a998:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2774
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
   1a99c:	a5 01       	movw	r20, r10
   1a99e:	6b e4       	ldi	r22, 0x4B	; 75
   1a9a0:	77 e0       	ldi	r23, 0x07	; 7
   1a9a2:	8f e2       	ldi	r24, 0x2F	; 47
   1a9a4:	90 e1       	ldi	r25, 0x10	; 16
   1a9a6:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2775
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1a9aa:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   1a9ac:	3b e0       	ldi	r19, 0x0B	; 11
   1a9ae:	f3 2e       	mov	r15, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2775
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1a9b0:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <Global_HWwirenum>
   1a9b4:	18 17       	cp	r17, r24
   1a9b6:	b0 f5       	brcc	.+108    	; 0x1aa24 <main+0x506>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   1a9b8:	1f 9d       	mul	r17, r15
   1a9ba:	c0 01       	movw	r24, r0
   1a9bc:	11 24       	eor	r1, r1
   1a9be:	9c 01       	movw	r18, r24
   1a9c0:	22 54       	subi	r18, 0x42	; 66
   1a9c2:	33 4f       	sbci	r19, 0xF3	; 243
   1a9c4:	49 01       	movw	r8, r18
   1a9c6:	00 e1       	ldi	r16, 0x10	; 16
   1a9c8:	28 e0       	ldi	r18, 0x08	; 8
   1a9ca:	a4 01       	movw	r20, r8
   1a9cc:	6a e3       	ldi	r22, 0x3A	; 58
   1a9ce:	c5 01       	movw	r24, r10
   1a9d0:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2778
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "rom", payload);
   1a9d4:	95 01       	movw	r18, r10
   1a9d6:	47 e5       	ldi	r20, 0x57	; 87
   1a9d8:	57 e0       	ldi	r21, 0x07	; 7
   1a9da:	61 2f       	mov	r22, r17
   1a9dc:	8b e5       	ldi	r24, 0x5B	; 91
   1a9de:	97 e0       	ldi	r25, 0x07	; 7
   1a9e0:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2780
    ///
    itoa(w_rom[i].assigned_ds2482, payload, 10);
   1a9e4:	f4 01       	movw	r30, r8
   1a9e6:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1a9e8:	4a e0       	ldi	r20, 0x0A	; 10
   1a9ea:	b5 01       	movw	r22, r10
   1a9ec:	90 e0       	ldi	r25, 0x00	; 0
   1a9ee:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2781
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "assigned", payload);
   1a9f2:	95 01       	movw	r18, r10
   1a9f4:	41 e6       	ldi	r20, 0x61	; 97
   1a9f6:	57 e0       	ldi	r21, 0x07	; 7
   1a9f8:	61 2f       	mov	r22, r17
   1a9fa:	8b e5       	ldi	r24, 0x5B	; 91
   1a9fc:	97 e0       	ldi	r25, 0x07	; 7
   1a9fe:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2783
    ///
    itoa(w_rom[i].tds_idx, payload, 10);
   1aa02:	f4 01       	movw	r30, r8
   1aa04:	82 85       	ldd	r24, Z+10	; 0x0a
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1aa06:	4a e0       	ldi	r20, 0x0A	; 10
   1aa08:	b5 01       	movw	r22, r10
   1aa0a:	90 e0       	ldi	r25, 0x00	; 0
   1aa0c:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2784
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "tds_idx", payload);
   1aa10:	95 01       	movw	r18, r10
   1aa12:	4a e6       	ldi	r20, 0x6A	; 106
   1aa14:	57 e0       	ldi	r21, 0x07	; 7
   1aa16:	61 2f       	mov	r22, r17
   1aa18:	8b e5       	ldi	r24, 0x5B	; 91
   1aa1a:	97 e0       	ldi	r25, 0x07	; 7
   1aa1c:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2775
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1aa20:	1f 5f       	subi	r17, 0xFF	; 255
   1aa22:	c6 cf       	rjmp	.-116    	; 0x1a9b0 <main+0x492>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:319
void send_mqtt_status(PubSubClient *mqtt_client)
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  if (mqtt_client->connected())
   1aa24:	8f e2       	ldi	r24, 0x2F	; 47
   1aa26:	90 e1       	ldi	r25, 0x10	; 16
   1aa28:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <PubSubClient::connected()>
   1aa2c:	88 23       	and	r24, r24
   1aa2e:	09 f4       	brne	.+2      	; 0x1aa32 <main+0x514>
   1aa30:	95 c0       	rjmp	.+298    	; 0x1ab5c <main+0x63e>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:321
  {
    strcpy_P(str_topic, status_mqtt_send);
   1aa32:	63 eb       	ldi	r22, 0xB3	; 179
   1aa34:	75 e7       	ldi	r23, 0x75	; 117
   1aa36:	ce 01       	movw	r24, r28
   1aa38:	8f 5b       	subi	r24, 0xBF	; 191
   1aa3a:	9f 4f       	sbci	r25, 0xFF	; 255
   1aa3c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1aa40:	4a e0       	ldi	r20, 0x0A	; 10
   1aa42:	b5 01       	movw	r22, r10
   1aa44:	80 91 ba 0c 	lds	r24, 0x0CBA	; 0x800cba <mqtt_send_message>
   1aa48:	90 91 bb 0c 	lds	r25, 0x0CBB	; 0x800cbb <mqtt_send_message+0x1>
   1aa4c:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:323
    itoa(mqtt_send_message, payload, 10);
    mqtt_send_message = 0;
   1aa50:	10 92 bb 0c 	sts	0x0CBB, r1	; 0x800cbb <mqtt_send_message+0x1>
   1aa54:	10 92 ba 0c 	sts	0x0CBA, r1	; 0x800cba <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:324
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1aa58:	a5 01       	movw	r20, r10
   1aa5a:	be 01       	movw	r22, r28
   1aa5c:	6f 5b       	subi	r22, 0xBF	; 191
   1aa5e:	7f 4f       	sbci	r23, 0xFF	; 255
   1aa60:	8f e2       	ldi	r24, 0x2F	; 47
   1aa62:	90 e1       	ldi	r25, 0x10	; 16
   1aa64:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:326
    ///
    strcpy_P(str_topic, status_mqtt_error);
   1aa68:	61 ea       	ldi	r22, 0xA1	; 161
   1aa6a:	75 e7       	ldi	r23, 0x75	; 117
   1aa6c:	ce 01       	movw	r24, r28
   1aa6e:	8f 5b       	subi	r24, 0xBF	; 191
   1aa70:	9f 4f       	sbci	r25, 0xFF	; 255
   1aa72:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1aa76:	4a e0       	ldi	r20, 0x0A	; 10
   1aa78:	b5 01       	movw	r22, r10
   1aa7a:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <mqtt_error>
   1aa7e:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <mqtt_error+0x1>
   1aa82:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:328
    itoa(mqtt_error, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1aa86:	a5 01       	movw	r20, r10
   1aa88:	be 01       	movw	r22, r28
   1aa8a:	6f 5b       	subi	r22, 0xBF	; 191
   1aa8c:	7f 4f       	sbci	r23, 0xFF	; 255
   1aa8e:	8f e2       	ldi	r24, 0x2F	; 47
   1aa90:	90 e1       	ldi	r25, 0x10	; 16
   1aa92:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:330
    ///
    strcpy_P(str_topic, status_mqtt_receive);
   1aa96:	6d e8       	ldi	r22, 0x8D	; 141
   1aa98:	75 e7       	ldi	r23, 0x75	; 117
   1aa9a:	ce 01       	movw	r24, r28
   1aa9c:	8f 5b       	subi	r24, 0xBF	; 191
   1aa9e:	9f 4f       	sbci	r25, 0xFF	; 255
   1aaa0:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1aaa4:	4a e0       	ldi	r20, 0x0A	; 10
   1aaa6:	b5 01       	movw	r22, r10
   1aaa8:	80 91 7c 0b 	lds	r24, 0x0B7C	; 0x800b7c <mqtt_receive_message>
   1aaac:	90 91 7d 0b 	lds	r25, 0x0B7D	; 0x800b7d <mqtt_receive_message+0x1>
   1aab0:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:332
    itoa(mqtt_receive_message, payload, 10);
    mqtt_receive_message = 0;
   1aab4:	10 92 7d 0b 	sts	0x0B7D, r1	; 0x800b7d <mqtt_receive_message+0x1>
   1aab8:	10 92 7c 0b 	sts	0x0B7C, r1	; 0x800b7c <mqtt_receive_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:333
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1aabc:	a5 01       	movw	r20, r10
   1aabe:	be 01       	movw	r22, r28
   1aac0:	6f 5b       	subi	r22, 0xBF	; 191
   1aac2:	7f 4f       	sbci	r23, 0xFF	; 255
   1aac4:	8f e2       	ldi	r24, 0x2F	; 47
   1aac6:	90 e1       	ldi	r25, 0x10	; 16
   1aac8:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:335
    ///
    strcpy_P(str_topic, status_mqtt_process);
   1aacc:	69 e7       	ldi	r22, 0x79	; 121
   1aace:	75 e7       	ldi	r23, 0x75	; 117
   1aad0:	ce 01       	movw	r24, r28
   1aad2:	8f 5b       	subi	r24, 0xBF	; 191
   1aad4:	9f 4f       	sbci	r25, 0xFF	; 255
   1aad6:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1aada:	4a e0       	ldi	r20, 0x0A	; 10
   1aadc:	b5 01       	movw	r22, r10
   1aade:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   1aae2:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   1aae6:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:337
    itoa(mqtt_process_message, payload, 10);
    mqtt_process_message = 0;
   1aaea:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <mqtt_process_message+0x1>
   1aaee:	10 92 7a 0b 	sts	0x0B7A, r1	; 0x800b7a <mqtt_process_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:338
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1aaf2:	a5 01       	movw	r20, r10
   1aaf4:	be 01       	movw	r22, r28
   1aaf6:	6f 5b       	subi	r22, 0xBF	; 191
   1aaf8:	7f 4f       	sbci	r23, 0xFF	; 255
   1aafa:	8f e2       	ldi	r24, 0x2F	; 47
   1aafc:	90 e1       	ldi	r25, 0x10	; 16
   1aafe:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:340

    payload[0] = 0;
   1ab02:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:341
    createString(payload, '.', device.myIP, 4, 10);
   1ab04:	0a e0       	ldi	r16, 0x0A	; 10
   1ab06:	24 e0       	ldi	r18, 0x04	; 4
   1ab08:	4f e1       	ldi	r20, 0x1F	; 31
   1ab0a:	5e e0       	ldi	r21, 0x0E	; 14
   1ab0c:	6e e2       	ldi	r22, 0x2E	; 46
   1ab0e:	c5 01       	movw	r24, r10
   1ab10:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:342
    strcpy_P(str_topic, network_ip);
   1ab14:	6e e6       	ldi	r22, 0x6E	; 110
   1ab16:	75 e7       	ldi	r23, 0x75	; 117
   1ab18:	ce 01       	movw	r24, r28
   1ab1a:	8f 5b       	subi	r24, 0xBF	; 191
   1ab1c:	9f 4f       	sbci	r25, 0xFF	; 255
   1ab1e:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:343
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1ab22:	a5 01       	movw	r20, r10
   1ab24:	be 01       	movw	r22, r28
   1ab26:	6f 5b       	subi	r22, 0xBF	; 191
   1ab28:	7f 4f       	sbci	r23, 0xFF	; 255
   1ab2a:	8f e2       	ldi	r24, 0x2F	; 47
   1ab2c:	90 e1       	ldi	r25, 0x10	; 16
   1ab2e:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:345

    strcpy_P(str_topic, status_know_devices);
   1ab32:	6a e5       	ldi	r22, 0x5A	; 90
   1ab34:	75 e7       	ldi	r23, 0x75	; 117
   1ab36:	ce 01       	movw	r24, r28
   1ab38:	8f 5b       	subi	r24, 0xBF	; 191
   1ab3a:	9f 4f       	sbci	r25, 0xFF	; 255
   1ab3c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1ab40:	4a e0       	ldi	r20, 0x0A	; 10
   1ab42:	b5 01       	movw	r22, r10
   1ab44:	90 e0       	ldi	r25, 0x00	; 0
   1ab46:	80 e0       	ldi	r24, 0x00	; 0
   1ab48:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:347
    itoa(count_know_mqtt, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1ab4c:	a5 01       	movw	r20, r10
   1ab4e:	be 01       	movw	r22, r28
   1ab50:	6f 5b       	subi	r22, 0xBF	; 191
   1ab52:	7f 4f       	sbci	r23, 0xFF	; 255
   1ab54:	8f e2       	ldi	r24, 0x2F	; 47
   1ab56:	90 e1       	ldi	r25, 0x10	; 16
   1ab58:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:349
  }
  mqtt_error = 0;
   1ab5c:	10 92 bd 0c 	sts	0x0CBD, r1	; 0x800cbd <mqtt_error+0x1>
   1ab60:	10 92 bc 0c 	sts	0x0CBC, r1	; 0x800cbc <mqtt_error>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2793
/// funkce pro odeslani zakladnich informaci o tomto zarizeni
void send_device_status(void)
{
  char str_topic[64];
  char payload[64];
  if (mqtt_client.connected())
   1ab64:	8f e2       	ldi	r24, 0x2F	; 47
   1ab66:	90 e1       	ldi	r25, 0x10	; 16
   1ab68:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <PubSubClient::connected()>
   1ab6c:	88 23       	and	r24, r24
   1ab6e:	09 f4       	brne	.+2      	; 0x1ab72 <main+0x654>
   1ab70:	70 c1       	rjmp	.+736    	; 0x1ae52 <main+0x934>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2795
  {
    strcpy(str_topic, "status/uptime");
   1ab72:	62 e7       	ldi	r22, 0x72	; 114
   1ab74:	77 e0       	ldi	r23, 0x07	; 7
   1ab76:	ce 01       	movw	r24, r28
   1ab78:	8f 5b       	subi	r24, 0xBF	; 191
   1ab7a:	9f 4f       	sbci	r25, 0xFF	; 255
   1ab7c:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2796
    sprintf(payload, "%ld", uptime);
   1ab80:	80 91 9b 0c 	lds	r24, 0x0C9B	; 0x800c9b <uptime+0x3>
   1ab84:	8f 93       	push	r24
   1ab86:	80 91 9a 0c 	lds	r24, 0x0C9A	; 0x800c9a <uptime+0x2>
   1ab8a:	8f 93       	push	r24
   1ab8c:	80 91 99 0c 	lds	r24, 0x0C99	; 0x800c99 <uptime+0x1>
   1ab90:	8f 93       	push	r24
   1ab92:	80 91 98 0c 	lds	r24, 0x0C98	; 0x800c98 <uptime>
   1ab96:	8f 93       	push	r24
   1ab98:	80 e8       	ldi	r24, 0x80	; 128
   1ab9a:	97 e0       	ldi	r25, 0x07	; 7
   1ab9c:	9f 93       	push	r25
   1ab9e:	8f 93       	push	r24
   1aba0:	bf 92       	push	r11
   1aba2:	af 92       	push	r10
   1aba4:	0e 94 4b f2 	call	0x1e496	; 0x1e496 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2797
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1aba8:	a5 01       	movw	r20, r10
   1abaa:	be 01       	movw	r22, r28
   1abac:	6f 5b       	subi	r22, 0xBF	; 191
   1abae:	7f 4f       	sbci	r23, 0xFF	; 255
   1abb0:	8f e2       	ldi	r24, 0x2F	; 47
   1abb2:	90 e1       	ldi	r25, 0x10	; 16
   1abb4:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2799
    ///
    strcpy(str_topic, "status/brigthness");
   1abb8:	64 e8       	ldi	r22, 0x84	; 132
   1abba:	77 e0       	ldi	r23, 0x07	; 7
   1abbc:	ce 01       	movw	r24, r28
   1abbe:	8f 5b       	subi	r24, 0xBF	; 191
   1abc0:	9f 4f       	sbci	r25, 0xFF	; 255
   1abc2:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2800
    itoa(brigthness_display_values, payload, 10);
   1abc6:	80 91 87 0b 	lds	r24, 0x0B87	; 0x800b87 <brigthness_display_values>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1abca:	4a e0       	ldi	r20, 0x0A	; 10
   1abcc:	b5 01       	movw	r22, r10
   1abce:	90 e0       	ldi	r25, 0x00	; 0
   1abd0:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2801
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1abd4:	a5 01       	movw	r20, r10
   1abd6:	be 01       	movw	r22, r28
   1abd8:	6f 5b       	subi	r22, 0xBF	; 191
   1abda:	7f 4f       	sbci	r23, 0xFF	; 255
   1abdc:	8f e2       	ldi	r24, 0x2F	; 47
   1abde:	90 e1       	ldi	r25, 0x10	; 16
   1abe0:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2803
    ///
    strcpy(str_topic, "status/light");
   1abe4:	66 e9       	ldi	r22, 0x96	; 150
   1abe6:	77 e0       	ldi	r23, 0x07	; 7
   1abe8:	ce 01       	movw	r24, r28
   1abea:	8f 5b       	subi	r24, 0xBF	; 191
   1abec:	9f 4f       	sbci	r25, 0xFF	; 255
   1abee:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1abf2:	4a e0       	ldi	r20, 0x0A	; 10
   1abf4:	b5 01       	movw	r22, r10
   1abf6:	80 91 a3 0c 	lds	r24, 0x0CA3	; 0x800ca3 <light_curr>
   1abfa:	90 91 a4 0c 	lds	r25, 0x0CA4	; 0x800ca4 <light_curr+0x1>
   1abfe:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2805
    itoa(light_curr, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1ac02:	a5 01       	movw	r20, r10
   1ac04:	be 01       	movw	r22, r28
   1ac06:	6f 5b       	subi	r22, 0xBF	; 191
   1ac08:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac0a:	8f e2       	ldi	r24, 0x2F	; 47
   1ac0c:	90 e1       	ldi	r25, 0x10	; 16
   1ac0e:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2807
    ///
    strcpy(str_topic, "status/auto_brigthness");
   1ac12:	63 ea       	ldi	r22, 0xA3	; 163
   1ac14:	77 e0       	ldi	r23, 0x07	; 7
   1ac16:	ce 01       	movw	r24, r28
   1ac18:	8f 5b       	subi	r24, 0xBF	; 191
   1ac1a:	9f 4f       	sbci	r25, 0xFF	; 255
   1ac1c:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2808
    itoa(brigthness_display_auto_values, payload, 10);
   1ac20:	80 91 a0 0c 	lds	r24, 0x0CA0	; 0x800ca0 <brigthness_display_auto_values>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1ac24:	4a e0       	ldi	r20, 0x0A	; 10
   1ac26:	b5 01       	movw	r22, r10
   1ac28:	90 e0       	ldi	r25, 0x00	; 0
   1ac2a:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1ac2e:	a5 01       	movw	r20, r10
   1ac30:	be 01       	movw	r22, r28
   1ac32:	6f 5b       	subi	r22, 0xBF	; 191
   1ac34:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac36:	8f e2       	ldi	r24, 0x2F	; 47
   1ac38:	90 e1       	ldi	r25, 0x10	; 16
   1ac3a:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2811
    ///
    strcpy(str_topic, "status/load_min");
   1ac3e:	6a eb       	ldi	r22, 0xBA	; 186
   1ac40:	77 e0       	ldi	r23, 0x07	; 7
   1ac42:	ce 01       	movw	r24, r28
   1ac44:	8f 5b       	subi	r24, 0xBF	; 191
   1ac46:	9f 4f       	sbci	r25, 0xFF	; 255
   1ac48:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1ac4c:	4a e0       	ldi	r20, 0x0A	; 10
   1ac4e:	b5 01       	movw	r22, r10
   1ac50:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <load_min>
   1ac54:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <load_min+0x1>
   1ac58:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2813
    itoa(load_min, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1ac5c:	a5 01       	movw	r20, r10
   1ac5e:	be 01       	movw	r22, r28
   1ac60:	6f 5b       	subi	r22, 0xBF	; 191
   1ac62:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac64:	8f e2       	ldi	r24, 0x2F	; 47
   1ac66:	90 e1       	ldi	r25, 0x10	; 16
   1ac68:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2815
    ///
    strcpy(str_topic, "status/load_max");
   1ac6c:	6a ec       	ldi	r22, 0xCA	; 202
   1ac6e:	77 e0       	ldi	r23, 0x07	; 7
   1ac70:	ce 01       	movw	r24, r28
   1ac72:	8f 5b       	subi	r24, 0xBF	; 191
   1ac74:	9f 4f       	sbci	r25, 0xFF	; 255
   1ac76:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1ac7a:	4a e0       	ldi	r20, 0x0A	; 10
   1ac7c:	b5 01       	movw	r22, r10
   1ac7e:	80 91 85 0c 	lds	r24, 0x0C85	; 0x800c85 <load_max>
   1ac82:	90 91 86 0c 	lds	r25, 0x0C86	; 0x800c86 <load_max+0x1>
   1ac86:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2817
    itoa(load_max, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1ac8a:	a5 01       	movw	r20, r10
   1ac8c:	be 01       	movw	r22, r28
   1ac8e:	6f 5b       	subi	r22, 0xBF	; 191
   1ac90:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac92:	8f e2       	ldi	r24, 0x2F	; 47
   1ac94:	90 e1       	ldi	r25, 0x10	; 16
   1ac96:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2819
    ///
    load_max = 0;
   1ac9a:	10 92 85 0c 	sts	0x0C85, r1	; 0x800c85 <load_max>
   1ac9e:	10 92 86 0c 	sts	0x0C86, r1	; 0x800c86 <load_max+0x1>
   1aca2:	10 92 87 0c 	sts	0x0C87, r1	; 0x800c87 <load_max+0x2>
   1aca6:	10 92 88 0c 	sts	0x0C88, r1	; 0x800c88 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2820
    load_min = 0xffffffff;
   1acaa:	8f ef       	ldi	r24, 0xFF	; 255
   1acac:	9f ef       	ldi	r25, 0xFF	; 255
   1acae:	dc 01       	movw	r26, r24
   1acb0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <load_min>
   1acb4:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <load_min+0x1>
   1acb8:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <load_min+0x2>
   1acbc:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2822
    ///
    strcpy(str_topic, "status/default_ring");
   1acc0:	6a ed       	ldi	r22, 0xDA	; 218
   1acc2:	77 e0       	ldi	r23, 0x07	; 7
   1acc4:	ce 01       	movw	r24, r28
   1acc6:	8f 5b       	subi	r24, 0xBF	; 191
   1acc8:	9f 4f       	sbci	r25, 0xFF	; 255
   1acca:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2823
    itoa(default_ring, payload, 10);
   1acce:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1acd2:	4a e0       	ldi	r20, 0x0A	; 10
   1acd4:	b5 01       	movw	r22, r10
   1acd6:	90 e0       	ldi	r25, 0x00	; 0
   1acd8:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2824
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1acdc:	a5 01       	movw	r20, r10
   1acde:	be 01       	movw	r22, r28
   1ace0:	6f 5b       	subi	r22, 0xBF	; 191
   1ace2:	7f 4f       	sbci	r23, 0xFF	; 255
   1ace4:	8f e2       	ldi	r24, 0x2F	; 47
   1ace6:	90 e1       	ldi	r25, 0x10	; 16
   1ace8:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2826
    ///
    strcpy(str_topic, "status/selftest");
   1acec:	6e ee       	ldi	r22, 0xEE	; 238
   1acee:	77 e0       	ldi	r23, 0x07	; 7
   1acf0:	ce 01       	movw	r24, r28
   1acf2:	8f 5b       	subi	r24, 0xBF	; 191
   1acf4:	9f 4f       	sbci	r25, 0xFF	; 255
   1acf6:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2827
    itoa(selftest_data, payload, 10);
   1acfa:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1acfe:	4a e0       	ldi	r20, 0x0A	; 10
   1ad00:	b5 01       	movw	r22, r10
   1ad02:	90 e0       	ldi	r25, 0x00	; 0
   1ad04:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2828
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1ad08:	a5 01       	movw	r20, r10
   1ad0a:	be 01       	movw	r22, r28
   1ad0c:	6f 5b       	subi	r22, 0xBF	; 191
   1ad0e:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad10:	8f e2       	ldi	r24, 0x2F	; 47
   1ad12:	90 e1       	ldi	r25, 0x10	; 16
   1ad14:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2830

    strcpy(str_topic, "status/rtds/count");
   1ad18:	6e ef       	ldi	r22, 0xFE	; 254
   1ad1a:	77 e0       	ldi	r23, 0x07	; 7
   1ad1c:	ce 01       	movw	r24, r28
   1ad1e:	8f 5b       	subi	r24, 0xBF	; 191
   1ad20:	9f 4f       	sbci	r25, 0xFF	; 255
   1ad22:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2831
    itoa(use_rtds, payload, 10);
   1ad26:	80 91 91 0c 	lds	r24, 0x0C91	; 0x800c91 <use_rtds>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1ad2a:	4a e0       	ldi	r20, 0x0A	; 10
   1ad2c:	b5 01       	movw	r22, r10
   1ad2e:	90 e0       	ldi	r25, 0x00	; 0
   1ad30:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2832
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1ad34:	a5 01       	movw	r20, r10
   1ad36:	be 01       	movw	r22, r28
   1ad38:	6f 5b       	subi	r22, 0xBF	; 191
   1ad3a:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad3c:	8f e2       	ldi	r24, 0x2F	; 47
   1ad3e:	90 e1       	ldi	r25, 0x10	; 16
   1ad40:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3198
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   1ad44:	81 e0       	ldi	r24, 0x01	; 1
   1ad46:	90 e0       	ldi	r25, 0x00	; 0
   1ad48:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1ad4c:	4a e0       	ldi	r20, 0x0A	; 10
   1ad4e:	b5 01       	movw	r22, r10
   1ad50:	08 2e       	mov	r0, r24
   1ad52:	00 0c       	add	r0, r0
   1ad54:	99 0b       	sbc	r25, r25
   1ad56:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2839
      strcpy(str_topic, "status/light/count");
      itoa(use_light_curr, payload, 10);
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
   1ad5a:	a5 01       	movw	r20, r10
   1ad5c:	60 e1       	ldi	r22, 0x10	; 16
   1ad5e:	78 e0       	ldi	r23, 0x08	; 8
   1ad60:	8f e2       	ldi	r24, 0x2F	; 47
   1ad62:	90 e1       	ldi	r25, 0x10	; 16
   1ad64:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3176
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1ad68:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <tritri>
   1ad6c:	90 91 85 0b 	lds	r25, 0x0B85	; 0x800b85 <tritri+0x1>
   1ad70:	25 e0       	ldi	r18, 0x05	; 5
   1ad72:	28 9f       	mul	r18, r24
   1ad74:	b0 01       	movw	r22, r0
   1ad76:	29 9f       	mul	r18, r25
   1ad78:	70 0d       	add	r23, r0
   1ad7a:	11 24       	eor	r1, r1
   1ad7c:	90 e0       	ldi	r25, 0x00	; 0
   1ad7e:	80 e0       	ldi	r24, 0x00	; 0
   1ad80:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
   1ad84:	20 e0       	ldi	r18, 0x00	; 0
   1ad86:	30 e0       	ldi	r19, 0x00	; 0
   1ad88:	4a e7       	ldi	r20, 0x7A	; 122
   1ad8a:	54 e4       	ldi	r21, 0x44	; 68
   1ad8c:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2841
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
   1ad90:	85 01       	movw	r16, r10
   1ad92:	22 e0       	ldi	r18, 0x02	; 2
   1ad94:	44 e0       	ldi	r20, 0x04	; 4
   1ad96:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2842
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
   1ad9a:	a5 01       	movw	r20, r10
   1ad9c:	60 e2       	ldi	r22, 0x20	; 32
   1ad9e:	78 e0       	ldi	r23, 0x08	; 8
   1ada0:	8f e2       	ldi	r24, 0x2F	; 47
   1ada2:	90 e1       	ldi	r25, 0x10	; 16
   1ada4:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3176
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1ada8:	60 91 82 0b 	lds	r22, 0x0B82	; 0x800b82 <petnula>
   1adac:	70 91 83 0b 	lds	r23, 0x0B83	; 0x800b83 <petnula+0x1>
   1adb0:	23 e0       	ldi	r18, 0x03	; 3
   1adb2:	66 0f       	add	r22, r22
   1adb4:	77 1f       	adc	r23, r23
   1adb6:	2a 95       	dec	r18
   1adb8:	e1 f7       	brne	.-8      	; 0x1adb2 <main+0x894>
   1adba:	90 e0       	ldi	r25, 0x00	; 0
   1adbc:	80 e0       	ldi	r24, 0x00	; 0
   1adbe:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
   1adc2:	20 e0       	ldi	r18, 0x00	; 0
   1adc4:	30 e0       	ldi	r19, 0x00	; 0
   1adc6:	4a e7       	ldi	r20, 0x7A	; 122
   1adc8:	54 e4       	ldi	r21, 0x44	; 68
   1adca:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2844
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
   1adce:	22 e0       	ldi	r18, 0x02	; 2
   1add0:	44 e0       	ldi	r20, 0x04	; 4
   1add2:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2845
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
   1add6:	a5 01       	movw	r20, r10
   1add8:	63 e3       	ldi	r22, 0x33	; 51
   1adda:	78 e0       	ldi	r23, 0x08	; 8
   1addc:	8f e2       	ldi	r24, 0x2F	; 47
   1adde:	90 e1       	ldi	r25, 0x10	; 16
   1ade0:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3176
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1ade4:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <dvanact>
   1ade8:	90 91 81 0b 	lds	r25, 0x0B81	; 0x800b81 <dvanact+0x1>
   1adec:	29 e3       	ldi	r18, 0x39	; 57
   1adee:	28 9f       	mul	r18, r24
   1adf0:	b0 01       	movw	r22, r0
   1adf2:	29 9f       	mul	r18, r25
   1adf4:	70 0d       	add	r23, r0
   1adf6:	11 24       	eor	r1, r1
   1adf8:	90 e0       	ldi	r25, 0x00	; 0
   1adfa:	80 e0       	ldi	r24, 0x00	; 0
   1adfc:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
   1ae00:	20 e0       	ldi	r18, 0x00	; 0
   1ae02:	30 e0       	ldi	r19, 0x00	; 0
   1ae04:	4a e7       	ldi	r20, 0x7A	; 122
   1ae06:	54 e4       	ldi	r21, 0x44	; 68
   1ae08:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2847
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
   1ae0c:	22 e0       	ldi	r18, 0x02	; 2
   1ae0e:	44 e0       	ldi	r20, 0x04	; 4
   1ae10:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2848
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
   1ae14:	a5 01       	movw	r20, r10
   1ae16:	66 e4       	ldi	r22, 0x46	; 70
   1ae18:	78 e0       	ldi	r23, 0x08	; 8
   1ae1a:	8f e2       	ldi	r24, 0x2F	; 47
   1ae1c:	90 e1       	ldi	r25, 0x10	; 16
   1ae1e:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3191
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   1ae22:	60 91 7e 0b 	lds	r22, 0x0B7E	; 0x800b7e <proud>
   1ae26:	70 91 7f 0b 	lds	r23, 0x0B7F	; 0x800b7f <proud+0x1>
   1ae2a:	90 e0       	ldi	r25, 0x00	; 0
   1ae2c:	80 e0       	ldi	r24, 0x00	; 0
   1ae2e:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2850
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
    ///
    dtostrf(prepocet_proudu(proud), 4, 2, payload);
   1ae32:	22 e0       	ldi	r18, 0x02	; 2
   1ae34:	44 e0       	ldi	r20, 0x04	; 4
   1ae36:	0e 94 f8 e3 	call	0x1c7f0	; 0x1c7f0 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2851
    send_mqtt_general_payload(&mqtt_client, "status/current/consume", payload);
   1ae3a:	a5 01       	movw	r20, r10
   1ae3c:	69 e5       	ldi	r22, 0x59	; 89
   1ae3e:	78 e0       	ldi	r23, 0x08	; 8
   1ae40:	8f e2       	ldi	r24, 0x2F	; 47
   1ae42:	90 e1       	ldi	r25, 0x10	; 16
   1ae44:	0e 94 f9 87 	call	0x10ff2	; 0x10ff2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1ae48:	0f b6       	in	r0, 0x3f	; 63
   1ae4a:	f8 94       	cli
   1ae4c:	de bf       	out	0x3e, r29	; 62
   1ae4e:	0f be       	out	0x3f, r0	; 63
   1ae50:	cd bf       	out	0x3d, r28	; 61
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2775
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1ae52:	9c e5       	ldi	r25, 0x5C	; 92
   1ae54:	89 2e       	mov	r8, r25
   1ae56:	99 24       	eor	r9, r9
   1ae58:	93 94       	inc	r9
   1ae5a:	10 e0       	ldi	r17, 0x00	; 0
   1ae5c:	00 e0       	ldi	r16, 0x00	; 0
   1ae5e:	70 2e       	mov	r7, r16
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2871
void send_mqtt_ring(void)
{
  char payload[64];
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    //// odeslu pouze pokud je ring pripraveny
    if (thermostat_ring_get_active(idx) != RING_FREE)
   1ae60:	80 2f       	mov	r24, r16
   1ae62:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
   1ae66:	8f 3f       	cpi	r24, 0xFF	; 255
   1ae68:	09 f4       	brne	.+2      	; 0x1ae6c <main+0x94e>
   1ae6a:	c6 c0       	rjmp	.+396    	; 0x1aff8 <main+0xada>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2873
    {
      thermostat_ring_get_name(idx, payload);
   1ae6c:	b5 01       	movw	r22, r10
   1ae6e:	80 2f       	mov	r24, r16
   1ae70:	0e 94 70 68 	call	0xd0e0	; 0xd0e0 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2874
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "name", payload);
   1ae74:	95 01       	movw	r18, r10
   1ae76:	4a ee       	ldi	r20, 0xEA	; 234
   1ae78:	53 e0       	ldi	r21, 0x03	; 3
   1ae7a:	60 2f       	mov	r22, r16
   1ae7c:	89 ee       	ldi	r24, 0xE9	; 233
   1ae7e:	97 e0       	ldi	r25, 0x07	; 7
   1ae80:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2875
      itoa(thermostat_ring_get_active(idx), payload, 10);
   1ae84:	80 2f       	mov	r24, r16
   1ae86:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1ae8a:	4a e0       	ldi	r20, 0x0A	; 10
   1ae8c:	b5 01       	movw	r22, r10
   1ae8e:	90 e0       	ldi	r25, 0x00	; 0
   1ae90:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2876
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "active", payload);
   1ae94:	95 01       	movw	r18, r10
   1ae96:	44 ef       	ldi	r20, 0xF4	; 244
   1ae98:	53 e0       	ldi	r21, 0x03	; 3
   1ae9a:	60 2f       	mov	r22, r16
   1ae9c:	89 ee       	ldi	r24, 0xE9	; 233
   1ae9e:	97 e0       	ldi	r25, 0x07	; 7
   1aea0:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   1aea4:	c4 01       	movw	r24, r8
   1aea6:	01 97       	sbiw	r24, 0x01	; 1
   1aea8:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1aeac:	4a e0       	ldi	r20, 0x0A	; 10
   1aeae:	b5 01       	movw	r22, r10
   1aeb0:	90 e0       	ldi	r25, 0x00	; 0
   1aeb2:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2878
      itoa(thermostat_ring_get_program_id(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "program", payload);
   1aeb6:	95 01       	movw	r18, r10
   1aeb8:	41 ea       	ldi	r20, 0xA1	; 161
   1aeba:	56 e0       	ldi	r21, 0x06	; 6
   1aebc:	60 2f       	mov	r22, r16
   1aebe:	89 ee       	ldi	r24, 0xE9	; 233
   1aec0:	97 e0       	ldi	r25, 0x07	; 7
   1aec2:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2879
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
   1aec6:	80 2f       	mov	r24, r16
   1aec8:	0e 94 1c 67 	call	0xce38	; 0xce38 <thermostat_ring_get_mezni(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1aecc:	4a e0       	ldi	r20, 0x0A	; 10
   1aece:	b5 01       	movw	r22, r10
   1aed0:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2880
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
   1aed4:	95 01       	movw	r18, r10
   1aed6:	47 e9       	ldi	r20, 0x97	; 151
   1aed8:	56 e0       	ldi	r21, 0x06	; 6
   1aeda:	60 2f       	mov	r22, r16
   1aedc:	89 ee       	ldi	r24, 0xE9	; 233
   1aede:	97 e0       	ldi	r25, 0x07	; 7
   1aee0:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2881
      itoa(thermostat_ring_get_mode(idx), payload, 10);
   1aee4:	80 2f       	mov	r24, r16
   1aee6:	0e 94 14 67 	call	0xce28	; 0xce28 <thermostat_ring_get_mode(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1aeea:	4a e0       	ldi	r20, 0x0A	; 10
   1aeec:	b5 01       	movw	r22, r10
   1aeee:	90 e0       	ldi	r25, 0x00	; 0
   1aef0:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2882
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
   1aef4:	95 01       	movw	r18, r10
   1aef6:	4a eb       	ldi	r20, 0xBA	; 186
   1aef8:	56 e0       	ldi	r21, 0x06	; 6
   1aefa:	60 2f       	mov	r22, r16
   1aefc:	89 ee       	ldi	r24, 0xE9	; 233
   1aefe:	97 e0       	ldi	r25, 0x07	; 7
   1af00:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2883
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
   1af04:	80 2f       	mov	r24, r16
   1af06:	0e 94 14 67 	call	0xce28	; 0xce28 <thermostat_ring_get_mode(unsigned char)>
convert_mode_text():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3242
  return mode;
}

void convert_mode_text(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy(str, "off");
   1af0a:	60 e7       	ldi	r22, 0x70	; 112
   1af0c:	78 e0       	ldi	r23, 0x08	; 8
   1af0e:	88 23       	and	r24, r24
   1af10:	a1 f0       	breq	.+40     	; 0x1af3a <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3243
  if (mode == TERM_MODE_MAX)   strcpy(str, "heat");
   1af12:	6f ec       	ldi	r22, 0xCF	; 207
   1af14:	78 e0       	ldi	r23, 0x08	; 8
   1af16:	81 30       	cpi	r24, 0x01	; 1
   1af18:	81 f0       	breq	.+32     	; 0x1af3a <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3244
  if (mode == TERM_MODE_MAN_HEAT)   strcpy(str, "manual");
   1af1a:	6d ea       	ldi	r22, 0xAD	; 173
   1af1c:	75 e0       	ldi	r23, 0x05	; 5
   1af1e:	83 30       	cpi	r24, 0x03	; 3
   1af20:	61 f0       	breq	.+24     	; 0x1af3a <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3245
  if (mode == TERM_MODE_PROG)   strcpy(str, "auto");
   1af22:	64 eb       	ldi	r22, 0xB4	; 180
   1af24:	75 e0       	ldi	r23, 0x05	; 5
   1af26:	82 30       	cpi	r24, 0x02	; 2
   1af28:	41 f0       	breq	.+16     	; 0x1af3a <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3246
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy(str, "cool");
   1af2a:	6f eb       	ldi	r22, 0xBF	; 191
   1af2c:	78 e0       	ldi	r23, 0x08	; 8
   1af2e:	84 30       	cpi	r24, 0x04	; 4
   1af30:	21 f0       	breq	.+8      	; 0x1af3a <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3247
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
   1af32:	86 30       	cpi	r24, 0x06	; 6
   1af34:	29 f4       	brne	.+10     	; 0x1af40 <main+0xa22>
   1af36:	69 eb       	ldi	r22, 0xB9	; 185
   1af38:	75 e0       	ldi	r23, 0x05	; 5
   1af3a:	c5 01       	movw	r24, r10
   1af3c:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2884
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "text_mode", payload);
   1af40:	95 01       	movw	r18, r10
   1af42:	45 eb       	ldi	r20, 0xB5	; 181
   1af44:	56 e0       	ldi	r21, 0x06	; 6
   1af46:	67 2d       	mov	r22, r7
   1af48:	89 ee       	ldi	r24, 0xE9	; 233
   1af4a:	97 e0       	ldi	r25, 0x07	; 7
   1af4c:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:19
uint8_t therm_power[MAX_THERMOSTAT];

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_state(uint8_t idx)
{
  return therm_stav[idx];
   1af50:	f8 01       	movw	r30, r16
   1af52:	e3 57       	subi	r30, 0x73	; 115
   1af54:	f4 4f       	sbci	r31, 0xF4	; 244
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2885
      itoa(thermostat_ring_get_state(idx), payload, 10);
   1af56:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1af58:	4a e0       	ldi	r20, 0x0A	; 10
   1af5a:	b5 01       	movw	r22, r10
   1af5c:	90 e0       	ldi	r25, 0x00	; 0
   1af5e:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2886
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status", payload);
   1af62:	95 01       	movw	r18, r10
   1af64:	44 e7       	ldi	r20, 0x74	; 116
   1af66:	58 e0       	ldi	r21, 0x08	; 8
   1af68:	67 2d       	mov	r22, r7
   1af6a:	89 ee       	ldi	r24, 0xE9	; 233
   1af6c:	97 e0       	ldi	r25, 0x07	; 7
   1af6e:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   1af72:	c4 01       	movw	r24, r8
   1af74:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1af78:	4a e0       	ldi	r20, 0x0A	; 10
   1af7a:	b5 01       	movw	r22, r10
   1af7c:	90 e0       	ldi	r25, 0x00	; 0
   1af7e:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2888
      itoa(thermostat_ring_get_asociate_tds(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "input", payload);
   1af82:	95 01       	movw	r18, r10
   1af84:	4f eb       	ldi	r20, 0xBF	; 191
   1af86:	56 e0       	ldi	r21, 0x06	; 6
   1af88:	67 2d       	mov	r22, r7
   1af8a:	89 ee       	ldi	r24, 0xE9	; 233
   1af8c:	97 e0       	ldi	r25, 0x07	; 7
   1af8e:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   1af92:	c4 01       	movw	r24, r8
   1af94:	03 96       	adiw	r24, 0x03	; 3
   1af96:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1af9a:	4a e0       	ldi	r20, 0x0A	; 10
   1af9c:	b5 01       	movw	r22, r10
   1af9e:	90 e0       	ldi	r25, 0x00	; 0
   1afa0:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2890
      itoa(thermostat_ring_get_output(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output", payload);
   1afa4:	95 01       	movw	r18, r10
   1afa6:	45 ec       	ldi	r20, 0xC5	; 197
   1afa8:	56 e0       	ldi	r21, 0x06	; 6
   1afaa:	67 2d       	mov	r22, r7
   1afac:	89 ee       	ldi	r24, 0xE9	; 233
   1afae:	97 e0       	ldi	r25, 0x07	; 7
   1afb0:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_status_data():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   1afb4:	c4 01       	movw	r24, r8
   1afb6:	04 97       	sbiw	r24, 0x04	; 4
   1afb8:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1afbc:	4a e0       	ldi	r20, 0x0A	; 10
   1afbe:	b5 01       	movw	r22, r10
   1afc0:	90 e0       	ldi	r25, 0x00	; 0
   1afc2:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2893

      itoa(thermostat_ring_get_status_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status_bites", payload);
   1afc6:	95 01       	movw	r18, r10
   1afc8:	4b e7       	ldi	r20, 0x7B	; 123
   1afca:	58 e0       	ldi	r21, 0x08	; 8
   1afcc:	67 2d       	mov	r22, r7
   1afce:	89 ee       	ldi	r24, 0xE9	; 233
   1afd0:	97 e0       	ldi	r25, 0x07	; 7
   1afd2:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2895

      itoa(last_output_update[idx], payload, 10);
   1afd6:	f8 01       	movw	r30, r16
   1afd8:	e8 57       	subi	r30, 0x78	; 120
   1afda:	f4 4f       	sbci	r31, 0xF4	; 244
   1afdc:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1afde:	4a e0       	ldi	r20, 0x0A	; 10
   1afe0:	b5 01       	movw	r22, r10
   1afe2:	90 e0       	ldi	r25, 0x00	; 0
   1afe4:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2896
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output_update", payload);
   1afe8:	95 01       	movw	r18, r10
   1afea:	48 e8       	ldi	r20, 0x88	; 136
   1afec:	58 e0       	ldi	r21, 0x08	; 8
   1afee:	67 2d       	mov	r22, r7
   1aff0:	89 ee       	ldi	r24, 0xE9	; 233
   1aff2:	97 e0       	ldi	r25, 0x07	; 7
   1aff4:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
   1aff8:	0f 5f       	subi	r16, 0xFF	; 255
   1affa:	1f 4f       	sbci	r17, 0xFF	; 255
   1affc:	31 e2       	ldi	r19, 0x21	; 33
   1affe:	83 0e       	add	r8, r19
   1b000:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2869
  /thermctl-out/XXXXX/ring/ID/output
*/
void send_mqtt_ring(void)
{
  char payload[64];
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   1b002:	41 e0       	ldi	r20, 0x01	; 1
   1b004:	84 16       	cp	r8, r20
   1b006:	42 e0       	ldi	r20, 0x02	; 2
   1b008:	94 06       	cpc	r9, r20
   1b00a:	09 f0       	breq	.+2      	; 0x1b00e <main+0xaf0>
   1b00c:	28 cf       	rjmp	.-432    	; 0x1ae5e <main+0x940>
   1b00e:	be ec       	ldi	r27, 0xCE	; 206
   1b010:	6b 2e       	mov	r6, r27
   1b012:	bb e0       	ldi	r27, 0x0B	; 11
   1b014:	7b 2e       	mov	r7, r27
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2915
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1b016:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2919
    if (get_tds18s20(id, &tds) == 1)
      if (tds.used == 1 && status_tds18s20[id].online == True)
      {
        tt = status_tds18s20[id].temp / 10;
   1b018:	0a e0       	ldi	r16, 0x0A	; 10
   1b01a:	80 2e       	mov	r8, r16
   1b01c:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2938
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
        tt = status_tds18s20[id].online;
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
        payload[0] = 0;
        createString(payload, ':', tds.rom, 8, 16);
   1b01e:	81 e4       	ldi	r24, 0x41	; 65
   1b020:	48 2e       	mov	r4, r24
   1b022:	51 2c       	mov	r5, r1
   1b024:	4c 0e       	add	r4, r28
   1b026:	5d 1e       	adc	r5, r29
   1b028:	5f ef       	ldi	r21, 0xFF	; 255
   1b02a:	45 1a       	sub	r4, r21
   1b02c:	55 0a       	sbc	r5, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2916
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    if (get_tds18s20(id, &tds) == 1)
   1b02e:	be 01       	movw	r22, r28
   1b030:	6f 5b       	subi	r22, 0xBF	; 191
   1b032:	7f 4f       	sbci	r23, 0xFF	; 255
   1b034:	81 2f       	mov	r24, r17
   1b036:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1b03a:	81 30       	cpi	r24, 0x01	; 1
   1b03c:	09 f0       	breq	.+2      	; 0x1b040 <main+0xb22>
   1b03e:	ab c0       	rjmp	.+342    	; 0x1b196 <main+0xc78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2917
      if (tds.used == 1 && status_tds18s20[id].online == True)
   1b040:	22 96       	adiw	r28, 0x02	; 2
   1b042:	8f ad       	ldd	r24, Y+63	; 0x3f
   1b044:	22 97       	sbiw	r28, 0x02	; 2
   1b046:	81 30       	cpi	r24, 0x01	; 1
   1b048:	09 f0       	breq	.+2      	; 0x1b04c <main+0xb2e>
   1b04a:	a5 c0       	rjmp	.+330    	; 0x1b196 <main+0xc78>
   1b04c:	f3 01       	movw	r30, r6
   1b04e:	83 8d       	ldd	r24, Z+27	; 0x1b
   1b050:	81 30       	cpi	r24, 0x01	; 1
   1b052:	09 f0       	breq	.+2      	; 0x1b056 <main+0xb38>
   1b054:	a0 c0       	rjmp	.+320    	; 0x1b196 <main+0xc78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2919
      {
        tt = status_tds18s20[id].temp / 10;
   1b056:	85 81       	ldd	r24, Z+5	; 0x05
   1b058:	96 81       	ldd	r25, Z+6	; 0x06
   1b05a:	b4 01       	movw	r22, r8
   1b05c:	0e 94 51 ef 	call	0x1dea2	; 0x1dea2 <__divmodhi4>
   1b060:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1b062:	4a e0       	ldi	r20, 0x0A	; 10
   1b064:	b5 01       	movw	r22, r10
   1b066:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2921
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp", payload);
   1b06a:	95 01       	movw	r18, r10
   1b06c:	46 e9       	ldi	r20, 0x96	; 150
   1b06e:	58 e0       	ldi	r21, 0x08	; 8
   1b070:	61 2f       	mov	r22, r17
   1b072:	80 ef       	ldi	r24, 0xF0	; 240
   1b074:	93 e0       	ldi	r25, 0x03	; 3
   1b076:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
   1b07a:	30 e0       	ldi	r19, 0x00	; 0
   1b07c:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2922
        avg = 0;
   1b07e:	60 e0       	ldi	r22, 0x00	; 0
   1b080:	70 e0       	ldi	r23, 0x00	; 0
   1b082:	cb 01       	movw	r24, r22
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2923
        for (uint8_t c = 0; c < MAX_AVG_TEMP; c++) avg = avg + status_tds18s20[id].average_temp[c];
   1b084:	f9 01       	movw	r30, r18
   1b086:	ee 0f       	add	r30, r30
   1b088:	ff 1f       	adc	r31, r31
   1b08a:	e6 0d       	add	r30, r6
   1b08c:	f7 1d       	adc	r31, r7
   1b08e:	c7 80       	ldd	r12, Z+7	; 0x07
   1b090:	d0 84       	ldd	r13, Z+8	; 0x08
   1b092:	0d 2c       	mov	r0, r13
   1b094:	00 0c       	add	r0, r0
   1b096:	ee 08       	sbc	r14, r14
   1b098:	ff 08       	sbc	r15, r15
   1b09a:	6c 0d       	add	r22, r12
   1b09c:	7d 1d       	adc	r23, r13
   1b09e:	8e 1d       	adc	r24, r14
   1b0a0:	9f 1d       	adc	r25, r15
   1b0a2:	2f 5f       	subi	r18, 0xFF	; 255
   1b0a4:	3f 4f       	sbci	r19, 0xFF	; 255
   1b0a6:	2a 30       	cpi	r18, 0x0A	; 10
   1b0a8:	31 05       	cpc	r19, r1
   1b0aa:	61 f7       	brne	.-40     	; 0x1b084 <main+0xb66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2925
        avg = avg / MAX_AVG_TEMP;
        avg = avg / 10;
   1b0ac:	24 e6       	ldi	r18, 0x64	; 100
   1b0ae:	30 e0       	ldi	r19, 0x00	; 0
   1b0b0:	40 e0       	ldi	r20, 0x00	; 0
   1b0b2:	50 e0       	ldi	r21, 0x00	; 0
   1b0b4:	0e 94 87 ef 	call	0x1df0e	; 0x1df0e <__divmodsi4>
   1b0b8:	c9 01       	movw	r24, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1b0ba:	4a e0       	ldi	r20, 0x0A	; 10
   1b0bc:	b5 01       	movw	r22, r10
   1b0be:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2927
        itoa(avg, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);
   1b0c2:	95 01       	movw	r18, r10
   1b0c4:	4b e9       	ldi	r20, 0x9B	; 155
   1b0c6:	58 e0       	ldi	r21, 0x08	; 8
   1b0c8:	61 2f       	mov	r22, r17
   1b0ca:	80 ef       	ldi	r24, 0xF0	; 240
   1b0cc:	93 e0       	ldi	r25, 0x03	; 3
   1b0ce:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2929

        strcpy(payload, tds.name);
   1b0d2:	c5 54       	subi	r28, 0x45	; 69
   1b0d4:	df 4f       	sbci	r29, 0xFF	; 255
   1b0d6:	68 81       	ld	r22, Y
   1b0d8:	79 81       	ldd	r23, Y+1	; 0x01
   1b0da:	cb 5b       	subi	r28, 0xBB	; 187
   1b0dc:	d0 40       	sbci	r29, 0x00	; 0
   1b0de:	c5 01       	movw	r24, r10
   1b0e0:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2930
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "name", payload);
   1b0e4:	95 01       	movw	r18, r10
   1b0e6:	4a ee       	ldi	r20, 0xEA	; 234
   1b0e8:	53 e0       	ldi	r21, 0x03	; 3
   1b0ea:	61 2f       	mov	r22, r17
   1b0ec:	80 ef       	ldi	r24, 0xF0	; 240
   1b0ee:	93 e0       	ldi	r25, 0x03	; 3
   1b0f0:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1b0f4:	4a e0       	ldi	r20, 0x0A	; 10
   1b0f6:	b5 01       	movw	r22, r10
   1b0f8:	2d 96       	adiw	r28, 0x0d	; 13
   1b0fa:	8e ad       	ldd	r24, Y+62	; 0x3e
   1b0fc:	9f ad       	ldd	r25, Y+63	; 0x3f
   1b0fe:	2d 97       	sbiw	r28, 0x0d	; 13
   1b100:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2933
        tt = tds.offset;
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
   1b104:	95 01       	movw	r18, r10
   1b106:	49 e1       	ldi	r20, 0x19	; 25
   1b108:	58 e0       	ldi	r21, 0x08	; 8
   1b10a:	61 2f       	mov	r22, r17
   1b10c:	80 ef       	ldi	r24, 0xF0	; 240
   1b10e:	93 e0       	ldi	r25, 0x03	; 3
   1b110:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2934
        tt = status_tds18s20[id].online;
   1b114:	f3 01       	movw	r30, r6
   1b116:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1b118:	4a e0       	ldi	r20, 0x0A	; 10
   1b11a:	b5 01       	movw	r22, r10
   1b11c:	90 e0       	ldi	r25, 0x00	; 0
   1b11e:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2936
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
   1b122:	95 01       	movw	r18, r10
   1b124:	44 ea       	ldi	r20, 0xA4	; 164
   1b126:	58 e0       	ldi	r21, 0x08	; 8
   1b128:	61 2f       	mov	r22, r17
   1b12a:	80 ef       	ldi	r24, 0xF0	; 240
   1b12c:	93 e0       	ldi	r25, 0x03	; 3
   1b12e:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2937
        payload[0] = 0;
   1b132:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2938
        createString(payload, ':', tds.rom, 8, 16);
   1b134:	00 e1       	ldi	r16, 0x10	; 16
   1b136:	28 e0       	ldi	r18, 0x08	; 8
   1b138:	a2 01       	movw	r20, r4
   1b13a:	6a e3       	ldi	r22, 0x3A	; 58
   1b13c:	c5 01       	movw	r24, r10
   1b13e:	0e 94 f1 74 	call	0xe9e2	; 0xe9e2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2939
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "rom", payload);
   1b142:	95 01       	movw	r18, r10
   1b144:	47 e5       	ldi	r20, 0x57	; 87
   1b146:	57 e0       	ldi	r21, 0x07	; 7
   1b148:	61 2f       	mov	r22, r17
   1b14a:	80 ef       	ldi	r24, 0xF0	; 240
   1b14c:	93 e0       	ldi	r25, 0x03	; 3
   1b14e:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2940
        tt = tds.period;
   1b152:	66 96       	adiw	r28, 0x16	; 22
   1b154:	8f ad       	ldd	r24, Y+63	; 0x3f
   1b156:	66 97       	sbiw	r28, 0x16	; 22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1b158:	4a e0       	ldi	r20, 0x0A	; 10
   1b15a:	b5 01       	movw	r22, r10
   1b15c:	90 e0       	ldi	r25, 0x00	; 0
   1b15e:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2942
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "period", payload);
   1b162:	95 01       	movw	r18, r10
   1b164:	40 e9       	ldi	r20, 0x90	; 144
   1b166:	56 e0       	ldi	r21, 0x06	; 6
   1b168:	61 2f       	mov	r22, r17
   1b16a:	80 ef       	ldi	r24, 0xF0	; 240
   1b16c:	93 e0       	ldi	r25, 0x03	; 3
   1b16e:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2944

        tt = (uptime & 0xff) - status_tds18s20[id].period_now;
   1b172:	80 91 98 0c 	lds	r24, 0x0C98	; 0x800c98 <uptime>
   1b176:	f3 01       	movw	r30, r6
   1b178:	94 8d       	ldd	r25, Z+28	; 0x1c
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1b17a:	4a e0       	ldi	r20, 0x0A	; 10
   1b17c:	b5 01       	movw	r22, r10
   1b17e:	89 1b       	sub	r24, r25
   1b180:	99 0b       	sbc	r25, r25
   1b182:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2946
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "start_at", payload);
   1b186:	95 01       	movw	r18, r10
   1b188:	4b ea       	ldi	r20, 0xAB	; 171
   1b18a:	58 e0       	ldi	r21, 0x08	; 8
   1b18c:	61 2f       	mov	r22, r17
   1b18e:	80 ef       	ldi	r24, 0xF0	; 240
   1b190:	93 e0       	ldi	r25, 0x03	; 3
   1b192:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2915
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1b196:	1f 5f       	subi	r17, 0xFF	; 255
   1b198:	fe e1       	ldi	r31, 0x1E	; 30
   1b19a:	6f 0e       	add	r6, r31
   1b19c:	71 1c       	adc	r7, r1
   1b19e:	16 30       	cpi	r17, 0x06	; 6
   1b1a0:	09 f0       	breq	.+2      	; 0x1b1a4 <main+0xc86>
   1b1a2:	45 cf       	rjmp	.-374    	; 0x1b02e <main+0xb10>
   1b1a4:	51 2c       	mov	r5, r1
   1b1a6:	41 2c       	mov	r4, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2963
{
  char payload[64];
  char tmp1[6];
  uint8_t act = 0;
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   1b1a8:	91 2c       	mov	r9, r1
   1b1aa:	9e 01       	movw	r18, r28
   1b1ac:	2f 5f       	subi	r18, 0xFF	; 255
   1b1ae:	3f 4f       	sbci	r19, 0xFF	; 255
   1b1b0:	19 01       	movw	r2, r18
   1b1b2:	ae 01       	movw	r20, r28
   1b1b4:	45 5f       	subi	r20, 0xF5	; 245
   1b1b6:	5f 4f       	sbci	r21, 0xFF	; 255
   1b1b8:	c1 55       	subi	r28, 0x51	; 81
   1b1ba:	df 4f       	sbci	r29, 0xFF	; 255
   1b1bc:	59 83       	std	Y+1, r21	; 0x01
   1b1be:	48 83       	st	Y, r20
   1b1c0:	cf 5a       	subi	r28, 0xAF	; 175
   1b1c2:	d0 40       	sbci	r29, 0x00	; 0
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1b1c4:	f6 e0       	ldi	r31, 0x06	; 6
   1b1c6:	8f 2e       	mov	r8, r31
thermostat_program_get_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:291
  }
}
//// globalni povoleni programu a nastaveni rezimu
uint8_t thermostat_program_get_active(uint8_t program_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
   1b1c8:	c2 01       	movw	r24, r4
   1b1ca:	8f 50       	subi	r24, 0x0F	; 15
   1b1cc:	9e 4f       	sbci	r25, 0xFE	; 254
   1b1ce:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1b1d2:	f8 2e       	mov	r15, r24
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2966
  {
    act = thermostat_program_get_active(idx);
    if ( act != PROG_FREE)
   1b1d4:	5f ef       	ldi	r21, 0xFF	; 255
   1b1d6:	85 17       	cp	r24, r21
   1b1d8:	09 f4       	brne	.+2      	; 0x1b1dc <main+0xcbe>
   1b1da:	0a c1       	rjmp	.+532    	; 0x1b3f0 <main+0xed2>
   1b1dc:	81 01       	movw	r16, r2
thermostat_program_get_name():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:274
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
   1b1de:	32 01       	movw	r6, r4
   1b1e0:	62 18       	sub	r6, r2
   1b1e2:	73 08       	sbc	r7, r3
   1b1e4:	6c ec       	ldi	r22, 0xCC	; 204
   1b1e6:	66 1a       	sub	r6, r22
   1b1e8:	6d ef       	ldi	r22, 0xFD	; 253
   1b1ea:	76 0a       	sbc	r7, r22
   1b1ec:	c3 01       	movw	r24, r6
   1b1ee:	80 0f       	add	r24, r16
   1b1f0:	91 1f       	adc	r25, r17
   1b1f2:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:275
    name[i] = t;
   1b1f6:	f8 01       	movw	r30, r16
   1b1f8:	81 93       	st	Z+, r24
   1b1fa:	8f 01       	movw	r16, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:276
    if (t == 0) break;
   1b1fc:	88 23       	and	r24, r24
   1b1fe:	49 f0       	breq	.+18     	; 0x1b212 <main+0xcf4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:272
//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   1b200:	c1 55       	subi	r28, 0x51	; 81
   1b202:	df 4f       	sbci	r29, 0xFF	; 255
   1b204:	28 81       	ld	r18, Y
   1b206:	39 81       	ldd	r19, Y+1	; 0x01
   1b208:	cf 5a       	subi	r28, 0xAF	; 175
   1b20a:	d0 40       	sbci	r29, 0x00	; 0
   1b20c:	2e 17       	cp	r18, r30
   1b20e:	3f 07       	cpc	r19, r31
   1b210:	69 f7       	brne	.-38     	; 0x1b1ec <main+0xcce>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2969
    {
      thermostat_program_get_name(idx, payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "name", payload);
   1b212:	95 01       	movw	r18, r10
   1b214:	4a ee       	ldi	r20, 0xEA	; 234
   1b216:	53 e0       	ldi	r21, 0x03	; 3
   1b218:	69 2d       	mov	r22, r9
   1b21a:	84 eb       	ldi	r24, 0xB4	; 180
   1b21c:	98 e0       	ldi	r25, 0x08	; 8
   1b21e:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1b222:	4a e0       	ldi	r20, 0x0A	; 10
   1b224:	b5 01       	movw	r22, r10
   1b226:	8f 2d       	mov	r24, r15
   1b228:	90 e0       	ldi	r25, 0x00	; 0
   1b22a:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2971
      itoa(act, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "active", payload);
   1b22e:	95 01       	movw	r18, r10
   1b230:	44 ef       	ldi	r20, 0xF4	; 244
   1b232:	53 e0       	ldi	r21, 0x03	; 3
   1b234:	69 2d       	mov	r22, r9
   1b236:	84 eb       	ldi	r24, 0xB4	; 180
   1b238:	98 e0       	ldi	r25, 0x08	; 8
   1b23a:	0e 94 4c b2 	call	0x16498	; 0x16498 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
   1b23e:	71 2c       	mov	r7, r1
   1b240:	61 2c       	mov	r6, r1
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1b242:	a2 01       	movw	r20, r4
   1b244:	4e 50       	subi	r20, 0x0E	; 14
   1b246:	5e 4f       	sbci	r21, 0xFE	; 254
   1b248:	cd 54       	subi	r28, 0x4D	; 77
   1b24a:	df 4f       	sbci	r29, 0xFF	; 255
   1b24c:	59 83       	std	Y+1, r21	; 0x01
   1b24e:	48 83       	st	Y, r20
   1b250:	c3 5b       	subi	r28, 0xB3	; 179
   1b252:	d0 40       	sbci	r29, 0x00	; 0
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2974
      for (uint8_t progid = 0 ; progid < MAX_PROGRAM_INTERVAL; progid++)
      {
        thermostat_program_get_time(idx, progid, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   1b254:	be 01       	movw	r22, r28
   1b256:	6f 57       	subi	r22, 0x7F	; 127
   1b258:	7f 4f       	sbci	r23, 0xFF	; 255
   1b25a:	6b 01       	movw	r12, r22
   1b25c:	ce 01       	movw	r24, r28
   1b25e:	8c 55       	subi	r24, 0x5C	; 92
   1b260:	9f 4f       	sbci	r25, 0xFF	; 255
   1b262:	7c 01       	movw	r14, r24
   1b264:	8e 01       	movw	r16, r28
   1b266:	04 55       	subi	r16, 0x54	; 84
   1b268:	1f 4f       	sbci	r17, 0xFF	; 255
   1b26a:	9e 01       	movw	r18, r28
   1b26c:	23 55       	subi	r18, 0x53	; 83
   1b26e:	3f 4f       	sbci	r19, 0xFF	; 255
   1b270:	ae 01       	movw	r20, r28
   1b272:	42 55       	subi	r20, 0x52	; 82
   1b274:	5f 4f       	sbci	r21, 0xFF	; 255
   1b276:	66 2d       	mov	r22, r6
   1b278:	89 2d       	mov	r24, r9
   1b27a:	0e 94 c1 66 	call	0xcd82	; 0xcd82 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2975
        if (active == 1)
   1b27e:	cf 57       	subi	r28, 0x7F	; 127
   1b280:	df 4f       	sbci	r29, 0xFF	; 255
   1b282:	88 81       	ld	r24, Y
   1b284:	c1 58       	subi	r28, 0x81	; 129
   1b286:	d0 40       	sbci	r29, 0x00	; 0
   1b288:	81 30       	cpi	r24, 0x01	; 1
   1b28a:	09 f0       	breq	.+2      	; 0x1b28e <main+0xd70>
   1b28c:	a9 c0       	rjmp	.+338    	; 0x1b3e0 <main+0xec2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2977
        {
          itoa(start_hour, tmp1, 10);
   1b28e:	c2 55       	subi	r28, 0x52	; 82
   1b290:	df 4f       	sbci	r29, 0xFF	; 255
   1b292:	88 81       	ld	r24, Y
   1b294:	ce 5a       	subi	r28, 0xAE	; 174
   1b296:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1b298:	4a e0       	ldi	r20, 0x0A	; 10
   1b29a:	be 01       	movw	r22, r28
   1b29c:	6f 5b       	subi	r22, 0xBF	; 191
   1b29e:	7f 4f       	sbci	r23, 0xFF	; 255
   1b2a0:	90 e0       	ldi	r25, 0x00	; 0
   1b2a2:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2978
          strcpy(payload, tmp1);
   1b2a6:	be 01       	movw	r22, r28
   1b2a8:	6f 5b       	subi	r22, 0xBF	; 191
   1b2aa:	7f 4f       	sbci	r23, 0xFF	; 255
   1b2ac:	c5 01       	movw	r24, r10
   1b2ae:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2979
          strcat(payload, ",");
   1b2b2:	6e e5       	ldi	r22, 0x5E	; 94
   1b2b4:	75 e0       	ldi	r23, 0x05	; 5
   1b2b6:	c5 01       	movw	r24, r10
   1b2b8:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2980
          itoa(start_min, tmp1, 10);
   1b2bc:	c3 55       	subi	r28, 0x53	; 83
   1b2be:	df 4f       	sbci	r29, 0xFF	; 255
   1b2c0:	88 81       	ld	r24, Y
   1b2c2:	cd 5a       	subi	r28, 0xAD	; 173
   1b2c4:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1b2c6:	4a e0       	ldi	r20, 0x0A	; 10
   1b2c8:	be 01       	movw	r22, r28
   1b2ca:	6f 5b       	subi	r22, 0xBF	; 191
   1b2cc:	7f 4f       	sbci	r23, 0xFF	; 255
   1b2ce:	90 e0       	ldi	r25, 0x00	; 0
   1b2d0:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2981
          strcat(payload, tmp1);
   1b2d4:	be 01       	movw	r22, r28
   1b2d6:	6f 5b       	subi	r22, 0xBF	; 191
   1b2d8:	7f 4f       	sbci	r23, 0xFF	; 255
   1b2da:	c5 01       	movw	r24, r10
   1b2dc:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2982
          strcat(payload, ",");
   1b2e0:	6e e5       	ldi	r22, 0x5E	; 94
   1b2e2:	75 e0       	ldi	r23, 0x05	; 5
   1b2e4:	c5 01       	movw	r24, r10
   1b2e6:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2983
          itoa(stop_hour, tmp1, 10);
   1b2ea:	c4 55       	subi	r28, 0x54	; 84
   1b2ec:	df 4f       	sbci	r29, 0xFF	; 255
   1b2ee:	88 81       	ld	r24, Y
   1b2f0:	cc 5a       	subi	r28, 0xAC	; 172
   1b2f2:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1b2f4:	4a e0       	ldi	r20, 0x0A	; 10
   1b2f6:	be 01       	movw	r22, r28
   1b2f8:	6f 5b       	subi	r22, 0xBF	; 191
   1b2fa:	7f 4f       	sbci	r23, 0xFF	; 255
   1b2fc:	90 e0       	ldi	r25, 0x00	; 0
   1b2fe:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2984
          strcat(payload, tmp1);
   1b302:	be 01       	movw	r22, r28
   1b304:	6f 5b       	subi	r22, 0xBF	; 191
   1b306:	7f 4f       	sbci	r23, 0xFF	; 255
   1b308:	c5 01       	movw	r24, r10
   1b30a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2985
          strcat(payload, ",");
   1b30e:	6e e5       	ldi	r22, 0x5E	; 94
   1b310:	75 e0       	ldi	r23, 0x05	; 5
   1b312:	c5 01       	movw	r24, r10
   1b314:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2986
          itoa(stop_min, tmp1, 10);
   1b318:	cc 55       	subi	r28, 0x5C	; 92
   1b31a:	df 4f       	sbci	r29, 0xFF	; 255
   1b31c:	88 81       	ld	r24, Y
   1b31e:	c4 5a       	subi	r28, 0xA4	; 164
   1b320:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1b322:	4a e0       	ldi	r20, 0x0A	; 10
   1b324:	be 01       	movw	r22, r28
   1b326:	6f 5b       	subi	r22, 0xBF	; 191
   1b328:	7f 4f       	sbci	r23, 0xFF	; 255
   1b32a:	90 e0       	ldi	r25, 0x00	; 0
   1b32c:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2987
          strcat(payload, tmp1);
   1b330:	be 01       	movw	r22, r28
   1b332:	6f 5b       	subi	r22, 0xBF	; 191
   1b334:	7f 4f       	sbci	r23, 0xFF	; 255
   1b336:	c5 01       	movw	r24, r10
   1b338:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2988
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "time", payload);
   1b33c:	95 01       	movw	r18, r10
   1b33e:	45 ee       	ldi	r20, 0xE5	; 229
   1b340:	56 e0       	ldi	r21, 0x06	; 6
   1b342:	66 2d       	mov	r22, r6
   1b344:	89 2d       	mov	r24, r9
   1b346:	0e 94 d5 b2 	call	0x165aa	; 0x165aa <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2989
          itoa(active, tmp1, 10);
   1b34a:	cf 57       	subi	r28, 0x7F	; 127
   1b34c:	df 4f       	sbci	r29, 0xFF	; 255
   1b34e:	88 81       	ld	r24, Y
   1b350:	c1 58       	subi	r28, 0x81	; 129
   1b352:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1b354:	4a e0       	ldi	r20, 0x0A	; 10
   1b356:	be 01       	movw	r22, r28
   1b358:	6f 5b       	subi	r22, 0xBF	; 191
   1b35a:	7f 4f       	sbci	r23, 0xFF	; 255
   1b35c:	90 e0       	ldi	r25, 0x00	; 0
   1b35e:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2990
          strcpy(payload, tmp1);
   1b362:	be 01       	movw	r22, r28
   1b364:	6f 5b       	subi	r22, 0xBF	; 191
   1b366:	7f 4f       	sbci	r23, 0xFF	; 255
   1b368:	c5 01       	movw	r24, r10
   1b36a:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2991
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "active", payload);
   1b36e:	95 01       	movw	r18, r10
   1b370:	44 ef       	ldi	r20, 0xF4	; 244
   1b372:	53 e0       	ldi	r21, 0x03	; 3
   1b374:	66 2d       	mov	r22, r6
   1b376:	89 2d       	mov	r24, r9
   1b378:	0e 94 d5 b2 	call	0x165aa	; 0x165aa <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2992
          itoa(thermostat_program_get_threshold(idx, progid), tmp1, 10);
   1b37c:	66 2d       	mov	r22, r6
   1b37e:	89 2d       	mov	r24, r9
   1b380:	0e 94 9f 66 	call	0xcd3e	; 0xcd3e <thermostat_program_get_threshold(unsigned char, unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1b384:	4a e0       	ldi	r20, 0x0A	; 10
   1b386:	be 01       	movw	r22, r28
   1b388:	6f 5b       	subi	r22, 0xBF	; 191
   1b38a:	7f 4f       	sbci	r23, 0xFF	; 255
   1b38c:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2993
          strcpy(payload, tmp1);
   1b390:	be 01       	movw	r22, r28
   1b392:	6f 5b       	subi	r22, 0xBF	; 191
   1b394:	7f 4f       	sbci	r23, 0xFF	; 255
   1b396:	c5 01       	movw	r24, r10
   1b398:	0e 94 fc f1 	call	0x1e3f8	; 0x1e3f8 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2994
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "threshold", payload);
   1b39c:	95 01       	movw	r18, r10
   1b39e:	47 e9       	ldi	r20, 0x97	; 151
   1b3a0:	56 e0       	ldi	r21, 0x06	; 6
   1b3a2:	66 2d       	mov	r22, r6
   1b3a4:	89 2d       	mov	r24, r9
   1b3a6:	0e 94 d5 b2 	call	0x165aa	; 0x165aa <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
   1b3aa:	86 9c       	mul	r8, r6
   1b3ac:	c0 01       	movw	r24, r0
   1b3ae:	87 9c       	mul	r8, r7
   1b3b0:	90 0d       	add	r25, r0
   1b3b2:	11 24       	eor	r1, r1
   1b3b4:	cd 54       	subi	r28, 0x4D	; 77
   1b3b6:	df 4f       	sbci	r29, 0xFF	; 255
   1b3b8:	e8 81       	ld	r30, Y
   1b3ba:	f9 81       	ldd	r31, Y+1	; 0x01
   1b3bc:	c3 5b       	subi	r28, 0xB3	; 179
   1b3be:	d0 40       	sbci	r29, 0x00	; 0
   1b3c0:	8e 0f       	add	r24, r30
   1b3c2:	9f 1f       	adc	r25, r31
   1b3c4:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1b3c8:	4a e0       	ldi	r20, 0x0A	; 10
   1b3ca:	b5 01       	movw	r22, r10
   1b3cc:	90 e0       	ldi	r25, 0x00	; 0
   1b3ce:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2996
          itoa(thermostat_program_get_week(idx, progid), payload, 10);
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "week", payload);
   1b3d2:	95 01       	movw	r18, r10
   1b3d4:	49 eb       	ldi	r20, 0xB9	; 185
   1b3d6:	58 e0       	ldi	r21, 0x08	; 8
   1b3d8:	66 2d       	mov	r22, r6
   1b3da:	89 2d       	mov	r24, r9
   1b3dc:	0e 94 d5 b2 	call	0x165aa	; 0x165aa <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>
   1b3e0:	ff ef       	ldi	r31, 0xFF	; 255
   1b3e2:	6f 1a       	sub	r6, r31
   1b3e4:	7f 0a       	sbc	r7, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2972
    {
      thermostat_program_get_name(idx, payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "name", payload);
      itoa(act, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "active", payload);
      for (uint8_t progid = 0 ; progid < MAX_PROGRAM_INTERVAL; progid++)
   1b3e6:	2b e0       	ldi	r18, 0x0B	; 11
   1b3e8:	62 16       	cp	r6, r18
   1b3ea:	71 04       	cpc	r7, r1
   1b3ec:	09 f0       	breq	.+2      	; 0x1b3f0 <main+0xed2>
   1b3ee:	32 cf       	rjmp	.-412    	; 0x1b254 <main+0xd36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2963
{
  char payload[64];
  char tmp1[6];
  uint8_t act = 0;
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   1b3f0:	93 94       	inc	r9
   1b3f2:	3d e4       	ldi	r19, 0x4D	; 77
   1b3f4:	43 0e       	add	r4, r19
   1b3f6:	51 1c       	adc	r5, r1
   1b3f8:	48 e0       	ldi	r20, 0x08	; 8
   1b3fa:	94 12       	cpse	r9, r20
   1b3fc:	e5 ce       	rjmp	.-566    	; 0x1b1c8 <main+0xcaa>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3277
  int16_t thresh = 0;
  uint8_t pwm = 200; // start hodnota
  uint8_t te = 0;
  uint8_t prg = 0;
  uint8_t act;
  uint8_t active = 0;
   1b3fe:	c2 55       	subi	r28, 0x52	; 82
   1b400:	df 4f       	sbci	r29, 0xFF	; 255
   1b402:	18 82       	st	Y, r1
   1b404:	ce 5a       	subi	r28, 0xAE	; 174
   1b406:	d0 40       	sbci	r29, 0x00	; 0
   1b408:	7c e5       	ldi	r23, 0x5C	; 92
   1b40a:	27 2e       	mov	r2, r23
   1b40c:	33 24       	eor	r3, r3
   1b40e:	33 94       	inc	r3
   1b410:	51 2c       	mov	r5, r1
   1b412:	41 2c       	mov	r4, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3273
{
  uint8_t tdsid = 0;
  uint8_t tmode = 0;
  uint8_t tout = 0;
  int16_t thresh = 0;
  uint8_t pwm = 200; // start hodnota
   1b414:	e8 ec       	ldi	r30, 0xC8	; 200
   1b416:	9e 2e       	mov	r9, r30
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   1b418:	c1 01       	movw	r24, r2
   1b41a:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1b41e:	a8 2e       	mov	r10, r24
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3284


  for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
  {
    tdsid = thermostat_ring_get_asociate_tds(tix);
    tmode = thermostat_ring_get_mode(tix);
   1b420:	84 2d       	mov	r24, r4
   1b422:	0e 94 14 67 	call	0xce28	; 0xce28 <thermostat_ring_get_mode(unsigned char)>
   1b426:	78 2e       	mov	r7, r24
thermostat_ring_get_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   1b428:	c1 01       	movw	r24, r2
   1b42a:	03 96       	adiw	r24, 0x03	; 3
   1b42c:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1b430:	b8 2e       	mov	r11, r24
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3286
    tout = thermostat_ring_get_output(tix);
    thresh = thermostat_ring_get_mezni(tix);
   1b432:	84 2d       	mov	r24, r4
   1b434:	0e 94 1c 67 	call	0xce38	; 0xce38 <thermostat_ring_get_mezni(unsigned char)>
   1b438:	cd 54       	subi	r28, 0x4D	; 77
   1b43a:	df 4f       	sbci	r29, 0xFF	; 255
   1b43c:	99 83       	std	Y+1, r25	; 0x01
   1b43e:	88 83       	st	Y, r24
   1b440:	c3 5b       	subi	r28, 0xB3	; 179
   1b442:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3287
    if (tmode == TERM_MODE_PROG)
   1b444:	52 e0       	ldi	r21, 0x02	; 2
   1b446:	75 12       	cpse	r7, r21
   1b448:	1c c5       	rjmp	.+2616   	; 0x1be82 <main+0x1964>
thermostat_ring_get_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   1b44a:	c1 01       	movw	r24, r2
   1b44c:	01 97       	sbiw	r24, 0x01	; 1
   1b44e:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1b452:	88 2e       	mov	r8, r24
dayOfTheWeek():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:178
    mm = conv2d(buff + 3);
    ss = conv2d(buff + 6);
}

uint8_t DateTime::dayOfTheWeek() const {    
    uint16_t day = date2days(yOff, m, d);
   1b454:	90 91 75 12 	lds	r25, 0x1275	; 0x801275 <now+0x1>
   1b458:	e4 ef       	ldi	r30, 0xF4	; 244
   1b45a:	f5 e7       	ldi	r31, 0x75	; 117
main():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:59
// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
   1b45c:	81 e0       	ldi	r24, 0x01	; 1
date2days():
   1b45e:	89 17       	cp	r24, r25
   1b460:	20 f4       	brcc	.+8      	; 0x1b46a <main+0xf4c>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:60
        days += pgm_read_byte(daysInMonth + i - 1);
   1b462:	24 91       	lpm	r18, Z
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:59
// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
   1b464:	8f 5f       	subi	r24, 0xFF	; 255
   1b466:	31 96       	adiw	r30, 0x01	; 1
   1b468:	fa cf       	rjmp	.-12     	; 0x1b45e <main+0xf40>
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:392
{
  uint8_t ret = PROG_FREE;
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
   1b46a:	6f ef       	ldi	r22, 0xFF	; 255
   1b46c:	86 16       	cp	r8, r22
   1b46e:	09 f4       	brne	.+2      	; 0x1b472 <main+0xf54>
   1b470:	7f c0       	rjmp	.+254    	; 0x1b570 <main+0x1052>
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1b472:	7d e4       	ldi	r23, 0x4D	; 77
   1b474:	87 9e       	mul	r8, r23
   1b476:	c0 01       	movw	r24, r0
   1b478:	11 24       	eor	r1, r1
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:402
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
   1b47a:	40 91 77 12 	lds	r20, 0x1277	; 0x801277 <now+0x3>
   1b47e:	20 91 78 12 	lds	r18, 0x1278	; 0x801278 <now+0x4>
   1b482:	30 e0       	ldi	r19, 0x00	; 0
   1b484:	f9 01       	movw	r30, r18
   1b486:	5c e3       	ldi	r21, 0x3C	; 60
   1b488:	45 9f       	mul	r20, r21
   1b48a:	e0 0d       	add	r30, r0
   1b48c:	f1 1d       	adc	r31, r1
   1b48e:	11 24       	eor	r1, r1
   1b490:	cf 54       	subi	r28, 0x4F	; 79
   1b492:	df 4f       	sbci	r29, 0xFF	; 255
   1b494:	f9 83       	std	Y+1, r31	; 0x01
   1b496:	e8 83       	st	Y, r30
   1b498:	c1 5b       	subi	r28, 0xB1	; 177
   1b49a:	d0 40       	sbci	r29, 0x00	; 0
   1b49c:	71 2c       	mov	r7, r1
   1b49e:	61 2c       	mov	r6, r1
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1b4a0:	bc 01       	movw	r22, r24
   1b4a2:	6e 50       	subi	r22, 0x0E	; 14
   1b4a4:	7e 4f       	sbci	r23, 0xFE	; 254
   1b4a6:	c7 54       	subi	r28, 0x47	; 71
   1b4a8:	df 4f       	sbci	r29, 0xFF	; 255
   1b4aa:	79 83       	std	Y+1, r23	; 0x01
   1b4ac:	68 83       	st	Y, r22
   1b4ae:	c9 5b       	subi	r28, 0xB9	; 185
   1b4b0:	d0 40       	sbci	r29, 0x00	; 0
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:396
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   1b4b2:	ce 01       	movw	r24, r28
   1b4b4:	01 96       	adiw	r24, 0x01	; 1
   1b4b6:	6c 01       	movw	r12, r24
   1b4b8:	fe 01       	movw	r30, r28
   1b4ba:	ef 5b       	subi	r30, 0xBF	; 191
   1b4bc:	ff 4f       	sbci	r31, 0xFF	; 255
   1b4be:	7f 01       	movw	r14, r30
   1b4c0:	8e 01       	movw	r16, r28
   1b4c2:	0c 55       	subi	r16, 0x5C	; 92
   1b4c4:	1f 4f       	sbci	r17, 0xFF	; 255
   1b4c6:	9e 01       	movw	r18, r28
   1b4c8:	24 55       	subi	r18, 0x54	; 84
   1b4ca:	3f 4f       	sbci	r19, 0xFF	; 255
   1b4cc:	ae 01       	movw	r20, r28
   1b4ce:	43 55       	subi	r20, 0x53	; 83
   1b4d0:	5f 4f       	sbci	r21, 0xFF	; 255
   1b4d2:	66 2d       	mov	r22, r6
   1b4d4:	88 2d       	mov	r24, r8
   1b4d6:	0e 94 c1 66 	call	0xcd82	; 0xcd82 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:397
      if (active == 1)
   1b4da:	89 81       	ldd	r24, Y+1	; 0x01
   1b4dc:	81 30       	cpi	r24, 0x01	; 1
   1b4de:	09 f0       	breq	.+2      	; 0x1b4e2 <main+0xfc4>
   1b4e0:	c7 c4       	rjmp	.+2446   	; 0x1be70 <main+0x1952>
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1b4e2:	f6 e0       	ldi	r31, 0x06	; 6
   1b4e4:	f6 9d       	mul	r31, r6
   1b4e6:	c0 01       	movw	r24, r0
   1b4e8:	f7 9d       	mul	r31, r7
   1b4ea:	90 0d       	add	r25, r0
   1b4ec:	11 24       	eor	r1, r1
   1b4ee:	c7 54       	subi	r28, 0x47	; 71
   1b4f0:	df 4f       	sbci	r29, 0xFF	; 255
   1b4f2:	28 81       	ld	r18, Y
   1b4f4:	39 81       	ldd	r19, Y+1	; 0x01
   1b4f6:	c9 5b       	subi	r28, 0xB9	; 185
   1b4f8:	d0 40       	sbci	r29, 0x00	; 0
   1b4fa:	82 0f       	add	r24, r18
   1b4fc:	93 1f       	adc	r25, r19
   1b4fe:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:400
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
   1b502:	c3 55       	subi	r28, 0x53	; 83
   1b504:	df 4f       	sbci	r29, 0xFF	; 255
   1b506:	98 81       	ld	r25, Y
   1b508:	cd 5a       	subi	r28, 0xAD	; 173
   1b50a:	d0 40       	sbci	r29, 0x00	; 0
   1b50c:	c4 55       	subi	r28, 0x54	; 84
   1b50e:	df 4f       	sbci	r29, 0xFF	; 255
   1b510:	28 81       	ld	r18, Y
   1b512:	cc 5a       	subi	r28, 0xAC	; 172
   1b514:	d0 40       	sbci	r29, 0x00	; 0
   1b516:	30 e0       	ldi	r19, 0x00	; 0
   1b518:	4c e3       	ldi	r20, 0x3C	; 60
   1b51a:	94 9f       	mul	r25, r20
   1b51c:	20 0d       	add	r18, r0
   1b51e:	31 1d       	adc	r19, r1
   1b520:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   1b522:	cf 54       	subi	r28, 0x4F	; 79
   1b524:	df 4f       	sbci	r29, 0xFF	; 255
   1b526:	68 81       	ld	r22, Y
   1b528:	79 81       	ldd	r23, Y+1	; 0x01
   1b52a:	c1 5b       	subi	r28, 0xB1	; 177
   1b52c:	d0 40       	sbci	r29, 0x00	; 0
   1b52e:	62 17       	cp	r22, r18
   1b530:	73 07       	cpc	r23, r19
   1b532:	0c f4       	brge	.+2      	; 0x1b536 <main+0x1018>
   1b534:	9d c4       	rjmp	.+2362   	; 0x1be70 <main+0x1952>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:401
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
   1b536:	cc 55       	subi	r28, 0x5C	; 92
   1b538:	df 4f       	sbci	r29, 0xFF	; 255
   1b53a:	98 81       	ld	r25, Y
   1b53c:	c4 5a       	subi	r28, 0xA4	; 164
   1b53e:	d0 40       	sbci	r29, 0x00	; 0
   1b540:	22 96       	adiw	r28, 0x02	; 2
   1b542:	2f ad       	ldd	r18, Y+63	; 0x3f
   1b544:	22 97       	sbiw	r28, 0x02	; 2
   1b546:	30 e0       	ldi	r19, 0x00	; 0
   1b548:	94 9f       	mul	r25, r20
   1b54a:	20 0d       	add	r18, r0
   1b54c:	31 1d       	adc	r19, r1
   1b54e:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   1b550:	62 17       	cp	r22, r18
   1b552:	73 07       	cpc	r23, r19
   1b554:	0c f0       	brlt	.+2      	; 0x1b558 <main+0x103a>
   1b556:	8c c4       	rjmp	.+2328   	; 0x1be70 <main+0x1952>
   1b558:	80 ff       	sbrs	r24, 0
   1b55a:	8a c4       	rjmp	.+2324   	; 0x1be70 <main+0x1952>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:405
        {
          *threshold = thermostat_program_get_threshold(program, interval_id);
   1b55c:	66 2d       	mov	r22, r6
   1b55e:	88 2d       	mov	r24, r8
   1b560:	0e 94 9f 66 	call	0xcd3e	; 0xcd3e <thermostat_program_get_threshold(unsigned char, unsigned char)>
   1b564:	cd 54       	subi	r28, 0x4D	; 77
   1b566:	df 4f       	sbci	r29, 0xFF	; 255
   1b568:	99 83       	std	Y+1, r25	; 0x01
   1b56a:	88 83       	st	Y, r24
   1b56c:	c3 5b       	subi	r28, 0xB3	; 179
   1b56e:	d0 40       	sbci	r29, 0x00	; 0
thermostat_ring_set_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   1b570:	f2 01       	movw	r30, r4
   1b572:	e3 57       	subi	r30, 0x73	; 115
   1b574:	f4 4f       	sbci	r31, 0xF4	; 244
   1b576:	10 82       	st	Z, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3304
            thermostat_ring_set_state(tix, TERM_STAV_STOP);
            thermostat_ring_set_power(tix, 0);
          }
        case PROG_NO_INTERVAL:
          {
            tmode = TERM_MODE_OFF;
   1b578:	71 2c       	mov	r7, r1
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3340

      thermostat_pid_setdirection_reverse(tix);
    }


    if (tdsid < HW_ONEWIRE_MAXROMS )
   1b57a:	f5 e0       	ldi	r31, 0x05	; 5
   1b57c:	fa 15       	cp	r31, r10
   1b57e:	08 f4       	brcc	.+2      	; 0x1b582 <main+0x1064>
   1b580:	56 c0       	rjmp	.+172    	; 0x1b62e <main+0x1110>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3342
    {
      if (get_tds18s20(tdsid, &tds) == 1)
   1b582:	be 01       	movw	r22, r28
   1b584:	6f 57       	subi	r22, 0x7F	; 127
   1b586:	7f 4f       	sbci	r23, 0xFF	; 255
   1b588:	8a 2d       	mov	r24, r10
   1b58a:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1b58e:	81 30       	cpi	r24, 0x01	; 1
   1b590:	09 f0       	breq	.+2      	; 0x1b594 <main+0x1076>
   1b592:	4d c0       	rjmp	.+154    	; 0x1b62e <main+0x1110>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3343
        if (tds.used == 1 && status_tds18s20[tdsid].online == True)
   1b594:	cf 57       	subi	r28, 0x7F	; 127
   1b596:	df 4f       	sbci	r29, 0xFF	; 255
   1b598:	88 81       	ld	r24, Y
   1b59a:	c1 58       	subi	r28, 0x81	; 129
   1b59c:	d0 40       	sbci	r29, 0x00	; 0
   1b59e:	81 30       	cpi	r24, 0x01	; 1
   1b5a0:	09 f0       	breq	.+2      	; 0x1b5a4 <main+0x1086>
   1b5a2:	91 c4       	rjmp	.+2338   	; 0x1bec6 <main+0x19a8>
   1b5a4:	2e e1       	ldi	r18, 0x1E	; 30
   1b5a6:	a2 9e       	mul	r10, r18
   1b5a8:	f0 01       	movw	r30, r0
   1b5aa:	11 24       	eor	r1, r1
   1b5ac:	e2 53       	subi	r30, 0x32	; 50
   1b5ae:	f4 4f       	sbci	r31, 0xF4	; 244
   1b5b0:	83 8d       	ldd	r24, Z+27	; 0x1b
   1b5b2:	81 30       	cpi	r24, 0x01	; 1
   1b5b4:	09 f0       	breq	.+2      	; 0x1b5b8 <main+0x109a>
   1b5b6:	87 c4       	rjmp	.+2318   	; 0x1bec6 <main+0x19a8>
   1b5b8:	82 01       	movw	r16, r4
   1b5ba:	00 0f       	add	r16, r16
   1b5bc:	11 1f       	adc	r17, r17
   1b5be:	00 0f       	add	r16, r16
   1b5c0:	11 1f       	adc	r17, r17
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
  return PID_p[idx];
}

void thermostat_pid_input(uint8_t idx, double value)
{
  PID_Input[idx] = value;
   1b5c2:	a8 01       	movw	r20, r16
   1b5c4:	4e 56       	subi	r20, 0x6E	; 110
   1b5c6:	54 4f       	sbci	r21, 0xF4	; 244
   1b5c8:	4a 01       	movw	r8, r20
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3345
        {
          thermostat_pid_input(tix, status_tds18s20[tdsid].temp / 100.0);
   1b5ca:	65 81       	ldd	r22, Z+5	; 0x05
   1b5cc:	76 81       	ldd	r23, Z+6	; 0x06
   1b5ce:	07 2e       	mov	r0, r23
   1b5d0:	00 0c       	add	r0, r0
   1b5d2:	88 0b       	sbc	r24, r24
   1b5d4:	99 0b       	sbc	r25, r25
   1b5d6:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
   1b5da:	20 e0       	ldi	r18, 0x00	; 0
   1b5dc:	30 e0       	ldi	r19, 0x00	; 0
   1b5de:	48 ec       	ldi	r20, 0xC8	; 200
   1b5e0:	52 e4       	ldi	r21, 0x42	; 66
   1b5e2:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
   1b5e6:	f4 01       	movw	r30, r8
   1b5e8:	60 83       	st	Z, r22
   1b5ea:	71 83       	std	Z+1, r23	; 0x01
   1b5ec:	82 83       	std	Z+2, r24	; 0x02
   1b5ee:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_setpoint():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:75
}

void thermostat_pid_setpoint(uint8_t idx, double value)
{
  PID_Setpoint[idx] = value;
   1b5f0:	98 01       	movw	r18, r16
   1b5f2:	2a 55       	subi	r18, 0x5A	; 90
   1b5f4:	34 4f       	sbci	r19, 0xF4	; 244
   1b5f6:	49 01       	movw	r8, r18
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3346
          thermostat_pid_setpoint(tix, thresh);
   1b5f8:	cd 54       	subi	r28, 0x4D	; 77
   1b5fa:	df 4f       	sbci	r29, 0xFF	; 255
   1b5fc:	48 81       	ld	r20, Y
   1b5fe:	59 81       	ldd	r21, Y+1	; 0x01
   1b600:	c3 5b       	subi	r28, 0xB3	; 179
   1b602:	d0 40       	sbci	r29, 0x00	; 0
   1b604:	ba 01       	movw	r22, r20
   1b606:	55 0f       	add	r21, r21
   1b608:	88 0b       	sbc	r24, r24
   1b60a:	99 0b       	sbc	r25, r25
   1b60c:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
   1b610:	f4 01       	movw	r30, r8
   1b612:	60 83       	st	Z, r22
   1b614:	71 83       	std	Z+1, r23	; 0x01
   1b616:	82 83       	std	Z+2, r24	; 0x02
   1b618:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:80
}

uint8_t thermostat_pid_output(uint8_t idx)
{
  return PID_Output[idx];
   1b61a:	f8 01       	movw	r30, r16
   1b61c:	e6 54       	subi	r30, 0x46	; 70
   1b61e:	f4 4f       	sbci	r31, 0xF4	; 244
   1b620:	60 81       	ld	r22, Z
   1b622:	71 81       	ldd	r23, Z+1	; 0x01
   1b624:	82 81       	ldd	r24, Z+2	; 0x02
   1b626:	93 81       	ldd	r25, Z+3	; 0x03
   1b628:	0e 94 a6 f0 	call	0x1e14c	; 0x1e14c <__fixunssfsi>
   1b62c:	96 2e       	mov	r9, r22
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3359
          thermostat_ring_set_power(tix, pwm);
        }
    }


    if (tdsid >= HW_ONEWIRE_MAXROMS && tdsid < HW_ONEWIRE_MAXROMS + MAX_RTDS)
   1b62e:	1a ef       	ldi	r17, 0xFA	; 250
   1b630:	1a 0d       	add	r17, r10
   1b632:	1a 30       	cpi	r17, 0x0A	; 10
   1b634:	08 f0       	brcs	.+2      	; 0x1b638 <main+0x111a>
   1b636:	56 c0       	rjmp	.+172    	; 0x1b6e4 <main+0x11c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3362
    {
      act = tdsid - HW_ONEWIRE_MAXROMS;
      remote_tds_get_active(act , &active);
   1b638:	be 01       	movw	r22, r28
   1b63a:	62 55       	subi	r22, 0x52	; 82
   1b63c:	7f 4f       	sbci	r23, 0xFF	; 255
   1b63e:	81 2f       	mov	r24, r17
   1b640:	0e 94 2f 6f 	call	0xde5e	; 0xde5e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3364

      if (active == 1 && remote_tds_get_last_update(act) < 180 && remote_tds_get_type(act) == RTDS_REMOTE_TYPE_TEMP)
   1b644:	c2 55       	subi	r28, 0x52	; 82
   1b646:	df 4f       	sbci	r29, 0xFF	; 255
   1b648:	88 81       	ld	r24, Y
   1b64a:	ce 5a       	subi	r28, 0xAE	; 174
   1b64c:	d0 40       	sbci	r29, 0x00	; 0
   1b64e:	81 30       	cpi	r24, 0x01	; 1
   1b650:	09 f0       	breq	.+2      	; 0x1b654 <main+0x1136>
   1b652:	59 c5       	rjmp	.+2738   	; 0x1c106 <main+0x1be8>
   1b654:	81 2f       	mov	r24, r17
   1b656:	0e 94 de 49 	call	0x93bc	; 0x93bc <remote_tds_get_last_update(unsigned char)>
   1b65a:	84 3b       	cpi	r24, 0xB4	; 180
   1b65c:	08 f0       	brcs	.+2      	; 0x1b660 <main+0x1142>
   1b65e:	53 c5       	rjmp	.+2726   	; 0x1c106 <main+0x1be8>
   1b660:	81 2f       	mov	r24, r17
   1b662:	0e 94 ee 49 	call	0x93dc	; 0x93dc <remote_tds_get_type(unsigned char)>
   1b666:	81 30       	cpi	r24, 0x01	; 1
   1b668:	09 f0       	breq	.+2      	; 0x1b66c <main+0x114e>
   1b66a:	4d c5       	rjmp	.+2714   	; 0x1c106 <main+0x1be8>
remote_tds_get_data():
   1b66c:	81 2f       	mov	r24, r17
   1b66e:	0e 94 b8 49 	call	0x9370	; 0x9370 <remote_tds_get_data(unsigned char) [clone .part.31]>
   1b672:	82 01       	movw	r16, r4
   1b674:	00 0f       	add	r16, r16
   1b676:	11 1f       	adc	r17, r17
   1b678:	00 0f       	add	r16, r16
   1b67a:	11 1f       	adc	r17, r17
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
  return PID_p[idx];
}

void thermostat_pid_input(uint8_t idx, double value)
{
  PID_Input[idx] = value;
   1b67c:	98 01       	movw	r18, r16
   1b67e:	2e 56       	subi	r18, 0x6E	; 110
   1b680:	34 4f       	sbci	r19, 0xF4	; 244
   1b682:	49 01       	movw	r8, r18
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3366
      {
        thermostat_pid_input(tix, remote_tds_get_data(act) / 1000.0);
   1b684:	bc 01       	movw	r22, r24
   1b686:	99 0f       	add	r25, r25
   1b688:	88 0b       	sbc	r24, r24
   1b68a:	99 0b       	sbc	r25, r25
   1b68c:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
   1b690:	20 e0       	ldi	r18, 0x00	; 0
   1b692:	30 e0       	ldi	r19, 0x00	; 0
   1b694:	4a e7       	ldi	r20, 0x7A	; 122
   1b696:	54 e4       	ldi	r21, 0x44	; 68
   1b698:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
   1b69c:	f4 01       	movw	r30, r8
   1b69e:	60 83       	st	Z, r22
   1b6a0:	71 83       	std	Z+1, r23	; 0x01
   1b6a2:	82 83       	std	Z+2, r24	; 0x02
   1b6a4:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_setpoint():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:75
}

void thermostat_pid_setpoint(uint8_t idx, double value)
{
  PID_Setpoint[idx] = value;
   1b6a6:	98 01       	movw	r18, r16
   1b6a8:	2a 55       	subi	r18, 0x5A	; 90
   1b6aa:	34 4f       	sbci	r19, 0xF4	; 244
   1b6ac:	49 01       	movw	r8, r18
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3367
        thermostat_pid_setpoint(tix, thresh);
   1b6ae:	cd 54       	subi	r28, 0x4D	; 77
   1b6b0:	df 4f       	sbci	r29, 0xFF	; 255
   1b6b2:	48 81       	ld	r20, Y
   1b6b4:	59 81       	ldd	r21, Y+1	; 0x01
   1b6b6:	c3 5b       	subi	r28, 0xB3	; 179
   1b6b8:	d0 40       	sbci	r29, 0x00	; 0
   1b6ba:	ba 01       	movw	r22, r20
   1b6bc:	55 0f       	add	r21, r21
   1b6be:	88 0b       	sbc	r24, r24
   1b6c0:	99 0b       	sbc	r25, r25
   1b6c2:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
   1b6c6:	f4 01       	movw	r30, r8
   1b6c8:	60 83       	st	Z, r22
   1b6ca:	71 83       	std	Z+1, r23	; 0x01
   1b6cc:	82 83       	std	Z+2, r24	; 0x02
   1b6ce:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:80
}

uint8_t thermostat_pid_output(uint8_t idx)
{
  return PID_Output[idx];
   1b6d0:	f8 01       	movw	r30, r16
   1b6d2:	e6 54       	subi	r30, 0x46	; 70
   1b6d4:	f4 4f       	sbci	r31, 0xF4	; 244
   1b6d6:	60 81       	ld	r22, Z
   1b6d8:	71 81       	ldd	r23, Z+1	; 0x01
   1b6da:	82 81       	ldd	r24, Z+2	; 0x02
   1b6dc:	93 81       	ldd	r25, Z+3	; 0x03
   1b6de:	0e 94 a6 f0 	call	0x1e14c	; 0x1e14c <__fixunssfsi>
   1b6e2:	96 2e       	mov	r9, r22
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3400
        else
        blink_led_off(LED_DOWN_I);
      */
    }

    if (tmode == TERM_MODE_OFF)
   1b6e4:	71 10       	cpse	r7, r1
   1b6e6:	f3 c3       	rjmp	.+2022   	; 0x1bece <main+0x19b0>
mqtt_publis_output():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3074
void mqtt_publis_output(uint8_t idx, uint8_t state)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1b6e8:	ff ef       	ldi	r31, 0xFF	; 255
   1b6ea:	6e ef       	ldi	r22, 0xFE	; 254
   1b6ec:	bf 12       	cpse	r11, r31
   1b6ee:	f7 c3       	rjmp	.+2030   	; 0x1bede <main+0x19c0>
   1b6f0:	8f ef       	ldi	r24, 0xFF	; 255
   1b6f2:	48 1a       	sub	r4, r24
   1b6f4:	58 0a       	sbc	r5, r24
   1b6f6:	91 e2       	ldi	r25, 0x21	; 33
   1b6f8:	29 0e       	add	r2, r25
   1b6fa:	31 1c       	adc	r3, r1
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3281
  uint8_t act;
  uint8_t active = 0;
  struct_DDS18s20 tds;


  for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
   1b6fc:	e5 e0       	ldi	r30, 0x05	; 5
   1b6fe:	4e 16       	cp	r4, r30
   1b700:	51 04       	cpc	r5, r1
   1b702:	09 f0       	breq	.+2      	; 0x1b706 <main+0x11e8>
   1b704:	89 ce       	rjmp	.-750    	; 0x1b418 <main+0xefa>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3948
    send_device_status();
    send_mqtt_ring();
    send_mqtt_tds();
    send_mqtt_program();
    thermostat();
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   1b706:	10 e0       	ldi	r17, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3949
      if (thermostat_ring_get_active(idx) != RING_FREE)
   1b708:	81 2f       	mov	r24, r17
   1b70a:	0e 94 76 67 	call	0xceec	; 0xceec <thermostat_ring_get_active(unsigned char)>
   1b70e:	8f 3f       	cpi	r24, 0xFF	; 255
   1b710:	19 f0       	breq	.+6      	; 0x1b718 <main+0x11fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3950
        mqtt_send_pid_variable(idx);
   1b712:	81 2f       	mov	r24, r17
   1b714:	0e 94 75 4b 	call	0x96ea	; 0x96ea <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3948
    send_device_status();
    send_mqtt_ring();
    send_mqtt_tds();
    send_mqtt_program();
    thermostat();
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   1b718:	1f 5f       	subi	r17, 0xFF	; 255
   1b71a:	15 30       	cpi	r17, 0x05	; 5
   1b71c:	a9 f7       	brne	.-22     	; 0x1b708 <main+0x11ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3951
      if (thermostat_ring_get_active(idx) != RING_FREE)
        mqtt_send_pid_variable(idx);
    send_mqtt_remote_tds_status();
   1b71e:	0e 94 49 73 	call	0xe692	; 0xe692 <send_mqtt_remote_tds_status()>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
   1b722:	e0 91 0f 10 	lds	r30, 0x100F	; 0x80100f <lm75_temp+0xb>
   1b726:	f0 91 10 10 	lds	r31, 0x1010	; 0x801010 <lm75_temp+0xc>
   1b72a:	04 80       	ldd	r0, Z+4	; 0x04
   1b72c:	f5 81       	ldd	r31, Z+5	; 0x05
   1b72e:	e0 2d       	mov	r30, r0
   1b730:	80 81       	ld	r24, Z
   1b732:	0e 94 d2 ae 	call	0x15da4	; 0x15da4 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.196]>
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
   1b736:	bc 01       	movw	r22, r24
   1b738:	99 0f       	add	r25, r25
   1b73a:	88 0b       	sbc	r24, r24
   1b73c:	99 0b       	sbc	r25, r25
   1b73e:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
   1b742:	9b 01       	movw	r18, r22
   1b744:	ac 01       	movw	r20, r24
   1b746:	60 91 0b 10 	lds	r22, 0x100B	; 0x80100b <lm75_temp+0x7>
   1b74a:	70 91 0c 10 	lds	r23, 0x100C	; 0x80100c <lm75_temp+0x8>
   1b74e:	80 91 0d 10 	lds	r24, 0x100D	; 0x80100d <lm75_temp+0x9>
   1b752:	90 91 0e 10 	lds	r25, 0x100E	; 0x80100e <lm75_temp+0xa>
   1b756:	0e 94 59 ee 	call	0x1dcb2	; 0x1dcb2 <__mulsf3>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3957
    //send_network_config(&mqtt_client);
    //send_light_controler();
    //send_know_device();
    //send_mesh_status();
    ///
    internal_temp = lm75_temp.readTemperatureC();
   1b75a:	60 93 a6 0c 	sts	0x0CA6, r22	; 0x800ca6 <internal_temp>
   1b75e:	70 93 a7 0c 	sts	0x0CA7, r23	; 0x800ca7 <internal_temp+0x1>
   1b762:	80 93 a8 0c 	sts	0x0CA8, r24	; 0x800ca8 <internal_temp+0x2>
   1b766:	90 93 a9 0c 	sts	0x0CA9, r25	; 0x800ca9 <internal_temp+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3959
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
   1b76a:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
   1b76e:	87 ff       	sbrs	r24, 7
   1b770:	39 c0       	rjmp	.+114    	; 0x1b7e4 <main+0x12c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3961
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
   1b772:	00 91 a1 0c 	lds	r16, 0x0CA1	; 0x800ca1 <light_max>
   1b776:	10 91 a2 0c 	lds	r17, 0x0CA2	; 0x800ca2 <light_max+0x1>
   1b77a:	60 91 a3 0c 	lds	r22, 0x0CA3	; 0x800ca3 <light_curr>
   1b77e:	70 91 a4 0c 	lds	r23, 0x0CA4	; 0x800ca4 <light_curr+0x1>
   1b782:	60 1b       	sub	r22, r16
   1b784:	71 0b       	sbc	r23, r17
   1b786:	90 e0       	ldi	r25, 0x00	; 0
   1b788:	80 e0       	ldi	r24, 0x00	; 0
   1b78a:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
   1b78e:	4b 01       	movw	r8, r22
   1b790:	5c 01       	movw	r10, r24
   1b792:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <light_min>
   1b796:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <light_min+0x1>
   1b79a:	08 1b       	sub	r16, r24
   1b79c:	19 0b       	sbc	r17, r25
   1b79e:	b8 01       	movw	r22, r16
   1b7a0:	90 e0       	ldi	r25, 0x00	; 0
   1b7a2:	80 e0       	ldi	r24, 0x00	; 0
   1b7a4:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
   1b7a8:	9b 01       	movw	r18, r22
   1b7aa:	ac 01       	movw	r20, r24
   1b7ac:	c5 01       	movw	r24, r10
   1b7ae:	b4 01       	movw	r22, r8
   1b7b0:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
   1b7b4:	20 e0       	ldi	r18, 0x00	; 0
   1b7b6:	30 e0       	ldi	r19, 0x00	; 0
   1b7b8:	48 e4       	ldi	r20, 0x48	; 72
   1b7ba:	53 e4       	ldi	r21, 0x43	; 67
   1b7bc:	0e 94 59 ee 	call	0x1dcb2	; 0x1dcb2 <__mulsf3>
   1b7c0:	0e 94 a6 f0 	call	0x1e14c	; 0x1e14c <__fixunssfsi>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3962
      if (brigthness_display_auto_values > 200)
   1b7c4:	69 3c       	cpi	r22, 0xC9	; 201
   1b7c6:	08 f0       	brcs	.+2      	; 0x1b7ca <main+0x12ac>
   1b7c8:	c8 c3       	rjmp	.+1936   	; 0x1bf5a <main+0x1a3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3961
    ///
    internal_temp = lm75_temp.readTemperatureC();
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
   1b7ca:	60 93 a0 0c 	sts	0x0CA0, r22	; 0x800ca0 <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3964
      if (brigthness_display_auto_values > 200)
        brigthness_display_auto_values = 200;
      if (brigthness_display_auto_values < 5)
   1b7ce:	80 91 a0 0c 	lds	r24, 0x0CA0	; 0x800ca0 <brigthness_display_auto_values>
   1b7d2:	85 30       	cpi	r24, 0x05	; 5
   1b7d4:	18 f4       	brcc	.+6      	; 0x1b7dc <main+0x12be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3965
        brigthness_display_auto_values = 5;
   1b7d6:	85 e0       	ldi	r24, 0x05	; 5
   1b7d8:	80 93 a0 0c 	sts	0x0CA0, r24	; 0x800ca0 <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3966
      my_touch.TP_SetBacklight(brigthness_display_auto_values);
   1b7dc:	80 91 a0 0c 	lds	r24, 0x0CA0	; 0x800ca0 <brigthness_display_auto_values>
   1b7e0:	0e 94 f1 ac 	call	0x159e2	; 0x159e2 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3971
    }

  }

  if ((millis() - milis_1s) >= 1000)
   1b7e4:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   1b7e8:	00 91 9c 0c 	lds	r16, 0x0C9C	; 0x800c9c <milis_1s>
   1b7ec:	10 91 9d 0c 	lds	r17, 0x0C9D	; 0x800c9d <milis_1s+0x1>
   1b7f0:	20 91 9e 0c 	lds	r18, 0x0C9E	; 0x800c9e <milis_1s+0x2>
   1b7f4:	30 91 9f 0c 	lds	r19, 0x0C9F	; 0x800c9f <milis_1s+0x3>
   1b7f8:	ab 01       	movw	r20, r22
   1b7fa:	bc 01       	movw	r22, r24
   1b7fc:	40 1b       	sub	r20, r16
   1b7fe:	51 0b       	sbc	r21, r17
   1b800:	62 0b       	sbc	r22, r18
   1b802:	73 0b       	sbc	r23, r19
   1b804:	48 3e       	cpi	r20, 0xE8	; 232
   1b806:	53 40       	sbci	r21, 0x03	; 3
   1b808:	61 05       	cpc	r22, r1
   1b80a:	71 05       	cpc	r23, r1
   1b80c:	08 f4       	brcc	.+2      	; 0x1b810 <main+0x12f2>
   1b80e:	65 c1       	rjmp	.+714    	; 0x1bada <main+0x15bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3973
  {
    milis_1s += 1000;
   1b810:	d9 01       	movw	r26, r18
   1b812:	c8 01       	movw	r24, r16
   1b814:	88 51       	subi	r24, 0x18	; 24
   1b816:	9c 4f       	sbci	r25, 0xFC	; 252
   1b818:	af 4f       	sbci	r26, 0xFF	; 255
   1b81a:	bf 4f       	sbci	r27, 0xFF	; 255
   1b81c:	80 93 9c 0c 	sts	0x0C9C, r24	; 0x800c9c <milis_1s>
   1b820:	90 93 9d 0c 	sts	0x0C9D, r25	; 0x800c9d <milis_1s+0x1>
   1b824:	a0 93 9e 0c 	sts	0x0C9E, r26	; 0x800c9e <milis_1s+0x2>
   1b828:	b0 93 9f 0c 	sts	0x0C9F, r27	; 0x800c9f <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3974
    uptime++;
   1b82c:	80 91 98 0c 	lds	r24, 0x0C98	; 0x800c98 <uptime>
   1b830:	90 91 99 0c 	lds	r25, 0x0C99	; 0x800c99 <uptime+0x1>
   1b834:	a0 91 9a 0c 	lds	r26, 0x0C9A	; 0x800c9a <uptime+0x2>
   1b838:	b0 91 9b 0c 	lds	r27, 0x0C9B	; 0x800c9b <uptime+0x3>
   1b83c:	01 96       	adiw	r24, 0x01	; 1
   1b83e:	a1 1d       	adc	r26, r1
   1b840:	b1 1d       	adc	r27, r1
   1b842:	80 93 98 0c 	sts	0x0C98, r24	; 0x800c98 <uptime>
   1b846:	90 93 99 0c 	sts	0x0C99, r25	; 0x800c99 <uptime+0x1>
   1b84a:	a0 93 9a 0c 	sts	0x0C9A, r26	; 0x800c9a <uptime+0x2>
   1b84e:	b0 93 9b 0c 	sts	0x0C9B, r27	; 0x800c9b <uptime+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3975
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0)
   1b852:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
   1b856:	86 ff       	sbrs	r24, 6
   1b858:	0a c0       	rjmp	.+20     	; 0x1b86e <main+0x1350>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3977
    {
      if (display_auto_shutdown > display_auto_shutdown_now)
   1b85a:	80 91 96 0c 	lds	r24, 0x0C96	; 0x800c96 <display_auto_shutdown_now>
   1b85e:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <display_auto_shutdown>
   1b862:	89 17       	cp	r24, r25
   1b864:	08 f0       	brcs	.+2      	; 0x1b868 <main+0x134a>
   1b866:	7d c3       	rjmp	.+1786   	; 0x1bf62 <main+0x1a44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978
        display_auto_shutdown_now++;
   1b868:	8f 5f       	subi	r24, 0xFF	; 255
   1b86a:	80 93 96 0c 	sts	0x0C96, r24	; 0x800c96 <display_auto_shutdown_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3983
      else
        my_touch.TP_SetOnOff(LED_OFF);
    }

    mereni_hwwire(uptime);
   1b86e:	80 90 98 0c 	lds	r8, 0x0C98	; 0x800c98 <uptime>
   1b872:	90 90 99 0c 	lds	r9, 0x0C99	; 0x800c99 <uptime+0x1>
   1b876:	be ec       	ldi	r27, 0xCE	; 206
   1b878:	ab 2e       	mov	r10, r27
   1b87a:	bb e0       	ldi	r27, 0x0B	; 11
   1b87c:	bb 2e       	mov	r11, r27
main():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   1b87e:	71 2c       	mov	r7, r1
mereni_hwwire():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   1b880:	99 24       	eor	r9, r9
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   1b882:	1e e1       	ldi	r17, 0x1E	; 30
   1b884:	41 2e       	mov	r4, r17
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   1b886:	be 01       	movw	r22, r28
   1b888:	6f 5f       	subi	r22, 0xFF	; 255
   1b88a:	7f 4f       	sbci	r23, 0xFF	; 255
   1b88c:	87 2d       	mov	r24, r7
   1b88e:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   1b892:	19 81       	ldd	r17, Y+1	; 0x01
   1b894:	11 30       	cpi	r17, 0x01	; 1
   1b896:	09 f0       	breq	.+2      	; 0x1b89a <main+0x137c>
   1b898:	e8 c0       	rjmp	.+464    	; 0x1ba6a <main+0x154c>
   1b89a:	f5 01       	movw	r30, r10
   1b89c:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b89e:	9d 89       	ldd	r25, Y+21	; 0x15
   1b8a0:	94 01       	movw	r18, r8
   1b8a2:	28 1b       	sub	r18, r24
   1b8a4:	31 09       	sbc	r19, r1
   1b8a6:	92 17       	cp	r25, r18
   1b8a8:	13 06       	cpc	r1, r19
   1b8aa:	11 f0       	breq	.+4      	; 0x1b8b0 <main+0x1392>
   1b8ac:	08 f0       	brcs	.+2      	; 0x1b8b0 <main+0x1392>
   1b8ae:	dd c0       	rjmp	.+442    	; 0x1ba6a <main+0x154c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:275
    {
      status_tds18s20[w].period_now += tds.period;
   1b8b0:	89 0f       	add	r24, r25
   1b8b2:	84 8f       	std	Z+28, r24	; 0x1c
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:276
      if (status_tds18s20[w].wait == false)
   1b8b4:	85 8d       	ldd	r24, Z+29	; 0x1d
   1b8b6:	81 11       	cpse	r24, r1
   1b8b8:	0f c0       	rjmp	.+30     	; 0x1b8d8 <main+0x13ba>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:278
      {
        owReset(tds.assigned_ds2482);
   1b8ba:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b8bc:	0e 94 b6 5d 	call	0xbb6c	; 0xbb6c <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:279
        owMatchRom(tds.assigned_ds2482, tds.rom);
   1b8c0:	be 01       	movw	r22, r28
   1b8c2:	6e 5f       	subi	r22, 0xFE	; 254
   1b8c4:	7f 4f       	sbci	r23, 0xFF	; 255
   1b8c6:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b8c8:	0e 94 97 5d 	call	0xbb2e	; 0xbb2e <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:280
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   1b8cc:	64 e4       	ldi	r22, 0x44	; 68
   1b8ce:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b8d0:	0e 94 5e 5d 	call	0xbabc	; 0xbabc <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:281
        status_tds18s20[w].wait = true;
   1b8d4:	f5 01       	movw	r30, r10
   1b8d6:	15 8f       	std	Z+29, r17	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:283
      }
      if (status_tds18s20[w].wait == true)
   1b8d8:	f5 01       	movw	r30, r10
   1b8da:	55 8c       	ldd	r5, Z+29	; 0x1d
   1b8dc:	f1 e0       	ldi	r31, 0x01	; 1
   1b8de:	5f 12       	cpse	r5, r31
   1b8e0:	c4 c0       	rjmp	.+392    	; 0x1ba6a <main+0x154c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:285
      {
        owReset(tds.assigned_ds2482);
   1b8e2:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b8e4:	0e 94 b6 5d 	call	0xbb6c	; 0xbb6c <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:286
        owMatchRom(tds.assigned_ds2482, tds.rom);
   1b8e8:	be 01       	movw	r22, r28
   1b8ea:	6e 5f       	subi	r22, 0xFE	; 254
   1b8ec:	7f 4f       	sbci	r23, 0xFF	; 255
   1b8ee:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b8f0:	0e 94 97 5d 	call	0xbb2e	; 0xbb2e <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:287
        owReadByte(tds.assigned_ds2482, &t);
   1b8f4:	be 01       	movw	r22, r28
   1b8f6:	6f 57       	subi	r22, 0x7F	; 127
   1b8f8:	7f 4f       	sbci	r23, 0xFF	; 255
   1b8fa:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b8fc:	0e 94 02 5d 	call	0xba04	; 0xba04 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:288
        if (t != 0) 
   1b900:	cf 57       	subi	r28, 0x7F	; 127
   1b902:	df 4f       	sbci	r29, 0xFF	; 255
   1b904:	88 81       	ld	r24, Y
   1b906:	c1 58       	subi	r28, 0x81	; 129
   1b908:	d0 40       	sbci	r29, 0x00	; 0
   1b90a:	88 23       	and	r24, r24
   1b90c:	09 f4       	brne	.+2      	; 0x1b910 <main+0x13f2>
   1b90e:	ad c0       	rjmp	.+346    	; 0x1ba6a <main+0x154c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:290
        {
          status_tds18s20[w].wait = false;
   1b910:	f5 01       	movw	r30, r10
   1b912:	15 8e       	std	Z+29, r1	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:291
          status = owReset(tds.assigned_ds2482);
   1b914:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b916:	0e 94 b6 5d 	call	0xbb6c	; 0xbb6c <ds2482owReset(unsigned char)>
   1b91a:	18 2f       	mov	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:292
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   1b91c:	be 01       	movw	r22, r28
   1b91e:	6e 5f       	subi	r22, 0xFE	; 254
   1b920:	7f 4f       	sbci	r23, 0xFF	; 255
   1b922:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b924:	0e 94 97 5d 	call	0xbb2e	; 0xbb2e <owMatchRom(unsigned char, unsigned char*)>
   1b928:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:293
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   1b92a:	6e eb       	ldi	r22, 0xBE	; 190
   1b92c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b92e:	0e 94 5e 5d 	call	0xbabc	; 0xbabc <ds2482owWriteByte(unsigned char, unsigned char)>
   1b932:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:294
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   1b934:	be 01       	movw	r22, r28
   1b936:	6f 5b       	subi	r22, 0xBF	; 191
   1b938:	7f 4f       	sbci	r23, 0xFF	; 255
   1b93a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b93c:	0e 94 02 5d 	call	0xba04	; 0xba04 <ds2482owReadByte(unsigned char, unsigned char*)>
   1b940:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:295
          status_tds18s20[w].tempL = e;
   1b942:	22 96       	adiw	r28, 0x02	; 2
   1b944:	6f ac       	ldd	r6, Y+63	; 0x3f
   1b946:	22 97       	sbiw	r28, 0x02	; 2
   1b948:	f5 01       	movw	r30, r10
   1b94a:	60 82       	st	Z, r6
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:296
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   1b94c:	be 01       	movw	r22, r28
   1b94e:	6f 5b       	subi	r22, 0xBF	; 191
   1b950:	7f 4f       	sbci	r23, 0xFF	; 255
   1b952:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b954:	0e 94 02 5d 	call	0xba04	; 0xba04 <ds2482owReadByte(unsigned char, unsigned char*)>
   1b958:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:297
          status_tds18s20[w].tempH = e;
   1b95a:	22 96       	adiw	r28, 0x02	; 2
   1b95c:	0f ad       	ldd	r16, Y+63	; 0x3f
   1b95e:	22 97       	sbiw	r28, 0x02	; 2
   1b960:	f5 01       	movw	r30, r10
   1b962:	01 83       	std	Z+1, r16	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   1b964:	be 01       	movw	r22, r28
   1b966:	6f 5b       	subi	r22, 0xBF	; 191
   1b968:	7f 4f       	sbci	r23, 0xFF	; 255
   1b96a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b96c:	0e 94 02 5d 	call	0xba04	; 0xba04 <ds2482owReadByte(unsigned char, unsigned char*)>
   1b970:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   1b972:	be 01       	movw	r22, r28
   1b974:	6f 5b       	subi	r22, 0xBF	; 191
   1b976:	7f 4f       	sbci	r23, 0xFF	; 255
   1b978:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b97a:	0e 94 02 5d 	call	0xba04	; 0xba04 <ds2482owReadByte(unsigned char, unsigned char*)>
   1b97e:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   1b980:	be 01       	movw	r22, r28
   1b982:	6f 5b       	subi	r22, 0xBF	; 191
   1b984:	7f 4f       	sbci	r23, 0xFF	; 255
   1b986:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b988:	0e 94 02 5d 	call	0xba04	; 0xba04 <ds2482owReadByte(unsigned char, unsigned char*)>
   1b98c:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   1b98e:	be 01       	movw	r22, r28
   1b990:	6f 5b       	subi	r22, 0xBF	; 191
   1b992:	7f 4f       	sbci	r23, 0xFF	; 255
   1b994:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b996:	0e 94 02 5d 	call	0xba04	; 0xba04 <ds2482owReadByte(unsigned char, unsigned char*)>
   1b99a:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:302
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   1b99c:	be 01       	movw	r22, r28
   1b99e:	6f 5b       	subi	r22, 0xBF	; 191
   1b9a0:	7f 4f       	sbci	r23, 0xFF	; 255
   1b9a2:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b9a4:	0e 94 02 5d 	call	0xba04	; 0xba04 <ds2482owReadByte(unsigned char, unsigned char*)>
   1b9a8:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:303
          status_tds18s20[w].CR = e; //count remain
   1b9aa:	22 96       	adiw	r28, 0x02	; 2
   1b9ac:	8f ad       	ldd	r24, Y+63	; 0x3f
   1b9ae:	22 97       	sbiw	r28, 0x02	; 2
   1b9b0:	f5 01       	movw	r30, r10
   1b9b2:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:304
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   1b9b4:	be 01       	movw	r22, r28
   1b9b6:	6f 5b       	subi	r22, 0xBF	; 191
   1b9b8:	7f 4f       	sbci	r23, 0xFF	; 255
   1b9ba:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b9bc:	0e 94 02 5d 	call	0xba04	; 0xba04 <ds2482owReadByte(unsigned char, unsigned char*)>
   1b9c0:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:305
          status_tds18s20[w].CP = e; // count per
   1b9c2:	22 96       	adiw	r28, 0x02	; 2
   1b9c4:	3f ac       	ldd	r3, Y+63	; 0x3f
   1b9c6:	22 97       	sbiw	r28, 0x02	; 2
   1b9c8:	f5 01       	movw	r30, r10
   1b9ca:	33 82       	std	Z+3, r3	; 0x03
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   1b9cc:	be 01       	movw	r22, r28
   1b9ce:	6f 5b       	subi	r22, 0xBF	; 191
   1b9d0:	7f 4f       	sbci	r23, 0xFF	; 255
   1b9d2:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b9d4:	0e 94 02 5d 	call	0xba04	; 0xba04 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
   1b9d8:	22 96       	adiw	r28, 0x02	; 2
   1b9da:	9f ad       	ldd	r25, Y+63	; 0x3f
   1b9dc:	22 97       	sbiw	r28, 0x02	; 2
   1b9de:	f5 01       	movw	r30, r10
   1b9e0:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   1b9e2:	81 0f       	add	r24, r17
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:308
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   1b9e4:	09 f0       	breq	.+2      	; 0x1b9e8 <main+0x14ca>
   1b9e6:	c1 c2       	rjmp	.+1410   	; 0x1bf6a <main+0x1a4c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   1b9e8:	63 2d       	mov	r22, r3
   1b9ea:	70 e0       	ldi	r23, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:310
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   1b9ec:	10 e0       	ldi	r17, 0x00	; 0
   1b9ee:	10 2f       	mov	r17, r16
   1b9f0:	00 27       	eor	r16, r16
   1b9f2:	11 0f       	add	r17, r17
   1b9f4:	11 0f       	add	r17, r17
   1b9f6:	11 0f       	add	r17, r17
   1b9f8:	f8 e0       	ldi	r31, 0x08	; 8
   1b9fa:	6f 9e       	mul	r6, r31
   1b9fc:	c0 01       	movw	r24, r0
   1b9fe:	11 24       	eor	r1, r1
   1ba00:	08 2b       	or	r16, r24
   1ba02:	19 2b       	or	r17, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   1ba04:	f3 e0       	ldi	r31, 0x03	; 3
   1ba06:	00 0f       	add	r16, r16
   1ba08:	11 1f       	adc	r17, r17
   1ba0a:	fa 95       	dec	r31
   1ba0c:	e1 f7       	brne	.-8      	; 0x1ba06 <main+0x14e8>
   1ba0e:	00 78       	andi	r16, 0x80	; 128
   1ba10:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ba12:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ba14:	40 97       	sbiw	r24, 0x10	; 16
   1ba16:	08 0f       	add	r16, r24
   1ba18:	19 1f       	adc	r17, r25
   1ba1a:	cf 57       	subi	r28, 0x7F	; 127
   1ba1c:	df 4f       	sbci	r29, 0xFF	; 255
   1ba1e:	e8 81       	ld	r30, Y
   1ba20:	c1 58       	subi	r28, 0x81	; 129
   1ba22:	d0 40       	sbci	r29, 0x00	; 0
   1ba24:	4e 9e       	mul	r4, r30
   1ba26:	f0 01       	movw	r30, r0
   1ba28:	11 24       	eor	r1, r1
   1ba2a:	e2 53       	subi	r30, 0x32	; 50
   1ba2c:	f4 4f       	sbci	r31, 0xF4	; 244
   1ba2e:	82 81       	ldd	r24, Z+2	; 0x02
   1ba30:	9b 01       	movw	r18, r22
   1ba32:	28 1b       	sub	r18, r24
   1ba34:	31 09       	sbc	r19, r1
   1ba36:	c9 01       	movw	r24, r18
   1ba38:	96 95       	lsr	r25
   1ba3a:	98 2f       	mov	r25, r24
   1ba3c:	88 27       	eor	r24, r24
   1ba3e:	97 95       	ror	r25
   1ba40:	87 95       	ror	r24
   1ba42:	0e 94 51 ef 	call	0x1dea2	; 0x1dea2 <__divmodhi4>
   1ba46:	06 0f       	add	r16, r22
   1ba48:	17 1f       	adc	r17, r23
   1ba4a:	f5 01       	movw	r30, r10
   1ba4c:	16 83       	std	Z+6, r17	; 0x06
   1ba4e:	05 83       	std	Z+5, r16	; 0x05
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:312
            status_tds18s20[w].online = True;
   1ba50:	53 8e       	std	Z+27, r5	; 0x1b
   1ba52:	89 e0       	ldi	r24, 0x09	; 9
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:313
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   1ba54:	27 89       	ldd	r18, Z+23	; 0x17
   1ba56:	30 8d       	ldd	r19, Z+24	; 0x18
   1ba58:	32 8f       	std	Z+26, r19	; 0x1a
   1ba5a:	21 8f       	std	Z+25, r18	; 0x19
   1ba5c:	81 50       	subi	r24, 0x01	; 1
   1ba5e:	32 97       	sbiw	r30, 0x02	; 2
   1ba60:	81 11       	cpse	r24, r1
   1ba62:	f8 cf       	rjmp	.-16     	; 0x1ba54 <main+0x1536>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   1ba64:	f5 01       	movw	r30, r10
   1ba66:	10 87       	std	Z+8, r17	; 0x08
   1ba68:	07 83       	std	Z+7, r16	; 0x07
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   1ba6a:	73 94       	inc	r7
   1ba6c:	fe e1       	ldi	r31, 0x1E	; 30
   1ba6e:	af 0e       	add	r10, r31
   1ba70:	b1 1c       	adc	r11, r1
   1ba72:	26 e0       	ldi	r18, 0x06	; 6
   1ba74:	72 12       	cpse	r7, r18
   1ba76:	07 cf       	rjmp	.-498    	; 0x1b886 <main+0x1368>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2030
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1ba78:	10 e0       	ldi	r17, 0x00	; 0
tds_extended_memory_store():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2031
    if (get_tds18s20(id, &tds) == 1)
   1ba7a:	be 01       	movw	r22, r28
   1ba7c:	6f 5f       	subi	r22, 0xFF	; 255
   1ba7e:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba80:	81 2f       	mov	r24, r17
   1ba82:	0e 94 8f 6a 	call	0xd51e	; 0xd51e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2030
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1ba86:	1f 5f       	subi	r17, 0xFF	; 255
   1ba88:	16 30       	cpi	r17, 0x06	; 6
   1ba8a:	b9 f7       	brne	.-18     	; 0x1ba7a <main+0x155c>
   1ba8c:	56 e6       	ldi	r21, 0x66	; 102
   1ba8e:	85 2e       	mov	r8, r21
   1ba90:	91 2c       	mov	r9, r1
   1ba92:	a1 2c       	mov	r10, r1
   1ba94:	b1 2c       	mov	r11, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1ba96:	10 e0       	ldi	r17, 0x00	; 0
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1978
  {
    remote_tds_get_active(idx, &active);
   1ba98:	be 01       	movw	r22, r28
   1ba9a:	6f 5f       	subi	r22, 0xFF	; 255
   1ba9c:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba9e:	81 2f       	mov	r24, r17
   1baa0:	0e 94 2f 6f 	call	0xde5e	; 0xde5e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1979
    if (active == 1)
   1baa4:	89 81       	ldd	r24, Y+1	; 0x01
   1baa6:	81 30       	cpi	r24, 0x01	; 1
   1baa8:	61 f4       	brne	.+24     	; 0x1bac2 <main+0x15a4>
remote_tds_inc_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1966
uint8_t remote_tds_inc_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
   1baaa:	c5 01       	movw	r24, r10
   1baac:	b4 01       	movw	r22, r8
   1baae:	0e 94 2c ae 	call	0x15c58	; 0x15c58 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1967
    if (last < 250)
   1bab2:	8a 3f       	cpi	r24, 0xFA	; 250
   1bab4:	08 f4       	brcc	.+2      	; 0x1bab8 <main+0x159a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1968
      last++;
   1bab6:	8f 5f       	subi	r24, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1969
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), last);
   1bab8:	48 2f       	mov	r20, r24
   1baba:	c5 01       	movw	r24, r10
   1babc:	b4 01       	movw	r22, r8
   1babe:	0e 94 f0 ad 	call	0x15be0	; 0x15be0 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1bac2:	1f 5f       	subi	r17, 0xFF	; 255
   1bac4:	34 e0       	ldi	r19, 0x04	; 4
   1bac6:	83 0e       	add	r8, r19
   1bac8:	91 1c       	adc	r9, r1
   1baca:	a1 1c       	adc	r10, r1
   1bacc:	b1 1c       	adc	r11, r1
   1bace:	4e e8       	ldi	r20, 0x8E	; 142
   1bad0:	84 16       	cp	r8, r20
   1bad2:	91 04       	cpc	r9, r1
   1bad4:	a1 04       	cpc	r10, r1
   1bad6:	b1 04       	cpc	r11, r1
   1bad8:	f9 f6       	brne	.-66     	; 0x1ba98 <main+0x157a>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3989
    tds_extended_memory_store();
    remote_tds_update_last_update();
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) >= 500)
   1bada:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   1bade:	00 91 92 0c 	lds	r16, 0x0C92	; 0x800c92 <milis_05s>
   1bae2:	10 91 93 0c 	lds	r17, 0x0C93	; 0x800c93 <milis_05s+0x1>
   1bae6:	20 91 94 0c 	lds	r18, 0x0C94	; 0x800c94 <milis_05s+0x2>
   1baea:	30 91 95 0c 	lds	r19, 0x0C95	; 0x800c95 <milis_05s+0x3>
   1baee:	ab 01       	movw	r20, r22
   1baf0:	bc 01       	movw	r22, r24
   1baf2:	40 1b       	sub	r20, r16
   1baf4:	51 0b       	sbc	r21, r17
   1baf6:	62 0b       	sbc	r22, r18
   1baf8:	73 0b       	sbc	r23, r19
   1bafa:	44 3f       	cpi	r20, 0xF4	; 244
   1bafc:	51 40       	sbci	r21, 0x01	; 1
   1bafe:	61 05       	cpc	r22, r1
   1bb00:	71 05       	cpc	r23, r1
   1bb02:	08 f4       	brcc	.+2      	; 0x1bb06 <main+0x15e8>
   1bb04:	47 c0       	rjmp	.+142    	; 0x1bb94 <main+0x1676>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3991
  {
    milis_05s += 500;
   1bb06:	d9 01       	movw	r26, r18
   1bb08:	c8 01       	movw	r24, r16
   1bb0a:	8c 50       	subi	r24, 0x0C	; 12
   1bb0c:	9e 4f       	sbci	r25, 0xFE	; 254
   1bb0e:	af 4f       	sbci	r26, 0xFF	; 255
   1bb10:	bf 4f       	sbci	r27, 0xFF	; 255
   1bb12:	80 93 92 0c 	sts	0x0C92, r24	; 0x800c92 <milis_05s>
   1bb16:	90 93 93 0c 	sts	0x0C93, r25	; 0x800c93 <milis_05s+0x1>
   1bb1a:	a0 93 94 0c 	sts	0x0C94, r26	; 0x800c94 <milis_05s+0x2>
   1bb1e:	b0 93 95 0c 	sts	0x0C95, r27	; 0x800c95 <milis_05s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3992
    now = rtc.now();
   1bb22:	ce 01       	movw	r24, r28
   1bb24:	01 96       	adiw	r24, 0x01	; 1
   1bb26:	0e 94 ec 5d 	call	0xbbd8	; 0xbbd8 <RTC_DS1307::now()>
   1bb2a:	87 e0       	ldi	r24, 0x07	; 7
   1bb2c:	fe 01       	movw	r30, r28
   1bb2e:	31 96       	adiw	r30, 0x01	; 1
   1bb30:	a4 e7       	ldi	r26, 0x74	; 116
   1bb32:	b2 e1       	ldi	r27, 0x12	; 18
   1bb34:	01 90       	ld	r0, Z+
   1bb36:	0d 92       	st	X+, r0
   1bb38:	8a 95       	dec	r24
   1bb3a:	e1 f7       	brne	.-8      	; 0x1bb34 <main+0x1616>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3160
}
///
/// selftest - pusteni skupiny vlastnich selftestu
void selftest(void)
{
  if (!rtc.isrunning())
   1bb3c:	0e 94 7b b3 	call	0x166f6	; 0x166f6 <RTC_DS1307::isrunning() [clone .constprop.149]>
   1bb40:	90 91 82 0c 	lds	r25, 0x0C82	; 0x800c82 <selftest_data>
   1bb44:	81 11       	cpse	r24, r1
   1bb46:	13 c2       	rjmp	.+1062   	; 0x1bf6e <main+0x1a50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3161
    sbi(selftest_data, SELFTEST_ERR_RTC);
   1bb48:	91 60       	ori	r25, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3163
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   1bb4a:	90 93 82 0c 	sts	0x0C82, r25	; 0x800c82 <selftest_data>
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4691
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
   1bb4e:	19 82       	std	Y+1, r1	; 0x01
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4690
//////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
   1bb50:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4692
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1bb52:	10 e0       	ldi	r17, 0x00	; 0
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4694
  {
    remote_tds_get_active(idx, &active);
   1bb54:	be 01       	movw	r22, r28
   1bb56:	6f 5f       	subi	r22, 0xFF	; 255
   1bb58:	7f 4f       	sbci	r23, 0xFF	; 255
   1bb5a:	81 2f       	mov	r24, r17
   1bb5c:	0e 94 2f 6f 	call	0xde5e	; 0xde5e <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4695
    if (active == 1) cnt++;
   1bb60:	89 81       	ldd	r24, Y+1	; 0x01
   1bb62:	81 30       	cpi	r24, 0x01	; 1
   1bb64:	09 f4       	brne	.+2      	; 0x1bb68 <main+0x164a>
   1bb66:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4692
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1bb68:	1f 5f       	subi	r17, 0xFF	; 255
   1bb6a:	1a 30       	cpi	r17, 0x0A	; 10
   1bb6c:	99 f7       	brne	.-26     	; 0x1bb54 <main+0x1636>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3996
    milis_05s += 500;
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;

    use_rtds = count_use_rtds();
   1bb6e:	00 93 91 0c 	sts	0x0C91, r16	; 0x800c91 <use_rtds>
   1bb72:	08 ec       	ldi	r16, 0xC8	; 200
   1bb74:	10 e0       	ldi	r17, 0x00	; 0
main():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:19
struct_ds2482 ds2482_address[DS2482_COUNT];

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
   1bb76:	b1 2c       	mov	r11, r1
count_use_tds():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:21
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if ( EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used) == 1) cnt++;
   1bb78:	c8 01       	movw	r24, r16
   1bb7a:	0e 94 6b 66 	call	0xccd6	; 0xccd6 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1bb7e:	81 30       	cpi	r24, 0x01	; 1
   1bb80:	09 f4       	brne	.+2      	; 0x1bb84 <main+0x1666>
   1bb82:	b3 94       	inc	r11
   1bb84:	0a 5e       	subi	r16, 0xEA	; 234
   1bb86:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:20

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   1bb88:	0c 34       	cpi	r16, 0x4C	; 76
   1bb8a:	91 e0       	ldi	r25, 0x01	; 1
   1bb8c:	19 07       	cpc	r17, r25
   1bb8e:	a1 f7       	brne	.-24     	; 0x1bb78 <main+0x165a>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3997
    use_tds = count_use_tds();
   1bb90:	b0 92 90 0c 	sts	0x0C90, r11	; 0x800c90 <use_tds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4003
  }



  /// kazdych 100ms
  if ((millis() - milis_005s) >= 50 )
   1bb94:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   1bb98:	00 91 8c 0c 	lds	r16, 0x0C8C	; 0x800c8c <milis_005s>
   1bb9c:	10 91 8d 0c 	lds	r17, 0x0C8D	; 0x800c8d <milis_005s+0x1>
   1bba0:	20 91 8e 0c 	lds	r18, 0x0C8E	; 0x800c8e <milis_005s+0x2>
   1bba4:	30 91 8f 0c 	lds	r19, 0x0C8F	; 0x800c8f <milis_005s+0x3>
   1bba8:	ab 01       	movw	r20, r22
   1bbaa:	bc 01       	movw	r22, r24
   1bbac:	40 1b       	sub	r20, r16
   1bbae:	51 0b       	sbc	r21, r17
   1bbb0:	62 0b       	sbc	r22, r18
   1bbb2:	73 0b       	sbc	r23, r19
   1bbb4:	42 33       	cpi	r20, 0x32	; 50
   1bbb6:	51 05       	cpc	r21, r1
   1bbb8:	61 05       	cpc	r22, r1
   1bbba:	71 05       	cpc	r23, r1
   1bbbc:	a8 f1       	brcs	.+106    	; 0x1bc28 <main+0x170a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4005
  {
    milis_005s += 50;
   1bbbe:	d9 01       	movw	r26, r18
   1bbc0:	c8 01       	movw	r24, r16
   1bbc2:	c2 96       	adiw	r24, 0x32	; 50
   1bbc4:	a1 1d       	adc	r26, r1
   1bbc6:	b1 1d       	adc	r27, r1
   1bbc8:	80 93 8c 0c 	sts	0x0C8C, r24	; 0x800c8c <milis_005s>
   1bbcc:	90 93 8d 0c 	sts	0x0C8D, r25	; 0x800c8d <milis_005s+0x1>
   1bbd0:	a0 93 8e 0c 	sts	0x0C8E, r26	; 0x800c8e <milis_005s+0x2>
   1bbd4:	b0 93 8f 0c 	sts	0x0C8F, r27	; 0x800c8f <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4008

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   1bbd8:	80 91 8b 0c 	lds	r24, 0x0C8B	; 0x800c8b <a2d_run_now>
   1bbdc:	81 30       	cpi	r24, 0x01	; 1
   1bbde:	21 f5       	brne	.+72     	; 0x1bc28 <main+0x170a>
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   1bbe0:	30 91 83 0c 	lds	r19, 0x0C83	; 0x800c83 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1bbe4:	20 91 84 0c 	lds	r18, 0x0C84	; 0x800c84 <a2d_index>
   1bbe8:	90 e0       	ldi	r25, 0x00	; 0
   1bbea:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   1bbec:	61 e0       	ldi	r22, 0x01	; 1
   1bbee:	70 e0       	ldi	r23, 0x00	; 0
   1bbf0:	ab 01       	movw	r20, r22
   1bbf2:	08 2e       	mov	r0, r24
   1bbf4:	01 c0       	rjmp	.+2      	; 0x1bbf8 <main+0x16da>
   1bbf6:	44 0f       	add	r20, r20
   1bbf8:	0a 94       	dec	r0
   1bbfa:	ea f7       	brpl	.-6      	; 0x1bbf6 <main+0x16d8>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   1bbfc:	e3 2f       	mov	r30, r19
   1bbfe:	e4 23       	and	r30, r20
   1bc00:	09 f4       	brne	.+2      	; 0x1bc04 <main+0x16e6>
   1bc02:	b7 c1       	rjmp	.+878    	; 0x1bf72 <main+0x1a54>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1bc04:	e2 2f       	mov	r30, r18
   1bc06:	e4 23       	and	r30, r20
   1bc08:	09 f0       	breq	.+2      	; 0x1bc0c <main+0x16ee>
   1bc0a:	b3 c1       	rjmp	.+870    	; 0x1bf72 <main+0x1a54>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   1bc0c:	24 2b       	or	r18, r20
   1bc0e:	20 93 84 0c 	sts	0x0C84, r18	; 0x800c84 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   1bc12:	0e 94 b1 3e 	call	0x7d62	; 0x7d62 <a2d_start_first(unsigned char)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4011
    {
      a2d_start_process();
      a2d_run_now = 0;
   1bc16:	10 92 8b 0c 	sts	0x0C8B, r1	; 0x800c8b <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4012
      if (a2d_done() == 0) a2d_run_now = 1;
   1bc1a:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <a2d_index>
   1bc1e:	81 11       	cpse	r24, r1
   1bc20:	03 c0       	rjmp	.+6      	; 0x1bc28 <main+0x170a>
   1bc22:	81 e0       	ldi	r24, 0x01	; 1
   1bc24:	80 93 8b 0c 	sts	0x0C8B, r24	; 0x800c8b <a2d_run_now>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:255
  	}        
} 

uint8_t LCDWIKI_TOUCH::TP_Scan(uint8_t mode)
{
	if(TIRQ_STATE==0) 
   1bc28:	e0 91 af 0f 	lds	r30, 0x0FAF	; 0x800faf <my_touch+0x19>
   1bc2c:	f0 91 b0 0f 	lds	r31, 0x0FB0	; 0x800fb0 <my_touch+0x1a>
   1bc30:	80 81       	ld	r24, Z
   1bc32:	90 91 b7 0f 	lds	r25, 0x0FB7	; 0x800fb7 <my_touch+0x21>
   1bc36:	89 23       	and	r24, r25
   1bc38:	09 f0       	breq	.+2      	; 0x1bc3c <main+0x171e>
   1bc3a:	1e c2       	rjmp	.+1084   	; 0x1c078 <main+0x1b5a>
TP_Read_Coordinate():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:216
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
   1bc3c:	80 ed       	ldi	r24, 0xD0	; 208
   1bc3e:	0e 94 d0 cd 	call	0x19ba0	; 0x19ba0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>
   1bc42:	3c 01       	movw	r6, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:217
        ytemp=TP_Read_XY(CMD_RDY);
   1bc44:	80 e9       	ldi	r24, 0x90	; 144
   1bc46:	0e 94 d0 cd 	call	0x19ba0	; 0x19ba0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>
   1bc4a:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:216
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
   1bc4c:	80 ed       	ldi	r24, 0xD0	; 208
   1bc4e:	0e 94 d0 cd 	call	0x19ba0	; 0x19ba0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>
   1bc52:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:217
        ytemp=TP_Read_XY(CMD_RDY);
   1bc54:	80 e9       	ldi	r24, 0x90	; 144
   1bc56:	0e 94 d0 cd 	call	0x19ba0	; 0x19ba0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>
   1bc5a:	4c 01       	movw	r8, r24
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:240
	flag=TP_Read_Coordinate(&x2,&y2);
    if(flag==0)
    {
		return 0;   
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
   1bc5c:	60 16       	cp	r6, r16
   1bc5e:	71 06       	cpc	r7, r17
   1bc60:	48 f0       	brcs	.+18     	; 0x1bc74 <main+0x1756>
   1bc62:	c8 01       	movw	r24, r16
   1bc64:	c2 96       	adiw	r24, 0x32	; 50
   1bc66:	68 16       	cp	r6, r24
   1bc68:	79 06       	cpc	r7, r25
   1bc6a:	50 f0       	brcs	.+20     	; 0x1bc80 <main+0x1762>
   1bc6c:	06 15       	cp	r16, r6
   1bc6e:	17 05       	cpc	r17, r7
   1bc70:	08 f4       	brcc	.+2      	; 0x1bc74 <main+0x1756>
   1bc72:	51 c0       	rjmp	.+162    	; 0x1bd16 <main+0x17f8>
   1bc74:	c3 01       	movw	r24, r6
   1bc76:	c2 96       	adiw	r24, 0x32	; 50
   1bc78:	08 17       	cp	r16, r24
   1bc7a:	19 07       	cpc	r17, r25
   1bc7c:	08 f0       	brcs	.+2      	; 0x1bc80 <main+0x1762>
   1bc7e:	4b c0       	rjmp	.+150    	; 0x1bd16 <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:241
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
   1bc80:	a8 14       	cp	r10, r8
   1bc82:	b9 04       	cpc	r11, r9
   1bc84:	48 f0       	brcs	.+18     	; 0x1bc98 <main+0x177a>
   1bc86:	c4 01       	movw	r24, r8
   1bc88:	c2 96       	adiw	r24, 0x32	; 50
   1bc8a:	a8 16       	cp	r10, r24
   1bc8c:	b9 06       	cpc	r11, r25
   1bc8e:	48 f0       	brcs	.+18     	; 0x1bca2 <main+0x1784>
   1bc90:	8a 14       	cp	r8, r10
   1bc92:	9b 04       	cpc	r9, r11
   1bc94:	08 f4       	brcc	.+2      	; 0x1bc98 <main+0x177a>
   1bc96:	3f c0       	rjmp	.+126    	; 0x1bd16 <main+0x17f8>
   1bc98:	c5 01       	movw	r24, r10
   1bc9a:	c2 96       	adiw	r24, 0x32	; 50
   1bc9c:	88 16       	cp	r8, r24
   1bc9e:	99 06       	cpc	r9, r25
   1bca0:	d0 f5       	brcc	.+116    	; 0x1bd16 <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:243
    {
        *x=(x1+x2)/2;
   1bca2:	60 0e       	add	r6, r16
   1bca4:	71 1e       	adc	r7, r17
   1bca6:	93 01       	movw	r18, r6
   1bca8:	36 95       	lsr	r19
   1bcaa:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:270
			temp = (long)XFAC*x/10000;
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
   1bcac:	a4 e5       	ldi	r26, 0x54	; 84
   1bcae:	b3 e0       	ldi	r27, 0x03	; 3
   1bcb0:	0e 94 b1 ef 	call	0x1df62	; 0x1df62 <__umulhisi3>
   1bcb4:	20 e1       	ldi	r18, 0x10	; 16
   1bcb6:	42 2e       	mov	r4, r18
   1bcb8:	27 e2       	ldi	r18, 0x27	; 39
   1bcba:	52 2e       	mov	r5, r18
   1bcbc:	61 2c       	mov	r6, r1
   1bcbe:	71 2c       	mov	r7, r1
   1bcc0:	a3 01       	movw	r20, r6
   1bcc2:	92 01       	movw	r18, r4
   1bcc4:	0e 94 87 ef 	call	0x1df0e	; 0x1df0e <__divmodsi4>
   1bcc8:	89 01       	movw	r16, r18
   1bcca:	0e 50       	subi	r16, 0x0E	; 14
   1bccc:	11 09       	sbc	r17, r1
   1bcce:	10 93 9b 0f 	sts	0x0F9B, r17	; 0x800f9b <my_touch+0x5>
   1bcd2:	00 93 9a 0f 	sts	0x0F9A, r16	; 0x800f9a <my_touch+0x4>
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:244
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    {
        *x=(x1+x2)/2;
        *y=(y1+y2)/2;
   1bcd6:	a8 0c       	add	r10, r8
   1bcd8:	b9 1c       	adc	r11, r9
   1bcda:	95 01       	movw	r18, r10
   1bcdc:	36 95       	lsr	r19
   1bcde:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:271
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
   1bce0:	a4 e0       	ldi	r26, 0x04	; 4
   1bce2:	b5 e0       	ldi	r27, 0x05	; 5
   1bce4:	0e 94 b1 ef 	call	0x1df62	; 0x1df62 <__umulhisi3>
   1bce8:	a3 01       	movw	r20, r6
   1bcea:	92 01       	movw	r18, r4
   1bcec:	0e 94 87 ef 	call	0x1df0e	; 0x1df0e <__divmodsi4>
   1bcf0:	2e 51       	subi	r18, 0x1E	; 30
   1bcf2:	31 09       	sbc	r19, r1
   1bcf4:	30 93 9d 0f 	sts	0x0F9D, r19	; 0x800f9d <my_touch+0x7>
   1bcf8:	20 93 9c 0f 	sts	0x0F9C, r18	; 0x800f9c <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:272
			switch(touch_rotation)
   1bcfc:	80 91 a3 0f 	lds	r24, 0x0FA3	; 0x800fa3 <my_touch+0xd>
   1bd00:	81 30       	cpi	r24, 0x01	; 1
   1bd02:	09 f4       	brne	.+2      	; 0x1bd06 <main+0x17e8>
   1bd04:	6f c1       	rjmp	.+734    	; 0x1bfe4 <main+0x1ac6>
   1bd06:	08 f4       	brcc	.+2      	; 0x1bd0a <main+0x17ec>
   1bd08:	3c c1       	rjmp	.+632    	; 0x1bf82 <main+0x1a64>
   1bd0a:	82 30       	cpi	r24, 0x02	; 2
   1bd0c:	09 f4       	brne	.+2      	; 0x1bd10 <main+0x17f2>
   1bd0e:	9b c1       	rjmp	.+822    	; 0x1c046 <main+0x1b28>
   1bd10:	83 30       	cpi	r24, 0x03	; 3
   1bd12:	09 f4       	brne	.+2      	; 0x1bd16 <main+0x17f8>
   1bd14:	a4 c1       	rjmp	.+840    	; 0x1c05e <main+0x1b40>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:384
					break;
				default:
					break;
			}
	 	}
		if((touch_statue&TP_PRES_DOWN)==0)
   1bd16:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <my_touch+0xc>
   1bd1a:	87 fd       	sbrc	r24, 7
   1bd1c:	13 c0       	rjmp	.+38     	; 0x1bd44 <main+0x1826>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:386
		{		 
			touch_statue=TP_PRES_DOWN|TP_CATH_PRES; 
   1bd1e:	80 ec       	ldi	r24, 0xC0	; 192
   1bd20:	80 93 a2 0f 	sts	0x0FA2, r24	; 0x800fa2 <my_touch+0xc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:387
			x0=x;
   1bd24:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <my_touch+0x4>
   1bd28:	90 91 9b 0f 	lds	r25, 0x0F9B	; 0x800f9b <my_touch+0x5>
   1bd2c:	90 93 97 0f 	sts	0x0F97, r25	; 0x800f97 <my_touch+0x1>
   1bd30:	80 93 96 0f 	sts	0x0F96, r24	; 0x800f96 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:388
			y0=y;  	   			 
   1bd34:	80 91 9c 0f 	lds	r24, 0x0F9C	; 0x800f9c <my_touch+0x6>
   1bd38:	90 91 9d 0f 	lds	r25, 0x0F9D	; 0x800f9d <my_touch+0x7>
   1bd3c:	90 93 99 0f 	sts	0x0F99, r25	; 0x800f99 <my_touch+0x3>
   1bd40:	80 93 98 0f 	sts	0x0F98, r24	; 0x800f98 <my_touch+0x2>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4018
    }
  }

  ///display_touch_click
  my_touch.TP_Scan(0);
  if (my_touch.TP_Get_State() & TP_PRES_DOWN)
   1bd44:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <my_touch+0xc>
   1bd48:	87 ff       	sbrs	r24, 7
   1bd4a:	b1 c1       	rjmp	.+866    	; 0x1c0ae <main+0x1b90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4020
  {
    click_x = my_touch.x;
   1bd4c:	00 91 9a 0f 	lds	r16, 0x0F9A	; 0x800f9a <my_touch+0x4>
   1bd50:	10 91 9b 0f 	lds	r17, 0x0F9B	; 0x800f9b <my_touch+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4021
    click_y = my_touch.y;
   1bd54:	e0 90 9c 0f 	lds	r14, 0x0F9C	; 0x800f9c <my_touch+0x6>
   1bd58:	f0 90 9d 0f 	lds	r15, 0x0F9D	; 0x800f9d <my_touch+0x7>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4022
    click_on_display = 1;
   1bd5c:	81 e0       	ldi	r24, 0x01	; 1
   1bd5e:	80 93 8a 0c 	sts	0x0C8A, r24	; 0x800c8a <click_on_display>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4032
    click_y = 0;
    click_on_display = 0;
  }


  if (click_on_display == 1 && click_on_display_last == 0)
   1bd62:	80 91 8a 0c 	lds	r24, 0x0C8A	; 0x800c8a <click_on_display>
   1bd66:	81 30       	cpi	r24, 0x01	; 1
   1bd68:	99 f4       	brne	.+38     	; 0x1bd90 <main+0x1872>
   1bd6a:	80 91 89 0c 	lds	r24, 0x0C89	; 0x800c89 <click_on_display_last>
   1bd6e:	81 11       	cpse	r24, r1
   1bd70:	0f c0       	rjmp	.+30     	; 0x1bd90 <main+0x1872>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4034
  {
    click_time = millis();
   1bd72:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4035
    display_auto_shutdown_now = 0;
   1bd76:	10 92 96 0c 	sts	0x0C96, r1	; 0x800c96 <display_auto_shutdown_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4036
    if (((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0) && my_touch.TP_GetOnOff() == 0)
   1bd7a:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
   1bd7e:	86 ff       	sbrs	r24, 6
   1bd80:	07 c0       	rjmp	.+14     	; 0x1bd90 <main+0x1872>
   1bd82:	80 91 a6 0f 	lds	r24, 0x0FA6	; 0x800fa6 <my_touch+0x10>
   1bd86:	81 11       	cpse	r24, r1
   1bd88:	03 c0       	rjmp	.+6      	; 0x1bd90 <main+0x1872>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4038
    {
      my_touch.TP_SetOnOff(LED_ON);
   1bd8a:	81 e0       	ldi	r24, 0x01	; 1
   1bd8c:	0e 94 7a c9 	call	0x192f4	; 0x192f4 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.85]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4047
  if (click_on_display == 1 && click_on_display_last == 1)
  {

  }

  click_on_display_last = click_on_display;
   1bd90:	80 91 8a 0c 	lds	r24, 0x0C8A	; 0x800c8a <click_on_display>
   1bd94:	80 93 89 0c 	sts	0x0C89, r24	; 0x800c89 <click_on_display_last>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4050


  if (draw_menu(false, 0, click_x, click_y) == true)
   1bd98:	a7 01       	movw	r20, r14
   1bd9a:	b8 01       	movw	r22, r16
   1bd9c:	80 e0       	ldi	r24, 0x00	; 0
   1bd9e:	0e 94 bc b4 	call	0x16978	; 0x16978 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]>
   1bda2:	88 23       	and	r24, r24
   1bda4:	39 f0       	breq	.+14     	; 0x1bdb4 <main+0x1896>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4052
  {
    draw_menu(true, 0, 0, 0);
   1bda6:	50 e0       	ldi	r21, 0x00	; 0
   1bda8:	40 e0       	ldi	r20, 0x00	; 0
   1bdaa:	70 e0       	ldi	r23, 0x00	; 0
   1bdac:	60 e0       	ldi	r22, 0x00	; 0
   1bdae:	81 e0       	ldi	r24, 0x01	; 1
   1bdb0:	0e 94 bc b4 	call	0x16978	; 0x16978 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4069
      draw_menu(true);
    }
    }
  */

  load = millis() - load_now;
   1bdb4:	0e 94 c4 59 	call	0xb388	; 0xb388 <millis>
   1bdb8:	dc 01       	movw	r26, r24
   1bdba:	cb 01       	movw	r24, r22
   1bdbc:	cb 54       	subi	r28, 0x4B	; 75
   1bdbe:	df 4f       	sbci	r29, 0xFF	; 255
   1bdc0:	28 81       	ld	r18, Y
   1bdc2:	39 81       	ldd	r19, Y+1	; 0x01
   1bdc4:	4a 81       	ldd	r20, Y+2	; 0x02
   1bdc6:	5b 81       	ldd	r21, Y+3	; 0x03
   1bdc8:	c5 5b       	subi	r28, 0xB5	; 181
   1bdca:	d0 40       	sbci	r29, 0x00	; 0
   1bdcc:	82 1b       	sub	r24, r18
   1bdce:	93 0b       	sbc	r25, r19
   1bdd0:	a4 0b       	sbc	r26, r20
   1bdd2:	b5 0b       	sbc	r27, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4070
  if (load < load_min) load_min = load;
   1bdd4:	00 91 02 02 	lds	r16, 0x0202	; 0x800202 <load_min>
   1bdd8:	10 91 03 02 	lds	r17, 0x0203	; 0x800203 <load_min+0x1>
   1bddc:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <load_min+0x2>
   1bde0:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <load_min+0x3>
   1bde4:	80 17       	cp	r24, r16
   1bde6:	91 07       	cpc	r25, r17
   1bde8:	a2 07       	cpc	r26, r18
   1bdea:	b3 07       	cpc	r27, r19
   1bdec:	44 f4       	brge	.+16     	; 0x1bdfe <main+0x18e0>
   1bdee:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <load_min>
   1bdf2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <load_min+0x1>
   1bdf6:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <load_min+0x2>
   1bdfa:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4071
  if (load > load_max) load_max = load;
   1bdfe:	00 91 85 0c 	lds	r16, 0x0C85	; 0x800c85 <load_max>
   1be02:	10 91 86 0c 	lds	r17, 0x0C86	; 0x800c86 <load_max+0x1>
   1be06:	20 91 87 0c 	lds	r18, 0x0C87	; 0x800c87 <load_max+0x2>
   1be0a:	30 91 88 0c 	lds	r19, 0x0C88	; 0x800c88 <load_max+0x3>
   1be0e:	08 17       	cp	r16, r24
   1be10:	19 07       	cpc	r17, r25
   1be12:	2a 07       	cpc	r18, r26
   1be14:	3b 07       	cpc	r19, r27
   1be16:	44 f4       	brge	.+16     	; 0x1be28 <main+0x190a>
   1be18:	80 93 85 0c 	sts	0x0C85, r24	; 0x800c85 <load_max>
   1be1c:	90 93 86 0c 	sts	0x0C86, r25	; 0x800c86 <load_max+0x1>
   1be20:	a0 93 87 0c 	sts	0x0C87, r26	; 0x800c87 <load_max+0x2>
   1be24:	b0 93 88 0c 	sts	0x0C88, r27	; 0x800c88 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4074

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   1be28:	80 91 a3 0c 	lds	r24, 0x0CA3	; 0x800ca3 <light_curr>
   1be2c:	90 91 a4 0c 	lds	r25, 0x0CA4	; 0x800ca4 <light_curr+0x1>
   1be30:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <light_min>
   1be34:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <light_min+0x1>
   1be38:	82 17       	cp	r24, r18
   1be3a:	93 07       	cpc	r25, r19
   1be3c:	20 f4       	brcc	.+8      	; 0x1be46 <main+0x1928>
   1be3e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <light_min+0x1>
   1be42:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4075
  if (light_curr > light_max) light_max = light_curr;
   1be46:	20 91 a1 0c 	lds	r18, 0x0CA1	; 0x800ca1 <light_max>
   1be4a:	30 91 a2 0c 	lds	r19, 0x0CA2	; 0x800ca2 <light_max+0x1>
   1be4e:	28 17       	cp	r18, r24
   1be50:	39 07       	cpc	r19, r25
   1be52:	20 f4       	brcc	.+8      	; 0x1be5c <main+0x193e>
   1be54:	90 93 a2 0c 	sts	0x0CA2, r25	; 0x800ca2 <light_max+0x1>
   1be58:	80 93 a1 0c 	sts	0x0CA1, r24	; 0x800ca1 <light_max>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   1be5c:	82 e0       	ldi	r24, 0x02	; 2
   1be5e:	9b ea       	ldi	r25, 0xAB	; 171
   1be60:	89 2b       	or	r24, r25
   1be62:	11 f4       	brne	.+4      	; 0x1be68 <main+0x194a>
   1be64:	0c 94 ee d2 	jmp	0x1a5dc	; 0x1a5dc <main+0xbe>
   1be68:	0e 94 02 ab 	call	0x15604	; 0x15604 <serialEventRun()>
   1be6c:	0c 94 ee d2 	jmp	0x1a5dc	; 0x1a5dc <main+0xbe>
   1be70:	7f ef       	ldi	r23, 0xFF	; 255
   1be72:	67 1a       	sub	r6, r23
   1be74:	77 0a       	sbc	r7, r23
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:394
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   1be76:	8b e0       	ldi	r24, 0x0B	; 11
   1be78:	68 16       	cp	r6, r24
   1be7a:	71 04       	cpc	r7, r1
   1be7c:	09 f0       	breq	.+2      	; 0x1be80 <main+0x1962>
   1be7e:	19 cb       	rjmp	.-2510   	; 0x1b4b2 <main+0xf94>
   1be80:	77 cb       	rjmp	.-2322   	; 0x1b570 <main+0x1052>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3327
            break;
          }
        default: break;
      }
    }
    if (tmode == TERM_MODE_MAN_HEAT)
   1be82:	93 e0       	ldi	r25, 0x03	; 3
   1be84:	79 12       	cpse	r7, r25
   1be86:	10 c0       	rjmp	.+32     	; 0x1bea8 <main+0x198a>
thermostat_pid_setdirection_direct():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:50
  }
}

void thermostat_pid_setdirection_direct(uint8_t idx)
{
  array_pids[idx]->SetControllerDirection(DIRECT);
   1be88:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <array_pids>
   1be8c:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <array_pids+0x1>
   1be90:	c2 01       	movw	r24, r4
   1be92:	88 0f       	add	r24, r24
   1be94:	99 1f       	adc	r25, r25
   1be96:	e8 0f       	add	r30, r24
   1be98:	f9 1f       	adc	r31, r25
   1be9a:	70 e0       	ldi	r23, 0x00	; 0
   1be9c:	60 e0       	ldi	r22, 0x00	; 0
thermostat_pid_setdirection_reverse():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:55
}

void thermostat_pid_setdirection_reverse(uint8_t idx)
{
  array_pids[idx]->SetControllerDirection(REVERSE);
   1be9e:	80 81       	ld	r24, Z
   1bea0:	91 81       	ldd	r25, Z+1	; 0x01
   1bea2:	0e 94 7b 3f 	call	0x7ef6	; 0x7ef6 <PID::SetControllerDirection(int)>
   1bea6:	69 cb       	rjmp	.-2350   	; 0x1b57a <main+0x105c>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3333
    {

      thermostat_pid_setdirection_direct(tix);
    }

    if (tmode == TERM_MODE_MAN_COOL)
   1bea8:	e5 e0       	ldi	r30, 0x05	; 5
   1beaa:	7e 12       	cpse	r7, r30
   1beac:	66 cb       	rjmp	.-2356   	; 0x1b57a <main+0x105c>
thermostat_pid_setdirection_reverse():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:55
   1beae:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <array_pids>
   1beb2:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <array_pids+0x1>
   1beb6:	c2 01       	movw	r24, r4
   1beb8:	88 0f       	add	r24, r24
   1beba:	99 1f       	adc	r25, r25
   1bebc:	e8 0f       	add	r30, r24
   1bebe:	f9 1f       	adc	r31, r25
   1bec0:	61 e0       	ldi	r22, 0x01	; 1
   1bec2:	70 e0       	ldi	r23, 0x00	; 0
   1bec4:	ec cf       	rjmp	.-40     	; 0x1be9e <main+0x1980>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3353
          thermostat_ring_set_power(tix, pwm);
        }
        else
        {
          tmode = TERM_MODE_ERR;
          pwm = 0;
   1bec6:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3352
          pwm = thermostat_pid_output(tix);
          thermostat_ring_set_power(tix, pwm);
        }
        else
        {
          tmode = TERM_MODE_ERR;
   1bec8:	3e ef       	ldi	r19, 0xFE	; 254
   1beca:	73 2e       	mov	r7, r19
   1becc:	b0 cb       	rjmp	.-2208   	; 0x1b62e <main+0x1110>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3405
    if (tmode == TERM_MODE_OFF)
    {
      mqtt_publis_output(tout, POWER_OUTPUT_OFF);
      thermostat_ring_set_power(tix, 0);
    }
    if (tmode == TERM_MODE_MAX)
   1bece:	21 e0       	ldi	r18, 0x01	; 1
   1bed0:	72 12       	cpse	r7, r18
   1bed2:	09 c0       	rjmp	.+18     	; 0x1bee6 <main+0x19c8>
mqtt_publis_output():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3074
void mqtt_publis_output(uint8_t idx, uint8_t state)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1bed4:	3f ef       	ldi	r19, 0xFF	; 255
   1bed6:	6a e0       	ldi	r22, 0x0A	; 10
   1bed8:	b3 16       	cp	r11, r19
   1beda:	09 f4       	brne	.+2      	; 0x1bede <main+0x19c0>
   1bedc:	09 cc       	rjmp	.-2030   	; 0x1b6f0 <main+0x11d2>
   1bede:	8b 2d       	mov	r24, r11
   1bee0:	0e 94 80 60 	call	0xc100	; 0xc100 <mqtt_publis_output(unsigned char, unsigned char) [clone .part.35]>
   1bee4:	05 cc       	rjmp	.-2038   	; 0x1b6f0 <main+0x11d2>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3410
    if (tmode == TERM_MODE_MAX)
    {
      mqtt_publis_output(tout, POWER_OUTPUT_HEAT_MAX);
      thermostat_ring_set_power(tix, 255);
    }
    if (tmode == TERM_MODE_CLIMATE_MAX)
   1bee6:	44 e0       	ldi	r20, 0x04	; 4
   1bee8:	74 12       	cpse	r7, r20
   1beea:	06 c0       	rjmp	.+12     	; 0x1bef8 <main+0x19da>
mqtt_publis_output():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3074
void mqtt_publis_output(uint8_t idx, uint8_t state)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1beec:	5f ef       	ldi	r21, 0xFF	; 255
   1beee:	b5 16       	cp	r11, r21
   1bef0:	09 f4       	brne	.+2      	; 0x1bef4 <main+0x19d6>
   1bef2:	fe cb       	rjmp	.-2052   	; 0x1b6f0 <main+0x11d2>
   1bef4:	6b e0       	ldi	r22, 0x0B	; 11
   1bef6:	f3 cf       	rjmp	.-26     	; 0x1bede <main+0x19c0>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3415
    if (tmode == TERM_MODE_CLIMATE_MAX)
    {
      mqtt_publis_output(tout, POWER_OUTPUT_COOL_MAX);
      thermostat_ring_set_power(tix, 255);
    }
    if (tmode == TERM_MODE_MAN_HEAT || tmode == TERM_MODE_MAN_COOL || tmode == TERM_MODE_FAN || tmode == TERM_MODE_ERR)
   1bef8:	63 e0       	ldi	r22, 0x03	; 3
   1befa:	76 16       	cp	r7, r22
   1befc:	09 f4       	brne	.+2      	; 0x1bf00 <main+0x19e2>
   1befe:	de c0       	rjmp	.+444    	; 0x1c0bc <main+0x1b9e>
   1bf00:	8b ef       	ldi	r24, 0xFB	; 251
   1bf02:	87 0d       	add	r24, r7
   1bf04:	82 30       	cpi	r24, 0x02	; 2
   1bf06:	08 f4       	brcc	.+2      	; 0x1bf0a <main+0x19ec>
   1bf08:	00 c1       	rjmp	.+512    	; 0x1c10a <main+0x1bec>
   1bf0a:	7e ef       	ldi	r23, 0xFE	; 254
   1bf0c:	77 12       	cpse	r7, r23
   1bf0e:	f0 cb       	rjmp	.-2080   	; 0x1b6f0 <main+0x11d2>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3092
void mqtt_publis_output_pwm(uint8_t idx, uint8_t mode, uint8_t pwm)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1bf10:	4f ef       	ldi	r20, 0xFF	; 255
   1bf12:	b4 16       	cp	r11, r20
   1bf14:	09 f4       	brne	.+2      	; 0x1bf18 <main+0x19fa>
   1bf16:	ec cb       	rjmp	.-2088   	; 0x1b6f0 <main+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
  {
    strcpy_P(str_topic, termbig_header_in);
   1bf18:	64 ec       	ldi	r22, 0xC4	; 196
   1bf1a:	75 e7       	ldi	r23, 0x75	; 117
   1bf1c:	ce 01       	movw	r24, r28
   1bf1e:	8f 5b       	subi	r24, 0xBF	; 191
   1bf20:	9f 4f       	sbci	r25, 0xFF	; 255
   1bf22:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3095
    strcat(str_topic, "power-output/");
   1bf26:	69 e8       	ldi	r22, 0x89	; 137
   1bf28:	73 e0       	ldi	r23, 0x03	; 3
   1bf2a:	ce 01       	movw	r24, r28
   1bf2c:	8f 5b       	subi	r24, 0xBF	; 191
   1bf2e:	9f 4f       	sbci	r25, 0xFF	; 255
   1bf30:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bf34:	4a e0       	ldi	r20, 0x0A	; 10
   1bf36:	be 01       	movw	r22, r28
   1bf38:	6c 55       	subi	r22, 0x5C	; 92
   1bf3a:	7f 4f       	sbci	r23, 0xFF	; 255
   1bf3c:	8b 2d       	mov	r24, r11
   1bf3e:	90 e0       	ldi	r25, 0x00	; 0
   1bf40:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3097
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
   1bf44:	be 01       	movw	r22, r28
   1bf46:	6c 55       	subi	r22, 0x5C	; 92
   1bf48:	7f 4f       	sbci	r23, 0xFF	; 255
   1bf4a:	ce 01       	movw	r24, r28
   1bf4c:	8f 5b       	subi	r24, 0xBF	; 191
   1bf4e:	9f 4f       	sbci	r25, 0xFF	; 255
   1bf50:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3105
    if (mode == TERM_MODE_MAN_COOL)
      strcat(str_topic, "/cool");
    if (mode == TERM_MODE_FAN)
      strcat(str_topic, "/fan");
    if (mode == TERM_MODE_ERR)
      strcat(str_topic, "/err");
   1bf54:	64 ed       	ldi	r22, 0xD4	; 212
   1bf56:	78 e0       	ldi	r23, 0x08	; 8
   1bf58:	01 c1       	rjmp	.+514    	; 0x1c15c <main+0x1c3e>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3963
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
      if (brigthness_display_auto_values > 200)
        brigthness_display_auto_values = 200;
   1bf5a:	88 ec       	ldi	r24, 0xC8	; 200
   1bf5c:	80 93 a0 0c 	sts	0x0CA0, r24	; 0x800ca0 <brigthness_display_auto_values>
   1bf60:	36 cc       	rjmp	.-1940   	; 0x1b7ce <main+0x12b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3980
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0)
    {
      if (display_auto_shutdown > display_auto_shutdown_now)
        display_auto_shutdown_now++;
      else
        my_touch.TP_SetOnOff(LED_OFF);
   1bf62:	80 e0       	ldi	r24, 0x00	; 0
   1bf64:	0e 94 7a c9 	call	0x192f4	; 0x192f4 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.85]>
   1bf68:	82 cc       	rjmp	.-1788   	; 0x1b86e <main+0x1350>
mereni_hwwire():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:320
            
          }

          else
          {
            status_tds18s20[w].online = False;
   1bf6a:	13 8e       	std	Z+27, r1	; 0x1b
   1bf6c:	7e cd       	rjmp	.-1284   	; 0x1ba6a <main+0x154c>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3163
void selftest(void)
{
  if (!rtc.isrunning())
    sbi(selftest_data, SELFTEST_ERR_RTC);
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   1bf6e:	9e 7f       	andi	r25, 0xFE	; 254
   1bf70:	ec cd       	rjmp	.-1064   	; 0x1bb4a <main+0x162c>
   1bf72:	01 96       	adiw	r24, 0x01	; 1
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   1bf74:	88 30       	cpi	r24, 0x08	; 8
   1bf76:	91 05       	cpc	r25, r1
   1bf78:	09 f0       	breq	.+2      	; 0x1bf7c <main+0x1a5e>
   1bf7a:	3a ce       	rjmp	.-908    	; 0x1bbf0 <main+0x16d2>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   1bf7c:	10 92 84 0c 	sts	0x0C84, r1	; 0x800c84 <a2d_index>
   1bf80:	4a ce       	rjmp	.-876    	; 0x1bc16 <main+0x16f8>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:275
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
			switch(touch_rotation)
			{
				case 0:
					if(lcd_rotation == 0)
   1bf82:	80 91 a4 0f 	lds	r24, 0x0FA4	; 0x800fa4 <my_touch+0xe>
   1bf86:	88 23       	and	r24, r24
   1bf88:	09 f4       	brne	.+2      	; 0x1bf8c <main+0x1a6e>
   1bf8a:	c5 ce       	rjmp	.-630    	; 0x1bd16 <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:279
					{
						break;
					}
					else if(lcd_rotation == 1)
   1bf8c:	81 30       	cpi	r24, 0x01	; 1
   1bf8e:	59 f4       	brne	.+22     	; 0x1bfa6 <main+0x1a88>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:349
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
   1bf90:	30 93 9b 0f 	sts	0x0F9B, r19	; 0x800f9b <my_touch+0x5>
   1bf94:	20 93 9a 0f 	sts	0x0F9A, r18	; 0x800f9a <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:366
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
   1bf98:	80 91 a0 0f 	lds	r24, 0x0FA0	; 0x800fa0 <my_touch+0xa>
   1bf9c:	90 91 a1 0f 	lds	r25, 0x0FA1	; 0x800fa1 <my_touch+0xb>
   1bfa0:	80 1b       	sub	r24, r16
   1bfa2:	91 0b       	sbc	r25, r17
   1bfa4:	3d c0       	rjmp	.+122    	; 0x1c020 <main+0x1b02>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:287
						tmp = x;
						x=y;
						y=tmp;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
   1bfa6:	82 30       	cpi	r24, 0x02	; 2
   1bfa8:	59 f4       	brne	.+22     	; 0x1bfc0 <main+0x1aa2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:330
					}
					break;
				case 2:
					if(lcd_rotation == 0)
					{
						x = wid-x;
   1bfaa:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <my_touch+0x8>
   1bfae:	90 91 9f 0f 	lds	r25, 0x0F9F	; 0x800f9f <my_touch+0x9>
   1bfb2:	80 1b       	sub	r24, r16
   1bfb4:	91 0b       	sbc	r25, r17
   1bfb6:	90 93 9b 0f 	sts	0x0F9B, r25	; 0x800f9b <my_touch+0x5>
   1bfba:	80 93 9a 0f 	sts	0x0F9A, r24	; 0x800f9a <my_touch+0x4>
   1bfbe:	2a c0       	rjmp	.+84     	; 0x1c014 <main+0x1af6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:292
					else if(lcd_rotation == 2)
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 3)
   1bfc0:	83 30       	cpi	r24, 0x03	; 3
   1bfc2:	09 f0       	breq	.+2      	; 0x1bfc6 <main+0x1aa8>
   1bfc4:	a8 ce       	rjmp	.-688    	; 0x1bd16 <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:338
					else if(lcd_rotation == 1)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
   1bfc6:	10 93 9d 0f 	sts	0x0F9D, r17	; 0x800f9d <my_touch+0x7>
   1bfca:	00 93 9c 0f 	sts	0x0F9C, r16	; 0x800f9c <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:339
						x = wid-x;
   1bfce:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <my_touch+0x8>
   1bfd2:	90 91 9f 0f 	lds	r25, 0x0F9F	; 0x800f9f <my_touch+0x9>
   1bfd6:	82 1b       	sub	r24, r18
   1bfd8:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:370
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
   1bfda:	90 93 9b 0f 	sts	0x0F9B, r25	; 0x800f9b <my_touch+0x5>
   1bfde:	80 93 9a 0f 	sts	0x0F9A, r24	; 0x800f9a <my_touch+0x4>
   1bfe2:	99 ce       	rjmp	.-718    	; 0x1bd16 <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:302
						y=tmp;
						x = wid-x;
					}
					break;
				case 1:
					if(lcd_rotation == 0)
   1bfe4:	80 91 a4 0f 	lds	r24, 0x0FA4	; 0x800fa4 <my_touch+0xe>
   1bfe8:	81 11       	cpse	r24, r1
   1bfea:	07 c0       	rjmp	.+14     	; 0x1bffa <main+0x1adc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:370
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
   1bfec:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <my_touch+0x8>
   1bff0:	90 91 9f 0f 	lds	r25, 0x0F9F	; 0x800f9f <my_touch+0x9>
   1bff4:	80 1b       	sub	r24, r16
   1bff6:	91 0b       	sbc	r25, r17
   1bff8:	f0 cf       	rjmp	.-32     	; 0x1bfda <main+0x1abc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:306
				case 1:
					if(lcd_rotation == 0)
					{
						x = wid-x;
					}
					else if(lcd_rotation == 1)
   1bffa:	81 30       	cpi	r24, 0x01	; 1
   1bffc:	49 f4       	brne	.+18     	; 0x1c010 <main+0x1af2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:376
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
   1bffe:	30 93 9b 0f 	sts	0x0F9B, r19	; 0x800f9b <my_touch+0x5>
   1c002:	20 93 9a 0f 	sts	0x0F9A, r18	; 0x800f9a <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:377
						y=tmp;
   1c006:	10 93 9d 0f 	sts	0x0F9D, r17	; 0x800f9d <my_touch+0x7>
   1c00a:	00 93 9c 0f 	sts	0x0F9C, r16	; 0x800f9c <my_touch+0x6>
   1c00e:	83 ce       	rjmp	.-762    	; 0x1bd16 <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:313
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
					}
					else if(lcd_rotation == 2)
   1c010:	82 30       	cpi	r24, 0x02	; 2
   1c012:	59 f4       	brne	.+22     	; 0x1c02a <main+0x1b0c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:357
					}
					break;
				case 3:
					if(lcd_rotation == 0)
					{
						y = heig - y;
   1c014:	80 91 a0 0f 	lds	r24, 0x0FA0	; 0x800fa0 <my_touch+0xa>
   1c018:	90 91 a1 0f 	lds	r25, 0x0FA1	; 0x800fa1 <my_touch+0xb>
   1c01c:	82 1b       	sub	r24, r18
   1c01e:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:366
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
   1c020:	90 93 9d 0f 	sts	0x0F9D, r25	; 0x800f9d <my_touch+0x7>
   1c024:	80 93 9c 0f 	sts	0x0F9C, r24	; 0x800f9c <my_touch+0x6>
   1c028:	76 ce       	rjmp	.-788    	; 0x1bd16 <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:317
					}
					else if(lcd_rotation == 2)
					{
						y = heig - y;
					}
					else if(lcd_rotation == 3)
   1c02a:	83 30       	cpi	r24, 0x03	; 3
   1c02c:	09 f0       	breq	.+2      	; 0x1c030 <main+0x1b12>
   1c02e:	73 ce       	rjmp	.-794    	; 0x1bd16 <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:365
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
   1c030:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <my_touch+0x8>
   1c034:	90 91 9f 0f 	lds	r25, 0x0F9F	; 0x800f9f <my_touch+0x9>
   1c038:	82 1b       	sub	r24, r18
   1c03a:	93 0b       	sbc	r25, r19
   1c03c:	90 93 9b 0f 	sts	0x0F9B, r25	; 0x800f9b <my_touch+0x5>
   1c040:	80 93 9a 0f 	sts	0x0F9A, r24	; 0x800f9a <my_touch+0x4>
   1c044:	a9 cf       	rjmp	.-174    	; 0x1bf98 <main+0x1a7a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:328
						x = wid-x;
						y = heig - y;
					}
					break;
				case 2:
					if(lcd_rotation == 0)
   1c046:	80 91 a4 0f 	lds	r24, 0x0FA4	; 0x800fa4 <my_touch+0xe>
   1c04a:	88 23       	and	r24, r24
   1c04c:	09 f4       	brne	.+2      	; 0x1c050 <main+0x1b32>
   1c04e:	ad cf       	rjmp	.-166    	; 0x1bfaa <main+0x1a8c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:333
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 1)
   1c050:	81 30       	cpi	r24, 0x01	; 1
   1c052:	09 f4       	brne	.+2      	; 0x1c056 <main+0x1b38>
   1c054:	b8 cf       	rjmp	.-144    	; 0x1bfc6 <main+0x1aa8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:345
					}
					else if(lcd_rotation == 2)
					{
						break;
					}
					else if(lcd_rotation == 3)
   1c056:	83 30       	cpi	r24, 0x03	; 3
   1c058:	09 f0       	breq	.+2      	; 0x1c05c <main+0x1b3e>
   1c05a:	5d ce       	rjmp	.-838    	; 0x1bd16 <main+0x17f8>
   1c05c:	99 cf       	rjmp	.-206    	; 0x1bf90 <main+0x1a72>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:355
						y=tmp;
						y = heig - y;
					}
					break;
				case 3:
					if(lcd_rotation == 0)
   1c05e:	80 91 a4 0f 	lds	r24, 0x0FA4	; 0x800fa4 <my_touch+0xe>
   1c062:	88 23       	and	r24, r24
   1c064:	b9 f2       	breq	.-82     	; 0x1c014 <main+0x1af6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:359
					{
						y = heig - y;
					}
					else if(lcd_rotation == 1)
   1c066:	81 30       	cpi	r24, 0x01	; 1
   1c068:	19 f3       	breq	.-58     	; 0x1c030 <main+0x1b12>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:368
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
   1c06a:	82 30       	cpi	r24, 0x02	; 2
   1c06c:	09 f4       	brne	.+2      	; 0x1c070 <main+0x1b52>
   1c06e:	be cf       	rjmp	.-132    	; 0x1bfec <main+0x1ace>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:372
					{
						x = wid-x;;
					}
					else if(lcd_rotation == 3)
   1c070:	83 30       	cpi	r24, 0x03	; 3
   1c072:	09 f0       	breq	.+2      	; 0x1c076 <main+0x1b58>
   1c074:	50 ce       	rjmp	.-864    	; 0x1bd16 <main+0x17f8>
   1c076:	c3 cf       	rjmp	.-122    	; 0x1bffe <main+0x1ae0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:393
			y0=y;  	   			 
		}			   
	}
	else
	{
		if(touch_statue&TP_PRES_DOWN)
   1c078:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <my_touch+0xc>
   1c07c:	87 ff       	sbrs	r24, 7
   1c07e:	04 c0       	rjmp	.+8      	; 0x1c088 <main+0x1b6a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:395
		{
			touch_statue&=~(1<<7);
   1c080:	8f 77       	andi	r24, 0x7F	; 127
   1c082:	80 93 a2 0f 	sts	0x0FA2, r24	; 0x800fa2 <my_touch+0xc>
   1c086:	5e ce       	rjmp	.-836    	; 0x1bd44 <main+0x1826>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:399
		}
		else
		{
			x0=0;
   1c088:	10 92 97 0f 	sts	0x0F97, r1	; 0x800f97 <my_touch+0x1>
   1c08c:	10 92 96 0f 	sts	0x0F96, r1	; 0x800f96 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:400
			y0=0;
   1c090:	10 92 99 0f 	sts	0x0F99, r1	; 0x800f99 <my_touch+0x3>
   1c094:	10 92 98 0f 	sts	0x0F98, r1	; 0x800f98 <my_touch+0x2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:401
			x=0xffff;
   1c098:	8f ef       	ldi	r24, 0xFF	; 255
   1c09a:	9f ef       	ldi	r25, 0xFF	; 255
   1c09c:	90 93 9b 0f 	sts	0x0F9B, r25	; 0x800f9b <my_touch+0x5>
   1c0a0:	80 93 9a 0f 	sts	0x0F9A, r24	; 0x800f9a <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:402
			y=0xffff;
   1c0a4:	90 93 9d 0f 	sts	0x0F9D, r25	; 0x800f9d <my_touch+0x7>
   1c0a8:	80 93 9c 0f 	sts	0x0F9C, r24	; 0x800f9c <my_touch+0x6>
   1c0ac:	4b ce       	rjmp	.-874    	; 0x1bd44 <main+0x1826>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4028
  }
  else
  {
    click_x = 0;
    click_y = 0;
    click_on_display = 0;
   1c0ae:	10 92 8a 0c 	sts	0x0C8A, r1	; 0x800c8a <click_on_display>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4027
    click_on_display = 1;
  }
  else
  {
    click_x = 0;
    click_y = 0;
   1c0b2:	f1 2c       	mov	r15, r1
   1c0b4:	e1 2c       	mov	r14, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4026
    click_y = my_touch.y;
    click_on_display = 1;
  }
  else
  {
    click_x = 0;
   1c0b6:	10 e0       	ldi	r17, 0x00	; 0
   1c0b8:	00 e0       	ldi	r16, 0x00	; 0
   1c0ba:	53 ce       	rjmp	.-858    	; 0x1bd62 <main+0x1844>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3092
void mqtt_publis_output_pwm(uint8_t idx, uint8_t mode, uint8_t pwm)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1c0bc:	3f ef       	ldi	r19, 0xFF	; 255
   1c0be:	b3 16       	cp	r11, r19
   1c0c0:	09 f4       	brne	.+2      	; 0x1c0c4 <main+0x1ba6>
   1c0c2:	16 cb       	rjmp	.-2516   	; 0x1b6f0 <main+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
  {
    strcpy_P(str_topic, termbig_header_in);
   1c0c4:	64 ec       	ldi	r22, 0xC4	; 196
   1c0c6:	75 e7       	ldi	r23, 0x75	; 117
   1c0c8:	ce 01       	movw	r24, r28
   1c0ca:	8f 5b       	subi	r24, 0xBF	; 191
   1c0cc:	9f 4f       	sbci	r25, 0xFF	; 255
   1c0ce:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3095
    strcat(str_topic, "power-output/");
   1c0d2:	69 e8       	ldi	r22, 0x89	; 137
   1c0d4:	73 e0       	ldi	r23, 0x03	; 3
   1c0d6:	ce 01       	movw	r24, r28
   1c0d8:	8f 5b       	subi	r24, 0xBF	; 191
   1c0da:	9f 4f       	sbci	r25, 0xFF	; 255
   1c0dc:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c0e0:	4a e0       	ldi	r20, 0x0A	; 10
   1c0e2:	be 01       	movw	r22, r28
   1c0e4:	6c 55       	subi	r22, 0x5C	; 92
   1c0e6:	7f 4f       	sbci	r23, 0xFF	; 255
   1c0e8:	8b 2d       	mov	r24, r11
   1c0ea:	90 e0       	ldi	r25, 0x00	; 0
   1c0ec:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3097
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
   1c0f0:	be 01       	movw	r22, r28
   1c0f2:	6c 55       	subi	r22, 0x5C	; 92
   1c0f4:	7f 4f       	sbci	r23, 0xFF	; 255
   1c0f6:	ce 01       	movw	r24, r28
   1c0f8:	8f 5b       	subi	r24, 0xBF	; 191
   1c0fa:	9f 4f       	sbci	r25, 0xFF	; 255
   1c0fc:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3099
    if (mode == TERM_MODE_MAN_HEAT)
      strcat(str_topic, "/heat");
   1c100:	6e ec       	ldi	r22, 0xCE	; 206
   1c102:	78 e0       	ldi	r23, 0x08	; 8
   1c104:	2b c0       	rjmp	.+86     	; 0x1c15c <main+0x1c3e>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4026
    click_y = my_touch.y;
    click_on_display = 1;
  }
  else
  {
    click_x = 0;
   1c106:	91 2c       	mov	r9, r1
   1c108:	03 cf       	rjmp	.-506    	; 0x1bf10 <main+0x19f2>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3092
void mqtt_publis_output_pwm(uint8_t idx, uint8_t mode, uint8_t pwm)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1c10a:	6f ef       	ldi	r22, 0xFF	; 255
   1c10c:	b6 16       	cp	r11, r22
   1c10e:	09 f4       	brne	.+2      	; 0x1c112 <main+0x1bf4>
   1c110:	ef ca       	rjmp	.-2594   	; 0x1b6f0 <main+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
  {
    strcpy_P(str_topic, termbig_header_in);
   1c112:	64 ec       	ldi	r22, 0xC4	; 196
   1c114:	75 e7       	ldi	r23, 0x75	; 117
   1c116:	ce 01       	movw	r24, r28
   1c118:	8f 5b       	subi	r24, 0xBF	; 191
   1c11a:	9f 4f       	sbci	r25, 0xFF	; 255
   1c11c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3095
    strcat(str_topic, "power-output/");
   1c120:	69 e8       	ldi	r22, 0x89	; 137
   1c122:	73 e0       	ldi	r23, 0x03	; 3
   1c124:	ce 01       	movw	r24, r28
   1c126:	8f 5b       	subi	r24, 0xBF	; 191
   1c128:	9f 4f       	sbci	r25, 0xFF	; 255
   1c12a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c12e:	4a e0       	ldi	r20, 0x0A	; 10
   1c130:	be 01       	movw	r22, r28
   1c132:	6c 55       	subi	r22, 0x5C	; 92
   1c134:	7f 4f       	sbci	r23, 0xFF	; 255
   1c136:	8b 2d       	mov	r24, r11
   1c138:	90 e0       	ldi	r25, 0x00	; 0
   1c13a:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3097
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
   1c13e:	be 01       	movw	r22, r28
   1c140:	6c 55       	subi	r22, 0x5C	; 92
   1c142:	7f 4f       	sbci	r23, 0xFF	; 255
   1c144:	ce 01       	movw	r24, r28
   1c146:	8f 5b       	subi	r24, 0xBF	; 191
   1c148:	9f 4f       	sbci	r25, 0xFF	; 255
   1c14a:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3100
    if (mode == TERM_MODE_MAN_HEAT)
      strcat(str_topic, "/heat");
    if (mode == TERM_MODE_MAN_COOL)
   1c14e:	55 e0       	ldi	r21, 0x05	; 5
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3103
      strcat(str_topic, "/cool");
    if (mode == TERM_MODE_FAN)
      strcat(str_topic, "/fan");
   1c150:	64 ec       	ldi	r22, 0xC4	; 196
   1c152:	78 e0       	ldi	r23, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3100
    strcat(str_topic, "power-output/");
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
    if (mode == TERM_MODE_MAN_HEAT)
      strcat(str_topic, "/heat");
    if (mode == TERM_MODE_MAN_COOL)
   1c154:	75 12       	cpse	r7, r21
   1c156:	02 c0       	rjmp	.+4      	; 0x1c15c <main+0x1c3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3101
      strcat(str_topic, "/cool");
   1c158:	6e eb       	ldi	r22, 0xBE	; 190
   1c15a:	78 e0       	ldi	r23, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3103
    if (mode == TERM_MODE_FAN)
      strcat(str_topic, "/fan");
   1c15c:	ce 01       	movw	r24, r28
   1c15e:	8f 5b       	subi	r24, 0xBF	; 191
   1c160:	9f 4f       	sbci	r25, 0xFF	; 255
   1c162:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3106
    if (mode == TERM_MODE_ERR)
      strcat(str_topic, "/err");
    strcat(str_topic, "/pwm");
   1c166:	69 ec       	ldi	r22, 0xC9	; 201
   1c168:	78 e0       	ldi	r23, 0x08	; 8
   1c16a:	ce 01       	movw	r24, r28
   1c16c:	8f 5b       	subi	r24, 0xBF	; 191
   1c16e:	9f 4f       	sbci	r25, 0xFF	; 255
   1c170:	0e 94 dd f1 	call	0x1e3ba	; 0x1e3ba <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c174:	4a e0       	ldi	r20, 0x0A	; 10
   1c176:	be 01       	movw	r22, r28
   1c178:	6f 5f       	subi	r22, 0xFF	; 255
   1c17a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c17c:	89 2d       	mov	r24, r9
   1c17e:	90 e0       	ldi	r25, 0x00	; 0
   1c180:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3108
    itoa(pwm, payload, 10);
    mqtt_client.publish(str_topic, payload);
   1c184:	ae 01       	movw	r20, r28
   1c186:	4f 5f       	subi	r20, 0xFF	; 255
   1c188:	5f 4f       	sbci	r21, 0xFF	; 255
   1c18a:	be 01       	movw	r22, r28
   1c18c:	6f 5b       	subi	r22, 0xBF	; 191
   1c18e:	7f 4f       	sbci	r23, 0xFF	; 255
   1c190:	8f e2       	ldi	r24, 0x2F	; 47
   1c192:	90 e1       	ldi	r25, 0x10	; 16
   1c194:	0e 94 23 60 	call	0xc046	; 0xc046 <PubSubClient::publish(char const*, char const*)>
   1c198:	ab ca       	rjmp	.-2730   	; 0x1b6f0 <main+0x11d2>

0001c19a <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7402>:
_GLOBAL__I_65535_0_room_control_v3.ino.cpp.o.7402():
   1c19a:	4f 92       	push	r4
   1c19c:	5f 92       	push	r5
   1c19e:	6f 92       	push	r6
   1c1a0:	7f 92       	push	r7
   1c1a2:	af 92       	push	r10
   1c1a4:	bf 92       	push	r11
   1c1a6:	cf 92       	push	r12
   1c1a8:	df 92       	push	r13
   1c1aa:	ef 92       	push	r14
   1c1ac:	ff 92       	push	r15
   1c1ae:	0f 93       	push	r16
   1c1b0:	1f 93       	push	r17
   1c1b2:	cf 93       	push	r28
   1c1b4:	df 93       	push	r29
   1c1b6:	e5 e6       	ldi	r30, 0x65	; 101
   1c1b8:	fd e0       	ldi	r31, 0x0D	; 13
   1c1ba:	13 82       	std	Z+3, r1	; 0x03
   1c1bc:	12 82       	std	Z+2, r1	; 0x02
   1c1be:	88 ee       	ldi	r24, 0xE8	; 232
   1c1c0:	48 2e       	mov	r4, r24
   1c1c2:	83 e0       	ldi	r24, 0x03	; 3
   1c1c4:	58 2e       	mov	r5, r24
   1c1c6:	61 2c       	mov	r6, r1
   1c1c8:	71 2c       	mov	r7, r1
   1c1ca:	44 82       	std	Z+4, r4	; 0x04
   1c1cc:	55 82       	std	Z+5, r5	; 0x05
   1c1ce:	66 82       	std	Z+6, r6	; 0x06
   1c1d0:	77 82       	std	Z+7, r7	; 0x07
   1c1d2:	8c e5       	ldi	r24, 0x5C	; 92
   1c1d4:	92 e0       	ldi	r25, 0x02	; 2
   1c1d6:	91 83       	std	Z+1, r25	; 0x01
   1c1d8:	80 83       	st	Z, r24
   1c1da:	85 ec       	ldi	r24, 0xC5	; 197
   1c1dc:	90 e0       	ldi	r25, 0x00	; 0
   1c1de:	95 87       	std	Z+13, r25	; 0x0d
   1c1e0:	84 87       	std	Z+12, r24	; 0x0c
   1c1e2:	84 ec       	ldi	r24, 0xC4	; 196
   1c1e4:	90 e0       	ldi	r25, 0x00	; 0
   1c1e6:	97 87       	std	Z+15, r25	; 0x0f
   1c1e8:	86 87       	std	Z+14, r24	; 0x0e
   1c1ea:	80 ec       	ldi	r24, 0xC0	; 192
   1c1ec:	90 e0       	ldi	r25, 0x00	; 0
   1c1ee:	91 8b       	std	Z+17, r25	; 0x11
   1c1f0:	80 8b       	std	Z+16, r24	; 0x10
   1c1f2:	81 ec       	ldi	r24, 0xC1	; 193
   1c1f4:	90 e0       	ldi	r25, 0x00	; 0
   1c1f6:	93 8b       	std	Z+19, r25	; 0x13
   1c1f8:	82 8b       	std	Z+18, r24	; 0x12
   1c1fa:	82 ec       	ldi	r24, 0xC2	; 194
   1c1fc:	90 e0       	ldi	r25, 0x00	; 0
   1c1fe:	95 8b       	std	Z+21, r25	; 0x15
   1c200:	84 8b       	std	Z+20, r24	; 0x14
   1c202:	86 ec       	ldi	r24, 0xC6	; 198
   1c204:	90 e0       	ldi	r25, 0x00	; 0
   1c206:	97 8b       	std	Z+23, r25	; 0x17
   1c208:	86 8b       	std	Z+22, r24	; 0x16
   1c20a:	11 8e       	std	Z+25, r1	; 0x19
   1c20c:	12 8e       	std	Z+26, r1	; 0x1a
   1c20e:	13 8e       	std	Z+27, r1	; 0x1b
   1c210:	14 8e       	std	Z+28, r1	; 0x1c
   1c212:	ee e8       	ldi	r30, 0x8E	; 142
   1c214:	f2 e1       	ldi	r31, 0x12	; 18
   1c216:	c2 ef       	ldi	r28, 0xF2	; 242
   1c218:	d2 e0       	ldi	r29, 0x02	; 2
   1c21a:	d1 83       	std	Z+1, r29	; 0x01
   1c21c:	c0 83       	st	Z, r28
   1c21e:	12 82       	std	Z+2, r1	; 0x02
   1c220:	13 82       	std	Z+3, r1	; 0x03
   1c222:	14 82       	std	Z+4, r1	; 0x04
   1c224:	15 82       	std	Z+5, r1	; 0x05
   1c226:	98 ef       	ldi	r25, 0xF8	; 248
   1c228:	e9 2e       	mov	r14, r25
   1c22a:	9f e0       	ldi	r25, 0x0F	; 15
   1c22c:	f9 2e       	mov	r15, r25
   1c22e:	f7 01       	movw	r30, r14
   1c230:	13 82       	std	Z+3, r1	; 0x03
   1c232:	12 82       	std	Z+2, r1	; 0x02
   1c234:	44 82       	std	Z+4, r4	; 0x04
   1c236:	55 82       	std	Z+5, r5	; 0x05
   1c238:	66 82       	std	Z+6, r6	; 0x06
   1c23a:	77 82       	std	Z+7, r7	; 0x07
   1c23c:	8e e6       	ldi	r24, 0x6E	; 110
   1c23e:	92 e0       	ldi	r25, 0x02	; 2
   1c240:	91 83       	std	Z+1, r25	; 0x01
   1c242:	80 83       	st	Z, r24
   1c244:	e4 e9       	ldi	r30, 0x94	; 148
   1c246:	f2 e1       	ldi	r31, 0x12	; 18
   1c248:	d1 83       	std	Z+1, r29	; 0x01
   1c24a:	c0 83       	st	Z, r28
   1c24c:	12 82       	std	Z+2, r1	; 0x02
   1c24e:	13 82       	std	Z+3, r1	; 0x03
   1c250:	14 82       	std	Z+4, r1	; 0x04
   1c252:	15 82       	std	Z+5, r1	; 0x05
   1c254:	e2 e0       	ldi	r30, 0x02	; 2
   1c256:	fe e0       	ldi	r31, 0x0E	; 14
   1c258:	80 e5       	ldi	r24, 0x50	; 80
   1c25a:	80 83       	st	Z, r24
   1c25c:	aa 24       	eor	r10, r10
   1c25e:	a3 94       	inc	r10
   1c260:	a1 82       	std	Z+1, r10	; 0x01
   1c262:	ea e9       	ldi	r30, 0x9A	; 154
   1c264:	f2 e1       	ldi	r31, 0x12	; 18
   1c266:	d1 83       	std	Z+1, r29	; 0x01
   1c268:	c0 83       	st	Z, r28
   1c26a:	12 82       	std	Z+2, r1	; 0x02
   1c26c:	13 82       	std	Z+3, r1	; 0x03
   1c26e:	14 82       	std	Z+4, r1	; 0x04
   1c270:	15 82       	std	Z+5, r1	; 0x05
   1c272:	e0 ea       	ldi	r30, 0xA0	; 160
   1c274:	f2 e1       	ldi	r31, 0x12	; 18
   1c276:	d1 83       	std	Z+1, r29	; 0x01
   1c278:	c0 83       	st	Z, r28
   1c27a:	12 82       	std	Z+2, r1	; 0x02
   1c27c:	13 82       	std	Z+3, r1	; 0x03
   1c27e:	14 82       	std	Z+4, r1	; 0x04
   1c280:	15 82       	std	Z+5, r1	; 0x05
   1c282:	e6 ea       	ldi	r30, 0xA6	; 166
   1c284:	f2 e1       	ldi	r31, 0x12	; 18
   1c286:	d1 83       	std	Z+1, r29	; 0x01
   1c288:	c0 83       	st	Z, r28
   1c28a:	12 82       	std	Z+2, r1	; 0x02
   1c28c:	13 82       	std	Z+3, r1	; 0x03
   1c28e:	14 82       	std	Z+4, r1	; 0x04
   1c290:	15 82       	std	Z+5, r1	; 0x05
   1c292:	ec ea       	ldi	r30, 0xAC	; 172
   1c294:	f2 e1       	ldi	r31, 0x12	; 18
   1c296:	d1 83       	std	Z+1, r29	; 0x01
   1c298:	c0 83       	st	Z, r28
   1c29a:	12 82       	std	Z+2, r1	; 0x02
   1c29c:	13 82       	std	Z+3, r1	; 0x03
   1c29e:	14 82       	std	Z+4, r1	; 0x04
   1c2a0:	15 82       	std	Z+5, r1	; 0x05
   1c2a2:	e2 eb       	ldi	r30, 0xB2	; 178
   1c2a4:	f2 e1       	ldi	r31, 0x12	; 18
   1c2a6:	d1 83       	std	Z+1, r29	; 0x01
   1c2a8:	c0 83       	st	Z, r28
   1c2aa:	12 82       	std	Z+2, r1	; 0x02
   1c2ac:	13 82       	std	Z+3, r1	; 0x03
   1c2ae:	14 82       	std	Z+4, r1	; 0x04
   1c2b0:	15 82       	std	Z+5, r1	; 0x05
   1c2b2:	e4 e0       	ldi	r30, 0x04	; 4
   1c2b4:	fe e0       	ldi	r31, 0x0E	; 14
   1c2b6:	d1 83       	std	Z+1, r29	; 0x01
   1c2b8:	c0 83       	st	Z, r28
   1c2ba:	12 82       	std	Z+2, r1	; 0x02
   1c2bc:	13 82       	std	Z+3, r1	; 0x03
   1c2be:	14 82       	std	Z+4, r1	; 0x04
   1c2c0:	15 82       	std	Z+5, r1	; 0x05
   1c2c2:	13 86       	std	Z+11, r1	; 0x0b
   1c2c4:	12 86       	std	Z+10, r1	; 0x0a
   1c2c6:	2a e0       	ldi	r18, 0x0A	; 10
   1c2c8:	b2 2e       	mov	r11, r18
   1c2ca:	b4 86       	std	Z+12, r11	; 0x0c
   1c2cc:	e1 e1       	ldi	r30, 0x11	; 17
   1c2ce:	fe e0       	ldi	r31, 0x0E	; 14
   1c2d0:	d1 83       	std	Z+1, r29	; 0x01
   1c2d2:	c0 83       	st	Z, r28
   1c2d4:	12 82       	std	Z+2, r1	; 0x02
   1c2d6:	13 82       	std	Z+3, r1	; 0x03
   1c2d8:	14 82       	std	Z+4, r1	; 0x04
   1c2da:	15 82       	std	Z+5, r1	; 0x05
   1c2dc:	e8 eb       	ldi	r30, 0xB8	; 184
   1c2de:	f2 e1       	ldi	r31, 0x12	; 18
   1c2e0:	d1 83       	std	Z+1, r29	; 0x01
   1c2e2:	c0 83       	st	Z, r28
   1c2e4:	12 82       	std	Z+2, r1	; 0x02
   1c2e6:	13 82       	std	Z+3, r1	; 0x03
   1c2e8:	14 82       	std	Z+4, r1	; 0x04
   1c2ea:	15 82       	std	Z+5, r1	; 0x05
   1c2ec:	8a e0       	ldi	r24, 0x0A	; 10
   1c2ee:	90 e0       	ldi	r25, 0x00	; 0
   1c2f0:	0e 94 c2 e9 	call	0x1d384	; 0x1d384 <malloc>
   1c2f4:	90 93 18 0e 	sts	0x0E18, r25	; 0x800e18 <array_pids+0x1>
   1c2f8:	80 93 17 0e 	sts	0x0E17, r24	; 0x800e17 <array_pids>
   1c2fc:	ee eb       	ldi	r30, 0xBE	; 190
   1c2fe:	f2 e1       	ldi	r31, 0x12	; 18
   1c300:	d1 83       	std	Z+1, r29	; 0x01
   1c302:	c0 83       	st	Z, r28
   1c304:	12 82       	std	Z+2, r1	; 0x02
   1c306:	13 82       	std	Z+3, r1	; 0x03
   1c308:	14 82       	std	Z+4, r1	; 0x04
   1c30a:	15 82       	std	Z+5, r1	; 0x05
   1c30c:	e4 ec       	ldi	r30, 0xC4	; 196
   1c30e:	f2 e1       	ldi	r31, 0x12	; 18
   1c310:	d1 83       	std	Z+1, r29	; 0x01
   1c312:	c0 83       	st	Z, r28
   1c314:	12 82       	std	Z+2, r1	; 0x02
   1c316:	13 82       	std	Z+3, r1	; 0x03
   1c318:	14 82       	std	Z+4, r1	; 0x04
   1c31a:	15 82       	std	Z+5, r1	; 0x05
   1c31c:	8b e5       	ldi	r24, 0x5B	; 91
   1c31e:	97 e0       	ldi	r25, 0x07	; 7
   1c320:	90 93 3e 0e 	sts	0x0E3E, r25	; 0x800e3e <device+0x25>
   1c324:	80 93 3d 0e 	sts	0x0E3D, r24	; 0x800e3d <device+0x24>
   1c328:	e1 e6       	ldi	r30, 0x61	; 97
   1c32a:	f4 e1       	ldi	r31, 0x14	; 20
   1c32c:	d1 83       	std	Z+1, r29	; 0x01
   1c32e:	c0 83       	st	Z, r28
   1c330:	12 82       	std	Z+2, r1	; 0x02
   1c332:	13 82       	std	Z+3, r1	; 0x03
   1c334:	14 82       	std	Z+4, r1	; 0x04
   1c336:	15 82       	std	Z+5, r1	; 0x05
   1c338:	0b e7       	ldi	r16, 0x7B	; 123
   1c33a:	12 e1       	ldi	r17, 0x12	; 18
   1c33c:	88 e1       	ldi	r24, 0x18	; 24
   1c33e:	f8 01       	movw	r30, r16
   1c340:	84 83       	std	Z+4, r24	; 0x04
   1c342:	8a e1       	ldi	r24, 0x1A	; 26
   1c344:	83 83       	std	Z+3, r24	; 0x03
   1c346:	89 e1       	ldi	r24, 0x19	; 25
   1c348:	85 83       	std	Z+5, r24	; 0x05
   1c34a:	82 e0       	ldi	r24, 0x02	; 2
   1c34c:	82 83       	std	Z+2, r24	; 0x02
   1c34e:	10 82       	st	Z, r1
   1c350:	11 82       	std	Z+1, r1	; 0x01
   1c352:	16 82       	std	Z+6, r1	; 0x06
   1c354:	60 e0       	ldi	r22, 0x00	; 0
   1c356:	89 e1       	ldi	r24, 0x19	; 25
   1c358:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
   1c35c:	84 e7       	ldi	r24, 0x74	; 116
   1c35e:	92 e1       	ldi	r25, 0x12	; 18
   1c360:	0e 94 76 b4 	call	0x168ec	; 0x168ec <DateTime::DateTime(unsigned long) [clone .constprop.146]>
   1c364:	a4 e5       	ldi	r26, 0x54	; 84
   1c366:	b4 e1       	ldi	r27, 0x14	; 20
   1c368:	13 96       	adiw	r26, 0x03	; 3
   1c36a:	1c 92       	st	X, r1
   1c36c:	1e 92       	st	-X, r1
   1c36e:	12 97       	sbiw	r26, 0x02	; 2
   1c370:	14 96       	adiw	r26, 0x04	; 4
   1c372:	4d 92       	st	X+, r4
   1c374:	5d 92       	st	X+, r5
   1c376:	6d 92       	st	X+, r6
   1c378:	7c 92       	st	X, r7
   1c37a:	17 97       	sbiw	r26, 0x07	; 7
   1c37c:	20 ed       	ldi	r18, 0xD0	; 208
   1c37e:	32 e0       	ldi	r19, 0x02	; 2
   1c380:	11 96       	adiw	r26, 0x01	; 1
   1c382:	3c 93       	st	X, r19
   1c384:	2e 93       	st	-X, r18
   1c386:	88 e0       	ldi	r24, 0x08	; 8
   1c388:	1c 96       	adiw	r26, 0x0c	; 12
   1c38a:	8c 93       	st	X, r24
   1c38c:	1c 97       	sbiw	r26, 0x0c	; 12
   1c38e:	e7 e6       	ldi	r30, 0x67	; 103
   1c390:	f2 e1       	ldi	r31, 0x12	; 18
   1c392:	13 82       	std	Z+3, r1	; 0x03
   1c394:	12 82       	std	Z+2, r1	; 0x02
   1c396:	44 82       	std	Z+4, r4	; 0x04
   1c398:	55 82       	std	Z+5, r5	; 0x05
   1c39a:	66 82       	std	Z+6, r6	; 0x06
   1c39c:	77 82       	std	Z+7, r7	; 0x07
   1c39e:	31 83       	std	Z+1, r19	; 0x01
   1c3a0:	20 83       	st	Z, r18
   1c3a2:	84 87       	std	Z+12, r24	; 0x0c
   1c3a4:	ec e4       	ldi	r30, 0x4C	; 76
   1c3a6:	f2 e1       	ldi	r31, 0x12	; 18
   1c3a8:	13 82       	std	Z+3, r1	; 0x03
   1c3aa:	12 82       	std	Z+2, r1	; 0x02
   1c3ac:	44 82       	std	Z+4, r4	; 0x04
   1c3ae:	55 82       	std	Z+5, r5	; 0x05
   1c3b0:	66 82       	std	Z+6, r6	; 0x06
   1c3b2:	77 82       	std	Z+7, r7	; 0x07
   1c3b4:	28 ea       	ldi	r18, 0xA8	; 168
   1c3b6:	32 e0       	ldi	r19, 0x02	; 2
   1c3b8:	31 83       	std	Z+1, r19	; 0x01
   1c3ba:	20 83       	st	Z, r18
   1c3bc:	84 87       	std	Z+12, r24	; 0x0c
   1c3be:	d0 8b       	std	Z+16, r29	; 0x10
   1c3c0:	c7 87       	std	Z+15, r28	; 0x0f
   1c3c2:	11 8a       	std	Z+17, r1	; 0x11
   1c3c4:	12 8a       	std	Z+18, r1	; 0x12
   1c3c6:	13 8a       	std	Z+19, r1	; 0x13
   1c3c8:	14 8a       	std	Z+20, r1	; 0x14
   1c3ca:	d0 93 3f 12 	sts	0x123F, r29	; 0x80123f <mqtt_client+0x210>
   1c3ce:	c0 93 3e 12 	sts	0x123E, r28	; 0x80123e <mqtt_client+0x20f>
   1c3d2:	10 92 40 12 	sts	0x1240, r1	; 0x801240 <mqtt_client+0x211>
   1c3d6:	10 92 41 12 	sts	0x1241, r1	; 0x801241 <mqtt_client+0x212>
   1c3da:	10 92 42 12 	sts	0x1242, r1	; 0x801242 <mqtt_client+0x213>
   1c3de:	10 92 43 12 	sts	0x1243, r1	; 0x801243 <mqtt_client+0x214>
   1c3e2:	cc 24       	eor	r12, r12
   1c3e4:	ca 94       	dec	r12
   1c3e6:	dc 2c       	mov	r13, r12
   1c3e8:	d0 92 4b 12 	sts	0x124B, r13	; 0x80124b <mqtt_client+0x21c>
   1c3ec:	c0 92 4a 12 	sts	0x124A, r12	; 0x80124a <mqtt_client+0x21b>
   1c3f0:	b0 93 30 10 	sts	0x1030, r27	; 0x801030 <mqtt_client+0x1>
   1c3f4:	a0 93 2f 10 	sts	0x102F, r26	; 0x80102f <mqtt_client>
   1c3f8:	10 92 49 12 	sts	0x1249, r1	; 0x801249 <mqtt_client+0x21a>
   1c3fc:	10 92 48 12 	sts	0x1248, r1	; 0x801248 <mqtt_client+0x219>
   1c400:	e9 e2       	ldi	r30, 0x29	; 41
   1c402:	f0 e1       	ldi	r31, 0x10	; 16
   1c404:	13 82       	std	Z+3, r1	; 0x03
   1c406:	12 82       	std	Z+2, r1	; 0x02
   1c408:	8a e9       	ldi	r24, 0x9A	; 154
   1c40a:	92 e0       	ldi	r25, 0x02	; 2
   1c40c:	91 83       	std	Z+1, r25	; 0x01
   1c40e:	80 83       	st	Z, r24
   1c410:	80 e5       	ldi	r24, 0x50	; 80
   1c412:	90 e0       	ldi	r25, 0x00	; 0
   1c414:	95 83       	std	Z+5, r25	; 0x05
   1c416:	84 83       	std	Z+4, r24	; 0x04
   1c418:	e1 e1       	ldi	r30, 0x11	; 17
   1c41a:	f0 e1       	ldi	r31, 0x10	; 16
   1c41c:	83 e0       	ldi	r24, 0x03	; 3
   1c41e:	90 e0       	ldi	r25, 0x00	; 0
   1c420:	91 83       	std	Z+1, r25	; 0x01
   1c422:	80 83       	st	Z, r24
   1c424:	82 e0       	ldi	r24, 0x02	; 2
   1c426:	90 e0       	ldi	r25, 0x00	; 0
   1c428:	93 83       	std	Z+3, r25	; 0x03
   1c42a:	82 83       	std	Z+2, r24	; 0x02
   1c42c:	16 82       	std	Z+6, r1	; 0x06
   1c42e:	80 e2       	ldi	r24, 0x20	; 32
   1c430:	87 83       	std	Z+7, r24	; 0x07
   1c432:	10 86       	std	Z+8, r1	; 0x08
   1c434:	85 e0       	ldi	r24, 0x05	; 5
   1c436:	86 87       	std	Z+14, r24	; 0x0e
   1c438:	85 e0       	ldi	r24, 0x05	; 5
   1c43a:	90 e0       	ldi	r25, 0x00	; 0
   1c43c:	a0 e0       	ldi	r26, 0x00	; 0
   1c43e:	b0 e0       	ldi	r27, 0x00	; 0
   1c440:	84 8b       	std	Z+20, r24	; 0x14
   1c442:	95 8b       	std	Z+21, r25	; 0x15
   1c444:	a6 8b       	std	Z+22, r26	; 0x16
   1c446:	b7 8b       	std	Z+23, r27	; 0x17
   1c448:	11 86       	std	Z+9, r1	; 0x09
   1c44a:	a2 ee       	ldi	r26, 0xE2	; 226
   1c44c:	b2 e1       	ldi	r27, 0x12	; 18
   1c44e:	d0 96       	adiw	r26, 0x30	; 48
   1c450:	fc 93       	st	X, r31
   1c452:	ee 93       	st	-X, r30
   1c454:	9f 97       	sbiw	r26, 0x2f	; 47
   1c456:	87 e1       	ldi	r24, 0x17	; 23
   1c458:	93 e1       	ldi	r25, 0x13	; 19
   1c45a:	90 93 b2 13 	sts	0x13B2, r25	; 0x8013b2 <network+0xd0>
   1c45e:	80 93 b1 13 	sts	0x13B1, r24	; 0x8013b1 <network+0xcf>
   1c462:	8f eb       	ldi	r24, 0xBF	; 191
   1c464:	93 e1       	ldi	r25, 0x13	; 19
   1c466:	90 93 be 13 	sts	0x13BE, r25	; 0x8013be <network+0xdc>
   1c46a:	80 93 bd 13 	sts	0x13BD, r24	; 0x8013bd <network+0xdb>
   1c46e:	83 eb       	ldi	r24, 0xB3	; 179
   1c470:	93 e1       	ldi	r25, 0x13	; 19
   1c472:	98 96       	adiw	r26, 0x28	; 40
   1c474:	9c 93       	st	X, r25
   1c476:	8e 93       	st	-X, r24
   1c478:	97 97       	sbiw	r26, 0x27	; 39
   1c47a:	9b 96       	adiw	r26, 0x2b	; 43
   1c47c:	1d 92       	st	X+, r1
   1c47e:	1d 92       	st	X+, r1
   1c480:	1d 92       	st	X+, r1
   1c482:	1c 92       	st	X, r1
   1c484:	9e 97       	sbiw	r26, 0x2e	; 46
   1c486:	9a 96       	adiw	r26, 0x2a	; 42
   1c488:	1c 92       	st	X, r1
   1c48a:	9a 97       	sbiw	r26, 0x2a	; 42
   1c48c:	99 96       	adiw	r26, 0x29	; 41
   1c48e:	1c 92       	st	X, r1
   1c490:	99 97       	sbiw	r26, 0x29	; 41
   1c492:	1c 92       	st	X, r1
   1c494:	ca ec       	ldi	r28, 0xCA	; 202
   1c496:	d2 e1       	ldi	r29, 0x12	; 18
   1c498:	ff 83       	std	Y+7, r31	; 0x07
   1c49a:	ee 83       	std	Y+6, r30	; 0x06
   1c49c:	b9 87       	std	Y+9, r27	; 0x09
   1c49e:	a8 87       	std	Y+8, r26	; 0x08
   1c4a0:	c4 e0       	ldi	r28, 0x04	; 4
   1c4a2:	d0 e1       	ldi	r29, 0x10	; 16
   1c4a4:	f9 82       	std	Y+1, r15	; 0x01
   1c4a6:	e8 82       	st	Y, r14
   1c4a8:	88 e4       	ldi	r24, 0x48	; 72
   1c4aa:	8a 83       	std	Y+2, r24	; 0x02
   1c4ac:	ec e0       	ldi	r30, 0x0C	; 12
   1c4ae:	f2 e0       	ldi	r31, 0x02	; 2
   1c4b0:	fc 87       	std	Y+12, r31	; 0x0c
   1c4b2:	eb 87       	std	Y+11, r30	; 0x0b
   1c4b4:	91 81       	ldd	r25, Z+1	; 0x01
   1c4b6:	9b 83       	std	Y+3, r25	; 0x03
   1c4b8:	80 81       	ld	r24, Z
   1c4ba:	89 1b       	sub	r24, r25
   1c4bc:	99 0b       	sbc	r25, r25
   1c4be:	ee 24       	eor	r14, r14
   1c4c0:	e3 94       	inc	r14
   1c4c2:	f1 2c       	mov	r15, r1
   1c4c4:	97 01       	movw	r18, r14
   1c4c6:	02 c0       	rjmp	.+4      	; 0x1c4cc <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7402+0x332>
   1c4c8:	22 0f       	add	r18, r18
   1c4ca:	33 1f       	adc	r19, r19
   1c4cc:	8a 95       	dec	r24
   1c4ce:	e2 f7       	brpl	.-8      	; 0x1c4c8 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7402+0x32e>
   1c4d0:	c9 01       	movw	r24, r18
   1c4d2:	91 95       	neg	r25
   1c4d4:	81 95       	neg	r24
   1c4d6:	91 09       	sbc	r25, r1
   1c4d8:	9d 83       	std	Y+5, r25	; 0x05
   1c4da:	8c 83       	std	Y+4, r24	; 0x04
   1c4dc:	82 81       	ldd	r24, Z+2	; 0x02
   1c4de:	8e 83       	std	Y+6, r24	; 0x06
   1c4e0:	b7 01       	movw	r22, r14
   1c4e2:	02 c0       	rjmp	.+4      	; 0x1c4e8 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7402+0x34e>
   1c4e4:	66 0f       	add	r22, r22
   1c4e6:	77 1f       	adc	r23, r23
   1c4e8:	8a 95       	dec	r24
   1c4ea:	e2 f7       	brpl	.-8      	; 0x1c4e4 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7402+0x34a>
   1c4ec:	07 2e       	mov	r0, r23
   1c4ee:	00 0c       	add	r0, r0
   1c4f0:	88 0b       	sbc	r24, r24
   1c4f2:	99 0b       	sbc	r25, r25
   1c4f4:	0e 94 fa ed 	call	0x1dbf4	; 0x1dbf4 <__floatsisf>
   1c4f8:	9b 01       	movw	r18, r22
   1c4fa:	ac 01       	movw	r20, r24
   1c4fc:	60 e0       	ldi	r22, 0x00	; 0
   1c4fe:	70 e0       	ldi	r23, 0x00	; 0
   1c500:	80 e8       	ldi	r24, 0x80	; 128
   1c502:	9f e3       	ldi	r25, 0x3F	; 63
   1c504:	0e 94 2d f0 	call	0x1e05a	; 0x1e05a <__divsf3>
   1c508:	6f 83       	std	Y+7, r22	; 0x07
   1c50a:	78 87       	std	Y+8, r23	; 0x08
   1c50c:	89 87       	std	Y+9, r24	; 0x09
   1c50e:	9a 87       	std	Y+10, r25	; 0x0a
   1c510:	c9 eb       	ldi	r28, 0xB9	; 185
   1c512:	df e0       	ldi	r29, 0x0F	; 15
   1c514:	80 e0       	ldi	r24, 0x00	; 0
   1c516:	98 ef       	ldi	r25, 0xF8	; 248
   1c518:	99 87       	std	Y+9, r25	; 0x09
   1c51a:	88 87       	std	Y+8, r24	; 0x08
   1c51c:	20 ee       	ldi	r18, 0xE0	; 224
   1c51e:	37 e0       	ldi	r19, 0x07	; 7
   1c520:	3f 83       	std	Y+7, r19	; 0x07
   1c522:	2e 83       	std	Y+6, r18	; 0x06
   1c524:	9b 87       	std	Y+11, r25	; 0x0b
   1c526:	8a 87       	std	Y+10, r24	; 0x0a
   1c528:	ac 86       	std	Y+12, r10	; 0x0c
   1c52a:	1d 86       	std	Y+13, r1	; 0x0d
   1c52c:	86 e8       	ldi	r24, 0x86	; 134
   1c52e:	92 e0       	ldi	r25, 0x02	; 2
   1c530:	99 83       	std	Y+1, r25	; 0x01
   1c532:	88 83       	st	Y, r24
   1c534:	82 e2       	ldi	r24, 0x22	; 34
   1c536:	8e af       	std	Y+62, r24	; 0x3e
   1c538:	e2 e7       	ldi	r30, 0x72	; 114
   1c53a:	fb e7       	ldi	r31, 0x7B	; 123
   1c53c:	e4 91       	lpm	r30, Z
   1c53e:	f0 e0       	ldi	r31, 0x00	; 0
   1c540:	ee 0f       	add	r30, r30
   1c542:	ff 1f       	adc	r31, r31
   1c544:	ef 5b       	subi	r30, 0xBF	; 191
   1c546:	f4 48       	sbci	r31, 0x84	; 132
   1c548:	a5 91       	lpm	r26, Z+
   1c54a:	b4 91       	lpm	r27, Z
   1c54c:	bf a7       	std	Y+47, r27	; 0x2f
   1c54e:	ae a7       	std	Y+46, r26	; 0x2e
   1c550:	e4 e7       	ldi	r30, 0x74	; 116
   1c552:	fb e7       	ldi	r31, 0x7B	; 123
   1c554:	e4 91       	lpm	r30, Z
   1c556:	f0 e0       	ldi	r31, 0x00	; 0
   1c558:	ee 0f       	add	r30, r30
   1c55a:	ff 1f       	adc	r31, r31
   1c55c:	ef 5b       	subi	r30, 0xBF	; 191
   1c55e:	f4 48       	sbci	r31, 0x84	; 132
   1c560:	85 91       	lpm	r24, Z+
   1c562:	94 91       	lpm	r25, Z
   1c564:	99 ab       	std	Y+49, r25	; 0x31
   1c566:	88 ab       	std	Y+48, r24	; 0x30
   1c568:	e5 e7       	ldi	r30, 0x75	; 117
   1c56a:	fb e7       	ldi	r31, 0x7B	; 123
   1c56c:	e4 91       	lpm	r30, Z
   1c56e:	f0 e0       	ldi	r31, 0x00	; 0
   1c570:	ee 0f       	add	r30, r30
   1c572:	ff 1f       	adc	r31, r31
   1c574:	ef 5b       	subi	r30, 0xBF	; 191
   1c576:	f4 48       	sbci	r31, 0x84	; 132
   1c578:	85 91       	lpm	r24, Z+
   1c57a:	94 91       	lpm	r25, Z
   1c57c:	9b ab       	std	Y+51, r25	; 0x33
   1c57e:	8a ab       	std	Y+50, r24	; 0x32
   1c580:	e1 e7       	ldi	r30, 0x71	; 113
   1c582:	fb e7       	ldi	r31, 0x7B	; 123
   1c584:	e4 91       	lpm	r30, Z
   1c586:	f0 e0       	ldi	r31, 0x00	; 0
   1c588:	ee 0f       	add	r30, r30
   1c58a:	ff 1f       	adc	r31, r31
   1c58c:	ef 5b       	subi	r30, 0xBF	; 191
   1c58e:	f4 48       	sbci	r31, 0x84	; 132
   1c590:	85 91       	lpm	r24, Z+
   1c592:	94 91       	lpm	r25, Z
   1c594:	9d ab       	std	Y+53, r25	; 0x35
   1c596:	8c ab       	std	Y+52, r24	; 0x34
   1c598:	ec e2       	ldi	r30, 0x2C	; 44
   1c59a:	fb e7       	ldi	r31, 0x7B	; 123
   1c59c:	84 91       	lpm	r24, Z
   1c59e:	8e ab       	std	Y+54, r24	; 0x36
   1c5a0:	ee e2       	ldi	r30, 0x2E	; 46
   1c5a2:	fb e7       	ldi	r31, 0x7B	; 123
   1c5a4:	24 91       	lpm	r18, Z
   1c5a6:	2f ab       	std	Y+55, r18	; 0x37
   1c5a8:	ef e2       	ldi	r30, 0x2F	; 47
   1c5aa:	fb e7       	ldi	r31, 0x7B	; 123
   1c5ac:	94 91       	lpm	r25, Z
   1c5ae:	98 af       	std	Y+56, r25	; 0x38
   1c5b0:	eb e2       	ldi	r30, 0x2B	; 43
   1c5b2:	fb e7       	ldi	r31, 0x7B	; 123
   1c5b4:	e4 91       	lpm	r30, Z
   1c5b6:	e9 af       	std	Y+57, r30	; 0x39
   1c5b8:	38 2f       	mov	r19, r24
   1c5ba:	30 95       	com	r19
   1c5bc:	3a af       	std	Y+58, r19	; 0x3a
   1c5be:	20 95       	com	r18
   1c5c0:	2b af       	std	Y+59, r18	; 0x3b
   1c5c2:	90 95       	com	r25
   1c5c4:	9c af       	std	Y+60, r25	; 0x3c
   1c5c6:	e0 95       	com	r30
   1c5c8:	ed af       	std	Y+61, r30	; 0x3d
   1c5ca:	ec 91       	ld	r30, X
   1c5cc:	e8 2b       	or	r30, r24
   1c5ce:	ec 93       	st	X, r30
   1c5d0:	e8 a9       	ldd	r30, Y+48	; 0x30
   1c5d2:	f9 a9       	ldd	r31, Y+49	; 0x31
   1c5d4:	80 81       	ld	r24, Z
   1c5d6:	9f a9       	ldd	r25, Y+55	; 0x37
   1c5d8:	89 2b       	or	r24, r25
   1c5da:	80 83       	st	Z, r24
   1c5dc:	ea a9       	ldd	r30, Y+50	; 0x32
   1c5de:	fb a9       	ldd	r31, Y+51	; 0x33
   1c5e0:	80 81       	ld	r24, Z
   1c5e2:	98 ad       	ldd	r25, Y+56	; 0x38
   1c5e4:	89 2b       	or	r24, r25
   1c5e6:	80 83       	st	Z, r24
   1c5e8:	ec a9       	ldd	r30, Y+52	; 0x34
   1c5ea:	fd a9       	ldd	r31, Y+53	; 0x35
   1c5ec:	80 81       	ld	r24, Z
   1c5ee:	99 ad       	ldd	r25, Y+57	; 0x39
   1c5f0:	89 2b       	or	r24, r25
   1c5f2:	80 83       	st	Z, r24
   1c5f4:	61 e0       	ldi	r22, 0x01	; 1
   1c5f6:	81 e2       	ldi	r24, 0x21	; 33
   1c5f8:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
   1c5fc:	61 e0       	ldi	r22, 0x01	; 1
   1c5fe:	83 e2       	ldi	r24, 0x23	; 35
   1c600:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
   1c604:	61 e0       	ldi	r22, 0x01	; 1
   1c606:	84 e2       	ldi	r24, 0x24	; 36
   1c608:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
   1c60c:	61 e0       	ldi	r22, 0x01	; 1
   1c60e:	80 e2       	ldi	r24, 0x20	; 32
   1c610:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
   1c614:	61 e0       	ldi	r22, 0x01	; 1
   1c616:	82 e2       	ldi	r24, 0x22	; 34
   1c618:	0e 94 0b 59 	call	0xb216	; 0xb216 <digitalWrite>
   1c61c:	61 e0       	ldi	r22, 0x01	; 1
   1c61e:	82 e2       	ldi	r24, 0x22	; 34
   1c620:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
   1c624:	1f 8a       	std	Y+23, r1	; 0x17
   1c626:	1e 8a       	std	Y+22, r1	; 0x16
   1c628:	86 e9       	ldi	r24, 0x96	; 150
   1c62a:	97 e7       	ldi	r25, 0x77	; 119
   1c62c:	9b 8f       	std	Y+27, r25	; 0x1b
   1c62e:	8a 8f       	std	Y+26, r24	; 0x1a
   1c630:	20 e4       	ldi	r18, 0x40	; 64
   1c632:	31 e0       	ldi	r19, 0x01	; 1
   1c634:	3f 87       	std	Y+15, r19	; 0x0f
   1c636:	2e 87       	std	Y+14, r18	; 0x0e
   1c638:	80 ee       	ldi	r24, 0xE0	; 224
   1c63a:	91 e0       	ldi	r25, 0x01	; 1
   1c63c:	99 8b       	std	Y+17, r25	; 0x11
   1c63e:	88 8b       	std	Y+16, r24	; 0x10
   1c640:	41 b1       	in	r20, 0x01	; 1
   1c642:	4f ef       	ldi	r20, 0xFF	; 255
   1c644:	41 b9       	out	0x01, r20	; 1
   1c646:	3b 8b       	std	Y+19, r19	; 0x13
   1c648:	2a 8b       	std	Y+18, r18	; 0x12
   1c64a:	9d 8b       	std	Y+21, r25	; 0x15
   1c64c:	8c 8b       	std	Y+20, r24	; 0x14
   1c64e:	ed e6       	ldi	r30, 0x6D	; 109
   1c650:	fb e7       	ldi	r31, 0x7B	; 123
   1c652:	e4 91       	lpm	r30, Z
   1c654:	f0 e0       	ldi	r31, 0x00	; 0
   1c656:	ee 0f       	add	r30, r30
   1c658:	ff 1f       	adc	r31, r31
   1c65a:	ef 5b       	subi	r30, 0xBF	; 191
   1c65c:	f4 48       	sbci	r31, 0x84	; 132
   1c65e:	85 91       	lpm	r24, Z+
   1c660:	94 91       	lpm	r25, Z
   1c662:	c6 e9       	ldi	r28, 0x96	; 150
   1c664:	df e0       	ldi	r29, 0x0F	; 15
   1c666:	9a 8b       	std	Y+18, r25	; 0x12
   1c668:	89 8b       	std	Y+17, r24	; 0x11
   1c66a:	ec e6       	ldi	r30, 0x6C	; 108
   1c66c:	fb e7       	ldi	r31, 0x7B	; 123
   1c66e:	e4 91       	lpm	r30, Z
   1c670:	f0 e0       	ldi	r31, 0x00	; 0
   1c672:	ee 0f       	add	r30, r30
   1c674:	ff 1f       	adc	r31, r31
   1c676:	ef 5b       	subi	r30, 0xBF	; 191
   1c678:	f4 48       	sbci	r31, 0x84	; 132
   1c67a:	85 91       	lpm	r24, Z+
   1c67c:	94 91       	lpm	r25, Z
   1c67e:	9c 8b       	std	Y+20, r25	; 0x14
   1c680:	8b 8b       	std	Y+19, r24	; 0x13
   1c682:	ee e6       	ldi	r30, 0x6E	; 110
   1c684:	fb e7       	ldi	r31, 0x7B	; 123
   1c686:	e4 91       	lpm	r30, Z
   1c688:	f0 e0       	ldi	r31, 0x00	; 0
   1c68a:	ee 0f       	add	r30, r30
   1c68c:	ff 1f       	adc	r31, r31
   1c68e:	e5 50       	subi	r30, 0x05	; 5
   1c690:	f5 48       	sbci	r31, 0x85	; 133
   1c692:	85 91       	lpm	r24, Z+
   1c694:	94 91       	lpm	r25, Z
   1c696:	9e 8b       	std	Y+22, r25	; 0x16
   1c698:	8d 8b       	std	Y+21, r24	; 0x15
   1c69a:	ef e6       	ldi	r30, 0x6F	; 111
   1c69c:	fb e7       	ldi	r31, 0x7B	; 123
   1c69e:	e4 91       	lpm	r30, Z
   1c6a0:	f0 e0       	ldi	r31, 0x00	; 0
   1c6a2:	ee 0f       	add	r30, r30
   1c6a4:	ff 1f       	adc	r31, r31
   1c6a6:	ef 5b       	subi	r30, 0xBF	; 191
   1c6a8:	f4 48       	sbci	r31, 0x84	; 132
   1c6aa:	85 91       	lpm	r24, Z+
   1c6ac:	94 91       	lpm	r25, Z
   1c6ae:	98 8f       	std	Y+24, r25	; 0x18
   1c6b0:	8f 8b       	std	Y+23, r24	; 0x17
   1c6b2:	e8 e5       	ldi	r30, 0x58	; 88
   1c6b4:	fb e7       	ldi	r31, 0x7B	; 123
   1c6b6:	e4 91       	lpm	r30, Z
   1c6b8:	f0 e0       	ldi	r31, 0x00	; 0
   1c6ba:	ee 0f       	add	r30, r30
   1c6bc:	ff 1f       	adc	r31, r31
   1c6be:	e5 50       	subi	r30, 0x05	; 5
   1c6c0:	f5 48       	sbci	r31, 0x85	; 133
   1c6c2:	85 91       	lpm	r24, Z+
   1c6c4:	94 91       	lpm	r25, Z
   1c6c6:	9a 8f       	std	Y+26, r25	; 0x1a
   1c6c8:	89 8f       	std	Y+25, r24	; 0x19
   1c6ca:	e0 e7       	ldi	r30, 0x70	; 112
   1c6cc:	fb e7       	ldi	r31, 0x7B	; 123
   1c6ce:	e4 91       	lpm	r30, Z
   1c6d0:	f0 e0       	ldi	r31, 0x00	; 0
   1c6d2:	ee 0f       	add	r30, r30
   1c6d4:	ff 1f       	adc	r31, r31
   1c6d6:	ef 5b       	subi	r30, 0xBF	; 191
   1c6d8:	f4 48       	sbci	r31, 0x84	; 132
   1c6da:	85 91       	lpm	r24, Z+
   1c6dc:	94 91       	lpm	r25, Z
   1c6de:	9c 8f       	std	Y+28, r25	; 0x1c
   1c6e0:	8b 8f       	std	Y+27, r24	; 0x1b
   1c6e2:	e7 e2       	ldi	r30, 0x27	; 39
   1c6e4:	fb e7       	ldi	r31, 0x7B	; 123
   1c6e6:	e4 91       	lpm	r30, Z
   1c6e8:	ed 8f       	std	Y+29, r30	; 0x1d
   1c6ea:	e6 e2       	ldi	r30, 0x26	; 38
   1c6ec:	fb e7       	ldi	r31, 0x7B	; 123
   1c6ee:	e4 91       	lpm	r30, Z
   1c6f0:	ee 8f       	std	Y+30, r30	; 0x1e
   1c6f2:	e8 e2       	ldi	r30, 0x28	; 40
   1c6f4:	fb e7       	ldi	r31, 0x7B	; 123
   1c6f6:	e4 91       	lpm	r30, Z
   1c6f8:	ef 8f       	std	Y+31, r30	; 0x1f
   1c6fa:	e9 e2       	ldi	r30, 0x29	; 41
   1c6fc:	fb e7       	ldi	r31, 0x7B	; 123
   1c6fe:	e4 91       	lpm	r30, Z
   1c700:	e8 a3       	std	Y+32, r30	; 0x20
   1c702:	e2 e1       	ldi	r30, 0x12	; 18
   1c704:	fb e7       	ldi	r31, 0x7B	; 123
   1c706:	e4 91       	lpm	r30, Z
   1c708:	e9 a3       	std	Y+33, r30	; 0x21
   1c70a:	ea e2       	ldi	r30, 0x2A	; 42
   1c70c:	fb e7       	ldi	r31, 0x7B	; 123
   1c70e:	e4 91       	lpm	r30, Z
   1c710:	ea a3       	std	Y+34, r30	; 0x22
   1c712:	61 e0       	ldi	r22, 0x01	; 1
   1c714:	8c e1       	ldi	r24, 0x1C	; 28
   1c716:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
   1c71a:	61 e0       	ldi	r22, 0x01	; 1
   1c71c:	8b e1       	ldi	r24, 0x1B	; 27
   1c71e:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
   1c722:	60 e0       	ldi	r22, 0x00	; 0
   1c724:	8d e1       	ldi	r24, 0x1D	; 29
   1c726:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
   1c72a:	61 e0       	ldi	r22, 0x01	; 1
   1c72c:	8e e1       	ldi	r24, 0x1E	; 30
   1c72e:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
   1c732:	60 e0       	ldi	r22, 0x00	; 0
   1c734:	87 e0       	ldi	r24, 0x07	; 7
   1c736:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
   1c73a:	61 e0       	ldi	r22, 0x01	; 1
   1c73c:	8f e1       	ldi	r24, 0x1F	; 31
   1c73e:	0e 94 39 59 	call	0xb272	; 0xb272 <pinMode>
   1c742:	1c 86       	std	Y+12, r1	; 0x0c
   1c744:	1d 86       	std	Y+13, r1	; 0x0d
   1c746:	1e 86       	std	Y+14, r1	; 0x0e
   1c748:	1f 86       	std	Y+15, r1	; 0x0f
   1c74a:	18 8a       	std	Y+16, r1	; 0x10
   1c74c:	19 86       	std	Y+9, r1	; 0x09
   1c74e:	18 86       	std	Y+8, r1	; 0x08
   1c750:	1b 86       	std	Y+11, r1	; 0x0b
   1c752:	1a 86       	std	Y+10, r1	; 0x0a
   1c754:	19 82       	std	Y+1, r1	; 0x01
   1c756:	18 82       	st	Y, r1
   1c758:	1b 82       	std	Y+3, r1	; 0x03
   1c75a:	1a 82       	std	Y+2, r1	; 0x02
   1c75c:	dd 82       	std	Y+5, r13	; 0x05
   1c75e:	cc 82       	std	Y+4, r12	; 0x04
   1c760:	df 82       	std	Y+7, r13	; 0x07
   1c762:	ce 82       	std	Y+6, r12	; 0x06
   1c764:	e7 e8       	ldi	r30, 0x87	; 135
   1c766:	fe e0       	ldi	r31, 0x0E	; 14
   1c768:	b0 82       	st	Z, r11
   1c76a:	80 e9       	ldi	r24, 0x90	; 144
   1c76c:	9e e0       	ldi	r25, 0x0E	; 14
   1c76e:	94 83       	std	Z+4, r25	; 0x04
   1c770:	83 83       	std	Z+3, r24	; 0x03
   1c772:	80 e0       	ldi	r24, 0x00	; 0
   1c774:	91 e0       	ldi	r25, 0x01	; 1
   1c776:	96 83       	std	Z+6, r25	; 0x06
   1c778:	85 83       	std	Z+5, r24	; 0x05
   1c77a:	10 86       	std	Z+8, r1	; 0x08
   1c77c:	17 82       	std	Z+7, r1	; 0x07
   1c77e:	20 e8       	ldi	r18, 0x80	; 128
   1c780:	32 e0       	ldi	r19, 0x02	; 2
   1c782:	32 83       	std	Z+2, r19	; 0x02
   1c784:	21 83       	std	Z+1, r18	; 0x01
   1c786:	10 92 91 0f 	sts	0x0F91, r1	; 0x800f91 <doc+0x10a>
   1c78a:	10 92 90 0f 	sts	0x0F90, r1	; 0x800f90 <doc+0x109>
   1c78e:	ea e7       	ldi	r30, 0x7A	; 122
   1c790:	fe e0       	ldi	r31, 0x0E	; 14
   1c792:	40 e0       	ldi	r20, 0x00	; 0
   1c794:	50 e0       	ldi	r21, 0x00	; 0
   1c796:	62 e0       	ldi	r22, 0x02	; 2
   1c798:	70 e0       	ldi	r23, 0x00	; 0
   1c79a:	44 83       	std	Z+4, r20	; 0x04
   1c79c:	55 83       	std	Z+5, r21	; 0x05
   1c79e:	66 83       	std	Z+6, r22	; 0x06
   1c7a0:	77 83       	std	Z+7, r23	; 0x07
   1c7a2:	f3 82       	std	Z+3, r15	; 0x03
   1c7a4:	e2 82       	std	Z+2, r14	; 0x02
   1c7a6:	11 83       	std	Z+1, r17	; 0x01
   1c7a8:	00 83       	st	Z, r16
   1c7aa:	26 e1       	ldi	r18, 0x16	; 22
   1c7ac:	20 87       	std	Z+8, r18	; 0x08
   1c7ae:	eb e6       	ldi	r30, 0x6B	; 107
   1c7b0:	fe e0       	ldi	r31, 0x0E	; 14
   1c7b2:	40 e0       	ldi	r20, 0x00	; 0
   1c7b4:	50 e0       	ldi	r21, 0x00	; 0
   1c7b6:	64 e0       	ldi	r22, 0x04	; 4
   1c7b8:	70 e0       	ldi	r23, 0x00	; 0
   1c7ba:	44 83       	std	Z+4, r20	; 0x04
   1c7bc:	55 83       	std	Z+5, r21	; 0x05
   1c7be:	66 83       	std	Z+6, r22	; 0x06
   1c7c0:	77 83       	std	Z+7, r23	; 0x07
   1c7c2:	91 87       	std	Z+9, r25	; 0x09
   1c7c4:	80 87       	std	Z+8, r24	; 0x08
   1c7c6:	13 82       	std	Z+3, r1	; 0x03
   1c7c8:	12 82       	std	Z+2, r1	; 0x02
   1c7ca:	11 83       	std	Z+1, r17	; 0x01
   1c7cc:	00 83       	st	Z, r16
   1c7ce:	87 e1       	ldi	r24, 0x17	; 23
   1c7d0:	82 87       	std	Z+10, r24	; 0x0a
   1c7d2:	df 91       	pop	r29
   1c7d4:	cf 91       	pop	r28
   1c7d6:	1f 91       	pop	r17
   1c7d8:	0f 91       	pop	r16
   1c7da:	ff 90       	pop	r15
   1c7dc:	ef 90       	pop	r14
   1c7de:	df 90       	pop	r13
   1c7e0:	cf 90       	pop	r12
   1c7e2:	bf 90       	pop	r11
   1c7e4:	af 90       	pop	r10
   1c7e6:	7f 90       	pop	r7
   1c7e8:	6f 90       	pop	r6
   1c7ea:	5f 90       	pop	r5
   1c7ec:	4f 90       	pop	r4
   1c7ee:	08 95       	ret

0001c7f0 <dtostrf>:
dtostrf():
   1c7f0:	ef 92       	push	r14
   1c7f2:	0f 93       	push	r16
   1c7f4:	1f 93       	push	r17
   1c7f6:	cf 93       	push	r28
   1c7f8:	df 93       	push	r29
   1c7fa:	e8 01       	movw	r28, r16
   1c7fc:	34 e0       	ldi	r19, 0x04	; 4
   1c7fe:	47 fd       	sbrc	r20, 7
   1c800:	34 e1       	ldi	r19, 0x14	; 20
   1c802:	04 2e       	mov	r0, r20
   1c804:	00 0c       	add	r0, r0
   1c806:	55 0b       	sbc	r21, r21
   1c808:	57 ff       	sbrs	r21, 7
   1c80a:	03 c0       	rjmp	.+6      	; 0x1c812 <dtostrf+0x22>
   1c80c:	51 95       	neg	r21
   1c80e:	41 95       	neg	r20
   1c810:	51 09       	sbc	r21, r1
   1c812:	e3 2e       	mov	r14, r19
   1c814:	02 2f       	mov	r16, r18
   1c816:	24 2f       	mov	r18, r20
   1c818:	ae 01       	movw	r20, r28
   1c81a:	0e 94 49 e8 	call	0x1d092	; 0x1d092 <dtoa_prf>
   1c81e:	ce 01       	movw	r24, r28
   1c820:	df 91       	pop	r29
   1c822:	cf 91       	pop	r28
   1c824:	1f 91       	pop	r17
   1c826:	0f 91       	pop	r16
   1c828:	ef 90       	pop	r14
   1c82a:	08 95       	ret

0001c82c <strtoul>:
strtoul():
   1c82c:	3f 92       	push	r3
   1c82e:	4f 92       	push	r4
   1c830:	5f 92       	push	r5
   1c832:	6f 92       	push	r6
   1c834:	7f 92       	push	r7
   1c836:	8f 92       	push	r8
   1c838:	9f 92       	push	r9
   1c83a:	af 92       	push	r10
   1c83c:	bf 92       	push	r11
   1c83e:	cf 92       	push	r12
   1c840:	df 92       	push	r13
   1c842:	ef 92       	push	r14
   1c844:	ff 92       	push	r15
   1c846:	0f 93       	push	r16
   1c848:	1f 93       	push	r17
   1c84a:	cf 93       	push	r28
   1c84c:	df 93       	push	r29
   1c84e:	5c 01       	movw	r10, r24
   1c850:	6b 01       	movw	r12, r22
   1c852:	7a 01       	movw	r14, r20
   1c854:	61 15       	cp	r22, r1
   1c856:	71 05       	cpc	r23, r1
   1c858:	19 f0       	breq	.+6      	; 0x1c860 <strtoul+0x34>
   1c85a:	fb 01       	movw	r30, r22
   1c85c:	91 83       	std	Z+1, r25	; 0x01
   1c85e:	80 83       	st	Z, r24
   1c860:	e1 14       	cp	r14, r1
   1c862:	f1 04       	cpc	r15, r1
   1c864:	49 f0       	breq	.+18     	; 0x1c878 <strtoul+0x4c>
   1c866:	c7 01       	movw	r24, r14
   1c868:	02 97       	sbiw	r24, 0x02	; 2
   1c86a:	83 97       	sbiw	r24, 0x23	; 35
   1c86c:	28 f0       	brcs	.+10     	; 0x1c878 <strtoul+0x4c>
   1c86e:	60 e0       	ldi	r22, 0x00	; 0
   1c870:	70 e0       	ldi	r23, 0x00	; 0
   1c872:	cb 01       	movw	r24, r22
   1c874:	9b c0       	rjmp	.+310    	; 0x1c9ac <strtoul+0x180>
   1c876:	5e 01       	movw	r10, r28
   1c878:	e5 01       	movw	r28, r10
   1c87a:	21 96       	adiw	r28, 0x01	; 1
   1c87c:	f5 01       	movw	r30, r10
   1c87e:	10 81       	ld	r17, Z
   1c880:	81 2f       	mov	r24, r17
   1c882:	90 e0       	ldi	r25, 0x00	; 0
   1c884:	0e 94 3b e5 	call	0x1ca76	; 0x1ca76 <isspace>
   1c888:	89 2b       	or	r24, r25
   1c88a:	a9 f7       	brne	.-22     	; 0x1c876 <strtoul+0x4a>
   1c88c:	1d 32       	cpi	r17, 0x2D	; 45
   1c88e:	09 f0       	breq	.+2      	; 0x1c892 <strtoul+0x66>
   1c890:	5c c0       	rjmp	.+184    	; 0x1c94a <strtoul+0x11e>
   1c892:	21 96       	adiw	r28, 0x01	; 1
   1c894:	f5 01       	movw	r30, r10
   1c896:	11 81       	ldd	r17, Z+1	; 0x01
   1c898:	01 e0       	ldi	r16, 0x01	; 1
   1c89a:	e1 14       	cp	r14, r1
   1c89c:	f1 04       	cpc	r15, r1
   1c89e:	09 f4       	brne	.+2      	; 0x1c8a2 <strtoul+0x76>
   1c8a0:	bb c0       	rjmp	.+374    	; 0x1ca18 <strtoul+0x1ec>
   1c8a2:	f0 e1       	ldi	r31, 0x10	; 16
   1c8a4:	ef 16       	cp	r14, r31
   1c8a6:	f1 04       	cpc	r15, r1
   1c8a8:	09 f0       	breq	.+2      	; 0x1c8ac <strtoul+0x80>
   1c8aa:	9b c0       	rjmp	.+310    	; 0x1c9e2 <strtoul+0x1b6>
   1c8ac:	10 33       	cpi	r17, 0x30	; 48
   1c8ae:	41 f4       	brne	.+16     	; 0x1c8c0 <strtoul+0x94>
   1c8b0:	88 81       	ld	r24, Y
   1c8b2:	8f 7d       	andi	r24, 0xDF	; 223
   1c8b4:	88 35       	cpi	r24, 0x58	; 88
   1c8b6:	09 f0       	breq	.+2      	; 0x1c8ba <strtoul+0x8e>
   1c8b8:	8f c0       	rjmp	.+286    	; 0x1c9d8 <strtoul+0x1ac>
   1c8ba:	19 81       	ldd	r17, Y+1	; 0x01
   1c8bc:	22 96       	adiw	r28, 0x02	; 2
   1c8be:	02 60       	ori	r16, 0x02	; 2
   1c8c0:	e0 e1       	ldi	r30, 0x10	; 16
   1c8c2:	ee 2e       	mov	r14, r30
   1c8c4:	f1 2c       	mov	r15, r1
   1c8c6:	88 24       	eor	r8, r8
   1c8c8:	8a 94       	dec	r8
   1c8ca:	98 2c       	mov	r9, r8
   1c8cc:	a8 2c       	mov	r10, r8
   1c8ce:	ff e0       	ldi	r31, 0x0F	; 15
   1c8d0:	bf 2e       	mov	r11, r31
   1c8d2:	20 e0       	ldi	r18, 0x00	; 0
   1c8d4:	60 e0       	ldi	r22, 0x00	; 0
   1c8d6:	70 e0       	ldi	r23, 0x00	; 0
   1c8d8:	cb 01       	movw	r24, r22
   1c8da:	27 01       	movw	r4, r14
   1c8dc:	0f 2c       	mov	r0, r15
   1c8de:	00 0c       	add	r0, r0
   1c8e0:	66 08       	sbc	r6, r6
   1c8e2:	77 08       	sbc	r7, r7
   1c8e4:	fe 01       	movw	r30, r28
   1c8e6:	50 ed       	ldi	r21, 0xD0	; 208
   1c8e8:	35 2e       	mov	r3, r21
   1c8ea:	31 0e       	add	r3, r17
   1c8ec:	39 e0       	ldi	r19, 0x09	; 9
   1c8ee:	33 15       	cp	r19, r3
   1c8f0:	68 f4       	brcc	.+26     	; 0x1c90c <strtoul+0xe0>
   1c8f2:	3f eb       	ldi	r19, 0xBF	; 191
   1c8f4:	31 0f       	add	r19, r17
   1c8f6:	49 ec       	ldi	r20, 0xC9	; 201
   1c8f8:	34 2e       	mov	r3, r20
   1c8fa:	3a 31       	cpi	r19, 0x1A	; 26
   1c8fc:	30 f0       	brcs	.+12     	; 0x1c90a <strtoul+0xde>
   1c8fe:	3f e9       	ldi	r19, 0x9F	; 159
   1c900:	31 0f       	add	r19, r17
   1c902:	3a 31       	cpi	r19, 0x1A	; 26
   1c904:	b0 f5       	brcc	.+108    	; 0x1c972 <strtoul+0x146>
   1c906:	39 ea       	ldi	r19, 0xA9	; 169
   1c908:	33 2e       	mov	r3, r19
   1c90a:	31 0e       	add	r3, r17
   1c90c:	3e 14       	cp	r3, r14
   1c90e:	1f 04       	cpc	r1, r15
   1c910:	84 f5       	brge	.+96     	; 0x1c972 <strtoul+0x146>
   1c912:	2f 3f       	cpi	r18, 0xFF	; 255
   1c914:	b9 f0       	breq	.+46     	; 0x1c944 <strtoul+0x118>
   1c916:	86 16       	cp	r8, r22
   1c918:	97 06       	cpc	r9, r23
   1c91a:	a8 06       	cpc	r10, r24
   1c91c:	b9 06       	cpc	r11, r25
   1c91e:	38 f1       	brcs	.+78     	; 0x1c96e <strtoul+0x142>
   1c920:	a3 01       	movw	r20, r6
   1c922:	92 01       	movw	r18, r4
   1c924:	0e 94 2d ef 	call	0x1de5a	; 0x1de5a <__mulsi3>
   1c928:	23 2d       	mov	r18, r3
   1c92a:	30 e0       	ldi	r19, 0x00	; 0
   1c92c:	50 e0       	ldi	r21, 0x00	; 0
   1c92e:	40 e0       	ldi	r20, 0x00	; 0
   1c930:	62 0f       	add	r22, r18
   1c932:	73 1f       	adc	r23, r19
   1c934:	84 1f       	adc	r24, r20
   1c936:	95 1f       	adc	r25, r21
   1c938:	62 17       	cp	r22, r18
   1c93a:	73 07       	cpc	r23, r19
   1c93c:	84 07       	cpc	r24, r20
   1c93e:	95 07       	cpc	r25, r21
   1c940:	b0 f0       	brcs	.+44     	; 0x1c96e <strtoul+0x142>
   1c942:	21 e0       	ldi	r18, 0x01	; 1
   1c944:	21 96       	adiw	r28, 0x01	; 1
   1c946:	10 81       	ld	r17, Z
   1c948:	cd cf       	rjmp	.-102    	; 0x1c8e4 <strtoul+0xb8>
   1c94a:	1b 32       	cpi	r17, 0x2B	; 43
   1c94c:	21 f4       	brne	.+8      	; 0x1c956 <strtoul+0x12a>
   1c94e:	e5 01       	movw	r28, r10
   1c950:	22 96       	adiw	r28, 0x02	; 2
   1c952:	f5 01       	movw	r30, r10
   1c954:	11 81       	ldd	r17, Z+1	; 0x01
   1c956:	00 e0       	ldi	r16, 0x00	; 0
   1c958:	a0 cf       	rjmp	.-192    	; 0x1c89a <strtoul+0x6e>
   1c95a:	78 e0       	ldi	r23, 0x08	; 8
   1c95c:	e7 2e       	mov	r14, r23
   1c95e:	f1 2c       	mov	r15, r1
   1c960:	88 24       	eor	r8, r8
   1c962:	8a 94       	dec	r8
   1c964:	98 2c       	mov	r9, r8
   1c966:	a8 2c       	mov	r10, r8
   1c968:	6f e1       	ldi	r22, 0x1F	; 31
   1c96a:	b6 2e       	mov	r11, r22
   1c96c:	b2 cf       	rjmp	.-156    	; 0x1c8d2 <strtoul+0xa6>
   1c96e:	2f ef       	ldi	r18, 0xFF	; 255
   1c970:	e9 cf       	rjmp	.-46     	; 0x1c944 <strtoul+0x118>
   1c972:	c1 14       	cp	r12, r1
   1c974:	d1 04       	cpc	r13, r1
   1c976:	31 f0       	breq	.+12     	; 0x1c984 <strtoul+0x158>
   1c978:	22 23       	and	r18, r18
   1c97a:	51 f1       	breq	.+84     	; 0x1c9d0 <strtoul+0x1a4>
   1c97c:	21 97       	sbiw	r28, 0x01	; 1
   1c97e:	f6 01       	movw	r30, r12
   1c980:	d1 83       	std	Z+1, r29	; 0x01
   1c982:	c0 83       	st	Z, r28
   1c984:	00 ff       	sbrs	r16, 0
   1c986:	07 c0       	rjmp	.+14     	; 0x1c996 <strtoul+0x16a>
   1c988:	90 95       	com	r25
   1c98a:	80 95       	com	r24
   1c98c:	70 95       	com	r23
   1c98e:	61 95       	neg	r22
   1c990:	7f 4f       	sbci	r23, 0xFF	; 255
   1c992:	8f 4f       	sbci	r24, 0xFF	; 255
   1c994:	9f 4f       	sbci	r25, 0xFF	; 255
   1c996:	2f 3f       	cpi	r18, 0xFF	; 255
   1c998:	49 f4       	brne	.+18     	; 0x1c9ac <strtoul+0x180>
   1c99a:	82 e2       	ldi	r24, 0x22	; 34
   1c99c:	90 e0       	ldi	r25, 0x00	; 0
   1c99e:	90 93 80 14 	sts	0x1480, r25	; 0x801480 <errno+0x1>
   1c9a2:	80 93 7f 14 	sts	0x147F, r24	; 0x80147f <errno>
   1c9a6:	6f ef       	ldi	r22, 0xFF	; 255
   1c9a8:	7f ef       	ldi	r23, 0xFF	; 255
   1c9aa:	cb 01       	movw	r24, r22
   1c9ac:	df 91       	pop	r29
   1c9ae:	cf 91       	pop	r28
   1c9b0:	1f 91       	pop	r17
   1c9b2:	0f 91       	pop	r16
   1c9b4:	ff 90       	pop	r15
   1c9b6:	ef 90       	pop	r14
   1c9b8:	df 90       	pop	r13
   1c9ba:	cf 90       	pop	r12
   1c9bc:	bf 90       	pop	r11
   1c9be:	af 90       	pop	r10
   1c9c0:	9f 90       	pop	r9
   1c9c2:	8f 90       	pop	r8
   1c9c4:	7f 90       	pop	r7
   1c9c6:	6f 90       	pop	r6
   1c9c8:	5f 90       	pop	r5
   1c9ca:	4f 90       	pop	r4
   1c9cc:	3f 90       	pop	r3
   1c9ce:	08 95       	ret
   1c9d0:	01 ff       	sbrs	r16, 1
   1c9d2:	d8 cf       	rjmp	.-80     	; 0x1c984 <strtoul+0x158>
   1c9d4:	22 97       	sbiw	r28, 0x02	; 2
   1c9d6:	d3 cf       	rjmp	.-90     	; 0x1c97e <strtoul+0x152>
   1c9d8:	10 e3       	ldi	r17, 0x30	; 48
   1c9da:	e1 14       	cp	r14, r1
   1c9dc:	f1 04       	cpc	r15, r1
   1c9de:	09 f4       	brne	.+2      	; 0x1c9e2 <strtoul+0x1b6>
   1c9e0:	bc cf       	rjmp	.-136    	; 0x1c95a <strtoul+0x12e>
   1c9e2:	3a e0       	ldi	r19, 0x0A	; 10
   1c9e4:	e3 16       	cp	r14, r19
   1c9e6:	f1 04       	cpc	r15, r1
   1c9e8:	e9 f0       	breq	.+58     	; 0x1ca24 <strtoul+0x1f8>
   1c9ea:	80 e1       	ldi	r24, 0x10	; 16
   1c9ec:	e8 16       	cp	r14, r24
   1c9ee:	f1 04       	cpc	r15, r1
   1c9f0:	09 f4       	brne	.+2      	; 0x1c9f4 <strtoul+0x1c8>
   1c9f2:	66 cf       	rjmp	.-308    	; 0x1c8c0 <strtoul+0x94>
   1c9f4:	e8 e0       	ldi	r30, 0x08	; 8
   1c9f6:	ee 16       	cp	r14, r30
   1c9f8:	f1 04       	cpc	r15, r1
   1c9fa:	09 f4       	brne	.+2      	; 0x1c9fe <strtoul+0x1d2>
   1c9fc:	b1 cf       	rjmp	.-158    	; 0x1c960 <strtoul+0x134>
   1c9fe:	6f ef       	ldi	r22, 0xFF	; 255
   1ca00:	7f ef       	ldi	r23, 0xFF	; 255
   1ca02:	cb 01       	movw	r24, r22
   1ca04:	97 01       	movw	r18, r14
   1ca06:	0f 2c       	mov	r0, r15
   1ca08:	00 0c       	add	r0, r0
   1ca0a:	44 0b       	sbc	r20, r20
   1ca0c:	55 0b       	sbc	r21, r21
   1ca0e:	0e 94 65 ef 	call	0x1deca	; 0x1deca <__udivmodsi4>
   1ca12:	49 01       	movw	r8, r18
   1ca14:	5a 01       	movw	r10, r20
   1ca16:	5d cf       	rjmp	.-326    	; 0x1c8d2 <strtoul+0xa6>
   1ca18:	10 33       	cpi	r17, 0x30	; 48
   1ca1a:	09 f4       	brne	.+2      	; 0x1ca1e <strtoul+0x1f2>
   1ca1c:	49 cf       	rjmp	.-366    	; 0x1c8b0 <strtoul+0x84>
   1ca1e:	9a e0       	ldi	r25, 0x0A	; 10
   1ca20:	e9 2e       	mov	r14, r25
   1ca22:	f1 2c       	mov	r15, r1
   1ca24:	89 e9       	ldi	r24, 0x99	; 153
   1ca26:	88 2e       	mov	r8, r24
   1ca28:	98 2c       	mov	r9, r8
   1ca2a:	a8 2c       	mov	r10, r8
   1ca2c:	89 e1       	ldi	r24, 0x19	; 25
   1ca2e:	b8 2e       	mov	r11, r24
   1ca30:	50 cf       	rjmp	.-352    	; 0x1c8d2 <strtoul+0xa6>

0001ca32 <atof>:
atof():
   1ca32:	66 27       	eor	r22, r22
   1ca34:	77 27       	eor	r23, r23
   1ca36:	0c 94 e7 ea 	jmp	0x1d5ce	; 0x1d5ce <strtod>

0001ca3a <atoi>:
atoi():
   1ca3a:	fc 01       	movw	r30, r24
   1ca3c:	88 27       	eor	r24, r24
   1ca3e:	99 27       	eor	r25, r25
   1ca40:	e8 94       	clt
   1ca42:	21 91       	ld	r18, Z+
   1ca44:	20 32       	cpi	r18, 0x20	; 32
   1ca46:	e9 f3       	breq	.-6      	; 0x1ca42 <atoi+0x8>
   1ca48:	29 30       	cpi	r18, 0x09	; 9
   1ca4a:	10 f0       	brcs	.+4      	; 0x1ca50 <atoi+0x16>
   1ca4c:	2e 30       	cpi	r18, 0x0E	; 14
   1ca4e:	c8 f3       	brcs	.-14     	; 0x1ca42 <atoi+0x8>
   1ca50:	2b 32       	cpi	r18, 0x2B	; 43
   1ca52:	41 f0       	breq	.+16     	; 0x1ca64 <atoi+0x2a>
   1ca54:	2d 32       	cpi	r18, 0x2D	; 45
   1ca56:	39 f4       	brne	.+14     	; 0x1ca66 <atoi+0x2c>
   1ca58:	68 94       	set
   1ca5a:	04 c0       	rjmp	.+8      	; 0x1ca64 <atoi+0x2a>
   1ca5c:	0e 94 97 e5 	call	0x1cb2e	; 0x1cb2e <__mulhi_const_10>
   1ca60:	82 0f       	add	r24, r18
   1ca62:	91 1d       	adc	r25, r1
   1ca64:	21 91       	ld	r18, Z+
   1ca66:	20 53       	subi	r18, 0x30	; 48
   1ca68:	2a 30       	cpi	r18, 0x0A	; 10
   1ca6a:	c0 f3       	brcs	.-16     	; 0x1ca5c <atoi+0x22>
   1ca6c:	1e f4       	brtc	.+6      	; 0x1ca74 <atoi+0x3a>
   1ca6e:	90 95       	com	r25
   1ca70:	81 95       	neg	r24
   1ca72:	9f 4f       	sbci	r25, 0xFF	; 255
   1ca74:	08 95       	ret

0001ca76 <isspace>:
isspace():
   1ca76:	91 11       	cpse	r25, r1
   1ca78:	0c 94 1d ed 	jmp	0x1da3a	; 0x1da3a <__ctype_isfalse>
   1ca7c:	80 32       	cpi	r24, 0x20	; 32
   1ca7e:	19 f0       	breq	.+6      	; 0x1ca86 <isspace+0x10>
   1ca80:	89 50       	subi	r24, 0x09	; 9
   1ca82:	85 50       	subi	r24, 0x05	; 5
   1ca84:	c8 f7       	brcc	.-14     	; 0x1ca78 <isspace+0x2>
   1ca86:	08 95       	ret

0001ca88 <strcat_P>:
strcat_P():
   1ca88:	fb 01       	movw	r30, r22
   1ca8a:	dc 01       	movw	r26, r24
   1ca8c:	0d 90       	ld	r0, X+
   1ca8e:	00 20       	and	r0, r0
   1ca90:	e9 f7       	brne	.-6      	; 0x1ca8c <strcat_P+0x4>
   1ca92:	11 97       	sbiw	r26, 0x01	; 1
   1ca94:	05 90       	lpm	r0, Z+
   1ca96:	0d 92       	st	X+, r0
   1ca98:	00 20       	and	r0, r0
   1ca9a:	e1 f7       	brne	.-8      	; 0x1ca94 <strcat_P+0xc>
   1ca9c:	08 95       	ret

0001ca9e <strcpy_P>:
strcpy_P():
   1ca9e:	fb 01       	movw	r30, r22
   1caa0:	dc 01       	movw	r26, r24
   1caa2:	05 90       	lpm	r0, Z+
   1caa4:	0d 92       	st	X+, r0
   1caa6:	00 20       	and	r0, r0
   1caa8:	e1 f7       	brne	.-8      	; 0x1caa2 <strcpy_P+0x4>
   1caaa:	08 95       	ret

0001caac <strtok>:
strtok():
   1caac:	47 e6       	ldi	r20, 0x67	; 103
   1caae:	54 e1       	ldi	r21, 0x14	; 20
   1cab0:	0c 94 5a e5 	jmp	0x1cab4	; 0x1cab4 <strtok_r>

0001cab4 <strtok_r>:
strtok_r():
   1cab4:	fa 01       	movw	r30, r20
   1cab6:	a1 91       	ld	r26, Z+
   1cab8:	b0 81       	ld	r27, Z
   1caba:	00 97       	sbiw	r24, 0x00	; 0
   1cabc:	19 f4       	brne	.+6      	; 0x1cac4 <strtok_r+0x10>
   1cabe:	10 97       	sbiw	r26, 0x00	; 0
   1cac0:	e1 f0       	breq	.+56     	; 0x1cafa <strtok_r+0x46>
   1cac2:	cd 01       	movw	r24, r26
   1cac4:	dc 01       	movw	r26, r24
   1cac6:	cd 01       	movw	r24, r26
   1cac8:	0d 90       	ld	r0, X+
   1caca:	00 20       	and	r0, r0
   1cacc:	11 f4       	brne	.+4      	; 0x1cad2 <strtok_r+0x1e>
   1cace:	c0 01       	movw	r24, r0
   1cad0:	13 c0       	rjmp	.+38     	; 0x1caf8 <strtok_r+0x44>
   1cad2:	fb 01       	movw	r30, r22
   1cad4:	21 91       	ld	r18, Z+
   1cad6:	22 23       	and	r18, r18
   1cad8:	19 f0       	breq	.+6      	; 0x1cae0 <strtok_r+0x2c>
   1cada:	20 15       	cp	r18, r0
   1cadc:	d9 f7       	brne	.-10     	; 0x1cad4 <strtok_r+0x20>
   1cade:	f3 cf       	rjmp	.-26     	; 0x1cac6 <strtok_r+0x12>
   1cae0:	fb 01       	movw	r30, r22
   1cae2:	21 91       	ld	r18, Z+
   1cae4:	20 15       	cp	r18, r0
   1cae6:	19 f4       	brne	.+6      	; 0x1caee <strtok_r+0x3a>
   1cae8:	1e 92       	st	-X, r1
   1caea:	11 96       	adiw	r26, 0x01	; 1
   1caec:	06 c0       	rjmp	.+12     	; 0x1cafa <strtok_r+0x46>
   1caee:	22 23       	and	r18, r18
   1caf0:	c1 f7       	brne	.-16     	; 0x1cae2 <strtok_r+0x2e>
   1caf2:	0d 90       	ld	r0, X+
   1caf4:	00 20       	and	r0, r0
   1caf6:	a1 f7       	brne	.-24     	; 0x1cae0 <strtok_r+0x2c>
   1caf8:	d0 01       	movw	r26, r0
   1cafa:	fa 01       	movw	r30, r20
   1cafc:	a1 93       	st	Z+, r26
   1cafe:	b0 83       	st	Z, r27
   1cb00:	08 95       	ret

0001cb02 <itoa>:
itoa():
   1cb02:	45 32       	cpi	r20, 0x25	; 37
   1cb04:	51 05       	cpc	r21, r1
   1cb06:	20 f4       	brcc	.+8      	; 0x1cb10 <itoa+0xe>
   1cb08:	42 30       	cpi	r20, 0x02	; 2
   1cb0a:	10 f0       	brcs	.+4      	; 0x1cb10 <itoa+0xe>
   1cb0c:	0c 94 8c e5 	jmp	0x1cb18	; 0x1cb18 <__itoa_ncheck>
   1cb10:	fb 01       	movw	r30, r22
   1cb12:	10 82       	st	Z, r1
   1cb14:	cb 01       	movw	r24, r22
   1cb16:	08 95       	ret

0001cb18 <__itoa_ncheck>:
__itoa_ncheck():
   1cb18:	bb 27       	eor	r27, r27
   1cb1a:	4a 30       	cpi	r20, 0x0A	; 10
   1cb1c:	31 f4       	brne	.+12     	; 0x1cb2a <__itoa_ncheck+0x12>
   1cb1e:	99 23       	and	r25, r25
   1cb20:	22 f4       	brpl	.+8      	; 0x1cb2a <__itoa_ncheck+0x12>
   1cb22:	bd e2       	ldi	r27, 0x2D	; 45
   1cb24:	90 95       	com	r25
   1cb26:	81 95       	neg	r24
   1cb28:	9f 4f       	sbci	r25, 0xFF	; 255
   1cb2a:	0c 94 a0 e5 	jmp	0x1cb40	; 0x1cb40 <__utoa_common>

0001cb2e <__mulhi_const_10>:
__mulhi_const_10():
   1cb2e:	7a e0       	ldi	r23, 0x0A	; 10
   1cb30:	97 9f       	mul	r25, r23
   1cb32:	90 2d       	mov	r25, r0
   1cb34:	87 9f       	mul	r24, r23
   1cb36:	80 2d       	mov	r24, r0
   1cb38:	91 0d       	add	r25, r1
   1cb3a:	11 24       	eor	r1, r1
   1cb3c:	08 95       	ret

0001cb3e <__utoa_ncheck>:
__utoa_ncheck():
   1cb3e:	bb 27       	eor	r27, r27

0001cb40 <__utoa_common>:
   1cb40:	fb 01       	movw	r30, r22
   1cb42:	55 27       	eor	r21, r21
   1cb44:	aa 27       	eor	r26, r26
   1cb46:	88 0f       	add	r24, r24
   1cb48:	99 1f       	adc	r25, r25
   1cb4a:	aa 1f       	adc	r26, r26
   1cb4c:	a4 17       	cp	r26, r20
   1cb4e:	10 f0       	brcs	.+4      	; 0x1cb54 <__utoa_common+0x14>
   1cb50:	a4 1b       	sub	r26, r20
   1cb52:	83 95       	inc	r24
   1cb54:	50 51       	subi	r21, 0x10	; 16
   1cb56:	b9 f7       	brne	.-18     	; 0x1cb46 <__utoa_common+0x6>
   1cb58:	a0 5d       	subi	r26, 0xD0	; 208
   1cb5a:	aa 33       	cpi	r26, 0x3A	; 58
   1cb5c:	08 f0       	brcs	.+2      	; 0x1cb60 <__utoa_common+0x20>
   1cb5e:	a9 5d       	subi	r26, 0xD9	; 217
   1cb60:	a1 93       	st	Z+, r26
   1cb62:	00 97       	sbiw	r24, 0x00	; 0
   1cb64:	79 f7       	brne	.-34     	; 0x1cb44 <__utoa_common+0x4>
   1cb66:	b1 11       	cpse	r27, r1
   1cb68:	b1 93       	st	Z+, r27
   1cb6a:	11 92       	st	Z+, r1
   1cb6c:	cb 01       	movw	r24, r22
   1cb6e:	0c 94 55 ed 	jmp	0x1daaa	; 0x1daaa <strrev>

0001cb72 <fdevopen>:
fdevopen():
   1cb72:	0f 93       	push	r16
   1cb74:	1f 93       	push	r17
   1cb76:	cf 93       	push	r28
   1cb78:	df 93       	push	r29
   1cb7a:	00 97       	sbiw	r24, 0x00	; 0
   1cb7c:	59 f4       	brne	.+22     	; 0x1cb94 <fdevopen+0x22>
   1cb7e:	61 15       	cp	r22, r1
   1cb80:	71 05       	cpc	r23, r1
   1cb82:	41 f4       	brne	.+16     	; 0x1cb94 <fdevopen+0x22>
   1cb84:	f0 e0       	ldi	r31, 0x00	; 0
   1cb86:	e0 e0       	ldi	r30, 0x00	; 0
   1cb88:	cf 01       	movw	r24, r30
   1cb8a:	df 91       	pop	r29
   1cb8c:	cf 91       	pop	r28
   1cb8e:	1f 91       	pop	r17
   1cb90:	0f 91       	pop	r16
   1cb92:	08 95       	ret
   1cb94:	8b 01       	movw	r16, r22
   1cb96:	ec 01       	movw	r28, r24
   1cb98:	6e e0       	ldi	r22, 0x0E	; 14
   1cb9a:	70 e0       	ldi	r23, 0x00	; 0
   1cb9c:	81 e0       	ldi	r24, 0x01	; 1
   1cb9e:	90 e0       	ldi	r25, 0x00	; 0
   1cba0:	0e 94 2d e8 	call	0x1d05a	; 0x1d05a <calloc>
   1cba4:	fc 01       	movw	r30, r24
   1cba6:	89 2b       	or	r24, r25
   1cba8:	69 f3       	breq	.-38     	; 0x1cb84 <fdevopen+0x12>
   1cbaa:	80 e8       	ldi	r24, 0x80	; 128
   1cbac:	83 83       	std	Z+3, r24	; 0x03
   1cbae:	01 15       	cp	r16, r1
   1cbb0:	11 05       	cpc	r17, r1
   1cbb2:	71 f0       	breq	.+28     	; 0x1cbd0 <fdevopen+0x5e>
   1cbb4:	13 87       	std	Z+11, r17	; 0x0b
   1cbb6:	02 87       	std	Z+10, r16	; 0x0a
   1cbb8:	81 e8       	ldi	r24, 0x81	; 129
   1cbba:	83 83       	std	Z+3, r24	; 0x03
   1cbbc:	80 91 69 14 	lds	r24, 0x1469	; 0x801469 <__iob>
   1cbc0:	90 91 6a 14 	lds	r25, 0x146A	; 0x80146a <__iob+0x1>
   1cbc4:	89 2b       	or	r24, r25
   1cbc6:	21 f4       	brne	.+8      	; 0x1cbd0 <fdevopen+0x5e>
   1cbc8:	f0 93 6a 14 	sts	0x146A, r31	; 0x80146a <__iob+0x1>
   1cbcc:	e0 93 69 14 	sts	0x1469, r30	; 0x801469 <__iob>
   1cbd0:	20 97       	sbiw	r28, 0x00	; 0
   1cbd2:	d1 f2       	breq	.-76     	; 0x1cb88 <fdevopen+0x16>
   1cbd4:	d1 87       	std	Z+9, r29	; 0x09
   1cbd6:	c0 87       	std	Z+8, r28	; 0x08
   1cbd8:	83 81       	ldd	r24, Z+3	; 0x03
   1cbda:	82 60       	ori	r24, 0x02	; 2
   1cbdc:	83 83       	std	Z+3, r24	; 0x03
   1cbde:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <__iob+0x2>
   1cbe2:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <__iob+0x3>
   1cbe6:	89 2b       	or	r24, r25
   1cbe8:	79 f6       	brne	.-98     	; 0x1cb88 <fdevopen+0x16>
   1cbea:	f0 93 6c 14 	sts	0x146C, r31	; 0x80146c <__iob+0x3>
   1cbee:	e0 93 6b 14 	sts	0x146B, r30	; 0x80146b <__iob+0x2>
   1cbf2:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <__iob+0x4>
   1cbf6:	90 91 6e 14 	lds	r25, 0x146E	; 0x80146e <__iob+0x5>
   1cbfa:	89 2b       	or	r24, r25
   1cbfc:	29 f6       	brne	.-118    	; 0x1cb88 <fdevopen+0x16>
   1cbfe:	f0 93 6e 14 	sts	0x146E, r31	; 0x80146e <__iob+0x5>
   1cc02:	e0 93 6d 14 	sts	0x146D, r30	; 0x80146d <__iob+0x4>
   1cc06:	c0 cf       	rjmp	.-128    	; 0x1cb88 <fdevopen+0x16>

0001cc08 <printf_P>:
printf_P():
   1cc08:	0f 93       	push	r16
   1cc0a:	1f 93       	push	r17
   1cc0c:	cf 93       	push	r28
   1cc0e:	df 93       	push	r29
   1cc10:	cd b7       	in	r28, 0x3d	; 61
   1cc12:	de b7       	in	r29, 0x3e	; 62
   1cc14:	ae 01       	movw	r20, r28
   1cc16:	48 5f       	subi	r20, 0xF8	; 248
   1cc18:	5f 4f       	sbci	r21, 0xFF	; 255
   1cc1a:	da 01       	movw	r26, r20
   1cc1c:	6d 91       	ld	r22, X+
   1cc1e:	7d 91       	ld	r23, X+
   1cc20:	ad 01       	movw	r20, r26
   1cc22:	09 e6       	ldi	r16, 0x69	; 105
   1cc24:	14 e1       	ldi	r17, 0x14	; 20
   1cc26:	f8 01       	movw	r30, r16
   1cc28:	82 81       	ldd	r24, Z+2	; 0x02
   1cc2a:	93 81       	ldd	r25, Z+3	; 0x03
   1cc2c:	dc 01       	movw	r26, r24
   1cc2e:	13 96       	adiw	r26, 0x03	; 3
   1cc30:	2c 91       	ld	r18, X
   1cc32:	13 97       	sbiw	r26, 0x03	; 3
   1cc34:	28 60       	ori	r18, 0x08	; 8
   1cc36:	13 96       	adiw	r26, 0x03	; 3
   1cc38:	2c 93       	st	X, r18
   1cc3a:	0e 94 2b e6 	call	0x1cc56	; 0x1cc56 <vfprintf>
   1cc3e:	d8 01       	movw	r26, r16
   1cc40:	12 96       	adiw	r26, 0x02	; 2
   1cc42:	ed 91       	ld	r30, X+
   1cc44:	fc 91       	ld	r31, X
   1cc46:	23 81       	ldd	r18, Z+3	; 0x03
   1cc48:	27 7f       	andi	r18, 0xF7	; 247
   1cc4a:	23 83       	std	Z+3, r18	; 0x03
   1cc4c:	df 91       	pop	r29
   1cc4e:	cf 91       	pop	r28
   1cc50:	1f 91       	pop	r17
   1cc52:	0f 91       	pop	r16
   1cc54:	08 95       	ret

0001cc56 <vfprintf>:
vfprintf():
   1cc56:	2f 92       	push	r2
   1cc58:	3f 92       	push	r3
   1cc5a:	4f 92       	push	r4
   1cc5c:	5f 92       	push	r5
   1cc5e:	6f 92       	push	r6
   1cc60:	7f 92       	push	r7
   1cc62:	8f 92       	push	r8
   1cc64:	9f 92       	push	r9
   1cc66:	af 92       	push	r10
   1cc68:	bf 92       	push	r11
   1cc6a:	cf 92       	push	r12
   1cc6c:	df 92       	push	r13
   1cc6e:	ef 92       	push	r14
   1cc70:	ff 92       	push	r15
   1cc72:	0f 93       	push	r16
   1cc74:	1f 93       	push	r17
   1cc76:	cf 93       	push	r28
   1cc78:	df 93       	push	r29
   1cc7a:	00 d0       	rcall	.+0      	; 0x1cc7c <vfprintf+0x26>
   1cc7c:	00 d0       	rcall	.+0      	; 0x1cc7e <vfprintf+0x28>
   1cc7e:	00 d0       	rcall	.+0      	; 0x1cc80 <vfprintf+0x2a>
   1cc80:	1f 92       	push	r1
   1cc82:	1f 92       	push	r1
   1cc84:	cd b7       	in	r28, 0x3d	; 61
   1cc86:	de b7       	in	r29, 0x3e	; 62
   1cc88:	7c 01       	movw	r14, r24
   1cc8a:	3b 01       	movw	r6, r22
   1cc8c:	8a 01       	movw	r16, r20
   1cc8e:	fc 01       	movw	r30, r24
   1cc90:	17 82       	std	Z+7, r1	; 0x07
   1cc92:	16 82       	std	Z+6, r1	; 0x06
   1cc94:	83 81       	ldd	r24, Z+3	; 0x03
   1cc96:	81 ff       	sbrs	r24, 1
   1cc98:	dd c1       	rjmp	.+954    	; 0x1d054 <vfprintf+0x3fe>
   1cc9a:	ce 01       	movw	r24, r28
   1cc9c:	01 96       	adiw	r24, 0x01	; 1
   1cc9e:	5c 01       	movw	r10, r24
   1cca0:	f7 01       	movw	r30, r14
   1cca2:	93 81       	ldd	r25, Z+3	; 0x03
   1cca4:	f3 01       	movw	r30, r6
   1cca6:	93 fd       	sbrc	r25, 3
   1cca8:	85 91       	lpm	r24, Z+
   1ccaa:	93 ff       	sbrs	r25, 3
   1ccac:	81 91       	ld	r24, Z+
   1ccae:	3f 01       	movw	r6, r30
   1ccb0:	88 23       	and	r24, r24
   1ccb2:	09 f4       	brne	.+2      	; 0x1ccb6 <vfprintf+0x60>
   1ccb4:	53 c1       	rjmp	.+678    	; 0x1cf5c <vfprintf+0x306>
   1ccb6:	85 32       	cpi	r24, 0x25	; 37
   1ccb8:	39 f4       	brne	.+14     	; 0x1ccc8 <vfprintf+0x72>
   1ccba:	93 fd       	sbrc	r25, 3
   1ccbc:	85 91       	lpm	r24, Z+
   1ccbe:	93 ff       	sbrs	r25, 3
   1ccc0:	81 91       	ld	r24, Z+
   1ccc2:	3f 01       	movw	r6, r30
   1ccc4:	85 32       	cpi	r24, 0x25	; 37
   1ccc6:	29 f4       	brne	.+10     	; 0x1ccd2 <vfprintf+0x7c>
   1ccc8:	b7 01       	movw	r22, r14
   1ccca:	90 e0       	ldi	r25, 0x00	; 0
   1cccc:	0e 94 65 ed 	call	0x1daca	; 0x1daca <fputc>
   1ccd0:	e7 cf       	rjmp	.-50     	; 0x1cca0 <vfprintf+0x4a>
   1ccd2:	91 2c       	mov	r9, r1
   1ccd4:	21 2c       	mov	r2, r1
   1ccd6:	31 2c       	mov	r3, r1
   1ccd8:	ff e1       	ldi	r31, 0x1F	; 31
   1ccda:	f3 15       	cp	r31, r3
   1ccdc:	38 f0       	brcs	.+14     	; 0x1ccec <vfprintf+0x96>
   1ccde:	8b 32       	cpi	r24, 0x2B	; 43
   1cce0:	11 f1       	breq	.+68     	; 0x1cd26 <vfprintf+0xd0>
   1cce2:	90 f4       	brcc	.+36     	; 0x1cd08 <vfprintf+0xb2>
   1cce4:	80 32       	cpi	r24, 0x20	; 32
   1cce6:	09 f1       	breq	.+66     	; 0x1cd2a <vfprintf+0xd4>
   1cce8:	83 32       	cpi	r24, 0x23	; 35
   1ccea:	29 f1       	breq	.+74     	; 0x1cd36 <vfprintf+0xe0>
   1ccec:	37 fc       	sbrc	r3, 7
   1ccee:	3c c0       	rjmp	.+120    	; 0x1cd68 <vfprintf+0x112>
   1ccf0:	20 ed       	ldi	r18, 0xD0	; 208
   1ccf2:	28 0f       	add	r18, r24
   1ccf4:	2a 30       	cpi	r18, 0x0A	; 10
   1ccf6:	50 f5       	brcc	.+84     	; 0x1cd4c <vfprintf+0xf6>
   1ccf8:	36 fe       	sbrs	r3, 6
   1ccfa:	20 c0       	rjmp	.+64     	; 0x1cd3c <vfprintf+0xe6>
   1ccfc:	8a e0       	ldi	r24, 0x0A	; 10
   1ccfe:	98 9e       	mul	r9, r24
   1cd00:	20 0d       	add	r18, r0
   1cd02:	11 24       	eor	r1, r1
   1cd04:	92 2e       	mov	r9, r18
   1cd06:	06 c0       	rjmp	.+12     	; 0x1cd14 <vfprintf+0xbe>
   1cd08:	8d 32       	cpi	r24, 0x2D	; 45
   1cd0a:	91 f0       	breq	.+36     	; 0x1cd30 <vfprintf+0xda>
   1cd0c:	80 33       	cpi	r24, 0x30	; 48
   1cd0e:	71 f7       	brne	.-36     	; 0x1ccec <vfprintf+0x96>
   1cd10:	68 94       	set
   1cd12:	30 f8       	bld	r3, 0
   1cd14:	f3 01       	movw	r30, r6
   1cd16:	93 fd       	sbrc	r25, 3
   1cd18:	85 91       	lpm	r24, Z+
   1cd1a:	93 ff       	sbrs	r25, 3
   1cd1c:	81 91       	ld	r24, Z+
   1cd1e:	3f 01       	movw	r6, r30
   1cd20:	81 11       	cpse	r24, r1
   1cd22:	da cf       	rjmp	.-76     	; 0x1ccd8 <vfprintf+0x82>
   1cd24:	21 c0       	rjmp	.+66     	; 0x1cd68 <vfprintf+0x112>
   1cd26:	68 94       	set
   1cd28:	31 f8       	bld	r3, 1
   1cd2a:	68 94       	set
   1cd2c:	32 f8       	bld	r3, 2
   1cd2e:	f2 cf       	rjmp	.-28     	; 0x1cd14 <vfprintf+0xbe>
   1cd30:	68 94       	set
   1cd32:	33 f8       	bld	r3, 3
   1cd34:	ef cf       	rjmp	.-34     	; 0x1cd14 <vfprintf+0xbe>
   1cd36:	68 94       	set
   1cd38:	34 f8       	bld	r3, 4
   1cd3a:	ec cf       	rjmp	.-40     	; 0x1cd14 <vfprintf+0xbe>
   1cd3c:	ea e0       	ldi	r30, 0x0A	; 10
   1cd3e:	2e 9e       	mul	r2, r30
   1cd40:	20 0d       	add	r18, r0
   1cd42:	11 24       	eor	r1, r1
   1cd44:	22 2e       	mov	r2, r18
   1cd46:	68 94       	set
   1cd48:	35 f8       	bld	r3, 5
   1cd4a:	e4 cf       	rjmp	.-56     	; 0x1cd14 <vfprintf+0xbe>
   1cd4c:	8e 32       	cpi	r24, 0x2E	; 46
   1cd4e:	29 f4       	brne	.+10     	; 0x1cd5a <vfprintf+0x104>
   1cd50:	36 fc       	sbrc	r3, 6
   1cd52:	04 c1       	rjmp	.+520    	; 0x1cf5c <vfprintf+0x306>
   1cd54:	68 94       	set
   1cd56:	36 f8       	bld	r3, 6
   1cd58:	dd cf       	rjmp	.-70     	; 0x1cd14 <vfprintf+0xbe>
   1cd5a:	8c 36       	cpi	r24, 0x6C	; 108
   1cd5c:	19 f4       	brne	.+6      	; 0x1cd64 <vfprintf+0x10e>
   1cd5e:	68 94       	set
   1cd60:	37 f8       	bld	r3, 7
   1cd62:	d8 cf       	rjmp	.-80     	; 0x1cd14 <vfprintf+0xbe>
   1cd64:	88 36       	cpi	r24, 0x68	; 104
   1cd66:	b1 f2       	breq	.-84     	; 0x1cd14 <vfprintf+0xbe>
   1cd68:	98 2f       	mov	r25, r24
   1cd6a:	9f 7d       	andi	r25, 0xDF	; 223
   1cd6c:	95 54       	subi	r25, 0x45	; 69
   1cd6e:	93 30       	cpi	r25, 0x03	; 3
   1cd70:	e0 f0       	brcs	.+56     	; 0x1cdaa <vfprintf+0x154>
   1cd72:	83 36       	cpi	r24, 0x63	; 99
   1cd74:	a1 f1       	breq	.+104    	; 0x1cdde <vfprintf+0x188>
   1cd76:	83 37       	cpi	r24, 0x73	; 115
   1cd78:	c1 f1       	breq	.+112    	; 0x1cdea <vfprintf+0x194>
   1cd7a:	83 35       	cpi	r24, 0x53	; 83
   1cd7c:	09 f0       	breq	.+2      	; 0x1cd80 <vfprintf+0x12a>
   1cd7e:	63 c0       	rjmp	.+198    	; 0x1ce46 <vfprintf+0x1f0>
   1cd80:	28 01       	movw	r4, r16
   1cd82:	f2 e0       	ldi	r31, 0x02	; 2
   1cd84:	4f 0e       	add	r4, r31
   1cd86:	51 1c       	adc	r5, r1
   1cd88:	f8 01       	movw	r30, r16
   1cd8a:	c0 80       	ld	r12, Z
   1cd8c:	d1 80       	ldd	r13, Z+1	; 0x01
   1cd8e:	69 2d       	mov	r22, r9
   1cd90:	70 e0       	ldi	r23, 0x00	; 0
   1cd92:	36 fc       	sbrc	r3, 6
   1cd94:	02 c0       	rjmp	.+4      	; 0x1cd9a <vfprintf+0x144>
   1cd96:	6f ef       	ldi	r22, 0xFF	; 255
   1cd98:	7f ef       	ldi	r23, 0xFF	; 255
   1cd9a:	c6 01       	movw	r24, r12
   1cd9c:	0e 94 38 ed 	call	0x1da70	; 0x1da70 <strnlen_P>
   1cda0:	4c 01       	movw	r8, r24
   1cda2:	68 94       	set
   1cda4:	37 f8       	bld	r3, 7
   1cda6:	82 01       	movw	r16, r4
   1cda8:	0a c0       	rjmp	.+20     	; 0x1cdbe <vfprintf+0x168>
   1cdaa:	0c 5f       	subi	r16, 0xFC	; 252
   1cdac:	1f 4f       	sbci	r17, 0xFF	; 255
   1cdae:	ff e3       	ldi	r31, 0x3F	; 63
   1cdb0:	f9 83       	std	Y+1, r31	; 0x01
   1cdb2:	88 24       	eor	r8, r8
   1cdb4:	83 94       	inc	r8
   1cdb6:	91 2c       	mov	r9, r1
   1cdb8:	65 01       	movw	r12, r10
   1cdba:	e8 94       	clt
   1cdbc:	37 f8       	bld	r3, 7
   1cdbe:	33 fe       	sbrs	r3, 3
   1cdc0:	2d c0       	rjmp	.+90     	; 0x1ce1c <vfprintf+0x1c6>
   1cdc2:	52 2c       	mov	r5, r2
   1cdc4:	81 14       	cp	r8, r1
   1cdc6:	91 04       	cpc	r9, r1
   1cdc8:	71 f5       	brne	.+92     	; 0x1ce26 <vfprintf+0x1d0>
   1cdca:	55 20       	and	r5, r5
   1cdcc:	09 f4       	brne	.+2      	; 0x1cdd0 <vfprintf+0x17a>
   1cdce:	68 cf       	rjmp	.-304    	; 0x1cca0 <vfprintf+0x4a>
   1cdd0:	b7 01       	movw	r22, r14
   1cdd2:	80 e2       	ldi	r24, 0x20	; 32
   1cdd4:	90 e0       	ldi	r25, 0x00	; 0
   1cdd6:	0e 94 65 ed 	call	0x1daca	; 0x1daca <fputc>
   1cdda:	5a 94       	dec	r5
   1cddc:	f6 cf       	rjmp	.-20     	; 0x1cdca <vfprintf+0x174>
   1cdde:	f8 01       	movw	r30, r16
   1cde0:	80 81       	ld	r24, Z
   1cde2:	89 83       	std	Y+1, r24	; 0x01
   1cde4:	0e 5f       	subi	r16, 0xFE	; 254
   1cde6:	1f 4f       	sbci	r17, 0xFF	; 255
   1cde8:	e4 cf       	rjmp	.-56     	; 0x1cdb2 <vfprintf+0x15c>
   1cdea:	28 01       	movw	r4, r16
   1cdec:	f2 e0       	ldi	r31, 0x02	; 2
   1cdee:	4f 0e       	add	r4, r31
   1cdf0:	51 1c       	adc	r5, r1
   1cdf2:	f8 01       	movw	r30, r16
   1cdf4:	c0 80       	ld	r12, Z
   1cdf6:	d1 80       	ldd	r13, Z+1	; 0x01
   1cdf8:	69 2d       	mov	r22, r9
   1cdfa:	70 e0       	ldi	r23, 0x00	; 0
   1cdfc:	36 fc       	sbrc	r3, 6
   1cdfe:	02 c0       	rjmp	.+4      	; 0x1ce04 <vfprintf+0x1ae>
   1ce00:	6f ef       	ldi	r22, 0xFF	; 255
   1ce02:	7f ef       	ldi	r23, 0xFF	; 255
   1ce04:	c6 01       	movw	r24, r12
   1ce06:	0e 94 4a ed 	call	0x1da94	; 0x1da94 <strnlen>
   1ce0a:	4c 01       	movw	r8, r24
   1ce0c:	82 01       	movw	r16, r4
   1ce0e:	d5 cf       	rjmp	.-86     	; 0x1cdba <vfprintf+0x164>
   1ce10:	b7 01       	movw	r22, r14
   1ce12:	80 e2       	ldi	r24, 0x20	; 32
   1ce14:	90 e0       	ldi	r25, 0x00	; 0
   1ce16:	0e 94 65 ed 	call	0x1daca	; 0x1daca <fputc>
   1ce1a:	2a 94       	dec	r2
   1ce1c:	28 14       	cp	r2, r8
   1ce1e:	19 04       	cpc	r1, r9
   1ce20:	09 f0       	breq	.+2      	; 0x1ce24 <vfprintf+0x1ce>
   1ce22:	b0 f7       	brcc	.-20     	; 0x1ce10 <vfprintf+0x1ba>
   1ce24:	ce cf       	rjmp	.-100    	; 0x1cdc2 <vfprintf+0x16c>
   1ce26:	f6 01       	movw	r30, r12
   1ce28:	37 fc       	sbrc	r3, 7
   1ce2a:	85 91       	lpm	r24, Z+
   1ce2c:	37 fe       	sbrs	r3, 7
   1ce2e:	81 91       	ld	r24, Z+
   1ce30:	6f 01       	movw	r12, r30
   1ce32:	b7 01       	movw	r22, r14
   1ce34:	90 e0       	ldi	r25, 0x00	; 0
   1ce36:	0e 94 65 ed 	call	0x1daca	; 0x1daca <fputc>
   1ce3a:	51 10       	cpse	r5, r1
   1ce3c:	5a 94       	dec	r5
   1ce3e:	f1 e0       	ldi	r31, 0x01	; 1
   1ce40:	8f 1a       	sub	r8, r31
   1ce42:	91 08       	sbc	r9, r1
   1ce44:	bf cf       	rjmp	.-130    	; 0x1cdc4 <vfprintf+0x16e>
   1ce46:	84 36       	cpi	r24, 0x64	; 100
   1ce48:	19 f0       	breq	.+6      	; 0x1ce50 <vfprintf+0x1fa>
   1ce4a:	89 36       	cpi	r24, 0x69	; 105
   1ce4c:	09 f0       	breq	.+2      	; 0x1ce50 <vfprintf+0x1fa>
   1ce4e:	77 c0       	rjmp	.+238    	; 0x1cf3e <vfprintf+0x2e8>
   1ce50:	f8 01       	movw	r30, r16
   1ce52:	37 fe       	sbrs	r3, 7
   1ce54:	6b c0       	rjmp	.+214    	; 0x1cf2c <vfprintf+0x2d6>
   1ce56:	60 81       	ld	r22, Z
   1ce58:	71 81       	ldd	r23, Z+1	; 0x01
   1ce5a:	82 81       	ldd	r24, Z+2	; 0x02
   1ce5c:	93 81       	ldd	r25, Z+3	; 0x03
   1ce5e:	0c 5f       	subi	r16, 0xFC	; 252
   1ce60:	1f 4f       	sbci	r17, 0xFF	; 255
   1ce62:	f3 2d       	mov	r31, r3
   1ce64:	ff 76       	andi	r31, 0x6F	; 111
   1ce66:	3f 2e       	mov	r3, r31
   1ce68:	97 ff       	sbrs	r25, 7
   1ce6a:	09 c0       	rjmp	.+18     	; 0x1ce7e <vfprintf+0x228>
   1ce6c:	90 95       	com	r25
   1ce6e:	80 95       	com	r24
   1ce70:	70 95       	com	r23
   1ce72:	61 95       	neg	r22
   1ce74:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce76:	8f 4f       	sbci	r24, 0xFF	; 255
   1ce78:	9f 4f       	sbci	r25, 0xFF	; 255
   1ce7a:	68 94       	set
   1ce7c:	37 f8       	bld	r3, 7
   1ce7e:	2a e0       	ldi	r18, 0x0A	; 10
   1ce80:	30 e0       	ldi	r19, 0x00	; 0
   1ce82:	a5 01       	movw	r20, r10
   1ce84:	0e 94 95 ed 	call	0x1db2a	; 0x1db2a <__ultoa_invert>
   1ce88:	c8 2e       	mov	r12, r24
   1ce8a:	ca 18       	sub	r12, r10
   1ce8c:	8c 2c       	mov	r8, r12
   1ce8e:	43 2c       	mov	r4, r3
   1ce90:	36 fe       	sbrs	r3, 6
   1ce92:	0c c0       	rjmp	.+24     	; 0x1ceac <vfprintf+0x256>
   1ce94:	e8 94       	clt
   1ce96:	40 f8       	bld	r4, 0
   1ce98:	c9 14       	cp	r12, r9
   1ce9a:	40 f4       	brcc	.+16     	; 0x1ceac <vfprintf+0x256>
   1ce9c:	34 fe       	sbrs	r3, 4
   1ce9e:	05 c0       	rjmp	.+10     	; 0x1ceaa <vfprintf+0x254>
   1cea0:	32 fc       	sbrc	r3, 2
   1cea2:	03 c0       	rjmp	.+6      	; 0x1ceaa <vfprintf+0x254>
   1cea4:	f3 2d       	mov	r31, r3
   1cea6:	fe 7e       	andi	r31, 0xEE	; 238
   1cea8:	4f 2e       	mov	r4, r31
   1ceaa:	89 2c       	mov	r8, r9
   1ceac:	44 fe       	sbrs	r4, 4
   1ceae:	aa c0       	rjmp	.+340    	; 0x1d004 <vfprintf+0x3ae>
   1ceb0:	fe 01       	movw	r30, r28
   1ceb2:	ec 0d       	add	r30, r12
   1ceb4:	f1 1d       	adc	r31, r1
   1ceb6:	80 81       	ld	r24, Z
   1ceb8:	80 33       	cpi	r24, 0x30	; 48
   1ceba:	09 f0       	breq	.+2      	; 0x1cebe <vfprintf+0x268>
   1cebc:	9c c0       	rjmp	.+312    	; 0x1cff6 <vfprintf+0x3a0>
   1cebe:	24 2d       	mov	r18, r4
   1cec0:	29 7e       	andi	r18, 0xE9	; 233
   1cec2:	42 2e       	mov	r4, r18
   1cec4:	84 2d       	mov	r24, r4
   1cec6:	88 70       	andi	r24, 0x08	; 8
   1cec8:	58 2e       	mov	r5, r24
   1ceca:	43 fc       	sbrc	r4, 3
   1cecc:	aa c0       	rjmp	.+340    	; 0x1d022 <vfprintf+0x3cc>
   1cece:	40 fe       	sbrs	r4, 0
   1ced0:	a4 c0       	rjmp	.+328    	; 0x1d01a <vfprintf+0x3c4>
   1ced2:	9c 2c       	mov	r9, r12
   1ced4:	82 14       	cp	r8, r2
   1ced6:	18 f4       	brcc	.+6      	; 0x1cede <vfprintf+0x288>
   1ced8:	2c 0c       	add	r2, r12
   1ceda:	92 2c       	mov	r9, r2
   1cedc:	98 18       	sub	r9, r8
   1cede:	44 fe       	sbrs	r4, 4
   1cee0:	a6 c0       	rjmp	.+332    	; 0x1d02e <vfprintf+0x3d8>
   1cee2:	b7 01       	movw	r22, r14
   1cee4:	80 e3       	ldi	r24, 0x30	; 48
   1cee6:	90 e0       	ldi	r25, 0x00	; 0
   1cee8:	0e 94 65 ed 	call	0x1daca	; 0x1daca <fputc>
   1ceec:	42 fe       	sbrs	r4, 2
   1ceee:	09 c0       	rjmp	.+18     	; 0x1cf02 <vfprintf+0x2ac>
   1cef0:	88 e7       	ldi	r24, 0x78	; 120
   1cef2:	90 e0       	ldi	r25, 0x00	; 0
   1cef4:	41 fe       	sbrs	r4, 1
   1cef6:	02 c0       	rjmp	.+4      	; 0x1cefc <vfprintf+0x2a6>
   1cef8:	88 e5       	ldi	r24, 0x58	; 88
   1cefa:	90 e0       	ldi	r25, 0x00	; 0
   1cefc:	b7 01       	movw	r22, r14
   1cefe:	0e 94 65 ed 	call	0x1daca	; 0x1daca <fputc>
   1cf02:	c9 14       	cp	r12, r9
   1cf04:	08 f4       	brcc	.+2      	; 0x1cf08 <vfprintf+0x2b2>
   1cf06:	9f c0       	rjmp	.+318    	; 0x1d046 <vfprintf+0x3f0>
   1cf08:	ca 94       	dec	r12
   1cf0a:	d1 2c       	mov	r13, r1
   1cf0c:	9f ef       	ldi	r25, 0xFF	; 255
   1cf0e:	c9 1a       	sub	r12, r25
   1cf10:	d9 0a       	sbc	r13, r25
   1cf12:	ca 0c       	add	r12, r10
   1cf14:	db 1c       	adc	r13, r11
   1cf16:	f6 01       	movw	r30, r12
   1cf18:	82 91       	ld	r24, -Z
   1cf1a:	6f 01       	movw	r12, r30
   1cf1c:	b7 01       	movw	r22, r14
   1cf1e:	90 e0       	ldi	r25, 0x00	; 0
   1cf20:	0e 94 65 ed 	call	0x1daca	; 0x1daca <fputc>
   1cf24:	ac 14       	cp	r10, r12
   1cf26:	bd 04       	cpc	r11, r13
   1cf28:	b1 f7       	brne	.-20     	; 0x1cf16 <vfprintf+0x2c0>
   1cf2a:	4f cf       	rjmp	.-354    	; 0x1cdca <vfprintf+0x174>
   1cf2c:	60 81       	ld	r22, Z
   1cf2e:	71 81       	ldd	r23, Z+1	; 0x01
   1cf30:	07 2e       	mov	r0, r23
   1cf32:	00 0c       	add	r0, r0
   1cf34:	88 0b       	sbc	r24, r24
   1cf36:	99 0b       	sbc	r25, r25
   1cf38:	0e 5f       	subi	r16, 0xFE	; 254
   1cf3a:	1f 4f       	sbci	r17, 0xFF	; 255
   1cf3c:	92 cf       	rjmp	.-220    	; 0x1ce62 <vfprintf+0x20c>
   1cf3e:	d3 2c       	mov	r13, r3
   1cf40:	e8 94       	clt
   1cf42:	d4 f8       	bld	r13, 4
   1cf44:	2a e0       	ldi	r18, 0x0A	; 10
   1cf46:	30 e0       	ldi	r19, 0x00	; 0
   1cf48:	85 37       	cpi	r24, 0x75	; 117
   1cf4a:	e1 f1       	breq	.+120    	; 0x1cfc4 <vfprintf+0x36e>
   1cf4c:	23 2d       	mov	r18, r3
   1cf4e:	29 7f       	andi	r18, 0xF9	; 249
   1cf50:	d2 2e       	mov	r13, r18
   1cf52:	8f 36       	cpi	r24, 0x6F	; 111
   1cf54:	a9 f1       	breq	.+106    	; 0x1cfc0 <vfprintf+0x36a>
   1cf56:	f0 f4       	brcc	.+60     	; 0x1cf94 <vfprintf+0x33e>
   1cf58:	88 35       	cpi	r24, 0x58	; 88
   1cf5a:	51 f1       	breq	.+84     	; 0x1cfb0 <vfprintf+0x35a>
   1cf5c:	f7 01       	movw	r30, r14
   1cf5e:	86 81       	ldd	r24, Z+6	; 0x06
   1cf60:	97 81       	ldd	r25, Z+7	; 0x07
   1cf62:	2b 96       	adiw	r28, 0x0b	; 11
   1cf64:	0f b6       	in	r0, 0x3f	; 63
   1cf66:	f8 94       	cli
   1cf68:	de bf       	out	0x3e, r29	; 62
   1cf6a:	0f be       	out	0x3f, r0	; 63
   1cf6c:	cd bf       	out	0x3d, r28	; 61
   1cf6e:	df 91       	pop	r29
   1cf70:	cf 91       	pop	r28
   1cf72:	1f 91       	pop	r17
   1cf74:	0f 91       	pop	r16
   1cf76:	ff 90       	pop	r15
   1cf78:	ef 90       	pop	r14
   1cf7a:	df 90       	pop	r13
   1cf7c:	cf 90       	pop	r12
   1cf7e:	bf 90       	pop	r11
   1cf80:	af 90       	pop	r10
   1cf82:	9f 90       	pop	r9
   1cf84:	8f 90       	pop	r8
   1cf86:	7f 90       	pop	r7
   1cf88:	6f 90       	pop	r6
   1cf8a:	5f 90       	pop	r5
   1cf8c:	4f 90       	pop	r4
   1cf8e:	3f 90       	pop	r3
   1cf90:	2f 90       	pop	r2
   1cf92:	08 95       	ret
   1cf94:	80 37       	cpi	r24, 0x70	; 112
   1cf96:	49 f0       	breq	.+18     	; 0x1cfaa <vfprintf+0x354>
   1cf98:	88 37       	cpi	r24, 0x78	; 120
   1cf9a:	01 f7       	brne	.-64     	; 0x1cf5c <vfprintf+0x306>
   1cf9c:	d4 fe       	sbrs	r13, 4
   1cf9e:	02 c0       	rjmp	.+4      	; 0x1cfa4 <vfprintf+0x34e>
   1cfa0:	68 94       	set
   1cfa2:	d2 f8       	bld	r13, 2
   1cfa4:	20 e1       	ldi	r18, 0x10	; 16
   1cfa6:	30 e0       	ldi	r19, 0x00	; 0
   1cfa8:	0d c0       	rjmp	.+26     	; 0x1cfc4 <vfprintf+0x36e>
   1cfaa:	68 94       	set
   1cfac:	d4 f8       	bld	r13, 4
   1cfae:	f6 cf       	rjmp	.-20     	; 0x1cf9c <vfprintf+0x346>
   1cfb0:	34 fe       	sbrs	r3, 4
   1cfb2:	03 c0       	rjmp	.+6      	; 0x1cfba <vfprintf+0x364>
   1cfb4:	82 2f       	mov	r24, r18
   1cfb6:	86 60       	ori	r24, 0x06	; 6
   1cfb8:	d8 2e       	mov	r13, r24
   1cfba:	20 e1       	ldi	r18, 0x10	; 16
   1cfbc:	32 e0       	ldi	r19, 0x02	; 2
   1cfbe:	02 c0       	rjmp	.+4      	; 0x1cfc4 <vfprintf+0x36e>
   1cfc0:	28 e0       	ldi	r18, 0x08	; 8
   1cfc2:	30 e0       	ldi	r19, 0x00	; 0
   1cfc4:	f8 01       	movw	r30, r16
   1cfc6:	d7 fe       	sbrs	r13, 7
   1cfc8:	0f c0       	rjmp	.+30     	; 0x1cfe8 <vfprintf+0x392>
   1cfca:	60 81       	ld	r22, Z
   1cfcc:	71 81       	ldd	r23, Z+1	; 0x01
   1cfce:	82 81       	ldd	r24, Z+2	; 0x02
   1cfd0:	93 81       	ldd	r25, Z+3	; 0x03
   1cfd2:	0c 5f       	subi	r16, 0xFC	; 252
   1cfd4:	1f 4f       	sbci	r17, 0xFF	; 255
   1cfd6:	a5 01       	movw	r20, r10
   1cfd8:	0e 94 95 ed 	call	0x1db2a	; 0x1db2a <__ultoa_invert>
   1cfdc:	c8 2e       	mov	r12, r24
   1cfde:	ca 18       	sub	r12, r10
   1cfe0:	3d 2c       	mov	r3, r13
   1cfe2:	e8 94       	clt
   1cfe4:	37 f8       	bld	r3, 7
   1cfe6:	52 cf       	rjmp	.-348    	; 0x1ce8c <vfprintf+0x236>
   1cfe8:	60 81       	ld	r22, Z
   1cfea:	71 81       	ldd	r23, Z+1	; 0x01
   1cfec:	90 e0       	ldi	r25, 0x00	; 0
   1cfee:	80 e0       	ldi	r24, 0x00	; 0
   1cff0:	0e 5f       	subi	r16, 0xFE	; 254
   1cff2:	1f 4f       	sbci	r17, 0xFF	; 255
   1cff4:	f0 cf       	rjmp	.-32     	; 0x1cfd6 <vfprintf+0x380>
   1cff6:	42 fc       	sbrc	r4, 2
   1cff8:	02 c0       	rjmp	.+4      	; 0x1cffe <vfprintf+0x3a8>
   1cffa:	83 94       	inc	r8
   1cffc:	63 cf       	rjmp	.-314    	; 0x1cec4 <vfprintf+0x26e>
   1cffe:	83 94       	inc	r8
   1d000:	83 94       	inc	r8
   1d002:	60 cf       	rjmp	.-320    	; 0x1cec4 <vfprintf+0x26e>
   1d004:	84 2d       	mov	r24, r4
   1d006:	86 78       	andi	r24, 0x86	; 134
   1d008:	09 f4       	brne	.+2      	; 0x1d00c <vfprintf+0x3b6>
   1d00a:	5c cf       	rjmp	.-328    	; 0x1cec4 <vfprintf+0x26e>
   1d00c:	f6 cf       	rjmp	.-20     	; 0x1cffa <vfprintf+0x3a4>
   1d00e:	b7 01       	movw	r22, r14
   1d010:	80 e2       	ldi	r24, 0x20	; 32
   1d012:	90 e0       	ldi	r25, 0x00	; 0
   1d014:	0e 94 65 ed 	call	0x1daca	; 0x1daca <fputc>
   1d018:	83 94       	inc	r8
   1d01a:	82 14       	cp	r8, r2
   1d01c:	c0 f3       	brcs	.-16     	; 0x1d00e <vfprintf+0x3b8>
   1d01e:	51 2c       	mov	r5, r1
   1d020:	5e cf       	rjmp	.-324    	; 0x1cede <vfprintf+0x288>
   1d022:	52 2c       	mov	r5, r2
   1d024:	58 18       	sub	r5, r8
   1d026:	82 14       	cp	r8, r2
   1d028:	08 f4       	brcc	.+2      	; 0x1d02c <vfprintf+0x3d6>
   1d02a:	59 cf       	rjmp	.-334    	; 0x1cede <vfprintf+0x288>
   1d02c:	f8 cf       	rjmp	.-16     	; 0x1d01e <vfprintf+0x3c8>
   1d02e:	84 2d       	mov	r24, r4
   1d030:	86 78       	andi	r24, 0x86	; 134
   1d032:	09 f4       	brne	.+2      	; 0x1d036 <vfprintf+0x3e0>
   1d034:	66 cf       	rjmp	.-308    	; 0x1cf02 <vfprintf+0x2ac>
   1d036:	8b e2       	ldi	r24, 0x2B	; 43
   1d038:	41 fe       	sbrs	r4, 1
   1d03a:	80 e2       	ldi	r24, 0x20	; 32
   1d03c:	47 fc       	sbrc	r4, 7
   1d03e:	8d e2       	ldi	r24, 0x2D	; 45
   1d040:	b7 01       	movw	r22, r14
   1d042:	90 e0       	ldi	r25, 0x00	; 0
   1d044:	5c cf       	rjmp	.-328    	; 0x1cefe <vfprintf+0x2a8>
   1d046:	b7 01       	movw	r22, r14
   1d048:	80 e3       	ldi	r24, 0x30	; 48
   1d04a:	90 e0       	ldi	r25, 0x00	; 0
   1d04c:	0e 94 65 ed 	call	0x1daca	; 0x1daca <fputc>
   1d050:	9a 94       	dec	r9
   1d052:	57 cf       	rjmp	.-338    	; 0x1cf02 <vfprintf+0x2ac>
   1d054:	8f ef       	ldi	r24, 0xFF	; 255
   1d056:	9f ef       	ldi	r25, 0xFF	; 255
   1d058:	84 cf       	rjmp	.-248    	; 0x1cf62 <vfprintf+0x30c>

0001d05a <calloc>:
calloc():
   1d05a:	0f 93       	push	r16
   1d05c:	1f 93       	push	r17
   1d05e:	cf 93       	push	r28
   1d060:	df 93       	push	r29
   1d062:	86 9f       	mul	r24, r22
   1d064:	80 01       	movw	r16, r0
   1d066:	87 9f       	mul	r24, r23
   1d068:	10 0d       	add	r17, r0
   1d06a:	96 9f       	mul	r25, r22
   1d06c:	10 0d       	add	r17, r0
   1d06e:	11 24       	eor	r1, r1
   1d070:	c8 01       	movw	r24, r16
   1d072:	0e 94 c2 e9 	call	0x1d384	; 0x1d384 <malloc>
   1d076:	ec 01       	movw	r28, r24
   1d078:	00 97       	sbiw	r24, 0x00	; 0
   1d07a:	29 f0       	breq	.+10     	; 0x1d086 <calloc+0x2c>
   1d07c:	a8 01       	movw	r20, r16
   1d07e:	70 e0       	ldi	r23, 0x00	; 0
   1d080:	60 e0       	ldi	r22, 0x00	; 0
   1d082:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <memset>
   1d086:	ce 01       	movw	r24, r28
   1d088:	df 91       	pop	r29
   1d08a:	cf 91       	pop	r28
   1d08c:	1f 91       	pop	r17
   1d08e:	0f 91       	pop	r16
   1d090:	08 95       	ret

0001d092 <dtoa_prf>:
dtoa_prf():
   1d092:	8f 92       	push	r8
   1d094:	9f 92       	push	r9
   1d096:	af 92       	push	r10
   1d098:	bf 92       	push	r11
   1d09a:	cf 92       	push	r12
   1d09c:	df 92       	push	r13
   1d09e:	ef 92       	push	r14
   1d0a0:	ff 92       	push	r15
   1d0a2:	0f 93       	push	r16
   1d0a4:	1f 93       	push	r17
   1d0a6:	cf 93       	push	r28
   1d0a8:	df 93       	push	r29
   1d0aa:	00 d0       	rcall	.+0      	; 0x1d0ac <dtoa_prf+0x1a>
   1d0ac:	00 d0       	rcall	.+0      	; 0x1d0ae <dtoa_prf+0x1c>
   1d0ae:	00 d0       	rcall	.+0      	; 0x1d0b0 <dtoa_prf+0x1e>
   1d0b0:	cd b7       	in	r28, 0x3d	; 61
   1d0b2:	de b7       	in	r29, 0x3e	; 62
   1d0b4:	6a 01       	movw	r12, r20
   1d0b6:	f2 2e       	mov	r15, r18
   1d0b8:	b0 2e       	mov	r11, r16
   1d0ba:	10 2f       	mov	r17, r16
   1d0bc:	fb e3       	ldi	r31, 0x3B	; 59
   1d0be:	af 2e       	mov	r10, r31
   1d0c0:	a0 16       	cp	r10, r16
   1d0c2:	08 f4       	brcc	.+2      	; 0x1d0c6 <dtoa_prf+0x34>
   1d0c4:	1b e3       	ldi	r17, 0x3B	; 59
   1d0c6:	1f 5f       	subi	r17, 0xFF	; 255
   1d0c8:	01 2f       	mov	r16, r17
   1d0ca:	27 e0       	ldi	r18, 0x07	; 7
   1d0cc:	ae 01       	movw	r20, r28
   1d0ce:	4f 5f       	subi	r20, 0xFF	; 255
   1d0d0:	5f 4f       	sbci	r21, 0xFF	; 255
   1d0d2:	0e 94 45 ec 	call	0x1d88a	; 0x1d88a <__ftoa_engine>
   1d0d6:	bc 01       	movw	r22, r24
   1d0d8:	89 81       	ldd	r24, Y+1	; 0x01
   1d0da:	98 2f       	mov	r25, r24
   1d0dc:	99 70       	andi	r25, 0x09	; 9
   1d0de:	91 30       	cpi	r25, 0x01	; 1
   1d0e0:	09 f4       	brne	.+2      	; 0x1d0e4 <dtoa_prf+0x52>
   1d0e2:	4e c0       	rjmp	.+156    	; 0x1d180 <dtoa_prf+0xee>
   1d0e4:	9b e2       	ldi	r25, 0x2B	; 43
   1d0e6:	e1 fc       	sbrc	r14, 1
   1d0e8:	04 c0       	rjmp	.+8      	; 0x1d0f2 <dtoa_prf+0x60>
   1d0ea:	9e 2d       	mov	r25, r14
   1d0ec:	91 70       	andi	r25, 0x01	; 1
   1d0ee:	e0 fc       	sbrc	r14, 0
   1d0f0:	49 c0       	rjmp	.+146    	; 0x1d184 <dtoa_prf+0xf2>
   1d0f2:	5e 2d       	mov	r21, r14
   1d0f4:	50 71       	andi	r21, 0x10	; 16
   1d0f6:	e8 2f       	mov	r30, r24
   1d0f8:	e8 70       	andi	r30, 0x08	; 8
   1d0fa:	83 ff       	sbrs	r24, 3
   1d0fc:	55 c0       	rjmp	.+170    	; 0x1d1a8 <dtoa_prf+0x116>
   1d0fe:	84 e0       	ldi	r24, 0x04	; 4
   1d100:	91 11       	cpse	r25, r1
   1d102:	01 c0       	rjmp	.+2      	; 0x1d106 <dtoa_prf+0x74>
   1d104:	83 e0       	ldi	r24, 0x03	; 3
   1d106:	ef 2d       	mov	r30, r15
   1d108:	e8 1b       	sub	r30, r24
   1d10a:	8f 15       	cp	r24, r15
   1d10c:	08 f0       	brcs	.+2      	; 0x1d110 <dtoa_prf+0x7e>
   1d10e:	e0 e0       	ldi	r30, 0x00	; 0
   1d110:	d6 01       	movw	r26, r12
   1d112:	8e 2f       	mov	r24, r30
   1d114:	20 e2       	ldi	r18, 0x20	; 32
   1d116:	55 23       	and	r21, r21
   1d118:	c9 f1       	breq	.+114    	; 0x1d18c <dtoa_prf+0xfa>
   1d11a:	99 23       	and	r25, r25
   1d11c:	29 f0       	breq	.+10     	; 0x1d128 <dtoa_prf+0x96>
   1d11e:	d6 01       	movw	r26, r12
   1d120:	9c 93       	st	X, r25
   1d122:	c6 01       	movw	r24, r12
   1d124:	01 96       	adiw	r24, 0x01	; 1
   1d126:	6c 01       	movw	r12, r24
   1d128:	96 01       	movw	r18, r12
   1d12a:	2d 5f       	subi	r18, 0xFD	; 253
   1d12c:	3f 4f       	sbci	r19, 0xFF	; 255
   1d12e:	e2 fe       	sbrs	r14, 2
   1d130:	33 c0       	rjmp	.+102    	; 0x1d198 <dtoa_prf+0x106>
   1d132:	8e e4       	ldi	r24, 0x4E	; 78
   1d134:	d6 01       	movw	r26, r12
   1d136:	8c 93       	st	X, r24
   1d138:	91 e4       	ldi	r25, 0x41	; 65
   1d13a:	11 96       	adiw	r26, 0x01	; 1
   1d13c:	9c 93       	st	X, r25
   1d13e:	11 97       	sbiw	r26, 0x01	; 1
   1d140:	12 96       	adiw	r26, 0x02	; 2
   1d142:	8c 93       	st	X, r24
   1d144:	d9 01       	movw	r26, r18
   1d146:	8e 2f       	mov	r24, r30
   1d148:	90 e2       	ldi	r25, 0x20	; 32
   1d14a:	81 11       	cpse	r24, r1
   1d14c:	2a c0       	rjmp	.+84     	; 0x1d1a2 <dtoa_prf+0x110>
   1d14e:	e2 0f       	add	r30, r18
   1d150:	f3 2f       	mov	r31, r19
   1d152:	f1 1d       	adc	r31, r1
   1d154:	10 82       	st	Z, r1
   1d156:	8e ef       	ldi	r24, 0xFE	; 254
   1d158:	9f ef       	ldi	r25, 0xFF	; 255
   1d15a:	29 96       	adiw	r28, 0x09	; 9
   1d15c:	0f b6       	in	r0, 0x3f	; 63
   1d15e:	f8 94       	cli
   1d160:	de bf       	out	0x3e, r29	; 62
   1d162:	0f be       	out	0x3f, r0	; 63
   1d164:	cd bf       	out	0x3d, r28	; 61
   1d166:	df 91       	pop	r29
   1d168:	cf 91       	pop	r28
   1d16a:	1f 91       	pop	r17
   1d16c:	0f 91       	pop	r16
   1d16e:	ff 90       	pop	r15
   1d170:	ef 90       	pop	r14
   1d172:	df 90       	pop	r13
   1d174:	cf 90       	pop	r12
   1d176:	bf 90       	pop	r11
   1d178:	af 90       	pop	r10
   1d17a:	9f 90       	pop	r9
   1d17c:	8f 90       	pop	r8
   1d17e:	08 95       	ret
   1d180:	9d e2       	ldi	r25, 0x2D	; 45
   1d182:	b7 cf       	rjmp	.-146    	; 0x1d0f2 <dtoa_prf+0x60>
   1d184:	90 e2       	ldi	r25, 0x20	; 32
   1d186:	b5 cf       	rjmp	.-150    	; 0x1d0f2 <dtoa_prf+0x60>
   1d188:	2d 93       	st	X+, r18
   1d18a:	81 50       	subi	r24, 0x01	; 1
   1d18c:	81 11       	cpse	r24, r1
   1d18e:	fc cf       	rjmp	.-8      	; 0x1d188 <dtoa_prf+0xf6>
   1d190:	ce 0e       	add	r12, r30
   1d192:	d1 1c       	adc	r13, r1
   1d194:	e0 e0       	ldi	r30, 0x00	; 0
   1d196:	c1 cf       	rjmp	.-126    	; 0x1d11a <dtoa_prf+0x88>
   1d198:	8e e6       	ldi	r24, 0x6E	; 110
   1d19a:	d6 01       	movw	r26, r12
   1d19c:	8c 93       	st	X, r24
   1d19e:	91 e6       	ldi	r25, 0x61	; 97
   1d1a0:	cc cf       	rjmp	.-104    	; 0x1d13a <dtoa_prf+0xa8>
   1d1a2:	9d 93       	st	X+, r25
   1d1a4:	81 50       	subi	r24, 0x01	; 1
   1d1a6:	d1 cf       	rjmp	.-94     	; 0x1d14a <dtoa_prf+0xb8>
   1d1a8:	48 2f       	mov	r20, r24
   1d1aa:	44 70       	andi	r20, 0x04	; 4
   1d1ac:	82 ff       	sbrs	r24, 2
   1d1ae:	3d c0       	rjmp	.+122    	; 0x1d22a <dtoa_prf+0x198>
   1d1b0:	84 e0       	ldi	r24, 0x04	; 4
   1d1b2:	91 11       	cpse	r25, r1
   1d1b4:	01 c0       	rjmp	.+2      	; 0x1d1b8 <dtoa_prf+0x126>
   1d1b6:	83 e0       	ldi	r24, 0x03	; 3
   1d1b8:	8f 15       	cp	r24, r15
   1d1ba:	10 f4       	brcc	.+4      	; 0x1d1c0 <dtoa_prf+0x12e>
   1d1bc:	ef 2d       	mov	r30, r15
   1d1be:	e8 1b       	sub	r30, r24
   1d1c0:	d6 01       	movw	r26, r12
   1d1c2:	8e 2f       	mov	r24, r30
   1d1c4:	20 e2       	ldi	r18, 0x20	; 32
   1d1c6:	55 23       	and	r21, r21
   1d1c8:	09 f1       	breq	.+66     	; 0x1d20c <dtoa_prf+0x17a>
   1d1ca:	99 23       	and	r25, r25
   1d1cc:	29 f0       	breq	.+10     	; 0x1d1d8 <dtoa_prf+0x146>
   1d1ce:	d6 01       	movw	r26, r12
   1d1d0:	9c 93       	st	X, r25
   1d1d2:	c6 01       	movw	r24, r12
   1d1d4:	01 96       	adiw	r24, 0x01	; 1
   1d1d6:	6c 01       	movw	r12, r24
   1d1d8:	96 01       	movw	r18, r12
   1d1da:	2d 5f       	subi	r18, 0xFD	; 253
   1d1dc:	3f 4f       	sbci	r19, 0xFF	; 255
   1d1de:	e2 fe       	sbrs	r14, 2
   1d1e0:	1b c0       	rjmp	.+54     	; 0x1d218 <dtoa_prf+0x186>
   1d1e2:	89 e4       	ldi	r24, 0x49	; 73
   1d1e4:	d6 01       	movw	r26, r12
   1d1e6:	8c 93       	st	X, r24
   1d1e8:	8e e4       	ldi	r24, 0x4E	; 78
   1d1ea:	11 96       	adiw	r26, 0x01	; 1
   1d1ec:	8c 93       	st	X, r24
   1d1ee:	11 97       	sbiw	r26, 0x01	; 1
   1d1f0:	86 e4       	ldi	r24, 0x46	; 70
   1d1f2:	12 96       	adiw	r26, 0x02	; 2
   1d1f4:	8c 93       	st	X, r24
   1d1f6:	d9 01       	movw	r26, r18
   1d1f8:	8e 2f       	mov	r24, r30
   1d1fa:	90 e2       	ldi	r25, 0x20	; 32
   1d1fc:	88 23       	and	r24, r24
   1d1fe:	09 f4       	brne	.+2      	; 0x1d202 <dtoa_prf+0x170>
   1d200:	a6 cf       	rjmp	.-180    	; 0x1d14e <dtoa_prf+0xbc>
   1d202:	9d 93       	st	X+, r25
   1d204:	81 50       	subi	r24, 0x01	; 1
   1d206:	fa cf       	rjmp	.-12     	; 0x1d1fc <dtoa_prf+0x16a>
   1d208:	2d 93       	st	X+, r18
   1d20a:	81 50       	subi	r24, 0x01	; 1
   1d20c:	81 11       	cpse	r24, r1
   1d20e:	fc cf       	rjmp	.-8      	; 0x1d208 <dtoa_prf+0x176>
   1d210:	ce 0e       	add	r12, r30
   1d212:	d1 1c       	adc	r13, r1
   1d214:	e0 e0       	ldi	r30, 0x00	; 0
   1d216:	d9 cf       	rjmp	.-78     	; 0x1d1ca <dtoa_prf+0x138>
   1d218:	89 e6       	ldi	r24, 0x69	; 105
   1d21a:	d6 01       	movw	r26, r12
   1d21c:	8c 93       	st	X, r24
   1d21e:	8e e6       	ldi	r24, 0x6E	; 110
   1d220:	11 96       	adiw	r26, 0x01	; 1
   1d222:	8c 93       	st	X, r24
   1d224:	11 97       	sbiw	r26, 0x01	; 1
   1d226:	86 e6       	ldi	r24, 0x66	; 102
   1d228:	e4 cf       	rjmp	.-56     	; 0x1d1f2 <dtoa_prf+0x160>
   1d22a:	9b 01       	movw	r18, r22
   1d22c:	77 ff       	sbrs	r23, 7
   1d22e:	02 c0       	rjmp	.+4      	; 0x1d234 <dtoa_prf+0x1a2>
   1d230:	30 e0       	ldi	r19, 0x00	; 0
   1d232:	20 e0       	ldi	r18, 0x00	; 0
   1d234:	a1 e0       	ldi	r26, 0x01	; 1
   1d236:	b0 e0       	ldi	r27, 0x00	; 0
   1d238:	91 11       	cpse	r25, r1
   1d23a:	02 c0       	rjmp	.+4      	; 0x1d240 <dtoa_prf+0x1ae>
   1d23c:	b0 e0       	ldi	r27, 0x00	; 0
   1d23e:	a0 e0       	ldi	r26, 0x00	; 0
   1d240:	f9 01       	movw	r30, r18
   1d242:	31 96       	adiw	r30, 0x01	; 1
   1d244:	ae 0f       	add	r26, r30
   1d246:	bf 1f       	adc	r27, r31
   1d248:	8b 2c       	mov	r8, r11
   1d24a:	91 2c       	mov	r9, r1
   1d24c:	bb 20       	and	r11, r11
   1d24e:	09 f4       	brne	.+2      	; 0x1d252 <dtoa_prf+0x1c0>
   1d250:	61 c0       	rjmp	.+194    	; 0x1d314 <dtoa_prf+0x282>
   1d252:	54 01       	movw	r10, r8
   1d254:	ef ef       	ldi	r30, 0xFF	; 255
   1d256:	ae 1a       	sub	r10, r30
   1d258:	be 0a       	sbc	r11, r30
   1d25a:	aa 0d       	add	r26, r10
   1d25c:	bb 1d       	adc	r27, r11
   1d25e:	fa 16       	cp	r15, r26
   1d260:	1b 06       	cpc	r1, r27
   1d262:	19 f0       	breq	.+6      	; 0x1d26a <dtoa_prf+0x1d8>
   1d264:	14 f0       	brlt	.+4      	; 0x1d26a <dtoa_prf+0x1d8>
   1d266:	4f 2d       	mov	r20, r15
   1d268:	4a 1b       	sub	r20, r26
   1d26a:	51 11       	cpse	r21, r1
   1d26c:	88 c0       	rjmp	.+272    	; 0x1d37e <dtoa_prf+0x2ec>
   1d26e:	e3 fc       	sbrc	r14, 3
   1d270:	59 c0       	rjmp	.+178    	; 0x1d324 <dtoa_prf+0x292>
   1d272:	76 01       	movw	r14, r12
   1d274:	a4 2f       	mov	r26, r20
   1d276:	b0 e2       	ldi	r27, 0x20	; 32
   1d278:	a1 11       	cpse	r26, r1
   1d27a:	4f c0       	rjmp	.+158    	; 0x1d31a <dtoa_prf+0x288>
   1d27c:	c4 0e       	add	r12, r20
   1d27e:	d1 1c       	adc	r13, r1
   1d280:	99 23       	and	r25, r25
   1d282:	09 f4       	brne	.+2      	; 0x1d286 <dtoa_prf+0x1f4>
   1d284:	5b c0       	rjmp	.+182    	; 0x1d33c <dtoa_prf+0x2aa>
   1d286:	40 e0       	ldi	r20, 0x00	; 0
   1d288:	d6 01       	movw	r26, r12
   1d28a:	11 96       	adiw	r26, 0x01	; 1
   1d28c:	f6 01       	movw	r30, r12
   1d28e:	90 83       	st	Z, r25
   1d290:	6d 01       	movw	r12, r26
   1d292:	55 23       	and	r21, r21
   1d294:	09 f4       	brne	.+2      	; 0x1d298 <dtoa_prf+0x206>
   1d296:	48 c0       	rjmp	.+144    	; 0x1d328 <dtoa_prf+0x296>
   1d298:	01 2f       	mov	r16, r17
   1d29a:	06 0f       	add	r16, r22
   1d29c:	9a 81       	ldd	r25, Y+2	; 0x02
   1d29e:	58 2f       	mov	r21, r24
   1d2a0:	50 71       	andi	r21, 0x10	; 16
   1d2a2:	84 ff       	sbrs	r24, 4
   1d2a4:	03 c0       	rjmp	.+6      	; 0x1d2ac <dtoa_prf+0x21a>
   1d2a6:	91 33       	cpi	r25, 0x31	; 49
   1d2a8:	09 f4       	brne	.+2      	; 0x1d2ac <dtoa_prf+0x21a>
   1d2aa:	01 50       	subi	r16, 0x01	; 1
   1d2ac:	10 16       	cp	r1, r16
   1d2ae:	0c f0       	brlt	.+2      	; 0x1d2b2 <dtoa_prf+0x220>
   1d2b0:	47 c0       	rjmp	.+142    	; 0x1d340 <dtoa_prf+0x2ae>
   1d2b2:	09 30       	cpi	r16, 0x09	; 9
   1d2b4:	08 f0       	brcs	.+2      	; 0x1d2b8 <dtoa_prf+0x226>
   1d2b6:	08 e0       	ldi	r16, 0x08	; 8
   1d2b8:	ee e2       	ldi	r30, 0x2E	; 46
   1d2ba:	fe 2e       	mov	r15, r30
   1d2bc:	5b 01       	movw	r10, r22
   1d2be:	a0 1a       	sub	r10, r16
   1d2c0:	b1 08       	sbc	r11, r1
   1d2c2:	85 01       	movw	r16, r10
   1d2c4:	91 94       	neg	r9
   1d2c6:	81 94       	neg	r8
   1d2c8:	91 08       	sbc	r9, r1
   1d2ca:	2f 3f       	cpi	r18, 0xFF	; 255
   1d2cc:	32 07       	cpc	r19, r18
   1d2ce:	29 f4       	brne	.+10     	; 0x1d2da <dtoa_prf+0x248>
   1d2d0:	d6 01       	movw	r26, r12
   1d2d2:	fc 92       	st	X, r15
   1d2d4:	f6 01       	movw	r30, r12
   1d2d6:	31 96       	adiw	r30, 0x01	; 1
   1d2d8:	6f 01       	movw	r12, r30
   1d2da:	62 17       	cp	r22, r18
   1d2dc:	73 07       	cpc	r23, r19
   1d2de:	94 f1       	brlt	.+100    	; 0x1d344 <dtoa_prf+0x2b2>
   1d2e0:	02 17       	cp	r16, r18
   1d2e2:	13 07       	cpc	r17, r19
   1d2e4:	7c f5       	brge	.+94     	; 0x1d344 <dtoa_prf+0x2b2>
   1d2e6:	db 01       	movw	r26, r22
   1d2e8:	a2 1b       	sub	r26, r18
   1d2ea:	b3 0b       	sbc	r27, r19
   1d2ec:	aa 24       	eor	r10, r10
   1d2ee:	a3 94       	inc	r10
   1d2f0:	b1 2c       	mov	r11, r1
   1d2f2:	ac 0e       	add	r10, r28
   1d2f4:	bd 1e       	adc	r11, r29
   1d2f6:	aa 0d       	add	r26, r10
   1d2f8:	bb 1d       	adc	r27, r11
   1d2fa:	11 96       	adiw	r26, 0x01	; 1
   1d2fc:	8c 91       	ld	r24, X
   1d2fe:	21 50       	subi	r18, 0x01	; 1
   1d300:	31 09       	sbc	r19, r1
   1d302:	d6 01       	movw	r26, r12
   1d304:	11 96       	adiw	r26, 0x01	; 1
   1d306:	28 15       	cp	r18, r8
   1d308:	39 05       	cpc	r19, r9
   1d30a:	f4 f0       	brlt	.+60     	; 0x1d348 <dtoa_prf+0x2b6>
   1d30c:	f6 01       	movw	r30, r12
   1d30e:	80 83       	st	Z, r24
   1d310:	6d 01       	movw	r12, r26
   1d312:	db cf       	rjmp	.-74     	; 0x1d2ca <dtoa_prf+0x238>
   1d314:	b1 2c       	mov	r11, r1
   1d316:	a1 2c       	mov	r10, r1
   1d318:	a0 cf       	rjmp	.-192    	; 0x1d25a <dtoa_prf+0x1c8>
   1d31a:	f7 01       	movw	r30, r14
   1d31c:	b1 93       	st	Z+, r27
   1d31e:	7f 01       	movw	r14, r30
   1d320:	a1 50       	subi	r26, 0x01	; 1
   1d322:	aa cf       	rjmp	.-172    	; 0x1d278 <dtoa_prf+0x1e6>
   1d324:	91 11       	cpse	r25, r1
   1d326:	b0 cf       	rjmp	.-160    	; 0x1d288 <dtoa_prf+0x1f6>
   1d328:	d6 01       	movw	r26, r12
   1d32a:	94 2f       	mov	r25, r20
   1d32c:	50 e3       	ldi	r21, 0x30	; 48
   1d32e:	02 c0       	rjmp	.+4      	; 0x1d334 <dtoa_prf+0x2a2>
   1d330:	5d 93       	st	X+, r21
   1d332:	91 50       	subi	r25, 0x01	; 1
   1d334:	91 11       	cpse	r25, r1
   1d336:	fc cf       	rjmp	.-8      	; 0x1d330 <dtoa_prf+0x29e>
   1d338:	c4 0e       	add	r12, r20
   1d33a:	d1 1c       	adc	r13, r1
   1d33c:	40 e0       	ldi	r20, 0x00	; 0
   1d33e:	ac cf       	rjmp	.-168    	; 0x1d298 <dtoa_prf+0x206>
   1d340:	01 e0       	ldi	r16, 0x01	; 1
   1d342:	ba cf       	rjmp	.-140    	; 0x1d2b8 <dtoa_prf+0x226>
   1d344:	80 e3       	ldi	r24, 0x30	; 48
   1d346:	db cf       	rjmp	.-74     	; 0x1d2fe <dtoa_prf+0x26c>
   1d348:	62 17       	cp	r22, r18
   1d34a:	73 07       	cpc	r23, r19
   1d34c:	31 f4       	brne	.+12     	; 0x1d35a <dtoa_prf+0x2c8>
   1d34e:	96 33       	cpi	r25, 0x36	; 54
   1d350:	88 f4       	brcc	.+34     	; 0x1d374 <dtoa_prf+0x2e2>
   1d352:	95 33       	cpi	r25, 0x35	; 53
   1d354:	11 f4       	brne	.+4      	; 0x1d35a <dtoa_prf+0x2c8>
   1d356:	55 23       	and	r21, r21
   1d358:	69 f0       	breq	.+26     	; 0x1d374 <dtoa_prf+0x2e2>
   1d35a:	f6 01       	movw	r30, r12
   1d35c:	80 83       	st	Z, r24
   1d35e:	fd 01       	movw	r30, r26
   1d360:	84 2f       	mov	r24, r20
   1d362:	90 e2       	ldi	r25, 0x20	; 32
   1d364:	81 11       	cpse	r24, r1
   1d366:	08 c0       	rjmp	.+16     	; 0x1d378 <dtoa_prf+0x2e6>
   1d368:	a4 0f       	add	r26, r20
   1d36a:	b1 1d       	adc	r27, r1
   1d36c:	1c 92       	st	X, r1
   1d36e:	90 e0       	ldi	r25, 0x00	; 0
   1d370:	80 e0       	ldi	r24, 0x00	; 0
   1d372:	f3 ce       	rjmp	.-538    	; 0x1d15a <dtoa_prf+0xc8>
   1d374:	81 e3       	ldi	r24, 0x31	; 49
   1d376:	f1 cf       	rjmp	.-30     	; 0x1d35a <dtoa_prf+0x2c8>
   1d378:	91 93       	st	Z+, r25
   1d37a:	81 50       	subi	r24, 0x01	; 1
   1d37c:	f3 cf       	rjmp	.-26     	; 0x1d364 <dtoa_prf+0x2d2>
   1d37e:	91 11       	cpse	r25, r1
   1d380:	83 cf       	rjmp	.-250    	; 0x1d288 <dtoa_prf+0x1f6>
   1d382:	8a cf       	rjmp	.-236    	; 0x1d298 <dtoa_prf+0x206>

0001d384 <malloc>:
malloc():
   1d384:	0f 93       	push	r16
   1d386:	1f 93       	push	r17
   1d388:	cf 93       	push	r28
   1d38a:	df 93       	push	r29
   1d38c:	82 30       	cpi	r24, 0x02	; 2
   1d38e:	91 05       	cpc	r25, r1
   1d390:	10 f4       	brcc	.+4      	; 0x1d396 <malloc+0x12>
   1d392:	82 e0       	ldi	r24, 0x02	; 2
   1d394:	90 e0       	ldi	r25, 0x00	; 0
   1d396:	e0 91 83 14 	lds	r30, 0x1483	; 0x801483 <__flp>
   1d39a:	f0 91 84 14 	lds	r31, 0x1484	; 0x801484 <__flp+0x1>
   1d39e:	30 e0       	ldi	r19, 0x00	; 0
   1d3a0:	20 e0       	ldi	r18, 0x00	; 0
   1d3a2:	b0 e0       	ldi	r27, 0x00	; 0
   1d3a4:	a0 e0       	ldi	r26, 0x00	; 0
   1d3a6:	30 97       	sbiw	r30, 0x00	; 0
   1d3a8:	99 f4       	brne	.+38     	; 0x1d3d0 <malloc+0x4c>
   1d3aa:	21 15       	cp	r18, r1
   1d3ac:	31 05       	cpc	r19, r1
   1d3ae:	09 f4       	brne	.+2      	; 0x1d3b2 <malloc+0x2e>
   1d3b0:	4a c0       	rjmp	.+148    	; 0x1d446 <malloc+0xc2>
   1d3b2:	28 1b       	sub	r18, r24
   1d3b4:	39 0b       	sbc	r19, r25
   1d3b6:	24 30       	cpi	r18, 0x04	; 4
   1d3b8:	31 05       	cpc	r19, r1
   1d3ba:	d8 f5       	brcc	.+118    	; 0x1d432 <malloc+0xae>
   1d3bc:	8a 81       	ldd	r24, Y+2	; 0x02
   1d3be:	9b 81       	ldd	r25, Y+3	; 0x03
   1d3c0:	61 15       	cp	r22, r1
   1d3c2:	71 05       	cpc	r23, r1
   1d3c4:	89 f1       	breq	.+98     	; 0x1d428 <malloc+0xa4>
   1d3c6:	fb 01       	movw	r30, r22
   1d3c8:	93 83       	std	Z+3, r25	; 0x03
   1d3ca:	82 83       	std	Z+2, r24	; 0x02
   1d3cc:	fe 01       	movw	r30, r28
   1d3ce:	11 c0       	rjmp	.+34     	; 0x1d3f2 <malloc+0x6e>
   1d3d0:	40 81       	ld	r20, Z
   1d3d2:	51 81       	ldd	r21, Z+1	; 0x01
   1d3d4:	02 81       	ldd	r16, Z+2	; 0x02
   1d3d6:	13 81       	ldd	r17, Z+3	; 0x03
   1d3d8:	48 17       	cp	r20, r24
   1d3da:	59 07       	cpc	r21, r25
   1d3dc:	e0 f0       	brcs	.+56     	; 0x1d416 <malloc+0x92>
   1d3de:	48 17       	cp	r20, r24
   1d3e0:	59 07       	cpc	r21, r25
   1d3e2:	99 f4       	brne	.+38     	; 0x1d40a <malloc+0x86>
   1d3e4:	10 97       	sbiw	r26, 0x00	; 0
   1d3e6:	61 f0       	breq	.+24     	; 0x1d400 <malloc+0x7c>
   1d3e8:	12 96       	adiw	r26, 0x02	; 2
   1d3ea:	0c 93       	st	X, r16
   1d3ec:	12 97       	sbiw	r26, 0x02	; 2
   1d3ee:	13 96       	adiw	r26, 0x03	; 3
   1d3f0:	1c 93       	st	X, r17
   1d3f2:	32 96       	adiw	r30, 0x02	; 2
   1d3f4:	cf 01       	movw	r24, r30
   1d3f6:	df 91       	pop	r29
   1d3f8:	cf 91       	pop	r28
   1d3fa:	1f 91       	pop	r17
   1d3fc:	0f 91       	pop	r16
   1d3fe:	08 95       	ret
   1d400:	00 93 83 14 	sts	0x1483, r16	; 0x801483 <__flp>
   1d404:	10 93 84 14 	sts	0x1484, r17	; 0x801484 <__flp+0x1>
   1d408:	f4 cf       	rjmp	.-24     	; 0x1d3f2 <malloc+0x6e>
   1d40a:	21 15       	cp	r18, r1
   1d40c:	31 05       	cpc	r19, r1
   1d40e:	51 f0       	breq	.+20     	; 0x1d424 <malloc+0xa0>
   1d410:	42 17       	cp	r20, r18
   1d412:	53 07       	cpc	r21, r19
   1d414:	38 f0       	brcs	.+14     	; 0x1d424 <malloc+0xa0>
   1d416:	a9 01       	movw	r20, r18
   1d418:	db 01       	movw	r26, r22
   1d41a:	9a 01       	movw	r18, r20
   1d41c:	bd 01       	movw	r22, r26
   1d41e:	df 01       	movw	r26, r30
   1d420:	f8 01       	movw	r30, r16
   1d422:	c1 cf       	rjmp	.-126    	; 0x1d3a6 <malloc+0x22>
   1d424:	ef 01       	movw	r28, r30
   1d426:	f9 cf       	rjmp	.-14     	; 0x1d41a <malloc+0x96>
   1d428:	90 93 84 14 	sts	0x1484, r25	; 0x801484 <__flp+0x1>
   1d42c:	80 93 83 14 	sts	0x1483, r24	; 0x801483 <__flp>
   1d430:	cd cf       	rjmp	.-102    	; 0x1d3cc <malloc+0x48>
   1d432:	fe 01       	movw	r30, r28
   1d434:	e2 0f       	add	r30, r18
   1d436:	f3 1f       	adc	r31, r19
   1d438:	81 93       	st	Z+, r24
   1d43a:	91 93       	st	Z+, r25
   1d43c:	22 50       	subi	r18, 0x02	; 2
   1d43e:	31 09       	sbc	r19, r1
   1d440:	39 83       	std	Y+1, r19	; 0x01
   1d442:	28 83       	st	Y, r18
   1d444:	d7 cf       	rjmp	.-82     	; 0x1d3f4 <malloc+0x70>
   1d446:	20 91 81 14 	lds	r18, 0x1481	; 0x801481 <__brkval>
   1d44a:	30 91 82 14 	lds	r19, 0x1482	; 0x801482 <__brkval+0x1>
   1d44e:	23 2b       	or	r18, r19
   1d450:	41 f4       	brne	.+16     	; 0x1d462 <malloc+0xde>
   1d452:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__malloc_heap_start>
   1d456:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__malloc_heap_start+0x1>
   1d45a:	30 93 82 14 	sts	0x1482, r19	; 0x801482 <__brkval+0x1>
   1d45e:	20 93 81 14 	sts	0x1481, r18	; 0x801481 <__brkval>
   1d462:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__malloc_heap_end>
   1d466:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__malloc_heap_end+0x1>
   1d46a:	21 15       	cp	r18, r1
   1d46c:	31 05       	cpc	r19, r1
   1d46e:	41 f4       	brne	.+16     	; 0x1d480 <malloc+0xfc>
   1d470:	2d b7       	in	r18, 0x3d	; 61
   1d472:	3e b7       	in	r19, 0x3e	; 62
   1d474:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <__malloc_margin>
   1d478:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <__malloc_margin+0x1>
   1d47c:	24 1b       	sub	r18, r20
   1d47e:	35 0b       	sbc	r19, r21
   1d480:	e0 91 81 14 	lds	r30, 0x1481	; 0x801481 <__brkval>
   1d484:	f0 91 82 14 	lds	r31, 0x1482	; 0x801482 <__brkval+0x1>
   1d488:	e2 17       	cp	r30, r18
   1d48a:	f3 07       	cpc	r31, r19
   1d48c:	a0 f4       	brcc	.+40     	; 0x1d4b6 <malloc+0x132>
   1d48e:	2e 1b       	sub	r18, r30
   1d490:	3f 0b       	sbc	r19, r31
   1d492:	28 17       	cp	r18, r24
   1d494:	39 07       	cpc	r19, r25
   1d496:	78 f0       	brcs	.+30     	; 0x1d4b6 <malloc+0x132>
   1d498:	ac 01       	movw	r20, r24
   1d49a:	4e 5f       	subi	r20, 0xFE	; 254
   1d49c:	5f 4f       	sbci	r21, 0xFF	; 255
   1d49e:	24 17       	cp	r18, r20
   1d4a0:	35 07       	cpc	r19, r21
   1d4a2:	48 f0       	brcs	.+18     	; 0x1d4b6 <malloc+0x132>
   1d4a4:	4e 0f       	add	r20, r30
   1d4a6:	5f 1f       	adc	r21, r31
   1d4a8:	50 93 82 14 	sts	0x1482, r21	; 0x801482 <__brkval+0x1>
   1d4ac:	40 93 81 14 	sts	0x1481, r20	; 0x801481 <__brkval>
   1d4b0:	81 93       	st	Z+, r24
   1d4b2:	91 93       	st	Z+, r25
   1d4b4:	9f cf       	rjmp	.-194    	; 0x1d3f4 <malloc+0x70>
   1d4b6:	f0 e0       	ldi	r31, 0x00	; 0
   1d4b8:	e0 e0       	ldi	r30, 0x00	; 0
   1d4ba:	9c cf       	rjmp	.-200    	; 0x1d3f4 <malloc+0x70>

0001d4bc <free>:
free():
   1d4bc:	cf 93       	push	r28
   1d4be:	df 93       	push	r29
   1d4c0:	00 97       	sbiw	r24, 0x00	; 0
   1d4c2:	e9 f0       	breq	.+58     	; 0x1d4fe <free+0x42>
   1d4c4:	fc 01       	movw	r30, r24
   1d4c6:	32 97       	sbiw	r30, 0x02	; 2
   1d4c8:	13 82       	std	Z+3, r1	; 0x03
   1d4ca:	12 82       	std	Z+2, r1	; 0x02
   1d4cc:	a0 91 83 14 	lds	r26, 0x1483	; 0x801483 <__flp>
   1d4d0:	b0 91 84 14 	lds	r27, 0x1484	; 0x801484 <__flp+0x1>
   1d4d4:	ed 01       	movw	r28, r26
   1d4d6:	30 e0       	ldi	r19, 0x00	; 0
   1d4d8:	20 e0       	ldi	r18, 0x00	; 0
   1d4da:	10 97       	sbiw	r26, 0x00	; 0
   1d4dc:	a1 f4       	brne	.+40     	; 0x1d506 <free+0x4a>
   1d4de:	20 81       	ld	r18, Z
   1d4e0:	31 81       	ldd	r19, Z+1	; 0x01
   1d4e2:	82 0f       	add	r24, r18
   1d4e4:	93 1f       	adc	r25, r19
   1d4e6:	20 91 81 14 	lds	r18, 0x1481	; 0x801481 <__brkval>
   1d4ea:	30 91 82 14 	lds	r19, 0x1482	; 0x801482 <__brkval+0x1>
   1d4ee:	28 17       	cp	r18, r24
   1d4f0:	39 07       	cpc	r19, r25
   1d4f2:	09 f0       	breq	.+2      	; 0x1d4f6 <free+0x3a>
   1d4f4:	61 c0       	rjmp	.+194    	; 0x1d5b8 <free+0xfc>
   1d4f6:	f0 93 82 14 	sts	0x1482, r31	; 0x801482 <__brkval+0x1>
   1d4fa:	e0 93 81 14 	sts	0x1481, r30	; 0x801481 <__brkval>
   1d4fe:	df 91       	pop	r29
   1d500:	cf 91       	pop	r28
   1d502:	08 95       	ret
   1d504:	ea 01       	movw	r28, r20
   1d506:	ce 17       	cp	r28, r30
   1d508:	df 07       	cpc	r29, r31
   1d50a:	e8 f5       	brcc	.+122    	; 0x1d586 <free+0xca>
   1d50c:	4a 81       	ldd	r20, Y+2	; 0x02
   1d50e:	5b 81       	ldd	r21, Y+3	; 0x03
   1d510:	9e 01       	movw	r18, r28
   1d512:	41 15       	cp	r20, r1
   1d514:	51 05       	cpc	r21, r1
   1d516:	b1 f7       	brne	.-20     	; 0x1d504 <free+0x48>
   1d518:	e9 01       	movw	r28, r18
   1d51a:	fb 83       	std	Y+3, r31	; 0x03
   1d51c:	ea 83       	std	Y+2, r30	; 0x02
   1d51e:	49 91       	ld	r20, Y+
   1d520:	59 91       	ld	r21, Y+
   1d522:	c4 0f       	add	r28, r20
   1d524:	d5 1f       	adc	r29, r21
   1d526:	ec 17       	cp	r30, r28
   1d528:	fd 07       	cpc	r31, r29
   1d52a:	61 f4       	brne	.+24     	; 0x1d544 <free+0x88>
   1d52c:	80 81       	ld	r24, Z
   1d52e:	91 81       	ldd	r25, Z+1	; 0x01
   1d530:	02 96       	adiw	r24, 0x02	; 2
   1d532:	84 0f       	add	r24, r20
   1d534:	95 1f       	adc	r25, r21
   1d536:	e9 01       	movw	r28, r18
   1d538:	99 83       	std	Y+1, r25	; 0x01
   1d53a:	88 83       	st	Y, r24
   1d53c:	82 81       	ldd	r24, Z+2	; 0x02
   1d53e:	93 81       	ldd	r25, Z+3	; 0x03
   1d540:	9b 83       	std	Y+3, r25	; 0x03
   1d542:	8a 83       	std	Y+2, r24	; 0x02
   1d544:	f0 e0       	ldi	r31, 0x00	; 0
   1d546:	e0 e0       	ldi	r30, 0x00	; 0
   1d548:	12 96       	adiw	r26, 0x02	; 2
   1d54a:	8d 91       	ld	r24, X+
   1d54c:	9c 91       	ld	r25, X
   1d54e:	13 97       	sbiw	r26, 0x03	; 3
   1d550:	00 97       	sbiw	r24, 0x00	; 0
   1d552:	b9 f5       	brne	.+110    	; 0x1d5c2 <free+0x106>
   1d554:	2d 91       	ld	r18, X+
   1d556:	3c 91       	ld	r19, X
   1d558:	11 97       	sbiw	r26, 0x01	; 1
   1d55a:	cd 01       	movw	r24, r26
   1d55c:	02 96       	adiw	r24, 0x02	; 2
   1d55e:	82 0f       	add	r24, r18
   1d560:	93 1f       	adc	r25, r19
   1d562:	20 91 81 14 	lds	r18, 0x1481	; 0x801481 <__brkval>
   1d566:	30 91 82 14 	lds	r19, 0x1482	; 0x801482 <__brkval+0x1>
   1d56a:	28 17       	cp	r18, r24
   1d56c:	39 07       	cpc	r19, r25
   1d56e:	39 f6       	brne	.-114    	; 0x1d4fe <free+0x42>
   1d570:	30 97       	sbiw	r30, 0x00	; 0
   1d572:	51 f5       	brne	.+84     	; 0x1d5c8 <free+0x10c>
   1d574:	10 92 84 14 	sts	0x1484, r1	; 0x801484 <__flp+0x1>
   1d578:	10 92 83 14 	sts	0x1483, r1	; 0x801483 <__flp>
   1d57c:	b0 93 82 14 	sts	0x1482, r27	; 0x801482 <__brkval+0x1>
   1d580:	a0 93 81 14 	sts	0x1481, r26	; 0x801481 <__brkval>
   1d584:	bc cf       	rjmp	.-136    	; 0x1d4fe <free+0x42>
   1d586:	d3 83       	std	Z+3, r29	; 0x03
   1d588:	c2 83       	std	Z+2, r28	; 0x02
   1d58a:	40 81       	ld	r20, Z
   1d58c:	51 81       	ldd	r21, Z+1	; 0x01
   1d58e:	84 0f       	add	r24, r20
   1d590:	95 1f       	adc	r25, r21
   1d592:	c8 17       	cp	r28, r24
   1d594:	d9 07       	cpc	r29, r25
   1d596:	61 f4       	brne	.+24     	; 0x1d5b0 <free+0xf4>
   1d598:	4e 5f       	subi	r20, 0xFE	; 254
   1d59a:	5f 4f       	sbci	r21, 0xFF	; 255
   1d59c:	88 81       	ld	r24, Y
   1d59e:	99 81       	ldd	r25, Y+1	; 0x01
   1d5a0:	48 0f       	add	r20, r24
   1d5a2:	59 1f       	adc	r21, r25
   1d5a4:	51 83       	std	Z+1, r21	; 0x01
   1d5a6:	40 83       	st	Z, r20
   1d5a8:	8a 81       	ldd	r24, Y+2	; 0x02
   1d5aa:	9b 81       	ldd	r25, Y+3	; 0x03
   1d5ac:	93 83       	std	Z+3, r25	; 0x03
   1d5ae:	82 83       	std	Z+2, r24	; 0x02
   1d5b0:	21 15       	cp	r18, r1
   1d5b2:	31 05       	cpc	r19, r1
   1d5b4:	09 f0       	breq	.+2      	; 0x1d5b8 <free+0xfc>
   1d5b6:	b0 cf       	rjmp	.-160    	; 0x1d518 <free+0x5c>
   1d5b8:	f0 93 84 14 	sts	0x1484, r31	; 0x801484 <__flp+0x1>
   1d5bc:	e0 93 83 14 	sts	0x1483, r30	; 0x801483 <__flp>
   1d5c0:	9e cf       	rjmp	.-196    	; 0x1d4fe <free+0x42>
   1d5c2:	fd 01       	movw	r30, r26
   1d5c4:	dc 01       	movw	r26, r24
   1d5c6:	c0 cf       	rjmp	.-128    	; 0x1d548 <free+0x8c>
   1d5c8:	13 82       	std	Z+3, r1	; 0x03
   1d5ca:	12 82       	std	Z+2, r1	; 0x02
   1d5cc:	d7 cf       	rjmp	.-82     	; 0x1d57c <free+0xc0>

0001d5ce <strtod>:
strtod():
   1d5ce:	8f 92       	push	r8
   1d5d0:	9f 92       	push	r9
   1d5d2:	af 92       	push	r10
   1d5d4:	bf 92       	push	r11
   1d5d6:	cf 92       	push	r12
   1d5d8:	df 92       	push	r13
   1d5da:	ef 92       	push	r14
   1d5dc:	ff 92       	push	r15
   1d5de:	0f 93       	push	r16
   1d5e0:	1f 93       	push	r17
   1d5e2:	cf 93       	push	r28
   1d5e4:	df 93       	push	r29
   1d5e6:	5c 01       	movw	r10, r24
   1d5e8:	7b 01       	movw	r14, r22
   1d5ea:	61 15       	cp	r22, r1
   1d5ec:	71 05       	cpc	r23, r1
   1d5ee:	19 f0       	breq	.+6      	; 0x1d5f6 <strtod+0x28>
   1d5f0:	db 01       	movw	r26, r22
   1d5f2:	8d 93       	st	X+, r24
   1d5f4:	9c 93       	st	X, r25
   1d5f6:	85 01       	movw	r16, r10
   1d5f8:	0f 5f       	subi	r16, 0xFF	; 255
   1d5fa:	1f 4f       	sbci	r17, 0xFF	; 255
   1d5fc:	f5 01       	movw	r30, r10
   1d5fe:	d0 81       	ld	r29, Z
   1d600:	8d 2f       	mov	r24, r29
   1d602:	90 e0       	ldi	r25, 0x00	; 0
   1d604:	0e 94 3b e5 	call	0x1ca76	; 0x1ca76 <isspace>
   1d608:	6c 01       	movw	r12, r24
   1d60a:	89 2b       	or	r24, r25
   1d60c:	b9 f5       	brne	.+110    	; 0x1d67c <strtod+0xae>
   1d60e:	dd 32       	cpi	r29, 0x2D	; 45
   1d610:	b9 f5       	brne	.+110    	; 0x1d680 <strtod+0xb2>
   1d612:	0f 5f       	subi	r16, 0xFF	; 255
   1d614:	1f 4f       	sbci	r17, 0xFF	; 255
   1d616:	d5 01       	movw	r26, r10
   1d618:	11 96       	adiw	r26, 0x01	; 1
   1d61a:	dc 91       	ld	r29, X
   1d61c:	c1 e0       	ldi	r28, 0x01	; 1
   1d61e:	58 01       	movw	r10, r16
   1d620:	f1 e0       	ldi	r31, 0x01	; 1
   1d622:	af 1a       	sub	r10, r31
   1d624:	b1 08       	sbc	r11, r1
   1d626:	43 e0       	ldi	r20, 0x03	; 3
   1d628:	50 e0       	ldi	r21, 0x00	; 0
   1d62a:	68 e5       	ldi	r22, 0x58	; 88
   1d62c:	74 e0       	ldi	r23, 0x04	; 4
   1d62e:	c5 01       	movw	r24, r10
   1d630:	0e 94 20 ed 	call	0x1da40	; 0x1da40 <strncasecmp_P>
   1d634:	89 2b       	or	r24, r25
   1d636:	69 f5       	brne	.+90     	; 0x1d692 <strtod+0xc4>
   1d638:	68 01       	movw	r12, r16
   1d63a:	82 e0       	ldi	r24, 0x02	; 2
   1d63c:	c8 0e       	add	r12, r24
   1d63e:	d1 1c       	adc	r13, r1
   1d640:	45 e0       	ldi	r20, 0x05	; 5
   1d642:	50 e0       	ldi	r21, 0x00	; 0
   1d644:	63 e5       	ldi	r22, 0x53	; 83
   1d646:	74 e0       	ldi	r23, 0x04	; 4
   1d648:	c6 01       	movw	r24, r12
   1d64a:	0e 94 20 ed 	call	0x1da40	; 0x1da40 <strncasecmp_P>
   1d64e:	89 2b       	or	r24, r25
   1d650:	21 f4       	brne	.+8      	; 0x1d65a <strtod+0x8c>
   1d652:	68 01       	movw	r12, r16
   1d654:	97 e0       	ldi	r25, 0x07	; 7
   1d656:	c9 0e       	add	r12, r25
   1d658:	d1 1c       	adc	r13, r1
   1d65a:	e1 14       	cp	r14, r1
   1d65c:	f1 04       	cpc	r15, r1
   1d65e:	19 f0       	breq	.+6      	; 0x1d666 <strtod+0x98>
   1d660:	d7 01       	movw	r26, r14
   1d662:	cd 92       	st	X+, r12
   1d664:	dc 92       	st	X, r13
   1d666:	60 e0       	ldi	r22, 0x00	; 0
   1d668:	70 e0       	ldi	r23, 0x00	; 0
   1d66a:	80 e8       	ldi	r24, 0x80	; 128
   1d66c:	9f ef       	ldi	r25, 0xFF	; 255
   1d66e:	c1 11       	cpse	r28, r1
   1d670:	ff c0       	rjmp	.+510    	; 0x1d870 <strtod+0x2a2>
   1d672:	60 e0       	ldi	r22, 0x00	; 0
   1d674:	70 e0       	ldi	r23, 0x00	; 0
   1d676:	80 e8       	ldi	r24, 0x80	; 128
   1d678:	9f e7       	ldi	r25, 0x7F	; 127
   1d67a:	fa c0       	rjmp	.+500    	; 0x1d870 <strtod+0x2a2>
   1d67c:	58 01       	movw	r10, r16
   1d67e:	bb cf       	rjmp	.-138    	; 0x1d5f6 <strtod+0x28>
   1d680:	db 32       	cpi	r29, 0x2B	; 43
   1d682:	29 f4       	brne	.+10     	; 0x1d68e <strtod+0xc0>
   1d684:	85 01       	movw	r16, r10
   1d686:	0e 5f       	subi	r16, 0xFE	; 254
   1d688:	1f 4f       	sbci	r17, 0xFF	; 255
   1d68a:	f5 01       	movw	r30, r10
   1d68c:	d1 81       	ldd	r29, Z+1	; 0x01
   1d68e:	c0 e0       	ldi	r28, 0x00	; 0
   1d690:	c6 cf       	rjmp	.-116    	; 0x1d61e <strtod+0x50>
   1d692:	43 e0       	ldi	r20, 0x03	; 3
   1d694:	50 e0       	ldi	r21, 0x00	; 0
   1d696:	60 e5       	ldi	r22, 0x50	; 80
   1d698:	74 e0       	ldi	r23, 0x04	; 4
   1d69a:	c5 01       	movw	r24, r10
   1d69c:	0e 94 20 ed 	call	0x1da40	; 0x1da40 <strncasecmp_P>
   1d6a0:	89 2b       	or	r24, r25
   1d6a2:	e9 f0       	breq	.+58     	; 0x1d6de <strtod+0x110>
   1d6a4:	f8 01       	movw	r30, r16
   1d6a6:	10 e0       	ldi	r17, 0x00	; 0
   1d6a8:	00 e0       	ldi	r16, 0x00	; 0
   1d6aa:	20 e0       	ldi	r18, 0x00	; 0
   1d6ac:	30 e0       	ldi	r19, 0x00	; 0
   1d6ae:	a9 01       	movw	r20, r18
   1d6b0:	5f 01       	movw	r10, r30
   1d6b2:	b0 ed       	ldi	r27, 0xD0	; 208
   1d6b4:	8b 2e       	mov	r8, r27
   1d6b6:	8d 0e       	add	r8, r29
   1d6b8:	89 e0       	ldi	r24, 0x09	; 9
   1d6ba:	88 15       	cp	r24, r8
   1d6bc:	c8 f1       	brcs	.+114    	; 0x1d730 <strtod+0x162>
   1d6be:	9c 2e       	mov	r9, r28
   1d6c0:	68 94       	set
   1d6c2:	91 f8       	bld	r9, 1
   1d6c4:	8c 2f       	mov	r24, r28
   1d6c6:	88 70       	andi	r24, 0x08	; 8
   1d6c8:	c2 ff       	sbrs	r28, 2
   1d6ca:	16 c0       	rjmp	.+44     	; 0x1d6f8 <strtod+0x12a>
   1d6cc:	81 11       	cpse	r24, r1
   1d6ce:	02 c0       	rjmp	.+4      	; 0x1d6d4 <strtod+0x106>
   1d6d0:	0f 5f       	subi	r16, 0xFF	; 255
   1d6d2:	1f 4f       	sbci	r17, 0xFF	; 255
   1d6d4:	31 96       	adiw	r30, 0x01	; 1
   1d6d6:	d5 01       	movw	r26, r10
   1d6d8:	dc 91       	ld	r29, X
   1d6da:	c9 2d       	mov	r28, r9
   1d6dc:	e9 cf       	rjmp	.-46     	; 0x1d6b0 <strtod+0xe2>
   1d6de:	e1 14       	cp	r14, r1
   1d6e0:	f1 04       	cpc	r15, r1
   1d6e2:	29 f0       	breq	.+10     	; 0x1d6ee <strtod+0x120>
   1d6e4:	0e 5f       	subi	r16, 0xFE	; 254
   1d6e6:	1f 4f       	sbci	r17, 0xFF	; 255
   1d6e8:	f7 01       	movw	r30, r14
   1d6ea:	11 83       	std	Z+1, r17	; 0x01
   1d6ec:	00 83       	st	Z, r16
   1d6ee:	60 e0       	ldi	r22, 0x00	; 0
   1d6f0:	70 e0       	ldi	r23, 0x00	; 0
   1d6f2:	80 ec       	ldi	r24, 0xC0	; 192
   1d6f4:	9f e7       	ldi	r25, 0x7F	; 127
   1d6f6:	bc c0       	rjmp	.+376    	; 0x1d870 <strtod+0x2a2>
   1d6f8:	88 23       	and	r24, r24
   1d6fa:	11 f0       	breq	.+4      	; 0x1d700 <strtod+0x132>
   1d6fc:	01 50       	subi	r16, 0x01	; 1
   1d6fe:	11 09       	sbc	r17, r1
   1d700:	a5 e0       	ldi	r26, 0x05	; 5
   1d702:	b0 e0       	ldi	r27, 0x00	; 0
   1d704:	0e 94 a6 ef 	call	0x1df4c	; 0x1df4c <__muluhisi3>
   1d708:	9b 01       	movw	r18, r22
   1d70a:	ac 01       	movw	r20, r24
   1d70c:	22 0f       	add	r18, r18
   1d70e:	33 1f       	adc	r19, r19
   1d710:	44 1f       	adc	r20, r20
   1d712:	55 1f       	adc	r21, r21
   1d714:	28 0d       	add	r18, r8
   1d716:	31 1d       	adc	r19, r1
   1d718:	41 1d       	adc	r20, r1
   1d71a:	51 1d       	adc	r21, r1
   1d71c:	28 39       	cpi	r18, 0x98	; 152
   1d71e:	99 e9       	ldi	r25, 0x99	; 153
   1d720:	39 07       	cpc	r19, r25
   1d722:	49 07       	cpc	r20, r25
   1d724:	99 e1       	ldi	r25, 0x19	; 25
   1d726:	59 07       	cpc	r21, r25
   1d728:	a8 f2       	brcs	.-86     	; 0x1d6d4 <strtod+0x106>
   1d72a:	c6 60       	ori	r28, 0x06	; 6
   1d72c:	9c 2e       	mov	r9, r28
   1d72e:	d2 cf       	rjmp	.-92     	; 0x1d6d4 <strtod+0x106>
   1d730:	ae ef       	ldi	r26, 0xFE	; 254
   1d732:	8a 12       	cpse	r8, r26
   1d734:	06 c0       	rjmp	.+12     	; 0x1d742 <strtod+0x174>
   1d736:	c3 fd       	sbrc	r28, 3
   1d738:	3c c0       	rjmp	.+120    	; 0x1d7b2 <strtod+0x1e4>
   1d73a:	9c 2e       	mov	r9, r28
   1d73c:	68 94       	set
   1d73e:	93 f8       	bld	r9, 3
   1d740:	c9 cf       	rjmp	.-110    	; 0x1d6d4 <strtod+0x106>
   1d742:	df 7d       	andi	r29, 0xDF	; 223
   1d744:	d5 34       	cpi	r29, 0x45	; 69
   1d746:	a9 f5       	brne	.+106    	; 0x1d7b2 <strtod+0x1e4>
   1d748:	80 81       	ld	r24, Z
   1d74a:	8d 32       	cpi	r24, 0x2D	; 45
   1d74c:	39 f4       	brne	.+14     	; 0x1d75c <strtod+0x18e>
   1d74e:	c0 61       	ori	r28, 0x10	; 16
   1d750:	df 01       	movw	r26, r30
   1d752:	12 96       	adiw	r26, 0x02	; 2
   1d754:	81 81       	ldd	r24, Z+1	; 0x01
   1d756:	62 e0       	ldi	r22, 0x02	; 2
   1d758:	70 e0       	ldi	r23, 0x00	; 0
   1d75a:	06 c0       	rjmp	.+12     	; 0x1d768 <strtod+0x19a>
   1d75c:	df 01       	movw	r26, r30
   1d75e:	8b 32       	cpi	r24, 0x2B	; 43
   1d760:	c1 f3       	breq	.-16     	; 0x1d752 <strtod+0x184>
   1d762:	11 96       	adiw	r26, 0x01	; 1
   1d764:	61 e0       	ldi	r22, 0x01	; 1
   1d766:	70 e0       	ldi	r23, 0x00	; 0
   1d768:	80 53       	subi	r24, 0x30	; 48
   1d76a:	5d 01       	movw	r10, r26
   1d76c:	a6 1a       	sub	r10, r22
   1d76e:	b7 0a       	sbc	r11, r23
   1d770:	8a 30       	cpi	r24, 0x0A	; 10
   1d772:	f8 f4       	brcc	.+62     	; 0x1d7b2 <strtod+0x1e4>
   1d774:	e0 e8       	ldi	r30, 0x80	; 128
   1d776:	ce 16       	cp	r12, r30
   1d778:	ec e0       	ldi	r30, 0x0C	; 12
   1d77a:	de 06       	cpc	r13, r30
   1d77c:	5c f4       	brge	.+22     	; 0x1d794 <strtod+0x1c6>
   1d77e:	b6 01       	movw	r22, r12
   1d780:	66 0f       	add	r22, r22
   1d782:	77 1f       	adc	r23, r23
   1d784:	66 0f       	add	r22, r22
   1d786:	77 1f       	adc	r23, r23
   1d788:	c6 0e       	add	r12, r22
   1d78a:	d7 1e       	adc	r13, r23
   1d78c:	cc 0c       	add	r12, r12
   1d78e:	dd 1c       	adc	r13, r13
   1d790:	c8 0e       	add	r12, r24
   1d792:	d1 1c       	adc	r13, r1
   1d794:	5d 01       	movw	r10, r26
   1d796:	ff ef       	ldi	r31, 0xFF	; 255
   1d798:	af 1a       	sub	r10, r31
   1d79a:	bf 0a       	sbc	r11, r31
   1d79c:	8c 91       	ld	r24, X
   1d79e:	80 53       	subi	r24, 0x30	; 48
   1d7a0:	8a 30       	cpi	r24, 0x0A	; 10
   1d7a2:	a8 f1       	brcs	.+106    	; 0x1d80e <strtod+0x240>
   1d7a4:	c4 ff       	sbrs	r28, 4
   1d7a6:	03 c0       	rjmp	.+6      	; 0x1d7ae <strtod+0x1e0>
   1d7a8:	d1 94       	neg	r13
   1d7aa:	c1 94       	neg	r12
   1d7ac:	d1 08       	sbc	r13, r1
   1d7ae:	0c 0d       	add	r16, r12
   1d7b0:	1d 1d       	adc	r17, r13
   1d7b2:	c1 ff       	sbrs	r28, 1
   1d7b4:	09 c0       	rjmp	.+18     	; 0x1d7c8 <strtod+0x1fa>
   1d7b6:	e1 14       	cp	r14, r1
   1d7b8:	f1 04       	cpc	r15, r1
   1d7ba:	31 f0       	breq	.+12     	; 0x1d7c8 <strtod+0x1fa>
   1d7bc:	81 e0       	ldi	r24, 0x01	; 1
   1d7be:	a8 1a       	sub	r10, r24
   1d7c0:	b1 08       	sbc	r11, r1
   1d7c2:	d7 01       	movw	r26, r14
   1d7c4:	ad 92       	st	X+, r10
   1d7c6:	bc 92       	st	X, r11
   1d7c8:	ca 01       	movw	r24, r20
   1d7ca:	b9 01       	movw	r22, r18
   1d7cc:	0e 94 f8 ed 	call	0x1dbf0	; 0x1dbf0 <__floatunsisf>
   1d7d0:	c3 70       	andi	r28, 0x03	; 3
   1d7d2:	c3 30       	cpi	r28, 0x03	; 3
   1d7d4:	09 f4       	brne	.+2      	; 0x1d7d8 <strtod+0x20a>
   1d7d6:	90 58       	subi	r25, 0x80	; 128
   1d7d8:	4b 01       	movw	r8, r22
   1d7da:	5c 01       	movw	r10, r24
   1d7dc:	20 e0       	ldi	r18, 0x00	; 0
   1d7de:	30 e0       	ldi	r19, 0x00	; 0
   1d7e0:	a9 01       	movw	r20, r18
   1d7e2:	0e 94 f3 ed 	call	0x1dbe6	; 0x1dbe6 <__cmpsf2>
   1d7e6:	88 23       	and	r24, r24
   1d7e8:	09 f4       	brne	.+2      	; 0x1d7ec <strtod+0x21e>
   1d7ea:	40 c0       	rjmp	.+128    	; 0x1d86c <strtod+0x29e>
   1d7ec:	c7 e8       	ldi	r28, 0x87	; 135
   1d7ee:	d4 e0       	ldi	r29, 0x04	; 4
   1d7f0:	17 ff       	sbrs	r17, 7
   1d7f2:	05 c0       	rjmp	.+10     	; 0x1d7fe <strtod+0x230>
   1d7f4:	11 95       	neg	r17
   1d7f6:	01 95       	neg	r16
   1d7f8:	11 09       	sbc	r17, r1
   1d7fa:	cf e6       	ldi	r28, 0x6F	; 111
   1d7fc:	d4 e0       	ldi	r29, 0x04	; 4
   1d7fe:	6e 01       	movw	r12, r28
   1d800:	b8 e1       	ldi	r27, 0x18	; 24
   1d802:	cb 1a       	sub	r12, r27
   1d804:	d1 08       	sbc	r13, r1
   1d806:	80 e2       	ldi	r24, 0x20	; 32
   1d808:	e8 2e       	mov	r14, r24
   1d80a:	f1 2c       	mov	r15, r1
   1d80c:	0f c0       	rjmp	.+30     	; 0x1d82c <strtod+0x25e>
   1d80e:	d5 01       	movw	r26, r10
   1d810:	b1 cf       	rjmp	.-158    	; 0x1d774 <strtod+0x1a6>
   1d812:	fe 01       	movw	r30, r28
   1d814:	25 91       	lpm	r18, Z+
   1d816:	35 91       	lpm	r19, Z+
   1d818:	45 91       	lpm	r20, Z+
   1d81a:	54 91       	lpm	r21, Z
   1d81c:	0e 19       	sub	r16, r14
   1d81e:	1f 09       	sbc	r17, r15
   1d820:	c5 01       	movw	r24, r10
   1d822:	b4 01       	movw	r22, r8
   1d824:	0e 94 59 ee 	call	0x1dcb2	; 0x1dcb2 <__mulsf3>
   1d828:	4b 01       	movw	r8, r22
   1d82a:	5c 01       	movw	r10, r24
   1d82c:	d5 01       	movw	r26, r10
   1d82e:	c4 01       	movw	r24, r8
   1d830:	0e 15       	cp	r16, r14
   1d832:	1f 05       	cpc	r17, r15
   1d834:	74 f7       	brge	.-36     	; 0x1d812 <strtod+0x244>
   1d836:	24 97       	sbiw	r28, 0x04	; 4
   1d838:	f5 94       	asr	r15
   1d83a:	e7 94       	ror	r14
   1d83c:	cc 16       	cp	r12, r28
   1d83e:	dd 06       	cpc	r13, r29
   1d840:	a9 f7       	brne	.-22     	; 0x1d82c <strtod+0x25e>
   1d842:	8a 2f       	mov	r24, r26
   1d844:	88 0f       	add	r24, r24
   1d846:	8b 2f       	mov	r24, r27
   1d848:	88 1f       	adc	r24, r24
   1d84a:	8f 3f       	cpi	r24, 0xFF	; 255
   1d84c:	49 f0       	breq	.+18     	; 0x1d860 <strtod+0x292>
   1d84e:	20 e0       	ldi	r18, 0x00	; 0
   1d850:	30 e0       	ldi	r19, 0x00	; 0
   1d852:	a9 01       	movw	r20, r18
   1d854:	c5 01       	movw	r24, r10
   1d856:	b4 01       	movw	r22, r8
   1d858:	0e 94 f3 ed 	call	0x1dbe6	; 0x1dbe6 <__cmpsf2>
   1d85c:	81 11       	cpse	r24, r1
   1d85e:	06 c0       	rjmp	.+12     	; 0x1d86c <strtod+0x29e>
   1d860:	82 e2       	ldi	r24, 0x22	; 34
   1d862:	90 e0       	ldi	r25, 0x00	; 0
   1d864:	90 93 80 14 	sts	0x1480, r25	; 0x801480 <errno+0x1>
   1d868:	80 93 7f 14 	sts	0x147F, r24	; 0x80147f <errno>
   1d86c:	c5 01       	movw	r24, r10
   1d86e:	b4 01       	movw	r22, r8
   1d870:	df 91       	pop	r29
   1d872:	cf 91       	pop	r28
   1d874:	1f 91       	pop	r17
   1d876:	0f 91       	pop	r16
   1d878:	ff 90       	pop	r15
   1d87a:	ef 90       	pop	r14
   1d87c:	df 90       	pop	r13
   1d87e:	cf 90       	pop	r12
   1d880:	bf 90       	pop	r11
   1d882:	af 90       	pop	r10
   1d884:	9f 90       	pop	r9
   1d886:	8f 90       	pop	r8
   1d888:	08 95       	ret

0001d88a <__ftoa_engine>:
__ftoa_engine():
   1d88a:	28 30       	cpi	r18, 0x08	; 8
   1d88c:	08 f0       	brcs	.+2      	; 0x1d890 <__ftoa_engine+0x6>
   1d88e:	27 e0       	ldi	r18, 0x07	; 7
   1d890:	33 27       	eor	r19, r19
   1d892:	da 01       	movw	r26, r20
   1d894:	99 0f       	add	r25, r25
   1d896:	31 1d       	adc	r19, r1
   1d898:	87 fd       	sbrc	r24, 7
   1d89a:	91 60       	ori	r25, 0x01	; 1
   1d89c:	00 96       	adiw	r24, 0x00	; 0
   1d89e:	61 05       	cpc	r22, r1
   1d8a0:	71 05       	cpc	r23, r1
   1d8a2:	39 f4       	brne	.+14     	; 0x1d8b2 <__ftoa_engine+0x28>
   1d8a4:	32 60       	ori	r19, 0x02	; 2
   1d8a6:	2e 5f       	subi	r18, 0xFE	; 254
   1d8a8:	3d 93       	st	X+, r19
   1d8aa:	30 e3       	ldi	r19, 0x30	; 48
   1d8ac:	2a 95       	dec	r18
   1d8ae:	e1 f7       	brne	.-8      	; 0x1d8a8 <__ftoa_engine+0x1e>
   1d8b0:	08 95       	ret
   1d8b2:	9f 3f       	cpi	r25, 0xFF	; 255
   1d8b4:	30 f0       	brcs	.+12     	; 0x1d8c2 <__ftoa_engine+0x38>
   1d8b6:	80 38       	cpi	r24, 0x80	; 128
   1d8b8:	71 05       	cpc	r23, r1
   1d8ba:	61 05       	cpc	r22, r1
   1d8bc:	09 f0       	breq	.+2      	; 0x1d8c0 <__ftoa_engine+0x36>
   1d8be:	3c 5f       	subi	r19, 0xFC	; 252
   1d8c0:	3c 5f       	subi	r19, 0xFC	; 252
   1d8c2:	3d 93       	st	X+, r19
   1d8c4:	91 30       	cpi	r25, 0x01	; 1
   1d8c6:	08 f0       	brcs	.+2      	; 0x1d8ca <__ftoa_engine+0x40>
   1d8c8:	80 68       	ori	r24, 0x80	; 128
   1d8ca:	91 1d       	adc	r25, r1
   1d8cc:	df 93       	push	r29
   1d8ce:	cf 93       	push	r28
   1d8d0:	1f 93       	push	r17
   1d8d2:	0f 93       	push	r16
   1d8d4:	ff 92       	push	r15
   1d8d6:	ef 92       	push	r14
   1d8d8:	19 2f       	mov	r17, r25
   1d8da:	98 7f       	andi	r25, 0xF8	; 248
   1d8dc:	96 95       	lsr	r25
   1d8de:	e9 2f       	mov	r30, r25
   1d8e0:	96 95       	lsr	r25
   1d8e2:	96 95       	lsr	r25
   1d8e4:	e9 0f       	add	r30, r25
   1d8e6:	ff 27       	eor	r31, r31
   1d8e8:	eb 51       	subi	r30, 0x1B	; 27
   1d8ea:	fb 4f       	sbci	r31, 0xFB	; 251
   1d8ec:	99 27       	eor	r25, r25
   1d8ee:	33 27       	eor	r19, r19
   1d8f0:	ee 24       	eor	r14, r14
   1d8f2:	ff 24       	eor	r15, r15
   1d8f4:	a7 01       	movw	r20, r14
   1d8f6:	e7 01       	movw	r28, r14
   1d8f8:	05 90       	lpm	r0, Z+
   1d8fa:	08 94       	sec
   1d8fc:	07 94       	ror	r0
   1d8fe:	28 f4       	brcc	.+10     	; 0x1d90a <__ftoa_engine+0x80>
   1d900:	36 0f       	add	r19, r22
   1d902:	e7 1e       	adc	r14, r23
   1d904:	f8 1e       	adc	r15, r24
   1d906:	49 1f       	adc	r20, r25
   1d908:	51 1d       	adc	r21, r1
   1d90a:	66 0f       	add	r22, r22
   1d90c:	77 1f       	adc	r23, r23
   1d90e:	88 1f       	adc	r24, r24
   1d910:	99 1f       	adc	r25, r25
   1d912:	06 94       	lsr	r0
   1d914:	a1 f7       	brne	.-24     	; 0x1d8fe <__ftoa_engine+0x74>
   1d916:	05 90       	lpm	r0, Z+
   1d918:	07 94       	ror	r0
   1d91a:	28 f4       	brcc	.+10     	; 0x1d926 <__ftoa_engine+0x9c>
   1d91c:	e7 0e       	add	r14, r23
   1d91e:	f8 1e       	adc	r15, r24
   1d920:	49 1f       	adc	r20, r25
   1d922:	56 1f       	adc	r21, r22
   1d924:	c1 1d       	adc	r28, r1
   1d926:	77 0f       	add	r23, r23
   1d928:	88 1f       	adc	r24, r24
   1d92a:	99 1f       	adc	r25, r25
   1d92c:	66 1f       	adc	r22, r22
   1d92e:	06 94       	lsr	r0
   1d930:	a1 f7       	brne	.-24     	; 0x1d91a <__ftoa_engine+0x90>
   1d932:	05 90       	lpm	r0, Z+
   1d934:	07 94       	ror	r0
   1d936:	28 f4       	brcc	.+10     	; 0x1d942 <__ftoa_engine+0xb8>
   1d938:	f8 0e       	add	r15, r24
   1d93a:	49 1f       	adc	r20, r25
   1d93c:	56 1f       	adc	r21, r22
   1d93e:	c7 1f       	adc	r28, r23
   1d940:	d1 1d       	adc	r29, r1
   1d942:	88 0f       	add	r24, r24
   1d944:	99 1f       	adc	r25, r25
   1d946:	66 1f       	adc	r22, r22
   1d948:	77 1f       	adc	r23, r23
   1d94a:	06 94       	lsr	r0
   1d94c:	a1 f7       	brne	.-24     	; 0x1d936 <__ftoa_engine+0xac>
   1d94e:	05 90       	lpm	r0, Z+
   1d950:	07 94       	ror	r0
   1d952:	20 f4       	brcc	.+8      	; 0x1d95c <__ftoa_engine+0xd2>
   1d954:	49 0f       	add	r20, r25
   1d956:	56 1f       	adc	r21, r22
   1d958:	c7 1f       	adc	r28, r23
   1d95a:	d8 1f       	adc	r29, r24
   1d95c:	99 0f       	add	r25, r25
   1d95e:	66 1f       	adc	r22, r22
   1d960:	77 1f       	adc	r23, r23
   1d962:	88 1f       	adc	r24, r24
   1d964:	06 94       	lsr	r0
   1d966:	a9 f7       	brne	.-22     	; 0x1d952 <__ftoa_engine+0xc8>
   1d968:	84 91       	lpm	r24, Z
   1d96a:	10 95       	com	r17
   1d96c:	17 70       	andi	r17, 0x07	; 7
   1d96e:	41 f0       	breq	.+16     	; 0x1d980 <__ftoa_engine+0xf6>
   1d970:	d6 95       	lsr	r29
   1d972:	c7 95       	ror	r28
   1d974:	57 95       	ror	r21
   1d976:	47 95       	ror	r20
   1d978:	f7 94       	ror	r15
   1d97a:	e7 94       	ror	r14
   1d97c:	1a 95       	dec	r17
   1d97e:	c1 f7       	brne	.-16     	; 0x1d970 <__ftoa_engine+0xe6>
   1d980:	eb e8       	ldi	r30, 0x8B	; 139
   1d982:	f4 e0       	ldi	r31, 0x04	; 4
   1d984:	68 94       	set
   1d986:	15 90       	lpm	r1, Z+
   1d988:	15 91       	lpm	r17, Z+
   1d98a:	35 91       	lpm	r19, Z+
   1d98c:	65 91       	lpm	r22, Z+
   1d98e:	95 91       	lpm	r25, Z+
   1d990:	05 90       	lpm	r0, Z+
   1d992:	7f e2       	ldi	r23, 0x2F	; 47
   1d994:	73 95       	inc	r23
   1d996:	e1 18       	sub	r14, r1
   1d998:	f1 0a       	sbc	r15, r17
   1d99a:	43 0b       	sbc	r20, r19
   1d99c:	56 0b       	sbc	r21, r22
   1d99e:	c9 0b       	sbc	r28, r25
   1d9a0:	d0 09       	sbc	r29, r0
   1d9a2:	c0 f7       	brcc	.-16     	; 0x1d994 <__ftoa_engine+0x10a>
   1d9a4:	e1 0c       	add	r14, r1
   1d9a6:	f1 1e       	adc	r15, r17
   1d9a8:	43 1f       	adc	r20, r19
   1d9aa:	56 1f       	adc	r21, r22
   1d9ac:	c9 1f       	adc	r28, r25
   1d9ae:	d0 1d       	adc	r29, r0
   1d9b0:	7e f4       	brtc	.+30     	; 0x1d9d0 <__ftoa_engine+0x146>
   1d9b2:	70 33       	cpi	r23, 0x30	; 48
   1d9b4:	11 f4       	brne	.+4      	; 0x1d9ba <__ftoa_engine+0x130>
   1d9b6:	8a 95       	dec	r24
   1d9b8:	e6 cf       	rjmp	.-52     	; 0x1d986 <__ftoa_engine+0xfc>
   1d9ba:	e8 94       	clt
   1d9bc:	01 50       	subi	r16, 0x01	; 1
   1d9be:	30 f0       	brcs	.+12     	; 0x1d9cc <__ftoa_engine+0x142>
   1d9c0:	08 0f       	add	r16, r24
   1d9c2:	0a f4       	brpl	.+2      	; 0x1d9c6 <__ftoa_engine+0x13c>
   1d9c4:	00 27       	eor	r16, r16
   1d9c6:	02 17       	cp	r16, r18
   1d9c8:	08 f4       	brcc	.+2      	; 0x1d9cc <__ftoa_engine+0x142>
   1d9ca:	20 2f       	mov	r18, r16
   1d9cc:	23 95       	inc	r18
   1d9ce:	02 2f       	mov	r16, r18
   1d9d0:	7a 33       	cpi	r23, 0x3A	; 58
   1d9d2:	28 f0       	brcs	.+10     	; 0x1d9de <__ftoa_engine+0x154>
   1d9d4:	79 e3       	ldi	r23, 0x39	; 57
   1d9d6:	7d 93       	st	X+, r23
   1d9d8:	2a 95       	dec	r18
   1d9da:	e9 f7       	brne	.-6      	; 0x1d9d6 <__ftoa_engine+0x14c>
   1d9dc:	10 c0       	rjmp	.+32     	; 0x1d9fe <__ftoa_engine+0x174>
   1d9de:	7d 93       	st	X+, r23
   1d9e0:	2a 95       	dec	r18
   1d9e2:	89 f6       	brne	.-94     	; 0x1d986 <__ftoa_engine+0xfc>
   1d9e4:	06 94       	lsr	r0
   1d9e6:	97 95       	ror	r25
   1d9e8:	67 95       	ror	r22
   1d9ea:	37 95       	ror	r19
   1d9ec:	17 95       	ror	r17
   1d9ee:	17 94       	ror	r1
   1d9f0:	e1 18       	sub	r14, r1
   1d9f2:	f1 0a       	sbc	r15, r17
   1d9f4:	43 0b       	sbc	r20, r19
   1d9f6:	56 0b       	sbc	r21, r22
   1d9f8:	c9 0b       	sbc	r28, r25
   1d9fa:	d0 09       	sbc	r29, r0
   1d9fc:	98 f0       	brcs	.+38     	; 0x1da24 <__ftoa_engine+0x19a>
   1d9fe:	23 95       	inc	r18
   1da00:	7e 91       	ld	r23, -X
   1da02:	73 95       	inc	r23
   1da04:	7a 33       	cpi	r23, 0x3A	; 58
   1da06:	08 f0       	brcs	.+2      	; 0x1da0a <__ftoa_engine+0x180>
   1da08:	70 e3       	ldi	r23, 0x30	; 48
   1da0a:	7c 93       	st	X, r23
   1da0c:	20 13       	cpse	r18, r16
   1da0e:	b8 f7       	brcc	.-18     	; 0x1d9fe <__ftoa_engine+0x174>
   1da10:	7e 91       	ld	r23, -X
   1da12:	70 61       	ori	r23, 0x10	; 16
   1da14:	7d 93       	st	X+, r23
   1da16:	30 f0       	brcs	.+12     	; 0x1da24 <__ftoa_engine+0x19a>
   1da18:	83 95       	inc	r24
   1da1a:	71 e3       	ldi	r23, 0x31	; 49
   1da1c:	7d 93       	st	X+, r23
   1da1e:	70 e3       	ldi	r23, 0x30	; 48
   1da20:	2a 95       	dec	r18
   1da22:	e1 f7       	brne	.-8      	; 0x1da1c <__ftoa_engine+0x192>
   1da24:	11 24       	eor	r1, r1
   1da26:	ef 90       	pop	r14
   1da28:	ff 90       	pop	r15
   1da2a:	0f 91       	pop	r16
   1da2c:	1f 91       	pop	r17
   1da2e:	cf 91       	pop	r28
   1da30:	df 91       	pop	r29
   1da32:	99 27       	eor	r25, r25
   1da34:	87 fd       	sbrc	r24, 7
   1da36:	90 95       	com	r25
   1da38:	08 95       	ret

0001da3a <__ctype_isfalse>:
__ctype_isfalse():
   1da3a:	99 27       	eor	r25, r25
   1da3c:	88 27       	eor	r24, r24

0001da3e <__ctype_istrue>:
__ctype_istrue():
   1da3e:	08 95       	ret

0001da40 <strncasecmp_P>:
strncasecmp_P():
   1da40:	fb 01       	movw	r30, r22
   1da42:	dc 01       	movw	r26, r24
   1da44:	41 50       	subi	r20, 0x01	; 1
   1da46:	50 40       	sbci	r21, 0x00	; 0
   1da48:	88 f0       	brcs	.+34     	; 0x1da6c <strncasecmp_P+0x2c>
   1da4a:	8d 91       	ld	r24, X+
   1da4c:	81 34       	cpi	r24, 0x41	; 65
   1da4e:	1c f0       	brlt	.+6      	; 0x1da56 <strncasecmp_P+0x16>
   1da50:	8b 35       	cpi	r24, 0x5B	; 91
   1da52:	0c f4       	brge	.+2      	; 0x1da56 <strncasecmp_P+0x16>
   1da54:	80 5e       	subi	r24, 0xE0	; 224
   1da56:	65 91       	lpm	r22, Z+
   1da58:	61 34       	cpi	r22, 0x41	; 65
   1da5a:	1c f0       	brlt	.+6      	; 0x1da62 <strncasecmp_P+0x22>
   1da5c:	6b 35       	cpi	r22, 0x5B	; 91
   1da5e:	0c f4       	brge	.+2      	; 0x1da62 <strncasecmp_P+0x22>
   1da60:	60 5e       	subi	r22, 0xE0	; 224
   1da62:	86 1b       	sub	r24, r22
   1da64:	61 11       	cpse	r22, r1
   1da66:	71 f3       	breq	.-36     	; 0x1da44 <strncasecmp_P+0x4>
   1da68:	99 0b       	sbc	r25, r25
   1da6a:	08 95       	ret
   1da6c:	88 1b       	sub	r24, r24
   1da6e:	fc cf       	rjmp	.-8      	; 0x1da68 <strncasecmp_P+0x28>

0001da70 <strnlen_P>:
strnlen_P():
   1da70:	fc 01       	movw	r30, r24
   1da72:	05 90       	lpm	r0, Z+
   1da74:	61 50       	subi	r22, 0x01	; 1
   1da76:	70 40       	sbci	r23, 0x00	; 0
   1da78:	01 10       	cpse	r0, r1
   1da7a:	d8 f7       	brcc	.-10     	; 0x1da72 <strnlen_P+0x2>
   1da7c:	80 95       	com	r24
   1da7e:	90 95       	com	r25
   1da80:	8e 0f       	add	r24, r30
   1da82:	9f 1f       	adc	r25, r31
   1da84:	08 95       	ret

0001da86 <memset>:
memset():
   1da86:	dc 01       	movw	r26, r24
   1da88:	01 c0       	rjmp	.+2      	; 0x1da8c <memset+0x6>
   1da8a:	6d 93       	st	X+, r22
   1da8c:	41 50       	subi	r20, 0x01	; 1
   1da8e:	50 40       	sbci	r21, 0x00	; 0
   1da90:	e0 f7       	brcc	.-8      	; 0x1da8a <memset+0x4>
   1da92:	08 95       	ret

0001da94 <strnlen>:
strnlen():
   1da94:	fc 01       	movw	r30, r24
   1da96:	61 50       	subi	r22, 0x01	; 1
   1da98:	70 40       	sbci	r23, 0x00	; 0
   1da9a:	01 90       	ld	r0, Z+
   1da9c:	01 10       	cpse	r0, r1
   1da9e:	d8 f7       	brcc	.-10     	; 0x1da96 <strnlen+0x2>
   1daa0:	80 95       	com	r24
   1daa2:	90 95       	com	r25
   1daa4:	8e 0f       	add	r24, r30
   1daa6:	9f 1f       	adc	r25, r31
   1daa8:	08 95       	ret

0001daaa <strrev>:
strrev():
   1daaa:	dc 01       	movw	r26, r24
   1daac:	fc 01       	movw	r30, r24
   1daae:	67 2f       	mov	r22, r23
   1dab0:	71 91       	ld	r23, Z+
   1dab2:	77 23       	and	r23, r23
   1dab4:	e1 f7       	brne	.-8      	; 0x1daae <strrev+0x4>
   1dab6:	32 97       	sbiw	r30, 0x02	; 2
   1dab8:	04 c0       	rjmp	.+8      	; 0x1dac2 <strrev+0x18>
   1daba:	7c 91       	ld	r23, X
   1dabc:	6d 93       	st	X+, r22
   1dabe:	70 83       	st	Z, r23
   1dac0:	62 91       	ld	r22, -Z
   1dac2:	ae 17       	cp	r26, r30
   1dac4:	bf 07       	cpc	r27, r31
   1dac6:	c8 f3       	brcs	.-14     	; 0x1daba <strrev+0x10>
   1dac8:	08 95       	ret

0001daca <fputc>:
fputc():
   1daca:	0f 93       	push	r16
   1dacc:	1f 93       	push	r17
   1dace:	cf 93       	push	r28
   1dad0:	df 93       	push	r29
   1dad2:	18 2f       	mov	r17, r24
   1dad4:	09 2f       	mov	r16, r25
   1dad6:	eb 01       	movw	r28, r22
   1dad8:	8b 81       	ldd	r24, Y+3	; 0x03
   1dada:	81 fd       	sbrc	r24, 1
   1dadc:	09 c0       	rjmp	.+18     	; 0x1daf0 <fputc+0x26>
   1dade:	1f ef       	ldi	r17, 0xFF	; 255
   1dae0:	0f ef       	ldi	r16, 0xFF	; 255
   1dae2:	81 2f       	mov	r24, r17
   1dae4:	90 2f       	mov	r25, r16
   1dae6:	df 91       	pop	r29
   1dae8:	cf 91       	pop	r28
   1daea:	1f 91       	pop	r17
   1daec:	0f 91       	pop	r16
   1daee:	08 95       	ret
   1daf0:	82 ff       	sbrs	r24, 2
   1daf2:	14 c0       	rjmp	.+40     	; 0x1db1c <fputc+0x52>
   1daf4:	2e 81       	ldd	r18, Y+6	; 0x06
   1daf6:	3f 81       	ldd	r19, Y+7	; 0x07
   1daf8:	8c 81       	ldd	r24, Y+4	; 0x04
   1dafa:	9d 81       	ldd	r25, Y+5	; 0x05
   1dafc:	28 17       	cp	r18, r24
   1dafe:	39 07       	cpc	r19, r25
   1db00:	3c f4       	brge	.+14     	; 0x1db10 <fputc+0x46>
   1db02:	e8 81       	ld	r30, Y
   1db04:	f9 81       	ldd	r31, Y+1	; 0x01
   1db06:	cf 01       	movw	r24, r30
   1db08:	01 96       	adiw	r24, 0x01	; 1
   1db0a:	99 83       	std	Y+1, r25	; 0x01
   1db0c:	88 83       	st	Y, r24
   1db0e:	10 83       	st	Z, r17
   1db10:	8e 81       	ldd	r24, Y+6	; 0x06
   1db12:	9f 81       	ldd	r25, Y+7	; 0x07
   1db14:	01 96       	adiw	r24, 0x01	; 1
   1db16:	9f 83       	std	Y+7, r25	; 0x07
   1db18:	8e 83       	std	Y+6, r24	; 0x06
   1db1a:	e3 cf       	rjmp	.-58     	; 0x1dae2 <fputc+0x18>
   1db1c:	e8 85       	ldd	r30, Y+8	; 0x08
   1db1e:	f9 85       	ldd	r31, Y+9	; 0x09
   1db20:	81 2f       	mov	r24, r17
   1db22:	19 95       	eicall
   1db24:	89 2b       	or	r24, r25
   1db26:	a1 f3       	breq	.-24     	; 0x1db10 <fputc+0x46>
   1db28:	da cf       	rjmp	.-76     	; 0x1dade <fputc+0x14>

0001db2a <__ultoa_invert>:
__ultoa_invert():
   1db2a:	fa 01       	movw	r30, r20
   1db2c:	aa 27       	eor	r26, r26
   1db2e:	28 30       	cpi	r18, 0x08	; 8
   1db30:	51 f1       	breq	.+84     	; 0x1db86 <__ultoa_invert+0x5c>
   1db32:	20 31       	cpi	r18, 0x10	; 16
   1db34:	81 f1       	breq	.+96     	; 0x1db96 <__ultoa_invert+0x6c>
   1db36:	e8 94       	clt
   1db38:	6f 93       	push	r22
   1db3a:	6e 7f       	andi	r22, 0xFE	; 254
   1db3c:	6e 5f       	subi	r22, 0xFE	; 254
   1db3e:	7f 4f       	sbci	r23, 0xFF	; 255
   1db40:	8f 4f       	sbci	r24, 0xFF	; 255
   1db42:	9f 4f       	sbci	r25, 0xFF	; 255
   1db44:	af 4f       	sbci	r26, 0xFF	; 255
   1db46:	b1 e0       	ldi	r27, 0x01	; 1
   1db48:	3e d0       	rcall	.+124    	; 0x1dbc6 <__ultoa_invert+0x9c>
   1db4a:	b4 e0       	ldi	r27, 0x04	; 4
   1db4c:	3c d0       	rcall	.+120    	; 0x1dbc6 <__ultoa_invert+0x9c>
   1db4e:	67 0f       	add	r22, r23
   1db50:	78 1f       	adc	r23, r24
   1db52:	89 1f       	adc	r24, r25
   1db54:	9a 1f       	adc	r25, r26
   1db56:	a1 1d       	adc	r26, r1
   1db58:	68 0f       	add	r22, r24
   1db5a:	79 1f       	adc	r23, r25
   1db5c:	8a 1f       	adc	r24, r26
   1db5e:	91 1d       	adc	r25, r1
   1db60:	a1 1d       	adc	r26, r1
   1db62:	6a 0f       	add	r22, r26
   1db64:	71 1d       	adc	r23, r1
   1db66:	81 1d       	adc	r24, r1
   1db68:	91 1d       	adc	r25, r1
   1db6a:	a1 1d       	adc	r26, r1
   1db6c:	20 d0       	rcall	.+64     	; 0x1dbae <__ultoa_invert+0x84>
   1db6e:	09 f4       	brne	.+2      	; 0x1db72 <__ultoa_invert+0x48>
   1db70:	68 94       	set
   1db72:	3f 91       	pop	r19
   1db74:	2a e0       	ldi	r18, 0x0A	; 10
   1db76:	26 9f       	mul	r18, r22
   1db78:	11 24       	eor	r1, r1
   1db7a:	30 19       	sub	r19, r0
   1db7c:	30 5d       	subi	r19, 0xD0	; 208
   1db7e:	31 93       	st	Z+, r19
   1db80:	de f6       	brtc	.-74     	; 0x1db38 <__ultoa_invert+0xe>
   1db82:	cf 01       	movw	r24, r30
   1db84:	08 95       	ret
   1db86:	46 2f       	mov	r20, r22
   1db88:	47 70       	andi	r20, 0x07	; 7
   1db8a:	40 5d       	subi	r20, 0xD0	; 208
   1db8c:	41 93       	st	Z+, r20
   1db8e:	b3 e0       	ldi	r27, 0x03	; 3
   1db90:	0f d0       	rcall	.+30     	; 0x1dbb0 <__ultoa_invert+0x86>
   1db92:	c9 f7       	brne	.-14     	; 0x1db86 <__ultoa_invert+0x5c>
   1db94:	f6 cf       	rjmp	.-20     	; 0x1db82 <__ultoa_invert+0x58>
   1db96:	46 2f       	mov	r20, r22
   1db98:	4f 70       	andi	r20, 0x0F	; 15
   1db9a:	40 5d       	subi	r20, 0xD0	; 208
   1db9c:	4a 33       	cpi	r20, 0x3A	; 58
   1db9e:	18 f0       	brcs	.+6      	; 0x1dba6 <__ultoa_invert+0x7c>
   1dba0:	49 5d       	subi	r20, 0xD9	; 217
   1dba2:	31 fd       	sbrc	r19, 1
   1dba4:	40 52       	subi	r20, 0x20	; 32
   1dba6:	41 93       	st	Z+, r20
   1dba8:	02 d0       	rcall	.+4      	; 0x1dbae <__ultoa_invert+0x84>
   1dbaa:	a9 f7       	brne	.-22     	; 0x1db96 <__ultoa_invert+0x6c>
   1dbac:	ea cf       	rjmp	.-44     	; 0x1db82 <__ultoa_invert+0x58>
   1dbae:	b4 e0       	ldi	r27, 0x04	; 4
   1dbb0:	a6 95       	lsr	r26
   1dbb2:	97 95       	ror	r25
   1dbb4:	87 95       	ror	r24
   1dbb6:	77 95       	ror	r23
   1dbb8:	67 95       	ror	r22
   1dbba:	ba 95       	dec	r27
   1dbbc:	c9 f7       	brne	.-14     	; 0x1dbb0 <__ultoa_invert+0x86>
   1dbbe:	00 97       	sbiw	r24, 0x00	; 0
   1dbc0:	61 05       	cpc	r22, r1
   1dbc2:	71 05       	cpc	r23, r1
   1dbc4:	08 95       	ret
   1dbc6:	9b 01       	movw	r18, r22
   1dbc8:	ac 01       	movw	r20, r24
   1dbca:	0a 2e       	mov	r0, r26
   1dbcc:	06 94       	lsr	r0
   1dbce:	57 95       	ror	r21
   1dbd0:	47 95       	ror	r20
   1dbd2:	37 95       	ror	r19
   1dbd4:	27 95       	ror	r18
   1dbd6:	ba 95       	dec	r27
   1dbd8:	c9 f7       	brne	.-14     	; 0x1dbcc <__ultoa_invert+0xa2>
   1dbda:	62 0f       	add	r22, r18
   1dbdc:	73 1f       	adc	r23, r19
   1dbde:	84 1f       	adc	r24, r20
   1dbe0:	95 1f       	adc	r25, r21
   1dbe2:	a0 1d       	adc	r26, r0
   1dbe4:	08 95       	ret

0001dbe6 <__cmpsf2>:
__cmpsf2():
   1dbe6:	0e 94 35 ee 	call	0x1dc6a	; 0x1dc6a <__fp_cmp>
   1dbea:	08 f4       	brcc	.+2      	; 0x1dbee <__cmpsf2+0x8>
   1dbec:	81 e0       	ldi	r24, 0x01	; 1
   1dbee:	08 95       	ret

0001dbf0 <__floatunsisf>:
__floatunsisf():
   1dbf0:	e8 94       	clt
   1dbf2:	09 c0       	rjmp	.+18     	; 0x1dc06 <__floatsisf+0x12>

0001dbf4 <__floatsisf>:
   1dbf4:	97 fb       	bst	r25, 7
   1dbf6:	3e f4       	brtc	.+14     	; 0x1dc06 <__floatsisf+0x12>
   1dbf8:	90 95       	com	r25
   1dbfa:	80 95       	com	r24
   1dbfc:	70 95       	com	r23
   1dbfe:	61 95       	neg	r22
   1dc00:	7f 4f       	sbci	r23, 0xFF	; 255
   1dc02:	8f 4f       	sbci	r24, 0xFF	; 255
   1dc04:	9f 4f       	sbci	r25, 0xFF	; 255
   1dc06:	99 23       	and	r25, r25
   1dc08:	a9 f0       	breq	.+42     	; 0x1dc34 <__floatsisf+0x40>
   1dc0a:	f9 2f       	mov	r31, r25
   1dc0c:	96 e9       	ldi	r25, 0x96	; 150
   1dc0e:	bb 27       	eor	r27, r27
   1dc10:	93 95       	inc	r25
   1dc12:	f6 95       	lsr	r31
   1dc14:	87 95       	ror	r24
   1dc16:	77 95       	ror	r23
   1dc18:	67 95       	ror	r22
   1dc1a:	b7 95       	ror	r27
   1dc1c:	f1 11       	cpse	r31, r1
   1dc1e:	f8 cf       	rjmp	.-16     	; 0x1dc10 <__floatsisf+0x1c>
   1dc20:	fa f4       	brpl	.+62     	; 0x1dc60 <__floatsisf+0x6c>
   1dc22:	bb 0f       	add	r27, r27
   1dc24:	11 f4       	brne	.+4      	; 0x1dc2a <__floatsisf+0x36>
   1dc26:	60 ff       	sbrs	r22, 0
   1dc28:	1b c0       	rjmp	.+54     	; 0x1dc60 <__floatsisf+0x6c>
   1dc2a:	6f 5f       	subi	r22, 0xFF	; 255
   1dc2c:	7f 4f       	sbci	r23, 0xFF	; 255
   1dc2e:	8f 4f       	sbci	r24, 0xFF	; 255
   1dc30:	9f 4f       	sbci	r25, 0xFF	; 255
   1dc32:	16 c0       	rjmp	.+44     	; 0x1dc60 <__floatsisf+0x6c>
   1dc34:	88 23       	and	r24, r24
   1dc36:	11 f0       	breq	.+4      	; 0x1dc3c <__floatsisf+0x48>
   1dc38:	96 e9       	ldi	r25, 0x96	; 150
   1dc3a:	11 c0       	rjmp	.+34     	; 0x1dc5e <__floatsisf+0x6a>
   1dc3c:	77 23       	and	r23, r23
   1dc3e:	21 f0       	breq	.+8      	; 0x1dc48 <__floatsisf+0x54>
   1dc40:	9e e8       	ldi	r25, 0x8E	; 142
   1dc42:	87 2f       	mov	r24, r23
   1dc44:	76 2f       	mov	r23, r22
   1dc46:	05 c0       	rjmp	.+10     	; 0x1dc52 <__floatsisf+0x5e>
   1dc48:	66 23       	and	r22, r22
   1dc4a:	71 f0       	breq	.+28     	; 0x1dc68 <__floatsisf+0x74>
   1dc4c:	96 e8       	ldi	r25, 0x86	; 134
   1dc4e:	86 2f       	mov	r24, r22
   1dc50:	70 e0       	ldi	r23, 0x00	; 0
   1dc52:	60 e0       	ldi	r22, 0x00	; 0
   1dc54:	2a f0       	brmi	.+10     	; 0x1dc60 <__floatsisf+0x6c>
   1dc56:	9a 95       	dec	r25
   1dc58:	66 0f       	add	r22, r22
   1dc5a:	77 1f       	adc	r23, r23
   1dc5c:	88 1f       	adc	r24, r24
   1dc5e:	da f7       	brpl	.-10     	; 0x1dc56 <__floatsisf+0x62>
   1dc60:	88 0f       	add	r24, r24
   1dc62:	96 95       	lsr	r25
   1dc64:	87 95       	ror	r24
   1dc66:	97 f9       	bld	r25, 7
   1dc68:	08 95       	ret

0001dc6a <__fp_cmp>:
__fp_cmp():
   1dc6a:	99 0f       	add	r25, r25
   1dc6c:	00 08       	sbc	r0, r0
   1dc6e:	55 0f       	add	r21, r21
   1dc70:	aa 0b       	sbc	r26, r26
   1dc72:	e0 e8       	ldi	r30, 0x80	; 128
   1dc74:	fe ef       	ldi	r31, 0xFE	; 254
   1dc76:	16 16       	cp	r1, r22
   1dc78:	17 06       	cpc	r1, r23
   1dc7a:	e8 07       	cpc	r30, r24
   1dc7c:	f9 07       	cpc	r31, r25
   1dc7e:	c0 f0       	brcs	.+48     	; 0x1dcb0 <__fp_cmp+0x46>
   1dc80:	12 16       	cp	r1, r18
   1dc82:	13 06       	cpc	r1, r19
   1dc84:	e4 07       	cpc	r30, r20
   1dc86:	f5 07       	cpc	r31, r21
   1dc88:	98 f0       	brcs	.+38     	; 0x1dcb0 <__fp_cmp+0x46>
   1dc8a:	62 1b       	sub	r22, r18
   1dc8c:	73 0b       	sbc	r23, r19
   1dc8e:	84 0b       	sbc	r24, r20
   1dc90:	95 0b       	sbc	r25, r21
   1dc92:	39 f4       	brne	.+14     	; 0x1dca2 <__fp_cmp+0x38>
   1dc94:	0a 26       	eor	r0, r26
   1dc96:	61 f0       	breq	.+24     	; 0x1dcb0 <__fp_cmp+0x46>
   1dc98:	23 2b       	or	r18, r19
   1dc9a:	24 2b       	or	r18, r20
   1dc9c:	25 2b       	or	r18, r21
   1dc9e:	21 f4       	brne	.+8      	; 0x1dca8 <__fp_cmp+0x3e>
   1dca0:	08 95       	ret
   1dca2:	0a 26       	eor	r0, r26
   1dca4:	09 f4       	brne	.+2      	; 0x1dca8 <__fp_cmp+0x3e>
   1dca6:	a1 40       	sbci	r26, 0x01	; 1
   1dca8:	a6 95       	lsr	r26
   1dcaa:	8f ef       	ldi	r24, 0xFF	; 255
   1dcac:	81 1d       	adc	r24, r1
   1dcae:	81 1d       	adc	r24, r1
   1dcb0:	08 95       	ret

0001dcb2 <__mulsf3>:
__mulsf3():
   1dcb2:	0e 94 6c ee 	call	0x1dcd8	; 0x1dcd8 <__mulsf3x>
   1dcb6:	0c 94 dd ee 	jmp	0x1ddba	; 0x1ddba <__fp_round>
   1dcba:	0e 94 cf ee 	call	0x1dd9e	; 0x1dd9e <__fp_pscA>
   1dcbe:	38 f0       	brcs	.+14     	; 0x1dcce <__mulsf3+0x1c>
   1dcc0:	0e 94 d6 ee 	call	0x1ddac	; 0x1ddac <__fp_pscB>
   1dcc4:	20 f0       	brcs	.+8      	; 0x1dcce <__mulsf3+0x1c>
   1dcc6:	95 23       	and	r25, r21
   1dcc8:	11 f0       	breq	.+4      	; 0x1dcce <__mulsf3+0x1c>
   1dcca:	0c 94 c6 ee 	jmp	0x1dd8c	; 0x1dd8c <__fp_inf>
   1dcce:	0c 94 cc ee 	jmp	0x1dd98	; 0x1dd98 <__fp_nan>
   1dcd2:	11 24       	eor	r1, r1
   1dcd4:	0c 94 11 ef 	jmp	0x1de22	; 0x1de22 <__fp_szero>

0001dcd8 <__mulsf3x>:
__mulsf3x():
   1dcd8:	0e 94 ee ee 	call	0x1dddc	; 0x1dddc <__fp_split3>
   1dcdc:	70 f3       	brcs	.-36     	; 0x1dcba <__mulsf3+0x8>

0001dcde <__mulsf3_pse>:
   1dcde:	95 9f       	mul	r25, r21
   1dce0:	c1 f3       	breq	.-16     	; 0x1dcd2 <__mulsf3+0x20>
   1dce2:	95 0f       	add	r25, r21
   1dce4:	50 e0       	ldi	r21, 0x00	; 0
   1dce6:	55 1f       	adc	r21, r21
   1dce8:	62 9f       	mul	r22, r18
   1dcea:	f0 01       	movw	r30, r0
   1dcec:	72 9f       	mul	r23, r18
   1dcee:	bb 27       	eor	r27, r27
   1dcf0:	f0 0d       	add	r31, r0
   1dcf2:	b1 1d       	adc	r27, r1
   1dcf4:	63 9f       	mul	r22, r19
   1dcf6:	aa 27       	eor	r26, r26
   1dcf8:	f0 0d       	add	r31, r0
   1dcfa:	b1 1d       	adc	r27, r1
   1dcfc:	aa 1f       	adc	r26, r26
   1dcfe:	64 9f       	mul	r22, r20
   1dd00:	66 27       	eor	r22, r22
   1dd02:	b0 0d       	add	r27, r0
   1dd04:	a1 1d       	adc	r26, r1
   1dd06:	66 1f       	adc	r22, r22
   1dd08:	82 9f       	mul	r24, r18
   1dd0a:	22 27       	eor	r18, r18
   1dd0c:	b0 0d       	add	r27, r0
   1dd0e:	a1 1d       	adc	r26, r1
   1dd10:	62 1f       	adc	r22, r18
   1dd12:	73 9f       	mul	r23, r19
   1dd14:	b0 0d       	add	r27, r0
   1dd16:	a1 1d       	adc	r26, r1
   1dd18:	62 1f       	adc	r22, r18
   1dd1a:	83 9f       	mul	r24, r19
   1dd1c:	a0 0d       	add	r26, r0
   1dd1e:	61 1d       	adc	r22, r1
   1dd20:	22 1f       	adc	r18, r18
   1dd22:	74 9f       	mul	r23, r20
   1dd24:	33 27       	eor	r19, r19
   1dd26:	a0 0d       	add	r26, r0
   1dd28:	61 1d       	adc	r22, r1
   1dd2a:	23 1f       	adc	r18, r19
   1dd2c:	84 9f       	mul	r24, r20
   1dd2e:	60 0d       	add	r22, r0
   1dd30:	21 1d       	adc	r18, r1
   1dd32:	82 2f       	mov	r24, r18
   1dd34:	76 2f       	mov	r23, r22
   1dd36:	6a 2f       	mov	r22, r26
   1dd38:	11 24       	eor	r1, r1
   1dd3a:	9f 57       	subi	r25, 0x7F	; 127
   1dd3c:	50 40       	sbci	r21, 0x00	; 0
   1dd3e:	9a f0       	brmi	.+38     	; 0x1dd66 <__mulsf3_pse+0x88>
   1dd40:	f1 f0       	breq	.+60     	; 0x1dd7e <__mulsf3_pse+0xa0>
   1dd42:	88 23       	and	r24, r24
   1dd44:	4a f0       	brmi	.+18     	; 0x1dd58 <__mulsf3_pse+0x7a>
   1dd46:	ee 0f       	add	r30, r30
   1dd48:	ff 1f       	adc	r31, r31
   1dd4a:	bb 1f       	adc	r27, r27
   1dd4c:	66 1f       	adc	r22, r22
   1dd4e:	77 1f       	adc	r23, r23
   1dd50:	88 1f       	adc	r24, r24
   1dd52:	91 50       	subi	r25, 0x01	; 1
   1dd54:	50 40       	sbci	r21, 0x00	; 0
   1dd56:	a9 f7       	brne	.-22     	; 0x1dd42 <__mulsf3_pse+0x64>
   1dd58:	9e 3f       	cpi	r25, 0xFE	; 254
   1dd5a:	51 05       	cpc	r21, r1
   1dd5c:	80 f0       	brcs	.+32     	; 0x1dd7e <__mulsf3_pse+0xa0>
   1dd5e:	0c 94 c6 ee 	jmp	0x1dd8c	; 0x1dd8c <__fp_inf>
   1dd62:	0c 94 11 ef 	jmp	0x1de22	; 0x1de22 <__fp_szero>
   1dd66:	5f 3f       	cpi	r21, 0xFF	; 255
   1dd68:	e4 f3       	brlt	.-8      	; 0x1dd62 <__mulsf3_pse+0x84>
   1dd6a:	98 3e       	cpi	r25, 0xE8	; 232
   1dd6c:	d4 f3       	brlt	.-12     	; 0x1dd62 <__mulsf3_pse+0x84>
   1dd6e:	86 95       	lsr	r24
   1dd70:	77 95       	ror	r23
   1dd72:	67 95       	ror	r22
   1dd74:	b7 95       	ror	r27
   1dd76:	f7 95       	ror	r31
   1dd78:	e7 95       	ror	r30
   1dd7a:	9f 5f       	subi	r25, 0xFF	; 255
   1dd7c:	c1 f7       	brne	.-16     	; 0x1dd6e <__mulsf3_pse+0x90>
   1dd7e:	fe 2b       	or	r31, r30
   1dd80:	88 0f       	add	r24, r24
   1dd82:	91 1d       	adc	r25, r1
   1dd84:	96 95       	lsr	r25
   1dd86:	87 95       	ror	r24
   1dd88:	97 f9       	bld	r25, 7
   1dd8a:	08 95       	ret

0001dd8c <__fp_inf>:
   1dd8c:	97 f9       	bld	r25, 7
   1dd8e:	9f 67       	ori	r25, 0x7F	; 127
   1dd90:	80 e8       	ldi	r24, 0x80	; 128
   1dd92:	70 e0       	ldi	r23, 0x00	; 0
   1dd94:	60 e0       	ldi	r22, 0x00	; 0
   1dd96:	08 95       	ret

0001dd98 <__fp_nan>:
   1dd98:	9f ef       	ldi	r25, 0xFF	; 255
   1dd9a:	80 ec       	ldi	r24, 0xC0	; 192
   1dd9c:	08 95       	ret

0001dd9e <__fp_pscA>:
   1dd9e:	00 24       	eor	r0, r0
   1dda0:	0a 94       	dec	r0
   1dda2:	16 16       	cp	r1, r22
   1dda4:	17 06       	cpc	r1, r23
   1dda6:	18 06       	cpc	r1, r24
   1dda8:	09 06       	cpc	r0, r25
__fp_pscA():
   1ddaa:	08 95       	ret

0001ddac <__fp_pscB>:
__fp_pscB():
   1ddac:	00 24       	eor	r0, r0
   1ddae:	0a 94       	dec	r0
   1ddb0:	12 16       	cp	r1, r18
   1ddb2:	13 06       	cpc	r1, r19
   1ddb4:	14 06       	cpc	r1, r20
   1ddb6:	05 06       	cpc	r0, r21
   1ddb8:	08 95       	ret

0001ddba <__fp_round>:
__fp_round():
   1ddba:	09 2e       	mov	r0, r25
   1ddbc:	03 94       	inc	r0
   1ddbe:	00 0c       	add	r0, r0
   1ddc0:	11 f4       	brne	.+4      	; 0x1ddc6 <__fp_round+0xc>
   1ddc2:	88 23       	and	r24, r24
   1ddc4:	52 f0       	brmi	.+20     	; 0x1ddda <__fp_round+0x20>
   1ddc6:	bb 0f       	add	r27, r27
   1ddc8:	40 f4       	brcc	.+16     	; 0x1ddda <__fp_round+0x20>
   1ddca:	bf 2b       	or	r27, r31
   1ddcc:	11 f4       	brne	.+4      	; 0x1ddd2 <__fp_round+0x18>
   1ddce:	60 ff       	sbrs	r22, 0
   1ddd0:	04 c0       	rjmp	.+8      	; 0x1ddda <__fp_round+0x20>
   1ddd2:	6f 5f       	subi	r22, 0xFF	; 255
   1ddd4:	7f 4f       	sbci	r23, 0xFF	; 255
   1ddd6:	8f 4f       	sbci	r24, 0xFF	; 255
   1ddd8:	9f 4f       	sbci	r25, 0xFF	; 255
   1ddda:	08 95       	ret

0001dddc <__fp_split3>:
__fp_split3():
   1dddc:	57 fd       	sbrc	r21, 7
   1ddde:	90 58       	subi	r25, 0x80	; 128
   1dde0:	44 0f       	add	r20, r20
   1dde2:	55 1f       	adc	r21, r21
   1dde4:	59 f0       	breq	.+22     	; 0x1ddfc <__fp_splitA+0x10>
   1dde6:	5f 3f       	cpi	r21, 0xFF	; 255
   1dde8:	71 f0       	breq	.+28     	; 0x1de06 <__fp_splitA+0x1a>
   1ddea:	47 95       	ror	r20

0001ddec <__fp_splitA>:
   1ddec:	88 0f       	add	r24, r24
   1ddee:	97 fb       	bst	r25, 7
   1ddf0:	99 1f       	adc	r25, r25
   1ddf2:	61 f0       	breq	.+24     	; 0x1de0c <__fp_splitA+0x20>
   1ddf4:	9f 3f       	cpi	r25, 0xFF	; 255
   1ddf6:	79 f0       	breq	.+30     	; 0x1de16 <__fp_splitA+0x2a>
   1ddf8:	87 95       	ror	r24
   1ddfa:	08 95       	ret
   1ddfc:	12 16       	cp	r1, r18
   1ddfe:	13 06       	cpc	r1, r19
   1de00:	14 06       	cpc	r1, r20
   1de02:	55 1f       	adc	r21, r21
   1de04:	f2 cf       	rjmp	.-28     	; 0x1ddea <__fp_split3+0xe>
   1de06:	46 95       	lsr	r20
   1de08:	f1 df       	rcall	.-30     	; 0x1ddec <__fp_splitA>
   1de0a:	08 c0       	rjmp	.+16     	; 0x1de1c <__fp_splitA+0x30>
   1de0c:	16 16       	cp	r1, r22
   1de0e:	17 06       	cpc	r1, r23
   1de10:	18 06       	cpc	r1, r24
   1de12:	99 1f       	adc	r25, r25
   1de14:	f1 cf       	rjmp	.-30     	; 0x1ddf8 <__fp_splitA+0xc>
   1de16:	86 95       	lsr	r24
   1de18:	71 05       	cpc	r23, r1
   1de1a:	61 05       	cpc	r22, r1
   1de1c:	08 94       	sec
   1de1e:	08 95       	ret

0001de20 <__fp_zero>:
__fp_zero():
   1de20:	e8 94       	clt

0001de22 <__fp_szero>:
   1de22:	bb 27       	eor	r27, r27
   1de24:	66 27       	eor	r22, r22
   1de26:	77 27       	eor	r23, r23
   1de28:	cb 01       	movw	r24, r22
   1de2a:	97 f9       	bld	r25, 7
   1de2c:	08 95       	ret

0001de2e <eeprom_read_byte>:
eeprom_read_byte():
   1de2e:	f9 99       	sbic	0x1f, 1	; 31
   1de30:	fe cf       	rjmp	.-4      	; 0x1de2e <eeprom_read_byte>
   1de32:	92 bd       	out	0x22, r25	; 34
   1de34:	81 bd       	out	0x21, r24	; 33
   1de36:	f8 9a       	sbi	0x1f, 0	; 31
   1de38:	99 27       	eor	r25, r25
   1de3a:	80 b5       	in	r24, 0x20	; 32
   1de3c:	08 95       	ret

0001de3e <eeprom_write_byte>:
eeprom_write_byte():
   1de3e:	26 2f       	mov	r18, r22

0001de40 <eeprom_write_r18>:
   1de40:	f9 99       	sbic	0x1f, 1	; 31
   1de42:	fe cf       	rjmp	.-4      	; 0x1de40 <eeprom_write_r18>
   1de44:	1f ba       	out	0x1f, r1	; 31
   1de46:	92 bd       	out	0x22, r25	; 34
   1de48:	81 bd       	out	0x21, r24	; 33
   1de4a:	20 bd       	out	0x20, r18	; 32
   1de4c:	0f b6       	in	r0, 0x3f	; 63
   1de4e:	f8 94       	cli
   1de50:	fa 9a       	sbi	0x1f, 2	; 31
   1de52:	f9 9a       	sbi	0x1f, 1	; 31
   1de54:	0f be       	out	0x3f, r0	; 63
   1de56:	01 96       	adiw	r24, 0x01	; 1
   1de58:	08 95       	ret

0001de5a <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   1de5a:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   1de5c:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   1de5e:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   1de60:	0e 94 a6 ef 	call	0x1df4c	; 0x1df4c <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   1de64:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   1de66:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   1de68:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   1de6a:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   1de6c:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   1de6e:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   1de70:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   1de72:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   1de74:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   1de76:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   1de78:	08 95       	ret

0001de7a <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   1de7a:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   1de7c:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   1de7e:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   1de80:	07 c0       	rjmp	.+14     	; 0x1de90 <__udivmodhi4_ep>

0001de82 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   1de82:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   1de84:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   1de86:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   1de88:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   1de8a:	10 f0       	brcs	.+4      	; 0x1de90 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   1de8c:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   1de8e:	b7 0b       	sbc	r27, r23

0001de90 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   1de90:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   1de92:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   1de94:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   1de96:	a9 f7       	brne	.-22     	; 0x1de82 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   1de98:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   1de9a:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   1de9c:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   1de9e:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   1dea0:	08 95       	ret

0001dea2 <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   1dea2:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   1dea4:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   1dea6:	16 f4       	brtc	.+4      	; 0x1deac <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   1dea8:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   1deaa:	07 d0       	rcall	.+14     	; 0x1deba <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   1deac:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   1deae:	09 d0       	rcall	.+18     	; 0x1dec2 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   1deb0:	0e 94 3d ef 	call	0x1de7a	; 0x1de7a <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   1deb4:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   1deb6:	05 d0       	rcall	.+10     	; 0x1dec2 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   1deb8:	3e f4       	brtc	.+14     	; 0x1dec8 <__divmodhi4_exit>

0001deba <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   1deba:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   1debc:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   1debe:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   1dec0:	08 95       	ret

0001dec2 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   1dec2:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   1dec4:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   1dec6:	7f 4f       	sbci	r23, 0xFF	; 255

0001dec8 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   1dec8:	08 95       	ret

0001deca <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   1deca:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   1decc:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   1dece:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   1ded0:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   1ded2:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   1ded4:	0d c0       	rjmp	.+26     	; 0x1def0 <__udivmodsi4_ep>

0001ded6 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   1ded6:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   1ded8:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   1deda:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   1dedc:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   1dede:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   1dee0:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   1dee2:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   1dee4:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   1dee6:	20 f0       	brcs	.+8      	; 0x1def0 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   1dee8:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   1deea:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   1deec:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   1deee:	f5 0b       	sbc	r31, r21

0001def0 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   1def0:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   1def2:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   1def4:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   1def6:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   1def8:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   1defa:	69 f7       	brne	.-38     	; 0x1ded6 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   1defc:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   1defe:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   1df00:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   1df02:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   1df04:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   1df06:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   1df08:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   1df0a:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   1df0c:	08 95       	ret

0001df0e <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   1df0e:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   1df10:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   1df12:	1e f4       	brtc	.+6      	; 0x1df1a <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   1df14:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   1df16:	0e 94 9e ef 	call	0x1df3c	; 0x1df3c <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   1df1a:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   1df1c:	07 d0       	rcall	.+14     	; 0x1df2c <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   1df1e:	0e 94 65 ef 	call	0x1deca	; 0x1deca <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   1df22:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   1df24:	03 d0       	rcall	.+6      	; 0x1df2c <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   1df26:	4e f4       	brtc	.+18     	; 0x1df3a <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   1df28:	0c 94 9e ef 	jmp	0x1df3c	; 0x1df3c <__negsi2>

0001df2c <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   1df2c:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   1df2e:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   1df30:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   1df32:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   1df34:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   1df36:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   1df38:	5f 4f       	sbci	r21, 0xFF	; 255

0001df3a <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   1df3a:	08 95       	ret

0001df3c <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   1df3c:	90 95       	com	r25
   1df3e:	80 95       	com	r24
   1df40:	70 95       	com	r23
   1df42:	61 95       	neg	r22
   1df44:	7f 4f       	sbci	r23, 0xFF	; 255
   1df46:	8f 4f       	sbci	r24, 0xFF	; 255
   1df48:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   1df4a:	08 95       	ret

0001df4c <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   1df4c:	0e 94 b1 ef 	call	0x1df62	; 0x1df62 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   1df50:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   1df52:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   1df54:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   1df56:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   1df58:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   1df5a:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   1df5c:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   1df5e:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   1df60:	08 95       	ret

0001df62 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   1df62:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   1df64:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   1df66:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   1df68:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   1df6a:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   1df6c:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   1df6e:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   1df70:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   1df72:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   1df74:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   1df76:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   1df78:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   1df7a:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   1df7c:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   1df7e:	08 95       	ret

0001df80 <__subsf3>:
__subsf3():
   1df80:	50 58       	subi	r21, 0x80	; 128

0001df82 <__addsf3>:
   1df82:	bb 27       	eor	r27, r27
   1df84:	aa 27       	eor	r26, r26
   1df86:	0e 94 d8 ef 	call	0x1dfb0	; 0x1dfb0 <__addsf3x>
   1df8a:	0c 94 dd ee 	jmp	0x1ddba	; 0x1ddba <__fp_round>
__addsf3():
   1df8e:	0e 94 cf ee 	call	0x1dd9e	; 0x1dd9e <__fp_pscA>
   1df92:	38 f0       	brcs	.+14     	; 0x1dfa2 <__addsf3+0x20>
   1df94:	0e 94 d6 ee 	call	0x1ddac	; 0x1ddac <__fp_pscB>
   1df98:	20 f0       	brcs	.+8      	; 0x1dfa2 <__addsf3+0x20>
   1df9a:	39 f4       	brne	.+14     	; 0x1dfaa <__addsf3+0x28>
   1df9c:	9f 3f       	cpi	r25, 0xFF	; 255
   1df9e:	19 f4       	brne	.+6      	; 0x1dfa6 <__addsf3+0x24>
   1dfa0:	26 f4       	brtc	.+8      	; 0x1dfaa <__addsf3+0x28>
   1dfa2:	0c 94 cc ee 	jmp	0x1dd98	; 0x1dd98 <__fp_nan>
   1dfa6:	0e f4       	brtc	.+2      	; 0x1dfaa <__addsf3+0x28>
   1dfa8:	e0 95       	com	r30
   1dfaa:	e7 fb       	bst	r30, 7
   1dfac:	0c 94 c6 ee 	jmp	0x1dd8c	; 0x1dd8c <__fp_inf>

0001dfb0 <__addsf3x>:
__addsf3x():
   1dfb0:	e9 2f       	mov	r30, r25
   1dfb2:	0e 94 ee ee 	call	0x1dddc	; 0x1dddc <__fp_split3>
   1dfb6:	58 f3       	brcs	.-42     	; 0x1df8e <__addsf3+0xc>
   1dfb8:	ba 17       	cp	r27, r26
   1dfba:	62 07       	cpc	r22, r18
   1dfbc:	73 07       	cpc	r23, r19
   1dfbe:	84 07       	cpc	r24, r20
   1dfc0:	95 07       	cpc	r25, r21
   1dfc2:	20 f0       	brcs	.+8      	; 0x1dfcc <__addsf3x+0x1c>
   1dfc4:	79 f4       	brne	.+30     	; 0x1dfe4 <__addsf3x+0x34>
   1dfc6:	a6 f5       	brtc	.+104    	; 0x1e030 <__addsf3x+0x80>
   1dfc8:	0c 94 10 ef 	jmp	0x1de20	; 0x1de20 <__fp_zero>
   1dfcc:	0e f4       	brtc	.+2      	; 0x1dfd0 <__addsf3x+0x20>
   1dfce:	e0 95       	com	r30
   1dfd0:	0b 2e       	mov	r0, r27
   1dfd2:	ba 2f       	mov	r27, r26
   1dfd4:	a0 2d       	mov	r26, r0
   1dfd6:	0b 01       	movw	r0, r22
   1dfd8:	b9 01       	movw	r22, r18
   1dfda:	90 01       	movw	r18, r0
   1dfdc:	0c 01       	movw	r0, r24
   1dfde:	ca 01       	movw	r24, r20
   1dfe0:	a0 01       	movw	r20, r0
   1dfe2:	11 24       	eor	r1, r1
   1dfe4:	ff 27       	eor	r31, r31
   1dfe6:	59 1b       	sub	r21, r25
   1dfe8:	99 f0       	breq	.+38     	; 0x1e010 <__addsf3x+0x60>
   1dfea:	59 3f       	cpi	r21, 0xF9	; 249
   1dfec:	50 f4       	brcc	.+20     	; 0x1e002 <__addsf3x+0x52>
   1dfee:	50 3e       	cpi	r21, 0xE0	; 224
   1dff0:	68 f1       	brcs	.+90     	; 0x1e04c <__addsf3x+0x9c>
   1dff2:	1a 16       	cp	r1, r26
   1dff4:	f0 40       	sbci	r31, 0x00	; 0
   1dff6:	a2 2f       	mov	r26, r18
   1dff8:	23 2f       	mov	r18, r19
   1dffa:	34 2f       	mov	r19, r20
   1dffc:	44 27       	eor	r20, r20
   1dffe:	58 5f       	subi	r21, 0xF8	; 248
   1e000:	f3 cf       	rjmp	.-26     	; 0x1dfe8 <__addsf3x+0x38>
   1e002:	46 95       	lsr	r20
   1e004:	37 95       	ror	r19
   1e006:	27 95       	ror	r18
   1e008:	a7 95       	ror	r26
   1e00a:	f0 40       	sbci	r31, 0x00	; 0
   1e00c:	53 95       	inc	r21
   1e00e:	c9 f7       	brne	.-14     	; 0x1e002 <__addsf3x+0x52>
   1e010:	7e f4       	brtc	.+30     	; 0x1e030 <__addsf3x+0x80>
   1e012:	1f 16       	cp	r1, r31
   1e014:	ba 0b       	sbc	r27, r26
   1e016:	62 0b       	sbc	r22, r18
   1e018:	73 0b       	sbc	r23, r19
   1e01a:	84 0b       	sbc	r24, r20
   1e01c:	ba f0       	brmi	.+46     	; 0x1e04c <__addsf3x+0x9c>
   1e01e:	91 50       	subi	r25, 0x01	; 1
   1e020:	a1 f0       	breq	.+40     	; 0x1e04a <__addsf3x+0x9a>
   1e022:	ff 0f       	add	r31, r31
   1e024:	bb 1f       	adc	r27, r27
   1e026:	66 1f       	adc	r22, r22
   1e028:	77 1f       	adc	r23, r23
   1e02a:	88 1f       	adc	r24, r24
   1e02c:	c2 f7       	brpl	.-16     	; 0x1e01e <__addsf3x+0x6e>
   1e02e:	0e c0       	rjmp	.+28     	; 0x1e04c <__addsf3x+0x9c>
   1e030:	ba 0f       	add	r27, r26
   1e032:	62 1f       	adc	r22, r18
   1e034:	73 1f       	adc	r23, r19
   1e036:	84 1f       	adc	r24, r20
   1e038:	48 f4       	brcc	.+18     	; 0x1e04c <__addsf3x+0x9c>
   1e03a:	87 95       	ror	r24
   1e03c:	77 95       	ror	r23
   1e03e:	67 95       	ror	r22
   1e040:	b7 95       	ror	r27
   1e042:	f7 95       	ror	r31
   1e044:	9e 3f       	cpi	r25, 0xFE	; 254
   1e046:	08 f0       	brcs	.+2      	; 0x1e04a <__addsf3x+0x9a>
   1e048:	b0 cf       	rjmp	.-160    	; 0x1dfaa <__addsf3+0x28>
   1e04a:	93 95       	inc	r25
   1e04c:	88 0f       	add	r24, r24
   1e04e:	08 f0       	brcs	.+2      	; 0x1e052 <__addsf3x+0xa2>
   1e050:	99 27       	eor	r25, r25
   1e052:	ee 0f       	add	r30, r30
   1e054:	97 95       	ror	r25
   1e056:	87 95       	ror	r24
   1e058:	08 95       	ret

0001e05a <__divsf3>:
   1e05a:	0e 94 41 f0 	call	0x1e082	; 0x1e082 <__divsf3x>
   1e05e:	0c 94 dd ee 	jmp	0x1ddba	; 0x1ddba <__fp_round>
   1e062:	0e 94 d6 ee 	call	0x1ddac	; 0x1ddac <__fp_pscB>
   1e066:	58 f0       	brcs	.+22     	; 0x1e07e <__divsf3+0x24>
   1e068:	0e 94 cf ee 	call	0x1dd9e	; 0x1dd9e <__fp_pscA>
   1e06c:	40 f0       	brcs	.+16     	; 0x1e07e <__divsf3+0x24>
   1e06e:	29 f4       	brne	.+10     	; 0x1e07a <__divsf3+0x20>
   1e070:	5f 3f       	cpi	r21, 0xFF	; 255
   1e072:	29 f0       	breq	.+10     	; 0x1e07e <__divsf3+0x24>
   1e074:	0c 94 c6 ee 	jmp	0x1dd8c	; 0x1dd8c <__fp_inf>
   1e078:	51 11       	cpse	r21, r1
   1e07a:	0c 94 11 ef 	jmp	0x1de22	; 0x1de22 <__fp_szero>
__divsf3():
   1e07e:	0c 94 cc ee 	jmp	0x1dd98	; 0x1dd98 <__fp_nan>

0001e082 <__divsf3x>:
__divsf3x():
   1e082:	0e 94 ee ee 	call	0x1dddc	; 0x1dddc <__fp_split3>
   1e086:	68 f3       	brcs	.-38     	; 0x1e062 <__divsf3+0x8>

0001e088 <__divsf3_pse>:
   1e088:	99 23       	and	r25, r25
   1e08a:	b1 f3       	breq	.-20     	; 0x1e078 <__divsf3+0x1e>
   1e08c:	55 23       	and	r21, r21
   1e08e:	91 f3       	breq	.-28     	; 0x1e074 <__divsf3+0x1a>
   1e090:	95 1b       	sub	r25, r21
   1e092:	55 0b       	sbc	r21, r21
   1e094:	bb 27       	eor	r27, r27
   1e096:	aa 27       	eor	r26, r26
   1e098:	62 17       	cp	r22, r18
   1e09a:	73 07       	cpc	r23, r19
   1e09c:	84 07       	cpc	r24, r20
   1e09e:	38 f0       	brcs	.+14     	; 0x1e0ae <__divsf3_pse+0x26>
   1e0a0:	9f 5f       	subi	r25, 0xFF	; 255
   1e0a2:	5f 4f       	sbci	r21, 0xFF	; 255
   1e0a4:	22 0f       	add	r18, r18
   1e0a6:	33 1f       	adc	r19, r19
   1e0a8:	44 1f       	adc	r20, r20
   1e0aa:	aa 1f       	adc	r26, r26
   1e0ac:	a9 f3       	breq	.-22     	; 0x1e098 <__divsf3_pse+0x10>
   1e0ae:	35 d0       	rcall	.+106    	; 0x1e11a <__divsf3_pse+0x92>
   1e0b0:	0e 2e       	mov	r0, r30
   1e0b2:	3a f0       	brmi	.+14     	; 0x1e0c2 <__divsf3_pse+0x3a>
   1e0b4:	e0 e8       	ldi	r30, 0x80	; 128
   1e0b6:	32 d0       	rcall	.+100    	; 0x1e11c <__divsf3_pse+0x94>
   1e0b8:	91 50       	subi	r25, 0x01	; 1
   1e0ba:	50 40       	sbci	r21, 0x00	; 0
   1e0bc:	e6 95       	lsr	r30
   1e0be:	00 1c       	adc	r0, r0
   1e0c0:	ca f7       	brpl	.-14     	; 0x1e0b4 <__divsf3_pse+0x2c>
   1e0c2:	2b d0       	rcall	.+86     	; 0x1e11a <__divsf3_pse+0x92>
   1e0c4:	fe 2f       	mov	r31, r30
   1e0c6:	29 d0       	rcall	.+82     	; 0x1e11a <__divsf3_pse+0x92>
   1e0c8:	66 0f       	add	r22, r22
   1e0ca:	77 1f       	adc	r23, r23
   1e0cc:	88 1f       	adc	r24, r24
   1e0ce:	bb 1f       	adc	r27, r27
   1e0d0:	26 17       	cp	r18, r22
   1e0d2:	37 07       	cpc	r19, r23
   1e0d4:	48 07       	cpc	r20, r24
   1e0d6:	ab 07       	cpc	r26, r27
   1e0d8:	b0 e8       	ldi	r27, 0x80	; 128
   1e0da:	09 f0       	breq	.+2      	; 0x1e0de <__divsf3_pse+0x56>
   1e0dc:	bb 0b       	sbc	r27, r27
   1e0de:	80 2d       	mov	r24, r0
   1e0e0:	bf 01       	movw	r22, r30
   1e0e2:	ff 27       	eor	r31, r31
   1e0e4:	93 58       	subi	r25, 0x83	; 131
   1e0e6:	5f 4f       	sbci	r21, 0xFF	; 255
   1e0e8:	3a f0       	brmi	.+14     	; 0x1e0f8 <__divsf3_pse+0x70>
   1e0ea:	9e 3f       	cpi	r25, 0xFE	; 254
   1e0ec:	51 05       	cpc	r21, r1
   1e0ee:	78 f0       	brcs	.+30     	; 0x1e10e <__divsf3_pse+0x86>
   1e0f0:	0c 94 c6 ee 	jmp	0x1dd8c	; 0x1dd8c <__fp_inf>
   1e0f4:	0c 94 11 ef 	jmp	0x1de22	; 0x1de22 <__fp_szero>
   1e0f8:	5f 3f       	cpi	r21, 0xFF	; 255
   1e0fa:	e4 f3       	brlt	.-8      	; 0x1e0f4 <__divsf3_pse+0x6c>
   1e0fc:	98 3e       	cpi	r25, 0xE8	; 232
   1e0fe:	d4 f3       	brlt	.-12     	; 0x1e0f4 <__divsf3_pse+0x6c>
   1e100:	86 95       	lsr	r24
   1e102:	77 95       	ror	r23
   1e104:	67 95       	ror	r22
   1e106:	b7 95       	ror	r27
   1e108:	f7 95       	ror	r31
   1e10a:	9f 5f       	subi	r25, 0xFF	; 255
   1e10c:	c9 f7       	brne	.-14     	; 0x1e100 <__divsf3_pse+0x78>
   1e10e:	88 0f       	add	r24, r24
   1e110:	91 1d       	adc	r25, r1
   1e112:	96 95       	lsr	r25
   1e114:	87 95       	ror	r24
   1e116:	97 f9       	bld	r25, 7
   1e118:	08 95       	ret
   1e11a:	e1 e0       	ldi	r30, 0x01	; 1
   1e11c:	66 0f       	add	r22, r22
   1e11e:	77 1f       	adc	r23, r23
   1e120:	88 1f       	adc	r24, r24
   1e122:	bb 1f       	adc	r27, r27
   1e124:	62 17       	cp	r22, r18
   1e126:	73 07       	cpc	r23, r19
   1e128:	84 07       	cpc	r24, r20
   1e12a:	ba 07       	cpc	r27, r26
   1e12c:	20 f0       	brcs	.+8      	; 0x1e136 <__divsf3_pse+0xae>
   1e12e:	62 1b       	sub	r22, r18
   1e130:	73 0b       	sbc	r23, r19
   1e132:	84 0b       	sbc	r24, r20
   1e134:	ba 0b       	sbc	r27, r26
   1e136:	ee 1f       	adc	r30, r30
   1e138:	88 f7       	brcc	.-30     	; 0x1e11c <__divsf3_pse+0x94>
   1e13a:	e0 95       	com	r30
   1e13c:	08 95       	ret

0001e13e <__fixsfsi>:
   1e13e:	0e 94 a6 f0 	call	0x1e14c	; 0x1e14c <__fixunssfsi>
   1e142:	68 94       	set
   1e144:	b1 11       	cpse	r27, r1
   1e146:	0c 94 11 ef 	jmp	0x1de22	; 0x1de22 <__fp_szero>
   1e14a:	08 95       	ret

0001e14c <__fixunssfsi>:
   1e14c:	0e 94 f6 ee 	call	0x1ddec	; 0x1ddec <__fp_splitA>
   1e150:	88 f0       	brcs	.+34     	; 0x1e174 <__fixunssfsi+0x28>
   1e152:	9f 57       	subi	r25, 0x7F	; 127
   1e154:	98 f0       	brcs	.+38     	; 0x1e17c <__fixunssfsi+0x30>
   1e156:	b9 2f       	mov	r27, r25
   1e158:	99 27       	eor	r25, r25
   1e15a:	b7 51       	subi	r27, 0x17	; 23
   1e15c:	b0 f0       	brcs	.+44     	; 0x1e18a <__fixunssfsi+0x3e>
__fixunssfsi():
   1e15e:	e1 f0       	breq	.+56     	; 0x1e198 <__fixunssfsi+0x4c>
   1e160:	66 0f       	add	r22, r22
   1e162:	77 1f       	adc	r23, r23
   1e164:	88 1f       	adc	r24, r24
   1e166:	99 1f       	adc	r25, r25
   1e168:	1a f0       	brmi	.+6      	; 0x1e170 <__fixunssfsi+0x24>
   1e16a:	ba 95       	dec	r27
   1e16c:	c9 f7       	brne	.-14     	; 0x1e160 <__fixunssfsi+0x14>
   1e16e:	14 c0       	rjmp	.+40     	; 0x1e198 <__fixunssfsi+0x4c>
   1e170:	b1 30       	cpi	r27, 0x01	; 1
   1e172:	91 f0       	breq	.+36     	; 0x1e198 <__fixunssfsi+0x4c>
   1e174:	0e 94 10 ef 	call	0x1de20	; 0x1de20 <__fp_zero>
   1e178:	b1 e0       	ldi	r27, 0x01	; 1
   1e17a:	08 95       	ret
   1e17c:	0c 94 10 ef 	jmp	0x1de20	; 0x1de20 <__fp_zero>
   1e180:	67 2f       	mov	r22, r23
   1e182:	78 2f       	mov	r23, r24
   1e184:	88 27       	eor	r24, r24
   1e186:	b8 5f       	subi	r27, 0xF8	; 248
   1e188:	39 f0       	breq	.+14     	; 0x1e198 <__fixunssfsi+0x4c>
   1e18a:	b9 3f       	cpi	r27, 0xF9	; 249
   1e18c:	cc f3       	brlt	.-14     	; 0x1e180 <__fixunssfsi+0x34>
   1e18e:	86 95       	lsr	r24
   1e190:	77 95       	ror	r23
   1e192:	67 95       	ror	r22
   1e194:	b3 95       	inc	r27
   1e196:	d9 f7       	brne	.-10     	; 0x1e18e <__fixunssfsi+0x42>
   1e198:	3e f4       	brtc	.+14     	; 0x1e1a8 <__fixunssfsi+0x5c>
   1e19a:	90 95       	com	r25
   1e19c:	80 95       	com	r24
   1e19e:	70 95       	com	r23
   1e1a0:	61 95       	neg	r22
   1e1a2:	7f 4f       	sbci	r23, 0xFF	; 255
   1e1a4:	8f 4f       	sbci	r24, 0xFF	; 255
   1e1a6:	9f 4f       	sbci	r25, 0xFF	; 255
   1e1a8:	08 95       	ret

0001e1aa <__gesf2>:
__gesf2():
   1e1aa:	0e 94 35 ee 	call	0x1dc6a	; 0x1dc6a <__fp_cmp>
   1e1ae:	08 f4       	brcc	.+2      	; 0x1e1b2 <__gesf2+0x8>
   1e1b0:	8f ef       	ldi	r24, 0xFF	; 255
   1e1b2:	08 95       	ret

0001e1b4 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   1e1b4:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   1e1b6:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   1e1b8:	04 c0       	rjmp	.+8      	; 0x1e1c2 <__udivmodqi4_ep>

0001e1ba <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   1e1ba:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   1e1bc:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   1e1be:	08 f0       	brcs	.+2      	; 0x1e1c2 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   1e1c0:	96 1b       	sub	r25, r22

0001e1c2 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   1e1c2:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   1e1c4:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   1e1c6:	c9 f7       	brne	.-14     	; 0x1e1ba <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   1e1c8:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   1e1ca:	08 95       	ret

0001e1cc <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   1e1cc:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   1e1ce:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   1e1d0:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   1e1d2:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   1e1d4:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   1e1d6:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   1e1d8:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   1e1da:	19 94       	eijmp

0001e1dc <realloc>:
realloc():
   1e1dc:	4f 92       	push	r4
   1e1de:	5f 92       	push	r5
   1e1e0:	6f 92       	push	r6
   1e1e2:	7f 92       	push	r7
   1e1e4:	8f 92       	push	r8
   1e1e6:	9f 92       	push	r9
   1e1e8:	af 92       	push	r10
   1e1ea:	bf 92       	push	r11
   1e1ec:	cf 92       	push	r12
   1e1ee:	df 92       	push	r13
   1e1f0:	ef 92       	push	r14
   1e1f2:	ff 92       	push	r15
   1e1f4:	0f 93       	push	r16
   1e1f6:	1f 93       	push	r17
   1e1f8:	cf 93       	push	r28
   1e1fa:	df 93       	push	r29
   1e1fc:	8c 01       	movw	r16, r24
   1e1fe:	00 97       	sbiw	r24, 0x00	; 0
   1e200:	99 f4       	brne	.+38     	; 0x1e228 <realloc+0x4c>
   1e202:	cb 01       	movw	r24, r22
   1e204:	df 91       	pop	r29
   1e206:	cf 91       	pop	r28
   1e208:	1f 91       	pop	r17
   1e20a:	0f 91       	pop	r16
   1e20c:	ff 90       	pop	r15
   1e20e:	ef 90       	pop	r14
   1e210:	df 90       	pop	r13
   1e212:	cf 90       	pop	r12
   1e214:	bf 90       	pop	r11
   1e216:	af 90       	pop	r10
   1e218:	9f 90       	pop	r9
   1e21a:	8f 90       	pop	r8
   1e21c:	7f 90       	pop	r7
   1e21e:	6f 90       	pop	r6
   1e220:	5f 90       	pop	r5
   1e222:	4f 90       	pop	r4
   1e224:	0c 94 c2 e9 	jmp	0x1d384	; 0x1d384 <malloc>
   1e228:	fc 01       	movw	r30, r24
   1e22a:	e6 0f       	add	r30, r22
   1e22c:	f7 1f       	adc	r31, r23
   1e22e:	9c 01       	movw	r18, r24
   1e230:	22 50       	subi	r18, 0x02	; 2
   1e232:	31 09       	sbc	r19, r1
   1e234:	e2 17       	cp	r30, r18
   1e236:	f3 07       	cpc	r31, r19
   1e238:	08 f4       	brcc	.+2      	; 0x1e23c <realloc+0x60>
   1e23a:	ae c0       	rjmp	.+348    	; 0x1e398 <realloc+0x1bc>
   1e23c:	d9 01       	movw	r26, r18
   1e23e:	cd 91       	ld	r28, X+
   1e240:	dc 91       	ld	r29, X
   1e242:	11 97       	sbiw	r26, 0x01	; 1
   1e244:	c6 17       	cp	r28, r22
   1e246:	d7 07       	cpc	r29, r23
   1e248:	20 f1       	brcs	.+72     	; 0x1e292 <realloc+0xb6>
   1e24a:	c5 30       	cpi	r28, 0x05	; 5
   1e24c:	d1 05       	cpc	r29, r1
   1e24e:	78 f0       	brcs	.+30     	; 0x1e26e <realloc+0x92>
   1e250:	ce 01       	movw	r24, r28
   1e252:	04 97       	sbiw	r24, 0x04	; 4
   1e254:	86 17       	cp	r24, r22
   1e256:	97 07       	cpc	r25, r23
   1e258:	50 f0       	brcs	.+20     	; 0x1e26e <realloc+0x92>
   1e25a:	c6 1b       	sub	r28, r22
   1e25c:	d7 0b       	sbc	r29, r23
   1e25e:	22 97       	sbiw	r28, 0x02	; 2
   1e260:	c1 93       	st	Z+, r28
   1e262:	d1 93       	st	Z+, r29
   1e264:	6d 93       	st	X+, r22
   1e266:	7c 93       	st	X, r23
   1e268:	cf 01       	movw	r24, r30
   1e26a:	0e 94 5e ea 	call	0x1d4bc	; 0x1d4bc <free>
   1e26e:	c8 01       	movw	r24, r16
   1e270:	df 91       	pop	r29
   1e272:	cf 91       	pop	r28
   1e274:	1f 91       	pop	r17
   1e276:	0f 91       	pop	r16
   1e278:	ff 90       	pop	r15
   1e27a:	ef 90       	pop	r14
   1e27c:	df 90       	pop	r13
   1e27e:	cf 90       	pop	r12
   1e280:	bf 90       	pop	r11
   1e282:	af 90       	pop	r10
   1e284:	9f 90       	pop	r9
   1e286:	8f 90       	pop	r8
   1e288:	7f 90       	pop	r7
   1e28a:	6f 90       	pop	r6
   1e28c:	5f 90       	pop	r5
   1e28e:	4f 90       	pop	r4
   1e290:	08 95       	ret
   1e292:	5b 01       	movw	r10, r22
   1e294:	ac 1a       	sub	r10, r28
   1e296:	bd 0a       	sbc	r11, r29
   1e298:	4c 01       	movw	r8, r24
   1e29a:	8c 0e       	add	r8, r28
   1e29c:	9d 1e       	adc	r9, r29
   1e29e:	a0 91 83 14 	lds	r26, 0x1483	; 0x801483 <__flp>
   1e2a2:	b0 91 84 14 	lds	r27, 0x1484	; 0x801484 <__flp+0x1>
   1e2a6:	51 2c       	mov	r5, r1
   1e2a8:	41 2c       	mov	r4, r1
   1e2aa:	f1 2c       	mov	r15, r1
   1e2ac:	e1 2c       	mov	r14, r1
   1e2ae:	10 97       	sbiw	r26, 0x00	; 0
   1e2b0:	31 f5       	brne	.+76     	; 0x1e2fe <realloc+0x122>
   1e2b2:	80 91 81 14 	lds	r24, 0x1481	; 0x801481 <__brkval>
   1e2b6:	90 91 82 14 	lds	r25, 0x1482	; 0x801482 <__brkval+0x1>
   1e2ba:	88 15       	cp	r24, r8
   1e2bc:	99 05       	cpc	r25, r9
   1e2be:	09 f0       	breq	.+2      	; 0x1e2c2 <realloc+0xe6>
   1e2c0:	5c c0       	rjmp	.+184    	; 0x1e37a <realloc+0x19e>
   1e2c2:	46 16       	cp	r4, r22
   1e2c4:	57 06       	cpc	r5, r23
   1e2c6:	08 f0       	brcs	.+2      	; 0x1e2ca <realloc+0xee>
   1e2c8:	58 c0       	rjmp	.+176    	; 0x1e37a <realloc+0x19e>
   1e2ca:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__malloc_heap_end>
   1e2ce:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__malloc_heap_end+0x1>
   1e2d2:	00 97       	sbiw	r24, 0x00	; 0
   1e2d4:	41 f4       	brne	.+16     	; 0x1e2e6 <realloc+0x10a>
   1e2d6:	8d b7       	in	r24, 0x3d	; 61
   1e2d8:	9e b7       	in	r25, 0x3e	; 62
   1e2da:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <__malloc_margin>
   1e2de:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <__malloc_margin+0x1>
   1e2e2:	84 1b       	sub	r24, r20
   1e2e4:	95 0b       	sbc	r25, r21
   1e2e6:	e8 17       	cp	r30, r24
   1e2e8:	f9 07       	cpc	r31, r25
   1e2ea:	08 f0       	brcs	.+2      	; 0x1e2ee <realloc+0x112>
   1e2ec:	55 c0       	rjmp	.+170    	; 0x1e398 <realloc+0x1bc>
   1e2ee:	f0 93 82 14 	sts	0x1482, r31	; 0x801482 <__brkval+0x1>
   1e2f2:	e0 93 81 14 	sts	0x1481, r30	; 0x801481 <__brkval>
   1e2f6:	f9 01       	movw	r30, r18
   1e2f8:	71 83       	std	Z+1, r23	; 0x01
   1e2fa:	60 83       	st	Z, r22
   1e2fc:	b8 cf       	rjmp	.-144    	; 0x1e26e <realloc+0x92>
   1e2fe:	8d 91       	ld	r24, X+
   1e300:	9c 91       	ld	r25, X
   1e302:	11 97       	sbiw	r26, 0x01	; 1
   1e304:	12 96       	adiw	r26, 0x02	; 2
   1e306:	6c 90       	ld	r6, X
   1e308:	12 97       	sbiw	r26, 0x02	; 2
   1e30a:	13 96       	adiw	r26, 0x03	; 3
   1e30c:	7c 90       	ld	r7, X
   1e30e:	13 97       	sbiw	r26, 0x03	; 3
   1e310:	a8 15       	cp	r26, r8
   1e312:	b9 05       	cpc	r27, r9
   1e314:	59 f5       	brne	.+86     	; 0x1e36c <realloc+0x190>
   1e316:	6c 01       	movw	r12, r24
   1e318:	42 e0       	ldi	r20, 0x02	; 2
   1e31a:	c4 0e       	add	r12, r20
   1e31c:	d1 1c       	adc	r13, r1
   1e31e:	ca 14       	cp	r12, r10
   1e320:	db 04       	cpc	r13, r11
   1e322:	20 f1       	brcs	.+72     	; 0x1e36c <realloc+0x190>
   1e324:	ac 01       	movw	r20, r24
   1e326:	4a 19       	sub	r20, r10
   1e328:	5b 09       	sbc	r21, r11
   1e32a:	da 01       	movw	r26, r20
   1e32c:	12 96       	adiw	r26, 0x02	; 2
   1e32e:	15 97       	sbiw	r26, 0x05	; 5
   1e330:	80 f0       	brcs	.+32     	; 0x1e352 <realloc+0x176>
   1e332:	62 82       	std	Z+2, r6	; 0x02
   1e334:	73 82       	std	Z+3, r7	; 0x03
   1e336:	51 83       	std	Z+1, r21	; 0x01
   1e338:	40 83       	st	Z, r20
   1e33a:	d9 01       	movw	r26, r18
   1e33c:	6d 93       	st	X+, r22
   1e33e:	7c 93       	st	X, r23
   1e340:	e1 14       	cp	r14, r1
   1e342:	f1 04       	cpc	r15, r1
   1e344:	71 f0       	breq	.+28     	; 0x1e362 <realloc+0x186>
   1e346:	d7 01       	movw	r26, r14
   1e348:	13 96       	adiw	r26, 0x03	; 3
   1e34a:	fc 93       	st	X, r31
   1e34c:	ee 93       	st	-X, r30
   1e34e:	12 97       	sbiw	r26, 0x02	; 2
   1e350:	8e cf       	rjmp	.-228    	; 0x1e26e <realloc+0x92>
   1e352:	22 96       	adiw	r28, 0x02	; 2
   1e354:	8c 0f       	add	r24, r28
   1e356:	9d 1f       	adc	r25, r29
   1e358:	f9 01       	movw	r30, r18
   1e35a:	91 83       	std	Z+1, r25	; 0x01
   1e35c:	80 83       	st	Z, r24
   1e35e:	f3 01       	movw	r30, r6
   1e360:	ef cf       	rjmp	.-34     	; 0x1e340 <realloc+0x164>
   1e362:	f0 93 84 14 	sts	0x1484, r31	; 0x801484 <__flp+0x1>
   1e366:	e0 93 83 14 	sts	0x1483, r30	; 0x801483 <__flp>
   1e36a:	81 cf       	rjmp	.-254    	; 0x1e26e <realloc+0x92>
   1e36c:	48 16       	cp	r4, r24
   1e36e:	59 06       	cpc	r5, r25
   1e370:	08 f4       	brcc	.+2      	; 0x1e374 <realloc+0x198>
   1e372:	2c 01       	movw	r4, r24
   1e374:	7d 01       	movw	r14, r26
   1e376:	d3 01       	movw	r26, r6
   1e378:	9a cf       	rjmp	.-204    	; 0x1e2ae <realloc+0xd2>
   1e37a:	cb 01       	movw	r24, r22
   1e37c:	0e 94 c2 e9 	call	0x1d384	; 0x1d384 <malloc>
   1e380:	7c 01       	movw	r14, r24
   1e382:	00 97       	sbiw	r24, 0x00	; 0
   1e384:	49 f0       	breq	.+18     	; 0x1e398 <realloc+0x1bc>
   1e386:	ae 01       	movw	r20, r28
   1e388:	b8 01       	movw	r22, r16
   1e38a:	0e 94 d4 f1 	call	0x1e3a8	; 0x1e3a8 <memcpy>
   1e38e:	c8 01       	movw	r24, r16
   1e390:	0e 94 5e ea 	call	0x1d4bc	; 0x1d4bc <free>
   1e394:	87 01       	movw	r16, r14
   1e396:	6b cf       	rjmp	.-298    	; 0x1e26e <realloc+0x92>
   1e398:	10 e0       	ldi	r17, 0x00	; 0
   1e39a:	00 e0       	ldi	r16, 0x00	; 0
   1e39c:	68 cf       	rjmp	.-304    	; 0x1e26e <realloc+0x92>

0001e39e <abort>:
abort():
   1e39e:	81 e0       	ldi	r24, 0x01	; 1
   1e3a0:	90 e0       	ldi	r25, 0x00	; 0
   1e3a2:	f8 94       	cli
   1e3a4:	0c 94 7b f2 	jmp	0x1e4f6	; 0x1e4f6 <_exit>

0001e3a8 <memcpy>:
memcpy():
   1e3a8:	fb 01       	movw	r30, r22
   1e3aa:	dc 01       	movw	r26, r24
   1e3ac:	02 c0       	rjmp	.+4      	; 0x1e3b2 <memcpy+0xa>
   1e3ae:	01 90       	ld	r0, Z+
   1e3b0:	0d 92       	st	X+, r0
   1e3b2:	41 50       	subi	r20, 0x01	; 1
   1e3b4:	50 40       	sbci	r21, 0x00	; 0
   1e3b6:	d8 f7       	brcc	.-10     	; 0x1e3ae <memcpy+0x6>
   1e3b8:	08 95       	ret

0001e3ba <strcat>:
strcat():
   1e3ba:	fb 01       	movw	r30, r22
   1e3bc:	dc 01       	movw	r26, r24
   1e3be:	0d 90       	ld	r0, X+
   1e3c0:	00 20       	and	r0, r0
   1e3c2:	e9 f7       	brne	.-6      	; 0x1e3be <strcat+0x4>
   1e3c4:	11 97       	sbiw	r26, 0x01	; 1
   1e3c6:	01 90       	ld	r0, Z+
   1e3c8:	0d 92       	st	X+, r0
   1e3ca:	00 20       	and	r0, r0
   1e3cc:	e1 f7       	brne	.-8      	; 0x1e3c6 <strcat+0xc>
   1e3ce:	08 95       	ret

0001e3d0 <strchr>:
strchr():
   1e3d0:	fc 01       	movw	r30, r24
   1e3d2:	81 91       	ld	r24, Z+
   1e3d4:	86 17       	cp	r24, r22
   1e3d6:	21 f0       	breq	.+8      	; 0x1e3e0 <strchr+0x10>
   1e3d8:	88 23       	and	r24, r24
   1e3da:	d9 f7       	brne	.-10     	; 0x1e3d2 <strchr+0x2>
   1e3dc:	99 27       	eor	r25, r25
   1e3de:	08 95       	ret
   1e3e0:	31 97       	sbiw	r30, 0x01	; 1
   1e3e2:	cf 01       	movw	r24, r30
   1e3e4:	08 95       	ret

0001e3e6 <strcmp>:
strcmp():
   1e3e6:	fb 01       	movw	r30, r22
   1e3e8:	dc 01       	movw	r26, r24
   1e3ea:	8d 91       	ld	r24, X+
   1e3ec:	01 90       	ld	r0, Z+
   1e3ee:	80 19       	sub	r24, r0
   1e3f0:	01 10       	cpse	r0, r1
   1e3f2:	d9 f3       	breq	.-10     	; 0x1e3ea <strcmp+0x4>
   1e3f4:	99 0b       	sbc	r25, r25
   1e3f6:	08 95       	ret

0001e3f8 <strcpy>:
strcpy():
   1e3f8:	fb 01       	movw	r30, r22
   1e3fa:	dc 01       	movw	r26, r24
   1e3fc:	01 90       	ld	r0, Z+
   1e3fe:	0d 92       	st	X+, r0
   1e400:	00 20       	and	r0, r0
   1e402:	e1 f7       	brne	.-8      	; 0x1e3fc <strcpy+0x4>
   1e404:	08 95       	ret

0001e406 <strncmp>:
strncmp():
   1e406:	fb 01       	movw	r30, r22
   1e408:	dc 01       	movw	r26, r24
   1e40a:	41 50       	subi	r20, 0x01	; 1
   1e40c:	50 40       	sbci	r21, 0x00	; 0
   1e40e:	30 f0       	brcs	.+12     	; 0x1e41c <strncmp+0x16>
   1e410:	8d 91       	ld	r24, X+
   1e412:	01 90       	ld	r0, Z+
   1e414:	80 19       	sub	r24, r0
   1e416:	19 f4       	brne	.+6      	; 0x1e41e <strncmp+0x18>
   1e418:	00 20       	and	r0, r0
   1e41a:	b9 f7       	brne	.-18     	; 0x1e40a <strncmp+0x4>
   1e41c:	88 1b       	sub	r24, r24
   1e41e:	99 0b       	sbc	r25, r25
   1e420:	08 95       	ret

0001e422 <strncpy>:
strncpy():
   1e422:	fb 01       	movw	r30, r22
   1e424:	dc 01       	movw	r26, r24
   1e426:	41 50       	subi	r20, 0x01	; 1
   1e428:	50 40       	sbci	r21, 0x00	; 0
   1e42a:	48 f0       	brcs	.+18     	; 0x1e43e <strncpy+0x1c>
   1e42c:	01 90       	ld	r0, Z+
   1e42e:	0d 92       	st	X+, r0
   1e430:	00 20       	and	r0, r0
   1e432:	c9 f7       	brne	.-14     	; 0x1e426 <strncpy+0x4>
   1e434:	01 c0       	rjmp	.+2      	; 0x1e438 <strncpy+0x16>
   1e436:	1d 92       	st	X+, r1
   1e438:	41 50       	subi	r20, 0x01	; 1
   1e43a:	50 40       	sbci	r21, 0x00	; 0
   1e43c:	e0 f7       	brcc	.-8      	; 0x1e436 <strncpy+0x14>
   1e43e:	08 95       	ret

0001e440 <puts>:
puts():
   1e440:	0f 93       	push	r16
   1e442:	1f 93       	push	r17
   1e444:	cf 93       	push	r28
   1e446:	df 93       	push	r29
   1e448:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <__iob+0x2>
   1e44c:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <__iob+0x3>
   1e450:	23 81       	ldd	r18, Z+3	; 0x03
   1e452:	ec 01       	movw	r28, r24
   1e454:	10 e0       	ldi	r17, 0x00	; 0
   1e456:	00 e0       	ldi	r16, 0x00	; 0
   1e458:	21 fd       	sbrc	r18, 1
   1e45a:	08 c0       	rjmp	.+16     	; 0x1e46c <puts+0x2c>
   1e45c:	0f ef       	ldi	r16, 0xFF	; 255
   1e45e:	1f ef       	ldi	r17, 0xFF	; 255
   1e460:	14 c0       	rjmp	.+40     	; 0x1e48a <puts+0x4a>
   1e462:	19 95       	eicall
   1e464:	89 2b       	or	r24, r25
   1e466:	11 f0       	breq	.+4      	; 0x1e46c <puts+0x2c>
   1e468:	0f ef       	ldi	r16, 0xFF	; 255
   1e46a:	1f ef       	ldi	r17, 0xFF	; 255
   1e46c:	89 91       	ld	r24, Y+
   1e46e:	60 91 6b 14 	lds	r22, 0x146B	; 0x80146b <__iob+0x2>
   1e472:	70 91 6c 14 	lds	r23, 0x146C	; 0x80146c <__iob+0x3>
   1e476:	db 01       	movw	r26, r22
   1e478:	18 96       	adiw	r26, 0x08	; 8
   1e47a:	ed 91       	ld	r30, X+
   1e47c:	fc 91       	ld	r31, X
   1e47e:	81 11       	cpse	r24, r1
   1e480:	f0 cf       	rjmp	.-32     	; 0x1e462 <puts+0x22>
   1e482:	8a e0       	ldi	r24, 0x0A	; 10
   1e484:	19 95       	eicall
   1e486:	89 2b       	or	r24, r25
   1e488:	49 f7       	brne	.-46     	; 0x1e45c <puts+0x1c>
   1e48a:	c8 01       	movw	r24, r16
   1e48c:	df 91       	pop	r29
   1e48e:	cf 91       	pop	r28
   1e490:	1f 91       	pop	r17
   1e492:	0f 91       	pop	r16
   1e494:	08 95       	ret

0001e496 <sprintf>:
sprintf():
   1e496:	0f 93       	push	r16
   1e498:	1f 93       	push	r17
   1e49a:	cf 93       	push	r28
   1e49c:	df 93       	push	r29
   1e49e:	cd b7       	in	r28, 0x3d	; 61
   1e4a0:	de b7       	in	r29, 0x3e	; 62
   1e4a2:	2e 97       	sbiw	r28, 0x0e	; 14
   1e4a4:	0f b6       	in	r0, 0x3f	; 63
   1e4a6:	f8 94       	cli
   1e4a8:	de bf       	out	0x3e, r29	; 62
   1e4aa:	0f be       	out	0x3f, r0	; 63
   1e4ac:	cd bf       	out	0x3d, r28	; 61
   1e4ae:	0e 89       	ldd	r16, Y+22	; 0x16
   1e4b0:	1f 89       	ldd	r17, Y+23	; 0x17
   1e4b2:	86 e0       	ldi	r24, 0x06	; 6
   1e4b4:	8c 83       	std	Y+4, r24	; 0x04
   1e4b6:	1a 83       	std	Y+2, r17	; 0x02
   1e4b8:	09 83       	std	Y+1, r16	; 0x01
   1e4ba:	8f ef       	ldi	r24, 0xFF	; 255
   1e4bc:	9f e7       	ldi	r25, 0x7F	; 127
   1e4be:	9e 83       	std	Y+6, r25	; 0x06
   1e4c0:	8d 83       	std	Y+5, r24	; 0x05
   1e4c2:	ae 01       	movw	r20, r28
   1e4c4:	46 5e       	subi	r20, 0xE6	; 230
   1e4c6:	5f 4f       	sbci	r21, 0xFF	; 255
   1e4c8:	68 8d       	ldd	r22, Y+24	; 0x18
   1e4ca:	79 8d       	ldd	r23, Y+25	; 0x19
   1e4cc:	ce 01       	movw	r24, r28
   1e4ce:	01 96       	adiw	r24, 0x01	; 1
   1e4d0:	0e 94 2b e6 	call	0x1cc56	; 0x1cc56 <vfprintf>
   1e4d4:	2f 81       	ldd	r18, Y+7	; 0x07
   1e4d6:	38 85       	ldd	r19, Y+8	; 0x08
   1e4d8:	02 0f       	add	r16, r18
   1e4da:	13 1f       	adc	r17, r19
   1e4dc:	f8 01       	movw	r30, r16
   1e4de:	10 82       	st	Z, r1
   1e4e0:	2e 96       	adiw	r28, 0x0e	; 14
   1e4e2:	0f b6       	in	r0, 0x3f	; 63
   1e4e4:	f8 94       	cli
   1e4e6:	de bf       	out	0x3e, r29	; 62
   1e4e8:	0f be       	out	0x3f, r0	; 63
   1e4ea:	cd bf       	out	0x3d, r28	; 61
   1e4ec:	df 91       	pop	r29
   1e4ee:	cf 91       	pop	r28
   1e4f0:	1f 91       	pop	r17
   1e4f2:	0f 91       	pop	r16
   1e4f4:	08 95       	ret

0001e4f6 <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   1e4f6:	f8 94       	cli

0001e4f8 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   1e4f8:	ff cf       	rjmp	.-2      	; 0x1e4f8 <__stop_program>
