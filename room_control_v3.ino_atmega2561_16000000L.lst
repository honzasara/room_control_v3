
/tmp/arduino_build_41303/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 25 31 	jmp	0x624a	; 0x624a <__ctors_end>
       4:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
       8:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
       c:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      10:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      14:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      18:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      1c:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      20:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      24:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      28:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      2c:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      30:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      34:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      38:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      3c:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      40:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      44:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      48:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      4c:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      50:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      54:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      58:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      5c:	0c 94 d5 cb 	jmp	0x197aa	; 0x197aa <__vector_23>
      60:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      64:	0c 94 b4 ce 	jmp	0x19d68	; 0x19d68 <__vector_25>
      68:	0c 94 ea ce 	jmp	0x19dd4	; 0x19dd4 <__vector_26>
      6c:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      70:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      74:	0c 94 95 cb 	jmp	0x1972a	; 0x1972a <__vector_29>
      78:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      7c:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      80:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      84:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      88:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      8c:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      90:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      94:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      98:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      9c:	0c 94 df c5 	jmp	0x18bbe	; 0x18bbe <__vector_39>
      a0:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      a4:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      a8:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      ac:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      b0:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      b4:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      b8:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      bc:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      c0:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      c4:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>
      c8:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 07 ad 	jmp	0x15a0e	; 0x15a0e <EthernetUDP::available()>
      d0:	0c 94 6f 71 	jmp	0xe2de	; 0xe2de <mqtt_callback(char*, unsigned char*, unsigned int)>
      d4:	0c 94 fa 90 	jmp	0x121f4	; 0x121f4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
      d8:	0c 94 33 ad 	jmp	0x15a66	; 0x15a66 <EthernetUDP::stop()>
      dc:	0c 94 32 90 	jmp	0x12064	; 0x12064 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
      e0:	0c 94 79 7b 	jmp	0xf6f2	; 0xf6f2 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>
      e4:	0c 94 32 cb 	jmp	0x19664	; 0x19664 <_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP>
      e8:	0c 94 82 40 	jmp	0x8104	; 0x8104 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>
      ec:	0c 94 48 ad 	jmp	0x15a90	; 0x15a90 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
      f0:	0c 94 c2 39 	jmp	0x7384	; 0x7384 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
      f4:	0c 94 40 92 	jmp	0x12480	; 0x12480 <LCDWIKI_KBV::Get_Width() const>
      f8:	0c 94 e8 90 	jmp	0x121d0	; 0x121d0 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
      fc:	0c 94 b0 40 	jmp	0x8160	; 0x8160 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     100:	0c 94 cb c3 	jmp	0x18796	; 0x18796 <TwoWire::onRequestService()>
     104:	0c 94 a0 32 	jmp	0x6540	; 0x6540 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     108:	0c 94 71 ac 	jmp	0x158e2	; 0x158e2 <EthernetClient::stop()>
     10c:	0c 94 19 83 	jmp	0x10632	; 0x10632 <_GLOBAL__sub_I_mqtt_error>
     110:	0c 94 02 ce 	jmp	0x19c04	; 0x19c04 <HardwareSerial::availableForWrite()>
     114:	0c 94 06 c4 	jmp	0x1880c	; 0x1880c <TwoWire::write(unsigned char const*, unsigned int)>
     118:	0c 94 b8 cf 	jmp	0x19f70	; 0x19f70 <Print::write(unsigned char const*, unsigned int)>
     11c:	0c 94 24 cd 	jmp	0x19a48	; 0x19a48 <turnOffPWM+0x94>
     120:	0c 94 ff a5 	jmp	0x14bfe	; 0x14bfe <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xc6>
     124:	0c 94 54 ad 	jmp	0x15aa8	; 0x15aa8 <EthernetUDP::write(unsigned char const*, unsigned int)>
     128:	0c 94 da 39 	jmp	0x73b4	; 0x73b4 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     12c:	0c 94 d4 3e 	jmp	0x7da8	; 0x7da8 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
     130:	0c 94 3d cd 	jmp	0x19a7a	; 0x19a7a <turnOffPWM+0xc6>
     134:	0c 94 a4 42 	jmp	0x8548	; 0x8548 <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>
     138:	0c 94 d0 c4 	jmp	0x189a0	; 0x189a0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>
     13c:	0c 94 05 a6 	jmp	0x14c0a	; 0x14c0a <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xd2>
     140:	0c 94 2a 83 	jmp	0x10654	; 0x10654 <_GLOBAL__sub_I_scan_rf_net_enable>
     144:	0c 94 22 ab 	jmp	0x15644	; 0x15644 <EthernetClient::connect(char const*, unsigned int)>
     148:	0c 94 0b 33 	jmp	0x6616	; 0x6616 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>
     14c:	0c 94 88 3f 	jmp	0x7f10	; 0x7f10 <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     150:	0c 94 d8 a5 	jmp	0x14bb0	; 0x14bb0 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x78>
     154:	0c 94 48 92 	jmp	0x12490	; 0x12490 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     158:	0c 94 28 cd 	jmp	0x19a50	; 0x19a50 <turnOffPWM+0x9c>
     15c:	0c 94 90 37 	jmp	0x6f20	; 0x6f20 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>
     160:	0c 94 ba 38 	jmp	0x7174	; 0x7174 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>
     164:	0c 94 0c cd 	jmp	0x19a18	; 0x19a18 <turnOffPWM+0x64>
     168:	0c 94 0b ad 	jmp	0x15a16	; 0x15a16 <EthernetUDP::write(unsigned char)>
     16c:	0c 94 b1 ad 	jmp	0x15b62	; 0x15b62 <EthernetUDP::peek()>
     170:	0c 94 c5 ab 	jmp	0x1578a	; 0x1578a <EthernetClient::peek()>
     174:	0c 94 65 3b 	jmp	0x76ca	; 0x76ca <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     178:	0c 94 42 33 	jmp	0x6684	; 0x6684 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>
     17c:	0c 94 b9 a5 	jmp	0x14b72	; 0x14b72 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x3a>
     180:	0c 94 bc 34 	jmp	0x6978	; 0x6978 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>
     184:	0c 94 91 c3 	jmp	0x18722	; 0x18722 <TwoWire::peek()>
     188:	0c 94 14 cf 	jmp	0x19e28	; 0x19e28 <Serial0_available()>
     18c:	0c 94 95 9a 	jmp	0x1352a	; 0x1352a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     190:	0c 94 f7 37 	jmp	0x6fee	; 0x6fee <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>
     194:	0c 94 91 35 	jmp	0x6b22	; 0x6b22 <nullfce(unsigned int, unsigned int, unsigned char)>
     198:	0c 94 dd 3c 	jmp	0x79ba	; 0x79ba <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     19c:	0c 94 6d ce 	jmp	0x19cda	; 0x19cda <HardwareSerial::write(unsigned char)>
     1a0:	0c 94 03 ad 	jmp	0x15a06	; 0x15a06 <EthernetUDP::remotePort()>
     1a4:	0c 94 33 34 	jmp	0x6866	; 0x6866 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>
     1a8:	0c 94 22 3e 	jmp	0x7c44	; 0x7c44 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     1ac:	0c 94 68 ad 	jmp	0x15ad0	; 0x15ad0 <EthernetUDP::read()>
     1b0:	0c 94 7f 34 	jmp	0x68fe	; 0x68fe <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>
     1b4:	0c 94 44 92 	jmp	0x12488	; 0x12488 <LCDWIKI_KBV::Get_Height() const>
     1b8:	0c 94 21 ad 	jmp	0x15a42	; 0x15a42 <EthernetUDP::flush()>
     1bc:	0c 94 7c 38 	jmp	0x70f8	; 0x70f8 <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>
     1c0:	0c 94 4d ce 	jmp	0x19c9a	; 0x19c9a <HardwareSerial::flush()>
     1c4:	0c 94 a0 c3 	jmp	0x18740	; 0x18740 <TwoWire::flush()>
     1c8:	0c 94 64 ae 	jmp	0x15cc8	; 0x15cc8 <EthernetUDP::beginPacket(char const*, unsigned int)>
     1cc:	0c 94 80 ab 	jmp	0x15700	; 0x15700 <EthernetClient::write(unsigned char const*, unsigned int)>
     1d0:	0c 94 1b 33 	jmp	0x6636	; 0x6636 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>
     1d4:	0c 94 c9 ad 	jmp	0x15b92	; 0x15b92 <EthernetUDP::parsePacket()>
     1d8:	0c 94 e8 ab 	jmp	0x157d0	; 0x157d0 <EthernetClient::flush()>
     1dc:	0c 94 4a 3c 	jmp	0x7894	; 0x7894 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     1e0:	0c 94 48 33 	jmp	0x6690	; 0x6690 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     1e4:	0c 94 24 40 	jmp	0x8048	; 0x8048 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>
     1e8:	0c 94 02 cd 	jmp	0x19a04	; 0x19a04 <turnOffPWM+0x50>
     1ec:	0c 94 13 a6 	jmp	0x14c26	; 0x14c26 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xee>
     1f0:	0c 94 eb a5 	jmp	0x14bd6	; 0x14bd6 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x9e>
     1f4:	0c 94 11 b3 	jmp	0x16622	; 0x16622 <_GLOBAL__sub_I_w5500>
     1f8:	0c 94 3a cd 	jmp	0x19a74	; 0x19a74 <turnOffPWM+0xc0>
     1fc:	0c 94 d4 ac 	jmp	0x159a8	; 0x159a8 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>
     200:	0c 94 e7 33 	jmp	0x67ce	; 0x67ce <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>
     204:	0c 94 39 35 	jmp	0x6a72	; 0x6a72 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>
     208:	0c 94 a7 ab 	jmp	0x1574e	; 0x1574e <EthernetClient::read()>
     20c:	0c 94 28 33 	jmp	0x6650	; 0x6650 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     210:	0c 94 f9 aa 	jmp	0x155f2	; 0x155f2 <EthernetClient::write(unsigned char)>
     214:	0c 94 d3 32 	jmp	0x65a6	; 0x65a6 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>
     218:	0c 94 9c ab 	jmp	0x15738	; 0x15738 <EthernetClient::available()>
     21c:	0c 94 26 33 	jmp	0x664c	; 0x664c <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     220:	0c 94 ea ac 	jmp	0x159d4	; 0x159d4 <UDP::beginMulticast(IPAddress, unsigned int)>
     224:	0c 94 88 32 	jmp	0x6510	; 0x6510 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     228:	0c 94 16 cd 	jmp	0x19a2c	; 0x19a2c <turnOffPWM+0x78>
     22c:	0c 94 90 bd 	jmp	0x17b20	; 0x17b20 <_GLOBAL__sub_I__ZN12PubSubClientC2Ev>
     230:	0c 94 74 94 	jmp	0x128e8	; 0x128e8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     234:	0c 94 90 34 	jmp	0x6920	; 0x6920 <menu_tds_save_offset(unsigned int, float, unsigned char)>
     238:	0c 94 ca 3f 	jmp	0x7f94	; 0x7f94 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>
     23c:	0c 94 25 39 	jmp	0x724a	; 0x724a <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>
     240:	0c 94 a1 c3 	jmp	0x18742	; 0x18742 <TwoWire::onReceiveService(unsigned char*, int)>
     244:	0c 94 1e cf 	jmp	0x19e3c	; 0x19e3c <_GLOBAL__sub_I___vector_25>
     248:	0c 94 10 cd 	jmp	0x19a20	; 0x19a20 <turnOffPWM+0x6c>
     24c:	0c 94 9d 8d 	jmp	0x11b3a	; 0x11b3a <_GLOBAL__sub_I_PID_Input>
     250:	0c 94 3e cd 	jmp	0x19a7c	; 0x19a7c <turnOffPWM+0xc8>
     254:	0c 94 35 38 	jmp	0x706a	; 0x706a <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>
     258:	0c 94 77 c3 	jmp	0x186ee	; 0x186ee <TwoWire::available()>
     25c:	0c 94 2c cd 	jmp	0x19a58	; 0x19a58 <turnOffPWM+0xa4>
     260:	0c 94 f9 38 	jmp	0x71f2	; 0x71f2 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>
     264:	0c 94 ec ac 	jmp	0x159d8	; 0x159d8 <EthernetUDP::read(char*, unsigned int)>
     268:	0c 94 9c 32 	jmp	0x6538	; 0x6538 <returnnullfceargs(unsigned int, unsigned int, unsigned char)>
     26c:	0c 94 fe cc 	jmp	0x199fc	; 0x199fc <turnOffPWM+0x48>
     270:	0c 94 bb 6b 	jmp	0xd776	; 0xd776 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     274:	0c 94 de a5 	jmp	0x14bbc	; 0x14bbc <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x84>
     278:	0c 94 b9 3e 	jmp	0x7d72	; 0x7d72 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>
     27c:	0c 94 ec aa 	jmp	0x155d8	; 0x155d8 <Print::availableForWrite()>
     280:	0c 94 c7 32 	jmp	0x658e	; 0x658e <click_keyboard_type(unsigned int, unsigned int, unsigned char)>
     284:	0c 94 50 41 	jmp	0x82a0	; 0x82a0 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     288:	0c 94 df ac 	jmp	0x159be	; 0x159be <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>
     28c:	0c 94 b2 37 	jmp	0x6f64	; 0x6f64 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>
     290:	0c 94 58 39 	jmp	0x72b0	; 0x72b0 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>
     294:	0c 94 d4 cd 	jmp	0x19ba8	; 0x19ba8 <HardwareSerial::available()>
     298:	0c 94 17 ab 	jmp	0x1562e	; 0x1562e <EthernetClient::operator==(EthernetClient const&)>
     29c:	0c 94 e5 32 	jmp	0x65ca	; 0x65ca <a2d_complete(unsigned char, unsigned int)>
     2a0:	0c 94 06 cd 	jmp	0x19a0c	; 0x19a0c <turnOffPWM+0x58>
     2a4:	0c 94 1a cd 	jmp	0x19a34	; 0x19a34 <turnOffPWM+0x80>
     2a8:	0c 94 b4 a7 	jmp	0x14f68	; 0x14f68 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>
     2ac:	0c 94 b1 ac 	jmp	0x15962	; 0x15962 <EthernetClient::connected()>
     2b0:	0c 94 e0 cd 	jmp	0x19bc0	; 0x19bc0 <HardwareSerial::peek()>
     2b4:	0c 94 a9 34 	jmp	0x6952	; 0x6952 <menu_tds_save_period(unsigned int, float, unsigned char)>
     2b8:	0c 94 c0 32 	jmp	0x6580	; 0x6580 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>
     2bc:	0c 94 6c 49 	jmp	0x92d8	; 0x92d8 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>
     2c0:	0c 94 1e cd 	jmp	0x19a3c	; 0x19a3c <turnOffPWM+0x88>
     2c4:	0c 94 36 cd 	jmp	0x19a6c	; 0x19a6c <turnOffPWM+0xb8>
     2c8:	0c 94 92 ad 	jmp	0x15b24	; 0x15b24 <EthernetUDP::read(unsigned char*, unsigned int)>
     2cc:	0c 94 c1 ab 	jmp	0x15782	; 0x15782 <EthernetClient::read(unsigned char*, unsigned int)>
     2d0:	0c 94 45 3a 	jmp	0x748a	; 0x748a <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     2d4:	0c 94 35 33 	jmp	0x666a	; 0x666a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
     2d8:	0c 94 1a ae 	jmp	0x15c34	; 0x15c34 <EthernetUDP::begin(unsigned int)>
     2dc:	0c 94 59 33 	jmp	0x66b2	; 0x66b2 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     2e0:	0c 94 32 cd 	jmp	0x19a64	; 0x19a64 <turnOffPWM+0xb0>
     2e4:	0c 94 32 a6 	jmp	0x14c64	; 0x14c64 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x12c>
     2e8:	0c 94 b9 37 	jmp	0x6f72	; 0x6f72 <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>
     2ec:	0c 94 8d 3e 	jmp	0x7d1a	; 0x7d1a <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     2f0:	0c 94 4b 35 	jmp	0x6a96	; 0x6a96 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>
     2f4:	0c 94 50 ad 	jmp	0x15aa0	; 0x15aa0 <EthernetUDP::endPacket()>
     2f8:	0c 94 b6 82 	jmp	0x1056c	; 0x1056c <printf_via_mqtt(char, __file*)>
     2fc:	0c 94 e2 d0 	jmp	0x1a1c4	; 0x1a1c4 <__cxa_pure_virtual>
     300:	0c 94 9e 32 	jmp	0x653c	; 0x653c <display_enable_show(unsigned int, unsigned int, unsigned char)>
     304:	0c 94 7e c3 	jmp	0x186fc	; 0x186fc <TwoWire::read()>
     308:	0c 94 cd ae 	jmp	0x15d9a	; 0x15d9a <_GLOBAL__sub_I__ZN7TwitterC2EPKc>
     30c:	0c 94 28 7c 	jmp	0xf850	; 0xf850 <serial_putc(char, __file*)>
     310:	0c 94 4b cf 	jmp	0x19e96	; 0x19e96 <IPAddress::printTo(Print&) const>
     314:	0c 94 0c ac 	jmp	0x15818	; 0x15818 <EthernetClient::connect(IPAddress, unsigned int)>
     318:	0c 94 19 a6 	jmp	0x14c32	; 0x14c32 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xfa>
     31c:	0c 94 d7 aa 	jmp	0x155ae	; 0x155ae <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>
     320:	0c 94 d7 c3 	jmp	0x187ae	; 0x187ae <TwoWire::write(unsigned char)>
     324:	0c 94 0f ab 	jmp	0x1561e	; 0x1561e <EthernetClient::operator bool()>
     328:	0c 94 dc 32 	jmp	0x65b8	; 0x65b8 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>
     32c:	0c 94 be 34 	jmp	0x697c	; 0x697c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     330:	0c 94 5e 35 	jmp	0x6abc	; 0x6abc <click_button_default_value(unsigned int, unsigned int, unsigned char)>
     334:	0c 94 86 37 	jmp	0x6f0c	; 0x6f0c <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>
     338:	0c 94 ef aa 	jmp	0x155de	; 0x155de <EthernetClient::operator!=(EthernetClient const&)>
     33c:	0c 94 ca 32 	jmp	0x6594	; 0x6594 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>
     340:	0c 94 c2 ae 	jmp	0x15d84	; 0x15d84 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>
     344:	0c 94 6b 3d 	jmp	0x7ad6	; 0x7ad6 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     348:	0c 94 f3 ac 	jmp	0x159e6	; 0x159e6 <EthernetUDP::remoteIP()>
     34c:	0c 94 5f a7 	jmp	0x14ebe	; 0x14ebe <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>
     350:	0c 94 d7 37 	jmp	0x6fae	; 0x6fae <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>
     354:	0c 94 f8 cc 	jmp	0x199f0	; 0x199f0 <turnOffPWM+0x3c>
     358:	0c 94 f9 a5 	jmp	0x14bf2	; 0x14bf2 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xba>
     35c:	0c 94 ee cd 	jmp	0x19bdc	; 0x19bdc <HardwareSerial::read()>
     360:	0c 94 11 ce 	jmp	0x19c22	; 0x19c22 <serialEventRun()>
     364:	0c 94 1f a6 	jmp	0x14c3e	; 0x14c3e <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x106>
     368:	0c 94 ad 37 	jmp	0x6f5a	; 0x6f5a <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     36c:	0c 94 2d a6 	jmp	0x14c5a	; 0x14c5a <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x122>

00000370 <__trampolines_end>:
__trampolines_end():
     370:	4e 41       	sbci	r20, 0x1E	; 30
     372:	4e 49       	Address 0x0000000000000372 is out of bounds.
.word	0xffff	; ????

00000373 <pstr_inity>:
     373:	49 4e 49 54 59                                      INITY

00000378 <pstr_inf>:
     378:	49 4e 46                                            INF

0000037b <pwr_m10>:
     37b:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     38b:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000393 <pwr_p10>:
     393:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     3a3:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     3b3:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     3c3:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     3d3:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     3e3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     3f3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     403:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     413:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     423:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     433:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     443:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     453:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     463:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     473:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     483:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     493:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     4a3:	3d 27                                               ='

000004a5 <Menu_All>:
     4a5:	05 04 03 04 4b 59 07 58 22 01 96 00 aa 00 28 00     ....KY.X".....(.
     4b5:	02 05 91 35 08 9e 32 11 58 22 01 5a 00 aa 00 28     ...5..2.X".Z...(
     4c5:	00 02 01 91 35 08 9e 32 18 58 22 01 1e 00 aa 00     ....5..2.X".....
     4d5:	28 00 02 02 90 37 08 9e 32 00 00 00 00 00 00 00     (....7..2.......
	...
     555:	fe 57 0a 00 dc 00 52 00 3c 00 03 9a d6 ff ff 00     .W....R.<.......
     565:	39 35 4b 35 0a 9e 32 fa 57 64 00 dc 00 52 00 3c     95K5..2.Wd...R.<
     575:	00 03 00 f8 ff ff 01 39 35 4b 35 0a 9e 32 f6 57     .......95K5..2.W
     585:	be 00 dc 00 52 00 3c 00 03 1f 00 ff ff 07 39 35     ....R.<.......95
     595:	4b 35 0a 9e 32 f1 57 18 01 dc 00 52 00 3c 00 03     K5..2.W....R.<..
     5a5:	e0 ff ff ff 02 39 35 4b 35 0a 9e 32 ed 57 72 01     .....95K5..2.Wr.
     5b5:	dc 00 52 00 3c 00 03 e0 07 ff ff 08 39 35 4b 35     ..R.<.......95K5
     5c5:	0a 9e 32 0a 00 82 00 00 bb 6b 00 00 00 00 0c 91     ..2......k......
     5d5:	35 9e 32 52 56 18 01 22 01 00 6b 3d 00 00 00 00     5.2RV.."..k=....
     5e5:	0c 91 35 9e 32 52 56 0a 00 1e 00 00 dd 3c 00 00     ..5.2RV......<..
     5f5:	00 00 09 91 35 9e 32 52 56 00 00 00 00 00 00 00     ....5.2RV.......
	...
     765:	00 03 05 03 00 00 00 00 00 00 00 00 00 00 e0 01     ................
     775:	40 01 01 ff ff 08 ca 32 d3 32 dc 32 9c 32 de 57     @......2.2.2.2.W
     785:	02 58 0a 00 dc 00 be 00 28 00 02 00 86 37 08 9e     .X......(....7..
     795:	32 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     2...............
	...
     a3d:	00 00 00 01 00 00 00 00 00 00 00 10 00 00 00 00     ................
     a4d:	e0 01 40 01 01 ff ff 08 9c 32 9c 32 9c 32 9c 32     ..@......2.2.2.2
     a5d:	b2 57 02 58 0a 00 dc 00 be 00 28 00 02 00 86 37     .W.X......(....7
     a6d:	08 9e 32 ad 54 0a 00 28 00 be 00 28 00 02 00 7c     ..2.T..(...(...|
     a7d:	38 08 9e 32 00 00 00 00 00 00 00 00 00 00 00 00     8..2............
	...
     b79:	00 00 00 18 01 22 01 00 6b 3d 00 00 00 00 0c 91     ....."..k=......
     b89:	35 9e 32 52 56 9a 01 48 00 00 59 33 28 00 7e 00     5.2RV..H..Y3(.~.
     b99:	08 91 35 9e 32 52 56 dc 00 14 00 00 48 33 f0 00     ..5.2RV.....H3..
     ba9:	f0 00 08 91 35 9e 32 52 56 00 00 00 00 00 00 00     ....5.2RV.......
	...
     c09:	e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 00 01     ..#...7..<<.....
     c19:	be 34 ba 38 28 33 08 00 00 00 00 00 00 00 00 00     .4.8(3..........
	...
     c35:	00 00 2b 9a 01 1e 00 28 00 28 00 02 00 1b 33 08     ..+....(.(....3.
     c45:	9e 32 2d 9a 01 c8 00 28 00 28 00 02 00 0b 33 08     .2-....(.(....3.
     c55:	9e 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .2..............
	...
     d19:	00 02 00 03 00 01 02 00 00 03 00 00 00 00 e0 01     ................
     d29:	40 01 01 ff ff 08 9c 32 9c 32 9c 32 9c 32 db 54     @......2.2.2.2.T
     d39:	02 58 0a 00 dc 00 be 00 28 00 02 00 86 37 08 9e     .X......(....7..
     d49:	32 97 56 0a 00 28 00 be 00 28 00 01 00 6c 49 08     2.V..(...(...lI.
     d59:	9e 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .2..............
	...
     ff1:	00 00 00 02 00 00 00 00 00 00 00 99 00 00 00 00     ................
    1001:	e0 01 40 01 01 ff ff 08 9c 32 9c 32 9c 32 9c 32     ..@......2.2.2.2
    1011:	ad 56 02 58 0a 00 dc 00 be 00 28 00 02 00 86 37     .V.X......(....7
    1021:	08 9e 32 00 00 00 00 00 00 00 00 00 00 00 00 00     ..2.............
	...
    112d:	00 00 00 18 01 22 01 00 6b 3d 00 00 00 00 0c 91     ....."..k=......
    113d:	35 9e 32 52 56 9a 01 48 00 02 59 33 28 00 56 00     5.2RV..H..Y3(.V.
    114d:	08 91 35 9e 32 52 56 05 00 1e 00 00 48 33 cc 01     ..5.2RV.....H3..
    115d:	b4 00 08 91 35 9e 32 52 56 00 00 00 00 00 00 00     ....5.2RV.......
	...
    11e9:	00 00 2b 9a 01 1e 00 28 00 28 00 02 02 1b 33 08     ..+....(.(....3.
    11f9:	9e 32 2d 9a 01 a0 00 28 00 28 00 02 02 0b 33 08     .2-....(.(....3.
    1209:	9e 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .2..............
	...
    12ad:	00 00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff     .....(.x.<......
    12bd:	ff 82 50 02 03 02 02 00 d4 3e a4 42 35 33 42 33     ..P......>.B53B3
    12cd:	08 01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01     ................
    12dd:	40 01 01 ff ff 08 9c 32 9c 32 9c 32 9c 32 00 00     @......2.2.2.2..
	...
    212d:	8c 56 7d 56 1e 00 3c 00 64 00 28 00 02 00 d7 37     .V}V..<.d.(....7
    213d:	08 9e 32 7a 56 fa 00 3c 00 64 00 28 00 02 00 86     ..2zV..<.d.(....
    214d:	37 08 9e 32 00 00 00 00 00 00 00 00 00 00 00 00     7..2............
	...
    2249:	00 00 00 14 00 23 00 00 c2 39 00 00 00 00 08 91     .....#...9......
    2259:	35 9e 32 52 56 00 00 00 00 00 00 00 00 00 00 00     5.2RV...........
	...
    23e9:	00 02 00 01 00 00 00 00 00 64 32 00 32 00 7c 01     .........d2.2.|.
    23f9:	8c 00 06 e0 ff 08 9c 32 9c 32 9c 32 9c 32 8c 56     .......2.2.2.2.V
    2409:	6c 56 0a 00 c8 00 82 00 28 00 02 00 b9 37 08 9e     lV......(....7..
    2419:	32 73 56 96 00 c8 00 82 00 28 00 02 00 86 37 08     2sV......(....7.
    2429:	9e 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .2..............
	...
    2525:	00 64 00 2d 00 00 65 3b b4 00 28 00 08 91 35 9e     .d.-..e;..(...5.
    2535:	32 52 56 00 00 00 00 00 00 00 00 00 00 00 00 00     2RV.............
	...
    25e1:	2b 3c 00 2d 00 28 00 28 00 02 00 33 34 08 9e 32     +<.-.(.(...34..2
    25f1:	2d 18 01 2d 00 28 00 28 00 02 00 e7 33 08 9e 32     -..-.(.(....3..2
	...
    26c1:	00 00 00 02 00 01 00 00 02 00 00 66 0a 00 0a 00     ...........f....
    26d1:	cc 01 04 01 06 e0 ff 08 9c 32 9c 32 9c 32 9c 32     .........2.2.2.2
    26e1:	81 56 6c 56 0a 00 c8 00 82 00 28 00 02 00 b2 37     .VlV......(....7
    26f1:	08 9e 32 73 56 96 00 c8 00 82 00 28 00 02 00 86     ..2sV......(....
    2701:	37 08 9e 32 62 56 2c 01 c8 00 82 00 28 00 02 00     7..2bV,.....(...
    2711:	7f 34 08 9e 32 57 56 40 01 23 00 28 00 28 00 02     .4..2WV@.#.(.(..
    2721:	00 c7 32 08 9e 32 55 56 6d 01 23 00 28 00 28 00     ..2..2UVm.#.(.(.
    2731:	02 01 c7 32 08 9e 32 53 56 9a 01 23 00 28 00 28     ...2..2SV..#.(.(
    2741:	00 02 02 c7 32 08 9e 32 00 00 00 00 00 00 00 00     ....2..2........
	...
    27fd:	00 00 00 0a 00 23 00 00 4a 3c 2c 01 28 00 08 91     .....#..J<,.(...
    280d:	35 9e 32 52 56 00 00 00 00 00 00 00 00 00 00 00     5.2RV...........
	...
    2939:	00 00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00     ....P......((...
    2949:	00 03 a0 32 58 39 c0 32 08 00 00 00 00 00 00 00     ...2X9.2........
	...
    299d:	00 06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01     .........g......
    29ad:	04 01 06 e0 ff 08 9c 32 9c 32 9c 32 9c 32 8c 56     .......2.2.2.2.V
    29bd:	aa 54 fa 00 3c 00 64 00 28 00 02 00 86 37 08 9e     .T..<.d.(....7..
    29cd:	32 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     2...............
	...
    2ad9:	00 14 00 23 00 00 c2 39 00 00 00 00 08 91 35 9e     ...#...9......5.
    2ae9:	32 52 56 00 00 00 00 00 00 00 00 00 00 00 00 00     2RV.............
	...
    2c75:	00 00 00 01 00 01 00 00 00 00 00 68 32 00 32 00     ...........h2.2.
    2c85:	7c 01 8c 00 06 e0 ff 08 9c 32 9c 32 9c 32 9c 32     |........2.2.2.2
	...
    3249:	88 57 02 58 0a 00 dc 00 be 00 28 00 02 00 86 37     .W.X......(....7
    3259:	08 9e 32 29 57 18 01 be 00 be 00 28 00 02 00 ad     ..2)W......(....
    3269:	37 08 9e 32 1a 57 18 01 8c 00 be 00 28 00 02 00     7..2.W......(...
    3279:	f7 37 08 9e 32 0b 57 18 01 5a 00 be 00 28 00 02     .7..2.W..Z...(..
    3289:	00 f9 38 08 9e 32 fb 56 18 01 28 00 be 00 28 00     ..8..2.V..(...(.
    3299:	02 00 35 38 08 9e 32 00 00 00 00 00 00 00 00 00     ..58..2.........
	...
    3365:	00 00 00 18 01 22 01 00 6b 3d 00 00 00 00 0c 91     ....."..k=......
    3375:	35 9e 32 52 56 14 00 14 00 00 45 3a 00 00 00 00     5.2RV.....E:....
    3385:	08 91 35 9e 32 52 56 14 00 14 00 00 da 39 00 00     ..5.2RV......9..
    3395:	00 00 0c 91 35 9e 32 52 56 00 00 00 00 00 00 00     ....5.2RV.......
	...
    3505:	00 05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01     ................
    3515:	40 01 01 ff ff 08 9c 32 9c 32 9c 32 9c 32 a3 57     @......2.2.2.2.W
    3525:	02 58 0a 00 dc 00 be 00 28 00 02 00 86 37 08 9e     .X......(....7..
    3535:	32 29 57 18 01 5a 00 be 00 28 00 02 00 88 3f 08     2)W..Z...(....?.
    3545:	9e 32 0b 57 18 01 28 00 be 00 28 00 02 00 22 3e     .2.W..(...(...">
    3555:	08 9e 32 eb 56 18 01 8c 00 be 00 28 00 02 00 ca     ..2.V......(....
    3565:	3f 08 9e 32 00 00 00 00 00 00 00 00 00 00 00 00     ?..2............
	...
    3641:	00 14 00 14 00 00 50 41 00 00 00 00 0c 91 35 9e     ......PA......5.
    3651:	32 52 56 00 00 00 00 00 00 00 00 00 00 00 00 00     2RV.............
	...
    37dd:	00 00 00 04 00 01 00 00 00 00 00 07 00 00 00 00     ................
    37ed:	e0 01 40 01 01 ff ff 08 9c 32 9c 32 9c 32 9c 32     ..@......2.2.2.2
    37fd:	a3 57 02 58 0a 00 dc 00 be 00 28 00 02 00 86 37     .W.X......(....7
    380d:	08 9e 32 37 57 0a 00 28 00 be 00 28 00 01 00 24     ..27W..(...(...$
    381d:	40 08 9e 32 00 00 00 00 00 00 00 00 00 00 00 00     @..2............
	...
    3919:	00 00 00 dc 00 14 00 00 48 33 f0 00 f0 00 08 91     ........H3......
    3929:	35 9e 32 52 56 18 01 22 01 00 6b 3d 00 00 00 00     5.2RV.."..k=....
    3939:	0c 91 35 9e 32 52 56 9a 01 48 00 01 59 33 28 00     ..5.2RV..H..Y3(.
    3949:	7e 00 08 91 35 9e 32 52 56 00 00 00 00 00 00 00     ~...5.2RV.......
	...
    39a9:	e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 01 04     ..#...7..<<.....
    39b9:	8d 3e b9 3e 26 33 08 00 00 00 00 00 00 00 00 00     .>.>&3..........
	...
    39d5:	00 00 2b 9a 01 1e 00 28 00 28 00 02 01 1b 33 08     ..+....(.(....3.
    39e5:	9e 32 2d 9a 01 c8 00 28 00 28 00 02 01 0b 33 08     .2-....(.(....3.
    39f5:	9e 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .2..............
	...
    3ab9:	00 02 00 03 00 01 02 00 00 06 00 00 00 00 e0 01     ................
    3ac9:	40 01 01 ff ff 08 9c 32 9c 32 9c 32 9c 32 00 00     @......2.2.2.2..
	...
    4365:	45 55 02 58 0a 00 dc 00 be 00 28 00 02 00 86 37     EU.X......(....7
    4375:	08 9e 32 de 57 0a 00 28 00 be 00 28 00 02 10 90     ..2.W..(...(....
    4385:	37 08 9e 32 d0 57 0a 00 64 00 be 00 28 00 02 00     7..2.W..d...(...
    4395:	91 35 08 9e 32 c0 57 0a 00 a0 00 be 00 28 00 02     .5..2.W......(..
    43a5:	00 5e 35 08 9e 32 db 54 18 01 28 00 be 00 28 00     .^5..2.T..(...(.
    43b5:	02 99 90 37 08 9e 32 d0 54 18 01 64 00 be 00 28     ...7..2.T..d...(
    43c5:	00 02 00 91 35 08 9e 32 00 00 00 00 00 00 00 00     ....5..2........
	...
    4481:	00 00 00 18 01 22 01 00 6b 3d 00 00 00 00 0c 91     ....."..k=......
    4491:	35 9e 32 52 56 00 00 00 00 00 00 00 00 00 00 00     5.2RV...........
	...
    4621:	00 06 00 01 00 00 00 00 00 96 00 00 00 00 e0 01     ................
    4631:	40 01 01 ff ff 08 9c 32 9c 32 9c 32 9c 32 18 58     @......2.2.2.2.X
    4641:	02 58 0a 00 dc 00 be 00 28 00 02 00 86 37 08 9e     .X......(....7..
    4651:	32 3a 55 0a 00 28 00 be 00 28 00 02 96 90 37 08     2:U..(...(....7.
    4661:	9e 32 ea 54 18 01 28 00 be 00 28 00 02 00 91 35     .2.T..(...(....5
    4671:	08 9e 32 f8 54 0a 00 a0 00 be 00 28 00 02 98 90     ..2.T......(....
    4681:	37 08 9e 32 19 55 0a 00 64 00 be 00 28 00 02 97     7..2.U..d...(...
    4691:	90 37 08 9e 32 00 00 00 00 00 00 00 00 00 00 00     .7..2...........
	...
    475d:	00 18 01 22 01 00 6b 3d 00 00 00 00 0c 91 35 9e     ..."..k=......5.
    476d:	32 52 56 00 00 00 00 00 00 00 00 00 00 00 00 00     2RV.............
	...
    48f9:	00 00 00 05 00 01 00 00 00 00 00 02 00 00 00 00     ................
    4909:	e0 01 40 01 01 ff ff 08 9c 32 9c 32 9c 32 9c 32     ..@......2.2.2.2
    4919:	26 55 02 58 0a 00 dc 00 be 00 28 00 02 00 86 37     &U.X......(....7
    4929:	08 9e 32 b2 57 0a 00 28 00 be 00 28 00 02 03 90     ..2.W..(...(....
    4939:	37 08 9e 32 c5 54 0a 00 64 00 be 00 28 00 02 06     7..2.T..d...(...
    4949:	90 37 08 9e 32 bb 54 0a 00 a0 00 be 00 28 00 02     .7..2.T......(..
    4959:	00 91 35 08 9e 32 00 00 00 00 00 00 00 00 00 00     ..5..2..........
	...
    4a35:	00 00 00 18 01 22 01 00 6b 3d 00 00 00 00 0c 91     ....."..k=......
    4a45:	35 9e 32 52 56 00 00 00 00 00 00 00 00 00 00 00     5.2RV...........
	...
    4bd5:	00 04 00 01 00 00 00 00 00 97 00 00 00 00 e0 01     ................
    4be5:	40 01 01 ff ff 08 9c 32 9c 32 9c 32 9c 32 05 55     @......2.2.2.2.U
    4bf5:	02 58 0a 00 dc 00 be 00 28 00 02 00 86 37 08 9e     .X......(....7..
    4c05:	32 ad 56 0a 00 28 00 be 00 28 00 01 08 90 37 08     2.V..(...(....7.
    4c15:	9e 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .2..............
	...
    4d11:	00 18 01 22 01 00 6b 3d 00 00 00 00 0c 91 35 9e     ..."..k=......5.
    4d21:	32 52 56 00 00 00 00 00 00 00 00 00 00 00 00 00     2RV.............
	...
    4ead:	00 00 00 02 00 01 00 00 00 00 00 98 00 00 00 00     ................
    4ebd:	e0 01 40 01 01 ff ff 08 9c 32 9c 32 9c 32 9c 32     ..@......2.2.2.2
	...

00005481 <new_text_error_ntp_time>:
    5481:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    5491:	45 52 52 4f 52 00                                   ERROR.

00005497 <new_text_ok_ntp_time>:
    5497:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    54a7:	4f 4b 00                                            OK.

000054aa <new_text_ok>:
    54aa:	4f 4b 00                                            OK.

000054ad <new_text_scan_onewire_bus>:
    54ad:	53 63 61 6e 20 73 62 65 72 6e 69 63 65 00           Scan sbernice.

000054bb <new_nastaveni_nrf_input>:
    54bb:	4e 52 46 20 76 73 74 75 70 00                       NRF vstup.

000054c5 <new_nastaveni_mqtt_topic>:
    54c5:	4d 51 54 54 20 74 6f 70 69 63 00                    MQTT topic.

000054d0 <new_text_o_zarizeni>:
    54d0:	4f 20 7a 61 72 69 7a 65 6e 69 00                    O zarizeni.

000054db <new_text_nastaveni_casu>:
    54db:	4e 61 73 74 61 76 65 6e 69 20 63 61 73 75 00        Nastaveni casu.

000054ea <new_text_nastaveni_regulatoru>:
    54ea:	4e 2e 20 72 65 67 75 6c 61 74 6f 72 75 00           N. regulatoru.

000054f8 <new_text_nastaveni_zobrazeni>:
    54f8:	4e 2e 20 7a 6f 62 72 61 7a 65 6e 69 00              N. zobrazeni.

00005505 <new_text_nastaveni_zobrazeni_full>:
    5505:	4e 61 73 74 61 76 65 6e 69 20 7a 6f 62 72 61 7a     Nastaveni zobraz
    5515:	65 6e 69 00                                         eni.

00005519 <new_text_nastaveni_periferie>:
    5519:	4e 2e 20 70 65 72 69 66 65 72 69 69 00              N. periferii.

00005526 <new_text_nastaveni_periferii_full>:
    5526:	4e 61 73 74 61 76 65 6e 69 20 70 65 72 69 66 65     Nastaveni perife
    5536:	72 69 69 00                                         rii.

0000553a <new_text_nastaveni_system>:
    553a:	4e 2e 20 73 79 73 74 65 6d 75 00                    N. systemu.

00005545 <new_text_nastaveni_system_full>:
    5545:	4e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     Nastaveni system
    5555:	75 00                                               u.

00005557 <keyboad_number_char_special>:
    5557:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    5567:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

00005571 <keyboad_number_char_lower>:
    5571:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    5581:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

0000558b <keyboad_number_char_upper>:
    558b:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    559b:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

000055a5 <termbig_subscribe>:
    55a5:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    55b5:	73 63 72 69 62 65 00                                scribe.

000055bc <thermctl_subscribe>:
    55bc:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    55cc:	62 73 63 72 69 62 65 00                             bscribe.

000055d4 <lightctl_header_out>:
    55d4:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

000055e3 <termbig_header_out>:
    55e3:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

000055f1 <termbig_header_in>:
    55f1:	2f 74 65 72 6d 62 69 67 2d 69 6e 2f 00              /termbig-in/.

000055fe <thermctl_header_out>:
    55fe:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

0000560d <thermctl_header_in>:
    560d:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

0000561b <global_time_offset>:
    561b:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    562b:	6f 66 66 73 65 74 00                                offset.

00005632 <global_time_ntp>:
    5632:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

00005642 <global_time_set>:
    5642:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

00005652 <char_NULL>:
	...

00005653 <text_special_case>:
    5653:	40 00                                               @.

00005655 <text_lower_case>:
    5655:	61 00                                               a.

00005657 <text_upper_case>:
    5657:	41 00                                               A.

00005659 <text_ok>:
    5659:	4f 4b 00                                            OK.

0000565c <text_err>:
    565c:	45 72 72 6f 72 00                                   Error.

00005662 <text_delete_char>:
    5662:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

0000566c <text_ulozit>:
    566c:	55 6c 6f 7a 69 74 00                                Ulozit.

00005673 <text_zrusit>:
    5673:	5a 72 75 73 69 74 00                                Zrusit.

0000567a <text_no>:
    567a:	4e 65 00                                            Ne.

0000567d <text_yes>:
    567d:	41 6e 6f 00                                         Ano.

00005681 <text_klavesnice>:
    5681:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

0000568c <text_upozorneni>:
    568c:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

00005697 <text_ntp_sync_time>:
    5697:	41 6b 74 75 61 6c 69 7a 61 63 65 20 63 61 73 75     Aktualizace casu
	...

000056a8 <text_prog>:
    56a8:	50 52 4f 47 00                                      PROG.

000056ad <text_select_default_temp>:
    56ad:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
    56bd:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

000056c7 <text_last_update>:
    56c7:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    56d7:	7a 61 63 65 3a 00                                   zace:.

000056dd <text_online>:
    56dd:	4f 6e 6c 69 6e 65 00                                Online.

000056e4 <text_nazev>:
    56e4:	4e 61 7a 65 76 3a 00                                Nazev:.

000056eb <nastaveni_rtds_subscribe>:
    56eb:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

000056fb <nastaveni_tds_offset>:
    56fb:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

0000570b <nastaveni_name_sensor>:
    570b:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

0000571a <nastaveni_tds_period>:
    571a:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

00005729 <nastaveni_delete_sensor>:
    5729:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

00005737 <text_rtds_novy>:
    5737:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
    5747:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

00005752 <text_not_used>:
    5752:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

0000575f <text_rtds_prefix>:
    575f:	2f 00                                               /.

00005761 <text_nastavit_tds>:
    5761:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    5771:	6c 6f 00                                            lo.

00005774 <text_associovat_tds>:
    5774:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    5784:	64 6c 6f 00                                         dlo.

00005788 <text_tds_sensors>:
    5788:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
    5798:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

000057a3 <nastaveni_rtds>:
    57a3:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

000057b2 <nastaveni_onewire>:
    57b2:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

000057c0 <nastaveni_default>:
    57c0:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

000057d0 <nastaveni_nrf>:
    57d0:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

000057de <nastaveni_site>:
    57de:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

000057ed <text_button_term_man>:
    57ed:	4d 41 4e 00                                         MAN.

000057f1 <text_button_term_prog>:
    57f1:	50 52 4f 47 00                                      PROG.

000057f6 <text_button_term_min>:
    57f6:	4d 49 4e 00                                         MIN.

000057fa <text_button_term_max>:
    57fa:	4d 41 58 00                                         MAX.

000057fe <text_button_term_off>:
    57fe:	4f 46 46 00                                         OFF.

00005802 <button_zpet>:
    5802:	5a 70 65 74 00                                      Zpet.

00005807 <regulator_text>:
    5807:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

00005811 <funkce_text>:
    5811:	46 75 6e 6b 63 65 00                                Funkce.

00005818 <nastaveni_text>:
    5818:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

00005822 <temp_offset_short>:
    5822:	6f 66 66 73 65 74 3a 00                             offset:.

0000582a <current_temp_short>:
    582a:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

00005833 <current_temp>:
    5833:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    5843:	3a 00                                               :.

00005845 <current_time>:
    5845:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00005852 <text_test_eeprom>:
    5852:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

00005862 <text_test_ram>:
    5862:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

0000586f <text_bezny_start>:
    586f:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

0000587b <text_vychozi_nastaveni>:
    587b:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    588b:	69 00                                               i.

0000588d <text_rtc_cas>:
    588d:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    589d:	6e 79 00                                            ny.

000058a0 <text_ntp_cas>:
    58a0:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    58b0:	63 61 73 00                                         cas.

000058b4 <text_pid_regulator>:
    58b4:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

000058c2 <text_nrf_rozhrani>:
    58c2:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

000058cf <text_rest_rozhrani>:
    58cf:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    58df:	69 00                                               i.

000058e1 <text_mqtt_rozhrani>:
    58e1:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

000058ef <text_ethernet_rozhrani>:
    58ef:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    58ff:	69 00                                               i.

00005901 <text_vnitrni_ochrany>:
    5901:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

00005911 <text_onewire_hledam>:
    5911:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

0000591e <text_onewire_rozhrani>:
    591e:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

0000592d <text_nastaveni_systemu>:
    592d:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    593d:	75 00                                               u.

0000593f <text_touchscreen>:
    593f:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

0000594b <term_title>:
    594b:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    595b:	6f 72 20 76 33 00                                   or v3.

00005961 <network_mqtt_key>:
    5961:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

00005972 <network_mqtt_user>:
    5972:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    5982:	72 00                                               r.

00005984 <network_mqtt_port>:
    5984:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    5994:	74 00                                               t.

00005996 <network_mqtt_host>:
    5996:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    59a6:	74 00                                               t.

000059a8 <network_ntp>:
    59a8:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

000059b4 <network_dns>:
    59b4:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

000059c0 <network_gw>:
    59c0:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

000059cb <network_netmask>:
    59cb:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

000059db <network_mac>:
    59db:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

000059e7 <status_know_devices>:
    59e7:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    59f7:	63 65 73 00                                         ces.

000059fb <network_name>:
    59fb:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

00005a08 <network_ip>:
    5a08:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

00005a13 <status_mqtt_process>:
    5a13:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    5a23:	65 73 73 00                                         ess.

00005a27 <status_mqtt_receive>:
    5a27:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    5a37:	69 76 65 00                                         ive.

00005a3b <status_mqtt_error>:
    5a3b:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    5a4b:	72 00                                               r.

00005a4d <status_mqtt_send>:
    5a4d:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

00005a5e <lcd_font>:
    5a5e:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    5a6e:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    5a7e:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    5a8e:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    5a9e:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    5aae:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    5abe:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    5ace:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    5ade:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    5aee:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    5afe:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    5b0e:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    5b1e:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    5b2e:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    5b3e:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    5b4e:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    5b5e:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    5b6e:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    5b7e:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    5b8e:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    5b9e:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    5bae:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    5bbe:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    5bce:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    5bde:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    5bee:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    5bfe:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    5c0e:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    5c1e:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    5c2e:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    5c3e:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    5c4e:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    5c5e:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    5c6e:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    5c7e:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    5c8e:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    5c9e:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    5cae:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    5cbe:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    5cce:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    5cde:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    5cee:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    5cfe:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    5d0e:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    5d1e:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    5d2e:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    5d3e:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    5d4e:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    5d5e:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    5d6e:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    5d7e:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    5d8e:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    5d9e:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    5dae:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    5dbe:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    5dce:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    5dde:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    5dee:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    5dfe:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    5e0e:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    5e1e:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    5e2e:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    5e3e:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    5e4e:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    5e5e:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    5e6e:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    5e7e:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    5e8e:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    5e9e:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    5eae:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    5ebe:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    5ece:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    5ede:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    5eee:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    5efe:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    5f0e:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    5f1e:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    5f2e:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    5f3e:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    5f4e:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00005f59 <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    5f59:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    5f69:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    5f79:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    5f89:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    5f99:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    5fa9:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    5fb9:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

00005fc5 <_ZZN4RF2412printDetailsEvE3__c__12_>:
    5fc5:	50 41 20 50 6f 77 65 72 09 20 3d 20 25 53 0d 0a     PA Power. = %S..
	...

00005fd6 <_ZZN4RF2412printDetailsEvE3__c__11_>:
    5fd6:	43 52 43 20 4c 65 6e 67 74 68 09 20 3d 20 25 53     CRC Length. = %S
    5fe6:	0d 0a 00                                            ...

00005fe9 <_ZZN4RF2412printDetailsEvE3__c__10_>:
    5fe9:	4d 6f 64 65 6c 09 09 20 3d 20 25 53 0d 0a 00        Model.. = %S...

00005ff8 <RF24::printDetails()::__c>:
    5ff8:	44 61 74 61 20 52 61 74 65 09 20 3d 20 25 53 0d     Data Rate. = %S.
    6008:	0a 00                                               ..

0000600a <RF24::printDetails()::__c>:
    600a:	44 59 4e 50 44 2f 46 45 41 54 55 52 45 00           DYNPD/FEATURE.

00006018 <RF24::printDetails()::__c>:
    6018:	43 4f 4e 46 49 47 09 00                             CONFIG..

00006020 <RF24::printDetails()::__c>:
    6020:	52 46 5f 53 45 54 55 50 00                          RF_SETUP.

00006029 <RF24::printDetails()::__c>:
    6029:	52 46 5f 43 48 09 00                                RF_CH..

00006030 <RF24::printDetails()::__c>:
    6030:	45 4e 5f 52 58 41 44 44 52 00                       EN_RXADDR.

0000603a <RF24::printDetails()::__c>:
    603a:	45 4e 5f 41 41 09 00                                EN_AA..

00006041 <RF24::printDetails()::__c>:
    6041:	52 58 5f 50 57 5f 50 30 2d 36 00                    RX_PW_P0-6.

0000604c <RF24::printDetails()::__c>:
    604c:	54 58 5f 41 44 44 52 09 00                          TX_ADDR..

00006055 <RF24::printDetails()::__c>:
    6055:	52 58 5f 41 44 44 52 5f 50 32 2d 35 00              RX_ADDR_P2-5.

00006062 <RF24::printDetails()::__c>:
    6062:	52 58 5f 41 44 44 52 5f 50 30 2d 31 00              RX_ADDR_P0-1.

0000606f <rf24_pa_dbm_e_str_P>:
    606f:	8d 60 86 60 7e 60 77 60                             .`.`~`w`

00006077 <rf24_pa_dbm_e_str_3>:
    6077:	50 41 5f 4d 41 58 00                                PA_MAX.

0000607e <rf24_pa_dbm_e_str_2>:
    607e:	50 41 5f 48 49 47 48 00                             PA_HIGH.

00006086 <rf24_pa_dbm_e_str_1>:
    6086:	50 41 5f 4c 4f 57 00                                PA_LOW.

0000608d <rf24_pa_dbm_e_str_0>:
    608d:	50 41 5f 4d 49 4e 00                                PA_MIN.

00006094 <rf24_crclength_e_str_P>:
    6094:	a9 60 a2 60 9a 60                                   .`.`.`

0000609a <rf24_crclength_e_str_2>:
    609a:	31 36 20 62 69 74 73 00                             16 bits.

000060a2 <rf24_crclength_e_str_1>:
    60a2:	38 20 62 69 74 73 00                                8 bits.

000060a9 <rf24_crclength_e_str_0>:
    60a9:	44 69 73 61 62 6c 65 64 00                          Disabled.

000060b2 <rf24_model_e_str_P>:
    60b2:	c0 60 b6 60                                         .`.`

000060b6 <rf24_model_e_str_1>:
    60b6:	6e 52 46 32 34 4c 30 31 2b 00                       nRF24L01+.

000060c0 <rf24_model_e_str_0>:
    60c0:	6e 52 46 32 34 4c 30 31 00                          nRF24L01.

000060c9 <rf24_datarate_e_str_P>:
    60c9:	dd 60 d7 60 cf 60                                   .`.`.`

000060cf <rf24_datarate_e_str_2>:
    60cf:	32 35 30 4b 42 50 53 00                             250KBPS.

000060d7 <rf24_datarate_e_str_1>:
    60d7:	32 4d 42 50 53 00                                   2MBPS.

000060dd <rf24_datarate_e_str_0>:
    60dd:	31 4d 42 50 53 00                                   1MBPS.

000060e3 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    60e3:	0d 0a 00                                            ...

000060e6 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    60e6:	25 30 32 78 00                                      %02x.

000060eb <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    60eb:	20 30 78 00                                          0x.

000060ef <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    60ef:	25 53 09 20 3d 00                                   %S. =.

000060f5 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    60f5:	0d 0a 00                                            ...

000060f8 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    60f8:	20 30 78 25 30 32 78 00                              0x%02x.

00006100 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    6100:	25 53 09 20 3d 00                                   %S. =.

00006106 <RF24::print_status(unsigned char)::__c>:
    6106:	53 54 41 54 55 53 09 09 20 3d 20 30 78 25 30 32     STATUS.. = 0x%02
    6116:	78 20 52 58 5f 44 52 3d 25 78 20 54 58 5f 44 53     x RX_DR=%x TX_DS
    6126:	3d 25 78 20 4d 41 58 5f 52 54 3d 25 78 20 52 58     =%x MAX_RT=%x RX
    6136:	5f 50 5f 4e 4f 3d 25 78 20 54 58 5f 46 55 4c 4c     _P_NO=%x TX_FULL
    6146:	3d 25 78 0d 0a 00                                   =%x...

0000614c <daysInMonth>:
    614c:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00006158 <digital_pin_to_timer_PGM>:
    6158:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    618c:	00 03                                               ..

0000618e <digital_pin_to_bit_mask_PGM>:
    618e:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    619e:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    61ae:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    61be:	08 10 20 40 80 20                                   .. @. 

000061c4 <digital_pin_to_port_PGM>:
    61c4:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    61d4:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    61e4:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    61f4:	06 06 06 06 06 07                                   ......

000061fa <port_to_input_PGM>:
    61fa:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

0000620a <port_to_output_PGM>:
    620a:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

0000621a <port_to_mode_PGM>:
    621a:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

0000622a <__ctors_start>:
__ctors_start():
    622a:	79 7b       	andi	r23, 0xB9	; 185
    622c:	19 83       	std	Y+1, r17	; 0x01
    622e:	2a 83       	std	Y+2, r18	; 0x02
    6230:	9d 8d       	ldd	r25, Y+29	; 0x1d
    6232:	5f a7       	std	Y+47, r21	; 0x2f
    6234:	b4 a7       	std	Z+44, r27	; 0x2c
    6236:	d7 aa       	std	Z+55, r13	; 0x37
    6238:	d4 ac       	ldd	r13, Z+60	; 0x3c
    623a:	df ac       	ldd	r13, Y+63	; 0x3f
    623c:	c2 ae       	std	Z+58, r12	; 0x3a
    623e:	cd ae       	std	Y+61, r12	; 0x3d
    6240:	11 b3       	in	r17, 0x11	; 17
    6242:	90 bd       	out	0x20, r25	; 32
    6244:	d0 c4       	rjmp	.+2464   	; 0x6be6 <ArduinoJson::Internals::isFloat(char const*)+0x28>
    6246:	32 cb       	rjmp	.-2460   	; 0x58ac <text_ntp_cas+0xc>
    6248:	1e cf       	rjmp	.-452    	; 0x6086 <rf24_pa_dbm_e_str_1>

0000624a <__ctors_end>:
__dtors_end():
    624a:	11 24       	eor	r1, r1
    624c:	1f be       	out	0x3f, r1	; 63
    624e:	cf ef       	ldi	r28, 0xFF	; 255
    6250:	d1 e2       	ldi	r29, 0x21	; 33
    6252:	de bf       	out	0x3e, r29	; 62
    6254:	cd bf       	out	0x3d, r28	; 61
    6256:	00 e0       	ldi	r16, 0x00	; 0
    6258:	0c bf       	out	0x3c, r16	; 60

0000625a <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    625a:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    625c:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    625e:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    6260:	e2 e2       	ldi	r30, 0x22	; 34
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    6262:	ff eb       	ldi	r31, 0xBF	; 191
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    6264:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    6266:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    6268:	02 c0       	rjmp	.+4      	; 0x626e <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    626a:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    626c:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    626e:	a2 3c       	cpi	r26, 0xC2	; 194
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    6270:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    6272:	d9 f7       	brne	.-10     	; 0x626a <__do_copy_data+0x10>

00006274 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    6274:	22 e1       	ldi	r18, 0x12	; 18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    6276:	a2 ec       	ldi	r26, 0xC2	; 194
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    6278:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    627a:	01 c0       	rjmp	.+2      	; 0x627e <.do_clear_bss_start>

0000627c <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    627c:	1d 92       	st	X+, r1

0000627e <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    627e:	ae 3a       	cpi	r26, 0xAE	; 174
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    6280:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    6282:	e1 f7       	brne	.-8      	; 0x627c <.do_clear_bss_loop>

00006284 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    6284:	11 e3       	ldi	r17, 0x31	; 49
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    6286:	c5 e2       	ldi	r28, 0x25	; 37
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    6288:	d1 e3       	ldi	r29, 0x31	; 49
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    628a:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    628c:	06 c0       	rjmp	.+12     	; 0x629a <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    628e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    6290:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    6292:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    6294:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    6296:	0e 94 bb d3 	call	0x1a776	; 0x1a776 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    629a:	c5 31       	cpi	r28, 0x15	; 21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    629c:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    629e:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    62a0:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    62a2:	a9 f7       	brne	.-22     	; 0x628e <__do_global_ctors+0xa>
    62a4:	0e 94 e5 d0 	call	0x1a1ca	; 0x1a1ca <main>
    62a8:	0c 94 8f df 	jmp	0x1bf1e	; 0x1bf1e <_exit>

000062ac <__bad_interrupt>:
__vector_38():
    62ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000062b0 <localtime>:
localtime():
    62b0:	6a e9       	ldi	r22, 0x9A	; 154
    62b2:	72 e1       	ldi	r23, 0x12	; 18
    62b4:	0e 94 5f 31 	call	0x62be	; 0x62be <localtime_r>
    62b8:	8a e9       	ldi	r24, 0x9A	; 154
    62ba:	92 e1       	ldi	r25, 0x12	; 18
    62bc:	08 95       	ret

000062be <localtime_r>:
localtime_r():
    62be:	cf 92       	push	r12
    62c0:	df 92       	push	r13
    62c2:	ef 92       	push	r14
    62c4:	ff 92       	push	r15
    62c6:	0f 93       	push	r16
    62c8:	1f 93       	push	r17
    62ca:	cf 93       	push	r28
    62cc:	df 93       	push	r29
    62ce:	00 d0       	rcall	.+0      	; 0x62d0 <localtime_r+0x12>
    62d0:	1f 92       	push	r1
    62d2:	cd b7       	in	r28, 0x3d	; 61
    62d4:	de b7       	in	r29, 0x3e	; 62
    62d6:	6c 01       	movw	r12, r24
    62d8:	7b 01       	movw	r14, r22
    62da:	e0 91 ac 12 	lds	r30, 0x12AC	; 0x8012ac <__dst_ptr>
    62de:	f0 91 ad 12 	lds	r31, 0x12AD	; 0x8012ad <__dst_ptr+0x1>
    62e2:	0f ef       	ldi	r16, 0xFF	; 255
    62e4:	1f ef       	ldi	r17, 0xFF	; 255
    62e6:	30 97       	sbiw	r30, 0x00	; 0
    62e8:	21 f0       	breq	.+8      	; 0x62f2 <localtime_r+0x34>
    62ea:	66 ea       	ldi	r22, 0xA6	; 166
    62ec:	72 e1       	ldi	r23, 0x12	; 18
    62ee:	19 95       	eicall
    62f0:	8c 01       	movw	r16, r24
    62f2:	f6 01       	movw	r30, r12
    62f4:	80 81       	ld	r24, Z
    62f6:	91 81       	ldd	r25, Z+1	; 0x01
    62f8:	a2 81       	ldd	r26, Z+2	; 0x02
    62fa:	b3 81       	ldd	r27, Z+3	; 0x03
    62fc:	40 91 a6 12 	lds	r20, 0x12A6	; 0x8012a6 <__utc_offset>
    6300:	50 91 a7 12 	lds	r21, 0x12A7	; 0x8012a7 <__utc_offset+0x1>
    6304:	60 91 a8 12 	lds	r22, 0x12A8	; 0x8012a8 <__utc_offset+0x2>
    6308:	70 91 a9 12 	lds	r23, 0x12A9	; 0x8012a9 <__utc_offset+0x3>
    630c:	84 0f       	add	r24, r20
    630e:	95 1f       	adc	r25, r21
    6310:	a6 1f       	adc	r26, r22
    6312:	b7 1f       	adc	r27, r23
    6314:	10 16       	cp	r1, r16
    6316:	11 06       	cpc	r1, r17
    6318:	cc f0       	brlt	.+50     	; 0x634c <localtime_r+0x8e>
    631a:	89 83       	std	Y+1, r24	; 0x01
    631c:	9a 83       	std	Y+2, r25	; 0x02
    631e:	ab 83       	std	Y+3, r26	; 0x03
    6320:	bc 83       	std	Y+4, r27	; 0x04
    6322:	b7 01       	movw	r22, r14
    6324:	ce 01       	movw	r24, r28
    6326:	01 96       	adiw	r24, 0x01	; 1
    6328:	0e 94 b0 31 	call	0x6360	; 0x6360 <gmtime_r>
    632c:	f7 01       	movw	r30, r14
    632e:	13 87       	std	Z+11, r17	; 0x0b
    6330:	02 87       	std	Z+10, r16	; 0x0a
    6332:	0f 90       	pop	r0
    6334:	0f 90       	pop	r0
    6336:	0f 90       	pop	r0
    6338:	0f 90       	pop	r0
    633a:	df 91       	pop	r29
    633c:	cf 91       	pop	r28
    633e:	1f 91       	pop	r17
    6340:	0f 91       	pop	r16
    6342:	ff 90       	pop	r15
    6344:	ef 90       	pop	r14
    6346:	df 90       	pop	r13
    6348:	cf 90       	pop	r12
    634a:	08 95       	ret
    634c:	a8 01       	movw	r20, r16
    634e:	01 2e       	mov	r0, r17
    6350:	00 0c       	add	r0, r0
    6352:	66 0b       	sbc	r22, r22
    6354:	77 0b       	sbc	r23, r23
    6356:	84 0f       	add	r24, r20
    6358:	95 1f       	adc	r25, r21
    635a:	a6 1f       	adc	r26, r22
    635c:	b7 1f       	adc	r27, r23
    635e:	dd cf       	rjmp	.-70     	; 0x631a <localtime_r+0x5c>

00006360 <gmtime_r>:
gmtime_r():
    6360:	cf 92       	push	r12
    6362:	df 92       	push	r13
    6364:	ef 92       	push	r14
    6366:	ff 92       	push	r15
    6368:	0f 93       	push	r16
    636a:	1f 93       	push	r17
    636c:	cf 93       	push	r28
    636e:	df 93       	push	r29
    6370:	00 d0       	rcall	.+0      	; 0x6372 <gmtime_r+0x12>
    6372:	00 d0       	rcall	.+0      	; 0x6374 <gmtime_r+0x14>
    6374:	1f 92       	push	r1
    6376:	1f 92       	push	r1
    6378:	cd b7       	in	r28, 0x3d	; 61
    637a:	de b7       	in	r29, 0x3e	; 62
    637c:	8b 01       	movw	r16, r22
    637e:	fc 01       	movw	r30, r24
    6380:	60 81       	ld	r22, Z
    6382:	71 81       	ldd	r23, Z+1	; 0x01
    6384:	82 81       	ldd	r24, Z+2	; 0x02
    6386:	93 81       	ldd	r25, Z+3	; 0x03
    6388:	20 e8       	ldi	r18, 0x80	; 128
    638a:	31 e5       	ldi	r19, 0x51	; 81
    638c:	41 e0       	ldi	r20, 0x01	; 1
    638e:	50 e0       	ldi	r21, 0x00	; 0
    6390:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
    6394:	69 01       	movw	r12, r18
    6396:	7a 01       	movw	r14, r20
    6398:	2c e3       	ldi	r18, 0x3C	; 60
    639a:	30 e0       	ldi	r19, 0x00	; 0
    639c:	40 e0       	ldi	r20, 0x00	; 0
    639e:	50 e0       	ldi	r21, 0x00	; 0
    63a0:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <__divmodsi4>
    63a4:	29 83       	std	Y+1, r18	; 0x01
    63a6:	3a 83       	std	Y+2, r19	; 0x02
    63a8:	4b 83       	std	Y+3, r20	; 0x03
    63aa:	5c 83       	std	Y+4, r21	; 0x04
    63ac:	89 81       	ldd	r24, Y+1	; 0x01
    63ae:	9a 81       	ldd	r25, Y+2	; 0x02
    63b0:	ab 81       	ldd	r26, Y+3	; 0x03
    63b2:	bc 81       	ldd	r27, Y+4	; 0x04
    63b4:	f8 01       	movw	r30, r16
    63b6:	60 83       	st	Z, r22
    63b8:	6c e3       	ldi	r22, 0x3C	; 60
    63ba:	70 e0       	ldi	r23, 0x00	; 0
    63bc:	0e 94 66 d3 	call	0x1a6cc	; 0x1a6cc <__divmodhi4>
    63c0:	dc 01       	movw	r26, r24
    63c2:	f8 01       	movw	r30, r16
    63c4:	a1 83       	std	Z+1, r26	; 0x01
    63c6:	62 83       	std	Z+2, r22	; 0x02
    63c8:	c6 01       	movw	r24, r12
    63ca:	06 96       	adiw	r24, 0x06	; 6
    63cc:	67 e0       	ldi	r22, 0x07	; 7
    63ce:	70 e0       	ldi	r23, 0x00	; 0
    63d0:	0e 94 52 d3 	call	0x1a6a4	; 0x1a6a4 <__udivmodhi4>
    63d4:	84 83       	std	Z+4, r24	; 0x04
    63d6:	2d ea       	ldi	r18, 0xAD	; 173
    63d8:	3e e8       	ldi	r19, 0x8E	; 142
    63da:	40 e0       	ldi	r20, 0x00	; 0
    63dc:	50 e0       	ldi	r21, 0x00	; 0
    63de:	c7 01       	movw	r24, r14
    63e0:	b6 01       	movw	r22, r12
    63e2:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <__divmodsi4>
    63e6:	29 83       	std	Y+1, r18	; 0x01
    63e8:	3a 83       	std	Y+2, r19	; 0x02
    63ea:	6d 83       	std	Y+5, r22	; 0x05
    63ec:	7e 83       	std	Y+6, r23	; 0x06
    63ee:	8f 83       	std	Y+7, r24	; 0x07
    63f0:	98 87       	std	Y+8, r25	; 0x08
    63f2:	89 81       	ldd	r24, Y+1	; 0x01
    63f4:	9a 81       	ldd	r25, Y+2	; 0x02
    63f6:	24 e6       	ldi	r18, 0x64	; 100
    63f8:	28 9f       	mul	r18, r24
    63fa:	60 01       	movw	r12, r0
    63fc:	29 9f       	mul	r18, r25
    63fe:	d0 0c       	add	r13, r0
    6400:	11 24       	eor	r1, r1
    6402:	6d 81       	ldd	r22, Y+5	; 0x05
    6404:	7e 81       	ldd	r23, Y+6	; 0x06
    6406:	8f 81       	ldd	r24, Y+7	; 0x07
    6408:	98 85       	ldd	r25, Y+8	; 0x08
    640a:	25 eb       	ldi	r18, 0xB5	; 181
    640c:	35 e0       	ldi	r19, 0x05	; 5
    640e:	40 e0       	ldi	r20, 0x00	; 0
    6410:	50 e0       	ldi	r21, 0x00	; 0
    6412:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <__divmodsi4>
    6416:	29 83       	std	Y+1, r18	; 0x01
    6418:	3a 83       	std	Y+2, r19	; 0x02
    641a:	6d 83       	std	Y+5, r22	; 0x05
    641c:	7e 83       	std	Y+6, r23	; 0x06
    641e:	e9 80       	ldd	r14, Y+1	; 0x01
    6420:	fa 80       	ldd	r15, Y+2	; 0x02
    6422:	ee 0c       	add	r14, r14
    6424:	ff 1c       	adc	r15, r15
    6426:	ee 0c       	add	r14, r14
    6428:	ff 1c       	adc	r15, r15
    642a:	ec 0c       	add	r14, r12
    642c:	fd 1c       	adc	r15, r13
    642e:	8d 81       	ldd	r24, Y+5	; 0x05
    6430:	9e 81       	ldd	r25, Y+6	; 0x06
    6432:	f5 e6       	ldi	r31, 0x65	; 101
    6434:	ef 16       	cp	r14, r31
    6436:	f1 04       	cpc	r15, r1
    6438:	08 f4       	brcc	.+2      	; 0x643c <gmtime_r+0xdc>
    643a:	3f c0       	rjmp	.+126    	; 0x64ba <gmtime_r+0x15a>
    643c:	01 96       	adiw	r24, 0x01	; 1
    643e:	21 e0       	ldi	r18, 0x01	; 1
    6440:	30 e0       	ldi	r19, 0x00	; 0
    6442:	a9 01       	movw	r20, r18
    6444:	44 59       	subi	r20, 0x94	; 148
    6446:	5e 4f       	sbci	r21, 0xFE	; 254
    6448:	48 17       	cp	r20, r24
    644a:	59 07       	cpc	r21, r25
    644c:	60 f4       	brcc	.+24     	; 0x6466 <gmtime_r+0x106>
    644e:	6d e6       	ldi	r22, 0x6D	; 109
    6450:	71 e0       	ldi	r23, 0x01	; 1
    6452:	82 1b       	sub	r24, r18
    6454:	93 0b       	sbc	r25, r19
    6456:	0e 94 66 d3 	call	0x1a6cc	; 0x1a6cc <__divmodhi4>
    645a:	dc 01       	movw	r26, r24
    645c:	e6 0e       	add	r14, r22
    645e:	f7 1e       	adc	r15, r23
    6460:	cd 01       	movw	r24, r26
    6462:	30 e0       	ldi	r19, 0x00	; 0
    6464:	20 e0       	ldi	r18, 0x00	; 0
    6466:	44 e6       	ldi	r20, 0x64	; 100
    6468:	e4 0e       	add	r14, r20
    646a:	f1 1c       	adc	r15, r1
    646c:	f8 01       	movw	r30, r16
    646e:	f7 82       	std	Z+7, r15	; 0x07
    6470:	e6 82       	std	Z+6, r14	; 0x06
    6472:	91 87       	std	Z+9, r25	; 0x09
    6474:	80 87       	std	Z+8, r24	; 0x08
    6476:	25 5c       	subi	r18, 0xC5	; 197
    6478:	3f 4f       	sbci	r19, 0xFF	; 255
    647a:	82 17       	cp	r24, r18
    647c:	93 07       	cpc	r25, r19
    647e:	38 f5       	brcc	.+78     	; 0x64ce <gmtime_r+0x16e>
    6480:	6f e1       	ldi	r22, 0x1F	; 31
    6482:	70 e0       	ldi	r23, 0x00	; 0
    6484:	0e 94 66 d3 	call	0x1a6cc	; 0x1a6cc <__divmodhi4>
    6488:	dc 01       	movw	r26, r24
    648a:	f8 01       	movw	r30, r16
    648c:	65 83       	std	Z+5, r22	; 0x05
    648e:	a3 83       	std	Z+3, r26	; 0x03
    6490:	f8 01       	movw	r30, r16
    6492:	13 86       	std	Z+11, r1	; 0x0b
    6494:	12 86       	std	Z+10, r1	; 0x0a
    6496:	83 81       	ldd	r24, Z+3	; 0x03
    6498:	8f 5f       	subi	r24, 0xFF	; 255
    649a:	83 83       	std	Z+3, r24	; 0x03
    649c:	28 96       	adiw	r28, 0x08	; 8
    649e:	0f b6       	in	r0, 0x3f	; 63
    64a0:	f8 94       	cli
    64a2:	de bf       	out	0x3e, r29	; 62
    64a4:	0f be       	out	0x3f, r0	; 63
    64a6:	cd bf       	out	0x3d, r28	; 61
    64a8:	df 91       	pop	r29
    64aa:	cf 91       	pop	r28
    64ac:	1f 91       	pop	r17
    64ae:	0f 91       	pop	r16
    64b0:	ff 90       	pop	r15
    64b2:	ef 90       	pop	r14
    64b4:	df 90       	pop	r13
    64b6:	cf 90       	pop	r12
    64b8:	08 95       	ret
    64ba:	51 e0       	ldi	r21, 0x01	; 1
    64bc:	40 e0       	ldi	r20, 0x00	; 0
    64be:	24 e6       	ldi	r18, 0x64	; 100
    64c0:	e2 16       	cp	r14, r18
    64c2:	f1 04       	cpc	r15, r1
    64c4:	09 f4       	brne	.+2      	; 0x64c8 <gmtime_r+0x168>
    64c6:	50 e0       	ldi	r21, 0x00	; 0
    64c8:	25 2f       	mov	r18, r21
    64ca:	34 2f       	mov	r19, r20
    64cc:	ba cf       	rjmp	.-140    	; 0x6442 <gmtime_r+0xe2>
    64ce:	69 e9       	ldi	r22, 0x99	; 153
    64d0:	70 e0       	ldi	r23, 0x00	; 0
    64d2:	82 1b       	sub	r24, r18
    64d4:	93 0b       	sbc	r25, r19
    64d6:	0e 94 66 d3 	call	0x1a6cc	; 0x1a6cc <__divmodhi4>
    64da:	dc 01       	movw	r26, r24
    64dc:	26 2f       	mov	r18, r22
    64de:	22 0f       	add	r18, r18
    64e0:	22 0f       	add	r18, r18
    64e2:	f2 2e       	mov	r15, r18
    64e4:	f6 0e       	add	r15, r22
    64e6:	6d e3       	ldi	r22, 0x3D	; 61
    64e8:	70 e0       	ldi	r23, 0x00	; 0
    64ea:	cd 01       	movw	r24, r26
    64ec:	0e 94 66 d3 	call	0x1a6cc	; 0x1a6cc <__divmodhi4>
    64f0:	dc 01       	movw	r26, r24
    64f2:	e6 2e       	mov	r14, r22
    64f4:	ee 0c       	add	r14, r14
    64f6:	6f e1       	ldi	r22, 0x1F	; 31
    64f8:	70 e0       	ldi	r23, 0x00	; 0
    64fa:	cd 01       	movw	r24, r26
    64fc:	0e 94 66 d3 	call	0x1a6cc	; 0x1a6cc <__divmodhi4>
    6500:	dc 01       	movw	r26, r24
    6502:	22 e0       	ldi	r18, 0x02	; 2
    6504:	26 0f       	add	r18, r22
    6506:	2f 0d       	add	r18, r15
    6508:	2e 0d       	add	r18, r14
    650a:	f8 01       	movw	r30, r16
    650c:	25 83       	std	Z+5, r18	; 0x05
    650e:	bf cf       	rjmp	.-130    	; 0x648e <gmtime_r+0x12e>

00006510 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5382
{
  uint8_t mode = thermostat_ring_get_mode(default_ring);
  if (mode == TERM_MODE_PROG)
    return 1;
  return 0;
}
    6510:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
    6512:	86 81       	ldd	r24, Z+6	; 0x06
    6514:	97 81       	ldd	r25, Z+7	; 0x07
    6516:	68 0f       	add	r22, r24
    6518:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
    651a:	24 81       	ldd	r18, Z+4	; 0x04
    651c:	35 81       	ldd	r19, Z+5	; 0x05
    651e:	26 17       	cp	r18, r22
    6520:	37 07       	cpc	r19, r23
    6522:	38 f0       	brcs	.+14     	; 0x6532 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
    6524:	22 81       	ldd	r18, Z+2	; 0x02
    6526:	33 81       	ldd	r19, Z+3	; 0x03
    6528:	82 0f       	add	r24, r18
    652a:	93 1f       	adc	r25, r19
    652c:	77 83       	std	Z+7, r23	; 0x07
    652e:	66 83       	std	Z+6, r22	; 0x06
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
    6530:	08 95       	ret
    6532:	90 e0       	ldi	r25, 0x00	; 0
    6534:	80 e0       	ldi	r24, 0x00	; 0
    6536:	08 95       	ret

00006538 <returnnullfceargs(unsigned int, unsigned int, unsigned char)>:
_Z17returnnullfceargsjjh():
    6538:	80 e0       	ldi	r24, 0x00	; 0
    653a:	08 95       	ret

0000653c <display_enable_show(unsigned int, unsigned int, unsigned char)>:
_Z19display_enable_showjjh():
    653c:	81 e0       	ldi	r24, 0x01	; 1
    653e:	08 95       	ret

00006540 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhhPcS_():
    6540:	0f 93       	push	r16
    6542:	1f 93       	push	r17
    6544:	90 91 62 09 	lds	r25, 0x0962	; 0x800962 <dialog_set_string_keyboard_type>
    6548:	91 11       	cpse	r25, r1
    654a:	0c c0       	rjmp	.+24     	; 0x6564 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
    654c:	e8 2f       	mov	r30, r24
    654e:	f0 e0       	ldi	r31, 0x00	; 0
    6550:	e5 57       	subi	r30, 0x75	; 117
    6552:	fa 4a       	sbci	r31, 0xAA	; 170
    6554:	e4 91       	lpm	r30, Z
    6556:	d9 01       	movw	r26, r18
    6558:	ec 93       	st	X, r30
    655a:	f8 01       	movw	r30, r16
    655c:	10 82       	st	Z, r1
    655e:	1f 91       	pop	r17
    6560:	0f 91       	pop	r16
    6562:	08 95       	ret
    6564:	91 30       	cpi	r25, 0x01	; 1
    6566:	29 f4       	brne	.+10     	; 0x6572 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x32>
    6568:	e8 2f       	mov	r30, r24
    656a:	f0 e0       	ldi	r31, 0x00	; 0
    656c:	ef 58       	subi	r30, 0x8F	; 143
    656e:	fa 4a       	sbci	r31, 0xAA	; 170
    6570:	f1 cf       	rjmp	.-30     	; 0x6554 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
    6572:	92 30       	cpi	r25, 0x02	; 2
    6574:	81 f7       	brne	.-32     	; 0x6556 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
    6576:	e8 2f       	mov	r30, r24
    6578:	f0 e0       	ldi	r31, 0x00	; 0
    657a:	e9 5a       	subi	r30, 0xA9	; 169
    657c:	fa 4a       	sbci	r31, 0xAA	; 170
    657e:	ea cf       	rjmp	.-44     	; 0x6554 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>

00006580 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
    6580:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <dialog_set_string_keyboard_type>
    6584:	83 30       	cpi	r24, 0x03	; 3
    6586:	08 f0       	brcs	.+2      	; 0x658a <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    6588:	08 95       	ret
    658a:	8a e1       	ldi	r24, 0x1A	; 26
    658c:	08 95       	ret

0000658e <click_keyboard_type(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_typejjh():
    658e:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <dialog_set_string_keyboard_type>
    6592:	08 95       	ret

00006594 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>:
_Z19menu_redraw_time05sjjh():
    6594:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <menu_redraw05s>
    6598:	81 30       	cpi	r24, 0x01	; 1
    659a:	19 f4       	brne	.+6      	; 0x65a2 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0xe>
    659c:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <menu_redraw05s>
    65a0:	08 95       	ret
    65a2:	80 e0       	ldi	r24, 0x00	; 0
    65a4:	08 95       	ret

000065a6 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>:
_Z28menu_redraw_change_term_modejjh():
    65a6:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <change_term_mode>
    65aa:	81 30       	cpi	r24, 0x01	; 1
    65ac:	19 f4       	brne	.+6      	; 0x65b4 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)+0xe>
    65ae:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <change_term_mode>
    65b2:	08 95       	ret
    65b4:	80 e0       	ldi	r24, 0x00	; 0
    65b6:	08 95       	ret

000065b8 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>:
_Z23menu_redraw_update_tempjjh():
    65b8:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <menu_redraw10s>
    65bc:	81 30       	cpi	r24, 0x01	; 1
    65be:	19 f4       	brne	.+6      	; 0x65c6 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)+0xe>
    65c0:	10 92 5e 09 	sts	0x095E, r1	; 0x80095e <menu_redraw10s>
    65c4:	08 95       	ret
    65c6:	80 e0       	ldi	r24, 0x00	; 0
    65c8:	08 95       	ret

000065ca <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
    65ca:	83 30       	cpi	r24, 0x03	; 3
    65cc:	41 f4       	brne	.+16     	; 0x65de <a2d_complete(unsigned char, unsigned int)+0x14>
    65ce:	70 93 2b 0a 	sts	0x0A2B, r23	; 0x800a2b <proud+0x1>
    65d2:	60 93 2a 0a 	sts	0x0A2A, r22	; 0x800a2a <proud>
    65d6:	81 e0       	ldi	r24, 0x01	; 1
    65d8:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <a2d_run_now>
    65dc:	08 95       	ret
    65de:	86 30       	cpi	r24, 0x06	; 6
    65e0:	29 f4       	brne	.+10     	; 0x65ec <a2d_complete(unsigned char, unsigned int)+0x22>
    65e2:	70 93 31 0a 	sts	0x0A31, r23	; 0x800a31 <tritri+0x1>
    65e6:	60 93 30 0a 	sts	0x0A30, r22	; 0x800a30 <tritri>
    65ea:	f5 cf       	rjmp	.-22     	; 0x65d6 <a2d_complete(unsigned char, unsigned int)+0xc>
    65ec:	85 30       	cpi	r24, 0x05	; 5
    65ee:	29 f4       	brne	.+10     	; 0x65fa <a2d_complete(unsigned char, unsigned int)+0x30>
    65f0:	70 93 2f 0a 	sts	0x0A2F, r23	; 0x800a2f <petnula+0x1>
    65f4:	60 93 2e 0a 	sts	0x0A2E, r22	; 0x800a2e <petnula>
    65f8:	ee cf       	rjmp	.-36     	; 0x65d6 <a2d_complete(unsigned char, unsigned int)+0xc>
    65fa:	84 30       	cpi	r24, 0x04	; 4
    65fc:	29 f4       	brne	.+10     	; 0x6608 <a2d_complete(unsigned char, unsigned int)+0x3e>
    65fe:	70 93 2d 0a 	sts	0x0A2D, r23	; 0x800a2d <dvanact+0x1>
    6602:	60 93 2c 0a 	sts	0x0A2C, r22	; 0x800a2c <dvanact>
    6606:	e7 cf       	rjmp	.-50     	; 0x65d6 <a2d_complete(unsigned char, unsigned int)+0xc>
    6608:	87 30       	cpi	r24, 0x07	; 7
    660a:	29 f7       	brne	.-54     	; 0x65d6 <a2d_complete(unsigned char, unsigned int)+0xc>
    660c:	70 93 29 0a 	sts	0x0A29, r23	; 0x800a29 <light_curr+0x1>
    6610:	60 93 28 0a 	sts	0x0A28, r22	; 0x800a28 <light_curr>
    6614:	e0 cf       	rjmp	.-64     	; 0x65d6 <a2d_complete(unsigned char, unsigned int)+0xc>

00006616 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_incjjh():
    6616:	fc 01       	movw	r30, r24
    6618:	e3 50       	subi	r30, 0x03	; 3
    661a:	f6 4f       	sbci	r31, 0xF6	; 246
    661c:	90 81       	ld	r25, Z
    661e:	20 91 fc 09 	lds	r18, 0x09FC	; 0x8009fc <menu_slider_data_max>
    6622:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <menu_slider_data_max_element>
    6626:	28 1b       	sub	r18, r24
    6628:	33 0b       	sbc	r19, r19
    662a:	92 17       	cp	r25, r18
    662c:	13 06       	cpc	r1, r19
    662e:	14 f4       	brge	.+4      	; 0x6634 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)+0x1e>
    6630:	9f 5f       	subi	r25, 0xFF	; 255
    6632:	90 83       	st	Z, r25
    6634:	08 95       	ret

00006636 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_decjjh():
    6636:	fc 01       	movw	r30, r24
    6638:	e3 50       	subi	r30, 0x03	; 3
    663a:	f6 4f       	sbci	r31, 0xF6	; 246
    663c:	90 81       	ld	r25, Z
    663e:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <menu_slider_data_min>
    6642:	89 17       	cp	r24, r25
    6644:	10 f4       	brcc	.+4      	; 0x664a <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)+0x14>
    6646:	91 50       	subi	r25, 0x01	; 1
    6648:	90 83       	st	Z, r25
    664a:	08 95       	ret

0000664c <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
    664c:	8a e0       	ldi	r24, 0x0A	; 10
    664e:	08 95       	ret

00006650 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
    6650:	e6 e3       	ldi	r30, 0x36	; 54
    6652:	ff e0       	ldi	r31, 0x0F	; 15
    6654:	80 e0       	ldi	r24, 0x00	; 0
    6656:	91 85       	ldd	r25, Z+9	; 0x09
    6658:	91 30       	cpi	r25, 0x01	; 1
    665a:	09 f4       	brne	.+2      	; 0x665e <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    665c:	8f 5f       	subi	r24, 0xFF	; 255
    665e:	3b 96       	adiw	r30, 0x0b	; 11
    6660:	9f e0       	ldi	r25, 0x0F	; 15
    6662:	e8 37       	cpi	r30, 0x78	; 120
    6664:	f9 07       	cpc	r31, r25
    6666:	b9 f7       	brne	.-18     	; 0x6656 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
    6668:	08 95       	ret

0000666a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z38button_get_show_default_temp_max_itemsjjh():
    666a:	00 97       	sbiw	r24, 0x00	; 0
    666c:	31 f4       	brne	.+12     	; 0x667a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x10>
    666e:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <use_tds>
    6672:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <use_rtds>
    6676:	89 0f       	add	r24, r25
    6678:	08 95       	ret
    667a:	01 97       	sbiw	r24, 0x01	; 1
    667c:	09 f0       	breq	.+2      	; 0x6680 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x16>
    667e:	08 95       	ret
    6680:	80 e1       	ldi	r24, 0x10	; 16
    6682:	08 95       	ret

00006684 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z35button_get_show_default_temp_activejjh():
    6684:	81 e0       	ldi	r24, 0x01	; 1
    6686:	90 91 11 0a 	lds	r25, 0x0A11	; 0x800a11 <default_show_temp>
    668a:	94 13       	cpse	r25, r20
    668c:	80 e0       	ldi	r24, 0x00	; 0
    668e:	08 95       	ret

00006690 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z25display_element_rectanglejjjjhhPc():
    6690:	0f 93       	push	r16
    6692:	1f 93       	push	r17
    6694:	8b 01       	movw	r16, r22
    6696:	02 0f       	add	r16, r18
    6698:	13 1f       	adc	r17, r19
    669a:	9c 01       	movw	r18, r24
    669c:	24 0f       	add	r18, r20
    669e:	35 1f       	adc	r19, r21
    66a0:	ab 01       	movw	r20, r22
    66a2:	bc 01       	movw	r22, r24
    66a4:	89 e8       	ldi	r24, 0x89	; 137
    66a6:	9b e0       	ldi	r25, 0x0B	; 11
    66a8:	0e 94 44 8e 	call	0x11c88	; 0x11c88 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    66ac:	1f 91       	pop	r17
    66ae:	0f 91       	pop	r16
    66b0:	08 95       	ret

000066b2 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z31display_element_vertical_sliderjjjjhhPc():
    66b2:	3f 92       	push	r3
    66b4:	4f 92       	push	r4
    66b6:	5f 92       	push	r5
    66b8:	6f 92       	push	r6
    66ba:	7f 92       	push	r7
    66bc:	8f 92       	push	r8
    66be:	9f 92       	push	r9
    66c0:	af 92       	push	r10
    66c2:	bf 92       	push	r11
    66c4:	cf 92       	push	r12
    66c6:	df 92       	push	r13
    66c8:	ef 92       	push	r14
    66ca:	ff 92       	push	r15
    66cc:	0f 93       	push	r16
    66ce:	1f 93       	push	r17
    66d0:	cf 93       	push	r28
    66d2:	df 93       	push	r29
    66d4:	3c 01       	movw	r6, r24
    66d6:	6b 01       	movw	r12, r22
    66d8:	ea 01       	movw	r28, r20
    66da:	29 01       	movw	r4, r18
    66dc:	30 2e       	mov	r3, r16
    66de:	70 e0       	ldi	r23, 0x00	; 0
    66e0:	60 e0       	ldi	r22, 0x00	; 0
    66e2:	89 e8       	ldi	r24, 0x89	; 137
    66e4:	9b e0       	ldi	r25, 0x0B	; 11
    66e6:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    66ea:	f1 2c       	mov	r15, r1
    66ec:	e1 2c       	mov	r14, r1
    66ee:	46 01       	movw	r8, r12
    66f0:	84 0c       	add	r8, r4
    66f2:	95 1c       	adc	r9, r5
    66f4:	53 01       	movw	r10, r6
    66f6:	ac 0e       	add	r10, r28
    66f8:	bd 1e       	adc	r11, r29
    66fa:	84 01       	movw	r16, r8
    66fc:	0e 19       	sub	r16, r14
    66fe:	1f 09       	sbc	r17, r15
    6700:	95 01       	movw	r18, r10
    6702:	2e 19       	sub	r18, r14
    6704:	3f 09       	sbc	r19, r15
    6706:	a7 01       	movw	r20, r14
    6708:	4c 0d       	add	r20, r12
    670a:	5d 1d       	adc	r21, r13
    670c:	b7 01       	movw	r22, r14
    670e:	66 0d       	add	r22, r6
    6710:	77 1d       	adc	r23, r7
    6712:	89 e8       	ldi	r24, 0x89	; 137
    6714:	9b e0       	ldi	r25, 0x0B	; 11
    6716:	0e 94 44 8e 	call	0x11c88	; 0x11c88 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    671a:	8f ef       	ldi	r24, 0xFF	; 255
    671c:	e8 1a       	sub	r14, r24
    671e:	f8 0a       	sbc	r15, r24
    6720:	83 e0       	ldi	r24, 0x03	; 3
    6722:	e8 16       	cp	r14, r24
    6724:	f1 04       	cpc	r15, r1
    6726:	49 f7       	brne	.-46     	; 0x66fa <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x48>
    6728:	6f ef       	ldi	r22, 0xFF	; 255
    672a:	7f ef       	ldi	r23, 0xFF	; 255
    672c:	89 e8       	ldi	r24, 0x89	; 137
    672e:	9b e0       	ldi	r25, 0x0B	; 11
    6730:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    6734:	23 97       	sbiw	r28, 0x03	; 3
    6736:	c6 0d       	add	r28, r6
    6738:	d7 1d       	adc	r29, r7
    673a:	83 e0       	ldi	r24, 0x03	; 3
    673c:	68 0e       	add	r6, r24
    673e:	71 1c       	adc	r7, r1
    6740:	82 01       	movw	r16, r4
    6742:	03 50       	subi	r16, 0x03	; 3
    6744:	11 09       	sbc	r17, r1
    6746:	0c 0d       	add	r16, r12
    6748:	1d 1d       	adc	r17, r13
    674a:	a6 01       	movw	r20, r12
    674c:	4d 5f       	subi	r20, 0xFD	; 253
    674e:	5f 4f       	sbci	r21, 0xFF	; 255
    6750:	9e 01       	movw	r18, r28
    6752:	b3 01       	movw	r22, r6
    6754:	89 e8       	ldi	r24, 0x89	; 137
    6756:	9b e0       	ldi	r25, 0x0B	; 11
    6758:	0e 94 bd 8d 	call	0x11b7a	; 0x11b7a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    675c:	60 91 fc 09 	lds	r22, 0x09FC	; 0x8009fc <menu_slider_data_max>
    6760:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <menu_slider_data_max_element>
    6764:	68 1b       	sub	r22, r24
    6766:	77 0b       	sbc	r23, r23
    6768:	6f 5f       	subi	r22, 0xFF	; 255
    676a:	7f 4f       	sbci	r23, 0xFF	; 255
    676c:	c2 01       	movw	r24, r4
    676e:	0e 94 52 d3 	call	0x1a6a4	; 0x1a6a4 <__udivmodhi4>
    6772:	e3 2d       	mov	r30, r3
    6774:	f0 e0       	ldi	r31, 0x00	; 0
    6776:	e3 50       	subi	r30, 0x03	; 3
    6778:	f6 4f       	sbci	r31, 0xF6	; 246
    677a:	f0 80       	ld	r15, Z
    677c:	f6 9e       	mul	r15, r22
    677e:	f0 2c       	mov	r15, r0
    6780:	11 24       	eor	r1, r1
    6782:	6a e9       	ldi	r22, 0x9A	; 154
    6784:	76 ed       	ldi	r23, 0xD6	; 214
    6786:	89 e8       	ldi	r24, 0x89	; 137
    6788:	9b e0       	ldi	r25, 0x0B	; 11
    678a:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    678e:	cf 0c       	add	r12, r15
    6790:	d1 1c       	adc	r13, r1
    6792:	86 01       	movw	r16, r12
    6794:	06 5f       	subi	r16, 0xF6	; 246
    6796:	1f 4f       	sbci	r17, 0xFF	; 255
    6798:	a6 01       	movw	r20, r12
    679a:	4b 5f       	subi	r20, 0xFB	; 251
    679c:	5f 4f       	sbci	r21, 0xFF	; 255
    679e:	9e 01       	movw	r18, r28
    67a0:	b3 01       	movw	r22, r6
    67a2:	89 e8       	ldi	r24, 0x89	; 137
    67a4:	9b e0       	ldi	r25, 0x0B	; 11
    67a6:	0e 94 bd 8d 	call	0x11b7a	; 0x11b7a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    67aa:	df 91       	pop	r29
    67ac:	cf 91       	pop	r28
    67ae:	1f 91       	pop	r17
    67b0:	0f 91       	pop	r16
    67b2:	ff 90       	pop	r15
    67b4:	ef 90       	pop	r14
    67b6:	df 90       	pop	r13
    67b8:	cf 90       	pop	r12
    67ba:	bf 90       	pop	r11
    67bc:	af 90       	pop	r10
    67be:	9f 90       	pop	r9
    67c0:	8f 90       	pop	r8
    67c2:	7f 90       	pop	r7
    67c4:	6f 90       	pop	r6
    67c6:	5f 90       	pop	r5
    67c8:	4f 90       	pop	r4
    67ca:	3f 90       	pop	r3
    67cc:	08 95       	ret

000067ce <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>:
_Z35display_function_set_variable_minusjjh():
    67ce:	cf 92       	push	r12
    67d0:	df 92       	push	r13
    67d2:	ef 92       	push	r14
    67d4:	ff 92       	push	r15
    67d6:	0f 93       	push	r16
    67d8:	1f 93       	push	r17
    67da:	cf 93       	push	r28
    67dc:	df 93       	push	r29
    67de:	25 e1       	ldi	r18, 0x15	; 21
    67e0:	28 9f       	mul	r18, r24
    67e2:	e0 01       	movw	r28, r0
    67e4:	29 9f       	mul	r18, r25
    67e6:	d0 0d       	add	r29, r0
    67e8:	11 24       	eor	r1, r1
    67ea:	ca 55       	subi	r28, 0x5A	; 90
    67ec:	d6 4f       	sbci	r29, 0xF6	; 246
    67ee:	2e 85       	ldd	r18, Y+14	; 0x0e
    67f0:	3f 85       	ldd	r19, Y+15	; 0x0f
    67f2:	48 89       	ldd	r20, Y+16	; 0x10
    67f4:	59 89       	ldd	r21, Y+17	; 0x11
    67f6:	68 81       	ld	r22, Y
    67f8:	79 81       	ldd	r23, Y+1	; 0x01
    67fa:	8a 81       	ldd	r24, Y+2	; 0x02
    67fc:	9b 81       	ldd	r25, Y+3	; 0x03
    67fe:	0e 94 f8 d0 	call	0x1a1f0	; 0x1a1f0 <__subsf3>
    6802:	6b 01       	movw	r12, r22
    6804:	7c 01       	movw	r14, r24
    6806:	28 85       	ldd	r18, Y+8	; 0x08
    6808:	39 85       	ldd	r19, Y+9	; 0x09
    680a:	4a 85       	ldd	r20, Y+10	; 0x0a
    680c:	5b 85       	ldd	r21, Y+11	; 0x0b
    680e:	0e 94 c4 d2 	call	0x1a588	; 0x1a588 <__gesf2>
    6812:	87 fd       	sbrc	r24, 7
    6814:	1f c0       	rjmp	.+62     	; 0x6854 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x86>
    6816:	c8 82       	st	Y, r12
    6818:	d9 82       	std	Y+1, r13	; 0x01
    681a:	ea 82       	std	Y+2, r14	; 0x02
    681c:	fb 82       	std	Y+3, r15	; 0x03
    681e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6820:	81 30       	cpi	r24, 0x01	; 1
    6822:	c1 f4       	brne	.+48     	; 0x6854 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x86>
    6824:	0b 89       	ldd	r16, Y+19	; 0x13
    6826:	1c 89       	ldd	r17, Y+20	; 0x14
    6828:	c7 01       	movw	r24, r14
    682a:	b6 01       	movw	r22, r12
    682c:	0e 94 7a b3 	call	0x166f4	; 0x166f4 <float_to_int(float)>
    6830:	48 81       	ld	r20, Y
    6832:	59 81       	ldd	r21, Y+1	; 0x01
    6834:	6a 81       	ldd	r22, Y+2	; 0x02
    6836:	7b 81       	ldd	r23, Y+3	; 0x03
    6838:	9a 89       	ldd	r25, Y+18	; 0x12
    683a:	28 2f       	mov	r18, r24
    683c:	89 2f       	mov	r24, r25
    683e:	90 e0       	ldi	r25, 0x00	; 0
    6840:	f8 01       	movw	r30, r16
    6842:	df 91       	pop	r29
    6844:	cf 91       	pop	r28
    6846:	1f 91       	pop	r17
    6848:	0f 91       	pop	r16
    684a:	ff 90       	pop	r15
    684c:	ef 90       	pop	r14
    684e:	df 90       	pop	r13
    6850:	cf 90       	pop	r12
    6852:	19 94       	eijmp
    6854:	df 91       	pop	r29
    6856:	cf 91       	pop	r28
    6858:	1f 91       	pop	r17
    685a:	0f 91       	pop	r16
    685c:	ff 90       	pop	r15
    685e:	ef 90       	pop	r14
    6860:	df 90       	pop	r13
    6862:	cf 90       	pop	r12
    6864:	08 95       	ret

00006866 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>:
_Z34display_function_set_variable_plusjjh():
    6866:	cf 92       	push	r12
    6868:	df 92       	push	r13
    686a:	ef 92       	push	r14
    686c:	ff 92       	push	r15
    686e:	0f 93       	push	r16
    6870:	1f 93       	push	r17
    6872:	cf 93       	push	r28
    6874:	df 93       	push	r29
    6876:	25 e1       	ldi	r18, 0x15	; 21
    6878:	28 9f       	mul	r18, r24
    687a:	e0 01       	movw	r28, r0
    687c:	29 9f       	mul	r18, r25
    687e:	d0 0d       	add	r29, r0
    6880:	11 24       	eor	r1, r1
    6882:	ca 55       	subi	r28, 0x5A	; 90
    6884:	d6 4f       	sbci	r29, 0xF6	; 246
    6886:	2e 85       	ldd	r18, Y+14	; 0x0e
    6888:	3f 85       	ldd	r19, Y+15	; 0x0f
    688a:	48 89       	ldd	r20, Y+16	; 0x10
    688c:	59 89       	ldd	r21, Y+17	; 0x11
    688e:	68 81       	ld	r22, Y
    6890:	79 81       	ldd	r23, Y+1	; 0x01
    6892:	8a 81       	ldd	r24, Y+2	; 0x02
    6894:	9b 81       	ldd	r25, Y+3	; 0x03
    6896:	0e 94 f9 d0 	call	0x1a1f2	; 0x1a1f2 <__addsf3>
    689a:	6b 01       	movw	r12, r22
    689c:	7c 01       	movw	r14, r24
    689e:	2c 81       	ldd	r18, Y+4	; 0x04
    68a0:	3d 81       	ldd	r19, Y+5	; 0x05
    68a2:	4e 81       	ldd	r20, Y+6	; 0x06
    68a4:	5f 81       	ldd	r21, Y+7	; 0x07
    68a6:	0e 94 65 d1 	call	0x1a2ca	; 0x1a2ca <__cmpsf2>
    68aa:	18 16       	cp	r1, r24
    68ac:	fc f0       	brlt	.+62     	; 0x68ec <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x86>
    68ae:	c8 82       	st	Y, r12
    68b0:	d9 82       	std	Y+1, r13	; 0x01
    68b2:	ea 82       	std	Y+2, r14	; 0x02
    68b4:	fb 82       	std	Y+3, r15	; 0x03
    68b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    68b8:	81 30       	cpi	r24, 0x01	; 1
    68ba:	c1 f4       	brne	.+48     	; 0x68ec <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x86>
    68bc:	0b 89       	ldd	r16, Y+19	; 0x13
    68be:	1c 89       	ldd	r17, Y+20	; 0x14
    68c0:	c7 01       	movw	r24, r14
    68c2:	b6 01       	movw	r22, r12
    68c4:	0e 94 7a b3 	call	0x166f4	; 0x166f4 <float_to_int(float)>
    68c8:	48 81       	ld	r20, Y
    68ca:	59 81       	ldd	r21, Y+1	; 0x01
    68cc:	6a 81       	ldd	r22, Y+2	; 0x02
    68ce:	7b 81       	ldd	r23, Y+3	; 0x03
    68d0:	9a 89       	ldd	r25, Y+18	; 0x12
    68d2:	28 2f       	mov	r18, r24
    68d4:	89 2f       	mov	r24, r25
    68d6:	90 e0       	ldi	r25, 0x00	; 0
    68d8:	f8 01       	movw	r30, r16
    68da:	df 91       	pop	r29
    68dc:	cf 91       	pop	r28
    68de:	1f 91       	pop	r17
    68e0:	0f 91       	pop	r16
    68e2:	ff 90       	pop	r15
    68e4:	ef 90       	pop	r14
    68e6:	df 90       	pop	r13
    68e8:	cf 90       	pop	r12
    68ea:	19 94       	eijmp
    68ec:	df 91       	pop	r29
    68ee:	cf 91       	pop	r28
    68f0:	1f 91       	pop	r17
    68f2:	0f 91       	pop	r16
    68f4:	ff 90       	pop	r15
    68f6:	ef 90       	pop	r14
    68f8:	df 90       	pop	r13
    68fa:	cf 90       	pop	r12
    68fc:	08 95       	ret

000068fe <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>:
_Z35display_element_set_string_del_charjjh():
    68fe:	85 e6       	ldi	r24, 0x65	; 101
    6900:	99 e0       	ldi	r25, 0x09	; 9
    6902:	fc 01       	movw	r30, r24
    6904:	01 90       	ld	r0, Z+
    6906:	00 20       	and	r0, r0
    6908:	e9 f7       	brne	.-6      	; 0x6904 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x6>
    690a:	cf 01       	movw	r24, r30
    690c:	86 56       	subi	r24, 0x66	; 102
    690e:	99 40       	sbci	r25, 0x09	; 9
    6910:	88 23       	and	r24, r24
    6912:	29 f0       	breq	.+10     	; 0x691e <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x20>
    6914:	99 27       	eor	r25, r25
    6916:	fc 01       	movw	r30, r24
    6918:	ec 59       	subi	r30, 0x9C	; 156
    691a:	f6 4f       	sbci	r31, 0xF6	; 246
    691c:	10 82       	st	Z, r1
    691e:	08 95       	ret

00006920 <menu_tds_save_offset(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_offsetjfh():
    6920:	cf 93       	push	r28
    6922:	df 93       	push	r29
_Z29display_function_get_variableh():
    6924:	95 e1       	ldi	r25, 0x15	; 21
    6926:	89 9f       	mul	r24, r25
    6928:	e0 01       	movw	r28, r0
    692a:	11 24       	eor	r1, r1
    692c:	ca 55       	subi	r28, 0x5A	; 90
    692e:	d6 4f       	sbci	r29, 0xF6	; 246
_Z20menu_tds_save_offsetjfh():
    6930:	20 e0       	ldi	r18, 0x00	; 0
    6932:	30 e0       	ldi	r19, 0x00	; 0
    6934:	4a e7       	ldi	r20, 0x7A	; 122
    6936:	54 e4       	ldi	r21, 0x44	; 68
    6938:	68 81       	ld	r22, Y
    693a:	79 81       	ldd	r23, Y+1	; 0x01
    693c:	8a 81       	ldd	r24, Y+2	; 0x02
    693e:	9b 81       	ldd	r25, Y+3	; 0x03
    6940:	0e 94 c9 d2 	call	0x1a592	; 0x1a592 <__mulsf3>
    6944:	0e 94 dc d1 	call	0x1a3b8	; 0x1a3b8 <__fixsfsi>
    6948:	8a 89       	ldd	r24, Y+18	; 0x12
    694a:	df 91       	pop	r29
    694c:	cf 91       	pop	r28
    694e:	0c 94 6e 84 	jmp	0x108dc	; 0x108dc <tds_set_offset(unsigned char, int)>

00006952 <menu_tds_save_period(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_periodjfh():
    6952:	cf 93       	push	r28
    6954:	df 93       	push	r29
_Z29display_function_get_variableh():
    6956:	95 e1       	ldi	r25, 0x15	; 21
    6958:	89 9f       	mul	r24, r25
    695a:	e0 01       	movw	r28, r0
    695c:	11 24       	eor	r1, r1
    695e:	ca 55       	subi	r28, 0x5A	; 90
    6960:	d6 4f       	sbci	r29, 0xF6	; 246
_Z20menu_tds_save_periodjfh():
    6962:	68 81       	ld	r22, Y
    6964:	79 81       	ldd	r23, Y+1	; 0x01
    6966:	8a 81       	ldd	r24, Y+2	; 0x02
    6968:	9b 81       	ldd	r25, Y+3	; 0x03
    696a:	0e 94 e3 d1 	call	0x1a3c6	; 0x1a3c6 <__fixunssfsi>
    696e:	8a 89       	ldd	r24, Y+18	; 0x12
    6970:	df 91       	pop	r29
    6972:	cf 91       	pop	r28
    6974:	0c 94 b0 84 	jmp	0x10960	; 0x10960 <tds_set_period(unsigned char, unsigned char)>

00006978 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>:
_Z20helper_tds_associatejjh():
    6978:	0c 94 c5 85 	jmp	0x10b8a	; 0x10b8a <tds_associate(unsigned char)>

0000697c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
    697c:	7f 92       	push	r7
    697e:	8f 92       	push	r8
    6980:	9f 92       	push	r9
    6982:	af 92       	push	r10
    6984:	bf 92       	push	r11
    6986:	cf 92       	push	r12
    6988:	df 92       	push	r13
    698a:	ef 92       	push	r14
    698c:	ff 92       	push	r15
    698e:	0f 93       	push	r16
    6990:	1f 93       	push	r17
    6992:	cf 93       	push	r28
    6994:	df 93       	push	r29
    6996:	cd b7       	in	r28, 0x3d	; 61
    6998:	de b7       	in	r29, 0x3e	; 62
    699a:	6a 97       	sbiw	r28, 0x1a	; 26
    699c:	0f b6       	in	r0, 0x3f	; 63
    699e:	f8 94       	cli
    69a0:	de bf       	out	0x3e, r29	; 62
    69a2:	0f be       	out	0x3f, r0	; 63
    69a4:	cd bf       	out	0x3d, r28	; 61
    69a6:	98 2e       	mov	r9, r24
    69a8:	82 2e       	mov	r8, r18
    69aa:	73 2e       	mov	r7, r19
    69ac:	78 01       	movw	r14, r16
    69ae:	62 e5       	ldi	r22, 0x52	; 82
    69b0:	77 e5       	ldi	r23, 0x57	; 87
    69b2:	82 2f       	mov	r24, r18
    69b4:	93 2f       	mov	r25, r19
    69b6:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    69ba:	60 e1       	ldi	r22, 0x10	; 16
    69bc:	73 e0       	ldi	r23, 0x03	; 3
    69be:	c8 01       	movw	r24, r16
    69c0:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    69c4:	4b e0       	ldi	r20, 0x0B	; 11
    69c6:	49 9d       	mul	r20, r9
    69c8:	c0 01       	movw	r24, r0
    69ca:	11 24       	eor	r1, r1
    69cc:	9c 01       	movw	r18, r24
    69ce:	2a 5c       	subi	r18, 0xCA	; 202
    69d0:	30 4f       	sbci	r19, 0xF0	; 240
    69d2:	69 01       	movw	r12, r18
    69d4:	f9 01       	movw	r30, r18
    69d6:	81 85       	ldd	r24, Z+9	; 0x09
    69d8:	81 30       	cpi	r24, 0x01	; 1
    69da:	89 f5       	brne	.+98     	; 0x6a3e <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>
    69dc:	a9 01       	movw	r20, r18
    69de:	00 e1       	ldi	r16, 0x10	; 16
    69e0:	28 e0       	ldi	r18, 0x08	; 8
    69e2:	6a e3       	ldi	r22, 0x3A	; 58
    69e4:	ce 01       	movw	r24, r28
    69e6:	01 96       	adiw	r24, 0x01	; 1
    69e8:	5c 01       	movw	r10, r24
    69ea:	0e 94 ba b3 	call	0x16774	; 0x16774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    69ee:	bf 92       	push	r11
    69f0:	af 92       	push	r10
    69f2:	1f 92       	push	r1
    69f4:	9f 92       	push	r9
    69f6:	82 e9       	ldi	r24, 0x92	; 146
    69f8:	92 e0       	ldi	r25, 0x02	; 2
    69fa:	9f 93       	push	r25
    69fc:	8f 93       	push	r24
    69fe:	7f 92       	push	r7
    6a00:	8f 92       	push	r8
    6a02:	0e 94 a6 d8 	call	0x1b14c	; 0x1b14c <sprintf>
    6a06:	0f b6       	in	r0, 0x3f	; 63
    6a08:	f8 94       	cli
    6a0a:	de bf       	out	0x3e, r29	; 62
    6a0c:	0f be       	out	0x3f, r0	; 63
    6a0e:	cd bf       	out	0x3d, r28	; 61
    6a10:	f6 01       	movw	r30, r12
    6a12:	82 85       	ldd	r24, Z+10	; 0x0a
    6a14:	8f 3f       	cpi	r24, 0xFF	; 255
    6a16:	39 f1       	breq	.+78     	; 0x6a66 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xea>
    6a18:	61 e6       	ldi	r22, 0x61	; 97
    6a1a:	77 e5       	ldi	r23, 0x57	; 87
    6a1c:	c7 01       	movw	r24, r14
    6a1e:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    6a22:	b5 01       	movw	r22, r10
    6a24:	f6 01       	movw	r30, r12
    6a26:	82 85       	ldd	r24, Z+10	; 0x0a
    6a28:	0e 94 20 84 	call	0x10840	; 0x10840 <tds_get_name(unsigned char, char*)>
    6a2c:	67 e6       	ldi	r22, 0x67	; 103
    6a2e:	77 e0       	ldi	r23, 0x07	; 7
    6a30:	c7 01       	movw	r24, r14
    6a32:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    6a36:	b5 01       	movw	r22, r10
    6a38:	c7 01       	movw	r24, r14
    6a3a:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    6a3e:	6a 96       	adiw	r28, 0x1a	; 26
    6a40:	0f b6       	in	r0, 0x3f	; 63
    6a42:	f8 94       	cli
    6a44:	de bf       	out	0x3e, r29	; 62
    6a46:	0f be       	out	0x3f, r0	; 63
    6a48:	cd bf       	out	0x3d, r28	; 61
    6a4a:	df 91       	pop	r29
    6a4c:	cf 91       	pop	r28
    6a4e:	1f 91       	pop	r17
    6a50:	0f 91       	pop	r16
    6a52:	ff 90       	pop	r15
    6a54:	ef 90       	pop	r14
    6a56:	df 90       	pop	r13
    6a58:	cf 90       	pop	r12
    6a5a:	bf 90       	pop	r11
    6a5c:	af 90       	pop	r10
    6a5e:	9f 90       	pop	r9
    6a60:	8f 90       	pop	r8
    6a62:	7f 90       	pop	r7
    6a64:	08 95       	ret
    6a66:	64 e7       	ldi	r22, 0x74	; 116
    6a68:	77 e5       	ldi	r23, 0x57	; 87
    6a6a:	c7 01       	movw	r24, r14
    6a6c:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    6a70:	e6 cf       	rjmp	.-52     	; 0x6a3e <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>

00006a72 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_default_term_set_modejjh():
    6a72:	cf 93       	push	r28
    6a74:	c8 2f       	mov	r28, r24
    6a76:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <default_ring>
    6a7a:	0e 94 1d 89 	call	0x1123a	; 0x1123a <thermostat_ring_get_active(unsigned char)>
    6a7e:	8f 3f       	cpi	r24, 0xFF	; 255
    6a80:	41 f0       	breq	.+16     	; 0x6a92 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
    6a82:	6c 2f       	mov	r22, r28
    6a84:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <default_ring>
    6a88:	0e 94 89 89 	call	0x11312	; 0x11312 <thermostat_ring_set_mode(unsigned char, unsigned char)>
    6a8c:	81 e0       	ldi	r24, 0x01	; 1
    6a8e:	80 93 5d 09 	sts	0x095D, r24	; 0x80095d <change_term_mode>
    6a92:	cf 91       	pop	r28
    6a94:	08 95       	ret

00006a96 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>:
_Z40button_status_default_ring_term_has_modejjh():
    6a96:	cf 93       	push	r28
    6a98:	c8 2f       	mov	r28, r24
    6a9a:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <default_ring>
    6a9e:	0e 94 1d 89 	call	0x1123a	; 0x1123a <thermostat_ring_get_active(unsigned char)>
    6aa2:	8f 3f       	cpi	r24, 0xFF	; 255
    6aa4:	31 f0       	breq	.+12     	; 0x6ab2 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x1c>
    6aa6:	6c 2f       	mov	r22, r28
    6aa8:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <default_ring>
    6aac:	cf 91       	pop	r28
    6aae:	0c 94 91 89 	jmp	0x11322	; 0x11322 <thermostat_ring_get_mode_1(unsigned char, unsigned char)>
    6ab2:	80 e0       	ldi	r24, 0x00	; 0
    6ab4:	cf 91       	pop	r28
    6ab6:	08 95       	ret

00006ab8 <EEPROMClass::write(int, unsigned char) [clone .isra.4]>:
_ZN5EERefaSEh():
    6ab8:	0c 94 81 df 	jmp	0x1bf02	; 0x1bf02 <eeprom_write_byte>

00006abc <click_button_default_value(unsigned int, unsigned int, unsigned char)>:
_Z26click_button_default_valuejjh():
    6abc:	6f ef       	ldi	r22, 0xFF	; 255
    6abe:	8a e5       	ldi	r24, 0x5A	; 90
    6ac0:	90 e0       	ldi	r25, 0x00	; 0
    6ac2:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <EEPROMClass::write(int, unsigned char) [clone .isra.4]>
    6ac6:	e0 91 44 09 	lds	r30, 0x0944	; 0x800944 <resetFunc>
    6aca:	f0 91 45 09 	lds	r31, 0x0945	; 0x800945 <resetFunc+0x1>
    6ace:	19 94       	eijmp

00006ad0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    6ad0:	0f 93       	push	r16
    6ad2:	1f 93       	push	r17
    6ad4:	cf 93       	push	r28
    6ad6:	df 93       	push	r29
    6ad8:	00 97       	sbiw	r24, 0x00	; 0
    6ada:	01 f1       	breq	.+64     	; 0x6b1c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]+0x4c>
    6adc:	8b 01       	movw	r16, r22
    6ade:	fc 01       	movw	r30, r24
    6ae0:	c0 81       	ld	r28, Z
    6ae2:	d1 81       	ldd	r29, Z+1	; 0x01
    6ae4:	20 97       	sbiw	r28, 0x00	; 0
    6ae6:	d1 f0       	breq	.+52     	; 0x6b1c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]+0x4c>
    6ae8:	6a 85       	ldd	r22, Y+10	; 0x0a
    6aea:	7b 85       	ldd	r23, Y+11	; 0x0b
_ZNK11ArduinoJson9Internals23ZeroTerminatedRamString6equalsEPKc():
    6aec:	01 15       	cp	r16, r1
    6aee:	11 05       	cpc	r17, r1
    6af0:	19 f0       	breq	.+6      	; 0x6af8 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]+0x28>
    6af2:	61 15       	cp	r22, r1
    6af4:	71 05       	cpc	r23, r1
    6af6:	49 f4       	brne	.+18     	; 0x6b0a <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]+0x3a>
    6af8:	06 17       	cp	r16, r22
    6afa:	17 07       	cpc	r17, r23
    6afc:	59 f4       	brne	.+22     	; 0x6b14 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    6afe:	ce 01       	movw	r24, r28
    6b00:	df 91       	pop	r29
    6b02:	cf 91       	pop	r28
    6b04:	1f 91       	pop	r17
    6b06:	0f 91       	pop	r16
    6b08:	08 95       	ret
_ZNK11ArduinoJson9Internals23ZeroTerminatedRamString6equalsEPKc():
    6b0a:	c8 01       	movw	r24, r16
    6b0c:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    6b10:	89 2b       	or	r24, r25
    6b12:	a9 f3       	breq	.-22     	; 0x6afe <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    6b14:	0e 80       	ldd	r0, Y+6	; 0x06
    6b16:	df 81       	ldd	r29, Y+7	; 0x07
    6b18:	c0 2d       	mov	r28, r0
    6b1a:	e4 cf       	rjmp	.-56     	; 0x6ae4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]+0x14>
    6b1c:	d0 e0       	ldi	r29, 0x00	; 0
    6b1e:	c0 e0       	ldi	r28, 0x00	; 0
    6b20:	ee cf       	rjmp	.-36     	; 0x6afe <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]+0x2e>

00006b22 <nullfce(unsigned int, unsigned int, unsigned char)>:
_Z7nullfcejjh():
    6b22:	08 95       	ret

00006b24 <ArduinoJson::JsonArray::add()>:
_ZN11ArduinoJson9JsonArray3addEv():
    6b24:	0f 93       	push	r16
    6b26:	1f 93       	push	r17
    6b28:	cf 93       	push	r28
    6b2a:	df 93       	push	r29
    6b2c:	dc 01       	movw	r26, r24
    6b2e:	12 96       	adiw	r26, 0x02	; 2
    6b30:	2d 91       	ld	r18, X+
    6b32:	3c 91       	ld	r19, X
    6b34:	23 2b       	or	r18, r19
    6b36:	41 f4       	brne	.+16     	; 0x6b48 <ArduinoJson::JsonArray::add()+0x24>
    6b38:	60 e0       	ldi	r22, 0x00	; 0
    6b3a:	70 e0       	ldi	r23, 0x00	; 0
    6b3c:	cb 01       	movw	r24, r22
    6b3e:	df 91       	pop	r29
    6b40:	cf 91       	pop	r28
    6b42:	1f 91       	pop	r17
    6b44:	0f 91       	pop	r16
    6b46:	08 95       	ret
    6b48:	8c 01       	movw	r16, r24
    6b4a:	ec 01       	movw	r28, r24
    6b4c:	88 81       	ld	r24, Y
    6b4e:	99 81       	ldd	r25, Y+1	; 0x01
_ZN11ArduinoJson9Internals21AllocableInMemoryPoolnwEjPNS0_10MemoryPoolE():
    6b50:	dc 01       	movw	r26, r24
    6b52:	ed 91       	ld	r30, X+
    6b54:	fc 91       	ld	r31, X
    6b56:	01 90       	ld	r0, Z+
    6b58:	f0 81       	ld	r31, Z
    6b5a:	e0 2d       	mov	r30, r0
    6b5c:	6c e0       	ldi	r22, 0x0C	; 12
    6b5e:	70 e0       	ldi	r23, 0x00	; 0
    6b60:	19 95       	eicall
    6b62:	fc 01       	movw	r30, r24
_ZN11ArduinoJson9JsonArray3addEv():
    6b64:	89 2b       	or	r24, r25
    6b66:	31 f1       	breq	.+76     	; 0x6bb4 <ArduinoJson::JsonArray::add()+0x90>
    6b68:	8c e0       	ldi	r24, 0x0C	; 12
    6b6a:	ef 01       	movw	r28, r30
    6b6c:	19 92       	st	Y+, r1
    6b6e:	8a 95       	dec	r24
    6b70:	e9 f7       	brne	.-6      	; 0x6b6c <ArduinoJson::JsonArray::add()+0x48>
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
    6b72:	11 82       	std	Z+1, r1	; 0x01
    6b74:	10 82       	st	Z, r1
_ZN11ArduinoJson9JsonArray3addEv():
    6b76:	e8 01       	movw	r28, r16
    6b78:	aa 81       	ldd	r26, Y+2	; 0x02
    6b7a:	bb 81       	ldd	r27, Y+3	; 0x03
    6b7c:	12 96       	adiw	r26, 0x02	; 2
    6b7e:	8d 91       	ld	r24, X+
    6b80:	9c 91       	ld	r25, X
    6b82:	13 97       	sbiw	r26, 0x03	; 3
    6b84:	00 97       	sbiw	r24, 0x00	; 0
    6b86:	91 f0       	breq	.+36     	; 0x6bac <ArduinoJson::JsonArray::add()+0x88>
    6b88:	91 87       	std	Z+9, r25	; 0x09
    6b8a:	80 87       	std	Z+8, r24	; 0x08
    6b8c:	ec 01       	movw	r28, r24
    6b8e:	ff 83       	std	Y+7, r31	; 0x07
    6b90:	ee 83       	std	Y+6, r30	; 0x06
    6b92:	13 96       	adiw	r26, 0x03	; 3
    6b94:	fc 93       	st	X, r31
    6b96:	ee 93       	st	-X, r30
    6b98:	12 97       	sbiw	r26, 0x02	; 2
    6b9a:	3e 2f       	mov	r19, r30
    6b9c:	2f 2f       	mov	r18, r31
    6b9e:	f8 01       	movw	r30, r16
    6ba0:	40 81       	ld	r20, Z
    6ba2:	51 81       	ldd	r21, Z+1	; 0x01
    6ba4:	ba 01       	movw	r22, r20
    6ba6:	83 2f       	mov	r24, r19
    6ba8:	92 2f       	mov	r25, r18
    6baa:	c9 cf       	rjmp	.-110    	; 0x6b3e <ArduinoJson::JsonArray::add()+0x1a>
    6bac:	11 96       	adiw	r26, 0x01	; 1
    6bae:	fc 93       	st	X, r31
    6bb0:	ee 93       	st	-X, r30
    6bb2:	ef cf       	rjmp	.-34     	; 0x6b92 <ArduinoJson::JsonArray::add()+0x6e>
    6bb4:	30 e0       	ldi	r19, 0x00	; 0
    6bb6:	20 e0       	ldi	r18, 0x00	; 0
    6bb8:	50 e0       	ldi	r21, 0x00	; 0
    6bba:	40 e0       	ldi	r20, 0x00	; 0
    6bbc:	f3 cf       	rjmp	.-26     	; 0x6ba4 <ArduinoJson::JsonArray::add()+0x80>

00006bbe <ArduinoJson::Internals::isFloat(char const*)>:
_ZN11ArduinoJson9Internals7isFloatEPKc():
    6bbe:	cf 93       	push	r28
    6bc0:	df 93       	push	r29
    6bc2:	ec 01       	movw	r28, r24
    6bc4:	00 97       	sbiw	r24, 0x00	; 0
    6bc6:	09 f4       	brne	.+2      	; 0x6bca <ArduinoJson::Internals::isFloat(char const*)+0xc>
    6bc8:	3f c0       	rjmp	.+126    	; 0x6c48 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    6bca:	69 e9       	ldi	r22, 0x99	; 153
    6bcc:	72 e0       	ldi	r23, 0x02	; 2
    6bce:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    6bd2:	89 2b       	or	r24, r25
    6bd4:	e9 f1       	breq	.+122    	; 0x6c50 <ArduinoJson::Internals::isFloat(char const*)+0x92>
    6bd6:	88 81       	ld	r24, Y
_ZN11ArduinoJson9Internals6issignEc():
    6bd8:	8d 32       	cpi	r24, 0x2D	; 45
    6bda:	11 f0       	breq	.+4      	; 0x6be0 <ArduinoJson::Internals::isFloat(char const*)+0x22>
    6bdc:	8b 32       	cpi	r24, 0x2B	; 43
    6bde:	09 f4       	brne	.+2      	; 0x6be2 <ArduinoJson::Internals::isFloat(char const*)+0x24>
_ZN11ArduinoJson9Internals7isFloatEPKc():
    6be0:	21 96       	adiw	r28, 0x01	; 1
    6be2:	6d e9       	ldi	r22, 0x9D	; 157
    6be4:	72 e0       	ldi	r23, 0x02	; 2
    6be6:	ce 01       	movw	r24, r28
    6be8:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    6bec:	89 2b       	or	r24, r25
    6bee:	81 f1       	breq	.+96     	; 0x6c50 <ArduinoJson::Internals::isFloat(char const*)+0x92>
    6bf0:	88 81       	ld	r24, Y
    6bf2:	88 23       	and	r24, r24
    6bf4:	49 f1       	breq	.+82     	; 0x6c48 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    6bf6:	fe 01       	movw	r30, r28
    6bf8:	89 91       	ld	r24, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
    6bfa:	90 ed       	ldi	r25, 0xD0	; 208
    6bfc:	98 0f       	add	r25, r24
_ZN11ArduinoJson9Internals7isFloatEPKc():
    6bfe:	9a 30       	cpi	r25, 0x0A	; 10
    6c00:	d0 f3       	brcs	.-12     	; 0x6bf6 <ArduinoJson::Internals::isFloat(char const*)+0x38>
    6c02:	8e 32       	cpi	r24, 0x2E	; 46
    6c04:	41 f4       	brne	.+16     	; 0x6c16 <ArduinoJson::Internals::isFloat(char const*)+0x58>
    6c06:	9e 01       	movw	r18, r28
    6c08:	f9 01       	movw	r30, r18
    6c0a:	2f 5f       	subi	r18, 0xFF	; 255
    6c0c:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
    6c0e:	80 81       	ld	r24, Z
    6c10:	80 53       	subi	r24, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    6c12:	8a 30       	cpi	r24, 0x0A	; 10
    6c14:	c8 f3       	brcs	.-14     	; 0x6c08 <ArduinoJson::Internals::isFloat(char const*)+0x4a>
    6c16:	80 81       	ld	r24, Z
    6c18:	8f 7d       	andi	r24, 0xDF	; 223
    6c1a:	85 34       	cpi	r24, 0x45	; 69
    6c1c:	89 f4       	brne	.+34     	; 0x6c40 <ArduinoJson::Internals::isFloat(char const*)+0x82>
    6c1e:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals6issignEc():
    6c20:	8d 32       	cpi	r24, 0x2D	; 45
    6c22:	a1 f0       	breq	.+40     	; 0x6c4c <ArduinoJson::Internals::isFloat(char const*)+0x8e>
    6c24:	8b 32       	cpi	r24, 0x2B	; 43
    6c26:	91 f0       	breq	.+36     	; 0x6c4c <ArduinoJson::Internals::isFloat(char const*)+0x8e>
_ZN11ArduinoJson9Internals7isFloatEPKc():
    6c28:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
    6c2a:	80 81       	ld	r24, Z
    6c2c:	80 53       	subi	r24, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    6c2e:	8a 30       	cpi	r24, 0x0A	; 10
    6c30:	58 f4       	brcc	.+22     	; 0x6c48 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    6c32:	cf 01       	movw	r24, r30
    6c34:	fc 01       	movw	r30, r24
    6c36:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
    6c38:	20 81       	ld	r18, Z
    6c3a:	20 53       	subi	r18, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    6c3c:	2a 30       	cpi	r18, 0x0A	; 10
    6c3e:	d0 f3       	brcs	.-12     	; 0x6c34 <ArduinoJson::Internals::isFloat(char const*)+0x76>
    6c40:	81 e0       	ldi	r24, 0x01	; 1
    6c42:	90 81       	ld	r25, Z
    6c44:	99 23       	and	r25, r25
    6c46:	29 f0       	breq	.+10     	; 0x6c52 <ArduinoJson::Internals::isFloat(char const*)+0x94>
    6c48:	80 e0       	ldi	r24, 0x00	; 0
    6c4a:	03 c0       	rjmp	.+6      	; 0x6c52 <ArduinoJson::Internals::isFloat(char const*)+0x94>
    6c4c:	32 96       	adiw	r30, 0x02	; 2
    6c4e:	ed cf       	rjmp	.-38     	; 0x6c2a <ArduinoJson::Internals::isFloat(char const*)+0x6c>
    6c50:	81 e0       	ldi	r24, 0x01	; 1
    6c52:	df 91       	pop	r29
    6c54:	cf 91       	pop	r28
    6c56:	08 95       	ret

00006c58 <printf_begin()>:
_Z12printf_beginv():
    6c58:	70 e0       	ldi	r23, 0x00	; 0
    6c5a:	60 e0       	ldi	r22, 0x00	; 0
    6c5c:	88 e2       	ldi	r24, 0x28	; 40
    6c5e:	9c e7       	ldi	r25, 0x7C	; 124
    6c60:	0c 94 f5 d7 	jmp	0x1afea	; 0x1afea <fdevopen>

00006c64 <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
    6c64:	30 e0       	ldi	r19, 0x00	; 0
    6c66:	20 e0       	ldi	r18, 0x00	; 0
    6c68:	e1 e0       	ldi	r30, 0x01	; 1
    6c6a:	f0 e0       	ldi	r31, 0x00	; 0
    6c6c:	af 01       	movw	r20, r30
    6c6e:	02 2e       	mov	r0, r18
    6c70:	01 c0       	rjmp	.+2      	; 0x6c74 <enable_redraw(unsigned char, unsigned char)+0x10>
    6c72:	44 0f       	add	r20, r20
    6c74:	0a 94       	dec	r0
    6c76:	ea f7       	brpl	.-6      	; 0x6c72 <enable_redraw(unsigned char, unsigned char)+0xe>
    6c78:	98 2f       	mov	r25, r24
    6c7a:	94 23       	and	r25, r20
    6c7c:	11 f0       	breq	.+4      	; 0x6c82 <enable_redraw(unsigned char, unsigned char)+0x1e>
    6c7e:	46 23       	and	r20, r22
    6c80:	39 f4       	brne	.+14     	; 0x6c90 <enable_redraw(unsigned char, unsigned char)+0x2c>
    6c82:	2f 5f       	subi	r18, 0xFF	; 255
    6c84:	3f 4f       	sbci	r19, 0xFF	; 255
    6c86:	28 30       	cpi	r18, 0x08	; 8
    6c88:	31 05       	cpc	r19, r1
    6c8a:	81 f7       	brne	.-32     	; 0x6c6c <enable_redraw(unsigned char, unsigned char)+0x8>
    6c8c:	80 e0       	ldi	r24, 0x00	; 0
    6c8e:	08 95       	ret
    6c90:	81 e0       	ldi	r24, 0x01	; 1
    6c92:	08 95       	ret

00006c94 <MenuHistoryInit()>:
_Z15MenuHistoryInitv():
    6c94:	e0 91 48 09 	lds	r30, 0x0948	; 0x800948 <MenuHistoryIndex>
    6c98:	f0 e0       	ldi	r31, 0x00	; 0
    6c9a:	ed 5a       	subi	r30, 0xAD	; 173
    6c9c:	f6 4f       	sbci	r31, 0xF6	; 246
    6c9e:	10 82       	st	Z, r1
    6ca0:	08 95       	ret

00006ca2 <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
    6ca2:	ff 92       	push	r15
    6ca4:	0f 93       	push	r16
    6ca6:	1f 93       	push	r17
    6ca8:	cf 93       	push	r28
    6caa:	df 93       	push	r29
    6cac:	dc 01       	movw	r26, r24
    6cae:	20 91 48 09 	lds	r18, 0x0948	; 0x800948 <MenuHistoryIndex>
    6cb2:	30 e0       	ldi	r19, 0x00	; 0
    6cb4:	80 e0       	ldi	r24, 0x00	; 0
    6cb6:	65 ea       	ldi	r22, 0xA5	; 165
    6cb8:	74 e0       	ldi	r23, 0x04	; 4
    6cba:	ca ed       	ldi	r28, 0xDA	; 218
    6cbc:	d2 e0       	ldi	r29, 0x02	; 2
    6cbe:	89 01       	movw	r16, r18
    6cc0:	0d 5a       	subi	r16, 0xAD	; 173
    6cc2:	16 4f       	sbci	r17, 0xF6	; 246
    6cc4:	fb 01       	movw	r30, r22
    6cc6:	94 91       	lpm	r25, Z
    6cc8:	89 17       	cp	r24, r25
    6cca:	e8 f4       	brcc	.+58     	; 0x6d06 <MenuHistoryGetMenu(unsigned char*)+0x64>
    6ccc:	8c 9f       	mul	r24, r28
    6cce:	a0 01       	movw	r20, r0
    6cd0:	8d 9f       	mul	r24, r29
    6cd2:	50 0d       	add	r21, r0
    6cd4:	11 24       	eor	r1, r1
    6cd6:	fa 01       	movw	r30, r20
    6cd8:	e2 59       	subi	r30, 0x92	; 146
    6cda:	f8 4f       	sbci	r31, 0xF8	; 248
    6cdc:	f4 90       	lpm	r15, Z
    6cde:	f8 01       	movw	r30, r16
    6ce0:	90 81       	ld	r25, Z
    6ce2:	9f 11       	cpse	r25, r15
    6ce4:	0e c0       	rjmp	.+28     	; 0x6d02 <MenuHistoryGetMenu(unsigned char*)+0x60>
    6ce6:	47 55       	subi	r20, 0x57	; 87
    6ce8:	5b 4f       	sbci	r21, 0xFB	; 251
    6cea:	27 5b       	subi	r18, 0xB7	; 183
    6cec:	36 4f       	sbci	r19, 0xF6	; 246
    6cee:	f9 01       	movw	r30, r18
    6cf0:	20 81       	ld	r18, Z
    6cf2:	2c 93       	st	X, r18
    6cf4:	ca 01       	movw	r24, r20
    6cf6:	df 91       	pop	r29
    6cf8:	cf 91       	pop	r28
    6cfa:	1f 91       	pop	r17
    6cfc:	0f 91       	pop	r16
    6cfe:	ff 90       	pop	r15
    6d00:	08 95       	ret
    6d02:	8f 5f       	subi	r24, 0xFF	; 255
    6d04:	df cf       	rjmp	.-66     	; 0x6cc4 <MenuHistoryGetMenu(unsigned char*)+0x22>
    6d06:	80 e0       	ldi	r24, 0x00	; 0
    6d08:	66 ea       	ldi	r22, 0xA6	; 166
    6d0a:	74 e0       	ldi	r23, 0x04	; 4
    6d0c:	ca ed       	ldi	r28, 0xDA	; 218
    6d0e:	d2 e0       	ldi	r29, 0x02	; 2
    6d10:	89 01       	movw	r16, r18
    6d12:	0d 5a       	subi	r16, 0xAD	; 173
    6d14:	16 4f       	sbci	r17, 0xF6	; 246
    6d16:	fb 01       	movw	r30, r22
    6d18:	94 91       	lpm	r25, Z
    6d1a:	89 17       	cp	r24, r25
    6d1c:	90 f4       	brcc	.+36     	; 0x6d42 <MenuHistoryGetMenu(unsigned char*)+0xa0>
    6d1e:	8c 9f       	mul	r24, r28
    6d20:	a0 01       	movw	r20, r0
    6d22:	8d 9f       	mul	r24, r29
    6d24:	50 0d       	add	r21, r0
    6d26:	11 24       	eor	r1, r1
    6d28:	fa 01       	movw	r30, r20
    6d2a:	ee 50       	subi	r30, 0x0E	; 14
    6d2c:	fc 4d       	sbci	r31, 0xDC	; 220
    6d2e:	f4 90       	lpm	r15, Z
    6d30:	f8 01       	movw	r30, r16
    6d32:	90 81       	ld	r25, Z
    6d34:	9f 11       	cpse	r25, r15
    6d36:	03 c0       	rjmp	.+6      	; 0x6d3e <MenuHistoryGetMenu(unsigned char*)+0x9c>
    6d38:	43 5d       	subi	r20, 0xD3	; 211
    6d3a:	5e 4d       	sbci	r21, 0xDE	; 222
    6d3c:	d6 cf       	rjmp	.-84     	; 0x6cea <MenuHistoryGetMenu(unsigned char*)+0x48>
    6d3e:	8f 5f       	subi	r24, 0xFF	; 255
    6d40:	ea cf       	rjmp	.-44     	; 0x6d16 <MenuHistoryGetMenu(unsigned char*)+0x74>
    6d42:	80 e0       	ldi	r24, 0x00	; 0
    6d44:	67 ea       	ldi	r22, 0xA7	; 167
    6d46:	74 e0       	ldi	r23, 0x04	; 4
    6d48:	ca ed       	ldi	r28, 0xDA	; 218
    6d4a:	d2 e0       	ldi	r29, 0x02	; 2
    6d4c:	89 01       	movw	r16, r18
    6d4e:	0d 5a       	subi	r16, 0xAD	; 173
    6d50:	16 4f       	sbci	r17, 0xF6	; 246
    6d52:	fb 01       	movw	r30, r22
    6d54:	94 91       	lpm	r25, Z
    6d56:	89 17       	cp	r24, r25
    6d58:	90 f4       	brcc	.+36     	; 0x6d7e <MenuHistoryGetMenu(unsigned char*)+0xdc>
    6d5a:	8c 9f       	mul	r24, r28
    6d5c:	a0 01       	movw	r20, r0
    6d5e:	8d 9f       	mul	r24, r29
    6d60:	50 0d       	add	r21, r0
    6d62:	11 24       	eor	r1, r1
    6d64:	fa 01       	movw	r30, r20
    6d66:	e2 5f       	subi	r30, 0xF2	; 242
    6d68:	fa 4c       	sbci	r31, 0xCA	; 202
    6d6a:	f4 90       	lpm	r15, Z
    6d6c:	f8 01       	movw	r30, r16
    6d6e:	90 81       	ld	r25, Z
    6d70:	9f 11       	cpse	r25, r15
    6d72:	03 c0       	rjmp	.+6      	; 0x6d7a <MenuHistoryGetMenu(unsigned char*)+0xd8>
    6d74:	47 5b       	subi	r20, 0xB7	; 183
    6d76:	5d 4c       	sbci	r21, 0xCD	; 205
    6d78:	b8 cf       	rjmp	.-144    	; 0x6cea <MenuHistoryGetMenu(unsigned char*)+0x48>
    6d7a:	8f 5f       	subi	r24, 0xFF	; 255
    6d7c:	ea cf       	rjmp	.-44     	; 0x6d52 <MenuHistoryGetMenu(unsigned char*)+0xb0>
    6d7e:	90 e0       	ldi	r25, 0x00	; 0
    6d80:	68 ea       	ldi	r22, 0xA8	; 168
    6d82:	74 e0       	ldi	r23, 0x04	; 4
    6d84:	ca ed       	ldi	r28, 0xDA	; 218
    6d86:	d2 e0       	ldi	r29, 0x02	; 2
    6d88:	89 01       	movw	r16, r18
    6d8a:	0d 5a       	subi	r16, 0xAD	; 173
    6d8c:	16 4f       	sbci	r17, 0xF6	; 246
    6d8e:	fb 01       	movw	r30, r22
    6d90:	84 91       	lpm	r24, Z
    6d92:	98 17       	cp	r25, r24
    6d94:	08 f0       	brcs	.+2      	; 0x6d98 <MenuHistoryGetMenu(unsigned char*)+0xf6>
    6d96:	ae cf       	rjmp	.-164    	; 0x6cf4 <MenuHistoryGetMenu(unsigned char*)+0x52>
    6d98:	9c 9f       	mul	r25, r28
    6d9a:	a0 01       	movw	r20, r0
    6d9c:	9d 9f       	mul	r25, r29
    6d9e:	50 0d       	add	r21, r0
    6da0:	11 24       	eor	r1, r1
    6da2:	fa 01       	movw	r30, r20
    6da4:	e6 5d       	subi	r30, 0xD6	; 214
    6da6:	f9 4b       	sbci	r31, 0xB9	; 185
    6da8:	f4 90       	lpm	r15, Z
    6daa:	f8 01       	movw	r30, r16
    6dac:	80 81       	ld	r24, Z
    6dae:	8f 11       	cpse	r24, r15
    6db0:	03 c0       	rjmp	.+6      	; 0x6db8 <MenuHistoryGetMenu(unsigned char*)+0x116>
    6db2:	4b 59       	subi	r20, 0x9B	; 155
    6db4:	5c 4b       	sbci	r21, 0xBC	; 188
    6db6:	99 cf       	rjmp	.-206    	; 0x6cea <MenuHistoryGetMenu(unsigned char*)+0x48>
    6db8:	9f 5f       	subi	r25, 0xFF	; 255
    6dba:	e9 cf       	rjmp	.-46     	; 0x6d8e <MenuHistoryGetMenu(unsigned char*)+0xec>

00006dbc <DisplayClean(unsigned int)>:
_Z12DisplayCleanj():
    6dbc:	bc 01       	movw	r22, r24
    6dbe:	89 e8       	ldi	r24, 0x89	; 137
    6dc0:	9b e0       	ldi	r25, 0x0B	; 11
    6dc2:	0c 94 19 8e 	jmp	0x11c32	; 0x11c32 <LCDWIKI_GUI::Fill_Screen(unsigned int)>

00006dc6 <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
    6dc6:	2f 92       	push	r2
    6dc8:	3f 92       	push	r3
    6dca:	4f 92       	push	r4
    6dcc:	5f 92       	push	r5
    6dce:	6f 92       	push	r6
    6dd0:	7f 92       	push	r7
    6dd2:	8f 92       	push	r8
    6dd4:	9f 92       	push	r9
    6dd6:	af 92       	push	r10
    6dd8:	bf 92       	push	r11
    6dda:	cf 92       	push	r12
    6ddc:	df 92       	push	r13
    6dde:	ef 92       	push	r14
    6de0:	ff 92       	push	r15
    6de2:	0f 93       	push	r16
    6de4:	1f 93       	push	r17
    6de6:	cf 93       	push	r28
    6de8:	df 93       	push	r29
    6dea:	1f 92       	push	r1
    6dec:	cd b7       	in	r28, 0x3d	; 61
    6dee:	de b7       	in	r29, 0x3e	; 62
    6df0:	ce 01       	movw	r24, r28
    6df2:	01 96       	adiw	r24, 0x01	; 1
    6df4:	0e 94 51 36 	call	0x6ca2	; 0x6ca2 <MenuHistoryGetMenu(unsigned char*)>
    6df8:	7c 01       	movw	r14, r24
    6dfa:	fc 01       	movw	r30, r24
    6dfc:	e2 53       	subi	r30, 0x32	; 50
    6dfe:	fd 4f       	sbci	r31, 0xFD	; 253
    6e00:	b4 90       	lpm	r11, Z
    6e02:	38 97       	sbiw	r30, 0x08	; 8
    6e04:	85 90       	lpm	r8, Z+
    6e06:	94 90       	lpm	r9, Z
    6e08:	fc 01       	movw	r30, r24
    6e0a:	e8 53       	subi	r30, 0x38	; 56
    6e0c:	fd 4f       	sbci	r31, 0xFD	; 253
    6e0e:	c5 90       	lpm	r12, Z+
    6e10:	d4 90       	lpm	r13, Z
    6e12:	fc 01       	movw	r30, r24
    6e14:	e6 53       	subi	r30, 0x36	; 54
    6e16:	fd 4f       	sbci	r31, 0xFD	; 253
    6e18:	65 90       	lpm	r6, Z+
    6e1a:	74 90       	lpm	r7, Z
    6e1c:	fc 01       	movw	r30, r24
    6e1e:	e4 53       	subi	r30, 0x34	; 52
    6e20:	fd 4f       	sbci	r31, 0xFD	; 253
    6e22:	45 90       	lpm	r4, Z+
    6e24:	54 90       	lpm	r5, Z
    6e26:	fc 01       	movw	r30, r24
    6e28:	e1 53       	subi	r30, 0x31	; 49
    6e2a:	fd 4f       	sbci	r31, 0xFD	; 253
    6e2c:	25 90       	lpm	r2, Z+
    6e2e:	34 90       	lpm	r3, Z
    6e30:	b0 fe       	sbrs	r11, 0
    6e32:	03 c0       	rjmp	.+6      	; 0x6e3a <MenuPrepareStyle()+0x74>
    6e34:	c1 01       	movw	r24, r2
    6e36:	0e 94 de 36 	call	0x6dbc	; 0x6dbc <DisplayClean(unsigned int)>
    6e3a:	b1 fe       	sbrs	r11, 1
    6e3c:	11 c0       	rjmp	.+34     	; 0x6e60 <MenuPrepareStyle()+0x9a>
    6e3e:	b1 01       	movw	r22, r2
    6e40:	89 e8       	ldi	r24, 0x89	; 137
    6e42:	9b e0       	ldi	r25, 0x0B	; 11
    6e44:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    6e48:	86 01       	movw	r16, r12
    6e4a:	04 0d       	add	r16, r4
    6e4c:	15 1d       	adc	r17, r5
    6e4e:	94 01       	movw	r18, r8
    6e50:	26 0d       	add	r18, r6
    6e52:	37 1d       	adc	r19, r7
    6e54:	a6 01       	movw	r20, r12
    6e56:	b4 01       	movw	r22, r8
    6e58:	89 e8       	ldi	r24, 0x89	; 137
    6e5a:	9b e0       	ldi	r25, 0x0B	; 11
    6e5c:	0e 94 bd 8d 	call	0x11b7a	; 0x11b7a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    6e60:	b2 fe       	sbrs	r11, 2
    6e62:	30 c0       	rjmp	.+96     	; 0x6ec4 <MenuPrepareStyle()+0xfe>
    6e64:	70 e0       	ldi	r23, 0x00	; 0
    6e66:	60 e0       	ldi	r22, 0x00	; 0
    6e68:	89 e8       	ldi	r24, 0x89	; 137
    6e6a:	9b e0       	ldi	r25, 0x0B	; 11
    6e6c:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    6e70:	b1 2c       	mov	r11, r1
    6e72:	a1 2c       	mov	r10, r1
    6e74:	4c 0c       	add	r4, r12
    6e76:	5d 1c       	adc	r5, r13
    6e78:	14 01       	movw	r2, r8
    6e7a:	26 0c       	add	r2, r6
    6e7c:	37 1c       	adc	r3, r7
    6e7e:	82 01       	movw	r16, r4
    6e80:	0a 19       	sub	r16, r10
    6e82:	1b 09       	sbc	r17, r11
    6e84:	91 01       	movw	r18, r2
    6e86:	2a 19       	sub	r18, r10
    6e88:	3b 09       	sbc	r19, r11
    6e8a:	b4 01       	movw	r22, r8
    6e8c:	6a 0d       	add	r22, r10
    6e8e:	7b 1d       	adc	r23, r11
    6e90:	a6 01       	movw	r20, r12
    6e92:	89 e8       	ldi	r24, 0x89	; 137
    6e94:	9b e0       	ldi	r25, 0x0B	; 11
    6e96:	0e 94 44 8e 	call	0x11c88	; 0x11c88 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    6e9a:	93 01       	movw	r18, r6
    6e9c:	2a 19       	sub	r18, r10
    6e9e:	3b 09       	sbc	r19, r11
    6ea0:	a6 01       	movw	r20, r12
    6ea2:	49 5e       	subi	r20, 0xE9	; 233
    6ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    6ea6:	b4 01       	movw	r22, r8
    6ea8:	89 e8       	ldi	r24, 0x89	; 137
    6eaa:	9b e0       	ldi	r25, 0x0B	; 11
    6eac:	0e 94 03 8e 	call	0x11c06	; 0x11c06 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    6eb0:	8f ef       	ldi	r24, 0xFF	; 255
    6eb2:	a8 1a       	sub	r10, r24
    6eb4:	b8 0a       	sbc	r11, r24
    6eb6:	ef ef       	ldi	r30, 0xFF	; 255
    6eb8:	ce 1a       	sub	r12, r30
    6eba:	de 0a       	sbc	r13, r30
    6ebc:	f4 e0       	ldi	r31, 0x04	; 4
    6ebe:	af 16       	cp	r10, r31
    6ec0:	b1 04       	cpc	r11, r1
    6ec2:	e9 f6       	brne	.-70     	; 0x6e7e <MenuPrepareStyle()+0xb8>
    6ec4:	f7 01       	movw	r30, r14
    6ec6:	e8 52       	subi	r30, 0x28	; 40
    6ec8:	fd 4f       	sbci	r31, 0xFD	; 253
    6eca:	25 91       	lpm	r18, Z+
    6ecc:	34 91       	lpm	r19, Z
    6ece:	f7 01       	movw	r30, r14
    6ed0:	eb 53       	subi	r30, 0x3B	; 59
    6ed2:	fd 4f       	sbci	r31, 0xFD	; 253
    6ed4:	e4 91       	lpm	r30, Z
    6ed6:	40 e0       	ldi	r20, 0x00	; 0
    6ed8:	70 e0       	ldi	r23, 0x00	; 0
    6eda:	60 e0       	ldi	r22, 0x00	; 0
    6edc:	8e 2f       	mov	r24, r30
    6ede:	90 e0       	ldi	r25, 0x00	; 0
    6ee0:	f9 01       	movw	r30, r18
    6ee2:	19 95       	eicall
    6ee4:	0f 90       	pop	r0
    6ee6:	df 91       	pop	r29
    6ee8:	cf 91       	pop	r28
    6eea:	1f 91       	pop	r17
    6eec:	0f 91       	pop	r16
    6eee:	ff 90       	pop	r15
    6ef0:	ef 90       	pop	r14
    6ef2:	df 90       	pop	r13
    6ef4:	cf 90       	pop	r12
    6ef6:	bf 90       	pop	r11
    6ef8:	af 90       	pop	r10
    6efa:	9f 90       	pop	r9
    6efc:	8f 90       	pop	r8
    6efe:	7f 90       	pop	r7
    6f00:	6f 90       	pop	r6
    6f02:	5f 90       	pop	r5
    6f04:	4f 90       	pop	r4
    6f06:	3f 90       	pop	r3
    6f08:	2f 90       	pop	r2
    6f0a:	08 95       	ret

00006f0c <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryPrevMenujjh():
    6f0c:	80 91 48 09 	lds	r24, 0x0948	; 0x800948 <MenuHistoryIndex>
    6f10:	88 23       	and	r24, r24
    6f12:	29 f0       	breq	.+10     	; 0x6f1e <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)+0x12>
    6f14:	81 50       	subi	r24, 0x01	; 1
    6f16:	80 93 48 09 	sts	0x0948, r24	; 0x800948 <MenuHistoryIndex>
    6f1a:	0c 94 e3 36 	jmp	0x6dc6	; 0x6dc6 <MenuPrepareStyle()>
    6f1e:	08 95       	ret

00006f20 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryNextMenujjh():
    6f20:	20 91 48 09 	lds	r18, 0x0948	; 0x800948 <MenuHistoryIndex>
    6f24:	2a 30       	cpi	r18, 0x0A	; 10
    6f26:	70 f4       	brcc	.+28     	; 0x6f44 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)+0x24>
    6f28:	2f 5f       	subi	r18, 0xFF	; 255
    6f2a:	20 93 48 09 	sts	0x0948, r18	; 0x800948 <MenuHistoryIndex>
    6f2e:	30 e0       	ldi	r19, 0x00	; 0
    6f30:	f9 01       	movw	r30, r18
    6f32:	ed 5a       	subi	r30, 0xAD	; 173
    6f34:	f6 4f       	sbci	r31, 0xF6	; 246
    6f36:	80 83       	st	Z, r24
    6f38:	27 5b       	subi	r18, 0xB7	; 183
    6f3a:	36 4f       	sbci	r19, 0xF6	; 246
    6f3c:	f9 01       	movw	r30, r18
    6f3e:	60 83       	st	Z, r22
    6f40:	0c 94 e3 36 	jmp	0x6dc6	; 0x6dc6 <MenuPrepareStyle()>
    6f44:	08 95       	ret

00006f46 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.46]>:
_Z19MenuHistoryPrevMenujjh():
    6f46:	80 91 48 09 	lds	r24, 0x0948	; 0x800948 <MenuHistoryIndex>
    6f4a:	88 23       	and	r24, r24
    6f4c:	29 f0       	breq	.+10     	; 0x6f58 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.46]+0x12>
    6f4e:	81 50       	subi	r24, 0x01	; 1
    6f50:	80 93 48 09 	sts	0x0948, r24	; 0x800948 <MenuHistoryIndex>
    6f54:	0c 94 e3 36 	jmp	0x6dc6	; 0x6dc6 <MenuPrepareStyle()>
    6f58:	08 95       	ret

00006f5a <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z29click_tds_deassociate_onewirejjh():
    6f5a:	86 2f       	mov	r24, r22
    6f5c:	0e 94 81 85 	call	0x10b02	; 0x10b02 <tds_set_clear_wrom_id(unsigned char)>
    6f60:	0c 94 a3 37 	jmp	0x6f46	; 0x6f46 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.46]>

00006f64 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>:
_Z30dialog_set_string_button_clickjjh():
    6f64:	e0 91 60 09 	lds	r30, 0x0960	; 0x800960 <dialog_save_string_function>
    6f68:	f0 91 61 09 	lds	r31, 0x0961	; 0x800961 <dialog_save_string_function+0x1>
    6f6c:	19 95       	eicall
    6f6e:	0c 94 a3 37 	jmp	0x6f46	; 0x6f46 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.46]>

00006f72 <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>:
_Z32dialog_set_variable_button_clickjjh():
    6f72:	1f 93       	push	r17
    6f74:	cf 93       	push	r28
    6f76:	df 93       	push	r29
    6f78:	ec 01       	movw	r28, r24
    6f7a:	14 2f       	mov	r17, r20
    6f7c:	90 e0       	ldi	r25, 0x00	; 0
    6f7e:	80 e0       	ldi	r24, 0x00	; 0
    6f80:	0e 94 12 d2 	call	0x1a424	; 0x1a424 <__floatunsisf>
    6f84:	ab 01       	movw	r20, r22
    6f86:	bc 01       	movw	r22, r24
    6f88:	85 e1       	ldi	r24, 0x15	; 21
    6f8a:	8c 9f       	mul	r24, r28
    6f8c:	f0 01       	movw	r30, r0
    6f8e:	8d 9f       	mul	r24, r29
    6f90:	f0 0d       	add	r31, r0
    6f92:	11 24       	eor	r1, r1
    6f94:	ea 55       	subi	r30, 0x5A	; 90
    6f96:	f6 4f       	sbci	r31, 0xF6	; 246
    6f98:	03 88       	ldd	r0, Z+19	; 0x13
    6f9a:	f4 89       	ldd	r31, Z+20	; 0x14
    6f9c:	e0 2d       	mov	r30, r0
    6f9e:	21 2f       	mov	r18, r17
    6fa0:	ce 01       	movw	r24, r28
    6fa2:	19 95       	eicall
    6fa4:	df 91       	pop	r29
    6fa6:	cf 91       	pop	r28
    6fa8:	1f 91       	pop	r17
    6faa:	0c 94 a3 37 	jmp	0x6f46	; 0x6f46 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.46]>

00006fae <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>:
_Z23click_dialog_button_yesjjh():
    6fae:	80 91 a5 09 	lds	r24, 0x09A5	; 0x8009a5 <dialog_yes_args1>
    6fb2:	e0 91 46 09 	lds	r30, 0x0946	; 0x800946 <dialog_yes_function>
    6fb6:	f0 91 47 09 	lds	r31, 0x0947	; 0x800947 <dialog_yes_function+0x1>
    6fba:	40 e0       	ldi	r20, 0x00	; 0
    6fbc:	70 e0       	ldi	r23, 0x00	; 0
    6fbe:	60 e0       	ldi	r22, 0x00	; 0
    6fc0:	90 e0       	ldi	r25, 0x00	; 0
    6fc2:	19 95       	eicall
    6fc4:	0c 94 a3 37 	jmp	0x6f46	; 0x6f46 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.46]>

00006fc8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>:
_Z19MenuHistoryNextMenujjh():
    6fc8:	20 91 48 09 	lds	r18, 0x0948	; 0x800948 <MenuHistoryIndex>
    6fcc:	2a 30       	cpi	r18, 0x0A	; 10
    6fce:	70 f4       	brcc	.+28     	; 0x6fec <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]+0x24>
    6fd0:	2f 5f       	subi	r18, 0xFF	; 255
    6fd2:	20 93 48 09 	sts	0x0948, r18	; 0x800948 <MenuHistoryIndex>
    6fd6:	30 e0       	ldi	r19, 0x00	; 0
    6fd8:	f9 01       	movw	r30, r18
    6fda:	ed 5a       	subi	r30, 0xAD	; 173
    6fdc:	f6 4f       	sbci	r31, 0xF6	; 246
    6fde:	80 83       	st	Z, r24
    6fe0:	27 5b       	subi	r18, 0xB7	; 183
    6fe2:	36 4f       	sbci	r19, 0xF6	; 246
    6fe4:	f9 01       	movw	r30, r18
    6fe6:	60 83       	st	Z, r22
    6fe8:	0c 94 e3 36 	jmp	0x6dc6	; 0x6dc6 <MenuPrepareStyle()>
    6fec:	08 95       	ret

00006fee <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_periodjjh():
    6fee:	1f 93       	push	r17
    6ff0:	cf 93       	push	r28
    6ff2:	df 93       	push	r29
    6ff4:	c8 2f       	mov	r28, r24
    6ff6:	16 2f       	mov	r17, r22
    6ff8:	70 e0       	ldi	r23, 0x00	; 0
    6ffa:	60 e0       	ldi	r22, 0x00	; 0
    6ffc:	86 e6       	ldi	r24, 0x66	; 102
    6ffe:	90 e0       	ldi	r25, 0x00	; 0
    7000:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>
    7004:	81 2f       	mov	r24, r17
    7006:	0e 94 d5 84 	call	0x109aa	; 0x109aa <tds_get_period(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    700a:	25 e1       	ldi	r18, 0x15	; 21
    700c:	c2 9f       	mul	r28, r18
    700e:	e0 01       	movw	r28, r0
    7010:	11 24       	eor	r1, r1
    7012:	ca 55       	subi	r28, 0x5A	; 90
    7014:	d6 4f       	sbci	r29, 0xF6	; 246
_Z27display_menu_tds_set_periodjjh():
    7016:	bc 01       	movw	r22, r24
    7018:	99 0f       	add	r25, r25
    701a:	88 0b       	sbc	r24, r24
    701c:	99 0b       	sbc	r25, r25
    701e:	0e 94 14 d2 	call	0x1a428	; 0x1a428 <__floatsisf>
    7022:	68 83       	st	Y, r22
    7024:	79 83       	std	Y+1, r23	; 0x01
    7026:	8a 83       	std	Y+2, r24	; 0x02
    7028:	9b 83       	std	Y+3, r25	; 0x03
_Z29display_function_set_variableffffhhhhPFvjfhE():
    702a:	80 e0       	ldi	r24, 0x00	; 0
    702c:	90 e0       	ldi	r25, 0x00	; 0
    702e:	a0 e8       	ldi	r26, 0x80	; 128
    7030:	bf e3       	ldi	r27, 0x3F	; 63
    7032:	88 87       	std	Y+8, r24	; 0x08
    7034:	99 87       	std	Y+9, r25	; 0x09
    7036:	aa 87       	std	Y+10, r26	; 0x0a
    7038:	bb 87       	std	Y+11, r27	; 0x0b
    703a:	40 e0       	ldi	r20, 0x00	; 0
    703c:	50 e0       	ldi	r21, 0x00	; 0
    703e:	6f e7       	ldi	r22, 0x7F	; 127
    7040:	73 e4       	ldi	r23, 0x43	; 67
    7042:	4c 83       	std	Y+4, r20	; 0x04
    7044:	5d 83       	std	Y+5, r21	; 0x05
    7046:	6e 83       	std	Y+6, r22	; 0x06
    7048:	7f 83       	std	Y+7, r23	; 0x07
    704a:	8e 87       	std	Y+14, r24	; 0x0e
    704c:	9f 87       	std	Y+15, r25	; 0x0f
    704e:	a8 8b       	std	Y+16, r26	; 0x10
    7050:	b9 8b       	std	Y+17, r27	; 0x11
    7052:	81 e0       	ldi	r24, 0x01	; 1
    7054:	8d 87       	std	Y+13, r24	; 0x0d
    7056:	1a 8b       	std	Y+18, r17	; 0x12
    7058:	1c 86       	std	Y+12, r1	; 0x0c
    705a:	89 ea       	ldi	r24, 0xA9	; 169
    705c:	94 e3       	ldi	r25, 0x34	; 52
    705e:	9c 8b       	std	Y+20, r25	; 0x14
    7060:	8b 8b       	std	Y+19, r24	; 0x13
_Z27display_menu_tds_set_periodjjh():
    7062:	df 91       	pop	r29
    7064:	cf 91       	pop	r28
    7066:	1f 91       	pop	r17
    7068:	08 95       	ret

0000706a <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_offsetjjh():
    706a:	1f 93       	push	r17
    706c:	cf 93       	push	r28
    706e:	df 93       	push	r29
    7070:	c8 2f       	mov	r28, r24
    7072:	16 2f       	mov	r17, r22
    7074:	70 e0       	ldi	r23, 0x00	; 0
    7076:	60 e0       	ldi	r22, 0x00	; 0
    7078:	86 e6       	ldi	r24, 0x66	; 102
    707a:	90 e0       	ldi	r25, 0x00	; 0
    707c:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>
    7080:	81 2f       	mov	r24, r17
    7082:	0e 94 96 84 	call	0x1092c	; 0x1092c <tds_get_offset(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    7086:	25 e1       	ldi	r18, 0x15	; 21
    7088:	c2 9f       	mul	r28, r18
    708a:	e0 01       	movw	r28, r0
    708c:	11 24       	eor	r1, r1
    708e:	ca 55       	subi	r28, 0x5A	; 90
    7090:	d6 4f       	sbci	r29, 0xF6	; 246
_Z27display_menu_tds_set_offsetjjh():
    7092:	bc 01       	movw	r22, r24
    7094:	99 0f       	add	r25, r25
    7096:	88 0b       	sbc	r24, r24
    7098:	99 0b       	sbc	r25, r25
    709a:	0e 94 14 d2 	call	0x1a428	; 0x1a428 <__floatsisf>
    709e:	20 e0       	ldi	r18, 0x00	; 0
    70a0:	30 e0       	ldi	r19, 0x00	; 0
    70a2:	4a e7       	ldi	r20, 0x7A	; 122
    70a4:	54 e4       	ldi	r21, 0x44	; 68
    70a6:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    70aa:	68 83       	st	Y, r22
    70ac:	79 83       	std	Y+1, r23	; 0x01
    70ae:	8a 83       	std	Y+2, r24	; 0x02
    70b0:	9b 83       	std	Y+3, r25	; 0x03
    70b2:	80 e0       	ldi	r24, 0x00	; 0
    70b4:	90 e0       	ldi	r25, 0x00	; 0
    70b6:	a0 e2       	ldi	r26, 0x20	; 32
    70b8:	b1 ec       	ldi	r27, 0xC1	; 193
    70ba:	88 87       	std	Y+8, r24	; 0x08
    70bc:	99 87       	std	Y+9, r25	; 0x09
    70be:	aa 87       	std	Y+10, r26	; 0x0a
    70c0:	bb 87       	std	Y+11, r27	; 0x0b
    70c2:	80 e0       	ldi	r24, 0x00	; 0
    70c4:	90 e0       	ldi	r25, 0x00	; 0
    70c6:	a0 e2       	ldi	r26, 0x20	; 32
    70c8:	b1 e4       	ldi	r27, 0x41	; 65
    70ca:	8c 83       	std	Y+4, r24	; 0x04
    70cc:	9d 83       	std	Y+5, r25	; 0x05
    70ce:	ae 83       	std	Y+6, r26	; 0x06
    70d0:	bf 83       	std	Y+7, r27	; 0x07
    70d2:	8d ec       	ldi	r24, 0xCD	; 205
    70d4:	9c ec       	ldi	r25, 0xCC	; 204
    70d6:	ac ec       	ldi	r26, 0xCC	; 204
    70d8:	bd e3       	ldi	r27, 0x3D	; 61
    70da:	8e 87       	std	Y+14, r24	; 0x0e
    70dc:	9f 87       	std	Y+15, r25	; 0x0f
    70de:	a8 8b       	std	Y+16, r26	; 0x10
    70e0:	b9 8b       	std	Y+17, r27	; 0x11
    70e2:	1d 86       	std	Y+13, r1	; 0x0d
    70e4:	1a 8b       	std	Y+18, r17	; 0x12
    70e6:	1c 86       	std	Y+12, r1	; 0x0c
    70e8:	80 e9       	ldi	r24, 0x90	; 144
    70ea:	94 e3       	ldi	r25, 0x34	; 52
    70ec:	9c 8b       	std	Y+20, r25	; 0x14
    70ee:	8b 8b       	std	Y+19, r24	; 0x13
_Z27display_menu_tds_set_offsetjjh():
    70f0:	df 91       	pop	r29
    70f2:	cf 91       	pop	r28
    70f4:	1f 91       	pop	r17
    70f6:	08 95       	ret

000070f8 <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>:
_Z28clik_button_onewire_scan_busjjh():
    70f8:	0f 93       	push	r16
    70fa:	1f 93       	push	r17
    70fc:	cf 93       	push	r28
    70fe:	df 93       	push	r29
    7100:	cd b7       	in	r28, 0x3d	; 61
    7102:	de b7       	in	r29, 0x3e	; 62
    7104:	a0 97       	sbiw	r28, 0x20	; 32
    7106:	0f b6       	in	r0, 0x3f	; 63
    7108:	f8 94       	cli
    710a:	de bf       	out	0x3e, r29	; 62
    710c:	0f be       	out	0x3f, r0	; 63
    710e:	cd bf       	out	0x3d, r28	; 61
    7110:	10 92 78 0f 	sts	0x0F78, r1	; 0x800f78 <Global_HWwirenum>
    7114:	80 e0       	ldi	r24, 0x00	; 0
    7116:	0e 94 46 86 	call	0x10c8c	; 0x10c8c <one_hw_search_device(unsigned char)>
    711a:	0e 94 00 85 	call	0x10a00	; 0x10a00 <tds_update_associate()>
    711e:	70 e0       	ldi	r23, 0x00	; 0
    7120:	60 e0       	ldi	r22, 0x00	; 0
    7122:	88 e6       	ldi	r24, 0x68	; 104
    7124:	90 e0       	ldi	r25, 0x00	; 0
    7126:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>
    712a:	80 91 78 0f 	lds	r24, 0x0F78	; 0x800f78 <Global_HWwirenum>
    712e:	1f 92       	push	r1
    7130:	8f 93       	push	r24
    7132:	86 ea       	ldi	r24, 0xA6	; 166
    7134:	92 e0       	ldi	r25, 0x02	; 2
    7136:	9f 93       	push	r25
    7138:	8f 93       	push	r24
    713a:	8e 01       	movw	r16, r28
    713c:	0f 5f       	subi	r16, 0xFF	; 255
    713e:	1f 4f       	sbci	r17, 0xFF	; 255
    7140:	1f 93       	push	r17
    7142:	0f 93       	push	r16
    7144:	0e 94 a6 d8 	call	0x1b14c	; 0x1b14c <sprintf>
    7148:	b8 01       	movw	r22, r16
    714a:	85 e8       	ldi	r24, 0x85	; 133
    714c:	99 e0       	ldi	r25, 0x09	; 9
    714e:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    7152:	0f 90       	pop	r0
    7154:	0f 90       	pop	r0
    7156:	0f 90       	pop	r0
    7158:	0f 90       	pop	r0
    715a:	0f 90       	pop	r0
    715c:	0f 90       	pop	r0
    715e:	a0 96       	adiw	r28, 0x20	; 32
    7160:	0f b6       	in	r0, 0x3f	; 63
    7162:	f8 94       	cli
    7164:	de bf       	out	0x3e, r29	; 62
    7166:	0f be       	out	0x3f, r0	; 63
    7168:	cd bf       	out	0x3d, r28	; 61
    716a:	df 91       	pop	r29
    716c:	cf 91       	pop	r28
    716e:	1f 91       	pop	r17
    7170:	0f 91       	pop	r16
    7172:	08 95       	ret

00007174 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirejjh():
    7174:	cf 93       	push	r28
    7176:	8b e0       	ldi	r24, 0x0B	; 11
    7178:	48 9f       	mul	r20, r24
    717a:	f0 01       	movw	r30, r0
    717c:	11 24       	eor	r1, r1
    717e:	ea 5c       	subi	r30, 0xCA	; 202
    7180:	f0 4f       	sbci	r31, 0xF0	; 240
    7182:	62 85       	ldd	r22, Z+10	; 0x0a
    7184:	6f 3f       	cpi	r22, 0xFF	; 255
    7186:	b1 f4       	brne	.+44     	; 0x71b4 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)+0x40>
    7188:	c4 2f       	mov	r28, r20
    718a:	70 e0       	ldi	r23, 0x00	; 0
    718c:	60 e0       	ldi	r22, 0x00	; 0
    718e:	84 e6       	ldi	r24, 0x64	; 100
    7190:	90 e0       	ldi	r25, 0x00	; 0
    7192:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>
    7196:	8c eb       	ldi	r24, 0xBC	; 188
    7198:	94 e3       	ldi	r25, 0x34	; 52
    719a:	90 93 47 09 	sts	0x0947, r25	; 0x800947 <dialog_yes_function+0x1>
    719e:	80 93 46 09 	sts	0x0946, r24	; 0x800946 <dialog_yes_function>
    71a2:	c0 93 a5 09 	sts	0x09A5, r28	; 0x8009a5 <dialog_yes_args1>
    71a6:	64 e7       	ldi	r22, 0x74	; 116
    71a8:	77 e5       	ldi	r23, 0x57	; 87
    71aa:	85 e8       	ldi	r24, 0x85	; 133
    71ac:	99 e0       	ldi	r25, 0x09	; 9
    71ae:	cf 91       	pop	r28
    71b0:	0c 94 3f d7 	jmp	0x1ae7e	; 0x1ae7e <strcpy_P>
    71b4:	70 e0       	ldi	r23, 0x00	; 0
    71b6:	84 e0       	ldi	r24, 0x04	; 4
    71b8:	90 e0       	ldi	r25, 0x00	; 0
    71ba:	cf 91       	pop	r28
    71bc:	0c 94 e4 37 	jmp	0x6fc8	; 0x6fc8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>

000071c0 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>:
_Z26display_element_set_stringPchhPFvjjhE():
    71c0:	0f 93       	push	r16
    71c2:	1f 93       	push	r17
    71c4:	cf 93       	push	r28
    71c6:	df 93       	push	r29
    71c8:	06 2f       	mov	r16, r22
    71ca:	14 2f       	mov	r17, r20
    71cc:	e9 01       	movw	r28, r18
    71ce:	bc 01       	movw	r22, r24
    71d0:	85 e6       	ldi	r24, 0x65	; 101
    71d2:	99 e0       	ldi	r25, 0x09	; 9
    71d4:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    71d8:	00 93 64 09 	sts	0x0964, r16	; 0x800964 <dialog_set_string_max_length>
    71dc:	10 93 63 09 	sts	0x0963, r17	; 0x800963 <dialog_set_string_args>
    71e0:	d0 93 61 09 	sts	0x0961, r29	; 0x800961 <dialog_save_string_function+0x1>
    71e4:	c0 93 60 09 	sts	0x0960, r28	; 0x800960 <dialog_save_string_function>
    71e8:	df 91       	pop	r29
    71ea:	cf 91       	pop	r28
    71ec:	1f 91       	pop	r17
    71ee:	0f 91       	pop	r16
    71f0:	08 95       	ret

000071f2 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>:
_Z25display_menu_tds_set_namejjh():
    71f2:	1f 93       	push	r17
    71f4:	cf 93       	push	r28
    71f6:	df 93       	push	r29
    71f8:	00 d0       	rcall	.+0      	; 0x71fa <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0x8>
    71fa:	00 d0       	rcall	.+0      	; 0x71fc <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0xa>
    71fc:	00 d0       	rcall	.+0      	; 0x71fe <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0xc>
    71fe:	1f 92       	push	r1
    7200:	cd b7       	in	r28, 0x3d	; 61
    7202:	de b7       	in	r29, 0x3e	; 62
    7204:	16 2f       	mov	r17, r22
    7206:	be 01       	movw	r22, r28
    7208:	6f 5f       	subi	r22, 0xFF	; 255
    720a:	7f 4f       	sbci	r23, 0xFF	; 255
    720c:	81 2f       	mov	r24, r17
    720e:	0e 94 20 84 	call	0x10840	; 0x10840 <tds_get_name(unsigned char, char*)>
    7212:	70 e0       	ldi	r23, 0x00	; 0
    7214:	60 e0       	ldi	r22, 0x00	; 0
    7216:	87 e6       	ldi	r24, 0x67	; 103
    7218:	90 e0       	ldi	r25, 0x00	; 0
    721a:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>
    721e:	25 e2       	ldi	r18, 0x25	; 37
    7220:	39 e3       	ldi	r19, 0x39	; 57
    7222:	41 2f       	mov	r20, r17
    7224:	68 e0       	ldi	r22, 0x08	; 8
    7226:	ce 01       	movw	r24, r28
    7228:	01 96       	adiw	r24, 0x01	; 1
    722a:	0e 94 e0 38 	call	0x71c0	; 0x71c0 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    722e:	2a 96       	adiw	r28, 0x0a	; 10
    7230:	0f b6       	in	r0, 0x3f	; 63
    7232:	f8 94       	cli
    7234:	de bf       	out	0x3e, r29	; 62
    7236:	0f be       	out	0x3f, r0	; 63
    7238:	cd bf       	out	0x3d, r28	; 61
    723a:	df 91       	pop	r29
    723c:	cf 91       	pop	r28
    723e:	1f 91       	pop	r17
    7240:	08 95       	ret

00007242 <display_element_get_string(char*)>:
_Z26display_element_get_stringPc():
    7242:	65 e6       	ldi	r22, 0x65	; 101
    7244:	79 e0       	ldi	r23, 0x09	; 9
    7246:	0c 94 72 d7 	jmp	0x1aee4	; 0x1aee4 <strcpy>

0000724a <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>:
_Z18menu_tds_save_namejjh():
    724a:	cf 93       	push	r28
    724c:	df 93       	push	r29
    724e:	00 d0       	rcall	.+0      	; 0x7250 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x6>
    7250:	00 d0       	rcall	.+0      	; 0x7252 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x8>
    7252:	00 d0       	rcall	.+0      	; 0x7254 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0xa>
    7254:	1f 92       	push	r1
    7256:	cd b7       	in	r28, 0x3d	; 61
    7258:	de b7       	in	r29, 0x3e	; 62
    725a:	ce 01       	movw	r24, r28
    725c:	01 96       	adiw	r24, 0x01	; 1
    725e:	0e 94 21 39 	call	0x7242	; 0x7242 <display_element_get_string(char*)>
    7262:	89 81       	ldd	r24, Y+1	; 0x01
    7264:	88 23       	and	r24, r24
    7266:	39 f0       	breq	.+14     	; 0x7276 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x2c>
    7268:	be 01       	movw	r22, r28
    726a:	6f 5f       	subi	r22, 0xFF	; 255
    726c:	7f 4f       	sbci	r23, 0xFF	; 255
    726e:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <dialog_set_string_args>
    7272:	0e 94 43 84 	call	0x10886	; 0x10886 <tds_set_name(unsigned char, char*)>
    7276:	2a 96       	adiw	r28, 0x0a	; 10
    7278:	0f b6       	in	r0, 0x3f	; 63
    727a:	f8 94       	cli
    727c:	de bf       	out	0x3e, r29	; 62
    727e:	0f be       	out	0x3f, r0	; 63
    7280:	cd bf       	out	0x3d, r28	; 61
    7282:	df 91       	pop	r29
    7284:	cf 91       	pop	r28
    7286:	08 95       	ret

00007288 <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
    7288:	e5 e6       	ldi	r30, 0x65	; 101
    728a:	f9 e0       	ldi	r31, 0x09	; 9
    728c:	01 90       	ld	r0, Z+
    728e:	00 20       	and	r0, r0
    7290:	e9 f7       	brne	.-6      	; 0x728c <display_element_set_string_add_char(char)+0x4>
    7292:	e6 56       	subi	r30, 0x66	; 102
    7294:	f9 40       	sbci	r31, 0x09	; 9
    7296:	ff 27       	eor	r31, r31
    7298:	20 91 64 09 	lds	r18, 0x0964	; 0x800964 <dialog_set_string_max_length>
    729c:	21 50       	subi	r18, 0x01	; 1
    729e:	33 0b       	sbc	r19, r19
    72a0:	e2 17       	cp	r30, r18
    72a2:	f3 07       	cpc	r31, r19
    72a4:	24 f4       	brge	.+8      	; 0x72ae <display_element_set_string_add_char(char)+0x26>
    72a6:	eb 59       	subi	r30, 0x9B	; 155
    72a8:	f6 4f       	sbci	r31, 0xF6	; 246
    72aa:	80 83       	st	Z, r24
    72ac:	11 82       	std	Z+1, r1	; 0x01
    72ae:	08 95       	ret

000072b0 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_alfajjh():
    72b0:	90 91 62 09 	lds	r25, 0x0962	; 0x800962 <dialog_set_string_keyboard_type>
    72b4:	91 11       	cpse	r25, r1
    72b6:	07 c0       	rjmp	.+14     	; 0x72c6 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x16>
    72b8:	e4 2f       	mov	r30, r20
    72ba:	f0 e0       	ldi	r31, 0x00	; 0
    72bc:	e5 57       	subi	r30, 0x75	; 117
    72be:	fa 4a       	sbci	r31, 0xAA	; 170
    72c0:	84 91       	lpm	r24, Z
    72c2:	0c 94 44 39 	jmp	0x7288	; 0x7288 <display_element_set_string_add_char(char)>
    72c6:	91 30       	cpi	r25, 0x01	; 1
    72c8:	29 f4       	brne	.+10     	; 0x72d4 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x24>
    72ca:	e4 2f       	mov	r30, r20
    72cc:	f0 e0       	ldi	r31, 0x00	; 0
    72ce:	ef 58       	subi	r30, 0x8F	; 143
    72d0:	fa 4a       	sbci	r31, 0xAA	; 170
    72d2:	f6 cf       	rjmp	.-20     	; 0x72c0 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>
    72d4:	92 30       	cpi	r25, 0x02	; 2
    72d6:	a9 f7       	brne	.-22     	; 0x72c2 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x12>
    72d8:	e4 2f       	mov	r30, r20
    72da:	f0 e0       	ldi	r31, 0x00	; 0
    72dc:	e9 5a       	subi	r30, 0xA9	; 169
    72de:	fa 4a       	sbci	r31, 0xAA	; 170
    72e0:	ef cf       	rjmp	.-34     	; 0x72c0 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>

000072e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>:
_Z11show_stringPciihjjb():
    72e2:	6f 92       	push	r6
    72e4:	7f 92       	push	r7
    72e6:	8f 92       	push	r8
    72e8:	9f 92       	push	r9
    72ea:	af 92       	push	r10
    72ec:	bf 92       	push	r11
    72ee:	cf 92       	push	r12
    72f0:	df 92       	push	r13
    72f2:	ef 92       	push	r14
    72f4:	ff 92       	push	r15
    72f6:	0f 93       	push	r16
    72f8:	1f 93       	push	r17
    72fa:	cf 93       	push	r28
    72fc:	df 93       	push	r29
    72fe:	00 d0       	rcall	.+0      	; 0x7300 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)+0x1e>
    7300:	00 d0       	rcall	.+0      	; 0x7302 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)+0x20>
    7302:	cd b7       	in	r28, 0x3d	; 61
    7304:	de b7       	in	r29, 0x3e	; 62
    7306:	3c 01       	movw	r6, r24
    7308:	5b 01       	movw	r10, r22
    730a:	4a 01       	movw	r8, r20
    730c:	d2 2e       	mov	r13, r18
    730e:	6c 2d       	mov	r22, r12
    7310:	89 e8       	ldi	r24, 0x89	; 137
    7312:	9b e0       	ldi	r25, 0x0B	; 11
    7314:	0e 94 a0 8e 	call	0x11d40	; 0x11d40 <LCDWIKI_GUI::Set_Text_Mode(bool)>
    7318:	6d 2d       	mov	r22, r13
    731a:	89 e8       	ldi	r24, 0x89	; 137
    731c:	9b e0       	ldi	r25, 0x0B	; 11
    731e:	0e 94 9d 8e 	call	0x11d3a	; 0x11d3a <LCDWIKI_GUI::Set_Text_Size(unsigned char)>
    7322:	b8 01       	movw	r22, r16
    7324:	89 e8       	ldi	r24, 0x89	; 137
    7326:	9b e0       	ldi	r25, 0x0B	; 11
    7328:	0e 94 95 8e 	call	0x11d2a	; 0x11d2a <LCDWIKI_GUI::Set_Text_colour(unsigned int)>
    732c:	b7 01       	movw	r22, r14
    732e:	89 e8       	ldi	r24, 0x89	; 137
    7330:	9b e0       	ldi	r25, 0x0B	; 11
    7332:	0e 94 99 8e 	call	0x11d32	; 0x11d32 <LCDWIKI_GUI::Set_Text_Back_colour(unsigned int)>
    7336:	b3 01       	movw	r22, r6
    7338:	ce 01       	movw	r24, r28
    733a:	01 96       	adiw	r24, 0x01	; 1
    733c:	0e 94 cd d0 	call	0x1a19a	; 0x1a19a <String::String(char const*)>
    7340:	94 01       	movw	r18, r8
    7342:	a5 01       	movw	r20, r10
    7344:	be 01       	movw	r22, r28
    7346:	6f 5f       	subi	r22, 0xFF	; 255
    7348:	7f 4f       	sbci	r23, 0xFF	; 255
    734a:	89 e8       	ldi	r24, 0x89	; 137
    734c:	9b e0       	ldi	r25, 0x0B	; 11
    734e:	0e 94 26 90 	call	0x1204c	; 0x1204c <LCDWIKI_GUI::Print_String(String, int, int)>
    7352:	ce 01       	movw	r24, r28
    7354:	01 96       	adiw	r24, 0x01	; 1
    7356:	0e 94 5e d0 	call	0x1a0bc	; 0x1a0bc <String::~String()>
    735a:	26 96       	adiw	r28, 0x06	; 6
    735c:	0f b6       	in	r0, 0x3f	; 63
    735e:	f8 94       	cli
    7360:	de bf       	out	0x3e, r29	; 62
    7362:	0f be       	out	0x3f, r0	; 63
    7364:	cd bf       	out	0x3d, r28	; 61
    7366:	df 91       	pop	r29
    7368:	cf 91       	pop	r28
    736a:	1f 91       	pop	r17
    736c:	0f 91       	pop	r16
    736e:	ff 90       	pop	r15
    7370:	ef 90       	pop	r14
    7372:	df 90       	pop	r13
    7374:	cf 90       	pop	r12
    7376:	bf 90       	pop	r11
    7378:	af 90       	pop	r10
    737a:	9f 90       	pop	r9
    737c:	8f 90       	pop	r8
    737e:	7f 90       	pop	r7
    7380:	6f 90       	pop	r6
    7382:	08 95       	ret

00007384 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z32display_element_dialog_show_textjjjjhhPc():
    7384:	cf 92       	push	r12
    7386:	ef 92       	push	r14
    7388:	ff 92       	push	r15
    738a:	0f 93       	push	r16
    738c:	1f 93       	push	r17
    738e:	ab 01       	movw	r20, r22
    7390:	c1 2c       	mov	r12, r1
    7392:	ee 24       	eor	r14, r14
    7394:	ea 94       	dec	r14
    7396:	fe 2c       	mov	r15, r14
    7398:	10 e0       	ldi	r17, 0x00	; 0
    739a:	00 e0       	ldi	r16, 0x00	; 0
    739c:	22 e0       	ldi	r18, 0x02	; 2
    739e:	bc 01       	movw	r22, r24
    73a0:	85 e8       	ldi	r24, 0x85	; 133
    73a2:	99 e0       	ldi	r25, 0x09	; 9
    73a4:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    73a8:	1f 91       	pop	r17
    73aa:	0f 91       	pop	r16
    73ac:	ff 90       	pop	r15
    73ae:	ef 90       	pop	r14
    73b0:	cf 90       	pop	r12
    73b2:	08 95       	ret

000073b4 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z38display_element_show_tds_info_dynamicsjjjjhhPc():
    73b4:	af 92       	push	r10
    73b6:	bf 92       	push	r11
    73b8:	cf 92       	push	r12
    73ba:	df 92       	push	r13
    73bc:	ef 92       	push	r14
    73be:	ff 92       	push	r15
    73c0:	0f 93       	push	r16
    73c2:	1f 93       	push	r17
    73c4:	cf 93       	push	r28
    73c6:	df 93       	push	r29
    73c8:	cd b7       	in	r28, 0x3d	; 61
    73ca:	de b7       	in	r29, 0x3e	; 62
    73cc:	ca 54       	subi	r28, 0x4A	; 74
    73ce:	d1 09       	sbc	r29, r1
    73d0:	0f b6       	in	r0, 0x3f	; 63
    73d2:	f8 94       	cli
    73d4:	de bf       	out	0x3e, r29	; 62
    73d6:	0f be       	out	0x3f, r0	; 63
    73d8:	cd bf       	out	0x3d, r28	; 61
    73da:	6c 01       	movw	r12, r24
    73dc:	5b 01       	movw	r10, r22
    73de:	be 01       	movw	r22, r28
    73e0:	6b 5c       	subi	r22, 0xCB	; 203
    73e2:	7f 4f       	sbci	r23, 0xFF	; 255
    73e4:	8e 2d       	mov	r24, r14
    73e6:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    73ea:	81 30       	cpi	r24, 0x01	; 1
    73ec:	e1 f5       	brne	.+120    	; 0x7466 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb2>
    73ee:	8e e1       	ldi	r24, 0x1E	; 30
    73f0:	e8 9e       	mul	r14, r24
    73f2:	f0 01       	movw	r30, r0
    73f4:	11 24       	eor	r1, r1
    73f6:	e7 58       	subi	r30, 0x87	; 135
    73f8:	f0 4f       	sbci	r31, 0xF0	; 240
    73fa:	65 81       	ldd	r22, Z+5	; 0x05
    73fc:	76 81       	ldd	r23, Z+6	; 0x06
    73fe:	07 2e       	mov	r0, r23
    7400:	00 0c       	add	r0, r0
    7402:	88 0b       	sbc	r24, r24
    7404:	99 0b       	sbc	r25, r25
    7406:	0e 94 14 d2 	call	0x1a428	; 0x1a428 <__floatsisf>
    740a:	20 e0       	ldi	r18, 0x00	; 0
    740c:	30 e0       	ldi	r19, 0x00	; 0
    740e:	4a e7       	ldi	r20, 0x7A	; 122
    7410:	54 e4       	ldi	r21, 0x44	; 68
    7412:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
    7416:	8e 01       	movw	r16, r28
    7418:	05 5e       	subi	r16, 0xE5	; 229
    741a:	1f 4f       	sbci	r17, 0xFF	; 255
    741c:	22 e0       	ldi	r18, 0x02	; 2
    741e:	44 e0       	ldi	r20, 0x04	; 4
    7420:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
    7424:	62 e6       	ldi	r22, 0x62	; 98
    7426:	75 e0       	ldi	r23, 0x05	; 5
    7428:	c8 01       	movw	r24, r16
    742a:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    742e:	6a e2       	ldi	r22, 0x2A	; 42
    7430:	78 e5       	ldi	r23, 0x58	; 88
    7432:	ce 01       	movw	r24, r28
    7434:	01 96       	adiw	r24, 0x01	; 1
    7436:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    743a:	b8 01       	movw	r22, r16
    743c:	ce 01       	movw	r24, r28
    743e:	01 96       	adiw	r24, 0x01	; 1
    7440:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    7444:	a5 01       	movw	r20, r10
    7446:	44 57       	subi	r20, 0x74	; 116
    7448:	5f 4f       	sbci	r21, 0xFF	; 255
    744a:	b6 01       	movw	r22, r12
    744c:	66 5f       	subi	r22, 0xF6	; 246
    744e:	7f 4f       	sbci	r23, 0xFF	; 255
    7450:	c1 2c       	mov	r12, r1
    7452:	ee 24       	eor	r14, r14
    7454:	ea 94       	dec	r14
    7456:	fe 2c       	mov	r15, r14
    7458:	10 e0       	ldi	r17, 0x00	; 0
    745a:	00 e0       	ldi	r16, 0x00	; 0
    745c:	22 e0       	ldi	r18, 0x02	; 2
    745e:	ce 01       	movw	r24, r28
    7460:	01 96       	adiw	r24, 0x01	; 1
    7462:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7466:	c6 5b       	subi	r28, 0xB6	; 182
    7468:	df 4f       	sbci	r29, 0xFF	; 255
    746a:	0f b6       	in	r0, 0x3f	; 63
    746c:	f8 94       	cli
    746e:	de bf       	out	0x3e, r29	; 62
    7470:	0f be       	out	0x3f, r0	; 63
    7472:	cd bf       	out	0x3d, r28	; 61
    7474:	df 91       	pop	r29
    7476:	cf 91       	pop	r28
    7478:	1f 91       	pop	r17
    747a:	0f 91       	pop	r16
    747c:	ff 90       	pop	r15
    747e:	ef 90       	pop	r14
    7480:	df 90       	pop	r13
    7482:	cf 90       	pop	r12
    7484:	bf 90       	pop	r11
    7486:	af 90       	pop	r10
    7488:	08 95       	ret

0000748a <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z36display_element_show_tds_info_staticjjjjhhPc():
    748a:	2f 92       	push	r2
    748c:	3f 92       	push	r3
    748e:	4f 92       	push	r4
    7490:	5f 92       	push	r5
    7492:	6f 92       	push	r6
    7494:	7f 92       	push	r7
    7496:	8f 92       	push	r8
    7498:	9f 92       	push	r9
    749a:	af 92       	push	r10
    749c:	bf 92       	push	r11
    749e:	cf 92       	push	r12
    74a0:	df 92       	push	r13
    74a2:	ef 92       	push	r14
    74a4:	ff 92       	push	r15
    74a6:	0f 93       	push	r16
    74a8:	1f 93       	push	r17
    74aa:	cf 93       	push	r28
    74ac:	df 93       	push	r29
    74ae:	cd b7       	in	r28, 0x3d	; 61
    74b0:	de b7       	in	r29, 0x3e	; 62
    74b2:	ca 54       	subi	r28, 0x4A	; 74
    74b4:	d1 09       	sbc	r29, r1
    74b6:	0f b6       	in	r0, 0x3f	; 63
    74b8:	f8 94       	cli
    74ba:	de bf       	out	0x3e, r29	; 62
    74bc:	0f be       	out	0x3f, r0	; 63
    74be:	cd bf       	out	0x3d, r28	; 61
    74c0:	4c 01       	movw	r8, r24
    74c2:	2b 01       	movw	r4, r22
    74c4:	5a 01       	movw	r10, r20
    74c6:	89 01       	movw	r16, r18
    74c8:	de 2c       	mov	r13, r14
    74ca:	70 e0       	ldi	r23, 0x00	; 0
    74cc:	60 e0       	ldi	r22, 0x00	; 0
    74ce:	89 e8       	ldi	r24, 0x89	; 137
    74d0:	9b e0       	ldi	r25, 0x0B	; 11
    74d2:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    74d6:	04 0d       	add	r16, r4
    74d8:	15 1d       	adc	r17, r5
    74da:	94 01       	movw	r18, r8
    74dc:	2a 0d       	add	r18, r10
    74de:	3b 1d       	adc	r19, r11
    74e0:	a2 01       	movw	r20, r4
    74e2:	b4 01       	movw	r22, r8
    74e4:	89 e8       	ldi	r24, 0x89	; 137
    74e6:	9b e0       	ldi	r25, 0x0B	; 11
    74e8:	0e 94 44 8e 	call	0x11c88	; 0x11c88 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    74ec:	be 01       	movw	r22, r28
    74ee:	6b 5c       	subi	r22, 0xCB	; 203
    74f0:	7f 4f       	sbci	r23, 0xFF	; 255
    74f2:	8e 2d       	mov	r24, r14
    74f4:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    74f8:	12 01       	movw	r2, r4
    74fa:	28 e2       	ldi	r18, 0x28	; 40
    74fc:	22 0e       	add	r2, r18
    74fe:	31 1c       	adc	r3, r1
    7500:	9e 01       	movw	r18, r28
    7502:	25 5e       	subi	r18, 0xE5	; 229
    7504:	3f 4f       	sbci	r19, 0xFF	; 255
    7506:	59 01       	movw	r10, r18
    7508:	81 30       	cpi	r24, 0x01	; 1
    750a:	09 f0       	breq	.+2      	; 0x750e <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x84>
    750c:	ca c0       	rjmp	.+404    	; 0x76a2 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x218>
    750e:	00 e1       	ldi	r16, 0x10	; 16
    7510:	28 e0       	ldi	r18, 0x08	; 8
    7512:	ae 01       	movw	r20, r28
    7514:	4a 5c       	subi	r20, 0xCA	; 202
    7516:	5f 4f       	sbci	r21, 0xFF	; 255
    7518:	6a e3       	ldi	r22, 0x3A	; 58
    751a:	ce 01       	movw	r24, r28
    751c:	01 96       	adiw	r24, 0x01	; 1
    751e:	3c 01       	movw	r6, r24
    7520:	0e 94 ba b3 	call	0x16774	; 0x16774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    7524:	7f 92       	push	r7
    7526:	6f 92       	push	r6
    7528:	80 ec       	ldi	r24, 0xC0	; 192
    752a:	92 e0       	ldi	r25, 0x02	; 2
    752c:	9f 93       	push	r25
    752e:	8f 93       	push	r24
    7530:	bf 92       	push	r11
    7532:	af 92       	push	r10
    7534:	0e 94 a6 d8 	call	0x1b14c	; 0x1b14c <sprintf>
    7538:	9a e0       	ldi	r25, 0x0A	; 10
    753a:	89 0e       	add	r8, r25
    753c:	91 1c       	adc	r9, r1
    753e:	a2 01       	movw	r20, r4
    7540:	4b 5a       	subi	r20, 0xAB	; 171
    7542:	5f 4f       	sbci	r21, 0xFF	; 255
    7544:	c1 2c       	mov	r12, r1
    7546:	ee 24       	eor	r14, r14
    7548:	ea 94       	dec	r14
    754a:	fe 2c       	mov	r15, r14
    754c:	10 e0       	ldi	r17, 0x00	; 0
    754e:	00 e0       	ldi	r16, 0x00	; 0
    7550:	21 e0       	ldi	r18, 0x01	; 1
    7552:	b4 01       	movw	r22, r8
    7554:	c5 01       	movw	r24, r10
    7556:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    755a:	64 ee       	ldi	r22, 0xE4	; 228
    755c:	76 e5       	ldi	r23, 0x56	; 86
    755e:	c3 01       	movw	r24, r6
    7560:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    7564:	85 e3       	ldi	r24, 0x35	; 53
    7566:	90 e0       	ldi	r25, 0x00	; 0
    7568:	8c 0f       	add	r24, r28
    756a:	9d 1f       	adc	r25, r29
    756c:	0c 96       	adiw	r24, 0x0c	; 12
    756e:	9f 93       	push	r25
    7570:	8f 93       	push	r24
    7572:	7f 92       	push	r7
    7574:	6f 92       	push	r6
    7576:	88 ec       	ldi	r24, 0xC8	; 200
    7578:	92 e0       	ldi	r25, 0x02	; 2
    757a:	9f 93       	push	r25
    757c:	8f 93       	push	r24
    757e:	bf 92       	push	r11
    7580:	af 92       	push	r10
    7582:	0e 94 a6 d8 	call	0x1b14c	; 0x1b14c <sprintf>
    7586:	22 e0       	ldi	r18, 0x02	; 2
    7588:	a1 01       	movw	r20, r2
    758a:	b4 01       	movw	r22, r8
    758c:	c5 01       	movw	r24, r10
    758e:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7592:	21 96       	adiw	r28, 0x01	; 1
    7594:	6e ad       	ldd	r22, Y+62	; 0x3e
    7596:	7f ad       	ldd	r23, Y+63	; 0x3f
    7598:	21 97       	sbiw	r28, 0x01	; 1
    759a:	07 2e       	mov	r0, r23
    759c:	00 0c       	add	r0, r0
    759e:	88 0b       	sbc	r24, r24
    75a0:	99 0b       	sbc	r25, r25
    75a2:	0e 94 14 d2 	call	0x1a428	; 0x1a428 <__floatsisf>
    75a6:	20 e0       	ldi	r18, 0x00	; 0
    75a8:	30 e0       	ldi	r19, 0x00	; 0
    75aa:	4a e7       	ldi	r20, 0x7A	; 122
    75ac:	54 e4       	ldi	r21, 0x44	; 68
    75ae:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
    75b2:	85 01       	movw	r16, r10
    75b4:	22 e0       	ldi	r18, 0x02	; 2
    75b6:	44 e0       	ldi	r20, 0x04	; 4
    75b8:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
    75bc:	62 e6       	ldi	r22, 0x62	; 98
    75be:	75 e0       	ldi	r23, 0x05	; 5
    75c0:	c5 01       	movw	r24, r10
    75c2:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    75c6:	62 e2       	ldi	r22, 0x22	; 34
    75c8:	78 e5       	ldi	r23, 0x58	; 88
    75ca:	c3 01       	movw	r24, r6
    75cc:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    75d0:	b5 01       	movw	r22, r10
    75d2:	c3 01       	movw	r24, r6
    75d4:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    75d8:	a2 01       	movw	r20, r4
    75da:	44 5c       	subi	r20, 0xC4	; 196
    75dc:	5f 4f       	sbci	r21, 0xFF	; 255
    75de:	10 e0       	ldi	r17, 0x00	; 0
    75e0:	00 e0       	ldi	r16, 0x00	; 0
    75e2:	22 e0       	ldi	r18, 0x02	; 2
    75e4:	b4 01       	movw	r22, r8
    75e6:	c3 01       	movw	r24, r6
    75e8:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    75ec:	6a e1       	ldi	r22, 0x1A	; 26
    75ee:	77 e5       	ldi	r23, 0x57	; 87
    75f0:	c3 01       	movw	r24, r6
    75f2:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    75f6:	2a 96       	adiw	r28, 0x0a	; 10
    75f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    75fa:	2a 97       	sbiw	r28, 0x0a	; 10
    75fc:	1f 92       	push	r1
    75fe:	8f 93       	push	r24
    7600:	7f 92       	push	r7
    7602:	6f 92       	push	r6
    7604:	8f ec       	ldi	r24, 0xCF	; 207
    7606:	92 e0       	ldi	r25, 0x02	; 2
    7608:	9f 93       	push	r25
    760a:	8f 93       	push	r24
    760c:	bf 92       	push	r11
    760e:	af 92       	push	r10
    7610:	0e 94 a6 d8 	call	0x1b14c	; 0x1b14c <sprintf>
    7614:	a2 01       	movw	r20, r4
    7616:	4c 59       	subi	r20, 0x9C	; 156
    7618:	5f 4f       	sbci	r21, 0xFF	; 255
    761a:	22 e0       	ldi	r18, 0x02	; 2
    761c:	b4 01       	movw	r22, r8
    761e:	c5 01       	movw	r24, r10
    7620:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7624:	6d ed       	ldi	r22, 0xDD	; 221
    7626:	76 e5       	ldi	r23, 0x56	; 86
    7628:	c3 01       	movw	r24, r6
    762a:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    762e:	2e e1       	ldi	r18, 0x1E	; 30
    7630:	d2 9e       	mul	r13, r18
    7632:	f0 01       	movw	r30, r0
    7634:	11 24       	eor	r1, r1
    7636:	e7 58       	subi	r30, 0x87	; 135
    7638:	f0 4f       	sbci	r31, 0xF0	; 240
    763a:	83 8d       	ldd	r24, Z+27	; 0x1b
    763c:	1f 92       	push	r1
    763e:	8f 93       	push	r24
    7640:	7f 92       	push	r7
    7642:	6f 92       	push	r6
    7644:	87 ed       	ldi	r24, 0xD7	; 215
    7646:	92 e0       	ldi	r25, 0x02	; 2
    7648:	9f 93       	push	r25
    764a:	8f 93       	push	r24
    764c:	bf 92       	push	r11
    764e:	af 92       	push	r10
    7650:	0e 94 a6 d8 	call	0x1b14c	; 0x1b14c <sprintf>
    7654:	a2 01       	movw	r20, r4
    7656:	48 58       	subi	r20, 0x88	; 136
    7658:	5f 4f       	sbci	r21, 0xFF	; 255
    765a:	22 e0       	ldi	r18, 0x02	; 2
    765c:	b4 01       	movw	r22, r8
    765e:	c5 01       	movw	r24, r10
    7660:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7664:	0f b6       	in	r0, 0x3f	; 63
    7666:	f8 94       	cli
    7668:	de bf       	out	0x3e, r29	; 62
    766a:	0f be       	out	0x3f, r0	; 63
    766c:	cd bf       	out	0x3d, r28	; 61
    766e:	c6 5b       	subi	r28, 0xB6	; 182
    7670:	df 4f       	sbci	r29, 0xFF	; 255
    7672:	0f b6       	in	r0, 0x3f	; 63
    7674:	f8 94       	cli
    7676:	de bf       	out	0x3e, r29	; 62
    7678:	0f be       	out	0x3f, r0	; 63
    767a:	cd bf       	out	0x3d, r28	; 61
    767c:	df 91       	pop	r29
    767e:	cf 91       	pop	r28
    7680:	1f 91       	pop	r17
    7682:	0f 91       	pop	r16
    7684:	ff 90       	pop	r15
    7686:	ef 90       	pop	r14
    7688:	df 90       	pop	r13
    768a:	cf 90       	pop	r12
    768c:	bf 90       	pop	r11
    768e:	af 90       	pop	r10
    7690:	9f 90       	pop	r9
    7692:	8f 90       	pop	r8
    7694:	7f 90       	pop	r7
    7696:	6f 90       	pop	r6
    7698:	5f 90       	pop	r5
    769a:	4f 90       	pop	r4
    769c:	3f 90       	pop	r3
    769e:	2f 90       	pop	r2
    76a0:	08 95       	ret
    76a2:	6c e5       	ldi	r22, 0x5C	; 92
    76a4:	76 e5       	ldi	r23, 0x56	; 86
    76a6:	c9 01       	movw	r24, r18
    76a8:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    76ac:	b4 01       	movw	r22, r8
    76ae:	67 5e       	subi	r22, 0xE7	; 231
    76b0:	7f 4f       	sbci	r23, 0xFF	; 255
    76b2:	c1 2c       	mov	r12, r1
    76b4:	ee 24       	eor	r14, r14
    76b6:	ea 94       	dec	r14
    76b8:	fe 2c       	mov	r15, r14
    76ba:	00 e0       	ldi	r16, 0x00	; 0
    76bc:	18 ef       	ldi	r17, 0xF8	; 248
    76be:	24 e0       	ldi	r18, 0x04	; 4
    76c0:	a1 01       	movw	r20, r2
    76c2:	c5 01       	movw	r24, r10
    76c4:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    76c8:	d2 cf       	rjmp	.-92     	; 0x766e <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1e4>

000076ca <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_dialog_set_variablejjjjhhPc():
    76ca:	2f 92       	push	r2
    76cc:	3f 92       	push	r3
    76ce:	4f 92       	push	r4
    76d0:	5f 92       	push	r5
    76d2:	6f 92       	push	r6
    76d4:	7f 92       	push	r7
    76d6:	8f 92       	push	r8
    76d8:	9f 92       	push	r9
    76da:	af 92       	push	r10
    76dc:	bf 92       	push	r11
    76de:	cf 92       	push	r12
    76e0:	df 92       	push	r13
    76e2:	ef 92       	push	r14
    76e4:	ff 92       	push	r15
    76e6:	0f 93       	push	r16
    76e8:	1f 93       	push	r17
    76ea:	cf 93       	push	r28
    76ec:	df 93       	push	r29
    76ee:	cd b7       	in	r28, 0x3d	; 61
    76f0:	de b7       	in	r29, 0x3e	; 62
    76f2:	2c 97       	sbiw	r28, 0x0c	; 12
    76f4:	0f b6       	in	r0, 0x3f	; 63
    76f6:	f8 94       	cli
    76f8:	de bf       	out	0x3e, r29	; 62
    76fa:	0f be       	out	0x3f, r0	; 63
    76fc:	cd bf       	out	0x3d, r28	; 61
    76fe:	5c 01       	movw	r10, r24
    7700:	7b 01       	movw	r14, r22
    7702:	1a 01       	movw	r2, r20
    7704:	29 01       	movw	r4, r18
    7706:	0c 87       	std	Y+12, r16	; 0x0c
    7708:	36 01       	movw	r6, r12
    770a:	70 e0       	ldi	r23, 0x00	; 0
    770c:	60 e0       	ldi	r22, 0x00	; 0
    770e:	89 e8       	ldi	r24, 0x89	; 137
    7710:	9b e0       	ldi	r25, 0x0B	; 11
    7712:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7716:	d1 2c       	mov	r13, r1
    7718:	c1 2c       	mov	r12, r1
    771a:	97 01       	movw	r18, r14
    771c:	24 0d       	add	r18, r4
    771e:	35 1d       	adc	r19, r5
    7720:	3b 87       	std	Y+11, r19	; 0x0b
    7722:	2a 87       	std	Y+10, r18	; 0x0a
    7724:	45 01       	movw	r8, r10
    7726:	82 0c       	add	r8, r2
    7728:	93 1c       	adc	r9, r3
    772a:	0a 85       	ldd	r16, Y+10	; 0x0a
    772c:	1b 85       	ldd	r17, Y+11	; 0x0b
    772e:	0c 19       	sub	r16, r12
    7730:	1d 09       	sbc	r17, r13
    7732:	94 01       	movw	r18, r8
    7734:	2c 19       	sub	r18, r12
    7736:	3d 09       	sbc	r19, r13
    7738:	a6 01       	movw	r20, r12
    773a:	4e 0d       	add	r20, r14
    773c:	5f 1d       	adc	r21, r15
    773e:	b6 01       	movw	r22, r12
    7740:	6a 0d       	add	r22, r10
    7742:	7b 1d       	adc	r23, r11
    7744:	89 e8       	ldi	r24, 0x89	; 137
    7746:	9b e0       	ldi	r25, 0x0B	; 11
    7748:	0e 94 44 8e 	call	0x11c88	; 0x11c88 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    774c:	3f ef       	ldi	r19, 0xFF	; 255
    774e:	c3 1a       	sub	r12, r19
    7750:	d3 0a       	sbc	r13, r19
    7752:	83 e0       	ldi	r24, 0x03	; 3
    7754:	c8 16       	cp	r12, r24
    7756:	d1 04       	cpc	r13, r1
    7758:	41 f7       	brne	.-48     	; 0x772a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x60>
    775a:	6f ef       	ldi	r22, 0xFF	; 255
    775c:	7f ef       	ldi	r23, 0xFF	; 255
    775e:	89 e8       	ldi	r24, 0x89	; 137
    7760:	9b e0       	ldi	r25, 0x0B	; 11
    7762:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7766:	82 01       	movw	r16, r4
    7768:	03 50       	subi	r16, 0x03	; 3
    776a:	11 09       	sbc	r17, r1
    776c:	0e 0d       	add	r16, r14
    776e:	1f 1d       	adc	r17, r15
    7770:	91 01       	movw	r18, r2
    7772:	23 50       	subi	r18, 0x03	; 3
    7774:	31 09       	sbc	r19, r1
    7776:	2a 0d       	add	r18, r10
    7778:	3b 1d       	adc	r19, r11
    777a:	a7 01       	movw	r20, r14
    777c:	4d 5f       	subi	r20, 0xFD	; 253
    777e:	5f 4f       	sbci	r21, 0xFF	; 255
    7780:	b5 01       	movw	r22, r10
    7782:	6d 5f       	subi	r22, 0xFD	; 253
    7784:	7f 4f       	sbci	r23, 0xFF	; 255
    7786:	89 e8       	ldi	r24, 0x89	; 137
    7788:	9b e0       	ldi	r25, 0x0B	; 11
    778a:	0e 94 bd 8d 	call	0x11b7a	; 0x11b7a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    778e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7790:	c9 2e       	mov	r12, r25
    7792:	d1 2c       	mov	r13, r1
    7794:	25 e1       	ldi	r18, 0x15	; 21
    7796:	92 9f       	mul	r25, r18
    7798:	f0 01       	movw	r30, r0
    779a:	11 24       	eor	r1, r1
    779c:	ea 55       	subi	r30, 0x5A	; 90
    779e:	f6 4f       	sbci	r31, 0xF6	; 246
    77a0:	85 85       	ldd	r24, Z+13	; 0x0d
    77a2:	9e 01       	movw	r18, r28
    77a4:	2f 5f       	subi	r18, 0xFF	; 255
    77a6:	3f 4f       	sbci	r19, 0xFF	; 255
    77a8:	49 01       	movw	r8, r18
    77aa:	81 11       	cpse	r24, r1
    77ac:	09 c0       	rjmp	.+18     	; 0x77c0 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xf6>
    77ae:	60 81       	ld	r22, Z
    77b0:	71 81       	ldd	r23, Z+1	; 0x01
    77b2:	82 81       	ldd	r24, Z+2	; 0x02
    77b4:	93 81       	ldd	r25, Z+3	; 0x03
    77b6:	89 01       	movw	r16, r18
    77b8:	22 e0       	ldi	r18, 0x02	; 2
    77ba:	44 e0       	ldi	r20, 0x04	; 4
    77bc:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
    77c0:	85 e1       	ldi	r24, 0x15	; 21
    77c2:	8c 9d       	mul	r24, r12
    77c4:	f0 01       	movw	r30, r0
    77c6:	8d 9d       	mul	r24, r13
    77c8:	f0 0d       	add	r31, r0
    77ca:	11 24       	eor	r1, r1
    77cc:	ea 55       	subi	r30, 0x5A	; 90
    77ce:	f6 4f       	sbci	r31, 0xF6	; 246
    77d0:	85 85       	ldd	r24, Z+13	; 0x0d
    77d2:	81 30       	cpi	r24, 0x01	; 1
    77d4:	59 f4       	brne	.+22     	; 0x77ec <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x122>
    77d6:	60 81       	ld	r22, Z
    77d8:	71 81       	ldd	r23, Z+1	; 0x01
    77da:	82 81       	ldd	r24, Z+2	; 0x02
    77dc:	93 81       	ldd	r25, Z+3	; 0x03
    77de:	0e 94 dc d1 	call	0x1a3b8	; 0x1a3b8 <__fixsfsi>
    77e2:	cb 01       	movw	r24, r22
itoa():
    77e4:	4a e0       	ldi	r20, 0x0A	; 10
    77e6:	b4 01       	movw	r22, r8
    77e8:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z35display_element_dialog_set_variablejjjjhhPc():
    77ec:	70 e0       	ldi	r23, 0x00	; 0
    77ee:	60 e0       	ldi	r22, 0x00	; 0
    77f0:	89 e8       	ldi	r24, 0x89	; 137
    77f2:	9b e0       	ldi	r25, 0x0B	; 11
    77f4:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    77f8:	f4 01       	movw	r30, r8
    77fa:	01 90       	ld	r0, Z+
    77fc:	00 20       	and	r0, r0
    77fe:	e9 f7       	brne	.-6      	; 0x77fa <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x130>
    7800:	31 97       	sbiw	r30, 0x01	; 1
    7802:	e8 19       	sub	r30, r8
    7804:	f9 09       	sbc	r31, r9
    7806:	3c e0       	ldi	r19, 0x0C	; 12
    7808:	43 1a       	sub	r4, r19
    780a:	51 08       	sbc	r5, r1
    780c:	56 94       	lsr	r5
    780e:	47 94       	ror	r4
    7810:	81 e0       	ldi	r24, 0x01	; 1
    7812:	e8 1a       	sub	r14, r24
    7814:	f1 08       	sbc	r15, r1
    7816:	4e 0c       	add	r4, r14
    7818:	5f 1c       	adc	r5, r15
_Z22show_string_size_widthhh():
    781a:	96 e0       	ldi	r25, 0x06	; 6
    781c:	e9 9f       	mul	r30, r25
    781e:	f0 01       	movw	r30, r0
    7820:	11 24       	eor	r1, r1
    7822:	ee 0f       	add	r30, r30
    7824:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhhPc():
    7826:	b1 01       	movw	r22, r2
    7828:	6e 1b       	sub	r22, r30
    782a:	7f 0b       	sbc	r23, r31
    782c:	76 95       	lsr	r23
    782e:	67 95       	ror	r22
    7830:	6a 0d       	add	r22, r10
    7832:	7b 1d       	adc	r23, r11
    7834:	c1 2c       	mov	r12, r1
    7836:	ee 24       	eor	r14, r14
    7838:	ea 94       	dec	r14
    783a:	fe 2c       	mov	r15, r14
    783c:	10 e0       	ldi	r17, 0x00	; 0
    783e:	00 e0       	ldi	r16, 0x00	; 0
    7840:	22 e0       	ldi	r18, 0x02	; 2
    7842:	a2 01       	movw	r20, r4
    7844:	c4 01       	movw	r24, r8
    7846:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    784a:	f3 01       	movw	r30, r6
    784c:	80 81       	ld	r24, Z
    784e:	88 23       	and	r24, r24
    7850:	41 f0       	breq	.+16     	; 0x7862 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x198>
    7852:	b5 01       	movw	r22, r10
    7854:	6b 5f       	subi	r22, 0xFB	; 251
    7856:	7f 4f       	sbci	r23, 0xFF	; 255
    7858:	22 e0       	ldi	r18, 0x02	; 2
    785a:	a2 01       	movw	r20, r4
    785c:	c3 01       	movw	r24, r6
    785e:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7862:	2c 96       	adiw	r28, 0x0c	; 12
    7864:	0f b6       	in	r0, 0x3f	; 63
    7866:	f8 94       	cli
    7868:	de bf       	out	0x3e, r29	; 62
    786a:	0f be       	out	0x3f, r0	; 63
    786c:	cd bf       	out	0x3d, r28	; 61
    786e:	df 91       	pop	r29
    7870:	cf 91       	pop	r28
    7872:	1f 91       	pop	r17
    7874:	0f 91       	pop	r16
    7876:	ff 90       	pop	r15
    7878:	ef 90       	pop	r14
    787a:	df 90       	pop	r13
    787c:	cf 90       	pop	r12
    787e:	bf 90       	pop	r11
    7880:	af 90       	pop	r10
    7882:	9f 90       	pop	r9
    7884:	8f 90       	pop	r8
    7886:	7f 90       	pop	r7
    7888:	6f 90       	pop	r6
    788a:	5f 90       	pop	r5
    788c:	4f 90       	pop	r4
    788e:	3f 90       	pop	r3
    7890:	2f 90       	pop	r2
    7892:	08 95       	ret

00007894 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z33display_element_dialog_set_stringjjjjhhPc():
    7894:	4f 92       	push	r4
    7896:	5f 92       	push	r5
    7898:	6f 92       	push	r6
    789a:	7f 92       	push	r7
    789c:	8f 92       	push	r8
    789e:	9f 92       	push	r9
    78a0:	af 92       	push	r10
    78a2:	bf 92       	push	r11
    78a4:	cf 92       	push	r12
    78a6:	df 92       	push	r13
    78a8:	ef 92       	push	r14
    78aa:	ff 92       	push	r15
    78ac:	0f 93       	push	r16
    78ae:	1f 93       	push	r17
    78b0:	cf 93       	push	r28
    78b2:	df 93       	push	r29
    78b4:	6c 01       	movw	r12, r24
    78b6:	eb 01       	movw	r28, r22
    78b8:	2a 01       	movw	r4, r20
    78ba:	39 01       	movw	r6, r18
    78bc:	70 e0       	ldi	r23, 0x00	; 0
    78be:	60 e0       	ldi	r22, 0x00	; 0
    78c0:	89 e8       	ldi	r24, 0x89	; 137
    78c2:	9b e0       	ldi	r25, 0x0B	; 11
    78c4:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    78c8:	f1 2c       	mov	r15, r1
    78ca:	e1 2c       	mov	r14, r1
    78cc:	4e 01       	movw	r8, r28
    78ce:	86 0c       	add	r8, r6
    78d0:	97 1c       	adc	r9, r7
    78d2:	56 01       	movw	r10, r12
    78d4:	a4 0c       	add	r10, r4
    78d6:	b5 1c       	adc	r11, r5
    78d8:	84 01       	movw	r16, r8
    78da:	0e 19       	sub	r16, r14
    78dc:	1f 09       	sbc	r17, r15
    78de:	95 01       	movw	r18, r10
    78e0:	2e 19       	sub	r18, r14
    78e2:	3f 09       	sbc	r19, r15
    78e4:	a7 01       	movw	r20, r14
    78e6:	4c 0f       	add	r20, r28
    78e8:	5d 1f       	adc	r21, r29
    78ea:	b7 01       	movw	r22, r14
    78ec:	6c 0d       	add	r22, r12
    78ee:	7d 1d       	adc	r23, r13
    78f0:	89 e8       	ldi	r24, 0x89	; 137
    78f2:	9b e0       	ldi	r25, 0x0B	; 11
    78f4:	0e 94 44 8e 	call	0x11c88	; 0x11c88 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    78f8:	2f ef       	ldi	r18, 0xFF	; 255
    78fa:	e2 1a       	sub	r14, r18
    78fc:	f2 0a       	sbc	r15, r18
    78fe:	83 e0       	ldi	r24, 0x03	; 3
    7900:	e8 16       	cp	r14, r24
    7902:	f1 04       	cpc	r15, r1
    7904:	49 f7       	brne	.-46     	; 0x78d8 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x44>
    7906:	6f ef       	ldi	r22, 0xFF	; 255
    7908:	7f ef       	ldi	r23, 0xFF	; 255
    790a:	89 e8       	ldi	r24, 0x89	; 137
    790c:	9b e0       	ldi	r25, 0x0B	; 11
    790e:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7912:	83 01       	movw	r16, r6
    7914:	03 50       	subi	r16, 0x03	; 3
    7916:	11 09       	sbc	r17, r1
    7918:	0c 0f       	add	r16, r28
    791a:	1d 1f       	adc	r17, r29
    791c:	92 01       	movw	r18, r4
    791e:	23 50       	subi	r18, 0x03	; 3
    7920:	31 09       	sbc	r19, r1
    7922:	2c 0d       	add	r18, r12
    7924:	3d 1d       	adc	r19, r13
    7926:	ae 01       	movw	r20, r28
    7928:	4d 5f       	subi	r20, 0xFD	; 253
    792a:	5f 4f       	sbci	r21, 0xFF	; 255
    792c:	b6 01       	movw	r22, r12
    792e:	6d 5f       	subi	r22, 0xFD	; 253
    7930:	7f 4f       	sbci	r23, 0xFF	; 255
    7932:	89 e8       	ldi	r24, 0x89	; 137
    7934:	9b e0       	ldi	r25, 0x0B	; 11
    7936:	0e 94 bd 8d 	call	0x11b7a	; 0x11b7a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    793a:	70 e0       	ldi	r23, 0x00	; 0
    793c:	60 e0       	ldi	r22, 0x00	; 0
    793e:	89 e8       	ldi	r24, 0x89	; 137
    7940:	9b e0       	ldi	r25, 0x0B	; 11
    7942:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7946:	85 e6       	ldi	r24, 0x65	; 101
    7948:	99 e0       	ldi	r25, 0x09	; 9
    794a:	fc 01       	movw	r30, r24
    794c:	01 90       	ld	r0, Z+
    794e:	00 20       	and	r0, r0
    7950:	e9 f7       	brne	.-6      	; 0x794c <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb8>
    7952:	cf 01       	movw	r24, r30
    7954:	86 56       	subi	r24, 0x66	; 102
    7956:	99 40       	sbci	r25, 0x09	; 9
    7958:	a3 01       	movw	r20, r6
    795a:	4c 50       	subi	r20, 0x0C	; 12
    795c:	51 09       	sbc	r21, r1
    795e:	56 95       	lsr	r21
    7960:	47 95       	ror	r20
    7962:	21 97       	sbiw	r28, 0x01	; 1
    7964:	4c 0f       	add	r20, r28
    7966:	5d 1f       	adc	r21, r29
_Z22show_string_size_widthhh():
    7968:	f6 e0       	ldi	r31, 0x06	; 6
    796a:	8f 9f       	mul	r24, r31
    796c:	c0 01       	movw	r24, r0
    796e:	11 24       	eor	r1, r1
    7970:	88 0f       	add	r24, r24
    7972:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhhPc():
    7974:	b2 01       	movw	r22, r4
    7976:	68 1b       	sub	r22, r24
    7978:	79 0b       	sbc	r23, r25
    797a:	76 95       	lsr	r23
    797c:	67 95       	ror	r22
    797e:	6c 0d       	add	r22, r12
    7980:	7d 1d       	adc	r23, r13
    7982:	c1 2c       	mov	r12, r1
    7984:	ee 24       	eor	r14, r14
    7986:	ea 94       	dec	r14
    7988:	fe 2c       	mov	r15, r14
    798a:	10 e0       	ldi	r17, 0x00	; 0
    798c:	00 e0       	ldi	r16, 0x00	; 0
    798e:	22 e0       	ldi	r18, 0x02	; 2
    7990:	85 e6       	ldi	r24, 0x65	; 101
    7992:	99 e0       	ldi	r25, 0x09	; 9
    7994:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7998:	df 91       	pop	r29
    799a:	cf 91       	pop	r28
    799c:	1f 91       	pop	r17
    799e:	0f 91       	pop	r16
    79a0:	ff 90       	pop	r15
    79a2:	ef 90       	pop	r14
    79a4:	df 90       	pop	r13
    79a6:	cf 90       	pop	r12
    79a8:	bf 90       	pop	r11
    79aa:	af 90       	pop	r10
    79ac:	9f 90       	pop	r9
    79ae:	8f 90       	pop	r8
    79b0:	7f 90       	pop	r7
    79b2:	6f 90       	pop	r6
    79b4:	5f 90       	pop	r5
    79b6:	4f 90       	pop	r4
    79b8:	08 95       	ret

000079ba <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_time_1jjjjhhPc():
    79ba:	6f 92       	push	r6
    79bc:	7f 92       	push	r7
    79be:	8f 92       	push	r8
    79c0:	9f 92       	push	r9
    79c2:	af 92       	push	r10
    79c4:	bf 92       	push	r11
    79c6:	cf 92       	push	r12
    79c8:	ef 92       	push	r14
    79ca:	ff 92       	push	r15
    79cc:	0f 93       	push	r16
    79ce:	1f 93       	push	r17
    79d0:	cf 93       	push	r28
    79d2:	df 93       	push	r29
    79d4:	cd b7       	in	r28, 0x3d	; 61
    79d6:	de b7       	in	r29, 0x3e	; 62
    79d8:	68 97       	sbiw	r28, 0x18	; 24
    79da:	0f b6       	in	r0, 0x3f	; 63
    79dc:	f8 94       	cli
    79de:	de bf       	out	0x3e, r29	; 62
    79e0:	0f be       	out	0x3f, r0	; 63
    79e2:	cd bf       	out	0x3d, r28	; 61
    79e4:	4c 01       	movw	r8, r24
    79e6:	3b 01       	movw	r6, r22
    79e8:	65 e4       	ldi	r22, 0x45	; 69
    79ea:	78 e5       	ldi	r23, 0x58	; 88
    79ec:	ce 01       	movw	r24, r28
    79ee:	01 96       	adiw	r24, 0x01	; 1
    79f0:	5c 01       	movw	r10, r24
    79f2:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    79f6:	a3 01       	movw	r20, r6
    79f8:	4b 5f       	subi	r20, 0xFB	; 251
    79fa:	5f 4f       	sbci	r21, 0xFF	; 255
    79fc:	b4 01       	movw	r22, r8
    79fe:	61 5b       	subi	r22, 0xB1	; 177
    7a00:	7f 4f       	sbci	r23, 0xFF	; 255
    7a02:	c1 2c       	mov	r12, r1
    7a04:	ee 24       	eor	r14, r14
    7a06:	ea 94       	dec	r14
    7a08:	fe 2c       	mov	r15, r14
    7a0a:	10 e0       	ldi	r17, 0x00	; 0
    7a0c:	00 e0       	ldi	r16, 0x00	; 0
    7a0e:	21 e0       	ldi	r18, 0x01	; 1
    7a10:	c5 01       	movw	r24, r10
    7a12:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
_Z14selftest_get_0h():
    7a16:	80 91 32 0a 	lds	r24, 0x0A32	; 0x800a32 <selftest_data>
_Z27display_element_show_time_1jjjjhhPc():
    7a1a:	80 fd       	sbrc	r24, 0
    7a1c:	56 c0       	rjmp	.+172    	; 0x7aca <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x110>
    7a1e:	90 91 36 0e 	lds	r25, 0x0E36	; 0x800e36 <now+0x4>
    7a22:	80 91 35 0e 	lds	r24, 0x0E35	; 0x800e35 <now+0x3>
    7a26:	20 91 23 0a 	lds	r18, 0x0A23	; 0x800a23 <uptime>
    7a2a:	20 ff       	sbrs	r18, 0
    7a2c:	47 c0       	rjmp	.+142    	; 0x7abc <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x102>
    7a2e:	1f 92       	push	r1
    7a30:	9f 93       	push	r25
    7a32:	1f 92       	push	r1
    7a34:	8f 93       	push	r24
    7a36:	8e ed       	ldi	r24, 0xDE	; 222
    7a38:	92 e0       	ldi	r25, 0x02	; 2
    7a3a:	9f 93       	push	r25
    7a3c:	8f 93       	push	r24
    7a3e:	bf 92       	push	r11
    7a40:	af 92       	push	r10
    7a42:	0e 94 a6 d8 	call	0x1b14c	; 0x1b14c <sprintf>
    7a46:	0f b6       	in	r0, 0x3f	; 63
    7a48:	f8 94       	cli
    7a4a:	de bf       	out	0x3e, r29	; 62
    7a4c:	0f be       	out	0x3f, r0	; 63
    7a4e:	cd bf       	out	0x3d, r28	; 61
    7a50:	70 e0       	ldi	r23, 0x00	; 0
    7a52:	60 e0       	ldi	r22, 0x00	; 0
    7a54:	89 e8       	ldi	r24, 0x89	; 137
    7a56:	9b e0       	ldi	r25, 0x0B	; 11
    7a58:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7a5c:	a3 01       	movw	r20, r6
    7a5e:	4c 5e       	subi	r20, 0xEC	; 236
    7a60:	5f 4f       	sbci	r21, 0xFF	; 255
    7a62:	b4 01       	movw	r22, r8
    7a64:	6c 5f       	subi	r22, 0xFC	; 252
    7a66:	7f 4f       	sbci	r23, 0xFF	; 255
    7a68:	c1 2c       	mov	r12, r1
    7a6a:	ee 24       	eor	r14, r14
    7a6c:	ea 94       	dec	r14
    7a6e:	fe 2c       	mov	r15, r14
    7a70:	10 e0       	ldi	r17, 0x00	; 0
    7a72:	00 e0       	ldi	r16, 0x00	; 0
    7a74:	28 e0       	ldi	r18, 0x08	; 8
    7a76:	c5 01       	movw	r24, r10
    7a78:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7a7c:	83 01       	movw	r16, r6
    7a7e:	0c 5a       	subi	r16, 0xAC	; 172
    7a80:	1f 4f       	sbci	r17, 0xFF	; 255
    7a82:	94 01       	movw	r18, r8
    7a84:	2c 50       	subi	r18, 0x0C	; 12
    7a86:	3f 4f       	sbci	r19, 0xFF	; 255
    7a88:	a3 01       	movw	r20, r6
    7a8a:	b4 01       	movw	r22, r8
    7a8c:	89 e8       	ldi	r24, 0x89	; 137
    7a8e:	9b e0       	ldi	r25, 0x0B	; 11
    7a90:	0e 94 44 8e 	call	0x11c88	; 0x11c88 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    7a94:	68 96       	adiw	r28, 0x18	; 24
    7a96:	0f b6       	in	r0, 0x3f	; 63
    7a98:	f8 94       	cli
    7a9a:	de bf       	out	0x3e, r29	; 62
    7a9c:	0f be       	out	0x3f, r0	; 63
    7a9e:	cd bf       	out	0x3d, r28	; 61
    7aa0:	df 91       	pop	r29
    7aa2:	cf 91       	pop	r28
    7aa4:	1f 91       	pop	r17
    7aa6:	0f 91       	pop	r16
    7aa8:	ff 90       	pop	r15
    7aaa:	ef 90       	pop	r14
    7aac:	cf 90       	pop	r12
    7aae:	bf 90       	pop	r11
    7ab0:	af 90       	pop	r10
    7ab2:	9f 90       	pop	r9
    7ab4:	8f 90       	pop	r8
    7ab6:	7f 90       	pop	r7
    7ab8:	6f 90       	pop	r6
    7aba:	08 95       	ret
    7abc:	1f 92       	push	r1
    7abe:	9f 93       	push	r25
    7ac0:	1f 92       	push	r1
    7ac2:	8f 93       	push	r24
    7ac4:	88 ee       	ldi	r24, 0xE8	; 232
    7ac6:	92 e0       	ldi	r25, 0x02	; 2
    7ac8:	b8 cf       	rjmp	.-144    	; 0x7a3a <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x80>
    7aca:	62 ef       	ldi	r22, 0xF2	; 242
    7acc:	72 e0       	ldi	r23, 0x02	; 2
    7ace:	c5 01       	movw	r24, r10
    7ad0:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    7ad4:	bd cf       	rjmp	.-134    	; 0x7a50 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x96>

00007ad6 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_date_1jjjjhhPc():
    7ad6:	8f 92       	push	r8
    7ad8:	9f 92       	push	r9
    7ada:	af 92       	push	r10
    7adc:	bf 92       	push	r11
    7ade:	cf 92       	push	r12
    7ae0:	ef 92       	push	r14
    7ae2:	ff 92       	push	r15
    7ae4:	0f 93       	push	r16
    7ae6:	1f 93       	push	r17
    7ae8:	cf 93       	push	r28
    7aea:	df 93       	push	r29
    7aec:	cd b7       	in	r28, 0x3d	; 61
    7aee:	de b7       	in	r29, 0x3e	; 62
    7af0:	60 97       	sbiw	r28, 0x10	; 16
    7af2:	0f b6       	in	r0, 0x3f	; 63
    7af4:	f8 94       	cli
    7af6:	de bf       	out	0x3e, r29	; 62
    7af8:	0f be       	out	0x3f, r0	; 63
    7afa:	cd bf       	out	0x3d, r28	; 61
    7afc:	4c 01       	movw	r8, r24
    7afe:	8b 01       	movw	r16, r22
_Z14selftest_get_0h():
    7b00:	80 91 32 0a 	lds	r24, 0x0A32	; 0x800a32 <selftest_data>
    7b04:	9e 01       	movw	r18, r28
    7b06:	2f 5f       	subi	r18, 0xFF	; 255
    7b08:	3f 4f       	sbci	r19, 0xFF	; 255
    7b0a:	59 01       	movw	r10, r18
_Z27display_element_show_date_1jjjjhhPc():
    7b0c:	80 fd       	sbrc	r24, 0
    7b0e:	54 c0       	rjmp	.+168    	; 0x7bb8 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xe2>
_ZNK8DateTime4yearEv():
    7b10:	80 91 32 0e 	lds	r24, 0x0E32	; 0x800e32 <now>
    7b14:	90 e0       	ldi	r25, 0x00	; 0
    7b16:	80 53       	subi	r24, 0x30	; 48
    7b18:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhhPc():
    7b1a:	9f 93       	push	r25
    7b1c:	8f 93       	push	r24
    7b1e:	80 91 33 0e 	lds	r24, 0x0E33	; 0x800e33 <now+0x1>
    7b22:	1f 92       	push	r1
    7b24:	8f 93       	push	r24
    7b26:	80 91 34 0e 	lds	r24, 0x0E34	; 0x800e34 <now+0x2>
    7b2a:	1f 92       	push	r1
    7b2c:	8f 93       	push	r24
    7b2e:	88 ef       	ldi	r24, 0xF8	; 248
    7b30:	92 e0       	ldi	r25, 0x02	; 2
    7b32:	9f 93       	push	r25
    7b34:	8f 93       	push	r24
    7b36:	3f 93       	push	r19
    7b38:	2f 93       	push	r18
    7b3a:	0e 94 a6 d8 	call	0x1b14c	; 0x1b14c <sprintf>
    7b3e:	0f b6       	in	r0, 0x3f	; 63
    7b40:	f8 94       	cli
    7b42:	de bf       	out	0x3e, r29	; 62
    7b44:	0f be       	out	0x3f, r0	; 63
    7b46:	cd bf       	out	0x3d, r28	; 61
    7b48:	6f ef       	ldi	r22, 0xFF	; 255
    7b4a:	7f ef       	ldi	r23, 0xFF	; 255
    7b4c:	89 e8       	ldi	r24, 0x89	; 137
    7b4e:	9b e0       	ldi	r25, 0x0B	; 11
    7b50:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7b54:	2e e8       	ldi	r18, 0x8E	; 142
    7b56:	30 e0       	ldi	r19, 0x00	; 0
    7b58:	a8 01       	movw	r20, r16
    7b5a:	b4 01       	movw	r22, r8
    7b5c:	89 e8       	ldi	r24, 0x89	; 137
    7b5e:	9b e0       	ldi	r25, 0x0B	; 11
    7b60:	0e 94 03 8e 	call	0x11c06	; 0x11c06 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    7b64:	a8 01       	movw	r20, r16
    7b66:	4f 5f       	subi	r20, 0xFF	; 255
    7b68:	5f 4f       	sbci	r21, 0xFF	; 255
    7b6a:	2e e8       	ldi	r18, 0x8E	; 142
    7b6c:	30 e0       	ldi	r19, 0x00	; 0
    7b6e:	b4 01       	movw	r22, r8
    7b70:	89 e8       	ldi	r24, 0x89	; 137
    7b72:	9b e0       	ldi	r25, 0x0B	; 11
    7b74:	0e 94 03 8e 	call	0x11c06	; 0x11c06 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    7b78:	a8 01       	movw	r20, r16
    7b7a:	4e 5f       	subi	r20, 0xFE	; 254
    7b7c:	5f 4f       	sbci	r21, 0xFF	; 255
    7b7e:	c1 2c       	mov	r12, r1
    7b80:	ee 24       	eor	r14, r14
    7b82:	ea 94       	dec	r14
    7b84:	fe 2c       	mov	r15, r14
    7b86:	10 e0       	ldi	r17, 0x00	; 0
    7b88:	00 e0       	ldi	r16, 0x00	; 0
    7b8a:	23 e0       	ldi	r18, 0x03	; 3
    7b8c:	b4 01       	movw	r22, r8
    7b8e:	c5 01       	movw	r24, r10
    7b90:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7b94:	60 96       	adiw	r28, 0x10	; 16
    7b96:	0f b6       	in	r0, 0x3f	; 63
    7b98:	f8 94       	cli
    7b9a:	de bf       	out	0x3e, r29	; 62
    7b9c:	0f be       	out	0x3f, r0	; 63
    7b9e:	cd bf       	out	0x3d, r28	; 61
    7ba0:	df 91       	pop	r29
    7ba2:	cf 91       	pop	r28
    7ba4:	1f 91       	pop	r17
    7ba6:	0f 91       	pop	r16
    7ba8:	ff 90       	pop	r15
    7baa:	ef 90       	pop	r14
    7bac:	cf 90       	pop	r12
    7bae:	bf 90       	pop	r11
    7bb0:	af 90       	pop	r10
    7bb2:	9f 90       	pop	r9
    7bb4:	8f 90       	pop	r8
    7bb6:	08 95       	ret
    7bb8:	67 e0       	ldi	r22, 0x07	; 7
    7bba:	73 e0       	ldi	r23, 0x03	; 3
    7bbc:	c9 01       	movw	r24, r18
    7bbe:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    7bc2:	c2 cf       	rjmp	.-124    	; 0x7b48 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x72>

00007bc4 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
    7bc4:	af 92       	push	r10
    7bc6:	bf 92       	push	r11
    7bc8:	cf 92       	push	r12
    7bca:	df 92       	push	r13
    7bcc:	ef 92       	push	r14
    7bce:	ff 92       	push	r15
    7bd0:	0f 93       	push	r16
    7bd2:	1f 93       	push	r17
    7bd4:	cf 93       	push	r28
    7bd6:	df 93       	push	r29
    7bd8:	8a 30       	cpi	r24, 0x0A	; 10
    7bda:	88 f5       	brcc	.+98     	; 0x7c3e <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    7bdc:	7b 01       	movw	r14, r22
    7bde:	94 e1       	ldi	r25, 0x14	; 20
    7be0:	89 9f       	mul	r24, r25
    7be2:	e0 01       	movw	r28, r0
    7be4:	11 24       	eor	r1, r1
    7be6:	6e 01       	movw	r12, r28
    7be8:	e6 e5       	ldi	r30, 0x56	; 86
    7bea:	ce 1a       	sub	r12, r30
    7bec:	ea ef       	ldi	r30, 0xFA	; 250
    7bee:	de 0a       	sbc	r13, r30
    7bf0:	8a 01       	movw	r16, r20
    7bf2:	5e 01       	movw	r10, r28
    7bf4:	f4 e4       	ldi	r31, 0x44	; 68
    7bf6:	af 1a       	sub	r10, r31
    7bf8:	fa ef       	ldi	r31, 0xFA	; 250
    7bfa:	bf 0a       	sbc	r11, r31
_ZNK5EERefdeEv():
    7bfc:	c6 01       	movw	r24, r12
    7bfe:	0e 94 79 df 	call	0x1bef2	; 0x1bef2 <eeprom_read_byte>
_Z23remote_tds_get_completehPhPc():
    7c02:	f8 01       	movw	r30, r16
    7c04:	81 93       	st	Z+, r24
    7c06:	8f 01       	movw	r16, r30
    7c08:	10 82       	st	Z, r1
    7c0a:	88 23       	and	r24, r24
    7c0c:	31 f0       	breq	.+12     	; 0x7c1a <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    7c0e:	ff ef       	ldi	r31, 0xFF	; 255
    7c10:	cf 1a       	sub	r12, r31
    7c12:	df 0a       	sbc	r13, r31
    7c14:	ac 14       	cp	r10, r12
    7c16:	bd 04       	cpc	r11, r13
    7c18:	89 f7       	brne	.-30     	; 0x7bfc <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
_ZNK5EERefdeEv():
    7c1a:	ce 01       	movw	r24, r28
    7c1c:	83 54       	subi	r24, 0x43	; 67
    7c1e:	9a 4f       	sbci	r25, 0xFA	; 250
    7c20:	0e 94 79 df 	call	0x1bef2	; 0x1bef2 <eeprom_read_byte>
_Z23remote_tds_get_completehPhPc():
    7c24:	f7 01       	movw	r30, r14
    7c26:	80 83       	st	Z, r24
    7c28:	df 91       	pop	r29
    7c2a:	cf 91       	pop	r28
    7c2c:	1f 91       	pop	r17
    7c2e:	0f 91       	pop	r16
    7c30:	ff 90       	pop	r15
    7c32:	ef 90       	pop	r14
    7c34:	df 90       	pop	r13
    7c36:	cf 90       	pop	r12
    7c38:	bf 90       	pop	r11
    7c3a:	af 90       	pop	r10
    7c3c:	08 95       	ret
    7c3e:	8f ef       	ldi	r24, 0xFF	; 255
    7c40:	fb 01       	movw	r30, r22
    7c42:	f1 cf       	rjmp	.-30     	; 0x7c26 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

00007c44 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z29display_menu_rtds_update_namejjh():
    7c44:	1f 93       	push	r17
    7c46:	cf 93       	push	r28
    7c48:	df 93       	push	r29
    7c4a:	cd b7       	in	r28, 0x3d	; 61
    7c4c:	de b7       	in	r29, 0x3e	; 62
    7c4e:	63 97       	sbiw	r28, 0x13	; 19
    7c50:	0f b6       	in	r0, 0x3f	; 63
    7c52:	f8 94       	cli
    7c54:	de bf       	out	0x3e, r29	; 62
    7c56:	0f be       	out	0x3f, r0	; 63
    7c58:	cd bf       	out	0x3d, r28	; 61
    7c5a:	16 2f       	mov	r17, r22
    7c5c:	ae 01       	movw	r20, r28
    7c5e:	4f 5f       	subi	r20, 0xFF	; 255
    7c60:	5f 4f       	sbci	r21, 0xFF	; 255
    7c62:	be 01       	movw	r22, r28
    7c64:	6d 5e       	subi	r22, 0xED	; 237
    7c66:	7f 4f       	sbci	r23, 0xFF	; 255
    7c68:	81 2f       	mov	r24, r17
    7c6a:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    7c6e:	70 e0       	ldi	r23, 0x00	; 0
    7c70:	60 e0       	ldi	r22, 0x00	; 0
    7c72:	87 e6       	ldi	r24, 0x67	; 103
    7c74:	90 e0       	ldi	r25, 0x00	; 0
    7c76:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>
    7c7a:	20 eb       	ldi	r18, 0xB0	; 176
    7c7c:	30 e4       	ldi	r19, 0x40	; 64
    7c7e:	41 2f       	mov	r20, r17
    7c80:	62 e1       	ldi	r22, 0x12	; 18
    7c82:	ce 01       	movw	r24, r28
    7c84:	01 96       	adiw	r24, 0x01	; 1
    7c86:	0e 94 e0 38 	call	0x71c0	; 0x71c0 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    7c8a:	63 96       	adiw	r28, 0x13	; 19
    7c8c:	0f b6       	in	r0, 0x3f	; 63
    7c8e:	f8 94       	cli
    7c90:	de bf       	out	0x3e, r29	; 62
    7c92:	0f be       	out	0x3f, r0	; 63
    7c94:	cd bf       	out	0x3d, r28	; 61
    7c96:	df 91       	pop	r29
    7c98:	cf 91       	pop	r28
    7c9a:	1f 91       	pop	r17
    7c9c:	08 95       	ret

00007c9e <remote_tds_set_name(unsigned char, char*)>:
_Z19remote_tds_set_namehPc():
    7c9e:	df 92       	push	r13
    7ca0:	ef 92       	push	r14
    7ca2:	ff 92       	push	r15
    7ca4:	0f 93       	push	r16
    7ca6:	1f 93       	push	r17
    7ca8:	cf 93       	push	r28
    7caa:	df 93       	push	r29
    7cac:	8a 30       	cpi	r24, 0x0A	; 10
    7cae:	c0 f4       	brcc	.+48     	; 0x7ce0 <remote_tds_set_name(unsigned char, char*)+0x42>
    7cb0:	94 e1       	ldi	r25, 0x14	; 20
    7cb2:	89 9f       	mul	r24, r25
    7cb4:	e0 01       	movw	r28, r0
    7cb6:	11 24       	eor	r1, r1
    7cb8:	7b 01       	movw	r14, r22
    7cba:	8e 01       	movw	r16, r28
    7cbc:	06 55       	subi	r16, 0x56	; 86
    7cbe:	1a 4f       	sbci	r17, 0xFA	; 250
    7cc0:	c4 54       	subi	r28, 0x44	; 68
    7cc2:	da 4f       	sbci	r29, 0xFA	; 250
    7cc4:	f7 01       	movw	r30, r14
    7cc6:	d1 90       	ld	r13, Z+
    7cc8:	7f 01       	movw	r14, r30
    7cca:	6d 2d       	mov	r22, r13
    7ccc:	c8 01       	movw	r24, r16
    7cce:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <EEPROMClass::write(int, unsigned char) [clone .isra.4]>
    7cd2:	dd 20       	and	r13, r13
    7cd4:	29 f0       	breq	.+10     	; 0x7ce0 <remote_tds_set_name(unsigned char, char*)+0x42>
    7cd6:	0f 5f       	subi	r16, 0xFF	; 255
    7cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    7cda:	0c 17       	cp	r16, r28
    7cdc:	1d 07       	cpc	r17, r29
    7cde:	91 f7       	brne	.-28     	; 0x7cc4 <remote_tds_set_name(unsigned char, char*)+0x26>
    7ce0:	df 91       	pop	r29
    7ce2:	cf 91       	pop	r28
    7ce4:	1f 91       	pop	r17
    7ce6:	0f 91       	pop	r16
    7ce8:	ff 90       	pop	r15
    7cea:	ef 90       	pop	r14
    7cec:	df 90       	pop	r13
    7cee:	08 95       	ret

00007cf0 <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
    7cf0:	cf 93       	push	r28
    7cf2:	df 93       	push	r29
    7cf4:	8a 30       	cpi	r24, 0x0A	; 10
    7cf6:	68 f4       	brcc	.+26     	; 0x7d12 <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    7cf8:	eb 01       	movw	r28, r22
    7cfa:	24 e1       	ldi	r18, 0x14	; 20
    7cfc:	82 9f       	mul	r24, r18
    7cfe:	c0 01       	movw	r24, r0
    7d00:	11 24       	eor	r1, r1
_ZNK5EERefdeEv():
    7d02:	83 54       	subi	r24, 0x43	; 67
    7d04:	9a 4f       	sbci	r25, 0xFA	; 250
    7d06:	0e 94 79 df 	call	0x1bef2	; 0x1bef2 <eeprom_read_byte>
_Z21remote_tds_get_activehPh():
    7d0a:	88 83       	st	Y, r24
    7d0c:	df 91       	pop	r29
    7d0e:	cf 91       	pop	r28
    7d10:	08 95       	ret
    7d12:	8f ef       	ldi	r24, 0xFF	; 255
    7d14:	fb 01       	movw	r30, r22
    7d16:	80 83       	st	Z, r24
    7d18:	f9 cf       	rjmp	.-14     	; 0x7d0c <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

00007d1a <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhhPcS_():
    7d1a:	cf 92       	push	r12
    7d1c:	df 92       	push	r13
    7d1e:	ff 92       	push	r15
    7d20:	0f 93       	push	r16
    7d22:	1f 93       	push	r17
    7d24:	cf 93       	push	r28
    7d26:	df 93       	push	r29
    7d28:	1f 92       	push	r1
    7d2a:	cd b7       	in	r28, 0x3d	; 61
    7d2c:	de b7       	in	r29, 0x3e	; 62
    7d2e:	f8 2e       	mov	r15, r24
    7d30:	69 01       	movw	r12, r18
    7d32:	62 e5       	ldi	r22, 0x52	; 82
    7d34:	77 e5       	ldi	r23, 0x57	; 87
    7d36:	c9 01       	movw	r24, r18
    7d38:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    7d3c:	f8 01       	movw	r30, r16
    7d3e:	10 82       	st	Z, r1
    7d40:	be 01       	movw	r22, r28
    7d42:	6f 5f       	subi	r22, 0xFF	; 255
    7d44:	7f 4f       	sbci	r23, 0xFF	; 255
    7d46:	8f 2d       	mov	r24, r15
    7d48:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <remote_tds_get_active(unsigned char, unsigned char*)>
    7d4c:	89 81       	ldd	r24, Y+1	; 0x01
    7d4e:	81 30       	cpi	r24, 0x01	; 1
    7d50:	39 f4       	brne	.+14     	; 0x7d60 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
    7d52:	a6 01       	movw	r20, r12
    7d54:	be 01       	movw	r22, r28
    7d56:	6f 5f       	subi	r22, 0xFF	; 255
    7d58:	7f 4f       	sbci	r23, 0xFF	; 255
    7d5a:	8f 2d       	mov	r24, r15
    7d5c:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    7d60:	0f 90       	pop	r0
    7d62:	df 91       	pop	r29
    7d64:	cf 91       	pop	r28
    7d66:	1f 91       	pop	r17
    7d68:	0f 91       	pop	r16
    7d6a:	ff 90       	pop	r15
    7d6c:	df 90       	pop	r13
    7d6e:	cf 90       	pop	r12
    7d70:	08 95       	ret

00007d72 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>:
_Z25click_rtds_setting_sensorjjh():
    7d72:	1f 93       	push	r17
    7d74:	cf 93       	push	r28
    7d76:	df 93       	push	r29
    7d78:	1f 92       	push	r1
    7d7a:	cd b7       	in	r28, 0x3d	; 61
    7d7c:	de b7       	in	r29, 0x3e	; 62
    7d7e:	14 2f       	mov	r17, r20
    7d80:	be 01       	movw	r22, r28
    7d82:	6f 5f       	subi	r22, 0xFF	; 255
    7d84:	7f 4f       	sbci	r23, 0xFF	; 255
    7d86:	84 2f       	mov	r24, r20
    7d88:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <remote_tds_get_active(unsigned char, unsigned char*)>
    7d8c:	89 81       	ldd	r24, Y+1	; 0x01
    7d8e:	81 30       	cpi	r24, 0x01	; 1
    7d90:	31 f4       	brne	.+12     	; 0x7d9e <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)+0x2c>
    7d92:	61 2f       	mov	r22, r17
    7d94:	70 e0       	ldi	r23, 0x00	; 0
    7d96:	87 e0       	ldi	r24, 0x07	; 7
    7d98:	90 e0       	ldi	r25, 0x00	; 0
    7d9a:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>
    7d9e:	0f 90       	pop	r0
    7da0:	df 91       	pop	r29
    7da2:	cf 91       	pop	r28
    7da4:	1f 91       	pop	r17
    7da6:	08 95       	ret

00007da8 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z28button_get_show_default_temphhhPcS_():
    7da8:	9f 92       	push	r9
    7daa:	af 92       	push	r10
    7dac:	bf 92       	push	r11
    7dae:	cf 92       	push	r12
    7db0:	df 92       	push	r13
    7db2:	ef 92       	push	r14
    7db4:	0f 93       	push	r16
    7db6:	1f 93       	push	r17
    7db8:	cf 93       	push	r28
    7dba:	df 93       	push	r29
    7dbc:	cd b7       	in	r28, 0x3d	; 61
    7dbe:	de b7       	in	r29, 0x3e	; 62
    7dc0:	65 97       	sbiw	r28, 0x15	; 21
    7dc2:	0f b6       	in	r0, 0x3f	; 63
    7dc4:	f8 94       	cli
    7dc6:	de bf       	out	0x3e, r29	; 62
    7dc8:	0f be       	out	0x3f, r0	; 63
    7dca:	cd bf       	out	0x3d, r28	; 61
    7dcc:	98 2e       	mov	r9, r24
    7dce:	e4 2e       	mov	r14, r20
    7dd0:	69 01       	movw	r12, r18
    7dd2:	58 01       	movw	r10, r16
    7dd4:	6d e9       	ldi	r22, 0x9D	; 157
    7dd6:	75 e0       	ldi	r23, 0x05	; 5
    7dd8:	c9 01       	movw	r24, r18
    7dda:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    7dde:	6d e9       	ldi	r22, 0x9D	; 157
    7de0:	75 e0       	ldi	r23, 0x05	; 5
    7de2:	c8 01       	movw	r24, r16
    7de4:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    7de8:	00 e0       	ldi	r16, 0x00	; 0
    7dea:	10 e0       	ldi	r17, 0x00	; 0
    7dec:	80 2f       	mov	r24, r16
    7dee:	0e 94 4f 83 	call	0x1069e	; 0x1069e <tds_used(unsigned char)>
    7df2:	81 30       	cpi	r24, 0x01	; 1
    7df4:	11 f4       	brne	.+4      	; 0x7dfa <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x52>
    7df6:	ee 20       	and	r14, r14
    7df8:	19 f0       	breq	.+6      	; 0x7e00 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
    7dfa:	81 e0       	ldi	r24, 0x01	; 1
    7dfc:	e8 12       	cpse	r14, r24
    7dfe:	25 c0       	rjmp	.+74     	; 0x7e4a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xa2>
    7e00:	91 12       	cpse	r9, r17
    7e02:	22 c0       	rjmp	.+68     	; 0x7e48 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xa0>
    7e04:	be 01       	movw	r22, r28
    7e06:	6f 5f       	subi	r22, 0xFF	; 255
    7e08:	7f 4f       	sbci	r23, 0xFF	; 255
    7e0a:	80 2f       	mov	r24, r16
    7e0c:	0e 94 20 84 	call	0x10840	; 0x10840 <tds_get_name(unsigned char, char*)>
    7e10:	be 01       	movw	r22, r28
    7e12:	6f 5f       	subi	r22, 0xFF	; 255
    7e14:	7f 4f       	sbci	r23, 0xFF	; 255
    7e16:	c5 01       	movw	r24, r10
    7e18:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    7e1c:	62 eb       	ldi	r22, 0xB2	; 178
    7e1e:	77 e5       	ldi	r23, 0x57	; 87
    7e20:	c6 01       	movw	r24, r12
    7e22:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    7e26:	65 96       	adiw	r28, 0x15	; 21
    7e28:	0f b6       	in	r0, 0x3f	; 63
    7e2a:	f8 94       	cli
    7e2c:	de bf       	out	0x3e, r29	; 62
    7e2e:	0f be       	out	0x3f, r0	; 63
    7e30:	cd bf       	out	0x3d, r28	; 61
    7e32:	df 91       	pop	r29
    7e34:	cf 91       	pop	r28
    7e36:	1f 91       	pop	r17
    7e38:	0f 91       	pop	r16
    7e3a:	ef 90       	pop	r14
    7e3c:	df 90       	pop	r13
    7e3e:	cf 90       	pop	r12
    7e40:	bf 90       	pop	r11
    7e42:	af 90       	pop	r10
    7e44:	9f 90       	pop	r9
    7e46:	08 95       	ret
    7e48:	1f 5f       	subi	r17, 0xFF	; 255
    7e4a:	0f 5f       	subi	r16, 0xFF	; 255
    7e4c:	06 30       	cpi	r16, 0x06	; 6
    7e4e:	71 f6       	brne	.-100    	; 0x7dec <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x44>
    7e50:	00 e0       	ldi	r16, 0x00	; 0
    7e52:	be 01       	movw	r22, r28
    7e54:	6b 5e       	subi	r22, 0xEB	; 235
    7e56:	7f 4f       	sbci	r23, 0xFF	; 255
    7e58:	80 2f       	mov	r24, r16
    7e5a:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <remote_tds_get_active(unsigned char, unsigned char*)>
    7e5e:	8d 89       	ldd	r24, Y+21	; 0x15
    7e60:	81 30       	cpi	r24, 0x01	; 1
    7e62:	11 f4       	brne	.+4      	; 0x7e68 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc0>
    7e64:	ee 20       	and	r14, r14
    7e66:	19 f0       	breq	.+6      	; 0x7e6e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc6>
    7e68:	81 e0       	ldi	r24, 0x01	; 1
    7e6a:	e8 12       	cpse	r14, r24
    7e6c:	15 c0       	rjmp	.+42     	; 0x7e98 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xf0>
    7e6e:	91 12       	cpse	r9, r17
    7e70:	12 c0       	rjmp	.+36     	; 0x7e96 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xee>
    7e72:	ae 01       	movw	r20, r28
    7e74:	4f 5f       	subi	r20, 0xFF	; 255
    7e76:	5f 4f       	sbci	r21, 0xFF	; 255
    7e78:	be 01       	movw	r22, r28
    7e7a:	6b 5e       	subi	r22, 0xEB	; 235
    7e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    7e7e:	80 2f       	mov	r24, r16
    7e80:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    7e84:	be 01       	movw	r22, r28
    7e86:	6f 5f       	subi	r22, 0xFF	; 255
    7e88:	7f 4f       	sbci	r23, 0xFF	; 255
    7e8a:	c5 01       	movw	r24, r10
    7e8c:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    7e90:	63 ea       	ldi	r22, 0xA3	; 163
    7e92:	77 e5       	ldi	r23, 0x57	; 87
    7e94:	c5 cf       	rjmp	.-118    	; 0x7e20 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x78>
    7e96:	1f 5f       	subi	r17, 0xFF	; 255
    7e98:	0f 5f       	subi	r16, 0xFF	; 255
    7e9a:	0a 30       	cpi	r16, 0x0A	; 10
    7e9c:	d1 f6       	brne	.-76     	; 0x7e52 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xaa>
    7e9e:	c3 cf       	rjmp	.-122    	; 0x7e26 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x7e>

00007ea0 <remote_tds_set_active(unsigned char, unsigned char)>:
_Z21remote_tds_set_activehh():
    7ea0:	8a 30       	cpi	r24, 0x0A	; 10
    7ea2:	40 f4       	brcc	.+16     	; 0x7eb4 <remote_tds_set_active(unsigned char, unsigned char)+0x14>
    7ea4:	24 e1       	ldi	r18, 0x14	; 20
    7ea6:	82 9f       	mul	r24, r18
    7ea8:	c0 01       	movw	r24, r0
    7eaa:	11 24       	eor	r1, r1
    7eac:	83 54       	subi	r24, 0x43	; 67
    7eae:	9a 4f       	sbci	r25, 0xFA	; 250
    7eb0:	0c 94 5c 35 	jmp	0x6ab8	; 0x6ab8 <EEPROMClass::write(int, unsigned char) [clone .isra.4]>
    7eb4:	08 95       	ret

00007eb6 <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
    7eb6:	cf 93       	push	r28
    7eb8:	df 93       	push	r29
    7eba:	c8 2f       	mov	r28, r24
    7ebc:	d6 2f       	mov	r29, r22
    7ebe:	ba 01       	movw	r22, r20
    7ec0:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <remote_tds_set_name(unsigned char, char*)>
    7ec4:	6d 2f       	mov	r22, r29
    7ec6:	8c 2f       	mov	r24, r28
    7ec8:	df 91       	pop	r29
    7eca:	cf 91       	pop	r28
    7ecc:	0c 94 50 3f 	jmp	0x7ea0	; 0x7ea0 <remote_tds_set_active(unsigned char, unsigned char)>

00007ed0 <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
    7ed0:	cf 93       	push	r28
    7ed2:	df 93       	push	r29
    7ed4:	cd b7       	in	r28, 0x3d	; 61
    7ed6:	de b7       	in	r29, 0x3e	; 62
    7ed8:	62 97       	sbiw	r28, 0x12	; 18
    7eda:	0f b6       	in	r0, 0x3f	; 63
    7edc:	f8 94       	cli
    7ede:	de bf       	out	0x3e, r29	; 62
    7ee0:	0f be       	out	0x3f, r0	; 63
    7ee2:	cd bf       	out	0x3d, r28	; 61
    7ee4:	e1 e0       	ldi	r30, 0x01	; 1
    7ee6:	f0 e0       	ldi	r31, 0x00	; 0
    7ee8:	ec 0f       	add	r30, r28
    7eea:	fd 1f       	adc	r31, r29
    7eec:	e8 0f       	add	r30, r24
    7eee:	f1 1d       	adc	r31, r1
    7ef0:	10 82       	st	Z, r1
    7ef2:	ae 01       	movw	r20, r28
    7ef4:	4f 5f       	subi	r20, 0xFF	; 255
    7ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    7ef8:	60 e0       	ldi	r22, 0x00	; 0
    7efa:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
    7efe:	62 96       	adiw	r28, 0x12	; 18
    7f00:	0f b6       	in	r0, 0x3f	; 63
    7f02:	f8 94       	cli
    7f04:	de bf       	out	0x3e, r29	; 62
    7f06:	0f be       	out	0x3f, r0	; 63
    7f08:	cd bf       	out	0x3d, r28	; 61
    7f0a:	df 91       	pop	r29
    7f0c:	cf 91       	pop	r28
    7f0e:	08 95       	ret

00007f10 <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z30click_rtds_deassociate_onewirejjh():
    7f10:	86 2f       	mov	r24, r22
    7f12:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <remote_tds_clear(unsigned char)>
    7f16:	0c 94 a3 37 	jmp	0x6f46	; 0x6f46 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.46]>

00007f1a <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
    7f1a:	cf 93       	push	r28
    7f1c:	df 93       	push	r29
    7f1e:	cd b7       	in	r28, 0x3d	; 61
    7f20:	de b7       	in	r29, 0x3e	; 62
    7f22:	c1 58       	subi	r28, 0x81	; 129
    7f24:	d1 09       	sbc	r29, r1
    7f26:	0f b6       	in	r0, 0x3f	; 63
    7f28:	f8 94       	cli
    7f2a:	de bf       	out	0x3e, r29	; 62
    7f2c:	0f be       	out	0x3f, r0	; 63
    7f2e:	cd bf       	out	0x3d, r28	; 61
    7f30:	cf 57       	subi	r28, 0x7F	; 127
    7f32:	df 4f       	sbci	r29, 0xFF	; 255
    7f34:	18 82       	st	Y, r1
    7f36:	c1 58       	subi	r28, 0x81	; 129
    7f38:	d0 40       	sbci	r29, 0x00	; 0
    7f3a:	ae 01       	movw	r20, r28
    7f3c:	4f 5b       	subi	r20, 0xBF	; 191
    7f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    7f40:	be 01       	movw	r22, r28
    7f42:	6f 57       	subi	r22, 0x7F	; 127
    7f44:	7f 4f       	sbci	r23, 0xFF	; 255
    7f46:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    7f4a:	cf 57       	subi	r28, 0x7F	; 127
    7f4c:	df 4f       	sbci	r29, 0xFF	; 255
    7f4e:	88 81       	ld	r24, Y
    7f50:	c1 58       	subi	r28, 0x81	; 129
    7f52:	d0 40       	sbci	r29, 0x00	; 0
    7f54:	81 30       	cpi	r24, 0x01	; 1
    7f56:	a1 f4       	brne	.+40     	; 0x7f80 <remote_tds_subscibe_topic(unsigned char)+0x66>
    7f58:	62 e1       	ldi	r22, 0x12	; 18
    7f5a:	73 e0       	ldi	r23, 0x03	; 3
    7f5c:	ce 01       	movw	r24, r28
    7f5e:	01 96       	adiw	r24, 0x01	; 1
    7f60:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    7f64:	be 01       	movw	r22, r28
    7f66:	6f 5b       	subi	r22, 0xBF	; 191
    7f68:	7f 4f       	sbci	r23, 0xFF	; 255
    7f6a:	ce 01       	movw	r24, r28
    7f6c:	01 96       	adiw	r24, 0x01	; 1
    7f6e:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    7f72:	be 01       	movw	r22, r28
    7f74:	6f 5f       	subi	r22, 0xFF	; 255
    7f76:	7f 4f       	sbci	r23, 0xFF	; 255
    7f78:	8d ee       	ldi	r24, 0xED	; 237
    7f7a:	9b e0       	ldi	r25, 0x0B	; 11
    7f7c:	0e 94 fe bc 	call	0x179fc	; 0x179fc <PubSubClient::subscribe(char const*)>
    7f80:	cf 57       	subi	r28, 0x7F	; 127
    7f82:	df 4f       	sbci	r29, 0xFF	; 255
    7f84:	0f b6       	in	r0, 0x3f	; 63
    7f86:	f8 94       	cli
    7f88:	de bf       	out	0x3e, r29	; 62
    7f8a:	0f be       	out	0x3f, r0	; 63
    7f8c:	cd bf       	out	0x3d, r28	; 61
    7f8e:	df 91       	pop	r29
    7f90:	cf 91       	pop	r28
    7f92:	08 95       	ret

00007f94 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>:
_Z20click_rtds_subscribejjh():
    7f94:	86 2f       	mov	r24, r22
    7f96:	0c 94 8d 3f 	jmp	0x7f1a	; 0x7f1a <remote_tds_subscibe_topic(unsigned char)>

00007f9a <remote_tds_unsubscibe_topic(unsigned char)>:
_Z27remote_tds_unsubscibe_topich():
    7f9a:	cf 93       	push	r28
    7f9c:	df 93       	push	r29
    7f9e:	cd b7       	in	r28, 0x3d	; 61
    7fa0:	de b7       	in	r29, 0x3e	; 62
    7fa2:	c1 58       	subi	r28, 0x81	; 129
    7fa4:	d1 09       	sbc	r29, r1
    7fa6:	0f b6       	in	r0, 0x3f	; 63
    7fa8:	f8 94       	cli
    7faa:	de bf       	out	0x3e, r29	; 62
    7fac:	0f be       	out	0x3f, r0	; 63
    7fae:	cd bf       	out	0x3d, r28	; 61
    7fb0:	cf 57       	subi	r28, 0x7F	; 127
    7fb2:	df 4f       	sbci	r29, 0xFF	; 255
    7fb4:	18 82       	st	Y, r1
    7fb6:	c1 58       	subi	r28, 0x81	; 129
    7fb8:	d0 40       	sbci	r29, 0x00	; 0
    7fba:	ae 01       	movw	r20, r28
    7fbc:	4f 5b       	subi	r20, 0xBF	; 191
    7fbe:	5f 4f       	sbci	r21, 0xFF	; 255
    7fc0:	be 01       	movw	r22, r28
    7fc2:	6f 57       	subi	r22, 0x7F	; 127
    7fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    7fc6:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    7fca:	cf 57       	subi	r28, 0x7F	; 127
    7fcc:	df 4f       	sbci	r29, 0xFF	; 255
    7fce:	88 81       	ld	r24, Y
    7fd0:	c1 58       	subi	r28, 0x81	; 129
    7fd2:	d0 40       	sbci	r29, 0x00	; 0
    7fd4:	81 30       	cpi	r24, 0x01	; 1
    7fd6:	a1 f4       	brne	.+40     	; 0x8000 <remote_tds_unsubscibe_topic(unsigned char)+0x66>
    7fd8:	62 e1       	ldi	r22, 0x12	; 18
    7fda:	73 e0       	ldi	r23, 0x03	; 3
    7fdc:	ce 01       	movw	r24, r28
    7fde:	01 96       	adiw	r24, 0x01	; 1
    7fe0:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    7fe4:	be 01       	movw	r22, r28
    7fe6:	6f 5b       	subi	r22, 0xBF	; 191
    7fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    7fea:	ce 01       	movw	r24, r28
    7fec:	01 96       	adiw	r24, 0x01	; 1
    7fee:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    7ff2:	be 01       	movw	r22, r28
    7ff4:	6f 5f       	subi	r22, 0xFF	; 255
    7ff6:	7f 4f       	sbci	r23, 0xFF	; 255
    7ff8:	8d ee       	ldi	r24, 0xED	; 237
    7ffa:	9b e0       	ldi	r25, 0x0B	; 11
    7ffc:	0e 94 01 bd 	call	0x17a02	; 0x17a02 <PubSubClient::unsubscribe(char const*)>
    8000:	cf 57       	subi	r28, 0x7F	; 127
    8002:	df 4f       	sbci	r29, 0xFF	; 255
    8004:	0f b6       	in	r0, 0x3f	; 63
    8006:	f8 94       	cli
    8008:	de bf       	out	0x3e, r29	; 62
    800a:	0f be       	out	0x3f, r0	; 63
    800c:	cd bf       	out	0x3d, r28	; 61
    800e:	df 91       	pop	r29
    8010:	cf 91       	pop	r28
    8012:	08 95       	ret

00008014 <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
    8014:	1f 93       	push	r17
    8016:	cf 93       	push	r28
    8018:	df 93       	push	r29
    801a:	1f 92       	push	r1
    801c:	cd b7       	in	r28, 0x3d	; 61
    801e:	de b7       	in	r29, 0x3e	; 62
    8020:	10 e0       	ldi	r17, 0x00	; 0
    8022:	be 01       	movw	r22, r28
    8024:	6f 5f       	subi	r22, 0xFF	; 255
    8026:	7f 4f       	sbci	r23, 0xFF	; 255
    8028:	81 2f       	mov	r24, r17
    802a:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <remote_tds_get_active(unsigned char, unsigned char*)>
    802e:	89 81       	ldd	r24, Y+1	; 0x01
    8030:	88 23       	and	r24, r24
    8032:	21 f0       	breq	.+8      	; 0x803c <remote_tds_find_free()+0x28>
    8034:	1f 5f       	subi	r17, 0xFF	; 255
    8036:	1a 30       	cpi	r17, 0x0A	; 10
    8038:	a1 f7       	brne	.-24     	; 0x8022 <remote_tds_find_free()+0xe>
    803a:	1f ef       	ldi	r17, 0xFF	; 255
    803c:	81 2f       	mov	r24, r17
    803e:	0f 90       	pop	r0
    8040:	df 91       	pop	r29
    8042:	cf 91       	pop	r28
    8044:	1f 91       	pop	r17
    8046:	08 95       	ret

00008048 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>:
_Z21click_rtds_add_sensorjjh():
    8048:	1f 93       	push	r17
    804a:	cf 93       	push	r28
    804c:	df 93       	push	r29
    804e:	00 d0       	rcall	.+0      	; 0x8050 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x8>
    8050:	1f 92       	push	r1
    8052:	1f 92       	push	r1
    8054:	cd b7       	in	r28, 0x3d	; 61
    8056:	de b7       	in	r29, 0x3e	; 62
    8058:	0e 94 0a 40 	call	0x8014	; 0x8014 <remote_tds_find_free()>
    805c:	18 2f       	mov	r17, r24
    805e:	8f 3f       	cpi	r24, 0xFF	; 255
    8060:	a1 f0       	breq	.+40     	; 0x808a <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x42>
    8062:	6f e5       	ldi	r22, 0x5F	; 95
    8064:	77 e5       	ldi	r23, 0x57	; 87
    8066:	ce 01       	movw	r24, r28
    8068:	01 96       	adiw	r24, 0x01	; 1
    806a:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    806e:	70 e0       	ldi	r23, 0x00	; 0
    8070:	60 e0       	ldi	r22, 0x00	; 0
    8072:	87 e6       	ldi	r24, 0x67	; 103
    8074:	90 e0       	ldi	r25, 0x00	; 0
    8076:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>
    807a:	22 e8       	ldi	r18, 0x82	; 130
    807c:	30 e4       	ldi	r19, 0x40	; 64
    807e:	41 2f       	mov	r20, r17
    8080:	62 e1       	ldi	r22, 0x12	; 18
    8082:	ce 01       	movw	r24, r28
    8084:	01 96       	adiw	r24, 0x01	; 1
    8086:	0e 94 e0 38 	call	0x71c0	; 0x71c0 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    808a:	0f 90       	pop	r0
    808c:	0f 90       	pop	r0
    808e:	0f 90       	pop	r0
    8090:	0f 90       	pop	r0
    8092:	0f 90       	pop	r0
    8094:	df 91       	pop	r29
    8096:	cf 91       	pop	r28
    8098:	1f 91       	pop	r17
    809a:	08 95       	ret

0000809c <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
    809c:	ef 92       	push	r14
    809e:	ff 92       	push	r15
    80a0:	0f 93       	push	r16
    80a2:	1f 93       	push	r17
    80a4:	cf 93       	push	r28
    80a6:	df 93       	push	r29
    80a8:	cd b7       	in	r28, 0x3d	; 61
    80aa:	de b7       	in	r29, 0x3e	; 62
    80ac:	63 97       	sbiw	r28, 0x13	; 19
    80ae:	0f b6       	in	r0, 0x3f	; 63
    80b0:	f8 94       	cli
    80b2:	de bf       	out	0x3e, r29	; 62
    80b4:	0f be       	out	0x3f, r0	; 63
    80b6:	cd bf       	out	0x3d, r28	; 61
    80b8:	7c 01       	movw	r14, r24
    80ba:	10 e0       	ldi	r17, 0x00	; 0
    80bc:	0f ef       	ldi	r16, 0xFF	; 255
    80be:	ae 01       	movw	r20, r28
    80c0:	4f 5f       	subi	r20, 0xFF	; 255
    80c2:	5f 4f       	sbci	r21, 0xFF	; 255
    80c4:	be 01       	movw	r22, r28
    80c6:	6d 5e       	subi	r22, 0xED	; 237
    80c8:	7f 4f       	sbci	r23, 0xFF	; 255
    80ca:	81 2f       	mov	r24, r17
    80cc:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    80d0:	be 01       	movw	r22, r28
    80d2:	6f 5f       	subi	r22, 0xFF	; 255
    80d4:	7f 4f       	sbci	r23, 0xFF	; 255
    80d6:	c7 01       	movw	r24, r14
    80d8:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    80dc:	89 2b       	or	r24, r25
    80de:	09 f4       	brne	.+2      	; 0x80e2 <remote_tds_name_exist(char*)+0x46>
    80e0:	01 2f       	mov	r16, r17
    80e2:	1f 5f       	subi	r17, 0xFF	; 255
    80e4:	1a 30       	cpi	r17, 0x0A	; 10
    80e6:	59 f7       	brne	.-42     	; 0x80be <remote_tds_name_exist(char*)+0x22>
    80e8:	80 2f       	mov	r24, r16
    80ea:	63 96       	adiw	r28, 0x13	; 19
    80ec:	0f b6       	in	r0, 0x3f	; 63
    80ee:	f8 94       	cli
    80f0:	de bf       	out	0x3e, r29	; 62
    80f2:	0f be       	out	0x3f, r0	; 63
    80f4:	cd bf       	out	0x3d, r28	; 61
    80f6:	df 91       	pop	r29
    80f8:	cf 91       	pop	r28
    80fa:	1f 91       	pop	r17
    80fc:	0f 91       	pop	r16
    80fe:	ff 90       	pop	r15
    8100:	ef 90       	pop	r14
    8102:	08 95       	ret

00008104 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_create_namejjh():
    8104:	1f 93       	push	r17
    8106:	cf 93       	push	r28
    8108:	df 93       	push	r29
    810a:	cd b7       	in	r28, 0x3d	; 61
    810c:	de b7       	in	r29, 0x3e	; 62
    810e:	62 97       	sbiw	r28, 0x12	; 18
    8110:	0f b6       	in	r0, 0x3f	; 63
    8112:	f8 94       	cli
    8114:	de bf       	out	0x3e, r29	; 62
    8116:	0f be       	out	0x3f, r0	; 63
    8118:	cd bf       	out	0x3d, r28	; 61
_Z31display_element_get_string_argsv():
    811a:	10 91 63 09 	lds	r17, 0x0963	; 0x800963 <dialog_set_string_args>
_Z21menu_rtds_create_namejjh():
    811e:	ce 01       	movw	r24, r28
    8120:	01 96       	adiw	r24, 0x01	; 1
    8122:	0e 94 21 39 	call	0x7242	; 0x7242 <display_element_get_string(char*)>
    8126:	89 81       	ldd	r24, Y+1	; 0x01
    8128:	88 23       	and	r24, r24
    812a:	81 f0       	breq	.+32     	; 0x814c <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
    812c:	ce 01       	movw	r24, r28
    812e:	01 96       	adiw	r24, 0x01	; 1
    8130:	0e 94 4e 40 	call	0x809c	; 0x809c <remote_tds_name_exist(char*)>
    8134:	8f 3f       	cpi	r24, 0xFF	; 255
    8136:	51 f4       	brne	.+20     	; 0x814c <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
    8138:	ae 01       	movw	r20, r28
    813a:	4f 5f       	subi	r20, 0xFF	; 255
    813c:	5f 4f       	sbci	r21, 0xFF	; 255
    813e:	61 e0       	ldi	r22, 0x01	; 1
    8140:	81 2f       	mov	r24, r17
    8142:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
    8146:	81 2f       	mov	r24, r17
    8148:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <remote_tds_subscibe_topic(unsigned char)>
    814c:	62 96       	adiw	r28, 0x12	; 18
    814e:	0f b6       	in	r0, 0x3f	; 63
    8150:	f8 94       	cli
    8152:	de bf       	out	0x3e, r29	; 62
    8154:	0f be       	out	0x3f, r0	; 63
    8156:	cd bf       	out	0x3d, r28	; 61
    8158:	df 91       	pop	r29
    815a:	cf 91       	pop	r28
    815c:	1f 91       	pop	r17
    815e:	08 95       	ret

00008160 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_update_namejjh():
    8160:	1f 93       	push	r17
    8162:	cf 93       	push	r28
    8164:	df 93       	push	r29
    8166:	cd b7       	in	r28, 0x3d	; 61
    8168:	de b7       	in	r29, 0x3e	; 62
    816a:	62 97       	sbiw	r28, 0x12	; 18
    816c:	0f b6       	in	r0, 0x3f	; 63
    816e:	f8 94       	cli
    8170:	de bf       	out	0x3e, r29	; 62
    8172:	0f be       	out	0x3f, r0	; 63
    8174:	cd bf       	out	0x3d, r28	; 61
_Z31display_element_get_string_argsv():
    8176:	10 91 63 09 	lds	r17, 0x0963	; 0x800963 <dialog_set_string_args>
_Z21menu_rtds_update_namejjh():
    817a:	ce 01       	movw	r24, r28
    817c:	01 96       	adiw	r24, 0x01	; 1
    817e:	0e 94 21 39 	call	0x7242	; 0x7242 <display_element_get_string(char*)>
    8182:	89 81       	ldd	r24, Y+1	; 0x01
    8184:	88 23       	and	r24, r24
    8186:	61 f0       	breq	.+24     	; 0x81a0 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x40>
    8188:	ce 01       	movw	r24, r28
    818a:	01 96       	adiw	r24, 0x01	; 1
    818c:	0e 94 4e 40 	call	0x809c	; 0x809c <remote_tds_name_exist(char*)>
    8190:	8f 3f       	cpi	r24, 0xFF	; 255
    8192:	31 f4       	brne	.+12     	; 0x81a0 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x40>
    8194:	be 01       	movw	r22, r28
    8196:	6f 5f       	subi	r22, 0xFF	; 255
    8198:	7f 4f       	sbci	r23, 0xFF	; 255
    819a:	81 2f       	mov	r24, r17
    819c:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <remote_tds_set_name(unsigned char, char*)>
    81a0:	62 96       	adiw	r28, 0x12	; 18
    81a2:	0f b6       	in	r0, 0x3f	; 63
    81a4:	f8 94       	cli
    81a6:	de bf       	out	0x3e, r29	; 62
    81a8:	0f be       	out	0x3f, r0	; 63
    81aa:	cd bf       	out	0x3d, r28	; 61
    81ac:	df 91       	pop	r29
    81ae:	cf 91       	pop	r28
    81b0:	1f 91       	pop	r17
    81b2:	08 95       	ret

000081b4 <remote_tds_set_data(unsigned char, int)>:
_Z19remote_tds_set_datahi():
    81b4:	1f 93       	push	r17
    81b6:	cf 93       	push	r28
    81b8:	df 93       	push	r29
    81ba:	8a 30       	cpi	r24, 0x0A	; 10
    81bc:	60 f5       	brcc	.+88     	; 0x8216 <remote_tds_set_data(unsigned char, int)+0x62>
    81be:	17 2f       	mov	r17, r23
    81c0:	26 2f       	mov	r18, r22
    81c2:	93 e0       	ldi	r25, 0x03	; 3
    81c4:	89 9f       	mul	r24, r25
    81c6:	e0 01       	movw	r28, r0
    81c8:	11 24       	eor	r1, r1
    81ca:	ae 01       	movw	r20, r28
    81cc:	4c 59       	subi	r20, 0x9C	; 156
    81ce:	5f 4f       	sbci	r21, 0xFF	; 255
    81d0:	05 2e       	mov	r0, r21
    81d2:	00 0c       	add	r0, r0
    81d4:	66 0b       	sbc	r22, r22
    81d6:	77 0b       	sbc	r23, r23
    81d8:	8b e4       	ldi	r24, 0x4B	; 75
    81da:	9a e0       	ldi	r25, 0x0A	; 10
    81dc:	0e 94 39 a5 	call	0x14a72	; 0x14a72 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    81e0:	ae 01       	movw	r20, r28
    81e2:	4b 59       	subi	r20, 0x9B	; 155
    81e4:	5f 4f       	sbci	r21, 0xFF	; 255
    81e6:	05 2e       	mov	r0, r21
    81e8:	00 0c       	add	r0, r0
    81ea:	66 0b       	sbc	r22, r22
    81ec:	77 0b       	sbc	r23, r23
    81ee:	21 2f       	mov	r18, r17
    81f0:	8b e4       	ldi	r24, 0x4B	; 75
    81f2:	9a e0       	ldi	r25, 0x0A	; 10
    81f4:	0e 94 39 a5 	call	0x14a72	; 0x14a72 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    81f8:	ae 01       	movw	r20, r28
    81fa:	4a 59       	subi	r20, 0x9A	; 154
    81fc:	5f 4f       	sbci	r21, 0xFF	; 255
    81fe:	05 2e       	mov	r0, r21
    8200:	00 0c       	add	r0, r0
    8202:	66 0b       	sbc	r22, r22
    8204:	77 0b       	sbc	r23, r23
    8206:	20 e0       	ldi	r18, 0x00	; 0
    8208:	8b e4       	ldi	r24, 0x4B	; 75
    820a:	9a e0       	ldi	r25, 0x0A	; 10
    820c:	df 91       	pop	r29
    820e:	cf 91       	pop	r28
    8210:	1f 91       	pop	r17
    8212:	0c 94 39 a5 	jmp	0x14a72	; 0x14a72 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    8216:	df 91       	pop	r29
    8218:	cf 91       	pop	r28
    821a:	1f 91       	pop	r17
    821c:	08 95       	ret

0000821e <remote_tds_get_data(unsigned char)>:
_Z19remote_tds_get_datah():
    821e:	0f 93       	push	r16
    8220:	1f 93       	push	r17
    8222:	cf 93       	push	r28
    8224:	df 93       	push	r29
    8226:	8a 30       	cpi	r24, 0x0A	; 10
    8228:	30 f5       	brcc	.+76     	; 0x8276 <remote_tds_get_data(unsigned char)+0x58>
    822a:	93 e0       	ldi	r25, 0x03	; 3
    822c:	89 9f       	mul	r24, r25
    822e:	80 01       	movw	r16, r0
    8230:	11 24       	eor	r1, r1
    8232:	a8 01       	movw	r20, r16
    8234:	4b 59       	subi	r20, 0x9B	; 155
    8236:	5f 4f       	sbci	r21, 0xFF	; 255
    8238:	05 2e       	mov	r0, r21
    823a:	00 0c       	add	r0, r0
    823c:	66 0b       	sbc	r22, r22
    823e:	77 0b       	sbc	r23, r23
    8240:	8b e4       	ldi	r24, 0x4B	; 75
    8242:	9a e0       	ldi	r25, 0x0A	; 10
    8244:	0e 94 14 a5 	call	0x14a28	; 0x14a28 <SRAM_23LC::readByte(unsigned long)>
    8248:	c8 2f       	mov	r28, r24
    824a:	d0 e0       	ldi	r29, 0x00	; 0
    824c:	dc 2f       	mov	r29, r28
    824e:	cc 27       	eor	r28, r28
    8250:	a8 01       	movw	r20, r16
    8252:	4c 59       	subi	r20, 0x9C	; 156
    8254:	5f 4f       	sbci	r21, 0xFF	; 255
    8256:	05 2e       	mov	r0, r21
    8258:	00 0c       	add	r0, r0
    825a:	66 0b       	sbc	r22, r22
    825c:	77 0b       	sbc	r23, r23
    825e:	8b e4       	ldi	r24, 0x4B	; 75
    8260:	9a e0       	ldi	r25, 0x0A	; 10
    8262:	0e 94 14 a5 	call	0x14a28	; 0x14a28 <SRAM_23LC::readByte(unsigned long)>
    8266:	8c 0f       	add	r24, r28
    8268:	9d 2f       	mov	r25, r29
    826a:	91 1d       	adc	r25, r1
    826c:	df 91       	pop	r29
    826e:	cf 91       	pop	r28
    8270:	1f 91       	pop	r17
    8272:	0f 91       	pop	r16
    8274:	08 95       	ret
    8276:	90 e0       	ldi	r25, 0x00	; 0
    8278:	80 e0       	ldi	r24, 0x00	; 0
    827a:	f8 cf       	rjmp	.-16     	; 0x826c <remote_tds_get_data(unsigned char)+0x4e>

0000827c <remote_tds_get_last_update(unsigned char)>:
_Z26remote_tds_get_last_updateh():
    827c:	8a 30       	cpi	r24, 0x0A	; 10
    827e:	70 f4       	brcc	.+28     	; 0x829c <remote_tds_get_last_update(unsigned char)+0x20>
    8280:	93 e0       	ldi	r25, 0x03	; 3
    8282:	89 9f       	mul	r24, r25
    8284:	a0 01       	movw	r20, r0
    8286:	11 24       	eor	r1, r1
    8288:	4a 59       	subi	r20, 0x9A	; 154
    828a:	5f 4f       	sbci	r21, 0xFF	; 255
    828c:	05 2e       	mov	r0, r21
    828e:	00 0c       	add	r0, r0
    8290:	66 0b       	sbc	r22, r22
    8292:	77 0b       	sbc	r23, r23
    8294:	8b e4       	ldi	r24, 0x4B	; 75
    8296:	9a e0       	ldi	r25, 0x0A	; 10
    8298:	0c 94 14 a5 	jmp	0x14a28	; 0x14a28 <SRAM_23LC::readByte(unsigned long)>
    829c:	8f ef       	ldi	r24, 0xFF	; 255
    829e:	08 95       	ret

000082a0 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
    82a0:	3f 92       	push	r3
    82a2:	4f 92       	push	r4
    82a4:	5f 92       	push	r5
    82a6:	6f 92       	push	r6
    82a8:	7f 92       	push	r7
    82aa:	8f 92       	push	r8
    82ac:	9f 92       	push	r9
    82ae:	af 92       	push	r10
    82b0:	bf 92       	push	r11
    82b2:	cf 92       	push	r12
    82b4:	df 92       	push	r13
    82b6:	ef 92       	push	r14
    82b8:	ff 92       	push	r15
    82ba:	0f 93       	push	r16
    82bc:	1f 93       	push	r17
    82be:	cf 93       	push	r28
    82c0:	df 93       	push	r29
    82c2:	cd b7       	in	r28, 0x3d	; 61
    82c4:	de b7       	in	r29, 0x3e	; 62
    82c6:	cd 54       	subi	r28, 0x4D	; 77
    82c8:	d1 09       	sbc	r29, r1
    82ca:	0f b6       	in	r0, 0x3f	; 63
    82cc:	f8 94       	cli
    82ce:	de bf       	out	0x3e, r29	; 62
    82d0:	0f be       	out	0x3f, r0	; 63
    82d2:	cd bf       	out	0x3d, r28	; 61
    82d4:	3c 01       	movw	r6, r24
    82d6:	4b 01       	movw	r8, r22
    82d8:	5a 01       	movw	r10, r20
    82da:	89 01       	movw	r16, r18
    82dc:	de 2c       	mov	r13, r14
    82de:	70 e0       	ldi	r23, 0x00	; 0
    82e0:	60 e0       	ldi	r22, 0x00	; 0
    82e2:	89 e8       	ldi	r24, 0x89	; 137
    82e4:	9b e0       	ldi	r25, 0x0B	; 11
    82e6:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    82ea:	08 0d       	add	r16, r8
    82ec:	19 1d       	adc	r17, r9
    82ee:	93 01       	movw	r18, r6
    82f0:	2a 0d       	add	r18, r10
    82f2:	3b 1d       	adc	r19, r11
    82f4:	a4 01       	movw	r20, r8
    82f6:	b3 01       	movw	r22, r6
    82f8:	89 e8       	ldi	r24, 0x89	; 137
    82fa:	9b e0       	ldi	r25, 0x0B	; 11
    82fc:	0e 94 44 8e 	call	0x11c88	; 0x11c88 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    8300:	ae 01       	movw	r20, r28
    8302:	45 5c       	subi	r20, 0xC5	; 197
    8304:	5f 4f       	sbci	r21, 0xFF	; 255
    8306:	be 01       	movw	r22, r28
    8308:	63 5b       	subi	r22, 0xB3	; 179
    830a:	7f 4f       	sbci	r23, 0xFF	; 255
    830c:	8e 2d       	mov	r24, r14
    830e:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8312:	2e 96       	adiw	r28, 0x0e	; 14
    8314:	3f ac       	ldd	r3, Y+63	; 0x3f
    8316:	2e 97       	sbiw	r28, 0x0e	; 14
    8318:	81 e0       	ldi	r24, 0x01	; 1
    831a:	38 12       	cpse	r3, r24
    831c:	a9 c0       	rjmp	.+338    	; 0x8470 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1d0>
    831e:	64 ee       	ldi	r22, 0xE4	; 228
    8320:	76 e5       	ldi	r23, 0x56	; 86
    8322:	ce 01       	movw	r24, r28
    8324:	01 96       	adiw	r24, 0x01	; 1
    8326:	5c 01       	movw	r10, r24
    8328:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    832c:	23 01       	movw	r4, r6
    832e:	95 e0       	ldi	r25, 0x05	; 5
    8330:	49 0e       	add	r4, r25
    8332:	51 1c       	adc	r5, r1
    8334:	c1 2c       	mov	r12, r1
    8336:	ee 24       	eor	r14, r14
    8338:	ea 94       	dec	r14
    833a:	fe 2c       	mov	r15, r14
    833c:	10 e0       	ldi	r17, 0x00	; 0
    833e:	00 e0       	ldi	r16, 0x00	; 0
    8340:	22 e0       	ldi	r18, 0x02	; 2
    8342:	a4 01       	movw	r20, r8
    8344:	46 5f       	subi	r20, 0xF6	; 246
    8346:	5f 4f       	sbci	r21, 0xFF	; 255
    8348:	b2 01       	movw	r22, r4
    834a:	c5 01       	movw	r24, r10
    834c:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8350:	be 01       	movw	r22, r28
    8352:	65 5c       	subi	r22, 0xC5	; 197
    8354:	7f 4f       	sbci	r23, 0xFF	; 255
    8356:	c5 01       	movw	r24, r10
    8358:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    835c:	b3 01       	movw	r22, r6
    835e:	6c 5e       	subi	r22, 0xEC	; 236
    8360:	7f 4f       	sbci	r23, 0xFF	; 255
    8362:	22 e0       	ldi	r18, 0x02	; 2
    8364:	a4 01       	movw	r20, r8
    8366:	42 5e       	subi	r20, 0xE2	; 226
    8368:	5f 4f       	sbci	r21, 0xFF	; 255
    836a:	c5 01       	movw	r24, r10
    836c:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8370:	8d 2d       	mov	r24, r13
    8372:	0e 94 0f 41 	call	0x821e	; 0x821e <remote_tds_get_data(unsigned char)>
    8376:	bc 01       	movw	r22, r24
    8378:	99 0f       	add	r25, r25
    837a:	88 0b       	sbc	r24, r24
    837c:	99 0b       	sbc	r25, r25
    837e:	0e 94 14 d2 	call	0x1a428	; 0x1a428 <__floatsisf>
    8382:	20 e0       	ldi	r18, 0x00	; 0
    8384:	30 e0       	ldi	r19, 0x00	; 0
    8386:	4a e7       	ldi	r20, 0x7A	; 122
    8388:	54 e4       	ldi	r21, 0x44	; 68
    838a:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
    838e:	85 01       	movw	r16, r10
    8390:	22 e0       	ldi	r18, 0x02	; 2
    8392:	44 e0       	ldi	r20, 0x04	; 4
    8394:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
    8398:	62 e6       	ldi	r22, 0x62	; 98
    839a:	75 e0       	ldi	r23, 0x05	; 5
    839c:	c5 01       	movw	r24, r10
    839e:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    83a2:	3e 01       	movw	r6, r28
    83a4:	81 e2       	ldi	r24, 0x21	; 33
    83a6:	68 0e       	add	r6, r24
    83a8:	71 1c       	adc	r7, r1
    83aa:	6a e2       	ldi	r22, 0x2A	; 42
    83ac:	78 e5       	ldi	r23, 0x58	; 88
    83ae:	c3 01       	movw	r24, r6
    83b0:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    83b4:	b5 01       	movw	r22, r10
    83b6:	c3 01       	movw	r24, r6
    83b8:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    83bc:	10 e0       	ldi	r17, 0x00	; 0
    83be:	00 e0       	ldi	r16, 0x00	; 0
    83c0:	22 e0       	ldi	r18, 0x02	; 2
    83c2:	a4 01       	movw	r20, r8
    83c4:	44 5c       	subi	r20, 0xC4	; 196
    83c6:	5f 4f       	sbci	r21, 0xFF	; 255
    83c8:	b2 01       	movw	r22, r4
    83ca:	c3 01       	movw	r24, r6
    83cc:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    83d0:	8d 2d       	mov	r24, r13
    83d2:	0e 94 3e 41 	call	0x827c	; 0x827c <remote_tds_get_last_update(unsigned char)>
    83d6:	d8 2e       	mov	r13, r24
    83d8:	67 ec       	ldi	r22, 0xC7	; 199
    83da:	76 e5       	ldi	r23, 0x56	; 86
    83dc:	c3 01       	movw	r24, r6
    83de:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    83e2:	1f 92       	push	r1
    83e4:	df 92       	push	r13
    83e6:	7f 92       	push	r7
    83e8:	6f 92       	push	r6
    83ea:	87 ed       	ldi	r24, 0xD7	; 215
    83ec:	92 e0       	ldi	r25, 0x02	; 2
    83ee:	9f 93       	push	r25
    83f0:	8f 93       	push	r24
    83f2:	bf 92       	push	r11
    83f4:	af 92       	push	r10
    83f6:	0e 94 a6 d8 	call	0x1b14c	; 0x1b14c <sprintf>
    83fa:	21 e0       	ldi	r18, 0x01	; 1
    83fc:	a4 01       	movw	r20, r8
    83fe:	40 5b       	subi	r20, 0xB0	; 176
    8400:	5f 4f       	sbci	r21, 0xFF	; 255
    8402:	b2 01       	movw	r22, r4
    8404:	c5 01       	movw	r24, r10
    8406:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    840a:	0f b6       	in	r0, 0x3f	; 63
    840c:	f8 94       	cli
    840e:	de bf       	out	0x3e, r29	; 62
    8410:	0f be       	out	0x3f, r0	; 63
    8412:	cd bf       	out	0x3d, r28	; 61
    8414:	99 ef       	ldi	r25, 0xF9	; 249
    8416:	9d 15       	cp	r25, r13
    8418:	08 f4       	brcc	.+2      	; 0x841c <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x17c>
    841a:	43 c0       	rjmp	.+134    	; 0x84a2 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x202>
    841c:	2e 96       	adiw	r28, 0x0e	; 14
    841e:	3f ae       	std	Y+63, r3	; 0x3f
    8420:	2e 97       	sbiw	r28, 0x0e	; 14
    8422:	6d ed       	ldi	r22, 0xDD	; 221
    8424:	76 e5       	ldi	r23, 0x56	; 86
    8426:	c3 01       	movw	r24, r6
    8428:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    842c:	2e 96       	adiw	r28, 0x0e	; 14
    842e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8430:	2e 97       	sbiw	r28, 0x0e	; 14
    8432:	1f 92       	push	r1
    8434:	8f 93       	push	r24
    8436:	7f 92       	push	r7
    8438:	6f 92       	push	r6
    843a:	87 ed       	ldi	r24, 0xD7	; 215
    843c:	92 e0       	ldi	r25, 0x02	; 2
    843e:	9f 93       	push	r25
    8440:	8f 93       	push	r24
    8442:	bf 92       	push	r11
    8444:	af 92       	push	r10
    8446:	0e 94 a6 d8 	call	0x1b14c	; 0x1b14c <sprintf>
    844a:	a4 01       	movw	r20, r8
    844c:	4c 59       	subi	r20, 0x9C	; 156
    844e:	5f 4f       	sbci	r21, 0xFF	; 255
    8450:	c1 2c       	mov	r12, r1
    8452:	ee 24       	eor	r14, r14
    8454:	ea 94       	dec	r14
    8456:	fe 2c       	mov	r15, r14
    8458:	10 e0       	ldi	r17, 0x00	; 0
    845a:	00 e0       	ldi	r16, 0x00	; 0
    845c:	22 e0       	ldi	r18, 0x02	; 2
    845e:	b2 01       	movw	r22, r4
    8460:	c5 01       	movw	r24, r10
    8462:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8466:	0f b6       	in	r0, 0x3f	; 63
    8468:	f8 94       	cli
    846a:	de bf       	out	0x3e, r29	; 62
    846c:	0f be       	out	0x3f, r0	; 63
    846e:	cd bf       	out	0x3d, r28	; 61
    8470:	c3 5b       	subi	r28, 0xB3	; 179
    8472:	df 4f       	sbci	r29, 0xFF	; 255
    8474:	0f b6       	in	r0, 0x3f	; 63
    8476:	f8 94       	cli
    8478:	de bf       	out	0x3e, r29	; 62
    847a:	0f be       	out	0x3f, r0	; 63
    847c:	cd bf       	out	0x3d, r28	; 61
    847e:	df 91       	pop	r29
    8480:	cf 91       	pop	r28
    8482:	1f 91       	pop	r17
    8484:	0f 91       	pop	r16
    8486:	ff 90       	pop	r15
    8488:	ef 90       	pop	r14
    848a:	df 90       	pop	r13
    848c:	cf 90       	pop	r12
    848e:	bf 90       	pop	r11
    8490:	af 90       	pop	r10
    8492:	9f 90       	pop	r9
    8494:	8f 90       	pop	r8
    8496:	7f 90       	pop	r7
    8498:	6f 90       	pop	r6
    849a:	5f 90       	pop	r5
    849c:	4f 90       	pop	r4
    849e:	3f 90       	pop	r3
    84a0:	08 95       	ret
    84a2:	2e 96       	adiw	r28, 0x0e	; 14
    84a4:	1f ae       	std	Y+63, r1	; 0x3f
    84a6:	2e 97       	sbiw	r28, 0x0e	; 14
    84a8:	bc cf       	rjmp	.-136    	; 0x8422 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x182>

000084aa <remote_tds_inc_last_update(unsigned char)>:
_Z26remote_tds_inc_last_updateh():
    84aa:	cf 92       	push	r12
    84ac:	df 92       	push	r13
    84ae:	ef 92       	push	r14
    84b0:	ff 92       	push	r15
    84b2:	8a 30       	cpi	r24, 0x0A	; 10
    84b4:	d8 f4       	brcc	.+54     	; 0x84ec <remote_tds_inc_last_update(unsigned char)+0x42>
    84b6:	93 e0       	ldi	r25, 0x03	; 3
    84b8:	89 9f       	mul	r24, r25
    84ba:	60 01       	movw	r12, r0
    84bc:	11 24       	eor	r1, r1
    84be:	86 e6       	ldi	r24, 0x66	; 102
    84c0:	c8 0e       	add	r12, r24
    84c2:	d1 1c       	adc	r13, r1
    84c4:	0d 2c       	mov	r0, r13
    84c6:	00 0c       	add	r0, r0
    84c8:	ee 08       	sbc	r14, r14
    84ca:	ff 08       	sbc	r15, r15
    84cc:	b7 01       	movw	r22, r14
    84ce:	a6 01       	movw	r20, r12
    84d0:	8b e4       	ldi	r24, 0x4B	; 75
    84d2:	9a e0       	ldi	r25, 0x0A	; 10
    84d4:	0e 94 14 a5 	call	0x14a28	; 0x14a28 <SRAM_23LC::readByte(unsigned long)>
    84d8:	8a 3f       	cpi	r24, 0xFA	; 250
    84da:	08 f4       	brcc	.+2      	; 0x84de <remote_tds_inc_last_update(unsigned char)+0x34>
    84dc:	8f 5f       	subi	r24, 0xFF	; 255
    84de:	28 2f       	mov	r18, r24
    84e0:	b7 01       	movw	r22, r14
    84e2:	a6 01       	movw	r20, r12
    84e4:	8b e4       	ldi	r24, 0x4B	; 75
    84e6:	9a e0       	ldi	r25, 0x0A	; 10
    84e8:	0e 94 39 a5 	call	0x14a72	; 0x14a72 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    84ec:	ff 90       	pop	r15
    84ee:	ef 90       	pop	r14
    84f0:	df 90       	pop	r13
    84f2:	cf 90       	pop	r12
    84f4:	08 95       	ret

000084f6 <remote_tds_update_last_update()>:
_Z29remote_tds_update_last_updatev():
    84f6:	1f 93       	push	r17
    84f8:	cf 93       	push	r28
    84fa:	df 93       	push	r29
    84fc:	1f 92       	push	r1
    84fe:	cd b7       	in	r28, 0x3d	; 61
    8500:	de b7       	in	r29, 0x3e	; 62
    8502:	10 e0       	ldi	r17, 0x00	; 0
    8504:	be 01       	movw	r22, r28
    8506:	6f 5f       	subi	r22, 0xFF	; 255
    8508:	7f 4f       	sbci	r23, 0xFF	; 255
    850a:	81 2f       	mov	r24, r17
    850c:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <remote_tds_get_active(unsigned char, unsigned char*)>
    8510:	89 81       	ldd	r24, Y+1	; 0x01
    8512:	81 30       	cpi	r24, 0x01	; 1
    8514:	19 f4       	brne	.+6      	; 0x851c <remote_tds_update_last_update()+0x26>
    8516:	81 2f       	mov	r24, r17
    8518:	0e 94 55 42 	call	0x84aa	; 0x84aa <remote_tds_inc_last_update(unsigned char)>
    851c:	1f 5f       	subi	r17, 0xFF	; 255
    851e:	1a 30       	cpi	r17, 0x0A	; 10
    8520:	89 f7       	brne	.-30     	; 0x8504 <remote_tds_update_last_update()+0xe>
    8522:	0f 90       	pop	r0
    8524:	df 91       	pop	r29
    8526:	cf 91       	pop	r28
    8528:	1f 91       	pop	r17
    852a:	08 95       	ret

0000852c <set_default_ring(unsigned char)>:
_Z16set_default_ringh():
    852c:	68 2f       	mov	r22, r24
    852e:	8c e5       	ldi	r24, 0x5C	; 92
    8530:	90 e0       	ldi	r25, 0x00	; 0
    8532:	0c 94 5c 35 	jmp	0x6ab8	; 0x6ab8 <EEPROMClass::write(int, unsigned char) [clone .isra.4]>

00008536 <get_default_ring()>:
_ZNK5EERefdeEv():
    8536:	8c e5       	ldi	r24, 0x5C	; 92
    8538:	90 e0       	ldi	r25, 0x00	; 0
    853a:	0c 94 79 df 	jmp	0x1bef2	; 0x1bef2 <eeprom_read_byte>

0000853e <set_default_show_temp(unsigned char)>:
_Z21set_default_show_temph():
    853e:	68 2f       	mov	r22, r24
    8540:	8d e5       	ldi	r24, 0x5D	; 93
    8542:	90 e0       	ldi	r25, 0x00	; 0
    8544:	0c 94 5c 35 	jmp	0x6ab8	; 0x6ab8 <EEPROMClass::write(int, unsigned char) [clone .isra.4]>

00008548 <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_show_default_tempjjh():
    8548:	84 2f       	mov	r24, r20
    854a:	40 93 11 0a 	sts	0x0A11, r20	; 0x800a11 <default_show_temp>
    854e:	0c 94 9f 42 	jmp	0x853e	; 0x853e <set_default_show_temp(unsigned char)>

00008552 <get_default_show_temp()>:
_ZNK5EERefdeEv():
    8552:	8d e5       	ldi	r24, 0x5D	; 93
    8554:	90 e0       	ldi	r25, 0x00	; 0
    8556:	0c 94 79 df 	jmp	0x1bef2	; 0x1bef2 <eeprom_read_byte>

0000855a <tds_extended_memory_store()>:
_Z25tds_extended_memory_storev():
    855a:	1f 93       	push	r17
    855c:	cf 93       	push	r28
    855e:	df 93       	push	r29
    8560:	cd b7       	in	r28, 0x3d	; 61
    8562:	de b7       	in	r29, 0x3e	; 62
    8564:	66 97       	sbiw	r28, 0x16	; 22
    8566:	0f b6       	in	r0, 0x3f	; 63
    8568:	f8 94       	cli
    856a:	de bf       	out	0x3e, r29	; 62
    856c:	0f be       	out	0x3f, r0	; 63
    856e:	cd bf       	out	0x3d, r28	; 61
    8570:	10 e0       	ldi	r17, 0x00	; 0
    8572:	be 01       	movw	r22, r28
    8574:	6f 5f       	subi	r22, 0xFF	; 255
    8576:	7f 4f       	sbci	r23, 0xFF	; 255
    8578:	81 2f       	mov	r24, r17
    857a:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    857e:	1f 5f       	subi	r17, 0xFF	; 255
    8580:	16 30       	cpi	r17, 0x06	; 6
    8582:	b9 f7       	brne	.-18     	; 0x8572 <tds_extended_memory_store()+0x18>
    8584:	66 96       	adiw	r28, 0x16	; 22
    8586:	0f b6       	in	r0, 0x3f	; 63
    8588:	f8 94       	cli
    858a:	de bf       	out	0x3e, r29	; 62
    858c:	0f be       	out	0x3f, r0	; 63
    858e:	cd bf       	out	0x3d, r28	; 61
    8590:	df 91       	pop	r29
    8592:	cf 91       	pop	r28
    8594:	1f 91       	pop	r17
    8596:	08 95       	ret

00008598 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
    8598:	0f 93       	push	r16
    859a:	1f 93       	push	r17
    859c:	cf 93       	push	r28
    859e:	df 93       	push	r29
    85a0:	cd b7       	in	r28, 0x3d	; 61
    85a2:	de b7       	in	r29, 0x3e	; 62
    85a4:	a4 97       	sbiw	r28, 0x24	; 36
    85a6:	0f b6       	in	r0, 0x3f	; 63
    85a8:	f8 94       	cli
    85aa:	de bf       	out	0x3e, r29	; 62
    85ac:	0f be       	out	0x3f, r0	; 63
    85ae:	cd bf       	out	0x3d, r28	; 61
    85b0:	8d ee       	ldi	r24, 0xED	; 237
    85b2:	9b e0       	ldi	r25, 0x0B	; 11
    85b4:	0e 94 0e b9 	call	0x1721c	; 0x1721c <PubSubClient::connected()>
    85b8:	81 11       	cpse	r24, r1
    85ba:	98 c0       	rjmp	.+304    	; 0x86ec <mqtt_reconnect()+0x154>
    85bc:	ce 01       	movw	r24, r28
    85be:	4b 96       	adiw	r24, 0x1b	; 27
    85c0:	0e 94 7e 7d 	call	0xfafc	; 0xfafc <device_get_name(char*)>
    85c4:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    85c8:	00 91 38 0a 	lds	r16, 0x0A38	; 0x800a38 <lastmqttconnect>
    85cc:	10 91 39 0a 	lds	r17, 0x0A39	; 0x800a39 <lastmqttconnect+0x1>
    85d0:	20 91 3a 0a 	lds	r18, 0x0A3A	; 0x800a3a <lastmqttconnect+0x2>
    85d4:	30 91 3b 0a 	lds	r19, 0x0A3B	; 0x800a3b <lastmqttconnect+0x3>
    85d8:	06 17       	cp	r16, r22
    85da:	17 07       	cpc	r17, r23
    85dc:	28 07       	cpc	r18, r24
    85de:	39 07       	cpc	r19, r25
    85e0:	0c f0       	brlt	.+2      	; 0x85e4 <mqtt_reconnect()+0x4c>
    85e2:	84 c0       	rjmp	.+264    	; 0x86ec <mqtt_reconnect()+0x154>
    85e4:	68 57       	subi	r22, 0x78	; 120
    85e6:	7c 4e       	sbci	r23, 0xEC	; 236
    85e8:	8f 4f       	sbci	r24, 0xFF	; 255
    85ea:	9f 4f       	sbci	r25, 0xFF	; 255
    85ec:	60 93 38 0a 	sts	0x0A38, r22	; 0x800a38 <lastmqttconnect>
    85f0:	70 93 39 0a 	sts	0x0A39, r23	; 0x800a39 <lastmqttconnect+0x1>
    85f4:	80 93 3a 0a 	sts	0x0A3A, r24	; 0x800a3a <lastmqttconnect+0x2>
    85f8:	90 93 3b 0a 	sts	0x0A3B, r25	; 0x800a3b <lastmqttconnect+0x3>
    85fc:	be 01       	movw	r22, r28
    85fe:	65 5e       	subi	r22, 0xE5	; 229
    8600:	7f 4f       	sbci	r23, 0xFF	; 255
    8602:	8d ee       	ldi	r24, 0xED	; 237
    8604:	9b e0       	ldi	r25, 0x0B	; 11
    8606:	0e 94 98 ba 	call	0x17530	; 0x17530 <PubSubClient::connect(char const*)>
    860a:	88 23       	and	r24, r24
    860c:	09 f4       	brne	.+2      	; 0x8610 <mqtt_reconnect()+0x78>
    860e:	6e c0       	rjmp	.+220    	; 0x86ec <mqtt_reconnect()+0x154>
    8610:	6d e0       	ldi	r22, 0x0D	; 13
    8612:	76 e5       	ldi	r23, 0x56	; 86
    8614:	ce 01       	movw	r24, r28
    8616:	01 96       	adiw	r24, 0x01	; 1
    8618:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    861c:	be 01       	movw	r22, r28
    861e:	65 5e       	subi	r22, 0xE5	; 229
    8620:	7f 4f       	sbci	r23, 0xFF	; 255
    8622:	ce 01       	movw	r24, r28
    8624:	01 96       	adiw	r24, 0x01	; 1
    8626:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    862a:	6f e1       	ldi	r22, 0x1F	; 31
    862c:	73 e0       	ldi	r23, 0x03	; 3
    862e:	ce 01       	movw	r24, r28
    8630:	01 96       	adiw	r24, 0x01	; 1
    8632:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    8636:	be 01       	movw	r22, r28
    8638:	6f 5f       	subi	r22, 0xFF	; 255
    863a:	7f 4f       	sbci	r23, 0xFF	; 255
    863c:	8d ee       	ldi	r24, 0xED	; 237
    863e:	9b e0       	ldi	r25, 0x0B	; 11
    8640:	0e 94 fe bc 	call	0x179fc	; 0x179fc <PubSubClient::subscribe(char const*)>
    8644:	6d e0       	ldi	r22, 0x0D	; 13
    8646:	76 e5       	ldi	r23, 0x56	; 86
    8648:	ce 01       	movw	r24, r28
    864a:	01 96       	adiw	r24, 0x01	; 1
    864c:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    8650:	69 e1       	ldi	r22, 0x19	; 25
    8652:	73 e0       	ldi	r23, 0x03	; 3
    8654:	ce 01       	movw	r24, r28
    8656:	01 96       	adiw	r24, 0x01	; 1
    8658:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    865c:	be 01       	movw	r22, r28
    865e:	6f 5f       	subi	r22, 0xFF	; 255
    8660:	7f 4f       	sbci	r23, 0xFF	; 255
    8662:	8d ee       	ldi	r24, 0xED	; 237
    8664:	9b e0       	ldi	r25, 0x0B	; 11
    8666:	0e 94 fe bc 	call	0x179fc	; 0x179fc <PubSubClient::subscribe(char const*)>
    866a:	10 e0       	ldi	r17, 0x00	; 0
    866c:	81 2f       	mov	r24, r17
    866e:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <remote_tds_subscibe_topic(unsigned char)>
    8672:	1f 5f       	subi	r17, 0xFF	; 255
    8674:	1a 30       	cpi	r17, 0x0A	; 10
    8676:	d1 f7       	brne	.-12     	; 0x866c <mqtt_reconnect()+0xd4>
    8678:	64 ed       	ldi	r22, 0xD4	; 212
    867a:	75 e5       	ldi	r23, 0x55	; 85
    867c:	ce 01       	movw	r24, r28
    867e:	01 96       	adiw	r24, 0x01	; 1
    8680:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    8684:	6f e1       	ldi	r22, 0x1F	; 31
    8686:	73 e0       	ldi	r23, 0x03	; 3
    8688:	ce 01       	movw	r24, r28
    868a:	01 96       	adiw	r24, 0x01	; 1
    868c:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    8690:	be 01       	movw	r22, r28
    8692:	6f 5f       	subi	r22, 0xFF	; 255
    8694:	7f 4f       	sbci	r23, 0xFF	; 255
    8696:	8d ee       	ldi	r24, 0xED	; 237
    8698:	9b e0       	ldi	r25, 0x0B	; 11
    869a:	0e 94 fe bc 	call	0x179fc	; 0x179fc <PubSubClient::subscribe(char const*)>
    869e:	6c eb       	ldi	r22, 0xBC	; 188
    86a0:	75 e5       	ldi	r23, 0x55	; 85
    86a2:	ce 01       	movw	r24, r28
    86a4:	01 96       	adiw	r24, 0x01	; 1
    86a6:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    86aa:	be 01       	movw	r22, r28
    86ac:	6f 5f       	subi	r22, 0xFF	; 255
    86ae:	7f 4f       	sbci	r23, 0xFF	; 255
    86b0:	8d ee       	ldi	r24, 0xED	; 237
    86b2:	9b e0       	ldi	r25, 0x0B	; 11
    86b4:	0e 94 fe bc 	call	0x179fc	; 0x179fc <PubSubClient::subscribe(char const*)>
    86b8:	65 ea       	ldi	r22, 0xA5	; 165
    86ba:	75 e5       	ldi	r23, 0x55	; 85
    86bc:	ce 01       	movw	r24, r28
    86be:	01 96       	adiw	r24, 0x01	; 1
    86c0:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    86c4:	be 01       	movw	r22, r28
    86c6:	6f 5f       	subi	r22, 0xFF	; 255
    86c8:	7f 4f       	sbci	r23, 0xFF	; 255
    86ca:	8d ee       	ldi	r24, 0xED	; 237
    86cc:	9b e0       	ldi	r25, 0x0B	; 11
    86ce:	0e 94 fe bc 	call	0x179fc	; 0x179fc <PubSubClient::subscribe(char const*)>
    86d2:	63 ee       	ldi	r22, 0xE3	; 227
    86d4:	75 e5       	ldi	r23, 0x55	; 85
    86d6:	ce 01       	movw	r24, r28
    86d8:	01 96       	adiw	r24, 0x01	; 1
    86da:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    86de:	be 01       	movw	r22, r28
    86e0:	6f 5f       	subi	r22, 0xFF	; 255
    86e2:	7f 4f       	sbci	r23, 0xFF	; 255
    86e4:	8d ee       	ldi	r24, 0xED	; 237
    86e6:	9b e0       	ldi	r25, 0x0B	; 11
    86e8:	0e 94 fe bc 	call	0x179fc	; 0x179fc <PubSubClient::subscribe(char const*)>
    86ec:	8d ee       	ldi	r24, 0xED	; 237
    86ee:	9b e0       	ldi	r25, 0x0B	; 11
    86f0:	0e 94 8a bd 	call	0x17b14	; 0x17b14 <PubSubClient::state()>
    86f4:	a4 96       	adiw	r28, 0x24	; 36
    86f6:	0f b6       	in	r0, 0x3f	; 63
    86f8:	f8 94       	cli
    86fa:	de bf       	out	0x3e, r29	; 62
    86fc:	0f be       	out	0x3f, r0	; 63
    86fe:	cd bf       	out	0x3d, r28	; 61
    8700:	df 91       	pop	r29
    8702:	cf 91       	pop	r28
    8704:	1f 91       	pop	r17
    8706:	0f 91       	pop	r16
    8708:	08 95       	ret

0000870a <send_mqtt_onewire()>:
_Z17send_mqtt_onewirev():
    870a:	cf 92       	push	r12
    870c:	df 92       	push	r13
    870e:	ef 92       	push	r14
    8710:	ff 92       	push	r15
    8712:	0f 93       	push	r16
    8714:	1f 93       	push	r17
    8716:	cf 93       	push	r28
    8718:	df 93       	push	r29
    871a:	cd b7       	in	r28, 0x3d	; 61
    871c:	de b7       	in	r29, 0x3e	; 62
    871e:	c0 54       	subi	r28, 0x40	; 64
    8720:	d1 09       	sbc	r29, r1
    8722:	0f b6       	in	r0, 0x3f	; 63
    8724:	f8 94       	cli
    8726:	de bf       	out	0x3e, r29	; 62
    8728:	0f be       	out	0x3f, r0	; 63
    872a:	cd bf       	out	0x3d, r28	; 61
    872c:	80 91 78 0f 	lds	r24, 0x0F78	; 0x800f78 <Global_HWwirenum>
itoa():
    8730:	4a e0       	ldi	r20, 0x0A	; 10
    8732:	be 01       	movw	r22, r28
    8734:	6f 5f       	subi	r22, 0xFF	; 255
    8736:	7f 4f       	sbci	r23, 0xFF	; 255
    8738:	90 e0       	ldi	r25, 0x00	; 0
    873a:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    873e:	ae 01       	movw	r20, r28
    8740:	4f 5f       	subi	r20, 0xFF	; 255
    8742:	5f 4f       	sbci	r21, 0xFF	; 255
    8744:	62 e2       	ldi	r22, 0x22	; 34
    8746:	73 e0       	ldi	r23, 0x03	; 3
    8748:	8d ee       	ldi	r24, 0xED	; 237
    874a:	9b e0       	ldi	r25, 0x0B	; 11
    874c:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    8750:	f1 2c       	mov	r15, r1
    8752:	8b e0       	ldi	r24, 0x0B	; 11
    8754:	e8 2e       	mov	r14, r24
    8756:	80 91 78 0f 	lds	r24, 0x0F78	; 0x800f78 <Global_HWwirenum>
    875a:	f8 16       	cp	r15, r24
    875c:	e8 f5       	brcc	.+122    	; 0x87d8 <send_mqtt_onewire()+0xce>
    875e:	fe 9c       	mul	r15, r14
    8760:	c0 01       	movw	r24, r0
    8762:	11 24       	eor	r1, r1
    8764:	9c 01       	movw	r18, r24
    8766:	2a 5c       	subi	r18, 0xCA	; 202
    8768:	30 4f       	sbci	r19, 0xF0	; 240
    876a:	69 01       	movw	r12, r18
    876c:	00 e1       	ldi	r16, 0x10	; 16
    876e:	28 e0       	ldi	r18, 0x08	; 8
    8770:	a6 01       	movw	r20, r12
    8772:	6a e3       	ldi	r22, 0x3A	; 58
    8774:	ce 01       	movw	r24, r28
    8776:	01 96       	adiw	r24, 0x01	; 1
    8778:	0e 94 ba b3 	call	0x16774	; 0x16774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    877c:	8e 01       	movw	r16, r28
    877e:	0f 5f       	subi	r16, 0xFF	; 255
    8780:	1f 4f       	sbci	r17, 0xFF	; 255
    8782:	2e e2       	ldi	r18, 0x2E	; 46
    8784:	33 e0       	ldi	r19, 0x03	; 3
    8786:	4f 2d       	mov	r20, r15
    8788:	62 e3       	ldi	r22, 0x32	; 50
    878a:	73 e0       	ldi	r23, 0x03	; 3
    878c:	8d ee       	ldi	r24, 0xED	; 237
    878e:	9b e0       	ldi	r25, 0x0B	; 11
    8790:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    8794:	f6 01       	movw	r30, r12
    8796:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
    8798:	4a e0       	ldi	r20, 0x0A	; 10
    879a:	b8 01       	movw	r22, r16
    879c:	90 e0       	ldi	r25, 0x00	; 0
    879e:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    87a2:	28 e3       	ldi	r18, 0x38	; 56
    87a4:	33 e0       	ldi	r19, 0x03	; 3
    87a6:	4f 2d       	mov	r20, r15
    87a8:	62 e3       	ldi	r22, 0x32	; 50
    87aa:	73 e0       	ldi	r23, 0x03	; 3
    87ac:	8d ee       	ldi	r24, 0xED	; 237
    87ae:	9b e0       	ldi	r25, 0x0B	; 11
    87b0:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    87b4:	f6 01       	movw	r30, r12
    87b6:	82 85       	ldd	r24, Z+10	; 0x0a
itoa():
    87b8:	4a e0       	ldi	r20, 0x0A	; 10
    87ba:	b8 01       	movw	r22, r16
    87bc:	90 e0       	ldi	r25, 0x00	; 0
    87be:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    87c2:	21 e4       	ldi	r18, 0x41	; 65
    87c4:	33 e0       	ldi	r19, 0x03	; 3
    87c6:	4f 2d       	mov	r20, r15
    87c8:	62 e3       	ldi	r22, 0x32	; 50
    87ca:	73 e0       	ldi	r23, 0x03	; 3
    87cc:	8d ee       	ldi	r24, 0xED	; 237
    87ce:	9b e0       	ldi	r25, 0x0B	; 11
    87d0:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    87d4:	f3 94       	inc	r15
    87d6:	bf cf       	rjmp	.-130    	; 0x8756 <send_mqtt_onewire()+0x4c>
    87d8:	c0 5c       	subi	r28, 0xC0	; 192
    87da:	df 4f       	sbci	r29, 0xFF	; 255
    87dc:	0f b6       	in	r0, 0x3f	; 63
    87de:	f8 94       	cli
    87e0:	de bf       	out	0x3e, r29	; 62
    87e2:	0f be       	out	0x3f, r0	; 63
    87e4:	cd bf       	out	0x3d, r28	; 61
    87e6:	df 91       	pop	r29
    87e8:	cf 91       	pop	r28
    87ea:	1f 91       	pop	r17
    87ec:	0f 91       	pop	r16
    87ee:	ff 90       	pop	r15
    87f0:	ef 90       	pop	r14
    87f2:	df 90       	pop	r13
    87f4:	cf 90       	pop	r12
    87f6:	08 95       	ret

000087f8 <send_mqtt_tds()>:
_Z13send_mqtt_tdsv():
    87f8:	2f 92       	push	r2
    87fa:	3f 92       	push	r3
    87fc:	4f 92       	push	r4
    87fe:	5f 92       	push	r5
    8800:	6f 92       	push	r6
    8802:	7f 92       	push	r7
    8804:	8f 92       	push	r8
    8806:	9f 92       	push	r9
    8808:	af 92       	push	r10
    880a:	bf 92       	push	r11
    880c:	cf 92       	push	r12
    880e:	df 92       	push	r13
    8810:	ff 92       	push	r15
    8812:	0f 93       	push	r16
    8814:	1f 93       	push	r17
    8816:	cf 93       	push	r28
    8818:	df 93       	push	r29
    881a:	cd b7       	in	r28, 0x3d	; 61
    881c:	de b7       	in	r29, 0x3e	; 62
    881e:	c6 55       	subi	r28, 0x56	; 86
    8820:	d1 09       	sbc	r29, r1
    8822:	0f b6       	in	r0, 0x3f	; 63
    8824:	f8 94       	cli
    8826:	de bf       	out	0x3e, r29	; 62
    8828:	0f be       	out	0x3f, r0	; 63
    882a:	cd bf       	out	0x3d, r28	; 61
    882c:	39 e7       	ldi	r19, 0x79	; 121
    882e:	c3 2e       	mov	r12, r19
    8830:	3f e0       	ldi	r19, 0x0F	; 15
    8832:	d3 2e       	mov	r13, r19
    8834:	f1 2c       	mov	r15, r1
    8836:	4a e0       	ldi	r20, 0x0A	; 10
    8838:	a4 2e       	mov	r10, r20
    883a:	b1 2c       	mov	r11, r1
    883c:	54 e6       	ldi	r21, 0x64	; 100
    883e:	25 2e       	mov	r2, r21
    8840:	31 2c       	mov	r3, r1
    8842:	41 2c       	mov	r4, r1
    8844:	51 2c       	mov	r5, r1
    8846:	61 e4       	ldi	r22, 0x41	; 65
    8848:	86 2e       	mov	r8, r22
    884a:	91 2c       	mov	r9, r1
    884c:	8c 0e       	add	r8, r28
    884e:	9d 1e       	adc	r9, r29
    8850:	8c e0       	ldi	r24, 0x0C	; 12
    8852:	88 0e       	add	r8, r24
    8854:	91 1c       	adc	r9, r1
    8856:	71 e4       	ldi	r23, 0x41	; 65
    8858:	67 2e       	mov	r6, r23
    885a:	71 2c       	mov	r7, r1
    885c:	6c 0e       	add	r6, r28
    885e:	7d 1e       	adc	r7, r29
    8860:	ef ef       	ldi	r30, 0xFF	; 255
    8862:	6e 1a       	sub	r6, r30
    8864:	7e 0a       	sbc	r7, r30
    8866:	be 01       	movw	r22, r28
    8868:	6f 5b       	subi	r22, 0xBF	; 191
    886a:	7f 4f       	sbci	r23, 0xFF	; 255
    886c:	8f 2d       	mov	r24, r15
    886e:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    8872:	81 30       	cpi	r24, 0x01	; 1
    8874:	09 f0       	breq	.+2      	; 0x8878 <send_mqtt_tds()+0x80>
    8876:	ba c0       	rjmp	.+372    	; 0x89ec <send_mqtt_tds()+0x1f4>
    8878:	22 96       	adiw	r28, 0x02	; 2
    887a:	8f ad       	ldd	r24, Y+63	; 0x3f
    887c:	22 97       	sbiw	r28, 0x02	; 2
    887e:	81 30       	cpi	r24, 0x01	; 1
    8880:	09 f0       	breq	.+2      	; 0x8884 <send_mqtt_tds()+0x8c>
    8882:	b4 c0       	rjmp	.+360    	; 0x89ec <send_mqtt_tds()+0x1f4>
    8884:	f6 01       	movw	r30, r12
    8886:	83 8d       	ldd	r24, Z+27	; 0x1b
    8888:	81 30       	cpi	r24, 0x01	; 1
    888a:	09 f0       	breq	.+2      	; 0x888e <send_mqtt_tds()+0x96>
    888c:	af c0       	rjmp	.+350    	; 0x89ec <send_mqtt_tds()+0x1f4>
    888e:	85 81       	ldd	r24, Z+5	; 0x05
    8890:	96 81       	ldd	r25, Z+6	; 0x06
    8892:	b5 01       	movw	r22, r10
    8894:	0e 94 66 d3 	call	0x1a6cc	; 0x1a6cc <__divmodhi4>
    8898:	cb 01       	movw	r24, r22
itoa():
    889a:	4a e0       	ldi	r20, 0x0A	; 10
    889c:	be 01       	movw	r22, r28
    889e:	6f 5f       	subi	r22, 0xFF	; 255
    88a0:	7f 4f       	sbci	r23, 0xFF	; 255
    88a2:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    88a6:	8e 01       	movw	r16, r28
    88a8:	0f 5f       	subi	r16, 0xFF	; 255
    88aa:	1f 4f       	sbci	r17, 0xFF	; 255
    88ac:	29 e4       	ldi	r18, 0x49	; 73
    88ae:	33 e0       	ldi	r19, 0x03	; 3
    88b0:	4f 2d       	mov	r20, r15
    88b2:	63 ea       	ldi	r22, 0xA3	; 163
    88b4:	73 e0       	ldi	r23, 0x03	; 3
    88b6:	8d ee       	ldi	r24, 0xED	; 237
    88b8:	9b e0       	ldi	r25, 0x0B	; 11
    88ba:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    88be:	50 e0       	ldi	r21, 0x00	; 0
    88c0:	40 e0       	ldi	r20, 0x00	; 0
    88c2:	60 e0       	ldi	r22, 0x00	; 0
    88c4:	70 e0       	ldi	r23, 0x00	; 0
    88c6:	cb 01       	movw	r24, r22
    88c8:	fa 01       	movw	r30, r20
    88ca:	ee 0f       	add	r30, r30
    88cc:	ff 1f       	adc	r31, r31
    88ce:	ec 0d       	add	r30, r12
    88d0:	fd 1d       	adc	r31, r13
    88d2:	07 81       	ldd	r16, Z+7	; 0x07
    88d4:	10 85       	ldd	r17, Z+8	; 0x08
    88d6:	01 2e       	mov	r0, r17
    88d8:	00 0c       	add	r0, r0
    88da:	22 0b       	sbc	r18, r18
    88dc:	33 0b       	sbc	r19, r19
    88de:	60 0f       	add	r22, r16
    88e0:	71 1f       	adc	r23, r17
    88e2:	82 1f       	adc	r24, r18
    88e4:	93 1f       	adc	r25, r19
    88e6:	4f 5f       	subi	r20, 0xFF	; 255
    88e8:	5f 4f       	sbci	r21, 0xFF	; 255
    88ea:	4a 30       	cpi	r20, 0x0A	; 10
    88ec:	51 05       	cpc	r21, r1
    88ee:	61 f7       	brne	.-40     	; 0x88c8 <send_mqtt_tds()+0xd0>
    88f0:	a2 01       	movw	r20, r4
    88f2:	91 01       	movw	r18, r2
    88f4:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <__divmodsi4>
    88f8:	c9 01       	movw	r24, r18
itoa():
    88fa:	4a e0       	ldi	r20, 0x0A	; 10
    88fc:	be 01       	movw	r22, r28
    88fe:	6f 5f       	subi	r22, 0xFF	; 255
    8900:	7f 4f       	sbci	r23, 0xFF	; 255
    8902:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    8906:	8e 01       	movw	r16, r28
    8908:	0f 5f       	subi	r16, 0xFF	; 255
    890a:	1f 4f       	sbci	r17, 0xFF	; 255
    890c:	2e e4       	ldi	r18, 0x4E	; 78
    890e:	33 e0       	ldi	r19, 0x03	; 3
    8910:	4f 2d       	mov	r20, r15
    8912:	63 ea       	ldi	r22, 0xA3	; 163
    8914:	73 e0       	ldi	r23, 0x03	; 3
    8916:	8d ee       	ldi	r24, 0xED	; 237
    8918:	9b e0       	ldi	r25, 0x0B	; 11
    891a:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    891e:	b4 01       	movw	r22, r8
    8920:	c8 01       	movw	r24, r16
    8922:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    8926:	27 e5       	ldi	r18, 0x57	; 87
    8928:	33 e0       	ldi	r19, 0x03	; 3
    892a:	4f 2d       	mov	r20, r15
    892c:	63 ea       	ldi	r22, 0xA3	; 163
    892e:	73 e0       	ldi	r23, 0x03	; 3
    8930:	8d ee       	ldi	r24, 0xED	; 237
    8932:	9b e0       	ldi	r25, 0x0B	; 11
    8934:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
itoa():
    8938:	4a e0       	ldi	r20, 0x0A	; 10
    893a:	b8 01       	movw	r22, r16
    893c:	2d 96       	adiw	r28, 0x0d	; 13
    893e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8940:	9f ad       	ldd	r25, Y+63	; 0x3f
    8942:	2d 97       	sbiw	r28, 0x0d	; 13
    8944:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    8948:	29 e7       	ldi	r18, 0x79	; 121
    894a:	34 e0       	ldi	r19, 0x04	; 4
    894c:	4f 2d       	mov	r20, r15
    894e:	63 ea       	ldi	r22, 0xA3	; 163
    8950:	73 e0       	ldi	r23, 0x03	; 3
    8952:	8d ee       	ldi	r24, 0xED	; 237
    8954:	9b e0       	ldi	r25, 0x0B	; 11
    8956:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    895a:	f6 01       	movw	r30, r12
    895c:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
    895e:	4a e0       	ldi	r20, 0x0A	; 10
    8960:	b8 01       	movw	r22, r16
    8962:	90 e0       	ldi	r25, 0x00	; 0
    8964:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    8968:	2c e5       	ldi	r18, 0x5C	; 92
    896a:	33 e0       	ldi	r19, 0x03	; 3
    896c:	4f 2d       	mov	r20, r15
    896e:	63 ea       	ldi	r22, 0xA3	; 163
    8970:	73 e0       	ldi	r23, 0x03	; 3
    8972:	8d ee       	ldi	r24, 0xED	; 237
    8974:	9b e0       	ldi	r25, 0x0B	; 11
    8976:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    897a:	19 82       	std	Y+1, r1	; 0x01
    897c:	00 e1       	ldi	r16, 0x10	; 16
    897e:	28 e0       	ldi	r18, 0x08	; 8
    8980:	a3 01       	movw	r20, r6
    8982:	6a e3       	ldi	r22, 0x3A	; 58
    8984:	ce 01       	movw	r24, r28
    8986:	01 96       	adiw	r24, 0x01	; 1
    8988:	0e 94 ba b3 	call	0x16774	; 0x16774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    898c:	8e 01       	movw	r16, r28
    898e:	0f 5f       	subi	r16, 0xFF	; 255
    8990:	1f 4f       	sbci	r17, 0xFF	; 255
    8992:	2e e2       	ldi	r18, 0x2E	; 46
    8994:	33 e0       	ldi	r19, 0x03	; 3
    8996:	4f 2d       	mov	r20, r15
    8998:	63 ea       	ldi	r22, 0xA3	; 163
    899a:	73 e0       	ldi	r23, 0x03	; 3
    899c:	8d ee       	ldi	r24, 0xED	; 237
    899e:	9b e0       	ldi	r25, 0x0B	; 11
    89a0:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    89a4:	66 96       	adiw	r28, 0x16	; 22
    89a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    89a8:	66 97       	sbiw	r28, 0x16	; 22
itoa():
    89aa:	4a e0       	ldi	r20, 0x0A	; 10
    89ac:	b8 01       	movw	r22, r16
    89ae:	90 e0       	ldi	r25, 0x00	; 0
    89b0:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    89b4:	23 e6       	ldi	r18, 0x63	; 99
    89b6:	33 e0       	ldi	r19, 0x03	; 3
    89b8:	4f 2d       	mov	r20, r15
    89ba:	63 ea       	ldi	r22, 0xA3	; 163
    89bc:	73 e0       	ldi	r23, 0x03	; 3
    89be:	8d ee       	ldi	r24, 0xED	; 237
    89c0:	9b e0       	ldi	r25, 0x0B	; 11
    89c2:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    89c6:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <uptime>
    89ca:	f6 01       	movw	r30, r12
    89cc:	94 8d       	ldd	r25, Z+28	; 0x1c
itoa():
    89ce:	4a e0       	ldi	r20, 0x0A	; 10
    89d0:	b8 01       	movw	r22, r16
    89d2:	89 1b       	sub	r24, r25
    89d4:	99 0b       	sbc	r25, r25
    89d6:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    89da:	2a e6       	ldi	r18, 0x6A	; 106
    89dc:	33 e0       	ldi	r19, 0x03	; 3
    89de:	4f 2d       	mov	r20, r15
    89e0:	63 ea       	ldi	r22, 0xA3	; 163
    89e2:	73 e0       	ldi	r23, 0x03	; 3
    89e4:	8d ee       	ldi	r24, 0xED	; 237
    89e6:	9b e0       	ldi	r25, 0x0B	; 11
    89e8:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    89ec:	f3 94       	inc	r15
    89ee:	fe e1       	ldi	r31, 0x1E	; 30
    89f0:	cf 0e       	add	r12, r31
    89f2:	d1 1c       	adc	r13, r1
    89f4:	86 e0       	ldi	r24, 0x06	; 6
    89f6:	f8 12       	cpse	r15, r24
    89f8:	36 cf       	rjmp	.-404    	; 0x8866 <send_mqtt_tds()+0x6e>
    89fa:	ca 5a       	subi	r28, 0xAA	; 170
    89fc:	df 4f       	sbci	r29, 0xFF	; 255
    89fe:	0f b6       	in	r0, 0x3f	; 63
    8a00:	f8 94       	cli
    8a02:	de bf       	out	0x3e, r29	; 62
    8a04:	0f be       	out	0x3f, r0	; 63
    8a06:	cd bf       	out	0x3d, r28	; 61
    8a08:	df 91       	pop	r29
    8a0a:	cf 91       	pop	r28
    8a0c:	1f 91       	pop	r17
    8a0e:	0f 91       	pop	r16
    8a10:	ff 90       	pop	r15
    8a12:	df 90       	pop	r13
    8a14:	cf 90       	pop	r12
    8a16:	bf 90       	pop	r11
    8a18:	af 90       	pop	r10
    8a1a:	9f 90       	pop	r9
    8a1c:	8f 90       	pop	r8
    8a1e:	7f 90       	pop	r7
    8a20:	6f 90       	pop	r6
    8a22:	5f 90       	pop	r5
    8a24:	4f 90       	pop	r4
    8a26:	3f 90       	pop	r3
    8a28:	2f 90       	pop	r2
    8a2a:	08 95       	ret

00008a2c <send_mqtt_program()>:
_Z17send_mqtt_programv():
    8a2c:	af 92       	push	r10
    8a2e:	bf 92       	push	r11
    8a30:	cf 92       	push	r12
    8a32:	df 92       	push	r13
    8a34:	ef 92       	push	r14
    8a36:	ff 92       	push	r15
    8a38:	0f 93       	push	r16
    8a3a:	1f 93       	push	r17
    8a3c:	cf 93       	push	r28
    8a3e:	df 93       	push	r29
    8a40:	cd b7       	in	r28, 0x3d	; 61
    8a42:	de b7       	in	r29, 0x3e	; 62
    8a44:	cb 54       	subi	r28, 0x4B	; 75
    8a46:	d1 09       	sbc	r29, r1
    8a48:	0f b6       	in	r0, 0x3f	; 63
    8a4a:	f8 94       	cli
    8a4c:	de bf       	out	0x3e, r29	; 62
    8a4e:	0f be       	out	0x3f, r0	; 63
    8a50:	cd bf       	out	0x3d, r28	; 61
    8a52:	b1 2c       	mov	r11, r1
    8a54:	8b 2d       	mov	r24, r11
    8a56:	0e 94 2c 8b 	call	0x11658	; 0x11658 <thermostat_program_get_active(unsigned char)>
    8a5a:	a8 2e       	mov	r10, r24
    8a5c:	8f ef       	ldi	r24, 0xFF	; 255
    8a5e:	a8 16       	cp	r10, r24
    8a60:	09 f4       	brne	.+2      	; 0x8a64 <send_mqtt_program()+0x38>
    8a62:	e9 c0       	rjmp	.+466    	; 0x8c36 <send_mqtt_program()+0x20a>
    8a64:	be 01       	movw	r22, r28
    8a66:	6f 5f       	subi	r22, 0xFF	; 255
    8a68:	7f 4f       	sbci	r23, 0xFF	; 255
    8a6a:	8b 2d       	mov	r24, r11
    8a6c:	0e 94 e0 8a 	call	0x115c0	; 0x115c0 <thermostat_program_get_name(unsigned char, char*)>
    8a70:	8e 01       	movw	r16, r28
    8a72:	0f 5f       	subi	r16, 0xFF	; 255
    8a74:	1f 4f       	sbci	r17, 0xFF	; 255
    8a76:	27 e5       	ldi	r18, 0x57	; 87
    8a78:	33 e0       	ldi	r19, 0x03	; 3
    8a7a:	4b 2d       	mov	r20, r11
    8a7c:	63 e7       	ldi	r22, 0x73	; 115
    8a7e:	73 e0       	ldi	r23, 0x03	; 3
    8a80:	8d ee       	ldi	r24, 0xED	; 237
    8a82:	9b e0       	ldi	r25, 0x0B	; 11
    8a84:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
itoa():
    8a88:	4a e0       	ldi	r20, 0x0A	; 10
    8a8a:	b8 01       	movw	r22, r16
    8a8c:	8a 2d       	mov	r24, r10
    8a8e:	90 e0       	ldi	r25, 0x00	; 0
    8a90:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z17send_mqtt_programv():
    8a94:	28 e7       	ldi	r18, 0x78	; 120
    8a96:	33 e0       	ldi	r19, 0x03	; 3
    8a98:	4b 2d       	mov	r20, r11
    8a9a:	63 e7       	ldi	r22, 0x73	; 115
    8a9c:	73 e0       	ldi	r23, 0x03	; 3
    8a9e:	8d ee       	ldi	r24, 0xED	; 237
    8aa0:	9b e0       	ldi	r25, 0x0B	; 11
    8aa2:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    8aa6:	a1 2c       	mov	r10, r1
    8aa8:	ce 01       	movw	r24, r28
    8aaa:	89 5b       	subi	r24, 0xB9	; 185
    8aac:	9f 4f       	sbci	r25, 0xFF	; 255
    8aae:	6c 01       	movw	r12, r24
    8ab0:	01 96       	adiw	r24, 0x01	; 1
    8ab2:	7c 01       	movw	r14, r24
    8ab4:	8e 01       	movw	r16, r28
    8ab6:	07 5b       	subi	r16, 0xB7	; 183
    8ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    8aba:	9e 01       	movw	r18, r28
    8abc:	26 5b       	subi	r18, 0xB6	; 182
    8abe:	3f 4f       	sbci	r19, 0xFF	; 255
    8ac0:	ae 01       	movw	r20, r28
    8ac2:	45 5b       	subi	r20, 0xB5	; 181
    8ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    8ac6:	6a 2d       	mov	r22, r10
    8ac8:	8b 2d       	mov	r24, r11
    8aca:	0e 94 3c 8b 	call	0x11678	; 0x11678 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
    8ace:	28 96       	adiw	r28, 0x08	; 8
    8ad0:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ad2:	28 97       	sbiw	r28, 0x08	; 8
    8ad4:	81 30       	cpi	r24, 0x01	; 1
    8ad6:	09 f0       	breq	.+2      	; 0x8ada <send_mqtt_program()+0xae>
    8ad8:	aa c0       	rjmp	.+340    	; 0x8c2e <send_mqtt_program()+0x202>
    8ada:	2c 96       	adiw	r28, 0x0c	; 12
    8adc:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ade:	2c 97       	sbiw	r28, 0x0c	; 12
itoa():
    8ae0:	4a e0       	ldi	r20, 0x0A	; 10
    8ae2:	be 01       	movw	r22, r28
    8ae4:	6f 5b       	subi	r22, 0xBF	; 191
    8ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    8ae8:	90 e0       	ldi	r25, 0x00	; 0
    8aea:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z17send_mqtt_programv():
    8aee:	be 01       	movw	r22, r28
    8af0:	6f 5b       	subi	r22, 0xBF	; 191
    8af2:	7f 4f       	sbci	r23, 0xFF	; 255
    8af4:	ce 01       	movw	r24, r28
    8af6:	01 96       	adiw	r24, 0x01	; 1
    8af8:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    8afc:	6f e7       	ldi	r22, 0x7F	; 127
    8afe:	73 e0       	ldi	r23, 0x03	; 3
    8b00:	ce 01       	movw	r24, r28
    8b02:	01 96       	adiw	r24, 0x01	; 1
    8b04:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    8b08:	2b 96       	adiw	r28, 0x0b	; 11
    8b0a:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b0c:	2b 97       	sbiw	r28, 0x0b	; 11
itoa():
    8b0e:	4a e0       	ldi	r20, 0x0A	; 10
    8b10:	be 01       	movw	r22, r28
    8b12:	6f 5b       	subi	r22, 0xBF	; 191
    8b14:	7f 4f       	sbci	r23, 0xFF	; 255
    8b16:	90 e0       	ldi	r25, 0x00	; 0
    8b18:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z17send_mqtt_programv():
    8b1c:	be 01       	movw	r22, r28
    8b1e:	6f 5b       	subi	r22, 0xBF	; 191
    8b20:	7f 4f       	sbci	r23, 0xFF	; 255
    8b22:	ce 01       	movw	r24, r28
    8b24:	01 96       	adiw	r24, 0x01	; 1
    8b26:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    8b2a:	6f e7       	ldi	r22, 0x7F	; 127
    8b2c:	73 e0       	ldi	r23, 0x03	; 3
    8b2e:	ce 01       	movw	r24, r28
    8b30:	01 96       	adiw	r24, 0x01	; 1
    8b32:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    8b36:	2a 96       	adiw	r28, 0x0a	; 10
    8b38:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b3a:	2a 97       	sbiw	r28, 0x0a	; 10
itoa():
    8b3c:	4a e0       	ldi	r20, 0x0A	; 10
    8b3e:	be 01       	movw	r22, r28
    8b40:	6f 5b       	subi	r22, 0xBF	; 191
    8b42:	7f 4f       	sbci	r23, 0xFF	; 255
    8b44:	90 e0       	ldi	r25, 0x00	; 0
    8b46:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z17send_mqtt_programv():
    8b4a:	be 01       	movw	r22, r28
    8b4c:	6f 5b       	subi	r22, 0xBF	; 191
    8b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    8b50:	ce 01       	movw	r24, r28
    8b52:	01 96       	adiw	r24, 0x01	; 1
    8b54:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    8b58:	6f e7       	ldi	r22, 0x7F	; 127
    8b5a:	73 e0       	ldi	r23, 0x03	; 3
    8b5c:	ce 01       	movw	r24, r28
    8b5e:	01 96       	adiw	r24, 0x01	; 1
    8b60:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    8b64:	29 96       	adiw	r28, 0x09	; 9
    8b66:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b68:	29 97       	sbiw	r28, 0x09	; 9
itoa():
    8b6a:	4a e0       	ldi	r20, 0x0A	; 10
    8b6c:	be 01       	movw	r22, r28
    8b6e:	6f 5b       	subi	r22, 0xBF	; 191
    8b70:	7f 4f       	sbci	r23, 0xFF	; 255
    8b72:	90 e0       	ldi	r25, 0x00	; 0
    8b74:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z17send_mqtt_programv():
    8b78:	be 01       	movw	r22, r28
    8b7a:	6f 5b       	subi	r22, 0xBF	; 191
    8b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    8b7e:	ce 01       	movw	r24, r28
    8b80:	01 96       	adiw	r24, 0x01	; 1
    8b82:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    8b86:	ce 01       	movw	r24, r28
    8b88:	01 96       	adiw	r24, 0x01	; 1
    8b8a:	7c 01       	movw	r14, r24
    8b8c:	0c ea       	ldi	r16, 0xAC	; 172
    8b8e:	17 e0       	ldi	r17, 0x07	; 7
    8b90:	2a 2d       	mov	r18, r10
    8b92:	4b 2d       	mov	r20, r11
    8b94:	61 e8       	ldi	r22, 0x81	; 129
    8b96:	73 e0       	ldi	r23, 0x03	; 3
    8b98:	8d ee       	ldi	r24, 0xED	; 237
    8b9a:	9b e0       	ldi	r25, 0x0B	; 11
    8b9c:	0e 94 20 7f 	call	0xfe40	; 0xfe40 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    8ba0:	28 96       	adiw	r28, 0x08	; 8
    8ba2:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ba4:	28 97       	sbiw	r28, 0x08	; 8
itoa():
    8ba6:	4a e0       	ldi	r20, 0x0A	; 10
    8ba8:	be 01       	movw	r22, r28
    8baa:	6f 5b       	subi	r22, 0xBF	; 191
    8bac:	7f 4f       	sbci	r23, 0xFF	; 255
    8bae:	90 e0       	ldi	r25, 0x00	; 0
    8bb0:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z17send_mqtt_programv():
    8bb4:	be 01       	movw	r22, r28
    8bb6:	6f 5b       	subi	r22, 0xBF	; 191
    8bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    8bba:	c7 01       	movw	r24, r14
    8bbc:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    8bc0:	08 e7       	ldi	r16, 0x78	; 120
    8bc2:	13 e0       	ldi	r17, 0x03	; 3
    8bc4:	2a 2d       	mov	r18, r10
    8bc6:	4b 2d       	mov	r20, r11
    8bc8:	61 e8       	ldi	r22, 0x81	; 129
    8bca:	73 e0       	ldi	r23, 0x03	; 3
    8bcc:	8d ee       	ldi	r24, 0xED	; 237
    8bce:	9b e0       	ldi	r25, 0x0B	; 11
    8bd0:	0e 94 20 7f 	call	0xfe40	; 0xfe40 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    8bd4:	6a 2d       	mov	r22, r10
    8bd6:	8b 2d       	mov	r24, r11
    8bd8:	0e 94 cb 8b 	call	0x11796	; 0x11796 <thermostat_program_get_threshold(unsigned char, unsigned char)>
itoa():
    8bdc:	4a e0       	ldi	r20, 0x0A	; 10
    8bde:	be 01       	movw	r22, r28
    8be0:	6f 5b       	subi	r22, 0xBF	; 191
    8be2:	7f 4f       	sbci	r23, 0xFF	; 255
    8be4:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z17send_mqtt_programv():
    8be8:	be 01       	movw	r22, r28
    8bea:	6f 5b       	subi	r22, 0xBF	; 191
    8bec:	7f 4f       	sbci	r23, 0xFF	; 255
    8bee:	c7 01       	movw	r24, r14
    8bf0:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    8bf4:	0f e8       	ldi	r16, 0x8F	; 143
    8bf6:	13 e0       	ldi	r17, 0x03	; 3
    8bf8:	2a 2d       	mov	r18, r10
    8bfa:	4b 2d       	mov	r20, r11
    8bfc:	61 e8       	ldi	r22, 0x81	; 129
    8bfe:	73 e0       	ldi	r23, 0x03	; 3
    8c00:	8d ee       	ldi	r24, 0xED	; 237
    8c02:	9b e0       	ldi	r25, 0x0B	; 11
    8c04:	0e 94 20 7f 	call	0xfe40	; 0xfe40 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    8c08:	6a 2d       	mov	r22, r10
    8c0a:	8b 2d       	mov	r24, r11
    8c0c:	0e 94 09 8c 	call	0x11812	; 0x11812 <thermostat_program_get_week(unsigned char, unsigned char)>
itoa():
    8c10:	4a e0       	ldi	r20, 0x0A	; 10
    8c12:	b7 01       	movw	r22, r14
    8c14:	90 e0       	ldi	r25, 0x00	; 0
    8c16:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z17send_mqtt_programv():
    8c1a:	09 e9       	ldi	r16, 0x99	; 153
    8c1c:	13 e0       	ldi	r17, 0x03	; 3
    8c1e:	2a 2d       	mov	r18, r10
    8c20:	4b 2d       	mov	r20, r11
    8c22:	61 e8       	ldi	r22, 0x81	; 129
    8c24:	73 e0       	ldi	r23, 0x03	; 3
    8c26:	8d ee       	ldi	r24, 0xED	; 237
    8c28:	9b e0       	ldi	r25, 0x0B	; 11
    8c2a:	0e 94 20 7f 	call	0xfe40	; 0xfe40 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    8c2e:	a3 94       	inc	r10
    8c30:	9b e0       	ldi	r25, 0x0B	; 11
    8c32:	a9 12       	cpse	r10, r25
    8c34:	39 cf       	rjmp	.-398    	; 0x8aa8 <send_mqtt_program()+0x7c>
    8c36:	b3 94       	inc	r11
    8c38:	88 e0       	ldi	r24, 0x08	; 8
    8c3a:	b8 12       	cpse	r11, r24
    8c3c:	0b cf       	rjmp	.-490    	; 0x8a54 <send_mqtt_program()+0x28>
    8c3e:	c5 5b       	subi	r28, 0xB5	; 181
    8c40:	df 4f       	sbci	r29, 0xFF	; 255
    8c42:	0f b6       	in	r0, 0x3f	; 63
    8c44:	f8 94       	cli
    8c46:	de bf       	out	0x3e, r29	; 62
    8c48:	0f be       	out	0x3f, r0	; 63
    8c4a:	cd bf       	out	0x3d, r28	; 61
    8c4c:	df 91       	pop	r29
    8c4e:	cf 91       	pop	r28
    8c50:	1f 91       	pop	r17
    8c52:	0f 91       	pop	r16
    8c54:	ff 90       	pop	r15
    8c56:	ef 90       	pop	r14
    8c58:	df 90       	pop	r13
    8c5a:	cf 90       	pop	r12
    8c5c:	bf 90       	pop	r11
    8c5e:	af 90       	pop	r10
    8c60:	08 95       	ret

00008c62 <mqtt_send_pid_variable(unsigned char)>:
_Z22mqtt_send_pid_variableh():
    8c62:	ff 92       	push	r15
    8c64:	0f 93       	push	r16
    8c66:	1f 93       	push	r17
    8c68:	cf 93       	push	r28
    8c6a:	df 93       	push	r29
    8c6c:	cd b7       	in	r28, 0x3d	; 61
    8c6e:	de b7       	in	r29, 0x3e	; 62
    8c70:	a0 97       	sbiw	r28, 0x20	; 32
    8c72:	0f b6       	in	r0, 0x3f	; 63
    8c74:	f8 94       	cli
    8c76:	de bf       	out	0x3e, r29	; 62
    8c78:	0f be       	out	0x3f, r0	; 63
    8c7a:	cd bf       	out	0x3d, r28	; 61
    8c7c:	f8 2e       	mov	r15, r24
    8c7e:	0e 94 77 88 	call	0x110ee	; 0x110ee <thermostat_get_pid_p(unsigned char)>
    8c82:	8e 01       	movw	r16, r28
    8c84:	0f 5f       	subi	r16, 0xFF	; 255
    8c86:	1f 4f       	sbci	r17, 0xFF	; 255
    8c88:	22 e0       	ldi	r18, 0x02	; 2
    8c8a:	47 e0       	ldi	r20, 0x07	; 7
    8c8c:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
    8c90:	27 e9       	ldi	r18, 0x97	; 151
    8c92:	37 e0       	ldi	r19, 0x07	; 7
    8c94:	4f 2d       	mov	r20, r15
    8c96:	6e e9       	ldi	r22, 0x9E	; 158
    8c98:	73 e0       	ldi	r23, 0x03	; 3
    8c9a:	8d ee       	ldi	r24, 0xED	; 237
    8c9c:	9b e0       	ldi	r25, 0x0B	; 11
    8c9e:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    8ca2:	8f 2d       	mov	r24, r15
    8ca4:	0e 94 a6 88 	call	0x1114c	; 0x1114c <thermostat_get_pid_i(unsigned char)>
    8ca8:	22 e0       	ldi	r18, 0x02	; 2
    8caa:	47 e0       	ldi	r20, 0x07	; 7
    8cac:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
    8cb0:	2e e9       	ldi	r18, 0x9E	; 158
    8cb2:	37 e0       	ldi	r19, 0x07	; 7
    8cb4:	4f 2d       	mov	r20, r15
    8cb6:	6e e9       	ldi	r22, 0x9E	; 158
    8cb8:	73 e0       	ldi	r23, 0x03	; 3
    8cba:	8d ee       	ldi	r24, 0xED	; 237
    8cbc:	9b e0       	ldi	r25, 0x0B	; 11
    8cbe:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    8cc2:	8f 2d       	mov	r24, r15
    8cc4:	0e 94 b1 88 	call	0x11162	; 0x11162 <thermostat_get_pid_d(unsigned char)>
    8cc8:	22 e0       	ldi	r18, 0x02	; 2
    8cca:	47 e0       	ldi	r20, 0x07	; 7
    8ccc:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
    8cd0:	25 ea       	ldi	r18, 0xA5	; 165
    8cd2:	37 e0       	ldi	r19, 0x07	; 7
    8cd4:	4f 2d       	mov	r20, r15
    8cd6:	6e e9       	ldi	r22, 0x9E	; 158
    8cd8:	73 e0       	ldi	r23, 0x03	; 3
    8cda:	8d ee       	ldi	r24, 0xED	; 237
    8cdc:	9b e0       	ldi	r25, 0x0B	; 11
    8cde:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    8ce2:	8f 2d       	mov	r24, r15
    8ce4:	0e 94 bc 88 	call	0x11178	; 0x11178 <thermostat_get_pid_time(unsigned char)>
itoa():
    8ce8:	4a e0       	ldi	r20, 0x0A	; 10
    8cea:	b8 01       	movw	r22, r16
    8cec:	90 e0       	ldi	r25, 0x00	; 0
    8cee:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z22mqtt_send_pid_variableh():
    8cf2:	2c ea       	ldi	r18, 0xAC	; 172
    8cf4:	37 e0       	ldi	r19, 0x07	; 7
    8cf6:	4f 2d       	mov	r20, r15
    8cf8:	6e e9       	ldi	r22, 0x9E	; 158
    8cfa:	73 e0       	ldi	r23, 0x03	; 3
    8cfc:	8d ee       	ldi	r24, 0xED	; 237
    8cfe:	9b e0       	ldi	r25, 0x0B	; 11
    8d00:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    8d04:	a0 96       	adiw	r28, 0x20	; 32
    8d06:	0f b6       	in	r0, 0x3f	; 63
    8d08:	f8 94       	cli
    8d0a:	de bf       	out	0x3e, r29	; 62
    8d0c:	0f be       	out	0x3f, r0	; 63
    8d0e:	cd bf       	out	0x3d, r28	; 61
    8d10:	df 91       	pop	r29
    8d12:	cf 91       	pop	r28
    8d14:	1f 91       	pop	r17
    8d16:	0f 91       	pop	r16
    8d18:	ff 90       	pop	r15
    8d1a:	08 95       	ret

00008d1c <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
    8d1c:	ff 92       	push	r15
    8d1e:	0f 93       	push	r16
    8d20:	1f 93       	push	r17
    8d22:	cf 93       	push	r28
    8d24:	df 93       	push	r29
    8d26:	cd b7       	in	r28, 0x3d	; 61
    8d28:	de b7       	in	r29, 0x3e	; 62
    8d2a:	63 97       	sbiw	r28, 0x13	; 19
    8d2c:	0f b6       	in	r0, 0x3f	; 63
    8d2e:	f8 94       	cli
    8d30:	de bf       	out	0x3e, r29	; 62
    8d32:	0f be       	out	0x3f, r0	; 63
    8d34:	cd bf       	out	0x3d, r28	; 61
    8d36:	1b 8a       	std	Y+19, r1	; 0x13
    8d38:	f1 2c       	mov	r15, r1
    8d3a:	ae 01       	movw	r20, r28
    8d3c:	4f 5f       	subi	r20, 0xFF	; 255
    8d3e:	5f 4f       	sbci	r21, 0xFF	; 255
    8d40:	be 01       	movw	r22, r28
    8d42:	6d 5e       	subi	r22, 0xED	; 237
    8d44:	7f 4f       	sbci	r23, 0xFF	; 255
    8d46:	8f 2d       	mov	r24, r15
    8d48:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8d4c:	8b 89       	ldd	r24, Y+19	; 0x13
    8d4e:	81 30       	cpi	r24, 0x01	; 1
    8d50:	e1 f5       	brne	.+120    	; 0x8dca <send_mqtt_remote_tds_status()+0xae>
    8d52:	8e 01       	movw	r16, r28
    8d54:	0f 5f       	subi	r16, 0xFF	; 255
    8d56:	1f 4f       	sbci	r17, 0xFF	; 255
    8d58:	27 e5       	ldi	r18, 0x57	; 87
    8d5a:	33 e0       	ldi	r19, 0x03	; 3
    8d5c:	4f 2d       	mov	r20, r15
    8d5e:	62 ea       	ldi	r22, 0xA2	; 162
    8d60:	73 e0       	ldi	r23, 0x03	; 3
    8d62:	8d ee       	ldi	r24, 0xED	; 237
    8d64:	9b e0       	ldi	r25, 0x0B	; 11
    8d66:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    8d6a:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
    8d6c:	4a e0       	ldi	r20, 0x0A	; 10
    8d6e:	b8 01       	movw	r22, r16
    8d70:	90 e0       	ldi	r25, 0x00	; 0
    8d72:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    8d76:	28 e7       	ldi	r18, 0x78	; 120
    8d78:	33 e0       	ldi	r19, 0x03	; 3
    8d7a:	4f 2d       	mov	r20, r15
    8d7c:	62 ea       	ldi	r22, 0xA2	; 162
    8d7e:	73 e0       	ldi	r23, 0x03	; 3
    8d80:	8d ee       	ldi	r24, 0xED	; 237
    8d82:	9b e0       	ldi	r25, 0x0B	; 11
    8d84:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    8d88:	8f 2d       	mov	r24, r15
    8d8a:	0e 94 0f 41 	call	0x821e	; 0x821e <remote_tds_get_data(unsigned char)>
itoa():
    8d8e:	4a e0       	ldi	r20, 0x0A	; 10
    8d90:	b8 01       	movw	r22, r16
    8d92:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    8d96:	29 e4       	ldi	r18, 0x49	; 73
    8d98:	33 e0       	ldi	r19, 0x03	; 3
    8d9a:	4f 2d       	mov	r20, r15
    8d9c:	62 ea       	ldi	r22, 0xA2	; 162
    8d9e:	73 e0       	ldi	r23, 0x03	; 3
    8da0:	8d ee       	ldi	r24, 0xED	; 237
    8da2:	9b e0       	ldi	r25, 0x0B	; 11
    8da4:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    8da8:	8f 2d       	mov	r24, r15
    8daa:	0e 94 3e 41 	call	0x827c	; 0x827c <remote_tds_get_last_update(unsigned char)>
itoa():
    8dae:	4a e0       	ldi	r20, 0x0A	; 10
    8db0:	b8 01       	movw	r22, r16
    8db2:	90 e0       	ldi	r25, 0x00	; 0
    8db4:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    8db8:	27 ea       	ldi	r18, 0xA7	; 167
    8dba:	33 e0       	ldi	r19, 0x03	; 3
    8dbc:	4f 2d       	mov	r20, r15
    8dbe:	62 ea       	ldi	r22, 0xA2	; 162
    8dc0:	73 e0       	ldi	r23, 0x03	; 3
    8dc2:	8d ee       	ldi	r24, 0xED	; 237
    8dc4:	9b e0       	ldi	r25, 0x0B	; 11
    8dc6:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    8dca:	f3 94       	inc	r15
    8dcc:	8a e0       	ldi	r24, 0x0A	; 10
    8dce:	f8 12       	cpse	r15, r24
    8dd0:	b4 cf       	rjmp	.-152    	; 0x8d3a <send_mqtt_remote_tds_status()+0x1e>
    8dd2:	63 96       	adiw	r28, 0x13	; 19
    8dd4:	0f b6       	in	r0, 0x3f	; 63
    8dd6:	f8 94       	cli
    8dd8:	de bf       	out	0x3e, r29	; 62
    8dda:	0f be       	out	0x3f, r0	; 63
    8ddc:	cd bf       	out	0x3d, r28	; 61
    8dde:	df 91       	pop	r29
    8de0:	cf 91       	pop	r28
    8de2:	1f 91       	pop	r17
    8de4:	0f 91       	pop	r16
    8de6:	ff 90       	pop	r15
    8de8:	08 95       	ret

00008dea <mqtt_publis_output(unsigned char, unsigned char)>:
_Z18mqtt_publis_outputhh():
    8dea:	0f 93       	push	r16
    8dec:	1f 93       	push	r17
    8dee:	cf 93       	push	r28
    8df0:	df 93       	push	r29
    8df2:	cd b7       	in	r28, 0x3d	; 61
    8df4:	de b7       	in	r29, 0x3e	; 62
    8df6:	c8 58       	subi	r28, 0x88	; 136
    8df8:	d1 09       	sbc	r29, r1
    8dfa:	0f b6       	in	r0, 0x3f	; 63
    8dfc:	f8 94       	cli
    8dfe:	de bf       	out	0x3e, r29	; 62
    8e00:	0f be       	out	0x3f, r0	; 63
    8e02:	cd bf       	out	0x3d, r28	; 61
    8e04:	8f 3f       	cpi	r24, 0xFF	; 255
    8e06:	c9 f1       	breq	.+114    	; 0x8e7a <mqtt_publis_output(unsigned char, unsigned char)+0x90>
    8e08:	06 2f       	mov	r16, r22
    8e0a:	18 2f       	mov	r17, r24
    8e0c:	61 ef       	ldi	r22, 0xF1	; 241
    8e0e:	75 e5       	ldi	r23, 0x55	; 85
    8e10:	ce 01       	movw	r24, r28
    8e12:	8f 5b       	subi	r24, 0xBF	; 191
    8e14:	9f 4f       	sbci	r25, 0xFF	; 255
    8e16:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    8e1a:	63 eb       	ldi	r22, 0xB3	; 179
    8e1c:	73 e0       	ldi	r23, 0x03	; 3
    8e1e:	ce 01       	movw	r24, r28
    8e20:	8f 5b       	subi	r24, 0xBF	; 191
    8e22:	9f 4f       	sbci	r25, 0xFF	; 255
    8e24:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
itoa():
    8e28:	4a e0       	ldi	r20, 0x0A	; 10
    8e2a:	be 01       	movw	r22, r28
    8e2c:	6f 57       	subi	r22, 0x7F	; 127
    8e2e:	7f 4f       	sbci	r23, 0xFF	; 255
    8e30:	81 2f       	mov	r24, r17
    8e32:	90 e0       	ldi	r25, 0x00	; 0
    8e34:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z18mqtt_publis_outputhh():
    8e38:	be 01       	movw	r22, r28
    8e3a:	6f 57       	subi	r22, 0x7F	; 127
    8e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    8e3e:	ce 01       	movw	r24, r28
    8e40:	8f 5b       	subi	r24, 0xBF	; 191
    8e42:	9f 4f       	sbci	r25, 0xFF	; 255
    8e44:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    8e48:	61 ec       	ldi	r22, 0xC1	; 193
    8e4a:	73 e0       	ldi	r23, 0x03	; 3
    8e4c:	ce 01       	movw	r24, r28
    8e4e:	8f 5b       	subi	r24, 0xBF	; 191
    8e50:	9f 4f       	sbci	r25, 0xFF	; 255
    8e52:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
itoa():
    8e56:	4a e0       	ldi	r20, 0x0A	; 10
    8e58:	be 01       	movw	r22, r28
    8e5a:	6f 5f       	subi	r22, 0xFF	; 255
    8e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    8e5e:	80 2f       	mov	r24, r16
    8e60:	90 e0       	ldi	r25, 0x00	; 0
    8e62:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z18mqtt_publis_outputhh():
    8e66:	ae 01       	movw	r20, r28
    8e68:	4f 5f       	subi	r20, 0xFF	; 255
    8e6a:	5f 4f       	sbci	r21, 0xFF	; 255
    8e6c:	be 01       	movw	r22, r28
    8e6e:	6f 5b       	subi	r22, 0xBF	; 191
    8e70:	7f 4f       	sbci	r23, 0xFF	; 255
    8e72:	8d ee       	ldi	r24, 0xED	; 237
    8e74:	9b e0       	ldi	r25, 0x0B	; 11
    8e76:	0e 94 9c bc 	call	0x17938	; 0x17938 <PubSubClient::publish(char const*, char const*)>
    8e7a:	c8 57       	subi	r28, 0x78	; 120
    8e7c:	df 4f       	sbci	r29, 0xFF	; 255
    8e7e:	0f b6       	in	r0, 0x3f	; 63
    8e80:	f8 94       	cli
    8e82:	de bf       	out	0x3e, r29	; 62
    8e84:	0f be       	out	0x3f, r0	; 63
    8e86:	cd bf       	out	0x3d, r28	; 61
    8e88:	df 91       	pop	r29
    8e8a:	cf 91       	pop	r28
    8e8c:	1f 91       	pop	r17
    8e8e:	0f 91       	pop	r16
    8e90:	08 95       	ret

00008e92 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)>:
_Z22mqtt_publis_output_pwmhhh():
    8e92:	ff 92       	push	r15
    8e94:	0f 93       	push	r16
    8e96:	1f 93       	push	r17
    8e98:	cf 93       	push	r28
    8e9a:	df 93       	push	r29
    8e9c:	cd b7       	in	r28, 0x3d	; 61
    8e9e:	de b7       	in	r29, 0x3e	; 62
    8ea0:	c8 58       	subi	r28, 0x88	; 136
    8ea2:	d1 09       	sbc	r29, r1
    8ea4:	0f b6       	in	r0, 0x3f	; 63
    8ea6:	f8 94       	cli
    8ea8:	de bf       	out	0x3e, r29	; 62
    8eaa:	0f be       	out	0x3f, r0	; 63
    8eac:	cd bf       	out	0x3d, r28	; 61
    8eae:	8f 3f       	cpi	r24, 0xFF	; 255
    8eb0:	09 f4       	brne	.+2      	; 0x8eb4 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x22>
    8eb2:	4f c0       	rjmp	.+158    	; 0x8f52 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0xc0>
    8eb4:	f4 2e       	mov	r15, r20
    8eb6:	16 2f       	mov	r17, r22
    8eb8:	08 2f       	mov	r16, r24
    8eba:	61 ef       	ldi	r22, 0xF1	; 241
    8ebc:	75 e5       	ldi	r23, 0x55	; 85
    8ebe:	ce 01       	movw	r24, r28
    8ec0:	8f 5b       	subi	r24, 0xBF	; 191
    8ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    8ec4:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    8ec8:	63 eb       	ldi	r22, 0xB3	; 179
    8eca:	73 e0       	ldi	r23, 0x03	; 3
    8ecc:	ce 01       	movw	r24, r28
    8ece:	8f 5b       	subi	r24, 0xBF	; 191
    8ed0:	9f 4f       	sbci	r25, 0xFF	; 255
    8ed2:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
itoa():
    8ed6:	4a e0       	ldi	r20, 0x0A	; 10
    8ed8:	be 01       	movw	r22, r28
    8eda:	6f 57       	subi	r22, 0x7F	; 127
    8edc:	7f 4f       	sbci	r23, 0xFF	; 255
    8ede:	80 2f       	mov	r24, r16
    8ee0:	90 e0       	ldi	r25, 0x00	; 0
    8ee2:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z22mqtt_publis_output_pwmhhh():
    8ee6:	be 01       	movw	r22, r28
    8ee8:	6f 57       	subi	r22, 0x7F	; 127
    8eea:	7f 4f       	sbci	r23, 0xFF	; 255
    8eec:	ce 01       	movw	r24, r28
    8eee:	8f 5b       	subi	r24, 0xBF	; 191
    8ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    8ef2:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    8ef6:	68 ec       	ldi	r22, 0xC8	; 200
    8ef8:	73 e0       	ldi	r23, 0x03	; 3
    8efa:	13 30       	cpi	r17, 0x03	; 3
    8efc:	61 f0       	breq	.+24     	; 0x8f16 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    8efe:	6e ec       	ldi	r22, 0xCE	; 206
    8f00:	73 e0       	ldi	r23, 0x03	; 3
    8f02:	15 30       	cpi	r17, 0x05	; 5
    8f04:	41 f0       	breq	.+16     	; 0x8f16 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    8f06:	64 ed       	ldi	r22, 0xD4	; 212
    8f08:	73 e0       	ldi	r23, 0x03	; 3
    8f0a:	16 30       	cpi	r17, 0x06	; 6
    8f0c:	21 f0       	breq	.+8      	; 0x8f16 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    8f0e:	1e 3f       	cpi	r17, 0xFE	; 254
    8f10:	39 f4       	brne	.+14     	; 0x8f20 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x8e>
    8f12:	69 ed       	ldi	r22, 0xD9	; 217
    8f14:	73 e0       	ldi	r23, 0x03	; 3
    8f16:	ce 01       	movw	r24, r28
    8f18:	8f 5b       	subi	r24, 0xBF	; 191
    8f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    8f1c:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    8f20:	6e ed       	ldi	r22, 0xDE	; 222
    8f22:	73 e0       	ldi	r23, 0x03	; 3
    8f24:	ce 01       	movw	r24, r28
    8f26:	8f 5b       	subi	r24, 0xBF	; 191
    8f28:	9f 4f       	sbci	r25, 0xFF	; 255
    8f2a:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
itoa():
    8f2e:	4a e0       	ldi	r20, 0x0A	; 10
    8f30:	be 01       	movw	r22, r28
    8f32:	6f 5f       	subi	r22, 0xFF	; 255
    8f34:	7f 4f       	sbci	r23, 0xFF	; 255
    8f36:	8f 2d       	mov	r24, r15
    8f38:	90 e0       	ldi	r25, 0x00	; 0
    8f3a:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z22mqtt_publis_output_pwmhhh():
    8f3e:	ae 01       	movw	r20, r28
    8f40:	4f 5f       	subi	r20, 0xFF	; 255
    8f42:	5f 4f       	sbci	r21, 0xFF	; 255
    8f44:	be 01       	movw	r22, r28
    8f46:	6f 5b       	subi	r22, 0xBF	; 191
    8f48:	7f 4f       	sbci	r23, 0xFF	; 255
    8f4a:	8d ee       	ldi	r24, 0xED	; 237
    8f4c:	9b e0       	ldi	r25, 0x0B	; 11
    8f4e:	0e 94 9c bc 	call	0x17938	; 0x17938 <PubSubClient::publish(char const*, char const*)>
    8f52:	c8 57       	subi	r28, 0x78	; 120
    8f54:	df 4f       	sbci	r29, 0xFF	; 255
    8f56:	0f b6       	in	r0, 0x3f	; 63
    8f58:	f8 94       	cli
    8f5a:	de bf       	out	0x3e, r29	; 62
    8f5c:	0f be       	out	0x3f, r0	; 63
    8f5e:	cd bf       	out	0x3d, r28	; 61
    8f60:	df 91       	pop	r29
    8f62:	cf 91       	pop	r28
    8f64:	1f 91       	pop	r17
    8f66:	0f 91       	pop	r16
    8f68:	ff 90       	pop	r15
    8f6a:	08 95       	ret

00008f6c <selftest_set_0(unsigned char)>:
_Z14selftest_set_0h():
    8f6c:	21 e0       	ldi	r18, 0x01	; 1
    8f6e:	30 e0       	ldi	r19, 0x00	; 0
    8f70:	01 c0       	rjmp	.+2      	; 0x8f74 <selftest_set_0(unsigned char)+0x8>
    8f72:	22 0f       	add	r18, r18
    8f74:	8a 95       	dec	r24
    8f76:	ea f7       	brpl	.-6      	; 0x8f72 <selftest_set_0(unsigned char)+0x6>
    8f78:	80 91 32 0a 	lds	r24, 0x0A32	; 0x800a32 <selftest_data>
    8f7c:	82 2b       	or	r24, r18
    8f7e:	80 93 32 0a 	sts	0x0A32, r24	; 0x800a32 <selftest_data>
    8f82:	08 95       	ret

00008f84 <selftest_clear_0(unsigned char)>:
_Z16selftest_clear_0h():
    8f84:	21 e0       	ldi	r18, 0x01	; 1
    8f86:	30 e0       	ldi	r19, 0x00	; 0
    8f88:	01 c0       	rjmp	.+2      	; 0x8f8c <selftest_clear_0(unsigned char)+0x8>
    8f8a:	22 0f       	add	r18, r18
    8f8c:	8a 95       	dec	r24
    8f8e:	ea f7       	brpl	.-6      	; 0x8f8a <selftest_clear_0(unsigned char)+0x6>
    8f90:	20 95       	com	r18
    8f92:	80 91 32 0a 	lds	r24, 0x0A32	; 0x800a32 <selftest_data>
    8f96:	28 23       	and	r18, r24
    8f98:	20 93 32 0a 	sts	0x0A32, r18	; 0x800a32 <selftest_data>
    8f9c:	08 95       	ret

00008f9e <selftest()>:
_Z8selftestv():
    8f9e:	89 e3       	ldi	r24, 0x39	; 57
    8fa0:	9e e0       	ldi	r25, 0x0E	; 14
    8fa2:	0e 94 6a c2 	call	0x184d4	; 0x184d4 <RTC_DS1307::isrunning()>
    8fa6:	90 91 32 0a 	lds	r25, 0x0A32	; 0x800a32 <selftest_data>
    8faa:	81 11       	cpse	r24, r1
    8fac:	04 c0       	rjmp	.+8      	; 0x8fb6 <selftest()+0x18>
    8fae:	91 60       	ori	r25, 0x01	; 1
    8fb0:	90 93 32 0a 	sts	0x0A32, r25	; 0x800a32 <selftest_data>
    8fb4:	08 95       	ret
    8fb6:	9e 7f       	andi	r25, 0xFE	; 254
    8fb8:	fb cf       	rjmp	.-10     	; 0x8fb0 <selftest()+0x12>

00008fba <time_get_offset()>:
_ZNK5EERefdeEv():
    8fba:	81 e0       	ldi	r24, 0x01	; 1
    8fbc:	90 e0       	ldi	r25, 0x00	; 0
    8fbe:	0c 94 79 df 	jmp	0x1bef2	; 0x1bef2 <eeprom_read_byte>

00008fc2 <send_device_status()>:
_Z18send_device_statusv():
    8fc2:	0f 93       	push	r16
    8fc4:	1f 93       	push	r17
    8fc6:	cf 93       	push	r28
    8fc8:	df 93       	push	r29
    8fca:	cd b7       	in	r28, 0x3d	; 61
    8fcc:	de b7       	in	r29, 0x3e	; 62
    8fce:	c0 58       	subi	r28, 0x80	; 128
    8fd0:	d1 09       	sbc	r29, r1
    8fd2:	0f b6       	in	r0, 0x3f	; 63
    8fd4:	f8 94       	cli
    8fd6:	de bf       	out	0x3e, r29	; 62
    8fd8:	0f be       	out	0x3f, r0	; 63
    8fda:	cd bf       	out	0x3d, r28	; 61
    8fdc:	8d ee       	ldi	r24, 0xED	; 237
    8fde:	9b e0       	ldi	r25, 0x0B	; 11
    8fe0:	0e 94 0e b9 	call	0x1721c	; 0x1721c <PubSubClient::connected()>
    8fe4:	88 23       	and	r24, r24
    8fe6:	09 f4       	brne	.+2      	; 0x8fea <send_device_status()+0x28>
    8fe8:	6b c1       	rjmp	.+726    	; 0x92c0 <send_device_status()+0x2fe>
    8fea:	63 ee       	ldi	r22, 0xE3	; 227
    8fec:	73 e0       	ldi	r23, 0x03	; 3
    8fee:	ce 01       	movw	r24, r28
    8ff0:	8f 5b       	subi	r24, 0xBF	; 191
    8ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    8ff4:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
itoa():
    8ff8:	4a e0       	ldi	r20, 0x0A	; 10
    8ffa:	be 01       	movw	r22, r28
    8ffc:	6f 5f       	subi	r22, 0xFF	; 255
    8ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    9000:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <uptime>
    9004:	90 91 24 0a 	lds	r25, 0x0A24	; 0x800a24 <uptime+0x1>
    9008:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z18send_device_statusv():
    900c:	ae 01       	movw	r20, r28
    900e:	4f 5f       	subi	r20, 0xFF	; 255
    9010:	5f 4f       	sbci	r21, 0xFF	; 255
    9012:	be 01       	movw	r22, r28
    9014:	6f 5b       	subi	r22, 0xBF	; 191
    9016:	7f 4f       	sbci	r23, 0xFF	; 255
    9018:	8d ee       	ldi	r24, 0xED	; 237
    901a:	9b e0       	ldi	r25, 0x0B	; 11
    901c:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9020:	61 ef       	ldi	r22, 0xF1	; 241
    9022:	73 e0       	ldi	r23, 0x03	; 3
    9024:	ce 01       	movw	r24, r28
    9026:	8f 5b       	subi	r24, 0xBF	; 191
    9028:	9f 4f       	sbci	r25, 0xFF	; 255
    902a:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
itoa():
    902e:	4a e0       	ldi	r20, 0x0A	; 10
    9030:	be 01       	movw	r22, r28
    9032:	6f 5f       	subi	r22, 0xFF	; 255
    9034:	7f 4f       	sbci	r23, 0xFF	; 255
    9036:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <light_curr>
    903a:	90 91 29 0a 	lds	r25, 0x0A29	; 0x800a29 <light_curr+0x1>
    903e:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z18send_device_statusv():
    9042:	ae 01       	movw	r20, r28
    9044:	4f 5f       	subi	r20, 0xFF	; 255
    9046:	5f 4f       	sbci	r21, 0xFF	; 255
    9048:	be 01       	movw	r22, r28
    904a:	6f 5b       	subi	r22, 0xBF	; 191
    904c:	7f 4f       	sbci	r23, 0xFF	; 255
    904e:	8d ee       	ldi	r24, 0xED	; 237
    9050:	9b e0       	ldi	r25, 0x0B	; 11
    9052:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9056:	63 e0       	ldi	r22, 0x03	; 3
    9058:	74 e0       	ldi	r23, 0x04	; 4
    905a:	ce 01       	movw	r24, r28
    905c:	8f 5b       	subi	r24, 0xBF	; 191
    905e:	9f 4f       	sbci	r25, 0xFF	; 255
    9060:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    9064:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <auto_jas>
itoa():
    9068:	4a e0       	ldi	r20, 0x0A	; 10
    906a:	be 01       	movw	r22, r28
    906c:	6f 5f       	subi	r22, 0xFF	; 255
    906e:	7f 4f       	sbci	r23, 0xFF	; 255
    9070:	90 e0       	ldi	r25, 0x00	; 0
    9072:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z18send_device_statusv():
    9076:	ae 01       	movw	r20, r28
    9078:	4f 5f       	subi	r20, 0xFF	; 255
    907a:	5f 4f       	sbci	r21, 0xFF	; 255
    907c:	be 01       	movw	r22, r28
    907e:	6f 5b       	subi	r22, 0xBF	; 191
    9080:	7f 4f       	sbci	r23, 0xFF	; 255
    9082:	8d ee       	ldi	r24, 0xED	; 237
    9084:	9b e0       	ldi	r25, 0x0B	; 11
    9086:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    908a:	6a e1       	ldi	r22, 0x1A	; 26
    908c:	74 e0       	ldi	r23, 0x04	; 4
    908e:	ce 01       	movw	r24, r28
    9090:	8f 5b       	subi	r24, 0xBF	; 191
    9092:	9f 4f       	sbci	r25, 0xFF	; 255
    9094:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
itoa():
    9098:	4a e0       	ldi	r20, 0x0A	; 10
    909a:	be 01       	movw	r22, r28
    909c:	6f 5f       	subi	r22, 0xFF	; 255
    909e:	7f 4f       	sbci	r23, 0xFF	; 255
    90a0:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <load_min>
    90a4:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <load_min+0x1>
    90a8:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z18send_device_statusv():
    90ac:	ae 01       	movw	r20, r28
    90ae:	4f 5f       	subi	r20, 0xFF	; 255
    90b0:	5f 4f       	sbci	r21, 0xFF	; 255
    90b2:	be 01       	movw	r22, r28
    90b4:	6f 5b       	subi	r22, 0xBF	; 191
    90b6:	7f 4f       	sbci	r23, 0xFF	; 255
    90b8:	8d ee       	ldi	r24, 0xED	; 237
    90ba:	9b e0       	ldi	r25, 0x0B	; 11
    90bc:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    90c0:	6a e2       	ldi	r22, 0x2A	; 42
    90c2:	74 e0       	ldi	r23, 0x04	; 4
    90c4:	ce 01       	movw	r24, r28
    90c6:	8f 5b       	subi	r24, 0xBF	; 191
    90c8:	9f 4f       	sbci	r25, 0xFF	; 255
    90ca:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
itoa():
    90ce:	4a e0       	ldi	r20, 0x0A	; 10
    90d0:	be 01       	movw	r22, r28
    90d2:	6f 5f       	subi	r22, 0xFF	; 255
    90d4:	7f 4f       	sbci	r23, 0xFF	; 255
    90d6:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <load_max>
    90da:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <load_max+0x1>
    90de:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z18send_device_statusv():
    90e2:	ae 01       	movw	r20, r28
    90e4:	4f 5f       	subi	r20, 0xFF	; 255
    90e6:	5f 4f       	sbci	r21, 0xFF	; 255
    90e8:	be 01       	movw	r22, r28
    90ea:	6f 5b       	subi	r22, 0xBF	; 191
    90ec:	7f 4f       	sbci	r23, 0xFF	; 255
    90ee:	8d ee       	ldi	r24, 0xED	; 237
    90f0:	9b e0       	ldi	r25, 0x0B	; 11
    90f2:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    90f6:	10 92 09 0a 	sts	0x0A09, r1	; 0x800a09 <load_max>
    90fa:	10 92 0a 0a 	sts	0x0A0A, r1	; 0x800a0a <load_max+0x1>
    90fe:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <load_max+0x2>
    9102:	10 92 0c 0a 	sts	0x0A0C, r1	; 0x800a0c <load_max+0x3>
    9106:	8f ef       	ldi	r24, 0xFF	; 255
    9108:	9f ef       	ldi	r25, 0xFF	; 255
    910a:	dc 01       	movw	r26, r24
    910c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <load_min>
    9110:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <load_min+0x1>
    9114:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <load_min+0x2>
    9118:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <load_min+0x3>
    911c:	6a e3       	ldi	r22, 0x3A	; 58
    911e:	74 e0       	ldi	r23, 0x04	; 4
    9120:	ce 01       	movw	r24, r28
    9122:	8f 5b       	subi	r24, 0xBF	; 191
    9124:	9f 4f       	sbci	r25, 0xFF	; 255
    9126:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    912a:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <default_ring>
itoa():
    912e:	4a e0       	ldi	r20, 0x0A	; 10
    9130:	be 01       	movw	r22, r28
    9132:	6f 5f       	subi	r22, 0xFF	; 255
    9134:	7f 4f       	sbci	r23, 0xFF	; 255
    9136:	90 e0       	ldi	r25, 0x00	; 0
    9138:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z18send_device_statusv():
    913c:	ae 01       	movw	r20, r28
    913e:	4f 5f       	subi	r20, 0xFF	; 255
    9140:	5f 4f       	sbci	r21, 0xFF	; 255
    9142:	be 01       	movw	r22, r28
    9144:	6f 5b       	subi	r22, 0xBF	; 191
    9146:	7f 4f       	sbci	r23, 0xFF	; 255
    9148:	8d ee       	ldi	r24, 0xED	; 237
    914a:	9b e0       	ldi	r25, 0x0B	; 11
    914c:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9150:	6e e4       	ldi	r22, 0x4E	; 78
    9152:	74 e0       	ldi	r23, 0x04	; 4
    9154:	ce 01       	movw	r24, r28
    9156:	8f 5b       	subi	r24, 0xBF	; 191
    9158:	9f 4f       	sbci	r25, 0xFF	; 255
    915a:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    915e:	80 91 32 0a 	lds	r24, 0x0A32	; 0x800a32 <selftest_data>
itoa():
    9162:	4a e0       	ldi	r20, 0x0A	; 10
    9164:	be 01       	movw	r22, r28
    9166:	6f 5f       	subi	r22, 0xFF	; 255
    9168:	7f 4f       	sbci	r23, 0xFF	; 255
    916a:	90 e0       	ldi	r25, 0x00	; 0
    916c:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z18send_device_statusv():
    9170:	ae 01       	movw	r20, r28
    9172:	4f 5f       	subi	r20, 0xFF	; 255
    9174:	5f 4f       	sbci	r21, 0xFF	; 255
    9176:	be 01       	movw	r22, r28
    9178:	6f 5b       	subi	r22, 0xBF	; 191
    917a:	7f 4f       	sbci	r23, 0xFF	; 255
    917c:	8d ee       	ldi	r24, 0xED	; 237
    917e:	9b e0       	ldi	r25, 0x0B	; 11
    9180:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9184:	6e e5       	ldi	r22, 0x5E	; 94
    9186:	74 e0       	ldi	r23, 0x04	; 4
    9188:	ce 01       	movw	r24, r28
    918a:	8f 5b       	subi	r24, 0xBF	; 191
    918c:	9f 4f       	sbci	r25, 0xFF	; 255
    918e:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    9192:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <use_rtds>
itoa():
    9196:	4a e0       	ldi	r20, 0x0A	; 10
    9198:	be 01       	movw	r22, r28
    919a:	6f 5f       	subi	r22, 0xFF	; 255
    919c:	7f 4f       	sbci	r23, 0xFF	; 255
    919e:	90 e0       	ldi	r25, 0x00	; 0
    91a0:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z18send_device_statusv():
    91a4:	ae 01       	movw	r20, r28
    91a6:	4f 5f       	subi	r20, 0xFF	; 255
    91a8:	5f 4f       	sbci	r21, 0xFF	; 255
    91aa:	be 01       	movw	r22, r28
    91ac:	6f 5b       	subi	r22, 0xBF	; 191
    91ae:	7f 4f       	sbci	r23, 0xFF	; 255
    91b0:	8d ee       	ldi	r24, 0xED	; 237
    91b2:	9b e0       	ldi	r25, 0x0B	; 11
    91b4:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    91b8:	0e 94 dd 47 	call	0x8fba	; 0x8fba <time_get_offset()>
itoa():
    91bc:	4a e0       	ldi	r20, 0x0A	; 10
    91be:	be 01       	movw	r22, r28
    91c0:	6f 5f       	subi	r22, 0xFF	; 255
    91c2:	7f 4f       	sbci	r23, 0xFF	; 255
    91c4:	90 e0       	ldi	r25, 0x00	; 0
    91c6:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z18send_device_statusv():
    91ca:	ae 01       	movw	r20, r28
    91cc:	4f 5f       	subi	r20, 0xFF	; 255
    91ce:	5f 4f       	sbci	r21, 0xFF	; 255
    91d0:	60 e7       	ldi	r22, 0x70	; 112
    91d2:	74 e0       	ldi	r23, 0x04	; 4
    91d4:	8d ee       	ldi	r24, 0xED	; 237
    91d6:	9b e0       	ldi	r25, 0x0B	; 11
    91d8:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    91dc:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <tritri>
    91e0:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <tritri+0x1>
    91e4:	25 e0       	ldi	r18, 0x05	; 5
    91e6:	28 9f       	mul	r18, r24
    91e8:	b0 01       	movw	r22, r0
    91ea:	29 9f       	mul	r18, r25
    91ec:	70 0d       	add	r23, r0
    91ee:	11 24       	eor	r1, r1
    91f0:	90 e0       	ldi	r25, 0x00	; 0
    91f2:	80 e0       	ldi	r24, 0x00	; 0
    91f4:	0e 94 12 d2 	call	0x1a424	; 0x1a424 <__floatunsisf>
    91f8:	20 e0       	ldi	r18, 0x00	; 0
    91fa:	30 e0       	ldi	r19, 0x00	; 0
    91fc:	4a e7       	ldi	r20, 0x7A	; 122
    91fe:	54 e4       	ldi	r21, 0x44	; 68
    9200:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
_Z18send_device_statusv():
    9204:	8e 01       	movw	r16, r28
    9206:	0f 5f       	subi	r16, 0xFF	; 255
    9208:	1f 4f       	sbci	r17, 0xFF	; 255
    920a:	22 e0       	ldi	r18, 0x02	; 2
    920c:	44 e0       	ldi	r20, 0x04	; 4
    920e:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
    9212:	a8 01       	movw	r20, r16
    9214:	60 e8       	ldi	r22, 0x80	; 128
    9216:	74 e0       	ldi	r23, 0x04	; 4
    9218:	8d ee       	ldi	r24, 0xED	; 237
    921a:	9b e0       	ldi	r25, 0x0B	; 11
    921c:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    9220:	60 91 2e 0a 	lds	r22, 0x0A2E	; 0x800a2e <petnula>
    9224:	70 91 2f 0a 	lds	r23, 0x0A2F	; 0x800a2f <petnula+0x1>
    9228:	83 e0       	ldi	r24, 0x03	; 3
    922a:	66 0f       	add	r22, r22
    922c:	77 1f       	adc	r23, r23
    922e:	8a 95       	dec	r24
    9230:	e1 f7       	brne	.-8      	; 0x922a <send_device_status()+0x268>
    9232:	90 e0       	ldi	r25, 0x00	; 0
    9234:	80 e0       	ldi	r24, 0x00	; 0
    9236:	0e 94 12 d2 	call	0x1a424	; 0x1a424 <__floatunsisf>
    923a:	20 e0       	ldi	r18, 0x00	; 0
    923c:	30 e0       	ldi	r19, 0x00	; 0
    923e:	4a e7       	ldi	r20, 0x7A	; 122
    9240:	54 e4       	ldi	r21, 0x44	; 68
    9242:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
_Z18send_device_statusv():
    9246:	22 e0       	ldi	r18, 0x02	; 2
    9248:	44 e0       	ldi	r20, 0x04	; 4
    924a:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
    924e:	a8 01       	movw	r20, r16
    9250:	63 e9       	ldi	r22, 0x93	; 147
    9252:	74 e0       	ldi	r23, 0x04	; 4
    9254:	8d ee       	ldi	r24, 0xED	; 237
    9256:	9b e0       	ldi	r25, 0x0B	; 11
    9258:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    925c:	80 91 2c 0a 	lds	r24, 0x0A2C	; 0x800a2c <dvanact>
    9260:	90 91 2d 0a 	lds	r25, 0x0A2D	; 0x800a2d <dvanact+0x1>
    9264:	29 e3       	ldi	r18, 0x39	; 57
    9266:	28 9f       	mul	r18, r24
    9268:	b0 01       	movw	r22, r0
    926a:	29 9f       	mul	r18, r25
    926c:	70 0d       	add	r23, r0
    926e:	11 24       	eor	r1, r1
    9270:	90 e0       	ldi	r25, 0x00	; 0
    9272:	80 e0       	ldi	r24, 0x00	; 0
    9274:	0e 94 12 d2 	call	0x1a424	; 0x1a424 <__floatunsisf>
    9278:	20 e0       	ldi	r18, 0x00	; 0
    927a:	30 e0       	ldi	r19, 0x00	; 0
    927c:	4a e7       	ldi	r20, 0x7A	; 122
    927e:	54 e4       	ldi	r21, 0x44	; 68
    9280:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
_Z18send_device_statusv():
    9284:	22 e0       	ldi	r18, 0x02	; 2
    9286:	44 e0       	ldi	r20, 0x04	; 4
    9288:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
    928c:	a8 01       	movw	r20, r16
    928e:	66 ea       	ldi	r22, 0xA6	; 166
    9290:	74 e0       	ldi	r23, 0x04	; 4
    9292:	8d ee       	ldi	r24, 0xED	; 237
    9294:	9b e0       	ldi	r25, 0x0B	; 11
    9296:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_prouduj():
    929a:	60 91 2a 0a 	lds	r22, 0x0A2A	; 0x800a2a <proud>
    929e:	70 91 2b 0a 	lds	r23, 0x0A2B	; 0x800a2b <proud+0x1>
    92a2:	90 e0       	ldi	r25, 0x00	; 0
    92a4:	80 e0       	ldi	r24, 0x00	; 0
    92a6:	0e 94 12 d2 	call	0x1a424	; 0x1a424 <__floatunsisf>
_Z18send_device_statusv():
    92aa:	22 e0       	ldi	r18, 0x02	; 2
    92ac:	44 e0       	ldi	r20, 0x04	; 4
    92ae:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
    92b2:	a8 01       	movw	r20, r16
    92b4:	69 eb       	ldi	r22, 0xB9	; 185
    92b6:	74 e0       	ldi	r23, 0x04	; 4
    92b8:	8d ee       	ldi	r24, 0xED	; 237
    92ba:	9b e0       	ldi	r25, 0x0B	; 11
    92bc:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    92c0:	c0 58       	subi	r28, 0x80	; 128
    92c2:	df 4f       	sbci	r29, 0xFF	; 255
    92c4:	0f b6       	in	r0, 0x3f	; 63
    92c6:	f8 94       	cli
    92c8:	de bf       	out	0x3e, r29	; 62
    92ca:	0f be       	out	0x3f, r0	; 63
    92cc:	cd bf       	out	0x3d, r28	; 61
    92ce:	df 91       	pop	r29
    92d0:	cf 91       	pop	r28
    92d2:	1f 91       	pop	r17
    92d4:	0f 91       	pop	r16
    92d6:	08 95       	ret

000092d8 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>:
_Z26button_click_ntp_sync_timejjh():
    92d8:	cf 93       	push	r28
    92da:	df 93       	push	r29
    92dc:	cd b7       	in	r28, 0x3d	; 61
    92de:	de b7       	in	r29, 0x3e	; 62
    92e0:	c7 54       	subi	r28, 0x47	; 71
    92e2:	d1 09       	sbc	r29, r1
    92e4:	0f b6       	in	r0, 0x3f	; 63
    92e6:	f8 94       	cli
    92e8:	de bf       	out	0x3e, r29	; 62
    92ea:	0f be       	out	0x3f, r0	; 63
    92ec:	cd bf       	out	0x3d, r28	; 61
    92ee:	6a e0       	ldi	r22, 0x0A	; 10
    92f0:	7e e0       	ldi	r23, 0x0E	; 14
    92f2:	ce 01       	movw	r24, r28
    92f4:	01 96       	adiw	r24, 0x01	; 1
    92f6:	0e 94 35 c9 	call	0x1926a	; 0x1926a <NTPClient::NTPClient(UDP&)>
    92fa:	0e 94 dd 47 	call	0x8fba	; 0x8fba <time_get_offset()>
    92fe:	48 2f       	mov	r20, r24
    9300:	69 e3       	ldi	r22, 0x39	; 57
    9302:	7e e0       	ldi	r23, 0x0E	; 14
    9304:	ce 01       	movw	r24, r28
    9306:	01 96       	adiw	r24, 0x01	; 1
    9308:	0e 94 f7 81 	call	0x103ee	; 0x103ee <ntp_update(NTPClient*, RTC_DS1307*, unsigned char)>
    930c:	81 30       	cpi	r24, 0x01	; 1
    930e:	c1 f4       	brne	.+48     	; 0x9340 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x68>
    9310:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <selftest_clear_0(unsigned char)>
    9314:	70 e0       	ldi	r23, 0x00	; 0
    9316:	60 e0       	ldi	r22, 0x00	; 0
    9318:	88 e6       	ldi	r24, 0x68	; 104
    931a:	90 e0       	ldi	r25, 0x00	; 0
    931c:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>
    9320:	67 e9       	ldi	r22, 0x97	; 151
    9322:	74 e5       	ldi	r23, 0x54	; 84
    9324:	85 e8       	ldi	r24, 0x85	; 133
    9326:	99 e0       	ldi	r25, 0x09	; 9
    9328:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    932c:	c9 5b       	subi	r28, 0xB9	; 185
    932e:	df 4f       	sbci	r29, 0xFF	; 255
    9330:	0f b6       	in	r0, 0x3f	; 63
    9332:	f8 94       	cli
    9334:	de bf       	out	0x3e, r29	; 62
    9336:	0f be       	out	0x3f, r0	; 63
    9338:	cd bf       	out	0x3d, r28	; 61
    933a:	df 91       	pop	r29
    933c:	cf 91       	pop	r28
    933e:	08 95       	ret
    9340:	81 e0       	ldi	r24, 0x01	; 1
    9342:	0e 94 b6 47 	call	0x8f6c	; 0x8f6c <selftest_set_0(unsigned char)>
    9346:	70 e0       	ldi	r23, 0x00	; 0
    9348:	60 e0       	ldi	r22, 0x00	; 0
    934a:	88 e6       	ldi	r24, 0x68	; 104
    934c:	90 e0       	ldi	r25, 0x00	; 0
    934e:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.49]>
    9352:	61 e8       	ldi	r22, 0x81	; 129
    9354:	74 e5       	ldi	r23, 0x54	; 84
    9356:	e6 cf       	rjmp	.-52     	; 0x9324 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x4c>

00009358 <time_set_offset(unsigned char)>:
_Z15time_set_offseth():
    9358:	68 2f       	mov	r22, r24
    935a:	81 e0       	ldi	r24, 0x01	; 1
    935c:	90 e0       	ldi	r25, 0x00	; 0
    935e:	0c 94 5c 35 	jmp	0x6ab8	; 0x6ab8 <EEPROMClass::write(int, unsigned char) [clone .isra.4]>

00009362 <setup_io_pin()>:
_Z12setup_io_pinv():
    9362:	61 e0       	ldi	r22, 0x01	; 1
    9364:	86 e0       	ldi	r24, 0x06	; 6
    9366:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
    936a:	61 e0       	ldi	r22, 0x01	; 1
    936c:	8f e0       	ldi	r24, 0x0F	; 15
    936e:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
    9372:	61 e0       	ldi	r22, 0x01	; 1
    9374:	88 e0       	ldi	r24, 0x08	; 8
    9376:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
    937a:	61 e0       	ldi	r22, 0x01	; 1
    937c:	8c e0       	ldi	r24, 0x0C	; 12
    937e:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
    9382:	61 e0       	ldi	r22, 0x01	; 1
    9384:	86 e1       	ldi	r24, 0x16	; 22
    9386:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
    938a:	61 e0       	ldi	r22, 0x01	; 1
    938c:	87 e1       	ldi	r24, 0x17	; 23
    938e:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
    9392:	62 e0       	ldi	r22, 0x02	; 2
    9394:	8e e0       	ldi	r24, 0x0E	; 14
    9396:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
    939a:	60 e0       	ldi	r22, 0x00	; 0
    939c:	8c e0       	ldi	r24, 0x0C	; 12
    939e:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
    93a2:	68 ee       	ldi	r22, 0xE8	; 232
    93a4:	73 e0       	ldi	r23, 0x03	; 3
    93a6:	80 e0       	ldi	r24, 0x00	; 0
    93a8:	90 e0       	ldi	r25, 0x00	; 0
    93aa:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
    93ae:	61 e0       	ldi	r22, 0x01	; 1
    93b0:	8c e0       	ldi	r24, 0x0C	; 12
    93b2:	0c 94 7d cd 	jmp	0x19afa	; 0x19afa <digitalWrite>

000093b6 <convert_text_mode(char*)>:
_Z17convert_text_modePc():
    93b6:	ef 92       	push	r14
    93b8:	ff 92       	push	r15
    93ba:	0f 93       	push	r16
    93bc:	1f 93       	push	r17
    93be:	cf 93       	push	r28
    93c0:	8c 01       	movw	r16, r24
    93c2:	69 ec       	ldi	r22, 0xC9	; 201
    93c4:	73 e0       	ldi	r23, 0x03	; 3
    93c6:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    93ca:	7c 01       	movw	r14, r24
    93cc:	60 ed       	ldi	r22, 0xD0	; 208
    93ce:	74 e0       	ldi	r23, 0x04	; 4
    93d0:	c8 01       	movw	r24, r16
    93d2:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    93d6:	c3 e0       	ldi	r28, 0x03	; 3
    93d8:	89 2b       	or	r24, r25
    93da:	21 f0       	breq	.+8      	; 0x93e4 <convert_text_mode(char*)+0x2e>
    93dc:	c1 e0       	ldi	r28, 0x01	; 1
    93de:	ef 28       	or	r14, r15
    93e0:	09 f0       	breq	.+2      	; 0x93e4 <convert_text_mode(char*)+0x2e>
    93e2:	c0 e0       	ldi	r28, 0x00	; 0
    93e4:	67 ed       	ldi	r22, 0xD7	; 215
    93e6:	74 e0       	ldi	r23, 0x04	; 4
    93e8:	c8 01       	movw	r24, r16
    93ea:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    93ee:	89 2b       	or	r24, r25
    93f0:	09 f4       	brne	.+2      	; 0x93f4 <convert_text_mode(char*)+0x3e>
    93f2:	c2 e0       	ldi	r28, 0x02	; 2
    93f4:	6f ec       	ldi	r22, 0xCF	; 207
    93f6:	73 e0       	ldi	r23, 0x03	; 3
    93f8:	c8 01       	movw	r24, r16
    93fa:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    93fe:	89 2b       	or	r24, r25
    9400:	09 f4       	brne	.+2      	; 0x9404 <convert_text_mode(char*)+0x4e>
    9402:	c4 e0       	ldi	r28, 0x04	; 4
    9404:	6c ed       	ldi	r22, 0xDC	; 220
    9406:	74 e0       	ldi	r23, 0x04	; 4
    9408:	c8 01       	movw	r24, r16
    940a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    940e:	89 2b       	or	r24, r25
    9410:	09 f4       	brne	.+2      	; 0x9414 <convert_text_mode(char*)+0x5e>
    9412:	c6 e0       	ldi	r28, 0x06	; 6
    9414:	8c 2f       	mov	r24, r28
    9416:	cf 91       	pop	r28
    9418:	1f 91       	pop	r17
    941a:	0f 91       	pop	r16
    941c:	ff 90       	pop	r15
    941e:	ef 90       	pop	r14
    9420:	08 95       	ret

00009422 <convert_mode_text(unsigned char, char*)>:
_Z17convert_mode_texthPc():
    9422:	28 2f       	mov	r18, r24
    9424:	cb 01       	movw	r24, r22
    9426:	65 ee       	ldi	r22, 0xE5	; 229
    9428:	74 e0       	ldi	r23, 0x04	; 4
    942a:	22 23       	and	r18, r18
    942c:	21 f0       	breq	.+8      	; 0x9436 <convert_mode_text(unsigned char, char*)+0x14>
    942e:	21 30       	cpi	r18, 0x01	; 1
    9430:	29 f4       	brne	.+10     	; 0x943c <convert_mode_text(unsigned char, char*)+0x1a>
    9432:	69 ec       	ldi	r22, 0xC9	; 201
    9434:	73 e0       	ldi	r23, 0x03	; 3
    9436:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    943a:	08 95       	ret
    943c:	60 ed       	ldi	r22, 0xD0	; 208
    943e:	74 e0       	ldi	r23, 0x04	; 4
    9440:	23 30       	cpi	r18, 0x03	; 3
    9442:	61 f0       	breq	.+24     	; 0x945c <convert_mode_text(unsigned char, char*)+0x3a>
    9444:	67 ed       	ldi	r22, 0xD7	; 215
    9446:	74 e0       	ldi	r23, 0x04	; 4
    9448:	22 30       	cpi	r18, 0x02	; 2
    944a:	41 f0       	breq	.+16     	; 0x945c <convert_mode_text(unsigned char, char*)+0x3a>
    944c:	6f ec       	ldi	r22, 0xCF	; 207
    944e:	73 e0       	ldi	r23, 0x03	; 3
    9450:	24 30       	cpi	r18, 0x04	; 4
    9452:	21 f0       	breq	.+8      	; 0x945c <convert_mode_text(unsigned char, char*)+0x3a>
    9454:	26 30       	cpi	r18, 0x06	; 6
    9456:	21 f4       	brne	.+8      	; 0x9460 <convert_mode_text(unsigned char, char*)+0x3e>
    9458:	6c ed       	ldi	r22, 0xDC	; 220
    945a:	74 e0       	ldi	r23, 0x04	; 4
    945c:	0c 94 72 d7 	jmp	0x1aee4	; 0x1aee4 <strcpy>
    9460:	08 95       	ret

00009462 <send_mqtt_ring()>:
_Z14send_mqtt_ringv():
    9462:	cf 92       	push	r12
    9464:	df 92       	push	r13
    9466:	ff 92       	push	r15
    9468:	0f 93       	push	r16
    946a:	1f 93       	push	r17
    946c:	cf 93       	push	r28
    946e:	df 93       	push	r29
    9470:	cd b7       	in	r28, 0x3d	; 61
    9472:	de b7       	in	r29, 0x3e	; 62
    9474:	c0 54       	subi	r28, 0x40	; 64
    9476:	d1 09       	sbc	r29, r1
    9478:	0f b6       	in	r0, 0x3f	; 63
    947a:	f8 94       	cli
    947c:	de bf       	out	0x3e, r29	; 62
    947e:	0f be       	out	0x3f, r0	; 63
    9480:	cd bf       	out	0x3d, r28	; 61
    9482:	83 e3       	ldi	r24, 0x33	; 51
    9484:	c8 2e       	mov	r12, r24
    9486:	8a e0       	ldi	r24, 0x0A	; 10
    9488:	d8 2e       	mov	r13, r24
    948a:	f1 2c       	mov	r15, r1
    948c:	8f 2d       	mov	r24, r15
    948e:	0e 94 1d 89 	call	0x1123a	; 0x1123a <thermostat_ring_get_active(unsigned char)>
    9492:	8f 3f       	cpi	r24, 0xFF	; 255
    9494:	09 f4       	brne	.+2      	; 0x9498 <send_mqtt_ring()+0x36>
    9496:	b8 c0       	rjmp	.+368    	; 0x9608 <send_mqtt_ring()+0x1a6>
    9498:	be 01       	movw	r22, r28
    949a:	6f 5f       	subi	r22, 0xFF	; 255
    949c:	7f 4f       	sbci	r23, 0xFF	; 255
    949e:	8f 2d       	mov	r24, r15
    94a0:	0e 94 c2 88 	call	0x11184	; 0x11184 <thermostat_ring_get_name(unsigned char, char*)>
    94a4:	8e 01       	movw	r16, r28
    94a6:	0f 5f       	subi	r16, 0xFF	; 255
    94a8:	1f 4f       	sbci	r17, 0xFF	; 255
    94aa:	27 e5       	ldi	r18, 0x57	; 87
    94ac:	33 e0       	ldi	r19, 0x03	; 3
    94ae:	4f 2d       	mov	r20, r15
    94b0:	69 e4       	ldi	r22, 0x49	; 73
    94b2:	74 e0       	ldi	r23, 0x04	; 4
    94b4:	8d ee       	ldi	r24, 0xED	; 237
    94b6:	9b e0       	ldi	r25, 0x0B	; 11
    94b8:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    94bc:	8f 2d       	mov	r24, r15
    94be:	0e 94 1d 89 	call	0x1123a	; 0x1123a <thermostat_ring_get_active(unsigned char)>
itoa():
    94c2:	4a e0       	ldi	r20, 0x0A	; 10
    94c4:	b8 01       	movw	r22, r16
    94c6:	90 e0       	ldi	r25, 0x00	; 0
    94c8:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    94cc:	28 e7       	ldi	r18, 0x78	; 120
    94ce:	33 e0       	ldi	r19, 0x03	; 3
    94d0:	4f 2d       	mov	r20, r15
    94d2:	69 e4       	ldi	r22, 0x49	; 73
    94d4:	74 e0       	ldi	r23, 0x04	; 4
    94d6:	8d ee       	ldi	r24, 0xED	; 237
    94d8:	9b e0       	ldi	r25, 0x0B	; 11
    94da:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    94de:	8f 2d       	mov	r24, r15
    94e0:	0e 94 2d 89 	call	0x1125a	; 0x1125a <thermostat_ring_get_program_id(unsigned char)>
itoa():
    94e4:	4a e0       	ldi	r20, 0x0A	; 10
    94e6:	b8 01       	movw	r22, r16
    94e8:	90 e0       	ldi	r25, 0x00	; 0
    94ea:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    94ee:	29 ee       	ldi	r18, 0xE9	; 233
    94f0:	34 e0       	ldi	r19, 0x04	; 4
    94f2:	4f 2d       	mov	r20, r15
    94f4:	69 e4       	ldi	r22, 0x49	; 73
    94f6:	74 e0       	ldi	r23, 0x04	; 4
    94f8:	8d ee       	ldi	r24, 0xED	; 237
    94fa:	9b e0       	ldi	r25, 0x0B	; 11
    94fc:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9500:	8f 2d       	mov	r24, r15
    9502:	0e 94 3d 89 	call	0x1127a	; 0x1127a <thermostat_ring_get_mezni(unsigned char)>
itoa():
    9506:	4a e0       	ldi	r20, 0x0A	; 10
    9508:	b8 01       	movw	r22, r16
    950a:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    950e:	2f e8       	ldi	r18, 0x8F	; 143
    9510:	33 e0       	ldi	r19, 0x03	; 3
    9512:	4f 2d       	mov	r20, r15
    9514:	69 e4       	ldi	r22, 0x49	; 73
    9516:	74 e0       	ldi	r23, 0x04	; 4
    9518:	8d ee       	ldi	r24, 0xED	; 237
    951a:	9b e0       	ldi	r25, 0x0B	; 11
    951c:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9520:	8f 2d       	mov	r24, r15
    9522:	0e 94 81 89 	call	0x11302	; 0x11302 <thermostat_ring_get_mode(unsigned char)>
itoa():
    9526:	4a e0       	ldi	r20, 0x0A	; 10
    9528:	b8 01       	movw	r22, r16
    952a:	90 e0       	ldi	r25, 0x00	; 0
    952c:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9530:	26 ef       	ldi	r18, 0xF6	; 246
    9532:	34 e0       	ldi	r19, 0x04	; 4
    9534:	4f 2d       	mov	r20, r15
    9536:	69 e4       	ldi	r22, 0x49	; 73
    9538:	74 e0       	ldi	r23, 0x04	; 4
    953a:	8d ee       	ldi	r24, 0xED	; 237
    953c:	9b e0       	ldi	r25, 0x0B	; 11
    953e:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9542:	8f 2d       	mov	r24, r15
    9544:	0e 94 81 89 	call	0x11302	; 0x11302 <thermostat_ring_get_mode(unsigned char)>
    9548:	b8 01       	movw	r22, r16
    954a:	0e 94 11 4a 	call	0x9422	; 0x9422 <convert_mode_text(unsigned char, char*)>
    954e:	21 ef       	ldi	r18, 0xF1	; 241
    9550:	34 e0       	ldi	r19, 0x04	; 4
    9552:	4f 2d       	mov	r20, r15
    9554:	69 e4       	ldi	r22, 0x49	; 73
    9556:	74 e0       	ldi	r23, 0x04	; 4
    9558:	8d ee       	ldi	r24, 0xED	; 237
    955a:	9b e0       	ldi	r25, 0x0B	; 11
    955c:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9560:	8f 2d       	mov	r24, r15
    9562:	0e 94 c3 87 	call	0x10f86	; 0x10f86 <thermostat_ring_get_state(unsigned char)>
itoa():
    9566:	4a e0       	ldi	r20, 0x0A	; 10
    9568:	b8 01       	movw	r22, r16
    956a:	90 e0       	ldi	r25, 0x00	; 0
    956c:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9570:	2b ef       	ldi	r18, 0xFB	; 251
    9572:	34 e0       	ldi	r19, 0x04	; 4
    9574:	4f 2d       	mov	r20, r15
    9576:	69 e4       	ldi	r22, 0x49	; 73
    9578:	74 e0       	ldi	r23, 0x04	; 4
    957a:	8d ee       	ldi	r24, 0xED	; 237
    957c:	9b e0       	ldi	r25, 0x0B	; 11
    957e:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9582:	8f 2d       	mov	r24, r15
    9584:	0e 94 71 89 	call	0x112e2	; 0x112e2 <thermostat_ring_get_asociate_tds(unsigned char)>
itoa():
    9588:	4a e0       	ldi	r20, 0x0A	; 10
    958a:	b8 01       	movw	r22, r16
    958c:	90 e0       	ldi	r25, 0x00	; 0
    958e:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9592:	22 e0       	ldi	r18, 0x02	; 2
    9594:	35 e0       	ldi	r19, 0x05	; 5
    9596:	4f 2d       	mov	r20, r15
    9598:	69 e4       	ldi	r22, 0x49	; 73
    959a:	74 e0       	ldi	r23, 0x04	; 4
    959c:	8d ee       	ldi	r24, 0xED	; 237
    959e:	9b e0       	ldi	r25, 0x0B	; 11
    95a0:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    95a4:	8f 2d       	mov	r24, r15
    95a6:	0e 94 0d 89 	call	0x1121a	; 0x1121a <thermostat_ring_get_output(unsigned char)>
itoa():
    95aa:	4a e0       	ldi	r20, 0x0A	; 10
    95ac:	b8 01       	movw	r22, r16
    95ae:	90 e0       	ldi	r25, 0x00	; 0
    95b0:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    95b4:	28 e0       	ldi	r18, 0x08	; 8
    95b6:	35 e0       	ldi	r19, 0x05	; 5
    95b8:	4f 2d       	mov	r20, r15
    95ba:	69 e4       	ldi	r22, 0x49	; 73
    95bc:	74 e0       	ldi	r23, 0x04	; 4
    95be:	8d ee       	ldi	r24, 0xED	; 237
    95c0:	9b e0       	ldi	r25, 0x0B	; 11
    95c2:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    95c6:	8f 2d       	mov	r24, r15
    95c8:	0e 94 9b 89 	call	0x11336	; 0x11336 <thermostat_ring_get_status_data(unsigned char)>
itoa():
    95cc:	4a e0       	ldi	r20, 0x0A	; 10
    95ce:	b8 01       	movw	r22, r16
    95d0:	90 e0       	ldi	r25, 0x00	; 0
    95d2:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    95d6:	2f e0       	ldi	r18, 0x0F	; 15
    95d8:	35 e0       	ldi	r19, 0x05	; 5
    95da:	4f 2d       	mov	r20, r15
    95dc:	69 e4       	ldi	r22, 0x49	; 73
    95de:	74 e0       	ldi	r23, 0x04	; 4
    95e0:	8d ee       	ldi	r24, 0xED	; 237
    95e2:	9b e0       	ldi	r25, 0x0B	; 11
    95e4:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    95e8:	f6 01       	movw	r30, r12
    95ea:	80 81       	ld	r24, Z
itoa():
    95ec:	4a e0       	ldi	r20, 0x0A	; 10
    95ee:	b8 01       	movw	r22, r16
    95f0:	90 e0       	ldi	r25, 0x00	; 0
    95f2:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z14send_mqtt_ringv():
    95f6:	2c e1       	ldi	r18, 0x1C	; 28
    95f8:	35 e0       	ldi	r19, 0x05	; 5
    95fa:	4f 2d       	mov	r20, r15
    95fc:	69 e4       	ldi	r22, 0x49	; 73
    95fe:	74 e0       	ldi	r23, 0x04	; 4
    9600:	8d ee       	ldi	r24, 0xED	; 237
    9602:	9b e0       	ldi	r25, 0x0B	; 11
    9604:	0e 94 96 7e 	call	0xfd2c	; 0xfd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9608:	f3 94       	inc	r15
    960a:	ff ef       	ldi	r31, 0xFF	; 255
    960c:	cf 1a       	sub	r12, r31
    960e:	df 0a       	sbc	r13, r31
    9610:	85 e0       	ldi	r24, 0x05	; 5
    9612:	f8 12       	cpse	r15, r24
    9614:	3b cf       	rjmp	.-394    	; 0x948c <send_mqtt_ring()+0x2a>
    9616:	c0 5c       	subi	r28, 0xC0	; 192
    9618:	df 4f       	sbci	r29, 0xFF	; 255
    961a:	0f b6       	in	r0, 0x3f	; 63
    961c:	f8 94       	cli
    961e:	de bf       	out	0x3e, r29	; 62
    9620:	0f be       	out	0x3f, r0	; 63
    9622:	cd bf       	out	0x3d, r28	; 61
    9624:	df 91       	pop	r29
    9626:	cf 91       	pop	r28
    9628:	1f 91       	pop	r17
    962a:	0f 91       	pop	r16
    962c:	ff 90       	pop	r15
    962e:	df 90       	pop	r13
    9630:	cf 90       	pop	r12
    9632:	08 95       	ret

00009634 <thermostat()>:
_Z10thermostatv():
    9634:	af 92       	push	r10
    9636:	bf 92       	push	r11
    9638:	cf 92       	push	r12
    963a:	df 92       	push	r13
    963c:	ef 92       	push	r14
    963e:	ff 92       	push	r15
    9640:	0f 93       	push	r16
    9642:	1f 93       	push	r17
    9644:	cf 93       	push	r28
    9646:	df 93       	push	r29
    9648:	cd b7       	in	r28, 0x3d	; 61
    964a:	de b7       	in	r29, 0x3e	; 62
    964c:	69 97       	sbiw	r28, 0x19	; 25
    964e:	0f b6       	in	r0, 0x3f	; 63
    9650:	f8 94       	cli
    9652:	de bf       	out	0x3e, r29	; 62
    9654:	0f be       	out	0x3f, r0	; 63
    9656:	cd bf       	out	0x3d, r28	; 61
    9658:	18 8e       	std	Y+24, r1	; 0x18
    965a:	1f 8a       	std	Y+23, r1	; 0x17
    965c:	19 8e       	std	Y+25, r1	; 0x19
    965e:	10 e0       	ldi	r17, 0x00	; 0
    9660:	58 ec       	ldi	r21, 0xC8	; 200
    9662:	d5 2e       	mov	r13, r21
    9664:	6e e1       	ldi	r22, 0x1E	; 30
    9666:	b6 2e       	mov	r11, r22
    9668:	81 2f       	mov	r24, r17
    966a:	0e 94 71 89 	call	0x112e2	; 0x112e2 <thermostat_ring_get_asociate_tds(unsigned char)>
    966e:	e8 2e       	mov	r14, r24
    9670:	81 2f       	mov	r24, r17
    9672:	0e 94 81 89 	call	0x11302	; 0x11302 <thermostat_ring_get_mode(unsigned char)>
    9676:	f8 2e       	mov	r15, r24
    9678:	81 2f       	mov	r24, r17
    967a:	0e 94 0d 89 	call	0x1121a	; 0x1121a <thermostat_ring_get_output(unsigned char)>
    967e:	c8 2e       	mov	r12, r24
    9680:	81 2f       	mov	r24, r17
    9682:	0e 94 3d 89 	call	0x1127a	; 0x1127a <thermostat_ring_get_mezni(unsigned char)>
    9686:	98 8f       	std	Y+24, r25	; 0x18
    9688:	8f 8b       	std	Y+23, r24	; 0x17
    968a:	82 e0       	ldi	r24, 0x02	; 2
    968c:	f8 12       	cpse	r15, r24
    968e:	9b c0       	rjmp	.+310    	; 0x97c6 <thermostat()+0x192>
    9690:	81 2f       	mov	r24, r17
    9692:	0e 94 2d 89 	call	0x1125a	; 0x1125a <thermostat_ring_get_program_id(unsigned char)>
    9696:	a8 2e       	mov	r10, r24
    9698:	82 e3       	ldi	r24, 0x32	; 50
    969a:	9e e0       	ldi	r25, 0x0E	; 14
    969c:	0e 94 e7 c1 	call	0x183ce	; 0x183ce <DateTime::dayOfTheWeek() const>
    96a0:	08 2f       	mov	r16, r24
    96a2:	20 91 36 0e 	lds	r18, 0x0E36	; 0x800e36 <now+0x4>
    96a6:	40 91 35 0e 	lds	r20, 0x0E35	; 0x800e35 <now+0x3>
    96aa:	be 01       	movw	r22, r28
    96ac:	69 5e       	subi	r22, 0xE9	; 233
    96ae:	7f 4f       	sbci	r23, 0xFF	; 255
    96b0:	8a 2d       	mov	r24, r10
    96b2:	0e 94 c9 8c 	call	0x11992	; 0x11992 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)>
    96b6:	8e 3f       	cpi	r24, 0xFE	; 254
    96b8:	09 f4       	brne	.+2      	; 0x96bc <thermostat()+0x88>
    96ba:	69 c0       	rjmp	.+210    	; 0x978e <thermostat()+0x15a>
    96bc:	08 f0       	brcs	.+2      	; 0x96c0 <thermostat()+0x8c>
    96be:	5f c0       	rjmp	.+190    	; 0x977e <thermostat()+0x14a>
    96c0:	8d 3f       	cpi	r24, 0xFD	; 253
    96c2:	09 f4       	brne	.+2      	; 0x96c6 <thermostat()+0x92>
    96c4:	6e c0       	rjmp	.+220    	; 0x97a2 <thermostat()+0x16e>
    96c6:	85 e0       	ldi	r24, 0x05	; 5
    96c8:	8e 15       	cp	r24, r14
    96ca:	e8 f1       	brcs	.+122    	; 0x9746 <thermostat()+0x112>
    96cc:	be 01       	movw	r22, r28
    96ce:	6f 5f       	subi	r22, 0xFF	; 255
    96d0:	7f 4f       	sbci	r23, 0xFF	; 255
    96d2:	8e 2d       	mov	r24, r14
    96d4:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    96d8:	81 30       	cpi	r24, 0x01	; 1
    96da:	a9 f5       	brne	.+106    	; 0x9746 <thermostat()+0x112>
    96dc:	89 81       	ldd	r24, Y+1	; 0x01
    96de:	81 30       	cpi	r24, 0x01	; 1
    96e0:	09 f0       	breq	.+2      	; 0x96e4 <thermostat()+0xb0>
    96e2:	7e c0       	rjmp	.+252    	; 0x97e0 <thermostat()+0x1ac>
    96e4:	be 9c       	mul	r11, r14
    96e6:	f0 01       	movw	r30, r0
    96e8:	11 24       	eor	r1, r1
    96ea:	e7 58       	subi	r30, 0x87	; 135
    96ec:	f0 4f       	sbci	r31, 0xF0	; 240
    96ee:	83 8d       	ldd	r24, Z+27	; 0x1b
    96f0:	81 30       	cpi	r24, 0x01	; 1
    96f2:	09 f0       	breq	.+2      	; 0x96f6 <thermostat()+0xc2>
    96f4:	75 c0       	rjmp	.+234    	; 0x97e0 <thermostat()+0x1ac>
    96f6:	65 81       	ldd	r22, Z+5	; 0x05
    96f8:	76 81       	ldd	r23, Z+6	; 0x06
    96fa:	07 2e       	mov	r0, r23
    96fc:	00 0c       	add	r0, r0
    96fe:	88 0b       	sbc	r24, r24
    9700:	99 0b       	sbc	r25, r25
    9702:	0e 94 14 d2 	call	0x1a428	; 0x1a428 <__floatsisf>
    9706:	20 e0       	ldi	r18, 0x00	; 0
    9708:	30 e0       	ldi	r19, 0x00	; 0
    970a:	48 ec       	ldi	r20, 0xC8	; 200
    970c:	52 e4       	ldi	r21, 0x42	; 66
    970e:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
    9712:	ab 01       	movw	r20, r22
    9714:	bc 01       	movw	r22, r24
    9716:	81 2f       	mov	r24, r17
    9718:	0e 94 82 88 	call	0x11104	; 0x11104 <thermostat_pid_input(unsigned char, double)>
    971c:	6f 89       	ldd	r22, Y+23	; 0x17
    971e:	78 8d       	ldd	r23, Y+24	; 0x18
    9720:	07 2e       	mov	r0, r23
    9722:	00 0c       	add	r0, r0
    9724:	88 0b       	sbc	r24, r24
    9726:	99 0b       	sbc	r25, r25
    9728:	0e 94 14 d2 	call	0x1a428	; 0x1a428 <__floatsisf>
    972c:	ab 01       	movw	r20, r22
    972e:	bc 01       	movw	r22, r24
    9730:	81 2f       	mov	r24, r17
    9732:	0e 94 8d 88 	call	0x1111a	; 0x1111a <thermostat_pid_setpoint(unsigned char, double)>
    9736:	81 2f       	mov	r24, r17
    9738:	0e 94 98 88 	call	0x11130	; 0x11130 <thermostat_pid_output(unsigned char)>
    973c:	d8 2e       	mov	r13, r24
    973e:	68 2f       	mov	r22, r24
    9740:	81 2f       	mov	r24, r17
    9742:	0e 94 cf 87 	call	0x10f9e	; 0x10f9e <thermostat_ring_set_power(unsigned char, unsigned char)>
    9746:	0a ef       	ldi	r16, 0xFA	; 250
    9748:	0e 0d       	add	r16, r14
    974a:	0a 30       	cpi	r16, 0x0A	; 10
    974c:	08 f0       	brcs	.+2      	; 0x9750 <thermostat()+0x11c>
    974e:	7f c0       	rjmp	.+254    	; 0x984e <thermostat()+0x21a>
    9750:	be 01       	movw	r22, r28
    9752:	67 5e       	subi	r22, 0xE7	; 231
    9754:	7f 4f       	sbci	r23, 0xFF	; 255
    9756:	80 2f       	mov	r24, r16
    9758:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <remote_tds_get_active(unsigned char, unsigned char*)>
    975c:	89 8d       	ldd	r24, Y+25	; 0x19
    975e:	81 30       	cpi	r24, 0x01	; 1
    9760:	09 f4       	brne	.+2      	; 0x9764 <thermostat()+0x130>
    9762:	46 c0       	rjmp	.+140    	; 0x97f0 <thermostat()+0x1bc>
    9764:	60 e0       	ldi	r22, 0x00	; 0
    9766:	81 2f       	mov	r24, r17
    9768:	0e 94 cf 87 	call	0x10f9e	; 0x10f9e <thermostat_ring_set_power(unsigned char, unsigned char)>
    976c:	9e ef       	ldi	r25, 0xFE	; 254
    976e:	f9 2e       	mov	r15, r25
    9770:	d1 2c       	mov	r13, r1
    9772:	4d 2d       	mov	r20, r13
    9774:	6f 2d       	mov	r22, r15
    9776:	8c 2d       	mov	r24, r12
    9778:	0e 94 49 47 	call	0x8e92	; 0x8e92 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)>
    977c:	72 c0       	rjmp	.+228    	; 0x9862 <thermostat()+0x22e>
    977e:	60 e0       	ldi	r22, 0x00	; 0
    9780:	81 2f       	mov	r24, r17
    9782:	0e 94 c9 87 	call	0x10f92	; 0x10f92 <thermostat_ring_set_state(unsigned char, unsigned char)>
    9786:	60 e0       	ldi	r22, 0x00	; 0
    9788:	81 2f       	mov	r24, r17
    978a:	0e 94 cf 87 	call	0x10f9e	; 0x10f9e <thermostat_ring_set_power(unsigned char, unsigned char)>
    978e:	60 e0       	ldi	r22, 0x00	; 0
    9790:	81 2f       	mov	r24, r17
    9792:	0e 94 c9 87 	call	0x10f92	; 0x10f92 <thermostat_ring_set_state(unsigned char, unsigned char)>
    9796:	60 e0       	ldi	r22, 0x00	; 0
    9798:	81 2f       	mov	r24, r17
    979a:	0e 94 cf 87 	call	0x10f9e	; 0x10f9e <thermostat_ring_set_power(unsigned char, unsigned char)>
    979e:	f1 2c       	mov	r15, r1
    97a0:	92 cf       	rjmp	.-220    	; 0x96c6 <thermostat()+0x92>
    97a2:	61 e0       	ldi	r22, 0x01	; 1
    97a4:	81 2f       	mov	r24, r17
    97a6:	0e 94 c9 87 	call	0x10f92	; 0x10f92 <thermostat_ring_set_state(unsigned char, unsigned char)>
    97aa:	8a 2d       	mov	r24, r10
    97ac:	0e 94 2c 8b 	call	0x11658	; 0x11658 <thermostat_program_get_active(unsigned char)>
    97b0:	81 30       	cpi	r24, 0x01	; 1
    97b2:	61 f0       	breq	.+24     	; 0x97cc <thermostat()+0x198>
    97b4:	82 30       	cpi	r24, 0x02	; 2
    97b6:	09 f0       	breq	.+2      	; 0x97ba <thermostat()+0x186>
    97b8:	87 c0       	rjmp	.+270    	; 0x98c8 <thermostat()+0x294>
    97ba:	81 2f       	mov	r24, r17
    97bc:	0e 94 67 88 	call	0x110ce	; 0x110ce <thermostat_pid_setdirection_reverse(unsigned char)>
    97c0:	45 e0       	ldi	r20, 0x05	; 5
    97c2:	f4 2e       	mov	r15, r20
    97c4:	80 cf       	rjmp	.-256    	; 0x96c6 <thermostat()+0x92>
    97c6:	83 e0       	ldi	r24, 0x03	; 3
    97c8:	f8 12       	cpse	r15, r24
    97ca:	06 c0       	rjmp	.+12     	; 0x97d8 <thermostat()+0x1a4>
    97cc:	81 2f       	mov	r24, r17
    97ce:	0e 94 57 88 	call	0x110ae	; 0x110ae <thermostat_pid_setdirection_direct(unsigned char)>
    97d2:	33 e0       	ldi	r19, 0x03	; 3
    97d4:	f3 2e       	mov	r15, r19
    97d6:	77 cf       	rjmp	.-274    	; 0x96c6 <thermostat()+0x92>
    97d8:	85 e0       	ldi	r24, 0x05	; 5
    97da:	f8 12       	cpse	r15, r24
    97dc:	74 cf       	rjmp	.-280    	; 0x96c6 <thermostat()+0x92>
    97de:	ed cf       	rjmp	.-38     	; 0x97ba <thermostat()+0x186>
    97e0:	60 e0       	ldi	r22, 0x00	; 0
    97e2:	81 2f       	mov	r24, r17
    97e4:	0e 94 cf 87 	call	0x10f9e	; 0x10f9e <thermostat_ring_set_power(unsigned char, unsigned char)>
    97e8:	d1 2c       	mov	r13, r1
    97ea:	2e ef       	ldi	r18, 0xFE	; 254
    97ec:	f2 2e       	mov	r15, r18
    97ee:	ab cf       	rjmp	.-170    	; 0x9746 <thermostat()+0x112>
    97f0:	80 2f       	mov	r24, r16
    97f2:	0e 94 3e 41 	call	0x827c	; 0x827c <remote_tds_get_last_update(unsigned char)>
    97f6:	84 3b       	cpi	r24, 0xB4	; 180
    97f8:	08 f0       	brcs	.+2      	; 0x97fc <thermostat()+0x1c8>
    97fa:	b4 cf       	rjmp	.-152    	; 0x9764 <thermostat()+0x130>
    97fc:	80 2f       	mov	r24, r16
    97fe:	0e 94 0f 41 	call	0x821e	; 0x821e <remote_tds_get_data(unsigned char)>
    9802:	bc 01       	movw	r22, r24
    9804:	99 0f       	add	r25, r25
    9806:	88 0b       	sbc	r24, r24
    9808:	99 0b       	sbc	r25, r25
    980a:	0e 94 14 d2 	call	0x1a428	; 0x1a428 <__floatsisf>
    980e:	20 e0       	ldi	r18, 0x00	; 0
    9810:	30 e0       	ldi	r19, 0x00	; 0
    9812:	4a e7       	ldi	r20, 0x7A	; 122
    9814:	54 e4       	ldi	r21, 0x44	; 68
    9816:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
    981a:	ab 01       	movw	r20, r22
    981c:	bc 01       	movw	r22, r24
    981e:	81 2f       	mov	r24, r17
    9820:	0e 94 82 88 	call	0x11104	; 0x11104 <thermostat_pid_input(unsigned char, double)>
    9824:	6f 89       	ldd	r22, Y+23	; 0x17
    9826:	78 8d       	ldd	r23, Y+24	; 0x18
    9828:	07 2e       	mov	r0, r23
    982a:	00 0c       	add	r0, r0
    982c:	88 0b       	sbc	r24, r24
    982e:	99 0b       	sbc	r25, r25
    9830:	0e 94 14 d2 	call	0x1a428	; 0x1a428 <__floatsisf>
    9834:	ab 01       	movw	r20, r22
    9836:	bc 01       	movw	r22, r24
    9838:	81 2f       	mov	r24, r17
    983a:	0e 94 8d 88 	call	0x1111a	; 0x1111a <thermostat_pid_setpoint(unsigned char, double)>
    983e:	81 2f       	mov	r24, r17
    9840:	0e 94 98 88 	call	0x11130	; 0x11130 <thermostat_pid_output(unsigned char)>
    9844:	d8 2e       	mov	r13, r24
    9846:	68 2f       	mov	r22, r24
    9848:	81 2f       	mov	r24, r17
    984a:	0e 94 cf 87 	call	0x10f9e	; 0x10f9e <thermostat_ring_set_power(unsigned char, unsigned char)>
    984e:	f1 10       	cpse	r15, r1
    9850:	1d c0       	rjmp	.+58     	; 0x988c <thermostat()+0x258>
    9852:	6e ef       	ldi	r22, 0xFE	; 254
    9854:	8c 2d       	mov	r24, r12
    9856:	0e 94 f5 46 	call	0x8dea	; 0x8dea <mqtt_publis_output(unsigned char, unsigned char)>
    985a:	60 e0       	ldi	r22, 0x00	; 0
    985c:	81 2f       	mov	r24, r17
    985e:	0e 94 cf 87 	call	0x10f9e	; 0x10f9e <thermostat_ring_set_power(unsigned char, unsigned char)>
    9862:	1f 5f       	subi	r17, 0xFF	; 255
    9864:	15 30       	cpi	r17, 0x05	; 5
    9866:	09 f0       	breq	.+2      	; 0x986a <thermostat()+0x236>
    9868:	ff ce       	rjmp	.-514    	; 0x9668 <thermostat()+0x34>
    986a:	69 96       	adiw	r28, 0x19	; 25
    986c:	0f b6       	in	r0, 0x3f	; 63
    986e:	f8 94       	cli
    9870:	de bf       	out	0x3e, r29	; 62
    9872:	0f be       	out	0x3f, r0	; 63
    9874:	cd bf       	out	0x3d, r28	; 61
    9876:	df 91       	pop	r29
    9878:	cf 91       	pop	r28
    987a:	1f 91       	pop	r17
    987c:	0f 91       	pop	r16
    987e:	ff 90       	pop	r15
    9880:	ef 90       	pop	r14
    9882:	df 90       	pop	r13
    9884:	cf 90       	pop	r12
    9886:	bf 90       	pop	r11
    9888:	af 90       	pop	r10
    988a:	08 95       	ret
    988c:	81 e0       	ldi	r24, 0x01	; 1
    988e:	6a e0       	ldi	r22, 0x0A	; 10
    9890:	f8 16       	cp	r15, r24
    9892:	21 f0       	breq	.+8      	; 0x989c <thermostat()+0x268>
    9894:	84 e0       	ldi	r24, 0x04	; 4
    9896:	f8 12       	cpse	r15, r24
    9898:	06 c0       	rjmp	.+12     	; 0x98a6 <thermostat()+0x272>
    989a:	6b e0       	ldi	r22, 0x0B	; 11
    989c:	8c 2d       	mov	r24, r12
    989e:	0e 94 f5 46 	call	0x8dea	; 0x8dea <mqtt_publis_output(unsigned char, unsigned char)>
    98a2:	6f ef       	ldi	r22, 0xFF	; 255
    98a4:	db cf       	rjmp	.-74     	; 0x985c <thermostat()+0x228>
    98a6:	83 e0       	ldi	r24, 0x03	; 3
    98a8:	f8 16       	cp	r15, r24
    98aa:	09 f4       	brne	.+2      	; 0x98ae <thermostat()+0x27a>
    98ac:	62 cf       	rjmp	.-316    	; 0x9772 <thermostat()+0x13e>
    98ae:	85 e0       	ldi	r24, 0x05	; 5
    98b0:	f8 16       	cp	r15, r24
    98b2:	09 f4       	brne	.+2      	; 0x98b6 <thermostat()+0x282>
    98b4:	5e cf       	rjmp	.-324    	; 0x9772 <thermostat()+0x13e>
    98b6:	86 e0       	ldi	r24, 0x06	; 6
    98b8:	f8 16       	cp	r15, r24
    98ba:	09 f4       	brne	.+2      	; 0x98be <thermostat()+0x28a>
    98bc:	5a cf       	rjmp	.-332    	; 0x9772 <thermostat()+0x13e>
    98be:	8e ef       	ldi	r24, 0xFE	; 254
    98c0:	f8 16       	cp	r15, r24
    98c2:	09 f4       	brne	.+2      	; 0x98c6 <thermostat()+0x292>
    98c4:	56 cf       	rjmp	.-340    	; 0x9772 <thermostat()+0x13e>
    98c6:	cd cf       	rjmp	.-102    	; 0x9862 <thermostat()+0x22e>
    98c8:	83 30       	cpi	r24, 0x03	; 3
    98ca:	09 f0       	breq	.+2      	; 0x98ce <thermostat()+0x29a>
    98cc:	fc ce       	rjmp	.-520    	; 0x96c6 <thermostat()+0x92>
    98ce:	86 e0       	ldi	r24, 0x06	; 6
    98d0:	f8 2e       	mov	r15, r24
    98d2:	f9 ce       	rjmp	.-526    	; 0x96c6 <thermostat()+0x92>

000098d4 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
    98d4:	cf 93       	push	r28
    98d6:	df 93       	push	r29
    98d8:	fc 01       	movw	r30, r24
    98da:	eb 01       	movw	r28, r22
    98dc:	22 23       	and	r18, r18
    98de:	89 f1       	breq	.+98     	; 0x9942 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x6e>
    98e0:	88 81       	ld	r24, Y
    98e2:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <menu_slider_data_max>
    98e6:	80 81       	ld	r24, Z
    98e8:	80 93 fb 09 	sts	0x09FB, r24	; 0x8009fb <menu_slider_data_min>
    98ec:	20 93 fa 09 	sts	0x09FA, r18	; 0x8009fa <menu_slider_data_max_element>
    98f0:	a4 2f       	mov	r26, r20
    98f2:	b0 e0       	ldi	r27, 0x00	; 0
    98f4:	a3 50       	subi	r26, 0x03	; 3
    98f6:	b6 4f       	sbci	r27, 0xF6	; 246
    98f8:	ac 91       	ld	r26, X
    98fa:	a0 83       	st	Z, r26
    98fc:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <menu_slider_data_max>
    9900:	48 2f       	mov	r20, r24
    9902:	50 e0       	ldi	r21, 0x00	; 0
    9904:	a2 0f       	add	r26, r18
    9906:	bb 27       	eor	r27, r27
    9908:	bb 1f       	adc	r27, r27
    990a:	4a 17       	cp	r20, r26
    990c:	5b 07       	cpc	r21, r27
    990e:	5c f4       	brge	.+22     	; 0x9926 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x52>
    9910:	90 91 fb 09 	lds	r25, 0x09FB	; 0x8009fb <menu_slider_data_min>
    9914:	49 1b       	sub	r20, r25
    9916:	51 09       	sbc	r21, r1
    9918:	90 91 fa 09 	lds	r25, 0x09FA	; 0x8009fa <menu_slider_data_max_element>
    991c:	94 17       	cp	r25, r20
    991e:	15 06       	cpc	r1, r21
    9920:	14 f4       	brge	.+4      	; 0x9926 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x52>
    9922:	82 1b       	sub	r24, r18
    9924:	80 83       	st	Z, r24
    9926:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <menu_slider_data_max>
    992a:	90 81       	ld	r25, Z
    992c:	89 17       	cp	r24, r25
    992e:	08 f4       	brcc	.+2      	; 0x9932 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x5e>
    9930:	80 83       	st	Z, r24
    9932:	80 81       	ld	r24, Z
    9934:	82 0f       	add	r24, r18
    9936:	88 83       	st	Y, r24
    9938:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <menu_slider_data_max>
    993c:	28 17       	cp	r18, r24
    993e:	08 f0       	brcs	.+2      	; 0x9942 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x6e>
    9940:	88 83       	st	Y, r24
    9942:	df 91       	pop	r29
    9944:	cf 91       	pop	r28
    9946:	08 95       	ret

00009948 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
    9948:	2f 92       	push	r2
    994a:	3f 92       	push	r3
    994c:	4f 92       	push	r4
    994e:	5f 92       	push	r5
    9950:	6f 92       	push	r6
    9952:	7f 92       	push	r7
    9954:	8f 92       	push	r8
    9956:	9f 92       	push	r9
    9958:	af 92       	push	r10
    995a:	bf 92       	push	r11
    995c:	cf 92       	push	r12
    995e:	df 92       	push	r13
    9960:	ef 92       	push	r14
    9962:	ff 92       	push	r15
    9964:	0f 93       	push	r16
    9966:	1f 93       	push	r17
    9968:	cf 93       	push	r28
    996a:	df 93       	push	r29
    996c:	00 d0       	rcall	.+0      	; 0x996e <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    996e:	00 d0       	rcall	.+0      	; 0x9970 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x28>
    9970:	1f 92       	push	r1
    9972:	cd b7       	in	r28, 0x3d	; 61
    9974:	de b7       	in	r29, 0x3e	; 62
    9976:	1c 01       	movw	r2, r24
    9978:	2b 01       	movw	r4, r22
    997a:	3a 01       	movw	r6, r20
    997c:	3a 83       	std	Y+2, r19	; 0x02
    997e:	29 83       	std	Y+1, r18	; 0x01
    9980:	0b 83       	std	Y+3, r16	; 0x03
    9982:	9e 2c       	mov	r9, r14
    9984:	dd 82       	std	Y+5, r13	; 0x05
    9986:	cc 82       	std	Y+4, r12	; 0x04
    9988:	bf 82       	std	Y+7, r11	; 0x07
    998a:	ae 82       	std	Y+6, r10	; 0x06
    998c:	70 e0       	ldi	r23, 0x00	; 0
    998e:	60 e0       	ldi	r22, 0x00	; 0
    9990:	89 e8       	ldi	r24, 0x89	; 137
    9992:	9b e0       	ldi	r25, 0x0B	; 11
    9994:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    9998:	f1 2c       	mov	r15, r1
    999a:	e1 2c       	mov	r14, r1
    999c:	a9 80       	ldd	r10, Y+1	; 0x01
    999e:	ba 80       	ldd	r11, Y+2	; 0x02
    99a0:	a4 0c       	add	r10, r4
    99a2:	b5 1c       	adc	r11, r5
    99a4:	61 01       	movw	r12, r2
    99a6:	c6 0c       	add	r12, r6
    99a8:	d7 1c       	adc	r13, r7
    99aa:	85 01       	movw	r16, r10
    99ac:	0e 19       	sub	r16, r14
    99ae:	1f 09       	sbc	r17, r15
    99b0:	96 01       	movw	r18, r12
    99b2:	2e 19       	sub	r18, r14
    99b4:	3f 09       	sbc	r19, r15
    99b6:	a7 01       	movw	r20, r14
    99b8:	44 0d       	add	r20, r4
    99ba:	55 1d       	adc	r21, r5
    99bc:	b7 01       	movw	r22, r14
    99be:	62 0d       	add	r22, r2
    99c0:	73 1d       	adc	r23, r3
    99c2:	89 e8       	ldi	r24, 0x89	; 137
    99c4:	9b e0       	ldi	r25, 0x0B	; 11
    99c6:	0e 94 44 8e 	call	0x11c88	; 0x11c88 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    99ca:	2f ef       	ldi	r18, 0xFF	; 255
    99cc:	e2 1a       	sub	r14, r18
    99ce:	f2 0a       	sbc	r15, r18
    99d0:	43 e0       	ldi	r20, 0x03	; 3
    99d2:	e4 16       	cp	r14, r20
    99d4:	f1 04       	cpc	r15, r1
    99d6:	49 f7       	brne	.-46     	; 0x99aa <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x62>
    99d8:	09 81       	ldd	r16, Y+1	; 0x01
    99da:	1a 81       	ldd	r17, Y+2	; 0x02
    99dc:	03 50       	subi	r16, 0x03	; 3
    99de:	11 09       	sbc	r17, r1
    99e0:	73 01       	movw	r14, r6
    99e2:	53 e0       	ldi	r21, 0x03	; 3
    99e4:	e5 1a       	sub	r14, r21
    99e6:	f1 08       	sbc	r15, r1
    99e8:	81 e0       	ldi	r24, 0x01	; 1
    99ea:	88 12       	cpse	r8, r24
    99ec:	15 c0       	rjmp	.+42     	; 0x9a18 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xd0>
    99ee:	6f ef       	ldi	r22, 0xFF	; 255
    99f0:	7f ef       	ldi	r23, 0xFF	; 255
    99f2:	89 e8       	ldi	r24, 0x89	; 137
    99f4:	9b e0       	ldi	r25, 0x0B	; 11
    99f6:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    99fa:	04 0d       	add	r16, r4
    99fc:	15 1d       	adc	r17, r5
    99fe:	91 01       	movw	r18, r2
    9a00:	2e 0d       	add	r18, r14
    9a02:	3f 1d       	adc	r19, r15
    9a04:	a2 01       	movw	r20, r4
    9a06:	4d 5f       	subi	r20, 0xFD	; 253
    9a08:	5f 4f       	sbci	r21, 0xFF	; 255
    9a0a:	b1 01       	movw	r22, r2
    9a0c:	6d 5f       	subi	r22, 0xFD	; 253
    9a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    9a10:	89 e8       	ldi	r24, 0x89	; 137
    9a12:	9b e0       	ldi	r25, 0x0B	; 11
    9a14:	0e 94 bd 8d 	call	0x11b7a	; 0x11b7a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    9a18:	ec 81       	ldd	r30, Y+4	; 0x04
    9a1a:	fd 81       	ldd	r31, Y+5	; 0x05
    9a1c:	80 81       	ld	r24, Z
    9a1e:	60 e0       	ldi	r22, 0x00	; 0
    9a20:	b1 2c       	mov	r11, r1
    9a22:	a1 2c       	mov	r10, r1
    9a24:	88 23       	and	r24, r24
    9a26:	a1 f1       	breq	.+104    	; 0x9a90 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x148>
    9a28:	01 90       	ld	r0, Z+
    9a2a:	00 20       	and	r0, r0
    9a2c:	e9 f7       	brne	.-6      	; 0x9a28 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xe0>
    9a2e:	31 97       	sbiw	r30, 0x01	; 1
    9a30:	4c 81       	ldd	r20, Y+4	; 0x04
    9a32:	5d 81       	ldd	r21, Y+5	; 0x05
    9a34:	e4 1b       	sub	r30, r20
    9a36:	f5 0b       	sbc	r31, r21
_Z22show_string_size_highth():
    9a38:	8b 81       	ldd	r24, Y+3	; 0x03
    9a3a:	88 0f       	add	r24, r24
    9a3c:	5b 81       	ldd	r21, Y+3	; 0x03
    9a3e:	85 0f       	add	r24, r21
    9a40:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
    9a42:	a9 80       	ldd	r10, Y+1	; 0x01
    9a44:	ba 80       	ldd	r11, Y+2	; 0x02
    9a46:	a8 1a       	sub	r10, r24
    9a48:	b1 08       	sbc	r11, r1
    9a4a:	b6 94       	lsr	r11
    9a4c:	a7 94       	ror	r10
    9a4e:	a2 01       	movw	r20, r4
    9a50:	41 50       	subi	r20, 0x01	; 1
    9a52:	51 09       	sbc	r21, r1
    9a54:	4a 0d       	add	r20, r10
    9a56:	5b 1d       	adc	r21, r11
_Z22show_string_size_widthhh():
    9a58:	86 e0       	ldi	r24, 0x06	; 6
    9a5a:	e8 9f       	mul	r30, r24
    9a5c:	f0 01       	movw	r30, r0
    9a5e:	11 24       	eor	r1, r1
    9a60:	2b 81       	ldd	r18, Y+3	; 0x03
    9a62:	2e 9f       	mul	r18, r30
    9a64:	c0 01       	movw	r24, r0
    9a66:	2f 9f       	mul	r18, r31
    9a68:	90 0d       	add	r25, r0
    9a6a:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
    9a6c:	b3 01       	movw	r22, r6
    9a6e:	68 1b       	sub	r22, r24
    9a70:	79 0b       	sbc	r23, r25
    9a72:	76 95       	lsr	r23
    9a74:	67 95       	ror	r22
    9a76:	62 0d       	add	r22, r2
    9a78:	73 1d       	adc	r23, r3
    9a7a:	c1 2c       	mov	r12, r1
    9a7c:	ee 24       	eor	r14, r14
    9a7e:	ea 94       	dec	r14
    9a80:	fe 2c       	mov	r15, r14
    9a82:	10 e0       	ldi	r17, 0x00	; 0
    9a84:	00 e0       	ldi	r16, 0x00	; 0
    9a86:	8c 81       	ldd	r24, Y+4	; 0x04
    9a88:	9d 81       	ldd	r25, Y+5	; 0x05
    9a8a:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    9a8e:	62 e0       	ldi	r22, 0x02	; 2
    9a90:	ee 81       	ldd	r30, Y+6	; 0x06
    9a92:	ff 81       	ldd	r31, Y+7	; 0x07
    9a94:	80 81       	ld	r24, Z
    9a96:	88 23       	and	r24, r24
    9a98:	d1 f1       	breq	.+116    	; 0x9b0e <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x1c6>
    9a9a:	01 90       	ld	r0, Z+
    9a9c:	00 20       	and	r0, r0
    9a9e:	e9 f7       	brne	.-6      	; 0x9a9a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x152>
    9aa0:	9f 01       	movw	r18, r30
    9aa2:	21 50       	subi	r18, 0x01	; 1
    9aa4:	31 09       	sbc	r19, r1
    9aa6:	4e 81       	ldd	r20, Y+6	; 0x06
    9aa8:	5f 81       	ldd	r21, Y+7	; 0x07
    9aaa:	24 1b       	sub	r18, r20
    9aac:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    9aae:	89 2d       	mov	r24, r9
    9ab0:	88 0f       	add	r24, r24
    9ab2:	89 0d       	add	r24, r9
    9ab4:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
    9ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    9ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    9aba:	e8 1b       	sub	r30, r24
    9abc:	f1 09       	sbc	r31, r1
    9abe:	cf 01       	movw	r24, r30
    9ac0:	6e 5f       	subi	r22, 0xFE	; 254
    9ac2:	70 e0       	ldi	r23, 0x00	; 0
    9ac4:	0e 94 52 d3 	call	0x1a6a4	; 0x1a6a4 <__udivmodhi4>
    9ac8:	f1 e0       	ldi	r31, 0x01	; 1
    9aca:	4f 1a       	sub	r4, r31
    9acc:	51 08       	sbc	r5, r1
    9ace:	a4 0c       	add	r10, r4
    9ad0:	b5 1c       	adc	r11, r5
    9ad2:	ab 01       	movw	r20, r22
    9ad4:	4a 0d       	add	r20, r10
    9ad6:	5b 1d       	adc	r21, r11
_Z22show_string_size_widthhh():
    9ad8:	86 e0       	ldi	r24, 0x06	; 6
    9ada:	28 9f       	mul	r18, r24
    9adc:	90 01       	movw	r18, r0
    9ade:	11 24       	eor	r1, r1
    9ae0:	92 9e       	mul	r9, r18
    9ae2:	c0 01       	movw	r24, r0
    9ae4:	93 9e       	mul	r9, r19
    9ae6:	90 0d       	add	r25, r0
    9ae8:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
    9aea:	b3 01       	movw	r22, r6
    9aec:	68 1b       	sub	r22, r24
    9aee:	79 0b       	sbc	r23, r25
    9af0:	76 95       	lsr	r23
    9af2:	67 95       	ror	r22
    9af4:	62 0d       	add	r22, r2
    9af6:	73 1d       	adc	r23, r3
    9af8:	c1 2c       	mov	r12, r1
    9afa:	ee 24       	eor	r14, r14
    9afc:	ea 94       	dec	r14
    9afe:	fe 2c       	mov	r15, r14
    9b00:	10 e0       	ldi	r17, 0x00	; 0
    9b02:	00 e0       	ldi	r16, 0x00	; 0
    9b04:	29 2d       	mov	r18, r9
    9b06:	8e 81       	ldd	r24, Y+6	; 0x06
    9b08:	9f 81       	ldd	r25, Y+7	; 0x07
    9b0a:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    9b0e:	27 96       	adiw	r28, 0x07	; 7
    9b10:	0f b6       	in	r0, 0x3f	; 63
    9b12:	f8 94       	cli
    9b14:	de bf       	out	0x3e, r29	; 62
    9b16:	0f be       	out	0x3f, r0	; 63
    9b18:	cd bf       	out	0x3d, r28	; 61
    9b1a:	df 91       	pop	r29
    9b1c:	cf 91       	pop	r28
    9b1e:	1f 91       	pop	r17
    9b20:	0f 91       	pop	r16
    9b22:	ff 90       	pop	r15
    9b24:	ef 90       	pop	r14
    9b26:	df 90       	pop	r13
    9b28:	cf 90       	pop	r12
    9b2a:	bf 90       	pop	r11
    9b2c:	af 90       	pop	r10
    9b2e:	9f 90       	pop	r9
    9b30:	8f 90       	pop	r8
    9b32:	7f 90       	pop	r7
    9b34:	6f 90       	pop	r6
    9b36:	5f 90       	pop	r5
    9b38:	4f 90       	pop	r4
    9b3a:	3f 90       	pop	r3
    9b3c:	2f 90       	pop	r2
    9b3e:	08 95       	ret

00009b40 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
    9b40:	2f 92       	push	r2
    9b42:	3f 92       	push	r3
    9b44:	4f 92       	push	r4
    9b46:	5f 92       	push	r5
    9b48:	6f 92       	push	r6
    9b4a:	7f 92       	push	r7
    9b4c:	8f 92       	push	r8
    9b4e:	9f 92       	push	r9
    9b50:	af 92       	push	r10
    9b52:	bf 92       	push	r11
    9b54:	cf 92       	push	r12
    9b56:	df 92       	push	r13
    9b58:	ef 92       	push	r14
    9b5a:	ff 92       	push	r15
    9b5c:	0f 93       	push	r16
    9b5e:	1f 93       	push	r17
    9b60:	cf 93       	push	r28
    9b62:	df 93       	push	r29
    9b64:	00 d0       	rcall	.+0      	; 0x9b66 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
    9b66:	1f 92       	push	r1
    9b68:	1f 92       	push	r1
    9b6a:	cd b7       	in	r28, 0x3d	; 61
    9b6c:	de b7       	in	r29, 0x3e	; 62
    9b6e:	3c 01       	movw	r6, r24
    9b70:	1b 01       	movw	r2, r22
    9b72:	54 2e       	mov	r5, r20
    9b74:	42 2e       	mov	r4, r18
    9b76:	0b 83       	std	Y+3, r16	; 0x03
    9b78:	ec 82       	std	Y+4, r14	; 0x04
    9b7a:	88 20       	and	r8, r8
    9b7c:	41 f0       	breq	.+16     	; 0x9b8e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x4e>
    9b7e:	41 e0       	ldi	r20, 0x01	; 1
    9b80:	56 01       	movw	r10, r12
    9b82:	84 16       	cp	r8, r20
    9b84:	21 f0       	breq	.+8      	; 0x9b8e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x4e>
    9b86:	18 e1       	ldi	r17, 0x18	; 24
    9b88:	a1 2e       	mov	r10, r17
    9b8a:	06 ec       	ldi	r16, 0xC6	; 198
    9b8c:	b0 2e       	mov	r11, r16
    9b8e:	70 e0       	ldi	r23, 0x00	; 0
    9b90:	60 e0       	ldi	r22, 0x00	; 0
    9b92:	89 e8       	ldi	r24, 0x89	; 137
    9b94:	9b e0       	ldi	r25, 0x0B	; 11
    9b96:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    9b9a:	f1 2c       	mov	r15, r1
    9b9c:	e1 2c       	mov	r14, r1
    9b9e:	84 2d       	mov	r24, r4
    9ba0:	90 e0       	ldi	r25, 0x00	; 0
    9ba2:	9a 83       	std	Y+2, r25	; 0x02
    9ba4:	89 83       	std	Y+1, r24	; 0x01
    9ba6:	85 2c       	mov	r8, r5
    9ba8:	91 2c       	mov	r9, r1
    9baa:	2c 01       	movw	r4, r24
    9bac:	42 0c       	add	r4, r2
    9bae:	53 1c       	adc	r5, r3
    9bb0:	64 01       	movw	r12, r8
    9bb2:	c6 0c       	add	r12, r6
    9bb4:	d7 1c       	adc	r13, r7
    9bb6:	82 01       	movw	r16, r4
    9bb8:	0e 19       	sub	r16, r14
    9bba:	1f 09       	sbc	r17, r15
    9bbc:	96 01       	movw	r18, r12
    9bbe:	2e 19       	sub	r18, r14
    9bc0:	3f 09       	sbc	r19, r15
    9bc2:	a1 01       	movw	r20, r2
    9bc4:	4e 0d       	add	r20, r14
    9bc6:	5f 1d       	adc	r21, r15
    9bc8:	b3 01       	movw	r22, r6
    9bca:	6e 0d       	add	r22, r14
    9bcc:	7f 1d       	adc	r23, r15
    9bce:	89 e8       	ldi	r24, 0x89	; 137
    9bd0:	9b e0       	ldi	r25, 0x0B	; 11
    9bd2:	0e 94 44 8e 	call	0x11c88	; 0x11c88 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    9bd6:	9f ef       	ldi	r25, 0xFF	; 255
    9bd8:	e9 1a       	sub	r14, r25
    9bda:	f9 0a       	sbc	r15, r25
    9bdc:	e3 e0       	ldi	r30, 0x03	; 3
    9bde:	ee 16       	cp	r14, r30
    9be0:	f1 04       	cpc	r15, r1
    9be2:	49 f7       	brne	.-46     	; 0x9bb6 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x76>
    9be4:	b5 01       	movw	r22, r10
    9be6:	89 e8       	ldi	r24, 0x89	; 137
    9be8:	9b e0       	ldi	r25, 0x0B	; 11
    9bea:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    9bee:	81 01       	movw	r16, r2
    9bf0:	03 50       	subi	r16, 0x03	; 3
    9bf2:	11 09       	sbc	r17, r1
    9bf4:	49 81       	ldd	r20, Y+1	; 0x01
    9bf6:	5a 81       	ldd	r21, Y+2	; 0x02
    9bf8:	04 0f       	add	r16, r20
    9bfa:	15 1f       	adc	r17, r21
    9bfc:	93 01       	movw	r18, r6
    9bfe:	23 50       	subi	r18, 0x03	; 3
    9c00:	31 09       	sbc	r19, r1
    9c02:	28 0d       	add	r18, r8
    9c04:	39 1d       	adc	r19, r9
    9c06:	a1 01       	movw	r20, r2
    9c08:	4d 5f       	subi	r20, 0xFD	; 253
    9c0a:	5f 4f       	sbci	r21, 0xFF	; 255
    9c0c:	b3 01       	movw	r22, r6
    9c0e:	6d 5f       	subi	r22, 0xFD	; 253
    9c10:	7f 4f       	sbci	r23, 0xFF	; 255
    9c12:	89 e8       	ldi	r24, 0x89	; 137
    9c14:	9b e0       	ldi	r25, 0x0B	; 11
    9c16:	0e 94 bd 8d 	call	0x11b7a	; 0x11b7a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    9c1a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    9c1c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    9c1e:	80 81       	ld	r24, Z
    9c20:	88 23       	and	r24, r24
    9c22:	09 f4       	brne	.+2      	; 0x9c26 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xe6>
    9c24:	a4 c0       	rjmp	.+328    	; 0x9d6e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x22e>
    9c26:	81 e0       	ldi	r24, 0x01	; 1
    9c28:	b2 e0       	ldi	r27, 0x02	; 2
    9c2a:	db 2e       	mov	r13, r27
    9c2c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    9c2e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    9c30:	90 81       	ld	r25, Z
    9c32:	99 23       	and	r25, r25
    9c34:	09 f4       	brne	.+2      	; 0x9c38 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xf8>
    9c36:	9e c0       	rjmp	.+316    	; 0x9d74 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x234>
    9c38:	d3 94       	inc	r13
    9c3a:	d3 94       	inc	r13
    9c3c:	f1 e0       	ldi	r31, 0x01	; 1
    9c3e:	fd 83       	std	Y+5, r31	; 0x05
    9c40:	51 2c       	mov	r5, r1
    9c42:	41 2c       	mov	r4, r1
    9c44:	81 30       	cpi	r24, 0x01	; 1
    9c46:	d1 f5       	brne	.+116    	; 0x9cbc <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x17c>
    9c48:	eb 8d       	ldd	r30, Y+27	; 0x1b
    9c4a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    9c4c:	01 90       	ld	r0, Z+
    9c4e:	00 20       	and	r0, r0
    9c50:	e9 f7       	brne	.-6      	; 0x9c4c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x10c>
    9c52:	9f 01       	movw	r18, r30
    9c54:	21 50       	subi	r18, 0x01	; 1
    9c56:	31 09       	sbc	r19, r1
    9c58:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9c5a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9c5c:	24 1b       	sub	r18, r20
    9c5e:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    9c60:	8b 81       	ldd	r24, Y+3	; 0x03
    9c62:	88 0f       	add	r24, r24
    9c64:	5b 81       	ldd	r21, Y+3	; 0x03
    9c66:	85 0f       	add	r24, r21
    9c68:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
    9c6a:	e9 81       	ldd	r30, Y+1	; 0x01
    9c6c:	fa 81       	ldd	r31, Y+2	; 0x02
    9c6e:	e8 1b       	sub	r30, r24
    9c70:	f1 09       	sbc	r31, r1
    9c72:	cf 01       	movw	r24, r30
    9c74:	6d 2d       	mov	r22, r13
    9c76:	70 e0       	ldi	r23, 0x00	; 0
    9c78:	0e 94 66 d3 	call	0x1a6cc	; 0x1a6cc <__divmodhi4>
    9c7c:	2b 01       	movw	r4, r22
    9c7e:	a1 01       	movw	r20, r2
    9c80:	41 50       	subi	r20, 0x01	; 1
    9c82:	51 09       	sbc	r21, r1
    9c84:	46 0f       	add	r20, r22
    9c86:	57 1f       	adc	r21, r23
_Z22show_string_size_widthhh():
    9c88:	f6 e0       	ldi	r31, 0x06	; 6
    9c8a:	2f 9f       	mul	r18, r31
    9c8c:	90 01       	movw	r18, r0
    9c8e:	11 24       	eor	r1, r1
    9c90:	6b 81       	ldd	r22, Y+3	; 0x03
    9c92:	62 9f       	mul	r22, r18
    9c94:	c0 01       	movw	r24, r0
    9c96:	63 9f       	mul	r22, r19
    9c98:	90 0d       	add	r25, r0
    9c9a:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
    9c9c:	b4 01       	movw	r22, r8
    9c9e:	68 1b       	sub	r22, r24
    9ca0:	79 0b       	sbc	r23, r25
    9ca2:	76 95       	lsr	r23
    9ca4:	67 95       	ror	r22
    9ca6:	66 0d       	add	r22, r6
    9ca8:	77 1d       	adc	r23, r7
    9caa:	c1 2c       	mov	r12, r1
    9cac:	75 01       	movw	r14, r10
    9cae:	10 e0       	ldi	r17, 0x00	; 0
    9cb0:	00 e0       	ldi	r16, 0x00	; 0
    9cb2:	2b 81       	ldd	r18, Y+3	; 0x03
    9cb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    9cb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    9cb8:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    9cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    9cbe:	81 30       	cpi	r24, 0x01	; 1
    9cc0:	f1 f5       	brne	.+124    	; 0x9d3e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1fe>
    9cc2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    9cc4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    9cc6:	01 90       	ld	r0, Z+
    9cc8:	00 20       	and	r0, r0
    9cca:	e9 f7       	brne	.-6      	; 0x9cc6 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x186>
    9ccc:	9f 01       	movw	r18, r30
    9cce:	21 50       	subi	r18, 0x01	; 1
    9cd0:	31 09       	sbc	r19, r1
    9cd2:	4d 8d       	ldd	r20, Y+29	; 0x1d
    9cd4:	5e 8d       	ldd	r21, Y+30	; 0x1e
    9cd6:	24 1b       	sub	r18, r20
    9cd8:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    9cda:	8c 81       	ldd	r24, Y+4	; 0x04
    9cdc:	88 0f       	add	r24, r24
    9cde:	5c 81       	ldd	r21, Y+4	; 0x04
    9ce0:	85 0f       	add	r24, r21
    9ce2:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
    9ce4:	e9 81       	ldd	r30, Y+1	; 0x01
    9ce6:	fa 81       	ldd	r31, Y+2	; 0x02
    9ce8:	e8 1b       	sub	r30, r24
    9cea:	f1 09       	sbc	r31, r1
    9cec:	cf 01       	movw	r24, r30
    9cee:	88 0f       	add	r24, r24
    9cf0:	99 1f       	adc	r25, r25
    9cf2:	6d 2d       	mov	r22, r13
    9cf4:	70 e0       	ldi	r23, 0x00	; 0
    9cf6:	0e 94 66 d3 	call	0x1a6cc	; 0x1a6cc <__divmodhi4>
    9cfa:	f1 e0       	ldi	r31, 0x01	; 1
    9cfc:	2f 1a       	sub	r2, r31
    9cfe:	31 08       	sbc	r3, r1
    9d00:	26 0e       	add	r2, r22
    9d02:	37 1e       	adc	r3, r23
    9d04:	a1 01       	movw	r20, r2
    9d06:	44 0d       	add	r20, r4
    9d08:	55 1d       	adc	r21, r5
_Z22show_string_size_widthhh():
    9d0a:	66 e0       	ldi	r22, 0x06	; 6
    9d0c:	26 9f       	mul	r18, r22
    9d0e:	90 01       	movw	r18, r0
    9d10:	11 24       	eor	r1, r1
    9d12:	ec 81       	ldd	r30, Y+4	; 0x04
    9d14:	e2 9f       	mul	r30, r18
    9d16:	c0 01       	movw	r24, r0
    9d18:	e3 9f       	mul	r30, r19
    9d1a:	90 0d       	add	r25, r0
    9d1c:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
    9d1e:	b4 01       	movw	r22, r8
    9d20:	68 1b       	sub	r22, r24
    9d22:	79 0b       	sbc	r23, r25
    9d24:	76 95       	lsr	r23
    9d26:	67 95       	ror	r22
    9d28:	66 0d       	add	r22, r6
    9d2a:	77 1d       	adc	r23, r7
    9d2c:	c1 2c       	mov	r12, r1
    9d2e:	75 01       	movw	r14, r10
    9d30:	10 e0       	ldi	r17, 0x00	; 0
    9d32:	00 e0       	ldi	r16, 0x00	; 0
    9d34:	2e 2f       	mov	r18, r30
    9d36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9d38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9d3a:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    9d3e:	0f 90       	pop	r0
    9d40:	0f 90       	pop	r0
    9d42:	0f 90       	pop	r0
    9d44:	0f 90       	pop	r0
    9d46:	0f 90       	pop	r0
    9d48:	df 91       	pop	r29
    9d4a:	cf 91       	pop	r28
    9d4c:	1f 91       	pop	r17
    9d4e:	0f 91       	pop	r16
    9d50:	ff 90       	pop	r15
    9d52:	ef 90       	pop	r14
    9d54:	df 90       	pop	r13
    9d56:	cf 90       	pop	r12
    9d58:	bf 90       	pop	r11
    9d5a:	af 90       	pop	r10
    9d5c:	9f 90       	pop	r9
    9d5e:	8f 90       	pop	r8
    9d60:	7f 90       	pop	r7
    9d62:	6f 90       	pop	r6
    9d64:	5f 90       	pop	r5
    9d66:	4f 90       	pop	r4
    9d68:	3f 90       	pop	r3
    9d6a:	2f 90       	pop	r2
    9d6c:	08 95       	ret
    9d6e:	80 e0       	ldi	r24, 0x00	; 0
    9d70:	d1 2c       	mov	r13, r1
    9d72:	5c cf       	rjmp	.-328    	; 0x9c2c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xec>
    9d74:	1d 82       	std	Y+5, r1	; 0x05
    9d76:	64 cf       	rjmp	.-312    	; 0x9c40 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x100>

00009d78 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z15button_switch_1jjhhhhPcS_():
    9d78:	2f 92       	push	r2
    9d7a:	3f 92       	push	r3
    9d7c:	4f 92       	push	r4
    9d7e:	5f 92       	push	r5
    9d80:	6f 92       	push	r6
    9d82:	7f 92       	push	r7
    9d84:	8f 92       	push	r8
    9d86:	9f 92       	push	r9
    9d88:	af 92       	push	r10
    9d8a:	bf 92       	push	r11
    9d8c:	cf 92       	push	r12
    9d8e:	df 92       	push	r13
    9d90:	ef 92       	push	r14
    9d92:	ff 92       	push	r15
    9d94:	0f 93       	push	r16
    9d96:	1f 93       	push	r17
    9d98:	cf 93       	push	r28
    9d9a:	df 93       	push	r29
    9d9c:	00 d0       	rcall	.+0      	; 0x9d9e <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x26>
    9d9e:	1f 92       	push	r1
    9da0:	1f 92       	push	r1
    9da2:	cd b7       	in	r28, 0x3d	; 61
    9da4:	de b7       	in	r29, 0x3e	; 62
    9da6:	4c 01       	movw	r8, r24
    9da8:	3b 01       	movw	r6, r22
    9daa:	44 2e       	mov	r4, r20
    9dac:	f2 2e       	mov	r15, r18
    9dae:	09 83       	std	Y+1, r16	; 0x01
    9db0:	db 82       	std	Y+3, r13	; 0x03
    9db2:	ca 82       	std	Y+2, r12	; 0x02
    9db4:	15 01       	movw	r2, r10
    9db6:	70 e0       	ldi	r23, 0x00	; 0
    9db8:	60 e0       	ldi	r22, 0x00	; 0
    9dba:	89 e8       	ldi	r24, 0x89	; 137
    9dbc:	9b e0       	ldi	r25, 0x0B	; 11
    9dbe:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    9dc2:	1d 82       	std	Y+5, r1	; 0x05
    9dc4:	1c 82       	std	Y+4, r1	; 0x04
    9dc6:	af 2c       	mov	r10, r15
    9dc8:	b1 2c       	mov	r11, r1
    9dca:	65 01       	movw	r12, r10
    9dcc:	c6 0c       	add	r12, r6
    9dce:	d7 1c       	adc	r13, r7
    9dd0:	51 2c       	mov	r5, r1
    9dd2:	72 01       	movw	r14, r4
    9dd4:	e8 0c       	add	r14, r8
    9dd6:	f9 1c       	adc	r15, r9
    9dd8:	86 01       	movw	r16, r12
    9dda:	8c 81       	ldd	r24, Y+4	; 0x04
    9ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    9dde:	08 1b       	sub	r16, r24
    9de0:	19 0b       	sbc	r17, r25
    9de2:	97 01       	movw	r18, r14
    9de4:	28 1b       	sub	r18, r24
    9de6:	39 0b       	sbc	r19, r25
    9de8:	ac 01       	movw	r20, r24
    9dea:	46 0d       	add	r20, r6
    9dec:	57 1d       	adc	r21, r7
    9dee:	bc 01       	movw	r22, r24
    9df0:	68 0d       	add	r22, r8
    9df2:	79 1d       	adc	r23, r9
    9df4:	89 e8       	ldi	r24, 0x89	; 137
    9df6:	9b e0       	ldi	r25, 0x0B	; 11
    9df8:	0e 94 44 8e 	call	0x11c88	; 0x11c88 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    9dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    9dfe:	9d 81       	ldd	r25, Y+5	; 0x05
    9e00:	01 96       	adiw	r24, 0x01	; 1
    9e02:	9d 83       	std	Y+5, r25	; 0x05
    9e04:	8c 83       	std	Y+4, r24	; 0x04
    9e06:	03 97       	sbiw	r24, 0x03	; 3
    9e08:	39 f7       	brne	.-50     	; 0x9dd8 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x60>
    9e0a:	ea 81       	ldd	r30, Y+2	; 0x02
    9e0c:	fb 81       	ldd	r31, Y+3	; 0x03
    9e0e:	01 90       	ld	r0, Z+
    9e10:	00 20       	and	r0, r0
    9e12:	e9 f7       	brne	.-6      	; 0x9e0e <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x96>
    9e14:	31 97       	sbiw	r30, 0x01	; 1
    9e16:	8a 81       	ldd	r24, Y+2	; 0x02
    9e18:	9b 81       	ldd	r25, Y+3	; 0x03
    9e1a:	e8 1b       	sub	r30, r24
    9e1c:	f9 0b       	sbc	r31, r25
_Z22show_string_size_highth():
    9e1e:	89 81       	ldd	r24, Y+1	; 0x01
    9e20:	88 0f       	add	r24, r24
    9e22:	99 81       	ldd	r25, Y+1	; 0x01
    9e24:	89 0f       	add	r24, r25
    9e26:	88 0f       	add	r24, r24
_Z15button_switch_1jjhhhhPcS_():
    9e28:	a5 01       	movw	r20, r10
    9e2a:	48 1b       	sub	r20, r24
    9e2c:	51 09       	sbc	r21, r1
    9e2e:	57 ff       	sbrs	r21, 7
    9e30:	02 c0       	rjmp	.+4      	; 0x9e36 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0xbe>
    9e32:	4d 5f       	subi	r20, 0xFD	; 253
    9e34:	5f 4f       	sbci	r21, 0xFF	; 255
    9e36:	55 95       	asr	r21
    9e38:	47 95       	ror	r20
    9e3a:	55 95       	asr	r21
    9e3c:	47 95       	ror	r20
    9e3e:	46 0d       	add	r20, r6
    9e40:	57 2d       	mov	r21, r7
    9e42:	51 1d       	adc	r21, r1
_Z22show_string_size_widthhh():
    9e44:	26 e0       	ldi	r18, 0x06	; 6
    9e46:	e2 9f       	mul	r30, r18
    9e48:	f0 01       	movw	r30, r0
    9e4a:	11 24       	eor	r1, r1
    9e4c:	29 81       	ldd	r18, Y+1	; 0x01
    9e4e:	2e 9f       	mul	r18, r30
    9e50:	c0 01       	movw	r24, r0
    9e52:	2f 9f       	mul	r18, r31
    9e54:	90 0d       	add	r25, r0
    9e56:	11 24       	eor	r1, r1
_Z15button_switch_1jjhhhhPcS_():
    9e58:	99 27       	eor	r25, r25
    9e5a:	b2 01       	movw	r22, r4
    9e5c:	68 1b       	sub	r22, r24
    9e5e:	79 0b       	sbc	r23, r25
    9e60:	77 ff       	sbrs	r23, 7
    9e62:	02 c0       	rjmp	.+4      	; 0x9e68 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0xf0>
    9e64:	6f 5f       	subi	r22, 0xFF	; 255
    9e66:	7f 4f       	sbci	r23, 0xFF	; 255
    9e68:	75 95       	asr	r23
    9e6a:	67 95       	ror	r22
    9e6c:	68 0d       	add	r22, r8
    9e6e:	79 2d       	mov	r23, r9
    9e70:	71 1d       	adc	r23, r1
    9e72:	c1 2c       	mov	r12, r1
    9e74:	ee 24       	eor	r14, r14
    9e76:	ea 94       	dec	r14
    9e78:	fe 2c       	mov	r15, r14
    9e7a:	10 e0       	ldi	r17, 0x00	; 0
    9e7c:	00 e0       	ldi	r16, 0x00	; 0
    9e7e:	29 81       	ldd	r18, Y+1	; 0x01
    9e80:	8a 81       	ldd	r24, Y+2	; 0x02
    9e82:	9b 81       	ldd	r25, Y+3	; 0x03
    9e84:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    9e88:	f1 01       	movw	r30, r2
    9e8a:	01 90       	ld	r0, Z+
    9e8c:	00 20       	and	r0, r0
    9e8e:	e9 f7       	brne	.-6      	; 0x9e8a <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x112>
    9e90:	31 97       	sbiw	r30, 0x01	; 1
    9e92:	e2 19       	sub	r30, r2
    9e94:	f3 09       	sbc	r31, r3
    9e96:	a5 01       	movw	r20, r10
    9e98:	46 50       	subi	r20, 0x06	; 6
    9e9a:	51 09       	sbc	r21, r1
    9e9c:	57 ff       	sbrs	r21, 7
    9e9e:	02 c0       	rjmp	.+4      	; 0x9ea4 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x12c>
    9ea0:	4d 5f       	subi	r20, 0xFD	; 253
    9ea2:	5f 4f       	sbci	r21, 0xFF	; 255
    9ea4:	55 95       	asr	r21
    9ea6:	47 95       	ror	r20
    9ea8:	55 95       	asr	r21
    9eaa:	47 95       	ror	r20
    9eac:	55 27       	eor	r21, r21
    9eae:	ca 01       	movw	r24, r20
    9eb0:	88 0f       	add	r24, r24
    9eb2:	99 1f       	adc	r25, r25
    9eb4:	48 0f       	add	r20, r24
    9eb6:	59 1f       	adc	r21, r25
    9eb8:	46 0d       	add	r20, r6
    9eba:	57 1d       	adc	r21, r7
_Z22show_string_size_widthhh():
    9ebc:	86 e0       	ldi	r24, 0x06	; 6
    9ebe:	e8 9f       	mul	r30, r24
    9ec0:	f0 01       	movw	r30, r0
    9ec2:	11 24       	eor	r1, r1
_Z15button_switch_1jjhhhhPcS_():
    9ec4:	ff 27       	eor	r31, r31
    9ec6:	b2 01       	movw	r22, r4
    9ec8:	6e 1b       	sub	r22, r30
    9eca:	7f 0b       	sbc	r23, r31
    9ecc:	77 ff       	sbrs	r23, 7
    9ece:	02 c0       	rjmp	.+4      	; 0x9ed4 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x15c>
    9ed0:	6f 5f       	subi	r22, 0xFF	; 255
    9ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    9ed4:	75 95       	asr	r23
    9ed6:	67 95       	ror	r22
    9ed8:	68 0d       	add	r22, r8
    9eda:	79 2d       	mov	r23, r9
    9edc:	71 1d       	adc	r23, r1
    9ede:	c1 2c       	mov	r12, r1
    9ee0:	ee 24       	eor	r14, r14
    9ee2:	ea 94       	dec	r14
    9ee4:	fe 2c       	mov	r15, r14
    9ee6:	10 e0       	ldi	r17, 0x00	; 0
    9ee8:	00 e0       	ldi	r16, 0x00	; 0
    9eea:	21 e0       	ldi	r18, 0x01	; 1
    9eec:	c1 01       	movw	r24, r2
    9eee:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    9ef2:	0f 90       	pop	r0
    9ef4:	0f 90       	pop	r0
    9ef6:	0f 90       	pop	r0
    9ef8:	0f 90       	pop	r0
    9efa:	0f 90       	pop	r0
    9efc:	df 91       	pop	r29
    9efe:	cf 91       	pop	r28
    9f00:	1f 91       	pop	r17
    9f02:	0f 91       	pop	r16
    9f04:	ff 90       	pop	r15
    9f06:	ef 90       	pop	r14
    9f08:	df 90       	pop	r13
    9f0a:	cf 90       	pop	r12
    9f0c:	bf 90       	pop	r11
    9f0e:	af 90       	pop	r10
    9f10:	9f 90       	pop	r9
    9f12:	8f 90       	pop	r8
    9f14:	7f 90       	pop	r7
    9f16:	6f 90       	pop	r6
    9f18:	5f 90       	pop	r5
    9f1a:	4f 90       	pop	r4
    9f1c:	3f 90       	pop	r3
    9f1e:	2f 90       	pop	r2
    9f20:	08 95       	ret

00009f22 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
    9f22:	2f 92       	push	r2
    9f24:	3f 92       	push	r3
    9f26:	4f 92       	push	r4
    9f28:	5f 92       	push	r5
    9f2a:	6f 92       	push	r6
    9f2c:	7f 92       	push	r7
    9f2e:	8f 92       	push	r8
    9f30:	9f 92       	push	r9
    9f32:	af 92       	push	r10
    9f34:	bf 92       	push	r11
    9f36:	cf 92       	push	r12
    9f38:	df 92       	push	r13
    9f3a:	ef 92       	push	r14
    9f3c:	ff 92       	push	r15
    9f3e:	0f 93       	push	r16
    9f40:	1f 93       	push	r17
    9f42:	cf 93       	push	r28
    9f44:	df 93       	push	r29
    9f46:	00 d0       	rcall	.+0      	; 0x9f48 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x26>
    9f48:	1f 92       	push	r1
    9f4a:	1f 92       	push	r1
    9f4c:	cd b7       	in	r28, 0x3d	; 61
    9f4e:	de b7       	in	r29, 0x3e	; 62
    9f50:	6c 01       	movw	r12, r24
    9f52:	5b 01       	movw	r10, r22
    9f54:	1a 01       	movw	r2, r20
    9f56:	29 01       	movw	r4, r18
    9f58:	90 2e       	mov	r9, r16
    9f5a:	8e 2c       	mov	r8, r14
    9f5c:	70 e0       	ldi	r23, 0x00	; 0
    9f5e:	60 e0       	ldi	r22, 0x00	; 0
    9f60:	89 e8       	ldi	r24, 0x89	; 137
    9f62:	9b e0       	ldi	r25, 0x0B	; 11
    9f64:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    9f68:	f1 2c       	mov	r15, r1
    9f6a:	e1 2c       	mov	r14, r1
    9f6c:	35 01       	movw	r6, r10
    9f6e:	64 0c       	add	r6, r4
    9f70:	75 1c       	adc	r7, r5
    9f72:	c6 01       	movw	r24, r12
    9f74:	82 0d       	add	r24, r2
    9f76:	93 1d       	adc	r25, r3
    9f78:	9d 83       	std	Y+5, r25	; 0x05
    9f7a:	8c 83       	std	Y+4, r24	; 0x04
    9f7c:	83 01       	movw	r16, r6
    9f7e:	0e 19       	sub	r16, r14
    9f80:	1f 09       	sbc	r17, r15
    9f82:	2c 81       	ldd	r18, Y+4	; 0x04
    9f84:	3d 81       	ldd	r19, Y+5	; 0x05
    9f86:	2e 19       	sub	r18, r14
    9f88:	3f 09       	sbc	r19, r15
    9f8a:	a5 01       	movw	r20, r10
    9f8c:	4e 0d       	add	r20, r14
    9f8e:	5f 1d       	adc	r21, r15
    9f90:	b6 01       	movw	r22, r12
    9f92:	6e 0d       	add	r22, r14
    9f94:	7f 1d       	adc	r23, r15
    9f96:	89 e8       	ldi	r24, 0x89	; 137
    9f98:	9b e0       	ldi	r25, 0x0B	; 11
    9f9a:	0e 94 44 8e 	call	0x11c88	; 0x11c88 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    9f9e:	9f ef       	ldi	r25, 0xFF	; 255
    9fa0:	e9 1a       	sub	r14, r25
    9fa2:	f9 0a       	sbc	r15, r25
    9fa4:	23 e0       	ldi	r18, 0x03	; 3
    9fa6:	e2 16       	cp	r14, r18
    9fa8:	f1 04       	cpc	r15, r1
    9faa:	41 f7       	brne	.-48     	; 0x9f7c <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x5a>
    9fac:	89 82       	std	Y+1, r8	; 0x01
    9fae:	1a 82       	std	Y+2, r1	; 0x02
    9fb0:	ce 01       	movw	r24, r28
    9fb2:	01 96       	adiw	r24, 0x01	; 1
    9fb4:	fc 01       	movw	r30, r24
    9fb6:	01 90       	ld	r0, Z+
    9fb8:	00 20       	and	r0, r0
    9fba:	e9 f7       	brne	.-6      	; 0x9fb6 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x94>
    9fbc:	31 97       	sbiw	r30, 0x01	; 1
    9fbe:	e8 1b       	sub	r30, r24
    9fc0:	f9 0b       	sbc	r31, r25
_Z22show_string_size_highth():
    9fc2:	29 2d       	mov	r18, r9
    9fc4:	22 0f       	add	r18, r18
    9fc6:	29 0d       	add	r18, r9
    9fc8:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
    9fca:	a2 01       	movw	r20, r4
    9fcc:	42 1b       	sub	r20, r18
    9fce:	51 09       	sbc	r21, r1
    9fd0:	56 95       	lsr	r21
    9fd2:	47 95       	ror	r20
    9fd4:	56 95       	lsr	r21
    9fd6:	47 95       	ror	r20
    9fd8:	4a 0d       	add	r20, r10
    9fda:	5b 2d       	mov	r21, r11
    9fdc:	51 1d       	adc	r21, r1
_Z22show_string_size_widthhh():
    9fde:	26 e0       	ldi	r18, 0x06	; 6
    9fe0:	e2 9f       	mul	r30, r18
    9fe2:	f0 01       	movw	r30, r0
    9fe4:	11 24       	eor	r1, r1
    9fe6:	9e 9e       	mul	r9, r30
    9fe8:	90 01       	movw	r18, r0
    9fea:	9f 9e       	mul	r9, r31
    9fec:	30 0d       	add	r19, r0
    9fee:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
    9ff0:	33 27       	eor	r19, r19
    9ff2:	b1 01       	movw	r22, r2
    9ff4:	62 1b       	sub	r22, r18
    9ff6:	73 0b       	sbc	r23, r19
    9ff8:	76 95       	lsr	r23
    9ffa:	67 95       	ror	r22
    9ffc:	6c 0d       	add	r22, r12
    9ffe:	7d 2d       	mov	r23, r13
    a000:	71 1d       	adc	r23, r1
    a002:	c1 2c       	mov	r12, r1
    a004:	ee 24       	eor	r14, r14
    a006:	ea 94       	dec	r14
    a008:	fe 2c       	mov	r15, r14
    a00a:	10 e0       	ldi	r17, 0x00	; 0
    a00c:	00 e0       	ldi	r16, 0x00	; 0
    a00e:	29 2d       	mov	r18, r9
    a010:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a014:	0f 90       	pop	r0
    a016:	0f 90       	pop	r0
    a018:	0f 90       	pop	r0
    a01a:	0f 90       	pop	r0
    a01c:	0f 90       	pop	r0
    a01e:	df 91       	pop	r29
    a020:	cf 91       	pop	r28
    a022:	1f 91       	pop	r17
    a024:	0f 91       	pop	r16
    a026:	ff 90       	pop	r15
    a028:	ef 90       	pop	r14
    a02a:	df 90       	pop	r13
    a02c:	cf 90       	pop	r12
    a02e:	bf 90       	pop	r11
    a030:	af 90       	pop	r10
    a032:	9f 90       	pop	r9
    a034:	8f 90       	pop	r8
    a036:	7f 90       	pop	r7
    a038:	6f 90       	pop	r6
    a03a:	5f 90       	pop	r5
    a03c:	4f 90       	pop	r4
    a03e:	3f 90       	pop	r3
    a040:	2f 90       	pop	r2
    a042:	08 95       	ret

0000a044 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
    a044:	ef 92       	push	r14
    a046:	ff 92       	push	r15
    a048:	0f 93       	push	r16
    a04a:	1f 93       	push	r17
_Z10is_pressediiiiii():
    a04c:	80 17       	cp	r24, r16
    a04e:	91 07       	cpc	r25, r17
    a050:	74 f4       	brge	.+28     	; 0xa06e <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
    a052:	84 0f       	add	r24, r20
    a054:	95 1f       	adc	r25, r21
_Z10is_pressediiiiii():
    a056:	08 17       	cp	r16, r24
    a058:	19 07       	cpc	r17, r25
    a05a:	4c f4       	brge	.+18     	; 0xa06e <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
    a05c:	6e 15       	cp	r22, r14
    a05e:	7f 05       	cpc	r23, r15
    a060:	34 f4       	brge	.+12     	; 0xa06e <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
    a062:	62 0f       	add	r22, r18
    a064:	73 1f       	adc	r23, r19
_Z10is_pressediiiiii():
    a066:	81 e0       	ldi	r24, 0x01	; 1
    a068:	e6 16       	cp	r14, r22
    a06a:	f7 06       	cpc	r15, r23
    a06c:	0c f0       	brlt	.+2      	; 0xa070 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
    a06e:	80 e0       	ldi	r24, 0x00	; 0
    a070:	1f 91       	pop	r17
    a072:	0f 91       	pop	r16
    a074:	ff 90       	pop	r15
    a076:	ef 90       	pop	r14
    a078:	08 95       	ret

0000a07a <draw_menu(bool)>:
_Z9draw_menub():
    a07a:	2f 92       	push	r2
    a07c:	3f 92       	push	r3
    a07e:	4f 92       	push	r4
    a080:	5f 92       	push	r5
    a082:	6f 92       	push	r6
    a084:	7f 92       	push	r7
    a086:	8f 92       	push	r8
    a088:	9f 92       	push	r9
    a08a:	af 92       	push	r10
    a08c:	bf 92       	push	r11
    a08e:	cf 92       	push	r12
    a090:	df 92       	push	r13
    a092:	ef 92       	push	r14
    a094:	ff 92       	push	r15
    a096:	0f 93       	push	r16
    a098:	1f 93       	push	r17
    a09a:	cf 93       	push	r28
    a09c:	df 93       	push	r29
    a09e:	cd b7       	in	r28, 0x3d	; 61
    a0a0:	de b7       	in	r29, 0x3e	; 62
    a0a2:	c3 5e       	subi	r28, 0xE3	; 227
    a0a4:	d1 09       	sbc	r29, r1
    a0a6:	0f b6       	in	r0, 0x3f	; 63
    a0a8:	f8 94       	cli
    a0aa:	de bf       	out	0x3e, r29	; 62
    a0ac:	0f be       	out	0x3f, r0	; 63
    a0ae:	cd bf       	out	0x3d, r28	; 61
    a0b0:	f8 2e       	mov	r15, r24
    a0b2:	ce 01       	movw	r24, r28
    a0b4:	8f 54       	subi	r24, 0x4F	; 79
    a0b6:	9f 4f       	sbci	r25, 0xFF	; 255
    a0b8:	0e 94 51 36 	call	0x6ca2	; 0x6ca2 <MenuHistoryGetMenu(unsigned char*)>
    a0bc:	3c 01       	movw	r6, r24
    a0be:	60 e0       	ldi	r22, 0x00	; 0
    a0c0:	87 e6       	ldi	r24, 0x67	; 103
    a0c2:	9b e0       	ldi	r25, 0x0B	; 11
    a0c4:	0e 94 d8 a2 	call	0x145b0	; 0x145b0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)>
    a0c8:	87 e6       	ldi	r24, 0x67	; 103
    a0ca:	9b e0       	ldi	r25, 0x0B	; 11
    a0cc:	0e 94 ab a3 	call	0x14756	; 0x14756 <LCDWIKI_TOUCH::TP_Get_State() const>
    a0d0:	87 ff       	sbrs	r24, 7
    a0d2:	98 c1       	rjmp	.+816    	; 0xa404 <draw_menu(bool)+0x38a>
    a0d4:	f1 10       	cpse	r15, r1
    a0d6:	96 c1       	rjmp	.+812    	; 0xa404 <draw_menu(bool)+0x38a>
    a0d8:	20 91 6b 0b 	lds	r18, 0x0B6B	; 0x800b6b <my_touch+0x4>
    a0dc:	30 91 6c 0b 	lds	r19, 0x0B6C	; 0x800b6c <my_touch+0x5>
    a0e0:	ce 53       	subi	r28, 0x3E	; 62
    a0e2:	df 4f       	sbci	r29, 0xFF	; 255
    a0e4:	39 83       	std	Y+1, r19	; 0x01
    a0e6:	28 83       	st	Y, r18
    a0e8:	c2 5c       	subi	r28, 0xC2	; 194
    a0ea:	d0 40       	sbci	r29, 0x00	; 0
    a0ec:	40 91 6d 0b 	lds	r20, 0x0B6D	; 0x800b6d <my_touch+0x6>
    a0f0:	50 91 6e 0b 	lds	r21, 0x0B6E	; 0x800b6e <my_touch+0x7>
    a0f4:	cc 53       	subi	r28, 0x3C	; 60
    a0f6:	df 4f       	sbci	r29, 0xFF	; 255
    a0f8:	59 83       	std	Y+1, r21	; 0x01
    a0fa:	48 83       	st	Y, r20
    a0fc:	c4 5c       	subi	r28, 0xC4	; 196
    a0fe:	d0 40       	sbci	r29, 0x00	; 0
    a100:	83 01       	movw	r16, r6
    a102:	0a 53       	subi	r16, 0x3A	; 58
    a104:	1d 4f       	sbci	r17, 0xFD	; 253
    a106:	f8 01       	movw	r30, r16
    a108:	65 91       	lpm	r22, Z+
    a10a:	74 91       	lpm	r23, Z
    a10c:	ca 54       	subi	r28, 0x4A	; 74
    a10e:	df 4f       	sbci	r29, 0xFF	; 255
    a110:	79 83       	std	Y+1, r23	; 0x01
    a112:	68 83       	st	Y, r22
    a114:	c6 5b       	subi	r28, 0xB6	; 182
    a116:	d0 40       	sbci	r29, 0x00	; 0
    a118:	63 01       	movw	r12, r6
    a11a:	78 e3       	ldi	r23, 0x38	; 56
    a11c:	c7 1a       	sub	r12, r23
    a11e:	7d ef       	ldi	r23, 0xFD	; 253
    a120:	d7 0a       	sbc	r13, r23
    a122:	f6 01       	movw	r30, r12
    a124:	85 91       	lpm	r24, Z+
    a126:	94 91       	lpm	r25, Z
    a128:	c8 54       	subi	r28, 0x48	; 72
    a12a:	df 4f       	sbci	r29, 0xFF	; 255
    a12c:	99 83       	std	Y+1, r25	; 0x01
    a12e:	88 83       	st	Y, r24
    a130:	c8 5b       	subi	r28, 0xB8	; 184
    a132:	d0 40       	sbci	r29, 0x00	; 0
    a134:	f3 01       	movw	r30, r6
    a136:	ee 52       	subi	r30, 0x2E	; 46
    a138:	fd 4f       	sbci	r31, 0xFD	; 253
    a13a:	25 91       	lpm	r18, Z+
    a13c:	34 91       	lpm	r19, Z
    a13e:	53 01       	movw	r10, r6
    a140:	9b e3       	ldi	r25, 0x3B	; 59
    a142:	a9 1a       	sub	r10, r25
    a144:	9d ef       	ldi	r25, 0xFD	; 253
    a146:	b9 0a       	sbc	r11, r25
    a148:	f5 01       	movw	r30, r10
    a14a:	84 91       	lpm	r24, Z
    a14c:	cf 54       	subi	r28, 0x4F	; 79
    a14e:	df 4f       	sbci	r29, 0xFF	; 255
    a150:	68 81       	ld	r22, Y
    a152:	c1 5b       	subi	r28, 0xB1	; 177
    a154:	d0 40       	sbci	r29, 0x00	; 0
    a156:	70 e0       	ldi	r23, 0x00	; 0
    a158:	4f ef       	ldi	r20, 0xFF	; 255
    a15a:	90 e0       	ldi	r25, 0x00	; 0
    a15c:	f9 01       	movw	r30, r18
    a15e:	19 95       	eicall
    a160:	91 2c       	mov	r9, r1
    a162:	88 23       	and	r24, r24
    a164:	11 f0       	breq	.+4      	; 0xa16a <draw_menu(bool)+0xf0>
    a166:	99 24       	eor	r9, r9
    a168:	93 94       	inc	r9
    a16a:	f3 01       	movw	r30, r6
    a16c:	ec 52       	subi	r30, 0x2C	; 44
    a16e:	fd 4f       	sbci	r31, 0xFD	; 253
    a170:	25 91       	lpm	r18, Z+
    a172:	34 91       	lpm	r19, Z
    a174:	f5 01       	movw	r30, r10
    a176:	84 91       	lpm	r24, Z
    a178:	cf 54       	subi	r28, 0x4F	; 79
    a17a:	df 4f       	sbci	r29, 0xFF	; 255
    a17c:	68 81       	ld	r22, Y
    a17e:	c1 5b       	subi	r28, 0xB1	; 177
    a180:	d0 40       	sbci	r29, 0x00	; 0
    a182:	70 e0       	ldi	r23, 0x00	; 0
    a184:	4f ef       	ldi	r20, 0xFF	; 255
    a186:	90 e0       	ldi	r25, 0x00	; 0
    a188:	f9 01       	movw	r30, r18
    a18a:	19 95       	eicall
    a18c:	81 11       	cpse	r24, r1
    a18e:	47 c1       	rjmp	.+654    	; 0xa41e <draw_menu(bool)+0x3a4>
    a190:	e8 94       	clt
    a192:	91 f8       	bld	r9, 1
    a194:	f3 01       	movw	r30, r6
    a196:	ea 52       	subi	r30, 0x2A	; 42
    a198:	fd 4f       	sbci	r31, 0xFD	; 253
    a19a:	25 91       	lpm	r18, Z+
    a19c:	34 91       	lpm	r19, Z
    a19e:	f5 01       	movw	r30, r10
    a1a0:	84 91       	lpm	r24, Z
    a1a2:	cf 54       	subi	r28, 0x4F	; 79
    a1a4:	df 4f       	sbci	r29, 0xFF	; 255
    a1a6:	68 81       	ld	r22, Y
    a1a8:	c1 5b       	subi	r28, 0xB1	; 177
    a1aa:	d0 40       	sbci	r29, 0x00	; 0
    a1ac:	70 e0       	ldi	r23, 0x00	; 0
    a1ae:	4f ef       	ldi	r20, 0xFF	; 255
    a1b0:	90 e0       	ldi	r25, 0x00	; 0
    a1b2:	f9 01       	movw	r30, r18
    a1b4:	19 95       	eicall
    a1b6:	81 11       	cpse	r24, r1
    a1b8:	35 c1       	rjmp	.+618    	; 0xa424 <draw_menu(bool)+0x3aa>
    a1ba:	89 2d       	mov	r24, r9
    a1bc:	8b 7f       	andi	r24, 0xFB	; 251
    a1be:	f1 10       	cpse	r15, r1
    a1c0:	34 c1       	rjmp	.+616    	; 0xa42a <draw_menu(bool)+0x3b0>
    a1c2:	87 7f       	andi	r24, 0xF7	; 247
    a1c4:	cd 52       	subi	r28, 0x2D	; 45
    a1c6:	df 4f       	sbci	r29, 0xFF	; 255
    a1c8:	88 83       	st	Y, r24
    a1ca:	c3 5d       	subi	r28, 0xD3	; 211
    a1cc:	d0 40       	sbci	r29, 0x00	; 0
    a1ce:	f3 01       	movw	r30, r6
    a1d0:	ef 52       	subi	r30, 0x2F	; 47
    a1d2:	fd 4f       	sbci	r31, 0xFD	; 253
    a1d4:	84 91       	lpm	r24, Z
    a1d6:	cd 52       	subi	r28, 0x2D	; 45
    a1d8:	df 4f       	sbci	r29, 0xFF	; 255
    a1da:	68 81       	ld	r22, Y
    a1dc:	c3 5d       	subi	r28, 0xD3	; 211
    a1de:	d0 40       	sbci	r29, 0x00	; 0
    a1e0:	0e 94 32 36 	call	0x6c64	; 0x6c64 <enable_redraw(unsigned char, unsigned char)>
    a1e4:	88 23       	and	r24, r24
    a1e6:	e1 f0       	breq	.+56     	; 0xa220 <draw_menu(bool)+0x1a6>
    a1e8:	f3 01       	movw	r30, r6
    a1ea:	65 91       	lpm	r22, Z+
    a1ec:	74 91       	lpm	r23, Z
    a1ee:	ce 01       	movw	r24, r28
    a1f0:	01 96       	adiw	r24, 0x01	; 1
    a1f2:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    a1f6:	f6 01       	movw	r30, r12
    a1f8:	45 91       	lpm	r20, Z+
    a1fa:	54 91       	lpm	r21, Z
    a1fc:	f8 01       	movw	r30, r16
    a1fe:	65 91       	lpm	r22, Z+
    a200:	74 91       	lpm	r23, Z
    a202:	4b 5f       	subi	r20, 0xFB	; 251
    a204:	5f 4f       	sbci	r21, 0xFF	; 255
    a206:	6b 5f       	subi	r22, 0xFB	; 251
    a208:	7f 4f       	sbci	r23, 0xFF	; 255
    a20a:	c1 2c       	mov	r12, r1
    a20c:	ee 24       	eor	r14, r14
    a20e:	ea 94       	dec	r14
    a210:	fe 2c       	mov	r15, r14
    a212:	10 e0       	ldi	r17, 0x00	; 0
    a214:	00 e0       	ldi	r16, 0x00	; 0
    a216:	22 e0       	ldi	r18, 0x02	; 2
    a218:	ce 01       	movw	r24, r28
    a21a:	01 96       	adiw	r24, 0x01	; 1
    a21c:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a220:	91 2c       	mov	r9, r1
    a222:	c6 53       	subi	r28, 0x36	; 54
    a224:	df 4f       	sbci	r29, 0xFF	; 255
    a226:	18 82       	st	Y, r1
    a228:	ca 5c       	subi	r28, 0xCA	; 202
    a22a:	d0 40       	sbci	r29, 0x00	; 0
    a22c:	93 01       	movw	r18, r6
    a22e:	23 54       	subi	r18, 0x43	; 67
    a230:	3d 4f       	sbci	r19, 0xFD	; 253
    a232:	c6 54       	subi	r28, 0x46	; 70
    a234:	df 4f       	sbci	r29, 0xFF	; 255
    a236:	39 83       	std	Y+1, r19	; 0x01
    a238:	28 83       	st	Y, r18
    a23a:	ca 5b       	subi	r28, 0xBA	; 186
    a23c:	d0 40       	sbci	r29, 0x00	; 0
    a23e:	c6 54       	subi	r28, 0x46	; 70
    a240:	df 4f       	sbci	r29, 0xFF	; 255
    a242:	e8 81       	ld	r30, Y
    a244:	f9 81       	ldd	r31, Y+1	; 0x01
    a246:	ca 5b       	subi	r28, 0xBA	; 186
    a248:	d0 40       	sbci	r29, 0x00	; 0
    a24a:	84 91       	lpm	r24, Z
    a24c:	98 16       	cp	r9, r24
    a24e:	08 f0       	brcs	.+2      	; 0xa252 <draw_menu(bool)+0x1d8>
    a250:	ee c0       	rjmp	.+476    	; 0xa42e <draw_menu(bool)+0x3b4>
    a252:	89 2d       	mov	r24, r9
    a254:	90 e0       	ldi	r25, 0x00	; 0
    a256:	01 96       	adiw	r24, 0x01	; 1
    a258:	f1 e1       	ldi	r31, 0x11	; 17
    a25a:	f8 9f       	mul	r31, r24
    a25c:	20 01       	movw	r4, r0
    a25e:	f9 9f       	mul	r31, r25
    a260:	50 0c       	add	r5, r0
    a262:	11 24       	eor	r1, r1
    a264:	f3 01       	movw	r30, r6
    a266:	e4 0d       	add	r30, r4
    a268:	f5 1d       	adc	r31, r5
    a26a:	25 91       	lpm	r18, Z+
    a26c:	34 91       	lpm	r19, Z
    a26e:	12 01       	movw	r2, r4
    a270:	44 e0       	ldi	r20, 0x04	; 4
    a272:	24 1a       	sub	r2, r20
    a274:	31 08       	sbc	r3, r1
    a276:	26 0c       	add	r2, r6
    a278:	37 1c       	adc	r3, r7
    a27a:	f1 01       	movw	r30, r2
    a27c:	84 91       	lpm	r24, Z
    a27e:	cf 54       	subi	r28, 0x4F	; 79
    a280:	df 4f       	sbci	r29, 0xFF	; 255
    a282:	68 81       	ld	r22, Y
    a284:	c1 5b       	subi	r28, 0xB1	; 177
    a286:	d0 40       	sbci	r29, 0x00	; 0
    a288:	70 e0       	ldi	r23, 0x00	; 0
    a28a:	49 2d       	mov	r20, r9
    a28c:	90 e0       	ldi	r25, 0x00	; 0
    a28e:	f9 01       	movw	r30, r18
    a290:	19 95       	eicall
    a292:	88 23       	and	r24, r24
    a294:	09 f4       	brne	.+2      	; 0xa298 <draw_menu(bool)+0x21e>
    a296:	b4 c0       	rjmp	.+360    	; 0xa400 <draw_menu(bool)+0x386>
    a298:	f2 01       	movw	r30, r4
    a29a:	31 97       	sbiw	r30, 0x01	; 1
    a29c:	e6 0d       	add	r30, r6
    a29e:	f7 1d       	adc	r31, r7
    a2a0:	84 91       	lpm	r24, Z
    a2a2:	cd 52       	subi	r28, 0x2D	; 45
    a2a4:	df 4f       	sbci	r29, 0xFF	; 255
    a2a6:	68 81       	ld	r22, Y
    a2a8:	c3 5d       	subi	r28, 0xD3	; 211
    a2aa:	d0 40       	sbci	r29, 0x00	; 0
    a2ac:	0e 94 32 36 	call	0x6c64	; 0x6c64 <enable_redraw(unsigned char, unsigned char)>
    a2b0:	88 23       	and	r24, r24
    a2b2:	09 f4       	brne	.+2      	; 0xa2b6 <draw_menu(bool)+0x23c>
    a2b4:	43 c0       	rjmp	.+134    	; 0xa33c <draw_menu(bool)+0x2c2>
    a2b6:	f2 01       	movw	r30, r4
    a2b8:	3f 97       	sbiw	r30, 0x0f	; 15
    a2ba:	e6 0d       	add	r30, r6
    a2bc:	f7 1d       	adc	r31, r7
    a2be:	65 91       	lpm	r22, Z+
    a2c0:	74 91       	lpm	r23, Z
    a2c2:	ce 01       	movw	r24, r28
    a2c4:	8f 57       	subi	r24, 0x7F	; 127
    a2c6:	9f 4f       	sbci	r25, 0xFF	; 255
    a2c8:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    a2cc:	19 82       	std	Y+1, r1	; 0x01
    a2ce:	f2 01       	movw	r30, r4
    a2d0:	35 97       	sbiw	r30, 0x05	; 5
    a2d2:	e6 0d       	add	r30, r6
    a2d4:	f7 1d       	adc	r31, r7
    a2d6:	e4 90       	lpm	r14, Z
    a2d8:	04 91       	lpm	r16, Z
    a2da:	f2 01       	movw	r30, r4
    a2dc:	37 97       	sbiw	r30, 0x07	; 7
    a2de:	e6 0d       	add	r30, r6
    a2e0:	f7 1d       	adc	r31, r7
    a2e2:	25 91       	lpm	r18, Z+
    a2e4:	34 91       	lpm	r19, Z
    a2e6:	f2 01       	movw	r30, r4
    a2e8:	39 97       	sbiw	r30, 0x09	; 9
    a2ea:	e6 0d       	add	r30, r6
    a2ec:	f7 1d       	adc	r31, r7
    a2ee:	45 91       	lpm	r20, Z+
    a2f0:	54 91       	lpm	r21, Z
    a2f2:	f2 01       	movw	r30, r4
    a2f4:	3b 97       	sbiw	r30, 0x0b	; 11
    a2f6:	e6 0d       	add	r30, r6
    a2f8:	f7 1d       	adc	r31, r7
    a2fa:	65 91       	lpm	r22, Z+
    a2fc:	74 91       	lpm	r23, Z
    a2fe:	f2 01       	movw	r30, r4
    a300:	3d 97       	sbiw	r30, 0x0d	; 13
    a302:	e6 0d       	add	r30, r6
    a304:	f7 1d       	adc	r31, r7
    a306:	85 91       	lpm	r24, Z+
    a308:	94 91       	lpm	r25, Z
    a30a:	c8 54       	subi	r28, 0x48	; 72
    a30c:	df 4f       	sbci	r29, 0xFF	; 255
    a30e:	e8 81       	ld	r30, Y
    a310:	f9 81       	ldd	r31, Y+1	; 0x01
    a312:	c8 5b       	subi	r28, 0xB8	; 184
    a314:	d0 40       	sbci	r29, 0x00	; 0
    a316:	6e 0f       	add	r22, r30
    a318:	7f 1f       	adc	r23, r31
    a31a:	81 2c       	mov	r8, r1
    a31c:	fe 01       	movw	r30, r28
    a31e:	31 96       	adiw	r30, 0x01	; 1
    a320:	5f 01       	movw	r10, r30
    a322:	e0 58       	subi	r30, 0x80	; 128
    a324:	ff 4f       	sbci	r31, 0xFF	; 255
    a326:	6f 01       	movw	r12, r30
    a328:	ca 54       	subi	r28, 0x4A	; 74
    a32a:	df 4f       	sbci	r29, 0xFF	; 255
    a32c:	e8 81       	ld	r30, Y
    a32e:	f9 81       	ldd	r31, Y+1	; 0x01
    a330:	c6 5b       	subi	r28, 0xB6	; 182
    a332:	d0 40       	sbci	r29, 0x00	; 0
    a334:	8e 0f       	add	r24, r30
    a336:	9f 1f       	adc	r25, r31
    a338:	0e 94 a4 4c 	call	0x9948	; 0x9948 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
    a33c:	ce 53       	subi	r28, 0x3E	; 62
    a33e:	df 4f       	sbci	r29, 0xFF	; 255
    a340:	28 81       	ld	r18, Y
    a342:	39 81       	ldd	r19, Y+1	; 0x01
    a344:	c2 5c       	subi	r28, 0xC2	; 194
    a346:	d0 40       	sbci	r29, 0x00	; 0
    a348:	23 2b       	or	r18, r19
    a34a:	09 f4       	brne	.+2      	; 0xa34e <draw_menu(bool)+0x2d4>
    a34c:	59 c0       	rjmp	.+178    	; 0xa400 <draw_menu(bool)+0x386>
    a34e:	cc 53       	subi	r28, 0x3C	; 60
    a350:	df 4f       	sbci	r29, 0xFF	; 255
    a352:	48 81       	ld	r20, Y
    a354:	59 81       	ldd	r21, Y+1	; 0x01
    a356:	c4 5c       	subi	r28, 0xC4	; 196
    a358:	d0 40       	sbci	r29, 0x00	; 0
    a35a:	45 2b       	or	r20, r21
    a35c:	09 f4       	brne	.+2      	; 0xa360 <draw_menu(bool)+0x2e6>
    a35e:	50 c0       	rjmp	.+160    	; 0xa400 <draw_menu(bool)+0x386>
    a360:	f2 01       	movw	r30, r4
    a362:	37 97       	sbiw	r30, 0x07	; 7
    a364:	e6 0d       	add	r30, r6
    a366:	f7 1d       	adc	r31, r7
    a368:	25 91       	lpm	r18, Z+
    a36a:	34 91       	lpm	r19, Z
    a36c:	f2 01       	movw	r30, r4
    a36e:	39 97       	sbiw	r30, 0x09	; 9
    a370:	e6 0d       	add	r30, r6
    a372:	f7 1d       	adc	r31, r7
    a374:	45 91       	lpm	r20, Z+
    a376:	54 91       	lpm	r21, Z
    a378:	f2 01       	movw	r30, r4
    a37a:	3b 97       	sbiw	r30, 0x0b	; 11
    a37c:	e6 0d       	add	r30, r6
    a37e:	f7 1d       	adc	r31, r7
    a380:	65 91       	lpm	r22, Z+
    a382:	74 91       	lpm	r23, Z
    a384:	f2 01       	movw	r30, r4
    a386:	3d 97       	sbiw	r30, 0x0d	; 13
    a388:	e6 0d       	add	r30, r6
    a38a:	f7 1d       	adc	r31, r7
    a38c:	85 91       	lpm	r24, Z+
    a38e:	94 91       	lpm	r25, Z
    a390:	c8 54       	subi	r28, 0x48	; 72
    a392:	df 4f       	sbci	r29, 0xFF	; 255
    a394:	e8 81       	ld	r30, Y
    a396:	f9 81       	ldd	r31, Y+1	; 0x01
    a398:	c8 5b       	subi	r28, 0xB8	; 184
    a39a:	d0 40       	sbci	r29, 0x00	; 0
    a39c:	6e 0f       	add	r22, r30
    a39e:	7f 1f       	adc	r23, r31
    a3a0:	cc 53       	subi	r28, 0x3C	; 60
    a3a2:	df 4f       	sbci	r29, 0xFF	; 255
    a3a4:	e8 80       	ld	r14, Y
    a3a6:	f9 80       	ldd	r15, Y+1	; 0x01
    a3a8:	c4 5c       	subi	r28, 0xC4	; 196
    a3aa:	d0 40       	sbci	r29, 0x00	; 0
    a3ac:	ce 53       	subi	r28, 0x3E	; 62
    a3ae:	df 4f       	sbci	r29, 0xFF	; 255
    a3b0:	08 81       	ld	r16, Y
    a3b2:	19 81       	ldd	r17, Y+1	; 0x01
    a3b4:	c2 5c       	subi	r28, 0xC2	; 194
    a3b6:	d0 40       	sbci	r29, 0x00	; 0
    a3b8:	ca 54       	subi	r28, 0x4A	; 74
    a3ba:	df 4f       	sbci	r29, 0xFF	; 255
    a3bc:	e8 81       	ld	r30, Y
    a3be:	f9 81       	ldd	r31, Y+1	; 0x01
    a3c0:	c6 5b       	subi	r28, 0xB6	; 182
    a3c2:	d0 40       	sbci	r29, 0x00	; 0
    a3c4:	8e 0f       	add	r24, r30
    a3c6:	9f 1f       	adc	r25, r31
    a3c8:	0e 94 22 50 	call	0xa044	; 0xa044 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    a3cc:	18 2f       	mov	r17, r24
    a3ce:	88 23       	and	r24, r24
    a3d0:	b9 f0       	breq	.+46     	; 0xa400 <draw_menu(bool)+0x386>
    a3d2:	f2 01       	movw	r30, r4
    a3d4:	33 97       	sbiw	r30, 0x03	; 3
    a3d6:	e6 0d       	add	r30, r6
    a3d8:	f7 1d       	adc	r31, r7
    a3da:	25 91       	lpm	r18, Z+
    a3dc:	34 91       	lpm	r19, Z
    a3de:	f1 01       	movw	r30, r2
    a3e0:	84 91       	lpm	r24, Z
    a3e2:	cf 54       	subi	r28, 0x4F	; 79
    a3e4:	df 4f       	sbci	r29, 0xFF	; 255
    a3e6:	68 81       	ld	r22, Y
    a3e8:	c1 5b       	subi	r28, 0xB1	; 177
    a3ea:	d0 40       	sbci	r29, 0x00	; 0
    a3ec:	70 e0       	ldi	r23, 0x00	; 0
    a3ee:	49 2d       	mov	r20, r9
    a3f0:	90 e0       	ldi	r25, 0x00	; 0
    a3f2:	f9 01       	movw	r30, r18
    a3f4:	19 95       	eicall
    a3f6:	c6 53       	subi	r28, 0x36	; 54
    a3f8:	df 4f       	sbci	r29, 0xFF	; 255
    a3fa:	18 83       	st	Y, r17
    a3fc:	ca 5c       	subi	r28, 0xCA	; 202
    a3fe:	d0 40       	sbci	r29, 0x00	; 0
    a400:	93 94       	inc	r9
    a402:	1d cf       	rjmp	.-454    	; 0xa23e <draw_menu(bool)+0x1c4>
    a404:	cc 53       	subi	r28, 0x3C	; 60
    a406:	df 4f       	sbci	r29, 0xFF	; 255
    a408:	19 82       	std	Y+1, r1	; 0x01
    a40a:	18 82       	st	Y, r1
    a40c:	c4 5c       	subi	r28, 0xC4	; 196
    a40e:	d0 40       	sbci	r29, 0x00	; 0
    a410:	ce 53       	subi	r28, 0x3E	; 62
    a412:	df 4f       	sbci	r29, 0xFF	; 255
    a414:	19 82       	std	Y+1, r1	; 0x01
    a416:	18 82       	st	Y, r1
    a418:	c2 5c       	subi	r28, 0xC2	; 194
    a41a:	d0 40       	sbci	r29, 0x00	; 0
    a41c:	71 ce       	rjmp	.-798    	; 0xa100 <draw_menu(bool)+0x86>
    a41e:	68 94       	set
    a420:	91 f8       	bld	r9, 1
    a422:	b8 ce       	rjmp	.-656    	; 0xa194 <draw_menu(bool)+0x11a>
    a424:	89 2d       	mov	r24, r9
    a426:	84 60       	ori	r24, 0x04	; 4
    a428:	ca ce       	rjmp	.-620    	; 0xa1be <draw_menu(bool)+0x144>
    a42a:	88 60       	ori	r24, 0x08	; 8
    a42c:	cb ce       	rjmp	.-618    	; 0xa1c4 <draw_menu(bool)+0x14a>
    a42e:	c6 53       	subi	r28, 0x36	; 54
    a430:	df 4f       	sbci	r29, 0xFF	; 255
    a432:	f8 81       	ld	r31, Y
    a434:	ca 5c       	subi	r28, 0xCA	; 202
    a436:	d0 40       	sbci	r29, 0x00	; 0
    a438:	f1 11       	cpse	r31, r1
    a43a:	0c 94 45 61 	jmp	0xc28a	; 0xc28a <draw_menu(bool)+0x2210>
    a43e:	91 2c       	mov	r9, r1
    a440:	93 01       	movw	r18, r6
    a442:	22 54       	subi	r18, 0x42	; 66
    a444:	3d 4f       	sbci	r19, 0xFD	; 253
    a446:	c0 54       	subi	r28, 0x40	; 64
    a448:	df 4f       	sbci	r29, 0xFF	; 255
    a44a:	39 83       	std	Y+1, r19	; 0x01
    a44c:	28 83       	st	Y, r18
    a44e:	c0 5c       	subi	r28, 0xC0	; 192
    a450:	d0 40       	sbci	r29, 0x00	; 0
    a452:	1e 01       	movw	r2, r28
    a454:	31 e8       	ldi	r19, 0x81	; 129
    a456:	23 0e       	add	r2, r19
    a458:	31 1c       	adc	r3, r1
    a45a:	c0 54       	subi	r28, 0x40	; 64
    a45c:	df 4f       	sbci	r29, 0xFF	; 255
    a45e:	e8 81       	ld	r30, Y
    a460:	f9 81       	ldd	r31, Y+1	; 0x01
    a462:	c0 5c       	subi	r28, 0xC0	; 192
    a464:	d0 40       	sbci	r29, 0x00	; 0
    a466:	84 91       	lpm	r24, Z
    a468:	98 16       	cp	r9, r24
    a46a:	08 f0       	brcs	.+2      	; 0xa46e <draw_menu(bool)+0x3f4>
    a46c:	1c c1       	rjmp	.+568    	; 0xa6a6 <draw_menu(bool)+0x62c>
    a46e:	f7 e1       	ldi	r31, 0x17	; 23
    a470:	9f 9e       	mul	r9, r31
    a472:	20 01       	movw	r4, r0
    a474:	11 24       	eor	r1, r1
    a476:	f2 01       	movw	r30, r4
    a478:	ef 53       	subi	r30, 0x3F	; 63
    a47a:	ff 4f       	sbci	r31, 0xFF	; 255
    a47c:	e6 0d       	add	r30, r6
    a47e:	f7 1d       	adc	r31, r7
    a480:	25 91       	lpm	r18, Z+
    a482:	34 91       	lpm	r19, Z
    a484:	c2 01       	movw	r24, r4
    a486:	85 54       	subi	r24, 0x45	; 69
    a488:	9f 4f       	sbci	r25, 0xFF	; 255
    a48a:	a3 01       	movw	r20, r6
    a48c:	48 0f       	add	r20, r24
    a48e:	59 1f       	adc	r21, r25
    a490:	c6 54       	subi	r28, 0x46	; 70
    a492:	df 4f       	sbci	r29, 0xFF	; 255
    a494:	59 83       	std	Y+1, r21	; 0x01
    a496:	48 83       	st	Y, r20
    a498:	ca 5b       	subi	r28, 0xBA	; 186
    a49a:	d0 40       	sbci	r29, 0x00	; 0
    a49c:	fa 01       	movw	r30, r20
    a49e:	84 91       	lpm	r24, Z
    a4a0:	cf 54       	subi	r28, 0x4F	; 79
    a4a2:	df 4f       	sbci	r29, 0xFF	; 255
    a4a4:	68 81       	ld	r22, Y
    a4a6:	c1 5b       	subi	r28, 0xB1	; 177
    a4a8:	d0 40       	sbci	r29, 0x00	; 0
    a4aa:	70 e0       	ldi	r23, 0x00	; 0
    a4ac:	49 2d       	mov	r20, r9
    a4ae:	90 e0       	ldi	r25, 0x00	; 0
    a4b0:	f9 01       	movw	r30, r18
    a4b2:	19 95       	eicall
    a4b4:	88 23       	and	r24, r24
    a4b6:	09 f4       	brne	.+2      	; 0xa4ba <draw_menu(bool)+0x440>
    a4b8:	f4 c0       	rjmp	.+488    	; 0xa6a2 <draw_menu(bool)+0x628>
    a4ba:	f2 01       	movw	r30, r4
    a4bc:	e0 54       	subi	r30, 0x40	; 64
    a4be:	ff 4f       	sbci	r31, 0xFF	; 255
    a4c0:	e6 0d       	add	r30, r6
    a4c2:	f7 1d       	adc	r31, r7
    a4c4:	84 91       	lpm	r24, Z
    a4c6:	cd 52       	subi	r28, 0x2D	; 45
    a4c8:	df 4f       	sbci	r29, 0xFF	; 255
    a4ca:	68 81       	ld	r22, Y
    a4cc:	c3 5d       	subi	r28, 0xD3	; 211
    a4ce:	d0 40       	sbci	r29, 0x00	; 0
    a4d0:	0e 94 32 36 	call	0x6c64	; 0x6c64 <enable_redraw(unsigned char, unsigned char)>
    a4d4:	88 23       	and	r24, r24
    a4d6:	09 f4       	brne	.+2      	; 0xa4da <draw_menu(bool)+0x460>
    a4d8:	78 c0       	rjmp	.+240    	; 0xa5ca <draw_menu(bool)+0x550>
    a4da:	f2 01       	movw	r30, r4
    a4dc:	e4 55       	subi	r30, 0x54	; 84
    a4de:	ff 4f       	sbci	r31, 0xFF	; 255
    a4e0:	e6 0d       	add	r30, r6
    a4e2:	f7 1d       	adc	r31, r7
    a4e4:	65 91       	lpm	r22, Z+
    a4e6:	74 91       	lpm	r23, Z
    a4e8:	c1 01       	movw	r24, r2
    a4ea:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    a4ee:	f2 01       	movw	r30, r4
    a4f0:	e2 54       	subi	r30, 0x42	; 66
    a4f2:	ff 4f       	sbci	r31, 0xFF	; 255
    a4f4:	e6 0d       	add	r30, r6
    a4f6:	f7 1d       	adc	r31, r7
    a4f8:	25 91       	lpm	r18, Z+
    a4fa:	34 91       	lpm	r19, Z
    a4fc:	c6 54       	subi	r28, 0x46	; 70
    a4fe:	df 4f       	sbci	r29, 0xFF	; 255
    a500:	e8 81       	ld	r30, Y
    a502:	f9 81       	ldd	r31, Y+1	; 0x01
    a504:	ca 5b       	subi	r28, 0xBA	; 186
    a506:	d0 40       	sbci	r29, 0x00	; 0
    a508:	84 91       	lpm	r24, Z
    a50a:	cf 54       	subi	r28, 0x4F	; 79
    a50c:	df 4f       	sbci	r29, 0xFF	; 255
    a50e:	68 81       	ld	r22, Y
    a510:	c1 5b       	subi	r28, 0xB1	; 177
    a512:	d0 40       	sbci	r29, 0x00	; 0
    a514:	70 e0       	ldi	r23, 0x00	; 0
    a516:	49 2d       	mov	r20, r9
    a518:	90 e0       	ldi	r25, 0x00	; 0
    a51a:	f9 01       	movw	r30, r18
    a51c:	19 95       	eicall
    a51e:	19 82       	std	Y+1, r1	; 0x01
    a520:	f2 01       	movw	r30, r4
    a522:	e7 54       	subi	r30, 0x47	; 71
    a524:	ff 4f       	sbci	r31, 0xFF	; 255
    a526:	e6 0d       	add	r30, r6
    a528:	f7 1d       	adc	r31, r7
    a52a:	a5 90       	lpm	r10, Z+
    a52c:	b4 90       	lpm	r11, Z
    a52e:	f2 01       	movw	r30, r4
    a530:	e9 54       	subi	r30, 0x49	; 73
    a532:	ff 4f       	sbci	r31, 0xFF	; 255
    a534:	e6 0d       	add	r30, r6
    a536:	f7 1d       	adc	r31, r7
    a538:	c5 90       	lpm	r12, Z+
    a53a:	d4 90       	lpm	r13, Z
    a53c:	82 01       	movw	r16, r4
    a53e:	0a 54       	subi	r16, 0x4A	; 74
    a540:	1f 4f       	sbci	r17, 0xFF	; 255
    a542:	06 0d       	add	r16, r6
    a544:	17 1d       	adc	r17, r7
    a546:	f8 01       	movw	r30, r16
    a548:	04 91       	lpm	r16, Z
    a54a:	f2 01       	movw	r30, r4
    a54c:	ec 54       	subi	r30, 0x4C	; 76
    a54e:	ff 4f       	sbci	r31, 0xFF	; 255
    a550:	e6 0d       	add	r30, r6
    a552:	f7 1d       	adc	r31, r7
    a554:	25 91       	lpm	r18, Z+
    a556:	34 91       	lpm	r19, Z
    a558:	f2 01       	movw	r30, r4
    a55a:	ee 54       	subi	r30, 0x4E	; 78
    a55c:	ff 4f       	sbci	r31, 0xFF	; 255
    a55e:	e6 0d       	add	r30, r6
    a560:	f7 1d       	adc	r31, r7
    a562:	45 91       	lpm	r20, Z+
    a564:	54 91       	lpm	r21, Z
    a566:	f2 01       	movw	r30, r4
    a568:	e0 55       	subi	r30, 0x50	; 80
    a56a:	ff 4f       	sbci	r31, 0xFF	; 255
    a56c:	e6 0d       	add	r30, r6
    a56e:	f7 1d       	adc	r31, r7
    a570:	65 91       	lpm	r22, Z+
    a572:	74 91       	lpm	r23, Z
    a574:	f2 01       	movw	r30, r4
    a576:	e2 55       	subi	r30, 0x52	; 82
    a578:	ff 4f       	sbci	r31, 0xFF	; 255
    a57a:	e6 0d       	add	r30, r6
    a57c:	f7 1d       	adc	r31, r7
    a57e:	a5 91       	lpm	r26, Z+
    a580:	b4 91       	lpm	r27, Z
    a582:	88 24       	eor	r8, r8
    a584:	83 94       	inc	r8
    a586:	81 11       	cpse	r24, r1
    a588:	01 c0       	rjmp	.+2      	; 0xa58c <draw_menu(bool)+0x512>
    a58a:	81 2c       	mov	r8, r1
    a58c:	c8 54       	subi	r28, 0x48	; 72
    a58e:	df 4f       	sbci	r29, 0xFF	; 255
    a590:	88 81       	ld	r24, Y
    a592:	99 81       	ldd	r25, Y+1	; 0x01
    a594:	c8 5b       	subi	r28, 0xB8	; 184
    a596:	d0 40       	sbci	r29, 0x00	; 0
    a598:	68 0f       	add	r22, r24
    a59a:	79 1f       	adc	r23, r25
    a59c:	e1 e0       	ldi	r30, 0x01	; 1
    a59e:	f0 e0       	ldi	r31, 0x00	; 0
    a5a0:	ec 0f       	add	r30, r28
    a5a2:	fd 1f       	adc	r31, r29
    a5a4:	ff 93       	push	r31
    a5a6:	ef 93       	push	r30
    a5a8:	3f 92       	push	r3
    a5aa:	2f 92       	push	r2
    a5ac:	e1 2c       	mov	r14, r1
    a5ae:	ca 54       	subi	r28, 0x4A	; 74
    a5b0:	df 4f       	sbci	r29, 0xFF	; 255
    a5b2:	88 81       	ld	r24, Y
    a5b4:	99 81       	ldd	r25, Y+1	; 0x01
    a5b6:	c6 5b       	subi	r28, 0xB6	; 182
    a5b8:	d0 40       	sbci	r29, 0x00	; 0
    a5ba:	8a 0f       	add	r24, r26
    a5bc:	9b 1f       	adc	r25, r27
    a5be:	0e 94 a0 4d 	call	0x9b40	; 0x9b40 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    a5c2:	0f 90       	pop	r0
    a5c4:	0f 90       	pop	r0
    a5c6:	0f 90       	pop	r0
    a5c8:	0f 90       	pop	r0
    a5ca:	ce 53       	subi	r28, 0x3E	; 62
    a5cc:	df 4f       	sbci	r29, 0xFF	; 255
    a5ce:	28 81       	ld	r18, Y
    a5d0:	39 81       	ldd	r19, Y+1	; 0x01
    a5d2:	c2 5c       	subi	r28, 0xC2	; 194
    a5d4:	d0 40       	sbci	r29, 0x00	; 0
    a5d6:	23 2b       	or	r18, r19
    a5d8:	09 f4       	brne	.+2      	; 0xa5dc <draw_menu(bool)+0x562>
    a5da:	63 c0       	rjmp	.+198    	; 0xa6a2 <draw_menu(bool)+0x628>
    a5dc:	cc 53       	subi	r28, 0x3C	; 60
    a5de:	df 4f       	sbci	r29, 0xFF	; 255
    a5e0:	48 81       	ld	r20, Y
    a5e2:	59 81       	ldd	r21, Y+1	; 0x01
    a5e4:	c4 5c       	subi	r28, 0xC4	; 196
    a5e6:	d0 40       	sbci	r29, 0x00	; 0
    a5e8:	45 2b       	or	r20, r21
    a5ea:	09 f4       	brne	.+2      	; 0xa5ee <draw_menu(bool)+0x574>
    a5ec:	5a c0       	rjmp	.+180    	; 0xa6a2 <draw_menu(bool)+0x628>
    a5ee:	f2 01       	movw	r30, r4
    a5f0:	ec 54       	subi	r30, 0x4C	; 76
    a5f2:	ff 4f       	sbci	r31, 0xFF	; 255
    a5f4:	e6 0d       	add	r30, r6
    a5f6:	f7 1d       	adc	r31, r7
    a5f8:	25 91       	lpm	r18, Z+
    a5fa:	34 91       	lpm	r19, Z
    a5fc:	f2 01       	movw	r30, r4
    a5fe:	ee 54       	subi	r30, 0x4E	; 78
    a600:	ff 4f       	sbci	r31, 0xFF	; 255
    a602:	e6 0d       	add	r30, r6
    a604:	f7 1d       	adc	r31, r7
    a606:	45 91       	lpm	r20, Z+
    a608:	54 91       	lpm	r21, Z
    a60a:	f2 01       	movw	r30, r4
    a60c:	e0 55       	subi	r30, 0x50	; 80
    a60e:	ff 4f       	sbci	r31, 0xFF	; 255
    a610:	e6 0d       	add	r30, r6
    a612:	f7 1d       	adc	r31, r7
    a614:	65 91       	lpm	r22, Z+
    a616:	74 91       	lpm	r23, Z
    a618:	f2 01       	movw	r30, r4
    a61a:	e2 55       	subi	r30, 0x52	; 82
    a61c:	ff 4f       	sbci	r31, 0xFF	; 255
    a61e:	e6 0d       	add	r30, r6
    a620:	f7 1d       	adc	r31, r7
    a622:	85 91       	lpm	r24, Z+
    a624:	94 91       	lpm	r25, Z
    a626:	c8 54       	subi	r28, 0x48	; 72
    a628:	df 4f       	sbci	r29, 0xFF	; 255
    a62a:	e8 81       	ld	r30, Y
    a62c:	f9 81       	ldd	r31, Y+1	; 0x01
    a62e:	c8 5b       	subi	r28, 0xB8	; 184
    a630:	d0 40       	sbci	r29, 0x00	; 0
    a632:	6e 0f       	add	r22, r30
    a634:	7f 1f       	adc	r23, r31
    a636:	cc 53       	subi	r28, 0x3C	; 60
    a638:	df 4f       	sbci	r29, 0xFF	; 255
    a63a:	e8 80       	ld	r14, Y
    a63c:	f9 80       	ldd	r15, Y+1	; 0x01
    a63e:	c4 5c       	subi	r28, 0xC4	; 196
    a640:	d0 40       	sbci	r29, 0x00	; 0
    a642:	ce 53       	subi	r28, 0x3E	; 62
    a644:	df 4f       	sbci	r29, 0xFF	; 255
    a646:	08 81       	ld	r16, Y
    a648:	19 81       	ldd	r17, Y+1	; 0x01
    a64a:	c2 5c       	subi	r28, 0xC2	; 194
    a64c:	d0 40       	sbci	r29, 0x00	; 0
    a64e:	ca 54       	subi	r28, 0x4A	; 74
    a650:	df 4f       	sbci	r29, 0xFF	; 255
    a652:	e8 81       	ld	r30, Y
    a654:	f9 81       	ldd	r31, Y+1	; 0x01
    a656:	c6 5b       	subi	r28, 0xB6	; 182
    a658:	d0 40       	sbci	r29, 0x00	; 0
    a65a:	8e 0f       	add	r24, r30
    a65c:	9f 1f       	adc	r25, r31
    a65e:	0e 94 22 50 	call	0xa044	; 0xa044 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    a662:	18 2f       	mov	r17, r24
    a664:	88 23       	and	r24, r24
    a666:	e9 f0       	breq	.+58     	; 0xa6a2 <draw_menu(bool)+0x628>
    a668:	f2 01       	movw	r30, r4
    a66a:	e4 54       	subi	r30, 0x44	; 68
    a66c:	ff 4f       	sbci	r31, 0xFF	; 255
    a66e:	e6 0d       	add	r30, r6
    a670:	f7 1d       	adc	r31, r7
    a672:	25 91       	lpm	r18, Z+
    a674:	34 91       	lpm	r19, Z
    a676:	c6 54       	subi	r28, 0x46	; 70
    a678:	df 4f       	sbci	r29, 0xFF	; 255
    a67a:	e8 81       	ld	r30, Y
    a67c:	f9 81       	ldd	r31, Y+1	; 0x01
    a67e:	ca 5b       	subi	r28, 0xBA	; 186
    a680:	d0 40       	sbci	r29, 0x00	; 0
    a682:	84 91       	lpm	r24, Z
    a684:	cf 54       	subi	r28, 0x4F	; 79
    a686:	df 4f       	sbci	r29, 0xFF	; 255
    a688:	68 81       	ld	r22, Y
    a68a:	c1 5b       	subi	r28, 0xB1	; 177
    a68c:	d0 40       	sbci	r29, 0x00	; 0
    a68e:	70 e0       	ldi	r23, 0x00	; 0
    a690:	49 2d       	mov	r20, r9
    a692:	90 e0       	ldi	r25, 0x00	; 0
    a694:	f9 01       	movw	r30, r18
    a696:	19 95       	eicall
    a698:	c6 53       	subi	r28, 0x36	; 54
    a69a:	df 4f       	sbci	r29, 0xFF	; 255
    a69c:	18 83       	st	Y, r17
    a69e:	ca 5c       	subi	r28, 0xCA	; 202
    a6a0:	d0 40       	sbci	r29, 0x00	; 0
    a6a2:	93 94       	inc	r9
    a6a4:	da ce       	rjmp	.-588    	; 0xa45a <draw_menu(bool)+0x3e0>
    a6a6:	c6 53       	subi	r28, 0x36	; 54
    a6a8:	df 4f       	sbci	r29, 0xFF	; 255
    a6aa:	f8 81       	ld	r31, Y
    a6ac:	ca 5c       	subi	r28, 0xCA	; 202
    a6ae:	d0 40       	sbci	r29, 0x00	; 0
    a6b0:	f1 11       	cpse	r31, r1
    a6b2:	0c 94 45 61 	jmp	0xc28a	; 0xc28a <draw_menu(bool)+0x2210>
    a6b6:	91 2c       	mov	r9, r1
    a6b8:	23 01       	movw	r4, r6
    a6ba:	21 e4       	ldi	r18, 0x41	; 65
    a6bc:	42 1a       	sub	r4, r18
    a6be:	2d ef       	ldi	r18, 0xFD	; 253
    a6c0:	52 0a       	sbc	r5, r18
    a6c2:	92 e1       	ldi	r25, 0x12	; 18
    a6c4:	89 2e       	mov	r8, r25
    a6c6:	f2 01       	movw	r30, r4
    a6c8:	84 91       	lpm	r24, Z
    a6ca:	98 16       	cp	r9, r24
    a6cc:	08 f0       	brcs	.+2      	; 0xa6d0 <draw_menu(bool)+0x656>
    a6ce:	cc c0       	rjmp	.+408    	; 0xa868 <draw_menu(bool)+0x7ee>
    a6d0:	98 9c       	mul	r9, r8
    a6d2:	50 01       	movw	r10, r0
    a6d4:	11 24       	eor	r1, r1
    a6d6:	f5 01       	movw	r30, r10
    a6d8:	e3 5d       	subi	r30, 0xD3	; 211
    a6da:	fe 4f       	sbci	r31, 0xFE	; 254
    a6dc:	e6 0d       	add	r30, r6
    a6de:	f7 1d       	adc	r31, r7
    a6e0:	25 91       	lpm	r18, Z+
    a6e2:	34 91       	lpm	r19, Z
    a6e4:	85 01       	movw	r16, r10
    a6e6:	0d 5d       	subi	r16, 0xDD	; 221
    a6e8:	1e 4f       	sbci	r17, 0xFE	; 254
    a6ea:	06 0d       	add	r16, r6
    a6ec:	17 1d       	adc	r17, r7
    a6ee:	f8 01       	movw	r30, r16
    a6f0:	84 91       	lpm	r24, Z
    a6f2:	cf 54       	subi	r28, 0x4F	; 79
    a6f4:	df 4f       	sbci	r29, 0xFF	; 255
    a6f6:	68 81       	ld	r22, Y
    a6f8:	c1 5b       	subi	r28, 0xB1	; 177
    a6fa:	d0 40       	sbci	r29, 0x00	; 0
    a6fc:	70 e0       	ldi	r23, 0x00	; 0
    a6fe:	49 2d       	mov	r20, r9
    a700:	90 e0       	ldi	r25, 0x00	; 0
    a702:	f9 01       	movw	r30, r18
    a704:	19 95       	eicall
    a706:	88 23       	and	r24, r24
    a708:	09 f4       	brne	.+2      	; 0xa70c <draw_menu(bool)+0x692>
    a70a:	ac c0       	rjmp	.+344    	; 0xa864 <draw_menu(bool)+0x7ea>
    a70c:	f5 01       	movw	r30, r10
    a70e:	e6 5d       	subi	r30, 0xD6	; 214
    a710:	fe 4f       	sbci	r31, 0xFE	; 254
    a712:	e6 0d       	add	r30, r6
    a714:	f7 1d       	adc	r31, r7
    a716:	84 91       	lpm	r24, Z
    a718:	cd 52       	subi	r28, 0x2D	; 45
    a71a:	df 4f       	sbci	r29, 0xFF	; 255
    a71c:	68 81       	ld	r22, Y
    a71e:	c3 5d       	subi	r28, 0xD3	; 211
    a720:	d0 40       	sbci	r29, 0x00	; 0
    a722:	0e 94 32 36 	call	0x6c64	; 0x6c64 <enable_redraw(unsigned char, unsigned char)>
    a726:	88 23       	and	r24, r24
    a728:	09 f4       	brne	.+2      	; 0xa72c <draw_menu(bool)+0x6b2>
    a72a:	4a c0       	rjmp	.+148    	; 0xa7c0 <draw_menu(bool)+0x746>
    a72c:	f5 01       	movw	r30, r10
    a72e:	e1 5d       	subi	r30, 0xD1	; 209
    a730:	fe 4f       	sbci	r31, 0xFE	; 254
    a732:	e6 0d       	add	r30, r6
    a734:	f7 1d       	adc	r31, r7
    a736:	65 91       	lpm	r22, Z+
    a738:	74 91       	lpm	r23, Z
    a73a:	ce 01       	movw	r24, r28
    a73c:	01 96       	adiw	r24, 0x01	; 1
    a73e:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    a742:	f5 01       	movw	r30, r10
    a744:	ec 5d       	subi	r30, 0xDC	; 220
    a746:	fe 4f       	sbci	r31, 0xFE	; 254
    a748:	e6 0d       	add	r30, r6
    a74a:	f7 1d       	adc	r31, r7
    a74c:	a5 91       	lpm	r26, Z+
    a74e:	b4 91       	lpm	r27, Z
    a750:	f8 01       	movw	r30, r16
    a752:	04 91       	lpm	r16, Z
    a754:	f5 01       	movw	r30, r10
    a756:	e8 5d       	subi	r30, 0xD8	; 216
    a758:	fe 4f       	sbci	r31, 0xFE	; 254
    a75a:	e6 0d       	add	r30, r6
    a75c:	f7 1d       	adc	r31, r7
    a75e:	25 91       	lpm	r18, Z+
    a760:	34 91       	lpm	r19, Z
    a762:	f5 01       	movw	r30, r10
    a764:	ea 5d       	subi	r30, 0xDA	; 218
    a766:	fe 4f       	sbci	r31, 0xFE	; 254
    a768:	e6 0d       	add	r30, r6
    a76a:	f7 1d       	adc	r31, r7
    a76c:	45 91       	lpm	r20, Z+
    a76e:	54 91       	lpm	r21, Z
    a770:	f5 01       	movw	r30, r10
    a772:	ef 5d       	subi	r30, 0xDF	; 223
    a774:	fe 4f       	sbci	r31, 0xFE	; 254
    a776:	e6 0d       	add	r30, r6
    a778:	f7 1d       	adc	r31, r7
    a77a:	65 91       	lpm	r22, Z+
    a77c:	74 91       	lpm	r23, Z
    a77e:	f5 01       	movw	r30, r10
    a780:	e1 5e       	subi	r30, 0xE1	; 225
    a782:	fe 4f       	sbci	r31, 0xFE	; 254
    a784:	e6 0d       	add	r30, r6
    a786:	f7 1d       	adc	r31, r7
    a788:	85 91       	lpm	r24, Z+
    a78a:	94 91       	lpm	r25, Z
    a78c:	c8 54       	subi	r28, 0x48	; 72
    a78e:	df 4f       	sbci	r29, 0xFF	; 255
    a790:	e8 81       	ld	r30, Y
    a792:	f9 81       	ldd	r31, Y+1	; 0x01
    a794:	c8 5b       	subi	r28, 0xB8	; 184
    a796:	d0 40       	sbci	r29, 0x00	; 0
    a798:	6e 0f       	add	r22, r30
    a79a:	7f 1f       	adc	r23, r31
    a79c:	fe 01       	movw	r30, r28
    a79e:	31 96       	adiw	r30, 0x01	; 1
    a7a0:	6f 01       	movw	r12, r30
    a7a2:	cf 54       	subi	r28, 0x4F	; 79
    a7a4:	df 4f       	sbci	r29, 0xFF	; 255
    a7a6:	e8 80       	ld	r14, Y
    a7a8:	c1 5b       	subi	r28, 0xB1	; 177
    a7aa:	d0 40       	sbci	r29, 0x00	; 0
    a7ac:	ca 54       	subi	r28, 0x4A	; 74
    a7ae:	df 4f       	sbci	r29, 0xFF	; 255
    a7b0:	e8 81       	ld	r30, Y
    a7b2:	f9 81       	ldd	r31, Y+1	; 0x01
    a7b4:	c6 5b       	subi	r28, 0xB6	; 182
    a7b6:	d0 40       	sbci	r29, 0x00	; 0
    a7b8:	8e 0f       	add	r24, r30
    a7ba:	9f 1f       	adc	r25, r31
    a7bc:	fd 01       	movw	r30, r26
    a7be:	19 95       	eicall
    a7c0:	ce 53       	subi	r28, 0x3E	; 62
    a7c2:	df 4f       	sbci	r29, 0xFF	; 255
    a7c4:	28 81       	ld	r18, Y
    a7c6:	39 81       	ldd	r19, Y+1	; 0x01
    a7c8:	c2 5c       	subi	r28, 0xC2	; 194
    a7ca:	d0 40       	sbci	r29, 0x00	; 0
    a7cc:	23 2b       	or	r18, r19
    a7ce:	09 f4       	brne	.+2      	; 0xa7d2 <draw_menu(bool)+0x758>
    a7d0:	49 c0       	rjmp	.+146    	; 0xa864 <draw_menu(bool)+0x7ea>
    a7d2:	cc 53       	subi	r28, 0x3C	; 60
    a7d4:	df 4f       	sbci	r29, 0xFF	; 255
    a7d6:	48 81       	ld	r20, Y
    a7d8:	59 81       	ldd	r21, Y+1	; 0x01
    a7da:	c4 5c       	subi	r28, 0xC4	; 196
    a7dc:	d0 40       	sbci	r29, 0x00	; 0
    a7de:	45 2b       	or	r20, r21
    a7e0:	09 f4       	brne	.+2      	; 0xa7e4 <draw_menu(bool)+0x76a>
    a7e2:	40 c0       	rjmp	.+128    	; 0xa864 <draw_menu(bool)+0x7ea>
    a7e4:	f5 01       	movw	r30, r10
    a7e6:	e8 5d       	subi	r30, 0xD8	; 216
    a7e8:	fe 4f       	sbci	r31, 0xFE	; 254
    a7ea:	e6 0d       	add	r30, r6
    a7ec:	f7 1d       	adc	r31, r7
    a7ee:	25 91       	lpm	r18, Z+
    a7f0:	34 91       	lpm	r19, Z
    a7f2:	f5 01       	movw	r30, r10
    a7f4:	ea 5d       	subi	r30, 0xDA	; 218
    a7f6:	fe 4f       	sbci	r31, 0xFE	; 254
    a7f8:	e6 0d       	add	r30, r6
    a7fa:	f7 1d       	adc	r31, r7
    a7fc:	45 91       	lpm	r20, Z+
    a7fe:	54 91       	lpm	r21, Z
    a800:	f5 01       	movw	r30, r10
    a802:	ef 5d       	subi	r30, 0xDF	; 223
    a804:	fe 4f       	sbci	r31, 0xFE	; 254
    a806:	e6 0d       	add	r30, r6
    a808:	f7 1d       	adc	r31, r7
    a80a:	65 91       	lpm	r22, Z+
    a80c:	74 91       	lpm	r23, Z
    a80e:	f5 01       	movw	r30, r10
    a810:	e1 5e       	subi	r30, 0xE1	; 225
    a812:	fe 4f       	sbci	r31, 0xFE	; 254
    a814:	e6 0d       	add	r30, r6
    a816:	f7 1d       	adc	r31, r7
    a818:	85 91       	lpm	r24, Z+
    a81a:	94 91       	lpm	r25, Z
    a81c:	c8 54       	subi	r28, 0x48	; 72
    a81e:	df 4f       	sbci	r29, 0xFF	; 255
    a820:	e8 81       	ld	r30, Y
    a822:	f9 81       	ldd	r31, Y+1	; 0x01
    a824:	c8 5b       	subi	r28, 0xB8	; 184
    a826:	d0 40       	sbci	r29, 0x00	; 0
    a828:	6e 0f       	add	r22, r30
    a82a:	7f 1f       	adc	r23, r31
    a82c:	cc 53       	subi	r28, 0x3C	; 60
    a82e:	df 4f       	sbci	r29, 0xFF	; 255
    a830:	e8 80       	ld	r14, Y
    a832:	f9 80       	ldd	r15, Y+1	; 0x01
    a834:	c4 5c       	subi	r28, 0xC4	; 196
    a836:	d0 40       	sbci	r29, 0x00	; 0
    a838:	ce 53       	subi	r28, 0x3E	; 62
    a83a:	df 4f       	sbci	r29, 0xFF	; 255
    a83c:	08 81       	ld	r16, Y
    a83e:	19 81       	ldd	r17, Y+1	; 0x01
    a840:	c2 5c       	subi	r28, 0xC2	; 194
    a842:	d0 40       	sbci	r29, 0x00	; 0
    a844:	ca 54       	subi	r28, 0x4A	; 74
    a846:	df 4f       	sbci	r29, 0xFF	; 255
    a848:	e8 81       	ld	r30, Y
    a84a:	f9 81       	ldd	r31, Y+1	; 0x01
    a84c:	c6 5b       	subi	r28, 0xB6	; 182
    a84e:	d0 40       	sbci	r29, 0x00	; 0
    a850:	8e 0f       	add	r24, r30
    a852:	9f 1f       	adc	r25, r31
    a854:	0e 94 22 50 	call	0xa044	; 0xa044 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    a858:	88 23       	and	r24, r24
    a85a:	21 f0       	breq	.+8      	; 0xa864 <draw_menu(bool)+0x7ea>
    a85c:	8a e2       	ldi	r24, 0x2A	; 42
    a85e:	95 e0       	ldi	r25, 0x05	; 5
    a860:	0e 94 7b d8 	call	0x1b0f6	; 0x1b0f6 <puts>
    a864:	93 94       	inc	r9
    a866:	2f cf       	rjmp	.-418    	; 0xa6c6 <draw_menu(bool)+0x64c>
    a868:	51 2c       	mov	r5, r1
    a86a:	13 01       	movw	r2, r6
    a86c:	f0 e4       	ldi	r31, 0x40	; 64
    a86e:	2f 1a       	sub	r2, r31
    a870:	fd ef       	ldi	r31, 0xFD	; 253
    a872:	3f 0a       	sbc	r3, r31
    a874:	87 e1       	ldi	r24, 0x17	; 23
    a876:	48 2e       	mov	r4, r24
    a878:	f1 01       	movw	r30, r2
    a87a:	84 91       	lpm	r24, Z
    a87c:	58 16       	cp	r5, r24
    a87e:	08 f0       	brcs	.+2      	; 0xa882 <draw_menu(bool)+0x808>
    a880:	01 c1       	rjmp	.+514    	; 0xaa84 <draw_menu(bool)+0xa0a>
    a882:	54 9c       	mul	r5, r4
    a884:	40 01       	movw	r8, r0
    a886:	11 24       	eor	r1, r1
    a888:	f4 01       	movw	r30, r8
    a88a:	e3 58       	subi	r30, 0x83	; 131
    a88c:	fe 4f       	sbci	r31, 0xFE	; 254
    a88e:	e6 0d       	add	r30, r6
    a890:	f7 1d       	adc	r31, r7
    a892:	84 91       	lpm	r24, Z
    a894:	cd 52       	subi	r28, 0x2D	; 45
    a896:	df 4f       	sbci	r29, 0xFF	; 255
    a898:	68 81       	ld	r22, Y
    a89a:	c3 5d       	subi	r28, 0xD3	; 211
    a89c:	d0 40       	sbci	r29, 0x00	; 0
    a89e:	0e 94 32 36 	call	0x6c64	; 0x6c64 <enable_redraw(unsigned char, unsigned char)>
    a8a2:	88 23       	and	r24, r24
    a8a4:	09 f4       	brne	.+2      	; 0xa8a8 <draw_menu(bool)+0x82e>
    a8a6:	81 c0       	rjmp	.+258    	; 0xa9aa <draw_menu(bool)+0x930>
    a8a8:	f4 01       	movw	r30, r8
    a8aa:	e9 59       	subi	r30, 0x99	; 153
    a8ac:	fe 4f       	sbci	r31, 0xFE	; 254
    a8ae:	e6 0d       	add	r30, r6
    a8b0:	f7 1d       	adc	r31, r7
    a8b2:	65 91       	lpm	r22, Z+
    a8b4:	74 91       	lpm	r23, Z
    a8b6:	ce 01       	movw	r24, r28
    a8b8:	8f 57       	subi	r24, 0x7F	; 127
    a8ba:	9f 4f       	sbci	r25, 0xFF	; 255
    a8bc:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    a8c0:	f4 01       	movw	r30, r8
    a8c2:	e7 58       	subi	r30, 0x87	; 135
    a8c4:	fe 4f       	sbci	r31, 0xFE	; 254
    a8c6:	e6 0d       	add	r30, r6
    a8c8:	f7 1d       	adc	r31, r7
    a8ca:	25 91       	lpm	r18, Z+
    a8cc:	34 91       	lpm	r19, Z
    a8ce:	f4 01       	movw	r30, r8
    a8d0:	e5 58       	subi	r30, 0x85	; 133
    a8d2:	fe 4f       	sbci	r31, 0xFE	; 254
    a8d4:	e6 0d       	add	r30, r6
    a8d6:	f7 1d       	adc	r31, r7
    a8d8:	c5 90       	lpm	r12, Z+
    a8da:	d4 90       	lpm	r13, Z
    a8dc:	84 01       	movw	r16, r8
    a8de:	0a 58       	subi	r16, 0x8A	; 138
    a8e0:	1e 4f       	sbci	r17, 0xFE	; 254
    a8e2:	06 0d       	add	r16, r6
    a8e4:	17 1d       	adc	r17, r7
    a8e6:	f8 01       	movw	r30, r16
    a8e8:	84 91       	lpm	r24, Z
    a8ea:	cf 54       	subi	r28, 0x4F	; 79
    a8ec:	df 4f       	sbci	r29, 0xFF	; 255
    a8ee:	68 81       	ld	r22, Y
    a8f0:	c1 5b       	subi	r28, 0xB1	; 177
    a8f2:	d0 40       	sbci	r29, 0x00	; 0
    a8f4:	70 e0       	ldi	r23, 0x00	; 0
    a8f6:	45 2d       	mov	r20, r5
    a8f8:	90 e0       	ldi	r25, 0x00	; 0
    a8fa:	f9 01       	movw	r30, r18
    a8fc:	19 95       	eicall
    a8fe:	f8 2e       	mov	r15, r24
    a900:	cf 55       	subi	r28, 0x5F	; 95
    a902:	df 4f       	sbci	r29, 0xFF	; 255
    a904:	18 82       	st	Y, r1
    a906:	c1 5a       	subi	r28, 0xA1	; 161
    a908:	d0 40       	sbci	r29, 0x00	; 0
    a90a:	f8 01       	movw	r30, r16
    a90c:	44 91       	lpm	r20, Z
    a90e:	84 91       	lpm	r24, Z
    a910:	8e 01       	movw	r16, r28
    a912:	0f 55       	subi	r16, 0x5F	; 95
    a914:	1f 4f       	sbci	r17, 0xFF	; 255
    a916:	9e 01       	movw	r18, r28
    a918:	2f 5f       	subi	r18, 0xFF	; 255
    a91a:	3f 4f       	sbci	r19, 0xFF	; 255
    a91c:	cf 54       	subi	r28, 0x4F	; 79
    a91e:	df 4f       	sbci	r29, 0xFF	; 255
    a920:	68 81       	ld	r22, Y
    a922:	c1 5b       	subi	r28, 0xB1	; 177
    a924:	d0 40       	sbci	r29, 0x00	; 0
    a926:	f6 01       	movw	r30, r12
    a928:	19 95       	eicall
    a92a:	f4 01       	movw	r30, r8
    a92c:	ef 58       	subi	r30, 0x8F	; 143
    a92e:	fe 4f       	sbci	r31, 0xFE	; 254
    a930:	e6 0d       	add	r30, r6
    a932:	f7 1d       	adc	r31, r7
    a934:	05 91       	lpm	r16, Z+
    a936:	14 91       	lpm	r17, Z
    a938:	f4 01       	movw	r30, r8
    a93a:	e1 59       	subi	r30, 0x91	; 145
    a93c:	fe 4f       	sbci	r31, 0xFE	; 254
    a93e:	e6 0d       	add	r30, r6
    a940:	f7 1d       	adc	r31, r7
    a942:	25 91       	lpm	r18, Z+
    a944:	34 91       	lpm	r19, Z
    a946:	f4 01       	movw	r30, r8
    a948:	e3 59       	subi	r30, 0x93	; 147
    a94a:	fe 4f       	sbci	r31, 0xFE	; 254
    a94c:	e6 0d       	add	r30, r6
    a94e:	f7 1d       	adc	r31, r7
    a950:	45 91       	lpm	r20, Z+
    a952:	54 91       	lpm	r21, Z
    a954:	f4 01       	movw	r30, r8
    a956:	e5 59       	subi	r30, 0x95	; 149
    a958:	fe 4f       	sbci	r31, 0xFE	; 254
    a95a:	e6 0d       	add	r30, r6
    a95c:	f7 1d       	adc	r31, r7
    a95e:	65 91       	lpm	r22, Z+
    a960:	74 91       	lpm	r23, Z
    a962:	f4 01       	movw	r30, r8
    a964:	e7 59       	subi	r30, 0x97	; 151
    a966:	fe 4f       	sbci	r31, 0xFE	; 254
    a968:	e6 0d       	add	r30, r6
    a96a:	f7 1d       	adc	r31, r7
    a96c:	85 91       	lpm	r24, Z+
    a96e:	94 91       	lpm	r25, Z
    a970:	ee 24       	eor	r14, r14
    a972:	e3 94       	inc	r14
    a974:	f1 10       	cpse	r15, r1
    a976:	01 c0       	rjmp	.+2      	; 0xa97a <draw_menu(bool)+0x900>
    a978:	e1 2c       	mov	r14, r1
    a97a:	c8 54       	subi	r28, 0x48	; 72
    a97c:	df 4f       	sbci	r29, 0xFF	; 255
    a97e:	e8 81       	ld	r30, Y
    a980:	f9 81       	ldd	r31, Y+1	; 0x01
    a982:	c8 5b       	subi	r28, 0xB8	; 184
    a984:	d0 40       	sbci	r29, 0x00	; 0
    a986:	6e 0f       	add	r22, r30
    a988:	7f 1f       	adc	r23, r31
    a98a:	fe 01       	movw	r30, r28
    a98c:	31 96       	adiw	r30, 0x01	; 1
    a98e:	5f 01       	movw	r10, r30
    a990:	e0 58       	subi	r30, 0x80	; 128
    a992:	ff 4f       	sbci	r31, 0xFF	; 255
    a994:	6f 01       	movw	r12, r30
    a996:	ca 54       	subi	r28, 0x4A	; 74
    a998:	df 4f       	sbci	r29, 0xFF	; 255
    a99a:	e8 81       	ld	r30, Y
    a99c:	f9 81       	ldd	r31, Y+1	; 0x01
    a99e:	c6 5b       	subi	r28, 0xB6	; 182
    a9a0:	d0 40       	sbci	r29, 0x00	; 0
    a9a2:	8e 0f       	add	r24, r30
    a9a4:	9f 1f       	adc	r25, r31
    a9a6:	0e 94 bc 4e 	call	0x9d78	; 0x9d78 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)>
    a9aa:	ce 53       	subi	r28, 0x3E	; 62
    a9ac:	df 4f       	sbci	r29, 0xFF	; 255
    a9ae:	28 81       	ld	r18, Y
    a9b0:	39 81       	ldd	r19, Y+1	; 0x01
    a9b2:	c2 5c       	subi	r28, 0xC2	; 194
    a9b4:	d0 40       	sbci	r29, 0x00	; 0
    a9b6:	23 2b       	or	r18, r19
    a9b8:	09 f4       	brne	.+2      	; 0xa9bc <draw_menu(bool)+0x942>
    a9ba:	62 c0       	rjmp	.+196    	; 0xaa80 <draw_menu(bool)+0xa06>
    a9bc:	cc 53       	subi	r28, 0x3C	; 60
    a9be:	df 4f       	sbci	r29, 0xFF	; 255
    a9c0:	48 81       	ld	r20, Y
    a9c2:	59 81       	ldd	r21, Y+1	; 0x01
    a9c4:	c4 5c       	subi	r28, 0xC4	; 196
    a9c6:	d0 40       	sbci	r29, 0x00	; 0
    a9c8:	45 2b       	or	r20, r21
    a9ca:	09 f4       	brne	.+2      	; 0xa9ce <draw_menu(bool)+0x954>
    a9cc:	59 c0       	rjmp	.+178    	; 0xaa80 <draw_menu(bool)+0xa06>
    a9ce:	f4 01       	movw	r30, r8
    a9d0:	e1 59       	subi	r30, 0x91	; 145
    a9d2:	fe 4f       	sbci	r31, 0xFE	; 254
    a9d4:	e6 0d       	add	r30, r6
    a9d6:	f7 1d       	adc	r31, r7
    a9d8:	25 91       	lpm	r18, Z+
    a9da:	34 91       	lpm	r19, Z
    a9dc:	f4 01       	movw	r30, r8
    a9de:	e3 59       	subi	r30, 0x93	; 147
    a9e0:	fe 4f       	sbci	r31, 0xFE	; 254
    a9e2:	e6 0d       	add	r30, r6
    a9e4:	f7 1d       	adc	r31, r7
    a9e6:	45 91       	lpm	r20, Z+
    a9e8:	54 91       	lpm	r21, Z
    a9ea:	f4 01       	movw	r30, r8
    a9ec:	e5 59       	subi	r30, 0x95	; 149
    a9ee:	fe 4f       	sbci	r31, 0xFE	; 254
    a9f0:	e6 0d       	add	r30, r6
    a9f2:	f7 1d       	adc	r31, r7
    a9f4:	65 91       	lpm	r22, Z+
    a9f6:	74 91       	lpm	r23, Z
    a9f8:	f4 01       	movw	r30, r8
    a9fa:	e7 59       	subi	r30, 0x97	; 151
    a9fc:	fe 4f       	sbci	r31, 0xFE	; 254
    a9fe:	e6 0d       	add	r30, r6
    aa00:	f7 1d       	adc	r31, r7
    aa02:	85 91       	lpm	r24, Z+
    aa04:	94 91       	lpm	r25, Z
    aa06:	c8 54       	subi	r28, 0x48	; 72
    aa08:	df 4f       	sbci	r29, 0xFF	; 255
    aa0a:	e8 81       	ld	r30, Y
    aa0c:	f9 81       	ldd	r31, Y+1	; 0x01
    aa0e:	c8 5b       	subi	r28, 0xB8	; 184
    aa10:	d0 40       	sbci	r29, 0x00	; 0
    aa12:	6e 0f       	add	r22, r30
    aa14:	7f 1f       	adc	r23, r31
    aa16:	cc 53       	subi	r28, 0x3C	; 60
    aa18:	df 4f       	sbci	r29, 0xFF	; 255
    aa1a:	e8 80       	ld	r14, Y
    aa1c:	f9 80       	ldd	r15, Y+1	; 0x01
    aa1e:	c4 5c       	subi	r28, 0xC4	; 196
    aa20:	d0 40       	sbci	r29, 0x00	; 0
    aa22:	ce 53       	subi	r28, 0x3E	; 62
    aa24:	df 4f       	sbci	r29, 0xFF	; 255
    aa26:	08 81       	ld	r16, Y
    aa28:	19 81       	ldd	r17, Y+1	; 0x01
    aa2a:	c2 5c       	subi	r28, 0xC2	; 194
    aa2c:	d0 40       	sbci	r29, 0x00	; 0
    aa2e:	ca 54       	subi	r28, 0x4A	; 74
    aa30:	df 4f       	sbci	r29, 0xFF	; 255
    aa32:	e8 81       	ld	r30, Y
    aa34:	f9 81       	ldd	r31, Y+1	; 0x01
    aa36:	c6 5b       	subi	r28, 0xB6	; 182
    aa38:	d0 40       	sbci	r29, 0x00	; 0
    aa3a:	8e 0f       	add	r24, r30
    aa3c:	9f 1f       	adc	r25, r31
    aa3e:	0e 94 22 50 	call	0xa044	; 0xa044 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    aa42:	18 2f       	mov	r17, r24
    aa44:	88 23       	and	r24, r24
    aa46:	e1 f0       	breq	.+56     	; 0xaa80 <draw_menu(bool)+0xa06>
    aa48:	f4 01       	movw	r30, r8
    aa4a:	e9 58       	subi	r30, 0x89	; 137
    aa4c:	fe 4f       	sbci	r31, 0xFE	; 254
    aa4e:	e6 0d       	add	r30, r6
    aa50:	f7 1d       	adc	r31, r7
    aa52:	25 91       	lpm	r18, Z+
    aa54:	34 91       	lpm	r19, Z
    aa56:	f4 01       	movw	r30, r8
    aa58:	ea 58       	subi	r30, 0x8A	; 138
    aa5a:	fe 4f       	sbci	r31, 0xFE	; 254
    aa5c:	e6 0d       	add	r30, r6
    aa5e:	f7 1d       	adc	r31, r7
    aa60:	84 91       	lpm	r24, Z
    aa62:	cf 54       	subi	r28, 0x4F	; 79
    aa64:	df 4f       	sbci	r29, 0xFF	; 255
    aa66:	68 81       	ld	r22, Y
    aa68:	c1 5b       	subi	r28, 0xB1	; 177
    aa6a:	d0 40       	sbci	r29, 0x00	; 0
    aa6c:	70 e0       	ldi	r23, 0x00	; 0
    aa6e:	45 2d       	mov	r20, r5
    aa70:	90 e0       	ldi	r25, 0x00	; 0
    aa72:	f9 01       	movw	r30, r18
    aa74:	19 95       	eicall
    aa76:	c6 53       	subi	r28, 0x36	; 54
    aa78:	df 4f       	sbci	r29, 0xFF	; 255
    aa7a:	18 83       	st	Y, r17
    aa7c:	ca 5c       	subi	r28, 0xCA	; 202
    aa7e:	d0 40       	sbci	r29, 0x00	; 0
    aa80:	53 94       	inc	r5
    aa82:	fa ce       	rjmp	.-524    	; 0xa878 <draw_menu(bool)+0x7fe>
    aa84:	c6 53       	subi	r28, 0x36	; 54
    aa86:	df 4f       	sbci	r29, 0xFF	; 255
    aa88:	f8 81       	ld	r31, Y
    aa8a:	ca 5c       	subi	r28, 0xCA	; 202
    aa8c:	d0 40       	sbci	r29, 0x00	; 0
    aa8e:	f1 11       	cpse	r31, r1
    aa90:	0c 94 45 61 	jmp	0xc28a	; 0xc28a <draw_menu(bool)+0x2210>
    aa94:	51 2c       	mov	r5, r1
    aa96:	43 01       	movw	r8, r6
    aa98:	2e e3       	ldi	r18, 0x3E	; 62
    aa9a:	82 1a       	sub	r8, r18
    aa9c:	2d ef       	ldi	r18, 0xFD	; 253
    aa9e:	92 0a       	sbc	r9, r18
    aaa0:	f4 01       	movw	r30, r8
    aaa2:	84 91       	lpm	r24, Z
    aaa4:	58 16       	cp	r5, r24
    aaa6:	08 f0       	brcs	.+2      	; 0xaaaa <draw_menu(bool)+0xa30>
    aaa8:	d6 c0       	rjmp	.+428    	; 0xac56 <draw_menu(bool)+0xbdc>
    aaaa:	f0 e1       	ldi	r31, 0x10	; 16
    aaac:	5f 9e       	mul	r5, r31
    aaae:	60 01       	movw	r12, r0
    aab0:	11 24       	eor	r1, r1
    aab2:	f6 01       	movw	r30, r12
    aab4:	e8 51       	subi	r30, 0x18	; 24
    aab6:	fe 4f       	sbci	r31, 0xFE	; 254
    aab8:	e6 0d       	add	r30, r6
    aaba:	f7 1d       	adc	r31, r7
    aabc:	25 91       	lpm	r18, Z+
    aabe:	34 91       	lpm	r19, Z
    aac0:	56 01       	movw	r10, r12
    aac2:	4c e1       	ldi	r20, 0x1C	; 28
    aac4:	a4 1a       	sub	r10, r20
    aac6:	4e ef       	ldi	r20, 0xFE	; 254
    aac8:	b4 0a       	sbc	r11, r20
    aaca:	a6 0c       	add	r10, r6
    aacc:	b7 1c       	adc	r11, r7
    aace:	f5 01       	movw	r30, r10
    aad0:	84 91       	lpm	r24, Z
    aad2:	cf 54       	subi	r28, 0x4F	; 79
    aad4:	df 4f       	sbci	r29, 0xFF	; 255
    aad6:	68 81       	ld	r22, Y
    aad8:	c1 5b       	subi	r28, 0xB1	; 177
    aada:	d0 40       	sbci	r29, 0x00	; 0
    aadc:	70 e0       	ldi	r23, 0x00	; 0
    aade:	45 2d       	mov	r20, r5
    aae0:	90 e0       	ldi	r25, 0x00	; 0
    aae2:	f9 01       	movw	r30, r18
    aae4:	19 95       	eicall
    aae6:	88 23       	and	r24, r24
    aae8:	09 f4       	brne	.+2      	; 0xaaec <draw_menu(bool)+0xa72>
    aaea:	b3 c0       	rjmp	.+358    	; 0xac52 <draw_menu(bool)+0xbd8>
    aaec:	f6 01       	movw	r30, r12
    aaee:	e9 51       	subi	r30, 0x19	; 25
    aaf0:	fe 4f       	sbci	r31, 0xFE	; 254
    aaf2:	e6 0d       	add	r30, r6
    aaf4:	f7 1d       	adc	r31, r7
    aaf6:	84 91       	lpm	r24, Z
    aaf8:	cd 52       	subi	r28, 0x2D	; 45
    aafa:	df 4f       	sbci	r29, 0xFF	; 255
    aafc:	68 81       	ld	r22, Y
    aafe:	c3 5d       	subi	r28, 0xD3	; 211
    ab00:	d0 40       	sbci	r29, 0x00	; 0
    ab02:	0e 94 32 36 	call	0x6c64	; 0x6c64 <enable_redraw(unsigned char, unsigned char)>
    ab06:	88 23       	and	r24, r24
    ab08:	09 f4       	brne	.+2      	; 0xab0c <draw_menu(bool)+0xa92>
    ab0a:	3c c0       	rjmp	.+120    	; 0xab84 <draw_menu(bool)+0xb0a>
    ab0c:	f6 01       	movw	r30, r12
    ab0e:	e6 52       	subi	r30, 0x26	; 38
    ab10:	fe 4f       	sbci	r31, 0xFE	; 254
    ab12:	e6 0d       	add	r30, r6
    ab14:	f7 1d       	adc	r31, r7
    ab16:	e5 90       	lpm	r14, Z+
    ab18:	f4 90       	lpm	r15, Z
    ab1a:	f6 01       	movw	r30, r12
    ab1c:	ed 51       	subi	r30, 0x1D	; 29
    ab1e:	fe 4f       	sbci	r31, 0xFE	; 254
    ab20:	e6 0d       	add	r30, r6
    ab22:	f7 1d       	adc	r31, r7
    ab24:	05 91       	lpm	r16, Z+
    ab26:	14 91       	lpm	r17, Z
    ab28:	f6 01       	movw	r30, r12
    ab2a:	ef 51       	subi	r30, 0x1F	; 31
    ab2c:	fe 4f       	sbci	r31, 0xFE	; 254
    ab2e:	e6 0d       	add	r30, r6
    ab30:	f7 1d       	adc	r31, r7
    ab32:	25 91       	lpm	r18, Z+
    ab34:	34 91       	lpm	r19, Z
    ab36:	f6 01       	movw	r30, r12
    ab38:	e1 52       	subi	r30, 0x21	; 33
    ab3a:	fe 4f       	sbci	r31, 0xFE	; 254
    ab3c:	e6 0d       	add	r30, r6
    ab3e:	f7 1d       	adc	r31, r7
    ab40:	45 91       	lpm	r20, Z+
    ab42:	54 91       	lpm	r21, Z
    ab44:	f6 01       	movw	r30, r12
    ab46:	e3 52       	subi	r30, 0x23	; 35
    ab48:	fe 4f       	sbci	r31, 0xFE	; 254
    ab4a:	e6 0d       	add	r30, r6
    ab4c:	f7 1d       	adc	r31, r7
    ab4e:	65 91       	lpm	r22, Z+
    ab50:	74 91       	lpm	r23, Z
    ab52:	f6 01       	movw	r30, r12
    ab54:	e5 52       	subi	r30, 0x25	; 37
    ab56:	fe 4f       	sbci	r31, 0xFE	; 254
    ab58:	e6 0d       	add	r30, r6
    ab5a:	f7 1d       	adc	r31, r7
    ab5c:	85 91       	lpm	r24, Z+
    ab5e:	94 91       	lpm	r25, Z
    ab60:	c8 54       	subi	r28, 0x48	; 72
    ab62:	df 4f       	sbci	r29, 0xFF	; 255
    ab64:	e8 81       	ld	r30, Y
    ab66:	f9 81       	ldd	r31, Y+1	; 0x01
    ab68:	c8 5b       	subi	r28, 0xB8	; 184
    ab6a:	d0 40       	sbci	r29, 0x00	; 0
    ab6c:	6e 0f       	add	r22, r30
    ab6e:	7f 1f       	adc	r23, r31
    ab70:	ca 54       	subi	r28, 0x4A	; 74
    ab72:	df 4f       	sbci	r29, 0xFF	; 255
    ab74:	e8 81       	ld	r30, Y
    ab76:	f9 81       	ldd	r31, Y+1	; 0x01
    ab78:	c6 5b       	subi	r28, 0xB6	; 182
    ab7a:	d0 40       	sbci	r29, 0x00	; 0
    ab7c:	8e 0f       	add	r24, r30
    ab7e:	9f 1f       	adc	r25, r31
    ab80:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
    ab84:	ce 53       	subi	r28, 0x3E	; 62
    ab86:	df 4f       	sbci	r29, 0xFF	; 255
    ab88:	28 81       	ld	r18, Y
    ab8a:	39 81       	ldd	r19, Y+1	; 0x01
    ab8c:	c2 5c       	subi	r28, 0xC2	; 194
    ab8e:	d0 40       	sbci	r29, 0x00	; 0
    ab90:	23 2b       	or	r18, r19
    ab92:	09 f4       	brne	.+2      	; 0xab96 <draw_menu(bool)+0xb1c>
    ab94:	5e c0       	rjmp	.+188    	; 0xac52 <draw_menu(bool)+0xbd8>
    ab96:	cc 53       	subi	r28, 0x3C	; 60
    ab98:	df 4f       	sbci	r29, 0xFF	; 255
    ab9a:	48 81       	ld	r20, Y
    ab9c:	59 81       	ldd	r21, Y+1	; 0x01
    ab9e:	c4 5c       	subi	r28, 0xC4	; 196
    aba0:	d0 40       	sbci	r29, 0x00	; 0
    aba2:	45 2b       	or	r20, r21
    aba4:	09 f4       	brne	.+2      	; 0xaba8 <draw_menu(bool)+0xb2e>
    aba6:	55 c0       	rjmp	.+170    	; 0xac52 <draw_menu(bool)+0xbd8>
    aba8:	f6 01       	movw	r30, r12
    abaa:	ef 51       	subi	r30, 0x1F	; 31
    abac:	fe 4f       	sbci	r31, 0xFE	; 254
    abae:	e6 0d       	add	r30, r6
    abb0:	f7 1d       	adc	r31, r7
    abb2:	25 91       	lpm	r18, Z+
    abb4:	34 91       	lpm	r19, Z
    abb6:	f6 01       	movw	r30, r12
    abb8:	e1 52       	subi	r30, 0x21	; 33
    abba:	fe 4f       	sbci	r31, 0xFE	; 254
    abbc:	e6 0d       	add	r30, r6
    abbe:	f7 1d       	adc	r31, r7
    abc0:	45 91       	lpm	r20, Z+
    abc2:	54 91       	lpm	r21, Z
    abc4:	f6 01       	movw	r30, r12
    abc6:	e3 52       	subi	r30, 0x23	; 35
    abc8:	fe 4f       	sbci	r31, 0xFE	; 254
    abca:	e6 0d       	add	r30, r6
    abcc:	f7 1d       	adc	r31, r7
    abce:	65 91       	lpm	r22, Z+
    abd0:	74 91       	lpm	r23, Z
    abd2:	f6 01       	movw	r30, r12
    abd4:	e5 52       	subi	r30, 0x25	; 37
    abd6:	fe 4f       	sbci	r31, 0xFE	; 254
    abd8:	e6 0d       	add	r30, r6
    abda:	f7 1d       	adc	r31, r7
    abdc:	85 91       	lpm	r24, Z+
    abde:	94 91       	lpm	r25, Z
    abe0:	c8 54       	subi	r28, 0x48	; 72
    abe2:	df 4f       	sbci	r29, 0xFF	; 255
    abe4:	e8 81       	ld	r30, Y
    abe6:	f9 81       	ldd	r31, Y+1	; 0x01
    abe8:	c8 5b       	subi	r28, 0xB8	; 184
    abea:	d0 40       	sbci	r29, 0x00	; 0
    abec:	6e 0f       	add	r22, r30
    abee:	7f 1f       	adc	r23, r31
    abf0:	cc 53       	subi	r28, 0x3C	; 60
    abf2:	df 4f       	sbci	r29, 0xFF	; 255
    abf4:	e8 80       	ld	r14, Y
    abf6:	f9 80       	ldd	r15, Y+1	; 0x01
    abf8:	c4 5c       	subi	r28, 0xC4	; 196
    abfa:	d0 40       	sbci	r29, 0x00	; 0
    abfc:	ce 53       	subi	r28, 0x3E	; 62
    abfe:	df 4f       	sbci	r29, 0xFF	; 255
    ac00:	08 81       	ld	r16, Y
    ac02:	19 81       	ldd	r17, Y+1	; 0x01
    ac04:	c2 5c       	subi	r28, 0xC2	; 194
    ac06:	d0 40       	sbci	r29, 0x00	; 0
    ac08:	ca 54       	subi	r28, 0x4A	; 74
    ac0a:	df 4f       	sbci	r29, 0xFF	; 255
    ac0c:	e8 81       	ld	r30, Y
    ac0e:	f9 81       	ldd	r31, Y+1	; 0x01
    ac10:	c6 5b       	subi	r28, 0xB6	; 182
    ac12:	d0 40       	sbci	r29, 0x00	; 0
    ac14:	8e 0f       	add	r24, r30
    ac16:	9f 1f       	adc	r25, r31
    ac18:	0e 94 22 50 	call	0xa044	; 0xa044 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    ac1c:	18 2f       	mov	r17, r24
    ac1e:	88 23       	and	r24, r24
    ac20:	c1 f0       	breq	.+48     	; 0xac52 <draw_menu(bool)+0xbd8>
    ac22:	f6 01       	movw	r30, r12
    ac24:	eb 51       	subi	r30, 0x1B	; 27
    ac26:	fe 4f       	sbci	r31, 0xFE	; 254
    ac28:	e6 0d       	add	r30, r6
    ac2a:	f7 1d       	adc	r31, r7
    ac2c:	25 91       	lpm	r18, Z+
    ac2e:	34 91       	lpm	r19, Z
    ac30:	f5 01       	movw	r30, r10
    ac32:	84 91       	lpm	r24, Z
    ac34:	cf 54       	subi	r28, 0x4F	; 79
    ac36:	df 4f       	sbci	r29, 0xFF	; 255
    ac38:	68 81       	ld	r22, Y
    ac3a:	c1 5b       	subi	r28, 0xB1	; 177
    ac3c:	d0 40       	sbci	r29, 0x00	; 0
    ac3e:	70 e0       	ldi	r23, 0x00	; 0
    ac40:	45 2d       	mov	r20, r5
    ac42:	90 e0       	ldi	r25, 0x00	; 0
    ac44:	f9 01       	movw	r30, r18
    ac46:	19 95       	eicall
    ac48:	c6 53       	subi	r28, 0x36	; 54
    ac4a:	df 4f       	sbci	r29, 0xFF	; 255
    ac4c:	18 83       	st	Y, r17
    ac4e:	ca 5c       	subi	r28, 0xCA	; 202
    ac50:	d0 40       	sbci	r29, 0x00	; 0
    ac52:	53 94       	inc	r5
    ac54:	25 cf       	rjmp	.-438    	; 0xaaa0 <draw_menu(bool)+0xa26>
    ac56:	c6 53       	subi	r28, 0x36	; 54
    ac58:	df 4f       	sbci	r29, 0xFF	; 255
    ac5a:	f8 81       	ld	r31, Y
    ac5c:	ca 5c       	subi	r28, 0xCA	; 202
    ac5e:	d0 40       	sbci	r29, 0x00	; 0
    ac60:	f1 11       	cpse	r31, r1
    ac62:	0c 94 45 61 	jmp	0xc28a	; 0xc28a <draw_menu(bool)+0x2210>
    ac66:	51 2c       	mov	r5, r1
    ac68:	93 01       	movw	r18, r6
    ac6a:	2d 53       	subi	r18, 0x3D	; 61
    ac6c:	3d 4f       	sbci	r19, 0xFD	; 253
    ac6e:	cc 52       	subi	r28, 0x2C	; 44
    ac70:	df 4f       	sbci	r29, 0xFF	; 255
    ac72:	39 83       	std	Y+1, r19	; 0x01
    ac74:	28 83       	st	Y, r18
    ac76:	c4 5d       	subi	r28, 0xD4	; 212
    ac78:	d0 40       	sbci	r29, 0x00	; 0
    ac7a:	cc 52       	subi	r28, 0x2C	; 44
    ac7c:	df 4f       	sbci	r29, 0xFF	; 255
    ac7e:	e8 81       	ld	r30, Y
    ac80:	f9 81       	ldd	r31, Y+1	; 0x01
    ac82:	c4 5d       	subi	r28, 0xD4	; 212
    ac84:	d0 40       	sbci	r29, 0x00	; 0
    ac86:	84 91       	lpm	r24, Z
    ac88:	58 16       	cp	r5, r24
    ac8a:	08 f0       	brcs	.+2      	; 0xac8e <draw_menu(bool)+0xc14>
    ac8c:	60 c3       	rjmp	.+1728   	; 0xb34e <draw_menu(bool)+0x12d4>
    ac8e:	f7 e1       	ldi	r31, 0x17	; 23
    ac90:	5f 9e       	mul	r5, r31
    ac92:	60 01       	movw	r12, r0
    ac94:	11 24       	eor	r1, r1
    ac96:	f6 01       	movw	r30, r12
    ac98:	e0 59       	subi	r30, 0x90	; 144
    ac9a:	fd 4f       	sbci	r31, 0xFD	; 253
    ac9c:	e6 0d       	add	r30, r6
    ac9e:	f7 1d       	adc	r31, r7
    aca0:	84 91       	lpm	r24, Z
    aca2:	cd 52       	subi	r28, 0x2D	; 45
    aca4:	df 4f       	sbci	r29, 0xFF	; 255
    aca6:	68 81       	ld	r22, Y
    aca8:	c3 5d       	subi	r28, 0xD3	; 211
    acaa:	d0 40       	sbci	r29, 0x00	; 0
    acac:	0e 94 32 36 	call	0x6c64	; 0x6c64 <enable_redraw(unsigned char, unsigned char)>
    acb0:	88 23       	and	r24, r24
    acb2:	09 f4       	brne	.+2      	; 0xacb6 <draw_menu(bool)+0xc3c>
    acb4:	98 c1       	rjmp	.+816    	; 0xafe6 <draw_menu(bool)+0xf6c>
    acb6:	ce 54       	subi	r28, 0x4E	; 78
    acb8:	df 4f       	sbci	r29, 0xFF	; 255
    acba:	18 82       	st	Y, r1
    acbc:	c2 5b       	subi	r28, 0xB2	; 178
    acbe:	d0 40       	sbci	r29, 0x00	; 0
    acc0:	f6 01       	movw	r30, r12
    acc2:	e2 59       	subi	r30, 0x92	; 146
    acc4:	fd 4f       	sbci	r31, 0xFD	; 253
    acc6:	e6 0d       	add	r30, r6
    acc8:	f7 1d       	adc	r31, r7
    acca:	25 91       	lpm	r18, Z+
    accc:	34 91       	lpm	r19, Z
    acce:	c6 01       	movw	r24, r12
    acd0:	87 59       	subi	r24, 0x97	; 151
    acd2:	9d 4f       	sbci	r25, 0xFD	; 253
    acd4:	a3 01       	movw	r20, r6
    acd6:	48 0f       	add	r20, r24
    acd8:	59 1f       	adc	r21, r25
    acda:	c6 54       	subi	r28, 0x46	; 70
    acdc:	df 4f       	sbci	r29, 0xFF	; 255
    acde:	59 83       	std	Y+1, r21	; 0x01
    ace0:	48 83       	st	Y, r20
    ace2:	ca 5b       	subi	r28, 0xBA	; 186
    ace4:	d0 40       	sbci	r29, 0x00	; 0
    ace6:	fa 01       	movw	r30, r20
    ace8:	84 91       	lpm	r24, Z
    acea:	cf 54       	subi	r28, 0x4F	; 79
    acec:	df 4f       	sbci	r29, 0xFF	; 255
    acee:	68 81       	ld	r22, Y
    acf0:	c1 5b       	subi	r28, 0xB1	; 177
    acf2:	d0 40       	sbci	r29, 0x00	; 0
    acf4:	70 e0       	ldi	r23, 0x00	; 0
    acf6:	40 e0       	ldi	r20, 0x00	; 0
    acf8:	90 e0       	ldi	r25, 0x00	; 0
    acfa:	f9 01       	movw	r30, r18
    acfc:	19 95       	eicall
    acfe:	cd 54       	subi	r28, 0x4D	; 77
    ad00:	df 4f       	sbci	r29, 0xFF	; 255
    ad02:	88 83       	st	Y, r24
    ad04:	c3 5b       	subi	r28, 0xB3	; 179
    ad06:	d0 40       	sbci	r29, 0x00	; 0
    ad08:	f6 01       	movw	r30, r12
    ad0a:	e6 59       	subi	r30, 0x96	; 150
    ad0c:	fd 4f       	sbci	r31, 0xFD	; 253
    ad0e:	e6 0d       	add	r30, r6
    ad10:	f7 1d       	adc	r31, r7
    ad12:	25 91       	lpm	r18, Z+
    ad14:	34 91       	lpm	r19, Z
    ad16:	cf 52       	subi	r28, 0x2F	; 47
    ad18:	df 4f       	sbci	r29, 0xFF	; 255
    ad1a:	39 83       	std	Y+1, r19	; 0x01
    ad1c:	28 83       	st	Y, r18
    ad1e:	c1 5d       	subi	r28, 0xD1	; 209
    ad20:	d0 40       	sbci	r29, 0x00	; 0
    ad22:	46 01       	movw	r8, r12
    ad24:	36 ea       	ldi	r19, 0xA6	; 166
    ad26:	83 1a       	sub	r8, r19
    ad28:	3d ef       	ldi	r19, 0xFD	; 253
    ad2a:	93 0a       	sbc	r9, r19
    ad2c:	86 0c       	add	r8, r6
    ad2e:	97 1c       	adc	r9, r7
    ad30:	56 01       	movw	r10, r12
    ad32:	44 ea       	ldi	r20, 0xA4	; 164
    ad34:	a4 1a       	sub	r10, r20
    ad36:	4d ef       	ldi	r20, 0xFD	; 253
    ad38:	b4 0a       	sbc	r11, r20
    ad3a:	a6 0c       	add	r10, r6
    ad3c:	b7 1c       	adc	r11, r7
    ad3e:	16 01       	movw	r2, r12
    ad40:	5b e9       	ldi	r21, 0x9B	; 155
    ad42:	25 1a       	sub	r2, r21
    ad44:	5d ef       	ldi	r21, 0xFD	; 253
    ad46:	35 0a       	sbc	r3, r21
    ad48:	26 0c       	add	r2, r6
    ad4a:	37 1c       	adc	r3, r7
    ad4c:	c6 01       	movw	r24, r12
    ad4e:	8c 59       	subi	r24, 0x9C	; 156
    ad50:	9d 4f       	sbci	r25, 0xFD	; 253
    ad52:	b3 01       	movw	r22, r6
    ad54:	68 0f       	add	r22, r24
    ad56:	79 1f       	adc	r23, r25
    ad58:	c0 54       	subi	r28, 0x40	; 64
    ad5a:	df 4f       	sbci	r29, 0xFF	; 255
    ad5c:	79 83       	std	Y+1, r23	; 0x01
    ad5e:	68 83       	st	Y, r22
    ad60:	c0 5c       	subi	r28, 0xC0	; 192
    ad62:	d0 40       	sbci	r29, 0x00	; 0
    ad64:	01 97       	sbiw	r24, 0x01	; 1
    ad66:	f3 01       	movw	r30, r6
    ad68:	e8 0f       	add	r30, r24
    ad6a:	f9 1f       	adc	r31, r25
    ad6c:	ca 53       	subi	r28, 0x3A	; 58
    ad6e:	df 4f       	sbci	r29, 0xFF	; 255
    ad70:	f9 83       	std	Y+1, r31	; 0x01
    ad72:	e8 83       	st	Y, r30
    ad74:	c6 5c       	subi	r28, 0xC6	; 198
    ad76:	d0 40       	sbci	r29, 0x00	; 0
    ad78:	03 96       	adiw	r24, 0x03	; 3
    ad7a:	93 01       	movw	r18, r6
    ad7c:	28 0f       	add	r18, r24
    ad7e:	39 1f       	adc	r19, r25
    ad80:	c8 53       	subi	r28, 0x38	; 56
    ad82:	df 4f       	sbci	r29, 0xFF	; 255
    ad84:	39 83       	std	Y+1, r19	; 0x01
    ad86:	28 83       	st	Y, r18
    ad88:	c8 5c       	subi	r28, 0xC8	; 200
    ad8a:	d0 40       	sbci	r29, 0x00	; 0
    ad8c:	04 97       	sbiw	r24, 0x04	; 4
    ad8e:	a3 01       	movw	r20, r6
    ad90:	48 0f       	add	r20, r24
    ad92:	59 1f       	adc	r21, r25
    ad94:	c5 53       	subi	r28, 0x35	; 53
    ad96:	df 4f       	sbci	r29, 0xFF	; 255
    ad98:	59 83       	std	Y+1, r21	; 0x01
    ad9a:	48 83       	st	Y, r20
    ad9c:	cb 5c       	subi	r28, 0xCB	; 203
    ad9e:	d0 40       	sbci	r29, 0x00	; 0
    ada0:	02 97       	sbiw	r24, 0x02	; 2
    ada2:	b3 01       	movw	r22, r6
    ada4:	68 0f       	add	r22, r24
    ada6:	79 1f       	adc	r23, r25
    ada8:	c3 53       	subi	r28, 0x33	; 51
    adaa:	df 4f       	sbci	r29, 0xFF	; 255
    adac:	79 83       	std	Y+1, r23	; 0x01
    adae:	68 83       	st	Y, r22
    adb0:	cd 5c       	subi	r28, 0xCD	; 205
    adb2:	d0 40       	sbci	r29, 0x00	; 0
    adb4:	02 97       	sbiw	r24, 0x02	; 2
    adb6:	f3 01       	movw	r30, r6
    adb8:	e8 0f       	add	r30, r24
    adba:	f9 1f       	adc	r31, r25
    adbc:	c1 53       	subi	r28, 0x31	; 49
    adbe:	df 4f       	sbci	r29, 0xFF	; 255
    adc0:	f9 83       	std	Y+1, r31	; 0x01
    adc2:	e8 83       	st	Y, r30
    adc4:	cf 5c       	subi	r28, 0xCF	; 207
    adc6:	d0 40       	sbci	r29, 0x00	; 0
    adc8:	f1 2c       	mov	r15, r1
    adca:	41 2c       	mov	r4, r1
    adcc:	ce 54       	subi	r28, 0x4E	; 78
    adce:	df 4f       	sbci	r29, 0xFF	; 255
    add0:	88 81       	ld	r24, Y
    add2:	c2 5b       	subi	r28, 0xB2	; 178
    add4:	d0 40       	sbci	r29, 0x00	; 0
    add6:	cd 54       	subi	r28, 0x4D	; 77
    add8:	df 4f       	sbci	r29, 0xFF	; 255
    adda:	98 81       	ld	r25, Y
    addc:	c3 5b       	subi	r28, 0xB3	; 179
    adde:	d0 40       	sbci	r29, 0x00	; 0
    ade0:	89 17       	cp	r24, r25
    ade2:	08 f0       	brcs	.+2      	; 0xade6 <draw_menu(bool)+0xd6c>
    ade4:	00 c1       	rjmp	.+512    	; 0xafe6 <draw_menu(bool)+0xf6c>
    ade6:	f4 01       	movw	r30, r8
    ade8:	45 91       	lpm	r20, Z+
    adea:	54 91       	lpm	r21, Z
    adec:	f5 01       	movw	r30, r10
    adee:	25 91       	lpm	r18, Z+
    adf0:	34 91       	lpm	r19, Z
    adf2:	f1 01       	movw	r30, r2
    adf4:	94 91       	lpm	r25, Z
    adf6:	99 23       	and	r25, r25
    adf8:	09 f4       	brne	.+2      	; 0xadfc <draw_menu(bool)+0xd82>
    adfa:	b7 c0       	rjmp	.+366    	; 0xaf6a <draw_menu(bool)+0xef0>
    adfc:	c8 54       	subi	r28, 0x48	; 72
    adfe:	df 4f       	sbci	r29, 0xFF	; 255
    ae00:	68 81       	ld	r22, Y
    ae02:	79 81       	ldd	r23, Y+1	; 0x01
    ae04:	c8 5b       	subi	r28, 0xB8	; 184
    ae06:	d0 40       	sbci	r29, 0x00	; 0
    ae08:	62 0f       	add	r22, r18
    ae0a:	73 1f       	adc	r23, r19
    ae0c:	c2 54       	subi	r28, 0x42	; 66
    ae0e:	df 4f       	sbci	r29, 0xFF	; 255
    ae10:	79 83       	std	Y+1, r23	; 0x01
    ae12:	68 83       	st	Y, r22
    ae14:	ce 5b       	subi	r28, 0xBE	; 190
    ae16:	d0 40       	sbci	r29, 0x00	; 0
    ae18:	f1 01       	movw	r30, r2
    ae1a:	94 91       	lpm	r25, Z
    ae1c:	91 30       	cpi	r25, 0x01	; 1
    ae1e:	09 f4       	brne	.+2      	; 0xae22 <draw_menu(bool)+0xda8>
    ae20:	c3 c0       	rjmp	.+390    	; 0xafa8 <draw_menu(bool)+0xf2e>
    ae22:	ca 54       	subi	r28, 0x4A	; 74
    ae24:	df 4f       	sbci	r29, 0xFF	; 255
    ae26:	28 81       	ld	r18, Y
    ae28:	39 81       	ldd	r19, Y+1	; 0x01
    ae2a:	c6 5b       	subi	r28, 0xB6	; 182
    ae2c:	d0 40       	sbci	r29, 0x00	; 0
    ae2e:	24 0f       	add	r18, r20
    ae30:	35 1f       	adc	r19, r21
    ae32:	c4 54       	subi	r28, 0x44	; 68
    ae34:	df 4f       	sbci	r29, 0xFF	; 255
    ae36:	39 83       	std	Y+1, r19	; 0x01
    ae38:	28 83       	st	Y, r18
    ae3a:	cc 5b       	subi	r28, 0xBC	; 188
    ae3c:	d0 40       	sbci	r29, 0x00	; 0
    ae3e:	f1 01       	movw	r30, r2
    ae40:	94 91       	lpm	r25, Z
    ae42:	92 30       	cpi	r25, 0x02	; 2
    ae44:	09 f0       	breq	.+2      	; 0xae48 <draw_menu(bool)+0xdce>
    ae46:	46 c0       	rjmp	.+140    	; 0xaed4 <draw_menu(bool)+0xe5a>
    ae48:	f4 01       	movw	r30, r8
    ae4a:	25 91       	lpm	r18, Z+
    ae4c:	34 91       	lpm	r19, Z
    ae4e:	ca 53       	subi	r28, 0x3A	; 58
    ae50:	df 4f       	sbci	r29, 0xFF	; 255
    ae52:	e8 81       	ld	r30, Y
    ae54:	f9 81       	ldd	r31, Y+1	; 0x01
    ae56:	c6 5c       	subi	r28, 0xC6	; 198
    ae58:	d0 40       	sbci	r29, 0x00	; 0
    ae5a:	94 91       	lpm	r25, Z
    ae5c:	ca 54       	subi	r28, 0x4A	; 74
    ae5e:	df 4f       	sbci	r29, 0xFF	; 255
    ae60:	48 81       	ld	r20, Y
    ae62:	59 81       	ldd	r21, Y+1	; 0x01
    ae64:	c6 5b       	subi	r28, 0xB6	; 182
    ae66:	d0 40       	sbci	r29, 0x00	; 0
    ae68:	24 0f       	add	r18, r20
    ae6a:	35 1f       	adc	r19, r21
    ae6c:	b9 01       	movw	r22, r18
    ae6e:	94 9d       	mul	r25, r4
    ae70:	60 0d       	add	r22, r0
    ae72:	71 1d       	adc	r23, r1
    ae74:	11 24       	eor	r1, r1
    ae76:	c4 54       	subi	r28, 0x44	; 68
    ae78:	df 4f       	sbci	r29, 0xFF	; 255
    ae7a:	79 83       	std	Y+1, r23	; 0x01
    ae7c:	68 83       	st	Y, r22
    ae7e:	cc 5b       	subi	r28, 0xBC	; 188
    ae80:	d0 40       	sbci	r29, 0x00	; 0
    ae82:	f5 01       	movw	r30, r10
    ae84:	25 91       	lpm	r18, Z+
    ae86:	34 91       	lpm	r19, Z
    ae88:	c0 54       	subi	r28, 0x40	; 64
    ae8a:	df 4f       	sbci	r29, 0xFF	; 255
    ae8c:	e8 81       	ld	r30, Y
    ae8e:	f9 81       	ldd	r31, Y+1	; 0x01
    ae90:	c0 5c       	subi	r28, 0xC0	; 192
    ae92:	d0 40       	sbci	r29, 0x00	; 0
    ae94:	94 91       	lpm	r25, Z
    ae96:	c8 54       	subi	r28, 0x48	; 72
    ae98:	df 4f       	sbci	r29, 0xFF	; 255
    ae9a:	48 81       	ld	r20, Y
    ae9c:	59 81       	ldd	r21, Y+1	; 0x01
    ae9e:	c8 5b       	subi	r28, 0xB8	; 184
    aea0:	d0 40       	sbci	r29, 0x00	; 0
    aea2:	24 0f       	add	r18, r20
    aea4:	35 1f       	adc	r19, r21
    aea6:	b9 01       	movw	r22, r18
    aea8:	9f 9d       	mul	r25, r15
    aeaa:	60 0d       	add	r22, r0
    aeac:	71 1d       	adc	r23, r1
    aeae:	11 24       	eor	r1, r1
    aeb0:	c2 54       	subi	r28, 0x42	; 66
    aeb2:	df 4f       	sbci	r29, 0xFF	; 255
    aeb4:	79 83       	std	Y+1, r23	; 0x01
    aeb6:	68 83       	st	Y, r22
    aeb8:	ce 5b       	subi	r28, 0xBE	; 190
    aeba:	d0 40       	sbci	r29, 0x00	; 0
    aebc:	43 94       	inc	r4
    aebe:	c8 53       	subi	r28, 0x38	; 56
    aec0:	df 4f       	sbci	r29, 0xFF	; 255
    aec2:	e8 81       	ld	r30, Y
    aec4:	f9 81       	ldd	r31, Y+1	; 0x01
    aec6:	c8 5c       	subi	r28, 0xC8	; 200
    aec8:	d0 40       	sbci	r29, 0x00	; 0
    aeca:	94 91       	lpm	r25, Z
    aecc:	49 16       	cp	r4, r25
    aece:	10 f0       	brcs	.+4      	; 0xaed4 <draw_menu(bool)+0xe5a>
    aed0:	f3 94       	inc	r15
    aed2:	41 2c       	mov	r4, r1
    aed4:	c6 54       	subi	r28, 0x46	; 70
    aed6:	df 4f       	sbci	r29, 0xFF	; 255
    aed8:	e8 81       	ld	r30, Y
    aeda:	f9 81       	ldd	r31, Y+1	; 0x01
    aedc:	ca 5b       	subi	r28, 0xBA	; 186
    aede:	d0 40       	sbci	r29, 0x00	; 0
    aee0:	44 91       	lpm	r20, Z
    aee2:	8e 01       	movw	r16, r28
    aee4:	0f 57       	subi	r16, 0x7F	; 127
    aee6:	1f 4f       	sbci	r17, 0xFF	; 255
    aee8:	9e 01       	movw	r18, r28
    aeea:	2f 5f       	subi	r18, 0xFF	; 255
    aeec:	3f 4f       	sbci	r19, 0xFF	; 255
    aeee:	cf 54       	subi	r28, 0x4F	; 79
    aef0:	df 4f       	sbci	r29, 0xFF	; 255
    aef2:	68 81       	ld	r22, Y
    aef4:	c1 5b       	subi	r28, 0xB1	; 177
    aef6:	d0 40       	sbci	r29, 0x00	; 0
    aef8:	cf 52       	subi	r28, 0x2F	; 47
    aefa:	df 4f       	sbci	r29, 0xFF	; 255
    aefc:	e8 81       	ld	r30, Y
    aefe:	f9 81       	ldd	r31, Y+1	; 0x01
    af00:	c1 5d       	subi	r28, 0xD1	; 209
    af02:	d0 40       	sbci	r29, 0x00	; 0
    af04:	19 95       	eicall
    af06:	c5 53       	subi	r28, 0x35	; 53
    af08:	df 4f       	sbci	r29, 0xFF	; 255
    af0a:	e8 81       	ld	r30, Y
    af0c:	f9 81       	ldd	r31, Y+1	; 0x01
    af0e:	cb 5c       	subi	r28, 0xCB	; 203
    af10:	d0 40       	sbci	r29, 0x00	; 0
    af12:	04 91       	lpm	r16, Z
    af14:	c3 53       	subi	r28, 0x33	; 51
    af16:	df 4f       	sbci	r29, 0xFF	; 255
    af18:	e8 81       	ld	r30, Y
    af1a:	f9 81       	ldd	r31, Y+1	; 0x01
    af1c:	cd 5c       	subi	r28, 0xCD	; 205
    af1e:	d0 40       	sbci	r29, 0x00	; 0
    af20:	25 91       	lpm	r18, Z+
    af22:	34 91       	lpm	r19, Z
    af24:	c1 53       	subi	r28, 0x31	; 49
    af26:	df 4f       	sbci	r29, 0xFF	; 255
    af28:	e8 81       	ld	r30, Y
    af2a:	f9 81       	ldd	r31, Y+1	; 0x01
    af2c:	cf 5c       	subi	r28, 0xCF	; 207
    af2e:	d0 40       	sbci	r29, 0x00	; 0
    af30:	45 91       	lpm	r20, Z+
    af32:	54 91       	lpm	r21, Z
    af34:	e9 80       	ldd	r14, Y+1	; 0x01
    af36:	c2 54       	subi	r28, 0x42	; 66
    af38:	df 4f       	sbci	r29, 0xFF	; 255
    af3a:	68 81       	ld	r22, Y
    af3c:	79 81       	ldd	r23, Y+1	; 0x01
    af3e:	ce 5b       	subi	r28, 0xBE	; 190
    af40:	d0 40       	sbci	r29, 0x00	; 0
    af42:	c4 54       	subi	r28, 0x44	; 68
    af44:	df 4f       	sbci	r29, 0xFF	; 255
    af46:	88 81       	ld	r24, Y
    af48:	99 81       	ldd	r25, Y+1	; 0x01
    af4a:	cc 5b       	subi	r28, 0xBC	; 188
    af4c:	d0 40       	sbci	r29, 0x00	; 0
    af4e:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
    af52:	ce 54       	subi	r28, 0x4E	; 78
    af54:	df 4f       	sbci	r29, 0xFF	; 255
    af56:	88 81       	ld	r24, Y
    af58:	c2 5b       	subi	r28, 0xB2	; 178
    af5a:	d0 40       	sbci	r29, 0x00	; 0
    af5c:	8f 5f       	subi	r24, 0xFF	; 255
    af5e:	ce 54       	subi	r28, 0x4E	; 78
    af60:	df 4f       	sbci	r29, 0xFF	; 255
    af62:	88 83       	st	Y, r24
    af64:	c2 5b       	subi	r28, 0xB2	; 178
    af66:	d0 40       	sbci	r29, 0x00	; 0
    af68:	31 cf       	rjmp	.-414    	; 0xadcc <draw_menu(bool)+0xd52>
    af6a:	f5 01       	movw	r30, r10
    af6c:	25 91       	lpm	r18, Z+
    af6e:	34 91       	lpm	r19, Z
    af70:	c0 54       	subi	r28, 0x40	; 64
    af72:	df 4f       	sbci	r29, 0xFF	; 255
    af74:	e8 81       	ld	r30, Y
    af76:	f9 81       	ldd	r31, Y+1	; 0x01
    af78:	c0 5c       	subi	r28, 0xC0	; 192
    af7a:	d0 40       	sbci	r29, 0x00	; 0
    af7c:	94 91       	lpm	r25, Z
    af7e:	c8 54       	subi	r28, 0x48	; 72
    af80:	df 4f       	sbci	r29, 0xFF	; 255
    af82:	68 81       	ld	r22, Y
    af84:	79 81       	ldd	r23, Y+1	; 0x01
    af86:	c8 5b       	subi	r28, 0xB8	; 184
    af88:	d0 40       	sbci	r29, 0x00	; 0
    af8a:	26 0f       	add	r18, r22
    af8c:	37 1f       	adc	r19, r23
    af8e:	f9 01       	movw	r30, r18
    af90:	94 9d       	mul	r25, r4
    af92:	e0 0d       	add	r30, r0
    af94:	f1 1d       	adc	r31, r1
    af96:	11 24       	eor	r1, r1
    af98:	c2 54       	subi	r28, 0x42	; 66
    af9a:	df 4f       	sbci	r29, 0xFF	; 255
    af9c:	f9 83       	std	Y+1, r31	; 0x01
    af9e:	e8 83       	st	Y, r30
    afa0:	ce 5b       	subi	r28, 0xBE	; 190
    afa2:	d0 40       	sbci	r29, 0x00	; 0
    afa4:	43 94       	inc	r4
    afa6:	38 cf       	rjmp	.-400    	; 0xae18 <draw_menu(bool)+0xd9e>
    afa8:	f4 01       	movw	r30, r8
    afaa:	25 91       	lpm	r18, Z+
    afac:	34 91       	lpm	r19, Z
    afae:	ca 53       	subi	r28, 0x3A	; 58
    afb0:	df 4f       	sbci	r29, 0xFF	; 255
    afb2:	e8 81       	ld	r30, Y
    afb4:	f9 81       	ldd	r31, Y+1	; 0x01
    afb6:	c6 5c       	subi	r28, 0xC6	; 198
    afb8:	d0 40       	sbci	r29, 0x00	; 0
    afba:	94 91       	lpm	r25, Z
    afbc:	ca 54       	subi	r28, 0x4A	; 74
    afbe:	df 4f       	sbci	r29, 0xFF	; 255
    afc0:	48 81       	ld	r20, Y
    afc2:	59 81       	ldd	r21, Y+1	; 0x01
    afc4:	c6 5b       	subi	r28, 0xB6	; 182
    afc6:	d0 40       	sbci	r29, 0x00	; 0
    afc8:	24 0f       	add	r18, r20
    afca:	35 1f       	adc	r19, r21
    afcc:	b9 01       	movw	r22, r18
    afce:	94 9d       	mul	r25, r4
    afd0:	60 0d       	add	r22, r0
    afd2:	71 1d       	adc	r23, r1
    afd4:	11 24       	eor	r1, r1
    afd6:	c4 54       	subi	r28, 0x44	; 68
    afd8:	df 4f       	sbci	r29, 0xFF	; 255
    afda:	79 83       	std	Y+1, r23	; 0x01
    afdc:	68 83       	st	Y, r22
    afde:	cc 5b       	subi	r28, 0xBC	; 188
    afe0:	d0 40       	sbci	r29, 0x00	; 0
    afe2:	43 94       	inc	r4
    afe4:	2c cf       	rjmp	.-424    	; 0xae3e <draw_menu(bool)+0xdc4>
    afe6:	ce 53       	subi	r28, 0x3E	; 62
    afe8:	df 4f       	sbci	r29, 0xFF	; 255
    afea:	28 81       	ld	r18, Y
    afec:	39 81       	ldd	r19, Y+1	; 0x01
    afee:	c2 5c       	subi	r28, 0xC2	; 194
    aff0:	d0 40       	sbci	r29, 0x00	; 0
    aff2:	23 2b       	or	r18, r19
    aff4:	09 f4       	brne	.+2      	; 0xaff8 <draw_menu(bool)+0xf7e>
    aff6:	69 c1       	rjmp	.+722    	; 0xb2ca <draw_menu(bool)+0x1250>
    aff8:	cc 53       	subi	r28, 0x3C	; 60
    affa:	df 4f       	sbci	r29, 0xFF	; 255
    affc:	48 81       	ld	r20, Y
    affe:	59 81       	ldd	r21, Y+1	; 0x01
    b000:	c4 5c       	subi	r28, 0xC4	; 196
    b002:	d0 40       	sbci	r29, 0x00	; 0
    b004:	45 2b       	or	r20, r21
    b006:	09 f4       	brne	.+2      	; 0xb00a <draw_menu(bool)+0xf90>
    b008:	60 c1       	rjmp	.+704    	; 0xb2ca <draw_menu(bool)+0x1250>
    b00a:	ce 54       	subi	r28, 0x4E	; 78
    b00c:	df 4f       	sbci	r29, 0xFF	; 255
    b00e:	18 82       	st	Y, r1
    b010:	c2 5b       	subi	r28, 0xB2	; 178
    b012:	d0 40       	sbci	r29, 0x00	; 0
    b014:	f6 01       	movw	r30, r12
    b016:	e2 59       	subi	r30, 0x92	; 146
    b018:	fd 4f       	sbci	r31, 0xFD	; 253
    b01a:	e6 0d       	add	r30, r6
    b01c:	f7 1d       	adc	r31, r7
    b01e:	25 91       	lpm	r18, Z+
    b020:	34 91       	lpm	r19, Z
    b022:	c6 01       	movw	r24, r12
    b024:	87 59       	subi	r24, 0x97	; 151
    b026:	9d 4f       	sbci	r25, 0xFD	; 253
    b028:	b3 01       	movw	r22, r6
    b02a:	68 0f       	add	r22, r24
    b02c:	79 1f       	adc	r23, r25
    b02e:	ca 53       	subi	r28, 0x3A	; 58
    b030:	df 4f       	sbci	r29, 0xFF	; 255
    b032:	79 83       	std	Y+1, r23	; 0x01
    b034:	68 83       	st	Y, r22
    b036:	c6 5c       	subi	r28, 0xC6	; 198
    b038:	d0 40       	sbci	r29, 0x00	; 0
    b03a:	fb 01       	movw	r30, r22
    b03c:	84 91       	lpm	r24, Z
    b03e:	cf 54       	subi	r28, 0x4F	; 79
    b040:	df 4f       	sbci	r29, 0xFF	; 255
    b042:	68 81       	ld	r22, Y
    b044:	c1 5b       	subi	r28, 0xB1	; 177
    b046:	d0 40       	sbci	r29, 0x00	; 0
    b048:	70 e0       	ldi	r23, 0x00	; 0
    b04a:	40 e0       	ldi	r20, 0x00	; 0
    b04c:	90 e0       	ldi	r25, 0x00	; 0
    b04e:	f9 01       	movw	r30, r18
    b050:	19 95       	eicall
    b052:	c0 54       	subi	r28, 0x40	; 64
    b054:	df 4f       	sbci	r29, 0xFF	; 255
    b056:	88 83       	st	Y, r24
    b058:	c0 5c       	subi	r28, 0xC0	; 192
    b05a:	d0 40       	sbci	r29, 0x00	; 0
    b05c:	cd 54       	subi	r28, 0x4D	; 77
    b05e:	df 4f       	sbci	r29, 0xFF	; 255
    b060:	88 83       	st	Y, r24
    b062:	c3 5b       	subi	r28, 0xB3	; 179
    b064:	d0 40       	sbci	r29, 0x00	; 0
    b066:	ce 54       	subi	r28, 0x4E	; 78
    b068:	df 4f       	sbci	r29, 0xFF	; 255
    b06a:	a8 80       	ld	r10, Y
    b06c:	c2 5b       	subi	r28, 0xB2	; 178
    b06e:	d0 40       	sbci	r29, 0x00	; 0
    b070:	16 01       	movw	r2, r12
    b072:	f6 ea       	ldi	r31, 0xA6	; 166
    b074:	2f 1a       	sub	r2, r31
    b076:	fd ef       	ldi	r31, 0xFD	; 253
    b078:	3f 0a       	sbc	r3, r31
    b07a:	26 0c       	add	r2, r6
    b07c:	37 1c       	adc	r3, r7
    b07e:	46 01       	movw	r8, r12
    b080:	24 ea       	ldi	r18, 0xA4	; 164
    b082:	82 1a       	sub	r8, r18
    b084:	2d ef       	ldi	r18, 0xFD	; 253
    b086:	92 0a       	sbc	r9, r18
    b088:	86 0c       	add	r8, r6
    b08a:	97 1c       	adc	r9, r7
    b08c:	c6 01       	movw	r24, r12
    b08e:	8b 59       	subi	r24, 0x9B	; 155
    b090:	9d 4f       	sbci	r25, 0xFD	; 253
    b092:	a3 01       	movw	r20, r6
    b094:	48 0f       	add	r20, r24
    b096:	59 1f       	adc	r21, r25
    b098:	c6 54       	subi	r28, 0x46	; 70
    b09a:	df 4f       	sbci	r29, 0xFF	; 255
    b09c:	59 83       	std	Y+1, r21	; 0x01
    b09e:	48 83       	st	Y, r20
    b0a0:	ca 5b       	subi	r28, 0xBA	; 186
    b0a2:	d0 40       	sbci	r29, 0x00	; 0
    b0a4:	01 97       	sbiw	r24, 0x01	; 1
    b0a6:	b3 01       	movw	r22, r6
    b0a8:	68 0f       	add	r22, r24
    b0aa:	79 1f       	adc	r23, r25
    b0ac:	c8 53       	subi	r28, 0x38	; 56
    b0ae:	df 4f       	sbci	r29, 0xFF	; 255
    b0b0:	79 83       	std	Y+1, r23	; 0x01
    b0b2:	68 83       	st	Y, r22
    b0b4:	c8 5c       	subi	r28, 0xC8	; 200
    b0b6:	d0 40       	sbci	r29, 0x00	; 0
    b0b8:	01 97       	sbiw	r24, 0x01	; 1
    b0ba:	f3 01       	movw	r30, r6
    b0bc:	e8 0f       	add	r30, r24
    b0be:	f9 1f       	adc	r31, r25
    b0c0:	c5 53       	subi	r28, 0x35	; 53
    b0c2:	df 4f       	sbci	r29, 0xFF	; 255
    b0c4:	f9 83       	std	Y+1, r31	; 0x01
    b0c6:	e8 83       	st	Y, r30
    b0c8:	cb 5c       	subi	r28, 0xCB	; 203
    b0ca:	d0 40       	sbci	r29, 0x00	; 0
    b0cc:	03 96       	adiw	r24, 0x03	; 3
    b0ce:	93 01       	movw	r18, r6
    b0d0:	28 0f       	add	r18, r24
    b0d2:	39 1f       	adc	r19, r25
    b0d4:	c3 53       	subi	r28, 0x33	; 51
    b0d6:	df 4f       	sbci	r29, 0xFF	; 255
    b0d8:	39 83       	std	Y+1, r19	; 0x01
    b0da:	28 83       	st	Y, r18
    b0dc:	cd 5c       	subi	r28, 0xCD	; 205
    b0de:	d0 40       	sbci	r29, 0x00	; 0
    b0e0:	06 97       	sbiw	r24, 0x06	; 6
    b0e2:	a3 01       	movw	r20, r6
    b0e4:	48 0f       	add	r20, r24
    b0e6:	59 1f       	adc	r21, r25
    b0e8:	c1 53       	subi	r28, 0x31	; 49
    b0ea:	df 4f       	sbci	r29, 0xFF	; 255
    b0ec:	59 83       	std	Y+1, r21	; 0x01
    b0ee:	48 83       	st	Y, r20
    b0f0:	cf 5c       	subi	r28, 0xCF	; 207
    b0f2:	d0 40       	sbci	r29, 0x00	; 0
    b0f4:	02 97       	sbiw	r24, 0x02	; 2
    b0f6:	b3 01       	movw	r22, r6
    b0f8:	68 0f       	add	r22, r24
    b0fa:	79 1f       	adc	r23, r25
    b0fc:	cf 52       	subi	r28, 0x2F	; 47
    b0fe:	df 4f       	sbci	r29, 0xFF	; 255
    b100:	79 83       	std	Y+1, r23	; 0x01
    b102:	68 83       	st	Y, r22
    b104:	c1 5d       	subi	r28, 0xD1	; 209
    b106:	d0 40       	sbci	r29, 0x00	; 0
    b108:	41 2c       	mov	r4, r1
    b10a:	b1 2c       	mov	r11, r1
    b10c:	c0 54       	subi	r28, 0x40	; 64
    b10e:	df 4f       	sbci	r29, 0xFF	; 255
    b110:	78 81       	ld	r23, Y
    b112:	c0 5c       	subi	r28, 0xC0	; 192
    b114:	d0 40       	sbci	r29, 0x00	; 0
    b116:	a7 16       	cp	r10, r23
    b118:	08 f0       	brcs	.+2      	; 0xb11c <draw_menu(bool)+0x10a2>
    b11a:	d7 c0       	rjmp	.+430    	; 0xb2ca <draw_menu(bool)+0x1250>
    b11c:	f1 01       	movw	r30, r2
    b11e:	25 91       	lpm	r18, Z+
    b120:	34 91       	lpm	r19, Z
    b122:	f4 01       	movw	r30, r8
    b124:	85 91       	lpm	r24, Z+
    b126:	94 91       	lpm	r25, Z
    b128:	c6 54       	subi	r28, 0x46	; 70
    b12a:	df 4f       	sbci	r29, 0xFF	; 255
    b12c:	e8 81       	ld	r30, Y
    b12e:	f9 81       	ldd	r31, Y+1	; 0x01
    b130:	ca 5b       	subi	r28, 0xBA	; 186
    b132:	d0 40       	sbci	r29, 0x00	; 0
    b134:	44 91       	lpm	r20, Z
    b136:	44 23       	and	r20, r20
    b138:	09 f4       	brne	.+2      	; 0xb13c <draw_menu(bool)+0x10c2>
    b13a:	cb c0       	rjmp	.+406    	; 0xb2d2 <draw_menu(bool)+0x1258>
    b13c:	c8 54       	subi	r28, 0x48	; 72
    b13e:	df 4f       	sbci	r29, 0xFF	; 255
    b140:	48 81       	ld	r20, Y
    b142:	59 81       	ldd	r21, Y+1	; 0x01
    b144:	c8 5b       	subi	r28, 0xB8	; 184
    b146:	d0 40       	sbci	r29, 0x00	; 0
    b148:	48 0f       	add	r20, r24
    b14a:	59 1f       	adc	r21, r25
    b14c:	c2 54       	subi	r28, 0x42	; 66
    b14e:	df 4f       	sbci	r29, 0xFF	; 255
    b150:	59 83       	std	Y+1, r21	; 0x01
    b152:	48 83       	st	Y, r20
    b154:	ce 5b       	subi	r28, 0xBE	; 190
    b156:	d0 40       	sbci	r29, 0x00	; 0
    b158:	c6 54       	subi	r28, 0x46	; 70
    b15a:	df 4f       	sbci	r29, 0xFF	; 255
    b15c:	e8 81       	ld	r30, Y
    b15e:	f9 81       	ldd	r31, Y+1	; 0x01
    b160:	ca 5b       	subi	r28, 0xBA	; 186
    b162:	d0 40       	sbci	r29, 0x00	; 0
    b164:	84 91       	lpm	r24, Z
    b166:	81 30       	cpi	r24, 0x01	; 1
    b168:	09 f4       	brne	.+2      	; 0xb16c <draw_menu(bool)+0x10f2>
    b16a:	d2 c0       	rjmp	.+420    	; 0xb310 <draw_menu(bool)+0x1296>
    b16c:	ca 54       	subi	r28, 0x4A	; 74
    b16e:	df 4f       	sbci	r29, 0xFF	; 255
    b170:	48 81       	ld	r20, Y
    b172:	59 81       	ldd	r21, Y+1	; 0x01
    b174:	c6 5b       	subi	r28, 0xB6	; 182
    b176:	d0 40       	sbci	r29, 0x00	; 0
    b178:	42 0f       	add	r20, r18
    b17a:	53 1f       	adc	r21, r19
    b17c:	c4 54       	subi	r28, 0x44	; 68
    b17e:	df 4f       	sbci	r29, 0xFF	; 255
    b180:	59 83       	std	Y+1, r21	; 0x01
    b182:	48 83       	st	Y, r20
    b184:	cc 5b       	subi	r28, 0xBC	; 188
    b186:	d0 40       	sbci	r29, 0x00	; 0
    b188:	c6 54       	subi	r28, 0x46	; 70
    b18a:	df 4f       	sbci	r29, 0xFF	; 255
    b18c:	e8 81       	ld	r30, Y
    b18e:	f9 81       	ldd	r31, Y+1	; 0x01
    b190:	ca 5b       	subi	r28, 0xBA	; 186
    b192:	d0 40       	sbci	r29, 0x00	; 0
    b194:	84 91       	lpm	r24, Z
    b196:	82 30       	cpi	r24, 0x02	; 2
    b198:	09 f0       	breq	.+2      	; 0xb19c <draw_menu(bool)+0x1122>
    b19a:	46 c0       	rjmp	.+140    	; 0xb228 <draw_menu(bool)+0x11ae>
    b19c:	f1 01       	movw	r30, r2
    b19e:	85 91       	lpm	r24, Z+
    b1a0:	94 91       	lpm	r25, Z
    b1a2:	c5 53       	subi	r28, 0x35	; 53
    b1a4:	df 4f       	sbci	r29, 0xFF	; 255
    b1a6:	e8 81       	ld	r30, Y
    b1a8:	f9 81       	ldd	r31, Y+1	; 0x01
    b1aa:	cb 5c       	subi	r28, 0xCB	; 203
    b1ac:	d0 40       	sbci	r29, 0x00	; 0
    b1ae:	24 91       	lpm	r18, Z
    b1b0:	ca 54       	subi	r28, 0x4A	; 74
    b1b2:	df 4f       	sbci	r29, 0xFF	; 255
    b1b4:	48 81       	ld	r20, Y
    b1b6:	59 81       	ldd	r21, Y+1	; 0x01
    b1b8:	c6 5b       	subi	r28, 0xB6	; 182
    b1ba:	d0 40       	sbci	r29, 0x00	; 0
    b1bc:	84 0f       	add	r24, r20
    b1be:	95 1f       	adc	r25, r21
    b1c0:	bc 01       	movw	r22, r24
    b1c2:	2b 9d       	mul	r18, r11
    b1c4:	60 0d       	add	r22, r0
    b1c6:	71 1d       	adc	r23, r1
    b1c8:	11 24       	eor	r1, r1
    b1ca:	c4 54       	subi	r28, 0x44	; 68
    b1cc:	df 4f       	sbci	r29, 0xFF	; 255
    b1ce:	79 83       	std	Y+1, r23	; 0x01
    b1d0:	68 83       	st	Y, r22
    b1d2:	cc 5b       	subi	r28, 0xBC	; 188
    b1d4:	d0 40       	sbci	r29, 0x00	; 0
    b1d6:	f4 01       	movw	r30, r8
    b1d8:	85 91       	lpm	r24, Z+
    b1da:	94 91       	lpm	r25, Z
    b1dc:	c8 53       	subi	r28, 0x38	; 56
    b1de:	df 4f       	sbci	r29, 0xFF	; 255
    b1e0:	e8 81       	ld	r30, Y
    b1e2:	f9 81       	ldd	r31, Y+1	; 0x01
    b1e4:	c8 5c       	subi	r28, 0xC8	; 200
    b1e6:	d0 40       	sbci	r29, 0x00	; 0
    b1e8:	24 91       	lpm	r18, Z
    b1ea:	c8 54       	subi	r28, 0x48	; 72
    b1ec:	df 4f       	sbci	r29, 0xFF	; 255
    b1ee:	48 81       	ld	r20, Y
    b1f0:	59 81       	ldd	r21, Y+1	; 0x01
    b1f2:	c8 5b       	subi	r28, 0xB8	; 184
    b1f4:	d0 40       	sbci	r29, 0x00	; 0
    b1f6:	84 0f       	add	r24, r20
    b1f8:	95 1f       	adc	r25, r21
    b1fa:	bc 01       	movw	r22, r24
    b1fc:	24 9d       	mul	r18, r4
    b1fe:	60 0d       	add	r22, r0
    b200:	71 1d       	adc	r23, r1
    b202:	11 24       	eor	r1, r1
    b204:	c2 54       	subi	r28, 0x42	; 66
    b206:	df 4f       	sbci	r29, 0xFF	; 255
    b208:	79 83       	std	Y+1, r23	; 0x01
    b20a:	68 83       	st	Y, r22
    b20c:	ce 5b       	subi	r28, 0xBE	; 190
    b20e:	d0 40       	sbci	r29, 0x00	; 0
    b210:	b3 94       	inc	r11
    b212:	c3 53       	subi	r28, 0x33	; 51
    b214:	df 4f       	sbci	r29, 0xFF	; 255
    b216:	e8 81       	ld	r30, Y
    b218:	f9 81       	ldd	r31, Y+1	; 0x01
    b21a:	cd 5c       	subi	r28, 0xCD	; 205
    b21c:	d0 40       	sbci	r29, 0x00	; 0
    b21e:	84 91       	lpm	r24, Z
    b220:	b8 16       	cp	r11, r24
    b222:	10 f0       	brcs	.+4      	; 0xb228 <draw_menu(bool)+0x11ae>
    b224:	43 94       	inc	r4
    b226:	b1 2c       	mov	r11, r1
    b228:	c1 53       	subi	r28, 0x31	; 49
    b22a:	df 4f       	sbci	r29, 0xFF	; 255
    b22c:	e8 81       	ld	r30, Y
    b22e:	f9 81       	ldd	r31, Y+1	; 0x01
    b230:	cf 5c       	subi	r28, 0xCF	; 207
    b232:	d0 40       	sbci	r29, 0x00	; 0
    b234:	25 91       	lpm	r18, Z+
    b236:	34 91       	lpm	r19, Z
    b238:	cf 52       	subi	r28, 0x2F	; 47
    b23a:	df 4f       	sbci	r29, 0xFF	; 255
    b23c:	e8 81       	ld	r30, Y
    b23e:	f9 81       	ldd	r31, Y+1	; 0x01
    b240:	c1 5d       	subi	r28, 0xD1	; 209
    b242:	d0 40       	sbci	r29, 0x00	; 0
    b244:	45 91       	lpm	r20, Z+
    b246:	54 91       	lpm	r21, Z
    b248:	cc 53       	subi	r28, 0x3C	; 60
    b24a:	df 4f       	sbci	r29, 0xFF	; 255
    b24c:	e8 80       	ld	r14, Y
    b24e:	f9 80       	ldd	r15, Y+1	; 0x01
    b250:	c4 5c       	subi	r28, 0xC4	; 196
    b252:	d0 40       	sbci	r29, 0x00	; 0
    b254:	ce 53       	subi	r28, 0x3E	; 62
    b256:	df 4f       	sbci	r29, 0xFF	; 255
    b258:	08 81       	ld	r16, Y
    b25a:	19 81       	ldd	r17, Y+1	; 0x01
    b25c:	c2 5c       	subi	r28, 0xC2	; 194
    b25e:	d0 40       	sbci	r29, 0x00	; 0
    b260:	c2 54       	subi	r28, 0x42	; 66
    b262:	df 4f       	sbci	r29, 0xFF	; 255
    b264:	68 81       	ld	r22, Y
    b266:	79 81       	ldd	r23, Y+1	; 0x01
    b268:	ce 5b       	subi	r28, 0xBE	; 190
    b26a:	d0 40       	sbci	r29, 0x00	; 0
    b26c:	c4 54       	subi	r28, 0x44	; 68
    b26e:	df 4f       	sbci	r29, 0xFF	; 255
    b270:	88 81       	ld	r24, Y
    b272:	99 81       	ldd	r25, Y+1	; 0x01
    b274:	cc 5b       	subi	r28, 0xBC	; 188
    b276:	d0 40       	sbci	r29, 0x00	; 0
    b278:	0e 94 22 50 	call	0xa044	; 0xa044 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b27c:	18 2f       	mov	r17, r24
    b27e:	81 e0       	ldi	r24, 0x01	; 1
    b280:	8a 0d       	add	r24, r10
    b282:	11 23       	and	r17, r17
    b284:	21 f1       	breq	.+72     	; 0xb2ce <draw_menu(bool)+0x1254>
    b286:	ce 54       	subi	r28, 0x4E	; 78
    b288:	df 4f       	sbci	r29, 0xFF	; 255
    b28a:	a8 82       	st	Y, r10
    b28c:	c2 5b       	subi	r28, 0xB2	; 178
    b28e:	d0 40       	sbci	r29, 0x00	; 0
    b290:	f6 01       	movw	r30, r12
    b292:	e4 59       	subi	r30, 0x94	; 148
    b294:	fd 4f       	sbci	r31, 0xFD	; 253
    b296:	e6 0d       	add	r30, r6
    b298:	f7 1d       	adc	r31, r7
    b29a:	25 91       	lpm	r18, Z+
    b29c:	34 91       	lpm	r19, Z
    b29e:	ca 53       	subi	r28, 0x3A	; 58
    b2a0:	df 4f       	sbci	r29, 0xFF	; 255
    b2a2:	e8 81       	ld	r30, Y
    b2a4:	f9 81       	ldd	r31, Y+1	; 0x01
    b2a6:	c6 5c       	subi	r28, 0xC6	; 198
    b2a8:	d0 40       	sbci	r29, 0x00	; 0
    b2aa:	84 91       	lpm	r24, Z
    b2ac:	cf 54       	subi	r28, 0x4F	; 79
    b2ae:	df 4f       	sbci	r29, 0xFF	; 255
    b2b0:	68 81       	ld	r22, Y
    b2b2:	c1 5b       	subi	r28, 0xB1	; 177
    b2b4:	d0 40       	sbci	r29, 0x00	; 0
    b2b6:	70 e0       	ldi	r23, 0x00	; 0
    b2b8:	4a 2d       	mov	r20, r10
    b2ba:	90 e0       	ldi	r25, 0x00	; 0
    b2bc:	f9 01       	movw	r30, r18
    b2be:	19 95       	eicall
    b2c0:	c6 53       	subi	r28, 0x36	; 54
    b2c2:	df 4f       	sbci	r29, 0xFF	; 255
    b2c4:	18 83       	st	Y, r17
    b2c6:	ca 5c       	subi	r28, 0xCA	; 202
    b2c8:	d0 40       	sbci	r29, 0x00	; 0
    b2ca:	53 94       	inc	r5
    b2cc:	d6 cc       	rjmp	.-1620   	; 0xac7a <draw_menu(bool)+0xc00>
    b2ce:	a8 2e       	mov	r10, r24
    b2d0:	1d cf       	rjmp	.-454    	; 0xb10c <draw_menu(bool)+0x1092>
    b2d2:	f4 01       	movw	r30, r8
    b2d4:	85 91       	lpm	r24, Z+
    b2d6:	94 91       	lpm	r25, Z
    b2d8:	c8 53       	subi	r28, 0x38	; 56
    b2da:	df 4f       	sbci	r29, 0xFF	; 255
    b2dc:	e8 81       	ld	r30, Y
    b2de:	f9 81       	ldd	r31, Y+1	; 0x01
    b2e0:	c8 5c       	subi	r28, 0xC8	; 200
    b2e2:	d0 40       	sbci	r29, 0x00	; 0
    b2e4:	44 91       	lpm	r20, Z
    b2e6:	c8 54       	subi	r28, 0x48	; 72
    b2e8:	df 4f       	sbci	r29, 0xFF	; 255
    b2ea:	68 81       	ld	r22, Y
    b2ec:	79 81       	ldd	r23, Y+1	; 0x01
    b2ee:	c8 5b       	subi	r28, 0xB8	; 184
    b2f0:	d0 40       	sbci	r29, 0x00	; 0
    b2f2:	86 0f       	add	r24, r22
    b2f4:	97 1f       	adc	r25, r23
    b2f6:	fc 01       	movw	r30, r24
    b2f8:	4b 9d       	mul	r20, r11
    b2fa:	e0 0d       	add	r30, r0
    b2fc:	f1 1d       	adc	r31, r1
    b2fe:	11 24       	eor	r1, r1
    b300:	c2 54       	subi	r28, 0x42	; 66
    b302:	df 4f       	sbci	r29, 0xFF	; 255
    b304:	f9 83       	std	Y+1, r31	; 0x01
    b306:	e8 83       	st	Y, r30
    b308:	ce 5b       	subi	r28, 0xBE	; 190
    b30a:	d0 40       	sbci	r29, 0x00	; 0
    b30c:	b3 94       	inc	r11
    b30e:	24 cf       	rjmp	.-440    	; 0xb158 <draw_menu(bool)+0x10de>
    b310:	f1 01       	movw	r30, r2
    b312:	85 91       	lpm	r24, Z+
    b314:	94 91       	lpm	r25, Z
    b316:	c5 53       	subi	r28, 0x35	; 53
    b318:	df 4f       	sbci	r29, 0xFF	; 255
    b31a:	e8 81       	ld	r30, Y
    b31c:	f9 81       	ldd	r31, Y+1	; 0x01
    b31e:	cb 5c       	subi	r28, 0xCB	; 203
    b320:	d0 40       	sbci	r29, 0x00	; 0
    b322:	24 91       	lpm	r18, Z
    b324:	ca 54       	subi	r28, 0x4A	; 74
    b326:	df 4f       	sbci	r29, 0xFF	; 255
    b328:	48 81       	ld	r20, Y
    b32a:	59 81       	ldd	r21, Y+1	; 0x01
    b32c:	c6 5b       	subi	r28, 0xB6	; 182
    b32e:	d0 40       	sbci	r29, 0x00	; 0
    b330:	84 0f       	add	r24, r20
    b332:	95 1f       	adc	r25, r21
    b334:	bc 01       	movw	r22, r24
    b336:	2b 9d       	mul	r18, r11
    b338:	60 0d       	add	r22, r0
    b33a:	71 1d       	adc	r23, r1
    b33c:	11 24       	eor	r1, r1
    b33e:	c4 54       	subi	r28, 0x44	; 68
    b340:	df 4f       	sbci	r29, 0xFF	; 255
    b342:	79 83       	std	Y+1, r23	; 0x01
    b344:	68 83       	st	Y, r22
    b346:	cc 5b       	subi	r28, 0xBC	; 188
    b348:	d0 40       	sbci	r29, 0x00	; 0
    b34a:	b3 94       	inc	r11
    b34c:	1d cf       	rjmp	.-454    	; 0xb188 <draw_menu(bool)+0x110e>
    b34e:	c6 53       	subi	r28, 0x36	; 54
    b350:	df 4f       	sbci	r29, 0xFF	; 255
    b352:	f8 81       	ld	r31, Y
    b354:	ca 5c       	subi	r28, 0xCA	; 202
    b356:	d0 40       	sbci	r29, 0x00	; 0
    b358:	f1 11       	cpse	r31, r1
    b35a:	0c 94 45 61 	jmp	0xc28a	; 0xc28a <draw_menu(bool)+0x2210>
    b35e:	91 2c       	mov	r9, r1
    b360:	93 01       	movw	r18, r6
    b362:	2f 53       	subi	r18, 0x3F	; 63
    b364:	3d 4f       	sbci	r19, 0xFD	; 253
    b366:	cc 52       	subi	r28, 0x2C	; 44
    b368:	df 4f       	sbci	r29, 0xFF	; 255
    b36a:	39 83       	std	Y+1, r19	; 0x01
    b36c:	28 83       	st	Y, r18
    b36e:	c4 5d       	subi	r28, 0xD4	; 212
    b370:	d0 40       	sbci	r29, 0x00	; 0
    b372:	cc 52       	subi	r28, 0x2C	; 44
    b374:	df 4f       	sbci	r29, 0xFF	; 255
    b376:	e8 81       	ld	r30, Y
    b378:	f9 81       	ldd	r31, Y+1	; 0x01
    b37a:	c4 5d       	subi	r28, 0xD4	; 212
    b37c:	d0 40       	sbci	r29, 0x00	; 0
    b37e:	84 91       	lpm	r24, Z
    b380:	98 16       	cp	r9, r24
    b382:	08 f0       	brcs	.+2      	; 0xb386 <draw_menu(bool)+0x130c>
    b384:	1a c3       	rjmp	.+1588   	; 0xb9ba <draw_menu(bool)+0x1940>
    b386:	f7 e1       	ldi	r31, 0x17	; 23
    b388:	9f 9e       	mul	r9, r31
    b38a:	20 01       	movw	r4, r0
    b38c:	11 24       	eor	r1, r1
    b38e:	f2 01       	movw	r30, r4
    b390:	ee 53       	subi	r30, 0x3E	; 62
    b392:	fe 4f       	sbci	r31, 0xFE	; 254
    b394:	e6 0d       	add	r30, r6
    b396:	f7 1d       	adc	r31, r7
    b398:	84 91       	lpm	r24, Z
    b39a:	cd 52       	subi	r28, 0x2D	; 45
    b39c:	df 4f       	sbci	r29, 0xFF	; 255
    b39e:	68 81       	ld	r22, Y
    b3a0:	c3 5d       	subi	r28, 0xD3	; 211
    b3a2:	d0 40       	sbci	r29, 0x00	; 0
    b3a4:	0e 94 32 36 	call	0x6c64	; 0x6c64 <enable_redraw(unsigned char, unsigned char)>
    b3a8:	88 23       	and	r24, r24
    b3aa:	09 f4       	brne	.+2      	; 0xb3ae <draw_menu(bool)+0x1334>
    b3ac:	83 c1       	rjmp	.+774    	; 0xb6b4 <draw_menu(bool)+0x163a>
    b3ae:	ce 54       	subi	r28, 0x4E	; 78
    b3b0:	df 4f       	sbci	r29, 0xFF	; 255
    b3b2:	18 82       	st	Y, r1
    b3b4:	c2 5b       	subi	r28, 0xB2	; 178
    b3b6:	d0 40       	sbci	r29, 0x00	; 0
    b3b8:	f2 01       	movw	r30, r4
    b3ba:	e0 54       	subi	r30, 0x40	; 64
    b3bc:	fe 4f       	sbci	r31, 0xFE	; 254
    b3be:	e6 0d       	add	r30, r6
    b3c0:	f7 1d       	adc	r31, r7
    b3c2:	25 91       	lpm	r18, Z+
    b3c4:	34 91       	lpm	r19, Z
    b3c6:	c2 01       	movw	r24, r4
    b3c8:	85 54       	subi	r24, 0x45	; 69
    b3ca:	9e 4f       	sbci	r25, 0xFE	; 254
    b3cc:	a3 01       	movw	r20, r6
    b3ce:	48 0f       	add	r20, r24
    b3d0:	59 1f       	adc	r21, r25
    b3d2:	c6 54       	subi	r28, 0x46	; 70
    b3d4:	df 4f       	sbci	r29, 0xFF	; 255
    b3d6:	59 83       	std	Y+1, r21	; 0x01
    b3d8:	48 83       	st	Y, r20
    b3da:	ca 5b       	subi	r28, 0xBA	; 186
    b3dc:	d0 40       	sbci	r29, 0x00	; 0
    b3de:	fa 01       	movw	r30, r20
    b3e0:	84 91       	lpm	r24, Z
    b3e2:	cf 54       	subi	r28, 0x4F	; 79
    b3e4:	df 4f       	sbci	r29, 0xFF	; 255
    b3e6:	68 81       	ld	r22, Y
    b3e8:	c1 5b       	subi	r28, 0xB1	; 177
    b3ea:	d0 40       	sbci	r29, 0x00	; 0
    b3ec:	70 e0       	ldi	r23, 0x00	; 0
    b3ee:	40 e0       	ldi	r20, 0x00	; 0
    b3f0:	90 e0       	ldi	r25, 0x00	; 0
    b3f2:	f9 01       	movw	r30, r18
    b3f4:	19 95       	eicall
    b3f6:	cd 54       	subi	r28, 0x4D	; 77
    b3f8:	df 4f       	sbci	r29, 0xFF	; 255
    b3fa:	88 83       	st	Y, r24
    b3fc:	c3 5b       	subi	r28, 0xB3	; 179
    b3fe:	d0 40       	sbci	r29, 0x00	; 0
    b400:	f2 01       	movw	r30, r4
    b402:	e4 54       	subi	r30, 0x44	; 68
    b404:	fe 4f       	sbci	r31, 0xFE	; 254
    b406:	e6 0d       	add	r30, r6
    b408:	f7 1d       	adc	r31, r7
    b40a:	25 91       	lpm	r18, Z+
    b40c:	34 91       	lpm	r19, Z
    b40e:	ca 52       	subi	r28, 0x2A	; 42
    b410:	df 4f       	sbci	r29, 0xFF	; 255
    b412:	39 83       	std	Y+1, r19	; 0x01
    b414:	28 83       	st	Y, r18
    b416:	c6 5d       	subi	r28, 0xD6	; 214
    b418:	d0 40       	sbci	r29, 0x00	; 0
    b41a:	f2 01       	movw	r30, r4
    b41c:	e6 54       	subi	r30, 0x46	; 70
    b41e:	fe 4f       	sbci	r31, 0xFE	; 254
    b420:	e6 0d       	add	r30, r6
    b422:	f7 1d       	adc	r31, r7
    b424:	44 91       	lpm	r20, Z
    b426:	4f 3f       	cpi	r20, 0xFF	; 255
    b428:	b9 f0       	breq	.+46     	; 0xb458 <draw_menu(bool)+0x13de>
    b42a:	f2 01       	movw	r30, r4
    b42c:	e8 54       	subi	r30, 0x48	; 72
    b42e:	fe 4f       	sbci	r31, 0xFE	; 254
    b430:	e6 0d       	add	r30, r6
    b432:	f7 1d       	adc	r31, r7
    b434:	24 91       	lpm	r18, Z
    b436:	f2 01       	movw	r30, r4
    b438:	e7 54       	subi	r30, 0x47	; 71
    b43a:	fe 4f       	sbci	r31, 0xFE	; 254
    b43c:	e6 0d       	add	r30, r6
    b43e:	f7 1d       	adc	r31, r7
    b440:	e4 91       	lpm	r30, Z
    b442:	2e 9f       	mul	r18, r30
    b444:	20 2d       	mov	r18, r0
    b446:	11 24       	eor	r1, r1
    b448:	be 01       	movw	r22, r28
    b44a:	6d 54       	subi	r22, 0x4D	; 77
    b44c:	7f 4f       	sbci	r23, 0xFF	; 255
    b44e:	ce 01       	movw	r24, r28
    b450:	8e 54       	subi	r24, 0x4E	; 78
    b452:	9f 4f       	sbci	r25, 0xFF	; 255
    b454:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    b458:	12 01       	movw	r2, r4
    b45a:	34 e5       	ldi	r19, 0x54	; 84
    b45c:	23 1a       	sub	r2, r19
    b45e:	3e ef       	ldi	r19, 0xFE	; 254
    b460:	33 0a       	sbc	r3, r19
    b462:	26 0c       	add	r2, r6
    b464:	37 1c       	adc	r3, r7
    b466:	c2 01       	movw	r24, r4
    b468:	82 55       	subi	r24, 0x52	; 82
    b46a:	9e 4f       	sbci	r25, 0xFE	; 254
    b46c:	a3 01       	movw	r20, r6
    b46e:	48 0f       	add	r20, r24
    b470:	59 1f       	adc	r21, r25
    b472:	c0 54       	subi	r28, 0x40	; 64
    b474:	df 4f       	sbci	r29, 0xFF	; 255
    b476:	59 83       	std	Y+1, r21	; 0x01
    b478:	48 83       	st	Y, r20
    b47a:	c0 5c       	subi	r28, 0xC0	; 192
    b47c:	d0 40       	sbci	r29, 0x00	; 0
    b47e:	09 96       	adiw	r24, 0x09	; 9
    b480:	b3 01       	movw	r22, r6
    b482:	68 0f       	add	r22, r24
    b484:	79 1f       	adc	r23, r25
    b486:	ca 53       	subi	r28, 0x3A	; 58
    b488:	df 4f       	sbci	r29, 0xFF	; 255
    b48a:	79 83       	std	Y+1, r23	; 0x01
    b48c:	68 83       	st	Y, r22
    b48e:	c6 5c       	subi	r28, 0xC6	; 198
    b490:	d0 40       	sbci	r29, 0x00	; 0
    b492:	01 97       	sbiw	r24, 0x01	; 1
    b494:	f3 01       	movw	r30, r6
    b496:	e8 0f       	add	r30, r24
    b498:	f9 1f       	adc	r31, r25
    b49a:	c5 53       	subi	r28, 0x35	; 53
    b49c:	df 4f       	sbci	r29, 0xFF	; 255
    b49e:	f9 83       	std	Y+1, r31	; 0x01
    b4a0:	e8 83       	st	Y, r30
    b4a2:	cb 5c       	subi	r28, 0xCB	; 203
    b4a4:	d0 40       	sbci	r29, 0x00	; 0
    b4a6:	01 97       	sbiw	r24, 0x01	; 1
    b4a8:	93 01       	movw	r18, r6
    b4aa:	28 0f       	add	r18, r24
    b4ac:	39 1f       	adc	r19, r25
    b4ae:	c3 53       	subi	r28, 0x33	; 51
    b4b0:	df 4f       	sbci	r29, 0xFF	; 255
    b4b2:	39 83       	std	Y+1, r19	; 0x01
    b4b4:	28 83       	st	Y, r18
    b4b6:	cd 5c       	subi	r28, 0xCD	; 205
    b4b8:	d0 40       	sbci	r29, 0x00	; 0
    b4ba:	01 97       	sbiw	r24, 0x01	; 1
    b4bc:	a3 01       	movw	r20, r6
    b4be:	48 0f       	add	r20, r24
    b4c0:	59 1f       	adc	r21, r25
    b4c2:	c8 53       	subi	r28, 0x38	; 56
    b4c4:	df 4f       	sbci	r29, 0xFF	; 255
    b4c6:	59 83       	std	Y+1, r21	; 0x01
    b4c8:	48 83       	st	Y, r20
    b4ca:	c8 5c       	subi	r28, 0xC8	; 200
    b4cc:	d0 40       	sbci	r29, 0x00	; 0
    b4ce:	02 97       	sbiw	r24, 0x02	; 2
    b4d0:	b3 01       	movw	r22, r6
    b4d2:	68 0f       	add	r22, r24
    b4d4:	79 1f       	adc	r23, r25
    b4d6:	c1 53       	subi	r28, 0x31	; 49
    b4d8:	df 4f       	sbci	r29, 0xFF	; 255
    b4da:	79 83       	std	Y+1, r23	; 0x01
    b4dc:	68 83       	st	Y, r22
    b4de:	cf 5c       	subi	r28, 0xCF	; 207
    b4e0:	d0 40       	sbci	r29, 0x00	; 0
    b4e2:	02 97       	sbiw	r24, 0x02	; 2
    b4e4:	f3 01       	movw	r30, r6
    b4e6:	e8 0f       	add	r30, r24
    b4e8:	f9 1f       	adc	r31, r25
    b4ea:	cf 52       	subi	r28, 0x2F	; 47
    b4ec:	df 4f       	sbci	r29, 0xFF	; 255
    b4ee:	f9 83       	std	Y+1, r31	; 0x01
    b4f0:	e8 83       	st	Y, r30
    b4f2:	c1 5d       	subi	r28, 0xD1	; 209
    b4f4:	d0 40       	sbci	r29, 0x00	; 0
    b4f6:	f1 2c       	mov	r15, r1
    b4f8:	ce 54       	subi	r28, 0x4E	; 78
    b4fa:	df 4f       	sbci	r29, 0xFF	; 255
    b4fc:	88 81       	ld	r24, Y
    b4fe:	c2 5b       	subi	r28, 0xB2	; 178
    b500:	d0 40       	sbci	r29, 0x00	; 0
    b502:	cd 54       	subi	r28, 0x4D	; 77
    b504:	df 4f       	sbci	r29, 0xFF	; 255
    b506:	98 81       	ld	r25, Y
    b508:	c3 5b       	subi	r28, 0xB3	; 179
    b50a:	d0 40       	sbci	r29, 0x00	; 0
    b50c:	89 17       	cp	r24, r25
    b50e:	08 f0       	brcs	.+2      	; 0xb512 <draw_menu(bool)+0x1498>
    b510:	d1 c0       	rjmp	.+418    	; 0xb6b4 <draw_menu(bool)+0x163a>
    b512:	f1 01       	movw	r30, r2
    b514:	45 91       	lpm	r20, Z+
    b516:	54 91       	lpm	r21, Z
    b518:	c0 54       	subi	r28, 0x40	; 64
    b51a:	df 4f       	sbci	r29, 0xFF	; 255
    b51c:	e8 81       	ld	r30, Y
    b51e:	f9 81       	ldd	r31, Y+1	; 0x01
    b520:	c0 5c       	subi	r28, 0xC0	; 192
    b522:	d0 40       	sbci	r29, 0x00	; 0
    b524:	25 91       	lpm	r18, Z+
    b526:	34 91       	lpm	r19, Z
    b528:	ca 53       	subi	r28, 0x3A	; 58
    b52a:	df 4f       	sbci	r29, 0xFF	; 255
    b52c:	e8 81       	ld	r30, Y
    b52e:	f9 81       	ldd	r31, Y+1	; 0x01
    b530:	c6 5c       	subi	r28, 0xC6	; 198
    b532:	d0 40       	sbci	r29, 0x00	; 0
    b534:	94 91       	lpm	r25, Z
    b536:	99 23       	and	r25, r25
    b538:	09 f4       	brne	.+2      	; 0xb53c <draw_menu(bool)+0x14c2>
    b53a:	7b c0       	rjmp	.+246    	; 0xb632 <draw_menu(bool)+0x15b8>
    b53c:	c8 54       	subi	r28, 0x48	; 72
    b53e:	df 4f       	sbci	r29, 0xFF	; 255
    b540:	68 81       	ld	r22, Y
    b542:	79 81       	ldd	r23, Y+1	; 0x01
    b544:	c8 5b       	subi	r28, 0xB8	; 184
    b546:	d0 40       	sbci	r29, 0x00	; 0
    b548:	62 0f       	add	r22, r18
    b54a:	73 1f       	adc	r23, r19
    b54c:	c2 54       	subi	r28, 0x42	; 66
    b54e:	df 4f       	sbci	r29, 0xFF	; 255
    b550:	79 83       	std	Y+1, r23	; 0x01
    b552:	68 83       	st	Y, r22
    b554:	ce 5b       	subi	r28, 0xBE	; 190
    b556:	d0 40       	sbci	r29, 0x00	; 0
    b558:	ca 53       	subi	r28, 0x3A	; 58
    b55a:	df 4f       	sbci	r29, 0xFF	; 255
    b55c:	e8 81       	ld	r30, Y
    b55e:	f9 81       	ldd	r31, Y+1	; 0x01
    b560:	c6 5c       	subi	r28, 0xC6	; 198
    b562:	d0 40       	sbci	r29, 0x00	; 0
    b564:	94 91       	lpm	r25, Z
    b566:	91 30       	cpi	r25, 0x01	; 1
    b568:	09 f4       	brne	.+2      	; 0xb56c <draw_menu(bool)+0x14f2>
    b56a:	86 c0       	rjmp	.+268    	; 0xb678 <draw_menu(bool)+0x15fe>
    b56c:	ca 54       	subi	r28, 0x4A	; 74
    b56e:	df 4f       	sbci	r29, 0xFF	; 255
    b570:	28 81       	ld	r18, Y
    b572:	39 81       	ldd	r19, Y+1	; 0x01
    b574:	c6 5b       	subi	r28, 0xB6	; 182
    b576:	d0 40       	sbci	r29, 0x00	; 0
    b578:	24 0f       	add	r18, r20
    b57a:	35 1f       	adc	r19, r21
    b57c:	c4 54       	subi	r28, 0x44	; 68
    b57e:	df 4f       	sbci	r29, 0xFF	; 255
    b580:	39 83       	std	Y+1, r19	; 0x01
    b582:	28 83       	st	Y, r18
    b584:	cc 5b       	subi	r28, 0xBC	; 188
    b586:	d0 40       	sbci	r29, 0x00	; 0
    b588:	c6 54       	subi	r28, 0x46	; 70
    b58a:	df 4f       	sbci	r29, 0xFF	; 255
    b58c:	e8 81       	ld	r30, Y
    b58e:	f9 81       	ldd	r31, Y+1	; 0x01
    b590:	ca 5b       	subi	r28, 0xBA	; 186
    b592:	d0 40       	sbci	r29, 0x00	; 0
    b594:	44 91       	lpm	r20, Z
    b596:	8e 01       	movw	r16, r28
    b598:	0f 57       	subi	r16, 0x7F	; 127
    b59a:	1f 4f       	sbci	r17, 0xFF	; 255
    b59c:	9e 01       	movw	r18, r28
    b59e:	2f 5f       	subi	r18, 0xFF	; 255
    b5a0:	3f 4f       	sbci	r19, 0xFF	; 255
    b5a2:	cf 54       	subi	r28, 0x4F	; 79
    b5a4:	df 4f       	sbci	r29, 0xFF	; 255
    b5a6:	68 81       	ld	r22, Y
    b5a8:	c1 5b       	subi	r28, 0xB1	; 177
    b5aa:	d0 40       	sbci	r29, 0x00	; 0
    b5ac:	ca 52       	subi	r28, 0x2A	; 42
    b5ae:	df 4f       	sbci	r29, 0xFF	; 255
    b5b0:	e8 81       	ld	r30, Y
    b5b2:	f9 81       	ldd	r31, Y+1	; 0x01
    b5b4:	c6 5d       	subi	r28, 0xD6	; 214
    b5b6:	d0 40       	sbci	r29, 0x00	; 0
    b5b8:	19 95       	eicall
    b5ba:	c8 53       	subi	r28, 0x38	; 56
    b5bc:	df 4f       	sbci	r29, 0xFF	; 255
    b5be:	e8 81       	ld	r30, Y
    b5c0:	f9 81       	ldd	r31, Y+1	; 0x01
    b5c2:	c8 5c       	subi	r28, 0xC8	; 200
    b5c4:	d0 40       	sbci	r29, 0x00	; 0
    b5c6:	e4 90       	lpm	r14, Z
    b5c8:	04 91       	lpm	r16, Z
    b5ca:	c1 53       	subi	r28, 0x31	; 49
    b5cc:	df 4f       	sbci	r29, 0xFF	; 255
    b5ce:	e8 81       	ld	r30, Y
    b5d0:	f9 81       	ldd	r31, Y+1	; 0x01
    b5d2:	cf 5c       	subi	r28, 0xCF	; 207
    b5d4:	d0 40       	sbci	r29, 0x00	; 0
    b5d6:	25 91       	lpm	r18, Z+
    b5d8:	34 91       	lpm	r19, Z
    b5da:	cf 52       	subi	r28, 0x2F	; 47
    b5dc:	df 4f       	sbci	r29, 0xFF	; 255
    b5de:	e8 81       	ld	r30, Y
    b5e0:	f9 81       	ldd	r31, Y+1	; 0x01
    b5e2:	c1 5d       	subi	r28, 0xD1	; 209
    b5e4:	d0 40       	sbci	r29, 0x00	; 0
    b5e6:	45 91       	lpm	r20, Z+
    b5e8:	54 91       	lpm	r21, Z
    b5ea:	88 24       	eor	r8, r8
    b5ec:	83 94       	inc	r8
    b5ee:	be 01       	movw	r22, r28
    b5f0:	6f 57       	subi	r22, 0x7F	; 127
    b5f2:	7f 4f       	sbci	r23, 0xFF	; 255
    b5f4:	5b 01       	movw	r10, r22
    b5f6:	ce 01       	movw	r24, r28
    b5f8:	01 96       	adiw	r24, 0x01	; 1
    b5fa:	6c 01       	movw	r12, r24
    b5fc:	c2 54       	subi	r28, 0x42	; 66
    b5fe:	df 4f       	sbci	r29, 0xFF	; 255
    b600:	68 81       	ld	r22, Y
    b602:	79 81       	ldd	r23, Y+1	; 0x01
    b604:	ce 5b       	subi	r28, 0xBE	; 190
    b606:	d0 40       	sbci	r29, 0x00	; 0
    b608:	c4 54       	subi	r28, 0x44	; 68
    b60a:	df 4f       	sbci	r29, 0xFF	; 255
    b60c:	88 81       	ld	r24, Y
    b60e:	99 81       	ldd	r25, Y+1	; 0x01
    b610:	cc 5b       	subi	r28, 0xBC	; 188
    b612:	d0 40       	sbci	r29, 0x00	; 0
    b614:	0e 94 a4 4c 	call	0x9948	; 0x9948 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
    b618:	f3 94       	inc	r15
    b61a:	ce 54       	subi	r28, 0x4E	; 78
    b61c:	df 4f       	sbci	r29, 0xFF	; 255
    b61e:	88 81       	ld	r24, Y
    b620:	c2 5b       	subi	r28, 0xB2	; 178
    b622:	d0 40       	sbci	r29, 0x00	; 0
    b624:	8f 5f       	subi	r24, 0xFF	; 255
    b626:	ce 54       	subi	r28, 0x4E	; 78
    b628:	df 4f       	sbci	r29, 0xFF	; 255
    b62a:	88 83       	st	Y, r24
    b62c:	c2 5b       	subi	r28, 0xB2	; 178
    b62e:	d0 40       	sbci	r29, 0x00	; 0
    b630:	63 cf       	rjmp	.-314    	; 0xb4f8 <draw_menu(bool)+0x147e>
    b632:	c0 54       	subi	r28, 0x40	; 64
    b634:	df 4f       	sbci	r29, 0xFF	; 255
    b636:	e8 81       	ld	r30, Y
    b638:	f9 81       	ldd	r31, Y+1	; 0x01
    b63a:	c0 5c       	subi	r28, 0xC0	; 192
    b63c:	d0 40       	sbci	r29, 0x00	; 0
    b63e:	25 91       	lpm	r18, Z+
    b640:	34 91       	lpm	r19, Z
    b642:	c5 53       	subi	r28, 0x35	; 53
    b644:	df 4f       	sbci	r29, 0xFF	; 255
    b646:	e8 81       	ld	r30, Y
    b648:	f9 81       	ldd	r31, Y+1	; 0x01
    b64a:	cb 5c       	subi	r28, 0xCB	; 203
    b64c:	d0 40       	sbci	r29, 0x00	; 0
    b64e:	94 91       	lpm	r25, Z
    b650:	c8 54       	subi	r28, 0x48	; 72
    b652:	df 4f       	sbci	r29, 0xFF	; 255
    b654:	68 81       	ld	r22, Y
    b656:	79 81       	ldd	r23, Y+1	; 0x01
    b658:	c8 5b       	subi	r28, 0xB8	; 184
    b65a:	d0 40       	sbci	r29, 0x00	; 0
    b65c:	26 0f       	add	r18, r22
    b65e:	37 1f       	adc	r19, r23
    b660:	f9 01       	movw	r30, r18
    b662:	9f 9d       	mul	r25, r15
    b664:	e0 0d       	add	r30, r0
    b666:	f1 1d       	adc	r31, r1
    b668:	11 24       	eor	r1, r1
    b66a:	c2 54       	subi	r28, 0x42	; 66
    b66c:	df 4f       	sbci	r29, 0xFF	; 255
    b66e:	f9 83       	std	Y+1, r31	; 0x01
    b670:	e8 83       	st	Y, r30
    b672:	ce 5b       	subi	r28, 0xBE	; 190
    b674:	d0 40       	sbci	r29, 0x00	; 0
    b676:	70 cf       	rjmp	.-288    	; 0xb558 <draw_menu(bool)+0x14de>
    b678:	f1 01       	movw	r30, r2
    b67a:	25 91       	lpm	r18, Z+
    b67c:	34 91       	lpm	r19, Z
    b67e:	c3 53       	subi	r28, 0x33	; 51
    b680:	df 4f       	sbci	r29, 0xFF	; 255
    b682:	e8 81       	ld	r30, Y
    b684:	f9 81       	ldd	r31, Y+1	; 0x01
    b686:	cd 5c       	subi	r28, 0xCD	; 205
    b688:	d0 40       	sbci	r29, 0x00	; 0
    b68a:	94 91       	lpm	r25, Z
    b68c:	ca 54       	subi	r28, 0x4A	; 74
    b68e:	df 4f       	sbci	r29, 0xFF	; 255
    b690:	48 81       	ld	r20, Y
    b692:	59 81       	ldd	r21, Y+1	; 0x01
    b694:	c6 5b       	subi	r28, 0xB6	; 182
    b696:	d0 40       	sbci	r29, 0x00	; 0
    b698:	24 0f       	add	r18, r20
    b69a:	35 1f       	adc	r19, r21
    b69c:	b9 01       	movw	r22, r18
    b69e:	9f 9d       	mul	r25, r15
    b6a0:	60 0d       	add	r22, r0
    b6a2:	71 1d       	adc	r23, r1
    b6a4:	11 24       	eor	r1, r1
    b6a6:	c4 54       	subi	r28, 0x44	; 68
    b6a8:	df 4f       	sbci	r29, 0xFF	; 255
    b6aa:	79 83       	std	Y+1, r23	; 0x01
    b6ac:	68 83       	st	Y, r22
    b6ae:	cc 5b       	subi	r28, 0xBC	; 188
    b6b0:	d0 40       	sbci	r29, 0x00	; 0
    b6b2:	6a cf       	rjmp	.-300    	; 0xb588 <draw_menu(bool)+0x150e>
    b6b4:	ce 53       	subi	r28, 0x3E	; 62
    b6b6:	df 4f       	sbci	r29, 0xFF	; 255
    b6b8:	e8 81       	ld	r30, Y
    b6ba:	f9 81       	ldd	r31, Y+1	; 0x01
    b6bc:	c2 5c       	subi	r28, 0xC2	; 194
    b6be:	d0 40       	sbci	r29, 0x00	; 0
    b6c0:	ef 2b       	or	r30, r31
    b6c2:	09 f4       	brne	.+2      	; 0xb6c6 <draw_menu(bool)+0x164c>
    b6c4:	57 c1       	rjmp	.+686    	; 0xb974 <draw_menu(bool)+0x18fa>
    b6c6:	cc 53       	subi	r28, 0x3C	; 60
    b6c8:	df 4f       	sbci	r29, 0xFF	; 255
    b6ca:	28 81       	ld	r18, Y
    b6cc:	39 81       	ldd	r19, Y+1	; 0x01
    b6ce:	c4 5c       	subi	r28, 0xC4	; 196
    b6d0:	d0 40       	sbci	r29, 0x00	; 0
    b6d2:	23 2b       	or	r18, r19
    b6d4:	09 f4       	brne	.+2      	; 0xb6d8 <draw_menu(bool)+0x165e>
    b6d6:	4e c1       	rjmp	.+668    	; 0xb974 <draw_menu(bool)+0x18fa>
    b6d8:	ce 54       	subi	r28, 0x4E	; 78
    b6da:	df 4f       	sbci	r29, 0xFF	; 255
    b6dc:	18 82       	st	Y, r1
    b6de:	c2 5b       	subi	r28, 0xB2	; 178
    b6e0:	d0 40       	sbci	r29, 0x00	; 0
    b6e2:	f2 01       	movw	r30, r4
    b6e4:	e0 54       	subi	r30, 0x40	; 64
    b6e6:	fe 4f       	sbci	r31, 0xFE	; 254
    b6e8:	e6 0d       	add	r30, r6
    b6ea:	f7 1d       	adc	r31, r7
    b6ec:	25 91       	lpm	r18, Z+
    b6ee:	34 91       	lpm	r19, Z
    b6f0:	c2 01       	movw	r24, r4
    b6f2:	85 54       	subi	r24, 0x45	; 69
    b6f4:	9e 4f       	sbci	r25, 0xFE	; 254
    b6f6:	a3 01       	movw	r20, r6
    b6f8:	48 0f       	add	r20, r24
    b6fa:	59 1f       	adc	r21, r25
    b6fc:	c6 54       	subi	r28, 0x46	; 70
    b6fe:	df 4f       	sbci	r29, 0xFF	; 255
    b700:	59 83       	std	Y+1, r21	; 0x01
    b702:	48 83       	st	Y, r20
    b704:	ca 5b       	subi	r28, 0xBA	; 186
    b706:	d0 40       	sbci	r29, 0x00	; 0
    b708:	fa 01       	movw	r30, r20
    b70a:	84 91       	lpm	r24, Z
    b70c:	cf 54       	subi	r28, 0x4F	; 79
    b70e:	df 4f       	sbci	r29, 0xFF	; 255
    b710:	68 81       	ld	r22, Y
    b712:	c1 5b       	subi	r28, 0xB1	; 177
    b714:	d0 40       	sbci	r29, 0x00	; 0
    b716:	70 e0       	ldi	r23, 0x00	; 0
    b718:	40 e0       	ldi	r20, 0x00	; 0
    b71a:	90 e0       	ldi	r25, 0x00	; 0
    b71c:	f9 01       	movw	r30, r18
    b71e:	19 95       	eicall
    b720:	cd 54       	subi	r28, 0x4D	; 77
    b722:	df 4f       	sbci	r29, 0xFF	; 255
    b724:	88 83       	st	Y, r24
    b726:	c3 5b       	subi	r28, 0xB3	; 179
    b728:	d0 40       	sbci	r29, 0x00	; 0
    b72a:	f2 01       	movw	r30, r4
    b72c:	e6 54       	subi	r30, 0x46	; 70
    b72e:	fe 4f       	sbci	r31, 0xFE	; 254
    b730:	e6 0d       	add	r30, r6
    b732:	f7 1d       	adc	r31, r7
    b734:	44 91       	lpm	r20, Z
    b736:	4f 3f       	cpi	r20, 0xFF	; 255
    b738:	b9 f0       	breq	.+46     	; 0xb768 <draw_menu(bool)+0x16ee>
    b73a:	f2 01       	movw	r30, r4
    b73c:	e8 54       	subi	r30, 0x48	; 72
    b73e:	fe 4f       	sbci	r31, 0xFE	; 254
    b740:	e6 0d       	add	r30, r6
    b742:	f7 1d       	adc	r31, r7
    b744:	24 91       	lpm	r18, Z
    b746:	f2 01       	movw	r30, r4
    b748:	e7 54       	subi	r30, 0x47	; 71
    b74a:	fe 4f       	sbci	r31, 0xFE	; 254
    b74c:	e6 0d       	add	r30, r6
    b74e:	f7 1d       	adc	r31, r7
    b750:	e4 91       	lpm	r30, Z
    b752:	2e 9f       	mul	r18, r30
    b754:	20 2d       	mov	r18, r0
    b756:	11 24       	eor	r1, r1
    b758:	be 01       	movw	r22, r28
    b75a:	6d 54       	subi	r22, 0x4D	; 77
    b75c:	7f 4f       	sbci	r23, 0xFF	; 255
    b75e:	ce 01       	movw	r24, r28
    b760:	8e 54       	subi	r24, 0x4E	; 78
    b762:	9f 4f       	sbci	r25, 0xFF	; 255
    b764:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    b768:	ce 54       	subi	r28, 0x4E	; 78
    b76a:	df 4f       	sbci	r29, 0xFF	; 255
    b76c:	f8 81       	ld	r31, Y
    b76e:	c2 5b       	subi	r28, 0xB2	; 178
    b770:	d0 40       	sbci	r29, 0x00	; 0
    b772:	cf 52       	subi	r28, 0x2F	; 47
    b774:	df 4f       	sbci	r29, 0xFF	; 255
    b776:	f8 83       	st	Y, r31
    b778:	c1 5d       	subi	r28, 0xD1	; 209
    b77a:	d0 40       	sbci	r29, 0x00	; 0
    b77c:	cd 54       	subi	r28, 0x4D	; 77
    b77e:	df 4f       	sbci	r29, 0xFF	; 255
    b780:	28 81       	ld	r18, Y
    b782:	c3 5b       	subi	r28, 0xB3	; 179
    b784:	d0 40       	sbci	r29, 0x00	; 0
    b786:	ca 53       	subi	r28, 0x3A	; 58
    b788:	df 4f       	sbci	r29, 0xFF	; 255
    b78a:	28 83       	st	Y, r18
    b78c:	c6 5c       	subi	r28, 0xC6	; 198
    b78e:	d0 40       	sbci	r29, 0x00	; 0
    b790:	62 01       	movw	r12, r4
    b792:	34 e5       	ldi	r19, 0x54	; 84
    b794:	c3 1a       	sub	r12, r19
    b796:	3e ef       	ldi	r19, 0xFE	; 254
    b798:	d3 0a       	sbc	r13, r19
    b79a:	c6 0c       	add	r12, r6
    b79c:	d7 1c       	adc	r13, r7
    b79e:	12 01       	movw	r2, r4
    b7a0:	42 e5       	ldi	r20, 0x52	; 82
    b7a2:	24 1a       	sub	r2, r20
    b7a4:	4e ef       	ldi	r20, 0xFE	; 254
    b7a6:	34 0a       	sbc	r3, r20
    b7a8:	26 0c       	add	r2, r6
    b7aa:	37 1c       	adc	r3, r7
    b7ac:	c2 01       	movw	r24, r4
    b7ae:	89 54       	subi	r24, 0x49	; 73
    b7b0:	9e 4f       	sbci	r25, 0xFE	; 254
    b7b2:	b3 01       	movw	r22, r6
    b7b4:	68 0f       	add	r22, r24
    b7b6:	79 1f       	adc	r23, r25
    b7b8:	c0 54       	subi	r28, 0x40	; 64
    b7ba:	df 4f       	sbci	r29, 0xFF	; 255
    b7bc:	79 83       	std	Y+1, r23	; 0x01
    b7be:	68 83       	st	Y, r22
    b7c0:	c0 5c       	subi	r28, 0xC0	; 192
    b7c2:	d0 40       	sbci	r29, 0x00	; 0
    b7c4:	01 97       	sbiw	r24, 0x01	; 1
    b7c6:	f3 01       	movw	r30, r6
    b7c8:	e8 0f       	add	r30, r24
    b7ca:	f9 1f       	adc	r31, r25
    b7cc:	c8 53       	subi	r28, 0x38	; 56
    b7ce:	df 4f       	sbci	r29, 0xFF	; 255
    b7d0:	f9 83       	std	Y+1, r31	; 0x01
    b7d2:	e8 83       	st	Y, r30
    b7d4:	c8 5c       	subi	r28, 0xC8	; 200
    b7d6:	d0 40       	sbci	r29, 0x00	; 0
    b7d8:	01 97       	sbiw	r24, 0x01	; 1
    b7da:	93 01       	movw	r18, r6
    b7dc:	28 0f       	add	r18, r24
    b7de:	39 1f       	adc	r19, r25
    b7e0:	c5 53       	subi	r28, 0x35	; 53
    b7e2:	df 4f       	sbci	r29, 0xFF	; 255
    b7e4:	39 83       	std	Y+1, r19	; 0x01
    b7e6:	28 83       	st	Y, r18
    b7e8:	cb 5c       	subi	r28, 0xCB	; 203
    b7ea:	d0 40       	sbci	r29, 0x00	; 0
    b7ec:	03 97       	sbiw	r24, 0x03	; 3
    b7ee:	a3 01       	movw	r20, r6
    b7f0:	48 0f       	add	r20, r24
    b7f2:	59 1f       	adc	r21, r25
    b7f4:	c3 53       	subi	r28, 0x33	; 51
    b7f6:	df 4f       	sbci	r29, 0xFF	; 255
    b7f8:	59 83       	std	Y+1, r21	; 0x01
    b7fa:	48 83       	st	Y, r20
    b7fc:	cd 5c       	subi	r28, 0xCD	; 205
    b7fe:	d0 40       	sbci	r29, 0x00	; 0
    b800:	02 97       	sbiw	r24, 0x02	; 2
    b802:	b3 01       	movw	r22, r6
    b804:	68 0f       	add	r22, r24
    b806:	79 1f       	adc	r23, r25
    b808:	c1 53       	subi	r28, 0x31	; 49
    b80a:	df 4f       	sbci	r29, 0xFF	; 255
    b80c:	79 83       	std	Y+1, r23	; 0x01
    b80e:	68 83       	st	Y, r22
    b810:	cf 5c       	subi	r28, 0xCF	; 207
    b812:	d0 40       	sbci	r29, 0x00	; 0
    b814:	b1 2c       	mov	r11, r1
    b816:	a1 2c       	mov	r10, r1
    b818:	cf 52       	subi	r28, 0x2F	; 47
    b81a:	df 4f       	sbci	r29, 0xFF	; 255
    b81c:	88 80       	ld	r8, Y
    b81e:	c1 5d       	subi	r28, 0xD1	; 209
    b820:	d0 40       	sbci	r29, 0x00	; 0
    b822:	8a 0c       	add	r8, r10
    b824:	ca 53       	subi	r28, 0x3A	; 58
    b826:	df 4f       	sbci	r29, 0xFF	; 255
    b828:	78 81       	ld	r23, Y
    b82a:	c6 5c       	subi	r28, 0xC6	; 198
    b82c:	d0 40       	sbci	r29, 0x00	; 0
    b82e:	87 16       	cp	r8, r23
    b830:	08 f0       	brcs	.+2      	; 0xb834 <draw_menu(bool)+0x17ba>
    b832:	a0 c0       	rjmp	.+320    	; 0xb974 <draw_menu(bool)+0x18fa>
    b834:	f6 01       	movw	r30, r12
    b836:	25 91       	lpm	r18, Z+
    b838:	34 91       	lpm	r19, Z
    b83a:	f1 01       	movw	r30, r2
    b83c:	85 91       	lpm	r24, Z+
    b83e:	94 91       	lpm	r25, Z
    b840:	c0 54       	subi	r28, 0x40	; 64
    b842:	df 4f       	sbci	r29, 0xFF	; 255
    b844:	e8 81       	ld	r30, Y
    b846:	f9 81       	ldd	r31, Y+1	; 0x01
    b848:	c0 5c       	subi	r28, 0xC0	; 192
    b84a:	d0 40       	sbci	r29, 0x00	; 0
    b84c:	44 91       	lpm	r20, Z
    b84e:	44 23       	and	r20, r20
    b850:	09 f4       	brne	.+2      	; 0xb854 <draw_menu(bool)+0x17da>
    b852:	92 c0       	rjmp	.+292    	; 0xb978 <draw_menu(bool)+0x18fe>
    b854:	c8 54       	subi	r28, 0x48	; 72
    b856:	df 4f       	sbci	r29, 0xFF	; 255
    b858:	48 81       	ld	r20, Y
    b85a:	59 81       	ldd	r21, Y+1	; 0x01
    b85c:	c8 5b       	subi	r28, 0xB8	; 184
    b85e:	d0 40       	sbci	r29, 0x00	; 0
    b860:	48 0f       	add	r20, r24
    b862:	59 1f       	adc	r21, r25
    b864:	c2 54       	subi	r28, 0x42	; 66
    b866:	df 4f       	sbci	r29, 0xFF	; 255
    b868:	59 83       	std	Y+1, r21	; 0x01
    b86a:	48 83       	st	Y, r20
    b86c:	ce 5b       	subi	r28, 0xBE	; 190
    b86e:	d0 40       	sbci	r29, 0x00	; 0
    b870:	c0 54       	subi	r28, 0x40	; 64
    b872:	df 4f       	sbci	r29, 0xFF	; 255
    b874:	e8 81       	ld	r30, Y
    b876:	f9 81       	ldd	r31, Y+1	; 0x01
    b878:	c0 5c       	subi	r28, 0xC0	; 192
    b87a:	d0 40       	sbci	r29, 0x00	; 0
    b87c:	84 91       	lpm	r24, Z
    b87e:	ca 54       	subi	r28, 0x4A	; 74
    b880:	df 4f       	sbci	r29, 0xFF	; 255
    b882:	48 81       	ld	r20, Y
    b884:	59 81       	ldd	r21, Y+1	; 0x01
    b886:	c6 5b       	subi	r28, 0xB6	; 182
    b888:	d0 40       	sbci	r29, 0x00	; 0
    b88a:	81 30       	cpi	r24, 0x01	; 1
    b88c:	c1 f4       	brne	.+48     	; 0xb8be <draw_menu(bool)+0x1844>
    b88e:	f6 01       	movw	r30, r12
    b890:	85 91       	lpm	r24, Z+
    b892:	94 91       	lpm	r25, Z
    b894:	c5 53       	subi	r28, 0x35	; 53
    b896:	df 4f       	sbci	r29, 0xFF	; 255
    b898:	e8 81       	ld	r30, Y
    b89a:	f9 81       	ldd	r31, Y+1	; 0x01
    b89c:	cb 5c       	subi	r28, 0xCB	; 203
    b89e:	d0 40       	sbci	r29, 0x00	; 0
    b8a0:	44 91       	lpm	r20, Z
    b8a2:	ca 54       	subi	r28, 0x4A	; 74
    b8a4:	df 4f       	sbci	r29, 0xFF	; 255
    b8a6:	28 81       	ld	r18, Y
    b8a8:	39 81       	ldd	r19, Y+1	; 0x01
    b8aa:	c6 5b       	subi	r28, 0xB6	; 182
    b8ac:	d0 40       	sbci	r29, 0x00	; 0
    b8ae:	82 0f       	add	r24, r18
    b8b0:	93 1f       	adc	r25, r19
    b8b2:	4a 9d       	mul	r20, r10
    b8b4:	90 01       	movw	r18, r0
    b8b6:	4b 9d       	mul	r20, r11
    b8b8:	30 0d       	add	r19, r0
    b8ba:	11 24       	eor	r1, r1
    b8bc:	ac 01       	movw	r20, r24
    b8be:	42 0f       	add	r20, r18
    b8c0:	53 1f       	adc	r21, r19
    b8c2:	c4 54       	subi	r28, 0x44	; 68
    b8c4:	df 4f       	sbci	r29, 0xFF	; 255
    b8c6:	59 83       	std	Y+1, r21	; 0x01
    b8c8:	48 83       	st	Y, r20
    b8ca:	cc 5b       	subi	r28, 0xBC	; 188
    b8cc:	d0 40       	sbci	r29, 0x00	; 0
    b8ce:	c3 53       	subi	r28, 0x33	; 51
    b8d0:	df 4f       	sbci	r29, 0xFF	; 255
    b8d2:	e8 81       	ld	r30, Y
    b8d4:	f9 81       	ldd	r31, Y+1	; 0x01
    b8d6:	cd 5c       	subi	r28, 0xCD	; 205
    b8d8:	d0 40       	sbci	r29, 0x00	; 0
    b8da:	25 91       	lpm	r18, Z+
    b8dc:	34 91       	lpm	r19, Z
    b8de:	c1 53       	subi	r28, 0x31	; 49
    b8e0:	df 4f       	sbci	r29, 0xFF	; 255
    b8e2:	e8 81       	ld	r30, Y
    b8e4:	f9 81       	ldd	r31, Y+1	; 0x01
    b8e6:	cf 5c       	subi	r28, 0xCF	; 207
    b8e8:	d0 40       	sbci	r29, 0x00	; 0
    b8ea:	45 91       	lpm	r20, Z+
    b8ec:	54 91       	lpm	r21, Z
    b8ee:	cc 53       	subi	r28, 0x3C	; 60
    b8f0:	df 4f       	sbci	r29, 0xFF	; 255
    b8f2:	e8 80       	ld	r14, Y
    b8f4:	f9 80       	ldd	r15, Y+1	; 0x01
    b8f6:	c4 5c       	subi	r28, 0xC4	; 196
    b8f8:	d0 40       	sbci	r29, 0x00	; 0
    b8fa:	ce 53       	subi	r28, 0x3E	; 62
    b8fc:	df 4f       	sbci	r29, 0xFF	; 255
    b8fe:	08 81       	ld	r16, Y
    b900:	19 81       	ldd	r17, Y+1	; 0x01
    b902:	c2 5c       	subi	r28, 0xC2	; 194
    b904:	d0 40       	sbci	r29, 0x00	; 0
    b906:	c2 54       	subi	r28, 0x42	; 66
    b908:	df 4f       	sbci	r29, 0xFF	; 255
    b90a:	68 81       	ld	r22, Y
    b90c:	79 81       	ldd	r23, Y+1	; 0x01
    b90e:	ce 5b       	subi	r28, 0xBE	; 190
    b910:	d0 40       	sbci	r29, 0x00	; 0
    b912:	c4 54       	subi	r28, 0x44	; 68
    b914:	df 4f       	sbci	r29, 0xFF	; 255
    b916:	88 81       	ld	r24, Y
    b918:	99 81       	ldd	r25, Y+1	; 0x01
    b91a:	cc 5b       	subi	r28, 0xBC	; 188
    b91c:	d0 40       	sbci	r29, 0x00	; 0
    b91e:	0e 94 22 50 	call	0xa044	; 0xa044 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b922:	18 2f       	mov	r17, r24
    b924:	5f ef       	ldi	r21, 0xFF	; 255
    b926:	a5 1a       	sub	r10, r21
    b928:	b5 0a       	sbc	r11, r21
    b92a:	88 23       	and	r24, r24
    b92c:	09 f4       	brne	.+2      	; 0xb930 <draw_menu(bool)+0x18b6>
    b92e:	74 cf       	rjmp	.-280    	; 0xb818 <draw_menu(bool)+0x179e>
    b930:	ce 54       	subi	r28, 0x4E	; 78
    b932:	df 4f       	sbci	r29, 0xFF	; 255
    b934:	88 82       	st	Y, r8
    b936:	c2 5b       	subi	r28, 0xB2	; 178
    b938:	d0 40       	sbci	r29, 0x00	; 0
    b93a:	f2 01       	movw	r30, r4
    b93c:	e2 54       	subi	r30, 0x42	; 66
    b93e:	fe 4f       	sbci	r31, 0xFE	; 254
    b940:	e6 0d       	add	r30, r6
    b942:	f7 1d       	adc	r31, r7
    b944:	25 91       	lpm	r18, Z+
    b946:	34 91       	lpm	r19, Z
    b948:	c6 54       	subi	r28, 0x46	; 70
    b94a:	df 4f       	sbci	r29, 0xFF	; 255
    b94c:	e8 81       	ld	r30, Y
    b94e:	f9 81       	ldd	r31, Y+1	; 0x01
    b950:	ca 5b       	subi	r28, 0xBA	; 186
    b952:	d0 40       	sbci	r29, 0x00	; 0
    b954:	84 91       	lpm	r24, Z
    b956:	cf 54       	subi	r28, 0x4F	; 79
    b958:	df 4f       	sbci	r29, 0xFF	; 255
    b95a:	68 81       	ld	r22, Y
    b95c:	c1 5b       	subi	r28, 0xB1	; 177
    b95e:	d0 40       	sbci	r29, 0x00	; 0
    b960:	70 e0       	ldi	r23, 0x00	; 0
    b962:	48 2d       	mov	r20, r8
    b964:	90 e0       	ldi	r25, 0x00	; 0
    b966:	f9 01       	movw	r30, r18
    b968:	19 95       	eicall
    b96a:	c6 53       	subi	r28, 0x36	; 54
    b96c:	df 4f       	sbci	r29, 0xFF	; 255
    b96e:	18 83       	st	Y, r17
    b970:	ca 5c       	subi	r28, 0xCA	; 202
    b972:	d0 40       	sbci	r29, 0x00	; 0
    b974:	93 94       	inc	r9
    b976:	fd cc       	rjmp	.-1542   	; 0xb372 <draw_menu(bool)+0x12f8>
    b978:	f1 01       	movw	r30, r2
    b97a:	85 91       	lpm	r24, Z+
    b97c:	94 91       	lpm	r25, Z
    b97e:	c8 53       	subi	r28, 0x38	; 56
    b980:	df 4f       	sbci	r29, 0xFF	; 255
    b982:	e8 81       	ld	r30, Y
    b984:	f9 81       	ldd	r31, Y+1	; 0x01
    b986:	c8 5c       	subi	r28, 0xC8	; 200
    b988:	d0 40       	sbci	r29, 0x00	; 0
    b98a:	64 91       	lpm	r22, Z
    b98c:	c8 54       	subi	r28, 0x48	; 72
    b98e:	df 4f       	sbci	r29, 0xFF	; 255
    b990:	48 81       	ld	r20, Y
    b992:	59 81       	ldd	r21, Y+1	; 0x01
    b994:	c8 5b       	subi	r28, 0xB8	; 184
    b996:	d0 40       	sbci	r29, 0x00	; 0
    b998:	84 0f       	add	r24, r20
    b99a:	95 1f       	adc	r25, r21
    b99c:	6a 9d       	mul	r22, r10
    b99e:	a0 01       	movw	r20, r0
    b9a0:	6b 9d       	mul	r22, r11
    b9a2:	50 0d       	add	r21, r0
    b9a4:	11 24       	eor	r1, r1
    b9a6:	bc 01       	movw	r22, r24
    b9a8:	64 0f       	add	r22, r20
    b9aa:	75 1f       	adc	r23, r21
    b9ac:	c2 54       	subi	r28, 0x42	; 66
    b9ae:	df 4f       	sbci	r29, 0xFF	; 255
    b9b0:	79 83       	std	Y+1, r23	; 0x01
    b9b2:	68 83       	st	Y, r22
    b9b4:	ce 5b       	subi	r28, 0xBE	; 190
    b9b6:	d0 40       	sbci	r29, 0x00	; 0
    b9b8:	5b cf       	rjmp	.-330    	; 0xb870 <draw_menu(bool)+0x17f6>
    b9ba:	c6 53       	subi	r28, 0x36	; 54
    b9bc:	df 4f       	sbci	r29, 0xFF	; 255
    b9be:	f8 81       	ld	r31, Y
    b9c0:	ca 5c       	subi	r28, 0xCA	; 202
    b9c2:	d0 40       	sbci	r29, 0x00	; 0
    b9c4:	f1 11       	cpse	r31, r1
    b9c6:	61 c4       	rjmp	.+2242   	; 0xc28a <draw_menu(bool)+0x2210>
    b9c8:	21 2c       	mov	r2, r1
    b9ca:	93 01       	movw	r18, r6
    b9cc:	2c 53       	subi	r18, 0x3C	; 60
    b9ce:	3d 4f       	sbci	r19, 0xFD	; 253
    b9d0:	c0 52       	subi	r28, 0x20	; 32
    b9d2:	df 4f       	sbci	r29, 0xFF	; 255
    b9d4:	39 83       	std	Y+1, r19	; 0x01
    b9d6:	28 83       	st	Y, r18
    b9d8:	c0 5e       	subi	r28, 0xE0	; 224
    b9da:	d0 40       	sbci	r29, 0x00	; 0
    b9dc:	ae 01       	movw	r20, r28
    b9de:	4f 57       	subi	r20, 0x7F	; 127
    b9e0:	5f 4f       	sbci	r21, 0xFF	; 255
    b9e2:	cc 54       	subi	r28, 0x4C	; 76
    b9e4:	df 4f       	sbci	r29, 0xFF	; 255
    b9e6:	59 83       	std	Y+1, r21	; 0x01
    b9e8:	48 83       	st	Y, r20
    b9ea:	c4 5b       	subi	r28, 0xB4	; 180
    b9ec:	d0 40       	sbci	r29, 0x00	; 0
    b9ee:	c0 52       	subi	r28, 0x20	; 32
    b9f0:	df 4f       	sbci	r29, 0xFF	; 255
    b9f2:	e8 81       	ld	r30, Y
    b9f4:	f9 81       	ldd	r31, Y+1	; 0x01
    b9f6:	c0 5e       	subi	r28, 0xE0	; 224
    b9f8:	d0 40       	sbci	r29, 0x00	; 0
    b9fa:	84 91       	lpm	r24, Z
    b9fc:	28 16       	cp	r2, r24
    b9fe:	08 f0       	brcs	.+2      	; 0xba02 <draw_menu(bool)+0x1988>
    ba00:	4a c4       	rjmp	.+2196   	; 0xc296 <draw_menu(bool)+0x221c>
    ba02:	fe e1       	ldi	r31, 0x1E	; 30
    ba04:	2f 9e       	mul	r2, r31
    ba06:	20 01       	movw	r4, r0
    ba08:	11 24       	eor	r1, r1
    ba0a:	f2 01       	movw	r30, r4
    ba0c:	e4 54       	subi	r30, 0x44	; 68
    ba0e:	fd 4f       	sbci	r31, 0xFD	; 253
    ba10:	e6 0d       	add	r30, r6
    ba12:	f7 1d       	adc	r31, r7
    ba14:	84 91       	lpm	r24, Z
    ba16:	cd 52       	subi	r28, 0x2D	; 45
    ba18:	df 4f       	sbci	r29, 0xFF	; 255
    ba1a:	68 81       	ld	r22, Y
    ba1c:	c3 5d       	subi	r28, 0xD3	; 211
    ba1e:	d0 40       	sbci	r29, 0x00	; 0
    ba20:	0e 94 32 36 	call	0x6c64	; 0x6c64 <enable_redraw(unsigned char, unsigned char)>
    ba24:	88 23       	and	r24, r24
    ba26:	09 f4       	brne	.+2      	; 0xba2a <draw_menu(bool)+0x19b0>
    ba28:	5e c2       	rjmp	.+1212   	; 0xbee6 <draw_menu(bool)+0x1e6c>
    ba2a:	ce 54       	subi	r28, 0x4E	; 78
    ba2c:	df 4f       	sbci	r29, 0xFF	; 255
    ba2e:	18 82       	st	Y, r1
    ba30:	c2 5b       	subi	r28, 0xB2	; 178
    ba32:	d0 40       	sbci	r29, 0x00	; 0
    ba34:	f2 01       	movw	r30, r4
    ba36:	e8 54       	subi	r30, 0x48	; 72
    ba38:	fd 4f       	sbci	r31, 0xFD	; 253
    ba3a:	e6 0d       	add	r30, r6
    ba3c:	f7 1d       	adc	r31, r7
    ba3e:	25 91       	lpm	r18, Z+
    ba40:	34 91       	lpm	r19, Z
    ba42:	c2 01       	movw	r24, r4
    ba44:	8d 54       	subi	r24, 0x4D	; 77
    ba46:	9d 4f       	sbci	r25, 0xFD	; 253
    ba48:	a3 01       	movw	r20, r6
    ba4a:	48 0f       	add	r20, r24
    ba4c:	59 1f       	adc	r21, r25
    ba4e:	c6 54       	subi	r28, 0x46	; 70
    ba50:	df 4f       	sbci	r29, 0xFF	; 255
    ba52:	59 83       	std	Y+1, r21	; 0x01
    ba54:	48 83       	st	Y, r20
    ba56:	ca 5b       	subi	r28, 0xBA	; 186
    ba58:	d0 40       	sbci	r29, 0x00	; 0
    ba5a:	fa 01       	movw	r30, r20
    ba5c:	84 91       	lpm	r24, Z
    ba5e:	cf 54       	subi	r28, 0x4F	; 79
    ba60:	df 4f       	sbci	r29, 0xFF	; 255
    ba62:	68 81       	ld	r22, Y
    ba64:	c1 5b       	subi	r28, 0xB1	; 177
    ba66:	d0 40       	sbci	r29, 0x00	; 0
    ba68:	70 e0       	ldi	r23, 0x00	; 0
    ba6a:	40 e0       	ldi	r20, 0x00	; 0
    ba6c:	90 e0       	ldi	r25, 0x00	; 0
    ba6e:	f9 01       	movw	r30, r18
    ba70:	19 95       	eicall
    ba72:	cd 54       	subi	r28, 0x4D	; 77
    ba74:	df 4f       	sbci	r29, 0xFF	; 255
    ba76:	88 83       	st	Y, r24
    ba78:	c3 5b       	subi	r28, 0xB3	; 179
    ba7a:	d0 40       	sbci	r29, 0x00	; 0
    ba7c:	f2 01       	movw	r30, r4
    ba7e:	ec 54       	subi	r30, 0x4C	; 76
    ba80:	fd 4f       	sbci	r31, 0xFD	; 253
    ba82:	e6 0d       	add	r30, r6
    ba84:	f7 1d       	adc	r31, r7
    ba86:	25 91       	lpm	r18, Z+
    ba88:	34 91       	lpm	r19, Z
    ba8a:	ce 51       	subi	r28, 0x1E	; 30
    ba8c:	df 4f       	sbci	r29, 0xFF	; 255
    ba8e:	39 83       	std	Y+1, r19	; 0x01
    ba90:	28 83       	st	Y, r18
    ba92:	c2 5e       	subi	r28, 0xE2	; 226
    ba94:	d0 40       	sbci	r29, 0x00	; 0
    ba96:	f2 01       	movw	r30, r4
    ba98:	ee 54       	subi	r30, 0x4E	; 78
    ba9a:	fd 4f       	sbci	r31, 0xFD	; 253
    ba9c:	e6 0d       	add	r30, r6
    ba9e:	f7 1d       	adc	r31, r7
    baa0:	44 91       	lpm	r20, Z
    baa2:	c2 01       	movw	r24, r4
    baa4:	80 55       	subi	r24, 0x50	; 80
    baa6:	9d 4f       	sbci	r25, 0xFD	; 253
    baa8:	b3 01       	movw	r22, r6
    baaa:	68 0f       	add	r22, r24
    baac:	79 1f       	adc	r23, r25
    baae:	c1 53       	subi	r28, 0x31	; 49
    bab0:	df 4f       	sbci	r29, 0xFF	; 255
    bab2:	79 83       	std	Y+1, r23	; 0x01
    bab4:	68 83       	st	Y, r22
    bab6:	cf 5c       	subi	r28, 0xCF	; 207
    bab8:	d0 40       	sbci	r29, 0x00	; 0
    baba:	4f 3f       	cpi	r20, 0xFF	; 255
    babc:	99 f0       	breq	.+38     	; 0xbae4 <draw_menu(bool)+0x1a6a>
    babe:	fb 01       	movw	r30, r22
    bac0:	24 91       	lpm	r18, Z
    bac2:	f2 01       	movw	r30, r4
    bac4:	ef 54       	subi	r30, 0x4F	; 79
    bac6:	fd 4f       	sbci	r31, 0xFD	; 253
    bac8:	e6 0d       	add	r30, r6
    baca:	f7 1d       	adc	r31, r7
    bacc:	e4 91       	lpm	r30, Z
    bace:	2e 9f       	mul	r18, r30
    bad0:	20 2d       	mov	r18, r0
    bad2:	11 24       	eor	r1, r1
    bad4:	be 01       	movw	r22, r28
    bad6:	6d 54       	subi	r22, 0x4D	; 77
    bad8:	7f 4f       	sbci	r23, 0xFF	; 255
    bada:	ce 01       	movw	r24, r28
    badc:	8e 54       	subi	r24, 0x4E	; 78
    bade:	9f 4f       	sbci	r25, 0xFF	; 255
    bae0:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    bae4:	c2 01       	movw	r24, r4
    bae6:	81 55       	subi	r24, 0x51	; 81
    bae8:	9d 4f       	sbci	r25, 0xFD	; 253
    baea:	93 01       	movw	r18, r6
    baec:	28 0f       	add	r18, r24
    baee:	39 1f       	adc	r19, r25
    baf0:	c0 54       	subi	r28, 0x40	; 64
    baf2:	df 4f       	sbci	r29, 0xFF	; 255
    baf4:	39 83       	std	Y+1, r19	; 0x01
    baf6:	28 83       	st	Y, r18
    baf8:	c0 5c       	subi	r28, 0xC0	; 192
    bafa:	d0 40       	sbci	r29, 0x00	; 0
    bafc:	40 97       	sbiw	r24, 0x10	; 16
    bafe:	a3 01       	movw	r20, r6
    bb00:	48 0f       	add	r20, r24
    bb02:	59 1f       	adc	r21, r25
    bb04:	ca 53       	subi	r28, 0x3A	; 58
    bb06:	df 4f       	sbci	r29, 0xFF	; 255
    bb08:	59 83       	std	Y+1, r21	; 0x01
    bb0a:	48 83       	st	Y, r20
    bb0c:	c6 5c       	subi	r28, 0xC6	; 198
    bb0e:	d0 40       	sbci	r29, 0x00	; 0
    bb10:	02 96       	adiw	r24, 0x02	; 2
    bb12:	b3 01       	movw	r22, r6
    bb14:	68 0f       	add	r22, r24
    bb16:	79 1f       	adc	r23, r25
    bb18:	c8 53       	subi	r28, 0x38	; 56
    bb1a:	df 4f       	sbci	r29, 0xFF	; 255
    bb1c:	79 83       	std	Y+1, r23	; 0x01
    bb1e:	68 83       	st	Y, r22
    bb20:	c8 5c       	subi	r28, 0xC8	; 200
    bb22:	d0 40       	sbci	r29, 0x00	; 0
    bb24:	0d 96       	adiw	r24, 0x0d	; 13
    bb26:	f3 01       	movw	r30, r6
    bb28:	e8 0f       	add	r30, r24
    bb2a:	f9 1f       	adc	r31, r25
    bb2c:	c5 53       	subi	r28, 0x35	; 53
    bb2e:	df 4f       	sbci	r29, 0xFF	; 255
    bb30:	f9 83       	std	Y+1, r31	; 0x01
    bb32:	e8 83       	st	Y, r30
    bb34:	cb 5c       	subi	r28, 0xCB	; 203
    bb36:	d0 40       	sbci	r29, 0x00	; 0
    bb38:	01 97       	sbiw	r24, 0x01	; 1
    bb3a:	93 01       	movw	r18, r6
    bb3c:	28 0f       	add	r18, r24
    bb3e:	39 1f       	adc	r19, r25
    bb40:	c3 53       	subi	r28, 0x33	; 51
    bb42:	df 4f       	sbci	r29, 0xFF	; 255
    bb44:	39 83       	std	Y+1, r19	; 0x01
    bb46:	28 83       	st	Y, r18
    bb48:	cd 5c       	subi	r28, 0xCD	; 205
    bb4a:	d0 40       	sbci	r29, 0x00	; 0
    bb4c:	0d 96       	adiw	r24, 0x0d	; 13
    bb4e:	a3 01       	movw	r20, r6
    bb50:	48 0f       	add	r20, r24
    bb52:	59 1f       	adc	r21, r25
    bb54:	cf 52       	subi	r28, 0x2F	; 47
    bb56:	df 4f       	sbci	r29, 0xFF	; 255
    bb58:	59 83       	std	Y+1, r21	; 0x01
    bb5a:	48 83       	st	Y, r20
    bb5c:	c1 5d       	subi	r28, 0xD1	; 209
    bb5e:	d0 40       	sbci	r29, 0x00	; 0
    bb60:	0f 97       	sbiw	r24, 0x0f	; 15
    bb62:	b3 01       	movw	r22, r6
    bb64:	68 0f       	add	r22, r24
    bb66:	79 1f       	adc	r23, r25
    bb68:	cc 52       	subi	r28, 0x2C	; 44
    bb6a:	df 4f       	sbci	r29, 0xFF	; 255
    bb6c:	79 83       	std	Y+1, r23	; 0x01
    bb6e:	68 83       	st	Y, r22
    bb70:	c4 5d       	subi	r28, 0xD4	; 212
    bb72:	d0 40       	sbci	r29, 0x00	; 0
    bb74:	02 97       	sbiw	r24, 0x02	; 2
    bb76:	f3 01       	movw	r30, r6
    bb78:	e8 0f       	add	r30, r24
    bb7a:	f9 1f       	adc	r31, r25
    bb7c:	ca 52       	subi	r28, 0x2A	; 42
    bb7e:	df 4f       	sbci	r29, 0xFF	; 255
    bb80:	f9 83       	std	Y+1, r31	; 0x01
    bb82:	e8 83       	st	Y, r30
    bb84:	c6 5d       	subi	r28, 0xD6	; 214
    bb86:	d0 40       	sbci	r29, 0x00	; 0
    bb88:	01 97       	sbiw	r24, 0x01	; 1
    bb8a:	93 01       	movw	r18, r6
    bb8c:	28 0f       	add	r18, r24
    bb8e:	39 1f       	adc	r19, r25
    bb90:	c8 52       	subi	r28, 0x28	; 40
    bb92:	df 4f       	sbci	r29, 0xFF	; 255
    bb94:	39 83       	std	Y+1, r19	; 0x01
    bb96:	28 83       	st	Y, r18
    bb98:	c8 5d       	subi	r28, 0xD8	; 216
    bb9a:	d0 40       	sbci	r29, 0x00	; 0
    bb9c:	01 97       	sbiw	r24, 0x01	; 1
    bb9e:	a3 01       	movw	r20, r6
    bba0:	48 0f       	add	r20, r24
    bba2:	59 1f       	adc	r21, r25
    bba4:	c6 52       	subi	r28, 0x26	; 38
    bba6:	df 4f       	sbci	r29, 0xFF	; 255
    bba8:	59 83       	std	Y+1, r21	; 0x01
    bbaa:	48 83       	st	Y, r20
    bbac:	ca 5d       	subi	r28, 0xDA	; 218
    bbae:	d0 40       	sbci	r29, 0x00	; 0
    bbb0:	02 97       	sbiw	r24, 0x02	; 2
    bbb2:	b3 01       	movw	r22, r6
    bbb4:	68 0f       	add	r22, r24
    bbb6:	79 1f       	adc	r23, r25
    bbb8:	c4 52       	subi	r28, 0x24	; 36
    bbba:	df 4f       	sbci	r29, 0xFF	; 255
    bbbc:	79 83       	std	Y+1, r23	; 0x01
    bbbe:	68 83       	st	Y, r22
    bbc0:	cc 5d       	subi	r28, 0xDC	; 220
    bbc2:	d0 40       	sbci	r29, 0x00	; 0
    bbc4:	02 97       	sbiw	r24, 0x02	; 2
    bbc6:	f3 01       	movw	r30, r6
    bbc8:	e8 0f       	add	r30, r24
    bbca:	f9 1f       	adc	r31, r25
    bbcc:	c2 52       	subi	r28, 0x22	; 34
    bbce:	df 4f       	sbci	r29, 0xFF	; 255
    bbd0:	f9 83       	std	Y+1, r31	; 0x01
    bbd2:	e8 83       	st	Y, r30
    bbd4:	ce 5d       	subi	r28, 0xDE	; 222
    bbd6:	d0 40       	sbci	r29, 0x00	; 0
    bbd8:	31 2c       	mov	r3, r1
    bbda:	91 2c       	mov	r9, r1
    bbdc:	ce 54       	subi	r28, 0x4E	; 78
    bbde:	df 4f       	sbci	r29, 0xFF	; 255
    bbe0:	88 81       	ld	r24, Y
    bbe2:	c2 5b       	subi	r28, 0xB2	; 178
    bbe4:	d0 40       	sbci	r29, 0x00	; 0
    bbe6:	cd 54       	subi	r28, 0x4D	; 77
    bbe8:	df 4f       	sbci	r29, 0xFF	; 255
    bbea:	98 81       	ld	r25, Y
    bbec:	c3 5b       	subi	r28, 0xB3	; 179
    bbee:	d0 40       	sbci	r29, 0x00	; 0
    bbf0:	89 17       	cp	r24, r25
    bbf2:	08 f0       	brcs	.+2      	; 0xbbf6 <draw_menu(bool)+0x1b7c>
    bbf4:	78 c1       	rjmp	.+752    	; 0xbee6 <draw_menu(bool)+0x1e6c>
    bbf6:	c0 54       	subi	r28, 0x40	; 64
    bbf8:	df 4f       	sbci	r29, 0xFF	; 255
    bbfa:	e8 81       	ld	r30, Y
    bbfc:	f9 81       	ldd	r31, Y+1	; 0x01
    bbfe:	c0 5c       	subi	r28, 0xC0	; 192
    bc00:	d0 40       	sbci	r29, 0x00	; 0
    bc02:	94 91       	lpm	r25, Z
    bc04:	91 11       	cpse	r25, r1
    bc06:	39 c0       	rjmp	.+114    	; 0xbc7a <draw_menu(bool)+0x1c00>
    bc08:	ca 53       	subi	r28, 0x3A	; 58
    bc0a:	df 4f       	sbci	r29, 0xFF	; 255
    bc0c:	e8 81       	ld	r30, Y
    bc0e:	f9 81       	ldd	r31, Y+1	; 0x01
    bc10:	c6 5c       	subi	r28, 0xC6	; 198
    bc12:	d0 40       	sbci	r29, 0x00	; 0
    bc14:	25 91       	lpm	r18, Z+
    bc16:	34 91       	lpm	r19, Z
    bc18:	ca 54       	subi	r28, 0x4A	; 74
    bc1a:	df 4f       	sbci	r29, 0xFF	; 255
    bc1c:	48 81       	ld	r20, Y
    bc1e:	59 81       	ldd	r21, Y+1	; 0x01
    bc20:	c6 5b       	subi	r28, 0xB6	; 182
    bc22:	d0 40       	sbci	r29, 0x00	; 0
    bc24:	42 0f       	add	r20, r18
    bc26:	53 1f       	adc	r21, r19
    bc28:	c4 54       	subi	r28, 0x44	; 68
    bc2a:	df 4f       	sbci	r29, 0xFF	; 255
    bc2c:	59 83       	std	Y+1, r21	; 0x01
    bc2e:	48 83       	st	Y, r20
    bc30:	cc 5b       	subi	r28, 0xBC	; 188
    bc32:	d0 40       	sbci	r29, 0x00	; 0
    bc34:	c8 53       	subi	r28, 0x38	; 56
    bc36:	df 4f       	sbci	r29, 0xFF	; 255
    bc38:	e8 81       	ld	r30, Y
    bc3a:	f9 81       	ldd	r31, Y+1	; 0x01
    bc3c:	c8 5c       	subi	r28, 0xC8	; 200
    bc3e:	d0 40       	sbci	r29, 0x00	; 0
    bc40:	25 91       	lpm	r18, Z+
    bc42:	34 91       	lpm	r19, Z
    bc44:	c5 53       	subi	r28, 0x35	; 53
    bc46:	df 4f       	sbci	r29, 0xFF	; 255
    bc48:	e8 81       	ld	r30, Y
    bc4a:	f9 81       	ldd	r31, Y+1	; 0x01
    bc4c:	cb 5c       	subi	r28, 0xCB	; 203
    bc4e:	d0 40       	sbci	r29, 0x00	; 0
    bc50:	94 91       	lpm	r25, Z
    bc52:	c8 54       	subi	r28, 0x48	; 72
    bc54:	df 4f       	sbci	r29, 0xFF	; 255
    bc56:	48 81       	ld	r20, Y
    bc58:	59 81       	ldd	r21, Y+1	; 0x01
    bc5a:	c8 5b       	subi	r28, 0xB8	; 184
    bc5c:	d0 40       	sbci	r29, 0x00	; 0
    bc5e:	24 0f       	add	r18, r20
    bc60:	35 1f       	adc	r19, r21
    bc62:	b9 01       	movw	r22, r18
    bc64:	99 9d       	mul	r25, r9
    bc66:	60 0d       	add	r22, r0
    bc68:	71 1d       	adc	r23, r1
    bc6a:	11 24       	eor	r1, r1
    bc6c:	c2 54       	subi	r28, 0x42	; 66
    bc6e:	df 4f       	sbci	r29, 0xFF	; 255
    bc70:	79 83       	std	Y+1, r23	; 0x01
    bc72:	68 83       	st	Y, r22
    bc74:	ce 5b       	subi	r28, 0xBE	; 190
    bc76:	d0 40       	sbci	r29, 0x00	; 0
    bc78:	93 94       	inc	r9
    bc7a:	c0 54       	subi	r28, 0x40	; 64
    bc7c:	df 4f       	sbci	r29, 0xFF	; 255
    bc7e:	e8 81       	ld	r30, Y
    bc80:	f9 81       	ldd	r31, Y+1	; 0x01
    bc82:	c0 5c       	subi	r28, 0xC0	; 192
    bc84:	d0 40       	sbci	r29, 0x00	; 0
    bc86:	94 91       	lpm	r25, Z
    bc88:	91 30       	cpi	r25, 0x01	; 1
    bc8a:	09 f0       	breq	.+2      	; 0xbc8e <draw_menu(bool)+0x1c14>
    bc8c:	39 c0       	rjmp	.+114    	; 0xbd00 <draw_menu(bool)+0x1c86>
    bc8e:	c8 53       	subi	r28, 0x38	; 56
    bc90:	df 4f       	sbci	r29, 0xFF	; 255
    bc92:	e8 81       	ld	r30, Y
    bc94:	f9 81       	ldd	r31, Y+1	; 0x01
    bc96:	c8 5c       	subi	r28, 0xC8	; 200
    bc98:	d0 40       	sbci	r29, 0x00	; 0
    bc9a:	25 91       	lpm	r18, Z+
    bc9c:	34 91       	lpm	r19, Z
    bc9e:	c8 54       	subi	r28, 0x48	; 72
    bca0:	df 4f       	sbci	r29, 0xFF	; 255
    bca2:	48 81       	ld	r20, Y
    bca4:	59 81       	ldd	r21, Y+1	; 0x01
    bca6:	c8 5b       	subi	r28, 0xB8	; 184
    bca8:	d0 40       	sbci	r29, 0x00	; 0
    bcaa:	42 0f       	add	r20, r18
    bcac:	53 1f       	adc	r21, r19
    bcae:	c2 54       	subi	r28, 0x42	; 66
    bcb0:	df 4f       	sbci	r29, 0xFF	; 255
    bcb2:	59 83       	std	Y+1, r21	; 0x01
    bcb4:	48 83       	st	Y, r20
    bcb6:	ce 5b       	subi	r28, 0xBE	; 190
    bcb8:	d0 40       	sbci	r29, 0x00	; 0
    bcba:	ca 53       	subi	r28, 0x3A	; 58
    bcbc:	df 4f       	sbci	r29, 0xFF	; 255
    bcbe:	e8 81       	ld	r30, Y
    bcc0:	f9 81       	ldd	r31, Y+1	; 0x01
    bcc2:	c6 5c       	subi	r28, 0xC6	; 198
    bcc4:	d0 40       	sbci	r29, 0x00	; 0
    bcc6:	25 91       	lpm	r18, Z+
    bcc8:	34 91       	lpm	r19, Z
    bcca:	c3 53       	subi	r28, 0x33	; 51
    bccc:	df 4f       	sbci	r29, 0xFF	; 255
    bcce:	e8 81       	ld	r30, Y
    bcd0:	f9 81       	ldd	r31, Y+1	; 0x01
    bcd2:	cd 5c       	subi	r28, 0xCD	; 205
    bcd4:	d0 40       	sbci	r29, 0x00	; 0
    bcd6:	94 91       	lpm	r25, Z
    bcd8:	ca 54       	subi	r28, 0x4A	; 74
    bcda:	df 4f       	sbci	r29, 0xFF	; 255
    bcdc:	48 81       	ld	r20, Y
    bcde:	59 81       	ldd	r21, Y+1	; 0x01
    bce0:	c6 5b       	subi	r28, 0xB6	; 182
    bce2:	d0 40       	sbci	r29, 0x00	; 0
    bce4:	24 0f       	add	r18, r20
    bce6:	35 1f       	adc	r19, r21
    bce8:	b9 01       	movw	r22, r18
    bcea:	99 9d       	mul	r25, r9
    bcec:	60 0d       	add	r22, r0
    bcee:	71 1d       	adc	r23, r1
    bcf0:	11 24       	eor	r1, r1
    bcf2:	c4 54       	subi	r28, 0x44	; 68
    bcf4:	df 4f       	sbci	r29, 0xFF	; 255
    bcf6:	79 83       	std	Y+1, r23	; 0x01
    bcf8:	68 83       	st	Y, r22
    bcfa:	cc 5b       	subi	r28, 0xBC	; 188
    bcfc:	d0 40       	sbci	r29, 0x00	; 0
    bcfe:	93 94       	inc	r9
    bd00:	c0 54       	subi	r28, 0x40	; 64
    bd02:	df 4f       	sbci	r29, 0xFF	; 255
    bd04:	e8 81       	ld	r30, Y
    bd06:	f9 81       	ldd	r31, Y+1	; 0x01
    bd08:	c0 5c       	subi	r28, 0xC0	; 192
    bd0a:	d0 40       	sbci	r29, 0x00	; 0
    bd0c:	94 91       	lpm	r25, Z
    bd0e:	92 30       	cpi	r25, 0x02	; 2
    bd10:	09 f0       	breq	.+2      	; 0xbd14 <draw_menu(bool)+0x1c9a>
    bd12:	50 c0       	rjmp	.+160    	; 0xbdb4 <draw_menu(bool)+0x1d3a>
    bd14:	ca 53       	subi	r28, 0x3A	; 58
    bd16:	df 4f       	sbci	r29, 0xFF	; 255
    bd18:	e8 81       	ld	r30, Y
    bd1a:	f9 81       	ldd	r31, Y+1	; 0x01
    bd1c:	c6 5c       	subi	r28, 0xC6	; 198
    bd1e:	d0 40       	sbci	r29, 0x00	; 0
    bd20:	25 91       	lpm	r18, Z+
    bd22:	34 91       	lpm	r19, Z
    bd24:	c3 53       	subi	r28, 0x33	; 51
    bd26:	df 4f       	sbci	r29, 0xFF	; 255
    bd28:	e8 81       	ld	r30, Y
    bd2a:	f9 81       	ldd	r31, Y+1	; 0x01
    bd2c:	cd 5c       	subi	r28, 0xCD	; 205
    bd2e:	d0 40       	sbci	r29, 0x00	; 0
    bd30:	94 91       	lpm	r25, Z
    bd32:	ca 54       	subi	r28, 0x4A	; 74
    bd34:	df 4f       	sbci	r29, 0xFF	; 255
    bd36:	48 81       	ld	r20, Y
    bd38:	59 81       	ldd	r21, Y+1	; 0x01
    bd3a:	c6 5b       	subi	r28, 0xB6	; 182
    bd3c:	d0 40       	sbci	r29, 0x00	; 0
    bd3e:	24 0f       	add	r18, r20
    bd40:	35 1f       	adc	r19, r21
    bd42:	b9 01       	movw	r22, r18
    bd44:	99 9d       	mul	r25, r9
    bd46:	60 0d       	add	r22, r0
    bd48:	71 1d       	adc	r23, r1
    bd4a:	11 24       	eor	r1, r1
    bd4c:	c4 54       	subi	r28, 0x44	; 68
    bd4e:	df 4f       	sbci	r29, 0xFF	; 255
    bd50:	79 83       	std	Y+1, r23	; 0x01
    bd52:	68 83       	st	Y, r22
    bd54:	cc 5b       	subi	r28, 0xBC	; 188
    bd56:	d0 40       	sbci	r29, 0x00	; 0
    bd58:	c8 53       	subi	r28, 0x38	; 56
    bd5a:	df 4f       	sbci	r29, 0xFF	; 255
    bd5c:	e8 81       	ld	r30, Y
    bd5e:	f9 81       	ldd	r31, Y+1	; 0x01
    bd60:	c8 5c       	subi	r28, 0xC8	; 200
    bd62:	d0 40       	sbci	r29, 0x00	; 0
    bd64:	25 91       	lpm	r18, Z+
    bd66:	34 91       	lpm	r19, Z
    bd68:	c5 53       	subi	r28, 0x35	; 53
    bd6a:	df 4f       	sbci	r29, 0xFF	; 255
    bd6c:	e8 81       	ld	r30, Y
    bd6e:	f9 81       	ldd	r31, Y+1	; 0x01
    bd70:	cb 5c       	subi	r28, 0xCB	; 203
    bd72:	d0 40       	sbci	r29, 0x00	; 0
    bd74:	94 91       	lpm	r25, Z
    bd76:	c8 54       	subi	r28, 0x48	; 72
    bd78:	df 4f       	sbci	r29, 0xFF	; 255
    bd7a:	48 81       	ld	r20, Y
    bd7c:	59 81       	ldd	r21, Y+1	; 0x01
    bd7e:	c8 5b       	subi	r28, 0xB8	; 184
    bd80:	d0 40       	sbci	r29, 0x00	; 0
    bd82:	24 0f       	add	r18, r20
    bd84:	35 1f       	adc	r19, r21
    bd86:	b9 01       	movw	r22, r18
    bd88:	93 9d       	mul	r25, r3
    bd8a:	60 0d       	add	r22, r0
    bd8c:	71 1d       	adc	r23, r1
    bd8e:	11 24       	eor	r1, r1
    bd90:	c2 54       	subi	r28, 0x42	; 66
    bd92:	df 4f       	sbci	r29, 0xFF	; 255
    bd94:	79 83       	std	Y+1, r23	; 0x01
    bd96:	68 83       	st	Y, r22
    bd98:	ce 5b       	subi	r28, 0xBE	; 190
    bd9a:	d0 40       	sbci	r29, 0x00	; 0
    bd9c:	93 94       	inc	r9
    bd9e:	c1 53       	subi	r28, 0x31	; 49
    bda0:	df 4f       	sbci	r29, 0xFF	; 255
    bda2:	e8 81       	ld	r30, Y
    bda4:	f9 81       	ldd	r31, Y+1	; 0x01
    bda6:	cf 5c       	subi	r28, 0xCF	; 207
    bda8:	d0 40       	sbci	r29, 0x00	; 0
    bdaa:	94 91       	lpm	r25, Z
    bdac:	99 16       	cp	r9, r25
    bdae:	10 f0       	brcs	.+4      	; 0xbdb4 <draw_menu(bool)+0x1d3a>
    bdb0:	33 94       	inc	r3
    bdb2:	91 2c       	mov	r9, r1
    bdb4:	c6 54       	subi	r28, 0x46	; 70
    bdb6:	df 4f       	sbci	r29, 0xFF	; 255
    bdb8:	e8 81       	ld	r30, Y
    bdba:	f9 81       	ldd	r31, Y+1	; 0x01
    bdbc:	ca 5b       	subi	r28, 0xBA	; 186
    bdbe:	d0 40       	sbci	r29, 0x00	; 0
    bdc0:	44 91       	lpm	r20, Z
    bdc2:	8e 01       	movw	r16, r28
    bdc4:	0f 57       	subi	r16, 0x7F	; 127
    bdc6:	1f 4f       	sbci	r17, 0xFF	; 255
    bdc8:	9e 01       	movw	r18, r28
    bdca:	2f 5f       	subi	r18, 0xFF	; 255
    bdcc:	3f 4f       	sbci	r19, 0xFF	; 255
    bdce:	cf 54       	subi	r28, 0x4F	; 79
    bdd0:	df 4f       	sbci	r29, 0xFF	; 255
    bdd2:	68 81       	ld	r22, Y
    bdd4:	c1 5b       	subi	r28, 0xB1	; 177
    bdd6:	d0 40       	sbci	r29, 0x00	; 0
    bdd8:	ce 51       	subi	r28, 0x1E	; 30
    bdda:	df 4f       	sbci	r29, 0xFF	; 255
    bddc:	e8 81       	ld	r30, Y
    bdde:	f9 81       	ldd	r31, Y+1	; 0x01
    bde0:	c2 5e       	subi	r28, 0xE2	; 226
    bde2:	d0 40       	sbci	r29, 0x00	; 0
    bde4:	19 95       	eicall
    bde6:	cf 52       	subi	r28, 0x2F	; 47
    bde8:	df 4f       	sbci	r29, 0xFF	; 255
    bdea:	e8 81       	ld	r30, Y
    bdec:	f9 81       	ldd	r31, Y+1	; 0x01
    bdee:	c1 5d       	subi	r28, 0xD1	; 209
    bdf0:	d0 40       	sbci	r29, 0x00	; 0
    bdf2:	25 91       	lpm	r18, Z+
    bdf4:	34 91       	lpm	r19, Z
    bdf6:	c6 54       	subi	r28, 0x46	; 70
    bdf8:	df 4f       	sbci	r29, 0xFF	; 255
    bdfa:	e8 81       	ld	r30, Y
    bdfc:	f9 81       	ldd	r31, Y+1	; 0x01
    bdfe:	ca 5b       	subi	r28, 0xBA	; 186
    be00:	d0 40       	sbci	r29, 0x00	; 0
    be02:	84 91       	lpm	r24, Z
    be04:	cf 54       	subi	r28, 0x4F	; 79
    be06:	df 4f       	sbci	r29, 0xFF	; 255
    be08:	68 81       	ld	r22, Y
    be0a:	c1 5b       	subi	r28, 0xB1	; 177
    be0c:	d0 40       	sbci	r29, 0x00	; 0
    be0e:	70 e0       	ldi	r23, 0x00	; 0
    be10:	ce 54       	subi	r28, 0x4E	; 78
    be12:	df 4f       	sbci	r29, 0xFF	; 255
    be14:	48 81       	ld	r20, Y
    be16:	c2 5b       	subi	r28, 0xB2	; 178
    be18:	d0 40       	sbci	r29, 0x00	; 0
    be1a:	90 e0       	ldi	r25, 0x00	; 0
    be1c:	f9 01       	movw	r30, r18
    be1e:	19 95       	eicall
    be20:	cc 52       	subi	r28, 0x2C	; 44
    be22:	df 4f       	sbci	r29, 0xFF	; 255
    be24:	e8 81       	ld	r30, Y
    be26:	f9 81       	ldd	r31, Y+1	; 0x01
    be28:	c4 5d       	subi	r28, 0xD4	; 212
    be2a:	d0 40       	sbci	r29, 0x00	; 0
    be2c:	a5 90       	lpm	r10, Z+
    be2e:	b4 90       	lpm	r11, Z
    be30:	ca 52       	subi	r28, 0x2A	; 42
    be32:	df 4f       	sbci	r29, 0xFF	; 255
    be34:	e8 81       	ld	r30, Y
    be36:	f9 81       	ldd	r31, Y+1	; 0x01
    be38:	c6 5d       	subi	r28, 0xD6	; 214
    be3a:	d0 40       	sbci	r29, 0x00	; 0
    be3c:	c5 90       	lpm	r12, Z+
    be3e:	d4 90       	lpm	r13, Z
    be40:	c8 52       	subi	r28, 0x28	; 40
    be42:	df 4f       	sbci	r29, 0xFF	; 255
    be44:	e8 81       	ld	r30, Y
    be46:	f9 81       	ldd	r31, Y+1	; 0x01
    be48:	c8 5d       	subi	r28, 0xD8	; 216
    be4a:	d0 40       	sbci	r29, 0x00	; 0
    be4c:	e4 90       	lpm	r14, Z
    be4e:	c6 52       	subi	r28, 0x26	; 38
    be50:	df 4f       	sbci	r29, 0xFF	; 255
    be52:	e8 81       	ld	r30, Y
    be54:	f9 81       	ldd	r31, Y+1	; 0x01
    be56:	ca 5d       	subi	r28, 0xDA	; 218
    be58:	d0 40       	sbci	r29, 0x00	; 0
    be5a:	04 91       	lpm	r16, Z
    be5c:	c4 52       	subi	r28, 0x24	; 36
    be5e:	df 4f       	sbci	r29, 0xFF	; 255
    be60:	e8 81       	ld	r30, Y
    be62:	f9 81       	ldd	r31, Y+1	; 0x01
    be64:	cc 5d       	subi	r28, 0xDC	; 220
    be66:	d0 40       	sbci	r29, 0x00	; 0
    be68:	25 91       	lpm	r18, Z+
    be6a:	34 91       	lpm	r19, Z
    be6c:	c2 52       	subi	r28, 0x22	; 34
    be6e:	df 4f       	sbci	r29, 0xFF	; 255
    be70:	e8 81       	ld	r30, Y
    be72:	f9 81       	ldd	r31, Y+1	; 0x01
    be74:	ce 5d       	subi	r28, 0xDE	; 222
    be76:	d0 40       	sbci	r29, 0x00	; 0
    be78:	45 91       	lpm	r20, Z+
    be7a:	54 91       	lpm	r21, Z
    be7c:	88 24       	eor	r8, r8
    be7e:	83 94       	inc	r8
    be80:	81 11       	cpse	r24, r1
    be82:	01 c0       	rjmp	.+2      	; 0xbe86 <draw_menu(bool)+0x1e0c>
    be84:	81 2c       	mov	r8, r1
    be86:	cb 54       	subi	r28, 0x4B	; 75
    be88:	df 4f       	sbci	r29, 0xFF	; 255
    be8a:	f8 81       	ld	r31, Y
    be8c:	c5 5b       	subi	r28, 0xB5	; 181
    be8e:	d0 40       	sbci	r29, 0x00	; 0
    be90:	ff 93       	push	r31
    be92:	cc 54       	subi	r28, 0x4C	; 76
    be94:	df 4f       	sbci	r29, 0xFF	; 255
    be96:	68 81       	ld	r22, Y
    be98:	c4 5b       	subi	r28, 0xB4	; 180
    be9a:	d0 40       	sbci	r29, 0x00	; 0
    be9c:	6f 93       	push	r22
    be9e:	81 e0       	ldi	r24, 0x01	; 1
    bea0:	90 e0       	ldi	r25, 0x00	; 0
    bea2:	8c 0f       	add	r24, r28
    bea4:	9d 1f       	adc	r25, r29
    bea6:	9f 93       	push	r25
    bea8:	8f 93       	push	r24
    beaa:	c2 54       	subi	r28, 0x42	; 66
    beac:	df 4f       	sbci	r29, 0xFF	; 255
    beae:	68 81       	ld	r22, Y
    beb0:	79 81       	ldd	r23, Y+1	; 0x01
    beb2:	ce 5b       	subi	r28, 0xBE	; 190
    beb4:	d0 40       	sbci	r29, 0x00	; 0
    beb6:	c4 54       	subi	r28, 0x44	; 68
    beb8:	df 4f       	sbci	r29, 0xFF	; 255
    beba:	88 81       	ld	r24, Y
    bebc:	99 81       	ldd	r25, Y+1	; 0x01
    bebe:	cc 5b       	subi	r28, 0xBC	; 188
    bec0:	d0 40       	sbci	r29, 0x00	; 0
    bec2:	0e 94 a0 4d 	call	0x9b40	; 0x9b40 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    bec6:	ce 54       	subi	r28, 0x4E	; 78
    bec8:	df 4f       	sbci	r29, 0xFF	; 255
    beca:	88 81       	ld	r24, Y
    becc:	c2 5b       	subi	r28, 0xB2	; 178
    bece:	d0 40       	sbci	r29, 0x00	; 0
    bed0:	8f 5f       	subi	r24, 0xFF	; 255
    bed2:	ce 54       	subi	r28, 0x4E	; 78
    bed4:	df 4f       	sbci	r29, 0xFF	; 255
    bed6:	88 83       	st	Y, r24
    bed8:	c2 5b       	subi	r28, 0xB2	; 178
    beda:	d0 40       	sbci	r29, 0x00	; 0
    bedc:	0f 90       	pop	r0
    bede:	0f 90       	pop	r0
    bee0:	0f 90       	pop	r0
    bee2:	0f 90       	pop	r0
    bee4:	7b ce       	rjmp	.-778    	; 0xbbdc <draw_menu(bool)+0x1b62>
    bee6:	ce 53       	subi	r28, 0x3E	; 62
    bee8:	df 4f       	sbci	r29, 0xFF	; 255
    beea:	e8 81       	ld	r30, Y
    beec:	f9 81       	ldd	r31, Y+1	; 0x01
    beee:	c2 5c       	subi	r28, 0xC2	; 194
    bef0:	d0 40       	sbci	r29, 0x00	; 0
    bef2:	ef 2b       	or	r30, r31
    bef4:	09 f4       	brne	.+2      	; 0xbef8 <draw_menu(bool)+0x1e7e>
    bef6:	c5 c1       	rjmp	.+906    	; 0xc282 <draw_menu(bool)+0x2208>
    bef8:	cc 53       	subi	r28, 0x3C	; 60
    befa:	df 4f       	sbci	r29, 0xFF	; 255
    befc:	28 81       	ld	r18, Y
    befe:	39 81       	ldd	r19, Y+1	; 0x01
    bf00:	c4 5c       	subi	r28, 0xC4	; 196
    bf02:	d0 40       	sbci	r29, 0x00	; 0
    bf04:	23 2b       	or	r18, r19
    bf06:	09 f4       	brne	.+2      	; 0xbf0a <draw_menu(bool)+0x1e90>
    bf08:	bc c1       	rjmp	.+888    	; 0xc282 <draw_menu(bool)+0x2208>
    bf0a:	ce 54       	subi	r28, 0x4E	; 78
    bf0c:	df 4f       	sbci	r29, 0xFF	; 255
    bf0e:	18 82       	st	Y, r1
    bf10:	c2 5b       	subi	r28, 0xB2	; 178
    bf12:	d0 40       	sbci	r29, 0x00	; 0
    bf14:	f2 01       	movw	r30, r4
    bf16:	e8 54       	subi	r30, 0x48	; 72
    bf18:	fd 4f       	sbci	r31, 0xFD	; 253
    bf1a:	e6 0d       	add	r30, r6
    bf1c:	f7 1d       	adc	r31, r7
    bf1e:	25 91       	lpm	r18, Z+
    bf20:	34 91       	lpm	r19, Z
    bf22:	c2 01       	movw	r24, r4
    bf24:	8d 54       	subi	r24, 0x4D	; 77
    bf26:	9d 4f       	sbci	r25, 0xFD	; 253
    bf28:	a3 01       	movw	r20, r6
    bf2a:	48 0f       	add	r20, r24
    bf2c:	59 1f       	adc	r21, r25
    bf2e:	c0 54       	subi	r28, 0x40	; 64
    bf30:	df 4f       	sbci	r29, 0xFF	; 255
    bf32:	59 83       	std	Y+1, r21	; 0x01
    bf34:	48 83       	st	Y, r20
    bf36:	c0 5c       	subi	r28, 0xC0	; 192
    bf38:	d0 40       	sbci	r29, 0x00	; 0
    bf3a:	fa 01       	movw	r30, r20
    bf3c:	84 91       	lpm	r24, Z
    bf3e:	cf 54       	subi	r28, 0x4F	; 79
    bf40:	df 4f       	sbci	r29, 0xFF	; 255
    bf42:	68 81       	ld	r22, Y
    bf44:	c1 5b       	subi	r28, 0xB1	; 177
    bf46:	d0 40       	sbci	r29, 0x00	; 0
    bf48:	70 e0       	ldi	r23, 0x00	; 0
    bf4a:	40 e0       	ldi	r20, 0x00	; 0
    bf4c:	90 e0       	ldi	r25, 0x00	; 0
    bf4e:	f9 01       	movw	r30, r18
    bf50:	19 95       	eicall
    bf52:	cd 54       	subi	r28, 0x4D	; 77
    bf54:	df 4f       	sbci	r29, 0xFF	; 255
    bf56:	88 83       	st	Y, r24
    bf58:	c3 5b       	subi	r28, 0xB3	; 179
    bf5a:	d0 40       	sbci	r29, 0x00	; 0
    bf5c:	f2 01       	movw	r30, r4
    bf5e:	ee 54       	subi	r30, 0x4E	; 78
    bf60:	fd 4f       	sbci	r31, 0xFD	; 253
    bf62:	e6 0d       	add	r30, r6
    bf64:	f7 1d       	adc	r31, r7
    bf66:	44 91       	lpm	r20, Z
    bf68:	c2 01       	movw	r24, r4
    bf6a:	80 55       	subi	r24, 0x50	; 80
    bf6c:	9d 4f       	sbci	r25, 0xFD	; 253
    bf6e:	93 01       	movw	r18, r6
    bf70:	28 0f       	add	r18, r24
    bf72:	39 1f       	adc	r19, r25
    bf74:	c5 53       	subi	r28, 0x35	; 53
    bf76:	df 4f       	sbci	r29, 0xFF	; 255
    bf78:	39 83       	std	Y+1, r19	; 0x01
    bf7a:	28 83       	st	Y, r18
    bf7c:	cb 5c       	subi	r28, 0xCB	; 203
    bf7e:	d0 40       	sbci	r29, 0x00	; 0
    bf80:	4f 3f       	cpi	r20, 0xFF	; 255
    bf82:	99 f0       	breq	.+38     	; 0xbfaa <draw_menu(bool)+0x1f30>
    bf84:	f9 01       	movw	r30, r18
    bf86:	24 91       	lpm	r18, Z
    bf88:	f2 01       	movw	r30, r4
    bf8a:	ef 54       	subi	r30, 0x4F	; 79
    bf8c:	fd 4f       	sbci	r31, 0xFD	; 253
    bf8e:	e6 0d       	add	r30, r6
    bf90:	f7 1d       	adc	r31, r7
    bf92:	e4 91       	lpm	r30, Z
    bf94:	2e 9f       	mul	r18, r30
    bf96:	20 2d       	mov	r18, r0
    bf98:	11 24       	eor	r1, r1
    bf9a:	be 01       	movw	r22, r28
    bf9c:	6d 54       	subi	r22, 0x4D	; 77
    bf9e:	7f 4f       	sbci	r23, 0xFF	; 255
    bfa0:	ce 01       	movw	r24, r28
    bfa2:	8e 54       	subi	r24, 0x4E	; 78
    bfa4:	9f 4f       	sbci	r25, 0xFF	; 255
    bfa6:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    bfaa:	ce 54       	subi	r28, 0x4E	; 78
    bfac:	df 4f       	sbci	r29, 0xFF	; 255
    bfae:	88 80       	ld	r8, Y
    bfb0:	c2 5b       	subi	r28, 0xB2	; 178
    bfb2:	d0 40       	sbci	r29, 0x00	; 0
    bfb4:	cd 54       	subi	r28, 0x4D	; 77
    bfb6:	df 4f       	sbci	r29, 0xFF	; 255
    bfb8:	f8 81       	ld	r31, Y
    bfba:	c3 5b       	subi	r28, 0xB3	; 179
    bfbc:	d0 40       	sbci	r29, 0x00	; 0
    bfbe:	c3 53       	subi	r28, 0x33	; 51
    bfc0:	df 4f       	sbci	r29, 0xFF	; 255
    bfc2:	f8 83       	st	Y, r31
    bfc4:	cd 5c       	subi	r28, 0xCD	; 205
    bfc6:	d0 40       	sbci	r29, 0x00	; 0
    bfc8:	c2 01       	movw	r24, r4
    bfca:	81 55       	subi	r24, 0x51	; 81
    bfcc:	9d 4f       	sbci	r25, 0xFD	; 253
    bfce:	93 01       	movw	r18, r6
    bfd0:	28 0f       	add	r18, r24
    bfd2:	39 1f       	adc	r19, r25
    bfd4:	c6 54       	subi	r28, 0x46	; 70
    bfd6:	df 4f       	sbci	r29, 0xFF	; 255
    bfd8:	39 83       	std	Y+1, r19	; 0x01
    bfda:	28 83       	st	Y, r18
    bfdc:	ca 5b       	subi	r28, 0xBA	; 186
    bfde:	d0 40       	sbci	r29, 0x00	; 0
    bfe0:	62 01       	movw	r12, r4
    bfe2:	31 e6       	ldi	r19, 0x61	; 97
    bfe4:	c3 1a       	sub	r12, r19
    bfe6:	3d ef       	ldi	r19, 0xFD	; 253
    bfe8:	d3 0a       	sbc	r13, r19
    bfea:	c6 0c       	add	r12, r6
    bfec:	d7 1c       	adc	r13, r7
    bfee:	52 01       	movw	r10, r4
    bff0:	4f e5       	ldi	r20, 0x5F	; 95
    bff2:	a4 1a       	sub	r10, r20
    bff4:	4d ef       	ldi	r20, 0xFD	; 253
    bff6:	b4 0a       	sbc	r11, r20
    bff8:	a6 0c       	add	r10, r6
    bffa:	b7 1c       	adc	r11, r7
    bffc:	01 97       	sbiw	r24, 0x01	; 1
    bffe:	b3 01       	movw	r22, r6
    c000:	68 0f       	add	r22, r24
    c002:	79 1f       	adc	r23, r25
    c004:	ca 53       	subi	r28, 0x3A	; 58
    c006:	df 4f       	sbci	r29, 0xFF	; 255
    c008:	79 83       	std	Y+1, r23	; 0x01
    c00a:	68 83       	st	Y, r22
    c00c:	c6 5c       	subi	r28, 0xC6	; 198
    c00e:	d0 40       	sbci	r29, 0x00	; 0
    c010:	01 97       	sbiw	r24, 0x01	; 1
    c012:	f3 01       	movw	r30, r6
    c014:	e8 0f       	add	r30, r24
    c016:	f9 1f       	adc	r31, r25
    c018:	c8 53       	subi	r28, 0x38	; 56
    c01a:	df 4f       	sbci	r29, 0xFF	; 255
    c01c:	f9 83       	std	Y+1, r31	; 0x01
    c01e:	e8 83       	st	Y, r30
    c020:	c8 5c       	subi	r28, 0xC8	; 200
    c022:	d0 40       	sbci	r29, 0x00	; 0
    c024:	08 97       	sbiw	r24, 0x08	; 8
    c026:	93 01       	movw	r18, r6
    c028:	28 0f       	add	r18, r24
    c02a:	39 1f       	adc	r19, r25
    c02c:	c1 53       	subi	r28, 0x31	; 49
    c02e:	df 4f       	sbci	r29, 0xFF	; 255
    c030:	39 83       	std	Y+1, r19	; 0x01
    c032:	28 83       	st	Y, r18
    c034:	cf 5c       	subi	r28, 0xCF	; 207
    c036:	d0 40       	sbci	r29, 0x00	; 0
    c038:	02 97       	sbiw	r24, 0x02	; 2
    c03a:	a3 01       	movw	r20, r6
    c03c:	48 0f       	add	r20, r24
    c03e:	59 1f       	adc	r21, r25
    c040:	cf 52       	subi	r28, 0x2F	; 47
    c042:	df 4f       	sbci	r29, 0xFF	; 255
    c044:	59 83       	std	Y+1, r21	; 0x01
    c046:	48 83       	st	Y, r20
    c048:	c1 5d       	subi	r28, 0xD1	; 209
    c04a:	d0 40       	sbci	r29, 0x00	; 0
    c04c:	31 2c       	mov	r3, r1
    c04e:	91 2c       	mov	r9, r1
    c050:	c3 53       	subi	r28, 0x33	; 51
    c052:	df 4f       	sbci	r29, 0xFF	; 255
    c054:	58 81       	ld	r21, Y
    c056:	cd 5c       	subi	r28, 0xCD	; 205
    c058:	d0 40       	sbci	r29, 0x00	; 0
    c05a:	85 16       	cp	r8, r21
    c05c:	08 f0       	brcs	.+2      	; 0xc060 <draw_menu(bool)+0x1fe6>
    c05e:	11 c1       	rjmp	.+546    	; 0xc282 <draw_menu(bool)+0x2208>
    c060:	c6 54       	subi	r28, 0x46	; 70
    c062:	df 4f       	sbci	r29, 0xFF	; 255
    c064:	e8 81       	ld	r30, Y
    c066:	f9 81       	ldd	r31, Y+1	; 0x01
    c068:	ca 5b       	subi	r28, 0xBA	; 186
    c06a:	d0 40       	sbci	r29, 0x00	; 0
    c06c:	84 91       	lpm	r24, Z
    c06e:	81 11       	cpse	r24, r1
    c070:	2f c0       	rjmp	.+94     	; 0xc0d0 <draw_menu(bool)+0x2056>
    c072:	f6 01       	movw	r30, r12
    c074:	85 91       	lpm	r24, Z+
    c076:	94 91       	lpm	r25, Z
    c078:	ca 54       	subi	r28, 0x4A	; 74
    c07a:	df 4f       	sbci	r29, 0xFF	; 255
    c07c:	28 81       	ld	r18, Y
    c07e:	39 81       	ldd	r19, Y+1	; 0x01
    c080:	c6 5b       	subi	r28, 0xB6	; 182
    c082:	d0 40       	sbci	r29, 0x00	; 0
    c084:	28 0f       	add	r18, r24
    c086:	39 1f       	adc	r19, r25
    c088:	c4 54       	subi	r28, 0x44	; 68
    c08a:	df 4f       	sbci	r29, 0xFF	; 255
    c08c:	39 83       	std	Y+1, r19	; 0x01
    c08e:	28 83       	st	Y, r18
    c090:	cc 5b       	subi	r28, 0xBC	; 188
    c092:	d0 40       	sbci	r29, 0x00	; 0
    c094:	f5 01       	movw	r30, r10
    c096:	85 91       	lpm	r24, Z+
    c098:	94 91       	lpm	r25, Z
    c09a:	ca 53       	subi	r28, 0x3A	; 58
    c09c:	df 4f       	sbci	r29, 0xFF	; 255
    c09e:	e8 81       	ld	r30, Y
    c0a0:	f9 81       	ldd	r31, Y+1	; 0x01
    c0a2:	c6 5c       	subi	r28, 0xC6	; 198
    c0a4:	d0 40       	sbci	r29, 0x00	; 0
    c0a6:	24 91       	lpm	r18, Z
    c0a8:	c8 54       	subi	r28, 0x48	; 72
    c0aa:	df 4f       	sbci	r29, 0xFF	; 255
    c0ac:	48 81       	ld	r20, Y
    c0ae:	59 81       	ldd	r21, Y+1	; 0x01
    c0b0:	c8 5b       	subi	r28, 0xB8	; 184
    c0b2:	d0 40       	sbci	r29, 0x00	; 0
    c0b4:	84 0f       	add	r24, r20
    c0b6:	95 1f       	adc	r25, r21
    c0b8:	bc 01       	movw	r22, r24
    c0ba:	29 9d       	mul	r18, r9
    c0bc:	60 0d       	add	r22, r0
    c0be:	71 1d       	adc	r23, r1
    c0c0:	11 24       	eor	r1, r1
    c0c2:	c2 54       	subi	r28, 0x42	; 66
    c0c4:	df 4f       	sbci	r29, 0xFF	; 255
    c0c6:	79 83       	std	Y+1, r23	; 0x01
    c0c8:	68 83       	st	Y, r22
    c0ca:	ce 5b       	subi	r28, 0xBE	; 190
    c0cc:	d0 40       	sbci	r29, 0x00	; 0
    c0ce:	93 94       	inc	r9
    c0d0:	c6 54       	subi	r28, 0x46	; 70
    c0d2:	df 4f       	sbci	r29, 0xFF	; 255
    c0d4:	e8 81       	ld	r30, Y
    c0d6:	f9 81       	ldd	r31, Y+1	; 0x01
    c0d8:	ca 5b       	subi	r28, 0xBA	; 186
    c0da:	d0 40       	sbci	r29, 0x00	; 0
    c0dc:	84 91       	lpm	r24, Z
    c0de:	81 30       	cpi	r24, 0x01	; 1
    c0e0:	79 f5       	brne	.+94     	; 0xc140 <draw_menu(bool)+0x20c6>
    c0e2:	f5 01       	movw	r30, r10
    c0e4:	85 91       	lpm	r24, Z+
    c0e6:	94 91       	lpm	r25, Z
    c0e8:	c8 54       	subi	r28, 0x48	; 72
    c0ea:	df 4f       	sbci	r29, 0xFF	; 255
    c0ec:	28 81       	ld	r18, Y
    c0ee:	39 81       	ldd	r19, Y+1	; 0x01
    c0f0:	c8 5b       	subi	r28, 0xB8	; 184
    c0f2:	d0 40       	sbci	r29, 0x00	; 0
    c0f4:	28 0f       	add	r18, r24
    c0f6:	39 1f       	adc	r19, r25
    c0f8:	c2 54       	subi	r28, 0x42	; 66
    c0fa:	df 4f       	sbci	r29, 0xFF	; 255
    c0fc:	39 83       	std	Y+1, r19	; 0x01
    c0fe:	28 83       	st	Y, r18
    c100:	ce 5b       	subi	r28, 0xBE	; 190
    c102:	d0 40       	sbci	r29, 0x00	; 0
    c104:	f6 01       	movw	r30, r12
    c106:	85 91       	lpm	r24, Z+
    c108:	94 91       	lpm	r25, Z
    c10a:	c8 53       	subi	r28, 0x38	; 56
    c10c:	df 4f       	sbci	r29, 0xFF	; 255
    c10e:	e8 81       	ld	r30, Y
    c110:	f9 81       	ldd	r31, Y+1	; 0x01
    c112:	c8 5c       	subi	r28, 0xC8	; 200
    c114:	d0 40       	sbci	r29, 0x00	; 0
    c116:	24 91       	lpm	r18, Z
    c118:	ca 54       	subi	r28, 0x4A	; 74
    c11a:	df 4f       	sbci	r29, 0xFF	; 255
    c11c:	48 81       	ld	r20, Y
    c11e:	59 81       	ldd	r21, Y+1	; 0x01
    c120:	c6 5b       	subi	r28, 0xB6	; 182
    c122:	d0 40       	sbci	r29, 0x00	; 0
    c124:	84 0f       	add	r24, r20
    c126:	95 1f       	adc	r25, r21
    c128:	bc 01       	movw	r22, r24
    c12a:	29 9d       	mul	r18, r9
    c12c:	60 0d       	add	r22, r0
    c12e:	71 1d       	adc	r23, r1
    c130:	11 24       	eor	r1, r1
    c132:	c4 54       	subi	r28, 0x44	; 68
    c134:	df 4f       	sbci	r29, 0xFF	; 255
    c136:	79 83       	std	Y+1, r23	; 0x01
    c138:	68 83       	st	Y, r22
    c13a:	cc 5b       	subi	r28, 0xBC	; 188
    c13c:	d0 40       	sbci	r29, 0x00	; 0
    c13e:	93 94       	inc	r9
    c140:	c6 54       	subi	r28, 0x46	; 70
    c142:	df 4f       	sbci	r29, 0xFF	; 255
    c144:	e8 81       	ld	r30, Y
    c146:	f9 81       	ldd	r31, Y+1	; 0x01
    c148:	ca 5b       	subi	r28, 0xBA	; 186
    c14a:	d0 40       	sbci	r29, 0x00	; 0
    c14c:	84 91       	lpm	r24, Z
    c14e:	82 30       	cpi	r24, 0x02	; 2
    c150:	09 f0       	breq	.+2      	; 0xc154 <draw_menu(bool)+0x20da>
    c152:	46 c0       	rjmp	.+140    	; 0xc1e0 <draw_menu(bool)+0x2166>
    c154:	f6 01       	movw	r30, r12
    c156:	85 91       	lpm	r24, Z+
    c158:	94 91       	lpm	r25, Z
    c15a:	c8 53       	subi	r28, 0x38	; 56
    c15c:	df 4f       	sbci	r29, 0xFF	; 255
    c15e:	e8 81       	ld	r30, Y
    c160:	f9 81       	ldd	r31, Y+1	; 0x01
    c162:	c8 5c       	subi	r28, 0xC8	; 200
    c164:	d0 40       	sbci	r29, 0x00	; 0
    c166:	24 91       	lpm	r18, Z
    c168:	ca 54       	subi	r28, 0x4A	; 74
    c16a:	df 4f       	sbci	r29, 0xFF	; 255
    c16c:	48 81       	ld	r20, Y
    c16e:	59 81       	ldd	r21, Y+1	; 0x01
    c170:	c6 5b       	subi	r28, 0xB6	; 182
    c172:	d0 40       	sbci	r29, 0x00	; 0
    c174:	84 0f       	add	r24, r20
    c176:	95 1f       	adc	r25, r21
    c178:	bc 01       	movw	r22, r24
    c17a:	29 9d       	mul	r18, r9
    c17c:	60 0d       	add	r22, r0
    c17e:	71 1d       	adc	r23, r1
    c180:	11 24       	eor	r1, r1
    c182:	c4 54       	subi	r28, 0x44	; 68
    c184:	df 4f       	sbci	r29, 0xFF	; 255
    c186:	79 83       	std	Y+1, r23	; 0x01
    c188:	68 83       	st	Y, r22
    c18a:	cc 5b       	subi	r28, 0xBC	; 188
    c18c:	d0 40       	sbci	r29, 0x00	; 0
    c18e:	f5 01       	movw	r30, r10
    c190:	85 91       	lpm	r24, Z+
    c192:	94 91       	lpm	r25, Z
    c194:	ca 53       	subi	r28, 0x3A	; 58
    c196:	df 4f       	sbci	r29, 0xFF	; 255
    c198:	e8 81       	ld	r30, Y
    c19a:	f9 81       	ldd	r31, Y+1	; 0x01
    c19c:	c6 5c       	subi	r28, 0xC6	; 198
    c19e:	d0 40       	sbci	r29, 0x00	; 0
    c1a0:	24 91       	lpm	r18, Z
    c1a2:	c8 54       	subi	r28, 0x48	; 72
    c1a4:	df 4f       	sbci	r29, 0xFF	; 255
    c1a6:	48 81       	ld	r20, Y
    c1a8:	59 81       	ldd	r21, Y+1	; 0x01
    c1aa:	c8 5b       	subi	r28, 0xB8	; 184
    c1ac:	d0 40       	sbci	r29, 0x00	; 0
    c1ae:	84 0f       	add	r24, r20
    c1b0:	95 1f       	adc	r25, r21
    c1b2:	bc 01       	movw	r22, r24
    c1b4:	23 9d       	mul	r18, r3
    c1b6:	60 0d       	add	r22, r0
    c1b8:	71 1d       	adc	r23, r1
    c1ba:	11 24       	eor	r1, r1
    c1bc:	c2 54       	subi	r28, 0x42	; 66
    c1be:	df 4f       	sbci	r29, 0xFF	; 255
    c1c0:	79 83       	std	Y+1, r23	; 0x01
    c1c2:	68 83       	st	Y, r22
    c1c4:	ce 5b       	subi	r28, 0xBE	; 190
    c1c6:	d0 40       	sbci	r29, 0x00	; 0
    c1c8:	93 94       	inc	r9
    c1ca:	c5 53       	subi	r28, 0x35	; 53
    c1cc:	df 4f       	sbci	r29, 0xFF	; 255
    c1ce:	e8 81       	ld	r30, Y
    c1d0:	f9 81       	ldd	r31, Y+1	; 0x01
    c1d2:	cb 5c       	subi	r28, 0xCB	; 203
    c1d4:	d0 40       	sbci	r29, 0x00	; 0
    c1d6:	84 91       	lpm	r24, Z
    c1d8:	98 16       	cp	r9, r24
    c1da:	10 f0       	brcs	.+4      	; 0xc1e0 <draw_menu(bool)+0x2166>
    c1dc:	33 94       	inc	r3
    c1de:	91 2c       	mov	r9, r1
    c1e0:	c1 53       	subi	r28, 0x31	; 49
    c1e2:	df 4f       	sbci	r29, 0xFF	; 255
    c1e4:	e8 81       	ld	r30, Y
    c1e6:	f9 81       	ldd	r31, Y+1	; 0x01
    c1e8:	cf 5c       	subi	r28, 0xCF	; 207
    c1ea:	d0 40       	sbci	r29, 0x00	; 0
    c1ec:	25 91       	lpm	r18, Z+
    c1ee:	34 91       	lpm	r19, Z
    c1f0:	cf 52       	subi	r28, 0x2F	; 47
    c1f2:	df 4f       	sbci	r29, 0xFF	; 255
    c1f4:	e8 81       	ld	r30, Y
    c1f6:	f9 81       	ldd	r31, Y+1	; 0x01
    c1f8:	c1 5d       	subi	r28, 0xD1	; 209
    c1fa:	d0 40       	sbci	r29, 0x00	; 0
    c1fc:	45 91       	lpm	r20, Z+
    c1fe:	54 91       	lpm	r21, Z
    c200:	cc 53       	subi	r28, 0x3C	; 60
    c202:	df 4f       	sbci	r29, 0xFF	; 255
    c204:	e8 80       	ld	r14, Y
    c206:	f9 80       	ldd	r15, Y+1	; 0x01
    c208:	c4 5c       	subi	r28, 0xC4	; 196
    c20a:	d0 40       	sbci	r29, 0x00	; 0
    c20c:	ce 53       	subi	r28, 0x3E	; 62
    c20e:	df 4f       	sbci	r29, 0xFF	; 255
    c210:	08 81       	ld	r16, Y
    c212:	19 81       	ldd	r17, Y+1	; 0x01
    c214:	c2 5c       	subi	r28, 0xC2	; 194
    c216:	d0 40       	sbci	r29, 0x00	; 0
    c218:	c2 54       	subi	r28, 0x42	; 66
    c21a:	df 4f       	sbci	r29, 0xFF	; 255
    c21c:	68 81       	ld	r22, Y
    c21e:	79 81       	ldd	r23, Y+1	; 0x01
    c220:	ce 5b       	subi	r28, 0xBE	; 190
    c222:	d0 40       	sbci	r29, 0x00	; 0
    c224:	c4 54       	subi	r28, 0x44	; 68
    c226:	df 4f       	sbci	r29, 0xFF	; 255
    c228:	88 81       	ld	r24, Y
    c22a:	99 81       	ldd	r25, Y+1	; 0x01
    c22c:	cc 5b       	subi	r28, 0xBC	; 188
    c22e:	d0 40       	sbci	r29, 0x00	; 0
    c230:	0e 94 22 50 	call	0xa044	; 0xa044 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    c234:	18 2f       	mov	r17, r24
    c236:	81 e0       	ldi	r24, 0x01	; 1
    c238:	88 0d       	add	r24, r8
    c23a:	11 23       	and	r17, r17
    c23c:	21 f1       	breq	.+72     	; 0xc286 <draw_menu(bool)+0x220c>
    c23e:	ce 54       	subi	r28, 0x4E	; 78
    c240:	df 4f       	sbci	r29, 0xFF	; 255
    c242:	88 82       	st	Y, r8
    c244:	c2 5b       	subi	r28, 0xB2	; 178
    c246:	d0 40       	sbci	r29, 0x00	; 0
    c248:	f2 01       	movw	r30, r4
    c24a:	ea 54       	subi	r30, 0x4A	; 74
    c24c:	fd 4f       	sbci	r31, 0xFD	; 253
    c24e:	e6 0d       	add	r30, r6
    c250:	f7 1d       	adc	r31, r7
    c252:	25 91       	lpm	r18, Z+
    c254:	34 91       	lpm	r19, Z
    c256:	c0 54       	subi	r28, 0x40	; 64
    c258:	df 4f       	sbci	r29, 0xFF	; 255
    c25a:	e8 81       	ld	r30, Y
    c25c:	f9 81       	ldd	r31, Y+1	; 0x01
    c25e:	c0 5c       	subi	r28, 0xC0	; 192
    c260:	d0 40       	sbci	r29, 0x00	; 0
    c262:	84 91       	lpm	r24, Z
    c264:	cf 54       	subi	r28, 0x4F	; 79
    c266:	df 4f       	sbci	r29, 0xFF	; 255
    c268:	68 81       	ld	r22, Y
    c26a:	c1 5b       	subi	r28, 0xB1	; 177
    c26c:	d0 40       	sbci	r29, 0x00	; 0
    c26e:	70 e0       	ldi	r23, 0x00	; 0
    c270:	48 2d       	mov	r20, r8
    c272:	90 e0       	ldi	r25, 0x00	; 0
    c274:	f9 01       	movw	r30, r18
    c276:	19 95       	eicall
    c278:	c6 53       	subi	r28, 0x36	; 54
    c27a:	df 4f       	sbci	r29, 0xFF	; 255
    c27c:	18 83       	st	Y, r17
    c27e:	ca 5c       	subi	r28, 0xCA	; 202
    c280:	d0 40       	sbci	r29, 0x00	; 0
    c282:	23 94       	inc	r2
    c284:	b4 cb       	rjmp	.-2200   	; 0xb9ee <draw_menu(bool)+0x1974>
    c286:	88 2e       	mov	r8, r24
    c288:	e3 ce       	rjmp	.-570    	; 0xc050 <draw_menu(bool)+0x1fd6>
    c28a:	f1 e0       	ldi	r31, 0x01	; 1
    c28c:	c6 53       	subi	r28, 0x36	; 54
    c28e:	df 4f       	sbci	r29, 0xFF	; 255
    c290:	f8 83       	st	Y, r31
    c292:	ca 5c       	subi	r28, 0xCA	; 202
    c294:	d0 40       	sbci	r29, 0x00	; 0
    c296:	c6 53       	subi	r28, 0x36	; 54
    c298:	df 4f       	sbci	r29, 0xFF	; 255
    c29a:	88 81       	ld	r24, Y
    c29c:	ca 5c       	subi	r28, 0xCA	; 202
    c29e:	d0 40       	sbci	r29, 0x00	; 0
    c2a0:	cd 51       	subi	r28, 0x1D	; 29
    c2a2:	df 4f       	sbci	r29, 0xFF	; 255
    c2a4:	0f b6       	in	r0, 0x3f	; 63
    c2a6:	f8 94       	cli
    c2a8:	de bf       	out	0x3e, r29	; 62
    c2aa:	0f be       	out	0x3f, r0	; 63
    c2ac:	cd bf       	out	0x3d, r28	; 61
    c2ae:	df 91       	pop	r29
    c2b0:	cf 91       	pop	r28
    c2b2:	1f 91       	pop	r17
    c2b4:	0f 91       	pop	r16
    c2b6:	ff 90       	pop	r15
    c2b8:	ef 90       	pop	r14
    c2ba:	df 90       	pop	r13
    c2bc:	cf 90       	pop	r12
    c2be:	bf 90       	pop	r11
    c2c0:	af 90       	pop	r10
    c2c2:	9f 90       	pop	r9
    c2c4:	8f 90       	pop	r8
    c2c6:	7f 90       	pop	r7
    c2c8:	6f 90       	pop	r6
    c2ca:	5f 90       	pop	r5
    c2cc:	4f 90       	pop	r4
    c2ce:	3f 90       	pop	r3
    c2d0:	2f 90       	pop	r2
    c2d2:	08 95       	ret

0000c2d4 <setup>:
setup():
    c2d4:	2f 92       	push	r2
    c2d6:	3f 92       	push	r3
    c2d8:	4f 92       	push	r4
    c2da:	5f 92       	push	r5
    c2dc:	6f 92       	push	r6
    c2de:	7f 92       	push	r7
    c2e0:	8f 92       	push	r8
    c2e2:	9f 92       	push	r9
    c2e4:	af 92       	push	r10
    c2e6:	bf 92       	push	r11
    c2e8:	cf 92       	push	r12
    c2ea:	df 92       	push	r13
    c2ec:	ef 92       	push	r14
    c2ee:	ff 92       	push	r15
    c2f0:	0f 93       	push	r16
    c2f2:	1f 93       	push	r17
    c2f4:	cf 93       	push	r28
    c2f6:	df 93       	push	r29
    c2f8:	cd b7       	in	r28, 0x3d	; 61
    c2fa:	de b7       	in	r29, 0x3e	; 62
    c2fc:	c2 53       	subi	r28, 0x32	; 50
    c2fe:	d1 40       	sbci	r29, 0x01	; 1
    c300:	0f b6       	in	r0, 0x3f	; 63
    c302:	f8 94       	cli
    c304:	de bf       	out	0x3e, r29	; 62
    c306:	0f be       	out	0x3f, r0	; 63
    c308:	cd bf       	out	0x3d, r28	; 61
    c30a:	6a e0       	ldi	r22, 0x0A	; 10
    c30c:	7e e0       	ldi	r23, 0x0E	; 14
    c30e:	ce 01       	movw	r24, r28
    c310:	01 96       	adiw	r24, 0x01	; 1
    c312:	0e 94 35 c9 	call	0x1926a	; 0x1926a <NTPClient::NTPClient(UDP&)>
    c316:	0e 94 b1 49 	call	0x9362	; 0x9362 <setup_io_pin()>
    c31a:	78 94       	sei
    c31c:	0e 94 66 a5 	call	0x14acc	; 0x14acc <SPIClass::begin()>
    c320:	85 e1       	ldi	r24, 0x15	; 21
    c322:	91 e1       	ldi	r25, 0x11	; 17
    c324:	0e 94 33 c4 	call	0x18866	; 0x18866 <TwoWire::begin()>
    c328:	89 e3       	ldi	r24, 0x39	; 57
    c32a:	9e e0       	ldi	r25, 0x0E	; 14
    c32c:	0e 94 f4 c1 	call	0x183e8	; 0x183e8 <RTC_DS1307::begin()>
    c330:	8d ee       	ldi	r24, 0xED	; 237
    c332:	9b e0       	ldi	r25, 0x0B	; 11
    c334:	0e 94 14 83 	call	0x10628	; 0x10628 <mqtt_set_public_mqtt_client(PubSubClient*)>
    c338:	70 e0       	ldi	r23, 0x00	; 0
    c33a:	60 e0       	ldi	r22, 0x00	; 0
    c33c:	86 eb       	ldi	r24, 0xB6	; 182
    c33e:	92 e8       	ldi	r25, 0x82	; 130
    c340:	0e 94 f5 d7 	call	0x1afea	; 0x1afea <fdevopen>
    c344:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <printf_begin()>
    c348:	8a e3       	ldi	r24, 0x3A	; 58
    c34a:	9e e0       	ldi	r25, 0x0E	; 14
    c34c:	0e 94 bb a3 	call	0x14776	; 0x14776 <SoftSPIB::begin()>
    c350:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <MenuHistoryInit()>
    c354:	89 e8       	ldi	r24, 0x89	; 137
    c356:	9b e0       	ldi	r25, 0x0B	; 11
    c358:	0e 94 ea 9f 	call	0x13fd4	; 0x13fd4 <LCDWIKI_KBV::Init_LCD()>
    c35c:	63 e0       	ldi	r22, 0x03	; 3
    c35e:	89 e8       	ldi	r24, 0x89	; 137
    c360:	9b e0       	ldi	r25, 0x0B	; 11
    c362:	0e 94 54 9d 	call	0x13aa8	; 0x13aa8 <LCDWIKI_KBV::Set_Rotation(unsigned char)>
    c366:	63 e0       	ldi	r22, 0x03	; 3
    c368:	87 e6       	ldi	r24, 0x67	; 103
    c36a:	9b e0       	ldi	r25, 0x0B	; 11
    c36c:	0e 94 a8 a3 	call	0x14750	; 0x14750 <LCDWIKI_TOUCH::TP_Set_Rotation(unsigned char)>
    c370:	89 e8       	ldi	r24, 0x89	; 137
    c372:	9b e0       	ldi	r25, 0x0B	; 11
    c374:	0e 94 2b 90 	call	0x12056	; 0x12056 <LCDWIKI_GUI::Get_Display_Height() const>
    c378:	7c 01       	movw	r14, r24
    c37a:	89 e8       	ldi	r24, 0x89	; 137
    c37c:	9b e0       	ldi	r25, 0x0B	; 11
    c37e:	0e 94 ca 8f 	call	0x11f94	; 0x11f94 <LCDWIKI_GUI::Get_Display_Width() const>
    c382:	8c 01       	movw	r16, r24
    c384:	89 e8       	ldi	r24, 0x89	; 137
    c386:	9b e0       	ldi	r25, 0x0B	; 11
    c388:	0e 94 d4 9e 	call	0x13da8	; 0x13da8 <LCDWIKI_KBV::Get_Rotation() const>
    c38c:	97 01       	movw	r18, r14
    c38e:	a8 01       	movw	r20, r16
    c390:	68 2f       	mov	r22, r24
    c392:	87 e6       	ldi	r24, 0x67	; 103
    c394:	9b e0       	ldi	r25, 0x0B	; 11
    c396:	0e 94 42 a1 	call	0x14284	; 0x14284 <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>
    c39a:	6f ef       	ldi	r22, 0xFF	; 255
    c39c:	7f ef       	ldi	r23, 0xFF	; 255
    c39e:	89 e8       	ldi	r24, 0x89	; 137
    c3a0:	9b e0       	ldi	r25, 0x0B	; 11
    c3a2:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <LCDWIKI_GUI::Fill_Screen(unsigned int)>
    c3a6:	6f e1       	ldi	r22, 0x1F	; 31
    c3a8:	70 e0       	ldi	r23, 0x00	; 0
    c3aa:	89 e8       	ldi	r24, 0x89	; 137
    c3ac:	9b e0       	ldi	r25, 0x0B	; 11
    c3ae:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    c3b2:	6b e4       	ldi	r22, 0x4B	; 75
    c3b4:	79 e5       	ldi	r23, 0x59	; 89
    c3b6:	ce 01       	movw	r24, r28
    c3b8:	88 57       	subi	r24, 0x78	; 120
    c3ba:	9f 4f       	sbci	r25, 0xFF	; 255
    c3bc:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    c3c0:	c1 2c       	mov	r12, r1
    c3c2:	ee 24       	eor	r14, r14
    c3c4:	ea 94       	dec	r14
    c3c6:	fe 2c       	mov	r15, r14
    c3c8:	0f e1       	ldi	r16, 0x1F	; 31
    c3ca:	10 e0       	ldi	r17, 0x00	; 0
    c3cc:	22 e0       	ldi	r18, 0x02	; 2
    c3ce:	4a e0       	ldi	r20, 0x0A	; 10
    c3d0:	50 e0       	ldi	r21, 0x00	; 0
    c3d2:	6e e1       	ldi	r22, 0x1E	; 30
    c3d4:	70 e0       	ldi	r23, 0x00	; 0
    c3d6:	ce 01       	movw	r24, r28
    c3d8:	88 57       	subi	r24, 0x78	; 120
    c3da:	9f 4f       	sbci	r25, 0xFF	; 255
    c3dc:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c3e0:	1e e1       	ldi	r17, 0x1E	; 30
    c3e2:	61 2e       	mov	r6, r17
    c3e4:	71 2c       	mov	r7, r1
    c3e6:	c0 5d       	subi	r28, 0xD0	; 208
    c3e8:	de 4f       	sbci	r29, 0xFE	; 254
    c3ea:	18 82       	st	Y, r1
    c3ec:	c0 53       	subi	r28, 0x30	; 48
    c3ee:	d1 40       	sbci	r29, 0x01	; 1
itoa():
    c3f0:	5e 01       	movw	r10, r28
    c3f2:	28 e4       	ldi	r18, 0x48	; 72
    c3f4:	a2 0e       	add	r10, r18
    c3f6:	b1 1c       	adc	r11, r1
setup():
    c3f8:	68 ec       	ldi	r22, 0xC8	; 200
    c3fa:	70 e0       	ldi	r23, 0x00	; 0
    c3fc:	6c 0f       	add	r22, r28
    c3fe:	7d 1f       	adc	r23, r29
    c400:	64 5f       	subi	r22, 0xF4	; 244
    c402:	7f 4f       	sbci	r23, 0xFF	; 255
    c404:	cf 5c       	subi	r28, 0xCF	; 207
    c406:	de 4f       	sbci	r29, 0xFE	; 254
    c408:	79 83       	std	Y+1, r23	; 0x01
    c40a:	68 83       	st	Y, r22
    c40c:	c1 53       	subi	r28, 0x31	; 49
    c40e:	d1 40       	sbci	r29, 0x01	; 1
    c410:	4e 01       	movw	r8, r28
    c412:	7c ef       	ldi	r23, 0xFC	; 252
    c414:	87 0e       	add	r8, r23
    c416:	91 1c       	adc	r9, r1
    c418:	ce 01       	movw	r24, r28
    c41a:	8c 5e       	subi	r24, 0xEC	; 236
    c41c:	9e 4f       	sbci	r25, 0xFE	; 254
    c41e:	c2 5d       	subi	r28, 0xD2	; 210
    c420:	de 4f       	sbci	r29, 0xFE	; 254
    c422:	99 83       	std	Y+1, r25	; 0x01
    c424:	88 83       	st	Y, r24
    c426:	ce 52       	subi	r28, 0x2E	; 46
    c428:	d1 40       	sbci	r29, 0x01	; 1
    c42a:	1e 01       	movw	r2, r28
    c42c:	94 ef       	ldi	r25, 0xF4	; 244
    c42e:	29 1a       	sub	r2, r25
    c430:	9e ef       	ldi	r25, 0xFE	; 254
    c432:	39 0a       	sbc	r3, r25
    c434:	2e 01       	movw	r4, r28
    c436:	2c ef       	ldi	r18, 0xFC	; 252
    c438:	42 1a       	sub	r4, r18
    c43a:	2e ef       	ldi	r18, 0xFE	; 254
    c43c:	52 0a       	sbc	r5, r18
    c43e:	c1 2c       	mov	r12, r1
    c440:	ee 24       	eor	r14, r14
    c442:	ea 94       	dec	r14
    c444:	fe 2c       	mov	r15, r14
    c446:	00 e0       	ldi	r16, 0x00	; 0
    c448:	18 ef       	ldi	r17, 0xF8	; 248
    c44a:	21 e0       	ldi	r18, 0x01	; 1
    c44c:	4e e1       	ldi	r20, 0x1E	; 30
    c44e:	50 e0       	ldi	r21, 0x00	; 0
    c450:	b3 01       	movw	r22, r6
    c452:	87 e3       	ldi	r24, 0x37	; 55
    c454:	95 e0       	ldi	r25, 0x05	; 5
    c456:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c45a:	c0 5d       	subi	r28, 0xD0	; 208
    c45c:	de 4f       	sbci	r29, 0xFE	; 254
    c45e:	68 81       	ld	r22, Y
    c460:	c0 53       	subi	r28, 0x30	; 48
    c462:	d1 40       	sbci	r29, 0x01	; 1
    c464:	61 11       	cpse	r22, r1
    c466:	6d c1       	rjmp	.+730    	; 0xc742 <setup+0x46e>
    c468:	61 e0       	ldi	r22, 0x01	; 1
    c46a:	79 e5       	ldi	r23, 0x59	; 89
    c46c:	ce 01       	movw	r24, r28
    c46e:	88 57       	subi	r24, 0x78	; 120
    c470:	9f 4f       	sbci	r25, 0xFF	; 255
    c472:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    c476:	69 e3       	ldi	r22, 0x39	; 57
    c478:	75 e0       	ldi	r23, 0x05	; 5
    c47a:	ce 01       	movw	r24, r28
    c47c:	88 57       	subi	r24, 0x78	; 120
    c47e:	9f 4f       	sbci	r25, 0xFF	; 255
    c480:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    c484:	00 ee       	ldi	r16, 0xE0	; 224
    c486:	17 e0       	ldi	r17, 0x07	; 7
    c488:	21 e0       	ldi	r18, 0x01	; 1
    c48a:	42 e3       	ldi	r20, 0x32	; 50
    c48c:	50 e0       	ldi	r21, 0x00	; 0
    c48e:	6e e1       	ldi	r22, 0x1E	; 30
    c490:	70 e0       	ldi	r23, 0x00	; 0
    c492:	ce 01       	movw	r24, r28
    c494:	88 57       	subi	r24, 0x78	; 120
    c496:	9f 4f       	sbci	r25, 0xFF	; 255
    c498:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c49c:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <tritri+0x1>
    c4a0:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <tritri>
    c4a4:	10 92 2f 0a 	sts	0x0A2F, r1	; 0x800a2f <petnula+0x1>
    c4a8:	10 92 2e 0a 	sts	0x0A2E, r1	; 0x800a2e <petnula>
    c4ac:	10 92 2d 0a 	sts	0x0A2D, r1	; 0x800a2d <dvanact+0x1>
    c4b0:	10 92 2c 0a 	sts	0x0A2C, r1	; 0x800a2c <dvanact>
    c4b4:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <light_curr+0x1>
    c4b8:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <light_curr>
    c4bc:	43 e0       	ldi	r20, 0x03	; 3
    c4be:	66 e0       	ldi	r22, 0x06	; 6
    c4c0:	88 ef       	ldi	r24, 0xF8	; 248
    c4c2:	0e 94 42 cb 	call	0x19684	; 0x19684 <init_a2d(unsigned char, unsigned char, unsigned char)>
    c4c6:	85 ee       	ldi	r24, 0xE5	; 229
    c4c8:	92 e3       	ldi	r25, 0x32	; 50
    c4ca:	0e 94 3d cb 	call	0x1967a	; 0x1967a <a2d_handler(void (*)(unsigned char, unsigned int))>
    c4ce:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <a2d_run_now>
    c4d2:	83 e0       	ldi	r24, 0x03	; 3
    c4d4:	0e 94 5f cb 	call	0x196be	; 0x196be <a2d_start_first(unsigned char)>
    c4d8:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    c4dc:	6b 01       	movw	r12, r22
    c4de:	7c 01       	movw	r14, r24
    c4e0:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <a2d_run_now>
    c4e4:	81 11       	cpse	r24, r1
    c4e6:	0b c0       	rjmp	.+22     	; 0xc4fe <setup+0x22a>
    c4e8:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    c4ec:	6c 19       	sub	r22, r12
    c4ee:	7d 09       	sbc	r23, r13
    c4f0:	8e 09       	sbc	r24, r14
    c4f2:	9f 09       	sbc	r25, r15
    c4f4:	6a 30       	cpi	r22, 0x0A	; 10
    c4f6:	71 05       	cpc	r23, r1
    c4f8:	81 05       	cpc	r24, r1
    c4fa:	91 05       	cpc	r25, r1
    c4fc:	88 f3       	brcs	.-30     	; 0xc4e0 <setup+0x20c>
    c4fe:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <a2d_run_now>
    c502:	86 e0       	ldi	r24, 0x06	; 6
    c504:	0e 94 5f cb 	call	0x196be	; 0x196be <a2d_start_first(unsigned char)>
    c508:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    c50c:	6b 01       	movw	r12, r22
    c50e:	7c 01       	movw	r14, r24
    c510:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <a2d_run_now>
    c514:	81 11       	cpse	r24, r1
    c516:	0b c0       	rjmp	.+22     	; 0xc52e <setup+0x25a>
    c518:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    c51c:	6c 19       	sub	r22, r12
    c51e:	7d 09       	sbc	r23, r13
    c520:	8e 09       	sbc	r24, r14
    c522:	9f 09       	sbc	r25, r15
    c524:	6a 30       	cpi	r22, 0x0A	; 10
    c526:	71 05       	cpc	r23, r1
    c528:	81 05       	cpc	r24, r1
    c52a:	91 05       	cpc	r25, r1
    c52c:	88 f3       	brcs	.-30     	; 0xc510 <setup+0x23c>
    c52e:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <a2d_run_now>
    c532:	85 e0       	ldi	r24, 0x05	; 5
    c534:	0e 94 5f cb 	call	0x196be	; 0x196be <a2d_start_first(unsigned char)>
    c538:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    c53c:	6b 01       	movw	r12, r22
    c53e:	7c 01       	movw	r14, r24
    c540:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <a2d_run_now>
    c544:	81 11       	cpse	r24, r1
    c546:	0b c0       	rjmp	.+22     	; 0xc55e <setup+0x28a>
    c548:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    c54c:	6c 19       	sub	r22, r12
    c54e:	7d 09       	sbc	r23, r13
    c550:	8e 09       	sbc	r24, r14
    c552:	9f 09       	sbc	r25, r15
    c554:	6a 30       	cpi	r22, 0x0A	; 10
    c556:	71 05       	cpc	r23, r1
    c558:	81 05       	cpc	r24, r1
    c55a:	91 05       	cpc	r25, r1
    c55c:	88 f3       	brcs	.-30     	; 0xc540 <setup+0x26c>
    c55e:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <a2d_run_now>
    c562:	84 e0       	ldi	r24, 0x04	; 4
    c564:	0e 94 5f cb 	call	0x196be	; 0x196be <a2d_start_first(unsigned char)>
    c568:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    c56c:	6b 01       	movw	r12, r22
    c56e:	7c 01       	movw	r14, r24
    c570:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <a2d_run_now>
    c574:	81 11       	cpse	r24, r1
    c576:	0b c0       	rjmp	.+22     	; 0xc58e <setup+0x2ba>
    c578:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    c57c:	6c 19       	sub	r22, r12
    c57e:	7d 09       	sbc	r23, r13
    c580:	8e 09       	sbc	r24, r14
    c582:	9f 09       	sbc	r25, r15
    c584:	6a 30       	cpi	r22, 0x0A	; 10
    c586:	71 05       	cpc	r23, r1
    c588:	81 05       	cpc	r24, r1
    c58a:	91 05       	cpc	r25, r1
    c58c:	88 f3       	brcs	.-30     	; 0xc570 <setup+0x29c>
    c58e:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <a2d_run_now>
    c592:	87 e0       	ldi	r24, 0x07	; 7
    c594:	0e 94 5f cb 	call	0x196be	; 0x196be <a2d_start_first(unsigned char)>
    c598:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    c59c:	6b 01       	movw	r12, r22
    c59e:	7c 01       	movw	r14, r24
    c5a0:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <a2d_run_now>
    c5a4:	81 11       	cpse	r24, r1
    c5a6:	0b c0       	rjmp	.+22     	; 0xc5be <setup+0x2ea>
    c5a8:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    c5ac:	6c 19       	sub	r22, r12
    c5ae:	7d 09       	sbc	r23, r13
    c5b0:	8e 09       	sbc	r24, r14
    c5b2:	9f 09       	sbc	r25, r15
    c5b4:	6a 30       	cpi	r22, 0x0A	; 10
    c5b6:	71 05       	cpc	r23, r1
    c5b8:	81 05       	cpc	r24, r1
    c5ba:	91 05       	cpc	r25, r1
    c5bc:	88 f3       	brcs	.-30     	; 0xc5a0 <setup+0x2cc>
    c5be:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <a2d_run_now>
_Z15prepocet_napetijh():
    c5c2:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <tritri>
    c5c6:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <tritri+0x1>
    c5ca:	25 e0       	ldi	r18, 0x05	; 5
    c5cc:	28 9f       	mul	r18, r24
    c5ce:	b0 01       	movw	r22, r0
    c5d0:	29 9f       	mul	r18, r25
    c5d2:	70 0d       	add	r23, r0
    c5d4:	11 24       	eor	r1, r1
    c5d6:	90 e0       	ldi	r25, 0x00	; 0
    c5d8:	80 e0       	ldi	r24, 0x00	; 0
    c5da:	0e 94 12 d2 	call	0x1a424	; 0x1a424 <__floatunsisf>
    c5de:	20 e0       	ldi	r18, 0x00	; 0
    c5e0:	30 e0       	ldi	r19, 0x00	; 0
    c5e2:	4a e7       	ldi	r20, 0x7A	; 122
    c5e4:	54 e4       	ldi	r21, 0x44	; 68
    c5e6:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
setup():
    c5ea:	8e 01       	movw	r16, r28
    c5ec:	0c 5e       	subi	r16, 0xEC	; 236
    c5ee:	1e 4f       	sbci	r17, 0xFE	; 254
    c5f0:	22 e0       	ldi	r18, 0x02	; 2
    c5f2:	44 e0       	ldi	r20, 0x04	; 4
    c5f4:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
_Z15prepocet_napetijh():
    c5f8:	60 91 2e 0a 	lds	r22, 0x0A2E	; 0x800a2e <petnula>
    c5fc:	70 91 2f 0a 	lds	r23, 0x0A2F	; 0x800a2f <petnula+0x1>
    c600:	e3 e0       	ldi	r30, 0x03	; 3
    c602:	66 0f       	add	r22, r22
    c604:	77 1f       	adc	r23, r23
    c606:	ea 95       	dec	r30
    c608:	e1 f7       	brne	.-8      	; 0xc602 <setup+0x32e>
    c60a:	90 e0       	ldi	r25, 0x00	; 0
    c60c:	80 e0       	ldi	r24, 0x00	; 0
    c60e:	0e 94 12 d2 	call	0x1a424	; 0x1a424 <__floatunsisf>
    c612:	20 e0       	ldi	r18, 0x00	; 0
    c614:	30 e0       	ldi	r19, 0x00	; 0
    c616:	4a e7       	ldi	r20, 0x7A	; 122
    c618:	54 e4       	ldi	r21, 0x44	; 68
    c61a:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
setup():
    c61e:	81 01       	movw	r16, r2
    c620:	22 e0       	ldi	r18, 0x02	; 2
    c622:	44 e0       	ldi	r20, 0x04	; 4
    c624:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
_Z15prepocet_napetijh():
    c628:	80 91 2c 0a 	lds	r24, 0x0A2C	; 0x800a2c <dvanact>
    c62c:	90 91 2d 0a 	lds	r25, 0x0A2D	; 0x800a2d <dvanact+0x1>
    c630:	29 e3       	ldi	r18, 0x39	; 57
    c632:	28 9f       	mul	r18, r24
    c634:	b0 01       	movw	r22, r0
    c636:	29 9f       	mul	r18, r25
    c638:	70 0d       	add	r23, r0
    c63a:	11 24       	eor	r1, r1
    c63c:	90 e0       	ldi	r25, 0x00	; 0
    c63e:	80 e0       	ldi	r24, 0x00	; 0
    c640:	0e 94 12 d2 	call	0x1a424	; 0x1a424 <__floatunsisf>
    c644:	20 e0       	ldi	r18, 0x00	; 0
    c646:	30 e0       	ldi	r19, 0x00	; 0
    c648:	4a e7       	ldi	r20, 0x7A	; 122
    c64a:	54 e4       	ldi	r21, 0x44	; 68
    c64c:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
setup():
    c650:	82 01       	movw	r16, r4
    c652:	22 e0       	ldi	r18, 0x02	; 2
    c654:	44 e0       	ldi	r20, 0x04	; 4
    c656:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
_Z15prepocet_prouduj():
    c65a:	60 91 2a 0a 	lds	r22, 0x0A2A	; 0x800a2a <proud>
    c65e:	70 91 2b 0a 	lds	r23, 0x0A2B	; 0x800a2b <proud+0x1>
    c662:	90 e0       	ldi	r25, 0x00	; 0
    c664:	80 e0       	ldi	r24, 0x00	; 0
    c666:	0e 94 12 d2 	call	0x1a424	; 0x1a424 <__floatunsisf>
setup():
    c66a:	84 01       	movw	r16, r8
    c66c:	22 e0       	ldi	r18, 0x02	; 2
    c66e:	44 e0       	ldi	r20, 0x04	; 4
    c670:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
    c674:	9f 92       	push	r9
    c676:	8f 92       	push	r8
    c678:	5f 92       	push	r5
    c67a:	4f 92       	push	r4
    c67c:	3f 92       	push	r3
    c67e:	2f 92       	push	r2
    c680:	c1 5d       	subi	r28, 0xD1	; 209
    c682:	de 4f       	sbci	r29, 0xFE	; 254
    c684:	78 81       	ld	r23, Y
    c686:	cf 52       	subi	r28, 0x2F	; 47
    c688:	d1 40       	sbci	r29, 0x01	; 1
    c68a:	7f 93       	push	r23
    c68c:	c2 5d       	subi	r28, 0xD2	; 210
    c68e:	de 4f       	sbci	r29, 0xFE	; 254
    c690:	88 81       	ld	r24, Y
    c692:	ce 52       	subi	r28, 0x2E	; 46
    c694:	d1 40       	sbci	r29, 0x01	; 1
    c696:	8f 93       	push	r24
    c698:	8c e3       	ldi	r24, 0x3C	; 60
    c69a:	95 e0       	ldi	r25, 0x05	; 5
    c69c:	9f 93       	push	r25
    c69e:	8f 93       	push	r24
    c6a0:	bf 92       	push	r11
    c6a2:	af 92       	push	r10
    c6a4:	0e 94 a6 d8 	call	0x1b14c	; 0x1b14c <sprintf>
    c6a8:	c1 2c       	mov	r12, r1
    c6aa:	ee 24       	eor	r14, r14
    c6ac:	ea 94       	dec	r14
    c6ae:	fe 2c       	mov	r15, r14
    c6b0:	00 ee       	ldi	r16, 0xE0	; 224
    c6b2:	17 e0       	ldi	r17, 0x07	; 7
    c6b4:	21 e0       	ldi	r18, 0x01	; 1
    c6b6:	42 e3       	ldi	r20, 0x32	; 50
    c6b8:	50 e0       	ldi	r21, 0x00	; 0
    c6ba:	60 ea       	ldi	r22, 0xA0	; 160
    c6bc:	70 e0       	ldi	r23, 0x00	; 0
    c6be:	c5 01       	movw	r24, r10
    c6c0:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c6c4:	0f b6       	in	r0, 0x3f	; 63
    c6c6:	f8 94       	cli
    c6c8:	de bf       	out	0x3e, r29	; 62
    c6ca:	0f be       	out	0x3f, r0	; 63
    c6cc:	cd bf       	out	0x3d, r28	; 61
    c6ce:	c0 5d       	subi	r28, 0xD0	; 208
    c6d0:	de 4f       	sbci	r29, 0xFE	; 254
    c6d2:	88 81       	ld	r24, Y
    c6d4:	c0 53       	subi	r28, 0x30	; 48
    c6d6:	d1 40       	sbci	r29, 0x01	; 1
    c6d8:	8e 30       	cpi	r24, 0x0E	; 14
    c6da:	09 f0       	breq	.+2      	; 0xc6de <setup+0x40a>
    c6dc:	b7 c4       	rjmp	.+2414   	; 0xd04c <setup+0xd78>
    c6de:	60 ea       	ldi	r22, 0xA0	; 160
    c6e0:	78 e5       	ldi	r23, 0x58	; 88
    c6e2:	ce 01       	movw	r24, r28
    c6e4:	88 57       	subi	r24, 0x78	; 120
    c6e6:	9f 4f       	sbci	r25, 0xFF	; 255
    c6e8:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    c6ec:	c1 2c       	mov	r12, r1
    c6ee:	ee 24       	eor	r14, r14
    c6f0:	ea 94       	dec	r14
    c6f2:	fe 2c       	mov	r15, r14
    c6f4:	00 ee       	ldi	r16, 0xE0	; 224
    c6f6:	17 e0       	ldi	r17, 0x07	; 7
    c6f8:	21 e0       	ldi	r18, 0x01	; 1
    c6fa:	4e eb       	ldi	r20, 0xBE	; 190
    c6fc:	50 e0       	ldi	r21, 0x00	; 0
    c6fe:	6e e1       	ldi	r22, 0x1E	; 30
    c700:	70 e0       	ldi	r23, 0x00	; 0
    c702:	ce 01       	movw	r24, r28
    c704:	88 57       	subi	r24, 0x78	; 120
    c706:	9f 4f       	sbci	r25, 0xFF	; 255
    c708:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c70c:	ce 01       	movw	r24, r28
    c70e:	01 96       	adiw	r24, 0x01	; 1
    c710:	0e 94 73 82 	call	0x104e6	; 0x104e6 <ntp_check(NTPClient*)>
    c714:	81 11       	cpse	r24, r1
    c716:	81 c4       	rjmp	.+2306   	; 0xd01a <setup+0xd46>
    c718:	6c e5       	ldi	r22, 0x5C	; 92
    c71a:	76 e5       	ldi	r23, 0x56	; 86
    c71c:	ce 01       	movw	r24, r28
    c71e:	88 57       	subi	r24, 0x78	; 120
    c720:	9f 4f       	sbci	r25, 0xFF	; 255
    c722:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    c726:	00 e0       	ldi	r16, 0x00	; 0
    c728:	18 ef       	ldi	r17, 0xF8	; 248
    c72a:	21 e0       	ldi	r18, 0x01	; 1
    c72c:	4e eb       	ldi	r20, 0xBE	; 190
    c72e:	50 e0       	ldi	r21, 0x00	; 0
    c730:	60 ea       	ldi	r22, 0xA0	; 160
    c732:	70 e0       	ldi	r23, 0x00	; 0
    c734:	ce 01       	movw	r24, r28
    c736:	88 57       	subi	r24, 0x78	; 120
    c738:	9f 4f       	sbci	r25, 0xFF	; 255
    c73a:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c73e:	81 e0       	ldi	r24, 0x01	; 1
    c740:	63 c3       	rjmp	.+1734   	; 0xce08 <setup+0xb34>
    c742:	c0 5d       	subi	r28, 0xD0	; 208
    c744:	de 4f       	sbci	r29, 0xFE	; 254
    c746:	78 81       	ld	r23, Y
    c748:	c0 53       	subi	r28, 0x30	; 48
    c74a:	d1 40       	sbci	r29, 0x01	; 1
    c74c:	71 30       	cpi	r23, 0x01	; 1
    c74e:	09 f0       	breq	.+2      	; 0xc752 <setup+0x47e>
    c750:	5a c0       	rjmp	.+180    	; 0xc806 <setup+0x532>
    c752:	61 e0       	ldi	r22, 0x01	; 1
    c754:	79 e5       	ldi	r23, 0x59	; 89
    c756:	ce 01       	movw	r24, r28
    c758:	88 57       	subi	r24, 0x78	; 120
    c75a:	9f 4f       	sbci	r25, 0xFF	; 255
    c75c:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    c760:	6a e5       	ldi	r22, 0x5A	; 90
    c762:	75 e0       	ldi	r23, 0x05	; 5
    c764:	ce 01       	movw	r24, r28
    c766:	88 57       	subi	r24, 0x78	; 120
    c768:	9f 4f       	sbci	r25, 0xFF	; 255
    c76a:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    c76e:	c1 2c       	mov	r12, r1
    c770:	ee 24       	eor	r14, r14
    c772:	ea 94       	dec	r14
    c774:	fe 2c       	mov	r15, r14
    c776:	00 ee       	ldi	r16, 0xE0	; 224
    c778:	17 e0       	ldi	r17, 0x07	; 7
    c77a:	21 e0       	ldi	r18, 0x01	; 1
    c77c:	4c e3       	ldi	r20, 0x3C	; 60
    c77e:	50 e0       	ldi	r21, 0x00	; 0
    c780:	6e e1       	ldi	r22, 0x1E	; 30
    c782:	70 e0       	ldi	r23, 0x00	; 0
    c784:	ce 01       	movw	r24, r28
    c786:	88 57       	subi	r24, 0x78	; 120
    c788:	9f 4f       	sbci	r25, 0xFF	; 255
    c78a:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
_ZN24Temperature_LM75_Derived16readTemperatureCEv():
    c78e:	e0 91 d3 0b 	lds	r30, 0x0BD3	; 0x800bd3 <lm75_temp+0xb>
    c792:	f0 91 d4 0b 	lds	r31, 0x0BD4	; 0x800bd4 <lm75_temp+0xc>
    c796:	04 80       	ldd	r0, Z+4	; 0x04
    c798:	f5 81       	ldd	r31, Z+5	; 0x05
    c79a:	e0 2d       	mov	r30, r0
    c79c:	60 81       	ld	r22, Z
    c79e:	88 ec       	ldi	r24, 0xC8	; 200
    c7a0:	9b e0       	ldi	r25, 0x0B	; 11
    c7a2:	0e 94 2e c3 	call	0x1865c	; 0x1865c <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)>
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
    c7a6:	bc 01       	movw	r22, r24
    c7a8:	99 0f       	add	r25, r25
    c7aa:	88 0b       	sbc	r24, r24
    c7ac:	99 0b       	sbc	r25, r25
    c7ae:	0e 94 14 d2 	call	0x1a428	; 0x1a428 <__floatsisf>
    c7b2:	20 91 cf 0b 	lds	r18, 0x0BCF	; 0x800bcf <lm75_temp+0x7>
    c7b6:	30 91 d0 0b 	lds	r19, 0x0BD0	; 0x800bd0 <lm75_temp+0x8>
    c7ba:	40 91 d1 0b 	lds	r20, 0x0BD1	; 0x800bd1 <lm75_temp+0x9>
    c7be:	50 91 d2 0b 	lds	r21, 0x0BD2	; 0x800bd2 <lm75_temp+0xa>
    c7c2:	0e 94 c9 d2 	call	0x1a592	; 0x1a592 <__mulsf3>
setup():
    c7c6:	84 01       	movw	r16, r8
    c7c8:	22 e0       	ldi	r18, 0x02	; 2
    c7ca:	44 e0       	ldi	r20, 0x04	; 4
    c7cc:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
    c7d0:	9f 92       	push	r9
    c7d2:	8f 92       	push	r8
    c7d4:	8d e5       	ldi	r24, 0x5D	; 93
    c7d6:	95 e0       	ldi	r25, 0x05	; 5
    c7d8:	9f 93       	push	r25
    c7da:	8f 93       	push	r24
    c7dc:	bf 92       	push	r11
    c7de:	af 92       	push	r10
    c7e0:	0e 94 a6 d8 	call	0x1b14c	; 0x1b14c <sprintf>
    c7e4:	00 ee       	ldi	r16, 0xE0	; 224
    c7e6:	17 e0       	ldi	r17, 0x07	; 7
    c7e8:	21 e0       	ldi	r18, 0x01	; 1
    c7ea:	4c e3       	ldi	r20, 0x3C	; 60
    c7ec:	50 e0       	ldi	r21, 0x00	; 0
    c7ee:	60 ea       	ldi	r22, 0xA0	; 160
    c7f0:	70 e0       	ldi	r23, 0x00	; 0
    c7f2:	c5 01       	movw	r24, r10
    c7f4:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c7f8:	0f 90       	pop	r0
    c7fa:	0f 90       	pop	r0
    c7fc:	0f 90       	pop	r0
    c7fe:	0f 90       	pop	r0
    c800:	0f 90       	pop	r0
    c802:	0f 90       	pop	r0
    c804:	64 cf       	rjmp	.-312    	; 0xc6ce <setup+0x3fa>
    c806:	c0 5d       	subi	r28, 0xD0	; 208
    c808:	de 4f       	sbci	r29, 0xFE	; 254
    c80a:	88 81       	ld	r24, Y
    c80c:	c0 53       	subi	r28, 0x30	; 48
    c80e:	d1 40       	sbci	r29, 0x01	; 1
    c810:	82 30       	cpi	r24, 0x02	; 2
    c812:	09 f0       	breq	.+2      	; 0xc816 <setup+0x542>
    c814:	6d c1       	rjmp	.+730    	; 0xcaf0 <setup+0x81c>
_ZNK5EERefdeEv():
    c816:	8a e5       	ldi	r24, 0x5A	; 90
    c818:	90 e0       	ldi	r25, 0x00	; 0
    c81a:	0e 94 79 df 	call	0x1bef2	; 0x1bef2 <eeprom_read_byte>
setup():
    c81e:	8f 3f       	cpi	r24, 0xFF	; 255
    c820:	09 f0       	breq	.+2      	; 0xc824 <setup+0x550>
    c822:	53 c1       	rjmp	.+678    	; 0xcaca <setup+0x7f6>
    c824:	60 e0       	ldi	r22, 0x00	; 0
    c826:	8a e5       	ldi	r24, 0x5A	; 90
    c828:	90 e0       	ldi	r25, 0x00	; 0
    c82a:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <EEPROMClass::write(int, unsigned char) [clone .isra.4]>
    c82e:	6b e7       	ldi	r22, 0x7B	; 123
    c830:	78 e5       	ldi	r23, 0x58	; 88
    c832:	ce 01       	movw	r24, r28
    c834:	88 57       	subi	r24, 0x78	; 120
    c836:	9f 4f       	sbci	r25, 0xFF	; 255
    c838:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    c83c:	c1 2c       	mov	r12, r1
    c83e:	ee 24       	eor	r14, r14
    c840:	ea 94       	dec	r14
    c842:	fe 2c       	mov	r15, r14
    c844:	00 e0       	ldi	r16, 0x00	; 0
    c846:	18 ef       	ldi	r17, 0xF8	; 248
    c848:	21 e0       	ldi	r18, 0x01	; 1
    c84a:	46 e4       	ldi	r20, 0x46	; 70
    c84c:	50 e0       	ldi	r21, 0x00	; 0
    c84e:	6e e1       	ldi	r22, 0x1E	; 30
    c850:	70 e0       	ldi	r23, 0x00	; 0
    c852:	ce 01       	movw	r24, r28
    c854:	88 57       	subi	r24, 0x78	; 120
    c856:	9f 4f       	sbci	r25, 0xFF	; 255
    c858:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    c85c:	8f ef       	ldi	r24, 0xFF	; 255
    c85e:	0e 94 9f 42 	call	0x853e	; 0x853e <set_default_show_temp(unsigned char)>
    c862:	80 e0       	ldi	r24, 0x00	; 0
    c864:	0e 94 56 8d 	call	0x11aac	; 0x11aac <thermostat_ring_clear(unsigned char)>
    c868:	81 e0       	ldi	r24, 0x01	; 1
    c86a:	0e 94 56 8d 	call	0x11aac	; 0x11aac <thermostat_ring_clear(unsigned char)>
    c86e:	82 e0       	ldi	r24, 0x02	; 2
    c870:	0e 94 56 8d 	call	0x11aac	; 0x11aac <thermostat_ring_clear(unsigned char)>
    c874:	83 e0       	ldi	r24, 0x03	; 3
    c876:	0e 94 56 8d 	call	0x11aac	; 0x11aac <thermostat_ring_clear(unsigned char)>
    c87a:	84 e0       	ldi	r24, 0x04	; 4
    c87c:	0e 94 56 8d 	call	0x11aac	; 0x11aac <thermostat_ring_clear(unsigned char)>
    c880:	10 e0       	ldi	r17, 0x00	; 0
    c882:	6d e9       	ldi	r22, 0x9D	; 157
    c884:	75 e0       	ldi	r23, 0x05	; 5
    c886:	ce 01       	movw	r24, r28
    c888:	82 52       	subi	r24, 0x22	; 34
    c88a:	9f 4f       	sbci	r25, 0xFF	; 255
    c88c:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    c890:	81 2f       	mov	r24, r17
    c892:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <remote_tds_clear(unsigned char)>
    c896:	1f 5f       	subi	r17, 0xFF	; 255
    c898:	1a 30       	cpi	r17, 0x0A	; 10
    c89a:	99 f7       	brne	.-26     	; 0xc882 <setup+0x5ae>
    c89c:	10 e0       	ldi	r17, 0x00	; 0
    c89e:	68 ea       	ldi	r22, 0xA8	; 168
    c8a0:	76 e5       	ldi	r23, 0x56	; 86
    c8a2:	c5 01       	movw	r24, r10
    c8a4:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    c8a8:	b5 01       	movw	r22, r10
    c8aa:	81 2f       	mov	r24, r17
    c8ac:	0e 94 04 8b 	call	0x11608	; 0x11608 <thermostat_program_set_name(unsigned char, char*)>
    c8b0:	6f ef       	ldi	r22, 0xFF	; 255
    c8b2:	81 2f       	mov	r24, r17
    c8b4:	0e 94 34 8b 	call	0x11668	; 0x11668 <thermostat_program_set_active(unsigned char, unsigned char)>
    c8b8:	f1 2c       	mov	r15, r1
    c8ba:	c1 2c       	mov	r12, r1
    c8bc:	e1 2c       	mov	r14, r1
    c8be:	00 e0       	ldi	r16, 0x00	; 0
    c8c0:	20 e0       	ldi	r18, 0x00	; 0
    c8c2:	40 e0       	ldi	r20, 0x00	; 0
    c8c4:	6f 2d       	mov	r22, r15
    c8c6:	81 2f       	mov	r24, r17
    c8c8:	0e 94 8f 8b 	call	0x1171e	; 0x1171e <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    c8cc:	4c ed       	ldi	r20, 0xDC	; 220
    c8ce:	50 e0       	ldi	r21, 0x00	; 0
    c8d0:	6f 2d       	mov	r22, r15
    c8d2:	81 2f       	mov	r24, r17
    c8d4:	0e 94 ed 8b 	call	0x117da	; 0x117da <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
    c8d8:	40 e0       	ldi	r20, 0x00	; 0
    c8da:	6f 2d       	mov	r22, r15
    c8dc:	81 2f       	mov	r24, r17
    c8de:	0e 94 16 8c 	call	0x1182c	; 0x1182c <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
    c8e2:	f3 94       	inc	r15
    c8e4:	9b e0       	ldi	r25, 0x0B	; 11
    c8e6:	f9 12       	cpse	r15, r25
    c8e8:	e8 cf       	rjmp	.-48     	; 0xc8ba <setup+0x5e6>
    c8ea:	1f 5f       	subi	r17, 0xFF	; 255
    c8ec:	18 30       	cpi	r17, 0x08	; 8
    c8ee:	b9 f6       	brne	.-82     	; 0xc89e <setup+0x5ca>
    c8f0:	5a e0       	ldi	r21, 0x0A	; 10
    c8f2:	f5 2e       	mov	r15, r21
    c8f4:	1f ef       	ldi	r17, 0xFF	; 255
    c8f6:	be 01       	movw	r22, r28
    c8f8:	68 53       	subi	r22, 0x38	; 56
    c8fa:	7f 4f       	sbci	r23, 0xFF	; 255
    c8fc:	80 2f       	mov	r24, r16
    c8fe:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    c902:	64 e6       	ldi	r22, 0x64	; 100
    c904:	75 e0       	ldi	r23, 0x05	; 5
    c906:	cf 5c       	subi	r28, 0xCF	; 207
    c908:	de 4f       	sbci	r29, 0xFE	; 254
    c90a:	88 81       	ld	r24, Y
    c90c:	99 81       	ldd	r25, Y+1	; 0x01
    c90e:	c1 53       	subi	r28, 0x31	; 49
    c910:	d1 40       	sbci	r29, 0x01	; 1
    c912:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    c916:	c8 53       	subi	r28, 0x38	; 56
    c918:	df 4f       	sbci	r29, 0xFF	; 255
    c91a:	18 82       	st	Y, r1
    c91c:	c8 5c       	subi	r28, 0xC8	; 200
    c91e:	d0 40       	sbci	r29, 0x00	; 0
    c920:	ce 52       	subi	r28, 0x2E	; 46
    c922:	df 4f       	sbci	r29, 0xFF	; 255
    c924:	19 82       	std	Y+1, r1	; 0x01
    c926:	18 82       	st	Y, r1
    c928:	c2 5d       	subi	r28, 0xD2	; 210
    c92a:	d0 40       	sbci	r29, 0x00	; 0
    c92c:	cf 52       	subi	r28, 0x2F	; 47
    c92e:	df 4f       	sbci	r29, 0xFF	; 255
    c930:	18 82       	st	Y, r1
    c932:	c1 5d       	subi	r28, 0xD1	; 209
    c934:	d0 40       	sbci	r29, 0x00	; 0
    c936:	c4 52       	subi	r28, 0x24	; 36
    c938:	df 4f       	sbci	r29, 0xFF	; 255
    c93a:	f8 82       	st	Y, r15
    c93c:	cc 5d       	subi	r28, 0xDC	; 220
    c93e:	d0 40       	sbci	r29, 0x00	; 0
    c940:	c7 53       	subi	r28, 0x37	; 55
    c942:	df 4f       	sbci	r29, 0xFF	; 255
    c944:	18 83       	st	Y, r17
    c946:	c9 5c       	subi	r28, 0xC9	; 201
    c948:	d0 40       	sbci	r29, 0x00	; 0
    c94a:	c6 53       	subi	r28, 0x36	; 54
    c94c:	df 4f       	sbci	r29, 0xFF	; 255
    c94e:	18 83       	st	Y, r17
    c950:	ca 5c       	subi	r28, 0xCA	; 202
    c952:	d0 40       	sbci	r29, 0x00	; 0
    c954:	c5 53       	subi	r28, 0x35	; 53
    c956:	df 4f       	sbci	r29, 0xFF	; 255
    c958:	18 83       	st	Y, r17
    c95a:	cb 5c       	subi	r28, 0xCB	; 203
    c95c:	d0 40       	sbci	r29, 0x00	; 0
    c95e:	c4 53       	subi	r28, 0x34	; 52
    c960:	df 4f       	sbci	r29, 0xFF	; 255
    c962:	18 83       	st	Y, r17
    c964:	cc 5c       	subi	r28, 0xCC	; 204
    c966:	d0 40       	sbci	r29, 0x00	; 0
    c968:	c3 53       	subi	r28, 0x33	; 51
    c96a:	df 4f       	sbci	r29, 0xFF	; 255
    c96c:	18 83       	st	Y, r17
    c96e:	cd 5c       	subi	r28, 0xCD	; 205
    c970:	d0 40       	sbci	r29, 0x00	; 0
    c972:	c2 53       	subi	r28, 0x32	; 50
    c974:	df 4f       	sbci	r29, 0xFF	; 255
    c976:	18 83       	st	Y, r17
    c978:	ce 5c       	subi	r28, 0xCE	; 206
    c97a:	d0 40       	sbci	r29, 0x00	; 0
    c97c:	c1 53       	subi	r28, 0x31	; 49
    c97e:	df 4f       	sbci	r29, 0xFF	; 255
    c980:	18 83       	st	Y, r17
    c982:	cf 5c       	subi	r28, 0xCF	; 207
    c984:	d0 40       	sbci	r29, 0x00	; 0
    c986:	c0 53       	subi	r28, 0x30	; 48
    c988:	df 4f       	sbci	r29, 0xFF	; 255
    c98a:	18 83       	st	Y, r17
    c98c:	c0 5d       	subi	r28, 0xD0	; 208
    c98e:	d0 40       	sbci	r29, 0x00	; 0
    c990:	be 01       	movw	r22, r28
    c992:	68 53       	subi	r22, 0x38	; 56
    c994:	7f 4f       	sbci	r23, 0xFF	; 255
    c996:	80 2f       	mov	r24, r16
    c998:	0e 94 bf 83 	call	0x1077e	; 0x1077e <set_tds18s20(unsigned char, struct_DDS18s20*)>
    c99c:	0f 5f       	subi	r16, 0xFF	; 255
    c99e:	06 30       	cpi	r16, 0x06	; 6
    c9a0:	09 f0       	breq	.+2      	; 0xc9a4 <setup+0x6d0>
    c9a2:	a9 cf       	rjmp	.-174    	; 0xc8f6 <setup+0x622>
    c9a4:	c1 2c       	mov	r12, r1
    c9a6:	ae e0       	ldi	r26, 0x0E	; 14
    c9a8:	ea 2e       	mov	r14, r26
    c9aa:	01 e1       	ldi	r16, 0x11	; 17
    c9ac:	2e e0       	ldi	r18, 0x0E	; 14
    c9ae:	4c e0       	ldi	r20, 0x0C	; 12
    c9b0:	64 ee       	ldi	r22, 0xE4	; 228
    c9b2:	77 e0       	ldi	r23, 0x07	; 7
    c9b4:	ce 01       	movw	r24, r28
    c9b6:	8e 50       	subi	r24, 0x0E	; 14
    c9b8:	9f 4f       	sbci	r25, 0xFF	; 255
    c9ba:	0e 94 d3 c1 	call	0x183a6	; 0x183a6 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    c9be:	ce 01       	movw	r24, r28
    c9c0:	8e 50       	subi	r24, 0x0E	; 14
    c9c2:	9f 4f       	sbci	r25, 0xFF	; 255
    c9c4:	0e 94 fa c1 	call	0x183f4	; 0x183f4 <RTC_DS1307::adjust(DateTime const&)>
    c9c8:	81 e0       	ldi	r24, 0x01	; 1
    c9ca:	0e 94 ac 49 	call	0x9358	; 0x9358 <time_set_offset(unsigned char)>
    c9ce:	82 e0       	ldi	r24, 0x02	; 2
    c9d0:	80 93 d3 0e 	sts	0x0ED3, r24	; 0x800ed3 <device>
    c9d4:	91 e0       	ldi	r25, 0x01	; 1
    c9d6:	90 93 d4 0e 	sts	0x0ED4, r25	; 0x800ed4 <device+0x1>
    c9da:	80 93 d5 0e 	sts	0x0ED5, r24	; 0x800ed5 <device+0x2>
    c9de:	20 91 2c 0a 	lds	r18, 0x0A2C	; 0x800a2c <dvanact>
    c9e2:	30 91 2d 0a 	lds	r19, 0x0A2D	; 0x800a2d <dvanact+0x1>
    c9e6:	36 95       	lsr	r19
    c9e8:	27 95       	ror	r18
    c9ea:	20 93 d6 0e 	sts	0x0ED6, r18	; 0x800ed6 <device+0x3>
    c9ee:	20 91 28 0a 	lds	r18, 0x0A28	; 0x800a28 <light_curr>
    c9f2:	30 91 29 0a 	lds	r19, 0x0A29	; 0x800a29 <light_curr+0x1>
    c9f6:	36 95       	lsr	r19
    c9f8:	27 95       	ror	r18
    c9fa:	20 93 d7 0e 	sts	0x0ED7, r18	; 0x800ed7 <device+0x4>
    c9fe:	20 91 2a 0a 	lds	r18, 0x0A2A	; 0x800a2a <proud>
    ca02:	30 91 2b 0a 	lds	r19, 0x0A2B	; 0x800a2b <proud+0x1>
    ca06:	36 95       	lsr	r19
    ca08:	27 95       	ror	r18
    ca0a:	20 93 d8 0e 	sts	0x0ED8, r18	; 0x800ed8 <device+0x5>
    ca0e:	30 ec       	ldi	r19, 0xC0	; 192
    ca10:	30 93 d9 0e 	sts	0x0ED9, r19	; 0x800ed9 <device+0x6>
    ca14:	28 ea       	ldi	r18, 0xA8	; 168
    ca16:	20 93 da 0e 	sts	0x0EDA, r18	; 0x800eda <device+0x7>
    ca1a:	80 93 db 0e 	sts	0x0EDB, r24	; 0x800edb <device+0x8>
    ca1e:	4f e6       	ldi	r20, 0x6F	; 111
    ca20:	40 93 dc 0e 	sts	0x0EDC, r20	; 0x800edc <device+0x9>
    ca24:	10 93 dd 0e 	sts	0x0EDD, r17	; 0x800edd <device+0xa>
    ca28:	10 93 de 0e 	sts	0x0EDE, r17	; 0x800ede <device+0xb>
    ca2c:	10 93 df 0e 	sts	0x0EDF, r17	; 0x800edf <device+0xc>
    ca30:	10 92 e0 0e 	sts	0x0EE0, r1	; 0x800ee0 <device+0xd>
    ca34:	30 93 e5 0e 	sts	0x0EE5, r19	; 0x800ee5 <device+0x12>
    ca38:	20 93 e6 0e 	sts	0x0EE6, r18	; 0x800ee6 <device+0x13>
    ca3c:	80 93 e7 0e 	sts	0x0EE7, r24	; 0x800ee7 <device+0x14>
    ca40:	90 93 e8 0e 	sts	0x0EE8, r25	; 0x800ee8 <device+0x15>
    ca44:	30 93 e1 0e 	sts	0x0EE1, r19	; 0x800ee1 <device+0xe>
    ca48:	20 93 e2 0e 	sts	0x0EE2, r18	; 0x800ee2 <device+0xf>
    ca4c:	80 93 e3 0e 	sts	0x0EE3, r24	; 0x800ee3 <device+0x10>
    ca50:	90 93 e4 0e 	sts	0x0EE4, r25	; 0x800ee4 <device+0x11>
    ca54:	30 93 f3 0e 	sts	0x0EF3, r19	; 0x800ef3 <device+0x20>
    ca58:	20 93 f4 0e 	sts	0x0EF4, r18	; 0x800ef4 <device+0x21>
    ca5c:	80 93 f5 0e 	sts	0x0EF5, r24	; 0x800ef5 <device+0x22>
    ca60:	90 93 f6 0e 	sts	0x0EF6, r25	; 0x800ef6 <device+0x23>
    ca64:	30 93 21 0f 	sts	0x0F21, r19	; 0x800f21 <device+0x4e>
    ca68:	20 93 22 0f 	sts	0x0F22, r18	; 0x800f22 <device+0x4f>
    ca6c:	80 93 23 0f 	sts	0x0F23, r24	; 0x800f23 <device+0x50>
    ca70:	90 93 24 0f 	sts	0x0F24, r25	; 0x800f24 <device+0x51>
    ca74:	8b e5       	ldi	r24, 0x5B	; 91
    ca76:	97 e0       	ldi	r25, 0x07	; 7
    ca78:	90 93 f8 0e 	sts	0x0EF8, r25	; 0x800ef8 <device+0x25>
    ca7c:	80 93 f7 0e 	sts	0x0EF7, r24	; 0x800ef7 <device+0x24>
    ca80:	69 e6       	ldi	r22, 0x69	; 105
    ca82:	75 e0       	ldi	r23, 0x05	; 5
    ca84:	89 ef       	ldi	r24, 0xF9	; 249
    ca86:	9e e0       	ldi	r25, 0x0E	; 14
    ca88:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    ca8c:	6f e6       	ldi	r22, 0x6F	; 111
    ca8e:	75 e0       	ldi	r23, 0x05	; 5
    ca90:	8d e0       	ldi	r24, 0x0D	; 13
    ca92:	9f e0       	ldi	r25, 0x0F	; 15
    ca94:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    ca98:	0e 94 df 7c 	call	0xf9be	; 0xf9be <save_setup_network()>
    ca9c:	62 e7       	ldi	r22, 0x72	; 114
    ca9e:	75 e0       	ldi	r23, 0x05	; 5
    caa0:	ce 01       	movw	r24, r28
    caa2:	88 57       	subi	r24, 0x78	; 120
    caa4:	9f 4f       	sbci	r25, 0xFF	; 255
    caa6:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    caaa:	ce 01       	movw	r24, r28
    caac:	88 57       	subi	r24, 0x78	; 120
    caae:	9f 4f       	sbci	r25, 0xFF	; 255
    cab0:	0e 94 97 7d 	call	0xfb2e	; 0xfb2e <device_set_name(char*)>
    cab4:	ce 01       	movw	r24, r28
    cab6:	8e 50       	subi	r24, 0x0E	; 14
    cab8:	9f 4f       	sbci	r25, 0xFF	; 255
    caba:	0e 94 7e 7d 	call	0xfafc	; 0xfafc <device_get_name(char*)>
    cabe:	10 93 12 0a 	sts	0x0A12, r17	; 0x800a12 <default_ring>
    cac2:	8f ef       	ldi	r24, 0xFF	; 255
    cac4:	0e 94 96 42 	call	0x852c	; 0x852c <set_default_ring(unsigned char)>
    cac8:	02 ce       	rjmp	.-1020   	; 0xc6ce <setup+0x3fa>
    caca:	6f e6       	ldi	r22, 0x6F	; 111
    cacc:	78 e5       	ldi	r23, 0x58	; 88
    cace:	ce 01       	movw	r24, r28
    cad0:	88 57       	subi	r24, 0x78	; 120
    cad2:	9f 4f       	sbci	r25, 0xFF	; 255
    cad4:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    cad8:	c1 2c       	mov	r12, r1
    cada:	ee 24       	eor	r14, r14
    cadc:	ea 94       	dec	r14
    cade:	fe 2c       	mov	r15, r14
    cae0:	00 ee       	ldi	r16, 0xE0	; 224
    cae2:	17 e0       	ldi	r17, 0x07	; 7
    cae4:	21 e0       	ldi	r18, 0x01	; 1
    cae6:	46 e4       	ldi	r20, 0x46	; 70
    cae8:	50 e0       	ldi	r21, 0x00	; 0
    caea:	6e e1       	ldi	r22, 0x1E	; 30
    caec:	70 e0       	ldi	r23, 0x00	; 0
    caee:	47 c0       	rjmp	.+142    	; 0xcb7e <setup+0x8aa>
    caf0:	c0 5d       	subi	r28, 0xD0	; 208
    caf2:	de 4f       	sbci	r29, 0xFE	; 254
    caf4:	28 81       	ld	r18, Y
    caf6:	c0 53       	subi	r28, 0x30	; 48
    caf8:	d1 40       	sbci	r29, 0x01	; 1
    cafa:	23 30       	cpi	r18, 0x03	; 3
    cafc:	09 f0       	breq	.+2      	; 0xcb00 <setup+0x82c>
    cafe:	5b c0       	rjmp	.+182    	; 0xcbb6 <setup+0x8e2>
    cb00:	8b e4       	ldi	r24, 0x4B	; 75
    cb02:	9a e0       	ldi	r25, 0x0A	; 10
    cb04:	0e 94 f4 a4 	call	0x149e8	; 0x149e8 <SRAM_23LC::begin()>
    cb08:	2b ea       	ldi	r18, 0xAB	; 171
    cb0a:	40 e0       	ldi	r20, 0x00	; 0
    cb0c:	50 e0       	ldi	r21, 0x00	; 0
    cb0e:	ba 01       	movw	r22, r20
    cb10:	8b e4       	ldi	r24, 0x4B	; 75
    cb12:	9a e0       	ldi	r25, 0x0A	; 10
    cb14:	0e 94 39 a5 	call	0x14a72	; 0x14a72 <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    cb18:	40 e0       	ldi	r20, 0x00	; 0
    cb1a:	50 e0       	ldi	r21, 0x00	; 0
    cb1c:	ba 01       	movw	r22, r20
    cb1e:	8b e4       	ldi	r24, 0x4B	; 75
    cb20:	9a e0       	ldi	r25, 0x0A	; 10
    cb22:	0e 94 14 a5 	call	0x14a28	; 0x14a28 <SRAM_23LC::readByte(unsigned long)>
    cb26:	62 e6       	ldi	r22, 0x62	; 98
    cb28:	78 e5       	ldi	r23, 0x58	; 88
    cb2a:	8b 3a       	cpi	r24, 0xAB	; 171
    cb2c:	71 f5       	brne	.+92     	; 0xcb8a <setup+0x8b6>
    cb2e:	ce 01       	movw	r24, r28
    cb30:	88 57       	subi	r24, 0x78	; 120
    cb32:	9f 4f       	sbci	r25, 0xFF	; 255
    cb34:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    cb38:	6a e7       	ldi	r22, 0x7A	; 122
    cb3a:	75 e0       	ldi	r23, 0x05	; 5
    cb3c:	ce 01       	movw	r24, r28
    cb3e:	88 57       	subi	r24, 0x78	; 120
    cb40:	9f 4f       	sbci	r25, 0xFF	; 255
    cb42:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    cb46:	c1 2c       	mov	r12, r1
    cb48:	ee 24       	eor	r14, r14
    cb4a:	ea 94       	dec	r14
    cb4c:	fe 2c       	mov	r15, r14
    cb4e:	00 ee       	ldi	r16, 0xE0	; 224
    cb50:	17 e0       	ldi	r17, 0x07	; 7
    cb52:	21 e0       	ldi	r18, 0x01	; 1
    cb54:	40 e5       	ldi	r20, 0x50	; 80
    cb56:	50 e0       	ldi	r21, 0x00	; 0
    cb58:	6e e1       	ldi	r22, 0x1E	; 30
    cb5a:	70 e0       	ldi	r23, 0x00	; 0
    cb5c:	ce 01       	movw	r24, r28
    cb5e:	88 57       	subi	r24, 0x78	; 120
    cb60:	9f 4f       	sbci	r25, 0xFF	; 255
    cb62:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cb66:	69 e5       	ldi	r22, 0x59	; 89
    cb68:	76 e5       	ldi	r23, 0x56	; 86
    cb6a:	ce 01       	movw	r24, r28
    cb6c:	88 57       	subi	r24, 0x78	; 120
    cb6e:	9f 4f       	sbci	r25, 0xFF	; 255
    cb70:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    cb74:	21 e0       	ldi	r18, 0x01	; 1
    cb76:	40 e5       	ldi	r20, 0x50	; 80
    cb78:	50 e0       	ldi	r21, 0x00	; 0
    cb7a:	62 ed       	ldi	r22, 0xD2	; 210
    cb7c:	70 e0       	ldi	r23, 0x00	; 0
    cb7e:	ce 01       	movw	r24, r28
    cb80:	88 57       	subi	r24, 0x78	; 120
    cb82:	9f 4f       	sbci	r25, 0xFF	; 255
    cb84:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cb88:	a2 cd       	rjmp	.-1212   	; 0xc6ce <setup+0x3fa>
    cb8a:	ce 01       	movw	r24, r28
    cb8c:	88 57       	subi	r24, 0x78	; 120
    cb8e:	9f 4f       	sbci	r25, 0xFF	; 255
    cb90:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    cb94:	6c e5       	ldi	r22, 0x5C	; 92
    cb96:	76 e5       	ldi	r23, 0x56	; 86
    cb98:	ce 01       	movw	r24, r28
    cb9a:	88 57       	subi	r24, 0x78	; 120
    cb9c:	9f 4f       	sbci	r25, 0xFF	; 255
    cb9e:	0e 94 34 d7 	call	0x1ae68	; 0x1ae68 <strcat_P>
    cba2:	c1 2c       	mov	r12, r1
    cba4:	ee 24       	eor	r14, r14
    cba6:	ea 94       	dec	r14
    cba8:	fe 2c       	mov	r15, r14
    cbaa:	00 e0       	ldi	r16, 0x00	; 0
    cbac:	18 ef       	ldi	r17, 0xF8	; 248
    cbae:	21 e0       	ldi	r18, 0x01	; 1
    cbb0:	40 e5       	ldi	r20, 0x50	; 80
    cbb2:	50 e0       	ldi	r21, 0x00	; 0
    cbb4:	9a cf       	rjmp	.-204    	; 0xcaea <setup+0x816>
    cbb6:	c0 5d       	subi	r28, 0xD0	; 208
    cbb8:	de 4f       	sbci	r29, 0xFE	; 254
    cbba:	68 81       	ld	r22, Y
    cbbc:	c0 53       	subi	r28, 0x30	; 48
    cbbe:	d1 40       	sbci	r29, 0x01	; 1
    cbc0:	64 30       	cpi	r22, 0x04	; 4
    cbc2:	09 f0       	breq	.+2      	; 0xcbc6 <setup+0x8f2>
    cbc4:	94 c2       	rjmp	.+1320   	; 0xd0ee <setup+0xe1a>
    cbc6:	8c e3       	ldi	r24, 0x3C	; 60
    cbc8:	9a e0       	ldi	r25, 0x0A	; 10
    cbca:	0e 94 38 a6 	call	0x14c70	; 0x14c70 <EEPROM_CAT25::begin()>
    cbce:	2a eb       	ldi	r18, 0xBA	; 186
    cbd0:	40 e0       	ldi	r20, 0x00	; 0
    cbd2:	50 e0       	ldi	r21, 0x00	; 0
    cbd4:	ba 01       	movw	r22, r20
    cbd6:	8c e3       	ldi	r24, 0x3C	; 60
    cbd8:	9a e0       	ldi	r25, 0x0A	; 10
    cbda:	0e 94 25 a7 	call	0x14e4a	; 0x14e4a <EEPROM_CAT25::writeByte(unsigned long, unsigned char)>
    cbde:	40 e0       	ldi	r20, 0x00	; 0
    cbe0:	50 e0       	ldi	r21, 0x00	; 0
    cbe2:	ba 01       	movw	r22, r20
    cbe4:	8c e3       	ldi	r24, 0x3C	; 60
    cbe6:	9a e0       	ldi	r25, 0x0A	; 10
    cbe8:	0e 94 f1 a6 	call	0x14de2	; 0x14de2 <EEPROM_CAT25::readByte(unsigned long)>
    cbec:	62 e5       	ldi	r22, 0x52	; 82
    cbee:	78 e5       	ldi	r23, 0x58	; 88
    cbf0:	8a 3b       	cpi	r24, 0xBA	; 186
    cbf2:	e9 f4       	brne	.+58     	; 0xcc2e <setup+0x95a>
    cbf4:	ce 01       	movw	r24, r28
    cbf6:	88 57       	subi	r24, 0x78	; 120
    cbf8:	9f 4f       	sbci	r25, 0xFF	; 255
    cbfa:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    cbfe:	69 e5       	ldi	r22, 0x59	; 89
    cc00:	76 e5       	ldi	r23, 0x56	; 86
    cc02:	ce 01       	movw	r24, r28
    cc04:	88 57       	subi	r24, 0x78	; 120
    cc06:	9f 4f       	sbci	r25, 0xFF	; 255
    cc08:	0e 94 34 d7 	call	0x1ae68	; 0x1ae68 <strcat_P>
    cc0c:	c1 2c       	mov	r12, r1
    cc0e:	ee 24       	eor	r14, r14
    cc10:	ea 94       	dec	r14
    cc12:	fe 2c       	mov	r15, r14
    cc14:	00 ee       	ldi	r16, 0xE0	; 224
    cc16:	17 e0       	ldi	r17, 0x07	; 7
    cc18:	21 e0       	ldi	r18, 0x01	; 1
    cc1a:	4a e5       	ldi	r20, 0x5A	; 90
    cc1c:	50 e0       	ldi	r21, 0x00	; 0
    cc1e:	6e e1       	ldi	r22, 0x1E	; 30
    cc20:	70 e0       	ldi	r23, 0x00	; 0
    cc22:	ce 01       	movw	r24, r28
    cc24:	88 57       	subi	r24, 0x78	; 120
    cc26:	9f 4f       	sbci	r25, 0xFF	; 255
    cc28:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cc2c:	4d c0       	rjmp	.+154    	; 0xccc8 <setup+0x9f4>
    cc2e:	ce 01       	movw	r24, r28
    cc30:	88 57       	subi	r24, 0x78	; 120
    cc32:	9f 4f       	sbci	r25, 0xFF	; 255
    cc34:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    cc38:	6c e5       	ldi	r22, 0x5C	; 92
    cc3a:	76 e5       	ldi	r23, 0x56	; 86
    cc3c:	ce 01       	movw	r24, r28
    cc3e:	88 57       	subi	r24, 0x78	; 120
    cc40:	9f 4f       	sbci	r25, 0xFF	; 255
    cc42:	0e 94 34 d7 	call	0x1ae68	; 0x1ae68 <strcat_P>
    cc46:	c1 2c       	mov	r12, r1
    cc48:	ee 24       	eor	r14, r14
    cc4a:	ea 94       	dec	r14
    cc4c:	fe 2c       	mov	r15, r14
    cc4e:	00 e0       	ldi	r16, 0x00	; 0
    cc50:	18 ef       	ldi	r17, 0xF8	; 248
    cc52:	e2 cf       	rjmp	.-60     	; 0xcc18 <setup+0x944>
    cc54:	6d e2       	ldi	r22, 0x2D	; 45
    cc56:	79 e5       	ldi	r23, 0x59	; 89
    cc58:	ce 01       	movw	r24, r28
    cc5a:	88 57       	subi	r24, 0x78	; 120
    cc5c:	9f 4f       	sbci	r25, 0xFF	; 255
    cc5e:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    cc62:	c1 2c       	mov	r12, r1
    cc64:	ee 24       	eor	r14, r14
    cc66:	ea 94       	dec	r14
    cc68:	fe 2c       	mov	r15, r14
    cc6a:	00 ee       	ldi	r16, 0xE0	; 224
    cc6c:	17 e0       	ldi	r17, 0x07	; 7
    cc6e:	21 e0       	ldi	r18, 0x01	; 1
    cc70:	44 e6       	ldi	r20, 0x64	; 100
    cc72:	50 e0       	ldi	r21, 0x00	; 0
    cc74:	6e e1       	ldi	r22, 0x1E	; 30
    cc76:	70 e0       	ldi	r23, 0x00	; 0
    cc78:	ce 01       	movw	r24, r28
    cc7a:	88 57       	subi	r24, 0x78	; 120
    cc7c:	9f 4f       	sbci	r25, 0xFF	; 255
    cc7e:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cc82:	0e 94 38 7c 	call	0xf870	; 0xf870 <load_setup_network()>
    cc86:	49 e7       	ldi	r20, 0x79	; 121
    cc88:	5f e0       	ldi	r21, 0x0F	; 15
    cc8a:	26 e0       	ldi	r18, 0x06	; 6
    cc8c:	90 e0       	ldi	r25, 0x00	; 0
    cc8e:	80 e0       	ldi	r24, 0x00	; 0
    cc90:	fc 01       	movw	r30, r24
    cc92:	ee 0f       	add	r30, r30
    cc94:	ff 1f       	adc	r31, r31
    cc96:	e4 0f       	add	r30, r20
    cc98:	f5 1f       	adc	r31, r21
    cc9a:	60 e2       	ldi	r22, 0x20	; 32
    cc9c:	7e e4       	ldi	r23, 0x4E	; 78
    cc9e:	70 87       	std	Z+8, r23	; 0x08
    cca0:	67 83       	std	Z+7, r22	; 0x07
    cca2:	01 96       	adiw	r24, 0x01	; 1
    cca4:	8a 30       	cpi	r24, 0x0A	; 10
    cca6:	91 05       	cpc	r25, r1
    cca8:	99 f7       	brne	.-26     	; 0xcc90 <setup+0x9bc>
    ccaa:	21 50       	subi	r18, 0x01	; 1
    ccac:	42 5e       	subi	r20, 0xE2	; 226
    ccae:	5f 4f       	sbci	r21, 0xFF	; 255
    ccb0:	21 11       	cpse	r18, r1
    ccb2:	ec cf       	rjmp	.-40     	; 0xcc8c <setup+0x9b8>
    ccb4:	10 92 33 0a 	sts	0x0A33, r1	; 0x800a33 <last_output_update>
    ccb8:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <last_output_update+0x1>
    ccbc:	10 92 35 0a 	sts	0x0A35, r1	; 0x800a35 <last_output_update+0x2>
    ccc0:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <last_output_update+0x3>
    ccc4:	10 92 37 0a 	sts	0x0A37, r1	; 0x800a37 <last_output_update+0x4>
    ccc8:	c0 5d       	subi	r28, 0xD0	; 208
    ccca:	de 4f       	sbci	r29, 0xFE	; 254
    cccc:	28 81       	ld	r18, Y
    ccce:	c0 53       	subi	r28, 0x30	; 48
    ccd0:	d1 40       	sbci	r29, 0x01	; 1
    ccd2:	2f 5f       	subi	r18, 0xFF	; 255
    ccd4:	c0 5d       	subi	r28, 0xD0	; 208
    ccd6:	de 4f       	sbci	r29, 0xFE	; 254
    ccd8:	28 83       	st	Y, r18
    ccda:	c0 53       	subi	r28, 0x30	; 48
    ccdc:	d1 40       	sbci	r29, 0x01	; 1
    ccde:	6f e0       	ldi	r22, 0x0F	; 15
    cce0:	66 0e       	add	r6, r22
    cce2:	71 1c       	adc	r7, r1
    cce4:	20 31       	cpi	r18, 0x10	; 16
    cce6:	09 f0       	breq	.+2      	; 0xccea <setup+0xa16>
    cce8:	aa cb       	rjmp	.-2220   	; 0xc43e <setup+0x16a>
    ccea:	64 ef       	ldi	r22, 0xF4	; 244
    ccec:	71 e0       	ldi	r23, 0x01	; 1
    ccee:	80 e0       	ldi	r24, 0x00	; 0
    ccf0:	90 e0       	ldi	r25, 0x00	; 0
    ccf2:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
    ccf6:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <MenuPrepareStyle()>
    ccfa:	81 e0       	ldi	r24, 0x01	; 1
    ccfc:	0e 94 3d 50 	call	0xa07a	; 0xa07a <draw_menu(bool)>
    cd00:	81 e0       	ldi	r24, 0x01	; 1
    cd02:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <a2d_run_now>
    cd06:	ce 5c       	subi	r28, 0xCE	; 206
    cd08:	de 4f       	sbci	r29, 0xFE	; 254
    cd0a:	0f b6       	in	r0, 0x3f	; 63
    cd0c:	f8 94       	cli
    cd0e:	de bf       	out	0x3e, r29	; 62
    cd10:	0f be       	out	0x3f, r0	; 63
    cd12:	cd bf       	out	0x3d, r28	; 61
    cd14:	df 91       	pop	r29
    cd16:	cf 91       	pop	r28
    cd18:	1f 91       	pop	r17
    cd1a:	0f 91       	pop	r16
    cd1c:	ff 90       	pop	r15
    cd1e:	ef 90       	pop	r14
    cd20:	df 90       	pop	r13
    cd22:	cf 90       	pop	r12
    cd24:	bf 90       	pop	r11
    cd26:	af 90       	pop	r10
    cd28:	9f 90       	pop	r9
    cd2a:	8f 90       	pop	r8
    cd2c:	7f 90       	pop	r7
    cd2e:	6f 90       	pop	r6
    cd30:	5f 90       	pop	r5
    cd32:	4f 90       	pop	r4
    cd34:	3f 90       	pop	r3
    cd36:	2f 90       	pop	r2
    cd38:	08 95       	ret
    cd3a:	6f e3       	ldi	r22, 0x3F	; 63
    cd3c:	79 e5       	ldi	r23, 0x59	; 89
    cd3e:	ce 01       	movw	r24, r28
    cd40:	88 57       	subi	r24, 0x78	; 120
    cd42:	9f 4f       	sbci	r25, 0xFF	; 255
    cd44:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    cd48:	c1 2c       	mov	r12, r1
    cd4a:	ee 24       	eor	r14, r14
    cd4c:	ea 94       	dec	r14
    cd4e:	fe 2c       	mov	r15, r14
    cd50:	00 ee       	ldi	r16, 0xE0	; 224
    cd52:	17 e0       	ldi	r17, 0x07	; 7
    cd54:	21 e0       	ldi	r18, 0x01	; 1
    cd56:	4e e6       	ldi	r20, 0x6E	; 110
    cd58:	50 e0       	ldi	r21, 0x00	; 0
    cd5a:	6e e1       	ldi	r22, 0x1E	; 30
    cd5c:	70 e0       	ldi	r23, 0x00	; 0
    cd5e:	ce 01       	movw	r24, r28
    cd60:	88 57       	subi	r24, 0x78	; 120
    cd62:	9f 4f       	sbci	r25, 0xFF	; 255
    cd64:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cd68:	89 e8       	ldi	r24, 0x89	; 137
    cd6a:	9b e0       	ldi	r25, 0x0B	; 11
    cd6c:	0e 94 2b 90 	call	0x12056	; 0x12056 <LCDWIKI_GUI::Get_Display_Height() const>
    cd70:	8c 01       	movw	r16, r24
    cd72:	89 e8       	ldi	r24, 0x89	; 137
    cd74:	9b e0       	ldi	r25, 0x0B	; 11
    cd76:	0e 94 ca 8f 	call	0x11f94	; 0x11f94 <LCDWIKI_GUI::Get_Display_Width() const>
    cd7a:	7c 01       	movw	r14, r24
    cd7c:	89 e8       	ldi	r24, 0x89	; 137
    cd7e:	9b e0       	ldi	r25, 0x0B	; 11
    cd80:	0e 94 d4 9e 	call	0x13da8	; 0x13da8 <LCDWIKI_KBV::Get_Rotation() const>
    cd84:	98 01       	movw	r18, r16
    cd86:	a7 01       	movw	r20, r14
    cd88:	68 2f       	mov	r22, r24
    cd8a:	87 e6       	ldi	r24, 0x67	; 103
    cd8c:	9b e0       	ldi	r25, 0x0B	; 11
    cd8e:	0e 94 42 a1 	call	0x14284	; 0x14284 <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>
    cd92:	1b e0       	ldi	r17, 0x0B	; 11
    cd94:	60 e0       	ldi	r22, 0x00	; 0
    cd96:	88 e0       	ldi	r24, 0x08	; 8
    cd98:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
    cd9c:	61 2f       	mov	r22, r17
    cd9e:	87 e6       	ldi	r24, 0x67	; 103
    cda0:	9b e0       	ldi	r25, 0x0B	; 11
    cda2:	0e 94 25 a1 	call	0x1424a	; 0x1424a <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
    cda6:	64 e6       	ldi	r22, 0x64	; 100
    cda8:	70 e0       	ldi	r23, 0x00	; 0
    cdaa:	80 e0       	ldi	r24, 0x00	; 0
    cdac:	90 e0       	ldi	r25, 0x00	; 0
    cdae:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
    cdb2:	61 e0       	ldi	r22, 0x01	; 1
    cdb4:	88 e0       	ldi	r24, 0x08	; 8
    cdb6:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
    cdba:	64 e6       	ldi	r22, 0x64	; 100
    cdbc:	70 e0       	ldi	r23, 0x00	; 0
    cdbe:	80 e0       	ldi	r24, 0x00	; 0
    cdc0:	90 e0       	ldi	r25, 0x00	; 0
    cdc2:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
    cdc6:	15 5f       	subi	r17, 0xF5	; 245
    cdc8:	18 35       	cpi	r17, 0x58	; 88
    cdca:	21 f7       	brne	.-56     	; 0xcd94 <setup+0xac0>
    cdcc:	62 e3       	ldi	r22, 0x32	; 50
    cdce:	87 e6       	ldi	r24, 0x67	; 103
    cdd0:	9b e0       	ldi	r25, 0x0B	; 11
    cdd2:	0e 94 25 a1 	call	0x1424a	; 0x1424a <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>
    cdd6:	78 cf       	rjmp	.-272    	; 0xccc8 <setup+0x9f4>
    cdd8:	6c e5       	ldi	r22, 0x5C	; 92
    cdda:	76 e5       	ldi	r23, 0x56	; 86
    cddc:	ce 01       	movw	r24, r28
    cdde:	88 57       	subi	r24, 0x78	; 120
    cde0:	9f 4f       	sbci	r25, 0xFF	; 255
    cde2:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    cde6:	c1 2c       	mov	r12, r1
    cde8:	ee 24       	eor	r14, r14
    cdea:	ea 94       	dec	r14
    cdec:	fe 2c       	mov	r15, r14
    cdee:	00 e0       	ldi	r16, 0x00	; 0
    cdf0:	18 ef       	ldi	r17, 0xF8	; 248
    cdf2:	21 e0       	ldi	r18, 0x01	; 1
    cdf4:	48 e7       	ldi	r20, 0x78	; 120
    cdf6:	50 e0       	ldi	r21, 0x00	; 0
    cdf8:	60 ea       	ldi	r22, 0xA0	; 160
    cdfa:	70 e0       	ldi	r23, 0x00	; 0
    cdfc:	ce 01       	movw	r24, r28
    cdfe:	88 57       	subi	r24, 0x78	; 120
    ce00:	9f 4f       	sbci	r25, 0xFF	; 255
    ce02:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ce06:	82 e0       	ldi	r24, 0x02	; 2
    ce08:	0e 94 b6 47 	call	0x8f6c	; 0x8f6c <selftest_set_0(unsigned char)>
    ce0c:	5d cf       	rjmp	.-326    	; 0xccc8 <setup+0x9f4>
    ce0e:	c0 5d       	subi	r28, 0xD0	; 208
    ce10:	de 4f       	sbci	r29, 0xFE	; 254
    ce12:	88 81       	ld	r24, Y
    ce14:	c0 53       	subi	r28, 0x30	; 48
    ce16:	d1 40       	sbci	r29, 0x01	; 1
    ce18:	88 30       	cpi	r24, 0x08	; 8
    ce1a:	c1 f5       	brne	.+112    	; 0xce8c <setup+0xbb8>
    ce1c:	61 e1       	ldi	r22, 0x11	; 17
    ce1e:	79 e5       	ldi	r23, 0x59	; 89
    ce20:	ce 01       	movw	r24, r28
    ce22:	88 57       	subi	r24, 0x78	; 120
    ce24:	9f 4f       	sbci	r25, 0xFF	; 255
    ce26:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    ce2a:	c1 2c       	mov	r12, r1
    ce2c:	ee 24       	eor	r14, r14
    ce2e:	ea 94       	dec	r14
    ce30:	fe 2c       	mov	r15, r14
    ce32:	00 ee       	ldi	r16, 0xE0	; 224
    ce34:	17 e0       	ldi	r17, 0x07	; 7
    ce36:	21 e0       	ldi	r18, 0x01	; 1
    ce38:	42 e8       	ldi	r20, 0x82	; 130
    ce3a:	50 e0       	ldi	r21, 0x00	; 0
    ce3c:	6e e1       	ldi	r22, 0x1E	; 30
    ce3e:	70 e0       	ldi	r23, 0x00	; 0
    ce40:	ce 01       	movw	r24, r28
    ce42:	88 57       	subi	r24, 0x78	; 120
    ce44:	9f 4f       	sbci	r25, 0xFF	; 255
    ce46:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ce4a:	10 92 78 0f 	sts	0x0F78, r1	; 0x800f78 <Global_HWwirenum>
    ce4e:	80 e0       	ldi	r24, 0x00	; 0
    ce50:	0e 94 46 86 	call	0x10c8c	; 0x10c8c <one_hw_search_device(unsigned char)>
    ce54:	0e 94 00 85 	call	0x10a00	; 0x10a00 <tds_update_associate()>
    ce58:	64 e8       	ldi	r22, 0x84	; 132
    ce5a:	75 e0       	ldi	r23, 0x05	; 5
    ce5c:	ce 01       	movw	r24, r28
    ce5e:	88 57       	subi	r24, 0x78	; 120
    ce60:	9f 4f       	sbci	r25, 0xFF	; 255
    ce62:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    ce66:	80 91 78 0f 	lds	r24, 0x0F78	; 0x800f78 <Global_HWwirenum>
itoa():
    ce6a:	4a e0       	ldi	r20, 0x0A	; 10
    ce6c:	b5 01       	movw	r22, r10
    ce6e:	90 e0       	ldi	r25, 0x00	; 0
    ce70:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
setup():
    ce74:	b5 01       	movw	r22, r10
    ce76:	ce 01       	movw	r24, r28
    ce78:	88 57       	subi	r24, 0x78	; 120
    ce7a:	9f 4f       	sbci	r25, 0xFF	; 255
    ce7c:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    ce80:	21 e0       	ldi	r18, 0x01	; 1
    ce82:	42 e8       	ldi	r20, 0x82	; 130
    ce84:	50 e0       	ldi	r21, 0x00	; 0
    ce86:	60 ea       	ldi	r22, 0xA0	; 160
    ce88:	70 e0       	ldi	r23, 0x00	; 0
    ce8a:	cb ce       	rjmp	.-618    	; 0xcc22 <setup+0x94e>
    ce8c:	c0 5d       	subi	r28, 0xD0	; 208
    ce8e:	de 4f       	sbci	r29, 0xFE	; 254
    ce90:	98 81       	ld	r25, Y
    ce92:	c0 53       	subi	r28, 0x30	; 48
    ce94:	d1 40       	sbci	r29, 0x01	; 1
    ce96:	99 30       	cpi	r25, 0x09	; 9
    ce98:	09 f0       	breq	.+2      	; 0xce9c <setup+0xbc8>
    ce9a:	85 c1       	rjmp	.+778    	; 0xd1a6 <setup+0xed2>
    ce9c:	61 e0       	ldi	r22, 0x01	; 1
    ce9e:	86 e0       	ldi	r24, 0x06	; 6
    cea0:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
    cea4:	6a e0       	ldi	r22, 0x0A	; 10
    cea6:	70 e0       	ldi	r23, 0x00	; 0
    cea8:	80 e0       	ldi	r24, 0x00	; 0
    ceaa:	90 e0       	ldi	r25, 0x00	; 0
    ceac:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
    ceb0:	60 e0       	ldi	r22, 0x00	; 0
    ceb2:	86 e0       	ldi	r24, 0x06	; 6
    ceb4:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
    ceb8:	6a e0       	ldi	r22, 0x0A	; 10
    ceba:	70 e0       	ldi	r23, 0x00	; 0
    cebc:	80 e0       	ldi	r24, 0x00	; 0
    cebe:	90 e0       	ldi	r25, 0x00	; 0
    cec0:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
    cec4:	61 e0       	ldi	r22, 0x01	; 1
    cec6:	86 e0       	ldi	r24, 0x06	; 6
    cec8:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
    cecc:	64 e6       	ldi	r22, 0x64	; 100
    cece:	70 e0       	ldi	r23, 0x00	; 0
    ced0:	80 e0       	ldi	r24, 0x00	; 0
    ced2:	90 e0       	ldi	r25, 0x00	; 0
    ced4:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
_ZN13EthernetClass4initEh():
    ced8:	8f e0       	ldi	r24, 0x0F	; 15
    ceda:	80 93 da 10 	sts	0x10DA, r24	; 0x8010da <Ethernet+0xc>
setup():
    cede:	6d ed       	ldi	r22, 0xDD	; 221
    cee0:	7e e0       	ldi	r23, 0x0E	; 14
    cee2:	ce 01       	movw	r24, r28
    cee4:	8e 50       	subi	r24, 0x0E	; 14
    cee6:	9f 4f       	sbci	r25, 0xFF	; 255
    cee8:	0e 94 a3 cf 	call	0x19f46	; 0x19f46 <IPAddress::IPAddress(unsigned char const*)>
    ceec:	65 ee       	ldi	r22, 0xE5	; 229
    ceee:	7e e0       	ldi	r23, 0x0E	; 14
    cef0:	ce 01       	movw	r24, r28
    cef2:	84 5e       	subi	r24, 0xE4	; 228
    cef4:	9e 4f       	sbci	r25, 0xFE	; 254
    cef6:	0e 94 a3 cf 	call	0x19f46	; 0x19f46 <IPAddress::IPAddress(unsigned char const*)>
    cefa:	61 ee       	ldi	r22, 0xE1	; 225
    cefc:	7e e0       	ldi	r23, 0x0E	; 14
    cefe:	ce 01       	movw	r24, r28
    cf00:	8e 5d       	subi	r24, 0xDE	; 222
    cf02:	9e 4f       	sbci	r25, 0xFE	; 254
    cf04:	0e 94 a3 cf 	call	0x19f46	; 0x19f46 <IPAddress::IPAddress(unsigned char const*)>
    cf08:	69 ed       	ldi	r22, 0xD9	; 217
    cf0a:	7e e0       	ldi	r23, 0x0E	; 14
    cf0c:	ce 01       	movw	r24, r28
    cf0e:	88 5d       	subi	r24, 0xD8	; 216
    cf10:	9e 4f       	sbci	r25, 0xFE	; 254
    cf12:	0e 94 a3 cf 	call	0x19f46	; 0x19f46 <IPAddress::IPAddress(unsigned char const*)>
    cf16:	be 01       	movw	r22, r28
    cf18:	6e 50       	subi	r22, 0x0E	; 14
    cf1a:	7f 4f       	sbci	r23, 0xFF	; 255
    cf1c:	7b 01       	movw	r14, r22
    cf1e:	8e 01       	movw	r16, r28
    cf20:	04 5e       	subi	r16, 0xE4	; 228
    cf22:	1e 4f       	sbci	r17, 0xFE	; 254
    cf24:	9e 01       	movw	r18, r28
    cf26:	2e 5d       	subi	r18, 0xDE	; 222
    cf28:	3e 4f       	sbci	r19, 0xFE	; 254
    cf2a:	ae 01       	movw	r20, r28
    cf2c:	48 5d       	subi	r20, 0xD8	; 216
    cf2e:	5e 4f       	sbci	r21, 0xFE	; 254
    cf30:	63 ed       	ldi	r22, 0xD3	; 211
    cf32:	7e e0       	ldi	r23, 0x0E	; 14
    cf34:	8e ec       	ldi	r24, 0xCE	; 206
    cf36:	90 e1       	ldi	r25, 0x10	; 16
    cf38:	0e 94 8c aa 	call	0x15518	; 0x15518 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)>
    cf3c:	6f ee       	ldi	r22, 0xEF	; 239
    cf3e:	78 e5       	ldi	r23, 0x58	; 88
    cf40:	ce 01       	movw	r24, r28
    cf42:	88 57       	subi	r24, 0x78	; 120
    cf44:	9f 4f       	sbci	r25, 0xFF	; 255
    cf46:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    cf4a:	c1 2c       	mov	r12, r1
    cf4c:	ee 24       	eor	r14, r14
    cf4e:	ea 94       	dec	r14
    cf50:	fe 2c       	mov	r15, r14
    cf52:	00 ee       	ldi	r16, 0xE0	; 224
    cf54:	17 e0       	ldi	r17, 0x07	; 7
    cf56:	21 e0       	ldi	r18, 0x01	; 1
    cf58:	4c e8       	ldi	r20, 0x8C	; 140
    cf5a:	50 e0       	ldi	r21, 0x00	; 0
    cf5c:	6e e1       	ldi	r22, 0x1E	; 30
    cf5e:	70 e0       	ldi	r23, 0x00	; 0
    cf60:	ce 01       	movw	r24, r28
    cf62:	88 57       	subi	r24, 0x78	; 120
    cf64:	9f 4f       	sbci	r25, 0xFF	; 255
    cf66:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cf6a:	64 e6       	ldi	r22, 0x64	; 100
    cf6c:	70 e0       	ldi	r23, 0x00	; 0
    cf6e:	80 e0       	ldi	r24, 0x00	; 0
    cf70:	90 e0       	ldi	r25, 0x00	; 0
    cf72:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
    cf76:	a8 ce       	rjmp	.-688    	; 0xccc8 <setup+0x9f4>
    cf78:	85 e0       	ldi	r24, 0x05	; 5
    cf7a:	0e 94 b6 47 	call	0x8f6c	; 0x8f6c <selftest_set_0(unsigned char)>
    cf7e:	4a c1       	rjmp	.+660    	; 0xd214 <setup+0xf40>
    cf80:	69 e5       	ldi	r22, 0x59	; 89
    cf82:	76 e5       	ldi	r23, 0x56	; 86
    cf84:	ce 01       	movw	r24, r28
    cf86:	88 57       	subi	r24, 0x78	; 120
    cf88:	9f 4f       	sbci	r25, 0xFF	; 255
    cf8a:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    cf8e:	c1 2c       	mov	r12, r1
    cf90:	ee 24       	eor	r14, r14
    cf92:	ea 94       	dec	r14
    cf94:	fe 2c       	mov	r15, r14
    cf96:	00 ee       	ldi	r16, 0xE0	; 224
    cf98:	17 e0       	ldi	r17, 0x07	; 7
    cf9a:	73 c1       	rjmp	.+742    	; 0xd282 <setup+0xfae>
    cf9c:	c0 5d       	subi	r28, 0xD0	; 208
    cf9e:	de 4f       	sbci	r29, 0xFE	; 254
    cfa0:	68 81       	ld	r22, Y
    cfa2:	c0 53       	subi	r28, 0x30	; 48
    cfa4:	d1 40       	sbci	r29, 0x01	; 1
    cfa6:	6b 30       	cpi	r22, 0x0B	; 11
    cfa8:	89 f4       	brne	.+34     	; 0xcfcc <setup+0xcf8>
    cfaa:	6f ec       	ldi	r22, 0xCF	; 207
    cfac:	78 e5       	ldi	r23, 0x58	; 88
    cfae:	ce 01       	movw	r24, r28
    cfb0:	88 57       	subi	r24, 0x78	; 120
    cfb2:	9f 4f       	sbci	r25, 0xFF	; 255
    cfb4:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    cfb8:	c1 2c       	mov	r12, r1
    cfba:	ee 24       	eor	r14, r14
    cfbc:	ea 94       	dec	r14
    cfbe:	fe 2c       	mov	r15, r14
    cfc0:	00 ee       	ldi	r16, 0xE0	; 224
    cfc2:	17 e0       	ldi	r17, 0x07	; 7
    cfc4:	21 e0       	ldi	r18, 0x01	; 1
    cfc6:	40 ea       	ldi	r20, 0xA0	; 160
    cfc8:	50 e0       	ldi	r21, 0x00	; 0
    cfca:	29 ce       	rjmp	.-942    	; 0xcc1e <setup+0x94a>
    cfcc:	c0 5d       	subi	r28, 0xD0	; 208
    cfce:	de 4f       	sbci	r29, 0xFE	; 254
    cfd0:	78 81       	ld	r23, Y
    cfd2:	c0 53       	subi	r28, 0x30	; 48
    cfd4:	d1 40       	sbci	r29, 0x01	; 1
    cfd6:	7c 30       	cpi	r23, 0x0C	; 12
    cfd8:	09 f0       	breq	.+2      	; 0xcfdc <setup+0xd08>
    cfda:	57 c1       	rjmp	.+686    	; 0xd28a <setup+0xfb6>
    cfdc:	62 ec       	ldi	r22, 0xC2	; 194
    cfde:	78 e5       	ldi	r23, 0x58	; 88
    cfe0:	ce 01       	movw	r24, r28
    cfe2:	88 57       	subi	r24, 0x78	; 120
    cfe4:	9f 4f       	sbci	r25, 0xFF	; 255
    cfe6:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    cfea:	c1 2c       	mov	r12, r1
    cfec:	ee 24       	eor	r14, r14
    cfee:	ea 94       	dec	r14
    cff0:	fe 2c       	mov	r15, r14
    cff2:	00 ee       	ldi	r16, 0xE0	; 224
    cff4:	17 e0       	ldi	r17, 0x07	; 7
    cff6:	21 e0       	ldi	r18, 0x01	; 1
    cff8:	4a ea       	ldi	r20, 0xAA	; 170
    cffa:	50 e0       	ldi	r21, 0x00	; 0
    cffc:	6e e1       	ldi	r22, 0x1E	; 30
    cffe:	70 e0       	ldi	r23, 0x00	; 0
    d000:	ce 01       	movw	r24, r28
    d002:	88 57       	subi	r24, 0x78	; 120
    d004:	9f 4f       	sbci	r25, 0xFF	; 255
    d006:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d00a:	82 e0       	ldi	r24, 0x02	; 2
    d00c:	80 93 2d 0f 	sts	0x0F2D, r24	; 0x800f2d <scan_rf_net_enable>
    d010:	85 ed       	ldi	r24, 0xD5	; 213
    d012:	9b e0       	ldi	r25, 0x0B	; 11
    d014:	0e 94 d3 bf 	call	0x17fa6	; 0x17fa6 <RF24::begin()>
    d018:	57 ce       	rjmp	.-850    	; 0xccc8 <setup+0x9f4>
    d01a:	69 e5       	ldi	r22, 0x59	; 89
    d01c:	76 e5       	ldi	r23, 0x56	; 86
    d01e:	ce 01       	movw	r24, r28
    d020:	88 57       	subi	r24, 0x78	; 120
    d022:	9f 4f       	sbci	r25, 0xFF	; 255
    d024:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    d028:	c1 2c       	mov	r12, r1
    d02a:	ee 24       	eor	r14, r14
    d02c:	ea 94       	dec	r14
    d02e:	fe 2c       	mov	r15, r14
    d030:	00 ee       	ldi	r16, 0xE0	; 224
    d032:	17 e0       	ldi	r17, 0x07	; 7
    d034:	21 e0       	ldi	r18, 0x01	; 1
    d036:	4e eb       	ldi	r20, 0xBE	; 190
    d038:	50 e0       	ldi	r21, 0x00	; 0
    d03a:	60 ea       	ldi	r22, 0xA0	; 160
    d03c:	70 e0       	ldi	r23, 0x00	; 0
    d03e:	ce 01       	movw	r24, r28
    d040:	88 57       	subi	r24, 0x78	; 120
    d042:	9f 4f       	sbci	r25, 0xFF	; 255
    d044:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d048:	81 e0       	ldi	r24, 0x01	; 1
    d04a:	aa c0       	rjmp	.+340    	; 0xd1a0 <setup+0xecc>
    d04c:	c0 5d       	subi	r28, 0xD0	; 208
    d04e:	de 4f       	sbci	r29, 0xFE	; 254
    d050:	98 81       	ld	r25, Y
    d052:	c0 53       	subi	r28, 0x30	; 48
    d054:	d1 40       	sbci	r29, 0x01	; 1
    d056:	9f 30       	cpi	r25, 0x0F	; 15
    d058:	09 f0       	breq	.+2      	; 0xd05c <setup+0xd88>
    d05a:	36 ce       	rjmp	.-916    	; 0xccc8 <setup+0x9f4>
    d05c:	6d e8       	ldi	r22, 0x8D	; 141
    d05e:	78 e5       	ldi	r23, 0x58	; 88
    d060:	ce 01       	movw	r24, r28
    d062:	88 57       	subi	r24, 0x78	; 120
    d064:	9f 4f       	sbci	r25, 0xFF	; 255
    d066:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    d06a:	c1 2c       	mov	r12, r1
    d06c:	ee 24       	eor	r14, r14
    d06e:	ea 94       	dec	r14
    d070:	fe 2c       	mov	r15, r14
    d072:	00 ee       	ldi	r16, 0xE0	; 224
    d074:	17 e0       	ldi	r17, 0x07	; 7
    d076:	21 e0       	ldi	r18, 0x01	; 1
    d078:	48 ec       	ldi	r20, 0xC8	; 200
    d07a:	50 e0       	ldi	r21, 0x00	; 0
    d07c:	6e e1       	ldi	r22, 0x1E	; 30
    d07e:	70 e0       	ldi	r23, 0x00	; 0
    d080:	ce 01       	movw	r24, r28
    d082:	88 57       	subi	r24, 0x78	; 120
    d084:	9f 4f       	sbci	r25, 0xFF	; 255
    d086:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d08a:	89 e3       	ldi	r24, 0x39	; 57
    d08c:	9e e0       	ldi	r25, 0x0E	; 14
    d08e:	0e 94 6a c2 	call	0x184d4	; 0x184d4 <RTC_DS1307::isrunning()>
    d092:	88 23       	and	r24, r24
    d094:	99 f0       	breq	.+38     	; 0xd0bc <setup+0xde8>
    d096:	69 e5       	ldi	r22, 0x59	; 89
    d098:	76 e5       	ldi	r23, 0x56	; 86
    d09a:	ce 01       	movw	r24, r28
    d09c:	88 57       	subi	r24, 0x78	; 120
    d09e:	9f 4f       	sbci	r25, 0xFF	; 255
    d0a0:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    d0a4:	21 e0       	ldi	r18, 0x01	; 1
    d0a6:	48 ec       	ldi	r20, 0xC8	; 200
    d0a8:	50 e0       	ldi	r21, 0x00	; 0
    d0aa:	60 ea       	ldi	r22, 0xA0	; 160
    d0ac:	70 e0       	ldi	r23, 0x00	; 0
    d0ae:	ce 01       	movw	r24, r28
    d0b0:	88 57       	subi	r24, 0x78	; 120
    d0b2:	9f 4f       	sbci	r25, 0xFF	; 255
    d0b4:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d0b8:	80 e0       	ldi	r24, 0x00	; 0
    d0ba:	72 c0       	rjmp	.+228    	; 0xd1a0 <setup+0xecc>
    d0bc:	6c e5       	ldi	r22, 0x5C	; 92
    d0be:	76 e5       	ldi	r23, 0x56	; 86
    d0c0:	ce 01       	movw	r24, r28
    d0c2:	88 57       	subi	r24, 0x78	; 120
    d0c4:	9f 4f       	sbci	r25, 0xFF	; 255
    d0c6:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    d0ca:	c1 2c       	mov	r12, r1
    d0cc:	ee 24       	eor	r14, r14
    d0ce:	ea 94       	dec	r14
    d0d0:	fe 2c       	mov	r15, r14
    d0d2:	00 e0       	ldi	r16, 0x00	; 0
    d0d4:	18 ef       	ldi	r17, 0xF8	; 248
    d0d6:	21 e0       	ldi	r18, 0x01	; 1
    d0d8:	48 ec       	ldi	r20, 0xC8	; 200
    d0da:	50 e0       	ldi	r21, 0x00	; 0
    d0dc:	60 ea       	ldi	r22, 0xA0	; 160
    d0de:	70 e0       	ldi	r23, 0x00	; 0
    d0e0:	ce 01       	movw	r24, r28
    d0e2:	88 57       	subi	r24, 0x78	; 120
    d0e4:	9f 4f       	sbci	r25, 0xFF	; 255
    d0e6:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d0ea:	80 e0       	ldi	r24, 0x00	; 0
    d0ec:	8d ce       	rjmp	.-742    	; 0xce08 <setup+0xb34>
    d0ee:	c0 5d       	subi	r28, 0xD0	; 208
    d0f0:	de 4f       	sbci	r29, 0xFE	; 254
    d0f2:	78 81       	ld	r23, Y
    d0f4:	c0 53       	subi	r28, 0x30	; 48
    d0f6:	d1 40       	sbci	r29, 0x01	; 1
    d0f8:	75 30       	cpi	r23, 0x05	; 5
    d0fa:	09 f4       	brne	.+2      	; 0xd0fe <setup+0xe2a>
    d0fc:	ab cd       	rjmp	.-1194   	; 0xcc54 <setup+0x980>
    d0fe:	76 30       	cpi	r23, 0x06	; 6
    d100:	09 f4       	brne	.+2      	; 0xd104 <setup+0xe30>
    d102:	1b ce       	rjmp	.-970    	; 0xcd3a <setup+0xa66>
    d104:	77 30       	cpi	r23, 0x07	; 7
    d106:	09 f0       	breq	.+2      	; 0xd10a <setup+0xe36>
    d108:	82 ce       	rjmp	.-764    	; 0xce0e <setup+0xb3a>
    d10a:	6e e1       	ldi	r22, 0x1E	; 30
    d10c:	79 e5       	ldi	r23, 0x59	; 89
    d10e:	ce 01       	movw	r24, r28
    d110:	88 57       	subi	r24, 0x78	; 120
    d112:	9f 4f       	sbci	r25, 0xFF	; 255
    d114:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    d118:	c1 2c       	mov	r12, r1
    d11a:	ee 24       	eor	r14, r14
    d11c:	ea 94       	dec	r14
    d11e:	fe 2c       	mov	r15, r14
    d120:	00 ee       	ldi	r16, 0xE0	; 224
    d122:	17 e0       	ldi	r17, 0x07	; 7
    d124:	21 e0       	ldi	r18, 0x01	; 1
    d126:	48 e7       	ldi	r20, 0x78	; 120
    d128:	50 e0       	ldi	r21, 0x00	; 0
    d12a:	6e e1       	ldi	r22, 0x1E	; 30
    d12c:	70 e0       	ldi	r23, 0x00	; 0
    d12e:	ce 01       	movw	r24, r28
    d130:	88 57       	subi	r24, 0x78	; 120
    d132:	9f 4f       	sbci	r25, 0xFF	; 255
    d134:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d138:	88 e1       	ldi	r24, 0x18	; 24
    d13a:	80 93 34 0f 	sts	0x0F34, r24	; 0x800f34 <ds2482_address>
    d13e:	10 92 35 0f 	sts	0x0F35, r1	; 0x800f35 <ds2482_address+0x1>
    d142:	e9 e7       	ldi	r30, 0x79	; 121
    d144:	ff e0       	ldi	r31, 0x0F	; 15
    d146:	15 8e       	std	Z+29, r1	; 0x1d
    d148:	14 8e       	std	Z+28, r1	; 0x1c
    d14a:	7e 96       	adiw	r30, 0x1e	; 30
    d14c:	70 e1       	ldi	r23, 0x10	; 16
    d14e:	ed 32       	cpi	r30, 0x2D	; 45
    d150:	f7 07       	cpc	r31, r23
    d152:	c9 f7       	brne	.-14     	; 0xd146 <setup+0xe72>
itoa():
    d154:	4a e0       	ldi	r20, 0x0A	; 10
    d156:	be 01       	movw	r22, r28
    d158:	62 52       	subi	r22, 0x22	; 34
    d15a:	7f 4f       	sbci	r23, 0xFF	; 255
    d15c:	88 e1       	ldi	r24, 0x18	; 24
    d15e:	90 e0       	ldi	r25, 0x00	; 0
    d160:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
setup():
    d164:	80 91 34 0f 	lds	r24, 0x0F34	; 0x800f34 <ds2482_address>
    d168:	0e 94 c0 c7 	call	0x18f80	; 0x18f80 <ds2482reset(unsigned char)>
    d16c:	81 11       	cpse	r24, r1
    d16e:	34 ce       	rjmp	.-920    	; 0xcdd8 <setup+0xb04>
    d170:	69 e5       	ldi	r22, 0x59	; 89
    d172:	76 e5       	ldi	r23, 0x56	; 86
    d174:	ce 01       	movw	r24, r28
    d176:	88 57       	subi	r24, 0x78	; 120
    d178:	9f 4f       	sbci	r25, 0xFF	; 255
    d17a:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    d17e:	c1 2c       	mov	r12, r1
    d180:	ee 24       	eor	r14, r14
    d182:	ea 94       	dec	r14
    d184:	fe 2c       	mov	r15, r14
    d186:	00 ee       	ldi	r16, 0xE0	; 224
    d188:	17 e0       	ldi	r17, 0x07	; 7
    d18a:	21 e0       	ldi	r18, 0x01	; 1
    d18c:	48 e7       	ldi	r20, 0x78	; 120
    d18e:	50 e0       	ldi	r21, 0x00	; 0
    d190:	60 ea       	ldi	r22, 0xA0	; 160
    d192:	70 e0       	ldi	r23, 0x00	; 0
    d194:	ce 01       	movw	r24, r28
    d196:	88 57       	subi	r24, 0x78	; 120
    d198:	9f 4f       	sbci	r25, 0xFF	; 255
    d19a:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d19e:	82 e0       	ldi	r24, 0x02	; 2
    d1a0:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <selftest_clear_0(unsigned char)>
    d1a4:	91 cd       	rjmp	.-1246   	; 0xccc8 <setup+0x9f4>
    d1a6:	c0 5d       	subi	r28, 0xD0	; 208
    d1a8:	de 4f       	sbci	r29, 0xFE	; 254
    d1aa:	88 81       	ld	r24, Y
    d1ac:	c0 53       	subi	r28, 0x30	; 48
    d1ae:	d1 40       	sbci	r29, 0x01	; 1
    d1b0:	8a 30       	cpi	r24, 0x0A	; 10
    d1b2:	09 f0       	breq	.+2      	; 0xd1b6 <setup+0xee2>
    d1b4:	f3 ce       	rjmp	.-538    	; 0xcf9c <setup+0xcc8>
    d1b6:	61 ee       	ldi	r22, 0xE1	; 225
    d1b8:	78 e5       	ldi	r23, 0x58	; 88
    d1ba:	ce 01       	movw	r24, r28
    d1bc:	88 57       	subi	r24, 0x78	; 120
    d1be:	9f 4f       	sbci	r25, 0xFF	; 255
    d1c0:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    d1c4:	c1 2c       	mov	r12, r1
    d1c6:	ee 24       	eor	r14, r14
    d1c8:	ea 94       	dec	r14
    d1ca:	fe 2c       	mov	r15, r14
    d1cc:	00 ee       	ldi	r16, 0xE0	; 224
    d1ce:	17 e0       	ldi	r17, 0x07	; 7
    d1d0:	21 e0       	ldi	r18, 0x01	; 1
    d1d2:	46 e9       	ldi	r20, 0x96	; 150
    d1d4:	50 e0       	ldi	r21, 0x00	; 0
    d1d6:	6e e1       	ldi	r22, 0x1E	; 30
    d1d8:	70 e0       	ldi	r23, 0x00	; 0
    d1da:	ce 01       	movw	r24, r28
    d1dc:	88 57       	subi	r24, 0x78	; 120
    d1de:	9f 4f       	sbci	r25, 0xFF	; 255
    d1e0:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d1e4:	40 91 f7 0e 	lds	r20, 0x0EF7	; 0x800ef7 <device+0x24>
    d1e8:	50 91 f8 0e 	lds	r21, 0x0EF8	; 0x800ef8 <device+0x25>
    d1ec:	63 ef       	ldi	r22, 0xF3	; 243
    d1ee:	7e e0       	ldi	r23, 0x0E	; 14
    d1f0:	8d ee       	ldi	r24, 0xED	; 237
    d1f2:	9b e0       	ldi	r25, 0x0B	; 11
    d1f4:	0e 94 4a bd 	call	0x17a94	; 0x17a94 <PubSubClient::setServer(unsigned char*, unsigned int)>
    d1f8:	6f e6       	ldi	r22, 0x6F	; 111
    d1fa:	71 e7       	ldi	r23, 0x71	; 113
    d1fc:	8d ee       	ldi	r24, 0xED	; 237
    d1fe:	9b e0       	ldi	r25, 0x0B	; 11
    d200:	0e 94 84 bd 	call	0x17b08	; 0x17b08 <PubSubClient::setCallback(void (*)(char*, unsigned char*, unsigned int))>
    d204:	8e ef       	ldi	r24, 0xFE	; 254
    d206:	95 e5       	ldi	r25, 0x55	; 85
    d208:	0e 94 91 7e 	call	0xfd22	; 0xfd22 <send_mqtt_set_header(char const*)>
    d20c:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    d210:	6b 01       	movw	r12, r22
    d212:	7c 01       	movw	r14, r24
    d214:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    d218:	6c 19       	sub	r22, r12
    d21a:	7d 09       	sbc	r23, r13
    d21c:	8e 09       	sbc	r24, r14
    d21e:	9f 09       	sbc	r25, r15
    d220:	68 3b       	cpi	r22, 0xB8	; 184
    d222:	7b 40       	sbci	r23, 0x0B	; 11
    d224:	81 05       	cpc	r24, r1
    d226:	91 05       	cpc	r25, r1
    d228:	98 f4       	brcc	.+38     	; 0xd250 <setup+0xf7c>
    d22a:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <lastmqttconnect>
    d22e:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <lastmqttconnect+0x1>
    d232:	10 92 3a 0a 	sts	0x0A3A, r1	; 0x800a3a <lastmqttconnect+0x2>
    d236:	10 92 3b 0a 	sts	0x0A3B, r1	; 0x800a3b <lastmqttconnect+0x3>
    d23a:	8d ee       	ldi	r24, 0xED	; 237
    d23c:	9b e0       	ldi	r25, 0x0B	; 11
    d23e:	0e 94 b1 ba 	call	0x17562	; 0x17562 <PubSubClient::loop()>
    d242:	0e 94 cc 42 	call	0x8598	; 0x8598 <mqtt_reconnect()>
    d246:	81 11       	cpse	r24, r1
    d248:	97 ce       	rjmp	.-722    	; 0xcf78 <setup+0xca4>
    d24a:	85 e0       	ldi	r24, 0x05	; 5
    d24c:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <selftest_clear_0(unsigned char)>
    d250:	10 92 38 0a 	sts	0x0A38, r1	; 0x800a38 <lastmqttconnect>
    d254:	10 92 39 0a 	sts	0x0A39, r1	; 0x800a39 <lastmqttconnect+0x1>
    d258:	10 92 3a 0a 	sts	0x0A3A, r1	; 0x800a3a <lastmqttconnect+0x2>
    d25c:	10 92 3b 0a 	sts	0x0A3B, r1	; 0x800a3b <lastmqttconnect+0x3>
_Z14selftest_get_0h():
    d260:	80 91 32 0a 	lds	r24, 0x0A32	; 0x800a32 <selftest_data>
setup():
    d264:	85 ff       	sbrs	r24, 5
    d266:	8c ce       	rjmp	.-744    	; 0xcf80 <setup+0xcac>
    d268:	6c e5       	ldi	r22, 0x5C	; 92
    d26a:	76 e5       	ldi	r23, 0x56	; 86
    d26c:	ce 01       	movw	r24, r28
    d26e:	88 57       	subi	r24, 0x78	; 120
    d270:	9f 4f       	sbci	r25, 0xFF	; 255
    d272:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    d276:	c1 2c       	mov	r12, r1
    d278:	ee 24       	eor	r14, r14
    d27a:	ea 94       	dec	r14
    d27c:	fe 2c       	mov	r15, r14
    d27e:	00 e0       	ldi	r16, 0x00	; 0
    d280:	18 ef       	ldi	r17, 0xF8	; 248
    d282:	21 e0       	ldi	r18, 0x01	; 1
    d284:	46 e9       	ldi	r20, 0x96	; 150
    d286:	50 e0       	ldi	r21, 0x00	; 0
    d288:	fe cd       	rjmp	.-1028   	; 0xce86 <setup+0xbb2>
    d28a:	c0 5d       	subi	r28, 0xD0	; 208
    d28c:	de 4f       	sbci	r29, 0xFE	; 254
    d28e:	98 81       	ld	r25, Y
    d290:	c0 53       	subi	r28, 0x30	; 48
    d292:	d1 40       	sbci	r29, 0x01	; 1
    d294:	9d 30       	cpi	r25, 0x0D	; 13
    d296:	09 f0       	breq	.+2      	; 0xd29a <setup+0xfc6>
    d298:	1a ca       	rjmp	.-3020   	; 0xc6ce <setup+0x3fa>
    d29a:	64 eb       	ldi	r22, 0xB4	; 180
    d29c:	78 e5       	ldi	r23, 0x58	; 88
    d29e:	ce 01       	movw	r24, r28
    d2a0:	88 57       	subi	r24, 0x78	; 120
    d2a2:	9f 4f       	sbci	r25, 0xFF	; 255
    d2a4:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    d2a8:	c1 2c       	mov	r12, r1
    d2aa:	ee 24       	eor	r14, r14
    d2ac:	ea 94       	dec	r14
    d2ae:	fe 2c       	mov	r15, r14
    d2b0:	00 ee       	ldi	r16, 0xE0	; 224
    d2b2:	17 e0       	ldi	r17, 0x07	; 7
    d2b4:	21 e0       	ldi	r18, 0x01	; 1
    d2b6:	44 eb       	ldi	r20, 0xB4	; 180
    d2b8:	50 e0       	ldi	r21, 0x00	; 0
    d2ba:	6e e1       	ldi	r22, 0x1E	; 30
    d2bc:	70 e0       	ldi	r23, 0x00	; 0
    d2be:	ce 01       	movw	r24, r28
    d2c0:	88 57       	subi	r24, 0x78	; 120
    d2c2:	9f 4f       	sbci	r25, 0xFF	; 255
    d2c4:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d2c8:	0e 94 d5 87 	call	0x10faa	; 0x10faa <thermostat_init_pid()>
    d2cc:	10 e0       	ldi	r17, 0x00	; 0
    d2ce:	60 e0       	ldi	r22, 0x00	; 0
    d2d0:	81 2f       	mov	r24, r17
    d2d2:	0e 94 c9 87 	call	0x10f92	; 0x10f92 <thermostat_ring_set_state(unsigned char, unsigned char)>
    d2d6:	60 e0       	ldi	r22, 0x00	; 0
    d2d8:	81 2f       	mov	r24, r17
    d2da:	0e 94 cf 87 	call	0x10f9e	; 0x10f9e <thermostat_ring_set_power(unsigned char, unsigned char)>
    d2de:	81 2f       	mov	r24, r17
    d2e0:	0e 94 11 8a 	call	0x11422	; 0x11422 <thermostat_ring_get_pid_eeprom(unsigned char)>
    d2e4:	81 2f       	mov	r24, r17
    d2e6:	0e 94 c5 89 	call	0x1138a	; 0x1138a <thermostat_ring_update_pid_parameters(unsigned char)>
    d2ea:	1f 5f       	subi	r17, 0xFF	; 255
    d2ec:	15 30       	cpi	r17, 0x05	; 5
    d2ee:	79 f7       	brne	.-34     	; 0xd2ce <setup+0xffa>
    d2f0:	0e 94 9b 42 	call	0x8536	; 0x8536 <get_default_ring()>
    d2f4:	80 93 12 0a 	sts	0x0A12, r24	; 0x800a12 <default_ring>
    d2f8:	0e 94 a9 42 	call	0x8552	; 0x8552 <get_default_show_temp()>
    d2fc:	80 93 11 0a 	sts	0x0A11, r24	; 0x800a11 <default_show_temp>
    d300:	e3 cc       	rjmp	.-1594   	; 0xccc8 <setup+0x9f4>

0000d302 <count_use_rtds()>:
_Z14count_use_rtdsv():
    d302:	0f 93       	push	r16
    d304:	1f 93       	push	r17
    d306:	cf 93       	push	r28
    d308:	df 93       	push	r29
    d30a:	1f 92       	push	r1
    d30c:	cd b7       	in	r28, 0x3d	; 61
    d30e:	de b7       	in	r29, 0x3e	; 62
    d310:	19 82       	std	Y+1, r1	; 0x01
    d312:	10 e0       	ldi	r17, 0x00	; 0
    d314:	00 e0       	ldi	r16, 0x00	; 0
    d316:	be 01       	movw	r22, r28
    d318:	6f 5f       	subi	r22, 0xFF	; 255
    d31a:	7f 4f       	sbci	r23, 0xFF	; 255
    d31c:	81 2f       	mov	r24, r17
    d31e:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <remote_tds_get_active(unsigned char, unsigned char*)>
    d322:	89 81       	ldd	r24, Y+1	; 0x01
    d324:	81 30       	cpi	r24, 0x01	; 1
    d326:	09 f4       	brne	.+2      	; 0xd32a <count_use_rtds()+0x28>
    d328:	0f 5f       	subi	r16, 0xFF	; 255
    d32a:	1f 5f       	subi	r17, 0xFF	; 255
    d32c:	1a 30       	cpi	r17, 0x0A	; 10
    d32e:	99 f7       	brne	.-26     	; 0xd316 <count_use_rtds()+0x14>
    d330:	80 2f       	mov	r24, r16
    d332:	0f 90       	pop	r0
    d334:	df 91       	pop	r29
    d336:	cf 91       	pop	r28
    d338:	1f 91       	pop	r17
    d33a:	0f 91       	pop	r16
    d33c:	08 95       	ret

0000d33e <loop>:
loop():
    d33e:	cf 92       	push	r12
    d340:	df 92       	push	r13
    d342:	ef 92       	push	r14
    d344:	ff 92       	push	r15
    d346:	0f 93       	push	r16
    d348:	1f 93       	push	r17
    d34a:	cf 93       	push	r28
    d34c:	df 93       	push	r29
    d34e:	00 d0       	rcall	.+0      	; 0xd350 <loop+0x12>
    d350:	00 d0       	rcall	.+0      	; 0xd352 <loop+0x14>
    d352:	1f 92       	push	r1
    d354:	cd b7       	in	r28, 0x3d	; 61
    d356:	de b7       	in	r29, 0x3e	; 62
    d358:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    d35c:	6b 01       	movw	r12, r22
    d35e:	7c 01       	movw	r14, r24
    d360:	0e 94 cc 42 	call	0x8598	; 0x8598 <mqtt_reconnect()>
    d364:	81 11       	cpse	r24, r1
    d366:	69 c1       	rjmp	.+722    	; 0xd63a <loop+0x2fc>
    d368:	85 e0       	ldi	r24, 0x05	; 5
    d36a:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <selftest_clear_0(unsigned char)>
    d36e:	8d ee       	ldi	r24, 0xED	; 237
    d370:	9b e0       	ldi	r25, 0x0B	; 11
    d372:	0e 94 b1 ba 	call	0x17562	; 0x17562 <PubSubClient::loop()>
    d376:	80 e0       	ldi	r24, 0x00	; 0
    d378:	0e 94 3d 50 	call	0xa07a	; 0xa07a <draw_menu(bool)>
    d37c:	88 23       	and	r24, r24
    d37e:	19 f0       	breq	.+6      	; 0xd386 <loop+0x48>
    d380:	81 e0       	ldi	r24, 0x01	; 1
    d382:	0e 94 3d 50 	call	0xa07a	; 0xa07a <draw_menu(bool)>
    d386:	80 91 2d 0f 	lds	r24, 0x0F2D	; 0x800f2d <scan_rf_net_enable>
    d38a:	82 30       	cpi	r24, 0x02	; 2
    d38c:	31 f4       	brne	.+12     	; 0xd39a <loop+0x5c>
    d38e:	10 92 2d 0f 	sts	0x0F2D, r1	; 0x800f2d <scan_rf_net_enable>
    d392:	85 ed       	ldi	r24, 0xD5	; 213
    d394:	9b e0       	ldi	r25, 0x0B	; 11
    d396:	0e 94 82 c0 	call	0x18104	; 0x18104 <RF24::printDetails()>
    d39a:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    d39e:	00 91 13 0a 	lds	r16, 0x0A13	; 0x800a13 <milis_10s>
    d3a2:	10 91 14 0a 	lds	r17, 0x0A14	; 0x800a14 <milis_10s+0x1>
    d3a6:	20 91 15 0a 	lds	r18, 0x0A15	; 0x800a15 <milis_10s+0x2>
    d3aa:	30 91 16 0a 	lds	r19, 0x0A16	; 0x800a16 <milis_10s+0x3>
    d3ae:	ab 01       	movw	r20, r22
    d3b0:	bc 01       	movw	r22, r24
    d3b2:	40 1b       	sub	r20, r16
    d3b4:	51 0b       	sbc	r21, r17
    d3b6:	62 0b       	sbc	r22, r18
    d3b8:	73 0b       	sbc	r23, r19
    d3ba:	40 31       	cpi	r20, 0x10	; 16
    d3bc:	57 42       	sbci	r21, 0x27	; 39
    d3be:	61 05       	cpc	r22, r1
    d3c0:	71 05       	cpc	r23, r1
    d3c2:	78 f1       	brcs	.+94     	; 0xd422 <loop+0xe4>
    d3c4:	d9 01       	movw	r26, r18
    d3c6:	c8 01       	movw	r24, r16
    d3c8:	80 5f       	subi	r24, 0xF0	; 240
    d3ca:	98 4d       	sbci	r25, 0xD8	; 216
    d3cc:	af 4f       	sbci	r26, 0xFF	; 255
    d3ce:	bf 4f       	sbci	r27, 0xFF	; 255
    d3d0:	80 93 13 0a 	sts	0x0A13, r24	; 0x800a13 <milis_10s>
    d3d4:	90 93 14 0a 	sts	0x0A14, r25	; 0x800a14 <milis_10s+0x1>
    d3d8:	a0 93 15 0a 	sts	0x0A15, r26	; 0x800a15 <milis_10s+0x2>
    d3dc:	b0 93 16 0a 	sts	0x0A16, r27	; 0x800a16 <milis_10s+0x3>
    d3e0:	81 e0       	ldi	r24, 0x01	; 1
    d3e2:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <menu_redraw10s>
    d3e6:	0e 94 85 43 	call	0x870a	; 0x870a <send_mqtt_onewire()>
    d3ea:	8d ee       	ldi	r24, 0xED	; 237
    d3ec:	9b e0       	ldi	r25, 0x0B	; 11
    d3ee:	0e 94 2a 81 	call	0x10254	; 0x10254 <send_mqtt_status(PubSubClient*)>
    d3f2:	0e 94 e1 47 	call	0x8fc2	; 0x8fc2 <send_device_status()>
    d3f6:	0e 94 31 4a 	call	0x9462	; 0x9462 <send_mqtt_ring()>
    d3fa:	0e 94 fc 43 	call	0x87f8	; 0x87f8 <send_mqtt_tds()>
    d3fe:	0e 94 16 45 	call	0x8a2c	; 0x8a2c <send_mqtt_program()>
    d402:	0e 94 1a 4b 	call	0x9634	; 0x9634 <thermostat()>
    d406:	10 e0       	ldi	r17, 0x00	; 0
    d408:	81 2f       	mov	r24, r17
    d40a:	0e 94 4f 83 	call	0x1069e	; 0x1069e <tds_used(unsigned char)>
    d40e:	81 30       	cpi	r24, 0x01	; 1
    d410:	19 f4       	brne	.+6      	; 0xd418 <loop+0xda>
    d412:	81 2f       	mov	r24, r17
    d414:	0e 94 31 46 	call	0x8c62	; 0x8c62 <mqtt_send_pid_variable(unsigned char)>
    d418:	1f 5f       	subi	r17, 0xFF	; 255
    d41a:	15 30       	cpi	r17, 0x05	; 5
    d41c:	a9 f7       	brne	.-22     	; 0xd408 <loop+0xca>
    d41e:	0e 94 8e 46 	call	0x8d1c	; 0x8d1c <send_mqtt_remote_tds_status()>
    d422:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    d426:	00 91 17 0a 	lds	r16, 0x0A17	; 0x800a17 <milis_1s>
    d42a:	10 91 18 0a 	lds	r17, 0x0A18	; 0x800a18 <milis_1s+0x1>
    d42e:	20 91 19 0a 	lds	r18, 0x0A19	; 0x800a19 <milis_1s+0x2>
    d432:	30 91 1a 0a 	lds	r19, 0x0A1A	; 0x800a1a <milis_1s+0x3>
    d436:	ab 01       	movw	r20, r22
    d438:	bc 01       	movw	r22, r24
    d43a:	40 1b       	sub	r20, r16
    d43c:	51 0b       	sbc	r21, r17
    d43e:	62 0b       	sbc	r22, r18
    d440:	73 0b       	sbc	r23, r19
    d442:	48 3e       	cpi	r20, 0xE8	; 232
    d444:	53 40       	sbci	r21, 0x03	; 3
    d446:	61 05       	cpc	r22, r1
    d448:	71 05       	cpc	r23, r1
    d44a:	38 f1       	brcs	.+78     	; 0xd49a <loop+0x15c>
    d44c:	d9 01       	movw	r26, r18
    d44e:	c8 01       	movw	r24, r16
    d450:	88 51       	subi	r24, 0x18	; 24
    d452:	9c 4f       	sbci	r25, 0xFC	; 252
    d454:	af 4f       	sbci	r26, 0xFF	; 255
    d456:	bf 4f       	sbci	r27, 0xFF	; 255
    d458:	80 93 17 0a 	sts	0x0A17, r24	; 0x800a17 <milis_1s>
    d45c:	90 93 18 0a 	sts	0x0A18, r25	; 0x800a18 <milis_1s+0x1>
    d460:	a0 93 19 0a 	sts	0x0A19, r26	; 0x800a19 <milis_1s+0x2>
    d464:	b0 93 1a 0a 	sts	0x0A1A, r27	; 0x800a1a <milis_1s+0x3>
    d468:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <uptime>
    d46c:	90 91 24 0a 	lds	r25, 0x0A24	; 0x800a24 <uptime+0x1>
    d470:	a0 91 25 0a 	lds	r26, 0x0A25	; 0x800a25 <uptime+0x2>
    d474:	b0 91 26 0a 	lds	r27, 0x0A26	; 0x800a26 <uptime+0x3>
    d478:	01 96       	adiw	r24, 0x01	; 1
    d47a:	a1 1d       	adc	r26, r1
    d47c:	b1 1d       	adc	r27, r1
    d47e:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <uptime>
    d482:	90 93 24 0a 	sts	0x0A24, r25	; 0x800a24 <uptime+0x1>
    d486:	a0 93 25 0a 	sts	0x0A25, r26	; 0x800a25 <uptime+0x2>
    d48a:	b0 93 26 0a 	sts	0x0A26, r27	; 0x800a26 <uptime+0x3>
    d48e:	0e 94 a7 86 	call	0x10d4e	; 0x10d4e <mereni_hwwire(unsigned int)>
    d492:	0e 94 ad 42 	call	0x855a	; 0x855a <tds_extended_memory_store()>
    d496:	0e 94 7b 42 	call	0x84f6	; 0x84f6 <remote_tds_update_last_update()>
    d49a:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    d49e:	00 91 1b 0a 	lds	r16, 0x0A1B	; 0x800a1b <milis_05s>
    d4a2:	10 91 1c 0a 	lds	r17, 0x0A1C	; 0x800a1c <milis_05s+0x1>
    d4a6:	20 91 1d 0a 	lds	r18, 0x0A1D	; 0x800a1d <milis_05s+0x2>
    d4aa:	30 91 1e 0a 	lds	r19, 0x0A1E	; 0x800a1e <milis_05s+0x3>
    d4ae:	ab 01       	movw	r20, r22
    d4b0:	bc 01       	movw	r22, r24
    d4b2:	40 1b       	sub	r20, r16
    d4b4:	51 0b       	sbc	r21, r17
    d4b6:	62 0b       	sbc	r22, r18
    d4b8:	73 0b       	sbc	r23, r19
    d4ba:	44 3f       	cpi	r20, 0xF4	; 244
    d4bc:	51 40       	sbci	r21, 0x01	; 1
    d4be:	61 05       	cpc	r22, r1
    d4c0:	71 05       	cpc	r23, r1
    d4c2:	40 f1       	brcs	.+80     	; 0xd514 <loop+0x1d6>
    d4c4:	d9 01       	movw	r26, r18
    d4c6:	c8 01       	movw	r24, r16
    d4c8:	8c 50       	subi	r24, 0x0C	; 12
    d4ca:	9e 4f       	sbci	r25, 0xFE	; 254
    d4cc:	af 4f       	sbci	r26, 0xFF	; 255
    d4ce:	bf 4f       	sbci	r27, 0xFF	; 255
    d4d0:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <milis_05s>
    d4d4:	90 93 1c 0a 	sts	0x0A1C, r25	; 0x800a1c <milis_05s+0x1>
    d4d8:	a0 93 1d 0a 	sts	0x0A1D, r26	; 0x800a1d <milis_05s+0x2>
    d4dc:	b0 93 1e 0a 	sts	0x0A1E, r27	; 0x800a1e <milis_05s+0x3>
    d4e0:	ce 01       	movw	r24, r28
    d4e2:	01 96       	adiw	r24, 0x01	; 1
    d4e4:	0e 94 8a c2 	call	0x18514	; 0x18514 <RTC_DS1307::now()>
    d4e8:	87 e0       	ldi	r24, 0x07	; 7
    d4ea:	fe 01       	movw	r30, r28
    d4ec:	31 96       	adiw	r30, 0x01	; 1
    d4ee:	a2 e3       	ldi	r26, 0x32	; 50
    d4f0:	be e0       	ldi	r27, 0x0E	; 14
    d4f2:	01 90       	ld	r0, Z+
    d4f4:	0d 92       	st	X+, r0
    d4f6:	8a 95       	dec	r24
    d4f8:	e1 f7       	brne	.-8      	; 0xd4f2 <loop+0x1b4>
    d4fa:	0e 94 cf 47 	call	0x8f9e	; 0x8f9e <selftest()>
    d4fe:	81 e0       	ldi	r24, 0x01	; 1
    d500:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <menu_redraw05s>
    d504:	0e 94 81 69 	call	0xd302	; 0xd302 <count_use_rtds()>
    d508:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <use_rtds>
    d50c:	0e 94 39 83 	call	0x10672	; 0x10672 <count_use_tds()>
    d510:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <use_tds>
    d514:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    d518:	00 91 1f 0a 	lds	r16, 0x0A1F	; 0x800a1f <milis_005s>
    d51c:	10 91 20 0a 	lds	r17, 0x0A20	; 0x800a20 <milis_005s+0x1>
    d520:	20 91 21 0a 	lds	r18, 0x0A21	; 0x800a21 <milis_005s+0x2>
    d524:	30 91 22 0a 	lds	r19, 0x0A22	; 0x800a22 <milis_005s+0x3>
    d528:	ab 01       	movw	r20, r22
    d52a:	bc 01       	movw	r22, r24
    d52c:	40 1b       	sub	r20, r16
    d52e:	51 0b       	sbc	r21, r17
    d530:	62 0b       	sbc	r22, r18
    d532:	73 0b       	sbc	r23, r19
    d534:	42 33       	cpi	r20, 0x32	; 50
    d536:	51 05       	cpc	r21, r1
    d538:	61 05       	cpc	r22, r1
    d53a:	71 05       	cpc	r23, r1
    d53c:	d8 f0       	brcs	.+54     	; 0xd574 <loop+0x236>
    d53e:	d9 01       	movw	r26, r18
    d540:	c8 01       	movw	r24, r16
    d542:	c2 96       	adiw	r24, 0x32	; 50
    d544:	a1 1d       	adc	r26, r1
    d546:	b1 1d       	adc	r27, r1
    d548:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <milis_005s>
    d54c:	90 93 20 0a 	sts	0x0A20, r25	; 0x800a20 <milis_005s+0x1>
    d550:	a0 93 21 0a 	sts	0x0A21, r26	; 0x800a21 <milis_005s+0x2>
    d554:	b0 93 22 0a 	sts	0x0A22, r27	; 0x800a22 <milis_005s+0x3>
    d558:	10 91 27 0a 	lds	r17, 0x0A27	; 0x800a27 <a2d_run_now>
    d55c:	11 30       	cpi	r17, 0x01	; 1
    d55e:	51 f4       	brne	.+20     	; 0xd574 <loop+0x236>
    d560:	0e 94 72 cb 	call	0x196e4	; 0x196e4 <a2d_start_process()>
    d564:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <a2d_run_now>
    d568:	0e 94 92 cb 	call	0x19724	; 0x19724 <a2d_done()>
    d56c:	81 11       	cpse	r24, r1
    d56e:	02 c0       	rjmp	.+4      	; 0xd574 <loop+0x236>
    d570:	10 93 27 0a 	sts	0x0A27, r17	; 0x800a27 <a2d_run_now>
    d574:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
    d578:	dc 01       	movw	r26, r24
    d57a:	cb 01       	movw	r24, r22
    d57c:	8c 19       	sub	r24, r12
    d57e:	9d 09       	sbc	r25, r13
    d580:	ae 09       	sbc	r26, r14
    d582:	bf 09       	sbc	r27, r15
    d584:	80 93 0d 0a 	sts	0x0A0D, r24	; 0x800a0d <load>
    d588:	90 93 0e 0a 	sts	0x0A0E, r25	; 0x800a0e <load+0x1>
    d58c:	a0 93 0f 0a 	sts	0x0A0F, r26	; 0x800a0f <load+0x2>
    d590:	b0 93 10 0a 	sts	0x0A10, r27	; 0x800a10 <load+0x3>
    d594:	c0 90 36 02 	lds	r12, 0x0236	; 0x800236 <load_min>
    d598:	d0 90 37 02 	lds	r13, 0x0237	; 0x800237 <load_min+0x1>
    d59c:	e0 90 38 02 	lds	r14, 0x0238	; 0x800238 <load_min+0x2>
    d5a0:	f0 90 39 02 	lds	r15, 0x0239	; 0x800239 <load_min+0x3>
    d5a4:	8c 15       	cp	r24, r12
    d5a6:	9d 05       	cpc	r25, r13
    d5a8:	ae 05       	cpc	r26, r14
    d5aa:	bf 05       	cpc	r27, r15
    d5ac:	44 f4       	brge	.+16     	; 0xd5be <loop+0x280>
    d5ae:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <load_min>
    d5b2:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <load_min+0x1>
    d5b6:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <load_min+0x2>
    d5ba:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <load_min+0x3>
    d5be:	c0 90 09 0a 	lds	r12, 0x0A09	; 0x800a09 <load_max>
    d5c2:	d0 90 0a 0a 	lds	r13, 0x0A0A	; 0x800a0a <load_max+0x1>
    d5c6:	e0 90 0b 0a 	lds	r14, 0x0A0B	; 0x800a0b <load_max+0x2>
    d5ca:	f0 90 0c 0a 	lds	r15, 0x0A0C	; 0x800a0c <load_max+0x3>
    d5ce:	c8 16       	cp	r12, r24
    d5d0:	d9 06       	cpc	r13, r25
    d5d2:	ea 06       	cpc	r14, r26
    d5d4:	fb 06       	cpc	r15, r27
    d5d6:	44 f4       	brge	.+16     	; 0xd5e8 <loop+0x2aa>
    d5d8:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <load_max>
    d5dc:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <load_max+0x1>
    d5e0:	a0 93 0b 0a 	sts	0x0A0B, r26	; 0x800a0b <load_max+0x2>
    d5e4:	b0 93 0c 0a 	sts	0x0A0C, r27	; 0x800a0c <load_max+0x3>
    d5e8:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <light_curr>
    d5ec:	90 91 29 0a 	lds	r25, 0x0A29	; 0x800a29 <light_curr+0x1>
    d5f0:	20 91 07 0a 	lds	r18, 0x0A07	; 0x800a07 <light_min>
    d5f4:	30 91 08 0a 	lds	r19, 0x0A08	; 0x800a08 <light_min+0x1>
    d5f8:	82 17       	cp	r24, r18
    d5fa:	93 07       	cpc	r25, r19
    d5fc:	20 f4       	brcc	.+8      	; 0xd606 <loop+0x2c8>
    d5fe:	90 93 08 0a 	sts	0x0A08, r25	; 0x800a08 <light_min+0x1>
    d602:	80 93 07 0a 	sts	0x0A07, r24	; 0x800a07 <light_min>
    d606:	20 91 05 0a 	lds	r18, 0x0A05	; 0x800a05 <light_max>
    d60a:	30 91 06 0a 	lds	r19, 0x0A06	; 0x800a06 <light_max+0x1>
    d60e:	28 17       	cp	r18, r24
    d610:	39 07       	cpc	r19, r25
    d612:	20 f4       	brcc	.+8      	; 0xd61c <loop+0x2de>
    d614:	90 93 06 0a 	sts	0x0A06, r25	; 0x800a06 <light_max+0x1>
    d618:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <light_max>
    d61c:	27 96       	adiw	r28, 0x07	; 7
    d61e:	0f b6       	in	r0, 0x3f	; 63
    d620:	f8 94       	cli
    d622:	de bf       	out	0x3e, r29	; 62
    d624:	0f be       	out	0x3f, r0	; 63
    d626:	cd bf       	out	0x3d, r28	; 61
    d628:	df 91       	pop	r29
    d62a:	cf 91       	pop	r28
    d62c:	1f 91       	pop	r17
    d62e:	0f 91       	pop	r16
    d630:	ff 90       	pop	r15
    d632:	ef 90       	pop	r14
    d634:	df 90       	pop	r13
    d636:	cf 90       	pop	r12
    d638:	08 95       	ret
    d63a:	85 e0       	ldi	r24, 0x05	; 5
    d63c:	0e 94 b6 47 	call	0x8f6c	; 0x8f6c <selftest_set_0(unsigned char)>
    d640:	96 ce       	rjmp	.-724    	; 0xd36e <loop+0x30>

0000d642 <get_global_temp(unsigned char, char*, float*)>:
_Z15get_global_temphPcPf():
    d642:	8f 92       	push	r8
    d644:	9f 92       	push	r9
    d646:	af 92       	push	r10
    d648:	bf 92       	push	r11
    d64a:	cf 92       	push	r12
    d64c:	df 92       	push	r13
    d64e:	ef 92       	push	r14
    d650:	ff 92       	push	r15
    d652:	0f 93       	push	r16
    d654:	1f 93       	push	r17
    d656:	cf 93       	push	r28
    d658:	df 93       	push	r29
    d65a:	cd b7       	in	r28, 0x3d	; 61
    d65c:	de b7       	in	r29, 0x3e	; 62
    d65e:	67 97       	sbiw	r28, 0x17	; 23
    d660:	0f b6       	in	r0, 0x3f	; 63
    d662:	f8 94       	cli
    d664:	de bf       	out	0x3e, r29	; 62
    d666:	0f be       	out	0x3f, r0	; 63
    d668:	cd bf       	out	0x3d, r28	; 61
    d66a:	e8 2e       	mov	r14, r24
    d66c:	5b 01       	movw	r10, r22
    d66e:	4a 01       	movw	r8, r20
    d670:	6c e5       	ldi	r22, 0x5C	; 92
    d672:	76 e5       	ldi	r23, 0x56	; 86
    d674:	c5 01       	movw	r24, r10
    d676:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    d67a:	f4 01       	movw	r30, r8
    d67c:	10 82       	st	Z, r1
    d67e:	11 82       	std	Z+1, r1	; 0x01
    d680:	12 82       	std	Z+2, r1	; 0x02
    d682:	13 82       	std	Z+3, r1	; 0x03
    d684:	d1 2c       	mov	r13, r1
    d686:	c1 2c       	mov	r12, r1
    d688:	00 e0       	ldi	r16, 0x00	; 0
    d68a:	1e e1       	ldi	r17, 0x1E	; 30
    d68c:	be 01       	movw	r22, r28
    d68e:	6f 5f       	subi	r22, 0xFF	; 255
    d690:	7f 4f       	sbci	r23, 0xFF	; 255
    d692:	8c 2d       	mov	r24, r12
    d694:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    d698:	81 30       	cpi	r24, 0x01	; 1
    d69a:	f1 f5       	brne	.+124    	; 0xd718 <get_global_temp(unsigned char, char*, float*)+0xd6>
    d69c:	89 81       	ldd	r24, Y+1	; 0x01
    d69e:	81 30       	cpi	r24, 0x01	; 1
    d6a0:	d9 f5       	brne	.+118    	; 0xd718 <get_global_temp(unsigned char, char*, float*)+0xd6>
    d6a2:	e0 12       	cpse	r14, r16
    d6a4:	38 c0       	rjmp	.+112    	; 0xd716 <get_global_temp(unsigned char, char*, float*)+0xd4>
    d6a6:	be 01       	movw	r22, r28
    d6a8:	63 5f       	subi	r22, 0xF3	; 243
    d6aa:	7f 4f       	sbci	r23, 0xFF	; 255
    d6ac:	c5 01       	movw	r24, r10
    d6ae:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    d6b2:	1c 9d       	mul	r17, r12
    d6b4:	f0 01       	movw	r30, r0
    d6b6:	1d 9d       	mul	r17, r13
    d6b8:	f0 0d       	add	r31, r0
    d6ba:	11 24       	eor	r1, r1
    d6bc:	e7 58       	subi	r30, 0x87	; 135
    d6be:	f0 4f       	sbci	r31, 0xF0	; 240
    d6c0:	f3 8c       	ldd	r15, Z+27	; 0x1b
    d6c2:	81 e0       	ldi	r24, 0x01	; 1
    d6c4:	f8 12       	cpse	r15, r24
    d6c6:	27 c0       	rjmp	.+78     	; 0xd716 <get_global_temp(unsigned char, char*, float*)+0xd4>
    d6c8:	65 81       	ldd	r22, Z+5	; 0x05
    d6ca:	76 81       	ldd	r23, Z+6	; 0x06
    d6cc:	07 2e       	mov	r0, r23
    d6ce:	00 0c       	add	r0, r0
    d6d0:	88 0b       	sbc	r24, r24
    d6d2:	99 0b       	sbc	r25, r25
    d6d4:	0e 94 14 d2 	call	0x1a428	; 0x1a428 <__floatsisf>
    d6d8:	20 e0       	ldi	r18, 0x00	; 0
    d6da:	30 e0       	ldi	r19, 0x00	; 0
    d6dc:	4a e7       	ldi	r20, 0x7A	; 122
    d6de:	54 e4       	ldi	r21, 0x44	; 68
    d6e0:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
    d6e4:	f4 01       	movw	r30, r8
    d6e6:	60 83       	st	Z, r22
    d6e8:	71 83       	std	Z+1, r23	; 0x01
    d6ea:	82 83       	std	Z+2, r24	; 0x02
    d6ec:	93 83       	std	Z+3, r25	; 0x03
    d6ee:	8f 2d       	mov	r24, r15
    d6f0:	67 96       	adiw	r28, 0x17	; 23
    d6f2:	0f b6       	in	r0, 0x3f	; 63
    d6f4:	f8 94       	cli
    d6f6:	de bf       	out	0x3e, r29	; 62
    d6f8:	0f be       	out	0x3f, r0	; 63
    d6fa:	cd bf       	out	0x3d, r28	; 61
    d6fc:	df 91       	pop	r29
    d6fe:	cf 91       	pop	r28
    d700:	1f 91       	pop	r17
    d702:	0f 91       	pop	r16
    d704:	ff 90       	pop	r15
    d706:	ef 90       	pop	r14
    d708:	df 90       	pop	r13
    d70a:	cf 90       	pop	r12
    d70c:	bf 90       	pop	r11
    d70e:	af 90       	pop	r10
    d710:	9f 90       	pop	r9
    d712:	8f 90       	pop	r8
    d714:	08 95       	ret
    d716:	0f 5f       	subi	r16, 0xFF	; 255
    d718:	ff ef       	ldi	r31, 0xFF	; 255
    d71a:	cf 1a       	sub	r12, r31
    d71c:	df 0a       	sbc	r13, r31
    d71e:	86 e0       	ldi	r24, 0x06	; 6
    d720:	c8 16       	cp	r12, r24
    d722:	d1 04       	cpc	r13, r1
    d724:	09 f0       	breq	.+2      	; 0xd728 <get_global_temp(unsigned char, char*, float*)+0xe6>
    d726:	b2 cf       	rjmp	.-156    	; 0xd68c <get_global_temp(unsigned char, char*, float*)+0x4a>
    d728:	10 e0       	ldi	r17, 0x00	; 0
    d72a:	be 01       	movw	r22, r28
    d72c:	69 5e       	subi	r22, 0xE9	; 233
    d72e:	7f 4f       	sbci	r23, 0xFF	; 255
    d730:	81 2f       	mov	r24, r17
    d732:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <remote_tds_get_active(unsigned char, unsigned char*)>
    d736:	ff 88       	ldd	r15, Y+23	; 0x17
    d738:	e1 e0       	ldi	r30, 0x01	; 1
    d73a:	fe 12       	cpse	r15, r30
    d73c:	17 c0       	rjmp	.+46     	; 0xd76c <get_global_temp(unsigned char, char*, float*)+0x12a>
    d73e:	e0 12       	cpse	r14, r16
    d740:	14 c0       	rjmp	.+40     	; 0xd76a <get_global_temp(unsigned char, char*, float*)+0x128>
    d742:	a5 01       	movw	r20, r10
    d744:	be 01       	movw	r22, r28
    d746:	69 5e       	subi	r22, 0xE9	; 233
    d748:	7f 4f       	sbci	r23, 0xFF	; 255
    d74a:	81 2f       	mov	r24, r17
    d74c:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    d750:	81 2f       	mov	r24, r17
    d752:	0e 94 3e 41 	call	0x827c	; 0x827c <remote_tds_get_last_update(unsigned char)>
    d756:	8a 3f       	cpi	r24, 0xFA	; 250
    d758:	40 f4       	brcc	.+16     	; 0xd76a <get_global_temp(unsigned char, char*, float*)+0x128>
    d75a:	81 2f       	mov	r24, r17
    d75c:	0e 94 0f 41 	call	0x821e	; 0x821e <remote_tds_get_data(unsigned char)>
    d760:	bc 01       	movw	r22, r24
    d762:	99 0f       	add	r25, r25
    d764:	88 0b       	sbc	r24, r24
    d766:	99 0b       	sbc	r25, r25
    d768:	b5 cf       	rjmp	.-150    	; 0xd6d4 <get_global_temp(unsigned char, char*, float*)+0x92>
    d76a:	0f 5f       	subi	r16, 0xFF	; 255
    d76c:	1f 5f       	subi	r17, 0xFF	; 255
    d76e:	1a 30       	cpi	r17, 0x0A	; 10
    d770:	e1 f6       	brne	.-72     	; 0xd72a <get_global_temp(unsigned char, char*, float*)+0xe8>
    d772:	f1 2c       	mov	r15, r1
    d774:	bc cf       	rjmp	.-136    	; 0xd6ee <get_global_temp(unsigned char, char*, float*)+0xac>

0000d776 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_temp_1jjjjhhPc():
    d776:	2f 92       	push	r2
    d778:	3f 92       	push	r3
    d77a:	4f 92       	push	r4
    d77c:	5f 92       	push	r5
    d77e:	6f 92       	push	r6
    d780:	7f 92       	push	r7
    d782:	8f 92       	push	r8
    d784:	9f 92       	push	r9
    d786:	af 92       	push	r10
    d788:	bf 92       	push	r11
    d78a:	cf 92       	push	r12
    d78c:	df 92       	push	r13
    d78e:	ef 92       	push	r14
    d790:	ff 92       	push	r15
    d792:	0f 93       	push	r16
    d794:	1f 93       	push	r17
    d796:	cf 93       	push	r28
    d798:	df 93       	push	r29
    d79a:	cd b7       	in	r28, 0x3d	; 61
    d79c:	de b7       	in	r29, 0x3e	; 62
    d79e:	e8 97       	sbiw	r28, 0x38	; 56
    d7a0:	0f b6       	in	r0, 0x3f	; 63
    d7a2:	f8 94       	cli
    d7a4:	de bf       	out	0x3e, r29	; 62
    d7a6:	0f be       	out	0x3f, r0	; 63
    d7a8:	cd bf       	out	0x3d, r28	; 61
    d7aa:	4c 01       	movw	r8, r24
    d7ac:	3b 01       	movw	r6, r22
    d7ae:	63 e3       	ldi	r22, 0x33	; 51
    d7b0:	78 e5       	ldi	r23, 0x58	; 88
    d7b2:	ce 01       	movw	r24, r28
    d7b4:	01 96       	adiw	r24, 0x01	; 1
    d7b6:	5c 01       	movw	r10, r24
    d7b8:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    d7bc:	ae 01       	movw	r20, r28
    d7be:	4b 5c       	subi	r20, 0xCB	; 203
    d7c0:	5f 4f       	sbci	r21, 0xFF	; 255
    d7c2:	be 01       	movw	r22, r28
    d7c4:	6f 5d       	subi	r22, 0xDF	; 223
    d7c6:	7f 4f       	sbci	r23, 0xFF	; 255
    d7c8:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <default_show_temp>
    d7cc:	0e 94 21 6b 	call	0xd642	; 0xd642 <get_global_temp(unsigned char, char*, float*)>
    d7d0:	d8 2e       	mov	r13, r24
    d7d2:	be 01       	movw	r22, r28
    d7d4:	6f 5d       	subi	r22, 0xDF	; 223
    d7d6:	7f 4f       	sbci	r23, 0xFF	; 255
    d7d8:	c5 01       	movw	r24, r10
    d7da:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    d7de:	a3 01       	movw	r20, r6
    d7e0:	4b 5f       	subi	r20, 0xFB	; 251
    d7e2:	5f 4f       	sbci	r21, 0xFF	; 255
    d7e4:	b4 01       	movw	r22, r8
    d7e6:	6b 5f       	subi	r22, 0xFB	; 251
    d7e8:	7f 4f       	sbci	r23, 0xFF	; 255
    d7ea:	c1 2c       	mov	r12, r1
    d7ec:	ee 24       	eor	r14, r14
    d7ee:	ea 94       	dec	r14
    d7f0:	fe 2c       	mov	r15, r14
    d7f2:	10 e0       	ldi	r17, 0x00	; 0
    d7f4:	00 e0       	ldi	r16, 0x00	; 0
    d7f6:	21 e0       	ldi	r18, 0x01	; 1
    d7f8:	c5 01       	movw	r24, r10
    d7fa:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d7fe:	23 01       	movw	r4, r6
    d800:	94 e1       	ldi	r25, 0x14	; 20
    d802:	49 0e       	add	r4, r25
    d804:	51 1c       	adc	r5, r1
    d806:	14 01       	movw	r2, r8
    d808:	84 e0       	ldi	r24, 0x04	; 4
    d80a:	28 0e       	add	r2, r24
    d80c:	31 1c       	adc	r3, r1
    d80e:	91 e0       	ldi	r25, 0x01	; 1
    d810:	d9 12       	cpse	r13, r25
    d812:	4e c0       	rjmp	.+156    	; 0xd8b0 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x13a>
    d814:	6d a9       	ldd	r22, Y+53	; 0x35
    d816:	7e a9       	ldd	r23, Y+54	; 0x36
    d818:	8f a9       	ldd	r24, Y+55	; 0x37
    d81a:	98 ad       	ldd	r25, Y+56	; 0x38
    d81c:	85 01       	movw	r16, r10
    d81e:	21 e0       	ldi	r18, 0x01	; 1
    d820:	44 e0       	ldi	r20, 0x04	; 4
    d822:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <dtostrf>
    d826:	f5 01       	movw	r30, r10
    d828:	01 90       	ld	r0, Z+
    d82a:	00 20       	and	r0, r0
    d82c:	e9 f7       	brne	.-6      	; 0xd828 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb2>
    d82e:	31 97       	sbiw	r30, 0x01	; 1
    d830:	ea 19       	sub	r30, r10
    d832:	fb 09       	sbc	r31, r11
    d834:	35 97       	sbiw	r30, 0x05	; 5
    d836:	28 f4       	brcc	.+10     	; 0xd842 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xcc>
    d838:	62 e6       	ldi	r22, 0x62	; 98
    d83a:	75 e0       	ldi	r23, 0x05	; 5
    d83c:	c5 01       	movw	r24, r10
    d83e:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    d842:	c1 2c       	mov	r12, r1
    d844:	ee 24       	eor	r14, r14
    d846:	ea 94       	dec	r14
    d848:	fe 2c       	mov	r15, r14
    d84a:	10 e0       	ldi	r17, 0x00	; 0
    d84c:	00 e0       	ldi	r16, 0x00	; 0
    d84e:	28 e0       	ldi	r18, 0x08	; 8
    d850:	a2 01       	movw	r20, r4
    d852:	b1 01       	movw	r22, r2
    d854:	c5 01       	movw	r24, r10
    d856:	0e 94 71 39 	call	0x72e2	; 0x72e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d85a:	70 e0       	ldi	r23, 0x00	; 0
    d85c:	60 e0       	ldi	r22, 0x00	; 0
    d85e:	89 e8       	ldi	r24, 0x89	; 137
    d860:	9b e0       	ldi	r25, 0x0B	; 11
    d862:	0e 94 b9 8d 	call	0x11b72	; 0x11b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    d866:	83 01       	movw	r16, r6
    d868:	0c 5a       	subi	r16, 0xAC	; 172
    d86a:	1f 4f       	sbci	r17, 0xFF	; 255
    d86c:	94 01       	movw	r18, r8
    d86e:	2c 50       	subi	r18, 0x0C	; 12
    d870:	3f 4f       	sbci	r19, 0xFF	; 255
    d872:	a3 01       	movw	r20, r6
    d874:	b4 01       	movw	r22, r8
    d876:	89 e8       	ldi	r24, 0x89	; 137
    d878:	9b e0       	ldi	r25, 0x0B	; 11
    d87a:	0e 94 44 8e 	call	0x11c88	; 0x11c88 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    d87e:	e8 96       	adiw	r28, 0x38	; 56
    d880:	0f b6       	in	r0, 0x3f	; 63
    d882:	f8 94       	cli
    d884:	de bf       	out	0x3e, r29	; 62
    d886:	0f be       	out	0x3f, r0	; 63
    d888:	cd bf       	out	0x3d, r28	; 61
    d88a:	df 91       	pop	r29
    d88c:	cf 91       	pop	r28
    d88e:	1f 91       	pop	r17
    d890:	0f 91       	pop	r16
    d892:	ff 90       	pop	r15
    d894:	ef 90       	pop	r14
    d896:	df 90       	pop	r13
    d898:	cf 90       	pop	r12
    d89a:	bf 90       	pop	r11
    d89c:	af 90       	pop	r10
    d89e:	9f 90       	pop	r9
    d8a0:	8f 90       	pop	r8
    d8a2:	7f 90       	pop	r7
    d8a4:	6f 90       	pop	r6
    d8a6:	5f 90       	pop	r5
    d8a8:	4f 90       	pop	r4
    d8aa:	3f 90       	pop	r3
    d8ac:	2f 90       	pop	r2
    d8ae:	08 95       	ret
    d8b0:	6c e5       	ldi	r22, 0x5C	; 92
    d8b2:	76 e5       	ldi	r23, 0x56	; 86
    d8b4:	c5 01       	movw	r24, r10
    d8b6:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    d8ba:	c1 2c       	mov	r12, r1
    d8bc:	ee 24       	eor	r14, r14
    d8be:	ea 94       	dec	r14
    d8c0:	fe 2c       	mov	r15, r14
    d8c2:	00 e0       	ldi	r16, 0x00	; 0
    d8c4:	18 ef       	ldi	r17, 0xF8	; 248
    d8c6:	c3 cf       	rjmp	.-122    	; 0xd84e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xd8>

0000d8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    d8c8:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    d8ca:	80 85       	ldd	r24, Z+8	; 0x08
    d8cc:	81 11       	cpse	r24, r1
    d8ce:	0a c0       	rjmp	.+20     	; 0xd8e4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    d8d0:	a2 81       	ldd	r26, Z+2	; 0x02
    d8d2:	b3 81       	ldd	r27, Z+3	; 0x03
    d8d4:	cd 01       	movw	r24, r26
    d8d6:	01 96       	adiw	r24, 0x01	; 1
    d8d8:	93 83       	std	Z+3, r25	; 0x03
    d8da:	82 83       	std	Z+2, r24	; 0x02
    d8dc:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    d8de:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    d8e0:	81 e0       	ldi	r24, 0x01	; 1
    d8e2:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    d8e4:	87 81       	ldd	r24, Z+7	; 0x07
    d8e6:	08 95       	ret

0000d8e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    d8e8:	1f 93       	push	r17
    d8ea:	cf 93       	push	r28
    d8ec:	df 93       	push	r29
    d8ee:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    d8f0:	ce 01       	movw	r24, r28
    d8f2:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d8f6:	8b 30       	cpi	r24, 0x0B	; 11
    d8f8:	3c f4       	brge	.+14     	; 0xd908 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    d8fa:	89 30       	cpi	r24, 0x09	; 9
    d8fc:	5c f4       	brge	.+22     	; 0xd914 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    d8fe:	88 23       	and	r24, r24
    d900:	e9 f0       	breq	.+58     	; 0xd93c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    d902:	90 e0       	ldi	r25, 0x00	; 0
    d904:	80 e0       	ldi	r24, 0x00	; 0
    d906:	1c c0       	rjmp	.+56     	; 0xd940 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    d908:	80 32       	cpi	r24, 0x20	; 32
    d90a:	21 f0       	breq	.+8      	; 0xd914 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    d90c:	8f 32       	cpi	r24, 0x2F	; 47
    d90e:	21 f0       	breq	.+8      	; 0xd918 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    d910:	8d 30       	cpi	r24, 0x0D	; 13
    d912:	b9 f7       	brne	.-18     	; 0xd902 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d914:	18 86       	std	Y+8, r1	; 0x08
    d916:	ec cf       	rjmp	.-40     	; 0xd8f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    d918:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    d91a:	ce 01       	movw	r24, r28
    d91c:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    d920:	8a 32       	cpi	r24, 0x2A	; 42
    d922:	29 f0       	breq	.+10     	; 0xd92e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    d924:	8f 32       	cpi	r24, 0x2F	; 47
    d926:	d1 f0       	breq	.+52     	; 0xd95c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    d928:	82 e0       	ldi	r24, 0x02	; 2
    d92a:	90 e0       	ldi	r25, 0x00	; 0
    d92c:	09 c0       	rjmp	.+18     	; 0xd940 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d92e:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    d930:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    d932:	ce 01       	movw	r24, r28
    d934:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    d938:	81 11       	cpse	r24, r1
    d93a:	06 c0       	rjmp	.+12     	; 0xd948 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    d93c:	81 e0       	ldi	r24, 0x01	; 1
    d93e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    d940:	df 91       	pop	r29
    d942:	cf 91       	pop	r28
    d944:	1f 91       	pop	r17
    d946:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    d948:	8f 32       	cpi	r24, 0x2F	; 47
    d94a:	11 f4       	brne	.+4      	; 0xd950 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303 (discriminator 1)
    d94c:	11 11       	cpse	r17, r1
    d94e:	e2 cf       	rjmp	.-60     	; 0xd914 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    d950:	11 e0       	ldi	r17, 0x01	; 1
    d952:	8a 32       	cpi	r24, 0x2A	; 42
    d954:	09 f0       	breq	.+2      	; 0xd958 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    d956:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    d958:	18 86       	std	Y+8, r1	; 0x08
    d95a:	eb cf       	rjmp	.-42     	; 0xd932 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    d95c:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    d95e:	ce 01       	movw	r24, r28
    d960:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    d964:	88 23       	and	r24, r24
    d966:	51 f3       	breq	.-44     	; 0xd93c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    d968:	8a 30       	cpi	r24, 0x0A	; 10
    d96a:	c1 f7       	brne	.-16     	; 0xd95c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    d96c:	c1 cf       	rjmp	.-126    	; 0xd8f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

0000d96e <float ArduinoJson::Internals::parseFloat<float>(char const*)>:
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:15

namespace ArduinoJson {
namespace Internals {

template <typename T>
inline T parseFloat(const char* s) {
    d96e:	ff 92       	push	r15
    d970:	0f 93       	push	r16
    d972:	1f 93       	push	r17
    d974:	cf 93       	push	r28
    d976:	df 93       	push	r29
    d978:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:20
  typedef FloatTraits<T> traits;
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL
    d97a:	89 2b       	or	r24, r25
    d97c:	09 f4       	brne	.+2      	; 0xd980 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x12>
    d97e:	8b c0       	rjmp	.+278    	; 0xda96 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x128>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23

  bool negative_result = false;
  switch (*s) {
    d980:	88 81       	ld	r24, Y
    d982:	8b 32       	cpi	r24, 0x2B	; 43
    d984:	91 f1       	breq	.+100    	; 0xd9ea <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x7c>
    d986:	8d 32       	cpi	r24, 0x2D	; 45
    d988:	89 f5       	brne	.+98     	; 0xd9ec <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x7e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    d98a:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    d98c:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    d98e:	88 81       	ld	r24, Y
    d990:	84 37       	cpi	r24, 0x74	; 116
    d992:	09 f4       	brne	.+2      	; 0xd996 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x28>
    d994:	db c0       	rjmp	.+438    	; 0xdb4c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34 (discriminator 2)
  if (*s == 'n' || *s == 'N') return traits::nan();
    d996:	8f 7d       	andi	r24, 0xDF	; 223
    d998:	8e 34       	cpi	r24, 0x4E	; 78
    d99a:	09 f4       	brne	.+2      	; 0xd99e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x30>
    d99c:	dc c0       	rjmp	.+440    	; 0xdb56 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1e8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35 (discriminator 1)
  if (*s == 'i' || *s == 'I')
    d99e:	89 34       	cpi	r24, 0x49	; 73
    d9a0:	09 f4       	brne	.+2      	; 0xd9a4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x36>
    d9a2:	84 c0       	rjmp	.+264    	; 0xdaac <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    d9a4:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    d9a6:	20 e0       	ldi	r18, 0x00	; 0
    d9a8:	30 e0       	ldi	r19, 0x00	; 0
    d9aa:	a9 01       	movw	r20, r18
    d9ac:	fe 01       	movw	r30, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    d9ae:	09 91       	ld	r16, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    d9b0:	80 ed       	ldi	r24, 0xD0	; 208
    d9b2:	80 0f       	add	r24, r16
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    d9b4:	8a 30       	cpi	r24, 0x0A	; 10
    d9b6:	f0 f4       	brcc	.+60     	; 0xd9f4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x86>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    d9b8:	2c 3c       	cpi	r18, 0xCC	; 204
    d9ba:	8c ec       	ldi	r24, 0xCC	; 204
    d9bc:	38 07       	cpc	r19, r24
    d9be:	8c e0       	ldi	r24, 0x0C	; 12
    d9c0:	48 07       	cpc	r20, r24
    d9c2:	51 05       	cpc	r21, r1
    d9c4:	ac f4       	brge	.+42     	; 0xd9f0 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x82>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    d9c6:	aa e0       	ldi	r26, 0x0A	; 10
    d9c8:	b0 e0       	ldi	r27, 0x00	; 0
    d9ca:	0e 94 d2 d3 	call	0x1a7a4	; 0x1a7a4 <__muluhisi3>
    d9ce:	20 2f       	mov	r18, r16
    d9d0:	00 0f       	add	r16, r16
    d9d2:	33 0b       	sbc	r19, r19
    d9d4:	20 53       	subi	r18, 0x30	; 48
    d9d6:	31 09       	sbc	r19, r1
    d9d8:	03 2e       	mov	r0, r19
    d9da:	00 0c       	add	r0, r0
    d9dc:	44 0b       	sbc	r20, r20
    d9de:	55 0b       	sbc	r21, r21
    d9e0:	26 0f       	add	r18, r22
    d9e2:	37 1f       	adc	r19, r23
    d9e4:	48 1f       	adc	r20, r24
    d9e6:	59 1f       	adc	r21, r25
    d9e8:	e1 cf       	rjmp	.-62     	; 0xd9ac <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    d9ea:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    d9ec:	10 e0       	ldi	r17, 0x00	; 0
    d9ee:	cf cf       	rjmp	.-98     	; 0xd98e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x20>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    d9f0:	f3 94       	inc	r15
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    d9f2:	dc cf       	rjmp	.-72     	; 0xd9ac <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    else
      exponent_offset++;
    s++;
  }

  if (*s == '.') {
    d9f4:	0e 32       	cpi	r16, 0x2E	; 46
    d9f6:	11 f5       	brne	.+68     	; 0xda3c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    d9f8:	ef 01       	movw	r28, r30
    d9fa:	21 96       	adiw	r28, 0x01	; 1
    d9fc:	fe 01       	movw	r30, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    d9fe:	09 91       	ld	r16, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    da00:	80 ed       	ldi	r24, 0xD0	; 208
    da02:	80 0f       	add	r24, r16
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    da04:	8a 30       	cpi	r24, 0x0A	; 10
    da06:	d0 f4       	brcc	.+52     	; 0xda3c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    da08:	2c 3c       	cpi	r18, 0xCC	; 204
    da0a:	8c ec       	ldi	r24, 0xCC	; 204
    da0c:	38 07       	cpc	r19, r24
    da0e:	8c e0       	ldi	r24, 0x0C	; 12
    da10:	48 07       	cpc	r20, r24
    da12:	51 05       	cpc	r21, r1
    da14:	9c f7       	brge	.-26     	; 0xd9fc <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x8e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    da16:	aa e0       	ldi	r26, 0x0A	; 10
    da18:	b0 e0       	ldi	r27, 0x00	; 0
    da1a:	0e 94 d2 d3 	call	0x1a7a4	; 0x1a7a4 <__muluhisi3>
    da1e:	20 2f       	mov	r18, r16
    da20:	00 0f       	add	r16, r16
    da22:	33 0b       	sbc	r19, r19
    da24:	20 53       	subi	r18, 0x30	; 48
    da26:	31 09       	sbc	r19, r1
    da28:	03 2e       	mov	r0, r19
    da2a:	00 0c       	add	r0, r0
    da2c:	44 0b       	sbc	r20, r20
    da2e:	55 0b       	sbc	r21, r21
    da30:	26 0f       	add	r18, r22
    da32:	37 1f       	adc	r19, r23
    da34:	48 1f       	adc	r20, r24
    da36:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    da38:	fa 94       	dec	r15
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
    da3a:	e0 cf       	rjmp	.-64     	; 0xd9fc <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x8e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    da3c:	80 81       	ld	r24, Z
    da3e:	8f 7d       	andi	r24, 0xDF	; 223
    da40:	cf 2d       	mov	r28, r15
    da42:	ff 0c       	add	r15, r15
    da44:	dd 0b       	sbc	r29, r29
    da46:	85 34       	cpi	r24, 0x45	; 69
    da48:	09 f0       	breq	.+2      	; 0xda4c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xde>
    da4a:	65 c0       	rjmp	.+202    	; 0xdb16 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    da4c:	81 81       	ldd	r24, Z+1	; 0x01
    da4e:	8d 32       	cpi	r24, 0x2D	; 45
    da50:	31 f5       	brne	.+76     	; 0xda9e <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x130>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    da52:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    da54:	71 e0       	ldi	r23, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    da56:	90 e0       	ldi	r25, 0x00	; 0
    da58:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    da5a:	0a e0       	ldi	r16, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    da5c:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    da5e:	a0 ed       	ldi	r26, 0xD0	; 208
    da60:	a6 0f       	add	r26, r22
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    da62:	aa 30       	cpi	r26, 0x0A	; 10
    da64:	70 f5       	brcc	.+92     	; 0xdac2 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x154>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    da66:	08 9f       	mul	r16, r24
    da68:	d0 01       	movw	r26, r0
    da6a:	09 9f       	mul	r16, r25
    da6c:	b0 0d       	add	r27, r0
    da6e:	11 24       	eor	r1, r1
    da70:	86 2f       	mov	r24, r22
    da72:	66 0f       	add	r22, r22
    da74:	99 0b       	sbc	r25, r25
    da76:	c0 97       	sbiw	r24, 0x30	; 48
    da78:	8a 0f       	add	r24, r26
    da7a:	9b 1f       	adc	r25, r27
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    da7c:	dc 01       	movw	r26, r24
    da7e:	ac 0f       	add	r26, r28
    da80:	bd 1f       	adc	r27, r29
    da82:	97 97       	sbiw	r26, 0x27	; 39
    da84:	5c f3       	brlt	.-42     	; 0xda5c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xee>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    da86:	77 23       	and	r23, r23
    da88:	89 f0       	breq	.+34     	; 0xdaac <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    da8a:	60 e0       	ldi	r22, 0x00	; 0
    da8c:	70 e0       	ldi	r23, 0x00	; 0
    da8e:	80 e0       	ldi	r24, 0x00	; 0
    da90:	90 e8       	ldi	r25, 0x80	; 128
    da92:	11 11       	cpse	r17, r1
    da94:	3a c0       	rjmp	.+116    	; 0xdb0a <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
    da96:	60 e0       	ldi	r22, 0x00	; 0
    da98:	70 e0       	ldi	r23, 0x00	; 0
    da9a:	cb 01       	movw	r24, r22
    da9c:	36 c0       	rjmp	.+108    	; 0xdb0a <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    da9e:	8b 32       	cpi	r24, 0x2B	; 43
    daa0:	19 f0       	breq	.+6      	; 0xdaa8 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    daa2:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    daa4:	70 e0       	ldi	r23, 0x00	; 0
    daa6:	d7 cf       	rjmp	.-82     	; 0xda56 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xe8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    daa8:	32 96       	adiw	r30, 0x02	; 2
    daaa:	fc cf       	rjmp	.-8      	; 0xdaa4 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x136>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    daac:	60 e0       	ldi	r22, 0x00	; 0
    daae:	70 e0       	ldi	r23, 0x00	; 0
    dab0:	80 e8       	ldi	r24, 0x80	; 128
    dab2:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    dab4:	11 11       	cpse	r17, r1
    dab6:	29 c0       	rjmp	.+82     	; 0xdb0a <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    dab8:	60 e0       	ldi	r22, 0x00	; 0
    daba:	70 e0       	ldi	r23, 0x00	; 0
    dabc:	80 e8       	ldi	r24, 0x80	; 128
    dabe:	9f e7       	ldi	r25, 0x7F	; 127
    dac0:	24 c0       	rjmp	.+72     	; 0xdb0a <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    dac2:	77 23       	and	r23, r23
    dac4:	19 f0       	breq	.+6      	; 0xdacc <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x15e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81 (discriminator 1)
    dac6:	91 95       	neg	r25
    dac8:	81 95       	neg	r24
    daca:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    dacc:	c8 0f       	add	r28, r24
    dace:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    dad0:	ca 01       	movw	r24, r20
    dad2:	b9 01       	movw	r22, r18
    dad4:	0e 94 14 d2 	call	0x1a428	; 0x1a428 <__floatsisf>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    dad8:	1c 16       	cp	r1, r28
    dada:	1d 06       	cpc	r1, r29
    dadc:	fc f4       	brge	.+62     	; 0xdb1c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    dade:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    dae0:	c0 ff       	sbrs	r28, 0
    dae2:	0c c0       	rjmp	.+24     	; 0xdafc <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x18e>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    dae4:	24 e0       	ldi	r18, 0x04	; 4
    dae6:	02 9f       	mul	r16, r18
    dae8:	f0 01       	movw	r30, r0
    daea:	11 24       	eor	r1, r1
    daec:	e2 5e       	subi	r30, 0xE2	; 226
    daee:	fd 4f       	sbci	r31, 0xFD	; 253
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    daf0:	20 81       	ld	r18, Z
    daf2:	31 81       	ldd	r19, Z+1	; 0x01
    daf4:	42 81       	ldd	r20, Z+2	; 0x02
    daf6:	53 81       	ldd	r21, Z+3	; 0x03
    daf8:	0e 94 c9 d2 	call	0x1a592	; 0x1a592 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    dafc:	d5 95       	asr	r29
    dafe:	c7 95       	ror	r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    db00:	0f 5f       	subi	r16, 0xFF	; 255
    db02:	20 97       	sbiw	r28, 0x00	; 0
    db04:	69 f7       	brne	.-38     	; 0xdae0 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x172>
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    db06:	11 11       	cpse	r17, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87 (discriminator 1)
    db08:	90 58       	subi	r25, 0x80	; 128
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:88
}
    db0a:	df 91       	pop	r29
    db0c:	cf 91       	pop	r28
    db0e:	1f 91       	pop	r17
    db10:	0f 91       	pop	r16
    db12:	ff 90       	pop	r15
    db14:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    db16:	90 e0       	ldi	r25, 0x00	; 0
    db18:	80 e0       	ldi	r24, 0x00	; 0
    db1a:	d8 cf       	rjmp	.-80     	; 0xdacc <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x15e>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    db1c:	d1 95       	neg	r29
    db1e:	c1 95       	neg	r28
    db20:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    db22:	00 e0       	ldi	r16, 0x00	; 0
    db24:	20 97       	sbiw	r28, 0x00	; 0
    db26:	79 f3       	breq	.-34     	; 0xdb06 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x198>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    db28:	c0 ff       	sbrs	r28, 0
    db2a:	0c c0       	rjmp	.+24     	; 0xdb44 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1d6>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    db2c:	24 e0       	ldi	r18, 0x04	; 4
    db2e:	02 9f       	mul	r16, r18
    db30:	f0 01       	movw	r30, r0
    db32:	11 24       	eor	r1, r1
    db34:	ea 5f       	subi	r30, 0xFA	; 250
    db36:	fd 4f       	sbci	r31, 0xFD	; 253
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    db38:	20 81       	ld	r18, Z
    db3a:	31 81       	ldd	r19, Z+1	; 0x01
    db3c:	42 81       	ldd	r20, Z+2	; 0x02
    db3e:	53 81       	ldd	r21, Z+3	; 0x03
    db40:	0e 94 c9 d2 	call	0x1a592	; 0x1a592 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    db44:	d5 95       	asr	r29
    db46:	c7 95       	ror	r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    db48:	0f 5f       	subi	r16, 0xFF	; 255
    db4a:	ec cf       	rjmp	.-40     	; 0xdb24 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1b6>
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    db4c:	60 e0       	ldi	r22, 0x00	; 0
    db4e:	70 e0       	ldi	r23, 0x00	; 0
    db50:	80 e8       	ldi	r24, 0x80	; 128
    db52:	9f e3       	ldi	r25, 0x3F	; 63
    db54:	da cf       	rjmp	.-76     	; 0xdb0a <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    db56:	60 e0       	ldi	r22, 0x00	; 0
    db58:	70 e0       	ldi	r23, 0x00	; 0
    db5a:	80 ec       	ldi	r24, 0xC0	; 192
    db5c:	9f e7       	ldi	r25, 0x7F	; 127
    db5e:	d5 cf       	rjmp	.-86     	; 0xdb0a <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>

0000db60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    db60:	df 92       	push	r13
    db62:	ef 92       	push	r14
    db64:	ff 92       	push	r15
    db66:	0f 93       	push	r16
    db68:	1f 93       	push	r17
    db6a:	cf 93       	push	r28
    db6c:	df 93       	push	r29
    db6e:	ec 01       	movw	r28, r24
    db70:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC4EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    db72:	0c 81       	ldd	r16, Y+4	; 0x04
    db74:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    db76:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    db7a:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    db7c:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    db7e:	ce 01       	movw	r24, r28
    db80:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    db84:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    db86:	d8 16       	cp	r13, r24
    db88:	89 f1       	breq	.+98     	; 0xdbec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    db8a:	81 11       	cpse	r24, r1
    db8c:	0a c0       	rjmp	.+20     	; 0xdba2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    db8e:	81 e0       	ldi	r24, 0x01	; 1
    db90:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    db92:	df 91       	pop	r29
    db94:	cf 91       	pop	r28
    db96:	1f 91       	pop	r17
    db98:	0f 91       	pop	r16
    db9a:	ff 90       	pop	r15
    db9c:	ef 90       	pop	r14
    db9e:	df 90       	pop	r13
    dba0:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    dba2:	8c 35       	cpi	r24, 0x5C	; 92
    dba4:	d1 f4       	brne	.+52     	; 0xdbda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    dba6:	ce 01       	movw	r24, r28
    dba8:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    dbac:	88 23       	and	r24, r24
    dbae:	79 f3       	breq	.-34     	; 0xdb8e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    dbb0:	85 37       	cpi	r24, 0x75	; 117
    dbb2:	19 f4       	brne	.+6      	; 0xdbba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    dbb4:	84 e0       	ldi	r24, 0x04	; 4
    dbb6:	90 e0       	ldi	r25, 0x00	; 0
    dbb8:	ec cf       	rjmp	.-40     	; 0xdb92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
_ZN11ArduinoJson9Internals14EscapeSequence12unescapeCharEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    dbba:	e3 e9       	ldi	r30, 0x93	; 147
    dbbc:	f5 e0       	ldi	r31, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    dbbe:	90 81       	ld	r25, Z
    dbc0:	99 23       	and	r25, r25
    dbc2:	51 f0       	breq	.+20     	; 0xdbd8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    dbc4:	89 13       	cpse	r24, r25
    dbc6:	06 c0       	rjmp	.+12     	; 0xdbd4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    dbc8:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    dbca:	81 11       	cpse	r24, r1
    dbcc:	05 c0       	rjmp	.+10     	; 0xdbd8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    dbce:	82 e0       	ldi	r24, 0x02	; 2
    dbd0:	90 e0       	ldi	r25, 0x00	; 0
    dbd2:	df cf       	rjmp	.-66     	; 0xdb92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
_ZN11ArduinoJson9Internals14EscapeSequence12unescapeCharEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    dbd4:	32 96       	adiw	r30, 0x02	; 2
    dbd6:	f3 cf       	rjmp	.-26     	; 0xdbbe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    dbd8:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    dbda:	ec 81       	ldd	r30, Y+4	; 0x04
    dbdc:	fd 81       	ldd	r31, Y+5	; 0x05
    dbde:	9f 01       	movw	r18, r30
    dbe0:	2f 5f       	subi	r18, 0xFF	; 255
    dbe2:	3f 4f       	sbci	r19, 0xFF	; 255
    dbe4:	3d 83       	std	Y+5, r19	; 0x05
    dbe6:	2c 83       	std	Y+4, r18	; 0x04
    dbe8:	80 83       	st	Z, r24
    dbea:	c9 cf       	rjmp	.-110    	; 0xdb7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
_ZNK11ArduinoJson9Internals11StringMoverIcE6String5c_strEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    dbec:	ec 81       	ldd	r30, Y+4	; 0x04
    dbee:	fd 81       	ldd	r31, Y+5	; 0x05
    dbf0:	cf 01       	movw	r24, r30
    dbf2:	01 96       	adiw	r24, 0x01	; 1
    dbf4:	9d 83       	std	Y+5, r25	; 0x05
    dbf6:	8c 83       	std	Y+4, r24	; 0x04
    dbf8:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    dbfa:	f7 01       	movw	r30, r14
    dbfc:	11 83       	std	Z+1, r17	; 0x01
    dbfe:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    dc00:	83 e0       	ldi	r24, 0x03	; 3
    dc02:	90 e0       	ldi	r25, 0x00	; 0
    dc04:	01 2b       	or	r16, r17
    dc06:	29 f2       	breq	.-118    	; 0xdb92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    dc08:	90 e0       	ldi	r25, 0x00	; 0
    dc0a:	80 e0       	ldi	r24, 0x00	; 0
    dc0c:	c2 cf       	rjmp	.-124    	; 0xdb92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

0000dc0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    dc0e:	80 33       	cpi	r24, 0x30	; 48
    dc10:	9c f0       	brlt	.+38     	; 0xdc38 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    dc12:	8a 33       	cpi	r24, 0x3A	; 58
    dc14:	24 f0       	brlt	.+8      	; 0xdc1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    dc16:	8f 35       	cpi	r24, 0x5F	; 95
    dc18:	24 f0       	brlt	.+8      	; 0xdc22 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    dc1a:	8b 37       	cpi	r24, 0x7B	; 123
    dc1c:	24 f4       	brge	.+8      	; 0xdc26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    dc1e:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    dc20:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    dc22:	81 34       	cpi	r24, 0x41	; 65
    dc24:	4c f0       	brlt	.+18     	; 0xdc38 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    dc26:	8b 35       	cpi	r24, 0x5B	; 91
    dc28:	d4 f3       	brlt	.-12     	; 0xdc1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    dc2a:	93 ed       	ldi	r25, 0xD3	; 211
    dc2c:	98 0f       	add	r25, r24
    dc2e:	81 e0       	ldi	r24, 0x01	; 1
    dc30:	92 30       	cpi	r25, 0x02	; 2
    dc32:	b0 f3       	brcs	.-20     	; 0xdc20 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    dc34:	80 e0       	ldi	r24, 0x00	; 0
    dc36:	08 95       	ret
    dc38:	8b 32       	cpi	r24, 0x2B	; 43
    dc3a:	b9 f7       	brne	.-18     	; 0xdc2a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    dc3c:	f0 cf       	rjmp	.-32     	; 0xdc1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

0000dc3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:236
    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    dc3e:	8f 92       	push	r8
    dc40:	9f 92       	push	r9
    dc42:	af 92       	push	r10
    dc44:	bf 92       	push	r11
    dc46:	cf 92       	push	r12
    dc48:	df 92       	push	r13
    dc4a:	ef 92       	push	r14
    dc4c:	ff 92       	push	r15
    dc4e:	0f 93       	push	r16
    dc50:	1f 93       	push	r17
    dc52:	cf 93       	push	r28
    dc54:	df 93       	push	r29
    dc56:	cd b7       	in	r28, 0x3d	; 61
    dc58:	de b7       	in	r29, 0x3e	; 62
    dc5a:	c0 54       	subi	r28, 0x40	; 64
    dc5c:	d1 09       	sbc	r29, r1
    dc5e:	0f b6       	in	r0, 0x3f	; 63
    dc60:	f8 94       	cli
    dc62:	de bf       	out	0x3e, r29	; 62
    dc64:	0f be       	out	0x3f, r0	; 63
    dc66:	cd bf       	out	0x3d, r28	; 61
    dc68:	5c 01       	movw	r10, r24
    dc6a:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    dc6c:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    dc70:	c8 2e       	mov	r12, r24
    dc72:	ce 01       	movw	r24, r28
    dc74:	01 96       	adiw	r24, 0x01	; 1
    dc76:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    dc78:	d1 2c       	mov	r13, r1
    dc7a:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    dc7c:	8c 2d       	mov	r24, r12
    dc7e:	0e 94 07 6e 	call	0xdc0e	; 0xdc0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    dc82:	88 23       	and	r24, r24
    dc84:	71 f0       	breq	.+28     	; 0xdca2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x64>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241 (discriminator 1)
    dc86:	9f e3       	ldi	r25, 0x3F	; 63
    dc88:	d9 16       	cp	r13, r25
    dc8a:	59 f0       	breq	.+22     	; 0xdca2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x64>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    dc8c:	f5 01       	movw	r30, r10
    dc8e:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    dc90:	d3 94       	inc	r13
    dc92:	f4 01       	movw	r30, r8
    dc94:	c1 92       	st	Z+, r12
    dc96:	4f 01       	movw	r8, r30
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    dc98:	c5 01       	movw	r24, r10
    dc9a:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    dc9e:	c8 2e       	mov	r12, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241
  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    dca0:	ed cf       	rjmp	.-38     	; 0xdc7c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    dca2:	f7 01       	movw	r30, r14
    dca4:	ed 0d       	add	r30, r13
    dca6:	f1 1d       	adc	r31, r1
    dca8:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    dcaa:	89 81       	ldd	r24, Y+1	; 0x01
    dcac:	88 23       	and	r24, r24
    dcae:	09 f4       	brne	.+2      	; 0xdcb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x74>
    dcb0:	56 c0       	rjmp	.+172    	; 0xdd5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x120>
_ZN11ArduinoJson9Internals6issignEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    dcb2:	8d 32       	cpi	r24, 0x2D	; 45
    dcb4:	19 f0       	breq	.+6      	; 0xdcbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x7e>
    dcb6:	f7 01       	movw	r30, r14
    dcb8:	8b 32       	cpi	r24, 0x2B	; 43
    dcba:	11 f4       	brne	.+4      	; 0xdcc0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x82>
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    dcbc:	fe 01       	movw	r30, r28
    dcbe:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
  while (isdigit(*s)) s++;
    dcc0:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    dcc2:	20 ed       	ldi	r18, 0xD0	; 208
    dcc4:	29 0f       	add	r18, r25
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    dcc6:	2a 30       	cpi	r18, 0x0A	; 10
    dcc8:	d8 f3       	brcs	.-10     	; 0xdcc0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x82>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    dcca:	91 11       	cpse	r25, r1
    dccc:	48 c0       	rjmp	.+144    	; 0xdd5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x120>
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    dcce:	84 37       	cpi	r24, 0x74	; 116
    dcd0:	09 f4       	brne	.+2      	; 0xdcd4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x96>
    dcd2:	a4 c0       	rjmp	.+328    	; 0xde1c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    dcd4:	8b 32       	cpi	r24, 0x2B	; 43
    dcd6:	51 f0       	breq	.+20     	; 0xdcec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    dcd8:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    dcda:	8d 32       	cpi	r24, 0x2D	; 45
    dcdc:	61 f4       	brne	.+24     	; 0xdcf6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xb8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
    case '-':
      negative_result = true;
    dcde:	dd 24       	eor	r13, r13
    dce0:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
      s++;
    dce2:	7e 01       	movw	r14, r28
    dce4:	82 e0       	ldi	r24, 0x02	; 2
    dce6:	e8 0e       	add	r14, r24
    dce8:	f1 1c       	adc	r15, r1
    dcea:	05 c0       	rjmp	.+10     	; 0xdcf6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xb8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    dcec:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    dcee:	7e 01       	movw	r14, r28
    dcf0:	f2 e0       	ldi	r31, 0x02	; 2
    dcf2:	ef 0e       	add	r14, r31
    dcf4:	f1 1c       	adc	r15, r1
    dcf6:	f7 01       	movw	r30, r14
    dcf8:	20 e0       	ldi	r18, 0x00	; 0
    dcfa:	30 e0       	ldi	r19, 0x00	; 0
    dcfc:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
      break;
  }

  while (isdigit(*s)) {
    dcfe:	f1 90       	ld	r15, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    dd00:	80 ed       	ldi	r24, 0xD0	; 208
    dd02:	8f 0d       	add	r24, r15
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    dd04:	8a 30       	cpi	r24, 0x0A	; 10
    dd06:	90 f4       	brcc	.+36     	; 0xdd2c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xee>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    dd08:	aa e0       	ldi	r26, 0x0A	; 10
    dd0a:	b0 e0       	ldi	r27, 0x00	; 0
    dd0c:	0e 94 d2 d3 	call	0x1a7a4	; 0x1a7a4 <__muluhisi3>
    dd10:	2f 2d       	mov	r18, r15
    dd12:	ff 0c       	add	r15, r15
    dd14:	33 0b       	sbc	r19, r19
    dd16:	20 53       	subi	r18, 0x30	; 48
    dd18:	31 09       	sbc	r19, r1
    dd1a:	03 2e       	mov	r0, r19
    dd1c:	00 0c       	add	r0, r0
    dd1e:	44 0b       	sbc	r20, r20
    dd20:	55 0b       	sbc	r21, r21
    dd22:	26 0f       	add	r18, r22
    dd24:	37 1f       	adc	r19, r23
    dd26:	48 1f       	adc	r20, r24
    dd28:	59 1f       	adc	r21, r25
    dd2a:	e9 cf       	rjmp	.-46     	; 0xdcfe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xc0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    dd2c:	dd 20       	and	r13, r13
    dd2e:	09 f4       	brne	.+2      	; 0xdd32 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xf4>
    dd30:	79 c0       	rjmp	.+242    	; 0xde24 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1e6>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    dd32:	01 15       	cp	r16, r1
    dd34:	11 05       	cpc	r17, r1
    dd36:	81 f0       	breq	.+32     	; 0xdd58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    dd38:	87 e0       	ldi	r24, 0x07	; 7
    dd3a:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    dd3c:	21 15       	cp	r18, r1
    dd3e:	31 05       	cpc	r19, r1
    dd40:	41 05       	cpc	r20, r1
    dd42:	51 05       	cpc	r21, r1
    dd44:	11 f4       	brne	.+4      	; 0xdd4a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x10c>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    dd46:	86 e0       	ldi	r24, 0x06	; 6
    dd48:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    dd4a:	f8 01       	movw	r30, r16
    dd4c:	91 83       	std	Z+1, r25	; 0x01
    dd4e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    dd50:	22 83       	std	Z+2, r18	; 0x02
    dd52:	33 83       	std	Z+3, r19	; 0x03
    dd54:	44 83       	std	Z+4, r20	; 0x04
    dd56:	55 83       	std	Z+5, r21	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    dd58:	90 e0       	ldi	r25, 0x00	; 0
    dd5a:	80 e0       	ldi	r24, 0x00	; 0
    dd5c:	4b c0       	rjmp	.+150    	; 0xddf4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1b6>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
    }
    buffer[n] = 0;

    if (isInteger(buffer)) {
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    dd5e:	c7 01       	movw	r24, r14
    dd60:	0e 94 df 35 	call	0x6bbe	; 0x6bbe <ArduinoJson::Internals::isFloat(char const*)>
    dd64:	88 23       	and	r24, r24
    dd66:	81 f0       	breq	.+32     	; 0xdd88 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x14a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:251
      result.set(parseFloat<JsonFloat>(buffer));
    dd68:	c7 01       	movw	r24, r14
    dd6a:	0e 94 b7 6c 	call	0xd96e	; 0xd96e <float ArduinoJson::Internals::parseFloat<float>(char const*)>
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    dd6e:	01 15       	cp	r16, r1
    dd70:	11 05       	cpc	r17, r1
    dd72:	91 f3       	breq	.-28     	; 0xdd58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    dd74:	2a e0       	ldi	r18, 0x0A	; 10
    dd76:	30 e0       	ldi	r19, 0x00	; 0
    dd78:	f8 01       	movw	r30, r16
    dd7a:	31 83       	std	Z+1, r19	; 0x01
    dd7c:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    dd7e:	62 83       	std	Z+2, r22	; 0x02
    dd80:	73 83       	std	Z+3, r23	; 0x03
    dd82:	84 83       	std	Z+4, r24	; 0x04
    dd84:	95 83       	std	Z+5, r25	; 0x05
    dd86:	e8 cf       	rjmp	.-48     	; 0xdd58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
    } else if (!strcmp(buffer, "true")) {
    dd88:	6e e9       	ldi	r22, 0x9E	; 158
    dd8a:	75 e0       	ldi	r23, 0x05	; 5
    dd8c:	c7 01       	movw	r24, r14
    dd8e:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    dd92:	89 2b       	or	r24, r25
    dd94:	89 f4       	brne	.+34     	; 0xddb8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x17a>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    dd96:	01 15       	cp	r16, r1
    dd98:	11 05       	cpc	r17, r1
    dd9a:	f1 f2       	breq	.-68     	; 0xdd58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    dd9c:	85 e0       	ldi	r24, 0x05	; 5
    dd9e:	90 e0       	ldi	r25, 0x00	; 0
    dda0:	f8 01       	movw	r30, r16
    dda2:	91 83       	std	Z+1, r25	; 0x01
    dda4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    dda6:	81 e0       	ldi	r24, 0x01	; 1
    dda8:	90 e0       	ldi	r25, 0x00	; 0
    ddaa:	a0 e0       	ldi	r26, 0x00	; 0
    ddac:	b0 e0       	ldi	r27, 0x00	; 0
    ddae:	82 83       	std	Z+2, r24	; 0x02
    ddb0:	93 83       	std	Z+3, r25	; 0x03
    ddb2:	a4 83       	std	Z+4, r26	; 0x04
    ddb4:	b5 83       	std	Z+5, r27	; 0x05
    ddb6:	d0 cf       	rjmp	.-96     	; 0xdd58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    ddb8:	63 ea       	ldi	r22, 0xA3	; 163
    ddba:	75 e0       	ldi	r23, 0x05	; 5
    ddbc:	c7 01       	movw	r24, r14
    ddbe:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    ddc2:	89 2b       	or	r24, r25
    ddc4:	69 f4       	brne	.+26     	; 0xdde0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1a2>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    ddc6:	01 15       	cp	r16, r1
    ddc8:	11 05       	cpc	r17, r1
    ddca:	31 f2       	breq	.-116    	; 0xdd58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    ddcc:	85 e0       	ldi	r24, 0x05	; 5
    ddce:	90 e0       	ldi	r25, 0x00	; 0
    ddd0:	f8 01       	movw	r30, r16
    ddd2:	91 83       	std	Z+1, r25	; 0x01
    ddd4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    ddd6:	12 82       	std	Z+2, r1	; 0x02
    ddd8:	13 82       	std	Z+3, r1	; 0x03
    ddda:	14 82       	std	Z+4, r1	; 0x04
    dddc:	15 82       	std	Z+5, r1	; 0x05
    ddde:	bc cf       	rjmp	.-136    	; 0xdd58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    dde0:	69 ea       	ldi	r22, 0xA9	; 169
    dde2:	75 e0       	ldi	r23, 0x05	; 5
    dde4:	c7 01       	movw	r24, r14
    dde6:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    ddea:	89 2b       	or	r24, r25
    ddec:	09 f4       	brne	.+2      	; 0xddf0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1b2>
    ddee:	b4 cf       	rjmp	.-152    	; 0xdd58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    ddf0:	82 e0       	ldi	r24, 0x02	; 2
    ddf2:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:262
    }
    return DeserializationError::Ok;
  }
    ddf4:	c0 5c       	subi	r28, 0xC0	; 192
    ddf6:	df 4f       	sbci	r29, 0xFF	; 255
    ddf8:	0f b6       	in	r0, 0x3f	; 63
    ddfa:	f8 94       	cli
    ddfc:	de bf       	out	0x3e, r29	; 62
    ddfe:	0f be       	out	0x3f, r0	; 63
    de00:	cd bf       	out	0x3d, r28	; 61
    de02:	df 91       	pop	r29
    de04:	cf 91       	pop	r28
    de06:	1f 91       	pop	r17
    de08:	0f 91       	pop	r16
    de0a:	ff 90       	pop	r15
    de0c:	ef 90       	pop	r14
    de0e:	df 90       	pop	r13
    de10:	cf 90       	pop	r12
    de12:	bf 90       	pop	r11
    de14:	af 90       	pop	r10
    de16:	9f 90       	pop	r9
    de18:	8f 90       	pop	r8
    de1a:	08 95       	ret
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    de1c:	21 e0       	ldi	r18, 0x01	; 1
    de1e:	30 e0       	ldi	r19, 0x00	; 0
    de20:	40 e0       	ldi	r20, 0x00	; 0
    de22:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    de24:	01 15       	cp	r16, r1
    de26:	11 05       	cpc	r17, r1
    de28:	09 f0       	breq	.+2      	; 0xde2c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1ee>
    de2a:	8d cf       	rjmp	.-230    	; 0xdd46 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x108>
    de2c:	95 cf       	rjmp	.-214    	; 0xdd58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>

0000de2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE8parseKeyEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:166
    } else {
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    de2e:	cf 92       	push	r12
    de30:	df 92       	push	r13
    de32:	ef 92       	push	r14
    de34:	ff 92       	push	r15
    de36:	1f 93       	push	r17
    de38:	cf 93       	push	r28
    de3a:	df 93       	push	r29
    de3c:	ec 01       	movw	r28, r24
    de3e:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
    if (isQuote(current())) {
    de40:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7isQuoteEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    de44:	87 32       	cpi	r24, 0x27	; 39
    de46:	a1 f0       	breq	.+40     	; 0xde70 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x42>
    de48:	82 32       	cpi	r24, 0x22	; 34
    de4a:	91 f0       	breq	.+36     	; 0xde70 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x42>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC4EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    de4c:	ec 80       	ldd	r14, Y+4	; 0x04
    de4e:	fd 80       	ldd	r15, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    de50:	ce 01       	movw	r24, r28
    de52:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    de56:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    de58:	81 11       	cpse	r24, r1
    de5a:	15 c0       	rjmp	.+42     	; 0xde86 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x58>
    de5c:	81 e0       	ldi	r24, 0x01	; 1
    de5e:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE8parseKeyEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:172
    if (isQuote(current())) {
      return parseQuotedString(key);
    } else {
      return parseNonQuotedString(key);
    }
  }
    de60:	df 91       	pop	r29
    de62:	cf 91       	pop	r28
    de64:	1f 91       	pop	r17
    de66:	ff 90       	pop	r15
    de68:	ef 90       	pop	r14
    de6a:	df 90       	pop	r13
    de6c:	cf 90       	pop	r12
    de6e:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    de70:	b6 01       	movw	r22, r12
    de72:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:172
    } else {
      return parseNonQuotedString(key);
    }
  }
    de74:	df 91       	pop	r29
    de76:	cf 91       	pop	r28
    de78:	1f 91       	pop	r17
    de7a:	ff 90       	pop	r15
    de7c:	ef 90       	pop	r14
    de7e:	df 90       	pop	r13
    de80:	cf 90       	pop	r12
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    de82:	0c 94 b0 6d 	jmp	0xdb60	; 0xdb60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    de86:	0e 94 07 6e 	call	0xdc0e	; 0xdc0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    de8a:	88 23       	and	r24, r24
    de8c:	09 f1       	breq	.+66     	; 0xded0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0xa2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    de8e:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    de90:	ec 81       	ldd	r30, Y+4	; 0x04
    de92:	fd 81       	ldd	r31, Y+5	; 0x05
    de94:	cf 01       	movw	r24, r30
    de96:	01 96       	adiw	r24, 0x01	; 1
    de98:	9d 83       	std	Y+5, r25	; 0x05
    de9a:	8c 83       	std	Y+4, r24	; 0x04
    de9c:	10 83       	st	Z, r17
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    de9e:	ce 01       	movw	r24, r28
    dea0:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    dea4:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    dea6:	0e 94 07 6e 	call	0xdc0e	; 0xdc0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    deaa:	81 11       	cpse	r24, r1
    deac:	f0 cf       	rjmp	.-32     	; 0xde8e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x60>
_ZNK11ArduinoJson9Internals11StringMoverIcE6String5c_strEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    deae:	ec 81       	ldd	r30, Y+4	; 0x04
    deb0:	fd 81       	ldd	r31, Y+5	; 0x05
    deb2:	cf 01       	movw	r24, r30
    deb4:	01 96       	adiw	r24, 0x01	; 1
    deb6:	9d 83       	std	Y+5, r25	; 0x05
    deb8:	8c 83       	std	Y+4, r24	; 0x04
    deba:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    debc:	f6 01       	movw	r30, r12
    debe:	f1 82       	std	Z+1, r15	; 0x01
    dec0:	e0 82       	st	Z, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:233
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
    dec2:	90 e0       	ldi	r25, 0x00	; 0
    dec4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    dec6:	ef 28       	or	r14, r15
    dec8:	59 f6       	brne	.-106    	; 0xde60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>
    deca:	83 e0       	ldi	r24, 0x03	; 3
    decc:	90 e0       	ldi	r25, 0x00	; 0
    dece:	c8 cf       	rjmp	.-112    	; 0xde60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:228
        move();
        str.append(c);
        c = current();
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
    ded0:	82 e0       	ldi	r24, 0x02	; 2
    ded2:	90 e0       	ldi	r25, 0x00	; 0
    ded4:	c5 cf       	rjmp	.-118    	; 0xde60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>

0000ded6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:106
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    ded6:	3f 92       	push	r3
    ded8:	4f 92       	push	r4
    deda:	5f 92       	push	r5
    dedc:	6f 92       	push	r6
    dede:	7f 92       	push	r7
    dee0:	8f 92       	push	r8
    dee2:	9f 92       	push	r9
    dee4:	af 92       	push	r10
    dee6:	bf 92       	push	r11
    dee8:	cf 92       	push	r12
    deea:	df 92       	push	r13
    deec:	ef 92       	push	r14
    deee:	ff 92       	push	r15
    def0:	0f 93       	push	r16
    def2:	1f 93       	push	r17
    def4:	cf 93       	push	r28
    def6:	df 93       	push	r29
    def8:	1f 92       	push	r1
    defa:	1f 92       	push	r1
    defc:	cd b7       	in	r28, 0x3d	; 61
    defe:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    df00:	dc 01       	movw	r26, r24
    df02:	16 96       	adiw	r26, 0x06	; 6
    df04:	2c 91       	ld	r18, X
    df06:	16 97       	sbiw	r26, 0x06	; 6
    df08:	21 11       	cpse	r18, r1
    df0a:	16 c0       	rjmp	.+44     	; 0xdf38 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x62>
    df0c:	85 e0       	ldi	r24, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    df0e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:156

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;
    }
  }
    df10:	0f 90       	pop	r0
    df12:	0f 90       	pop	r0
    df14:	df 91       	pop	r29
    df16:	cf 91       	pop	r28
    df18:	1f 91       	pop	r17
    df1a:	0f 91       	pop	r16
    df1c:	ff 90       	pop	r15
    df1e:	ef 90       	pop	r14
    df20:	df 90       	pop	r13
    df22:	cf 90       	pop	r12
    df24:	bf 90       	pop	r11
    df26:	af 90       	pop	r10
    df28:	9f 90       	pop	r9
    df2a:	8f 90       	pop	r8
    df2c:	7f 90       	pop	r7
    df2e:	6f 90       	pop	r6
    df30:	5f 90       	pop	r5
    df32:	4f 90       	pop	r4
    df34:	3f 90       	pop	r3
    df36:	08 95       	ret
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    df38:	6b 01       	movw	r12, r22
    df3a:	61 15       	cp	r22, r1
    df3c:	71 05       	cpc	r23, r1
    df3e:	11 f4       	brne	.+4      	; 0xdf44 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x6e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    df40:	83 e0       	ldi	r24, 0x03	; 3
    df42:	e5 cf       	rjmp	.-54     	; 0xdf0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
    df44:	8c 01       	movw	r16, r24
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    df46:	89 e0       	ldi	r24, 0x09	; 9
    df48:	90 e0       	ldi	r25, 0x00	; 0
    df4a:	fb 01       	movw	r30, r22
    df4c:	91 83       	std	Z+1, r25	; 0x01
    df4e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    df50:	13 82       	std	Z+3, r1	; 0x03
    df52:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    df54:	15 82       	std	Z+5, r1	; 0x05
    df56:	14 82       	std	Z+4, r1	; 0x04
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    df58:	4b 01       	movw	r8, r22
    df5a:	f2 e0       	ldi	r31, 0x02	; 2
    df5c:	8f 0e       	add	r8, r31
    df5e:	91 1c       	adc	r9, r1
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    df60:	7a 01       	movw	r14, r20
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    df62:	cd 01       	movw	r24, r26
    df64:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    df68:	8b 37       	cpi	r24, 0x7B	; 123
    df6a:	11 f0       	breq	.+4      	; 0xdf70 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x9a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:132
      if (err) return err;

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;
    df6c:	82 e0       	ldi	r24, 0x02	; 2
    df6e:	cf cf       	rjmp	.-98     	; 0xdf0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    df70:	d8 01       	movw	r26, r16
    df72:	18 96       	adiw	r26, 0x08	; 8
    df74:	1c 92       	st	X, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    df76:	c8 01       	movw	r24, r16
    df78:	0e 94 74 6c 	call	0xd8e8	; 0xd8e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    df7c:	00 97       	sbiw	r24, 0x00	; 0
    df7e:	41 f6       	brne	.-112    	; 0xdf10 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    df80:	c8 01       	movw	r24, r16
    df82:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    df86:	8d 37       	cpi	r24, 0x7D	; 125
    df88:	09 f4       	brne	.+2      	; 0xdf8c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xb6>
    df8a:	4b c0       	rjmp	.+150    	; 0xe022 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x14c>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    df8c:	8c e0       	ldi	r24, 0x0C	; 12
    df8e:	38 2e       	mov	r3, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:126

    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
    df90:	be 01       	movw	r22, r28
    df92:	6f 5f       	subi	r22, 0xFF	; 255
    df94:	7f 4f       	sbci	r23, 0xFF	; 255
    df96:	c8 01       	movw	r24, r16
    df98:	0e 94 17 6f 	call	0xde2e	; 0xde2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
      if (err) return err;
    df9c:	00 97       	sbiw	r24, 0x00	; 0
    df9e:	09 f0       	breq	.+2      	; 0xdfa2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xcc>
    dfa0:	b7 cf       	rjmp	.-146    	; 0xdf10 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    dfa2:	c8 01       	movw	r24, r16
    dfa4:	0e 94 74 6c 	call	0xd8e8	; 0xd8e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    dfa8:	00 97       	sbiw	r24, 0x00	; 0
    dfaa:	09 f0       	breq	.+2      	; 0xdfae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xd8>
    dfac:	b1 cf       	rjmp	.-158    	; 0xdf10 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    dfae:	c8 01       	movw	r24, r16
    dfb0:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    dfb4:	8a 33       	cpi	r24, 0x3A	; 58
    dfb6:	d1 f6       	brne	.-76     	; 0xdf6c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x96>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    dfb8:	d8 01       	movw	r26, r16
    dfba:	18 96       	adiw	r26, 0x08	; 8
    dfbc:	1c 92       	st	X, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    dfbe:	a9 80       	ldd	r10, Y+1	; 0x01
    dfc0:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    dfc2:	a1 14       	cp	r10, r1
    dfc4:	b1 04       	cpc	r11, r1
    dfc6:	89 f5       	brne	.+98     	; 0xe02a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x154>
    dfc8:	90 e0       	ldi	r25, 0x00	; 0
    dfca:	80 e0       	ldi	r24, 0x00	; 0
    dfcc:	30 e0       	ldi	r19, 0x00	; 0
    dfce:	20 e0       	ldi	r18, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    dfd0:	43 2e       	mov	r4, r19
    dfd2:	52 2e       	mov	r5, r18
    dfd4:	3c 01       	movw	r6, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    dfd6:	89 2b       	or	r24, r25
    dfd8:	09 f4       	brne	.+2      	; 0xdfdc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x106>
    dfda:	b2 cf       	rjmp	.-156    	; 0xdf40 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x6a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    dfdc:	d8 01       	movw	r26, r16
    dfde:	16 96       	adiw	r26, 0x06	; 6
    dfe0:	8c 91       	ld	r24, X
    dfe2:	16 97       	sbiw	r26, 0x06	; 6
    dfe4:	81 50       	subi	r24, 0x01	; 1
    dfe6:	16 96       	adiw	r26, 0x06	; 6
    dfe8:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    dfea:	b3 01       	movw	r22, r6
    dfec:	a2 01       	movw	r20, r4
    dfee:	c8 01       	movw	r24, r16
    dff0:	0e 94 5f 70 	call	0xe0be	; 0xe0be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    dff4:	f8 01       	movw	r30, r16
    dff6:	26 81       	ldd	r18, Z+6	; 0x06
    dff8:	2f 5f       	subi	r18, 0xFF	; 255
    dffa:	26 83       	std	Z+6, r18	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    dffc:	00 97       	sbiw	r24, 0x00	; 0
    dffe:	09 f0       	breq	.+2      	; 0xe002 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x12c>
    e000:	87 cf       	rjmp	.-242    	; 0xdf10 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    e002:	c8 01       	movw	r24, r16
    e004:	0e 94 74 6c 	call	0xd8e8	; 0xd8e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    e008:	00 97       	sbiw	r24, 0x00	; 0
    e00a:	09 f0       	breq	.+2      	; 0xe00e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x138>
    e00c:	81 cf       	rjmp	.-254    	; 0xdf10 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e00e:	c8 01       	movw	r24, r16
    e010:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e014:	8d 37       	cpi	r24, 0x7D	; 125
    e016:	09 f0       	breq	.+2      	; 0xe01a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x144>
    e018:	43 c0       	rjmp	.+134    	; 0xe0a0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1ca>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e01a:	d8 01       	movw	r26, r16
    e01c:	18 96       	adiw	r26, 0x08	; 8
    e01e:	1c 92       	st	X, r1
    e020:	02 c0       	rjmp	.+4      	; 0xe026 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x150>
    e022:	f8 01       	movw	r30, r16
    e024:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:149
      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;

      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
    e026:	80 e0       	ldi	r24, 0x00	; 0
    e028:	72 cf       	rjmp	.-284    	; 0xdf0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    e02a:	b5 01       	movw	r22, r10
    e02c:	c4 01       	movw	r24, r8
    e02e:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    e032:	00 97       	sbiw	r24, 0x00	; 0
    e034:	49 f5       	brne	.+82     	; 0xe088 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1b2>
_ZN11ArduinoJson9Internals21AllocableInMemoryPoolnwEjPNS0_10MemoryPoolE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    e036:	d7 01       	movw	r26, r14
    e038:	ed 91       	ld	r30, X+
    e03a:	fc 91       	ld	r31, X
    e03c:	01 90       	ld	r0, Z+
    e03e:	f0 81       	ld	r31, Z
    e040:	e0 2d       	mov	r30, r0
    e042:	6c e0       	ldi	r22, 0x0C	; 12
    e044:	70 e0       	ldi	r23, 0x00	; 0
    e046:	c7 01       	movw	r24, r14
    e048:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    e04a:	00 97       	sbiw	r24, 0x00	; 0
    e04c:	09 f4       	brne	.+2      	; 0xe050 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x17a>
    e04e:	bc cf       	rjmp	.-136    	; 0xdfc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xf2>
    e050:	fc 01       	movw	r30, r24
    e052:	23 2d       	mov	r18, r3
    e054:	11 92       	st	Z+, r1
    e056:	2a 95       	dec	r18
    e058:	e9 f7       	brne	.-6      	; 0xe054 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x17e>
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    e05a:	dc 01       	movw	r26, r24
    e05c:	1d 92       	st	X+, r1
    e05e:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    e060:	d6 01       	movw	r26, r12
    e062:	14 96       	adiw	r26, 0x04	; 4
    e064:	ed 91       	ld	r30, X+
    e066:	fc 91       	ld	r31, X
    e068:	15 97       	sbiw	r26, 0x05	; 5
    e06a:	30 97       	sbiw	r30, 0x00	; 0
    e06c:	81 f0       	breq	.+32     	; 0xe08e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    e06e:	dc 01       	movw	r26, r24
    e070:	19 96       	adiw	r26, 0x09	; 9
    e072:	fc 93       	st	X, r31
    e074:	ee 93       	st	-X, r30
    e076:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    e078:	97 83       	std	Z+7, r25	; 0x07
    e07a:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    e07c:	f6 01       	movw	r30, r12
    e07e:	95 83       	std	Z+5, r25	; 0x05
    e080:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    e082:	fc 01       	movw	r30, r24
    e084:	b3 86       	std	Z+11, r11	; 0x0b
    e086:	a2 86       	std	Z+10, r10	; 0x0a
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
    e088:	3e 2d       	mov	r19, r14
    e08a:	2f 2d       	mov	r18, r15
    e08c:	a1 cf       	rjmp	.-190    	; 0xdfd0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xfa>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    e08e:	13 96       	adiw	r26, 0x03	; 3
    e090:	9c 93       	st	X, r25
    e092:	8e 93       	st	-X, r24
    e094:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    e096:	15 96       	adiw	r26, 0x05	; 5
    e098:	9c 93       	st	X, r25
    e09a:	8e 93       	st	-X, r24
    e09c:	14 97       	sbiw	r26, 0x04	; 4
    e09e:	f1 cf       	rjmp	.-30     	; 0xe082 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1ac>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e0a0:	c8 01       	movw	r24, r16
    e0a2:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e0a6:	8c 32       	cpi	r24, 0x2C	; 44
    e0a8:	09 f0       	breq	.+2      	; 0xe0ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1d6>
    e0aa:	60 cf       	rjmp	.-320    	; 0xdf6c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x96>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e0ac:	f8 01       	movw	r30, r16
    e0ae:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    e0b0:	c8 01       	movw	r24, r16
    e0b2:	0e 94 74 6c 	call	0xd8e8	; 0xd8e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    e0b6:	00 97       	sbiw	r24, 0x00	; 0
    e0b8:	09 f4       	brne	.+2      	; 0xe0bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1e6>
    e0ba:	6a cf       	rjmp	.-300    	; 0xdf90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xba>
    e0bc:	29 cf       	rjmp	.-430    	; 0xdf10 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>

0000e0be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    e0be:	8f 92       	push	r8
    e0c0:	9f 92       	push	r9
    e0c2:	af 92       	push	r10
    e0c4:	bf 92       	push	r11
    e0c6:	ef 92       	push	r14
    e0c8:	ff 92       	push	r15
    e0ca:	0f 93       	push	r16
    e0cc:	1f 93       	push	r17
    e0ce:	cf 93       	push	r28
    e0d0:	df 93       	push	r29
    e0d2:	1f 92       	push	r1
    e0d4:	1f 92       	push	r1
    e0d6:	cd b7       	in	r28, 0x3d	; 61
    e0d8:	de b7       	in	r29, 0x3e	; 62
    e0da:	8c 01       	movw	r16, r24
    e0dc:	4a 01       	movw	r8, r20
    e0de:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    e0e0:	0e 94 74 6c 	call	0xd8e8	; 0xd8e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    e0e4:	00 97       	sbiw	r24, 0x00	; 0
    e0e6:	e1 f4       	brne	.+56     	; 0xe120 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    e0e8:	c8 01       	movw	r24, r16
    e0ea:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e0ee:	8b 35       	cpi	r24, 0x5B	; 91
    e0f0:	91 f0       	breq	.+36     	; 0xe116 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58>
    e0f2:	8b 37       	cpi	r24, 0x7B	; 123
    e0f4:	11 f1       	breq	.+68     	; 0xe13a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7c>
    e0f6:	75 01       	movw	r14, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    e0f8:	c8 01       	movw	r24, r16
    e0fa:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7isQuoteEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    e0fe:	87 32       	cpi	r24, 0x27	; 39
    e100:	11 f1       	breq	.+68     	; 0xe146 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    e102:	82 32       	cpi	r24, 0x22	; 34
    e104:	01 f1       	breq	.+64     	; 0xe146 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:162

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
      return parseStringValue(variant);
    } else {
      return parseNumericValue(variant);
    e106:	b5 01       	movw	r22, r10
    e108:	a4 01       	movw	r20, r8
    e10a:	c8 01       	movw	r24, r16
    e10c:	0e 94 1f 6e 	call	0xdc3e	; 0xdc3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)>
    e110:	9c 01       	movw	r18, r24
    e112:	c9 01       	movw	r24, r18
    e114:	05 c0       	rjmp	.+10     	; 0xe120 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:34
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    switch (current()) {
      case '[':
        return parseArray(variant);
    e116:	b5 01       	movw	r22, r10
    e118:	a4 01       	movw	r20, r8
    e11a:	c8 01       	movw	r24, r16
    e11c:	0e 94 bb 70 	call	0xe176	; 0xe176 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    e120:	0f 90       	pop	r0
    e122:	0f 90       	pop	r0
    e124:	df 91       	pop	r29
    e126:	cf 91       	pop	r28
    e128:	1f 91       	pop	r17
    e12a:	0f 91       	pop	r16
    e12c:	ff 90       	pop	r15
    e12e:	ef 90       	pop	r14
    e130:	bf 90       	pop	r11
    e132:	af 90       	pop	r10
    e134:	9f 90       	pop	r9
    e136:	8f 90       	pop	r8
    e138:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:37
    switch (current()) {
      case '[':
        return parseArray(variant);

      case '{':
        return parseObject(variant);
    e13a:	b5 01       	movw	r22, r10
    e13c:	a4 01       	movw	r20, r8
    e13e:	c8 01       	movw	r24, r16
    e140:	0e 94 6b 6f 	call	0xded6	; 0xded6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)>
    e144:	ed cf       	rjmp	.-38     	; 0xe120 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    e146:	be 01       	movw	r22, r28
    e148:	6f 5f       	subi	r22, 0xFF	; 255
    e14a:	7f 4f       	sbci	r23, 0xFF	; 255
    e14c:	c8 01       	movw	r24, r16
    e14e:	0e 94 b0 6d 	call	0xdb60	; 0xdb60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    e152:	9c 01       	movw	r18, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    e154:	89 2b       	or	r24, r25
    e156:	e9 f6       	brne	.-70     	; 0xe112 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x54>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    e158:	e1 14       	cp	r14, r1
    e15a:	f1 04       	cpc	r15, r1
    e15c:	49 f0       	breq	.+18     	; 0xe170 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    e15e:	89 81       	ldd	r24, Y+1	; 0x01
    e160:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    e162:	23 e0       	ldi	r18, 0x03	; 3
    e164:	30 e0       	ldi	r19, 0x00	; 0
    e166:	f7 01       	movw	r30, r14
    e168:	31 83       	std	Z+1, r19	; 0x01
    e16a:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    e16c:	93 83       	std	Z+3, r25	; 0x03
    e16e:	82 83       	std	Z+2, r24	; 0x02
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:179
    return DeserializationError::Ok;
    e170:	30 e0       	ldi	r19, 0x00	; 0
    e172:	20 e0       	ldi	r18, 0x00	; 0
    e174:	ce cf       	rjmp	.-100    	; 0xe112 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x54>

0000e176 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:68
    if (current() != charToSkip) return false;
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    e176:	0f 93       	push	r16
    e178:	1f 93       	push	r17
    e17a:	cf 93       	push	r28
    e17c:	df 93       	push	r29
    e17e:	00 d0       	rcall	.+0      	; 0xe180 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xa>
    e180:	1f 92       	push	r1
    e182:	cd b7       	in	r28, 0x3d	; 61
    e184:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    e186:	fc 01       	movw	r30, r24
    e188:	26 81       	ldd	r18, Z+6	; 0x06
    e18a:	21 11       	cpse	r18, r1
    e18c:	0b c0       	rjmp	.+22     	; 0xe1a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x2e>
    e18e:	85 e0       	ldi	r24, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:102
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    e190:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:104 (discriminator 2)
    }
  }
    e192:	0f 90       	pop	r0
    e194:	0f 90       	pop	r0
    e196:	0f 90       	pop	r0
    e198:	0f 90       	pop	r0
    e19a:	df 91       	pop	r29
    e19c:	cf 91       	pop	r28
    e19e:	1f 91       	pop	r17
    e1a0:	0f 91       	pop	r16
    e1a2:	08 95       	ret
_ZN11ArduinoJson11JsonVariant2toINS_9JsonArrayEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    e1a4:	fb 01       	movw	r30, r22
    e1a6:	30 97       	sbiw	r30, 0x00	; 0
    e1a8:	99 f0       	breq	.+38     	; 0xe1d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x5a>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    e1aa:	28 e0       	ldi	r18, 0x08	; 8
    e1ac:	30 e0       	ldi	r19, 0x00	; 0
    e1ae:	31 83       	std	Z+1, r19	; 0x01
    e1b0:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    e1b2:	13 82       	std	Z+3, r1	; 0x03
    e1b4:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    e1b6:	15 82       	std	Z+5, r1	; 0x05
    e1b8:	14 82       	std	Z+4, r1	; 0x04
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:73
    return &content.asArray;
    e1ba:	9b 01       	movw	r18, r22
    e1bc:	2e 5f       	subi	r18, 0xFE	; 254
    e1be:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:71
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonArray array = variant.to<JsonArray>();
    e1c0:	5a 83       	std	Y+2, r21	; 0x02
    e1c2:	49 83       	std	Y+1, r20	; 0x01
    e1c4:	3c 83       	std	Y+4, r19	; 0x04
    e1c6:	2b 83       	std	Y+3, r18	; 0x03
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:72
    if (array.isNull()) return DeserializationError::NoMemory;
    e1c8:	23 2b       	or	r18, r19
    e1ca:	39 f4       	brne	.+14     	; 0xe1da <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x64>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    e1cc:	83 e0       	ldi	r24, 0x03	; 3
    e1ce:	e0 cf       	rjmp	.-64     	; 0xe190 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
_ZN11ArduinoJson11JsonVariant2toINS_9JsonArrayEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78
    e1d0:	30 e0       	ldi	r19, 0x00	; 0
    e1d2:	20 e0       	ldi	r18, 0x00	; 0
    e1d4:	50 e0       	ldi	r21, 0x00	; 0
    e1d6:	40 e0       	ldi	r20, 0x00	; 0
    e1d8:	f3 cf       	rjmp	.-26     	; 0xe1c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x4a>
    e1da:	8c 01       	movw	r16, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e1dc:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e1e0:	8b 35       	cpi	r24, 0x5B	; 91
    e1e2:	11 f0       	breq	.+4      	; 0xe1e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x72>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:102
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    e1e4:	82 e0       	ldi	r24, 0x02	; 2
    e1e6:	d4 cf       	rjmp	.-88     	; 0xe190 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e1e8:	f8 01       	movw	r30, r16
    e1ea:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    e1ec:	c8 01       	movw	r24, r16
    e1ee:	0e 94 74 6c 	call	0xd8e8	; 0xd8e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    e1f2:	00 97       	sbiw	r24, 0x00	; 0
    e1f4:	71 f6       	brne	.-100    	; 0xe192 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e1f6:	c8 01       	movw	r24, r16
    e1f8:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e1fc:	8d 35       	cpi	r24, 0x5D	; 93
    e1fe:	21 f4       	brne	.+8      	; 0xe208 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x92>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e200:	f8 01       	movw	r30, r16
    e202:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:101
      // 2 - Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
    e204:	80 e0       	ldi	r24, 0x00	; 0
    e206:	c4 cf       	rjmp	.-120    	; 0xe190 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:87
    if (eat(']')) return DeserializationError::Ok;

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
    e208:	ce 01       	movw	r24, r28
    e20a:	01 96       	adiw	r24, 0x01	; 1
    e20c:	0e 94 92 35 	call	0x6b24	; 0x6b24 <ArduinoJson::JsonArray::add()>
    e210:	ab 01       	movw	r20, r22
    e212:	bc 01       	movw	r22, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88
      if (value.isInvalid()) return DeserializationError::NoMemory;
    e214:	89 2b       	or	r24, r25
    e216:	d1 f2       	breq	.-76     	; 0xe1cc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x56>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    e218:	f8 01       	movw	r30, r16
    e21a:	86 81       	ldd	r24, Z+6	; 0x06
    e21c:	81 50       	subi	r24, 0x01	; 1
    e21e:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    e220:	c8 01       	movw	r24, r16
    e222:	0e 94 5f 70 	call	0xe0be	; 0xe0be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    e226:	f8 01       	movw	r30, r16
    e228:	26 81       	ldd	r18, Z+6	; 0x06
    e22a:	2f 5f       	subi	r18, 0xFF	; 255
    e22c:	26 83       	std	Z+6, r18	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    e22e:	00 97       	sbiw	r24, 0x00	; 0
    e230:	09 f0       	breq	.+2      	; 0xe234 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xbe>
    e232:	af cf       	rjmp	.-162    	; 0xe192 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    e234:	c8 01       	movw	r24, r16
    e236:	0e 94 74 6c 	call	0xd8e8	; 0xd8e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    e23a:	00 97       	sbiw	r24, 0x00	; 0
    e23c:	09 f0       	breq	.+2      	; 0xe240 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xca>
    e23e:	a9 cf       	rjmp	.-174    	; 0xe192 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e240:	c8 01       	movw	r24, r16
    e242:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e246:	8d 35       	cpi	r24, 0x5D	; 93
    e248:	d9 f2       	breq	.-74     	; 0xe200 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x8a>
    e24a:	c8 01       	movw	r24, r16
    e24c:	0e 94 64 6c 	call	0xd8c8	; 0xd8c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e250:	8c 32       	cpi	r24, 0x2C	; 44
    e252:	41 f6       	brne	.-112    	; 0xe1e4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x6e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e254:	f8 01       	movw	r30, r16
    e256:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:85

    // Empty array?
    if (eat(']')) return DeserializationError::Ok;

    // Read each value
    for (;;) {
    e258:	d7 cf       	rjmp	.-82     	; 0xe208 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x92>

0000e25a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
    e25a:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
    e25c:	80 81       	ld	r24, Z
    e25e:	91 81       	ldd	r25, Z+1	; 0x01
    e260:	87 30       	cpi	r24, 0x07	; 7
    e262:	91 05       	cpc	r25, r1
    e264:	38 f4       	brcc	.+14     	; 0xe274 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
    e266:	85 30       	cpi	r24, 0x05	; 5
    e268:	91 05       	cpc	r25, r1
    e26a:	88 f4       	brcc	.+34     	; 0xe28e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
    e26c:	03 97       	sbiw	r24, 0x03	; 3
    e26e:	a0 f4       	brcc	.+40     	; 0xe298 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    e270:	80 e0       	ldi	r24, 0x00	; 0
    e272:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    e274:	87 30       	cpi	r24, 0x07	; 7
    e276:	91 05       	cpc	r25, r1
    e278:	61 f0       	breq	.+24     	; 0xe292 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
    e27a:	0a 97       	sbiw	r24, 0x0a	; 10
    e27c:	c9 f7       	brne	.-14     	; 0xe270 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    e27e:	62 81       	ldd	r22, Z+2	; 0x02
    e280:	73 81       	ldd	r23, Z+3	; 0x03
    e282:	84 81       	ldd	r24, Z+4	; 0x04
    e284:	95 81       	ldd	r25, Z+5	; 0x05
    e286:	0e 94 e3 d1 	call	0x1a3c6	; 0x1a3c6 <__fixunssfsi>
    e28a:	86 2f       	mov	r24, r22
    e28c:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    e28e:	82 81       	ldd	r24, Z+2	; 0x02
    e290:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    e292:	82 81       	ldd	r24, Z+2	; 0x02
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    e294:	81 95       	neg	r24
    e296:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    e298:	02 80       	ldd	r0, Z+2	; 0x02
    e29a:	f3 81       	ldd	r31, Z+3	; 0x03
    e29c:	e0 2d       	mov	r30, r0
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    e29e:	30 97       	sbiw	r30, 0x00	; 0
    e2a0:	39 f3       	breq	.-50     	; 0xe270 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    e2a2:	80 81       	ld	r24, Z
    e2a4:	84 37       	cpi	r24, 0x74	; 116
    e2a6:	c9 f0       	breq	.+50     	; 0xe2da <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    e2a8:	8b 32       	cpi	r24, 0x2B	; 43
    e2aa:	89 f0       	breq	.+34     	; 0xe2ce <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
    e2ac:	8d 32       	cpi	r24, 0x2D	; 45
    e2ae:	81 f4       	brne	.+32     	; 0xe2d0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    e2b0:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    e2b2:	91 e0       	ldi	r25, 0x01	; 1
    e2b4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    e2b6:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    e2b8:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    e2ba:	30 ed       	ldi	r19, 0xD0	; 208
    e2bc:	36 0f       	add	r19, r22
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    e2be:	3a 30       	cpi	r19, 0x0A	; 10
    e2c0:	48 f4       	brcc	.+18     	; 0xe2d4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
    e2c2:	82 9f       	mul	r24, r18
    e2c4:	60 0d       	add	r22, r0
    e2c6:	11 24       	eor	r1, r1
    e2c8:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    e2ca:	80 53       	subi	r24, 0x30	; 48
    e2cc:	f5 cf       	rjmp	.-22     	; 0xe2b8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    e2ce:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    e2d0:	90 e0       	ldi	r25, 0x00	; 0
    e2d2:	f0 cf       	rjmp	.-32     	; 0xe2b4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    e2d4:	91 11       	cpse	r25, r1
    e2d6:	de cf       	rjmp	.-68     	; 0xe294 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
    e2d8:	08 95       	ret
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    e2da:	81 e0       	ldi	r24, 0x01	; 1
    e2dc:	fd cf       	rjmp	.-6      	; 0xe2d8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

0000e2de <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2230
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
    e2de:	2f 92       	push	r2
    e2e0:	3f 92       	push	r3
    e2e2:	4f 92       	push	r4
    e2e4:	5f 92       	push	r5
    e2e6:	6f 92       	push	r6
    e2e8:	7f 92       	push	r7
    e2ea:	8f 92       	push	r8
    e2ec:	9f 92       	push	r9
    e2ee:	af 92       	push	r10
    e2f0:	bf 92       	push	r11
    e2f2:	cf 92       	push	r12
    e2f4:	df 92       	push	r13
    e2f6:	ef 92       	push	r14
    e2f8:	ff 92       	push	r15
    e2fa:	0f 93       	push	r16
    e2fc:	1f 93       	push	r17
    e2fe:	cf 93       	push	r28
    e300:	df 93       	push	r29
    e302:	cd b7       	in	r28, 0x3d	; 61
    e304:	de b7       	in	r29, 0x3e	; 62
    e306:	c8 5c       	subi	r28, 0xC8	; 200
    e308:	d1 09       	sbc	r29, r1
    e30a:	0f b6       	in	r0, 0x3f	; 63
    e30c:	f8 94       	cli
    e30e:	de bf       	out	0x3e, r29	; 62
    e310:	0f be       	out	0x3f, r0	; 63
    e312:	cd bf       	out	0x3d, r28	; 61
    e314:	4c 01       	movw	r8, r24
    e316:	8b 01       	movw	r16, r22
    e318:	7a 01       	movw	r14, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2243
  uint8_t id_interval = 0;
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;

  NTPClient timeClient(udpClient);
    e31a:	6a e0       	ldi	r22, 0x0A	; 10
    e31c:	7e e0       	ldi	r23, 0x0E	; 14
    e31e:	ce 01       	movw	r24, r28
    e320:	01 96       	adiw	r24, 0x01	; 1
    e322:	0e 94 35 c9 	call	0x1926a	; 0x1926a <NTPClient::NTPClient(UDP&)>
    e326:	e4 ec       	ldi	r30, 0xC4	; 196
    e328:	f8 e0       	ldi	r31, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2245

  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    e32a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2245 (discriminator 2)
    e32c:	11 92       	st	Z+, r1
    e32e:	8f 5f       	subi	r24, 0xFF	; 255
    e330:	80 38       	cpi	r24, 0x80	; 128
    e332:	e1 f7       	brne	.-8      	; 0xe32c <mqtt_callback(char*, unsigned char*, unsigned int)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2247
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    e334:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <mqtt_receive_message>
    e338:	90 91 ce 0e 	lds	r25, 0x0ECE	; 0x800ece <mqtt_receive_message+0x1>
    e33c:	01 96       	adiw	r24, 0x01	; 1
    e33e:	90 93 ce 0e 	sts	0x0ECE, r25	; 0x800ece <mqtt_receive_message+0x1>
    e342:	80 93 cd 0e 	sts	0x0ECD, r24	; 0x800ecd <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2248
  strncpy(my_payload, (char*) payload, length);
    e346:	a7 01       	movw	r20, r14
    e348:	b8 01       	movw	r22, r16
    e34a:	84 ec       	ldi	r24, 0xC4	; 196
    e34c:	98 e0       	ldi	r25, 0x08	; 8
    e34e:	0e 94 87 d7 	call	0x1af0e	; 0x1af0e <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2251
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    e352:	5e 01       	movw	r10, r28
    e354:	88 e4       	ldi	r24, 0x48	; 72
    e356:	a8 0e       	add	r10, r24
    e358:	b1 1c       	adc	r11, r1
    e35a:	65 ea       	ldi	r22, 0xA5	; 165
    e35c:	75 e5       	ldi	r23, 0x55	; 85
    e35e:	c5 01       	movw	r24, r10
    e360:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2252
  if (strcmp(str1, topic) == 0)
    e364:	b4 01       	movw	r22, r8
    e366:	c5 01       	movw	r24, r10
    e368:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    e36c:	89 2b       	or	r24, r25
    e36e:	71 f4       	brne	.+28     	; 0xe38c <mqtt_callback(char*, unsigned char*, unsigned int)+0xae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2254
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    e370:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    e374:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    e378:	01 96       	adiw	r24, 0x01	; 1
    e37a:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    e37e:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2255
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
    e382:	62 e0       	ldi	r22, 0x02	; 2
    e384:	84 ec       	ldi	r24, 0xC4	; 196
    e386:	98 e0       	ldi	r25, 0x08	; 8
    e388:	0e 94 f6 81 	call	0x103ec	; 0x103ec <know_mqtt_create_or_update(char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2257
  }
  strcpy_P(str1, thermctl_subscribe);
    e38c:	6c eb       	ldi	r22, 0xBC	; 188
    e38e:	75 e5       	ldi	r23, 0x55	; 85
    e390:	c5 01       	movw	r24, r10
    e392:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2258
  if (strcmp(str1, topic) == 0)
    e396:	b4 01       	movw	r22, r8
    e398:	c5 01       	movw	r24, r10
    e39a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    e39e:	89 2b       	or	r24, r25
    e3a0:	71 f4       	brne	.+28     	; 0xe3be <mqtt_callback(char*, unsigned char*, unsigned int)+0xe0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2260
  {
    mqtt_process_message++;
    e3a2:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    e3a6:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    e3aa:	01 96       	adiw	r24, 0x01	; 1
    e3ac:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    e3b0:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2261
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
    e3b4:	61 e0       	ldi	r22, 0x01	; 1
    e3b6:	84 ec       	ldi	r24, 0xC4	; 196
    e3b8:	98 e0       	ldi	r25, 0x08	; 8
    e3ba:	0e 94 f6 81 	call	0x103ec	; 0x103ec <know_mqtt_create_or_update(char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2266
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    e3be:	6d e0       	ldi	r22, 0x0D	; 13
    e3c0:	76 e5       	ldi	r23, 0x56	; 86
    e3c2:	c5 01       	movw	r24, r10
    e3c4:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2267
  strcat_P(str1, global_time_set);
    e3c8:	62 e4       	ldi	r22, 0x42	; 66
    e3ca:	76 e5       	ldi	r23, 0x56	; 86
    e3cc:	c5 01       	movw	r24, r10
    e3ce:	0e 94 34 d7 	call	0x1ae68	; 0x1ae68 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2268
  if (strcmp(str1, topic) == 0)
    e3d2:	b4 01       	movw	r22, r8
    e3d4:	c5 01       	movw	r24, r10
    e3d6:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    e3da:	89 2b       	or	r24, r25
    e3dc:	09 f0       	breq	.+2      	; 0xe3e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x102>
    e3de:	bc c0       	rjmp	.+376    	; 0xe558 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2270
  {
    mqtt_process_message++;
    e3e0:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    e3e4:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    e3e8:	01 96       	adiw	r24, 0x01	; 1
    e3ea:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    e3ee:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
_ZN11ArduinoJson9Internals11deserializeINS0_16JsonDeserializerENS_18StaticJsonDocumentILj256EEEcEENS_20DeserializationErrorERT0_PT1_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    e3f2:	20 91 58 0a 	lds	r18, 0x0A58	; 0x800a58 <doc>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC4ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    e3f6:	89 e5       	ldi	r24, 0x59	; 89
    e3f8:	9a e0       	ldi	r25, 0x0A	; 10
    e3fa:	c8 57       	subi	r28, 0x78	; 120
    e3fc:	df 4f       	sbci	r29, 0xFF	; 255
    e3fe:	99 83       	std	Y+1, r25	; 0x01
    e400:	88 83       	st	Y, r24
    e402:	c8 58       	subi	r28, 0x88	; 136
    e404:	d0 40       	sbci	r29, 0x00	; 0
    e406:	84 ec       	ldi	r24, 0xC4	; 196
    e408:	98 e0       	ldi	r25, 0x08	; 8
    e40a:	c6 57       	subi	r28, 0x76	; 118
    e40c:	df 4f       	sbci	r29, 0xFF	; 255
    e40e:	99 83       	std	Y+1, r25	; 0x01
    e410:	88 83       	st	Y, r24
    e412:	ca 58       	subi	r28, 0x8A	; 138
    e414:	d0 40       	sbci	r29, 0x00	; 0
    e416:	c4 57       	subi	r28, 0x74	; 116
    e418:	df 4f       	sbci	r29, 0xFF	; 255
    e41a:	99 83       	std	Y+1, r25	; 0x01
    e41c:	88 83       	st	Y, r24
    e41e:	cc 58       	subi	r28, 0x8C	; 140
    e420:	d0 40       	sbci	r29, 0x00	; 0
    e422:	c2 57       	subi	r28, 0x72	; 114
    e424:	df 4f       	sbci	r29, 0xFF	; 255
    e426:	28 83       	st	Y, r18
    e428:	ce 58       	subi	r28, 0x8E	; 142
    e42a:	d0 40       	sbci	r29, 0x00	; 0
    e42c:	c0 57       	subi	r28, 0x70	; 112
    e42e:	df 4f       	sbci	r29, 0xFF	; 255
    e430:	18 82       	st	Y, r1
    e432:	c0 59       	subi	r28, 0x90	; 144
    e434:	d0 40       	sbci	r29, 0x00	; 0
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66
  }

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    e436:	10 92 60 0a 	sts	0x0A60, r1	; 0x800a60 <doc+0x8>
    e43a:	10 92 5f 0a 	sts	0x0A5F, r1	; 0x800a5f <doc+0x7>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    e43e:	10 92 62 0b 	sts	0x0B62, r1	; 0x800b62 <doc+0x10a>
    e442:	10 92 61 0b 	sts	0x0B61, r1	; 0x800b61 <doc+0x109>
    e446:	49 e5       	ldi	r20, 0x59	; 89
    e448:	5a e0       	ldi	r21, 0x0A	; 10
    e44a:	61 e6       	ldi	r22, 0x61	; 97
    e44c:	7b e0       	ldi	r23, 0x0B	; 11
_ZN11ArduinoJson9Internals11deserializeINS0_16JsonDeserializerENS_18StaticJsonDocumentILj256EEEcEENS_20DeserializationErrorERT0_PT1_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    e44e:	ce 01       	movw	r24, r28
    e450:	88 57       	subi	r24, 0x78	; 120
    e452:	9f 4f       	sbci	r25, 0xFF	; 255
    e454:	0e 94 5f 70 	call	0xe0be	; 0xe0be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    e458:	80 91 61 0b 	lds	r24, 0x0B61	; 0x800b61 <doc+0x109>
    e45c:	90 91 62 0b 	lds	r25, 0x0B62	; 0x800b62 <doc+0x10a>
    e460:	71 2c       	mov	r7, r1
    e462:	61 2c       	mov	r6, r1
    e464:	09 97       	sbiw	r24, 0x09	; 9
    e466:	21 f4       	brne	.+8      	; 0xe470 <mqtt_callback(char*, unsigned char*, unsigned int)+0x192>
    e468:	83 e6       	ldi	r24, 0x63	; 99
    e46a:	68 2e       	mov	r6, r24
    e46c:	8b e0       	ldi	r24, 0x0B	; 11
    e46e:	78 2e       	mov	r7, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    e470:	6e ea       	ldi	r22, 0xAE	; 174
    e472:	75 e0       	ldi	r23, 0x05	; 5
    e474:	c3 01       	movw	r24, r6
    e476:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]>
    e47a:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    e47c:	89 2b       	or	r24, r25
    e47e:	09 f4       	brne	.+2      	; 0xe482 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a4>
    e480:	6b c0       	rjmp	.+214    	; 0xe558 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    e482:	63 eb       	ldi	r22, 0xB3	; 179
    e484:	75 e0       	ldi	r23, 0x05	; 5
    e486:	c3 01       	movw	r24, r6
    e488:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]>
    e48c:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
    e48e:	89 2b       	or	r24, r25
    e490:	09 f4       	brne	.+2      	; 0xe494 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b6>
    e492:	62 c0       	rjmp	.+196    	; 0xe558 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    e494:	69 eb       	ldi	r22, 0xB9	; 185
    e496:	75 e0       	ldi	r23, 0x05	; 5
    e498:	c3 01       	movw	r24, r6
    e49a:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]>
    e49e:	1c 01       	movw	r2, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
    e4a0:	89 2b       	or	r24, r25
    e4a2:	09 f4       	brne	.+2      	; 0xe4a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c8>
    e4a4:	59 c0       	rjmp	.+178    	; 0xe558 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    e4a6:	6e eb       	ldi	r22, 0xBE	; 190
    e4a8:	75 e0       	ldi	r23, 0x05	; 5
    e4aa:	c3 01       	movw	r24, r6
    e4ac:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]>
    e4b0:	8c 01       	movw	r16, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
    e4b2:	89 2b       	or	r24, r25
    e4b4:	09 f4       	brne	.+2      	; 0xe4b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1da>
    e4b6:	50 c0       	rjmp	.+160    	; 0xe558 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    e4b8:	65 ec       	ldi	r22, 0xC5	; 197
    e4ba:	75 e0       	ldi	r23, 0x05	; 5
    e4bc:	c3 01       	movw	r24, r6
    e4be:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
    e4c2:	00 97       	sbiw	r24, 0x00	; 0
    e4c4:	09 f4       	brne	.+2      	; 0xe4c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ea>
    e4c6:	48 c0       	rjmp	.+144    	; 0xe558 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    e4c8:	0e 94 2d 71 	call	0xe25a	; 0xe25a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    e4cc:	c8 2e       	mov	r12, r24
    e4ce:	c8 01       	movw	r24, r16
    e4d0:	0e 94 2d 71 	call	0xe25a	; 0xe25a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    e4d4:	d8 2e       	mov	r13, r24
    e4d6:	c1 01       	movw	r24, r2
    e4d8:	0e 94 2d 71 	call	0xe25a	; 0xe25a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    e4dc:	08 2f       	mov	r16, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    e4de:	6c ec       	ldi	r22, 0xCC	; 204
    e4e0:	75 e0       	ldi	r23, 0x05	; 5
    e4e2:	c3 01       	movw	r24, r6
    e4e4:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.32]>
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    e4e8:	10 e0       	ldi	r17, 0x00	; 0
    e4ea:	00 97       	sbiw	r24, 0x00	; 0
    e4ec:	19 f0       	breq	.+6      	; 0xe4f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x216>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    e4ee:	0e 94 2d 71 	call	0xe25a	; 0xe25a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    e4f2:	18 2f       	mov	r17, r24
    e4f4:	c7 01       	movw	r24, r14
    e4f6:	0e 94 2d 71 	call	0xe25a	; 0xe25a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    e4fa:	f8 2e       	mov	r15, r24
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    e4fc:	d2 01       	movw	r26, r4
    e4fe:	8d 91       	ld	r24, X+
    e500:	9c 91       	ld	r25, X
    e502:	11 97       	sbiw	r26, 0x01	; 1
    e504:	87 30       	cpi	r24, 0x07	; 7
    e506:	91 05       	cpc	r25, r1
    e508:	48 f4       	brcc	.+18     	; 0xe51c <mqtt_callback(char*, unsigned char*, unsigned int)+0x23e>
    e50a:	85 30       	cpi	r24, 0x05	; 5
    e50c:	91 05       	cpc	r25, r1
    e50e:	a0 f4       	brcc	.+40     	; 0xe538 <mqtt_callback(char*, unsigned char*, unsigned int)+0x25a>
    e510:	03 97       	sbiw	r24, 0x03	; 3
    e512:	08 f0       	brcs	.+2      	; 0xe516 <mqtt_callback(char*, unsigned char*, unsigned int)+0x238>
    e514:	e7 c0       	rjmp	.+462    	; 0xe6e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x406>
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    e516:	70 e0       	ldi	r23, 0x00	; 0
    e518:	60 e0       	ldi	r22, 0x00	; 0
    e51a:	11 c0       	rjmp	.+34     	; 0xe53e <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    e51c:	87 30       	cpi	r24, 0x07	; 7
    e51e:	91 05       	cpc	r25, r1
    e520:	09 f4       	brne	.+2      	; 0xe524 <mqtt_callback(char*, unsigned char*, unsigned int)+0x246>
    e522:	d9 c0       	rjmp	.+434    	; 0xe6d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f8>
    e524:	0a 97       	sbiw	r24, 0x0a	; 10
    e526:	b9 f7       	brne	.-18     	; 0xe516 <mqtt_callback(char*, unsigned char*, unsigned int)+0x238>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    e528:	f2 01       	movw	r30, r4
    e52a:	62 81       	ldd	r22, Z+2	; 0x02
    e52c:	73 81       	ldd	r23, Z+3	; 0x03
    e52e:	84 81       	ldd	r24, Z+4	; 0x04
    e530:	95 81       	ldd	r25, Z+5	; 0x05
    e532:	0e 94 e3 d1 	call	0x1a3c6	; 0x1a3c6 <__fixunssfsi>
    e536:	03 c0       	rjmp	.+6      	; 0xe53e <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    e538:	f2 01       	movw	r30, r4
    e53a:	62 81       	ldd	r22, Z+2	; 0x02
    e53c:	73 81       	ldd	r23, Z+3	; 0x03
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2274
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    e53e:	ed 2c       	mov	r14, r13
    e540:	21 2f       	mov	r18, r17
    e542:	4f 2d       	mov	r20, r15
    e544:	ce 01       	movw	r24, r28
    e546:	88 57       	subi	r24, 0x78	; 120
    e548:	9f 4f       	sbci	r25, 0xFF	; 255
    e54a:	0e 94 d3 c1 	call	0x183a6	; 0x183a6 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    e54e:	ce 01       	movw	r24, r28
    e550:	88 57       	subi	r24, 0x78	; 120
    e552:	9f 4f       	sbci	r25, 0xFF	; 255
    e554:	0e 94 fa c1 	call	0x183f4	; 0x183f4 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2277
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    e558:	6d e0       	ldi	r22, 0x0D	; 13
    e55a:	76 e5       	ldi	r23, 0x56	; 86
    e55c:	c5 01       	movw	r24, r10
    e55e:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278
  strcat_P(str1, global_time_ntp);
    e562:	62 e3       	ldi	r22, 0x32	; 50
    e564:	76 e5       	ldi	r23, 0x56	; 86
    e566:	c5 01       	movw	r24, r10
    e568:	0e 94 34 d7 	call	0x1ae68	; 0x1ae68 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2279
  if (strcmp(str1, topic) == 0)
    e56c:	b4 01       	movw	r22, r8
    e56e:	c5 01       	movw	r24, r10
    e570:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    e574:	89 2b       	or	r24, r25
    e576:	b9 f4       	brne	.+46     	; 0xe5a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2281
  {
    mqtt_process_message++;
    e578:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    e57c:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    e580:	01 96       	adiw	r24, 0x01	; 1
    e582:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    e586:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
    e58a:	0e 94 dd 47 	call	0x8fba	; 0x8fba <time_get_offset()>
    e58e:	48 2f       	mov	r20, r24
    e590:	69 e3       	ldi	r22, 0x39	; 57
    e592:	7e e0       	ldi	r23, 0x0E	; 14
    e594:	ce 01       	movw	r24, r28
    e596:	01 96       	adiw	r24, 0x01	; 1
    e598:	0e 94 f7 81 	call	0x103ee	; 0x103ee <ntp_update(NTPClient*, RTC_DS1307*, unsigned char)>
    e59c:	81 30       	cpi	r24, 0x01	; 1
    e59e:	09 f0       	breq	.+2      	; 0xe5a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2c4>
    e5a0:	ce c0       	rjmp	.+412    	; 0xe73e <mqtt_callback(char*, unsigned char*, unsigned int)+0x460>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
      selftest_clear_0(SELFTEST_ERR_NTP);
    e5a2:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <selftest_clear_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
    else
      selftest_set_0(SELFTEST_ERR_NTP);
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    e5a6:	6d e0       	ldi	r22, 0x0D	; 13
    e5a8:	76 e5       	ldi	r23, 0x56	; 86
    e5aa:	c5 01       	movw	r24, r10
    e5ac:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
  strcat_P(str1, global_time_offset);
    e5b0:	6b e1       	ldi	r22, 0x1B	; 27
    e5b2:	76 e5       	ldi	r23, 0x56	; 86
    e5b4:	c5 01       	movw	r24, r10
    e5b6:	0e 94 34 d7 	call	0x1ae68	; 0x1ae68 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2290
  if (strcmp(str1, topic) == 0)
    e5ba:	b4 01       	movw	r22, r8
    e5bc:	c5 01       	movw	r24, r10
    e5be:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    e5c2:	89 2b       	or	r24, r25
    e5c4:	79 f4       	brne	.+30     	; 0xe5e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x306>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2292
  {
    mqtt_process_message++;
    e5c6:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    e5ca:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    e5ce:	01 96       	adiw	r24, 0x01	; 1
    e5d0:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    e5d4:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2293
    time_set_offset(atoi(my_payload));
    e5d8:	84 ec       	ldi	r24, 0xC4	; 196
    e5da:	98 e0       	ldi	r25, 0x08	; 8
    e5dc:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    e5e0:	0e 94 ac 49 	call	0x9358	; 0x9358 <time_set_offset(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2297
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    e5e4:	6d e0       	ldi	r22, 0x0D	; 13
    e5e6:	76 e5       	ldi	r23, 0x56	; 86
    e5e8:	c5 01       	movw	r24, r10
    e5ea:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2298
  strcat(str1, device.nazev);
    e5ee:	69 ee       	ldi	r22, 0xE9	; 233
    e5f0:	7e e0       	ldi	r23, 0x0E	; 14
    e5f2:	c5 01       	movw	r24, r10
    e5f4:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2299
  strcat(str1, "/tds/associate");
    e5f8:	60 ed       	ldi	r22, 0xD0	; 208
    e5fa:	75 e0       	ldi	r23, 0x05	; 5
    e5fc:	c5 01       	movw	r24, r10
    e5fe:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2300
  if (strcmp(str1, topic) == 0)
    e602:	b4 01       	movw	r22, r8
    e604:	c5 01       	movw	r24, r10
    e606:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2237
  char tmp1[32];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    e60a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2300
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    e60c:	89 2b       	or	r24, r25
    e60e:	c1 f4       	brne	.+48     	; 0xe640 <mqtt_callback(char*, unsigned char*, unsigned int)+0x362>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2302
  {
    mqtt_process_message++;
    e610:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    e614:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    e618:	01 96       	adiw	r24, 0x01	; 1
    e61a:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    e61e:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2303
    id = atoi(my_payload);
    e622:	84 ec       	ldi	r24, 0xC4	; 196
    e624:	98 e0       	ldi	r25, 0x08	; 8
    e626:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    e62a:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2304
    if (tds_associate(id) == 255)
    e62c:	0e 94 c5 85 	call	0x10b8a	; 0x10b8a <tds_associate(unsigned char)>
    e630:	8f 3f       	cpi	r24, 0xFF	; 255
    e632:	31 f4       	brne	.+12     	; 0xe640 <mqtt_callback(char*, unsigned char*, unsigned int)+0x362>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2305
      log_error(&mqtt_client, "tds/associate full or bad id");
    e634:	6f ed       	ldi	r22, 0xDF	; 223
    e636:	75 e0       	ldi	r23, 0x05	; 5
    e638:	8d ee       	ldi	r24, 0xED	; 237
    e63a:	9b e0       	ldi	r25, 0x0B	; 11
    e63c:	0e 94 ed 82 	call	0x105da	; 0x105da <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    e640:	6d e0       	ldi	r22, 0x0D	; 13
    e642:	76 e5       	ldi	r23, 0x56	; 86
    e644:	c5 01       	movw	r24, r10
    e646:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2312
  strcat(str1, device.nazev);
    e64a:	69 ee       	ldi	r22, 0xE9	; 233
    e64c:	7e e0       	ldi	r23, 0x0E	; 14
    e64e:	c5 01       	movw	r24, r10
    e650:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2313
  strcat(str1, "/tds/set/");
    e654:	6c ef       	ldi	r22, 0xFC	; 252
    e656:	75 e0       	ldi	r23, 0x05	; 5
    e658:	c5 01       	movw	r24, r10
    e65a:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2314
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e65e:	f5 01       	movw	r30, r10
    e660:	01 90       	ld	r0, Z+
    e662:	00 20       	and	r0, r0
    e664:	e9 f7       	brne	.-6      	; 0xe660 <mqtt_callback(char*, unsigned char*, unsigned int)+0x382>
    e666:	31 97       	sbiw	r30, 0x01	; 1
    e668:	af 01       	movw	r20, r30
    e66a:	4a 19       	sub	r20, r10
    e66c:	5b 09       	sbc	r21, r11
    e66e:	b4 01       	movw	r22, r8
    e670:	c5 01       	movw	r24, r10
    e672:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    e676:	89 2b       	or	r24, r25
    e678:	09 f0       	breq	.+2      	; 0xe67c <mqtt_callback(char*, unsigned char*, unsigned int)+0x39e>
    e67a:	b6 c0       	rjmp	.+364    	; 0xe7e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
  {
    mqtt_process_message++;
    e67c:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    e680:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    e684:	01 96       	adiw	r24, 0x01	; 1
    e686:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    e68a:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e68e:	f5 01       	movw	r30, r10
    e690:	01 90       	ld	r0, Z+
    e692:	00 20       	and	r0, r0
    e694:	e9 f7       	brne	.-6      	; 0xe690 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3b2>
    e696:	31 97       	sbiw	r30, 0x01	; 1
    e698:	ea 19       	sub	r30, r10
    e69a:	fb 09       	sbc	r31, r11
    e69c:	9e 2f       	mov	r25, r30
    e69e:	4e 2f       	mov	r20, r30
    e6a0:	84 2f       	mov	r24, r20
    e6a2:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318 (discriminator 3)
    e6a4:	24 2f       	mov	r18, r20
    e6a6:	30 e0       	ldi	r19, 0x00	; 0
    e6a8:	d4 01       	movw	r26, r8
    e6aa:	0d 90       	ld	r0, X+
    e6ac:	00 20       	and	r0, r0
    e6ae:	e9 f7       	brne	.-6      	; 0xe6aa <mqtt_callback(char*, unsigned char*, unsigned int)+0x3cc>
    e6b0:	11 97       	sbiw	r26, 0x01	; 1
    e6b2:	a8 19       	sub	r26, r8
    e6b4:	b9 09       	sbc	r27, r9
    e6b6:	2a 17       	cp	r18, r26
    e6b8:	3b 07       	cpc	r19, r27
    e6ba:	08 f0       	brcs	.+2      	; 0xe6be <mqtt_callback(char*, unsigned char*, unsigned int)+0x3e0>
    e6bc:	44 c0       	rjmp	.+136    	; 0xe746 <mqtt_callback(char*, unsigned char*, unsigned int)+0x468>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2320 (discriminator 2)
    {
      str1[cnt] = topic[f];
    e6be:	d5 01       	movw	r26, r10
    e6c0:	a8 0f       	add	r26, r24
    e6c2:	b1 1d       	adc	r27, r1
    e6c4:	28 0d       	add	r18, r8
    e6c6:	39 1d       	adc	r19, r9
    e6c8:	f9 01       	movw	r30, r18
    e6ca:	80 81       	ld	r24, Z
    e6cc:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2321 (discriminator 2)
      str1[cnt + 1] = 0;
    e6ce:	11 96       	adiw	r26, 0x01	; 1
    e6d0:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318 (discriminator 2)
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e6d2:	4f 5f       	subi	r20, 0xFF	; 255
    e6d4:	e5 cf       	rjmp	.-54     	; 0xe6a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3c2>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    e6d6:	12 96       	adiw	r26, 0x02	; 2
    e6d8:	6d 91       	ld	r22, X+
    e6da:	7c 91       	ld	r23, X
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    e6dc:	71 95       	neg	r23
    e6de:	61 95       	neg	r22
    e6e0:	71 09       	sbc	r23, r1
    e6e2:	2d cf       	rjmp	.-422    	; 0xe53e <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    e6e4:	12 96       	adiw	r26, 0x02	; 2
    e6e6:	ed 91       	ld	r30, X+
    e6e8:	fc 91       	ld	r31, X
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    e6ea:	30 97       	sbiw	r30, 0x00	; 0
    e6ec:	09 f4       	brne	.+2      	; 0xe6f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x412>
    e6ee:	13 cf       	rjmp	.-474    	; 0xe516 <mqtt_callback(char*, unsigned char*, unsigned int)+0x238>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    e6f0:	80 81       	ld	r24, Z
    e6f2:	61 e0       	ldi	r22, 0x01	; 1
    e6f4:	70 e0       	ldi	r23, 0x00	; 0
    e6f6:	84 37       	cpi	r24, 0x74	; 116
    e6f8:	09 f4       	brne	.+2      	; 0xe6fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x41e>
    e6fa:	21 cf       	rjmp	.-446    	; 0xe53e <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    e6fc:	8b 32       	cpi	r24, 0x2B	; 43
    e6fe:	c9 f0       	breq	.+50     	; 0xe732 <mqtt_callback(char*, unsigned char*, unsigned int)+0x454>
    e700:	8d 32       	cpi	r24, 0x2D	; 45
    e702:	c1 f4       	brne	.+48     	; 0xe734 <mqtt_callback(char*, unsigned char*, unsigned int)+0x456>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    e704:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    e706:	81 e0       	ldi	r24, 0x01	; 1
    e708:	70 e0       	ldi	r23, 0x00	; 0
    e70a:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    e70c:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    e70e:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    e710:	20 ed       	ldi	r18, 0xD0	; 208
    e712:	29 0f       	add	r18, r25
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    e714:	2a 30       	cpi	r18, 0x0A	; 10
    e716:	80 f4       	brcc	.+32     	; 0xe738 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    e718:	46 9f       	mul	r20, r22
    e71a:	90 01       	movw	r18, r0
    e71c:	47 9f       	mul	r20, r23
    e71e:	30 0d       	add	r19, r0
    e720:	11 24       	eor	r1, r1
    e722:	b9 01       	movw	r22, r18
    e724:	60 53       	subi	r22, 0x30	; 48
    e726:	71 09       	sbc	r23, r1
    e728:	69 0f       	add	r22, r25
    e72a:	71 1d       	adc	r23, r1
    e72c:	97 fd       	sbrc	r25, 7
    e72e:	7a 95       	dec	r23
    e730:	ee cf       	rjmp	.-36     	; 0xe70e <mqtt_callback(char*, unsigned char*, unsigned int)+0x430>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    e732:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    e734:	80 e0       	ldi	r24, 0x00	; 0
    e736:	e8 cf       	rjmp	.-48     	; 0xe708 <mqtt_callback(char*, unsigned char*, unsigned int)+0x42a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    e738:	81 11       	cpse	r24, r1
    e73a:	d0 cf       	rjmp	.-96     	; 0xe6dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x3fe>
    e73c:	00 cf       	rjmp	.-512    	; 0xe53e <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
    e73e:	81 e0       	ldi	r24, 0x01	; 1
    e740:	0e 94 b6 47 	call	0x8f6c	; 0x8f6c <selftest_set_0(unsigned char)>
    e744:	30 cf       	rjmp	.-416    	; 0xe5a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2325
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e746:	67 e1       	ldi	r22, 0x17	; 23
    e748:	73 e0       	ldi	r23, 0x03	; 3
    e74a:	c5 01       	movw	r24, r10
    e74c:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
    e750:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2324
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e752:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
    pch = strtok (str1, "/");
    while (pch != NULL)
    e754:	e1 14       	cp	r14, r1
    e756:	f1 04       	cpc	r15, r1
    e758:	09 f4       	brne	.+2      	; 0xe75c <mqtt_callback(char*, unsigned char*, unsigned int)+0x47e>
    e75a:	46 c0       	rjmp	.+140    	; 0xe7e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
    {
      if (cnt == 0) id = atoi(pch);
    e75c:	01 11       	cpse	r16, r1
    e75e:	0d c0       	rjmp	.+26     	; 0xe77a <mqtt_callback(char*, unsigned char*, unsigned int)+0x49c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328 (discriminator 1)
    e760:	c7 01       	movw	r24, r14
    e762:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    e766:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2329 (discriminator 1)
      if (id < HW_ONEWIRE_MAXROMS)
    e768:	86 30       	cpi	r24, 0x06	; 6
    e76a:	a8 f1       	brcs	.+106    	; 0xe7d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    e76c:	6d e3       	ldi	r22, 0x3D	; 61
    e76e:	76 e0       	ldi	r23, 0x06	; 6
    e770:	8d ee       	ldi	r24, 0xED	; 237
    e772:	9b e0       	ldi	r25, 0x0B	; 11
    e774:	0e 94 ed 82 	call	0x105da	; 0x105da <log_error(PubSubClient*, char*)>
    e778:	2e c0       	rjmp	.+92     	; 0xe7d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2329
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    e77a:	16 30       	cpi	r17, 0x06	; 6
    e77c:	b8 f7       	brcc	.-18     	; 0xe76c <mqtt_callback(char*, unsigned char*, unsigned int)+0x48e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2331
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    e77e:	01 30       	cpi	r16, 0x01	; 1
    e780:	51 f5       	brne	.+84     	; 0xe7d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2331 (discriminator 1)
    e782:	67 e5       	ldi	r22, 0x57	; 87
    e784:	73 e0       	ldi	r23, 0x03	; 3
    e786:	c7 01       	movw	r24, r14
    e788:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    e78c:	89 2b       	or	r24, r25
    e78e:	29 f4       	brne	.+10     	; 0xe79a <mqtt_callback(char*, unsigned char*, unsigned int)+0x4bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2331 (discriminator 2)
    e790:	64 ec       	ldi	r22, 0xC4	; 196
    e792:	78 e0       	ldi	r23, 0x08	; 8
    e794:	81 2f       	mov	r24, r17
    e796:	0e 94 43 84 	call	0x10886	; 0x10886 <tds_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2332
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    e79a:	69 e7       	ldi	r22, 0x79	; 121
    e79c:	74 e0       	ldi	r23, 0x04	; 4
    e79e:	c7 01       	movw	r24, r14
    e7a0:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    e7a4:	89 2b       	or	r24, r25
    e7a6:	41 f4       	brne	.+16     	; 0xe7b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2332 (discriminator 2)
    e7a8:	84 ec       	ldi	r24, 0xC4	; 196
    e7aa:	98 e0       	ldi	r25, 0x08	; 8
    e7ac:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    e7b0:	bc 01       	movw	r22, r24
    e7b2:	81 2f       	mov	r24, r17
    e7b4:	0e 94 6e 84 	call	0x108dc	; 0x108dc <tds_set_offset(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    e7b8:	63 e6       	ldi	r22, 0x63	; 99
    e7ba:	73 e0       	ldi	r23, 0x03	; 3
    e7bc:	c7 01       	movw	r24, r14
    e7be:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    e7c2:	89 2b       	or	r24, r25
    e7c4:	41 f4       	brne	.+16     	; 0xe7d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333 (discriminator 2)
    e7c6:	84 ec       	ldi	r24, 0xC4	; 196
    e7c8:	98 e0       	ldi	r25, 0x08	; 8
    e7ca:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    e7ce:	68 2f       	mov	r22, r24
    e7d0:	81 2f       	mov	r24, r17
    e7d2:	0e 94 b0 84 	call	0x10960	; 0x10960 <tds_set_period(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2339
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    e7d6:	67 e1       	ldi	r22, 0x17	; 23
    e7d8:	73 e0       	ldi	r23, 0x03	; 3
    e7da:	90 e0       	ldi	r25, 0x00	; 0
    e7dc:	80 e0       	ldi	r24, 0x00	; 0
    e7de:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
    e7e2:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2340
      cnt++;
    e7e4:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    e7e6:	b6 cf       	rjmp	.-148    	; 0xe754 <mqtt_callback(char*, unsigned char*, unsigned int)+0x476>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2345
      cnt++;
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    e7e8:	6d e0       	ldi	r22, 0x0D	; 13
    e7ea:	76 e5       	ldi	r23, 0x56	; 86
    e7ec:	c5 01       	movw	r24, r10
    e7ee:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2346
  strcat(str1, device.nazev);
    e7f2:	69 ee       	ldi	r22, 0xE9	; 233
    e7f4:	7e e0       	ldi	r23, 0x0E	; 14
    e7f6:	c5 01       	movw	r24, r10
    e7f8:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347
  strcat(str1, "/tds/clear");
    e7fc:	66 e0       	ldi	r22, 0x06	; 6
    e7fe:	76 e0       	ldi	r23, 0x06	; 6
    e800:	c5 01       	movw	r24, r10
    e802:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2348
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e806:	f5 01       	movw	r30, r10
    e808:	01 90       	ld	r0, Z+
    e80a:	00 20       	and	r0, r0
    e80c:	e9 f7       	brne	.-6      	; 0xe808 <mqtt_callback(char*, unsigned char*, unsigned int)+0x52a>
    e80e:	31 97       	sbiw	r30, 0x01	; 1
    e810:	af 01       	movw	r20, r30
    e812:	4a 19       	sub	r20, r10
    e814:	5b 09       	sbc	r21, r11
    e816:	b4 01       	movw	r22, r8
    e818:	c5 01       	movw	r24, r10
    e81a:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    e81e:	89 2b       	or	r24, r25
    e820:	99 f4       	brne	.+38     	; 0xe848 <mqtt_callback(char*, unsigned char*, unsigned int)+0x56a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2350
  {
    mqtt_process_message++;
    e822:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    e826:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    e82a:	01 96       	adiw	r24, 0x01	; 1
    e82c:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    e830:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2351
    id = atoi(my_payload);
    e834:	84 ec       	ldi	r24, 0xC4	; 196
    e836:	98 e0       	ldi	r25, 0x08	; 8
    e838:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    e83c:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2352
    if (id < HW_ONEWIRE_MAXROMS)
    e83e:	86 30       	cpi	r24, 0x06	; 6
    e840:	08 f0       	brcs	.+2      	; 0xe844 <mqtt_callback(char*, unsigned char*, unsigned int)+0x566>
    e842:	83 c0       	rjmp	.+262    	; 0xe94a <mqtt_callback(char*, unsigned char*, unsigned int)+0x66c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2353
      tds_set_clear(id);
    e844:	0e 94 4a 85 	call	0x10a94	; 0x10a94 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2362
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///

  //// thermctl-in/XXXXX/rtds/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
    e848:	6d e0       	ldi	r22, 0x0D	; 13
    e84a:	76 e5       	ldi	r23, 0x56	; 86
    e84c:	c5 01       	movw	r24, r10
    e84e:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2363
  strcat(str1, device.nazev);
    e852:	69 ee       	ldi	r22, 0xE9	; 233
    e854:	7e e0       	ldi	r23, 0x0E	; 14
    e856:	c5 01       	movw	r24, r10
    e858:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2364
  strcat(str1, "/rtds/register");
    e85c:	62 e2       	ldi	r22, 0x22	; 34
    e85e:	76 e0       	ldi	r23, 0x06	; 6
    e860:	c5 01       	movw	r24, r10
    e862:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2365
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e866:	f5 01       	movw	r30, r10
    e868:	01 90       	ld	r0, Z+
    e86a:	00 20       	and	r0, r0
    e86c:	e9 f7       	brne	.-6      	; 0xe868 <mqtt_callback(char*, unsigned char*, unsigned int)+0x58a>
    e86e:	31 97       	sbiw	r30, 0x01	; 1
    e870:	af 01       	movw	r20, r30
    e872:	4a 19       	sub	r20, r10
    e874:	5b 09       	sbc	r21, r11
    e876:	b4 01       	movw	r22, r8
    e878:	c5 01       	movw	r24, r10
    e87a:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    e87e:	89 2b       	or	r24, r25
    e880:	d1 f4       	brne	.+52     	; 0xe8b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2367
  {
    mqtt_process_message++;
    e882:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    e886:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    e88a:	01 96       	adiw	r24, 0x01	; 1
    e88c:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    e890:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2368
    if (remote_tds_name_exist(my_payload) == 255)
    e894:	84 ec       	ldi	r24, 0xC4	; 196
    e896:	98 e0       	ldi	r25, 0x08	; 8
    e898:	0e 94 4e 40 	call	0x809c	; 0x809c <remote_tds_name_exist(char*)>
    e89c:	8f 3f       	cpi	r24, 0xFF	; 255
    e89e:	59 f4       	brne	.+22     	; 0xe8b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2370
    {
      id = remote_tds_find_free();
    e8a0:	0e 94 0a 40 	call	0x8014	; 0x8014 <remote_tds_find_free()>
    e8a4:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2371
      remote_tds_set_complete(id, 1, my_payload);
    e8a6:	44 ec       	ldi	r20, 0xC4	; 196
    e8a8:	58 e0       	ldi	r21, 0x08	; 8
    e8aa:	61 e0       	ldi	r22, 0x01	; 1
    e8ac:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2372
      remote_tds_subscibe_topic(id);
    e8b0:	81 2f       	mov	r24, r17
    e8b2:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2378
    }
    ///TODO - vratit ze jiz existuje
  }

  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    e8b6:	6d e0       	ldi	r22, 0x0D	; 13
    e8b8:	76 e5       	ldi	r23, 0x56	; 86
    e8ba:	c5 01       	movw	r24, r10
    e8bc:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2379
  strcat(str1, device.nazev);
    e8c0:	69 ee       	ldi	r22, 0xE9	; 233
    e8c2:	7e e0       	ldi	r23, 0x0E	; 14
    e8c4:	c5 01       	movw	r24, r10
    e8c6:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2380
  strcat(str1, "/rtds/set/");
    e8ca:	61 e3       	ldi	r22, 0x31	; 49
    e8cc:	76 e0       	ldi	r23, 0x06	; 6
    e8ce:	c5 01       	movw	r24, r10
    e8d0:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2381
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e8d4:	f5 01       	movw	r30, r10
    e8d6:	01 90       	ld	r0, Z+
    e8d8:	00 20       	and	r0, r0
    e8da:	e9 f7       	brne	.-6      	; 0xe8d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5f8>
    e8dc:	31 97       	sbiw	r30, 0x01	; 1
    e8de:	af 01       	movw	r20, r30
    e8e0:	4a 19       	sub	r20, r10
    e8e2:	5b 09       	sbc	r21, r11
    e8e4:	b4 01       	movw	r22, r8
    e8e6:	c5 01       	movw	r24, r10
    e8e8:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    e8ec:	89 2b       	or	r24, r25
    e8ee:	09 f0       	breq	.+2      	; 0xe8f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x614>
    e8f0:	6e c0       	rjmp	.+220    	; 0xe9ce <mqtt_callback(char*, unsigned char*, unsigned int)+0x6f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2383
  {
    mqtt_process_message++;
    e8f2:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    e8f6:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    e8fa:	01 96       	adiw	r24, 0x01	; 1
    e8fc:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    e900:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2385
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e904:	f5 01       	movw	r30, r10
    e906:	01 90       	ld	r0, Z+
    e908:	00 20       	and	r0, r0
    e90a:	e9 f7       	brne	.-6      	; 0xe906 <mqtt_callback(char*, unsigned char*, unsigned int)+0x628>
    e90c:	31 97       	sbiw	r30, 0x01	; 1
    e90e:	ea 19       	sub	r30, r10
    e910:	fb 09       	sbc	r31, r11
    e912:	9e 2f       	mov	r25, r30
    e914:	4e 2f       	mov	r20, r30
    e916:	84 2f       	mov	r24, r20
    e918:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2385 (discriminator 3)
    e91a:	24 2f       	mov	r18, r20
    e91c:	30 e0       	ldi	r19, 0x00	; 0
    e91e:	d4 01       	movw	r26, r8
    e920:	0d 90       	ld	r0, X+
    e922:	00 20       	and	r0, r0
    e924:	e9 f7       	brne	.-6      	; 0xe920 <mqtt_callback(char*, unsigned char*, unsigned int)+0x642>
    e926:	11 97       	sbiw	r26, 0x01	; 1
    e928:	a8 19       	sub	r26, r8
    e92a:	b9 09       	sbc	r27, r9
    e92c:	2a 17       	cp	r18, r26
    e92e:	3b 07       	cpc	r19, r27
    e930:	98 f4       	brcc	.+38     	; 0xe958 <mqtt_callback(char*, unsigned char*, unsigned int)+0x67a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2387 (discriminator 2)
    {
      str1[cnt] = topic[f];
    e932:	d5 01       	movw	r26, r10
    e934:	a8 0f       	add	r26, r24
    e936:	b1 1d       	adc	r27, r1
    e938:	28 0d       	add	r18, r8
    e93a:	39 1d       	adc	r19, r9
    e93c:	f9 01       	movw	r30, r18
    e93e:	80 81       	ld	r24, Z
    e940:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2388 (discriminator 2)
      str1[cnt + 1] = 0;
    e942:	11 96       	adiw	r26, 0x01	; 1
    e944:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2385 (discriminator 2)
  strcat(str1, "/rtds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e946:	4f 5f       	subi	r20, 0xFF	; 255
    e948:	e6 cf       	rjmp	.-52     	; 0xe916 <mqtt_callback(char*, unsigned char*, unsigned int)+0x638>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2355
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    e94a:	61 e1       	ldi	r22, 0x11	; 17
    e94c:	76 e0       	ldi	r23, 0x06	; 6
    e94e:	8d ee       	ldi	r24, 0xED	; 237
    e950:	9b e0       	ldi	r25, 0x0B	; 11
    e952:	0e 94 ed 82 	call	0x105da	; 0x105da <log_error(PubSubClient*, char*)>
    e956:	78 cf       	rjmp	.-272    	; 0xe848 <mqtt_callback(char*, unsigned char*, unsigned int)+0x56a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2392
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e958:	67 e1       	ldi	r22, 0x17	; 23
    e95a:	73 e0       	ldi	r23, 0x03	; 3
    e95c:	c5 01       	movw	r24, r10
    e95e:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2391
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e962:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2393
    pch = strtok (str1, "/");
    while (pch != NULL)
    e964:	00 97       	sbiw	r24, 0x00	; 0
    e966:	99 f1       	breq	.+102    	; 0xe9ce <mqtt_callback(char*, unsigned char*, unsigned int)+0x6f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2395
    {
      if (cnt == 0) id = atoi(pch);
    e968:	01 11       	cpse	r16, r1
    e96a:	0b c0       	rjmp	.+22     	; 0xe982 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2395 (discriminator 1)
    e96c:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    e970:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2409
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
    e972:	67 e1       	ldi	r22, 0x17	; 23
    e974:	73 e0       	ldi	r23, 0x03	; 3
    e976:	90 e0       	ldi	r25, 0x00	; 0
    e978:	80 e0       	ldi	r24, 0x00	; 0
    e97a:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2410
      cnt++;
    e97e:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2393
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    e980:	f1 cf       	rjmp	.-30     	; 0xe964 <mqtt_callback(char*, unsigned char*, unsigned int)+0x686>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2396
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
    e982:	01 30       	cpi	r16, 0x01	; 1
    e984:	b1 f7       	brne	.-20     	; 0xe972 <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2396 (discriminator 1)
    e986:	67 e5       	ldi	r22, 0x57	; 87
    e988:	73 e0       	ldi	r23, 0x03	; 3
    e98a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    e98e:	89 2b       	or	r24, r25
    e990:	81 f7       	brne	.-32     	; 0xe972 <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2398
      {
        remote_tds_get_active(id, &active);
    e992:	be 01       	movw	r22, r28
    e994:	68 53       	subi	r22, 0x38	; 56
    e996:	7f 4f       	sbci	r23, 0xFF	; 255
    e998:	81 2f       	mov	r24, r17
    e99a:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2399
        if (active == 0)
    e99e:	c8 53       	subi	r28, 0x38	; 56
    e9a0:	df 4f       	sbci	r29, 0xFF	; 255
    e9a2:	88 81       	ld	r24, Y
    e9a4:	c8 5c       	subi	r28, 0xC8	; 200
    e9a6:	d0 40       	sbci	r29, 0x00	; 0
    e9a8:	81 11       	cpse	r24, r1
    e9aa:	0a c0       	rjmp	.+20     	; 0xe9c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2401
        {
          remote_tds_set_complete(id, 1, my_payload);
    e9ac:	44 ec       	ldi	r20, 0xC4	; 196
    e9ae:	58 e0       	ldi	r21, 0x08	; 8
    e9b0:	61 e0       	ldi	r22, 0x01	; 1
    e9b2:	81 2f       	mov	r24, r17
    e9b4:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2402
          remote_tds_subscibe_topic(id);
    e9b8:	81 2f       	mov	r24, r17
    e9ba:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <remote_tds_subscibe_topic(unsigned char)>
    e9be:	d9 cf       	rjmp	.-78     	; 0xe972 <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2406
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
    e9c0:	6c e3       	ldi	r22, 0x3C	; 60
    e9c2:	76 e0       	ldi	r23, 0x06	; 6
    e9c4:	8d ee       	ldi	r24, 0xED	; 237
    e9c6:	9b e0       	ldi	r25, 0x0B	; 11
    e9c8:	0e 94 ed 82 	call	0x105da	; 0x105da <log_error(PubSubClient*, char*)>
    e9cc:	d2 cf       	rjmp	.-92     	; 0xe972 <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2416
    }
  }

  ////
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    e9ce:	6d e0       	ldi	r22, 0x0D	; 13
    e9d0:	76 e5       	ldi	r23, 0x56	; 86
    e9d2:	c5 01       	movw	r24, r10
    e9d4:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2417
  strcat(str1, device.nazev);
    e9d8:	69 ee       	ldi	r22, 0xE9	; 233
    e9da:	7e e0       	ldi	r23, 0x0E	; 14
    e9dc:	c5 01       	movw	r24, r10
    e9de:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2418
  strcat(str1, "/rtds/clear");
    e9e2:	6c e4       	ldi	r22, 0x4C	; 76
    e9e4:	76 e0       	ldi	r23, 0x06	; 6
    e9e6:	c5 01       	movw	r24, r10
    e9e8:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2419
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e9ec:	f5 01       	movw	r30, r10
    e9ee:	01 90       	ld	r0, Z+
    e9f0:	00 20       	and	r0, r0
    e9f2:	e9 f7       	brne	.-6      	; 0xe9ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x710>
    e9f4:	31 97       	sbiw	r30, 0x01	; 1
    e9f6:	af 01       	movw	r20, r30
    e9f8:	4a 19       	sub	r20, r10
    e9fa:	5b 09       	sbc	r21, r11
    e9fc:	b4 01       	movw	r22, r8
    e9fe:	c5 01       	movw	r24, r10
    ea00:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    ea04:	89 2b       	or	r24, r25
    ea06:	99 f4       	brne	.+38     	; 0xea2e <mqtt_callback(char*, unsigned char*, unsigned int)+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2421
  {
    mqtt_process_message++;
    ea08:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    ea0c:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    ea10:	01 96       	adiw	r24, 0x01	; 1
    ea12:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    ea16:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2422
    id = atoi(my_payload);
    ea1a:	84 ec       	ldi	r24, 0xC4	; 196
    ea1c:	98 e0       	ldi	r25, 0x08	; 8
    ea1e:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    ea22:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2423
    remote_tds_unsubscibe_topic(id);
    ea24:	0e 94 cd 3f 	call	0x7f9a	; 0x7f9a <remote_tds_unsubscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2425
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
    ea28:	81 2f       	mov	r24, r17
    ea2a:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2429
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    ea2e:	6d e0       	ldi	r22, 0x0D	; 13
    ea30:	76 e5       	ldi	r23, 0x56	; 86
    ea32:	c5 01       	movw	r24, r10
    ea34:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2430
  strcat(str1, device.nazev);
    ea38:	69 ee       	ldi	r22, 0xE9	; 233
    ea3a:	7e e0       	ldi	r23, 0x0E	; 14
    ea3c:	c5 01       	movw	r24, r10
    ea3e:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2431
  strcat(str1, "/rtds/get");
    ea42:	68 e5       	ldi	r22, 0x58	; 88
    ea44:	76 e0       	ldi	r23, 0x06	; 6
    ea46:	c5 01       	movw	r24, r10
    ea48:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2432
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ea4c:	f5 01       	movw	r30, r10
    ea4e:	01 90       	ld	r0, Z+
    ea50:	00 20       	and	r0, r0
    ea52:	e9 f7       	brne	.-6      	; 0xea4e <mqtt_callback(char*, unsigned char*, unsigned int)+0x770>
    ea54:	31 97       	sbiw	r30, 0x01	; 1
    ea56:	af 01       	movw	r20, r30
    ea58:	4a 19       	sub	r20, r10
    ea5a:	5b 09       	sbc	r21, r11
    ea5c:	b4 01       	movw	r22, r8
    ea5e:	c5 01       	movw	r24, r10
    ea60:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    ea64:	89 2b       	or	r24, r25
    ea66:	11 f4       	brne	.+4      	; 0xea6c <mqtt_callback(char*, unsigned char*, unsigned int)+0x78e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
  {
    send_mqtt_remote_tds_status();
    ea68:	0e 94 8e 46 	call	0x8d1c	; 0x8d1c <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy(str1, "/rtds/");
    ea6c:	62 e1       	ldi	r22, 0x12	; 18
    ea6e:	73 e0       	ldi	r23, 0x03	; 3
    ea70:	c5 01       	movw	r24, r10
    ea72:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ea76:	f5 01       	movw	r30, r10
    ea78:	01 90       	ld	r0, Z+
    ea7a:	00 20       	and	r0, r0
    ea7c:	e9 f7       	brne	.-6      	; 0xea78 <mqtt_callback(char*, unsigned char*, unsigned int)+0x79a>
    ea7e:	31 97       	sbiw	r30, 0x01	; 1
    ea80:	af 01       	movw	r20, r30
    ea82:	4a 19       	sub	r20, r10
    ea84:	5b 09       	sbc	r21, r11
    ea86:	b4 01       	movw	r22, r8
    ea88:	c5 01       	movw	r24, r10
    ea8a:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    ea8e:	89 2b       	or	r24, r25
    ea90:	09 f0       	breq	.+2      	; 0xea94 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7b6>
    ea92:	55 c0       	rjmp	.+170    	; 0xeb3e <mqtt_callback(char*, unsigned char*, unsigned int)+0x860>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2441
  {
    mqtt_process_message++;
    ea94:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    ea98:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    ea9c:	01 96       	adiw	r24, 0x01	; 1
    ea9e:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    eaa2:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2443
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    eaa6:	f5 01       	movw	r30, r10
    eaa8:	01 90       	ld	r0, Z+
    eaaa:	00 20       	and	r0, r0
    eaac:	e9 f7       	brne	.-6      	; 0xeaa8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7ca>
    eaae:	31 97       	sbiw	r30, 0x01	; 1
    eab0:	ea 19       	sub	r30, r10
    eab2:	fb 09       	sbc	r31, r11
    eab4:	9e 2f       	mov	r25, r30
    eab6:	4e 2f       	mov	r20, r30
    eab8:	84 2f       	mov	r24, r20
    eaba:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2443 (discriminator 3)
    eabc:	24 2f       	mov	r18, r20
    eabe:	30 e0       	ldi	r19, 0x00	; 0
    eac0:	d4 01       	movw	r26, r8
    eac2:	0d 90       	ld	r0, X+
    eac4:	00 20       	and	r0, r0
    eac6:	e9 f7       	brne	.-6      	; 0xeac2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7e4>
    eac8:	11 97       	sbiw	r26, 0x01	; 1
    eaca:	a8 19       	sub	r26, r8
    eacc:	b9 09       	sbc	r27, r9
    eace:	2a 17       	cp	r18, r26
    ead0:	3b 07       	cpc	r19, r27
    ead2:	60 f4       	brcc	.+24     	; 0xeaec <mqtt_callback(char*, unsigned char*, unsigned int)+0x80e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2445 (discriminator 2)
    {
      str1[cnt] = topic[f];
    ead4:	d5 01       	movw	r26, r10
    ead6:	a8 0f       	add	r26, r24
    ead8:	b1 1d       	adc	r27, r1
    eada:	28 0d       	add	r18, r8
    eadc:	39 1d       	adc	r19, r9
    eade:	f9 01       	movw	r30, r18
    eae0:	80 81       	ld	r24, Z
    eae2:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2446 (discriminator 2)
      str1[cnt + 1] = 0;
    eae4:	11 96       	adiw	r26, 0x01	; 1
    eae6:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2443 (discriminator 2)
  strcpy(str1, "/rtds/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    eae8:	4f 5f       	subi	r20, 0xFF	; 255
    eaea:	e6 cf       	rjmp	.-52     	; 0xeab8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2449
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    eaec:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2451
    {
      uint8_t active = 0;
    eaee:	c8 57       	subi	r28, 0x78	; 120
    eaf0:	df 4f       	sbci	r29, 0xFF	; 255
    eaf2:	18 82       	st	Y, r1
    eaf4:	c8 58       	subi	r28, 0x88	; 136
    eaf6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2452
      remote_tds_get_complete(idx, &active, tmp1);
    eaf8:	ae 01       	movw	r20, r28
    eafa:	48 55       	subi	r20, 0x58	; 88
    eafc:	5f 4f       	sbci	r21, 0xFF	; 255
    eafe:	be 01       	movw	r22, r28
    eb00:	68 57       	subi	r22, 0x78	; 120
    eb02:	7f 4f       	sbci	r23, 0xFF	; 255
    eb04:	80 2f       	mov	r24, r16
    eb06:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2453
      if (active == 1 && strcmp(tmp1, str1) == 0)
    eb0a:	c8 57       	subi	r28, 0x78	; 120
    eb0c:	df 4f       	sbci	r29, 0xFF	; 255
    eb0e:	88 81       	ld	r24, Y
    eb10:	c8 58       	subi	r28, 0x88	; 136
    eb12:	d0 40       	sbci	r29, 0x00	; 0
    eb14:	81 30       	cpi	r24, 0x01	; 1
    eb16:	81 f4       	brne	.+32     	; 0xeb38 <mqtt_callback(char*, unsigned char*, unsigned int)+0x85a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2453 (discriminator 1)
    eb18:	b5 01       	movw	r22, r10
    eb1a:	ce 01       	movw	r24, r28
    eb1c:	88 55       	subi	r24, 0x58	; 88
    eb1e:	9f 4f       	sbci	r25, 0xFF	; 255
    eb20:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    eb24:	89 2b       	or	r24, r25
    eb26:	41 f4       	brne	.+16     	; 0xeb38 <mqtt_callback(char*, unsigned char*, unsigned int)+0x85a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2455
      {
        remote_tds_set_data(idx, atoi(my_payload));
    eb28:	84 ec       	ldi	r24, 0xC4	; 196
    eb2a:	98 e0       	ldi	r25, 0x08	; 8
    eb2c:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    eb30:	bc 01       	movw	r22, r24
    eb32:	80 2f       	mov	r24, r16
    eb34:	0e 94 da 40 	call	0x81b4	; 0x81b4 <remote_tds_set_data(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2449 (discriminator 2)
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    eb38:	0f 5f       	subi	r16, 0xFF	; 255
    eb3a:	0a 30       	cpi	r16, 0x0A	; 10
    eb3c:	c1 f6       	brne	.-80     	; 0xeaee <mqtt_callback(char*, unsigned char*, unsigned int)+0x810>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2459
      {
        remote_tds_set_data(idx, atoi(my_payload));
      }
    }
  }
  strcpy(str1, "/rtds/list");
    eb3e:	62 e6       	ldi	r22, 0x62	; 98
    eb40:	76 e0       	ldi	r23, 0x06	; 6
    eb42:	c5 01       	movw	r24, r10
    eb44:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2474
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    eb48:	6d e0       	ldi	r22, 0x0D	; 13
    eb4a:	76 e5       	ldi	r23, 0x56	; 86
    eb4c:	c5 01       	movw	r24, r10
    eb4e:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2475
  strcat(str1, device.nazev);
    eb52:	69 ee       	ldi	r22, 0xE9	; 233
    eb54:	7e e0       	ldi	r23, 0x0E	; 14
    eb56:	c5 01       	movw	r24, r10
    eb58:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
  strcat(str1, "/prog/set/");
    eb5c:	6d e6       	ldi	r22, 0x6D	; 109
    eb5e:	76 e0       	ldi	r23, 0x06	; 6
    eb60:	c5 01       	movw	r24, r10
    eb62:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2477
  if (strncmp(str1, topic, strlen(str1)) == 0)
    eb66:	f5 01       	movw	r30, r10
    eb68:	01 90       	ld	r0, Z+
    eb6a:	00 20       	and	r0, r0
    eb6c:	e9 f7       	brne	.-6      	; 0xeb68 <mqtt_callback(char*, unsigned char*, unsigned int)+0x88a>
    eb6e:	31 97       	sbiw	r30, 0x01	; 1
    eb70:	af 01       	movw	r20, r30
    eb72:	4a 19       	sub	r20, r10
    eb74:	5b 09       	sbc	r21, r11
    eb76:	b4 01       	movw	r22, r8
    eb78:	c5 01       	movw	r24, r10
    eb7a:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    eb7e:	89 2b       	or	r24, r25
    eb80:	09 f0       	breq	.+2      	; 0xeb84 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8a6>
    eb82:	45 c0       	rjmp	.+138    	; 0xec0e <mqtt_callback(char*, unsigned char*, unsigned int)+0x930>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2479
  {
    mqtt_process_message++;
    eb84:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    eb88:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    eb8c:	01 96       	adiw	r24, 0x01	; 1
    eb8e:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    eb92:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2481
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    eb96:	f5 01       	movw	r30, r10
    eb98:	01 90       	ld	r0, Z+
    eb9a:	00 20       	and	r0, r0
    eb9c:	e9 f7       	brne	.-6      	; 0xeb98 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ba>
    eb9e:	31 97       	sbiw	r30, 0x01	; 1
    eba0:	ea 19       	sub	r30, r10
    eba2:	fb 09       	sbc	r31, r11
    eba4:	9e 2f       	mov	r25, r30
    eba6:	4e 2f       	mov	r20, r30
    eba8:	84 2f       	mov	r24, r20
    ebaa:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2481 (discriminator 3)
    ebac:	24 2f       	mov	r18, r20
    ebae:	30 e0       	ldi	r19, 0x00	; 0
    ebb0:	d4 01       	movw	r26, r8
    ebb2:	0d 90       	ld	r0, X+
    ebb4:	00 20       	and	r0, r0
    ebb6:	e9 f7       	brne	.-6      	; 0xebb2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d4>
    ebb8:	11 97       	sbiw	r26, 0x01	; 1
    ebba:	a8 19       	sub	r26, r8
    ebbc:	b9 09       	sbc	r27, r9
    ebbe:	2a 17       	cp	r18, r26
    ebc0:	3b 07       	cpc	r19, r27
    ebc2:	60 f4       	brcc	.+24     	; 0xebdc <mqtt_callback(char*, unsigned char*, unsigned int)+0x8fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2483 (discriminator 2)
    {
      str1[cnt] = topic[f];
    ebc4:	d5 01       	movw	r26, r10
    ebc6:	a8 0f       	add	r26, r24
    ebc8:	b1 1d       	adc	r27, r1
    ebca:	28 0d       	add	r18, r8
    ebcc:	39 1d       	adc	r19, r9
    ebce:	f9 01       	movw	r30, r18
    ebd0:	80 81       	ld	r24, Z
    ebd2:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2484 (discriminator 2)
      str1[cnt + 1] = 0;
    ebd4:	11 96       	adiw	r26, 0x01	; 1
    ebd6:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2481 (discriminator 2)
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ebd8:	4f 5f       	subi	r20, 0xFF	; 255
    ebda:	e6 cf       	rjmp	.-52     	; 0xeba8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2488
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    ebdc:	67 e1       	ldi	r22, 0x17	; 23
    ebde:	73 e0       	ldi	r23, 0x03	; 3
    ebe0:	c5 01       	movw	r24, r10
    ebe2:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
    ebe6:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2487
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    ebe8:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2489
    pch = strtok (str1, "/");
    while (pch != NULL)
    ebea:	e1 14       	cp	r14, r1
    ebec:	f1 04       	cpc	r15, r1
    ebee:	79 f0       	breq	.+30     	; 0xec0e <mqtt_callback(char*, unsigned char*, unsigned int)+0x930>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2491
    {
      if (cnt == 0) id = atoi(pch);
    ebf0:	01 11       	cpse	r16, r1
    ebf2:	bc c0       	rjmp	.+376    	; 0xed6c <mqtt_callback(char*, unsigned char*, unsigned int)+0xa8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2491 (discriminator 1)
    ebf4:	c7 01       	movw	r24, r14
    ebf6:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    ebfa:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2492 (discriminator 1)
      if (id < AVAILABLE_PROGRAM)
    ebfc:	88 30       	cpi	r24, 0x08	; 8
    ebfe:	08 f4       	brcc	.+2      	; 0xec02 <mqtt_callback(char*, unsigned char*, unsigned int)+0x924>
    ec00:	d5 c0       	rjmp	.+426    	; 0xedac <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2499
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    ec02:	68 e7       	ldi	r22, 0x78	; 120
    ec04:	76 e0       	ldi	r23, 0x06	; 6
    ec06:	8d ee       	ldi	r24, 0xED	; 237
    ec08:	9b e0       	ldi	r25, 0x0B	; 11
    ec0a:	0e 94 ed 82 	call	0x105da	; 0x105da <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
      pch = strtok (NULL, "/");
      cnt++;
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    ec0e:	6d e0       	ldi	r22, 0x0D	; 13
    ec10:	76 e5       	ldi	r23, 0x56	; 86
    ec12:	c5 01       	movw	r24, r10
    ec14:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508
  strcat(str1, device.nazev);
    ec18:	69 ee       	ldi	r22, 0xE9	; 233
    ec1a:	7e e0       	ldi	r23, 0x0E	; 14
    ec1c:	c5 01       	movw	r24, r10
    ec1e:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509
  strcat(str1, "/prog/clear");
    ec22:	68 e8       	ldi	r22, 0x88	; 136
    ec24:	76 e0       	ldi	r23, 0x06	; 6
    ec26:	c5 01       	movw	r24, r10
    ec28:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2510
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ec2c:	f5 01       	movw	r30, r10
    ec2e:	01 90       	ld	r0, Z+
    ec30:	00 20       	and	r0, r0
    ec32:	e9 f7       	brne	.-6      	; 0xec2e <mqtt_callback(char*, unsigned char*, unsigned int)+0x950>
    ec34:	31 97       	sbiw	r30, 0x01	; 1
    ec36:	af 01       	movw	r20, r30
    ec38:	4a 19       	sub	r20, r10
    ec3a:	5b 09       	sbc	r21, r11
    ec3c:	b4 01       	movw	r22, r8
    ec3e:	c5 01       	movw	r24, r10
    ec40:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    ec44:	89 2b       	or	r24, r25
    ec46:	09 f0       	breq	.+2      	; 0xec4a <mqtt_callback(char*, unsigned char*, unsigned int)+0x96c>
    ec48:	47 c0       	rjmp	.+142    	; 0xecd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2512
  {
    mqtt_process_message++;
    ec4a:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    ec4e:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    ec52:	01 96       	adiw	r24, 0x01	; 1
    ec54:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    ec58:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2513
    id = atoi(my_payload);
    ec5c:	84 ec       	ldi	r24, 0xC4	; 196
    ec5e:	98 e0       	ldi	r25, 0x08	; 8
    ec60:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    ec64:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2514
    if (id < AVAILABLE_PROGRAM)
    ec66:	88 30       	cpi	r24, 0x08	; 8
    ec68:	08 f0       	brcs	.+2      	; 0xec6c <mqtt_callback(char*, unsigned char*, unsigned int)+0x98e>
    ec6a:	a9 c0       	rjmp	.+338    	; 0xedbe <mqtt_callback(char*, unsigned char*, unsigned int)+0xae0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2516
    {
      strcpy_P(tmp2, text_prog);
    ec6c:	68 ea       	ldi	r22, 0xA8	; 168
    ec6e:	76 e5       	ldi	r23, 0x56	; 86
    ec70:	ce 01       	movw	r24, r28
    ec72:	88 57       	subi	r24, 0x78	; 120
    ec74:	9f 4f       	sbci	r25, 0xFF	; 255
    ec76:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2517
      thermostat_program_set_name(id, tmp2);
    ec7a:	be 01       	movw	r22, r28
    ec7c:	68 57       	subi	r22, 0x78	; 120
    ec7e:	7f 4f       	sbci	r23, 0xFF	; 255
    ec80:	81 2f       	mov	r24, r17
    ec82:	0e 94 04 8b 	call	0x11608	; 0x11608 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2518
      thermostat_program_set_active(id, PROG_FREE);
    ec86:	6f ef       	ldi	r22, 0xFF	; 255
    ec88:	81 2f       	mov	r24, r17
    ec8a:	0e 94 34 8b 	call	0x11668	; 0x11668 <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2519
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    ec8e:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2521 (discriminator 2)
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    ec90:	c1 2c       	mov	r12, r1
    ec92:	e1 2c       	mov	r14, r1
    ec94:	00 e0       	ldi	r16, 0x00	; 0
    ec96:	20 e0       	ldi	r18, 0x00	; 0
    ec98:	40 e0       	ldi	r20, 0x00	; 0
    ec9a:	6f 2d       	mov	r22, r15
    ec9c:	81 2f       	mov	r24, r17
    ec9e:	0e 94 8f 8b 	call	0x1171e	; 0x1171e <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2522 (discriminator 2)
        thermostat_program_set_threshold(id, progid, 220);
    eca2:	4c ed       	ldi	r20, 0xDC	; 220
    eca4:	50 e0       	ldi	r21, 0x00	; 0
    eca6:	6f 2d       	mov	r22, r15
    eca8:	81 2f       	mov	r24, r17
    ecaa:	0e 94 ed 8b 	call	0x117da	; 0x117da <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2523 (discriminator 2)
        thermostat_program_set_week(id, progid, 0);
    ecae:	40 e0       	ldi	r20, 0x00	; 0
    ecb0:	6f 2d       	mov	r22, r15
    ecb2:	81 2f       	mov	r24, r17
    ecb4:	0e 94 16 8c 	call	0x1182c	; 0x1182c <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2519 (discriminator 2)
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy_P(tmp2, text_prog);
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    ecb8:	f3 94       	inc	r15
    ecba:	fb e0       	ldi	r31, 0x0B	; 11
    ecbc:	ff 12       	cpse	r15, r31
    ecbe:	e8 cf       	rjmp	.-48     	; 0xec90 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2527
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
    ecc0:	80 2f       	mov	r24, r16
    ecc2:	0e 94 2d 89 	call	0x1125a	; 0x1125a <thermostat_ring_get_program_id(unsigned char)>
    ecc6:	81 13       	cpse	r24, r17
    ecc8:	04 c0       	rjmp	.+8      	; 0xecd2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2529
        {
          thermostat_ring_set_program_id(tix, PROG_FREE);
    ecca:	6f ef       	ldi	r22, 0xFF	; 255
    eccc:	80 2f       	mov	r24, r16
    ecce:	0e 94 35 89 	call	0x1126a	; 0x1126a <thermostat_ring_set_program_id(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2525 (discriminator 2)
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    ecd2:	0f 5f       	subi	r16, 0xFF	; 255
    ecd4:	05 30       	cpi	r16, 0x05	; 5
    ecd6:	a1 f7       	brne	.-24     	; 0xecc0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2539
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    ecd8:	6d e0       	ldi	r22, 0x0D	; 13
    ecda:	76 e5       	ldi	r23, 0x56	; 86
    ecdc:	c5 01       	movw	r24, r10
    ecde:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2540
  strcat(str1, device.nazev);
    ece2:	69 ee       	ldi	r22, 0xE9	; 233
    ece4:	7e e0       	ldi	r23, 0x0E	; 14
    ece6:	c5 01       	movw	r24, r10
    ece8:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2541
  strcat(str1, "/prog_interval/set/");
    ecec:	66 ea       	ldi	r22, 0xA6	; 166
    ecee:	76 e0       	ldi	r23, 0x06	; 6
    ecf0:	c5 01       	movw	r24, r10
    ecf2:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2542
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ecf6:	f5 01       	movw	r30, r10
    ecf8:	01 90       	ld	r0, Z+
    ecfa:	00 20       	and	r0, r0
    ecfc:	e9 f7       	brne	.-6      	; 0xecf8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa1a>
    ecfe:	31 97       	sbiw	r30, 0x01	; 1
    ed00:	af 01       	movw	r20, r30
    ed02:	4a 19       	sub	r20, r10
    ed04:	5b 09       	sbc	r21, r11
    ed06:	b4 01       	movw	r22, r8
    ed08:	c5 01       	movw	r24, r10
    ed0a:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    ed0e:	89 2b       	or	r24, r25
    ed10:	09 f0       	breq	.+2      	; 0xed14 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa36>
    ed12:	bb c0       	rjmp	.+374    	; 0xee8a <mqtt_callback(char*, unsigned char*, unsigned int)+0xbac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2544
  {
    mqtt_process_message++;
    ed14:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    ed18:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    ed1c:	01 96       	adiw	r24, 0x01	; 1
    ed1e:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    ed22:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2546
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ed26:	f5 01       	movw	r30, r10
    ed28:	01 90       	ld	r0, Z+
    ed2a:	00 20       	and	r0, r0
    ed2c:	e9 f7       	brne	.-6      	; 0xed28 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4a>
    ed2e:	31 97       	sbiw	r30, 0x01	; 1
    ed30:	ea 19       	sub	r30, r10
    ed32:	fb 09       	sbc	r31, r11
    ed34:	9e 2f       	mov	r25, r30
    ed36:	4e 2f       	mov	r20, r30
    ed38:	84 2f       	mov	r24, r20
    ed3a:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2546 (discriminator 3)
    ed3c:	24 2f       	mov	r18, r20
    ed3e:	30 e0       	ldi	r19, 0x00	; 0
    ed40:	d4 01       	movw	r26, r8
    ed42:	0d 90       	ld	r0, X+
    ed44:	00 20       	and	r0, r0
    ed46:	e9 f7       	brne	.-6      	; 0xed42 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa64>
    ed48:	11 97       	sbiw	r26, 0x01	; 1
    ed4a:	a8 19       	sub	r26, r8
    ed4c:	b9 09       	sbc	r27, r9
    ed4e:	2a 17       	cp	r18, r26
    ed50:	3b 07       	cpc	r19, r27
    ed52:	e0 f5       	brcc	.+120    	; 0xedcc <mqtt_callback(char*, unsigned char*, unsigned int)+0xaee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2548 (discriminator 2)
    {
      str1[cnt] = topic[f];
    ed54:	d5 01       	movw	r26, r10
    ed56:	a8 0f       	add	r26, r24
    ed58:	b1 1d       	adc	r27, r1
    ed5a:	28 0d       	add	r18, r8
    ed5c:	39 1d       	adc	r19, r9
    ed5e:	f9 01       	movw	r30, r18
    ed60:	80 81       	ld	r24, Z
    ed62:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2549 (discriminator 2)
      str1[cnt + 1] = 0;
    ed64:	11 96       	adiw	r26, 0x01	; 1
    ed66:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2546 (discriminator 2)
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ed68:	4f 5f       	subi	r20, 0xFF	; 255
    ed6a:	e6 cf       	rjmp	.-52     	; 0xed38 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2492
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    ed6c:	18 30       	cpi	r17, 0x08	; 8
    ed6e:	08 f0       	brcs	.+2      	; 0xed72 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa94>
    ed70:	48 cf       	rjmp	.-368    	; 0xec02 <mqtt_callback(char*, unsigned char*, unsigned int)+0x924>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2494
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    ed72:	01 30       	cpi	r16, 0x01	; 1
    ed74:	d9 f4       	brne	.+54     	; 0xedac <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2494 (discriminator 1)
    ed76:	67 e5       	ldi	r22, 0x57	; 87
    ed78:	73 e0       	ldi	r23, 0x03	; 3
    ed7a:	c7 01       	movw	r24, r14
    ed7c:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    ed80:	89 2b       	or	r24, r25
    ed82:	29 f4       	brne	.+10     	; 0xed8e <mqtt_callback(char*, unsigned char*, unsigned int)+0xab0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2494 (discriminator 2)
    ed84:	64 ec       	ldi	r22, 0xC4	; 196
    ed86:	78 e0       	ldi	r23, 0x08	; 8
    ed88:	81 2f       	mov	r24, r17
    ed8a:	0e 94 04 8b 	call	0x11608	; 0x11608 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2495
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    ed8e:	68 e7       	ldi	r22, 0x78	; 120
    ed90:	73 e0       	ldi	r23, 0x03	; 3
    ed92:	c7 01       	movw	r24, r14
    ed94:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    ed98:	89 2b       	or	r24, r25
    ed9a:	41 f4       	brne	.+16     	; 0xedac <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2495 (discriminator 2)
    ed9c:	84 ec       	ldi	r24, 0xC4	; 196
    ed9e:	98 e0       	ldi	r25, 0x08	; 8
    eda0:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    eda4:	68 2f       	mov	r22, r24
    eda6:	81 2f       	mov	r24, r17
    eda8:	0e 94 34 8b 	call	0x11668	; 0x11668 <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2502
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
    edac:	67 e1       	ldi	r22, 0x17	; 23
    edae:	73 e0       	ldi	r23, 0x03	; 3
    edb0:	90 e0       	ldi	r25, 0x00	; 0
    edb2:	80 e0       	ldi	r24, 0x00	; 0
    edb4:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
    edb8:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2503
      cnt++;
    edba:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2489
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    edbc:	16 cf       	rjmp	.-468    	; 0xebea <mqtt_callback(char*, unsigned char*, unsigned int)+0x90c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2535
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    edbe:	64 e9       	ldi	r22, 0x94	; 148
    edc0:	76 e0       	ldi	r23, 0x06	; 6
    edc2:	8d ee       	ldi	r24, 0xED	; 237
    edc4:	9b e0       	ldi	r25, 0x0B	; 11
    edc6:	0e 94 ed 82 	call	0x105da	; 0x105da <log_error(PubSubClient*, char*)>
    edca:	86 cf       	rjmp	.-244    	; 0xecd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2553
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    edcc:	67 e1       	ldi	r22, 0x17	; 23
    edce:	73 e0       	ldi	r23, 0x03	; 3
    edd0:	c5 01       	movw	r24, r10
    edd2:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
    edd6:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2238
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    edd8:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2552
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    edda:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554
    pch = strtok (str1, "/");
    while (pch != NULL)
    eddc:	e1 14       	cp	r14, r1
    edde:	f1 04       	cpc	r15, r1
    ede0:	09 f4       	brne	.+2      	; 0xede4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb06>
    ede2:	53 c0       	rjmp	.+166    	; 0xee8a <mqtt_callback(char*, unsigned char*, unsigned int)+0xbac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2556
    {
      if (cnt == 0) id = atoi(pch);
    ede4:	01 11       	cpse	r16, r1
    ede6:	43 c0       	rjmp	.+134    	; 0xee6e <mqtt_callback(char*, unsigned char*, unsigned int)+0xb90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2556 (discriminator 1)
    ede8:	c7 01       	movw	r24, r14
    edea:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    edee:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2558
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    edf0:	18 30       	cpi	r17, 0x08	; 8
    edf2:	08 f0       	brcs	.+2      	; 0xedf6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb18>
    edf4:	44 c0       	rjmp	.+136    	; 0xee7e <mqtt_callback(char*, unsigned char*, unsigned int)+0xba0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2558 (discriminator 1)
    edf6:	fa e0       	ldi	r31, 0x0A	; 10
    edf8:	fd 15       	cp	r31, r13
    edfa:	08 f4       	brcc	.+2      	; 0xedfe <mqtt_callback(char*, unsigned char*, unsigned int)+0xb20>
    edfc:	40 c0       	rjmp	.+128    	; 0xee7e <mqtt_callback(char*, unsigned char*, unsigned int)+0xba0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2560
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    edfe:	02 30       	cpi	r16, 0x02	; 2
    ee00:	69 f5       	brne	.+90     	; 0xee5c <mqtt_callback(char*, unsigned char*, unsigned int)+0xb7e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2560 (discriminator 1)
    ee02:	68 e7       	ldi	r22, 0x78	; 120
    ee04:	73 e0       	ldi	r23, 0x03	; 3
    ee06:	c7 01       	movw	r24, r14
    ee08:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    ee0c:	89 2b       	or	r24, r25
    ee0e:	49 f4       	brne	.+18     	; 0xee22 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2560 (discriminator 2)
    ee10:	84 ec       	ldi	r24, 0xC4	; 196
    ee12:	98 e0       	ldi	r25, 0x08	; 8
    ee14:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    ee18:	48 2f       	mov	r20, r24
    ee1a:	6d 2d       	mov	r22, r13
    ee1c:	81 2f       	mov	r24, r17
    ee1e:	0e 94 88 8c 	call	0x11910	; 0x11910 <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2561
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
    ee22:	6f e8       	ldi	r22, 0x8F	; 143
    ee24:	73 e0       	ldi	r23, 0x03	; 3
    ee26:	c7 01       	movw	r24, r14
    ee28:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    ee2c:	89 2b       	or	r24, r25
    ee2e:	49 f4       	brne	.+18     	; 0xee42 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2561 (discriminator 2)
    ee30:	84 ec       	ldi	r24, 0xC4	; 196
    ee32:	98 e0       	ldi	r25, 0x08	; 8
    ee34:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    ee38:	ac 01       	movw	r20, r24
    ee3a:	6d 2d       	mov	r22, r13
    ee3c:	81 2f       	mov	r24, r17
    ee3e:	0e 94 ed 8b 	call	0x117da	; 0x117da <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2562
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
    ee42:	6c ea       	ldi	r22, 0xAC	; 172
    ee44:	77 e0       	ldi	r23, 0x07	; 7
    ee46:	c7 01       	movw	r24, r14
    ee48:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    ee4c:	89 2b       	or	r24, r25
    ee4e:	31 f4       	brne	.+12     	; 0xee5c <mqtt_callback(char*, unsigned char*, unsigned int)+0xb7e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2562 (discriminator 2)
    ee50:	44 ec       	ldi	r20, 0xC4	; 196
    ee52:	58 e0       	ldi	r21, 0x08	; 8
    ee54:	6d 2d       	mov	r22, r13
    ee56:	81 2f       	mov	r24, r17
    ee58:	0e 94 24 8c 	call	0x11848	; 0x11848 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2569
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
    ee5c:	67 e1       	ldi	r22, 0x17	; 23
    ee5e:	73 e0       	ldi	r23, 0x03	; 3
    ee60:	90 e0       	ldi	r25, 0x00	; 0
    ee62:	80 e0       	ldi	r24, 0x00	; 0
    ee64:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
    ee68:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2570
      cnt++;
    ee6a:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    ee6c:	b7 cf       	rjmp	.-146    	; 0xeddc <mqtt_callback(char*, unsigned char*, unsigned int)+0xafe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2557
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
    ee6e:	01 30       	cpi	r16, 0x01	; 1
    ee70:	09 f0       	breq	.+2      	; 0xee74 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb96>
    ee72:	be cf       	rjmp	.-132    	; 0xedf0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2557 (discriminator 1)
    ee74:	c7 01       	movw	r24, r14
    ee76:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    ee7a:	d8 2e       	mov	r13, r24
    ee7c:	b9 cf       	rjmp	.-142    	; 0xedf0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2566
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
    ee7e:	6a eb       	ldi	r22, 0xBA	; 186
    ee80:	76 e0       	ldi	r23, 0x06	; 6
    ee82:	8d ee       	ldi	r24, 0xED	; 237
    ee84:	9b e0       	ldi	r25, 0x0B	; 11
    ee86:	0e 94 ed 82 	call	0x105da	; 0x105da <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2575
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
    ee8a:	6d e0       	ldi	r22, 0x0D	; 13
    ee8c:	76 e5       	ldi	r23, 0x56	; 86
    ee8e:	c5 01       	movw	r24, r10
    ee90:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2576
  strcat(str1, device.nazev);
    ee94:	69 ee       	ldi	r22, 0xE9	; 233
    ee96:	7e e0       	ldi	r23, 0x0E	; 14
    ee98:	c5 01       	movw	r24, r10
    ee9a:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2577
  strcat(str1, "/ring/default");
    ee9e:	63 ed       	ldi	r22, 0xD3	; 211
    eea0:	76 e0       	ldi	r23, 0x06	; 6
    eea2:	c5 01       	movw	r24, r10
    eea4:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2578
  if (strcmp(str1, topic) == 0)
    eea8:	b4 01       	movw	r22, r8
    eeaa:	c5 01       	movw	r24, r10
    eeac:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    eeb0:	89 2b       	or	r24, r25
    eeb2:	89 f4       	brne	.+34     	; 0xeed6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbf8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2580
  {
    mqtt_process_message++;
    eeb4:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    eeb8:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    eebc:	01 96       	adiw	r24, 0x01	; 1
    eebe:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    eec2:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2581
    default_ring = atoi(my_payload);
    eec6:	84 ec       	ldi	r24, 0xC4	; 196
    eec8:	98 e0       	ldi	r25, 0x08	; 8
    eeca:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    eece:	80 93 12 0a 	sts	0x0A12, r24	; 0x800a12 <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
    set_default_ring(default_ring);
    eed2:	0e 94 96 42 	call	0x852c	; 0x852c <set_default_ring(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2586
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
    eed6:	6d e0       	ldi	r22, 0x0D	; 13
    eed8:	76 e5       	ldi	r23, 0x56	; 86
    eeda:	c5 01       	movw	r24, r10
    eedc:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
  strcat(str1, device.nazev);
    eee0:	69 ee       	ldi	r22, 0xE9	; 233
    eee2:	7e e0       	ldi	r23, 0x0E	; 14
    eee4:	c5 01       	movw	r24, r10
    eee6:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2588
  strcat(str1, "/ring/get/");
    eeea:	61 ee       	ldi	r22, 0xE1	; 225
    eeec:	76 e0       	ldi	r23, 0x06	; 6
    eeee:	c5 01       	movw	r24, r10
    eef0:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2589
  if (strncmp(str1, topic, strlen(str1)) == 0)
    eef4:	f5 01       	movw	r30, r10
    eef6:	01 90       	ld	r0, Z+
    eef8:	00 20       	and	r0, r0
    eefa:	e9 f7       	brne	.-6      	; 0xeef6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc18>
    eefc:	31 97       	sbiw	r30, 0x01	; 1
    eefe:	7f 01       	movw	r14, r30
    ef00:	ea 18       	sub	r14, r10
    ef02:	fb 08       	sbc	r15, r11
    ef04:	a7 01       	movw	r20, r14
    ef06:	b4 01       	movw	r22, r8
    ef08:	c5 01       	movw	r24, r10
    ef0a:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    ef0e:	89 2b       	or	r24, r25
    ef10:	09 f0       	breq	.+2      	; 0xef14 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc36>
    ef12:	47 c0       	rjmp	.+142    	; 0xefa2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2592
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ef14:	9e 2d       	mov	r25, r14
    ef16:	8e 2d       	mov	r24, r14
    ef18:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2592 (discriminator 3)
    ef1a:	2e 2d       	mov	r18, r14
    ef1c:	30 e0       	ldi	r19, 0x00	; 0
    ef1e:	f4 01       	movw	r30, r8
    ef20:	01 90       	ld	r0, Z+
    ef22:	00 20       	and	r0, r0
    ef24:	e9 f7       	brne	.-6      	; 0xef20 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc42>
    ef26:	31 97       	sbiw	r30, 0x01	; 1
    ef28:	e8 19       	sub	r30, r8
    ef2a:	f9 09       	sbc	r31, r9
    ef2c:	2e 17       	cp	r18, r30
    ef2e:	3f 07       	cpc	r19, r31
    ef30:	58 f4       	brcc	.+22     	; 0xef48 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2594 (discriminator 2)
    {
      str1[cnt] = topic[f];
    ef32:	f5 01       	movw	r30, r10
    ef34:	e8 0f       	add	r30, r24
    ef36:	f1 1d       	adc	r31, r1
    ef38:	28 0d       	add	r18, r8
    ef3a:	39 1d       	adc	r19, r9
    ef3c:	d9 01       	movw	r26, r18
    ef3e:	8c 91       	ld	r24, X
    ef40:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2595 (discriminator 2)
      str1[cnt + 1] = 0;
    ef42:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2592 (discriminator 2)
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ef44:	e3 94       	inc	r14
    ef46:	e7 cf       	rjmp	.-50     	; 0xef16 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2599
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    ef48:	67 e1       	ldi	r22, 0x17	; 23
    ef4a:	73 e0       	ldi	r23, 0x03	; 3
    ef4c:	c5 01       	movw	r24, r10
    ef4e:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2598
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    ef52:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2600
    pch = strtok (str1, "/");
    while (pch != NULL)
    ef54:	00 97       	sbiw	r24, 0x00	; 0
    ef56:	29 f1       	breq	.+74     	; 0xefa2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2602
    {
      if (cnt == 0) id = atoi(my_payload);
    ef58:	01 11       	cpse	r16, r1
    ef5a:	0e c0       	rjmp	.+28     	; 0xef78 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc9a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2602 (discriminator 1)
    ef5c:	84 ec       	ldi	r24, 0xC4	; 196
    ef5e:	98 e0       	ldi	r25, 0x08	; 8
    ef60:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    ef64:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2603 (discriminator 1)
      if (id < MAX_THERMOSTAT)
    ef66:	85 30       	cpi	r24, 0x05	; 5
    ef68:	a0 f0       	brcs	.+40     	; 0xef92 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2609
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    ef6a:	6c ee       	ldi	r22, 0xEC	; 236
    ef6c:	76 e0       	ldi	r23, 0x06	; 6
    ef6e:	8d ee       	ldi	r24, 0xED	; 237
    ef70:	9b e0       	ldi	r25, 0x0B	; 11
    ef72:	0e 94 ed 82 	call	0x105da	; 0x105da <log_error(PubSubClient*, char*)>
    ef76:	0d c0       	rjmp	.+26     	; 0xef92 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2603
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
    ef78:	15 30       	cpi	r17, 0x05	; 5
    ef7a:	b8 f7       	brcc	.-18     	; 0xef6a <mqtt_callback(char*, unsigned char*, unsigned int)+0xc8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2605
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
    ef7c:	01 30       	cpi	r16, 0x01	; 1
    ef7e:	49 f4       	brne	.+18     	; 0xef92 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2605 (discriminator 1)
    ef80:	6e e9       	ldi	r22, 0x9E	; 158
    ef82:	73 e0       	ldi	r23, 0x03	; 3
    ef84:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    ef88:	89 2b       	or	r24, r25
    ef8a:	19 f4       	brne	.+6      	; 0xef92 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2605 (discriminator 2)
    ef8c:	81 2f       	mov	r24, r17
    ef8e:	0e 94 31 46 	call	0x8c62	; 0x8c62 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2611
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    ef92:	67 e1       	ldi	r22, 0x17	; 23
    ef94:	73 e0       	ldi	r23, 0x03	; 3
    ef96:	90 e0       	ldi	r25, 0x00	; 0
    ef98:	80 e0       	ldi	r24, 0x00	; 0
    ef9a:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2612
      cnt++;
    ef9e:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2600
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    efa0:	d9 cf       	rjmp	.-78     	; 0xef54 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2631
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
    efa2:	6d e0       	ldi	r22, 0x0D	; 13
    efa4:	76 e5       	ldi	r23, 0x56	; 86
    efa6:	c5 01       	movw	r24, r10
    efa8:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2632
  strcat(str1, device.nazev);
    efac:	69 ee       	ldi	r22, 0xE9	; 233
    efae:	7e e0       	ldi	r23, 0x0E	; 14
    efb0:	c5 01       	movw	r24, r10
    efb2:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2633
  strcat(str1, "/ring/set/");
    efb6:	6c ef       	ldi	r22, 0xFC	; 252
    efb8:	76 e0       	ldi	r23, 0x06	; 6
    efba:	c5 01       	movw	r24, r10
    efbc:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2634
  if (strncmp(str1, topic, strlen(str1)) == 0)
    efc0:	f5 01       	movw	r30, r10
    efc2:	01 90       	ld	r0, Z+
    efc4:	00 20       	and	r0, r0
    efc6:	e9 f7       	brne	.-6      	; 0xefc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xce4>
    efc8:	31 97       	sbiw	r30, 0x01	; 1
    efca:	7f 01       	movw	r14, r30
    efcc:	ea 18       	sub	r14, r10
    efce:	fb 08       	sbc	r15, r11
    efd0:	a7 01       	movw	r20, r14
    efd2:	b4 01       	movw	r22, r8
    efd4:	c5 01       	movw	r24, r10
    efd6:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    efda:	89 2b       	or	r24, r25
    efdc:	09 f0       	breq	.+2      	; 0xefe0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd02>
    efde:	4a c1       	rjmp	.+660    	; 0xf274 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2637
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    efe0:	9e 2d       	mov	r25, r14
    efe2:	8e 2d       	mov	r24, r14
    efe4:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2637 (discriminator 3)
    efe6:	2e 2d       	mov	r18, r14
    efe8:	30 e0       	ldi	r19, 0x00	; 0
    efea:	f4 01       	movw	r30, r8
    efec:	01 90       	ld	r0, Z+
    efee:	00 20       	and	r0, r0
    eff0:	e9 f7       	brne	.-6      	; 0xefec <mqtt_callback(char*, unsigned char*, unsigned int)+0xd0e>
    eff2:	31 97       	sbiw	r30, 0x01	; 1
    eff4:	e8 19       	sub	r30, r8
    eff6:	f9 09       	sbc	r31, r9
    eff8:	2e 17       	cp	r18, r30
    effa:	3f 07       	cpc	r19, r31
    effc:	58 f4       	brcc	.+22     	; 0xf014 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2639 (discriminator 2)
    {
      str1[cnt] = topic[f];
    effe:	f5 01       	movw	r30, r10
    f000:	e8 0f       	add	r30, r24
    f002:	f1 1d       	adc	r31, r1
    f004:	28 0d       	add	r18, r8
    f006:	39 1d       	adc	r19, r9
    f008:	d9 01       	movw	r26, r18
    f00a:	8c 91       	ld	r24, X
    f00c:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2640 (discriminator 2)
      str1[cnt + 1] = 0;
    f00e:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2637 (discriminator 2)
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f010:	e3 94       	inc	r14
    f012:	e7 cf       	rjmp	.-50     	; 0xefe2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd04>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2644
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f014:	67 e1       	ldi	r22, 0x17	; 23
    f016:	73 e0       	ldi	r23, 0x03	; 3
    f018:	c5 01       	movw	r24, r10
    f01a:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
    f01e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2643
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f020:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2645
    pch = strtok (str1, "/");
    while (pch != NULL)
    f022:	e1 14       	cp	r14, r1
    f024:	f1 04       	cpc	r15, r1
    f026:	09 f4       	brne	.+2      	; 0xf02a <mqtt_callback(char*, unsigned char*, unsigned int)+0xd4c>
    f028:	25 c1       	rjmp	.+586    	; 0xf274 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2647
    {
      if (cnt == 0) id = atoi(pch);
    f02a:	01 11       	cpse	r16, r1
    f02c:	0e c0       	rjmp	.+28     	; 0xf04a <mqtt_callback(char*, unsigned char*, unsigned int)+0xd6c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2647 (discriminator 1)
    f02e:	c7 01       	movw	r24, r14
    f030:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    f034:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2648 (discriminator 1)
      if (id < MAX_THERMOSTAT)
    f036:	85 30       	cpi	r24, 0x05	; 5
    f038:	08 f4       	brcc	.+2      	; 0xf03c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd5e>
    f03a:	13 c1       	rjmp	.+550    	; 0xf262 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2685
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    f03c:	6c ee       	ldi	r22, 0xEC	; 236
    f03e:	76 e0       	ldi	r23, 0x06	; 6
    f040:	8d ee       	ldi	r24, 0xED	; 237
    f042:	9b e0       	ldi	r25, 0x0B	; 11
    f044:	0e 94 ed 82 	call	0x105da	; 0x105da <log_error(PubSubClient*, char*)>
    f048:	0c c1       	rjmp	.+536    	; 0xf262 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2648
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
    f04a:	15 30       	cpi	r17, 0x05	; 5
    f04c:	b8 f7       	brcc	.-18     	; 0xf03c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
    f04e:	01 30       	cpi	r16, 0x01	; 1
    f050:	09 f0       	breq	.+2      	; 0xf054 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd76>
    f052:	07 c1       	rjmp	.+526    	; 0xf262 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650 (discriminator 1)
    f054:	67 e5       	ldi	r22, 0x57	; 87
    f056:	73 e0       	ldi	r23, 0x03	; 3
    f058:	c7 01       	movw	r24, r14
    f05a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f05e:	89 2b       	or	r24, r25
    f060:	29 f4       	brne	.+10     	; 0xf06c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650 (discriminator 2)
    f062:	64 ec       	ldi	r22, 0xC4	; 196
    f064:	78 e0       	ldi	r23, 0x08	; 8
    f066:	81 2f       	mov	r24, r17
    f068:	0e 94 e6 88 	call	0x111cc	; 0x111cc <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2651
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
    f06c:	69 ee       	ldi	r22, 0xE9	; 233
    f06e:	74 e0       	ldi	r23, 0x04	; 4
    f070:	c7 01       	movw	r24, r14
    f072:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f076:	89 2b       	or	r24, r25
    f078:	59 f4       	brne	.+22     	; 0xf090 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2652
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
    f07a:	84 ec       	ldi	r24, 0xC4	; 196
    f07c:	98 e0       	ldi	r25, 0x08	; 8
    f07e:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    f082:	88 30       	cpi	r24, 0x08	; 8
    f084:	91 05       	cpc	r25, r1
    f086:	24 f4       	brge	.+8      	; 0xf090 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2653
            thermostat_ring_set_program_id(id, atoi(my_payload));
    f088:	68 2f       	mov	r22, r24
    f08a:	81 2f       	mov	r24, r17
    f08c:	0e 94 35 89 	call	0x1126a	; 0x1126a <thermostat_ring_set_program_id(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2654
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
    f090:	67 e8       	ldi	r22, 0x87	; 135
    f092:	77 e0       	ldi	r23, 0x07	; 7
    f094:	c7 01       	movw	r24, r14
    f096:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f09a:	89 2b       	or	r24, r25
    f09c:	79 f4       	brne	.+30     	; 0xf0bc <mqtt_callback(char*, unsigned char*, unsigned int)+0xdde>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2654 (discriminator 2)
    f09e:	84 ec       	ldi	r24, 0xC4	; 196
    f0a0:	98 e0       	ldi	r25, 0x08	; 8
    f0a2:	0e 94 09 d7 	call	0x1ae12	; 0x1ae12 <atof>
    f0a6:	20 e0       	ldi	r18, 0x00	; 0
    f0a8:	30 e0       	ldi	r19, 0x00	; 0
    f0aa:	40 e2       	ldi	r20, 0x20	; 32
    f0ac:	51 e4       	ldi	r21, 0x41	; 65
    f0ae:	0e 94 c9 d2 	call	0x1a592	; 0x1a592 <__mulsf3>
    f0b2:	0e 94 dc d1 	call	0x1a3b8	; 0x1a3b8 <__fixsfsi>
    f0b6:	81 2f       	mov	r24, r17
    f0b8:	0e 94 5a 89 	call	0x112b4	; 0x112b4 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2655
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
    f0bc:	6f e8       	ldi	r22, 0x8F	; 143
    f0be:	73 e0       	ldi	r23, 0x03	; 3
    f0c0:	c7 01       	movw	r24, r14
    f0c2:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f0c6:	89 2b       	or	r24, r25
    f0c8:	41 f4       	brne	.+16     	; 0xf0da <mqtt_callback(char*, unsigned char*, unsigned int)+0xdfc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2655 (discriminator 2)
    f0ca:	84 ec       	ldi	r24, 0xC4	; 196
    f0cc:	98 e0       	ldi	r25, 0x08	; 8
    f0ce:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    f0d2:	bc 01       	movw	r22, r24
    f0d4:	81 2f       	mov	r24, r17
    f0d6:	0e 94 5a 89 	call	0x112b4	; 0x112b4 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2656
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
    f0da:	61 ef       	ldi	r22, 0xF1	; 241
    f0dc:	74 e0       	ldi	r23, 0x04	; 4
    f0de:	c7 01       	movw	r24, r14
    f0e0:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f0e4:	89 2b       	or	r24, r25
    f0e6:	29 f5       	brne	.+74     	; 0xf132 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2658
        {
          active = convert_text_mode(my_payload);
    f0e8:	84 ec       	ldi	r24, 0xC4	; 196
    f0ea:	98 e0       	ldi	r25, 0x08	; 8
    f0ec:	0e 94 db 49 	call	0x93b6	; 0x93b6 <convert_text_mode(char*)>
    f0f0:	c8 53       	subi	r28, 0x38	; 56
    f0f2:	df 4f       	sbci	r29, 0xFF	; 255
    f0f4:	88 83       	st	Y, r24
    f0f6:	c8 5c       	subi	r28, 0xC8	; 200
    f0f8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2659
          thermostat_ring_set_mode(id, active);
    f0fa:	68 2f       	mov	r22, r24
    f0fc:	81 2f       	mov	r24, r17
    f0fe:	0e 94 89 89 	call	0x11312	; 0x11312 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2660
          if (active == TERM_MODE_MAN_HEAT)
    f102:	c8 53       	subi	r28, 0x38	; 56
    f104:	df 4f       	sbci	r29, 0xFF	; 255
    f106:	88 81       	ld	r24, Y
    f108:	c8 5c       	subi	r28, 0xC8	; 200
    f10a:	d0 40       	sbci	r29, 0x00	; 0
    f10c:	83 30       	cpi	r24, 0x03	; 3
    f10e:	29 f4       	brne	.+10     	; 0xf11a <mqtt_callback(char*, unsigned char*, unsigned int)+0xe3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2661
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    f110:	40 e0       	ldi	r20, 0x00	; 0
    f112:	60 e0       	ldi	r22, 0x00	; 0
    f114:	81 2f       	mov	r24, r17
    f116:	0e 94 ab 89 	call	0x11356	; 0x11356 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2662
          if (active == TERM_MODE_MAN_COOL)
    f11a:	c8 53       	subi	r28, 0x38	; 56
    f11c:	df 4f       	sbci	r29, 0xFF	; 255
    f11e:	88 81       	ld	r24, Y
    f120:	c8 5c       	subi	r28, 0xC8	; 200
    f122:	d0 40       	sbci	r29, 0x00	; 0
    f124:	85 30       	cpi	r24, 0x05	; 5
    f126:	29 f4       	brne	.+10     	; 0xf132 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2663
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    f128:	41 e0       	ldi	r20, 0x01	; 1
    f12a:	60 e0       	ldi	r22, 0x00	; 0
    f12c:	81 2f       	mov	r24, r17
    f12e:	0e 94 ab 89 	call	0x11356	; 0x11356 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
    f132:	66 ef       	ldi	r22, 0xF6	; 246
    f134:	74 e0       	ldi	r23, 0x04	; 4
    f136:	c7 01       	movw	r24, r14
    f138:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f13c:	89 2b       	or	r24, r25
    f13e:	29 f5       	brne	.+74     	; 0xf18a <mqtt_callback(char*, unsigned char*, unsigned int)+0xeac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2667
        {
          active = atoi(my_payload);
    f140:	84 ec       	ldi	r24, 0xC4	; 196
    f142:	98 e0       	ldi	r25, 0x08	; 8
    f144:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    f148:	c8 53       	subi	r28, 0x38	; 56
    f14a:	df 4f       	sbci	r29, 0xFF	; 255
    f14c:	88 83       	st	Y, r24
    f14e:	c8 5c       	subi	r28, 0xC8	; 200
    f150:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668
          thermostat_ring_set_mode(id, active);
    f152:	68 2f       	mov	r22, r24
    f154:	81 2f       	mov	r24, r17
    f156:	0e 94 89 89 	call	0x11312	; 0x11312 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2669
          if (active == TERM_MODE_MAN_HEAT)
    f15a:	c8 53       	subi	r28, 0x38	; 56
    f15c:	df 4f       	sbci	r29, 0xFF	; 255
    f15e:	88 81       	ld	r24, Y
    f160:	c8 5c       	subi	r28, 0xC8	; 200
    f162:	d0 40       	sbci	r29, 0x00	; 0
    f164:	83 30       	cpi	r24, 0x03	; 3
    f166:	29 f4       	brne	.+10     	; 0xf172 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2670
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    f168:	40 e0       	ldi	r20, 0x00	; 0
    f16a:	60 e0       	ldi	r22, 0x00	; 0
    f16c:	81 2f       	mov	r24, r17
    f16e:	0e 94 ab 89 	call	0x11356	; 0x11356 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2671
          if (active == TERM_MODE_MAN_COOL)
    f172:	c8 53       	subi	r28, 0x38	; 56
    f174:	df 4f       	sbci	r29, 0xFF	; 255
    f176:	88 81       	ld	r24, Y
    f178:	c8 5c       	subi	r28, 0xC8	; 200
    f17a:	d0 40       	sbci	r29, 0x00	; 0
    f17c:	85 30       	cpi	r24, 0x05	; 5
    f17e:	29 f4       	brne	.+10     	; 0xf18a <mqtt_callback(char*, unsigned char*, unsigned int)+0xeac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2672
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    f180:	41 e0       	ldi	r20, 0x01	; 1
    f182:	60 e0       	ldi	r22, 0x00	; 0
    f184:	81 2f       	mov	r24, r17
    f186:	0e 94 ab 89 	call	0x11356	; 0x11356 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2674
        }
        if ((cnt == 1) && (strcmp(pch, "input") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
    f18a:	62 e0       	ldi	r22, 0x02	; 2
    f18c:	75 e0       	ldi	r23, 0x05	; 5
    f18e:	c7 01       	movw	r24, r14
    f190:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f194:	89 2b       	or	r24, r25
    f196:	41 f4       	brne	.+16     	; 0xf1a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xeca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2674 (discriminator 2)
    f198:	84 ec       	ldi	r24, 0xC4	; 196
    f19a:	98 e0       	ldi	r25, 0x08	; 8
    f19c:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    f1a0:	68 2f       	mov	r22, r24
    f1a2:	81 2f       	mov	r24, r17
    f1a4:	0e 94 79 89 	call	0x112f2	; 0x112f2 <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2676
        //if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
    f1a8:	68 e7       	ldi	r22, 0x78	; 120
    f1aa:	73 e0       	ldi	r23, 0x03	; 3
    f1ac:	c7 01       	movw	r24, r14
    f1ae:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f1b2:	89 2b       	or	r24, r25
    f1b4:	41 f4       	brne	.+16     	; 0xf1c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xee8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2676 (discriminator 2)
    f1b6:	84 ec       	ldi	r24, 0xC4	; 196
    f1b8:	98 e0       	ldi	r25, 0x08	; 8
    f1ba:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    f1be:	68 2f       	mov	r22, r24
    f1c0:	81 2f       	mov	r24, r17
    f1c2:	0e 94 25 89 	call	0x1124a	; 0x1124a <thermostat_ring_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
    f1c6:	68 e0       	ldi	r22, 0x08	; 8
    f1c8:	75 e0       	ldi	r23, 0x05	; 5
    f1ca:	c7 01       	movw	r24, r14
    f1cc:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f1d0:	89 2b       	or	r24, r25
    f1d2:	41 f4       	brne	.+16     	; 0xf1e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf06>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677 (discriminator 2)
    f1d4:	84 ec       	ldi	r24, 0xC4	; 196
    f1d6:	98 e0       	ldi	r25, 0x08	; 8
    f1d8:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    f1dc:	68 2f       	mov	r22, r24
    f1de:	81 2f       	mov	r24, r17
    f1e0:	0e 94 15 89 	call	0x1122a	; 0x1122a <thermostat_ring_set_output(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
    f1e4:	63 e9       	ldi	r22, 0x93	; 147
    f1e6:	77 e0       	ldi	r23, 0x07	; 7
    f1e8:	c7 01       	movw	r24, r14
    f1ea:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f1ee:	89 2b       	or	r24, r25
    f1f0:	49 f4       	brne	.+18     	; 0xf204 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678 (discriminator 2)
    f1f2:	84 ec       	ldi	r24, 0xC4	; 196
    f1f4:	98 e0       	ldi	r25, 0x08	; 8
    f1f6:	0e 94 09 d7 	call	0x1ae12	; 0x1ae12 <atof>
    f1fa:	ab 01       	movw	r20, r22
    f1fc:	bc 01       	movw	r22, r24
    f1fe:	81 2f       	mov	r24, r17
    f200:	0e 94 9a 8a 	call	0x11534	; 0x11534 <thermostat_ring_pid_set_kp(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
    f204:	6a e9       	ldi	r22, 0x9A	; 154
    f206:	77 e0       	ldi	r23, 0x07	; 7
    f208:	c7 01       	movw	r24, r14
    f20a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f20e:	89 2b       	or	r24, r25
    f210:	49 f4       	brne	.+18     	; 0xf224 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679 (discriminator 2)
    f212:	84 ec       	ldi	r24, 0xC4	; 196
    f214:	98 e0       	ldi	r25, 0x08	; 8
    f216:	0e 94 09 d7 	call	0x1ae12	; 0x1ae12 <atof>
    f21a:	ab 01       	movw	r20, r22
    f21c:	bc 01       	movw	r22, r24
    f21e:	81 2f       	mov	r24, r17
    f220:	0e 94 ad 8a 	call	0x1155a	; 0x1155a <thermostat_ring_pid_set_ki(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2680
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
    f224:	61 ea       	ldi	r22, 0xA1	; 161
    f226:	77 e0       	ldi	r23, 0x07	; 7
    f228:	c7 01       	movw	r24, r14
    f22a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f22e:	89 2b       	or	r24, r25
    f230:	49 f4       	brne	.+18     	; 0xf244 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2680 (discriminator 2)
    f232:	84 ec       	ldi	r24, 0xC4	; 196
    f234:	98 e0       	ldi	r25, 0x08	; 8
    f236:	0e 94 09 d7 	call	0x1ae12	; 0x1ae12 <atof>
    f23a:	ab 01       	movw	r20, r22
    f23c:	bc 01       	movw	r22, r24
    f23e:	81 2f       	mov	r24, r17
    f240:	0e 94 c0 8a 	call	0x11580	; 0x11580 <thermostat_ring_pid_set_kd(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2681
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
    f244:	68 ea       	ldi	r22, 0xA8	; 168
    f246:	77 e0       	ldi	r23, 0x07	; 7
    f248:	c7 01       	movw	r24, r14
    f24a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f24e:	89 2b       	or	r24, r25
    f250:	41 f4       	brne	.+16     	; 0xf262 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2681 (discriminator 2)
    f252:	84 ec       	ldi	r24, 0xC4	; 196
    f254:	98 e0       	ldi	r25, 0x08	; 8
    f256:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    f25a:	68 2f       	mov	r22, r24
    f25c:	81 2f       	mov	r24, r17
    f25e:	0e 94 d3 8a 	call	0x115a6	; 0x115a6 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2687
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    f262:	67 e1       	ldi	r22, 0x17	; 23
    f264:	73 e0       	ldi	r23, 0x03	; 3
    f266:	90 e0       	ldi	r25, 0x00	; 0
    f268:	80 e0       	ldi	r24, 0x00	; 0
    f26a:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
    f26e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2688
      cnt++;
    f270:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2645
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    f272:	d7 ce       	rjmp	.-594    	; 0xf022 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2693
      cnt++;
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
    f274:	6d e0       	ldi	r22, 0x0D	; 13
    f276:	76 e5       	ldi	r23, 0x56	; 86
    f278:	c5 01       	movw	r24, r10
    f27a:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2694
  strcat(str1, device.nazev);
    f27e:	69 ee       	ldi	r22, 0xE9	; 233
    f280:	7e e0       	ldi	r23, 0x0E	; 14
    f282:	c5 01       	movw	r24, r10
    f284:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2695
  strcat(str1, "/ring/clear");
    f288:	67 e0       	ldi	r22, 0x07	; 7
    f28a:	77 e0       	ldi	r23, 0x07	; 7
    f28c:	c5 01       	movw	r24, r10
    f28e:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f292:	f5 01       	movw	r30, r10
    f294:	01 90       	ld	r0, Z+
    f296:	00 20       	and	r0, r0
    f298:	e9 f7       	brne	.-6      	; 0xf294 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfb6>
    f29a:	31 97       	sbiw	r30, 0x01	; 1
    f29c:	af 01       	movw	r20, r30
    f29e:	4a 19       	sub	r20, r10
    f2a0:	5b 09       	sbc	r21, r11
    f2a2:	b4 01       	movw	r22, r8
    f2a4:	c5 01       	movw	r24, r10
    f2a6:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    f2aa:	89 2b       	or	r24, r25
    f2ac:	99 f4       	brne	.+38     	; 0xf2d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xff6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2698
  {
    mqtt_process_message++;
    f2ae:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    f2b2:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    f2b6:	01 96       	adiw	r24, 0x01	; 1
    f2b8:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    f2bc:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2699
    id = atoi(my_payload);
    f2c0:	84 ec       	ldi	r24, 0xC4	; 196
    f2c2:	98 e0       	ldi	r25, 0x08	; 8
    f2c4:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    f2c8:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2700
    if (id < MAX_THERMOSTAT)
    f2ca:	85 30       	cpi	r24, 0x05	; 5
    f2cc:	08 f0       	brcs	.+2      	; 0xf2d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xff2>
    f2ce:	76 c0       	rjmp	.+236    	; 0xf3bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x10de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2702
    {
      thermostat_ring_clear(id);
    f2d0:	0e 94 56 8d 	call	0x11aac	; 0x11aac <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2713
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
    f2d4:	6d e0       	ldi	r22, 0x0D	; 13
    f2d6:	76 e5       	ldi	r23, 0x56	; 86
    f2d8:	c5 01       	movw	r24, r10
    f2da:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2714
  strcat(str1, device.nazev);
    f2de:	69 ee       	ldi	r22, 0xE9	; 233
    f2e0:	7e e0       	ldi	r23, 0x0E	; 14
    f2e2:	c5 01       	movw	r24, r10
    f2e4:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2715
  strcat(str1, "/network/get/config");
    f2e8:	65 e2       	ldi	r22, 0x25	; 37
    f2ea:	77 e0       	ldi	r23, 0x07	; 7
    f2ec:	c5 01       	movw	r24, r10
    f2ee:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2716
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f2f2:	f5 01       	movw	r30, r10
    f2f4:	01 90       	ld	r0, Z+
    f2f6:	00 20       	and	r0, r0
    f2f8:	e9 f7       	brne	.-6      	; 0xf2f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1016>
    f2fa:	31 97       	sbiw	r30, 0x01	; 1
    f2fc:	af 01       	movw	r20, r30
    f2fe:	4a 19       	sub	r20, r10
    f300:	5b 09       	sbc	r21, r11
    f302:	b4 01       	movw	r22, r8
    f304:	c5 01       	movw	r24, r10
    f306:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    f30a:	89 2b       	or	r24, r25
    f30c:	69 f4       	brne	.+26     	; 0xf328 <mqtt_callback(char*, unsigned char*, unsigned int)+0x104a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2718
  {
    mqtt_process_message++;
    f30e:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    f312:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    f316:	01 96       	adiw	r24, 0x01	; 1
    f318:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    f31c:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2719
    send_network_config(&mqtt_client);
    f320:	8d ee       	ldi	r24, 0xED	; 237
    f322:	9b e0       	ldi	r25, 0x0B	; 11
    f324:	0e 94 23 80 	call	0x10046	; 0x10046 <send_network_config(PubSubClient*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
    f328:	6d e0       	ldi	r22, 0x0D	; 13
    f32a:	76 e5       	ldi	r23, 0x56	; 86
    f32c:	c5 01       	movw	r24, r10
    f32e:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2734
  strcat(str1, device.nazev);
    f332:	69 ee       	ldi	r22, 0xE9	; 233
    f334:	7e e0       	ldi	r23, 0x0E	; 14
    f336:	c5 01       	movw	r24, r10
    f338:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
  strcat(str1, "/network/set/");
    f33c:	69 e3       	ldi	r22, 0x39	; 57
    f33e:	77 e0       	ldi	r23, 0x07	; 7
    f340:	c5 01       	movw	r24, r10
    f342:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f346:	f5 01       	movw	r30, r10
    f348:	01 90       	ld	r0, Z+
    f34a:	00 20       	and	r0, r0
    f34c:	e9 f7       	brne	.-6      	; 0xf348 <mqtt_callback(char*, unsigned char*, unsigned int)+0x106a>
    f34e:	31 97       	sbiw	r30, 0x01	; 1
    f350:	af 01       	movw	r20, r30
    f352:	4a 19       	sub	r20, r10
    f354:	5b 09       	sbc	r21, r11
    f356:	b4 01       	movw	r22, r8
    f358:	c5 01       	movw	r24, r10
    f35a:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    f35e:	89 2b       	or	r24, r25
    f360:	09 f0       	breq	.+2      	; 0xf364 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1086>
    f362:	44 c0       	rjmp	.+136    	; 0xf3ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x110e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  {
    mqtt_process_message++;
    f364:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    f368:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    f36c:	01 96       	adiw	r24, 0x01	; 1
    f36e:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    f372:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2740
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f376:	f5 01       	movw	r30, r10
    f378:	01 90       	ld	r0, Z+
    f37a:	00 20       	and	r0, r0
    f37c:	e9 f7       	brne	.-6      	; 0xf378 <mqtt_callback(char*, unsigned char*, unsigned int)+0x109a>
    f37e:	31 97       	sbiw	r30, 0x01	; 1
    f380:	ea 19       	sub	r30, r10
    f382:	fb 09       	sbc	r31, r11
    f384:	9e 2f       	mov	r25, r30
    f386:	4e 2f       	mov	r20, r30
    f388:	84 2f       	mov	r24, r20
    f38a:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2740 (discriminator 3)
    f38c:	24 2f       	mov	r18, r20
    f38e:	30 e0       	ldi	r19, 0x00	; 0
    f390:	d4 01       	movw	r26, r8
    f392:	0d 90       	ld	r0, X+
    f394:	00 20       	and	r0, r0
    f396:	e9 f7       	brne	.-6      	; 0xf392 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10b4>
    f398:	11 97       	sbiw	r26, 0x01	; 1
    f39a:	a8 19       	sub	r26, r8
    f39c:	b9 09       	sbc	r27, r9
    f39e:	2a 17       	cp	r18, r26
    f3a0:	3b 07       	cpc	r19, r27
    f3a2:	98 f4       	brcc	.+38     	; 0xf3ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2742 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f3a4:	d5 01       	movw	r26, r10
    f3a6:	a8 0f       	add	r26, r24
    f3a8:	b1 1d       	adc	r27, r1
    f3aa:	28 0d       	add	r18, r8
    f3ac:	39 1d       	adc	r19, r9
    f3ae:	f9 01       	movw	r30, r18
    f3b0:	80 81       	ld	r24, Z
    f3b2:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743 (discriminator 2)
      str1[cnt + 1] = 0;
    f3b4:	11 96       	adiw	r26, 0x01	; 1
    f3b6:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2740 (discriminator 2)
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f3b8:	4f 5f       	subi	r20, 0xFF	; 255
    f3ba:	e6 cf       	rjmp	.-52     	; 0xf388 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2706
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
    f3bc:	63 e1       	ldi	r22, 0x13	; 19
    f3be:	77 e0       	ldi	r23, 0x07	; 7
    f3c0:	8d ee       	ldi	r24, 0xED	; 237
    f3c2:	9b e0       	ldi	r25, 0x0B	; 11
    f3c4:	0e 94 ed 82 	call	0x105da	; 0x105da <log_error(PubSubClient*, char*)>
    f3c8:	85 cf       	rjmp	.-246    	; 0xf2d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xff6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    f3ca:	64 ec       	ldi	r22, 0xC4	; 196
    f3cc:	78 e0       	ldi	r23, 0x08	; 8
    f3ce:	c5 01       	movw	r24, r10
    f3d0:	0e 94 bf 7d 	call	0xfb7e	; 0xfb7e <setting_network(char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2747
    if (cnt == 1)
    f3d4:	81 30       	cpi	r24, 0x01	; 1
    f3d6:	41 f4       	brne	.+16     	; 0xf3e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x110a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2749
    {
      save_setup_network();
    f3d8:	0e 94 df 7c 	call	0xf9be	; 0xf9be <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2754
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    f3dc:	80 91 32 0a 	lds	r24, 0x0A32	; 0x800a32 <selftest_data>
    f3e0:	80 68       	ori	r24, 0x80	; 128
    f3e2:	80 93 32 0a 	sts	0x0A32, r24	; 0x800a32 <selftest_data>
    f3e6:	02 c0       	rjmp	.+4      	; 0xf3ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x110e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2752
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    f3e8:	82 30       	cpi	r24, 0x02	; 2
    f3ea:	c1 f3       	breq	.-16     	; 0xf3dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x10fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2759
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
    f3ec:	6d e0       	ldi	r22, 0x0D	; 13
    f3ee:	76 e5       	ldi	r23, 0x56	; 86
    f3f0:	c5 01       	movw	r24, r10
    f3f2:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2760
  strcat(str1, device.nazev);
    f3f6:	69 ee       	ldi	r22, 0xE9	; 233
    f3f8:	7e e0       	ldi	r23, 0x0E	; 14
    f3fa:	c5 01       	movw	r24, r10
    f3fc:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2761
  strcat(str1, "/light/set/");
    f400:	67 e4       	ldi	r22, 0x47	; 71
    f402:	77 e0       	ldi	r23, 0x07	; 7
    f404:	c5 01       	movw	r24, r10
    f406:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2762
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f40a:	f5 01       	movw	r30, r10
    f40c:	01 90       	ld	r0, Z+
    f40e:	00 20       	and	r0, r0
    f410:	e9 f7       	brne	.-6      	; 0xf40c <mqtt_callback(char*, unsigned char*, unsigned int)+0x112e>
    f412:	31 97       	sbiw	r30, 0x01	; 1
    f414:	af 01       	movw	r20, r30
    f416:	4a 19       	sub	r20, r10
    f418:	5b 09       	sbc	r21, r11
    f41a:	b4 01       	movw	r22, r8
    f41c:	c5 01       	movw	r24, r10
    f41e:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    f422:	89 2b       	or	r24, r25
    f424:	09 f0       	breq	.+2      	; 0xf428 <mqtt_callback(char*, unsigned char*, unsigned int)+0x114a>
    f426:	41 c0       	rjmp	.+130    	; 0xf4aa <mqtt_callback(char*, unsigned char*, unsigned int)+0x11cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2764
  {
    mqtt_process_message++;
    f428:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    f42c:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    f430:	01 96       	adiw	r24, 0x01	; 1
    f432:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    f436:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2767
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f43a:	f5 01       	movw	r30, r10
    f43c:	01 90       	ld	r0, Z+
    f43e:	00 20       	and	r0, r0
    f440:	e9 f7       	brne	.-6      	; 0xf43c <mqtt_callback(char*, unsigned char*, unsigned int)+0x115e>
    f442:	31 97       	sbiw	r30, 0x01	; 1
    f444:	ea 19       	sub	r30, r10
    f446:	fb 09       	sbc	r31, r11
    f448:	9e 2f       	mov	r25, r30
    f44a:	4e 2f       	mov	r20, r30
    f44c:	84 2f       	mov	r24, r20
    f44e:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2767 (discriminator 3)
    f450:	24 2f       	mov	r18, r20
    f452:	30 e0       	ldi	r19, 0x00	; 0
    f454:	d4 01       	movw	r26, r8
    f456:	0d 90       	ld	r0, X+
    f458:	00 20       	and	r0, r0
    f45a:	e9 f7       	brne	.-6      	; 0xf456 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1178>
    f45c:	11 97       	sbiw	r26, 0x01	; 1
    f45e:	a8 19       	sub	r26, r8
    f460:	b9 09       	sbc	r27, r9
    f462:	2a 17       	cp	r18, r26
    f464:	3b 07       	cpc	r19, r27
    f466:	60 f4       	brcc	.+24     	; 0xf480 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2769 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f468:	d5 01       	movw	r26, r10
    f46a:	a8 0f       	add	r26, r24
    f46c:	b1 1d       	adc	r27, r1
    f46e:	28 0d       	add	r18, r8
    f470:	39 1d       	adc	r19, r9
    f472:	f9 01       	movw	r30, r18
    f474:	80 81       	ld	r24, Z
    f476:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2770 (discriminator 2)
      str1[cnt + 1] = 0;
    f478:	11 96       	adiw	r26, 0x01	; 1
    f47a:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2767 (discriminator 2)
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f47c:	4f 5f       	subi	r20, 0xFF	; 255
    f47e:	e6 cf       	rjmp	.-52     	; 0xf44c <mqtt_callback(char*, unsigned char*, unsigned int)+0x116e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2774
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f480:	67 e1       	ldi	r22, 0x17	; 23
    f482:	73 e0       	ldi	r23, 0x03	; 3
    f484:	c5 01       	movw	r24, r10
    f486:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2773
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f48a:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2775
    pch = strtok (str1, "/");
    while (pch != NULL)
    f48c:	00 97       	sbiw	r24, 0x00	; 0
    f48e:	69 f0       	breq	.+26     	; 0xf4aa <mqtt_callback(char*, unsigned char*, unsigned int)+0x11cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
    {
      if (cnt == 0) id = atoi(pch);
    f490:	01 11       	cpse	r16, r1
    f492:	03 c0       	rjmp	.+6      	; 0xf49a <mqtt_callback(char*, unsigned char*, unsigned int)+0x11bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777 (discriminator 1)
    f494:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    f498:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2780
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
    f49a:	67 e1       	ldi	r22, 0x17	; 23
    f49c:	73 e0       	ldi	r23, 0x03	; 3
    f49e:	90 e0       	ldi	r25, 0x00	; 0
    f4a0:	80 e0       	ldi	r24, 0x00	; 0
    f4a2:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2781
      cnt++;
    f4a6:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2775
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    f4a8:	f1 cf       	rjmp	.-30     	; 0xf48c <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2786
      cnt++;
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
    f4aa:	63 ee       	ldi	r22, 0xE3	; 227
    f4ac:	75 e5       	ldi	r23, 0x55	; 85
    f4ae:	c5 01       	movw	r24, r10
    f4b0:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2787
  strcat(str1, "output/");
    f4b4:	69 eb       	ldi	r22, 0xB9	; 185
    f4b6:	73 e0       	ldi	r23, 0x03	; 3
    f4b8:	c5 01       	movw	r24, r10
    f4ba:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2788
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f4be:	f5 01       	movw	r30, r10
    f4c0:	01 90       	ld	r0, Z+
    f4c2:	00 20       	and	r0, r0
    f4c4:	e9 f7       	brne	.-6      	; 0xf4c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11e2>
    f4c6:	31 97       	sbiw	r30, 0x01	; 1
    f4c8:	af 01       	movw	r20, r30
    f4ca:	4a 19       	sub	r20, r10
    f4cc:	5b 09       	sbc	r21, r11
    f4ce:	b4 01       	movw	r22, r8
    f4d0:	c5 01       	movw	r24, r10
    f4d2:	0e 94 79 d7 	call	0x1aef2	; 0x1aef2 <strncmp>
    f4d6:	89 2b       	or	r24, r25
    f4d8:	09 f0       	breq	.+2      	; 0xf4dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x11fe>
    f4da:	6d c0       	rjmp	.+218    	; 0xf5b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
  {
    mqtt_process_message++;
    f4dc:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    f4e0:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    f4e4:	01 96       	adiw	r24, 0x01	; 1
    f4e6:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    f4ea:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f4ee:	f5 01       	movw	r30, r10
    f4f0:	01 90       	ld	r0, Z+
    f4f2:	00 20       	and	r0, r0
    f4f4:	e9 f7       	brne	.-6      	; 0xf4f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1212>
    f4f6:	31 97       	sbiw	r30, 0x01	; 1
    f4f8:	ea 19       	sub	r30, r10
    f4fa:	fb 09       	sbc	r31, r11
    f4fc:	9e 2f       	mov	r25, r30
    f4fe:	4e 2f       	mov	r20, r30
    f500:	84 2f       	mov	r24, r20
    f502:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792 (discriminator 3)
    f504:	24 2f       	mov	r18, r20
    f506:	30 e0       	ldi	r19, 0x00	; 0
    f508:	d4 01       	movw	r26, r8
    f50a:	0d 90       	ld	r0, X+
    f50c:	00 20       	and	r0, r0
    f50e:	e9 f7       	brne	.-6      	; 0xf50a <mqtt_callback(char*, unsigned char*, unsigned int)+0x122c>
    f510:	11 97       	sbiw	r26, 0x01	; 1
    f512:	a8 19       	sub	r26, r8
    f514:	b9 09       	sbc	r27, r9
    f516:	2a 17       	cp	r18, r26
    f518:	3b 07       	cpc	r19, r27
    f51a:	60 f4       	brcc	.+24     	; 0xf534 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1256>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2794 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f51c:	d5 01       	movw	r26, r10
    f51e:	a8 0f       	add	r26, r24
    f520:	b1 1d       	adc	r27, r1
    f522:	28 0d       	add	r18, r8
    f524:	39 1d       	adc	r19, r9
    f526:	f9 01       	movw	r30, r18
    f528:	80 81       	ld	r24, Z
    f52a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2795 (discriminator 2)
      str1[cnt + 1] = 0;
    f52c:	11 96       	adiw	r26, 0x01	; 1
    f52e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792 (discriminator 2)
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f530:	4f 5f       	subi	r20, 0xFF	; 255
    f532:	e6 cf       	rjmp	.-52     	; 0xf500 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1222>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2799
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f534:	67 e1       	ldi	r22, 0x17	; 23
    f536:	73 e0       	ldi	r23, 0x03	; 3
    f538:	c5 01       	movw	r24, r10
    f53a:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
    f53e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2798
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f540:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2800
    pch = strtok (str1, "/");
    while (pch != NULL)
    f542:	e1 14       	cp	r14, r1
    f544:	f1 04       	cpc	r15, r1
    f546:	b9 f1       	breq	.+110    	; 0xf5b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2802
    {
      if (cnt == 0) id = atoi(pch);
    f548:	01 11       	cpse	r16, r1
    f54a:	0d c0       	rjmp	.+26     	; 0xf566 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1288>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2802 (discriminator 1)
    f54c:	c7 01       	movw	r24, r14
    f54e:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    f552:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2813
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
    f554:	67 e1       	ldi	r22, 0x17	; 23
    f556:	73 e0       	ldi	r23, 0x03	; 3
    f558:	90 e0       	ldi	r25, 0x00	; 0
    f55a:	80 e0       	ldi	r24, 0x00	; 0
    f55c:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
    f560:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2814
      cnt++;
    f562:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2800
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    f564:	ee cf       	rjmp	.-36     	; 0xf542 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1264>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2803
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
    f566:	01 30       	cpi	r16, 0x01	; 1
    f568:	a9 f7       	brne	.-22     	; 0xf554 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1276>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2805
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    f56a:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2806
          if (thermostat_ring_get_output(idx) == id)
    f56c:	8d 2d       	mov	r24, r13
    f56e:	0e 94 0d 89 	call	0x1121a	; 0x1121a <thermostat_ring_get_output(unsigned char)>
    f572:	c8 2e       	mov	r12, r24
    f574:	81 13       	cpse	r24, r17
    f576:	1a c0       	rjmp	.+52     	; 0xf5ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2808
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
    f578:	6f ed       	ldi	r22, 0xDF	; 223
    f57a:	73 e0       	ldi	r23, 0x03	; 3
    f57c:	c7 01       	movw	r24, r14
    f57e:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f582:	89 2b       	or	r24, r25
    f584:	29 f0       	breq	.+10     	; 0xf590 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2808 (discriminator 1)
    f586:	e1 2f       	mov	r30, r17
    f588:	f0 e0       	ldi	r31, 0x00	; 0
    f58a:	ed 5c       	subi	r30, 0xCD	; 205
    f58c:	f5 4f       	sbci	r31, 0xF5	; 245
    f58e:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809
            if (strcmp(pch, "state")) last_output_update[id] = 0;
    f590:	62 ec       	ldi	r22, 0xC2	; 194
    f592:	73 e0       	ldi	r23, 0x03	; 3
    f594:	c7 01       	movw	r24, r14
    f596:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f59a:	89 2b       	or	r24, r25
    f59c:	29 f0       	breq	.+10     	; 0xf5a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809 (discriminator 1)
    f59e:	e1 2f       	mov	r30, r17
    f5a0:	f0 e0       	ldi	r31, 0x00	; 0
    f5a2:	ed 5c       	subi	r30, 0xCD	; 205
    f5a4:	f5 4f       	sbci	r31, 0xF5	; 245
    f5a6:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2806
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
    f5a8:	1c 2d       	mov	r17, r12
    f5aa:	d4 cf       	rjmp	.-88     	; 0xf554 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1276>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2805 (discriminator 2)
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    f5ac:	d3 94       	inc	r13
    f5ae:	f5 e0       	ldi	r31, 0x05	; 5
    f5b0:	df 12       	cpse	r13, r31
    f5b2:	dc cf       	rjmp	.-72     	; 0xf56c <mqtt_callback(char*, unsigned char*, unsigned int)+0x128e>
    f5b4:	cf cf       	rjmp	.-98     	; 0xf554 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1276>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2819
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    f5b6:	6d e0       	ldi	r22, 0x0D	; 13
    f5b8:	76 e5       	ldi	r23, 0x56	; 86
    f5ba:	c5 01       	movw	r24, r10
    f5bc:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2820
  strcat(str1, device.nazev);
    f5c0:	69 ee       	ldi	r22, 0xE9	; 233
    f5c2:	7e e0       	ldi	r23, 0x0E	; 14
    f5c4:	c5 01       	movw	r24, r10
    f5c6:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2821
  strcat(str1, "/reload");
    f5ca:	63 e5       	ldi	r22, 0x53	; 83
    f5cc:	77 e0       	ldi	r23, 0x07	; 7
    f5ce:	c5 01       	movw	r24, r10
    f5d0:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2822
  if (strcmp(str1, topic) == 0)
    f5d4:	b4 01       	movw	r22, r8
    f5d6:	c5 01       	movw	r24, r10
    f5d8:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f5dc:	89 2b       	or	r24, r25
    f5de:	a1 f4       	brne	.+40     	; 0xf608 <mqtt_callback(char*, unsigned char*, unsigned int)+0x132a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2824
  {
    mqtt_process_message++;
    f5e0:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    f5e4:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    f5e8:	01 96       	adiw	r24, 0x01	; 1
    f5ea:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    f5ee:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2825
    log_error(&mqtt_client, "reload ..... ");
    f5f2:	6b e5       	ldi	r22, 0x5B	; 91
    f5f4:	77 e0       	ldi	r23, 0x07	; 7
    f5f6:	8d ee       	ldi	r24, 0xED	; 237
    f5f8:	9b e0       	ldi	r25, 0x0B	; 11
    f5fa:	0e 94 ed 82 	call	0x105da	; 0x105da <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2826
    resetFunc();
    f5fe:	e0 91 44 09 	lds	r30, 0x0944	; 0x800944 <resetFunc>
    f602:	f0 91 45 09 	lds	r31, 0x0945	; 0x800945 <resetFunc+0x1>
    f606:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2830
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    f608:	6d e0       	ldi	r22, 0x0D	; 13
    f60a:	76 e5       	ldi	r23, 0x56	; 86
    f60c:	c5 01       	movw	r24, r10
    f60e:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2831
  strcat(str1, device.nazev);
    f612:	69 ee       	ldi	r22, 0xE9	; 233
    f614:	7e e0       	ldi	r23, 0x0E	; 14
    f616:	c5 01       	movw	r24, r10
    f618:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2832
  strcat(str1, "/bootloader");
    f61c:	69 e6       	ldi	r22, 0x69	; 105
    f61e:	77 e0       	ldi	r23, 0x07	; 7
    f620:	c5 01       	movw	r24, r10
    f622:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2833
  if (strcmp(str1, topic) == 0)
    f626:	b4 01       	movw	r22, r8
    f628:	c5 01       	movw	r24, r10
    f62a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f62e:	89 2b       	or	r24, r25
    f630:	f9 f4       	brne	.+62     	; 0xf670 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1392>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2835
  {
    mqtt_process_message++;
    f632:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    f636:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    f63a:	01 96       	adiw	r24, 0x01	; 1
    f63c:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    f640:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2836
    log_error(&mqtt_client, "bootloader ..... ");
    f644:	65 e7       	ldi	r22, 0x75	; 117
    f646:	77 e0       	ldi	r23, 0x07	; 7
    f648:	8d ee       	ldi	r24, 0xED	; 237
    f64a:	9b e0       	ldi	r25, 0x0B	; 11
    f64c:	0e 94 ed 82 	call	0x105da	; 0x105da <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2837
    EEPROM.write(bootloader_tag, 255);
    f650:	6f ef       	ldi	r22, 0xFF	; 255
    f652:	90 e0       	ldi	r25, 0x00	; 0
    f654:	80 e0       	ldi	r24, 0x00	; 0
    f656:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <EEPROMClass::write(int, unsigned char) [clone .isra.4]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    f65a:	88 e1       	ldi	r24, 0x18	; 24
    f65c:	9e e0       	ldi	r25, 0x0E	; 14
    f65e:	0f b6       	in	r0, 0x3f	; 63
    f660:	f8 94       	cli
    f662:	a8 95       	wdr
    f664:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    f668:	0f be       	out	0x3f, r0	; 63
    f66a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    f66e:	ff cf       	rjmp	.-2      	; 0xf66e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1390>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2843
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
    f670:	6d e0       	ldi	r22, 0x0D	; 13
    f672:	76 e5       	ldi	r23, 0x56	; 86
    f674:	c5 01       	movw	r24, r10
    f676:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2844
  strcat(str1, device.nazev);
    f67a:	69 ee       	ldi	r22, 0xE9	; 233
    f67c:	7e e0       	ldi	r23, 0x0E	; 14
    f67e:	c5 01       	movw	r24, r10
    f680:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2845
  strcat(str1, "/default");
    f684:	68 ed       	ldi	r22, 0xD8	; 216
    f686:	76 e0       	ldi	r23, 0x06	; 6
    f688:	c5 01       	movw	r24, r10
    f68a:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2846
  if (strcmp(str1, topic) == 0)
    f68e:	b4 01       	movw	r22, r8
    f690:	c5 01       	movw	r24, r10
    f692:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    f696:	89 2b       	or	r24, r25
    f698:	91 f4       	brne	.+36     	; 0xf6be <mqtt_callback(char*, unsigned char*, unsigned int)+0x13e0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2848
  {
    mqtt_process_message++;
    f69a:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
    f69e:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
    f6a2:	01 96       	adiw	r24, 0x01	; 1
    f6a4:	90 93 cc 0e 	sts	0x0ECC, r25	; 0x800ecc <mqtt_process_message+0x1>
    f6a8:	80 93 cb 0e 	sts	0x0ECB, r24	; 0x800ecb <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2850
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
    f6ac:	84 ec       	ldi	r24, 0xC4	; 196
    f6ae:	98 e0       	ldi	r25, 0x08	; 8
    f6b0:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    f6b4:	68 2f       	mov	r22, r24
    f6b6:	8a e5       	ldi	r24, 0x5A	; 90
    f6b8:	90 e0       	ldi	r25, 0x00	; 0
    f6ba:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <EEPROMClass::write(int, unsigned char) [clone .isra.4]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2853
  }

}
    f6be:	c8 53       	subi	r28, 0x38	; 56
    f6c0:	df 4f       	sbci	r29, 0xFF	; 255
    f6c2:	0f b6       	in	r0, 0x3f	; 63
    f6c4:	f8 94       	cli
    f6c6:	de bf       	out	0x3e, r29	; 62
    f6c8:	0f be       	out	0x3f, r0	; 63
    f6ca:	cd bf       	out	0x3d, r28	; 61
    f6cc:	df 91       	pop	r29
    f6ce:	cf 91       	pop	r28
    f6d0:	1f 91       	pop	r17
    f6d2:	0f 91       	pop	r16
    f6d4:	ff 90       	pop	r15
    f6d6:	ef 90       	pop	r14
    f6d8:	df 90       	pop	r13
    f6da:	cf 90       	pop	r12
    f6dc:	bf 90       	pop	r11
    f6de:	af 90       	pop	r10
    f6e0:	9f 90       	pop	r9
    f6e2:	8f 90       	pop	r8
    f6e4:	7f 90       	pop	r7
    f6e6:	6f 90       	pop	r6
    f6e8:	5f 90       	pop	r5
    f6ea:	4f 90       	pop	r4
    f6ec:	3f 90       	pop	r3
    f6ee:	2f 90       	pop	r2
    f6f0:	08 95       	ret

0000f6f2 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>:
_GLOBAL__sub_I__Z11serial_putccP6__file():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5413
//////////////////////////
void click_button_default_value(uint16_t args1, uint16_t args2, uint8_t args3)
{
  EEPROM.write(set_default_values, 255);
  resetFunc();
}
    f6f2:	cf 92       	push	r12
    f6f4:	ef 92       	push	r14
    f6f6:	0f 93       	push	r16
    f6f8:	cf 93       	push	r28
    f6fa:	df 93       	push	r29
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    f6fc:	00 e0       	ldi	r16, 0x00	; 0
    f6fe:	20 e0       	ldi	r18, 0x00	; 0
    f700:	40 e0       	ldi	r20, 0x00	; 0
    f702:	60 e0       	ldi	r22, 0x00	; 0
    f704:	81 e4       	ldi	r24, 0x41	; 65
    f706:	9e e0       	ldi	r25, 0x0E	; 14
    f708:	0e 94 97 cf 	call	0x19f2e	; 0x19f2e <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:45
#include "DisplaySettingsMenu.h"
#include "RTDSMenu.h"
#include "MenuSettingsTime.h"


SoftSPIB swSPI(STORAGE_MOSI, STORAGE_MISO, STORAGE_CLK);
    f70c:	29 e1       	ldi	r18, 0x19	; 25
    f70e:	4a e1       	ldi	r20, 0x1A	; 26
    f710:	68 e1       	ldi	r22, 0x18	; 24
    f712:	8a e3       	ldi	r24, 0x3A	; 58
    f714:	9e e0       	ldi	r25, 0x0E	; 14
    f716:	0e 94 ae a3 	call	0x1475c	; 0x1475c <SoftSPIB::SoftSPIB(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:49


RTC_DS1307 rtc;
DateTime now;
    f71a:	40 e0       	ldi	r20, 0x00	; 0
    f71c:	50 e0       	ldi	r21, 0x00	; 0
    f71e:	ba 01       	movw	r22, r20
    f720:	82 e3       	ldi	r24, 0x32	; 50
    f722:	9e e0       	ldi	r25, 0x0E	; 14
    f724:	0e 94 56 c1 	call	0x182ac	; 0x182ac <DateTime::DateTime(unsigned long)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:51

EthernetClient ethClient;
    f728:	85 e2       	ldi	r24, 0x25	; 37
    f72a:	9e e0       	ldi	r25, 0x0E	; 14
    f72c:	0e 94 ec ab 	call	0x157d8	; 0x157d8 <EthernetClient::EthernetClient()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:52
EthernetUDP udpClient;
    f730:	8a e0       	ldi	r24, 0x0A	; 10
    f732:	9e e0       	ldi	r25, 0x0E	; 14
    f734:	0e 94 4f ae 	call	0x15c9e	; 0x15c9e <EthernetUDP::EthernetUDP()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:53
PubSubClient mqtt_client(ethClient);
    f738:	65 e2       	ldi	r22, 0x25	; 37
    f73a:	7e e0       	ldi	r23, 0x0E	; 14
    f73c:	8d ee       	ldi	r24, 0xED	; 237
    f73e:	9b e0       	ldi	r25, 0x0B	; 11
    f740:	0e 94 1f b7 	call	0x16e3e	; 0x16e3e <PubSubClient::PubSubClient(Client&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:57



RF24 radio(NRF_CE, NRF_CS);
    f744:	42 e0       	ldi	r20, 0x02	; 2
    f746:	50 e0       	ldi	r21, 0x00	; 0
    f748:	63 e0       	ldi	r22, 0x03	; 3
    f74a:	70 e0       	ldi	r23, 0x00	; 0
    f74c:	85 ed       	ldi	r24, 0xD5	; 213
    f74e:	9b e0       	ldi	r25, 0x0B	; 11
    f750:	0e 94 34 bf 	call	0x17e68	; 0x17e68 <RF24::RF24(unsigned int, unsigned int)>
_ZN24Temperature_LM75_DerivedC4EP7TwoWirehPNS_10AttributesE():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:66
  void writeIntegerTemperatureRegister(uint8_t register_index, int16_t value);

public:

  Temperature_LM75_Derived(TwoWire *bus, uint8_t i2c_address, Attributes *attributes) {
    this->bus = bus;
    f754:	c8 ec       	ldi	r28, 0xC8	; 200
    f756:	db e0       	ldi	r29, 0x0B	; 11
    f758:	85 e1       	ldi	r24, 0x15	; 21
    f75a:	91 e1       	ldi	r25, 0x11	; 17
    f75c:	99 83       	std	Y+1, r25	; 0x01
    f75e:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:67
    this->i2c_address = i2c_address;
    f760:	88 e4       	ldi	r24, 0x48	; 72
    f762:	8a 83       	std	Y+2, r24	; 0x02
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:68
    this->attributes = attributes;
    f764:	ee e7       	ldi	r30, 0x7E	; 126
    f766:	f2 e0       	ldi	r31, 0x02	; 2
    f768:	fc 87       	std	Y+12, r31	; 0x0c
    f76a:	eb 87       	std	Y+11, r30	; 0x0b
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:70

    setInternalResolution(attributes->default_temperature_resolution);
    f76c:	91 81       	ldd	r25, Z+1	; 0x01
_ZN24Temperature_LM75_Derived21setInternalResolutionEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:51
  Attributes *attributes;

  // Set the internal resolution of the temperature sensor, which affects
  // conversions and which bits are discarded.
  void setInternalResolution(uint8_t resolution) {
    this->resolution = resolution;
    f76e:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:52
    this->resolution_mask = ~(uint16_t)((1 << (attributes->temperature_width - resolution)) - 1);
    f770:	80 81       	ld	r24, Z
    f772:	89 1b       	sub	r24, r25
    f774:	99 0b       	sbc	r25, r25
    f776:	61 e0       	ldi	r22, 0x01	; 1
    f778:	70 e0       	ldi	r23, 0x00	; 0
    f77a:	9b 01       	movw	r18, r22
    f77c:	02 c0       	rjmp	.+4      	; 0xf782 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0x90>
    f77e:	22 0f       	add	r18, r18
    f780:	33 1f       	adc	r19, r19
    f782:	8a 95       	dec	r24
    f784:	e2 f7       	brpl	.-8      	; 0xf77e <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0x8c>
    f786:	c9 01       	movw	r24, r18
    f788:	91 95       	neg	r25
    f78a:	81 95       	neg	r24
    f78c:	91 09       	sbc	r25, r1
    f78e:	9d 83       	std	Y+5, r25	; 0x05
    f790:	8c 83       	std	Y+4, r24	; 0x04
_ZN24Temperature_LM75_DerivedC4EP7TwoWirehPNS_10AttributesE():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:71
    this->bus = bus;
    this->i2c_address = i2c_address;
    this->attributes = attributes;

    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
    f792:	82 81       	ldd	r24, Z+2	; 0x02
_ZN24Temperature_LM75_Derived31setInternalTemperatureFracWidthEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:56
    this->resolution = resolution;
    this->resolution_mask = ~(uint16_t)((1 << (attributes->temperature_width - resolution)) - 1);
  }

  void setInternalTemperatureFracWidth(uint8_t temperature_frac_width) {
    this->temperature_frac_width = temperature_frac_width;
    f794:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:57
    temperature_frac_factor = 1.0 / (float)(1 << temperature_frac_width);
    f796:	02 c0       	rjmp	.+4      	; 0xf79c <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xaa>
    f798:	66 0f       	add	r22, r22
    f79a:	77 1f       	adc	r23, r23
    f79c:	8a 95       	dec	r24
    f79e:	e2 f7       	brpl	.-8      	; 0xf798 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xa6>
    f7a0:	07 2e       	mov	r0, r23
    f7a2:	00 0c       	add	r0, r0
    f7a4:	88 0b       	sbc	r24, r24
    f7a6:	99 0b       	sbc	r25, r25
    f7a8:	0e 94 14 d2 	call	0x1a428	; 0x1a428 <__floatsisf>
    f7ac:	9b 01       	movw	r18, r22
    f7ae:	ac 01       	movw	r20, r24
    f7b0:	60 e0       	ldi	r22, 0x00	; 0
    f7b2:	70 e0       	ldi	r23, 0x00	; 0
    f7b4:	80 e8       	ldi	r24, 0x80	; 128
    f7b6:	9f e3       	ldi	r25, 0x3F	; 63
    f7b8:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
    f7bc:	6f 83       	std	Y+7, r22	; 0x07
    f7be:	78 87       	std	Y+8, r23	; 0x08
    f7c0:	89 87       	std	Y+9, r24	; 0x09
    f7c2:	9a 87       	std	Y+10, r25	; 0x0a
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:64
//RF24Mesh mesh(radio, network);

Generic_LM75_11Bit lm75_temp;


LCDWIKI_KBV my_lcd(ST7796S, 33, 35, 36, 32, 34); //model,cs,cd,wr,rd,reset
    f7c4:	82 e2       	ldi	r24, 0x22	; 34
    f7c6:	c8 2e       	mov	r12, r24
    f7c8:	90 e2       	ldi	r25, 0x20	; 32
    f7ca:	e9 2e       	mov	r14, r25
    f7cc:	04 e2       	ldi	r16, 0x24	; 36
    f7ce:	23 e2       	ldi	r18, 0x23	; 35
    f7d0:	41 e2       	ldi	r20, 0x21	; 33
    f7d2:	6a e0       	ldi	r22, 0x0A	; 10
    f7d4:	70 e0       	ldi	r23, 0x00	; 0
    f7d6:	89 e8       	ldi	r24, 0x89	; 137
    f7d8:	9b e0       	ldi	r25, 0x0B	; 11
    f7da:	0e 94 d4 92 	call	0x125a8	; 0x125a8 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:65
LCDWIKI_TOUCH my_touch(28, 27, 29, 30, 7, 31); //tcs,tclk,tdout,tdin,tirq, sdcd
    f7de:	2f e1       	ldi	r18, 0x1F	; 31
    f7e0:	c2 2e       	mov	r12, r18
    f7e2:	37 e0       	ldi	r19, 0x07	; 7
    f7e4:	e3 2e       	mov	r14, r19
    f7e6:	0e e1       	ldi	r16, 0x1E	; 30
    f7e8:	2d e1       	ldi	r18, 0x1D	; 29
    f7ea:	4b e1       	ldi	r20, 0x1B	; 27
    f7ec:	6c e1       	ldi	r22, 0x1C	; 28
    f7ee:	87 e6       	ldi	r24, 0x67	; 103
    f7f0:	9b e0       	ldi	r25, 0x0B	; 11
    f7f2:	0e 94 11 a0 	call	0x14022	; 0x14022 <LCDWIKI_TOUCH::LCDWIKI_TOUCH(signed char, signed char, signed char, signed char, signed char, signed char)>
_ZN11ArduinoJson18StaticJsonDocumentILj256EEC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/StaticJsonDocument.hpp:18
template <size_t CAPACITY>
class StaticJsonDocument {
 public:
  uint8_t nestingLimit;

  StaticJsonDocument() : nestingLimit(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
    f7f6:	e8 e5       	ldi	r30, 0x58	; 88
    f7f8:	fa e0       	ldi	r31, 0x0A	; 10
    f7fa:	8a e0       	ldi	r24, 0x0A	; 10
    f7fc:	80 83       	st	Z, r24
_ZN11ArduinoJson9Internals20StaticMemoryPoolBaseC4EPcj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:44
    StaticMemoryPoolBase* _parent;
    char* _start;
  };

  StaticMemoryPoolBase(char* memoryPool, size_t capa)
      : _buffer(memoryPool), _capacity(capa), _size(0) {}
    f7fe:	81 e6       	ldi	r24, 0x61	; 97
    f800:	9a e0       	ldi	r25, 0x0A	; 10
    f802:	94 83       	std	Z+4, r25	; 0x04
    f804:	83 83       	std	Z+3, r24	; 0x03
    f806:	80 e0       	ldi	r24, 0x00	; 0
    f808:	91 e0       	ldi	r25, 0x01	; 1
    f80a:	96 83       	std	Z+6, r25	; 0x06
    f80c:	85 83       	std	Z+5, r24	; 0x05
    f80e:	10 86       	std	Z+8, r1	; 0x08
    f810:	17 82       	std	Z+7, r1	; 0x07
_ZN11ArduinoJson9Internals16StaticMemoryPoolILj256EEC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:115
class StaticMemoryPool : public StaticMemoryPoolBase {
  static const size_t ACTUAL_CAPACITY = Max<1, CAPACITY>::value;

 public:
  explicit StaticMemoryPool()
      : StaticMemoryPoolBase(_buffer, ACTUAL_CAPACITY) {}
    f812:	85 eb       	ldi	r24, 0xB5	; 181
    f814:	97 e0       	ldi	r25, 0x07	; 7
    f816:	92 83       	std	Z+2, r25	; 0x02
    f818:	81 83       	std	Z+1, r24	; 0x01
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    f81a:	10 92 62 0b 	sts	0x0B62, r1	; 0x800b62 <doc+0x10a>
    f81e:	10 92 61 0b 	sts	0x0B61, r1	; 0x800b61 <doc+0x109>
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:69

StaticJsonDocument<256> doc;

SRAM_23LC SRAM(&swSPI, STORAGE_RAM_CS, SRAM_23LC1024);
    f822:	21 e0       	ldi	r18, 0x01	; 1
    f824:	30 e0       	ldi	r19, 0x00	; 0
    f826:	46 e1       	ldi	r20, 0x16	; 22
    f828:	6a e3       	ldi	r22, 0x3A	; 58
    f82a:	7e e0       	ldi	r23, 0x0E	; 14
    f82c:	8b e4       	ldi	r24, 0x4B	; 75
    f82e:	9a e0       	ldi	r25, 0x0A	; 10
    f830:	0e 94 6b a4 	call	0x148d6	; 0x148d6 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:70
EEPROM_CAT25 SROM(&swSPI, STORAGE_EEPROM_CS , CAT25M02);
    f834:	30 e0       	ldi	r19, 0x00	; 0
    f836:	20 e0       	ldi	r18, 0x00	; 0
    f838:	47 e1       	ldi	r20, 0x17	; 23
    f83a:	6a e3       	ldi	r22, 0x3A	; 58
    f83c:	7e e0       	ldi	r23, 0x0E	; 14
    f83e:	8c e3       	ldi	r24, 0x3C	; 60
    f840:	9a e0       	ldi	r25, 0x0A	; 10
_GLOBAL__sub_I__Z11serial_putccP6__file():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5413
//////////////////////////
void click_button_default_value(uint16_t args1, uint16_t args2, uint8_t args3)
{
  EEPROM.write(set_default_values, 255);
  resetFunc();
}
    f842:	df 91       	pop	r29
    f844:	cf 91       	pop	r28
    f846:	0f 91       	pop	r16
    f848:	ef 90       	pop	r14
    f84a:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:70
LCDWIKI_TOUCH my_touch(28, 27, 29, 30, 7, 31); //tcs,tclk,tdout,tdin,tirq, sdcd

StaticJsonDocument<256> doc;

SRAM_23LC SRAM(&swSPI, STORAGE_RAM_CS, SRAM_23LC1024);
EEPROM_CAT25 SROM(&swSPI, STORAGE_EEPROM_CS , CAT25M02);
    f84c:	0c 94 9c a5 	jmp	0x14b38	; 0x14b38 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)>

0000f850 <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
    f850:	cf 93       	push	r28
    f852:	c8 2f       	mov	r28, r24
_ZN14HardwareSerial5writeEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    f854:	68 2f       	mov	r22, r24
    f856:	83 ef       	ldi	r24, 0xF3	; 243
    f858:	91 e1       	ldi	r25, 0x11	; 17
    f85a:	0e 94 6d ce 	call	0x19cda	; 0x19cda <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
    f85e:	8c 2f       	mov	r24, r28
    f860:	cc 0f       	add	r28, r28
    f862:	99 0b       	sbc	r25, r25
    f864:	cf 91       	pop	r28
    f866:	08 95       	ret

0000f868 <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:466
}

PubSubClient * mqtt_get_public_mqtt_client(void)
{
  return pub_mqtt_client;
}
    f868:	0c 94 79 df 	jmp	0x1bef2	; 0x1bef2 <eeprom_read_byte>

0000f86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
    f86c:	0c 94 81 df 	jmp	0x1bf02	; 0x1bf02 <eeprom_write_byte>

0000f870 <load_setup_network()>:
_Z18load_setup_networkv():
    f870:	ef 92       	push	r14
    f872:	ff 92       	push	r15
    f874:	0f 93       	push	r16
    f876:	1f 93       	push	r17
    f878:	cf 93       	push	r28
    f87a:	df 93       	push	r29
    f87c:	03 ed       	ldi	r16, 0xD3	; 211
    f87e:	1e e0       	ldi	r17, 0x0E	; 14
    f880:	ce e6       	ldi	r28, 0x6E	; 110
    f882:	d0 e0       	ldi	r29, 0x00	; 0
    f884:	ce 01       	movw	r24, r28
    f886:	0e 94 34 7c 	call	0xf868	; 0xf868 <EEPROMClass::read(int) [clone .isra.0]>
    f88a:	f8 01       	movw	r30, r16
    f88c:	81 93       	st	Z+, r24
    f88e:	8f 01       	movw	r16, r30
    f890:	21 96       	adiw	r28, 0x01	; 1
    f892:	c4 37       	cpi	r28, 0x74	; 116
    f894:	d1 05       	cpc	r29, r1
    f896:	b1 f7       	brne	.-20     	; 0xf884 <load_setup_network()+0x14>
    f898:	09 ed       	ldi	r16, 0xD9	; 217
    f89a:	1e e0       	ldi	r17, 0x0E	; 14
    f89c:	ce 01       	movw	r24, r28
    f89e:	0e 94 34 7c 	call	0xf868	; 0xf868 <EEPROMClass::read(int) [clone .isra.0]>
    f8a2:	f8 01       	movw	r30, r16
    f8a4:	81 93       	st	Z+, r24
    f8a6:	8f 01       	movw	r16, r30
    f8a8:	21 96       	adiw	r28, 0x01	; 1
    f8aa:	c8 37       	cpi	r28, 0x78	; 120
    f8ac:	d1 05       	cpc	r29, r1
    f8ae:	b1 f7       	brne	.-20     	; 0xf89c <load_setup_network()+0x2c>
    f8b0:	0d ed       	ldi	r16, 0xDD	; 221
    f8b2:	1e e0       	ldi	r17, 0x0E	; 14
    f8b4:	ce 01       	movw	r24, r28
    f8b6:	0e 94 34 7c 	call	0xf868	; 0xf868 <EEPROMClass::read(int) [clone .isra.0]>
    f8ba:	f8 01       	movw	r30, r16
    f8bc:	81 93       	st	Z+, r24
    f8be:	8f 01       	movw	r16, r30
    f8c0:	21 96       	adiw	r28, 0x01	; 1
    f8c2:	cc 37       	cpi	r28, 0x7C	; 124
    f8c4:	d1 05       	cpc	r29, r1
    f8c6:	b1 f7       	brne	.-20     	; 0xf8b4 <load_setup_network()+0x44>
    f8c8:	45 ee       	ldi	r20, 0xE5	; 229
    f8ca:	e4 2e       	mov	r14, r20
    f8cc:	4e e0       	ldi	r20, 0x0E	; 14
    f8ce:	f4 2e       	mov	r15, r20
    f8d0:	00 e8       	ldi	r16, 0x80	; 128
    f8d2:	10 e0       	ldi	r17, 0x00	; 0
    f8d4:	c8 01       	movw	r24, r16
    f8d6:	0e 94 34 7c 	call	0xf868	; 0xf868 <EEPROMClass::read(int) [clone .isra.0]>
    f8da:	f7 01       	movw	r30, r14
    f8dc:	81 93       	st	Z+, r24
    f8de:	7f 01       	movw	r14, r30
    f8e0:	0f 5f       	subi	r16, 0xFF	; 255
    f8e2:	1f 4f       	sbci	r17, 0xFF	; 255
    f8e4:	04 38       	cpi	r16, 0x84	; 132
    f8e6:	11 05       	cpc	r17, r1
    f8e8:	a9 f7       	brne	.-22     	; 0xf8d4 <load_setup_network()+0x64>
    f8ea:	31 ee       	ldi	r19, 0xE1	; 225
    f8ec:	e3 2e       	mov	r14, r19
    f8ee:	3e e0       	ldi	r19, 0x0E	; 14
    f8f0:	f3 2e       	mov	r15, r19
    f8f2:	ce 01       	movw	r24, r28
    f8f4:	0e 94 34 7c 	call	0xf868	; 0xf868 <EEPROMClass::read(int) [clone .isra.0]>
    f8f8:	f7 01       	movw	r30, r14
    f8fa:	81 93       	st	Z+, r24
    f8fc:	7f 01       	movw	r14, r30
    f8fe:	21 96       	adiw	r28, 0x01	; 1
    f900:	c0 38       	cpi	r28, 0x80	; 128
    f902:	d1 05       	cpc	r29, r1
    f904:	b1 f7       	brne	.-20     	; 0xf8f2 <load_setup_network()+0x82>
    f906:	29 ee       	ldi	r18, 0xE9	; 233
    f908:	e2 2e       	mov	r14, r18
    f90a:	2e e0       	ldi	r18, 0x0E	; 14
    f90c:	f2 2e       	mov	r15, r18
    f90e:	c4 e6       	ldi	r28, 0x64	; 100
    f910:	d0 e0       	ldi	r29, 0x00	; 0
    f912:	ce 01       	movw	r24, r28
    f914:	0e 94 34 7c 	call	0xf868	; 0xf868 <EEPROMClass::read(int) [clone .isra.0]>
    f918:	f7 01       	movw	r30, r14
    f91a:	81 93       	st	Z+, r24
    f91c:	7f 01       	movw	r14, r30
    f91e:	21 96       	adiw	r28, 0x01	; 1
    f920:	cd 36       	cpi	r28, 0x6D	; 109
    f922:	d1 05       	cpc	r29, r1
    f924:	b1 f7       	brne	.-20     	; 0xf912 <load_setup_network()+0xa2>
    f926:	c3 ef       	ldi	r28, 0xF3	; 243
    f928:	de e0       	ldi	r29, 0x0E	; 14
    f92a:	c8 01       	movw	r24, r16
    f92c:	0e 94 34 7c 	call	0xf868	; 0xf868 <EEPROMClass::read(int) [clone .isra.0]>
    f930:	89 93       	st	Y+, r24
    f932:	0f 5f       	subi	r16, 0xFF	; 255
    f934:	1f 4f       	sbci	r17, 0xFF	; 255
    f936:	08 38       	cpi	r16, 0x88	; 136
    f938:	11 05       	cpc	r17, r1
    f93a:	b9 f7       	brne	.-18     	; 0xf92a <load_setup_network()+0xba>
    f93c:	88 e8       	ldi	r24, 0x88	; 136
    f93e:	90 e0       	ldi	r25, 0x00	; 0
    f940:	0e 94 34 7c 	call	0xf868	; 0xf868 <EEPROMClass::read(int) [clone .isra.0]>
    f944:	c8 2f       	mov	r28, r24
    f946:	89 e8       	ldi	r24, 0x89	; 137
    f948:	90 e0       	ldi	r25, 0x00	; 0
    f94a:	0e 94 34 7c 	call	0xf868	; 0xf868 <EEPROMClass::read(int) [clone .isra.0]>
    f94e:	2c 2f       	mov	r18, r28
    f950:	30 e0       	ldi	r19, 0x00	; 0
    f952:	32 2f       	mov	r19, r18
    f954:	22 27       	eor	r18, r18
    f956:	82 0f       	add	r24, r18
    f958:	93 2f       	mov	r25, r19
    f95a:	91 1d       	adc	r25, r1
    f95c:	90 93 f8 0e 	sts	0x0EF8, r25	; 0x800ef8 <device+0x25>
    f960:	80 93 f7 0e 	sts	0x0EF7, r24	; 0x800ef7 <device+0x24>
    f964:	09 ef       	ldi	r16, 0xF9	; 249
    f966:	1e e0       	ldi	r17, 0x0E	; 14
    f968:	ca e8       	ldi	r28, 0x8A	; 138
    f96a:	d0 e0       	ldi	r29, 0x00	; 0
    f96c:	ce 01       	movw	r24, r28
    f96e:	0e 94 34 7c 	call	0xf868	; 0xf868 <EEPROMClass::read(int) [clone .isra.0]>
    f972:	f8 01       	movw	r30, r16
    f974:	81 93       	st	Z+, r24
    f976:	8f 01       	movw	r16, r30
    f978:	21 96       	adiw	r28, 0x01	; 1
    f97a:	ce 39       	cpi	r28, 0x9E	; 158
    f97c:	d1 05       	cpc	r29, r1
    f97e:	b1 f7       	brne	.-20     	; 0xf96c <load_setup_network()+0xfc>
    f980:	0d e0       	ldi	r16, 0x0D	; 13
    f982:	1f e0       	ldi	r17, 0x0F	; 15
    f984:	ce 01       	movw	r24, r28
    f986:	0e 94 34 7c 	call	0xf868	; 0xf868 <EEPROMClass::read(int) [clone .isra.0]>
    f98a:	f8 01       	movw	r30, r16
    f98c:	81 93       	st	Z+, r24
    f98e:	8f 01       	movw	r16, r30
    f990:	21 96       	adiw	r28, 0x01	; 1
    f992:	c2 3b       	cpi	r28, 0xB2	; 178
    f994:	d1 05       	cpc	r29, r1
    f996:	b1 f7       	brne	.-20     	; 0xf984 <load_setup_network()+0x114>
    f998:	01 e2       	ldi	r16, 0x21	; 33
    f99a:	1f e0       	ldi	r17, 0x0F	; 15
    f99c:	ce 01       	movw	r24, r28
    f99e:	0e 94 34 7c 	call	0xf868	; 0xf868 <EEPROMClass::read(int) [clone .isra.0]>
    f9a2:	f8 01       	movw	r30, r16
    f9a4:	81 93       	st	Z+, r24
    f9a6:	8f 01       	movw	r16, r30
    f9a8:	21 96       	adiw	r28, 0x01	; 1
    f9aa:	c6 3b       	cpi	r28, 0xB6	; 182
    f9ac:	d1 05       	cpc	r29, r1
    f9ae:	b1 f7       	brne	.-20     	; 0xf99c <load_setup_network()+0x12c>
    f9b0:	df 91       	pop	r29
    f9b2:	cf 91       	pop	r28
    f9b4:	1f 91       	pop	r17
    f9b6:	0f 91       	pop	r16
    f9b8:	ff 90       	pop	r15
    f9ba:	ef 90       	pop	r14
    f9bc:	08 95       	ret

0000f9be <save_setup_network()>:
_Z18save_setup_networkv():
    f9be:	ef 92       	push	r14
    f9c0:	ff 92       	push	r15
    f9c2:	0f 93       	push	r16
    f9c4:	1f 93       	push	r17
    f9c6:	cf 93       	push	r28
    f9c8:	df 93       	push	r29
    f9ca:	03 ed       	ldi	r16, 0xD3	; 211
    f9cc:	1e e0       	ldi	r17, 0x0E	; 14
    f9ce:	ce e6       	ldi	r28, 0x6E	; 110
    f9d0:	d0 e0       	ldi	r29, 0x00	; 0
    f9d2:	f8 01       	movw	r30, r16
    f9d4:	61 91       	ld	r22, Z+
    f9d6:	8f 01       	movw	r16, r30
    f9d8:	ce 01       	movw	r24, r28
    f9da:	0e 94 36 7c 	call	0xf86c	; 0xf86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    f9de:	21 96       	adiw	r28, 0x01	; 1
    f9e0:	c4 37       	cpi	r28, 0x74	; 116
    f9e2:	d1 05       	cpc	r29, r1
    f9e4:	b1 f7       	brne	.-20     	; 0xf9d2 <save_setup_network()+0x14>
    f9e6:	09 ed       	ldi	r16, 0xD9	; 217
    f9e8:	1e e0       	ldi	r17, 0x0E	; 14
    f9ea:	f8 01       	movw	r30, r16
    f9ec:	61 91       	ld	r22, Z+
    f9ee:	8f 01       	movw	r16, r30
    f9f0:	ce 01       	movw	r24, r28
    f9f2:	0e 94 36 7c 	call	0xf86c	; 0xf86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    f9f6:	21 96       	adiw	r28, 0x01	; 1
    f9f8:	c8 37       	cpi	r28, 0x78	; 120
    f9fa:	d1 05       	cpc	r29, r1
    f9fc:	b1 f7       	brne	.-20     	; 0xf9ea <save_setup_network()+0x2c>
    f9fe:	0d ed       	ldi	r16, 0xDD	; 221
    fa00:	1e e0       	ldi	r17, 0x0E	; 14
    fa02:	f8 01       	movw	r30, r16
    fa04:	61 91       	ld	r22, Z+
    fa06:	8f 01       	movw	r16, r30
    fa08:	ce 01       	movw	r24, r28
    fa0a:	0e 94 36 7c 	call	0xf86c	; 0xf86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    fa0e:	21 96       	adiw	r28, 0x01	; 1
    fa10:	cc 37       	cpi	r28, 0x7C	; 124
    fa12:	d1 05       	cpc	r29, r1
    fa14:	b1 f7       	brne	.-20     	; 0xfa02 <save_setup_network()+0x44>
    fa16:	25 ee       	ldi	r18, 0xE5	; 229
    fa18:	e2 2e       	mov	r14, r18
    fa1a:	2e e0       	ldi	r18, 0x0E	; 14
    fa1c:	f2 2e       	mov	r15, r18
    fa1e:	00 e8       	ldi	r16, 0x80	; 128
    fa20:	10 e0       	ldi	r17, 0x00	; 0
    fa22:	f7 01       	movw	r30, r14
    fa24:	61 91       	ld	r22, Z+
    fa26:	7f 01       	movw	r14, r30
    fa28:	c8 01       	movw	r24, r16
    fa2a:	0e 94 36 7c 	call	0xf86c	; 0xf86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    fa2e:	0f 5f       	subi	r16, 0xFF	; 255
    fa30:	1f 4f       	sbci	r17, 0xFF	; 255
    fa32:	04 38       	cpi	r16, 0x84	; 132
    fa34:	11 05       	cpc	r17, r1
    fa36:	a9 f7       	brne	.-22     	; 0xfa22 <save_setup_network()+0x64>
    fa38:	91 ee       	ldi	r25, 0xE1	; 225
    fa3a:	e9 2e       	mov	r14, r25
    fa3c:	9e e0       	ldi	r25, 0x0E	; 14
    fa3e:	f9 2e       	mov	r15, r25
    fa40:	f7 01       	movw	r30, r14
    fa42:	61 91       	ld	r22, Z+
    fa44:	7f 01       	movw	r14, r30
    fa46:	ce 01       	movw	r24, r28
    fa48:	0e 94 36 7c 	call	0xf86c	; 0xf86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    fa4c:	21 96       	adiw	r28, 0x01	; 1
    fa4e:	c0 38       	cpi	r28, 0x80	; 128
    fa50:	d1 05       	cpc	r29, r1
    fa52:	b1 f7       	brne	.-20     	; 0xfa40 <save_setup_network()+0x82>
    fa54:	89 ee       	ldi	r24, 0xE9	; 233
    fa56:	e8 2e       	mov	r14, r24
    fa58:	8e e0       	ldi	r24, 0x0E	; 14
    fa5a:	f8 2e       	mov	r15, r24
    fa5c:	c4 e6       	ldi	r28, 0x64	; 100
    fa5e:	d0 e0       	ldi	r29, 0x00	; 0
    fa60:	f7 01       	movw	r30, r14
    fa62:	61 91       	ld	r22, Z+
    fa64:	7f 01       	movw	r14, r30
    fa66:	ce 01       	movw	r24, r28
    fa68:	0e 94 36 7c 	call	0xf86c	; 0xf86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    fa6c:	21 96       	adiw	r28, 0x01	; 1
    fa6e:	cd 36       	cpi	r28, 0x6D	; 109
    fa70:	d1 05       	cpc	r29, r1
    fa72:	b1 f7       	brne	.-20     	; 0xfa60 <save_setup_network()+0xa2>
    fa74:	c3 ef       	ldi	r28, 0xF3	; 243
    fa76:	de e0       	ldi	r29, 0x0E	; 14
    fa78:	69 91       	ld	r22, Y+
    fa7a:	c8 01       	movw	r24, r16
    fa7c:	0e 94 36 7c 	call	0xf86c	; 0xf86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    fa80:	0f 5f       	subi	r16, 0xFF	; 255
    fa82:	1f 4f       	sbci	r17, 0xFF	; 255
    fa84:	08 38       	cpi	r16, 0x88	; 136
    fa86:	11 05       	cpc	r17, r1
    fa88:	b9 f7       	brne	.-18     	; 0xfa78 <save_setup_network()+0xba>
    fa8a:	60 91 f8 0e 	lds	r22, 0x0EF8	; 0x800ef8 <device+0x25>
    fa8e:	88 e8       	ldi	r24, 0x88	; 136
    fa90:	90 e0       	ldi	r25, 0x00	; 0
    fa92:	0e 94 36 7c 	call	0xf86c	; 0xf86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    fa96:	60 91 f7 0e 	lds	r22, 0x0EF7	; 0x800ef7 <device+0x24>
    fa9a:	89 e8       	ldi	r24, 0x89	; 137
    fa9c:	90 e0       	ldi	r25, 0x00	; 0
    fa9e:	0e 94 36 7c 	call	0xf86c	; 0xf86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    faa2:	09 ef       	ldi	r16, 0xF9	; 249
    faa4:	1e e0       	ldi	r17, 0x0E	; 14
    faa6:	ca e8       	ldi	r28, 0x8A	; 138
    faa8:	d0 e0       	ldi	r29, 0x00	; 0
    faaa:	f8 01       	movw	r30, r16
    faac:	61 91       	ld	r22, Z+
    faae:	8f 01       	movw	r16, r30
    fab0:	ce 01       	movw	r24, r28
    fab2:	0e 94 36 7c 	call	0xf86c	; 0xf86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    fab6:	21 96       	adiw	r28, 0x01	; 1
    fab8:	ce 39       	cpi	r28, 0x9E	; 158
    faba:	d1 05       	cpc	r29, r1
    fabc:	b1 f7       	brne	.-20     	; 0xfaaa <save_setup_network()+0xec>
    fabe:	0d e0       	ldi	r16, 0x0D	; 13
    fac0:	1f e0       	ldi	r17, 0x0F	; 15
    fac2:	f8 01       	movw	r30, r16
    fac4:	61 91       	ld	r22, Z+
    fac6:	8f 01       	movw	r16, r30
    fac8:	ce 01       	movw	r24, r28
    faca:	0e 94 36 7c 	call	0xf86c	; 0xf86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    face:	21 96       	adiw	r28, 0x01	; 1
    fad0:	c2 3b       	cpi	r28, 0xB2	; 178
    fad2:	d1 05       	cpc	r29, r1
    fad4:	b1 f7       	brne	.-20     	; 0xfac2 <save_setup_network()+0x104>
    fad6:	01 e2       	ldi	r16, 0x21	; 33
    fad8:	1f e0       	ldi	r17, 0x0F	; 15
    fada:	f8 01       	movw	r30, r16
    fadc:	61 91       	ld	r22, Z+
    fade:	8f 01       	movw	r16, r30
    fae0:	ce 01       	movw	r24, r28
    fae2:	0e 94 36 7c 	call	0xf86c	; 0xf86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    fae6:	21 96       	adiw	r28, 0x01	; 1
    fae8:	c6 3b       	cpi	r28, 0xB6	; 182
    faea:	d1 05       	cpc	r29, r1
    faec:	b1 f7       	brne	.-20     	; 0xfada <save_setup_network()+0x11c>
    faee:	df 91       	pop	r29
    faf0:	cf 91       	pop	r28
    faf2:	1f 91       	pop	r17
    faf4:	0f 91       	pop	r16
    faf6:	ff 90       	pop	r15
    faf8:	ef 90       	pop	r14
    fafa:	08 95       	ret

0000fafc <device_get_name(char*)>:
_Z15device_get_namePc():
    fafc:	0f 93       	push	r16
    fafe:	1f 93       	push	r17
    fb00:	cf 93       	push	r28
    fb02:	df 93       	push	r29
    fb04:	8c 01       	movw	r16, r24
    fb06:	c4 e6       	ldi	r28, 0x64	; 100
    fb08:	d0 e0       	ldi	r29, 0x00	; 0
    fb0a:	ce 01       	movw	r24, r28
    fb0c:	0e 94 34 7c 	call	0xf868	; 0xf868 <EEPROMClass::read(int) [clone .isra.0]>
    fb10:	f8 01       	movw	r30, r16
    fb12:	81 93       	st	Z+, r24
    fb14:	8f 01       	movw	r16, r30
    fb16:	10 82       	st	Z, r1
    fb18:	88 23       	and	r24, r24
    fb1a:	21 f0       	breq	.+8      	; 0xfb24 <device_get_name(char*)+0x28>
    fb1c:	21 96       	adiw	r28, 0x01	; 1
    fb1e:	cd 36       	cpi	r28, 0x6D	; 109
    fb20:	d1 05       	cpc	r29, r1
    fb22:	99 f7       	brne	.-26     	; 0xfb0a <device_get_name(char*)+0xe>
    fb24:	df 91       	pop	r29
    fb26:	cf 91       	pop	r28
    fb28:	1f 91       	pop	r17
    fb2a:	0f 91       	pop	r16
    fb2c:	08 95       	ret

0000fb2e <device_set_name(char*)>:
_Z15device_set_namePc():
    fb2e:	ff 92       	push	r15
    fb30:	0f 93       	push	r16
    fb32:	1f 93       	push	r17
    fb34:	cf 93       	push	r28
    fb36:	df 93       	push	r29
    fb38:	8c 01       	movw	r16, r24
    fb3a:	d0 e0       	ldi	r29, 0x00	; 0
    fb3c:	c0 e0       	ldi	r28, 0x00	; 0
    fb3e:	f8 01       	movw	r30, r16
    fb40:	f1 90       	ld	r15, Z+
    fb42:	8f 01       	movw	r16, r30
    fb44:	6f 2d       	mov	r22, r15
    fb46:	ce 01       	movw	r24, r28
    fb48:	8c 59       	subi	r24, 0x9C	; 156
    fb4a:	9f 4f       	sbci	r25, 0xFF	; 255
    fb4c:	0e 94 36 7c 	call	0xf86c	; 0xf86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    fb50:	f1 10       	cpse	r15, r1
    fb52:	0b c0       	rjmp	.+22     	; 0xfb6a <device_set_name(char*)+0x3c>
    fb54:	60 e0       	ldi	r22, 0x00	; 0
    fb56:	ce 01       	movw	r24, r28
    fb58:	8b 59       	subi	r24, 0x9B	; 155
    fb5a:	9f 4f       	sbci	r25, 0xFF	; 255
    fb5c:	df 91       	pop	r29
    fb5e:	cf 91       	pop	r28
    fb60:	1f 91       	pop	r17
    fb62:	0f 91       	pop	r16
    fb64:	ff 90       	pop	r15
    fb66:	0c 94 36 7c 	jmp	0xf86c	; 0xf86c <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
    fb6a:	21 96       	adiw	r28, 0x01	; 1
    fb6c:	c9 30       	cpi	r28, 0x09	; 9
    fb6e:	d1 05       	cpc	r29, r1
    fb70:	31 f7       	brne	.-52     	; 0xfb3e <device_set_name(char*)+0x10>
    fb72:	df 91       	pop	r29
    fb74:	cf 91       	pop	r28
    fb76:	1f 91       	pop	r17
    fb78:	0f 91       	pop	r16
    fb7a:	ff 90       	pop	r15
    fb7c:	08 95       	ret

0000fb7e <setting_network(char*, char*)>:
_Z15setting_networkPcS_():
    fb7e:	ef 92       	push	r14
    fb80:	ff 92       	push	r15
    fb82:	0f 93       	push	r16
    fb84:	1f 93       	push	r17
    fb86:	cf 93       	push	r28
    fb88:	df 93       	push	r29
    fb8a:	7b 01       	movw	r14, r22
    fb8c:	67 e1       	ldi	r22, 0x17	; 23
    fb8e:	73 e0       	ldi	r23, 0x03	; 3
    fb90:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
    fb94:	ec 01       	movw	r28, r24
    fb96:	10 e0       	ldi	r17, 0x00	; 0
    fb98:	20 97       	sbiw	r28, 0x00	; 0
    fb9a:	09 f4       	brne	.+2      	; 0xfb9e <setting_network(char*, char*)+0x20>
    fb9c:	ba c0       	rjmp	.+372    	; 0xfd12 <setting_network(char*, char*)+0x194>
    fb9e:	67 eb       	ldi	r22, 0xB7	; 183
    fba0:	77 e0       	ldi	r23, 0x07	; 7
    fba2:	ce 01       	movw	r24, r28
    fba4:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    fba8:	89 2b       	or	r24, r25
    fbaa:	59 f4       	brne	.+22     	; 0xfbc2 <setting_network(char*, char*)+0x44>
    fbac:	0a e0       	ldi	r16, 0x0A	; 10
    fbae:	10 e0       	ldi	r17, 0x00	; 0
    fbb0:	26 e0       	ldi	r18, 0x06	; 6
    fbb2:	30 e0       	ldi	r19, 0x00	; 0
    fbb4:	43 ed       	ldi	r20, 0xD3	; 211
    fbb6:	5e e0       	ldi	r21, 0x0E	; 14
    fbb8:	6a e3       	ldi	r22, 0x3A	; 58
    fbba:	c7 01       	movw	r24, r14
    fbbc:	0e 94 7e b3 	call	0x166fc	; 0x166fc <parseBytes(char const*, char, unsigned char*, int, int)>
    fbc0:	11 e0       	ldi	r17, 0x01	; 1
    fbc2:	6b eb       	ldi	r22, 0xBB	; 187
    fbc4:	77 e0       	ldi	r23, 0x07	; 7
    fbc6:	ce 01       	movw	r24, r28
    fbc8:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    fbcc:	89 2b       	or	r24, r25
    fbce:	59 f4       	brne	.+22     	; 0xfbe6 <setting_network(char*, char*)+0x68>
    fbd0:	0a e0       	ldi	r16, 0x0A	; 10
    fbd2:	10 e0       	ldi	r17, 0x00	; 0
    fbd4:	24 e0       	ldi	r18, 0x04	; 4
    fbd6:	30 e0       	ldi	r19, 0x00	; 0
    fbd8:	49 ed       	ldi	r20, 0xD9	; 217
    fbda:	5e e0       	ldi	r21, 0x0E	; 14
    fbdc:	6e e2       	ldi	r22, 0x2E	; 46
    fbde:	c7 01       	movw	r24, r14
    fbe0:	0e 94 7e b3 	call	0x166fc	; 0x166fc <parseBytes(char const*, char, unsigned char*, int, int)>
    fbe4:	11 e0       	ldi	r17, 0x01	; 1
    fbe6:	6e eb       	ldi	r22, 0xBE	; 190
    fbe8:	77 e0       	ldi	r23, 0x07	; 7
    fbea:	ce 01       	movw	r24, r28
    fbec:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    fbf0:	89 2b       	or	r24, r25
    fbf2:	59 f4       	brne	.+22     	; 0xfc0a <setting_network(char*, char*)+0x8c>
    fbf4:	0a e0       	ldi	r16, 0x0A	; 10
    fbf6:	10 e0       	ldi	r17, 0x00	; 0
    fbf8:	24 e0       	ldi	r18, 0x04	; 4
    fbfa:	30 e0       	ldi	r19, 0x00	; 0
    fbfc:	4d ed       	ldi	r20, 0xDD	; 221
    fbfe:	5e e0       	ldi	r21, 0x0E	; 14
    fc00:	6e e2       	ldi	r22, 0x2E	; 46
    fc02:	c7 01       	movw	r24, r14
    fc04:	0e 94 7e b3 	call	0x166fc	; 0x166fc <parseBytes(char const*, char, unsigned char*, int, int)>
    fc08:	11 e0       	ldi	r17, 0x01	; 1
    fc0a:	66 ec       	ldi	r22, 0xC6	; 198
    fc0c:	77 e0       	ldi	r23, 0x07	; 7
    fc0e:	ce 01       	movw	r24, r28
    fc10:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    fc14:	89 2b       	or	r24, r25
    fc16:	59 f4       	brne	.+22     	; 0xfc2e <setting_network(char*, char*)+0xb0>
    fc18:	0a e0       	ldi	r16, 0x0A	; 10
    fc1a:	10 e0       	ldi	r17, 0x00	; 0
    fc1c:	24 e0       	ldi	r18, 0x04	; 4
    fc1e:	30 e0       	ldi	r19, 0x00	; 0
    fc20:	45 ee       	ldi	r20, 0xE5	; 229
    fc22:	5e e0       	ldi	r21, 0x0E	; 14
    fc24:	6e e2       	ldi	r22, 0x2E	; 46
    fc26:	c7 01       	movw	r24, r14
    fc28:	0e 94 7e b3 	call	0x166fc	; 0x166fc <parseBytes(char const*, char, unsigned char*, int, int)>
    fc2c:	11 e0       	ldi	r17, 0x01	; 1
    fc2e:	69 ec       	ldi	r22, 0xC9	; 201
    fc30:	77 e0       	ldi	r23, 0x07	; 7
    fc32:	ce 01       	movw	r24, r28
    fc34:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    fc38:	89 2b       	or	r24, r25
    fc3a:	59 f4       	brne	.+22     	; 0xfc52 <setting_network(char*, char*)+0xd4>
    fc3c:	0a e0       	ldi	r16, 0x0A	; 10
    fc3e:	10 e0       	ldi	r17, 0x00	; 0
    fc40:	24 e0       	ldi	r18, 0x04	; 4
    fc42:	30 e0       	ldi	r19, 0x00	; 0
    fc44:	41 ee       	ldi	r20, 0xE1	; 225
    fc46:	5e e0       	ldi	r21, 0x0E	; 14
    fc48:	6e e2       	ldi	r22, 0x2E	; 46
    fc4a:	c7 01       	movw	r24, r14
    fc4c:	0e 94 7e b3 	call	0x166fc	; 0x166fc <parseBytes(char const*, char, unsigned char*, int, int)>
    fc50:	11 e0       	ldi	r17, 0x01	; 1
    fc52:	6d ec       	ldi	r22, 0xCD	; 205
    fc54:	77 e0       	ldi	r23, 0x07	; 7
    fc56:	ce 01       	movw	r24, r28
    fc58:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    fc5c:	89 2b       	or	r24, r25
    fc5e:	59 f4       	brne	.+22     	; 0xfc76 <setting_network(char*, char*)+0xf8>
    fc60:	0a e0       	ldi	r16, 0x0A	; 10
    fc62:	10 e0       	ldi	r17, 0x00	; 0
    fc64:	24 e0       	ldi	r18, 0x04	; 4
    fc66:	30 e0       	ldi	r19, 0x00	; 0
    fc68:	41 e2       	ldi	r20, 0x21	; 33
    fc6a:	5f e0       	ldi	r21, 0x0F	; 15
    fc6c:	6e e2       	ldi	r22, 0x2E	; 46
    fc6e:	c7 01       	movw	r24, r14
    fc70:	0e 94 7e b3 	call	0x166fc	; 0x166fc <parseBytes(char const*, char, unsigned char*, int, int)>
    fc74:	11 e0       	ldi	r17, 0x01	; 1
    fc76:	61 ed       	ldi	r22, 0xD1	; 209
    fc78:	77 e0       	ldi	r23, 0x07	; 7
    fc7a:	ce 01       	movw	r24, r28
    fc7c:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    fc80:	89 2b       	or	r24, r25
    fc82:	59 f4       	brne	.+22     	; 0xfc9a <setting_network(char*, char*)+0x11c>
    fc84:	0a e0       	ldi	r16, 0x0A	; 10
    fc86:	10 e0       	ldi	r17, 0x00	; 0
    fc88:	24 e0       	ldi	r18, 0x04	; 4
    fc8a:	30 e0       	ldi	r19, 0x00	; 0
    fc8c:	43 ef       	ldi	r20, 0xF3	; 243
    fc8e:	5e e0       	ldi	r21, 0x0E	; 14
    fc90:	6e e2       	ldi	r22, 0x2E	; 46
    fc92:	c7 01       	movw	r24, r14
    fc94:	0e 94 7e b3 	call	0x166fc	; 0x166fc <parseBytes(char const*, char, unsigned char*, int, int)>
    fc98:	11 e0       	ldi	r17, 0x01	; 1
    fc9a:	6b ed       	ldi	r22, 0xDB	; 219
    fc9c:	77 e0       	ldi	r23, 0x07	; 7
    fc9e:	ce 01       	movw	r24, r28
    fca0:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    fca4:	89 2b       	or	r24, r25
    fca6:	41 f4       	brne	.+16     	; 0xfcb8 <setting_network(char*, char*)+0x13a>
    fca8:	c7 01       	movw	r24, r14
    fcaa:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
    fcae:	90 93 f8 0e 	sts	0x0EF8, r25	; 0x800ef8 <device+0x25>
    fcb2:	80 93 f7 0e 	sts	0x0EF7, r24	; 0x800ef7 <device+0x24>
    fcb6:	11 e0       	ldi	r17, 0x01	; 1
    fcb8:	65 ee       	ldi	r22, 0xE5	; 229
    fcba:	77 e0       	ldi	r23, 0x07	; 7
    fcbc:	ce 01       	movw	r24, r28
    fcbe:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    fcc2:	89 2b       	or	r24, r25
    fcc4:	31 f4       	brne	.+12     	; 0xfcd2 <setting_network(char*, char*)+0x154>
    fcc6:	b7 01       	movw	r22, r14
    fcc8:	89 ef       	ldi	r24, 0xF9	; 249
    fcca:	9e e0       	ldi	r25, 0x0E	; 14
    fccc:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    fcd0:	11 e0       	ldi	r17, 0x01	; 1
    fcd2:	6f ee       	ldi	r22, 0xEF	; 239
    fcd4:	77 e0       	ldi	r23, 0x07	; 7
    fcd6:	ce 01       	movw	r24, r28
    fcd8:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    fcdc:	89 2b       	or	r24, r25
    fcde:	31 f4       	brne	.+12     	; 0xfcec <setting_network(char*, char*)+0x16e>
    fce0:	b7 01       	movw	r22, r14
    fce2:	8d e0       	ldi	r24, 0x0D	; 13
    fce4:	9f e0       	ldi	r25, 0x0F	; 15
    fce6:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
    fcea:	11 e0       	ldi	r17, 0x01	; 1
    fcec:	67 e5       	ldi	r22, 0x57	; 87
    fcee:	73 e0       	ldi	r23, 0x03	; 3
    fcf0:	ce 01       	movw	r24, r28
    fcf2:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcmp>
    fcf6:	89 2b       	or	r24, r25
    fcf8:	21 f4       	brne	.+8      	; 0xfd02 <setting_network(char*, char*)+0x184>
    fcfa:	c7 01       	movw	r24, r14
    fcfc:	0e 94 97 7d 	call	0xfb2e	; 0xfb2e <device_set_name(char*)>
    fd00:	12 e0       	ldi	r17, 0x02	; 2
    fd02:	67 e1       	ldi	r22, 0x17	; 23
    fd04:	73 e0       	ldi	r23, 0x03	; 3
    fd06:	90 e0       	ldi	r25, 0x00	; 0
    fd08:	80 e0       	ldi	r24, 0x00	; 0
    fd0a:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
    fd0e:	ec 01       	movw	r28, r24
    fd10:	43 cf       	rjmp	.-378    	; 0xfb98 <setting_network(char*, char*)+0x1a>
    fd12:	81 2f       	mov	r24, r17
    fd14:	df 91       	pop	r29
    fd16:	cf 91       	pop	r28
    fd18:	1f 91       	pop	r17
    fd1a:	0f 91       	pop	r16
    fd1c:	ff 90       	pop	r15
    fd1e:	ef 90       	pop	r14
    fd20:	08 95       	ret

0000fd22 <send_mqtt_set_header(char const*)>:
_Z20send_mqtt_set_headerPKc():
    fd22:	90 93 d0 0e 	sts	0x0ED0, r25	; 0x800ed0 <header_out+0x1>
    fd26:	80 93 cf 0e 	sts	0x0ECF, r24	; 0x800ecf <header_out>
    fd2a:	08 95       	ret

0000fd2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_():
    fd2c:	9f 92       	push	r9
    fd2e:	af 92       	push	r10
    fd30:	bf 92       	push	r11
    fd32:	cf 92       	push	r12
    fd34:	df 92       	push	r13
    fd36:	ef 92       	push	r14
    fd38:	ff 92       	push	r15
    fd3a:	0f 93       	push	r16
    fd3c:	1f 93       	push	r17
    fd3e:	cf 93       	push	r28
    fd40:	df 93       	push	r29
    fd42:	cd b7       	in	r28, 0x3d	; 61
    fd44:	de b7       	in	r29, 0x3e	; 62
    fd46:	c6 55       	subi	r28, 0x56	; 86
    fd48:	d1 09       	sbc	r29, r1
    fd4a:	0f b6       	in	r0, 0x3f	; 63
    fd4c:	f8 94       	cli
    fd4e:	de bf       	out	0x3e, r29	; 62
    fd50:	0f be       	out	0x3f, r0	; 63
    fd52:	cd bf       	out	0x3d, r28	; 61
    fd54:	7c 01       	movw	r14, r24
    fd56:	5b 01       	movw	r10, r22
    fd58:	94 2e       	mov	r9, r20
    fd5a:	69 01       	movw	r12, r18
    fd5c:	0e 94 0e b9 	call	0x1721c	; 0x1721c <PubSubClient::connected()>
    fd60:	88 23       	and	r24, r24
    fd62:	09 f4       	brne	.+2      	; 0xfd66 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0x3a>
    fd64:	51 c0       	rjmp	.+162    	; 0xfe08 <__DATA_REGION_LENGTH__+0x8>
    fd66:	80 91 d1 0e 	lds	r24, 0x0ED1	; 0x800ed1 <mqtt_send_message>
    fd6a:	90 91 d2 0e 	lds	r25, 0x0ED2	; 0x800ed2 <mqtt_send_message+0x1>
    fd6e:	01 96       	adiw	r24, 0x01	; 1
    fd70:	90 93 d2 0e 	sts	0x0ED2, r25	; 0x800ed2 <mqtt_send_message+0x1>
    fd74:	80 93 d1 0e 	sts	0x0ED1, r24	; 0x800ed1 <mqtt_send_message>
    fd78:	ce 01       	movw	r24, r28
    fd7a:	83 5b       	subi	r24, 0xB3	; 179
    fd7c:	9f 4f       	sbci	r25, 0xFF	; 255
    fd7e:	0e 94 7e 7d 	call	0xfafc	; 0xfafc <device_get_name(char*)>
    fd82:	60 91 cf 0e 	lds	r22, 0x0ECF	; 0x800ecf <header_out>
    fd86:	70 91 d0 0e 	lds	r23, 0x0ED0	; 0x800ed0 <header_out+0x1>
    fd8a:	ce 01       	movw	r24, r28
    fd8c:	01 96       	adiw	r24, 0x01	; 1
    fd8e:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    fd92:	be 01       	movw	r22, r28
    fd94:	63 5b       	subi	r22, 0xB3	; 179
    fd96:	7f 4f       	sbci	r23, 0xFF	; 255
    fd98:	ce 01       	movw	r24, r28
    fd9a:	01 96       	adiw	r24, 0x01	; 1
    fd9c:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    fda0:	67 e1       	ldi	r22, 0x17	; 23
    fda2:	73 e0       	ldi	r23, 0x03	; 3
    fda4:	ce 01       	movw	r24, r28
    fda6:	01 96       	adiw	r24, 0x01	; 1
    fda8:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    fdac:	b5 01       	movw	r22, r10
    fdae:	ce 01       	movw	r24, r28
    fdb0:	01 96       	adiw	r24, 0x01	; 1
    fdb2:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    fdb6:	67 e1       	ldi	r22, 0x17	; 23
    fdb8:	73 e0       	ldi	r23, 0x03	; 3
    fdba:	ce 01       	movw	r24, r28
    fdbc:	01 96       	adiw	r24, 0x01	; 1
    fdbe:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
itoa():
    fdc2:	4a e0       	ldi	r20, 0x0A	; 10
    fdc4:	be 01       	movw	r22, r28
    fdc6:	6f 5b       	subi	r22, 0xBF	; 191
    fdc8:	7f 4f       	sbci	r23, 0xFF	; 255
    fdca:	89 2d       	mov	r24, r9
    fdcc:	90 e0       	ldi	r25, 0x00	; 0
    fdce:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_():
    fdd2:	be 01       	movw	r22, r28
    fdd4:	6f 5b       	subi	r22, 0xBF	; 191
    fdd6:	7f 4f       	sbci	r23, 0xFF	; 255
    fdd8:	ce 01       	movw	r24, r28
    fdda:	01 96       	adiw	r24, 0x01	; 1
    fddc:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    fde0:	67 e1       	ldi	r22, 0x17	; 23
    fde2:	73 e0       	ldi	r23, 0x03	; 3
    fde4:	ce 01       	movw	r24, r28
    fde6:	01 96       	adiw	r24, 0x01	; 1
    fde8:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    fdec:	b6 01       	movw	r22, r12
    fdee:	ce 01       	movw	r24, r28
    fdf0:	01 96       	adiw	r24, 0x01	; 1
    fdf2:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    fdf6:	a8 01       	movw	r20, r16
    fdf8:	be 01       	movw	r22, r28
    fdfa:	6f 5f       	subi	r22, 0xFF	; 255
    fdfc:	7f 4f       	sbci	r23, 0xFF	; 255
    fdfe:	c7 01       	movw	r24, r14
    fe00:	0e 94 9c bc 	call	0x17938	; 0x17938 <PubSubClient::publish(char const*, char const*)>
    fe04:	81 11       	cpse	r24, r1
    fe06:	09 c0       	rjmp	.+18     	; 0xfe1a <__DATA_REGION_LENGTH__+0x1a>
    fe08:	80 91 25 0f 	lds	r24, 0x0F25	; 0x800f25 <mqtt_error>
    fe0c:	90 91 26 0f 	lds	r25, 0x0F26	; 0x800f26 <mqtt_error+0x1>
    fe10:	01 96       	adiw	r24, 0x01	; 1
    fe12:	90 93 26 0f 	sts	0x0F26, r25	; 0x800f26 <mqtt_error+0x1>
    fe16:	80 93 25 0f 	sts	0x0F25, r24	; 0x800f25 <mqtt_error>
    fe1a:	ca 5a       	subi	r28, 0xAA	; 170
    fe1c:	df 4f       	sbci	r29, 0xFF	; 255
    fe1e:	0f b6       	in	r0, 0x3f	; 63
    fe20:	f8 94       	cli
    fe22:	de bf       	out	0x3e, r29	; 62
    fe24:	0f be       	out	0x3f, r0	; 63
    fe26:	cd bf       	out	0x3d, r28	; 61
    fe28:	df 91       	pop	r29
    fe2a:	cf 91       	pop	r28
    fe2c:	1f 91       	pop	r17
    fe2e:	0f 91       	pop	r16
    fe30:	ff 90       	pop	r15
    fe32:	ef 90       	pop	r14
    fe34:	df 90       	pop	r13
    fe36:	cf 90       	pop	r12
    fe38:	bf 90       	pop	r11
    fe3a:	af 90       	pop	r10
    fe3c:	9f 90       	pop	r9
    fe3e:	08 95       	ret

0000fe40 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>:
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
    fe40:	8f 92       	push	r8
    fe42:	9f 92       	push	r9
    fe44:	af 92       	push	r10
    fe46:	bf 92       	push	r11
    fe48:	cf 92       	push	r12
    fe4a:	df 92       	push	r13
    fe4c:	ef 92       	push	r14
    fe4e:	ff 92       	push	r15
    fe50:	0f 93       	push	r16
    fe52:	1f 93       	push	r17
    fe54:	cf 93       	push	r28
    fe56:	df 93       	push	r29
    fe58:	cd b7       	in	r28, 0x3d	; 61
    fe5a:	de b7       	in	r29, 0x3e	; 62
    fe5c:	c6 55       	subi	r28, 0x56	; 86
    fe5e:	d1 09       	sbc	r29, r1
    fe60:	0f b6       	in	r0, 0x3f	; 63
    fe62:	f8 94       	cli
    fe64:	de bf       	out	0x3e, r29	; 62
    fe66:	0f be       	out	0x3f, r0	; 63
    fe68:	cd bf       	out	0x3d, r28	; 61
    fe6a:	6c 01       	movw	r12, r24
    fe6c:	5b 01       	movw	r10, r22
    fe6e:	84 2e       	mov	r8, r20
    fe70:	92 2e       	mov	r9, r18
    fe72:	0e 94 0e b9 	call	0x1721c	; 0x1721c <PubSubClient::connected()>
    fe76:	88 23       	and	r24, r24
    fe78:	09 f4       	brne	.+2      	; 0xfe7c <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x3c>
    fe7a:	66 c0       	rjmp	.+204    	; 0xff48 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x108>
    fe7c:	80 91 d1 0e 	lds	r24, 0x0ED1	; 0x800ed1 <mqtt_send_message>
    fe80:	90 91 d2 0e 	lds	r25, 0x0ED2	; 0x800ed2 <mqtt_send_message+0x1>
    fe84:	01 96       	adiw	r24, 0x01	; 1
    fe86:	90 93 d2 0e 	sts	0x0ED2, r25	; 0x800ed2 <mqtt_send_message+0x1>
    fe8a:	80 93 d1 0e 	sts	0x0ED1, r24	; 0x800ed1 <mqtt_send_message>
    fe8e:	ce 01       	movw	r24, r28
    fe90:	83 5b       	subi	r24, 0xB3	; 179
    fe92:	9f 4f       	sbci	r25, 0xFF	; 255
    fe94:	0e 94 7e 7d 	call	0xfafc	; 0xfafc <device_get_name(char*)>
    fe98:	60 91 cf 0e 	lds	r22, 0x0ECF	; 0x800ecf <header_out>
    fe9c:	70 91 d0 0e 	lds	r23, 0x0ED0	; 0x800ed0 <header_out+0x1>
    fea0:	ce 01       	movw	r24, r28
    fea2:	01 96       	adiw	r24, 0x01	; 1
    fea4:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    fea8:	be 01       	movw	r22, r28
    feaa:	63 5b       	subi	r22, 0xB3	; 179
    feac:	7f 4f       	sbci	r23, 0xFF	; 255
    feae:	ce 01       	movw	r24, r28
    feb0:	01 96       	adiw	r24, 0x01	; 1
    feb2:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    feb6:	67 e1       	ldi	r22, 0x17	; 23
    feb8:	73 e0       	ldi	r23, 0x03	; 3
    feba:	ce 01       	movw	r24, r28
    febc:	01 96       	adiw	r24, 0x01	; 1
    febe:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    fec2:	b5 01       	movw	r22, r10
    fec4:	ce 01       	movw	r24, r28
    fec6:	01 96       	adiw	r24, 0x01	; 1
    fec8:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    fecc:	67 e1       	ldi	r22, 0x17	; 23
    fece:	73 e0       	ldi	r23, 0x03	; 3
    fed0:	ce 01       	movw	r24, r28
    fed2:	01 96       	adiw	r24, 0x01	; 1
    fed4:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
itoa():
    fed8:	4a e0       	ldi	r20, 0x0A	; 10
    feda:	be 01       	movw	r22, r28
    fedc:	6f 5b       	subi	r22, 0xBF	; 191
    fede:	7f 4f       	sbci	r23, 0xFF	; 255
    fee0:	88 2d       	mov	r24, r8
    fee2:	90 e0       	ldi	r25, 0x00	; 0
    fee4:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
    fee8:	be 01       	movw	r22, r28
    feea:	6f 5b       	subi	r22, 0xBF	; 191
    feec:	7f 4f       	sbci	r23, 0xFF	; 255
    feee:	ce 01       	movw	r24, r28
    fef0:	01 96       	adiw	r24, 0x01	; 1
    fef2:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    fef6:	67 e1       	ldi	r22, 0x17	; 23
    fef8:	73 e0       	ldi	r23, 0x03	; 3
    fefa:	ce 01       	movw	r24, r28
    fefc:	01 96       	adiw	r24, 0x01	; 1
    fefe:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
itoa():
    ff02:	4a e0       	ldi	r20, 0x0A	; 10
    ff04:	be 01       	movw	r22, r28
    ff06:	6f 5b       	subi	r22, 0xBF	; 191
    ff08:	7f 4f       	sbci	r23, 0xFF	; 255
    ff0a:	89 2d       	mov	r24, r9
    ff0c:	90 e0       	ldi	r25, 0x00	; 0
    ff0e:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
    ff12:	be 01       	movw	r22, r28
    ff14:	6f 5b       	subi	r22, 0xBF	; 191
    ff16:	7f 4f       	sbci	r23, 0xFF	; 255
    ff18:	ce 01       	movw	r24, r28
    ff1a:	01 96       	adiw	r24, 0x01	; 1
    ff1c:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    ff20:	67 e1       	ldi	r22, 0x17	; 23
    ff22:	73 e0       	ldi	r23, 0x03	; 3
    ff24:	ce 01       	movw	r24, r28
    ff26:	01 96       	adiw	r24, 0x01	; 1
    ff28:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    ff2c:	b8 01       	movw	r22, r16
    ff2e:	ce 01       	movw	r24, r28
    ff30:	01 96       	adiw	r24, 0x01	; 1
    ff32:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    ff36:	a7 01       	movw	r20, r14
    ff38:	be 01       	movw	r22, r28
    ff3a:	6f 5f       	subi	r22, 0xFF	; 255
    ff3c:	7f 4f       	sbci	r23, 0xFF	; 255
    ff3e:	c6 01       	movw	r24, r12
    ff40:	0e 94 9c bc 	call	0x17938	; 0x17938 <PubSubClient::publish(char const*, char const*)>
    ff44:	81 11       	cpse	r24, r1
    ff46:	09 c0       	rjmp	.+18     	; 0xff5a <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x11a>
    ff48:	80 91 25 0f 	lds	r24, 0x0F25	; 0x800f25 <mqtt_error>
    ff4c:	90 91 26 0f 	lds	r25, 0x0F26	; 0x800f26 <mqtt_error+0x1>
    ff50:	01 96       	adiw	r24, 0x01	; 1
    ff52:	90 93 26 0f 	sts	0x0F26, r25	; 0x800f26 <mqtt_error+0x1>
    ff56:	80 93 25 0f 	sts	0x0F25, r24	; 0x800f25 <mqtt_error>
    ff5a:	ca 5a       	subi	r28, 0xAA	; 170
    ff5c:	df 4f       	sbci	r29, 0xFF	; 255
    ff5e:	0f b6       	in	r0, 0x3f	; 63
    ff60:	f8 94       	cli
    ff62:	de bf       	out	0x3e, r29	; 62
    ff64:	0f be       	out	0x3f, r0	; 63
    ff66:	cd bf       	out	0x3d, r28	; 61
    ff68:	df 91       	pop	r29
    ff6a:	cf 91       	pop	r28
    ff6c:	1f 91       	pop	r17
    ff6e:	0f 91       	pop	r16
    ff70:	ff 90       	pop	r15
    ff72:	ef 90       	pop	r14
    ff74:	df 90       	pop	r13
    ff76:	cf 90       	pop	r12
    ff78:	bf 90       	pop	r11
    ff7a:	af 90       	pop	r10
    ff7c:	9f 90       	pop	r9
    ff7e:	8f 90       	pop	r8
    ff80:	08 95       	ret

0000ff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
    ff82:	cf 92       	push	r12
    ff84:	df 92       	push	r13
    ff86:	ef 92       	push	r14
    ff88:	ff 92       	push	r15
    ff8a:	0f 93       	push	r16
    ff8c:	1f 93       	push	r17
    ff8e:	cf 93       	push	r28
    ff90:	df 93       	push	r29
    ff92:	cd b7       	in	r28, 0x3d	; 61
    ff94:	de b7       	in	r29, 0x3e	; 62
    ff96:	ca 54       	subi	r28, 0x4A	; 74
    ff98:	d1 09       	sbc	r29, r1
    ff9a:	0f b6       	in	r0, 0x3f	; 63
    ff9c:	f8 94       	cli
    ff9e:	de bf       	out	0x3e, r29	; 62
    ffa0:	0f be       	out	0x3f, r0	; 63
    ffa2:	cd bf       	out	0x3d, r28	; 61
    ffa4:	8c 01       	movw	r16, r24
    ffa6:	6b 01       	movw	r12, r22
    ffa8:	7a 01       	movw	r14, r20
    ffaa:	0e 94 0e b9 	call	0x1721c	; 0x1721c <PubSubClient::connected()>
    ffae:	88 23       	and	r24, r24
    ffb0:	89 f1       	breq	.+98     	; 0x10014 <__EEPROM_REGION_LENGTH__+0x14>
    ffb2:	80 91 d1 0e 	lds	r24, 0x0ED1	; 0x800ed1 <mqtt_send_message>
    ffb6:	90 91 d2 0e 	lds	r25, 0x0ED2	; 0x800ed2 <mqtt_send_message+0x1>
    ffba:	01 96       	adiw	r24, 0x01	; 1
    ffbc:	90 93 d2 0e 	sts	0x0ED2, r25	; 0x800ed2 <mqtt_send_message+0x1>
    ffc0:	80 93 d1 0e 	sts	0x0ED1, r24	; 0x800ed1 <mqtt_send_message>
    ffc4:	ce 01       	movw	r24, r28
    ffc6:	8f 5b       	subi	r24, 0xBF	; 191
    ffc8:	9f 4f       	sbci	r25, 0xFF	; 255
    ffca:	0e 94 7e 7d 	call	0xfafc	; 0xfafc <device_get_name(char*)>
    ffce:	60 91 cf 0e 	lds	r22, 0x0ECF	; 0x800ecf <header_out>
    ffd2:	70 91 d0 0e 	lds	r23, 0x0ED0	; 0x800ed0 <header_out+0x1>
    ffd6:	ce 01       	movw	r24, r28
    ffd8:	01 96       	adiw	r24, 0x01	; 1
    ffda:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
    ffde:	be 01       	movw	r22, r28
    ffe0:	6f 5b       	subi	r22, 0xBF	; 191
    ffe2:	7f 4f       	sbci	r23, 0xFF	; 255
    ffe4:	ce 01       	movw	r24, r28
    ffe6:	01 96       	adiw	r24, 0x01	; 1
    ffe8:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    ffec:	67 e1       	ldi	r22, 0x17	; 23
    ffee:	73 e0       	ldi	r23, 0x03	; 3
    fff0:	ce 01       	movw	r24, r28
    fff2:	01 96       	adiw	r24, 0x01	; 1
    fff4:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
    fff8:	b6 01       	movw	r22, r12
    fffa:	ce 01       	movw	r24, r28
    fffc:	01 96       	adiw	r24, 0x01	; 1
    fffe:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
   10002:	a7 01       	movw	r20, r14
   10004:	be 01       	movw	r22, r28
   10006:	6f 5f       	subi	r22, 0xFF	; 255
   10008:	7f 4f       	sbci	r23, 0xFF	; 255
   1000a:	c8 01       	movw	r24, r16
   1000c:	0e 94 9c bc 	call	0x17938	; 0x17938 <PubSubClient::publish(char const*, char const*)>
   10010:	81 11       	cpse	r24, r1
   10012:	09 c0       	rjmp	.+18     	; 0x10026 <__EEPROM_REGION_LENGTH__+0x26>
   10014:	80 91 25 0f 	lds	r24, 0x0F25	; 0x800f25 <mqtt_error>
   10018:	90 91 26 0f 	lds	r25, 0x0F26	; 0x800f26 <mqtt_error+0x1>
   1001c:	01 96       	adiw	r24, 0x01	; 1
   1001e:	90 93 26 0f 	sts	0x0F26, r25	; 0x800f26 <mqtt_error+0x1>
   10022:	80 93 25 0f 	sts	0x0F25, r24	; 0x800f25 <mqtt_error>
   10026:	c6 5b       	subi	r28, 0xB6	; 182
   10028:	df 4f       	sbci	r29, 0xFF	; 255
   1002a:	0f b6       	in	r0, 0x3f	; 63
   1002c:	f8 94       	cli
   1002e:	de bf       	out	0x3e, r29	; 62
   10030:	0f be       	out	0x3f, r0	; 63
   10032:	cd bf       	out	0x3d, r28	; 61
   10034:	df 91       	pop	r29
   10036:	cf 91       	pop	r28
   10038:	1f 91       	pop	r17
   1003a:	0f 91       	pop	r16
   1003c:	ff 90       	pop	r15
   1003e:	ef 90       	pop	r14
   10040:	df 90       	pop	r13
   10042:	cf 90       	pop	r12
   10044:	08 95       	ret

00010046 <send_network_config(PubSubClient*)>:
_Z19send_network_configP12PubSubClient():
   10046:	ef 92       	push	r14
   10048:	ff 92       	push	r15
   1004a:	0f 93       	push	r16
   1004c:	cf 93       	push	r28
   1004e:	df 93       	push	r29
   10050:	cd b7       	in	r28, 0x3d	; 61
   10052:	de b7       	in	r29, 0x3e	; 62
   10054:	e4 97       	sbiw	r28, 0x34	; 52
   10056:	0f b6       	in	r0, 0x3f	; 63
   10058:	f8 94       	cli
   1005a:	de bf       	out	0x3e, r29	; 62
   1005c:	0f be       	out	0x3f, r0	; 63
   1005e:	cd bf       	out	0x3d, r28	; 61
   10060:	7c 01       	movw	r14, r24
   10062:	19 a2       	std	Y+33, r1	; 0x21
   10064:	00 e1       	ldi	r16, 0x10	; 16
   10066:	26 e0       	ldi	r18, 0x06	; 6
   10068:	43 ed       	ldi	r20, 0xD3	; 211
   1006a:	5e e0       	ldi	r21, 0x0E	; 14
   1006c:	6a e3       	ldi	r22, 0x3A	; 58
   1006e:	ce 01       	movw	r24, r28
   10070:	81 96       	adiw	r24, 0x21	; 33
   10072:	0e 94 ba b3 	call	0x16774	; 0x16774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10076:	6b ed       	ldi	r22, 0xDB	; 219
   10078:	79 e5       	ldi	r23, 0x59	; 89
   1007a:	ce 01       	movw	r24, r28
   1007c:	01 96       	adiw	r24, 0x01	; 1
   1007e:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
   10082:	ae 01       	movw	r20, r28
   10084:	4f 5d       	subi	r20, 0xDF	; 223
   10086:	5f 4f       	sbci	r21, 0xFF	; 255
   10088:	be 01       	movw	r22, r28
   1008a:	6f 5f       	subi	r22, 0xFF	; 255
   1008c:	7f 4f       	sbci	r23, 0xFF	; 255
   1008e:	c7 01       	movw	r24, r14
   10090:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10094:	19 a2       	std	Y+33, r1	; 0x21
   10096:	0a e0       	ldi	r16, 0x0A	; 10
   10098:	24 e0       	ldi	r18, 0x04	; 4
   1009a:	49 ed       	ldi	r20, 0xD9	; 217
   1009c:	5e e0       	ldi	r21, 0x0E	; 14
   1009e:	6e e2       	ldi	r22, 0x2E	; 46
   100a0:	ce 01       	movw	r24, r28
   100a2:	81 96       	adiw	r24, 0x21	; 33
   100a4:	0e 94 ba b3 	call	0x16774	; 0x16774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   100a8:	68 e0       	ldi	r22, 0x08	; 8
   100aa:	7a e5       	ldi	r23, 0x5A	; 90
   100ac:	ce 01       	movw	r24, r28
   100ae:	01 96       	adiw	r24, 0x01	; 1
   100b0:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
   100b4:	ae 01       	movw	r20, r28
   100b6:	4f 5d       	subi	r20, 0xDF	; 223
   100b8:	5f 4f       	sbci	r21, 0xFF	; 255
   100ba:	be 01       	movw	r22, r28
   100bc:	6f 5f       	subi	r22, 0xFF	; 255
   100be:	7f 4f       	sbci	r23, 0xFF	; 255
   100c0:	c7 01       	movw	r24, r14
   100c2:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   100c6:	19 a2       	std	Y+33, r1	; 0x21
   100c8:	24 e0       	ldi	r18, 0x04	; 4
   100ca:	4d ed       	ldi	r20, 0xDD	; 221
   100cc:	5e e0       	ldi	r21, 0x0E	; 14
   100ce:	6e e2       	ldi	r22, 0x2E	; 46
   100d0:	ce 01       	movw	r24, r28
   100d2:	81 96       	adiw	r24, 0x21	; 33
   100d4:	0e 94 ba b3 	call	0x16774	; 0x16774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   100d8:	6b ec       	ldi	r22, 0xCB	; 203
   100da:	79 e5       	ldi	r23, 0x59	; 89
   100dc:	ce 01       	movw	r24, r28
   100de:	01 96       	adiw	r24, 0x01	; 1
   100e0:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
   100e4:	ae 01       	movw	r20, r28
   100e6:	4f 5d       	subi	r20, 0xDF	; 223
   100e8:	5f 4f       	sbci	r21, 0xFF	; 255
   100ea:	be 01       	movw	r22, r28
   100ec:	6f 5f       	subi	r22, 0xFF	; 255
   100ee:	7f 4f       	sbci	r23, 0xFF	; 255
   100f0:	c7 01       	movw	r24, r14
   100f2:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   100f6:	19 a2       	std	Y+33, r1	; 0x21
   100f8:	24 e0       	ldi	r18, 0x04	; 4
   100fa:	45 ee       	ldi	r20, 0xE5	; 229
   100fc:	5e e0       	ldi	r21, 0x0E	; 14
   100fe:	6e e2       	ldi	r22, 0x2E	; 46
   10100:	ce 01       	movw	r24, r28
   10102:	81 96       	adiw	r24, 0x21	; 33
   10104:	0e 94 ba b3 	call	0x16774	; 0x16774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10108:	60 ec       	ldi	r22, 0xC0	; 192
   1010a:	79 e5       	ldi	r23, 0x59	; 89
   1010c:	ce 01       	movw	r24, r28
   1010e:	01 96       	adiw	r24, 0x01	; 1
   10110:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
   10114:	ae 01       	movw	r20, r28
   10116:	4f 5d       	subi	r20, 0xDF	; 223
   10118:	5f 4f       	sbci	r21, 0xFF	; 255
   1011a:	be 01       	movw	r22, r28
   1011c:	6f 5f       	subi	r22, 0xFF	; 255
   1011e:	7f 4f       	sbci	r23, 0xFF	; 255
   10120:	c7 01       	movw	r24, r14
   10122:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10126:	19 a2       	std	Y+33, r1	; 0x21
   10128:	24 e0       	ldi	r18, 0x04	; 4
   1012a:	41 ee       	ldi	r20, 0xE1	; 225
   1012c:	5e e0       	ldi	r21, 0x0E	; 14
   1012e:	6e e2       	ldi	r22, 0x2E	; 46
   10130:	ce 01       	movw	r24, r28
   10132:	81 96       	adiw	r24, 0x21	; 33
   10134:	0e 94 ba b3 	call	0x16774	; 0x16774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10138:	64 eb       	ldi	r22, 0xB4	; 180
   1013a:	79 e5       	ldi	r23, 0x59	; 89
   1013c:	ce 01       	movw	r24, r28
   1013e:	01 96       	adiw	r24, 0x01	; 1
   10140:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
   10144:	ae 01       	movw	r20, r28
   10146:	4f 5d       	subi	r20, 0xDF	; 223
   10148:	5f 4f       	sbci	r21, 0xFF	; 255
   1014a:	be 01       	movw	r22, r28
   1014c:	6f 5f       	subi	r22, 0xFF	; 255
   1014e:	7f 4f       	sbci	r23, 0xFF	; 255
   10150:	c7 01       	movw	r24, r14
   10152:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10156:	19 a2       	std	Y+33, r1	; 0x21
   10158:	24 e0       	ldi	r18, 0x04	; 4
   1015a:	41 e2       	ldi	r20, 0x21	; 33
   1015c:	5f e0       	ldi	r21, 0x0F	; 15
   1015e:	6e e2       	ldi	r22, 0x2E	; 46
   10160:	ce 01       	movw	r24, r28
   10162:	81 96       	adiw	r24, 0x21	; 33
   10164:	0e 94 ba b3 	call	0x16774	; 0x16774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10168:	68 ea       	ldi	r22, 0xA8	; 168
   1016a:	79 e5       	ldi	r23, 0x59	; 89
   1016c:	ce 01       	movw	r24, r28
   1016e:	01 96       	adiw	r24, 0x01	; 1
   10170:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
   10174:	ae 01       	movw	r20, r28
   10176:	4f 5d       	subi	r20, 0xDF	; 223
   10178:	5f 4f       	sbci	r21, 0xFF	; 255
   1017a:	be 01       	movw	r22, r28
   1017c:	6f 5f       	subi	r22, 0xFF	; 255
   1017e:	7f 4f       	sbci	r23, 0xFF	; 255
   10180:	c7 01       	movw	r24, r14
   10182:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10186:	19 a2       	std	Y+33, r1	; 0x21
   10188:	24 e0       	ldi	r18, 0x04	; 4
   1018a:	43 ef       	ldi	r20, 0xF3	; 243
   1018c:	5e e0       	ldi	r21, 0x0E	; 14
   1018e:	6e e2       	ldi	r22, 0x2E	; 46
   10190:	ce 01       	movw	r24, r28
   10192:	81 96       	adiw	r24, 0x21	; 33
   10194:	0e 94 ba b3 	call	0x16774	; 0x16774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10198:	66 e9       	ldi	r22, 0x96	; 150
   1019a:	79 e5       	ldi	r23, 0x59	; 89
   1019c:	ce 01       	movw	r24, r28
   1019e:	01 96       	adiw	r24, 0x01	; 1
   101a0:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
   101a4:	ae 01       	movw	r20, r28
   101a6:	4f 5d       	subi	r20, 0xDF	; 223
   101a8:	5f 4f       	sbci	r21, 0xFF	; 255
   101aa:	be 01       	movw	r22, r28
   101ac:	6f 5f       	subi	r22, 0xFF	; 255
   101ae:	7f 4f       	sbci	r23, 0xFF	; 255
   101b0:	c7 01       	movw	r24, r14
   101b2:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
   101b6:	4a e0       	ldi	r20, 0x0A	; 10
   101b8:	be 01       	movw	r22, r28
   101ba:	6f 5d       	subi	r22, 0xDF	; 223
   101bc:	7f 4f       	sbci	r23, 0xFF	; 255
   101be:	80 91 f7 0e 	lds	r24, 0x0EF7	; 0x800ef7 <device+0x24>
   101c2:	90 91 f8 0e 	lds	r25, 0x0EF8	; 0x800ef8 <device+0x25>
   101c6:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z19send_network_configP12PubSubClient():
   101ca:	64 e8       	ldi	r22, 0x84	; 132
   101cc:	79 e5       	ldi	r23, 0x59	; 89
   101ce:	ce 01       	movw	r24, r28
   101d0:	01 96       	adiw	r24, 0x01	; 1
   101d2:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
   101d6:	ae 01       	movw	r20, r28
   101d8:	4f 5d       	subi	r20, 0xDF	; 223
   101da:	5f 4f       	sbci	r21, 0xFF	; 255
   101dc:	be 01       	movw	r22, r28
   101de:	6f 5f       	subi	r22, 0xFF	; 255
   101e0:	7f 4f       	sbci	r23, 0xFF	; 255
   101e2:	c7 01       	movw	r24, r14
   101e4:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   101e8:	62 e7       	ldi	r22, 0x72	; 114
   101ea:	79 e5       	ldi	r23, 0x59	; 89
   101ec:	ce 01       	movw	r24, r28
   101ee:	01 96       	adiw	r24, 0x01	; 1
   101f0:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
   101f4:	49 ef       	ldi	r20, 0xF9	; 249
   101f6:	5e e0       	ldi	r21, 0x0E	; 14
   101f8:	be 01       	movw	r22, r28
   101fa:	6f 5f       	subi	r22, 0xFF	; 255
   101fc:	7f 4f       	sbci	r23, 0xFF	; 255
   101fe:	c7 01       	movw	r24, r14
   10200:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10204:	61 e6       	ldi	r22, 0x61	; 97
   10206:	79 e5       	ldi	r23, 0x59	; 89
   10208:	ce 01       	movw	r24, r28
   1020a:	01 96       	adiw	r24, 0x01	; 1
   1020c:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
   10210:	4d e0       	ldi	r20, 0x0D	; 13
   10212:	5f e0       	ldi	r21, 0x0F	; 15
   10214:	be 01       	movw	r22, r28
   10216:	6f 5f       	subi	r22, 0xFF	; 255
   10218:	7f 4f       	sbci	r23, 0xFF	; 255
   1021a:	c7 01       	movw	r24, r14
   1021c:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10220:	6b ef       	ldi	r22, 0xFB	; 251
   10222:	79 e5       	ldi	r23, 0x59	; 89
   10224:	ce 01       	movw	r24, r28
   10226:	01 96       	adiw	r24, 0x01	; 1
   10228:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
   1022c:	49 ee       	ldi	r20, 0xE9	; 233
   1022e:	5e e0       	ldi	r21, 0x0E	; 14
   10230:	be 01       	movw	r22, r28
   10232:	6f 5f       	subi	r22, 0xFF	; 255
   10234:	7f 4f       	sbci	r23, 0xFF	; 255
   10236:	c7 01       	movw	r24, r14
   10238:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1023c:	e4 96       	adiw	r28, 0x34	; 52
   1023e:	0f b6       	in	r0, 0x3f	; 63
   10240:	f8 94       	cli
   10242:	de bf       	out	0x3e, r29	; 62
   10244:	0f be       	out	0x3f, r0	; 63
   10246:	cd bf       	out	0x3d, r28	; 61
   10248:	df 91       	pop	r29
   1024a:	cf 91       	pop	r28
   1024c:	0f 91       	pop	r16
   1024e:	ff 90       	pop	r15
   10250:	ef 90       	pop	r14
   10252:	08 95       	ret

00010254 <send_mqtt_status(PubSubClient*)>:
_Z16send_mqtt_statusP12PubSubClient():
   10254:	ef 92       	push	r14
   10256:	ff 92       	push	r15
   10258:	0f 93       	push	r16
   1025a:	cf 93       	push	r28
   1025c:	df 93       	push	r29
   1025e:	cd b7       	in	r28, 0x3d	; 61
   10260:	de b7       	in	r29, 0x3e	; 62
   10262:	c0 58       	subi	r28, 0x80	; 128
   10264:	d1 09       	sbc	r29, r1
   10266:	0f b6       	in	r0, 0x3f	; 63
   10268:	f8 94       	cli
   1026a:	de bf       	out	0x3e, r29	; 62
   1026c:	0f be       	out	0x3f, r0	; 63
   1026e:	cd bf       	out	0x3d, r28	; 61
   10270:	7c 01       	movw	r14, r24
   10272:	0e 94 0e b9 	call	0x1721c	; 0x1721c <PubSubClient::connected()>
   10276:	88 23       	and	r24, r24
   10278:	09 f4       	brne	.+2      	; 0x1027c <send_mqtt_status(PubSubClient*)+0x28>
   1027a:	a7 c0       	rjmp	.+334    	; 0x103ca <send_mqtt_status(PubSubClient*)+0x176>
   1027c:	6d e4       	ldi	r22, 0x4D	; 77
   1027e:	7a e5       	ldi	r23, 0x5A	; 90
   10280:	ce 01       	movw	r24, r28
   10282:	8f 5b       	subi	r24, 0xBF	; 191
   10284:	9f 4f       	sbci	r25, 0xFF	; 255
   10286:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
itoa():
   1028a:	4a e0       	ldi	r20, 0x0A	; 10
   1028c:	be 01       	movw	r22, r28
   1028e:	6f 5f       	subi	r22, 0xFF	; 255
   10290:	7f 4f       	sbci	r23, 0xFF	; 255
   10292:	80 91 d1 0e 	lds	r24, 0x0ED1	; 0x800ed1 <mqtt_send_message>
   10296:	90 91 d2 0e 	lds	r25, 0x0ED2	; 0x800ed2 <mqtt_send_message+0x1>
   1029a:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   1029e:	10 92 d2 0e 	sts	0x0ED2, r1	; 0x800ed2 <mqtt_send_message+0x1>
   102a2:	10 92 d1 0e 	sts	0x0ED1, r1	; 0x800ed1 <mqtt_send_message>
   102a6:	ae 01       	movw	r20, r28
   102a8:	4f 5f       	subi	r20, 0xFF	; 255
   102aa:	5f 4f       	sbci	r21, 0xFF	; 255
   102ac:	be 01       	movw	r22, r28
   102ae:	6f 5b       	subi	r22, 0xBF	; 191
   102b0:	7f 4f       	sbci	r23, 0xFF	; 255
   102b2:	c7 01       	movw	r24, r14
   102b4:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   102b8:	6b e3       	ldi	r22, 0x3B	; 59
   102ba:	7a e5       	ldi	r23, 0x5A	; 90
   102bc:	ce 01       	movw	r24, r28
   102be:	8f 5b       	subi	r24, 0xBF	; 191
   102c0:	9f 4f       	sbci	r25, 0xFF	; 255
   102c2:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
itoa():
   102c6:	4a e0       	ldi	r20, 0x0A	; 10
   102c8:	be 01       	movw	r22, r28
   102ca:	6f 5f       	subi	r22, 0xFF	; 255
   102cc:	7f 4f       	sbci	r23, 0xFF	; 255
   102ce:	80 91 25 0f 	lds	r24, 0x0F25	; 0x800f25 <mqtt_error>
   102d2:	90 91 26 0f 	lds	r25, 0x0F26	; 0x800f26 <mqtt_error+0x1>
   102d6:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   102da:	ae 01       	movw	r20, r28
   102dc:	4f 5f       	subi	r20, 0xFF	; 255
   102de:	5f 4f       	sbci	r21, 0xFF	; 255
   102e0:	be 01       	movw	r22, r28
   102e2:	6f 5b       	subi	r22, 0xBF	; 191
   102e4:	7f 4f       	sbci	r23, 0xFF	; 255
   102e6:	c7 01       	movw	r24, r14
   102e8:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   102ec:	67 e2       	ldi	r22, 0x27	; 39
   102ee:	7a e5       	ldi	r23, 0x5A	; 90
   102f0:	ce 01       	movw	r24, r28
   102f2:	8f 5b       	subi	r24, 0xBF	; 191
   102f4:	9f 4f       	sbci	r25, 0xFF	; 255
   102f6:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
itoa():
   102fa:	4a e0       	ldi	r20, 0x0A	; 10
   102fc:	be 01       	movw	r22, r28
   102fe:	6f 5f       	subi	r22, 0xFF	; 255
   10300:	7f 4f       	sbci	r23, 0xFF	; 255
   10302:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <mqtt_receive_message>
   10306:	90 91 ce 0e 	lds	r25, 0x0ECE	; 0x800ece <mqtt_receive_message+0x1>
   1030a:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   1030e:	10 92 ce 0e 	sts	0x0ECE, r1	; 0x800ece <mqtt_receive_message+0x1>
   10312:	10 92 cd 0e 	sts	0x0ECD, r1	; 0x800ecd <mqtt_receive_message>
   10316:	ae 01       	movw	r20, r28
   10318:	4f 5f       	subi	r20, 0xFF	; 255
   1031a:	5f 4f       	sbci	r21, 0xFF	; 255
   1031c:	be 01       	movw	r22, r28
   1031e:	6f 5b       	subi	r22, 0xBF	; 191
   10320:	7f 4f       	sbci	r23, 0xFF	; 255
   10322:	c7 01       	movw	r24, r14
   10324:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10328:	63 e1       	ldi	r22, 0x13	; 19
   1032a:	7a e5       	ldi	r23, 0x5A	; 90
   1032c:	ce 01       	movw	r24, r28
   1032e:	8f 5b       	subi	r24, 0xBF	; 191
   10330:	9f 4f       	sbci	r25, 0xFF	; 255
   10332:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
itoa():
   10336:	4a e0       	ldi	r20, 0x0A	; 10
   10338:	be 01       	movw	r22, r28
   1033a:	6f 5f       	subi	r22, 0xFF	; 255
   1033c:	7f 4f       	sbci	r23, 0xFF	; 255
   1033e:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <mqtt_process_message>
   10342:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <mqtt_process_message+0x1>
   10346:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   1034a:	10 92 cc 0e 	sts	0x0ECC, r1	; 0x800ecc <mqtt_process_message+0x1>
   1034e:	10 92 cb 0e 	sts	0x0ECB, r1	; 0x800ecb <mqtt_process_message>
   10352:	ae 01       	movw	r20, r28
   10354:	4f 5f       	subi	r20, 0xFF	; 255
   10356:	5f 4f       	sbci	r21, 0xFF	; 255
   10358:	be 01       	movw	r22, r28
   1035a:	6f 5b       	subi	r22, 0xBF	; 191
   1035c:	7f 4f       	sbci	r23, 0xFF	; 255
   1035e:	c7 01       	movw	r24, r14
   10360:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10364:	19 82       	std	Y+1, r1	; 0x01
   10366:	0a e0       	ldi	r16, 0x0A	; 10
   10368:	24 e0       	ldi	r18, 0x04	; 4
   1036a:	49 ed       	ldi	r20, 0xD9	; 217
   1036c:	5e e0       	ldi	r21, 0x0E	; 14
   1036e:	6e e2       	ldi	r22, 0x2E	; 46
   10370:	ce 01       	movw	r24, r28
   10372:	01 96       	adiw	r24, 0x01	; 1
   10374:	0e 94 ba b3 	call	0x16774	; 0x16774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10378:	68 e0       	ldi	r22, 0x08	; 8
   1037a:	7a e5       	ldi	r23, 0x5A	; 90
   1037c:	ce 01       	movw	r24, r28
   1037e:	8f 5b       	subi	r24, 0xBF	; 191
   10380:	9f 4f       	sbci	r25, 0xFF	; 255
   10382:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
   10386:	ae 01       	movw	r20, r28
   10388:	4f 5f       	subi	r20, 0xFF	; 255
   1038a:	5f 4f       	sbci	r21, 0xFF	; 255
   1038c:	be 01       	movw	r22, r28
   1038e:	6f 5b       	subi	r22, 0xBF	; 191
   10390:	7f 4f       	sbci	r23, 0xFF	; 255
   10392:	c7 01       	movw	r24, r14
   10394:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10398:	67 ee       	ldi	r22, 0xE7	; 231
   1039a:	79 e5       	ldi	r23, 0x59	; 89
   1039c:	ce 01       	movw	r24, r28
   1039e:	8f 5b       	subi	r24, 0xBF	; 191
   103a0:	9f 4f       	sbci	r25, 0xFF	; 255
   103a2:	0e 94 3f d7 	call	0x1ae7e	; 0x1ae7e <strcpy_P>
   103a6:	80 91 ca 0e 	lds	r24, 0x0ECA	; 0x800eca <count_know_mqtt>
itoa():
   103aa:	4a e0       	ldi	r20, 0x0A	; 10
   103ac:	be 01       	movw	r22, r28
   103ae:	6f 5f       	subi	r22, 0xFF	; 255
   103b0:	7f 4f       	sbci	r23, 0xFF	; 255
   103b2:	90 e0       	ldi	r25, 0x00	; 0
   103b4:	0e 94 c8 d7 	call	0x1af90	; 0x1af90 <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   103b8:	ae 01       	movw	r20, r28
   103ba:	4f 5f       	subi	r20, 0xFF	; 255
   103bc:	5f 4f       	sbci	r21, 0xFF	; 255
   103be:	be 01       	movw	r22, r28
   103c0:	6f 5b       	subi	r22, 0xBF	; 191
   103c2:	7f 4f       	sbci	r23, 0xFF	; 255
   103c4:	c7 01       	movw	r24, r14
   103c6:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   103ca:	10 92 26 0f 	sts	0x0F26, r1	; 0x800f26 <mqtt_error+0x1>
   103ce:	10 92 25 0f 	sts	0x0F25, r1	; 0x800f25 <mqtt_error>
   103d2:	c0 58       	subi	r28, 0x80	; 128
   103d4:	df 4f       	sbci	r29, 0xFF	; 255
   103d6:	0f b6       	in	r0, 0x3f	; 63
   103d8:	f8 94       	cli
   103da:	de bf       	out	0x3e, r29	; 62
   103dc:	0f be       	out	0x3f, r0	; 63
   103de:	cd bf       	out	0x3d, r28	; 61
   103e0:	df 91       	pop	r29
   103e2:	cf 91       	pop	r28
   103e4:	0f 91       	pop	r16
   103e6:	ff 90       	pop	r15
   103e8:	ef 90       	pop	r14
   103ea:	08 95       	ret

000103ec <know_mqtt_create_or_update(char*, unsigned char)>:
_Z26know_mqtt_create_or_updatePch():
   103ec:	08 95       	ret

000103ee <ntp_update(NTPClient*, RTC_DS1307*, unsigned char)>:
_Z10ntp_updateP9NTPClientP10RTC_DS1307h():
   103ee:	af 92       	push	r10
   103f0:	bf 92       	push	r11
   103f2:	cf 92       	push	r12
   103f4:	ef 92       	push	r14
   103f6:	ff 92       	push	r15
   103f8:	0f 93       	push	r16
   103fa:	1f 93       	push	r17
   103fc:	cf 93       	push	r28
   103fe:	df 93       	push	r29
   10400:	cd b7       	in	r28, 0x3d	; 61
   10402:	de b7       	in	r29, 0x3e	; 62
   10404:	6b 97       	sbiw	r28, 0x1b	; 27
   10406:	0f b6       	in	r0, 0x3f	; 63
   10408:	f8 94       	cli
   1040a:	de bf       	out	0x3e, r29	; 62
   1040c:	0f be       	out	0x3f, r0	; 63
   1040e:	cd bf       	out	0x3d, r28	; 61
   10410:	5c 01       	movw	r10, r24
   10412:	14 2f       	mov	r17, r20
   10414:	19 82       	std	Y+1, r1	; 0x01
   10416:	0a e0       	ldi	r16, 0x0A	; 10
   10418:	24 e0       	ldi	r18, 0x04	; 4
   1041a:	41 e2       	ldi	r20, 0x21	; 33
   1041c:	5f e0       	ldi	r21, 0x0F	; 15
   1041e:	6e e2       	ldi	r22, 0x2E	; 46
   10420:	ce 01       	movw	r24, r28
   10422:	01 96       	adiw	r24, 0x01	; 1
   10424:	0e 94 ba b3 	call	0x16774	; 0x16774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10428:	c5 01       	movw	r24, r10
   1042a:	0e 94 69 c9 	call	0x192d2	; 0x192d2 <NTPClient::begin()>
   1042e:	80 e1       	ldi	r24, 0x10	; 16
   10430:	9e e0       	ldi	r25, 0x0E	; 14
   10432:	18 9f       	mul	r17, r24
   10434:	b0 01       	movw	r22, r0
   10436:	19 9f       	mul	r17, r25
   10438:	70 0d       	add	r23, r0
   1043a:	11 24       	eor	r1, r1
   1043c:	c5 01       	movw	r24, r10
   1043e:	0e 94 30 ca 	call	0x19460	; 0x19460 <NTPClient::setTimeOffset(int)>
   10442:	be 01       	movw	r22, r28
   10444:	6f 5f       	subi	r22, 0xFF	; 255
   10446:	7f 4f       	sbci	r23, 0xFF	; 255
   10448:	c5 01       	movw	r24, r10
   1044a:	0e 94 40 ca 	call	0x19480	; 0x19480 <NTPClient::setPoolServerName(char const*)>
   1044e:	c5 01       	movw	r24, r10
   10450:	0e 94 f7 ca 	call	0x195ee	; 0x195ee <NTPClient::update()>
   10454:	10 e0       	ldi	r17, 0x00	; 0
   10456:	88 23       	and	r24, r24
   10458:	91 f1       	breq	.+100    	; 0x104be <ntp_update(NTPClient*, RTC_DS1307*, unsigned char)+0xd0>
   1045a:	c5 01       	movw	r24, r10
   1045c:	0e 94 16 ca 	call	0x1942c	; 0x1942c <NTPClient::getSeconds() const>
   10460:	c8 2e       	mov	r12, r24
   10462:	c5 01       	movw	r24, r10
   10464:	0e 94 06 ca 	call	0x1940c	; 0x1940c <NTPClient::getMinutes() const>
   10468:	e8 2e       	mov	r14, r24
   1046a:	c5 01       	movw	r24, r10
   1046c:	0e 94 f6 c9 	call	0x193ec	; 0x193ec <NTPClient::getHours() const>
   10470:	08 2f       	mov	r16, r24
   10472:	c5 01       	movw	r24, r10
   10474:	0e 94 da c9 	call	0x193b4	; 0x193b4 <NTPClient::getDate() const>
   10478:	f8 2e       	mov	r15, r24
   1047a:	c5 01       	movw	r24, r10
   1047c:	0e 94 bd c9 	call	0x1937a	; 0x1937a <NTPClient::getMonth() const>
   10480:	18 2f       	mov	r17, r24
   10482:	c5 01       	movw	r24, r10
   10484:	0e 94 a1 c9 	call	0x19342	; 0x19342 <NTPClient::getYear() const>
   10488:	2f 2d       	mov	r18, r15
   1048a:	41 2f       	mov	r20, r17
   1048c:	bc 01       	movw	r22, r24
   1048e:	ce 01       	movw	r24, r28
   10490:	45 96       	adiw	r24, 0x15	; 21
   10492:	0e 94 d3 c1 	call	0x183a6	; 0x183a6 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
   10496:	ce 01       	movw	r24, r28
   10498:	45 96       	adiw	r24, 0x15	; 21
   1049a:	0e 94 fa c1 	call	0x183f4	; 0x183f4 <RTC_DS1307::adjust(DateTime const&)>
   1049e:	c5 01       	movw	r24, r10
   104a0:	0e 94 a1 c9 	call	0x19342	; 0x19342 <NTPClient::getYear() const>
   104a4:	9f 93       	push	r25
   104a6:	8f 93       	push	r24
   104a8:	89 ef       	ldi	r24, 0xF9	; 249
   104aa:	97 e0       	ldi	r25, 0x07	; 7
   104ac:	9f 93       	push	r25
   104ae:	8f 93       	push	r24
   104b0:	0e 94 40 d8 	call	0x1b080	; 0x1b080 <printf>
   104b4:	0f 90       	pop	r0
   104b6:	0f 90       	pop	r0
   104b8:	0f 90       	pop	r0
   104ba:	0f 90       	pop	r0
   104bc:	11 e0       	ldi	r17, 0x01	; 1
   104be:	c5 01       	movw	r24, r10
   104c0:	0e 94 20 ca 	call	0x19440	; 0x19440 <NTPClient::end()>
   104c4:	81 2f       	mov	r24, r17
   104c6:	6b 96       	adiw	r28, 0x1b	; 27
   104c8:	0f b6       	in	r0, 0x3f	; 63
   104ca:	f8 94       	cli
   104cc:	de bf       	out	0x3e, r29	; 62
   104ce:	0f be       	out	0x3f, r0	; 63
   104d0:	cd bf       	out	0x3d, r28	; 61
   104d2:	df 91       	pop	r29
   104d4:	cf 91       	pop	r28
   104d6:	1f 91       	pop	r17
   104d8:	0f 91       	pop	r16
   104da:	ff 90       	pop	r15
   104dc:	ef 90       	pop	r14
   104de:	cf 90       	pop	r12
   104e0:	bf 90       	pop	r11
   104e2:	af 90       	pop	r10
   104e4:	08 95       	ret

000104e6 <ntp_check(NTPClient*)>:
_Z9ntp_checkP9NTPClient():
   104e6:	ef 92       	push	r14
   104e8:	ff 92       	push	r15
   104ea:	0f 93       	push	r16
   104ec:	1f 93       	push	r17
   104ee:	cf 93       	push	r28
   104f0:	df 93       	push	r29
   104f2:	cd b7       	in	r28, 0x3d	; 61
   104f4:	de b7       	in	r29, 0x3e	; 62
   104f6:	64 97       	sbiw	r28, 0x14	; 20
   104f8:	0f b6       	in	r0, 0x3f	; 63
   104fa:	f8 94       	cli
   104fc:	de bf       	out	0x3e, r29	; 62
   104fe:	0f be       	out	0x3f, r0	; 63
   10500:	cd bf       	out	0x3d, r28	; 61
   10502:	7c 01       	movw	r14, r24
   10504:	19 82       	std	Y+1, r1	; 0x01
   10506:	0a e0       	ldi	r16, 0x0A	; 10
   10508:	24 e0       	ldi	r18, 0x04	; 4
   1050a:	41 e2       	ldi	r20, 0x21	; 33
   1050c:	5f e0       	ldi	r21, 0x0F	; 15
   1050e:	6e e2       	ldi	r22, 0x2E	; 46
   10510:	ce 01       	movw	r24, r28
   10512:	01 96       	adiw	r24, 0x01	; 1
   10514:	0e 94 ba b3 	call	0x16774	; 0x16774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10518:	c7 01       	movw	r24, r14
   1051a:	0e 94 69 c9 	call	0x192d2	; 0x192d2 <NTPClient::begin()>
   1051e:	60 e1       	ldi	r22, 0x10	; 16
   10520:	7e e0       	ldi	r23, 0x0E	; 14
   10522:	c7 01       	movw	r24, r14
   10524:	0e 94 30 ca 	call	0x19460	; 0x19460 <NTPClient::setTimeOffset(int)>
   10528:	be 01       	movw	r22, r28
   1052a:	6f 5f       	subi	r22, 0xFF	; 255
   1052c:	7f 4f       	sbci	r23, 0xFF	; 255
   1052e:	c7 01       	movw	r24, r14
   10530:	0e 94 40 ca 	call	0x19480	; 0x19480 <NTPClient::setPoolServerName(char const*)>
   10534:	41 e0       	ldi	r20, 0x01	; 1
   10536:	50 e0       	ldi	r21, 0x00	; 0
   10538:	60 e0       	ldi	r22, 0x00	; 0
   1053a:	70 e0       	ldi	r23, 0x00	; 0
   1053c:	c7 01       	movw	r24, r14
   1053e:	0e 94 3a ca 	call	0x19474	; 0x19474 <NTPClient::setUpdateInterval(unsigned long)>
   10542:	c7 01       	movw	r24, r14
   10544:	0e 94 f7 ca 	call	0x195ee	; 0x195ee <NTPClient::update()>
   10548:	18 2f       	mov	r17, r24
   1054a:	c7 01       	movw	r24, r14
   1054c:	0e 94 20 ca 	call	0x19440	; 0x19440 <NTPClient::end()>
   10550:	81 2f       	mov	r24, r17
   10552:	64 96       	adiw	r28, 0x14	; 20
   10554:	0f b6       	in	r0, 0x3f	; 63
   10556:	f8 94       	cli
   10558:	de bf       	out	0x3e, r29	; 62
   1055a:	0f be       	out	0x3f, r0	; 63
   1055c:	cd bf       	out	0x3d, r28	; 61
   1055e:	df 91       	pop	r29
   10560:	cf 91       	pop	r28
   10562:	1f 91       	pop	r17
   10564:	0f 91       	pop	r16
   10566:	ff 90       	pop	r15
   10568:	ef 90       	pop	r14
   1056a:	08 95       	ret

0001056c <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
   1056c:	cf 93       	push	r28
   1056e:	df 93       	push	r29
   10570:	cd b7       	in	r28, 0x3d	; 61
   10572:	de b7       	in	r29, 0x3e	; 62
   10574:	60 97       	sbiw	r28, 0x10	; 16
   10576:	0f b6       	in	r0, 0x3f	; 63
   10578:	f8 94       	cli
   1057a:	de bf       	out	0x3e, r29	; 62
   1057c:	0f be       	out	0x3f, r0	; 63
   1057e:	cd bf       	out	0x3d, r28	; 61
   10580:	90 91 c9 0e 	lds	r25, 0x0EC9	; 0x800ec9 <mqtt_log_cnt>
   10584:	e9 2f       	mov	r30, r25
   10586:	f0 e0       	ldi	r31, 0x00	; 0
   10588:	e7 5b       	subi	r30, 0xB7	; 183
   1058a:	f1 4f       	sbci	r31, 0xF1	; 241
   1058c:	80 83       	st	Z, r24
   1058e:	11 82       	std	Z+1, r1	; 0x01
   10590:	9f 5f       	subi	r25, 0xFF	; 255
   10592:	90 93 c9 0e 	sts	0x0EC9, r25	; 0x800ec9 <mqtt_log_cnt>
   10596:	97 fd       	sbrc	r25, 7
   10598:	04 c0       	rjmp	.+8      	; 0x105a2 <printf_via_mqtt(char, __file*)+0x36>
   1059a:	8a 30       	cpi	r24, 0x0A	; 10
   1059c:	11 f0       	breq	.+4      	; 0x105a2 <printf_via_mqtt(char, __file*)+0x36>
   1059e:	81 11       	cpse	r24, r1
   105a0:	13 c0       	rjmp	.+38     	; 0x105c8 <printf_via_mqtt(char, __file*)+0x5c>
   105a2:	6e ef       	ldi	r22, 0xFE	; 254
   105a4:	77 e0       	ldi	r23, 0x07	; 7
   105a6:	ce 01       	movw	r24, r28
   105a8:	01 96       	adiw	r24, 0x01	; 1
   105aa:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
   105ae:	49 e4       	ldi	r20, 0x49	; 73
   105b0:	5e e0       	ldi	r21, 0x0E	; 14
   105b2:	be 01       	movw	r22, r28
   105b4:	6f 5f       	subi	r22, 0xFF	; 255
   105b6:	7f 4f       	sbci	r23, 0xFF	; 255
   105b8:	80 91 47 0e 	lds	r24, 0x0E47	; 0x800e47 <pub_mqtt_client>
   105bc:	90 91 48 0e 	lds	r25, 0x0E48	; 0x800e48 <pub_mqtt_client+0x1>
   105c0:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   105c4:	10 92 c9 0e 	sts	0x0EC9, r1	; 0x800ec9 <mqtt_log_cnt>
   105c8:	60 96       	adiw	r28, 0x10	; 16
   105ca:	0f b6       	in	r0, 0x3f	; 63
   105cc:	f8 94       	cli
   105ce:	de bf       	out	0x3e, r29	; 62
   105d0:	0f be       	out	0x3f, r0	; 63
   105d2:	cd bf       	out	0x3d, r28	; 61
   105d4:	df 91       	pop	r29
   105d6:	cf 91       	pop	r28
   105d8:	08 95       	ret

000105da <log_error(PubSubClient*, char*)>:
_Z9log_errorP12PubSubClientPc():
   105da:	ef 92       	push	r14
   105dc:	ff 92       	push	r15
   105de:	0f 93       	push	r16
   105e0:	1f 93       	push	r17
   105e2:	cf 93       	push	r28
   105e4:	df 93       	push	r29
   105e6:	00 d0       	rcall	.+0      	; 0x105e8 <log_error(PubSubClient*, char*)+0xe>
   105e8:	00 d0       	rcall	.+0      	; 0x105ea <log_error(PubSubClient*, char*)+0x10>
   105ea:	00 d0       	rcall	.+0      	; 0x105ec <log_error(PubSubClient*, char*)+0x12>
   105ec:	cd b7       	in	r28, 0x3d	; 61
   105ee:	de b7       	in	r29, 0x3e	; 62
   105f0:	8c 01       	movw	r16, r24
   105f2:	7b 01       	movw	r14, r22
   105f4:	69 e0       	ldi	r22, 0x09	; 9
   105f6:	78 e0       	ldi	r23, 0x08	; 8
   105f8:	ce 01       	movw	r24, r28
   105fa:	01 96       	adiw	r24, 0x01	; 1
   105fc:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
   10600:	a7 01       	movw	r20, r14
   10602:	be 01       	movw	r22, r28
   10604:	6f 5f       	subi	r22, 0xFF	; 255
   10606:	7f 4f       	sbci	r23, 0xFF	; 255
   10608:	c8 01       	movw	r24, r16
   1060a:	0e 94 c1 7f 	call	0xff82	; 0xff82 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1060e:	29 96       	adiw	r28, 0x09	; 9
   10610:	0f b6       	in	r0, 0x3f	; 63
   10612:	f8 94       	cli
   10614:	de bf       	out	0x3e, r29	; 62
   10616:	0f be       	out	0x3f, r0	; 63
   10618:	cd bf       	out	0x3d, r28	; 61
   1061a:	df 91       	pop	r29
   1061c:	cf 91       	pop	r28
   1061e:	1f 91       	pop	r17
   10620:	0f 91       	pop	r16
   10622:	ff 90       	pop	r15
   10624:	ef 90       	pop	r14
   10626:	08 95       	ret

00010628 <mqtt_set_public_mqtt_client(PubSubClient*)>:
_Z27mqtt_set_public_mqtt_clientP12PubSubClient():
   10628:	90 93 48 0e 	sts	0x0E48, r25	; 0x800e48 <pub_mqtt_client+0x1>
   1062c:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <pub_mqtt_client>
   10630:	08 95       	ret

00010632 <_GLOBAL__sub_I_mqtt_error>:
_GLOBAL__sub_I_mqtt_error():
   10632:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   10634:	00 e0       	ldi	r16, 0x00	; 0
   10636:	20 e0       	ldi	r18, 0x00	; 0
   10638:	40 e0       	ldi	r20, 0x00	; 0
   1063a:	60 e0       	ldi	r22, 0x00	; 0
   1063c:	87 e2       	ldi	r24, 0x27	; 39
   1063e:	9f e0       	ldi	r25, 0x0F	; 15
   10640:	0e 94 97 cf 	call	0x19f2e	; 0x19f2e <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN16struct_my_deviceC4Ev():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.h:55
#define TYPE_THERMCTL 1
#define TYPE_TERMBIG 2
#define TYPE_BRANA 3
#define TYPE_MASTER 4

typedef struct struct_my_device
   10644:	8b e5       	ldi	r24, 0x5B	; 91
   10646:	97 e0       	ldi	r25, 0x07	; 7
   10648:	90 93 f8 0e 	sts	0x0EF8, r25	; 0x800ef8 <device+0x25>
   1064c:	80 93 f7 0e 	sts	0x0EF7, r24	; 0x800ef7 <device+0x24>
_GLOBAL__sub_I_mqtt_error():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:466
   10650:	0f 91       	pop	r16
   10652:	08 95       	ret

00010654 <_GLOBAL__sub_I_scan_rf_net_enable>:
_GLOBAL__sub_I_scan_rf_net_enable():
/tmp/arduino_build_41303/sketch/saric_nrf.cpp:93
      strcat(payload, tmp1);
      strcat(payload, " ");
    }
    send_mqtt_general_payload(mqtt_client, topic, payload);
  }
}
   10654:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   10656:	00 e0       	ldi	r16, 0x00	; 0
   10658:	20 e0       	ldi	r18, 0x00	; 0
   1065a:	40 e0       	ldi	r20, 0x00	; 0
   1065c:	60 e0       	ldi	r22, 0x00	; 0
   1065e:	8e e2       	ldi	r24, 0x2E	; 46
   10660:	9f e0       	ldi	r25, 0x0F	; 15
   10662:	0e 94 97 cf 	call	0x19f2e	; 0x19f2e <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I_scan_rf_net_enable():
/tmp/arduino_build_41303/sketch/saric_nrf.cpp:93
   10666:	0f 91       	pop	r16
   10668:	08 95       	ret

0001066a <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:199
}

uint8_t tds_get_idx_from_wrom(uint8_t id)
{
  return w_rom[id].tds_idx;
}
   1066a:	0c 94 79 df 	jmp	0x1bef2	; 0x1bef2 <eeprom_read_byte>

0001066e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   1066e:	0c 94 81 df 	jmp	0x1bf02	; 0x1bf02 <eeprom_write_byte>

00010672 <count_use_tds()>:
_Z13count_use_tdsv():
   10672:	1f 93       	push	r17
   10674:	cf 93       	push	r28
   10676:	df 93       	push	r29
   10678:	c8 ec       	ldi	r28, 0xC8	; 200
   1067a:	d0 e0       	ldi	r29, 0x00	; 0
   1067c:	10 e0       	ldi	r17, 0x00	; 0
   1067e:	ce 01       	movw	r24, r28
   10680:	0e 94 35 83 	call	0x1066a	; 0x1066a <EEPROMClass::read(int) [clone .isra.0]>
   10684:	81 30       	cpi	r24, 0x01	; 1
   10686:	09 f4       	brne	.+2      	; 0x1068a <count_use_tds()+0x18>
   10688:	1f 5f       	subi	r17, 0xFF	; 255
   1068a:	66 96       	adiw	r28, 0x16	; 22
   1068c:	cc 34       	cpi	r28, 0x4C	; 76
   1068e:	81 e0       	ldi	r24, 0x01	; 1
   10690:	d8 07       	cpc	r29, r24
   10692:	a9 f7       	brne	.-22     	; 0x1067e <count_use_tds()+0xc>
   10694:	81 2f       	mov	r24, r17
   10696:	df 91       	pop	r29
   10698:	cf 91       	pop	r28
   1069a:	1f 91       	pop	r17
   1069c:	08 95       	ret

0001069e <tds_used(unsigned char)>:
_Z8tds_usedh():
   1069e:	86 30       	cpi	r24, 0x06	; 6
   106a0:	40 f4       	brcc	.+16     	; 0x106b2 <tds_used(unsigned char)+0x14>
   106a2:	26 e1       	ldi	r18, 0x16	; 22
   106a4:	82 9f       	mul	r24, r18
   106a6:	c0 01       	movw	r24, r0
   106a8:	11 24       	eor	r1, r1
   106aa:	88 53       	subi	r24, 0x38	; 56
   106ac:	9f 4f       	sbci	r25, 0xFF	; 255
   106ae:	0c 94 35 83 	jmp	0x1066a	; 0x1066a <EEPROMClass::read(int) [clone .isra.0]>
   106b2:	08 95       	ret

000106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
   106b4:	af 92       	push	r10
   106b6:	bf 92       	push	r11
   106b8:	cf 92       	push	r12
   106ba:	df 92       	push	r13
   106bc:	ef 92       	push	r14
   106be:	ff 92       	push	r15
   106c0:	0f 93       	push	r16
   106c2:	1f 93       	push	r17
   106c4:	cf 93       	push	r28
   106c6:	df 93       	push	r29
   106c8:	86 30       	cpi	r24, 0x06	; 6
   106ca:	08 f0       	brcs	.+2      	; 0x106ce <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
   106cc:	56 c0       	rjmp	.+172    	; 0x1077a <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
   106ce:	8b 01       	movw	r16, r22
   106d0:	96 e1       	ldi	r25, 0x16	; 22
   106d2:	89 9f       	mul	r24, r25
   106d4:	e0 01       	movw	r28, r0
   106d6:	11 24       	eor	r1, r1
   106d8:	ce 01       	movw	r24, r28
   106da:	88 53       	subi	r24, 0x38	; 56
   106dc:	9f 4f       	sbci	r25, 0xFF	; 255
   106de:	0e 94 35 83 	call	0x1066a	; 0x1066a <EEPROMClass::read(int) [clone .isra.0]>
   106e2:	f8 01       	movw	r30, r16
   106e4:	81 93       	st	Z+, r24
   106e6:	6f 01       	movw	r12, r30
   106e8:	7e 01       	movw	r14, r28
   106ea:	f9 ec       	ldi	r31, 0xC9	; 201
   106ec:	ef 0e       	add	r14, r31
   106ee:	f1 1c       	adc	r15, r1
   106f0:	5e 01       	movw	r10, r28
   106f2:	81 ed       	ldi	r24, 0xD1	; 209
   106f4:	a8 0e       	add	r10, r24
   106f6:	b1 1c       	adc	r11, r1
   106f8:	c7 01       	movw	r24, r14
   106fa:	0e 94 35 83 	call	0x1066a	; 0x1066a <EEPROMClass::read(int) [clone .isra.0]>
   106fe:	f6 01       	movw	r30, r12
   10700:	81 93       	st	Z+, r24
   10702:	6f 01       	movw	r12, r30
   10704:	c7 01       	movw	r24, r14
   10706:	0b 96       	adiw	r24, 0x0b	; 11
   10708:	0e 94 35 83 	call	0x1066a	; 0x1066a <EEPROMClass::read(int) [clone .isra.0]>
   1070c:	f6 01       	movw	r30, r12
   1070e:	82 87       	std	Z+10, r24	; 0x0a
   10710:	ff ef       	ldi	r31, 0xFF	; 255
   10712:	ef 1a       	sub	r14, r31
   10714:	ff 0a       	sbc	r15, r31
   10716:	ea 14       	cp	r14, r10
   10718:	fb 04       	cpc	r15, r11
   1071a:	71 f7       	brne	.-36     	; 0x106f8 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
   1071c:	f8 01       	movw	r30, r16
   1071e:	13 8a       	std	Z+19, r1	; 0x13
   10720:	c7 01       	movw	r24, r14
   10722:	0e 94 35 83 	call	0x1066a	; 0x1066a <EEPROMClass::read(int) [clone .isra.0]>
   10726:	f8 01       	movw	r30, r16
   10728:	81 87       	std	Z+9, r24	; 0x09
   1072a:	ce 01       	movw	r24, r28
   1072c:	8e 52       	subi	r24, 0x2E	; 46
   1072e:	9f 4f       	sbci	r25, 0xFF	; 255
   10730:	0e 94 35 83 	call	0x1066a	; 0x1066a <EEPROMClass::read(int) [clone .isra.0]>
   10734:	f8 2e       	mov	r15, r24
   10736:	ce 01       	movw	r24, r28
   10738:	8d 52       	subi	r24, 0x2D	; 45
   1073a:	9f 4f       	sbci	r25, 0xFF	; 255
   1073c:	0e 94 35 83 	call	0x1066a	; 0x1066a <EEPROMClass::read(int) [clone .isra.0]>
   10740:	2f 2d       	mov	r18, r15
   10742:	30 e0       	ldi	r19, 0x00	; 0
   10744:	32 2f       	mov	r19, r18
   10746:	22 27       	eor	r18, r18
   10748:	82 0f       	add	r24, r18
   1074a:	93 2f       	mov	r25, r19
   1074c:	91 1d       	adc	r25, r1
   1074e:	f8 01       	movw	r30, r16
   10750:	93 87       	std	Z+11, r25	; 0x0b
   10752:	82 87       	std	Z+10, r24	; 0x0a
   10754:	ce 01       	movw	r24, r28
   10756:	84 52       	subi	r24, 0x24	; 36
   10758:	9f 4f       	sbci	r25, 0xFF	; 255
   1075a:	0e 94 35 83 	call	0x1066a	; 0x1066a <EEPROMClass::read(int) [clone .isra.0]>
   1075e:	f8 01       	movw	r30, r16
   10760:	84 8b       	std	Z+20, r24	; 0x14
   10762:	81 e0       	ldi	r24, 0x01	; 1
   10764:	df 91       	pop	r29
   10766:	cf 91       	pop	r28
   10768:	1f 91       	pop	r17
   1076a:	0f 91       	pop	r16
   1076c:	ff 90       	pop	r15
   1076e:	ef 90       	pop	r14
   10770:	df 90       	pop	r13
   10772:	cf 90       	pop	r12
   10774:	bf 90       	pop	r11
   10776:	af 90       	pop	r10
   10778:	08 95       	ret
   1077a:	80 e0       	ldi	r24, 0x00	; 0
   1077c:	f3 cf       	rjmp	.-26     	; 0x10764 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

0001077e <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
   1077e:	af 92       	push	r10
   10780:	bf 92       	push	r11
   10782:	cf 92       	push	r12
   10784:	df 92       	push	r13
   10786:	ef 92       	push	r14
   10788:	ff 92       	push	r15
   1078a:	0f 93       	push	r16
   1078c:	1f 93       	push	r17
   1078e:	cf 93       	push	r28
   10790:	df 93       	push	r29
   10792:	86 30       	cpi	r24, 0x06	; 6
   10794:	08 f0       	brcs	.+2      	; 0x10798 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
   10796:	49 c0       	rjmp	.+146    	; 0x1082a <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
   10798:	6b 01       	movw	r12, r22
   1079a:	96 e1       	ldi	r25, 0x16	; 22
   1079c:	89 9f       	mul	r24, r25
   1079e:	e0 01       	movw	r28, r0
   107a0:	11 24       	eor	r1, r1
   107a2:	f6 01       	movw	r30, r12
   107a4:	61 91       	ld	r22, Z+
   107a6:	7f 01       	movw	r14, r30
   107a8:	ce 01       	movw	r24, r28
   107aa:	88 53       	subi	r24, 0x38	; 56
   107ac:	9f 4f       	sbci	r25, 0xFF	; 255
   107ae:	0e 94 37 83 	call	0x1066e	; 0x1066e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   107b2:	8e 01       	movw	r16, r28
   107b4:	07 53       	subi	r16, 0x37	; 55
   107b6:	1f 4f       	sbci	r17, 0xFF	; 255
   107b8:	5e 01       	movw	r10, r28
   107ba:	f1 ed       	ldi	r31, 0xD1	; 209
   107bc:	af 0e       	add	r10, r31
   107be:	b1 1c       	adc	r11, r1
   107c0:	f7 01       	movw	r30, r14
   107c2:	61 91       	ld	r22, Z+
   107c4:	7f 01       	movw	r14, r30
_ZN5EERefaSEh():
   107c6:	c8 01       	movw	r24, r16
   107c8:	0e 94 81 df 	call	0x1bf02	; 0x1bf02 <eeprom_write_byte>
   107cc:	f7 01       	movw	r30, r14
   107ce:	62 85       	ldd	r22, Z+10	; 0x0a
   107d0:	c8 01       	movw	r24, r16
   107d2:	0b 96       	adiw	r24, 0x0b	; 11
   107d4:	0e 94 81 df 	call	0x1bf02	; 0x1bf02 <eeprom_write_byte>
   107d8:	0f 5f       	subi	r16, 0xFF	; 255
   107da:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12set_tds18s20hP15struct_DDS18s20():
   107dc:	0a 15       	cp	r16, r10
   107de:	1b 05       	cpc	r17, r11
   107e0:	79 f7       	brne	.-34     	; 0x107c0 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
   107e2:	f6 01       	movw	r30, r12
   107e4:	61 85       	ldd	r22, Z+9	; 0x09
   107e6:	c8 01       	movw	r24, r16
   107e8:	0e 94 37 83 	call	0x1066e	; 0x1066e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   107ec:	f6 01       	movw	r30, r12
   107ee:	63 85       	ldd	r22, Z+11	; 0x0b
   107f0:	ce 01       	movw	r24, r28
   107f2:	8e 52       	subi	r24, 0x2E	; 46
   107f4:	9f 4f       	sbci	r25, 0xFF	; 255
   107f6:	0e 94 37 83 	call	0x1066e	; 0x1066e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   107fa:	f6 01       	movw	r30, r12
   107fc:	62 85       	ldd	r22, Z+10	; 0x0a
   107fe:	ce 01       	movw	r24, r28
   10800:	8d 52       	subi	r24, 0x2D	; 45
   10802:	9f 4f       	sbci	r25, 0xFF	; 255
   10804:	0e 94 37 83 	call	0x1066e	; 0x1066e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10808:	f6 01       	movw	r30, r12
   1080a:	64 89       	ldd	r22, Z+20	; 0x14
   1080c:	ce 01       	movw	r24, r28
   1080e:	84 52       	subi	r24, 0x24	; 36
   10810:	9f 4f       	sbci	r25, 0xFF	; 255
   10812:	df 91       	pop	r29
   10814:	cf 91       	pop	r28
   10816:	1f 91       	pop	r17
   10818:	0f 91       	pop	r16
   1081a:	ff 90       	pop	r15
   1081c:	ef 90       	pop	r14
   1081e:	df 90       	pop	r13
   10820:	cf 90       	pop	r12
   10822:	bf 90       	pop	r11
   10824:	af 90       	pop	r10
   10826:	0c 94 37 83 	jmp	0x1066e	; 0x1066e <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1082a:	df 91       	pop	r29
   1082c:	cf 91       	pop	r28
   1082e:	1f 91       	pop	r17
   10830:	0f 91       	pop	r16
   10832:	ff 90       	pop	r15
   10834:	ef 90       	pop	r14
   10836:	df 90       	pop	r13
   10838:	cf 90       	pop	r12
   1083a:	bf 90       	pop	r11
   1083c:	af 90       	pop	r10
   1083e:	08 95       	ret

00010840 <tds_get_name(unsigned char, char*)>:
_Z12tds_get_namehPc():
   10840:	0f 93       	push	r16
   10842:	1f 93       	push	r17
   10844:	cf 93       	push	r28
   10846:	df 93       	push	r29
   10848:	cd b7       	in	r28, 0x3d	; 61
   1084a:	de b7       	in	r29, 0x3e	; 62
   1084c:	66 97       	sbiw	r28, 0x16	; 22
   1084e:	0f b6       	in	r0, 0x3f	; 63
   10850:	f8 94       	cli
   10852:	de bf       	out	0x3e, r29	; 62
   10854:	0f be       	out	0x3f, r0	; 63
   10856:	cd bf       	out	0x3d, r28	; 61
   10858:	8b 01       	movw	r16, r22
   1085a:	be 01       	movw	r22, r28
   1085c:	6f 5f       	subi	r22, 0xFF	; 255
   1085e:	7f 4f       	sbci	r23, 0xFF	; 255
   10860:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   10864:	be 01       	movw	r22, r28
   10866:	63 5f       	subi	r22, 0xF3	; 243
   10868:	7f 4f       	sbci	r23, 0xFF	; 255
   1086a:	c8 01       	movw	r24, r16
   1086c:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
   10870:	66 96       	adiw	r28, 0x16	; 22
   10872:	0f b6       	in	r0, 0x3f	; 63
   10874:	f8 94       	cli
   10876:	de bf       	out	0x3e, r29	; 62
   10878:	0f be       	out	0x3f, r0	; 63
   1087a:	cd bf       	out	0x3d, r28	; 61
   1087c:	df 91       	pop	r29
   1087e:	cf 91       	pop	r28
   10880:	1f 91       	pop	r17
   10882:	0f 91       	pop	r16
   10884:	08 95       	ret

00010886 <tds_set_name(unsigned char, char*)>:
_Z12tds_set_namehPc():
   10886:	ef 92       	push	r14
   10888:	ff 92       	push	r15
   1088a:	1f 93       	push	r17
   1088c:	cf 93       	push	r28
   1088e:	df 93       	push	r29
   10890:	cd b7       	in	r28, 0x3d	; 61
   10892:	de b7       	in	r29, 0x3e	; 62
   10894:	66 97       	sbiw	r28, 0x16	; 22
   10896:	0f b6       	in	r0, 0x3f	; 63
   10898:	f8 94       	cli
   1089a:	de bf       	out	0x3e, r29	; 62
   1089c:	0f be       	out	0x3f, r0	; 63
   1089e:	cd bf       	out	0x3d, r28	; 61
   108a0:	18 2f       	mov	r17, r24
   108a2:	7b 01       	movw	r14, r22
   108a4:	be 01       	movw	r22, r28
   108a6:	6f 5f       	subi	r22, 0xFF	; 255
   108a8:	7f 4f       	sbci	r23, 0xFF	; 255
   108aa:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   108ae:	b7 01       	movw	r22, r14
   108b0:	ce 01       	movw	r24, r28
   108b2:	0d 96       	adiw	r24, 0x0d	; 13
   108b4:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
   108b8:	be 01       	movw	r22, r28
   108ba:	6f 5f       	subi	r22, 0xFF	; 255
   108bc:	7f 4f       	sbci	r23, 0xFF	; 255
   108be:	81 2f       	mov	r24, r17
   108c0:	0e 94 bf 83 	call	0x1077e	; 0x1077e <set_tds18s20(unsigned char, struct_DDS18s20*)>
   108c4:	66 96       	adiw	r28, 0x16	; 22
   108c6:	0f b6       	in	r0, 0x3f	; 63
   108c8:	f8 94       	cli
   108ca:	de bf       	out	0x3e, r29	; 62
   108cc:	0f be       	out	0x3f, r0	; 63
   108ce:	cd bf       	out	0x3d, r28	; 61
   108d0:	df 91       	pop	r29
   108d2:	cf 91       	pop	r28
   108d4:	1f 91       	pop	r17
   108d6:	ff 90       	pop	r15
   108d8:	ef 90       	pop	r14
   108da:	08 95       	ret

000108dc <tds_set_offset(unsigned char, int)>:
_Z14tds_set_offsethi():
   108dc:	ef 92       	push	r14
   108de:	ff 92       	push	r15
   108e0:	1f 93       	push	r17
   108e2:	cf 93       	push	r28
   108e4:	df 93       	push	r29
   108e6:	cd b7       	in	r28, 0x3d	; 61
   108e8:	de b7       	in	r29, 0x3e	; 62
   108ea:	66 97       	sbiw	r28, 0x16	; 22
   108ec:	0f b6       	in	r0, 0x3f	; 63
   108ee:	f8 94       	cli
   108f0:	de bf       	out	0x3e, r29	; 62
   108f2:	0f be       	out	0x3f, r0	; 63
   108f4:	cd bf       	out	0x3d, r28	; 61
   108f6:	18 2f       	mov	r17, r24
   108f8:	7b 01       	movw	r14, r22
   108fa:	be 01       	movw	r22, r28
   108fc:	6f 5f       	subi	r22, 0xFF	; 255
   108fe:	7f 4f       	sbci	r23, 0xFF	; 255
   10900:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   10904:	fc 86       	std	Y+12, r15	; 0x0c
   10906:	eb 86       	std	Y+11, r14	; 0x0b
   10908:	be 01       	movw	r22, r28
   1090a:	6f 5f       	subi	r22, 0xFF	; 255
   1090c:	7f 4f       	sbci	r23, 0xFF	; 255
   1090e:	81 2f       	mov	r24, r17
   10910:	0e 94 bf 83 	call	0x1077e	; 0x1077e <set_tds18s20(unsigned char, struct_DDS18s20*)>
   10914:	66 96       	adiw	r28, 0x16	; 22
   10916:	0f b6       	in	r0, 0x3f	; 63
   10918:	f8 94       	cli
   1091a:	de bf       	out	0x3e, r29	; 62
   1091c:	0f be       	out	0x3f, r0	; 63
   1091e:	cd bf       	out	0x3d, r28	; 61
   10920:	df 91       	pop	r29
   10922:	cf 91       	pop	r28
   10924:	1f 91       	pop	r17
   10926:	ff 90       	pop	r15
   10928:	ef 90       	pop	r14
   1092a:	08 95       	ret

0001092c <tds_get_offset(unsigned char)>:
_Z14tds_get_offseth():
   1092c:	cf 93       	push	r28
   1092e:	df 93       	push	r29
   10930:	cd b7       	in	r28, 0x3d	; 61
   10932:	de b7       	in	r29, 0x3e	; 62
   10934:	66 97       	sbiw	r28, 0x16	; 22
   10936:	0f b6       	in	r0, 0x3f	; 63
   10938:	f8 94       	cli
   1093a:	de bf       	out	0x3e, r29	; 62
   1093c:	0f be       	out	0x3f, r0	; 63
   1093e:	cd bf       	out	0x3d, r28	; 61
   10940:	be 01       	movw	r22, r28
   10942:	6f 5f       	subi	r22, 0xFF	; 255
   10944:	7f 4f       	sbci	r23, 0xFF	; 255
   10946:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1094a:	8b 85       	ldd	r24, Y+11	; 0x0b
   1094c:	9c 85       	ldd	r25, Y+12	; 0x0c
   1094e:	66 96       	adiw	r28, 0x16	; 22
   10950:	0f b6       	in	r0, 0x3f	; 63
   10952:	f8 94       	cli
   10954:	de bf       	out	0x3e, r29	; 62
   10956:	0f be       	out	0x3f, r0	; 63
   10958:	cd bf       	out	0x3d, r28	; 61
   1095a:	df 91       	pop	r29
   1095c:	cf 91       	pop	r28
   1095e:	08 95       	ret

00010960 <tds_set_period(unsigned char, unsigned char)>:
_Z14tds_set_periodhh():
   10960:	0f 93       	push	r16
   10962:	1f 93       	push	r17
   10964:	cf 93       	push	r28
   10966:	df 93       	push	r29
   10968:	cd b7       	in	r28, 0x3d	; 61
   1096a:	de b7       	in	r29, 0x3e	; 62
   1096c:	66 97       	sbiw	r28, 0x16	; 22
   1096e:	0f b6       	in	r0, 0x3f	; 63
   10970:	f8 94       	cli
   10972:	de bf       	out	0x3e, r29	; 62
   10974:	0f be       	out	0x3f, r0	; 63
   10976:	cd bf       	out	0x3d, r28	; 61
   10978:	18 2f       	mov	r17, r24
   1097a:	06 2f       	mov	r16, r22
   1097c:	be 01       	movw	r22, r28
   1097e:	6f 5f       	subi	r22, 0xFF	; 255
   10980:	7f 4f       	sbci	r23, 0xFF	; 255
   10982:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   10986:	0d 8b       	std	Y+21, r16	; 0x15
   10988:	be 01       	movw	r22, r28
   1098a:	6f 5f       	subi	r22, 0xFF	; 255
   1098c:	7f 4f       	sbci	r23, 0xFF	; 255
   1098e:	81 2f       	mov	r24, r17
   10990:	0e 94 bf 83 	call	0x1077e	; 0x1077e <set_tds18s20(unsigned char, struct_DDS18s20*)>
   10994:	66 96       	adiw	r28, 0x16	; 22
   10996:	0f b6       	in	r0, 0x3f	; 63
   10998:	f8 94       	cli
   1099a:	de bf       	out	0x3e, r29	; 62
   1099c:	0f be       	out	0x3f, r0	; 63
   1099e:	cd bf       	out	0x3d, r28	; 61
   109a0:	df 91       	pop	r29
   109a2:	cf 91       	pop	r28
   109a4:	1f 91       	pop	r17
   109a6:	0f 91       	pop	r16
   109a8:	08 95       	ret

000109aa <tds_get_period(unsigned char)>:
_Z14tds_get_periodh():
   109aa:	cf 93       	push	r28
   109ac:	df 93       	push	r29
   109ae:	cd b7       	in	r28, 0x3d	; 61
   109b0:	de b7       	in	r29, 0x3e	; 62
   109b2:	66 97       	sbiw	r28, 0x16	; 22
   109b4:	0f b6       	in	r0, 0x3f	; 63
   109b6:	f8 94       	cli
   109b8:	de bf       	out	0x3e, r29	; 62
   109ba:	0f be       	out	0x3f, r0	; 63
   109bc:	cd bf       	out	0x3d, r28	; 61
   109be:	be 01       	movw	r22, r28
   109c0:	6f 5f       	subi	r22, 0xFF	; 255
   109c2:	7f 4f       	sbci	r23, 0xFF	; 255
   109c4:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   109c8:	8d 89       	ldd	r24, Y+21	; 0x15
   109ca:	90 e0       	ldi	r25, 0x00	; 0
   109cc:	66 96       	adiw	r28, 0x16	; 22
   109ce:	0f b6       	in	r0, 0x3f	; 63
   109d0:	f8 94       	cli
   109d2:	de bf       	out	0x3e, r29	; 62
   109d4:	0f be       	out	0x3f, r0	; 63
   109d6:	cd bf       	out	0x3d, r28	; 61
   109d8:	df 91       	pop	r29
   109da:	cf 91       	pop	r28
   109dc:	08 95       	ret

000109de <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
   109de:	fb 01       	movw	r30, r22
   109e0:	9c 01       	movw	r18, r24
   109e2:	28 5f       	subi	r18, 0xF8	; 248
   109e4:	3f 4f       	sbci	r19, 0xFF	; 255
   109e6:	dc 01       	movw	r26, r24
   109e8:	5d 91       	ld	r21, X+
   109ea:	cd 01       	movw	r24, r26
   109ec:	41 91       	ld	r20, Z+
   109ee:	54 13       	cpse	r21, r20
   109f0:	05 c0       	rjmp	.+10     	; 0x109fc <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
   109f2:	a2 17       	cp	r26, r18
   109f4:	b3 07       	cpc	r27, r19
   109f6:	b9 f7       	brne	.-18     	; 0x109e6 <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
   109f8:	81 e0       	ldi	r24, 0x01	; 1
   109fa:	08 95       	ret
   109fc:	80 e0       	ldi	r24, 0x00	; 0
   109fe:	08 95       	ret

00010a00 <tds_update_associate()>:
_Z20tds_update_associatev():
   10a00:	ef 92       	push	r14
   10a02:	ff 92       	push	r15
   10a04:	0f 93       	push	r16
   10a06:	1f 93       	push	r17
   10a08:	cf 93       	push	r28
   10a0a:	df 93       	push	r29
   10a0c:	cd b7       	in	r28, 0x3d	; 61
   10a0e:	de b7       	in	r29, 0x3e	; 62
   10a10:	6e 97       	sbiw	r28, 0x1e	; 30
   10a12:	0f b6       	in	r0, 0x3f	; 63
   10a14:	f8 94       	cli
   10a16:	de bf       	out	0x3e, r29	; 62
   10a18:	0f be       	out	0x3f, r0	; 63
   10a1a:	cd bf       	out	0x3d, r28	; 61
   10a1c:	1f 8a       	std	Y+23, r1	; 0x17
   10a1e:	18 8e       	std	Y+24, r1	; 0x18
   10a20:	19 8e       	std	Y+25, r1	; 0x19
   10a22:	1a 8e       	std	Y+26, r1	; 0x1a
   10a24:	1b 8e       	std	Y+27, r1	; 0x1b
   10a26:	1c 8e       	std	Y+28, r1	; 0x1c
   10a28:	1d 8e       	std	Y+29, r1	; 0x1d
   10a2a:	1e 8e       	std	Y+30, r1	; 0x1e
   10a2c:	06 e3       	ldi	r16, 0x36	; 54
   10a2e:	1f e0       	ldi	r17, 0x0F	; 15
   10a30:	ee 24       	eor	r14, r14
   10a32:	ea 94       	dec	r14
   10a34:	f8 01       	movw	r30, r16
   10a36:	e2 86       	std	Z+10, r14	; 0x0a
   10a38:	b8 01       	movw	r22, r16
   10a3a:	ce 01       	movw	r24, r28
   10a3c:	47 96       	adiw	r24, 0x17	; 23
   10a3e:	0e 94 ef 84 	call	0x109de	; 0x109de <tds_compare_rom(unsigned char*, unsigned char*)>
   10a42:	81 11       	cpse	r24, r1
   10a44:	14 c0       	rjmp	.+40     	; 0x10a6e <tds_update_associate()+0x6e>
   10a46:	f1 2c       	mov	r15, r1
   10a48:	be 01       	movw	r22, r28
   10a4a:	6f 5f       	subi	r22, 0xFF	; 255
   10a4c:	7f 4f       	sbci	r23, 0xFF	; 255
   10a4e:	8f 2d       	mov	r24, r15
   10a50:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   10a54:	b8 01       	movw	r22, r16
   10a56:	ce 01       	movw	r24, r28
   10a58:	02 96       	adiw	r24, 0x02	; 2
   10a5a:	0e 94 ef 84 	call	0x109de	; 0x109de <tds_compare_rom(unsigned char*, unsigned char*)>
   10a5e:	88 23       	and	r24, r24
   10a60:	11 f0       	breq	.+4      	; 0x10a66 <tds_update_associate()+0x66>
   10a62:	f8 01       	movw	r30, r16
   10a64:	f2 86       	std	Z+10, r15	; 0x0a
   10a66:	f3 94       	inc	r15
   10a68:	f6 e0       	ldi	r31, 0x06	; 6
   10a6a:	ff 12       	cpse	r15, r31
   10a6c:	ed cf       	rjmp	.-38     	; 0x10a48 <tds_update_associate()+0x48>
   10a6e:	05 5f       	subi	r16, 0xF5	; 245
   10a70:	1f 4f       	sbci	r17, 0xFF	; 255
   10a72:	8f e0       	ldi	r24, 0x0F	; 15
   10a74:	08 37       	cpi	r16, 0x78	; 120
   10a76:	18 07       	cpc	r17, r24
   10a78:	e9 f6       	brne	.-70     	; 0x10a34 <tds_update_associate()+0x34>
   10a7a:	6e 96       	adiw	r28, 0x1e	; 30
   10a7c:	0f b6       	in	r0, 0x3f	; 63
   10a7e:	f8 94       	cli
   10a80:	de bf       	out	0x3e, r29	; 62
   10a82:	0f be       	out	0x3f, r0	; 63
   10a84:	cd bf       	out	0x3d, r28	; 61
   10a86:	df 91       	pop	r29
   10a88:	cf 91       	pop	r28
   10a8a:	1f 91       	pop	r17
   10a8c:	0f 91       	pop	r16
   10a8e:	ff 90       	pop	r15
   10a90:	ef 90       	pop	r14
   10a92:	08 95       	ret

00010a94 <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
   10a94:	1f 93       	push	r17
   10a96:	cf 93       	push	r28
   10a98:	df 93       	push	r29
   10a9a:	cd b7       	in	r28, 0x3d	; 61
   10a9c:	de b7       	in	r29, 0x3e	; 62
   10a9e:	66 97       	sbiw	r28, 0x16	; 22
   10aa0:	0f b6       	in	r0, 0x3f	; 63
   10aa2:	f8 94       	cli
   10aa4:	de bf       	out	0x3e, r29	; 62
   10aa6:	0f be       	out	0x3f, r0	; 63
   10aa8:	cd bf       	out	0x3d, r28	; 61
   10aaa:	18 2f       	mov	r17, r24
   10aac:	be 01       	movw	r22, r28
   10aae:	6f 5f       	subi	r22, 0xFF	; 255
   10ab0:	7f 4f       	sbci	r23, 0xFF	; 255
   10ab2:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   10ab6:	19 82       	std	Y+1, r1	; 0x01
   10ab8:	64 e6       	ldi	r22, 0x64	; 100
   10aba:	75 e0       	ldi	r23, 0x05	; 5
   10abc:	ce 01       	movw	r24, r28
   10abe:	0d 96       	adiw	r24, 0x0d	; 13
   10ac0:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
   10ac4:	1c 86       	std	Y+12, r1	; 0x0c
   10ac6:	1b 86       	std	Y+11, r1	; 0x0b
   10ac8:	8a e0       	ldi	r24, 0x0A	; 10
   10aca:	8d 8b       	std	Y+21, r24	; 0x15
   10acc:	1a 82       	std	Y+2, r1	; 0x02
   10ace:	1b 82       	std	Y+3, r1	; 0x03
   10ad0:	1c 82       	std	Y+4, r1	; 0x04
   10ad2:	1d 82       	std	Y+5, r1	; 0x05
   10ad4:	1e 82       	std	Y+6, r1	; 0x06
   10ad6:	1f 82       	std	Y+7, r1	; 0x07
   10ad8:	18 86       	std	Y+8, r1	; 0x08
   10ada:	19 86       	std	Y+9, r1	; 0x09
   10adc:	1a 86       	std	Y+10, r1	; 0x0a
   10ade:	be 01       	movw	r22, r28
   10ae0:	6f 5f       	subi	r22, 0xFF	; 255
   10ae2:	7f 4f       	sbci	r23, 0xFF	; 255
   10ae4:	81 2f       	mov	r24, r17
   10ae6:	0e 94 bf 83 	call	0x1077e	; 0x1077e <set_tds18s20(unsigned char, struct_DDS18s20*)>
   10aea:	0e 94 00 85 	call	0x10a00	; 0x10a00 <tds_update_associate()>
   10aee:	66 96       	adiw	r28, 0x16	; 22
   10af0:	0f b6       	in	r0, 0x3f	; 63
   10af2:	f8 94       	cli
   10af4:	de bf       	out	0x3e, r29	; 62
   10af6:	0f be       	out	0x3f, r0	; 63
   10af8:	cd bf       	out	0x3d, r28	; 61
   10afa:	df 91       	pop	r29
   10afc:	cf 91       	pop	r28
   10afe:	1f 91       	pop	r17
   10b00:	08 95       	ret

00010b02 <tds_set_clear_wrom_id(unsigned char)>:
_Z21tds_set_clear_wrom_idh():
   10b02:	9b e0       	ldi	r25, 0x0B	; 11
   10b04:	89 9f       	mul	r24, r25
   10b06:	f0 01       	movw	r30, r0
   10b08:	11 24       	eor	r1, r1
   10b0a:	ea 5c       	subi	r30, 0xCA	; 202
   10b0c:	f0 4f       	sbci	r31, 0xF0	; 240
   10b0e:	82 85       	ldd	r24, Z+10	; 0x0a
   10b10:	0c 94 4a 85 	jmp	0x10a94	; 0x10a94 <tds_set_clear(unsigned char)>

00010b14 <tds_check_associate(unsigned char)>:
_Z19tds_check_associateh():
   10b14:	ff 92       	push	r15
   10b16:	0f 93       	push	r16
   10b18:	1f 93       	push	r17
   10b1a:	cf 93       	push	r28
   10b1c:	df 93       	push	r29
   10b1e:	cd b7       	in	r28, 0x3d	; 61
   10b20:	de b7       	in	r29, 0x3e	; 62
   10b22:	66 97       	sbiw	r28, 0x16	; 22
   10b24:	0f b6       	in	r0, 0x3f	; 63
   10b26:	f8 94       	cli
   10b28:	de bf       	out	0x3e, r29	; 62
   10b2a:	0f be       	out	0x3f, r0	; 63
   10b2c:	cd bf       	out	0x3d, r28	; 61
   10b2e:	90 91 78 0f 	lds	r25, 0x0F78	; 0x800f78 <Global_HWwirenum>
   10b32:	89 17       	cp	r24, r25
   10b34:	38 f5       	brcc	.+78     	; 0x10b84 <tds_check_associate(unsigned char)+0x70>
   10b36:	9b e0       	ldi	r25, 0x0B	; 11
   10b38:	89 9f       	mul	r24, r25
   10b3a:	80 01       	movw	r16, r0
   10b3c:	11 24       	eor	r1, r1
   10b3e:	0a 5c       	subi	r16, 0xCA	; 202
   10b40:	10 4f       	sbci	r17, 0xF0	; 240
   10b42:	f1 2c       	mov	r15, r1
   10b44:	be 01       	movw	r22, r28
   10b46:	6f 5f       	subi	r22, 0xFF	; 255
   10b48:	7f 4f       	sbci	r23, 0xFF	; 255
   10b4a:	8f 2d       	mov	r24, r15
   10b4c:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   10b50:	b8 01       	movw	r22, r16
   10b52:	ce 01       	movw	r24, r28
   10b54:	02 96       	adiw	r24, 0x02	; 2
   10b56:	0e 94 ef 84 	call	0x109de	; 0x109de <tds_compare_rom(unsigned char*, unsigned char*)>
   10b5a:	81 11       	cpse	r24, r1
   10b5c:	06 c0       	rjmp	.+12     	; 0x10b6a <tds_check_associate(unsigned char)+0x56>
   10b5e:	f3 94       	inc	r15
   10b60:	86 e0       	ldi	r24, 0x06	; 6
   10b62:	f8 12       	cpse	r15, r24
   10b64:	ef cf       	rjmp	.-34     	; 0x10b44 <tds_check_associate(unsigned char)+0x30>
   10b66:	ff 24       	eor	r15, r15
   10b68:	fa 94       	dec	r15
   10b6a:	8f 2d       	mov	r24, r15
   10b6c:	66 96       	adiw	r28, 0x16	; 22
   10b6e:	0f b6       	in	r0, 0x3f	; 63
   10b70:	f8 94       	cli
   10b72:	de bf       	out	0x3e, r29	; 62
   10b74:	0f be       	out	0x3f, r0	; 63
   10b76:	cd bf       	out	0x3d, r28	; 61
   10b78:	df 91       	pop	r29
   10b7a:	cf 91       	pop	r28
   10b7c:	1f 91       	pop	r17
   10b7e:	0f 91       	pop	r16
   10b80:	ff 90       	pop	r15
   10b82:	08 95       	ret
   10b84:	8e ef       	ldi	r24, 0xFE	; 254
   10b86:	f8 2e       	mov	r15, r24
   10b88:	f0 cf       	rjmp	.-32     	; 0x10b6a <tds_check_associate(unsigned char)+0x56>

00010b8a <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:202

uint8_t tds_associate(uint8_t id)
{
   10b8a:	df 92       	push	r13
   10b8c:	ef 92       	push	r14
   10b8e:	ff 92       	push	r15
   10b90:	0f 93       	push	r16
   10b92:	1f 93       	push	r17
   10b94:	cf 93       	push	r28
   10b96:	df 93       	push	r29
   10b98:	cd b7       	in	r28, 0x3d	; 61
   10b9a:	de b7       	in	r29, 0x3e	; 62
   10b9c:	66 97       	sbiw	r28, 0x16	; 22
   10b9e:	0f b6       	in	r0, 0x3f	; 63
   10ba0:	f8 94       	cli
   10ba2:	de bf       	out	0x3e, r29	; 62
   10ba4:	0f be       	out	0x3f, r0	; 63
   10ba6:	cd bf       	out	0x3d, r28	; 61
   10ba8:	08 2f       	mov	r16, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:205
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
   10baa:	0e 94 8a 85 	call	0x10b14	; 0x10b14 <tds_check_associate(unsigned char)>
   10bae:	8f 3f       	cpi	r24, 0xFF	; 255
   10bb0:	09 f0       	breq	.+2      	; 0x10bb4 <tds_associate(unsigned char)+0x2a>
   10bb2:	6a c0       	rjmp	.+212    	; 0x10c88 <tds_associate(unsigned char)+0xfe>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:207
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   10bb4:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
   10bb6:	eb e0       	ldi	r30, 0x0B	; 11
   10bb8:	de 2e       	mov	r13, r30
   10bba:	d0 9e       	mul	r13, r16
   10bbc:	c0 01       	movw	r24, r0
   10bbe:	11 24       	eor	r1, r1
   10bc0:	9c 01       	movw	r18, r24
   10bc2:	21 5c       	subi	r18, 0xC1	; 193
   10bc4:	30 4f       	sbci	r19, 0xF0	; 240
   10bc6:	79 01       	movw	r14, r18
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:209
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
   10bc8:	be 01       	movw	r22, r28
   10bca:	6f 5f       	subi	r22, 0xFF	; 255
   10bcc:	7f 4f       	sbci	r23, 0xFF	; 255
   10bce:	81 2f       	mov	r24, r17
   10bd0:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
   10bd4:	89 81       	ldd	r24, Y+1	; 0x01
   10bd6:	81 11       	cpse	r24, r1
   10bd8:	53 c0       	rjmp	.+166    	; 0x10c80 <tds_associate(unsigned char)+0xf6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210 (discriminator 1)
   10bda:	f7 01       	movw	r30, r14
   10bdc:	80 81       	ld	r24, Z
   10bde:	81 30       	cpi	r24, 0x01	; 1
   10be0:	09 f0       	breq	.+2      	; 0x10be4 <tds_associate(unsigned char)+0x5a>
   10be2:	4e c0       	rjmp	.+156    	; 0x10c80 <tds_associate(unsigned char)+0xf6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
   10be4:	89 83       	std	Y+1, r24	; 0x01
   10be6:	de 01       	movw	r26, r28
   10be8:	12 96       	adiw	r26, 0x02	; 2
   10bea:	0d 9d       	mul	r16, r13
   10bec:	c0 01       	movw	r24, r0
   10bee:	11 24       	eor	r1, r1
   10bf0:	30 e0       	ldi	r19, 0x00	; 0
   10bf2:	20 e0       	ldi	r18, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:214 (discriminator 2)
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
   10bf4:	f9 01       	movw	r30, r18
   10bf6:	e8 0f       	add	r30, r24
   10bf8:	f9 1f       	adc	r31, r25
   10bfa:	ea 5c       	subi	r30, 0xCA	; 202
   10bfc:	f0 4f       	sbci	r31, 0xF0	; 240
   10bfe:	40 81       	ld	r20, Z
   10c00:	4d 93       	st	X+, r20
   10c02:	2f 5f       	subi	r18, 0xFF	; 255
   10c04:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:213 (discriminator 2)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
   10c06:	28 30       	cpi	r18, 0x08	; 8
   10c08:	31 05       	cpc	r19, r1
   10c0a:	a1 f7       	brne	.-24     	; 0x10bf4 <tds_associate(unsigned char)+0x6a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
   10c0c:	2b e0       	ldi	r18, 0x0B	; 11
   10c0e:	12 9f       	mul	r17, r18
   10c10:	f0 01       	movw	r30, r0
   10c12:	11 24       	eor	r1, r1
   10c14:	ea 5c       	subi	r30, 0xCA	; 202
   10c16:	f0 4f       	sbci	r31, 0xF0	; 240
   10c18:	e0 85       	ldd	r30, Z+8	; 0x08
   10c1a:	f0 e0       	ldi	r31, 0x00	; 0
   10c1c:	ee 0f       	add	r30, r30
   10c1e:	ff 1f       	adc	r31, r31
   10c20:	ec 5c       	subi	r30, 0xCC	; 204
   10c22:	f0 4f       	sbci	r31, 0xF0	; 240
   10c24:	80 81       	ld	r24, Z
   10c26:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
   10c28:	be 01       	movw	r22, r28
   10c2a:	6f 5f       	subi	r22, 0xFF	; 255
   10c2c:	7f 4f       	sbci	r23, 0xFF	; 255
   10c2e:	81 2f       	mov	r24, r17
   10c30:	0e 94 bf 83 	call	0x1077e	; 0x1077e <set_tds18s20(unsigned char, struct_DDS18s20*)>
   10c34:	3e e1       	ldi	r19, 0x1E	; 30
   10c36:	13 9f       	mul	r17, r19
   10c38:	a0 01       	movw	r20, r0
   10c3a:	11 24       	eor	r1, r1
   10c3c:	90 e0       	ldi	r25, 0x00	; 0
   10c3e:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
   10c40:	20 e2       	ldi	r18, 0x20	; 32
   10c42:	3e e4       	ldi	r19, 0x4E	; 78
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:218 (discriminator 2)
   10c44:	fc 01       	movw	r30, r24
   10c46:	ee 0f       	add	r30, r30
   10c48:	ff 1f       	adc	r31, r31
   10c4a:	e4 0f       	add	r30, r20
   10c4c:	f5 1f       	adc	r31, r21
   10c4e:	e7 58       	subi	r30, 0x87	; 135
   10c50:	f0 4f       	sbci	r31, 0xF0	; 240
   10c52:	30 87       	std	Z+8, r19	; 0x08
   10c54:	27 83       	std	Z+7, r18	; 0x07
   10c56:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:217 (discriminator 2)
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
   10c58:	8a 30       	cpi	r24, 0x0A	; 10
   10c5a:	91 05       	cpc	r25, r1
   10c5c:	99 f7       	brne	.-26     	; 0x10c44 <tds_associate(unsigned char)+0xba>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
   10c5e:	0e 94 00 85 	call	0x10a00	; 0x10a00 <tds_update_associate()>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:226
  return ret;
}
   10c62:	81 2f       	mov	r24, r17
   10c64:	66 96       	adiw	r28, 0x16	; 22
   10c66:	0f b6       	in	r0, 0x3f	; 63
   10c68:	f8 94       	cli
   10c6a:	de bf       	out	0x3e, r29	; 62
   10c6c:	0f be       	out	0x3f, r0	; 63
   10c6e:	cd bf       	out	0x3d, r28	; 61
   10c70:	df 91       	pop	r29
   10c72:	cf 91       	pop	r28
   10c74:	1f 91       	pop	r17
   10c76:	0f 91       	pop	r16
   10c78:	ff 90       	pop	r15
   10c7a:	ef 90       	pop	r14
   10c7c:	df 90       	pop	r13
   10c7e:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:207 (discriminator 2)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   10c80:	1f 5f       	subi	r17, 0xFF	; 255
   10c82:	16 30       	cpi	r17, 0x06	; 6
   10c84:	09 f0       	breq	.+2      	; 0x10c88 <tds_associate(unsigned char)+0xfe>
   10c86:	a0 cf       	rjmp	.-192    	; 0x10bc8 <tds_associate(unsigned char)+0x3e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
   10c88:	1f ef       	ldi	r17, 0xFF	; 255
   10c8a:	e9 cf       	rjmp	.-46     	; 0x10c5e <tds_associate(unsigned char)+0xd4>

00010c8c <one_hw_search_device(unsigned char)>:
_Z20one_hw_search_deviceh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:232

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
   10c8c:	df 92       	push	r13
   10c8e:	ef 92       	push	r14
   10c90:	ff 92       	push	r15
   10c92:	0f 93       	push	r16
   10c94:	1f 93       	push	r17
   10c96:	cf 93       	push	r28
   10c98:	df 93       	push	r29
   10c9a:	f8 2e       	mov	r15, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:234
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
   10c9c:	c8 2f       	mov	r28, r24
   10c9e:	d0 e0       	ldi	r29, 0x00	; 0
   10ca0:	cc 0f       	add	r28, r28
   10ca2:	dd 1f       	adc	r29, r29
   10ca4:	cc 5c       	subi	r28, 0xCC	; 204
   10ca6:	d0 4f       	sbci	r29, 0xF0	; 240
   10ca8:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
   10caa:	88 81       	ld	r24, Y
   10cac:	0e 94 06 c8 	call	0x1900c	; 0x1900c <ds2482init(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
   10cb0:	88 81       	ld	r24, Y
   10cb2:	0e 94 c0 c7 	call	0x18f80	; 0x18f80 <ds2482reset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
   10cb6:	88 81       	ld	r24, Y
   10cb8:	0e 94 1f c8 	call	0x1903e	; 0x1903e <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
   10cbc:	6d e2       	ldi	r22, 0x2D	; 45
   10cbe:	70 e1       	ldi	r23, 0x10	; 16
   10cc0:	88 81       	ld	r24, Y
   10cc2:	0e 94 ba c7 	call	0x18f74	; 0x18f74 <owMatchFirst(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
   10cc6:	81 11       	cpse	r24, r1
   10cc8:	3a c0       	rjmp	.+116    	; 0x10d3e <one_hw_search_device(unsigned char)+0xb2>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:248
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   10cca:	8e 01       	movw	r16, r28
   10ccc:	0f 5f       	subi	r16, 0xFF	; 255
   10cce:	1f 4f       	sbci	r17, 0xFF	; 255
   10cd0:	9b e0       	ldi	r25, 0x0B	; 11
   10cd2:	e9 2e       	mov	r14, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
   10cd4:	dd 24       	eor	r13, r13
   10cd6:	d3 94       	inc	r13
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   10cd8:	f8 01       	movw	r30, r16
   10cda:	90 81       	ld	r25, Z
   10cdc:	96 30       	cpi	r25, 0x06	; 6
   10cde:	78 f5       	brcc	.+94     	; 0x10d3e <one_hw_search_device(unsigned char)+0xb2>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
   10ce0:	20 91 78 0f 	lds	r18, 0x0F78	; 0x800f78 <Global_HWwirenum>
   10ce4:	42 2f       	mov	r20, r18
   10ce6:	50 e0       	ldi	r21, 0x00	; 0
   10ce8:	ad e2       	ldi	r26, 0x2D	; 45
   10cea:	b0 e1       	ldi	r27, 0x10	; 16
   10cec:	2e 9d       	mul	r18, r14
   10cee:	90 01       	movw	r18, r0
   10cf0:	11 24       	eor	r1, r1
   10cf2:	90 e0       	ldi	r25, 0x00	; 0
   10cf4:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:249 (discriminator 2)
   10cf6:	6d 91       	ld	r22, X+
   10cf8:	fc 01       	movw	r30, r24
   10cfa:	e2 0f       	add	r30, r18
   10cfc:	f3 1f       	adc	r31, r19
   10cfe:	ea 5c       	subi	r30, 0xCA	; 202
   10d00:	f0 4f       	sbci	r31, 0xF0	; 240
   10d02:	60 83       	st	Z, r22
   10d04:	01 96       	adiw	r24, 0x01	; 1
   10d06:	88 30       	cpi	r24, 0x08	; 8
   10d08:	91 05       	cpc	r25, r1
   10d0a:	a9 f7       	brne	.-22     	; 0x10cf6 <one_hw_search_device(unsigned char)+0x6a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
   10d0c:	e4 9e       	mul	r14, r20
   10d0e:	f0 01       	movw	r30, r0
   10d10:	e5 9e       	mul	r14, r21
   10d12:	f0 0d       	add	r31, r0
   10d14:	11 24       	eor	r1, r1
   10d16:	ea 5c       	subi	r30, 0xCA	; 202
   10d18:	f0 4f       	sbci	r31, 0xF0	; 240
   10d1a:	f0 86       	std	Z+8, r15	; 0x08
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
   10d1c:	d1 86       	std	Z+9, r13	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
   10d1e:	6d e2       	ldi	r22, 0x2D	; 45
   10d20:	70 e1       	ldi	r23, 0x10	; 16
   10d22:	88 81       	ld	r24, Y
   10d24:	0e 94 34 c7 	call	0x18e68	; 0x18e68 <owMatchNext(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
   10d28:	f8 01       	movw	r30, r16
   10d2a:	90 81       	ld	r25, Z
   10d2c:	9f 5f       	subi	r25, 0xFF	; 255
   10d2e:	90 83       	st	Z, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
   10d30:	90 91 78 0f 	lds	r25, 0x0F78	; 0x800f78 <Global_HWwirenum>
   10d34:	9f 5f       	subi	r25, 0xFF	; 255
   10d36:	90 93 78 0f 	sts	0x0F78, r25	; 0x800f78 <Global_HWwirenum>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
   10d3a:	85 30       	cpi	r24, 0x05	; 5
   10d3c:	69 f6       	brne	.-102    	; 0x10cd8 <one_hw_search_device(unsigned char)+0x4c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:262
      { ///hledani dokonceno
        break;
      }
    }
  return r;
}
   10d3e:	df 91       	pop	r29
   10d40:	cf 91       	pop	r28
   10d42:	1f 91       	pop	r17
   10d44:	0f 91       	pop	r16
   10d46:	ff 90       	pop	r15
   10d48:	ef 90       	pop	r14
   10d4a:	df 90       	pop	r13
   10d4c:	08 95       	ret

00010d4e <mereni_hwwire(unsigned int)>:
_Z13mereni_hwwirej():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:266
//////
/// funkce mereni na sbernici
uint8_t mereni_hwwire(uint16_t uptime)
{
   10d4e:	af 92       	push	r10
   10d50:	bf 92       	push	r11
   10d52:	cf 92       	push	r12
   10d54:	df 92       	push	r13
   10d56:	ef 92       	push	r14
   10d58:	ff 92       	push	r15
   10d5a:	0f 93       	push	r16
   10d5c:	1f 93       	push	r17
   10d5e:	cf 93       	push	r28
   10d60:	df 93       	push	r29
   10d62:	cd b7       	in	r28, 0x3d	; 61
   10d64:	de b7       	in	r29, 0x3e	; 62
   10d66:	68 97       	sbiw	r28, 0x18	; 24
   10d68:	0f b6       	in	r0, 0x3f	; 63
   10d6a:	f8 94       	cli
   10d6c:	de bf       	out	0x3e, r29	; 62
   10d6e:	0f be       	out	0x3f, r0	; 63
   10d70:	cd bf       	out	0x3d, r28	; 61
   10d72:	59 e7       	ldi	r21, 0x79	; 121
   10d74:	e5 2e       	mov	r14, r21
   10d76:	5f e0       	ldi	r21, 0x0F	; 15
   10d78:	f5 2e       	mov	r15, r21
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   10d7a:	00 e0       	ldi	r16, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   10d7c:	6c 01       	movw	r12, r24
   10d7e:	dd 24       	eor	r13, r13
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   10d80:	6e e1       	ldi	r22, 0x1E	; 30
   10d82:	a6 2e       	mov	r10, r22
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   10d84:	be 01       	movw	r22, r28
   10d86:	6f 5f       	subi	r22, 0xFF	; 255
   10d88:	7f 4f       	sbci	r23, 0xFF	; 255
   10d8a:	80 2f       	mov	r24, r16
   10d8c:	0e 94 5a 83 	call	0x106b4	; 0x106b4 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   10d90:	19 81       	ldd	r17, Y+1	; 0x01
   10d92:	11 30       	cpi	r17, 0x01	; 1
   10d94:	09 f0       	breq	.+2      	; 0x10d98 <mereni_hwwire(unsigned int)+0x4a>
   10d96:	d9 c0       	rjmp	.+434    	; 0x10f4a <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273 (discriminator 1)
   10d98:	f7 01       	movw	r30, r14
   10d9a:	84 8d       	ldd	r24, Z+28	; 0x1c
   10d9c:	9d 89       	ldd	r25, Y+21	; 0x15
   10d9e:	96 01       	movw	r18, r12
   10da0:	28 1b       	sub	r18, r24
   10da2:	31 09       	sbc	r19, r1
   10da4:	92 17       	cp	r25, r18
   10da6:	13 06       	cpc	r1, r19
   10da8:	11 f0       	breq	.+4      	; 0x10dae <mereni_hwwire(unsigned int)+0x60>
   10daa:	08 f0       	brcs	.+2      	; 0x10dae <mereni_hwwire(unsigned int)+0x60>
   10dac:	ce c0       	rjmp	.+412    	; 0x10f4a <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:275
    {
      status_tds18s20[w].period_now += tds.period;
   10dae:	89 0f       	add	r24, r25
   10db0:	84 8f       	std	Z+28, r24	; 0x1c
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:276
      if (status_tds18s20[w].wait == false)
   10db2:	85 8d       	ldd	r24, Z+29	; 0x1d
   10db4:	81 11       	cpse	r24, r1
   10db6:	0f c0       	rjmp	.+30     	; 0x10dd6 <mereni_hwwire(unsigned int)+0x88>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:278
      {
        owReset(tds.assigned_ds2482);
   10db8:	8a 85       	ldd	r24, Y+10	; 0x0a
   10dba:	0e 94 1f c8 	call	0x1903e	; 0x1903e <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:279
        owMatchRom(tds.assigned_ds2482, tds.rom);
   10dbe:	be 01       	movw	r22, r28
   10dc0:	6e 5f       	subi	r22, 0xFE	; 254
   10dc2:	7f 4f       	sbci	r23, 0xFF	; 255
   10dc4:	8a 85       	ldd	r24, Y+10	; 0x0a
   10dc6:	0e 94 1e c7 	call	0x18e3c	; 0x18e3c <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:280
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   10dca:	64 e4       	ldi	r22, 0x44	; 68
   10dcc:	8a 85       	ldd	r24, Y+10	; 0x0a
   10dce:	0e 94 5a c8 	call	0x190b4	; 0x190b4 <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:281
        status_tds18s20[w].wait = true;
   10dd2:	f7 01       	movw	r30, r14
   10dd4:	15 8f       	std	Z+29, r17	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:283
      }
      if (status_tds18s20[w].wait == true)
   10dd6:	f7 01       	movw	r30, r14
   10dd8:	b5 8c       	ldd	r11, Z+29	; 0x1d
   10dda:	f1 e0       	ldi	r31, 0x01	; 1
   10ddc:	bf 12       	cpse	r11, r31
   10dde:	b5 c0       	rjmp	.+362    	; 0x10f4a <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:285
      {
        owReset(tds.assigned_ds2482);
   10de0:	8a 85       	ldd	r24, Y+10	; 0x0a
   10de2:	0e 94 1f c8 	call	0x1903e	; 0x1903e <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:286
        owMatchRom(tds.assigned_ds2482, tds.rom);
   10de6:	be 01       	movw	r22, r28
   10de8:	6e 5f       	subi	r22, 0xFE	; 254
   10dea:	7f 4f       	sbci	r23, 0xFF	; 255
   10dec:	8a 85       	ldd	r24, Y+10	; 0x0a
   10dee:	0e 94 1e c7 	call	0x18e3c	; 0x18e3c <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:287
        owReadByte(tds.assigned_ds2482, &t);
   10df2:	be 01       	movw	r22, r28
   10df4:	68 5e       	subi	r22, 0xE8	; 232
   10df6:	7f 4f       	sbci	r23, 0xFF	; 255
   10df8:	8a 85       	ldd	r24, Y+10	; 0x0a
   10dfa:	0e 94 e2 c8 	call	0x191c4	; 0x191c4 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:288
        if (t != 0) 
   10dfe:	88 8d       	ldd	r24, Y+24	; 0x18
   10e00:	88 23       	and	r24, r24
   10e02:	09 f4       	brne	.+2      	; 0x10e06 <mereni_hwwire(unsigned int)+0xb8>
   10e04:	a2 c0       	rjmp	.+324    	; 0x10f4a <mereni_hwwire(unsigned int)+0x1fc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:290
        {
          status_tds18s20[w].wait = false;
   10e06:	f7 01       	movw	r30, r14
   10e08:	15 8e       	std	Z+29, r1	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:291
          status = owReset(tds.assigned_ds2482);
   10e0a:	8a 85       	ldd	r24, Y+10	; 0x0a
   10e0c:	0e 94 1f c8 	call	0x1903e	; 0x1903e <ds2482owReset(unsigned char)>
   10e10:	18 2f       	mov	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:292
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   10e12:	be 01       	movw	r22, r28
   10e14:	6e 5f       	subi	r22, 0xFE	; 254
   10e16:	7f 4f       	sbci	r23, 0xFF	; 255
   10e18:	8a 85       	ldd	r24, Y+10	; 0x0a
   10e1a:	0e 94 1e c7 	call	0x18e3c	; 0x18e3c <owMatchRom(unsigned char, unsigned char*)>
   10e1e:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:293
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   10e20:	6e eb       	ldi	r22, 0xBE	; 190
   10e22:	8a 85       	ldd	r24, Y+10	; 0x0a
   10e24:	0e 94 5a c8 	call	0x190b4	; 0x190b4 <ds2482owWriteByte(unsigned char, unsigned char)>
   10e28:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:294
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   10e2a:	be 01       	movw	r22, r28
   10e2c:	69 5e       	subi	r22, 0xE9	; 233
   10e2e:	7f 4f       	sbci	r23, 0xFF	; 255
   10e30:	8a 85       	ldd	r24, Y+10	; 0x0a
   10e32:	0e 94 e2 c8 	call	0x191c4	; 0x191c4 <ds2482owReadByte(unsigned char, unsigned char*)>
   10e36:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:295
          status_tds18s20[w].tempL = e;
   10e38:	8f 89       	ldd	r24, Y+23	; 0x17
   10e3a:	f7 01       	movw	r30, r14
   10e3c:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:296
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   10e3e:	be 01       	movw	r22, r28
   10e40:	69 5e       	subi	r22, 0xE9	; 233
   10e42:	7f 4f       	sbci	r23, 0xFF	; 255
   10e44:	8a 85       	ldd	r24, Y+10	; 0x0a
   10e46:	0e 94 e2 c8 	call	0x191c4	; 0x191c4 <ds2482owReadByte(unsigned char, unsigned char*)>
   10e4a:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:297
          status_tds18s20[w].tempH = e;
   10e4c:	8f 89       	ldd	r24, Y+23	; 0x17
   10e4e:	f7 01       	movw	r30, r14
   10e50:	81 83       	std	Z+1, r24	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   10e52:	be 01       	movw	r22, r28
   10e54:	69 5e       	subi	r22, 0xE9	; 233
   10e56:	7f 4f       	sbci	r23, 0xFF	; 255
   10e58:	8a 85       	ldd	r24, Y+10	; 0x0a
   10e5a:	0e 94 e2 c8 	call	0x191c4	; 0x191c4 <ds2482owReadByte(unsigned char, unsigned char*)>
   10e5e:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   10e60:	be 01       	movw	r22, r28
   10e62:	69 5e       	subi	r22, 0xE9	; 233
   10e64:	7f 4f       	sbci	r23, 0xFF	; 255
   10e66:	8a 85       	ldd	r24, Y+10	; 0x0a
   10e68:	0e 94 e2 c8 	call	0x191c4	; 0x191c4 <ds2482owReadByte(unsigned char, unsigned char*)>
   10e6c:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   10e6e:	be 01       	movw	r22, r28
   10e70:	69 5e       	subi	r22, 0xE9	; 233
   10e72:	7f 4f       	sbci	r23, 0xFF	; 255
   10e74:	8a 85       	ldd	r24, Y+10	; 0x0a
   10e76:	0e 94 e2 c8 	call	0x191c4	; 0x191c4 <ds2482owReadByte(unsigned char, unsigned char*)>
   10e7a:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   10e7c:	be 01       	movw	r22, r28
   10e7e:	69 5e       	subi	r22, 0xE9	; 233
   10e80:	7f 4f       	sbci	r23, 0xFF	; 255
   10e82:	8a 85       	ldd	r24, Y+10	; 0x0a
   10e84:	0e 94 e2 c8 	call	0x191c4	; 0x191c4 <ds2482owReadByte(unsigned char, unsigned char*)>
   10e88:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:302
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   10e8a:	be 01       	movw	r22, r28
   10e8c:	69 5e       	subi	r22, 0xE9	; 233
   10e8e:	7f 4f       	sbci	r23, 0xFF	; 255
   10e90:	8a 85       	ldd	r24, Y+10	; 0x0a
   10e92:	0e 94 e2 c8 	call	0x191c4	; 0x191c4 <ds2482owReadByte(unsigned char, unsigned char*)>
   10e96:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:303
          status_tds18s20[w].CR = e; //count remain
   10e98:	8f 89       	ldd	r24, Y+23	; 0x17
   10e9a:	f7 01       	movw	r30, r14
   10e9c:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:304
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   10e9e:	be 01       	movw	r22, r28
   10ea0:	69 5e       	subi	r22, 0xE9	; 233
   10ea2:	7f 4f       	sbci	r23, 0xFF	; 255
   10ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
   10ea6:	0e 94 e2 c8 	call	0x191c4	; 0x191c4 <ds2482owReadByte(unsigned char, unsigned char*)>
   10eaa:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:305
          status_tds18s20[w].CP = e; // count per
   10eac:	8f 89       	ldd	r24, Y+23	; 0x17
   10eae:	f7 01       	movw	r30, r14
   10eb0:	83 83       	std	Z+3, r24	; 0x03
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   10eb2:	be 01       	movw	r22, r28
   10eb4:	69 5e       	subi	r22, 0xE9	; 233
   10eb6:	7f 4f       	sbci	r23, 0xFF	; 255
   10eb8:	8a 85       	ldd	r24, Y+10	; 0x0a
   10eba:	0e 94 e2 c8 	call	0x191c4	; 0x191c4 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
   10ebe:	9f 89       	ldd	r25, Y+23	; 0x17
   10ec0:	f7 01       	movw	r30, r14
   10ec2:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   10ec4:	81 0f       	add	r24, r17
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:308
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   10ec6:	09 f0       	breq	.+2      	; 0x10eca <mereni_hwwire(unsigned int)+0x17c>
   10ec8:	58 c0       	rjmp	.+176    	; 0x10f7a <mereni_hwwire(unsigned int)+0x22c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   10eca:	63 81       	ldd	r22, Z+3	; 0x03
   10ecc:	70 e0       	ldi	r23, 0x00	; 0
   10ece:	e8 8d       	ldd	r30, Y+24	; 0x18
   10ed0:	ae 9e       	mul	r10, r30
   10ed2:	f0 01       	movw	r30, r0
   10ed4:	11 24       	eor	r1, r1
   10ed6:	e7 58       	subi	r30, 0x87	; 135
   10ed8:	f0 4f       	sbci	r31, 0xF0	; 240
   10eda:	82 81       	ldd	r24, Z+2	; 0x02
   10edc:	9b 01       	movw	r18, r22
   10ede:	28 1b       	sub	r18, r24
   10ee0:	31 09       	sbc	r19, r1
   10ee2:	c9 01       	movw	r24, r18
   10ee4:	96 95       	lsr	r25
   10ee6:	98 2f       	mov	r25, r24
   10ee8:	88 27       	eor	r24, r24
   10eea:	97 95       	ror	r25
   10eec:	87 95       	ror	r24
   10eee:	0e 94 66 d3 	call	0x1a6cc	; 0x1a6cc <__divmodhi4>
   10ef2:	8b 85       	ldd	r24, Y+11	; 0x0b
   10ef4:	9c 85       	ldd	r25, Y+12	; 0x0c
   10ef6:	40 97       	sbiw	r24, 0x10	; 16
   10ef8:	68 0f       	add	r22, r24
   10efa:	79 1f       	adc	r23, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:310
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   10efc:	f7 01       	movw	r30, r14
   10efe:	81 81       	ldd	r24, Z+1	; 0x01
   10f00:	90 e0       	ldi	r25, 0x00	; 0
   10f02:	98 2f       	mov	r25, r24
   10f04:	88 27       	eor	r24, r24
   10f06:	99 0f       	add	r25, r25
   10f08:	99 0f       	add	r25, r25
   10f0a:	99 0f       	add	r25, r25
   10f0c:	20 81       	ld	r18, Z
   10f0e:	f8 e0       	ldi	r31, 0x08	; 8
   10f10:	2f 9f       	mul	r18, r31
   10f12:	90 01       	movw	r18, r0
   10f14:	11 24       	eor	r1, r1
   10f16:	82 2b       	or	r24, r18
   10f18:	93 2b       	or	r25, r19
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   10f1a:	43 e0       	ldi	r20, 0x03	; 3
   10f1c:	88 0f       	add	r24, r24
   10f1e:	99 1f       	adc	r25, r25
   10f20:	4a 95       	dec	r20
   10f22:	e1 f7       	brne	.-8      	; 0x10f1c <mereni_hwwire(unsigned int)+0x1ce>
   10f24:	80 78       	andi	r24, 0x80	; 128
   10f26:	68 0f       	add	r22, r24
   10f28:	79 1f       	adc	r23, r25
   10f2a:	f7 01       	movw	r30, r14
   10f2c:	76 83       	std	Z+6, r23	; 0x06
   10f2e:	65 83       	std	Z+5, r22	; 0x05
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:312
            status_tds18s20[w].online = True;
   10f30:	b3 8e       	std	Z+27, r11	; 0x1b
   10f32:	89 e0       	ldi	r24, 0x09	; 9
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:313 (discriminator 2)
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   10f34:	27 89       	ldd	r18, Z+23	; 0x17
   10f36:	30 8d       	ldd	r19, Z+24	; 0x18
   10f38:	32 8f       	std	Z+26, r19	; 0x1a
   10f3a:	21 8f       	std	Z+25, r18	; 0x19
   10f3c:	81 50       	subi	r24, 0x01	; 1
   10f3e:	32 97       	sbiw	r30, 0x02	; 2
   10f40:	81 11       	cpse	r24, r1
   10f42:	f8 cf       	rjmp	.-16     	; 0x10f34 <mereni_hwwire(unsigned int)+0x1e6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   10f44:	f7 01       	movw	r30, r14
   10f46:	70 87       	std	Z+8, r23	; 0x08
   10f48:	67 83       	std	Z+7, r22	; 0x07
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270 (discriminator 2)
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   10f4a:	0f 5f       	subi	r16, 0xFF	; 255
   10f4c:	fe e1       	ldi	r31, 0x1E	; 30
   10f4e:	ef 0e       	add	r14, r31
   10f50:	f1 1c       	adc	r15, r1
   10f52:	06 30       	cpi	r16, 0x06	; 6
   10f54:	09 f0       	breq	.+2      	; 0x10f58 <mereni_hwwire(unsigned int)+0x20a>
   10f56:	16 cf       	rjmp	.-468    	; 0x10d84 <mereni_hwwire(unsigned int)+0x36>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:326
          }
        }
      }
    }
  }
}
   10f58:	68 96       	adiw	r28, 0x18	; 24
   10f5a:	0f b6       	in	r0, 0x3f	; 63
   10f5c:	f8 94       	cli
   10f5e:	de bf       	out	0x3e, r29	; 62
   10f60:	0f be       	out	0x3f, r0	; 63
   10f62:	cd bf       	out	0x3d, r28	; 61
   10f64:	df 91       	pop	r29
   10f66:	cf 91       	pop	r28
   10f68:	1f 91       	pop	r17
   10f6a:	0f 91       	pop	r16
   10f6c:	ff 90       	pop	r15
   10f6e:	ef 90       	pop	r14
   10f70:	df 90       	pop	r13
   10f72:	cf 90       	pop	r12
   10f74:	bf 90       	pop	r11
   10f76:	af 90       	pop	r10
   10f78:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:320
            
          }

          else
          {
            status_tds18s20[w].online = False;
   10f7a:	13 8e       	std	Z+27, r1	; 0x1b
   10f7c:	e6 cf       	rjmp	.-52     	; 0x10f4a <mereni_hwwire(unsigned int)+0x1fc>

00010f7e <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:198
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
   10f7e:	0c 94 79 df 	jmp	0x1bef2	; 0x1bef2 <eeprom_read_byte>

00010f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   10f82:	0c 94 81 df 	jmp	0x1bf02	; 0x1bf02 <eeprom_write_byte>

00010f86 <thermostat_ring_get_state(unsigned char)>:
_Z25thermostat_ring_get_stateh():
   10f86:	e8 2f       	mov	r30, r24
   10f88:	f0 e0       	ldi	r31, 0x00	; 0
   10f8a:	e4 5c       	subi	r30, 0xC4	; 196
   10f8c:	ff 4e       	sbci	r31, 0xEF	; 239
   10f8e:	80 81       	ld	r24, Z
   10f90:	08 95       	ret

00010f92 <thermostat_ring_set_state(unsigned char, unsigned char)>:
_Z25thermostat_ring_set_statehh():
   10f92:	e8 2f       	mov	r30, r24
   10f94:	f0 e0       	ldi	r31, 0x00	; 0
   10f96:	e4 5c       	subi	r30, 0xC4	; 196
   10f98:	ff 4e       	sbci	r31, 0xEF	; 239
   10f9a:	60 83       	st	Z, r22
   10f9c:	08 95       	ret

00010f9e <thermostat_ring_set_power(unsigned char, unsigned char)>:
_Z25thermostat_ring_set_powerhh():
   10f9e:	e8 2f       	mov	r30, r24
   10fa0:	f0 e0       	ldi	r31, 0x00	; 0
   10fa2:	e9 5c       	subi	r30, 0xC9	; 201
   10fa4:	ff 4e       	sbci	r31, 0xEF	; 239
   10fa6:	60 83       	st	Z, r22
   10fa8:	08 95       	ret

00010faa <thermostat_init_pid()>:
_Z19thermostat_init_pidv():
   10faa:	2f 92       	push	r2
   10fac:	3f 92       	push	r3
   10fae:	4f 92       	push	r4
   10fb0:	5f 92       	push	r5
   10fb2:	6f 92       	push	r6
   10fb4:	7f 92       	push	r7
   10fb6:	8f 92       	push	r8
   10fb8:	9f 92       	push	r9
   10fba:	af 92       	push	r10
   10fbc:	bf 92       	push	r11
   10fbe:	cf 92       	push	r12
   10fc0:	df 92       	push	r13
   10fc2:	ef 92       	push	r14
   10fc4:	ff 92       	push	r15
   10fc6:	0f 93       	push	r16
   10fc8:	1f 93       	push	r17
   10fca:	cf 93       	push	r28
   10fcc:	df 93       	push	r29
   10fce:	2a ea       	ldi	r18, 0xAA	; 170
   10fd0:	82 2e       	mov	r8, r18
   10fd2:	20 e1       	ldi	r18, 0x10	; 16
   10fd4:	92 2e       	mov	r9, r18
   10fd6:	36 e9       	ldi	r19, 0x96	; 150
   10fd8:	43 2e       	mov	r4, r19
   10fda:	30 e1       	ldi	r19, 0x10	; 16
   10fdc:	53 2e       	mov	r5, r19
   10fde:	42 e8       	ldi	r20, 0x82	; 130
   10fe0:	24 2e       	mov	r2, r20
   10fe2:	40 e1       	ldi	r20, 0x10	; 16
   10fe4:	34 2e       	mov	r3, r20
   10fe6:	d0 e0       	ldi	r29, 0x00	; 0
   10fe8:	c0 e0       	ldi	r28, 0x00	; 0
   10fea:	8c e3       	ldi	r24, 0x3C	; 60
   10fec:	90 e0       	ldi	r25, 0x00	; 0
   10fee:	0e 94 f4 d0 	call	0x1a1e8	; 0x1a1e8 <operator new(unsigned int)>
   10ff2:	3c 01       	movw	r6, r24
   10ff4:	1f 92       	push	r1
   10ff6:	1f 92       	push	r1
   10ff8:	8f e3       	ldi	r24, 0x3F	; 63
   10ffa:	8f 93       	push	r24
   10ffc:	80 e8       	ldi	r24, 0x80	; 128
   10ffe:	8f 93       	push	r24
   11000:	1f 92       	push	r1
   11002:	1f 92       	push	r1
   11004:	a1 2c       	mov	r10, r1
   11006:	b1 2c       	mov	r11, r1
   11008:	80 ea       	ldi	r24, 0xA0	; 160
   1100a:	c8 2e       	mov	r12, r24
   1100c:	80 e4       	ldi	r24, 0x40	; 64
   1100e:	d8 2e       	mov	r13, r24
   11010:	e1 2c       	mov	r14, r1
   11012:	f1 2c       	mov	r15, r1
   11014:	00 e0       	ldi	r16, 0x00	; 0
   11016:	10 e4       	ldi	r17, 0x40	; 64
   11018:	91 01       	movw	r18, r2
   1101a:	a2 01       	movw	r20, r4
   1101c:	b4 01       	movw	r22, r8
   1101e:	c3 01       	movw	r24, r6
   11020:	0e 94 ed b6 	call	0x16dda	; 0x16dda <PID::PID(double*, double*, double*, double, double, double, int)>
   11024:	e0 91 35 10 	lds	r30, 0x1035	; 0x801035 <array_pids>
   11028:	f0 91 36 10 	lds	r31, 0x1036	; 0x801036 <array_pids+0x1>
   1102c:	ec 0f       	add	r30, r28
   1102e:	fd 1f       	adc	r31, r29
   11030:	71 82       	std	Z+1, r7	; 0x01
   11032:	60 82       	st	Z, r6
   11034:	61 e0       	ldi	r22, 0x01	; 1
   11036:	70 e0       	ldi	r23, 0x00	; 0
   11038:	c3 01       	movw	r24, r6
   1103a:	0e 94 25 b6 	call	0x16c4a	; 0x16c4a <PID::SetMode(int)>
   1103e:	e0 91 35 10 	lds	r30, 0x1035	; 0x801035 <array_pids>
   11042:	f0 91 36 10 	lds	r31, 0x1036	; 0x801036 <array_pids+0x1>
   11046:	ec 0f       	add	r30, r28
   11048:	fd 1f       	adc	r31, r29
   1104a:	00 e0       	ldi	r16, 0x00	; 0
   1104c:	10 e0       	ldi	r17, 0x00	; 0
   1104e:	2f e7       	ldi	r18, 0x7F	; 127
   11050:	33 e4       	ldi	r19, 0x43	; 67
   11052:	40 e0       	ldi	r20, 0x00	; 0
   11054:	50 e0       	ldi	r21, 0x00	; 0
   11056:	ba 01       	movw	r22, r20
   11058:	80 81       	ld	r24, Z
   1105a:	91 81       	ldd	r25, Z+1	; 0x01
   1105c:	0e 94 5d b5 	call	0x16aba	; 0x16aba <PID::SetOutputLimits(double, double)>
   11060:	84 e0       	ldi	r24, 0x04	; 4
   11062:	88 0e       	add	r8, r24
   11064:	91 1c       	adc	r9, r1
   11066:	84 e0       	ldi	r24, 0x04	; 4
   11068:	48 0e       	add	r4, r24
   1106a:	51 1c       	adc	r5, r1
   1106c:	84 e0       	ldi	r24, 0x04	; 4
   1106e:	28 0e       	add	r2, r24
   11070:	31 1c       	adc	r3, r1
   11072:	22 96       	adiw	r28, 0x02	; 2
   11074:	0f 90       	pop	r0
   11076:	0f 90       	pop	r0
   11078:	0f 90       	pop	r0
   1107a:	0f 90       	pop	r0
   1107c:	0f 90       	pop	r0
   1107e:	0f 90       	pop	r0
   11080:	ca 30       	cpi	r28, 0x0A	; 10
   11082:	d1 05       	cpc	r29, r1
   11084:	09 f0       	breq	.+2      	; 0x11088 <thermostat_init_pid()+0xde>
   11086:	b1 cf       	rjmp	.-158    	; 0x10fea <thermostat_init_pid()+0x40>
   11088:	df 91       	pop	r29
   1108a:	cf 91       	pop	r28
   1108c:	1f 91       	pop	r17
   1108e:	0f 91       	pop	r16
   11090:	ff 90       	pop	r15
   11092:	ef 90       	pop	r14
   11094:	df 90       	pop	r13
   11096:	cf 90       	pop	r12
   11098:	bf 90       	pop	r11
   1109a:	af 90       	pop	r10
   1109c:	9f 90       	pop	r9
   1109e:	8f 90       	pop	r8
   110a0:	7f 90       	pop	r7
   110a2:	6f 90       	pop	r6
   110a4:	5f 90       	pop	r5
   110a6:	4f 90       	pop	r4
   110a8:	3f 90       	pop	r3
   110aa:	2f 90       	pop	r2
   110ac:	08 95       	ret

000110ae <thermostat_pid_setdirection_direct(unsigned char)>:
_Z34thermostat_pid_setdirection_directh():
   110ae:	90 e0       	ldi	r25, 0x00	; 0
   110b0:	88 0f       	add	r24, r24
   110b2:	99 1f       	adc	r25, r25
   110b4:	20 91 35 10 	lds	r18, 0x1035	; 0x801035 <array_pids>
   110b8:	30 91 36 10 	lds	r19, 0x1036	; 0x801036 <array_pids+0x1>
   110bc:	82 0f       	add	r24, r18
   110be:	93 1f       	adc	r25, r19
   110c0:	70 e0       	ldi	r23, 0x00	; 0
   110c2:	60 e0       	ldi	r22, 0x00	; 0
   110c4:	fc 01       	movw	r30, r24
   110c6:	80 81       	ld	r24, Z
   110c8:	91 81       	ldd	r25, Z+1	; 0x01
   110ca:	0c 94 3c b6 	jmp	0x16c78	; 0x16c78 <PID::SetControllerDirection(int)>

000110ce <thermostat_pid_setdirection_reverse(unsigned char)>:
_Z35thermostat_pid_setdirection_reverseh():
   110ce:	90 e0       	ldi	r25, 0x00	; 0
   110d0:	88 0f       	add	r24, r24
   110d2:	99 1f       	adc	r25, r25
   110d4:	20 91 35 10 	lds	r18, 0x1035	; 0x801035 <array_pids>
   110d8:	30 91 36 10 	lds	r19, 0x1036	; 0x801036 <array_pids+0x1>
   110dc:	82 0f       	add	r24, r18
   110de:	93 1f       	adc	r25, r19
   110e0:	61 e0       	ldi	r22, 0x01	; 1
   110e2:	70 e0       	ldi	r23, 0x00	; 0
   110e4:	fc 01       	movw	r30, r24
   110e6:	80 81       	ld	r24, Z
   110e8:	91 81       	ldd	r25, Z+1	; 0x01
   110ea:	0c 94 3c b6 	jmp	0x16c78	; 0x16c78 <PID::SetControllerDirection(int)>

000110ee <thermostat_get_pid_p(unsigned char)>:
_Z20thermostat_get_pid_ph():
   110ee:	94 e0       	ldi	r25, 0x04	; 4
   110f0:	89 9f       	mul	r24, r25
   110f2:	f0 01       	movw	r30, r0
   110f4:	11 24       	eor	r1, r1
   110f6:	e2 59       	subi	r30, 0x92	; 146
   110f8:	ff 4e       	sbci	r31, 0xEF	; 239
   110fa:	60 81       	ld	r22, Z
   110fc:	71 81       	ldd	r23, Z+1	; 0x01
   110fe:	82 81       	ldd	r24, Z+2	; 0x02
   11100:	93 81       	ldd	r25, Z+3	; 0x03
   11102:	08 95       	ret

00011104 <thermostat_pid_input(unsigned char, double)>:
_Z20thermostat_pid_inputhd():
   11104:	94 e0       	ldi	r25, 0x04	; 4
   11106:	89 9f       	mul	r24, r25
   11108:	f0 01       	movw	r30, r0
   1110a:	11 24       	eor	r1, r1
   1110c:	e6 55       	subi	r30, 0x56	; 86
   1110e:	ff 4e       	sbci	r31, 0xEF	; 239
   11110:	40 83       	st	Z, r20
   11112:	51 83       	std	Z+1, r21	; 0x01
   11114:	62 83       	std	Z+2, r22	; 0x02
   11116:	73 83       	std	Z+3, r23	; 0x03
   11118:	08 95       	ret

0001111a <thermostat_pid_setpoint(unsigned char, double)>:
_Z23thermostat_pid_setpointhd():
   1111a:	94 e0       	ldi	r25, 0x04	; 4
   1111c:	89 9f       	mul	r24, r25
   1111e:	f0 01       	movw	r30, r0
   11120:	11 24       	eor	r1, r1
   11122:	ee 57       	subi	r30, 0x7E	; 126
   11124:	ff 4e       	sbci	r31, 0xEF	; 239
   11126:	40 83       	st	Z, r20
   11128:	51 83       	std	Z+1, r21	; 0x01
   1112a:	62 83       	std	Z+2, r22	; 0x02
   1112c:	73 83       	std	Z+3, r23	; 0x03
   1112e:	08 95       	ret

00011130 <thermostat_pid_output(unsigned char)>:
_Z21thermostat_pid_outputh():
   11130:	94 e0       	ldi	r25, 0x04	; 4
   11132:	89 9f       	mul	r24, r25
   11134:	f0 01       	movw	r30, r0
   11136:	11 24       	eor	r1, r1
   11138:	ea 56       	subi	r30, 0x6A	; 106
   1113a:	ff 4e       	sbci	r31, 0xEF	; 239
   1113c:	60 81       	ld	r22, Z
   1113e:	71 81       	ldd	r23, Z+1	; 0x01
   11140:	82 81       	ldd	r24, Z+2	; 0x02
   11142:	93 81       	ldd	r25, Z+3	; 0x03
   11144:	0e 94 e3 d1 	call	0x1a3c6	; 0x1a3c6 <__fixunssfsi>
   11148:	86 2f       	mov	r24, r22
   1114a:	08 95       	ret

0001114c <thermostat_get_pid_i(unsigned char)>:
_Z20thermostat_get_pid_ih():
   1114c:	94 e0       	ldi	r25, 0x04	; 4
   1114e:	89 9f       	mul	r24, r25
   11150:	f0 01       	movw	r30, r0
   11152:	11 24       	eor	r1, r1
   11154:	e6 5a       	subi	r30, 0xA6	; 166
   11156:	ff 4e       	sbci	r31, 0xEF	; 239
   11158:	60 81       	ld	r22, Z
   1115a:	71 81       	ldd	r23, Z+1	; 0x01
   1115c:	82 81       	ldd	r24, Z+2	; 0x02
   1115e:	93 81       	ldd	r25, Z+3	; 0x03
   11160:	08 95       	ret

00011162 <thermostat_get_pid_d(unsigned char)>:
_Z20thermostat_get_pid_dh():
   11162:	94 e0       	ldi	r25, 0x04	; 4
   11164:	89 9f       	mul	r24, r25
   11166:	f0 01       	movw	r30, r0
   11168:	11 24       	eor	r1, r1
   1116a:	ea 5b       	subi	r30, 0xBA	; 186
   1116c:	ff 4e       	sbci	r31, 0xEF	; 239
   1116e:	60 81       	ld	r22, Z
   11170:	71 81       	ldd	r23, Z+1	; 0x01
   11172:	82 81       	ldd	r24, Z+2	; 0x02
   11174:	93 81       	ldd	r25, Z+3	; 0x03
   11176:	08 95       	ret

00011178 <thermostat_get_pid_time(unsigned char)>:
_Z23thermostat_get_pid_timeh():
   11178:	e8 2f       	mov	r30, r24
   1117a:	f0 e0       	ldi	r31, 0x00	; 0
   1117c:	ef 5b       	subi	r30, 0xBF	; 191
   1117e:	ff 4e       	sbci	r31, 0xEF	; 239
   11180:	80 81       	ld	r24, Z
   11182:	08 95       	ret

00011184 <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
   11184:	ef 92       	push	r14
   11186:	ff 92       	push	r15
   11188:	0f 93       	push	r16
   1118a:	1f 93       	push	r17
   1118c:	cf 93       	push	r28
   1118e:	df 93       	push	r29
   11190:	91 e2       	ldi	r25, 0x21	; 33
   11192:	89 9f       	mul	r24, r25
   11194:	e0 01       	movw	r28, r0
   11196:	11 24       	eor	r1, r1
   11198:	8e 01       	movw	r16, r28
   1119a:	04 5b       	subi	r16, 0xB4	; 180
   1119c:	1e 4f       	sbci	r17, 0xFE	; 254
   1119e:	7b 01       	movw	r14, r22
   111a0:	cb 5a       	subi	r28, 0xAB	; 171
   111a2:	de 4f       	sbci	r29, 0xFE	; 254
   111a4:	c8 01       	movw	r24, r16
   111a6:	0e 94 bf 87 	call	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>
   111aa:	f7 01       	movw	r30, r14
   111ac:	81 93       	st	Z+, r24
   111ae:	7f 01       	movw	r14, r30
   111b0:	88 23       	and	r24, r24
   111b2:	29 f0       	breq	.+10     	; 0x111be <thermostat_ring_get_name(unsigned char, char*)+0x3a>
   111b4:	0f 5f       	subi	r16, 0xFF	; 255
   111b6:	1f 4f       	sbci	r17, 0xFF	; 255
   111b8:	0c 17       	cp	r16, r28
   111ba:	1d 07       	cpc	r17, r29
   111bc:	99 f7       	brne	.-26     	; 0x111a4 <thermostat_ring_get_name(unsigned char, char*)+0x20>
   111be:	df 91       	pop	r29
   111c0:	cf 91       	pop	r28
   111c2:	1f 91       	pop	r17
   111c4:	0f 91       	pop	r16
   111c6:	ff 90       	pop	r15
   111c8:	ef 90       	pop	r14
   111ca:	08 95       	ret

000111cc <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
   111cc:	df 92       	push	r13
   111ce:	ef 92       	push	r14
   111d0:	ff 92       	push	r15
   111d2:	0f 93       	push	r16
   111d4:	1f 93       	push	r17
   111d6:	cf 93       	push	r28
   111d8:	df 93       	push	r29
   111da:	91 e2       	ldi	r25, 0x21	; 33
   111dc:	89 9f       	mul	r24, r25
   111de:	e0 01       	movw	r28, r0
   111e0:	11 24       	eor	r1, r1
   111e2:	7b 01       	movw	r14, r22
   111e4:	8e 01       	movw	r16, r28
   111e6:	04 5b       	subi	r16, 0xB4	; 180
   111e8:	1e 4f       	sbci	r17, 0xFE	; 254
   111ea:	cb 5a       	subi	r28, 0xAB	; 171
   111ec:	de 4f       	sbci	r29, 0xFE	; 254
   111ee:	f7 01       	movw	r30, r14
   111f0:	d1 90       	ld	r13, Z+
   111f2:	7f 01       	movw	r14, r30
   111f4:	6d 2d       	mov	r22, r13
   111f6:	c8 01       	movw	r24, r16
   111f8:	0e 94 c1 87 	call	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   111fc:	dd 20       	and	r13, r13
   111fe:	29 f0       	breq	.+10     	; 0x1120a <thermostat_ring_set_name(unsigned char, char*)+0x3e>
   11200:	0f 5f       	subi	r16, 0xFF	; 255
   11202:	1f 4f       	sbci	r17, 0xFF	; 255
   11204:	0c 17       	cp	r16, r28
   11206:	1d 07       	cpc	r17, r29
   11208:	91 f7       	brne	.-28     	; 0x111ee <thermostat_ring_set_name(unsigned char, char*)+0x22>
   1120a:	df 91       	pop	r29
   1120c:	cf 91       	pop	r28
   1120e:	1f 91       	pop	r17
   11210:	0f 91       	pop	r16
   11212:	ff 90       	pop	r15
   11214:	ef 90       	pop	r14
   11216:	df 90       	pop	r13
   11218:	08 95       	ret

0001121a <thermostat_ring_get_output(unsigned char)>:
_Z26thermostat_ring_get_outputh():
   1121a:	21 e2       	ldi	r18, 0x21	; 33
   1121c:	82 9f       	mul	r24, r18
   1121e:	c0 01       	movw	r24, r0
   11220:	11 24       	eor	r1, r1
   11222:	81 5a       	subi	r24, 0xA1	; 161
   11224:	9e 4f       	sbci	r25, 0xFE	; 254
   11226:	0c 94 bf 87 	jmp	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>

0001122a <thermostat_ring_set_output(unsigned char, unsigned char)>:
_Z26thermostat_ring_set_outputhh():
   1122a:	21 e2       	ldi	r18, 0x21	; 33
   1122c:	82 9f       	mul	r24, r18
   1122e:	c0 01       	movw	r24, r0
   11230:	11 24       	eor	r1, r1
   11232:	81 5a       	subi	r24, 0xA1	; 161
   11234:	9e 4f       	sbci	r25, 0xFE	; 254
   11236:	0c 94 c1 87 	jmp	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

0001123a <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
   1123a:	21 e2       	ldi	r18, 0x21	; 33
   1123c:	82 9f       	mul	r24, r18
   1123e:	c0 01       	movw	r24, r0
   11240:	11 24       	eor	r1, r1
   11242:	83 5a       	subi	r24, 0xA3	; 163
   11244:	9e 4f       	sbci	r25, 0xFE	; 254
   11246:	0c 94 bf 87 	jmp	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>

0001124a <thermostat_ring_set_active(unsigned char, unsigned char)>:
_Z26thermostat_ring_set_activehh():
   1124a:	21 e2       	ldi	r18, 0x21	; 33
   1124c:	82 9f       	mul	r24, r18
   1124e:	c0 01       	movw	r24, r0
   11250:	11 24       	eor	r1, r1
   11252:	83 5a       	subi	r24, 0xA3	; 163
   11254:	9e 4f       	sbci	r25, 0xFE	; 254
   11256:	0c 94 c1 87 	jmp	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

0001125a <thermostat_ring_get_program_id(unsigned char)>:
_Z30thermostat_ring_get_program_idh():
   1125a:	21 e2       	ldi	r18, 0x21	; 33
   1125c:	82 9f       	mul	r24, r18
   1125e:	c0 01       	movw	r24, r0
   11260:	11 24       	eor	r1, r1
   11262:	85 5a       	subi	r24, 0xA5	; 165
   11264:	9e 4f       	sbci	r25, 0xFE	; 254
   11266:	0c 94 bf 87 	jmp	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>

0001126a <thermostat_ring_set_program_id(unsigned char, unsigned char)>:
_Z30thermostat_ring_set_program_idhh():
   1126a:	21 e2       	ldi	r18, 0x21	; 33
   1126c:	82 9f       	mul	r24, r18
   1126e:	c0 01       	movw	r24, r0
   11270:	11 24       	eor	r1, r1
   11272:	85 5a       	subi	r24, 0xA5	; 165
   11274:	9e 4f       	sbci	r25, 0xFE	; 254
   11276:	0c 94 c1 87 	jmp	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

0001127a <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
   1127a:	0f 93       	push	r16
   1127c:	1f 93       	push	r17
   1127e:	cf 93       	push	r28
   11280:	91 e2       	ldi	r25, 0x21	; 33
   11282:	89 9f       	mul	r24, r25
   11284:	80 01       	movw	r16, r0
   11286:	11 24       	eor	r1, r1
   11288:	c8 01       	movw	r24, r16
   1128a:	8a 5a       	subi	r24, 0xAA	; 170
   1128c:	9e 4f       	sbci	r25, 0xFE	; 254
   1128e:	0e 94 bf 87 	call	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>
   11292:	c8 2f       	mov	r28, r24
   11294:	c8 01       	movw	r24, r16
   11296:	89 5a       	subi	r24, 0xA9	; 169
   11298:	9e 4f       	sbci	r25, 0xFE	; 254
   1129a:	0e 94 bf 87 	call	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>
   1129e:	2c 2f       	mov	r18, r28
   112a0:	30 e0       	ldi	r19, 0x00	; 0
   112a2:	32 2f       	mov	r19, r18
   112a4:	22 27       	eor	r18, r18
   112a6:	82 0f       	add	r24, r18
   112a8:	93 2f       	mov	r25, r19
   112aa:	91 1d       	adc	r25, r1
   112ac:	cf 91       	pop	r28
   112ae:	1f 91       	pop	r17
   112b0:	0f 91       	pop	r16
   112b2:	08 95       	ret

000112b4 <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
   112b4:	1f 93       	push	r17
   112b6:	cf 93       	push	r28
   112b8:	df 93       	push	r29
   112ba:	16 2f       	mov	r17, r22
   112bc:	67 2f       	mov	r22, r23
   112be:	91 e2       	ldi	r25, 0x21	; 33
   112c0:	89 9f       	mul	r24, r25
   112c2:	e0 01       	movw	r28, r0
   112c4:	11 24       	eor	r1, r1
   112c6:	ce 01       	movw	r24, r28
   112c8:	8a 5a       	subi	r24, 0xAA	; 170
   112ca:	9e 4f       	sbci	r25, 0xFE	; 254
   112cc:	0e 94 c1 87 	call	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   112d0:	61 2f       	mov	r22, r17
   112d2:	ce 01       	movw	r24, r28
   112d4:	89 5a       	subi	r24, 0xA9	; 169
   112d6:	9e 4f       	sbci	r25, 0xFE	; 254
   112d8:	df 91       	pop	r29
   112da:	cf 91       	pop	r28
   112dc:	1f 91       	pop	r17
   112de:	0c 94 c1 87 	jmp	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

000112e2 <thermostat_ring_get_asociate_tds(unsigned char)>:
_Z32thermostat_ring_get_asociate_tdsh():
   112e2:	21 e2       	ldi	r18, 0x21	; 33
   112e4:	82 9f       	mul	r24, r18
   112e6:	c0 01       	movw	r24, r0
   112e8:	11 24       	eor	r1, r1
   112ea:	84 5a       	subi	r24, 0xA4	; 164
   112ec:	9e 4f       	sbci	r25, 0xFE	; 254
   112ee:	0c 94 bf 87 	jmp	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>

000112f2 <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>:
_Z32thermostat_ring_set_asociate_tdshh():
   112f2:	21 e2       	ldi	r18, 0x21	; 33
   112f4:	82 9f       	mul	r24, r18
   112f6:	c0 01       	movw	r24, r0
   112f8:	11 24       	eor	r1, r1
   112fa:	84 5a       	subi	r24, 0xA4	; 164
   112fc:	9e 4f       	sbci	r25, 0xFE	; 254
   112fe:	0c 94 c1 87 	jmp	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011302 <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
   11302:	21 e2       	ldi	r18, 0x21	; 33
   11304:	82 9f       	mul	r24, r18
   11306:	c0 01       	movw	r24, r0
   11308:	11 24       	eor	r1, r1
   1130a:	82 5a       	subi	r24, 0xA2	; 162
   1130c:	9e 4f       	sbci	r25, 0xFE	; 254
   1130e:	0c 94 bf 87 	jmp	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>

00011312 <thermostat_ring_set_mode(unsigned char, unsigned char)>:
_Z24thermostat_ring_set_modehh():
   11312:	21 e2       	ldi	r18, 0x21	; 33
   11314:	82 9f       	mul	r24, r18
   11316:	c0 01       	movw	r24, r0
   11318:	11 24       	eor	r1, r1
   1131a:	82 5a       	subi	r24, 0xA2	; 162
   1131c:	9e 4f       	sbci	r25, 0xFE	; 254
   1131e:	0c 94 c1 87 	jmp	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011322 <thermostat_ring_get_mode_1(unsigned char, unsigned char)>:
_Z26thermostat_ring_get_mode_1hh():
   11322:	cf 93       	push	r28
   11324:	c6 2f       	mov	r28, r22
   11326:	0e 94 81 89 	call	0x11302	; 0x11302 <thermostat_ring_get_mode(unsigned char)>
   1132a:	91 e0       	ldi	r25, 0x01	; 1
   1132c:	8c 13       	cpse	r24, r28
   1132e:	90 e0       	ldi	r25, 0x00	; 0
   11330:	89 2f       	mov	r24, r25
   11332:	cf 91       	pop	r28
   11334:	08 95       	ret

00011336 <thermostat_ring_get_status_data(unsigned char)>:
_Z31thermostat_ring_get_status_datah():
   11336:	21 e2       	ldi	r18, 0x21	; 33
   11338:	82 9f       	mul	r24, r18
   1133a:	c0 01       	movw	r24, r0
   1133c:	11 24       	eor	r1, r1
   1133e:	88 5a       	subi	r24, 0xA8	; 168
   11340:	9e 4f       	sbci	r25, 0xFE	; 254
   11342:	0c 94 bf 87 	jmp	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>

00011346 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>:
_Z32thermostat_ring_set_status_biteshh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   11346:	21 e2       	ldi	r18, 0x21	; 33
   11348:	82 9f       	mul	r24, r18
   1134a:	c0 01       	movw	r24, r0
   1134c:	11 24       	eor	r1, r1
   1134e:	88 5a       	subi	r24, 0xA8	; 168
   11350:	9e 4f       	sbci	r25, 0xFE	; 254
   11352:	0c 94 c1 87 	jmp	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011356 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>:
_Z28thermostat_ring_update_biteshhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:204
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
   11356:	1f 93       	push	r17
   11358:	cf 93       	push	r28
   1135a:	df 93       	push	r29
   1135c:	c8 2f       	mov	r28, r24
   1135e:	16 2f       	mov	r17, r22
   11360:	d4 2f       	mov	r29, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:205
  uint8_t b = thermostat_ring_get_status_data(idx);
   11362:	0e 94 9b 89 	call	0x11336	; 0x11336 <thermostat_ring_get_status_data(unsigned char)>
   11366:	61 e0       	ldi	r22, 0x01	; 1
   11368:	70 e0       	ldi	r23, 0x00	; 0
   1136a:	01 c0       	rjmp	.+2      	; 0x1136e <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x18>
   1136c:	66 0f       	add	r22, r22
   1136e:	1a 95       	dec	r17
   11370:	ea f7       	brpl	.-6      	; 0x1136c <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x16>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:206
  if (sets == 0) cbi(b, bits);
   11372:	d1 11       	cpse	r29, r1
   11374:	08 c0       	rjmp	.+16     	; 0x11386 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x30>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:206 (discriminator 1)
   11376:	60 95       	com	r22
   11378:	68 23       	and	r22, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:208
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
   1137a:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:209
}
   1137c:	df 91       	pop	r29
   1137e:	cf 91       	pop	r28
   11380:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:208
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
   11382:	0c 94 a3 89 	jmp	0x11346	; 0x11346 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   11386:	68 2b       	or	r22, r24
   11388:	f8 cf       	rjmp	.-16     	; 0x1137a <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x24>

0001138a <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
   1138a:	af 92       	push	r10
   1138c:	bf 92       	push	r11
   1138e:	cf 92       	push	r12
   11390:	df 92       	push	r13
   11392:	ef 92       	push	r14
   11394:	ff 92       	push	r15
   11396:	0f 93       	push	r16
   11398:	1f 93       	push	r17
   1139a:	cf 93       	push	r28
   1139c:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
   1139e:	c8 2f       	mov	r28, r24
   113a0:	d0 e0       	ldi	r29, 0x00	; 0
   113a2:	5e 01       	movw	r10, r28
   113a4:	aa 0c       	add	r10, r10
   113a6:	bb 1c       	adc	r11, r11
   113a8:	ce 01       	movw	r24, r28
   113aa:	88 0f       	add	r24, r24
   113ac:	99 1f       	adc	r25, r25
   113ae:	88 0f       	add	r24, r24
   113b0:	99 1f       	adc	r25, r25
   113b2:	fc 01       	movw	r30, r24
   113b4:	ea 5b       	subi	r30, 0xBA	; 186
   113b6:	ff 4e       	sbci	r31, 0xEF	; 239
   113b8:	c0 80       	ld	r12, Z
   113ba:	d1 80       	ldd	r13, Z+1	; 0x01
   113bc:	e2 80       	ldd	r14, Z+2	; 0x02
   113be:	f3 80       	ldd	r15, Z+3	; 0x03
   113c0:	fc 01       	movw	r30, r24
   113c2:	e6 5a       	subi	r30, 0xA6	; 166
   113c4:	ff 4e       	sbci	r31, 0xEF	; 239
   113c6:	00 81       	ld	r16, Z
   113c8:	11 81       	ldd	r17, Z+1	; 0x01
   113ca:	22 81       	ldd	r18, Z+2	; 0x02
   113cc:	33 81       	ldd	r19, Z+3	; 0x03
   113ce:	82 59       	subi	r24, 0x92	; 146
   113d0:	9f 4e       	sbci	r25, 0xEF	; 239
   113d2:	fc 01       	movw	r30, r24
   113d4:	40 81       	ld	r20, Z
   113d6:	51 81       	ldd	r21, Z+1	; 0x01
   113d8:	62 81       	ldd	r22, Z+2	; 0x02
   113da:	73 81       	ldd	r23, Z+3	; 0x03
   113dc:	e0 91 35 10 	lds	r30, 0x1035	; 0x801035 <array_pids>
   113e0:	f0 91 36 10 	lds	r31, 0x1036	; 0x801036 <array_pids+0x1>
   113e4:	ea 0d       	add	r30, r10
   113e6:	fb 1d       	adc	r31, r11
   113e8:	80 81       	ld	r24, Z
   113ea:	91 81       	ldd	r25, Z+1	; 0x01
   113ec:	0e 94 fa b4 	call	0x169f4	; 0x169f4 <PID::SetTunings(double, double, double)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
   113f0:	cf 5b       	subi	r28, 0xBF	; 191
   113f2:	df 4e       	sbci	r29, 0xEF	; 239
   113f4:	68 81       	ld	r22, Y
   113f6:	70 e0       	ldi	r23, 0x00	; 0
   113f8:	80 91 35 10 	lds	r24, 0x1035	; 0x801035 <array_pids>
   113fc:	90 91 36 10 	lds	r25, 0x1036	; 0x801036 <array_pids+0x1>
   11400:	a8 0e       	add	r10, r24
   11402:	b9 1e       	adc	r11, r25
   11404:	f5 01       	movw	r30, r10
   11406:	80 81       	ld	r24, Z
   11408:	91 81       	ldd	r25, Z+1	; 0x01
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:221
}
   1140a:	df 91       	pop	r29
   1140c:	cf 91       	pop	r28
   1140e:	1f 91       	pop	r17
   11410:	0f 91       	pop	r16
   11412:	ff 90       	pop	r15
   11414:	ef 90       	pop	r14
   11416:	df 90       	pop	r13
   11418:	cf 90       	pop	r12
   1141a:	bf 90       	pop	r11
   1141c:	af 90       	pop	r10
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:220


void thermostat_ring_update_pid_parameters(uint8_t idx)
{
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
  array_pids[idx]->SetSampleTime(PID_time[idx]);
   1141e:	0c 94 10 b5 	jmp	0x16a20	; 0x16a20 <PID::SetSampleTime(int)>

00011422 <thermostat_ring_get_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_get_pid_eepromh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:224
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
   11422:	ef 92       	push	r14
   11424:	ff 92       	push	r15
   11426:	0f 93       	push	r16
   11428:	1f 93       	push	r17
   1142a:	cf 93       	push	r28
   1142c:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:225
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
   1142e:	e8 2e       	mov	r14, r24
   11430:	f1 2c       	mov	r15, r1
   11432:	91 e2       	ldi	r25, 0x21	; 33
   11434:	89 9f       	mul	r24, r25
   11436:	e0 01       	movw	r28, r0
   11438:	11 24       	eor	r1, r1
   1143a:	ce 01       	movw	r24, r28
   1143c:	80 5a       	subi	r24, 0xA0	; 160
   1143e:	9e 4f       	sbci	r25, 0xFE	; 254
   11440:	0e 94 18 b3 	call	0x16630	; 0x16630 <EEPROMreadFloat(unsigned int)>
   11444:	87 01       	movw	r16, r14
   11446:	00 0f       	add	r16, r16
   11448:	11 1f       	adc	r17, r17
   1144a:	00 0f       	add	r16, r16
   1144c:	11 1f       	adc	r17, r17
   1144e:	f8 01       	movw	r30, r16
   11450:	e2 59       	subi	r30, 0x92	; 146
   11452:	ff 4e       	sbci	r31, 0xEF	; 239
   11454:	60 83       	st	Z, r22
   11456:	71 83       	std	Z+1, r23	; 0x01
   11458:	82 83       	std	Z+2, r24	; 0x02
   1145a:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
   1145c:	ce 01       	movw	r24, r28
   1145e:	8c 59       	subi	r24, 0x9C	; 156
   11460:	9e 4f       	sbci	r25, 0xFE	; 254
   11462:	0e 94 18 b3 	call	0x16630	; 0x16630 <EEPROMreadFloat(unsigned int)>
   11466:	f8 01       	movw	r30, r16
   11468:	e6 5a       	subi	r30, 0xA6	; 166
   1146a:	ff 4e       	sbci	r31, 0xEF	; 239
   1146c:	60 83       	st	Z, r22
   1146e:	71 83       	std	Z+1, r23	; 0x01
   11470:	82 83       	std	Z+2, r24	; 0x02
   11472:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
   11474:	ce 01       	movw	r24, r28
   11476:	88 59       	subi	r24, 0x98	; 152
   11478:	9e 4f       	sbci	r25, 0xFE	; 254
   1147a:	0e 94 18 b3 	call	0x16630	; 0x16630 <EEPROMreadFloat(unsigned int)>
   1147e:	f8 01       	movw	r30, r16
   11480:	ea 5b       	subi	r30, 0xBA	; 186
   11482:	ff 4e       	sbci	r31, 0xEF	; 239
   11484:	60 83       	st	Z, r22
   11486:	71 83       	std	Z+1, r23	; 0x01
   11488:	82 83       	std	Z+2, r24	; 0x02
   1148a:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
   1148c:	ce 01       	movw	r24, r28
   1148e:	84 59       	subi	r24, 0x94	; 148
   11490:	9e 4f       	sbci	r25, 0xFE	; 254
   11492:	0e 94 bf 87 	call	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>
   11496:	f7 01       	movw	r30, r14
   11498:	ef 5b       	subi	r30, 0xBF	; 191
   1149a:	ff 4e       	sbci	r31, 0xEF	; 239
   1149c:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:229
}
   1149e:	df 91       	pop	r29
   114a0:	cf 91       	pop	r28
   114a2:	1f 91       	pop	r17
   114a4:	0f 91       	pop	r16
   114a6:	ff 90       	pop	r15
   114a8:	ef 90       	pop	r14
   114aa:	08 95       	ret

000114ac <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:232

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
   114ac:	ef 92       	push	r14
   114ae:	ff 92       	push	r15
   114b0:	0f 93       	push	r16
   114b2:	1f 93       	push	r17
   114b4:	cf 93       	push	r28
   114b6:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
   114b8:	e8 2e       	mov	r14, r24
   114ba:	f1 2c       	mov	r15, r1
   114bc:	91 e2       	ldi	r25, 0x21	; 33
   114be:	89 9f       	mul	r24, r25
   114c0:	e0 01       	movw	r28, r0
   114c2:	11 24       	eor	r1, r1
   114c4:	87 01       	movw	r16, r14
   114c6:	00 0f       	add	r16, r16
   114c8:	11 1f       	adc	r17, r17
   114ca:	00 0f       	add	r16, r16
   114cc:	11 1f       	adc	r17, r17
   114ce:	f8 01       	movw	r30, r16
   114d0:	e2 59       	subi	r30, 0x92	; 146
   114d2:	ff 4e       	sbci	r31, 0xEF	; 239
   114d4:	40 81       	ld	r20, Z
   114d6:	51 81       	ldd	r21, Z+1	; 0x01
   114d8:	62 81       	ldd	r22, Z+2	; 0x02
   114da:	73 81       	ldd	r23, Z+3	; 0x03
   114dc:	ce 01       	movw	r24, r28
   114de:	80 5a       	subi	r24, 0xA0	; 160
   114e0:	9e 4f       	sbci	r25, 0xFE	; 254
   114e2:	0e 94 4a b3 	call	0x16694	; 0x16694 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
   114e6:	f8 01       	movw	r30, r16
   114e8:	e6 5a       	subi	r30, 0xA6	; 166
   114ea:	ff 4e       	sbci	r31, 0xEF	; 239
   114ec:	40 81       	ld	r20, Z
   114ee:	51 81       	ldd	r21, Z+1	; 0x01
   114f0:	62 81       	ldd	r22, Z+2	; 0x02
   114f2:	73 81       	ldd	r23, Z+3	; 0x03
   114f4:	ce 01       	movw	r24, r28
   114f6:	8c 59       	subi	r24, 0x9C	; 156
   114f8:	9e 4f       	sbci	r25, 0xFE	; 254
   114fa:	0e 94 4a b3 	call	0x16694	; 0x16694 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
   114fe:	f8 01       	movw	r30, r16
   11500:	ea 5b       	subi	r30, 0xBA	; 186
   11502:	ff 4e       	sbci	r31, 0xEF	; 239
   11504:	40 81       	ld	r20, Z
   11506:	51 81       	ldd	r21, Z+1	; 0x01
   11508:	62 81       	ldd	r22, Z+2	; 0x02
   1150a:	73 81       	ldd	r23, Z+3	; 0x03
   1150c:	ce 01       	movw	r24, r28
   1150e:	88 59       	subi	r24, 0x98	; 152
   11510:	9e 4f       	sbci	r25, 0xFE	; 254
   11512:	0e 94 4a b3 	call	0x16694	; 0x16694 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
   11516:	f7 01       	movw	r30, r14
   11518:	ef 5b       	subi	r30, 0xBF	; 191
   1151a:	ff 4e       	sbci	r31, 0xEF	; 239
   1151c:	60 81       	ld	r22, Z
   1151e:	ce 01       	movw	r24, r28
   11520:	84 59       	subi	r24, 0x94	; 148
   11522:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:237
}
   11524:	df 91       	pop	r29
   11526:	cf 91       	pop	r28
   11528:	1f 91       	pop	r17
   1152a:	0f 91       	pop	r16
   1152c:	ff 90       	pop	r15
   1152e:	ef 90       	pop	r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
   11530:	0c 94 c1 87 	jmp	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011534 <thermostat_ring_pid_set_kp(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kphf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:240
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
   11534:	cf 93       	push	r28
   11536:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  PID_p[id] = x;
   11538:	84 e0       	ldi	r24, 0x04	; 4
   1153a:	c8 9f       	mul	r28, r24
   1153c:	f0 01       	movw	r30, r0
   1153e:	11 24       	eor	r1, r1
   11540:	e2 59       	subi	r30, 0x92	; 146
   11542:	ff 4e       	sbci	r31, 0xEF	; 239
   11544:	40 83       	st	Z, r20
   11546:	51 83       	std	Z+1, r21	; 0x01
   11548:	62 83       	std	Z+2, r22	; 0x02
   1154a:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
   1154c:	8c 2f       	mov	r24, r28
   1154e:	0e 94 c5 89 	call	0x1138a	; 0x1138a <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
   11552:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:244
}
   11554:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   11556:	0c 94 56 8a 	jmp	0x114ac	; 0x114ac <thermostat_ring_set_pid_eeprom(unsigned char)>

0001155a <thermostat_ring_pid_set_ki(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kihf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:246
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
   1155a:	cf 93       	push	r28
   1155c:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
  PID_i[id] = x;
   1155e:	84 e0       	ldi	r24, 0x04	; 4
   11560:	c8 9f       	mul	r28, r24
   11562:	f0 01       	movw	r30, r0
   11564:	11 24       	eor	r1, r1
   11566:	e6 5a       	subi	r30, 0xA6	; 166
   11568:	ff 4e       	sbci	r31, 0xEF	; 239
   1156a:	40 83       	st	Z, r20
   1156c:	51 83       	std	Z+1, r21	; 0x01
   1156e:	62 83       	std	Z+2, r22	; 0x02
   11570:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
   11572:	8c 2f       	mov	r24, r28
   11574:	0e 94 c5 89 	call	0x1138a	; 0x1138a <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
   11578:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:250
}
   1157a:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   1157c:	0c 94 56 8a 	jmp	0x114ac	; 0x114ac <thermostat_ring_set_pid_eeprom(unsigned char)>

00011580 <thermostat_ring_pid_set_kd(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kdhf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:252
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
   11580:	cf 93       	push	r28
   11582:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
  PID_d[id] = x;
   11584:	84 e0       	ldi	r24, 0x04	; 4
   11586:	c8 9f       	mul	r28, r24
   11588:	f0 01       	movw	r30, r0
   1158a:	11 24       	eor	r1, r1
   1158c:	ea 5b       	subi	r30, 0xBA	; 186
   1158e:	ff 4e       	sbci	r31, 0xEF	; 239
   11590:	40 83       	st	Z, r20
   11592:	51 83       	std	Z+1, r21	; 0x01
   11594:	62 83       	std	Z+2, r22	; 0x02
   11596:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
   11598:	8c 2f       	mov	r24, r28
   1159a:	0e 94 c5 89 	call	0x1138a	; 0x1138a <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
   1159e:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:256
}
   115a0:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   115a2:	0c 94 56 8a 	jmp	0x114ac	; 0x114ac <thermostat_ring_set_pid_eeprom(unsigned char)>

000115a6 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>:
_Z28thermostat_ring_pid_set_timehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:259
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
   115a6:	cf 93       	push	r28
   115a8:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
  PID_time[id] = timer;
   115aa:	e8 2f       	mov	r30, r24
   115ac:	f0 e0       	ldi	r31, 0x00	; 0
   115ae:	ef 5b       	subi	r30, 0xBF	; 191
   115b0:	ff 4e       	sbci	r31, 0xEF	; 239
   115b2:	60 83       	st	Z, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
   115b4:	0e 94 c5 89 	call	0x1138a	; 0x1138a <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
   115b8:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:263
}
   115ba:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   115bc:	0c 94 56 8a 	jmp	0x114ac	; 0x114ac <thermostat_ring_set_pid_eeprom(unsigned char)>

000115c0 <thermostat_program_get_name(unsigned char, char*)>:
_Z27thermostat_program_get_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:270


//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
   115c0:	ef 92       	push	r14
   115c2:	ff 92       	push	r15
   115c4:	0f 93       	push	r16
   115c6:	1f 93       	push	r17
   115c8:	cf 93       	push	r28
   115ca:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:274
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
   115cc:	9d e4       	ldi	r25, 0x4D	; 77
   115ce:	89 9f       	mul	r24, r25
   115d0:	e0 01       	movw	r28, r0
   115d2:	11 24       	eor	r1, r1
   115d4:	8e 01       	movw	r16, r28
   115d6:	0c 5c       	subi	r16, 0xCC	; 204
   115d8:	1d 4f       	sbci	r17, 0xFD	; 253
   115da:	7b 01       	movw	r14, r22
   115dc:	c2 5c       	subi	r28, 0xC2	; 194
   115de:	dd 4f       	sbci	r29, 0xFD	; 253
   115e0:	c8 01       	movw	r24, r16
   115e2:	0e 94 bf 87 	call	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:275
    name[i] = t;
   115e6:	f7 01       	movw	r30, r14
   115e8:	81 93       	st	Z+, r24
   115ea:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:276
    if (t == 0) break;
   115ec:	88 23       	and	r24, r24
   115ee:	29 f0       	breq	.+10     	; 0x115fa <thermostat_program_get_name(unsigned char, char*)+0x3a>
   115f0:	0f 5f       	subi	r16, 0xFF	; 255
   115f2:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:272 (discriminator 2)
//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   115f4:	0c 17       	cp	r16, r28
   115f6:	1d 07       	cpc	r17, r29
   115f8:	99 f7       	brne	.-26     	; 0x115e0 <thermostat_program_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:278
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
    name[i] = t;
    if (t == 0) break;
  }
}
   115fa:	df 91       	pop	r29
   115fc:	cf 91       	pop	r28
   115fe:	1f 91       	pop	r17
   11600:	0f 91       	pop	r16
   11602:	ff 90       	pop	r15
   11604:	ef 90       	pop	r14
   11606:	08 95       	ret

00011608 <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:281
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
   11608:	ef 92       	push	r14
   1160a:	ff 92       	push	r15
   1160c:	0f 93       	push	r16
   1160e:	1f 93       	push	r17
   11610:	cf 93       	push	r28
   11612:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
   11614:	9d e4       	ldi	r25, 0x4D	; 77
   11616:	89 9f       	mul	r24, r25
   11618:	80 01       	movw	r16, r0
   1161a:	11 24       	eor	r1, r1
   1161c:	eb 01       	movw	r28, r22
   1161e:	78 01       	movw	r14, r16
   11620:	8c ec       	ldi	r24, 0xCC	; 204
   11622:	e8 1a       	sub	r14, r24
   11624:	8d ef       	ldi	r24, 0xFD	; 253
   11626:	f8 0a       	sbc	r15, r24
   11628:	02 5c       	subi	r16, 0xC2	; 194
   1162a:	1d 4f       	sbci	r17, 0xFD	; 253
   1162c:	69 91       	ld	r22, Y+
   1162e:	c7 01       	movw	r24, r14
   11630:	0e 94 c1 87 	call	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
   11634:	fe 01       	movw	r30, r28
   11636:	31 97       	sbiw	r30, 0x01	; 1
   11638:	80 81       	ld	r24, Z
   1163a:	88 23       	and	r24, r24
   1163c:	31 f0       	breq	.+12     	; 0x1164a <thermostat_program_set_name(unsigned char, char*)+0x42>
   1163e:	9f ef       	ldi	r25, 0xFF	; 255
   11640:	e9 1a       	sub	r14, r25
   11642:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:282 (discriminator 2)
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   11644:	e0 16       	cp	r14, r16
   11646:	f1 06       	cpc	r15, r17
   11648:	89 f7       	brne	.-30     	; 0x1162c <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
   1164a:	df 91       	pop	r29
   1164c:	cf 91       	pop	r28
   1164e:	1f 91       	pop	r17
   11650:	0f 91       	pop	r16
   11652:	ff 90       	pop	r15
   11654:	ef 90       	pop	r14
   11656:	08 95       	ret

00011658 <thermostat_program_get_active(unsigned char)>:
_Z29thermostat_program_get_activeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:291
//// globalni povoleni programu a nastaveni rezimu
uint8_t thermostat_program_get_active(uint8_t program_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
   11658:	2d e4       	ldi	r18, 0x4D	; 77
   1165a:	82 9f       	mul	r24, r18
   1165c:	c0 01       	movw	r24, r0
   1165e:	11 24       	eor	r1, r1
   11660:	8f 50       	subi	r24, 0x0F	; 15
   11662:	9e 4f       	sbci	r25, 0xFE	; 254
   11664:	0c 94 bf 87 	jmp	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>

00011668 <thermostat_program_set_active(unsigned char, unsigned char)>:
_Z29thermostat_program_set_activehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   11668:	2d e4       	ldi	r18, 0x4D	; 77
   1166a:	82 9f       	mul	r24, r18
   1166c:	c0 01       	movw	r24, r0
   1166e:	11 24       	eor	r1, r1
   11670:	8f 50       	subi	r24, 0x0F	; 15
   11672:	9e 4f       	sbci	r25, 0xFE	; 254
   11674:	0c 94 c1 87 	jmp	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011678 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>:
_Z27thermostat_program_get_timehhPhS_S_S_S_():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:301
}


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
   11678:	7f 92       	push	r7
   1167a:	8f 92       	push	r8
   1167c:	9f 92       	push	r9
   1167e:	af 92       	push	r10
   11680:	bf 92       	push	r11
   11682:	cf 92       	push	r12
   11684:	df 92       	push	r13
   11686:	ef 92       	push	r14
   11688:	ff 92       	push	r15
   1168a:	0f 93       	push	r16
   1168c:	1f 93       	push	r17
   1168e:	cf 93       	push	r28
   11690:	df 93       	push	r29
   11692:	5a 01       	movw	r10, r20
   11694:	e9 01       	movw	r28, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:302
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
   11696:	9d e4       	ldi	r25, 0x4D	; 77
   11698:	89 9f       	mul	r24, r25
   1169a:	40 01       	movw	r8, r0
   1169c:	11 24       	eor	r1, r1
   1169e:	ef e0       	ldi	r30, 0x0F	; 15
   116a0:	8e 1a       	sub	r8, r30
   116a2:	ee ef       	ldi	r30, 0xFE	; 254
   116a4:	9e 0a       	sbc	r9, r30
   116a6:	f6 e0       	ldi	r31, 0x06	; 6
   116a8:	6f 9f       	mul	r22, r31
   116aa:	80 0c       	add	r8, r0
   116ac:	91 1c       	adc	r9, r1
   116ae:	11 24       	eor	r1, r1
   116b0:	c4 01       	movw	r24, r8
   116b2:	02 96       	adiw	r24, 0x02	; 2
   116b4:	0e 94 bf 87 	call	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>
   116b8:	78 2e       	mov	r7, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
   116ba:	c4 01       	movw	r24, r8
   116bc:	03 96       	adiw	r24, 0x03	; 3
   116be:	0e 94 bf 87 	call	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
   116c2:	97 2d       	mov	r25, r7
   116c4:	96 95       	lsr	r25
   116c6:	96 95       	lsr	r25
   116c8:	96 95       	lsr	r25
   116ca:	f5 01       	movw	r30, r10
   116cc:	90 83       	st	Z, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
   116ce:	27 2d       	mov	r18, r7
   116d0:	30 e0       	ldi	r19, 0x00	; 0
   116d2:	35 95       	asr	r19
   116d4:	27 95       	ror	r18
   116d6:	23 70       	andi	r18, 0x03	; 3
   116d8:	9f e0       	ldi	r25, 0x0F	; 15
   116da:	29 9f       	mul	r18, r25
   116dc:	20 2d       	mov	r18, r0
   116de:	11 24       	eor	r1, r1
   116e0:	28 83       	st	Y, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
   116e2:	28 2f       	mov	r18, r24
   116e4:	26 95       	lsr	r18
   116e6:	26 95       	lsr	r18
   116e8:	26 95       	lsr	r18
   116ea:	f8 01       	movw	r30, r16
   116ec:	20 83       	st	Z, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
   116ee:	83 70       	andi	r24, 0x03	; 3
   116f0:	89 9f       	mul	r24, r25
   116f2:	80 2d       	mov	r24, r0
   116f4:	11 24       	eor	r1, r1
   116f6:	f7 01       	movw	r30, r14
   116f8:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
   116fa:	87 2d       	mov	r24, r7
   116fc:	81 70       	andi	r24, 0x01	; 1
   116fe:	f6 01       	movw	r30, r12
   11700:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:309
}
   11702:	df 91       	pop	r29
   11704:	cf 91       	pop	r28
   11706:	1f 91       	pop	r17
   11708:	0f 91       	pop	r16
   1170a:	ff 90       	pop	r15
   1170c:	ef 90       	pop	r14
   1170e:	df 90       	pop	r13
   11710:	cf 90       	pop	r12
   11712:	bf 90       	pop	r11
   11714:	af 90       	pop	r10
   11716:	9f 90       	pop	r9
   11718:	8f 90       	pop	r8
   1171a:	7f 90       	pop	r7
   1171c:	08 95       	ret

0001171e <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:312
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
   1171e:	cf 92       	push	r12
   11720:	ef 92       	push	r14
   11722:	0f 93       	push	r16
   11724:	1f 93       	push	r17
   11726:	cf 93       	push	r28
   11728:	df 93       	push	r29
   1172a:	c8 2f       	mov	r28, r24
   1172c:	56 2f       	mov	r21, r22
   1172e:	8e 2d       	mov	r24, r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
   11730:	3f e0       	ldi	r19, 0x0F	; 15
   11732:	63 2f       	mov	r22, r19
   11734:	0e 94 46 d3 	call	0x1a68c	; 0x1a68c <__udivmodqi4>
   11738:	83 70       	andi	r24, 0x03	; 3
   1173a:	98 e0       	ldi	r25, 0x08	; 8
   1173c:	09 9f       	mul	r16, r25
   1173e:	80 01       	movw	r16, r0
   11740:	11 24       	eor	r1, r1
   11742:	08 0f       	add	r16, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
   11744:	8d e4       	ldi	r24, 0x4D	; 77
   11746:	c8 9f       	mul	r28, r24
   11748:	e0 01       	movw	r28, r0
   1174a:	11 24       	eor	r1, r1
   1174c:	cf 50       	subi	r28, 0x0F	; 15
   1174e:	de 4f       	sbci	r29, 0xFE	; 254
   11750:	96 e0       	ldi	r25, 0x06	; 6
   11752:	59 9f       	mul	r21, r25
   11754:	c0 0d       	add	r28, r0
   11756:	d1 1d       	adc	r29, r1
   11758:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
   1175a:	82 2f       	mov	r24, r18
   1175c:	0e 94 46 d3 	call	0x1a68c	; 0x1a68c <__udivmodqi4>
   11760:	68 2f       	mov	r22, r24
   11762:	66 0f       	add	r22, r22
   11764:	66 70       	andi	r22, 0x06	; 6
   11766:	88 e0       	ldi	r24, 0x08	; 8
   11768:	48 9f       	mul	r20, r24
   1176a:	a0 01       	movw	r20, r0
   1176c:	11 24       	eor	r1, r1
   1176e:	9c 2d       	mov	r25, r12
   11770:	91 70       	andi	r25, 0x01	; 1
   11772:	c9 2e       	mov	r12, r25
   11774:	c4 0e       	add	r12, r20
   11776:	6c 0d       	add	r22, r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
   11778:	ce 01       	movw	r24, r28
   1177a:	02 96       	adiw	r24, 0x02	; 2
   1177c:	0e 94 c1 87 	call	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
   11780:	60 2f       	mov	r22, r16
   11782:	ce 01       	movw	r24, r28
   11784:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:318
}
   11786:	df 91       	pop	r29
   11788:	cf 91       	pop	r28
   1178a:	1f 91       	pop	r17
   1178c:	0f 91       	pop	r16
   1178e:	ef 90       	pop	r14
   11790:	cf 90       	pop	r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
   11792:	0c 94 c1 87 	jmp	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011796 <thermostat_program_get_threshold(unsigned char, unsigned char)>:
_Z32thermostat_program_get_thresholdhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:323
}


//// ziska rozhodovaci uroven termostatu
uint16_t thermostat_program_get_threshold(uint8_t program_id, uint8_t interval_id)
{
   11796:	1f 93       	push	r17
   11798:	cf 93       	push	r28
   1179a:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:325
  uint16_t ret = 0;
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
   1179c:	9d e4       	ldi	r25, 0x4D	; 77
   1179e:	89 9f       	mul	r24, r25
   117a0:	e0 01       	movw	r28, r0
   117a2:	11 24       	eor	r1, r1
   117a4:	cf 50       	subi	r28, 0x0F	; 15
   117a6:	de 4f       	sbci	r29, 0xFE	; 254
   117a8:	86 e0       	ldi	r24, 0x06	; 6
   117aa:	68 9f       	mul	r22, r24
   117ac:	c0 0d       	add	r28, r0
   117ae:	d1 1d       	adc	r29, r1
   117b0:	11 24       	eor	r1, r1
   117b2:	ce 01       	movw	r24, r28
   117b4:	05 96       	adiw	r24, 0x05	; 5
   117b6:	0e 94 bf 87 	call	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>
   117ba:	18 2f       	mov	r17, r24
   117bc:	ce 01       	movw	r24, r28
   117be:	04 96       	adiw	r24, 0x04	; 4
   117c0:	0e 94 bf 87 	call	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>
   117c4:	21 2f       	mov	r18, r17
   117c6:	30 e0       	ldi	r19, 0x00	; 0
   117c8:	32 2f       	mov	r19, r18
   117ca:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:327
  return ret;
}
   117cc:	82 0f       	add	r24, r18
   117ce:	93 2f       	mov	r25, r19
   117d0:	91 1d       	adc	r25, r1
   117d2:	df 91       	pop	r29
   117d4:	cf 91       	pop	r28
   117d6:	1f 91       	pop	r17
   117d8:	08 95       	ret

000117da <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:330
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
   117da:	1f 93       	push	r17
   117dc:	cf 93       	push	r28
   117de:	df 93       	push	r29
   117e0:	14 2f       	mov	r17, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
   117e2:	9d e4       	ldi	r25, 0x4D	; 77
   117e4:	89 9f       	mul	r24, r25
   117e6:	e0 01       	movw	r28, r0
   117e8:	11 24       	eor	r1, r1
   117ea:	cf 50       	subi	r28, 0x0F	; 15
   117ec:	de 4f       	sbci	r29, 0xFE	; 254
   117ee:	86 e0       	ldi	r24, 0x06	; 6
   117f0:	68 9f       	mul	r22, r24
   117f2:	c0 0d       	add	r28, r0
   117f4:	d1 1d       	adc	r29, r1
   117f6:	11 24       	eor	r1, r1
   117f8:	65 2f       	mov	r22, r21
   117fa:	ce 01       	movw	r24, r28
   117fc:	05 96       	adiw	r24, 0x05	; 5
   117fe:	0e 94 c1 87 	call	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
   11802:	61 2f       	mov	r22, r17
   11804:	ce 01       	movw	r24, r28
   11806:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:333
}
   11808:	df 91       	pop	r29
   1180a:	cf 91       	pop	r28
   1180c:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
   1180e:	0c 94 c1 87 	jmp	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011812 <thermostat_program_get_week(unsigned char, unsigned char)>:
_Z27thermostat_program_get_weekhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   11812:	2d e4       	ldi	r18, 0x4D	; 77
   11814:	82 9f       	mul	r24, r18
   11816:	c0 01       	movw	r24, r0
   11818:	11 24       	eor	r1, r1
   1181a:	26 e0       	ldi	r18, 0x06	; 6
   1181c:	62 9f       	mul	r22, r18
   1181e:	80 0d       	add	r24, r0
   11820:	91 1d       	adc	r25, r1
   11822:	11 24       	eor	r1, r1
   11824:	8e 50       	subi	r24, 0x0E	; 14
   11826:	9e 4f       	sbci	r25, 0xFE	; 254
   11828:	0c 94 bf 87 	jmp	0x10f7e	; 0x10f7e <EEPROMClass::read(int) [clone .isra.0]>

0001182c <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:371
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
   1182c:	2d e4       	ldi	r18, 0x4D	; 77
   1182e:	82 9f       	mul	r24, r18
   11830:	c0 01       	movw	r24, r0
   11832:	11 24       	eor	r1, r1
   11834:	26 e0       	ldi	r18, 0x06	; 6
   11836:	62 9f       	mul	r22, r18
   11838:	80 0d       	add	r24, r0
   1183a:	91 1d       	adc	r25, r1
   1183c:	11 24       	eor	r1, r1
   1183e:	64 2f       	mov	r22, r20
   11840:	8e 50       	subi	r24, 0x0E	; 14
   11842:	9e 4f       	sbci	r25, 0xFE	; 254
   11844:	0c 94 c1 87 	jmp	0x10f82	; 0x10f82 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011848 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)>:
_Z37thermostat_program_set_parse_intervalhhPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:338
}


//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
   11848:	bf 92       	push	r11
   1184a:	cf 92       	push	r12
   1184c:	df 92       	push	r13
   1184e:	ef 92       	push	r14
   11850:	ff 92       	push	r15
   11852:	0f 93       	push	r16
   11854:	1f 93       	push	r17
   11856:	cf 93       	push	r28
   11858:	df 93       	push	r29
   1185a:	d8 2f       	mov	r29, r24
   1185c:	16 2f       	mov	r17, r22
   1185e:	ca 01       	movw	r24, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:343
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
   11860:	6f e7       	ldi	r22, 0x7F	; 127
   11862:	73 e0       	ldi	r23, 0x03	; 3
   11864:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
   11868:	f1 2c       	mov	r15, r1
   1186a:	c1 2c       	mov	r12, r1
   1186c:	e1 2c       	mov	r14, r1
   1186e:	00 e0       	ldi	r16, 0x00	; 0
   11870:	b1 2c       	mov	r11, r1
   11872:	d1 2c       	mov	r13, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
   11874:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
   11876:	00 97       	sbiw	r24, 0x00	; 0
   11878:	59 f1       	breq	.+86     	; 0x118d0 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x88>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
   1187a:	c1 11       	cpse	r28, r1
   1187c:	0b c0       	rjmp	.+22     	; 0x11894 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x4c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:346 (discriminator 1)
   1187e:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
   11882:	d8 2e       	mov	r13, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
   11884:	6f e7       	ldi	r22, 0x7F	; 127
   11886:	73 e0       	ldi	r23, 0x03	; 3
   11888:	90 e0       	ldi	r25, 0x00	; 0
   1188a:	80 e0       	ldi	r24, 0x00	; 0
   1188c:	0e 94 46 d7 	call	0x1ae8c	; 0x1ae8c <strtok>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:354
    cnt++;
   11890:	cf 5f       	subi	r28, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:344
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
   11892:	f1 cf       	rjmp	.-30     	; 0x11876 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x2e>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:347
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
   11894:	c1 30       	cpi	r28, 0x01	; 1
   11896:	21 f4       	brne	.+8      	; 0x118a0 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x58>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:347 (discriminator 1)
   11898:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
   1189c:	b8 2e       	mov	r11, r24
   1189e:	f2 cf       	rjmp	.-28     	; 0x11884 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
   118a0:	c2 30       	cpi	r28, 0x02	; 2
   118a2:	21 f4       	brne	.+8      	; 0x118ac <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x64>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:348 (discriminator 1)
   118a4:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
   118a8:	08 2f       	mov	r16, r24
   118aa:	ec cf       	rjmp	.-40     	; 0x11884 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
   118ac:	c3 30       	cpi	r28, 0x03	; 3
   118ae:	21 f4       	brne	.+8      	; 0x118b8 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x70>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:349 (discriminator 1)
   118b0:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
   118b4:	e8 2e       	mov	r14, r24
   118b6:	e6 cf       	rjmp	.-52     	; 0x11884 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
   118b8:	c4 30       	cpi	r28, 0x04	; 4
   118ba:	21 f4       	brne	.+8      	; 0x118c4 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x7c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:350 (discriminator 1)
   118bc:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
   118c0:	f8 2e       	mov	r15, r24
   118c2:	e0 cf       	rjmp	.-64     	; 0x11884 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
   118c4:	c5 30       	cpi	r28, 0x05	; 5
   118c6:	f1 f6       	brne	.-68     	; 0x11884 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:351 (discriminator 1)
   118c8:	0e 94 0d d7 	call	0x1ae1a	; 0x1ae1a <atoi>
   118cc:	c8 2e       	mov	r12, r24
   118ce:	da cf       	rjmp	.-76     	; 0x11884 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
   118d0:	c6 30       	cpi	r28, 0x06	; 6
   118d2:	a1 f4       	brne	.+40     	; 0x118fc <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0xb4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
   118d4:	2b 2d       	mov	r18, r11
   118d6:	4d 2d       	mov	r20, r13
   118d8:	61 2f       	mov	r22, r17
   118da:	8d 2f       	mov	r24, r29
   118dc:	0e 94 8f 8b 	call	0x1171e	; 0x1171e <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
   118e0:	4f 2d       	mov	r20, r15
   118e2:	61 2f       	mov	r22, r17
   118e4:	8d 2f       	mov	r24, r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:361
  }
}
   118e6:	df 91       	pop	r29
   118e8:	cf 91       	pop	r28
   118ea:	1f 91       	pop	r17
   118ec:	0f 91       	pop	r16
   118ee:	ff 90       	pop	r15
   118f0:	ef 90       	pop	r14
   118f2:	df 90       	pop	r13
   118f4:	cf 90       	pop	r12
   118f6:	bf 90       	pop	r11
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:359
    cnt++;
  }
  if (cnt == 6)
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    thermostat_program_set_week(program_id, interval_id, week);
   118f8:	0c 94 16 8c 	jmp	0x1182c	; 0x1182c <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:361
  }
}
   118fc:	df 91       	pop	r29
   118fe:	cf 91       	pop	r28
   11900:	1f 91       	pop	r17
   11902:	0f 91       	pop	r16
   11904:	ff 90       	pop	r15
   11906:	ef 90       	pop	r14
   11908:	df 90       	pop	r13
   1190a:	cf 90       	pop	r12
   1190c:	bf 90       	pop	r11
   1190e:	08 95       	ret

00011910 <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)>:
_Z38thermostat_program_set_interval_activehhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:377
}


/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
   11910:	9f 92       	push	r9
   11912:	af 92       	push	r10
   11914:	bf 92       	push	r11
   11916:	cf 92       	push	r12
   11918:	df 92       	push	r13
   1191a:	ef 92       	push	r14
   1191c:	ff 92       	push	r15
   1191e:	0f 93       	push	r16
   11920:	1f 93       	push	r17
   11922:	cf 93       	push	r28
   11924:	df 93       	push	r29
   11926:	00 d0       	rcall	.+0      	; 0x11928 <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)+0x18>
   11928:	1f 92       	push	r1
   1192a:	1f 92       	push	r1
   1192c:	cd b7       	in	r28, 0x3d	; 61
   1192e:	de b7       	in	r29, 0x3e	; 62
   11930:	b8 2e       	mov	r11, r24
   11932:	a6 2e       	mov	r10, r22
   11934:	94 2e       	mov	r9, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:379
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   11936:	ce 01       	movw	r24, r28
   11938:	01 96       	adiw	r24, 0x01	; 1
   1193a:	6c 01       	movw	r12, r24
   1193c:	01 96       	adiw	r24, 0x01	; 1
   1193e:	7c 01       	movw	r14, r24
   11940:	8e 01       	movw	r16, r28
   11942:	0d 5f       	subi	r16, 0xFD	; 253
   11944:	1f 4f       	sbci	r17, 0xFF	; 255
   11946:	9e 01       	movw	r18, r28
   11948:	2c 5f       	subi	r18, 0xFC	; 252
   1194a:	3f 4f       	sbci	r19, 0xFF	; 255
   1194c:	ae 01       	movw	r20, r28
   1194e:	4b 5f       	subi	r20, 0xFB	; 251
   11950:	5f 4f       	sbci	r21, 0xFF	; 255
   11952:	8b 2d       	mov	r24, r11
   11954:	0e 94 3c 8b 	call	0x11678	; 0x11678 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:380
  if (active != set_active)
   11958:	89 81       	ldd	r24, Y+1	; 0x01
   1195a:	89 15       	cp	r24, r9
   1195c:	49 f0       	breq	.+18     	; 0x11970 <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)+0x60>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
   1195e:	c9 2c       	mov	r12, r9
   11960:	ea 80       	ldd	r14, Y+2	; 0x02
   11962:	0b 81       	ldd	r16, Y+3	; 0x03
   11964:	2c 81       	ldd	r18, Y+4	; 0x04
   11966:	4d 81       	ldd	r20, Y+5	; 0x05
   11968:	6a 2d       	mov	r22, r10
   1196a:	8b 2d       	mov	r24, r11
   1196c:	0e 94 8f 8b 	call	0x1171e	; 0x1171e <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:382
}
   11970:	0f 90       	pop	r0
   11972:	0f 90       	pop	r0
   11974:	0f 90       	pop	r0
   11976:	0f 90       	pop	r0
   11978:	0f 90       	pop	r0
   1197a:	df 91       	pop	r29
   1197c:	cf 91       	pop	r28
   1197e:	1f 91       	pop	r17
   11980:	0f 91       	pop	r16
   11982:	ff 90       	pop	r15
   11984:	ef 90       	pop	r14
   11986:	df 90       	pop	r13
   11988:	cf 90       	pop	r12
   1198a:	bf 90       	pop	r11
   1198c:	af 90       	pop	r10
   1198e:	9f 90       	pop	r9
   11990:	08 95       	ret

00011992 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)>:
_Z18thermostat_runninghPihhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:387
/***************************************************************************************************************/
///// vraci 1 pokud je termostat aktivni
/// now.dayOfTheWeek() 0..nedele; 6..sobota
uint8_t thermostat_running(uint8_t program, int16_t *threshold, uint8_t now_hour, uint8_t now_minute, uint8_t now_dayweek)
{
   11992:	3f 92       	push	r3
   11994:	4f 92       	push	r4
   11996:	5f 92       	push	r5
   11998:	6f 92       	push	r6
   1199a:	7f 92       	push	r7
   1199c:	8f 92       	push	r8
   1199e:	9f 92       	push	r9
   119a0:	af 92       	push	r10
   119a2:	bf 92       	push	r11
   119a4:	cf 92       	push	r12
   119a6:	df 92       	push	r13
   119a8:	ef 92       	push	r14
   119aa:	ff 92       	push	r15
   119ac:	0f 93       	push	r16
   119ae:	1f 93       	push	r17
   119b0:	cf 93       	push	r28
   119b2:	df 93       	push	r29
   119b4:	00 d0       	rcall	.+0      	; 0x119b6 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x24>
   119b6:	1f 92       	push	r1
   119b8:	1f 92       	push	r1
   119ba:	cd b7       	in	r28, 0x3d	; 61
   119bc:	de b7       	in	r29, 0x3e	; 62
   119be:	b8 2e       	mov	r11, r24
   119c0:	2b 01       	movw	r4, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:392
  uint8_t ret = PROG_FREE;
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
   119c2:	8f ef       	ldi	r24, 0xFF	; 255
   119c4:	b8 16       	cp	r11, r24
   119c6:	09 f4       	brne	.+2      	; 0x119ca <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x38>
   119c8:	54 c0       	rjmp	.+168    	; 0x11a72 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0xe0>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:402
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
   119ca:	82 2e       	mov	r8, r18
   119cc:	91 2c       	mov	r9, r1
   119ce:	9c e3       	ldi	r25, 0x3C	; 60
   119d0:	49 9f       	mul	r20, r25
   119d2:	80 0c       	add	r8, r0
   119d4:	91 1c       	adc	r9, r1
   119d6:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   119d8:	81 e0       	ldi	r24, 0x01	; 1
   119da:	90 e0       	ldi	r25, 0x00	; 0
   119dc:	02 c0       	rjmp	.+4      	; 0x119e2 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x50>
   119de:	88 0f       	add	r24, r24
   119e0:	99 1f       	adc	r25, r25
   119e2:	0a 95       	dec	r16
   119e4:	e2 f7       	brpl	.-8      	; 0x119de <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x4c>
   119e6:	66 24       	eor	r6, r6
   119e8:	63 94       	inc	r6
   119ea:	71 2c       	mov	r7, r1
   119ec:	89 2b       	or	r24, r25
   119ee:	11 f4       	brne	.+4      	; 0x119f4 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x62>
   119f0:	71 2c       	mov	r7, r1
   119f2:	61 2c       	mov	r6, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:394
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   119f4:	a1 2c       	mov	r10, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:400
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
   119f6:	9c e3       	ldi	r25, 0x3C	; 60
   119f8:	39 2e       	mov	r3, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:396
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   119fa:	fe 01       	movw	r30, r28
   119fc:	31 96       	adiw	r30, 0x01	; 1
   119fe:	6f 01       	movw	r12, r30
   11a00:	ce 01       	movw	r24, r28
   11a02:	02 96       	adiw	r24, 0x02	; 2
   11a04:	7c 01       	movw	r14, r24
   11a06:	8e 01       	movw	r16, r28
   11a08:	0d 5f       	subi	r16, 0xFD	; 253
   11a0a:	1f 4f       	sbci	r17, 0xFF	; 255
   11a0c:	9e 01       	movw	r18, r28
   11a0e:	2c 5f       	subi	r18, 0xFC	; 252
   11a10:	3f 4f       	sbci	r19, 0xFF	; 255
   11a12:	ae 01       	movw	r20, r28
   11a14:	4b 5f       	subi	r20, 0xFB	; 251
   11a16:	5f 4f       	sbci	r21, 0xFF	; 255
   11a18:	6a 2d       	mov	r22, r10
   11a1a:	8b 2d       	mov	r24, r11
   11a1c:	0e 94 3c 8b 	call	0x11678	; 0x11678 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:397
      if (active == 1)
   11a20:	89 81       	ldd	r24, Y+1	; 0x01
   11a22:	81 30       	cpi	r24, 0x01	; 1
   11a24:	f1 f5       	brne	.+124    	; 0x11aa2 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:399
      {
        week = thermostat_program_get_week(program, interval_id);
   11a26:	6a 2d       	mov	r22, r10
   11a28:	8b 2d       	mov	r24, r11
   11a2a:	0e 94 09 8c 	call	0x11812	; 0x11812 <thermostat_program_get_week(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:400
        t_start = start_hour * 60 + start_min;
   11a2e:	9d 81       	ldd	r25, Y+5	; 0x05
   11a30:	2c 81       	ldd	r18, Y+4	; 0x04
   11a32:	30 e0       	ldi	r19, 0x00	; 0
   11a34:	93 9d       	mul	r25, r3
   11a36:	20 0d       	add	r18, r0
   11a38:	31 1d       	adc	r19, r1
   11a3a:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   11a3c:	82 16       	cp	r8, r18
   11a3e:	93 06       	cpc	r9, r19
   11a40:	84 f1       	brlt	.+96     	; 0x11aa2 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:401 (discriminator 1)
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
   11a42:	9b 81       	ldd	r25, Y+3	; 0x03
   11a44:	2a 81       	ldd	r18, Y+2	; 0x02
   11a46:	30 e0       	ldi	r19, 0x00	; 0
   11a48:	93 9d       	mul	r25, r3
   11a4a:	20 0d       	add	r18, r0
   11a4c:	31 1d       	adc	r19, r1
   11a4e:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403 (discriminator 1)
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   11a50:	82 16       	cp	r8, r18
   11a52:	93 06       	cpc	r9, r19
   11a54:	34 f5       	brge	.+76     	; 0x11aa2 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403 (discriminator 2)
   11a56:	90 e0       	ldi	r25, 0x00	; 0
   11a58:	86 21       	and	r24, r6
   11a5a:	97 21       	and	r25, r7
   11a5c:	89 2b       	or	r24, r25
   11a5e:	09 f1       	breq	.+66     	; 0x11aa2 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:405
        {
          *threshold = thermostat_program_get_threshold(program, interval_id);
   11a60:	6a 2d       	mov	r22, r10
   11a62:	8b 2d       	mov	r24, r11
   11a64:	0e 94 cb 8b 	call	0x11796	; 0x11796 <thermostat_program_get_threshold(unsigned char, unsigned char)>
   11a68:	f2 01       	movw	r30, r4
   11a6a:	91 83       	std	Z+1, r25	; 0x01
   11a6c:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:411
          ret = PROG_ACTIVE;
          break;
        }
      }
    }
    ret = PROG_NO_INTERVAL;
   11a6e:	8e ef       	ldi	r24, 0xFE	; 254
   11a70:	b8 2e       	mov	r11, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:414
  }
  return ret;
}
   11a72:	8b 2d       	mov	r24, r11
   11a74:	0f 90       	pop	r0
   11a76:	0f 90       	pop	r0
   11a78:	0f 90       	pop	r0
   11a7a:	0f 90       	pop	r0
   11a7c:	0f 90       	pop	r0
   11a7e:	df 91       	pop	r29
   11a80:	cf 91       	pop	r28
   11a82:	1f 91       	pop	r17
   11a84:	0f 91       	pop	r16
   11a86:	ff 90       	pop	r15
   11a88:	ef 90       	pop	r14
   11a8a:	df 90       	pop	r13
   11a8c:	cf 90       	pop	r12
   11a8e:	bf 90       	pop	r11
   11a90:	af 90       	pop	r10
   11a92:	9f 90       	pop	r9
   11a94:	8f 90       	pop	r8
   11a96:	7f 90       	pop	r7
   11a98:	6f 90       	pop	r6
   11a9a:	5f 90       	pop	r5
   11a9c:	4f 90       	pop	r4
   11a9e:	3f 90       	pop	r3
   11aa0:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:394 (discriminator 2)
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   11aa2:	a3 94       	inc	r10
   11aa4:	fb e0       	ldi	r31, 0x0B	; 11
   11aa6:	af 12       	cpse	r10, r31
   11aa8:	a8 cf       	rjmp	.-176    	; 0x119fa <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x68>
   11aaa:	e1 cf       	rjmp	.-62     	; 0x11a6e <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0xdc>

00011aac <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
   11aac:	cf 93       	push	r28
   11aae:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:419
  thermostat_ring_pid_set_kp(idx, 1);
   11ab0:	40 e0       	ldi	r20, 0x00	; 0
   11ab2:	50 e0       	ldi	r21, 0x00	; 0
   11ab4:	60 e8       	ldi	r22, 0x80	; 128
   11ab6:	7f e3       	ldi	r23, 0x3F	; 63
   11ab8:	0e 94 9a 8a 	call	0x11534	; 0x11534 <thermostat_ring_pid_set_kp(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:420
  thermostat_ring_pid_set_ki(idx, 0.5);
   11abc:	40 e0       	ldi	r20, 0x00	; 0
   11abe:	50 e0       	ldi	r21, 0x00	; 0
   11ac0:	60 e0       	ldi	r22, 0x00	; 0
   11ac2:	7f e3       	ldi	r23, 0x3F	; 63
   11ac4:	8c 2f       	mov	r24, r28
   11ac6:	0e 94 ad 8a 	call	0x1155a	; 0x1155a <thermostat_ring_pid_set_ki(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:421
  thermostat_ring_pid_set_kd(idx, 1);
   11aca:	40 e0       	ldi	r20, 0x00	; 0
   11acc:	50 e0       	ldi	r21, 0x00	; 0
   11ace:	60 e8       	ldi	r22, 0x80	; 128
   11ad0:	7f e3       	ldi	r23, 0x3F	; 63
   11ad2:	8c 2f       	mov	r24, r28
   11ad4:	0e 94 c0 8a 	call	0x11580	; 0x11580 <thermostat_ring_pid_set_kd(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:422
  thermostat_ring_pid_set_time(idx, 60);
   11ad8:	6c e3       	ldi	r22, 0x3C	; 60
   11ada:	8c 2f       	mov	r24, r28
   11adc:	0e 94 d3 8a 	call	0x115a6	; 0x115a6 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:423
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
   11ae0:	6f ef       	ldi	r22, 0xFF	; 255
   11ae2:	8c 2f       	mov	r24, r28
   11ae4:	0e 94 79 89 	call	0x112f2	; 0x112f2 <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:424
  thermostat_ring_set_mezni(idx, 220);
   11ae8:	6c ed       	ldi	r22, 0xDC	; 220
   11aea:	70 e0       	ldi	r23, 0x00	; 0
   11aec:	8c 2f       	mov	r24, r28
   11aee:	0e 94 5a 89 	call	0x112b4	; 0x112b4 <thermostat_ring_set_mezni(unsigned char, int)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:425
  thermostat_ring_set_program_id(idx, PROG_FREE);
   11af2:	6f ef       	ldi	r22, 0xFF	; 255
   11af4:	8c 2f       	mov	r24, r28
   11af6:	0e 94 35 89 	call	0x1126a	; 0x1126a <thermostat_ring_set_program_id(unsigned char, unsigned char)>
_Z25thermostat_ring_set_statehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   11afa:	8c 2f       	mov	r24, r28
   11afc:	90 e0       	ldi	r25, 0x00	; 0
   11afe:	fc 01       	movw	r30, r24
   11b00:	e4 5c       	subi	r30, 0xC4	; 196
   11b02:	ff 4e       	sbci	r31, 0xEF	; 239
   11b04:	10 82       	st	Z, r1
_Z25thermostat_ring_set_powerhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:33
{
  return therm_power[idx];
}
void thermostat_ring_set_power(uint8_t idx, uint8_t stav)
{
  therm_power[idx] = stav;
   11b06:	89 5c       	subi	r24, 0xC9	; 201
   11b08:	9f 4e       	sbci	r25, 0xEF	; 239
   11b0a:	fc 01       	movw	r30, r24
   11b0c:	10 82       	st	Z, r1
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:428
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
  thermostat_ring_set_mezni(idx, 220);
  thermostat_ring_set_program_id(idx, PROG_FREE);
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
   11b0e:	6f ef       	ldi	r22, 0xFF	; 255
   11b10:	8c 2f       	mov	r24, r28
   11b12:	0e 94 25 89 	call	0x1124a	; 0x1124a <thermostat_ring_set_active(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:429
  thermostat_ring_set_output(idx, 255);
   11b16:	6f ef       	ldi	r22, 0xFF	; 255
   11b18:	8c 2f       	mov	r24, r28
   11b1a:	0e 94 15 89 	call	0x1122a	; 0x1122a <thermostat_ring_set_output(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:430
  thermostat_ring_set_mode(idx, 0);
   11b1e:	60 e0       	ldi	r22, 0x00	; 0
   11b20:	8c 2f       	mov	r24, r28
   11b22:	0e 94 89 89 	call	0x11312	; 0x11312 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_name(idx, "FREE");
   11b26:	64 e6       	ldi	r22, 0x64	; 100
   11b28:	75 e0       	ldi	r23, 0x05	; 5
   11b2a:	8c 2f       	mov	r24, r28
   11b2c:	0e 94 e6 88 	call	0x111cc	; 0x111cc <thermostat_ring_set_name(unsigned char, char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_status_bites(idx, 0);
   11b30:	60 e0       	ldi	r22, 0x00	; 0
   11b32:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:433
}
   11b34:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
   11b36:	0c 94 a3 89 	jmp	0x11346	; 0x11346 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>

00011b3a <_GLOBAL__sub_I_PID_Input>:
_GLOBAL__sub_I_PID_Input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:36
void thermostat_ring_set_power(uint8_t idx, uint8_t stav)
{
  therm_power[idx] = stav;
}

PID** array_pids = new PID*[MAX_THERMOSTAT];
   11b3a:	8a e0       	ldi	r24, 0x0A	; 10
   11b3c:	90 e0       	ldi	r25, 0x00	; 0
   11b3e:	0e 94 f6 d0 	call	0x1a1ec	; 0x1a1ec <operator new[](unsigned int)>
   11b42:	90 93 36 10 	sts	0x1036, r25	; 0x801036 <array_pids+0x1>
   11b46:	80 93 35 10 	sts	0x1035, r24	; 0x801035 <array_pids>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
   11b4a:	08 95       	ret

00011b4c <LCDWIKI_GUI::LCDWIKI_GUI()>:
_ZN11LCDWIKI_GUIC2Ev():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:787
				}
			}
		}
	}
	Print(st, x, y);
}
   11b4c:	fc 01       	movw	r30, r24
   11b4e:	85 e1       	ldi	r24, 0x15	; 21
   11b50:	98 e0       	ldi	r25, 0x08	; 8
   11b52:	91 83       	std	Z+1, r25	; 0x01
   11b54:	80 83       	st	Z, r24
   11b56:	80 e0       	ldi	r24, 0x00	; 0
   11b58:	98 ef       	ldi	r25, 0xF8	; 248
   11b5a:	91 87       	std	Z+9, r25	; 0x09
   11b5c:	80 87       	std	Z+8, r24	; 0x08
   11b5e:	20 ee       	ldi	r18, 0xE0	; 224
   11b60:	37 e0       	ldi	r19, 0x07	; 7
   11b62:	37 83       	std	Z+7, r19	; 0x07
   11b64:	26 83       	std	Z+6, r18	; 0x06
   11b66:	93 87       	std	Z+11, r25	; 0x0b
   11b68:	82 87       	std	Z+10, r24	; 0x0a
   11b6a:	81 e0       	ldi	r24, 0x01	; 1
   11b6c:	84 87       	std	Z+12, r24	; 0x0c
   11b6e:	15 86       	std	Z+13, r1	; 0x0d
   11b70:	08 95       	ret

00011b72 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>:
_ZN11LCDWIKI_GUI14Set_Draw_colorEj():
   11b72:	fc 01       	movw	r30, r24
   11b74:	73 87       	std	Z+11, r23	; 0x0b
   11b76:	62 87       	std	Z+10, r22	; 0x0a
   11b78:	08 95       	ret

00011b7a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii():
   11b7a:	ef 92       	push	r14
   11b7c:	ff 92       	push	r15
   11b7e:	0f 93       	push	r16
   11b80:	1f 93       	push	r17
   11b82:	cf 93       	push	r28
   11b84:	df 93       	push	r29
   11b86:	e9 01       	movw	r28, r18
   11b88:	79 01       	movw	r14, r18
   11b8a:	e6 1a       	sub	r14, r22
   11b8c:	f7 0a       	sbc	r15, r23
   11b8e:	97 01       	movw	r18, r14
   11b90:	2f 5f       	subi	r18, 0xFF	; 255
   11b92:	3f 4f       	sbci	r19, 0xFF	; 255
   11b94:	f8 01       	movw	r30, r16
   11b96:	e4 1b       	sub	r30, r20
   11b98:	f5 0b       	sbc	r31, r21
   11b9a:	df 01       	movw	r26, r30
   11b9c:	11 96       	adiw	r26, 0x01	; 1
   11b9e:	37 ff       	sbrs	r19, 7
   11ba0:	04 c0       	rjmp	.+8      	; 0x11baa <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)+0x30>
   11ba2:	97 01       	movw	r18, r14
   11ba4:	20 95       	com	r18
   11ba6:	30 95       	com	r19
   11ba8:	be 01       	movw	r22, r28
   11baa:	b7 ff       	sbrs	r27, 7
   11bac:	04 c0       	rjmp	.+8      	; 0x11bb6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)+0x3c>
   11bae:	df 01       	movw	r26, r30
   11bb0:	a0 95       	com	r26
   11bb2:	b0 95       	com	r27
   11bb4:	a8 01       	movw	r20, r16
   11bb6:	ec 01       	movw	r28, r24
   11bb8:	ea 84       	ldd	r14, Y+10	; 0x0a
   11bba:	fb 84       	ldd	r15, Y+11	; 0x0b
   11bbc:	e8 81       	ld	r30, Y
   11bbe:	f9 81       	ldd	r31, Y+1	; 0x01
   11bc0:	04 80       	ldd	r0, Z+4	; 0x04
   11bc2:	f5 81       	ldd	r31, Z+5	; 0x05
   11bc4:	e0 2d       	mov	r30, r0
   11bc6:	8d 01       	movw	r16, r26
   11bc8:	19 95       	eicall
   11bca:	df 91       	pop	r29
   11bcc:	cf 91       	pop	r28
   11bce:	1f 91       	pop	r17
   11bd0:	0f 91       	pop	r16
   11bd2:	ff 90       	pop	r15
   11bd4:	ef 90       	pop	r14
   11bd6:	08 95       	ret

00011bd8 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>:
_ZN11LCDWIKI_GUI15Draw_Fast_VLineEiii():
   11bd8:	ef 92       	push	r14
   11bda:	ff 92       	push	r15
   11bdc:	0f 93       	push	r16
   11bde:	1f 93       	push	r17
   11be0:	dc 01       	movw	r26, r24
   11be2:	1a 96       	adiw	r26, 0x0a	; 10
   11be4:	ed 90       	ld	r14, X+
   11be6:	fc 90       	ld	r15, X
   11be8:	1b 97       	sbiw	r26, 0x0b	; 11
   11bea:	ed 91       	ld	r30, X+
   11bec:	fc 91       	ld	r31, X
   11bee:	04 80       	ldd	r0, Z+4	; 0x04
   11bf0:	f5 81       	ldd	r31, Z+5	; 0x05
   11bf2:	e0 2d       	mov	r30, r0
   11bf4:	89 01       	movw	r16, r18
   11bf6:	21 e0       	ldi	r18, 0x01	; 1
   11bf8:	30 e0       	ldi	r19, 0x00	; 0
   11bfa:	19 95       	eicall
   11bfc:	1f 91       	pop	r17
   11bfe:	0f 91       	pop	r16
   11c00:	ff 90       	pop	r15
   11c02:	ef 90       	pop	r14
   11c04:	08 95       	ret

00011c06 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii():
   11c06:	ef 92       	push	r14
   11c08:	ff 92       	push	r15
   11c0a:	0f 93       	push	r16
   11c0c:	1f 93       	push	r17
   11c0e:	dc 01       	movw	r26, r24
   11c10:	1a 96       	adiw	r26, 0x0a	; 10
   11c12:	ed 90       	ld	r14, X+
   11c14:	fc 90       	ld	r15, X
   11c16:	1b 97       	sbiw	r26, 0x0b	; 11
   11c18:	ed 91       	ld	r30, X+
   11c1a:	fc 91       	ld	r31, X
   11c1c:	04 80       	ldd	r0, Z+4	; 0x04
   11c1e:	f5 81       	ldd	r31, Z+5	; 0x05
   11c20:	e0 2d       	mov	r30, r0
   11c22:	01 e0       	ldi	r16, 0x01	; 1
   11c24:	10 e0       	ldi	r17, 0x00	; 0
   11c26:	19 95       	eicall
   11c28:	1f 91       	pop	r17
   11c2a:	0f 91       	pop	r16
   11c2c:	ff 90       	pop	r15
   11c2e:	ef 90       	pop	r14
   11c30:	08 95       	ret

00011c32 <LCDWIKI_GUI::Fill_Screen(unsigned int)>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj():
   11c32:	cf 92       	push	r12
   11c34:	df 92       	push	r13
   11c36:	ef 92       	push	r14
   11c38:	ff 92       	push	r15
   11c3a:	0f 93       	push	r16
   11c3c:	1f 93       	push	r17
   11c3e:	cf 93       	push	r28
   11c40:	df 93       	push	r29
   11c42:	ec 01       	movw	r28, r24
   11c44:	7b 01       	movw	r14, r22
   11c46:	e8 81       	ld	r30, Y
   11c48:	f9 81       	ldd	r31, Y+1	; 0x01
   11c4a:	c4 80       	ldd	r12, Z+4	; 0x04
   11c4c:	d5 80       	ldd	r13, Z+5	; 0x05
   11c4e:	04 84       	ldd	r0, Z+12	; 0x0c
   11c50:	f5 85       	ldd	r31, Z+13	; 0x0d
   11c52:	e0 2d       	mov	r30, r0
   11c54:	19 95       	eicall
   11c56:	8c 01       	movw	r16, r24
   11c58:	e8 81       	ld	r30, Y
   11c5a:	f9 81       	ldd	r31, Y+1	; 0x01
   11c5c:	06 84       	ldd	r0, Z+14	; 0x0e
   11c5e:	f7 85       	ldd	r31, Z+15	; 0x0f
   11c60:	e0 2d       	mov	r30, r0
   11c62:	ce 01       	movw	r24, r28
   11c64:	19 95       	eicall
   11c66:	9c 01       	movw	r18, r24
   11c68:	50 e0       	ldi	r21, 0x00	; 0
   11c6a:	40 e0       	ldi	r20, 0x00	; 0
   11c6c:	70 e0       	ldi	r23, 0x00	; 0
   11c6e:	60 e0       	ldi	r22, 0x00	; 0
   11c70:	ce 01       	movw	r24, r28
   11c72:	f6 01       	movw	r30, r12
   11c74:	19 95       	eicall
   11c76:	df 91       	pop	r29
   11c78:	cf 91       	pop	r28
   11c7a:	1f 91       	pop	r17
   11c7c:	0f 91       	pop	r16
   11c7e:	ff 90       	pop	r15
   11c80:	ef 90       	pop	r14
   11c82:	df 90       	pop	r13
   11c84:	cf 90       	pop	r12
   11c86:	08 95       	ret

00011c88 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii():
   11c88:	6f 92       	push	r6
   11c8a:	7f 92       	push	r7
   11c8c:	8f 92       	push	r8
   11c8e:	9f 92       	push	r9
   11c90:	af 92       	push	r10
   11c92:	bf 92       	push	r11
   11c94:	cf 92       	push	r12
   11c96:	df 92       	push	r13
   11c98:	ef 92       	push	r14
   11c9a:	ff 92       	push	r15
   11c9c:	0f 93       	push	r16
   11c9e:	1f 93       	push	r17
   11ca0:	cf 93       	push	r28
   11ca2:	df 93       	push	r29
   11ca4:	3c 01       	movw	r6, r24
   11ca6:	7b 01       	movw	r14, r22
   11ca8:	ea 01       	movw	r28, r20
   11caa:	49 01       	movw	r8, r18
   11cac:	26 1b       	sub	r18, r22
   11cae:	37 0b       	sbc	r19, r23
   11cb0:	59 01       	movw	r10, r18
   11cb2:	4f ef       	ldi	r20, 0xFF	; 255
   11cb4:	a4 1a       	sub	r10, r20
   11cb6:	b4 0a       	sbc	r11, r20
   11cb8:	c8 01       	movw	r24, r16
   11cba:	8c 1b       	sub	r24, r28
   11cbc:	9d 0b       	sbc	r25, r29
   11cbe:	6c 01       	movw	r12, r24
   11cc0:	4f ef       	ldi	r20, 0xFF	; 255
   11cc2:	c4 1a       	sub	r12, r20
   11cc4:	d4 0a       	sbc	r13, r20
   11cc6:	b7 fe       	sbrs	r11, 7
   11cc8:	04 c0       	rjmp	.+8      	; 0x11cd2 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)+0x4a>
   11cca:	59 01       	movw	r10, r18
   11ccc:	a0 94       	com	r10
   11cce:	b0 94       	com	r11
   11cd0:	74 01       	movw	r14, r8
   11cd2:	d7 fe       	sbrs	r13, 7
   11cd4:	04 c0       	rjmp	.+8      	; 0x11cde <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)+0x56>
   11cd6:	6c 01       	movw	r12, r24
   11cd8:	c0 94       	com	r12
   11cda:	d0 94       	com	r13
   11cdc:	e8 01       	movw	r28, r16
   11cde:	95 01       	movw	r18, r10
   11ce0:	ae 01       	movw	r20, r28
   11ce2:	b7 01       	movw	r22, r14
   11ce4:	c3 01       	movw	r24, r6
   11ce6:	0e 94 03 8e 	call	0x11c06	; 0x11c06 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
   11cea:	95 01       	movw	r18, r10
   11cec:	a8 01       	movw	r20, r16
   11cee:	b7 01       	movw	r22, r14
   11cf0:	c3 01       	movw	r24, r6
   11cf2:	0e 94 03 8e 	call	0x11c06	; 0x11c06 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
   11cf6:	96 01       	movw	r18, r12
   11cf8:	ae 01       	movw	r20, r28
   11cfa:	b7 01       	movw	r22, r14
   11cfc:	c3 01       	movw	r24, r6
   11cfe:	0e 94 ec 8d 	call	0x11bd8	; 0x11bd8 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>
   11d02:	96 01       	movw	r18, r12
   11d04:	ae 01       	movw	r20, r28
   11d06:	b4 01       	movw	r22, r8
   11d08:	c3 01       	movw	r24, r6
   11d0a:	df 91       	pop	r29
   11d0c:	cf 91       	pop	r28
   11d0e:	1f 91       	pop	r17
   11d10:	0f 91       	pop	r16
   11d12:	ff 90       	pop	r15
   11d14:	ef 90       	pop	r14
   11d16:	df 90       	pop	r13
   11d18:	cf 90       	pop	r12
   11d1a:	bf 90       	pop	r11
   11d1c:	af 90       	pop	r10
   11d1e:	9f 90       	pop	r9
   11d20:	8f 90       	pop	r8
   11d22:	7f 90       	pop	r7
   11d24:	6f 90       	pop	r6
   11d26:	0c 94 ec 8d 	jmp	0x11bd8	; 0x11bd8 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>

00011d2a <LCDWIKI_GUI::Set_Text_colour(unsigned int)>:
_ZN11LCDWIKI_GUI15Set_Text_colourEj():
   11d2a:	fc 01       	movw	r30, r24
   11d2c:	77 83       	std	Z+7, r23	; 0x07
   11d2e:	66 83       	std	Z+6, r22	; 0x06
   11d30:	08 95       	ret

00011d32 <LCDWIKI_GUI::Set_Text_Back_colour(unsigned int)>:
_ZN11LCDWIKI_GUI20Set_Text_Back_colourEj():
   11d32:	fc 01       	movw	r30, r24
   11d34:	71 87       	std	Z+9, r23	; 0x09
   11d36:	60 87       	std	Z+8, r22	; 0x08
   11d38:	08 95       	ret

00011d3a <LCDWIKI_GUI::Set_Text_Size(unsigned char)>:
_ZN11LCDWIKI_GUI13Set_Text_SizeEh():
   11d3a:	fc 01       	movw	r30, r24
   11d3c:	64 87       	std	Z+12, r22	; 0x0c
   11d3e:	08 95       	ret

00011d40 <LCDWIKI_GUI::Set_Text_Mode(bool)>:
_ZN11LCDWIKI_GUI13Set_Text_ModeEb():
   11d40:	fc 01       	movw	r30, r24
   11d42:	65 87       	std	Z+13, r22	; 0x0d
   11d44:	08 95       	ret

00011d46 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)>:
_ZN11LCDWIKI_GUI9Draw_CharEiihjjhb():
   11d46:	2f 92       	push	r2
   11d48:	3f 92       	push	r3
   11d4a:	4f 92       	push	r4
   11d4c:	5f 92       	push	r5
   11d4e:	6f 92       	push	r6
   11d50:	7f 92       	push	r7
   11d52:	8f 92       	push	r8
   11d54:	9f 92       	push	r9
   11d56:	af 92       	push	r10
   11d58:	bf 92       	push	r11
   11d5a:	cf 92       	push	r12
   11d5c:	df 92       	push	r13
   11d5e:	ef 92       	push	r14
   11d60:	ff 92       	push	r15
   11d62:	0f 93       	push	r16
   11d64:	1f 93       	push	r17
   11d66:	cf 93       	push	r28
   11d68:	df 93       	push	r29
   11d6a:	cd b7       	in	r28, 0x3d	; 61
   11d6c:	de b7       	in	r29, 0x3e	; 62
   11d6e:	2d 97       	sbiw	r28, 0x0d	; 13
   11d70:	0f b6       	in	r0, 0x3f	; 63
   11d72:	f8 94       	cli
   11d74:	de bf       	out	0x3e, r29	; 62
   11d76:	0f be       	out	0x3f, r0	; 63
   11d78:	cd bf       	out	0x3d, r28	; 61
   11d7a:	3c 01       	movw	r6, r24
   11d7c:	4b 01       	movw	r8, r22
   11d7e:	2a 01       	movw	r4, r20
   11d80:	d2 2e       	mov	r13, r18
   11d82:	1c 83       	std	Y+4, r17	; 0x04
   11d84:	0b 83       	std	Y+3, r16	; 0x03
   11d86:	fe 82       	std	Y+6, r15	; 0x06
   11d88:	ed 82       	std	Y+5, r14	; 0x05
   11d8a:	ca 82       	std	Y+2, r12	; 0x02
   11d8c:	a9 86       	std	Y+9, r10	; 0x09
   11d8e:	dc 01       	movw	r26, r24
   11d90:	ed 91       	ld	r30, X+
   11d92:	fc 91       	ld	r31, X
   11d94:	06 84       	ldd	r0, Z+14	; 0x0e
   11d96:	f7 85       	ldd	r31, Z+15	; 0x0f
   11d98:	e0 2d       	mov	r30, r0
   11d9a:	19 95       	eicall
   11d9c:	88 16       	cp	r8, r24
   11d9e:	99 06       	cpc	r9, r25
   11da0:	0c f0       	brlt	.+2      	; 0x11da4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x5e>
   11da2:	7a c0       	rjmp	.+244    	; 0x11e98 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   11da4:	d3 01       	movw	r26, r6
   11da6:	ed 91       	ld	r30, X+
   11da8:	fc 91       	ld	r31, X
   11daa:	04 84       	ldd	r0, Z+12	; 0x0c
   11dac:	f5 85       	ldd	r31, Z+13	; 0x0d
   11dae:	e0 2d       	mov	r30, r0
   11db0:	c3 01       	movw	r24, r6
   11db2:	19 95       	eicall
   11db4:	48 16       	cp	r4, r24
   11db6:	59 06       	cpc	r5, r25
   11db8:	0c f0       	brlt	.+2      	; 0x11dbc <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x76>
   11dba:	6e c0       	rjmp	.+220    	; 0x11e98 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   11dbc:	3a 81       	ldd	r19, Y+2	; 0x02
   11dbe:	23 2f       	mov	r18, r19
   11dc0:	30 e0       	ldi	r19, 0x00	; 0
   11dc2:	3d 87       	std	Y+13, r19	; 0x0d
   11dc4:	2c 87       	std	Y+12, r18	; 0x0c
   11dc6:	c4 01       	movw	r24, r8
   11dc8:	aa 81       	ldd	r26, Y+2	; 0x02
   11dca:	46 e0       	ldi	r20, 0x06	; 6
   11dcc:	a4 9f       	mul	r26, r20
   11dce:	80 0d       	add	r24, r0
   11dd0:	91 1d       	adc	r25, r1
   11dd2:	11 24       	eor	r1, r1
   11dd4:	18 16       	cp	r1, r24
   11dd6:	19 06       	cpc	r1, r25
   11dd8:	0c f0       	brlt	.+2      	; 0x11ddc <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x96>
   11dda:	5e c0       	rjmp	.+188    	; 0x11e98 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   11ddc:	c9 01       	movw	r24, r18
   11dde:	23 e0       	ldi	r18, 0x03	; 3
   11de0:	88 0f       	add	r24, r24
   11de2:	99 1f       	adc	r25, r25
   11de4:	2a 95       	dec	r18
   11de6:	e1 f7       	brne	.-8      	; 0x11de0 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x9a>
   11de8:	84 0d       	add	r24, r4
   11dea:	95 1d       	adc	r25, r5
   11dec:	18 16       	cp	r1, r24
   11dee:	19 06       	cpc	r1, r25
   11df0:	0c f0       	brlt	.+2      	; 0x11df4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xae>
   11df2:	52 c0       	rjmp	.+164    	; 0x11e98 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   11df4:	bf ea       	ldi	r27, 0xAF	; 175
   11df6:	bd 15       	cp	r27, r13
   11df8:	08 f4       	brcc	.+2      	; 0x11dfc <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xb6>
   11dfa:	d3 94       	inc	r13
   11dfc:	54 01       	movw	r10, r8
   11dfe:	19 82       	std	Y+1, r1	; 0x01
   11e00:	8e e5       	ldi	r24, 0x5E	; 94
   11e02:	9a e5       	ldi	r25, 0x5A	; 90
   11e04:	88 19       	sub	r24, r8
   11e06:	99 09       	sbc	r25, r9
   11e08:	9c 01       	movw	r18, r24
   11e0a:	45 e0       	ldi	r20, 0x05	; 5
   11e0c:	d4 9e       	mul	r13, r20
   11e0e:	20 0d       	add	r18, r0
   11e10:	31 1d       	adc	r19, r1
   11e12:	11 24       	eor	r1, r1
   11e14:	3b 87       	std	Y+11, r19	; 0x0b
   11e16:	2a 87       	std	Y+10, r18	; 0x0a
   11e18:	89 81       	ldd	r24, Y+1	; 0x01
   11e1a:	e0 e0       	ldi	r30, 0x00	; 0
   11e1c:	85 30       	cpi	r24, 0x05	; 5
   11e1e:	29 f0       	breq	.+10     	; 0x11e2a <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xe4>
   11e20:	ea 85       	ldd	r30, Y+10	; 0x0a
   11e22:	fb 85       	ldd	r31, Y+11	; 0x0b
   11e24:	ea 0d       	add	r30, r10
   11e26:	fb 1d       	adc	r31, r11
   11e28:	e4 91       	lpm	r30, Z
   11e2a:	62 01       	movw	r12, r4
   11e2c:	31 2c       	mov	r3, r1
   11e2e:	21 2c       	mov	r2, r1
   11e30:	ae 2f       	mov	r26, r30
   11e32:	b0 e0       	ldi	r27, 0x00	; 0
   11e34:	b8 87       	std	Y+8, r27	; 0x08
   11e36:	af 83       	std	Y+7, r26	; 0x07
   11e38:	e0 ff       	sbrs	r30, 0
   11e3a:	54 c0       	rjmp	.+168    	; 0x11ee4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x19e>
   11e3c:	d3 01       	movw	r26, r6
   11e3e:	ed 91       	ld	r30, X+
   11e40:	fc 91       	ld	r31, X
   11e42:	ba 81       	ldd	r27, Y+2	; 0x02
   11e44:	b1 30       	cpi	r27, 0x01	; 1
   11e46:	09 f0       	breq	.+2      	; 0x11e4a <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x104>
   11e48:	40 c0       	rjmp	.+128    	; 0x11eca <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x184>
   11e4a:	02 80       	ldd	r0, Z+2	; 0x02
   11e4c:	f3 81       	ldd	r31, Z+3	; 0x03
   11e4e:	e0 2d       	mov	r30, r0
   11e50:	2b 81       	ldd	r18, Y+3	; 0x03
   11e52:	3c 81       	ldd	r19, Y+4	; 0x04
   11e54:	a2 01       	movw	r20, r4
   11e56:	42 0d       	add	r20, r2
   11e58:	53 1d       	adc	r21, r3
   11e5a:	b5 01       	movw	r22, r10
   11e5c:	c3 01       	movw	r24, r6
   11e5e:	19 95       	eicall
   11e60:	ef 81       	ldd	r30, Y+7	; 0x07
   11e62:	f8 85       	ldd	r31, Y+8	; 0x08
   11e64:	f5 95       	asr	r31
   11e66:	e7 95       	ror	r30
   11e68:	2f ef       	ldi	r18, 0xFF	; 255
   11e6a:	22 1a       	sub	r2, r18
   11e6c:	32 0a       	sbc	r3, r18
   11e6e:	8c 85       	ldd	r24, Y+12	; 0x0c
   11e70:	9d 85       	ldd	r25, Y+13	; 0x0d
   11e72:	c8 0e       	add	r12, r24
   11e74:	d9 1e       	adc	r13, r25
   11e76:	98 e0       	ldi	r25, 0x08	; 8
   11e78:	29 16       	cp	r2, r25
   11e7a:	31 04       	cpc	r3, r1
   11e7c:	c9 f6       	brne	.-78     	; 0x11e30 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xea>
   11e7e:	af ef       	ldi	r26, 0xFF	; 255
   11e80:	aa 1a       	sub	r10, r26
   11e82:	ba 0a       	sbc	r11, r26
   11e84:	2c 85       	ldd	r18, Y+12	; 0x0c
   11e86:	3d 85       	ldd	r19, Y+13	; 0x0d
   11e88:	82 0e       	add	r8, r18
   11e8a:	93 1e       	adc	r9, r19
   11e8c:	39 81       	ldd	r19, Y+1	; 0x01
   11e8e:	3f 5f       	subi	r19, 0xFF	; 255
   11e90:	39 83       	std	Y+1, r19	; 0x01
   11e92:	36 30       	cpi	r19, 0x06	; 6
   11e94:	09 f0       	breq	.+2      	; 0x11e98 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   11e96:	c0 cf       	rjmp	.-128    	; 0x11e18 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xd2>
   11e98:	2d 96       	adiw	r28, 0x0d	; 13
   11e9a:	0f b6       	in	r0, 0x3f	; 63
   11e9c:	f8 94       	cli
   11e9e:	de bf       	out	0x3e, r29	; 62
   11ea0:	0f be       	out	0x3f, r0	; 63
   11ea2:	cd bf       	out	0x3d, r28	; 61
   11ea4:	df 91       	pop	r29
   11ea6:	cf 91       	pop	r28
   11ea8:	1f 91       	pop	r17
   11eaa:	0f 91       	pop	r16
   11eac:	ff 90       	pop	r15
   11eae:	ef 90       	pop	r14
   11eb0:	df 90       	pop	r13
   11eb2:	cf 90       	pop	r12
   11eb4:	bf 90       	pop	r11
   11eb6:	af 90       	pop	r10
   11eb8:	9f 90       	pop	r9
   11eba:	8f 90       	pop	r8
   11ebc:	7f 90       	pop	r7
   11ebe:	6f 90       	pop	r6
   11ec0:	5f 90       	pop	r5
   11ec2:	4f 90       	pop	r4
   11ec4:	3f 90       	pop	r3
   11ec6:	2f 90       	pop	r2
   11ec8:	08 95       	ret
   11eca:	04 80       	ldd	r0, Z+4	; 0x04
   11ecc:	f5 81       	ldd	r31, Z+5	; 0x05
   11ece:	e0 2d       	mov	r30, r0
   11ed0:	eb 80       	ldd	r14, Y+3	; 0x03
   11ed2:	fc 80       	ldd	r15, Y+4	; 0x04
   11ed4:	0c 85       	ldd	r16, Y+12	; 0x0c
   11ed6:	1d 85       	ldd	r17, Y+13	; 0x0d
   11ed8:	98 01       	movw	r18, r16
   11eda:	a6 01       	movw	r20, r12
   11edc:	b4 01       	movw	r22, r8
   11ede:	c3 01       	movw	r24, r6
   11ee0:	19 95       	eicall
   11ee2:	be cf       	rjmp	.-132    	; 0x11e60 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   11ee4:	2d 81       	ldd	r18, Y+5	; 0x05
   11ee6:	3e 81       	ldd	r19, Y+6	; 0x06
   11ee8:	8b 81       	ldd	r24, Y+3	; 0x03
   11eea:	9c 81       	ldd	r25, Y+4	; 0x04
   11eec:	28 17       	cp	r18, r24
   11eee:	39 07       	cpc	r19, r25
   11ef0:	09 f4       	brne	.+2      	; 0x11ef4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x1ae>
   11ef2:	b6 cf       	rjmp	.-148    	; 0x11e60 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   11ef4:	99 85       	ldd	r25, Y+9	; 0x09
   11ef6:	91 11       	cpse	r25, r1
   11ef8:	b3 cf       	rjmp	.-154    	; 0x11e60 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   11efa:	d3 01       	movw	r26, r6
   11efc:	ed 91       	ld	r30, X+
   11efe:	fc 91       	ld	r31, X
   11f00:	ba 81       	ldd	r27, Y+2	; 0x02
   11f02:	b1 30       	cpi	r27, 0x01	; 1
   11f04:	21 f4       	brne	.+8      	; 0x11f0e <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x1c8>
   11f06:	02 80       	ldd	r0, Z+2	; 0x02
   11f08:	f3 81       	ldd	r31, Z+3	; 0x03
   11f0a:	e0 2d       	mov	r30, r0
   11f0c:	a3 cf       	rjmp	.-186    	; 0x11e54 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x10e>
   11f0e:	04 80       	ldd	r0, Z+4	; 0x04
   11f10:	f5 81       	ldd	r31, Z+5	; 0x05
   11f12:	e0 2d       	mov	r30, r0
   11f14:	ed 80       	ldd	r14, Y+5	; 0x05
   11f16:	fe 80       	ldd	r15, Y+6	; 0x06
   11f18:	dd cf       	rjmp	.-70     	; 0x11ed4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x18e>

00011f1a <LCDWIKI_GUI::write(unsigned char)>:
_ZN11LCDWIKI_GUI5writeEh():
   11f1a:	af 92       	push	r10
   11f1c:	cf 92       	push	r12
   11f1e:	ef 92       	push	r14
   11f20:	ff 92       	push	r15
   11f22:	0f 93       	push	r16
   11f24:	1f 93       	push	r17
   11f26:	cf 93       	push	r28
   11f28:	df 93       	push	r29
   11f2a:	ec 01       	movw	r28, r24
   11f2c:	6a 30       	cpi	r22, 0x0A	; 10
   11f2e:	c1 f4       	brne	.+48     	; 0x11f60 <LCDWIKI_GUI::write(unsigned char)+0x46>
   11f30:	8c 85       	ldd	r24, Y+12	; 0x0c
   11f32:	98 e0       	ldi	r25, 0x08	; 8
   11f34:	89 9f       	mul	r24, r25
   11f36:	90 01       	movw	r18, r0
   11f38:	11 24       	eor	r1, r1
   11f3a:	8c 81       	ldd	r24, Y+4	; 0x04
   11f3c:	9d 81       	ldd	r25, Y+5	; 0x05
   11f3e:	82 0f       	add	r24, r18
   11f40:	93 1f       	adc	r25, r19
   11f42:	9d 83       	std	Y+5, r25	; 0x05
   11f44:	8c 83       	std	Y+4, r24	; 0x04
   11f46:	1b 82       	std	Y+3, r1	; 0x03
   11f48:	1a 82       	std	Y+2, r1	; 0x02
   11f4a:	81 e0       	ldi	r24, 0x01	; 1
   11f4c:	90 e0       	ldi	r25, 0x00	; 0
   11f4e:	df 91       	pop	r29
   11f50:	cf 91       	pop	r28
   11f52:	1f 91       	pop	r17
   11f54:	0f 91       	pop	r16
   11f56:	ff 90       	pop	r15
   11f58:	ef 90       	pop	r14
   11f5a:	cf 90       	pop	r12
   11f5c:	af 90       	pop	r10
   11f5e:	08 95       	ret
   11f60:	6d 30       	cpi	r22, 0x0D	; 13
   11f62:	99 f3       	breq	.-26     	; 0x11f4a <LCDWIKI_GUI::write(unsigned char)+0x30>
   11f64:	26 2f       	mov	r18, r22
   11f66:	e8 84       	ldd	r14, Y+8	; 0x08
   11f68:	f9 84       	ldd	r15, Y+9	; 0x09
   11f6a:	0e 81       	ldd	r16, Y+6	; 0x06
   11f6c:	1f 81       	ldd	r17, Y+7	; 0x07
   11f6e:	4c 81       	ldd	r20, Y+4	; 0x04
   11f70:	5d 81       	ldd	r21, Y+5	; 0x05
   11f72:	6a 81       	ldd	r22, Y+2	; 0x02
   11f74:	7b 81       	ldd	r23, Y+3	; 0x03
   11f76:	ad 84       	ldd	r10, Y+13	; 0x0d
   11f78:	cc 84       	ldd	r12, Y+12	; 0x0c
   11f7a:	0e 94 a3 8e 	call	0x11d46	; 0x11d46 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)>
   11f7e:	2c 85       	ldd	r18, Y+12	; 0x0c
   11f80:	8a 81       	ldd	r24, Y+2	; 0x02
   11f82:	9b 81       	ldd	r25, Y+3	; 0x03
   11f84:	36 e0       	ldi	r19, 0x06	; 6
   11f86:	23 9f       	mul	r18, r19
   11f88:	80 0d       	add	r24, r0
   11f8a:	91 1d       	adc	r25, r1
   11f8c:	11 24       	eor	r1, r1
   11f8e:	9b 83       	std	Y+3, r25	; 0x03
   11f90:	8a 83       	std	Y+2, r24	; 0x02
   11f92:	db cf       	rjmp	.-74     	; 0x11f4a <LCDWIKI_GUI::write(unsigned char)+0x30>

00011f94 <LCDWIKI_GUI::Get_Display_Width() const>:
_ZNK11LCDWIKI_GUI17Get_Display_WidthEv():
   11f94:	dc 01       	movw	r26, r24
   11f96:	ed 91       	ld	r30, X+
   11f98:	fc 91       	ld	r31, X
   11f9a:	06 84       	ldd	r0, Z+14	; 0x0e
   11f9c:	f7 85       	ldd	r31, Z+15	; 0x0f
   11f9e:	e0 2d       	mov	r30, r0
   11fa0:	19 94       	eijmp

00011fa2 <LCDWIKI_GUI::Print(unsigned char*, int, int)>:
_ZN11LCDWIKI_GUI5PrintEPhii():
   11fa2:	af 92       	push	r10
   11fa4:	bf 92       	push	r11
   11fa6:	cf 92       	push	r12
   11fa8:	df 92       	push	r13
   11faa:	ef 92       	push	r14
   11fac:	ff 92       	push	r15
   11fae:	0f 93       	push	r16
   11fb0:	1f 93       	push	r17
   11fb2:	cf 93       	push	r28
   11fb4:	df 93       	push	r29
   11fb6:	ec 01       	movw	r28, r24
   11fb8:	6b 01       	movw	r12, r22
   11fba:	8a 01       	movw	r16, r20
   11fbc:	79 01       	movw	r14, r18
   11fbe:	ca 01       	movw	r24, r20
   11fc0:	8e 50       	subi	r24, 0x0E	; 14
   11fc2:	97 42       	sbci	r25, 0x27	; 39
   11fc4:	02 97       	sbiw	r24, 0x02	; 2
   11fc6:	00 f5       	brcc	.+64     	; 0x12008 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x66>
   11fc8:	fb 01       	movw	r30, r22
   11fca:	01 90       	ld	r0, Z+
   11fcc:	00 20       	and	r0, r0
   11fce:	e9 f7       	brne	.-6      	; 0x11fca <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x28>
   11fd0:	31 97       	sbiw	r30, 0x01	; 1
   11fd2:	e6 1b       	sub	r30, r22
   11fd4:	f7 0b       	sbc	r31, r23
   11fd6:	8c 85       	ldd	r24, Y+12	; 0x0c
   11fd8:	26 e0       	ldi	r18, 0x06	; 6
   11fda:	82 9f       	mul	r24, r18
   11fdc:	c0 01       	movw	r24, r0
   11fde:	11 24       	eor	r1, r1
   11fe0:	8e 9f       	mul	r24, r30
   11fe2:	50 01       	movw	r10, r0
   11fe4:	8f 9f       	mul	r24, r31
   11fe6:	b0 0c       	add	r11, r0
   11fe8:	9e 9f       	mul	r25, r30
   11fea:	b0 0c       	add	r11, r0
   11fec:	11 24       	eor	r1, r1
   11fee:	ce 01       	movw	r24, r28
   11ff0:	0e 94 ca 8f 	call	0x11f94	; 0x11f94 <LCDWIKI_GUI::Get_Display_Width() const>
   11ff4:	8a 19       	sub	r24, r10
   11ff6:	9b 09       	sbc	r25, r11
   11ff8:	0e 30       	cpi	r16, 0x0E	; 14
   11ffa:	17 42       	sbci	r17, 0x27	; 39
   11ffc:	19 f5       	brne	.+70     	; 0x12044 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0xa2>
   11ffe:	97 fd       	sbrc	r25, 7
   12000:	01 96       	adiw	r24, 0x01	; 1
   12002:	8c 01       	movw	r16, r24
   12004:	15 95       	asr	r17
   12006:	07 95       	ror	r16
_ZN11LCDWIKI_GUI15Set_Text_CousurEii():
   12008:	1b 83       	std	Y+3, r17	; 0x03
   1200a:	0a 83       	std	Y+2, r16	; 0x02
   1200c:	fd 82       	std	Y+5, r15	; 0x05
   1200e:	ec 82       	std	Y+4, r14	; 0x04
   12010:	86 01       	movw	r16, r12
   12012:	78 01       	movw	r14, r16
   12014:	ec 18       	sub	r14, r12
   12016:	fd 08       	sbc	r15, r13
_ZN11LCDWIKI_GUI5PrintEPhii():
   12018:	f8 01       	movw	r30, r16
   1201a:	61 91       	ld	r22, Z+
   1201c:	8f 01       	movw	r16, r30
   1201e:	66 23       	and	r22, r22
   12020:	29 f0       	breq	.+10     	; 0x1202c <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x8a>
   12022:	ce 01       	movw	r24, r28
   12024:	0e 94 8d 8f 	call	0x11f1a	; 0x11f1a <LCDWIKI_GUI::write(unsigned char)>
   12028:	89 2b       	or	r24, r25
   1202a:	99 f7       	brne	.-26     	; 0x12012 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x70>
   1202c:	c7 01       	movw	r24, r14
   1202e:	df 91       	pop	r29
   12030:	cf 91       	pop	r28
   12032:	1f 91       	pop	r17
   12034:	0f 91       	pop	r16
   12036:	ff 90       	pop	r15
   12038:	ef 90       	pop	r14
   1203a:	df 90       	pop	r13
   1203c:	cf 90       	pop	r12
   1203e:	bf 90       	pop	r11
   12040:	af 90       	pop	r10
   12042:	08 95       	ret
   12044:	8c 01       	movw	r16, r24
   12046:	01 50       	subi	r16, 0x01	; 1
   12048:	11 09       	sbc	r17, r1
   1204a:	de cf       	rjmp	.-68     	; 0x12008 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x66>

0001204c <LCDWIKI_GUI::Print_String(String, int, int)>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii():
   1204c:	fb 01       	movw	r30, r22
   1204e:	60 81       	ld	r22, Z
   12050:	71 81       	ldd	r23, Z+1	; 0x01
   12052:	0c 94 d1 8f 	jmp	0x11fa2	; 0x11fa2 <LCDWIKI_GUI::Print(unsigned char*, int, int)>

00012056 <LCDWIKI_GUI::Get_Display_Height() const>:
_ZNK11LCDWIKI_GUI18Get_Display_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:817
}

//get lcd height 
int16_t LCDWIKI_GUI::Get_Display_Height(void) const
{
	return Get_Height();
   12056:	dc 01       	movw	r26, r24
   12058:	ed 91       	ld	r30, X+
   1205a:	fc 91       	ld	r31, X
   1205c:	04 84       	ldd	r0, Z+12	; 0x0c
   1205e:	f5 85       	ldd	r31, Z+13	; 0x0d
   12060:	e0 2d       	mov	r30, r0
   12062:	19 94       	eijmp

00012064 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:951
		{
			Write_Cmd_Data(cmd, d);                      //static function
        }
        size -= 2 * sizeof(int16_t);
    }
}
   12064:	0f 93       	push	r16
   12066:	cf 93       	push	r28
   12068:	df 93       	push	r29
   1206a:	dc 01       	movw	r26, r24
   1206c:	01 70       	andi	r16, 0x01	; 1
   1206e:	9e 96       	adiw	r26, 0x2e	; 46
   12070:	ed 91       	ld	r30, X+
   12072:	fc 91       	ld	r31, X
   12074:	9f 97       	sbiw	r26, 0x2f	; 47
   12076:	80 81       	ld	r24, Z
   12078:	da 96       	adiw	r26, 0x3a	; 58
   1207a:	9c 91       	ld	r25, X
   1207c:	da 97       	sbiw	r26, 0x3a	; 58
   1207e:	89 23       	and	r24, r25
   12080:	80 83       	st	Z, r24
   12082:	22 23       	and	r18, r18
   12084:	09 f4       	brne	.+2      	; 0x12088 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
   12086:	5b c0       	rjmp	.+182    	; 0x1213e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
   12088:	58 96       	adiw	r26, 0x18	; 24
   1208a:	8d 91       	ld	r24, X+
   1208c:	9c 91       	ld	r25, X
   1208e:	59 97       	sbiw	r26, 0x19	; 25
   12090:	89 2b       	or	r24, r25
   12092:	49 f5       	brne	.+82     	; 0x120e6 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
   12094:	d0 96       	adiw	r26, 0x30	; 48
   12096:	ed 91       	ld	r30, X+
   12098:	fc 91       	ld	r31, X
   1209a:	d1 97       	sbiw	r26, 0x31	; 49
   1209c:	80 81       	ld	r24, Z
   1209e:	db 96       	adiw	r26, 0x3b	; 59
   120a0:	9c 91       	ld	r25, X
   120a2:	db 97       	sbiw	r26, 0x3b	; 59
   120a4:	89 23       	and	r24, r25
   120a6:	80 83       	st	Z, r24
   120a8:	12 b8       	out	0x02, r1	; 2
   120aa:	d2 96       	adiw	r26, 0x32	; 50
   120ac:	ed 91       	ld	r30, X+
   120ae:	fc 91       	ld	r31, X
   120b0:	d3 97       	sbiw	r26, 0x33	; 51
   120b2:	80 81       	ld	r24, Z
   120b4:	dc 96       	adiw	r26, 0x3c	; 60
   120b6:	9c 91       	ld	r25, X
   120b8:	dc 97       	sbiw	r26, 0x3c	; 60
   120ba:	89 23       	and	r24, r25
   120bc:	80 83       	st	Z, r24
   120be:	d2 96       	adiw	r26, 0x32	; 50
   120c0:	ed 91       	ld	r30, X+
   120c2:	fc 91       	ld	r31, X
   120c4:	d3 97       	sbiw	r26, 0x33	; 51
   120c6:	80 81       	ld	r24, Z
   120c8:	d8 96       	adiw	r26, 0x38	; 56
   120ca:	9c 91       	ld	r25, X
   120cc:	d8 97       	sbiw	r26, 0x38	; 56
   120ce:	89 2b       	or	r24, r25
   120d0:	80 83       	st	Z, r24
   120d2:	d0 96       	adiw	r26, 0x30	; 48
   120d4:	ed 91       	ld	r30, X+
   120d6:	fc 91       	ld	r31, X
   120d8:	d1 97       	sbiw	r26, 0x31	; 49
   120da:	80 81       	ld	r24, Z
   120dc:	d7 96       	adiw	r26, 0x37	; 55
   120de:	9c 91       	ld	r25, X
   120e0:	d7 97       	sbiw	r26, 0x37	; 55
   120e2:	89 2b       	or	r24, r25
   120e4:	80 83       	st	Z, r24
   120e6:	d0 96       	adiw	r26, 0x30	; 48
   120e8:	ed 91       	ld	r30, X+
   120ea:	fc 91       	ld	r31, X
   120ec:	d1 97       	sbiw	r26, 0x31	; 49
   120ee:	80 81       	ld	r24, Z
   120f0:	db 96       	adiw	r26, 0x3b	; 59
   120f2:	9c 91       	ld	r25, X
   120f4:	db 97       	sbiw	r26, 0x3b	; 59
   120f6:	89 23       	and	r24, r25
   120f8:	80 83       	st	Z, r24
   120fa:	90 96       	adiw	r26, 0x20	; 32
   120fc:	8c 91       	ld	r24, X
   120fe:	90 97       	sbiw	r26, 0x20	; 32
   12100:	82 b9       	out	0x02, r24	; 2
   12102:	d2 96       	adiw	r26, 0x32	; 50
   12104:	ed 91       	ld	r30, X+
   12106:	fc 91       	ld	r31, X
   12108:	d3 97       	sbiw	r26, 0x33	; 51
   1210a:	80 81       	ld	r24, Z
   1210c:	dc 96       	adiw	r26, 0x3c	; 60
   1210e:	9c 91       	ld	r25, X
   12110:	dc 97       	sbiw	r26, 0x3c	; 60
   12112:	89 23       	and	r24, r25
   12114:	80 83       	st	Z, r24
   12116:	d2 96       	adiw	r26, 0x32	; 50
   12118:	ed 91       	ld	r30, X+
   1211a:	fc 91       	ld	r31, X
   1211c:	d3 97       	sbiw	r26, 0x33	; 51
   1211e:	80 81       	ld	r24, Z
   12120:	d8 96       	adiw	r26, 0x38	; 56
   12122:	9c 91       	ld	r25, X
   12124:	d8 97       	sbiw	r26, 0x38	; 56
   12126:	89 2b       	or	r24, r25
   12128:	80 83       	st	Z, r24
   1212a:	d0 96       	adiw	r26, 0x30	; 48
   1212c:	ed 91       	ld	r30, X+
   1212e:	fc 91       	ld	r31, X
   12130:	d1 97       	sbiw	r26, 0x31	; 49
   12132:	80 81       	ld	r24, Z
   12134:	d7 96       	adiw	r26, 0x37	; 55
   12136:	9c 91       	ld	r25, X
   12138:	d7 97       	sbiw	r26, 0x37	; 55
   1213a:	89 2b       	or	r24, r25
   1213c:	80 83       	st	Z, r24
   1213e:	eb 01       	movw	r28, r22
   12140:	ca 01       	movw	r24, r20
   12142:	18 16       	cp	r1, r24
   12144:	19 06       	cpc	r1, r25
   12146:	bc f5       	brge	.+110    	; 0x121b6 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
   12148:	00 23       	and	r16, r16
   1214a:	91 f1       	breq	.+100    	; 0x121b0 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
   1214c:	fe 01       	movw	r30, r28
   1214e:	45 91       	lpm	r20, Z+
   12150:	54 91       	lpm	r21, Z
   12152:	34 2f       	mov	r19, r20
   12154:	25 2f       	mov	r18, r21
   12156:	22 b9       	out	0x02, r18	; 2
   12158:	d2 96       	adiw	r26, 0x32	; 50
   1215a:	ed 91       	ld	r30, X+
   1215c:	fc 91       	ld	r31, X
   1215e:	d3 97       	sbiw	r26, 0x33	; 51
   12160:	20 81       	ld	r18, Z
   12162:	dc 96       	adiw	r26, 0x3c	; 60
   12164:	4c 91       	ld	r20, X
   12166:	dc 97       	sbiw	r26, 0x3c	; 60
   12168:	24 23       	and	r18, r20
   1216a:	20 83       	st	Z, r18
   1216c:	d2 96       	adiw	r26, 0x32	; 50
   1216e:	ed 91       	ld	r30, X+
   12170:	fc 91       	ld	r31, X
   12172:	d3 97       	sbiw	r26, 0x33	; 51
   12174:	20 81       	ld	r18, Z
   12176:	d8 96       	adiw	r26, 0x38	; 56
   12178:	4c 91       	ld	r20, X
   1217a:	d8 97       	sbiw	r26, 0x38	; 56
   1217c:	24 2b       	or	r18, r20
   1217e:	20 83       	st	Z, r18
   12180:	32 b9       	out	0x02, r19	; 2
   12182:	d2 96       	adiw	r26, 0x32	; 50
   12184:	ed 91       	ld	r30, X+
   12186:	fc 91       	ld	r31, X
   12188:	d3 97       	sbiw	r26, 0x33	; 51
   1218a:	20 81       	ld	r18, Z
   1218c:	dc 96       	adiw	r26, 0x3c	; 60
   1218e:	3c 91       	ld	r19, X
   12190:	dc 97       	sbiw	r26, 0x3c	; 60
   12192:	23 23       	and	r18, r19
   12194:	20 83       	st	Z, r18
   12196:	d2 96       	adiw	r26, 0x32	; 50
   12198:	ed 91       	ld	r30, X+
   1219a:	fc 91       	ld	r31, X
   1219c:	d3 97       	sbiw	r26, 0x33	; 51
   1219e:	20 81       	ld	r18, Z
   121a0:	d8 96       	adiw	r26, 0x38	; 56
   121a2:	3c 91       	ld	r19, X
   121a4:	d8 97       	sbiw	r26, 0x38	; 56
   121a6:	23 2b       	or	r18, r19
   121a8:	20 83       	st	Z, r18
   121aa:	22 96       	adiw	r28, 0x02	; 2
   121ac:	01 97       	sbiw	r24, 0x01	; 1
   121ae:	c9 cf       	rjmp	.-110    	; 0x12142 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
   121b0:	38 81       	ld	r19, Y
   121b2:	29 81       	ldd	r18, Y+1	; 0x01
   121b4:	d0 cf       	rjmp	.-96     	; 0x12156 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
   121b6:	9e 96       	adiw	r26, 0x2e	; 46
   121b8:	ed 91       	ld	r30, X+
   121ba:	fc 91       	ld	r31, X
   121bc:	9f 97       	sbiw	r26, 0x2f	; 47
   121be:	80 81       	ld	r24, Z
   121c0:	d6 96       	adiw	r26, 0x36	; 54
   121c2:	9c 91       	ld	r25, X
   121c4:	89 2b       	or	r24, r25
   121c6:	80 83       	st	Z, r24
   121c8:	df 91       	pop	r29
   121ca:	cf 91       	pop	r28
   121cc:	0f 91       	pop	r16
   121ce:	08 95       	ret

000121d0 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
   121d0:	38 e0       	ldi	r19, 0x08	; 8
   121d2:	43 9f       	mul	r20, r19
   121d4:	c0 01       	movw	r24, r0
   121d6:	11 24       	eor	r1, r1
   121d8:	80 7e       	andi	r24, 0xE0	; 224
   121da:	97 70       	andi	r25, 0x07	; 7
   121dc:	26 95       	lsr	r18
   121de:	26 95       	lsr	r18
   121e0:	26 95       	lsr	r18
   121e2:	82 2b       	or	r24, r18
   121e4:	70 e0       	ldi	r23, 0x00	; 0
   121e6:	76 2f       	mov	r23, r22
   121e8:	66 27       	eor	r22, r22
   121ea:	66 27       	eor	r22, r22
   121ec:	78 7f       	andi	r23, 0xF8	; 248
   121ee:	86 2b       	or	r24, r22
   121f0:	97 2b       	or	r25, r23
   121f2:	08 95       	ret

000121f4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
   121f4:	7f 92       	push	r7
   121f6:	8f 92       	push	r8
   121f8:	9f 92       	push	r9
   121fa:	af 92       	push	r10
   121fc:	bf 92       	push	r11
   121fe:	cf 92       	push	r12
   12200:	df 92       	push	r13
   12202:	ef 92       	push	r14
   12204:	ff 92       	push	r15
   12206:	0f 93       	push	r16
   12208:	1f 93       	push	r17
   1220a:	cf 93       	push	r28
   1220c:	df 93       	push	r29
   1220e:	ec 01       	movw	r28, r24
   12210:	59 01       	movw	r10, r18
   12212:	98 01       	movw	r18, r16
   12214:	0e 9d       	mul	r16, r14
   12216:	60 01       	movw	r12, r0
   12218:	0f 9d       	mul	r16, r15
   1221a:	d0 0c       	add	r13, r0
   1221c:	1e 9d       	mul	r17, r14
   1221e:	d0 0c       	add	r13, r0
   12220:	11 24       	eor	r1, r1
   12222:	87 01       	movw	r16, r14
   12224:	04 0f       	add	r16, r20
   12226:	15 1f       	adc	r17, r21
   12228:	01 50       	subi	r16, 0x01	; 1
   1222a:	11 09       	sbc	r17, r1
   1222c:	26 0f       	add	r18, r22
   1222e:	37 1f       	adc	r19, r23
   12230:	21 50       	subi	r18, 0x01	; 1
   12232:	31 09       	sbc	r19, r1
   12234:	e8 81       	ld	r30, Y
   12236:	f9 81       	ldd	r31, Y+1	; 0x01
   12238:	06 80       	ldd	r0, Z+6	; 0x06
   1223a:	f7 81       	ldd	r31, Z+7	; 0x07
   1223c:	e0 2d       	mov	r30, r0
   1223e:	19 95       	eicall
   12240:	77 24       	eor	r7, r7
   12242:	7a 94       	dec	r7
   12244:	1c 14       	cp	r1, r12
   12246:	1d 04       	cpc	r1, r13
   12248:	0c f0       	brlt	.+2      	; 0x1224c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
   1224a:	0a c1       	rjmp	.+532    	; 0x12460 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
   1224c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1224e:	ff a5       	ldd	r31, Y+47	; 0x2f
   12250:	80 81       	ld	r24, Z
   12252:	9a ad       	ldd	r25, Y+58	; 0x3a
   12254:	89 23       	and	r24, r25
   12256:	80 83       	st	Z, r24
   12258:	e8 a9       	ldd	r30, Y+48	; 0x30
   1225a:	f9 a9       	ldd	r31, Y+49	; 0x31
   1225c:	80 81       	ld	r24, Z
   1225e:	9b ad       	ldd	r25, Y+59	; 0x3b
   12260:	89 23       	and	r24, r25
   12262:	80 83       	st	Z, r24
   12264:	9a a1       	ldd	r25, Y+34	; 0x22
   12266:	8b a1       	ldd	r24, Y+35	; 0x23
   12268:	82 b9       	out	0x02, r24	; 2
   1226a:	ea a9       	ldd	r30, Y+50	; 0x32
   1226c:	fb a9       	ldd	r31, Y+51	; 0x33
   1226e:	80 81       	ld	r24, Z
   12270:	2c ad       	ldd	r18, Y+60	; 0x3c
   12272:	82 23       	and	r24, r18
   12274:	80 83       	st	Z, r24
   12276:	ea a9       	ldd	r30, Y+50	; 0x32
   12278:	fb a9       	ldd	r31, Y+51	; 0x33
   1227a:	80 81       	ld	r24, Z
   1227c:	28 ad       	ldd	r18, Y+56	; 0x38
   1227e:	82 2b       	or	r24, r18
   12280:	80 83       	st	Z, r24
   12282:	92 b9       	out	0x02, r25	; 2
   12284:	ea a9       	ldd	r30, Y+50	; 0x32
   12286:	fb a9       	ldd	r31, Y+51	; 0x33
   12288:	80 81       	ld	r24, Z
   1228a:	9c ad       	ldd	r25, Y+60	; 0x3c
   1228c:	89 23       	and	r24, r25
   1228e:	80 83       	st	Z, r24
   12290:	ea a9       	ldd	r30, Y+50	; 0x32
   12292:	fb a9       	ldd	r31, Y+51	; 0x33
   12294:	80 81       	ld	r24, Z
   12296:	98 ad       	ldd	r25, Y+56	; 0x38
   12298:	89 2b       	or	r24, r25
   1229a:	80 83       	st	Z, r24
   1229c:	e8 a9       	ldd	r30, Y+48	; 0x30
   1229e:	f9 a9       	ldd	r31, Y+49	; 0x31
   122a0:	80 81       	ld	r24, Z
   122a2:	9f a9       	ldd	r25, Y+55	; 0x37
   122a4:	89 2b       	or	r24, r25
   122a6:	80 83       	st	Z, r24
   122a8:	81 b1       	in	r24, 0x01	; 1
   122aa:	11 b8       	out	0x01, r1	; 1
   122ac:	88 8d       	ldd	r24, Y+24	; 0x18
   122ae:	99 8d       	ldd	r25, Y+25	; 0x19
   122b0:	89 2b       	or	r24, r25
   122b2:	09 f0       	breq	.+2      	; 0x122b6 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
   122b4:	67 c0       	rjmp	.+206    	; 0x12384 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
   122b6:	f5 01       	movw	r30, r10
   122b8:	c6 01       	movw	r24, r12
   122ba:	42 e0       	ldi	r20, 0x02	; 2
   122bc:	50 e0       	ldi	r21, 0x00	; 0
   122be:	ac a9       	ldd	r26, Y+52	; 0x34
   122c0:	bd a9       	ldd	r27, Y+53	; 0x35
   122c2:	2c 91       	ld	r18, X
   122c4:	3d ad       	ldd	r19, Y+61	; 0x3d
   122c6:	23 23       	and	r18, r19
   122c8:	2c 93       	st	X, r18
   122ca:	20 b1       	in	r18, 0x00	; 0
   122cc:	ac a9       	ldd	r26, Y+52	; 0x34
   122ce:	bd a9       	ldd	r27, Y+53	; 0x35
   122d0:	2c 91       	ld	r18, X
   122d2:	39 ad       	ldd	r19, Y+57	; 0x39
   122d4:	23 2b       	or	r18, r19
   122d6:	2c 93       	st	X, r18
   122d8:	ac a9       	ldd	r26, Y+52	; 0x34
   122da:	bd a9       	ldd	r27, Y+53	; 0x35
   122dc:	2c 91       	ld	r18, X
   122de:	3d ad       	ldd	r19, Y+61	; 0x3d
   122e0:	23 23       	and	r18, r19
   122e2:	2c 93       	st	X, r18
   122e4:	20 b1       	in	r18, 0x00	; 0
   122e6:	ac a9       	ldd	r26, Y+52	; 0x34
   122e8:	bd a9       	ldd	r27, Y+53	; 0x35
   122ea:	2c 91       	ld	r18, X
   122ec:	39 ad       	ldd	r19, Y+57	; 0x39
   122ee:	23 2b       	or	r18, r19
   122f0:	2c 93       	st	X, r18
   122f2:	ac a9       	ldd	r26, Y+52	; 0x34
   122f4:	bd a9       	ldd	r27, Y+53	; 0x35
   122f6:	2c 91       	ld	r18, X
   122f8:	3d ad       	ldd	r19, Y+61	; 0x3d
   122fa:	23 23       	and	r18, r19
   122fc:	2c 93       	st	X, r18
   122fe:	20 b1       	in	r18, 0x00	; 0
   12300:	ac a9       	ldd	r26, Y+52	; 0x34
   12302:	bd a9       	ldd	r27, Y+53	; 0x35
   12304:	3c 91       	ld	r19, X
   12306:	69 ad       	ldd	r22, Y+57	; 0x39
   12308:	36 2b       	or	r19, r22
   1230a:	3c 93       	st	X, r19
   1230c:	ac a9       	ldd	r26, Y+52	; 0x34
   1230e:	bd a9       	ldd	r27, Y+53	; 0x35
   12310:	3c 91       	ld	r19, X
   12312:	6d ad       	ldd	r22, Y+61	; 0x3d
   12314:	36 23       	and	r19, r22
   12316:	3c 93       	st	X, r19
   12318:	60 b1       	in	r22, 0x00	; 0
   1231a:	ac a9       	ldd	r26, Y+52	; 0x34
   1231c:	bd a9       	ldd	r27, Y+53	; 0x35
   1231e:	3c 91       	ld	r19, X
   12320:	79 ad       	ldd	r23, Y+57	; 0x39
   12322:	37 2b       	or	r19, r23
   12324:	3c 93       	st	X, r19
   12326:	41 30       	cpi	r20, 0x01	; 1
   12328:	51 05       	cpc	r21, r1
   1232a:	49 f5       	brne	.+82     	; 0x1237e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
   1232c:	32 2f       	mov	r19, r18
   1232e:	26 2f       	mov	r18, r22
   12330:	21 93       	st	Z+, r18
   12332:	31 93       	st	Z+, r19
   12334:	01 97       	sbiw	r24, 0x01	; 1
   12336:	09 f0       	breq	.+2      	; 0x1233a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
   12338:	c0 cf       	rjmp	.-128    	; 0x122ba <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
   1233a:	cc 0c       	add	r12, r12
   1233c:	dd 1c       	adc	r13, r13
   1233e:	ac 0c       	add	r10, r12
   12340:	bd 1c       	adc	r11, r13
   12342:	0c 89       	ldd	r16, Y+20	; 0x14
   12344:	1d 89       	ldd	r17, Y+21	; 0x15
   12346:	01 50       	subi	r16, 0x01	; 1
   12348:	11 09       	sbc	r17, r1
   1234a:	2a 89       	ldd	r18, Y+18	; 0x12
   1234c:	3b 89       	ldd	r19, Y+19	; 0x13
   1234e:	21 50       	subi	r18, 0x01	; 1
   12350:	31 09       	sbc	r19, r1
   12352:	e8 81       	ld	r30, Y
   12354:	f9 81       	ldd	r31, Y+1	; 0x01
   12356:	06 80       	ldd	r0, Z+6	; 0x06
   12358:	f7 81       	ldd	r31, Z+7	; 0x07
   1235a:	e0 2d       	mov	r30, r0
   1235c:	50 e0       	ldi	r21, 0x00	; 0
   1235e:	40 e0       	ldi	r20, 0x00	; 0
   12360:	70 e0       	ldi	r23, 0x00	; 0
   12362:	60 e0       	ldi	r22, 0x00	; 0
   12364:	ce 01       	movw	r24, r28
   12366:	19 95       	eicall
   12368:	ee a5       	ldd	r30, Y+46	; 0x2e
   1236a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1236c:	80 81       	ld	r24, Z
   1236e:	9e a9       	ldd	r25, Y+54	; 0x36
   12370:	89 2b       	or	r24, r25
   12372:	80 83       	st	Z, r24
   12374:	81 b1       	in	r24, 0x01	; 1
   12376:	71 b8       	out	0x01, r7	; 1
   12378:	d1 2c       	mov	r13, r1
   1237a:	c1 2c       	mov	r12, r1
   1237c:	63 cf       	rjmp	.-314    	; 0x12244 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
   1237e:	41 e0       	ldi	r20, 0x01	; 1
   12380:	50 e0       	ldi	r21, 0x00	; 0
   12382:	9d cf       	rjmp	.-198    	; 0x122be <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
   12384:	ec a9       	ldd	r30, Y+52	; 0x34
   12386:	fd a9       	ldd	r31, Y+53	; 0x35
   12388:	80 81       	ld	r24, Z
   1238a:	9d ad       	ldd	r25, Y+61	; 0x3d
   1238c:	89 23       	and	r24, r25
   1238e:	80 83       	st	Z, r24
   12390:	80 b1       	in	r24, 0x00	; 0
   12392:	ec a9       	ldd	r30, Y+52	; 0x34
   12394:	fd a9       	ldd	r31, Y+53	; 0x35
   12396:	80 81       	ld	r24, Z
   12398:	99 ad       	ldd	r25, Y+57	; 0x39
   1239a:	89 2b       	or	r24, r25
   1239c:	80 83       	st	Z, r24
   1239e:	75 01       	movw	r14, r10
   123a0:	86 01       	movw	r16, r12
   123a2:	8c a5       	ldd	r24, Y+44	; 0x2c
   123a4:	9d a5       	ldd	r25, Y+45	; 0x2d
   123a6:	81 30       	cpi	r24, 0x01	; 1
   123a8:	91 05       	cpc	r25, r1
   123aa:	d9 f5       	brne	.+118    	; 0x12422 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
   123ac:	ec a9       	ldd	r30, Y+52	; 0x34
   123ae:	fd a9       	ldd	r31, Y+53	; 0x35
   123b0:	80 81       	ld	r24, Z
   123b2:	9d ad       	ldd	r25, Y+61	; 0x3d
   123b4:	89 23       	and	r24, r25
   123b6:	80 83       	st	Z, r24
   123b8:	60 b1       	in	r22, 0x00	; 0
   123ba:	ec a9       	ldd	r30, Y+52	; 0x34
   123bc:	fd a9       	ldd	r31, Y+53	; 0x35
   123be:	80 81       	ld	r24, Z
   123c0:	99 ad       	ldd	r25, Y+57	; 0x39
   123c2:	89 2b       	or	r24, r25
   123c4:	80 83       	st	Z, r24
   123c6:	ec a9       	ldd	r30, Y+52	; 0x34
   123c8:	fd a9       	ldd	r31, Y+53	; 0x35
   123ca:	80 81       	ld	r24, Z
   123cc:	9d ad       	ldd	r25, Y+61	; 0x3d
   123ce:	89 23       	and	r24, r25
   123d0:	80 83       	st	Z, r24
   123d2:	40 b1       	in	r20, 0x00	; 0
   123d4:	ec a9       	ldd	r30, Y+52	; 0x34
   123d6:	fd a9       	ldd	r31, Y+53	; 0x35
   123d8:	80 81       	ld	r24, Z
   123da:	99 ad       	ldd	r25, Y+57	; 0x39
   123dc:	89 2b       	or	r24, r25
   123de:	80 83       	st	Z, r24
   123e0:	ec a9       	ldd	r30, Y+52	; 0x34
   123e2:	fd a9       	ldd	r31, Y+53	; 0x35
   123e4:	80 81       	ld	r24, Z
   123e6:	9d ad       	ldd	r25, Y+61	; 0x3d
   123e8:	89 23       	and	r24, r25
   123ea:	80 83       	st	Z, r24
   123ec:	20 b1       	in	r18, 0x00	; 0
   123ee:	ec a9       	ldd	r30, Y+52	; 0x34
   123f0:	fd a9       	ldd	r31, Y+53	; 0x35
   123f2:	80 81       	ld	r24, Z
   123f4:	99 ad       	ldd	r25, Y+57	; 0x39
   123f6:	89 2b       	or	r24, r25
   123f8:	80 83       	st	Z, r24
   123fa:	e8 81       	ld	r30, Y
   123fc:	f9 81       	ldd	r31, Y+1	; 0x01
   123fe:	01 90       	ld	r0, Z+
   12400:	f0 81       	ld	r31, Z
   12402:	e0 2d       	mov	r30, r0
   12404:	ce 01       	movw	r24, r28
   12406:	19 95       	eicall
   12408:	4c 01       	movw	r8, r24
   1240a:	f7 01       	movw	r30, r14
   1240c:	81 92       	st	Z+, r8
   1240e:	91 92       	st	Z+, r9
   12410:	7f 01       	movw	r14, r30
   12412:	01 50       	subi	r16, 0x01	; 1
   12414:	11 09       	sbc	r17, r1
   12416:	29 f6       	brne	.-118    	; 0x123a2 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
   12418:	cc 0c       	add	r12, r12
   1241a:	dd 1c       	adc	r13, r13
   1241c:	ac 0c       	add	r10, r12
   1241e:	bd 1c       	adc	r11, r13
   12420:	a3 cf       	rjmp	.-186    	; 0x12368 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
   12422:	89 2b       	or	r24, r25
   12424:	91 f7       	brne	.-28     	; 0x1240a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
   12426:	ec a9       	ldd	r30, Y+52	; 0x34
   12428:	fd a9       	ldd	r31, Y+53	; 0x35
   1242a:	80 81       	ld	r24, Z
   1242c:	9d ad       	ldd	r25, Y+61	; 0x3d
   1242e:	89 23       	and	r24, r25
   12430:	80 83       	st	Z, r24
   12432:	80 b0       	in	r8, 0x00	; 0
   12434:	ec a9       	ldd	r30, Y+52	; 0x34
   12436:	fd a9       	ldd	r31, Y+53	; 0x35
   12438:	80 81       	ld	r24, Z
   1243a:	99 ad       	ldd	r25, Y+57	; 0x39
   1243c:	89 2b       	or	r24, r25
   1243e:	80 83       	st	Z, r24
   12440:	ec a9       	ldd	r30, Y+52	; 0x34
   12442:	fd a9       	ldd	r31, Y+53	; 0x35
   12444:	80 81       	ld	r24, Z
   12446:	9d ad       	ldd	r25, Y+61	; 0x3d
   12448:	89 23       	and	r24, r25
   1244a:	80 83       	st	Z, r24
   1244c:	90 b1       	in	r25, 0x00	; 0
   1244e:	ec a9       	ldd	r30, Y+52	; 0x34
   12450:	fd a9       	ldd	r31, Y+53	; 0x35
   12452:	80 81       	ld	r24, Z
   12454:	29 ad       	ldd	r18, Y+57	; 0x39
   12456:	82 2b       	or	r24, r18
   12458:	80 83       	st	Z, r24
   1245a:	98 2c       	mov	r9, r8
   1245c:	89 2e       	mov	r8, r25
   1245e:	d5 cf       	rjmp	.-86     	; 0x1240a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
   12460:	90 e0       	ldi	r25, 0x00	; 0
   12462:	80 e0       	ldi	r24, 0x00	; 0
   12464:	df 91       	pop	r29
   12466:	cf 91       	pop	r28
   12468:	1f 91       	pop	r17
   1246a:	0f 91       	pop	r16
   1246c:	ff 90       	pop	r15
   1246e:	ef 90       	pop	r14
   12470:	df 90       	pop	r13
   12472:	cf 90       	pop	r12
   12474:	bf 90       	pop	r11
   12476:	af 90       	pop	r10
   12478:	9f 90       	pop	r9
   1247a:	8f 90       	pop	r8
   1247c:	7f 90       	pop	r7
   1247e:	08 95       	ret

00012480 <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
   12480:	fc 01       	movw	r30, r24
   12482:	82 89       	ldd	r24, Z+18	; 0x12
   12484:	93 89       	ldd	r25, Z+19	; 0x13
   12486:	08 95       	ret

00012488 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
   12488:	fc 01       	movw	r30, r24
   1248a:	84 89       	ldd	r24, Z+20	; 0x14
   1248c:	95 89       	ldd	r25, Z+21	; 0x15
   1248e:	08 95       	ret

00012490 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
   12490:	af 92       	push	r10
   12492:	bf 92       	push	r11
   12494:	cf 92       	push	r12
   12496:	df 92       	push	r13
   12498:	ef 92       	push	r14
   1249a:	ff 92       	push	r15
   1249c:	0f 93       	push	r16
   1249e:	1f 93       	push	r17
   124a0:	cf 93       	push	r28
   124a2:	df 93       	push	r29
   124a4:	77 fd       	sbrc	r23, 7
   124a6:	75 c0       	rjmp	.+234    	; 0x12592 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   124a8:	57 fd       	sbrc	r21, 7
   124aa:	73 c0       	rjmp	.+230    	; 0x12592 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   124ac:	c3 2e       	mov	r12, r19
   124ae:	d2 2e       	mov	r13, r18
   124b0:	5a 01       	movw	r10, r20
   124b2:	7b 01       	movw	r14, r22
   124b4:	ec 01       	movw	r28, r24
   124b6:	e8 81       	ld	r30, Y
   124b8:	f9 81       	ldd	r31, Y+1	; 0x01
   124ba:	06 84       	ldd	r0, Z+14	; 0x0e
   124bc:	f7 85       	ldd	r31, Z+15	; 0x0f
   124be:	e0 2d       	mov	r30, r0
   124c0:	19 95       	eicall
   124c2:	8e 15       	cp	r24, r14
   124c4:	9f 05       	cpc	r25, r15
   124c6:	0c f4       	brge	.+2      	; 0x124ca <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
   124c8:	64 c0       	rjmp	.+200    	; 0x12592 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   124ca:	e8 81       	ld	r30, Y
   124cc:	f9 81       	ldd	r31, Y+1	; 0x01
   124ce:	04 84       	ldd	r0, Z+12	; 0x0c
   124d0:	f5 85       	ldd	r31, Z+13	; 0x0d
   124d2:	e0 2d       	mov	r30, r0
   124d4:	ce 01       	movw	r24, r28
   124d6:	19 95       	eicall
   124d8:	8a 15       	cp	r24, r10
   124da:	9b 05       	cpc	r25, r11
   124dc:	0c f4       	brge	.+2      	; 0x124e0 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
   124de:	59 c0       	rjmp	.+178    	; 0x12592 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   124e0:	e8 81       	ld	r30, Y
   124e2:	f9 81       	ldd	r31, Y+1	; 0x01
   124e4:	06 80       	ldd	r0, Z+6	; 0x06
   124e6:	f7 81       	ldd	r31, Z+7	; 0x07
   124e8:	e0 2d       	mov	r30, r0
   124ea:	85 01       	movw	r16, r10
   124ec:	97 01       	movw	r18, r14
   124ee:	a5 01       	movw	r20, r10
   124f0:	b7 01       	movw	r22, r14
   124f2:	ce 01       	movw	r24, r28
   124f4:	19 95       	eicall
   124f6:	ee a5       	ldd	r30, Y+46	; 0x2e
   124f8:	ff a5       	ldd	r31, Y+47	; 0x2f
   124fa:	80 81       	ld	r24, Z
   124fc:	9a ad       	ldd	r25, Y+58	; 0x3a
   124fe:	89 23       	and	r24, r25
   12500:	80 83       	st	Z, r24
   12502:	98 a1       	ldd	r25, Y+32	; 0x20
   12504:	29 a1       	ldd	r18, Y+33	; 0x21
   12506:	e8 a9       	ldd	r30, Y+48	; 0x30
   12508:	f9 a9       	ldd	r31, Y+49	; 0x31
   1250a:	80 81       	ld	r24, Z
   1250c:	3b ad       	ldd	r19, Y+59	; 0x3b
   1250e:	83 23       	and	r24, r19
   12510:	80 83       	st	Z, r24
   12512:	22 b9       	out	0x02, r18	; 2
   12514:	ea a9       	ldd	r30, Y+50	; 0x32
   12516:	fb a9       	ldd	r31, Y+51	; 0x33
   12518:	80 81       	ld	r24, Z
   1251a:	2c ad       	ldd	r18, Y+60	; 0x3c
   1251c:	82 23       	and	r24, r18
   1251e:	80 83       	st	Z, r24
   12520:	ea a9       	ldd	r30, Y+50	; 0x32
   12522:	fb a9       	ldd	r31, Y+51	; 0x33
   12524:	80 81       	ld	r24, Z
   12526:	28 ad       	ldd	r18, Y+56	; 0x38
   12528:	82 2b       	or	r24, r18
   1252a:	80 83       	st	Z, r24
   1252c:	92 b9       	out	0x02, r25	; 2
   1252e:	ea a9       	ldd	r30, Y+50	; 0x32
   12530:	fb a9       	ldd	r31, Y+51	; 0x33
   12532:	80 81       	ld	r24, Z
   12534:	9c ad       	ldd	r25, Y+60	; 0x3c
   12536:	89 23       	and	r24, r25
   12538:	80 83       	st	Z, r24
   1253a:	ea a9       	ldd	r30, Y+50	; 0x32
   1253c:	fb a9       	ldd	r31, Y+51	; 0x33
   1253e:	80 81       	ld	r24, Z
   12540:	98 ad       	ldd	r25, Y+56	; 0x38
   12542:	89 2b       	or	r24, r25
   12544:	80 83       	st	Z, r24
   12546:	e8 a9       	ldd	r30, Y+48	; 0x30
   12548:	f9 a9       	ldd	r31, Y+49	; 0x31
   1254a:	80 81       	ld	r24, Z
   1254c:	9f a9       	ldd	r25, Y+55	; 0x37
   1254e:	89 2b       	or	r24, r25
   12550:	80 83       	st	Z, r24
   12552:	c2 b8       	out	0x02, r12	; 2
   12554:	ea a9       	ldd	r30, Y+50	; 0x32
   12556:	fb a9       	ldd	r31, Y+51	; 0x33
   12558:	80 81       	ld	r24, Z
   1255a:	9c ad       	ldd	r25, Y+60	; 0x3c
   1255c:	89 23       	and	r24, r25
   1255e:	80 83       	st	Z, r24
   12560:	ea a9       	ldd	r30, Y+50	; 0x32
   12562:	fb a9       	ldd	r31, Y+51	; 0x33
   12564:	80 81       	ld	r24, Z
   12566:	98 ad       	ldd	r25, Y+56	; 0x38
   12568:	89 2b       	or	r24, r25
   1256a:	80 83       	st	Z, r24
   1256c:	d2 b8       	out	0x02, r13	; 2
   1256e:	ea a9       	ldd	r30, Y+50	; 0x32
   12570:	fb a9       	ldd	r31, Y+51	; 0x33
   12572:	80 81       	ld	r24, Z
   12574:	9c ad       	ldd	r25, Y+60	; 0x3c
   12576:	89 23       	and	r24, r25
   12578:	80 83       	st	Z, r24
   1257a:	ea a9       	ldd	r30, Y+50	; 0x32
   1257c:	fb a9       	ldd	r31, Y+51	; 0x33
   1257e:	80 81       	ld	r24, Z
   12580:	98 ad       	ldd	r25, Y+56	; 0x38
   12582:	89 2b       	or	r24, r25
   12584:	80 83       	st	Z, r24
   12586:	ee a5       	ldd	r30, Y+46	; 0x2e
   12588:	ff a5       	ldd	r31, Y+47	; 0x2f
   1258a:	80 81       	ld	r24, Z
   1258c:	9e a9       	ldd	r25, Y+54	; 0x36
   1258e:	89 2b       	or	r24, r25
   12590:	80 83       	st	Z, r24
   12592:	df 91       	pop	r29
   12594:	cf 91       	pop	r28
   12596:	1f 91       	pop	r17
   12598:	0f 91       	pop	r16
   1259a:	ff 90       	pop	r15
   1259c:	ef 90       	pop	r14
   1259e:	df 90       	pop	r13
   125a0:	cf 90       	pop	r12
   125a2:	bf 90       	pop	r11
   125a4:	af 90       	pop	r10
   125a6:	08 95       	ret

000125a8 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBVC2Ejhhhhh():
   125a8:	9f 92       	push	r9
   125aa:	af 92       	push	r10
   125ac:	bf 92       	push	r11
   125ae:	cf 92       	push	r12
   125b0:	df 92       	push	r13
   125b2:	ef 92       	push	r14
   125b4:	ff 92       	push	r15
   125b6:	0f 93       	push	r16
   125b8:	1f 93       	push	r17
   125ba:	cf 93       	push	r28
   125bc:	df 93       	push	r29
   125be:	ec 01       	movw	r28, r24
   125c0:	5b 01       	movw	r10, r22
   125c2:	14 2f       	mov	r17, r20
   125c4:	d2 2e       	mov	r13, r18
   125c6:	9e 2c       	mov	r9, r14
   125c8:	0e 94 a6 8d 	call	0x11b4c	; 0x11b4c <LCDWIKI_GUI::LCDWIKI_GUI()>
   125cc:	8f e2       	ldi	r24, 0x2F	; 47
   125ce:	98 e0       	ldi	r25, 0x08	; 8
   125d0:	99 83       	std	Y+1, r25	; 0x01
   125d2:	88 83       	st	Y, r24
   125d4:	ce ae       	std	Y+62, r12	; 0x3e
   125d6:	61 2f       	mov	r22, r17
   125d8:	70 e0       	ldi	r23, 0x00	; 0
   125da:	fb 01       	movw	r30, r22
   125dc:	ec 53       	subi	r30, 0x3C	; 60
   125de:	fe 49       	sbci	r31, 0x9E	; 158
   125e0:	e4 91       	lpm	r30, Z
   125e2:	f0 e0       	ldi	r31, 0x00	; 0
   125e4:	ee 0f       	add	r30, r30
   125e6:	ff 1f       	adc	r31, r31
   125e8:	e6 5f       	subi	r30, 0xF6	; 246
   125ea:	fd 49       	sbci	r31, 0x9D	; 157
   125ec:	a5 91       	lpm	r26, Z+
   125ee:	b4 91       	lpm	r27, Z
   125f0:	bf a7       	std	Y+47, r27	; 0x2f
   125f2:	ae a7       	std	Y+46, r26	; 0x2e
   125f4:	4d 2d       	mov	r20, r13
   125f6:	50 e0       	ldi	r21, 0x00	; 0
   125f8:	fa 01       	movw	r30, r20
   125fa:	ec 53       	subi	r30, 0x3C	; 60
   125fc:	fe 49       	sbci	r31, 0x9E	; 158
   125fe:	e4 91       	lpm	r30, Z
   12600:	f0 e0       	ldi	r31, 0x00	; 0
   12602:	ee 0f       	add	r30, r30
   12604:	ff 1f       	adc	r31, r31
   12606:	e6 5f       	subi	r30, 0xF6	; 246
   12608:	fd 49       	sbci	r31, 0x9D	; 157
   1260a:	85 91       	lpm	r24, Z+
   1260c:	94 91       	lpm	r25, Z
   1260e:	99 ab       	std	Y+49, r25	; 0x31
   12610:	88 ab       	std	Y+48, r24	; 0x30
   12612:	20 2f       	mov	r18, r16
   12614:	30 e0       	ldi	r19, 0x00	; 0
   12616:	f9 01       	movw	r30, r18
   12618:	ec 53       	subi	r30, 0x3C	; 60
   1261a:	fe 49       	sbci	r31, 0x9E	; 158
   1261c:	e4 91       	lpm	r30, Z
   1261e:	f0 e0       	ldi	r31, 0x00	; 0
   12620:	ee 0f       	add	r30, r30
   12622:	ff 1f       	adc	r31, r31
   12624:	e6 5f       	subi	r30, 0xF6	; 246
   12626:	fd 49       	sbci	r31, 0x9D	; 157
   12628:	85 91       	lpm	r24, Z+
   1262a:	94 91       	lpm	r25, Z
   1262c:	9b ab       	std	Y+51, r25	; 0x33
   1262e:	8a ab       	std	Y+50, r24	; 0x32
   12630:	8e 2d       	mov	r24, r14
   12632:	90 e0       	ldi	r25, 0x00	; 0
   12634:	fc 01       	movw	r30, r24
   12636:	ec 53       	subi	r30, 0x3C	; 60
   12638:	fe 49       	sbci	r31, 0x9E	; 158
   1263a:	e4 91       	lpm	r30, Z
   1263c:	f0 e0       	ldi	r31, 0x00	; 0
   1263e:	ee 0f       	add	r30, r30
   12640:	ff 1f       	adc	r31, r31
   12642:	e6 5f       	subi	r30, 0xF6	; 246
   12644:	fd 49       	sbci	r31, 0x9D	; 157
   12646:	e5 90       	lpm	r14, Z+
   12648:	f4 90       	lpm	r15, Z
   1264a:	fd aa       	std	Y+53, r15	; 0x35
   1264c:	ec aa       	std	Y+52, r14	; 0x34
   1264e:	62 57       	subi	r22, 0x72	; 114
   12650:	7e 49       	sbci	r23, 0x9E	; 158
   12652:	fb 01       	movw	r30, r22
   12654:	64 91       	lpm	r22, Z
   12656:	6e ab       	std	Y+54, r22	; 0x36
   12658:	42 57       	subi	r20, 0x72	; 114
   1265a:	5e 49       	sbci	r21, 0x9E	; 158
   1265c:	fa 01       	movw	r30, r20
   1265e:	44 91       	lpm	r20, Z
   12660:	4f ab       	std	Y+55, r20	; 0x37
   12662:	22 57       	subi	r18, 0x72	; 114
   12664:	3e 49       	sbci	r19, 0x9E	; 158
   12666:	f9 01       	movw	r30, r18
   12668:	24 91       	lpm	r18, Z
   1266a:	28 af       	std	Y+56, r18	; 0x38
   1266c:	82 57       	subi	r24, 0x72	; 114
   1266e:	9e 49       	sbci	r25, 0x9E	; 158
   12670:	fc 01       	movw	r30, r24
   12672:	84 91       	lpm	r24, Z
   12674:	89 af       	std	Y+57, r24	; 0x39
   12676:	96 2f       	mov	r25, r22
   12678:	90 95       	com	r25
   1267a:	9a af       	std	Y+58, r25	; 0x3a
   1267c:	e4 2f       	mov	r30, r20
   1267e:	e0 95       	com	r30
   12680:	eb af       	std	Y+59, r30	; 0x3b
   12682:	20 95       	com	r18
   12684:	2c af       	std	Y+60, r18	; 0x3c
   12686:	80 95       	com	r24
   12688:	8d af       	std	Y+61, r24	; 0x3d
   1268a:	ec 91       	ld	r30, X
   1268c:	6e 2b       	or	r22, r30
   1268e:	6c 93       	st	X, r22
   12690:	e8 a9       	ldd	r30, Y+48	; 0x30
   12692:	f9 a9       	ldd	r31, Y+49	; 0x31
   12694:	80 81       	ld	r24, Z
   12696:	9f a9       	ldd	r25, Y+55	; 0x37
   12698:	89 2b       	or	r24, r25
   1269a:	80 83       	st	Z, r24
   1269c:	ea a9       	ldd	r30, Y+50	; 0x32
   1269e:	fb a9       	ldd	r31, Y+51	; 0x33
   126a0:	80 81       	ld	r24, Z
   126a2:	98 ad       	ldd	r25, Y+56	; 0x38
   126a4:	89 2b       	or	r24, r25
   126a6:	80 83       	st	Z, r24
   126a8:	ec a9       	ldd	r30, Y+52	; 0x34
   126aa:	fd a9       	ldd	r31, Y+53	; 0x35
   126ac:	80 81       	ld	r24, Z
   126ae:	99 ad       	ldd	r25, Y+57	; 0x39
   126b0:	89 2b       	or	r24, r25
   126b2:	80 83       	st	Z, r24
   126b4:	61 e0       	ldi	r22, 0x01	; 1
   126b6:	81 2f       	mov	r24, r17
   126b8:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   126bc:	61 e0       	ldi	r22, 0x01	; 1
   126be:	8d 2d       	mov	r24, r13
   126c0:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   126c4:	61 e0       	ldi	r22, 0x01	; 1
   126c6:	80 2f       	mov	r24, r16
   126c8:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   126cc:	61 e0       	ldi	r22, 0x01	; 1
   126ce:	89 2d       	mov	r24, r9
   126d0:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   126d4:	cc 20       	and	r12, r12
   126d6:	41 f0       	breq	.+16     	; 0x126e8 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x140>
   126d8:	61 e0       	ldi	r22, 0x01	; 1
   126da:	8c 2d       	mov	r24, r12
   126dc:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
   126e0:	61 e0       	ldi	r22, 0x01	; 1
   126e2:	8c 2d       	mov	r24, r12
   126e4:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   126e8:	1f 8a       	std	Y+23, r1	; 0x17
   126ea:	1e 8a       	std	Y+22, r1	; 0x16
   126ec:	86 e0       	ldi	r24, 0x06	; 6
   126ee:	8a 9d       	mul	r24, r10
   126f0:	f0 01       	movw	r30, r0
   126f2:	8b 9d       	mul	r24, r11
   126f4:	f0 0d       	add	r31, r0
   126f6:	11 24       	eor	r1, r1
   126f8:	e6 5c       	subi	r30, 0xC6	; 198
   126fa:	fd 4f       	sbci	r31, 0xFD	; 253
   126fc:	80 81       	ld	r24, Z
   126fe:	91 81       	ldd	r25, Z+1	; 0x01
   12700:	9b 8f       	std	Y+27, r25	; 0x1b
   12702:	8a 8f       	std	Y+26, r24	; 0x1a
   12704:	82 81       	ldd	r24, Z+2	; 0x02
   12706:	93 81       	ldd	r25, Z+3	; 0x03
   12708:	9f 87       	std	Y+15, r25	; 0x0f
   1270a:	8e 87       	std	Y+14, r24	; 0x0e
   1270c:	84 81       	ldd	r24, Z+4	; 0x04
   1270e:	95 81       	ldd	r25, Z+5	; 0x05
   12710:	99 8b       	std	Y+17, r25	; 0x11
   12712:	88 8b       	std	Y+16, r24	; 0x10
   12714:	81 b1       	in	r24, 0x01	; 1
   12716:	8f ef       	ldi	r24, 0xFF	; 255
   12718:	81 b9       	out	0x01, r24	; 1
   1271a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1271c:	9f 85       	ldd	r25, Y+15	; 0x0f
   1271e:	9b 8b       	std	Y+19, r25	; 0x13
   12720:	8a 8b       	std	Y+18, r24	; 0x12
   12722:	88 89       	ldd	r24, Y+16	; 0x10
   12724:	99 89       	ldd	r25, Y+17	; 0x11
   12726:	9d 8b       	std	Y+21, r25	; 0x15
   12728:	8c 8b       	std	Y+20, r24	; 0x14
   1272a:	df 91       	pop	r29
   1272c:	cf 91       	pop	r28
   1272e:	1f 91       	pop	r17
   12730:	0f 91       	pop	r16
   12732:	ff 90       	pop	r15
   12734:	ef 90       	pop	r14
   12736:	df 90       	pop	r13
   12738:	cf 90       	pop	r12
   1273a:	bf 90       	pop	r11
   1273c:	af 90       	pop	r10
   1273e:	9f 90       	pop	r9
   12740:	08 95       	ret

00012742 <LCDWIKI_KBV::reset()>:
_ZN11LCDWIKI_KBV5resetEv():
   12742:	cf 93       	push	r28
   12744:	df 93       	push	r29
   12746:	ec 01       	movw	r28, r24
   12748:	ee a5       	ldd	r30, Y+46	; 0x2e
   1274a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1274c:	80 81       	ld	r24, Z
   1274e:	9e a9       	ldd	r25, Y+54	; 0x36
   12750:	89 2b       	or	r24, r25
   12752:	80 83       	st	Z, r24
   12754:	ec a9       	ldd	r30, Y+52	; 0x34
   12756:	fd a9       	ldd	r31, Y+53	; 0x35
   12758:	80 81       	ld	r24, Z
   1275a:	99 ad       	ldd	r25, Y+57	; 0x39
   1275c:	89 2b       	or	r24, r25
   1275e:	80 83       	st	Z, r24
   12760:	ea a9       	ldd	r30, Y+50	; 0x32
   12762:	fb a9       	ldd	r31, Y+51	; 0x33
   12764:	80 81       	ld	r24, Z
   12766:	98 ad       	ldd	r25, Y+56	; 0x38
   12768:	89 2b       	or	r24, r25
   1276a:	80 83       	st	Z, r24
   1276c:	8e ad       	ldd	r24, Y+62	; 0x3e
   1276e:	88 23       	and	r24, r24
   12770:	69 f0       	breq	.+26     	; 0x1278c <LCDWIKI_KBV::reset()+0x4a>
   12772:	60 e0       	ldi	r22, 0x00	; 0
   12774:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
   12778:	62 e0       	ldi	r22, 0x02	; 2
   1277a:	70 e0       	ldi	r23, 0x00	; 0
   1277c:	80 e0       	ldi	r24, 0x00	; 0
   1277e:	90 e0       	ldi	r25, 0x00	; 0
   12780:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
   12784:	61 e0       	ldi	r22, 0x01	; 1
   12786:	8e ad       	ldd	r24, Y+62	; 0x3e
   12788:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
   1278c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1278e:	ff a5       	ldd	r31, Y+47	; 0x2f
   12790:	80 81       	ld	r24, Z
   12792:	9a ad       	ldd	r25, Y+58	; 0x3a
   12794:	89 23       	and	r24, r25
   12796:	80 83       	st	Z, r24
   12798:	e8 a9       	ldd	r30, Y+48	; 0x30
   1279a:	f9 a9       	ldd	r31, Y+49	; 0x31
   1279c:	80 81       	ld	r24, Z
   1279e:	9b ad       	ldd	r25, Y+59	; 0x3b
   127a0:	89 23       	and	r24, r25
   127a2:	80 83       	st	Z, r24
   127a4:	12 b8       	out	0x02, r1	; 2
   127a6:	ea a9       	ldd	r30, Y+50	; 0x32
   127a8:	fb a9       	ldd	r31, Y+51	; 0x33
   127aa:	80 81       	ld	r24, Z
   127ac:	9c ad       	ldd	r25, Y+60	; 0x3c
   127ae:	89 23       	and	r24, r25
   127b0:	80 83       	st	Z, r24
   127b2:	ea a9       	ldd	r30, Y+50	; 0x32
   127b4:	fb a9       	ldd	r31, Y+51	; 0x33
   127b6:	80 81       	ld	r24, Z
   127b8:	98 ad       	ldd	r25, Y+56	; 0x38
   127ba:	89 2b       	or	r24, r25
   127bc:	80 83       	st	Z, r24
   127be:	83 e0       	ldi	r24, 0x03	; 3
   127c0:	ea a9       	ldd	r30, Y+50	; 0x32
   127c2:	fb a9       	ldd	r31, Y+51	; 0x33
   127c4:	90 81       	ld	r25, Z
   127c6:	2c ad       	ldd	r18, Y+60	; 0x3c
   127c8:	92 23       	and	r25, r18
   127ca:	90 83       	st	Z, r25
   127cc:	ea a9       	ldd	r30, Y+50	; 0x32
   127ce:	fb a9       	ldd	r31, Y+51	; 0x33
   127d0:	90 81       	ld	r25, Z
   127d2:	28 ad       	ldd	r18, Y+56	; 0x38
   127d4:	92 2b       	or	r25, r18
   127d6:	90 83       	st	Z, r25
   127d8:	81 50       	subi	r24, 0x01	; 1
   127da:	91 f7       	brne	.-28     	; 0x127c0 <LCDWIKI_KBV::reset()+0x7e>
   127dc:	ee a5       	ldd	r30, Y+46	; 0x2e
   127de:	ff a5       	ldd	r31, Y+47	; 0x2f
   127e0:	80 81       	ld	r24, Z
   127e2:	9e a9       	ldd	r25, Y+54	; 0x36
   127e4:	89 2b       	or	r24, r25
   127e6:	80 83       	st	Z, r24
   127e8:	df 91       	pop	r29
   127ea:	cf 91       	pop	r28
   127ec:	08 95       	ret

000127ee <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
   127ee:	cf 93       	push	r28
   127f0:	df 93       	push	r29
   127f2:	fc 01       	movw	r30, r24
   127f4:	a6 a5       	ldd	r26, Z+46	; 0x2e
   127f6:	b7 a5       	ldd	r27, Z+47	; 0x2f
   127f8:	8c 91       	ld	r24, X
   127fa:	92 ad       	ldd	r25, Z+58	; 0x3a
   127fc:	89 23       	and	r24, r25
   127fe:	8c 93       	st	X, r24
   12800:	a0 a9       	ldd	r26, Z+48	; 0x30
   12802:	b1 a9       	ldd	r27, Z+49	; 0x31
   12804:	8c 91       	ld	r24, X
   12806:	93 ad       	ldd	r25, Z+59	; 0x3b
   12808:	89 23       	and	r24, r25
   1280a:	8c 93       	st	X, r24
   1280c:	72 b9       	out	0x02, r23	; 2
   1280e:	a2 a9       	ldd	r26, Z+50	; 0x32
   12810:	b3 a9       	ldd	r27, Z+51	; 0x33
   12812:	8c 91       	ld	r24, X
   12814:	94 ad       	ldd	r25, Z+60	; 0x3c
   12816:	89 23       	and	r24, r25
   12818:	8c 93       	st	X, r24
   1281a:	a2 a9       	ldd	r26, Z+50	; 0x32
   1281c:	b3 a9       	ldd	r27, Z+51	; 0x33
   1281e:	8c 91       	ld	r24, X
   12820:	90 ad       	ldd	r25, Z+56	; 0x38
   12822:	89 2b       	or	r24, r25
   12824:	8c 93       	st	X, r24
   12826:	62 b9       	out	0x02, r22	; 2
   12828:	a2 a9       	ldd	r26, Z+50	; 0x32
   1282a:	b3 a9       	ldd	r27, Z+51	; 0x33
   1282c:	8c 91       	ld	r24, X
   1282e:	94 ad       	ldd	r25, Z+60	; 0x3c
   12830:	89 23       	and	r24, r25
   12832:	8c 93       	st	X, r24
   12834:	a2 a9       	ldd	r26, Z+50	; 0x32
   12836:	b3 a9       	ldd	r27, Z+51	; 0x33
   12838:	8c 91       	ld	r24, X
   1283a:	90 ad       	ldd	r25, Z+56	; 0x38
   1283c:	89 2b       	or	r24, r25
   1283e:	8c 93       	st	X, r24
   12840:	a0 a9       	ldd	r26, Z+48	; 0x30
   12842:	b1 a9       	ldd	r27, Z+49	; 0x31
   12844:	8c 91       	ld	r24, X
   12846:	97 a9       	ldd	r25, Z+55	; 0x37
   12848:	89 2b       	or	r24, r25
   1284a:	8c 93       	st	X, r24
   1284c:	da 01       	movw	r26, r20
   1284e:	9f ef       	ldi	r25, 0xFF	; 255
   12850:	92 0f       	add	r25, r18
   12852:	12 16       	cp	r1, r18
   12854:	0c f0       	brlt	.+2      	; 0x12858 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
   12856:	3f c0       	rjmp	.+126    	; 0x128d6 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
   12858:	8d 91       	ld	r24, X+
   1285a:	82 b9       	out	0x02, r24	; 2
   1285c:	c2 a9       	ldd	r28, Z+50	; 0x32
   1285e:	d3 a9       	ldd	r29, Z+51	; 0x33
   12860:	88 81       	ld	r24, Y
   12862:	24 ad       	ldd	r18, Z+60	; 0x3c
   12864:	82 23       	and	r24, r18
   12866:	88 83       	st	Y, r24
   12868:	c2 a9       	ldd	r28, Z+50	; 0x32
   1286a:	d3 a9       	ldd	r29, Z+51	; 0x33
   1286c:	88 81       	ld	r24, Y
   1286e:	20 ad       	ldd	r18, Z+56	; 0x38
   12870:	82 2b       	or	r24, r18
   12872:	88 83       	st	Y, r24
   12874:	99 23       	and	r25, r25
   12876:	69 f1       	breq	.+90     	; 0x128d2 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   12878:	20 8d       	ldd	r18, Z+24	; 0x18
   1287a:	31 8d       	ldd	r19, Z+25	; 0x19
   1287c:	21 30       	cpi	r18, 0x01	; 1
   1287e:	31 05       	cpc	r19, r1
   12880:	41 f5       	brne	.+80     	; 0x128d2 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   12882:	6f 5f       	subi	r22, 0xFF	; 255
   12884:	7f 4f       	sbci	r23, 0xFF	; 255
   12886:	c0 a9       	ldd	r28, Z+48	; 0x30
   12888:	d1 a9       	ldd	r29, Z+49	; 0x31
   1288a:	88 81       	ld	r24, Y
   1288c:	23 ad       	ldd	r18, Z+59	; 0x3b
   1288e:	82 23       	and	r24, r18
   12890:	88 83       	st	Y, r24
   12892:	72 b9       	out	0x02, r23	; 2
   12894:	c2 a9       	ldd	r28, Z+50	; 0x32
   12896:	d3 a9       	ldd	r29, Z+51	; 0x33
   12898:	88 81       	ld	r24, Y
   1289a:	24 ad       	ldd	r18, Z+60	; 0x3c
   1289c:	82 23       	and	r24, r18
   1289e:	88 83       	st	Y, r24
   128a0:	c2 a9       	ldd	r28, Z+50	; 0x32
   128a2:	d3 a9       	ldd	r29, Z+51	; 0x33
   128a4:	88 81       	ld	r24, Y
   128a6:	20 ad       	ldd	r18, Z+56	; 0x38
   128a8:	82 2b       	or	r24, r18
   128aa:	88 83       	st	Y, r24
   128ac:	62 b9       	out	0x02, r22	; 2
   128ae:	c2 a9       	ldd	r28, Z+50	; 0x32
   128b0:	d3 a9       	ldd	r29, Z+51	; 0x33
   128b2:	88 81       	ld	r24, Y
   128b4:	24 ad       	ldd	r18, Z+60	; 0x3c
   128b6:	82 23       	and	r24, r18
   128b8:	88 83       	st	Y, r24
   128ba:	c2 a9       	ldd	r28, Z+50	; 0x32
   128bc:	d3 a9       	ldd	r29, Z+51	; 0x33
   128be:	88 81       	ld	r24, Y
   128c0:	20 ad       	ldd	r18, Z+56	; 0x38
   128c2:	82 2b       	or	r24, r18
   128c4:	88 83       	st	Y, r24
   128c6:	c0 a9       	ldd	r28, Z+48	; 0x30
   128c8:	d1 a9       	ldd	r29, Z+49	; 0x31
   128ca:	88 81       	ld	r24, Y
   128cc:	27 a9       	ldd	r18, Z+55	; 0x37
   128ce:	82 2b       	or	r24, r18
   128d0:	88 83       	st	Y, r24
   128d2:	29 2f       	mov	r18, r25
   128d4:	bc cf       	rjmp	.-136    	; 0x1284e <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
   128d6:	a6 a5       	ldd	r26, Z+46	; 0x2e
   128d8:	b7 a5       	ldd	r27, Z+47	; 0x2f
   128da:	8c 91       	ld	r24, X
   128dc:	96 a9       	ldd	r25, Z+54	; 0x36
   128de:	89 2b       	or	r24, r25
   128e0:	8c 93       	st	X, r24
   128e2:	df 91       	pop	r29
   128e4:	cf 91       	pop	r28
   128e6:	08 95       	ret

000128e8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
   128e8:	af 92       	push	r10
   128ea:	bf 92       	push	r11
   128ec:	cf 92       	push	r12
   128ee:	df 92       	push	r13
   128f0:	ef 92       	push	r14
   128f2:	ff 92       	push	r15
   128f4:	0f 93       	push	r16
   128f6:	1f 93       	push	r17
   128f8:	cf 93       	push	r28
   128fa:	df 93       	push	r29
   128fc:	00 d0       	rcall	.+0      	; 0x128fe <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
   128fe:	00 d0       	rcall	.+0      	; 0x12900 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
   12900:	1f 92       	push	r1
   12902:	1f 92       	push	r1
   12904:	cd b7       	in	r28, 0x3d	; 61
   12906:	de b7       	in	r29, 0x3e	; 62
   12908:	7c 01       	movw	r14, r24
   1290a:	dc 01       	movw	r26, r24
   1290c:	9e 96       	adiw	r26, 0x2e	; 46
   1290e:	ed 91       	ld	r30, X+
   12910:	fc 91       	ld	r31, X
   12912:	9f 97       	sbiw	r26, 0x2f	; 47
   12914:	80 81       	ld	r24, Z
   12916:	da 96       	adiw	r26, 0x3a	; 58
   12918:	9c 91       	ld	r25, X
   1291a:	da 97       	sbiw	r26, 0x3a	; 58
   1291c:	89 23       	and	r24, r25
   1291e:	80 83       	st	Z, r24
   12920:	58 96       	adiw	r26, 0x18	; 24
   12922:	8d 91       	ld	r24, X+
   12924:	9c 91       	ld	r25, X
   12926:	59 97       	sbiw	r26, 0x19	; 25
   12928:	00 97       	sbiw	r24, 0x00	; 0
   1292a:	09 f0       	breq	.+2      	; 0x1292e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
   1292c:	44 c3       	rjmp	.+1672   	; 0x12fb6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
   1292e:	56 96       	adiw	r26, 0x16	; 22
   12930:	8d 91       	ld	r24, X+
   12932:	9c 91       	ld	r25, X
   12934:	57 97       	sbiw	r26, 0x17	; 23
   12936:	82 30       	cpi	r24, 0x02	; 2
   12938:	91 05       	cpc	r25, r1
   1293a:	09 f4       	brne	.+2      	; 0x1293e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
   1293c:	0b c3       	rjmp	.+1558   	; 0x12f54 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
   1293e:	83 30       	cpi	r24, 0x03	; 3
   12940:	91 05       	cpc	r25, r1
   12942:	09 f4       	brne	.+2      	; 0x12946 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
   12944:	23 c3       	rjmp	.+1606   	; 0x12f8c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
   12946:	01 97       	sbiw	r24, 0x01	; 1
   12948:	09 f0       	breq	.+2      	; 0x1294c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
   1294a:	32 c3       	rjmp	.+1636   	; 0x12fb0 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
   1294c:	1e 96       	adiw	r26, 0x0e	; 14
   1294e:	0d 90       	ld	r0, X+
   12950:	bc 91       	ld	r27, X
   12952:	a0 2d       	mov	r26, r0
   12954:	68 01       	movw	r12, r16
   12956:	c0 94       	com	r12
   12958:	d0 94       	com	r13
   1295a:	40 95       	com	r20
   1295c:	50 95       	com	r21
   1295e:	fa 01       	movw	r30, r20
   12960:	ea 0f       	add	r30, r26
   12962:	fb 1f       	adc	r31, r27
   12964:	cb 01       	movw	r24, r22
   12966:	89 01       	movw	r16, r18
   12968:	9f 01       	movw	r18, r30
   1296a:	ab 01       	movw	r20, r22
   1296c:	b6 01       	movw	r22, r12
   1296e:	6a 0f       	add	r22, r26
   12970:	7b 1f       	adc	r23, r27
   12972:	d7 01       	movw	r26, r14
   12974:	d0 96       	adiw	r26, 0x30	; 48
   12976:	cd 90       	ld	r12, X+
   12978:	dc 90       	ld	r13, X
   1297a:	d6 01       	movw	r26, r12
   1297c:	bc 90       	ld	r11, X
   1297e:	d7 01       	movw	r26, r14
   12980:	db 96       	adiw	r26, 0x3b	; 59
   12982:	ac 90       	ld	r10, X
   12984:	ba 20       	and	r11, r10
   12986:	d6 01       	movw	r26, r12
   12988:	bc 92       	st	X, r11
   1298a:	12 b8       	out	0x02, r1	; 2
   1298c:	d7 01       	movw	r26, r14
   1298e:	d2 96       	adiw	r26, 0x32	; 50
   12990:	cd 90       	ld	r12, X+
   12992:	dc 90       	ld	r13, X
   12994:	d6 01       	movw	r26, r12
   12996:	bc 90       	ld	r11, X
   12998:	d7 01       	movw	r26, r14
   1299a:	dc 96       	adiw	r26, 0x3c	; 60
   1299c:	ac 90       	ld	r10, X
   1299e:	ba 20       	and	r11, r10
   129a0:	d6 01       	movw	r26, r12
   129a2:	bc 92       	st	X, r11
   129a4:	d7 01       	movw	r26, r14
   129a6:	d2 96       	adiw	r26, 0x32	; 50
   129a8:	cd 90       	ld	r12, X+
   129aa:	dc 90       	ld	r13, X
   129ac:	d6 01       	movw	r26, r12
   129ae:	bc 90       	ld	r11, X
   129b0:	d7 01       	movw	r26, r14
   129b2:	d8 96       	adiw	r26, 0x38	; 56
   129b4:	ac 90       	ld	r10, X
   129b6:	ba 28       	or	r11, r10
   129b8:	d6 01       	movw	r26, r12
   129ba:	bc 92       	st	X, r11
   129bc:	a0 e5       	ldi	r26, 0x50	; 80
   129be:	a2 b9       	out	0x02, r26	; 2
   129c0:	d7 01       	movw	r26, r14
   129c2:	d2 96       	adiw	r26, 0x32	; 50
   129c4:	cd 90       	ld	r12, X+
   129c6:	dc 90       	ld	r13, X
   129c8:	d6 01       	movw	r26, r12
   129ca:	bc 90       	ld	r11, X
   129cc:	d7 01       	movw	r26, r14
   129ce:	dc 96       	adiw	r26, 0x3c	; 60
   129d0:	ac 90       	ld	r10, X
   129d2:	ba 20       	and	r11, r10
   129d4:	d6 01       	movw	r26, r12
   129d6:	bc 92       	st	X, r11
   129d8:	d7 01       	movw	r26, r14
   129da:	d2 96       	adiw	r26, 0x32	; 50
   129dc:	cd 90       	ld	r12, X+
   129de:	dc 90       	ld	r13, X
   129e0:	d6 01       	movw	r26, r12
   129e2:	bc 90       	ld	r11, X
   129e4:	d7 01       	movw	r26, r14
   129e6:	d8 96       	adiw	r26, 0x38	; 56
   129e8:	ac 90       	ld	r10, X
   129ea:	ba 28       	or	r11, r10
   129ec:	d6 01       	movw	r26, r12
   129ee:	bc 92       	st	X, r11
   129f0:	d7 01       	movw	r26, r14
   129f2:	d0 96       	adiw	r26, 0x30	; 48
   129f4:	cd 90       	ld	r12, X+
   129f6:	dc 90       	ld	r13, X
   129f8:	d6 01       	movw	r26, r12
   129fa:	bc 90       	ld	r11, X
   129fc:	d7 01       	movw	r26, r14
   129fe:	d7 96       	adiw	r26, 0x37	; 55
   12a00:	ac 90       	ld	r10, X
   12a02:	ba 28       	or	r11, r10
   12a04:	d6 01       	movw	r26, r12
   12a06:	bc 92       	st	X, r11
   12a08:	72 b9       	out	0x02, r23	; 2
   12a0a:	d7 01       	movw	r26, r14
   12a0c:	d2 96       	adiw	r26, 0x32	; 50
   12a0e:	ad 90       	ld	r10, X+
   12a10:	bc 90       	ld	r11, X
   12a12:	d5 01       	movw	r26, r10
   12a14:	7c 91       	ld	r23, X
   12a16:	d7 01       	movw	r26, r14
   12a18:	dc 96       	adiw	r26, 0x3c	; 60
   12a1a:	dc 90       	ld	r13, X
   12a1c:	7d 21       	and	r23, r13
   12a1e:	d5 01       	movw	r26, r10
   12a20:	7c 93       	st	X, r23
   12a22:	d7 01       	movw	r26, r14
   12a24:	d2 96       	adiw	r26, 0x32	; 50
   12a26:	ad 90       	ld	r10, X+
   12a28:	bc 90       	ld	r11, X
   12a2a:	d5 01       	movw	r26, r10
   12a2c:	7c 91       	ld	r23, X
   12a2e:	d7 01       	movw	r26, r14
   12a30:	d8 96       	adiw	r26, 0x38	; 56
   12a32:	dc 90       	ld	r13, X
   12a34:	7d 29       	or	r23, r13
   12a36:	d5 01       	movw	r26, r10
   12a38:	7c 93       	st	X, r23
   12a3a:	62 b9       	out	0x02, r22	; 2
   12a3c:	d7 01       	movw	r26, r14
   12a3e:	d2 96       	adiw	r26, 0x32	; 50
   12a40:	cd 90       	ld	r12, X+
   12a42:	dc 90       	ld	r13, X
   12a44:	d6 01       	movw	r26, r12
   12a46:	6c 91       	ld	r22, X
   12a48:	d7 01       	movw	r26, r14
   12a4a:	dc 96       	adiw	r26, 0x3c	; 60
   12a4c:	7c 91       	ld	r23, X
   12a4e:	67 23       	and	r22, r23
   12a50:	d6 01       	movw	r26, r12
   12a52:	6c 93       	st	X, r22
   12a54:	d7 01       	movw	r26, r14
   12a56:	d2 96       	adiw	r26, 0x32	; 50
   12a58:	cd 90       	ld	r12, X+
   12a5a:	dc 90       	ld	r13, X
   12a5c:	d6 01       	movw	r26, r12
   12a5e:	6c 91       	ld	r22, X
   12a60:	d7 01       	movw	r26, r14
   12a62:	d8 96       	adiw	r26, 0x38	; 56
   12a64:	7c 91       	ld	r23, X
   12a66:	67 2b       	or	r22, r23
   12a68:	d6 01       	movw	r26, r12
   12a6a:	6c 93       	st	X, r22
   12a6c:	d7 01       	movw	r26, r14
   12a6e:	d0 96       	adiw	r26, 0x30	; 48
   12a70:	cd 90       	ld	r12, X+
   12a72:	dc 90       	ld	r13, X
   12a74:	d6 01       	movw	r26, r12
   12a76:	6c 91       	ld	r22, X
   12a78:	d7 01       	movw	r26, r14
   12a7a:	db 96       	adiw	r26, 0x3b	; 59
   12a7c:	7c 91       	ld	r23, X
   12a7e:	67 23       	and	r22, r23
   12a80:	d6 01       	movw	r26, r12
   12a82:	6c 93       	st	X, r22
   12a84:	12 b8       	out	0x02, r1	; 2
   12a86:	d7 01       	movw	r26, r14
   12a88:	d2 96       	adiw	r26, 0x32	; 50
   12a8a:	cd 90       	ld	r12, X+
   12a8c:	dc 90       	ld	r13, X
   12a8e:	d6 01       	movw	r26, r12
   12a90:	6c 91       	ld	r22, X
   12a92:	d7 01       	movw	r26, r14
   12a94:	dc 96       	adiw	r26, 0x3c	; 60
   12a96:	7c 91       	ld	r23, X
   12a98:	67 23       	and	r22, r23
   12a9a:	d6 01       	movw	r26, r12
   12a9c:	6c 93       	st	X, r22
   12a9e:	d7 01       	movw	r26, r14
   12aa0:	d2 96       	adiw	r26, 0x32	; 50
   12aa2:	cd 90       	ld	r12, X+
   12aa4:	dc 90       	ld	r13, X
   12aa6:	d6 01       	movw	r26, r12
   12aa8:	6c 91       	ld	r22, X
   12aaa:	d7 01       	movw	r26, r14
   12aac:	d8 96       	adiw	r26, 0x38	; 56
   12aae:	7c 91       	ld	r23, X
   12ab0:	67 2b       	or	r22, r23
   12ab2:	d6 01       	movw	r26, r12
   12ab4:	6c 93       	st	X, r22
   12ab6:	61 e5       	ldi	r22, 0x51	; 81
   12ab8:	62 b9       	out	0x02, r22	; 2
   12aba:	d7 01       	movw	r26, r14
   12abc:	d2 96       	adiw	r26, 0x32	; 50
   12abe:	cd 90       	ld	r12, X+
   12ac0:	dc 90       	ld	r13, X
   12ac2:	d6 01       	movw	r26, r12
   12ac4:	6c 91       	ld	r22, X
   12ac6:	d7 01       	movw	r26, r14
   12ac8:	dc 96       	adiw	r26, 0x3c	; 60
   12aca:	7c 91       	ld	r23, X
   12acc:	67 23       	and	r22, r23
   12ace:	d6 01       	movw	r26, r12
   12ad0:	6c 93       	st	X, r22
   12ad2:	d7 01       	movw	r26, r14
   12ad4:	d2 96       	adiw	r26, 0x32	; 50
   12ad6:	cd 90       	ld	r12, X+
   12ad8:	dc 90       	ld	r13, X
   12ada:	d6 01       	movw	r26, r12
   12adc:	6c 91       	ld	r22, X
   12ade:	d7 01       	movw	r26, r14
   12ae0:	d8 96       	adiw	r26, 0x38	; 56
   12ae2:	7c 91       	ld	r23, X
   12ae4:	67 2b       	or	r22, r23
   12ae6:	d6 01       	movw	r26, r12
   12ae8:	6c 93       	st	X, r22
   12aea:	d7 01       	movw	r26, r14
   12aec:	d0 96       	adiw	r26, 0x30	; 48
   12aee:	cd 90       	ld	r12, X+
   12af0:	dc 90       	ld	r13, X
   12af2:	d6 01       	movw	r26, r12
   12af4:	6c 91       	ld	r22, X
   12af6:	d7 01       	movw	r26, r14
   12af8:	d7 96       	adiw	r26, 0x37	; 55
   12afa:	7c 91       	ld	r23, X
   12afc:	67 2b       	or	r22, r23
   12afe:	d6 01       	movw	r26, r12
   12b00:	6c 93       	st	X, r22
   12b02:	32 b9       	out	0x02, r19	; 2
   12b04:	d7 01       	movw	r26, r14
   12b06:	d2 96       	adiw	r26, 0x32	; 50
   12b08:	cd 90       	ld	r12, X+
   12b0a:	dc 90       	ld	r13, X
   12b0c:	d6 01       	movw	r26, r12
   12b0e:	3c 91       	ld	r19, X
   12b10:	d7 01       	movw	r26, r14
   12b12:	dc 96       	adiw	r26, 0x3c	; 60
   12b14:	6c 91       	ld	r22, X
   12b16:	36 23       	and	r19, r22
   12b18:	d6 01       	movw	r26, r12
   12b1a:	3c 93       	st	X, r19
   12b1c:	d7 01       	movw	r26, r14
   12b1e:	d2 96       	adiw	r26, 0x32	; 50
   12b20:	cd 90       	ld	r12, X+
   12b22:	dc 90       	ld	r13, X
   12b24:	d6 01       	movw	r26, r12
   12b26:	3c 91       	ld	r19, X
   12b28:	d7 01       	movw	r26, r14
   12b2a:	d8 96       	adiw	r26, 0x38	; 56
   12b2c:	6c 91       	ld	r22, X
   12b2e:	36 2b       	or	r19, r22
   12b30:	d6 01       	movw	r26, r12
   12b32:	3c 93       	st	X, r19
   12b34:	22 b9       	out	0x02, r18	; 2
   12b36:	d7 01       	movw	r26, r14
   12b38:	d2 96       	adiw	r26, 0x32	; 50
   12b3a:	6d 91       	ld	r22, X+
   12b3c:	7c 91       	ld	r23, X
   12b3e:	db 01       	movw	r26, r22
   12b40:	2c 91       	ld	r18, X
   12b42:	d7 01       	movw	r26, r14
   12b44:	dc 96       	adiw	r26, 0x3c	; 60
   12b46:	3c 91       	ld	r19, X
   12b48:	23 23       	and	r18, r19
   12b4a:	db 01       	movw	r26, r22
   12b4c:	2c 93       	st	X, r18
   12b4e:	d7 01       	movw	r26, r14
   12b50:	d2 96       	adiw	r26, 0x32	; 50
   12b52:	6d 91       	ld	r22, X+
   12b54:	7c 91       	ld	r23, X
   12b56:	db 01       	movw	r26, r22
   12b58:	2c 91       	ld	r18, X
   12b5a:	d7 01       	movw	r26, r14
   12b5c:	d8 96       	adiw	r26, 0x38	; 56
   12b5e:	3c 91       	ld	r19, X
   12b60:	23 2b       	or	r18, r19
   12b62:	db 01       	movw	r26, r22
   12b64:	2c 93       	st	X, r18
   12b66:	d7 01       	movw	r26, r14
   12b68:	d0 96       	adiw	r26, 0x30	; 48
   12b6a:	6d 91       	ld	r22, X+
   12b6c:	7c 91       	ld	r23, X
   12b6e:	db 01       	movw	r26, r22
   12b70:	2c 91       	ld	r18, X
   12b72:	d7 01       	movw	r26, r14
   12b74:	db 96       	adiw	r26, 0x3b	; 59
   12b76:	3c 91       	ld	r19, X
   12b78:	23 23       	and	r18, r19
   12b7a:	db 01       	movw	r26, r22
   12b7c:	2c 93       	st	X, r18
   12b7e:	12 b8       	out	0x02, r1	; 2
   12b80:	d7 01       	movw	r26, r14
   12b82:	d2 96       	adiw	r26, 0x32	; 50
   12b84:	6d 91       	ld	r22, X+
   12b86:	7c 91       	ld	r23, X
   12b88:	db 01       	movw	r26, r22
   12b8a:	2c 91       	ld	r18, X
   12b8c:	d7 01       	movw	r26, r14
   12b8e:	dc 96       	adiw	r26, 0x3c	; 60
   12b90:	3c 91       	ld	r19, X
   12b92:	23 23       	and	r18, r19
   12b94:	db 01       	movw	r26, r22
   12b96:	2c 93       	st	X, r18
   12b98:	d7 01       	movw	r26, r14
   12b9a:	d2 96       	adiw	r26, 0x32	; 50
   12b9c:	6d 91       	ld	r22, X+
   12b9e:	7c 91       	ld	r23, X
   12ba0:	db 01       	movw	r26, r22
   12ba2:	2c 91       	ld	r18, X
   12ba4:	d7 01       	movw	r26, r14
   12ba6:	d8 96       	adiw	r26, 0x38	; 56
   12ba8:	3c 91       	ld	r19, X
   12baa:	23 2b       	or	r18, r19
   12bac:	db 01       	movw	r26, r22
   12bae:	2c 93       	st	X, r18
   12bb0:	22 e5       	ldi	r18, 0x52	; 82
   12bb2:	22 b9       	out	0x02, r18	; 2
   12bb4:	d7 01       	movw	r26, r14
   12bb6:	d2 96       	adiw	r26, 0x32	; 50
   12bb8:	6d 91       	ld	r22, X+
   12bba:	7c 91       	ld	r23, X
   12bbc:	db 01       	movw	r26, r22
   12bbe:	2c 91       	ld	r18, X
   12bc0:	d7 01       	movw	r26, r14
   12bc2:	dc 96       	adiw	r26, 0x3c	; 60
   12bc4:	3c 91       	ld	r19, X
   12bc6:	23 23       	and	r18, r19
   12bc8:	db 01       	movw	r26, r22
   12bca:	2c 93       	st	X, r18
   12bcc:	d7 01       	movw	r26, r14
   12bce:	d2 96       	adiw	r26, 0x32	; 50
   12bd0:	6d 91       	ld	r22, X+
   12bd2:	7c 91       	ld	r23, X
   12bd4:	db 01       	movw	r26, r22
   12bd6:	2c 91       	ld	r18, X
   12bd8:	d7 01       	movw	r26, r14
   12bda:	d8 96       	adiw	r26, 0x38	; 56
   12bdc:	3c 91       	ld	r19, X
   12bde:	23 2b       	or	r18, r19
   12be0:	db 01       	movw	r26, r22
   12be2:	2c 93       	st	X, r18
   12be4:	d7 01       	movw	r26, r14
   12be6:	d0 96       	adiw	r26, 0x30	; 48
   12be8:	6d 91       	ld	r22, X+
   12bea:	7c 91       	ld	r23, X
   12bec:	db 01       	movw	r26, r22
   12bee:	2c 91       	ld	r18, X
   12bf0:	d7 01       	movw	r26, r14
   12bf2:	d7 96       	adiw	r26, 0x37	; 55
   12bf4:	3c 91       	ld	r19, X
   12bf6:	23 2b       	or	r18, r19
   12bf8:	db 01       	movw	r26, r22
   12bfa:	2c 93       	st	X, r18
   12bfc:	52 b9       	out	0x02, r21	; 2
   12bfe:	d7 01       	movw	r26, r14
   12c00:	d2 96       	adiw	r26, 0x32	; 50
   12c02:	6d 91       	ld	r22, X+
   12c04:	7c 91       	ld	r23, X
   12c06:	db 01       	movw	r26, r22
   12c08:	2c 91       	ld	r18, X
   12c0a:	d7 01       	movw	r26, r14
   12c0c:	dc 96       	adiw	r26, 0x3c	; 60
   12c0e:	3c 91       	ld	r19, X
   12c10:	23 23       	and	r18, r19
   12c12:	db 01       	movw	r26, r22
   12c14:	2c 93       	st	X, r18
   12c16:	d7 01       	movw	r26, r14
   12c18:	d2 96       	adiw	r26, 0x32	; 50
   12c1a:	6d 91       	ld	r22, X+
   12c1c:	7c 91       	ld	r23, X
   12c1e:	db 01       	movw	r26, r22
   12c20:	2c 91       	ld	r18, X
   12c22:	d7 01       	movw	r26, r14
   12c24:	d8 96       	adiw	r26, 0x38	; 56
   12c26:	3c 91       	ld	r19, X
   12c28:	23 2b       	or	r18, r19
   12c2a:	db 01       	movw	r26, r22
   12c2c:	2c 93       	st	X, r18
   12c2e:	42 b9       	out	0x02, r20	; 2
   12c30:	d7 01       	movw	r26, r14
   12c32:	d2 96       	adiw	r26, 0x32	; 50
   12c34:	4d 91       	ld	r20, X+
   12c36:	5c 91       	ld	r21, X
   12c38:	da 01       	movw	r26, r20
   12c3a:	2c 91       	ld	r18, X
   12c3c:	d7 01       	movw	r26, r14
   12c3e:	dc 96       	adiw	r26, 0x3c	; 60
   12c40:	3c 91       	ld	r19, X
   12c42:	23 23       	and	r18, r19
   12c44:	da 01       	movw	r26, r20
   12c46:	2c 93       	st	X, r18
   12c48:	d7 01       	movw	r26, r14
   12c4a:	d2 96       	adiw	r26, 0x32	; 50
   12c4c:	4d 91       	ld	r20, X+
   12c4e:	5c 91       	ld	r21, X
   12c50:	da 01       	movw	r26, r20
   12c52:	2c 91       	ld	r18, X
   12c54:	d7 01       	movw	r26, r14
   12c56:	d8 96       	adiw	r26, 0x38	; 56
   12c58:	3c 91       	ld	r19, X
   12c5a:	23 2b       	or	r18, r19
   12c5c:	da 01       	movw	r26, r20
   12c5e:	2c 93       	st	X, r18
   12c60:	d7 01       	movw	r26, r14
   12c62:	d0 96       	adiw	r26, 0x30	; 48
   12c64:	4d 91       	ld	r20, X+
   12c66:	5c 91       	ld	r21, X
   12c68:	da 01       	movw	r26, r20
   12c6a:	2c 91       	ld	r18, X
   12c6c:	d7 01       	movw	r26, r14
   12c6e:	db 96       	adiw	r26, 0x3b	; 59
   12c70:	3c 91       	ld	r19, X
   12c72:	23 23       	and	r18, r19
   12c74:	da 01       	movw	r26, r20
   12c76:	2c 93       	st	X, r18
   12c78:	12 b8       	out	0x02, r1	; 2
   12c7a:	d7 01       	movw	r26, r14
   12c7c:	d2 96       	adiw	r26, 0x32	; 50
   12c7e:	4d 91       	ld	r20, X+
   12c80:	5c 91       	ld	r21, X
   12c82:	da 01       	movw	r26, r20
   12c84:	2c 91       	ld	r18, X
   12c86:	d7 01       	movw	r26, r14
   12c88:	dc 96       	adiw	r26, 0x3c	; 60
   12c8a:	3c 91       	ld	r19, X
   12c8c:	23 23       	and	r18, r19
   12c8e:	da 01       	movw	r26, r20
   12c90:	2c 93       	st	X, r18
   12c92:	d7 01       	movw	r26, r14
   12c94:	d2 96       	adiw	r26, 0x32	; 50
   12c96:	4d 91       	ld	r20, X+
   12c98:	5c 91       	ld	r21, X
   12c9a:	da 01       	movw	r26, r20
   12c9c:	2c 91       	ld	r18, X
   12c9e:	d7 01       	movw	r26, r14
   12ca0:	d8 96       	adiw	r26, 0x38	; 56
   12ca2:	3c 91       	ld	r19, X
   12ca4:	23 2b       	or	r18, r19
   12ca6:	da 01       	movw	r26, r20
   12ca8:	2c 93       	st	X, r18
   12caa:	23 e5       	ldi	r18, 0x53	; 83
   12cac:	22 b9       	out	0x02, r18	; 2
   12cae:	d7 01       	movw	r26, r14
   12cb0:	d2 96       	adiw	r26, 0x32	; 50
   12cb2:	4d 91       	ld	r20, X+
   12cb4:	5c 91       	ld	r21, X
   12cb6:	da 01       	movw	r26, r20
   12cb8:	2c 91       	ld	r18, X
   12cba:	d7 01       	movw	r26, r14
   12cbc:	dc 96       	adiw	r26, 0x3c	; 60
   12cbe:	3c 91       	ld	r19, X
   12cc0:	23 23       	and	r18, r19
   12cc2:	da 01       	movw	r26, r20
   12cc4:	2c 93       	st	X, r18
   12cc6:	d7 01       	movw	r26, r14
   12cc8:	d2 96       	adiw	r26, 0x32	; 50
   12cca:	4d 91       	ld	r20, X+
   12ccc:	5c 91       	ld	r21, X
   12cce:	da 01       	movw	r26, r20
   12cd0:	2c 91       	ld	r18, X
   12cd2:	d7 01       	movw	r26, r14
   12cd4:	d8 96       	adiw	r26, 0x38	; 56
   12cd6:	3c 91       	ld	r19, X
   12cd8:	23 2b       	or	r18, r19
   12cda:	da 01       	movw	r26, r20
   12cdc:	2c 93       	st	X, r18
   12cde:	d7 01       	movw	r26, r14
   12ce0:	d0 96       	adiw	r26, 0x30	; 48
   12ce2:	4d 91       	ld	r20, X+
   12ce4:	5c 91       	ld	r21, X
   12ce6:	da 01       	movw	r26, r20
   12ce8:	2c 91       	ld	r18, X
   12cea:	d7 01       	movw	r26, r14
   12cec:	d7 96       	adiw	r26, 0x37	; 55
   12cee:	3c 91       	ld	r19, X
   12cf0:	23 2b       	or	r18, r19
   12cf2:	da 01       	movw	r26, r20
   12cf4:	2c 93       	st	X, r18
   12cf6:	12 b9       	out	0x02, r17	; 2
   12cf8:	d7 01       	movw	r26, r14
   12cfa:	d2 96       	adiw	r26, 0x32	; 50
   12cfc:	4d 91       	ld	r20, X+
   12cfe:	5c 91       	ld	r21, X
   12d00:	da 01       	movw	r26, r20
   12d02:	2c 91       	ld	r18, X
   12d04:	d7 01       	movw	r26, r14
   12d06:	dc 96       	adiw	r26, 0x3c	; 60
   12d08:	3c 91       	ld	r19, X
   12d0a:	23 23       	and	r18, r19
   12d0c:	da 01       	movw	r26, r20
   12d0e:	2c 93       	st	X, r18
   12d10:	d7 01       	movw	r26, r14
   12d12:	d2 96       	adiw	r26, 0x32	; 50
   12d14:	4d 91       	ld	r20, X+
   12d16:	5c 91       	ld	r21, X
   12d18:	da 01       	movw	r26, r20
   12d1a:	2c 91       	ld	r18, X
   12d1c:	d7 01       	movw	r26, r14
   12d1e:	d8 96       	adiw	r26, 0x38	; 56
   12d20:	3c 91       	ld	r19, X
   12d22:	23 2b       	or	r18, r19
   12d24:	da 01       	movw	r26, r20
   12d26:	2c 93       	st	X, r18
   12d28:	02 b9       	out	0x02, r16	; 2
   12d2a:	d7 01       	movw	r26, r14
   12d2c:	d2 96       	adiw	r26, 0x32	; 50
   12d2e:	4d 91       	ld	r20, X+
   12d30:	5c 91       	ld	r21, X
   12d32:	da 01       	movw	r26, r20
   12d34:	2c 91       	ld	r18, X
   12d36:	d7 01       	movw	r26, r14
   12d38:	dc 96       	adiw	r26, 0x3c	; 60
   12d3a:	3c 91       	ld	r19, X
   12d3c:	23 23       	and	r18, r19
   12d3e:	da 01       	movw	r26, r20
   12d40:	2c 93       	st	X, r18
   12d42:	d7 01       	movw	r26, r14
   12d44:	d2 96       	adiw	r26, 0x32	; 50
   12d46:	4d 91       	ld	r20, X+
   12d48:	5c 91       	ld	r21, X
   12d4a:	da 01       	movw	r26, r20
   12d4c:	2c 91       	ld	r18, X
   12d4e:	d7 01       	movw	r26, r14
   12d50:	d8 96       	adiw	r26, 0x38	; 56
   12d52:	3c 91       	ld	r19, X
   12d54:	23 2b       	or	r18, r19
   12d56:	da 01       	movw	r26, r20
   12d58:	2c 93       	st	X, r18
   12d5a:	d7 01       	movw	r26, r14
   12d5c:	d0 96       	adiw	r26, 0x30	; 48
   12d5e:	4d 91       	ld	r20, X+
   12d60:	5c 91       	ld	r21, X
   12d62:	da 01       	movw	r26, r20
   12d64:	2c 91       	ld	r18, X
   12d66:	d7 01       	movw	r26, r14
   12d68:	db 96       	adiw	r26, 0x3b	; 59
   12d6a:	3c 91       	ld	r19, X
   12d6c:	23 23       	and	r18, r19
   12d6e:	da 01       	movw	r26, r20
   12d70:	2c 93       	st	X, r18
   12d72:	12 b8       	out	0x02, r1	; 2
   12d74:	d7 01       	movw	r26, r14
   12d76:	d2 96       	adiw	r26, 0x32	; 50
   12d78:	4d 91       	ld	r20, X+
   12d7a:	5c 91       	ld	r21, X
   12d7c:	da 01       	movw	r26, r20
   12d7e:	2c 91       	ld	r18, X
   12d80:	d7 01       	movw	r26, r14
   12d82:	dc 96       	adiw	r26, 0x3c	; 60
   12d84:	3c 91       	ld	r19, X
   12d86:	23 23       	and	r18, r19
   12d88:	da 01       	movw	r26, r20
   12d8a:	2c 93       	st	X, r18
   12d8c:	d7 01       	movw	r26, r14
   12d8e:	d2 96       	adiw	r26, 0x32	; 50
   12d90:	4d 91       	ld	r20, X+
   12d92:	5c 91       	ld	r21, X
   12d94:	da 01       	movw	r26, r20
   12d96:	2c 91       	ld	r18, X
   12d98:	d7 01       	movw	r26, r14
   12d9a:	d8 96       	adiw	r26, 0x38	; 56
   12d9c:	3c 91       	ld	r19, X
   12d9e:	23 2b       	or	r18, r19
   12da0:	da 01       	movw	r26, r20
   12da2:	2c 93       	st	X, r18
   12da4:	20 e2       	ldi	r18, 0x20	; 32
   12da6:	22 b9       	out	0x02, r18	; 2
   12da8:	d7 01       	movw	r26, r14
   12daa:	d2 96       	adiw	r26, 0x32	; 50
   12dac:	4d 91       	ld	r20, X+
   12dae:	5c 91       	ld	r21, X
   12db0:	da 01       	movw	r26, r20
   12db2:	2c 91       	ld	r18, X
   12db4:	d7 01       	movw	r26, r14
   12db6:	dc 96       	adiw	r26, 0x3c	; 60
   12db8:	3c 91       	ld	r19, X
   12dba:	23 23       	and	r18, r19
   12dbc:	da 01       	movw	r26, r20
   12dbe:	2c 93       	st	X, r18
   12dc0:	d7 01       	movw	r26, r14
   12dc2:	d2 96       	adiw	r26, 0x32	; 50
   12dc4:	4d 91       	ld	r20, X+
   12dc6:	5c 91       	ld	r21, X
   12dc8:	da 01       	movw	r26, r20
   12dca:	2c 91       	ld	r18, X
   12dcc:	d7 01       	movw	r26, r14
   12dce:	d8 96       	adiw	r26, 0x38	; 56
   12dd0:	3c 91       	ld	r19, X
   12dd2:	23 2b       	or	r18, r19
   12dd4:	da 01       	movw	r26, r20
   12dd6:	2c 93       	st	X, r18
   12dd8:	d7 01       	movw	r26, r14
   12dda:	d0 96       	adiw	r26, 0x30	; 48
   12ddc:	4d 91       	ld	r20, X+
   12dde:	5c 91       	ld	r21, X
   12de0:	da 01       	movw	r26, r20
   12de2:	2c 91       	ld	r18, X
   12de4:	d7 01       	movw	r26, r14
   12de6:	d7 96       	adiw	r26, 0x37	; 55
   12de8:	3c 91       	ld	r19, X
   12dea:	23 2b       	or	r18, r19
   12dec:	da 01       	movw	r26, r20
   12dee:	2c 93       	st	X, r18
   12df0:	f2 b9       	out	0x02, r31	; 2
   12df2:	d7 01       	movw	r26, r14
   12df4:	d2 96       	adiw	r26, 0x32	; 50
   12df6:	4d 91       	ld	r20, X+
   12df8:	5c 91       	ld	r21, X
   12dfa:	da 01       	movw	r26, r20
   12dfc:	2c 91       	ld	r18, X
   12dfe:	d7 01       	movw	r26, r14
   12e00:	dc 96       	adiw	r26, 0x3c	; 60
   12e02:	3c 91       	ld	r19, X
   12e04:	23 23       	and	r18, r19
   12e06:	da 01       	movw	r26, r20
   12e08:	2c 93       	st	X, r18
   12e0a:	d7 01       	movw	r26, r14
   12e0c:	d2 96       	adiw	r26, 0x32	; 50
   12e0e:	4d 91       	ld	r20, X+
   12e10:	5c 91       	ld	r21, X
   12e12:	da 01       	movw	r26, r20
   12e14:	2c 91       	ld	r18, X
   12e16:	d7 01       	movw	r26, r14
   12e18:	d8 96       	adiw	r26, 0x38	; 56
   12e1a:	3c 91       	ld	r19, X
   12e1c:	23 2b       	or	r18, r19
   12e1e:	da 01       	movw	r26, r20
   12e20:	2c 93       	st	X, r18
   12e22:	e2 b9       	out	0x02, r30	; 2
   12e24:	d7 01       	movw	r26, r14
   12e26:	d2 96       	adiw	r26, 0x32	; 50
   12e28:	ed 91       	ld	r30, X+
   12e2a:	fc 91       	ld	r31, X
   12e2c:	d3 97       	sbiw	r26, 0x33	; 51
   12e2e:	20 81       	ld	r18, Z
   12e30:	dc 96       	adiw	r26, 0x3c	; 60
   12e32:	3c 91       	ld	r19, X
   12e34:	dc 97       	sbiw	r26, 0x3c	; 60
   12e36:	23 23       	and	r18, r19
   12e38:	20 83       	st	Z, r18
   12e3a:	d2 96       	adiw	r26, 0x32	; 50
   12e3c:	ed 91       	ld	r30, X+
   12e3e:	fc 91       	ld	r31, X
   12e40:	d3 97       	sbiw	r26, 0x33	; 51
   12e42:	20 81       	ld	r18, Z
   12e44:	d8 96       	adiw	r26, 0x38	; 56
   12e46:	3c 91       	ld	r19, X
   12e48:	d8 97       	sbiw	r26, 0x38	; 56
   12e4a:	23 2b       	or	r18, r19
   12e4c:	20 83       	st	Z, r18
   12e4e:	d0 96       	adiw	r26, 0x30	; 48
   12e50:	ed 91       	ld	r30, X+
   12e52:	fc 91       	ld	r31, X
   12e54:	d1 97       	sbiw	r26, 0x31	; 49
   12e56:	20 81       	ld	r18, Z
   12e58:	db 96       	adiw	r26, 0x3b	; 59
   12e5a:	3c 91       	ld	r19, X
   12e5c:	db 97       	sbiw	r26, 0x3b	; 59
   12e5e:	23 23       	and	r18, r19
   12e60:	20 83       	st	Z, r18
   12e62:	12 b8       	out	0x02, r1	; 2
   12e64:	d2 96       	adiw	r26, 0x32	; 50
   12e66:	ed 91       	ld	r30, X+
   12e68:	fc 91       	ld	r31, X
   12e6a:	d3 97       	sbiw	r26, 0x33	; 51
   12e6c:	20 81       	ld	r18, Z
   12e6e:	dc 96       	adiw	r26, 0x3c	; 60
   12e70:	3c 91       	ld	r19, X
   12e72:	dc 97       	sbiw	r26, 0x3c	; 60
   12e74:	23 23       	and	r18, r19
   12e76:	20 83       	st	Z, r18
   12e78:	d2 96       	adiw	r26, 0x32	; 50
   12e7a:	ed 91       	ld	r30, X+
   12e7c:	fc 91       	ld	r31, X
   12e7e:	d3 97       	sbiw	r26, 0x33	; 51
   12e80:	20 81       	ld	r18, Z
   12e82:	d8 96       	adiw	r26, 0x38	; 56
   12e84:	3c 91       	ld	r19, X
   12e86:	d8 97       	sbiw	r26, 0x38	; 56
   12e88:	23 2b       	or	r18, r19
   12e8a:	20 83       	st	Z, r18
   12e8c:	21 e2       	ldi	r18, 0x21	; 33
   12e8e:	22 b9       	out	0x02, r18	; 2
   12e90:	d2 96       	adiw	r26, 0x32	; 50
   12e92:	ed 91       	ld	r30, X+
   12e94:	fc 91       	ld	r31, X
   12e96:	d3 97       	sbiw	r26, 0x33	; 51
   12e98:	20 81       	ld	r18, Z
   12e9a:	dc 96       	adiw	r26, 0x3c	; 60
   12e9c:	3c 91       	ld	r19, X
   12e9e:	dc 97       	sbiw	r26, 0x3c	; 60
   12ea0:	23 23       	and	r18, r19
   12ea2:	20 83       	st	Z, r18
   12ea4:	d2 96       	adiw	r26, 0x32	; 50
   12ea6:	ed 91       	ld	r30, X+
   12ea8:	fc 91       	ld	r31, X
   12eaa:	d3 97       	sbiw	r26, 0x33	; 51
   12eac:	20 81       	ld	r18, Z
   12eae:	d8 96       	adiw	r26, 0x38	; 56
   12eb0:	3c 91       	ld	r19, X
   12eb2:	d8 97       	sbiw	r26, 0x38	; 56
   12eb4:	23 2b       	or	r18, r19
   12eb6:	20 83       	st	Z, r18
   12eb8:	d0 96       	adiw	r26, 0x30	; 48
   12eba:	ed 91       	ld	r30, X+
   12ebc:	fc 91       	ld	r31, X
   12ebe:	d1 97       	sbiw	r26, 0x31	; 49
   12ec0:	20 81       	ld	r18, Z
   12ec2:	d7 96       	adiw	r26, 0x37	; 55
   12ec4:	3c 91       	ld	r19, X
   12ec6:	d7 97       	sbiw	r26, 0x37	; 55
   12ec8:	23 2b       	or	r18, r19
   12eca:	20 83       	st	Z, r18
   12ecc:	92 b9       	out	0x02, r25	; 2
   12ece:	d2 96       	adiw	r26, 0x32	; 50
   12ed0:	ed 91       	ld	r30, X+
   12ed2:	fc 91       	ld	r31, X
   12ed4:	d3 97       	sbiw	r26, 0x33	; 51
   12ed6:	90 81       	ld	r25, Z
   12ed8:	dc 96       	adiw	r26, 0x3c	; 60
   12eda:	2c 91       	ld	r18, X
   12edc:	dc 97       	sbiw	r26, 0x3c	; 60
   12ede:	92 23       	and	r25, r18
   12ee0:	90 83       	st	Z, r25
   12ee2:	d2 96       	adiw	r26, 0x32	; 50
   12ee4:	ed 91       	ld	r30, X+
   12ee6:	fc 91       	ld	r31, X
   12ee8:	d3 97       	sbiw	r26, 0x33	; 51
   12eea:	90 81       	ld	r25, Z
   12eec:	d8 96       	adiw	r26, 0x38	; 56
   12eee:	2c 91       	ld	r18, X
   12ef0:	d8 97       	sbiw	r26, 0x38	; 56
   12ef2:	92 2b       	or	r25, r18
   12ef4:	90 83       	st	Z, r25
   12ef6:	82 b9       	out	0x02, r24	; 2
   12ef8:	d2 96       	adiw	r26, 0x32	; 50
   12efa:	ed 91       	ld	r30, X+
   12efc:	fc 91       	ld	r31, X
   12efe:	d3 97       	sbiw	r26, 0x33	; 51
   12f00:	80 81       	ld	r24, Z
   12f02:	dc 96       	adiw	r26, 0x3c	; 60
   12f04:	9c 91       	ld	r25, X
   12f06:	dc 97       	sbiw	r26, 0x3c	; 60
   12f08:	89 23       	and	r24, r25
   12f0a:	80 83       	st	Z, r24
   12f0c:	d2 96       	adiw	r26, 0x32	; 50
   12f0e:	ed 91       	ld	r30, X+
   12f10:	fc 91       	ld	r31, X
   12f12:	d3 97       	sbiw	r26, 0x33	; 51
   12f14:	80 81       	ld	r24, Z
   12f16:	d8 96       	adiw	r26, 0x38	; 56
   12f18:	9c 91       	ld	r25, X
   12f1a:	89 2b       	or	r24, r25
   12f1c:	80 83       	st	Z, r24
   12f1e:	d7 01       	movw	r26, r14
   12f20:	9e 96       	adiw	r26, 0x2e	; 46
   12f22:	ed 91       	ld	r30, X+
   12f24:	fc 91       	ld	r31, X
   12f26:	9f 97       	sbiw	r26, 0x2f	; 47
   12f28:	80 81       	ld	r24, Z
   12f2a:	d6 96       	adiw	r26, 0x36	; 54
   12f2c:	9c 91       	ld	r25, X
   12f2e:	89 2b       	or	r24, r25
   12f30:	80 83       	st	Z, r24
   12f32:	28 96       	adiw	r28, 0x08	; 8
   12f34:	0f b6       	in	r0, 0x3f	; 63
   12f36:	f8 94       	cli
   12f38:	de bf       	out	0x3e, r29	; 62
   12f3a:	0f be       	out	0x3f, r0	; 63
   12f3c:	cd bf       	out	0x3d, r28	; 61
   12f3e:	df 91       	pop	r29
   12f40:	cf 91       	pop	r28
   12f42:	1f 91       	pop	r17
   12f44:	0f 91       	pop	r16
   12f46:	ff 90       	pop	r15
   12f48:	ef 90       	pop	r14
   12f4a:	df 90       	pop	r13
   12f4c:	cf 90       	pop	r12
   12f4e:	bf 90       	pop	r11
   12f50:	af 90       	pop	r10
   12f52:	08 95       	ret
   12f54:	f7 01       	movw	r30, r14
   12f56:	a6 85       	ldd	r26, Z+14	; 0x0e
   12f58:	b7 85       	ldd	r27, Z+15	; 0x0f
   12f5a:	59 01       	movw	r10, r18
   12f5c:	a0 94       	com	r10
   12f5e:	b0 94       	com	r11
   12f60:	9d 01       	movw	r18, r26
   12f62:	26 1b       	sub	r18, r22
   12f64:	37 0b       	sbc	r19, r23
   12f66:	21 50       	subi	r18, 0x01	; 1
   12f68:	31 09       	sbc	r19, r1
   12f6a:	60 89       	ldd	r22, Z+16	; 0x10
   12f6c:	71 89       	ldd	r23, Z+17	; 0x11
   12f6e:	68 01       	movw	r12, r16
   12f70:	c0 94       	com	r12
   12f72:	d0 94       	com	r13
   12f74:	8a 01       	movw	r16, r20
   12f76:	00 95       	com	r16
   12f78:	10 95       	com	r17
   12f7a:	06 0f       	add	r16, r22
   12f7c:	17 1f       	adc	r17, r23
   12f7e:	c8 01       	movw	r24, r16
   12f80:	f9 01       	movw	r30, r18
   12f82:	a6 01       	movw	r20, r12
   12f84:	46 0f       	add	r20, r22
   12f86:	57 1f       	adc	r21, r23
   12f88:	b5 01       	movw	r22, r10
   12f8a:	f1 cc       	rjmp	.-1566   	; 0x1296e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
   12f8c:	f7 01       	movw	r30, r14
   12f8e:	a0 89       	ldd	r26, Z+16	; 0x10
   12f90:	b1 89       	ldd	r27, Z+17	; 0x11
   12f92:	69 01       	movw	r12, r18
   12f94:	c0 94       	com	r12
   12f96:	d0 94       	com	r13
   12f98:	cd 01       	movw	r24, r26
   12f9a:	86 1b       	sub	r24, r22
   12f9c:	97 0b       	sbc	r25, r23
   12f9e:	01 97       	sbiw	r24, 0x01	; 1
   12fa0:	fa 01       	movw	r30, r20
   12fa2:	98 01       	movw	r18, r16
   12fa4:	8c 01       	movw	r16, r24
   12fa6:	ba 01       	movw	r22, r20
   12fa8:	a6 01       	movw	r20, r12
   12faa:	4a 0f       	add	r20, r26
   12fac:	5b 1f       	adc	r21, r27
   12fae:	e1 cc       	rjmp	.-1598   	; 0x12972 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
   12fb0:	ca 01       	movw	r24, r20
   12fb2:	fb 01       	movw	r30, r22
   12fb4:	de cc       	rjmp	.-1604   	; 0x12972 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
   12fb6:	01 97       	sbiw	r24, 0x01	; 1
   12fb8:	09 f0       	breq	.+2      	; 0x12fbc <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
   12fba:	e5 c1       	rjmp	.+970    	; 0x13386 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
   12fbc:	d0 96       	adiw	r26, 0x30	; 48
   12fbe:	ed 91       	ld	r30, X+
   12fc0:	fc 91       	ld	r31, X
   12fc2:	d1 97       	sbiw	r26, 0x31	; 49
   12fc4:	80 81       	ld	r24, Z
   12fc6:	db 96       	adiw	r26, 0x3b	; 59
   12fc8:	9c 91       	ld	r25, X
   12fca:	db 97       	sbiw	r26, 0x3b	; 59
   12fcc:	89 23       	and	r24, r25
   12fce:	80 83       	st	Z, r24
   12fd0:	82 e0       	ldi	r24, 0x02	; 2
   12fd2:	82 b9       	out	0x02, r24	; 2
   12fd4:	d2 96       	adiw	r26, 0x32	; 50
   12fd6:	ed 91       	ld	r30, X+
   12fd8:	fc 91       	ld	r31, X
   12fda:	d3 97       	sbiw	r26, 0x33	; 51
   12fdc:	80 81       	ld	r24, Z
   12fde:	dc 96       	adiw	r26, 0x3c	; 60
   12fe0:	9c 91       	ld	r25, X
   12fe2:	dc 97       	sbiw	r26, 0x3c	; 60
   12fe4:	89 23       	and	r24, r25
   12fe6:	80 83       	st	Z, r24
   12fe8:	d2 96       	adiw	r26, 0x32	; 50
   12fea:	ed 91       	ld	r30, X+
   12fec:	fc 91       	ld	r31, X
   12fee:	d3 97       	sbiw	r26, 0x33	; 51
   12ff0:	80 81       	ld	r24, Z
   12ff2:	d8 96       	adiw	r26, 0x38	; 56
   12ff4:	9c 91       	ld	r25, X
   12ff6:	d8 97       	sbiw	r26, 0x38	; 56
   12ff8:	89 2b       	or	r24, r25
   12ffa:	80 83       	st	Z, r24
   12ffc:	d0 96       	adiw	r26, 0x30	; 48
   12ffe:	ed 91       	ld	r30, X+
   13000:	fc 91       	ld	r31, X
   13002:	d1 97       	sbiw	r26, 0x31	; 49
   13004:	80 81       	ld	r24, Z
   13006:	d7 96       	adiw	r26, 0x37	; 55
   13008:	9c 91       	ld	r25, X
   1300a:	d7 97       	sbiw	r26, 0x37	; 55
   1300c:	89 2b       	or	r24, r25
   1300e:	80 83       	st	Z, r24
   13010:	72 b9       	out	0x02, r23	; 2
   13012:	d2 96       	adiw	r26, 0x32	; 50
   13014:	ed 91       	ld	r30, X+
   13016:	fc 91       	ld	r31, X
   13018:	d3 97       	sbiw	r26, 0x33	; 51
   1301a:	80 81       	ld	r24, Z
   1301c:	dc 96       	adiw	r26, 0x3c	; 60
   1301e:	9c 91       	ld	r25, X
   13020:	dc 97       	sbiw	r26, 0x3c	; 60
   13022:	89 23       	and	r24, r25
   13024:	80 83       	st	Z, r24
   13026:	d2 96       	adiw	r26, 0x32	; 50
   13028:	ed 91       	ld	r30, X+
   1302a:	fc 91       	ld	r31, X
   1302c:	d3 97       	sbiw	r26, 0x33	; 51
   1302e:	80 81       	ld	r24, Z
   13030:	d8 96       	adiw	r26, 0x38	; 56
   13032:	9c 91       	ld	r25, X
   13034:	d8 97       	sbiw	r26, 0x38	; 56
   13036:	89 2b       	or	r24, r25
   13038:	80 83       	st	Z, r24
   1303a:	d0 96       	adiw	r26, 0x30	; 48
   1303c:	ed 91       	ld	r30, X+
   1303e:	fc 91       	ld	r31, X
   13040:	d1 97       	sbiw	r26, 0x31	; 49
   13042:	80 81       	ld	r24, Z
   13044:	db 96       	adiw	r26, 0x3b	; 59
   13046:	9c 91       	ld	r25, X
   13048:	db 97       	sbiw	r26, 0x3b	; 59
   1304a:	89 23       	and	r24, r25
   1304c:	80 83       	st	Z, r24
   1304e:	83 e0       	ldi	r24, 0x03	; 3
   13050:	82 b9       	out	0x02, r24	; 2
   13052:	d2 96       	adiw	r26, 0x32	; 50
   13054:	ed 91       	ld	r30, X+
   13056:	fc 91       	ld	r31, X
   13058:	d3 97       	sbiw	r26, 0x33	; 51
   1305a:	80 81       	ld	r24, Z
   1305c:	dc 96       	adiw	r26, 0x3c	; 60
   1305e:	9c 91       	ld	r25, X
   13060:	dc 97       	sbiw	r26, 0x3c	; 60
   13062:	89 23       	and	r24, r25
   13064:	80 83       	st	Z, r24
   13066:	d2 96       	adiw	r26, 0x32	; 50
   13068:	ed 91       	ld	r30, X+
   1306a:	fc 91       	ld	r31, X
   1306c:	d3 97       	sbiw	r26, 0x33	; 51
   1306e:	80 81       	ld	r24, Z
   13070:	d8 96       	adiw	r26, 0x38	; 56
   13072:	9c 91       	ld	r25, X
   13074:	d8 97       	sbiw	r26, 0x38	; 56
   13076:	89 2b       	or	r24, r25
   13078:	80 83       	st	Z, r24
   1307a:	d0 96       	adiw	r26, 0x30	; 48
   1307c:	ed 91       	ld	r30, X+
   1307e:	fc 91       	ld	r31, X
   13080:	d1 97       	sbiw	r26, 0x31	; 49
   13082:	80 81       	ld	r24, Z
   13084:	d7 96       	adiw	r26, 0x37	; 55
   13086:	9c 91       	ld	r25, X
   13088:	d7 97       	sbiw	r26, 0x37	; 55
   1308a:	89 2b       	or	r24, r25
   1308c:	80 83       	st	Z, r24
   1308e:	62 b9       	out	0x02, r22	; 2
   13090:	d2 96       	adiw	r26, 0x32	; 50
   13092:	ed 91       	ld	r30, X+
   13094:	fc 91       	ld	r31, X
   13096:	d3 97       	sbiw	r26, 0x33	; 51
   13098:	80 81       	ld	r24, Z
   1309a:	dc 96       	adiw	r26, 0x3c	; 60
   1309c:	9c 91       	ld	r25, X
   1309e:	dc 97       	sbiw	r26, 0x3c	; 60
   130a0:	89 23       	and	r24, r25
   130a2:	80 83       	st	Z, r24
   130a4:	d2 96       	adiw	r26, 0x32	; 50
   130a6:	ed 91       	ld	r30, X+
   130a8:	fc 91       	ld	r31, X
   130aa:	d3 97       	sbiw	r26, 0x33	; 51
   130ac:	80 81       	ld	r24, Z
   130ae:	d8 96       	adiw	r26, 0x38	; 56
   130b0:	9c 91       	ld	r25, X
   130b2:	d8 97       	sbiw	r26, 0x38	; 56
   130b4:	89 2b       	or	r24, r25
   130b6:	80 83       	st	Z, r24
   130b8:	d0 96       	adiw	r26, 0x30	; 48
   130ba:	ed 91       	ld	r30, X+
   130bc:	fc 91       	ld	r31, X
   130be:	d1 97       	sbiw	r26, 0x31	; 49
   130c0:	80 81       	ld	r24, Z
   130c2:	db 96       	adiw	r26, 0x3b	; 59
   130c4:	9c 91       	ld	r25, X
   130c6:	db 97       	sbiw	r26, 0x3b	; 59
   130c8:	89 23       	and	r24, r25
   130ca:	80 83       	st	Z, r24
   130cc:	86 e0       	ldi	r24, 0x06	; 6
   130ce:	82 b9       	out	0x02, r24	; 2
   130d0:	d2 96       	adiw	r26, 0x32	; 50
   130d2:	ed 91       	ld	r30, X+
   130d4:	fc 91       	ld	r31, X
   130d6:	d3 97       	sbiw	r26, 0x33	; 51
   130d8:	80 81       	ld	r24, Z
   130da:	dc 96       	adiw	r26, 0x3c	; 60
   130dc:	9c 91       	ld	r25, X
   130de:	dc 97       	sbiw	r26, 0x3c	; 60
   130e0:	89 23       	and	r24, r25
   130e2:	80 83       	st	Z, r24
   130e4:	d2 96       	adiw	r26, 0x32	; 50
   130e6:	ed 91       	ld	r30, X+
   130e8:	fc 91       	ld	r31, X
   130ea:	d3 97       	sbiw	r26, 0x33	; 51
   130ec:	80 81       	ld	r24, Z
   130ee:	d8 96       	adiw	r26, 0x38	; 56
   130f0:	9c 91       	ld	r25, X
   130f2:	d8 97       	sbiw	r26, 0x38	; 56
   130f4:	89 2b       	or	r24, r25
   130f6:	80 83       	st	Z, r24
   130f8:	d0 96       	adiw	r26, 0x30	; 48
   130fa:	ed 91       	ld	r30, X+
   130fc:	fc 91       	ld	r31, X
   130fe:	d1 97       	sbiw	r26, 0x31	; 49
   13100:	80 81       	ld	r24, Z
   13102:	d7 96       	adiw	r26, 0x37	; 55
   13104:	9c 91       	ld	r25, X
   13106:	d7 97       	sbiw	r26, 0x37	; 55
   13108:	89 2b       	or	r24, r25
   1310a:	80 83       	st	Z, r24
   1310c:	52 b9       	out	0x02, r21	; 2
   1310e:	d2 96       	adiw	r26, 0x32	; 50
   13110:	ed 91       	ld	r30, X+
   13112:	fc 91       	ld	r31, X
   13114:	d3 97       	sbiw	r26, 0x33	; 51
   13116:	80 81       	ld	r24, Z
   13118:	dc 96       	adiw	r26, 0x3c	; 60
   1311a:	9c 91       	ld	r25, X
   1311c:	dc 97       	sbiw	r26, 0x3c	; 60
   1311e:	89 23       	and	r24, r25
   13120:	80 83       	st	Z, r24
   13122:	d2 96       	adiw	r26, 0x32	; 50
   13124:	ed 91       	ld	r30, X+
   13126:	fc 91       	ld	r31, X
   13128:	d3 97       	sbiw	r26, 0x33	; 51
   1312a:	80 81       	ld	r24, Z
   1312c:	d8 96       	adiw	r26, 0x38	; 56
   1312e:	9c 91       	ld	r25, X
   13130:	d8 97       	sbiw	r26, 0x38	; 56
   13132:	89 2b       	or	r24, r25
   13134:	80 83       	st	Z, r24
   13136:	d0 96       	adiw	r26, 0x30	; 48
   13138:	ed 91       	ld	r30, X+
   1313a:	fc 91       	ld	r31, X
   1313c:	d1 97       	sbiw	r26, 0x31	; 49
   1313e:	80 81       	ld	r24, Z
   13140:	db 96       	adiw	r26, 0x3b	; 59
   13142:	9c 91       	ld	r25, X
   13144:	db 97       	sbiw	r26, 0x3b	; 59
   13146:	89 23       	and	r24, r25
   13148:	80 83       	st	Z, r24
   1314a:	87 e0       	ldi	r24, 0x07	; 7
   1314c:	82 b9       	out	0x02, r24	; 2
   1314e:	d2 96       	adiw	r26, 0x32	; 50
   13150:	ed 91       	ld	r30, X+
   13152:	fc 91       	ld	r31, X
   13154:	d3 97       	sbiw	r26, 0x33	; 51
   13156:	80 81       	ld	r24, Z
   13158:	dc 96       	adiw	r26, 0x3c	; 60
   1315a:	9c 91       	ld	r25, X
   1315c:	dc 97       	sbiw	r26, 0x3c	; 60
   1315e:	89 23       	and	r24, r25
   13160:	80 83       	st	Z, r24
   13162:	d2 96       	adiw	r26, 0x32	; 50
   13164:	ed 91       	ld	r30, X+
   13166:	fc 91       	ld	r31, X
   13168:	d3 97       	sbiw	r26, 0x33	; 51
   1316a:	80 81       	ld	r24, Z
   1316c:	d8 96       	adiw	r26, 0x38	; 56
   1316e:	9c 91       	ld	r25, X
   13170:	d8 97       	sbiw	r26, 0x38	; 56
   13172:	89 2b       	or	r24, r25
   13174:	80 83       	st	Z, r24
   13176:	d0 96       	adiw	r26, 0x30	; 48
   13178:	ed 91       	ld	r30, X+
   1317a:	fc 91       	ld	r31, X
   1317c:	d1 97       	sbiw	r26, 0x31	; 49
   1317e:	80 81       	ld	r24, Z
   13180:	d7 96       	adiw	r26, 0x37	; 55
   13182:	9c 91       	ld	r25, X
   13184:	d7 97       	sbiw	r26, 0x37	; 55
   13186:	89 2b       	or	r24, r25
   13188:	80 83       	st	Z, r24
   1318a:	42 b9       	out	0x02, r20	; 2
   1318c:	d2 96       	adiw	r26, 0x32	; 50
   1318e:	ed 91       	ld	r30, X+
   13190:	fc 91       	ld	r31, X
   13192:	d3 97       	sbiw	r26, 0x33	; 51
   13194:	80 81       	ld	r24, Z
   13196:	dc 96       	adiw	r26, 0x3c	; 60
   13198:	9c 91       	ld	r25, X
   1319a:	dc 97       	sbiw	r26, 0x3c	; 60
   1319c:	89 23       	and	r24, r25
   1319e:	80 83       	st	Z, r24
   131a0:	d2 96       	adiw	r26, 0x32	; 50
   131a2:	ed 91       	ld	r30, X+
   131a4:	fc 91       	ld	r31, X
   131a6:	d3 97       	sbiw	r26, 0x33	; 51
   131a8:	80 81       	ld	r24, Z
   131aa:	d8 96       	adiw	r26, 0x38	; 56
   131ac:	9c 91       	ld	r25, X
   131ae:	d8 97       	sbiw	r26, 0x38	; 56
   131b0:	89 2b       	or	r24, r25
   131b2:	80 83       	st	Z, r24
   131b4:	d0 96       	adiw	r26, 0x30	; 48
   131b6:	ed 91       	ld	r30, X+
   131b8:	fc 91       	ld	r31, X
   131ba:	d1 97       	sbiw	r26, 0x31	; 49
   131bc:	80 81       	ld	r24, Z
   131be:	db 96       	adiw	r26, 0x3b	; 59
   131c0:	9c 91       	ld	r25, X
   131c2:	db 97       	sbiw	r26, 0x3b	; 59
   131c4:	89 23       	and	r24, r25
   131c6:	80 83       	st	Z, r24
   131c8:	84 e0       	ldi	r24, 0x04	; 4
   131ca:	82 b9       	out	0x02, r24	; 2
   131cc:	d2 96       	adiw	r26, 0x32	; 50
   131ce:	ed 91       	ld	r30, X+
   131d0:	fc 91       	ld	r31, X
   131d2:	d3 97       	sbiw	r26, 0x33	; 51
   131d4:	80 81       	ld	r24, Z
   131d6:	dc 96       	adiw	r26, 0x3c	; 60
   131d8:	9c 91       	ld	r25, X
   131da:	dc 97       	sbiw	r26, 0x3c	; 60
   131dc:	89 23       	and	r24, r25
   131de:	80 83       	st	Z, r24
   131e0:	d2 96       	adiw	r26, 0x32	; 50
   131e2:	ed 91       	ld	r30, X+
   131e4:	fc 91       	ld	r31, X
   131e6:	d3 97       	sbiw	r26, 0x33	; 51
   131e8:	80 81       	ld	r24, Z
   131ea:	d8 96       	adiw	r26, 0x38	; 56
   131ec:	9c 91       	ld	r25, X
   131ee:	d8 97       	sbiw	r26, 0x38	; 56
   131f0:	89 2b       	or	r24, r25
   131f2:	80 83       	st	Z, r24
   131f4:	d0 96       	adiw	r26, 0x30	; 48
   131f6:	ed 91       	ld	r30, X+
   131f8:	fc 91       	ld	r31, X
   131fa:	d1 97       	sbiw	r26, 0x31	; 49
   131fc:	80 81       	ld	r24, Z
   131fe:	d7 96       	adiw	r26, 0x37	; 55
   13200:	9c 91       	ld	r25, X
   13202:	d7 97       	sbiw	r26, 0x37	; 55
   13204:	89 2b       	or	r24, r25
   13206:	80 83       	st	Z, r24
   13208:	32 b9       	out	0x02, r19	; 2
   1320a:	d2 96       	adiw	r26, 0x32	; 50
   1320c:	ed 91       	ld	r30, X+
   1320e:	fc 91       	ld	r31, X
   13210:	d3 97       	sbiw	r26, 0x33	; 51
   13212:	80 81       	ld	r24, Z
   13214:	dc 96       	adiw	r26, 0x3c	; 60
   13216:	9c 91       	ld	r25, X
   13218:	dc 97       	sbiw	r26, 0x3c	; 60
   1321a:	89 23       	and	r24, r25
   1321c:	80 83       	st	Z, r24
   1321e:	d2 96       	adiw	r26, 0x32	; 50
   13220:	ed 91       	ld	r30, X+
   13222:	fc 91       	ld	r31, X
   13224:	d3 97       	sbiw	r26, 0x33	; 51
   13226:	80 81       	ld	r24, Z
   13228:	d8 96       	adiw	r26, 0x38	; 56
   1322a:	9c 91       	ld	r25, X
   1322c:	d8 97       	sbiw	r26, 0x38	; 56
   1322e:	89 2b       	or	r24, r25
   13230:	80 83       	st	Z, r24
   13232:	d0 96       	adiw	r26, 0x30	; 48
   13234:	ed 91       	ld	r30, X+
   13236:	fc 91       	ld	r31, X
   13238:	d1 97       	sbiw	r26, 0x31	; 49
   1323a:	80 81       	ld	r24, Z
   1323c:	db 96       	adiw	r26, 0x3b	; 59
   1323e:	9c 91       	ld	r25, X
   13240:	db 97       	sbiw	r26, 0x3b	; 59
   13242:	89 23       	and	r24, r25
   13244:	80 83       	st	Z, r24
   13246:	85 e0       	ldi	r24, 0x05	; 5
   13248:	82 b9       	out	0x02, r24	; 2
   1324a:	d2 96       	adiw	r26, 0x32	; 50
   1324c:	ed 91       	ld	r30, X+
   1324e:	fc 91       	ld	r31, X
   13250:	d3 97       	sbiw	r26, 0x33	; 51
   13252:	80 81       	ld	r24, Z
   13254:	dc 96       	adiw	r26, 0x3c	; 60
   13256:	9c 91       	ld	r25, X
   13258:	dc 97       	sbiw	r26, 0x3c	; 60
   1325a:	89 23       	and	r24, r25
   1325c:	80 83       	st	Z, r24
   1325e:	d2 96       	adiw	r26, 0x32	; 50
   13260:	ed 91       	ld	r30, X+
   13262:	fc 91       	ld	r31, X
   13264:	d3 97       	sbiw	r26, 0x33	; 51
   13266:	80 81       	ld	r24, Z
   13268:	d8 96       	adiw	r26, 0x38	; 56
   1326a:	9c 91       	ld	r25, X
   1326c:	d8 97       	sbiw	r26, 0x38	; 56
   1326e:	89 2b       	or	r24, r25
   13270:	80 83       	st	Z, r24
   13272:	d0 96       	adiw	r26, 0x30	; 48
   13274:	ed 91       	ld	r30, X+
   13276:	fc 91       	ld	r31, X
   13278:	d1 97       	sbiw	r26, 0x31	; 49
   1327a:	80 81       	ld	r24, Z
   1327c:	d7 96       	adiw	r26, 0x37	; 55
   1327e:	9c 91       	ld	r25, X
   13280:	d7 97       	sbiw	r26, 0x37	; 55
   13282:	89 2b       	or	r24, r25
   13284:	80 83       	st	Z, r24
   13286:	22 b9       	out	0x02, r18	; 2
   13288:	d2 96       	adiw	r26, 0x32	; 50
   1328a:	ed 91       	ld	r30, X+
   1328c:	fc 91       	ld	r31, X
   1328e:	d3 97       	sbiw	r26, 0x33	; 51
   13290:	80 81       	ld	r24, Z
   13292:	dc 96       	adiw	r26, 0x3c	; 60
   13294:	9c 91       	ld	r25, X
   13296:	dc 97       	sbiw	r26, 0x3c	; 60
   13298:	89 23       	and	r24, r25
   1329a:	80 83       	st	Z, r24
   1329c:	d2 96       	adiw	r26, 0x32	; 50
   1329e:	ed 91       	ld	r30, X+
   132a0:	fc 91       	ld	r31, X
   132a2:	d3 97       	sbiw	r26, 0x33	; 51
   132a4:	80 81       	ld	r24, Z
   132a6:	d8 96       	adiw	r26, 0x38	; 56
   132a8:	9c 91       	ld	r25, X
   132aa:	d8 97       	sbiw	r26, 0x38	; 56
   132ac:	89 2b       	or	r24, r25
   132ae:	80 83       	st	Z, r24
   132b0:	d0 96       	adiw	r26, 0x30	; 48
   132b2:	ed 91       	ld	r30, X+
   132b4:	fc 91       	ld	r31, X
   132b6:	d1 97       	sbiw	r26, 0x31	; 49
   132b8:	80 81       	ld	r24, Z
   132ba:	db 96       	adiw	r26, 0x3b	; 59
   132bc:	9c 91       	ld	r25, X
   132be:	db 97       	sbiw	r26, 0x3b	; 59
   132c0:	89 23       	and	r24, r25
   132c2:	80 83       	st	Z, r24
   132c4:	88 e0       	ldi	r24, 0x08	; 8
   132c6:	82 b9       	out	0x02, r24	; 2
   132c8:	d2 96       	adiw	r26, 0x32	; 50
   132ca:	ed 91       	ld	r30, X+
   132cc:	fc 91       	ld	r31, X
   132ce:	d3 97       	sbiw	r26, 0x33	; 51
   132d0:	80 81       	ld	r24, Z
   132d2:	dc 96       	adiw	r26, 0x3c	; 60
   132d4:	9c 91       	ld	r25, X
   132d6:	dc 97       	sbiw	r26, 0x3c	; 60
   132d8:	89 23       	and	r24, r25
   132da:	80 83       	st	Z, r24
   132dc:	d2 96       	adiw	r26, 0x32	; 50
   132de:	ed 91       	ld	r30, X+
   132e0:	fc 91       	ld	r31, X
   132e2:	d3 97       	sbiw	r26, 0x33	; 51
   132e4:	80 81       	ld	r24, Z
   132e6:	d8 96       	adiw	r26, 0x38	; 56
   132e8:	9c 91       	ld	r25, X
   132ea:	d8 97       	sbiw	r26, 0x38	; 56
   132ec:	89 2b       	or	r24, r25
   132ee:	80 83       	st	Z, r24
   132f0:	d0 96       	adiw	r26, 0x30	; 48
   132f2:	ed 91       	ld	r30, X+
   132f4:	fc 91       	ld	r31, X
   132f6:	d1 97       	sbiw	r26, 0x31	; 49
   132f8:	80 81       	ld	r24, Z
   132fa:	d7 96       	adiw	r26, 0x37	; 55
   132fc:	9c 91       	ld	r25, X
   132fe:	d7 97       	sbiw	r26, 0x37	; 55
   13300:	89 2b       	or	r24, r25
   13302:	80 83       	st	Z, r24
   13304:	12 b9       	out	0x02, r17	; 2
   13306:	d2 96       	adiw	r26, 0x32	; 50
   13308:	ed 91       	ld	r30, X+
   1330a:	fc 91       	ld	r31, X
   1330c:	d3 97       	sbiw	r26, 0x33	; 51
   1330e:	80 81       	ld	r24, Z
   13310:	dc 96       	adiw	r26, 0x3c	; 60
   13312:	9c 91       	ld	r25, X
   13314:	dc 97       	sbiw	r26, 0x3c	; 60
   13316:	89 23       	and	r24, r25
   13318:	80 83       	st	Z, r24
   1331a:	d2 96       	adiw	r26, 0x32	; 50
   1331c:	ed 91       	ld	r30, X+
   1331e:	fc 91       	ld	r31, X
   13320:	d3 97       	sbiw	r26, 0x33	; 51
   13322:	80 81       	ld	r24, Z
   13324:	d8 96       	adiw	r26, 0x38	; 56
   13326:	9c 91       	ld	r25, X
   13328:	d8 97       	sbiw	r26, 0x38	; 56
   1332a:	89 2b       	or	r24, r25
   1332c:	80 83       	st	Z, r24
   1332e:	d0 96       	adiw	r26, 0x30	; 48
   13330:	ed 91       	ld	r30, X+
   13332:	fc 91       	ld	r31, X
   13334:	d1 97       	sbiw	r26, 0x31	; 49
   13336:	80 81       	ld	r24, Z
   13338:	db 96       	adiw	r26, 0x3b	; 59
   1333a:	9c 91       	ld	r25, X
   1333c:	db 97       	sbiw	r26, 0x3b	; 59
   1333e:	89 23       	and	r24, r25
   13340:	80 83       	st	Z, r24
   13342:	89 e0       	ldi	r24, 0x09	; 9
   13344:	82 b9       	out	0x02, r24	; 2
   13346:	d2 96       	adiw	r26, 0x32	; 50
   13348:	ed 91       	ld	r30, X+
   1334a:	fc 91       	ld	r31, X
   1334c:	d3 97       	sbiw	r26, 0x33	; 51
   1334e:	80 81       	ld	r24, Z
   13350:	dc 96       	adiw	r26, 0x3c	; 60
   13352:	9c 91       	ld	r25, X
   13354:	dc 97       	sbiw	r26, 0x3c	; 60
   13356:	89 23       	and	r24, r25
   13358:	80 83       	st	Z, r24
   1335a:	d2 96       	adiw	r26, 0x32	; 50
   1335c:	ed 91       	ld	r30, X+
   1335e:	fc 91       	ld	r31, X
   13360:	d3 97       	sbiw	r26, 0x33	; 51
   13362:	80 81       	ld	r24, Z
   13364:	d8 96       	adiw	r26, 0x38	; 56
   13366:	9c 91       	ld	r25, X
   13368:	d8 97       	sbiw	r26, 0x38	; 56
   1336a:	89 2b       	or	r24, r25
   1336c:	80 83       	st	Z, r24
   1336e:	d0 96       	adiw	r26, 0x30	; 48
   13370:	ed 91       	ld	r30, X+
   13372:	fc 91       	ld	r31, X
   13374:	d1 97       	sbiw	r26, 0x31	; 49
   13376:	80 81       	ld	r24, Z
   13378:	d7 96       	adiw	r26, 0x37	; 55
   1337a:	9c 91       	ld	r25, X
   1337c:	d7 97       	sbiw	r26, 0x37	; 55
   1337e:	89 2b       	or	r24, r25
   13380:	80 83       	st	Z, r24
   13382:	02 b9       	out	0x02, r16	; 2
   13384:	b9 cd       	rjmp	.-1166   	; 0x12ef8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
   13386:	7d 83       	std	Y+5, r23	; 0x05
   13388:	6e 83       	std	Y+6, r22	; 0x06
   1338a:	3f 83       	std	Y+7, r19	; 0x07
   1338c:	28 87       	std	Y+8, r18	; 0x08
   1338e:	59 83       	std	Y+1, r21	; 0x01
   13390:	4a 83       	std	Y+2, r20	; 0x02
   13392:	1b 83       	std	Y+3, r17	; 0x03
   13394:	0c 83       	std	Y+4, r16	; 0x04
   13396:	f7 01       	movw	r30, r14
   13398:	64 8d       	ldd	r22, Z+28	; 0x1c
   1339a:	75 8d       	ldd	r23, Z+29	; 0x1d
   1339c:	24 e0       	ldi	r18, 0x04	; 4
   1339e:	ae 01       	movw	r20, r28
   133a0:	4b 5f       	subi	r20, 0xFB	; 251
   133a2:	5f 4f       	sbci	r21, 0xFF	; 255
   133a4:	c7 01       	movw	r24, r14
   133a6:	0e 94 f7 93 	call	0x127ee	; 0x127ee <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   133aa:	d7 01       	movw	r26, r14
   133ac:	5e 96       	adiw	r26, 0x1e	; 30
   133ae:	6d 91       	ld	r22, X+
   133b0:	7c 91       	ld	r23, X
   133b2:	24 e0       	ldi	r18, 0x04	; 4
   133b4:	ae 01       	movw	r20, r28
   133b6:	4f 5f       	subi	r20, 0xFF	; 255
   133b8:	5f 4f       	sbci	r21, 0xFF	; 255
   133ba:	c7 01       	movw	r24, r14
   133bc:	0e 94 f7 93 	call	0x127ee	; 0x127ee <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   133c0:	ae cd       	rjmp	.-1188   	; 0x12f1e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

000133c2 <LCDWIKI_KBV::Set_LR()>:
_ZN11LCDWIKI_KBV6Set_LREv():
   133c2:	fc 01       	movw	r30, r24
   133c4:	a6 a5       	ldd	r26, Z+46	; 0x2e
   133c6:	b7 a5       	ldd	r27, Z+47	; 0x2f
   133c8:	8c 91       	ld	r24, X
   133ca:	92 ad       	ldd	r25, Z+58	; 0x3a
   133cc:	89 23       	and	r24, r25
   133ce:	8c 93       	st	X, r24
   133d0:	a0 a9       	ldd	r26, Z+48	; 0x30
   133d2:	b1 a9       	ldd	r27, Z+49	; 0x31
   133d4:	8c 91       	ld	r24, X
   133d6:	93 ad       	ldd	r25, Z+59	; 0x3b
   133d8:	89 23       	and	r24, r25
   133da:	8c 93       	st	X, r24
   133dc:	84 e0       	ldi	r24, 0x04	; 4
   133de:	82 b9       	out	0x02, r24	; 2
   133e0:	a2 a9       	ldd	r26, Z+50	; 0x32
   133e2:	b3 a9       	ldd	r27, Z+51	; 0x33
   133e4:	8c 91       	ld	r24, X
   133e6:	94 ad       	ldd	r25, Z+60	; 0x3c
   133e8:	89 23       	and	r24, r25
   133ea:	8c 93       	st	X, r24
   133ec:	a2 a9       	ldd	r26, Z+50	; 0x32
   133ee:	b3 a9       	ldd	r27, Z+51	; 0x33
   133f0:	8c 91       	ld	r24, X
   133f2:	90 ad       	ldd	r25, Z+56	; 0x38
   133f4:	89 2b       	or	r24, r25
   133f6:	8c 93       	st	X, r24
   133f8:	a0 a9       	ldd	r26, Z+48	; 0x30
   133fa:	b1 a9       	ldd	r27, Z+49	; 0x31
   133fc:	8c 91       	ld	r24, X
   133fe:	97 a9       	ldd	r25, Z+55	; 0x37
   13400:	89 2b       	or	r24, r25
   13402:	8c 93       	st	X, r24
   13404:	82 89       	ldd	r24, Z+18	; 0x12
   13406:	93 89       	ldd	r25, Z+19	; 0x13
   13408:	01 97       	sbiw	r24, 0x01	; 1
   1340a:	92 b9       	out	0x02, r25	; 2
   1340c:	a2 a9       	ldd	r26, Z+50	; 0x32
   1340e:	b3 a9       	ldd	r27, Z+51	; 0x33
   13410:	8c 91       	ld	r24, X
   13412:	94 ad       	ldd	r25, Z+60	; 0x3c
   13414:	89 23       	and	r24, r25
   13416:	8c 93       	st	X, r24
   13418:	a2 a9       	ldd	r26, Z+50	; 0x32
   1341a:	b3 a9       	ldd	r27, Z+51	; 0x33
   1341c:	8c 91       	ld	r24, X
   1341e:	90 ad       	ldd	r25, Z+56	; 0x38
   13420:	89 2b       	or	r24, r25
   13422:	8c 93       	st	X, r24
   13424:	a0 a9       	ldd	r26, Z+48	; 0x30
   13426:	b1 a9       	ldd	r27, Z+49	; 0x31
   13428:	8c 91       	ld	r24, X
   1342a:	93 ad       	ldd	r25, Z+59	; 0x3b
   1342c:	89 23       	and	r24, r25
   1342e:	8c 93       	st	X, r24
   13430:	85 e0       	ldi	r24, 0x05	; 5
   13432:	82 b9       	out	0x02, r24	; 2
   13434:	a2 a9       	ldd	r26, Z+50	; 0x32
   13436:	b3 a9       	ldd	r27, Z+51	; 0x33
   13438:	8c 91       	ld	r24, X
   1343a:	94 ad       	ldd	r25, Z+60	; 0x3c
   1343c:	89 23       	and	r24, r25
   1343e:	8c 93       	st	X, r24
   13440:	a2 a9       	ldd	r26, Z+50	; 0x32
   13442:	b3 a9       	ldd	r27, Z+51	; 0x33
   13444:	8c 91       	ld	r24, X
   13446:	90 ad       	ldd	r25, Z+56	; 0x38
   13448:	89 2b       	or	r24, r25
   1344a:	8c 93       	st	X, r24
   1344c:	a0 a9       	ldd	r26, Z+48	; 0x30
   1344e:	b1 a9       	ldd	r27, Z+49	; 0x31
   13450:	8c 91       	ld	r24, X
   13452:	97 a9       	ldd	r25, Z+55	; 0x37
   13454:	89 2b       	or	r24, r25
   13456:	8c 93       	st	X, r24
   13458:	82 89       	ldd	r24, Z+18	; 0x12
   1345a:	81 50       	subi	r24, 0x01	; 1
   1345c:	82 b9       	out	0x02, r24	; 2
   1345e:	a2 a9       	ldd	r26, Z+50	; 0x32
   13460:	b3 a9       	ldd	r27, Z+51	; 0x33
   13462:	8c 91       	ld	r24, X
   13464:	94 ad       	ldd	r25, Z+60	; 0x3c
   13466:	89 23       	and	r24, r25
   13468:	8c 93       	st	X, r24
   1346a:	a2 a9       	ldd	r26, Z+50	; 0x32
   1346c:	b3 a9       	ldd	r27, Z+51	; 0x33
   1346e:	8c 91       	ld	r24, X
   13470:	90 ad       	ldd	r25, Z+56	; 0x38
   13472:	89 2b       	or	r24, r25
   13474:	8c 93       	st	X, r24
   13476:	a0 a9       	ldd	r26, Z+48	; 0x30
   13478:	b1 a9       	ldd	r27, Z+49	; 0x31
   1347a:	8c 91       	ld	r24, X
   1347c:	93 ad       	ldd	r25, Z+59	; 0x3b
   1347e:	89 23       	and	r24, r25
   13480:	8c 93       	st	X, r24
   13482:	88 e0       	ldi	r24, 0x08	; 8
   13484:	82 b9       	out	0x02, r24	; 2
   13486:	a2 a9       	ldd	r26, Z+50	; 0x32
   13488:	b3 a9       	ldd	r27, Z+51	; 0x33
   1348a:	8c 91       	ld	r24, X
   1348c:	94 ad       	ldd	r25, Z+60	; 0x3c
   1348e:	89 23       	and	r24, r25
   13490:	8c 93       	st	X, r24
   13492:	a2 a9       	ldd	r26, Z+50	; 0x32
   13494:	b3 a9       	ldd	r27, Z+51	; 0x33
   13496:	8c 91       	ld	r24, X
   13498:	90 ad       	ldd	r25, Z+56	; 0x38
   1349a:	89 2b       	or	r24, r25
   1349c:	8c 93       	st	X, r24
   1349e:	a0 a9       	ldd	r26, Z+48	; 0x30
   134a0:	b1 a9       	ldd	r27, Z+49	; 0x31
   134a2:	8c 91       	ld	r24, X
   134a4:	97 a9       	ldd	r25, Z+55	; 0x37
   134a6:	89 2b       	or	r24, r25
   134a8:	8c 93       	st	X, r24
   134aa:	84 89       	ldd	r24, Z+20	; 0x14
   134ac:	95 89       	ldd	r25, Z+21	; 0x15
   134ae:	01 97       	sbiw	r24, 0x01	; 1
   134b0:	92 b9       	out	0x02, r25	; 2
   134b2:	a2 a9       	ldd	r26, Z+50	; 0x32
   134b4:	b3 a9       	ldd	r27, Z+51	; 0x33
   134b6:	8c 91       	ld	r24, X
   134b8:	94 ad       	ldd	r25, Z+60	; 0x3c
   134ba:	89 23       	and	r24, r25
   134bc:	8c 93       	st	X, r24
   134be:	a2 a9       	ldd	r26, Z+50	; 0x32
   134c0:	b3 a9       	ldd	r27, Z+51	; 0x33
   134c2:	8c 91       	ld	r24, X
   134c4:	90 ad       	ldd	r25, Z+56	; 0x38
   134c6:	89 2b       	or	r24, r25
   134c8:	8c 93       	st	X, r24
   134ca:	a0 a9       	ldd	r26, Z+48	; 0x30
   134cc:	b1 a9       	ldd	r27, Z+49	; 0x31
   134ce:	8c 91       	ld	r24, X
   134d0:	93 ad       	ldd	r25, Z+59	; 0x3b
   134d2:	89 23       	and	r24, r25
   134d4:	8c 93       	st	X, r24
   134d6:	89 e0       	ldi	r24, 0x09	; 9
   134d8:	82 b9       	out	0x02, r24	; 2
   134da:	a2 a9       	ldd	r26, Z+50	; 0x32
   134dc:	b3 a9       	ldd	r27, Z+51	; 0x33
   134de:	8c 91       	ld	r24, X
   134e0:	94 ad       	ldd	r25, Z+60	; 0x3c
   134e2:	89 23       	and	r24, r25
   134e4:	8c 93       	st	X, r24
   134e6:	a2 a9       	ldd	r26, Z+50	; 0x32
   134e8:	b3 a9       	ldd	r27, Z+51	; 0x33
   134ea:	8c 91       	ld	r24, X
   134ec:	90 ad       	ldd	r25, Z+56	; 0x38
   134ee:	89 2b       	or	r24, r25
   134f0:	8c 93       	st	X, r24
   134f2:	a0 a9       	ldd	r26, Z+48	; 0x30
   134f4:	b1 a9       	ldd	r27, Z+49	; 0x31
   134f6:	8c 91       	ld	r24, X
   134f8:	97 a9       	ldd	r25, Z+55	; 0x37
   134fa:	89 2b       	or	r24, r25
   134fc:	8c 93       	st	X, r24
   134fe:	84 89       	ldd	r24, Z+20	; 0x14
   13500:	81 50       	subi	r24, 0x01	; 1
   13502:	82 b9       	out	0x02, r24	; 2
   13504:	a2 a9       	ldd	r26, Z+50	; 0x32
   13506:	b3 a9       	ldd	r27, Z+51	; 0x33
   13508:	8c 91       	ld	r24, X
   1350a:	94 ad       	ldd	r25, Z+60	; 0x3c
   1350c:	89 23       	and	r24, r25
   1350e:	8c 93       	st	X, r24
   13510:	a2 a9       	ldd	r26, Z+50	; 0x32
   13512:	b3 a9       	ldd	r27, Z+51	; 0x33
   13514:	8c 91       	ld	r24, X
   13516:	90 ad       	ldd	r25, Z+56	; 0x38
   13518:	89 2b       	or	r24, r25
   1351a:	8c 93       	st	X, r24
   1351c:	a6 a5       	ldd	r26, Z+46	; 0x2e
   1351e:	b7 a5       	ldd	r27, Z+47	; 0x2f
   13520:	8c 91       	ld	r24, X
   13522:	96 a9       	ldd	r25, Z+54	; 0x36
   13524:	89 2b       	or	r24, r25
   13526:	8c 93       	st	X, r24
   13528:	08 95       	ret

0001352a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
   1352a:	4f 92       	push	r4
   1352c:	5f 92       	push	r5
   1352e:	6f 92       	push	r6
   13530:	7f 92       	push	r7
   13532:	8f 92       	push	r8
   13534:	9f 92       	push	r9
   13536:	af 92       	push	r10
   13538:	bf 92       	push	r11
   1353a:	cf 92       	push	r12
   1353c:	df 92       	push	r13
   1353e:	ef 92       	push	r14
   13540:	ff 92       	push	r15
   13542:	0f 93       	push	r16
   13544:	1f 93       	push	r17
   13546:	cf 93       	push	r28
   13548:	df 93       	push	r29
   1354a:	ec 01       	movw	r28, r24
   1354c:	5a 01       	movw	r10, r20
   1354e:	27 01       	movw	r4, r14
   13550:	37 ff       	sbrs	r19, 7
   13552:	05 c0       	rjmp	.+10     	; 0x1355e <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
   13554:	62 0f       	add	r22, r18
   13556:	73 1f       	adc	r23, r19
   13558:	31 95       	neg	r19
   1355a:	21 95       	neg	r18
   1355c:	31 09       	sbc	r19, r1
   1355e:	7b 01       	movw	r14, r22
   13560:	e2 0e       	add	r14, r18
   13562:	f3 1e       	adc	r15, r19
   13564:	6b 01       	movw	r12, r22
   13566:	77 ff       	sbrs	r23, 7
   13568:	02 c0       	rjmp	.+4      	; 0x1356e <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
   1356a:	d1 2c       	mov	r13, r1
   1356c:	c1 2c       	mov	r12, r1
   1356e:	e8 81       	ld	r30, Y
   13570:	f9 81       	ldd	r31, Y+1	; 0x01
   13572:	06 84       	ldd	r0, Z+14	; 0x0e
   13574:	f7 85       	ldd	r31, Z+15	; 0x0f
   13576:	e0 2d       	mov	r30, r0
   13578:	ce 01       	movw	r24, r28
   1357a:	19 95       	eicall
   1357c:	8e 15       	cp	r24, r14
   1357e:	9f 05       	cpc	r25, r15
   13580:	44 f4       	brge	.+16     	; 0x13592 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
   13582:	e8 81       	ld	r30, Y
   13584:	f9 81       	ldd	r31, Y+1	; 0x01
   13586:	06 84       	ldd	r0, Z+14	; 0x0e
   13588:	f7 85       	ldd	r31, Z+15	; 0x0f
   1358a:	e0 2d       	mov	r30, r0
   1358c:	ce 01       	movw	r24, r28
   1358e:	19 95       	eicall
   13590:	7c 01       	movw	r14, r24
   13592:	47 01       	movw	r8, r14
   13594:	8c 18       	sub	r8, r12
   13596:	9d 08       	sbc	r9, r13
   13598:	17 ff       	sbrs	r17, 7
   1359a:	05 c0       	rjmp	.+10     	; 0x135a6 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
   1359c:	a0 0e       	add	r10, r16
   1359e:	b1 1e       	adc	r11, r17
   135a0:	11 95       	neg	r17
   135a2:	01 95       	neg	r16
   135a4:	11 09       	sbc	r17, r1
   135a6:	0a 0d       	add	r16, r10
   135a8:	1b 1d       	adc	r17, r11
   135aa:	b7 fe       	sbrs	r11, 7
   135ac:	02 c0       	rjmp	.+4      	; 0x135b2 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
   135ae:	b1 2c       	mov	r11, r1
   135b0:	a1 2c       	mov	r10, r1
   135b2:	e8 81       	ld	r30, Y
   135b4:	f9 81       	ldd	r31, Y+1	; 0x01
   135b6:	04 84       	ldd	r0, Z+12	; 0x0c
   135b8:	f5 85       	ldd	r31, Z+13	; 0x0d
   135ba:	e0 2d       	mov	r30, r0
   135bc:	ce 01       	movw	r24, r28
   135be:	19 95       	eicall
   135c0:	80 17       	cp	r24, r16
   135c2:	91 07       	cpc	r25, r17
   135c4:	44 f4       	brge	.+16     	; 0x135d6 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
   135c6:	e8 81       	ld	r30, Y
   135c8:	f9 81       	ldd	r31, Y+1	; 0x01
   135ca:	04 84       	ldd	r0, Z+12	; 0x0c
   135cc:	f5 85       	ldd	r31, Z+13	; 0x0d
   135ce:	e0 2d       	mov	r30, r0
   135d0:	ce 01       	movw	r24, r28
   135d2:	19 95       	eicall
   135d4:	8c 01       	movw	r16, r24
   135d6:	38 01       	movw	r6, r16
   135d8:	6a 18       	sub	r6, r10
   135da:	7b 08       	sbc	r7, r11
   135dc:	01 50       	subi	r16, 0x01	; 1
   135de:	11 09       	sbc	r17, r1
   135e0:	97 01       	movw	r18, r14
   135e2:	21 50       	subi	r18, 0x01	; 1
   135e4:	31 09       	sbc	r19, r1
   135e6:	e8 81       	ld	r30, Y
   135e8:	f9 81       	ldd	r31, Y+1	; 0x01
   135ea:	06 80       	ldd	r0, Z+6	; 0x06
   135ec:	f7 81       	ldd	r31, Z+7	; 0x07
   135ee:	e0 2d       	mov	r30, r0
   135f0:	a5 01       	movw	r20, r10
   135f2:	b6 01       	movw	r22, r12
   135f4:	ce 01       	movw	r24, r28
   135f6:	19 95       	eicall
   135f8:	ee a5       	ldd	r30, Y+46	; 0x2e
   135fa:	ff a5       	ldd	r31, Y+47	; 0x2f
   135fc:	80 81       	ld	r24, Z
   135fe:	9a ad       	ldd	r25, Y+58	; 0x3a
   13600:	89 23       	and	r24, r25
   13602:	80 83       	st	Z, r24
   13604:	88 8d       	ldd	r24, Y+24	; 0x18
   13606:	99 8d       	ldd	r25, Y+25	; 0x19
   13608:	89 2b       	or	r24, r25
   1360a:	c9 f4       	brne	.+50     	; 0x1363e <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
   1360c:	e8 a9       	ldd	r30, Y+48	; 0x30
   1360e:	f9 a9       	ldd	r31, Y+49	; 0x31
   13610:	80 81       	ld	r24, Z
   13612:	9b ad       	ldd	r25, Y+59	; 0x3b
   13614:	89 23       	and	r24, r25
   13616:	80 83       	st	Z, r24
   13618:	12 b8       	out	0x02, r1	; 2
   1361a:	ea a9       	ldd	r30, Y+50	; 0x32
   1361c:	fb a9       	ldd	r31, Y+51	; 0x33
   1361e:	80 81       	ld	r24, Z
   13620:	9c ad       	ldd	r25, Y+60	; 0x3c
   13622:	89 23       	and	r24, r25
   13624:	80 83       	st	Z, r24
   13626:	ea a9       	ldd	r30, Y+50	; 0x32
   13628:	fb a9       	ldd	r31, Y+51	; 0x33
   1362a:	80 81       	ld	r24, Z
   1362c:	98 ad       	ldd	r25, Y+56	; 0x38
   1362e:	89 2b       	or	r24, r25
   13630:	80 83       	st	Z, r24
   13632:	e8 a9       	ldd	r30, Y+48	; 0x30
   13634:	f9 a9       	ldd	r31, Y+49	; 0x31
   13636:	80 81       	ld	r24, Z
   13638:	9f a9       	ldd	r25, Y+55	; 0x37
   1363a:	89 2b       	or	r24, r25
   1363c:	80 83       	st	Z, r24
   1363e:	e8 a9       	ldd	r30, Y+48	; 0x30
   13640:	f9 a9       	ldd	r31, Y+49	; 0x31
   13642:	80 81       	ld	r24, Z
   13644:	9b ad       	ldd	r25, Y+59	; 0x3b
   13646:	89 23       	and	r24, r25
   13648:	80 83       	st	Z, r24
   1364a:	88 a1       	ldd	r24, Y+32	; 0x20
   1364c:	82 b9       	out	0x02, r24	; 2
   1364e:	ea a9       	ldd	r30, Y+50	; 0x32
   13650:	fb a9       	ldd	r31, Y+51	; 0x33
   13652:	80 81       	ld	r24, Z
   13654:	9c ad       	ldd	r25, Y+60	; 0x3c
   13656:	89 23       	and	r24, r25
   13658:	80 83       	st	Z, r24
   1365a:	ea a9       	ldd	r30, Y+50	; 0x32
   1365c:	fb a9       	ldd	r31, Y+51	; 0x33
   1365e:	80 81       	ld	r24, Z
   13660:	98 ad       	ldd	r25, Y+56	; 0x38
   13662:	89 2b       	or	r24, r25
   13664:	80 83       	st	Z, r24
   13666:	e8 a9       	ldd	r30, Y+48	; 0x30
   13668:	f9 a9       	ldd	r31, Y+49	; 0x31
   1366a:	80 81       	ld	r24, Z
   1366c:	9f a9       	ldd	r25, Y+55	; 0x37
   1366e:	89 2b       	or	r24, r25
   13670:	80 83       	st	Z, r24
   13672:	86 14       	cp	r8, r6
   13674:	97 04       	cpc	r9, r7
   13676:	2c f0       	brlt	.+10     	; 0x13682 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
   13678:	96 2d       	mov	r25, r6
   1367a:	87 2d       	mov	r24, r7
   1367c:	34 01       	movw	r6, r8
   1367e:	89 2e       	mov	r8, r25
   13680:	98 2e       	mov	r9, r24
   13682:	18 14       	cp	r1, r8
   13684:	19 04       	cpc	r1, r9
   13686:	0c f5       	brge	.+66     	; 0x136ca <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
   13688:	c3 01       	movw	r24, r6
   1368a:	52 b8       	out	0x02, r5	; 2
   1368c:	ea a9       	ldd	r30, Y+50	; 0x32
   1368e:	fb a9       	ldd	r31, Y+51	; 0x33
   13690:	20 81       	ld	r18, Z
   13692:	3c ad       	ldd	r19, Y+60	; 0x3c
   13694:	23 23       	and	r18, r19
   13696:	20 83       	st	Z, r18
   13698:	ea a9       	ldd	r30, Y+50	; 0x32
   1369a:	fb a9       	ldd	r31, Y+51	; 0x33
   1369c:	20 81       	ld	r18, Z
   1369e:	38 ad       	ldd	r19, Y+56	; 0x38
   136a0:	23 2b       	or	r18, r19
   136a2:	20 83       	st	Z, r18
   136a4:	42 b8       	out	0x02, r4	; 2
   136a6:	ea a9       	ldd	r30, Y+50	; 0x32
   136a8:	fb a9       	ldd	r31, Y+51	; 0x33
   136aa:	20 81       	ld	r18, Z
   136ac:	3c ad       	ldd	r19, Y+60	; 0x3c
   136ae:	23 23       	and	r18, r19
   136b0:	20 83       	st	Z, r18
   136b2:	ea a9       	ldd	r30, Y+50	; 0x32
   136b4:	fb a9       	ldd	r31, Y+51	; 0x33
   136b6:	20 81       	ld	r18, Z
   136b8:	38 ad       	ldd	r19, Y+56	; 0x38
   136ba:	23 2b       	or	r18, r19
   136bc:	20 83       	st	Z, r18
   136be:	01 97       	sbiw	r24, 0x01	; 1
   136c0:	21 f7       	brne	.-56     	; 0x1368a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
   136c2:	81 e0       	ldi	r24, 0x01	; 1
   136c4:	88 1a       	sub	r8, r24
   136c6:	91 08       	sbc	r9, r1
   136c8:	dc cf       	rjmp	.-72     	; 0x13682 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
   136ca:	88 8d       	ldd	r24, Y+24	; 0x18
   136cc:	99 8d       	ldd	r25, Y+25	; 0x19
   136ce:	00 97       	sbiw	r24, 0x00	; 0
   136d0:	51 f5       	brne	.+84     	; 0x13726 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
   136d2:	0c 89       	ldd	r16, Y+20	; 0x14
   136d4:	1d 89       	ldd	r17, Y+21	; 0x15
   136d6:	01 50       	subi	r16, 0x01	; 1
   136d8:	11 09       	sbc	r17, r1
   136da:	2a 89       	ldd	r18, Y+18	; 0x12
   136dc:	3b 89       	ldd	r19, Y+19	; 0x13
   136de:	21 50       	subi	r18, 0x01	; 1
   136e0:	31 09       	sbc	r19, r1
   136e2:	e8 81       	ld	r30, Y
   136e4:	f9 81       	ldd	r31, Y+1	; 0x01
   136e6:	06 80       	ldd	r0, Z+6	; 0x06
   136e8:	f7 81       	ldd	r31, Z+7	; 0x07
   136ea:	e0 2d       	mov	r30, r0
   136ec:	50 e0       	ldi	r21, 0x00	; 0
   136ee:	40 e0       	ldi	r20, 0x00	; 0
   136f0:	70 e0       	ldi	r23, 0x00	; 0
   136f2:	60 e0       	ldi	r22, 0x00	; 0
   136f4:	ce 01       	movw	r24, r28
   136f6:	19 95       	eicall
   136f8:	ee a5       	ldd	r30, Y+46	; 0x2e
   136fa:	ff a5       	ldd	r31, Y+47	; 0x2f
   136fc:	80 81       	ld	r24, Z
   136fe:	9e a9       	ldd	r25, Y+54	; 0x36
   13700:	89 2b       	or	r24, r25
   13702:	80 83       	st	Z, r24
   13704:	df 91       	pop	r29
   13706:	cf 91       	pop	r28
   13708:	1f 91       	pop	r17
   1370a:	0f 91       	pop	r16
   1370c:	ff 90       	pop	r15
   1370e:	ef 90       	pop	r14
   13710:	df 90       	pop	r13
   13712:	cf 90       	pop	r12
   13714:	bf 90       	pop	r11
   13716:	af 90       	pop	r10
   13718:	9f 90       	pop	r9
   1371a:	8f 90       	pop	r8
   1371c:	7f 90       	pop	r7
   1371e:	6f 90       	pop	r6
   13720:	5f 90       	pop	r5
   13722:	4f 90       	pop	r4
   13724:	08 95       	ret
   13726:	01 97       	sbiw	r24, 0x01	; 1
   13728:	39 f7       	brne	.-50     	; 0x136f8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
   1372a:	ce 01       	movw	r24, r28
   1372c:	0e 94 e1 99 	call	0x133c2	; 0x133c2 <LCDWIKI_KBV::Set_LR()>
   13730:	e3 cf       	rjmp	.-58     	; 0x136f8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

00013732 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>:
_ZN11LCDWIKI_KBV8Read_RegEja():
   13732:	1f 93       	push	r17
   13734:	cf 93       	push	r28
   13736:	df 93       	push	r29
   13738:	ec 01       	movw	r28, r24
   1373a:	14 2f       	mov	r17, r20
   1373c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1373e:	ff a5       	ldd	r31, Y+47	; 0x2f
   13740:	80 81       	ld	r24, Z
   13742:	9a ad       	ldd	r25, Y+58	; 0x3a
   13744:	89 23       	and	r24, r25
   13746:	80 83       	st	Z, r24
   13748:	e8 a9       	ldd	r30, Y+48	; 0x30
   1374a:	f9 a9       	ldd	r31, Y+49	; 0x31
   1374c:	80 81       	ld	r24, Z
   1374e:	9b ad       	ldd	r25, Y+59	; 0x3b
   13750:	89 23       	and	r24, r25
   13752:	80 83       	st	Z, r24
   13754:	72 b9       	out	0x02, r23	; 2
   13756:	ea a9       	ldd	r30, Y+50	; 0x32
   13758:	fb a9       	ldd	r31, Y+51	; 0x33
   1375a:	80 81       	ld	r24, Z
   1375c:	9c ad       	ldd	r25, Y+60	; 0x3c
   1375e:	89 23       	and	r24, r25
   13760:	80 83       	st	Z, r24
   13762:	ea a9       	ldd	r30, Y+50	; 0x32
   13764:	fb a9       	ldd	r31, Y+51	; 0x33
   13766:	80 81       	ld	r24, Z
   13768:	98 ad       	ldd	r25, Y+56	; 0x38
   1376a:	89 2b       	or	r24, r25
   1376c:	80 83       	st	Z, r24
   1376e:	62 b9       	out	0x02, r22	; 2
   13770:	ea a9       	ldd	r30, Y+50	; 0x32
   13772:	fb a9       	ldd	r31, Y+51	; 0x33
   13774:	80 81       	ld	r24, Z
   13776:	9c ad       	ldd	r25, Y+60	; 0x3c
   13778:	89 23       	and	r24, r25
   1377a:	80 83       	st	Z, r24
   1377c:	ea a9       	ldd	r30, Y+50	; 0x32
   1377e:	fb a9       	ldd	r31, Y+51	; 0x33
   13780:	80 81       	ld	r24, Z
   13782:	98 ad       	ldd	r25, Y+56	; 0x38
   13784:	89 2b       	or	r24, r25
   13786:	80 83       	st	Z, r24
   13788:	e8 a9       	ldd	r30, Y+48	; 0x30
   1378a:	f9 a9       	ldd	r31, Y+49	; 0x31
   1378c:	80 81       	ld	r24, Z
   1378e:	9f a9       	ldd	r25, Y+55	; 0x37
   13790:	89 2b       	or	r24, r25
   13792:	80 83       	st	Z, r24
   13794:	81 b1       	in	r24, 0x01	; 1
   13796:	11 b8       	out	0x01, r1	; 1
   13798:	61 e0       	ldi	r22, 0x01	; 1
   1379a:	70 e0       	ldi	r23, 0x00	; 0
   1379c:	80 e0       	ldi	r24, 0x00	; 0
   1379e:	90 e0       	ldi	r25, 0x00	; 0
   137a0:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
   137a4:	ec a9       	ldd	r30, Y+52	; 0x34
   137a6:	fd a9       	ldd	r31, Y+53	; 0x35
   137a8:	80 81       	ld	r24, Z
   137aa:	9d ad       	ldd	r25, Y+61	; 0x3d
   137ac:	89 23       	and	r24, r25
   137ae:	80 83       	st	Z, r24
   137b0:	20 b1       	in	r18, 0x00	; 0
   137b2:	ec a9       	ldd	r30, Y+52	; 0x34
   137b4:	fd a9       	ldd	r31, Y+53	; 0x35
   137b6:	90 81       	ld	r25, Z
   137b8:	89 ad       	ldd	r24, Y+57	; 0x39
   137ba:	98 2b       	or	r25, r24
   137bc:	90 83       	st	Z, r25
   137be:	ec a9       	ldd	r30, Y+52	; 0x34
   137c0:	fd a9       	ldd	r31, Y+53	; 0x35
   137c2:	90 81       	ld	r25, Z
   137c4:	8d ad       	ldd	r24, Y+61	; 0x3d
   137c6:	98 23       	and	r25, r24
   137c8:	90 83       	st	Z, r25
   137ca:	80 b1       	in	r24, 0x00	; 0
   137cc:	ec a9       	ldd	r30, Y+52	; 0x34
   137ce:	fd a9       	ldd	r31, Y+53	; 0x35
   137d0:	90 81       	ld	r25, Z
   137d2:	39 ad       	ldd	r19, Y+57	; 0x39
   137d4:	93 2b       	or	r25, r19
   137d6:	90 83       	st	Z, r25
   137d8:	11 50       	subi	r17, 0x01	; 1
   137da:	17 ff       	sbrs	r17, 7
   137dc:	e3 cf       	rjmp	.-58     	; 0x137a4 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)+0x72>
   137de:	ee a5       	ldd	r30, Y+46	; 0x2e
   137e0:	ff a5       	ldd	r31, Y+47	; 0x2f
   137e2:	90 81       	ld	r25, Z
   137e4:	3e a9       	ldd	r19, Y+54	; 0x36
   137e6:	93 2b       	or	r25, r19
   137e8:	90 83       	st	Z, r25
   137ea:	91 b1       	in	r25, 0x01	; 1
   137ec:	9f ef       	ldi	r25, 0xFF	; 255
   137ee:	91 b9       	out	0x01, r25	; 1
   137f0:	92 2f       	mov	r25, r18
   137f2:	df 91       	pop	r29
   137f4:	cf 91       	pop	r28
   137f6:	1f 91       	pop	r17
   137f8:	08 95       	ret

000137fa <LCDWIKI_KBV::Read_ID()>:
_ZN11LCDWIKI_KBV7Read_IDEv():
   137fa:	0f 93       	push	r16
   137fc:	1f 93       	push	r17
   137fe:	cf 93       	push	r28
   13800:	df 93       	push	r29
   13802:	00 d0       	rcall	.+0      	; 0x13804 <LCDWIKI_KBV::Read_ID()+0xa>
   13804:	cd b7       	in	r28, 0x3d	; 61
   13806:	de b7       	in	r29, 0x3e	; 62
   13808:	8c 01       	movw	r16, r24
   1380a:	40 e0       	ldi	r20, 0x00	; 0
   1380c:	64 e0       	ldi	r22, 0x04	; 4
   1380e:	70 e0       	ldi	r23, 0x00	; 0
   13810:	0e 94 99 9b 	call	0x13732	; 0x13732 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   13814:	89 2b       	or	r24, r25
   13816:	39 f5       	brne	.+78     	; 0x13866 <LCDWIKI_KBV::Read_ID()+0x6c>
   13818:	41 e0       	ldi	r20, 0x01	; 1
   1381a:	64 e0       	ldi	r22, 0x04	; 4
   1381c:	70 e0       	ldi	r23, 0x00	; 0
   1381e:	c8 01       	movw	r24, r16
   13820:	0e 94 99 9b 	call	0x13732	; 0x13732 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   13824:	81 15       	cp	r24, r1
   13826:	90 48       	sbci	r25, 0x80	; 128
   13828:	f1 f4       	brne	.+60     	; 0x13866 <LCDWIKI_KBV::Read_ID()+0x6c>
   1382a:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <LM75_Compatible_Registers+0x4>
   1382e:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <LM75_Compatible_Registers+0x5>
   13832:	a0 91 8a 02 	lds	r26, 0x028A	; 0x80028a <LM75_Compatible_Registers+0x6>
   13836:	89 83       	std	Y+1, r24	; 0x01
   13838:	9a 83       	std	Y+2, r25	; 0x02
   1383a:	ab 83       	std	Y+3, r26	; 0x03
   1383c:	23 e0       	ldi	r18, 0x03	; 3
   1383e:	ae 01       	movw	r20, r28
   13840:	4f 5f       	subi	r20, 0xFF	; 255
   13842:	5f 4f       	sbci	r21, 0xFF	; 255
   13844:	69 eb       	ldi	r22, 0xB9	; 185
   13846:	70 e0       	ldi	r23, 0x00	; 0
   13848:	c8 01       	movw	r24, r16
   1384a:	0e 94 f7 93 	call	0x127ee	; 0x127ee <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1384e:	40 e0       	ldi	r20, 0x00	; 0
   13850:	60 ed       	ldi	r22, 0xD0	; 208
   13852:	70 e0       	ldi	r23, 0x00	; 0
   13854:	c8 01       	movw	r24, r16
   13856:	0e 94 99 9b 	call	0x13732	; 0x13732 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   1385a:	41 e0       	ldi	r20, 0x01	; 1
   1385c:	60 ed       	ldi	r22, 0xD0	; 208
   1385e:	70 e0       	ldi	r23, 0x00	; 0
   13860:	c8 01       	movw	r24, r16
   13862:	0e 94 99 9b 	call	0x13732	; 0x13732 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   13866:	41 e0       	ldi	r20, 0x01	; 1
   13868:	63 ed       	ldi	r22, 0xD3	; 211
   1386a:	70 e0       	ldi	r23, 0x00	; 0
   1386c:	c8 01       	movw	r24, r16
   1386e:	0e 94 99 9b 	call	0x13732	; 0x13732 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   13872:	81 34       	cpi	r24, 0x41	; 65
   13874:	23 e9       	ldi	r18, 0x93	; 147
   13876:	92 07       	cpc	r25, r18
   13878:	91 f0       	breq	.+36     	; 0x1389e <LCDWIKI_KBV::Read_ID()+0xa4>
   1387a:	86 38       	cpi	r24, 0x86	; 134
   1387c:	24 e9       	ldi	r18, 0x94	; 148
   1387e:	92 07       	cpc	r25, r18
   13880:	71 f0       	breq	.+28     	; 0x1389e <LCDWIKI_KBV::Read_ID()+0xa4>
   13882:	88 38       	cpi	r24, 0x88	; 136
   13884:	24 e9       	ldi	r18, 0x94	; 148
   13886:	92 07       	cpc	r25, r18
   13888:	51 f0       	breq	.+20     	; 0x1389e <LCDWIKI_KBV::Read_ID()+0xa4>
   1388a:	86 39       	cpi	r24, 0x96	; 150
   1388c:	27 e7       	ldi	r18, 0x77	; 119
   1388e:	92 07       	cpc	r25, r18
   13890:	31 f0       	breq	.+12     	; 0x1389e <LCDWIKI_KBV::Read_ID()+0xa4>
   13892:	40 e0       	ldi	r20, 0x00	; 0
   13894:	70 e0       	ldi	r23, 0x00	; 0
   13896:	60 e0       	ldi	r22, 0x00	; 0
   13898:	c8 01       	movw	r24, r16
   1389a:	0e 94 99 9b 	call	0x13732	; 0x13732 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   1389e:	0f 90       	pop	r0
   138a0:	0f 90       	pop	r0
   138a2:	0f 90       	pop	r0
   138a4:	df 91       	pop	r29
   138a6:	cf 91       	pop	r28
   138a8:	1f 91       	pop	r17
   138aa:	0f 91       	pop	r16
   138ac:	08 95       	ret

000138ae <LCDWIKI_KBV::Vert_Scroll(int, int, int)>:
_ZN11LCDWIKI_KBV11Vert_ScrollEiii():
   138ae:	cf 92       	push	r12
   138b0:	df 92       	push	r13
   138b2:	ef 92       	push	r14
   138b4:	ff 92       	push	r15
   138b6:	0f 93       	push	r16
   138b8:	1f 93       	push	r17
   138ba:	cf 93       	push	r28
   138bc:	df 93       	push	r29
   138be:	00 d0       	rcall	.+0      	; 0x138c0 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x12>
   138c0:	00 d0       	rcall	.+0      	; 0x138c2 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x14>
   138c2:	cd b7       	in	r28, 0x3d	; 61
   138c4:	de b7       	in	r29, 0x3e	; 62
   138c6:	8c 01       	movw	r16, r24
   138c8:	79 01       	movw	r14, r18
   138ca:	88 27       	eor	r24, r24
   138cc:	99 27       	eor	r25, r25
   138ce:	84 1b       	sub	r24, r20
   138d0:	95 0b       	sbc	r25, r21
   138d2:	6b 01       	movw	r12, r22
   138d4:	82 17       	cp	r24, r18
   138d6:	93 07       	cpc	r25, r19
   138d8:	0c f0       	brlt	.+2      	; 0x138dc <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x2e>
   138da:	a3 c0       	rjmp	.+326    	; 0x13a22 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x174>
   138dc:	24 17       	cp	r18, r20
   138de:	35 07       	cpc	r19, r21
   138e0:	0c f0       	brlt	.+2      	; 0x138e4 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x36>
   138e2:	9f c0       	rjmp	.+318    	; 0x13a22 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x174>
   138e4:	c2 0e       	add	r12, r18
   138e6:	d3 1e       	adc	r13, r19
   138e8:	37 ff       	sbrs	r19, 7
   138ea:	02 c0       	rjmp	.+4      	; 0x138f0 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x42>
   138ec:	c4 0e       	add	r12, r20
   138ee:	d5 1e       	adc	r13, r21
   138f0:	d8 01       	movw	r26, r16
   138f2:	58 96       	adiw	r26, 0x18	; 24
   138f4:	8d 91       	ld	r24, X+
   138f6:	9c 91       	ld	r25, X
   138f8:	59 97       	sbiw	r26, 0x19	; 25
   138fa:	89 2b       	or	r24, r25
   138fc:	09 f0       	breq	.+2      	; 0x13900 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x52>
   138fe:	94 c0       	rjmp	.+296    	; 0x13a28 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x17a>
   13900:	d0 96       	adiw	r26, 0x30	; 48
   13902:	ed 91       	ld	r30, X+
   13904:	fc 91       	ld	r31, X
   13906:	d1 97       	sbiw	r26, 0x31	; 49
   13908:	80 81       	ld	r24, Z
   1390a:	db 96       	adiw	r26, 0x3b	; 59
   1390c:	9c 91       	ld	r25, X
   1390e:	db 97       	sbiw	r26, 0x3b	; 59
   13910:	89 23       	and	r24, r25
   13912:	80 83       	st	Z, r24
   13914:	94 96       	adiw	r26, 0x24	; 36
   13916:	8c 91       	ld	r24, X
   13918:	94 97       	sbiw	r26, 0x24	; 36
   1391a:	82 b9       	out	0x02, r24	; 2
   1391c:	d2 96       	adiw	r26, 0x32	; 50
   1391e:	ed 91       	ld	r30, X+
   13920:	fc 91       	ld	r31, X
   13922:	d3 97       	sbiw	r26, 0x33	; 51
   13924:	80 81       	ld	r24, Z
   13926:	dc 96       	adiw	r26, 0x3c	; 60
   13928:	9c 91       	ld	r25, X
   1392a:	dc 97       	sbiw	r26, 0x3c	; 60
   1392c:	89 23       	and	r24, r25
   1392e:	80 83       	st	Z, r24
   13930:	d2 96       	adiw	r26, 0x32	; 50
   13932:	ed 91       	ld	r30, X+
   13934:	fc 91       	ld	r31, X
   13936:	d3 97       	sbiw	r26, 0x33	; 51
   13938:	80 81       	ld	r24, Z
   1393a:	d8 96       	adiw	r26, 0x38	; 56
   1393c:	9c 91       	ld	r25, X
   1393e:	d8 97       	sbiw	r26, 0x38	; 56
   13940:	89 2b       	or	r24, r25
   13942:	80 83       	st	Z, r24
   13944:	d0 96       	adiw	r26, 0x30	; 48
   13946:	ed 91       	ld	r30, X+
   13948:	fc 91       	ld	r31, X
   1394a:	d1 97       	sbiw	r26, 0x31	; 49
   1394c:	80 81       	ld	r24, Z
   1394e:	d7 96       	adiw	r26, 0x37	; 55
   13950:	9c 91       	ld	r25, X
   13952:	d7 97       	sbiw	r26, 0x37	; 55
   13954:	89 2b       	or	r24, r25
   13956:	80 83       	st	Z, r24
   13958:	83 e0       	ldi	r24, 0x03	; 3
   1395a:	82 b9       	out	0x02, r24	; 2
   1395c:	d2 96       	adiw	r26, 0x32	; 50
   1395e:	ed 91       	ld	r30, X+
   13960:	fc 91       	ld	r31, X
   13962:	d3 97       	sbiw	r26, 0x33	; 51
   13964:	80 81       	ld	r24, Z
   13966:	dc 96       	adiw	r26, 0x3c	; 60
   13968:	9c 91       	ld	r25, X
   1396a:	dc 97       	sbiw	r26, 0x3c	; 60
   1396c:	89 23       	and	r24, r25
   1396e:	80 83       	st	Z, r24
   13970:	d2 96       	adiw	r26, 0x32	; 50
   13972:	ed 91       	ld	r30, X+
   13974:	fc 91       	ld	r31, X
   13976:	d3 97       	sbiw	r26, 0x33	; 51
   13978:	80 81       	ld	r24, Z
   1397a:	d8 96       	adiw	r26, 0x38	; 56
   1397c:	9c 91       	ld	r25, X
   1397e:	d8 97       	sbiw	r26, 0x38	; 56
   13980:	89 2b       	or	r24, r25
   13982:	80 83       	st	Z, r24
   13984:	d0 96       	adiw	r26, 0x30	; 48
   13986:	ed 91       	ld	r30, X+
   13988:	fc 91       	ld	r31, X
   1398a:	d1 97       	sbiw	r26, 0x31	; 49
   1398c:	80 81       	ld	r24, Z
   1398e:	db 96       	adiw	r26, 0x3b	; 59
   13990:	9c 91       	ld	r25, X
   13992:	db 97       	sbiw	r26, 0x3b	; 59
   13994:	89 23       	and	r24, r25
   13996:	80 83       	st	Z, r24
   13998:	96 96       	adiw	r26, 0x26	; 38
   1399a:	8c 91       	ld	r24, X
   1399c:	96 97       	sbiw	r26, 0x26	; 38
   1399e:	82 b9       	out	0x02, r24	; 2
   139a0:	d2 96       	adiw	r26, 0x32	; 50
   139a2:	ed 91       	ld	r30, X+
   139a4:	fc 91       	ld	r31, X
   139a6:	d3 97       	sbiw	r26, 0x33	; 51
   139a8:	80 81       	ld	r24, Z
   139aa:	dc 96       	adiw	r26, 0x3c	; 60
   139ac:	9c 91       	ld	r25, X
   139ae:	dc 97       	sbiw	r26, 0x3c	; 60
   139b0:	89 23       	and	r24, r25
   139b2:	80 83       	st	Z, r24
   139b4:	d2 96       	adiw	r26, 0x32	; 50
   139b6:	ed 91       	ld	r30, X+
   139b8:	fc 91       	ld	r31, X
   139ba:	d3 97       	sbiw	r26, 0x33	; 51
   139bc:	80 81       	ld	r24, Z
   139be:	d8 96       	adiw	r26, 0x38	; 56
   139c0:	9c 91       	ld	r25, X
   139c2:	d8 97       	sbiw	r26, 0x38	; 56
   139c4:	89 2b       	or	r24, r25
   139c6:	80 83       	st	Z, r24
   139c8:	d0 96       	adiw	r26, 0x30	; 48
   139ca:	ed 91       	ld	r30, X+
   139cc:	fc 91       	ld	r31, X
   139ce:	d1 97       	sbiw	r26, 0x31	; 49
   139d0:	80 81       	ld	r24, Z
   139d2:	d7 96       	adiw	r26, 0x37	; 55
   139d4:	9c 91       	ld	r25, X
   139d6:	d7 97       	sbiw	r26, 0x37	; 55
   139d8:	89 2b       	or	r24, r25
   139da:	80 83       	st	Z, r24
   139dc:	c2 b8       	out	0x02, r12	; 2
   139de:	d2 96       	adiw	r26, 0x32	; 50
   139e0:	ed 91       	ld	r30, X+
   139e2:	fc 91       	ld	r31, X
   139e4:	d3 97       	sbiw	r26, 0x33	; 51
   139e6:	80 81       	ld	r24, Z
   139e8:	dc 96       	adiw	r26, 0x3c	; 60
   139ea:	9c 91       	ld	r25, X
   139ec:	dc 97       	sbiw	r26, 0x3c	; 60
   139ee:	89 23       	and	r24, r25
   139f0:	80 83       	st	Z, r24
   139f2:	d2 96       	adiw	r26, 0x32	; 50
   139f4:	ed 91       	ld	r30, X+
   139f6:	fc 91       	ld	r31, X
   139f8:	d3 97       	sbiw	r26, 0x33	; 51
   139fa:	80 81       	ld	r24, Z
   139fc:	d8 96       	adiw	r26, 0x38	; 56
   139fe:	9c 91       	ld	r25, X
   13a00:	89 2b       	or	r24, r25
   13a02:	80 83       	st	Z, r24
   13a04:	26 96       	adiw	r28, 0x06	; 6
   13a06:	0f b6       	in	r0, 0x3f	; 63
   13a08:	f8 94       	cli
   13a0a:	de bf       	out	0x3e, r29	; 62
   13a0c:	0f be       	out	0x3f, r0	; 63
   13a0e:	cd bf       	out	0x3d, r28	; 61
   13a10:	df 91       	pop	r29
   13a12:	cf 91       	pop	r28
   13a14:	1f 91       	pop	r17
   13a16:	0f 91       	pop	r16
   13a18:	ff 90       	pop	r15
   13a1a:	ef 90       	pop	r14
   13a1c:	df 90       	pop	r13
   13a1e:	cf 90       	pop	r12
   13a20:	08 95       	ret
   13a22:	f1 2c       	mov	r15, r1
   13a24:	e1 2c       	mov	r14, r1
   13a26:	64 cf       	rjmp	.-312    	; 0x138f0 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x42>
   13a28:	f8 01       	movw	r30, r16
   13a2a:	80 89       	ldd	r24, Z+16	; 0x10
   13a2c:	91 89       	ldd	r25, Z+17	; 0x11
   13a2e:	86 1b       	sub	r24, r22
   13a30:	97 0b       	sbc	r25, r23
   13a32:	84 1b       	sub	r24, r20
   13a34:	95 0b       	sbc	r25, r21
   13a36:	79 83       	std	Y+1, r23	; 0x01
   13a38:	6a 83       	std	Y+2, r22	; 0x02
   13a3a:	5b 83       	std	Y+3, r21	; 0x03
   13a3c:	4c 83       	std	Y+4, r20	; 0x04
   13a3e:	9d 83       	std	Y+5, r25	; 0x05
   13a40:	8e 83       	std	Y+6, r24	; 0x06
   13a42:	64 a1       	ldd	r22, Z+36	; 0x24
   13a44:	75 a1       	ldd	r23, Z+37	; 0x25
   13a46:	26 e0       	ldi	r18, 0x06	; 6
   13a48:	ae 01       	movw	r20, r28
   13a4a:	4f 5f       	subi	r20, 0xFF	; 255
   13a4c:	5f 4f       	sbci	r21, 0xFF	; 255
   13a4e:	c8 01       	movw	r24, r16
   13a50:	0e 94 f7 93 	call	0x127ee	; 0x127ee <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   13a54:	d9 82       	std	Y+1, r13	; 0x01
   13a56:	ca 82       	std	Y+2, r12	; 0x02
   13a58:	d8 01       	movw	r26, r16
   13a5a:	96 96       	adiw	r26, 0x26	; 38
   13a5c:	6d 91       	ld	r22, X+
   13a5e:	7c 91       	ld	r23, X
   13a60:	22 e0       	ldi	r18, 0x02	; 2
   13a62:	ae 01       	movw	r20, r28
   13a64:	4f 5f       	subi	r20, 0xFF	; 255
   13a66:	5f 4f       	sbci	r21, 0xFF	; 255
   13a68:	c8 01       	movw	r24, r16
   13a6a:	0e 94 f7 93 	call	0x127ee	; 0x127ee <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   13a6e:	f8 01       	movw	r30, r16
   13a70:	80 8d       	ldd	r24, Z+24	; 0x18
   13a72:	91 8d       	ldd	r25, Z+25	; 0x19
   13a74:	01 97       	sbiw	r24, 0x01	; 1
   13a76:	79 f4       	brne	.+30     	; 0x13a96 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1e8>
   13a78:	88 e0       	ldi	r24, 0x08	; 8
   13a7a:	ef 28       	or	r14, r15
   13a7c:	09 f4       	brne	.+2      	; 0x13a80 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1d2>
   13a7e:	80 e0       	ldi	r24, 0x00	; 0
   13a80:	89 83       	std	Y+1, r24	; 0x01
   13a82:	21 e0       	ldi	r18, 0x01	; 1
   13a84:	ae 01       	movw	r20, r28
   13a86:	4f 5f       	subi	r20, 0xFF	; 255
   13a88:	5f 4f       	sbci	r21, 0xFF	; 255
   13a8a:	61 e0       	ldi	r22, 0x01	; 1
   13a8c:	70 e0       	ldi	r23, 0x00	; 0
   13a8e:	c8 01       	movw	r24, r16
   13a90:	0e 94 f7 93 	call	0x127ee	; 0x127ee <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   13a94:	b7 cf       	rjmp	.-146    	; 0x13a04 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x156>
   13a96:	ef 28       	or	r14, r15
   13a98:	09 f0       	breq	.+2      	; 0x13a9c <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1ee>
   13a9a:	b4 cf       	rjmp	.-152    	; 0x13a04 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x156>
   13a9c:	20 e0       	ldi	r18, 0x00	; 0
   13a9e:	50 e0       	ldi	r21, 0x00	; 0
   13aa0:	40 e0       	ldi	r20, 0x00	; 0
   13aa2:	63 e1       	ldi	r22, 0x13	; 19
   13aa4:	70 e0       	ldi	r23, 0x00	; 0
   13aa6:	f3 cf       	rjmp	.-26     	; 0x13a8e <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1e0>

00013aa8 <LCDWIKI_KBV::Set_Rotation(unsigned char)>:
_ZN11LCDWIKI_KBV12Set_RotationEh():
   13aa8:	0f 93       	push	r16
   13aaa:	1f 93       	push	r17
   13aac:	cf 93       	push	r28
   13aae:	df 93       	push	r29
   13ab0:	ec 01       	movw	r28, r24
   13ab2:	86 2f       	mov	r24, r22
   13ab4:	83 70       	andi	r24, 0x03	; 3
   13ab6:	90 e0       	ldi	r25, 0x00	; 0
   13ab8:	9f 8b       	std	Y+23, r25	; 0x17
   13aba:	8e 8b       	std	Y+22, r24	; 0x16
   13abc:	26 2f       	mov	r18, r22
   13abe:	21 70       	andi	r18, 0x01	; 1
   13ac0:	60 ff       	sbrs	r22, 0
   13ac2:	8e c0       	rjmp	.+284    	; 0x13be0 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x138>
   13ac4:	88 89       	ldd	r24, Y+16	; 0x10
   13ac6:	99 89       	ldd	r25, Y+17	; 0x11
   13ac8:	9b 8b       	std	Y+19, r25	; 0x13
   13aca:	8a 8b       	std	Y+18, r24	; 0x12
   13acc:	22 23       	and	r18, r18
   13ace:	09 f4       	brne	.+2      	; 0x13ad2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a>
   13ad0:	8a c0       	rjmp	.+276    	; 0x13be6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x13e>
   13ad2:	8e 85       	ldd	r24, Y+14	; 0x0e
   13ad4:	9f 85       	ldd	r25, Y+15	; 0x0f
   13ad6:	9d 8b       	std	Y+21, r25	; 0x15
   13ad8:	8c 8b       	std	Y+20, r24	; 0x14
   13ada:	ae a5       	ldd	r26, Y+46	; 0x2e
   13adc:	bf a5       	ldd	r27, Y+47	; 0x2f
   13ade:	8c 91       	ld	r24, X
   13ae0:	9a ad       	ldd	r25, Y+58	; 0x3a
   13ae2:	89 23       	and	r24, r25
   13ae4:	8c 93       	st	X, r24
   13ae6:	48 8d       	ldd	r20, Y+24	; 0x18
   13ae8:	59 8d       	ldd	r21, Y+25	; 0x19
   13aea:	8e 89       	ldd	r24, Y+22	; 0x16
   13aec:	9f 89       	ldd	r25, Y+23	; 0x17
   13aee:	a8 a9       	ldd	r26, Y+48	; 0x30
   13af0:	b9 a9       	ldd	r27, Y+49	; 0x31
   13af2:	2b ad       	ldd	r18, Y+59	; 0x3b
   13af4:	41 15       	cp	r20, r1
   13af6:	51 05       	cpc	r21, r1
   13af8:	09 f0       	breq	.+2      	; 0x13afc <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x54>
   13afa:	7a c0       	rjmp	.+244    	; 0x13bf0 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x148>
   13afc:	01 97       	sbiw	r24, 0x01	; 1
   13afe:	83 30       	cpi	r24, 0x03	; 3
   13b00:	91 05       	cpc	r25, r1
   13b02:	08 f0       	brcs	.+2      	; 0x13b06 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x5e>
   13b04:	73 c0       	rjmp	.+230    	; 0x13bec <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x144>
   13b06:	88 0f       	add	r24, r24
   13b08:	99 1f       	adc	r25, r25
   13b0a:	fc 01       	movw	r30, r24
   13b0c:	eb 5d       	subi	r30, 0xDB	; 219
   13b0e:	f7 4f       	sbci	r31, 0xF7	; 247
   13b10:	90 81       	ld	r25, Z
   13b12:	38 a5       	ldd	r19, Y+40	; 0x28
   13b14:	49 a5       	ldd	r20, Y+41	; 0x29
   13b16:	8c 91       	ld	r24, X
   13b18:	28 23       	and	r18, r24
   13b1a:	2c 93       	st	X, r18
   13b1c:	42 b9       	out	0x02, r20	; 2
   13b1e:	ea a9       	ldd	r30, Y+50	; 0x32
   13b20:	fb a9       	ldd	r31, Y+51	; 0x33
   13b22:	80 81       	ld	r24, Z
   13b24:	2c ad       	ldd	r18, Y+60	; 0x3c
   13b26:	82 23       	and	r24, r18
   13b28:	80 83       	st	Z, r24
   13b2a:	ea a9       	ldd	r30, Y+50	; 0x32
   13b2c:	fb a9       	ldd	r31, Y+51	; 0x33
   13b2e:	80 81       	ld	r24, Z
   13b30:	28 ad       	ldd	r18, Y+56	; 0x38
   13b32:	82 2b       	or	r24, r18
   13b34:	80 83       	st	Z, r24
   13b36:	32 b9       	out	0x02, r19	; 2
   13b38:	ea a9       	ldd	r30, Y+50	; 0x32
   13b3a:	fb a9       	ldd	r31, Y+51	; 0x33
   13b3c:	80 81       	ld	r24, Z
   13b3e:	2c ad       	ldd	r18, Y+60	; 0x3c
   13b40:	82 23       	and	r24, r18
   13b42:	80 83       	st	Z, r24
   13b44:	ea a9       	ldd	r30, Y+50	; 0x32
   13b46:	fb a9       	ldd	r31, Y+51	; 0x33
   13b48:	80 81       	ld	r24, Z
   13b4a:	28 ad       	ldd	r18, Y+56	; 0x38
   13b4c:	82 2b       	or	r24, r18
   13b4e:	80 83       	st	Z, r24
   13b50:	e8 a9       	ldd	r30, Y+48	; 0x30
   13b52:	f9 a9       	ldd	r31, Y+49	; 0x31
   13b54:	80 81       	ld	r24, Z
   13b56:	2f a9       	ldd	r18, Y+55	; 0x37
   13b58:	82 2b       	or	r24, r18
   13b5a:	80 83       	st	Z, r24
   13b5c:	80 e1       	ldi	r24, 0x10	; 16
   13b5e:	82 b9       	out	0x02, r24	; 2
   13b60:	ea a9       	ldd	r30, Y+50	; 0x32
   13b62:	fb a9       	ldd	r31, Y+51	; 0x33
   13b64:	80 81       	ld	r24, Z
   13b66:	2c ad       	ldd	r18, Y+60	; 0x3c
   13b68:	82 23       	and	r24, r18
   13b6a:	80 83       	st	Z, r24
   13b6c:	ea a9       	ldd	r30, Y+50	; 0x32
   13b6e:	fb a9       	ldd	r31, Y+51	; 0x33
   13b70:	80 81       	ld	r24, Z
   13b72:	28 ad       	ldd	r18, Y+56	; 0x38
   13b74:	82 2b       	or	r24, r18
   13b76:	80 83       	st	Z, r24
   13b78:	92 b9       	out	0x02, r25	; 2
   13b7a:	ea a9       	ldd	r30, Y+50	; 0x32
   13b7c:	fb a9       	ldd	r31, Y+51	; 0x33
   13b7e:	80 81       	ld	r24, Z
   13b80:	9c ad       	ldd	r25, Y+60	; 0x3c
   13b82:	89 23       	and	r24, r25
   13b84:	80 83       	st	Z, r24
   13b86:	ea a9       	ldd	r30, Y+50	; 0x32
   13b88:	fb a9       	ldd	r31, Y+51	; 0x33
   13b8a:	80 81       	ld	r24, Z
   13b8c:	98 ad       	ldd	r25, Y+56	; 0x38
   13b8e:	89 2b       	or	r24, r25
   13b90:	80 83       	st	Z, r24
   13b92:	0c 89       	ldd	r16, Y+20	; 0x14
   13b94:	1d 89       	ldd	r17, Y+21	; 0x15
   13b96:	01 50       	subi	r16, 0x01	; 1
   13b98:	11 09       	sbc	r17, r1
   13b9a:	2a 89       	ldd	r18, Y+18	; 0x12
   13b9c:	3b 89       	ldd	r19, Y+19	; 0x13
   13b9e:	21 50       	subi	r18, 0x01	; 1
   13ba0:	31 09       	sbc	r19, r1
   13ba2:	e8 81       	ld	r30, Y
   13ba4:	f9 81       	ldd	r31, Y+1	; 0x01
   13ba6:	06 80       	ldd	r0, Z+6	; 0x06
   13ba8:	f7 81       	ldd	r31, Z+7	; 0x07
   13baa:	e0 2d       	mov	r30, r0
   13bac:	50 e0       	ldi	r21, 0x00	; 0
   13bae:	40 e0       	ldi	r20, 0x00	; 0
   13bb0:	70 e0       	ldi	r23, 0x00	; 0
   13bb2:	60 e0       	ldi	r22, 0x00	; 0
   13bb4:	ce 01       	movw	r24, r28
   13bb6:	19 95       	eicall
   13bb8:	48 89       	ldd	r20, Y+16	; 0x10
   13bba:	59 89       	ldd	r21, Y+17	; 0x11
   13bbc:	30 e0       	ldi	r19, 0x00	; 0
   13bbe:	20 e0       	ldi	r18, 0x00	; 0
   13bc0:	70 e0       	ldi	r23, 0x00	; 0
   13bc2:	60 e0       	ldi	r22, 0x00	; 0
   13bc4:	ce 01       	movw	r24, r28
   13bc6:	0e 94 57 9c 	call	0x138ae	; 0x138ae <LCDWIKI_KBV::Vert_Scroll(int, int, int)>
   13bca:	ee a5       	ldd	r30, Y+46	; 0x2e
   13bcc:	ff a5       	ldd	r31, Y+47	; 0x2f
   13bce:	80 81       	ld	r24, Z
   13bd0:	9e a9       	ldd	r25, Y+54	; 0x36
   13bd2:	89 2b       	or	r24, r25
   13bd4:	80 83       	st	Z, r24
   13bd6:	df 91       	pop	r29
   13bd8:	cf 91       	pop	r28
   13bda:	1f 91       	pop	r17
   13bdc:	0f 91       	pop	r16
   13bde:	08 95       	ret
   13be0:	8e 85       	ldd	r24, Y+14	; 0x0e
   13be2:	9f 85       	ldd	r25, Y+15	; 0x0f
   13be4:	71 cf       	rjmp	.-286    	; 0x13ac8 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x20>
   13be6:	88 89       	ldd	r24, Y+16	; 0x10
   13be8:	99 89       	ldd	r25, Y+17	; 0x11
   13bea:	75 cf       	rjmp	.-278    	; 0x13ad6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2e>
   13bec:	90 e3       	ldi	r25, 0x30	; 48
   13bee:	91 cf       	rjmp	.-222    	; 0x13b12 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x6a>
   13bf0:	46 30       	cpi	r20, 0x06	; 6
   13bf2:	51 05       	cpc	r21, r1
   13bf4:	51 f5       	brne	.+84     	; 0x13c4a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1a2>
   13bf6:	81 30       	cpi	r24, 0x01	; 1
   13bf8:	91 05       	cpc	r25, r1
   13bfa:	f9 f0       	breq	.+62     	; 0x13c3a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x192>
   13bfc:	20 f1       	brcs	.+72     	; 0x13c46 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x19e>
   13bfe:	82 30       	cpi	r24, 0x02	; 2
   13c00:	91 05       	cpc	r25, r1
   13c02:	e9 f0       	breq	.+58     	; 0x13c3e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x196>
   13c04:	03 97       	sbiw	r24, 0x03	; 3
   13c06:	e9 f0       	breq	.+58     	; 0x13c42 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x19a>
   13c08:	8c 91       	ld	r24, X
   13c0a:	28 23       	and	r18, r24
   13c0c:	2c 93       	st	X, r18
   13c0e:	88 a5       	ldd	r24, Y+40	; 0x28
   13c10:	82 b9       	out	0x02, r24	; 2
   13c12:	ea a9       	ldd	r30, Y+50	; 0x32
   13c14:	fb a9       	ldd	r31, Y+51	; 0x33
   13c16:	80 81       	ld	r24, Z
   13c18:	9c ad       	ldd	r25, Y+60	; 0x3c
   13c1a:	89 23       	and	r24, r25
   13c1c:	80 83       	st	Z, r24
   13c1e:	ea a9       	ldd	r30, Y+50	; 0x32
   13c20:	fb a9       	ldd	r31, Y+51	; 0x33
   13c22:	80 81       	ld	r24, Z
   13c24:	98 ad       	ldd	r25, Y+56	; 0x38
   13c26:	89 2b       	or	r24, r25
   13c28:	80 83       	st	Z, r24
   13c2a:	e8 a9       	ldd	r30, Y+48	; 0x30
   13c2c:	f9 a9       	ldd	r31, Y+49	; 0x31
   13c2e:	80 81       	ld	r24, Z
   13c30:	9f a9       	ldd	r25, Y+55	; 0x37
   13c32:	89 2b       	or	r24, r25
   13c34:	80 83       	st	Z, r24
   13c36:	12 b9       	out	0x02, r17	; 2
   13c38:	a0 cf       	rjmp	.-192    	; 0x13b7a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   13c3a:	10 ea       	ldi	r17, 0xA0	; 160
   13c3c:	e5 cf       	rjmp	.-54     	; 0x13c08 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   13c3e:	10 e0       	ldi	r17, 0x00	; 0
   13c40:	e3 cf       	rjmp	.-58     	; 0x13c08 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   13c42:	10 e6       	ldi	r17, 0x60	; 96
   13c44:	e1 cf       	rjmp	.-62     	; 0x13c08 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   13c46:	10 ed       	ldi	r17, 0xD0	; 208
   13c48:	df cf       	rjmp	.-66     	; 0x13c08 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   13c4a:	48 30       	cpi	r20, 0x08	; 8
   13c4c:	51 05       	cpc	r21, r1
   13c4e:	49 f5       	brne	.+82     	; 0x13ca2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1fa>
   13c50:	fb e2       	ldi	r31, 0x2B	; 43
   13c52:	81 30       	cpi	r24, 0x01	; 1
   13c54:	91 05       	cpc	r25, r1
   13c56:	51 f0       	breq	.+20     	; 0x13c6c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   13c58:	f9 e0       	ldi	r31, 0x09	; 9
   13c5a:	81 30       	cpi	r24, 0x01	; 1
   13c5c:	91 05       	cpc	r25, r1
   13c5e:	30 f0       	brcs	.+12     	; 0x13c6c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   13c60:	fa e0       	ldi	r31, 0x0A	; 10
   13c62:	82 30       	cpi	r24, 0x02	; 2
   13c64:	91 05       	cpc	r25, r1
   13c66:	11 f0       	breq	.+4      	; 0x13c6c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   13c68:	03 97       	sbiw	r24, 0x03	; 3
   13c6a:	c9 f0       	breq	.+50     	; 0x13c9e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1f6>
   13c6c:	8c 91       	ld	r24, X
   13c6e:	28 23       	and	r18, r24
   13c70:	2c 93       	st	X, r18
   13c72:	88 a5       	ldd	r24, Y+40	; 0x28
   13c74:	82 b9       	out	0x02, r24	; 2
   13c76:	aa a9       	ldd	r26, Y+50	; 0x32
   13c78:	bb a9       	ldd	r27, Y+51	; 0x33
   13c7a:	8c 91       	ld	r24, X
   13c7c:	9c ad       	ldd	r25, Y+60	; 0x3c
   13c7e:	89 23       	and	r24, r25
   13c80:	8c 93       	st	X, r24
   13c82:	aa a9       	ldd	r26, Y+50	; 0x32
   13c84:	bb a9       	ldd	r27, Y+51	; 0x33
   13c86:	8c 91       	ld	r24, X
   13c88:	98 ad       	ldd	r25, Y+56	; 0x38
   13c8a:	89 2b       	or	r24, r25
   13c8c:	8c 93       	st	X, r24
   13c8e:	a8 a9       	ldd	r26, Y+48	; 0x30
   13c90:	b9 a9       	ldd	r27, Y+49	; 0x31
   13c92:	8c 91       	ld	r24, X
   13c94:	9f a9       	ldd	r25, Y+55	; 0x37
   13c96:	89 2b       	or	r24, r25
   13c98:	8c 93       	st	X, r24
   13c9a:	f2 b9       	out	0x02, r31	; 2
   13c9c:	6e cf       	rjmp	.-292    	; 0x13b7a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   13c9e:	f8 e2       	ldi	r31, 0x28	; 40
   13ca0:	e5 cf       	rjmp	.-54     	; 0x13c6c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   13ca2:	45 30       	cpi	r20, 0x05	; 5
   13ca4:	51 05       	cpc	r21, r1
   13ca6:	49 f5       	brne	.+82     	; 0x13cfa <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x252>
   13ca8:	e8 e7       	ldi	r30, 0x78	; 120
   13caa:	81 30       	cpi	r24, 0x01	; 1
   13cac:	91 05       	cpc	r25, r1
   13cae:	51 f0       	breq	.+20     	; 0x13cc4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   13cb0:	e8 e0       	ldi	r30, 0x08	; 8
   13cb2:	81 30       	cpi	r24, 0x01	; 1
   13cb4:	91 05       	cpc	r25, r1
   13cb6:	30 f0       	brcs	.+12     	; 0x13cc4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   13cb8:	e8 ec       	ldi	r30, 0xC8	; 200
   13cba:	82 30       	cpi	r24, 0x02	; 2
   13cbc:	91 05       	cpc	r25, r1
   13cbe:	11 f0       	breq	.+4      	; 0x13cc4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   13cc0:	03 97       	sbiw	r24, 0x03	; 3
   13cc2:	c9 f0       	breq	.+50     	; 0x13cf6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x24e>
   13cc4:	8c 91       	ld	r24, X
   13cc6:	28 23       	and	r18, r24
   13cc8:	2c 93       	st	X, r18
   13cca:	88 a5       	ldd	r24, Y+40	; 0x28
   13ccc:	82 b9       	out	0x02, r24	; 2
   13cce:	aa a9       	ldd	r26, Y+50	; 0x32
   13cd0:	bb a9       	ldd	r27, Y+51	; 0x33
   13cd2:	8c 91       	ld	r24, X
   13cd4:	9c ad       	ldd	r25, Y+60	; 0x3c
   13cd6:	89 23       	and	r24, r25
   13cd8:	8c 93       	st	X, r24
   13cda:	aa a9       	ldd	r26, Y+50	; 0x32
   13cdc:	bb a9       	ldd	r27, Y+51	; 0x33
   13cde:	8c 91       	ld	r24, X
   13ce0:	98 ad       	ldd	r25, Y+56	; 0x38
   13ce2:	89 2b       	or	r24, r25
   13ce4:	8c 93       	st	X, r24
   13ce6:	a8 a9       	ldd	r26, Y+48	; 0x30
   13ce8:	b9 a9       	ldd	r27, Y+49	; 0x31
   13cea:	8c 91       	ld	r24, X
   13cec:	9f a9       	ldd	r25, Y+55	; 0x37
   13cee:	89 2b       	or	r24, r25
   13cf0:	8c 93       	st	X, r24
   13cf2:	e2 b9       	out	0x02, r30	; 2
   13cf4:	42 cf       	rjmp	.-380    	; 0x13b7a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   13cf6:	e8 ea       	ldi	r30, 0xA8	; 168
   13cf8:	e5 cf       	rjmp	.-54     	; 0x13cc4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   13cfa:	47 30       	cpi	r20, 0x07	; 7
   13cfc:	51 05       	cpc	r21, r1
   13cfe:	51 f5       	brne	.+84     	; 0x13d54 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2ac>
   13d00:	81 30       	cpi	r24, 0x01	; 1
   13d02:	91 05       	cpc	r25, r1
   13d04:	f9 f0       	breq	.+62     	; 0x13d44 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x29c>
   13d06:	20 f1       	brcs	.+72     	; 0x13d50 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a8>
   13d08:	82 30       	cpi	r24, 0x02	; 2
   13d0a:	91 05       	cpc	r25, r1
   13d0c:	e9 f0       	breq	.+58     	; 0x13d48 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a0>
   13d0e:	03 97       	sbiw	r24, 0x03	; 3
   13d10:	e9 f0       	breq	.+58     	; 0x13d4c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a4>
   13d12:	8c 91       	ld	r24, X
   13d14:	28 23       	and	r18, r24
   13d16:	2c 93       	st	X, r18
   13d18:	88 a5       	ldd	r24, Y+40	; 0x28
   13d1a:	82 b9       	out	0x02, r24	; 2
   13d1c:	ea a9       	ldd	r30, Y+50	; 0x32
   13d1e:	fb a9       	ldd	r31, Y+51	; 0x33
   13d20:	80 81       	ld	r24, Z
   13d22:	9c ad       	ldd	r25, Y+60	; 0x3c
   13d24:	89 23       	and	r24, r25
   13d26:	80 83       	st	Z, r24
   13d28:	ea a9       	ldd	r30, Y+50	; 0x32
   13d2a:	fb a9       	ldd	r31, Y+51	; 0x33
   13d2c:	80 81       	ld	r24, Z
   13d2e:	98 ad       	ldd	r25, Y+56	; 0x38
   13d30:	89 2b       	or	r24, r25
   13d32:	80 83       	st	Z, r24
   13d34:	e8 a9       	ldd	r30, Y+48	; 0x30
   13d36:	f9 a9       	ldd	r31, Y+49	; 0x31
   13d38:	80 81       	ld	r24, Z
   13d3a:	9f a9       	ldd	r25, Y+55	; 0x37
   13d3c:	89 2b       	or	r24, r25
   13d3e:	80 83       	st	Z, r24
   13d40:	72 b9       	out	0x02, r23	; 2
   13d42:	1b cf       	rjmp	.-458    	; 0x13b7a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   13d44:	78 ea       	ldi	r23, 0xA8	; 168
   13d46:	e5 cf       	rjmp	.-54     	; 0x13d12 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   13d48:	78 e1       	ldi	r23, 0x18	; 24
   13d4a:	e3 cf       	rjmp	.-58     	; 0x13d12 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   13d4c:	78 e7       	ldi	r23, 0x78	; 120
   13d4e:	e1 cf       	rjmp	.-62     	; 0x13d12 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   13d50:	78 ec       	ldi	r23, 0xC8	; 200
   13d52:	df cf       	rjmp	.-66     	; 0x13d12 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   13d54:	81 30       	cpi	r24, 0x01	; 1
   13d56:	91 05       	cpc	r25, r1
   13d58:	f9 f0       	breq	.+62     	; 0x13d98 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f0>
   13d5a:	20 f1       	brcs	.+72     	; 0x13da4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2fc>
   13d5c:	82 30       	cpi	r24, 0x02	; 2
   13d5e:	91 05       	cpc	r25, r1
   13d60:	e9 f0       	breq	.+58     	; 0x13d9c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f4>
   13d62:	03 97       	sbiw	r24, 0x03	; 3
   13d64:	e9 f0       	breq	.+58     	; 0x13da0 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f8>
   13d66:	8c 91       	ld	r24, X
   13d68:	28 23       	and	r18, r24
   13d6a:	2c 93       	st	X, r18
   13d6c:	88 a5       	ldd	r24, Y+40	; 0x28
   13d6e:	82 b9       	out	0x02, r24	; 2
   13d70:	ea a9       	ldd	r30, Y+50	; 0x32
   13d72:	fb a9       	ldd	r31, Y+51	; 0x33
   13d74:	80 81       	ld	r24, Z
   13d76:	9c ad       	ldd	r25, Y+60	; 0x3c
   13d78:	89 23       	and	r24, r25
   13d7a:	80 83       	st	Z, r24
   13d7c:	ea a9       	ldd	r30, Y+50	; 0x32
   13d7e:	fb a9       	ldd	r31, Y+51	; 0x33
   13d80:	80 81       	ld	r24, Z
   13d82:	98 ad       	ldd	r25, Y+56	; 0x38
   13d84:	89 2b       	or	r24, r25
   13d86:	80 83       	st	Z, r24
   13d88:	e8 a9       	ldd	r30, Y+48	; 0x30
   13d8a:	f9 a9       	ldd	r31, Y+49	; 0x31
   13d8c:	80 81       	ld	r24, Z
   13d8e:	9f a9       	ldd	r25, Y+55	; 0x37
   13d90:	89 2b       	or	r24, r25
   13d92:	80 83       	st	Z, r24
   13d94:	32 b9       	out	0x02, r19	; 2
   13d96:	f1 ce       	rjmp	.-542    	; 0x13b7a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   13d98:	38 e2       	ldi	r19, 0x28	; 40
   13d9a:	e5 cf       	rjmp	.-54     	; 0x13d66 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   13d9c:	38 e9       	ldi	r19, 0x98	; 152
   13d9e:	e3 cf       	rjmp	.-58     	; 0x13d66 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   13da0:	38 ef       	ldi	r19, 0xF8	; 248
   13da2:	e1 cf       	rjmp	.-62     	; 0x13d66 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   13da4:	38 e4       	ldi	r19, 0x48	; 72
   13da6:	df cf       	rjmp	.-66     	; 0x13d66 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>

00013da8 <LCDWIKI_KBV::Get_Rotation() const>:
_ZNK11LCDWIKI_KBV12Get_RotationEv():
   13da8:	fc 01       	movw	r30, r24
   13daa:	86 89       	ldd	r24, Z+22	; 0x16
   13dac:	08 95       	ret

00013dae <LCDWIKI_KBV::Invert_Display(bool)>:
_ZN11LCDWIKI_KBV14Invert_DisplayEb():
   13dae:	fc 01       	movw	r30, r24
   13db0:	a6 a5       	ldd	r26, Z+46	; 0x2e
   13db2:	b7 a5       	ldd	r27, Z+47	; 0x2f
   13db4:	8c 91       	ld	r24, X
   13db6:	92 ad       	ldd	r25, Z+58	; 0x3a
   13db8:	89 23       	and	r24, r25
   13dba:	8c 93       	st	X, r24
   13dbc:	82 a5       	ldd	r24, Z+42	; 0x2a
   13dbe:	40 8d       	ldd	r20, Z+24	; 0x18
   13dc0:	51 8d       	ldd	r21, Z+25	; 0x19
   13dc2:	a0 a9       	ldd	r26, Z+48	; 0x30
   13dc4:	b1 a9       	ldd	r27, Z+49	; 0x31
   13dc6:	23 ad       	ldd	r18, Z+59	; 0x3b
   13dc8:	9c 91       	ld	r25, X
   13dca:	92 23       	and	r25, r18
   13dcc:	9c 93       	st	X, r25
   13dce:	41 15       	cp	r20, r1
   13dd0:	51 05       	cpc	r21, r1
   13dd2:	49 f5       	brne	.+82     	; 0x13e26 <LCDWIKI_KBV::Invert_Display(bool)+0x78>
   13dd4:	91 e6       	ldi	r25, 0x61	; 97
   13dd6:	92 b9       	out	0x02, r25	; 2
   13dd8:	a2 a9       	ldd	r26, Z+50	; 0x32
   13dda:	b3 a9       	ldd	r27, Z+51	; 0x33
   13ddc:	9c 91       	ld	r25, X
   13dde:	24 ad       	ldd	r18, Z+60	; 0x3c
   13de0:	92 23       	and	r25, r18
   13de2:	9c 93       	st	X, r25
   13de4:	a2 a9       	ldd	r26, Z+50	; 0x32
   13de6:	b3 a9       	ldd	r27, Z+51	; 0x33
   13de8:	9c 91       	ld	r25, X
   13dea:	20 ad       	ldd	r18, Z+56	; 0x38
   13dec:	92 2b       	or	r25, r18
   13dee:	9c 93       	st	X, r25
   13df0:	a0 a9       	ldd	r26, Z+48	; 0x30
   13df2:	b1 a9       	ldd	r27, Z+49	; 0x31
   13df4:	9c 91       	ld	r25, X
   13df6:	27 a9       	ldd	r18, Z+55	; 0x37
   13df8:	92 2b       	or	r25, r18
   13dfa:	9c 93       	st	X, r25
   13dfc:	68 27       	eor	r22, r24
   13dfe:	62 b9       	out	0x02, r22	; 2
   13e00:	a2 a9       	ldd	r26, Z+50	; 0x32
   13e02:	b3 a9       	ldd	r27, Z+51	; 0x33
   13e04:	8c 91       	ld	r24, X
   13e06:	94 ad       	ldd	r25, Z+60	; 0x3c
   13e08:	89 23       	and	r24, r25
   13e0a:	8c 93       	st	X, r24
   13e0c:	a2 a9       	ldd	r26, Z+50	; 0x32
   13e0e:	b3 a9       	ldd	r27, Z+51	; 0x33
   13e10:	8c 91       	ld	r24, X
   13e12:	90 ad       	ldd	r25, Z+56	; 0x38
   13e14:	89 2b       	or	r24, r25
   13e16:	8c 93       	st	X, r24
   13e18:	a6 a5       	ldd	r26, Z+46	; 0x2e
   13e1a:	b7 a5       	ldd	r27, Z+47	; 0x2f
   13e1c:	8c 91       	ld	r24, X
   13e1e:	96 a9       	ldd	r25, Z+54	; 0x36
   13e20:	89 2b       	or	r24, r25
   13e22:	8c 93       	st	X, r24
   13e24:	08 95       	ret
   13e26:	41 30       	cpi	r20, 0x01	; 1
   13e28:	51 05       	cpc	r21, r1
   13e2a:	d9 f4       	brne	.+54     	; 0x13e62 <LCDWIKI_KBV::Invert_Display(bool)+0xb4>
   13e2c:	91 e0       	ldi	r25, 0x01	; 1
   13e2e:	92 b9       	out	0x02, r25	; 2
   13e30:	a2 a9       	ldd	r26, Z+50	; 0x32
   13e32:	b3 a9       	ldd	r27, Z+51	; 0x33
   13e34:	9c 91       	ld	r25, X
   13e36:	24 ad       	ldd	r18, Z+60	; 0x3c
   13e38:	92 23       	and	r25, r18
   13e3a:	9c 93       	st	X, r25
   13e3c:	a2 a9       	ldd	r26, Z+50	; 0x32
   13e3e:	b3 a9       	ldd	r27, Z+51	; 0x33
   13e40:	9c 91       	ld	r25, X
   13e42:	20 ad       	ldd	r18, Z+56	; 0x38
   13e44:	92 2b       	or	r25, r18
   13e46:	9c 93       	st	X, r25
   13e48:	a0 a9       	ldd	r26, Z+48	; 0x30
   13e4a:	b1 a9       	ldd	r27, Z+49	; 0x31
   13e4c:	9c 91       	ld	r25, X
   13e4e:	27 a9       	ldd	r18, Z+55	; 0x37
   13e50:	92 2b       	or	r25, r18
   13e52:	9c 93       	st	X, r25
   13e54:	86 17       	cp	r24, r22
   13e56:	19 f0       	breq	.+6      	; 0x13e5e <LCDWIKI_KBV::Invert_Display(bool)+0xb0>
   13e58:	88 e0       	ldi	r24, 0x08	; 8
   13e5a:	82 b9       	out	0x02, r24	; 2
   13e5c:	d1 cf       	rjmp	.-94     	; 0x13e00 <LCDWIKI_KBV::Invert_Display(bool)+0x52>
   13e5e:	8a e0       	ldi	r24, 0x0A	; 10
   13e60:	fc cf       	rjmp	.-8      	; 0x13e5a <LCDWIKI_KBV::Invert_Display(bool)+0xac>
   13e62:	86 17       	cp	r24, r22
   13e64:	99 f0       	breq	.+38     	; 0x13e8c <LCDWIKI_KBV::Invert_Display(bool)+0xde>
   13e66:	81 e2       	ldi	r24, 0x21	; 33
   13e68:	82 b9       	out	0x02, r24	; 2
   13e6a:	a2 a9       	ldd	r26, Z+50	; 0x32
   13e6c:	b3 a9       	ldd	r27, Z+51	; 0x33
   13e6e:	8c 91       	ld	r24, X
   13e70:	94 ad       	ldd	r25, Z+60	; 0x3c
   13e72:	89 23       	and	r24, r25
   13e74:	8c 93       	st	X, r24
   13e76:	a2 a9       	ldd	r26, Z+50	; 0x32
   13e78:	b3 a9       	ldd	r27, Z+51	; 0x33
   13e7a:	8c 91       	ld	r24, X
   13e7c:	90 ad       	ldd	r25, Z+56	; 0x38
   13e7e:	89 2b       	or	r24, r25
   13e80:	8c 93       	st	X, r24
   13e82:	a0 a9       	ldd	r26, Z+48	; 0x30
   13e84:	b1 a9       	ldd	r27, Z+49	; 0x31
   13e86:	8c 91       	ld	r24, X
   13e88:	97 a9       	ldd	r25, Z+55	; 0x37
   13e8a:	c4 cf       	rjmp	.-120    	; 0x13e14 <LCDWIKI_KBV::Invert_Display(bool)+0x66>
   13e8c:	80 e2       	ldi	r24, 0x20	; 32
   13e8e:	ec cf       	rjmp	.-40     	; 0x13e68 <LCDWIKI_KBV::Invert_Display(bool)+0xba>

00013e90 <LCDWIKI_KBV::init_table8(void const*, int)>:
_ZN11LCDWIKI_KBV11init_table8EPKvi():
   13e90:	af 92       	push	r10
   13e92:	bf 92       	push	r11
   13e94:	cf 92       	push	r12
   13e96:	df 92       	push	r13
   13e98:	ef 92       	push	r14
   13e9a:	ff 92       	push	r15
   13e9c:	1f 93       	push	r17
   13e9e:	cf 93       	push	r28
   13ea0:	df 93       	push	r29
   13ea2:	cd b7       	in	r28, 0x3d	; 61
   13ea4:	de b7       	in	r29, 0x3e	; 62
   13ea6:	68 97       	sbiw	r28, 0x18	; 24
   13ea8:	0f b6       	in	r0, 0x3f	; 63
   13eaa:	f8 94       	cli
   13eac:	de bf       	out	0x3e, r29	; 62
   13eae:	0f be       	out	0x3f, r0	; 63
   13eb0:	cd bf       	out	0x3d, r28	; 61
   13eb2:	5c 01       	movw	r10, r24
   13eb4:	7b 01       	movw	r14, r22
   13eb6:	6a 01       	movw	r12, r20
   13eb8:	1c 14       	cp	r1, r12
   13eba:	1d 04       	cpc	r1, r13
   13ebc:	74 f5       	brge	.+92     	; 0x13f1a <LCDWIKI_KBV::init_table8(void const*, int)+0x8a>
   13ebe:	f7 01       	movw	r30, r14
   13ec0:	64 91       	lpm	r22, Z
   13ec2:	31 96       	adiw	r30, 0x01	; 1
   13ec4:	14 91       	lpm	r17, Z
   13ec6:	f2 e0       	ldi	r31, 0x02	; 2
   13ec8:	ef 0e       	add	r14, r31
   13eca:	f1 1c       	adc	r15, r1
   13ecc:	6f 37       	cpi	r22, 0x7F	; 127
   13ece:	79 f0       	breq	.+30     	; 0x13eee <LCDWIKI_KBV::init_table8(void const*, int)+0x5e>
   13ed0:	de 01       	movw	r26, r28
   13ed2:	11 96       	adiw	r26, 0x01	; 1
   13ed4:	30 e0       	ldi	r19, 0x00	; 0
   13ed6:	20 e0       	ldi	r18, 0x00	; 0
   13ed8:	ad 01       	movw	r20, r26
   13eda:	21 17       	cp	r18, r17
   13edc:	b0 f4       	brcc	.+44     	; 0x13f0a <LCDWIKI_KBV::init_table8(void const*, int)+0x7a>
   13ede:	f7 01       	movw	r30, r14
   13ee0:	e2 0f       	add	r30, r18
   13ee2:	f3 1f       	adc	r31, r19
   13ee4:	e4 91       	lpm	r30, Z
   13ee6:	ed 93       	st	X+, r30
   13ee8:	2f 5f       	subi	r18, 0xFF	; 255
   13eea:	3f 4f       	sbci	r19, 0xFF	; 255
   13eec:	f6 cf       	rjmp	.-20     	; 0x13eda <LCDWIKI_KBV::init_table8(void const*, int)+0x4a>
   13eee:	61 2f       	mov	r22, r17
   13ef0:	70 e0       	ldi	r23, 0x00	; 0
   13ef2:	90 e0       	ldi	r25, 0x00	; 0
   13ef4:	80 e0       	ldi	r24, 0x00	; 0
   13ef6:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
   13efa:	10 e0       	ldi	r17, 0x00	; 0
   13efc:	61 2f       	mov	r22, r17
   13efe:	70 e0       	ldi	r23, 0x00	; 0
   13f00:	6e 5f       	subi	r22, 0xFE	; 254
   13f02:	7f 4f       	sbci	r23, 0xFF	; 255
   13f04:	c6 1a       	sub	r12, r22
   13f06:	d7 0a       	sbc	r13, r23
   13f08:	d7 cf       	rjmp	.-82     	; 0x13eb8 <LCDWIKI_KBV::init_table8(void const*, int)+0x28>
   13f0a:	e1 0e       	add	r14, r17
   13f0c:	f1 1c       	adc	r15, r1
   13f0e:	70 e0       	ldi	r23, 0x00	; 0
   13f10:	21 2f       	mov	r18, r17
   13f12:	c5 01       	movw	r24, r10
   13f14:	0e 94 f7 93 	call	0x127ee	; 0x127ee <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   13f18:	f1 cf       	rjmp	.-30     	; 0x13efc <LCDWIKI_KBV::init_table8(void const*, int)+0x6c>
   13f1a:	68 96       	adiw	r28, 0x18	; 24
   13f1c:	0f b6       	in	r0, 0x3f	; 63
   13f1e:	f8 94       	cli
   13f20:	de bf       	out	0x3e, r29	; 62
   13f22:	0f be       	out	0x3f, r0	; 63
   13f24:	cd bf       	out	0x3d, r28	; 61
   13f26:	df 91       	pop	r29
   13f28:	cf 91       	pop	r28
   13f2a:	1f 91       	pop	r17
   13f2c:	ff 90       	pop	r15
   13f2e:	ef 90       	pop	r14
   13f30:	df 90       	pop	r13
   13f32:	cf 90       	pop	r12
   13f34:	bf 90       	pop	r11
   13f36:	af 90       	pop	r10
   13f38:	08 95       	ret

00013f3a <LCDWIKI_KBV::start(unsigned int)>:
_ZN11LCDWIKI_KBV5startEj():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:954

void LCDWIKI_KBV::start(uint16_t ID)
{
   13f3a:	0f 93       	push	r16
   13f3c:	1f 93       	push	r17
   13f3e:	cf 93       	push	r28
   13f40:	df 93       	push	r29
   13f42:	ec 01       	movw	r28, r24
   13f44:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
	reset();
   13f46:	0e 94 a1 93 	call	0x12742	; 0x12742 <LCDWIKI_KBV::reset()>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
   13f4a:	68 ec       	ldi	r22, 0xC8	; 200
   13f4c:	70 e0       	ldi	r23, 0x00	; 0
   13f4e:	80 e0       	ldi	r24, 0x00	; 0
   13f50:	90 e0       	ldi	r25, 0x00	; 0
   13f52:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
   13f56:	06 39       	cpi	r16, 0x96	; 150
   13f58:	17 47       	sbci	r17, 0x77	; 119
   13f5a:	b9 f5       	brne	.+110    	; 0x13fca <LCDWIKI_KBV::start(unsigned int)+0x90>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
   13f5c:	89 e0       	ldi	r24, 0x09	; 9
   13f5e:	90 e0       	ldi	r25, 0x00	; 0
   13f60:	99 8f       	std	Y+25, r25	; 0x19
   13f62:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   13f64:	8a e2       	ldi	r24, 0x2A	; 42
   13f66:	90 e0       	ldi	r25, 0x00	; 0
   13f68:	9d 8f       	std	Y+29, r25	; 0x1d
   13f6a:	8c 8f       	std	Y+28, r24	; 0x1c
   13f6c:	8b e2       	ldi	r24, 0x2B	; 43
   13f6e:	90 e0       	ldi	r25, 0x00	; 0
   13f70:	9f 8f       	std	Y+31, r25	; 0x1f
   13f72:	8e 8f       	std	Y+30, r24	; 0x1e
   13f74:	8c e2       	ldi	r24, 0x2C	; 44
   13f76:	90 e0       	ldi	r25, 0x00	; 0
   13f78:	99 a3       	std	Y+33, r25	; 0x21
   13f7a:	88 a3       	std	Y+32, r24	; 0x20
   13f7c:	8e e2       	ldi	r24, 0x2E	; 46
   13f7e:	90 e0       	ldi	r25, 0x00	; 0
   13f80:	9b a3       	std	Y+35, r25	; 0x23
   13f82:	8a a3       	std	Y+34, r24	; 0x22
   13f84:	83 e3       	ldi	r24, 0x33	; 51
   13f86:	90 e0       	ldi	r25, 0x00	; 0
   13f88:	9d a3       	std	Y+37, r25	; 0x25
   13f8a:	8c a3       	std	Y+36, r24	; 0x24
   13f8c:	87 e3       	ldi	r24, 0x37	; 55
   13f8e:	90 e0       	ldi	r25, 0x00	; 0
   13f90:	9f a3       	std	Y+39, r25	; 0x27
   13f92:	8e a3       	std	Y+38, r24	; 0x26
   13f94:	86 e3       	ldi	r24, 0x36	; 54
   13f96:	90 e0       	ldi	r25, 0x00	; 0
   13f98:	99 a7       	std	Y+41, r25	; 0x29
   13f9a:	88 a7       	std	Y+40, r24	; 0x28
   13f9c:	1b a6       	std	Y+43, r1	; 0x2b
   13f9e:	1a a6       	std	Y+42, r1	; 0x2a
   13fa0:	1d a6       	std	Y+45, r1	; 0x2d
   13fa2:	1c a6       	std	Y+44, r1	; 0x2c
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:996
            	0xF0, 1, 0x69,
            	0x13, 0,
            	0x11, 0,
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
   13fa4:	4c e6       	ldi	r20, 0x6C	; 108
   13fa6:	50 e0       	ldi	r21, 0x00	; 0
   13fa8:	69 e5       	ldi	r22, 0x59	; 89
   13faa:	7f e5       	ldi	r23, 0x5F	; 95
   13fac:	ce 01       	movw	r24, r28
   13fae:	0e 94 48 9f 	call	0x13e90	; 0x13e90 <LCDWIKI_KBV::init_table8(void const*, int)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
   13fb2:	6e 89       	ldd	r22, Y+22	; 0x16
   13fb4:	ce 01       	movw	r24, r28
   13fb6:	0e 94 54 9d 	call	0x13aa8	; 0x13aa8 <LCDWIKI_KBV::Set_Rotation(unsigned char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1003
	Invert_Display(false);
   13fba:	60 e0       	ldi	r22, 0x00	; 0
   13fbc:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1004
}
   13fbe:	df 91       	pop	r29
   13fc0:	cf 91       	pop	r28
   13fc2:	1f 91       	pop	r17
   13fc4:	0f 91       	pop	r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1003
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
	Invert_Display(false);
   13fc6:	0c 94 d7 9e 	jmp	0x13dae	; 0x13dae <LCDWIKI_KBV::Invert_Display(bool)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
   13fca:	8f ef       	ldi	r24, 0xFF	; 255
   13fcc:	90 e0       	ldi	r25, 0x00	; 0
   13fce:	99 8f       	std	Y+25, r25	; 0x19
   13fd0:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1000
			break;		
   13fd2:	ef cf       	rjmp	.-34     	; 0x13fb2 <LCDWIKI_KBV::start(unsigned int)+0x78>

00013fd4 <LCDWIKI_KBV::Init_LCD()>:
_ZN11LCDWIKI_KBV8Init_LCDEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:233
}
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
   13fd4:	cf 93       	push	r28
   13fd6:	df 93       	push	r29
   13fd8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
	reset();
   13fda:	0e 94 a1 93 	call	0x12742	; 0x12742 <LCDWIKI_KBV::reset()>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
   13fde:	8a 8d       	ldd	r24, Y+26	; 0x1a
   13fe0:	9b 8d       	ldd	r25, Y+27	; 0x1b
   13fe2:	01 96       	adiw	r24, 0x01	; 1
   13fe4:	29 f4       	brne	.+10     	; 0x13ff0 <LCDWIKI_KBV::Init_LCD()+0x1c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
	{
		lcd_model = Read_ID(); 
   13fe6:	ce 01       	movw	r24, r28
   13fe8:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <LCDWIKI_KBV::Read_ID()>
   13fec:	9b 8f       	std	Y+27, r25	; 0x1b
   13fee:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   13ff0:	6a 8d       	ldd	r22, Y+26	; 0x1a
   13ff2:	7b 8d       	ldd	r23, Y+27	; 0x1b
   13ff4:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:242
//	Set_Rotation(0);
}
   13ff6:	df 91       	pop	r29
   13ff8:	cf 91       	pop	r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   13ffa:	0c 94 9d 9f 	jmp	0x13f3a	; 0x13f3a <LCDWIKI_KBV::start(unsigned int)>

00013ffe <delay_hus(unsigned long)>:
_Z9delay_husm():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:412
}

void LCDWIKI_TOUCH::TP_Set_State(uint8_t val)
{
	touch_statue = val;
}
   13ffe:	0f 93       	push	r16
   14000:	1f 93       	push	r17
   14002:	40 e0       	ldi	r20, 0x00	; 0
   14004:	04 2f       	mov	r16, r20
   14006:	10 e0       	ldi	r17, 0x00	; 0
   14008:	30 e0       	ldi	r19, 0x00	; 0
   1400a:	20 e0       	ldi	r18, 0x00	; 0
   1400c:	06 17       	cp	r16, r22
   1400e:	17 07       	cpc	r17, r23
   14010:	28 07       	cpc	r18, r24
   14012:	39 07       	cpc	r19, r25
   14014:	18 f4       	brcc	.+6      	; 0x1401c <delay_hus(unsigned long)+0x1e>
   14016:	00 00       	nop
   14018:	4f 5f       	subi	r20, 0xFF	; 255
   1401a:	f4 cf       	rjmp	.-24     	; 0x14004 <delay_hus(unsigned long)+0x6>
   1401c:	1f 91       	pop	r17
   1401e:	0f 91       	pop	r16
   14020:	08 95       	ret

00014022 <LCDWIKI_TOUCH::LCDWIKI_TOUCH(signed char, signed char, signed char, signed char, signed char, signed char)>:
_ZN13LCDWIKI_TOUCHC2Eaaaaaa():
   14022:	8f 92       	push	r8
   14024:	9f 92       	push	r9
   14026:	af 92       	push	r10
   14028:	bf 92       	push	r11
   1402a:	cf 92       	push	r12
   1402c:	df 92       	push	r13
   1402e:	ef 92       	push	r14
   14030:	ff 92       	push	r15
   14032:	0f 93       	push	r16
   14034:	1f 93       	push	r17
   14036:	cf 93       	push	r28
   14038:	df 93       	push	r29
   1403a:	ec 01       	movw	r28, r24
   1403c:	86 2e       	mov	r8, r22
   1403e:	d4 2e       	mov	r13, r20
   14040:	f2 2e       	mov	r15, r18
   14042:	90 2e       	mov	r9, r16
   14044:	86 2f       	mov	r24, r22
   14046:	66 0f       	add	r22, r22
   14048:	99 0b       	sbc	r25, r25
   1404a:	fc 01       	movw	r30, r24
   1404c:	ec 53       	subi	r30, 0x3C	; 60
   1404e:	fe 49       	sbci	r31, 0x9E	; 158
   14050:	e4 91       	lpm	r30, Z
   14052:	f0 e0       	ldi	r31, 0x00	; 0
   14054:	ee 0f       	add	r30, r30
   14056:	ff 1f       	adc	r31, r31
   14058:	e6 5f       	subi	r30, 0xF6	; 246
   1405a:	fd 49       	sbci	r31, 0x9D	; 157
   1405c:	25 91       	lpm	r18, Z+
   1405e:	34 91       	lpm	r19, Z
   14060:	39 8b       	std	Y+17, r19	; 0x11
   14062:	28 8b       	std	Y+16, r18	; 0x10
   14064:	04 2f       	mov	r16, r20
   14066:	44 0f       	add	r20, r20
   14068:	11 0b       	sbc	r17, r17
   1406a:	f8 01       	movw	r30, r16
   1406c:	ec 53       	subi	r30, 0x3C	; 60
   1406e:	fe 49       	sbci	r31, 0x9E	; 158
   14070:	e4 91       	lpm	r30, Z
   14072:	f0 e0       	ldi	r31, 0x00	; 0
   14074:	ee 0f       	add	r30, r30
   14076:	ff 1f       	adc	r31, r31
   14078:	e6 5f       	subi	r30, 0xF6	; 246
   1407a:	fd 49       	sbci	r31, 0x9D	; 157
   1407c:	25 91       	lpm	r18, Z+
   1407e:	34 91       	lpm	r19, Z
   14080:	3b 8b       	std	Y+19, r19	; 0x13
   14082:	2a 8b       	std	Y+18, r18	; 0x12
   14084:	af 2d       	mov	r26, r15
   14086:	0f 2c       	mov	r0, r15
   14088:	00 0c       	add	r0, r0
   1408a:	bb 0b       	sbc	r27, r27
   1408c:	fd 01       	movw	r30, r26
   1408e:	ec 53       	subi	r30, 0x3C	; 60
   14090:	fe 49       	sbci	r31, 0x9E	; 158
   14092:	e4 91       	lpm	r30, Z
   14094:	f0 e0       	ldi	r31, 0x00	; 0
   14096:	ee 0f       	add	r30, r30
   14098:	ff 1f       	adc	r31, r31
   1409a:	e6 50       	subi	r30, 0x06	; 6
   1409c:	fe 49       	sbci	r31, 0x9E	; 158
   1409e:	25 91       	lpm	r18, Z+
   140a0:	34 91       	lpm	r19, Z
   140a2:	3d 8b       	std	Y+21, r19	; 0x15
   140a4:	2c 8b       	std	Y+20, r18	; 0x14
   140a6:	69 2d       	mov	r22, r9
   140a8:	09 2c       	mov	r0, r9
   140aa:	00 0c       	add	r0, r0
   140ac:	77 0b       	sbc	r23, r23
   140ae:	fb 01       	movw	r30, r22
   140b0:	ec 53       	subi	r30, 0x3C	; 60
   140b2:	fe 49       	sbci	r31, 0x9E	; 158
   140b4:	e4 91       	lpm	r30, Z
   140b6:	f0 e0       	ldi	r31, 0x00	; 0
   140b8:	ee 0f       	add	r30, r30
   140ba:	ff 1f       	adc	r31, r31
   140bc:	e6 5f       	subi	r30, 0xF6	; 246
   140be:	fd 49       	sbci	r31, 0x9D	; 157
   140c0:	25 91       	lpm	r18, Z+
   140c2:	34 91       	lpm	r19, Z
   140c4:	3f 8b       	std	Y+23, r19	; 0x17
   140c6:	2e 8b       	std	Y+22, r18	; 0x16
   140c8:	4e 2d       	mov	r20, r14
   140ca:	0e 2c       	mov	r0, r14
   140cc:	00 0c       	add	r0, r0
   140ce:	55 0b       	sbc	r21, r21
   140d0:	fa 01       	movw	r30, r20
   140d2:	ec 53       	subi	r30, 0x3C	; 60
   140d4:	fe 49       	sbci	r31, 0x9E	; 158
   140d6:	e4 91       	lpm	r30, Z
   140d8:	f0 e0       	ldi	r31, 0x00	; 0
   140da:	ee 0f       	add	r30, r30
   140dc:	ff 1f       	adc	r31, r31
   140de:	e6 50       	subi	r30, 0x06	; 6
   140e0:	fe 49       	sbci	r31, 0x9E	; 158
   140e2:	25 91       	lpm	r18, Z+
   140e4:	34 91       	lpm	r19, Z
   140e6:	39 8f       	std	Y+25, r19	; 0x19
   140e8:	28 8f       	std	Y+24, r18	; 0x18
   140ea:	2c 2d       	mov	r18, r12
   140ec:	0c 2c       	mov	r0, r12
   140ee:	00 0c       	add	r0, r0
   140f0:	33 0b       	sbc	r19, r19
   140f2:	f9 01       	movw	r30, r18
   140f4:	ec 53       	subi	r30, 0x3C	; 60
   140f6:	fe 49       	sbci	r31, 0x9E	; 158
   140f8:	e4 91       	lpm	r30, Z
   140fa:	f0 e0       	ldi	r31, 0x00	; 0
   140fc:	ee 0f       	add	r30, r30
   140fe:	ff 1f       	adc	r31, r31
   14100:	e6 5f       	subi	r30, 0xF6	; 246
   14102:	fd 49       	sbci	r31, 0x9D	; 157
   14104:	a5 90       	lpm	r10, Z+
   14106:	b4 90       	lpm	r11, Z
   14108:	bb 8e       	std	Y+27, r11	; 0x1b
   1410a:	aa 8e       	std	Y+26, r10	; 0x1a
   1410c:	fc 01       	movw	r30, r24
   1410e:	e2 57       	subi	r30, 0x72	; 114
   14110:	fe 49       	sbci	r31, 0x9E	; 158
   14112:	e4 91       	lpm	r30, Z
   14114:	ec 8f       	std	Y+28, r30	; 0x1c
   14116:	f8 01       	movw	r30, r16
   14118:	e2 57       	subi	r30, 0x72	; 114
   1411a:	fe 49       	sbci	r31, 0x9E	; 158
   1411c:	e4 91       	lpm	r30, Z
   1411e:	ed 8f       	std	Y+29, r30	; 0x1d
   14120:	fd 01       	movw	r30, r26
   14122:	e2 57       	subi	r30, 0x72	; 114
   14124:	fe 49       	sbci	r31, 0x9E	; 158
   14126:	e4 91       	lpm	r30, Z
   14128:	ee 8f       	std	Y+30, r30	; 0x1e
   1412a:	fb 01       	movw	r30, r22
   1412c:	e2 57       	subi	r30, 0x72	; 114
   1412e:	fe 49       	sbci	r31, 0x9E	; 158
   14130:	e4 91       	lpm	r30, Z
   14132:	ef 8f       	std	Y+31, r30	; 0x1f
   14134:	fa 01       	movw	r30, r20
   14136:	e2 57       	subi	r30, 0x72	; 114
   14138:	fe 49       	sbci	r31, 0x9E	; 158
   1413a:	e4 91       	lpm	r30, Z
   1413c:	e8 a3       	std	Y+32, r30	; 0x20
   1413e:	f9 01       	movw	r30, r18
   14140:	e2 57       	subi	r30, 0x72	; 114
   14142:	fe 49       	sbci	r31, 0x9E	; 158
   14144:	e4 91       	lpm	r30, Z
   14146:	e9 a3       	std	Y+33, r30	; 0x21
   14148:	61 e0       	ldi	r22, 0x01	; 1
   1414a:	88 2d       	mov	r24, r8
   1414c:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   14150:	61 e0       	ldi	r22, 0x01	; 1
   14152:	8d 2d       	mov	r24, r13
   14154:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   14158:	60 e0       	ldi	r22, 0x00	; 0
   1415a:	8f 2d       	mov	r24, r15
   1415c:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   14160:	61 e0       	ldi	r22, 0x01	; 1
   14162:	89 2d       	mov	r24, r9
   14164:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   14168:	60 e0       	ldi	r22, 0x00	; 0
   1416a:	8e 2d       	mov	r24, r14
   1416c:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   14170:	61 e0       	ldi	r22, 0x01	; 1
   14172:	8c 2d       	mov	r24, r12
   14174:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   14178:	1c 86       	std	Y+12, r1	; 0x0c
   1417a:	1d 86       	std	Y+13, r1	; 0x0d
   1417c:	1e 86       	std	Y+14, r1	; 0x0e
   1417e:	1f 86       	std	Y+15, r1	; 0x0f
   14180:	19 86       	std	Y+9, r1	; 0x09
   14182:	18 86       	std	Y+8, r1	; 0x08
   14184:	1b 86       	std	Y+11, r1	; 0x0b
   14186:	1a 86       	std	Y+10, r1	; 0x0a
   14188:	19 82       	std	Y+1, r1	; 0x01
   1418a:	18 82       	st	Y, r1
   1418c:	1b 82       	std	Y+3, r1	; 0x03
   1418e:	1a 82       	std	Y+2, r1	; 0x02
   14190:	8f ef       	ldi	r24, 0xFF	; 255
   14192:	9f ef       	ldi	r25, 0xFF	; 255
   14194:	9d 83       	std	Y+5, r25	; 0x05
   14196:	8c 83       	std	Y+4, r24	; 0x04
   14198:	9f 83       	std	Y+7, r25	; 0x07
   1419a:	8e 83       	std	Y+6, r24	; 0x06
   1419c:	df 91       	pop	r29
   1419e:	cf 91       	pop	r28
   141a0:	1f 91       	pop	r17
   141a2:	0f 91       	pop	r16
   141a4:	ff 90       	pop	r15
   141a6:	ef 90       	pop	r14
   141a8:	df 90       	pop	r13
   141aa:	cf 90       	pop	r12
   141ac:	bf 90       	pop	r11
   141ae:	af 90       	pop	r10
   141b0:	9f 90       	pop	r9
   141b2:	8f 90       	pop	r8
   141b4:	08 95       	ret

000141b6 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>:
_ZN13LCDWIKI_TOUCH22TP_Write_Byte_LowSpeedEh():
   141b6:	ef 92       	push	r14
   141b8:	ff 92       	push	r15
   141ba:	0f 93       	push	r16
   141bc:	1f 93       	push	r17
   141be:	cf 93       	push	r28
   141c0:	df 93       	push	r29
   141c2:	ec 01       	movw	r28, r24
   141c4:	f1 2c       	mov	r15, r1
   141c6:	e1 2c       	mov	r14, r1
   141c8:	06 2f       	mov	r16, r22
   141ca:	10 e0       	ldi	r17, 0x00	; 0
   141cc:	ee 89       	ldd	r30, Y+22	; 0x16
   141ce:	ff 89       	ldd	r31, Y+23	; 0x17
   141d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
   141d2:	98 01       	movw	r18, r16
   141d4:	0e 2c       	mov	r0, r14
   141d6:	02 c0       	rjmp	.+4      	; 0x141dc <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x26>
   141d8:	35 95       	asr	r19
   141da:	27 95       	ror	r18
   141dc:	0a 94       	dec	r0
   141de:	e2 f7       	brpl	.-8      	; 0x141d8 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x22>
   141e0:	90 81       	ld	r25, Z
   141e2:	20 ff       	sbrs	r18, 0
   141e4:	2f c0       	rjmp	.+94     	; 0x14244 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x8e>
   141e6:	89 2b       	or	r24, r25
   141e8:	80 83       	st	Z, r24
   141ea:	60 e5       	ldi	r22, 0x50	; 80
   141ec:	70 e0       	ldi	r23, 0x00	; 0
   141ee:	80 e0       	ldi	r24, 0x00	; 0
   141f0:	90 e0       	ldi	r25, 0x00	; 0
   141f2:	0e 94 ff 9f 	call	0x13ffe	; 0x13ffe <delay_hus(unsigned long)>
   141f6:	ea 89       	ldd	r30, Y+18	; 0x12
   141f8:	fb 89       	ldd	r31, Y+19	; 0x13
   141fa:	90 81       	ld	r25, Z
   141fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
   141fe:	80 95       	com	r24
   14200:	89 23       	and	r24, r25
   14202:	80 83       	st	Z, r24
   14204:	68 e7       	ldi	r22, 0x78	; 120
   14206:	70 e0       	ldi	r23, 0x00	; 0
   14208:	80 e0       	ldi	r24, 0x00	; 0
   1420a:	90 e0       	ldi	r25, 0x00	; 0
   1420c:	0e 94 ff 9f 	call	0x13ffe	; 0x13ffe <delay_hus(unsigned long)>
   14210:	ea 89       	ldd	r30, Y+18	; 0x12
   14212:	fb 89       	ldd	r31, Y+19	; 0x13
   14214:	80 81       	ld	r24, Z
   14216:	9d 8d       	ldd	r25, Y+29	; 0x1d
   14218:	89 2b       	or	r24, r25
   1421a:	80 83       	st	Z, r24
   1421c:	68 e7       	ldi	r22, 0x78	; 120
   1421e:	70 e0       	ldi	r23, 0x00	; 0
   14220:	80 e0       	ldi	r24, 0x00	; 0
   14222:	90 e0       	ldi	r25, 0x00	; 0
   14224:	0e 94 ff 9f 	call	0x13ffe	; 0x13ffe <delay_hus(unsigned long)>
   14228:	8f ef       	ldi	r24, 0xFF	; 255
   1422a:	e8 1a       	sub	r14, r24
   1422c:	f8 0a       	sbc	r15, r24
   1422e:	88 e0       	ldi	r24, 0x08	; 8
   14230:	e8 16       	cp	r14, r24
   14232:	f1 04       	cpc	r15, r1
   14234:	59 f6       	brne	.-106    	; 0x141cc <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x16>
   14236:	df 91       	pop	r29
   14238:	cf 91       	pop	r28
   1423a:	1f 91       	pop	r17
   1423c:	0f 91       	pop	r16
   1423e:	ff 90       	pop	r15
   14240:	ef 90       	pop	r14
   14242:	08 95       	ret
   14244:	80 95       	com	r24
   14246:	89 23       	and	r24, r25
   14248:	cf cf       	rjmp	.-98     	; 0x141e8 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)+0x32>

0001424a <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>:
_ZN13LCDWIKI_TOUCH15TP_SetBacklightEh():
   1424a:	1f 93       	push	r17
   1424c:	cf 93       	push	r28
   1424e:	df 93       	push	r29
   14250:	ec 01       	movw	r28, r24
   14252:	16 2f       	mov	r17, r22
   14254:	6f 87       	std	Y+15, r22	; 0x0f
   14256:	e8 89       	ldd	r30, Y+16	; 0x10
   14258:	f9 89       	ldd	r31, Y+17	; 0x11
   1425a:	80 81       	ld	r24, Z
   1425c:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1425e:	89 2b       	or	r24, r25
   14260:	80 83       	st	Z, r24
   14262:	ea 8d       	ldd	r30, Y+26	; 0x1a
   14264:	fb 8d       	ldd	r31, Y+27	; 0x1b
   14266:	80 81       	ld	r24, Z
   14268:	99 a1       	ldd	r25, Y+33	; 0x21
   1426a:	89 2b       	or	r24, r25
   1426c:	80 83       	st	Z, r24
   1426e:	65 e5       	ldi	r22, 0x55	; 85
   14270:	ce 01       	movw	r24, r28
   14272:	0e 94 db a0 	call	0x141b6	; 0x141b6 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>
   14276:	61 2f       	mov	r22, r17
   14278:	ce 01       	movw	r24, r28
   1427a:	df 91       	pop	r29
   1427c:	cf 91       	pop	r28
   1427e:	1f 91       	pop	r17
   14280:	0c 94 db a0 	jmp	0x141b6	; 0x141b6 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char)>

00014284 <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>:
_ZN13LCDWIKI_TOUCH7TP_InitEhjj():
   14284:	fc 01       	movw	r30, r24
   14286:	a6 89       	ldd	r26, Z+22	; 0x16
   14288:	b7 89       	ldd	r27, Z+23	; 0x17
   1428a:	8c 91       	ld	r24, X
   1428c:	97 8d       	ldd	r25, Z+31	; 0x1f
   1428e:	89 2b       	or	r24, r25
   14290:	8c 93       	st	X, r24
   14292:	a2 89       	ldd	r26, Z+18	; 0x12
   14294:	b3 89       	ldd	r27, Z+19	; 0x13
   14296:	8c 91       	ld	r24, X
   14298:	95 8d       	ldd	r25, Z+29	; 0x1d
   1429a:	89 2b       	or	r24, r25
   1429c:	8c 93       	st	X, r24
   1429e:	a0 89       	ldd	r26, Z+16	; 0x10
   142a0:	b1 89       	ldd	r27, Z+17	; 0x11
   142a2:	8c 91       	ld	r24, X
   142a4:	94 8d       	ldd	r25, Z+28	; 0x1c
   142a6:	89 2b       	or	r24, r25
   142a8:	8c 93       	st	X, r24
   142aa:	a2 8d       	ldd	r26, Z+26	; 0x1a
   142ac:	b3 8d       	ldd	r27, Z+27	; 0x1b
   142ae:	8c 91       	ld	r24, X
   142b0:	91 a1       	ldd	r25, Z+33	; 0x21
   142b2:	89 2b       	or	r24, r25
   142b4:	8c 93       	st	X, r24
   142b6:	51 87       	std	Z+9, r21	; 0x09
   142b8:	40 87       	std	Z+8, r20	; 0x08
   142ba:	33 87       	std	Z+11, r19	; 0x0b
   142bc:	22 87       	std	Z+10, r18	; 0x0a
_ZN13LCDWIKI_TOUCH16LCD_Set_RotationEh():
   142be:	66 87       	std	Z+14, r22	; 0x0e
_ZN13LCDWIKI_TOUCH7TP_InitEhjj():
   142c0:	6f e7       	ldi	r22, 0x7F	; 127
   142c2:	cf 01       	movw	r24, r30
   142c4:	0c 94 25 a1 	jmp	0x1424a	; 0x1424a <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char)>

000142c8 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)>:
_ZN13LCDWIKI_TOUCH13TP_Write_ByteEh():
   142c8:	fc 01       	movw	r30, r24
   142ca:	28 e0       	ldi	r18, 0x08	; 8
   142cc:	30 e0       	ldi	r19, 0x00	; 0
   142ce:	90 e8       	ldi	r25, 0x80	; 128
   142d0:	a6 89       	ldd	r26, Z+22	; 0x16
   142d2:	b7 89       	ldd	r27, Z+23	; 0x17
   142d4:	87 8d       	ldd	r24, Z+31	; 0x1f
   142d6:	46 2f       	mov	r20, r22
   142d8:	49 23       	and	r20, r25
   142da:	a9 f0       	breq	.+42     	; 0x14306 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x3e>
   142dc:	4c 91       	ld	r20, X
   142de:	84 2b       	or	r24, r20
   142e0:	8c 93       	st	X, r24
   142e2:	a2 89       	ldd	r26, Z+18	; 0x12
   142e4:	b3 89       	ldd	r27, Z+19	; 0x13
   142e6:	4c 91       	ld	r20, X
   142e8:	85 8d       	ldd	r24, Z+29	; 0x1d
   142ea:	80 95       	com	r24
   142ec:	84 23       	and	r24, r20
   142ee:	8c 93       	st	X, r24
   142f0:	a2 89       	ldd	r26, Z+18	; 0x12
   142f2:	b3 89       	ldd	r27, Z+19	; 0x13
   142f4:	8c 91       	ld	r24, X
   142f6:	45 8d       	ldd	r20, Z+29	; 0x1d
   142f8:	84 2b       	or	r24, r20
   142fa:	8c 93       	st	X, r24
   142fc:	96 95       	lsr	r25
   142fe:	21 50       	subi	r18, 0x01	; 1
   14300:	31 09       	sbc	r19, r1
   14302:	31 f7       	brne	.-52     	; 0x142d0 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x8>
   14304:	08 95       	ret
   14306:	4c 91       	ld	r20, X
   14308:	80 95       	com	r24
   1430a:	84 23       	and	r24, r20
   1430c:	e9 cf       	rjmp	.-46     	; 0x142e0 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x18>

0001430e <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)>:
_ZN13LCDWIKI_TOUCH11TP_Read_ADCEh():
   1430e:	cf 93       	push	r28
   14310:	df 93       	push	r29
   14312:	ec 01       	movw	r28, r24
   14314:	e8 89       	ldd	r30, Y+16	; 0x10
   14316:	f9 89       	ldd	r31, Y+17	; 0x11
   14318:	90 81       	ld	r25, Z
   1431a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1431c:	80 95       	com	r24
   1431e:	89 23       	and	r24, r25
   14320:	80 83       	st	Z, r24
   14322:	ea 89       	ldd	r30, Y+18	; 0x12
   14324:	fb 89       	ldd	r31, Y+19	; 0x13
   14326:	90 81       	ld	r25, Z
   14328:	8d 8d       	ldd	r24, Y+29	; 0x1d
   1432a:	80 95       	com	r24
   1432c:	89 23       	and	r24, r25
   1432e:	80 83       	st	Z, r24
   14330:	ee 89       	ldd	r30, Y+22	; 0x16
   14332:	ff 89       	ldd	r31, Y+23	; 0x17
   14334:	90 81       	ld	r25, Z
   14336:	8f 8d       	ldd	r24, Y+31	; 0x1f
   14338:	80 95       	com	r24
   1433a:	89 23       	and	r24, r25
   1433c:	80 83       	st	Z, r24
   1433e:	ce 01       	movw	r24, r28
   14340:	0e 94 64 a1 	call	0x142c8	; 0x142c8 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)>
   14344:	ea 89       	ldd	r30, Y+18	; 0x12
   14346:	fb 89       	ldd	r31, Y+19	; 0x13
   14348:	90 81       	ld	r25, Z
   1434a:	8d 8d       	ldd	r24, Y+29	; 0x1d
   1434c:	80 95       	com	r24
   1434e:	89 23       	and	r24, r25
   14350:	80 83       	st	Z, r24
   14352:	61 e0       	ldi	r22, 0x01	; 1
   14354:	70 e0       	ldi	r23, 0x00	; 0
   14356:	80 e0       	ldi	r24, 0x00	; 0
   14358:	90 e0       	ldi	r25, 0x00	; 0
   1435a:	0e 94 ff 9f 	call	0x13ffe	; 0x13ffe <delay_hus(unsigned long)>
   1435e:	ea 89       	ldd	r30, Y+18	; 0x12
   14360:	fb 89       	ldd	r31, Y+19	; 0x13
   14362:	80 81       	ld	r24, Z
   14364:	9d 8d       	ldd	r25, Y+29	; 0x1d
   14366:	89 2b       	or	r24, r25
   14368:	80 83       	st	Z, r24
   1436a:	ea 89       	ldd	r30, Y+18	; 0x12
   1436c:	fb 89       	ldd	r31, Y+19	; 0x13
   1436e:	90 81       	ld	r25, Z
   14370:	8d 8d       	ldd	r24, Y+29	; 0x1d
   14372:	80 95       	com	r24
   14374:	89 23       	and	r24, r25
   14376:	80 83       	st	Z, r24
   14378:	30 e1       	ldi	r19, 0x10	; 16
   1437a:	90 e0       	ldi	r25, 0x00	; 0
   1437c:	80 e0       	ldi	r24, 0x00	; 0
   1437e:	88 0f       	add	r24, r24
   14380:	99 1f       	adc	r25, r25
   14382:	ea 89       	ldd	r30, Y+18	; 0x12
   14384:	fb 89       	ldd	r31, Y+19	; 0x13
   14386:	40 81       	ld	r20, Z
   14388:	2d 8d       	ldd	r18, Y+29	; 0x1d
   1438a:	20 95       	com	r18
   1438c:	24 23       	and	r18, r20
   1438e:	20 83       	st	Z, r18
   14390:	ea 89       	ldd	r30, Y+18	; 0x12
   14392:	fb 89       	ldd	r31, Y+19	; 0x13
   14394:	20 81       	ld	r18, Z
   14396:	4d 8d       	ldd	r20, Y+29	; 0x1d
   14398:	24 2b       	or	r18, r20
   1439a:	20 83       	st	Z, r18
   1439c:	ec 89       	ldd	r30, Y+20	; 0x14
   1439e:	fd 89       	ldd	r31, Y+21	; 0x15
   143a0:	20 81       	ld	r18, Z
   143a2:	4e 8d       	ldd	r20, Y+30	; 0x1e
   143a4:	24 23       	and	r18, r20
   143a6:	09 f0       	breq	.+2      	; 0x143aa <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0x9c>
   143a8:	01 96       	adiw	r24, 0x01	; 1
   143aa:	31 50       	subi	r19, 0x01	; 1
   143ac:	41 f7       	brne	.-48     	; 0x1437e <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0x70>
   143ae:	e8 89       	ldd	r30, Y+16	; 0x10
   143b0:	f9 89       	ldd	r31, Y+17	; 0x11
   143b2:	20 81       	ld	r18, Z
   143b4:	3c 8d       	ldd	r19, Y+28	; 0x1c
   143b6:	23 2b       	or	r18, r19
   143b8:	20 83       	st	Z, r18
   143ba:	24 e0       	ldi	r18, 0x04	; 4
   143bc:	96 95       	lsr	r25
   143be:	87 95       	ror	r24
   143c0:	2a 95       	dec	r18
   143c2:	e1 f7       	brne	.-8      	; 0x143bc <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0xae>
   143c4:	df 91       	pop	r29
   143c6:	cf 91       	pop	r28
   143c8:	08 95       	ret

000143ca <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh():
   143ca:	9f 92       	push	r9
   143cc:	af 92       	push	r10
   143ce:	bf 92       	push	r11
   143d0:	cf 92       	push	r12
   143d2:	df 92       	push	r13
   143d4:	ef 92       	push	r14
   143d6:	ff 92       	push	r15
   143d8:	0f 93       	push	r16
   143da:	1f 93       	push	r17
   143dc:	cf 93       	push	r28
   143de:	df 93       	push	r29
   143e0:	00 d0       	rcall	.+0      	; 0x143e2 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x18>
   143e2:	00 d0       	rcall	.+0      	; 0x143e4 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x1a>
   143e4:	00 d0       	rcall	.+0      	; 0x143e6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x1c>
   143e6:	1f 92       	push	r1
   143e8:	cd b7       	in	r28, 0x3d	; 61
   143ea:	de b7       	in	r29, 0x3e	; 62
   143ec:	5c 01       	movw	r10, r24
   143ee:	96 2e       	mov	r9, r22
   143f0:	8e 01       	movw	r16, r28
   143f2:	0f 5f       	subi	r16, 0xFF	; 255
   143f4:	1f 4f       	sbci	r17, 0xFF	; 255
   143f6:	6e 01       	movw	r12, r28
   143f8:	8b e0       	ldi	r24, 0x0B	; 11
   143fa:	c8 0e       	add	r12, r24
   143fc:	d1 1c       	adc	r13, r1
   143fe:	78 01       	movw	r14, r16
   14400:	69 2d       	mov	r22, r9
   14402:	c5 01       	movw	r24, r10
   14404:	0e 94 87 a1 	call	0x1430e	; 0x1430e <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)>
   14408:	d7 01       	movw	r26, r14
   1440a:	8d 93       	st	X+, r24
   1440c:	9d 93       	st	X+, r25
   1440e:	7d 01       	movw	r14, r26
   14410:	ac 15       	cp	r26, r12
   14412:	bd 05       	cpc	r27, r13
   14414:	a9 f7       	brne	.-22     	; 0x14400 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x36>
   14416:	a8 01       	movw	r20, r16
   14418:	48 5f       	subi	r20, 0xF8	; 248
   1441a:	5f 4f       	sbci	r21, 0xFF	; 255
   1441c:	f8 01       	movw	r30, r16
   1441e:	d8 01       	movw	r26, r16
   14420:	8d 91       	ld	r24, X+
   14422:	9c 91       	ld	r25, X
   14424:	11 97       	sbiw	r26, 0x01	; 1
   14426:	22 81       	ldd	r18, Z+2	; 0x02
   14428:	33 81       	ldd	r19, Z+3	; 0x03
   1442a:	28 17       	cp	r18, r24
   1442c:	39 07       	cpc	r19, r25
   1442e:	20 f4       	brcc	.+8      	; 0x14438 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x6e>
   14430:	2d 93       	st	X+, r18
   14432:	3c 93       	st	X, r19
   14434:	93 83       	std	Z+3, r25	; 0x03
   14436:	82 83       	std	Z+2, r24	; 0x02
   14438:	32 96       	adiw	r30, 0x02	; 2
   1443a:	e4 17       	cp	r30, r20
   1443c:	f5 07       	cpc	r31, r21
   1443e:	79 f7       	brne	.-34     	; 0x1441e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x54>
   14440:	0e 5f       	subi	r16, 0xFE	; 254
   14442:	1f 4f       	sbci	r17, 0xFF	; 255
   14444:	e0 17       	cp	r30, r16
   14446:	f1 07       	cpc	r31, r17
   14448:	49 f7       	brne	.-46     	; 0x1441c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x52>
   1444a:	8b 81       	ldd	r24, Y+3	; 0x03
   1444c:	9c 81       	ldd	r25, Y+4	; 0x04
   1444e:	2d 81       	ldd	r18, Y+5	; 0x05
   14450:	3e 81       	ldd	r19, Y+6	; 0x06
   14452:	82 0f       	add	r24, r18
   14454:	93 1f       	adc	r25, r19
   14456:	2f 81       	ldd	r18, Y+7	; 0x07
   14458:	38 85       	ldd	r19, Y+8	; 0x08
   1445a:	82 0f       	add	r24, r18
   1445c:	93 1f       	adc	r25, r19
   1445e:	63 e0       	ldi	r22, 0x03	; 3
   14460:	70 e0       	ldi	r23, 0x00	; 0
   14462:	0e 94 52 d3 	call	0x1a6a4	; 0x1a6a4 <__udivmodhi4>
   14466:	cb 01       	movw	r24, r22
   14468:	2a 96       	adiw	r28, 0x0a	; 10
   1446a:	0f b6       	in	r0, 0x3f	; 63
   1446c:	f8 94       	cli
   1446e:	de bf       	out	0x3e, r29	; 62
   14470:	0f be       	out	0x3f, r0	; 63
   14472:	cd bf       	out	0x3d, r28	; 61
   14474:	df 91       	pop	r29
   14476:	cf 91       	pop	r28
   14478:	1f 91       	pop	r17
   1447a:	0f 91       	pop	r16
   1447c:	ff 90       	pop	r15
   1447e:	ef 90       	pop	r14
   14480:	df 90       	pop	r13
   14482:	cf 90       	pop	r12
   14484:	bf 90       	pop	r11
   14486:	af 90       	pop	r10
   14488:	9f 90       	pop	r9
   1448a:	08 95       	ret

0001448c <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>:
_ZN13LCDWIKI_TOUCH18TP_Read_CoordinateEPjS0_():
   1448c:	cf 92       	push	r12
   1448e:	df 92       	push	r13
   14490:	ef 92       	push	r14
   14492:	ff 92       	push	r15
   14494:	0f 93       	push	r16
   14496:	1f 93       	push	r17
   14498:	cf 93       	push	r28
   1449a:	df 93       	push	r29
   1449c:	ec 01       	movw	r28, r24
   1449e:	7b 01       	movw	r14, r22
   144a0:	8a 01       	movw	r16, r20
   144a2:	60 ed       	ldi	r22, 0xD0	; 208
   144a4:	0e 94 e5 a1 	call	0x143ca	; 0x143ca <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>
   144a8:	6c 01       	movw	r12, r24
   144aa:	60 e9       	ldi	r22, 0x90	; 144
   144ac:	ce 01       	movw	r24, r28
   144ae:	0e 94 e5 a1 	call	0x143ca	; 0x143ca <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>
   144b2:	f7 01       	movw	r30, r14
   144b4:	d1 82       	std	Z+1, r13	; 0x01
   144b6:	c0 82       	st	Z, r12
   144b8:	f8 01       	movw	r30, r16
   144ba:	91 83       	std	Z+1, r25	; 0x01
   144bc:	80 83       	st	Z, r24
   144be:	81 e0       	ldi	r24, 0x01	; 1
   144c0:	df 91       	pop	r29
   144c2:	cf 91       	pop	r28
   144c4:	1f 91       	pop	r17
   144c6:	0f 91       	pop	r16
   144c8:	ff 90       	pop	r15
   144ca:	ef 90       	pop	r14
   144cc:	df 90       	pop	r13
   144ce:	cf 90       	pop	r12
   144d0:	08 95       	ret

000144d2 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>:
_ZN13LCDWIKI_TOUCH19TP_Read_Coordinate2EPjS0_():
   144d2:	cf 92       	push	r12
   144d4:	df 92       	push	r13
   144d6:	ef 92       	push	r14
   144d8:	ff 92       	push	r15
   144da:	0f 93       	push	r16
   144dc:	1f 93       	push	r17
   144de:	cf 93       	push	r28
   144e0:	df 93       	push	r29
   144e2:	00 d0       	rcall	.+0      	; 0x144e4 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x12>
   144e4:	00 d0       	rcall	.+0      	; 0x144e6 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x14>
   144e6:	1f 92       	push	r1
   144e8:	1f 92       	push	r1
   144ea:	cd b7       	in	r28, 0x3d	; 61
   144ec:	de b7       	in	r29, 0x3e	; 62
   144ee:	6c 01       	movw	r12, r24
   144f0:	7b 01       	movw	r14, r22
   144f2:	8a 01       	movw	r16, r20
   144f4:	ae 01       	movw	r20, r28
   144f6:	4b 5f       	subi	r20, 0xFB	; 251
   144f8:	5f 4f       	sbci	r21, 0xFF	; 255
   144fa:	be 01       	movw	r22, r28
   144fc:	69 5f       	subi	r22, 0xF9	; 249
   144fe:	7f 4f       	sbci	r23, 0xFF	; 255
   14500:	0e 94 46 a2 	call	0x1448c	; 0x1448c <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>
   14504:	81 11       	cpse	r24, r1
   14506:	10 c0       	rjmp	.+32     	; 0x14528 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x56>
   14508:	80 e0       	ldi	r24, 0x00	; 0
   1450a:	28 96       	adiw	r28, 0x08	; 8
   1450c:	0f b6       	in	r0, 0x3f	; 63
   1450e:	f8 94       	cli
   14510:	de bf       	out	0x3e, r29	; 62
   14512:	0f be       	out	0x3f, r0	; 63
   14514:	cd bf       	out	0x3d, r28	; 61
   14516:	df 91       	pop	r29
   14518:	cf 91       	pop	r28
   1451a:	1f 91       	pop	r17
   1451c:	0f 91       	pop	r16
   1451e:	ff 90       	pop	r15
   14520:	ef 90       	pop	r14
   14522:	df 90       	pop	r13
   14524:	cf 90       	pop	r12
   14526:	08 95       	ret
   14528:	ae 01       	movw	r20, r28
   1452a:	4f 5f       	subi	r20, 0xFF	; 255
   1452c:	5f 4f       	sbci	r21, 0xFF	; 255
   1452e:	be 01       	movw	r22, r28
   14530:	6d 5f       	subi	r22, 0xFD	; 253
   14532:	7f 4f       	sbci	r23, 0xFF	; 255
   14534:	c6 01       	movw	r24, r12
   14536:	0e 94 46 a2 	call	0x1448c	; 0x1448c <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>
   1453a:	88 23       	and	r24, r24
   1453c:	29 f3       	breq	.-54     	; 0x14508 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   1453e:	2b 81       	ldd	r18, Y+3	; 0x03
   14540:	3c 81       	ldd	r19, Y+4	; 0x04
   14542:	6f 81       	ldd	r22, Y+7	; 0x07
   14544:	78 85       	ldd	r23, Y+8	; 0x08
   14546:	62 17       	cp	r22, r18
   14548:	73 07       	cpc	r23, r19
   1454a:	40 f0       	brcs	.+16     	; 0x1455c <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x8a>
   1454c:	c9 01       	movw	r24, r18
   1454e:	c2 96       	adiw	r24, 0x32	; 50
   14550:	68 17       	cp	r22, r24
   14552:	79 07       	cpc	r23, r25
   14554:	40 f0       	brcs	.+16     	; 0x14566 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x94>
   14556:	26 17       	cp	r18, r22
   14558:	37 07       	cpc	r19, r23
   1455a:	b0 f2       	brcs	.-84     	; 0x14508 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   1455c:	cb 01       	movw	r24, r22
   1455e:	c2 96       	adiw	r24, 0x32	; 50
   14560:	28 17       	cp	r18, r24
   14562:	39 07       	cpc	r19, r25
   14564:	88 f6       	brcc	.-94     	; 0x14508 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   14566:	89 81       	ldd	r24, Y+1	; 0x01
   14568:	9a 81       	ldd	r25, Y+2	; 0x02
   1456a:	4d 81       	ldd	r20, Y+5	; 0x05
   1456c:	5e 81       	ldd	r21, Y+6	; 0x06
   1456e:	48 17       	cp	r20, r24
   14570:	59 07       	cpc	r21, r25
   14572:	40 f0       	brcs	.+16     	; 0x14584 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xb2>
   14574:	fc 01       	movw	r30, r24
   14576:	f2 96       	adiw	r30, 0x32	; 50
   14578:	4e 17       	cp	r20, r30
   1457a:	5f 07       	cpc	r21, r31
   1457c:	48 f0       	brcs	.+18     	; 0x14590 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xbe>
   1457e:	84 17       	cp	r24, r20
   14580:	95 07       	cpc	r25, r21
   14582:	10 f2       	brcs	.-124    	; 0x14508 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   14584:	fa 01       	movw	r30, r20
   14586:	f2 96       	adiw	r30, 0x32	; 50
   14588:	8e 17       	cp	r24, r30
   1458a:	9f 07       	cpc	r25, r31
   1458c:	08 f0       	brcs	.+2      	; 0x14590 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xbe>
   1458e:	bc cf       	rjmp	.-136    	; 0x14508 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   14590:	26 0f       	add	r18, r22
   14592:	37 1f       	adc	r19, r23
   14594:	36 95       	lsr	r19
   14596:	27 95       	ror	r18
   14598:	f7 01       	movw	r30, r14
   1459a:	31 83       	std	Z+1, r19	; 0x01
   1459c:	20 83       	st	Z, r18
   1459e:	84 0f       	add	r24, r20
   145a0:	95 1f       	adc	r25, r21
   145a2:	96 95       	lsr	r25
   145a4:	87 95       	ror	r24
   145a6:	f8 01       	movw	r30, r16
   145a8:	91 83       	std	Z+1, r25	; 0x01
   145aa:	80 83       	st	Z, r24
   145ac:	81 e0       	ldi	r24, 0x01	; 1
   145ae:	ad cf       	rjmp	.-166    	; 0x1450a <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x38>

000145b0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)>:
_ZN13LCDWIKI_TOUCH7TP_ScanEh():
   145b0:	cf 92       	push	r12
   145b2:	df 92       	push	r13
   145b4:	ef 92       	push	r14
   145b6:	ff 92       	push	r15
   145b8:	0f 93       	push	r16
   145ba:	1f 93       	push	r17
   145bc:	cf 93       	push	r28
   145be:	df 93       	push	r29
   145c0:	ec 01       	movw	r28, r24
   145c2:	96 2f       	mov	r25, r22
   145c4:	e8 8d       	ldd	r30, Y+24	; 0x18
   145c6:	f9 8d       	ldd	r31, Y+25	; 0x19
   145c8:	80 81       	ld	r24, Z
   145ca:	28 a1       	ldd	r18, Y+32	; 0x20
   145cc:	82 23       	and	r24, r18
   145ce:	09 f0       	breq	.+2      	; 0x145d2 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x22>
   145d0:	ae c0       	rjmp	.+348    	; 0x1472e <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x17e>
   145d2:	ae 01       	movw	r20, r28
   145d4:	4a 5f       	subi	r20, 0xFA	; 250
   145d6:	5f 4f       	sbci	r21, 0xFF	; 255
   145d8:	be 01       	movw	r22, r28
   145da:	6c 5f       	subi	r22, 0xFC	; 252
   145dc:	7f 4f       	sbci	r23, 0xFF	; 255
   145de:	99 23       	and	r25, r25
   145e0:	d9 f0       	breq	.+54     	; 0x14618 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x68>
   145e2:	ce 01       	movw	r24, r28
   145e4:	0e 94 69 a2 	call	0x144d2	; 0x144d2 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>
   145e8:	8c 85       	ldd	r24, Y+12	; 0x0c
   145ea:	87 fd       	sbrc	r24, 7
   145ec:	0a c0       	rjmp	.+20     	; 0x14602 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>
   145ee:	80 ec       	ldi	r24, 0xC0	; 192
   145f0:	8c 87       	std	Y+12, r24	; 0x0c
   145f2:	8c 81       	ldd	r24, Y+4	; 0x04
   145f4:	9d 81       	ldd	r25, Y+5	; 0x05
   145f6:	99 83       	std	Y+1, r25	; 0x01
   145f8:	88 83       	st	Y, r24
   145fa:	8e 81       	ldd	r24, Y+6	; 0x06
   145fc:	9f 81       	ldd	r25, Y+7	; 0x07
   145fe:	9b 83       	std	Y+3, r25	; 0x03
   14600:	8a 83       	std	Y+2, r24	; 0x02
   14602:	8c 85       	ldd	r24, Y+12	; 0x0c
   14604:	80 78       	andi	r24, 0x80	; 128
   14606:	df 91       	pop	r29
   14608:	cf 91       	pop	r28
   1460a:	1f 91       	pop	r17
   1460c:	0f 91       	pop	r16
   1460e:	ff 90       	pop	r15
   14610:	ef 90       	pop	r14
   14612:	df 90       	pop	r13
   14614:	cf 90       	pop	r12
   14616:	08 95       	ret
   14618:	ce 01       	movw	r24, r28
   1461a:	0e 94 69 a2 	call	0x144d2	; 0x144d2 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>
   1461e:	88 23       	and	r24, r24
   14620:	19 f3       	breq	.-58     	; 0x145e8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   14622:	2c 81       	ldd	r18, Y+4	; 0x04
   14624:	3d 81       	ldd	r19, Y+5	; 0x05
   14626:	a4 e5       	ldi	r26, 0x54	; 84
   14628:	b3 e0       	ldi	r27, 0x03	; 3
   1462a:	0e 94 c3 d3 	call	0x1a786	; 0x1a786 <__umulhisi3>
   1462e:	20 e1       	ldi	r18, 0x10	; 16
   14630:	c2 2e       	mov	r12, r18
   14632:	27 e2       	ldi	r18, 0x27	; 39
   14634:	d2 2e       	mov	r13, r18
   14636:	e1 2c       	mov	r14, r1
   14638:	f1 2c       	mov	r15, r1
   1463a:	a7 01       	movw	r20, r14
   1463c:	96 01       	movw	r18, r12
   1463e:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <__divmodsi4>
   14642:	89 01       	movw	r16, r18
   14644:	0e 50       	subi	r16, 0x0E	; 14
   14646:	11 09       	sbc	r17, r1
   14648:	1d 83       	std	Y+5, r17	; 0x05
   1464a:	0c 83       	std	Y+4, r16	; 0x04
   1464c:	2e 81       	ldd	r18, Y+6	; 0x06
   1464e:	3f 81       	ldd	r19, Y+7	; 0x07
   14650:	a4 e0       	ldi	r26, 0x04	; 4
   14652:	b5 e0       	ldi	r27, 0x05	; 5
   14654:	0e 94 c3 d3 	call	0x1a786	; 0x1a786 <__umulhisi3>
   14658:	a7 01       	movw	r20, r14
   1465a:	96 01       	movw	r18, r12
   1465c:	0e 94 9c d3 	call	0x1a738	; 0x1a738 <__divmodsi4>
   14660:	2e 51       	subi	r18, 0x1E	; 30
   14662:	31 09       	sbc	r19, r1
   14664:	3f 83       	std	Y+7, r19	; 0x07
   14666:	2e 83       	std	Y+6, r18	; 0x06
   14668:	8d 85       	ldd	r24, Y+13	; 0x0d
   1466a:	81 30       	cpi	r24, 0x01	; 1
   1466c:	a9 f1       	breq	.+106    	; 0x146d8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x128>
   1466e:	90 f0       	brcs	.+36     	; 0x14694 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xe4>
   14670:	82 30       	cpi	r24, 0x02	; 2
   14672:	09 f4       	brne	.+2      	; 0x14676 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xc6>
   14674:	53 c0       	rjmp	.+166    	; 0x1471c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x16c>
   14676:	83 30       	cpi	r24, 0x03	; 3
   14678:	09 f0       	breq	.+2      	; 0x1467c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xcc>
   1467a:	b6 cf       	rjmp	.-148    	; 0x145e8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1467c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1467e:	88 23       	and	r24, r24
   14680:	e1 f1       	breq	.+120    	; 0x146fa <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x14a>
   14682:	81 30       	cpi	r24, 0x01	; 1
   14684:	09 f4       	brne	.+2      	; 0x14688 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xd8>
   14686:	43 c0       	rjmp	.+134    	; 0x1470e <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x15e>
   14688:	82 30       	cpi	r24, 0x02	; 2
   1468a:	49 f1       	breq	.+82     	; 0x146de <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x12e>
   1468c:	83 30       	cpi	r24, 0x03	; 3
   1468e:	09 f0       	breq	.+2      	; 0x14692 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xe2>
   14690:	ab cf       	rjmp	.-170    	; 0x145e8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   14692:	2c c0       	rjmp	.+88     	; 0x146ec <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x13c>
   14694:	8e 85       	ldd	r24, Y+14	; 0x0e
   14696:	88 23       	and	r24, r24
   14698:	09 f4       	brne	.+2      	; 0x1469c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xec>
   1469a:	a6 cf       	rjmp	.-180    	; 0x145e8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1469c:	81 30       	cpi	r24, 0x01	; 1
   1469e:	39 f4       	brne	.+14     	; 0x146ae <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xfe>
   146a0:	3d 83       	std	Y+5, r19	; 0x05
   146a2:	2c 83       	std	Y+4, r18	; 0x04
   146a4:	8a 85       	ldd	r24, Y+10	; 0x0a
   146a6:	9b 85       	ldd	r25, Y+11	; 0x0b
   146a8:	80 1b       	sub	r24, r16
   146aa:	91 0b       	sbc	r25, r17
   146ac:	2a c0       	rjmp	.+84     	; 0x14702 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x152>
   146ae:	82 30       	cpi	r24, 0x02	; 2
   146b0:	39 f4       	brne	.+14     	; 0x146c0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x110>
   146b2:	88 85       	ldd	r24, Y+8	; 0x08
   146b4:	99 85       	ldd	r25, Y+9	; 0x09
   146b6:	80 1b       	sub	r24, r16
   146b8:	91 0b       	sbc	r25, r17
   146ba:	9d 83       	std	Y+5, r25	; 0x05
   146bc:	8c 83       	std	Y+4, r24	; 0x04
   146be:	1d c0       	rjmp	.+58     	; 0x146fa <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x14a>
   146c0:	83 30       	cpi	r24, 0x03	; 3
   146c2:	09 f0       	breq	.+2      	; 0x146c6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x116>
   146c4:	91 cf       	rjmp	.-222    	; 0x145e8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   146c6:	1f 83       	std	Y+7, r17	; 0x07
   146c8:	0e 83       	std	Y+6, r16	; 0x06
   146ca:	88 85       	ldd	r24, Y+8	; 0x08
   146cc:	99 85       	ldd	r25, Y+9	; 0x09
   146ce:	82 1b       	sub	r24, r18
   146d0:	93 0b       	sbc	r25, r19
   146d2:	9d 83       	std	Y+5, r25	; 0x05
   146d4:	8c 83       	std	Y+4, r24	; 0x04
   146d6:	88 cf       	rjmp	.-240    	; 0x145e8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   146d8:	8e 85       	ldd	r24, Y+14	; 0x0e
   146da:	81 11       	cpse	r24, r1
   146dc:	05 c0       	rjmp	.+10     	; 0x146e8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x138>
   146de:	88 85       	ldd	r24, Y+8	; 0x08
   146e0:	99 85       	ldd	r25, Y+9	; 0x09
   146e2:	80 1b       	sub	r24, r16
   146e4:	91 0b       	sbc	r25, r17
   146e6:	f5 cf       	rjmp	.-22     	; 0x146d2 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x122>
   146e8:	81 30       	cpi	r24, 0x01	; 1
   146ea:	29 f4       	brne	.+10     	; 0x146f6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x146>
   146ec:	3d 83       	std	Y+5, r19	; 0x05
   146ee:	2c 83       	std	Y+4, r18	; 0x04
   146f0:	1f 83       	std	Y+7, r17	; 0x07
   146f2:	0e 83       	std	Y+6, r16	; 0x06
   146f4:	79 cf       	rjmp	.-270    	; 0x145e8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   146f6:	82 30       	cpi	r24, 0x02	; 2
   146f8:	39 f4       	brne	.+14     	; 0x14708 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x158>
   146fa:	8a 85       	ldd	r24, Y+10	; 0x0a
   146fc:	9b 85       	ldd	r25, Y+11	; 0x0b
   146fe:	82 1b       	sub	r24, r18
   14700:	93 0b       	sbc	r25, r19
   14702:	9f 83       	std	Y+7, r25	; 0x07
   14704:	8e 83       	std	Y+6, r24	; 0x06
   14706:	70 cf       	rjmp	.-288    	; 0x145e8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   14708:	83 30       	cpi	r24, 0x03	; 3
   1470a:	09 f0       	breq	.+2      	; 0x1470e <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x15e>
   1470c:	6d cf       	rjmp	.-294    	; 0x145e8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1470e:	88 85       	ldd	r24, Y+8	; 0x08
   14710:	99 85       	ldd	r25, Y+9	; 0x09
   14712:	82 1b       	sub	r24, r18
   14714:	93 0b       	sbc	r25, r19
   14716:	9d 83       	std	Y+5, r25	; 0x05
   14718:	8c 83       	std	Y+4, r24	; 0x04
   1471a:	c4 cf       	rjmp	.-120    	; 0x146a4 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xf4>
   1471c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1471e:	88 23       	and	r24, r24
   14720:	41 f2       	breq	.-112    	; 0x146b2 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x102>
   14722:	81 30       	cpi	r24, 0x01	; 1
   14724:	81 f2       	breq	.-96     	; 0x146c6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x116>
   14726:	83 30       	cpi	r24, 0x03	; 3
   14728:	09 f0       	breq	.+2      	; 0x1472c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x17c>
   1472a:	5e cf       	rjmp	.-324    	; 0x145e8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   1472c:	b9 cf       	rjmp	.-142    	; 0x146a0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xf0>
   1472e:	8c 85       	ldd	r24, Y+12	; 0x0c
   14730:	87 ff       	sbrs	r24, 7
   14732:	03 c0       	rjmp	.+6      	; 0x1473a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x18a>
   14734:	8f 77       	andi	r24, 0x7F	; 127
   14736:	8c 87       	std	Y+12, r24	; 0x0c
   14738:	64 cf       	rjmp	.-312    	; 0x14602 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>
   1473a:	19 82       	std	Y+1, r1	; 0x01
   1473c:	18 82       	st	Y, r1
   1473e:	1b 82       	std	Y+3, r1	; 0x03
   14740:	1a 82       	std	Y+2, r1	; 0x02
   14742:	8f ef       	ldi	r24, 0xFF	; 255
   14744:	9f ef       	ldi	r25, 0xFF	; 255
   14746:	9d 83       	std	Y+5, r25	; 0x05
   14748:	8c 83       	std	Y+4, r24	; 0x04
   1474a:	9f 83       	std	Y+7, r25	; 0x07
   1474c:	8e 83       	std	Y+6, r24	; 0x06
   1474e:	59 cf       	rjmp	.-334    	; 0x14602 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>

00014750 <LCDWIKI_TOUCH::TP_Set_Rotation(unsigned char)>:
_ZN13LCDWIKI_TOUCH15TP_Set_RotationEh():
   14750:	fc 01       	movw	r30, r24
   14752:	65 87       	std	Z+13, r22	; 0x0d
   14754:	08 95       	ret

00014756 <LCDWIKI_TOUCH::TP_Get_State() const>:
_ZNK13LCDWIKI_TOUCH12TP_Get_StateEv():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:417

uint8_t LCDWIKI_TOUCH::TP_Get_State(void) const
{
	return touch_statue;
}
   14756:	fc 01       	movw	r30, r24
   14758:	84 85       	ldd	r24, Z+12	; 0x0c
   1475a:	08 95       	ret

0001475c <SoftSPIB::SoftSPIB(unsigned char, unsigned char, unsigned char)>:
_ZN8SoftSPIBC2Ehhh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:48
            _cke = 0;
            break;
        case SPI_MODE3:
            _ckp = 1;
            _cke = 1;
            break;
   1475c:	fc 01       	movw	r30, r24
   1475e:	82 2f       	mov	r24, r18
   14760:	64 83       	std	Z+4, r22	; 0x04
   14762:	43 83       	std	Z+3, r20	; 0x03
   14764:	25 83       	std	Z+5, r18	; 0x05
   14766:	92 e0       	ldi	r25, 0x02	; 2
   14768:	92 83       	std	Z+2, r25	; 0x02
   1476a:	10 82       	st	Z, r1
   1476c:	11 82       	std	Z+1, r1	; 0x01
   1476e:	16 82       	std	Z+6, r1	; 0x06
   14770:	60 e0       	ldi	r22, 0x00	; 0
   14772:	0c 94 7d cd 	jmp	0x19afa	; 0x19afa <digitalWrite>

00014776 <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
   14776:	cf 93       	push	r28
   14778:	df 93       	push	r29
   1477a:	ec 01       	movw	r28, r24
   1477c:	61 e0       	ldi	r22, 0x01	; 1
   1477e:	8c 81       	ldd	r24, Y+4	; 0x04
   14780:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   14784:	60 e0       	ldi	r22, 0x00	; 0
   14786:	8b 81       	ldd	r24, Y+3	; 0x03
   14788:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   1478c:	61 e0       	ldi	r22, 0x01	; 1
   1478e:	8d 81       	ldd	r24, Y+5	; 0x05
   14790:	df 91       	pop	r29
   14792:	cf 91       	pop	r28
   14794:	0c 94 41 cd 	jmp	0x19a82	; 0x19a82 <pinMode>

00014798 <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
   14798:	8f 92       	push	r8
   1479a:	9f 92       	push	r9
   1479c:	af 92       	push	r10
   1479e:	bf 92       	push	r11
   147a0:	cf 92       	push	r12
   147a2:	df 92       	push	r13
   147a4:	ff 92       	push	r15
   147a6:	0f 93       	push	r16
   147a8:	1f 93       	push	r17
   147aa:	cf 93       	push	r28
   147ac:	df 93       	push	r29
   147ae:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
   147b0:	fc 01       	movw	r30, r24
   147b2:	86 81       	ldd	r24, Z+6	; 0x06
   147b4:	81 11       	cpse	r24, r1
   147b6:	35 c0       	rjmp	.+106    	; 0x14822 <SoftSPIB::transfer(unsigned char)+0x8a>
   147b8:	86 2f       	mov	r24, r22
   147ba:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
   147bc:	ec 01       	movw	r28, r24
   147be:	d6 95       	lsr	r29
   147c0:	dc 2f       	mov	r29, r28
   147c2:	cc 27       	eor	r28, r28
   147c4:	d7 95       	ror	r29
   147c6:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
   147c8:	66 1f       	adc	r22, r22
   147ca:	66 27       	eor	r22, r22
   147cc:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   147ce:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
   147d0:	ec 01       	movw	r28, r24
   147d2:	35 e0       	ldi	r19, 0x05	; 5
   147d4:	cc 0f       	add	r28, r28
   147d6:	dd 1f       	adc	r29, r29
   147d8:	3a 95       	dec	r19
   147da:	e1 f7       	brne	.-8      	; 0x147d4 <SoftSPIB::transfer(unsigned char)+0x3c>
   147dc:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   147de:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
   147e0:	ec 01       	movw	r28, r24
   147e2:	43 e0       	ldi	r20, 0x03	; 3
   147e4:	cc 0f       	add	r28, r28
   147e6:	dd 1f       	adc	r29, r29
   147e8:	4a 95       	dec	r20
   147ea:	e1 f7       	brne	.-8      	; 0x147e4 <SoftSPIB::transfer(unsigned char)+0x4c>
   147ec:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   147ee:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
   147f0:	ec 01       	movw	r28, r24
   147f2:	cc 0f       	add	r28, r28
   147f4:	dd 1f       	adc	r29, r29
   147f6:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   147f8:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
   147fa:	ec 01       	movw	r28, r24
   147fc:	d5 95       	asr	r29
   147fe:	c7 95       	ror	r28
   14800:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   14802:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
   14804:	ec 01       	movw	r28, r24
   14806:	e3 e0       	ldi	r30, 0x03	; 3
   14808:	d5 95       	asr	r29
   1480a:	c7 95       	ror	r28
   1480c:	ea 95       	dec	r30
   1480e:	e1 f7       	brne	.-8      	; 0x14808 <SoftSPIB::transfer(unsigned char)+0x70>
   14810:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
   14812:	6c 2b       	or	r22, r28
   14814:	f5 e0       	ldi	r31, 0x05	; 5
   14816:	95 95       	asr	r25
   14818:	87 95       	ror	r24
   1481a:	fa 95       	dec	r31
   1481c:	e1 f7       	brne	.-8      	; 0x14816 <SoftSPIB::transfer(unsigned char)+0x7e>
   1481e:	82 70       	andi	r24, 0x02	; 2
   14820:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
   14822:	91 e0       	ldi	r25, 0x01	; 1
   14824:	80 e0       	ldi	r24, 0x00	; 0
   14826:	f8 01       	movw	r30, r16
   14828:	21 81       	ldd	r18, Z+1	; 0x01
   1482a:	21 11       	cpse	r18, r1
   1482c:	01 c0       	rjmp	.+2      	; 0x14830 <SoftSPIB::transfer(unsigned char)+0x98>
   1482e:	90 e0       	ldi	r25, 0x00	; 0
   14830:	c9 2e       	mov	r12, r25
   14832:	d8 2e       	mov	r13, r24
   14834:	b1 2c       	mov	r11, r1
   14836:	a1 2c       	mov	r10, r1
   14838:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   1483a:	c6 2f       	mov	r28, r22
   1483c:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
   1483e:	f8 01       	movw	r30, r16
   14840:	80 81       	ld	r24, Z
   14842:	88 23       	and	r24, r24
   14844:	39 f0       	breq	.+14     	; 0x14854 <SoftSPIB::transfer(unsigned char)+0xbc>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
   14846:	f1 e0       	ldi	r31, 0x01	; 1
   14848:	cf 26       	eor	r12, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
   1484a:	6c 2d       	mov	r22, r12
   1484c:	f8 01       	movw	r30, r16
   1484e:	85 81       	ldd	r24, Z+5	; 0x05
   14850:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   14854:	be 01       	movw	r22, r28
   14856:	0a 2c       	mov	r0, r10
   14858:	02 c0       	rjmp	.+4      	; 0x1485e <SoftSPIB::transfer(unsigned char)+0xc6>
   1485a:	75 95       	asr	r23
   1485c:	67 95       	ror	r22
   1485e:	0a 94       	dec	r0
   14860:	e2 f7       	brpl	.-8      	; 0x1485a <SoftSPIB::transfer(unsigned char)+0xc2>
   14862:	61 70       	andi	r22, 0x01	; 1
   14864:	f8 01       	movw	r30, r16
   14866:	84 81       	ldd	r24, Z+4	; 0x04
   14868:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
   1486c:	46 01       	movw	r8, r12
   1486e:	f1 e0       	ldi	r31, 0x01	; 1
   14870:	8f 26       	eor	r8, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
   14872:	68 2d       	mov	r22, r8
   14874:	f8 01       	movw	r30, r16
   14876:	85 81       	ldd	r24, Z+5	; 0x05
   14878:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:116

        /* ... Read bit */
        {
            bval = digitalRead(_miso);
   1487c:	f8 01       	movw	r30, r16
   1487e:	83 81       	ldd	r24, Z+3	; 0x03
   14880:	0e 94 ab cd 	call	0x19b56	; 0x19b56 <digitalRead>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

            if (_order == MSBFIRST) {
   14884:	f8 01       	movw	r30, r16
   14886:	96 81       	ldd	r25, Z+6	; 0x06
   14888:	91 11       	cpse	r25, r1
   1488a:	1b c0       	rjmp	.+54     	; 0x148c2 <SoftSPIB::transfer(unsigned char)+0x12a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
   1488c:	ff 0c       	add	r15, r15
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   1488e:	f8 2a       	or	r15, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
   14890:	f8 01       	movw	r30, r16
   14892:	80 81       	ld	r24, Z
   14894:	88 23       	and	r24, r24
   14896:	d1 f0       	breq	.+52     	; 0x148cc <SoftSPIB::transfer(unsigned char)+0x134>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
   14898:	64 01       	movw	r12, r8
   1489a:	ff ef       	ldi	r31, 0xFF	; 255
   1489c:	af 1a       	sub	r10, r31
   1489e:	bf 0a       	sbc	r11, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98 (discriminator 2)

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
   148a0:	28 e0       	ldi	r18, 0x08	; 8
   148a2:	a2 16       	cp	r10, r18
   148a4:	b1 04       	cpc	r11, r1
   148a6:	59 f6       	brne	.-106    	; 0x1483e <SoftSPIB::transfer(unsigned char)+0xa6>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
   148a8:	8f 2d       	mov	r24, r15
   148aa:	df 91       	pop	r29
   148ac:	cf 91       	pop	r28
   148ae:	1f 91       	pop	r17
   148b0:	0f 91       	pop	r16
   148b2:	ff 90       	pop	r15
   148b4:	df 90       	pop	r13
   148b6:	cf 90       	pop	r12
   148b8:	bf 90       	pop	r11
   148ba:	af 90       	pop	r10
   148bc:	9f 90       	pop	r9
   148be:	8f 90       	pop	r8
   148c0:	08 95       	ret
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   148c2:	87 95       	ror	r24
   148c4:	88 27       	eor	r24, r24
   148c6:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
   148c8:	f6 94       	lsr	r15
   148ca:	e1 cf       	rjmp	.-62     	; 0x1488e <SoftSPIB::transfer(unsigned char)+0xf6>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
   148cc:	6c 2d       	mov	r22, r12
   148ce:	85 81       	ldd	r24, Z+5	; 0x05
   148d0:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
   148d4:	e2 cf       	rjmp	.-60     	; 0x1489a <SoftSPIB::transfer(unsigned char)+0x102>

000148d6 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)>:
_ZN9SRAM_23LCC2EP8SoftSPIBh17_SRAM_23LC_Device():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:62
  endCommand();
}

void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
   148d6:	fc 01       	movw	r30, r24
   148d8:	80 e0       	ldi	r24, 0x00	; 0
   148da:	90 e0       	ldi	r25, 0x00	; 0
   148dc:	a2 e0       	ldi	r26, 0x02	; 2
   148de:	b0 e0       	ldi	r27, 0x00	; 0
   148e0:	23 30       	cpi	r18, 0x03	; 3
   148e2:	31 05       	cpc	r19, r1
   148e4:	40 f0       	brcs	.+16     	; 0x148f6 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>
   148e6:	c9 01       	movw	r24, r18
   148e8:	03 97       	sbiw	r24, 0x03	; 3
   148ea:	03 97       	sbiw	r24, 0x03	; 3
   148ec:	70 f4       	brcc	.+28     	; 0x1490a <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x34>
   148ee:	80 e0       	ldi	r24, 0x00	; 0
   148f0:	90 e0       	ldi	r25, 0x00	; 0
   148f2:	a1 e0       	ldi	r26, 0x01	; 1
   148f4:	b0 e0       	ldi	r27, 0x00	; 0
   148f6:	84 83       	std	Z+4, r24	; 0x04
   148f8:	95 83       	std	Z+5, r25	; 0x05
   148fa:	a6 83       	std	Z+6, r26	; 0x06
   148fc:	b7 83       	std	Z+7, r27	; 0x07
   148fe:	33 83       	std	Z+3, r19	; 0x03
   14900:	22 83       	std	Z+2, r18	; 0x02
   14902:	71 83       	std	Z+1, r23	; 0x01
   14904:	60 83       	st	Z, r22
   14906:	40 87       	std	Z+8, r20	; 0x08
   14908:	08 95       	ret
   1490a:	c9 01       	movw	r24, r18
   1490c:	06 97       	sbiw	r24, 0x06	; 6
   1490e:	02 97       	sbiw	r24, 0x02	; 2
   14910:	28 f4       	brcc	.+10     	; 0x1491c <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x46>
   14912:	80 e0       	ldi	r24, 0x00	; 0
   14914:	90 e8       	ldi	r25, 0x80	; 128
   14916:	a0 e0       	ldi	r26, 0x00	; 0
   14918:	b0 e0       	ldi	r27, 0x00	; 0
   1491a:	ed cf       	rjmp	.-38     	; 0x148f6 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>
   1491c:	c9 01       	movw	r24, r18
   1491e:	08 97       	sbiw	r24, 0x08	; 8
   14920:	02 97       	sbiw	r24, 0x02	; 2
   14922:	68 f7       	brcc	.-38     	; 0x148fe <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x28>
   14924:	80 e0       	ldi	r24, 0x00	; 0
   14926:	90 e2       	ldi	r25, 0x20	; 32
   14928:	a0 e0       	ldi	r26, 0x00	; 0
   1492a:	b0 e0       	ldi	r27, 0x00	; 0
   1492c:	e4 cf       	rjmp	.-56     	; 0x148f6 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>

0001492e <SRAM_23LC::sendAddressBytes(unsigned long)>:
_ZN9SRAM_23LC16sendAddressBytesEm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:134
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
{
   1492e:	cf 92       	push	r12
   14930:	df 92       	push	r13
   14932:	ef 92       	push	r14
   14934:	ff 92       	push	r15
   14936:	cf 93       	push	r28
   14938:	df 93       	push	r29
   1493a:	ec 01       	movw	r28, r24
   1493c:	6a 01       	movw	r12, r20
   1493e:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
  if (_capacity > 0x10000) {
   14940:	8c 81       	ldd	r24, Y+4	; 0x04
   14942:	9d 81       	ldd	r25, Y+5	; 0x05
   14944:	ae 81       	ldd	r26, Y+6	; 0x06
   14946:	bf 81       	ldd	r27, Y+7	; 0x07
   14948:	01 97       	sbiw	r24, 0x01	; 1
   1494a:	a1 40       	sbci	r26, 0x01	; 1
   1494c:	b1 05       	cpc	r27, r1
   1494e:	38 f0       	brcs	.+14     	; 0x1495e <SRAM_23LC::sendAddressBytes(unsigned long)+0x30>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   14950:	b7 01       	movw	r22, r14
   14952:	88 27       	eor	r24, r24
   14954:	99 27       	eor	r25, r25
   14956:	88 81       	ld	r24, Y
   14958:	99 81       	ldd	r25, Y+1	; 0x01
   1495a:	0e 94 cc a3 	call	0x14798	; 0x14798 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   1495e:	99 27       	eor	r25, r25
   14960:	8f 2d       	mov	r24, r15
   14962:	7e 2d       	mov	r23, r14
   14964:	6d 2d       	mov	r22, r13
   14966:	88 81       	ld	r24, Y
   14968:	99 81       	ldd	r25, Y+1	; 0x01
   1496a:	0e 94 cc a3 	call	0x14798	; 0x14798 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   1496e:	6c 2d       	mov	r22, r12
   14970:	88 81       	ld	r24, Y
   14972:	99 81       	ldd	r25, Y+1	; 0x01
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   14974:	df 91       	pop	r29
   14976:	cf 91       	pop	r28
   14978:	ff 90       	pop	r15
   1497a:	ef 90       	pop	r14
   1497c:	df 90       	pop	r13
   1497e:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   14980:	0c 94 cc a3 	jmp	0x14798	; 0x14798 <SoftSPIB::transfer(unsigned char)>

00014984 <SRAM_23LC::startCommand(unsigned char, unsigned long)>:
_ZN9SRAM_23LC12startCommandEhm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:123

  return(length);
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
   14984:	cf 92       	push	r12
   14986:	df 92       	push	r13
   14988:	ef 92       	push	r14
   1498a:	ff 92       	push	r15
   1498c:	0f 93       	push	r16
   1498e:	1f 93       	push	r17
   14990:	cf 93       	push	r28
   14992:	8c 01       	movw	r16, r24
   14994:	c6 2f       	mov	r28, r22
   14996:	69 01       	movw	r12, r18
   14998:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   1499a:	60 e0       	ldi	r22, 0x00	; 0
   1499c:	fc 01       	movw	r30, r24
   1499e:	80 85       	ldd	r24, Z+8	; 0x08
   149a0:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   149a4:	6c 2f       	mov	r22, r28
   149a6:	f8 01       	movw	r30, r16
   149a8:	80 81       	ld	r24, Z
   149aa:	91 81       	ldd	r25, Z+1	; 0x01
   149ac:	0e 94 cc a3 	call	0x14798	; 0x14798 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:128
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
   149b0:	c2 50       	subi	r28, 0x02	; 2
   149b2:	c2 30       	cpi	r28, 0x02	; 2
   149b4:	60 f4       	brcc	.+24     	; 0x149ce <SRAM_23LC::startCommand(unsigned char, unsigned long)+0x4a>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
    sendAddressBytes(address);
   149b6:	b7 01       	movw	r22, r14
   149b8:	a6 01       	movw	r20, r12
   149ba:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:131
  }
}
   149bc:	cf 91       	pop	r28
   149be:	1f 91       	pop	r17
   149c0:	0f 91       	pop	r16
   149c2:	ff 90       	pop	r15
   149c4:	ef 90       	pop	r14
   149c6:	df 90       	pop	r13
   149c8:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);

  _spi->transfer(command);
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   149ca:	0c 94 97 a4 	jmp	0x1492e	; 0x1492e <SRAM_23LC::sendAddressBytes(unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:131
  }
}
   149ce:	cf 91       	pop	r28
   149d0:	1f 91       	pop	r17
   149d2:	0f 91       	pop	r16
   149d4:	ff 90       	pop	r15
   149d6:	ef 90       	pop	r14
   149d8:	df 90       	pop	r13
   149da:	cf 90       	pop	r12
   149dc:	08 95       	ret

000149de <SRAM_23LC::endCommand()>:
_ZN9SRAM_23LC10endCommandEv():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   149de:	61 e0       	ldi	r22, 0x01	; 1
   149e0:	fc 01       	movw	r30, r24
   149e2:	80 85       	ldd	r24, Z+8	; 0x08
   149e4:	0c 94 7d cd 	jmp	0x19afa	; 0x19afa <digitalWrite>

000149e8 <SRAM_23LC::begin()>:
_ZN9SRAM_23LC5beginEv():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:49




void SRAM_23LC::begin(void)
{
   149e8:	cf 93       	push	r28
   149ea:	df 93       	push	r29
   149ec:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50
  digitalWrite(_chipSelect, HIGH);
   149ee:	61 e0       	ldi	r22, 0x01	; 1
   149f0:	88 85       	ldd	r24, Y+8	; 0x08
   149f2:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
   149f6:	61 e0       	ldi	r22, 0x01	; 1
   149f8:	88 85       	ldd	r24, Y+8	; 0x08
   149fa:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
   149fe:	88 81       	ld	r24, Y
   14a00:	99 81       	ldd	r25, Y+1	; 0x01
   14a02:	0e 94 bb a3 	call	0x14776	; 0x14776 <SoftSPIB::begin()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:55

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
   14a06:	20 e0       	ldi	r18, 0x00	; 0
   14a08:	30 e0       	ldi	r19, 0x00	; 0
   14a0a:	a9 01       	movw	r20, r18
   14a0c:	61 e0       	ldi	r22, 0x01	; 1
   14a0e:	ce 01       	movw	r24, r28
   14a10:	0e 94 c2 a4 	call	0x14984	; 0x14984 <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
   14a14:	60 e4       	ldi	r22, 0x40	; 64
   14a16:	88 81       	ld	r24, Y
   14a18:	99 81       	ldd	r25, Y+1	; 0x01
   14a1a:	0e 94 cc a3 	call	0x14798	; 0x14798 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:57
  endCommand();
   14a1e:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:58
}
   14a20:	df 91       	pop	r29
   14a22:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:57

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
  endCommand();
   14a24:	0c 94 ef a4 	jmp	0x149de	; 0x149de <SRAM_23LC::endCommand()>

00014a28 <SRAM_23LC::readByte(unsigned long)>:
_ZN9SRAM_23LC8readByteEm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:66
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
   14a28:	0f 93       	push	r16
   14a2a:	1f 93       	push	r17
   14a2c:	cf 93       	push	r28
   14a2e:	df 93       	push	r29
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
  if (address >= _capacity) {
   14a30:	fc 01       	movw	r30, r24
   14a32:	04 81       	ldd	r16, Z+4	; 0x04
   14a34:	15 81       	ldd	r17, Z+5	; 0x05
   14a36:	26 81       	ldd	r18, Z+6	; 0x06
   14a38:	37 81       	ldd	r19, Z+7	; 0x07
   14a3a:	40 17       	cp	r20, r16
   14a3c:	51 07       	cpc	r21, r17
   14a3e:	62 07       	cpc	r22, r18
   14a40:	73 07       	cpc	r23, r19
   14a42:	a8 f4       	brcc	.+42     	; 0x14a6e <SRAM_23LC::readByte(unsigned long)+0x46>
   14a44:	9a 01       	movw	r18, r20
   14a46:	ab 01       	movw	r20, r22
   14a48:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:71
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
   14a4a:	63 e0       	ldi	r22, 0x03	; 3
   14a4c:	0e 94 c2 a4 	call	0x14984	; 0x14984 <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   14a50:	6f ef       	ldi	r22, 0xFF	; 255
   14a52:	88 81       	ld	r24, Y
   14a54:	99 81       	ldd	r25, Y+1	; 0x01
   14a56:	0e 94 cc a3 	call	0x14798	; 0x14798 <SoftSPIB::transfer(unsigned char)>
   14a5a:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:73
  endCommand();
   14a5c:	ce 01       	movw	r24, r28
   14a5e:	0e 94 ef a4 	call	0x149de	; 0x149de <SRAM_23LC::endCommand()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76

  return(ret);
}
   14a62:	81 2f       	mov	r24, r17
   14a64:	df 91       	pop	r29
   14a66:	cf 91       	pop	r28
   14a68:	1f 91       	pop	r17
   14a6a:	0f 91       	pop	r16
   14a6c:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   14a6e:	10 e0       	ldi	r17, 0x00	; 0
   14a70:	f8 cf       	rjmp	.-16     	; 0x14a62 <SRAM_23LC::readByte(unsigned long)+0x3a>

00014a72 <SRAM_23LC::writeByte(unsigned long, unsigned char)>:
_ZN9SRAM_23LC9writeByteEmh():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:79

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
   14a72:	cf 92       	push	r12
   14a74:	df 92       	push	r13
   14a76:	ef 92       	push	r14
   14a78:	ff 92       	push	r15
   14a7a:	1f 93       	push	r17
   14a7c:	cf 93       	push	r28
   14a7e:	df 93       	push	r29
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
  if (address >= _capacity) {
   14a80:	fc 01       	movw	r30, r24
   14a82:	c4 80       	ldd	r12, Z+4	; 0x04
   14a84:	d5 80       	ldd	r13, Z+5	; 0x05
   14a86:	e6 80       	ldd	r14, Z+6	; 0x06
   14a88:	f7 80       	ldd	r15, Z+7	; 0x07
   14a8a:	4c 15       	cp	r20, r12
   14a8c:	5d 05       	cpc	r21, r13
   14a8e:	6e 05       	cpc	r22, r14
   14a90:	7f 05       	cpc	r23, r15
   14a92:	c8 f4       	brcc	.+50     	; 0x14ac6 <SRAM_23LC::writeByte(unsigned long, unsigned char)+0x54>
   14a94:	12 2f       	mov	r17, r18
   14a96:	9a 01       	movw	r18, r20
   14a98:	ab 01       	movw	r20, r22
   14a9a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:84
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
   14a9c:	62 e0       	ldi	r22, 0x02	; 2
   14a9e:	0e 94 c2 a4 	call	0x14984	; 0x14984 <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  _spi->transfer(byte);
   14aa2:	61 2f       	mov	r22, r17
   14aa4:	88 81       	ld	r24, Y
   14aa6:	99 81       	ldd	r25, Y+1	; 0x01
   14aa8:	0e 94 cc a3 	call	0x14798	; 0x14798 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:86
  endCommand();
   14aac:	ce 01       	movw	r24, r28
   14aae:	0e 94 ef a4 	call	0x149de	; 0x149de <SRAM_23LC::endCommand()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:87
  return(1);
   14ab2:	81 e0       	ldi	r24, 0x01	; 1
   14ab4:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88
}
   14ab6:	df 91       	pop	r29
   14ab8:	cf 91       	pop	r28
   14aba:	1f 91       	pop	r17
   14abc:	ff 90       	pop	r15
   14abe:	ef 90       	pop	r14
   14ac0:	df 90       	pop	r13
   14ac2:	cf 90       	pop	r12
   14ac4:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   14ac6:	90 e0       	ldi	r25, 0x00	; 0
   14ac8:	80 e0       	ldi	r24, 0x00	; 0
   14aca:	f5 cf       	rjmp	.-22     	; 0x14ab6 <SRAM_23LC::writeByte(unsigned long, unsigned char)+0x44>

00014acc <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
   14acc:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
   14ace:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
   14ad0:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
   14ad2:	80 91 c1 10 	lds	r24, 0x10C1	; 0x8010c1 <SPIClass::initialized>
   14ad6:	81 11       	cpse	r24, r1
   14ad8:	27 c0       	rjmp	.+78     	; 0x14b28 <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
   14ada:	ec ec       	ldi	r30, 0xCC	; 204
   14adc:	f1 e6       	ldi	r31, 0x61	; 97
   14ade:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
   14ae0:	e6 e9       	ldi	r30, 0x96	; 150
   14ae2:	f1 e6       	ldi	r31, 0x61	; 97
   14ae4:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
   14ae6:	e8 2f       	mov	r30, r24
   14ae8:	f0 e0       	ldi	r31, 0x00	; 0
   14aea:	ee 0f       	add	r30, r30
   14aec:	ff 1f       	adc	r31, r31
   14aee:	e6 5e       	subi	r30, 0xE6	; 230
   14af0:	fd 49       	sbci	r31, 0x9D	; 157
   14af2:	a5 91       	lpm	r26, Z+
   14af4:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
   14af6:	ec 91       	ld	r30, X
   14af8:	e9 23       	and	r30, r25
   14afa:	21 f4       	brne	.+8      	; 0x14b04 <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
   14afc:	61 e0       	ldi	r22, 0x01	; 1
   14afe:	88 e0       	ldi	r24, 0x08	; 8
   14b00:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
   14b04:	61 e0       	ldi	r22, 0x01	; 1
   14b06:	88 e0       	ldi	r24, 0x08	; 8
   14b08:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
   14b0c:	8c b5       	in	r24, 0x2c	; 44
   14b0e:	80 61       	ori	r24, 0x10	; 16
   14b10:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
   14b12:	8c b5       	in	r24, 0x2c	; 44
   14b14:	80 64       	ori	r24, 0x40	; 64
   14b16:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
   14b18:	61 e0       	ldi	r22, 0x01	; 1
   14b1a:	89 e0       	ldi	r24, 0x09	; 9
   14b1c:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
   14b20:	61 e0       	ldi	r22, 0x01	; 1
   14b22:	8a e0       	ldi	r24, 0x0A	; 10
   14b24:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
   14b28:	80 91 c1 10 	lds	r24, 0x10C1	; 0x8010c1 <SPIClass::initialized>
   14b2c:	8f 5f       	subi	r24, 0xFF	; 255
   14b2e:	80 93 c1 10 	sts	0x10C1, r24	; 0x8010c1 <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
   14b32:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:64
}
   14b34:	cf 91       	pop	r28
   14b36:	08 95       	ret

00014b38 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)>:
_ZN12EEPROM_CAT25C2EP8SoftSPIBh20_EEPROM_CAT25_Device():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:67
}

void EEPROM_CAT25::disableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WRDI, 0);
  endCommand();
   14b38:	cf 92       	push	r12
   14b3a:	df 92       	push	r13
   14b3c:	ef 92       	push	r14
   14b3e:	ff 92       	push	r15
   14b40:	dc 01       	movw	r26, r24
   14b42:	2e 30       	cpi	r18, 0x0E	; 14
   14b44:	31 05       	cpc	r19, r1
   14b46:	30 f5       	brcc	.+76     	; 0x14b94 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x5c>
   14b48:	f9 01       	movw	r30, r18
   14b4a:	88 27       	eor	r24, r24
   14b4c:	e5 55       	subi	r30, 0x55	; 85
   14b4e:	fa 45       	sbci	r31, 0x5A	; 90
   14b50:	8f 4f       	sbci	r24, 0xFF	; 255
   14b52:	0c 94 bb d3 	jmp	0x1a776	; 0x1a776 <__tablejump2__>
   14b56:	b9 a5       	ldd	r27, Y+41	; 0x29
   14b58:	d8 a5       	ldd	r29, Y+40	; 0x28
   14b5a:	de a5       	ldd	r29, Y+46	; 0x2e
   14b5c:	eb a5       	ldd	r30, Y+43	; 0x2b
   14b5e:	f9 a5       	ldd	r31, Y+41	; 0x29
   14b60:	ff a5       	ldd	r31, Y+47	; 0x2f
   14b62:	05 a6       	std	Z+45, r0	; 0x2d
   14b64:	13 a6       	std	Z+43, r1	; 0x2b
   14b66:	13 a6       	std	Z+43, r1	; 0x2b
   14b68:	19 a6       	std	Y+41, r1	; 0x29
   14b6a:	19 a6       	std	Y+41, r1	; 0x29
   14b6c:	1f a6       	std	Y+47, r1	; 0x2f
   14b6e:	2d a6       	std	Y+45, r2	; 0x2d
   14b70:	32 a6       	std	Z+42, r3	; 0x2a
   14b72:	c1 2c       	mov	r12, r1
   14b74:	d1 2c       	mov	r13, r1
   14b76:	94 e0       	ldi	r25, 0x04	; 4
   14b78:	e9 2e       	mov	r14, r25
   14b7a:	f1 2c       	mov	r15, r1
   14b7c:	14 96       	adiw	r26, 0x04	; 4
   14b7e:	cd 92       	st	X+, r12
   14b80:	dd 92       	st	X+, r13
   14b82:	ed 92       	st	X+, r14
   14b84:	fc 92       	st	X, r15
   14b86:	17 97       	sbiw	r26, 0x07	; 7
   14b88:	80 e0       	ldi	r24, 0x00	; 0
   14b8a:	91 e0       	ldi	r25, 0x01	; 1
   14b8c:	19 96       	adiw	r26, 0x09	; 9
   14b8e:	9c 93       	st	X, r25
   14b90:	8e 93       	st	-X, r24
   14b92:	18 97       	sbiw	r26, 0x08	; 8
   14b94:	13 96       	adiw	r26, 0x03	; 3
   14b96:	3c 93       	st	X, r19
   14b98:	2e 93       	st	-X, r18
   14b9a:	12 97       	sbiw	r26, 0x02	; 2
   14b9c:	11 96       	adiw	r26, 0x01	; 1
   14b9e:	7c 93       	st	X, r23
   14ba0:	6e 93       	st	-X, r22
   14ba2:	1a 96       	adiw	r26, 0x0a	; 10
   14ba4:	4c 93       	st	X, r20
   14ba6:	ff 90       	pop	r15
   14ba8:	ef 90       	pop	r14
   14baa:	df 90       	pop	r13
   14bac:	cf 90       	pop	r12
   14bae:	08 95       	ret
   14bb0:	c1 2c       	mov	r12, r1
   14bb2:	d1 2c       	mov	r13, r1
   14bb4:	82 e0       	ldi	r24, 0x02	; 2
   14bb6:	e8 2e       	mov	r14, r24
   14bb8:	f1 2c       	mov	r15, r1
   14bba:	e0 cf       	rjmp	.-64     	; 0x14b7c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x44>
   14bbc:	c1 2c       	mov	r12, r1
   14bbe:	d1 2c       	mov	r13, r1
   14bc0:	76 01       	movw	r14, r12
   14bc2:	e3 94       	inc	r14
   14bc4:	14 96       	adiw	r26, 0x04	; 4
   14bc6:	cd 92       	st	X+, r12
   14bc8:	dd 92       	st	X+, r13
   14bca:	ed 92       	st	X+, r14
   14bcc:	fc 92       	st	X, r15
   14bce:	17 97       	sbiw	r26, 0x07	; 7
   14bd0:	80 e8       	ldi	r24, 0x80	; 128
   14bd2:	90 e0       	ldi	r25, 0x00	; 0
   14bd4:	db cf       	rjmp	.-74     	; 0x14b8c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   14bd6:	c1 2c       	mov	r12, r1
   14bd8:	e0 e8       	ldi	r30, 0x80	; 128
   14bda:	de 2e       	mov	r13, r30
   14bdc:	e1 2c       	mov	r14, r1
   14bde:	f1 2c       	mov	r15, r1
   14be0:	14 96       	adiw	r26, 0x04	; 4
   14be2:	cd 92       	st	X+, r12
   14be4:	dd 92       	st	X+, r13
   14be6:	ed 92       	st	X+, r14
   14be8:	fc 92       	st	X, r15
   14bea:	17 97       	sbiw	r26, 0x07	; 7
   14bec:	80 e4       	ldi	r24, 0x40	; 64
   14bee:	90 e0       	ldi	r25, 0x00	; 0
   14bf0:	cd cf       	rjmp	.-102    	; 0x14b8c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   14bf2:	c1 2c       	mov	r12, r1
   14bf4:	50 e4       	ldi	r21, 0x40	; 64
   14bf6:	d5 2e       	mov	r13, r21
   14bf8:	e1 2c       	mov	r14, r1
   14bfa:	f1 2c       	mov	r15, r1
   14bfc:	f1 cf       	rjmp	.-30     	; 0x14be0 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xa8>
   14bfe:	c1 2c       	mov	r12, r1
   14c00:	90 e2       	ldi	r25, 0x20	; 32
   14c02:	d9 2e       	mov	r13, r25
   14c04:	e1 2c       	mov	r14, r1
   14c06:	f1 2c       	mov	r15, r1
   14c08:	eb cf       	rjmp	.-42     	; 0x14be0 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xa8>
   14c0a:	c1 2c       	mov	r12, r1
   14c0c:	80 e1       	ldi	r24, 0x10	; 16
   14c0e:	d8 2e       	mov	r13, r24
   14c10:	e1 2c       	mov	r14, r1
   14c12:	f1 2c       	mov	r15, r1
   14c14:	14 96       	adiw	r26, 0x04	; 4
   14c16:	cd 92       	st	X+, r12
   14c18:	dd 92       	st	X+, r13
   14c1a:	ed 92       	st	X+, r14
   14c1c:	fc 92       	st	X, r15
   14c1e:	17 97       	sbiw	r26, 0x07	; 7
   14c20:	80 e2       	ldi	r24, 0x20	; 32
   14c22:	90 e0       	ldi	r25, 0x00	; 0
   14c24:	b3 cf       	rjmp	.-154    	; 0x14b8c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   14c26:	c1 2c       	mov	r12, r1
   14c28:	f8 e0       	ldi	r31, 0x08	; 8
   14c2a:	df 2e       	mov	r13, r31
   14c2c:	e1 2c       	mov	r14, r1
   14c2e:	f1 2c       	mov	r15, r1
   14c30:	f1 cf       	rjmp	.-30     	; 0x14c14 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xdc>
   14c32:	c1 2c       	mov	r12, r1
   14c34:	e4 e0       	ldi	r30, 0x04	; 4
   14c36:	de 2e       	mov	r13, r30
   14c38:	e1 2c       	mov	r14, r1
   14c3a:	f1 2c       	mov	r15, r1
   14c3c:	eb cf       	rjmp	.-42     	; 0x14c14 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xdc>
   14c3e:	c1 2c       	mov	r12, r1
   14c40:	52 e0       	ldi	r21, 0x02	; 2
   14c42:	d5 2e       	mov	r13, r21
   14c44:	e1 2c       	mov	r14, r1
   14c46:	f1 2c       	mov	r15, r1
   14c48:	14 96       	adiw	r26, 0x04	; 4
   14c4a:	cd 92       	st	X+, r12
   14c4c:	dd 92       	st	X+, r13
   14c4e:	ed 92       	st	X+, r14
   14c50:	fc 92       	st	X, r15
   14c52:	17 97       	sbiw	r26, 0x07	; 7
   14c54:	80 e1       	ldi	r24, 0x10	; 16
   14c56:	90 e0       	ldi	r25, 0x00	; 0
   14c58:	99 cf       	rjmp	.-206    	; 0x14b8c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   14c5a:	c1 2c       	mov	r12, r1
   14c5c:	d1 2c       	mov	r13, r1
   14c5e:	76 01       	movw	r14, r12
   14c60:	d3 94       	inc	r13
   14c62:	f2 cf       	rjmp	.-28     	; 0x14c48 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x110>
   14c64:	80 e8       	ldi	r24, 0x80	; 128
   14c66:	c8 2e       	mov	r12, r24
   14c68:	d1 2c       	mov	r13, r1
   14c6a:	e1 2c       	mov	r14, r1
   14c6c:	f1 2c       	mov	r15, r1
   14c6e:	ec cf       	rjmp	.-40     	; 0x14c48 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x110>

00014c70 <EEPROM_CAT25::begin()>:
_ZN12EEPROM_CAT255beginEv():
   14c70:	cf 93       	push	r28
   14c72:	df 93       	push	r29
   14c74:	ec 01       	movw	r28, r24
   14c76:	61 e0       	ldi	r22, 0x01	; 1
   14c78:	8a 85       	ldd	r24, Y+10	; 0x0a
   14c7a:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
   14c7e:	61 e0       	ldi	r22, 0x01	; 1
   14c80:	8a 85       	ldd	r24, Y+10	; 0x0a
   14c82:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   14c86:	88 81       	ld	r24, Y
   14c88:	99 81       	ldd	r25, Y+1	; 0x01
   14c8a:	df 91       	pop	r29
   14c8c:	cf 91       	pop	r28
   14c8e:	0c 94 bb a3 	jmp	0x14776	; 0x14776 <SoftSPIB::begin()>

00014c92 <EEPROM_CAT25::sendAddressBytes(unsigned long)>:
_ZN12EEPROM_CAT2516sendAddressBytesEm():
   14c92:	cf 92       	push	r12
   14c94:	df 92       	push	r13
   14c96:	ef 92       	push	r14
   14c98:	ff 92       	push	r15
   14c9a:	cf 93       	push	r28
   14c9c:	df 93       	push	r29
   14c9e:	ec 01       	movw	r28, r24
   14ca0:	6a 01       	movw	r12, r20
   14ca2:	7b 01       	movw	r14, r22
   14ca4:	8c 81       	ldd	r24, Y+4	; 0x04
   14ca6:	9d 81       	ldd	r25, Y+5	; 0x05
   14ca8:	ae 81       	ldd	r26, Y+6	; 0x06
   14caa:	bf 81       	ldd	r27, Y+7	; 0x07
   14cac:	01 97       	sbiw	r24, 0x01	; 1
   14cae:	a1 40       	sbci	r26, 0x01	; 1
   14cb0:	b1 05       	cpc	r27, r1
   14cb2:	38 f0       	brcs	.+14     	; 0x14cc2 <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x30>
   14cb4:	b7 01       	movw	r22, r14
   14cb6:	88 27       	eor	r24, r24
   14cb8:	99 27       	eor	r25, r25
   14cba:	88 81       	ld	r24, Y
   14cbc:	99 81       	ldd	r25, Y+1	; 0x01
   14cbe:	0e 94 cc a3 	call	0x14798	; 0x14798 <SoftSPIB::transfer(unsigned char)>
   14cc2:	8c 81       	ldd	r24, Y+4	; 0x04
   14cc4:	9d 81       	ldd	r25, Y+5	; 0x05
   14cc6:	ae 81       	ldd	r26, Y+6	; 0x06
   14cc8:	bf 81       	ldd	r27, Y+7	; 0x07
   14cca:	81 30       	cpi	r24, 0x01	; 1
   14ccc:	91 40       	sbci	r25, 0x01	; 1
   14cce:	a1 05       	cpc	r26, r1
   14cd0:	b1 05       	cpc	r27, r1
   14cd2:	60 f0       	brcs	.+24     	; 0x14cec <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x5a>
   14cd4:	8a 81       	ldd	r24, Y+2	; 0x02
   14cd6:	9b 81       	ldd	r25, Y+3	; 0x03
   14cd8:	0b 97       	sbiw	r24, 0x0b	; 11
   14cda:	41 f0       	breq	.+16     	; 0x14cec <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x5a>
   14cdc:	99 27       	eor	r25, r25
   14cde:	8f 2d       	mov	r24, r15
   14ce0:	7e 2d       	mov	r23, r14
   14ce2:	6d 2d       	mov	r22, r13
   14ce4:	88 81       	ld	r24, Y
   14ce6:	99 81       	ldd	r25, Y+1	; 0x01
   14ce8:	0e 94 cc a3 	call	0x14798	; 0x14798 <SoftSPIB::transfer(unsigned char)>
   14cec:	6c 2d       	mov	r22, r12
   14cee:	88 81       	ld	r24, Y
   14cf0:	99 81       	ldd	r25, Y+1	; 0x01
   14cf2:	df 91       	pop	r29
   14cf4:	cf 91       	pop	r28
   14cf6:	ff 90       	pop	r15
   14cf8:	ef 90       	pop	r14
   14cfa:	df 90       	pop	r13
   14cfc:	cf 90       	pop	r12
   14cfe:	0c 94 cc a3 	jmp	0x14798	; 0x14798 <SoftSPIB::transfer(unsigned char)>

00014d02 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>:
_ZN12EEPROM_CAT2512startCommandEhm():
   14d02:	cf 92       	push	r12
   14d04:	df 92       	push	r13
   14d06:	ef 92       	push	r14
   14d08:	ff 92       	push	r15
   14d0a:	0f 93       	push	r16
   14d0c:	1f 93       	push	r17
   14d0e:	cf 93       	push	r28
   14d10:	8c 01       	movw	r16, r24
   14d12:	c6 2f       	mov	r28, r22
   14d14:	69 01       	movw	r12, r18
   14d16:	7a 01       	movw	r14, r20
   14d18:	60 e0       	ldi	r22, 0x00	; 0
   14d1a:	fc 01       	movw	r30, r24
   14d1c:	82 85       	ldd	r24, Z+10	; 0x0a
   14d1e:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
   14d22:	f8 01       	movw	r30, r16
   14d24:	82 81       	ldd	r24, Z+2	; 0x02
   14d26:	93 81       	ldd	r25, Z+3	; 0x03
   14d28:	0b 97       	sbiw	r24, 0x0b	; 11
   14d2a:	71 f4       	brne	.+28     	; 0x14d48 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   14d2c:	ff ef       	ldi	r31, 0xFF	; 255
   14d2e:	cf 16       	cp	r12, r31
   14d30:	d1 04       	cpc	r13, r1
   14d32:	e1 04       	cpc	r14, r1
   14d34:	f1 04       	cpc	r15, r1
   14d36:	41 f0       	breq	.+16     	; 0x14d48 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   14d38:	38 f0       	brcs	.+14     	; 0x14d48 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   14d3a:	c3 30       	cpi	r28, 0x03	; 3
   14d3c:	21 f0       	breq	.+8      	; 0x14d46 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x44>
   14d3e:	c2 30       	cpi	r28, 0x02	; 2
   14d40:	19 f4       	brne	.+6      	; 0x14d48 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   14d42:	ca e0       	ldi	r28, 0x0A	; 10
   14d44:	01 c0       	rjmp	.+2      	; 0x14d48 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   14d46:	cb e0       	ldi	r28, 0x0B	; 11
   14d48:	6c 2f       	mov	r22, r28
   14d4a:	f8 01       	movw	r30, r16
   14d4c:	80 81       	ld	r24, Z
   14d4e:	91 81       	ldd	r25, Z+1	; 0x01
   14d50:	0e 94 cc a3 	call	0x14798	; 0x14798 <SoftSPIB::transfer(unsigned char)>
   14d54:	c2 50       	subi	r28, 0x02	; 2
   14d56:	c2 30       	cpi	r28, 0x02	; 2
   14d58:	60 f4       	brcc	.+24     	; 0x14d72 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x70>
   14d5a:	b7 01       	movw	r22, r14
   14d5c:	a6 01       	movw	r20, r12
   14d5e:	c8 01       	movw	r24, r16
   14d60:	cf 91       	pop	r28
   14d62:	1f 91       	pop	r17
   14d64:	0f 91       	pop	r16
   14d66:	ff 90       	pop	r15
   14d68:	ef 90       	pop	r14
   14d6a:	df 90       	pop	r13
   14d6c:	cf 90       	pop	r12
   14d6e:	0c 94 49 a6 	jmp	0x14c92	; 0x14c92 <EEPROM_CAT25::sendAddressBytes(unsigned long)>
   14d72:	cf 91       	pop	r28
   14d74:	1f 91       	pop	r17
   14d76:	0f 91       	pop	r16
   14d78:	ff 90       	pop	r15
   14d7a:	ef 90       	pop	r14
   14d7c:	df 90       	pop	r13
   14d7e:	cf 90       	pop	r12
   14d80:	08 95       	ret

00014d82 <EEPROM_CAT25::endCommand()>:
_ZN12EEPROM_CAT2510endCommandEv():
   14d82:	61 e0       	ldi	r22, 0x01	; 1
   14d84:	fc 01       	movw	r30, r24
   14d86:	82 85       	ldd	r24, Z+10	; 0x0a
   14d88:	0c 94 7d cd 	jmp	0x19afa	; 0x19afa <digitalWrite>

00014d8c <EEPROM_CAT25::getStatusRegister()>:
_ZN12EEPROM_CAT2517getStatusRegisterEv():
   14d8c:	1f 93       	push	r17
   14d8e:	cf 93       	push	r28
   14d90:	df 93       	push	r29
   14d92:	ec 01       	movw	r28, r24
   14d94:	20 e0       	ldi	r18, 0x00	; 0
   14d96:	30 e0       	ldi	r19, 0x00	; 0
   14d98:	a9 01       	movw	r20, r18
   14d9a:	65 e0       	ldi	r22, 0x05	; 5
   14d9c:	0e 94 81 a6 	call	0x14d02	; 0x14d02 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
   14da0:	6f ef       	ldi	r22, 0xFF	; 255
   14da2:	88 81       	ld	r24, Y
   14da4:	99 81       	ldd	r25, Y+1	; 0x01
   14da6:	0e 94 cc a3 	call	0x14798	; 0x14798 <SoftSPIB::transfer(unsigned char)>
   14daa:	18 2f       	mov	r17, r24
   14dac:	ce 01       	movw	r24, r28
   14dae:	0e 94 c1 a6 	call	0x14d82	; 0x14d82 <EEPROM_CAT25::endCommand()>
   14db2:	81 2f       	mov	r24, r17
   14db4:	df 91       	pop	r29
   14db6:	cf 91       	pop	r28
   14db8:	1f 91       	pop	r17
   14dba:	08 95       	ret

00014dbc <EEPROM_CAT25::isReady()>:
_ZN12EEPROM_CAT257isReadyEv():
   14dbc:	0e 94 c6 a6 	call	0x14d8c	; 0x14d8c <EEPROM_CAT25::getStatusRegister()>
   14dc0:	80 95       	com	r24
   14dc2:	81 70       	andi	r24, 0x01	; 1
   14dc4:	08 95       	ret

00014dc6 <EEPROM_CAT25::enableWrite()>:
_ZN12EEPROM_CAT2511enableWriteEv():
   14dc6:	cf 93       	push	r28
   14dc8:	df 93       	push	r29
   14dca:	ec 01       	movw	r28, r24
   14dcc:	20 e0       	ldi	r18, 0x00	; 0
   14dce:	30 e0       	ldi	r19, 0x00	; 0
   14dd0:	a9 01       	movw	r20, r18
   14dd2:	66 e0       	ldi	r22, 0x06	; 6
   14dd4:	0e 94 81 a6 	call	0x14d02	; 0x14d02 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
   14dd8:	ce 01       	movw	r24, r28
   14dda:	df 91       	pop	r29
   14ddc:	cf 91       	pop	r28
   14dde:	0c 94 c1 a6 	jmp	0x14d82	; 0x14d82 <EEPROM_CAT25::endCommand()>

00014de2 <EEPROM_CAT25::readByte(unsigned long)>:
_ZN12EEPROM_CAT258readByteEm():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:71
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
   14de2:	cf 92       	push	r12
   14de4:	df 92       	push	r13
   14de6:	ef 92       	push	r14
   14de8:	ff 92       	push	r15
   14dea:	1f 93       	push	r17
   14dec:	cf 93       	push	r28
   14dee:	df 93       	push	r29
   14df0:	ec 01       	movw	r28, r24
   14df2:	6a 01       	movw	r12, r20
   14df4:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  if (address >= _capacity) {
   14df6:	8c 81       	ldd	r24, Y+4	; 0x04
   14df8:	9d 81       	ldd	r25, Y+5	; 0x05
   14dfa:	ae 81       	ldd	r26, Y+6	; 0x06
   14dfc:	bf 81       	ldd	r27, Y+7	; 0x07
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:73
    return(0);
   14dfe:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
   14e00:	c8 16       	cp	r12, r24
   14e02:	d9 06       	cpc	r13, r25
   14e04:	ea 06       	cpc	r14, r26
   14e06:	fb 06       	cpc	r15, r27
   14e08:	b8 f4       	brcc	.+46     	; 0x14e38 <EEPROM_CAT25::readByte(unsigned long)+0x56>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:76
    return(0);
  }

  while (!isReady()) {
   14e0a:	ce 01       	movw	r24, r28
   14e0c:	0e 94 de a6 	call	0x14dbc	; 0x14dbc <EEPROM_CAT25::isReady()>
   14e10:	81 11       	cpse	r24, r1
   14e12:	03 c0       	rjmp	.+6      	; 0x14e1a <EEPROM_CAT25::readByte(unsigned long)+0x38>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:77
    yield();
   14e14:	0e 94 d4 cb 	call	0x197a8	; 0x197a8 <yield>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:76
{
  if (address >= _capacity) {
    return(0);
  }

  while (!isReady()) {
   14e18:	f8 cf       	rjmp	.-16     	; 0x14e0a <EEPROM_CAT25::readByte(unsigned long)+0x28>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
   14e1a:	a7 01       	movw	r20, r14
   14e1c:	96 01       	movw	r18, r12
   14e1e:	63 e0       	ldi	r22, 0x03	; 3
   14e20:	ce 01       	movw	r24, r28
   14e22:	0e 94 81 a6 	call	0x14d02	; 0x14d02 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   14e26:	6f ef       	ldi	r22, 0xFF	; 255
   14e28:	88 81       	ld	r24, Y
   14e2a:	99 81       	ldd	r25, Y+1	; 0x01
   14e2c:	0e 94 cc a3 	call	0x14798	; 0x14798 <SoftSPIB::transfer(unsigned char)>
   14e30:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
   14e32:	ce 01       	movw	r24, r28
   14e34:	0e 94 c1 a6 	call	0x14d82	; 0x14d82 <EEPROM_CAT25::endCommand()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:85

  return(ret);
}
   14e38:	81 2f       	mov	r24, r17
   14e3a:	df 91       	pop	r29
   14e3c:	cf 91       	pop	r28
   14e3e:	1f 91       	pop	r17
   14e40:	ff 90       	pop	r15
   14e42:	ef 90       	pop	r14
   14e44:	df 90       	pop	r13
   14e46:	cf 90       	pop	r12
   14e48:	08 95       	ret

00014e4a <EEPROM_CAT25::writeByte(unsigned long, unsigned char)>:
_ZN12EEPROM_CAT259writeByteEmh():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:88

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{
   14e4a:	cf 92       	push	r12
   14e4c:	df 92       	push	r13
   14e4e:	ef 92       	push	r14
   14e50:	ff 92       	push	r15
   14e52:	1f 93       	push	r17
   14e54:	cf 93       	push	r28
   14e56:	df 93       	push	r29
   14e58:	ec 01       	movw	r28, r24
   14e5a:	6a 01       	movw	r12, r20
   14e5c:	7b 01       	movw	r14, r22
   14e5e:	12 2f       	mov	r17, r18
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90

  if (address >= _capacity) {
   14e60:	8c 81       	ldd	r24, Y+4	; 0x04
   14e62:	9d 81       	ldd	r25, Y+5	; 0x05
   14e64:	ae 81       	ldd	r26, Y+6	; 0x06
   14e66:	bf 81       	ldd	r27, Y+7	; 0x07
   14e68:	c8 16       	cp	r12, r24
   14e6a:	d9 06       	cpc	r13, r25
   14e6c:	ea 06       	cpc	r14, r26
   14e6e:	fb 06       	cpc	r15, r27
   14e70:	18 f5       	brcc	.+70     	; 0x14eb8 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x6e>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:95
    return(0);
  }


  while (!isReady()) {
   14e72:	ce 01       	movw	r24, r28
   14e74:	0e 94 de a6 	call	0x14dbc	; 0x14dbc <EEPROM_CAT25::isReady()>
   14e78:	81 11       	cpse	r24, r1
   14e7a:	03 c0       	rjmp	.+6      	; 0x14e82 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x38>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:96
    yield();
   14e7c:	0e 94 d4 cb 	call	0x197a8	; 0x197a8 <yield>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:95
  if (address >= _capacity) {
    return(0);
  }


  while (!isReady()) {
   14e80:	f8 cf       	rjmp	.-16     	; 0x14e72 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x28>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:99
    yield();
  }

  enableWrite();
   14e82:	ce 01       	movw	r24, r28
   14e84:	0e 94 e3 a6 	call	0x14dc6	; 0x14dc6 <EEPROM_CAT25::enableWrite()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
   14e88:	a7 01       	movw	r20, r14
   14e8a:	96 01       	movw	r18, r12
   14e8c:	62 e0       	ldi	r22, 0x02	; 2
   14e8e:	ce 01       	movw	r24, r28
   14e90:	0e 94 81 a6 	call	0x14d02	; 0x14d02 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
   14e94:	61 2f       	mov	r22, r17
   14e96:	88 81       	ld	r24, Y
   14e98:	99 81       	ldd	r25, Y+1	; 0x01
   14e9a:	0e 94 cc a3 	call	0x14798	; 0x14798 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
   14e9e:	ce 01       	movw	r24, r28
   14ea0:	0e 94 c1 a6 	call	0x14d82	; 0x14d82 <EEPROM_CAT25::endCommand()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:104

  return(1);
   14ea4:	81 e0       	ldi	r24, 0x01	; 1
   14ea6:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:105
}
   14ea8:	df 91       	pop	r29
   14eaa:	cf 91       	pop	r28
   14eac:	1f 91       	pop	r17
   14eae:	ff 90       	pop	r15
   14eb0:	ef 90       	pop	r14
   14eb2:	df 90       	pop	r13
   14eb4:	cf 90       	pop	r12
   14eb6:	08 95       	ret
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:91

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
    return(0);
   14eb8:	90 e0       	ldi	r25, 0x00	; 0
   14eba:	80 e0       	ldi	r24, 0x00	; 0
   14ebc:	f5 cf       	rjmp	.-22     	; 0x14ea8 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x5e>

00014ebe <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm():
/home/saric/Arduino/libraries/Ethernet2/src/Dhcp.cpp:518
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
   14ebe:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   14ec0:	00 e0       	ldi	r16, 0x00	; 0
   14ec2:	20 e0       	ldi	r18, 0x00	; 0
   14ec4:	40 e0       	ldi	r20, 0x00	; 0
   14ec6:	60 e0       	ldi	r22, 0x00	; 0
   14ec8:	82 ec       	ldi	r24, 0xC2	; 194
   14eca:	90 e1       	ldi	r25, 0x10	; 16
   14ecc:	0e 94 97 cf 	call	0x19f2e	; 0x19f2e <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm():
/home/saric/Arduino/libraries/Ethernet2/src/Dhcp.cpp:518
   14ed0:	0f 91       	pop	r16
   14ed2:	08 95       	ret

00014ed4 <DNSClient::begin(IPAddress const&)>:
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   14ed4:	fb 01       	movw	r30, r22
   14ed6:	42 81       	ldd	r20, Z+2	; 0x02
   14ed8:	53 81       	ldd	r21, Z+3	; 0x03
   14eda:	64 81       	ldd	r22, Z+4	; 0x04
   14edc:	75 81       	ldd	r23, Z+5	; 0x05
   14ede:	fc 01       	movw	r30, r24
   14ee0:	42 83       	std	Z+2, r20	; 0x02
   14ee2:	53 83       	std	Z+3, r21	; 0x03
   14ee4:	64 83       	std	Z+4, r22	; 0x04
   14ee6:	75 83       	std	Z+5, r23	; 0x05
_ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
   14ee8:	17 82       	std	Z+7, r1	; 0x07
   14eea:	16 82       	std	Z+6, r1	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:55
}
   14eec:	08 95       	ret

00014eee <DNSClient::inet_aton(char const*, IPAddress&)>:
_ZN9DNSClient9inet_atonEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:59


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
   14eee:	fb 01       	movw	r30, r22
   14ef0:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
   14ef2:	8d 91       	ld	r24, X+
   14ef4:	81 11       	cpse	r24, r1
   14ef6:	fd cf       	rjmp	.-6      	; 0x14ef2 <DNSClient::inet_aton(char const*, IPAddress&)+0x4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
   14ef8:	90 e0       	ldi	r25, 0x00	; 0
   14efa:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
   14efc:	70 e0       	ldi	r23, 0x00	; 0
   14efe:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   14f00:	3a e0       	ldi	r19, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
   14f02:	21 91       	ld	r18, Z+
   14f04:	22 23       	and	r18, r18
   14f06:	f9 f0       	breq	.+62     	; 0x14f46 <DNSClient::inet_aton(char const*, IPAddress&)+0x58>
   14f08:	64 30       	cpi	r22, 0x04	; 4
   14f0a:	71 05       	cpc	r23, r1
   14f0c:	54 f5       	brge	.+84     	; 0x14f62 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
   14f0e:	2e 32       	cpi	r18, 0x2E	; 46
   14f10:	71 f4       	brne	.+28     	; 0x14f2e <DNSClient::inet_aton(char const*, IPAddress&)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
   14f12:	8f 3f       	cpi	r24, 0xFF	; 255
   14f14:	91 05       	cpc	r25, r1
   14f16:	09 f0       	breq	.+2      	; 0x14f1a <DNSClient::inet_aton(char const*, IPAddress&)+0x2c>
   14f18:	24 f5       	brge	.+72     	; 0x14f62 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
   14f1a:	da 01       	movw	r26, r20
   14f1c:	a6 0f       	add	r26, r22
   14f1e:	b7 1f       	adc	r27, r23
   14f20:	12 96       	adiw	r26, 0x02	; 2
   14f22:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
   14f24:	6f 5f       	subi	r22, 0xFF	; 255
   14f26:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
   14f28:	90 e0       	ldi	r25, 0x00	; 0
   14f2a:	80 e0       	ldi	r24, 0x00	; 0
   14f2c:	ea cf       	rjmp	.-44     	; 0x14f02 <DNSClient::inet_aton(char const*, IPAddress&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   14f2e:	38 9f       	mul	r19, r24
   14f30:	d0 01       	movw	r26, r0
   14f32:	39 9f       	mul	r19, r25
   14f34:	b0 0d       	add	r27, r0
   14f36:	11 24       	eor	r1, r1
   14f38:	82 2f       	mov	r24, r18
   14f3a:	22 0f       	add	r18, r18
   14f3c:	99 0b       	sbc	r25, r25
   14f3e:	c0 97       	sbiw	r24, 0x30	; 48
   14f40:	8a 0f       	add	r24, r26
   14f42:	9b 1f       	adc	r25, r27
   14f44:	de cf       	rjmp	.-68     	; 0x14f02 <DNSClient::inet_aton(char const*, IPAddress&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
   14f46:	8f 3f       	cpi	r24, 0xFF	; 255
   14f48:	91 05       	cpc	r25, r1
   14f4a:	09 f0       	breq	.+2      	; 0x14f4e <DNSClient::inet_aton(char const*, IPAddress&)+0x60>
   14f4c:	54 f4       	brge	.+20     	; 0x14f62 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
   14f4e:	64 30       	cpi	r22, 0x04	; 4
   14f50:	71 05       	cpc	r23, r1
   14f52:	3c f4       	brge	.+14     	; 0x14f62 <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
   14f54:	46 0f       	add	r20, r22
   14f56:	57 1f       	adc	r21, r23
   14f58:	fa 01       	movw	r30, r20
   14f5a:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:109
            return 1;
   14f5c:	81 e0       	ldi	r24, 0x01	; 1
   14f5e:	90 e0       	ldi	r25, 0x00	; 0
   14f60:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:104
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
   14f62:	90 e0       	ldi	r25, 0x00	; 0
   14f64:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:116
    }
    else
    {
        return 0;
    }
}
   14f66:	08 95       	ret

00014f68 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
   14f68:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   14f6a:	00 e0       	ldi	r16, 0x00	; 0
   14f6c:	20 e0       	ldi	r18, 0x00	; 0
   14f6e:	40 e0       	ldi	r20, 0x00	; 0
   14f70:	60 e0       	ldi	r22, 0x00	; 0
   14f72:	88 ec       	ldi	r24, 0xC8	; 200
   14f74:	90 e1       	ldi	r25, 0x10	; 16
   14f76:	0e 94 97 cf 	call	0x19f2e	; 0x19f2e <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
   14f7a:	0f 91       	pop	r16
   14f7c:	08 95       	ret

00014f7e <DNSClient::BuildRequest(char const*)>:
_ZN9DNSClient12BuildRequestEPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:176

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
   14f7e:	8f 92       	push	r8
   14f80:	9f 92       	push	r9
   14f82:	af 92       	push	r10
   14f84:	bf 92       	push	r11
   14f86:	cf 92       	push	r12
   14f88:	df 92       	push	r13
   14f8a:	ef 92       	push	r14
   14f8c:	ff 92       	push	r15
   14f8e:	0f 93       	push	r16
   14f90:	1f 93       	push	r17
   14f92:	cf 93       	push	r28
   14f94:	df 93       	push	r29
   14f96:	00 d0       	rcall	.+0      	; 0x14f98 <DNSClient::BuildRequest(char const*)+0x1a>
   14f98:	cd b7       	in	r28, 0x3d	; 61
   14f9a:	de b7       	in	r29, 0x3e	; 62
   14f9c:	6c 01       	movw	r12, r24
   14f9e:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
   14fa0:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   14fa4:	f6 01       	movw	r30, r12
   14fa6:	77 83       	std	Z+7, r23	; 0x07
   14fa8:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
   14faa:	86 01       	movw	r16, r12
   14fac:	08 5f       	subi	r16, 0xF8	; 248
   14fae:	1f 4f       	sbci	r17, 0xFF	; 255
   14fb0:	b6 01       	movw	r22, r12
   14fb2:	6a 5f       	subi	r22, 0xFA	; 250
   14fb4:	7f 4f       	sbci	r23, 0xFF	; 255
   14fb6:	42 e0       	ldi	r20, 0x02	; 2
   14fb8:	50 e0       	ldi	r21, 0x00	; 0
   14fba:	c8 01       	movw	r24, r16
   14fbc:	0e 94 54 ad 	call	0x15aa8	; 0x15aa8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
   14fc0:	81 e0       	ldi	r24, 0x01	; 1
   14fc2:	90 e0       	ldi	r25, 0x00	; 0
   14fc4:	9a 83       	std	Y+2, r25	; 0x02
   14fc6:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   14fc8:	42 e0       	ldi	r20, 0x02	; 2
   14fca:	50 e0       	ldi	r21, 0x00	; 0
   14fcc:	be 01       	movw	r22, r28
   14fce:	6f 5f       	subi	r22, 0xFF	; 255
   14fd0:	7f 4f       	sbci	r23, 0xFF	; 255
   14fd2:	c8 01       	movw	r24, r16
   14fd4:	0e 94 54 ad 	call	0x15aa8	; 0x15aa8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
   14fd8:	80 e0       	ldi	r24, 0x00	; 0
   14fda:	91 e0       	ldi	r25, 0x01	; 1
   14fdc:	9a 83       	std	Y+2, r25	; 0x02
   14fde:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   14fe0:	42 e0       	ldi	r20, 0x02	; 2
   14fe2:	50 e0       	ldi	r21, 0x00	; 0
   14fe4:	be 01       	movw	r22, r28
   14fe6:	6f 5f       	subi	r22, 0xFF	; 255
   14fe8:	7f 4f       	sbci	r23, 0xFF	; 255
   14fea:	c8 01       	movw	r24, r16
   14fec:	0e 94 54 ad 	call	0x15aa8	; 0x15aa8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
   14ff0:	1a 82       	std	Y+2, r1	; 0x02
   14ff2:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   14ff4:	42 e0       	ldi	r20, 0x02	; 2
   14ff6:	50 e0       	ldi	r21, 0x00	; 0
   14ff8:	be 01       	movw	r22, r28
   14ffa:	6f 5f       	subi	r22, 0xFF	; 255
   14ffc:	7f 4f       	sbci	r23, 0xFF	; 255
   14ffe:	c8 01       	movw	r24, r16
   15000:	0e 94 54 ad 	call	0x15aa8	; 0x15aa8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15004:	42 e0       	ldi	r20, 0x02	; 2
   15006:	50 e0       	ldi	r21, 0x00	; 0
   15008:	be 01       	movw	r22, r28
   1500a:	6f 5f       	subi	r22, 0xFF	; 255
   1500c:	7f 4f       	sbci	r23, 0xFF	; 255
   1500e:	c8 01       	movw	r24, r16
   15010:	0e 94 54 ad 	call	0x15aa8	; 0x15aa8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15014:	42 e0       	ldi	r20, 0x02	; 2
   15016:	50 e0       	ldi	r21, 0x00	; 0
   15018:	be 01       	movw	r22, r28
   1501a:	6f 5f       	subi	r22, 0xFF	; 255
   1501c:	7f 4f       	sbci	r23, 0xFF	; 255
   1501e:	c8 01       	movw	r24, r16
   15020:	0e 94 54 ad 	call	0x15aa8	; 0x15aa8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
   15024:	67 01       	movw	r12, r14
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
   15026:	f7 01       	movw	r30, r14
   15028:	80 81       	ld	r24, Z
   1502a:	88 23       	and	r24, r24
   1502c:	01 f1       	breq	.+64     	; 0x1506e <DNSClient::BuildRequest(char const*)+0xf0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
   1502e:	76 01       	movw	r14, r12
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
   15030:	f7 01       	movw	r30, r14
   15032:	81 91       	ld	r24, Z+
   15034:	5f 01       	movw	r10, r30
   15036:	88 23       	and	r24, r24
   15038:	11 f0       	breq	.+4      	; 0x1503e <DNSClient::BuildRequest(char const*)+0xc0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224 (discriminator 1)
   1503a:	8e 32       	cpi	r24, 0x2E	; 46
   1503c:	b1 f4       	brne	.+44     	; 0x1506a <DNSClient::BuildRequest(char const*)+0xec>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
   1503e:	47 01       	movw	r8, r14
   15040:	8c 18       	sub	r8, r12
   15042:	9d 08       	sbc	r9, r13
   15044:	18 14       	cp	r1, r8
   15046:	19 04       	cpc	r1, r9
   15048:	74 f4       	brge	.+28     	; 0x15066 <DNSClient::BuildRequest(char const*)+0xe8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
   1504a:	8b 82       	std	Y+3, r8	; 0x03
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
   1504c:	41 e0       	ldi	r20, 0x01	; 1
   1504e:	50 e0       	ldi	r21, 0x00	; 0
   15050:	be 01       	movw	r22, r28
   15052:	6d 5f       	subi	r22, 0xFD	; 253
   15054:	7f 4f       	sbci	r23, 0xFF	; 255
   15056:	c8 01       	movw	r24, r16
   15058:	0e 94 54 ad 	call	0x15aa8	; 0x15aa8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
   1505c:	a4 01       	movw	r20, r8
   1505e:	b6 01       	movw	r22, r12
   15060:	c8 01       	movw	r24, r16
   15062:	0e 94 54 ad 	call	0x15aa8	; 0x15aa8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
   15066:	65 01       	movw	r12, r10
   15068:	de cf       	rjmp	.-68     	; 0x15026 <DNSClient::BuildRequest(char const*)+0xa8>
   1506a:	75 01       	movw	r14, r10
   1506c:	e1 cf       	rjmp	.-62     	; 0x15030 <DNSClient::BuildRequest(char const*)+0xb2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
   1506e:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
   15070:	41 e0       	ldi	r20, 0x01	; 1
   15072:	50 e0       	ldi	r21, 0x00	; 0
   15074:	be 01       	movw	r22, r28
   15076:	6d 5f       	subi	r22, 0xFD	; 253
   15078:	7f 4f       	sbci	r23, 0xFF	; 255
   1507a:	c8 01       	movw	r24, r16
   1507c:	0e 94 54 ad 	call	0x15aa8	; 0x15aa8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
   15080:	e1 2c       	mov	r14, r1
   15082:	ff 24       	eor	r15, r15
   15084:	f3 94       	inc	r15
   15086:	fa 82       	std	Y+2, r15	; 0x02
   15088:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   1508a:	42 e0       	ldi	r20, 0x02	; 2
   1508c:	50 e0       	ldi	r21, 0x00	; 0
   1508e:	be 01       	movw	r22, r28
   15090:	6f 5f       	subi	r22, 0xFF	; 255
   15092:	7f 4f       	sbci	r23, 0xFF	; 255
   15094:	c8 01       	movw	r24, r16
   15096:	0e 94 54 ad 	call	0x15aa8	; 0x15aa8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
   1509a:	fa 82       	std	Y+2, r15	; 0x02
   1509c:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   1509e:	42 e0       	ldi	r20, 0x02	; 2
   150a0:	50 e0       	ldi	r21, 0x00	; 0
   150a2:	be 01       	movw	r22, r28
   150a4:	6f 5f       	subi	r22, 0xFF	; 255
   150a6:	7f 4f       	sbci	r23, 0xFF	; 255
   150a8:	c8 01       	movw	r24, r16
   150aa:	0e 94 54 ad 	call	0x15aa8	; 0x15aa8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:252
    // Success!  Everything buffered okay
    return 1;
}
   150ae:	81 e0       	ldi	r24, 0x01	; 1
   150b0:	90 e0       	ldi	r25, 0x00	; 0
   150b2:	0f 90       	pop	r0
   150b4:	0f 90       	pop	r0
   150b6:	0f 90       	pop	r0
   150b8:	df 91       	pop	r29
   150ba:	cf 91       	pop	r28
   150bc:	1f 91       	pop	r17
   150be:	0f 91       	pop	r16
   150c0:	ff 90       	pop	r15
   150c2:	ef 90       	pop	r14
   150c4:	df 90       	pop	r13
   150c6:	cf 90       	pop	r12
   150c8:	bf 90       	pop	r11
   150ca:	af 90       	pop	r10
   150cc:	9f 90       	pop	r9
   150ce:	8f 90       	pop	r8
   150d0:	08 95       	ret

000150d2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)>:
_ZN9DNSClient15ProcessResponseEjR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:256


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
   150d2:	2f 92       	push	r2
   150d4:	3f 92       	push	r3
   150d6:	4f 92       	push	r4
   150d8:	5f 92       	push	r5
   150da:	6f 92       	push	r6
   150dc:	7f 92       	push	r7
   150de:	8f 92       	push	r8
   150e0:	9f 92       	push	r9
   150e2:	af 92       	push	r10
   150e4:	bf 92       	push	r11
   150e6:	cf 92       	push	r12
   150e8:	df 92       	push	r13
   150ea:	ef 92       	push	r14
   150ec:	ff 92       	push	r15
   150ee:	0f 93       	push	r16
   150f0:	1f 93       	push	r17
   150f2:	cf 93       	push	r28
   150f4:	df 93       	push	r29
   150f6:	cd b7       	in	r28, 0x3d	; 61
   150f8:	de b7       	in	r29, 0x3e	; 62
   150fa:	63 97       	sbiw	r28, 0x13	; 19
   150fc:	0f b6       	in	r0, 0x3f	; 63
   150fe:	f8 94       	cli
   15100:	de bf       	out	0x3e, r29	; 62
   15102:	0f be       	out	0x3f, r0	; 63
   15104:	cd bf       	out	0x3d, r28	; 61
   15106:	7c 01       	movw	r14, r24
   15108:	2b 01       	movw	r4, r22
   1510a:	1a 01       	movw	r2, r20
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
    uint32_t startTime = millis();
   1510c:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   15110:	4b 01       	movw	r8, r22
   15112:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   15114:	87 01       	movw	r16, r14
   15116:	08 5f       	subi	r16, 0xF8	; 248
   15118:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
   1511a:	71 2c       	mov	r7, r1
   1511c:	61 2c       	mov	r6, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   1511e:	c8 01       	movw	r24, r16
   15120:	0e 94 c9 ad 	call	0x15b92	; 0x15b92 <EthernetUDP::parsePacket()>
   15124:	18 16       	cp	r1, r24
   15126:	19 06       	cpc	r1, r25
   15128:	9c f0       	brlt	.+38     	; 0x15150 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x7e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
   1512a:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   1512e:	68 19       	sub	r22, r8
   15130:	79 09       	sbc	r23, r9
   15132:	8a 09       	sbc	r24, r10
   15134:	9b 09       	sbc	r25, r11
   15136:	46 16       	cp	r4, r22
   15138:	57 06       	cpc	r5, r23
   1513a:	68 06       	cpc	r6, r24
   1513c:	79 06       	cpc	r7, r25
   1513e:	08 f4       	brcc	.+2      	; 0x15142 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x70>
   15140:	31 c1       	rjmp	.+610    	; 0x153a4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2d2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
   15142:	62 e3       	ldi	r22, 0x32	; 50
   15144:	70 e0       	ldi	r23, 0x00	; 0
   15146:	80 e0       	ldi	r24, 0x00	; 0
   15148:	90 e0       	ldi	r25, 0x00	; 0
   1514a:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   1514e:	e7 cf       	rjmp	.-50     	; 0x1511e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x4c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
   15150:	f7 01       	movw	r30, r14
   15152:	42 81       	ldd	r20, Z+2	; 0x02
   15154:	53 81       	ldd	r21, Z+3	; 0x03
   15156:	64 81       	ldd	r22, Z+4	; 0x04
   15158:	75 81       	ldd	r23, Z+5	; 0x05
   1515a:	81 8d       	ldd	r24, Z+25	; 0x19
   1515c:	92 8d       	ldd	r25, Z+26	; 0x1a
   1515e:	a3 8d       	ldd	r26, Z+27	; 0x1b
   15160:	b4 8d       	ldd	r27, Z+28	; 0x1c
   15162:	48 17       	cp	r20, r24
   15164:	59 07       	cpc	r21, r25
   15166:	6a 07       	cpc	r22, r26
   15168:	7b 07       	cpc	r23, r27
   1516a:	09 f0       	breq	.+2      	; 0x1516e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x9c>
   1516c:	1f c1       	rjmp	.+574    	; 0x153ac <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2da>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271 (discriminator 2)
   1516e:	85 8d       	ldd	r24, Z+29	; 0x1d
   15170:	96 8d       	ldd	r25, Z+30	; 0x1e
   15172:	c5 97       	sbiw	r24, 0x35	; 53
   15174:	09 f0       	breq	.+2      	; 0x15178 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xa6>
   15176:	1a c1       	rjmp	.+564    	; 0x153ac <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2da>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
   15178:	c8 01       	movw	r24, r16
   1517a:	0e 94 07 ad 	call	0x15a0e	; 0x15a0e <EthernetUDP::available()>
   1517e:	0c 97       	sbiw	r24, 0x0c	; 12
   15180:	0c f4       	brge	.+2      	; 0x15184 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xb2>
   15182:	19 c1       	rjmp	.+562    	; 0x153b6 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2e4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
   15184:	4c e0       	ldi	r20, 0x0C	; 12
   15186:	50 e0       	ldi	r21, 0x00	; 0
   15188:	be 01       	movw	r22, r28
   1518a:	6f 5f       	subi	r22, 0xFF	; 255
   1518c:	7f 4f       	sbci	r23, 0xFF	; 255
   1518e:	c8 01       	movw	r24, r16
   15190:	0e 94 92 ad 	call	0x15b24	; 0x15b24 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
   15194:	8b 81       	ldd	r24, Y+3	; 0x03
   15196:	9c 81       	ldd	r25, Y+4	; 0x04
   15198:	98 27       	eor	r25, r24
   1519a:	89 27       	eor	r24, r25
   1519c:	98 27       	eor	r25, r24
   1519e:	9a 8b       	std	Y+18, r25	; 0x12
   151a0:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
   151a2:	f7 01       	movw	r30, r14
   151a4:	46 81       	ldd	r20, Z+6	; 0x06
   151a6:	57 81       	ldd	r21, Z+7	; 0x07
   151a8:	29 81       	ldd	r18, Y+1	; 0x01
   151aa:	3a 81       	ldd	r19, Y+2	; 0x02
   151ac:	42 17       	cp	r20, r18
   151ae:	53 07       	cpc	r21, r19
   151b0:	11 f4       	brne	.+4      	; 0x151b6 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xe4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287 (discriminator 1)
   151b2:	97 fd       	sbrc	r25, 7
   151b4:	21 c0       	rjmp	.+66     	; 0x151f8 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
   151b6:	c8 01       	movw	r24, r16
   151b8:	0e 94 21 ad 	call	0x15a42	; 0x15a42 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
   151bc:	7c ef       	ldi	r23, 0xFC	; 252
   151be:	e7 2e       	mov	r14, r23
   151c0:	ff 24       	eor	r15, r15
   151c2:	fa 94       	dec	r15
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
   151c4:	c7 01       	movw	r24, r14
   151c6:	63 96       	adiw	r28, 0x13	; 19
   151c8:	0f b6       	in	r0, 0x3f	; 63
   151ca:	f8 94       	cli
   151cc:	de bf       	out	0x3e, r29	; 62
   151ce:	0f be       	out	0x3f, r0	; 63
   151d0:	cd bf       	out	0x3d, r28	; 61
   151d2:	df 91       	pop	r29
   151d4:	cf 91       	pop	r28
   151d6:	1f 91       	pop	r17
   151d8:	0f 91       	pop	r16
   151da:	ff 90       	pop	r15
   151dc:	ef 90       	pop	r14
   151de:	df 90       	pop	r13
   151e0:	cf 90       	pop	r12
   151e2:	bf 90       	pop	r11
   151e4:	af 90       	pop	r10
   151e6:	9f 90       	pop	r9
   151e8:	8f 90       	pop	r8
   151ea:	7f 90       	pop	r7
   151ec:	6f 90       	pop	r6
   151ee:	5f 90       	pop	r5
   151f0:	4f 90       	pop	r4
   151f2:	3f 90       	pop	r3
   151f4:	2f 90       	pop	r2
   151f6:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
   151f8:	8f 70       	andi	r24, 0x0F	; 15
   151fa:	92 70       	andi	r25, 0x02	; 2
   151fc:	89 2b       	or	r24, r25
   151fe:	41 f0       	breq	.+16     	; 0x15210 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x13e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
   15200:	c8 01       	movw	r24, r16
   15202:	0e 94 21 ad 	call	0x15a42	; 0x15a42 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
   15206:	6b ef       	ldi	r22, 0xFB	; 251
   15208:	e6 2e       	mov	r14, r22
   1520a:	ff 24       	eor	r15, r15
   1520c:	fa 94       	dec	r15
   1520e:	da cf       	rjmp	.-76     	; 0x151c4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
   15210:	cf 80       	ldd	r12, Y+7	; 0x07
   15212:	d8 84       	ldd	r13, Y+8	; 0x08
   15214:	dc 24       	eor	r13, r12
   15216:	cd 24       	eor	r12, r13
   15218:	dc 24       	eor	r13, r12
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   1521a:	f1 2c       	mov	r15, r1
   1521c:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
   1521e:	c1 14       	cp	r12, r1
   15220:	d1 04       	cpc	r13, r1
   15222:	d1 f4       	brne	.+52     	; 0x15258 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x186>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
   15224:	c8 01       	movw	r24, r16
   15226:	0e 94 21 ad 	call	0x15a42	; 0x15a42 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
   1522a:	5a ef       	ldi	r21, 0xFA	; 250
   1522c:	e5 2e       	mov	r14, r21
   1522e:	ff 24       	eor	r15, r15
   15230:	fa 94       	dec	r15
   15232:	c8 cf       	rjmp	.-112    	; 0x151c4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
   15234:	8d 85       	ldd	r24, Y+13	; 0x0d
   15236:	81 11       	cpse	r24, r1
   15238:	17 c0       	rjmp	.+46     	; 0x15268 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x196>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   1523a:	c8 01       	movw	r24, r16
   1523c:	0e 94 68 ad 	call	0x15ad0	; 0x15ad0 <EthernetUDP::read()>
   15240:	c8 01       	movw	r24, r16
   15242:	0e 94 68 ad 	call	0x15ad0	; 0x15ad0 <EthernetUDP::read()>
   15246:	c8 01       	movw	r24, r16
   15248:	0e 94 68 ad 	call	0x15ad0	; 0x15ad0 <EthernetUDP::read()>
   1524c:	c8 01       	movw	r24, r16
   1524e:	0e 94 68 ad 	call	0x15ad0	; 0x15ad0 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   15252:	ff ef       	ldi	r31, 0xFF	; 255
   15254:	ef 1a       	sub	r14, r31
   15256:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313 (discriminator 1)
   15258:	8d 81       	ldd	r24, Y+5	; 0x05
   1525a:	9e 81       	ldd	r25, Y+6	; 0x06
   1525c:	98 27       	eor	r25, r24
   1525e:	89 27       	eor	r24, r25
   15260:	98 27       	eor	r25, r24
   15262:	e8 16       	cp	r14, r24
   15264:	f9 06       	cpc	r15, r25
   15266:	a8 f4       	brcc	.+42     	; 0x15292 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   15268:	41 e0       	ldi	r20, 0x01	; 1
   1526a:	50 e0       	ldi	r21, 0x00	; 0
   1526c:	be 01       	movw	r22, r28
   1526e:	63 5f       	subi	r22, 0xF3	; 243
   15270:	7f 4f       	sbci	r23, 0xFF	; 255
   15272:	c8 01       	movw	r24, r16
   15274:	0e 94 92 ad 	call	0x15b24	; 0x15b24 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
   15278:	8d 85       	ldd	r24, Y+13	; 0x0d
   1527a:	88 23       	and	r24, r24
   1527c:	d9 f2       	breq	.-74     	; 0x15234 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x162>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
   1527e:	8d 85       	ldd	r24, Y+13	; 0x0d
   15280:	9f ef       	ldi	r25, 0xFF	; 255
   15282:	98 0f       	add	r25, r24
   15284:	9d 87       	std	Y+13, r25	; 0x0d
   15286:	88 23       	and	r24, r24
   15288:	a9 f2       	breq	.-86     	; 0x15234 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x162>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
   1528a:	c8 01       	movw	r24, r16
   1528c:	0e 94 68 ad 	call	0x15ad0	; 0x15ad0 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
   15290:	f6 cf       	rjmp	.-20     	; 0x1527e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1ac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   15292:	b1 2c       	mov	r11, r1
   15294:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   15296:	41 e0       	ldi	r20, 0x01	; 1
   15298:	50 e0       	ldi	r21, 0x00	; 0
   1529a:	be 01       	movw	r22, r28
   1529c:	6d 5e       	subi	r22, 0xED	; 237
   1529e:	7f 4f       	sbci	r23, 0xFF	; 255
   152a0:	c8 01       	movw	r24, r16
   152a2:	0e 94 92 ad 	call	0x15b24	; 0x15b24 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
   152a6:	8b 89       	ldd	r24, Y+19	; 0x13
   152a8:	98 2f       	mov	r25, r24
   152aa:	90 7c       	andi	r25, 0xC0	; 192
   152ac:	61 f4       	brne	.+24     	; 0x152c6 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1f4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
   152ae:	88 23       	and	r24, r24
   152b0:	89 f0       	breq	.+34     	; 0x152d4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x202>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
   152b2:	8b 89       	ldd	r24, Y+19	; 0x13
   152b4:	9f ef       	ldi	r25, 0xFF	; 255
   152b6:	98 0f       	add	r25, r24
   152b8:	9b 8b       	std	Y+19, r25	; 0x13
   152ba:	88 23       	and	r24, r24
   152bc:	41 f0       	breq	.+16     	; 0x152ce <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1fc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
   152be:	c8 01       	movw	r24, r16
   152c0:	0e 94 68 ad 	call	0x15ad0	; 0x15ad0 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
   152c4:	f6 cf       	rjmp	.-20     	; 0x152b2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1e0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
   152c6:	c8 01       	movw	r24, r16
   152c8:	0e 94 68 ad 	call	0x15ad0	; 0x15ad0 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
   152cc:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
   152ce:	8b 89       	ldd	r24, Y+19	; 0x13
   152d0:	81 11       	cpse	r24, r1
   152d2:	e1 cf       	rjmp	.-62     	; 0x15296 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
   152d4:	42 e0       	ldi	r20, 0x02	; 2
   152d6:	50 e0       	ldi	r21, 0x00	; 0
   152d8:	be 01       	movw	r22, r28
   152da:	61 5f       	subi	r22, 0xF1	; 241
   152dc:	7f 4f       	sbci	r23, 0xFF	; 255
   152de:	c8 01       	movw	r24, r16
   152e0:	0e 94 92 ad 	call	0x15b24	; 0x15b24 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
   152e4:	42 e0       	ldi	r20, 0x02	; 2
   152e6:	50 e0       	ldi	r21, 0x00	; 0
   152e8:	be 01       	movw	r22, r28
   152ea:	63 5f       	subi	r22, 0xF3	; 243
   152ec:	7f 4f       	sbci	r23, 0xFF	; 255
   152ee:	c8 01       	movw	r24, r16
   152f0:	0e 94 92 ad 	call	0x15b24	; 0x15b24 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   152f4:	c8 01       	movw	r24, r16
   152f6:	0e 94 68 ad 	call	0x15ad0	; 0x15ad0 <EthernetUDP::read()>
   152fa:	c8 01       	movw	r24, r16
   152fc:	0e 94 68 ad 	call	0x15ad0	; 0x15ad0 <EthernetUDP::read()>
   15300:	c8 01       	movw	r24, r16
   15302:	0e 94 68 ad 	call	0x15ad0	; 0x15ad0 <EthernetUDP::read()>
   15306:	c8 01       	movw	r24, r16
   15308:	0e 94 68 ad 	call	0x15ad0	; 0x15ad0 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
   1530c:	42 e0       	ldi	r20, 0x02	; 2
   1530e:	50 e0       	ldi	r21, 0x00	; 0
   15310:	be 01       	movw	r22, r28
   15312:	6f 5e       	subi	r22, 0xEF	; 239
   15314:	7f 4f       	sbci	r23, 0xFF	; 255
   15316:	c8 01       	movw	r24, r16
   15318:	0e 94 92 ad 	call	0x15b24	; 0x15b24 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
   1531c:	8f 85       	ldd	r24, Y+15	; 0x0f
   1531e:	98 89       	ldd	r25, Y+16	; 0x10
   15320:	81 15       	cp	r24, r1
   15322:	91 40       	sbci	r25, 0x01	; 1
   15324:	f9 f4       	brne	.+62     	; 0x15364 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x292>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395 (discriminator 1)
   15326:	ed 84       	ldd	r14, Y+13	; 0x0d
   15328:	fe 84       	ldd	r15, Y+14	; 0x0e
   1532a:	fe 24       	eor	r15, r14
   1532c:	ef 24       	eor	r14, r15
   1532e:	fe 24       	eor	r15, r14
   15330:	81 e0       	ldi	r24, 0x01	; 1
   15332:	e8 16       	cp	r14, r24
   15334:	f1 04       	cpc	r15, r1
   15336:	b1 f4       	brne	.+44     	; 0x15364 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x292>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
   15338:	89 89       	ldd	r24, Y+17	; 0x11
   1533a:	9a 89       	ldd	r25, Y+18	; 0x12
   1533c:	81 15       	cp	r24, r1
   1533e:	94 40       	sbci	r25, 0x04	; 4
   15340:	41 f0       	breq	.+16     	; 0x15352 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x280>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
   15342:	c8 01       	movw	r24, r16
   15344:	0e 94 21 ad 	call	0x15a42	; 0x15a42 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
   15348:	47 ef       	ldi	r20, 0xF7	; 247
   1534a:	e4 2e       	mov	r14, r20
   1534c:	ff 24       	eor	r15, r15
   1534e:	fa 94       	dec	r15
   15350:	39 cf       	rjmp	.-398    	; 0x151c4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   15352:	b1 01       	movw	r22, r2
   15354:	6e 5f       	subi	r22, 0xFE	; 254
   15356:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN9DNSClient15ProcessResponseEjR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
   15358:	44 e0       	ldi	r20, 0x04	; 4
   1535a:	50 e0       	ldi	r21, 0x00	; 0
   1535c:	c8 01       	movw	r24, r16
   1535e:	0e 94 92 ad 	call	0x15b24	; 0x15b24 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:405
            return SUCCESS;
   15362:	30 cf       	rjmp	.-416    	; 0x151c4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
   15364:	f1 2c       	mov	r15, r1
   15366:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410 (discriminator 3)
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   15368:	89 89       	ldd	r24, Y+17	; 0x11
   1536a:	9a 89       	ldd	r25, Y+18	; 0x12
   1536c:	98 27       	eor	r25, r24
   1536e:	89 27       	eor	r24, r25
   15370:	98 27       	eor	r25, r24
   15372:	e8 16       	cp	r14, r24
   15374:	f9 06       	cpc	r15, r25
   15376:	38 f4       	brcc	.+14     	; 0x15386 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2b4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412 (discriminator 2)
            {
                iUdp.read(); // we don't care about the returned byte
   15378:	c8 01       	movw	r24, r16
   1537a:	0e 94 68 ad 	call	0x15ad0	; 0x15ad0 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410 (discriminator 2)
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   1537e:	ff ef       	ldi	r31, 0xFF	; 255
   15380:	ef 1a       	sub	r14, r31
   15382:	ff 0a       	sbc	r15, r31
   15384:	f1 cf       	rjmp	.-30     	; 0x15368 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x296>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   15386:	2f ef       	ldi	r18, 0xFF	; 255
   15388:	a2 1a       	sub	r10, r18
   1538a:	b2 0a       	sbc	r11, r18
   1538c:	ca 14       	cp	r12, r10
   1538e:	db 04       	cpc	r13, r11
   15390:	09 f0       	breq	.+2      	; 0x15394 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2c2>
   15392:	81 cf       	rjmp	.-254    	; 0x15296 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
   15394:	c8 01       	movw	r24, r16
   15396:	0e 94 21 ad 	call	0x15a42	; 0x15a42 <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
   1539a:	36 ef       	ldi	r19, 0xF6	; 246
   1539c:	e3 2e       	mov	r14, r19
   1539e:	ff 24       	eor	r15, r15
   153a0:	fa 94       	dec	r15
   153a2:	10 cf       	rjmp	.-480    	; 0x151c4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
   153a4:	ee 24       	eor	r14, r14
   153a6:	ea 94       	dec	r14
   153a8:	fe 2c       	mov	r15, r14
   153aa:	0c cf       	rjmp	.-488    	; 0x151c4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
   153ac:	9e ef       	ldi	r25, 0xFE	; 254
   153ae:	e9 2e       	mov	r14, r25
   153b0:	ff 24       	eor	r15, r15
   153b2:	fa 94       	dec	r15
   153b4:	07 cf       	rjmp	.-498    	; 0x151c4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
   153b6:	8d ef       	ldi	r24, 0xFD	; 253
   153b8:	e8 2e       	mov	r14, r24
   153ba:	ff 24       	eor	r15, r15
   153bc:	fa 94       	dec	r15
   153be:	02 cf       	rjmp	.-508    	; 0x151c4 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>

000153c0 <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
   153c0:	8f 92       	push	r8
   153c2:	9f 92       	push	r9
   153c4:	af 92       	push	r10
   153c6:	bf 92       	push	r11
   153c8:	cf 92       	push	r12
   153ca:	df 92       	push	r13
   153cc:	ef 92       	push	r14
   153ce:	ff 92       	push	r15
   153d0:	0f 93       	push	r16
   153d2:	1f 93       	push	r17
   153d4:	cf 93       	push	r28
   153d6:	df 93       	push	r29
   153d8:	00 d0       	rcall	.+0      	; 0x153da <DNSClient::getHostByName(char const*, IPAddress&)+0x1a>
   153da:	00 d0       	rcall	.+0      	; 0x153dc <DNSClient::getHostByName(char const*, IPAddress&)+0x1c>
   153dc:	cd b7       	in	r28, 0x3d	; 61
   153de:	de b7       	in	r29, 0x3e	; 62
   153e0:	7c 01       	movw	r14, r24
   153e2:	4b 01       	movw	r8, r22
   153e4:	5a 01       	movw	r10, r20
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:123
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
   153e6:	0e 94 77 a7 	call	0x14eee	; 0x14eee <DNSClient::inet_aton(char const*, IPAddress&)>
   153ea:	8c 01       	movw	r16, r24
   153ec:	89 2b       	or	r24, r25
   153ee:	09 f0       	breq	.+2      	; 0x153f2 <DNSClient::getHostByName(char const*, IPAddress&)+0x32>
   153f0:	6d c0       	rjmp	.+218    	; 0x154cc <DNSClient::getHostByName(char const*, IPAddress&)+0x10c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
   153f2:	f7 01       	movw	r30, r14
   153f4:	42 81       	ldd	r20, Z+2	; 0x02
   153f6:	53 81       	ldd	r21, Z+3	; 0x03
   153f8:	64 81       	ldd	r22, Z+4	; 0x04
   153fa:	75 81       	ldd	r23, Z+5	; 0x05
   153fc:	80 91 ca 10 	lds	r24, 0x10CA	; 0x8010ca <INADDR_NONE+0x2>
   15400:	90 91 cb 10 	lds	r25, 0x10CB	; 0x8010cb <INADDR_NONE+0x3>
   15404:	a0 91 cc 10 	lds	r26, 0x10CC	; 0x8010cc <INADDR_NONE+0x4>
   15408:	b0 91 cd 10 	lds	r27, 0x10CD	; 0x8010cd <INADDR_NONE+0x5>
   1540c:	48 17       	cp	r20, r24
   1540e:	59 07       	cpc	r21, r25
   15410:	6a 07       	cpc	r22, r26
   15412:	7b 07       	cpc	r23, r27
   15414:	09 f4       	brne	.+2      	; 0x15418 <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
   15416:	5d c0       	rjmp	.+186    	; 0x154d2 <DNSClient::getHostByName(char const*, IPAddress&)+0x112>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
   15418:	67 01       	movw	r12, r14
   1541a:	f8 e0       	ldi	r31, 0x08	; 8
   1541c:	cf 0e       	add	r12, r31
   1541e:	d1 1c       	adc	r13, r1
   15420:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   15424:	6f 70       	andi	r22, 0x0F	; 15
   15426:	77 27       	eor	r23, r23
   15428:	7c 5f       	subi	r23, 0xFC	; 252
   1542a:	c6 01       	movw	r24, r12
   1542c:	0e 94 1a ae 	call	0x15c34	; 0x15c34 <EthernetUDP::begin(unsigned int)>
   15430:	81 30       	cpi	r24, 0x01	; 1
   15432:	29 f5       	brne	.+74     	; 0x1547e <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   15434:	80 ec       	ldi	r24, 0xC0	; 192
   15436:	98 e0       	ldi	r25, 0x08	; 8
   15438:	9a 83       	std	Y+2, r25	; 0x02
   1543a:	89 83       	std	Y+1, r24	; 0x01
   1543c:	f7 01       	movw	r30, r14
   1543e:	82 81       	ldd	r24, Z+2	; 0x02
   15440:	93 81       	ldd	r25, Z+3	; 0x03
   15442:	a4 81       	ldd	r26, Z+4	; 0x04
   15444:	b5 81       	ldd	r27, Z+5	; 0x05
   15446:	8b 83       	std	Y+3, r24	; 0x03
   15448:	9c 83       	std	Y+4, r25	; 0x04
   1544a:	ad 83       	std	Y+5, r26	; 0x05
   1544c:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
   1544e:	45 e3       	ldi	r20, 0x35	; 53
   15450:	50 e0       	ldi	r21, 0x00	; 0
   15452:	be 01       	movw	r22, r28
   15454:	6f 5f       	subi	r22, 0xFF	; 255
   15456:	7f 4f       	sbci	r23, 0xFF	; 255
   15458:	c6 01       	movw	r24, r12
   1545a:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
   1545e:	89 2b       	or	r24, r25
   15460:	59 f0       	breq	.+22     	; 0x15478 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:147
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
   15462:	b4 01       	movw	r22, r8
   15464:	c7 01       	movw	r24, r14
   15466:	0e 94 bf a7 	call	0x14f7e	; 0x14f7e <DNSClient::BuildRequest(char const*)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:148
                if (ret != 0)
   1546a:	89 2b       	or	r24, r25
   1546c:	29 f0       	breq	.+10     	; 0x15478 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
   1546e:	c6 01       	movw	r24, r12
   15470:	0e 94 50 ad 	call	0x15aa0	; 0x15aa0 <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
   15474:	89 2b       	or	r24, r25
   15476:	31 f5       	brne	.+76     	; 0x154c4 <DNSClient::getHostByName(char const*, IPAddress&)+0x104>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
   15478:	c6 01       	movw	r24, r12
   1547a:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <EthernetUDP::stop()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
    }

    return ret;
}
   1547e:	c8 01       	movw	r24, r16
   15480:	26 96       	adiw	r28, 0x06	; 6
   15482:	0f b6       	in	r0, 0x3f	; 63
   15484:	f8 94       	cli
   15486:	de bf       	out	0x3e, r29	; 62
   15488:	0f be       	out	0x3f, r0	; 63
   1548a:	cd bf       	out	0x3d, r28	; 61
   1548c:	df 91       	pop	r29
   1548e:	cf 91       	pop	r28
   15490:	1f 91       	pop	r17
   15492:	0f 91       	pop	r16
   15494:	ff 90       	pop	r15
   15496:	ef 90       	pop	r14
   15498:	df 90       	pop	r13
   1549a:	cf 90       	pop	r12
   1549c:	bf 90       	pop	r11
   1549e:	af 90       	pop	r10
   154a0:	9f 90       	pop	r9
   154a2:	8f 90       	pop	r8
   154a4:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157 (discriminator 1)
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
   154a6:	0f 3f       	cpi	r16, 0xFF	; 255
   154a8:	10 07       	cpc	r17, r16
   154aa:	31 f7       	brne	.-52     	; 0x15478 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:159
                        {
                            ret = ProcessResponse(5000, aResult);
   154ac:	a5 01       	movw	r20, r10
   154ae:	68 e8       	ldi	r22, 0x88	; 136
   154b0:	73 e1       	ldi	r23, 0x13	; 19
   154b2:	c7 01       	movw	r24, r14
   154b4:	0e 94 69 a8 	call	0x150d2	; 0x150d2 <DNSClient::ProcessResponse(unsigned int, IPAddress&)>
   154b8:	8c 01       	movw	r16, r24
   154ba:	81 e0       	ldi	r24, 0x01	; 1
   154bc:	88 1a       	sub	r8, r24
   154be:	91 08       	sbc	r9, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
   154c0:	91 f7       	brne	.-28     	; 0x154a6 <DNSClient::getHostByName(char const*, IPAddress&)+0xe6>
   154c2:	da cf       	rjmp	.-76     	; 0x15478 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
   154c4:	83 e0       	ldi	r24, 0x03	; 3
   154c6:	88 2e       	mov	r8, r24
   154c8:	91 2c       	mov	r9, r1
   154ca:	f0 cf       	rjmp	.-32     	; 0x154ac <DNSClient::getHostByName(char const*, IPAddress&)+0xec>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
   154cc:	01 e0       	ldi	r16, 0x01	; 1
   154ce:	10 e0       	ldi	r17, 0x00	; 0
   154d0:	d6 cf       	rjmp	.-84     	; 0x1547e <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
   154d2:	0e ef       	ldi	r16, 0xFE	; 254
   154d4:	1f ef       	ldi	r17, 0xFF	; 255
   154d6:	d3 cf       	rjmp	.-90     	; 0x1547e <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>

000154d8 <W5500Class::writeGAR(unsigned char*)>:
_ZN10W5500Class8writeGAREPh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:207
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
   154d8:	24 e0       	ldi	r18, 0x04	; 4
   154da:	30 e0       	ldi	r19, 0x00	; 0
   154dc:	ac 01       	movw	r20, r24
   154de:	64 e0       	ldi	r22, 0x04	; 4
   154e0:	81 e0       	ldi	r24, 0x01	; 1
   154e2:	90 e0       	ldi	r25, 0x00	; 0
   154e4:	0c 94 1f b1 	jmp	0x1623e	; 0x1623e <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

000154e8 <W5500Class::writeSUBR(unsigned char*)>:
_ZN10W5500Class9writeSUBREPh():
   154e8:	24 e0       	ldi	r18, 0x04	; 4
   154ea:	30 e0       	ldi	r19, 0x00	; 0
   154ec:	ac 01       	movw	r20, r24
   154ee:	64 e0       	ldi	r22, 0x04	; 4
   154f0:	85 e0       	ldi	r24, 0x05	; 5
   154f2:	90 e0       	ldi	r25, 0x00	; 0
   154f4:	0c 94 1f b1 	jmp	0x1623e	; 0x1623e <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

000154f8 <W5500Class::writeSHAR(unsigned char*)>:
_ZN10W5500Class9writeSHAREPh():
   154f8:	26 e0       	ldi	r18, 0x06	; 6
   154fa:	30 e0       	ldi	r19, 0x00	; 0
   154fc:	ac 01       	movw	r20, r24
   154fe:	64 e0       	ldi	r22, 0x04	; 4
   15500:	89 e0       	ldi	r24, 0x09	; 9
   15502:	90 e0       	ldi	r25, 0x00	; 0
   15504:	0c 94 1f b1 	jmp	0x1623e	; 0x1623e <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00015508 <W5500Class::writeSIPR(unsigned char*)>:
_ZN10W5500Class9writeSIPREPh():
   15508:	24 e0       	ldi	r18, 0x04	; 4
   1550a:	30 e0       	ldi	r19, 0x00	; 0
   1550c:	ac 01       	movw	r20, r24
   1550e:	64 e0       	ldi	r22, 0x04	; 4
   15510:	8f e0       	ldi	r24, 0x0F	; 15
   15512:	90 e0       	ldi	r25, 0x00	; 0
   15514:	0c 94 1f b1 	jmp	0x1623e	; 0x1623e <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00015518 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_():
   15518:	8f 92       	push	r8
   1551a:	9f 92       	push	r9
   1551c:	af 92       	push	r10
   1551e:	bf 92       	push	r11
   15520:	cf 92       	push	r12
   15522:	df 92       	push	r13
   15524:	ef 92       	push	r14
   15526:	ff 92       	push	r15
   15528:	0f 93       	push	r16
   1552a:	1f 93       	push	r17
   1552c:	cf 93       	push	r28
   1552e:	df 93       	push	r29
   15530:	4c 01       	movw	r8, r24
   15532:	5b 01       	movw	r10, r22
   15534:	6a 01       	movw	r12, r20
   15536:	e9 01       	movw	r28, r18
   15538:	fc 01       	movw	r30, r24
   1553a:	64 85       	ldd	r22, Z+12	; 0x0c
   1553c:	8e e0       	ldi	r24, 0x0E	; 14
   1553e:	91 e1       	ldi	r25, 0x11	; 17
   15540:	0e 94 77 b1 	call	0x162ee	; 0x162ee <W5500Class::init(unsigned char)>
_ZN10W5500Class13setMACAddressEPh():
   15544:	c5 01       	movw	r24, r10
   15546:	0e 94 7c aa 	call	0x154f8	; 0x154f8 <W5500Class::writeSHAR(unsigned char*)>
_ZN10W5500Class12setIPAddressEPh():
   1554a:	c6 01       	movw	r24, r12
   1554c:	02 96       	adiw	r24, 0x02	; 2
   1554e:	0e 94 84 aa 	call	0x15508	; 0x15508 <W5500Class::writeSIPR(unsigned char*)>
_ZN10W5500Class12setGatewayIpEPh():
   15552:	c8 01       	movw	r24, r16
   15554:	02 96       	adiw	r24, 0x02	; 2
   15556:	0e 94 6c aa 	call	0x154d8	; 0x154d8 <W5500Class::writeGAR(unsigned char*)>
_ZN10W5500Class13setSubnetMaskEPh():
   1555a:	c7 01       	movw	r24, r14
   1555c:	02 96       	adiw	r24, 0x02	; 2
   1555e:	0e 94 74 aa 	call	0x154e8	; 0x154e8 <W5500Class::writeSUBR(unsigned char*)>
_ZN9IPAddressaSERKS_():
   15562:	8a 81       	ldd	r24, Y+2	; 0x02
   15564:	9b 81       	ldd	r25, Y+3	; 0x03
   15566:	ac 81       	ldd	r26, Y+4	; 0x04
   15568:	bd 81       	ldd	r27, Y+5	; 0x05
   1556a:	f4 01       	movw	r30, r8
   1556c:	82 83       	std	Z+2, r24	; 0x02
   1556e:	93 83       	std	Z+3, r25	; 0x03
   15570:	a4 83       	std	Z+4, r26	; 0x04
   15572:	b5 83       	std	Z+5, r27	; 0x05
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_():
   15574:	df 91       	pop	r29
   15576:	cf 91       	pop	r28
   15578:	1f 91       	pop	r17
   1557a:	0f 91       	pop	r16
   1557c:	ff 90       	pop	r15
   1557e:	ef 90       	pop	r14
   15580:	df 90       	pop	r13
   15582:	cf 90       	pop	r12
   15584:	bf 90       	pop	r11
   15586:	af 90       	pop	r10
   15588:	9f 90       	pop	r9
   1558a:	8f 90       	pop	r8
   1558c:	08 95       	ret

0001558e <EthernetClass::dnsServerIP()>:
_ZN9IPAddressC4ERKS_():
   1558e:	20 ec       	ldi	r18, 0xC0	; 192
   15590:	38 e0       	ldi	r19, 0x08	; 8
   15592:	fc 01       	movw	r30, r24
   15594:	31 83       	std	Z+1, r19	; 0x01
   15596:	20 83       	st	Z, r18
   15598:	fb 01       	movw	r30, r22
   1559a:	42 81       	ldd	r20, Z+2	; 0x02
   1559c:	53 81       	ldd	r21, Z+3	; 0x03
   1559e:	64 81       	ldd	r22, Z+4	; 0x04
   155a0:	75 81       	ldd	r23, Z+5	; 0x05
   155a2:	fc 01       	movw	r30, r24
   155a4:	42 83       	std	Z+2, r20	; 0x02
   155a6:	53 83       	std	Z+3, r21	; 0x03
   155a8:	64 83       	std	Z+4, r22	; 0x04
   155aa:	75 83       	std	Z+5, r23	; 0x05
_ZN13EthernetClass11dnsServerIPEv():
   155ac:	08 95       	ret

000155ae <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:
_GLOBAL__sub_I__ZN13EthernetClass6_stateE():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:209

EthernetClass Ethernet;
   155ae:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   155b0:	00 e0       	ldi	r16, 0x00	; 0
   155b2:	20 e0       	ldi	r18, 0x00	; 0
   155b4:	40 e0       	ldi	r20, 0x00	; 0
   155b6:	60 e0       	ldi	r22, 0x00	; 0
   155b8:	8b ee       	ldi	r24, 0xEB	; 235
   155ba:	90 e1       	ldi	r25, 0x10	; 16
   155bc:	0e 94 97 cf 	call	0x19f2e	; 0x19f2e <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN13EthernetClassC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:34
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
   155c0:	8e ec       	ldi	r24, 0xCE	; 206
   155c2:	90 e1       	ldi	r25, 0x10	; 16
   155c4:	0e 94 8d cf 	call	0x19f1a	; 0x19f1a <IPAddress::IPAddress()>
   155c8:	ee ec       	ldi	r30, 0xCE	; 206
   155ca:	f0 e1       	ldi	r31, 0x10	; 16
   155cc:	13 86       	std	Z+11, r1	; 0x0b
   155ce:	12 86       	std	Z+10, r1	; 0x0a
   155d0:	8a e0       	ldi	r24, 0x0A	; 10
   155d2:	84 87       	std	Z+12, r24	; 0x0c
_GLOBAL__sub_I__ZN13EthernetClass6_stateE():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:209
   155d4:	0f 91       	pop	r16
   155d6:	08 95       	ret

000155d8 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   155d8:	90 e0       	ldi	r25, 0x00	; 0
   155da:	80 e0       	ldi	r24, 0x00	; 0
   155dc:	08 95       	ret

000155de <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:21

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}
   155de:	dc 01       	movw	r26, r24
   155e0:	ed 91       	ld	r30, X+
   155e2:	fc 91       	ld	r31, X
   155e4:	02 8c       	ldd	r0, Z+26	; 0x1a
   155e6:	f3 8d       	ldd	r31, Z+27	; 0x1b
   155e8:	e0 2d       	mov	r30, r0
   155ea:	19 95       	eicall
   155ec:	91 e0       	ldi	r25, 0x01	; 1
   155ee:	89 27       	eor	r24, r25
   155f0:	08 95       	ret

000155f2 <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
   155f2:	cf 93       	push	r28
   155f4:	df 93       	push	r29
   155f6:	1f 92       	push	r1
   155f8:	cd b7       	in	r28, 0x3d	; 61
   155fa:	de b7       	in	r29, 0x3e	; 62
   155fc:	69 83       	std	Y+1, r22	; 0x01
   155fe:	dc 01       	movw	r26, r24
   15600:	ed 91       	ld	r30, X+
   15602:	fc 91       	ld	r31, X
   15604:	02 80       	ldd	r0, Z+2	; 0x02
   15606:	f3 81       	ldd	r31, Z+3	; 0x03
   15608:	e0 2d       	mov	r30, r0
   1560a:	41 e0       	ldi	r20, 0x01	; 1
   1560c:	50 e0       	ldi	r21, 0x00	; 0
   1560e:	be 01       	movw	r22, r28
   15610:	6f 5f       	subi	r22, 0xFF	; 255
   15612:	7f 4f       	sbci	r23, 0xFF	; 255
   15614:	19 95       	eicall
   15616:	0f 90       	pop	r0
   15618:	df 91       	pop	r29
   1561a:	cf 91       	pop	r28
   1561c:	08 95       	ret

0001561e <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
   1561e:	21 e0       	ldi	r18, 0x01	; 1
   15620:	fc 01       	movw	r30, r24
   15622:	84 85       	ldd	r24, Z+12	; 0x0c
   15624:	88 30       	cpi	r24, 0x08	; 8
   15626:	09 f4       	brne	.+2      	; 0x1562a <EthernetClient::operator bool()+0xc>
   15628:	20 e0       	ldi	r18, 0x00	; 0
   1562a:	82 2f       	mov	r24, r18
   1562c:	08 95       	ret

0001562e <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
   1562e:	fc 01       	movw	r30, r24
   15630:	94 85       	ldd	r25, Z+12	; 0x0c
   15632:	fb 01       	movw	r30, r22
   15634:	84 85       	ldd	r24, Z+12	; 0x0c
   15636:	98 13       	cpse	r25, r24
   15638:	03 c0       	rjmp	.+6      	; 0x15640 <EthernetClient::operator==(EthernetClient const&)+0x12>
   1563a:	81 e0       	ldi	r24, 0x01	; 1
   1563c:	98 30       	cpi	r25, 0x08	; 8
   1563e:	09 f4       	brne	.+2      	; 0x15642 <EthernetClient::operator==(EthernetClient const&)+0x14>
   15640:	80 e0       	ldi	r24, 0x00	; 0
   15642:	08 95       	ret

00015644 <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
   15644:	cf 92       	push	r12
   15646:	df 92       	push	r13
   15648:	ef 92       	push	r14
   1564a:	ff 92       	push	r15
   1564c:	0f 93       	push	r16
   1564e:	1f 93       	push	r17
   15650:	cf 93       	push	r28
   15652:	df 93       	push	r29
   15654:	cd b7       	in	r28, 0x3d	; 61
   15656:	de b7       	in	r29, 0x3e	; 62
   15658:	af 97       	sbiw	r28, 0x2f	; 47
   1565a:	0f b6       	in	r0, 0x3f	; 63
   1565c:	f8 94       	cli
   1565e:	de bf       	out	0x3e, r29	; 62
   15660:	0f be       	out	0x3f, r0	; 63
   15662:	cd bf       	out	0x3d, r28	; 61
   15664:	8c 01       	movw	r16, r24
   15666:	6b 01       	movw	r12, r22
   15668:	7a 01       	movw	r14, r20
_ZN9DNSClientC4Ev():
   1566a:	ce 01       	movw	r24, r28
   1566c:	01 96       	adiw	r24, 0x01	; 1
   1566e:	0e 94 8d cf 	call	0x19f1a	; 0x19f1a <IPAddress::IPAddress()>
   15672:	ce 01       	movw	r24, r28
   15674:	09 96       	adiw	r24, 0x09	; 9
   15676:	0e 94 4f ae 	call	0x15c9e	; 0x15c9e <EthernetUDP::EthernetUDP()>
_ZN14EthernetClient7connectEPKcj():
   1567a:	ce 01       	movw	r24, r28
   1567c:	8a 96       	adiw	r24, 0x2a	; 42
   1567e:	0e 94 8d cf 	call	0x19f1a	; 0x19f1a <IPAddress::IPAddress()>
   15682:	6e ec       	ldi	r22, 0xCE	; 206
   15684:	70 e1       	ldi	r23, 0x10	; 16
   15686:	ce 01       	movw	r24, r28
   15688:	84 96       	adiw	r24, 0x24	; 36
   1568a:	0e 94 c7 aa 	call	0x1558e	; 0x1558e <EthernetClass::dnsServerIP()>
   1568e:	be 01       	movw	r22, r28
   15690:	6c 5d       	subi	r22, 0xDC	; 220
   15692:	7f 4f       	sbci	r23, 0xFF	; 255
   15694:	ce 01       	movw	r24, r28
   15696:	01 96       	adiw	r24, 0x01	; 1
   15698:	0e 94 6a a7 	call	0x14ed4	; 0x14ed4 <DNSClient::begin(IPAddress const&)>
   1569c:	ae 01       	movw	r20, r28
   1569e:	46 5d       	subi	r20, 0xD6	; 214
   156a0:	5f 4f       	sbci	r21, 0xFF	; 255
   156a2:	b6 01       	movw	r22, r12
   156a4:	ce 01       	movw	r24, r28
   156a6:	01 96       	adiw	r24, 0x01	; 1
   156a8:	0e 94 e0 a9 	call	0x153c0	; 0x153c0 <DNSClient::getHostByName(char const*, IPAddress&)>
   156ac:	81 30       	cpi	r24, 0x01	; 1
   156ae:	91 05       	cpc	r25, r1
   156b0:	c1 f4       	brne	.+48     	; 0x156e2 <EthernetClient::connect(char const*, unsigned int)+0x9e>
   156b2:	d8 01       	movw	r26, r16
   156b4:	ed 91       	ld	r30, X+
   156b6:	fc 91       	ld	r31, X
   156b8:	06 84       	ldd	r0, Z+14	; 0x0e
   156ba:	f7 85       	ldd	r31, Z+15	; 0x0f
   156bc:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
   156be:	80 ec       	ldi	r24, 0xC0	; 192
   156c0:	98 e0       	ldi	r25, 0x08	; 8
   156c2:	9d a3       	std	Y+37, r25	; 0x25
   156c4:	8c a3       	std	Y+36, r24	; 0x24
   156c6:	8c a5       	ldd	r24, Y+44	; 0x2c
   156c8:	9d a5       	ldd	r25, Y+45	; 0x2d
   156ca:	ae a5       	ldd	r26, Y+46	; 0x2e
   156cc:	bf a5       	ldd	r27, Y+47	; 0x2f
   156ce:	8e a3       	std	Y+38, r24	; 0x26
   156d0:	9f a3       	std	Y+39, r25	; 0x27
   156d2:	a8 a7       	std	Y+40, r26	; 0x28
   156d4:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
   156d6:	a7 01       	movw	r20, r14
   156d8:	be 01       	movw	r22, r28
   156da:	6c 5d       	subi	r22, 0xDC	; 220
   156dc:	7f 4f       	sbci	r23, 0xFF	; 255
   156de:	c8 01       	movw	r24, r16
   156e0:	19 95       	eicall
   156e2:	af 96       	adiw	r28, 0x2f	; 47
   156e4:	0f b6       	in	r0, 0x3f	; 63
   156e6:	f8 94       	cli
   156e8:	de bf       	out	0x3e, r29	; 62
   156ea:	0f be       	out	0x3f, r0	; 63
   156ec:	cd bf       	out	0x3d, r28	; 61
   156ee:	df 91       	pop	r29
   156f0:	cf 91       	pop	r28
   156f2:	1f 91       	pop	r17
   156f4:	0f 91       	pop	r16
   156f6:	ff 90       	pop	r15
   156f8:	ef 90       	pop	r14
   156fa:	df 90       	pop	r13
   156fc:	cf 90       	pop	r12
   156fe:	08 95       	ret

00015700 <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
   15700:	0f 93       	push	r16
   15702:	1f 93       	push	r17
   15704:	cf 93       	push	r28
   15706:	df 93       	push	r29
   15708:	8c 01       	movw	r16, r24
   1570a:	ea 01       	movw	r28, r20
   1570c:	fc 01       	movw	r30, r24
   1570e:	84 85       	ldd	r24, Z+12	; 0x0c
   15710:	88 30       	cpi	r24, 0x08	; 8
   15712:	69 f4       	brne	.+26     	; 0x1572e <EthernetClient::write(unsigned char const*, unsigned int)+0x2e>
_ZN5Print13setWriteErrorEi():
   15714:	81 e0       	ldi	r24, 0x01	; 1
   15716:	90 e0       	ldi	r25, 0x00	; 0
   15718:	f8 01       	movw	r30, r16
   1571a:	93 83       	std	Z+3, r25	; 0x03
   1571c:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
   1571e:	d0 e0       	ldi	r29, 0x00	; 0
   15720:	c0 e0       	ldi	r28, 0x00	; 0
   15722:	ce 01       	movw	r24, r28
   15724:	df 91       	pop	r29
   15726:	cf 91       	pop	r28
   15728:	1f 91       	pop	r17
   1572a:	0f 91       	pop	r16
   1572c:	08 95       	ret
   1572e:	0e 94 a2 af 	call	0x15f44	; 0x15f44 <send(unsigned char, unsigned char const*, unsigned int)>
   15732:	89 2b       	or	r24, r25
   15734:	79 f3       	breq	.-34     	; 0x15714 <EthernetClient::write(unsigned char const*, unsigned int)+0x14>
   15736:	f5 cf       	rjmp	.-22     	; 0x15722 <EthernetClient::write(unsigned char const*, unsigned int)+0x22>

00015738 <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
   15738:	fc 01       	movw	r30, r24
   1573a:	64 85       	ldd	r22, Z+12	; 0x0c
   1573c:	68 30       	cpi	r22, 0x08	; 8
   1573e:	21 f0       	breq	.+8      	; 0x15748 <EthernetClient::available()+0x10>
   15740:	8e e0       	ldi	r24, 0x0E	; 14
   15742:	91 e1       	ldi	r25, 0x11	; 17
   15744:	0c 94 fa b1 	jmp	0x163f4	; 0x163f4 <W5500Class::getRXReceivedSize(unsigned char)>
   15748:	90 e0       	ldi	r25, 0x00	; 0
   1574a:	80 e0       	ldi	r24, 0x00	; 0
   1574c:	08 95       	ret

0001574e <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
   1574e:	cf 93       	push	r28
   15750:	df 93       	push	r29
   15752:	1f 92       	push	r1
   15754:	cd b7       	in	r28, 0x3d	; 61
   15756:	de b7       	in	r29, 0x3e	; 62
   15758:	41 e0       	ldi	r20, 0x01	; 1
   1575a:	50 e0       	ldi	r21, 0x00	; 0
   1575c:	be 01       	movw	r22, r28
   1575e:	6f 5f       	subi	r22, 0xFF	; 255
   15760:	7f 4f       	sbci	r23, 0xFF	; 255
   15762:	fc 01       	movw	r30, r24
   15764:	84 85       	ldd	r24, Z+12	; 0x0c
   15766:	0e 94 f3 af 	call	0x15fe6	; 0x15fe6 <recv(unsigned char, unsigned char*, int)>
   1576a:	18 16       	cp	r1, r24
   1576c:	19 06       	cpc	r1, r25
   1576e:	34 f4       	brge	.+12     	; 0x1577c <EthernetClient::read()+0x2e>
   15770:	89 81       	ldd	r24, Y+1	; 0x01
   15772:	90 e0       	ldi	r25, 0x00	; 0
   15774:	0f 90       	pop	r0
   15776:	df 91       	pop	r29
   15778:	cf 91       	pop	r28
   1577a:	08 95       	ret
   1577c:	8f ef       	ldi	r24, 0xFF	; 255
   1577e:	9f ef       	ldi	r25, 0xFF	; 255
   15780:	f9 cf       	rjmp	.-14     	; 0x15774 <EthernetClient::read()+0x26>

00015782 <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
   15782:	fc 01       	movw	r30, r24
   15784:	84 85       	ldd	r24, Z+12	; 0x0c
   15786:	0c 94 f3 af 	jmp	0x15fe6	; 0x15fe6 <recv(unsigned char, unsigned char*, int)>

0001578a <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
   1578a:	0f 93       	push	r16
   1578c:	1f 93       	push	r17
   1578e:	cf 93       	push	r28
   15790:	df 93       	push	r29
   15792:	1f 92       	push	r1
   15794:	cd b7       	in	r28, 0x3d	; 61
   15796:	de b7       	in	r29, 0x3e	; 62
   15798:	8c 01       	movw	r16, r24
   1579a:	dc 01       	movw	r26, r24
   1579c:	ed 91       	ld	r30, X+
   1579e:	fc 91       	ld	r31, X
   157a0:	00 84       	ldd	r0, Z+8	; 0x08
   157a2:	f1 85       	ldd	r31, Z+9	; 0x09
   157a4:	e0 2d       	mov	r30, r0
   157a6:	19 95       	eicall
   157a8:	89 2b       	or	r24, r25
   157aa:	79 f0       	breq	.+30     	; 0x157ca <EthernetClient::peek()+0x40>
   157ac:	be 01       	movw	r22, r28
   157ae:	6f 5f       	subi	r22, 0xFF	; 255
   157b0:	7f 4f       	sbci	r23, 0xFF	; 255
   157b2:	f8 01       	movw	r30, r16
   157b4:	84 85       	ldd	r24, Z+12	; 0x0c
   157b6:	0e 94 39 b0 	call	0x16072	; 0x16072 <peek(unsigned char, unsigned char*)>
   157ba:	89 81       	ldd	r24, Y+1	; 0x01
   157bc:	90 e0       	ldi	r25, 0x00	; 0
   157be:	0f 90       	pop	r0
   157c0:	df 91       	pop	r29
   157c2:	cf 91       	pop	r28
   157c4:	1f 91       	pop	r17
   157c6:	0f 91       	pop	r16
   157c8:	08 95       	ret
   157ca:	8f ef       	ldi	r24, 0xFF	; 255
   157cc:	9f ef       	ldi	r25, 0xFF	; 255
   157ce:	f7 cf       	rjmp	.-18     	; 0x157be <EthernetClient::peek()+0x34>

000157d0 <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
   157d0:	fc 01       	movw	r30, r24
   157d2:	84 85       	ldd	r24, Z+12	; 0x0c
   157d4:	0c 94 47 b0 	jmp	0x1608e	; 0x1608e <flush(unsigned char)>

000157d8 <EthernetClient::EthernetClient()>:
_ZN14EthernetClientC2Ev():
   157d8:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
   157da:	13 82       	std	Z+3, r1	; 0x03
   157dc:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
   157de:	88 ee       	ldi	r24, 0xE8	; 232
   157e0:	93 e0       	ldi	r25, 0x03	; 3
   157e2:	a0 e0       	ldi	r26, 0x00	; 0
   157e4:	b0 e0       	ldi	r27, 0x00	; 0
   157e6:	84 83       	std	Z+4, r24	; 0x04
   157e8:	95 83       	std	Z+5, r25	; 0x05
   157ea:	a6 83       	std	Z+6, r26	; 0x06
   157ec:	b7 83       	std	Z+7, r27	; 0x07
_ZN14EthernetClientC2Ev():
   157ee:	83 e4       	ldi	r24, 0x43	; 67
   157f0:	98 e0       	ldi	r25, 0x08	; 8
   157f2:	91 83       	std	Z+1, r25	; 0x01
   157f4:	80 83       	st	Z, r24
   157f6:	88 e0       	ldi	r24, 0x08	; 8
   157f8:	84 87       	std	Z+12, r24	; 0x0c
   157fa:	08 95       	ret

000157fc <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   157fc:	fc 01       	movw	r30, r24
   157fe:	64 85       	ldd	r22, Z+12	; 0x0c
   15800:	68 30       	cpi	r22, 0x08	; 8
   15802:	41 f0       	breq	.+16     	; 0x15814 <EthernetClient::status()+0x18>
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
   15804:	62 95       	swap	r22
   15806:	66 0f       	add	r22, r22
   15808:	60 7e       	andi	r22, 0xE0	; 224
   1580a:	68 5f       	subi	r22, 0xF8	; 248
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
   1580c:	83 e0       	ldi	r24, 0x03	; 3
   1580e:	90 e0       	ldi	r25, 0x00	; 0
   15810:	0c 94 53 b1 	jmp	0x162a6	; 0x162a6 <W5500Class::read(unsigned int, unsigned char)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   15814:	80 e0       	ldi	r24, 0x00	; 0
   15816:	08 95       	ret

00015818 <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
   15818:	cf 92       	push	r12
   1581a:	df 92       	push	r13
   1581c:	ef 92       	push	r14
   1581e:	ff 92       	push	r15
   15820:	0f 93       	push	r16
   15822:	1f 93       	push	r17
   15824:	cf 93       	push	r28
   15826:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
   15828:	fc 01       	movw	r30, r24
   1582a:	e4 84       	ldd	r14, Z+12	; 0x0c
   1582c:	f8 e0       	ldi	r31, 0x08	; 8
   1582e:	ef 16       	cp	r14, r31
   15830:	59 f0       	breq	.+22     	; 0x15848 <EthernetClient::connect(IPAddress, unsigned int)+0x30>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
   15832:	90 e0       	ldi	r25, 0x00	; 0
   15834:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
   15836:	df 91       	pop	r29
   15838:	cf 91       	pop	r28
   1583a:	1f 91       	pop	r17
   1583c:	0f 91       	pop	r16
   1583e:	ff 90       	pop	r15
   15840:	ef 90       	pop	r14
   15842:	df 90       	pop	r13
   15844:	cf 90       	pop	r12
   15846:	08 95       	ret
   15848:	6a 01       	movw	r12, r20
   1584a:	8b 01       	movw	r16, r22
   1584c:	ec 01       	movw	r28, r24
   1584e:	f1 2c       	mov	r15, r1
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
   15850:	6e 2d       	mov	r22, r14
   15852:	83 e0       	ldi	r24, 0x03	; 3
   15854:	90 e0       	ldi	r25, 0x00	; 0
   15856:	0e 94 53 b1 	call	0x162a6	; 0x162a6 <W5500Class::read(unsigned int, unsigned char)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   1585a:	81 11       	cpse	r24, r1
   1585c:	23 c0       	rjmp	.+70     	; 0x158a4 <EthernetClient::connect(IPAddress, unsigned int)+0x8c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
   1585e:	fc 86       	std	Y+12, r15	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   15860:	8c 85       	ldd	r24, Y+12	; 0x0c
   15862:	88 30       	cpi	r24, 0x08	; 8
   15864:	31 f3       	breq	.-52     	; 0x15832 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
   15866:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <EthernetClient::_srcport>
   1586a:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <EthernetClient::_srcport+0x1>
   1586e:	2f 5f       	subi	r18, 0xFF	; 255
   15870:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
   15872:	11 f1       	breq	.+68     	; 0x158b8 <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
   15874:	30 93 7d 02 	sts	0x027D, r19	; 0x80027d <EthernetClient::_srcport+0x1>
   15878:	20 93 7c 02 	sts	0x027C, r18	; 0x80027c <EthernetClient::_srcport>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:55
  socket(_sock, SnMR::TCP, _srcport, 0);
   1587c:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <EthernetClient::_srcport>
   15880:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <EthernetClient::_srcport+0x1>
   15884:	20 e0       	ldi	r18, 0x00	; 0
   15886:	61 e0       	ldi	r22, 0x01	; 1
   15888:	0e 94 2f af 	call	0x15e5e	; 0x15e5e <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   1588c:	b8 01       	movw	r22, r16
   1588e:	6e 5f       	subi	r22, 0xFE	; 254
   15890:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57

  if (!::connect(_sock, rawIPAddress(ip), port)) {
   15892:	a6 01       	movw	r20, r12
   15894:	8c 85       	ldd	r24, Y+12	; 0x0c
   15896:	0e 94 65 af 	call	0x15eca	; 0x15eca <connect(unsigned char, unsigned char*, unsigned int)>
   1589a:	81 11       	cpse	r24, r1
   1589c:	10 c0       	rjmp	.+32     	; 0x158be <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
    _sock = MAX_SOCK_NUM;
   1589e:	88 e0       	ldi	r24, 0x08	; 8
   158a0:	8c 87       	std	Y+12, r24	; 0x0c
   158a2:	c7 cf       	rjmp	.-114    	; 0x15832 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   158a4:	8b 7f       	andi	r24, 0xFB	; 251
   158a6:	88 31       	cpi	r24, 0x18	; 24
   158a8:	d1 f2       	breq	.-76     	; 0x1585e <EthernetClient::connect(IPAddress, unsigned int)+0x46>
   158aa:	f3 94       	inc	r15
   158ac:	20 e2       	ldi	r18, 0x20	; 32
   158ae:	e2 0e       	add	r14, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   158b0:	88 e0       	ldi	r24, 0x08	; 8
   158b2:	f8 12       	cpse	r15, r24
   158b4:	cd cf       	rjmp	.-102    	; 0x15850 <EthernetClient::connect(IPAddress, unsigned int)+0x38>
   158b6:	d4 cf       	rjmp	.-88     	; 0x15860 <EthernetClient::connect(IPAddress, unsigned int)+0x48>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
   158b8:	20 e0       	ldi	r18, 0x00	; 0
   158ba:	34 e0       	ldi	r19, 0x04	; 4
   158bc:	db cf       	rjmp	.-74     	; 0x15874 <EthernetClient::connect(IPAddress, unsigned int)+0x5c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
   158be:	ce 01       	movw	r24, r28
   158c0:	0e 94 fe ab 	call	0x157fc	; 0x157fc <EthernetClient::status()>
   158c4:	87 31       	cpi	r24, 0x17	; 23
   158c6:	51 f0       	breq	.+20     	; 0x158dc <EthernetClient::connect(IPAddress, unsigned int)+0xc4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
   158c8:	61 e0       	ldi	r22, 0x01	; 1
   158ca:	70 e0       	ldi	r23, 0x00	; 0
   158cc:	80 e0       	ldi	r24, 0x00	; 0
   158ce:	90 e0       	ldi	r25, 0x00	; 0
   158d0:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
   158d4:	ce 01       	movw	r24, r28
   158d6:	0e 94 fe ab 	call	0x157fc	; 0x157fc <EthernetClient::status()>
   158da:	df cf       	rjmp	.-66     	; 0x1589a <EthernetClient::connect(IPAddress, unsigned int)+0x82>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
   158dc:	81 e0       	ldi	r24, 0x01	; 1
   158de:	90 e0       	ldi	r25, 0x00	; 0
   158e0:	aa cf       	rjmp	.-172    	; 0x15836 <EthernetClient::connect(IPAddress, unsigned int)+0x1e>

000158e2 <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
   158e2:	cf 92       	push	r12
   158e4:	df 92       	push	r13
   158e6:	ef 92       	push	r14
   158e8:	ff 92       	push	r15
   158ea:	cf 93       	push	r28
   158ec:	df 93       	push	r29
   158ee:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
   158f0:	8c 85       	ldd	r24, Y+12	; 0x0c
   158f2:	88 30       	cpi	r24, 0x08	; 8
   158f4:	79 f1       	breq	.+94     	; 0x15954 <EthernetClient::stop()+0x72>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:131
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
   158f6:	0e 94 9b af 	call	0x15f36	; 0x15f36 <disconnect(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
  unsigned long start = millis();
   158fa:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   158fe:	6b 01       	movw	r12, r22
   15900:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   15902:	ce 01       	movw	r24, r28
   15904:	0e 94 fe ab 	call	0x157fc	; 0x157fc <EthernetClient::status()>
   15908:	88 23       	and	r24, r24
   1590a:	91 f0       	breq	.+36     	; 0x15930 <EthernetClient::stop()+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135 (discriminator 1)
   1590c:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   15910:	6c 19       	sub	r22, r12
   15912:	7d 09       	sbc	r23, r13
   15914:	8e 09       	sbc	r24, r14
   15916:	9f 09       	sbc	r25, r15
   15918:	68 3e       	cpi	r22, 0xE8	; 232
   1591a:	73 40       	sbci	r23, 0x03	; 3
   1591c:	81 05       	cpc	r24, r1
   1591e:	91 05       	cpc	r25, r1
   15920:	38 f4       	brcc	.+14     	; 0x15930 <EthernetClient::stop()+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
   15922:	61 e0       	ldi	r22, 0x01	; 1
   15924:	70 e0       	ldi	r23, 0x00	; 0
   15926:	80 e0       	ldi	r24, 0x00	; 0
   15928:	90 e0       	ldi	r25, 0x00	; 0
   1592a:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135
  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   1592e:	e9 cf       	rjmp	.-46     	; 0x15902 <EthernetClient::stop()+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139
    delay(1);

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
   15930:	ce 01       	movw	r24, r28
   15932:	0e 94 fe ab 	call	0x157fc	; 0x157fc <EthernetClient::status()>
   15936:	88 23       	and	r24, r24
   15938:	19 f0       	breq	.+6      	; 0x15940 <EthernetClient::stop()+0x5e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
   1593a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1593c:	0e 94 21 af 	call	0x15e42	; 0x15e42 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:142

  EthernetClass::_server_port[_sock] = 0;
   15940:	ec 85       	ldd	r30, Y+12	; 0x0c
   15942:	f0 e0       	ldi	r31, 0x00	; 0
   15944:	ee 0f       	add	r30, r30
   15946:	ff 1f       	adc	r31, r31
   15948:	e5 52       	subi	r30, 0x25	; 37
   1594a:	ff 4e       	sbci	r31, 0xEF	; 239
   1594c:	11 82       	std	Z+1, r1	; 0x01
   1594e:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143
  _sock = MAX_SOCK_NUM;
   15950:	88 e0       	ldi	r24, 0x08	; 8
   15952:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
   15954:	df 91       	pop	r29
   15956:	cf 91       	pop	r28
   15958:	ff 90       	pop	r15
   1595a:	ef 90       	pop	r14
   1595c:	df 90       	pop	r13
   1595e:	cf 90       	pop	r12
   15960:	08 95       	ret

00015962 <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

uint8_t EthernetClient::connected() {
   15962:	cf 93       	push	r28
   15964:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
   15966:	fc 01       	movw	r30, r24
   15968:	24 85       	ldd	r18, Z+12	; 0x0c
   1596a:	28 30       	cpi	r18, 0x08	; 8
   1596c:	d9 f0       	breq	.+54     	; 0x159a4 <EthernetClient::connected()+0x42>
   1596e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
   15970:	0e 94 fe ab 	call	0x157fc	; 0x157fc <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   15974:	84 31       	cpi	r24, 0x14	; 20
   15976:	89 f0       	breq	.+34     	; 0x1599a <EthernetClient::connected()+0x38>
   15978:	88 23       	and	r24, r24
   1597a:	79 f0       	breq	.+30     	; 0x1599a <EthernetClient::connected()+0x38>
   1597c:	88 31       	cpi	r24, 0x18	; 24
   1597e:	69 f0       	breq	.+26     	; 0x1599a <EthernetClient::connected()+0x38>
   15980:	21 e0       	ldi	r18, 0x01	; 1
   15982:	8c 31       	cpi	r24, 0x1C	; 28
   15984:	59 f4       	brne	.+22     	; 0x1599c <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   15986:	e8 81       	ld	r30, Y
   15988:	f9 81       	ldd	r31, Y+1	; 0x01
   1598a:	00 84       	ldd	r0, Z+8	; 0x08
   1598c:	f1 85       	ldd	r31, Z+9	; 0x09
   1598e:	e0 2d       	mov	r30, r0
   15990:	ce 01       	movw	r24, r28
   15992:	19 95       	eicall
   15994:	21 e0       	ldi	r18, 0x01	; 1
   15996:	89 2b       	or	r24, r25
   15998:	09 f4       	brne	.+2      	; 0x1599c <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   1599a:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   1599c:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
   1599e:	df 91       	pop	r29
   159a0:	cf 91       	pop	r28
   159a2:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
   159a4:	80 e0       	ldi	r24, 0x00	; 0
   159a6:	fb cf       	rjmp	.-10     	; 0x1599e <EthernetClient::connected()+0x3c>

000159a8 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
_GLOBAL__sub_I__ZN14EthernetClient8_srcportE():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
   159a8:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   159aa:	00 e0       	ldi	r16, 0x00	; 0
   159ac:	20 e0       	ldi	r18, 0x00	; 0
   159ae:	40 e0       	ldi	r20, 0x00	; 0
   159b0:	60 e0       	ldi	r22, 0x00	; 0
   159b2:	81 ef       	ldi	r24, 0xF1	; 241
   159b4:	90 e1       	ldi	r25, 0x10	; 16
   159b6:	0e 94 97 cf 	call	0x19f2e	; 0x19f2e <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN14EthernetClient8_srcportE():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
   159ba:	0f 91       	pop	r16
   159bc:	08 95       	ret

000159be <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
_GLOBAL__sub_I__ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
   159be:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   159c0:	00 e0       	ldi	r16, 0x00	; 0
   159c2:	20 e0       	ldi	r18, 0x00	; 0
   159c4:	40 e0       	ldi	r20, 0x00	; 0
   159c6:	60 e0       	ldi	r22, 0x00	; 0
   159c8:	87 ef       	ldi	r24, 0xF7	; 247
   159ca:	90 e1       	ldi	r25, 0x10	; 16
   159cc:	0e 94 97 cf 	call	0x19f2e	; 0x19f2e <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
   159d0:	0f 91       	pop	r16
   159d2:	08 95       	ret

000159d4 <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
   159d4:	80 e0       	ldi	r24, 0x00	; 0
   159d6:	08 95       	ret

000159d8 <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   159d8:	dc 01       	movw	r26, r24
   159da:	ed 91       	ld	r30, X+
   159dc:	fc 91       	ld	r31, X
   159de:	04 8c       	ldd	r0, Z+28	; 0x1c
   159e0:	f5 8d       	ldd	r31, Z+29	; 0x1d
   159e2:	e0 2d       	mov	r30, r0
   159e4:	19 94       	eijmp

000159e6 <EthernetUDP::remoteIP()>:
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   159e6:	20 ec       	ldi	r18, 0xC0	; 192
   159e8:	38 e0       	ldi	r19, 0x08	; 8
   159ea:	fc 01       	movw	r30, r24
   159ec:	31 83       	std	Z+1, r19	; 0x01
   159ee:	20 83       	st	Z, r18
   159f0:	fb 01       	movw	r30, r22
   159f2:	41 89       	ldd	r20, Z+17	; 0x11
   159f4:	52 89       	ldd	r21, Z+18	; 0x12
   159f6:	63 89       	ldd	r22, Z+19	; 0x13
   159f8:	74 89       	ldd	r23, Z+20	; 0x14
   159fa:	fc 01       	movw	r30, r24
   159fc:	42 83       	std	Z+2, r20	; 0x02
   159fe:	53 83       	std	Z+3, r21	; 0x03
   15a00:	64 83       	std	Z+4, r22	; 0x04
   15a02:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
   15a04:	08 95       	ret

00015a06 <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
   15a06:	fc 01       	movw	r30, r24
   15a08:	85 89       	ldd	r24, Z+21	; 0x15
   15a0a:	96 89       	ldd	r25, Z+22	; 0x16
   15a0c:	08 95       	ret

00015a0e <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
   15a0e:	fc 01       	movw	r30, r24
   15a10:	81 8d       	ldd	r24, Z+25	; 0x19
   15a12:	92 8d       	ldd	r25, Z+26	; 0x1a
   15a14:	08 95       	ret

00015a16 <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
   15a16:	cf 93       	push	r28
   15a18:	df 93       	push	r29
   15a1a:	1f 92       	push	r1
   15a1c:	cd b7       	in	r28, 0x3d	; 61
   15a1e:	de b7       	in	r29, 0x3e	; 62
   15a20:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
   15a22:	dc 01       	movw	r26, r24
   15a24:	ed 91       	ld	r30, X+
   15a26:	fc 91       	ld	r31, X
   15a28:	02 80       	ldd	r0, Z+2	; 0x02
   15a2a:	f3 81       	ldd	r31, Z+3	; 0x03
   15a2c:	e0 2d       	mov	r30, r0
   15a2e:	41 e0       	ldi	r20, 0x01	; 1
   15a30:	50 e0       	ldi	r21, 0x00	; 0
   15a32:	be 01       	movw	r22, r28
   15a34:	6f 5f       	subi	r22, 0xFF	; 255
   15a36:	7f 4f       	sbci	r23, 0xFF	; 255
   15a38:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
   15a3a:	0f 90       	pop	r0
   15a3c:	df 91       	pop	r29
   15a3e:	cf 91       	pop	r28
   15a40:	08 95       	ret

00015a42 <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
   15a42:	cf 93       	push	r28
   15a44:	df 93       	push	r29
   15a46:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   15a48:	89 8d       	ldd	r24, Y+25	; 0x19
   15a4a:	9a 8d       	ldd	r25, Y+26	; 0x1a
   15a4c:	89 2b       	or	r24, r25
   15a4e:	41 f0       	breq	.+16     	; 0x15a60 <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
   15a50:	e8 81       	ld	r30, Y
   15a52:	f9 81       	ldd	r31, Y+1	; 0x01
   15a54:	02 84       	ldd	r0, Z+10	; 0x0a
   15a56:	f3 85       	ldd	r31, Z+11	; 0x0b
   15a58:	e0 2d       	mov	r30, r0
   15a5a:	ce 01       	movw	r24, r28
   15a5c:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   15a5e:	f4 cf       	rjmp	.-24     	; 0x15a48 <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  {
    read();
  }
}
   15a60:	df 91       	pop	r29
   15a62:	cf 91       	pop	r28
   15a64:	08 95       	ret

00015a66 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   15a66:	cf 93       	push	r28
   15a68:	df 93       	push	r29
   15a6a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   15a6c:	8c 85       	ldd	r24, Y+12	; 0x0c
   15a6e:	88 30       	cpi	r24, 0x08	; 8
   15a70:	61 f0       	breq	.+24     	; 0x15a8a <EthernetUDP::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   15a72:	0e 94 21 af 	call	0x15e42	; 0x15e42 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:79

  EthernetClass::_server_port[_sock] = 0;
   15a76:	ec 85       	ldd	r30, Y+12	; 0x0c
   15a78:	f0 e0       	ldi	r31, 0x00	; 0
   15a7a:	ee 0f       	add	r30, r30
   15a7c:	ff 1f       	adc	r31, r31
   15a7e:	e5 52       	subi	r30, 0x25	; 37
   15a80:	ff 4e       	sbci	r31, 0xEF	; 239
   15a82:	11 82       	std	Z+1, r1	; 0x01
   15a84:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80
  _sock = MAX_SOCK_NUM;
   15a86:	88 e0       	ldi	r24, 0x08	; 8
   15a88:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   15a8a:	df 91       	pop	r29
   15a8c:	cf 91       	pop	r28
   15a8e:	08 95       	ret

00015a90 <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
   15a90:	fc 01       	movw	r30, r24
   15a92:	10 8e       	std	Z+24, r1	; 0x18
   15a94:	17 8a       	std	Z+23, r1	; 0x17
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   15a96:	6e 5f       	subi	r22, 0xFE	; 254
   15a98:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   15a9a:	84 85       	ldd	r24, Z+12	; 0x0c
   15a9c:	0c 94 76 b0 	jmp	0x160ec	; 0x160ec <startUDP(unsigned char, unsigned char*, unsigned int)>

00015aa0 <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
   15aa0:	fc 01       	movw	r30, r24
   15aa2:	84 85       	ldd	r24, Z+12	; 0x0c
   15aa4:	0c 94 9b b0 	jmp	0x16136	; 0x16136 <sendUDP(unsigned char)>

00015aa8 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
   15aa8:	cf 93       	push	r28
   15aaa:	df 93       	push	r29
   15aac:	ec 01       	movw	r28, r24
   15aae:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
   15ab0:	8f 89       	ldd	r24, Y+23	; 0x17
   15ab2:	98 8d       	ldd	r25, Y+24	; 0x18
   15ab4:	ab 01       	movw	r20, r22
   15ab6:	bc 01       	movw	r22, r24
   15ab8:	8c 85       	ldd	r24, Y+12	; 0x0c
   15aba:	0e 94 48 b0 	call	0x16090	; 0x16090 <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
   15abe:	2f 89       	ldd	r18, Y+23	; 0x17
   15ac0:	38 8d       	ldd	r19, Y+24	; 0x18
   15ac2:	28 0f       	add	r18, r24
   15ac4:	39 1f       	adc	r19, r25
   15ac6:	38 8f       	std	Y+24, r19	; 0x18
   15ac8:	2f 8b       	std	Y+23, r18	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
   15aca:	df 91       	pop	r29
   15acc:	cf 91       	pop	r28
   15ace:	08 95       	ret

00015ad0 <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   15ad0:	0f 93       	push	r16
   15ad2:	1f 93       	push	r17
   15ad4:	cf 93       	push	r28
   15ad6:	df 93       	push	r29
   15ad8:	1f 92       	push	r1
   15ada:	cd b7       	in	r28, 0x3d	; 61
   15adc:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   15ade:	fc 01       	movw	r30, r24
   15ae0:	21 8d       	ldd	r18, Z+25	; 0x19
   15ae2:	32 8d       	ldd	r19, Z+26	; 0x1a
   15ae4:	23 2b       	or	r18, r19
   15ae6:	41 f4       	brne	.+16     	; 0x15af8 <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   15ae8:	8f ef       	ldi	r24, 0xFF	; 255
   15aea:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   15aec:	0f 90       	pop	r0
   15aee:	df 91       	pop	r29
   15af0:	cf 91       	pop	r28
   15af2:	1f 91       	pop	r17
   15af4:	0f 91       	pop	r16
   15af6:	08 95       	ret
   15af8:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155 (discriminator 1)

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   15afa:	41 e0       	ldi	r20, 0x01	; 1
   15afc:	50 e0       	ldi	r21, 0x00	; 0
   15afe:	be 01       	movw	r22, r28
   15b00:	6f 5f       	subi	r22, 0xFF	; 255
   15b02:	7f 4f       	sbci	r23, 0xFF	; 255
   15b04:	fc 01       	movw	r30, r24
   15b06:	84 85       	ldd	r24, Z+12	; 0x0c
   15b08:	0e 94 f3 af 	call	0x15fe6	; 0x15fe6 <recv(unsigned char, unsigned char*, int)>
   15b0c:	18 16       	cp	r1, r24
   15b0e:	19 06       	cpc	r1, r25
   15b10:	5c f7       	brge	.-42     	; 0x15ae8 <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   15b12:	f8 01       	movw	r30, r16
   15b14:	81 8d       	ldd	r24, Z+25	; 0x19
   15b16:	92 8d       	ldd	r25, Z+26	; 0x1a
   15b18:	01 97       	sbiw	r24, 0x01	; 1
   15b1a:	92 8f       	std	Z+26, r25	; 0x1a
   15b1c:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   15b1e:	89 81       	ldd	r24, Y+1	; 0x01
   15b20:	90 e0       	ldi	r25, 0x00	; 0
   15b22:	e4 cf       	rjmp	.-56     	; 0x15aec <EthernetUDP::read()+0x1c>

00015b24 <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   15b24:	cf 93       	push	r28
   15b26:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   15b28:	fc 01       	movw	r30, r24
   15b2a:	21 8d       	ldd	r18, Z+25	; 0x19
   15b2c:	32 8d       	ldd	r19, Z+26	; 0x1a
   15b2e:	21 15       	cp	r18, r1
   15b30:	31 05       	cpc	r19, r1
   15b32:	29 f4       	brne	.+10     	; 0x15b3e <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   15b34:	8f ef       	ldi	r24, 0xFF	; 255
   15b36:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   15b38:	df 91       	pop	r29
   15b3a:	cf 91       	pop	r28
   15b3c:	08 95       	ret
   15b3e:	ec 01       	movw	r28, r24
   15b40:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   15b42:	42 17       	cp	r20, r18
   15b44:	53 07       	cpc	r21, r19
   15b46:	08 f0       	brcs	.+2      	; 0x15b4a <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   15b48:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   15b4a:	0e 94 f3 af 	call	0x15fe6	; 0x15fe6 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   15b4e:	18 16       	cp	r1, r24
   15b50:	19 06       	cpc	r1, r25
   15b52:	84 f7       	brge	.-32     	; 0x15b34 <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   15b54:	29 8d       	ldd	r18, Y+25	; 0x19
   15b56:	3a 8d       	ldd	r19, Y+26	; 0x1a
   15b58:	28 1b       	sub	r18, r24
   15b5a:	39 0b       	sbc	r19, r25
   15b5c:	3a 8f       	std	Y+26, r19	; 0x1a
   15b5e:	29 8f       	std	Y+25, r18	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:189
      return got;
   15b60:	eb cf       	rjmp	.-42     	; 0x15b38 <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

00015b62 <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
   15b62:	cf 93       	push	r28
   15b64:	df 93       	push	r29
   15b66:	1f 92       	push	r1
   15b68:	cd b7       	in	r28, 0x3d	; 61
   15b6a:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   15b6c:	fc 01       	movw	r30, r24
   15b6e:	21 8d       	ldd	r18, Z+25	; 0x19
   15b70:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
   15b72:	8f ef       	ldi	r24, 0xFF	; 255
   15b74:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   15b76:	23 2b       	or	r18, r19
   15b78:	41 f0       	breq	.+16     	; 0x15b8a <EthernetUDP::peek()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:207
    return -1;
  ::peek(_sock, &b);
   15b7a:	be 01       	movw	r22, r28
   15b7c:	6f 5f       	subi	r22, 0xFF	; 255
   15b7e:	7f 4f       	sbci	r23, 0xFF	; 255
   15b80:	84 85       	ldd	r24, Z+12	; 0x0c
   15b82:	0e 94 39 b0 	call	0x16072	; 0x16072 <peek(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
  return b;
   15b86:	89 81       	ldd	r24, Y+1	; 0x01
   15b88:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
   15b8a:	0f 90       	pop	r0
   15b8c:	df 91       	pop	r29
   15b8e:	cf 91       	pop	r28
   15b90:	08 95       	ret

00015b92 <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   15b92:	0f 93       	push	r16
   15b94:	1f 93       	push	r17
   15b96:	cf 93       	push	r28
   15b98:	df 93       	push	r29
   15b9a:	00 d0       	rcall	.+0      	; 0x15b9c <EthernetUDP::parsePacket()+0xa>
   15b9c:	00 d0       	rcall	.+0      	; 0x15b9e <EthernetUDP::parsePacket()+0xc>
   15b9e:	1f 92       	push	r1
   15ba0:	1f 92       	push	r1
   15ba2:	cd b7       	in	r28, 0x3d	; 61
   15ba4:	de b7       	in	r29, 0x3e	; 62
   15ba6:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   15ba8:	dc 01       	movw	r26, r24
   15baa:	ed 91       	ld	r30, X+
   15bac:	fc 91       	ld	r31, X
   15bae:	06 80       	ldd	r0, Z+6	; 0x06
   15bb0:	f7 81       	ldd	r31, Z+7	; 0x07
   15bb2:	e0 2d       	mov	r30, r0
   15bb4:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   15bb6:	f8 01       	movw	r30, r16
   15bb8:	64 85       	ldd	r22, Z+12	; 0x0c
   15bba:	8e e0       	ldi	r24, 0x0E	; 14
   15bbc:	91 e1       	ldi	r25, 0x11	; 17
   15bbe:	0e 94 fa b1 	call	0x163f4	; 0x163f4 <W5500Class::getRXReceivedSize(unsigned char)>
   15bc2:	89 2b       	or	r24, r25
   15bc4:	a1 f1       	breq	.+104    	; 0x15c2e <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   15bc6:	48 e0       	ldi	r20, 0x08	; 8
   15bc8:	50 e0       	ldi	r21, 0x00	; 0
   15bca:	be 01       	movw	r22, r28
   15bcc:	6f 5f       	subi	r22, 0xFF	; 255
   15bce:	7f 4f       	sbci	r23, 0xFF	; 255
   15bd0:	d8 01       	movw	r26, r16
   15bd2:	1c 96       	adiw	r26, 0x0c	; 12
   15bd4:	8c 91       	ld	r24, X
   15bd6:	0e 94 f3 af 	call	0x15fe6	; 0x15fe6 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   15bda:	18 16       	cp	r1, r24
   15bdc:	19 06       	cpc	r1, r25
   15bde:	e4 f4       	brge	.+56     	; 0x15c18 <EthernetUDP::parsePacket()+0x86>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:136
    {
      _remoteIP = tmpBuf;
   15be0:	be 01       	movw	r22, r28
   15be2:	6f 5f       	subi	r22, 0xFF	; 255
   15be4:	7f 4f       	sbci	r23, 0xFF	; 255
   15be6:	c8 01       	movw	r24, r16
   15be8:	0f 96       	adiw	r24, 0x0f	; 15
   15bea:	0e 94 af cf 	call	0x19f5e	; 0x19f5e <IPAddress::operator=(unsigned char const*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
      _remotePort = tmpBuf[4];
   15bee:	8d 81       	ldd	r24, Y+5	; 0x05
   15bf0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   15bf2:	98 2f       	mov	r25, r24
   15bf4:	88 27       	eor	r24, r24
   15bf6:	2e 81       	ldd	r18, Y+6	; 0x06
   15bf8:	82 0f       	add	r24, r18
   15bfa:	91 1d       	adc	r25, r1
   15bfc:	f8 01       	movw	r30, r16
   15bfe:	96 8b       	std	Z+22, r25	; 0x16
   15c00:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   15c02:	8f 81       	ldd	r24, Y+7	; 0x07
   15c04:	28 2f       	mov	r18, r24
   15c06:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   15c08:	32 2f       	mov	r19, r18
   15c0a:	22 27       	eor	r18, r18
   15c0c:	88 85       	ldd	r24, Y+8	; 0x08
   15c0e:	82 0f       	add	r24, r18
   15c10:	93 2f       	mov	r25, r19
   15c12:	91 1d       	adc	r25, r1
   15c14:	92 8f       	std	Z+26, r25	; 0x1a
   15c16:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   15c18:	28 96       	adiw	r28, 0x08	; 8
   15c1a:	0f b6       	in	r0, 0x3f	; 63
   15c1c:	f8 94       	cli
   15c1e:	de bf       	out	0x3e, r29	; 62
   15c20:	0f be       	out	0x3f, r0	; 63
   15c22:	cd bf       	out	0x3d, r28	; 61
   15c24:	df 91       	pop	r29
   15c26:	cf 91       	pop	r28
   15c28:	1f 91       	pop	r17
   15c2a:	0f 91       	pop	r16
   15c2c:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   15c2e:	90 e0       	ldi	r25, 0x00	; 0
   15c30:	80 e0       	ldi	r24, 0x00	; 0
   15c32:	f2 cf       	rjmp	.-28     	; 0x15c18 <EthernetUDP::parsePacket()+0x86>

00015c34 <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   15c34:	ef 92       	push	r14
   15c36:	ff 92       	push	r15
   15c38:	0f 93       	push	r16
   15c3a:	1f 93       	push	r17
   15c3c:	cf 93       	push	r28
   15c3e:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   15c40:	fc 01       	movw	r30, r24
   15c42:	e4 84       	ldd	r14, Z+12	; 0x0c
   15c44:	f8 e0       	ldi	r31, 0x08	; 8
   15c46:	ef 16       	cp	r14, r31
   15c48:	41 f0       	breq	.+16     	; 0x15c5a <EthernetUDP::begin(unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   15c4a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   15c4c:	df 91       	pop	r29
   15c4e:	cf 91       	pop	r28
   15c50:	1f 91       	pop	r17
   15c52:	0f 91       	pop	r16
   15c54:	ff 90       	pop	r15
   15c56:	ef 90       	pop	r14
   15c58:	08 95       	ret
   15c5a:	8b 01       	movw	r16, r22
   15c5c:	ec 01       	movw	r28, r24
   15c5e:	f1 2c       	mov	r15, r1
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
   15c60:	6e 2d       	mov	r22, r14
   15c62:	83 e0       	ldi	r24, 0x03	; 3
   15c64:	90 e0       	ldi	r25, 0x00	; 0
   15c66:	0e 94 53 b1 	call	0x162a6	; 0x162a6 <W5500Class::read(unsigned int, unsigned char)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   15c6a:	81 11       	cpse	r24, r1
   15c6c:	0f c0       	rjmp	.+30     	; 0x15c8c <EthernetUDP::begin(unsigned int)+0x58>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   15c6e:	fc 86       	std	Y+12, r15	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   15c70:	8c 85       	ldd	r24, Y+12	; 0x0c
   15c72:	88 30       	cpi	r24, 0x08	; 8
   15c74:	51 f3       	breq	.-44     	; 0x15c4a <EthernetUDP::begin(unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   15c76:	1e 87       	std	Y+14, r17	; 0x0e
   15c78:	0d 87       	std	Y+13, r16	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   15c7a:	1a 8e       	std	Y+26, r1	; 0x1a
   15c7c:	19 8e       	std	Y+25, r1	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:60
  socket(_sock, SnMR::UDP, _port, 0);
   15c7e:	20 e0       	ldi	r18, 0x00	; 0
   15c80:	a8 01       	movw	r20, r16
   15c82:	62 e0       	ldi	r22, 0x02	; 2
   15c84:	0e 94 2f af 	call	0x15e5e	; 0x15e5e <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62

  return 1;
   15c88:	81 e0       	ldi	r24, 0x01	; 1
   15c8a:	e0 cf       	rjmp	.-64     	; 0x15c4c <EthernetUDP::begin(unsigned int)+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   15c8c:	88 31       	cpi	r24, 0x18	; 24
   15c8e:	79 f3       	breq	.-34     	; 0x15c6e <EthernetUDP::begin(unsigned int)+0x3a>
   15c90:	f3 94       	inc	r15
   15c92:	20 e2       	ldi	r18, 0x20	; 32
   15c94:	e2 0e       	add	r14, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   15c96:	88 e0       	ldi	r24, 0x08	; 8
   15c98:	f8 12       	cpse	r15, r24
   15c9a:	e2 cf       	rjmp	.-60     	; 0x15c60 <EthernetUDP::begin(unsigned int)+0x2c>
   15c9c:	e9 cf       	rjmp	.-46     	; 0x15c70 <EthernetUDP::begin(unsigned int)+0x3c>

00015c9e <EthernetUDP::EthernetUDP()>:
_ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   15c9e:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   15ca0:	13 82       	std	Z+3, r1	; 0x03
   15ca2:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   15ca4:	88 ee       	ldi	r24, 0xE8	; 232
   15ca6:	93 e0       	ldi	r25, 0x03	; 3
   15ca8:	a0 e0       	ldi	r26, 0x00	; 0
   15caa:	b0 e0       	ldi	r27, 0x00	; 0
   15cac:	84 83       	std	Z+4, r24	; 0x04
   15cae:	95 83       	std	Z+5, r25	; 0x05
   15cb0:	a6 83       	std	Z+6, r26	; 0x06
   15cb2:	b7 83       	std	Z+7, r27	; 0x07
_ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
   15cb4:	85 e6       	ldi	r24, 0x65	; 101
   15cb6:	98 e0       	ldi	r25, 0x08	; 8
   15cb8:	91 83       	std	Z+1, r25	; 0x01
   15cba:	80 83       	st	Z, r24
   15cbc:	88 e0       	ldi	r24, 0x08	; 8
   15cbe:	84 87       	std	Z+12, r24	; 0x0c
   15cc0:	cf 01       	movw	r24, r30
   15cc2:	0f 96       	adiw	r24, 0x0f	; 15
   15cc4:	0c 94 8d cf 	jmp	0x19f1a	; 0x19f1a <IPAddress::IPAddress()>

00015cc8 <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
   15cc8:	cf 92       	push	r12
   15cca:	df 92       	push	r13
   15ccc:	ef 92       	push	r14
   15cce:	ff 92       	push	r15
   15cd0:	0f 93       	push	r16
   15cd2:	1f 93       	push	r17
   15cd4:	cf 93       	push	r28
   15cd6:	df 93       	push	r29
   15cd8:	cd b7       	in	r28, 0x3d	; 61
   15cda:	de b7       	in	r29, 0x3e	; 62
   15cdc:	af 97       	sbiw	r28, 0x2f	; 47
   15cde:	0f b6       	in	r0, 0x3f	; 63
   15ce0:	f8 94       	cli
   15ce2:	de bf       	out	0x3e, r29	; 62
   15ce4:	0f be       	out	0x3f, r0	; 63
   15ce6:	cd bf       	out	0x3d, r28	; 61
   15ce8:	8c 01       	movw	r16, r24
   15cea:	6b 01       	movw	r12, r22
   15cec:	7a 01       	movw	r14, r20
_ZN9DNSClientC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.h:10
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
   15cee:	ce 01       	movw	r24, r28
   15cf0:	01 96       	adiw	r24, 0x01	; 1
   15cf2:	0e 94 8d cf 	call	0x19f1a	; 0x19f1a <IPAddress::IPAddress()>
   15cf6:	ce 01       	movw	r24, r28
   15cf8:	09 96       	adiw	r24, 0x09	; 9
   15cfa:	0e 94 4f ae 	call	0x15c9e	; 0x15c9e <EthernetUDP::EthernetUDP()>
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:88
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
   15cfe:	ce 01       	movw	r24, r28
   15d00:	8a 96       	adiw	r24, 0x2a	; 42
   15d02:	0e 94 8d cf 	call	0x19f1a	; 0x19f1a <IPAddress::IPAddress()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:90

  dns.begin(Ethernet.dnsServerIP());
   15d06:	6e ec       	ldi	r22, 0xCE	; 206
   15d08:	70 e1       	ldi	r23, 0x10	; 16
   15d0a:	ce 01       	movw	r24, r28
   15d0c:	84 96       	adiw	r24, 0x24	; 36
   15d0e:	0e 94 c7 aa 	call	0x1558e	; 0x1558e <EthernetClass::dnsServerIP()>
   15d12:	be 01       	movw	r22, r28
   15d14:	6c 5d       	subi	r22, 0xDC	; 220
   15d16:	7f 4f       	sbci	r23, 0xFF	; 255
   15d18:	ce 01       	movw	r24, r28
   15d1a:	01 96       	adiw	r24, 0x01	; 1
   15d1c:	0e 94 6a a7 	call	0x14ed4	; 0x14ed4 <DNSClient::begin(IPAddress const&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  ret = dns.getHostByName(host, remote_addr);
   15d20:	ae 01       	movw	r20, r28
   15d22:	46 5d       	subi	r20, 0xD6	; 214
   15d24:	5f 4f       	sbci	r21, 0xFF	; 255
   15d26:	b6 01       	movw	r22, r12
   15d28:	ce 01       	movw	r24, r28
   15d2a:	01 96       	adiw	r24, 0x01	; 1
   15d2c:	0e 94 e0 a9 	call	0x153c0	; 0x153c0 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
   15d30:	81 30       	cpi	r24, 0x01	; 1
   15d32:	91 05       	cpc	r25, r1
   15d34:	c1 f4       	brne	.+48     	; 0x15d66 <EthernetUDP::beginPacket(char const*, unsigned int)+0x9e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
   15d36:	d8 01       	movw	r26, r16
   15d38:	ed 91       	ld	r30, X+
   15d3a:	fc 91       	ld	r31, X
   15d3c:	04 88       	ldd	r0, Z+20	; 0x14
   15d3e:	f5 89       	ldd	r31, Z+21	; 0x15
   15d40:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   15d42:	80 ec       	ldi	r24, 0xC0	; 192
   15d44:	98 e0       	ldi	r25, 0x08	; 8
   15d46:	9d a3       	std	Y+37, r25	; 0x25
   15d48:	8c a3       	std	Y+36, r24	; 0x24
   15d4a:	8c a5       	ldd	r24, Y+44	; 0x2c
   15d4c:	9d a5       	ldd	r25, Y+45	; 0x2d
   15d4e:	ae a5       	ldd	r26, Y+46	; 0x2e
   15d50:	bf a5       	ldd	r27, Y+47	; 0x2f
   15d52:	8e a3       	std	Y+38, r24	; 0x26
   15d54:	9f a3       	std	Y+39, r25	; 0x27
   15d56:	a8 a7       	std	Y+40, r26	; 0x28
   15d58:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
   15d5a:	a7 01       	movw	r20, r14
   15d5c:	be 01       	movw	r22, r28
   15d5e:	6c 5d       	subi	r22, 0xDC	; 220
   15d60:	7f 4f       	sbci	r23, 0xFF	; 255
   15d62:	c8 01       	movw	r24, r16
   15d64:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
   15d66:	af 96       	adiw	r28, 0x2f	; 47
   15d68:	0f b6       	in	r0, 0x3f	; 63
   15d6a:	f8 94       	cli
   15d6c:	de bf       	out	0x3e, r29	; 62
   15d6e:	0f be       	out	0x3f, r0	; 63
   15d70:	cd bf       	out	0x3d, r28	; 61
   15d72:	df 91       	pop	r29
   15d74:	cf 91       	pop	r28
   15d76:	1f 91       	pop	r17
   15d78:	0f 91       	pop	r16
   15d7a:	ff 90       	pop	r15
   15d7c:	ef 90       	pop	r14
   15d7e:	df 90       	pop	r13
   15d80:	cf 90       	pop	r12
   15d82:	08 95       	ret

00015d84 <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:
_GLOBAL__sub_I__ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221

  while (_remaining)
  {
    read();
  }
}
   15d84:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   15d86:	00 e0       	ldi	r16, 0x00	; 0
   15d88:	20 e0       	ldi	r18, 0x00	; 0
   15d8a:	40 e0       	ldi	r20, 0x00	; 0
   15d8c:	60 e0       	ldi	r22, 0x00	; 0
   15d8e:	8d ef       	ldi	r24, 0xFD	; 253
   15d90:	90 e1       	ldi	r25, 0x10	; 16
   15d92:	0e 94 97 cf 	call	0x19f2e	; 0x19f2e <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
   15d96:	0f 91       	pop	r16
   15d98:	08 95       	ret

00015d9a <_GLOBAL__sub_I__ZN7TwitterC2EPKc>:
_GLOBAL__sub_I__ZN7TwitterC2EPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Twitter.cpp:91

int Twitter::wait(Print *debug)
{
	while (checkStatus(debug));
	return statusCode;
}
   15d9a:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   15d9c:	00 e0       	ldi	r16, 0x00	; 0
   15d9e:	20 e0       	ldi	r18, 0x00	; 0
   15da0:	40 e0       	ldi	r20, 0x00	; 0
   15da2:	60 e0       	ldi	r22, 0x00	; 0
   15da4:	83 e0       	ldi	r24, 0x03	; 3
   15da6:	91 e1       	ldi	r25, 0x11	; 17
   15da8:	0e 94 97 cf 	call	0x19f2e	; 0x19f2e <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN7TwitterC2EPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Twitter.cpp:91
   15dac:	0f 91       	pop	r16
   15dae:	08 95       	ret

00015db0 <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>:
_ZN10W5500Class11writeSnDIPREhPh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:355
      return 0;
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
   15db0:	ab 01       	movw	r20, r22
_ZN10W5500Class7writeSnEhjPhj():
   15db2:	82 95       	swap	r24
   15db4:	88 0f       	add	r24, r24
   15db6:	80 7e       	andi	r24, 0xE0	; 224
   15db8:	6c e0       	ldi	r22, 0x0C	; 12
   15dba:	68 0f       	add	r22, r24
   15dbc:	24 e0       	ldi	r18, 0x04	; 4
   15dbe:	30 e0       	ldi	r19, 0x00	; 0
   15dc0:	8c e0       	ldi	r24, 0x0C	; 12
   15dc2:	90 e0       	ldi	r25, 0x00	; 0
   15dc4:	0c 94 1f b1 	jmp	0x1623e	; 0x1623e <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00015dc8 <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
   15dc8:	9b 01       	movw	r18, r22
   15dca:	82 95       	swap	r24
   15dcc:	88 0f       	add	r24, r24
   15dce:	80 7e       	andi	r24, 0xE0	; 224
   15dd0:	68 e0       	ldi	r22, 0x08	; 8
   15dd2:	68 0f       	add	r22, r24
   15dd4:	c9 01       	movw	r24, r18
   15dd6:	0c 94 53 b1 	jmp	0x162a6	; 0x162a6 <W5500Class::read(unsigned int, unsigned char)>

00015dda <W5500Class::readSnIR(unsigned char)>:
_ZN10W5500Class8readSnIREh():
   15dda:	62 e0       	ldi	r22, 0x02	; 2
   15ddc:	70 e0       	ldi	r23, 0x00	; 0
   15dde:	0c 94 e4 ae 	jmp	0x15dc8	; 0x15dc8 <W5500Class::readSn(unsigned char, unsigned int)>

00015de2 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
   15de2:	9b 01       	movw	r18, r22
   15de4:	82 95       	swap	r24
   15de6:	88 0f       	add	r24, r24
   15de8:	80 7e       	andi	r24, 0xE0	; 224
   15dea:	6c e0       	ldi	r22, 0x0C	; 12
   15dec:	68 0f       	add	r22, r24
   15dee:	c9 01       	movw	r24, r18
   15df0:	0c 94 f9 b0 	jmp	0x161f2	; 0x161f2 <W5500Class::write(unsigned int, unsigned char, unsigned char)>

00015df4 <W5500Class::writeSnPORT(unsigned char, unsigned int)>:
_ZN10W5500Class11writeSnPORTEhj():
   15df4:	cf 93       	push	r28
   15df6:	df 93       	push	r29
   15df8:	c8 2f       	mov	r28, r24
   15dfa:	d6 2f       	mov	r29, r22
   15dfc:	47 2f       	mov	r20, r23
   15dfe:	64 e0       	ldi	r22, 0x04	; 4
   15e00:	70 e0       	ldi	r23, 0x00	; 0
   15e02:	0e 94 f1 ae 	call	0x15de2	; 0x15de2 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   15e06:	4d 2f       	mov	r20, r29
   15e08:	65 e0       	ldi	r22, 0x05	; 5
   15e0a:	70 e0       	ldi	r23, 0x00	; 0
   15e0c:	8c 2f       	mov	r24, r28
   15e0e:	df 91       	pop	r29
   15e10:	cf 91       	pop	r28
   15e12:	0c 94 f1 ae 	jmp	0x15de2	; 0x15de2 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00015e16 <W5500Class::writeSnIR(unsigned char, unsigned char)>:
_ZN10W5500Class9writeSnIREhh():
   15e16:	46 2f       	mov	r20, r22
   15e18:	62 e0       	ldi	r22, 0x02	; 2
   15e1a:	70 e0       	ldi	r23, 0x00	; 0
   15e1c:	0c 94 f1 ae 	jmp	0x15de2	; 0x15de2 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00015e20 <W5500Class::writeSnDPORT(unsigned char, unsigned int)>:
_ZN10W5500Class12writeSnDPORTEhj():
   15e20:	cf 93       	push	r28
   15e22:	df 93       	push	r29
   15e24:	c8 2f       	mov	r28, r24
   15e26:	d6 2f       	mov	r29, r22
   15e28:	47 2f       	mov	r20, r23
   15e2a:	60 e1       	ldi	r22, 0x10	; 16
   15e2c:	70 e0       	ldi	r23, 0x00	; 0
   15e2e:	0e 94 f1 ae 	call	0x15de2	; 0x15de2 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   15e32:	4d 2f       	mov	r20, r29
   15e34:	61 e1       	ldi	r22, 0x11	; 17
   15e36:	70 e0       	ldi	r23, 0x00	; 0
   15e38:	8c 2f       	mov	r24, r28
   15e3a:	df 91       	pop	r29
   15e3c:	cf 91       	pop	r28
   15e3e:	0c 94 f1 ae 	jmp	0x15de2	; 0x15de2 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00015e42 <close(unsigned char)>:
_Z5closeh():
   15e42:	cf 93       	push	r28
   15e44:	c8 2f       	mov	r28, r24
   15e46:	40 e1       	ldi	r20, 0x10	; 16
   15e48:	50 e0       	ldi	r21, 0x00	; 0
   15e4a:	68 2f       	mov	r22, r24
   15e4c:	8e e0       	ldi	r24, 0x0E	; 14
   15e4e:	91 e1       	ldi	r25, 0x11	; 17
   15e50:	0e 94 01 b3 	call	0x16602	; 0x16602 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   15e54:	6f ef       	ldi	r22, 0xFF	; 255
   15e56:	8c 2f       	mov	r24, r28
   15e58:	cf 91       	pop	r28
   15e5a:	0c 94 0b af 	jmp	0x15e16	; 0x15e16 <W5500Class::writeSnIR(unsigned char, unsigned char)>

00015e5e <socket(unsigned char, unsigned char, unsigned int, unsigned char)>:
_Z6sockethhjh():
   15e5e:	ff 92       	push	r15
   15e60:	0f 93       	push	r16
   15e62:	1f 93       	push	r17
   15e64:	cf 93       	push	r28
   15e66:	df 93       	push	r29
   15e68:	9f ef       	ldi	r25, 0xFF	; 255
   15e6a:	96 0f       	add	r25, r22
   15e6c:	95 30       	cpi	r25, 0x05	; 5
   15e6e:	58 f5       	brcc	.+86     	; 0x15ec6 <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x68>
   15e70:	f2 2e       	mov	r15, r18
   15e72:	8a 01       	movw	r16, r20
   15e74:	d6 2f       	mov	r29, r22
   15e76:	c8 2f       	mov	r28, r24
   15e78:	0e 94 21 af 	call	0x15e42	; 0x15e42 <close(unsigned char)>
   15e7c:	4d 2f       	mov	r20, r29
   15e7e:	4f 29       	or	r20, r15
_ZN10W5500Class9writeSnMREhh():
   15e80:	70 e0       	ldi	r23, 0x00	; 0
   15e82:	60 e0       	ldi	r22, 0x00	; 0
   15e84:	8c 2f       	mov	r24, r28
   15e86:	0e 94 f1 ae 	call	0x15de2	; 0x15de2 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh():
   15e8a:	b8 01       	movw	r22, r16
   15e8c:	01 2b       	or	r16, r17
   15e8e:	51 f4       	brne	.+20     	; 0x15ea4 <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x46>
   15e90:	60 91 09 11 	lds	r22, 0x1109	; 0x801109 <local_port>
   15e94:	70 91 0a 11 	lds	r23, 0x110A	; 0x80110a <local_port+0x1>
   15e98:	6f 5f       	subi	r22, 0xFF	; 255
   15e9a:	7f 4f       	sbci	r23, 0xFF	; 255
   15e9c:	70 93 0a 11 	sts	0x110A, r23	; 0x80110a <local_port+0x1>
   15ea0:	60 93 09 11 	sts	0x1109, r22	; 0x801109 <local_port>
   15ea4:	8c 2f       	mov	r24, r28
   15ea6:	0e 94 fa ae 	call	0x15df4	; 0x15df4 <W5500Class::writeSnPORT(unsigned char, unsigned int)>
   15eaa:	41 e0       	ldi	r20, 0x01	; 1
   15eac:	50 e0       	ldi	r21, 0x00	; 0
   15eae:	6c 2f       	mov	r22, r28
   15eb0:	8e e0       	ldi	r24, 0x0E	; 14
   15eb2:	91 e1       	ldi	r25, 0x11	; 17
   15eb4:	0e 94 01 b3 	call	0x16602	; 0x16602 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   15eb8:	81 e0       	ldi	r24, 0x01	; 1
   15eba:	df 91       	pop	r29
   15ebc:	cf 91       	pop	r28
   15ebe:	1f 91       	pop	r17
   15ec0:	0f 91       	pop	r16
   15ec2:	ff 90       	pop	r15
   15ec4:	08 95       	ret
   15ec6:	80 e0       	ldi	r24, 0x00	; 0
   15ec8:	f8 cf       	rjmp	.-16     	; 0x15eba <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x5c>

00015eca <connect(unsigned char, unsigned char*, unsigned int)>:
_Z7connecthPhj():
   15eca:	0f 93       	push	r16
   15ecc:	1f 93       	push	r17
   15ece:	cf 93       	push	r28
   15ed0:	fb 01       	movw	r30, r22
   15ed2:	90 81       	ld	r25, Z
   15ed4:	9f 3f       	cpi	r25, 0xFF	; 255
   15ed6:	59 f4       	brne	.+22     	; 0x15eee <connect(unsigned char, unsigned char*, unsigned int)+0x24>
   15ed8:	91 81       	ldd	r25, Z+1	; 0x01
   15eda:	9f 3f       	cpi	r25, 0xFF	; 255
   15edc:	99 f4       	brne	.+38     	; 0x15f04 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   15ede:	92 81       	ldd	r25, Z+2	; 0x02
   15ee0:	9f 3f       	cpi	r25, 0xFF	; 255
   15ee2:	81 f4       	brne	.+32     	; 0x15f04 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   15ee4:	93 81       	ldd	r25, Z+3	; 0x03
   15ee6:	9f 3f       	cpi	r25, 0xFF	; 255
   15ee8:	69 f4       	brne	.+26     	; 0x15f04 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   15eea:	90 e0       	ldi	r25, 0x00	; 0
   15eec:	1f c0       	rjmp	.+62     	; 0x15f2c <connect(unsigned char, unsigned char*, unsigned int)+0x62>
   15eee:	91 11       	cpse	r25, r1
   15ef0:	09 c0       	rjmp	.+18     	; 0x15f04 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   15ef2:	91 81       	ldd	r25, Z+1	; 0x01
   15ef4:	91 11       	cpse	r25, r1
   15ef6:	06 c0       	rjmp	.+12     	; 0x15f04 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   15ef8:	92 81       	ldd	r25, Z+2	; 0x02
   15efa:	91 11       	cpse	r25, r1
   15efc:	03 c0       	rjmp	.+6      	; 0x15f04 <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   15efe:	93 81       	ldd	r25, Z+3	; 0x03
   15f00:	99 23       	and	r25, r25
   15f02:	a1 f0       	breq	.+40     	; 0x15f2c <connect(unsigned char, unsigned char*, unsigned int)+0x62>
   15f04:	41 15       	cp	r20, r1
   15f06:	51 05       	cpc	r21, r1
   15f08:	81 f3       	breq	.-32     	; 0x15eea <connect(unsigned char, unsigned char*, unsigned int)+0x20>
   15f0a:	8a 01       	movw	r16, r20
   15f0c:	bf 01       	movw	r22, r30
   15f0e:	c8 2f       	mov	r28, r24
   15f10:	0e 94 d8 ae 	call	0x15db0	; 0x15db0 <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>
   15f14:	b8 01       	movw	r22, r16
   15f16:	8c 2f       	mov	r24, r28
   15f18:	0e 94 10 af 	call	0x15e20	; 0x15e20 <W5500Class::writeSnDPORT(unsigned char, unsigned int)>
   15f1c:	44 e0       	ldi	r20, 0x04	; 4
   15f1e:	50 e0       	ldi	r21, 0x00	; 0
   15f20:	6c 2f       	mov	r22, r28
   15f22:	8e e0       	ldi	r24, 0x0E	; 14
   15f24:	91 e1       	ldi	r25, 0x11	; 17
   15f26:	0e 94 01 b3 	call	0x16602	; 0x16602 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   15f2a:	91 e0       	ldi	r25, 0x01	; 1
   15f2c:	89 2f       	mov	r24, r25
   15f2e:	cf 91       	pop	r28
   15f30:	1f 91       	pop	r17
   15f32:	0f 91       	pop	r16
   15f34:	08 95       	ret

00015f36 <disconnect(unsigned char)>:
_Z10disconnecth():
   15f36:	48 e0       	ldi	r20, 0x08	; 8
   15f38:	50 e0       	ldi	r21, 0x00	; 0
   15f3a:	68 2f       	mov	r22, r24
   15f3c:	8e e0       	ldi	r24, 0x0E	; 14
   15f3e:	91 e1       	ldi	r25, 0x11	; 17
   15f40:	0c 94 01 b3 	jmp	0x16602	; 0x16602 <W5500Class::execCmdSn(unsigned char, SockCMD)>

00015f44 <send(unsigned char, unsigned char const*, unsigned int)>:
_Z4sendhPKhj():
   15f44:	cf 92       	push	r12
   15f46:	df 92       	push	r13
   15f48:	ef 92       	push	r14
   15f4a:	ff 92       	push	r15
   15f4c:	0f 93       	push	r16
   15f4e:	1f 93       	push	r17
   15f50:	cf 93       	push	r28
   15f52:	c8 2f       	mov	r28, r24
   15f54:	7b 01       	movw	r14, r22
   15f56:	8a 01       	movw	r16, r20
   15f58:	41 30       	cpi	r20, 0x01	; 1
   15f5a:	58 40       	sbci	r21, 0x08	; 8
   15f5c:	10 f0       	brcs	.+4      	; 0x15f62 <send(unsigned char, unsigned char const*, unsigned int)+0x1e>
   15f5e:	00 e0       	ldi	r16, 0x00	; 0
   15f60:	18 e0       	ldi	r17, 0x08	; 8
   15f62:	6c 2f       	mov	r22, r28
   15f64:	8e e0       	ldi	r24, 0x0E	; 14
   15f66:	91 e1       	ldi	r25, 0x11	; 17
   15f68:	0e 94 c6 b1 	call	0x1638c	; 0x1638c <W5500Class::getTXFreeSize(unsigned char)>
   15f6c:	6c 01       	movw	r12, r24
_ZN10W5500Class8readSnSREh():
   15f6e:	63 e0       	ldi	r22, 0x03	; 3
   15f70:	70 e0       	ldi	r23, 0x00	; 0
   15f72:	8c 2f       	mov	r24, r28
   15f74:	0e 94 e4 ae 	call	0x15dc8	; 0x15dc8 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4sendhPKhj():
   15f78:	87 31       	cpi	r24, 0x17	; 23
   15f7a:	11 f0       	breq	.+4      	; 0x15f80 <send(unsigned char, unsigned char const*, unsigned int)+0x3c>
   15f7c:	8c 31       	cpi	r24, 0x1C	; 28
   15f7e:	59 f5       	brne	.+86     	; 0x15fd6 <send(unsigned char, unsigned char const*, unsigned int)+0x92>
   15f80:	c0 16       	cp	r12, r16
   15f82:	d1 06       	cpc	r13, r17
   15f84:	70 f3       	brcs	.-36     	; 0x15f62 <send(unsigned char, unsigned char const*, unsigned int)+0x1e>
   15f86:	98 01       	movw	r18, r16
   15f88:	a7 01       	movw	r20, r14
   15f8a:	6c 2f       	mov	r22, r28
   15f8c:	8e e0       	ldi	r24, 0x0E	; 14
   15f8e:	91 e1       	ldi	r25, 0x11	; 17
   15f90:	0e 94 56 b2 	call	0x164ac	; 0x164ac <W5500Class::send_data_processing(unsigned char, unsigned char const*, unsigned int)>
   15f94:	40 e2       	ldi	r20, 0x20	; 32
   15f96:	50 e0       	ldi	r21, 0x00	; 0
   15f98:	6c 2f       	mov	r22, r28
   15f9a:	8e e0       	ldi	r24, 0x0E	; 14
   15f9c:	91 e1       	ldi	r25, 0x11	; 17
   15f9e:	0e 94 01 b3 	call	0x16602	; 0x16602 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   15fa2:	8c 2f       	mov	r24, r28
   15fa4:	0e 94 ed ae 	call	0x15dda	; 0x15dda <W5500Class::readSnIR(unsigned char)>
   15fa8:	84 fd       	sbrc	r24, 4
   15faa:	18 c0       	rjmp	.+48     	; 0x15fdc <send(unsigned char, unsigned char const*, unsigned int)+0x98>
_ZN10W5500Class8readSnSREh():
   15fac:	63 e0       	ldi	r22, 0x03	; 3
   15fae:	70 e0       	ldi	r23, 0x00	; 0
   15fb0:	8c 2f       	mov	r24, r28
   15fb2:	0e 94 e4 ae 	call	0x15dc8	; 0x15dc8 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4sendhPKhj():
   15fb6:	81 11       	cpse	r24, r1
   15fb8:	f4 cf       	rjmp	.-24     	; 0x15fa2 <send(unsigned char, unsigned char const*, unsigned int)+0x5e>
   15fba:	8c 2f       	mov	r24, r28
   15fbc:	0e 94 21 af 	call	0x15e42	; 0x15e42 <close(unsigned char)>
   15fc0:	10 e0       	ldi	r17, 0x00	; 0
   15fc2:	00 e0       	ldi	r16, 0x00	; 0
   15fc4:	c8 01       	movw	r24, r16
   15fc6:	cf 91       	pop	r28
   15fc8:	1f 91       	pop	r17
   15fca:	0f 91       	pop	r16
   15fcc:	ff 90       	pop	r15
   15fce:	ef 90       	pop	r14
   15fd0:	df 90       	pop	r13
   15fd2:	cf 90       	pop	r12
   15fd4:	08 95       	ret
   15fd6:	10 e0       	ldi	r17, 0x00	; 0
   15fd8:	00 e0       	ldi	r16, 0x00	; 0
   15fda:	d5 cf       	rjmp	.-86     	; 0x15f86 <send(unsigned char, unsigned char const*, unsigned int)+0x42>
   15fdc:	60 e1       	ldi	r22, 0x10	; 16
   15fde:	8c 2f       	mov	r24, r28
   15fe0:	0e 94 0b af 	call	0x15e16	; 0x15e16 <W5500Class::writeSnIR(unsigned char, unsigned char)>
   15fe4:	ef cf       	rjmp	.-34     	; 0x15fc4 <send(unsigned char, unsigned char const*, unsigned int)+0x80>

00015fe6 <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
   15fe6:	cf 92       	push	r12
   15fe8:	df 92       	push	r13
   15fea:	ef 92       	push	r14
   15fec:	ff 92       	push	r15
   15fee:	0f 93       	push	r16
   15ff0:	1f 93       	push	r17
   15ff2:	cf 93       	push	r28
   15ff4:	df 93       	push	r29
   15ff6:	18 2f       	mov	r17, r24
   15ff8:	6b 01       	movw	r12, r22
   15ffa:	7a 01       	movw	r14, r20
   15ffc:	68 2f       	mov	r22, r24
   15ffe:	8e e0       	ldi	r24, 0x0E	; 14
   16000:	91 e1       	ldi	r25, 0x11	; 17
   16002:	0e 94 fa b1 	call	0x163f4	; 0x163f4 <W5500Class::getRXReceivedSize(unsigned char)>
   16006:	ec 01       	movw	r28, r24
   16008:	00 97       	sbiw	r24, 0x00	; 0
   1600a:	e1 f4       	brne	.+56     	; 0x16044 <recv(unsigned char, unsigned char*, int)+0x5e>
_ZN10W5500Class8readSnSREh():
   1600c:	63 e0       	ldi	r22, 0x03	; 3
   1600e:	70 e0       	ldi	r23, 0x00	; 0
   16010:	81 2f       	mov	r24, r17
   16012:	0e 94 e4 ae 	call	0x15dc8	; 0x15dc8 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
   16016:	84 31       	cpi	r24, 0x14	; 20
   16018:	59 f0       	breq	.+22     	; 0x16030 <recv(unsigned char, unsigned char*, int)+0x4a>
   1601a:	88 23       	and	r24, r24
   1601c:	49 f0       	breq	.+18     	; 0x16030 <recv(unsigned char, unsigned char*, int)+0x4a>
   1601e:	c1 e0       	ldi	r28, 0x01	; 1
   16020:	d0 e0       	ldi	r29, 0x00	; 0
   16022:	8c 31       	cpi	r24, 0x1C	; 28
   16024:	11 f4       	brne	.+4      	; 0x1602a <recv(unsigned char, unsigned char*, int)+0x44>
   16026:	d0 e0       	ldi	r29, 0x00	; 0
   16028:	c0 e0       	ldi	r28, 0x00	; 0
   1602a:	d1 95       	neg	r29
   1602c:	c1 95       	neg	r28
   1602e:	d1 09       	sbc	r29, r1
   16030:	ce 01       	movw	r24, r28
   16032:	df 91       	pop	r29
   16034:	cf 91       	pop	r28
   16036:	1f 91       	pop	r17
   16038:	0f 91       	pop	r16
   1603a:	ff 90       	pop	r15
   1603c:	ef 90       	pop	r14
   1603e:	df 90       	pop	r13
   16040:	cf 90       	pop	r12
   16042:	08 95       	ret
   16044:	e8 16       	cp	r14, r24
   16046:	f9 06       	cpc	r15, r25
   16048:	0c f4       	brge	.+2      	; 0x1604c <recv(unsigned char, unsigned char*, int)+0x66>
   1604a:	e7 01       	movw	r28, r14
   1604c:	1c 16       	cp	r1, r28
   1604e:	1d 06       	cpc	r1, r29
   16050:	7c f7       	brge	.-34     	; 0x16030 <recv(unsigned char, unsigned char*, int)+0x4a>
   16052:	00 e0       	ldi	r16, 0x00	; 0
   16054:	9e 01       	movw	r18, r28
   16056:	a6 01       	movw	r20, r12
   16058:	61 2f       	mov	r22, r17
   1605a:	8e e0       	ldi	r24, 0x0E	; 14
   1605c:	91 e1       	ldi	r25, 0x11	; 17
   1605e:	0e 94 b0 b2 	call	0x16560	; 0x16560 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>
   16062:	40 e4       	ldi	r20, 0x40	; 64
   16064:	50 e0       	ldi	r21, 0x00	; 0
   16066:	61 2f       	mov	r22, r17
   16068:	8e e0       	ldi	r24, 0x0E	; 14
   1606a:	91 e1       	ldi	r25, 0x11	; 17
   1606c:	0e 94 01 b3 	call	0x16602	; 0x16602 <W5500Class::execCmdSn(unsigned char, SockCMD)>
   16070:	df cf       	rjmp	.-66     	; 0x16030 <recv(unsigned char, unsigned char*, int)+0x4a>

00016072 <peek(unsigned char, unsigned char*)>:
_Z4peekhPh():
   16072:	0f 93       	push	r16
   16074:	ab 01       	movw	r20, r22
   16076:	01 e0       	ldi	r16, 0x01	; 1
   16078:	21 e0       	ldi	r18, 0x01	; 1
   1607a:	30 e0       	ldi	r19, 0x00	; 0
   1607c:	68 2f       	mov	r22, r24
   1607e:	8e e0       	ldi	r24, 0x0E	; 14
   16080:	91 e1       	ldi	r25, 0x11	; 17
   16082:	0e 94 b0 b2 	call	0x16560	; 0x16560 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>
   16086:	81 e0       	ldi	r24, 0x01	; 1
   16088:	90 e0       	ldi	r25, 0x00	; 0
   1608a:	0f 91       	pop	r16
   1608c:	08 95       	ret

0001608e <flush(unsigned char)>:
_Z5flushh():
   1608e:	08 95       	ret

00016090 <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)>:
_Z10bufferDatahjPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:359
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
   16090:	af 92       	push	r10
   16092:	bf 92       	push	r11
   16094:	cf 92       	push	r12
   16096:	df 92       	push	r13
   16098:	ff 92       	push	r15
   1609a:	0f 93       	push	r16
   1609c:	1f 93       	push	r17
   1609e:	cf 93       	push	r28
   160a0:	df 93       	push	r29
   160a2:	f8 2e       	mov	r15, r24
   160a4:	6b 01       	movw	r12, r22
   160a6:	5a 01       	movw	r10, r20
   160a8:	e9 01       	movw	r28, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
   160aa:	68 2f       	mov	r22, r24
   160ac:	8e e0       	ldi	r24, 0x0E	; 14
   160ae:	91 e1       	ldi	r25, 0x11	; 17
   160b0:	0e 94 c6 b1 	call	0x1638c	; 0x1638c <W5500Class::getTXFreeSize(unsigned char)>
   160b4:	8c 17       	cp	r24, r28
   160b6:	9d 07       	cpc	r25, r29
   160b8:	30 f4       	brcc	.+12     	; 0x160c6 <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
   160ba:	6f 2d       	mov	r22, r15
   160bc:	8e e0       	ldi	r24, 0x0E	; 14
   160be:	91 e1       	ldi	r25, 0x11	; 17
   160c0:	0e 94 c6 b1 	call	0x1638c	; 0x1638c <W5500Class::getTXFreeSize(unsigned char)>
   160c4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
   160c6:	8e 01       	movw	r16, r28
   160c8:	95 01       	movw	r18, r10
   160ca:	a6 01       	movw	r20, r12
   160cc:	6f 2d       	mov	r22, r15
   160ce:	8e e0       	ldi	r24, 0x0E	; 14
   160d0:	91 e1       	ldi	r25, 0x11	; 17
   160d2:	0e 94 16 b2 	call	0x1642c	; 0x1642c <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:371
  return ret;
}
   160d6:	ce 01       	movw	r24, r28
   160d8:	df 91       	pop	r29
   160da:	cf 91       	pop	r28
   160dc:	1f 91       	pop	r17
   160de:	0f 91       	pop	r16
   160e0:	ff 90       	pop	r15
   160e2:	df 90       	pop	r13
   160e4:	cf 90       	pop	r12
   160e6:	bf 90       	pop	r11
   160e8:	af 90       	pop	r10
   160ea:	08 95       	ret

000160ec <startUDP(unsigned char, unsigned char*, unsigned int)>:
_Z8startUDPhPhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:374

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
   160ec:	0f 93       	push	r16
   160ee:	1f 93       	push	r17
   160f0:	cf 93       	push	r28
   160f2:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  if
   160f4:	90 81       	ld	r25, Z
   160f6:	91 11       	cpse	r25, r1
   160f8:	09 c0       	rjmp	.+18     	; 0x1610c <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   160fa:	91 81       	ldd	r25, Z+1	; 0x01
   160fc:	91 11       	cpse	r25, r1
   160fe:	06 c0       	rjmp	.+12     	; 0x1610c <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 1)
   16100:	92 81       	ldd	r25, Z+2	; 0x02
   16102:	91 11       	cpse	r25, r1
   16104:	03 c0       	rjmp	.+6      	; 0x1610c <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 3)
   16106:	93 81       	ldd	r25, Z+3	; 0x03
   16108:	99 23       	and	r25, r25
   1610a:	91 f0       	breq	.+36     	; 0x16130 <startUDP(unsigned char, unsigned char*, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 5)
   1610c:	41 15       	cp	r20, r1
   1610e:	51 05       	cpc	r21, r1
   16110:	79 f0       	breq	.+30     	; 0x16130 <startUDP(unsigned char, unsigned char*, unsigned int)+0x44>
   16112:	8a 01       	movw	r16, r20
   16114:	bf 01       	movw	r22, r30
   16116:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:385
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
   16118:	0e 94 d8 ae 	call	0x15db0	; 0x15db0 <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:386
    w5500.writeSnDPORT(s, port);
   1611c:	b8 01       	movw	r22, r16
   1611e:	8c 2f       	mov	r24, r28
   16120:	0e 94 10 af 	call	0x15e20	; 0x15e20 <W5500Class::writeSnDPORT(unsigned char, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:387
    return 1;
   16124:	81 e0       	ldi	r24, 0x01	; 1
   16126:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:389
  }
}
   16128:	cf 91       	pop	r28
   1612a:	1f 91       	pop	r17
   1612c:	0f 91       	pop	r16
   1612e:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
   16130:	90 e0       	ldi	r25, 0x00	; 0
   16132:	80 e0       	ldi	r24, 0x00	; 0
   16134:	f9 cf       	rjmp	.-14     	; 0x16128 <startUDP(unsigned char, unsigned char*, unsigned int)+0x3c>

00016136 <sendUDP(unsigned char)>:
_Z7sendUDPh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:392
    return 1;
  }
}

int sendUDP(SOCKET s)
{
   16136:	cf 93       	push	r28
   16138:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  w5500.execCmdSn(s, Sock_SEND);
   1613a:	40 e2       	ldi	r20, 0x20	; 32
   1613c:	50 e0       	ldi	r21, 0x00	; 0
   1613e:	68 2f       	mov	r22, r24
   16140:	8e e0       	ldi	r24, 0x0E	; 14
   16142:	91 e1       	ldi	r25, 0x11	; 17
   16144:	0e 94 01 b3 	call	0x16602	; 0x16602 <W5500Class::execCmdSn(unsigned char, SockCMD)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   16148:	8c 2f       	mov	r24, r28
   1614a:	0e 94 ed ae 	call	0x15dda	; 0x15dda <W5500Class::readSnIR(unsigned char)>
   1614e:	84 fd       	sbrc	r24, 4
   16150:	0d c0       	rjmp	.+26     	; 0x1616c <sendUDP(unsigned char)+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   16152:	8c 2f       	mov	r24, r28
   16154:	0e 94 ed ae 	call	0x15dda	; 0x15dda <W5500Class::readSnIR(unsigned char)>
   16158:	83 ff       	sbrs	r24, 3
   1615a:	f6 cf       	rjmp	.-20     	; 0x16148 <sendUDP(unsigned char)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:401
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
   1615c:	68 e1       	ldi	r22, 0x18	; 24
   1615e:	8c 2f       	mov	r24, r28
   16160:	0e 94 0b af 	call	0x15e16	; 0x15e16 <W5500Class::writeSnIR(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
      return 0;
   16164:	90 e0       	ldi	r25, 0x00	; 0
   16166:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:411
  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
}
   16168:	cf 91       	pop	r28
   1616a:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:407
      return 0;
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
   1616c:	60 e1       	ldi	r22, 0x10	; 16
   1616e:	8c 2f       	mov	r24, r28
   16170:	0e 94 0b af 	call	0x15e16	; 0x15e16 <W5500Class::writeSnIR(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* Sent ok */
  return 1;
   16174:	81 e0       	ldi	r24, 0x01	; 1
   16176:	90 e0       	ldi	r25, 0x00	; 0
   16178:	f7 cf       	rjmp	.-18     	; 0x16168 <sendUDP(unsigned char)+0x32>

0001617a <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:184
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
   1617a:	20 91 c0 10 	lds	r18, 0x10C0	; 0x8010c0 <SPIClass::interruptMode>
   1617e:	22 23       	and	r18, r18
   16180:	81 f0       	breq	.+32     	; 0x161a2 <SPIClass::beginTransaction(SPISettings)+0x28>
   16182:	3f b7       	in	r19, 0x3f	; 63
   16184:	f8 94       	cli
   16186:	20 91 c0 10 	lds	r18, 0x10C0	; 0x8010c0 <SPIClass::interruptMode>
   1618a:	21 30       	cpi	r18, 0x01	; 1
   1618c:	69 f4       	brne	.+26     	; 0x161a8 <SPIClass::beginTransaction(SPISettings)+0x2e>
   1618e:	2d b3       	in	r18, 0x1d	; 29
   16190:	20 93 be 10 	sts	0x10BE, r18	; 0x8010be <SPIClass::interruptSave>
   16194:	4d b3       	in	r20, 0x1d	; 29
   16196:	20 91 bf 10 	lds	r18, 0x10BF	; 0x8010bf <SPIClass::interruptMask>
   1619a:	20 95       	com	r18
   1619c:	24 23       	and	r18, r20
   1619e:	2d bb       	out	0x1d, r18	; 29
   161a0:	3f bf       	out	0x3f, r19	; 63
   161a2:	8c bd       	out	0x2c, r24	; 44
   161a4:	9d bd       	out	0x2d, r25	; 45
   161a6:	08 95       	ret
   161a8:	30 93 be 10 	sts	0x10BE, r19	; 0x8010be <SPIClass::interruptSave>
   161ac:	fa cf       	rjmp	.-12     	; 0x161a2 <SPIClass::beginTransaction(SPISettings)+0x28>

000161ae <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
   161ae:	8e bd       	out	0x2e, r24	; 46
   161b0:	00 00       	nop
   161b2:	0d b4       	in	r0, 0x2d	; 45
   161b4:	07 fe       	sbrs	r0, 7
   161b6:	fd cf       	rjmp	.-6      	; 0x161b2 <SPIClass::transfer(unsigned char)+0x4>
   161b8:	8e b5       	in	r24, 0x2e	; 46
   161ba:	08 95       	ret

000161bc <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
   161bc:	80 91 c0 10 	lds	r24, 0x10C0	; 0x8010c0 <SPIClass::interruptMode>
   161c0:	88 23       	and	r24, r24
   161c2:	61 f0       	breq	.+24     	; 0x161dc <SPIClass::endTransaction()+0x20>
   161c4:	9f b7       	in	r25, 0x3f	; 63
   161c6:	f8 94       	cli
   161c8:	20 91 c0 10 	lds	r18, 0x10C0	; 0x8010c0 <SPIClass::interruptMode>
   161cc:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <SPIClass::interruptSave>
   161d0:	21 30       	cpi	r18, 0x01	; 1
   161d2:	19 f4       	brne	.+6      	; 0x161da <SPIClass::endTransaction()+0x1e>
   161d4:	8d bb       	out	0x1d, r24	; 29
   161d6:	9f bf       	out	0x3f, r25	; 63
   161d8:	08 95       	ret
   161da:	8f bf       	out	0x3f, r24	; 63
   161dc:	08 95       	ret

000161de <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
   161de:	60 e0       	ldi	r22, 0x00	; 0
   161e0:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <SPI_CS>
   161e4:	0c 94 7d cd 	jmp	0x19afa	; 0x19afa <digitalWrite>

000161e8 <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
   161e8:	61 e0       	ldi	r22, 0x01	; 1
   161ea:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <SPI_CS>
   161ee:	0c 94 7d cd 	jmp	0x19afa	; 0x19afa <digitalWrite>

000161f2 <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
   161f2:	0f 93       	push	r16
   161f4:	1f 93       	push	r17
   161f6:	cf 93       	push	r28
   161f8:	df 93       	push	r29
   161fa:	18 2f       	mov	r17, r24
   161fc:	09 2f       	mov	r16, r25
   161fe:	d6 2f       	mov	r29, r22
   16200:	c4 2f       	mov	r28, r20
   16202:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <wiznet_SPI_settings>
   16206:	90 91 0d 11 	lds	r25, 0x110D	; 0x80110d <wiznet_SPI_settings+0x1>
   1620a:	0e 94 bd b0 	call	0x1617a	; 0x1617a <SPIClass::beginTransaction(SPISettings)>
   1620e:	0e 94 ef b0 	call	0x161de	; 0x161de <W5500Class::setSS()>
   16212:	80 2f       	mov	r24, r16
   16214:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   16218:	81 2f       	mov	r24, r17
   1621a:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   1621e:	8d 2f       	mov	r24, r29
   16220:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   16224:	8c 2f       	mov	r24, r28
   16226:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   1622a:	0e 94 f4 b0 	call	0x161e8	; 0x161e8 <W5500Class::resetSS()>
   1622e:	0e 94 de b0 	call	0x161bc	; 0x161bc <SPIClass::endTransaction()>
   16232:	81 e0       	ldi	r24, 0x01	; 1
   16234:	df 91       	pop	r29
   16236:	cf 91       	pop	r28
   16238:	1f 91       	pop	r17
   1623a:	0f 91       	pop	r16
   1623c:	08 95       	ret

0001623e <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
   1623e:	df 92       	push	r13
   16240:	ef 92       	push	r14
   16242:	ff 92       	push	r15
   16244:	0f 93       	push	r16
   16246:	1f 93       	push	r17
   16248:	cf 93       	push	r28
   1624a:	df 93       	push	r29
   1624c:	d8 2f       	mov	r29, r24
   1624e:	d9 2e       	mov	r13, r25
   16250:	c6 2f       	mov	r28, r22
   16252:	7a 01       	movw	r14, r20
   16254:	89 01       	movw	r16, r18
   16256:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <wiznet_SPI_settings>
   1625a:	90 91 0d 11 	lds	r25, 0x110D	; 0x80110d <wiznet_SPI_settings+0x1>
   1625e:	0e 94 bd b0 	call	0x1617a	; 0x1617a <SPIClass::beginTransaction(SPISettings)>
   16262:	0e 94 ef b0 	call	0x161de	; 0x161de <W5500Class::setSS()>
   16266:	8d 2d       	mov	r24, r13
   16268:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   1626c:	8d 2f       	mov	r24, r29
   1626e:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   16272:	8c 2f       	mov	r24, r28
   16274:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   16278:	e7 01       	movw	r28, r14
   1627a:	e0 0e       	add	r14, r16
   1627c:	f1 1e       	adc	r15, r17
   1627e:	ce 15       	cp	r28, r14
   16280:	df 05       	cpc	r29, r15
   16282:	21 f0       	breq	.+8      	; 0x1628c <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
   16284:	89 91       	ld	r24, Y+
   16286:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   1628a:	f9 cf       	rjmp	.-14     	; 0x1627e <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
   1628c:	0e 94 f4 b0 	call	0x161e8	; 0x161e8 <W5500Class::resetSS()>
   16290:	0e 94 de b0 	call	0x161bc	; 0x161bc <SPIClass::endTransaction()>
   16294:	c8 01       	movw	r24, r16
   16296:	df 91       	pop	r29
   16298:	cf 91       	pop	r28
   1629a:	1f 91       	pop	r17
   1629c:	0f 91       	pop	r16
   1629e:	ff 90       	pop	r15
   162a0:	ef 90       	pop	r14
   162a2:	df 90       	pop	r13
   162a4:	08 95       	ret

000162a6 <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
   162a6:	1f 93       	push	r17
   162a8:	cf 93       	push	r28
   162aa:	df 93       	push	r29
   162ac:	d8 2f       	mov	r29, r24
   162ae:	19 2f       	mov	r17, r25
   162b0:	c6 2f       	mov	r28, r22
   162b2:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <wiznet_SPI_settings>
   162b6:	90 91 0d 11 	lds	r25, 0x110D	; 0x80110d <wiznet_SPI_settings+0x1>
   162ba:	0e 94 bd b0 	call	0x1617a	; 0x1617a <SPIClass::beginTransaction(SPISettings)>
   162be:	0e 94 ef b0 	call	0x161de	; 0x161de <W5500Class::setSS()>
   162c2:	81 2f       	mov	r24, r17
   162c4:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   162c8:	8d 2f       	mov	r24, r29
   162ca:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   162ce:	8c 2f       	mov	r24, r28
   162d0:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   162d4:	80 e0       	ldi	r24, 0x00	; 0
   162d6:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   162da:	c8 2f       	mov	r28, r24
   162dc:	0e 94 f4 b0 	call	0x161e8	; 0x161e8 <W5500Class::resetSS()>
   162e0:	0e 94 de b0 	call	0x161bc	; 0x161bc <SPIClass::endTransaction()>
   162e4:	8c 2f       	mov	r24, r28
   162e6:	df 91       	pop	r29
   162e8:	cf 91       	pop	r28
   162ea:	1f 91       	pop	r17
   162ec:	08 95       	ret

000162ee <W5500Class::init(unsigned char)>:
_ZN10W5500Class4initEh():
   162ee:	0f 93       	push	r16
   162f0:	1f 93       	push	r17
   162f2:	cf 93       	push	r28
   162f4:	60 93 0b 11 	sts	0x110B, r22	; 0x80110b <SPI_CS>
   162f8:	68 ee       	ldi	r22, 0xE8	; 232
   162fa:	73 e0       	ldi	r23, 0x03	; 3
   162fc:	80 e0       	ldi	r24, 0x00	; 0
   162fe:	90 e0       	ldi	r25, 0x00	; 0
   16300:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
_ZN10W5500Class6initSSEv():
   16304:	61 e0       	ldi	r22, 0x01	; 1
   16306:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <SPI_CS>
   1630a:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
_ZN10W5500Class4initEh():
   1630e:	0e 94 66 a5 	call	0x14acc	; 0x14acc <SPIClass::begin()>
_ZN10W5500Class6readMREv():
   16312:	60 e0       	ldi	r22, 0x00	; 0
   16314:	90 e0       	ldi	r25, 0x00	; 0
   16316:	80 e0       	ldi	r24, 0x00	; 0
   16318:	0e 94 53 b1 	call	0x162a6	; 0x162a6 <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv():
   1631c:	48 2f       	mov	r20, r24
   1631e:	40 68       	ori	r20, 0x80	; 128
_ZN10W5500Class7writeMREh():
   16320:	64 e0       	ldi	r22, 0x04	; 4
   16322:	90 e0       	ldi	r25, 0x00	; 0
   16324:	80 e0       	ldi	r24, 0x00	; 0
   16326:	0e 94 f9 b0 	call	0x161f2	; 0x161f2 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   1632a:	cc e0       	ldi	r28, 0x0C	; 12
   1632c:	08 e0       	ldi	r16, 0x08	; 8
   1632e:	10 e0       	ldi	r17, 0x00	; 0
_ZN10W5500Class4initEh():
   16330:	42 e0       	ldi	r20, 0x02	; 2
   16332:	6c 2f       	mov	r22, r28
   16334:	8e e1       	ldi	r24, 0x1E	; 30
   16336:	90 e0       	ldi	r25, 0x00	; 0
   16338:	0e 94 f9 b0 	call	0x161f2	; 0x161f2 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   1633c:	42 e0       	ldi	r20, 0x02	; 2
   1633e:	6c 2f       	mov	r22, r28
   16340:	8f e1       	ldi	r24, 0x1F	; 31
   16342:	90 e0       	ldi	r25, 0x00	; 0
   16344:	0e 94 f9 b0 	call	0x161f2	; 0x161f2 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   16348:	01 50       	subi	r16, 0x01	; 1
   1634a:	11 09       	sbc	r17, r1
   1634c:	c0 5e       	subi	r28, 0xE0	; 224
   1634e:	01 15       	cp	r16, r1
   16350:	11 05       	cpc	r17, r1
   16352:	71 f7       	brne	.-36     	; 0x16330 <W5500Class::init(unsigned char)+0x42>
   16354:	cf 91       	pop	r28
   16356:	1f 91       	pop	r17
   16358:	0f 91       	pop	r16
   1635a:	08 95       	ret

0001635c <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
   1635c:	1f 93       	push	r17
   1635e:	cf 93       	push	r28
   16360:	df 93       	push	r29
   16362:	18 2f       	mov	r17, r24
   16364:	60 e2       	ldi	r22, 0x20	; 32
   16366:	70 e0       	ldi	r23, 0x00	; 0
   16368:	0e 94 e4 ae 	call	0x15dc8	; 0x15dc8 <W5500Class::readSn(unsigned char, unsigned int)>
   1636c:	c8 2f       	mov	r28, r24
   1636e:	d0 e0       	ldi	r29, 0x00	; 0
   16370:	dc 2f       	mov	r29, r28
   16372:	cc 27       	eor	r28, r28
   16374:	61 e2       	ldi	r22, 0x21	; 33
   16376:	70 e0       	ldi	r23, 0x00	; 0
   16378:	81 2f       	mov	r24, r17
   1637a:	0e 94 e4 ae 	call	0x15dc8	; 0x15dc8 <W5500Class::readSn(unsigned char, unsigned int)>
   1637e:	8c 0f       	add	r24, r28
   16380:	9d 2f       	mov	r25, r29
   16382:	91 1d       	adc	r25, r1
   16384:	df 91       	pop	r29
   16386:	cf 91       	pop	r28
   16388:	1f 91       	pop	r17
   1638a:	08 95       	ret

0001638c <W5500Class::getTXFreeSize(unsigned char)>:
_ZN10W5500Class13getTXFreeSizeEh():
   1638c:	ff 92       	push	r15
   1638e:	0f 93       	push	r16
   16390:	1f 93       	push	r17
   16392:	cf 93       	push	r28
   16394:	df 93       	push	r29
   16396:	f6 2e       	mov	r15, r22
   16398:	d0 e0       	ldi	r29, 0x00	; 0
   1639a:	c0 e0       	ldi	r28, 0x00	; 0
   1639c:	8f 2d       	mov	r24, r15
   1639e:	0e 94 ae b1 	call	0x1635c	; 0x1635c <W5500Class::readSnTX_FSR(unsigned char)>
   163a2:	8c 01       	movw	r16, r24
   163a4:	89 2b       	or	r24, r25
   163a6:	21 f0       	breq	.+8      	; 0x163b0 <W5500Class::getTXFreeSize(unsigned char)+0x24>
   163a8:	8f 2d       	mov	r24, r15
   163aa:	0e 94 ae b1 	call	0x1635c	; 0x1635c <W5500Class::readSnTX_FSR(unsigned char)>
   163ae:	ec 01       	movw	r28, r24
   163b0:	c0 17       	cp	r28, r16
   163b2:	d1 07       	cpc	r29, r17
   163b4:	99 f7       	brne	.-26     	; 0x1639c <W5500Class::getTXFreeSize(unsigned char)+0x10>
   163b6:	ce 01       	movw	r24, r28
   163b8:	df 91       	pop	r29
   163ba:	cf 91       	pop	r28
   163bc:	1f 91       	pop	r17
   163be:	0f 91       	pop	r16
   163c0:	ff 90       	pop	r15
   163c2:	08 95       	ret

000163c4 <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
   163c4:	1f 93       	push	r17
   163c6:	cf 93       	push	r28
   163c8:	df 93       	push	r29
   163ca:	18 2f       	mov	r17, r24
   163cc:	66 e2       	ldi	r22, 0x26	; 38
   163ce:	70 e0       	ldi	r23, 0x00	; 0
   163d0:	0e 94 e4 ae 	call	0x15dc8	; 0x15dc8 <W5500Class::readSn(unsigned char, unsigned int)>
   163d4:	c8 2f       	mov	r28, r24
   163d6:	d0 e0       	ldi	r29, 0x00	; 0
   163d8:	dc 2f       	mov	r29, r28
   163da:	cc 27       	eor	r28, r28
   163dc:	67 e2       	ldi	r22, 0x27	; 39
   163de:	70 e0       	ldi	r23, 0x00	; 0
   163e0:	81 2f       	mov	r24, r17
   163e2:	0e 94 e4 ae 	call	0x15dc8	; 0x15dc8 <W5500Class::readSn(unsigned char, unsigned int)>
   163e6:	8c 0f       	add	r24, r28
   163e8:	9d 2f       	mov	r25, r29
   163ea:	91 1d       	adc	r25, r1
   163ec:	df 91       	pop	r29
   163ee:	cf 91       	pop	r28
   163f0:	1f 91       	pop	r17
   163f2:	08 95       	ret

000163f4 <W5500Class::getRXReceivedSize(unsigned char)>:
_ZN10W5500Class17getRXReceivedSizeEh():
   163f4:	ff 92       	push	r15
   163f6:	0f 93       	push	r16
   163f8:	1f 93       	push	r17
   163fa:	cf 93       	push	r28
   163fc:	df 93       	push	r29
   163fe:	f6 2e       	mov	r15, r22
   16400:	d0 e0       	ldi	r29, 0x00	; 0
   16402:	c0 e0       	ldi	r28, 0x00	; 0
   16404:	8f 2d       	mov	r24, r15
   16406:	0e 94 e2 b1 	call	0x163c4	; 0x163c4 <W5500Class::readSnRX_RSR(unsigned char)>
   1640a:	8c 01       	movw	r16, r24
   1640c:	89 2b       	or	r24, r25
   1640e:	21 f0       	breq	.+8      	; 0x16418 <W5500Class::getRXReceivedSize(unsigned char)+0x24>
   16410:	8f 2d       	mov	r24, r15
   16412:	0e 94 e2 b1 	call	0x163c4	; 0x163c4 <W5500Class::readSnRX_RSR(unsigned char)>
   16416:	ec 01       	movw	r28, r24
   16418:	c0 17       	cp	r28, r16
   1641a:	d1 07       	cpc	r29, r17
   1641c:	99 f7       	brne	.-26     	; 0x16404 <W5500Class::getRXReceivedSize(unsigned char)+0x10>
   1641e:	ce 01       	movw	r24, r28
   16420:	df 91       	pop	r29
   16422:	cf 91       	pop	r28
   16424:	1f 91       	pop	r17
   16426:	0f 91       	pop	r16
   16428:	ff 90       	pop	r15
   1642a:	08 95       	ret

0001642c <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   1642c:	bf 92       	push	r11
   1642e:	cf 92       	push	r12
   16430:	df 92       	push	r13
   16432:	ef 92       	push	r14
   16434:	ff 92       	push	r15
   16436:	0f 93       	push	r16
   16438:	1f 93       	push	r17
   1643a:	cf 93       	push	r28
   1643c:	df 93       	push	r29
   1643e:	b6 2e       	mov	r11, r22
   16440:	7a 01       	movw	r14, r20
   16442:	69 01       	movw	r12, r18
_ZN10W5500Class11readSnTX_WREh():
   16444:	64 e2       	ldi	r22, 0x24	; 36
   16446:	70 e0       	ldi	r23, 0x00	; 0
   16448:	8b 2d       	mov	r24, r11
   1644a:	0e 94 e4 ae 	call	0x15dc8	; 0x15dc8 <W5500Class::readSn(unsigned char, unsigned int)>
   1644e:	c8 2f       	mov	r28, r24
   16450:	65 e2       	ldi	r22, 0x25	; 37
   16452:	70 e0       	ldi	r23, 0x00	; 0
   16454:	8b 2d       	mov	r24, r11
   16456:	0e 94 e4 ae 	call	0x15dc8	; 0x15dc8 <W5500Class::readSn(unsigned char, unsigned int)>
   1645a:	d0 e0       	ldi	r29, 0x00	; 0
   1645c:	dc 2f       	mov	r29, r28
   1645e:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   16460:	8e 0d       	add	r24, r14
   16462:	9f 2d       	mov	r25, r15
   16464:	91 1d       	adc	r25, r1
   16466:	c8 0f       	add	r28, r24
   16468:	d9 1f       	adc	r29, r25
   1646a:	6b 2d       	mov	r22, r11
   1646c:	62 95       	swap	r22
   1646e:	66 0f       	add	r22, r22
   16470:	60 7e       	andi	r22, 0xE0	; 224
   16472:	6c 5e       	subi	r22, 0xEC	; 236
   16474:	98 01       	movw	r18, r16
   16476:	a6 01       	movw	r20, r12
   16478:	ce 01       	movw	r24, r28
   1647a:	0e 94 1f b1 	call	0x1623e	; 0x1623e <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
   1647e:	0c 0f       	add	r16, r28
   16480:	1d 1f       	adc	r17, r29
_ZN10W5500Class12writeSnTX_WREhj():
   16482:	41 2f       	mov	r20, r17
   16484:	64 e2       	ldi	r22, 0x24	; 36
   16486:	70 e0       	ldi	r23, 0x00	; 0
   16488:	8b 2d       	mov	r24, r11
   1648a:	0e 94 f1 ae 	call	0x15de2	; 0x15de2 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1648e:	40 2f       	mov	r20, r16
   16490:	65 e2       	ldi	r22, 0x25	; 37
   16492:	70 e0       	ldi	r23, 0x00	; 0
   16494:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   16496:	df 91       	pop	r29
   16498:	cf 91       	pop	r28
   1649a:	1f 91       	pop	r17
   1649c:	0f 91       	pop	r16
   1649e:	ff 90       	pop	r15
   164a0:	ef 90       	pop	r14
   164a2:	df 90       	pop	r13
   164a4:	cf 90       	pop	r12
   164a6:	bf 90       	pop	r11
_ZN10W5500Class12writeSnTX_WREhj():
   164a8:	0c 94 f1 ae 	jmp	0x15de2	; 0x15de2 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

000164ac <W5500Class::send_data_processing(unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class20send_data_processingEhPKhj():
   164ac:	0f 93       	push	r16
   164ae:	1f 93       	push	r17
   164b0:	89 01       	movw	r16, r18
   164b2:	9a 01       	movw	r18, r20
   164b4:	50 e0       	ldi	r21, 0x00	; 0
   164b6:	40 e0       	ldi	r20, 0x00	; 0
   164b8:	0e 94 16 b2 	call	0x1642c	; 0x1642c <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>
   164bc:	1f 91       	pop	r17
   164be:	0f 91       	pop	r16
   164c0:	08 95       	ret

000164c2 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)>:
_ZN10W5500Class4readEjhPhj():
   164c2:	df 92       	push	r13
   164c4:	ef 92       	push	r14
   164c6:	ff 92       	push	r15
   164c8:	0f 93       	push	r16
   164ca:	1f 93       	push	r17
   164cc:	cf 93       	push	r28
   164ce:	df 93       	push	r29
   164d0:	d8 2f       	mov	r29, r24
   164d2:	d9 2e       	mov	r13, r25
   164d4:	c6 2f       	mov	r28, r22
   164d6:	7a 01       	movw	r14, r20
   164d8:	89 01       	movw	r16, r18
   164da:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <wiznet_SPI_settings>
   164de:	90 91 0d 11 	lds	r25, 0x110D	; 0x80110d <wiznet_SPI_settings+0x1>
   164e2:	0e 94 bd b0 	call	0x1617a	; 0x1617a <SPIClass::beginTransaction(SPISettings)>
   164e6:	0e 94 ef b0 	call	0x161de	; 0x161de <W5500Class::setSS()>
   164ea:	8d 2d       	mov	r24, r13
   164ec:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   164f0:	8d 2f       	mov	r24, r29
   164f2:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   164f6:	8c 2f       	mov	r24, r28
   164f8:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   164fc:	e7 01       	movw	r28, r14
   164fe:	e0 0e       	add	r14, r16
   16500:	f1 1e       	adc	r15, r17
   16502:	ce 15       	cp	r28, r14
   16504:	df 05       	cpc	r29, r15
   16506:	29 f0       	breq	.+10     	; 0x16512 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)+0x50>
   16508:	80 e0       	ldi	r24, 0x00	; 0
   1650a:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   1650e:	89 93       	st	Y+, r24
   16510:	f8 cf       	rjmp	.-16     	; 0x16502 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)+0x40>
   16512:	0e 94 f4 b0 	call	0x161e8	; 0x161e8 <W5500Class::resetSS()>
   16516:	0e 94 de b0 	call	0x161bc	; 0x161bc <SPIClass::endTransaction()>
   1651a:	c8 01       	movw	r24, r16
   1651c:	df 91       	pop	r29
   1651e:	cf 91       	pop	r28
   16520:	1f 91       	pop	r17
   16522:	0f 91       	pop	r16
   16524:	ff 90       	pop	r15
   16526:	ef 90       	pop	r14
   16528:	df 90       	pop	r13
   1652a:	08 95       	ret

0001652c <W5500Class::read_data(unsigned char, unsigned int, unsigned char volatile*, unsigned int)>:
_ZN10W5500Class9read_dataEhjPVhj():
   1652c:	0f 93       	push	r16
   1652e:	1f 93       	push	r17
   16530:	cf 93       	push	r28
   16532:	df 93       	push	r29
   16534:	1f 92       	push	r1
   16536:	1f 92       	push	r1
   16538:	cd b7       	in	r28, 0x3d	; 61
   1653a:	de b7       	in	r29, 0x3e	; 62
   1653c:	5a 83       	std	Y+2, r21	; 0x02
   1653e:	49 83       	std	Y+1, r20	; 0x01
   16540:	a9 01       	movw	r20, r18
   16542:	98 01       	movw	r18, r16
   16544:	89 81       	ldd	r24, Y+1	; 0x01
   16546:	9a 81       	ldd	r25, Y+2	; 0x02
   16548:	62 95       	swap	r22
   1654a:	66 0f       	add	r22, r22
   1654c:	60 7e       	andi	r22, 0xE0	; 224
   1654e:	68 5e       	subi	r22, 0xE8	; 232
   16550:	0f 90       	pop	r0
   16552:	0f 90       	pop	r0
   16554:	df 91       	pop	r29
   16556:	cf 91       	pop	r28
   16558:	1f 91       	pop	r17
   1655a:	0f 91       	pop	r16
   1655c:	0c 94 61 b2 	jmp	0x164c2	; 0x164c2 <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)>

00016560 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>:
_ZN10W5500Class20recv_data_processingEhPhjh():
   16560:	8f 92       	push	r8
   16562:	9f 92       	push	r9
   16564:	af 92       	push	r10
   16566:	bf 92       	push	r11
   16568:	cf 92       	push	r12
   1656a:	df 92       	push	r13
   1656c:	ef 92       	push	r14
   1656e:	ff 92       	push	r15
   16570:	0f 93       	push	r16
   16572:	1f 93       	push	r17
   16574:	cf 93       	push	r28
   16576:	df 93       	push	r29
   16578:	6c 01       	movw	r12, r24
   1657a:	96 2e       	mov	r9, r22
   1657c:	5a 01       	movw	r10, r20
   1657e:	79 01       	movw	r14, r18
   16580:	80 2e       	mov	r8, r16
_ZN10W5500Class11readSnRX_RDEh():
   16582:	68 e2       	ldi	r22, 0x28	; 40
   16584:	70 e0       	ldi	r23, 0x00	; 0
   16586:	89 2d       	mov	r24, r9
   16588:	0e 94 e4 ae 	call	0x15dc8	; 0x15dc8 <W5500Class::readSn(unsigned char, unsigned int)>
   1658c:	c8 2f       	mov	r28, r24
   1658e:	d0 e0       	ldi	r29, 0x00	; 0
   16590:	dc 2f       	mov	r29, r28
   16592:	cc 27       	eor	r28, r28
   16594:	69 e2       	ldi	r22, 0x29	; 41
   16596:	70 e0       	ldi	r23, 0x00	; 0
   16598:	89 2d       	mov	r24, r9
   1659a:	0e 94 e4 ae 	call	0x15dc8	; 0x15dc8 <W5500Class::readSn(unsigned char, unsigned int)>
   1659e:	c8 0f       	add	r28, r24
   165a0:	d1 1d       	adc	r29, r1
_ZN10W5500Class20recv_data_processingEhPhjh():
   165a2:	87 01       	movw	r16, r14
   165a4:	95 01       	movw	r18, r10
   165a6:	ae 01       	movw	r20, r28
   165a8:	69 2d       	mov	r22, r9
   165aa:	c6 01       	movw	r24, r12
   165ac:	0e 94 96 b2 	call	0x1652c	; 0x1652c <W5500Class::read_data(unsigned char, unsigned int, unsigned char volatile*, unsigned int)>
   165b0:	81 10       	cpse	r8, r1
   165b2:	1a c0       	rjmp	.+52     	; 0x165e8 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)+0x88>
   165b4:	ce 0d       	add	r28, r14
   165b6:	df 1d       	adc	r29, r15
_ZN10W5500Class12writeSnRX_RDEhj():
   165b8:	4d 2f       	mov	r20, r29
   165ba:	68 e2       	ldi	r22, 0x28	; 40
   165bc:	70 e0       	ldi	r23, 0x00	; 0
   165be:	89 2d       	mov	r24, r9
   165c0:	0e 94 f1 ae 	call	0x15de2	; 0x15de2 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   165c4:	4c 2f       	mov	r20, r28
   165c6:	69 e2       	ldi	r22, 0x29	; 41
   165c8:	70 e0       	ldi	r23, 0x00	; 0
   165ca:	89 2d       	mov	r24, r9
_ZN10W5500Class20recv_data_processingEhPhjh():
   165cc:	df 91       	pop	r29
   165ce:	cf 91       	pop	r28
   165d0:	1f 91       	pop	r17
   165d2:	0f 91       	pop	r16
   165d4:	ff 90       	pop	r15
   165d6:	ef 90       	pop	r14
   165d8:	df 90       	pop	r13
   165da:	cf 90       	pop	r12
   165dc:	bf 90       	pop	r11
   165de:	af 90       	pop	r10
   165e0:	9f 90       	pop	r9
   165e2:	8f 90       	pop	r8
_ZN10W5500Class12writeSnRX_RDEhj():
   165e4:	0c 94 f1 ae 	jmp	0x15de2	; 0x15de2 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh():
   165e8:	df 91       	pop	r29
   165ea:	cf 91       	pop	r28
   165ec:	1f 91       	pop	r17
   165ee:	0f 91       	pop	r16
   165f0:	ff 90       	pop	r15
   165f2:	ef 90       	pop	r14
   165f4:	df 90       	pop	r13
   165f6:	cf 90       	pop	r12
   165f8:	bf 90       	pop	r11
   165fa:	af 90       	pop	r10
   165fc:	9f 90       	pop	r9
   165fe:	8f 90       	pop	r8
   16600:	08 95       	ret

00016602 <W5500Class::execCmdSn(unsigned char, SockCMD)>:
_ZN10W5500Class9execCmdSnEh7SockCMD():
   16602:	cf 93       	push	r28
   16604:	c6 2f       	mov	r28, r22
_ZN10W5500Class9writeSnCREhh():
   16606:	61 e0       	ldi	r22, 0x01	; 1
   16608:	70 e0       	ldi	r23, 0x00	; 0
   1660a:	8c 2f       	mov	r24, r28
   1660c:	0e 94 f1 ae 	call	0x15de2	; 0x15de2 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class8readSnCREh():
   16610:	61 e0       	ldi	r22, 0x01	; 1
   16612:	70 e0       	ldi	r23, 0x00	; 0
   16614:	8c 2f       	mov	r24, r28
   16616:	0e 94 e4 ae 	call	0x15dc8	; 0x15dc8 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD():
   1661a:	81 11       	cpse	r24, r1
   1661c:	f9 cf       	rjmp	.-14     	; 0x16610 <W5500Class::execCmdSn(unsigned char, SockCMD)+0xe>
   1661e:	cf 91       	pop	r28
   16620:	08 95       	ret

00016622 <_GLOBAL__sub_I_w5500>:
_ZN11SPISettings17init_AlwaysInlineEmhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:149

    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
   16622:	ec e0       	ldi	r30, 0x0C	; 12
   16624:	f1 e1       	ldi	r31, 0x11	; 17
   16626:	80 e5       	ldi	r24, 0x50	; 80
   16628:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:151
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    spsr = clockDiv & SPI_2XCLOCK_MASK;
   1662a:	81 e0       	ldi	r24, 0x01	; 1
   1662c:	81 83       	std	Z+1, r24	; 0x01
_GLOBAL__sub_I_w5500():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:184
   1662e:	08 95       	ret

00016630 <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:98
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}
   16630:	cf 92       	push	r12
   16632:	df 92       	push	r13
   16634:	ef 92       	push	r14
   16636:	ff 92       	push	r15
   16638:	0f 93       	push	r16
   1663a:	1f 93       	push	r17
   1663c:	cf 93       	push	r28
   1663e:	df 93       	push	r29
   16640:	00 d0       	rcall	.+0      	; 0x16642 <EEPROMreadFloat(unsigned int)+0x12>
   16642:	1f 92       	push	r1
   16644:	cd b7       	in	r28, 0x3d	; 61
   16646:	de b7       	in	r29, 0x3e	; 62
   16648:	7e 01       	movw	r14, r28
   1664a:	25 e0       	ldi	r18, 0x05	; 5
   1664c:	e2 0e       	add	r14, r18
   1664e:	f1 1c       	adc	r15, r1
   16650:	8e 01       	movw	r16, r28
   16652:	0f 5f       	subi	r16, 0xFF	; 255
   16654:	1f 4f       	sbci	r17, 0xFF	; 255
_ZNK5EERefdeEv():
   16656:	6c 01       	movw	r12, r24
   16658:	c0 1a       	sub	r12, r16
   1665a:	d1 0a       	sbc	r13, r17
   1665c:	c6 01       	movw	r24, r12
   1665e:	80 0f       	add	r24, r16
   16660:	91 1f       	adc	r25, r17
   16662:	0e 94 79 df 	call	0x1bef2	; 0x1bef2 <eeprom_read_byte>
_Z15EEPROMreadFloatj():
   16666:	f8 01       	movw	r30, r16
   16668:	81 93       	st	Z+, r24
   1666a:	8f 01       	movw	r16, r30
   1666c:	ee 15       	cp	r30, r14
   1666e:	ff 05       	cpc	r31, r15
   16670:	a9 f7       	brne	.-22     	; 0x1665c <EEPROMreadFloat(unsigned int)+0x2c>
   16672:	69 81       	ldd	r22, Y+1	; 0x01
   16674:	7a 81       	ldd	r23, Y+2	; 0x02
   16676:	8b 81       	ldd	r24, Y+3	; 0x03
   16678:	9c 81       	ldd	r25, Y+4	; 0x04
   1667a:	0f 90       	pop	r0
   1667c:	0f 90       	pop	r0
   1667e:	0f 90       	pop	r0
   16680:	0f 90       	pop	r0
   16682:	df 91       	pop	r29
   16684:	cf 91       	pop	r28
   16686:	1f 91       	pop	r17
   16688:	0f 91       	pop	r16
   1668a:	ff 90       	pop	r15
   1668c:	ef 90       	pop	r14
   1668e:	df 90       	pop	r13
   16690:	cf 90       	pop	r12
   16692:	08 95       	ret

00016694 <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
   16694:	cf 92       	push	r12
   16696:	df 92       	push	r13
   16698:	ef 92       	push	r14
   1669a:	ff 92       	push	r15
   1669c:	0f 93       	push	r16
   1669e:	1f 93       	push	r17
   166a0:	cf 93       	push	r28
   166a2:	df 93       	push	r29
   166a4:	00 d0       	rcall	.+0      	; 0x166a6 <EEPROMwriteFloat(unsigned int, float)+0x12>
   166a6:	1f 92       	push	r1
   166a8:	cd b7       	in	r28, 0x3d	; 61
   166aa:	de b7       	in	r29, 0x3e	; 62
   166ac:	6c 01       	movw	r12, r24
   166ae:	49 83       	std	Y+1, r20	; 0x01
   166b0:	5a 83       	std	Y+2, r21	; 0x02
   166b2:	6b 83       	std	Y+3, r22	; 0x03
   166b4:	7c 83       	std	Y+4, r23	; 0x04
   166b6:	ce 01       	movw	r24, r28
   166b8:	01 96       	adiw	r24, 0x01	; 1
   166ba:	7c 01       	movw	r14, r24
   166bc:	10 e0       	ldi	r17, 0x00	; 0
   166be:	00 e0       	ldi	r16, 0x00	; 0
   166c0:	f7 01       	movw	r30, r14
   166c2:	61 91       	ld	r22, Z+
   166c4:	7f 01       	movw	r14, r30
_ZN5EERefaSEh():
   166c6:	c8 01       	movw	r24, r16
   166c8:	8c 0d       	add	r24, r12
   166ca:	9d 1d       	adc	r25, r13
   166cc:	0e 94 81 df 	call	0x1bf02	; 0x1bf02 <eeprom_write_byte>
_Z16EEPROMwriteFloatjf():
   166d0:	0f 5f       	subi	r16, 0xFF	; 255
   166d2:	1f 4f       	sbci	r17, 0xFF	; 255
   166d4:	04 30       	cpi	r16, 0x04	; 4
   166d6:	11 05       	cpc	r17, r1
   166d8:	99 f7       	brne	.-26     	; 0x166c0 <EEPROMwriteFloat(unsigned int, float)+0x2c>
   166da:	0f 90       	pop	r0
   166dc:	0f 90       	pop	r0
   166de:	0f 90       	pop	r0
   166e0:	0f 90       	pop	r0
   166e2:	df 91       	pop	r29
   166e4:	cf 91       	pop	r28
   166e6:	1f 91       	pop	r17
   166e8:	0f 91       	pop	r16
   166ea:	ff 90       	pop	r15
   166ec:	ef 90       	pop	r14
   166ee:	df 90       	pop	r13
   166f0:	cf 90       	pop	r12
   166f2:	08 95       	ret

000166f4 <float_to_int(float)>:
_Z12float_to_intf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102

int float_to_int(float x)
{
 return x;
   166f4:	0e 94 dc d1 	call	0x1a3b8	; 0x1a3b8 <__fixsfsi>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
}
   166f8:	cb 01       	movw	r24, r22
   166fa:	08 95       	ret

000166fc <parseBytes(char const*, char, unsigned char*, int, int)>:
_Z10parseBytesPKccPhii():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:105

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
   166fc:	8f 92       	push	r8
   166fe:	9f 92       	push	r9
   16700:	af 92       	push	r10
   16702:	bf 92       	push	r11
   16704:	cf 92       	push	r12
   16706:	df 92       	push	r13
   16708:	ef 92       	push	r14
   1670a:	ff 92       	push	r15
   1670c:	0f 93       	push	r16
   1670e:	1f 93       	push	r17
   16710:	cf 93       	push	r28
   16712:	df 93       	push	r29
   16714:	ec 01       	movw	r28, r24
   16716:	5a 01       	movw	r10, r20
   16718:	49 01       	movw	r8, r18
   1671a:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:108
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   1671c:	c6 2e       	mov	r12, r22
   1671e:	66 0f       	add	r22, r22
   16720:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106 (discriminator 1)
{
 return x;
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   16722:	c7 01       	movw	r24, r14
   16724:	8a 19       	sub	r24, r10
   16726:	9b 09       	sbc	r25, r11
   16728:	88 15       	cp	r24, r8
   1672a:	99 05       	cpc	r25, r9
   1672c:	b4 f4       	brge	.+44     	; 0x1675a <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   1672e:	a8 01       	movw	r20, r16
   16730:	70 e0       	ldi	r23, 0x00	; 0
   16732:	60 e0       	ldi	r22, 0x00	; 0
   16734:	ce 01       	movw	r24, r28
   16736:	0e 94 01 d6 	call	0x1ac02	; 0x1ac02 <strtoul>
   1673a:	f7 01       	movw	r30, r14
   1673c:	61 93       	st	Z+, r22
   1673e:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:108
    str = strchr(str, sep);               // Find next separator
   16740:	b6 01       	movw	r22, r12
   16742:	ce 01       	movw	r24, r28
   16744:	0e 94 5e d7 	call	0x1aebc	; 0x1aebc <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109
    if (str == NULL || *str == '\0') {
   16748:	00 97       	sbiw	r24, 0x00	; 0
   1674a:	39 f0       	breq	.+14     	; 0x1675a <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109 (discriminator 1)
   1674c:	fc 01       	movw	r30, r24
   1674e:	20 81       	ld	r18, Z
   16750:	22 23       	and	r18, r18
   16752:	19 f0       	breq	.+6      	; 0x1675a <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:112 (discriminator 2)
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
   16754:	ec 01       	movw	r28, r24
   16756:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106 (discriminator 2)
{
 return x;
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   16758:	e4 cf       	rjmp	.-56     	; 0x16722 <parseBytes(char const*, char, unsigned char*, int, int)+0x26>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:114
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
   1675a:	df 91       	pop	r29
   1675c:	cf 91       	pop	r28
   1675e:	1f 91       	pop	r17
   16760:	0f 91       	pop	r16
   16762:	ff 90       	pop	r15
   16764:	ef 90       	pop	r14
   16766:	df 90       	pop	r13
   16768:	cf 90       	pop	r12
   1676a:	bf 90       	pop	r11
   1676c:	af 90       	pop	r10
   1676e:	9f 90       	pop	r9
   16770:	8f 90       	pop	r8
   16772:	08 95       	ret

00016774 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
   16774:	3f 92       	push	r3
   16776:	4f 92       	push	r4
   16778:	5f 92       	push	r5
   1677a:	6f 92       	push	r6
   1677c:	7f 92       	push	r7
   1677e:	8f 92       	push	r8
   16780:	9f 92       	push	r9
   16782:	af 92       	push	r10
   16784:	bf 92       	push	r11
   16786:	cf 92       	push	r12
   16788:	df 92       	push	r13
   1678a:	ef 92       	push	r14
   1678c:	ff 92       	push	r15
   1678e:	0f 93       	push	r16
   16790:	1f 93       	push	r17
   16792:	cf 93       	push	r28
   16794:	df 93       	push	r29
   16796:	00 d0       	rcall	.+0      	; 0x16798 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
   16798:	00 d0       	rcall	.+0      	; 0x1679a <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x26>
   1679a:	1f 92       	push	r1
   1679c:	1f 92       	push	r1
   1679e:	cd b7       	in	r28, 0x3d	; 61
   167a0:	de b7       	in	r29, 0x3e	; 62
   167a2:	5c 01       	movw	r10, r24
   167a4:	36 2e       	mov	r3, r22
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121
  char tmp1[8];
  str[0] = 0;
   167a6:	fc 01       	movw	r30, r24
   167a8:	10 82       	st	Z, r1
   167aa:	2a 01       	movw	r4, r20
   167ac:	c2 2e       	mov	r12, r18
   167ae:	d1 2c       	mov	r13, r1
   167b0:	f1 2c       	mov	r15, r1
   167b2:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   167b4:	60 2e       	mov	r6, r16
   167b6:	71 2c       	mov	r7, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   167b8:	8e 01       	movw	r16, r28
   167ba:	0f 5f       	subi	r16, 0xFF	; 255
   167bc:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:128
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   167be:	46 01       	movw	r8, r12
   167c0:	f1 e0       	ldi	r31, 0x01	; 1
   167c2:	8f 1a       	sub	r8, r31
   167c4:	91 08       	sbc	r9, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122 (discriminator 1)

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   167c6:	ec 14       	cp	r14, r12
   167c8:	fd 04       	cpc	r15, r13
   167ca:	39 f1       	breq	.+78     	; 0x1681a <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0xa6>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
  {
    itoa(bytes[a], tmp1, base);
   167cc:	f2 01       	movw	r30, r4
   167ce:	81 91       	ld	r24, Z+
   167d0:	2f 01       	movw	r4, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
   167d2:	a3 01       	movw	r20, r6
   167d4:	b8 01       	movw	r22, r16
   167d6:	90 e0       	ldi	r25, 0x00	; 0
   167d8:	0e 94 bd d7 	call	0x1af7a	; 0x1af7a <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    if (strlen(tmp1) < 2)
   167dc:	f8 01       	movw	r30, r16
   167de:	01 90       	ld	r0, Z+
   167e0:	00 20       	and	r0, r0
   167e2:	e9 f7       	brne	.-6      	; 0x167de <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x6a>
   167e4:	31 97       	sbiw	r30, 0x01	; 1
   167e6:	e0 1b       	sub	r30, r16
   167e8:	f1 0b       	sbc	r31, r17
   167ea:	32 97       	sbiw	r30, 0x02	; 2
   167ec:	28 f4       	brcc	.+10     	; 0x167f8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x84>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:126
      strcat(str, "0");
   167ee:	69 e8       	ldi	r22, 0x89	; 137
   167f0:	78 e0       	ldi	r23, 0x08	; 8
   167f2:	c5 01       	movw	r24, r10
   167f4:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
    strcat(str, tmp1); 
   167f8:	b8 01       	movw	r22, r16
   167fa:	c5 01       	movw	r24, r10
   167fc:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:128
    if (a < maxBytes - 1)
   16800:	e8 14       	cp	r14, r8
   16802:	f9 04       	cpc	r15, r9
   16804:	34 f4       	brge	.+12     	; 0x16812 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x9e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
    {
      tmp1[0] = sep;
   16806:	39 82       	std	Y+1, r3	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:131
      tmp1[1] = 0;
   16808:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:132
      strcat(str, tmp1);
   1680a:	b8 01       	movw	r22, r16
   1680c:	c5 01       	movw	r24, r10
   1680e:	0e 94 53 d7 	call	0x1aea6	; 0x1aea6 <strcat>
   16812:	ff ef       	ldi	r31, 0xFF	; 255
   16814:	ef 1a       	sub	r14, r31
   16816:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122 (discriminator 2)

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   16818:	d6 cf       	rjmp	.-84     	; 0x167c6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x52>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:135
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   1681a:	28 96       	adiw	r28, 0x08	; 8
   1681c:	0f b6       	in	r0, 0x3f	; 63
   1681e:	f8 94       	cli
   16820:	de bf       	out	0x3e, r29	; 62
   16822:	0f be       	out	0x3f, r0	; 63
   16824:	cd bf       	out	0x3d, r28	; 61
   16826:	df 91       	pop	r29
   16828:	cf 91       	pop	r28
   1682a:	1f 91       	pop	r17
   1682c:	0f 91       	pop	r16
   1682e:	ff 90       	pop	r15
   16830:	ef 90       	pop	r14
   16832:	df 90       	pop	r13
   16834:	cf 90       	pop	r12
   16836:	bf 90       	pop	r11
   16838:	af 90       	pop	r10
   1683a:	9f 90       	pop	r9
   1683c:	8f 90       	pop	r8
   1683e:	7f 90       	pop	r7
   16840:	6f 90       	pop	r6
   16842:	5f 90       	pop	r5
   16844:	4f 90       	pop	r4
   16846:	3f 90       	pop	r3
   16848:	08 95       	ret

0001684a <PID::SetTunings(double, double, double, int)>:
_ZN3PID10SetTuningsEdddi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:103
 * This function allows the controller's dynamic performance to be adjusted.
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   1684a:	4f 92       	push	r4
   1684c:	5f 92       	push	r5
   1684e:	6f 92       	push	r6
   16850:	7f 92       	push	r7
   16852:	8f 92       	push	r8
   16854:	9f 92       	push	r9
   16856:	af 92       	push	r10
   16858:	bf 92       	push	r11
   1685a:	cf 92       	push	r12
   1685c:	df 92       	push	r13
   1685e:	ef 92       	push	r14
   16860:	ff 92       	push	r15
   16862:	0f 93       	push	r16
   16864:	1f 93       	push	r17
   16866:	cf 93       	push	r28
   16868:	df 93       	push	r29
   1686a:	00 d0       	rcall	.+0      	; 0x1686c <PID::SetTunings(double, double, double, int)+0x22>
   1686c:	00 d0       	rcall	.+0      	; 0x1686e <PID::SetTunings(double, double, double, int)+0x24>
   1686e:	cd b7       	in	r28, 0x3d	; 61
   16870:	de b7       	in	r29, 0x3e	; 62
   16872:	9e 83       	std	Y+6, r25	; 0x06
   16874:	8d 83       	std	Y+5, r24	; 0x05
   16876:	49 83       	std	Y+1, r20	; 0x01
   16878:	5a 83       	std	Y+2, r21	; 0x02
   1687a:	6b 83       	std	Y+3, r22	; 0x03
   1687c:	7c 83       	std	Y+4, r23	; 0x04
   1687e:	28 01       	movw	r4, r16
   16880:	39 01       	movw	r6, r18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
   if (Kp<0 || Ki<0 || Kd<0) return;
   16882:	20 e0       	ldi	r18, 0x00	; 0
   16884:	30 e0       	ldi	r19, 0x00	; 0
   16886:	a9 01       	movw	r20, r18
   16888:	69 81       	ldd	r22, Y+1	; 0x01
   1688a:	7a 81       	ldd	r23, Y+2	; 0x02
   1688c:	8b 81       	ldd	r24, Y+3	; 0x03
   1688e:	9c 81       	ldd	r25, Y+4	; 0x04
   16890:	0e 94 65 d1 	call	0x1a2ca	; 0x1a2ca <__cmpsf2>
   16894:	87 fd       	sbrc	r24, 7
   16896:	97 c0       	rjmp	.+302    	; 0x169c6 <PID::SetTunings(double, double, double, int)+0x17c>
   16898:	20 e0       	ldi	r18, 0x00	; 0
   1689a:	30 e0       	ldi	r19, 0x00	; 0
   1689c:	a9 01       	movw	r20, r18
   1689e:	c3 01       	movw	r24, r6
   168a0:	b8 01       	movw	r22, r16
   168a2:	0e 94 65 d1 	call	0x1a2ca	; 0x1a2ca <__cmpsf2>
   168a6:	87 fd       	sbrc	r24, 7
   168a8:	8e c0       	rjmp	.+284    	; 0x169c6 <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104 (discriminator 2)
   168aa:	20 e0       	ldi	r18, 0x00	; 0
   168ac:	30 e0       	ldi	r19, 0x00	; 0
   168ae:	a9 01       	movw	r20, r18
   168b0:	c7 01       	movw	r24, r14
   168b2:	b6 01       	movw	r22, r12
   168b4:	0e 94 65 d1 	call	0x1a2ca	; 0x1a2ca <__cmpsf2>
   168b8:	87 fd       	sbrc	r24, 7
   168ba:	85 c0       	rjmp	.+266    	; 0x169c6 <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106

   pOn = POn;
   168bc:	ad 81       	ldd	r26, Y+5	; 0x05
   168be:	be 81       	ldd	r27, Y+6	; 0x06
   168c0:	5b 96       	adiw	r26, 0x1b	; 27
   168c2:	bc 92       	st	X, r11
   168c4:	ae 92       	st	-X, r10
   168c6:	5a 97       	sbiw	r26, 0x1a	; 26
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
   168c8:	81 e0       	ldi	r24, 0x01	; 1
   168ca:	aa 94       	dec	r10
   168cc:	ab 28       	or	r10, r11
   168ce:	09 f0       	breq	.+2      	; 0x168d2 <PID::SetTunings(double, double, double, int)+0x88>
   168d0:	80 e0       	ldi	r24, 0x00	; 0
   168d2:	ed 81       	ldd	r30, Y+5	; 0x05
   168d4:	fe 81       	ldd	r31, Y+6	; 0x06
   168d6:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   168d8:	89 81       	ldd	r24, Y+1	; 0x01
   168da:	9a 81       	ldd	r25, Y+2	; 0x02
   168dc:	ab 81       	ldd	r26, Y+3	; 0x03
   168de:	bc 81       	ldd	r27, Y+4	; 0x04
   168e0:	80 83       	st	Z, r24
   168e2:	91 83       	std	Z+1, r25	; 0x01
   168e4:	a2 83       	std	Z+2, r26	; 0x02
   168e6:	b3 83       	std	Z+3, r27	; 0x03
   168e8:	44 82       	std	Z+4, r4	; 0x04
   168ea:	55 82       	std	Z+5, r5	; 0x05
   168ec:	66 82       	std	Z+6, r6	; 0x06
   168ee:	77 82       	std	Z+7, r7	; 0x07
   168f0:	c0 86       	std	Z+8, r12	; 0x08
   168f2:	d1 86       	std	Z+9, r13	; 0x09
   168f4:	e2 86       	std	Z+10, r14	; 0x0a
   168f6:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
   168f8:	66 a5       	ldd	r22, Z+46	; 0x2e
   168fa:	77 a5       	ldd	r23, Z+47	; 0x2f
   168fc:	80 a9       	ldd	r24, Z+48	; 0x30
   168fe:	91 a9       	ldd	r25, Z+49	; 0x31
   16900:	0e 94 12 d2 	call	0x1a424	; 0x1a424 <__floatunsisf>
   16904:	20 e0       	ldi	r18, 0x00	; 0
   16906:	30 e0       	ldi	r19, 0x00	; 0
   16908:	4a e7       	ldi	r20, 0x7A	; 122
   1690a:	54 e4       	ldi	r21, 0x44	; 68
   1690c:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
   16910:	4b 01       	movw	r8, r22
   16912:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
   16914:	89 81       	ldd	r24, Y+1	; 0x01
   16916:	9a 81       	ldd	r25, Y+2	; 0x02
   16918:	ab 81       	ldd	r26, Y+3	; 0x03
   1691a:	bc 81       	ldd	r27, Y+4	; 0x04
   1691c:	ed 81       	ldd	r30, Y+5	; 0x05
   1691e:	fe 81       	ldd	r31, Y+6	; 0x06
   16920:	84 87       	std	Z+12, r24	; 0x0c
   16922:	95 87       	std	Z+13, r25	; 0x0d
   16924:	a6 87       	std	Z+14, r26	; 0x0e
   16926:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
   16928:	a5 01       	movw	r20, r10
   1692a:	94 01       	movw	r18, r8
   1692c:	c3 01       	movw	r24, r6
   1692e:	b2 01       	movw	r22, r4
   16930:	0e 94 c9 d2 	call	0x1a592	; 0x1a592 <__mulsf3>
   16934:	2b 01       	movw	r4, r22
   16936:	3c 01       	movw	r6, r24
   16938:	ad 81       	ldd	r26, Y+5	; 0x05
   1693a:	be 81       	ldd	r27, Y+6	; 0x06
   1693c:	50 96       	adiw	r26, 0x10	; 16
   1693e:	4d 92       	st	X+, r4
   16940:	5d 92       	st	X+, r5
   16942:	6d 92       	st	X+, r6
   16944:	7c 92       	st	X, r7
   16946:	53 97       	sbiw	r26, 0x13	; 19
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
   16948:	a5 01       	movw	r20, r10
   1694a:	94 01       	movw	r18, r8
   1694c:	c7 01       	movw	r24, r14
   1694e:	b6 01       	movw	r22, r12
   16950:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
   16954:	6b 01       	movw	r12, r22
   16956:	7c 01       	movw	r14, r24
   16958:	ed 81       	ldd	r30, Y+5	; 0x05
   1695a:	fe 81       	ldd	r31, Y+6	; 0x06
   1695c:	c4 8a       	std	Z+20, r12	; 0x14
   1695e:	d5 8a       	std	Z+21, r13	; 0x15
   16960:	e6 8a       	std	Z+22, r14	; 0x16
   16962:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
   16964:	80 8d       	ldd	r24, Z+24	; 0x18
   16966:	91 8d       	ldd	r25, Z+25	; 0x19
   16968:	01 97       	sbiw	r24, 0x01	; 1
   1696a:	69 f5       	brne	.+90     	; 0x169c6 <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
   1696c:	29 81       	ldd	r18, Y+1	; 0x01
   1696e:	3a 81       	ldd	r19, Y+2	; 0x02
   16970:	4b 81       	ldd	r20, Y+3	; 0x03
   16972:	5c 81       	ldd	r21, Y+4	; 0x04
   16974:	60 e0       	ldi	r22, 0x00	; 0
   16976:	70 e0       	ldi	r23, 0x00	; 0
   16978:	cb 01       	movw	r24, r22
   1697a:	0e 94 f8 d0 	call	0x1a1f0	; 0x1a1f0 <__subsf3>
   1697e:	ad 81       	ldd	r26, Y+5	; 0x05
   16980:	be 81       	ldd	r27, Y+6	; 0x06
   16982:	1c 96       	adiw	r26, 0x0c	; 12
   16984:	6d 93       	st	X+, r22
   16986:	7d 93       	st	X+, r23
   16988:	8d 93       	st	X+, r24
   1698a:	9c 93       	st	X, r25
   1698c:	1f 97       	sbiw	r26, 0x0f	; 15
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
   1698e:	a3 01       	movw	r20, r6
   16990:	92 01       	movw	r18, r4
   16992:	60 e0       	ldi	r22, 0x00	; 0
   16994:	70 e0       	ldi	r23, 0x00	; 0
   16996:	cb 01       	movw	r24, r22
   16998:	0e 94 f8 d0 	call	0x1a1f0	; 0x1a1f0 <__subsf3>
   1699c:	ed 81       	ldd	r30, Y+5	; 0x05
   1699e:	fe 81       	ldd	r31, Y+6	; 0x06
   169a0:	60 8b       	std	Z+16, r22	; 0x10
   169a2:	71 8b       	std	Z+17, r23	; 0x11
   169a4:	82 8b       	std	Z+18, r24	; 0x12
   169a6:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
   169a8:	a7 01       	movw	r20, r14
   169aa:	96 01       	movw	r18, r12
   169ac:	60 e0       	ldi	r22, 0x00	; 0
   169ae:	70 e0       	ldi	r23, 0x00	; 0
   169b0:	cb 01       	movw	r24, r22
   169b2:	0e 94 f8 d0 	call	0x1a1f0	; 0x1a1f0 <__subsf3>
   169b6:	ad 81       	ldd	r26, Y+5	; 0x05
   169b8:	be 81       	ldd	r27, Y+6	; 0x06
   169ba:	54 96       	adiw	r26, 0x14	; 20
   169bc:	6d 93       	st	X+, r22
   169be:	7d 93       	st	X+, r23
   169c0:	8d 93       	st	X+, r24
   169c2:	9c 93       	st	X, r25
   169c4:	57 97       	sbiw	r26, 0x17	; 23
/home/saric/Arduino/libraries/PID/PID_v1.cpp:122
   }
}
   169c6:	26 96       	adiw	r28, 0x06	; 6
   169c8:	0f b6       	in	r0, 0x3f	; 63
   169ca:	f8 94       	cli
   169cc:	de bf       	out	0x3e, r29	; 62
   169ce:	0f be       	out	0x3f, r0	; 63
   169d0:	cd bf       	out	0x3d, r28	; 61
   169d2:	df 91       	pop	r29
   169d4:	cf 91       	pop	r28
   169d6:	1f 91       	pop	r17
   169d8:	0f 91       	pop	r16
   169da:	ff 90       	pop	r15
   169dc:	ef 90       	pop	r14
   169de:	df 90       	pop	r13
   169e0:	cf 90       	pop	r12
   169e2:	bf 90       	pop	r11
   169e4:	af 90       	pop	r10
   169e6:	9f 90       	pop	r9
   169e8:	8f 90       	pop	r8
   169ea:	7f 90       	pop	r7
   169ec:	6f 90       	pop	r6
   169ee:	5f 90       	pop	r5
   169f0:	4f 90       	pop	r4
   169f2:	08 95       	ret

000169f4 <PID::SetTunings(double, double, double)>:
_ZN3PID10SetTuningsEddd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:127

/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
   169f4:	af 92       	push	r10
   169f6:	bf 92       	push	r11
   169f8:	cf 92       	push	r12
   169fa:	df 92       	push	r13
   169fc:	ef 92       	push	r14
   169fe:	ff 92       	push	r15
   16a00:	0f 93       	push	r16
   16a02:	1f 93       	push	r17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:128
    SetTunings(Kp, Ki, Kd, pOn); 
   16a04:	fc 01       	movw	r30, r24
   16a06:	a2 8c       	ldd	r10, Z+26	; 0x1a
   16a08:	b3 8c       	ldd	r11, Z+27	; 0x1b
   16a0a:	0e 94 25 b4 	call	0x1684a	; 0x1684a <PID::SetTunings(double, double, double, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:129
}
   16a0e:	1f 91       	pop	r17
   16a10:	0f 91       	pop	r16
   16a12:	ff 90       	pop	r15
   16a14:	ef 90       	pop	r14
   16a16:	df 90       	pop	r13
   16a18:	cf 90       	pop	r12
   16a1a:	bf 90       	pop	r11
   16a1c:	af 90       	pop	r10
   16a1e:	08 95       	ret

00016a20 <PID::SetSampleTime(int)>:
_ZN3PID13SetSampleTimeEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:135

/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   16a20:	8f 92       	push	r8
   16a22:	9f 92       	push	r9
   16a24:	af 92       	push	r10
   16a26:	bf 92       	push	r11
   16a28:	cf 92       	push	r12
   16a2a:	df 92       	push	r13
   16a2c:	ef 92       	push	r14
   16a2e:	ff 92       	push	r15
   16a30:	cf 93       	push	r28
   16a32:	df 93       	push	r29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
   if (NewSampleTime > 0)
   16a34:	16 16       	cp	r1, r22
   16a36:	17 06       	cpc	r1, r23
   16a38:	ac f5       	brge	.+106    	; 0x16aa4 <PID::SetSampleTime(int)+0x84>
   16a3a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
   16a3c:	6b 01       	movw	r12, r22
   16a3e:	77 0f       	add	r23, r23
   16a40:	ee 08       	sbc	r14, r14
   16a42:	ff 08       	sbc	r15, r15
   16a44:	c7 01       	movw	r24, r14
   16a46:	b6 01       	movw	r22, r12
   16a48:	0e 94 14 d2 	call	0x1a428	; 0x1a428 <__floatsisf>
   16a4c:	4b 01       	movw	r8, r22
   16a4e:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
   16a50:	6e a5       	ldd	r22, Y+46	; 0x2e
   16a52:	7f a5       	ldd	r23, Y+47	; 0x2f
   16a54:	88 a9       	ldd	r24, Y+48	; 0x30
   16a56:	99 a9       	ldd	r25, Y+49	; 0x31
   16a58:	0e 94 12 d2 	call	0x1a424	; 0x1a424 <__floatunsisf>
   16a5c:	9b 01       	movw	r18, r22
   16a5e:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
   16a60:	c5 01       	movw	r24, r10
   16a62:	b4 01       	movw	r22, r8
   16a64:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
   16a68:	4b 01       	movw	r8, r22
   16a6a:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
   16a6c:	ac 01       	movw	r20, r24
   16a6e:	9b 01       	movw	r18, r22
   16a70:	68 89       	ldd	r22, Y+16	; 0x10
   16a72:	79 89       	ldd	r23, Y+17	; 0x11
   16a74:	8a 89       	ldd	r24, Y+18	; 0x12
   16a76:	9b 89       	ldd	r25, Y+19	; 0x13
   16a78:	0e 94 c9 d2 	call	0x1a592	; 0x1a592 <__mulsf3>
   16a7c:	68 8b       	std	Y+16, r22	; 0x10
   16a7e:	79 8b       	std	Y+17, r23	; 0x11
   16a80:	8a 8b       	std	Y+18, r24	; 0x12
   16a82:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
   16a84:	a5 01       	movw	r20, r10
   16a86:	94 01       	movw	r18, r8
   16a88:	6c 89       	ldd	r22, Y+20	; 0x14
   16a8a:	7d 89       	ldd	r23, Y+21	; 0x15
   16a8c:	8e 89       	ldd	r24, Y+22	; 0x16
   16a8e:	9f 89       	ldd	r25, Y+23	; 0x17
   16a90:	0e 94 6a d1 	call	0x1a2d4	; 0x1a2d4 <__divsf3>
   16a94:	6c 8b       	std	Y+20, r22	; 0x14
   16a96:	7d 8b       	std	Y+21, r23	; 0x15
   16a98:	8e 8b       	std	Y+22, r24	; 0x16
   16a9a:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
   16a9c:	ce a6       	std	Y+46, r12	; 0x2e
   16a9e:	df a6       	std	Y+47, r13	; 0x2f
   16aa0:	e8 aa       	std	Y+48, r14	; 0x30
   16aa2:	f9 aa       	std	Y+49, r15	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:144
   }
}
   16aa4:	df 91       	pop	r29
   16aa6:	cf 91       	pop	r28
   16aa8:	ff 90       	pop	r15
   16aaa:	ef 90       	pop	r14
   16aac:	df 90       	pop	r13
   16aae:	cf 90       	pop	r12
   16ab0:	bf 90       	pop	r11
   16ab2:	af 90       	pop	r10
   16ab4:	9f 90       	pop	r9
   16ab6:	8f 90       	pop	r8
   16ab8:	08 95       	ret

00016aba <PID::SetOutputLimits(double, double)>:
_ZN3PID15SetOutputLimitsEdd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:155
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   16aba:	2f 92       	push	r2
   16abc:	3f 92       	push	r3
   16abe:	4f 92       	push	r4
   16ac0:	5f 92       	push	r5
   16ac2:	6f 92       	push	r6
   16ac4:	7f 92       	push	r7
   16ac6:	8f 92       	push	r8
   16ac8:	9f 92       	push	r9
   16aca:	af 92       	push	r10
   16acc:	bf 92       	push	r11
   16ace:	cf 92       	push	r12
   16ad0:	df 92       	push	r13
   16ad2:	ef 92       	push	r14
   16ad4:	ff 92       	push	r15
   16ad6:	0f 93       	push	r16
   16ad8:	1f 93       	push	r17
   16ada:	cf 93       	push	r28
   16adc:	df 93       	push	r29
   16ade:	ec 01       	movw	r28, r24
   16ae0:	6a 01       	movw	r12, r20
   16ae2:	7b 01       	movw	r14, r22
   16ae4:	48 01       	movw	r8, r16
   16ae6:	59 01       	movw	r10, r18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:156
   if(Min >= Max) return;
   16ae8:	a9 01       	movw	r20, r18
   16aea:	98 01       	movw	r18, r16
   16aec:	cb 01       	movw	r24, r22
   16aee:	b6 01       	movw	r22, r12
   16af0:	0e 94 c4 d2 	call	0x1a588	; 0x1a588 <__gesf2>
   16af4:	87 ff       	sbrs	r24, 7
   16af6:	4f c0       	rjmp	.+158    	; 0x16b96 <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
   outMin = Min;
   16af8:	ca aa       	std	Y+50, r12	; 0x32
   16afa:	db aa       	std	Y+51, r13	; 0x33
   16afc:	ec aa       	std	Y+52, r14	; 0x34
   16afe:	fd aa       	std	Y+53, r15	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   16b00:	8e aa       	std	Y+54, r8	; 0x36
   16b02:	9f aa       	std	Y+55, r9	; 0x37
   16b04:	a8 ae       	std	Y+56, r10	; 0x38
   16b06:	b9 ae       	std	Y+57, r11	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:160

   if(inAuto)
   16b08:	8a ad       	ldd	r24, Y+58	; 0x3a
   16b0a:	88 23       	and	r24, r24
   16b0c:	09 f4       	brne	.+2      	; 0x16b10 <PID::SetOutputLimits(double, double)+0x56>
   16b0e:	43 c0       	rjmp	.+134    	; 0x16b96 <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   16b10:	2e 8c       	ldd	r2, Y+30	; 0x1e
   16b12:	3f 8c       	ldd	r3, Y+31	; 0x1f
   16b14:	f1 01       	movw	r30, r2
   16b16:	40 80       	ld	r4, Z
   16b18:	51 80       	ldd	r5, Z+1	; 0x01
   16b1a:	62 80       	ldd	r6, Z+2	; 0x02
   16b1c:	73 80       	ldd	r7, Z+3	; 0x03
   16b1e:	a3 01       	movw	r20, r6
   16b20:	92 01       	movw	r18, r4
   16b22:	c5 01       	movw	r24, r10
   16b24:	b8 01       	movw	r22, r16
   16b26:	0e 94 65 d1 	call	0x1a2ca	; 0x1a2ca <__cmpsf2>
   16b2a:	87 ff       	sbrs	r24, 7
   16b2c:	1a c0       	rjmp	.+52     	; 0x16b62 <PID::SetOutputLimits(double, double)+0xa8>
   16b2e:	f1 01       	movw	r30, r2
   16b30:	80 82       	st	Z, r8
   16b32:	91 82       	std	Z+1, r9	; 0x01
   16b34:	a2 82       	std	Z+2, r10	; 0x02
   16b36:	b3 82       	std	Z+3, r11	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
   16b38:	8e a0       	ldd	r8, Y+38	; 0x26
   16b3a:	9f a0       	ldd	r9, Y+39	; 0x27
   16b3c:	a8 a4       	ldd	r10, Y+40	; 0x28
   16b3e:	b9 a4       	ldd	r11, Y+41	; 0x29
   16b40:	ce a8       	ldd	r12, Y+54	; 0x36
   16b42:	df a8       	ldd	r13, Y+55	; 0x37
   16b44:	e8 ac       	ldd	r14, Y+56	; 0x38
   16b46:	f9 ac       	ldd	r15, Y+57	; 0x39
   16b48:	a7 01       	movw	r20, r14
   16b4a:	96 01       	movw	r18, r12
   16b4c:	c5 01       	movw	r24, r10
   16b4e:	b4 01       	movw	r22, r8
   16b50:	0e 94 c4 d2 	call	0x1a588	; 0x1a588 <__gesf2>
   16b54:	18 16       	cp	r1, r24
   16b56:	9c f4       	brge	.+38     	; 0x16b7e <PID::SetOutputLimits(double, double)+0xc4>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
   16b58:	ce a2       	std	Y+38, r12	; 0x26
   16b5a:	df a2       	std	Y+39, r13	; 0x27
   16b5c:	e8 a6       	std	Y+40, r14	; 0x28
   16b5e:	f9 a6       	std	Y+41, r15	; 0x29
   16b60:	1a c0       	rjmp	.+52     	; 0x16b96 <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
   16b62:	a3 01       	movw	r20, r6
   16b64:	92 01       	movw	r18, r4
   16b66:	c7 01       	movw	r24, r14
   16b68:	b6 01       	movw	r22, r12
   16b6a:	0e 94 c4 d2 	call	0x1a588	; 0x1a588 <__gesf2>
   16b6e:	18 16       	cp	r1, r24
   16b70:	1c f7       	brge	.-58     	; 0x16b38 <PID::SetOutputLimits(double, double)+0x7e>
   16b72:	f1 01       	movw	r30, r2
   16b74:	c0 82       	st	Z, r12
   16b76:	d1 82       	std	Z+1, r13	; 0x01
   16b78:	e2 82       	std	Z+2, r14	; 0x02
   16b7a:	f3 82       	std	Z+3, r15	; 0x03
   16b7c:	dd cf       	rjmp	.-70     	; 0x16b38 <PID::SetOutputLimits(double, double)+0x7e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   16b7e:	ca a8       	ldd	r12, Y+50	; 0x32
   16b80:	db a8       	ldd	r13, Y+51	; 0x33
   16b82:	ec a8       	ldd	r14, Y+52	; 0x34
   16b84:	fd a8       	ldd	r15, Y+53	; 0x35
   16b86:	a7 01       	movw	r20, r14
   16b88:	96 01       	movw	r18, r12
   16b8a:	c5 01       	movw	r24, r10
   16b8c:	b4 01       	movw	r22, r8
   16b8e:	0e 94 65 d1 	call	0x1a2ca	; 0x1a2ca <__cmpsf2>
   16b92:	87 fd       	sbrc	r24, 7
   16b94:	e1 cf       	rjmp	.-62     	; 0x16b58 <PID::SetOutputLimits(double, double)+0x9e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:168
   }
}
   16b96:	df 91       	pop	r29
   16b98:	cf 91       	pop	r28
   16b9a:	1f 91       	pop	r17
   16b9c:	0f 91       	pop	r16
   16b9e:	ff 90       	pop	r15
   16ba0:	ef 90       	pop	r14
   16ba2:	df 90       	pop	r13
   16ba4:	cf 90       	pop	r12
   16ba6:	bf 90       	pop	r11
   16ba8:	af 90       	pop	r10
   16baa:	9f 90       	pop	r9
   16bac:	8f 90       	pop	r8
   16bae:	7f 90       	pop	r7
   16bb0:	6f 90       	pop	r6
   16bb2:	5f 90       	pop	r5
   16bb4:	4f 90       	pop	r4
   16bb6:	3f 90       	pop	r3
   16bb8:	2f 90       	pop	r2
   16bba:	08 95       	ret

00016bbc <PID::Initialize()>:
_ZN3PID10InitializeEv():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:190
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   16bbc:	8f 92       	push	r8
   16bbe:	9f 92       	push	r9
   16bc0:	af 92       	push	r10
   16bc2:	bf 92       	push	r11
   16bc4:	cf 92       	push	r12
   16bc6:	df 92       	push	r13
   16bc8:	ef 92       	push	r14
   16bca:	ff 92       	push	r15
   16bcc:	cf 93       	push	r28
   16bce:	df 93       	push	r29
   16bd0:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
   outputSum = *myOutput;
   16bd2:	ee 8d       	ldd	r30, Y+30	; 0x1e
   16bd4:	ff 8d       	ldd	r31, Y+31	; 0x1f
   16bd6:	c0 80       	ld	r12, Z
   16bd8:	d1 80       	ldd	r13, Z+1	; 0x01
   16bda:	e2 80       	ldd	r14, Z+2	; 0x02
   16bdc:	f3 80       	ldd	r15, Z+3	; 0x03
   16bde:	ce a2       	std	Y+38, r12	; 0x26
   16be0:	df a2       	std	Y+39, r13	; 0x27
   16be2:	e8 a6       	std	Y+40, r14	; 0x28
   16be4:	f9 a6       	std	Y+41, r15	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
   16be6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   16be8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   16bea:	80 81       	ld	r24, Z
   16bec:	91 81       	ldd	r25, Z+1	; 0x01
   16bee:	a2 81       	ldd	r26, Z+2	; 0x02
   16bf0:	b3 81       	ldd	r27, Z+3	; 0x03
   16bf2:	8a a7       	std	Y+42, r24	; 0x2a
   16bf4:	9b a7       	std	Y+43, r25	; 0x2b
   16bf6:	ac a7       	std	Y+44, r26	; 0x2c
   16bf8:	bd a7       	std	Y+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
   16bfa:	8e a8       	ldd	r8, Y+54	; 0x36
   16bfc:	9f a8       	ldd	r9, Y+55	; 0x37
   16bfe:	a8 ac       	ldd	r10, Y+56	; 0x38
   16c00:	b9 ac       	ldd	r11, Y+57	; 0x39
   16c02:	a5 01       	movw	r20, r10
   16c04:	94 01       	movw	r18, r8
   16c06:	c7 01       	movw	r24, r14
   16c08:	b6 01       	movw	r22, r12
   16c0a:	0e 94 c4 d2 	call	0x1a588	; 0x1a588 <__gesf2>
   16c0e:	18 16       	cp	r1, r24
   16c10:	2c f4       	brge	.+10     	; 0x16c1c <PID::Initialize()+0x60>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194 (discriminator 1)
   else if(outputSum < outMin) outputSum = outMin;
   16c12:	8e a2       	std	Y+38, r8	; 0x26
   16c14:	9f a2       	std	Y+39, r9	; 0x27
   16c16:	a8 a6       	std	Y+40, r10	; 0x28
   16c18:	b9 a6       	std	Y+41, r11	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:195 (discriminator 1)
}
   16c1a:	0c c0       	rjmp	.+24     	; 0x16c34 <PID::Initialize()+0x78>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
   16c1c:	8a a8       	ldd	r8, Y+50	; 0x32
   16c1e:	9b a8       	ldd	r9, Y+51	; 0x33
   16c20:	ac a8       	ldd	r10, Y+52	; 0x34
   16c22:	bd a8       	ldd	r11, Y+53	; 0x35
   16c24:	a5 01       	movw	r20, r10
   16c26:	94 01       	movw	r18, r8
   16c28:	c7 01       	movw	r24, r14
   16c2a:	b6 01       	movw	r22, r12
   16c2c:	0e 94 65 d1 	call	0x1a2ca	; 0x1a2ca <__cmpsf2>
   16c30:	87 fd       	sbrc	r24, 7
   16c32:	ef cf       	rjmp	.-34     	; 0x16c12 <PID::Initialize()+0x56>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:195
}
   16c34:	df 91       	pop	r29
   16c36:	cf 91       	pop	r28
   16c38:	ff 90       	pop	r15
   16c3a:	ef 90       	pop	r14
   16c3c:	df 90       	pop	r13
   16c3e:	cf 90       	pop	r12
   16c40:	bf 90       	pop	r11
   16c42:	af 90       	pop	r10
   16c44:	9f 90       	pop	r9
   16c46:	8f 90       	pop	r8
   16c48:	08 95       	ret

00016c4a <PID::SetMode(int)>:
_ZN3PID7SetModeEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:176
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
   16c4a:	1f 93       	push	r17
   16c4c:	cf 93       	push	r28
   16c4e:	df 93       	push	r29
   16c50:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:177
    bool newAuto = (Mode == AUTOMATIC);
   16c52:	11 e0       	ldi	r17, 0x01	; 1
   16c54:	61 30       	cpi	r22, 0x01	; 1
   16c56:	71 05       	cpc	r23, r1
   16c58:	09 f0       	breq	.+2      	; 0x16c5c <PID::SetMode(int)+0x12>
   16c5a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
    if(newAuto && !inAuto)
   16c5c:	61 30       	cpi	r22, 0x01	; 1
   16c5e:	71 05       	cpc	r23, r1
   16c60:	31 f4       	brne	.+12     	; 0x16c6e <PID::SetMode(int)+0x24>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178 (discriminator 1)
   16c62:	8a ad       	ldd	r24, Y+58	; 0x3a
   16c64:	81 11       	cpse	r24, r1
   16c66:	03 c0       	rjmp	.+6      	; 0x16c6e <PID::SetMode(int)+0x24>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:180
    {  /*we just went from manual to auto*/
        PID::Initialize();
   16c68:	ce 01       	movw	r24, r28
   16c6a:	0e 94 de b5 	call	0x16bbc	; 0x16bbc <PID::Initialize()>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    }
    inAuto = newAuto;
   16c6e:	1a af       	std	Y+58, r17	; 0x3a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:183
}
   16c70:	df 91       	pop	r29
   16c72:	cf 91       	pop	r28
   16c74:	1f 91       	pop	r17
   16c76:	08 95       	ret

00016c78 <PID::SetControllerDirection(int)>:
_ZN3PID22SetControllerDirectionEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:204
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
   16c78:	0f 93       	push	r16
   16c7a:	1f 93       	push	r17
   16c7c:	cf 93       	push	r28
   16c7e:	df 93       	push	r29
   16c80:	ec 01       	movw	r28, r24
   16c82:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205
   if(inAuto && Direction !=controllerDirection)
   16c84:	8a ad       	ldd	r24, Y+58	; 0x3a
   16c86:	88 23       	and	r24, r24
   16c88:	61 f1       	breq	.+88     	; 0x16ce2 <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205 (discriminator 1)
   16c8a:	88 8d       	ldd	r24, Y+24	; 0x18
   16c8c:	99 8d       	ldd	r25, Y+25	; 0x19
   16c8e:	86 17       	cp	r24, r22
   16c90:	97 07       	cpc	r25, r23
   16c92:	39 f1       	breq	.+78     	; 0x16ce2 <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:207
   {
	    kp = (0 - kp);
   16c94:	2c 85       	ldd	r18, Y+12	; 0x0c
   16c96:	3d 85       	ldd	r19, Y+13	; 0x0d
   16c98:	4e 85       	ldd	r20, Y+14	; 0x0e
   16c9a:	5f 85       	ldd	r21, Y+15	; 0x0f
   16c9c:	60 e0       	ldi	r22, 0x00	; 0
   16c9e:	70 e0       	ldi	r23, 0x00	; 0
   16ca0:	cb 01       	movw	r24, r22
   16ca2:	0e 94 f8 d0 	call	0x1a1f0	; 0x1a1f0 <__subsf3>
   16ca6:	6c 87       	std	Y+12, r22	; 0x0c
   16ca8:	7d 87       	std	Y+13, r23	; 0x0d
   16caa:	8e 87       	std	Y+14, r24	; 0x0e
   16cac:	9f 87       	std	Y+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:208
      ki = (0 - ki);
   16cae:	28 89       	ldd	r18, Y+16	; 0x10
   16cb0:	39 89       	ldd	r19, Y+17	; 0x11
   16cb2:	4a 89       	ldd	r20, Y+18	; 0x12
   16cb4:	5b 89       	ldd	r21, Y+19	; 0x13
   16cb6:	60 e0       	ldi	r22, 0x00	; 0
   16cb8:	70 e0       	ldi	r23, 0x00	; 0
   16cba:	cb 01       	movw	r24, r22
   16cbc:	0e 94 f8 d0 	call	0x1a1f0	; 0x1a1f0 <__subsf3>
   16cc0:	68 8b       	std	Y+16, r22	; 0x10
   16cc2:	79 8b       	std	Y+17, r23	; 0x11
   16cc4:	8a 8b       	std	Y+18, r24	; 0x12
   16cc6:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:209
      kd = (0 - kd);
   16cc8:	2c 89       	ldd	r18, Y+20	; 0x14
   16cca:	3d 89       	ldd	r19, Y+21	; 0x15
   16ccc:	4e 89       	ldd	r20, Y+22	; 0x16
   16cce:	5f 89       	ldd	r21, Y+23	; 0x17
   16cd0:	60 e0       	ldi	r22, 0x00	; 0
   16cd2:	70 e0       	ldi	r23, 0x00	; 0
   16cd4:	cb 01       	movw	r24, r22
   16cd6:	0e 94 f8 d0 	call	0x1a1f0	; 0x1a1f0 <__subsf3>
   16cda:	6c 8b       	std	Y+20, r22	; 0x14
   16cdc:	7d 8b       	std	Y+21, r23	; 0x15
   16cde:	8e 8b       	std	Y+22, r24	; 0x16
   16ce0:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   }
   controllerDirection = Direction;
   16ce2:	19 8f       	std	Y+25, r17	; 0x19
   16ce4:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:212
}
   16ce6:	df 91       	pop	r29
   16ce8:	cf 91       	pop	r28
   16cea:	1f 91       	pop	r17
   16cec:	0f 91       	pop	r16
   16cee:	08 95       	ret

00016cf0 <PID::PID(double*, double*, double*, double, double, double, int, int)>:
_ZN3PIDC2EPdS0_S0_dddii():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:20

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   16cf0:	4f 92       	push	r4
   16cf2:	5f 92       	push	r5
   16cf4:	6f 92       	push	r6
   16cf6:	7f 92       	push	r7
   16cf8:	8f 92       	push	r8
   16cfa:	9f 92       	push	r9
   16cfc:	af 92       	push	r10
   16cfe:	bf 92       	push	r11
   16d00:	cf 92       	push	r12
   16d02:	df 92       	push	r13
   16d04:	ef 92       	push	r14
   16d06:	ff 92       	push	r15
   16d08:	0f 93       	push	r16
   16d0a:	1f 93       	push	r17
   16d0c:	cf 93       	push	r28
   16d0e:	df 93       	push	r29
   16d10:	00 d0       	rcall	.+0      	; 0x16d12 <PID::PID(double*, double*, double*, double, double, double, int, int)+0x22>
   16d12:	1f 92       	push	r1
   16d14:	cd b7       	in	r28, 0x3d	; 61
   16d16:	de b7       	in	r29, 0x3e	; 62
   16d18:	4c 01       	movw	r8, r24
   16d1a:	27 01       	movw	r4, r14
   16d1c:	38 01       	movw	r6, r16
   16d1e:	a9 82       	std	Y+1, r10	; 0x01
   16d20:	ba 82       	std	Y+2, r11	; 0x02
   16d22:	cb 82       	std	Y+3, r12	; 0x03
   16d24:	dc 82       	std	Y+4, r13	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
   16d26:	fc 01       	movw	r30, r24
   16d28:	57 8f       	std	Z+31, r21	; 0x1f
   16d2a:	46 8f       	std	Z+30, r20	; 0x1e
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
   16d2c:	75 8f       	std	Z+29, r23	; 0x1d
   16d2e:	64 8f       	std	Z+28, r22	; 0x1c
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
   16d30:	31 a3       	std	Z+33, r19	; 0x21
   16d32:	20 a3       	std	Z+32, r18	; 0x20
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
   16d34:	12 ae       	std	Z+58, r1	; 0x3a
_ZN3PID15SetOutputLimitsEdd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   16d36:	12 aa       	std	Z+50, r1	; 0x32
   16d38:	13 aa       	std	Z+51, r1	; 0x33
   16d3a:	14 aa       	std	Z+52, r1	; 0x34
   16d3c:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   16d3e:	80 e0       	ldi	r24, 0x00	; 0
   16d40:	90 e0       	ldi	r25, 0x00	; 0
   16d42:	af e7       	ldi	r26, 0x7F	; 127
   16d44:	b3 e4       	ldi	r27, 0x43	; 67
   16d46:	86 ab       	std	Z+54, r24	; 0x36
   16d48:	97 ab       	std	Z+55, r25	; 0x37
   16d4a:	a0 af       	std	Z+56, r26	; 0x38
   16d4c:	b1 af       	std	Z+57, r27	; 0x39
_ZN3PIDC2EPdS0_S0_dddii():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   16d4e:	84 e6       	ldi	r24, 0x64	; 100
   16d50:	90 e0       	ldi	r25, 0x00	; 0
   16d52:	a0 e0       	ldi	r26, 0x00	; 0
   16d54:	b0 e0       	ldi	r27, 0x00	; 0
   16d56:	86 a7       	std	Z+46, r24	; 0x2e
   16d58:	97 a7       	std	Z+47, r25	; 0x2f
   16d5a:	a0 ab       	std	Z+48, r26	; 0x30
   16d5c:	b1 ab       	std	Z+49, r27	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:33

    PID::SetControllerDirection(ControllerDirection);
   16d5e:	6e 8d       	ldd	r22, Y+30	; 0x1e
   16d60:	7f 8d       	ldd	r23, Y+31	; 0x1f
   16d62:	c4 01       	movw	r24, r8
   16d64:	0e 94 3c b6 	call	0x16c78	; 0x16c78 <PID::SetControllerDirection(int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:34
    PID::SetTunings(Kp, Ki, Kd, POn);
   16d68:	ac 8c       	ldd	r10, Y+28	; 0x1c
   16d6a:	bd 8c       	ldd	r11, Y+29	; 0x1d
   16d6c:	c8 8c       	ldd	r12, Y+24	; 0x18
   16d6e:	d9 8c       	ldd	r13, Y+25	; 0x19
   16d70:	ea 8c       	ldd	r14, Y+26	; 0x1a
   16d72:	fb 8c       	ldd	r15, Y+27	; 0x1b
   16d74:	09 81       	ldd	r16, Y+1	; 0x01
   16d76:	1a 81       	ldd	r17, Y+2	; 0x02
   16d78:	2b 81       	ldd	r18, Y+3	; 0x03
   16d7a:	3c 81       	ldd	r19, Y+4	; 0x04
   16d7c:	b3 01       	movw	r22, r6
   16d7e:	a2 01       	movw	r20, r4
   16d80:	c4 01       	movw	r24, r8
   16d82:	0e 94 25 b4 	call	0x1684a	; 0x1684a <PID::SetTunings(double, double, double, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36

    lastTime = (millis() / 1000) - SampleTime;
   16d86:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   16d8a:	28 ee       	ldi	r18, 0xE8	; 232
   16d8c:	33 e0       	ldi	r19, 0x03	; 3
   16d8e:	40 e0       	ldi	r20, 0x00	; 0
   16d90:	50 e0       	ldi	r21, 0x00	; 0
   16d92:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
   16d96:	f4 01       	movw	r30, r8
   16d98:	86 a5       	ldd	r24, Z+46	; 0x2e
   16d9a:	97 a5       	ldd	r25, Z+47	; 0x2f
   16d9c:	a0 a9       	ldd	r26, Z+48	; 0x30
   16d9e:	b1 a9       	ldd	r27, Z+49	; 0x31
   16da0:	28 1b       	sub	r18, r24
   16da2:	39 0b       	sbc	r19, r25
   16da4:	4a 0b       	sbc	r20, r26
   16da6:	5b 0b       	sbc	r21, r27
   16da8:	22 a3       	std	Z+34, r18	; 0x22
   16daa:	33 a3       	std	Z+35, r19	; 0x23
   16dac:	44 a3       	std	Z+36, r20	; 0x24
   16dae:	55 a3       	std	Z+37, r21	; 0x25
/home/saric/Arduino/libraries/PID/PID_v1.cpp:37
}
   16db0:	0f 90       	pop	r0
   16db2:	0f 90       	pop	r0
   16db4:	0f 90       	pop	r0
   16db6:	0f 90       	pop	r0
   16db8:	df 91       	pop	r29
   16dba:	cf 91       	pop	r28
   16dbc:	1f 91       	pop	r17
   16dbe:	0f 91       	pop	r16
   16dc0:	ff 90       	pop	r15
   16dc2:	ef 90       	pop	r14
   16dc4:	df 90       	pop	r13
   16dc6:	cf 90       	pop	r12
   16dc8:	bf 90       	pop	r11
   16dca:	af 90       	pop	r10
   16dcc:	9f 90       	pop	r9
   16dce:	8f 90       	pop	r8
   16dd0:	7f 90       	pop	r7
   16dd2:	6f 90       	pop	r6
   16dd4:	5f 90       	pop	r5
   16dd6:	4f 90       	pop	r4
   16dd8:	08 95       	ret

00016dda <PID::PID(double*, double*, double*, double, double, double, int)>:
_ZN3PIDC2EPdS0_S0_dddi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:44
/*Constructor (...)*********************************************************
 *    To allow backwards compatability for v1.1, or for people that just want
 *    to use Proportional on Error without explicitly saying so
 ***************************************************************************/

PID::PID(double* Input, double* Output, double* Setpoint,
   16dda:	8f 92       	push	r8
   16ddc:	9f 92       	push	r9
   16dde:	af 92       	push	r10
   16de0:	bf 92       	push	r11
   16de2:	cf 92       	push	r12
   16de4:	df 92       	push	r13
   16de6:	ef 92       	push	r14
   16de8:	ff 92       	push	r15
   16dea:	0f 93       	push	r16
   16dec:	1f 93       	push	r17
   16dee:	cf 93       	push	r28
   16df0:	df 93       	push	r29
   16df2:	cd b7       	in	r28, 0x3d	; 61
   16df4:	de b7       	in	r29, 0x3e	; 62
   16df6:	e8 89       	ldd	r30, Y+16	; 0x10
   16df8:	f9 89       	ldd	r31, Y+17	; 0x11
   16dfa:	aa 89       	ldd	r26, Y+18	; 0x12
   16dfc:	bb 89       	ldd	r27, Y+19	; 0x13
   16dfe:	9c 88       	ldd	r9, Y+20	; 0x14
   16e00:	8d 88       	ldd	r8, Y+21	; 0x15
/home/saric/Arduino/libraries/PID/PID_v1.cpp:46
        double Kp, double Ki, double Kd, int ControllerDirection)
    :PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, P_ON_E, ControllerDirection)
   16e02:	8f 92       	push	r8
   16e04:	9f 92       	push	r9
   16e06:	1f 92       	push	r1
   16e08:	99 24       	eor	r9, r9
   16e0a:	93 94       	inc	r9
   16e0c:	9f 92       	push	r9
   16e0e:	bf 93       	push	r27
   16e10:	af 93       	push	r26
   16e12:	ff 93       	push	r31
   16e14:	ef 93       	push	r30
   16e16:	0e 94 78 b6 	call	0x16cf0	; 0x16cf0 <PID::PID(double*, double*, double*, double, double, double, int, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:49
{

}
   16e1a:	0f b6       	in	r0, 0x3f	; 63
   16e1c:	f8 94       	cli
   16e1e:	de bf       	out	0x3e, r29	; 62
   16e20:	0f be       	out	0x3f, r0	; 63
   16e22:	cd bf       	out	0x3d, r28	; 61
   16e24:	df 91       	pop	r29
   16e26:	cf 91       	pop	r28
   16e28:	1f 91       	pop	r17
   16e2a:	0f 91       	pop	r16
   16e2c:	ff 90       	pop	r15
   16e2e:	ef 90       	pop	r14
   16e30:	df 90       	pop	r13
   16e32:	cf 90       	pop	r12
   16e34:	bf 90       	pop	r11
   16e36:	af 90       	pop	r10
   16e38:	9f 90       	pop	r9
   16e3a:	8f 90       	pop	r8
   16e3c:	08 95       	ret

00016e3e <PubSubClient::PubSubClient(Client&)>:
_ZN12PubSubClientC2ER6Client():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:586
}

PubSubClient& PubSubClient::setStream(Stream& stream){
    this->stream = &stream;
    return *this;
}
   16e3e:	0f 93       	push	r16
   16e40:	1f 93       	push	r17
   16e42:	cf 93       	push	r28
   16e44:	df 93       	push	r29
   16e46:	ec 01       	movw	r28, r24
   16e48:	8b 01       	movw	r16, r22
   16e4a:	81 5f       	subi	r24, 0xF1	; 241
   16e4c:	9d 4f       	sbci	r25, 0xFD	; 253
   16e4e:	0e 94 8d cf 	call	0x19f1a	; 0x19f1a <IPAddress::IPAddress()>
   16e52:	fe 01       	movw	r30, r28
   16e54:	e5 5e       	subi	r30, 0xE5	; 229
   16e56:	fd 4f       	sbci	r31, 0xFD	; 253
   16e58:	8f ef       	ldi	r24, 0xFF	; 255
   16e5a:	9f ef       	ldi	r25, 0xFF	; 255
   16e5c:	91 83       	std	Z+1, r25	; 0x01
   16e5e:	80 83       	st	Z, r24
_ZN12PubSubClient9setClientER6Client():
   16e60:	19 83       	std	Y+1, r17	; 0x01
   16e62:	08 83       	st	Y, r16
_ZN12PubSubClientC2ER6Client():
   16e64:	c7 5e       	subi	r28, 0xE7	; 231
   16e66:	dd 4f       	sbci	r29, 0xFD	; 253
   16e68:	19 82       	std	Y+1, r1	; 0x01
   16e6a:	18 82       	st	Y, r1
   16e6c:	df 91       	pop	r29
   16e6e:	cf 91       	pop	r28
   16e70:	1f 91       	pop	r17
   16e72:	0f 91       	pop	r16
   16e74:	08 95       	ret

00016e76 <PubSubClient::readByte(unsigned char*)>:
_ZN12PubSubClient8readByteEPh():
   16e76:	cf 92       	push	r12
   16e78:	df 92       	push	r13
   16e7a:	ef 92       	push	r14
   16e7c:	ff 92       	push	r15
   16e7e:	0f 93       	push	r16
   16e80:	1f 93       	push	r17
   16e82:	cf 93       	push	r28
   16e84:	df 93       	push	r29
   16e86:	ec 01       	movw	r28, r24
   16e88:	8b 01       	movw	r16, r22
   16e8a:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   16e8e:	6b 01       	movw	r12, r22
   16e90:	7c 01       	movw	r14, r24
   16e92:	88 81       	ld	r24, Y
   16e94:	99 81       	ldd	r25, Y+1	; 0x01
   16e96:	dc 01       	movw	r26, r24
   16e98:	ed 91       	ld	r30, X+
   16e9a:	fc 91       	ld	r31, X
   16e9c:	00 84       	ldd	r0, Z+8	; 0x08
   16e9e:	f1 85       	ldd	r31, Z+9	; 0x09
   16ea0:	e0 2d       	mov	r30, r0
   16ea2:	19 95       	eicall
   16ea4:	89 2b       	or	r24, r25
   16ea6:	69 f4       	brne	.+26     	; 0x16ec2 <PubSubClient::readByte(unsigned char*)+0x4c>
   16ea8:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   16eac:	6c 19       	sub	r22, r12
   16eae:	7d 09       	sbc	r23, r13
   16eb0:	8e 09       	sbc	r24, r14
   16eb2:	9f 09       	sbc	r25, r15
   16eb4:	62 33       	cpi	r22, 0x32	; 50
   16eb6:	71 05       	cpc	r23, r1
   16eb8:	81 05       	cpc	r24, r1
   16eba:	91 05       	cpc	r25, r1
   16ebc:	50 f3       	brcs	.-44     	; 0x16e92 <PubSubClient::readByte(unsigned char*)+0x1c>
   16ebe:	80 e0       	ldi	r24, 0x00	; 0
   16ec0:	0c c0       	rjmp	.+24     	; 0x16eda <PubSubClient::readByte(unsigned char*)+0x64>
   16ec2:	88 81       	ld	r24, Y
   16ec4:	99 81       	ldd	r25, Y+1	; 0x01
   16ec6:	dc 01       	movw	r26, r24
   16ec8:	ed 91       	ld	r30, X+
   16eca:	fc 91       	ld	r31, X
   16ecc:	02 84       	ldd	r0, Z+10	; 0x0a
   16ece:	f3 85       	ldd	r31, Z+11	; 0x0b
   16ed0:	e0 2d       	mov	r30, r0
   16ed2:	19 95       	eicall
   16ed4:	f8 01       	movw	r30, r16
   16ed6:	80 83       	st	Z, r24
   16ed8:	81 e0       	ldi	r24, 0x01	; 1
   16eda:	df 91       	pop	r29
   16edc:	cf 91       	pop	r28
   16ede:	1f 91       	pop	r17
   16ee0:	0f 91       	pop	r16
   16ee2:	ff 90       	pop	r15
   16ee4:	ef 90       	pop	r14
   16ee6:	df 90       	pop	r13
   16ee8:	cf 90       	pop	r12
   16eea:	08 95       	ret

00016eec <PubSubClient::readByte(unsigned char*, unsigned int*)>:
_ZN12PubSubClient8readByteEPhPj():
   16eec:	0f 93       	push	r16
   16eee:	1f 93       	push	r17
   16ef0:	cf 93       	push	r28
   16ef2:	df 93       	push	r29
   16ef4:	8a 01       	movw	r16, r20
   16ef6:	fa 01       	movw	r30, r20
   16ef8:	c0 81       	ld	r28, Z
   16efa:	d1 81       	ldd	r29, Z+1	; 0x01
   16efc:	6c 0f       	add	r22, r28
   16efe:	7d 1f       	adc	r23, r29
   16f00:	0e 94 3b b7 	call	0x16e76	; 0x16e76 <PubSubClient::readByte(unsigned char*)>
   16f04:	88 23       	and	r24, r24
   16f06:	21 f0       	breq	.+8      	; 0x16f10 <PubSubClient::readByte(unsigned char*, unsigned int*)+0x24>
   16f08:	21 96       	adiw	r28, 0x01	; 1
   16f0a:	f8 01       	movw	r30, r16
   16f0c:	d1 83       	std	Z+1, r29	; 0x01
   16f0e:	c0 83       	st	Z, r28
   16f10:	df 91       	pop	r29
   16f12:	cf 91       	pop	r28
   16f14:	1f 91       	pop	r17
   16f16:	0f 91       	pop	r16
   16f18:	08 95       	ret

00016f1a <PubSubClient::readPacket(unsigned char*)>:
_ZN12PubSubClient10readPacketEPh():
   16f1a:	4f 92       	push	r4
   16f1c:	5f 92       	push	r5
   16f1e:	6f 92       	push	r6
   16f20:	7f 92       	push	r7
   16f22:	8f 92       	push	r8
   16f24:	9f 92       	push	r9
   16f26:	af 92       	push	r10
   16f28:	bf 92       	push	r11
   16f2a:	cf 92       	push	r12
   16f2c:	df 92       	push	r13
   16f2e:	ef 92       	push	r14
   16f30:	ff 92       	push	r15
   16f32:	0f 93       	push	r16
   16f34:	1f 93       	push	r17
   16f36:	cf 93       	push	r28
   16f38:	df 93       	push	r29
   16f3a:	00 d0       	rcall	.+0      	; 0x16f3c <PubSubClient::readPacket(unsigned char*)+0x22>
   16f3c:	1f 92       	push	r1
   16f3e:	cd b7       	in	r28, 0x3d	; 61
   16f40:	de b7       	in	r29, 0x3e	; 62
   16f42:	8c 01       	movw	r16, r24
   16f44:	4b 01       	movw	r8, r22
   16f46:	1a 82       	std	Y+2, r1	; 0x02
   16f48:	19 82       	std	Y+1, r1	; 0x01
   16f4a:	7c 01       	movw	r14, r24
   16f4c:	22 e0       	ldi	r18, 0x02	; 2
   16f4e:	e2 0e       	add	r14, r18
   16f50:	f1 1c       	adc	r15, r1
   16f52:	ae 01       	movw	r20, r28
   16f54:	4f 5f       	subi	r20, 0xFF	; 255
   16f56:	5f 4f       	sbci	r21, 0xFF	; 255
   16f58:	b7 01       	movw	r22, r14
   16f5a:	0e 94 76 b7 	call	0x16eec	; 0x16eec <PubSubClient::readByte(unsigned char*, unsigned int*)>
   16f5e:	81 11       	cpse	r24, r1
   16f60:	17 c0       	rjmp	.+46     	; 0x16f90 <PubSubClient::readPacket(unsigned char*)+0x76>
   16f62:	90 e0       	ldi	r25, 0x00	; 0
   16f64:	80 e0       	ldi	r24, 0x00	; 0
   16f66:	0f 90       	pop	r0
   16f68:	0f 90       	pop	r0
   16f6a:	0f 90       	pop	r0
   16f6c:	0f 90       	pop	r0
   16f6e:	df 91       	pop	r29
   16f70:	cf 91       	pop	r28
   16f72:	1f 91       	pop	r17
   16f74:	0f 91       	pop	r16
   16f76:	ff 90       	pop	r15
   16f78:	ef 90       	pop	r14
   16f7a:	df 90       	pop	r13
   16f7c:	cf 90       	pop	r12
   16f7e:	bf 90       	pop	r11
   16f80:	af 90       	pop	r10
   16f82:	9f 90       	pop	r9
   16f84:	8f 90       	pop	r8
   16f86:	7f 90       	pop	r7
   16f88:	6f 90       	pop	r6
   16f8a:	5f 90       	pop	r5
   16f8c:	4f 90       	pop	r4
   16f8e:	08 95       	ret
   16f90:	d8 01       	movw	r26, r16
   16f92:	12 96       	adiw	r26, 0x02	; 2
   16f94:	dc 90       	ld	r13, X
   16f96:	1b 82       	std	Y+3, r1	; 0x03
   16f98:	b1 2c       	mov	r11, r1
   16f9a:	a1 2c       	mov	r10, r1
   16f9c:	41 2c       	mov	r4, r1
   16f9e:	51 2c       	mov	r5, r1
   16fa0:	32 01       	movw	r6, r4
   16fa2:	43 94       	inc	r4
   16fa4:	be 01       	movw	r22, r28
   16fa6:	6d 5f       	subi	r22, 0xFD	; 253
   16fa8:	7f 4f       	sbci	r23, 0xFF	; 255
   16faa:	c8 01       	movw	r24, r16
   16fac:	0e 94 3b b7 	call	0x16e76	; 0x16e76 <PubSubClient::readByte(unsigned char*)>
   16fb0:	88 23       	and	r24, r24
   16fb2:	b9 f2       	breq	.-82     	; 0x16f62 <PubSubClient::readPacket(unsigned char*)+0x48>
   16fb4:	29 81       	ldd	r18, Y+1	; 0x01
   16fb6:	3a 81       	ldd	r19, Y+2	; 0x02
   16fb8:	c9 01       	movw	r24, r18
   16fba:	01 96       	adiw	r24, 0x01	; 1
   16fbc:	9a 83       	std	Y+2, r25	; 0x02
   16fbe:	89 83       	std	Y+1, r24	; 0x01
   16fc0:	4b 81       	ldd	r20, Y+3	; 0x03
   16fc2:	20 0f       	add	r18, r16
   16fc4:	31 1f       	adc	r19, r17
   16fc6:	f9 01       	movw	r30, r18
   16fc8:	42 83       	std	Z+2, r20	; 0x02
   16fca:	24 2f       	mov	r18, r20
   16fcc:	2f 77       	andi	r18, 0x7F	; 127
   16fce:	30 e0       	ldi	r19, 0x00	; 0
   16fd0:	24 9d       	mul	r18, r4
   16fd2:	b0 01       	movw	r22, r0
   16fd4:	25 9d       	mul	r18, r5
   16fd6:	70 0d       	add	r23, r0
   16fd8:	34 9d       	mul	r19, r4
   16fda:	70 0d       	add	r23, r0
   16fdc:	11 24       	eor	r1, r1
   16fde:	a6 0e       	add	r10, r22
   16fe0:	b7 1e       	adc	r11, r23
   16fe2:	97 e0       	ldi	r25, 0x07	; 7
   16fe4:	44 0c       	add	r4, r4
   16fe6:	55 1c       	adc	r5, r5
   16fe8:	66 1c       	adc	r6, r6
   16fea:	77 1c       	adc	r7, r7
   16fec:	9a 95       	dec	r25
   16fee:	d1 f7       	brne	.-12     	; 0x16fe4 <PubSubClient::readPacket(unsigned char*)+0xca>
   16ff0:	47 fd       	sbrc	r20, 7
   16ff2:	d8 cf       	rjmp	.-80     	; 0x16fa4 <PubSubClient::readPacket(unsigned char*)+0x8a>
   16ff4:	fd 2d       	mov	r31, r13
   16ff6:	f0 7f       	andi	r31, 0xF0	; 240
   16ff8:	fc 83       	std	Y+4, r31	; 0x04
   16ffa:	81 50       	subi	r24, 0x01	; 1
   16ffc:	d4 01       	movw	r26, r8
   16ffe:	8c 93       	st	X, r24
   17000:	80 e0       	ldi	r24, 0x00	; 0
   17002:	d1 2c       	mov	r13, r1
   17004:	c1 2c       	mov	r12, r1
   17006:	f0 33       	cpi	r31, 0x30	; 48
   17008:	41 f5       	brne	.+80     	; 0x1705a <PubSubClient::readPacket(unsigned char*)+0x140>
   1700a:	ae 01       	movw	r20, r28
   1700c:	4f 5f       	subi	r20, 0xFF	; 255
   1700e:	5f 4f       	sbci	r21, 0xFF	; 255
   17010:	b7 01       	movw	r22, r14
   17012:	c8 01       	movw	r24, r16
   17014:	0e 94 76 b7 	call	0x16eec	; 0x16eec <PubSubClient::readByte(unsigned char*, unsigned int*)>
   17018:	88 23       	and	r24, r24
   1701a:	09 f4       	brne	.+2      	; 0x1701e <PubSubClient::readPacket(unsigned char*)+0x104>
   1701c:	a2 cf       	rjmp	.-188    	; 0x16f62 <PubSubClient::readPacket(unsigned char*)+0x48>
   1701e:	ae 01       	movw	r20, r28
   17020:	4f 5f       	subi	r20, 0xFF	; 255
   17022:	5f 4f       	sbci	r21, 0xFF	; 255
   17024:	b7 01       	movw	r22, r14
   17026:	c8 01       	movw	r24, r16
   17028:	0e 94 76 b7 	call	0x16eec	; 0x16eec <PubSubClient::readByte(unsigned char*, unsigned int*)>
   1702c:	88 23       	and	r24, r24
   1702e:	09 f4       	brne	.+2      	; 0x17032 <PubSubClient::readPacket(unsigned char*)+0x118>
   17030:	98 cf       	rjmp	.-208    	; 0x16f62 <PubSubClient::readPacket(unsigned char*)+0x48>
   17032:	d4 01       	movw	r26, r8
   17034:	ec 91       	ld	r30, X
   17036:	e0 0f       	add	r30, r16
   17038:	f1 2f       	mov	r31, r17
   1703a:	f1 1d       	adc	r31, r1
   1703c:	c3 80       	ldd	r12, Z+3	; 0x03
   1703e:	d1 2c       	mov	r13, r1
   17040:	dc 2c       	mov	r13, r12
   17042:	cc 24       	eor	r12, r12
   17044:	84 81       	ldd	r24, Z+4	; 0x04
   17046:	c8 0e       	add	r12, r24
   17048:	d1 1c       	adc	r13, r1
   1704a:	f8 01       	movw	r30, r16
   1704c:	82 81       	ldd	r24, Z+2	; 0x02
   1704e:	81 ff       	sbrs	r24, 1
   17050:	03 c0       	rjmp	.+6      	; 0x17058 <PubSubClient::readPacket(unsigned char*)+0x13e>
   17052:	f2 e0       	ldi	r31, 0x02	; 2
   17054:	cf 0e       	add	r12, r31
   17056:	d1 1c       	adc	r13, r1
   17058:	82 e0       	ldi	r24, 0x02	; 2
   1705a:	e8 2e       	mov	r14, r24
   1705c:	f1 2c       	mov	r15, r1
   1705e:	38 01       	movw	r6, r16
   17060:	27 ee       	ldi	r18, 0xE7	; 231
   17062:	62 1a       	sub	r6, r18
   17064:	2d ef       	ldi	r18, 0xFD	; 253
   17066:	72 0a       	sbc	r7, r18
   17068:	ea 14       	cp	r14, r10
   1706a:	fb 04       	cpc	r15, r11
   1706c:	b0 f5       	brcc	.+108    	; 0x170da <PubSubClient::readPacket(unsigned char*)+0x1c0>
   1706e:	be 01       	movw	r22, r28
   17070:	6d 5f       	subi	r22, 0xFD	; 253
   17072:	7f 4f       	sbci	r23, 0xFF	; 255
   17074:	c8 01       	movw	r24, r16
   17076:	0e 94 3b b7 	call	0x16e76	; 0x16e76 <PubSubClient::readByte(unsigned char*)>
   1707a:	88 23       	and	r24, r24
   1707c:	09 f4       	brne	.+2      	; 0x17080 <PubSubClient::readPacket(unsigned char*)+0x166>
   1707e:	71 cf       	rjmp	.-286    	; 0x16f62 <PubSubClient::readPacket(unsigned char*)+0x48>
   17080:	d3 01       	movw	r26, r6
   17082:	8d 91       	ld	r24, X+
   17084:	9c 91       	ld	r25, X
   17086:	00 97       	sbiw	r24, 0x00	; 0
   17088:	b1 f0       	breq	.+44     	; 0x170b6 <PubSubClient::readPacket(unsigned char*)+0x19c>
   1708a:	bc 81       	ldd	r27, Y+4	; 0x04
   1708c:	b0 33       	cpi	r27, 0x30	; 48
   1708e:	99 f4       	brne	.+38     	; 0x170b6 <PubSubClient::readPacket(unsigned char*)+0x19c>
   17090:	29 81       	ldd	r18, Y+1	; 0x01
   17092:	3a 81       	ldd	r19, Y+2	; 0x02
   17094:	22 50       	subi	r18, 0x02	; 2
   17096:	31 09       	sbc	r19, r1
   17098:	f4 01       	movw	r30, r8
   1709a:	40 81       	ld	r20, Z
   1709c:	24 1b       	sub	r18, r20
   1709e:	31 09       	sbc	r19, r1
   170a0:	c2 16       	cp	r12, r18
   170a2:	d3 06       	cpc	r13, r19
   170a4:	40 f4       	brcc	.+16     	; 0x170b6 <PubSubClient::readPacket(unsigned char*)+0x19c>
   170a6:	dc 01       	movw	r26, r24
   170a8:	ed 91       	ld	r30, X+
   170aa:	fc 91       	ld	r31, X
   170ac:	01 90       	ld	r0, Z+
   170ae:	f0 81       	ld	r31, Z
   170b0:	e0 2d       	mov	r30, r0
   170b2:	6b 81       	ldd	r22, Y+3	; 0x03
   170b4:	19 95       	eicall
   170b6:	89 81       	ldd	r24, Y+1	; 0x01
   170b8:	9a 81       	ldd	r25, Y+2	; 0x02
   170ba:	81 15       	cp	r24, r1
   170bc:	b2 e0       	ldi	r27, 0x02	; 2
   170be:	9b 07       	cpc	r25, r27
   170c0:	28 f4       	brcc	.+10     	; 0x170cc <PubSubClient::readPacket(unsigned char*)+0x1b2>
   170c2:	2b 81       	ldd	r18, Y+3	; 0x03
   170c4:	f8 01       	movw	r30, r16
   170c6:	e8 0f       	add	r30, r24
   170c8:	f9 1f       	adc	r31, r25
   170ca:	22 83       	std	Z+2, r18	; 0x02
   170cc:	01 96       	adiw	r24, 0x01	; 1
   170ce:	9a 83       	std	Y+2, r25	; 0x02
   170d0:	89 83       	std	Y+1, r24	; 0x01
   170d2:	ef ef       	ldi	r30, 0xFF	; 255
   170d4:	ee 1a       	sub	r14, r30
   170d6:	fe 0a       	sbc	r15, r30
   170d8:	c7 cf       	rjmp	.-114    	; 0x17068 <PubSubClient::readPacket(unsigned char*)+0x14e>
   170da:	f8 01       	movw	r30, r16
   170dc:	e7 5e       	subi	r30, 0xE7	; 231
   170de:	fd 4f       	sbci	r31, 0xFD	; 253
   170e0:	80 81       	ld	r24, Z
   170e2:	91 81       	ldd	r25, Z+1	; 0x01
   170e4:	89 2b       	or	r24, r25
   170e6:	39 f4       	brne	.+14     	; 0x170f6 <PubSubClient::readPacket(unsigned char*)+0x1dc>
   170e8:	89 81       	ldd	r24, Y+1	; 0x01
   170ea:	9a 81       	ldd	r25, Y+2	; 0x02
   170ec:	81 30       	cpi	r24, 0x01	; 1
   170ee:	92 40       	sbci	r25, 0x02	; 2
   170f0:	10 f0       	brcs	.+4      	; 0x170f6 <PubSubClient::readPacket(unsigned char*)+0x1dc>
   170f2:	1a 82       	std	Y+2, r1	; 0x02
   170f4:	19 82       	std	Y+1, r1	; 0x01
   170f6:	89 81       	ldd	r24, Y+1	; 0x01
   170f8:	9a 81       	ldd	r25, Y+2	; 0x02
   170fa:	35 cf       	rjmp	.-406    	; 0x16f66 <PubSubClient::readPacket(unsigned char*)+0x4c>

000170fc <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
   170fc:	bf 92       	push	r11
   170fe:	cf 92       	push	r12
   17100:	df 92       	push	r13
   17102:	ef 92       	push	r14
   17104:	ff 92       	push	r15
   17106:	0f 93       	push	r16
   17108:	1f 93       	push	r17
   1710a:	cf 93       	push	r28
   1710c:	df 93       	push	r29
   1710e:	00 d0       	rcall	.+0      	; 0x17110 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
   17110:	1f 92       	push	r1
   17112:	cd b7       	in	r28, 0x3d	; 61
   17114:	de b7       	in	r29, 0x3e	; 62
   17116:	7c 01       	movw	r14, r24
   17118:	b6 2e       	mov	r11, r22
   1711a:	89 01       	movw	r16, r18
   1711c:	c9 01       	movw	r24, r18
   1711e:	30 e0       	ldi	r19, 0x00	; 0
   17120:	be 01       	movw	r22, r28
   17122:	6f 5f       	subi	r22, 0xFF	; 255
   17124:	7f 4f       	sbci	r23, 0xFF	; 255
   17126:	6b 01       	movw	r12, r22
   17128:	28 2f       	mov	r18, r24
   1712a:	2f 77       	andi	r18, 0x7F	; 127
   1712c:	88 0f       	add	r24, r24
   1712e:	89 2f       	mov	r24, r25
   17130:	88 1f       	adc	r24, r24
   17132:	99 0b       	sbc	r25, r25
   17134:	91 95       	neg	r25
   17136:	00 97       	sbiw	r24, 0x00	; 0
   17138:	09 f0       	breq	.+2      	; 0x1713c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
   1713a:	20 68       	ori	r18, 0x80	; 128
   1713c:	f6 01       	movw	r30, r12
   1713e:	e3 0f       	add	r30, r19
   17140:	f1 1d       	adc	r31, r1
   17142:	20 83       	st	Z, r18
   17144:	3f 5f       	subi	r19, 0xFF	; 255
   17146:	00 97       	sbiw	r24, 0x00	; 0
   17148:	79 f7       	brne	.-34     	; 0x17128 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
   1714a:	e3 2f       	mov	r30, r19
   1714c:	f0 e0       	ldi	r31, 0x00	; 0
   1714e:	ba 01       	movw	r22, r20
   17150:	6e 1b       	sub	r22, r30
   17152:	7f 0b       	sbc	r23, r31
   17154:	6c 5f       	subi	r22, 0xFC	; 252
   17156:	7f 4f       	sbci	r23, 0xFF	; 255
   17158:	db 01       	movw	r26, r22
   1715a:	bc 92       	st	X, r11
   1715c:	4e 1b       	sub	r20, r30
   1715e:	5f 0b       	sbc	r21, r31
   17160:	4b 5f       	subi	r20, 0xFB	; 251
   17162:	5f 4f       	sbci	r21, 0xFF	; 255
   17164:	c6 01       	movw	r24, r12
   17166:	9c 01       	movw	r18, r24
   17168:	2c 19       	sub	r18, r12
   1716a:	3d 09       	sbc	r19, r13
   1716c:	2e 17       	cp	r18, r30
   1716e:	3f 07       	cpc	r19, r31
   17170:	3c f4       	brge	.+14     	; 0x17180 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
   17172:	dc 01       	movw	r26, r24
   17174:	2d 91       	ld	r18, X+
   17176:	cd 01       	movw	r24, r26
   17178:	da 01       	movw	r26, r20
   1717a:	2d 93       	st	X+, r18
   1717c:	ad 01       	movw	r20, r26
   1717e:	f3 cf       	rjmp	.-26     	; 0x17166 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
   17180:	d7 01       	movw	r26, r14
   17182:	8d 91       	ld	r24, X+
   17184:	9c 91       	ld	r25, X
   17186:	0f 5f       	subi	r16, 0xFF	; 255
   17188:	1f 4f       	sbci	r17, 0xFF	; 255
   1718a:	0e 0f       	add	r16, r30
   1718c:	1f 1f       	adc	r17, r31
   1718e:	dc 01       	movw	r26, r24
   17190:	ed 91       	ld	r30, X+
   17192:	fc 91       	ld	r31, X
   17194:	02 80       	ldd	r0, Z+2	; 0x02
   17196:	f3 81       	ldd	r31, Z+3	; 0x03
   17198:	e0 2d       	mov	r30, r0
   1719a:	a8 01       	movw	r20, r16
   1719c:	19 95       	eicall
   1719e:	6c 01       	movw	r12, r24
   171a0:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   171a4:	f7 01       	movw	r30, r14
   171a6:	ec 5f       	subi	r30, 0xFC	; 252
   171a8:	fd 4f       	sbci	r31, 0xFD	; 253
   171aa:	60 83       	st	Z, r22
   171ac:	71 83       	std	Z+1, r23	; 0x01
   171ae:	82 83       	std	Z+2, r24	; 0x02
   171b0:	93 83       	std	Z+3, r25	; 0x03
   171b2:	81 e0       	ldi	r24, 0x01	; 1
   171b4:	0c 15       	cp	r16, r12
   171b6:	1d 05       	cpc	r17, r13
   171b8:	09 f0       	breq	.+2      	; 0x171bc <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
   171ba:	80 e0       	ldi	r24, 0x00	; 0
   171bc:	0f 90       	pop	r0
   171be:	0f 90       	pop	r0
   171c0:	0f 90       	pop	r0
   171c2:	0f 90       	pop	r0
   171c4:	df 91       	pop	r29
   171c6:	cf 91       	pop	r28
   171c8:	1f 91       	pop	r17
   171ca:	0f 91       	pop	r16
   171cc:	ff 90       	pop	r15
   171ce:	ef 90       	pop	r14
   171d0:	df 90       	pop	r13
   171d2:	cf 90       	pop	r12
   171d4:	bf 90       	pop	r11
   171d6:	08 95       	ret

000171d8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>:
_ZN12PubSubClient11writeStringEPKcPhj():
   171d8:	cf 93       	push	r28
   171da:	df 93       	push	r29
   171dc:	eb 01       	movw	r28, r22
   171de:	f9 01       	movw	r30, r18
   171e0:	32 96       	adiw	r30, 0x02	; 2
   171e2:	e4 0f       	add	r30, r20
   171e4:	f5 1f       	adc	r31, r21
   171e6:	db 01       	movw	r26, r22
   171e8:	9d 01       	movw	r18, r26
   171ea:	2c 1b       	sub	r18, r28
   171ec:	3d 0b       	sbc	r19, r29
   171ee:	cf 01       	movw	r24, r30
   171f0:	84 1b       	sub	r24, r20
   171f2:	95 0b       	sbc	r25, r21
   171f4:	7d 91       	ld	r23, X+
   171f6:	77 23       	and	r23, r23
   171f8:	11 f0       	breq	.+4      	; 0x171fe <PubSubClient::writeString(char const*, unsigned char*, unsigned int)+0x26>
   171fa:	71 93       	st	Z+, r23
   171fc:	f5 cf       	rjmp	.-22     	; 0x171e8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)+0x10>
   171fe:	bc 01       	movw	r22, r24
   17200:	62 1b       	sub	r22, r18
   17202:	73 0b       	sbc	r23, r19
   17204:	46 0f       	add	r20, r22
   17206:	57 1f       	adc	r21, r23
   17208:	fa 01       	movw	r30, r20
   1720a:	32 97       	sbiw	r30, 0x02	; 2
   1720c:	30 83       	st	Z, r19
   1720e:	41 50       	subi	r20, 0x01	; 1
   17210:	51 09       	sbc	r21, r1
   17212:	fa 01       	movw	r30, r20
   17214:	20 83       	st	Z, r18
   17216:	df 91       	pop	r29
   17218:	cf 91       	pop	r28
   1721a:	08 95       	ret

0001721c <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
   1721c:	cf 93       	push	r28
   1721e:	df 93       	push	r29
   17220:	fc 01       	movw	r30, r24
   17222:	a0 81       	ld	r26, Z
   17224:	b1 81       	ldd	r27, Z+1	; 0x01
   17226:	10 97       	sbiw	r26, 0x00	; 0
   17228:	21 f4       	brne	.+8      	; 0x17232 <PubSubClient::connected()+0x16>
   1722a:	80 e0       	ldi	r24, 0x00	; 0
   1722c:	df 91       	pop	r29
   1722e:	cf 91       	pop	r28
   17230:	08 95       	ret
   17232:	ec 01       	movw	r28, r24
   17234:	ed 91       	ld	r30, X+
   17236:	fc 91       	ld	r31, X
   17238:	11 97       	sbiw	r26, 0x01	; 1
   1723a:	06 88       	ldd	r0, Z+22	; 0x16
   1723c:	f7 89       	ldd	r31, Z+23	; 0x17
   1723e:	e0 2d       	mov	r30, r0
   17240:	cd 01       	movw	r24, r26
   17242:	19 95       	eicall
   17244:	81 11       	cpse	r24, r1
   17246:	1e c0       	rjmp	.+60     	; 0x17284 <PubSubClient::connected()+0x68>
   17248:	fe 01       	movw	r30, r28
   1724a:	e5 5e       	subi	r30, 0xE5	; 229
   1724c:	fd 4f       	sbci	r31, 0xFD	; 253
   1724e:	80 81       	ld	r24, Z
   17250:	91 81       	ldd	r25, Z+1	; 0x01
   17252:	89 2b       	or	r24, r25
   17254:	51 f7       	brne	.-44     	; 0x1722a <PubSubClient::connected()+0xe>
   17256:	8d ef       	ldi	r24, 0xFD	; 253
   17258:	9f ef       	ldi	r25, 0xFF	; 255
   1725a:	91 83       	std	Z+1, r25	; 0x01
   1725c:	80 83       	st	Z, r24
   1725e:	88 81       	ld	r24, Y
   17260:	99 81       	ldd	r25, Y+1	; 0x01
   17262:	dc 01       	movw	r26, r24
   17264:	ed 91       	ld	r30, X+
   17266:	fc 91       	ld	r31, X
   17268:	06 80       	ldd	r0, Z+6	; 0x06
   1726a:	f7 81       	ldd	r31, Z+7	; 0x07
   1726c:	e0 2d       	mov	r30, r0
   1726e:	19 95       	eicall
   17270:	88 81       	ld	r24, Y
   17272:	99 81       	ldd	r25, Y+1	; 0x01
   17274:	dc 01       	movw	r26, r24
   17276:	ed 91       	ld	r30, X+
   17278:	fc 91       	ld	r31, X
   1727a:	04 88       	ldd	r0, Z+20	; 0x14
   1727c:	f5 89       	ldd	r31, Z+21	; 0x15
   1727e:	e0 2d       	mov	r30, r0
   17280:	19 95       	eicall
   17282:	d3 cf       	rjmp	.-90     	; 0x1722a <PubSubClient::connected()+0xe>
   17284:	81 e0       	ldi	r24, 0x01	; 1
   17286:	d2 cf       	rjmp	.-92     	; 0x1722c <PubSubClient::connected()+0x10>

00017288 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)>:
_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_():
   17288:	2f 92       	push	r2
   1728a:	3f 92       	push	r3
   1728c:	4f 92       	push	r4
   1728e:	5f 92       	push	r5
   17290:	6f 92       	push	r6
   17292:	7f 92       	push	r7
   17294:	8f 92       	push	r8
   17296:	9f 92       	push	r9
   17298:	af 92       	push	r10
   1729a:	bf 92       	push	r11
   1729c:	cf 92       	push	r12
   1729e:	df 92       	push	r13
   172a0:	ef 92       	push	r14
   172a2:	ff 92       	push	r15
   172a4:	0f 93       	push	r16
   172a6:	1f 93       	push	r17
   172a8:	cf 93       	push	r28
   172aa:	df 93       	push	r29
   172ac:	cd b7       	in	r28, 0x3d	; 61
   172ae:	de b7       	in	r29, 0x3e	; 62
   172b0:	2e 97       	sbiw	r28, 0x0e	; 14
   172b2:	0f b6       	in	r0, 0x3f	; 63
   172b4:	f8 94       	cli
   172b6:	de bf       	out	0x3e, r29	; 62
   172b8:	0f be       	out	0x3f, r0	; 63
   172ba:	cd bf       	out	0x3d, r28	; 61
   172bc:	4c 01       	movw	r8, r24
   172be:	1b 01       	movw	r2, r22
   172c0:	2a 01       	movw	r4, r20
   172c2:	39 01       	movw	r6, r18
   172c4:	0e 94 0e b9 	call	0x1721c	; 0x1721c <PubSubClient::connected()>
   172c8:	d8 2e       	mov	r13, r24
   172ca:	81 11       	cpse	r24, r1
   172cc:	08 c1       	rjmp	.+528    	; 0x174de <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>
   172ce:	f4 01       	movw	r30, r8
   172d0:	eb 5e       	subi	r30, 0xEB	; 235
   172d2:	fd 4f       	sbci	r31, 0xFD	; 253
   172d4:	60 81       	ld	r22, Z
   172d6:	71 81       	ldd	r23, Z+1	; 0x01
   172d8:	d4 01       	movw	r26, r8
   172da:	8d 91       	ld	r24, X+
   172dc:	9c 91       	ld	r25, X
   172de:	dc 01       	movw	r26, r24
   172e0:	ed 91       	ld	r30, X+
   172e2:	fc 91       	ld	r31, X
   172e4:	d4 01       	movw	r26, r8
   172e6:	a9 5e       	subi	r26, 0xE9	; 233
   172e8:	bd 4f       	sbci	r27, 0xFD	; 253
   172ea:	2d 91       	ld	r18, X+
   172ec:	3c 91       	ld	r19, X
   172ee:	3e 87       	std	Y+14, r19	; 0x0e
   172f0:	2d 87       	std	Y+13, r18	; 0x0d
   172f2:	61 15       	cp	r22, r1
   172f4:	71 05       	cpc	r23, r1
   172f6:	09 f4       	brne	.+2      	; 0x172fa <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x72>
   172f8:	b5 c0       	rjmp	.+362    	; 0x17464 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x1dc>
   172fa:	00 88       	ldd	r0, Z+16	; 0x10
   172fc:	f1 89       	ldd	r31, Z+17	; 0x11
   172fe:	e0 2d       	mov	r30, r0
   17300:	a9 01       	movw	r20, r18
   17302:	19 95       	eicall
   17304:	f4 01       	movw	r30, r8
   17306:	81 30       	cpi	r24, 0x01	; 1
   17308:	91 05       	cpc	r25, r1
   1730a:	09 f0       	breq	.+2      	; 0x1730e <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x86>
   1730c:	0a c1       	rjmp	.+532    	; 0x17522 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x29a>
   1730e:	ee 5f       	subi	r30, 0xFE	; 254
   17310:	fd 4f       	sbci	r31, 0xFD	; 253
   17312:	91 83       	std	Z+1, r25	; 0x01
   17314:	80 83       	st	Z, r24
   17316:	87 e0       	ldi	r24, 0x07	; 7
   17318:	eb e8       	ldi	r30, 0x8B	; 139
   1731a:	f2 e0       	ldi	r31, 0x02	; 2
   1731c:	de 01       	movw	r26, r28
   1731e:	11 96       	adiw	r26, 0x01	; 1
   17320:	01 90       	ld	r0, Z+
   17322:	0d 92       	st	X+, r0
   17324:	8a 95       	dec	r24
   17326:	e1 f7       	brne	.-8      	; 0x17320 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x98>
   17328:	fe 01       	movw	r30, r28
   1732a:	31 96       	adiw	r30, 0x01	; 1
   1732c:	d4 01       	movw	r26, r8
   1732e:	17 96       	adiw	r26, 0x07	; 7
   17330:	c4 01       	movw	r24, r8
   17332:	0e 96       	adiw	r24, 0x0e	; 14
   17334:	21 91       	ld	r18, Z+
   17336:	2d 93       	st	X+, r18
   17338:	8a 17       	cp	r24, r26
   1733a:	9b 07       	cpc	r25, r27
   1733c:	d9 f7       	brne	.-10     	; 0x17334 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xac>
   1733e:	82 e0       	ldi	r24, 0x02	; 2
   17340:	01 15       	cp	r16, r1
   17342:	11 05       	cpc	r17, r1
   17344:	51 f0       	breq	.+20     	; 0x1735a <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xd2>
   17346:	30 e2       	ldi	r19, 0x20	; 32
   17348:	c3 9e       	mul	r12, r19
   1734a:	c0 01       	movw	r24, r0
   1734c:	11 24       	eor	r1, r1
   1734e:	86 60       	ori	r24, 0x06	; 6
   17350:	48 e0       	ldi	r20, 0x08	; 8
   17352:	e4 9e       	mul	r14, r20
   17354:	70 01       	movw	r14, r0
   17356:	11 24       	eor	r1, r1
   17358:	8e 29       	or	r24, r14
   1735a:	41 14       	cp	r4, r1
   1735c:	51 04       	cpc	r5, r1
   1735e:	29 f0       	breq	.+10     	; 0x1736a <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe2>
   17360:	61 14       	cp	r6, r1
   17362:	71 04       	cpc	r7, r1
   17364:	09 f0       	breq	.+2      	; 0x17368 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe0>
   17366:	98 c0       	rjmp	.+304    	; 0x17498 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x210>
   17368:	80 68       	ori	r24, 0x80	; 128
   1736a:	d4 01       	movw	r26, r8
   1736c:	1e 96       	adiw	r26, 0x0e	; 14
   1736e:	8c 93       	st	X, r24
   17370:	1e 97       	sbiw	r26, 0x0e	; 14
   17372:	1f 96       	adiw	r26, 0x0f	; 15
   17374:	1c 92       	st	X, r1
   17376:	1f 97       	sbiw	r26, 0x0f	; 15
   17378:	8f e0       	ldi	r24, 0x0F	; 15
   1737a:	50 96       	adiw	r26, 0x10	; 16
   1737c:	8c 93       	st	X, r24
   1737e:	74 01       	movw	r14, r8
   17380:	b2 e0       	ldi	r27, 0x02	; 2
   17382:	eb 0e       	add	r14, r27
   17384:	f1 1c       	adc	r15, r1
   17386:	2f e0       	ldi	r18, 0x0F	; 15
   17388:	30 e0       	ldi	r19, 0x00	; 0
   1738a:	a7 01       	movw	r20, r14
   1738c:	b1 01       	movw	r22, r2
   1738e:	c4 01       	movw	r24, r8
   17390:	0e 94 ec b8 	call	0x171d8	; 0x171d8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   17394:	01 15       	cp	r16, r1
   17396:	11 05       	cpc	r17, r1
   17398:	61 f0       	breq	.+24     	; 0x173b2 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x12a>
   1739a:	9c 01       	movw	r18, r24
   1739c:	a7 01       	movw	r20, r14
   1739e:	b8 01       	movw	r22, r16
   173a0:	c4 01       	movw	r24, r8
   173a2:	0e 94 ec b8 	call	0x171d8	; 0x171d8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   173a6:	9c 01       	movw	r18, r24
   173a8:	a7 01       	movw	r20, r14
   173aa:	b5 01       	movw	r22, r10
   173ac:	c4 01       	movw	r24, r8
   173ae:	0e 94 ec b8 	call	0x171d8	; 0x171d8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   173b2:	41 14       	cp	r4, r1
   173b4:	51 04       	cpc	r5, r1
   173b6:	79 f0       	breq	.+30     	; 0x173d6 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x14e>
   173b8:	9c 01       	movw	r18, r24
   173ba:	a7 01       	movw	r20, r14
   173bc:	b2 01       	movw	r22, r4
   173be:	c4 01       	movw	r24, r8
   173c0:	0e 94 ec b8 	call	0x171d8	; 0x171d8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   173c4:	61 14       	cp	r6, r1
   173c6:	71 04       	cpc	r7, r1
   173c8:	31 f0       	breq	.+12     	; 0x173d6 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x14e>
   173ca:	9c 01       	movw	r18, r24
   173cc:	a7 01       	movw	r20, r14
   173ce:	b3 01       	movw	r22, r6
   173d0:	c4 01       	movw	r24, r8
   173d2:	0e 94 ec b8 	call	0x171d8	; 0x171d8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   173d6:	9c 01       	movw	r18, r24
   173d8:	25 50       	subi	r18, 0x05	; 5
   173da:	31 09       	sbc	r19, r1
   173dc:	a7 01       	movw	r20, r14
   173de:	60 e1       	ldi	r22, 0x10	; 16
   173e0:	c4 01       	movw	r24, r8
   173e2:	0e 94 7e b8 	call	0x170fc	; 0x170fc <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   173e6:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   173ea:	f4 01       	movw	r30, r8
   173ec:	ec 5f       	subi	r30, 0xFC	; 252
   173ee:	fd 4f       	sbci	r31, 0xFD	; 253
   173f0:	60 83       	st	Z, r22
   173f2:	71 83       	std	Z+1, r23	; 0x01
   173f4:	82 83       	std	Z+2, r24	; 0x02
   173f6:	93 83       	std	Z+3, r25	; 0x03
   173f8:	84 01       	movw	r16, r8
   173fa:	08 5f       	subi	r16, 0xF8	; 248
   173fc:	1d 4f       	sbci	r17, 0xFD	; 253
   173fe:	f8 01       	movw	r30, r16
   17400:	60 83       	st	Z, r22
   17402:	71 83       	std	Z+1, r23	; 0x01
   17404:	82 83       	std	Z+2, r24	; 0x02
   17406:	93 83       	std	Z+3, r25	; 0x03
   17408:	d4 01       	movw	r26, r8
   1740a:	8d 91       	ld	r24, X+
   1740c:	9c 91       	ld	r25, X
   1740e:	dc 01       	movw	r26, r24
   17410:	ed 91       	ld	r30, X+
   17412:	fc 91       	ld	r31, X
   17414:	00 84       	ldd	r0, Z+8	; 0x08
   17416:	f1 85       	ldd	r31, Z+9	; 0x09
   17418:	e0 2d       	mov	r30, r0
   1741a:	19 95       	eicall
   1741c:	89 2b       	or	r24, r25
   1741e:	f1 f5       	brne	.+124    	; 0x1749c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x214>
   17420:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   17424:	f8 01       	movw	r30, r16
   17426:	40 80       	ld	r4, Z
   17428:	51 80       	ldd	r5, Z+1	; 0x01
   1742a:	62 80       	ldd	r6, Z+2	; 0x02
   1742c:	73 80       	ldd	r7, Z+3	; 0x03
   1742e:	64 19       	sub	r22, r4
   17430:	75 09       	sbc	r23, r5
   17432:	86 09       	sbc	r24, r6
   17434:	97 09       	sbc	r25, r7
   17436:	62 33       	cpi	r22, 0x32	; 50
   17438:	71 05       	cpc	r23, r1
   1743a:	81 05       	cpc	r24, r1
   1743c:	91 05       	cpc	r25, r1
   1743e:	20 f3       	brcs	.-56     	; 0x17408 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x180>
   17440:	f4 01       	movw	r30, r8
   17442:	e5 5e       	subi	r30, 0xE5	; 229
   17444:	fd 4f       	sbci	r31, 0xFD	; 253
   17446:	8c ef       	ldi	r24, 0xFC	; 252
   17448:	9f ef       	ldi	r25, 0xFF	; 255
   1744a:	91 83       	std	Z+1, r25	; 0x01
   1744c:	80 83       	st	Z, r24
   1744e:	d4 01       	movw	r26, r8
   17450:	8d 91       	ld	r24, X+
   17452:	9c 91       	ld	r25, X
   17454:	dc 01       	movw	r26, r24
   17456:	ed 91       	ld	r30, X+
   17458:	fc 91       	ld	r31, X
   1745a:	04 88       	ldd	r0, Z+20	; 0x14
   1745c:	f5 89       	ldd	r31, Z+21	; 0x15
   1745e:	e0 2d       	mov	r30, r0
   17460:	19 95       	eicall
   17462:	3d c0       	rjmp	.+122    	; 0x174de <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>
   17464:	06 84       	ldd	r0, Z+14	; 0x0e
   17466:	f7 85       	ldd	r31, Z+15	; 0x0f
   17468:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
   1746a:	20 ec       	ldi	r18, 0xC0	; 192
   1746c:	38 e0       	ldi	r19, 0x08	; 8
   1746e:	3a 83       	std	Y+2, r19	; 0x02
   17470:	29 83       	std	Y+1, r18	; 0x01
   17472:	d4 01       	movw	r26, r8
   17474:	a1 5f       	subi	r26, 0xF1	; 241
   17476:	bd 4f       	sbci	r27, 0xFD	; 253
   17478:	12 96       	adiw	r26, 0x02	; 2
   1747a:	2d 91       	ld	r18, X+
   1747c:	3d 91       	ld	r19, X+
   1747e:	4d 91       	ld	r20, X+
   17480:	5c 91       	ld	r21, X
   17482:	15 97       	sbiw	r26, 0x05	; 5
   17484:	2b 83       	std	Y+3, r18	; 0x03
   17486:	3c 83       	std	Y+4, r19	; 0x04
   17488:	4d 83       	std	Y+5, r20	; 0x05
   1748a:	5e 83       	std	Y+6, r21	; 0x06
_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_():
   1748c:	4d 85       	ldd	r20, Y+13	; 0x0d
   1748e:	5e 85       	ldd	r21, Y+14	; 0x0e
   17490:	be 01       	movw	r22, r28
   17492:	6f 5f       	subi	r22, 0xFF	; 255
   17494:	7f 4f       	sbci	r23, 0xFF	; 255
   17496:	35 cf       	rjmp	.-406    	; 0x17302 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x7a>
   17498:	80 6c       	ori	r24, 0xC0	; 192
   1749a:	67 cf       	rjmp	.-306    	; 0x1736a <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe2>
   1749c:	be 01       	movw	r22, r28
   1749e:	68 5f       	subi	r22, 0xF8	; 248
   174a0:	7f 4f       	sbci	r23, 0xFF	; 255
   174a2:	c4 01       	movw	r24, r8
   174a4:	0e 94 8d b7 	call	0x16f1a	; 0x16f1a <PubSubClient::readPacket(unsigned char*)>
   174a8:	04 97       	sbiw	r24, 0x04	; 4
   174aa:	b9 f5       	brne	.+110    	; 0x1751a <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x292>
   174ac:	f4 01       	movw	r30, r8
   174ae:	85 81       	ldd	r24, Z+5	; 0x05
   174b0:	94 01       	movw	r18, r8
   174b2:	25 5e       	subi	r18, 0xE5	; 229
   174b4:	3d 4f       	sbci	r19, 0xFD	; 253
   174b6:	79 01       	movw	r14, r18
   174b8:	81 11       	cpse	r24, r1
   174ba:	2b c0       	rjmp	.+86     	; 0x17512 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x28a>
   174bc:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   174c0:	d8 01       	movw	r26, r16
   174c2:	6d 93       	st	X+, r22
   174c4:	7d 93       	st	X+, r23
   174c6:	8d 93       	st	X+, r24
   174c8:	9c 93       	st	X, r25
   174ca:	13 97       	sbiw	r26, 0x03	; 3
   174cc:	f4 01       	movw	r30, r8
   174ce:	e4 5f       	subi	r30, 0xF4	; 244
   174d0:	fd 4f       	sbci	r31, 0xFD	; 253
   174d2:	10 82       	st	Z, r1
   174d4:	f7 01       	movw	r30, r14
   174d6:	11 82       	std	Z+1, r1	; 0x01
   174d8:	10 82       	st	Z, r1
   174da:	dd 24       	eor	r13, r13
   174dc:	d3 94       	inc	r13
   174de:	8d 2d       	mov	r24, r13
   174e0:	2e 96       	adiw	r28, 0x0e	; 14
   174e2:	0f b6       	in	r0, 0x3f	; 63
   174e4:	f8 94       	cli
   174e6:	de bf       	out	0x3e, r29	; 62
   174e8:	0f be       	out	0x3f, r0	; 63
   174ea:	cd bf       	out	0x3d, r28	; 61
   174ec:	df 91       	pop	r29
   174ee:	cf 91       	pop	r28
   174f0:	1f 91       	pop	r17
   174f2:	0f 91       	pop	r16
   174f4:	ff 90       	pop	r15
   174f6:	ef 90       	pop	r14
   174f8:	df 90       	pop	r13
   174fa:	cf 90       	pop	r12
   174fc:	bf 90       	pop	r11
   174fe:	af 90       	pop	r10
   17500:	9f 90       	pop	r9
   17502:	8f 90       	pop	r8
   17504:	7f 90       	pop	r7
   17506:	6f 90       	pop	r6
   17508:	5f 90       	pop	r5
   1750a:	4f 90       	pop	r4
   1750c:	3f 90       	pop	r3
   1750e:	2f 90       	pop	r2
   17510:	08 95       	ret
   17512:	90 e0       	ldi	r25, 0x00	; 0
   17514:	d9 01       	movw	r26, r18
   17516:	8d 93       	st	X+, r24
   17518:	9c 93       	st	X, r25
   1751a:	f4 01       	movw	r30, r8
   1751c:	80 81       	ld	r24, Z
   1751e:	91 81       	ldd	r25, Z+1	; 0x01
   17520:	99 cf       	rjmp	.-206    	; 0x17454 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x1cc>
   17522:	e5 5e       	subi	r30, 0xE5	; 229
   17524:	fd 4f       	sbci	r31, 0xFD	; 253
   17526:	8e ef       	ldi	r24, 0xFE	; 254
   17528:	9f ef       	ldi	r25, 0xFF	; 255
   1752a:	91 83       	std	Z+1, r25	; 0x01
   1752c:	80 83       	st	Z, r24
   1752e:	d7 cf       	rjmp	.-82     	; 0x174de <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>

00017530 <PubSubClient::connect(char const*)>:
_ZN12PubSubClient7connectEPKc():
   17530:	af 92       	push	r10
   17532:	bf 92       	push	r11
   17534:	cf 92       	push	r12
   17536:	ef 92       	push	r14
   17538:	0f 93       	push	r16
   1753a:	1f 93       	push	r17
   1753c:	b1 2c       	mov	r11, r1
   1753e:	a1 2c       	mov	r10, r1
   17540:	c1 2c       	mov	r12, r1
   17542:	e1 2c       	mov	r14, r1
   17544:	10 e0       	ldi	r17, 0x00	; 0
   17546:	00 e0       	ldi	r16, 0x00	; 0
   17548:	30 e0       	ldi	r19, 0x00	; 0
   1754a:	20 e0       	ldi	r18, 0x00	; 0
   1754c:	50 e0       	ldi	r21, 0x00	; 0
   1754e:	40 e0       	ldi	r20, 0x00	; 0
   17550:	0e 94 44 b9 	call	0x17288	; 0x17288 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)>
   17554:	1f 91       	pop	r17
   17556:	0f 91       	pop	r16
   17558:	ef 90       	pop	r14
   1755a:	cf 90       	pop	r12
   1755c:	bf 90       	pop	r11
   1755e:	af 90       	pop	r10
   17560:	08 95       	ret

00017562 <PubSubClient::loop()>:
_ZN12PubSubClient4loopEv():
   17562:	2f 92       	push	r2
   17564:	3f 92       	push	r3
   17566:	4f 92       	push	r4
   17568:	5f 92       	push	r5
   1756a:	6f 92       	push	r6
   1756c:	7f 92       	push	r7
   1756e:	8f 92       	push	r8
   17570:	9f 92       	push	r9
   17572:	af 92       	push	r10
   17574:	bf 92       	push	r11
   17576:	cf 92       	push	r12
   17578:	df 92       	push	r13
   1757a:	ef 92       	push	r14
   1757c:	ff 92       	push	r15
   1757e:	0f 93       	push	r16
   17580:	1f 93       	push	r17
   17582:	cf 93       	push	r28
   17584:	df 93       	push	r29
   17586:	00 d0       	rcall	.+0      	; 0x17588 <PubSubClient::loop()+0x26>
   17588:	1f 92       	push	r1
   1758a:	1f 92       	push	r1
   1758c:	cd b7       	in	r28, 0x3d	; 61
   1758e:	de b7       	in	r29, 0x3e	; 62
   17590:	8c 01       	movw	r16, r24
   17592:	2d b7       	in	r18, 0x3d	; 61
   17594:	3e b7       	in	r19, 0x3e	; 62
   17596:	3d 83       	std	Y+5, r19	; 0x05
   17598:	2c 83       	std	Y+4, r18	; 0x04
   1759a:	0e 94 0e b9 	call	0x1721c	; 0x1721c <PubSubClient::connected()>
   1759e:	58 2e       	mov	r5, r24
   175a0:	88 23       	and	r24, r24
   175a2:	09 f4       	brne	.+2      	; 0x175a6 <PubSubClient::loop()+0x44>
   175a4:	47 c0       	rjmp	.+142    	; 0x17634 <PubSubClient::loop()+0xd2>
   175a6:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   175aa:	4b 01       	movw	r8, r22
   175ac:	5c 01       	movw	r10, r24
   175ae:	78 01       	movw	r14, r16
   175b0:	38 ef       	ldi	r19, 0xF8	; 248
   175b2:	e3 1a       	sub	r14, r19
   175b4:	3d ef       	ldi	r19, 0xFD	; 253
   175b6:	f3 0a       	sbc	r15, r19
   175b8:	f7 01       	movw	r30, r14
   175ba:	80 81       	ld	r24, Z
   175bc:	91 81       	ldd	r25, Z+1	; 0x01
   175be:	a2 81       	ldd	r26, Z+2	; 0x02
   175c0:	b3 81       	ldd	r27, Z+3	; 0x03
   175c2:	a5 01       	movw	r20, r10
   175c4:	94 01       	movw	r18, r8
   175c6:	28 1b       	sub	r18, r24
   175c8:	39 0b       	sbc	r19, r25
   175ca:	4a 0b       	sbc	r20, r26
   175cc:	5b 0b       	sbc	r21, r27
   175ce:	da 01       	movw	r26, r20
   175d0:	c9 01       	movw	r24, r18
   175d2:	89 39       	cpi	r24, 0x99	; 153
   175d4:	9a 43       	sbci	r25, 0x3A	; 58
   175d6:	a1 05       	cpc	r26, r1
   175d8:	b1 05       	cpc	r27, r1
   175da:	98 f4       	brcc	.+38     	; 0x17602 <PubSubClient::loop()+0xa0>
   175dc:	34 97       	sbiw	r30, 0x04	; 4
   175de:	80 81       	ld	r24, Z
   175e0:	91 81       	ldd	r25, Z+1	; 0x01
   175e2:	a2 81       	ldd	r26, Z+2	; 0x02
   175e4:	b3 81       	ldd	r27, Z+3	; 0x03
   175e6:	a5 01       	movw	r20, r10
   175e8:	94 01       	movw	r18, r8
   175ea:	28 1b       	sub	r18, r24
   175ec:	39 0b       	sbc	r19, r25
   175ee:	4a 0b       	sbc	r20, r26
   175f0:	5b 0b       	sbc	r21, r27
   175f2:	da 01       	movw	r26, r20
   175f4:	c9 01       	movw	r24, r18
   175f6:	89 39       	cpi	r24, 0x99	; 153
   175f8:	9a 43       	sbci	r25, 0x3A	; 58
   175fa:	a1 05       	cpc	r26, r1
   175fc:	b1 05       	cpc	r27, r1
   175fe:	08 f4       	brcc	.+2      	; 0x17602 <PubSubClient::loop()+0xa0>
   17600:	58 c0       	rjmp	.+176    	; 0x176b2 <PubSubClient::loop()+0x150>
   17602:	d8 01       	movw	r26, r16
   17604:	8d 91       	ld	r24, X+
   17606:	9c 91       	ld	r25, X
   17608:	68 01       	movw	r12, r16
   1760a:	b4 ef       	ldi	r27, 0xF4	; 244
   1760c:	cb 1a       	sub	r12, r27
   1760e:	bd ef       	ldi	r27, 0xFD	; 253
   17610:	db 0a       	sbc	r13, r27
   17612:	f6 01       	movw	r30, r12
   17614:	20 81       	ld	r18, Z
   17616:	22 23       	and	r18, r18
   17618:	69 f1       	breq	.+90     	; 0x17674 <PubSubClient::loop()+0x112>
   1761a:	3f 96       	adiw	r30, 0x0f	; 15
   1761c:	2c ef       	ldi	r18, 0xFC	; 252
   1761e:	3f ef       	ldi	r19, 0xFF	; 255
   17620:	31 83       	std	Z+1, r19	; 0x01
   17622:	20 83       	st	Z, r18
   17624:	dc 01       	movw	r26, r24
   17626:	ed 91       	ld	r30, X+
   17628:	fc 91       	ld	r31, X
   1762a:	04 88       	ldd	r0, Z+20	; 0x14
   1762c:	f5 89       	ldd	r31, Z+21	; 0x15
   1762e:	e0 2d       	mov	r30, r0
   17630:	19 95       	eicall
   17632:	51 2c       	mov	r5, r1
   17634:	85 2d       	mov	r24, r5
   17636:	ec 81       	ldd	r30, Y+4	; 0x04
   17638:	fd 81       	ldd	r31, Y+5	; 0x05
   1763a:	0f b6       	in	r0, 0x3f	; 63
   1763c:	f8 94       	cli
   1763e:	fe bf       	out	0x3e, r31	; 62
   17640:	0f be       	out	0x3f, r0	; 63
   17642:	ed bf       	out	0x3d, r30	; 61
   17644:	0f 90       	pop	r0
   17646:	0f 90       	pop	r0
   17648:	0f 90       	pop	r0
   1764a:	0f 90       	pop	r0
   1764c:	0f 90       	pop	r0
   1764e:	df 91       	pop	r29
   17650:	cf 91       	pop	r28
   17652:	1f 91       	pop	r17
   17654:	0f 91       	pop	r16
   17656:	ff 90       	pop	r15
   17658:	ef 90       	pop	r14
   1765a:	df 90       	pop	r13
   1765c:	cf 90       	pop	r12
   1765e:	bf 90       	pop	r11
   17660:	af 90       	pop	r10
   17662:	9f 90       	pop	r9
   17664:	8f 90       	pop	r8
   17666:	7f 90       	pop	r7
   17668:	6f 90       	pop	r6
   1766a:	5f 90       	pop	r5
   1766c:	4f 90       	pop	r4
   1766e:	3f 90       	pop	r3
   17670:	2f 90       	pop	r2
   17672:	08 95       	ret
   17674:	20 ec       	ldi	r18, 0xC0	; 192
   17676:	f8 01       	movw	r30, r16
   17678:	22 83       	std	Z+2, r18	; 0x02
   1767a:	13 82       	std	Z+3, r1	; 0x03
   1767c:	dc 01       	movw	r26, r24
   1767e:	ed 91       	ld	r30, X+
   17680:	fc 91       	ld	r31, X
   17682:	02 80       	ldd	r0, Z+2	; 0x02
   17684:	f3 81       	ldd	r31, Z+3	; 0x03
   17686:	e0 2d       	mov	r30, r0
   17688:	42 e0       	ldi	r20, 0x02	; 2
   1768a:	50 e0       	ldi	r21, 0x00	; 0
   1768c:	b8 01       	movw	r22, r16
   1768e:	6e 5f       	subi	r22, 0xFE	; 254
   17690:	7f 4f       	sbci	r23, 0xFF	; 255
   17692:	19 95       	eicall
   17694:	f8 01       	movw	r30, r16
   17696:	ec 5f       	subi	r30, 0xFC	; 252
   17698:	fd 4f       	sbci	r31, 0xFD	; 253
   1769a:	80 82       	st	Z, r8
   1769c:	91 82       	std	Z+1, r9	; 0x01
   1769e:	a2 82       	std	Z+2, r10	; 0x02
   176a0:	b3 82       	std	Z+3, r11	; 0x03
   176a2:	f7 01       	movw	r30, r14
   176a4:	80 82       	st	Z, r8
   176a6:	91 82       	std	Z+1, r9	; 0x01
   176a8:	a2 82       	std	Z+2, r10	; 0x02
   176aa:	b3 82       	std	Z+3, r11	; 0x03
   176ac:	81 e0       	ldi	r24, 0x01	; 1
   176ae:	d6 01       	movw	r26, r12
   176b0:	8c 93       	st	X, r24
   176b2:	f8 01       	movw	r30, r16
   176b4:	80 81       	ld	r24, Z
   176b6:	91 81       	ldd	r25, Z+1	; 0x01
   176b8:	dc 01       	movw	r26, r24
   176ba:	ed 91       	ld	r30, X+
   176bc:	fc 91       	ld	r31, X
   176be:	00 84       	ldd	r0, Z+8	; 0x08
   176c0:	f1 85       	ldd	r31, Z+9	; 0x09
   176c2:	e0 2d       	mov	r30, r0
   176c4:	19 95       	eicall
   176c6:	89 2b       	or	r24, r25
   176c8:	09 f4       	brne	.+2      	; 0x176cc <PubSubClient::loop()+0x16a>
   176ca:	b4 cf       	rjmp	.-152    	; 0x17634 <PubSubClient::loop()+0xd2>
   176cc:	be 01       	movw	r22, r28
   176ce:	6f 5f       	subi	r22, 0xFF	; 255
   176d0:	7f 4f       	sbci	r23, 0xFF	; 255
   176d2:	c8 01       	movw	r24, r16
   176d4:	0e 94 8d b7 	call	0x16f1a	; 0x16f1a <PubSubClient::readPacket(unsigned char*)>
   176d8:	6c 01       	movw	r12, r24
   176da:	89 2b       	or	r24, r25
   176dc:	09 f4       	brne	.+2      	; 0x176e0 <PubSubClient::loop()+0x17e>
   176de:	aa cf       	rjmp	.-172    	; 0x17634 <PubSubClient::loop()+0xd2>
   176e0:	f7 01       	movw	r30, r14
   176e2:	80 82       	st	Z, r8
   176e4:	91 82       	std	Z+1, r9	; 0x01
   176e6:	a2 82       	std	Z+2, r10	; 0x02
   176e8:	b3 82       	std	Z+3, r11	; 0x03
   176ea:	d8 01       	movw	r26, r16
   176ec:	12 96       	adiw	r26, 0x02	; 2
   176ee:	4c 90       	ld	r4, X
   176f0:	12 97       	sbiw	r26, 0x02	; 2
   176f2:	84 2d       	mov	r24, r4
   176f4:	80 7f       	andi	r24, 0xF0	; 240
   176f6:	80 33       	cpi	r24, 0x30	; 48
   176f8:	09 f0       	breq	.+2      	; 0x176fc <PubSubClient::loop()+0x19a>
   176fa:	9d c0       	rjmp	.+314    	; 0x17836 <PubSubClient::loop()+0x2d4>
   176fc:	f8 01       	movw	r30, r16
   176fe:	e3 5f       	subi	r30, 0xF3	; 243
   17700:	fd 4f       	sbci	r31, 0xFD	; 253
   17702:	60 80       	ld	r6, Z
   17704:	71 80       	ldd	r7, Z+1	; 0x01
   17706:	61 14       	cp	r6, r1
   17708:	71 04       	cpc	r7, r1
   1770a:	09 f4       	brne	.+2      	; 0x1770e <PubSubClient::loop()+0x1ac>
   1770c:	93 cf       	rjmp	.-218    	; 0x17634 <PubSubClient::loop()+0xd2>
   1770e:	ed b7       	in	r30, 0x3d	; 61
   17710:	fe b7       	in	r31, 0x3e	; 62
   17712:	fb 83       	std	Y+3, r31	; 0x03
   17714:	ea 83       	std	Y+2, r30	; 0x02
   17716:	29 81       	ldd	r18, Y+1	; 0x01
   17718:	30 e0       	ldi	r19, 0x00	; 0
   1771a:	a2 0f       	add	r26, r18
   1771c:	b3 1f       	adc	r27, r19
   1771e:	13 96       	adiw	r26, 0x03	; 3
   17720:	ec 91       	ld	r30, X
   17722:	13 97       	sbiw	r26, 0x03	; 3
   17724:	f0 e0       	ldi	r31, 0x00	; 0
   17726:	fe 2f       	mov	r31, r30
   17728:	ee 27       	eor	r30, r30
   1772a:	14 96       	adiw	r26, 0x04	; 4
   1772c:	6c 91       	ld	r22, X
   1772e:	e6 0f       	add	r30, r22
   17730:	f1 1d       	adc	r31, r1
   17732:	cf 01       	movw	r24, r30
   17734:	01 96       	adiw	r24, 0x01	; 1
   17736:	4d b7       	in	r20, 0x3d	; 61
   17738:	5e b7       	in	r21, 0x3e	; 62
   1773a:	48 1b       	sub	r20, r24
   1773c:	59 0b       	sbc	r21, r25
   1773e:	0f b6       	in	r0, 0x3f	; 63
   17740:	f8 94       	cli
   17742:	5e bf       	out	0x3e, r21	; 62
   17744:	0f be       	out	0x3f, r0	; 63
   17746:	4d bf       	out	0x3d, r20	; 61
   17748:	8d b7       	in	r24, 0x3d	; 61
   1774a:	9e b7       	in	r25, 0x3e	; 62
   1774c:	01 96       	adiw	r24, 0x01	; 1
   1774e:	a9 01       	movw	r20, r18
   17750:	4b 5f       	subi	r20, 0xFB	; 251
   17752:	5f 4f       	sbci	r21, 0xFF	; 255
   17754:	40 0f       	add	r20, r16
   17756:	51 1f       	adc	r21, r17
   17758:	1c 01       	movw	r2, r24
   1775a:	bc 01       	movw	r22, r24
   1775c:	6e 0f       	add	r22, r30
   1775e:	7f 1f       	adc	r23, r31
   17760:	26 16       	cp	r2, r22
   17762:	37 06       	cpc	r3, r23
   17764:	39 f0       	breq	.+14     	; 0x17774 <PubSubClient::loop()+0x212>
   17766:	da 01       	movw	r26, r20
   17768:	fd 90       	ld	r15, X+
   1776a:	ad 01       	movw	r20, r26
   1776c:	d1 01       	movw	r26, r2
   1776e:	fd 92       	st	X+, r15
   17770:	1d 01       	movw	r2, r26
   17772:	f6 cf       	rjmp	.-20     	; 0x17760 <PubSubClient::loop()+0x1fe>
   17774:	d1 01       	movw	r26, r2
   17776:	1c 92       	st	X, r1
   17778:	78 01       	movw	r14, r16
   1777a:	b2 e0       	ldi	r27, 0x02	; 2
   1777c:	eb 0e       	add	r14, r27
   1777e:	f1 1c       	adc	r15, r1
   17780:	a6 01       	movw	r20, r12
   17782:	42 1b       	sub	r20, r18
   17784:	53 0b       	sbc	r21, r19
   17786:	64 2d       	mov	r22, r4
   17788:	66 70       	andi	r22, 0x06	; 6
   1778a:	46 2e       	mov	r4, r22
   1778c:	a2 e0       	ldi	r26, 0x02	; 2
   1778e:	6a 13       	cpse	r22, r26
   17790:	44 c0       	rjmp	.+136    	; 0x1781a <PubSubClient::loop()+0x2b8>
   17792:	b9 01       	movw	r22, r18
   17794:	6e 0f       	add	r22, r30
   17796:	7f 1f       	adc	r23, r31
   17798:	d8 01       	movw	r26, r16
   1779a:	a6 0f       	add	r26, r22
   1779c:	b7 1f       	adc	r27, r23
   1779e:	15 96       	adiw	r26, 0x05	; 5
   177a0:	2c 91       	ld	r18, X
   177a2:	15 97       	sbiw	r26, 0x05	; 5
   177a4:	30 e0       	ldi	r19, 0x00	; 0
   177a6:	32 2f       	mov	r19, r18
   177a8:	22 27       	eor	r18, r18
   177aa:	16 96       	adiw	r26, 0x06	; 6
   177ac:	2c 90       	ld	r2, X
   177ae:	22 0e       	add	r2, r18
   177b0:	33 2e       	mov	r3, r19
   177b2:	31 1c       	adc	r3, r1
   177b4:	4e 1b       	sub	r20, r30
   177b6:	5f 0b       	sbc	r21, r31
   177b8:	45 50       	subi	r20, 0x05	; 5
   177ba:	51 09       	sbc	r21, r1
   177bc:	6b 5f       	subi	r22, 0xFB	; 251
   177be:	7f 4f       	sbci	r23, 0xFF	; 255
   177c0:	6e 0d       	add	r22, r14
   177c2:	7f 1d       	adc	r23, r15
   177c4:	f3 01       	movw	r30, r6
   177c6:	19 95       	eicall
   177c8:	80 e4       	ldi	r24, 0x40	; 64
   177ca:	d8 01       	movw	r26, r16
   177cc:	12 96       	adiw	r26, 0x02	; 2
   177ce:	8c 93       	st	X, r24
   177d0:	12 97       	sbiw	r26, 0x02	; 2
   177d2:	13 96       	adiw	r26, 0x03	; 3
   177d4:	4c 92       	st	X, r4
   177d6:	13 97       	sbiw	r26, 0x03	; 3
   177d8:	14 96       	adiw	r26, 0x04	; 4
   177da:	3c 92       	st	X, r3
   177dc:	14 97       	sbiw	r26, 0x04	; 4
   177de:	15 96       	adiw	r26, 0x05	; 5
   177e0:	2c 92       	st	X, r2
   177e2:	15 97       	sbiw	r26, 0x05	; 5
   177e4:	8d 91       	ld	r24, X+
   177e6:	9c 91       	ld	r25, X
   177e8:	dc 01       	movw	r26, r24
   177ea:	ed 91       	ld	r30, X+
   177ec:	fc 91       	ld	r31, X
   177ee:	02 80       	ldd	r0, Z+2	; 0x02
   177f0:	f3 81       	ldd	r31, Z+3	; 0x03
   177f2:	e0 2d       	mov	r30, r0
   177f4:	44 e0       	ldi	r20, 0x04	; 4
   177f6:	50 e0       	ldi	r21, 0x00	; 0
   177f8:	b7 01       	movw	r22, r14
   177fa:	19 95       	eicall
   177fc:	f8 01       	movw	r30, r16
   177fe:	ec 5f       	subi	r30, 0xFC	; 252
   17800:	fd 4f       	sbci	r31, 0xFD	; 253
   17802:	80 82       	st	Z, r8
   17804:	91 82       	std	Z+1, r9	; 0x01
   17806:	a2 82       	std	Z+2, r10	; 0x02
   17808:	b3 82       	std	Z+3, r11	; 0x03
   1780a:	2a 81       	ldd	r18, Y+2	; 0x02
   1780c:	3b 81       	ldd	r19, Y+3	; 0x03
   1780e:	0f b6       	in	r0, 0x3f	; 63
   17810:	f8 94       	cli
   17812:	3e bf       	out	0x3e, r19	; 62
   17814:	0f be       	out	0x3f, r0	; 63
   17816:	2d bf       	out	0x3d, r18	; 61
   17818:	0d cf       	rjmp	.-486    	; 0x17634 <PubSubClient::loop()+0xd2>
   1781a:	4e 1b       	sub	r20, r30
   1781c:	5f 0b       	sbc	r21, r31
   1781e:	43 50       	subi	r20, 0x03	; 3
   17820:	51 09       	sbc	r21, r1
   17822:	2d 5f       	subi	r18, 0xFD	; 253
   17824:	3f 4f       	sbci	r19, 0xFF	; 255
   17826:	e2 0f       	add	r30, r18
   17828:	f3 1f       	adc	r31, r19
   1782a:	b7 01       	movw	r22, r14
   1782c:	6e 0f       	add	r22, r30
   1782e:	7f 1f       	adc	r23, r31
   17830:	f3 01       	movw	r30, r6
   17832:	19 95       	eicall
   17834:	ea cf       	rjmp	.-44     	; 0x1780a <PubSubClient::loop()+0x2a8>
   17836:	80 3c       	cpi	r24, 0xC0	; 192
   17838:	a1 f4       	brne	.+40     	; 0x17862 <PubSubClient::loop()+0x300>
   1783a:	80 ed       	ldi	r24, 0xD0	; 208
   1783c:	12 96       	adiw	r26, 0x02	; 2
   1783e:	8c 93       	st	X, r24
   17840:	12 97       	sbiw	r26, 0x02	; 2
   17842:	13 96       	adiw	r26, 0x03	; 3
   17844:	1c 92       	st	X, r1
   17846:	f8 01       	movw	r30, r16
   17848:	81 91       	ld	r24, Z+
   1784a:	91 91       	ld	r25, Z+
   1784c:	bf 01       	movw	r22, r30
   1784e:	dc 01       	movw	r26, r24
   17850:	ed 91       	ld	r30, X+
   17852:	fc 91       	ld	r31, X
   17854:	02 80       	ldd	r0, Z+2	; 0x02
   17856:	f3 81       	ldd	r31, Z+3	; 0x03
   17858:	e0 2d       	mov	r30, r0
   1785a:	42 e0       	ldi	r20, 0x02	; 2
   1785c:	50 e0       	ldi	r21, 0x00	; 0
   1785e:	19 95       	eicall
   17860:	e9 ce       	rjmp	.-558    	; 0x17634 <PubSubClient::loop()+0xd2>
   17862:	80 3d       	cpi	r24, 0xD0	; 208
   17864:	09 f0       	breq	.+2      	; 0x17868 <PubSubClient::loop()+0x306>
   17866:	e6 ce       	rjmp	.-564    	; 0x17634 <PubSubClient::loop()+0xd2>
   17868:	f8 01       	movw	r30, r16
   1786a:	e4 5f       	subi	r30, 0xF4	; 244
   1786c:	fd 4f       	sbci	r31, 0xFD	; 253
   1786e:	10 82       	st	Z, r1
   17870:	e1 ce       	rjmp	.-574    	; 0x17634 <PubSubClient::loop()+0xd2>

00017872 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)>:
_ZN12PubSubClient7publishEPKcPKhjb():
   17872:	9f 92       	push	r9
   17874:	af 92       	push	r10
   17876:	bf 92       	push	r11
   17878:	cf 92       	push	r12
   1787a:	df 92       	push	r13
   1787c:	ef 92       	push	r14
   1787e:	ff 92       	push	r15
   17880:	0f 93       	push	r16
   17882:	1f 93       	push	r17
   17884:	cf 93       	push	r28
   17886:	df 93       	push	r29
   17888:	ec 01       	movw	r28, r24
   1788a:	6b 01       	movw	r12, r22
   1788c:	94 2e       	mov	r9, r20
   1788e:	15 2f       	mov	r17, r21
   17890:	79 01       	movw	r14, r18
   17892:	0e 94 0e b9 	call	0x1721c	; 0x1721c <PubSubClient::connected()>
   17896:	88 23       	and	r24, r24
   17898:	09 f4       	brne	.+2      	; 0x1789c <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x2a>
   1789a:	41 c0       	rjmp	.+130    	; 0x1791e <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0xac>
   1789c:	f6 01       	movw	r30, r12
   1789e:	01 90       	ld	r0, Z+
   178a0:	00 20       	and	r0, r0
   178a2:	e9 f7       	brne	.-6      	; 0x1789e <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x2c>
   178a4:	31 97       	sbiw	r30, 0x01	; 1
   178a6:	ec 19       	sub	r30, r12
   178a8:	fd 09       	sbc	r31, r13
   178aa:	c7 01       	movw	r24, r14
   178ac:	07 96       	adiw	r24, 0x07	; 7
   178ae:	e8 0f       	add	r30, r24
   178b0:	f9 1f       	adc	r31, r25
   178b2:	e1 30       	cpi	r30, 0x01	; 1
   178b4:	f2 40       	sbci	r31, 0x02	; 2
   178b6:	98 f5       	brcc	.+102    	; 0x1791e <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0xac>
   178b8:	5e 01       	movw	r10, r28
   178ba:	82 e0       	ldi	r24, 0x02	; 2
   178bc:	a8 0e       	add	r10, r24
   178be:	b1 1c       	adc	r11, r1
   178c0:	25 e0       	ldi	r18, 0x05	; 5
   178c2:	30 e0       	ldi	r19, 0x00	; 0
   178c4:	a5 01       	movw	r20, r10
   178c6:	b6 01       	movw	r22, r12
   178c8:	ce 01       	movw	r24, r28
   178ca:	0e 94 ec b8 	call	0x171d8	; 0x171d8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   178ce:	e9 2d       	mov	r30, r9
   178d0:	f1 2f       	mov	r31, r17
   178d2:	dc 01       	movw	r26, r24
   178d4:	12 96       	adiw	r26, 0x02	; 2
   178d6:	ac 0f       	add	r26, r28
   178d8:	bd 1f       	adc	r27, r29
   178da:	af 01       	movw	r20, r30
   178dc:	4e 0d       	add	r20, r14
   178de:	5f 1d       	adc	r21, r15
   178e0:	e4 17       	cp	r30, r20
   178e2:	f5 07       	cpc	r31, r21
   178e4:	19 f0       	breq	.+6      	; 0x178ec <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x7a>
   178e6:	21 91       	ld	r18, Z+
   178e8:	2d 93       	st	X+, r18
   178ea:	fa cf       	rjmp	.-12     	; 0x178e0 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x6e>
   178ec:	25 e0       	ldi	r18, 0x05	; 5
   178ee:	e2 1a       	sub	r14, r18
   178f0:	f1 08       	sbc	r15, r1
   178f2:	61 e3       	ldi	r22, 0x31	; 49
   178f4:	01 11       	cpse	r16, r1
   178f6:	01 c0       	rjmp	.+2      	; 0x178fa <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x88>
   178f8:	60 e3       	ldi	r22, 0x30	; 48
   178fa:	9c 01       	movw	r18, r24
   178fc:	2e 0d       	add	r18, r14
   178fe:	3f 1d       	adc	r19, r15
   17900:	a5 01       	movw	r20, r10
   17902:	ce 01       	movw	r24, r28
   17904:	df 91       	pop	r29
   17906:	cf 91       	pop	r28
   17908:	1f 91       	pop	r17
   1790a:	0f 91       	pop	r16
   1790c:	ff 90       	pop	r15
   1790e:	ef 90       	pop	r14
   17910:	df 90       	pop	r13
   17912:	cf 90       	pop	r12
   17914:	bf 90       	pop	r11
   17916:	af 90       	pop	r10
   17918:	9f 90       	pop	r9
   1791a:	0c 94 7e b8 	jmp	0x170fc	; 0x170fc <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   1791e:	80 e0       	ldi	r24, 0x00	; 0
   17920:	df 91       	pop	r29
   17922:	cf 91       	pop	r28
   17924:	1f 91       	pop	r17
   17926:	0f 91       	pop	r16
   17928:	ff 90       	pop	r15
   1792a:	ef 90       	pop	r14
   1792c:	df 90       	pop	r13
   1792e:	cf 90       	pop	r12
   17930:	bf 90       	pop	r11
   17932:	af 90       	pop	r10
   17934:	9f 90       	pop	r9
   17936:	08 95       	ret

00017938 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
   17938:	0f 93       	push	r16
   1793a:	fa 01       	movw	r30, r20
   1793c:	01 90       	ld	r0, Z+
   1793e:	00 20       	and	r0, r0
   17940:	e9 f7       	brne	.-6      	; 0x1793c <PubSubClient::publish(char const*, char const*)+0x4>
   17942:	31 97       	sbiw	r30, 0x01	; 1
   17944:	9f 01       	movw	r18, r30
   17946:	24 1b       	sub	r18, r20
   17948:	35 0b       	sbc	r19, r21
   1794a:	00 e0       	ldi	r16, 0x00	; 0
   1794c:	0e 94 39 bc 	call	0x17872	; 0x17872 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)>
   17950:	0f 91       	pop	r16
   17952:	08 95       	ret

00017954 <PubSubClient::subscribe(char const*, unsigned char)>:
_ZN12PubSubClient9subscribeEPKch():
   17954:	df 92       	push	r13
   17956:	ef 92       	push	r14
   17958:	ff 92       	push	r15
   1795a:	0f 93       	push	r16
   1795c:	1f 93       	push	r17
   1795e:	cf 93       	push	r28
   17960:	df 93       	push	r29
   17962:	42 30       	cpi	r20, 0x02	; 2
   17964:	08 f0       	brcs	.+2      	; 0x17968 <PubSubClient::subscribe(char const*, unsigned char)+0x14>
   17966:	41 c0       	rjmp	.+130    	; 0x179ea <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   17968:	fb 01       	movw	r30, r22
   1796a:	01 90       	ld	r0, Z+
   1796c:	00 20       	and	r0, r0
   1796e:	e9 f7       	brne	.-6      	; 0x1796a <PubSubClient::subscribe(char const*, unsigned char)+0x16>
   17970:	9f 01       	movw	r18, r30
   17972:	26 1b       	sub	r18, r22
   17974:	37 0b       	sbc	r19, r23
   17976:	28 5f       	subi	r18, 0xF8	; 248
   17978:	3f 4f       	sbci	r19, 0xFF	; 255
   1797a:	21 30       	cpi	r18, 0x01	; 1
   1797c:	32 40       	sbci	r19, 0x02	; 2
   1797e:	a8 f5       	brcc	.+106    	; 0x179ea <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   17980:	d4 2e       	mov	r13, r20
   17982:	8b 01       	movw	r16, r22
   17984:	ec 01       	movw	r28, r24
   17986:	0e 94 0e b9 	call	0x1721c	; 0x1721c <PubSubClient::connected()>
   1798a:	88 23       	and	r24, r24
   1798c:	71 f1       	breq	.+92     	; 0x179ea <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   1798e:	fe 01       	movw	r30, r28
   17990:	ee 5f       	subi	r30, 0xFE	; 254
   17992:	fd 4f       	sbci	r31, 0xFD	; 253
   17994:	80 81       	ld	r24, Z
   17996:	91 81       	ldd	r25, Z+1	; 0x01
   17998:	01 96       	adiw	r24, 0x01	; 1
   1799a:	21 f1       	breq	.+72     	; 0x179e4 <PubSubClient::subscribe(char const*, unsigned char)+0x90>
   1799c:	91 83       	std	Z+1, r25	; 0x01
   1799e:	80 83       	st	Z, r24
   179a0:	80 81       	ld	r24, Z
   179a2:	91 81       	ldd	r25, Z+1	; 0x01
   179a4:	9f 83       	std	Y+7, r25	; 0x07
   179a6:	88 87       	std	Y+8, r24	; 0x08
   179a8:	7e 01       	movw	r14, r28
   179aa:	52 e0       	ldi	r21, 0x02	; 2
   179ac:	e5 0e       	add	r14, r21
   179ae:	f1 1c       	adc	r15, r1
   179b0:	27 e0       	ldi	r18, 0x07	; 7
   179b2:	30 e0       	ldi	r19, 0x00	; 0
   179b4:	a7 01       	movw	r20, r14
   179b6:	b8 01       	movw	r22, r16
   179b8:	ce 01       	movw	r24, r28
   179ba:	0e 94 ec b8 	call	0x171d8	; 0x171d8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   179be:	fe 01       	movw	r30, r28
   179c0:	e8 0f       	add	r30, r24
   179c2:	f9 1f       	adc	r31, r25
   179c4:	d2 82       	std	Z+2, r13	; 0x02
   179c6:	9c 01       	movw	r18, r24
   179c8:	24 50       	subi	r18, 0x04	; 4
   179ca:	31 09       	sbc	r19, r1
   179cc:	a7 01       	movw	r20, r14
   179ce:	62 e8       	ldi	r22, 0x82	; 130
   179d0:	ce 01       	movw	r24, r28
   179d2:	df 91       	pop	r29
   179d4:	cf 91       	pop	r28
   179d6:	1f 91       	pop	r17
   179d8:	0f 91       	pop	r16
   179da:	ff 90       	pop	r15
   179dc:	ef 90       	pop	r14
   179de:	df 90       	pop	r13
   179e0:	0c 94 7e b8 	jmp	0x170fc	; 0x170fc <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   179e4:	81 e0       	ldi	r24, 0x01	; 1
   179e6:	90 e0       	ldi	r25, 0x00	; 0
   179e8:	d9 cf       	rjmp	.-78     	; 0x1799c <PubSubClient::subscribe(char const*, unsigned char)+0x48>
   179ea:	80 e0       	ldi	r24, 0x00	; 0
   179ec:	df 91       	pop	r29
   179ee:	cf 91       	pop	r28
   179f0:	1f 91       	pop	r17
   179f2:	0f 91       	pop	r16
   179f4:	ff 90       	pop	r15
   179f6:	ef 90       	pop	r14
   179f8:	df 90       	pop	r13
   179fa:	08 95       	ret

000179fc <PubSubClient::subscribe(char const*)>:
_ZN12PubSubClient9subscribeEPKc():
   179fc:	40 e0       	ldi	r20, 0x00	; 0
   179fe:	0c 94 aa bc 	jmp	0x17954	; 0x17954 <PubSubClient::subscribe(char const*, unsigned char)>

00017a02 <PubSubClient::unsubscribe(char const*)>:
_ZN12PubSubClient11unsubscribeEPKc():
   17a02:	ef 92       	push	r14
   17a04:	ff 92       	push	r15
   17a06:	0f 93       	push	r16
   17a08:	1f 93       	push	r17
   17a0a:	cf 93       	push	r28
   17a0c:	df 93       	push	r29
   17a0e:	fb 01       	movw	r30, r22
   17a10:	01 90       	ld	r0, Z+
   17a12:	00 20       	and	r0, r0
   17a14:	e9 f7       	brne	.-6      	; 0x17a10 <PubSubClient::unsubscribe(char const*)+0xe>
   17a16:	9f 01       	movw	r18, r30
   17a18:	26 1b       	sub	r18, r22
   17a1a:	37 0b       	sbc	r19, r23
   17a1c:	28 5f       	subi	r18, 0xF8	; 248
   17a1e:	3f 4f       	sbci	r19, 0xFF	; 255
   17a20:	21 30       	cpi	r18, 0x01	; 1
   17a22:	32 40       	sbci	r19, 0x02	; 2
   17a24:	78 f5       	brcc	.+94     	; 0x17a84 <PubSubClient::unsubscribe(char const*)+0x82>
   17a26:	8b 01       	movw	r16, r22
   17a28:	ec 01       	movw	r28, r24
   17a2a:	0e 94 0e b9 	call	0x1721c	; 0x1721c <PubSubClient::connected()>
   17a2e:	88 23       	and	r24, r24
   17a30:	49 f1       	breq	.+82     	; 0x17a84 <PubSubClient::unsubscribe(char const*)+0x82>
   17a32:	fe 01       	movw	r30, r28
   17a34:	ee 5f       	subi	r30, 0xFE	; 254
   17a36:	fd 4f       	sbci	r31, 0xFD	; 253
   17a38:	80 81       	ld	r24, Z
   17a3a:	91 81       	ldd	r25, Z+1	; 0x01
   17a3c:	01 96       	adiw	r24, 0x01	; 1
   17a3e:	f9 f0       	breq	.+62     	; 0x17a7e <PubSubClient::unsubscribe(char const*)+0x7c>
   17a40:	91 83       	std	Z+1, r25	; 0x01
   17a42:	80 83       	st	Z, r24
   17a44:	80 81       	ld	r24, Z
   17a46:	91 81       	ldd	r25, Z+1	; 0x01
   17a48:	9f 83       	std	Y+7, r25	; 0x07
   17a4a:	88 87       	std	Y+8, r24	; 0x08
   17a4c:	7e 01       	movw	r14, r28
   17a4e:	42 e0       	ldi	r20, 0x02	; 2
   17a50:	e4 0e       	add	r14, r20
   17a52:	f1 1c       	adc	r15, r1
   17a54:	27 e0       	ldi	r18, 0x07	; 7
   17a56:	30 e0       	ldi	r19, 0x00	; 0
   17a58:	a7 01       	movw	r20, r14
   17a5a:	b8 01       	movw	r22, r16
   17a5c:	ce 01       	movw	r24, r28
   17a5e:	0e 94 ec b8 	call	0x171d8	; 0x171d8 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   17a62:	9c 01       	movw	r18, r24
   17a64:	25 50       	subi	r18, 0x05	; 5
   17a66:	31 09       	sbc	r19, r1
   17a68:	a7 01       	movw	r20, r14
   17a6a:	62 ea       	ldi	r22, 0xA2	; 162
   17a6c:	ce 01       	movw	r24, r28
   17a6e:	df 91       	pop	r29
   17a70:	cf 91       	pop	r28
   17a72:	1f 91       	pop	r17
   17a74:	0f 91       	pop	r16
   17a76:	ff 90       	pop	r15
   17a78:	ef 90       	pop	r14
   17a7a:	0c 94 7e b8 	jmp	0x170fc	; 0x170fc <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   17a7e:	81 e0       	ldi	r24, 0x01	; 1
   17a80:	90 e0       	ldi	r25, 0x00	; 0
   17a82:	de cf       	rjmp	.-68     	; 0x17a40 <PubSubClient::unsubscribe(char const*)+0x3e>
   17a84:	80 e0       	ldi	r24, 0x00	; 0
   17a86:	df 91       	pop	r29
   17a88:	cf 91       	pop	r28
   17a8a:	1f 91       	pop	r17
   17a8c:	0f 91       	pop	r16
   17a8e:	ff 90       	pop	r15
   17a90:	ef 90       	pop	r14
   17a92:	08 95       	ret

00017a94 <PubSubClient::setServer(unsigned char*, unsigned int)>:
_ZN12PubSubClient9setServerEPhj():
   17a94:	cf 92       	push	r12
   17a96:	df 92       	push	r13
   17a98:	ef 92       	push	r14
   17a9a:	ff 92       	push	r15
   17a9c:	0f 93       	push	r16
   17a9e:	cf 93       	push	r28
   17aa0:	df 93       	push	r29
   17aa2:	cd b7       	in	r28, 0x3d	; 61
   17aa4:	de b7       	in	r29, 0x3e	; 62
   17aa6:	2c 97       	sbiw	r28, 0x0c	; 12
   17aa8:	0f b6       	in	r0, 0x3f	; 63
   17aaa:	f8 94       	cli
   17aac:	de bf       	out	0x3e, r29	; 62
   17aae:	0f be       	out	0x3f, r0	; 63
   17ab0:	cd bf       	out	0x3d, r28	; 61
   17ab2:	7c 01       	movw	r14, r24
   17ab4:	fb 01       	movw	r30, r22
   17ab6:	6a 01       	movw	r12, r20
   17ab8:	03 81       	ldd	r16, Z+3	; 0x03
   17aba:	22 81       	ldd	r18, Z+2	; 0x02
   17abc:	41 81       	ldd	r20, Z+1	; 0x01
   17abe:	60 81       	ld	r22, Z
   17ac0:	ce 01       	movw	r24, r28
   17ac2:	07 96       	adiw	r24, 0x07	; 7
   17ac4:	0e 94 97 cf 	call	0x19f2e	; 0x19f2e <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN9IPAddressC4ERKS_():
   17ac8:	89 85       	ldd	r24, Y+9	; 0x09
   17aca:	9a 85       	ldd	r25, Y+10	; 0x0a
   17acc:	ab 85       	ldd	r26, Y+11	; 0x0b
   17ace:	bc 85       	ldd	r27, Y+12	; 0x0c
_ZN9IPAddressaSERKS_():
   17ad0:	f7 01       	movw	r30, r14
   17ad2:	e1 5f       	subi	r30, 0xF1	; 241
   17ad4:	fd 4f       	sbci	r31, 0xFD	; 253
   17ad6:	82 83       	std	Z+2, r24	; 0x02
   17ad8:	93 83       	std	Z+3, r25	; 0x03
   17ada:	a4 83       	std	Z+4, r26	; 0x04
   17adc:	b5 83       	std	Z+5, r27	; 0x05
_ZN12PubSubClient9setServerE9IPAddressj():
   17ade:	38 96       	adiw	r30, 0x08	; 8
   17ae0:	d1 82       	std	Z+1, r13	; 0x01
   17ae2:	c0 82       	st	Z, r12
   17ae4:	32 97       	sbiw	r30, 0x02	; 2
   17ae6:	11 82       	std	Z+1, r1	; 0x01
   17ae8:	10 82       	st	Z, r1
_ZN12PubSubClient9setServerEPhj():
   17aea:	c7 01       	movw	r24, r14
   17aec:	2c 96       	adiw	r28, 0x0c	; 12
   17aee:	0f b6       	in	r0, 0x3f	; 63
   17af0:	f8 94       	cli
   17af2:	de bf       	out	0x3e, r29	; 62
   17af4:	0f be       	out	0x3f, r0	; 63
   17af6:	cd bf       	out	0x3d, r28	; 61
   17af8:	df 91       	pop	r29
   17afa:	cf 91       	pop	r28
   17afc:	0f 91       	pop	r16
   17afe:	ff 90       	pop	r15
   17b00:	ef 90       	pop	r14
   17b02:	df 90       	pop	r13
   17b04:	cf 90       	pop	r12
   17b06:	08 95       	ret

00017b08 <PubSubClient::setCallback(void (*)(char*, unsigned char*, unsigned int))>:
_ZN12PubSubClient11setCallbackEPFvPcPhjE():
   17b08:	fc 01       	movw	r30, r24
   17b0a:	e3 5f       	subi	r30, 0xF3	; 243
   17b0c:	fd 4f       	sbci	r31, 0xFD	; 253
   17b0e:	71 83       	std	Z+1, r23	; 0x01
   17b10:	60 83       	st	Z, r22
   17b12:	08 95       	ret

00017b14 <PubSubClient::state()>:
_ZN12PubSubClient5stateEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:589

int PubSubClient::state() {
    return this->_state;
   17b14:	85 5e       	subi	r24, 0xE5	; 229
   17b16:	9d 4f       	sbci	r25, 0xFD	; 253
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:590
}
   17b18:	fc 01       	movw	r30, r24
   17b1a:	80 81       	ld	r24, Z
   17b1c:	91 81       	ldd	r25, Z+1	; 0x01
   17b1e:	08 95       	ret

00017b20 <_GLOBAL__sub_I__ZN12PubSubClientC2Ev>:
_GLOBAL__sub_I__ZN12PubSubClientC2Ev():
   17b20:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   17b22:	00 e0       	ldi	r16, 0x00	; 0
   17b24:	20 e0       	ldi	r18, 0x00	; 0
   17b26:	40 e0       	ldi	r20, 0x00	; 0
   17b28:	60 e0       	ldi	r22, 0x00	; 0
   17b2a:	8f e0       	ldi	r24, 0x0F	; 15
   17b2c:	91 e1       	ldi	r25, 0x11	; 17
   17b2e:	0e 94 97 cf 	call	0x19f2e	; 0x19f2e <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN12PubSubClientC2Ev():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:590
   17b32:	0f 91       	pop	r16
   17b34:	08 95       	ret

00017b36 <RF24::csn(bool)>:
_ZN4RF243csnEb():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1552
    config |= _BV(EN_CRC);
  }
  else
  {
    config |= _BV(EN_CRC);
    config |= _BV( CRCO );
   17b36:	cf 93       	push	r28
   17b38:	df 93       	push	r29
   17b3a:	ec 01       	movw	r28, r24
_ZN8SPIClass11setBitOrderEh():
   17b3c:	8c b5       	in	r24, 0x2c	; 44
   17b3e:	8f 7d       	andi	r24, 0xDF	; 223
   17b40:	8c bd       	out	0x2c, r24	; 44
_ZN8SPIClass11setDataModeEh():
   17b42:	8c b5       	in	r24, 0x2c	; 44
   17b44:	83 7f       	andi	r24, 0xF3	; 243
   17b46:	8c bd       	out	0x2c, r24	; 44
_ZN8SPIClass15setClockDividerEh():
   17b48:	8c b5       	in	r24, 0x2c	; 44
   17b4a:	8c 7f       	andi	r24, 0xFC	; 252
   17b4c:	8c bd       	out	0x2c, r24	; 44
   17b4e:	8d b5       	in	r24, 0x2d	; 45
   17b50:	81 60       	ori	r24, 0x01	; 1
   17b52:	8d bd       	out	0x2d, r24	; 45
_ZN4RF243csnEb():
   17b54:	8a 81       	ldd	r24, Y+2	; 0x02
   17b56:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
   17b5a:	8c 89       	ldd	r24, Y+20	; 0x14
   17b5c:	9d 89       	ldd	r25, Y+21	; 0x15
   17b5e:	df 91       	pop	r29
   17b60:	cf 91       	pop	r28
   17b62:	0c 94 89 cc 	jmp	0x19912	; 0x19912 <delayMicroseconds>

00017b66 <RF24::ce(bool)>:
_ZN4RF242ceEb():
   17b66:	fc 01       	movw	r30, r24
   17b68:	20 81       	ld	r18, Z
   17b6a:	31 81       	ldd	r19, Z+1	; 0x01
   17b6c:	82 81       	ldd	r24, Z+2	; 0x02
   17b6e:	93 81       	ldd	r25, Z+3	; 0x03
   17b70:	28 17       	cp	r18, r24
   17b72:	39 07       	cpc	r19, r25
   17b74:	19 f0       	breq	.+6      	; 0x17b7c <RF24::ce(bool)+0x16>
   17b76:	82 2f       	mov	r24, r18
   17b78:	0c 94 7d cd 	jmp	0x19afa	; 0x19afa <digitalWrite>
   17b7c:	08 95       	ret

00017b7e <RF24::beginTransaction()>:
_ZN4RF2416beginTransactionEv():
   17b7e:	60 e0       	ldi	r22, 0x00	; 0
   17b80:	0c 94 9b bd 	jmp	0x17b36	; 0x17b36 <RF24::csn(bool)>

00017b84 <RF24::endTransaction()>:
_ZN4RF2414endTransactionEv():
   17b84:	61 e0       	ldi	r22, 0x01	; 1
   17b86:	0c 94 9b bd 	jmp	0x17b36	; 0x17b36 <RF24::csn(bool)>

00017b8a <RF24::read_register(unsigned char, unsigned char*, unsigned char)>:
_ZN4RF2413read_registerEhPhh():
   17b8a:	cf 92       	push	r12
   17b8c:	df 92       	push	r13
   17b8e:	ef 92       	push	r14
   17b90:	ff 92       	push	r15
   17b92:	0f 93       	push	r16
   17b94:	1f 93       	push	r17
   17b96:	cf 93       	push	r28
   17b98:	df 93       	push	r29
   17b9a:	7c 01       	movw	r14, r24
   17b9c:	c6 2f       	mov	r28, r22
   17b9e:	6a 01       	movw	r12, r20
   17ba0:	12 2f       	mov	r17, r18
   17ba2:	0e 94 bf bd 	call	0x17b7e	; 0x17b7e <RF24::beginTransaction()>
   17ba6:	8c 2f       	mov	r24, r28
   17ba8:	8f 71       	andi	r24, 0x1F	; 31
   17baa:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   17bae:	08 2f       	mov	r16, r24
   17bb0:	e6 01       	movw	r28, r12
   17bb2:	11 50       	subi	r17, 0x01	; 1
   17bb4:	28 f0       	brcs	.+10     	; 0x17bc0 <RF24::read_register(unsigned char, unsigned char*, unsigned char)+0x36>
   17bb6:	8f ef       	ldi	r24, 0xFF	; 255
   17bb8:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   17bbc:	89 93       	st	Y+, r24
   17bbe:	f9 cf       	rjmp	.-14     	; 0x17bb2 <RF24::read_register(unsigned char, unsigned char*, unsigned char)+0x28>
   17bc0:	c7 01       	movw	r24, r14
   17bc2:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <RF24::endTransaction()>
   17bc6:	80 2f       	mov	r24, r16
   17bc8:	df 91       	pop	r29
   17bca:	cf 91       	pop	r28
   17bcc:	1f 91       	pop	r17
   17bce:	0f 91       	pop	r16
   17bd0:	ff 90       	pop	r15
   17bd2:	ef 90       	pop	r14
   17bd4:	df 90       	pop	r13
   17bd6:	cf 90       	pop	r12
   17bd8:	08 95       	ret

00017bda <RF24::read_register(unsigned char)>:
_ZN4RF2413read_registerEh():
   17bda:	1f 93       	push	r17
   17bdc:	cf 93       	push	r28
   17bde:	df 93       	push	r29
   17be0:	ec 01       	movw	r28, r24
   17be2:	16 2f       	mov	r17, r22
   17be4:	0e 94 bf bd 	call	0x17b7e	; 0x17b7e <RF24::beginTransaction()>
   17be8:	81 2f       	mov	r24, r17
   17bea:	8f 71       	andi	r24, 0x1F	; 31
   17bec:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   17bf0:	8f ef       	ldi	r24, 0xFF	; 255
   17bf2:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   17bf6:	18 2f       	mov	r17, r24
   17bf8:	ce 01       	movw	r24, r28
   17bfa:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <RF24::endTransaction()>
   17bfe:	81 2f       	mov	r24, r17
   17c00:	df 91       	pop	r29
   17c02:	cf 91       	pop	r28
   17c04:	1f 91       	pop	r17
   17c06:	08 95       	ret

00017c08 <RF24::write_register(unsigned char, unsigned char)>:
_ZN4RF2414write_registerEhh():
   17c08:	0f 93       	push	r16
   17c0a:	1f 93       	push	r17
   17c0c:	cf 93       	push	r28
   17c0e:	df 93       	push	r29
   17c10:	8c 01       	movw	r16, r24
   17c12:	c6 2f       	mov	r28, r22
   17c14:	d4 2f       	mov	r29, r20
   17c16:	0e 94 bf bd 	call	0x17b7e	; 0x17b7e <RF24::beginTransaction()>
   17c1a:	8c 2f       	mov	r24, r28
   17c1c:	8f 71       	andi	r24, 0x1F	; 31
   17c1e:	80 62       	ori	r24, 0x20	; 32
   17c20:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   17c24:	c8 2f       	mov	r28, r24
   17c26:	8d 2f       	mov	r24, r29
   17c28:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   17c2c:	c8 01       	movw	r24, r16
   17c2e:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <RF24::endTransaction()>
   17c32:	8c 2f       	mov	r24, r28
   17c34:	df 91       	pop	r29
   17c36:	cf 91       	pop	r28
   17c38:	1f 91       	pop	r17
   17c3a:	0f 91       	pop	r16
   17c3c:	08 95       	ret

00017c3e <RF24::spiTrans(unsigned char)>:
_ZN4RF248spiTransEh():
   17c3e:	1f 93       	push	r17
   17c40:	cf 93       	push	r28
   17c42:	df 93       	push	r29
   17c44:	ec 01       	movw	r28, r24
   17c46:	16 2f       	mov	r17, r22
   17c48:	0e 94 bf bd 	call	0x17b7e	; 0x17b7e <RF24::beginTransaction()>
   17c4c:	81 2f       	mov	r24, r17
   17c4e:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   17c52:	18 2f       	mov	r17, r24
   17c54:	ce 01       	movw	r24, r28
   17c56:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <RF24::endTransaction()>
   17c5a:	81 2f       	mov	r24, r17
   17c5c:	df 91       	pop	r29
   17c5e:	cf 91       	pop	r28
   17c60:	1f 91       	pop	r17
   17c62:	08 95       	ret

00017c64 <RF24::flush_rx()>:
_ZN4RF248flush_rxEv():
   17c64:	62 ee       	ldi	r22, 0xE2	; 226
   17c66:	0c 94 1f be 	jmp	0x17c3e	; 0x17c3e <RF24::spiTrans(unsigned char)>

00017c6a <RF24::flush_tx()>:
_ZN4RF248flush_txEv():
   17c6a:	61 ee       	ldi	r22, 0xE1	; 225
   17c6c:	0c 94 1f be 	jmp	0x17c3e	; 0x17c3e <RF24::spiTrans(unsigned char)>

00017c70 <RF24::get_status()>:
_ZN4RF2410get_statusEv():
   17c70:	6f ef       	ldi	r22, 0xFF	; 255
   17c72:	0c 94 1f be 	jmp	0x17c3e	; 0x17c3e <RF24::spiTrans(unsigned char)>

00017c76 <RF24::print_status(unsigned char)>:
_ZN4RF2412print_statusEh():
   17c76:	86 2f       	mov	r24, r22
   17c78:	90 e0       	ldi	r25, 0x00	; 0
   17c7a:	26 2f       	mov	r18, r22
   17c7c:	21 70       	andi	r18, 0x01	; 1
   17c7e:	1f 92       	push	r1
   17c80:	2f 93       	push	r18
   17c82:	9c 01       	movw	r18, r24
   17c84:	35 95       	asr	r19
   17c86:	27 95       	ror	r18
   17c88:	27 70       	andi	r18, 0x07	; 7
   17c8a:	33 27       	eor	r19, r19
   17c8c:	3f 93       	push	r19
   17c8e:	2f 93       	push	r18
   17c90:	64 fb       	bst	r22, 4
   17c92:	99 27       	eor	r25, r25
   17c94:	90 f9       	bld	r25, 0
   17c96:	1f 92       	push	r1
   17c98:	9f 93       	push	r25
   17c9a:	65 fb       	bst	r22, 5
   17c9c:	99 27       	eor	r25, r25
   17c9e:	90 f9       	bld	r25, 0
   17ca0:	1f 92       	push	r1
   17ca2:	9f 93       	push	r25
   17ca4:	66 fb       	bst	r22, 6
   17ca6:	88 27       	eor	r24, r24
   17ca8:	80 f9       	bld	r24, 0
   17caa:	1f 92       	push	r1
   17cac:	8f 93       	push	r24
   17cae:	1f 92       	push	r1
   17cb0:	6f 93       	push	r22
   17cb2:	86 e0       	ldi	r24, 0x06	; 6
   17cb4:	91 e6       	ldi	r25, 0x61	; 97
   17cb6:	9f 93       	push	r25
   17cb8:	8f 93       	push	r24
   17cba:	0e 94 54 d8 	call	0x1b0a8	; 0x1b0a8 <printf_P>
   17cbe:	8d b7       	in	r24, 0x3d	; 61
   17cc0:	9e b7       	in	r25, 0x3e	; 62
   17cc2:	0e 96       	adiw	r24, 0x0e	; 14
   17cc4:	0f b6       	in	r0, 0x3f	; 63
   17cc6:	f8 94       	cli
   17cc8:	9e bf       	out	0x3e, r25	; 62
   17cca:	0f be       	out	0x3f, r0	; 63
   17ccc:	8d bf       	out	0x3d, r24	; 61
   17cce:	08 95       	ret

00017cd0 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>:
_ZN4RF2419print_byte_registerEPKchh():
   17cd0:	cf 92       	push	r12
   17cd2:	df 92       	push	r13
   17cd4:	ff 92       	push	r15
   17cd6:	0f 93       	push	r16
   17cd8:	1f 93       	push	r17
   17cda:	cf 93       	push	r28
   17cdc:	df 93       	push	r29
   17cde:	6c 01       	movw	r12, r24
   17ce0:	c4 2f       	mov	r28, r20
   17ce2:	d2 2f       	mov	r29, r18
   17ce4:	7f 93       	push	r23
   17ce6:	6f 93       	push	r22
   17ce8:	80 e0       	ldi	r24, 0x00	; 0
   17cea:	91 e6       	ldi	r25, 0x61	; 97
   17cec:	9f 93       	push	r25
   17cee:	8f 93       	push	r24
   17cf0:	0e 94 54 d8 	call	0x1b0a8	; 0x1b0a8 <printf_P>
   17cf4:	dc 0f       	add	r29, r28
   17cf6:	0f 90       	pop	r0
   17cf8:	0f 90       	pop	r0
   17cfa:	0f 90       	pop	r0
   17cfc:	0f 90       	pop	r0
   17cfe:	08 ef       	ldi	r16, 0xF8	; 248
   17d00:	10 e6       	ldi	r17, 0x60	; 96
   17d02:	cd 17       	cp	r28, r29
   17d04:	99 f0       	breq	.+38     	; 0x17d2c <RF24::print_byte_register(char const*, unsigned char, unsigned char)+0x5c>
   17d06:	ff 24       	eor	r15, r15
   17d08:	f3 94       	inc	r15
   17d0a:	fc 0e       	add	r15, r28
   17d0c:	6c 2f       	mov	r22, r28
   17d0e:	c6 01       	movw	r24, r12
   17d10:	0e 94 ed bd 	call	0x17bda	; 0x17bda <RF24::read_register(unsigned char)>
   17d14:	1f 92       	push	r1
   17d16:	8f 93       	push	r24
   17d18:	1f 93       	push	r17
   17d1a:	0f 93       	push	r16
   17d1c:	0e 94 54 d8 	call	0x1b0a8	; 0x1b0a8 <printf_P>
   17d20:	0f 90       	pop	r0
   17d22:	0f 90       	pop	r0
   17d24:	0f 90       	pop	r0
   17d26:	0f 90       	pop	r0
   17d28:	cf 2d       	mov	r28, r15
   17d2a:	eb cf       	rjmp	.-42     	; 0x17d02 <RF24::print_byte_register(char const*, unsigned char, unsigned char)+0x32>
   17d2c:	85 ef       	ldi	r24, 0xF5	; 245
   17d2e:	90 e6       	ldi	r25, 0x60	; 96
   17d30:	9f 93       	push	r25
   17d32:	8f 93       	push	r24
   17d34:	0e 94 54 d8 	call	0x1b0a8	; 0x1b0a8 <printf_P>
   17d38:	0f 90       	pop	r0
   17d3a:	0f 90       	pop	r0
   17d3c:	df 91       	pop	r29
   17d3e:	cf 91       	pop	r28
   17d40:	1f 91       	pop	r17
   17d42:	0f 91       	pop	r16
   17d44:	ff 90       	pop	r15
   17d46:	df 90       	pop	r13
   17d48:	cf 90       	pop	r12
   17d4a:	08 95       	ret

00017d4c <RF24::print_address_register(char const*, unsigned char, unsigned char)>:
_ZN4RF2422print_address_registerEPKchh():
   17d4c:	2f 92       	push	r2
   17d4e:	3f 92       	push	r3
   17d50:	4f 92       	push	r4
   17d52:	5f 92       	push	r5
   17d54:	6f 92       	push	r6
   17d56:	7f 92       	push	r7
   17d58:	8f 92       	push	r8
   17d5a:	9f 92       	push	r9
   17d5c:	af 92       	push	r10
   17d5e:	bf 92       	push	r11
   17d60:	cf 92       	push	r12
   17d62:	df 92       	push	r13
   17d64:	ef 92       	push	r14
   17d66:	ff 92       	push	r15
   17d68:	0f 93       	push	r16
   17d6a:	1f 93       	push	r17
   17d6c:	cf 93       	push	r28
   17d6e:	df 93       	push	r29
   17d70:	1f 92       	push	r1
   17d72:	cd b7       	in	r28, 0x3d	; 61
   17d74:	de b7       	in	r29, 0x3e	; 62
   17d76:	6c 01       	movw	r12, r24
   17d78:	24 2e       	mov	r2, r20
   17d7a:	32 2e       	mov	r3, r18
   17d7c:	4d b6       	in	r4, 0x3d	; 61
   17d7e:	5e b6       	in	r5, 0x3e	; 62
   17d80:	7f 93       	push	r23
   17d82:	6f 93       	push	r22
   17d84:	8f ee       	ldi	r24, 0xEF	; 239
   17d86:	90 e6       	ldi	r25, 0x60	; 96
   17d88:	9f 93       	push	r25
   17d8a:	8f 93       	push	r24
   17d8c:	0e 94 54 d8 	call	0x1b0a8	; 0x1b0a8 <printf_P>
   17d90:	32 0c       	add	r3, r2
   17d92:	0f 90       	pop	r0
   17d94:	0f 90       	pop	r0
   17d96:	0f 90       	pop	r0
   17d98:	0f 90       	pop	r0
   17d9a:	8b ee       	ldi	r24, 0xEB	; 235
   17d9c:	a8 2e       	mov	r10, r24
   17d9e:	80 e6       	ldi	r24, 0x60	; 96
   17da0:	b8 2e       	mov	r11, r24
   17da2:	96 ee       	ldi	r25, 0xE6	; 230
   17da4:	89 2e       	mov	r8, r25
   17da6:	90 e6       	ldi	r25, 0x60	; 96
   17da8:	99 2e       	mov	r9, r25
   17daa:	23 14       	cp	r2, r3
   17dac:	e1 f1       	breq	.+120    	; 0x17e26 <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xda>
   17dae:	6d b6       	in	r6, 0x3d	; 61
   17db0:	7e b6       	in	r7, 0x3e	; 62
   17db2:	f6 01       	movw	r30, r12
   17db4:	26 85       	ldd	r18, Z+14	; 0x0e
   17db6:	02 2f       	mov	r16, r18
   17db8:	10 e0       	ldi	r17, 0x00	; 0
   17dba:	8d b7       	in	r24, 0x3d	; 61
   17dbc:	9e b7       	in	r25, 0x3e	; 62
   17dbe:	80 1b       	sub	r24, r16
   17dc0:	91 0b       	sbc	r25, r17
   17dc2:	0f b6       	in	r0, 0x3f	; 63
   17dc4:	f8 94       	cli
   17dc6:	9e bf       	out	0x3e, r25	; 62
   17dc8:	0f be       	out	0x3f, r0	; 63
   17dca:	8d bf       	out	0x3d, r24	; 61
   17dcc:	ed b7       	in	r30, 0x3d	; 61
   17dce:	fe b7       	in	r31, 0x3e	; 62
   17dd0:	31 96       	adiw	r30, 0x01	; 1
   17dd2:	7f 01       	movw	r14, r30
   17dd4:	f1 e0       	ldi	r31, 0x01	; 1
   17dd6:	f2 0d       	add	r31, r2
   17dd8:	f9 83       	std	Y+1, r31	; 0x01
   17dda:	a7 01       	movw	r20, r14
   17ddc:	62 2d       	mov	r22, r2
   17dde:	c6 01       	movw	r24, r12
   17de0:	0e 94 c5 bd 	call	0x17b8a	; 0x17b8a <RF24::read_register(unsigned char, unsigned char*, unsigned char)>
   17de4:	bf 92       	push	r11
   17de6:	af 92       	push	r10
   17de8:	0e 94 54 d8 	call	0x1b0a8	; 0x1b0a8 <printf_P>
   17dec:	0e 0d       	add	r16, r14
   17dee:	1f 1d       	adc	r17, r15
   17df0:	0f 90       	pop	r0
   17df2:	0f 90       	pop	r0
   17df4:	01 50       	subi	r16, 0x01	; 1
   17df6:	11 09       	sbc	r17, r1
   17df8:	0e 15       	cp	r16, r14
   17dfa:	1f 05       	cpc	r17, r15
   17dfc:	68 f0       	brcs	.+26     	; 0x17e18 <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xcc>
   17dfe:	f8 01       	movw	r30, r16
   17e00:	80 81       	ld	r24, Z
   17e02:	1f 92       	push	r1
   17e04:	8f 93       	push	r24
   17e06:	9f 92       	push	r9
   17e08:	8f 92       	push	r8
   17e0a:	0e 94 54 d8 	call	0x1b0a8	; 0x1b0a8 <printf_P>
   17e0e:	0f 90       	pop	r0
   17e10:	0f 90       	pop	r0
   17e12:	0f 90       	pop	r0
   17e14:	0f 90       	pop	r0
   17e16:	ee cf       	rjmp	.-36     	; 0x17df4 <RF24::print_address_register(char const*, unsigned char, unsigned char)+0xa8>
   17e18:	0f b6       	in	r0, 0x3f	; 63
   17e1a:	f8 94       	cli
   17e1c:	7e be       	out	0x3e, r7	; 62
   17e1e:	0f be       	out	0x3f, r0	; 63
   17e20:	6d be       	out	0x3d, r6	; 61
   17e22:	29 80       	ldd	r2, Y+1	; 0x01
   17e24:	c2 cf       	rjmp	.-124    	; 0x17daa <RF24::print_address_register(char const*, unsigned char, unsigned char)+0x5e>
   17e26:	83 ee       	ldi	r24, 0xE3	; 227
   17e28:	90 e6       	ldi	r25, 0x60	; 96
   17e2a:	9f 93       	push	r25
   17e2c:	8f 93       	push	r24
   17e2e:	0e 94 54 d8 	call	0x1b0a8	; 0x1b0a8 <printf_P>
   17e32:	0f 90       	pop	r0
   17e34:	0f 90       	pop	r0
   17e36:	0f b6       	in	r0, 0x3f	; 63
   17e38:	f8 94       	cli
   17e3a:	5e be       	out	0x3e, r5	; 62
   17e3c:	0f be       	out	0x3f, r0	; 63
   17e3e:	4d be       	out	0x3d, r4	; 61
   17e40:	0f 90       	pop	r0
   17e42:	df 91       	pop	r29
   17e44:	cf 91       	pop	r28
   17e46:	1f 91       	pop	r17
   17e48:	0f 91       	pop	r16
   17e4a:	ff 90       	pop	r15
   17e4c:	ef 90       	pop	r14
   17e4e:	df 90       	pop	r13
   17e50:	cf 90       	pop	r12
   17e52:	bf 90       	pop	r11
   17e54:	af 90       	pop	r10
   17e56:	9f 90       	pop	r9
   17e58:	8f 90       	pop	r8
   17e5a:	7f 90       	pop	r7
   17e5c:	6f 90       	pop	r6
   17e5e:	5f 90       	pop	r5
   17e60:	4f 90       	pop	r4
   17e62:	3f 90       	pop	r3
   17e64:	2f 90       	pop	r2
   17e66:	08 95       	ret

00017e68 <RF24::RF24(unsigned int, unsigned int)>:
_ZN4RF24C2Ejj():
   17e68:	fc 01       	movw	r30, r24
   17e6a:	71 83       	std	Z+1, r23	; 0x01
   17e6c:	60 83       	st	Z, r22
   17e6e:	53 83       	std	Z+3, r21	; 0x03
   17e70:	42 83       	std	Z+2, r20	; 0x02
   17e72:	16 82       	std	Z+6, r1	; 0x06
   17e74:	80 e2       	ldi	r24, 0x20	; 32
   17e76:	87 83       	std	Z+7, r24	; 0x07
   17e78:	10 86       	std	Z+8, r1	; 0x08
   17e7a:	85 e0       	ldi	r24, 0x05	; 5
   17e7c:	86 87       	std	Z+14, r24	; 0x0e
   17e7e:	85 e0       	ldi	r24, 0x05	; 5
   17e80:	90 e0       	ldi	r25, 0x00	; 0
   17e82:	a0 e0       	ldi	r26, 0x00	; 0
   17e84:	b0 e0       	ldi	r27, 0x00	; 0
   17e86:	84 8b       	std	Z+20, r24	; 0x14
   17e88:	95 8b       	std	Z+21, r25	; 0x15
   17e8a:	a6 8b       	std	Z+22, r26	; 0x16
   17e8c:	b7 8b       	std	Z+23, r27	; 0x17
   17e8e:	11 86       	std	Z+9, r1	; 0x09
   17e90:	08 95       	ret

00017e92 <RF24::setChannel(unsigned char)>:
_ZN4RF2410setChannelEh():
   17e92:	46 2f       	mov	r20, r22
   17e94:	6d 37       	cpi	r22, 0x7D	; 125
   17e96:	08 f0       	brcs	.+2      	; 0x17e9a <RF24::setChannel(unsigned char)+0x8>
   17e98:	4d e7       	ldi	r20, 0x7D	; 125
   17e9a:	65 e0       	ldi	r22, 0x05	; 5
   17e9c:	0c 94 04 be 	jmp	0x17c08	; 0x17c08 <RF24::write_register(unsigned char, unsigned char)>

00017ea0 <RF24::powerUp()>:
_ZN4RF247powerUpEv():
   17ea0:	cf 93       	push	r28
   17ea2:	df 93       	push	r29
   17ea4:	ec 01       	movw	r28, r24
   17ea6:	60 e0       	ldi	r22, 0x00	; 0
   17ea8:	0e 94 ed bd 	call	0x17bda	; 0x17bda <RF24::read_register(unsigned char)>
   17eac:	81 fd       	sbrc	r24, 1
   17eae:	0e c0       	rjmp	.+28     	; 0x17ecc <RF24::powerUp()+0x2c>
   17eb0:	48 2f       	mov	r20, r24
   17eb2:	42 60       	ori	r20, 0x02	; 2
   17eb4:	60 e0       	ldi	r22, 0x00	; 0
   17eb6:	ce 01       	movw	r24, r28
   17eb8:	0e 94 04 be 	call	0x17c08	; 0x17c08 <RF24::write_register(unsigned char, unsigned char)>
   17ebc:	65 e0       	ldi	r22, 0x05	; 5
   17ebe:	70 e0       	ldi	r23, 0x00	; 0
   17ec0:	80 e0       	ldi	r24, 0x00	; 0
   17ec2:	90 e0       	ldi	r25, 0x00	; 0
   17ec4:	df 91       	pop	r29
   17ec6:	cf 91       	pop	r28
   17ec8:	0c 94 50 cc 	jmp	0x198a0	; 0x198a0 <delay>
   17ecc:	df 91       	pop	r29
   17ece:	cf 91       	pop	r28
   17ed0:	08 95       	ret

00017ed2 <RF24::toggle_features()>:
_ZN4RF2415toggle_featuresEv():
   17ed2:	cf 93       	push	r28
   17ed4:	df 93       	push	r29
   17ed6:	ec 01       	movw	r28, r24
   17ed8:	0e 94 bf bd 	call	0x17b7e	; 0x17b7e <RF24::beginTransaction()>
   17edc:	80 e5       	ldi	r24, 0x50	; 80
   17ede:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   17ee2:	83 e7       	ldi	r24, 0x73	; 115
   17ee4:	0e 94 d7 b0 	call	0x161ae	; 0x161ae <SPIClass::transfer(unsigned char)>
   17ee8:	ce 01       	movw	r24, r28
   17eea:	df 91       	pop	r29
   17eec:	cf 91       	pop	r28
   17eee:	0c 94 c2 bd 	jmp	0x17b84	; 0x17b84 <RF24::endTransaction()>

00017ef2 <RF24::setPALevel(unsigned char)>:
_ZN4RF2410setPALevelEh():
   17ef2:	0f 93       	push	r16
   17ef4:	1f 93       	push	r17
   17ef6:	cf 93       	push	r28
   17ef8:	8c 01       	movw	r16, r24
   17efa:	c6 2f       	mov	r28, r22
   17efc:	66 e0       	ldi	r22, 0x06	; 6
   17efe:	0e 94 ed bd 	call	0x17bda	; 0x17bda <RF24::read_register(unsigned char)>
   17f02:	88 7f       	andi	r24, 0xF8	; 248
   17f04:	c4 30       	cpi	r28, 0x04	; 4
   17f06:	58 f4       	brcc	.+22     	; 0x17f1e <RF24::setPALevel(unsigned char)+0x2c>
   17f08:	cc 0f       	add	r28, r28
   17f0a:	cf 5f       	subi	r28, 0xFF	; 255
   17f0c:	4c 2f       	mov	r20, r28
   17f0e:	48 2b       	or	r20, r24
   17f10:	66 e0       	ldi	r22, 0x06	; 6
   17f12:	c8 01       	movw	r24, r16
   17f14:	cf 91       	pop	r28
   17f16:	1f 91       	pop	r17
   17f18:	0f 91       	pop	r16
   17f1a:	0c 94 04 be 	jmp	0x17c08	; 0x17c08 <RF24::write_register(unsigned char, unsigned char)>
   17f1e:	c7 e0       	ldi	r28, 0x07	; 7
   17f20:	f5 cf       	rjmp	.-22     	; 0x17f0c <RF24::setPALevel(unsigned char)+0x1a>

00017f22 <RF24::getPALevel()>:
_ZN4RF2410getPALevelEv():
   17f22:	66 e0       	ldi	r22, 0x06	; 6
   17f24:	0e 94 ed bd 	call	0x17bda	; 0x17bda <RF24::read_register(unsigned char)>
   17f28:	90 e0       	ldi	r25, 0x00	; 0
   17f2a:	95 95       	asr	r25
   17f2c:	87 95       	ror	r24
   17f2e:	83 70       	andi	r24, 0x03	; 3
   17f30:	08 95       	ret

00017f32 <RF24::setDataRate(rf24_datarate_e)>:
_ZN4RF2411setDataRateE15rf24_datarate_e():
   17f32:	ef 92       	push	r14
   17f34:	ff 92       	push	r15
   17f36:	0f 93       	push	r16
   17f38:	1f 93       	push	r17
   17f3a:	cf 93       	push	r28
   17f3c:	8c 01       	movw	r16, r24
   17f3e:	7b 01       	movw	r14, r22
   17f40:	66 e0       	ldi	r22, 0x06	; 6
   17f42:	0e 94 ed bd 	call	0x17bda	; 0x17bda <RF24::read_register(unsigned char)>
   17f46:	c8 2f       	mov	r28, r24
   17f48:	c7 7d       	andi	r28, 0xD7	; 215
   17f4a:	82 e0       	ldi	r24, 0x02	; 2
   17f4c:	e8 16       	cp	r14, r24
   17f4e:	f1 04       	cpc	r15, r1
   17f50:	e9 f4       	brne	.+58     	; 0x17f8c <RF24::setDataRate(rf24_datarate_e)+0x5a>
   17f52:	c0 62       	ori	r28, 0x20	; 32
   17f54:	8b e9       	ldi	r24, 0x9B	; 155
   17f56:	90 e0       	ldi	r25, 0x00	; 0
   17f58:	a0 e0       	ldi	r26, 0x00	; 0
   17f5a:	b0 e0       	ldi	r27, 0x00	; 0
   17f5c:	f8 01       	movw	r30, r16
   17f5e:	80 8b       	std	Z+16, r24	; 0x10
   17f60:	91 8b       	std	Z+17, r25	; 0x11
   17f62:	a2 8b       	std	Z+18, r26	; 0x12
   17f64:	b3 8b       	std	Z+19, r27	; 0x13
   17f66:	4c 2f       	mov	r20, r28
   17f68:	66 e0       	ldi	r22, 0x06	; 6
   17f6a:	c8 01       	movw	r24, r16
   17f6c:	0e 94 04 be 	call	0x17c08	; 0x17c08 <RF24::write_register(unsigned char, unsigned char)>
   17f70:	66 e0       	ldi	r22, 0x06	; 6
   17f72:	c8 01       	movw	r24, r16
   17f74:	0e 94 ed bd 	call	0x17bda	; 0x17bda <RF24::read_register(unsigned char)>
   17f78:	91 e0       	ldi	r25, 0x01	; 1
   17f7a:	8c 13       	cpse	r24, r28
   17f7c:	90 e0       	ldi	r25, 0x00	; 0
   17f7e:	89 2f       	mov	r24, r25
   17f80:	cf 91       	pop	r28
   17f82:	1f 91       	pop	r17
   17f84:	0f 91       	pop	r16
   17f86:	ff 90       	pop	r15
   17f88:	ef 90       	pop	r14
   17f8a:	08 95       	ret
   17f8c:	85 e5       	ldi	r24, 0x55	; 85
   17f8e:	90 e0       	ldi	r25, 0x00	; 0
   17f90:	a0 e0       	ldi	r26, 0x00	; 0
   17f92:	b0 e0       	ldi	r27, 0x00	; 0
   17f94:	ea 94       	dec	r14
   17f96:	ef 28       	or	r14, r15
   17f98:	09 f7       	brne	.-62     	; 0x17f5c <RF24::setDataRate(rf24_datarate_e)+0x2a>
   17f9a:	c8 60       	ori	r28, 0x08	; 8
   17f9c:	81 e4       	ldi	r24, 0x41	; 65
   17f9e:	90 e0       	ldi	r25, 0x00	; 0
   17fa0:	a0 e0       	ldi	r26, 0x00	; 0
   17fa2:	b0 e0       	ldi	r27, 0x00	; 0
   17fa4:	db cf       	rjmp	.-74     	; 0x17f5c <RF24::setDataRate(rf24_datarate_e)+0x2a>

00017fa6 <RF24::begin()>:
_ZN4RF245beginEv():
   17fa6:	1f 93       	push	r17
   17fa8:	cf 93       	push	r28
   17faa:	df 93       	push	r29
   17fac:	ec 01       	movw	r28, r24
   17fae:	88 81       	ld	r24, Y
   17fb0:	99 81       	ldd	r25, Y+1	; 0x01
   17fb2:	2a 81       	ldd	r18, Y+2	; 0x02
   17fb4:	3b 81       	ldd	r19, Y+3	; 0x03
   17fb6:	82 17       	cp	r24, r18
   17fb8:	93 07       	cpc	r25, r19
   17fba:	19 f0       	breq	.+6      	; 0x17fc2 <RF24::begin()+0x1c>
   17fbc:	61 e0       	ldi	r22, 0x01	; 1
   17fbe:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   17fc2:	8a 81       	ldd	r24, Y+2	; 0x02
   17fc4:	9b 81       	ldd	r25, Y+3	; 0x03
   17fc6:	28 81       	ld	r18, Y
   17fc8:	39 81       	ldd	r19, Y+1	; 0x01
   17fca:	28 17       	cp	r18, r24
   17fcc:	39 07       	cpc	r19, r25
   17fce:	19 f0       	breq	.+6      	; 0x17fd6 <RF24::begin()+0x30>
   17fd0:	61 e0       	ldi	r22, 0x01	; 1
   17fd2:	0e 94 41 cd 	call	0x19a82	; 0x19a82 <pinMode>
   17fd6:	0e 94 66 a5 	call	0x14acc	; 0x14acc <SPIClass::begin()>
   17fda:	60 e0       	ldi	r22, 0x00	; 0
   17fdc:	ce 01       	movw	r24, r28
   17fde:	0e 94 b3 bd 	call	0x17b66	; 0x17b66 <RF24::ce(bool)>
   17fe2:	61 e0       	ldi	r22, 0x01	; 1
   17fe4:	ce 01       	movw	r24, r28
   17fe6:	0e 94 9b bd 	call	0x17b36	; 0x17b36 <RF24::csn(bool)>
   17fea:	65 e0       	ldi	r22, 0x05	; 5
   17fec:	70 e0       	ldi	r23, 0x00	; 0
   17fee:	80 e0       	ldi	r24, 0x00	; 0
   17ff0:	90 e0       	ldi	r25, 0x00	; 0
   17ff2:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
   17ff6:	4c e0       	ldi	r20, 0x0C	; 12
   17ff8:	60 e0       	ldi	r22, 0x00	; 0
   17ffa:	ce 01       	movw	r24, r28
   17ffc:	0e 94 04 be 	call	0x17c08	; 0x17c08 <RF24::write_register(unsigned char, unsigned char)>
_ZN4RF2410setRetriesEhh():
   18000:	4f e5       	ldi	r20, 0x5F	; 95
   18002:	64 e0       	ldi	r22, 0x04	; 4
   18004:	ce 01       	movw	r24, r28
   18006:	0e 94 04 be 	call	0x17c08	; 0x17c08 <RF24::write_register(unsigned char, unsigned char)>
_ZN4RF245beginEv():
   1800a:	60 e0       	ldi	r22, 0x00	; 0
   1800c:	ce 01       	movw	r24, r28
   1800e:	0e 94 79 bf 	call	0x17ef2	; 0x17ef2 <RF24::setPALevel(unsigned char)>
   18012:	62 e0       	ldi	r22, 0x02	; 2
   18014:	70 e0       	ldi	r23, 0x00	; 0
   18016:	ce 01       	movw	r24, r28
   18018:	0e 94 99 bf 	call	0x17f32	; 0x17f32 <RF24::setDataRate(rf24_datarate_e)>
   1801c:	88 23       	and	r24, r24
   1801e:	11 f0       	breq	.+4      	; 0x18024 <RF24::begin()+0x7e>
   18020:	81 e0       	ldi	r24, 0x01	; 1
   18022:	8e 83       	std	Y+6, r24	; 0x06
   18024:	66 e0       	ldi	r22, 0x06	; 6
   18026:	ce 01       	movw	r24, r28
   18028:	0e 94 ed bd 	call	0x17bda	; 0x17bda <RF24::read_register(unsigned char)>
   1802c:	18 2f       	mov	r17, r24
   1802e:	70 e0       	ldi	r23, 0x00	; 0
   18030:	60 e0       	ldi	r22, 0x00	; 0
   18032:	ce 01       	movw	r24, r28
   18034:	0e 94 99 bf 	call	0x17f32	; 0x17f32 <RF24::setDataRate(rf24_datarate_e)>
   18038:	ce 01       	movw	r24, r28
   1803a:	0e 94 69 bf 	call	0x17ed2	; 0x17ed2 <RF24::toggle_features()>
   1803e:	40 e0       	ldi	r20, 0x00	; 0
   18040:	6d e1       	ldi	r22, 0x1D	; 29
   18042:	ce 01       	movw	r24, r28
   18044:	0e 94 04 be 	call	0x17c08	; 0x17c08 <RF24::write_register(unsigned char, unsigned char)>
   18048:	40 e0       	ldi	r20, 0x00	; 0
   1804a:	6c e1       	ldi	r22, 0x1C	; 28
   1804c:	ce 01       	movw	r24, r28
   1804e:	0e 94 04 be 	call	0x17c08	; 0x17c08 <RF24::write_register(unsigned char, unsigned char)>
   18052:	18 86       	std	Y+8, r1	; 0x08
   18054:	40 e7       	ldi	r20, 0x70	; 112
   18056:	67 e0       	ldi	r22, 0x07	; 7
   18058:	ce 01       	movw	r24, r28
   1805a:	0e 94 04 be 	call	0x17c08	; 0x17c08 <RF24::write_register(unsigned char, unsigned char)>
   1805e:	6c e4       	ldi	r22, 0x4C	; 76
   18060:	ce 01       	movw	r24, r28
   18062:	0e 94 49 bf 	call	0x17e92	; 0x17e92 <RF24::setChannel(unsigned char)>
   18066:	ce 01       	movw	r24, r28
   18068:	0e 94 32 be 	call	0x17c64	; 0x17c64 <RF24::flush_rx()>
   1806c:	ce 01       	movw	r24, r28
   1806e:	0e 94 35 be 	call	0x17c6a	; 0x17c6a <RF24::flush_tx()>
   18072:	ce 01       	movw	r24, r28
   18074:	0e 94 50 bf 	call	0x17ea0	; 0x17ea0 <RF24::powerUp()>
   18078:	60 e0       	ldi	r22, 0x00	; 0
   1807a:	ce 01       	movw	r24, r28
   1807c:	0e 94 ed bd 	call	0x17bda	; 0x17bda <RF24::read_register(unsigned char)>
   18080:	48 2f       	mov	r20, r24
   18082:	4e 7f       	andi	r20, 0xFE	; 254
   18084:	60 e0       	ldi	r22, 0x00	; 0
   18086:	ce 01       	movw	r24, r28
   18088:	0e 94 04 be 	call	0x17c08	; 0x17c08 <RF24::write_register(unsigned char, unsigned char)>
   1808c:	64 e6       	ldi	r22, 0x64	; 100
   1808e:	70 e0       	ldi	r23, 0x00	; 0
   18090:	80 e0       	ldi	r24, 0x00	; 0
   18092:	90 e0       	ldi	r25, 0x00	; 0
   18094:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
   18098:	11 50       	subi	r17, 0x01	; 1
   1809a:	81 e0       	ldi	r24, 0x01	; 1
   1809c:	1e 3f       	cpi	r17, 0xFE	; 254
   1809e:	08 f0       	brcs	.+2      	; 0x180a2 <RF24::begin()+0xfc>
   180a0:	80 e0       	ldi	r24, 0x00	; 0
   180a2:	df 91       	pop	r29
   180a4:	cf 91       	pop	r28
   180a6:	1f 91       	pop	r17
   180a8:	08 95       	ret

000180aa <RF24::getDataRate()>:
_ZN4RF2411getDataRateEv():
   180aa:	66 e0       	ldi	r22, 0x06	; 6
   180ac:	0e 94 ed bd 	call	0x17bda	; 0x17bda <RF24::read_register(unsigned char)>
   180b0:	28 2f       	mov	r18, r24
   180b2:	28 72       	andi	r18, 0x28	; 40
   180b4:	20 32       	cpi	r18, 0x20	; 32
   180b6:	31 f0       	breq	.+12     	; 0x180c4 <RF24::getDataRate()+0x1a>
   180b8:	81 e0       	ldi	r24, 0x01	; 1
   180ba:	90 e0       	ldi	r25, 0x00	; 0
   180bc:	28 30       	cpi	r18, 0x08	; 8
   180be:	21 f0       	breq	.+8      	; 0x180c8 <RF24::getDataRate()+0x1e>
   180c0:	80 e0       	ldi	r24, 0x00	; 0
   180c2:	08 95       	ret
   180c4:	82 e0       	ldi	r24, 0x02	; 2
   180c6:	90 e0       	ldi	r25, 0x00	; 0
   180c8:	08 95       	ret

000180ca <RF24::getCRCLength()>:
_ZN4RF2412getCRCLengthEv():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1560
}

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
   180ca:	0f 93       	push	r16
   180cc:	1f 93       	push	r17
   180ce:	cf 93       	push	r28
   180d0:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:1563
  rf24_crclength_e result = RF24_CRC_DISABLED;
  
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
   180d2:	60 e0       	ldi	r22, 0x00	; 0
   180d4:	0e 94 ed bd 	call	0x17bda	; 0x17bda <RF24::read_register(unsigned char)>
   180d8:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:1564
  uint8_t AA = read_register(EN_AA);
   180da:	61 e0       	ldi	r22, 0x01	; 1
   180dc:	c8 01       	movw	r24, r16
   180de:	0e 94 ed bd 	call	0x17bda	; 0x17bda <RF24::read_register(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566
  
  if ( config & _BV(EN_CRC ) || AA)
   180e2:	c3 fd       	sbrc	r28, 3
   180e4:	02 c0       	rjmp	.+4      	; 0x180ea <RF24::getCRCLength()+0x20>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566 (discriminator 1)
   180e6:	88 23       	and	r24, r24
   180e8:	39 f0       	breq	.+14     	; 0x180f8 <RF24::getCRCLength()+0x2e>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1571
  {
    if ( config & _BV(CRCO) )
      result = RF24_CRC_16;
    else
      result = RF24_CRC_8;
   180ea:	81 e0       	ldi	r24, 0x01	; 1
   180ec:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/RF24/RF24.cpp:1568
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
  uint8_t AA = read_register(EN_AA);
  
  if ( config & _BV(EN_CRC ) || AA)
  {
    if ( config & _BV(CRCO) )
   180ee:	c2 ff       	sbrs	r28, 2
   180f0:	05 c0       	rjmp	.+10     	; 0x180fc <RF24::getCRCLength()+0x32>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1569
      result = RF24_CRC_16;
   180f2:	82 e0       	ldi	r24, 0x02	; 2
   180f4:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/RF24/RF24.cpp:1574
    else
      result = RF24_CRC_8;
  }

  return result;
   180f6:	02 c0       	rjmp	.+4      	; 0x180fc <RF24::getCRCLength()+0x32>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1561

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
   180f8:	90 e0       	ldi	r25, 0x00	; 0
   180fa:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/RF24/RF24.cpp:1575
    else
      result = RF24_CRC_8;
  }

  return result;
}
   180fc:	cf 91       	pop	r28
   180fe:	1f 91       	pop	r17
   18100:	0f 91       	pop	r16
   18102:	08 95       	ret

00018104 <RF24::printDetails()>:
_ZN4RF2412printDetailsEv():
/home/saric/Arduino/libraries/RF24/RF24.cpp:531
  rf24_csn_e_str_3,
};
#endif

void RF24::printDetails(void)
{
   18104:	cf 93       	push	r28
   18106:	df 93       	push	r29
   18108:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:565
	}
	printf("\n================ NRF Configuration ================\n");
 
#endif //Linux

  print_status(get_status());
   1810a:	0e 94 38 be 	call	0x17c70	; 0x17c70 <RF24::get_status()>
   1810e:	68 2f       	mov	r22, r24
   18110:	ce 01       	movw	r24, r28
   18112:	0e 94 3b be 	call	0x17c76	; 0x17c76 <RF24::print_status(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:567

  print_address_register(PSTR("RX_ADDR_P0-1"),RX_ADDR_P0,2);
   18116:	22 e0       	ldi	r18, 0x02	; 2
   18118:	4a e0       	ldi	r20, 0x0A	; 10
   1811a:	62 e6       	ldi	r22, 0x62	; 98
   1811c:	70 e6       	ldi	r23, 0x60	; 96
   1811e:	ce 01       	movw	r24, r28
   18120:	0e 94 a6 be 	call	0x17d4c	; 0x17d4c <RF24::print_address_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:568
  print_byte_register(PSTR("RX_ADDR_P2-5"),RX_ADDR_P2,4);
   18124:	24 e0       	ldi	r18, 0x04	; 4
   18126:	4c e0       	ldi	r20, 0x0C	; 12
   18128:	65 e5       	ldi	r22, 0x55	; 85
   1812a:	70 e6       	ldi	r23, 0x60	; 96
   1812c:	ce 01       	movw	r24, r28
   1812e:	0e 94 68 be 	call	0x17cd0	; 0x17cd0 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:569
  print_address_register(PSTR("TX_ADDR\t"),TX_ADDR);
   18132:	21 e0       	ldi	r18, 0x01	; 1
   18134:	40 e1       	ldi	r20, 0x10	; 16
   18136:	6c e4       	ldi	r22, 0x4C	; 76
   18138:	70 e6       	ldi	r23, 0x60	; 96
   1813a:	ce 01       	movw	r24, r28
   1813c:	0e 94 a6 be 	call	0x17d4c	; 0x17d4c <RF24::print_address_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:571

  print_byte_register(PSTR("RX_PW_P0-6"),RX_PW_P0,6);
   18140:	26 e0       	ldi	r18, 0x06	; 6
   18142:	41 e1       	ldi	r20, 0x11	; 17
   18144:	61 e4       	ldi	r22, 0x41	; 65
   18146:	70 e6       	ldi	r23, 0x60	; 96
   18148:	ce 01       	movw	r24, r28
   1814a:	0e 94 68 be 	call	0x17cd0	; 0x17cd0 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:572
  print_byte_register(PSTR("EN_AA\t"),EN_AA);
   1814e:	21 e0       	ldi	r18, 0x01	; 1
   18150:	41 e0       	ldi	r20, 0x01	; 1
   18152:	6a e3       	ldi	r22, 0x3A	; 58
   18154:	70 e6       	ldi	r23, 0x60	; 96
   18156:	ce 01       	movw	r24, r28
   18158:	0e 94 68 be 	call	0x17cd0	; 0x17cd0 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:573
  print_byte_register(PSTR("EN_RXADDR"),EN_RXADDR);
   1815c:	21 e0       	ldi	r18, 0x01	; 1
   1815e:	42 e0       	ldi	r20, 0x02	; 2
   18160:	60 e3       	ldi	r22, 0x30	; 48
   18162:	70 e6       	ldi	r23, 0x60	; 96
   18164:	ce 01       	movw	r24, r28
   18166:	0e 94 68 be 	call	0x17cd0	; 0x17cd0 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:574
  print_byte_register(PSTR("RF_CH\t"),RF_CH);
   1816a:	21 e0       	ldi	r18, 0x01	; 1
   1816c:	45 e0       	ldi	r20, 0x05	; 5
   1816e:	69 e2       	ldi	r22, 0x29	; 41
   18170:	70 e6       	ldi	r23, 0x60	; 96
   18172:	ce 01       	movw	r24, r28
   18174:	0e 94 68 be 	call	0x17cd0	; 0x17cd0 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:575
  print_byte_register(PSTR("RF_SETUP"),RF_SETUP);
   18178:	21 e0       	ldi	r18, 0x01	; 1
   1817a:	46 e0       	ldi	r20, 0x06	; 6
   1817c:	60 e2       	ldi	r22, 0x20	; 32
   1817e:	70 e6       	ldi	r23, 0x60	; 96
   18180:	ce 01       	movw	r24, r28
   18182:	0e 94 68 be 	call	0x17cd0	; 0x17cd0 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:576
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
   18186:	21 e0       	ldi	r18, 0x01	; 1
   18188:	40 e0       	ldi	r20, 0x00	; 0
   1818a:	68 e1       	ldi	r22, 0x18	; 24
   1818c:	70 e6       	ldi	r23, 0x60	; 96
   1818e:	ce 01       	movw	r24, r28
   18190:	0e 94 68 be 	call	0x17cd0	; 0x17cd0 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:577
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);
   18194:	22 e0       	ldi	r18, 0x02	; 2
   18196:	4c e1       	ldi	r20, 0x1C	; 28
   18198:	6a e0       	ldi	r22, 0x0A	; 10
   1819a:	70 e6       	ldi	r23, 0x60	; 96
   1819c:	ce 01       	movw	r24, r28
   1819e:	0e 94 68 be 	call	0x17cd0	; 0x17cd0 <RF24::print_byte_register(char const*, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:579

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
   181a2:	ce 01       	movw	r24, r28
   181a4:	0e 94 55 c0 	call	0x180aa	; 0x180aa <RF24::getDataRate()>
   181a8:	fc 01       	movw	r30, r24
   181aa:	ee 0f       	add	r30, r30
   181ac:	ff 1f       	adc	r31, r31
   181ae:	e7 53       	subi	r30, 0x37	; 55
   181b0:	ff 49       	sbci	r31, 0x9F	; 159
   181b2:	85 91       	lpm	r24, Z+
   181b4:	94 91       	lpm	r25, Z
   181b6:	9f 93       	push	r25
   181b8:	8f 93       	push	r24
   181ba:	88 ef       	ldi	r24, 0xF8	; 248
   181bc:	9f e5       	ldi	r25, 0x5F	; 95
   181be:	9f 93       	push	r25
   181c0:	8f 93       	push	r24
   181c2:	0e 94 54 d8 	call	0x1b0a8	; 0x1b0a8 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:580
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
   181c6:	ee 81       	ldd	r30, Y+6	; 0x06
   181c8:	f0 e0       	ldi	r31, 0x00	; 0
   181ca:	ee 0f       	add	r30, r30
   181cc:	ff 1f       	adc	r31, r31
   181ce:	ee 54       	subi	r30, 0x4E	; 78
   181d0:	ff 49       	sbci	r31, 0x9F	; 159
   181d2:	85 91       	lpm	r24, Z+
   181d4:	94 91       	lpm	r25, Z
   181d6:	9f 93       	push	r25
   181d8:	8f 93       	push	r24
   181da:	89 ee       	ldi	r24, 0xE9	; 233
   181dc:	9f e5       	ldi	r25, 0x5F	; 95
   181de:	9f 93       	push	r25
   181e0:	8f 93       	push	r24
   181e2:	0e 94 54 d8 	call	0x1b0a8	; 0x1b0a8 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:581
  printf_P(PSTR("CRC Length\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
   181e6:	ce 01       	movw	r24, r28
   181e8:	0e 94 65 c0 	call	0x180ca	; 0x180ca <RF24::getCRCLength()>
   181ec:	fc 01       	movw	r30, r24
   181ee:	ee 0f       	add	r30, r30
   181f0:	ff 1f       	adc	r31, r31
   181f2:	ec 56       	subi	r30, 0x6C	; 108
   181f4:	ff 49       	sbci	r31, 0x9F	; 159
   181f6:	85 91       	lpm	r24, Z+
   181f8:	94 91       	lpm	r25, Z
   181fa:	9f 93       	push	r25
   181fc:	8f 93       	push	r24
   181fe:	86 ed       	ldi	r24, 0xD6	; 214
   18200:	9f e5       	ldi	r25, 0x5F	; 95
   18202:	9f 93       	push	r25
   18204:	8f 93       	push	r24
   18206:	0e 94 54 d8 	call	0x1b0a8	; 0x1b0a8 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:582
  printf_P(PSTR("PA Power\t = " PRIPSTR "\r\n"),  pgm_read_word(&rf24_pa_dbm_e_str_P[getPALevel()]));
   1820a:	ce 01       	movw	r24, r28
   1820c:	0e 94 91 bf 	call	0x17f22	; 0x17f22 <RF24::getPALevel()>
   18210:	e8 2f       	mov	r30, r24
   18212:	f0 e0       	ldi	r31, 0x00	; 0
   18214:	ee 0f       	add	r30, r30
   18216:	ff 1f       	adc	r31, r31
   18218:	e1 59       	subi	r30, 0x91	; 145
   1821a:	ff 49       	sbci	r31, 0x9F	; 159
   1821c:	85 91       	lpm	r24, Z+
   1821e:	94 91       	lpm	r25, Z
   18220:	9f 93       	push	r25
   18222:	8f 93       	push	r24
   18224:	85 ec       	ldi	r24, 0xC5	; 197
   18226:	9f e5       	ldi	r25, 0x5F	; 95
   18228:	9f 93       	push	r25
   1822a:	8f 93       	push	r24
   1822c:	0e 94 54 d8 	call	0x1b0a8	; 0x1b0a8 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:584

}
   18230:	8d b7       	in	r24, 0x3d	; 61
   18232:	9e b7       	in	r25, 0x3e	; 62
   18234:	40 96       	adiw	r24, 0x10	; 16
   18236:	0f b6       	in	r0, 0x3f	; 63
   18238:	f8 94       	cli
   1823a:	9e bf       	out	0x3e, r25	; 62
   1823c:	0f be       	out	0x3f, r0	; 63
   1823e:	8d bf       	out	0x3d, r24	; 61
   18240:	df 91       	pop	r29
   18242:	cf 91       	pop	r28
   18244:	08 95       	ret

00018246 <date2days(unsigned int, unsigned char, unsigned char)>:
_ZL9date2daysjhh():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:336
  return data;
}

void RTC_DS1307::writenvram(uint8_t address, uint8_t data) {
  writenvram(address, &data, 1);
}
   18246:	dc 01       	movw	r26, r24
   18248:	50 e0       	ldi	r21, 0x00	; 0
   1824a:	ec e4       	ldi	r30, 0x4C	; 76
   1824c:	f1 e6       	ldi	r31, 0x61	; 97
   1824e:	81 e0       	ldi	r24, 0x01	; 1
   18250:	86 17       	cp	r24, r22
   18252:	30 f4       	brcc	.+12     	; 0x18260 <date2days(unsigned int, unsigned char, unsigned char)+0x1a>
   18254:	94 91       	lpm	r25, Z
   18256:	49 0f       	add	r20, r25
   18258:	51 1d       	adc	r21, r1
   1825a:	8f 5f       	subi	r24, 0xFF	; 255
   1825c:	31 96       	adiw	r30, 0x01	; 1
   1825e:	f8 cf       	rjmp	.-16     	; 0x18250 <date2days(unsigned int, unsigned char, unsigned char)+0xa>
   18260:	63 30       	cpi	r22, 0x03	; 3
   18262:	38 f0       	brcs	.+14     	; 0x18272 <date2days(unsigned int, unsigned char, unsigned char)+0x2c>
   18264:	cd 01       	movw	r24, r26
   18266:	83 70       	andi	r24, 0x03	; 3
   18268:	99 27       	eor	r25, r25
   1826a:	89 2b       	or	r24, r25
   1826c:	11 f4       	brne	.+4      	; 0x18272 <date2days(unsigned int, unsigned char, unsigned char)+0x2c>
   1826e:	4f 5f       	subi	r20, 0xFF	; 255
   18270:	5f 4f       	sbci	r21, 0xFF	; 255
   18272:	9d 01       	movw	r18, r26
   18274:	2d 5f       	subi	r18, 0xFD	; 253
   18276:	3f 4f       	sbci	r19, 0xFF	; 255
   18278:	36 95       	lsr	r19
   1827a:	27 95       	ror	r18
   1827c:	36 95       	lsr	r19
   1827e:	27 95       	ror	r18
   18280:	6d e6       	ldi	r22, 0x6D	; 109
   18282:	71 e0       	ldi	r23, 0x01	; 1
   18284:	a6 9f       	mul	r26, r22
   18286:	c0 01       	movw	r24, r0
   18288:	a7 9f       	mul	r26, r23
   1828a:	90 0d       	add	r25, r0
   1828c:	b6 9f       	mul	r27, r22
   1828e:	90 0d       	add	r25, r0
   18290:	11 24       	eor	r1, r1
   18292:	01 97       	sbiw	r24, 0x01	; 1
   18294:	82 0f       	add	r24, r18
   18296:	93 1f       	adc	r25, r19
   18298:	84 0f       	add	r24, r20
   1829a:	95 1f       	adc	r25, r21
   1829c:	08 95       	ret

0001829e <TwoWire::write(int)>:
_ZN7TwoWire5writeEi():
   1829e:	dc 01       	movw	r26, r24
   182a0:	ed 91       	ld	r30, X+
   182a2:	fc 91       	ld	r31, X
   182a4:	01 90       	ld	r0, Z+
   182a6:	f0 81       	ld	r31, Z
   182a8:	e0 2d       	mov	r30, r0
   182aa:	19 94       	eijmp

000182ac <DateTime::DateTime(unsigned long)>:
_ZN8DateTimeC2Em():
   182ac:	8f 92       	push	r8
   182ae:	9f 92       	push	r9
   182b0:	af 92       	push	r10
   182b2:	bf 92       	push	r11
   182b4:	cf 92       	push	r12
   182b6:	df 92       	push	r13
   182b8:	ef 92       	push	r14
   182ba:	ff 92       	push	r15
   182bc:	cf 93       	push	r28
   182be:	df 93       	push	r29
   182c0:	ec 01       	movw	r28, r24
   182c2:	6a 01       	movw	r12, r20
   182c4:	7b 01       	movw	r14, r22
   182c6:	80 e8       	ldi	r24, 0x80	; 128
   182c8:	c8 1a       	sub	r12, r24
   182ca:	83 e4       	ldi	r24, 0x43	; 67
   182cc:	d8 0a       	sbc	r13, r24
   182ce:	8d e6       	ldi	r24, 0x6D	; 109
   182d0:	e8 0a       	sbc	r14, r24
   182d2:	88 e3       	ldi	r24, 0x38	; 56
   182d4:	f8 0a       	sbc	r15, r24
   182d6:	8c e3       	ldi	r24, 0x3C	; 60
   182d8:	88 2e       	mov	r8, r24
   182da:	91 2c       	mov	r9, r1
   182dc:	a1 2c       	mov	r10, r1
   182de:	b1 2c       	mov	r11, r1
   182e0:	c7 01       	movw	r24, r14
   182e2:	b6 01       	movw	r22, r12
   182e4:	a5 01       	movw	r20, r10
   182e6:	94 01       	movw	r18, r8
   182e8:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
   182ec:	6d 83       	std	Y+5, r22	; 0x05
   182ee:	ca 01       	movw	r24, r20
   182f0:	b9 01       	movw	r22, r18
   182f2:	a5 01       	movw	r20, r10
   182f4:	94 01       	movw	r18, r8
   182f6:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
   182fa:	6c 83       	std	Y+4, r22	; 0x04
   182fc:	c7 01       	movw	r24, r14
   182fe:	b6 01       	movw	r22, r12
   18300:	20 e1       	ldi	r18, 0x10	; 16
   18302:	3e e0       	ldi	r19, 0x0E	; 14
   18304:	40 e0       	ldi	r20, 0x00	; 0
   18306:	50 e0       	ldi	r21, 0x00	; 0
   18308:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
   1830c:	ca 01       	movw	r24, r20
   1830e:	b9 01       	movw	r22, r18
   18310:	28 e1       	ldi	r18, 0x18	; 24
   18312:	30 e0       	ldi	r19, 0x00	; 0
   18314:	40 e0       	ldi	r20, 0x00	; 0
   18316:	50 e0       	ldi	r21, 0x00	; 0
   18318:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
   1831c:	6b 83       	std	Y+3, r22	; 0x03
   1831e:	c7 01       	movw	r24, r14
   18320:	b6 01       	movw	r22, r12
   18322:	20 e8       	ldi	r18, 0x80	; 128
   18324:	31 e5       	ldi	r19, 0x51	; 81
   18326:	41 e0       	ldi	r20, 0x01	; 1
   18328:	50 e0       	ldi	r21, 0x00	; 0
   1832a:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
   1832e:	18 82       	st	Y, r1
   18330:	63 e9       	ldi	r22, 0x93	; 147
   18332:	7e ef       	ldi	r23, 0xFE	; 254
   18334:	48 81       	ld	r20, Y
   18336:	54 2f       	mov	r21, r20
   18338:	53 70       	andi	r21, 0x03	; 3
   1833a:	81 e0       	ldi	r24, 0x01	; 1
   1833c:	09 f0       	breq	.+2      	; 0x18340 <DateTime::DateTime(unsigned long)+0x94>
   1833e:	80 e0       	ldi	r24, 0x00	; 0
   18340:	90 e0       	ldi	r25, 0x00	; 0
   18342:	fc 01       	movw	r30, r24
   18344:	e3 59       	subi	r30, 0x93	; 147
   18346:	fe 4f       	sbci	r31, 0xFE	; 254
   18348:	2e 17       	cp	r18, r30
   1834a:	3f 07       	cpc	r19, r31
   1834c:	40 f0       	brcs	.+16     	; 0x1835e <DateTime::DateTime(unsigned long)+0xb2>
   1834e:	fb 01       	movw	r30, r22
   18350:	e8 1b       	sub	r30, r24
   18352:	f9 0b       	sbc	r31, r25
   18354:	2e 0f       	add	r18, r30
   18356:	3f 1f       	adc	r19, r31
   18358:	4f 5f       	subi	r20, 0xFF	; 255
   1835a:	48 83       	st	Y, r20
   1835c:	eb cf       	rjmp	.-42     	; 0x18334 <DateTime::DateTime(unsigned long)+0x88>
   1835e:	81 e0       	ldi	r24, 0x01	; 1
   18360:	89 83       	std	Y+1, r24	; 0x01
   18362:	89 81       	ldd	r24, Y+1	; 0x01
   18364:	68 2f       	mov	r22, r24
   18366:	61 50       	subi	r22, 0x01	; 1
   18368:	77 0b       	sbc	r23, r23
   1836a:	fb 01       	movw	r30, r22
   1836c:	e4 5b       	subi	r30, 0xB4	; 180
   1836e:	fe 49       	sbci	r31, 0x9E	; 158
   18370:	e4 91       	lpm	r30, Z
   18372:	51 11       	cpse	r21, r1
   18374:	03 c0       	rjmp	.+6      	; 0x1837c <DateTime::DateTime(unsigned long)+0xd0>
   18376:	82 30       	cpi	r24, 0x02	; 2
   18378:	09 f4       	brne	.+2      	; 0x1837c <DateTime::DateTime(unsigned long)+0xd0>
   1837a:	ef 5f       	subi	r30, 0xFF	; 255
   1837c:	f0 e0       	ldi	r31, 0x00	; 0
   1837e:	2e 17       	cp	r18, r30
   18380:	3f 07       	cpc	r19, r31
   18382:	20 f0       	brcs	.+8      	; 0x1838c <DateTime::DateTime(unsigned long)+0xe0>
   18384:	2e 1b       	sub	r18, r30
   18386:	3f 0b       	sbc	r19, r31
   18388:	8f 5f       	subi	r24, 0xFF	; 255
   1838a:	ea cf       	rjmp	.-44     	; 0x18360 <DateTime::DateTime(unsigned long)+0xb4>
   1838c:	2f 5f       	subi	r18, 0xFF	; 255
   1838e:	2a 83       	std	Y+2, r18	; 0x02
   18390:	df 91       	pop	r29
   18392:	cf 91       	pop	r28
   18394:	ff 90       	pop	r15
   18396:	ef 90       	pop	r14
   18398:	df 90       	pop	r13
   1839a:	cf 90       	pop	r12
   1839c:	bf 90       	pop	r11
   1839e:	af 90       	pop	r10
   183a0:	9f 90       	pop	r9
   183a2:	8f 90       	pop	r8
   183a4:	08 95       	ret

000183a6 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN8DateTimeC2Ejhhhhh():
   183a6:	cf 92       	push	r12
   183a8:	ef 92       	push	r14
   183aa:	0f 93       	push	r16
   183ac:	fc 01       	movw	r30, r24
   183ae:	60 3d       	cpi	r22, 0xD0	; 208
   183b0:	87 e0       	ldi	r24, 0x07	; 7
   183b2:	78 07       	cpc	r23, r24
   183b4:	10 f0       	brcs	.+4      	; 0x183ba <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x14>
   183b6:	60 5d       	subi	r22, 0xD0	; 208
   183b8:	77 40       	sbci	r23, 0x07	; 7
   183ba:	60 83       	st	Z, r22
   183bc:	41 83       	std	Z+1, r20	; 0x01
   183be:	22 83       	std	Z+2, r18	; 0x02
   183c0:	03 83       	std	Z+3, r16	; 0x03
   183c2:	e4 82       	std	Z+4, r14	; 0x04
   183c4:	c5 82       	std	Z+5, r12	; 0x05
   183c6:	0f 91       	pop	r16
   183c8:	ef 90       	pop	r14
   183ca:	cf 90       	pop	r12
   183cc:	08 95       	ret

000183ce <DateTime::dayOfTheWeek() const>:
_ZNK8DateTime12dayOfTheWeekEv():
   183ce:	fc 01       	movw	r30, r24
   183d0:	80 81       	ld	r24, Z
   183d2:	42 81       	ldd	r20, Z+2	; 0x02
   183d4:	61 81       	ldd	r22, Z+1	; 0x01
   183d6:	90 e0       	ldi	r25, 0x00	; 0
   183d8:	0e 94 23 c1 	call	0x18246	; 0x18246 <date2days(unsigned int, unsigned char, unsigned char)>
   183dc:	06 96       	adiw	r24, 0x06	; 6
   183de:	67 e0       	ldi	r22, 0x07	; 7
   183e0:	70 e0       	ldi	r23, 0x00	; 0
   183e2:	0e 94 52 d3 	call	0x1a6a4	; 0x1a6a4 <__udivmodhi4>
   183e6:	08 95       	ret

000183e8 <RTC_DS1307::begin()>:
_ZN10RTC_DS13075beginEv():
   183e8:	85 e1       	ldi	r24, 0x15	; 21
   183ea:	91 e1       	ldi	r25, 0x11	; 17
   183ec:	0e 94 33 c4 	call	0x18866	; 0x18866 <TwoWire::begin()>
   183f0:	81 e0       	ldi	r24, 0x01	; 1
   183f2:	08 95       	ret

000183f4 <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
   183f4:	1f 93       	push	r17
   183f6:	cf 93       	push	r28
   183f8:	df 93       	push	r29
   183fa:	ec 01       	movw	r28, r24
   183fc:	68 e6       	ldi	r22, 0x68	; 104
   183fe:	70 e0       	ldi	r23, 0x00	; 0
   18400:	85 e1       	ldi	r24, 0x15	; 21
   18402:	91 e1       	ldi	r25, 0x11	; 17
   18404:	0e 94 4f c4 	call	0x1889e	; 0x1889e <TwoWire::beginTransmission(int)>
   18408:	60 e0       	ldi	r22, 0x00	; 0
   1840a:	85 e1       	ldi	r24, 0x15	; 21
   1840c:	91 e1       	ldi	r25, 0x11	; 17
   1840e:	0e 94 d7 c3 	call	0x187ae	; 0x187ae <TwoWire::write(unsigned char)>
   18412:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
   18414:	1a e0       	ldi	r17, 0x0A	; 10
   18416:	82 2f       	mov	r24, r18
   18418:	61 2f       	mov	r22, r17
   1841a:	0e 94 46 d3 	call	0x1a68c	; 0x1a68c <__udivmodqi4>
   1841e:	68 2f       	mov	r22, r24
   18420:	66 0f       	add	r22, r22
   18422:	68 0f       	add	r22, r24
   18424:	66 0f       	add	r22, r22
   18426:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   18428:	85 e1       	ldi	r24, 0x15	; 21
   1842a:	91 e1       	ldi	r25, 0x11	; 17
   1842c:	0e 94 d7 c3 	call	0x187ae	; 0x187ae <TwoWire::write(unsigned char)>
   18430:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
   18432:	82 2f       	mov	r24, r18
   18434:	61 2f       	mov	r22, r17
   18436:	0e 94 46 d3 	call	0x1a68c	; 0x1a68c <__udivmodqi4>
   1843a:	68 2f       	mov	r22, r24
   1843c:	66 0f       	add	r22, r22
   1843e:	68 0f       	add	r22, r24
   18440:	66 0f       	add	r22, r22
   18442:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   18444:	85 e1       	ldi	r24, 0x15	; 21
   18446:	91 e1       	ldi	r25, 0x11	; 17
   18448:	0e 94 d7 c3 	call	0x187ae	; 0x187ae <TwoWire::write(unsigned char)>
   1844c:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
   1844e:	82 2f       	mov	r24, r18
   18450:	61 2f       	mov	r22, r17
   18452:	0e 94 46 d3 	call	0x1a68c	; 0x1a68c <__udivmodqi4>
   18456:	68 2f       	mov	r22, r24
   18458:	66 0f       	add	r22, r22
   1845a:	68 0f       	add	r22, r24
   1845c:	66 0f       	add	r22, r22
   1845e:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   18460:	85 e1       	ldi	r24, 0x15	; 21
   18462:	91 e1       	ldi	r25, 0x11	; 17
   18464:	0e 94 d7 c3 	call	0x187ae	; 0x187ae <TwoWire::write(unsigned char)>
   18468:	60 e0       	ldi	r22, 0x00	; 0
   1846a:	85 e1       	ldi	r24, 0x15	; 21
   1846c:	91 e1       	ldi	r25, 0x11	; 17
   1846e:	0e 94 d7 c3 	call	0x187ae	; 0x187ae <TwoWire::write(unsigned char)>
   18472:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
   18474:	82 2f       	mov	r24, r18
   18476:	61 2f       	mov	r22, r17
   18478:	0e 94 46 d3 	call	0x1a68c	; 0x1a68c <__udivmodqi4>
   1847c:	68 2f       	mov	r22, r24
   1847e:	66 0f       	add	r22, r22
   18480:	68 0f       	add	r22, r24
   18482:	66 0f       	add	r22, r22
   18484:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   18486:	85 e1       	ldi	r24, 0x15	; 21
   18488:	91 e1       	ldi	r25, 0x11	; 17
   1848a:	0e 94 d7 c3 	call	0x187ae	; 0x187ae <TwoWire::write(unsigned char)>
   1848e:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
   18490:	82 2f       	mov	r24, r18
   18492:	61 2f       	mov	r22, r17
   18494:	0e 94 46 d3 	call	0x1a68c	; 0x1a68c <__udivmodqi4>
   18498:	68 2f       	mov	r22, r24
   1849a:	66 0f       	add	r22, r22
   1849c:	68 0f       	add	r22, r24
   1849e:	66 0f       	add	r22, r22
   184a0:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   184a2:	85 e1       	ldi	r24, 0x15	; 21
   184a4:	91 e1       	ldi	r25, 0x11	; 17
   184a6:	0e 94 d7 c3 	call	0x187ae	; 0x187ae <TwoWire::write(unsigned char)>
   184aa:	28 81       	ld	r18, Y
bin2bcd():
   184ac:	82 2f       	mov	r24, r18
   184ae:	61 2f       	mov	r22, r17
   184b0:	0e 94 46 d3 	call	0x1a68c	; 0x1a68c <__udivmodqi4>
   184b4:	68 2f       	mov	r22, r24
   184b6:	66 0f       	add	r22, r22
   184b8:	68 0f       	add	r22, r24
   184ba:	66 0f       	add	r22, r22
   184bc:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   184be:	85 e1       	ldi	r24, 0x15	; 21
   184c0:	91 e1       	ldi	r25, 0x11	; 17
   184c2:	0e 94 d7 c3 	call	0x187ae	; 0x187ae <TwoWire::write(unsigned char)>
   184c6:	85 e1       	ldi	r24, 0x15	; 21
   184c8:	91 e1       	ldi	r25, 0x11	; 17
   184ca:	df 91       	pop	r29
   184cc:	cf 91       	pop	r28
   184ce:	1f 91       	pop	r17
   184d0:	0c 94 cd c4 	jmp	0x1899a	; 0x1899a <TwoWire::endTransmission()>

000184d4 <RTC_DS1307::isrunning()>:
_ZN10RTC_DS13079isrunningEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:245
  Wire.begin();
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
   184d4:	68 e6       	ldi	r22, 0x68	; 104
   184d6:	70 e0       	ldi	r23, 0x00	; 0
   184d8:	85 e1       	ldi	r24, 0x15	; 21
   184da:	91 e1       	ldi	r25, 0x11	; 17
   184dc:	0e 94 4f c4 	call	0x1889e	; 0x1889e <TwoWire::beginTransmission(int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  Wire._I2C_WRITE((byte)0);
   184e0:	60 e0       	ldi	r22, 0x00	; 0
   184e2:	85 e1       	ldi	r24, 0x15	; 21
   184e4:	91 e1       	ldi	r25, 0x11	; 17
   184e6:	0e 94 d7 c3 	call	0x187ae	; 0x187ae <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   184ea:	85 e1       	ldi	r24, 0x15	; 21
   184ec:	91 e1       	ldi	r25, 0x11	; 17
   184ee:	0e 94 cd c4 	call	0x1899a	; 0x1899a <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   184f2:	41 e0       	ldi	r20, 0x01	; 1
   184f4:	50 e0       	ldi	r21, 0x00	; 0
   184f6:	68 e6       	ldi	r22, 0x68	; 104
   184f8:	70 e0       	ldi	r23, 0x00	; 0
   184fa:	85 e1       	ldi	r24, 0x15	; 21
   184fc:	91 e1       	ldi	r25, 0x11	; 17
   184fe:	0e 94 ca c4 	call	0x18994	; 0x18994 <TwoWire::requestFrom(int, int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   18502:	85 e1       	ldi	r24, 0x15	; 21
   18504:	91 e1       	ldi	r25, 0x11	; 17
   18506:	0e 94 7e c3 	call	0x186fc	; 0x186fc <TwoWire::read()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   1850a:	80 58       	subi	r24, 0x80	; 128
   1850c:	87 fb       	bst	r24, 7
   1850e:	88 27       	eor	r24, r24
   18510:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   18512:	08 95       	ret

00018514 <RTC_DS1307::now()>:
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:268
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
}

DateTime RTC_DS1307::now() {
   18514:	cf 92       	push	r12
   18516:	df 92       	push	r13
   18518:	ff 92       	push	r15
   1851a:	0f 93       	push	r16
   1851c:	1f 93       	push	r17
   1851e:	cf 93       	push	r28
   18520:	df 93       	push	r29
   18522:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:269
  Wire.beginTransmission(DS1307_ADDRESS);
   18524:	68 e6       	ldi	r22, 0x68	; 104
   18526:	70 e0       	ldi	r23, 0x00	; 0
   18528:	85 e1       	ldi	r24, 0x15	; 21
   1852a:	91 e1       	ldi	r25, 0x11	; 17
   1852c:	0e 94 4f c4 	call	0x1889e	; 0x1889e <TwoWire::beginTransmission(int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
  Wire._I2C_WRITE((byte)0);	
   18530:	60 e0       	ldi	r22, 0x00	; 0
   18532:	85 e1       	ldi	r24, 0x15	; 21
   18534:	91 e1       	ldi	r25, 0x11	; 17
   18536:	0e 94 d7 c3 	call	0x187ae	; 0x187ae <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
   1853a:	85 e1       	ldi	r24, 0x15	; 21
   1853c:	91 e1       	ldi	r25, 0x11	; 17
   1853e:	0e 94 cd c4 	call	0x1899a	; 0x1899a <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
   18542:	47 e0       	ldi	r20, 0x07	; 7
   18544:	50 e0       	ldi	r21, 0x00	; 0
   18546:	68 e6       	ldi	r22, 0x68	; 104
   18548:	70 e0       	ldi	r23, 0x00	; 0
   1854a:	85 e1       	ldi	r24, 0x15	; 21
   1854c:	91 e1       	ldi	r25, 0x11	; 17
   1854e:	0e 94 ca c4 	call	0x18994	; 0x18994 <TwoWire::requestFrom(int, int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   18552:	85 e1       	ldi	r24, 0x15	; 21
   18554:	91 e1       	ldi	r25, 0x11	; 17
   18556:	0e 94 7e c3 	call	0x186fc	; 0x186fc <TwoWire::read()>
   1855a:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   1855c:	28 2f       	mov	r18, r24
   1855e:	30 e0       	ldi	r19, 0x00	; 0
   18560:	94 e0       	ldi	r25, 0x04	; 4
   18562:	35 95       	asr	r19
   18564:	27 95       	ror	r18
   18566:	9a 95       	dec	r25
   18568:	e1 f7       	brne	.-8      	; 0x18562 <RTC_DS1307::now()+0x4e>
   1856a:	92 2f       	mov	r25, r18
   1856c:	99 0f       	add	r25, r25
   1856e:	99 0f       	add	r25, r25
   18570:	c2 2f       	mov	r28, r18
   18572:	c9 1b       	sub	r28, r25
   18574:	cc 0f       	add	r28, r28
   18576:	c8 0f       	add	r28, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   18578:	85 e1       	ldi	r24, 0x15	; 21
   1857a:	91 e1       	ldi	r25, 0x11	; 17
   1857c:	0e 94 7e c3 	call	0x186fc	; 0x186fc <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   18580:	9c 01       	movw	r18, r24
   18582:	44 e0       	ldi	r20, 0x04	; 4
   18584:	35 95       	asr	r19
   18586:	27 95       	ror	r18
   18588:	4a 95       	dec	r20
   1858a:	e1 f7       	brne	.-8      	; 0x18584 <RTC_DS1307::now()+0x70>
   1858c:	2f 70       	andi	r18, 0x0F	; 15
   1858e:	33 27       	eor	r19, r19
   18590:	92 2f       	mov	r25, r18
   18592:	99 0f       	add	r25, r25
   18594:	99 0f       	add	r25, r25
   18596:	d2 2f       	mov	r29, r18
   18598:	d9 1b       	sub	r29, r25
   1859a:	dd 0f       	add	r29, r29
   1859c:	d8 0f       	add	r29, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   1859e:	85 e1       	ldi	r24, 0x15	; 21
   185a0:	91 e1       	ldi	r25, 0x11	; 17
   185a2:	0e 94 7e c3 	call	0x186fc	; 0x186fc <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   185a6:	9c 01       	movw	r18, r24
   185a8:	54 e0       	ldi	r21, 0x04	; 4
   185aa:	35 95       	asr	r19
   185ac:	27 95       	ror	r18
   185ae:	5a 95       	dec	r21
   185b0:	e1 f7       	brne	.-8      	; 0x185aa <RTC_DS1307::now()+0x96>
   185b2:	2f 70       	andi	r18, 0x0F	; 15
   185b4:	33 27       	eor	r19, r19
   185b6:	92 2f       	mov	r25, r18
   185b8:	99 0f       	add	r25, r25
   185ba:	99 0f       	add	r25, r25
   185bc:	12 2f       	mov	r17, r18
   185be:	19 1b       	sub	r17, r25
   185c0:	11 0f       	add	r17, r17
   185c2:	18 0f       	add	r17, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   185c4:	85 e1       	ldi	r24, 0x15	; 21
   185c6:	91 e1       	ldi	r25, 0x11	; 17
   185c8:	0e 94 7e c3 	call	0x186fc	; 0x186fc <TwoWire::read()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
   185cc:	85 e1       	ldi	r24, 0x15	; 21
   185ce:	91 e1       	ldi	r25, 0x11	; 17
   185d0:	0e 94 7e c3 	call	0x186fc	; 0x186fc <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   185d4:	9c 01       	movw	r18, r24
   185d6:	64 e0       	ldi	r22, 0x04	; 4
   185d8:	35 95       	asr	r19
   185da:	27 95       	ror	r18
   185dc:	6a 95       	dec	r22
   185de:	e1 f7       	brne	.-8      	; 0x185d8 <RTC_DS1307::now()+0xc4>
   185e0:	2f 70       	andi	r18, 0x0F	; 15
   185e2:	33 27       	eor	r19, r19
   185e4:	92 2f       	mov	r25, r18
   185e6:	99 0f       	add	r25, r25
   185e8:	99 0f       	add	r25, r25
   185ea:	02 2f       	mov	r16, r18
   185ec:	09 1b       	sub	r16, r25
   185ee:	00 0f       	add	r16, r16
   185f0:	08 0f       	add	r16, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   185f2:	85 e1       	ldi	r24, 0x15	; 21
   185f4:	91 e1       	ldi	r25, 0x11	; 17
   185f6:	0e 94 7e c3 	call	0x186fc	; 0x186fc <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   185fa:	9c 01       	movw	r18, r24
   185fc:	74 e0       	ldi	r23, 0x04	; 4
   185fe:	35 95       	asr	r19
   18600:	27 95       	ror	r18
   18602:	7a 95       	dec	r23
   18604:	e1 f7       	brne	.-8      	; 0x185fe <RTC_DS1307::now()+0xea>
   18606:	2f 70       	andi	r18, 0x0F	; 15
   18608:	33 27       	eor	r19, r19
   1860a:	92 2f       	mov	r25, r18
   1860c:	99 0f       	add	r25, r25
   1860e:	99 0f       	add	r25, r25
   18610:	f2 2e       	mov	r15, r18
   18612:	f9 1a       	sub	r15, r25
   18614:	ff 0c       	add	r15, r15
   18616:	f8 0e       	add	r15, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   18618:	85 e1       	ldi	r24, 0x15	; 21
   1861a:	91 e1       	ldi	r25, 0x11	; 17
   1861c:	0e 94 7e c3 	call	0x186fc	; 0x186fc <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   18620:	9c 01       	movw	r18, r24
   18622:	e4 e0       	ldi	r30, 0x04	; 4
   18624:	35 95       	asr	r19
   18626:	27 95       	ror	r18
   18628:	ea 95       	dec	r30
   1862a:	e1 f7       	brne	.-8      	; 0x18624 <RTC_DS1307::now()+0x110>
   1862c:	2f 70       	andi	r18, 0x0F	; 15
   1862e:	33 27       	eor	r19, r19
   18630:	92 2f       	mov	r25, r18
   18632:	99 0f       	add	r25, r25
   18634:	99 0f       	add	r25, r25
   18636:	29 1b       	sub	r18, r25
   18638:	22 0f       	add	r18, r18
   1863a:	82 0f       	add	r24, r18
_ZN8DateTimeC4Ejhhhhh():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   1863c:	f6 01       	movw	r30, r12
   1863e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   18640:	f1 82       	std	Z+1, r15	; 0x01
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   18642:	02 83       	std	Z+2, r16	; 0x02
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   18644:	13 83       	std	Z+3, r17	; 0x03
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   18646:	d4 83       	std	Z+4, r29	; 0x04
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   18648:	c5 83       	std	Z+5, r28	; 0x05
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:283
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
   1864a:	c6 01       	movw	r24, r12
   1864c:	df 91       	pop	r29
   1864e:	cf 91       	pop	r28
   18650:	1f 91       	pop	r17
   18652:	0f 91       	pop	r16
   18654:	ff 90       	pop	r15
   18656:	df 90       	pop	r13
   18658:	cf 90       	pop	r12
   1865a:	08 95       	ret

0001865c <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)>:
_ZN24Temperature_LM75_Derived30readIntegerTemperatureRegisterEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:51
  .default_temperature_frac_width = 8,
  .max_temperature_resolution     = 13,
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
   1865c:	0f 93       	push	r16
   1865e:	1f 93       	push	r17
   18660:	cf 93       	push	r28
   18662:	df 93       	push	r29
   18664:	ec 01       	movw	r28, r24
   18666:	16 2f       	mov	r17, r22
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
   18668:	6a 81       	ldd	r22, Y+2	; 0x02
   1866a:	88 81       	ld	r24, Y
   1866c:	99 81       	ldd	r25, Y+1	; 0x01
   1866e:	0e 94 45 c4 	call	0x1888a	; 0x1888a <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
   18672:	88 81       	ld	r24, Y
   18674:	99 81       	ldd	r25, Y+1	; 0x01
   18676:	dc 01       	movw	r26, r24
   18678:	ed 91       	ld	r30, X+
   1867a:	fc 91       	ld	r31, X
   1867c:	01 90       	ld	r0, Z+
   1867e:	f0 81       	ld	r31, Z
   18680:	e0 2d       	mov	r30, r0
   18682:	61 2f       	mov	r22, r17
   18684:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
   18686:	88 81       	ld	r24, Y
   18688:	99 81       	ldd	r25, Y+1	; 0x01
   1868a:	0e 94 cd c4 	call	0x1899a	; 0x1899a <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
   1868e:	88 81       	ld	r24, Y
   18690:	99 81       	ldd	r25, Y+1	; 0x01
   18692:	2b 81       	ldd	r18, Y+3	; 0x03
   18694:	42 e0       	ldi	r20, 0x02	; 2
   18696:	29 30       	cpi	r18, 0x09	; 9
   18698:	08 f4       	brcc	.+2      	; 0x1869c <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)+0x40>
   1869a:	41 e0       	ldi	r20, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58 (discriminator 4)
   1869c:	6a 81       	ldd	r22, Y+2	; 0x02
   1869e:	0e 94 c7 c4 	call	0x1898e	; 0x1898e <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61 (discriminator 4)

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
   186a2:	88 81       	ld	r24, Y
   186a4:	99 81       	ldd	r25, Y+1	; 0x01
   186a6:	dc 01       	movw	r26, r24
   186a8:	ed 91       	ld	r30, X+
   186aa:	fc 91       	ld	r31, X
   186ac:	02 84       	ldd	r0, Z+10	; 0x0a
   186ae:	f3 85       	ldd	r31, Z+11	; 0x0b
   186b0:	e0 2d       	mov	r30, r0
   186b2:	19 95       	eicall
   186b4:	00 e0       	ldi	r16, 0x00	; 0
   186b6:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64 (discriminator 4)
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
   186b8:	8b 81       	ldd	r24, Y+3	; 0x03
   186ba:	89 30       	cpi	r24, 0x09	; 9
   186bc:	58 f0       	brcs	.+22     	; 0x186d4 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)+0x78>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
   186be:	88 81       	ld	r24, Y
   186c0:	99 81       	ldd	r25, Y+1	; 0x01
   186c2:	dc 01       	movw	r26, r24
   186c4:	ed 91       	ld	r30, X+
   186c6:	fc 91       	ld	r31, X
   186c8:	02 84       	ldd	r0, Z+10	; 0x0a
   186ca:	f3 85       	ldd	r31, Z+11	; 0x0b
   186cc:	e0 2d       	mov	r30, r0
   186ce:	19 95       	eicall
   186d0:	08 2b       	or	r16, r24
   186d2:	19 2b       	or	r17, r25
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
   186d4:	88 81       	ld	r24, Y
   186d6:	99 81       	ldd	r25, Y+1	; 0x01
   186d8:	0e 94 cd c4 	call	0x1899a	; 0x1899a <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
   186dc:	8c 81       	ldd	r24, Y+4	; 0x04
   186de:	9d 81       	ldd	r25, Y+5	; 0x05
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:76

  // Read the raw memory as a 16-bit signed integer and return.
  return *(int16_t *)(&t);
}
   186e0:	80 23       	and	r24, r16
   186e2:	91 23       	and	r25, r17
   186e4:	df 91       	pop	r29
   186e6:	cf 91       	pop	r28
   186e8:	1f 91       	pop	r17
   186ea:	0f 91       	pop	r16
   186ec:	08 95       	ret

000186ee <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:326

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
   186ee:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <TwoWire::rxBufferLength>
   186f2:	90 91 4a 11 	lds	r25, 0x114A	; 0x80114a <TwoWire::rxBufferIndex>
   186f6:	89 1b       	sub	r24, r25
   186f8:	99 0b       	sbc	r25, r25
   186fa:	08 95       	ret

000186fc <TwoWire::read()>:
_ZN7TwoWire4readEv():
   186fc:	90 91 4a 11 	lds	r25, 0x114A	; 0x80114a <TwoWire::rxBufferIndex>
   18700:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <TwoWire::rxBufferLength>
   18704:	2f ef       	ldi	r18, 0xFF	; 255
   18706:	3f ef       	ldi	r19, 0xFF	; 255
   18708:	98 17       	cp	r25, r24
   1870a:	48 f4       	brcc	.+18     	; 0x1871e <TwoWire::read()+0x22>
   1870c:	e9 2f       	mov	r30, r25
   1870e:	f0 e0       	ldi	r31, 0x00	; 0
   18710:	e5 5b       	subi	r30, 0xB5	; 181
   18712:	fe 4e       	sbci	r31, 0xEE	; 238
   18714:	20 81       	ld	r18, Z
   18716:	30 e0       	ldi	r19, 0x00	; 0
   18718:	9f 5f       	subi	r25, 0xFF	; 255
   1871a:	90 93 4a 11 	sts	0x114A, r25	; 0x80114a <TwoWire::rxBufferIndex>
   1871e:	c9 01       	movw	r24, r18
   18720:	08 95       	ret

00018722 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
   18722:	e0 91 4a 11 	lds	r30, 0x114A	; 0x80114a <TwoWire::rxBufferIndex>
   18726:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <TwoWire::rxBufferLength>
   1872a:	e8 17       	cp	r30, r24
   1872c:	30 f4       	brcc	.+12     	; 0x1873a <TwoWire::peek()+0x18>
   1872e:	f0 e0       	ldi	r31, 0x00	; 0
   18730:	e5 5b       	subi	r30, 0xB5	; 181
   18732:	fe 4e       	sbci	r31, 0xEE	; 238
   18734:	80 81       	ld	r24, Z
   18736:	90 e0       	ldi	r25, 0x00	; 0
   18738:	08 95       	ret
   1873a:	8f ef       	ldi	r24, 0xFF	; 255
   1873c:	9f ef       	ldi	r25, 0xFF	; 255
   1873e:	08 95       	ret

00018740 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
   18740:	08 95       	ret

00018742 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
   18742:	cf 93       	push	r28
   18744:	df 93       	push	r29
   18746:	ec 01       	movw	r28, r24
   18748:	e0 91 21 11 	lds	r30, 0x1121	; 0x801121 <TwoWire::user_onReceive>
   1874c:	f0 91 22 11 	lds	r31, 0x1122	; 0x801122 <TwoWire::user_onReceive+0x1>
   18750:	30 97       	sbiw	r30, 0x00	; 0
   18752:	f1 f0       	breq	.+60     	; 0x18790 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
   18754:	90 91 4a 11 	lds	r25, 0x114A	; 0x80114a <TwoWire::rxBufferIndex>
   18758:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <TwoWire::rxBufferLength>
   1875c:	98 17       	cp	r25, r24
   1875e:	c0 f0       	brcs	.+48     	; 0x18790 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
   18760:	90 e0       	ldi	r25, 0x00	; 0
   18762:	29 2f       	mov	r18, r25
   18764:	30 e0       	ldi	r19, 0x00	; 0
   18766:	26 17       	cp	r18, r22
   18768:	37 07       	cpc	r19, r23
   1876a:	54 f4       	brge	.+20     	; 0x18780 <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
   1876c:	de 01       	movw	r26, r28
   1876e:	a2 0f       	add	r26, r18
   18770:	b3 1f       	adc	r27, r19
   18772:	4c 91       	ld	r20, X
   18774:	25 5b       	subi	r18, 0xB5	; 181
   18776:	3e 4e       	sbci	r19, 0xEE	; 238
   18778:	d9 01       	movw	r26, r18
   1877a:	4c 93       	st	X, r20
   1877c:	9f 5f       	subi	r25, 0xFF	; 255
   1877e:	f1 cf       	rjmp	.-30     	; 0x18762 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
   18780:	10 92 4a 11 	sts	0x114A, r1	; 0x80114a <TwoWire::rxBufferIndex>
   18784:	60 93 49 11 	sts	0x1149, r22	; 0x801149 <TwoWire::rxBufferLength>
   18788:	cb 01       	movw	r24, r22
   1878a:	df 91       	pop	r29
   1878c:	cf 91       	pop	r28
   1878e:	19 94       	eijmp
   18790:	df 91       	pop	r29
   18792:	cf 91       	pop	r28
   18794:	08 95       	ret

00018796 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
   18796:	e0 91 23 11 	lds	r30, 0x1123	; 0x801123 <TwoWire::user_onRequest>
   1879a:	f0 91 24 11 	lds	r31, 0x1124	; 0x801124 <TwoWire::user_onRequest+0x1>
   1879e:	30 97       	sbiw	r30, 0x00	; 0
   187a0:	29 f0       	breq	.+10     	; 0x187ac <TwoWire::onRequestService()+0x16>
   187a2:	10 92 27 11 	sts	0x1127, r1	; 0x801127 <TwoWire::txBufferIndex>
   187a6:	10 92 26 11 	sts	0x1126, r1	; 0x801126 <TwoWire::txBufferLength>
   187aa:	19 94       	eijmp
   187ac:	08 95       	ret

000187ae <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
   187ae:	cf 93       	push	r28
   187b0:	df 93       	push	r29
   187b2:	1f 92       	push	r1
   187b4:	cd b7       	in	r28, 0x3d	; 61
   187b6:	de b7       	in	r29, 0x3e	; 62
   187b8:	69 83       	std	Y+1, r22	; 0x01
   187ba:	20 91 25 11 	lds	r18, 0x1125	; 0x801125 <TwoWire::transmitting>
   187be:	22 23       	and	r18, r18
   187c0:	f9 f0       	breq	.+62     	; 0x18800 <TwoWire::write(unsigned char)+0x52>
   187c2:	20 91 26 11 	lds	r18, 0x1126	; 0x801126 <TwoWire::txBufferLength>
   187c6:	20 32       	cpi	r18, 0x20	; 32
   187c8:	58 f0       	brcs	.+22     	; 0x187e0 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
   187ca:	21 e0       	ldi	r18, 0x01	; 1
   187cc:	30 e0       	ldi	r19, 0x00	; 0
   187ce:	fc 01       	movw	r30, r24
   187d0:	33 83       	std	Z+3, r19	; 0x03
   187d2:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
   187d4:	90 e0       	ldi	r25, 0x00	; 0
   187d6:	80 e0       	ldi	r24, 0x00	; 0
   187d8:	0f 90       	pop	r0
   187da:	df 91       	pop	r29
   187dc:	cf 91       	pop	r28
   187de:	08 95       	ret
   187e0:	80 91 27 11 	lds	r24, 0x1127	; 0x801127 <TwoWire::txBufferIndex>
   187e4:	e8 2f       	mov	r30, r24
   187e6:	f0 e0       	ldi	r31, 0x00	; 0
   187e8:	e8 5d       	subi	r30, 0xD8	; 216
   187ea:	fe 4e       	sbci	r31, 0xEE	; 238
   187ec:	99 81       	ldd	r25, Y+1	; 0x01
   187ee:	90 83       	st	Z, r25
   187f0:	8f 5f       	subi	r24, 0xFF	; 255
   187f2:	80 93 27 11 	sts	0x1127, r24	; 0x801127 <TwoWire::txBufferIndex>
   187f6:	80 93 26 11 	sts	0x1126, r24	; 0x801126 <TwoWire::txBufferLength>
   187fa:	81 e0       	ldi	r24, 0x01	; 1
   187fc:	90 e0       	ldi	r25, 0x00	; 0
   187fe:	ec cf       	rjmp	.-40     	; 0x187d8 <TwoWire::write(unsigned char)+0x2a>
   18800:	61 e0       	ldi	r22, 0x01	; 1
   18802:	ce 01       	movw	r24, r28
   18804:	01 96       	adiw	r24, 0x01	; 1
   18806:	0e 94 9e c5 	call	0x18b3c	; 0x18b3c <twi_transmit>
   1880a:	f7 cf       	rjmp	.-18     	; 0x187fa <TwoWire::write(unsigned char)+0x4c>

0001880c <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
   1880c:	cf 92       	push	r12
   1880e:	df 92       	push	r13
   18810:	ef 92       	push	r14
   18812:	ff 92       	push	r15
   18814:	0f 93       	push	r16
   18816:	1f 93       	push	r17
   18818:	cf 93       	push	r28
   1881a:	df 93       	push	r29
   1881c:	7c 01       	movw	r14, r24
   1881e:	cb 01       	movw	r24, r22
   18820:	8a 01       	movw	r16, r20
   18822:	20 91 25 11 	lds	r18, 0x1125	; 0x801125 <TwoWire::transmitting>
   18826:	22 23       	and	r18, r18
   18828:	89 f0       	breq	.+34     	; 0x1884c <TwoWire::write(unsigned char const*, unsigned int)+0x40>
   1882a:	eb 01       	movw	r28, r22
   1882c:	6b 01       	movw	r12, r22
   1882e:	c4 0e       	add	r12, r20
   18830:	d5 1e       	adc	r13, r21
   18832:	cc 15       	cp	r28, r12
   18834:	dd 05       	cpc	r29, r13
   18836:	69 f0       	breq	.+26     	; 0x18852 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
   18838:	69 91       	ld	r22, Y+
   1883a:	d7 01       	movw	r26, r14
   1883c:	ed 91       	ld	r30, X+
   1883e:	fc 91       	ld	r31, X
   18840:	01 90       	ld	r0, Z+
   18842:	f0 81       	ld	r31, Z
   18844:	e0 2d       	mov	r30, r0
   18846:	c7 01       	movw	r24, r14
   18848:	19 95       	eicall
   1884a:	f3 cf       	rjmp	.-26     	; 0x18832 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
   1884c:	64 2f       	mov	r22, r20
   1884e:	0e 94 9e c5 	call	0x18b3c	; 0x18b3c <twi_transmit>
   18852:	c8 01       	movw	r24, r16
   18854:	df 91       	pop	r29
   18856:	cf 91       	pop	r28
   18858:	1f 91       	pop	r17
   1885a:	0f 91       	pop	r16
   1885c:	ff 90       	pop	r15
   1885e:	ef 90       	pop	r14
   18860:	df 90       	pop	r13
   18862:	cf 90       	pop	r12
   18864:	08 95       	ret

00018866 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
   18866:	10 92 4a 11 	sts	0x114A, r1	; 0x80114a <TwoWire::rxBufferIndex>
   1886a:	10 92 49 11 	sts	0x1149, r1	; 0x801149 <TwoWire::rxBufferLength>
   1886e:	10 92 27 11 	sts	0x1127, r1	; 0x801127 <TwoWire::txBufferIndex>
   18872:	10 92 26 11 	sts	0x1126, r1	; 0x801126 <TwoWire::txBufferLength>
   18876:	0e 94 e1 c4 	call	0x189c2	; 0x189c2 <twi_init>
   1887a:	8b ec       	ldi	r24, 0xCB	; 203
   1887c:	93 ec       	ldi	r25, 0xC3	; 195
   1887e:	0e 94 ca c5 	call	0x18b94	; 0x18b94 <twi_attachSlaveTxEvent>
   18882:	81 ea       	ldi	r24, 0xA1	; 161
   18884:	93 ec       	ldi	r25, 0xC3	; 195
   18886:	0c 94 c5 c5 	jmp	0x18b8a	; 0x18b8a <twi_attachSlaveRxEvent>

0001888a <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
   1888a:	81 e0       	ldi	r24, 0x01	; 1
   1888c:	80 93 25 11 	sts	0x1125, r24	; 0x801125 <TwoWire::transmitting>
   18890:	60 93 48 11 	sts	0x1148, r22	; 0x801148 <TwoWire::txAddress>
   18894:	10 92 27 11 	sts	0x1127, r1	; 0x801127 <TwoWire::txBufferIndex>
   18898:	10 92 26 11 	sts	0x1126, r1	; 0x801126 <TwoWire::txBufferLength>
   1889c:	08 95       	ret

0001889e <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
   1889e:	0c 94 45 c4 	jmp	0x1888a	; 0x1888a <TwoWire::beginTransmission(unsigned char)>

000188a2 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
   188a2:	0f 93       	push	r16
   188a4:	06 2f       	mov	r16, r22
   188a6:	21 e0       	ldi	r18, 0x01	; 1
   188a8:	40 91 26 11 	lds	r20, 0x1126	; 0x801126 <TwoWire::txBufferLength>
   188ac:	68 e2       	ldi	r22, 0x28	; 40
   188ae:	71 e1       	ldi	r23, 0x11	; 17
   188b0:	80 91 48 11 	lds	r24, 0x1148	; 0x801148 <TwoWire::txAddress>
   188b4:	0e 94 47 c5 	call	0x18a8e	; 0x18a8e <twi_writeTo>
   188b8:	10 92 27 11 	sts	0x1127, r1	; 0x801127 <TwoWire::txBufferIndex>
   188bc:	10 92 26 11 	sts	0x1126, r1	; 0x801126 <TwoWire::txBufferLength>
   188c0:	10 92 25 11 	sts	0x1125, r1	; 0x801125 <TwoWire::transmitting>
   188c4:	0f 91       	pop	r16
   188c6:	08 95       	ret

000188c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
   188c8:	4f 92       	push	r4
   188ca:	5f 92       	push	r5
   188cc:	6f 92       	push	r6
   188ce:	7f 92       	push	r7
   188d0:	af 92       	push	r10
   188d2:	bf 92       	push	r11
   188d4:	cf 92       	push	r12
   188d6:	ef 92       	push	r14
   188d8:	ff 92       	push	r15
   188da:	0f 93       	push	r16
   188dc:	1f 93       	push	r17
   188de:	cf 93       	push	r28
   188e0:	df 93       	push	r29
   188e2:	5c 01       	movw	r10, r24
   188e4:	f6 2e       	mov	r15, r22
   188e6:	d4 2f       	mov	r29, r20
   188e8:	28 01       	movw	r4, r16
   188ea:	39 01       	movw	r6, r18
   188ec:	ee 20       	and	r14, r14
   188ee:	19 f1       	breq	.+70     	; 0x18936 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
   188f0:	0e 94 45 c4 	call	0x1888a	; 0x1888a <TwoWire::beginTransmission(unsigned char)>
   188f4:	ce 2d       	mov	r28, r14
   188f6:	c4 30       	cpi	r28, 0x04	; 4
   188f8:	08 f0       	brcs	.+2      	; 0x188fc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
   188fa:	c3 e0       	ldi	r28, 0x03	; 3
   188fc:	c1 50       	subi	r28, 0x01	; 1
   188fe:	b8 f0       	brcs	.+46     	; 0x1892e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
   18900:	28 e0       	ldi	r18, 0x08	; 8
   18902:	c2 9f       	mul	r28, r18
   18904:	c0 01       	movw	r24, r0
   18906:	11 24       	eor	r1, r1
   18908:	a3 01       	movw	r20, r6
   1890a:	92 01       	movw	r18, r4
   1890c:	04 c0       	rjmp	.+8      	; 0x18916 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
   1890e:	56 95       	lsr	r21
   18910:	47 95       	ror	r20
   18912:	37 95       	ror	r19
   18914:	27 95       	ror	r18
   18916:	8a 95       	dec	r24
   18918:	d2 f7       	brpl	.-12     	; 0x1890e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
   1891a:	b9 01       	movw	r22, r18
   1891c:	d5 01       	movw	r26, r10
   1891e:	ed 91       	ld	r30, X+
   18920:	fc 91       	ld	r31, X
   18922:	01 90       	ld	r0, Z+
   18924:	f0 81       	ld	r31, Z
   18926:	e0 2d       	mov	r30, r0
   18928:	c5 01       	movw	r24, r10
   1892a:	19 95       	eicall
   1892c:	e7 cf       	rjmp	.-50     	; 0x188fc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
   1892e:	60 e0       	ldi	r22, 0x00	; 0
   18930:	c5 01       	movw	r24, r10
   18932:	0e 94 51 c4 	call	0x188a2	; 0x188a2 <TwoWire::endTransmission(unsigned char)>
   18936:	4d 2f       	mov	r20, r29
   18938:	d1 32       	cpi	r29, 0x21	; 33
   1893a:	08 f0       	brcs	.+2      	; 0x1893e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
   1893c:	40 e2       	ldi	r20, 0x20	; 32
   1893e:	2c 2d       	mov	r18, r12
   18940:	6b e4       	ldi	r22, 0x4B	; 75
   18942:	71 e1       	ldi	r23, 0x11	; 17
   18944:	8f 2d       	mov	r24, r15
   18946:	0e 94 ff c4 	call	0x189fe	; 0x189fe <twi_readFrom>
   1894a:	10 92 4a 11 	sts	0x114A, r1	; 0x80114a <TwoWire::rxBufferIndex>
   1894e:	80 93 49 11 	sts	0x1149, r24	; 0x801149 <TwoWire::rxBufferLength>
   18952:	df 91       	pop	r29
   18954:	cf 91       	pop	r28
   18956:	1f 91       	pop	r17
   18958:	0f 91       	pop	r16
   1895a:	ff 90       	pop	r15
   1895c:	ef 90       	pop	r14
   1895e:	cf 90       	pop	r12
   18960:	bf 90       	pop	r11
   18962:	af 90       	pop	r10
   18964:	7f 90       	pop	r7
   18966:	6f 90       	pop	r6
   18968:	5f 90       	pop	r5
   1896a:	4f 90       	pop	r4
   1896c:	08 95       	ret

0001896e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
   1896e:	cf 92       	push	r12
   18970:	ef 92       	push	r14
   18972:	0f 93       	push	r16
   18974:	1f 93       	push	r17
   18976:	c2 2e       	mov	r12, r18
   18978:	e1 2c       	mov	r14, r1
   1897a:	00 e0       	ldi	r16, 0x00	; 0
   1897c:	10 e0       	ldi	r17, 0x00	; 0
   1897e:	98 01       	movw	r18, r16
   18980:	0e 94 64 c4 	call	0x188c8	; 0x188c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
   18984:	1f 91       	pop	r17
   18986:	0f 91       	pop	r16
   18988:	ef 90       	pop	r14
   1898a:	cf 90       	pop	r12
   1898c:	08 95       	ret

0001898e <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
   1898e:	21 e0       	ldi	r18, 0x01	; 1
   18990:	0c 94 b7 c4 	jmp	0x1896e	; 0x1896e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00018994 <TwoWire::requestFrom(int, int)>:
_ZN7TwoWire11requestFromEii():
   18994:	21 e0       	ldi	r18, 0x01	; 1
   18996:	0c 94 b7 c4 	jmp	0x1896e	; 0x1896e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

0001899a <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
   1899a:	61 e0       	ldi	r22, 0x01	; 1
   1899c:	0c 94 51 c4 	jmp	0x188a2	; 0x188a2 <TwoWire::endTransmission(unsigned char)>

000189a0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   189a0:	e5 e1       	ldi	r30, 0x15	; 21
   189a2:	f1 e1       	ldi	r31, 0x11	; 17
   189a4:	13 82       	std	Z+3, r1	; 0x03
   189a6:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   189a8:	88 ee       	ldi	r24, 0xE8	; 232
   189aa:	93 e0       	ldi	r25, 0x03	; 3
   189ac:	a0 e0       	ldi	r26, 0x00	; 0
   189ae:	b0 e0       	ldi	r27, 0x00	; 0
   189b0:	84 83       	std	Z+4, r24	; 0x04
   189b2:	95 83       	std	Z+5, r25	; 0x05
   189b4:	a6 83       	std	Z+6, r26	; 0x06
   189b6:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:49
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
   189b8:	8f e8       	ldi	r24, 0x8F	; 143
   189ba:	98 e0       	ldi	r25, 0x08	; 8
   189bc:	91 83       	std	Z+1, r25	; 0x01
   189be:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:330
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
   189c0:	08 95       	ret

000189c2 <twi_init>:
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   189c2:	10 92 d8 11 	sts	0x11D8, r1	; 0x8011d8 <twi_state>
   189c6:	81 e0       	ldi	r24, 0x01	; 1
   189c8:	80 93 d6 11 	sts	0x11D6, r24	; 0x8011d6 <twi_sendStop>
   189cc:	10 92 d5 11 	sts	0x11D5, r1	; 0x8011d5 <twi_inRepStart>
   189d0:	61 e0       	ldi	r22, 0x01	; 1
   189d2:	83 e1       	ldi	r24, 0x13	; 19
   189d4:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
   189d8:	61 e0       	ldi	r22, 0x01	; 1
   189da:	82 e1       	ldi	r24, 0x12	; 18
   189dc:	0e 94 7d cd 	call	0x19afa	; 0x19afa <digitalWrite>
   189e0:	e9 eb       	ldi	r30, 0xB9	; 185
   189e2:	f0 e0       	ldi	r31, 0x00	; 0
   189e4:	80 81       	ld	r24, Z
   189e6:	8e 7f       	andi	r24, 0xFE	; 254
   189e8:	80 83       	st	Z, r24
   189ea:	80 81       	ld	r24, Z
   189ec:	8d 7f       	andi	r24, 0xFD	; 253
   189ee:	80 83       	st	Z, r24
   189f0:	88 e4       	ldi	r24, 0x48	; 72
   189f2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
   189f6:	85 e4       	ldi	r24, 0x45	; 69
   189f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   189fc:	08 95       	ret

000189fe <twi_readFrom>:
twi_readFrom():
   189fe:	41 32       	cpi	r20, 0x21	; 33
   18a00:	08 f0       	brcs	.+2      	; 0x18a04 <twi_readFrom+0x6>
   18a02:	43 c0       	rjmp	.+134    	; 0x18a8a <twi_readFrom+0x8c>
   18a04:	90 91 d8 11 	lds	r25, 0x11D8	; 0x8011d8 <twi_state>
   18a08:	91 11       	cpse	r25, r1
   18a0a:	fc cf       	rjmp	.-8      	; 0x18a04 <twi_readFrom+0x6>
   18a0c:	91 e0       	ldi	r25, 0x01	; 1
   18a0e:	90 93 d8 11 	sts	0x11D8, r25	; 0x8011d8 <twi_state>
   18a12:	20 93 d6 11 	sts	0x11D6, r18	; 0x8011d6 <twi_sendStop>
   18a16:	2f ef       	ldi	r18, 0xFF	; 255
   18a18:	20 93 6b 11 	sts	0x116B, r18	; 0x80116b <twi_error>
   18a1c:	10 92 b0 11 	sts	0x11B0, r1	; 0x8011b0 <twi_masterBufferIndex>
   18a20:	24 0f       	add	r18, r20
   18a22:	20 93 af 11 	sts	0x11AF, r18	; 0x8011af <twi_masterBufferLength>
   18a26:	90 93 d7 11 	sts	0x11D7, r25	; 0x8011d7 <twi_slarw>
   18a2a:	90 91 d7 11 	lds	r25, 0x11D7	; 0x8011d7 <twi_slarw>
   18a2e:	88 0f       	add	r24, r24
   18a30:	89 2b       	or	r24, r25
   18a32:	80 93 d7 11 	sts	0x11D7, r24	; 0x8011d7 <twi_slarw>
   18a36:	80 91 d5 11 	lds	r24, 0x11D5	; 0x8011d5 <twi_inRepStart>
   18a3a:	81 30       	cpi	r24, 0x01	; 1
   18a3c:	09 f5       	brne	.+66     	; 0x18a80 <twi_readFrom+0x82>
   18a3e:	10 92 d5 11 	sts	0x11D5, r1	; 0x8011d5 <twi_inRepStart>
   18a42:	80 91 d7 11 	lds	r24, 0x11D7	; 0x8011d7 <twi_slarw>
   18a46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   18a4a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   18a4e:	83 fd       	sbrc	r24, 3
   18a50:	f8 cf       	rjmp	.-16     	; 0x18a42 <twi_readFrom+0x44>
   18a52:	85 ec       	ldi	r24, 0xC5	; 197
   18a54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   18a58:	80 91 d8 11 	lds	r24, 0x11D8	; 0x8011d8 <twi_state>
   18a5c:	81 30       	cpi	r24, 0x01	; 1
   18a5e:	e1 f3       	breq	.-8      	; 0x18a58 <twi_readFrom+0x5a>
   18a60:	80 91 b0 11 	lds	r24, 0x11B0	; 0x8011b0 <twi_masterBufferIndex>
   18a64:	84 17       	cp	r24, r20
   18a66:	10 f4       	brcc	.+4      	; 0x18a6c <twi_readFrom+0x6e>
   18a68:	40 91 b0 11 	lds	r20, 0x11B0	; 0x8011b0 <twi_masterBufferIndex>
   18a6c:	a1 eb       	ldi	r26, 0xB1	; 177
   18a6e:	b1 e1       	ldi	r27, 0x11	; 17
   18a70:	96 2f       	mov	r25, r22
   18a72:	fb 01       	movw	r30, r22
   18a74:	8e 2f       	mov	r24, r30
   18a76:	89 1b       	sub	r24, r25
   18a78:	84 17       	cp	r24, r20
   18a7a:	20 f0       	brcs	.+8      	; 0x18a84 <twi_readFrom+0x86>
   18a7c:	84 2f       	mov	r24, r20
   18a7e:	08 95       	ret
   18a80:	85 ee       	ldi	r24, 0xE5	; 229
   18a82:	e8 cf       	rjmp	.-48     	; 0x18a54 <twi_readFrom+0x56>
   18a84:	8d 91       	ld	r24, X+
   18a86:	81 93       	st	Z+, r24
   18a88:	f5 cf       	rjmp	.-22     	; 0x18a74 <twi_readFrom+0x76>
   18a8a:	40 e0       	ldi	r20, 0x00	; 0
   18a8c:	f7 cf       	rjmp	.-18     	; 0x18a7c <twi_readFrom+0x7e>

00018a8e <twi_writeTo>:
twi_writeTo():
   18a8e:	0f 93       	push	r16
   18a90:	41 32       	cpi	r20, 0x21	; 33
   18a92:	08 f0       	brcs	.+2      	; 0x18a96 <twi_writeTo+0x8>
   18a94:	4b c0       	rjmp	.+150    	; 0x18b2c <twi_writeTo+0x9e>
   18a96:	90 91 d8 11 	lds	r25, 0x11D8	; 0x8011d8 <twi_state>
   18a9a:	91 11       	cpse	r25, r1
   18a9c:	fc cf       	rjmp	.-8      	; 0x18a96 <twi_writeTo+0x8>
   18a9e:	92 e0       	ldi	r25, 0x02	; 2
   18aa0:	90 93 d8 11 	sts	0x11D8, r25	; 0x8011d8 <twi_state>
   18aa4:	00 93 d6 11 	sts	0x11D6, r16	; 0x8011d6 <twi_sendStop>
   18aa8:	9f ef       	ldi	r25, 0xFF	; 255
   18aaa:	90 93 6b 11 	sts	0x116B, r25	; 0x80116b <twi_error>
   18aae:	10 92 b0 11 	sts	0x11B0, r1	; 0x8011b0 <twi_masterBufferIndex>
   18ab2:	40 93 af 11 	sts	0x11AF, r20	; 0x8011af <twi_masterBufferLength>
   18ab6:	36 2f       	mov	r19, r22
   18ab8:	a1 eb       	ldi	r26, 0xB1	; 177
   18aba:	b1 e1       	ldi	r27, 0x11	; 17
   18abc:	fb 01       	movw	r30, r22
   18abe:	9e 2f       	mov	r25, r30
   18ac0:	93 1b       	sub	r25, r19
   18ac2:	94 17       	cp	r25, r20
   18ac4:	70 f1       	brcs	.+92     	; 0x18b22 <twi_writeTo+0x94>
   18ac6:	10 92 d7 11 	sts	0x11D7, r1	; 0x8011d7 <twi_slarw>
   18aca:	90 91 d7 11 	lds	r25, 0x11D7	; 0x8011d7 <twi_slarw>
   18ace:	88 0f       	add	r24, r24
   18ad0:	89 2b       	or	r24, r25
   18ad2:	80 93 d7 11 	sts	0x11D7, r24	; 0x8011d7 <twi_slarw>
   18ad6:	80 91 d5 11 	lds	r24, 0x11D5	; 0x8011d5 <twi_inRepStart>
   18ada:	81 30       	cpi	r24, 0x01	; 1
   18adc:	29 f5       	brne	.+74     	; 0x18b28 <twi_writeTo+0x9a>
   18ade:	10 92 d5 11 	sts	0x11D5, r1	; 0x8011d5 <twi_inRepStart>
   18ae2:	80 91 d7 11 	lds	r24, 0x11D7	; 0x8011d7 <twi_slarw>
   18ae6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   18aea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   18aee:	83 fd       	sbrc	r24, 3
   18af0:	f8 cf       	rjmp	.-16     	; 0x18ae2 <twi_writeTo+0x54>
   18af2:	85 ec       	ldi	r24, 0xC5	; 197
   18af4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   18af8:	22 23       	and	r18, r18
   18afa:	21 f0       	breq	.+8      	; 0x18b04 <twi_writeTo+0x76>
   18afc:	80 91 d8 11 	lds	r24, 0x11D8	; 0x8011d8 <twi_state>
   18b00:	82 30       	cpi	r24, 0x02	; 2
   18b02:	d1 f3       	breq	.-12     	; 0x18af8 <twi_writeTo+0x6a>
   18b04:	80 91 6b 11 	lds	r24, 0x116B	; 0x80116b <twi_error>
   18b08:	8f 3f       	cpi	r24, 0xFF	; 255
   18b0a:	91 f0       	breq	.+36     	; 0x18b30 <twi_writeTo+0xa2>
   18b0c:	80 91 6b 11 	lds	r24, 0x116B	; 0x80116b <twi_error>
   18b10:	80 32       	cpi	r24, 0x20	; 32
   18b12:	81 f0       	breq	.+32     	; 0x18b34 <twi_writeTo+0xa6>
   18b14:	80 91 6b 11 	lds	r24, 0x116B	; 0x80116b <twi_error>
   18b18:	80 33       	cpi	r24, 0x30	; 48
   18b1a:	71 f0       	breq	.+28     	; 0x18b38 <twi_writeTo+0xaa>
   18b1c:	84 e0       	ldi	r24, 0x04	; 4
   18b1e:	0f 91       	pop	r16
   18b20:	08 95       	ret
   18b22:	91 91       	ld	r25, Z+
   18b24:	9d 93       	st	X+, r25
   18b26:	cb cf       	rjmp	.-106    	; 0x18abe <twi_writeTo+0x30>
   18b28:	85 ee       	ldi	r24, 0xE5	; 229
   18b2a:	e4 cf       	rjmp	.-56     	; 0x18af4 <twi_writeTo+0x66>
   18b2c:	81 e0       	ldi	r24, 0x01	; 1
   18b2e:	f7 cf       	rjmp	.-18     	; 0x18b1e <twi_writeTo+0x90>
   18b30:	80 e0       	ldi	r24, 0x00	; 0
   18b32:	f5 cf       	rjmp	.-22     	; 0x18b1e <twi_writeTo+0x90>
   18b34:	82 e0       	ldi	r24, 0x02	; 2
   18b36:	f3 cf       	rjmp	.-26     	; 0x18b1e <twi_writeTo+0x90>
   18b38:	83 e0       	ldi	r24, 0x03	; 3
   18b3a:	f1 cf       	rjmp	.-30     	; 0x18b1e <twi_writeTo+0x90>

00018b3c <twi_transmit>:
twi_transmit():
   18b3c:	20 91 8d 11 	lds	r18, 0x118D	; 0x80118d <twi_txBufferLength>
   18b40:	26 0f       	add	r18, r22
   18b42:	33 27       	eor	r19, r19
   18b44:	33 1f       	adc	r19, r19
   18b46:	21 32       	cpi	r18, 0x21	; 33
   18b48:	31 05       	cpc	r19, r1
   18b4a:	ec f4       	brge	.+58     	; 0x18b86 <twi_transmit+0x4a>
   18b4c:	20 91 d8 11 	lds	r18, 0x11D8	; 0x8011d8 <twi_state>
   18b50:	fc 01       	movw	r30, r24
   18b52:	90 e0       	ldi	r25, 0x00	; 0
   18b54:	80 e0       	ldi	r24, 0x00	; 0
   18b56:	24 30       	cpi	r18, 0x04	; 4
   18b58:	69 f0       	breq	.+26     	; 0x18b74 <twi_transmit+0x38>
   18b5a:	82 e0       	ldi	r24, 0x02	; 2
   18b5c:	08 95       	ret
   18b5e:	a0 91 8d 11 	lds	r26, 0x118D	; 0x80118d <twi_txBufferLength>
   18b62:	21 91       	ld	r18, Z+
   18b64:	ac 01       	movw	r20, r24
   18b66:	41 57       	subi	r20, 0x71	; 113
   18b68:	5e 4e       	sbci	r21, 0xEE	; 238
   18b6a:	a4 0f       	add	r26, r20
   18b6c:	b5 2f       	mov	r27, r21
   18b6e:	b1 1d       	adc	r27, r1
   18b70:	2c 93       	st	X, r18
   18b72:	01 96       	adiw	r24, 0x01	; 1
   18b74:	86 17       	cp	r24, r22
   18b76:	98 f3       	brcs	.-26     	; 0x18b5e <twi_transmit+0x22>
   18b78:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <twi_txBufferLength>
   18b7c:	68 0f       	add	r22, r24
   18b7e:	60 93 8d 11 	sts	0x118D, r22	; 0x80118d <twi_txBufferLength>
   18b82:	80 e0       	ldi	r24, 0x00	; 0
   18b84:	08 95       	ret
   18b86:	81 e0       	ldi	r24, 0x01	; 1
   18b88:	08 95       	ret

00018b8a <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
   18b8a:	90 93 d2 11 	sts	0x11D2, r25	; 0x8011d2 <twi_onSlaveReceive+0x1>
   18b8e:	80 93 d1 11 	sts	0x11D1, r24	; 0x8011d1 <twi_onSlaveReceive>
   18b92:	08 95       	ret

00018b94 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
   18b94:	90 93 d4 11 	sts	0x11D4, r25	; 0x8011d4 <twi_onSlaveTransmit+0x1>
   18b98:	80 93 d3 11 	sts	0x11D3, r24	; 0x8011d3 <twi_onSlaveTransmit>
   18b9c:	08 95       	ret

00018b9e <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
   18b9e:	85 ed       	ldi	r24, 0xD5	; 213
   18ba0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
   18ba4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   18ba8:	84 fd       	sbrc	r24, 4
   18baa:	fc cf       	rjmp	.-8      	; 0x18ba4 <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
   18bac:	10 92 d8 11 	sts	0x11D8, r1	; 0x8011d8 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:382
}
   18bb0:	08 95       	ret

00018bb2 <twi_releaseBus>:
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
   18bb2:	85 ec       	ldi	r24, 0xC5	; 197
   18bb4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
   18bb8:	10 92 d8 11 	sts	0x11D8, r1	; 0x8011d8 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:397
}
   18bbc:	08 95       	ret

00018bbe <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:400

ISR(TWI_vect)
{
   18bbe:	1f 92       	push	r1
   18bc0:	0f 92       	push	r0
   18bc2:	0f b6       	in	r0, 0x3f	; 63
   18bc4:	0f 92       	push	r0
   18bc6:	11 24       	eor	r1, r1
   18bc8:	0b b6       	in	r0, 0x3b	; 59
   18bca:	0f 92       	push	r0
   18bcc:	2f 93       	push	r18
   18bce:	3f 93       	push	r19
   18bd0:	4f 93       	push	r20
   18bd2:	5f 93       	push	r21
   18bd4:	6f 93       	push	r22
   18bd6:	7f 93       	push	r23
   18bd8:	8f 93       	push	r24
   18bda:	9f 93       	push	r25
   18bdc:	af 93       	push	r26
   18bde:	bf 93       	push	r27
   18be0:	ef 93       	push	r30
   18be2:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
   18be4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
   18be8:	88 7f       	andi	r24, 0xF8	; 248
   18bea:	80 36       	cpi	r24, 0x60	; 96
   18bec:	09 f4       	brne	.+2      	; 0x18bf0 <__vector_39+0x32>
   18bee:	4e c0       	rjmp	.+156    	; 0x18c8c <__vector_39+0xce>
   18bf0:	08 f0       	brcs	.+2      	; 0x18bf4 <__vector_39+0x36>
   18bf2:	41 c0       	rjmp	.+130    	; 0x18c76 <__vector_39+0xb8>
   18bf4:	88 32       	cpi	r24, 0x28	; 40
   18bf6:	09 f4       	brne	.+2      	; 0x18bfa <__vector_39+0x3c>
   18bf8:	aa c0       	rjmp	.+340    	; 0x18d4e <__vector_39+0x190>
   18bfa:	28 f5       	brcc	.+74     	; 0x18c46 <__vector_39+0x88>
   18bfc:	80 31       	cpi	r24, 0x10	; 16
   18bfe:	09 f4       	brne	.+2      	; 0x18c02 <__vector_39+0x44>
   18c00:	9e c0       	rjmp	.+316    	; 0x18d3e <__vector_39+0x180>
   18c02:	c8 f4       	brcc	.+50     	; 0x18c36 <__vector_39+0x78>
   18c04:	88 23       	and	r24, r24
   18c06:	09 f4       	brne	.+2      	; 0x18c0a <__vector_39+0x4c>
   18c08:	fb c0       	rjmp	.+502    	; 0x18e00 <__vector_39+0x242>
   18c0a:	88 30       	cpi	r24, 0x08	; 8
   18c0c:	09 f4       	brne	.+2      	; 0x18c10 <__vector_39+0x52>
   18c0e:	97 c0       	rjmp	.+302    	; 0x18d3e <__vector_39+0x180>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
   18c10:	ff 91       	pop	r31
   18c12:	ef 91       	pop	r30
   18c14:	bf 91       	pop	r27
   18c16:	af 91       	pop	r26
   18c18:	9f 91       	pop	r25
   18c1a:	8f 91       	pop	r24
   18c1c:	7f 91       	pop	r23
   18c1e:	6f 91       	pop	r22
   18c20:	5f 91       	pop	r21
   18c22:	4f 91       	pop	r20
   18c24:	3f 91       	pop	r19
   18c26:	2f 91       	pop	r18
   18c28:	0f 90       	pop	r0
   18c2a:	0b be       	out	0x3b, r0	; 59
   18c2c:	0f 90       	pop	r0
   18c2e:	0f be       	out	0x3f, r0	; 63
   18c30:	0f 90       	pop	r0
   18c32:	1f 90       	pop	r1
   18c34:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   18c36:	88 31       	cpi	r24, 0x18	; 24
   18c38:	09 f4       	brne	.+2      	; 0x18c3c <__vector_39+0x7e>
   18c3a:	89 c0       	rjmp	.+274    	; 0x18d4e <__vector_39+0x190>
   18c3c:	80 32       	cpi	r24, 0x20	; 32
   18c3e:	41 f7       	brne	.-48     	; 0x18c10 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
   18c40:	80 93 6b 11 	sts	0x116B, r24	; 0x80116b <twi_error>
   18c44:	15 c0       	rjmp	.+42     	; 0x18c70 <__vector_39+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   18c46:	80 34       	cpi	r24, 0x40	; 64
   18c48:	09 f4       	brne	.+2      	; 0x18c4c <__vector_39+0x8e>
   18c4a:	9e c0       	rjmp	.+316    	; 0x18d88 <__vector_39+0x1ca>
   18c4c:	48 f4       	brcc	.+18     	; 0x18c60 <__vector_39+0xa2>
   18c4e:	80 33       	cpi	r24, 0x30	; 48
   18c50:	b9 f3       	breq	.-18     	; 0x18c40 <__vector_39+0x82>
   18c52:	88 33       	cpi	r24, 0x38	; 56
   18c54:	e9 f6       	brne	.-70     	; 0x18c10 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
   18c56:	80 93 6b 11 	sts	0x116B, r24	; 0x80116b <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:441
      twi_releaseBus();
   18c5a:	0e 94 d9 c5 	call	0x18bb2	; 0x18bb2 <twi_releaseBus>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:442
      break;
   18c5e:	d8 cf       	rjmp	.-80     	; 0x18c10 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   18c60:	80 35       	cpi	r24, 0x50	; 80
   18c62:	09 f4       	brne	.+2      	; 0x18c66 <__vector_39+0xa8>
   18c64:	85 c0       	rjmp	.+266    	; 0x18d70 <__vector_39+0x1b2>
   18c66:	88 35       	cpi	r24, 0x58	; 88
   18c68:	09 f4       	brne	.+2      	; 0x18c6c <__vector_39+0xae>
   18c6a:	96 c0       	rjmp	.+300    	; 0x18d98 <__vector_39+0x1da>
   18c6c:	88 34       	cpi	r24, 0x48	; 72
   18c6e:	81 f6       	brne	.-96     	; 0x18c10 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
   18c70:	0e 94 cf c5 	call	0x18b9e	; 0x18b9e <twi_stop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
      break;
  }
}
   18c74:	cd cf       	rjmp	.-102    	; 0x18c10 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   18c76:	88 39       	cpi	r24, 0x98	; 152
   18c78:	09 f4       	brne	.+2      	; 0x18c7c <__vector_39+0xbe>
   18c7a:	8c c0       	rjmp	.+280    	; 0x18d94 <__vector_39+0x1d6>
   18c7c:	38 f5       	brcc	.+78     	; 0x18ccc <__vector_39+0x10e>
   18c7e:	88 37       	cpi	r24, 0x78	; 120
   18c80:	29 f0       	breq	.+10     	; 0x18c8c <__vector_39+0xce>
   18c82:	50 f4       	brcc	.+20     	; 0x18c98 <__vector_39+0xda>
   18c84:	88 36       	cpi	r24, 0x68	; 104
   18c86:	11 f0       	breq	.+4      	; 0x18c8c <__vector_39+0xce>
   18c88:	80 37       	cpi	r24, 0x70	; 112
   18c8a:	11 f6       	brne	.-124    	; 0x18c10 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
   18c8c:	83 e0       	ldi	r24, 0x03	; 3
   18c8e:	80 93 d8 11 	sts	0x11D8, r24	; 0x8011d8 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
   18c92:	10 92 6c 11 	sts	0x116C, r1	; 0x80116c <twi_rxBufferIndex>
   18c96:	57 c0       	rjmp	.+174    	; 0x18d46 <__vector_39+0x188>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   18c98:	88 38       	cpi	r24, 0x88	; 136
   18c9a:	09 f4       	brne	.+2      	; 0x18c9e <__vector_39+0xe0>
   18c9c:	7b c0       	rjmp	.+246    	; 0x18d94 <__vector_39+0x1d6>
   18c9e:	80 39       	cpi	r24, 0x90	; 144
   18ca0:	19 f0       	breq	.+6      	; 0x18ca8 <__vector_39+0xea>
   18ca2:	80 38       	cpi	r24, 0x80	; 128
   18ca4:	09 f0       	breq	.+2      	; 0x18ca8 <__vector_39+0xea>
   18ca6:	b4 cf       	rjmp	.-152    	; 0x18c10 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   18ca8:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <twi_rxBufferIndex>
   18cac:	80 32       	cpi	r24, 0x20	; 32
   18cae:	08 f0       	brcs	.+2      	; 0x18cb2 <__vector_39+0xf4>
   18cb0:	71 c0       	rjmp	.+226    	; 0x18d94 <__vector_39+0x1d6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
   18cb2:	e0 91 6c 11 	lds	r30, 0x116C	; 0x80116c <twi_rxBufferIndex>
   18cb6:	81 e0       	ldi	r24, 0x01	; 1
   18cb8:	8e 0f       	add	r24, r30
   18cba:	80 93 6c 11 	sts	0x116C, r24	; 0x80116c <twi_rxBufferIndex>
   18cbe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   18cc2:	f0 e0       	ldi	r31, 0x00	; 0
   18cc4:	e3 59       	subi	r30, 0x93	; 147
   18cc6:	fe 4e       	sbci	r31, 0xEE	; 238
   18cc8:	80 83       	st	Z, r24
   18cca:	3d c0       	rjmp	.+122    	; 0x18d46 <__vector_39+0x188>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   18ccc:	80 3b       	cpi	r24, 0xB0	; 176
   18cce:	39 f0       	breq	.+14     	; 0x18cde <__vector_39+0x120>
   18cd0:	e0 f4       	brcc	.+56     	; 0x18d0a <__vector_39+0x14c>
   18cd2:	80 3a       	cpi	r24, 0xA0	; 160
   18cd4:	09 f4       	brne	.+2      	; 0x18cd8 <__vector_39+0x11a>
   18cd6:	79 c0       	rjmp	.+242    	; 0x18dca <__vector_39+0x20c>
   18cd8:	88 3a       	cpi	r24, 0xA8	; 168
   18cda:	09 f0       	breq	.+2      	; 0x18cde <__vector_39+0x120>
   18cdc:	99 cf       	rjmp	.-206    	; 0x18c10 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
   18cde:	84 e0       	ldi	r24, 0x04	; 4
   18ce0:	80 93 d8 11 	sts	0x11D8, r24	; 0x8011d8 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
   18ce4:	10 92 8e 11 	sts	0x118E, r1	; 0x80118e <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
   18ce8:	10 92 8d 11 	sts	0x118D, r1	; 0x80118d <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
   18cec:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <twi_onSlaveTransmit>
   18cf0:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <twi_onSlaveTransmit+0x1>
   18cf4:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
   18cf6:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <twi_txBufferLength>
   18cfa:	81 11       	cpse	r24, r1
   18cfc:	0f c0       	rjmp	.+30     	; 0x18d1c <__vector_39+0x15e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
   18cfe:	81 e0       	ldi	r24, 0x01	; 1
   18d00:	80 93 8d 11 	sts	0x118D, r24	; 0x80118d <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
   18d04:	10 92 8f 11 	sts	0x118F, r1	; 0x80118f <twi_txBuffer>
   18d08:	09 c0       	rjmp	.+18     	; 0x18d1c <__vector_39+0x15e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   18d0a:	80 3c       	cpi	r24, 0xC0	; 192
   18d0c:	09 f4       	brne	.+2      	; 0x18d10 <__vector_39+0x152>
   18d0e:	76 c0       	rjmp	.+236    	; 0x18dfc <__vector_39+0x23e>
   18d10:	88 3c       	cpi	r24, 0xC8	; 200
   18d12:	09 f4       	brne	.+2      	; 0x18d16 <__vector_39+0x158>
   18d14:	73 c0       	rjmp	.+230    	; 0x18dfc <__vector_39+0x23e>
   18d16:	88 3b       	cpi	r24, 0xB8	; 184
   18d18:	09 f0       	breq	.+2      	; 0x18d1c <__vector_39+0x15e>
   18d1a:	7a cf       	rjmp	.-268    	; 0x18c10 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
   18d1c:	e0 91 8e 11 	lds	r30, 0x118E	; 0x80118e <twi_txBufferIndex>
   18d20:	81 e0       	ldi	r24, 0x01	; 1
   18d22:	8e 0f       	add	r24, r30
   18d24:	80 93 8e 11 	sts	0x118E, r24	; 0x80118e <twi_txBufferIndex>
   18d28:	f0 e0       	ldi	r31, 0x00	; 0
   18d2a:	e1 57       	subi	r30, 0x71	; 113
   18d2c:	fe 4e       	sbci	r31, 0xEE	; 238
   18d2e:	80 81       	ld	r24, Z
   18d30:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   18d34:	90 91 8e 11 	lds	r25, 0x118E	; 0x80118e <twi_txBufferIndex>
   18d38:	80 91 8d 11 	lds	r24, 0x118D	; 0x80118d <twi_txBufferLength>
   18d3c:	29 c0       	rjmp	.+82     	; 0x18d90 <__vector_39+0x1d2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
   18d3e:	80 91 d7 11 	lds	r24, 0x11D7	; 0x8011d7 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   18d42:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   18d46:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   18d48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   18d4c:	61 cf       	rjmp	.-318    	; 0x18c10 <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
   18d4e:	90 91 b0 11 	lds	r25, 0x11B0	; 0x8011b0 <twi_masterBufferIndex>
   18d52:	80 91 af 11 	lds	r24, 0x11AF	; 0x8011af <twi_masterBufferLength>
   18d56:	98 17       	cp	r25, r24
   18d58:	58 f5       	brcc	.+86     	; 0x18db0 <__vector_39+0x1f2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   18d5a:	e0 91 b0 11 	lds	r30, 0x11B0	; 0x8011b0 <twi_masterBufferIndex>
   18d5e:	81 e0       	ldi	r24, 0x01	; 1
   18d60:	8e 0f       	add	r24, r30
   18d62:	80 93 b0 11 	sts	0x11B0, r24	; 0x8011b0 <twi_masterBufferIndex>
   18d66:	f0 e0       	ldi	r31, 0x00	; 0
   18d68:	ef 54       	subi	r30, 0x4F	; 79
   18d6a:	fe 4e       	sbci	r31, 0xEE	; 238
   18d6c:	80 81       	ld	r24, Z
   18d6e:	e9 cf       	rjmp	.-46     	; 0x18d42 <__vector_39+0x184>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   18d70:	e0 91 b0 11 	lds	r30, 0x11B0	; 0x8011b0 <twi_masterBufferIndex>
   18d74:	81 e0       	ldi	r24, 0x01	; 1
   18d76:	8e 0f       	add	r24, r30
   18d78:	80 93 b0 11 	sts	0x11B0, r24	; 0x8011b0 <twi_masterBufferIndex>
   18d7c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   18d80:	f0 e0       	ldi	r31, 0x00	; 0
   18d82:	ef 54       	subi	r30, 0x4F	; 79
   18d84:	fe 4e       	sbci	r31, 0xEE	; 238
   18d86:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
   18d88:	90 91 b0 11 	lds	r25, 0x11B0	; 0x8011b0 <twi_masterBufferIndex>
   18d8c:	80 91 af 11 	lds	r24, 0x11AF	; 0x8011af <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   18d90:	98 17       	cp	r25, r24
   18d92:	c8 f2       	brcs	.-78     	; 0x18d46 <__vector_39+0x188>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   18d94:	85 e8       	ldi	r24, 0x85	; 133
   18d96:	d8 cf       	rjmp	.-80     	; 0x18d48 <__vector_39+0x18a>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   18d98:	e0 91 b0 11 	lds	r30, 0x11B0	; 0x8011b0 <twi_masterBufferIndex>
   18d9c:	81 e0       	ldi	r24, 0x01	; 1
   18d9e:	8e 0f       	add	r24, r30
   18da0:	80 93 b0 11 	sts	0x11B0, r24	; 0x8011b0 <twi_masterBufferIndex>
   18da4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   18da8:	f0 e0       	ldi	r31, 0x00	; 0
   18daa:	ef 54       	subi	r30, 0x4F	; 79
   18dac:	fe 4e       	sbci	r31, 0xEE	; 238
   18dae:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
   18db0:	80 91 d6 11 	lds	r24, 0x11D6	; 0x8011d6 <twi_sendStop>
   18db4:	81 11       	cpse	r24, r1
   18db6:	5c cf       	rjmp	.-328    	; 0x18c70 <__vector_39+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
   18db8:	81 e0       	ldi	r24, 0x01	; 1
   18dba:	80 93 d5 11 	sts	0x11D5, r24	; 0x8011d5 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
   18dbe:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   18dc0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
   18dc4:	10 92 d8 11 	sts	0x11D8, r1	; 0x8011d8 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:552
      break;
   18dc8:	23 cf       	rjmp	.-442    	; 0x18c10 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
   18dca:	0e 94 d9 c5 	call	0x18bb2	; 0x18bb2 <twi_releaseBus>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   18dce:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <twi_rxBufferIndex>
   18dd2:	80 32       	cpi	r24, 0x20	; 32
   18dd4:	30 f4       	brcc	.+12     	; 0x18de2 <__vector_39+0x224>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
   18dd6:	e0 91 6c 11 	lds	r30, 0x116C	; 0x80116c <twi_rxBufferIndex>
   18dda:	f0 e0       	ldi	r31, 0x00	; 0
   18ddc:	e3 59       	subi	r30, 0x93	; 147
   18dde:	fe 4e       	sbci	r31, 0xEE	; 238
   18de0:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
   18de2:	60 91 6c 11 	lds	r22, 0x116C	; 0x80116c <twi_rxBufferIndex>
   18de6:	70 e0       	ldi	r23, 0x00	; 0
   18de8:	e0 91 d1 11 	lds	r30, 0x11D1	; 0x8011d1 <twi_onSlaveReceive>
   18dec:	f0 91 d2 11 	lds	r31, 0x11D2	; 0x8011d2 <twi_onSlaveReceive+0x1>
   18df0:	8d e6       	ldi	r24, 0x6D	; 109
   18df2:	91 e1       	ldi	r25, 0x11	; 17
   18df4:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
   18df6:	10 92 6c 11 	sts	0x116C, r1	; 0x80116c <twi_rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:510
      break;
   18dfa:	0a cf       	rjmp	.-492    	; 0x18c10 <__vector_39+0x52>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   18dfc:	85 ec       	ldi	r24, 0xC5	; 197
   18dfe:	e0 cf       	rjmp	.-64     	; 0x18dc0 <__vector_39+0x202>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
   18e00:	10 92 6b 11 	sts	0x116B, r1	; 0x80116b <twi_error>
   18e04:	35 cf       	rjmp	.-406    	; 0x18c70 <__vector_39+0xb2>

00018e06 <owWriteBlock(unsigned char, unsigned char*, unsigned char)>:
_Z12owWriteBlockhPhh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:90
		if(r)
			return r;
	}

	return DS2482_ERR_OK;
}
   18e06:	ff 92       	push	r15
   18e08:	0f 93       	push	r16
   18e0a:	1f 93       	push	r17
   18e0c:	cf 93       	push	r28
   18e0e:	df 93       	push	r29
   18e10:	f8 2e       	mov	r15, r24
   18e12:	eb 01       	movw	r28, r22
   18e14:	8b 01       	movw	r16, r22
   18e16:	04 0f       	add	r16, r20
   18e18:	11 1d       	adc	r17, r1
   18e1a:	c0 17       	cp	r28, r16
   18e1c:	d1 07       	cpc	r29, r17
   18e1e:	61 f0       	breq	.+24     	; 0x18e38 <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x32>
   18e20:	69 91       	ld	r22, Y+
   18e22:	8f 2d       	mov	r24, r15
   18e24:	0e 94 5a c8 	call	0x190b4	; 0x190b4 <ds2482owWriteByte(unsigned char, unsigned char)>
   18e28:	88 23       	and	r24, r24
   18e2a:	b9 f3       	breq	.-18     	; 0x18e1a <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x14>
   18e2c:	df 91       	pop	r29
   18e2e:	cf 91       	pop	r28
   18e30:	1f 91       	pop	r17
   18e32:	0f 91       	pop	r16
   18e34:	ff 90       	pop	r15
   18e36:	08 95       	ret
   18e38:	80 e0       	ldi	r24, 0x00	; 0
   18e3a:	f8 cf       	rjmp	.-16     	; 0x18e2c <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x26>

00018e3c <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
   18e3c:	0f 93       	push	r16
   18e3e:	1f 93       	push	r17
   18e40:	cf 93       	push	r28
   18e42:	c8 2f       	mov	r28, r24
   18e44:	8b 01       	movw	r16, r22
   18e46:	65 e5       	ldi	r22, 0x55	; 85
   18e48:	0e 94 5a c8 	call	0x190b4	; 0x190b4 <ds2482owWriteByte(unsigned char, unsigned char)>
   18e4c:	81 11       	cpse	r24, r1
   18e4e:	08 c0       	rjmp	.+16     	; 0x18e60 <owMatchRom(unsigned char, unsigned char*)+0x24>
   18e50:	48 e0       	ldi	r20, 0x08	; 8
   18e52:	b8 01       	movw	r22, r16
   18e54:	8c 2f       	mov	r24, r28
   18e56:	cf 91       	pop	r28
   18e58:	1f 91       	pop	r17
   18e5a:	0f 91       	pop	r16
   18e5c:	0c 94 03 c7 	jmp	0x18e06	; 0x18e06 <owWriteBlock(unsigned char, unsigned char*, unsigned char)>
   18e60:	cf 91       	pop	r28
   18e62:	1f 91       	pop	r17
   18e64:	0f 91       	pop	r16
   18e66:	08 95       	ret

00018e68 <owMatchNext(unsigned char, unsigned char*)>:
_Z11owMatchNexthPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:123
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
   18e68:	bf 92       	push	r11
   18e6a:	cf 92       	push	r12
   18e6c:	df 92       	push	r13
   18e6e:	ef 92       	push	r14
   18e70:	ff 92       	push	r15
   18e72:	0f 93       	push	r16
   18e74:	1f 93       	push	r17
   18e76:	cf 93       	push	r28
   18e78:	df 93       	push	r29
   18e7a:	1f 92       	push	r1
   18e7c:	cd b7       	in	r28, 0x3d	; 61
   18e7e:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   18e80:	90 91 d9 11 	lds	r25, 0x11D9	; 0x8011d9 <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   18e84:	15 e0       	ldi	r17, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   18e86:	91 11       	cpse	r25, r1
   18e88:	12 c0       	rjmp	.+36     	; 0x18eae <owMatchNext(unsigned char, unsigned char*)+0x46>
   18e8a:	7b 01       	movw	r14, r22
   18e8c:	b8 2e       	mov	r11, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   18e8e:	0e 94 1f c8 	call	0x1903e	; 0x1903e <ds2482owReset(unsigned char)>
   18e92:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   18e94:	81 11       	cpse	r24, r1
   18e96:	0b c0       	rjmp	.+22     	; 0x18eae <owMatchNext(unsigned char, unsigned char*)+0x46>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   18e98:	60 ef       	ldi	r22, 0xF0	; 240
   18e9a:	8b 2d       	mov	r24, r11
   18e9c:	0e 94 5a c8 	call	0x190b4	; 0x190b4 <ds2482owWriteByte(unsigned char, unsigned char)>
   18ea0:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   18ea2:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   18ea4:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   18ea6:	dd 24       	eor	r13, r13
   18ea8:	d3 94       	inc	r13
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   18eaa:	88 23       	and	r24, r24
   18eac:	81 f0       	breq	.+32     	; 0x18ece <owMatchNext(unsigned char, unsigned char*)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   18eae:	81 2f       	mov	r24, r17
   18eb0:	0f 90       	pop	r0
   18eb2:	df 91       	pop	r29
   18eb4:	cf 91       	pop	r28
   18eb6:	1f 91       	pop	r17
   18eb8:	0f 91       	pop	r16
   18eba:	ff 90       	pop	r15
   18ebc:	ef 90       	pop	r14
   18ebe:	df 90       	pop	r13
   18ec0:	cf 90       	pop	r12
   18ec2:	bf 90       	pop	r11
   18ec4:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   18ec6:	98 e0       	ldi	r25, 0x08	; 8
   18ec8:	c9 16       	cp	r12, r25
   18eca:	09 f4       	brne	.+2      	; 0x18ece <owMatchNext(unsigned char, unsigned char*)+0x66>
   18ecc:	45 c0       	rjmp	.+138    	; 0x18f58 <owMatchNext(unsigned char, unsigned char*)+0xf0>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   18ece:	90 91 da 11 	lds	r25, 0x11DA	; 0x8011da <lastDiscrepancy>
   18ed2:	d9 16       	cp	r13, r25
   18ed4:	88 f5       	brcc	.+98     	; 0x18f38 <owMatchNext(unsigned char, unsigned char*)+0xd0>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   18ed6:	f7 01       	movw	r30, r14
   18ed8:	ec 0d       	add	r30, r12
   18eda:	f1 1d       	adc	r31, r1
   18edc:	80 81       	ld	r24, Z
   18ede:	80 23       	and	r24, r16
   18ee0:	91 e0       	ldi	r25, 0x01	; 1
   18ee2:	09 f4       	brne	.+2      	; 0x18ee6 <owMatchNext(unsigned char, unsigned char*)+0x7e>
   18ee4:	90 e0       	ldi	r25, 0x00	; 0
   18ee6:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:148
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);

		r=ds2482owWriteTriplet(ds2482_address, &direction);
   18ee8:	be 01       	movw	r22, r28
   18eea:	6f 5f       	subi	r22, 0xFF	; 255
   18eec:	7f 4f       	sbci	r23, 0xFF	; 255
   18eee:	8b 2d       	mov	r24, r11
   18ef0:	0e 94 98 c8 	call	0x19130	; 0x19130 <ds2482owWriteTriplet(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:149
		if(r) return r;
   18ef4:	81 11       	cpse	r24, r1
   18ef6:	3a c0       	rjmp	.+116    	; 0x18f6c <owMatchNext(unsigned char, unsigned char*)+0x104>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   18ef8:	29 81       	ldd	r18, Y+1	; 0x01
   18efa:	30 e0       	ldi	r19, 0x00	; 0
   18efc:	a9 01       	movw	r20, r18
   18efe:	95 e0       	ldi	r25, 0x05	; 5
   18f00:	55 95       	asr	r21
   18f02:	47 95       	ror	r20
   18f04:	9a 95       	dec	r25
   18f06:	e1 f7       	brne	.-8      	; 0x18f00 <owMatchNext(unsigned char, unsigned char*)+0x98>
   18f08:	43 70       	andi	r20, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   18f0a:	22 0f       	add	r18, r18
   18f0c:	23 2f       	mov	r18, r19
   18f0e:	22 1f       	adc	r18, r18
   18f10:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   18f12:	43 30       	cpi	r20, 0x03	; 3
   18f14:	09 f1       	breq	.+66     	; 0x18f58 <owMatchNext(unsigned char, unsigned char*)+0xf0>
   18f16:	ec 2d       	mov	r30, r12
   18f18:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   18f1a:	41 11       	cpse	r20, r1
   18f1c:	12 c0       	rjmp	.+36     	; 0x18f42 <owMatchNext(unsigned char, unsigned char*)+0xda>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   18f1e:	22 23       	and	r18, r18
   18f20:	c9 f0       	breq	.+50     	; 0x18f54 <owMatchNext(unsigned char, unsigned char*)+0xec>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   18f22:	ee 0d       	add	r30, r14
   18f24:	ff 1d       	adc	r31, r15
   18f26:	90 81       	ld	r25, Z
   18f28:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   18f2a:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   18f2c:	d3 94       	inc	r13
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   18f2e:	00 0f       	add	r16, r16
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   18f30:	51 f6       	brne	.-108    	; 0x18ec6 <owMatchNext(unsigned char, unsigned char*)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   18f32:	c3 94       	inc	r12
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   18f34:	01 e0       	ldi	r16, 0x01	; 1
   18f36:	c7 cf       	rjmp	.-114    	; 0x18ec6 <owMatchNext(unsigned char, unsigned char*)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   18f38:	81 e0       	ldi	r24, 0x01	; 1
   18f3a:	9d 11       	cpse	r25, r13
   18f3c:	80 e0       	ldi	r24, 0x00	; 0
   18f3e:	89 83       	std	Y+1, r24	; 0x01
   18f40:	d3 cf       	rjmp	.-90     	; 0x18ee8 <owMatchNext(unsigned char, unsigned char*)+0x80>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   18f42:	21 11       	cpse	r18, r1
   18f44:	ee cf       	rjmp	.-36     	; 0x18f22 <owMatchNext(unsigned char, unsigned char*)+0xba>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   18f46:	ee 0d       	add	r30, r14
   18f48:	ff 1d       	adc	r31, r15
   18f4a:	90 81       	ld	r25, Z
   18f4c:	20 2f       	mov	r18, r16
   18f4e:	20 95       	com	r18
   18f50:	92 23       	and	r25, r18
   18f52:	eb cf       	rjmp	.-42     	; 0x18f2a <owMatchNext(unsigned char, unsigned char*)+0xc2>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   18f54:	1d 2d       	mov	r17, r13
   18f56:	f7 cf       	rjmp	.-18     	; 0x18f46 <owMatchNext(unsigned char, unsigned char*)+0xde>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   18f58:	90 e4       	ldi	r25, 0x40	; 64
   18f5a:	9d 15       	cp	r25, r13
   18f5c:	48 f4       	brcc	.+18     	; 0x18f70 <owMatchNext(unsigned char, unsigned char*)+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   18f5e:	10 93 da 11 	sts	0x11DA, r17	; 0x8011da <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   18f62:	91 e0       	ldi	r25, 0x01	; 1
   18f64:	11 11       	cpse	r17, r1
   18f66:	90 e0       	ldi	r25, 0x00	; 0
   18f68:	90 93 d9 11 	sts	0x11D9, r25	; 0x8011d9 <lastDevice>
   18f6c:	18 2f       	mov	r17, r24
   18f6e:	9f cf       	rjmp	.-194    	; 0x18eae <owMatchNext(unsigned char, unsigned char*)+0x46>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:187
	}else
	{
		return DS2482_ERR_NO_DEVICE;
   18f70:	85 e0       	ldi	r24, 0x05	; 5
   18f72:	fc cf       	rjmp	.-8      	; 0x18f6c <owMatchNext(unsigned char, unsigned char*)+0x104>

00018f74 <owMatchFirst(unsigned char, unsigned char*)>:
_Z12owMatchFirsthPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
   18f74:	10 92 d9 11 	sts	0x11D9, r1	; 0x8011d9 <lastDevice>
   18f78:	10 92 da 11 	sts	0x11DA, r1	; 0x8011da <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
   18f7c:	0c 94 34 c7 	jmp	0x18e68	; 0x18e68 <owMatchNext(unsigned char, unsigned char*)>

00018f80 <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:296
          {
          *config = Wire.read();
          return DS2482_ERR_OK;
          }
        else
          return DS2482_ERR_READ;
   18f80:	68 2f       	mov	r22, r24
   18f82:	85 e1       	ldi	r24, 0x15	; 21
   18f84:	91 e1       	ldi	r25, 0x11	; 17
   18f86:	0e 94 45 c4 	call	0x1888a	; 0x1888a <TwoWire::beginTransmission(unsigned char)>
   18f8a:	60 ef       	ldi	r22, 0xF0	; 240
   18f8c:	70 e0       	ldi	r23, 0x00	; 0
   18f8e:	85 e1       	ldi	r24, 0x15	; 21
   18f90:	91 e1       	ldi	r25, 0x11	; 17
   18f92:	0e 94 4f c1 	call	0x1829e	; 0x1829e <TwoWire::write(int)>
   18f96:	85 e1       	ldi	r24, 0x15	; 21
   18f98:	91 e1       	ldi	r25, 0x11	; 17
   18f9a:	0e 94 cd c4 	call	0x1899a	; 0x1899a <TwoWire::endTransmission()>
   18f9e:	81 11       	cpse	r24, r1
   18fa0:	8a e0       	ldi	r24, 0x0A	; 10
   18fa2:	08 95       	ret

00018fa4 <ds2482setReadPointer(unsigned char, unsigned char)>:
_Z20ds2482setReadPointerhh():
   18fa4:	cf 93       	push	r28
   18fa6:	c6 2f       	mov	r28, r22
   18fa8:	68 2f       	mov	r22, r24
   18faa:	85 e1       	ldi	r24, 0x15	; 21
   18fac:	91 e1       	ldi	r25, 0x11	; 17
   18fae:	0e 94 45 c4 	call	0x1888a	; 0x1888a <TwoWire::beginTransmission(unsigned char)>
   18fb2:	61 ee       	ldi	r22, 0xE1	; 225
   18fb4:	70 e0       	ldi	r23, 0x00	; 0
   18fb6:	85 e1       	ldi	r24, 0x15	; 21
   18fb8:	91 e1       	ldi	r25, 0x11	; 17
   18fba:	0e 94 4f c1 	call	0x1829e	; 0x1829e <TwoWire::write(int)>
   18fbe:	6c 2f       	mov	r22, r28
   18fc0:	85 e1       	ldi	r24, 0x15	; 21
   18fc2:	91 e1       	ldi	r25, 0x11	; 17
   18fc4:	0e 94 d7 c3 	call	0x187ae	; 0x187ae <TwoWire::write(unsigned char)>
   18fc8:	85 e1       	ldi	r24, 0x15	; 21
   18fca:	91 e1       	ldi	r25, 0x11	; 17
   18fcc:	0e 94 cd c4 	call	0x1899a	; 0x1899a <TwoWire::endTransmission()>
   18fd0:	81 11       	cpse	r24, r1
   18fd2:	83 e0       	ldi	r24, 0x03	; 3
   18fd4:	cf 91       	pop	r28
   18fd6:	08 95       	ret

00018fd8 <ds2482setConfig(unsigned char, unsigned char)>:
_Z15ds2482setConfighh():
   18fd8:	cf 93       	push	r28
   18fda:	c6 2f       	mov	r28, r22
   18fdc:	68 2f       	mov	r22, r24
   18fde:	85 e1       	ldi	r24, 0x15	; 21
   18fe0:	91 e1       	ldi	r25, 0x11	; 17
   18fe2:	0e 94 45 c4 	call	0x1888a	; 0x1888a <TwoWire::beginTransmission(unsigned char)>
   18fe6:	62 ed       	ldi	r22, 0xD2	; 210
   18fe8:	70 e0       	ldi	r23, 0x00	; 0
   18fea:	85 e1       	ldi	r24, 0x15	; 21
   18fec:	91 e1       	ldi	r25, 0x11	; 17
   18fee:	0e 94 4f c1 	call	0x1829e	; 0x1829e <TwoWire::write(int)>
   18ff2:	6c 2f       	mov	r22, r28
   18ff4:	85 e1       	ldi	r24, 0x15	; 21
   18ff6:	91 e1       	ldi	r25, 0x11	; 17
   18ff8:	0e 94 d7 c3 	call	0x187ae	; 0x187ae <TwoWire::write(unsigned char)>
   18ffc:	85 e1       	ldi	r24, 0x15	; 21
   18ffe:	91 e1       	ldi	r25, 0x11	; 17
   19000:	0e 94 cd c4 	call	0x1899a	; 0x1899a <TwoWire::endTransmission()>
   19004:	81 11       	cpse	r24, r1
   19006:	83 e0       	ldi	r24, 0x03	; 3
   19008:	cf 91       	pop	r28
   1900a:	08 95       	ret

0001900c <ds2482init(unsigned char)>:
_Z10ds2482inith():
   1900c:	cf 93       	push	r28
   1900e:	df 93       	push	r29
   19010:	d8 2f       	mov	r29, r24
   19012:	68 2f       	mov	r22, r24
   19014:	85 e1       	ldi	r24, 0x15	; 21
   19016:	91 e1       	ldi	r25, 0x11	; 17
   19018:	0e 94 45 c4 	call	0x1888a	; 0x1888a <TwoWire::beginTransmission(unsigned char)>
   1901c:	85 e1       	ldi	r24, 0x15	; 21
   1901e:	91 e1       	ldi	r25, 0x11	; 17
   19020:	0e 94 cd c4 	call	0x1899a	; 0x1899a <TwoWire::endTransmission()>
   19024:	c8 2f       	mov	r28, r24
   19026:	81 11       	cpse	r24, r1
   19028:	08 c0       	rjmp	.+16     	; 0x1903a <ds2482init(unsigned char)+0x2e>
   1902a:	60 e0       	ldi	r22, 0x00	; 0
   1902c:	8d 2f       	mov	r24, r29
   1902e:	0e 94 ec c7 	call	0x18fd8	; 0x18fd8 <ds2482setConfig(unsigned char, unsigned char)>
   19032:	8c 2f       	mov	r24, r28
   19034:	df 91       	pop	r29
   19036:	cf 91       	pop	r28
   19038:	08 95       	ret
   1903a:	ca e0       	ldi	r28, 0x0A	; 10
   1903c:	fa cf       	rjmp	.-12     	; 0x19032 <ds2482init(unsigned char)+0x26>

0001903e <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
   1903e:	0f 93       	push	r16
   19040:	1f 93       	push	r17
   19042:	cf 93       	push	r28
   19044:	df 93       	push	r29
   19046:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   19048:	68 2f       	mov	r22, r24
   1904a:	85 e1       	ldi	r24, 0x15	; 21
   1904c:	91 e1       	ldi	r25, 0x11	; 17
   1904e:	0e 94 45 c4 	call	0x1888a	; 0x1888a <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
   19052:	64 eb       	ldi	r22, 0xB4	; 180
   19054:	70 e0       	ldi	r23, 0x00	; 0
   19056:	85 e1       	ldi	r24, 0x15	; 21
   19058:	91 e1       	ldi	r25, 0x11	; 17
   1905a:	0e 94 4f c1 	call	0x1829e	; 0x1829e <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1905e:	85 e1       	ldi	r24, 0x15	; 21
   19060:	91 e1       	ldi	r25, 0x11	; 17
   19062:	0e 94 cd c4 	call	0x1899a	; 0x1899a <TwoWire::endTransmission()>
   19066:	c8 2f       	mov	r28, r24
   19068:	81 11       	cpse	r24, r1
   1906a:	1b c0       	rjmp	.+54     	; 0x190a2 <ds2482owReset(unsigned char)+0x64>
   1906c:	de ef       	ldi	r29, 0xFE	; 254
   1906e:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
   19070:	f9 f0       	breq	.+62     	; 0x190b0 <ds2482owReset(unsigned char)+0x72>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
   19072:	41 e0       	ldi	r20, 0x01	; 1
   19074:	60 2f       	mov	r22, r16
   19076:	85 e1       	ldi	r24, 0x15	; 21
   19078:	91 e1       	ldi	r25, 0x11	; 17
   1907a:	0e 94 c7 c4 	call	0x1898e	; 0x1898e <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
   1907e:	85 e1       	ldi	r24, 0x15	; 21
   19080:	91 e1       	ldi	r25, 0x11	; 17
   19082:	0e 94 77 c3 	call	0x186ee	; 0x186ee <TwoWire::available()>
   19086:	18 16       	cp	r1, r24
   19088:	19 06       	cpc	r1, r25
   1908a:	2c f4       	brge	.+10     	; 0x19096 <ds2482owReset(unsigned char)+0x58>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
   1908c:	85 e1       	ldi	r24, 0x15	; 21
   1908e:	91 e1       	ldi	r25, 0x11	; 17
   19090:	0e 94 7e c3 	call	0x186fc	; 0x186fc <TwoWire::read()>
   19094:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
   19096:	10 fd       	sbrc	r17, 0
   19098:	ea cf       	rjmp	.-44     	; 0x1906e <ds2482owReset(unsigned char)+0x30>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
   1909a:	11 fd       	sbrc	r17, 1
   1909c:	03 c0       	rjmp	.+6      	; 0x190a4 <ds2482owReset(unsigned char)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
   1909e:	c5 e0       	ldi	r28, 0x05	; 5
   190a0:	01 c0       	rjmp	.+2      	; 0x190a4 <ds2482owReset(unsigned char)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   190a2:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
   190a4:	8c 2f       	mov	r24, r28
   190a6:	df 91       	pop	r29
   190a8:	cf 91       	pop	r28
   190aa:	1f 91       	pop	r17
   190ac:	0f 91       	pop	r16
   190ae:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
   190b0:	c4 e0       	ldi	r28, 0x04	; 4
   190b2:	f8 cf       	rjmp	.-16     	; 0x190a4 <ds2482owReset(unsigned char)+0x66>

000190b4 <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
   190b4:	0f 93       	push	r16
   190b6:	1f 93       	push	r17
   190b8:	cf 93       	push	r28
   190ba:	df 93       	push	r29
   190bc:	08 2f       	mov	r16, r24
   190be:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   190c0:	68 2f       	mov	r22, r24
   190c2:	85 e1       	ldi	r24, 0x15	; 21
   190c4:	91 e1       	ldi	r25, 0x11	; 17
   190c6:	0e 94 45 c4 	call	0x1888a	; 0x1888a <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
   190ca:	65 ea       	ldi	r22, 0xA5	; 165
   190cc:	70 e0       	ldi	r23, 0x00	; 0
   190ce:	85 e1       	ldi	r24, 0x15	; 21
   190d0:	91 e1       	ldi	r25, 0x11	; 17
   190d2:	0e 94 4f c1 	call	0x1829e	; 0x1829e <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
   190d6:	6d 2f       	mov	r22, r29
   190d8:	85 e1       	ldi	r24, 0x15	; 21
   190da:	91 e1       	ldi	r25, 0x11	; 17
   190dc:	0e 94 d7 c3 	call	0x187ae	; 0x187ae <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
   190e0:	85 e1       	ldi	r24, 0x15	; 21
   190e2:	91 e1       	ldi	r25, 0x11	; 17
   190e4:	0e 94 cd c4 	call	0x1899a	; 0x1899a <TwoWire::endTransmission()>
   190e8:	c8 2f       	mov	r28, r24
   190ea:	81 11       	cpse	r24, r1
   190ec:	1d c0       	rjmp	.+58     	; 0x19128 <ds2482owWriteByte(unsigned char, unsigned char)+0x74>
   190ee:	1e ef       	ldi	r17, 0xFE	; 254
   190f0:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
   190f2:	e1 f0       	breq	.+56     	; 0x1912c <ds2482owWriteByte(unsigned char, unsigned char)+0x78>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   190f4:	41 e0       	ldi	r20, 0x01	; 1
   190f6:	60 2f       	mov	r22, r16
   190f8:	85 e1       	ldi	r24, 0x15	; 21
   190fa:	91 e1       	ldi	r25, 0x11	; 17
   190fc:	0e 94 c7 c4 	call	0x1898e	; 0x1898e <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
   19100:	85 e1       	ldi	r24, 0x15	; 21
   19102:	91 e1       	ldi	r25, 0x11	; 17
   19104:	0e 94 77 c3 	call	0x186ee	; 0x186ee <TwoWire::available()>
   19108:	18 16       	cp	r1, r24
   1910a:	19 06       	cpc	r1, r25
   1910c:	2c f4       	brge	.+10     	; 0x19118 <ds2482owWriteByte(unsigned char, unsigned char)+0x64>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
   1910e:	85 e1       	ldi	r24, 0x15	; 21
   19110:	91 e1       	ldi	r25, 0x11	; 17
   19112:	0e 94 7e c3 	call	0x186fc	; 0x186fc <TwoWire::read()>
   19116:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
   19118:	d0 fd       	sbrc	r29, 0
   1911a:	ea cf       	rjmp	.-44     	; 0x190f0 <ds2482owWriteByte(unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
   1911c:	8c 2f       	mov	r24, r28
   1911e:	df 91       	pop	r29
   19120:	cf 91       	pop	r28
   19122:	1f 91       	pop	r17
   19124:	0f 91       	pop	r16
   19126:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   19128:	c3 e0       	ldi	r28, 0x03	; 3
   1912a:	f8 cf       	rjmp	.-16     	; 0x1911c <ds2482owWriteByte(unsigned char, unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
   1912c:	c4 e0       	ldi	r28, 0x04	; 4
   1912e:	f6 cf       	rjmp	.-20     	; 0x1911c <ds2482owWriteByte(unsigned char, unsigned char)+0x68>

00019130 <ds2482owWriteTriplet(unsigned char, unsigned char*)>:
_Z20ds2482owWriteTriplethPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:645
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 */
uint8_t ds2482owWriteTriplet(uint8_t address, uint8_t *direction)
{
   19130:	ff 92       	push	r15
   19132:	0f 93       	push	r16
   19134:	1f 93       	push	r17
   19136:	cf 93       	push	r28
   19138:	df 93       	push	r29
   1913a:	f8 2e       	mov	r15, r24
   1913c:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   1913e:	68 2f       	mov	r22, r24
   19140:	85 e1       	ldi	r24, 0x15	; 21
   19142:	91 e1       	ldi	r25, 0x11	; 17
   19144:	0e 94 45 c4 	call	0x1888a	; 0x1888a <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   19148:	68 e7       	ldi	r22, 0x78	; 120
   1914a:	70 e0       	ldi	r23, 0x00	; 0
   1914c:	85 e1       	ldi	r24, 0x15	; 21
   1914e:	91 e1       	ldi	r25, 0x11	; 17
   19150:	0e 94 4f c1 	call	0x1829e	; 0x1829e <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   19154:	f8 01       	movw	r30, r16
   19156:	80 81       	ld	r24, Z
   19158:	70 e0       	ldi	r23, 0x00	; 0
   1915a:	60 e0       	ldi	r22, 0x00	; 0
   1915c:	88 23       	and	r24, r24
   1915e:	11 f0       	breq	.+4      	; 0x19164 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x34>
   19160:	60 e8       	ldi	r22, 0x80	; 128
   19162:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668 (discriminator 4)
   19164:	85 e1       	ldi	r24, 0x15	; 21
   19166:	91 e1       	ldi	r25, 0x11	; 17
   19168:	0e 94 4f c1 	call	0x1829e	; 0x1829e <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669 (discriminator 4)
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1916c:	85 e1       	ldi	r24, 0x15	; 21
   1916e:	91 e1       	ldi	r25, 0x11	; 17
   19170:	0e 94 cd c4 	call	0x1899a	; 0x1899a <TwoWire::endTransmission()>
   19174:	c8 2f       	mov	r28, r24
   19176:	81 11       	cpse	r24, r1
   19178:	21 c0       	rjmp	.+66     	; 0x191bc <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x8c>
   1917a:	de ef       	ldi	r29, 0xFE	; 254
   1917c:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   1917e:	01 f1       	breq	.+64     	; 0x191c0 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x90>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   19180:	41 e0       	ldi	r20, 0x01	; 1
   19182:	6f 2d       	mov	r22, r15
   19184:	85 e1       	ldi	r24, 0x15	; 21
   19186:	91 e1       	ldi	r25, 0x11	; 17
   19188:	0e 94 c7 c4 	call	0x1898e	; 0x1898e <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   1918c:	85 e1       	ldi	r24, 0x15	; 21
   1918e:	91 e1       	ldi	r25, 0x11	; 17
   19190:	0e 94 77 c3 	call	0x186ee	; 0x186ee <TwoWire::available()>
   19194:	18 16       	cp	r1, r24
   19196:	19 06       	cpc	r1, r25
   19198:	34 f4       	brge	.+12     	; 0x191a6 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x76>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   1919a:	85 e1       	ldi	r24, 0x15	; 21
   1919c:	91 e1       	ldi	r25, 0x11	; 17
   1919e:	0e 94 7e c3 	call	0x186fc	; 0x186fc <TwoWire::read()>
   191a2:	f8 01       	movw	r30, r16
   191a4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   191a6:	f8 01       	movw	r30, r16
   191a8:	80 81       	ld	r24, Z
   191aa:	80 fd       	sbrc	r24, 0
   191ac:	e7 cf       	rjmp	.-50     	; 0x1917c <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x4c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:706
			break;
	}
	return DS2482_ERR_OK;
}
   191ae:	8c 2f       	mov	r24, r28
   191b0:	df 91       	pop	r29
   191b2:	cf 91       	pop	r28
   191b4:	1f 91       	pop	r17
   191b6:	0f 91       	pop	r16
   191b8:	ff 90       	pop	r15
   191ba:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   191bc:	c3 e0       	ldi	r28, 0x03	; 3
   191be:	f7 cf       	rjmp	.-18     	; 0x191ae <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x7e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   191c0:	c4 e0       	ldi	r28, 0x04	; 4
   191c2:	f5 cf       	rjmp	.-22     	; 0x191ae <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x7e>

000191c4 <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
   191c4:	ff 92       	push	r15
   191c6:	0f 93       	push	r16
   191c8:	1f 93       	push	r17
   191ca:	cf 93       	push	r28
   191cc:	df 93       	push	r29
   191ce:	d8 2f       	mov	r29, r24
   191d0:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
   191d2:	68 2f       	mov	r22, r24
   191d4:	85 e1       	ldi	r24, 0x15	; 21
   191d6:	91 e1       	ldi	r25, 0x11	; 17
   191d8:	0e 94 45 c4 	call	0x1888a	; 0x1888a <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
   191dc:	66 e9       	ldi	r22, 0x96	; 150
   191de:	70 e0       	ldi	r23, 0x00	; 0
   191e0:	85 e1       	ldi	r24, 0x15	; 21
   191e2:	91 e1       	ldi	r25, 0x11	; 17
   191e4:	0e 94 4f c1 	call	0x1829e	; 0x1829e <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
   191e8:	85 e1       	ldi	r24, 0x15	; 21
   191ea:	91 e1       	ldi	r25, 0x11	; 17
   191ec:	0e 94 cd c4 	call	0x1899a	; 0x1899a <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
   191f0:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRB);
        if (Wire.endTransmission() != I2C_ERROR_OK)
   191f2:	81 11       	cpse	r24, r1
   191f4:	31 c0       	rjmp	.+98     	; 0x19258 <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
   191f6:	ce ef       	ldi	r28, 0xFE	; 254
   191f8:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   191fa:	a9 f1       	breq	.+106    	; 0x19266 <ds2482owReadByte(unsigned char, unsigned char*)+0xa2>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   191fc:	41 e0       	ldi	r20, 0x01	; 1
   191fe:	6d 2f       	mov	r22, r29
   19200:	85 e1       	ldi	r24, 0x15	; 21
   19202:	91 e1       	ldi	r25, 0x11	; 17
   19204:	0e 94 c7 c4 	call	0x1898e	; 0x1898e <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
   19208:	85 e1       	ldi	r24, 0x15	; 21
   1920a:	91 e1       	ldi	r25, 0x11	; 17
   1920c:	0e 94 77 c3 	call	0x186ee	; 0x186ee <TwoWire::available()>
   19210:	18 16       	cp	r1, r24
   19212:	19 06       	cpc	r1, r25
   19214:	2c f4       	brge	.+10     	; 0x19220 <ds2482owReadByte(unsigned char, unsigned char*)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
   19216:	85 e1       	ldi	r24, 0x15	; 21
   19218:	91 e1       	ldi	r25, 0x11	; 17
   1921a:	0e 94 7e c3 	call	0x186fc	; 0x186fc <TwoWire::read()>
   1921e:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
   19220:	f0 fc       	sbrc	r15, 0
   19222:	ea cf       	rjmp	.-44     	; 0x191f8 <ds2482owReadByte(unsigned char, unsigned char*)+0x34>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:780
			break;
	}

	/* Now set read pointer to data register */
	t = ds2482setReadPointer(address, DS2482_P_DATA);
   19224:	61 ee       	ldi	r22, 0xE1	; 225
   19226:	8d 2f       	mov	r24, r29
   19228:	0e 94 d2 c7 	call	0x18fa4	; 0x18fa4 <ds2482setReadPointer(unsigned char, unsigned char)>
   1922c:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:781
	if(t)	/* Error? */
   1922e:	81 11       	cpse	r24, r1
   19230:	13 c0       	rjmp	.+38     	; 0x19258 <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
   19232:	41 e0       	ldi	r20, 0x01	; 1
   19234:	6d 2f       	mov	r22, r29
   19236:	85 e1       	ldi	r24, 0x15	; 21
   19238:	91 e1       	ldi	r25, 0x11	; 17
   1923a:	0e 94 c7 c4 	call	0x1898e	; 0x1898e <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
   1923e:	85 e1       	ldi	r24, 0x15	; 21
   19240:	91 e1       	ldi	r25, 0x11	; 17
   19242:	0e 94 77 c3 	call	0x186ee	; 0x186ee <TwoWire::available()>
   19246:	18 16       	cp	r1, r24
   19248:	19 06       	cpc	r1, r25
   1924a:	34 f4       	brge	.+12     	; 0x19258 <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
   1924c:	85 e1       	ldi	r24, 0x15	; 21
   1924e:	91 e1       	ldi	r25, 0x11	; 17
   19250:	0e 94 7e c3 	call	0x186fc	; 0x186fc <TwoWire::read()>
   19254:	f8 01       	movw	r30, r16
   19256:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809

	return DS2482_ERR_OK;
}
   19258:	8c 2f       	mov	r24, r28
   1925a:	df 91       	pop	r29
   1925c:	cf 91       	pop	r28
   1925e:	1f 91       	pop	r17
   19260:	0f 91       	pop	r16
   19262:	ff 90       	pop	r15
   19264:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   19266:	c4 e0       	ldi	r28, 0x04	; 4
   19268:	f7 cf       	rjmp	.-18     	; 0x19258 <ds2482owReadByte(unsigned char, unsigned char*)+0x94>

0001926a <NTPClient::NTPClient(UDP&)>:
_ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:160 (discriminator 2)

  unsigned long minutes = (rawTime % 3600) / 60;
  String minuteStr = minutes < 10 ? "0" + String(minutes) : String(minutes);

  unsigned long seconds = rawTime % 60;
  String secondStr = seconds < 10 ? "0" + String(seconds) : String(seconds);
   1926a:	fc 01       	movw	r30, r24
   1926c:	12 82       	std	Z+2, r1	; 0x02
   1926e:	8d e9       	ldi	r24, 0x9D	; 157
   19270:	98 e0       	ldi	r25, 0x08	; 8
   19272:	94 83       	std	Z+4, r25	; 0x04
   19274:	83 83       	std	Z+3, r24	; 0x03
   19276:	89 e3       	ldi	r24, 0x39	; 57
   19278:	95 e0       	ldi	r25, 0x05	; 5
   1927a:	96 83       	std	Z+6, r25	; 0x06
   1927c:	85 83       	std	Z+5, r24	; 0x05
   1927e:	17 82       	std	Z+7, r1	; 0x07
   19280:	10 86       	std	Z+8, r1	; 0x08
   19282:	11 86       	std	Z+9, r1	; 0x09
   19284:	12 86       	std	Z+10, r1	; 0x0a
   19286:	80 e6       	ldi	r24, 0x60	; 96
   19288:	9a ee       	ldi	r25, 0xEA	; 234
   1928a:	a0 e0       	ldi	r26, 0x00	; 0
   1928c:	b0 e0       	ldi	r27, 0x00	; 0
   1928e:	83 87       	std	Z+11, r24	; 0x0b
   19290:	94 87       	std	Z+12, r25	; 0x0c
   19292:	a5 87       	std	Z+13, r26	; 0x0d
   19294:	b6 87       	std	Z+14, r27	; 0x0e
   19296:	17 86       	std	Z+15, r1	; 0x0f
   19298:	10 8a       	std	Z+16, r1	; 0x10
   1929a:	11 8a       	std	Z+17, r1	; 0x11
   1929c:	12 8a       	std	Z+18, r1	; 0x12
   1929e:	13 8a       	std	Z+19, r1	; 0x13
   192a0:	14 8a       	std	Z+20, r1	; 0x14
   192a2:	15 8a       	std	Z+21, r1	; 0x15
   192a4:	16 8a       	std	Z+22, r1	; 0x16
   192a6:	71 83       	std	Z+1, r23	; 0x01
   192a8:	60 83       	st	Z, r22
   192aa:	08 95       	ret

000192ac <NTPClient::begin(int)>:
_ZN9NTPClient5beginEi():
   192ac:	cf 93       	push	r28
   192ae:	df 93       	push	r29
   192b0:	ec 01       	movw	r28, r24
   192b2:	7e 83       	std	Y+6, r23	; 0x06
   192b4:	6d 83       	std	Y+5, r22	; 0x05
   192b6:	88 81       	ld	r24, Y
   192b8:	99 81       	ldd	r25, Y+1	; 0x01
   192ba:	dc 01       	movw	r26, r24
   192bc:	ed 91       	ld	r30, X+
   192be:	fc 91       	ld	r31, X
   192c0:	06 84       	ldd	r0, Z+14	; 0x0e
   192c2:	f7 85       	ldd	r31, Z+15	; 0x0f
   192c4:	e0 2d       	mov	r30, r0
   192c6:	19 95       	eicall
   192c8:	81 e0       	ldi	r24, 0x01	; 1
   192ca:	8a 83       	std	Y+2, r24	; 0x02
   192cc:	df 91       	pop	r29
   192ce:	cf 91       	pop	r28
   192d0:	08 95       	ret

000192d2 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
   192d2:	69 e3       	ldi	r22, 0x39	; 57
   192d4:	75 e0       	ldi	r23, 0x05	; 5
   192d6:	0c 94 56 c9 	jmp	0x192ac	; 0x192ac <NTPClient::begin(int)>

000192da <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
   192da:	cf 92       	push	r12
   192dc:	df 92       	push	r13
   192de:	ef 92       	push	r14
   192e0:	ff 92       	push	r15
   192e2:	0f 93       	push	r16
   192e4:	1f 93       	push	r17
   192e6:	cf 93       	push	r28
   192e8:	df 93       	push	r29
   192ea:	ec 01       	movw	r28, r24
   192ec:	cf 80       	ldd	r12, Y+7	; 0x07
   192ee:	d8 84       	ldd	r13, Y+8	; 0x08
   192f0:	e9 84       	ldd	r14, Y+9	; 0x09
   192f2:	fa 84       	ldd	r15, Y+10	; 0x0a
   192f4:	8f 85       	ldd	r24, Y+15	; 0x0f
   192f6:	98 89       	ldd	r25, Y+16	; 0x10
   192f8:	a9 89       	ldd	r26, Y+17	; 0x11
   192fa:	ba 89       	ldd	r27, Y+18	; 0x12
   192fc:	c8 0e       	add	r12, r24
   192fe:	d9 1e       	adc	r13, r25
   19300:	ea 1e       	adc	r14, r26
   19302:	fb 1e       	adc	r15, r27
   19304:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   19308:	0b 89       	ldd	r16, Y+19	; 0x13
   1930a:	1c 89       	ldd	r17, Y+20	; 0x14
   1930c:	2d 89       	ldd	r18, Y+21	; 0x15
   1930e:	3e 89       	ldd	r19, Y+22	; 0x16
   19310:	60 1b       	sub	r22, r16
   19312:	71 0b       	sbc	r23, r17
   19314:	82 0b       	sbc	r24, r18
   19316:	93 0b       	sbc	r25, r19
   19318:	28 ee       	ldi	r18, 0xE8	; 232
   1931a:	33 e0       	ldi	r19, 0x03	; 3
   1931c:	40 e0       	ldi	r20, 0x00	; 0
   1931e:	50 e0       	ldi	r21, 0x00	; 0
   19320:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
   19324:	ca 01       	movw	r24, r20
   19326:	b9 01       	movw	r22, r18
   19328:	6c 0d       	add	r22, r12
   1932a:	7d 1d       	adc	r23, r13
   1932c:	8e 1d       	adc	r24, r14
   1932e:	9f 1d       	adc	r25, r15
   19330:	df 91       	pop	r29
   19332:	cf 91       	pop	r28
   19334:	1f 91       	pop	r17
   19336:	0f 91       	pop	r16
   19338:	ff 90       	pop	r15
   1933a:	ef 90       	pop	r14
   1933c:	df 90       	pop	r13
   1933e:	cf 90       	pop	r12
   19340:	08 95       	ret

00019342 <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
   19342:	cf 93       	push	r28
   19344:	df 93       	push	r29
   19346:	00 d0       	rcall	.+0      	; 0x19348 <NTPClient::getYear() const+0x6>
   19348:	1f 92       	push	r1
   1934a:	cd b7       	in	r28, 0x3d	; 61
   1934c:	de b7       	in	r29, 0x3e	; 62
   1934e:	0e 94 6d c9 	call	0x192da	; 0x192da <NTPClient::getEpochTime() const>
   19352:	69 83       	std	Y+1, r22	; 0x01
   19354:	7a 83       	std	Y+2, r23	; 0x02
   19356:	8b 83       	std	Y+3, r24	; 0x03
   19358:	9c 83       	std	Y+4, r25	; 0x04
   1935a:	ce 01       	movw	r24, r28
   1935c:	01 96       	adiw	r24, 0x01	; 1
   1935e:	0e 94 58 31 	call	0x62b0	; 0x62b0 <localtime>
   19362:	fc 01       	movw	r30, r24
   19364:	86 81       	ldd	r24, Z+6	; 0x06
   19366:	97 81       	ldd	r25, Z+7	; 0x07
   19368:	84 59       	subi	r24, 0x94	; 148
   1936a:	98 4f       	sbci	r25, 0xF8	; 248
   1936c:	0f 90       	pop	r0
   1936e:	0f 90       	pop	r0
   19370:	0f 90       	pop	r0
   19372:	0f 90       	pop	r0
   19374:	df 91       	pop	r29
   19376:	cf 91       	pop	r28
   19378:	08 95       	ret

0001937a <NTPClient::getMonth() const>:
_ZNK9NTPClient8getMonthEv():
   1937a:	cf 93       	push	r28
   1937c:	df 93       	push	r29
   1937e:	00 d0       	rcall	.+0      	; 0x19380 <NTPClient::getMonth() const+0x6>
   19380:	1f 92       	push	r1
   19382:	cd b7       	in	r28, 0x3d	; 61
   19384:	de b7       	in	r29, 0x3e	; 62
   19386:	0e 94 6d c9 	call	0x192da	; 0x192da <NTPClient::getEpochTime() const>
   1938a:	69 83       	std	Y+1, r22	; 0x01
   1938c:	7a 83       	std	Y+2, r23	; 0x02
   1938e:	8b 83       	std	Y+3, r24	; 0x03
   19390:	9c 83       	std	Y+4, r25	; 0x04
   19392:	ce 01       	movw	r24, r28
   19394:	01 96       	adiw	r24, 0x01	; 1
   19396:	0e 94 58 31 	call	0x62b0	; 0x62b0 <localtime>
   1939a:	fc 01       	movw	r30, r24
   1939c:	85 81       	ldd	r24, Z+5	; 0x05
   1939e:	08 2e       	mov	r0, r24
   193a0:	00 0c       	add	r0, r0
   193a2:	99 0b       	sbc	r25, r25
   193a4:	01 96       	adiw	r24, 0x01	; 1
   193a6:	0f 90       	pop	r0
   193a8:	0f 90       	pop	r0
   193aa:	0f 90       	pop	r0
   193ac:	0f 90       	pop	r0
   193ae:	df 91       	pop	r29
   193b0:	cf 91       	pop	r28
   193b2:	08 95       	ret

000193b4 <NTPClient::getDate() const>:
_ZNK9NTPClient7getDateEv():
   193b4:	cf 93       	push	r28
   193b6:	df 93       	push	r29
   193b8:	00 d0       	rcall	.+0      	; 0x193ba <NTPClient::getDate() const+0x6>
   193ba:	1f 92       	push	r1
   193bc:	cd b7       	in	r28, 0x3d	; 61
   193be:	de b7       	in	r29, 0x3e	; 62
   193c0:	0e 94 6d c9 	call	0x192da	; 0x192da <NTPClient::getEpochTime() const>
   193c4:	69 83       	std	Y+1, r22	; 0x01
   193c6:	7a 83       	std	Y+2, r23	; 0x02
   193c8:	8b 83       	std	Y+3, r24	; 0x03
   193ca:	9c 83       	std	Y+4, r25	; 0x04
   193cc:	ce 01       	movw	r24, r28
   193ce:	01 96       	adiw	r24, 0x01	; 1
   193d0:	0e 94 58 31 	call	0x62b0	; 0x62b0 <localtime>
   193d4:	fc 01       	movw	r30, r24
   193d6:	83 81       	ldd	r24, Z+3	; 0x03
   193d8:	08 2e       	mov	r0, r24
   193da:	00 0c       	add	r0, r0
   193dc:	99 0b       	sbc	r25, r25
   193de:	0f 90       	pop	r0
   193e0:	0f 90       	pop	r0
   193e2:	0f 90       	pop	r0
   193e4:	0f 90       	pop	r0
   193e6:	df 91       	pop	r29
   193e8:	cf 91       	pop	r28
   193ea:	08 95       	ret

000193ec <NTPClient::getHours() const>:
_ZNK9NTPClient8getHoursEv():
   193ec:	0e 94 6d c9 	call	0x192da	; 0x192da <NTPClient::getEpochTime() const>
   193f0:	20 e8       	ldi	r18, 0x80	; 128
   193f2:	31 e5       	ldi	r19, 0x51	; 81
   193f4:	41 e0       	ldi	r20, 0x01	; 1
   193f6:	50 e0       	ldi	r21, 0x00	; 0
   193f8:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
   193fc:	20 e1       	ldi	r18, 0x10	; 16
   193fe:	3e e0       	ldi	r19, 0x0E	; 14
   19400:	40 e0       	ldi	r20, 0x00	; 0
   19402:	50 e0       	ldi	r21, 0x00	; 0
   19404:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
   19408:	c9 01       	movw	r24, r18
   1940a:	08 95       	ret

0001940c <NTPClient::getMinutes() const>:
_ZNK9NTPClient10getMinutesEv():
   1940c:	0e 94 6d c9 	call	0x192da	; 0x192da <NTPClient::getEpochTime() const>
   19410:	20 e1       	ldi	r18, 0x10	; 16
   19412:	3e e0       	ldi	r19, 0x0E	; 14
   19414:	40 e0       	ldi	r20, 0x00	; 0
   19416:	50 e0       	ldi	r21, 0x00	; 0
   19418:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
   1941c:	2c e3       	ldi	r18, 0x3C	; 60
   1941e:	30 e0       	ldi	r19, 0x00	; 0
   19420:	40 e0       	ldi	r20, 0x00	; 0
   19422:	50 e0       	ldi	r21, 0x00	; 0
   19424:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
   19428:	c9 01       	movw	r24, r18
   1942a:	08 95       	ret

0001942c <NTPClient::getSeconds() const>:
_ZNK9NTPClient10getSecondsEv():
   1942c:	0e 94 6d c9 	call	0x192da	; 0x192da <NTPClient::getEpochTime() const>
   19430:	2c e3       	ldi	r18, 0x3C	; 60
   19432:	30 e0       	ldi	r19, 0x00	; 0
   19434:	40 e0       	ldi	r20, 0x00	; 0
   19436:	50 e0       	ldi	r21, 0x00	; 0
   19438:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
   1943c:	cb 01       	movw	r24, r22
   1943e:	08 95       	ret

00019440 <NTPClient::end()>:
_ZN9NTPClient3endEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:165

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
   19440:	cf 93       	push	r28
   19442:	df 93       	push	r29
   19444:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166
  this->_udp->stop();
   19446:	88 81       	ld	r24, Y
   19448:	99 81       	ldd	r25, Y+1	; 0x01
   1944a:	dc 01       	movw	r26, r24
   1944c:	ed 91       	ld	r30, X+
   1944e:	fc 91       	ld	r31, X
   19450:	02 88       	ldd	r0, Z+18	; 0x12
   19452:	f3 89       	ldd	r31, Z+19	; 0x13
   19454:	e0 2d       	mov	r30, r0
   19456:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   19458:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:169
}
   1945a:	df 91       	pop	r29
   1945c:	cf 91       	pop	r28
   1945e:	08 95       	ret

00019460 <NTPClient::setTimeOffset(int)>:
_ZN9NTPClient13setTimeOffsetEi():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   19460:	ab 01       	movw	r20, r22
   19462:	77 0f       	add	r23, r23
   19464:	66 0b       	sbc	r22, r22
   19466:	77 0b       	sbc	r23, r23
   19468:	fc 01       	movw	r30, r24
   1946a:	47 83       	std	Z+7, r20	; 0x07
   1946c:	50 87       	std	Z+8, r21	; 0x08
   1946e:	61 87       	std	Z+9, r22	; 0x09
   19470:	72 87       	std	Z+10, r23	; 0x0a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:173
}
   19472:	08 95       	ret

00019474 <NTPClient::setUpdateInterval(unsigned long)>:
_ZN9NTPClient17setUpdateIntervalEm():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
   19474:	fc 01       	movw	r30, r24
   19476:	43 87       	std	Z+11, r20	; 0x0b
   19478:	54 87       	std	Z+12, r21	; 0x0c
   1947a:	65 87       	std	Z+13, r22	; 0x0d
   1947c:	76 87       	std	Z+14, r23	; 0x0e
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:177
}
   1947e:	08 95       	ret

00019480 <NTPClient::setPoolServerName(char const*)>:
_ZN9NTPClient17setPoolServerNameEPKc():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   19480:	fc 01       	movw	r30, r24
   19482:	74 83       	std	Z+4, r23	; 0x04
   19484:	63 83       	std	Z+3, r22	; 0x03
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:181
}
   19486:	08 95       	ret

00019488 <NTPClient::sendNTPPacket()>:
_ZN9NTPClient13sendNTPPacketEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:183

void NTPClient::sendNTPPacket() {
   19488:	cf 93       	push	r28
   1948a:	df 93       	push	r29
   1948c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   1948e:	fc 01       	movw	r30, r24
   19490:	7b 96       	adiw	r30, 0x1b	; 27
   19492:	8c e2       	ldi	r24, 0x2C	; 44
   19494:	df 01       	movw	r26, r30
   19496:	1d 92       	st	X+, r1
   19498:	8a 95       	dec	r24
   1949a:	e9 f7       	brne	.-6      	; 0x19496 <NTPClient::sendNTPPacket()+0xe>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
   1949c:	83 ee       	ldi	r24, 0xE3	; 227
   1949e:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
   194a0:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
   194a2:	86 e0       	ldi	r24, 0x06	; 6
   194a4:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
   194a6:	8c ee       	ldi	r24, 0xEC	; 236
   194a8:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
   194aa:	81 e3       	ldi	r24, 0x31	; 49
   194ac:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
   194ae:	9e e4       	ldi	r25, 0x4E	; 78
   194b0:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
   194b2:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
   194b4:	84 e3       	ldi	r24, 0x34	; 52
   194b6:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
   194b8:	88 81       	ld	r24, Y
   194ba:	99 81       	ldd	r25, Y+1	; 0x01
   194bc:	6b 81       	ldd	r22, Y+3	; 0x03
   194be:	7c 81       	ldd	r23, Y+4	; 0x04
   194c0:	dc 01       	movw	r26, r24
   194c2:	ed 91       	ld	r30, X+
   194c4:	fc 91       	ld	r31, X
   194c6:	06 88       	ldd	r0, Z+22	; 0x16
   194c8:	f7 89       	ldd	r31, Z+23	; 0x17
   194ca:	e0 2d       	mov	r30, r0
   194cc:	4b e7       	ldi	r20, 0x7B	; 123
   194ce:	50 e0       	ldi	r21, 0x00	; 0
   194d0:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   194d2:	88 81       	ld	r24, Y
   194d4:	99 81       	ldd	r25, Y+1	; 0x01
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   194d6:	be 01       	movw	r22, r28
   194d8:	69 5e       	subi	r22, 0xE9	; 233
   194da:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_packetBuffer[15]  = 52;

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   194dc:	dc 01       	movw	r26, r24
   194de:	ed 91       	ld	r30, X+
   194e0:	fc 91       	ld	r31, X
   194e2:	02 80       	ldd	r0, Z+2	; 0x02
   194e4:	f3 81       	ldd	r31, Z+3	; 0x03
   194e6:	e0 2d       	mov	r30, r0
   194e8:	40 e3       	ldi	r20, 0x30	; 48
   194ea:	50 e0       	ldi	r21, 0x00	; 0
   194ec:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
   194ee:	88 81       	ld	r24, Y
   194f0:	99 81       	ldd	r25, Y+1	; 0x01
   194f2:	dc 01       	movw	r26, r24
   194f4:	ed 91       	ld	r30, X+
   194f6:	fc 91       	ld	r31, X
   194f8:	00 8c       	ldd	r0, Z+24	; 0x18
   194fa:	f1 8d       	ldd	r31, Z+25	; 0x19
   194fc:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
}
   194fe:	df 91       	pop	r29
   19500:	cf 91       	pop	r28
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
  this->_udp->endPacket();
   19502:	19 94       	eijmp

00019504 <NTPClient::forceUpdate()>:
_ZN9NTPClient11forceUpdateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:64
  this->_udp->begin(this->_port);

  this->_udpSetup = true;
}

bool NTPClient::forceUpdate() {
   19504:	0f 93       	push	r16
   19506:	1f 93       	push	r17
   19508:	cf 93       	push	r28
   1950a:	df 93       	push	r29
   1950c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:69
  #ifdef DEBUG_NTPClient
    Serial.println("Update from NTP Server");
  #endif

  this->sendNTPPacket();
   1950e:	0e 94 44 ca 	call	0x19488	; 0x19488 <NTPClient::sendNTPPacket()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72

  // Wait till data is there or timeout...
  byte timeout = 0;
   19512:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
   19514:	6a e0       	ldi	r22, 0x0A	; 10
   19516:	70 e0       	ldi	r23, 0x00	; 0
   19518:	80 e0       	ldi	r24, 0x00	; 0
   1951a:	90 e0       	ldi	r25, 0x00	; 0
   1951c:	0e 94 50 cc 	call	0x198a0	; 0x198a0 <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
   19520:	88 81       	ld	r24, Y
   19522:	99 81       	ldd	r25, Y+1	; 0x01
   19524:	dc 01       	movw	r26, r24
   19526:	ed 91       	ld	r30, X+
   19528:	fc 91       	ld	r31, X
   1952a:	02 8c       	ldd	r0, Z+26	; 0x1a
   1952c:	f3 8d       	ldd	r31, Z+27	; 0x1b
   1952e:	e0 2d       	mov	r30, r0
   19530:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
   19532:	15 36       	cpi	r17, 0x65	; 101
   19534:	09 f4       	brne	.+2      	; 0x19538 <NTPClient::forceUpdate()+0x34>
   19536:	59 c0       	rjmp	.+178    	; 0x195ea <NTPClient::forceUpdate()+0xe6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
   19538:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
   1953a:	89 2b       	or	r24, r25
   1953c:	59 f3       	breq	.-42     	; 0x19514 <NTPClient::forceUpdate()+0x10>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
   1953e:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   19542:	21 2f       	mov	r18, r17
   19544:	30 e0       	ldi	r19, 0x00	; 0
   19546:	a9 01       	movw	r20, r18
   19548:	4f 5f       	subi	r20, 0xFF	; 255
   1954a:	5f 4f       	sbci	r21, 0xFF	; 255
   1954c:	ea e0       	ldi	r30, 0x0A	; 10
   1954e:	e4 9f       	mul	r30, r20
   19550:	90 01       	movw	r18, r0
   19552:	e5 9f       	mul	r30, r21
   19554:	30 0d       	add	r19, r0
   19556:	11 24       	eor	r1, r1
   19558:	89 01       	movw	r16, r18
   1955a:	33 0f       	add	r19, r19
   1955c:	22 0b       	sbc	r18, r18
   1955e:	33 0b       	sbc	r19, r19
   19560:	ab 01       	movw	r20, r22
   19562:	bc 01       	movw	r22, r24
   19564:	40 1b       	sub	r20, r16
   19566:	51 0b       	sbc	r21, r17
   19568:	62 0b       	sbc	r22, r18
   1956a:	73 0b       	sbc	r23, r19
   1956c:	4b 8b       	std	Y+19, r20	; 0x13
   1956e:	5c 8b       	std	Y+20, r21	; 0x14
   19570:	6d 8b       	std	Y+21, r22	; 0x15
   19572:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
   19574:	88 81       	ld	r24, Y
   19576:	99 81       	ldd	r25, Y+1	; 0x01
   19578:	be 01       	movw	r22, r28
   1957a:	69 5e       	subi	r22, 0xE9	; 233
   1957c:	7f 4f       	sbci	r23, 0xFF	; 255
   1957e:	dc 01       	movw	r26, r24
   19580:	ed 91       	ld	r30, X+
   19582:	fc 91       	ld	r31, X
   19584:	04 8c       	ldd	r0, Z+28	; 0x1c
   19586:	f5 8d       	ldd	r31, Z+29	; 0x1d
   19588:	e0 2d       	mov	r30, r0
   1958a:	40 e3       	ldi	r20, 0x30	; 48
   1958c:	50 e0       	ldi	r21, 0x00	; 0
   1958e:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   19590:	fe 01       	movw	r30, r28
   19592:	e0 5c       	subi	r30, 0xC0	; 192
   19594:	ff 4f       	sbci	r31, 0xFF	; 255
   19596:	60 81       	ld	r22, Z
   19598:	8f ad       	ldd	r24, Y+63	; 0x3f
   1959a:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <makeWord(unsigned char, unsigned char)>
   1959e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   195a0:	de 01       	movw	r26, r28
   195a2:	ae 5b       	subi	r26, 0xBE	; 190
   195a4:	bf 4f       	sbci	r27, 0xFF	; 255
   195a6:	fe 01       	movw	r30, r28
   195a8:	ef 5b       	subi	r30, 0xBF	; 191
   195aa:	ff 4f       	sbci	r31, 0xFF	; 255
   195ac:	6c 91       	ld	r22, X
   195ae:	80 81       	ld	r24, Z
   195b0:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <makeWord(unsigned char, unsigned char)>
   195b4:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   195b6:	c8 01       	movw	r24, r16
   195b8:	b0 e0       	ldi	r27, 0x00	; 0
   195ba:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   195bc:	dc 01       	movw	r26, r24
   195be:	99 27       	eor	r25, r25
   195c0:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   195c2:	70 e0       	ldi	r23, 0x00	; 0
   195c4:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   195c6:	84 2b       	or	r24, r20
   195c8:	95 2b       	or	r25, r21
   195ca:	a6 2b       	or	r26, r22
   195cc:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
   195ce:	80 58       	subi	r24, 0x80	; 128
   195d0:	9e 47       	sbci	r25, 0x7E	; 126
   195d2:	aa 4a       	sbci	r26, 0xAA	; 170
   195d4:	b3 48       	sbci	r27, 0x83	; 131
   195d6:	8f 87       	std	Y+15, r24	; 0x0f
   195d8:	98 8b       	std	Y+16, r25	; 0x10
   195da:	a9 8b       	std	Y+17, r26	; 0x11
   195dc:	ba 8b       	std	Y+18, r27	; 0x12
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:93

  return true;
   195de:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:94
}
   195e0:	df 91       	pop	r29
   195e2:	cf 91       	pop	r28
   195e4:	1f 91       	pop	r17
   195e6:	0f 91       	pop	r16
   195e8:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
   195ea:	80 e0       	ldi	r24, 0x00	; 0
   195ec:	f9 cf       	rjmp	.-14     	; 0x195e0 <NTPClient::forceUpdate()+0xdc>

000195ee <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
   195ee:	cf 92       	push	r12
   195f0:	df 92       	push	r13
   195f2:	ef 92       	push	r14
   195f4:	ff 92       	push	r15
   195f6:	0f 93       	push	r16
   195f8:	1f 93       	push	r17
   195fa:	cf 93       	push	r28
   195fc:	df 93       	push	r29
   195fe:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
   19600:	0e 94 1f cc 	call	0x1983e	; 0x1983e <millis>
   19604:	0b 89       	ldd	r16, Y+19	; 0x13
   19606:	1c 89       	ldd	r17, Y+20	; 0x14
   19608:	2d 89       	ldd	r18, Y+21	; 0x15
   1960a:	3e 89       	ldd	r19, Y+22	; 0x16
   1960c:	60 1b       	sub	r22, r16
   1960e:	71 0b       	sbc	r23, r17
   19610:	82 0b       	sbc	r24, r18
   19612:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
   19614:	cb 84       	ldd	r12, Y+11	; 0x0b
   19616:	dc 84       	ldd	r13, Y+12	; 0x0c
   19618:	ed 84       	ldd	r14, Y+13	; 0x0d
   1961a:	fe 84       	ldd	r15, Y+14	; 0x0e
   1961c:	6c 15       	cp	r22, r12
   1961e:	7d 05       	cpc	r23, r13
   19620:	8e 05       	cpc	r24, r14
   19622:	9f 05       	cpc	r25, r15
   19624:	20 f4       	brcc	.+8      	; 0x1962e <NTPClient::update()+0x40>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98 (discriminator 2)
   19626:	01 2b       	or	r16, r17
   19628:	02 2b       	or	r16, r18
   1962a:	03 2b       	or	r16, r19
   1962c:	89 f4       	brne	.+34     	; 0x19650 <NTPClient::update()+0x62>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
   1962e:	8a 81       	ldd	r24, Y+2	; 0x02
   19630:	81 11       	cpse	r24, r1
   19632:	03 c0       	rjmp	.+6      	; 0x1963a <NTPClient::update()+0x4c>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99 (discriminator 1)
   19634:	ce 01       	movw	r24, r28
   19636:	0e 94 69 c9 	call	0x192d2	; 0x192d2 <NTPClient::begin()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:100
    return this->forceUpdate();
   1963a:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
  }
  return true;
}
   1963c:	df 91       	pop	r29
   1963e:	cf 91       	pop	r28
   19640:	1f 91       	pop	r17
   19642:	0f 91       	pop	r16
   19644:	ff 90       	pop	r15
   19646:	ef 90       	pop	r14
   19648:	df 90       	pop	r13
   1964a:	cf 90       	pop	r12
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:100

bool NTPClient::update() {
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
   1964c:	0c 94 82 ca 	jmp	0x19504	; 0x19504 <NTPClient::forceUpdate()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
  }
  return true;
}
   19650:	81 e0       	ldi	r24, 0x01	; 1
   19652:	df 91       	pop	r29
   19654:	cf 91       	pop	r28
   19656:	1f 91       	pop	r17
   19658:	0f 91       	pop	r16
   1965a:	ff 90       	pop	r15
   1965c:	ef 90       	pop	r14
   1965e:	df 90       	pop	r13
   19660:	cf 90       	pop	r12
   19662:	08 95       	ret

00019664 <_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP>:
_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
  this->_udp->endPacket();
}
   19664:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   19666:	00 e0       	ldi	r16, 0x00	; 0
   19668:	20 e0       	ldi	r18, 0x00	; 0
   1966a:	40 e0       	ldi	r20, 0x00	; 0
   1966c:	60 e0       	ldi	r22, 0x00	; 0
   1966e:	8b ed       	ldi	r24, 0xDB	; 219
   19670:	91 e1       	ldi	r25, 0x11	; 17
   19672:	0e 94 97 cf 	call	0x19f2e	; 0x19f2e <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
   19676:	0f 91       	pop	r16
   19678:	08 95       	ret

0001967a <a2d_handler(void (*)(unsigned char, unsigned int))>:
_Z11a2d_handlerPFvhjE():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:53
/// deinicializace a2d prevodniku ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void deinit_a2d(void)
{
ADCSRA = 0;
ADMUX = 0;
}
   1967a:	90 93 e2 11 	sts	0x11E2, r25	; 0x8011e2 <a2d_interupt_func+0x1>
   1967e:	80 93 e1 11 	sts	0x11E1, r24	; 0x8011e1 <a2d_interupt_func>
   19682:	08 95       	ret

00019684 <init_a2d(unsigned char, unsigned char, unsigned char)>:
_Z8init_a2dhhh():
   19684:	80 93 e5 11 	sts	0x11E5, r24	; 0x8011e5 <a2d_enable>
   19688:	40 93 e4 11 	sts	0x11E4, r20	; 0x8011e4 <a2d_reference>
   1968c:	60 93 e3 11 	sts	0x11E3, r22	; 0x8011e3 <a2d_delicka>
   19690:	10 92 e6 11 	sts	0x11E6, r1	; 0x8011e6 <a2d_index>
   19694:	10 92 e9 11 	sts	0x11E9, r1	; 0x8011e9 <a2d_input>
   19698:	10 92 e8 11 	sts	0x11E8, r1	; 0x8011e8 <a2d_data+0x1>
   1969c:	10 92 e7 11 	sts	0x11E7, r1	; 0x8011e7 <a2d_data>
   196a0:	67 70       	andi	r22, 0x07	; 7
   196a2:	68 57       	subi	r22, 0x78	; 120
   196a4:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   196a8:	ec e7       	ldi	r30, 0x7C	; 124
   196aa:	f0 e0       	ldi	r31, 0x00	; 0
   196ac:	10 82       	st	Z, r1
   196ae:	80 91 e4 11 	lds	r24, 0x11E4	; 0x8011e4 <a2d_reference>
   196b2:	20 e4       	ldi	r18, 0x40	; 64
   196b4:	82 9f       	mul	r24, r18
   196b6:	c0 01       	movw	r24, r0
   196b8:	11 24       	eor	r1, r1
   196ba:	80 83       	st	Z, r24
   196bc:	08 95       	ret

000196be <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
   196be:	90 91 e4 11 	lds	r25, 0x11E4	; 0x8011e4 <a2d_reference>
   196c2:	40 e4       	ldi	r20, 0x40	; 64
   196c4:	94 9f       	mul	r25, r20
   196c6:	90 01       	movw	r18, r0
   196c8:	11 24       	eor	r1, r1
   196ca:	98 2f       	mov	r25, r24
   196cc:	97 70       	andi	r25, 0x07	; 7
   196ce:	92 0f       	add	r25, r18
   196d0:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
   196d4:	80 93 e9 11 	sts	0x11E9, r24	; 0x8011e9 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
   196d8:	ea e7       	ldi	r30, 0x7A	; 122
   196da:	f0 e0       	ldi	r31, 0x00	; 0
   196dc:	80 81       	ld	r24, Z
   196de:	80 64       	ori	r24, 0x40	; 64
   196e0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
   196e2:	08 95       	ret

000196e4 <a2d_start_process()>:
_Z17a2d_start_processv():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   196e4:	30 91 e5 11 	lds	r19, 0x11E5	; 0x8011e5 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   196e8:	20 91 e6 11 	lds	r18, 0x11E6	; 0x8011e6 <a2d_index>
   196ec:	90 e0       	ldi	r25, 0x00	; 0
   196ee:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   196f0:	61 e0       	ldi	r22, 0x01	; 1
   196f2:	70 e0       	ldi	r23, 0x00	; 0
   196f4:	ab 01       	movw	r20, r22
   196f6:	08 2e       	mov	r0, r24
   196f8:	01 c0       	rjmp	.+2      	; 0x196fc <a2d_start_process()+0x18>
   196fa:	44 0f       	add	r20, r20
   196fc:	0a 94       	dec	r0
   196fe:	ea f7       	brpl	.-6      	; 0x196fa <a2d_start_process()+0x16>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   19700:	e3 2f       	mov	r30, r19
   19702:	e4 23       	and	r30, r20
   19704:	41 f0       	breq	.+16     	; 0x19716 <a2d_start_process()+0x32>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   19706:	e2 2f       	mov	r30, r18
   19708:	e4 23       	and	r30, r20
   1970a:	29 f4       	brne	.+10     	; 0x19716 <a2d_start_process()+0x32>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   1970c:	24 2b       	or	r18, r20
   1970e:	20 93 e6 11 	sts	0x11E6, r18	; 0x8011e6 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   19712:	0c 94 5f cb 	jmp	0x196be	; 0x196be <a2d_start_first(unsigned char)>
   19716:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67 (discriminator 2)
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   19718:	88 30       	cpi	r24, 0x08	; 8
   1971a:	91 05       	cpc	r25, r1
   1971c:	59 f7       	brne	.-42     	; 0x196f4 <a2d_start_process()+0x10>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   1971e:	10 92 e6 11 	sts	0x11E6, r1	; 0x8011e6 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:86
	//a2d_complete_funkce();
	}
}
   19722:	08 95       	ret

00019724 <a2d_done()>:
_Z8a2d_donev():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:92
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t a2d_done(void)
{
  return a2d_index;
}
   19724:	80 91 e6 11 	lds	r24, 0x11E6	; 0x8011e6 <a2d_index>
   19728:	08 95       	ret

0001972a <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95

ISR(ADC_vect)
{
   1972a:	1f 92       	push	r1
   1972c:	0f 92       	push	r0
   1972e:	0f b6       	in	r0, 0x3f	; 63
   19730:	0f 92       	push	r0
   19732:	11 24       	eor	r1, r1
   19734:	0b b6       	in	r0, 0x3b	; 59
   19736:	0f 92       	push	r0
   19738:	2f 93       	push	r18
   1973a:	3f 93       	push	r19
   1973c:	4f 93       	push	r20
   1973e:	5f 93       	push	r21
   19740:	6f 93       	push	r22
   19742:	7f 93       	push	r23
   19744:	8f 93       	push	r24
   19746:	9f 93       	push	r25
   19748:	af 93       	push	r26
   1974a:	bf 93       	push	r27
   1974c:	cf 93       	push	r28
   1974e:	ef 93       	push	r30
   19750:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
   19752:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
   19754:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
   19758:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
   1975c:	68 2f       	mov	r22, r24
   1975e:	70 e0       	ldi	r23, 0x00	; 0
   19760:	76 2f       	mov	r23, r22
   19762:	66 27       	eor	r22, r22
   19764:	69 0f       	add	r22, r25
   19766:	71 1d       	adc	r23, r1
   19768:	70 93 e8 11 	sts	0x11E8, r23	; 0x8011e8 <a2d_data+0x1>
   1976c:	60 93 e7 11 	sts	0x11E7, r22	; 0x8011e7 <a2d_data>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   19770:	e0 91 e1 11 	lds	r30, 0x11E1	; 0x8011e1 <a2d_interupt_func>
   19774:	f0 91 e2 11 	lds	r31, 0x11E2	; 0x8011e2 <a2d_interupt_func+0x1>
   19778:	80 91 e9 11 	lds	r24, 0x11E9	; 0x8011e9 <a2d_input>
   1977c:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
   1977e:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
   19780:	ff 91       	pop	r31
   19782:	ef 91       	pop	r30
   19784:	cf 91       	pop	r28
   19786:	bf 91       	pop	r27
   19788:	af 91       	pop	r26
   1978a:	9f 91       	pop	r25
   1978c:	8f 91       	pop	r24
   1978e:	7f 91       	pop	r23
   19790:	6f 91       	pop	r22
   19792:	5f 91       	pop	r21
   19794:	4f 91       	pop	r20
   19796:	3f 91       	pop	r19
   19798:	2f 91       	pop	r18
   1979a:	0f 90       	pop	r0
   1979c:	0b be       	out	0x3b, r0	; 59
   1979e:	0f 90       	pop	r0
   197a0:	0f be       	out	0x3f, r0	; 63
   197a2:	0f 90       	pop	r0
   197a4:	1f 90       	pop	r1
   197a6:	18 95       	reti

000197a8 <yield>:
__empty():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
   197a8:	08 95       	ret

000197aa <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   197aa:	1f 92       	push	r1
   197ac:	0f 92       	push	r0
   197ae:	0f b6       	in	r0, 0x3f	; 63
   197b0:	0f 92       	push	r0
   197b2:	11 24       	eor	r1, r1
   197b4:	2f 93       	push	r18
   197b6:	3f 93       	push	r19
   197b8:	8f 93       	push	r24
   197ba:	9f 93       	push	r25
   197bc:	af 93       	push	r26
   197be:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
   197c0:	80 91 ef 11 	lds	r24, 0x11EF	; 0x8011ef <timer0_millis>
   197c4:	90 91 f0 11 	lds	r25, 0x11F0	; 0x8011f0 <timer0_millis+0x1>
   197c8:	a0 91 f1 11 	lds	r26, 0x11F1	; 0x8011f1 <timer0_millis+0x2>
   197cc:	b0 91 f2 11 	lds	r27, 0x11F2	; 0x8011f2 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
   197d0:	30 91 ee 11 	lds	r19, 0x11EE	; 0x8011ee <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
   197d4:	23 e0       	ldi	r18, 0x03	; 3
   197d6:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
   197d8:	2d 37       	cpi	r18, 0x7D	; 125
   197da:	68 f1       	brcs	.+90     	; 0x19836 <__vector_23+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
   197dc:	26 e8       	ldi	r18, 0x86	; 134
   197de:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
   197e0:	02 96       	adiw	r24, 0x02	; 2
   197e2:	a1 1d       	adc	r26, r1
   197e4:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
   197e6:	20 93 ee 11 	sts	0x11EE, r18	; 0x8011ee <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
   197ea:	80 93 ef 11 	sts	0x11EF, r24	; 0x8011ef <timer0_millis>
   197ee:	90 93 f0 11 	sts	0x11F0, r25	; 0x8011f0 <timer0_millis+0x1>
   197f2:	a0 93 f1 11 	sts	0x11F1, r26	; 0x8011f1 <timer0_millis+0x2>
   197f6:	b0 93 f2 11 	sts	0x11F2, r27	; 0x8011f2 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
   197fa:	80 91 ea 11 	lds	r24, 0x11EA	; 0x8011ea <timer0_overflow_count>
   197fe:	90 91 eb 11 	lds	r25, 0x11EB	; 0x8011eb <timer0_overflow_count+0x1>
   19802:	a0 91 ec 11 	lds	r26, 0x11EC	; 0x8011ec <timer0_overflow_count+0x2>
   19806:	b0 91 ed 11 	lds	r27, 0x11ED	; 0x8011ed <timer0_overflow_count+0x3>
   1980a:	01 96       	adiw	r24, 0x01	; 1
   1980c:	a1 1d       	adc	r26, r1
   1980e:	b1 1d       	adc	r27, r1
   19810:	80 93 ea 11 	sts	0x11EA, r24	; 0x8011ea <timer0_overflow_count>
   19814:	90 93 eb 11 	sts	0x11EB, r25	; 0x8011eb <timer0_overflow_count+0x1>
   19818:	a0 93 ec 11 	sts	0x11EC, r26	; 0x8011ec <timer0_overflow_count+0x2>
   1981c:	b0 93 ed 11 	sts	0x11ED, r27	; 0x8011ed <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:213
#endif
}
   19820:	bf 91       	pop	r27
   19822:	af 91       	pop	r26
   19824:	9f 91       	pop	r25
   19826:	8f 91       	pop	r24
   19828:	3f 91       	pop	r19
   1982a:	2f 91       	pop	r18
   1982c:	0f 90       	pop	r0
   1982e:	0f be       	out	0x3f, r0	; 63
   19830:	0f 90       	pop	r0
   19832:	1f 90       	pop	r1
   19834:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
   19836:	01 96       	adiw	r24, 0x01	; 1
   19838:	a1 1d       	adc	r26, r1
   1983a:	b1 1d       	adc	r27, r1
   1983c:	d4 cf       	rjmp	.-88     	; 0x197e6 <__vector_23+0x3c>

0001983e <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
   1983e:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
   19840:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
   19842:	60 91 ef 11 	lds	r22, 0x11EF	; 0x8011ef <timer0_millis>
   19846:	70 91 f0 11 	lds	r23, 0x11F0	; 0x8011f0 <timer0_millis+0x1>
   1984a:	80 91 f1 11 	lds	r24, 0x11F1	; 0x8011f1 <timer0_millis+0x2>
   1984e:	90 91 f2 11 	lds	r25, 0x11F2	; 0x8011f2 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
   19852:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
   19854:	08 95       	ret

00019856 <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
   19856:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
   19858:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
   1985a:	80 91 ea 11 	lds	r24, 0x11EA	; 0x8011ea <timer0_overflow_count>
   1985e:	90 91 eb 11 	lds	r25, 0x11EB	; 0x8011eb <timer0_overflow_count+0x1>
   19862:	a0 91 ec 11 	lds	r26, 0x11EC	; 0x8011ec <timer0_overflow_count+0x2>
   19866:	b0 91 ed 11 	lds	r27, 0x11ED	; 0x8011ed <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
   1986a:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
   1986c:	a8 9b       	sbis	0x15, 0	; 21
   1986e:	05 c0       	rjmp	.+10     	; 0x1987a <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
   19870:	2f 3f       	cpi	r18, 0xFF	; 255
   19872:	19 f0       	breq	.+6      	; 0x1987a <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
   19874:	01 96       	adiw	r24, 0x01	; 1
   19876:	a1 1d       	adc	r26, r1
   19878:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
   1987a:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
   1987c:	ba 2f       	mov	r27, r26
   1987e:	a9 2f       	mov	r26, r25
   19880:	98 2f       	mov	r25, r24
   19882:	88 27       	eor	r24, r24
   19884:	bc 01       	movw	r22, r24
   19886:	cd 01       	movw	r24, r26
   19888:	62 0f       	add	r22, r18
   1988a:	71 1d       	adc	r23, r1
   1988c:	81 1d       	adc	r24, r1
   1988e:	91 1d       	adc	r25, r1
   19890:	42 e0       	ldi	r20, 0x02	; 2
   19892:	66 0f       	add	r22, r22
   19894:	77 1f       	adc	r23, r23
   19896:	88 1f       	adc	r24, r24
   19898:	99 1f       	adc	r25, r25
   1989a:	4a 95       	dec	r20
   1989c:	d1 f7       	brne	.-12     	; 0x19892 <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
   1989e:	08 95       	ret

000198a0 <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
   198a0:	8f 92       	push	r8
   198a2:	9f 92       	push	r9
   198a4:	af 92       	push	r10
   198a6:	bf 92       	push	r11
   198a8:	cf 92       	push	r12
   198aa:	df 92       	push	r13
   198ac:	ef 92       	push	r14
   198ae:	ff 92       	push	r15
   198b0:	6b 01       	movw	r12, r22
   198b2:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
   198b4:	0e 94 2b cc 	call	0x19856	; 0x19856 <micros>
   198b8:	4b 01       	movw	r8, r22
   198ba:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
   198bc:	c1 14       	cp	r12, r1
   198be:	d1 04       	cpc	r13, r1
   198c0:	e1 04       	cpc	r14, r1
   198c2:	f1 04       	cpc	r15, r1
   198c4:	e9 f0       	breq	.+58     	; 0x19900 <delay+0x60>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:400
    yield();
   198c6:	0e 94 d4 cb 	call	0x197a8	; 0x197a8 <yield>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
   198ca:	0e 94 2b cc 	call	0x19856	; 0x19856 <micros>
   198ce:	68 19       	sub	r22, r8
   198d0:	79 09       	sbc	r23, r9
   198d2:	8a 09       	sbc	r24, r10
   198d4:	9b 09       	sbc	r25, r11
   198d6:	68 3e       	cpi	r22, 0xE8	; 232
   198d8:	73 40       	sbci	r23, 0x03	; 3
   198da:	81 05       	cpc	r24, r1
   198dc:	91 05       	cpc	r25, r1
   198de:	70 f3       	brcs	.-36     	; 0x198bc <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:402
      ms--;
   198e0:	21 e0       	ldi	r18, 0x01	; 1
   198e2:	c2 1a       	sub	r12, r18
   198e4:	d1 08       	sbc	r13, r1
   198e6:	e1 08       	sbc	r14, r1
   198e8:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
   198ea:	88 ee       	ldi	r24, 0xE8	; 232
   198ec:	88 0e       	add	r8, r24
   198ee:	83 e0       	ldi	r24, 0x03	; 3
   198f0:	98 1e       	adc	r9, r24
   198f2:	a1 1c       	adc	r10, r1
   198f4:	b1 1c       	adc	r11, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
   198f6:	c1 14       	cp	r12, r1
   198f8:	d1 04       	cpc	r13, r1
   198fa:	e1 04       	cpc	r14, r1
   198fc:	f1 04       	cpc	r15, r1
   198fe:	29 f7       	brne	.-54     	; 0x198ca <delay+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
   19900:	ff 90       	pop	r15
   19902:	ef 90       	pop	r14
   19904:	df 90       	pop	r13
   19906:	cf 90       	pop	r12
   19908:	bf 90       	pop	r11
   1990a:	af 90       	pop	r10
   1990c:	9f 90       	pop	r9
   1990e:	8f 90       	pop	r8
   19910:	08 95       	ret

00019912 <delayMicroseconds>:
delayMicroseconds():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
   19912:	82 30       	cpi	r24, 0x02	; 2
   19914:	91 05       	cpc	r25, r1
   19916:	38 f0       	brcs	.+14     	; 0x19926 <delayMicroseconds+0x14>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
   19918:	88 0f       	add	r24, r24
   1991a:	99 1f       	adc	r25, r25
   1991c:	88 0f       	add	r24, r24
   1991e:	99 1f       	adc	r25, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
   19920:	05 97       	sbiw	r24, 0x05	; 5
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
   19922:	01 97       	sbiw	r24, 0x01	; 1
   19924:	f1 f7       	brne	.-4      	; 0x19922 <delayMicroseconds+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
   19926:	08 95       	ret

00019928 <init>:
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   19928:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   1992a:	84 b5       	in	r24, 0x24	; 36
   1992c:	83 60       	ori	r24, 0x03	; 3
   1992e:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   19930:	85 b5       	in	r24, 0x25	; 37
   19932:	83 60       	ori	r24, 0x03	; 3
   19934:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   19936:	ee e6       	ldi	r30, 0x6E	; 110
   19938:	f0 e0       	ldi	r31, 0x00	; 0
   1993a:	80 81       	ld	r24, Z
   1993c:	81 60       	ori	r24, 0x01	; 1
   1993e:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   19940:	e1 e8       	ldi	r30, 0x81	; 129
   19942:	f0 e0       	ldi	r31, 0x00	; 0
   19944:	82 e0       	ldi	r24, 0x02	; 2
   19946:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   19948:	80 81       	ld	r24, Z
   1994a:	81 60       	ori	r24, 0x01	; 1
   1994c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   1994e:	e0 e8       	ldi	r30, 0x80	; 128
   19950:	f0 e0       	ldi	r31, 0x00	; 0
   19952:	80 81       	ld	r24, Z
   19954:	81 60       	ori	r24, 0x01	; 1
   19956:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   19958:	e1 eb       	ldi	r30, 0xB1	; 177
   1995a:	f0 e0       	ldi	r31, 0x00	; 0
   1995c:	80 81       	ld	r24, Z
   1995e:	84 60       	ori	r24, 0x04	; 4
   19960:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   19962:	e0 eb       	ldi	r30, 0xB0	; 176
   19964:	f0 e0       	ldi	r31, 0x00	; 0
   19966:	80 81       	ld	r24, Z
   19968:	81 60       	ori	r24, 0x01	; 1
   1996a:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   1996c:	e1 e9       	ldi	r30, 0x91	; 145
   1996e:	f0 e0       	ldi	r31, 0x00	; 0
   19970:	80 81       	ld	r24, Z
   19972:	83 60       	ori	r24, 0x03	; 3
   19974:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   19976:	e0 e9       	ldi	r30, 0x90	; 144
   19978:	f0 e0       	ldi	r31, 0x00	; 0
   1997a:	80 81       	ld	r24, Z
   1997c:	81 60       	ori	r24, 0x01	; 1
   1997e:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   19980:	e1 ea       	ldi	r30, 0xA1	; 161
   19982:	f0 e0       	ldi	r31, 0x00	; 0
   19984:	80 81       	ld	r24, Z
   19986:	83 60       	ori	r24, 0x03	; 3
   19988:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   1998a:	e0 ea       	ldi	r30, 0xA0	; 160
   1998c:	f0 e0       	ldi	r31, 0x00	; 0
   1998e:	80 81       	ld	r24, Z
   19990:	81 60       	ori	r24, 0x01	; 1
   19992:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   19994:	e1 e2       	ldi	r30, 0x21	; 33
   19996:	f1 e0       	ldi	r31, 0x01	; 1
   19998:	80 81       	ld	r24, Z
   1999a:	83 60       	ori	r24, 0x03	; 3
   1999c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   1999e:	e0 e2       	ldi	r30, 0x20	; 32
   199a0:	f1 e0       	ldi	r31, 0x01	; 1
   199a2:	80 81       	ld	r24, Z
   199a4:	81 60       	ori	r24, 0x01	; 1
   199a6:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   199a8:	87 e8       	ldi	r24, 0x87	; 135
   199aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   199ae:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
   199b2:	08 95       	ret

000199b4 <turnOffPWM>:
turnOffPWM():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   199b4:	82 50       	subi	r24, 0x02	; 2
   199b6:	82 31       	cpi	r24, 0x12	; 18
   199b8:	08 f0       	brcs	.+2      	; 0x199bc <turnOffPWM+0x8>
   199ba:	5f c0       	rjmp	.+190    	; 0x19a7a <turnOffPWM+0xc6>
   199bc:	e8 2f       	mov	r30, r24
   199be:	f0 e0       	ldi	r31, 0x00	; 0
   199c0:	88 27       	eor	r24, r24
   199c2:	ea 51       	subi	r30, 0x1A	; 26
   199c4:	f3 43       	sbci	r31, 0x33	; 51
   199c6:	8f 4f       	sbci	r24, 0xFF	; 255
   199c8:	0c 94 bb d3 	jmp	0x1a776	; 0x1a776 <__tablejump2__>
   199cc:	3a cd       	rjmp	.-1420   	; 0x19442 <NTPClient::end()+0x2>
   199ce:	3e cd       	rjmp	.-1412   	; 0x1944c <NTPClient::end()+0xc>
   199d0:	f8 cc       	rjmp	.-1552   	; 0x193c2 <NTPClient::getDate() const+0xe>
   199d2:	fe cc       	rjmp	.-1540   	; 0x193d0 <NTPClient::getDate() const+0x1c>
   199d4:	02 cd       	rjmp	.-1532   	; 0x193da <NTPClient::getDate() const+0x26>
   199d6:	3d cd       	rjmp	.-1414   	; 0x19452 <NTPClient::end()+0x12>
   199d8:	06 cd       	rjmp	.-1524   	; 0x193e6 <NTPClient::getDate() const+0x32>
   199da:	0c cd       	rjmp	.-1512   	; 0x193f4 <NTPClient::getHours() const+0x8>
   199dc:	10 cd       	rjmp	.-1504   	; 0x193fe <NTPClient::getHours() const+0x12>
   199de:	16 cd       	rjmp	.-1492   	; 0x1940c <NTPClient::getMinutes() const>
   199e0:	1a cd       	rjmp	.-1484   	; 0x19416 <NTPClient::getMinutes() const+0xa>
   199e2:	1e cd       	rjmp	.-1476   	; 0x19420 <NTPClient::getMinutes() const+0x14>
   199e4:	24 cd       	rjmp	.-1464   	; 0x1942e <NTPClient::getSeconds() const+0x2>
   199e6:	28 cd       	rjmp	.-1456   	; 0x19438 <NTPClient::getSeconds() const+0xc>
   199e8:	3d cd       	rjmp	.-1414   	; 0x19464 <NTPClient::setTimeOffset(int)+0x4>
   199ea:	2c cd       	rjmp	.-1448   	; 0x19444 <NTPClient::end()+0x4>
   199ec:	32 cd       	rjmp	.-1436   	; 0x19452 <NTPClient::end()+0x12>
   199ee:	36 cd       	rjmp	.-1428   	; 0x1945c <NTPClient::end()+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   199f0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   199f4:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   199f6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
   199fa:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   199fc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   19a00:	8f 7d       	andi	r24, 0xDF	; 223
   19a02:	f9 cf       	rjmp	.-14     	; 0x199f6 <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   19a04:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   19a08:	87 7f       	andi	r24, 0xF7	; 247
   19a0a:	f5 cf       	rjmp	.-22     	; 0x199f6 <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   19a0c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   19a10:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   19a12:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
   19a16:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   19a18:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   19a1c:	8f 7d       	andi	r24, 0xDF	; 223
   19a1e:	f9 cf       	rjmp	.-14     	; 0x19a12 <turnOffPWM+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   19a20:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   19a24:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   19a26:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:127
        break;
   19a2a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   19a2c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   19a30:	8f 7d       	andi	r24, 0xDF	; 223
   19a32:	f9 cf       	rjmp	.-14     	; 0x19a26 <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   19a34:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   19a38:	87 7f       	andi	r24, 0xF7	; 247
   19a3a:	f5 cf       	rjmp	.-22     	; 0x19a26 <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   19a3c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   19a40:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   19a42:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:144
        break;
   19a46:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   19a48:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   19a4c:	8f 7d       	andi	r24, 0xDF	; 223
   19a4e:	f9 cf       	rjmp	.-14     	; 0x19a42 <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   19a50:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   19a54:	87 7f       	andi	r24, 0xF7	; 247
   19a56:	f5 cf       	rjmp	.-22     	; 0x19a42 <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   19a58:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   19a5c:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   19a5e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:162
        break;
   19a62:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   19a64:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   19a68:	8f 7d       	andi	r24, 0xDF	; 223
   19a6a:	f9 cf       	rjmp	.-14     	; 0x19a5e <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   19a6c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   19a70:	87 7f       	andi	r24, 0xF7	; 247
   19a72:	f5 cf       	rjmp	.-22     	; 0x19a5e <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   19a74:	84 b5       	in	r24, 0x24	; 36
   19a76:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   19a78:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   19a7a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   19a7c:	84 b5       	in	r24, 0x24	; 36
   19a7e:	8f 7d       	andi	r24, 0xDF	; 223
   19a80:	fb cf       	rjmp	.-10     	; 0x19a78 <turnOffPWM+0xc4>

00019a82 <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   19a82:	cf 93       	push	r28
   19a84:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   19a86:	90 e0       	ldi	r25, 0x00	; 0
   19a88:	fc 01       	movw	r30, r24
   19a8a:	e2 57       	subi	r30, 0x72	; 114
   19a8c:	fe 49       	sbci	r31, 0x9E	; 158
   19a8e:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   19a90:	8c 53       	subi	r24, 0x3C	; 60
   19a92:	9e 49       	sbci	r25, 0x9E	; 158
   19a94:	fc 01       	movw	r30, r24
   19a96:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   19a98:	88 23       	and	r24, r24
   19a9a:	c9 f0       	breq	.+50     	; 0x19ace <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   19a9c:	90 e0       	ldi	r25, 0x00	; 0
   19a9e:	88 0f       	add	r24, r24
   19aa0:	99 1f       	adc	r25, r25
   19aa2:	fc 01       	movw	r30, r24
   19aa4:	e6 5e       	subi	r30, 0xE6	; 230
   19aa6:	fd 49       	sbci	r31, 0x9D	; 157
   19aa8:	a5 91       	lpm	r26, Z+
   19aaa:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   19aac:	fc 01       	movw	r30, r24
   19aae:	e6 5f       	subi	r30, 0xF6	; 246
   19ab0:	fd 49       	sbci	r31, 0x9D	; 157
   19ab2:	c5 91       	lpm	r28, Z+
   19ab4:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   19ab6:	61 11       	cpse	r22, r1
   19ab8:	0d c0       	rjmp	.+26     	; 0x19ad4 <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   19aba:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
   19abc:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   19abe:	8c 91       	ld	r24, X
   19ac0:	20 95       	com	r18
   19ac2:	82 23       	and	r24, r18
   19ac4:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   19ac6:	88 81       	ld	r24, Y
   19ac8:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   19aca:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   19acc:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   19ace:	df 91       	pop	r29
   19ad0:	cf 91       	pop	r28
   19ad2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   19ad4:	62 30       	cpi	r22, 0x02	; 2
   19ad6:	51 f4       	brne	.+20     	; 0x19aec <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   19ad8:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
   19ada:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   19adc:	3c 91       	ld	r19, X
   19ade:	82 2f       	mov	r24, r18
   19ae0:	80 95       	com	r24
   19ae2:	83 23       	and	r24, r19
   19ae4:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   19ae6:	e8 81       	ld	r30, Y
   19ae8:	2e 2b       	or	r18, r30
   19aea:	ef cf       	rjmp	.-34     	; 0x19aca <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   19aec:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
   19aee:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   19af0:	ec 91       	ld	r30, X
   19af2:	2e 2b       	or	r18, r30
   19af4:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   19af6:	8f bf       	out	0x3f, r24	; 63
   19af8:	ea cf       	rjmp	.-44     	; 0x19ace <pinMode+0x4c>

00019afa <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   19afa:	1f 93       	push	r17
   19afc:	cf 93       	push	r28
   19afe:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   19b00:	28 2f       	mov	r18, r24
   19b02:	30 e0       	ldi	r19, 0x00	; 0
   19b04:	f9 01       	movw	r30, r18
   19b06:	e8 5a       	subi	r30, 0xA8	; 168
   19b08:	fe 49       	sbci	r31, 0x9E	; 158
   19b0a:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   19b0c:	f9 01       	movw	r30, r18
   19b0e:	e2 57       	subi	r30, 0x72	; 114
   19b10:	fe 49       	sbci	r31, 0x9E	; 158
   19b12:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   19b14:	f9 01       	movw	r30, r18
   19b16:	ec 53       	subi	r30, 0x3C	; 60
   19b18:	fe 49       	sbci	r31, 0x9E	; 158
   19b1a:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   19b1c:	cc 23       	and	r28, r28
   19b1e:	a9 f0       	breq	.+42     	; 0x19b4a <digitalWrite+0x50>
   19b20:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   19b22:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
   19b24:	0e 94 da cc 	call	0x199b4	; 0x199b4 <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   19b28:	ec 2f       	mov	r30, r28
   19b2a:	f0 e0       	ldi	r31, 0x00	; 0
   19b2c:	ee 0f       	add	r30, r30
   19b2e:	ff 1f       	adc	r31, r31
   19b30:	e6 5f       	subi	r30, 0xF6	; 246
   19b32:	fd 49       	sbci	r31, 0x9D	; 157
   19b34:	a5 91       	lpm	r26, Z+
   19b36:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   19b38:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
   19b3a:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   19b3c:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   19b3e:	11 11       	cpse	r17, r1
   19b40:	08 c0       	rjmp	.+16     	; 0x19b52 <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   19b42:	d0 95       	com	r29
   19b44:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   19b46:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   19b48:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:212
}
   19b4a:	df 91       	pop	r29
   19b4c:	cf 91       	pop	r28
   19b4e:	1f 91       	pop	r17
   19b50:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   19b52:	de 2b       	or	r29, r30
   19b54:	f8 cf       	rjmp	.-16     	; 0x19b46 <digitalWrite+0x4c>

00019b56 <digitalRead>:
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   19b56:	cf 93       	push	r28
   19b58:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
   19b5a:	28 2f       	mov	r18, r24
   19b5c:	30 e0       	ldi	r19, 0x00	; 0
   19b5e:	f9 01       	movw	r30, r18
   19b60:	e8 5a       	subi	r30, 0xA8	; 168
   19b62:	fe 49       	sbci	r31, 0x9E	; 158
   19b64:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
   19b66:	f9 01       	movw	r30, r18
   19b68:	e2 57       	subi	r30, 0x72	; 114
   19b6a:	fe 49       	sbci	r31, 0x9E	; 158
   19b6c:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
   19b6e:	f9 01       	movw	r30, r18
   19b70:	ec 53       	subi	r30, 0x3C	; 60
   19b72:	fe 49       	sbci	r31, 0x9E	; 158
   19b74:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
   19b76:	cc 23       	and	r28, r28
   19b78:	a1 f0       	breq	.+40     	; 0x19ba2 <digitalRead+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   19b7a:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
   19b7c:	0e 94 da cc 	call	0x199b4	; 0x199b4 <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
   19b80:	ec 2f       	mov	r30, r28
   19b82:	f0 e0       	ldi	r31, 0x00	; 0
   19b84:	ee 0f       	add	r30, r30
   19b86:	ff 1f       	adc	r31, r31
   19b88:	e6 50       	subi	r30, 0x06	; 6
   19b8a:	fe 49       	sbci	r31, 0x9E	; 158
   19b8c:	a5 91       	lpm	r26, Z+
   19b8e:	b4 91       	lpm	r27, Z
   19b90:	ec 91       	ld	r30, X
   19b92:	ed 23       	and	r30, r29
   19b94:	81 e0       	ldi	r24, 0x01	; 1
   19b96:	90 e0       	ldi	r25, 0x00	; 0
   19b98:	09 f4       	brne	.+2      	; 0x19b9c <digitalRead+0x46>
   19b9a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
   19b9c:	df 91       	pop	r29
   19b9e:	cf 91       	pop	r28
   19ba0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
   19ba2:	80 e0       	ldi	r24, 0x00	; 0
   19ba4:	90 e0       	ldi	r25, 0x00	; 0
   19ba6:	fa cf       	rjmp	.-12     	; 0x19b9c <digitalRead+0x46>

00019ba8 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
   19ba8:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
   19baa:	91 8d       	ldd	r25, Z+25	; 0x19
   19bac:	22 8d       	ldd	r18, Z+26	; 0x1a
   19bae:	89 2f       	mov	r24, r25
   19bb0:	90 e0       	ldi	r25, 0x00	; 0
   19bb2:	80 5c       	subi	r24, 0xC0	; 192
   19bb4:	9f 4f       	sbci	r25, 0xFF	; 255
   19bb6:	82 1b       	sub	r24, r18
   19bb8:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
   19bba:	8f 73       	andi	r24, 0x3F	; 63
   19bbc:	99 27       	eor	r25, r25
   19bbe:	08 95       	ret

00019bc0 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
   19bc0:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
   19bc2:	91 8d       	ldd	r25, Z+25	; 0x19
   19bc4:	82 8d       	ldd	r24, Z+26	; 0x1a
   19bc6:	98 17       	cp	r25, r24
   19bc8:	31 f0       	breq	.+12     	; 0x19bd6 <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
   19bca:	82 8d       	ldd	r24, Z+26	; 0x1a
   19bcc:	e8 0f       	add	r30, r24
   19bce:	f1 1d       	adc	r31, r1
   19bd0:	85 8d       	ldd	r24, Z+29	; 0x1d
   19bd2:	90 e0       	ldi	r25, 0x00	; 0
   19bd4:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   19bd6:	8f ef       	ldi	r24, 0xFF	; 255
   19bd8:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
   19bda:	08 95       	ret

00019bdc <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
   19bdc:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
   19bde:	91 8d       	ldd	r25, Z+25	; 0x19
   19be0:	82 8d       	ldd	r24, Z+26	; 0x1a
   19be2:	98 17       	cp	r25, r24
   19be4:	61 f0       	breq	.+24     	; 0x19bfe <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
   19be6:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19be8:	ae 0f       	add	r26, r30
   19bea:	bf 2f       	mov	r27, r31
   19bec:	b1 1d       	adc	r27, r1
   19bee:	5d 96       	adiw	r26, 0x1d	; 29
   19bf0:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
   19bf2:	92 8d       	ldd	r25, Z+26	; 0x1a
   19bf4:	9f 5f       	subi	r25, 0xFF	; 255
   19bf6:	9f 73       	andi	r25, 0x3F	; 63
   19bf8:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
   19bfa:	90 e0       	ldi	r25, 0x00	; 0
   19bfc:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   19bfe:	8f ef       	ldi	r24, 0xFF	; 255
   19c00:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
   19c02:	08 95       	ret

00019c04 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   19c04:	fc 01       	movw	r30, r24
   19c06:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
   19c08:	44 8d       	ldd	r20, Z+28	; 0x1c
   19c0a:	25 2f       	mov	r18, r21
   19c0c:	30 e0       	ldi	r19, 0x00	; 0
   19c0e:	84 2f       	mov	r24, r20
   19c10:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   19c12:	82 1b       	sub	r24, r18
   19c14:	93 0b       	sbc	r25, r19
   19c16:	54 17       	cp	r21, r20
   19c18:	10 f0       	brcs	.+4      	; 0x19c1e <HardwareSerial::availableForWrite()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
   19c1a:	cf 96       	adiw	r24, 0x3f	; 63
   19c1c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
   19c1e:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
   19c20:	08 95       	ret

00019c22 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
   19c22:	84 e1       	ldi	r24, 0x14	; 20
   19c24:	9f ec       	ldi	r25, 0xCF	; 207
   19c26:	89 2b       	or	r24, r25
   19c28:	49 f0       	breq	.+18     	; 0x19c3c <serialEventRun()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
   19c2a:	80 e0       	ldi	r24, 0x00	; 0
   19c2c:	90 e0       	ldi	r25, 0x00	; 0
   19c2e:	89 2b       	or	r24, r25
   19c30:	29 f0       	breq	.+10     	; 0x19c3c <serialEventRun()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
   19c32:	0e 94 14 cf 	call	0x19e28	; 0x19e28 <Serial0_available()>
   19c36:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
   19c38:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
   19c3c:	80 e0       	ldi	r24, 0x00	; 0
   19c3e:	90 e0       	ldi	r25, 0x00	; 0
   19c40:	89 2b       	or	r24, r25
   19c42:	49 f0       	breq	.+18     	; 0x19c56 <serialEventRun()+0x34>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
   19c44:	80 e0       	ldi	r24, 0x00	; 0
   19c46:	90 e0       	ldi	r25, 0x00	; 0
   19c48:	89 2b       	or	r24, r25
   19c4a:	29 f0       	breq	.+10     	; 0x19c56 <serialEventRun()+0x34>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
   19c4c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   19c50:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
   19c52:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
   19c56:	08 95       	ret

00019c58 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
   19c58:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
   19c5a:	a4 8d       	ldd	r26, Z+28	; 0x1c
   19c5c:	a8 0f       	add	r26, r24
   19c5e:	b9 2f       	mov	r27, r25
   19c60:	b1 1d       	adc	r27, r1
   19c62:	a3 5a       	subi	r26, 0xA3	; 163
   19c64:	bf 4f       	sbci	r27, 0xFF	; 255
   19c66:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
   19c68:	84 8d       	ldd	r24, Z+28	; 0x1c
   19c6a:	90 e0       	ldi	r25, 0x00	; 0
   19c6c:	01 96       	adiw	r24, 0x01	; 1
   19c6e:	8f 73       	andi	r24, 0x3F	; 63
   19c70:	99 27       	eor	r25, r25
   19c72:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
   19c74:	a6 89       	ldd	r26, Z+22	; 0x16
   19c76:	b7 89       	ldd	r27, Z+23	; 0x17
   19c78:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
   19c7a:	a0 89       	ldd	r26, Z+16	; 0x10
   19c7c:	b1 89       	ldd	r27, Z+17	; 0x11
   19c7e:	8c 91       	ld	r24, X
   19c80:	80 64       	ori	r24, 0x40	; 64
   19c82:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
   19c84:	93 8d       	ldd	r25, Z+27	; 0x1b
   19c86:	84 8d       	ldd	r24, Z+28	; 0x1c
   19c88:	98 13       	cpse	r25, r24
   19c8a:	06 c0       	rjmp	.+12     	; 0x19c98 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
   19c8c:	02 88       	ldd	r0, Z+18	; 0x12
   19c8e:	f3 89       	ldd	r31, Z+19	; 0x13
   19c90:	e0 2d       	mov	r30, r0
   19c92:	80 81       	ld	r24, Z
   19c94:	8f 7d       	andi	r24, 0xDF	; 223
   19c96:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
   19c98:	08 95       	ret

00019c9a <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
   19c9a:	cf 93       	push	r28
   19c9c:	df 93       	push	r29
   19c9e:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
   19ca0:	88 8d       	ldd	r24, Y+24	; 0x18
   19ca2:	88 23       	and	r24, r24
   19ca4:	b9 f0       	breq	.+46     	; 0x19cd4 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
   19ca6:	aa 89       	ldd	r26, Y+18	; 0x12
   19ca8:	bb 89       	ldd	r27, Y+19	; 0x13
   19caa:	e8 89       	ldd	r30, Y+16	; 0x10
   19cac:	f9 89       	ldd	r31, Y+17	; 0x11
   19cae:	8c 91       	ld	r24, X
   19cb0:	85 fd       	sbrc	r24, 5
   19cb2:	03 c0       	rjmp	.+6      	; 0x19cba <HardwareSerial::flush()+0x20>
   19cb4:	80 81       	ld	r24, Z
   19cb6:	86 fd       	sbrc	r24, 6
   19cb8:	0d c0       	rjmp	.+26     	; 0x19cd4 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
   19cba:	0f b6       	in	r0, 0x3f	; 63
   19cbc:	07 fc       	sbrc	r0, 7
   19cbe:	f7 cf       	rjmp	.-18     	; 0x19cae <HardwareSerial::flush()+0x14>
   19cc0:	8c 91       	ld	r24, X
   19cc2:	85 ff       	sbrs	r24, 5
   19cc4:	f2 cf       	rjmp	.-28     	; 0x19caa <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
   19cc6:	80 81       	ld	r24, Z
   19cc8:	85 ff       	sbrs	r24, 5
   19cca:	ed cf       	rjmp	.-38     	; 0x19ca6 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
   19ccc:	ce 01       	movw	r24, r28
   19cce:	0e 94 2c ce 	call	0x19c58	; 0x19c58 <HardwareSerial::_tx_udr_empty_irq()>
   19cd2:	e9 cf       	rjmp	.-46     	; 0x19ca6 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
   19cd4:	df 91       	pop	r29
   19cd6:	cf 91       	pop	r28
   19cd8:	08 95       	ret

00019cda <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
   19cda:	ef 92       	push	r14
   19cdc:	ff 92       	push	r15
   19cde:	0f 93       	push	r16
   19ce0:	1f 93       	push	r17
   19ce2:	cf 93       	push	r28
   19ce4:	df 93       	push	r29
   19ce6:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
   19ce8:	81 e0       	ldi	r24, 0x01	; 1
   19cea:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
   19cec:	9b 8d       	ldd	r25, Y+27	; 0x1b
   19cee:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19cf0:	98 13       	cpse	r25, r24
   19cf2:	16 c0       	rjmp	.+44     	; 0x19d20 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
   19cf4:	e8 89       	ldd	r30, Y+16	; 0x10
   19cf6:	f9 89       	ldd	r31, Y+17	; 0x11
   19cf8:	80 81       	ld	r24, Z
   19cfa:	85 ff       	sbrs	r24, 5
   19cfc:	11 c0       	rjmp	.+34     	; 0x19d20 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
   19cfe:	ee 89       	ldd	r30, Y+22	; 0x16
   19d00:	ff 89       	ldd	r31, Y+23	; 0x17
   19d02:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
   19d04:	e8 89       	ldd	r30, Y+16	; 0x10
   19d06:	f9 89       	ldd	r31, Y+17	; 0x11
   19d08:	80 81       	ld	r24, Z
   19d0a:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
   19d0c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
   19d0e:	81 e0       	ldi	r24, 0x01	; 1
   19d10:	90 e0       	ldi	r25, 0x00	; 0
   19d12:	df 91       	pop	r29
   19d14:	cf 91       	pop	r28
   19d16:	1f 91       	pop	r17
   19d18:	0f 91       	pop	r16
   19d1a:	ff 90       	pop	r15
   19d1c:	ef 90       	pop	r14
   19d1e:	08 95       	ret
   19d20:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
   19d22:	0b 8d       	ldd	r16, Y+27	; 0x1b
   19d24:	10 e0       	ldi	r17, 0x00	; 0
   19d26:	0f 5f       	subi	r16, 0xFF	; 255
   19d28:	1f 4f       	sbci	r17, 0xFF	; 255
   19d2a:	0f 73       	andi	r16, 0x3F	; 63
   19d2c:	11 27       	eor	r17, r17
   19d2e:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
   19d30:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19d32:	8e 11       	cpse	r24, r14
   19d34:	0c c0       	rjmp	.+24     	; 0x19d4e <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
   19d36:	0f b6       	in	r0, 0x3f	; 63
   19d38:	07 fc       	sbrc	r0, 7
   19d3a:	fa cf       	rjmp	.-12     	; 0x19d30 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
   19d3c:	e8 89       	ldd	r30, Y+16	; 0x10
   19d3e:	f9 89       	ldd	r31, Y+17	; 0x11
   19d40:	80 81       	ld	r24, Z
   19d42:	85 ff       	sbrs	r24, 5
   19d44:	f5 cf       	rjmp	.-22     	; 0x19d30 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
   19d46:	ce 01       	movw	r24, r28
   19d48:	0e 94 2c ce 	call	0x19c58	; 0x19c58 <HardwareSerial::_tx_udr_empty_irq()>
   19d4c:	f1 cf       	rjmp	.-30     	; 0x19d30 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
   19d4e:	eb 8d       	ldd	r30, Y+27	; 0x1b
   19d50:	ec 0f       	add	r30, r28
   19d52:	fd 2f       	mov	r31, r29
   19d54:	f1 1d       	adc	r31, r1
   19d56:	e3 5a       	subi	r30, 0xA3	; 163
   19d58:	ff 4f       	sbci	r31, 0xFF	; 255
   19d5a:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
   19d5c:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
   19d5e:	ea 89       	ldd	r30, Y+18	; 0x12
   19d60:	fb 89       	ldd	r31, Y+19	; 0x13
   19d62:	80 81       	ld	r24, Z
   19d64:	80 62       	ori	r24, 0x20	; 32
   19d66:	d2 cf       	rjmp	.-92     	; 0x19d0c <HardwareSerial::write(unsigned char)+0x32>

00019d68 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   19d68:	1f 92       	push	r1
   19d6a:	0f 92       	push	r0
   19d6c:	0f b6       	in	r0, 0x3f	; 63
   19d6e:	0f 92       	push	r0
   19d70:	11 24       	eor	r1, r1
   19d72:	0b b6       	in	r0, 0x3b	; 59
   19d74:	0f 92       	push	r0
   19d76:	2f 93       	push	r18
   19d78:	8f 93       	push	r24
   19d7a:	9f 93       	push	r25
   19d7c:	ef 93       	push	r30
   19d7e:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   19d80:	e0 91 03 12 	lds	r30, 0x1203	; 0x801203 <Serial+0x10>
   19d84:	f0 91 04 12 	lds	r31, 0x1204	; 0x801204 <Serial+0x11>
   19d88:	80 81       	ld	r24, Z
   19d8a:	e0 91 09 12 	lds	r30, 0x1209	; 0x801209 <Serial+0x16>
   19d8e:	f0 91 0a 12 	lds	r31, 0x120A	; 0x80120a <Serial+0x17>
   19d92:	82 fd       	sbrc	r24, 2
   19d94:	1d c0       	rjmp	.+58     	; 0x19dd0 <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   19d96:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   19d98:	80 91 0c 12 	lds	r24, 0x120C	; 0x80120c <Serial+0x19>
   19d9c:	8f 5f       	subi	r24, 0xFF	; 255
   19d9e:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   19da0:	20 91 0d 12 	lds	r18, 0x120D	; 0x80120d <Serial+0x1a>
   19da4:	82 17       	cp	r24, r18
   19da6:	41 f0       	breq	.+16     	; 0x19db8 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   19da8:	e0 91 0c 12 	lds	r30, 0x120C	; 0x80120c <Serial+0x19>
   19dac:	f0 e0       	ldi	r31, 0x00	; 0
   19dae:	ed 50       	subi	r30, 0x0D	; 13
   19db0:	fe 4e       	sbci	r31, 0xEE	; 238
   19db2:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   19db4:	80 93 0c 12 	sts	0x120C, r24	; 0x80120c <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   19db8:	ff 91       	pop	r31
   19dba:	ef 91       	pop	r30
   19dbc:	9f 91       	pop	r25
   19dbe:	8f 91       	pop	r24
   19dc0:	2f 91       	pop	r18
   19dc2:	0f 90       	pop	r0
   19dc4:	0b be       	out	0x3b, r0	; 59
   19dc6:	0f 90       	pop	r0
   19dc8:	0f be       	out	0x3f, r0	; 63
   19dca:	0f 90       	pop	r0
   19dcc:	1f 90       	pop	r1
   19dce:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   19dd0:	80 81       	ld	r24, Z
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
   19dd2:	f2 cf       	rjmp	.-28     	; 0x19db8 <__vector_25+0x50>

00019dd4 <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   19dd4:	1f 92       	push	r1
   19dd6:	0f 92       	push	r0
   19dd8:	0f b6       	in	r0, 0x3f	; 63
   19dda:	0f 92       	push	r0
   19ddc:	11 24       	eor	r1, r1
   19dde:	0b b6       	in	r0, 0x3b	; 59
   19de0:	0f 92       	push	r0
   19de2:	2f 93       	push	r18
   19de4:	3f 93       	push	r19
   19de6:	4f 93       	push	r20
   19de8:	5f 93       	push	r21
   19dea:	6f 93       	push	r22
   19dec:	7f 93       	push	r23
   19dee:	8f 93       	push	r24
   19df0:	9f 93       	push	r25
   19df2:	af 93       	push	r26
   19df4:	bf 93       	push	r27
   19df6:	ef 93       	push	r30
   19df8:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   19dfa:	83 ef       	ldi	r24, 0xF3	; 243
   19dfc:	91 e1       	ldi	r25, 0x11	; 17
   19dfe:	0e 94 2c ce 	call	0x19c58	; 0x19c58 <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
   19e02:	ff 91       	pop	r31
   19e04:	ef 91       	pop	r30
   19e06:	bf 91       	pop	r27
   19e08:	af 91       	pop	r26
   19e0a:	9f 91       	pop	r25
   19e0c:	8f 91       	pop	r24
   19e0e:	7f 91       	pop	r23
   19e10:	6f 91       	pop	r22
   19e12:	5f 91       	pop	r21
   19e14:	4f 91       	pop	r20
   19e16:	3f 91       	pop	r19
   19e18:	2f 91       	pop	r18
   19e1a:	0f 90       	pop	r0
   19e1c:	0b be       	out	0x3b, r0	; 59
   19e1e:	0f 90       	pop	r0
   19e20:	0f be       	out	0x3f, r0	; 63
   19e22:	0f 90       	pop	r0
   19e24:	1f 90       	pop	r1
   19e26:	18 95       	reti

00019e28 <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
   19e28:	83 ef       	ldi	r24, 0xF3	; 243
   19e2a:	91 e1       	ldi	r25, 0x11	; 17
   19e2c:	0e 94 d4 cd 	call	0x19ba8	; 0x19ba8 <HardwareSerial::available()>
   19e30:	21 e0       	ldi	r18, 0x01	; 1
   19e32:	89 2b       	or	r24, r25
   19e34:	09 f4       	brne	.+2      	; 0x19e38 <Serial0_available()+0x10>
   19e36:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
   19e38:	82 2f       	mov	r24, r18
   19e3a:	08 95       	ret

00019e3c <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   19e3c:	e3 ef       	ldi	r30, 0xF3	; 243
   19e3e:	f1 e1       	ldi	r31, 0x11	; 17
   19e40:	13 82       	std	Z+3, r1	; 0x03
   19e42:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   19e44:	88 ee       	ldi	r24, 0xE8	; 232
   19e46:	93 e0       	ldi	r25, 0x03	; 3
   19e48:	a0 e0       	ldi	r26, 0x00	; 0
   19e4a:	b0 e0       	ldi	r27, 0x00	; 0
   19e4c:	84 83       	std	Z+4, r24	; 0x04
   19e4e:	95 83       	std	Z+5, r25	; 0x05
   19e50:	a6 83       	std	Z+6, r26	; 0x06
   19e52:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
   19e54:	8e ea       	ldi	r24, 0xAE	; 174
   19e56:	98 e0       	ldi	r25, 0x08	; 8
   19e58:	91 83       	std	Z+1, r25	; 0x01
   19e5a:	80 83       	st	Z, r24
   19e5c:	85 ec       	ldi	r24, 0xC5	; 197
   19e5e:	90 e0       	ldi	r25, 0x00	; 0
   19e60:	95 87       	std	Z+13, r25	; 0x0d
   19e62:	84 87       	std	Z+12, r24	; 0x0c
   19e64:	84 ec       	ldi	r24, 0xC4	; 196
   19e66:	90 e0       	ldi	r25, 0x00	; 0
   19e68:	97 87       	std	Z+15, r25	; 0x0f
   19e6a:	86 87       	std	Z+14, r24	; 0x0e
   19e6c:	80 ec       	ldi	r24, 0xC0	; 192
   19e6e:	90 e0       	ldi	r25, 0x00	; 0
   19e70:	91 8b       	std	Z+17, r25	; 0x11
   19e72:	80 8b       	std	Z+16, r24	; 0x10
   19e74:	81 ec       	ldi	r24, 0xC1	; 193
   19e76:	90 e0       	ldi	r25, 0x00	; 0
   19e78:	93 8b       	std	Z+19, r25	; 0x13
   19e7a:	82 8b       	std	Z+18, r24	; 0x12
   19e7c:	82 ec       	ldi	r24, 0xC2	; 194
   19e7e:	90 e0       	ldi	r25, 0x00	; 0
   19e80:	95 8b       	std	Z+21, r25	; 0x15
   19e82:	84 8b       	std	Z+20, r24	; 0x14
   19e84:	86 ec       	ldi	r24, 0xC6	; 198
   19e86:	90 e0       	ldi	r25, 0x00	; 0
   19e88:	97 8b       	std	Z+23, r25	; 0x17
   19e8a:	86 8b       	std	Z+22, r24	; 0x16
   19e8c:	11 8e       	std	Z+25, r1	; 0x19
   19e8e:	12 8e       	std	Z+26, r1	; 0x1a
   19e90:	13 8e       	std	Z+27, r1	; 0x1b
   19e92:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
   19e94:	08 95       	ret

00019e96 <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:83
    if (dots != 3) {
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
   19e96:	8f 92       	push	r8
   19e98:	9f 92       	push	r9
   19e9a:	af 92       	push	r10
   19e9c:	bf 92       	push	r11
   19e9e:	cf 92       	push	r12
   19ea0:	df 92       	push	r13
   19ea2:	ef 92       	push	r14
   19ea4:	ff 92       	push	r15
   19ea6:	0f 93       	push	r16
   19ea8:	1f 93       	push	r17
   19eaa:	cf 93       	push	r28
   19eac:	df 93       	push	r29
   19eae:	7c 01       	movw	r14, r24
   19eb0:	8b 01       	movw	r16, r22
   19eb2:	4c 01       	movw	r8, r24
   19eb4:	82 e0       	ldi	r24, 0x02	; 2
   19eb6:	88 0e       	add	r8, r24
   19eb8:	91 1c       	adc	r9, r1
   19eba:	57 01       	movw	r10, r14
   19ebc:	e5 e0       	ldi	r30, 0x05	; 5
   19ebe:	ae 0e       	add	r10, r30
   19ec0:	b1 1c       	adc	r11, r1
   19ec2:	d0 e0       	ldi	r29, 0x00	; 0
   19ec4:	c0 e0       	ldi	r28, 0x00	; 0
   19ec6:	f4 01       	movw	r30, r8
   19ec8:	61 91       	ld	r22, Z+
   19eca:	4f 01       	movw	r8, r30
   19ecc:	4a e0       	ldi	r20, 0x0A	; 10
   19ece:	50 e0       	ldi	r21, 0x00	; 0
   19ed0:	c8 01       	movw	r24, r16
   19ed2:	0e 94 54 d0 	call	0x1a0a8	; 0x1a0a8 <Print::print(unsigned char, int)>
   19ed6:	6c 01       	movw	r12, r24
   19ed8:	6e e2       	ldi	r22, 0x2E	; 46
   19eda:	c8 01       	movw	r24, r16
   19edc:	0e 94 f4 cf 	call	0x19fe8	; 0x19fe8 <Print::print(char)>
   19ee0:	8c 0d       	add	r24, r12
   19ee2:	9d 1d       	adc	r25, r13
   19ee4:	c8 0f       	add	r28, r24
   19ee6:	d9 1f       	adc	r29, r25
   19ee8:	8a 14       	cp	r8, r10
   19eea:	9b 04       	cpc	r9, r11
   19eec:	61 f7       	brne	.-40     	; 0x19ec6 <IPAddress::printTo(Print&) const+0x30>
   19eee:	4a e0       	ldi	r20, 0x0A	; 10
   19ef0:	50 e0       	ldi	r21, 0x00	; 0
   19ef2:	f7 01       	movw	r30, r14
   19ef4:	65 81       	ldd	r22, Z+5	; 0x05
   19ef6:	c8 01       	movw	r24, r16
   19ef8:	0e 94 54 d0 	call	0x1a0a8	; 0x1a0a8 <Print::print(unsigned char, int)>
   19efc:	8c 0f       	add	r24, r28
   19efe:	9d 1f       	adc	r25, r29
   19f00:	df 91       	pop	r29
   19f02:	cf 91       	pop	r28
   19f04:	1f 91       	pop	r17
   19f06:	0f 91       	pop	r16
   19f08:	ff 90       	pop	r15
   19f0a:	ef 90       	pop	r14
   19f0c:	df 90       	pop	r13
   19f0e:	cf 90       	pop	r12
   19f10:	bf 90       	pop	r11
   19f12:	af 90       	pop	r10
   19f14:	9f 90       	pop	r9
   19f16:	8f 90       	pop	r8
   19f18:	08 95       	ret

00019f1a <IPAddress::IPAddress()>:
_ZN9IPAddressC2Ev():
   19f1a:	20 ec       	ldi	r18, 0xC0	; 192
   19f1c:	38 e0       	ldi	r19, 0x08	; 8
   19f1e:	fc 01       	movw	r30, r24
   19f20:	31 83       	std	Z+1, r19	; 0x01
   19f22:	20 83       	st	Z, r18
   19f24:	12 82       	std	Z+2, r1	; 0x02
   19f26:	13 82       	std	Z+3, r1	; 0x03
   19f28:	14 82       	std	Z+4, r1	; 0x04
   19f2a:	15 82       	std	Z+5, r1	; 0x05
   19f2c:	08 95       	ret

00019f2e <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN9IPAddressC2Ehhhh():
   19f2e:	0f 93       	push	r16
   19f30:	fc 01       	movw	r30, r24
   19f32:	80 ec       	ldi	r24, 0xC0	; 192
   19f34:	98 e0       	ldi	r25, 0x08	; 8
   19f36:	91 83       	std	Z+1, r25	; 0x01
   19f38:	80 83       	st	Z, r24
   19f3a:	62 83       	std	Z+2, r22	; 0x02
   19f3c:	43 83       	std	Z+3, r20	; 0x03
   19f3e:	24 83       	std	Z+4, r18	; 0x04
   19f40:	05 83       	std	Z+5, r16	; 0x05
   19f42:	0f 91       	pop	r16
   19f44:	08 95       	ret

00019f46 <IPAddress::IPAddress(unsigned char const*)>:
_ZN9IPAddressC2EPKh():
   19f46:	dc 01       	movw	r26, r24
   19f48:	80 ec       	ldi	r24, 0xC0	; 192
   19f4a:	98 e0       	ldi	r25, 0x08	; 8
   19f4c:	8d 93       	st	X+, r24
   19f4e:	9d 93       	st	X+, r25
   19f50:	84 e0       	ldi	r24, 0x04	; 4
   19f52:	fb 01       	movw	r30, r22
   19f54:	01 90       	ld	r0, Z+
   19f56:	0d 92       	st	X+, r0
   19f58:	8a 95       	dec	r24
   19f5a:	e1 f7       	brne	.-8      	; 0x19f54 <IPAddress::IPAddress(unsigned char const*)+0xe>
   19f5c:	08 95       	ret

00019f5e <IPAddress::operator=(unsigned char const*)>:
_ZN9IPAddressaSEPKh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:88
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   19f5e:	dc 01       	movw	r26, r24
   19f60:	12 96       	adiw	r26, 0x02	; 2
   19f62:	24 e0       	ldi	r18, 0x04	; 4
   19f64:	fb 01       	movw	r30, r22
   19f66:	01 90       	ld	r0, Z+
   19f68:	0d 92       	st	X+, r0
   19f6a:	2a 95       	dec	r18
   19f6c:	e1 f7       	brne	.-8      	; 0x19f66 <IPAddress::operator=(unsigned char const*)+0x8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:90
    return *this;
}
   19f6e:	08 95       	ret

00019f70 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
   19f70:	af 92       	push	r10
   19f72:	bf 92       	push	r11
   19f74:	cf 92       	push	r12
   19f76:	df 92       	push	r13
   19f78:	ef 92       	push	r14
   19f7a:	ff 92       	push	r15
   19f7c:	0f 93       	push	r16
   19f7e:	1f 93       	push	r17
   19f80:	cf 93       	push	r28
   19f82:	df 93       	push	r29
   19f84:	6c 01       	movw	r12, r24
   19f86:	7b 01       	movw	r14, r22
   19f88:	8b 01       	movw	r16, r22
   19f8a:	04 0f       	add	r16, r20
   19f8c:	15 1f       	adc	r17, r21
   19f8e:	eb 01       	movw	r28, r22
   19f90:	5e 01       	movw	r10, r28
   19f92:	ae 18       	sub	r10, r14
   19f94:	bf 08       	sbc	r11, r15
   19f96:	c0 17       	cp	r28, r16
   19f98:	d1 07       	cpc	r29, r17
   19f9a:	59 f0       	breq	.+22     	; 0x19fb2 <Print::write(unsigned char const*, unsigned int)+0x42>
   19f9c:	69 91       	ld	r22, Y+
   19f9e:	d6 01       	movw	r26, r12
   19fa0:	ed 91       	ld	r30, X+
   19fa2:	fc 91       	ld	r31, X
   19fa4:	01 90       	ld	r0, Z+
   19fa6:	f0 81       	ld	r31, Z
   19fa8:	e0 2d       	mov	r30, r0
   19faa:	c6 01       	movw	r24, r12
   19fac:	19 95       	eicall
   19fae:	89 2b       	or	r24, r25
   19fb0:	79 f7       	brne	.-34     	; 0x19f90 <Print::write(unsigned char const*, unsigned int)+0x20>
   19fb2:	c5 01       	movw	r24, r10
   19fb4:	df 91       	pop	r29
   19fb6:	cf 91       	pop	r28
   19fb8:	1f 91       	pop	r17
   19fba:	0f 91       	pop	r16
   19fbc:	ff 90       	pop	r15
   19fbe:	ef 90       	pop	r14
   19fc0:	df 90       	pop	r13
   19fc2:	cf 90       	pop	r12
   19fc4:	bf 90       	pop	r11
   19fc6:	af 90       	pop	r10
   19fc8:	08 95       	ret

00019fca <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
   19fca:	fb 01       	movw	r30, r22
   19fcc:	01 90       	ld	r0, Z+
   19fce:	00 20       	and	r0, r0
   19fd0:	e9 f7       	brne	.-6      	; 0x19fcc <Print::write(char const*) [clone .part.2]+0x2>
   19fd2:	31 97       	sbiw	r30, 0x01	; 1
   19fd4:	af 01       	movw	r20, r30
   19fd6:	46 1b       	sub	r20, r22
   19fd8:	57 0b       	sbc	r21, r23
   19fda:	dc 01       	movw	r26, r24
   19fdc:	ed 91       	ld	r30, X+
   19fde:	fc 91       	ld	r31, X
   19fe0:	02 80       	ldd	r0, Z+2	; 0x02
   19fe2:	f3 81       	ldd	r31, Z+3	; 0x03
   19fe4:	e0 2d       	mov	r30, r0
   19fe6:	19 94       	eijmp

00019fe8 <Print::print(char)>:
_ZN5Print5printEc():
   19fe8:	dc 01       	movw	r26, r24
   19fea:	ed 91       	ld	r30, X+
   19fec:	fc 91       	ld	r31, X
   19fee:	01 90       	ld	r0, Z+
   19ff0:	f0 81       	ld	r31, Z
   19ff2:	e0 2d       	mov	r30, r0
   19ff4:	19 94       	eijmp

00019ff6 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
   19ff6:	8f 92       	push	r8
   19ff8:	9f 92       	push	r9
   19ffa:	af 92       	push	r10
   19ffc:	bf 92       	push	r11
   19ffe:	ef 92       	push	r14
   1a000:	ff 92       	push	r15
   1a002:	0f 93       	push	r16
   1a004:	1f 93       	push	r17
   1a006:	cf 93       	push	r28
   1a008:	df 93       	push	r29
   1a00a:	cd b7       	in	r28, 0x3d	; 61
   1a00c:	de b7       	in	r29, 0x3e	; 62
   1a00e:	a1 97       	sbiw	r28, 0x21	; 33
   1a010:	0f b6       	in	r0, 0x3f	; 63
   1a012:	f8 94       	cli
   1a014:	de bf       	out	0x3e, r29	; 62
   1a016:	0f be       	out	0x3f, r0	; 63
   1a018:	cd bf       	out	0x3d, r28	; 61
   1a01a:	7c 01       	movw	r14, r24
   1a01c:	fa 01       	movw	r30, r20
   1a01e:	cb 01       	movw	r24, r22
   1a020:	19 a2       	std	Y+33, r1	; 0x21
   1a022:	22 30       	cpi	r18, 0x02	; 2
   1a024:	08 f4       	brcc	.+2      	; 0x1a028 <Print::printNumber(unsigned long, unsigned char)+0x32>
   1a026:	2a e0       	ldi	r18, 0x0A	; 10
   1a028:	8e 01       	movw	r16, r28
   1a02a:	0f 5d       	subi	r16, 0xDF	; 223
   1a02c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a02e:	82 2e       	mov	r8, r18
   1a030:	91 2c       	mov	r9, r1
   1a032:	b1 2c       	mov	r11, r1
   1a034:	a1 2c       	mov	r10, r1
   1a036:	bf 01       	movw	r22, r30
   1a038:	a5 01       	movw	r20, r10
   1a03a:	94 01       	movw	r18, r8
   1a03c:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
   1a040:	f9 01       	movw	r30, r18
   1a042:	ca 01       	movw	r24, r20
   1a044:	6a 30       	cpi	r22, 0x0A	; 10
   1a046:	0c f5       	brge	.+66     	; 0x1a08a <Print::printNumber(unsigned long, unsigned char)+0x94>
   1a048:	60 5d       	subi	r22, 0xD0	; 208
   1a04a:	d8 01       	movw	r26, r16
   1a04c:	6e 93       	st	-X, r22
   1a04e:	8d 01       	movw	r16, r26
   1a050:	23 2b       	or	r18, r19
   1a052:	24 2b       	or	r18, r20
   1a054:	25 2b       	or	r18, r21
   1a056:	79 f7       	brne	.-34     	; 0x1a036 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
   1a058:	90 e0       	ldi	r25, 0x00	; 0
   1a05a:	80 e0       	ldi	r24, 0x00	; 0
   1a05c:	10 97       	sbiw	r26, 0x00	; 0
   1a05e:	21 f0       	breq	.+8      	; 0x1a068 <Print::printNumber(unsigned long, unsigned char)+0x72>
   1a060:	bd 01       	movw	r22, r26
   1a062:	c7 01       	movw	r24, r14
   1a064:	0e 94 e5 cf 	call	0x19fca	; 0x19fca <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
   1a068:	a1 96       	adiw	r28, 0x21	; 33
   1a06a:	0f b6       	in	r0, 0x3f	; 63
   1a06c:	f8 94       	cli
   1a06e:	de bf       	out	0x3e, r29	; 62
   1a070:	0f be       	out	0x3f, r0	; 63
   1a072:	cd bf       	out	0x3d, r28	; 61
   1a074:	df 91       	pop	r29
   1a076:	cf 91       	pop	r28
   1a078:	1f 91       	pop	r17
   1a07a:	0f 91       	pop	r16
   1a07c:	ff 90       	pop	r15
   1a07e:	ef 90       	pop	r14
   1a080:	bf 90       	pop	r11
   1a082:	af 90       	pop	r10
   1a084:	9f 90       	pop	r9
   1a086:	8f 90       	pop	r8
   1a088:	08 95       	ret
   1a08a:	69 5c       	subi	r22, 0xC9	; 201
   1a08c:	de cf       	rjmp	.-68     	; 0x1a04a <Print::printNumber(unsigned long, unsigned char)+0x54>

0001a08e <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:105
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   1a08e:	21 15       	cp	r18, r1
   1a090:	31 05       	cpc	r19, r1
   1a092:	41 f4       	brne	.+16     	; 0x1a0a4 <Print::print(unsigned long, int)+0x16>
   1a094:	dc 01       	movw	r26, r24
   1a096:	ed 91       	ld	r30, X+
   1a098:	fc 91       	ld	r31, X
   1a09a:	01 90       	ld	r0, Z+
   1a09c:	f0 81       	ld	r31, Z
   1a09e:	e0 2d       	mov	r30, r0
   1a0a0:	64 2f       	mov	r22, r20
   1a0a2:	19 94       	eijmp
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
  else return printNumber(n, base);
   1a0a4:	0c 94 fb cf 	jmp	0x19ff6	; 0x19ff6 <Print::printNumber(unsigned long, unsigned char)>

0001a0a8 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:73
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
   1a0a8:	9a 01       	movw	r18, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
  return print((unsigned long) b, base);
   1a0aa:	46 2f       	mov	r20, r22
   1a0ac:	50 e0       	ldi	r21, 0x00	; 0
   1a0ae:	70 e0       	ldi	r23, 0x00	; 0
   1a0b0:	60 e0       	ldi	r22, 0x00	; 0
   1a0b2:	0c 94 47 d0 	jmp	0x1a08e	; 0x1a08e <Print::print(unsigned long, int)>

0001a0b6 <makeWord(unsigned char, unsigned char)>:
_Z8makeWordhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WMath.cpp:58
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
unsigned int makeWord(unsigned char h, unsigned char l) { return (h << 8) | l; }
   1a0b6:	98 2f       	mov	r25, r24
   1a0b8:	86 2f       	mov	r24, r22
   1a0ba:	08 95       	ret

0001a0bc <String::~String()>:
_ZN6StringD2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   1a0bc:	fc 01       	movw	r30, r24
   1a0be:	80 81       	ld	r24, Z
   1a0c0:	91 81       	ldd	r25, Z+1	; 0x01
   1a0c2:	0c 94 97 d4 	jmp	0x1a92e	; 0x1a92e <free>

0001a0c6 <String::invalidate()>:
_ZN6String10invalidateEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
   1a0c6:	cf 93       	push	r28
   1a0c8:	df 93       	push	r29
   1a0ca:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
   1a0cc:	88 81       	ld	r24, Y
   1a0ce:	99 81       	ldd	r25, Y+1	; 0x01
   1a0d0:	00 97       	sbiw	r24, 0x00	; 0
   1a0d2:	11 f0       	breq	.+4      	; 0x1a0d8 <String::invalidate()+0x12>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140 (discriminator 1)
   1a0d4:	0e 94 97 d4 	call	0x1a92e	; 0x1a92e <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   1a0d8:	19 82       	std	Y+1, r1	; 0x01
   1a0da:	18 82       	st	Y, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   1a0dc:	1d 82       	std	Y+5, r1	; 0x05
   1a0de:	1c 82       	std	Y+4, r1	; 0x04
   1a0e0:	1b 82       	std	Y+3, r1	; 0x03
   1a0e2:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:143
}
   1a0e4:	df 91       	pop	r29
   1a0e6:	cf 91       	pop	r28
   1a0e8:	08 95       	ret

0001a0ea <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:156
  }
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   1a0ea:	0f 93       	push	r16
   1a0ec:	1f 93       	push	r17
   1a0ee:	cf 93       	push	r28
   1a0f0:	df 93       	push	r29
   1a0f2:	ec 01       	movw	r28, r24
   1a0f4:	8b 01       	movw	r16, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:157
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   1a0f6:	6f 5f       	subi	r22, 0xFF	; 255
   1a0f8:	7f 4f       	sbci	r23, 0xFF	; 255
   1a0fa:	88 81       	ld	r24, Y
   1a0fc:	99 81       	ldd	r25, Y+1	; 0x01
   1a0fe:	0e 94 20 d5 	call	0x1aa40	; 0x1aa40 <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   1a102:	00 97       	sbiw	r24, 0x00	; 0
   1a104:	51 f0       	breq	.+20     	; 0x1a11a <String::changeBuffer(unsigned int)+0x30>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   1a106:	99 83       	std	Y+1, r25	; 0x01
   1a108:	88 83       	st	Y, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   1a10a:	1b 83       	std	Y+3, r17	; 0x03
   1a10c:	0a 83       	std	Y+2, r16	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:161
    return 1;
   1a10e:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:164
  }
  return 0;
}
   1a110:	df 91       	pop	r29
   1a112:	cf 91       	pop	r28
   1a114:	1f 91       	pop	r17
   1a116:	0f 91       	pop	r16
   1a118:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:163
  if (newbuffer) {
    buffer = newbuffer;
    capacity = maxStrLen;
    return 1;
  }
  return 0;
   1a11a:	80 e0       	ldi	r24, 0x00	; 0
   1a11c:	f9 cf       	rjmp	.-14     	; 0x1a110 <String::changeBuffer(unsigned int)+0x26>

0001a11e <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:146
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   1a11e:	cf 93       	push	r28
   1a120:	df 93       	push	r29
   1a122:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
   1a124:	88 81       	ld	r24, Y
   1a126:	99 81       	ldd	r25, Y+1	; 0x01
   1a128:	89 2b       	or	r24, r25
   1a12a:	49 f0       	breq	.+18     	; 0x1a13e <String::reserve(unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:147 (discriminator 1)
   1a12c:	8a 81       	ldd	r24, Y+2	; 0x02
   1a12e:	9b 81       	ldd	r25, Y+3	; 0x03
   1a130:	86 17       	cp	r24, r22
   1a132:	97 07       	cpc	r25, r23
   1a134:	20 f0       	brcs	.+8      	; 0x1a13e <String::reserve(unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   1a136:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
   1a138:	df 91       	pop	r29
   1a13a:	cf 91       	pop	r28
   1a13c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:148
}

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
   1a13e:	ce 01       	movw	r24, r28
   1a140:	0e 94 75 d0 	call	0x1a0ea	; 0x1a0ea <String::changeBuffer(unsigned int)>
   1a144:	88 23       	and	r24, r24
   1a146:	c1 f3       	breq	.-16     	; 0x1a138 <String::reserve(unsigned int)+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149
    if (len == 0) buffer[0] = 0;
   1a148:	8c 81       	ldd	r24, Y+4	; 0x04
   1a14a:	9d 81       	ldd	r25, Y+5	; 0x05
   1a14c:	89 2b       	or	r24, r25
   1a14e:	99 f7       	brne	.-26     	; 0x1a136 <String::reserve(unsigned int)+0x18>
   1a150:	e8 81       	ld	r30, Y
   1a152:	f9 81       	ldd	r31, Y+1	; 0x01
   1a154:	10 82       	st	Z, r1
   1a156:	ef cf       	rjmp	.-34     	; 0x1a136 <String::reserve(unsigned int)+0x18>

0001a158 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   1a158:	ef 92       	push	r14
   1a15a:	ff 92       	push	r15
   1a15c:	0f 93       	push	r16
   1a15e:	1f 93       	push	r17
   1a160:	cf 93       	push	r28
   1a162:	df 93       	push	r29
   1a164:	ec 01       	movw	r28, r24
   1a166:	7b 01       	movw	r14, r22
   1a168:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:172
  if (!reserve(length)) {
   1a16a:	ba 01       	movw	r22, r20
   1a16c:	0e 94 8f d0 	call	0x1a11e	; 0x1a11e <String::reserve(unsigned int)>
   1a170:	81 11       	cpse	r24, r1
   1a172:	0b c0       	rjmp	.+22     	; 0x1a18a <String::copy(char const*, unsigned int)+0x32>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:173
    invalidate();
   1a174:	ce 01       	movw	r24, r28
   1a176:	0e 94 63 d0 	call	0x1a0c6	; 0x1a0c6 <String::invalidate()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:179
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
   1a17a:	ce 01       	movw	r24, r28
   1a17c:	df 91       	pop	r29
   1a17e:	cf 91       	pop	r28
   1a180:	1f 91       	pop	r17
   1a182:	0f 91       	pop	r16
   1a184:	ff 90       	pop	r15
   1a186:	ef 90       	pop	r14
   1a188:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   1a18a:	1d 83       	std	Y+5, r17	; 0x05
   1a18c:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   1a18e:	b7 01       	movw	r22, r14
   1a190:	88 81       	ld	r24, Y
   1a192:	99 81       	ldd	r25, Y+1	; 0x01
   1a194:	0e 94 72 d7 	call	0x1aee4	; 0x1aee4 <strcpy>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:178
  return *this;
   1a198:	f0 cf       	rjmp	.-32     	; 0x1a17a <String::copy(char const*, unsigned int)+0x22>

0001a19a <String::String(char const*)>:
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   1a19a:	fc 01       	movw	r30, r24
   1a19c:	11 82       	std	Z+1, r1	; 0x01
   1a19e:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   1a1a0:	13 82       	std	Z+3, r1	; 0x03
   1a1a2:	12 82       	std	Z+2, r1	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   1a1a4:	15 82       	std	Z+5, r1	; 0x05
   1a1a6:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   1a1a8:	61 15       	cp	r22, r1
   1a1aa:	71 05       	cpc	r23, r1
   1a1ac:	51 f0       	breq	.+20     	; 0x1a1c2 <String::String(char const*)+0x28>
   1a1ae:	fb 01       	movw	r30, r22
   1a1b0:	01 90       	ld	r0, Z+
   1a1b2:	00 20       	and	r0, r0
   1a1b4:	e9 f7       	brne	.-6      	; 0x1a1b0 <String::String(char const*)+0x16>
   1a1b6:	31 97       	sbiw	r30, 0x01	; 1
   1a1b8:	af 01       	movw	r20, r30
   1a1ba:	46 1b       	sub	r20, r22
   1a1bc:	57 0b       	sbc	r21, r23
   1a1be:	0c 94 ac d0 	jmp	0x1a158	; 0x1a158 <String::copy(char const*, unsigned int)>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:32
}
   1a1c2:	08 95       	ret

0001a1c4 <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   1a1c4:	0e 94 04 d7 	call	0x1ae08	; 0x1ae08 <abort>

0001a1c8 <initVariant>:
initVariant():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
   1a1c8:	08 95       	ret

0001a1ca <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
   1a1ca:	0e 94 94 cc 	call	0x19928	; 0x19928 <init>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
   1a1ce:	0e 94 e4 d0 	call	0x1a1c8	; 0x1a1c8 <initVariant>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   1a1d2:	0e 94 6a 61 	call	0xc2d4	; 0xc2d4 <setup>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   1a1d6:	c1 e1       	ldi	r28, 0x11	; 17
   1a1d8:	de ec       	ldi	r29, 0xCE	; 206
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
   1a1da:	0e 94 9f 69 	call	0xd33e	; 0xd33e <loop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
   1a1de:	20 97       	sbiw	r28, 0x00	; 0
   1a1e0:	e1 f3       	breq	.-8      	; 0x1a1da <main+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
   1a1e2:	0e 94 11 ce 	call	0x19c22	; 0x19c22 <serialEventRun()>
   1a1e6:	f9 cf       	rjmp	.-14     	; 0x1a1da <main+0x10>

0001a1e8 <operator new(unsigned int)>:
_Znwj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   1a1e8:	0c 94 fb d3 	jmp	0x1a7f6	; 0x1a7f6 <malloc>

0001a1ec <operator new[](unsigned int)>:
_Znaj():
   1a1ec:	0c 94 fb d3 	jmp	0x1a7f6	; 0x1a7f6 <malloc>

0001a1f0 <__subsf3>:
__subsf3():
   1a1f0:	50 58       	subi	r21, 0x80	; 128

0001a1f2 <__addsf3>:
   1a1f2:	bb 27       	eor	r27, r27
   1a1f4:	aa 27       	eor	r26, r26
   1a1f6:	0e 94 10 d1 	call	0x1a220	; 0x1a220 <__addsf3x>
   1a1fa:	0c 94 8a d2 	jmp	0x1a514	; 0x1a514 <__fp_round>
__addsf3():
   1a1fe:	0e 94 7c d2 	call	0x1a4f8	; 0x1a4f8 <__fp_pscA>
   1a202:	38 f0       	brcs	.+14     	; 0x1a212 <__addsf3+0x20>
   1a204:	0e 94 83 d2 	call	0x1a506	; 0x1a506 <__fp_pscB>
   1a208:	20 f0       	brcs	.+8      	; 0x1a212 <__addsf3+0x20>
   1a20a:	39 f4       	brne	.+14     	; 0x1a21a <__addsf3+0x28>
   1a20c:	9f 3f       	cpi	r25, 0xFF	; 255
   1a20e:	19 f4       	brne	.+6      	; 0x1a216 <__addsf3+0x24>
   1a210:	26 f4       	brtc	.+8      	; 0x1a21a <__addsf3+0x28>
   1a212:	0c 94 79 d2 	jmp	0x1a4f2	; 0x1a4f2 <__fp_nan>
   1a216:	0e f4       	brtc	.+2      	; 0x1a21a <__addsf3+0x28>
   1a218:	e0 95       	com	r30
   1a21a:	e7 fb       	bst	r30, 7
   1a21c:	0c 94 73 d2 	jmp	0x1a4e6	; 0x1a4e6 <__fp_inf>

0001a220 <__addsf3x>:
__addsf3x():
   1a220:	e9 2f       	mov	r30, r25
   1a222:	0e 94 9b d2 	call	0x1a536	; 0x1a536 <__fp_split3>
   1a226:	58 f3       	brcs	.-42     	; 0x1a1fe <__addsf3+0xc>
   1a228:	ba 17       	cp	r27, r26
   1a22a:	62 07       	cpc	r22, r18
   1a22c:	73 07       	cpc	r23, r19
   1a22e:	84 07       	cpc	r24, r20
   1a230:	95 07       	cpc	r25, r21
   1a232:	20 f0       	brcs	.+8      	; 0x1a23c <__addsf3x+0x1c>
   1a234:	79 f4       	brne	.+30     	; 0x1a254 <__addsf3x+0x34>
   1a236:	a6 f5       	brtc	.+104    	; 0x1a2a0 <__addsf3x+0x80>
   1a238:	0c 94 bd d2 	jmp	0x1a57a	; 0x1a57a <__fp_zero>
   1a23c:	0e f4       	brtc	.+2      	; 0x1a240 <__addsf3x+0x20>
   1a23e:	e0 95       	com	r30
   1a240:	0b 2e       	mov	r0, r27
   1a242:	ba 2f       	mov	r27, r26
   1a244:	a0 2d       	mov	r26, r0
   1a246:	0b 01       	movw	r0, r22
   1a248:	b9 01       	movw	r22, r18
   1a24a:	90 01       	movw	r18, r0
   1a24c:	0c 01       	movw	r0, r24
   1a24e:	ca 01       	movw	r24, r20
   1a250:	a0 01       	movw	r20, r0
   1a252:	11 24       	eor	r1, r1
   1a254:	ff 27       	eor	r31, r31
   1a256:	59 1b       	sub	r21, r25
   1a258:	99 f0       	breq	.+38     	; 0x1a280 <__addsf3x+0x60>
   1a25a:	59 3f       	cpi	r21, 0xF9	; 249
   1a25c:	50 f4       	brcc	.+20     	; 0x1a272 <__addsf3x+0x52>
   1a25e:	50 3e       	cpi	r21, 0xE0	; 224
   1a260:	68 f1       	brcs	.+90     	; 0x1a2bc <__addsf3x+0x9c>
   1a262:	1a 16       	cp	r1, r26
   1a264:	f0 40       	sbci	r31, 0x00	; 0
   1a266:	a2 2f       	mov	r26, r18
   1a268:	23 2f       	mov	r18, r19
   1a26a:	34 2f       	mov	r19, r20
   1a26c:	44 27       	eor	r20, r20
   1a26e:	58 5f       	subi	r21, 0xF8	; 248
   1a270:	f3 cf       	rjmp	.-26     	; 0x1a258 <__addsf3x+0x38>
   1a272:	46 95       	lsr	r20
   1a274:	37 95       	ror	r19
   1a276:	27 95       	ror	r18
   1a278:	a7 95       	ror	r26
   1a27a:	f0 40       	sbci	r31, 0x00	; 0
   1a27c:	53 95       	inc	r21
   1a27e:	c9 f7       	brne	.-14     	; 0x1a272 <__addsf3x+0x52>
   1a280:	7e f4       	brtc	.+30     	; 0x1a2a0 <__addsf3x+0x80>
   1a282:	1f 16       	cp	r1, r31
   1a284:	ba 0b       	sbc	r27, r26
   1a286:	62 0b       	sbc	r22, r18
   1a288:	73 0b       	sbc	r23, r19
   1a28a:	84 0b       	sbc	r24, r20
   1a28c:	ba f0       	brmi	.+46     	; 0x1a2bc <__addsf3x+0x9c>
   1a28e:	91 50       	subi	r25, 0x01	; 1
   1a290:	a1 f0       	breq	.+40     	; 0x1a2ba <__addsf3x+0x9a>
   1a292:	ff 0f       	add	r31, r31
   1a294:	bb 1f       	adc	r27, r27
   1a296:	66 1f       	adc	r22, r22
   1a298:	77 1f       	adc	r23, r23
   1a29a:	88 1f       	adc	r24, r24
   1a29c:	c2 f7       	brpl	.-16     	; 0x1a28e <__addsf3x+0x6e>
   1a29e:	0e c0       	rjmp	.+28     	; 0x1a2bc <__addsf3x+0x9c>
   1a2a0:	ba 0f       	add	r27, r26
   1a2a2:	62 1f       	adc	r22, r18
   1a2a4:	73 1f       	adc	r23, r19
   1a2a6:	84 1f       	adc	r24, r20
   1a2a8:	48 f4       	brcc	.+18     	; 0x1a2bc <__addsf3x+0x9c>
   1a2aa:	87 95       	ror	r24
   1a2ac:	77 95       	ror	r23
   1a2ae:	67 95       	ror	r22
   1a2b0:	b7 95       	ror	r27
   1a2b2:	f7 95       	ror	r31
   1a2b4:	9e 3f       	cpi	r25, 0xFE	; 254
   1a2b6:	08 f0       	brcs	.+2      	; 0x1a2ba <__addsf3x+0x9a>
   1a2b8:	b0 cf       	rjmp	.-160    	; 0x1a21a <__addsf3+0x28>
   1a2ba:	93 95       	inc	r25
   1a2bc:	88 0f       	add	r24, r24
   1a2be:	08 f0       	brcs	.+2      	; 0x1a2c2 <__addsf3x+0xa2>
   1a2c0:	99 27       	eor	r25, r25
   1a2c2:	ee 0f       	add	r30, r30
   1a2c4:	97 95       	ror	r25
   1a2c6:	87 95       	ror	r24
   1a2c8:	08 95       	ret

0001a2ca <__cmpsf2>:
   1a2ca:	0e 94 4f d2 	call	0x1a49e	; 0x1a49e <__fp_cmp>
   1a2ce:	08 f4       	brcc	.+2      	; 0x1a2d2 <__cmpsf2+0x8>
   1a2d0:	81 e0       	ldi	r24, 0x01	; 1
   1a2d2:	08 95       	ret

0001a2d4 <__divsf3>:
   1a2d4:	0e 94 7e d1 	call	0x1a2fc	; 0x1a2fc <__divsf3x>
   1a2d8:	0c 94 8a d2 	jmp	0x1a514	; 0x1a514 <__fp_round>
   1a2dc:	0e 94 83 d2 	call	0x1a506	; 0x1a506 <__fp_pscB>
   1a2e0:	58 f0       	brcs	.+22     	; 0x1a2f8 <__divsf3+0x24>
   1a2e2:	0e 94 7c d2 	call	0x1a4f8	; 0x1a4f8 <__fp_pscA>
   1a2e6:	40 f0       	brcs	.+16     	; 0x1a2f8 <__divsf3+0x24>
   1a2e8:	29 f4       	brne	.+10     	; 0x1a2f4 <__divsf3+0x20>
   1a2ea:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
   1a2ec:	29 f0       	breq	.+10     	; 0x1a2f8 <__divsf3+0x24>
   1a2ee:	0c 94 73 d2 	jmp	0x1a4e6	; 0x1a4e6 <__fp_inf>
   1a2f2:	51 11       	cpse	r21, r1
   1a2f4:	0c 94 be d2 	jmp	0x1a57c	; 0x1a57c <__fp_szero>
   1a2f8:	0c 94 79 d2 	jmp	0x1a4f2	; 0x1a4f2 <__fp_nan>

0001a2fc <__divsf3x>:
__divsf3x():
   1a2fc:	0e 94 9b d2 	call	0x1a536	; 0x1a536 <__fp_split3>
   1a300:	68 f3       	brcs	.-38     	; 0x1a2dc <__divsf3+0x8>

0001a302 <__divsf3_pse>:
   1a302:	99 23       	and	r25, r25
   1a304:	b1 f3       	breq	.-20     	; 0x1a2f2 <__divsf3+0x1e>
   1a306:	55 23       	and	r21, r21
   1a308:	91 f3       	breq	.-28     	; 0x1a2ee <__divsf3+0x1a>
   1a30a:	95 1b       	sub	r25, r21
   1a30c:	55 0b       	sbc	r21, r21
   1a30e:	bb 27       	eor	r27, r27
   1a310:	aa 27       	eor	r26, r26
   1a312:	62 17       	cp	r22, r18
   1a314:	73 07       	cpc	r23, r19
   1a316:	84 07       	cpc	r24, r20
   1a318:	38 f0       	brcs	.+14     	; 0x1a328 <__divsf3_pse+0x26>
   1a31a:	9f 5f       	subi	r25, 0xFF	; 255
   1a31c:	5f 4f       	sbci	r21, 0xFF	; 255
   1a31e:	22 0f       	add	r18, r18
   1a320:	33 1f       	adc	r19, r19
   1a322:	44 1f       	adc	r20, r20
   1a324:	aa 1f       	adc	r26, r26
   1a326:	a9 f3       	breq	.-22     	; 0x1a312 <__divsf3_pse+0x10>
   1a328:	35 d0       	rcall	.+106    	; 0x1a394 <__divsf3_pse+0x92>
   1a32a:	0e 2e       	mov	r0, r30
   1a32c:	3a f0       	brmi	.+14     	; 0x1a33c <__divsf3_pse+0x3a>
   1a32e:	e0 e8       	ldi	r30, 0x80	; 128
   1a330:	32 d0       	rcall	.+100    	; 0x1a396 <__divsf3_pse+0x94>
   1a332:	91 50       	subi	r25, 0x01	; 1
   1a334:	50 40       	sbci	r21, 0x00	; 0
   1a336:	e6 95       	lsr	r30
   1a338:	00 1c       	adc	r0, r0
   1a33a:	ca f7       	brpl	.-14     	; 0x1a32e <__divsf3_pse+0x2c>
   1a33c:	2b d0       	rcall	.+86     	; 0x1a394 <__divsf3_pse+0x92>
   1a33e:	fe 2f       	mov	r31, r30
   1a340:	29 d0       	rcall	.+82     	; 0x1a394 <__divsf3_pse+0x92>
   1a342:	66 0f       	add	r22, r22
   1a344:	77 1f       	adc	r23, r23
   1a346:	88 1f       	adc	r24, r24
   1a348:	bb 1f       	adc	r27, r27
   1a34a:	26 17       	cp	r18, r22
   1a34c:	37 07       	cpc	r19, r23
   1a34e:	48 07       	cpc	r20, r24
   1a350:	ab 07       	cpc	r26, r27
   1a352:	b0 e8       	ldi	r27, 0x80	; 128
   1a354:	09 f0       	breq	.+2      	; 0x1a358 <__divsf3_pse+0x56>
   1a356:	bb 0b       	sbc	r27, r27
   1a358:	80 2d       	mov	r24, r0
   1a35a:	bf 01       	movw	r22, r30
   1a35c:	ff 27       	eor	r31, r31
   1a35e:	93 58       	subi	r25, 0x83	; 131
   1a360:	5f 4f       	sbci	r21, 0xFF	; 255
   1a362:	3a f0       	brmi	.+14     	; 0x1a372 <__divsf3_pse+0x70>
   1a364:	9e 3f       	cpi	r25, 0xFE	; 254
   1a366:	51 05       	cpc	r21, r1
   1a368:	78 f0       	brcs	.+30     	; 0x1a388 <__divsf3_pse+0x86>
   1a36a:	0c 94 73 d2 	jmp	0x1a4e6	; 0x1a4e6 <__fp_inf>
   1a36e:	0c 94 be d2 	jmp	0x1a57c	; 0x1a57c <__fp_szero>
   1a372:	5f 3f       	cpi	r21, 0xFF	; 255
   1a374:	e4 f3       	brlt	.-8      	; 0x1a36e <__divsf3_pse+0x6c>
   1a376:	98 3e       	cpi	r25, 0xE8	; 232
   1a378:	d4 f3       	brlt	.-12     	; 0x1a36e <__divsf3_pse+0x6c>
   1a37a:	86 95       	lsr	r24
   1a37c:	77 95       	ror	r23
   1a37e:	67 95       	ror	r22
   1a380:	b7 95       	ror	r27
   1a382:	f7 95       	ror	r31
   1a384:	9f 5f       	subi	r25, 0xFF	; 255
   1a386:	c9 f7       	brne	.-14     	; 0x1a37a <__divsf3_pse+0x78>
   1a388:	88 0f       	add	r24, r24
   1a38a:	91 1d       	adc	r25, r1
   1a38c:	96 95       	lsr	r25
   1a38e:	87 95       	ror	r24
   1a390:	97 f9       	bld	r25, 7
   1a392:	08 95       	ret
   1a394:	e1 e0       	ldi	r30, 0x01	; 1
   1a396:	66 0f       	add	r22, r22
   1a398:	77 1f       	adc	r23, r23
   1a39a:	88 1f       	adc	r24, r24
   1a39c:	bb 1f       	adc	r27, r27
   1a39e:	62 17       	cp	r22, r18
   1a3a0:	73 07       	cpc	r23, r19
   1a3a2:	84 07       	cpc	r24, r20
   1a3a4:	ba 07       	cpc	r27, r26
   1a3a6:	20 f0       	brcs	.+8      	; 0x1a3b0 <__divsf3_pse+0xae>
   1a3a8:	62 1b       	sub	r22, r18
   1a3aa:	73 0b       	sbc	r23, r19
   1a3ac:	84 0b       	sbc	r24, r20
   1a3ae:	ba 0b       	sbc	r27, r26
   1a3b0:	ee 1f       	adc	r30, r30
   1a3b2:	88 f7       	brcc	.-30     	; 0x1a396 <__divsf3_pse+0x94>
   1a3b4:	e0 95       	com	r30
   1a3b6:	08 95       	ret

0001a3b8 <__fixsfsi>:
   1a3b8:	0e 94 e3 d1 	call	0x1a3c6	; 0x1a3c6 <__fixunssfsi>
   1a3bc:	68 94       	set
   1a3be:	b1 11       	cpse	r27, r1
   1a3c0:	0c 94 be d2 	jmp	0x1a57c	; 0x1a57c <__fp_szero>
   1a3c4:	08 95       	ret

0001a3c6 <__fixunssfsi>:
   1a3c6:	0e 94 a3 d2 	call	0x1a546	; 0x1a546 <__fp_splitA>
   1a3ca:	88 f0       	brcs	.+34     	; 0x1a3ee <__fixunssfsi+0x28>
   1a3cc:	9f 57       	subi	r25, 0x7F	; 127
   1a3ce:	98 f0       	brcs	.+38     	; 0x1a3f6 <__fixunssfsi+0x30>
   1a3d0:	b9 2f       	mov	r27, r25
   1a3d2:	99 27       	eor	r25, r25
   1a3d4:	b7 51       	subi	r27, 0x17	; 23
   1a3d6:	b0 f0       	brcs	.+44     	; 0x1a404 <__fixunssfsi+0x3e>
__fixunssfsi():
   1a3d8:	e1 f0       	breq	.+56     	; 0x1a412 <__fixunssfsi+0x4c>
   1a3da:	66 0f       	add	r22, r22
   1a3dc:	77 1f       	adc	r23, r23
   1a3de:	88 1f       	adc	r24, r24
   1a3e0:	99 1f       	adc	r25, r25
   1a3e2:	1a f0       	brmi	.+6      	; 0x1a3ea <__fixunssfsi+0x24>
   1a3e4:	ba 95       	dec	r27
   1a3e6:	c9 f7       	brne	.-14     	; 0x1a3da <__fixunssfsi+0x14>
   1a3e8:	14 c0       	rjmp	.+40     	; 0x1a412 <__fixunssfsi+0x4c>
   1a3ea:	b1 30       	cpi	r27, 0x01	; 1
   1a3ec:	91 f0       	breq	.+36     	; 0x1a412 <__fixunssfsi+0x4c>
   1a3ee:	0e 94 bd d2 	call	0x1a57a	; 0x1a57a <__fp_zero>
   1a3f2:	b1 e0       	ldi	r27, 0x01	; 1
   1a3f4:	08 95       	ret
   1a3f6:	0c 94 bd d2 	jmp	0x1a57a	; 0x1a57a <__fp_zero>
   1a3fa:	67 2f       	mov	r22, r23
   1a3fc:	78 2f       	mov	r23, r24
   1a3fe:	88 27       	eor	r24, r24
   1a400:	b8 5f       	subi	r27, 0xF8	; 248
   1a402:	39 f0       	breq	.+14     	; 0x1a412 <__fixunssfsi+0x4c>
   1a404:	b9 3f       	cpi	r27, 0xF9	; 249
   1a406:	cc f3       	brlt	.-14     	; 0x1a3fa <__fixunssfsi+0x34>
   1a408:	86 95       	lsr	r24
   1a40a:	77 95       	ror	r23
   1a40c:	67 95       	ror	r22
   1a40e:	b3 95       	inc	r27
   1a410:	d9 f7       	brne	.-10     	; 0x1a408 <__fixunssfsi+0x42>
   1a412:	3e f4       	brtc	.+14     	; 0x1a422 <__fixunssfsi+0x5c>
   1a414:	90 95       	com	r25
   1a416:	80 95       	com	r24
   1a418:	70 95       	com	r23
   1a41a:	61 95       	neg	r22
   1a41c:	7f 4f       	sbci	r23, 0xFF	; 255
   1a41e:	8f 4f       	sbci	r24, 0xFF	; 255
   1a420:	9f 4f       	sbci	r25, 0xFF	; 255
   1a422:	08 95       	ret

0001a424 <__floatunsisf>:
__floatunsisf():
   1a424:	e8 94       	clt
   1a426:	09 c0       	rjmp	.+18     	; 0x1a43a <__floatsisf+0x12>

0001a428 <__floatsisf>:
   1a428:	97 fb       	bst	r25, 7
   1a42a:	3e f4       	brtc	.+14     	; 0x1a43a <__floatsisf+0x12>
   1a42c:	90 95       	com	r25
   1a42e:	80 95       	com	r24
   1a430:	70 95       	com	r23
   1a432:	61 95       	neg	r22
   1a434:	7f 4f       	sbci	r23, 0xFF	; 255
   1a436:	8f 4f       	sbci	r24, 0xFF	; 255
   1a438:	9f 4f       	sbci	r25, 0xFF	; 255
   1a43a:	99 23       	and	r25, r25
   1a43c:	a9 f0       	breq	.+42     	; 0x1a468 <__floatsisf+0x40>
   1a43e:	f9 2f       	mov	r31, r25
   1a440:	96 e9       	ldi	r25, 0x96	; 150
   1a442:	bb 27       	eor	r27, r27
   1a444:	93 95       	inc	r25
   1a446:	f6 95       	lsr	r31
   1a448:	87 95       	ror	r24
   1a44a:	77 95       	ror	r23
   1a44c:	67 95       	ror	r22
   1a44e:	b7 95       	ror	r27
   1a450:	f1 11       	cpse	r31, r1
   1a452:	f8 cf       	rjmp	.-16     	; 0x1a444 <__floatsisf+0x1c>
   1a454:	fa f4       	brpl	.+62     	; 0x1a494 <__floatsisf+0x6c>
   1a456:	bb 0f       	add	r27, r27
   1a458:	11 f4       	brne	.+4      	; 0x1a45e <__floatsisf+0x36>
   1a45a:	60 ff       	sbrs	r22, 0
   1a45c:	1b c0       	rjmp	.+54     	; 0x1a494 <__floatsisf+0x6c>
   1a45e:	6f 5f       	subi	r22, 0xFF	; 255
   1a460:	7f 4f       	sbci	r23, 0xFF	; 255
   1a462:	8f 4f       	sbci	r24, 0xFF	; 255
   1a464:	9f 4f       	sbci	r25, 0xFF	; 255
   1a466:	16 c0       	rjmp	.+44     	; 0x1a494 <__floatsisf+0x6c>
   1a468:	88 23       	and	r24, r24
   1a46a:	11 f0       	breq	.+4      	; 0x1a470 <__floatsisf+0x48>
   1a46c:	96 e9       	ldi	r25, 0x96	; 150
   1a46e:	11 c0       	rjmp	.+34     	; 0x1a492 <__floatsisf+0x6a>
   1a470:	77 23       	and	r23, r23
   1a472:	21 f0       	breq	.+8      	; 0x1a47c <__floatsisf+0x54>
   1a474:	9e e8       	ldi	r25, 0x8E	; 142
   1a476:	87 2f       	mov	r24, r23
   1a478:	76 2f       	mov	r23, r22
   1a47a:	05 c0       	rjmp	.+10     	; 0x1a486 <__floatsisf+0x5e>
   1a47c:	66 23       	and	r22, r22
   1a47e:	71 f0       	breq	.+28     	; 0x1a49c <__floatsisf+0x74>
   1a480:	96 e8       	ldi	r25, 0x86	; 134
   1a482:	86 2f       	mov	r24, r22
   1a484:	70 e0       	ldi	r23, 0x00	; 0
   1a486:	60 e0       	ldi	r22, 0x00	; 0
   1a488:	2a f0       	brmi	.+10     	; 0x1a494 <__floatsisf+0x6c>
   1a48a:	9a 95       	dec	r25
   1a48c:	66 0f       	add	r22, r22
   1a48e:	77 1f       	adc	r23, r23
   1a490:	88 1f       	adc	r24, r24
   1a492:	da f7       	brpl	.-10     	; 0x1a48a <__floatsisf+0x62>
   1a494:	88 0f       	add	r24, r24
   1a496:	96 95       	lsr	r25
   1a498:	87 95       	ror	r24
   1a49a:	97 f9       	bld	r25, 7
   1a49c:	08 95       	ret

0001a49e <__fp_cmp>:
__fp_cmp():
   1a49e:	99 0f       	add	r25, r25
   1a4a0:	00 08       	sbc	r0, r0
   1a4a2:	55 0f       	add	r21, r21
   1a4a4:	aa 0b       	sbc	r26, r26
   1a4a6:	e0 e8       	ldi	r30, 0x80	; 128
   1a4a8:	fe ef       	ldi	r31, 0xFE	; 254
   1a4aa:	16 16       	cp	r1, r22
   1a4ac:	17 06       	cpc	r1, r23
   1a4ae:	e8 07       	cpc	r30, r24
   1a4b0:	f9 07       	cpc	r31, r25
   1a4b2:	c0 f0       	brcs	.+48     	; 0x1a4e4 <__fp_cmp+0x46>
   1a4b4:	12 16       	cp	r1, r18
   1a4b6:	13 06       	cpc	r1, r19
   1a4b8:	e4 07       	cpc	r30, r20
   1a4ba:	f5 07       	cpc	r31, r21
   1a4bc:	98 f0       	brcs	.+38     	; 0x1a4e4 <__fp_cmp+0x46>
   1a4be:	62 1b       	sub	r22, r18
   1a4c0:	73 0b       	sbc	r23, r19
   1a4c2:	84 0b       	sbc	r24, r20
   1a4c4:	95 0b       	sbc	r25, r21
   1a4c6:	39 f4       	brne	.+14     	; 0x1a4d6 <__fp_cmp+0x38>
   1a4c8:	0a 26       	eor	r0, r26
   1a4ca:	61 f0       	breq	.+24     	; 0x1a4e4 <__fp_cmp+0x46>
   1a4cc:	23 2b       	or	r18, r19
   1a4ce:	24 2b       	or	r18, r20
   1a4d0:	25 2b       	or	r18, r21
   1a4d2:	21 f4       	brne	.+8      	; 0x1a4dc <__fp_cmp+0x3e>
   1a4d4:	08 95       	ret
   1a4d6:	0a 26       	eor	r0, r26
   1a4d8:	09 f4       	brne	.+2      	; 0x1a4dc <__fp_cmp+0x3e>
   1a4da:	a1 40       	sbci	r26, 0x01	; 1
   1a4dc:	a6 95       	lsr	r26
   1a4de:	8f ef       	ldi	r24, 0xFF	; 255
   1a4e0:	81 1d       	adc	r24, r1
   1a4e2:	81 1d       	adc	r24, r1
   1a4e4:	08 95       	ret

0001a4e6 <__fp_inf>:
__fp_inf():
   1a4e6:	97 f9       	bld	r25, 7
   1a4e8:	9f 67       	ori	r25, 0x7F	; 127
   1a4ea:	80 e8       	ldi	r24, 0x80	; 128
   1a4ec:	70 e0       	ldi	r23, 0x00	; 0
   1a4ee:	60 e0       	ldi	r22, 0x00	; 0
   1a4f0:	08 95       	ret

0001a4f2 <__fp_nan>:
__fp_nan():
   1a4f2:	9f ef       	ldi	r25, 0xFF	; 255
   1a4f4:	80 ec       	ldi	r24, 0xC0	; 192
   1a4f6:	08 95       	ret

0001a4f8 <__fp_pscA>:
__fp_pscA():
   1a4f8:	00 24       	eor	r0, r0
   1a4fa:	0a 94       	dec	r0
   1a4fc:	16 16       	cp	r1, r22
   1a4fe:	17 06       	cpc	r1, r23
   1a500:	18 06       	cpc	r1, r24
   1a502:	09 06       	cpc	r0, r25
   1a504:	08 95       	ret

0001a506 <__fp_pscB>:
__fp_pscB():
   1a506:	00 24       	eor	r0, r0
   1a508:	0a 94       	dec	r0
   1a50a:	12 16       	cp	r1, r18
   1a50c:	13 06       	cpc	r1, r19
   1a50e:	14 06       	cpc	r1, r20
   1a510:	05 06       	cpc	r0, r21
   1a512:	08 95       	ret

0001a514 <__fp_round>:
__fp_round():
   1a514:	09 2e       	mov	r0, r25
   1a516:	03 94       	inc	r0
   1a518:	00 0c       	add	r0, r0
   1a51a:	11 f4       	brne	.+4      	; 0x1a520 <__fp_round+0xc>
   1a51c:	88 23       	and	r24, r24
   1a51e:	52 f0       	brmi	.+20     	; 0x1a534 <__fp_round+0x20>
   1a520:	bb 0f       	add	r27, r27
   1a522:	40 f4       	brcc	.+16     	; 0x1a534 <__fp_round+0x20>
   1a524:	bf 2b       	or	r27, r31
   1a526:	11 f4       	brne	.+4      	; 0x1a52c <__fp_round+0x18>
   1a528:	60 ff       	sbrs	r22, 0
   1a52a:	04 c0       	rjmp	.+8      	; 0x1a534 <__fp_round+0x20>
   1a52c:	6f 5f       	subi	r22, 0xFF	; 255
   1a52e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a530:	8f 4f       	sbci	r24, 0xFF	; 255
   1a532:	9f 4f       	sbci	r25, 0xFF	; 255
   1a534:	08 95       	ret

0001a536 <__fp_split3>:
__fp_split3():
   1a536:	57 fd       	sbrc	r21, 7
   1a538:	90 58       	subi	r25, 0x80	; 128
   1a53a:	44 0f       	add	r20, r20
   1a53c:	55 1f       	adc	r21, r21
   1a53e:	59 f0       	breq	.+22     	; 0x1a556 <__fp_splitA+0x10>
   1a540:	5f 3f       	cpi	r21, 0xFF	; 255
   1a542:	71 f0       	breq	.+28     	; 0x1a560 <__fp_splitA+0x1a>
   1a544:	47 95       	ror	r20

0001a546 <__fp_splitA>:
   1a546:	88 0f       	add	r24, r24
   1a548:	97 fb       	bst	r25, 7
   1a54a:	99 1f       	adc	r25, r25
   1a54c:	61 f0       	breq	.+24     	; 0x1a566 <__fp_splitA+0x20>
   1a54e:	9f 3f       	cpi	r25, 0xFF	; 255
   1a550:	79 f0       	breq	.+30     	; 0x1a570 <__fp_splitA+0x2a>
   1a552:	87 95       	ror	r24
   1a554:	08 95       	ret
   1a556:	12 16       	cp	r1, r18
   1a558:	13 06       	cpc	r1, r19
   1a55a:	14 06       	cpc	r1, r20
   1a55c:	55 1f       	adc	r21, r21
   1a55e:	f2 cf       	rjmp	.-28     	; 0x1a544 <__fp_split3+0xe>
   1a560:	46 95       	lsr	r20
   1a562:	f1 df       	rcall	.-30     	; 0x1a546 <__fp_splitA>
   1a564:	08 c0       	rjmp	.+16     	; 0x1a576 <__fp_splitA+0x30>
   1a566:	16 16       	cp	r1, r22
   1a568:	17 06       	cpc	r1, r23
   1a56a:	18 06       	cpc	r1, r24
   1a56c:	99 1f       	adc	r25, r25
   1a56e:	f1 cf       	rjmp	.-30     	; 0x1a552 <__fp_splitA+0xc>
   1a570:	86 95       	lsr	r24
   1a572:	71 05       	cpc	r23, r1
   1a574:	61 05       	cpc	r22, r1
   1a576:	08 94       	sec
   1a578:	08 95       	ret

0001a57a <__fp_zero>:
__fp_zero():
   1a57a:	e8 94       	clt

0001a57c <__fp_szero>:
   1a57c:	bb 27       	eor	r27, r27
   1a57e:	66 27       	eor	r22, r22
   1a580:	77 27       	eor	r23, r23
   1a582:	cb 01       	movw	r24, r22
   1a584:	97 f9       	bld	r25, 7
   1a586:	08 95       	ret

0001a588 <__gesf2>:
__gesf2():
   1a588:	0e 94 4f d2 	call	0x1a49e	; 0x1a49e <__fp_cmp>
   1a58c:	08 f4       	brcc	.+2      	; 0x1a590 <__gesf2+0x8>
   1a58e:	8f ef       	ldi	r24, 0xFF	; 255
   1a590:	08 95       	ret

0001a592 <__mulsf3>:
__mulsf3():
   1a592:	0e 94 dc d2 	call	0x1a5b8	; 0x1a5b8 <__mulsf3x>
   1a596:	0c 94 8a d2 	jmp	0x1a514	; 0x1a514 <__fp_round>
   1a59a:	0e 94 7c d2 	call	0x1a4f8	; 0x1a4f8 <__fp_pscA>
   1a59e:	38 f0       	brcs	.+14     	; 0x1a5ae <__mulsf3+0x1c>
   1a5a0:	0e 94 83 d2 	call	0x1a506	; 0x1a506 <__fp_pscB>
   1a5a4:	20 f0       	brcs	.+8      	; 0x1a5ae <__mulsf3+0x1c>
   1a5a6:	95 23       	and	r25, r21
   1a5a8:	11 f0       	breq	.+4      	; 0x1a5ae <__mulsf3+0x1c>
   1a5aa:	0c 94 73 d2 	jmp	0x1a4e6	; 0x1a4e6 <__fp_inf>
   1a5ae:	0c 94 79 d2 	jmp	0x1a4f2	; 0x1a4f2 <__fp_nan>
   1a5b2:	11 24       	eor	r1, r1
   1a5b4:	0c 94 be d2 	jmp	0x1a57c	; 0x1a57c <__fp_szero>

0001a5b8 <__mulsf3x>:
__mulsf3x():
   1a5b8:	0e 94 9b d2 	call	0x1a536	; 0x1a536 <__fp_split3>
   1a5bc:	70 f3       	brcs	.-36     	; 0x1a59a <__mulsf3+0x8>

0001a5be <__mulsf3_pse>:
   1a5be:	95 9f       	mul	r25, r21
   1a5c0:	c1 f3       	breq	.-16     	; 0x1a5b2 <__mulsf3+0x20>
   1a5c2:	95 0f       	add	r25, r21
   1a5c4:	50 e0       	ldi	r21, 0x00	; 0
   1a5c6:	55 1f       	adc	r21, r21
   1a5c8:	62 9f       	mul	r22, r18
   1a5ca:	f0 01       	movw	r30, r0
   1a5cc:	72 9f       	mul	r23, r18
   1a5ce:	bb 27       	eor	r27, r27
   1a5d0:	f0 0d       	add	r31, r0
   1a5d2:	b1 1d       	adc	r27, r1
   1a5d4:	63 9f       	mul	r22, r19
   1a5d6:	aa 27       	eor	r26, r26
   1a5d8:	f0 0d       	add	r31, r0
   1a5da:	b1 1d       	adc	r27, r1
   1a5dc:	aa 1f       	adc	r26, r26
   1a5de:	64 9f       	mul	r22, r20
   1a5e0:	66 27       	eor	r22, r22
   1a5e2:	b0 0d       	add	r27, r0
   1a5e4:	a1 1d       	adc	r26, r1
   1a5e6:	66 1f       	adc	r22, r22
   1a5e8:	82 9f       	mul	r24, r18
   1a5ea:	22 27       	eor	r18, r18
   1a5ec:	b0 0d       	add	r27, r0
   1a5ee:	a1 1d       	adc	r26, r1
   1a5f0:	62 1f       	adc	r22, r18
   1a5f2:	73 9f       	mul	r23, r19
   1a5f4:	b0 0d       	add	r27, r0
   1a5f6:	a1 1d       	adc	r26, r1
   1a5f8:	62 1f       	adc	r22, r18
   1a5fa:	83 9f       	mul	r24, r19
   1a5fc:	a0 0d       	add	r26, r0
   1a5fe:	61 1d       	adc	r22, r1
   1a600:	22 1f       	adc	r18, r18
   1a602:	74 9f       	mul	r23, r20
   1a604:	33 27       	eor	r19, r19
   1a606:	a0 0d       	add	r26, r0
   1a608:	61 1d       	adc	r22, r1
   1a60a:	23 1f       	adc	r18, r19
   1a60c:	84 9f       	mul	r24, r20
   1a60e:	60 0d       	add	r22, r0
   1a610:	21 1d       	adc	r18, r1
   1a612:	82 2f       	mov	r24, r18
   1a614:	76 2f       	mov	r23, r22
   1a616:	6a 2f       	mov	r22, r26
   1a618:	11 24       	eor	r1, r1
   1a61a:	9f 57       	subi	r25, 0x7F	; 127
   1a61c:	50 40       	sbci	r21, 0x00	; 0
   1a61e:	9a f0       	brmi	.+38     	; 0x1a646 <__mulsf3_pse+0x88>
   1a620:	f1 f0       	breq	.+60     	; 0x1a65e <__mulsf3_pse+0xa0>
   1a622:	88 23       	and	r24, r24
   1a624:	4a f0       	brmi	.+18     	; 0x1a638 <__mulsf3_pse+0x7a>
   1a626:	ee 0f       	add	r30, r30
   1a628:	ff 1f       	adc	r31, r31
   1a62a:	bb 1f       	adc	r27, r27
   1a62c:	66 1f       	adc	r22, r22
   1a62e:	77 1f       	adc	r23, r23
   1a630:	88 1f       	adc	r24, r24
   1a632:	91 50       	subi	r25, 0x01	; 1
   1a634:	50 40       	sbci	r21, 0x00	; 0
   1a636:	a9 f7       	brne	.-22     	; 0x1a622 <__mulsf3_pse+0x64>
   1a638:	9e 3f       	cpi	r25, 0xFE	; 254
   1a63a:	51 05       	cpc	r21, r1
   1a63c:	80 f0       	brcs	.+32     	; 0x1a65e <__mulsf3_pse+0xa0>
   1a63e:	0c 94 73 d2 	jmp	0x1a4e6	; 0x1a4e6 <__fp_inf>
   1a642:	0c 94 be d2 	jmp	0x1a57c	; 0x1a57c <__fp_szero>
   1a646:	5f 3f       	cpi	r21, 0xFF	; 255
   1a648:	e4 f3       	brlt	.-8      	; 0x1a642 <__mulsf3_pse+0x84>
   1a64a:	98 3e       	cpi	r25, 0xE8	; 232
   1a64c:	d4 f3       	brlt	.-12     	; 0x1a642 <__mulsf3_pse+0x84>
   1a64e:	86 95       	lsr	r24
   1a650:	77 95       	ror	r23
   1a652:	67 95       	ror	r22
   1a654:	b7 95       	ror	r27
   1a656:	f7 95       	ror	r31
   1a658:	e7 95       	ror	r30
   1a65a:	9f 5f       	subi	r25, 0xFF	; 255
   1a65c:	c1 f7       	brne	.-16     	; 0x1a64e <__mulsf3_pse+0x90>
   1a65e:	fe 2b       	or	r31, r30
   1a660:	88 0f       	add	r24, r24
   1a662:	91 1d       	adc	r25, r1
   1a664:	96 95       	lsr	r25
   1a666:	87 95       	ror	r24
   1a668:	97 f9       	bld	r25, 7
   1a66a:	08 95       	ret

0001a66c <__mulsi3>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   1a66c:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   1a66e:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   1a670:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   1a672:	0e 94 d2 d3 	call	0x1a7a4	; 0x1a7a4 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   1a676:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   1a678:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   1a67a:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   1a67c:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   1a67e:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   1a680:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   1a682:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   1a684:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   1a686:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   1a688:	11 24       	eor	r1, r1
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   1a68a:	08 95       	ret

0001a68c <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   1a68c:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   1a68e:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   1a690:	04 c0       	rjmp	.+8      	; 0x1a69a <__udivmodqi4_ep>

0001a692 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   1a692:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   1a694:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   1a696:	08 f0       	brcs	.+2      	; 0x1a69a <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   1a698:	96 1b       	sub	r25, r22

0001a69a <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   1a69a:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   1a69c:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   1a69e:	c9 f7       	brne	.-14     	; 0x1a692 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   1a6a0:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   1a6a2:	08 95       	ret

0001a6a4 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   1a6a4:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   1a6a6:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   1a6a8:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   1a6aa:	07 c0       	rjmp	.+14     	; 0x1a6ba <__udivmodhi4_ep>

0001a6ac <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   1a6ac:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   1a6ae:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   1a6b0:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   1a6b2:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   1a6b4:	10 f0       	brcs	.+4      	; 0x1a6ba <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   1a6b6:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   1a6b8:	b7 0b       	sbc	r27, r23

0001a6ba <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   1a6ba:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   1a6bc:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   1a6be:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   1a6c0:	a9 f7       	brne	.-22     	; 0x1a6ac <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   1a6c2:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   1a6c4:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   1a6c6:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   1a6c8:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   1a6ca:	08 95       	ret

0001a6cc <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   1a6cc:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   1a6ce:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   1a6d0:	16 f4       	brtc	.+4      	; 0x1a6d6 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   1a6d2:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   1a6d4:	07 d0       	rcall	.+14     	; 0x1a6e4 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   1a6d6:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   1a6d8:	09 d0       	rcall	.+18     	; 0x1a6ec <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   1a6da:	0e 94 52 d3 	call	0x1a6a4	; 0x1a6a4 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   1a6de:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   1a6e0:	05 d0       	rcall	.+10     	; 0x1a6ec <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   1a6e2:	3e f4       	brtc	.+14     	; 0x1a6f2 <__divmodhi4_exit>

0001a6e4 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   1a6e4:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   1a6e6:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   1a6e8:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   1a6ea:	08 95       	ret

0001a6ec <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   1a6ec:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   1a6ee:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   1a6f0:	7f 4f       	sbci	r23, 0xFF	; 255

0001a6f2 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   1a6f2:	08 95       	ret

0001a6f4 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   1a6f4:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   1a6f6:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   1a6f8:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   1a6fa:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   1a6fc:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   1a6fe:	0d c0       	rjmp	.+26     	; 0x1a71a <__udivmodsi4_ep>

0001a700 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   1a700:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   1a702:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   1a704:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   1a706:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   1a708:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   1a70a:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   1a70c:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   1a70e:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   1a710:	20 f0       	brcs	.+8      	; 0x1a71a <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   1a712:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   1a714:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   1a716:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   1a718:	f5 0b       	sbc	r31, r21

0001a71a <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   1a71a:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   1a71c:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   1a71e:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   1a720:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   1a722:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   1a724:	69 f7       	brne	.-38     	; 0x1a700 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   1a726:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   1a728:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   1a72a:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   1a72c:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   1a72e:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   1a730:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   1a732:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   1a734:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   1a736:	08 95       	ret

0001a738 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   1a738:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   1a73a:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   1a73c:	1e f4       	brtc	.+6      	; 0x1a744 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   1a73e:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   1a740:	0e 94 b3 d3 	call	0x1a766	; 0x1a766 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   1a744:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   1a746:	07 d0       	rcall	.+14     	; 0x1a756 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   1a748:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   1a74c:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   1a74e:	03 d0       	rcall	.+6      	; 0x1a756 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   1a750:	4e f4       	brtc	.+18     	; 0x1a764 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   1a752:	0c 94 b3 d3 	jmp	0x1a766	; 0x1a766 <__negsi2>

0001a756 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   1a756:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   1a758:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   1a75a:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   1a75c:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   1a75e:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   1a760:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   1a762:	5f 4f       	sbci	r21, 0xFF	; 255

0001a764 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   1a764:	08 95       	ret

0001a766 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   1a766:	90 95       	com	r25
   1a768:	80 95       	com	r24
   1a76a:	70 95       	com	r23
   1a76c:	61 95       	neg	r22
   1a76e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a770:	8f 4f       	sbci	r24, 0xFF	; 255
   1a772:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   1a774:	08 95       	ret

0001a776 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   1a776:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   1a778:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   1a77a:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   1a77c:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   1a77e:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   1a780:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   1a782:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   1a784:	19 94       	eijmp

0001a786 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   1a786:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   1a788:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   1a78a:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   1a78c:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   1a78e:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   1a790:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   1a792:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   1a794:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   1a796:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   1a798:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   1a79a:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   1a79c:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   1a79e:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   1a7a0:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   1a7a2:	08 95       	ret

0001a7a4 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   1a7a4:	0e 94 c3 d3 	call	0x1a786	; 0x1a786 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   1a7a8:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   1a7aa:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   1a7ac:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   1a7ae:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   1a7b0:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   1a7b2:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   1a7b4:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   1a7b6:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   1a7b8:	08 95       	ret

0001a7ba <dtostrf>:
dtostrf():
   1a7ba:	ef 92       	push	r14
   1a7bc:	0f 93       	push	r16
   1a7be:	1f 93       	push	r17
   1a7c0:	cf 93       	push	r28
   1a7c2:	df 93       	push	r29
   1a7c4:	e8 01       	movw	r28, r16
   1a7c6:	34 e0       	ldi	r19, 0x04	; 4
   1a7c8:	47 fd       	sbrc	r20, 7
   1a7ca:	34 e1       	ldi	r19, 0x14	; 20
   1a7cc:	04 2e       	mov	r0, r20
   1a7ce:	00 0c       	add	r0, r0
   1a7d0:	55 0b       	sbc	r21, r21
   1a7d2:	57 ff       	sbrs	r21, 7
   1a7d4:	03 c0       	rjmp	.+6      	; 0x1a7dc <dtostrf+0x22>
   1a7d6:	51 95       	neg	r21
   1a7d8:	41 95       	neg	r20
   1a7da:	51 09       	sbc	r21, r1
   1a7dc:	e3 2e       	mov	r14, r19
   1a7de:	02 2f       	mov	r16, r18
   1a7e0:	24 2f       	mov	r18, r20
   1a7e2:	ae 01       	movw	r20, r28
   1a7e4:	0e 94 f4 da 	call	0x1b5e8	; 0x1b5e8 <dtoa_prf>
   1a7e8:	ce 01       	movw	r24, r28
   1a7ea:	df 91       	pop	r29
   1a7ec:	cf 91       	pop	r28
   1a7ee:	1f 91       	pop	r17
   1a7f0:	0f 91       	pop	r16
   1a7f2:	ef 90       	pop	r14
   1a7f4:	08 95       	ret

0001a7f6 <malloc>:
malloc():
   1a7f6:	0f 93       	push	r16
   1a7f8:	1f 93       	push	r17
   1a7fa:	cf 93       	push	r28
   1a7fc:	df 93       	push	r29
   1a7fe:	82 30       	cpi	r24, 0x02	; 2
   1a800:	91 05       	cpc	r25, r1
   1a802:	10 f4       	brcc	.+4      	; 0x1a808 <malloc+0x12>
   1a804:	82 e0       	ldi	r24, 0x02	; 2
   1a806:	90 e0       	ldi	r25, 0x00	; 0
   1a808:	e0 91 92 12 	lds	r30, 0x1292	; 0x801292 <__flp>
   1a80c:	f0 91 93 12 	lds	r31, 0x1293	; 0x801293 <__flp+0x1>
   1a810:	30 e0       	ldi	r19, 0x00	; 0
   1a812:	20 e0       	ldi	r18, 0x00	; 0
   1a814:	b0 e0       	ldi	r27, 0x00	; 0
   1a816:	a0 e0       	ldi	r26, 0x00	; 0
   1a818:	30 97       	sbiw	r30, 0x00	; 0
   1a81a:	99 f4       	brne	.+38     	; 0x1a842 <malloc+0x4c>
   1a81c:	21 15       	cp	r18, r1
   1a81e:	31 05       	cpc	r19, r1
   1a820:	09 f4       	brne	.+2      	; 0x1a824 <malloc+0x2e>
   1a822:	4a c0       	rjmp	.+148    	; 0x1a8b8 <malloc+0xc2>
   1a824:	28 1b       	sub	r18, r24
   1a826:	39 0b       	sbc	r19, r25
   1a828:	24 30       	cpi	r18, 0x04	; 4
   1a82a:	31 05       	cpc	r19, r1
   1a82c:	d8 f5       	brcc	.+118    	; 0x1a8a4 <malloc+0xae>
   1a82e:	8a 81       	ldd	r24, Y+2	; 0x02
   1a830:	9b 81       	ldd	r25, Y+3	; 0x03
   1a832:	61 15       	cp	r22, r1
   1a834:	71 05       	cpc	r23, r1
   1a836:	89 f1       	breq	.+98     	; 0x1a89a <malloc+0xa4>
   1a838:	fb 01       	movw	r30, r22
   1a83a:	93 83       	std	Z+3, r25	; 0x03
   1a83c:	82 83       	std	Z+2, r24	; 0x02
   1a83e:	fe 01       	movw	r30, r28
   1a840:	11 c0       	rjmp	.+34     	; 0x1a864 <malloc+0x6e>
   1a842:	40 81       	ld	r20, Z
   1a844:	51 81       	ldd	r21, Z+1	; 0x01
   1a846:	02 81       	ldd	r16, Z+2	; 0x02
   1a848:	13 81       	ldd	r17, Z+3	; 0x03
   1a84a:	48 17       	cp	r20, r24
   1a84c:	59 07       	cpc	r21, r25
   1a84e:	e0 f0       	brcs	.+56     	; 0x1a888 <malloc+0x92>
   1a850:	48 17       	cp	r20, r24
   1a852:	59 07       	cpc	r21, r25
   1a854:	99 f4       	brne	.+38     	; 0x1a87c <malloc+0x86>
   1a856:	10 97       	sbiw	r26, 0x00	; 0
   1a858:	61 f0       	breq	.+24     	; 0x1a872 <malloc+0x7c>
   1a85a:	12 96       	adiw	r26, 0x02	; 2
   1a85c:	0c 93       	st	X, r16
   1a85e:	12 97       	sbiw	r26, 0x02	; 2
   1a860:	13 96       	adiw	r26, 0x03	; 3
   1a862:	1c 93       	st	X, r17
   1a864:	32 96       	adiw	r30, 0x02	; 2
   1a866:	cf 01       	movw	r24, r30
   1a868:	df 91       	pop	r29
   1a86a:	cf 91       	pop	r28
   1a86c:	1f 91       	pop	r17
   1a86e:	0f 91       	pop	r16
   1a870:	08 95       	ret
   1a872:	00 93 92 12 	sts	0x1292, r16	; 0x801292 <__flp>
   1a876:	10 93 93 12 	sts	0x1293, r17	; 0x801293 <__flp+0x1>
   1a87a:	f4 cf       	rjmp	.-24     	; 0x1a864 <malloc+0x6e>
   1a87c:	21 15       	cp	r18, r1
   1a87e:	31 05       	cpc	r19, r1
   1a880:	51 f0       	breq	.+20     	; 0x1a896 <malloc+0xa0>
   1a882:	42 17       	cp	r20, r18
   1a884:	53 07       	cpc	r21, r19
   1a886:	38 f0       	brcs	.+14     	; 0x1a896 <malloc+0xa0>
   1a888:	a9 01       	movw	r20, r18
   1a88a:	db 01       	movw	r26, r22
   1a88c:	9a 01       	movw	r18, r20
   1a88e:	bd 01       	movw	r22, r26
   1a890:	df 01       	movw	r26, r30
   1a892:	f8 01       	movw	r30, r16
   1a894:	c1 cf       	rjmp	.-126    	; 0x1a818 <malloc+0x22>
   1a896:	ef 01       	movw	r28, r30
   1a898:	f9 cf       	rjmp	.-14     	; 0x1a88c <malloc+0x96>
   1a89a:	90 93 93 12 	sts	0x1293, r25	; 0x801293 <__flp+0x1>
   1a89e:	80 93 92 12 	sts	0x1292, r24	; 0x801292 <__flp>
   1a8a2:	cd cf       	rjmp	.-102    	; 0x1a83e <malloc+0x48>
   1a8a4:	fe 01       	movw	r30, r28
   1a8a6:	e2 0f       	add	r30, r18
   1a8a8:	f3 1f       	adc	r31, r19
   1a8aa:	81 93       	st	Z+, r24
   1a8ac:	91 93       	st	Z+, r25
   1a8ae:	22 50       	subi	r18, 0x02	; 2
   1a8b0:	31 09       	sbc	r19, r1
   1a8b2:	39 83       	std	Y+1, r19	; 0x01
   1a8b4:	28 83       	st	Y, r18
   1a8b6:	d7 cf       	rjmp	.-82     	; 0x1a866 <malloc+0x70>
   1a8b8:	20 91 90 12 	lds	r18, 0x1290	; 0x801290 <__brkval>
   1a8bc:	30 91 91 12 	lds	r19, 0x1291	; 0x801291 <__brkval+0x1>
   1a8c0:	23 2b       	or	r18, r19
   1a8c2:	41 f4       	brne	.+16     	; 0x1a8d4 <malloc+0xde>
   1a8c4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
   1a8c8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
   1a8cc:	30 93 91 12 	sts	0x1291, r19	; 0x801291 <__brkval+0x1>
   1a8d0:	20 93 90 12 	sts	0x1290, r18	; 0x801290 <__brkval>
   1a8d4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   1a8d8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   1a8dc:	21 15       	cp	r18, r1
   1a8de:	31 05       	cpc	r19, r1
   1a8e0:	41 f4       	brne	.+16     	; 0x1a8f2 <malloc+0xfc>
   1a8e2:	2d b7       	in	r18, 0x3d	; 61
   1a8e4:	3e b7       	in	r19, 0x3e	; 62
   1a8e6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   1a8ea:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   1a8ee:	24 1b       	sub	r18, r20
   1a8f0:	35 0b       	sbc	r19, r21
   1a8f2:	e0 91 90 12 	lds	r30, 0x1290	; 0x801290 <__brkval>
   1a8f6:	f0 91 91 12 	lds	r31, 0x1291	; 0x801291 <__brkval+0x1>
   1a8fa:	e2 17       	cp	r30, r18
   1a8fc:	f3 07       	cpc	r31, r19
   1a8fe:	a0 f4       	brcc	.+40     	; 0x1a928 <malloc+0x132>
   1a900:	2e 1b       	sub	r18, r30
   1a902:	3f 0b       	sbc	r19, r31
   1a904:	28 17       	cp	r18, r24
   1a906:	39 07       	cpc	r19, r25
   1a908:	78 f0       	brcs	.+30     	; 0x1a928 <malloc+0x132>
   1a90a:	ac 01       	movw	r20, r24
   1a90c:	4e 5f       	subi	r20, 0xFE	; 254
   1a90e:	5f 4f       	sbci	r21, 0xFF	; 255
   1a910:	24 17       	cp	r18, r20
   1a912:	35 07       	cpc	r19, r21
   1a914:	48 f0       	brcs	.+18     	; 0x1a928 <malloc+0x132>
   1a916:	4e 0f       	add	r20, r30
   1a918:	5f 1f       	adc	r21, r31
   1a91a:	50 93 91 12 	sts	0x1291, r21	; 0x801291 <__brkval+0x1>
   1a91e:	40 93 90 12 	sts	0x1290, r20	; 0x801290 <__brkval>
   1a922:	81 93       	st	Z+, r24
   1a924:	91 93       	st	Z+, r25
   1a926:	9f cf       	rjmp	.-194    	; 0x1a866 <malloc+0x70>
   1a928:	f0 e0       	ldi	r31, 0x00	; 0
   1a92a:	e0 e0       	ldi	r30, 0x00	; 0
   1a92c:	9c cf       	rjmp	.-200    	; 0x1a866 <malloc+0x70>

0001a92e <free>:
free():
   1a92e:	cf 93       	push	r28
   1a930:	df 93       	push	r29
   1a932:	00 97       	sbiw	r24, 0x00	; 0
   1a934:	e9 f0       	breq	.+58     	; 0x1a970 <free+0x42>
   1a936:	fc 01       	movw	r30, r24
   1a938:	32 97       	sbiw	r30, 0x02	; 2
   1a93a:	13 82       	std	Z+3, r1	; 0x03
   1a93c:	12 82       	std	Z+2, r1	; 0x02
   1a93e:	a0 91 92 12 	lds	r26, 0x1292	; 0x801292 <__flp>
   1a942:	b0 91 93 12 	lds	r27, 0x1293	; 0x801293 <__flp+0x1>
   1a946:	ed 01       	movw	r28, r26
   1a948:	30 e0       	ldi	r19, 0x00	; 0
   1a94a:	20 e0       	ldi	r18, 0x00	; 0
   1a94c:	10 97       	sbiw	r26, 0x00	; 0
   1a94e:	a1 f4       	brne	.+40     	; 0x1a978 <free+0x4a>
   1a950:	20 81       	ld	r18, Z
   1a952:	31 81       	ldd	r19, Z+1	; 0x01
   1a954:	82 0f       	add	r24, r18
   1a956:	93 1f       	adc	r25, r19
   1a958:	20 91 90 12 	lds	r18, 0x1290	; 0x801290 <__brkval>
   1a95c:	30 91 91 12 	lds	r19, 0x1291	; 0x801291 <__brkval+0x1>
   1a960:	28 17       	cp	r18, r24
   1a962:	39 07       	cpc	r19, r25
   1a964:	09 f0       	breq	.+2      	; 0x1a968 <free+0x3a>
   1a966:	61 c0       	rjmp	.+194    	; 0x1aa2a <free+0xfc>
   1a968:	f0 93 91 12 	sts	0x1291, r31	; 0x801291 <__brkval+0x1>
   1a96c:	e0 93 90 12 	sts	0x1290, r30	; 0x801290 <__brkval>
   1a970:	df 91       	pop	r29
   1a972:	cf 91       	pop	r28
   1a974:	08 95       	ret
   1a976:	ea 01       	movw	r28, r20
   1a978:	ce 17       	cp	r28, r30
   1a97a:	df 07       	cpc	r29, r31
   1a97c:	e8 f5       	brcc	.+122    	; 0x1a9f8 <free+0xca>
   1a97e:	4a 81       	ldd	r20, Y+2	; 0x02
   1a980:	5b 81       	ldd	r21, Y+3	; 0x03
   1a982:	9e 01       	movw	r18, r28
   1a984:	41 15       	cp	r20, r1
   1a986:	51 05       	cpc	r21, r1
   1a988:	b1 f7       	brne	.-20     	; 0x1a976 <free+0x48>
   1a98a:	e9 01       	movw	r28, r18
   1a98c:	fb 83       	std	Y+3, r31	; 0x03
   1a98e:	ea 83       	std	Y+2, r30	; 0x02
   1a990:	49 91       	ld	r20, Y+
   1a992:	59 91       	ld	r21, Y+
   1a994:	c4 0f       	add	r28, r20
   1a996:	d5 1f       	adc	r29, r21
   1a998:	ec 17       	cp	r30, r28
   1a99a:	fd 07       	cpc	r31, r29
   1a99c:	61 f4       	brne	.+24     	; 0x1a9b6 <free+0x88>
   1a99e:	80 81       	ld	r24, Z
   1a9a0:	91 81       	ldd	r25, Z+1	; 0x01
   1a9a2:	02 96       	adiw	r24, 0x02	; 2
   1a9a4:	84 0f       	add	r24, r20
   1a9a6:	95 1f       	adc	r25, r21
   1a9a8:	e9 01       	movw	r28, r18
   1a9aa:	99 83       	std	Y+1, r25	; 0x01
   1a9ac:	88 83       	st	Y, r24
   1a9ae:	82 81       	ldd	r24, Z+2	; 0x02
   1a9b0:	93 81       	ldd	r25, Z+3	; 0x03
   1a9b2:	9b 83       	std	Y+3, r25	; 0x03
   1a9b4:	8a 83       	std	Y+2, r24	; 0x02
   1a9b6:	f0 e0       	ldi	r31, 0x00	; 0
   1a9b8:	e0 e0       	ldi	r30, 0x00	; 0
   1a9ba:	12 96       	adiw	r26, 0x02	; 2
   1a9bc:	8d 91       	ld	r24, X+
   1a9be:	9c 91       	ld	r25, X
   1a9c0:	13 97       	sbiw	r26, 0x03	; 3
   1a9c2:	00 97       	sbiw	r24, 0x00	; 0
   1a9c4:	b9 f5       	brne	.+110    	; 0x1aa34 <free+0x106>
   1a9c6:	2d 91       	ld	r18, X+
   1a9c8:	3c 91       	ld	r19, X
   1a9ca:	11 97       	sbiw	r26, 0x01	; 1
   1a9cc:	cd 01       	movw	r24, r26
   1a9ce:	02 96       	adiw	r24, 0x02	; 2
   1a9d0:	82 0f       	add	r24, r18
   1a9d2:	93 1f       	adc	r25, r19
   1a9d4:	20 91 90 12 	lds	r18, 0x1290	; 0x801290 <__brkval>
   1a9d8:	30 91 91 12 	lds	r19, 0x1291	; 0x801291 <__brkval+0x1>
   1a9dc:	28 17       	cp	r18, r24
   1a9de:	39 07       	cpc	r19, r25
   1a9e0:	39 f6       	brne	.-114    	; 0x1a970 <free+0x42>
   1a9e2:	30 97       	sbiw	r30, 0x00	; 0
   1a9e4:	51 f5       	brne	.+84     	; 0x1aa3a <free+0x10c>
   1a9e6:	10 92 93 12 	sts	0x1293, r1	; 0x801293 <__flp+0x1>
   1a9ea:	10 92 92 12 	sts	0x1292, r1	; 0x801292 <__flp>
   1a9ee:	b0 93 91 12 	sts	0x1291, r27	; 0x801291 <__brkval+0x1>
   1a9f2:	a0 93 90 12 	sts	0x1290, r26	; 0x801290 <__brkval>
   1a9f6:	bc cf       	rjmp	.-136    	; 0x1a970 <free+0x42>
   1a9f8:	d3 83       	std	Z+3, r29	; 0x03
   1a9fa:	c2 83       	std	Z+2, r28	; 0x02
   1a9fc:	40 81       	ld	r20, Z
   1a9fe:	51 81       	ldd	r21, Z+1	; 0x01
   1aa00:	84 0f       	add	r24, r20
   1aa02:	95 1f       	adc	r25, r21
   1aa04:	c8 17       	cp	r28, r24
   1aa06:	d9 07       	cpc	r29, r25
   1aa08:	61 f4       	brne	.+24     	; 0x1aa22 <free+0xf4>
   1aa0a:	4e 5f       	subi	r20, 0xFE	; 254
   1aa0c:	5f 4f       	sbci	r21, 0xFF	; 255
   1aa0e:	88 81       	ld	r24, Y
   1aa10:	99 81       	ldd	r25, Y+1	; 0x01
   1aa12:	48 0f       	add	r20, r24
   1aa14:	59 1f       	adc	r21, r25
   1aa16:	51 83       	std	Z+1, r21	; 0x01
   1aa18:	40 83       	st	Z, r20
   1aa1a:	8a 81       	ldd	r24, Y+2	; 0x02
   1aa1c:	9b 81       	ldd	r25, Y+3	; 0x03
   1aa1e:	93 83       	std	Z+3, r25	; 0x03
   1aa20:	82 83       	std	Z+2, r24	; 0x02
   1aa22:	21 15       	cp	r18, r1
   1aa24:	31 05       	cpc	r19, r1
   1aa26:	09 f0       	breq	.+2      	; 0x1aa2a <free+0xfc>
   1aa28:	b0 cf       	rjmp	.-160    	; 0x1a98a <free+0x5c>
   1aa2a:	f0 93 93 12 	sts	0x1293, r31	; 0x801293 <__flp+0x1>
   1aa2e:	e0 93 92 12 	sts	0x1292, r30	; 0x801292 <__flp>
   1aa32:	9e cf       	rjmp	.-196    	; 0x1a970 <free+0x42>
   1aa34:	fd 01       	movw	r30, r26
   1aa36:	dc 01       	movw	r26, r24
   1aa38:	c0 cf       	rjmp	.-128    	; 0x1a9ba <free+0x8c>
   1aa3a:	13 82       	std	Z+3, r1	; 0x03
   1aa3c:	12 82       	std	Z+2, r1	; 0x02
   1aa3e:	d7 cf       	rjmp	.-82     	; 0x1a9ee <free+0xc0>

0001aa40 <realloc>:
realloc():
   1aa40:	4f 92       	push	r4
   1aa42:	5f 92       	push	r5
   1aa44:	6f 92       	push	r6
   1aa46:	7f 92       	push	r7
   1aa48:	8f 92       	push	r8
   1aa4a:	9f 92       	push	r9
   1aa4c:	af 92       	push	r10
   1aa4e:	bf 92       	push	r11
   1aa50:	cf 92       	push	r12
   1aa52:	df 92       	push	r13
   1aa54:	ef 92       	push	r14
   1aa56:	ff 92       	push	r15
   1aa58:	0f 93       	push	r16
   1aa5a:	1f 93       	push	r17
   1aa5c:	cf 93       	push	r28
   1aa5e:	df 93       	push	r29
   1aa60:	8c 01       	movw	r16, r24
   1aa62:	00 97       	sbiw	r24, 0x00	; 0
   1aa64:	99 f4       	brne	.+38     	; 0x1aa8c <realloc+0x4c>
   1aa66:	cb 01       	movw	r24, r22
   1aa68:	df 91       	pop	r29
   1aa6a:	cf 91       	pop	r28
   1aa6c:	1f 91       	pop	r17
   1aa6e:	0f 91       	pop	r16
   1aa70:	ff 90       	pop	r15
   1aa72:	ef 90       	pop	r14
   1aa74:	df 90       	pop	r13
   1aa76:	cf 90       	pop	r12
   1aa78:	bf 90       	pop	r11
   1aa7a:	af 90       	pop	r10
   1aa7c:	9f 90       	pop	r9
   1aa7e:	8f 90       	pop	r8
   1aa80:	7f 90       	pop	r7
   1aa82:	6f 90       	pop	r6
   1aa84:	5f 90       	pop	r5
   1aa86:	4f 90       	pop	r4
   1aa88:	0c 94 fb d3 	jmp	0x1a7f6	; 0x1a7f6 <malloc>
   1aa8c:	fc 01       	movw	r30, r24
   1aa8e:	e6 0f       	add	r30, r22
   1aa90:	f7 1f       	adc	r31, r23
   1aa92:	9c 01       	movw	r18, r24
   1aa94:	22 50       	subi	r18, 0x02	; 2
   1aa96:	31 09       	sbc	r19, r1
   1aa98:	e2 17       	cp	r30, r18
   1aa9a:	f3 07       	cpc	r31, r19
   1aa9c:	08 f4       	brcc	.+2      	; 0x1aaa0 <realloc+0x60>
   1aa9e:	ae c0       	rjmp	.+348    	; 0x1abfc <realloc+0x1bc>
   1aaa0:	d9 01       	movw	r26, r18
   1aaa2:	cd 91       	ld	r28, X+
   1aaa4:	dc 91       	ld	r29, X
   1aaa6:	11 97       	sbiw	r26, 0x01	; 1
   1aaa8:	c6 17       	cp	r28, r22
   1aaaa:	d7 07       	cpc	r29, r23
   1aaac:	20 f1       	brcs	.+72     	; 0x1aaf6 <realloc+0xb6>
   1aaae:	c5 30       	cpi	r28, 0x05	; 5
   1aab0:	d1 05       	cpc	r29, r1
   1aab2:	78 f0       	brcs	.+30     	; 0x1aad2 <realloc+0x92>
   1aab4:	ce 01       	movw	r24, r28
   1aab6:	04 97       	sbiw	r24, 0x04	; 4
   1aab8:	86 17       	cp	r24, r22
   1aaba:	97 07       	cpc	r25, r23
   1aabc:	50 f0       	brcs	.+20     	; 0x1aad2 <realloc+0x92>
   1aabe:	c6 1b       	sub	r28, r22
   1aac0:	d7 0b       	sbc	r29, r23
   1aac2:	22 97       	sbiw	r28, 0x02	; 2
   1aac4:	c1 93       	st	Z+, r28
   1aac6:	d1 93       	st	Z+, r29
   1aac8:	6d 93       	st	X+, r22
   1aaca:	7c 93       	st	X, r23
   1aacc:	cf 01       	movw	r24, r30
   1aace:	0e 94 97 d4 	call	0x1a92e	; 0x1a92e <free>
   1aad2:	c8 01       	movw	r24, r16
   1aad4:	df 91       	pop	r29
   1aad6:	cf 91       	pop	r28
   1aad8:	1f 91       	pop	r17
   1aada:	0f 91       	pop	r16
   1aadc:	ff 90       	pop	r15
   1aade:	ef 90       	pop	r14
   1aae0:	df 90       	pop	r13
   1aae2:	cf 90       	pop	r12
   1aae4:	bf 90       	pop	r11
   1aae6:	af 90       	pop	r10
   1aae8:	9f 90       	pop	r9
   1aaea:	8f 90       	pop	r8
   1aaec:	7f 90       	pop	r7
   1aaee:	6f 90       	pop	r6
   1aaf0:	5f 90       	pop	r5
   1aaf2:	4f 90       	pop	r4
   1aaf4:	08 95       	ret
   1aaf6:	5b 01       	movw	r10, r22
   1aaf8:	ac 1a       	sub	r10, r28
   1aafa:	bd 0a       	sbc	r11, r29
   1aafc:	4c 01       	movw	r8, r24
   1aafe:	8c 0e       	add	r8, r28
   1ab00:	9d 1e       	adc	r9, r29
   1ab02:	a0 91 92 12 	lds	r26, 0x1292	; 0x801292 <__flp>
   1ab06:	b0 91 93 12 	lds	r27, 0x1293	; 0x801293 <__flp+0x1>
   1ab0a:	51 2c       	mov	r5, r1
   1ab0c:	41 2c       	mov	r4, r1
   1ab0e:	f1 2c       	mov	r15, r1
   1ab10:	e1 2c       	mov	r14, r1
   1ab12:	10 97       	sbiw	r26, 0x00	; 0
   1ab14:	31 f5       	brne	.+76     	; 0x1ab62 <realloc+0x122>
   1ab16:	80 91 90 12 	lds	r24, 0x1290	; 0x801290 <__brkval>
   1ab1a:	90 91 91 12 	lds	r25, 0x1291	; 0x801291 <__brkval+0x1>
   1ab1e:	88 15       	cp	r24, r8
   1ab20:	99 05       	cpc	r25, r9
   1ab22:	09 f0       	breq	.+2      	; 0x1ab26 <realloc+0xe6>
   1ab24:	5c c0       	rjmp	.+184    	; 0x1abde <realloc+0x19e>
   1ab26:	46 16       	cp	r4, r22
   1ab28:	57 06       	cpc	r5, r23
   1ab2a:	08 f0       	brcs	.+2      	; 0x1ab2e <realloc+0xee>
   1ab2c:	58 c0       	rjmp	.+176    	; 0x1abde <realloc+0x19e>
   1ab2e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   1ab32:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   1ab36:	00 97       	sbiw	r24, 0x00	; 0
   1ab38:	41 f4       	brne	.+16     	; 0x1ab4a <realloc+0x10a>
   1ab3a:	8d b7       	in	r24, 0x3d	; 61
   1ab3c:	9e b7       	in	r25, 0x3e	; 62
   1ab3e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   1ab42:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   1ab46:	84 1b       	sub	r24, r20
   1ab48:	95 0b       	sbc	r25, r21
   1ab4a:	e8 17       	cp	r30, r24
   1ab4c:	f9 07       	cpc	r31, r25
   1ab4e:	08 f0       	brcs	.+2      	; 0x1ab52 <realloc+0x112>
   1ab50:	55 c0       	rjmp	.+170    	; 0x1abfc <realloc+0x1bc>
   1ab52:	f0 93 91 12 	sts	0x1291, r31	; 0x801291 <__brkval+0x1>
   1ab56:	e0 93 90 12 	sts	0x1290, r30	; 0x801290 <__brkval>
   1ab5a:	f9 01       	movw	r30, r18
   1ab5c:	71 83       	std	Z+1, r23	; 0x01
   1ab5e:	60 83       	st	Z, r22
   1ab60:	b8 cf       	rjmp	.-144    	; 0x1aad2 <realloc+0x92>
   1ab62:	8d 91       	ld	r24, X+
   1ab64:	9c 91       	ld	r25, X
   1ab66:	11 97       	sbiw	r26, 0x01	; 1
   1ab68:	12 96       	adiw	r26, 0x02	; 2
   1ab6a:	6c 90       	ld	r6, X
   1ab6c:	12 97       	sbiw	r26, 0x02	; 2
   1ab6e:	13 96       	adiw	r26, 0x03	; 3
   1ab70:	7c 90       	ld	r7, X
   1ab72:	13 97       	sbiw	r26, 0x03	; 3
   1ab74:	a8 15       	cp	r26, r8
   1ab76:	b9 05       	cpc	r27, r9
   1ab78:	59 f5       	brne	.+86     	; 0x1abd0 <realloc+0x190>
   1ab7a:	6c 01       	movw	r12, r24
   1ab7c:	42 e0       	ldi	r20, 0x02	; 2
   1ab7e:	c4 0e       	add	r12, r20
   1ab80:	d1 1c       	adc	r13, r1
   1ab82:	ca 14       	cp	r12, r10
   1ab84:	db 04       	cpc	r13, r11
   1ab86:	20 f1       	brcs	.+72     	; 0x1abd0 <realloc+0x190>
   1ab88:	ac 01       	movw	r20, r24
   1ab8a:	4a 19       	sub	r20, r10
   1ab8c:	5b 09       	sbc	r21, r11
   1ab8e:	da 01       	movw	r26, r20
   1ab90:	12 96       	adiw	r26, 0x02	; 2
   1ab92:	15 97       	sbiw	r26, 0x05	; 5
   1ab94:	80 f0       	brcs	.+32     	; 0x1abb6 <realloc+0x176>
   1ab96:	62 82       	std	Z+2, r6	; 0x02
   1ab98:	73 82       	std	Z+3, r7	; 0x03
   1ab9a:	51 83       	std	Z+1, r21	; 0x01
   1ab9c:	40 83       	st	Z, r20
   1ab9e:	d9 01       	movw	r26, r18
   1aba0:	6d 93       	st	X+, r22
   1aba2:	7c 93       	st	X, r23
   1aba4:	e1 14       	cp	r14, r1
   1aba6:	f1 04       	cpc	r15, r1
   1aba8:	71 f0       	breq	.+28     	; 0x1abc6 <realloc+0x186>
   1abaa:	d7 01       	movw	r26, r14
   1abac:	13 96       	adiw	r26, 0x03	; 3
   1abae:	fc 93       	st	X, r31
   1abb0:	ee 93       	st	-X, r30
   1abb2:	12 97       	sbiw	r26, 0x02	; 2
   1abb4:	8e cf       	rjmp	.-228    	; 0x1aad2 <realloc+0x92>
   1abb6:	22 96       	adiw	r28, 0x02	; 2
   1abb8:	8c 0f       	add	r24, r28
   1abba:	9d 1f       	adc	r25, r29
   1abbc:	f9 01       	movw	r30, r18
   1abbe:	91 83       	std	Z+1, r25	; 0x01
   1abc0:	80 83       	st	Z, r24
   1abc2:	f3 01       	movw	r30, r6
   1abc4:	ef cf       	rjmp	.-34     	; 0x1aba4 <realloc+0x164>
   1abc6:	f0 93 93 12 	sts	0x1293, r31	; 0x801293 <__flp+0x1>
   1abca:	e0 93 92 12 	sts	0x1292, r30	; 0x801292 <__flp>
   1abce:	81 cf       	rjmp	.-254    	; 0x1aad2 <realloc+0x92>
   1abd0:	48 16       	cp	r4, r24
   1abd2:	59 06       	cpc	r5, r25
   1abd4:	08 f4       	brcc	.+2      	; 0x1abd8 <realloc+0x198>
   1abd6:	2c 01       	movw	r4, r24
   1abd8:	7d 01       	movw	r14, r26
   1abda:	d3 01       	movw	r26, r6
   1abdc:	9a cf       	rjmp	.-204    	; 0x1ab12 <realloc+0xd2>
   1abde:	cb 01       	movw	r24, r22
   1abe0:	0e 94 fb d3 	call	0x1a7f6	; 0x1a7f6 <malloc>
   1abe4:	7c 01       	movw	r14, r24
   1abe6:	00 97       	sbiw	r24, 0x00	; 0
   1abe8:	49 f0       	breq	.+18     	; 0x1abfc <realloc+0x1bc>
   1abea:	ae 01       	movw	r20, r28
   1abec:	b8 01       	movw	r22, r16
   1abee:	0e 94 4a d7 	call	0x1ae94	; 0x1ae94 <memcpy>
   1abf2:	c8 01       	movw	r24, r16
   1abf4:	0e 94 97 d4 	call	0x1a92e	; 0x1a92e <free>
   1abf8:	87 01       	movw	r16, r14
   1abfa:	6b cf       	rjmp	.-298    	; 0x1aad2 <realloc+0x92>
   1abfc:	10 e0       	ldi	r17, 0x00	; 0
   1abfe:	00 e0       	ldi	r16, 0x00	; 0
   1ac00:	68 cf       	rjmp	.-304    	; 0x1aad2 <realloc+0x92>

0001ac02 <strtoul>:
strtoul():
   1ac02:	3f 92       	push	r3
   1ac04:	4f 92       	push	r4
   1ac06:	5f 92       	push	r5
   1ac08:	6f 92       	push	r6
   1ac0a:	7f 92       	push	r7
   1ac0c:	8f 92       	push	r8
   1ac0e:	9f 92       	push	r9
   1ac10:	af 92       	push	r10
   1ac12:	bf 92       	push	r11
   1ac14:	cf 92       	push	r12
   1ac16:	df 92       	push	r13
   1ac18:	ef 92       	push	r14
   1ac1a:	ff 92       	push	r15
   1ac1c:	0f 93       	push	r16
   1ac1e:	1f 93       	push	r17
   1ac20:	cf 93       	push	r28
   1ac22:	df 93       	push	r29
   1ac24:	5c 01       	movw	r10, r24
   1ac26:	6b 01       	movw	r12, r22
   1ac28:	7a 01       	movw	r14, r20
   1ac2a:	61 15       	cp	r22, r1
   1ac2c:	71 05       	cpc	r23, r1
   1ac2e:	19 f0       	breq	.+6      	; 0x1ac36 <strtoul+0x34>
   1ac30:	fb 01       	movw	r30, r22
   1ac32:	91 83       	std	Z+1, r25	; 0x01
   1ac34:	80 83       	st	Z, r24
   1ac36:	e1 14       	cp	r14, r1
   1ac38:	f1 04       	cpc	r15, r1
   1ac3a:	49 f0       	breq	.+18     	; 0x1ac4e <strtoul+0x4c>
   1ac3c:	c7 01       	movw	r24, r14
   1ac3e:	02 97       	sbiw	r24, 0x02	; 2
   1ac40:	83 97       	sbiw	r24, 0x23	; 35
   1ac42:	28 f0       	brcs	.+10     	; 0x1ac4e <strtoul+0x4c>
   1ac44:	60 e0       	ldi	r22, 0x00	; 0
   1ac46:	70 e0       	ldi	r23, 0x00	; 0
   1ac48:	cb 01       	movw	r24, r22
   1ac4a:	9b c0       	rjmp	.+310    	; 0x1ad82 <strtoul+0x180>
   1ac4c:	5e 01       	movw	r10, r28
   1ac4e:	e5 01       	movw	r28, r10
   1ac50:	21 96       	adiw	r28, 0x01	; 1
   1ac52:	f5 01       	movw	r30, r10
   1ac54:	10 81       	ld	r17, Z
   1ac56:	81 2f       	mov	r24, r17
   1ac58:	90 e0       	ldi	r25, 0x00	; 0
   1ac5a:	0e 94 2b d7 	call	0x1ae56	; 0x1ae56 <isspace>
   1ac5e:	89 2b       	or	r24, r25
   1ac60:	a9 f7       	brne	.-22     	; 0x1ac4c <strtoul+0x4a>
   1ac62:	1d 32       	cpi	r17, 0x2D	; 45
   1ac64:	09 f0       	breq	.+2      	; 0x1ac68 <strtoul+0x66>
   1ac66:	5c c0       	rjmp	.+184    	; 0x1ad20 <strtoul+0x11e>
   1ac68:	21 96       	adiw	r28, 0x01	; 1
   1ac6a:	f5 01       	movw	r30, r10
   1ac6c:	11 81       	ldd	r17, Z+1	; 0x01
   1ac6e:	01 e0       	ldi	r16, 0x01	; 1
   1ac70:	e1 14       	cp	r14, r1
   1ac72:	f1 04       	cpc	r15, r1
   1ac74:	09 f4       	brne	.+2      	; 0x1ac78 <strtoul+0x76>
   1ac76:	bb c0       	rjmp	.+374    	; 0x1adee <strtoul+0x1ec>
   1ac78:	f0 e1       	ldi	r31, 0x10	; 16
   1ac7a:	ef 16       	cp	r14, r31
   1ac7c:	f1 04       	cpc	r15, r1
   1ac7e:	09 f0       	breq	.+2      	; 0x1ac82 <strtoul+0x80>
   1ac80:	9b c0       	rjmp	.+310    	; 0x1adb8 <strtoul+0x1b6>
   1ac82:	10 33       	cpi	r17, 0x30	; 48
   1ac84:	41 f4       	brne	.+16     	; 0x1ac96 <strtoul+0x94>
   1ac86:	88 81       	ld	r24, Y
   1ac88:	8f 7d       	andi	r24, 0xDF	; 223
   1ac8a:	88 35       	cpi	r24, 0x58	; 88
   1ac8c:	09 f0       	breq	.+2      	; 0x1ac90 <strtoul+0x8e>
   1ac8e:	8f c0       	rjmp	.+286    	; 0x1adae <strtoul+0x1ac>
   1ac90:	19 81       	ldd	r17, Y+1	; 0x01
   1ac92:	22 96       	adiw	r28, 0x02	; 2
   1ac94:	02 60       	ori	r16, 0x02	; 2
   1ac96:	e0 e1       	ldi	r30, 0x10	; 16
   1ac98:	ee 2e       	mov	r14, r30
   1ac9a:	f1 2c       	mov	r15, r1
   1ac9c:	88 24       	eor	r8, r8
   1ac9e:	8a 94       	dec	r8
   1aca0:	98 2c       	mov	r9, r8
   1aca2:	a8 2c       	mov	r10, r8
   1aca4:	ff e0       	ldi	r31, 0x0F	; 15
   1aca6:	bf 2e       	mov	r11, r31
   1aca8:	20 e0       	ldi	r18, 0x00	; 0
   1acaa:	60 e0       	ldi	r22, 0x00	; 0
   1acac:	70 e0       	ldi	r23, 0x00	; 0
   1acae:	cb 01       	movw	r24, r22
   1acb0:	27 01       	movw	r4, r14
   1acb2:	0f 2c       	mov	r0, r15
   1acb4:	00 0c       	add	r0, r0
   1acb6:	66 08       	sbc	r6, r6
   1acb8:	77 08       	sbc	r7, r7
   1acba:	fe 01       	movw	r30, r28
   1acbc:	50 ed       	ldi	r21, 0xD0	; 208
   1acbe:	35 2e       	mov	r3, r21
   1acc0:	31 0e       	add	r3, r17
   1acc2:	39 e0       	ldi	r19, 0x09	; 9
   1acc4:	33 15       	cp	r19, r3
   1acc6:	68 f4       	brcc	.+26     	; 0x1ace2 <strtoul+0xe0>
   1acc8:	3f eb       	ldi	r19, 0xBF	; 191
   1acca:	31 0f       	add	r19, r17
   1accc:	49 ec       	ldi	r20, 0xC9	; 201
   1acce:	34 2e       	mov	r3, r20
   1acd0:	3a 31       	cpi	r19, 0x1A	; 26
   1acd2:	30 f0       	brcs	.+12     	; 0x1ace0 <strtoul+0xde>
   1acd4:	3f e9       	ldi	r19, 0x9F	; 159
   1acd6:	31 0f       	add	r19, r17
   1acd8:	3a 31       	cpi	r19, 0x1A	; 26
   1acda:	b0 f5       	brcc	.+108    	; 0x1ad48 <strtoul+0x146>
   1acdc:	39 ea       	ldi	r19, 0xA9	; 169
   1acde:	33 2e       	mov	r3, r19
   1ace0:	31 0e       	add	r3, r17
   1ace2:	3e 14       	cp	r3, r14
   1ace4:	1f 04       	cpc	r1, r15
   1ace6:	84 f5       	brge	.+96     	; 0x1ad48 <strtoul+0x146>
   1ace8:	2f 3f       	cpi	r18, 0xFF	; 255
   1acea:	b9 f0       	breq	.+46     	; 0x1ad1a <strtoul+0x118>
   1acec:	86 16       	cp	r8, r22
   1acee:	97 06       	cpc	r9, r23
   1acf0:	a8 06       	cpc	r10, r24
   1acf2:	b9 06       	cpc	r11, r25
   1acf4:	38 f1       	brcs	.+78     	; 0x1ad44 <strtoul+0x142>
   1acf6:	a3 01       	movw	r20, r6
   1acf8:	92 01       	movw	r18, r4
   1acfa:	0e 94 36 d3 	call	0x1a66c	; 0x1a66c <__mulsi3>
   1acfe:	23 2d       	mov	r18, r3
   1ad00:	30 e0       	ldi	r19, 0x00	; 0
   1ad02:	50 e0       	ldi	r21, 0x00	; 0
   1ad04:	40 e0       	ldi	r20, 0x00	; 0
   1ad06:	62 0f       	add	r22, r18
   1ad08:	73 1f       	adc	r23, r19
   1ad0a:	84 1f       	adc	r24, r20
   1ad0c:	95 1f       	adc	r25, r21
   1ad0e:	62 17       	cp	r22, r18
   1ad10:	73 07       	cpc	r23, r19
   1ad12:	84 07       	cpc	r24, r20
   1ad14:	95 07       	cpc	r25, r21
   1ad16:	b0 f0       	brcs	.+44     	; 0x1ad44 <strtoul+0x142>
   1ad18:	21 e0       	ldi	r18, 0x01	; 1
   1ad1a:	21 96       	adiw	r28, 0x01	; 1
   1ad1c:	10 81       	ld	r17, Z
   1ad1e:	cd cf       	rjmp	.-102    	; 0x1acba <strtoul+0xb8>
   1ad20:	1b 32       	cpi	r17, 0x2B	; 43
   1ad22:	21 f4       	brne	.+8      	; 0x1ad2c <strtoul+0x12a>
   1ad24:	e5 01       	movw	r28, r10
   1ad26:	22 96       	adiw	r28, 0x02	; 2
   1ad28:	f5 01       	movw	r30, r10
   1ad2a:	11 81       	ldd	r17, Z+1	; 0x01
   1ad2c:	00 e0       	ldi	r16, 0x00	; 0
   1ad2e:	a0 cf       	rjmp	.-192    	; 0x1ac70 <strtoul+0x6e>
   1ad30:	78 e0       	ldi	r23, 0x08	; 8
   1ad32:	e7 2e       	mov	r14, r23
   1ad34:	f1 2c       	mov	r15, r1
   1ad36:	88 24       	eor	r8, r8
   1ad38:	8a 94       	dec	r8
   1ad3a:	98 2c       	mov	r9, r8
   1ad3c:	a8 2c       	mov	r10, r8
   1ad3e:	6f e1       	ldi	r22, 0x1F	; 31
   1ad40:	b6 2e       	mov	r11, r22
   1ad42:	b2 cf       	rjmp	.-156    	; 0x1aca8 <strtoul+0xa6>
   1ad44:	2f ef       	ldi	r18, 0xFF	; 255
   1ad46:	e9 cf       	rjmp	.-46     	; 0x1ad1a <strtoul+0x118>
   1ad48:	c1 14       	cp	r12, r1
   1ad4a:	d1 04       	cpc	r13, r1
   1ad4c:	31 f0       	breq	.+12     	; 0x1ad5a <strtoul+0x158>
   1ad4e:	22 23       	and	r18, r18
   1ad50:	51 f1       	breq	.+84     	; 0x1ada6 <strtoul+0x1a4>
   1ad52:	21 97       	sbiw	r28, 0x01	; 1
   1ad54:	f6 01       	movw	r30, r12
   1ad56:	d1 83       	std	Z+1, r29	; 0x01
   1ad58:	c0 83       	st	Z, r28
   1ad5a:	00 ff       	sbrs	r16, 0
   1ad5c:	07 c0       	rjmp	.+14     	; 0x1ad6c <strtoul+0x16a>
   1ad5e:	90 95       	com	r25
   1ad60:	80 95       	com	r24
   1ad62:	70 95       	com	r23
   1ad64:	61 95       	neg	r22
   1ad66:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad68:	8f 4f       	sbci	r24, 0xFF	; 255
   1ad6a:	9f 4f       	sbci	r25, 0xFF	; 255
   1ad6c:	2f 3f       	cpi	r18, 0xFF	; 255
   1ad6e:	49 f4       	brne	.+18     	; 0x1ad82 <strtoul+0x180>
   1ad70:	82 e2       	ldi	r24, 0x22	; 34
   1ad72:	90 e0       	ldi	r25, 0x00	; 0
   1ad74:	90 93 ab 12 	sts	0x12AB, r25	; 0x8012ab <errno+0x1>
   1ad78:	80 93 aa 12 	sts	0x12AA, r24	; 0x8012aa <errno>
   1ad7c:	6f ef       	ldi	r22, 0xFF	; 255
   1ad7e:	7f ef       	ldi	r23, 0xFF	; 255
   1ad80:	cb 01       	movw	r24, r22
   1ad82:	df 91       	pop	r29
   1ad84:	cf 91       	pop	r28
   1ad86:	1f 91       	pop	r17
   1ad88:	0f 91       	pop	r16
   1ad8a:	ff 90       	pop	r15
   1ad8c:	ef 90       	pop	r14
   1ad8e:	df 90       	pop	r13
   1ad90:	cf 90       	pop	r12
   1ad92:	bf 90       	pop	r11
   1ad94:	af 90       	pop	r10
   1ad96:	9f 90       	pop	r9
   1ad98:	8f 90       	pop	r8
   1ad9a:	7f 90       	pop	r7
   1ad9c:	6f 90       	pop	r6
   1ad9e:	5f 90       	pop	r5
   1ada0:	4f 90       	pop	r4
   1ada2:	3f 90       	pop	r3
   1ada4:	08 95       	ret
   1ada6:	01 ff       	sbrs	r16, 1
   1ada8:	d8 cf       	rjmp	.-80     	; 0x1ad5a <strtoul+0x158>
   1adaa:	22 97       	sbiw	r28, 0x02	; 2
   1adac:	d3 cf       	rjmp	.-90     	; 0x1ad54 <strtoul+0x152>
   1adae:	10 e3       	ldi	r17, 0x30	; 48
   1adb0:	e1 14       	cp	r14, r1
   1adb2:	f1 04       	cpc	r15, r1
   1adb4:	09 f4       	brne	.+2      	; 0x1adb8 <strtoul+0x1b6>
   1adb6:	bc cf       	rjmp	.-136    	; 0x1ad30 <strtoul+0x12e>
   1adb8:	3a e0       	ldi	r19, 0x0A	; 10
   1adba:	e3 16       	cp	r14, r19
   1adbc:	f1 04       	cpc	r15, r1
   1adbe:	e9 f0       	breq	.+58     	; 0x1adfa <strtoul+0x1f8>
   1adc0:	80 e1       	ldi	r24, 0x10	; 16
   1adc2:	e8 16       	cp	r14, r24
   1adc4:	f1 04       	cpc	r15, r1
   1adc6:	09 f4       	brne	.+2      	; 0x1adca <strtoul+0x1c8>
   1adc8:	66 cf       	rjmp	.-308    	; 0x1ac96 <strtoul+0x94>
   1adca:	e8 e0       	ldi	r30, 0x08	; 8
   1adcc:	ee 16       	cp	r14, r30
   1adce:	f1 04       	cpc	r15, r1
   1add0:	09 f4       	brne	.+2      	; 0x1add4 <strtoul+0x1d2>
   1add2:	b1 cf       	rjmp	.-158    	; 0x1ad36 <strtoul+0x134>
   1add4:	6f ef       	ldi	r22, 0xFF	; 255
   1add6:	7f ef       	ldi	r23, 0xFF	; 255
   1add8:	cb 01       	movw	r24, r22
   1adda:	97 01       	movw	r18, r14
   1addc:	0f 2c       	mov	r0, r15
   1adde:	00 0c       	add	r0, r0
   1ade0:	44 0b       	sbc	r20, r20
   1ade2:	55 0b       	sbc	r21, r21
   1ade4:	0e 94 7a d3 	call	0x1a6f4	; 0x1a6f4 <__udivmodsi4>
   1ade8:	49 01       	movw	r8, r18
   1adea:	5a 01       	movw	r10, r20
   1adec:	5d cf       	rjmp	.-326    	; 0x1aca8 <strtoul+0xa6>
   1adee:	10 33       	cpi	r17, 0x30	; 48
   1adf0:	09 f4       	brne	.+2      	; 0x1adf4 <strtoul+0x1f2>
   1adf2:	49 cf       	rjmp	.-366    	; 0x1ac86 <strtoul+0x84>
   1adf4:	9a e0       	ldi	r25, 0x0A	; 10
   1adf6:	e9 2e       	mov	r14, r25
   1adf8:	f1 2c       	mov	r15, r1
   1adfa:	89 e9       	ldi	r24, 0x99	; 153
   1adfc:	88 2e       	mov	r8, r24
   1adfe:	98 2c       	mov	r9, r8
   1ae00:	a8 2c       	mov	r10, r8
   1ae02:	89 e1       	ldi	r24, 0x19	; 25
   1ae04:	b8 2e       	mov	r11, r24
   1ae06:	50 cf       	rjmp	.-352    	; 0x1aca8 <strtoul+0xa6>

0001ae08 <abort>:
abort():
   1ae08:	81 e0       	ldi	r24, 0x01	; 1
   1ae0a:	90 e0       	ldi	r25, 0x00	; 0
   1ae0c:	f8 94       	cli
   1ae0e:	0c 94 8f df 	jmp	0x1bf1e	; 0x1bf1e <_exit>

0001ae12 <atof>:
atof():
   1ae12:	66 27       	eor	r22, r22
   1ae14:	77 27       	eor	r23, r23
   1ae16:	0c 94 6d dc 	jmp	0x1b8da	; 0x1b8da <strtod>

0001ae1a <atoi>:
atoi():
   1ae1a:	fc 01       	movw	r30, r24
   1ae1c:	88 27       	eor	r24, r24
   1ae1e:	99 27       	eor	r25, r25
   1ae20:	e8 94       	clt
   1ae22:	21 91       	ld	r18, Z+
   1ae24:	20 32       	cpi	r18, 0x20	; 32
   1ae26:	e9 f3       	breq	.-6      	; 0x1ae22 <atoi+0x8>
   1ae28:	29 30       	cpi	r18, 0x09	; 9
   1ae2a:	10 f0       	brcs	.+4      	; 0x1ae30 <atoi+0x16>
   1ae2c:	2e 30       	cpi	r18, 0x0E	; 14
   1ae2e:	c8 f3       	brcs	.-14     	; 0x1ae22 <atoi+0x8>
   1ae30:	2b 32       	cpi	r18, 0x2B	; 43
   1ae32:	41 f0       	breq	.+16     	; 0x1ae44 <atoi+0x2a>
   1ae34:	2d 32       	cpi	r18, 0x2D	; 45
   1ae36:	39 f4       	brne	.+14     	; 0x1ae46 <atoi+0x2c>
   1ae38:	68 94       	set
   1ae3a:	04 c0       	rjmp	.+8      	; 0x1ae44 <atoi+0x2a>
   1ae3c:	0e 94 d3 d7 	call	0x1afa6	; 0x1afa6 <__mulhi_const_10>
   1ae40:	82 0f       	add	r24, r18
   1ae42:	91 1d       	adc	r25, r1
   1ae44:	21 91       	ld	r18, Z+
   1ae46:	20 53       	subi	r18, 0x30	; 48
   1ae48:	2a 30       	cpi	r18, 0x0A	; 10
   1ae4a:	c0 f3       	brcs	.-16     	; 0x1ae3c <atoi+0x22>
   1ae4c:	1e f4       	brtc	.+6      	; 0x1ae54 <atoi+0x3a>
   1ae4e:	90 95       	com	r25
   1ae50:	81 95       	neg	r24
   1ae52:	9f 4f       	sbci	r25, 0xFF	; 255
   1ae54:	08 95       	ret

0001ae56 <isspace>:
isspace():
   1ae56:	91 11       	cpse	r25, r1
   1ae58:	0c 94 a3 de 	jmp	0x1bd46	; 0x1bd46 <__ctype_isfalse>
   1ae5c:	80 32       	cpi	r24, 0x20	; 32
   1ae5e:	19 f0       	breq	.+6      	; 0x1ae66 <isspace+0x10>
   1ae60:	89 50       	subi	r24, 0x09	; 9
   1ae62:	85 50       	subi	r24, 0x05	; 5
   1ae64:	c8 f7       	brcc	.-14     	; 0x1ae58 <isspace+0x2>
   1ae66:	08 95       	ret

0001ae68 <strcat_P>:
strcat_P():
   1ae68:	fb 01       	movw	r30, r22
   1ae6a:	dc 01       	movw	r26, r24
   1ae6c:	0d 90       	ld	r0, X+
   1ae6e:	00 20       	and	r0, r0
   1ae70:	e9 f7       	brne	.-6      	; 0x1ae6c <strcat_P+0x4>
   1ae72:	11 97       	sbiw	r26, 0x01	; 1
   1ae74:	05 90       	lpm	r0, Z+
   1ae76:	0d 92       	st	X+, r0
   1ae78:	00 20       	and	r0, r0
   1ae7a:	e1 f7       	brne	.-8      	; 0x1ae74 <strcat_P+0xc>
   1ae7c:	08 95       	ret

0001ae7e <strcpy_P>:
strcpy_P():
   1ae7e:	fb 01       	movw	r30, r22
   1ae80:	dc 01       	movw	r26, r24
   1ae82:	05 90       	lpm	r0, Z+
   1ae84:	0d 92       	st	X+, r0
   1ae86:	00 20       	and	r0, r0
   1ae88:	e1 f7       	brne	.-8      	; 0x1ae82 <strcpy_P+0x4>
   1ae8a:	08 95       	ret

0001ae8c <strtok>:
strtok():
   1ae8c:	42 ec       	ldi	r20, 0xC2	; 194
   1ae8e:	58 e0       	ldi	r21, 0x08	; 8
   1ae90:	0c 94 96 d7 	jmp	0x1af2c	; 0x1af2c <strtok_r>

0001ae94 <memcpy>:
memcpy():
   1ae94:	fb 01       	movw	r30, r22
   1ae96:	dc 01       	movw	r26, r24
   1ae98:	02 c0       	rjmp	.+4      	; 0x1ae9e <memcpy+0xa>
   1ae9a:	01 90       	ld	r0, Z+
   1ae9c:	0d 92       	st	X+, r0
   1ae9e:	41 50       	subi	r20, 0x01	; 1
   1aea0:	50 40       	sbci	r21, 0x00	; 0
   1aea2:	d8 f7       	brcc	.-10     	; 0x1ae9a <memcpy+0x6>
   1aea4:	08 95       	ret

0001aea6 <strcat>:
strcat():
   1aea6:	fb 01       	movw	r30, r22
   1aea8:	dc 01       	movw	r26, r24
   1aeaa:	0d 90       	ld	r0, X+
   1aeac:	00 20       	and	r0, r0
   1aeae:	e9 f7       	brne	.-6      	; 0x1aeaa <strcat+0x4>
   1aeb0:	11 97       	sbiw	r26, 0x01	; 1
   1aeb2:	01 90       	ld	r0, Z+
   1aeb4:	0d 92       	st	X+, r0
   1aeb6:	00 20       	and	r0, r0
   1aeb8:	e1 f7       	brne	.-8      	; 0x1aeb2 <strcat+0xc>
   1aeba:	08 95       	ret

0001aebc <strchr>:
strchr():
   1aebc:	fc 01       	movw	r30, r24
   1aebe:	81 91       	ld	r24, Z+
   1aec0:	86 17       	cp	r24, r22
   1aec2:	21 f0       	breq	.+8      	; 0x1aecc <strchr+0x10>
   1aec4:	88 23       	and	r24, r24
   1aec6:	d9 f7       	brne	.-10     	; 0x1aebe <strchr+0x2>
   1aec8:	99 27       	eor	r25, r25
   1aeca:	08 95       	ret
   1aecc:	31 97       	sbiw	r30, 0x01	; 1
   1aece:	cf 01       	movw	r24, r30
   1aed0:	08 95       	ret

0001aed2 <strcmp>:
strcmp():
   1aed2:	fb 01       	movw	r30, r22
   1aed4:	dc 01       	movw	r26, r24
   1aed6:	8d 91       	ld	r24, X+
   1aed8:	01 90       	ld	r0, Z+
   1aeda:	80 19       	sub	r24, r0
   1aedc:	01 10       	cpse	r0, r1
   1aede:	d9 f3       	breq	.-10     	; 0x1aed6 <strcmp+0x4>
   1aee0:	99 0b       	sbc	r25, r25
   1aee2:	08 95       	ret

0001aee4 <strcpy>:
strcpy():
   1aee4:	fb 01       	movw	r30, r22
   1aee6:	dc 01       	movw	r26, r24
   1aee8:	01 90       	ld	r0, Z+
   1aeea:	0d 92       	st	X+, r0
   1aeec:	00 20       	and	r0, r0
   1aeee:	e1 f7       	brne	.-8      	; 0x1aee8 <strcpy+0x4>
   1aef0:	08 95       	ret

0001aef2 <strncmp>:
strncmp():
   1aef2:	fb 01       	movw	r30, r22
   1aef4:	dc 01       	movw	r26, r24
   1aef6:	41 50       	subi	r20, 0x01	; 1
   1aef8:	50 40       	sbci	r21, 0x00	; 0
   1aefa:	30 f0       	brcs	.+12     	; 0x1af08 <strncmp+0x16>
   1aefc:	8d 91       	ld	r24, X+
   1aefe:	01 90       	ld	r0, Z+
   1af00:	80 19       	sub	r24, r0
   1af02:	19 f4       	brne	.+6      	; 0x1af0a <strncmp+0x18>
   1af04:	00 20       	and	r0, r0
   1af06:	b9 f7       	brne	.-18     	; 0x1aef6 <strncmp+0x4>
   1af08:	88 1b       	sub	r24, r24
   1af0a:	99 0b       	sbc	r25, r25
   1af0c:	08 95       	ret

0001af0e <strncpy>:
strncpy():
   1af0e:	fb 01       	movw	r30, r22
   1af10:	dc 01       	movw	r26, r24
   1af12:	41 50       	subi	r20, 0x01	; 1
   1af14:	50 40       	sbci	r21, 0x00	; 0
   1af16:	48 f0       	brcs	.+18     	; 0x1af2a <strncpy+0x1c>
   1af18:	01 90       	ld	r0, Z+
   1af1a:	0d 92       	st	X+, r0
   1af1c:	00 20       	and	r0, r0
   1af1e:	c9 f7       	brne	.-14     	; 0x1af12 <strncpy+0x4>
   1af20:	01 c0       	rjmp	.+2      	; 0x1af24 <strncpy+0x16>
   1af22:	1d 92       	st	X+, r1
   1af24:	41 50       	subi	r20, 0x01	; 1
   1af26:	50 40       	sbci	r21, 0x00	; 0
   1af28:	e0 f7       	brcc	.-8      	; 0x1af22 <strncpy+0x14>
   1af2a:	08 95       	ret

0001af2c <strtok_r>:
strtok_r():
   1af2c:	fa 01       	movw	r30, r20
   1af2e:	a1 91       	ld	r26, Z+
   1af30:	b0 81       	ld	r27, Z
   1af32:	00 97       	sbiw	r24, 0x00	; 0
   1af34:	19 f4       	brne	.+6      	; 0x1af3c <strtok_r+0x10>
   1af36:	10 97       	sbiw	r26, 0x00	; 0
   1af38:	e1 f0       	breq	.+56     	; 0x1af72 <strtok_r+0x46>
   1af3a:	cd 01       	movw	r24, r26
   1af3c:	dc 01       	movw	r26, r24
   1af3e:	cd 01       	movw	r24, r26
   1af40:	0d 90       	ld	r0, X+
   1af42:	00 20       	and	r0, r0
   1af44:	11 f4       	brne	.+4      	; 0x1af4a <strtok_r+0x1e>
   1af46:	c0 01       	movw	r24, r0
   1af48:	13 c0       	rjmp	.+38     	; 0x1af70 <strtok_r+0x44>
   1af4a:	fb 01       	movw	r30, r22
   1af4c:	21 91       	ld	r18, Z+
   1af4e:	22 23       	and	r18, r18
   1af50:	19 f0       	breq	.+6      	; 0x1af58 <strtok_r+0x2c>
   1af52:	20 15       	cp	r18, r0
   1af54:	d9 f7       	brne	.-10     	; 0x1af4c <strtok_r+0x20>
   1af56:	f3 cf       	rjmp	.-26     	; 0x1af3e <strtok_r+0x12>
   1af58:	fb 01       	movw	r30, r22
   1af5a:	21 91       	ld	r18, Z+
   1af5c:	20 15       	cp	r18, r0
   1af5e:	19 f4       	brne	.+6      	; 0x1af66 <strtok_r+0x3a>
   1af60:	1e 92       	st	-X, r1
   1af62:	11 96       	adiw	r26, 0x01	; 1
   1af64:	06 c0       	rjmp	.+12     	; 0x1af72 <strtok_r+0x46>
   1af66:	22 23       	and	r18, r18
   1af68:	c1 f7       	brne	.-16     	; 0x1af5a <strtok_r+0x2e>
   1af6a:	0d 90       	ld	r0, X+
   1af6c:	00 20       	and	r0, r0
   1af6e:	a1 f7       	brne	.-24     	; 0x1af58 <strtok_r+0x2c>
   1af70:	d0 01       	movw	r26, r0
   1af72:	fa 01       	movw	r30, r20
   1af74:	a1 93       	st	Z+, r26
   1af76:	b0 83       	st	Z, r27
   1af78:	08 95       	ret

0001af7a <itoa>:
itoa():
   1af7a:	45 32       	cpi	r20, 0x25	; 37
   1af7c:	51 05       	cpc	r21, r1
   1af7e:	20 f4       	brcc	.+8      	; 0x1af88 <itoa+0xe>
   1af80:	42 30       	cpi	r20, 0x02	; 2
   1af82:	10 f0       	brcs	.+4      	; 0x1af88 <itoa+0xe>
   1af84:	0c 94 c8 d7 	jmp	0x1af90	; 0x1af90 <__itoa_ncheck>
   1af88:	fb 01       	movw	r30, r22
   1af8a:	10 82       	st	Z, r1
   1af8c:	cb 01       	movw	r24, r22
   1af8e:	08 95       	ret

0001af90 <__itoa_ncheck>:
__itoa_ncheck():
   1af90:	bb 27       	eor	r27, r27
   1af92:	4a 30       	cpi	r20, 0x0A	; 10
   1af94:	31 f4       	brne	.+12     	; 0x1afa2 <__itoa_ncheck+0x12>
   1af96:	99 23       	and	r25, r25
   1af98:	22 f4       	brpl	.+8      	; 0x1afa2 <__itoa_ncheck+0x12>
   1af9a:	bd e2       	ldi	r27, 0x2D	; 45
   1af9c:	90 95       	com	r25
   1af9e:	81 95       	neg	r24
   1afa0:	9f 4f       	sbci	r25, 0xFF	; 255
   1afa2:	0c 94 dc d7 	jmp	0x1afb8	; 0x1afb8 <__utoa_common>

0001afa6 <__mulhi_const_10>:
__mulhi_const_10():
   1afa6:	7a e0       	ldi	r23, 0x0A	; 10
   1afa8:	97 9f       	mul	r25, r23
   1afaa:	90 2d       	mov	r25, r0
   1afac:	87 9f       	mul	r24, r23
   1afae:	80 2d       	mov	r24, r0
   1afb0:	91 0d       	add	r25, r1
   1afb2:	11 24       	eor	r1, r1
   1afb4:	08 95       	ret

0001afb6 <__utoa_ncheck>:
__utoa_ncheck():
   1afb6:	bb 27       	eor	r27, r27

0001afb8 <__utoa_common>:
   1afb8:	fb 01       	movw	r30, r22
   1afba:	55 27       	eor	r21, r21
   1afbc:	aa 27       	eor	r26, r26
   1afbe:	88 0f       	add	r24, r24
   1afc0:	99 1f       	adc	r25, r25
   1afc2:	aa 1f       	adc	r26, r26
   1afc4:	a4 17       	cp	r26, r20
   1afc6:	10 f0       	brcs	.+4      	; 0x1afcc <__utoa_common+0x14>
   1afc8:	a4 1b       	sub	r26, r20
   1afca:	83 95       	inc	r24
   1afcc:	50 51       	subi	r21, 0x10	; 16
   1afce:	b9 f7       	brne	.-18     	; 0x1afbe <__utoa_common+0x6>
   1afd0:	a0 5d       	subi	r26, 0xD0	; 208
   1afd2:	aa 33       	cpi	r26, 0x3A	; 58
   1afd4:	08 f0       	brcs	.+2      	; 0x1afd8 <__utoa_common+0x20>
   1afd6:	a9 5d       	subi	r26, 0xD9	; 217
   1afd8:	a1 93       	st	Z+, r26
   1afda:	00 97       	sbiw	r24, 0x00	; 0
   1afdc:	79 f7       	brne	.-34     	; 0x1afbc <__utoa_common+0x4>
   1afde:	b1 11       	cpse	r27, r1
   1afe0:	b1 93       	st	Z+, r27
   1afe2:	11 92       	st	Z+, r1
   1afe4:	cb 01       	movw	r24, r22
   1afe6:	0c 94 db de 	jmp	0x1bdb6	; 0x1bdb6 <strrev>

0001afea <fdevopen>:
fdevopen():
   1afea:	0f 93       	push	r16
   1afec:	1f 93       	push	r17
   1afee:	cf 93       	push	r28
   1aff0:	df 93       	push	r29
   1aff2:	00 97       	sbiw	r24, 0x00	; 0
   1aff4:	59 f4       	brne	.+22     	; 0x1b00c <fdevopen+0x22>
   1aff6:	61 15       	cp	r22, r1
   1aff8:	71 05       	cpc	r23, r1
   1affa:	41 f4       	brne	.+16     	; 0x1b00c <fdevopen+0x22>
   1affc:	f0 e0       	ldi	r31, 0x00	; 0
   1affe:	e0 e0       	ldi	r30, 0x00	; 0
   1b000:	cf 01       	movw	r24, r30
   1b002:	df 91       	pop	r29
   1b004:	cf 91       	pop	r28
   1b006:	1f 91       	pop	r17
   1b008:	0f 91       	pop	r16
   1b00a:	08 95       	ret
   1b00c:	8b 01       	movw	r16, r22
   1b00e:	ec 01       	movw	r28, r24
   1b010:	6e e0       	ldi	r22, 0x0E	; 14
   1b012:	70 e0       	ldi	r23, 0x00	; 0
   1b014:	81 e0       	ldi	r24, 0x01	; 1
   1b016:	90 e0       	ldi	r25, 0x00	; 0
   1b018:	0e 94 d8 da 	call	0x1b5b0	; 0x1b5b0 <calloc>
   1b01c:	fc 01       	movw	r30, r24
   1b01e:	89 2b       	or	r24, r25
   1b020:	69 f3       	breq	.-38     	; 0x1affc <fdevopen+0x12>
   1b022:	80 e8       	ldi	r24, 0x80	; 128
   1b024:	83 83       	std	Z+3, r24	; 0x03
   1b026:	01 15       	cp	r16, r1
   1b028:	11 05       	cpc	r17, r1
   1b02a:	71 f0       	breq	.+28     	; 0x1b048 <fdevopen+0x5e>
   1b02c:	13 87       	std	Z+11, r17	; 0x0b
   1b02e:	02 87       	std	Z+10, r16	; 0x0a
   1b030:	81 e8       	ldi	r24, 0x81	; 129
   1b032:	83 83       	std	Z+3, r24	; 0x03
   1b034:	80 91 94 12 	lds	r24, 0x1294	; 0x801294 <__iob>
   1b038:	90 91 95 12 	lds	r25, 0x1295	; 0x801295 <__iob+0x1>
   1b03c:	89 2b       	or	r24, r25
   1b03e:	21 f4       	brne	.+8      	; 0x1b048 <fdevopen+0x5e>
   1b040:	f0 93 95 12 	sts	0x1295, r31	; 0x801295 <__iob+0x1>
   1b044:	e0 93 94 12 	sts	0x1294, r30	; 0x801294 <__iob>
   1b048:	20 97       	sbiw	r28, 0x00	; 0
   1b04a:	d1 f2       	breq	.-76     	; 0x1b000 <fdevopen+0x16>
   1b04c:	d1 87       	std	Z+9, r29	; 0x09
   1b04e:	c0 87       	std	Z+8, r28	; 0x08
   1b050:	83 81       	ldd	r24, Z+3	; 0x03
   1b052:	82 60       	ori	r24, 0x02	; 2
   1b054:	83 83       	std	Z+3, r24	; 0x03
   1b056:	80 91 96 12 	lds	r24, 0x1296	; 0x801296 <__iob+0x2>
   1b05a:	90 91 97 12 	lds	r25, 0x1297	; 0x801297 <__iob+0x3>
   1b05e:	89 2b       	or	r24, r25
   1b060:	79 f6       	brne	.-98     	; 0x1b000 <fdevopen+0x16>
   1b062:	f0 93 97 12 	sts	0x1297, r31	; 0x801297 <__iob+0x3>
   1b066:	e0 93 96 12 	sts	0x1296, r30	; 0x801296 <__iob+0x2>
   1b06a:	80 91 98 12 	lds	r24, 0x1298	; 0x801298 <__iob+0x4>
   1b06e:	90 91 99 12 	lds	r25, 0x1299	; 0x801299 <__iob+0x5>
   1b072:	89 2b       	or	r24, r25
   1b074:	29 f6       	brne	.-118    	; 0x1b000 <fdevopen+0x16>
   1b076:	f0 93 99 12 	sts	0x1299, r31	; 0x801299 <__iob+0x5>
   1b07a:	e0 93 98 12 	sts	0x1298, r30	; 0x801298 <__iob+0x4>
   1b07e:	c0 cf       	rjmp	.-128    	; 0x1b000 <fdevopen+0x16>

0001b080 <printf>:
printf():
   1b080:	cf 93       	push	r28
   1b082:	df 93       	push	r29
   1b084:	cd b7       	in	r28, 0x3d	; 61
   1b086:	de b7       	in	r29, 0x3e	; 62
   1b088:	ae 01       	movw	r20, r28
   1b08a:	4a 5f       	subi	r20, 0xFA	; 250
   1b08c:	5f 4f       	sbci	r21, 0xFF	; 255
   1b08e:	fa 01       	movw	r30, r20
   1b090:	61 91       	ld	r22, Z+
   1b092:	71 91       	ld	r23, Z+
   1b094:	af 01       	movw	r20, r30
   1b096:	80 91 96 12 	lds	r24, 0x1296	; 0x801296 <__iob+0x2>
   1b09a:	90 91 97 12 	lds	r25, 0x1297	; 0x801297 <__iob+0x3>
   1b09e:	0e 94 d6 d8 	call	0x1b1ac	; 0x1b1ac <vfprintf>
   1b0a2:	df 91       	pop	r29
   1b0a4:	cf 91       	pop	r28
   1b0a6:	08 95       	ret

0001b0a8 <printf_P>:
printf_P():
   1b0a8:	0f 93       	push	r16
   1b0aa:	1f 93       	push	r17
   1b0ac:	cf 93       	push	r28
   1b0ae:	df 93       	push	r29
   1b0b0:	cd b7       	in	r28, 0x3d	; 61
   1b0b2:	de b7       	in	r29, 0x3e	; 62
   1b0b4:	ae 01       	movw	r20, r28
   1b0b6:	48 5f       	subi	r20, 0xF8	; 248
   1b0b8:	5f 4f       	sbci	r21, 0xFF	; 255
   1b0ba:	da 01       	movw	r26, r20
   1b0bc:	6d 91       	ld	r22, X+
   1b0be:	7d 91       	ld	r23, X+
   1b0c0:	ad 01       	movw	r20, r26
   1b0c2:	04 e9       	ldi	r16, 0x94	; 148
   1b0c4:	12 e1       	ldi	r17, 0x12	; 18
   1b0c6:	f8 01       	movw	r30, r16
   1b0c8:	82 81       	ldd	r24, Z+2	; 0x02
   1b0ca:	93 81       	ldd	r25, Z+3	; 0x03
   1b0cc:	dc 01       	movw	r26, r24
   1b0ce:	13 96       	adiw	r26, 0x03	; 3
   1b0d0:	2c 91       	ld	r18, X
   1b0d2:	13 97       	sbiw	r26, 0x03	; 3
   1b0d4:	28 60       	ori	r18, 0x08	; 8
   1b0d6:	13 96       	adiw	r26, 0x03	; 3
   1b0d8:	2c 93       	st	X, r18
   1b0da:	0e 94 d6 d8 	call	0x1b1ac	; 0x1b1ac <vfprintf>
   1b0de:	d8 01       	movw	r26, r16
   1b0e0:	12 96       	adiw	r26, 0x02	; 2
   1b0e2:	ed 91       	ld	r30, X+
   1b0e4:	fc 91       	ld	r31, X
   1b0e6:	23 81       	ldd	r18, Z+3	; 0x03
   1b0e8:	27 7f       	andi	r18, 0xF7	; 247
   1b0ea:	23 83       	std	Z+3, r18	; 0x03
   1b0ec:	df 91       	pop	r29
   1b0ee:	cf 91       	pop	r28
   1b0f0:	1f 91       	pop	r17
   1b0f2:	0f 91       	pop	r16
   1b0f4:	08 95       	ret

0001b0f6 <puts>:
puts():
   1b0f6:	0f 93       	push	r16
   1b0f8:	1f 93       	push	r17
   1b0fa:	cf 93       	push	r28
   1b0fc:	df 93       	push	r29
   1b0fe:	e0 91 96 12 	lds	r30, 0x1296	; 0x801296 <__iob+0x2>
   1b102:	f0 91 97 12 	lds	r31, 0x1297	; 0x801297 <__iob+0x3>
   1b106:	23 81       	ldd	r18, Z+3	; 0x03
   1b108:	ec 01       	movw	r28, r24
   1b10a:	10 e0       	ldi	r17, 0x00	; 0
   1b10c:	00 e0       	ldi	r16, 0x00	; 0
   1b10e:	21 fd       	sbrc	r18, 1
   1b110:	08 c0       	rjmp	.+16     	; 0x1b122 <puts+0x2c>
   1b112:	0f ef       	ldi	r16, 0xFF	; 255
   1b114:	1f ef       	ldi	r17, 0xFF	; 255
   1b116:	14 c0       	rjmp	.+40     	; 0x1b140 <puts+0x4a>
   1b118:	19 95       	eicall
   1b11a:	89 2b       	or	r24, r25
   1b11c:	11 f0       	breq	.+4      	; 0x1b122 <puts+0x2c>
   1b11e:	0f ef       	ldi	r16, 0xFF	; 255
   1b120:	1f ef       	ldi	r17, 0xFF	; 255
   1b122:	89 91       	ld	r24, Y+
   1b124:	60 91 96 12 	lds	r22, 0x1296	; 0x801296 <__iob+0x2>
   1b128:	70 91 97 12 	lds	r23, 0x1297	; 0x801297 <__iob+0x3>
   1b12c:	db 01       	movw	r26, r22
   1b12e:	18 96       	adiw	r26, 0x08	; 8
   1b130:	ed 91       	ld	r30, X+
   1b132:	fc 91       	ld	r31, X
   1b134:	81 11       	cpse	r24, r1
   1b136:	f0 cf       	rjmp	.-32     	; 0x1b118 <puts+0x22>
   1b138:	8a e0       	ldi	r24, 0x0A	; 10
   1b13a:	19 95       	eicall
   1b13c:	89 2b       	or	r24, r25
   1b13e:	49 f7       	brne	.-46     	; 0x1b112 <puts+0x1c>
   1b140:	c8 01       	movw	r24, r16
   1b142:	df 91       	pop	r29
   1b144:	cf 91       	pop	r28
   1b146:	1f 91       	pop	r17
   1b148:	0f 91       	pop	r16
   1b14a:	08 95       	ret

0001b14c <sprintf>:
sprintf():
   1b14c:	0f 93       	push	r16
   1b14e:	1f 93       	push	r17
   1b150:	cf 93       	push	r28
   1b152:	df 93       	push	r29
   1b154:	cd b7       	in	r28, 0x3d	; 61
   1b156:	de b7       	in	r29, 0x3e	; 62
   1b158:	2e 97       	sbiw	r28, 0x0e	; 14
   1b15a:	0f b6       	in	r0, 0x3f	; 63
   1b15c:	f8 94       	cli
   1b15e:	de bf       	out	0x3e, r29	; 62
   1b160:	0f be       	out	0x3f, r0	; 63
   1b162:	cd bf       	out	0x3d, r28	; 61
   1b164:	0e 89       	ldd	r16, Y+22	; 0x16
   1b166:	1f 89       	ldd	r17, Y+23	; 0x17
   1b168:	86 e0       	ldi	r24, 0x06	; 6
   1b16a:	8c 83       	std	Y+4, r24	; 0x04
   1b16c:	1a 83       	std	Y+2, r17	; 0x02
   1b16e:	09 83       	std	Y+1, r16	; 0x01
   1b170:	8f ef       	ldi	r24, 0xFF	; 255
   1b172:	9f e7       	ldi	r25, 0x7F	; 127
   1b174:	9e 83       	std	Y+6, r25	; 0x06
   1b176:	8d 83       	std	Y+5, r24	; 0x05
   1b178:	ae 01       	movw	r20, r28
   1b17a:	46 5e       	subi	r20, 0xE6	; 230
   1b17c:	5f 4f       	sbci	r21, 0xFF	; 255
   1b17e:	68 8d       	ldd	r22, Y+24	; 0x18
   1b180:	79 8d       	ldd	r23, Y+25	; 0x19
   1b182:	ce 01       	movw	r24, r28
   1b184:	01 96       	adiw	r24, 0x01	; 1
   1b186:	0e 94 d6 d8 	call	0x1b1ac	; 0x1b1ac <vfprintf>
   1b18a:	2f 81       	ldd	r18, Y+7	; 0x07
   1b18c:	38 85       	ldd	r19, Y+8	; 0x08
   1b18e:	02 0f       	add	r16, r18
   1b190:	13 1f       	adc	r17, r19
   1b192:	f8 01       	movw	r30, r16
   1b194:	10 82       	st	Z, r1
   1b196:	2e 96       	adiw	r28, 0x0e	; 14
   1b198:	0f b6       	in	r0, 0x3f	; 63
   1b19a:	f8 94       	cli
   1b19c:	de bf       	out	0x3e, r29	; 62
   1b19e:	0f be       	out	0x3f, r0	; 63
   1b1a0:	cd bf       	out	0x3d, r28	; 61
   1b1a2:	df 91       	pop	r29
   1b1a4:	cf 91       	pop	r28
   1b1a6:	1f 91       	pop	r17
   1b1a8:	0f 91       	pop	r16
   1b1aa:	08 95       	ret

0001b1ac <vfprintf>:
vfprintf():
   1b1ac:	2f 92       	push	r2
   1b1ae:	3f 92       	push	r3
   1b1b0:	4f 92       	push	r4
   1b1b2:	5f 92       	push	r5
   1b1b4:	6f 92       	push	r6
   1b1b6:	7f 92       	push	r7
   1b1b8:	8f 92       	push	r8
   1b1ba:	9f 92       	push	r9
   1b1bc:	af 92       	push	r10
   1b1be:	bf 92       	push	r11
   1b1c0:	cf 92       	push	r12
   1b1c2:	df 92       	push	r13
   1b1c4:	ef 92       	push	r14
   1b1c6:	ff 92       	push	r15
   1b1c8:	0f 93       	push	r16
   1b1ca:	1f 93       	push	r17
   1b1cc:	cf 93       	push	r28
   1b1ce:	df 93       	push	r29
   1b1d0:	00 d0       	rcall	.+0      	; 0x1b1d2 <vfprintf+0x26>
   1b1d2:	00 d0       	rcall	.+0      	; 0x1b1d4 <vfprintf+0x28>
   1b1d4:	00 d0       	rcall	.+0      	; 0x1b1d6 <vfprintf+0x2a>
   1b1d6:	1f 92       	push	r1
   1b1d8:	1f 92       	push	r1
   1b1da:	cd b7       	in	r28, 0x3d	; 61
   1b1dc:	de b7       	in	r29, 0x3e	; 62
   1b1de:	7c 01       	movw	r14, r24
   1b1e0:	3b 01       	movw	r6, r22
   1b1e2:	8a 01       	movw	r16, r20
   1b1e4:	fc 01       	movw	r30, r24
   1b1e6:	17 82       	std	Z+7, r1	; 0x07
   1b1e8:	16 82       	std	Z+6, r1	; 0x06
   1b1ea:	83 81       	ldd	r24, Z+3	; 0x03
   1b1ec:	81 ff       	sbrs	r24, 1
   1b1ee:	dd c1       	rjmp	.+954    	; 0x1b5aa <vfprintf+0x3fe>
   1b1f0:	ce 01       	movw	r24, r28
   1b1f2:	01 96       	adiw	r24, 0x01	; 1
   1b1f4:	5c 01       	movw	r10, r24
   1b1f6:	f7 01       	movw	r30, r14
   1b1f8:	93 81       	ldd	r25, Z+3	; 0x03
   1b1fa:	f3 01       	movw	r30, r6
   1b1fc:	93 fd       	sbrc	r25, 3
   1b1fe:	85 91       	lpm	r24, Z+
   1b200:	93 ff       	sbrs	r25, 3
   1b202:	81 91       	ld	r24, Z+
   1b204:	3f 01       	movw	r6, r30
   1b206:	88 23       	and	r24, r24
   1b208:	09 f4       	brne	.+2      	; 0x1b20c <vfprintf+0x60>
   1b20a:	53 c1       	rjmp	.+678    	; 0x1b4b2 <vfprintf+0x306>
   1b20c:	85 32       	cpi	r24, 0x25	; 37
   1b20e:	39 f4       	brne	.+14     	; 0x1b21e <vfprintf+0x72>
   1b210:	93 fd       	sbrc	r25, 3
   1b212:	85 91       	lpm	r24, Z+
   1b214:	93 ff       	sbrs	r25, 3
   1b216:	81 91       	ld	r24, Z+
   1b218:	3f 01       	movw	r6, r30
   1b21a:	85 32       	cpi	r24, 0x25	; 37
   1b21c:	29 f4       	brne	.+10     	; 0x1b228 <vfprintf+0x7c>
   1b21e:	b7 01       	movw	r22, r14
   1b220:	90 e0       	ldi	r25, 0x00	; 0
   1b222:	0e 94 eb de 	call	0x1bdd6	; 0x1bdd6 <fputc>
   1b226:	e7 cf       	rjmp	.-50     	; 0x1b1f6 <vfprintf+0x4a>
   1b228:	91 2c       	mov	r9, r1
   1b22a:	21 2c       	mov	r2, r1
   1b22c:	31 2c       	mov	r3, r1
   1b22e:	ff e1       	ldi	r31, 0x1F	; 31
   1b230:	f3 15       	cp	r31, r3
   1b232:	38 f0       	brcs	.+14     	; 0x1b242 <vfprintf+0x96>
   1b234:	8b 32       	cpi	r24, 0x2B	; 43
   1b236:	11 f1       	breq	.+68     	; 0x1b27c <vfprintf+0xd0>
   1b238:	90 f4       	brcc	.+36     	; 0x1b25e <vfprintf+0xb2>
   1b23a:	80 32       	cpi	r24, 0x20	; 32
   1b23c:	09 f1       	breq	.+66     	; 0x1b280 <vfprintf+0xd4>
   1b23e:	83 32       	cpi	r24, 0x23	; 35
   1b240:	29 f1       	breq	.+74     	; 0x1b28c <vfprintf+0xe0>
   1b242:	37 fc       	sbrc	r3, 7
   1b244:	3c c0       	rjmp	.+120    	; 0x1b2be <vfprintf+0x112>
   1b246:	20 ed       	ldi	r18, 0xD0	; 208
   1b248:	28 0f       	add	r18, r24
   1b24a:	2a 30       	cpi	r18, 0x0A	; 10
   1b24c:	50 f5       	brcc	.+84     	; 0x1b2a2 <vfprintf+0xf6>
   1b24e:	36 fe       	sbrs	r3, 6
   1b250:	20 c0       	rjmp	.+64     	; 0x1b292 <vfprintf+0xe6>
   1b252:	8a e0       	ldi	r24, 0x0A	; 10
   1b254:	98 9e       	mul	r9, r24
   1b256:	20 0d       	add	r18, r0
   1b258:	11 24       	eor	r1, r1
   1b25a:	92 2e       	mov	r9, r18
   1b25c:	06 c0       	rjmp	.+12     	; 0x1b26a <vfprintf+0xbe>
   1b25e:	8d 32       	cpi	r24, 0x2D	; 45
   1b260:	91 f0       	breq	.+36     	; 0x1b286 <vfprintf+0xda>
   1b262:	80 33       	cpi	r24, 0x30	; 48
   1b264:	71 f7       	brne	.-36     	; 0x1b242 <vfprintf+0x96>
   1b266:	68 94       	set
   1b268:	30 f8       	bld	r3, 0
   1b26a:	f3 01       	movw	r30, r6
   1b26c:	93 fd       	sbrc	r25, 3
   1b26e:	85 91       	lpm	r24, Z+
   1b270:	93 ff       	sbrs	r25, 3
   1b272:	81 91       	ld	r24, Z+
   1b274:	3f 01       	movw	r6, r30
   1b276:	81 11       	cpse	r24, r1
   1b278:	da cf       	rjmp	.-76     	; 0x1b22e <vfprintf+0x82>
   1b27a:	21 c0       	rjmp	.+66     	; 0x1b2be <vfprintf+0x112>
   1b27c:	68 94       	set
   1b27e:	31 f8       	bld	r3, 1
   1b280:	68 94       	set
   1b282:	32 f8       	bld	r3, 2
   1b284:	f2 cf       	rjmp	.-28     	; 0x1b26a <vfprintf+0xbe>
   1b286:	68 94       	set
   1b288:	33 f8       	bld	r3, 3
   1b28a:	ef cf       	rjmp	.-34     	; 0x1b26a <vfprintf+0xbe>
   1b28c:	68 94       	set
   1b28e:	34 f8       	bld	r3, 4
   1b290:	ec cf       	rjmp	.-40     	; 0x1b26a <vfprintf+0xbe>
   1b292:	ea e0       	ldi	r30, 0x0A	; 10
   1b294:	2e 9e       	mul	r2, r30
   1b296:	20 0d       	add	r18, r0
   1b298:	11 24       	eor	r1, r1
   1b29a:	22 2e       	mov	r2, r18
   1b29c:	68 94       	set
   1b29e:	35 f8       	bld	r3, 5
   1b2a0:	e4 cf       	rjmp	.-56     	; 0x1b26a <vfprintf+0xbe>
   1b2a2:	8e 32       	cpi	r24, 0x2E	; 46
   1b2a4:	29 f4       	brne	.+10     	; 0x1b2b0 <vfprintf+0x104>
   1b2a6:	36 fc       	sbrc	r3, 6
   1b2a8:	04 c1       	rjmp	.+520    	; 0x1b4b2 <vfprintf+0x306>
   1b2aa:	68 94       	set
   1b2ac:	36 f8       	bld	r3, 6
   1b2ae:	dd cf       	rjmp	.-70     	; 0x1b26a <vfprintf+0xbe>
   1b2b0:	8c 36       	cpi	r24, 0x6C	; 108
   1b2b2:	19 f4       	brne	.+6      	; 0x1b2ba <vfprintf+0x10e>
   1b2b4:	68 94       	set
   1b2b6:	37 f8       	bld	r3, 7
   1b2b8:	d8 cf       	rjmp	.-80     	; 0x1b26a <vfprintf+0xbe>
   1b2ba:	88 36       	cpi	r24, 0x68	; 104
   1b2bc:	b1 f2       	breq	.-84     	; 0x1b26a <vfprintf+0xbe>
   1b2be:	98 2f       	mov	r25, r24
   1b2c0:	9f 7d       	andi	r25, 0xDF	; 223
   1b2c2:	95 54       	subi	r25, 0x45	; 69
   1b2c4:	93 30       	cpi	r25, 0x03	; 3
   1b2c6:	e0 f0       	brcs	.+56     	; 0x1b300 <vfprintf+0x154>
   1b2c8:	83 36       	cpi	r24, 0x63	; 99
   1b2ca:	a1 f1       	breq	.+104    	; 0x1b334 <vfprintf+0x188>
   1b2cc:	83 37       	cpi	r24, 0x73	; 115
   1b2ce:	c1 f1       	breq	.+112    	; 0x1b340 <vfprintf+0x194>
   1b2d0:	83 35       	cpi	r24, 0x53	; 83
   1b2d2:	09 f0       	breq	.+2      	; 0x1b2d6 <vfprintf+0x12a>
   1b2d4:	63 c0       	rjmp	.+198    	; 0x1b39c <vfprintf+0x1f0>
   1b2d6:	28 01       	movw	r4, r16
   1b2d8:	f2 e0       	ldi	r31, 0x02	; 2
   1b2da:	4f 0e       	add	r4, r31
   1b2dc:	51 1c       	adc	r5, r1
   1b2de:	f8 01       	movw	r30, r16
   1b2e0:	c0 80       	ld	r12, Z
   1b2e2:	d1 80       	ldd	r13, Z+1	; 0x01
   1b2e4:	69 2d       	mov	r22, r9
   1b2e6:	70 e0       	ldi	r23, 0x00	; 0
   1b2e8:	36 fc       	sbrc	r3, 6
   1b2ea:	02 c0       	rjmp	.+4      	; 0x1b2f0 <vfprintf+0x144>
   1b2ec:	6f ef       	ldi	r22, 0xFF	; 255
   1b2ee:	7f ef       	ldi	r23, 0xFF	; 255
   1b2f0:	c6 01       	movw	r24, r12
   1b2f2:	0e 94 be de 	call	0x1bd7c	; 0x1bd7c <strnlen_P>
   1b2f6:	4c 01       	movw	r8, r24
   1b2f8:	68 94       	set
   1b2fa:	37 f8       	bld	r3, 7
   1b2fc:	82 01       	movw	r16, r4
   1b2fe:	0a c0       	rjmp	.+20     	; 0x1b314 <vfprintf+0x168>
   1b300:	0c 5f       	subi	r16, 0xFC	; 252
   1b302:	1f 4f       	sbci	r17, 0xFF	; 255
   1b304:	ff e3       	ldi	r31, 0x3F	; 63
   1b306:	f9 83       	std	Y+1, r31	; 0x01
   1b308:	88 24       	eor	r8, r8
   1b30a:	83 94       	inc	r8
   1b30c:	91 2c       	mov	r9, r1
   1b30e:	65 01       	movw	r12, r10
   1b310:	e8 94       	clt
   1b312:	37 f8       	bld	r3, 7
   1b314:	33 fe       	sbrs	r3, 3
   1b316:	2d c0       	rjmp	.+90     	; 0x1b372 <vfprintf+0x1c6>
   1b318:	52 2c       	mov	r5, r2
   1b31a:	81 14       	cp	r8, r1
   1b31c:	91 04       	cpc	r9, r1
   1b31e:	71 f5       	brne	.+92     	; 0x1b37c <vfprintf+0x1d0>
   1b320:	55 20       	and	r5, r5
   1b322:	09 f4       	brne	.+2      	; 0x1b326 <vfprintf+0x17a>
   1b324:	68 cf       	rjmp	.-304    	; 0x1b1f6 <vfprintf+0x4a>
   1b326:	b7 01       	movw	r22, r14
   1b328:	80 e2       	ldi	r24, 0x20	; 32
   1b32a:	90 e0       	ldi	r25, 0x00	; 0
   1b32c:	0e 94 eb de 	call	0x1bdd6	; 0x1bdd6 <fputc>
   1b330:	5a 94       	dec	r5
   1b332:	f6 cf       	rjmp	.-20     	; 0x1b320 <vfprintf+0x174>
   1b334:	f8 01       	movw	r30, r16
   1b336:	80 81       	ld	r24, Z
   1b338:	89 83       	std	Y+1, r24	; 0x01
   1b33a:	0e 5f       	subi	r16, 0xFE	; 254
   1b33c:	1f 4f       	sbci	r17, 0xFF	; 255
   1b33e:	e4 cf       	rjmp	.-56     	; 0x1b308 <vfprintf+0x15c>
   1b340:	28 01       	movw	r4, r16
   1b342:	f2 e0       	ldi	r31, 0x02	; 2
   1b344:	4f 0e       	add	r4, r31
   1b346:	51 1c       	adc	r5, r1
   1b348:	f8 01       	movw	r30, r16
   1b34a:	c0 80       	ld	r12, Z
   1b34c:	d1 80       	ldd	r13, Z+1	; 0x01
   1b34e:	69 2d       	mov	r22, r9
   1b350:	70 e0       	ldi	r23, 0x00	; 0
   1b352:	36 fc       	sbrc	r3, 6
   1b354:	02 c0       	rjmp	.+4      	; 0x1b35a <vfprintf+0x1ae>
   1b356:	6f ef       	ldi	r22, 0xFF	; 255
   1b358:	7f ef       	ldi	r23, 0xFF	; 255
   1b35a:	c6 01       	movw	r24, r12
   1b35c:	0e 94 d0 de 	call	0x1bda0	; 0x1bda0 <strnlen>
   1b360:	4c 01       	movw	r8, r24
   1b362:	82 01       	movw	r16, r4
   1b364:	d5 cf       	rjmp	.-86     	; 0x1b310 <vfprintf+0x164>
   1b366:	b7 01       	movw	r22, r14
   1b368:	80 e2       	ldi	r24, 0x20	; 32
   1b36a:	90 e0       	ldi	r25, 0x00	; 0
   1b36c:	0e 94 eb de 	call	0x1bdd6	; 0x1bdd6 <fputc>
   1b370:	2a 94       	dec	r2
   1b372:	28 14       	cp	r2, r8
   1b374:	19 04       	cpc	r1, r9
   1b376:	09 f0       	breq	.+2      	; 0x1b37a <vfprintf+0x1ce>
   1b378:	b0 f7       	brcc	.-20     	; 0x1b366 <vfprintf+0x1ba>
   1b37a:	ce cf       	rjmp	.-100    	; 0x1b318 <vfprintf+0x16c>
   1b37c:	f6 01       	movw	r30, r12
   1b37e:	37 fc       	sbrc	r3, 7
   1b380:	85 91       	lpm	r24, Z+
   1b382:	37 fe       	sbrs	r3, 7
   1b384:	81 91       	ld	r24, Z+
   1b386:	6f 01       	movw	r12, r30
   1b388:	b7 01       	movw	r22, r14
   1b38a:	90 e0       	ldi	r25, 0x00	; 0
   1b38c:	0e 94 eb de 	call	0x1bdd6	; 0x1bdd6 <fputc>
   1b390:	51 10       	cpse	r5, r1
   1b392:	5a 94       	dec	r5
   1b394:	f1 e0       	ldi	r31, 0x01	; 1
   1b396:	8f 1a       	sub	r8, r31
   1b398:	91 08       	sbc	r9, r1
   1b39a:	bf cf       	rjmp	.-130    	; 0x1b31a <vfprintf+0x16e>
   1b39c:	84 36       	cpi	r24, 0x64	; 100
   1b39e:	19 f0       	breq	.+6      	; 0x1b3a6 <vfprintf+0x1fa>
   1b3a0:	89 36       	cpi	r24, 0x69	; 105
   1b3a2:	09 f0       	breq	.+2      	; 0x1b3a6 <vfprintf+0x1fa>
   1b3a4:	77 c0       	rjmp	.+238    	; 0x1b494 <vfprintf+0x2e8>
   1b3a6:	f8 01       	movw	r30, r16
   1b3a8:	37 fe       	sbrs	r3, 7
   1b3aa:	6b c0       	rjmp	.+214    	; 0x1b482 <vfprintf+0x2d6>
   1b3ac:	60 81       	ld	r22, Z
   1b3ae:	71 81       	ldd	r23, Z+1	; 0x01
   1b3b0:	82 81       	ldd	r24, Z+2	; 0x02
   1b3b2:	93 81       	ldd	r25, Z+3	; 0x03
   1b3b4:	0c 5f       	subi	r16, 0xFC	; 252
   1b3b6:	1f 4f       	sbci	r17, 0xFF	; 255
   1b3b8:	f3 2d       	mov	r31, r3
   1b3ba:	ff 76       	andi	r31, 0x6F	; 111
   1b3bc:	3f 2e       	mov	r3, r31
   1b3be:	97 ff       	sbrs	r25, 7
   1b3c0:	09 c0       	rjmp	.+18     	; 0x1b3d4 <vfprintf+0x228>
   1b3c2:	90 95       	com	r25
   1b3c4:	80 95       	com	r24
   1b3c6:	70 95       	com	r23
   1b3c8:	61 95       	neg	r22
   1b3ca:	7f 4f       	sbci	r23, 0xFF	; 255
   1b3cc:	8f 4f       	sbci	r24, 0xFF	; 255
   1b3ce:	9f 4f       	sbci	r25, 0xFF	; 255
   1b3d0:	68 94       	set
   1b3d2:	37 f8       	bld	r3, 7
   1b3d4:	2a e0       	ldi	r18, 0x0A	; 10
   1b3d6:	30 e0       	ldi	r19, 0x00	; 0
   1b3d8:	a5 01       	movw	r20, r10
   1b3da:	0e 94 1b df 	call	0x1be36	; 0x1be36 <__ultoa_invert>
   1b3de:	c8 2e       	mov	r12, r24
   1b3e0:	ca 18       	sub	r12, r10
   1b3e2:	8c 2c       	mov	r8, r12
   1b3e4:	43 2c       	mov	r4, r3
   1b3e6:	36 fe       	sbrs	r3, 6
   1b3e8:	0c c0       	rjmp	.+24     	; 0x1b402 <vfprintf+0x256>
   1b3ea:	e8 94       	clt
   1b3ec:	40 f8       	bld	r4, 0
   1b3ee:	c9 14       	cp	r12, r9
   1b3f0:	40 f4       	brcc	.+16     	; 0x1b402 <vfprintf+0x256>
   1b3f2:	34 fe       	sbrs	r3, 4
   1b3f4:	05 c0       	rjmp	.+10     	; 0x1b400 <vfprintf+0x254>
   1b3f6:	32 fc       	sbrc	r3, 2
   1b3f8:	03 c0       	rjmp	.+6      	; 0x1b400 <vfprintf+0x254>
   1b3fa:	f3 2d       	mov	r31, r3
   1b3fc:	fe 7e       	andi	r31, 0xEE	; 238
   1b3fe:	4f 2e       	mov	r4, r31
   1b400:	89 2c       	mov	r8, r9
   1b402:	44 fe       	sbrs	r4, 4
   1b404:	aa c0       	rjmp	.+340    	; 0x1b55a <vfprintf+0x3ae>
   1b406:	fe 01       	movw	r30, r28
   1b408:	ec 0d       	add	r30, r12
   1b40a:	f1 1d       	adc	r31, r1
   1b40c:	80 81       	ld	r24, Z
   1b40e:	80 33       	cpi	r24, 0x30	; 48
   1b410:	09 f0       	breq	.+2      	; 0x1b414 <vfprintf+0x268>
   1b412:	9c c0       	rjmp	.+312    	; 0x1b54c <vfprintf+0x3a0>
   1b414:	24 2d       	mov	r18, r4
   1b416:	29 7e       	andi	r18, 0xE9	; 233
   1b418:	42 2e       	mov	r4, r18
   1b41a:	84 2d       	mov	r24, r4
   1b41c:	88 70       	andi	r24, 0x08	; 8
   1b41e:	58 2e       	mov	r5, r24
   1b420:	43 fc       	sbrc	r4, 3
   1b422:	aa c0       	rjmp	.+340    	; 0x1b578 <vfprintf+0x3cc>
   1b424:	40 fe       	sbrs	r4, 0
   1b426:	a4 c0       	rjmp	.+328    	; 0x1b570 <vfprintf+0x3c4>
   1b428:	9c 2c       	mov	r9, r12
   1b42a:	82 14       	cp	r8, r2
   1b42c:	18 f4       	brcc	.+6      	; 0x1b434 <vfprintf+0x288>
   1b42e:	2c 0c       	add	r2, r12
   1b430:	92 2c       	mov	r9, r2
   1b432:	98 18       	sub	r9, r8
   1b434:	44 fe       	sbrs	r4, 4
   1b436:	a6 c0       	rjmp	.+332    	; 0x1b584 <vfprintf+0x3d8>
   1b438:	b7 01       	movw	r22, r14
   1b43a:	80 e3       	ldi	r24, 0x30	; 48
   1b43c:	90 e0       	ldi	r25, 0x00	; 0
   1b43e:	0e 94 eb de 	call	0x1bdd6	; 0x1bdd6 <fputc>
   1b442:	42 fe       	sbrs	r4, 2
   1b444:	09 c0       	rjmp	.+18     	; 0x1b458 <vfprintf+0x2ac>
   1b446:	88 e7       	ldi	r24, 0x78	; 120
   1b448:	90 e0       	ldi	r25, 0x00	; 0
   1b44a:	41 fe       	sbrs	r4, 1
   1b44c:	02 c0       	rjmp	.+4      	; 0x1b452 <vfprintf+0x2a6>
   1b44e:	88 e5       	ldi	r24, 0x58	; 88
   1b450:	90 e0       	ldi	r25, 0x00	; 0
   1b452:	b7 01       	movw	r22, r14
   1b454:	0e 94 eb de 	call	0x1bdd6	; 0x1bdd6 <fputc>
   1b458:	c9 14       	cp	r12, r9
   1b45a:	08 f4       	brcc	.+2      	; 0x1b45e <vfprintf+0x2b2>
   1b45c:	9f c0       	rjmp	.+318    	; 0x1b59c <vfprintf+0x3f0>
   1b45e:	ca 94       	dec	r12
   1b460:	d1 2c       	mov	r13, r1
   1b462:	9f ef       	ldi	r25, 0xFF	; 255
   1b464:	c9 1a       	sub	r12, r25
   1b466:	d9 0a       	sbc	r13, r25
   1b468:	ca 0c       	add	r12, r10
   1b46a:	db 1c       	adc	r13, r11
   1b46c:	f6 01       	movw	r30, r12
   1b46e:	82 91       	ld	r24, -Z
   1b470:	6f 01       	movw	r12, r30
   1b472:	b7 01       	movw	r22, r14
   1b474:	90 e0       	ldi	r25, 0x00	; 0
   1b476:	0e 94 eb de 	call	0x1bdd6	; 0x1bdd6 <fputc>
   1b47a:	ac 14       	cp	r10, r12
   1b47c:	bd 04       	cpc	r11, r13
   1b47e:	b1 f7       	brne	.-20     	; 0x1b46c <vfprintf+0x2c0>
   1b480:	4f cf       	rjmp	.-354    	; 0x1b320 <vfprintf+0x174>
   1b482:	60 81       	ld	r22, Z
   1b484:	71 81       	ldd	r23, Z+1	; 0x01
   1b486:	07 2e       	mov	r0, r23
   1b488:	00 0c       	add	r0, r0
   1b48a:	88 0b       	sbc	r24, r24
   1b48c:	99 0b       	sbc	r25, r25
   1b48e:	0e 5f       	subi	r16, 0xFE	; 254
   1b490:	1f 4f       	sbci	r17, 0xFF	; 255
   1b492:	92 cf       	rjmp	.-220    	; 0x1b3b8 <vfprintf+0x20c>
   1b494:	d3 2c       	mov	r13, r3
   1b496:	e8 94       	clt
   1b498:	d4 f8       	bld	r13, 4
   1b49a:	2a e0       	ldi	r18, 0x0A	; 10
   1b49c:	30 e0       	ldi	r19, 0x00	; 0
   1b49e:	85 37       	cpi	r24, 0x75	; 117
   1b4a0:	e1 f1       	breq	.+120    	; 0x1b51a <vfprintf+0x36e>
   1b4a2:	23 2d       	mov	r18, r3
   1b4a4:	29 7f       	andi	r18, 0xF9	; 249
   1b4a6:	d2 2e       	mov	r13, r18
   1b4a8:	8f 36       	cpi	r24, 0x6F	; 111
   1b4aa:	a9 f1       	breq	.+106    	; 0x1b516 <vfprintf+0x36a>
   1b4ac:	f0 f4       	brcc	.+60     	; 0x1b4ea <vfprintf+0x33e>
   1b4ae:	88 35       	cpi	r24, 0x58	; 88
   1b4b0:	51 f1       	breq	.+84     	; 0x1b506 <vfprintf+0x35a>
   1b4b2:	f7 01       	movw	r30, r14
   1b4b4:	86 81       	ldd	r24, Z+6	; 0x06
   1b4b6:	97 81       	ldd	r25, Z+7	; 0x07
   1b4b8:	2b 96       	adiw	r28, 0x0b	; 11
   1b4ba:	0f b6       	in	r0, 0x3f	; 63
   1b4bc:	f8 94       	cli
   1b4be:	de bf       	out	0x3e, r29	; 62
   1b4c0:	0f be       	out	0x3f, r0	; 63
   1b4c2:	cd bf       	out	0x3d, r28	; 61
   1b4c4:	df 91       	pop	r29
   1b4c6:	cf 91       	pop	r28
   1b4c8:	1f 91       	pop	r17
   1b4ca:	0f 91       	pop	r16
   1b4cc:	ff 90       	pop	r15
   1b4ce:	ef 90       	pop	r14
   1b4d0:	df 90       	pop	r13
   1b4d2:	cf 90       	pop	r12
   1b4d4:	bf 90       	pop	r11
   1b4d6:	af 90       	pop	r10
   1b4d8:	9f 90       	pop	r9
   1b4da:	8f 90       	pop	r8
   1b4dc:	7f 90       	pop	r7
   1b4de:	6f 90       	pop	r6
   1b4e0:	5f 90       	pop	r5
   1b4e2:	4f 90       	pop	r4
   1b4e4:	3f 90       	pop	r3
   1b4e6:	2f 90       	pop	r2
   1b4e8:	08 95       	ret
   1b4ea:	80 37       	cpi	r24, 0x70	; 112
   1b4ec:	49 f0       	breq	.+18     	; 0x1b500 <vfprintf+0x354>
   1b4ee:	88 37       	cpi	r24, 0x78	; 120
   1b4f0:	01 f7       	brne	.-64     	; 0x1b4b2 <vfprintf+0x306>
   1b4f2:	d4 fe       	sbrs	r13, 4
   1b4f4:	02 c0       	rjmp	.+4      	; 0x1b4fa <vfprintf+0x34e>
   1b4f6:	68 94       	set
   1b4f8:	d2 f8       	bld	r13, 2
   1b4fa:	20 e1       	ldi	r18, 0x10	; 16
   1b4fc:	30 e0       	ldi	r19, 0x00	; 0
   1b4fe:	0d c0       	rjmp	.+26     	; 0x1b51a <vfprintf+0x36e>
   1b500:	68 94       	set
   1b502:	d4 f8       	bld	r13, 4
   1b504:	f6 cf       	rjmp	.-20     	; 0x1b4f2 <vfprintf+0x346>
   1b506:	34 fe       	sbrs	r3, 4
   1b508:	03 c0       	rjmp	.+6      	; 0x1b510 <vfprintf+0x364>
   1b50a:	82 2f       	mov	r24, r18
   1b50c:	86 60       	ori	r24, 0x06	; 6
   1b50e:	d8 2e       	mov	r13, r24
   1b510:	20 e1       	ldi	r18, 0x10	; 16
   1b512:	32 e0       	ldi	r19, 0x02	; 2
   1b514:	02 c0       	rjmp	.+4      	; 0x1b51a <vfprintf+0x36e>
   1b516:	28 e0       	ldi	r18, 0x08	; 8
   1b518:	30 e0       	ldi	r19, 0x00	; 0
   1b51a:	f8 01       	movw	r30, r16
   1b51c:	d7 fe       	sbrs	r13, 7
   1b51e:	0f c0       	rjmp	.+30     	; 0x1b53e <vfprintf+0x392>
   1b520:	60 81       	ld	r22, Z
   1b522:	71 81       	ldd	r23, Z+1	; 0x01
   1b524:	82 81       	ldd	r24, Z+2	; 0x02
   1b526:	93 81       	ldd	r25, Z+3	; 0x03
   1b528:	0c 5f       	subi	r16, 0xFC	; 252
   1b52a:	1f 4f       	sbci	r17, 0xFF	; 255
   1b52c:	a5 01       	movw	r20, r10
   1b52e:	0e 94 1b df 	call	0x1be36	; 0x1be36 <__ultoa_invert>
   1b532:	c8 2e       	mov	r12, r24
   1b534:	ca 18       	sub	r12, r10
   1b536:	3d 2c       	mov	r3, r13
   1b538:	e8 94       	clt
   1b53a:	37 f8       	bld	r3, 7
   1b53c:	52 cf       	rjmp	.-348    	; 0x1b3e2 <vfprintf+0x236>
   1b53e:	60 81       	ld	r22, Z
   1b540:	71 81       	ldd	r23, Z+1	; 0x01
   1b542:	90 e0       	ldi	r25, 0x00	; 0
   1b544:	80 e0       	ldi	r24, 0x00	; 0
   1b546:	0e 5f       	subi	r16, 0xFE	; 254
   1b548:	1f 4f       	sbci	r17, 0xFF	; 255
   1b54a:	f0 cf       	rjmp	.-32     	; 0x1b52c <vfprintf+0x380>
   1b54c:	42 fc       	sbrc	r4, 2
   1b54e:	02 c0       	rjmp	.+4      	; 0x1b554 <vfprintf+0x3a8>
   1b550:	83 94       	inc	r8
   1b552:	63 cf       	rjmp	.-314    	; 0x1b41a <vfprintf+0x26e>
   1b554:	83 94       	inc	r8
   1b556:	83 94       	inc	r8
   1b558:	60 cf       	rjmp	.-320    	; 0x1b41a <vfprintf+0x26e>
   1b55a:	84 2d       	mov	r24, r4
   1b55c:	86 78       	andi	r24, 0x86	; 134
   1b55e:	09 f4       	brne	.+2      	; 0x1b562 <vfprintf+0x3b6>
   1b560:	5c cf       	rjmp	.-328    	; 0x1b41a <vfprintf+0x26e>
   1b562:	f6 cf       	rjmp	.-20     	; 0x1b550 <vfprintf+0x3a4>
   1b564:	b7 01       	movw	r22, r14
   1b566:	80 e2       	ldi	r24, 0x20	; 32
   1b568:	90 e0       	ldi	r25, 0x00	; 0
   1b56a:	0e 94 eb de 	call	0x1bdd6	; 0x1bdd6 <fputc>
   1b56e:	83 94       	inc	r8
   1b570:	82 14       	cp	r8, r2
   1b572:	c0 f3       	brcs	.-16     	; 0x1b564 <vfprintf+0x3b8>
   1b574:	51 2c       	mov	r5, r1
   1b576:	5e cf       	rjmp	.-324    	; 0x1b434 <vfprintf+0x288>
   1b578:	52 2c       	mov	r5, r2
   1b57a:	58 18       	sub	r5, r8
   1b57c:	82 14       	cp	r8, r2
   1b57e:	08 f4       	brcc	.+2      	; 0x1b582 <vfprintf+0x3d6>
   1b580:	59 cf       	rjmp	.-334    	; 0x1b434 <vfprintf+0x288>
   1b582:	f8 cf       	rjmp	.-16     	; 0x1b574 <vfprintf+0x3c8>
   1b584:	84 2d       	mov	r24, r4
   1b586:	86 78       	andi	r24, 0x86	; 134
   1b588:	09 f4       	brne	.+2      	; 0x1b58c <vfprintf+0x3e0>
   1b58a:	66 cf       	rjmp	.-308    	; 0x1b458 <vfprintf+0x2ac>
   1b58c:	8b e2       	ldi	r24, 0x2B	; 43
   1b58e:	41 fe       	sbrs	r4, 1
   1b590:	80 e2       	ldi	r24, 0x20	; 32
   1b592:	47 fc       	sbrc	r4, 7
   1b594:	8d e2       	ldi	r24, 0x2D	; 45
   1b596:	b7 01       	movw	r22, r14
   1b598:	90 e0       	ldi	r25, 0x00	; 0
   1b59a:	5c cf       	rjmp	.-328    	; 0x1b454 <vfprintf+0x2a8>
   1b59c:	b7 01       	movw	r22, r14
   1b59e:	80 e3       	ldi	r24, 0x30	; 48
   1b5a0:	90 e0       	ldi	r25, 0x00	; 0
   1b5a2:	0e 94 eb de 	call	0x1bdd6	; 0x1bdd6 <fputc>
   1b5a6:	9a 94       	dec	r9
   1b5a8:	57 cf       	rjmp	.-338    	; 0x1b458 <vfprintf+0x2ac>
   1b5aa:	8f ef       	ldi	r24, 0xFF	; 255
   1b5ac:	9f ef       	ldi	r25, 0xFF	; 255
   1b5ae:	84 cf       	rjmp	.-248    	; 0x1b4b8 <vfprintf+0x30c>

0001b5b0 <calloc>:
calloc():
   1b5b0:	0f 93       	push	r16
   1b5b2:	1f 93       	push	r17
   1b5b4:	cf 93       	push	r28
   1b5b6:	df 93       	push	r29
   1b5b8:	86 9f       	mul	r24, r22
   1b5ba:	80 01       	movw	r16, r0
   1b5bc:	87 9f       	mul	r24, r23
   1b5be:	10 0d       	add	r17, r0
   1b5c0:	96 9f       	mul	r25, r22
   1b5c2:	10 0d       	add	r17, r0
   1b5c4:	11 24       	eor	r1, r1
   1b5c6:	c8 01       	movw	r24, r16
   1b5c8:	0e 94 fb d3 	call	0x1a7f6	; 0x1a7f6 <malloc>
   1b5cc:	ec 01       	movw	r28, r24
   1b5ce:	00 97       	sbiw	r24, 0x00	; 0
   1b5d0:	29 f0       	breq	.+10     	; 0x1b5dc <calloc+0x2c>
   1b5d2:	a8 01       	movw	r20, r16
   1b5d4:	70 e0       	ldi	r23, 0x00	; 0
   1b5d6:	60 e0       	ldi	r22, 0x00	; 0
   1b5d8:	0e 94 c9 de 	call	0x1bd92	; 0x1bd92 <memset>
   1b5dc:	ce 01       	movw	r24, r28
   1b5de:	df 91       	pop	r29
   1b5e0:	cf 91       	pop	r28
   1b5e2:	1f 91       	pop	r17
   1b5e4:	0f 91       	pop	r16
   1b5e6:	08 95       	ret

0001b5e8 <dtoa_prf>:
dtoa_prf():
   1b5e8:	8f 92       	push	r8
   1b5ea:	9f 92       	push	r9
   1b5ec:	af 92       	push	r10
   1b5ee:	bf 92       	push	r11
   1b5f0:	cf 92       	push	r12
   1b5f2:	df 92       	push	r13
   1b5f4:	ef 92       	push	r14
   1b5f6:	ff 92       	push	r15
   1b5f8:	0f 93       	push	r16
   1b5fa:	1f 93       	push	r17
   1b5fc:	cf 93       	push	r28
   1b5fe:	df 93       	push	r29
   1b600:	00 d0       	rcall	.+0      	; 0x1b602 <dtoa_prf+0x1a>
   1b602:	00 d0       	rcall	.+0      	; 0x1b604 <dtoa_prf+0x1c>
   1b604:	00 d0       	rcall	.+0      	; 0x1b606 <dtoa_prf+0x1e>
   1b606:	cd b7       	in	r28, 0x3d	; 61
   1b608:	de b7       	in	r29, 0x3e	; 62
   1b60a:	6a 01       	movw	r12, r20
   1b60c:	f2 2e       	mov	r15, r18
   1b60e:	b0 2e       	mov	r11, r16
   1b610:	10 2f       	mov	r17, r16
   1b612:	fb e3       	ldi	r31, 0x3B	; 59
   1b614:	af 2e       	mov	r10, r31
   1b616:	a0 16       	cp	r10, r16
   1b618:	08 f4       	brcc	.+2      	; 0x1b61c <dtoa_prf+0x34>
   1b61a:	1b e3       	ldi	r17, 0x3B	; 59
   1b61c:	1f 5f       	subi	r17, 0xFF	; 255
   1b61e:	01 2f       	mov	r16, r17
   1b620:	27 e0       	ldi	r18, 0x07	; 7
   1b622:	ae 01       	movw	r20, r28
   1b624:	4f 5f       	subi	r20, 0xFF	; 255
   1b626:	5f 4f       	sbci	r21, 0xFF	; 255
   1b628:	0e 94 cb dd 	call	0x1bb96	; 0x1bb96 <__ftoa_engine>
   1b62c:	bc 01       	movw	r22, r24
   1b62e:	89 81       	ldd	r24, Y+1	; 0x01
   1b630:	98 2f       	mov	r25, r24
   1b632:	99 70       	andi	r25, 0x09	; 9
   1b634:	91 30       	cpi	r25, 0x01	; 1
   1b636:	09 f4       	brne	.+2      	; 0x1b63a <dtoa_prf+0x52>
   1b638:	4e c0       	rjmp	.+156    	; 0x1b6d6 <dtoa_prf+0xee>
   1b63a:	9b e2       	ldi	r25, 0x2B	; 43
   1b63c:	e1 fc       	sbrc	r14, 1
   1b63e:	04 c0       	rjmp	.+8      	; 0x1b648 <dtoa_prf+0x60>
   1b640:	9e 2d       	mov	r25, r14
   1b642:	91 70       	andi	r25, 0x01	; 1
   1b644:	e0 fc       	sbrc	r14, 0
   1b646:	49 c0       	rjmp	.+146    	; 0x1b6da <dtoa_prf+0xf2>
   1b648:	5e 2d       	mov	r21, r14
   1b64a:	50 71       	andi	r21, 0x10	; 16
   1b64c:	e8 2f       	mov	r30, r24
   1b64e:	e8 70       	andi	r30, 0x08	; 8
   1b650:	83 ff       	sbrs	r24, 3
   1b652:	55 c0       	rjmp	.+170    	; 0x1b6fe <dtoa_prf+0x116>
   1b654:	84 e0       	ldi	r24, 0x04	; 4
   1b656:	91 11       	cpse	r25, r1
   1b658:	01 c0       	rjmp	.+2      	; 0x1b65c <dtoa_prf+0x74>
   1b65a:	83 e0       	ldi	r24, 0x03	; 3
   1b65c:	ef 2d       	mov	r30, r15
   1b65e:	e8 1b       	sub	r30, r24
   1b660:	8f 15       	cp	r24, r15
   1b662:	08 f0       	brcs	.+2      	; 0x1b666 <dtoa_prf+0x7e>
   1b664:	e0 e0       	ldi	r30, 0x00	; 0
   1b666:	d6 01       	movw	r26, r12
   1b668:	8e 2f       	mov	r24, r30
   1b66a:	20 e2       	ldi	r18, 0x20	; 32
   1b66c:	55 23       	and	r21, r21
   1b66e:	c9 f1       	breq	.+114    	; 0x1b6e2 <dtoa_prf+0xfa>
   1b670:	99 23       	and	r25, r25
   1b672:	29 f0       	breq	.+10     	; 0x1b67e <dtoa_prf+0x96>
   1b674:	d6 01       	movw	r26, r12
   1b676:	9c 93       	st	X, r25
   1b678:	c6 01       	movw	r24, r12
   1b67a:	01 96       	adiw	r24, 0x01	; 1
   1b67c:	6c 01       	movw	r12, r24
   1b67e:	96 01       	movw	r18, r12
   1b680:	2d 5f       	subi	r18, 0xFD	; 253
   1b682:	3f 4f       	sbci	r19, 0xFF	; 255
   1b684:	e2 fe       	sbrs	r14, 2
   1b686:	33 c0       	rjmp	.+102    	; 0x1b6ee <dtoa_prf+0x106>
   1b688:	8e e4       	ldi	r24, 0x4E	; 78
   1b68a:	d6 01       	movw	r26, r12
   1b68c:	8c 93       	st	X, r24
   1b68e:	91 e4       	ldi	r25, 0x41	; 65
   1b690:	11 96       	adiw	r26, 0x01	; 1
   1b692:	9c 93       	st	X, r25
   1b694:	11 97       	sbiw	r26, 0x01	; 1
   1b696:	12 96       	adiw	r26, 0x02	; 2
   1b698:	8c 93       	st	X, r24
   1b69a:	d9 01       	movw	r26, r18
   1b69c:	8e 2f       	mov	r24, r30
   1b69e:	90 e2       	ldi	r25, 0x20	; 32
   1b6a0:	81 11       	cpse	r24, r1
   1b6a2:	2a c0       	rjmp	.+84     	; 0x1b6f8 <dtoa_prf+0x110>
   1b6a4:	e2 0f       	add	r30, r18
   1b6a6:	f3 2f       	mov	r31, r19
   1b6a8:	f1 1d       	adc	r31, r1
   1b6aa:	10 82       	st	Z, r1
   1b6ac:	8e ef       	ldi	r24, 0xFE	; 254
   1b6ae:	9f ef       	ldi	r25, 0xFF	; 255
   1b6b0:	29 96       	adiw	r28, 0x09	; 9
   1b6b2:	0f b6       	in	r0, 0x3f	; 63
   1b6b4:	f8 94       	cli
   1b6b6:	de bf       	out	0x3e, r29	; 62
   1b6b8:	0f be       	out	0x3f, r0	; 63
   1b6ba:	cd bf       	out	0x3d, r28	; 61
   1b6bc:	df 91       	pop	r29
   1b6be:	cf 91       	pop	r28
   1b6c0:	1f 91       	pop	r17
   1b6c2:	0f 91       	pop	r16
   1b6c4:	ff 90       	pop	r15
   1b6c6:	ef 90       	pop	r14
   1b6c8:	df 90       	pop	r13
   1b6ca:	cf 90       	pop	r12
   1b6cc:	bf 90       	pop	r11
   1b6ce:	af 90       	pop	r10
   1b6d0:	9f 90       	pop	r9
   1b6d2:	8f 90       	pop	r8
   1b6d4:	08 95       	ret
   1b6d6:	9d e2       	ldi	r25, 0x2D	; 45
   1b6d8:	b7 cf       	rjmp	.-146    	; 0x1b648 <dtoa_prf+0x60>
   1b6da:	90 e2       	ldi	r25, 0x20	; 32
   1b6dc:	b5 cf       	rjmp	.-150    	; 0x1b648 <dtoa_prf+0x60>
   1b6de:	2d 93       	st	X+, r18
   1b6e0:	81 50       	subi	r24, 0x01	; 1
   1b6e2:	81 11       	cpse	r24, r1
   1b6e4:	fc cf       	rjmp	.-8      	; 0x1b6de <dtoa_prf+0xf6>
   1b6e6:	ce 0e       	add	r12, r30
   1b6e8:	d1 1c       	adc	r13, r1
   1b6ea:	e0 e0       	ldi	r30, 0x00	; 0
   1b6ec:	c1 cf       	rjmp	.-126    	; 0x1b670 <dtoa_prf+0x88>
   1b6ee:	8e e6       	ldi	r24, 0x6E	; 110
   1b6f0:	d6 01       	movw	r26, r12
   1b6f2:	8c 93       	st	X, r24
   1b6f4:	91 e6       	ldi	r25, 0x61	; 97
   1b6f6:	cc cf       	rjmp	.-104    	; 0x1b690 <dtoa_prf+0xa8>
   1b6f8:	9d 93       	st	X+, r25
   1b6fa:	81 50       	subi	r24, 0x01	; 1
   1b6fc:	d1 cf       	rjmp	.-94     	; 0x1b6a0 <dtoa_prf+0xb8>
   1b6fe:	48 2f       	mov	r20, r24
   1b700:	44 70       	andi	r20, 0x04	; 4
   1b702:	82 ff       	sbrs	r24, 2
   1b704:	3d c0       	rjmp	.+122    	; 0x1b780 <dtoa_prf+0x198>
   1b706:	84 e0       	ldi	r24, 0x04	; 4
   1b708:	91 11       	cpse	r25, r1
   1b70a:	01 c0       	rjmp	.+2      	; 0x1b70e <dtoa_prf+0x126>
   1b70c:	83 e0       	ldi	r24, 0x03	; 3
   1b70e:	8f 15       	cp	r24, r15
   1b710:	10 f4       	brcc	.+4      	; 0x1b716 <dtoa_prf+0x12e>
   1b712:	ef 2d       	mov	r30, r15
   1b714:	e8 1b       	sub	r30, r24
   1b716:	d6 01       	movw	r26, r12
   1b718:	8e 2f       	mov	r24, r30
   1b71a:	20 e2       	ldi	r18, 0x20	; 32
   1b71c:	55 23       	and	r21, r21
   1b71e:	09 f1       	breq	.+66     	; 0x1b762 <dtoa_prf+0x17a>
   1b720:	99 23       	and	r25, r25
   1b722:	29 f0       	breq	.+10     	; 0x1b72e <dtoa_prf+0x146>
   1b724:	d6 01       	movw	r26, r12
   1b726:	9c 93       	st	X, r25
   1b728:	c6 01       	movw	r24, r12
   1b72a:	01 96       	adiw	r24, 0x01	; 1
   1b72c:	6c 01       	movw	r12, r24
   1b72e:	96 01       	movw	r18, r12
   1b730:	2d 5f       	subi	r18, 0xFD	; 253
   1b732:	3f 4f       	sbci	r19, 0xFF	; 255
   1b734:	e2 fe       	sbrs	r14, 2
   1b736:	1b c0       	rjmp	.+54     	; 0x1b76e <dtoa_prf+0x186>
   1b738:	89 e4       	ldi	r24, 0x49	; 73
   1b73a:	d6 01       	movw	r26, r12
   1b73c:	8c 93       	st	X, r24
   1b73e:	8e e4       	ldi	r24, 0x4E	; 78
   1b740:	11 96       	adiw	r26, 0x01	; 1
   1b742:	8c 93       	st	X, r24
   1b744:	11 97       	sbiw	r26, 0x01	; 1
   1b746:	86 e4       	ldi	r24, 0x46	; 70
   1b748:	12 96       	adiw	r26, 0x02	; 2
   1b74a:	8c 93       	st	X, r24
   1b74c:	d9 01       	movw	r26, r18
   1b74e:	8e 2f       	mov	r24, r30
   1b750:	90 e2       	ldi	r25, 0x20	; 32
   1b752:	88 23       	and	r24, r24
   1b754:	09 f4       	brne	.+2      	; 0x1b758 <dtoa_prf+0x170>
   1b756:	a6 cf       	rjmp	.-180    	; 0x1b6a4 <dtoa_prf+0xbc>
   1b758:	9d 93       	st	X+, r25
   1b75a:	81 50       	subi	r24, 0x01	; 1
   1b75c:	fa cf       	rjmp	.-12     	; 0x1b752 <dtoa_prf+0x16a>
   1b75e:	2d 93       	st	X+, r18
   1b760:	81 50       	subi	r24, 0x01	; 1
   1b762:	81 11       	cpse	r24, r1
   1b764:	fc cf       	rjmp	.-8      	; 0x1b75e <dtoa_prf+0x176>
   1b766:	ce 0e       	add	r12, r30
   1b768:	d1 1c       	adc	r13, r1
   1b76a:	e0 e0       	ldi	r30, 0x00	; 0
   1b76c:	d9 cf       	rjmp	.-78     	; 0x1b720 <dtoa_prf+0x138>
   1b76e:	89 e6       	ldi	r24, 0x69	; 105
   1b770:	d6 01       	movw	r26, r12
   1b772:	8c 93       	st	X, r24
   1b774:	8e e6       	ldi	r24, 0x6E	; 110
   1b776:	11 96       	adiw	r26, 0x01	; 1
   1b778:	8c 93       	st	X, r24
   1b77a:	11 97       	sbiw	r26, 0x01	; 1
   1b77c:	86 e6       	ldi	r24, 0x66	; 102
   1b77e:	e4 cf       	rjmp	.-56     	; 0x1b748 <dtoa_prf+0x160>
   1b780:	9b 01       	movw	r18, r22
   1b782:	77 ff       	sbrs	r23, 7
   1b784:	02 c0       	rjmp	.+4      	; 0x1b78a <dtoa_prf+0x1a2>
   1b786:	30 e0       	ldi	r19, 0x00	; 0
   1b788:	20 e0       	ldi	r18, 0x00	; 0
   1b78a:	a1 e0       	ldi	r26, 0x01	; 1
   1b78c:	b0 e0       	ldi	r27, 0x00	; 0
   1b78e:	91 11       	cpse	r25, r1
   1b790:	02 c0       	rjmp	.+4      	; 0x1b796 <dtoa_prf+0x1ae>
   1b792:	b0 e0       	ldi	r27, 0x00	; 0
   1b794:	a0 e0       	ldi	r26, 0x00	; 0
   1b796:	f9 01       	movw	r30, r18
   1b798:	31 96       	adiw	r30, 0x01	; 1
   1b79a:	ae 0f       	add	r26, r30
   1b79c:	bf 1f       	adc	r27, r31
   1b79e:	8b 2c       	mov	r8, r11
   1b7a0:	91 2c       	mov	r9, r1
   1b7a2:	bb 20       	and	r11, r11
   1b7a4:	09 f4       	brne	.+2      	; 0x1b7a8 <dtoa_prf+0x1c0>
   1b7a6:	61 c0       	rjmp	.+194    	; 0x1b86a <dtoa_prf+0x282>
   1b7a8:	54 01       	movw	r10, r8
   1b7aa:	ef ef       	ldi	r30, 0xFF	; 255
   1b7ac:	ae 1a       	sub	r10, r30
   1b7ae:	be 0a       	sbc	r11, r30
   1b7b0:	aa 0d       	add	r26, r10
   1b7b2:	bb 1d       	adc	r27, r11
   1b7b4:	fa 16       	cp	r15, r26
   1b7b6:	1b 06       	cpc	r1, r27
   1b7b8:	19 f0       	breq	.+6      	; 0x1b7c0 <dtoa_prf+0x1d8>
   1b7ba:	14 f0       	brlt	.+4      	; 0x1b7c0 <dtoa_prf+0x1d8>
   1b7bc:	4f 2d       	mov	r20, r15
   1b7be:	4a 1b       	sub	r20, r26
   1b7c0:	51 11       	cpse	r21, r1
   1b7c2:	88 c0       	rjmp	.+272    	; 0x1b8d4 <dtoa_prf+0x2ec>
   1b7c4:	e3 fc       	sbrc	r14, 3
   1b7c6:	59 c0       	rjmp	.+178    	; 0x1b87a <dtoa_prf+0x292>
   1b7c8:	76 01       	movw	r14, r12
   1b7ca:	a4 2f       	mov	r26, r20
   1b7cc:	b0 e2       	ldi	r27, 0x20	; 32
   1b7ce:	a1 11       	cpse	r26, r1
   1b7d0:	4f c0       	rjmp	.+158    	; 0x1b870 <dtoa_prf+0x288>
   1b7d2:	c4 0e       	add	r12, r20
   1b7d4:	d1 1c       	adc	r13, r1
   1b7d6:	99 23       	and	r25, r25
   1b7d8:	09 f4       	brne	.+2      	; 0x1b7dc <dtoa_prf+0x1f4>
   1b7da:	5b c0       	rjmp	.+182    	; 0x1b892 <dtoa_prf+0x2aa>
   1b7dc:	40 e0       	ldi	r20, 0x00	; 0
   1b7de:	d6 01       	movw	r26, r12
   1b7e0:	11 96       	adiw	r26, 0x01	; 1
   1b7e2:	f6 01       	movw	r30, r12
   1b7e4:	90 83       	st	Z, r25
   1b7e6:	6d 01       	movw	r12, r26
   1b7e8:	55 23       	and	r21, r21
   1b7ea:	09 f4       	brne	.+2      	; 0x1b7ee <dtoa_prf+0x206>
   1b7ec:	48 c0       	rjmp	.+144    	; 0x1b87e <dtoa_prf+0x296>
   1b7ee:	01 2f       	mov	r16, r17
   1b7f0:	06 0f       	add	r16, r22
   1b7f2:	9a 81       	ldd	r25, Y+2	; 0x02
   1b7f4:	58 2f       	mov	r21, r24
   1b7f6:	50 71       	andi	r21, 0x10	; 16
   1b7f8:	84 ff       	sbrs	r24, 4
   1b7fa:	03 c0       	rjmp	.+6      	; 0x1b802 <dtoa_prf+0x21a>
   1b7fc:	91 33       	cpi	r25, 0x31	; 49
   1b7fe:	09 f4       	brne	.+2      	; 0x1b802 <dtoa_prf+0x21a>
   1b800:	01 50       	subi	r16, 0x01	; 1
   1b802:	10 16       	cp	r1, r16
   1b804:	0c f0       	brlt	.+2      	; 0x1b808 <dtoa_prf+0x220>
   1b806:	47 c0       	rjmp	.+142    	; 0x1b896 <dtoa_prf+0x2ae>
   1b808:	09 30       	cpi	r16, 0x09	; 9
   1b80a:	08 f0       	brcs	.+2      	; 0x1b80e <dtoa_prf+0x226>
   1b80c:	08 e0       	ldi	r16, 0x08	; 8
   1b80e:	ee e2       	ldi	r30, 0x2E	; 46
   1b810:	fe 2e       	mov	r15, r30
   1b812:	5b 01       	movw	r10, r22
   1b814:	a0 1a       	sub	r10, r16
   1b816:	b1 08       	sbc	r11, r1
   1b818:	85 01       	movw	r16, r10
   1b81a:	91 94       	neg	r9
   1b81c:	81 94       	neg	r8
   1b81e:	91 08       	sbc	r9, r1
   1b820:	2f 3f       	cpi	r18, 0xFF	; 255
   1b822:	32 07       	cpc	r19, r18
   1b824:	29 f4       	brne	.+10     	; 0x1b830 <dtoa_prf+0x248>
   1b826:	d6 01       	movw	r26, r12
   1b828:	fc 92       	st	X, r15
   1b82a:	f6 01       	movw	r30, r12
   1b82c:	31 96       	adiw	r30, 0x01	; 1
   1b82e:	6f 01       	movw	r12, r30
   1b830:	62 17       	cp	r22, r18
   1b832:	73 07       	cpc	r23, r19
   1b834:	94 f1       	brlt	.+100    	; 0x1b89a <dtoa_prf+0x2b2>
   1b836:	02 17       	cp	r16, r18
   1b838:	13 07       	cpc	r17, r19
   1b83a:	7c f5       	brge	.+94     	; 0x1b89a <dtoa_prf+0x2b2>
   1b83c:	db 01       	movw	r26, r22
   1b83e:	a2 1b       	sub	r26, r18
   1b840:	b3 0b       	sbc	r27, r19
   1b842:	aa 24       	eor	r10, r10
   1b844:	a3 94       	inc	r10
   1b846:	b1 2c       	mov	r11, r1
   1b848:	ac 0e       	add	r10, r28
   1b84a:	bd 1e       	adc	r11, r29
   1b84c:	aa 0d       	add	r26, r10
   1b84e:	bb 1d       	adc	r27, r11
   1b850:	11 96       	adiw	r26, 0x01	; 1
   1b852:	8c 91       	ld	r24, X
   1b854:	21 50       	subi	r18, 0x01	; 1
   1b856:	31 09       	sbc	r19, r1
   1b858:	d6 01       	movw	r26, r12
   1b85a:	11 96       	adiw	r26, 0x01	; 1
   1b85c:	28 15       	cp	r18, r8
   1b85e:	39 05       	cpc	r19, r9
   1b860:	f4 f0       	brlt	.+60     	; 0x1b89e <dtoa_prf+0x2b6>
   1b862:	f6 01       	movw	r30, r12
   1b864:	80 83       	st	Z, r24
   1b866:	6d 01       	movw	r12, r26
   1b868:	db cf       	rjmp	.-74     	; 0x1b820 <dtoa_prf+0x238>
   1b86a:	b1 2c       	mov	r11, r1
   1b86c:	a1 2c       	mov	r10, r1
   1b86e:	a0 cf       	rjmp	.-192    	; 0x1b7b0 <dtoa_prf+0x1c8>
   1b870:	f7 01       	movw	r30, r14
   1b872:	b1 93       	st	Z+, r27
   1b874:	7f 01       	movw	r14, r30
   1b876:	a1 50       	subi	r26, 0x01	; 1
   1b878:	aa cf       	rjmp	.-172    	; 0x1b7ce <dtoa_prf+0x1e6>
   1b87a:	91 11       	cpse	r25, r1
   1b87c:	b0 cf       	rjmp	.-160    	; 0x1b7de <dtoa_prf+0x1f6>
   1b87e:	d6 01       	movw	r26, r12
   1b880:	94 2f       	mov	r25, r20
   1b882:	50 e3       	ldi	r21, 0x30	; 48
   1b884:	02 c0       	rjmp	.+4      	; 0x1b88a <dtoa_prf+0x2a2>
   1b886:	5d 93       	st	X+, r21
   1b888:	91 50       	subi	r25, 0x01	; 1
   1b88a:	91 11       	cpse	r25, r1
   1b88c:	fc cf       	rjmp	.-8      	; 0x1b886 <dtoa_prf+0x29e>
   1b88e:	c4 0e       	add	r12, r20
   1b890:	d1 1c       	adc	r13, r1
   1b892:	40 e0       	ldi	r20, 0x00	; 0
   1b894:	ac cf       	rjmp	.-168    	; 0x1b7ee <dtoa_prf+0x206>
   1b896:	01 e0       	ldi	r16, 0x01	; 1
   1b898:	ba cf       	rjmp	.-140    	; 0x1b80e <dtoa_prf+0x226>
   1b89a:	80 e3       	ldi	r24, 0x30	; 48
   1b89c:	db cf       	rjmp	.-74     	; 0x1b854 <dtoa_prf+0x26c>
   1b89e:	62 17       	cp	r22, r18
   1b8a0:	73 07       	cpc	r23, r19
   1b8a2:	31 f4       	brne	.+12     	; 0x1b8b0 <dtoa_prf+0x2c8>
   1b8a4:	96 33       	cpi	r25, 0x36	; 54
   1b8a6:	88 f4       	brcc	.+34     	; 0x1b8ca <dtoa_prf+0x2e2>
   1b8a8:	95 33       	cpi	r25, 0x35	; 53
   1b8aa:	11 f4       	brne	.+4      	; 0x1b8b0 <dtoa_prf+0x2c8>
   1b8ac:	55 23       	and	r21, r21
   1b8ae:	69 f0       	breq	.+26     	; 0x1b8ca <dtoa_prf+0x2e2>
   1b8b0:	f6 01       	movw	r30, r12
   1b8b2:	80 83       	st	Z, r24
   1b8b4:	fd 01       	movw	r30, r26
   1b8b6:	84 2f       	mov	r24, r20
   1b8b8:	90 e2       	ldi	r25, 0x20	; 32
   1b8ba:	81 11       	cpse	r24, r1
   1b8bc:	08 c0       	rjmp	.+16     	; 0x1b8ce <dtoa_prf+0x2e6>
   1b8be:	a4 0f       	add	r26, r20
   1b8c0:	b1 1d       	adc	r27, r1
   1b8c2:	1c 92       	st	X, r1
   1b8c4:	90 e0       	ldi	r25, 0x00	; 0
   1b8c6:	80 e0       	ldi	r24, 0x00	; 0
   1b8c8:	f3 ce       	rjmp	.-538    	; 0x1b6b0 <dtoa_prf+0xc8>
   1b8ca:	81 e3       	ldi	r24, 0x31	; 49
   1b8cc:	f1 cf       	rjmp	.-30     	; 0x1b8b0 <dtoa_prf+0x2c8>
   1b8ce:	91 93       	st	Z+, r25
   1b8d0:	81 50       	subi	r24, 0x01	; 1
   1b8d2:	f3 cf       	rjmp	.-26     	; 0x1b8ba <dtoa_prf+0x2d2>
   1b8d4:	91 11       	cpse	r25, r1
   1b8d6:	83 cf       	rjmp	.-250    	; 0x1b7de <dtoa_prf+0x1f6>
   1b8d8:	8a cf       	rjmp	.-236    	; 0x1b7ee <dtoa_prf+0x206>

0001b8da <strtod>:
strtod():
   1b8da:	8f 92       	push	r8
   1b8dc:	9f 92       	push	r9
   1b8de:	af 92       	push	r10
   1b8e0:	bf 92       	push	r11
   1b8e2:	cf 92       	push	r12
   1b8e4:	df 92       	push	r13
   1b8e6:	ef 92       	push	r14
   1b8e8:	ff 92       	push	r15
   1b8ea:	0f 93       	push	r16
   1b8ec:	1f 93       	push	r17
   1b8ee:	cf 93       	push	r28
   1b8f0:	df 93       	push	r29
   1b8f2:	5c 01       	movw	r10, r24
   1b8f4:	7b 01       	movw	r14, r22
   1b8f6:	61 15       	cp	r22, r1
   1b8f8:	71 05       	cpc	r23, r1
   1b8fa:	19 f0       	breq	.+6      	; 0x1b902 <strtod+0x28>
   1b8fc:	db 01       	movw	r26, r22
   1b8fe:	8d 93       	st	X+, r24
   1b900:	9c 93       	st	X, r25
   1b902:	85 01       	movw	r16, r10
   1b904:	0f 5f       	subi	r16, 0xFF	; 255
   1b906:	1f 4f       	sbci	r17, 0xFF	; 255
   1b908:	f5 01       	movw	r30, r10
   1b90a:	d0 81       	ld	r29, Z
   1b90c:	8d 2f       	mov	r24, r29
   1b90e:	90 e0       	ldi	r25, 0x00	; 0
   1b910:	0e 94 2b d7 	call	0x1ae56	; 0x1ae56 <isspace>
   1b914:	6c 01       	movw	r12, r24
   1b916:	89 2b       	or	r24, r25
   1b918:	b9 f5       	brne	.+110    	; 0x1b988 <strtod+0xae>
   1b91a:	dd 32       	cpi	r29, 0x2D	; 45
   1b91c:	b9 f5       	brne	.+110    	; 0x1b98c <strtod+0xb2>
   1b91e:	0f 5f       	subi	r16, 0xFF	; 255
   1b920:	1f 4f       	sbci	r17, 0xFF	; 255
   1b922:	d5 01       	movw	r26, r10
   1b924:	11 96       	adiw	r26, 0x01	; 1
   1b926:	dc 91       	ld	r29, X
   1b928:	c1 e0       	ldi	r28, 0x01	; 1
   1b92a:	58 01       	movw	r10, r16
   1b92c:	f1 e0       	ldi	r31, 0x01	; 1
   1b92e:	af 1a       	sub	r10, r31
   1b930:	b1 08       	sbc	r11, r1
   1b932:	43 e0       	ldi	r20, 0x03	; 3
   1b934:	50 e0       	ldi	r21, 0x00	; 0
   1b936:	68 e7       	ldi	r22, 0x78	; 120
   1b938:	73 e0       	ldi	r23, 0x03	; 3
   1b93a:	c5 01       	movw	r24, r10
   1b93c:	0e 94 a6 de 	call	0x1bd4c	; 0x1bd4c <strncasecmp_P>
   1b940:	89 2b       	or	r24, r25
   1b942:	69 f5       	brne	.+90     	; 0x1b99e <strtod+0xc4>
   1b944:	68 01       	movw	r12, r16
   1b946:	82 e0       	ldi	r24, 0x02	; 2
   1b948:	c8 0e       	add	r12, r24
   1b94a:	d1 1c       	adc	r13, r1
   1b94c:	45 e0       	ldi	r20, 0x05	; 5
   1b94e:	50 e0       	ldi	r21, 0x00	; 0
   1b950:	63 e7       	ldi	r22, 0x73	; 115
   1b952:	73 e0       	ldi	r23, 0x03	; 3
   1b954:	c6 01       	movw	r24, r12
   1b956:	0e 94 a6 de 	call	0x1bd4c	; 0x1bd4c <strncasecmp_P>
   1b95a:	89 2b       	or	r24, r25
   1b95c:	21 f4       	brne	.+8      	; 0x1b966 <strtod+0x8c>
   1b95e:	68 01       	movw	r12, r16
   1b960:	97 e0       	ldi	r25, 0x07	; 7
   1b962:	c9 0e       	add	r12, r25
   1b964:	d1 1c       	adc	r13, r1
   1b966:	e1 14       	cp	r14, r1
   1b968:	f1 04       	cpc	r15, r1
   1b96a:	19 f0       	breq	.+6      	; 0x1b972 <strtod+0x98>
   1b96c:	d7 01       	movw	r26, r14
   1b96e:	cd 92       	st	X+, r12
   1b970:	dc 92       	st	X, r13
   1b972:	60 e0       	ldi	r22, 0x00	; 0
   1b974:	70 e0       	ldi	r23, 0x00	; 0
   1b976:	80 e8       	ldi	r24, 0x80	; 128
   1b978:	9f ef       	ldi	r25, 0xFF	; 255
   1b97a:	c1 11       	cpse	r28, r1
   1b97c:	ff c0       	rjmp	.+510    	; 0x1bb7c <strtod+0x2a2>
   1b97e:	60 e0       	ldi	r22, 0x00	; 0
   1b980:	70 e0       	ldi	r23, 0x00	; 0
   1b982:	80 e8       	ldi	r24, 0x80	; 128
   1b984:	9f e7       	ldi	r25, 0x7F	; 127
   1b986:	fa c0       	rjmp	.+500    	; 0x1bb7c <strtod+0x2a2>
   1b988:	58 01       	movw	r10, r16
   1b98a:	bb cf       	rjmp	.-138    	; 0x1b902 <strtod+0x28>
   1b98c:	db 32       	cpi	r29, 0x2B	; 43
   1b98e:	29 f4       	brne	.+10     	; 0x1b99a <strtod+0xc0>
   1b990:	85 01       	movw	r16, r10
   1b992:	0e 5f       	subi	r16, 0xFE	; 254
   1b994:	1f 4f       	sbci	r17, 0xFF	; 255
   1b996:	f5 01       	movw	r30, r10
   1b998:	d1 81       	ldd	r29, Z+1	; 0x01
   1b99a:	c0 e0       	ldi	r28, 0x00	; 0
   1b99c:	c6 cf       	rjmp	.-116    	; 0x1b92a <strtod+0x50>
   1b99e:	43 e0       	ldi	r20, 0x03	; 3
   1b9a0:	50 e0       	ldi	r21, 0x00	; 0
   1b9a2:	60 e7       	ldi	r22, 0x70	; 112
   1b9a4:	73 e0       	ldi	r23, 0x03	; 3
   1b9a6:	c5 01       	movw	r24, r10
   1b9a8:	0e 94 a6 de 	call	0x1bd4c	; 0x1bd4c <strncasecmp_P>
   1b9ac:	89 2b       	or	r24, r25
   1b9ae:	e9 f0       	breq	.+58     	; 0x1b9ea <strtod+0x110>
   1b9b0:	f8 01       	movw	r30, r16
   1b9b2:	10 e0       	ldi	r17, 0x00	; 0
   1b9b4:	00 e0       	ldi	r16, 0x00	; 0
   1b9b6:	20 e0       	ldi	r18, 0x00	; 0
   1b9b8:	30 e0       	ldi	r19, 0x00	; 0
   1b9ba:	a9 01       	movw	r20, r18
   1b9bc:	5f 01       	movw	r10, r30
   1b9be:	b0 ed       	ldi	r27, 0xD0	; 208
   1b9c0:	8b 2e       	mov	r8, r27
   1b9c2:	8d 0e       	add	r8, r29
   1b9c4:	89 e0       	ldi	r24, 0x09	; 9
   1b9c6:	88 15       	cp	r24, r8
   1b9c8:	c8 f1       	brcs	.+114    	; 0x1ba3c <strtod+0x162>
   1b9ca:	9c 2e       	mov	r9, r28
   1b9cc:	68 94       	set
   1b9ce:	91 f8       	bld	r9, 1
   1b9d0:	8c 2f       	mov	r24, r28
   1b9d2:	88 70       	andi	r24, 0x08	; 8
   1b9d4:	c2 ff       	sbrs	r28, 2
   1b9d6:	16 c0       	rjmp	.+44     	; 0x1ba04 <strtod+0x12a>
   1b9d8:	81 11       	cpse	r24, r1
   1b9da:	02 c0       	rjmp	.+4      	; 0x1b9e0 <strtod+0x106>
   1b9dc:	0f 5f       	subi	r16, 0xFF	; 255
   1b9de:	1f 4f       	sbci	r17, 0xFF	; 255
   1b9e0:	31 96       	adiw	r30, 0x01	; 1
   1b9e2:	d5 01       	movw	r26, r10
   1b9e4:	dc 91       	ld	r29, X
   1b9e6:	c9 2d       	mov	r28, r9
   1b9e8:	e9 cf       	rjmp	.-46     	; 0x1b9bc <strtod+0xe2>
   1b9ea:	e1 14       	cp	r14, r1
   1b9ec:	f1 04       	cpc	r15, r1
   1b9ee:	29 f0       	breq	.+10     	; 0x1b9fa <strtod+0x120>
   1b9f0:	0e 5f       	subi	r16, 0xFE	; 254
   1b9f2:	1f 4f       	sbci	r17, 0xFF	; 255
   1b9f4:	f7 01       	movw	r30, r14
   1b9f6:	11 83       	std	Z+1, r17	; 0x01
   1b9f8:	00 83       	st	Z, r16
   1b9fa:	60 e0       	ldi	r22, 0x00	; 0
   1b9fc:	70 e0       	ldi	r23, 0x00	; 0
   1b9fe:	80 ec       	ldi	r24, 0xC0	; 192
   1ba00:	9f e7       	ldi	r25, 0x7F	; 127
   1ba02:	bc c0       	rjmp	.+376    	; 0x1bb7c <strtod+0x2a2>
   1ba04:	88 23       	and	r24, r24
   1ba06:	11 f0       	breq	.+4      	; 0x1ba0c <strtod+0x132>
   1ba08:	01 50       	subi	r16, 0x01	; 1
   1ba0a:	11 09       	sbc	r17, r1
   1ba0c:	a5 e0       	ldi	r26, 0x05	; 5
   1ba0e:	b0 e0       	ldi	r27, 0x00	; 0
   1ba10:	0e 94 d2 d3 	call	0x1a7a4	; 0x1a7a4 <__muluhisi3>
   1ba14:	9b 01       	movw	r18, r22
   1ba16:	ac 01       	movw	r20, r24
   1ba18:	22 0f       	add	r18, r18
   1ba1a:	33 1f       	adc	r19, r19
   1ba1c:	44 1f       	adc	r20, r20
   1ba1e:	55 1f       	adc	r21, r21
   1ba20:	28 0d       	add	r18, r8
   1ba22:	31 1d       	adc	r19, r1
   1ba24:	41 1d       	adc	r20, r1
   1ba26:	51 1d       	adc	r21, r1
   1ba28:	28 39       	cpi	r18, 0x98	; 152
   1ba2a:	99 e9       	ldi	r25, 0x99	; 153
   1ba2c:	39 07       	cpc	r19, r25
   1ba2e:	49 07       	cpc	r20, r25
   1ba30:	99 e1       	ldi	r25, 0x19	; 25
   1ba32:	59 07       	cpc	r21, r25
   1ba34:	a8 f2       	brcs	.-86     	; 0x1b9e0 <strtod+0x106>
   1ba36:	c6 60       	ori	r28, 0x06	; 6
   1ba38:	9c 2e       	mov	r9, r28
   1ba3a:	d2 cf       	rjmp	.-92     	; 0x1b9e0 <strtod+0x106>
   1ba3c:	ae ef       	ldi	r26, 0xFE	; 254
   1ba3e:	8a 12       	cpse	r8, r26
   1ba40:	06 c0       	rjmp	.+12     	; 0x1ba4e <strtod+0x174>
   1ba42:	c3 fd       	sbrc	r28, 3
   1ba44:	3c c0       	rjmp	.+120    	; 0x1babe <strtod+0x1e4>
   1ba46:	9c 2e       	mov	r9, r28
   1ba48:	68 94       	set
   1ba4a:	93 f8       	bld	r9, 3
   1ba4c:	c9 cf       	rjmp	.-110    	; 0x1b9e0 <strtod+0x106>
   1ba4e:	df 7d       	andi	r29, 0xDF	; 223
   1ba50:	d5 34       	cpi	r29, 0x45	; 69
   1ba52:	a9 f5       	brne	.+106    	; 0x1babe <strtod+0x1e4>
   1ba54:	80 81       	ld	r24, Z
   1ba56:	8d 32       	cpi	r24, 0x2D	; 45
   1ba58:	39 f4       	brne	.+14     	; 0x1ba68 <strtod+0x18e>
   1ba5a:	c0 61       	ori	r28, 0x10	; 16
   1ba5c:	df 01       	movw	r26, r30
   1ba5e:	12 96       	adiw	r26, 0x02	; 2
   1ba60:	81 81       	ldd	r24, Z+1	; 0x01
   1ba62:	62 e0       	ldi	r22, 0x02	; 2
   1ba64:	70 e0       	ldi	r23, 0x00	; 0
   1ba66:	06 c0       	rjmp	.+12     	; 0x1ba74 <strtod+0x19a>
   1ba68:	df 01       	movw	r26, r30
   1ba6a:	8b 32       	cpi	r24, 0x2B	; 43
   1ba6c:	c1 f3       	breq	.-16     	; 0x1ba5e <strtod+0x184>
   1ba6e:	11 96       	adiw	r26, 0x01	; 1
   1ba70:	61 e0       	ldi	r22, 0x01	; 1
   1ba72:	70 e0       	ldi	r23, 0x00	; 0
   1ba74:	80 53       	subi	r24, 0x30	; 48
   1ba76:	5d 01       	movw	r10, r26
   1ba78:	a6 1a       	sub	r10, r22
   1ba7a:	b7 0a       	sbc	r11, r23
   1ba7c:	8a 30       	cpi	r24, 0x0A	; 10
   1ba7e:	f8 f4       	brcc	.+62     	; 0x1babe <strtod+0x1e4>
   1ba80:	e0 e8       	ldi	r30, 0x80	; 128
   1ba82:	ce 16       	cp	r12, r30
   1ba84:	ec e0       	ldi	r30, 0x0C	; 12
   1ba86:	de 06       	cpc	r13, r30
   1ba88:	5c f4       	brge	.+22     	; 0x1baa0 <strtod+0x1c6>
   1ba8a:	b6 01       	movw	r22, r12
   1ba8c:	66 0f       	add	r22, r22
   1ba8e:	77 1f       	adc	r23, r23
   1ba90:	66 0f       	add	r22, r22
   1ba92:	77 1f       	adc	r23, r23
   1ba94:	c6 0e       	add	r12, r22
   1ba96:	d7 1e       	adc	r13, r23
   1ba98:	cc 0c       	add	r12, r12
   1ba9a:	dd 1c       	adc	r13, r13
   1ba9c:	c8 0e       	add	r12, r24
   1ba9e:	d1 1c       	adc	r13, r1
   1baa0:	5d 01       	movw	r10, r26
   1baa2:	ff ef       	ldi	r31, 0xFF	; 255
   1baa4:	af 1a       	sub	r10, r31
   1baa6:	bf 0a       	sbc	r11, r31
   1baa8:	8c 91       	ld	r24, X
   1baaa:	80 53       	subi	r24, 0x30	; 48
   1baac:	8a 30       	cpi	r24, 0x0A	; 10
   1baae:	a8 f1       	brcs	.+106    	; 0x1bb1a <strtod+0x240>
   1bab0:	c4 ff       	sbrs	r28, 4
   1bab2:	03 c0       	rjmp	.+6      	; 0x1baba <strtod+0x1e0>
   1bab4:	d1 94       	neg	r13
   1bab6:	c1 94       	neg	r12
   1bab8:	d1 08       	sbc	r13, r1
   1baba:	0c 0d       	add	r16, r12
   1babc:	1d 1d       	adc	r17, r13
   1babe:	c1 ff       	sbrs	r28, 1
   1bac0:	09 c0       	rjmp	.+18     	; 0x1bad4 <strtod+0x1fa>
   1bac2:	e1 14       	cp	r14, r1
   1bac4:	f1 04       	cpc	r15, r1
   1bac6:	31 f0       	breq	.+12     	; 0x1bad4 <strtod+0x1fa>
   1bac8:	81 e0       	ldi	r24, 0x01	; 1
   1baca:	a8 1a       	sub	r10, r24
   1bacc:	b1 08       	sbc	r11, r1
   1bace:	d7 01       	movw	r26, r14
   1bad0:	ad 92       	st	X+, r10
   1bad2:	bc 92       	st	X, r11
   1bad4:	ca 01       	movw	r24, r20
   1bad6:	b9 01       	movw	r22, r18
   1bad8:	0e 94 12 d2 	call	0x1a424	; 0x1a424 <__floatunsisf>
   1badc:	c3 70       	andi	r28, 0x03	; 3
   1bade:	c3 30       	cpi	r28, 0x03	; 3
   1bae0:	09 f4       	brne	.+2      	; 0x1bae4 <strtod+0x20a>
   1bae2:	90 58       	subi	r25, 0x80	; 128
   1bae4:	4b 01       	movw	r8, r22
   1bae6:	5c 01       	movw	r10, r24
   1bae8:	20 e0       	ldi	r18, 0x00	; 0
   1baea:	30 e0       	ldi	r19, 0x00	; 0
   1baec:	a9 01       	movw	r20, r18
   1baee:	0e 94 65 d1 	call	0x1a2ca	; 0x1a2ca <__cmpsf2>
   1baf2:	88 23       	and	r24, r24
   1baf4:	09 f4       	brne	.+2      	; 0x1baf8 <strtod+0x21e>
   1baf6:	40 c0       	rjmp	.+128    	; 0x1bb78 <strtod+0x29e>
   1baf8:	c7 ea       	ldi	r28, 0xA7	; 167
   1bafa:	d3 e0       	ldi	r29, 0x03	; 3
   1bafc:	17 ff       	sbrs	r17, 7
   1bafe:	05 c0       	rjmp	.+10     	; 0x1bb0a <strtod+0x230>
   1bb00:	11 95       	neg	r17
   1bb02:	01 95       	neg	r16
   1bb04:	11 09       	sbc	r17, r1
   1bb06:	cf e8       	ldi	r28, 0x8F	; 143
   1bb08:	d3 e0       	ldi	r29, 0x03	; 3
   1bb0a:	6e 01       	movw	r12, r28
   1bb0c:	b8 e1       	ldi	r27, 0x18	; 24
   1bb0e:	cb 1a       	sub	r12, r27
   1bb10:	d1 08       	sbc	r13, r1
   1bb12:	80 e2       	ldi	r24, 0x20	; 32
   1bb14:	e8 2e       	mov	r14, r24
   1bb16:	f1 2c       	mov	r15, r1
   1bb18:	0f c0       	rjmp	.+30     	; 0x1bb38 <strtod+0x25e>
   1bb1a:	d5 01       	movw	r26, r10
   1bb1c:	b1 cf       	rjmp	.-158    	; 0x1ba80 <strtod+0x1a6>
   1bb1e:	fe 01       	movw	r30, r28
   1bb20:	25 91       	lpm	r18, Z+
   1bb22:	35 91       	lpm	r19, Z+
   1bb24:	45 91       	lpm	r20, Z+
   1bb26:	54 91       	lpm	r21, Z
   1bb28:	0e 19       	sub	r16, r14
   1bb2a:	1f 09       	sbc	r17, r15
   1bb2c:	c5 01       	movw	r24, r10
   1bb2e:	b4 01       	movw	r22, r8
   1bb30:	0e 94 c9 d2 	call	0x1a592	; 0x1a592 <__mulsf3>
   1bb34:	4b 01       	movw	r8, r22
   1bb36:	5c 01       	movw	r10, r24
   1bb38:	d5 01       	movw	r26, r10
   1bb3a:	c4 01       	movw	r24, r8
   1bb3c:	0e 15       	cp	r16, r14
   1bb3e:	1f 05       	cpc	r17, r15
   1bb40:	74 f7       	brge	.-36     	; 0x1bb1e <strtod+0x244>
   1bb42:	24 97       	sbiw	r28, 0x04	; 4
   1bb44:	f5 94       	asr	r15
   1bb46:	e7 94       	ror	r14
   1bb48:	cc 16       	cp	r12, r28
   1bb4a:	dd 06       	cpc	r13, r29
   1bb4c:	a9 f7       	brne	.-22     	; 0x1bb38 <strtod+0x25e>
   1bb4e:	8a 2f       	mov	r24, r26
   1bb50:	88 0f       	add	r24, r24
   1bb52:	8b 2f       	mov	r24, r27
   1bb54:	88 1f       	adc	r24, r24
   1bb56:	8f 3f       	cpi	r24, 0xFF	; 255
   1bb58:	49 f0       	breq	.+18     	; 0x1bb6c <strtod+0x292>
   1bb5a:	20 e0       	ldi	r18, 0x00	; 0
   1bb5c:	30 e0       	ldi	r19, 0x00	; 0
   1bb5e:	a9 01       	movw	r20, r18
   1bb60:	c5 01       	movw	r24, r10
   1bb62:	b4 01       	movw	r22, r8
   1bb64:	0e 94 65 d1 	call	0x1a2ca	; 0x1a2ca <__cmpsf2>
   1bb68:	81 11       	cpse	r24, r1
   1bb6a:	06 c0       	rjmp	.+12     	; 0x1bb78 <strtod+0x29e>
   1bb6c:	82 e2       	ldi	r24, 0x22	; 34
   1bb6e:	90 e0       	ldi	r25, 0x00	; 0
   1bb70:	90 93 ab 12 	sts	0x12AB, r25	; 0x8012ab <errno+0x1>
   1bb74:	80 93 aa 12 	sts	0x12AA, r24	; 0x8012aa <errno>
   1bb78:	c5 01       	movw	r24, r10
   1bb7a:	b4 01       	movw	r22, r8
   1bb7c:	df 91       	pop	r29
   1bb7e:	cf 91       	pop	r28
   1bb80:	1f 91       	pop	r17
   1bb82:	0f 91       	pop	r16
   1bb84:	ff 90       	pop	r15
   1bb86:	ef 90       	pop	r14
   1bb88:	df 90       	pop	r13
   1bb8a:	cf 90       	pop	r12
   1bb8c:	bf 90       	pop	r11
   1bb8e:	af 90       	pop	r10
   1bb90:	9f 90       	pop	r9
   1bb92:	8f 90       	pop	r8
   1bb94:	08 95       	ret

0001bb96 <__ftoa_engine>:
__ftoa_engine():
   1bb96:	28 30       	cpi	r18, 0x08	; 8
   1bb98:	08 f0       	brcs	.+2      	; 0x1bb9c <__ftoa_engine+0x6>
   1bb9a:	27 e0       	ldi	r18, 0x07	; 7
   1bb9c:	33 27       	eor	r19, r19
   1bb9e:	da 01       	movw	r26, r20
   1bba0:	99 0f       	add	r25, r25
   1bba2:	31 1d       	adc	r19, r1
   1bba4:	87 fd       	sbrc	r24, 7
   1bba6:	91 60       	ori	r25, 0x01	; 1
   1bba8:	00 96       	adiw	r24, 0x00	; 0
   1bbaa:	61 05       	cpc	r22, r1
   1bbac:	71 05       	cpc	r23, r1
   1bbae:	39 f4       	brne	.+14     	; 0x1bbbe <__ftoa_engine+0x28>
   1bbb0:	32 60       	ori	r19, 0x02	; 2
   1bbb2:	2e 5f       	subi	r18, 0xFE	; 254
   1bbb4:	3d 93       	st	X+, r19
   1bbb6:	30 e3       	ldi	r19, 0x30	; 48
   1bbb8:	2a 95       	dec	r18
   1bbba:	e1 f7       	brne	.-8      	; 0x1bbb4 <__ftoa_engine+0x1e>
   1bbbc:	08 95       	ret
   1bbbe:	9f 3f       	cpi	r25, 0xFF	; 255
   1bbc0:	30 f0       	brcs	.+12     	; 0x1bbce <__ftoa_engine+0x38>
   1bbc2:	80 38       	cpi	r24, 0x80	; 128
   1bbc4:	71 05       	cpc	r23, r1
   1bbc6:	61 05       	cpc	r22, r1
   1bbc8:	09 f0       	breq	.+2      	; 0x1bbcc <__ftoa_engine+0x36>
   1bbca:	3c 5f       	subi	r19, 0xFC	; 252
   1bbcc:	3c 5f       	subi	r19, 0xFC	; 252
   1bbce:	3d 93       	st	X+, r19
   1bbd0:	91 30       	cpi	r25, 0x01	; 1
   1bbd2:	08 f0       	brcs	.+2      	; 0x1bbd6 <__ftoa_engine+0x40>
   1bbd4:	80 68       	ori	r24, 0x80	; 128
   1bbd6:	91 1d       	adc	r25, r1
   1bbd8:	df 93       	push	r29
   1bbda:	cf 93       	push	r28
   1bbdc:	1f 93       	push	r17
   1bbde:	0f 93       	push	r16
   1bbe0:	ff 92       	push	r15
   1bbe2:	ef 92       	push	r14
   1bbe4:	19 2f       	mov	r17, r25
   1bbe6:	98 7f       	andi	r25, 0xF8	; 248
   1bbe8:	96 95       	lsr	r25
   1bbea:	e9 2f       	mov	r30, r25
   1bbec:	96 95       	lsr	r25
   1bbee:	96 95       	lsr	r25
   1bbf0:	e9 0f       	add	r30, r25
   1bbf2:	ff 27       	eor	r31, r31
   1bbf4:	eb 5f       	subi	r30, 0xFB	; 251
   1bbf6:	fb 4f       	sbci	r31, 0xFB	; 251
   1bbf8:	99 27       	eor	r25, r25
   1bbfa:	33 27       	eor	r19, r19
   1bbfc:	ee 24       	eor	r14, r14
   1bbfe:	ff 24       	eor	r15, r15
   1bc00:	a7 01       	movw	r20, r14
   1bc02:	e7 01       	movw	r28, r14
   1bc04:	05 90       	lpm	r0, Z+
   1bc06:	08 94       	sec
   1bc08:	07 94       	ror	r0
   1bc0a:	28 f4       	brcc	.+10     	; 0x1bc16 <__ftoa_engine+0x80>
   1bc0c:	36 0f       	add	r19, r22
   1bc0e:	e7 1e       	adc	r14, r23
   1bc10:	f8 1e       	adc	r15, r24
   1bc12:	49 1f       	adc	r20, r25
   1bc14:	51 1d       	adc	r21, r1
   1bc16:	66 0f       	add	r22, r22
   1bc18:	77 1f       	adc	r23, r23
   1bc1a:	88 1f       	adc	r24, r24
   1bc1c:	99 1f       	adc	r25, r25
   1bc1e:	06 94       	lsr	r0
   1bc20:	a1 f7       	brne	.-24     	; 0x1bc0a <__ftoa_engine+0x74>
   1bc22:	05 90       	lpm	r0, Z+
   1bc24:	07 94       	ror	r0
   1bc26:	28 f4       	brcc	.+10     	; 0x1bc32 <__ftoa_engine+0x9c>
   1bc28:	e7 0e       	add	r14, r23
   1bc2a:	f8 1e       	adc	r15, r24
   1bc2c:	49 1f       	adc	r20, r25
   1bc2e:	56 1f       	adc	r21, r22
   1bc30:	c1 1d       	adc	r28, r1
   1bc32:	77 0f       	add	r23, r23
   1bc34:	88 1f       	adc	r24, r24
   1bc36:	99 1f       	adc	r25, r25
   1bc38:	66 1f       	adc	r22, r22
   1bc3a:	06 94       	lsr	r0
   1bc3c:	a1 f7       	brne	.-24     	; 0x1bc26 <__ftoa_engine+0x90>
   1bc3e:	05 90       	lpm	r0, Z+
   1bc40:	07 94       	ror	r0
   1bc42:	28 f4       	brcc	.+10     	; 0x1bc4e <__ftoa_engine+0xb8>
   1bc44:	f8 0e       	add	r15, r24
   1bc46:	49 1f       	adc	r20, r25
   1bc48:	56 1f       	adc	r21, r22
   1bc4a:	c7 1f       	adc	r28, r23
   1bc4c:	d1 1d       	adc	r29, r1
   1bc4e:	88 0f       	add	r24, r24
   1bc50:	99 1f       	adc	r25, r25
   1bc52:	66 1f       	adc	r22, r22
   1bc54:	77 1f       	adc	r23, r23
   1bc56:	06 94       	lsr	r0
   1bc58:	a1 f7       	brne	.-24     	; 0x1bc42 <__ftoa_engine+0xac>
   1bc5a:	05 90       	lpm	r0, Z+
   1bc5c:	07 94       	ror	r0
   1bc5e:	20 f4       	brcc	.+8      	; 0x1bc68 <__ftoa_engine+0xd2>
   1bc60:	49 0f       	add	r20, r25
   1bc62:	56 1f       	adc	r21, r22
   1bc64:	c7 1f       	adc	r28, r23
   1bc66:	d8 1f       	adc	r29, r24
   1bc68:	99 0f       	add	r25, r25
   1bc6a:	66 1f       	adc	r22, r22
   1bc6c:	77 1f       	adc	r23, r23
   1bc6e:	88 1f       	adc	r24, r24
   1bc70:	06 94       	lsr	r0
   1bc72:	a9 f7       	brne	.-22     	; 0x1bc5e <__ftoa_engine+0xc8>
   1bc74:	84 91       	lpm	r24, Z
   1bc76:	10 95       	com	r17
   1bc78:	17 70       	andi	r17, 0x07	; 7
   1bc7a:	41 f0       	breq	.+16     	; 0x1bc8c <__ftoa_engine+0xf6>
   1bc7c:	d6 95       	lsr	r29
   1bc7e:	c7 95       	ror	r28
   1bc80:	57 95       	ror	r21
   1bc82:	47 95       	ror	r20
   1bc84:	f7 94       	ror	r15
   1bc86:	e7 94       	ror	r14
   1bc88:	1a 95       	dec	r17
   1bc8a:	c1 f7       	brne	.-16     	; 0x1bc7c <__ftoa_engine+0xe6>
   1bc8c:	eb ea       	ldi	r30, 0xAB	; 171
   1bc8e:	f3 e0       	ldi	r31, 0x03	; 3
   1bc90:	68 94       	set
   1bc92:	15 90       	lpm	r1, Z+
   1bc94:	15 91       	lpm	r17, Z+
   1bc96:	35 91       	lpm	r19, Z+
   1bc98:	65 91       	lpm	r22, Z+
   1bc9a:	95 91       	lpm	r25, Z+
   1bc9c:	05 90       	lpm	r0, Z+
   1bc9e:	7f e2       	ldi	r23, 0x2F	; 47
   1bca0:	73 95       	inc	r23
   1bca2:	e1 18       	sub	r14, r1
   1bca4:	f1 0a       	sbc	r15, r17
   1bca6:	43 0b       	sbc	r20, r19
   1bca8:	56 0b       	sbc	r21, r22
   1bcaa:	c9 0b       	sbc	r28, r25
   1bcac:	d0 09       	sbc	r29, r0
   1bcae:	c0 f7       	brcc	.-16     	; 0x1bca0 <__ftoa_engine+0x10a>
   1bcb0:	e1 0c       	add	r14, r1
   1bcb2:	f1 1e       	adc	r15, r17
   1bcb4:	43 1f       	adc	r20, r19
   1bcb6:	56 1f       	adc	r21, r22
   1bcb8:	c9 1f       	adc	r28, r25
   1bcba:	d0 1d       	adc	r29, r0
   1bcbc:	7e f4       	brtc	.+30     	; 0x1bcdc <__ftoa_engine+0x146>
   1bcbe:	70 33       	cpi	r23, 0x30	; 48
   1bcc0:	11 f4       	brne	.+4      	; 0x1bcc6 <__ftoa_engine+0x130>
   1bcc2:	8a 95       	dec	r24
   1bcc4:	e6 cf       	rjmp	.-52     	; 0x1bc92 <__ftoa_engine+0xfc>
   1bcc6:	e8 94       	clt
   1bcc8:	01 50       	subi	r16, 0x01	; 1
   1bcca:	30 f0       	brcs	.+12     	; 0x1bcd8 <__ftoa_engine+0x142>
   1bccc:	08 0f       	add	r16, r24
   1bcce:	0a f4       	brpl	.+2      	; 0x1bcd2 <__ftoa_engine+0x13c>
   1bcd0:	00 27       	eor	r16, r16
   1bcd2:	02 17       	cp	r16, r18
   1bcd4:	08 f4       	brcc	.+2      	; 0x1bcd8 <__ftoa_engine+0x142>
   1bcd6:	20 2f       	mov	r18, r16
   1bcd8:	23 95       	inc	r18
   1bcda:	02 2f       	mov	r16, r18
   1bcdc:	7a 33       	cpi	r23, 0x3A	; 58
   1bcde:	28 f0       	brcs	.+10     	; 0x1bcea <__ftoa_engine+0x154>
   1bce0:	79 e3       	ldi	r23, 0x39	; 57
   1bce2:	7d 93       	st	X+, r23
   1bce4:	2a 95       	dec	r18
   1bce6:	e9 f7       	brne	.-6      	; 0x1bce2 <__ftoa_engine+0x14c>
   1bce8:	10 c0       	rjmp	.+32     	; 0x1bd0a <__ftoa_engine+0x174>
   1bcea:	7d 93       	st	X+, r23
   1bcec:	2a 95       	dec	r18
   1bcee:	89 f6       	brne	.-94     	; 0x1bc92 <__ftoa_engine+0xfc>
   1bcf0:	06 94       	lsr	r0
   1bcf2:	97 95       	ror	r25
   1bcf4:	67 95       	ror	r22
   1bcf6:	37 95       	ror	r19
   1bcf8:	17 95       	ror	r17
   1bcfa:	17 94       	ror	r1
   1bcfc:	e1 18       	sub	r14, r1
   1bcfe:	f1 0a       	sbc	r15, r17
   1bd00:	43 0b       	sbc	r20, r19
   1bd02:	56 0b       	sbc	r21, r22
   1bd04:	c9 0b       	sbc	r28, r25
   1bd06:	d0 09       	sbc	r29, r0
   1bd08:	98 f0       	brcs	.+38     	; 0x1bd30 <__ftoa_engine+0x19a>
   1bd0a:	23 95       	inc	r18
   1bd0c:	7e 91       	ld	r23, -X
   1bd0e:	73 95       	inc	r23
   1bd10:	7a 33       	cpi	r23, 0x3A	; 58
   1bd12:	08 f0       	brcs	.+2      	; 0x1bd16 <__ftoa_engine+0x180>
   1bd14:	70 e3       	ldi	r23, 0x30	; 48
   1bd16:	7c 93       	st	X, r23
   1bd18:	20 13       	cpse	r18, r16
   1bd1a:	b8 f7       	brcc	.-18     	; 0x1bd0a <__ftoa_engine+0x174>
   1bd1c:	7e 91       	ld	r23, -X
   1bd1e:	70 61       	ori	r23, 0x10	; 16
   1bd20:	7d 93       	st	X+, r23
   1bd22:	30 f0       	brcs	.+12     	; 0x1bd30 <__ftoa_engine+0x19a>
   1bd24:	83 95       	inc	r24
   1bd26:	71 e3       	ldi	r23, 0x31	; 49
   1bd28:	7d 93       	st	X+, r23
   1bd2a:	70 e3       	ldi	r23, 0x30	; 48
   1bd2c:	2a 95       	dec	r18
   1bd2e:	e1 f7       	brne	.-8      	; 0x1bd28 <__ftoa_engine+0x192>
   1bd30:	11 24       	eor	r1, r1
   1bd32:	ef 90       	pop	r14
   1bd34:	ff 90       	pop	r15
   1bd36:	0f 91       	pop	r16
   1bd38:	1f 91       	pop	r17
   1bd3a:	cf 91       	pop	r28
   1bd3c:	df 91       	pop	r29
   1bd3e:	99 27       	eor	r25, r25
   1bd40:	87 fd       	sbrc	r24, 7
   1bd42:	90 95       	com	r25
   1bd44:	08 95       	ret

0001bd46 <__ctype_isfalse>:
__ctype_isfalse():
   1bd46:	99 27       	eor	r25, r25
   1bd48:	88 27       	eor	r24, r24

0001bd4a <__ctype_istrue>:
__ctype_istrue():
   1bd4a:	08 95       	ret

0001bd4c <strncasecmp_P>:
strncasecmp_P():
   1bd4c:	fb 01       	movw	r30, r22
   1bd4e:	dc 01       	movw	r26, r24
   1bd50:	41 50       	subi	r20, 0x01	; 1
   1bd52:	50 40       	sbci	r21, 0x00	; 0
   1bd54:	88 f0       	brcs	.+34     	; 0x1bd78 <strncasecmp_P+0x2c>
   1bd56:	8d 91       	ld	r24, X+
   1bd58:	81 34       	cpi	r24, 0x41	; 65
   1bd5a:	1c f0       	brlt	.+6      	; 0x1bd62 <strncasecmp_P+0x16>
   1bd5c:	8b 35       	cpi	r24, 0x5B	; 91
   1bd5e:	0c f4       	brge	.+2      	; 0x1bd62 <strncasecmp_P+0x16>
   1bd60:	80 5e       	subi	r24, 0xE0	; 224
   1bd62:	65 91       	lpm	r22, Z+
   1bd64:	61 34       	cpi	r22, 0x41	; 65
   1bd66:	1c f0       	brlt	.+6      	; 0x1bd6e <strncasecmp_P+0x22>
   1bd68:	6b 35       	cpi	r22, 0x5B	; 91
   1bd6a:	0c f4       	brge	.+2      	; 0x1bd6e <strncasecmp_P+0x22>
   1bd6c:	60 5e       	subi	r22, 0xE0	; 224
   1bd6e:	86 1b       	sub	r24, r22
   1bd70:	61 11       	cpse	r22, r1
   1bd72:	71 f3       	breq	.-36     	; 0x1bd50 <strncasecmp_P+0x4>
   1bd74:	99 0b       	sbc	r25, r25
   1bd76:	08 95       	ret
   1bd78:	88 1b       	sub	r24, r24
   1bd7a:	fc cf       	rjmp	.-8      	; 0x1bd74 <strncasecmp_P+0x28>

0001bd7c <strnlen_P>:
strnlen_P():
   1bd7c:	fc 01       	movw	r30, r24
   1bd7e:	05 90       	lpm	r0, Z+
   1bd80:	61 50       	subi	r22, 0x01	; 1
   1bd82:	70 40       	sbci	r23, 0x00	; 0
   1bd84:	01 10       	cpse	r0, r1
   1bd86:	d8 f7       	brcc	.-10     	; 0x1bd7e <strnlen_P+0x2>
   1bd88:	80 95       	com	r24
   1bd8a:	90 95       	com	r25
   1bd8c:	8e 0f       	add	r24, r30
   1bd8e:	9f 1f       	adc	r25, r31
   1bd90:	08 95       	ret

0001bd92 <memset>:
memset():
   1bd92:	dc 01       	movw	r26, r24
   1bd94:	01 c0       	rjmp	.+2      	; 0x1bd98 <memset+0x6>
   1bd96:	6d 93       	st	X+, r22
   1bd98:	41 50       	subi	r20, 0x01	; 1
   1bd9a:	50 40       	sbci	r21, 0x00	; 0
   1bd9c:	e0 f7       	brcc	.-8      	; 0x1bd96 <memset+0x4>
   1bd9e:	08 95       	ret

0001bda0 <strnlen>:
strnlen():
   1bda0:	fc 01       	movw	r30, r24
   1bda2:	61 50       	subi	r22, 0x01	; 1
   1bda4:	70 40       	sbci	r23, 0x00	; 0
   1bda6:	01 90       	ld	r0, Z+
   1bda8:	01 10       	cpse	r0, r1
   1bdaa:	d8 f7       	brcc	.-10     	; 0x1bda2 <strnlen+0x2>
   1bdac:	80 95       	com	r24
   1bdae:	90 95       	com	r25
   1bdb0:	8e 0f       	add	r24, r30
   1bdb2:	9f 1f       	adc	r25, r31
   1bdb4:	08 95       	ret

0001bdb6 <strrev>:
strrev():
   1bdb6:	dc 01       	movw	r26, r24
   1bdb8:	fc 01       	movw	r30, r24
   1bdba:	67 2f       	mov	r22, r23
   1bdbc:	71 91       	ld	r23, Z+
   1bdbe:	77 23       	and	r23, r23
   1bdc0:	e1 f7       	brne	.-8      	; 0x1bdba <strrev+0x4>
   1bdc2:	32 97       	sbiw	r30, 0x02	; 2
   1bdc4:	04 c0       	rjmp	.+8      	; 0x1bdce <strrev+0x18>
   1bdc6:	7c 91       	ld	r23, X
   1bdc8:	6d 93       	st	X+, r22
   1bdca:	70 83       	st	Z, r23
   1bdcc:	62 91       	ld	r22, -Z
   1bdce:	ae 17       	cp	r26, r30
   1bdd0:	bf 07       	cpc	r27, r31
   1bdd2:	c8 f3       	brcs	.-14     	; 0x1bdc6 <strrev+0x10>
   1bdd4:	08 95       	ret

0001bdd6 <fputc>:
fputc():
   1bdd6:	0f 93       	push	r16
   1bdd8:	1f 93       	push	r17
   1bdda:	cf 93       	push	r28
   1bddc:	df 93       	push	r29
   1bdde:	18 2f       	mov	r17, r24
   1bde0:	09 2f       	mov	r16, r25
   1bde2:	eb 01       	movw	r28, r22
   1bde4:	8b 81       	ldd	r24, Y+3	; 0x03
   1bde6:	81 fd       	sbrc	r24, 1
   1bde8:	09 c0       	rjmp	.+18     	; 0x1bdfc <fputc+0x26>
   1bdea:	1f ef       	ldi	r17, 0xFF	; 255
   1bdec:	0f ef       	ldi	r16, 0xFF	; 255
   1bdee:	81 2f       	mov	r24, r17
   1bdf0:	90 2f       	mov	r25, r16
   1bdf2:	df 91       	pop	r29
   1bdf4:	cf 91       	pop	r28
   1bdf6:	1f 91       	pop	r17
   1bdf8:	0f 91       	pop	r16
   1bdfa:	08 95       	ret
   1bdfc:	82 ff       	sbrs	r24, 2
   1bdfe:	14 c0       	rjmp	.+40     	; 0x1be28 <fputc+0x52>
   1be00:	2e 81       	ldd	r18, Y+6	; 0x06
   1be02:	3f 81       	ldd	r19, Y+7	; 0x07
   1be04:	8c 81       	ldd	r24, Y+4	; 0x04
   1be06:	9d 81       	ldd	r25, Y+5	; 0x05
   1be08:	28 17       	cp	r18, r24
   1be0a:	39 07       	cpc	r19, r25
   1be0c:	3c f4       	brge	.+14     	; 0x1be1c <fputc+0x46>
   1be0e:	e8 81       	ld	r30, Y
   1be10:	f9 81       	ldd	r31, Y+1	; 0x01
   1be12:	cf 01       	movw	r24, r30
   1be14:	01 96       	adiw	r24, 0x01	; 1
   1be16:	99 83       	std	Y+1, r25	; 0x01
   1be18:	88 83       	st	Y, r24
   1be1a:	10 83       	st	Z, r17
   1be1c:	8e 81       	ldd	r24, Y+6	; 0x06
   1be1e:	9f 81       	ldd	r25, Y+7	; 0x07
   1be20:	01 96       	adiw	r24, 0x01	; 1
   1be22:	9f 83       	std	Y+7, r25	; 0x07
   1be24:	8e 83       	std	Y+6, r24	; 0x06
   1be26:	e3 cf       	rjmp	.-58     	; 0x1bdee <fputc+0x18>
   1be28:	e8 85       	ldd	r30, Y+8	; 0x08
   1be2a:	f9 85       	ldd	r31, Y+9	; 0x09
   1be2c:	81 2f       	mov	r24, r17
   1be2e:	19 95       	eicall
   1be30:	89 2b       	or	r24, r25
   1be32:	a1 f3       	breq	.-24     	; 0x1be1c <fputc+0x46>
   1be34:	da cf       	rjmp	.-76     	; 0x1bdea <fputc+0x14>

0001be36 <__ultoa_invert>:
__ultoa_invert():
   1be36:	fa 01       	movw	r30, r20
   1be38:	aa 27       	eor	r26, r26
   1be3a:	28 30       	cpi	r18, 0x08	; 8
   1be3c:	51 f1       	breq	.+84     	; 0x1be92 <__ultoa_invert+0x5c>
   1be3e:	20 31       	cpi	r18, 0x10	; 16
   1be40:	81 f1       	breq	.+96     	; 0x1bea2 <__ultoa_invert+0x6c>
   1be42:	e8 94       	clt
   1be44:	6f 93       	push	r22
   1be46:	6e 7f       	andi	r22, 0xFE	; 254
   1be48:	6e 5f       	subi	r22, 0xFE	; 254
   1be4a:	7f 4f       	sbci	r23, 0xFF	; 255
   1be4c:	8f 4f       	sbci	r24, 0xFF	; 255
   1be4e:	9f 4f       	sbci	r25, 0xFF	; 255
   1be50:	af 4f       	sbci	r26, 0xFF	; 255
   1be52:	b1 e0       	ldi	r27, 0x01	; 1
   1be54:	3e d0       	rcall	.+124    	; 0x1bed2 <__ultoa_invert+0x9c>
   1be56:	b4 e0       	ldi	r27, 0x04	; 4
   1be58:	3c d0       	rcall	.+120    	; 0x1bed2 <__ultoa_invert+0x9c>
   1be5a:	67 0f       	add	r22, r23
   1be5c:	78 1f       	adc	r23, r24
   1be5e:	89 1f       	adc	r24, r25
   1be60:	9a 1f       	adc	r25, r26
   1be62:	a1 1d       	adc	r26, r1
   1be64:	68 0f       	add	r22, r24
   1be66:	79 1f       	adc	r23, r25
   1be68:	8a 1f       	adc	r24, r26
   1be6a:	91 1d       	adc	r25, r1
   1be6c:	a1 1d       	adc	r26, r1
   1be6e:	6a 0f       	add	r22, r26
   1be70:	71 1d       	adc	r23, r1
   1be72:	81 1d       	adc	r24, r1
   1be74:	91 1d       	adc	r25, r1
   1be76:	a1 1d       	adc	r26, r1
   1be78:	20 d0       	rcall	.+64     	; 0x1beba <__ultoa_invert+0x84>
   1be7a:	09 f4       	brne	.+2      	; 0x1be7e <__ultoa_invert+0x48>
   1be7c:	68 94       	set
   1be7e:	3f 91       	pop	r19
   1be80:	2a e0       	ldi	r18, 0x0A	; 10
   1be82:	26 9f       	mul	r18, r22
   1be84:	11 24       	eor	r1, r1
   1be86:	30 19       	sub	r19, r0
   1be88:	30 5d       	subi	r19, 0xD0	; 208
   1be8a:	31 93       	st	Z+, r19
   1be8c:	de f6       	brtc	.-74     	; 0x1be44 <__ultoa_invert+0xe>
   1be8e:	cf 01       	movw	r24, r30
   1be90:	08 95       	ret
   1be92:	46 2f       	mov	r20, r22
   1be94:	47 70       	andi	r20, 0x07	; 7
   1be96:	40 5d       	subi	r20, 0xD0	; 208
   1be98:	41 93       	st	Z+, r20
   1be9a:	b3 e0       	ldi	r27, 0x03	; 3
   1be9c:	0f d0       	rcall	.+30     	; 0x1bebc <__ultoa_invert+0x86>
   1be9e:	c9 f7       	brne	.-14     	; 0x1be92 <__ultoa_invert+0x5c>
   1bea0:	f6 cf       	rjmp	.-20     	; 0x1be8e <__ultoa_invert+0x58>
   1bea2:	46 2f       	mov	r20, r22
   1bea4:	4f 70       	andi	r20, 0x0F	; 15
   1bea6:	40 5d       	subi	r20, 0xD0	; 208
   1bea8:	4a 33       	cpi	r20, 0x3A	; 58
   1beaa:	18 f0       	brcs	.+6      	; 0x1beb2 <__ultoa_invert+0x7c>
   1beac:	49 5d       	subi	r20, 0xD9	; 217
   1beae:	31 fd       	sbrc	r19, 1
   1beb0:	40 52       	subi	r20, 0x20	; 32
   1beb2:	41 93       	st	Z+, r20
   1beb4:	02 d0       	rcall	.+4      	; 0x1beba <__ultoa_invert+0x84>
   1beb6:	a9 f7       	brne	.-22     	; 0x1bea2 <__ultoa_invert+0x6c>
   1beb8:	ea cf       	rjmp	.-44     	; 0x1be8e <__ultoa_invert+0x58>
   1beba:	b4 e0       	ldi	r27, 0x04	; 4
   1bebc:	a6 95       	lsr	r26
   1bebe:	97 95       	ror	r25
   1bec0:	87 95       	ror	r24
   1bec2:	77 95       	ror	r23
   1bec4:	67 95       	ror	r22
   1bec6:	ba 95       	dec	r27
   1bec8:	c9 f7       	brne	.-14     	; 0x1bebc <__ultoa_invert+0x86>
   1beca:	00 97       	sbiw	r24, 0x00	; 0
   1becc:	61 05       	cpc	r22, r1
   1bece:	71 05       	cpc	r23, r1
   1bed0:	08 95       	ret
   1bed2:	9b 01       	movw	r18, r22
   1bed4:	ac 01       	movw	r20, r24
   1bed6:	0a 2e       	mov	r0, r26
   1bed8:	06 94       	lsr	r0
   1beda:	57 95       	ror	r21
   1bedc:	47 95       	ror	r20
   1bede:	37 95       	ror	r19
   1bee0:	27 95       	ror	r18
   1bee2:	ba 95       	dec	r27
   1bee4:	c9 f7       	brne	.-14     	; 0x1bed8 <__ultoa_invert+0xa2>
   1bee6:	62 0f       	add	r22, r18
   1bee8:	73 1f       	adc	r23, r19
   1beea:	84 1f       	adc	r24, r20
   1beec:	95 1f       	adc	r25, r21
   1beee:	a0 1d       	adc	r26, r0
   1bef0:	08 95       	ret

0001bef2 <eeprom_read_byte>:
eeprom_read_byte():
   1bef2:	f9 99       	sbic	0x1f, 1	; 31
   1bef4:	fe cf       	rjmp	.-4      	; 0x1bef2 <eeprom_read_byte>
   1bef6:	92 bd       	out	0x22, r25	; 34
   1bef8:	81 bd       	out	0x21, r24	; 33
   1befa:	f8 9a       	sbi	0x1f, 0	; 31
   1befc:	99 27       	eor	r25, r25
   1befe:	80 b5       	in	r24, 0x20	; 32
   1bf00:	08 95       	ret

0001bf02 <eeprom_write_byte>:
eeprom_write_byte():
   1bf02:	26 2f       	mov	r18, r22

0001bf04 <eeprom_write_r18>:
   1bf04:	f9 99       	sbic	0x1f, 1	; 31
   1bf06:	fe cf       	rjmp	.-4      	; 0x1bf04 <eeprom_write_r18>
   1bf08:	1f ba       	out	0x1f, r1	; 31
   1bf0a:	92 bd       	out	0x22, r25	; 34
   1bf0c:	81 bd       	out	0x21, r24	; 33
   1bf0e:	20 bd       	out	0x20, r18	; 32
   1bf10:	0f b6       	in	r0, 0x3f	; 63
   1bf12:	f8 94       	cli
   1bf14:	fa 9a       	sbi	0x1f, 2	; 31
   1bf16:	f9 9a       	sbi	0x1f, 1	; 31
   1bf18:	0f be       	out	0x3f, r0	; 63
   1bf1a:	01 96       	adiw	r24, 0x01	; 1
   1bf1c:	08 95       	ret

0001bf1e <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   1bf1e:	f8 94       	cli

0001bf20 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   1bf20:	ff cf       	rjmp	.-2      	; 0x1bf20 <__stop_program>
