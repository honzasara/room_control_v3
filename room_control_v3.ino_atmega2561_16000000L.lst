
/tmp/arduino_build_832911/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <__ctors_end>
       4:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
       8:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
       c:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      10:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      14:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      18:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      1c:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      20:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      24:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      28:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      2c:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      30:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      34:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      38:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      3c:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      40:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      44:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      48:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      4c:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      50:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      54:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      58:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      5c:	0c 94 5c 8d 	jmp	0x11ab8	; 0x11ab8 <__vector_23>
      60:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      64:	0c 94 d0 8d 	jmp	0x11ba0	; 0x11ba0 <__vector_25>
      68:	0c 94 a6 8d 	jmp	0x11b4c	; 0x11b4c <__vector_26>
      6c:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      70:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      74:	0c 94 06 8e 	jmp	0x11c0c	; 0x11c0c <__vector_29>
      78:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      7c:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      80:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      84:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      88:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      8c:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      90:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      94:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      98:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      9c:	0c 94 84 8f 	jmp	0x11f08	; 0x11f08 <__vector_39>
      a0:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      a4:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      a8:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      ac:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      b0:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      b4:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      b8:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      bc:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      c0:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      c4:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>
      c8:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 f4 2e 	jmp	0x5de8	; 0x5de8 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
      d0:	0c 94 94 7f 	jmp	0xff28	; 0xff28 <Print::write(unsigned char const*, unsigned int)>
      d4:	0c 94 41 32 	jmp	0x6482	; 0x6482 <EthernetClient::write(unsigned char const*, unsigned int)>
      d8:	0c 94 f1 52 	jmp	0xa5e2	; 0xa5e2 <click_function_default_temp(unsigned char, unsigned char, unsigned char)>
      dc:	0c 94 34 89 	jmp	0x11268	; 0x11268 <turnOffPWM.lto_priv.233+0x50>
      e0:	0c 94 3b 1e 	jmp	0x3c76	; 0x3c76 <EthernetUDP::read(char*, unsigned int)>
      e4:	0c 94 cc 31 	jmp	0x6398	; 0x6398 <MenuHistoryNextMenu(unsigned char, unsigned char)>
      e8:	0c 94 68 9a 	jmp	0x134d0	; 0x134d0 <EthernetUDP::stop()>
      ec:	0c 94 48 5c 	jmp	0xb890	; 0xb890 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
      f0:	0c 94 d6 2b 	jmp	0x57ac	; 0x57ac <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)>
      f4:	0c 94 a7 59 	jmp	0xb34e	; 0xb34e <menu_tds_save_name(unsigned char, unsigned char)>
      f8:	0c 94 95 80 	jmp	0x1012a	; 0x1012a <EthernetUDP::remotePort()>
      fc:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <get_function_thermostat_ring_is_selected(unsigned int, unsigned int, unsigned char)>
     100:	0c 94 99 25 	jmp	0x4b32	; 0x4b32 <get_function_budik_enabled(unsigned char)>
     104:	0c 94 0c 56 	jmp	0xac18	; 0xac18 <tds_associate(unsigned char)>
     108:	0c 94 76 53 	jmp	0xa6ec	; 0xa6ec <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)>
     10c:	0c 94 dc 26 	jmp	0x4db8	; 0x4db8 <get_function_budik_text_state(unsigned char, unsigned char, char*, char*)>
     110:	0c 94 66 26 	jmp	0x4ccc	; 0x4ccc <returnnullfceargs(unsigned int, unsigned int)>
     114:	0c 94 6f 89 	jmp	0x112de	; 0x112de <turnOffPWM.lto_priv.233+0xc6>
     118:	0c 94 db 56 	jmp	0xadb6	; 0xadb6 <click_tds_deassociate_onewire(unsigned char, unsigned char)>
     11c:	0c 94 ba 7e 	jmp	0xfd74	; 0xfd74 <HardwareSerial::available()>
     120:	0c 94 80 7e 	jmp	0xfd00	; 0xfd00 <TwoWire::available()>
     124:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <Print::availableForWrite()>
     128:	0c 94 3a 9a 	jmp	0x13474	; 0x13474 <EthernetUDP::begin(unsigned int)>
     12c:	0c 94 f6 5a 	jmp	0xb5ec	; 0xb5ec <click_rtds_setting_sensor(unsigned char, unsigned char, unsigned char)>
     130:	0c 94 a8 32 	jmp	0x6550	; 0x6550 <EthernetClient::connect(IPAddress, unsigned int)>
     134:	0c 94 68 26 	jmp	0x4cd0	; 0x4cd0 <nullfceargs(unsigned int, unsigned int)>
     138:	0c 94 7c 58 	jmp	0xb0f8	; 0xb0f8 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     13c:	0c 94 69 80 	jmp	0x100d2	; 0x100d2 <EthernetUDP::flush()>
     140:	0c 94 e1 21 	jmp	0x43c2	; 0x43c2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     144:	0c 94 5a 89 	jmp	0x112b4	; 0x112b4 <turnOffPWM.lto_priv.233+0x9c>
     148:	0c 94 87 7e 	jmp	0xfd0e	; 0xfd0e <TwoWire::onRequestService()>
     14c:	0c 94 df 31 	jmp	0x63be	; 0x63be <click_thermostat_set_mode_via_dialog(unsigned char, unsigned char, unsigned char)>
     150:	0c 94 02 80 	jmp	0x10004	; 0x10004 <TwoWire::write(unsigned char const*, unsigned int)>
     154:	0c 94 4b 25 	jmp	0x4a96	; 0x4a96 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>
     158:	0c 94 9d 24 	jmp	0x493a	; 0x493a <get_function_default_temp_active(unsigned int, unsigned int, unsigned char)>
     15c:	0c 94 99 80 	jmp	0x10132	; 0x10132 <EthernetUDP::remoteIP()>
     160:	0c 94 bd 25 	jmp	0x4b7a	; 0x4b7a <display_function_set_variable_minus()>
     164:	0c 94 9e 9a 	jmp	0x1353c	; 0x1353c <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     168:	0c 94 44 99 	jmp	0x13288	; 0x13288 <EthernetUDP::read(unsigned char*, unsigned int)>
     16c:	0c 94 ec 54 	jmp	0xa9d8	; 0xa9d8 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     170:	0c 94 38 89 	jmp	0x11270	; 0x11270 <turnOffPWM.lto_priv.233+0x58>
     174:	0c 94 63 99 	jmp	0x132c6	; 0x132c6 <EthernetUDP::read()>
     178:	0c 94 5a 7e 	jmp	0xfcb4	; 0xfcb4 <TwoWire::read()>
     17c:	0c 94 e6 58 	jmp	0xb1cc	; 0xb1cc <display_menu_tds_set_name(unsigned char, unsigned char)>
     180:	0c 94 69 26 	jmp	0x4cd2	; 0x4cd2 <nullfce()>
     184:	0c 94 42 1e 	jmp	0x3c84	; 0x3c84 <LCDWIKI_KBV::Get_Height() const>
     188:	0c 94 e6 56 	jmp	0xadcc	; 0xadcc <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)>
     18c:	0c 94 0b 32 	jmp	0x6416	; 0x6416 <MenuHistoryPrevMenu()>
     190:	0c 94 1b 5c 	jmp	0xb836	; 0xb836 <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)>
     194:	0c 94 5e 25 	jmp	0x4abc	; 0x4abc <menu_redraw_time05s(unsigned char, unsigned char)>
     198:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <EthernetClient::write(unsigned char)>
     19c:	0c 94 c2 50 	jmp	0xa184	; 0xa184 <click_function_thermostat_set_mode(unsigned char, unsigned char, unsigned char)>
     1a0:	0c 94 9b 25 	jmp	0x4b36	; 0x4b36 <display_function_set_variable_plus()>
     1a4:	0c 94 db 5f 	jmp	0xbfb6	; 0xbfb6 <mqtt_callback(char*, unsigned char*, unsigned int)>
     1a8:	0c 94 a9 24 	jmp	0x4952	; 0x4952 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     1ac:	0c 94 74 2f 	jmp	0x5ee8	; 0x5ee8 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     1b0:	0c 94 c2 26 	jmp	0x4d84	; 0x4d84 <EthernetClient::available()>
     1b4:	0c 94 e7 7e 	jmp	0xfdce	; 0xfdce <HardwareSerial::write(unsigned char)>
     1b8:	0c 94 c6 30 	jmp	0x618c	; 0x618c <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     1bc:	0c 94 2f 80 	jmp	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>
     1c0:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <get_function_thermostat_set_mode_button_labels(unsigned char, unsigned char, char*, char*)>
     1c4:	0c 94 70 89 	jmp	0x112e0	; 0x112e0 <turnOffPWM.lto_priv.233+0xc8>
     1c8:	0c 94 6c 89 	jmp	0x112d8	; 0x112d8 <turnOffPWM.lto_priv.233+0xc0>
     1cc:	0c 94 fd 53 	jmp	0xa7fa	; 0xa7fa <set_function_thermostat_heat_or_cool(unsigned char)>
     1d0:	0c 94 0a 9b 	jmp	0x13614	; 0x13614 <EthernetClient::stop()>
     1d4:	0c 94 68 89 	jmp	0x112d0	; 0x112d0 <turnOffPWM.lto_priv.233+0xb8>
     1d8:	0c 94 30 89 	jmp	0x11260	; 0x11260 <turnOffPWM.lto_priv.233+0x48>
     1dc:	0c 94 2a 89 	jmp	0x11254	; 0x11254 <turnOffPWM.lto_priv.233+0x3c>
     1e0:	0c 94 29 54 	jmp	0xa852	; 0xa852 <get_function_thermostat_has_mode(unsigned char)>
     1e4:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <EthernetClient::operator!=(EthernetClient const&)>
     1e8:	0c 94 42 89 	jmp	0x11284	; 0x11284 <turnOffPWM.lto_priv.233+0x6c>
     1ec:	0c 94 e4 31 	jmp	0x63c8	; 0x63c8 <click_thermostat_set_ring_via_dialog(unsigned char, unsigned char, unsigned char)>
     1f0:	0c 94 98 7e 	jmp	0xfd30	; 0xfd30 <HardwareSerial::read()>
     1f4:	0c 94 ec 50 	jmp	0xa1d8	; 0xa1d8 <helper_thermostat_set_mezni(int, unsigned char)>
     1f8:	0c 94 67 57 	jmp	0xaece	; 0xaece <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     1fc:	0c 94 a3 24 	jmp	0x4946	; 0x4946 <get_function_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
     200:	0c 94 2c 32 	jmp	0x6458	; 0x6458 <serial_putc(char, __file*)>
     204:	0c 94 da 59 	jmp	0xb3b4	; 0xb3b4 <menu_tds_save_period(unsigned char, unsigned char)>
     208:	0c 94 2e 7f 	jmp	0xfe5c	; 0xfe5c <HardwareSerial::flush()>
     20c:	0c 94 c9 53 	jmp	0xa792	; 0xa792 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>
     210:	0c 94 55 25 	jmp	0x4aaa	; 0x4aaa <menu_redraw_change_term_mode(unsigned char, unsigned char)>
     214:	0c 94 66 53 	jmp	0xa6cc	; 0xa6cc <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>
     218:	0c 94 1f 59 	jmp	0xb23e	; 0xb23e <display_menu_tds_set_period(unsigned char, unsigned char)>
     21c:	0c 94 64 26 	jmp	0x4cc8	; 0x4cc8 <display_enable_show(unsigned char, unsigned char)>
     220:	0c 94 5e 89 	jmp	0x112bc	; 0x112bc <turnOffPWM.lto_priv.233+0xa4>
     224:	0c 94 5f 98 	jmp	0x130be	; 0x130be <EthernetUDP::write(unsigned char const*, unsigned int)>
     228:	0c 94 a8 5f 	jmp	0xbf50	; 0xbf50 <menu_rtds_create_name(unsigned char, unsigned char)>
     22c:	0c 94 8d 99 	jmp	0x1331a	; 0x1331a <EthernetUDP::parsePacket()>
     230:	0c 94 eb 82 	jmp	0x105d6	; 0x105d6 <EthernetUDP::beginPacket(char const*, unsigned int)>
     234:	0c 94 7c 2c 	jmp	0x58f8	; 0x58f8 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     238:	0c 94 f3 7f 	jmp	0xffe6	; 0xffe6 <TwoWire::peek()>
     23c:	0c 94 fa 2f 	jmp	0x5ff4	; 0x5ff4 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     240:	0c 94 88 7e 	jmp	0xfd10	; 0xfd10 <TwoWire::onReceiveService(unsigned char*, int)>
     244:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>
     248:	0c 94 67 25 	jmp	0x4ace	; 0x4ace <click_keyboard_type(unsigned char, unsigned char)>
     24c:	0c 94 64 89 	jmp	0x112c8	; 0x112c8 <turnOffPWM.lto_priv.233+0xb0>
     250:	0c 94 4c 25 	jmp	0x4a98	; 0x4a98 <menu_redraw_update_temp(unsigned char, unsigned char)>
     254:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <EthernetClient::flush()>
     258:	0c 94 aa 5a 	jmp	0xb554	; 0xb554 <printf_via_mqtt(char, __file*)>
     25c:	0c 94 46 1e 	jmp	0x3c8c	; 0x3c8c <LCDWIKI_KBV::Get_Width() const>
     260:	0c 94 02 5a 	jmp	0xb404	; 0xb404 <menu_tds_save_offset(unsigned char, unsigned char)>
     264:	0c 94 25 25 	jmp	0x4a4a	; 0x4a4a <a2d_complete(unsigned char, unsigned int)>
     268:	0c 94 5e 5d 	jmp	0xbabc	; 0xbabc <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     26c:	0c 94 b6 80 	jmp	0x1016c	; 0x1016c <EthernetClient::operator bool()>
     270:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char, unsigned char)>
     274:	0c 94 89 20 	jmp	0x4112	; 0x4112 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     278:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <display_function_vertical_slider_inc(unsigned char, unsigned char)>
     27c:	0c 94 91 80 	jmp	0x10122	; 0x10122 <EthernetUDP::available()>
     280:	0c 94 b6 9c 	jmp	0x1396c	; 0x1396c <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7058>
     284:	0c 94 f2 7f 	jmp	0xffe4	; 0xffe4 <TwoWire::flush()>
     288:	0c 94 b1 2b 	jmp	0x5762	; 0x5762 <display_element_set_string_del_char(unsigned char, unsigned char)>
     28c:	0c 94 9b 5b 	jmp	0xb736	; 0xb736 <get_function_default_temp(unsigned char, unsigned char, char*, char*)>
     290:	0c 94 fd 1f 	jmp	0x3ffa	; 0x3ffa <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     294:	0c 94 d8 5f 	jmp	0xbfb0	; 0xbfb0 <click_rtds_subscribe(unsigned char, unsigned char)>
     298:	0c 94 b6 24 	jmp	0x496c	; 0x496c <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     29c:	0c 94 15 54 	jmp	0xa82a	; 0xa82a <click_thermostat_set_mode(unsigned char)>
     2a0:	0c 94 a1 54 	jmp	0xa942	; 0xa942 <get_funtion_change_default_ring_button_labels(unsigned char, unsigned char, char*, char*)>
     2a4:	0c 94 bf 30 	jmp	0x617e	; 0x617e <display_element_default_ring_set_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     2a8:	0c 94 2f 53 	jmp	0xa65e	; 0xa65e <click_rtds_deassociate_onewire(unsigned char, unsigned char)>
     2ac:	0c 94 7b 80 	jmp	0x100f6	; 0x100f6 <EthernetUDP::write(unsigned char)>
     2b0:	0c 94 8d 25 	jmp	0x4b1a	; 0x4b1a <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)>
     2b4:	0c 94 c7 35 	jmp	0x6b8e	; 0x6b8e <EthernetClient::connect(char const*, unsigned int)>
     2b8:	0c 94 3d 5f 	jmp	0xbe7a	; 0xbe7a <menu_rtds_update_name(unsigned char, unsigned char)>
     2bc:	0c 94 56 89 	jmp	0x112ac	; 0x112ac <turnOffPWM.lto_priv.233+0x94>
     2c0:	0c 94 e7 9a 	jmp	0x135ce	; 0x135ce <EthernetClient::connected()>
     2c4:	0c 94 7e 26 	jmp	0x4cfc	; 0x4cfc <EthernetClient::peek()>
     2c8:	0c 94 4c 89 	jmp	0x11298	; 0x11298 <turnOffPWM.lto_priv.233+0x80>
     2cc:	0c 94 02 2d 	jmp	0x5a04	; 0x5a04 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     2d0:	0c 94 89 7e 	jmp	0xfd12	; 0xfd12 <HardwareSerial::availableForWrite()>
     2d4:	0c 94 4a 1e 	jmp	0x3c94	; 0x3c94 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     2d8:	0c 94 cf 21 	jmp	0x439e	; 0x439e <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     2dc:	0c 94 29 5b 	jmp	0xb652	; 0xb652 <click_rtds_add_sensor(unsigned char, unsigned char)>
     2e0:	0c 94 75 9a 	jmp	0x134ea	; 0x134ea <EthernetUDP::endPacket()>
     2e4:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <EthernetClient::read(unsigned char*, unsigned int)>
     2e8:	0c 94 3c 53 	jmp	0xa678	; 0xa678 <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)>
     2ec:	0c 94 9c 2b 	jmp	0x5738	; 0x5738 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int)>
     2f0:	0c 94 61 54 	jmp	0xa8c2	; 0xa8c2 <get_funtion_default_ring(unsigned char, unsigned char, char*, char*)>
     2f4:	0c 94 ac 7e 	jmp	0xfd58	; 0xfd58 <HardwareSerial::peek()>
     2f8:	0c 94 48 89 	jmp	0x11290	; 0x11290 <turnOffPWM.lto_priv.233+0x78>
     2fc:	0c 94 a8 26 	jmp	0x4d50	; 0x4d50 <EthernetClient::read()>
     300:	0c 94 a9 80 	jmp	0x10152	; 0x10152 <UDP::beginMulticast(IPAddress, unsigned int)>
     304:	0c 94 62 59 	jmp	0xb2c4	; 0xb2c4 <display_menu_tds_set_offset(unsigned char, unsigned char)>
     308:	0c 94 e3 7d 	jmp	0xfbc6	; 0xfbc6 <display_menu_rtds_update_name(unsigned char, unsigned char)>
     30c:	0c 94 50 89 	jmp	0x112a0	; 0x112a0 <turnOffPWM.lto_priv.233+0x88>
     310:	0c 94 1f 32 	jmp	0x643e	; 0x643e <click_dialog_button_yes(unsigned char, unsigned char)>
     314:	0c 94 de 99 	jmp	0x133bc	; 0x133bc <EthernetUDP::peek()>
     318:	0c 94 6a 26 	jmp	0x4cd4	; 0x4cd4 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     31c:	0c 94 3e 55 	jmp	0xaa7c	; 0xaa7c <get_function_thermostat_heat_or_cool(unsigned char)>
     320:	0c 94 ab 80 	jmp	0x10156	; 0x10156 <EthernetClient::operator==(EthernetClient const&)>
     324:	0c 94 b6 37 	jmp	0x6f6c	; 0x6f6c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     328:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)>
     32c:	0c 94 ef 2b 	jmp	0x57de	; 0x57de <click_keyboard_number(unsigned char, unsigned char, unsigned char)>
     330:	0c 94 3e 89 	jmp	0x1127c	; 0x1127c <turnOffPWM.lto_priv.233+0x64>
     334:	0c 94 15 32 	jmp	0x642a	; 0x642a <dialog_set_variable_button_click(unsigned char, unsigned char)>
     338:	0c 94 6f 82 	jmp	0x104de	; 0x104de <IPAddress::printTo(Print&) const>
     33c:	0c 94 08 25 	jmp	0x4a10	; 0x4a10 <display_function_vertical_slider_dec(unsigned char, unsigned char)>
     340:	0c 94 6a 25 	jmp	0x4ad4	; 0x4ad4 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>

00000344 <__trampolines_end>:
__trampolines_end():
     344:	4e 41       	sbci	r20, 0x1E	; 30
     346:	4e 49       	Address 0x0000000000000346 is out of bounds.
.word	0xffff	; ????

00000347 <pstr_inity>:
     347:	49 4e 49 54 59                                      INITY

0000034c <pstr_inf>:
     34c:	49 4e 46                                            INF

0000034f <pwr_m10>:
     34f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     35f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000367 <pwr_p10>:
     367:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     377:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     387:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     397:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     3a7:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     3b7:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     3c7:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     3d7:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     3e7:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     3f7:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     407:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     417:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     427:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     437:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     447:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     457:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     467:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     477:	3d 27                                               ='

00000479 <text_select_term_default_ring>:
     479:	56 79 62 65 72 20 76 79 63 68 6f 7a 69 68 6f 20     Vyber vychoziho 
     489:	72 65 67 75 6c 61 74 6f 72 75 00                    regulatoru.

00000494 <text_select_term_mode>:
     494:	56 79 62 65 72 20 6d 6f 64 75 20 72 65 67 75 6c     Vyber modu regul
     4a4:	61 74 6f 72 75 00                                   atoru.

000004aa <text_nastavit_pid>:
     4aa:	50 49 44 20 76 6f 6c 62 79 00                       PID volby.

000004b4 <text_assocoivat_output>:
     4b4:	4e 61 73 74 61 76 69 74 20 76 79 73 74 75 70 00     Nastavit vystup.

000004c4 <text_assocoivat>:
     4c4:	4e 61 73 74 61 76 69 74 20 63 69 64 6c 6f 00        Nastavit cidlo.

000004d3 <ring_text_setup>:
     4d3:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

000004dd <nastaveni_rtds_subscribe>:
     4dd:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

000004ed <text_rtds_novy>:
     4ed:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
     4fd:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

00000508 <button_mode_cool>:
     508:	43 68 6c 61 7a 65 6e 69 00                          Chlazeni.

00000511 <button_mode_heat>:
     511:	54 6f 70 65 6e 69 00                                Topeni.

00000518 <nastaveni_ring_text>:
     518:	4e 61 73 74 61 76 65 6e 69 20 72 65 67 75 6c 61     Nastaveni regula
     528:	74 6f 72 75 00                                      toru.

0000052d <text_no>:
     52d:	4e 65 00                                            Ne.

00000530 <text_yes>:
     530:	41 6e 6f 00                                         Ano.

00000534 <text_special_case>:
     534:	40 00                                               @.

00000536 <text_lower_case>:
     536:	61 00                                               a.

00000538 <text_upper_case>:
     538:	41 00                                               A.

0000053a <text_delete_char>:
     53a:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

00000544 <text_klavesnice>:
     544:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

0000054f <text_zrusit>:
     54f:	5a 72 75 73 69 74 00                                Zrusit.

00000556 <text_ulozit>:
     556:	55 6c 6f 7a 69 74 00                                Ulozit.

0000055d <text_upozorneni>:
     55d:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

00000568 <nastaveni_tds_offset>:
     568:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

00000578 <nastaveni_name_sensor>:
     578:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

00000587 <nastaveni_delete_sensor>:
     587:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

00000595 <text_tds_sensors>:
     595:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
     5a5:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

000005b0 <budik_text>:
     5b0:	42 75 64 69 6b 00                                   Budik.

000005b6 <text_select_default_temp>:
     5b6:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
     5c6:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

000005d0 <button_zpet>:
     5d0:	5a 70 65 74 00                                      Zpet.

000005d5 <nastaveni_default>:
     5d5:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

000005e5 <nastaveni_nrf>:
     5e5:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

000005f3 <nastaveni_site>:
     5f3:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

00000602 <nastaveni_text>:
     602:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

0000060c <funkce_text>:
     60c:	46 75 6e 6b 63 65 00                                Funkce.

00000613 <regulator_text>:
     613:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

0000061d <Menu_All>:
     61d:	06 06 04 ed 33 13 06 22 01 96 00 aa 00 28 00 02     ....3..".....(..
     62d:	05 cc 31 08 64 26 0c 06 22 01 5a 00 aa 00 28 00     ..1.d&..".Z...(.
     63d:	02 01 cc 31 08 64 26 02 06 22 01 1e 00 aa 00 28     ...1.d&..".....(
     64d:	00 02 02 cc 31 08 64 26 00 00 00 00 00 00 00 00     ....1.d&........
	...
     6c9:	00 00 00 7f 35 0a 00 dc 00 52 00 3c 00 03 9a d6     ....5....R.<....
     6d9:	ff ff 00 15 54 29 54 0a 64 26 65 35 64 00 dc 00     ....T)T.d&e5d...
     6e9:	52 00 3c 00 03 00 f8 ff ff 01 15 54 29 54 0a 64     R.<........T)T.d
     6f9:	26 4b 35 be 00 dc 00 52 00 3c 00 03 1f 00 ff ff     &K5....R.<......
     709:	07 15 54 29 54 0a 64 26 2f 35 18 01 dc 00 52 00     ..T)T.d&/5....R.
     719:	3c 00 03 e0 ff ff ff 02 15 54 29 54 0a 64 26 17     <........T)T.d&.
     729:	35 72 01 dc 00 52 00 3c 00 03 e0 07 ff ff 08 15     5r...R.<........
     739:	54 29 54 0a 64 26 0a 00 82 00 00 5e 5d 00 00 00     T)T.d&.....^]...
     749:	00 0c 69 26 64 26 18 01 22 01 00 c6 30 00 00 00     ..i&d&.."...0...
     759:	00 0c 69 26 64 26 0a 00 1e 00 00 7c 2c 00 00 00     ..i&d&.....|,...
     769:	00 09 69 26 64 26 00 00 00 00 00 00 00 00 00 00     ..i&d&..........
	...
     865:	03 05 03 00 00 00 00 00 00 00 00 00 00 e0 01 40     ...............@
     875:	01 01 ff ff 08 5e 25 55 25 4c 25 66 26 02 06 f3     .....^%U%L%f&...
     885:	05 0a 00 28 00 be 00 28 00 02 00 69 26 08 64 26     ...(...(...i&.d&
     895:	e5 05 0a 00 64 00 be 00 28 00 02 00 69 26 08 64     ....d...(...i&.d
     8a5:	26 d5 05 0a 00 a0 00 be 00 28 00 02 00 69 26 08     &........(...i&.
     8b5:	64 26 d0 05 0a 00 dc 00 be 00 28 00 02 00 0b 32     d&........(....2
     8c5:	08 64 26 b5 34 18 01 64 00 be 00 28 00 02 06 cc     .d&.4..d...(....
     8d5:	31 08 64 26 c4 34 18 01 28 00 be 00 28 00 02 03     1.d&.4..(...(...
     8e5:	cc 31 08 64 26 b6 05 18 01 a0 00 be 00 28 00 01     .1.d&........(..
     8f5:	08 cc 31 08 64 26 00 00 00 00 00 00 00 00 00 00     ..1.d&..........
	...
     9a1:	18 01 22 01 00 c6 30 00 00 00 00 0c 69 26 64 26     .."...0.....i&d&
	...
     ac5:	00 00 07 00 01 00 00 00 00 00 02 00 00 00 00 e0     ................
     ad5:	01 40 01 01 ff ff 08 66 26 66 26 66 26 66 26 0c     .@.....f&f&f&f&.
     ae5:	06 d0 05 0a 00 dc 00 be 00 28 00 02 00 0b 32 08     .........(....2.
     af5:	64 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     d&..............
	...
     c01:	00 00 18 01 22 01 00 c6 30 00 00 00 00 0c 69 26     ...."...0.....i&
     c11:	64 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     d&..............
	...
     c31:	00 00 b0 05 0a 00 28 00 be 00 78 00 02 00 00 00     ......(...x.....
     c41:	00 01 69 26 99 25 dc 26 08 00 00 00 00 00 00 00     ..i&.%.&........
	...
     d29:	01 00 01 01 00 00 00 00 01 00 00 00 00 e0 01 40     ...............@
     d39:	01 01 ff ff 08 66 26 66 26 66 26 66 26 c4 34 d0     .....f&f&f&f&.4.
     d49:	05 0a 00 dc 00 be 00 28 00 02 00 0b 32 08 64 26     .......(....2.d&
	...
     e65:	18 01 22 01 00 c6 30 00 00 00 00 0c 69 26 64 26     .."...0.....i&d&
     e75:	9a 01 48 00 00 f4 2e 28 00 7e 00 08 69 26 64 26     ..H....(.~..i&d&
     e85:	dc 00 14 00 00 02 2d f0 00 f0 00 08 69 26 64 26     ......-.....i&d&
	...
     ed9:	00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 00     ...#...7..<<....
     ee9:	01 e6 56 e9 31 a9 24 08 00 00 00 00 00 00 00 00     ..V.1.$.........
	...
     f05:	00 00 00 2b 9a 01 1e 00 28 00 28 00 02 00 08 25     ...+....(.(....%
     f15:	08 64 26 2d 9a 01 c8 00 28 00 28 00 02 00 14 25     .d&-....(.(....%
     f25:	08 64 26 00 00 00 00 00 00 00 00 00 00 00 00 00     .d&.............
	...
     f89:	00 00 01 00 03 00 01 02 00 00 03 00 00 00 00 e0     ................
     f99:	01 40 01 01 ff ff 08 66 26 66 26 66 26 66 26 95     .@.....f&f&f&f&.
     fa9:	05 d0 05 0a 00 dc 00 be 00 28 00 02 00 0b 32 08     .........(....2.
     fb9:	64 26 87 05 18 01 be 00 be 00 28 00 02 00 db 56     d&........(....V
     fc9:	08 64 26 3b 34 18 01 8c 00 be 00 28 00 02 00 1f     .d&;4......(....
     fd9:	59 08 64 26 78 05 18 01 5a 00 be 00 28 00 02 00     Y.d&x...Z...(...
     fe9:	e6 58 08 64 26 68 05 18 01 28 00 be 00 28 00 02     .X.d&h...(...(..
     ff9:	00 62 59 08 64 26 00 00 00 00 00 00 00 00 00 00     .bY.d&..........
	...
    10c5:	00 00 18 01 22 01 00 c6 30 00 00 00 00 0c 69 26     ...."...0.....i&
    10d5:	64 26 14 00 14 00 00 67 57 00 00 00 00 08 69 26     d&.....gW.....i&
    10e5:	64 26 14 00 14 00 00 7c 58 00 00 00 00 0c 69 26     d&.....|X.....i&
    10f5:	64 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     d&..............
	...
    11ed:	05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01 40     ...............@
    11fd:	01 01 ff ff 08 66 26 66 26 66 26 66 26 5d 05 56     .....f&f&f&f&].V
    120d:	05 0a 00 c8 00 82 00 28 00 02 00 15 32 08 64 26     .......(....2.d&
    121d:	4f 05 96 00 c8 00 82 00 28 00 02 00 0b 32 08 64     O.......(....2.d
    122d:	26 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     &...............
	...
    1329:	64 00 2d 00 00 fa 2f b4 00 28 00 08 69 26 64 26     d.-.../..(..i&d&
	...
    13c9:	00 00 00 2b 3c 00 2d 00 28 00 28 00 02 00 9b 25     ...+<.-.(.(....%
    13d9:	08 64 26 2d 18 01 2d 00 28 00 28 00 02 00 bd 25     .d&-..-.(.(....%
    13e9:	08 64 26 00 00 00 00 00 00 00 00 00 00 00 00 00     .d&.............
	...
    144d:	00 00 02 00 01 00 00 02 00 00 66 0a 00 0a 00 cc     ..........f.....
    145d:	01 04 01 06 e0 ff 08 66 26 66 26 66 26 66 26 44     .......f&f&f&f&D
    146d:	05 56 05 0a 00 c8 00 82 00 28 00 02 00 15 32 08     .V.......(....2.
    147d:	64 26 4f 05 96 00 c8 00 82 00 28 00 02 00 0b 32     d&O.......(....2
    148d:	08 64 26 3a 05 2c 01 c8 00 82 00 28 00 02 00 b1     .d&:.,.....(....
    149d:	2b 08 64 26 38 05 40 01 23 00 28 00 28 00 02 00     +.d&8.@.#.(.(...
    14ad:	67 25 08 64 26 36 05 6d 01 23 00 28 00 28 00 02     g%.d&6.m.#.(.(..
    14bd:	01 67 25 08 64 26 34 05 9a 01 23 00 28 00 28 00     .g%.d&4...#.(.(.
    14cd:	02 02 67 25 08 64 26 00 00 00 00 00 00 00 00 00     ..g%.d&.........
	...
    1589:	00 00 0a 00 23 00 00 74 2f 2c 01 28 00 08 69 26     ....#..t/,.(..i&
    1599:	64 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     d&..............
	...
    164d:	00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00 00     ...P......((....
    165d:	03 71 25 d6 2b 6a 25 08 00 00 00 00 00 00 00 00     .q%.+j%.........
	...
    16b1:	06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01 04     ........g.......
    16c1:	01 06 e0 ff 08 66 26 66 26 66 26 66 26 5d 05 56     .....f&f&f&f&].V
    16d1:	05 0a 00 c8 00 82 00 28 00 02 00 15 32 08 64 26     .......(....2.d&
    16e1:	4f 05 96 00 c8 00 82 00 28 00 02 00 0b 32 08 64     O.......(....2.d
    16f1:	26 3a 05 2c 01 c8 00 82 00 28 00 02 00 b1 2b 08     &:.,.....(....+.
    1701:	64 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     d&..............
	...
    17ed:	0a 00 23 00 00 74 2f 2c 01 28 00 08 69 26 64 26     ..#..t/,.(..i&d&
	...
    18ad:	00 00 00 0a 00 3c 00 1e 00 1e 00 02 28 28 02 09     .....<......((..
    18bd:	00 00 02 8d 25 ef 2b 97 25 08 00 00 00 00 00 00     ....%.+.%.......
	...
    1911:	00 00 03 00 01 00 00 00 01 00 65 0a 00 0a 00 cc     ..........e.....
    1921:	01 04 01 06 e0 ff 08 66 26 66 26 66 26 66 26 5d     .......f&f&f&f&]
    1931:	05 30 05 1e 00 3c 00 64 00 28 00 02 00 1f 32 08     .0...<.d.(....2.
    1941:	64 26 2d 05 fa 00 3c 00 64 00 28 00 02 00 0b 32     d&-...<.d.(....2
    1951:	08 64 26 00 00 00 00 00 00 00 00 00 00 00 00 00     .d&.............
	...
    1a4d:	00 00 14 00 23 00 00 9c 2b 00 00 00 00 08 69 26     ....#...+.....i&
    1a5d:	64 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     d&..............
	...
    1b75:	02 00 01 00 00 00 00 00 64 32 00 32 00 7c 01 8c     ........d2.2.|..
    1b85:	00 06 e0 ff 08 66 26 66 26 66 26 66 26 13 06 d0     .....f&f&f&f&...
    1b95:	05 0a 00 dc 00 be 00 28 00 02 00 0b 32 08 64 26     .......(....2.d&
    1ba5:	18 05 0a 00 a0 00 be 00 28 00 01 09 cc 31 08 64     ........(....1.d
    1bb5:	26 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     &...............
	...
    1c3d:	00 11 05 f0 00 5a 00 64 00 28 00 01 00 f8 ff ff     .....Z.d.(......
    1c4d:	03 fd 53 3e 55 0a 66 53 08 05 68 01 5a 00 64 00     ..S>U.fS..h.Z.d.
    1c5d:	28 00 01 1f 00 ff ff 05 fd 53 3e 55 0a 66 53 00     (........S>U.fS.
	...
    1cb1:	18 01 22 01 00 c6 30 00 00 00 00 0c 69 26 64 26     .."...0.....i&d&
    1cc1:	8c 00 05 00 00 ec 54 00 00 00 00 08 69 26 64 26     ......T.....i&d&
    1cd1:	18 01 28 00 00 bf 30 8c 00 28 00 08 69 26 66 53     ..(...0..(..i&fS
	...
    1d25:	00 0a 00 28 00 be 00 28 00 01 01 01 00 01 01 00     ...(...(........
    1d35:	01 61 54 e4 31 4b 25 08 0a 00 64 00 be 00 28 00     .aT.1K%...d...(.
    1d45:	01 01 01 00 01 01 00 01 76 53 df 31 4b 25 08 2b     ........vS.1K%.+
    1d55:	a4 01 28 00 28 00 28 00 02 00 9b 25 08 66 53 2d     ..(.(.(....%.fS-
    1d65:	f0 00 28 00 28 00 28 00 02 00 bd 25 08 66 53 00     ..(.(.(....%.fS.
	...
    1dd5:	00 00 02 02 03 00 02 02 00 00 05 00 00 00 00 e0     ................
    1de5:	01 40 01 01 ff ff 08 66 26 66 26 66 26 c9 53 b5     .@.....f&f&f&.S.
    1df5:	34 d0 05 0a 00 dc 00 be 00 28 00 02 00 0b 32 08     4........(....2.
    1e05:	64 26 ed 04 0a 00 28 00 be 00 28 00 01 00 29 5b     d&....(...(...)[
    1e15:	08 64 26 00 00 00 00 00 00 00 00 00 00 00 00 00     .d&.............
	...
    1f11:	00 00 dc 00 14 00 00 02 2d f0 00 f0 00 08 69 26     ........-.....i&
    1f21:	64 26 18 01 22 01 00 c6 30 00 00 00 00 0c 69 26     d&.."...0.....i&
    1f31:	64 26 9a 01 48 00 01 f4 2e 28 00 7e 00 08 69 26     d&..H....(.~..i&
    1f41:	64 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     d&..............
	...
    1f85:	00 00 00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03     .....#...7..<<..
    1f95:	01 01 04 1b 5c f6 5a b6 24 08 00 00 00 00 00 00     ....\.Z.$.......
	...
    1fb5:	00 2b 9a 01 1e 00 28 00 28 00 02 01 08 25 08 64     .+....(.(....%.d
    1fc5:	26 2d 9a 01 c8 00 28 00 28 00 02 01 14 25 08 64     &-....(.(....%.d
    1fd5:	26 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     &...............
	...
    2039:	02 00 03 00 01 02 00 00 06 00 00 00 00 e0 01 40     ...............@
    2049:	01 01 ff ff 08 66 26 66 26 66 26 66 26 b5 34 d0     .....f&f&f&f&.4.
    2059:	05 0a 00 dc 00 be 00 28 00 02 00 0b 32 08 64 26     .......(....2.d&
    2069:	87 05 18 01 5a 00 be 00 28 00 02 00 2f 53 08 64     ....Z...(.../S.d
    2079:	26 78 05 18 01 28 00 be 00 28 00 02 00 e3 7d 08     &x...(...(....}.
    2089:	64 26 dd 04 18 01 8c 00 be 00 28 00 02 00 d8 5f     d&........(...._
    2099:	08 64 26 00 00 00 00 00 00 00 00 00 00 00 00 00     .d&.............
	...
    2175:	14 00 14 00 00 48 5c 00 00 00 00 0c 69 26 64 26     .....H\.....i&d&
	...
    2299:	00 00 04 00 01 00 00 00 00 00 07 00 00 00 00 e0     ................
    22a9:	01 40 01 01 ff ff 08 66 26 66 26 66 26 66 26 b6     .@.....f&f&f&f&.
    22b9:	05 d0 05 0a 00 dc 00 be 00 28 00 02 00 0b 32 08     .........(....2.
    22c9:	64 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     d&..............
	...
    23d5:	00 00 18 01 22 01 00 c6 30 00 00 00 00 0c 69 26     ...."...0.....i&
    23e5:	64 26 9a 01 48 00 02 f4 2e 28 00 56 00 08 69 26     d&..H....(.V..i&
    23f5:	64 26 05 00 1e 00 00 02 2d cc 01 b4 00 08 69 26     d&......-.....i&
    2405:	64 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     d&..............
	...
    2479:	00 2b 9a 01 1e 00 28 00 28 00 02 02 08 25 08 64     .+....(.(....%.d
    2489:	26 2d 9a 01 a0 00 28 00 28 00 02 02 14 25 08 64     &-....(.(....%.d
    2499:	26 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     &...............
	...
    24dd:	00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff ff     ....(.x.<.......
    24ed:	82 50 02 03 02 02 00 9b 5b f1 52 a3 24 9d 24 08     .P......[.R.$.$.
    24fd:	01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01 40     ...............@
    250d:	01 01 ff ff 08 66 26 66 26 66 26 66 26 d3 04 d0     .....f&f&f&f&...
    251d:	05 0a 00 dc 00 be 00 28 00 02 00 0b 32 08 64 26     .......(....2.d&
    252d:	78 05 18 01 28 00 be 00 28 00 01 00 69 26 08 64     x...(...(...i&.d
    253d:	26 c4 04 18 01 64 00 be 00 28 00 01 00 69 26 08     &....d...(...i&.
    254d:	64 26 b4 04 18 01 a0 00 be 00 28 00 01 00 69 26     d&........(...i&
    255d:	08 64 26 aa 04 18 01 dc 00 be 00 28 00 01 00 69     .d&........(...i
    256d:	26 08 64 26 00 00 00 00 00 00 00 00 00 00 00 00     &.d&............
	...
    2639:	18 01 22 01 00 c6 30 00 00 00 00 0c 69 26 64 26     .."...0.....i&d&
    2649:	8c 00 05 00 00 ec 54 00 00 00 00 08 69 26 64 26     ......T.....i&d&
	...
    275d:	00 00 05 00 02 00 00 00 00 00 09 00 00 00 00 e0     ................
    276d:	01 40 01 01 ff ff 08 66 26 66 26 66 26 66 26 94     .@.....f&f&f&f&.
    277d:	04 d0 05 0a 00 dc 00 be 00 28 00 02 00 0b 32 08     .........(....2.
    278d:	64 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     d&..............
	...
    29a1:	00 00 e6 00 28 00 c8 00 28 00 02 01 e0 07 ff ff     ....(...(.......
    29b1:	01 32 00 05 01 ff 05 e8 26 c2 50 4b 25 3c 53 08     .2......&.PK%<S.
    29c1:	01 00 00 00 00 00 00 01 68 0a 00 0a 00 cc 01 2c     ........h......,
    29d1:	01 06 e0 ff 08 66 26 66 26 66 26 66 26 79 04 d0     .....f&f&f&f&y..
    29e1:	05 0a 00 dc 00 be 00 28 00 02 00 0b 32 08 64 26     .......(....2.d&
	...
    2c05:	0a 00 28 00 78 00 32 00 02 01 e0 07 ff ff 82 3c     ..(.x.2........<
    2c15:	02 03 03 ff 05 a1 54 68 26 4b 25 9b 24 08 01 00     ......Th&K%.$...
    2c25:	00 00 00 00 00 01 0a 0a 00 0a 00 cc 01 2c 01 06     .............,..
    2c35:	e0 ff 08 66 26 66 26 66 26 66 26 00 00 00 00 00     ...f&f&f&f&.....
	...

00003104 <keyboad_number_char_special>:
    3104:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    3114:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

0000311e <keyboad_number_char_lower>:
    311e:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    312e:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

00003138 <keyboad_number_char_upper>:
    3138:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    3148:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

00003152 <network_name>:
    3152:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

0000315f <network_mqtt_key>:
    315f:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

00003170 <network_mqtt_user>:
    3170:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    3180:	72 00                                               r.

00003182 <network_mqtt_port>:
    3182:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    3192:	74 00                                               t.

00003194 <network_mqtt_host>:
    3194:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    31a4:	74 00                                               t.

000031a6 <network_ntp>:
    31a6:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

000031b2 <network_dns>:
    31b2:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

000031be <network_gw>:
    31be:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

000031c9 <network_netmask>:
    31c9:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

000031d9 <network_mac>:
    31d9:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

000031e5 <global_time_offset>:
    31e5:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    31f5:	6f 66 66 73 65 74 00                                offset.

000031fc <global_time_ntp>:
    31fc:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

0000320c <global_time_set>:
    320c:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

0000321c <termbig_header_out>:
    321c:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

0000322a <termbig_subscribe>:
    322a:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    323a:	73 63 72 69 62 65 00                                scribe.

00003241 <thermctl_subscribe>:
    3241:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    3251:	62 73 63 72 69 62 65 00                             bscribe.

00003259 <lightctl_header_out>:
    3259:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

00003268 <thermctl_header_in>:
    3268:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

00003276 <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    3276:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    3286:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    3296:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    32a6:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    32b6:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    32c6:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    32d6:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

000032e2 <text_rtc_cas>:
    32e2:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    32f2:	6e 79 00                                            ny.

000032f5 <text_ntp_cas>:
    32f5:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    3305:	63 61 73 00                                         cas.

00003309 <text_pid_regulator>:
    3309:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

00003317 <text_nrf_rozhrani>:
    3317:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

00003324 <text_rest_rozhrani>:
    3324:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    3334:	69 00                                               i.

00003336 <thermctl_header_out>:
    3336:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

00003345 <text_mqtt_rozhrani>:
    3345:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

00003353 <text_ethernet_rozhrani>:
    3353:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    3363:	69 00                                               i.

00003365 <text_onewire_hledam>:
    3365:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

00003372 <text_onewire_rozhrani>:
    3372:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

00003381 <text_touchscreen>:
    3381:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

0000338d <text_nastaveni_systemu>:
    338d:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    339d:	75 00                                               u.

0000339f <text_test_eeprom>:
    339f:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

000033af <text_ok>:
    33af:	4f 4b 00                                            OK.

000033b2 <text_test_ram>:
    33b2:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

000033bf <text_bezny_start>:
    33bf:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

000033cb <text_vychozi_nastaveni>:
    33cb:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    33db:	69 00                                               i.

000033dd <text_vnitrni_ochrany>:
    33dd:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

000033ed <term_title>:
    33ed:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    33fd:	6f 72 20 76 33 00                                   or v3.

00003403 <regulator_default_text>:
    3403:	56 79 63 68 6f 7a 69 20 72 65 67 75 6c 61 74 6f     Vychozi regulato
    3413:	72 3a 00                                            r:.

00003416 <current_time>:
    3416:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00003423 <current_temp>:
    3423:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    3433:	3a 00                                               :.

00003435 <text_err>:
    3435:	45 72 72 6f 72 00                                   Error.

0000343b <nastaveni_tds_period>:
    343b:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

0000344a <temp_offset_short>:
    344a:	6f 66 66 73 65 74 3a 00                             offset:.

00003452 <text_online>:
    3452:	4f 6e 6c 69 6e 65 00                                Online.

00003459 <text_last_update>:
    3459:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    3469:	7a 61 63 65 3a 00                                   zace:.

0000346f <current_temp_short>:
    346f:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

00003478 <text_nazev>:
    3478:	4e 61 7a 65 76 3a 00                                Nazev:.

0000347f <text_nastavit_tds>:
    347f:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    348f:	6c 6f 00                                            lo.

00003492 <text_not_used>:
    3492:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

0000349f <text_associovat_tds>:
    349f:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    34af:	64 6c 6f 00                                         dlo.

000034b3 <text_rtds_prefix>:
    34b3:	2f 00                                               /.

000034b5 <nastaveni_rtds>:
    34b5:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

000034c4 <nastaveni_onewire>:
    34c4:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

000034d2 <text_change_default_ring>:
    34d2:	5a 6d 65 6e 69 74 20 76 79 63 68 6f 7a 69 20 72     Zmenit vychozi r
    34e2:	65 67 75 6c 61 74 6f 72 75 00                       egulatoru.

000034ec <button_term_fan>:
    34ec:	46 41 4e 00                                         FAN.

000034f0 <text_current_ring_mode>:
    34f0:	41 6b 74 75 61 6c 6e 69 20 6d 6f 64 20 72 65 67     Aktualni mod reg
    3500:	75 6c 61 74 6f 72 75 00                             ulatoru.

00003508 <button_term_man_comment>:
    3508:	52 75 63 6e 69 20 6f 76 6c 61 64 61 6e 69 00        Rucni ovladani.

00003517 <button_term_man>:
    3517:	4d 41 4e 00                                         MAN.

0000351b <button_term_prog_comment>:
    351b:	41 75 74 6f 6d 61 74 69 63 6b 79 20 70 72 6f 67     Automaticky prog
    352b:	72 61 6d 00                                         ram.

0000352f <button_term_prog>:
    352f:	50 52 4f 47 00                                      PROG.

00003534 <button_term_min_comment>:
    3534:	43 68 6c 61 7a 65 6e 69 2c 20 62 65 7a 20 72 65     Chlazeni, bez re
    3544:	67 75 6c 61 63 65 00                                gulace.

0000354b <button_term_min>:
    354b:	4d 49 4e 00                                         MIN.

0000354f <button_term_max_comment>:
    354f:	5a 61 70 6e 75 74 6f 2c 20 62 65 7a 20 72 65 67     Zapnuto, bez reg
    355f:	75 6c 61 63 65 00                                   ulace.

00003565 <button_term_max>:
    3565:	4d 41 58 00                                         MAX.

00003569 <button_term_off_comment>:
    3569:	56 79 70 6e 75 74 6f 2c 20 6f 63 68 72 61 6e 6e     Vypnuto, ochrann
    3579:	79 20 6d 6f 64 00                                   y mod.

0000357f <button_term_off>:
    357f:	4f 46 46 00                                         OFF.

00003583 <status_know_devices>:
    3583:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    3593:	63 65 73 00                                         ces.

00003597 <_ZL10network_ip.lto_priv.232>:
    3597:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

000035a2 <status_mqtt_process>:
    35a2:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    35b2:	65 73 73 00                                         ess.

000035b6 <status_mqtt_receive>:
    35b6:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    35c6:	69 76 65 00                                         ive.

000035ca <status_mqtt_error>:
    35ca:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    35da:	72 00                                               r.

000035dc <status_mqtt_send>:
    35dc:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

000035ed <port_to_mode_PGM>:
    35ed:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

000035fd <digital_pin_to_timer_PGM>:
    35fd:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    3631:	00 03                                               ..

00003633 <lcd_font>:
    3633:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    3643:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    3653:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    3663:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    3673:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    3683:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    3693:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    36a3:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    36b3:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    36c3:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    36d3:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    36e3:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    36f3:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    3703:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    3713:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    3723:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    3733:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    3743:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    3753:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    3763:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    3773:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    3783:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    3793:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    37a3:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    37b3:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    37c3:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    37d3:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    37e3:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    37f3:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    3803:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    3813:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    3823:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    3833:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    3843:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    3853:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    3863:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    3873:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    3883:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    3893:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    38a3:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    38b3:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    38c3:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    38d3:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    38e3:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    38f3:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    3903:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    3913:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    3923:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    3933:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    3943:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    3953:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    3963:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    3973:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    3983:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    3993:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    39a3:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    39b3:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    39c3:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    39d3:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    39e3:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    39f3:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    3a03:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    3a13:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    3a23:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    3a33:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    3a43:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    3a53:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    3a63:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    3a73:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    3a83:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    3a93:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    3aa3:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    3ab3:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    3ac3:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    3ad3:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    3ae3:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    3af3:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    3b03:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    3b13:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    3b23:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00003b2e <port_to_input_PGM>:
    3b2e:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

00003b3e <digital_pin_to_bit_mask_PGM>:
    3b3e:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    3b4e:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    3b5e:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    3b6e:	08 10 20 40 80 20                                   .. @. 

00003b74 <port_to_output_PGM>:
    3b74:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00003b84 <digital_pin_to_port_PGM>:
    3b84:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    3b94:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    3ba4:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    3bb4:	06 06 06 06 06 07                                   ......

00003bba <daysInMonth>:
    3bba:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00003bc6 <__ctors_start>:
__ctors_start():
    3bc6:	b6 9c       	mul	r11, r6

00003bc8 <__ctors_end>:
__dtors_end():
    3bc8:	11 24       	eor	r1, r1
    3bca:	1f be       	out	0x3f, r1	; 63
    3bcc:	cf ef       	ldi	r28, 0xFF	; 255
    3bce:	d1 e2       	ldi	r29, 0x21	; 33
    3bd0:	de bf       	out	0x3e, r29	; 62
    3bd2:	cd bf       	out	0x3d, r28	; 61
    3bd4:	00 e0       	ldi	r16, 0x00	; 0
    3bd6:	0c bf       	out	0x3c, r16	; 60

00003bd8 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    3bd8:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    3bda:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    3bdc:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    3bde:	e2 eb       	ldi	r30, 0xB2	; 178
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    3be0:	fe e6       	ldi	r31, 0x6E	; 110
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    3be2:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    3be4:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    3be6:	02 c0       	rjmp	.+4      	; 0x3bec <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    3be8:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    3bea:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    3bec:	a2 35       	cpi	r26, 0x52	; 82
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    3bee:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    3bf0:	d9 f7       	brne	.-10     	; 0x3be8 <__do_copy_data+0x10>

00003bf2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    3bf2:	23 e1       	ldi	r18, 0x13	; 19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    3bf4:	a2 e5       	ldi	r26, 0x52	; 82
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    3bf6:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    3bf8:	01 c0       	rjmp	.+2      	; 0x3bfc <.do_clear_bss_start>

00003bfa <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    3bfa:	1d 92       	st	X+, r1

00003bfc <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    3bfc:	a1 34       	cpi	r26, 0x41	; 65
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    3bfe:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    3c00:	e1 f7       	brne	.-8      	; 0x3bfa <.do_clear_bss_loop>

00003c02 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    3c02:	1d e1       	ldi	r17, 0x1D	; 29
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    3c04:	c4 ee       	ldi	r28, 0xE4	; 228
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    3c06:	dd e1       	ldi	r29, 0x1D	; 29
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    3c08:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    3c0a:	06 c0       	rjmp	.+12     	; 0x3c18 <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    3c0c:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    3c0e:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    3c10:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    3c12:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    3c14:	0e 94 ae b5 	call	0x16b5c	; 0x16b5c <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    3c18:	c3 3e       	cpi	r28, 0xE3	; 227
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    3c1a:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    3c1e:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    3c20:	a9 f7       	brne	.-22     	; 0x3c0c <__do_global_ctors+0xa>
    3c22:	0e 94 c5 a0 	call	0x1418a	; 0x1418a <main>
    3c26:	0c 94 57 b7 	jmp	0x16eae	; 0x16eae <_exit>

00003c2a <__bad_interrupt>:
__vector_38():
    3c2a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00003c2e <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:124
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
}
    3c2e:	08 95       	ret

00003c30 <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    3c30:	cf 93       	push	r28
    3c32:	df 93       	push	r29
    3c34:	1f 92       	push	r1
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
    3c3a:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
    3c3c:	dc 01       	movw	r26, r24
    3c3e:	ed 91       	ld	r30, X+
    3c40:	fc 91       	ld	r31, X
    3c42:	02 80       	ldd	r0, Z+2	; 0x02
    3c44:	f3 81       	ldd	r31, Z+3	; 0x03
    3c46:	e0 2d       	mov	r30, r0
    3c48:	41 e0       	ldi	r20, 0x01	; 1
    3c4a:	50 e0       	ldi	r21, 0x00	; 0
    3c4c:	be 01       	movw	r22, r28
    3c4e:	6f 5f       	subi	r22, 0xFF	; 255
    3c50:	7f 4f       	sbci	r23, 0xFF	; 255
    3c52:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
    3c54:	0f 90       	pop	r0
    3c56:	df 91       	pop	r29
    3c58:	cf 91       	pop	r28
    3c5a:	08 95       	ret

00003c5c <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	ed 91       	ld	r30, X+
    3c60:	fc 91       	ld	r31, X
    3c62:	02 8c       	ldd	r0, Z+26	; 0x1a
    3c64:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3c66:	e0 2d       	mov	r30, r0
    3c68:	19 95       	eicall
    3c6a:	91 e0       	ldi	r25, 0x01	; 1
    3c6c:	89 27       	eor	r24, r25
    3c6e:	08 95       	ret

00003c70 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	08 95       	ret

00003c76 <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    3c76:	dc 01       	movw	r26, r24
    3c78:	ed 91       	ld	r30, X+
    3c7a:	fc 91       	ld	r31, X
    3c7c:	04 8c       	ldd	r0, Z+28	; 0x1c
    3c7e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    3c80:	e0 2d       	mov	r30, r0
    3c82:	19 94       	eijmp

00003c84 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:744

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
}
    3c84:	fc 01       	movw	r30, r24
    3c86:	84 89       	ldd	r24, Z+20	; 0x14
    3c88:	95 89       	ldd	r25, Z+21	; 0x15
    3c8a:	08 95       	ret

00003c8c <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:738

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
}
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	82 89       	ldd	r24, Z+18	; 0x12
    3c90:	93 89       	ldd	r25, Z+19	; 0x13
    3c92:	08 95       	ret

00003c94 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:623
	CS_IDLE;
}

//fill area from x to x+w,y to y+h
void LCDWIKI_KBV::Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    3c94:	4f 92       	push	r4
    3c96:	5f 92       	push	r5
    3c98:	6f 92       	push	r6
    3c9a:	7f 92       	push	r7
    3c9c:	8f 92       	push	r8
    3c9e:	9f 92       	push	r9
    3ca0:	af 92       	push	r10
    3ca2:	bf 92       	push	r11
    3ca4:	cf 92       	push	r12
    3ca6:	df 92       	push	r13
    3ca8:	ef 92       	push	r14
    3caa:	ff 92       	push	r15
    3cac:	0f 93       	push	r16
    3cae:	1f 93       	push	r17
    3cb0:	cf 93       	push	r28
    3cb2:	df 93       	push	r29
    3cb4:	ec 01       	movw	r28, r24
    3cb6:	5a 01       	movw	r10, r20
    3cb8:	27 01       	movw	r4, r14
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:625
	int16_t end;
	if (w < 0) 
    3cba:	37 ff       	sbrs	r19, 7
    3cbc:	05 c0       	rjmp	.+10     	; 0x3cc8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
    3cbe:	62 0f       	add	r22, r18
    3cc0:	73 1f       	adc	r23, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:627
	{
        w = -w;
    3cc2:	31 95       	neg	r19
    3cc4:	21 95       	neg	r18
    3cc6:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:630
        x -= w;
    }                           //+ve w
    end = x + w;
    3cc8:	7b 01       	movw	r14, r22
    3cca:	e2 0e       	add	r14, r18
    3ccc:	f3 1e       	adc	r15, r19
    3cce:	6b 01       	movw	r12, r22
    3cd0:	77 ff       	sbrs	r23, 7
    3cd2:	02 c0       	rjmp	.+4      	; 0x3cd8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
    3cd4:	d1 2c       	mov	r13, r1
    3cd6:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:635
    if (x < 0)
    {
        x = 0;
    }
    if (end > Get_Width())
    3cd8:	e8 81       	ld	r30, Y
    3cda:	f9 81       	ldd	r31, Y+1	; 0x01
    3cdc:	06 84       	ldd	r0, Z+14	; 0x0e
    3cde:	f7 85       	ldd	r31, Z+15	; 0x0f
    3ce0:	e0 2d       	mov	r30, r0
    3ce2:	ce 01       	movw	r24, r28
    3ce4:	19 95       	eicall
    3ce6:	8e 15       	cp	r24, r14
    3ce8:	9f 05       	cpc	r25, r15
    3cea:	44 f4       	brge	.+16     	; 0x3cfc <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:637
    {
        end = Get_Width();
    3cec:	e8 81       	ld	r30, Y
    3cee:	f9 81       	ldd	r31, Y+1	; 0x01
    3cf0:	06 84       	ldd	r0, Z+14	; 0x0e
    3cf2:	f7 85       	ldd	r31, Z+15	; 0x0f
    3cf4:	e0 2d       	mov	r30, r0
    3cf6:	ce 01       	movw	r24, r28
    3cf8:	19 95       	eicall
    3cfa:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:639
    }
    w = end - x;
    3cfc:	47 01       	movw	r8, r14
    3cfe:	8c 18       	sub	r8, r12
    3d00:	9d 08       	sbc	r9, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:640
    if (h < 0) 
    3d02:	17 ff       	sbrs	r17, 7
    3d04:	05 c0       	rjmp	.+10     	; 0x3d10 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
    3d06:	a0 0e       	add	r10, r16
    3d08:	b1 1e       	adc	r11, r17
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:642
	{
        h = -h;
    3d0a:	11 95       	neg	r17
    3d0c:	01 95       	neg	r16
    3d0e:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:645
        y -= h;
    }                           //+ve h
    end = y + h;
    3d10:	0a 0d       	add	r16, r10
    3d12:	1b 1d       	adc	r17, r11
    3d14:	b7 fe       	sbrs	r11, 7
    3d16:	02 c0       	rjmp	.+4      	; 0x3d1c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
    3d18:	b1 2c       	mov	r11, r1
    3d1a:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:650
    if (y < 0)
    {
        y = 0;
    }
    if (end > Get_Height())
    3d1c:	e8 81       	ld	r30, Y
    3d1e:	f9 81       	ldd	r31, Y+1	; 0x01
    3d20:	04 84       	ldd	r0, Z+12	; 0x0c
    3d22:	f5 85       	ldd	r31, Z+13	; 0x0d
    3d24:	e0 2d       	mov	r30, r0
    3d26:	ce 01       	movw	r24, r28
    3d28:	19 95       	eicall
    3d2a:	80 17       	cp	r24, r16
    3d2c:	91 07       	cpc	r25, r17
    3d2e:	44 f4       	brge	.+16     	; 0x3d40 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:652
    {
        end = Get_Height();
    3d30:	e8 81       	ld	r30, Y
    3d32:	f9 81       	ldd	r31, Y+1	; 0x01
    3d34:	04 84       	ldd	r0, Z+12	; 0x0c
    3d36:	f5 85       	ldd	r31, Z+13	; 0x0d
    3d38:	e0 2d       	mov	r30, r0
    3d3a:	ce 01       	movw	r24, r28
    3d3c:	19 95       	eicall
    3d3e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:654
    }
    h = end - y;
    3d40:	38 01       	movw	r6, r16
    3d42:	6a 18       	sub	r6, r10
    3d44:	7b 08       	sbc	r7, r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:655
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);//set area
    3d46:	01 50       	subi	r16, 0x01	; 1
    3d48:	11 09       	sbc	r17, r1
    3d4a:	97 01       	movw	r18, r14
    3d4c:	21 50       	subi	r18, 0x01	; 1
    3d4e:	31 09       	sbc	r19, r1
    3d50:	e8 81       	ld	r30, Y
    3d52:	f9 81       	ldd	r31, Y+1	; 0x01
    3d54:	06 80       	ldd	r0, Z+6	; 0x06
    3d56:	f7 81       	ldd	r31, Z+7	; 0x07
    3d58:	e0 2d       	mov	r30, r0
    3d5a:	a5 01       	movw	r20, r10
    3d5c:	b6 01       	movw	r22, r12
    3d5e:	ce 01       	movw	r24, r28
    3d60:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:656
	CS_ACTIVE;
    3d62:	ee a5       	ldd	r30, Y+46	; 0x2e
    3d64:	ff a5       	ldd	r31, Y+47	; 0x2f
    3d66:	80 81       	ld	r24, Z
    3d68:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d6a:	89 23       	and	r24, r25
    3d6c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:657
    if(lcd_driver == ID_932X)
    3d6e:	88 8d       	ldd	r24, Y+24	; 0x18
    3d70:	99 8d       	ldd	r25, Y+25	; 0x19
    3d72:	89 2b       	or	r24, r25
    3d74:	c9 f4       	brne	.+50     	; 0x3da8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:659
	{
		writeCmd8(ILI932X_START_OSC);
    3d76:	e8 a9       	ldd	r30, Y+48	; 0x30
    3d78:	f9 a9       	ldd	r31, Y+49	; 0x31
    3d7a:	80 81       	ld	r24, Z
    3d7c:	9b ad       	ldd	r25, Y+59	; 0x3b
    3d7e:	89 23       	and	r24, r25
    3d80:	80 83       	st	Z, r24
    3d82:	12 b8       	out	0x02, r1	; 2
    3d84:	ea a9       	ldd	r30, Y+50	; 0x32
    3d86:	fb a9       	ldd	r31, Y+51	; 0x33
    3d88:	80 81       	ld	r24, Z
    3d8a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3d8c:	89 23       	and	r24, r25
    3d8e:	80 83       	st	Z, r24
    3d90:	ea a9       	ldd	r30, Y+50	; 0x32
    3d92:	fb a9       	ldd	r31, Y+51	; 0x33
    3d94:	80 81       	ld	r24, Z
    3d96:	98 ad       	ldd	r25, Y+56	; 0x38
    3d98:	89 2b       	or	r24, r25
    3d9a:	80 83       	st	Z, r24
    3d9c:	e8 a9       	ldd	r30, Y+48	; 0x30
    3d9e:	f9 a9       	ldd	r31, Y+49	; 0x31
    3da0:	80 81       	ld	r24, Z
    3da2:	9f a9       	ldd	r25, Y+55	; 0x37
    3da4:	89 2b       	or	r24, r25
    3da6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:662
			
	}
	writeCmd8(CC);	
    3da8:	e8 a9       	ldd	r30, Y+48	; 0x30
    3daa:	f9 a9       	ldd	r31, Y+49	; 0x31
    3dac:	80 81       	ld	r24, Z
    3dae:	9b ad       	ldd	r25, Y+59	; 0x3b
    3db0:	89 23       	and	r24, r25
    3db2:	80 83       	st	Z, r24
    3db4:	88 a1       	ldd	r24, Y+32	; 0x20
    3db6:	82 b9       	out	0x02, r24	; 2
    3db8:	ea a9       	ldd	r30, Y+50	; 0x32
    3dba:	fb a9       	ldd	r31, Y+51	; 0x33
    3dbc:	80 81       	ld	r24, Z
    3dbe:	9c ad       	ldd	r25, Y+60	; 0x3c
    3dc0:	89 23       	and	r24, r25
    3dc2:	80 83       	st	Z, r24
    3dc4:	ea a9       	ldd	r30, Y+50	; 0x32
    3dc6:	fb a9       	ldd	r31, Y+51	; 0x33
    3dc8:	80 81       	ld	r24, Z
    3dca:	98 ad       	ldd	r25, Y+56	; 0x38
    3dcc:	89 2b       	or	r24, r25
    3dce:	80 83       	st	Z, r24
    3dd0:	e8 a9       	ldd	r30, Y+48	; 0x30
    3dd2:	f9 a9       	ldd	r31, Y+49	; 0x31
    3dd4:	80 81       	ld	r24, Z
    3dd6:	9f a9       	ldd	r25, Y+55	; 0x37
    3dd8:	89 2b       	or	r24, r25
    3dda:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:663
	if (h > w) 
    3ddc:	86 14       	cp	r8, r6
    3dde:	97 04       	cpc	r9, r7
    3de0:	2c f0       	brlt	.+10     	; 0x3dec <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
    3de2:	96 2d       	mov	r25, r6
    3de4:	87 2d       	mov	r24, r7
    3de6:	34 01       	movw	r6, r8
    3de8:	89 2e       	mov	r8, r25
    3dea:	98 2e       	mov	r9, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:669
	{
        end = h;
        h = w;
        w = end;
    }
	while (h-- > 0) 
    3dec:	18 14       	cp	r1, r8
    3dee:	19 04       	cpc	r1, r9
    3df0:	0c f5       	brge	.+66     	; 0x3e34 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:671
	{
		end = w;
    3df2:	c3 01       	movw	r24, r6
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:674
		do 
		{
   			writeData16(color);//set color data
    3df4:	52 b8       	out	0x02, r5	; 2
    3df6:	ea a9       	ldd	r30, Y+50	; 0x32
    3df8:	fb a9       	ldd	r31, Y+51	; 0x33
    3dfa:	20 81       	ld	r18, Z
    3dfc:	3c ad       	ldd	r19, Y+60	; 0x3c
    3dfe:	23 23       	and	r18, r19
    3e00:	20 83       	st	Z, r18
    3e02:	ea a9       	ldd	r30, Y+50	; 0x32
    3e04:	fb a9       	ldd	r31, Y+51	; 0x33
    3e06:	20 81       	ld	r18, Z
    3e08:	38 ad       	ldd	r19, Y+56	; 0x38
    3e0a:	23 2b       	or	r18, r19
    3e0c:	20 83       	st	Z, r18
    3e0e:	42 b8       	out	0x02, r4	; 2
    3e10:	ea a9       	ldd	r30, Y+50	; 0x32
    3e12:	fb a9       	ldd	r31, Y+51	; 0x33
    3e14:	20 81       	ld	r18, Z
    3e16:	3c ad       	ldd	r19, Y+60	; 0x3c
    3e18:	23 23       	and	r18, r19
    3e1a:	20 83       	st	Z, r18
    3e1c:	ea a9       	ldd	r30, Y+50	; 0x32
    3e1e:	fb a9       	ldd	r31, Y+51	; 0x33
    3e20:	20 81       	ld	r18, Z
    3e22:	38 ad       	ldd	r19, Y+56	; 0x38
    3e24:	23 2b       	or	r18, r19
    3e26:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:675
        } while (--end != 0);
    3e28:	01 97       	sbiw	r24, 0x01	; 1
    3e2a:	21 f7       	brne	.-56     	; 0x3df4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	88 1a       	sub	r8, r24
    3e30:	91 08       	sbc	r9, r1
    3e32:	dc cf       	rjmp	.-72     	; 0x3dec <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:677
	}
	if(lcd_driver == ID_932X)
    3e34:	88 8d       	ldd	r24, Y+24	; 0x18
    3e36:	99 8d       	ldd	r25, Y+25	; 0x19
    3e38:	00 97       	sbiw	r24, 0x00	; 0
    3e3a:	51 f5       	brne	.+84     	; 0x3e90 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:679
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
    3e3c:	0c 89       	ldd	r16, Y+20	; 0x14
    3e3e:	1d 89       	ldd	r17, Y+21	; 0x15
    3e40:	01 50       	subi	r16, 0x01	; 1
    3e42:	11 09       	sbc	r17, r1
    3e44:	2a 89       	ldd	r18, Y+18	; 0x12
    3e46:	3b 89       	ldd	r19, Y+19	; 0x13
    3e48:	21 50       	subi	r18, 0x01	; 1
    3e4a:	31 09       	sbc	r19, r1
    3e4c:	e8 81       	ld	r30, Y
    3e4e:	f9 81       	ldd	r31, Y+1	; 0x01
    3e50:	06 80       	ldd	r0, Z+6	; 0x06
    3e52:	f7 81       	ldd	r31, Z+7	; 0x07
    3e54:	e0 2d       	mov	r30, r0
    3e56:	50 e0       	ldi	r21, 0x00	; 0
    3e58:	40 e0       	ldi	r20, 0x00	; 0
    3e5a:	70 e0       	ldi	r23, 0x00	; 0
    3e5c:	60 e0       	ldi	r22, 0x00	; 0
    3e5e:	ce 01       	movw	r24, r28
    3e60:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:685
	}
	else if(lcd_driver == ID_7575)
	{
		Set_LR();
	}
	CS_IDLE;
    3e62:	ee a5       	ldd	r30, Y+46	; 0x2e
    3e64:	ff a5       	ldd	r31, Y+47	; 0x2f
    3e66:	80 81       	ld	r24, Z
    3e68:	9e a9       	ldd	r25, Y+54	; 0x36
    3e6a:	89 2b       	or	r24, r25
    3e6c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:686
}
    3e6e:	df 91       	pop	r29
    3e70:	cf 91       	pop	r28
    3e72:	1f 91       	pop	r17
    3e74:	0f 91       	pop	r16
    3e76:	ff 90       	pop	r15
    3e78:	ef 90       	pop	r14
    3e7a:	df 90       	pop	r13
    3e7c:	cf 90       	pop	r12
    3e7e:	bf 90       	pop	r11
    3e80:	af 90       	pop	r10
    3e82:	9f 90       	pop	r9
    3e84:	8f 90       	pop	r8
    3e86:	7f 90       	pop	r7
    3e88:	6f 90       	pop	r6
    3e8a:	5f 90       	pop	r5
    3e8c:	4f 90       	pop	r4
    3e8e:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:681
	}
	if(lcd_driver == ID_932X)
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
	}
	else if(lcd_driver == ID_7575)
    3e90:	01 97       	sbiw	r24, 0x01	; 1
    3e92:	39 f7       	brne	.-50     	; 0x3e62 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
    3e94:	ee a5       	ldd	r30, Y+46	; 0x2e
    3e96:	ff a5       	ldd	r31, Y+47	; 0x2f
Set_LR():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:408
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void LCDWIKI_KBV::Set_LR(void)
{
	CS_ACTIVE;
    3e98:	80 81       	ld	r24, Z
    3e9a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e9c:	89 23       	and	r24, r25
    3e9e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:409
	writeCmdData8(HX8347G_COLADDREND_HI,(width -1)>>8);
    3ea0:	e8 a9       	ldd	r30, Y+48	; 0x30
    3ea2:	f9 a9       	ldd	r31, Y+49	; 0x31
    3ea4:	80 81       	ld	r24, Z
    3ea6:	9b ad       	ldd	r25, Y+59	; 0x3b
    3ea8:	89 23       	and	r24, r25
    3eaa:	80 83       	st	Z, r24
    3eac:	84 e0       	ldi	r24, 0x04	; 4
    3eae:	82 b9       	out	0x02, r24	; 2
    3eb0:	ea a9       	ldd	r30, Y+50	; 0x32
    3eb2:	fb a9       	ldd	r31, Y+51	; 0x33
    3eb4:	80 81       	ld	r24, Z
    3eb6:	9c ad       	ldd	r25, Y+60	; 0x3c
    3eb8:	89 23       	and	r24, r25
    3eba:	80 83       	st	Z, r24
    3ebc:	ea a9       	ldd	r30, Y+50	; 0x32
    3ebe:	fb a9       	ldd	r31, Y+51	; 0x33
    3ec0:	80 81       	ld	r24, Z
    3ec2:	98 ad       	ldd	r25, Y+56	; 0x38
    3ec4:	89 2b       	or	r24, r25
    3ec6:	80 83       	st	Z, r24
    3ec8:	e8 a9       	ldd	r30, Y+48	; 0x30
    3eca:	f9 a9       	ldd	r31, Y+49	; 0x31
    3ecc:	80 81       	ld	r24, Z
    3ece:	9f a9       	ldd	r25, Y+55	; 0x37
    3ed0:	89 2b       	or	r24, r25
    3ed2:	80 83       	st	Z, r24
    3ed4:	8a 89       	ldd	r24, Y+18	; 0x12
    3ed6:	9b 89       	ldd	r25, Y+19	; 0x13
    3ed8:	01 97       	sbiw	r24, 0x01	; 1
    3eda:	92 b9       	out	0x02, r25	; 2
    3edc:	ea a9       	ldd	r30, Y+50	; 0x32
    3ede:	fb a9       	ldd	r31, Y+51	; 0x33
    3ee0:	80 81       	ld	r24, Z
    3ee2:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ee4:	89 23       	and	r24, r25
    3ee6:	80 83       	st	Z, r24
    3ee8:	ea a9       	ldd	r30, Y+50	; 0x32
    3eea:	fb a9       	ldd	r31, Y+51	; 0x33
    3eec:	80 81       	ld	r24, Z
    3eee:	98 ad       	ldd	r25, Y+56	; 0x38
    3ef0:	89 2b       	or	r24, r25
    3ef2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:410
	writeCmdData8(HX8347G_COLADDREND_LO,width -1);
    3ef4:	e8 a9       	ldd	r30, Y+48	; 0x30
    3ef6:	f9 a9       	ldd	r31, Y+49	; 0x31
    3ef8:	80 81       	ld	r24, Z
    3efa:	9b ad       	ldd	r25, Y+59	; 0x3b
    3efc:	89 23       	and	r24, r25
    3efe:	80 83       	st	Z, r24
    3f00:	85 e0       	ldi	r24, 0x05	; 5
    3f02:	82 b9       	out	0x02, r24	; 2
    3f04:	ea a9       	ldd	r30, Y+50	; 0x32
    3f06:	fb a9       	ldd	r31, Y+51	; 0x33
    3f08:	80 81       	ld	r24, Z
    3f0a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f0c:	89 23       	and	r24, r25
    3f0e:	80 83       	st	Z, r24
    3f10:	ea a9       	ldd	r30, Y+50	; 0x32
    3f12:	fb a9       	ldd	r31, Y+51	; 0x33
    3f14:	80 81       	ld	r24, Z
    3f16:	98 ad       	ldd	r25, Y+56	; 0x38
    3f18:	89 2b       	or	r24, r25
    3f1a:	80 83       	st	Z, r24
    3f1c:	e8 a9       	ldd	r30, Y+48	; 0x30
    3f1e:	f9 a9       	ldd	r31, Y+49	; 0x31
    3f20:	80 81       	ld	r24, Z
    3f22:	9f a9       	ldd	r25, Y+55	; 0x37
    3f24:	89 2b       	or	r24, r25
    3f26:	80 83       	st	Z, r24
    3f28:	8a 89       	ldd	r24, Y+18	; 0x12
    3f2a:	81 50       	subi	r24, 0x01	; 1
    3f2c:	82 b9       	out	0x02, r24	; 2
    3f2e:	ea a9       	ldd	r30, Y+50	; 0x32
    3f30:	fb a9       	ldd	r31, Y+51	; 0x33
    3f32:	80 81       	ld	r24, Z
    3f34:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f36:	89 23       	and	r24, r25
    3f38:	80 83       	st	Z, r24
    3f3a:	ea a9       	ldd	r30, Y+50	; 0x32
    3f3c:	fb a9       	ldd	r31, Y+51	; 0x33
    3f3e:	80 81       	ld	r24, Z
    3f40:	98 ad       	ldd	r25, Y+56	; 0x38
    3f42:	89 2b       	or	r24, r25
    3f44:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:411
	writeCmdData8(HX8347G_ROWADDREND_HI,(height -1)>>8);
    3f46:	e8 a9       	ldd	r30, Y+48	; 0x30
    3f48:	f9 a9       	ldd	r31, Y+49	; 0x31
    3f4a:	80 81       	ld	r24, Z
    3f4c:	9b ad       	ldd	r25, Y+59	; 0x3b
    3f4e:	89 23       	and	r24, r25
    3f50:	80 83       	st	Z, r24
    3f52:	88 e0       	ldi	r24, 0x08	; 8
    3f54:	82 b9       	out	0x02, r24	; 2
    3f56:	ea a9       	ldd	r30, Y+50	; 0x32
    3f58:	fb a9       	ldd	r31, Y+51	; 0x33
    3f5a:	80 81       	ld	r24, Z
    3f5c:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f5e:	89 23       	and	r24, r25
    3f60:	80 83       	st	Z, r24
    3f62:	ea a9       	ldd	r30, Y+50	; 0x32
    3f64:	fb a9       	ldd	r31, Y+51	; 0x33
    3f66:	80 81       	ld	r24, Z
    3f68:	98 ad       	ldd	r25, Y+56	; 0x38
    3f6a:	89 2b       	or	r24, r25
    3f6c:	80 83       	st	Z, r24
    3f6e:	e8 a9       	ldd	r30, Y+48	; 0x30
    3f70:	f9 a9       	ldd	r31, Y+49	; 0x31
    3f72:	80 81       	ld	r24, Z
    3f74:	9f a9       	ldd	r25, Y+55	; 0x37
    3f76:	89 2b       	or	r24, r25
    3f78:	80 83       	st	Z, r24
    3f7a:	8c 89       	ldd	r24, Y+20	; 0x14
    3f7c:	9d 89       	ldd	r25, Y+21	; 0x15
    3f7e:	01 97       	sbiw	r24, 0x01	; 1
    3f80:	92 b9       	out	0x02, r25	; 2
    3f82:	ea a9       	ldd	r30, Y+50	; 0x32
    3f84:	fb a9       	ldd	r31, Y+51	; 0x33
    3f86:	80 81       	ld	r24, Z
    3f88:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f8a:	89 23       	and	r24, r25
    3f8c:	80 83       	st	Z, r24
    3f8e:	ea a9       	ldd	r30, Y+50	; 0x32
    3f90:	fb a9       	ldd	r31, Y+51	; 0x33
    3f92:	80 81       	ld	r24, Z
    3f94:	98 ad       	ldd	r25, Y+56	; 0x38
    3f96:	89 2b       	or	r24, r25
    3f98:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:412
	writeCmdData8(HX8347G_ROWADDREND_LO,height -1);
    3f9a:	e8 a9       	ldd	r30, Y+48	; 0x30
    3f9c:	f9 a9       	ldd	r31, Y+49	; 0x31
    3f9e:	80 81       	ld	r24, Z
    3fa0:	9b ad       	ldd	r25, Y+59	; 0x3b
    3fa2:	89 23       	and	r24, r25
    3fa4:	80 83       	st	Z, r24
    3fa6:	89 e0       	ldi	r24, 0x09	; 9
    3fa8:	82 b9       	out	0x02, r24	; 2
    3faa:	ea a9       	ldd	r30, Y+50	; 0x32
    3fac:	fb a9       	ldd	r31, Y+51	; 0x33
    3fae:	80 81       	ld	r24, Z
    3fb0:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fb2:	89 23       	and	r24, r25
    3fb4:	80 83       	st	Z, r24
    3fb6:	ea a9       	ldd	r30, Y+50	; 0x32
    3fb8:	fb a9       	ldd	r31, Y+51	; 0x33
    3fba:	80 81       	ld	r24, Z
    3fbc:	98 ad       	ldd	r25, Y+56	; 0x38
    3fbe:	89 2b       	or	r24, r25
    3fc0:	80 83       	st	Z, r24
    3fc2:	e8 a9       	ldd	r30, Y+48	; 0x30
    3fc4:	f9 a9       	ldd	r31, Y+49	; 0x31
    3fc6:	80 81       	ld	r24, Z
    3fc8:	9f a9       	ldd	r25, Y+55	; 0x37
    3fca:	89 2b       	or	r24, r25
    3fcc:	80 83       	st	Z, r24
    3fce:	8c 89       	ldd	r24, Y+20	; 0x14
    3fd0:	81 50       	subi	r24, 0x01	; 1
    3fd2:	82 b9       	out	0x02, r24	; 2
    3fd4:	ea a9       	ldd	r30, Y+50	; 0x32
    3fd6:	fb a9       	ldd	r31, Y+51	; 0x33
    3fd8:	80 81       	ld	r24, Z
    3fda:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fdc:	89 23       	and	r24, r25
    3fde:	80 83       	st	Z, r24
    3fe0:	ea a9       	ldd	r30, Y+50	; 0x32
    3fe2:	fb a9       	ldd	r31, Y+51	; 0x33
    3fe4:	80 81       	ld	r24, Z
    3fe6:	98 ad       	ldd	r25, Y+56	; 0x38
    3fe8:	89 2b       	or	r24, r25
    3fea:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:413
	CS_IDLE;
    3fec:	ee a5       	ldd	r30, Y+46	; 0x2e
    3fee:	ff a5       	ldd	r31, Y+47	; 0x2f
    3ff0:	80 81       	ld	r24, Z
    3ff2:	9e a9       	ldd	r25, Y+54	; 0x36
    3ff4:	89 2b       	or	r24, r25
    3ff6:	80 83       	st	Z, r24
    3ff8:	34 cf       	rjmp	.-408    	; 0x3e62 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

00003ffa <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:610
	}
}

//set x,y  coordinate and color to draw a pixel point 
void LCDWIKI_KBV::Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
    3ffa:	af 92       	push	r10
    3ffc:	bf 92       	push	r11
    3ffe:	cf 92       	push	r12
    4000:	df 92       	push	r13
    4002:	ef 92       	push	r14
    4004:	ff 92       	push	r15
    4006:	0f 93       	push	r16
    4008:	1f 93       	push	r17
    400a:	cf 93       	push	r28
    400c:	df 93       	push	r29
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:611
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
    400e:	77 fd       	sbrc	r23, 7
    4010:	75 c0       	rjmp	.+234    	; 0x40fc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    4012:	57 fd       	sbrc	r21, 7
    4014:	73 c0       	rjmp	.+230    	; 0x40fc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    4016:	c3 2e       	mov	r12, r19
    4018:	d2 2e       	mov	r13, r18
    401a:	5a 01       	movw	r10, r20
    401c:	7b 01       	movw	r14, r22
    401e:	ec 01       	movw	r28, r24
    4020:	e8 81       	ld	r30, Y
    4022:	f9 81       	ldd	r31, Y+1	; 0x01
    4024:	06 84       	ldd	r0, Z+14	; 0x0e
    4026:	f7 85       	ldd	r31, Z+15	; 0x0f
    4028:	e0 2d       	mov	r30, r0
    402a:	19 95       	eicall
    402c:	8e 15       	cp	r24, r14
    402e:	9f 05       	cpc	r25, r15
    4030:	0c f4       	brge	.+2      	; 0x4034 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
    4032:	64 c0       	rjmp	.+200    	; 0x40fc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    4034:	e8 81       	ld	r30, Y
    4036:	f9 81       	ldd	r31, Y+1	; 0x01
    4038:	04 84       	ldd	r0, Z+12	; 0x0c
    403a:	f5 85       	ldd	r31, Z+13	; 0x0d
    403c:	e0 2d       	mov	r30, r0
    403e:	ce 01       	movw	r24, r28
    4040:	19 95       	eicall
    4042:	8a 15       	cp	r24, r10
    4044:	9b 05       	cpc	r25, r11
    4046:	0c f4       	brge	.+2      	; 0x404a <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
    4048:	59 c0       	rjmp	.+178    	; 0x40fc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:615
	{
		return;
	}
	Set_Addr_Window(x, y, x, y);
    404a:	e8 81       	ld	r30, Y
    404c:	f9 81       	ldd	r31, Y+1	; 0x01
    404e:	06 80       	ldd	r0, Z+6	; 0x06
    4050:	f7 81       	ldd	r31, Z+7	; 0x07
    4052:	e0 2d       	mov	r30, r0
    4054:	85 01       	movw	r16, r10
    4056:	97 01       	movw	r18, r14
    4058:	a5 01       	movw	r20, r10
    405a:	b7 01       	movw	r22, r14
    405c:	ce 01       	movw	r24, r28
    405e:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:616
	CS_ACTIVE;
    4060:	ee a5       	ldd	r30, Y+46	; 0x2e
    4062:	ff a5       	ldd	r31, Y+47	; 0x2f
    4064:	80 81       	ld	r24, Z
    4066:	9a ad       	ldd	r25, Y+58	; 0x3a
    4068:	89 23       	and	r24, r25
    406a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:617
	writeCmdData16(CC, color);
    406c:	98 a1       	ldd	r25, Y+32	; 0x20
    406e:	29 a1       	ldd	r18, Y+33	; 0x21
    4070:	e8 a9       	ldd	r30, Y+48	; 0x30
    4072:	f9 a9       	ldd	r31, Y+49	; 0x31
    4074:	80 81       	ld	r24, Z
    4076:	3b ad       	ldd	r19, Y+59	; 0x3b
    4078:	83 23       	and	r24, r19
    407a:	80 83       	st	Z, r24
    407c:	22 b9       	out	0x02, r18	; 2
    407e:	ea a9       	ldd	r30, Y+50	; 0x32
    4080:	fb a9       	ldd	r31, Y+51	; 0x33
    4082:	80 81       	ld	r24, Z
    4084:	2c ad       	ldd	r18, Y+60	; 0x3c
    4086:	82 23       	and	r24, r18
    4088:	80 83       	st	Z, r24
    408a:	ea a9       	ldd	r30, Y+50	; 0x32
    408c:	fb a9       	ldd	r31, Y+51	; 0x33
    408e:	80 81       	ld	r24, Z
    4090:	28 ad       	ldd	r18, Y+56	; 0x38
    4092:	82 2b       	or	r24, r18
    4094:	80 83       	st	Z, r24
    4096:	92 b9       	out	0x02, r25	; 2
    4098:	ea a9       	ldd	r30, Y+50	; 0x32
    409a:	fb a9       	ldd	r31, Y+51	; 0x33
    409c:	80 81       	ld	r24, Z
    409e:	9c ad       	ldd	r25, Y+60	; 0x3c
    40a0:	89 23       	and	r24, r25
    40a2:	80 83       	st	Z, r24
    40a4:	ea a9       	ldd	r30, Y+50	; 0x32
    40a6:	fb a9       	ldd	r31, Y+51	; 0x33
    40a8:	80 81       	ld	r24, Z
    40aa:	98 ad       	ldd	r25, Y+56	; 0x38
    40ac:	89 2b       	or	r24, r25
    40ae:	80 83       	st	Z, r24
    40b0:	e8 a9       	ldd	r30, Y+48	; 0x30
    40b2:	f9 a9       	ldd	r31, Y+49	; 0x31
    40b4:	80 81       	ld	r24, Z
    40b6:	9f a9       	ldd	r25, Y+55	; 0x37
    40b8:	89 2b       	or	r24, r25
    40ba:	80 83       	st	Z, r24
    40bc:	c2 b8       	out	0x02, r12	; 2
    40be:	ea a9       	ldd	r30, Y+50	; 0x32
    40c0:	fb a9       	ldd	r31, Y+51	; 0x33
    40c2:	80 81       	ld	r24, Z
    40c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    40c6:	89 23       	and	r24, r25
    40c8:	80 83       	st	Z, r24
    40ca:	ea a9       	ldd	r30, Y+50	; 0x32
    40cc:	fb a9       	ldd	r31, Y+51	; 0x33
    40ce:	80 81       	ld	r24, Z
    40d0:	98 ad       	ldd	r25, Y+56	; 0x38
    40d2:	89 2b       	or	r24, r25
    40d4:	80 83       	st	Z, r24
    40d6:	d2 b8       	out	0x02, r13	; 2
    40d8:	ea a9       	ldd	r30, Y+50	; 0x32
    40da:	fb a9       	ldd	r31, Y+51	; 0x33
    40dc:	80 81       	ld	r24, Z
    40de:	9c ad       	ldd	r25, Y+60	; 0x3c
    40e0:	89 23       	and	r24, r25
    40e2:	80 83       	st	Z, r24
    40e4:	ea a9       	ldd	r30, Y+50	; 0x32
    40e6:	fb a9       	ldd	r31, Y+51	; 0x33
    40e8:	80 81       	ld	r24, Z
    40ea:	98 ad       	ldd	r25, Y+56	; 0x38
    40ec:	89 2b       	or	r24, r25
    40ee:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:618
	CS_IDLE;
    40f0:	ee a5       	ldd	r30, Y+46	; 0x2e
    40f2:	ff a5       	ldd	r31, Y+47	; 0x2f
    40f4:	80 81       	ld	r24, Z
    40f6:	9e a9       	ldd	r25, Y+54	; 0x36
    40f8:	89 2b       	or	r24, r25
    40fa:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:619
}
    40fc:	df 91       	pop	r29
    40fe:	cf 91       	pop	r28
    4100:	1f 91       	pop	r17
    4102:	0f 91       	pop	r16
    4104:	ff 90       	pop	r15
    4106:	ef 90       	pop	r14
    4108:	df 90       	pop	r13
    410a:	cf 90       	pop	r12
    410c:	bf 90       	pop	r11
    410e:	af 90       	pop	r10
    4110:	08 95       	ret

00004112 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:518
    return ret;
}

//read graph RAM data
int16_t LCDWIKI_KBV::Read_GRAM(int16_t x, int16_t y, uint16_t *block, int16_t w, int16_t h)
{
    4112:	7f 92       	push	r7
    4114:	8f 92       	push	r8
    4116:	9f 92       	push	r9
    4118:	af 92       	push	r10
    411a:	bf 92       	push	r11
    411c:	cf 92       	push	r12
    411e:	df 92       	push	r13
    4120:	ef 92       	push	r14
    4122:	ff 92       	push	r15
    4124:	0f 93       	push	r16
    4126:	1f 93       	push	r17
    4128:	cf 93       	push	r28
    412a:	df 93       	push	r29
    412c:	ec 01       	movw	r28, r24
    412e:	59 01       	movw	r10, r18
    4130:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:520
	uint16_t ret, dummy;
    int16_t n = w * h;
    4132:	0e 9d       	mul	r16, r14
    4134:	60 01       	movw	r12, r0
    4136:	0f 9d       	mul	r16, r15
    4138:	d0 0c       	add	r13, r0
    413a:	1e 9d       	mul	r17, r14
    413c:	d0 0c       	add	r13, r0
    413e:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:522
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    4140:	87 01       	movw	r16, r14
    4142:	04 0f       	add	r16, r20
    4144:	15 1f       	adc	r17, r21
    4146:	01 50       	subi	r16, 0x01	; 1
    4148:	11 09       	sbc	r17, r1
    414a:	26 0f       	add	r18, r22
    414c:	37 1f       	adc	r19, r23
    414e:	21 50       	subi	r18, 0x01	; 1
    4150:	31 09       	sbc	r19, r1
    4152:	e8 81       	ld	r30, Y
    4154:	f9 81       	ldd	r31, Y+1	; 0x01
    4156:	06 80       	ldd	r0, Z+6	; 0x06
    4158:	f7 81       	ldd	r31, Z+7	; 0x07
    415a:	e0 2d       	mov	r30, r0
    415c:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    415e:	77 24       	eor	r7, r7
    4160:	7a 94       	dec	r7
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:523
{
	uint16_t ret, dummy;
    int16_t n = w * h;
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    while (n > 0) 
    4162:	1c 14       	cp	r1, r12
    4164:	1d 04       	cpc	r1, r13
    4166:	0c f0       	brlt	.+2      	; 0x416a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
    4168:	0a c1       	rjmp	.+532    	; 0x437e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:525
	{
        CS_ACTIVE;
    416a:	ee a5       	ldd	r30, Y+46	; 0x2e
    416c:	ff a5       	ldd	r31, Y+47	; 0x2f
    416e:	80 81       	ld	r24, Z
    4170:	9a ad       	ldd	r25, Y+58	; 0x3a
    4172:	89 23       	and	r24, r25
    4174:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:526
		writeCmd16(RC);
    4176:	e8 a9       	ldd	r30, Y+48	; 0x30
    4178:	f9 a9       	ldd	r31, Y+49	; 0x31
    417a:	80 81       	ld	r24, Z
    417c:	9b ad       	ldd	r25, Y+59	; 0x3b
    417e:	89 23       	and	r24, r25
    4180:	80 83       	st	Z, r24
    4182:	9a a1       	ldd	r25, Y+34	; 0x22
    4184:	8b a1       	ldd	r24, Y+35	; 0x23
    4186:	82 b9       	out	0x02, r24	; 2
    4188:	ea a9       	ldd	r30, Y+50	; 0x32
    418a:	fb a9       	ldd	r31, Y+51	; 0x33
    418c:	80 81       	ld	r24, Z
    418e:	2c ad       	ldd	r18, Y+60	; 0x3c
    4190:	82 23       	and	r24, r18
    4192:	80 83       	st	Z, r24
    4194:	ea a9       	ldd	r30, Y+50	; 0x32
    4196:	fb a9       	ldd	r31, Y+51	; 0x33
    4198:	80 81       	ld	r24, Z
    419a:	28 ad       	ldd	r18, Y+56	; 0x38
    419c:	82 2b       	or	r24, r18
    419e:	80 83       	st	Z, r24
    41a0:	92 b9       	out	0x02, r25	; 2
    41a2:	ea a9       	ldd	r30, Y+50	; 0x32
    41a4:	fb a9       	ldd	r31, Y+51	; 0x33
    41a6:	80 81       	ld	r24, Z
    41a8:	9c ad       	ldd	r25, Y+60	; 0x3c
    41aa:	89 23       	and	r24, r25
    41ac:	80 83       	st	Z, r24
    41ae:	ea a9       	ldd	r30, Y+50	; 0x32
    41b0:	fb a9       	ldd	r31, Y+51	; 0x33
    41b2:	80 81       	ld	r24, Z
    41b4:	98 ad       	ldd	r25, Y+56	; 0x38
    41b6:	89 2b       	or	r24, r25
    41b8:	80 83       	st	Z, r24
    41ba:	e8 a9       	ldd	r30, Y+48	; 0x30
    41bc:	f9 a9       	ldd	r31, Y+49	; 0x31
    41be:	80 81       	ld	r24, Z
    41c0:	9f a9       	ldd	r25, Y+55	; 0x37
    41c2:	89 2b       	or	r24, r25
    41c4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:527
        setReadDir();
    41c6:	81 b1       	in	r24, 0x01	; 1
    41c8:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:528
		if(lcd_driver == ID_932X)
    41ca:	88 8d       	ldd	r24, Y+24	; 0x18
    41cc:	99 8d       	ldd	r25, Y+25	; 0x19
    41ce:	89 2b       	or	r24, r25
    41d0:	09 f0       	breq	.+2      	; 0x41d4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
    41d2:	67 c0       	rjmp	.+206    	; 0x42a2 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
    41d4:	f5 01       	movw	r30, r10
    41d6:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    41d8:	42 e0       	ldi	r20, 0x02	; 2
    41da:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:534
				{
					read8(r);
    41dc:	ac a9       	ldd	r26, Y+52	; 0x34
    41de:	bd a9       	ldd	r27, Y+53	; 0x35
    41e0:	2c 91       	ld	r18, X
    41e2:	3d ad       	ldd	r19, Y+61	; 0x3d
    41e4:	23 23       	and	r18, r19
    41e6:	2c 93       	st	X, r18
    41e8:	20 b1       	in	r18, 0x00	; 0
    41ea:	ac a9       	ldd	r26, Y+52	; 0x34
    41ec:	bd a9       	ldd	r27, Y+53	; 0x35
    41ee:	2c 91       	ld	r18, X
    41f0:	39 ad       	ldd	r19, Y+57	; 0x39
    41f2:	23 2b       	or	r18, r19
    41f4:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:535
					read8(r);
    41f6:	ac a9       	ldd	r26, Y+52	; 0x34
    41f8:	bd a9       	ldd	r27, Y+53	; 0x35
    41fa:	2c 91       	ld	r18, X
    41fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    41fe:	23 23       	and	r18, r19
    4200:	2c 93       	st	X, r18
    4202:	20 b1       	in	r18, 0x00	; 0
    4204:	ac a9       	ldd	r26, Y+52	; 0x34
    4206:	bd a9       	ldd	r27, Y+53	; 0x35
    4208:	2c 91       	ld	r18, X
    420a:	39 ad       	ldd	r19, Y+57	; 0x39
    420c:	23 2b       	or	r18, r19
    420e:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:536
					read8(r);
    4210:	ac a9       	ldd	r26, Y+52	; 0x34
    4212:	bd a9       	ldd	r27, Y+53	; 0x35
    4214:	2c 91       	ld	r18, X
    4216:	3d ad       	ldd	r19, Y+61	; 0x3d
    4218:	23 23       	and	r18, r19
    421a:	2c 93       	st	X, r18
    421c:	20 b1       	in	r18, 0x00	; 0
    421e:	ac a9       	ldd	r26, Y+52	; 0x34
    4220:	bd a9       	ldd	r27, Y+53	; 0x35
    4222:	3c 91       	ld	r19, X
    4224:	69 ad       	ldd	r22, Y+57	; 0x39
    4226:	36 2b       	or	r19, r22
    4228:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:537
					read8(g);
    422a:	ac a9       	ldd	r26, Y+52	; 0x34
    422c:	bd a9       	ldd	r27, Y+53	; 0x35
    422e:	3c 91       	ld	r19, X
    4230:	6d ad       	ldd	r22, Y+61	; 0x3d
    4232:	36 23       	and	r19, r22
    4234:	3c 93       	st	X, r19
    4236:	60 b1       	in	r22, 0x00	; 0
    4238:	ac a9       	ldd	r26, Y+52	; 0x34
    423a:	bd a9       	ldd	r27, Y+53	; 0x35
    423c:	3c 91       	ld	r19, X
    423e:	79 ad       	ldd	r23, Y+57	; 0x39
    4240:	37 2b       	or	r19, r23
    4242:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    4244:	41 30       	cpi	r20, 0x01	; 1
    4246:	51 05       	cpc	r21, r1
    4248:	49 f5       	brne	.+82     	; 0x429c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:539
					read8(r);
					read8(r);
					read8(r);
					read8(g);
				}
				*block++ = (r<<8 | g);
    424a:	32 2f       	mov	r19, r18
    424c:	26 2f       	mov	r18, r22
    424e:	21 93       	st	Z+, r18
    4250:	31 93       	st	Z+, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:540
				n--;
    4252:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:530
        CS_ACTIVE;
		writeCmd16(RC);
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
    4254:	09 f0       	breq	.+2      	; 0x4258 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
    4256:	c0 cf       	rjmp	.-128    	; 0x41d8 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
    4258:	cc 0c       	add	r12, r12
    425a:	dd 1c       	adc	r13, r13
    425c:	ac 0c       	add	r10, r12
    425e:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:542
					read8(g);
				}
				*block++ = (r<<8 | g);
				n--;
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
    4260:	0c 89       	ldd	r16, Y+20	; 0x14
    4262:	1d 89       	ldd	r17, Y+21	; 0x15
    4264:	01 50       	subi	r16, 0x01	; 1
    4266:	11 09       	sbc	r17, r1
    4268:	2a 89       	ldd	r18, Y+18	; 0x12
    426a:	3b 89       	ldd	r19, Y+19	; 0x13
    426c:	21 50       	subi	r18, 0x01	; 1
    426e:	31 09       	sbc	r19, r1
    4270:	e8 81       	ld	r30, Y
    4272:	f9 81       	ldd	r31, Y+1	; 0x01
    4274:	06 80       	ldd	r0, Z+6	; 0x06
    4276:	f7 81       	ldd	r31, Z+7	; 0x07
    4278:	e0 2d       	mov	r30, r0
    427a:	50 e0       	ldi	r21, 0x00	; 0
    427c:	40 e0       	ldi	r20, 0x00	; 0
    427e:	70 e0       	ldi	r23, 0x00	; 0
    4280:	60 e0       	ldi	r22, 0x00	; 0
    4282:	ce 01       	movw	r24, r28
    4284:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:565
            	*block++ = ret;
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
    4286:	ee a5       	ldd	r30, Y+46	; 0x2e
    4288:	ff a5       	ldd	r31, Y+47	; 0x2f
    428a:	80 81       	ld	r24, Z
    428c:	9e a9       	ldd	r25, Y+54	; 0x36
    428e:	89 2b       	or	r24, r25
    4290:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
        setWriteDir();
    4292:	81 b1       	in	r24, 0x01	; 1
    4294:	71 b8       	out	0x01, r7	; 1
    4296:	d1 2c       	mov	r13, r1
    4298:	c1 2c       	mov	r12, r1
    429a:	63 cf       	rjmp	.-314    	; 0x4162 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    429c:	41 e0       	ldi	r20, 0x01	; 1
    429e:	50 e0       	ldi	r21, 0x00	; 0
    42a0:	9d cf       	rjmp	.-198    	; 0x41dc <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:546
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
    42a2:	ec a9       	ldd	r30, Y+52	; 0x34
    42a4:	fd a9       	ldd	r31, Y+53	; 0x35
    42a6:	80 81       	ld	r24, Z
    42a8:	9d ad       	ldd	r25, Y+61	; 0x3d
    42aa:	89 23       	and	r24, r25
    42ac:	80 83       	st	Z, r24
    42ae:	80 b1       	in	r24, 0x00	; 0
    42b0:	ec a9       	ldd	r30, Y+52	; 0x34
    42b2:	fd a9       	ldd	r31, Y+53	; 0x35
    42b4:	80 81       	ld	r24, Z
    42b6:	99 ad       	ldd	r25, Y+57	; 0x39
    42b8:	89 2b       	or	r24, r25
    42ba:	80 83       	st	Z, r24
    42bc:	75 01       	movw	r14, r10
    42be:	86 01       	movw	r16, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:549
        	while (n) 
			{
				if(R24BIT == 1)
    42c0:	8c a5       	ldd	r24, Y+44	; 0x2c
    42c2:	9d a5       	ldd	r25, Y+45	; 0x2d
    42c4:	81 30       	cpi	r24, 0x01	; 1
    42c6:	91 05       	cpc	r25, r1
    42c8:	d9 f5       	brne	.+118    	; 0x4340 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:551
				{
        			read8(r);
    42ca:	ec a9       	ldd	r30, Y+52	; 0x34
    42cc:	fd a9       	ldd	r31, Y+53	; 0x35
    42ce:	80 81       	ld	r24, Z
    42d0:	9d ad       	ldd	r25, Y+61	; 0x3d
    42d2:	89 23       	and	r24, r25
    42d4:	80 83       	st	Z, r24
    42d6:	60 b1       	in	r22, 0x00	; 0
    42d8:	ec a9       	ldd	r30, Y+52	; 0x34
    42da:	fd a9       	ldd	r31, Y+53	; 0x35
    42dc:	80 81       	ld	r24, Z
    42de:	99 ad       	ldd	r25, Y+57	; 0x39
    42e0:	89 2b       	or	r24, r25
    42e2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:552
         			read8(g);
    42e4:	ec a9       	ldd	r30, Y+52	; 0x34
    42e6:	fd a9       	ldd	r31, Y+53	; 0x35
    42e8:	80 81       	ld	r24, Z
    42ea:	9d ad       	ldd	r25, Y+61	; 0x3d
    42ec:	89 23       	and	r24, r25
    42ee:	80 83       	st	Z, r24
    42f0:	40 b1       	in	r20, 0x00	; 0
    42f2:	ec a9       	ldd	r30, Y+52	; 0x34
    42f4:	fd a9       	ldd	r31, Y+53	; 0x35
    42f6:	80 81       	ld	r24, Z
    42f8:	99 ad       	ldd	r25, Y+57	; 0x39
    42fa:	89 2b       	or	r24, r25
    42fc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:553
        			read8(b);
    42fe:	ec a9       	ldd	r30, Y+52	; 0x34
    4300:	fd a9       	ldd	r31, Y+53	; 0x35
    4302:	80 81       	ld	r24, Z
    4304:	9d ad       	ldd	r25, Y+61	; 0x3d
    4306:	89 23       	and	r24, r25
    4308:	80 83       	st	Z, r24
    430a:	20 b1       	in	r18, 0x00	; 0
    430c:	ec a9       	ldd	r30, Y+52	; 0x34
    430e:	fd a9       	ldd	r31, Y+53	; 0x35
    4310:	80 81       	ld	r24, Z
    4312:	99 ad       	ldd	r25, Y+57	; 0x39
    4314:	89 2b       	or	r24, r25
    4316:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:554
            		ret = Color_To_565(r, g, b);
    4318:	e8 81       	ld	r30, Y
    431a:	f9 81       	ldd	r31, Y+1	; 0x01
    431c:	01 90       	ld	r0, Z+
    431e:	f0 81       	ld	r31, Z
    4320:	e0 2d       	mov	r30, r0
    4322:	ce 01       	movw	r24, r28
    4324:	19 95       	eicall
    4326:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:560
				}
				else if(R24BIT == 0)
				{
					read16(ret);
				}
            	*block++ = ret;
    4328:	f7 01       	movw	r30, r14
    432a:	81 92       	st	Z+, r8
    432c:	91 92       	st	Z+, r9
    432e:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:561
            	n--;
    4330:	01 50       	subi	r16, 0x01	; 1
    4332:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:547
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
        	while (n) 
    4334:	29 f6       	brne	.-118    	; 0x42c0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
    4336:	cc 0c       	add	r12, r12
    4338:	dd 1c       	adc	r13, r13
    433a:	ac 0c       	add	r10, r12
    433c:	bd 1c       	adc	r11, r13
    433e:	a3 cf       	rjmp	.-186    	; 0x4286 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:556
        			read8(r);
         			read8(g);
        			read8(b);
            		ret = Color_To_565(r, g, b);
				}
				else if(R24BIT == 0)
    4340:	89 2b       	or	r24, r25
    4342:	91 f7       	brne	.-28     	; 0x4328 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:558
				{
					read16(ret);
    4344:	ec a9       	ldd	r30, Y+52	; 0x34
    4346:	fd a9       	ldd	r31, Y+53	; 0x35
    4348:	80 81       	ld	r24, Z
    434a:	9d ad       	ldd	r25, Y+61	; 0x3d
    434c:	89 23       	and	r24, r25
    434e:	80 83       	st	Z, r24
    4350:	80 b0       	in	r8, 0x00	; 0
    4352:	ec a9       	ldd	r30, Y+52	; 0x34
    4354:	fd a9       	ldd	r31, Y+53	; 0x35
    4356:	80 81       	ld	r24, Z
    4358:	99 ad       	ldd	r25, Y+57	; 0x39
    435a:	89 2b       	or	r24, r25
    435c:	80 83       	st	Z, r24
    435e:	ec a9       	ldd	r30, Y+52	; 0x34
    4360:	fd a9       	ldd	r31, Y+53	; 0x35
    4362:	80 81       	ld	r24, Z
    4364:	9d ad       	ldd	r25, Y+61	; 0x3d
    4366:	89 23       	and	r24, r25
    4368:	80 83       	st	Z, r24
    436a:	90 b1       	in	r25, 0x00	; 0
    436c:	ec a9       	ldd	r30, Y+52	; 0x34
    436e:	fd a9       	ldd	r31, Y+53	; 0x35
    4370:	80 81       	ld	r24, Z
    4372:	29 ad       	ldd	r18, Y+57	; 0x39
    4374:	82 2b       	or	r24, r18
    4376:	80 83       	st	Z, r24
    4378:	98 2c       	mov	r9, r8
    437a:	89 2e       	mov	r8, r25
    437c:	d5 cf       	rjmp	.-86     	; 0x4328 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:569
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    }
	return 0;
}
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	80 e0       	ldi	r24, 0x00	; 0
    4382:	df 91       	pop	r29
    4384:	cf 91       	pop	r28
    4386:	1f 91       	pop	r17
    4388:	0f 91       	pop	r16
    438a:	ff 90       	pop	r15
    438c:	ef 90       	pop	r14
    438e:	df 90       	pop	r13
    4390:	cf 90       	pop	r12
    4392:	bf 90       	pop	r11
    4394:	af 90       	pop	r10
    4396:	9f 90       	pop	r9
    4398:	8f 90       	pop	r8
    439a:	7f 90       	pop	r7
    439c:	08 95       	ret

0000439e <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:487
}

//Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t LCDWIKI_KBV::Color_To_565(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    439e:	38 e0       	ldi	r19, 0x08	; 8
    43a0:	43 9f       	mul	r20, r19
    43a2:	c0 01       	movw	r24, r0
    43a4:	11 24       	eor	r1, r1
    43a6:	80 7e       	andi	r24, 0xE0	; 224
    43a8:	97 70       	andi	r25, 0x07	; 7
    43aa:	26 95       	lsr	r18
    43ac:	26 95       	lsr	r18
    43ae:	26 95       	lsr	r18
    43b0:	82 2b       	or	r24, r18
    43b2:	70 e0       	ldi	r23, 0x00	; 0
    43b4:	76 2f       	mov	r23, r22
    43b6:	66 27       	eor	r22, r22
    43b8:	66 27       	eor	r22, r22
    43ba:	78 7f       	andi	r23, 0xF8	; 248
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:488
}
    43bc:	86 2b       	or	r24, r22
    43be:	97 2b       	or	r25, r23
    43c0:	08 95       	ret

000043c2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:418
	CS_IDLE;
}

//push color table for 16bits
void LCDWIKI_KBV::Push_Any_Color(uint16_t * block, int16_t n, bool first, uint8_t flags)
{
    43c2:	0f 93       	push	r16
    43c4:	cf 93       	push	r28
    43c6:	df 93       	push	r29
    43c8:	dc 01       	movw	r26, r24
    43ca:	01 70       	andi	r16, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:423
	uint16_t color;
    uint8_t h, l;
	bool isconst = flags & 1;
//	bool isbigend = (flags & 2) != 0;
    CS_ACTIVE;
    43cc:	9e 96       	adiw	r26, 0x2e	; 46
    43ce:	ed 91       	ld	r30, X+
    43d0:	fc 91       	ld	r31, X
    43d2:	9f 97       	sbiw	r26, 0x2f	; 47
    43d4:	80 81       	ld	r24, Z
    43d6:	da 96       	adiw	r26, 0x3a	; 58
    43d8:	9c 91       	ld	r25, X
    43da:	da 97       	sbiw	r26, 0x3a	; 58
    43dc:	89 23       	and	r24, r25
    43de:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:424
    if (first) 
    43e0:	22 23       	and	r18, r18
    43e2:	09 f4       	brne	.+2      	; 0x43e6 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
    43e4:	5b c0       	rjmp	.+182    	; 0x449c <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:426
	{  
		if(lcd_driver == ID_932X)
    43e6:	58 96       	adiw	r26, 0x18	; 24
    43e8:	8d 91       	ld	r24, X+
    43ea:	9c 91       	ld	r25, X
    43ec:	59 97       	sbiw	r26, 0x19	; 25
    43ee:	89 2b       	or	r24, r25
    43f0:	49 f5       	brne	.+82     	; 0x4444 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
    43f2:	d0 96       	adiw	r26, 0x30	; 48
    43f4:	ed 91       	ld	r30, X+
    43f6:	fc 91       	ld	r31, X
    43f8:	d1 97       	sbiw	r26, 0x31	; 49
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:428
		{
			writeCmd8(ILI932X_START_OSC);
    43fa:	80 81       	ld	r24, Z
    43fc:	db 96       	adiw	r26, 0x3b	; 59
    43fe:	9c 91       	ld	r25, X
    4400:	db 97       	sbiw	r26, 0x3b	; 59
    4402:	89 23       	and	r24, r25
    4404:	80 83       	st	Z, r24
    4406:	12 b8       	out	0x02, r1	; 2
    4408:	d2 96       	adiw	r26, 0x32	; 50
    440a:	ed 91       	ld	r30, X+
    440c:	fc 91       	ld	r31, X
    440e:	d3 97       	sbiw	r26, 0x33	; 51
    4410:	80 81       	ld	r24, Z
    4412:	dc 96       	adiw	r26, 0x3c	; 60
    4414:	9c 91       	ld	r25, X
    4416:	dc 97       	sbiw	r26, 0x3c	; 60
    4418:	89 23       	and	r24, r25
    441a:	80 83       	st	Z, r24
    441c:	d2 96       	adiw	r26, 0x32	; 50
    441e:	ed 91       	ld	r30, X+
    4420:	fc 91       	ld	r31, X
    4422:	d3 97       	sbiw	r26, 0x33	; 51
    4424:	80 81       	ld	r24, Z
    4426:	d8 96       	adiw	r26, 0x38	; 56
    4428:	9c 91       	ld	r25, X
    442a:	d8 97       	sbiw	r26, 0x38	; 56
    442c:	89 2b       	or	r24, r25
    442e:	80 83       	st	Z, r24
    4430:	d0 96       	adiw	r26, 0x30	; 48
    4432:	ed 91       	ld	r30, X+
    4434:	fc 91       	ld	r31, X
    4436:	d1 97       	sbiw	r26, 0x31	; 49
    4438:	80 81       	ld	r24, Z
    443a:	d7 96       	adiw	r26, 0x37	; 55
    443c:	9c 91       	ld	r25, X
    443e:	d7 97       	sbiw	r26, 0x37	; 55
    4440:	89 2b       	or	r24, r25
    4442:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:431
			
		}
		writeCmd8(CC);			
    4444:	d0 96       	adiw	r26, 0x30	; 48
    4446:	ed 91       	ld	r30, X+
    4448:	fc 91       	ld	r31, X
    444a:	d1 97       	sbiw	r26, 0x31	; 49
    444c:	80 81       	ld	r24, Z
    444e:	db 96       	adiw	r26, 0x3b	; 59
    4450:	9c 91       	ld	r25, X
    4452:	db 97       	sbiw	r26, 0x3b	; 59
    4454:	89 23       	and	r24, r25
    4456:	80 83       	st	Z, r24
    4458:	90 96       	adiw	r26, 0x20	; 32
    445a:	8c 91       	ld	r24, X
    445c:	90 97       	sbiw	r26, 0x20	; 32
    445e:	82 b9       	out	0x02, r24	; 2
    4460:	d2 96       	adiw	r26, 0x32	; 50
    4462:	ed 91       	ld	r30, X+
    4464:	fc 91       	ld	r31, X
    4466:	d3 97       	sbiw	r26, 0x33	; 51
    4468:	80 81       	ld	r24, Z
    446a:	dc 96       	adiw	r26, 0x3c	; 60
    446c:	9c 91       	ld	r25, X
    446e:	dc 97       	sbiw	r26, 0x3c	; 60
    4470:	89 23       	and	r24, r25
    4472:	80 83       	st	Z, r24
    4474:	d2 96       	adiw	r26, 0x32	; 50
    4476:	ed 91       	ld	r30, X+
    4478:	fc 91       	ld	r31, X
    447a:	d3 97       	sbiw	r26, 0x33	; 51
    447c:	80 81       	ld	r24, Z
    447e:	d8 96       	adiw	r26, 0x38	; 56
    4480:	9c 91       	ld	r25, X
    4482:	d8 97       	sbiw	r26, 0x38	; 56
    4484:	89 2b       	or	r24, r25
    4486:	80 83       	st	Z, r24
    4488:	d0 96       	adiw	r26, 0x30	; 48
    448a:	ed 91       	ld	r30, X+
    448c:	fc 91       	ld	r31, X
    448e:	d1 97       	sbiw	r26, 0x31	; 49
    4490:	80 81       	ld	r24, Z
    4492:	d7 96       	adiw	r26, 0x37	; 55
    4494:	9c 91       	ld	r25, X
    4496:	d7 97       	sbiw	r26, 0x37	; 55
    4498:	89 2b       	or	r24, r25
    449a:	80 83       	st	Z, r24
    449c:	eb 01       	movw	r28, r22
    449e:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:433
    }
    while (n-- > 0) 
    44a0:	18 16       	cp	r1, r24
    44a2:	19 06       	cpc	r1, r25
    44a4:	bc f5       	brge	.+110    	; 0x4514 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:435
	{
        if (isconst) 
    44a6:	00 23       	and	r16, r16
    44a8:	91 f1       	breq	.+100    	; 0x450e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:437
		{
			color = pgm_read_word(block++);		
    44aa:	fe 01       	movw	r30, r28
    44ac:	45 91       	lpm	r20, Z+
    44ae:	54 91       	lpm	r21, Z
    44b0:	34 2f       	mov	r19, r20
    44b2:	25 2f       	mov	r18, r21
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:444
		else 
		{
			color = (*block++);			

		}		
        writeData16(color);
    44b4:	22 b9       	out	0x02, r18	; 2
    44b6:	d2 96       	adiw	r26, 0x32	; 50
    44b8:	ed 91       	ld	r30, X+
    44ba:	fc 91       	ld	r31, X
    44bc:	d3 97       	sbiw	r26, 0x33	; 51
    44be:	20 81       	ld	r18, Z
    44c0:	dc 96       	adiw	r26, 0x3c	; 60
    44c2:	4c 91       	ld	r20, X
    44c4:	dc 97       	sbiw	r26, 0x3c	; 60
    44c6:	24 23       	and	r18, r20
    44c8:	20 83       	st	Z, r18
    44ca:	d2 96       	adiw	r26, 0x32	; 50
    44cc:	ed 91       	ld	r30, X+
    44ce:	fc 91       	ld	r31, X
    44d0:	d3 97       	sbiw	r26, 0x33	; 51
    44d2:	20 81       	ld	r18, Z
    44d4:	d8 96       	adiw	r26, 0x38	; 56
    44d6:	4c 91       	ld	r20, X
    44d8:	d8 97       	sbiw	r26, 0x38	; 56
    44da:	24 2b       	or	r18, r20
    44dc:	20 83       	st	Z, r18
    44de:	32 b9       	out	0x02, r19	; 2
    44e0:	d2 96       	adiw	r26, 0x32	; 50
    44e2:	ed 91       	ld	r30, X+
    44e4:	fc 91       	ld	r31, X
    44e6:	d3 97       	sbiw	r26, 0x33	; 51
    44e8:	20 81       	ld	r18, Z
    44ea:	dc 96       	adiw	r26, 0x3c	; 60
    44ec:	3c 91       	ld	r19, X
    44ee:	dc 97       	sbiw	r26, 0x3c	; 60
    44f0:	23 23       	and	r18, r19
    44f2:	20 83       	st	Z, r18
    44f4:	d2 96       	adiw	r26, 0x32	; 50
    44f6:	ed 91       	ld	r30, X+
    44f8:	fc 91       	ld	r31, X
    44fa:	d3 97       	sbiw	r26, 0x33	; 51
    44fc:	20 81       	ld	r18, Z
    44fe:	d8 96       	adiw	r26, 0x38	; 56
    4500:	3c 91       	ld	r19, X
    4502:	d8 97       	sbiw	r26, 0x38	; 56
    4504:	23 2b       	or	r18, r19
    4506:	20 83       	st	Z, r18
    4508:	22 96       	adiw	r28, 0x02	; 2
    450a:	01 97       	sbiw	r24, 0x01	; 1
    450c:	c9 cf       	rjmp	.-110    	; 0x44a0 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:441
		{
			color = pgm_read_word(block++);		
        } 
		else 
		{
			color = (*block++);			
    450e:	38 81       	ld	r19, Y
    4510:	29 81       	ldd	r18, Y+1	; 0x01
    4512:	d0 cf       	rjmp	.-96     	; 0x44b4 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:446

		}		
        writeData16(color);
    }
    CS_IDLE;
    4514:	9e 96       	adiw	r26, 0x2e	; 46
    4516:	ed 91       	ld	r30, X+
    4518:	fc 91       	ld	r31, X
    451a:	9f 97       	sbiw	r26, 0x2f	; 47
    451c:	80 81       	ld	r24, Z
    451e:	d6 96       	adiw	r26, 0x36	; 54
    4520:	9c 91       	ld	r25, X
    4522:	89 2b       	or	r24, r25
    4524:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:447
}
    4526:	df 91       	pop	r29
    4528:	cf 91       	pop	r28
    452a:	0f 91       	pop	r16
    452c:	08 95       	ret

0000452e <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
    452e:	2f 92       	push	r2
    4530:	3f 92       	push	r3
    4532:	4f 92       	push	r4
    4534:	5f 92       	push	r5
    4536:	6f 92       	push	r6
    4538:	7f 92       	push	r7
    453a:	8f 92       	push	r8
    453c:	9f 92       	push	r9
    453e:	af 92       	push	r10
    4540:	bf 92       	push	r11
    4542:	cf 92       	push	r12
    4544:	df 92       	push	r13
    4546:	ef 92       	push	r14
    4548:	ff 92       	push	r15
    454a:	0f 93       	push	r16
    454c:	1f 93       	push	r17
    454e:	cf 93       	push	r28
    4550:	df 93       	push	r29
    4552:	00 d0       	rcall	.+0      	; 0x4554 <thermostat_ring_update_pid_parameters(unsigned char)+0x26>
    4554:	00 d0       	rcall	.+0      	; 0x4556 <thermostat_ring_update_pid_parameters(unsigned char)+0x28>
    4556:	cd b7       	in	r28, 0x3d	; 61
    4558:	de b7       	in	r29, 0x3e	; 62
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
    455a:	28 2e       	mov	r2, r24
    455c:	31 2c       	mov	r3, r1
    455e:	c1 01       	movw	r24, r2
    4560:	88 0f       	add	r24, r24
    4562:	99 1f       	adc	r25, r25
    4564:	e0 91 1b 0c 	lds	r30, 0x0C1B	; 0x800c1b <array_pids>
    4568:	f0 91 1c 0c 	lds	r31, 0x0C1C	; 0x800c1c <array_pids+0x1>
    456c:	e8 0f       	add	r30, r24
    456e:	f9 1f       	adc	r31, r25
    4570:	80 81       	ld	r24, Z
    4572:	91 81       	ldd	r25, Z+1	; 0x01
    4574:	9e 83       	std	Y+6, r25	; 0x06
    4576:	8d 83       	std	Y+5, r24	; 0x05
    4578:	81 01       	movw	r16, r2
    457a:	00 0f       	add	r16, r16
    457c:	11 1f       	adc	r17, r17
    457e:	00 0f       	add	r16, r16
    4580:	11 1f       	adc	r17, r17
    4582:	f8 01       	movw	r30, r16
    4584:	eb 58       	subi	r30, 0x8B	; 139
    4586:	f6 4f       	sbci	r31, 0xF6	; 246
    4588:	40 80       	ld	r4, Z
    458a:	51 80       	ldd	r5, Z+1	; 0x01
    458c:	62 80       	ldd	r6, Z+2	; 0x02
    458e:	73 80       	ldd	r7, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    4590:	20 e0       	ldi	r18, 0x00	; 0
    4592:	30 e0       	ldi	r19, 0x00	; 0
    4594:	a9 01       	movw	r20, r18
    4596:	c3 01       	movw	r24, r6
    4598:	b2 01       	movw	r22, r4
    459a:	0e 94 bb b2 	call	0x16576	; 0x16576 <__cmpsf2>
    459e:	87 fd       	sbrc	r24, 7
    45a0:	97 c0       	rjmp	.+302    	; 0x46d0 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:219
    45a2:	f8 01       	movw	r30, r16
    45a4:	e7 57       	subi	r30, 0x77	; 119
    45a6:	f6 4f       	sbci	r31, 0xF6	; 246
    45a8:	80 80       	ld	r8, Z
    45aa:	91 80       	ldd	r9, Z+1	; 0x01
    45ac:	a2 80       	ldd	r10, Z+2	; 0x02
    45ae:	b3 80       	ldd	r11, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    45b0:	20 e0       	ldi	r18, 0x00	; 0
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	a9 01       	movw	r20, r18
    45b6:	c5 01       	movw	r24, r10
    45b8:	b4 01       	movw	r22, r8
    45ba:	0e 94 bb b2 	call	0x16576	; 0x16576 <__cmpsf2>
    45be:	87 fd       	sbrc	r24, 7
    45c0:	87 c0       	rjmp	.+270    	; 0x46d0 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:219
    45c2:	f8 01       	movw	r30, r16
    45c4:	e3 56       	subi	r30, 0x63	; 99
    45c6:	f6 4f       	sbci	r31, 0xF6	; 246
    45c8:	c0 80       	ld	r12, Z
    45ca:	d1 80       	ldd	r13, Z+1	; 0x01
    45cc:	e2 80       	ldd	r14, Z+2	; 0x02
    45ce:	f3 80       	ldd	r15, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    45d0:	20 e0       	ldi	r18, 0x00	; 0
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	a9 01       	movw	r20, r18
    45d6:	c7 01       	movw	r24, r14
    45d8:	b6 01       	movw	r22, r12
    45da:	0e 94 bb b2 	call	0x16576	; 0x16576 <__cmpsf2>
    45de:	87 fd       	sbrc	r24, 7
    45e0:	77 c0       	rjmp	.+238    	; 0x46d0 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
    45e2:	81 e0       	ldi	r24, 0x01	; 1
    45e4:	ed 81       	ldd	r30, Y+5	; 0x05
    45e6:	fe 81       	ldd	r31, Y+6	; 0x06
    45e8:	22 8d       	ldd	r18, Z+26	; 0x1a
    45ea:	33 8d       	ldd	r19, Z+27	; 0x1b
    45ec:	21 30       	cpi	r18, 0x01	; 1
    45ee:	31 05       	cpc	r19, r1
    45f0:	09 f0       	breq	.+2      	; 0x45f4 <thermostat_ring_update_pid_parameters(unsigned char)+0xc6>
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	ed 81       	ldd	r30, Y+5	; 0x05
    45f6:	fe 81       	ldd	r31, Y+6	; 0x06
    45f8:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    45fa:	40 82       	st	Z, r4
    45fc:	51 82       	std	Z+1, r5	; 0x01
    45fe:	62 82       	std	Z+2, r6	; 0x02
    4600:	73 82       	std	Z+3, r7	; 0x03
    4602:	84 82       	std	Z+4, r8	; 0x04
    4604:	95 82       	std	Z+5, r9	; 0x05
    4606:	a6 82       	std	Z+6, r10	; 0x06
    4608:	b7 82       	std	Z+7, r11	; 0x07
    460a:	c0 86       	std	Z+8, r12	; 0x08
    460c:	d1 86       	std	Z+9, r13	; 0x09
    460e:	e2 86       	std	Z+10, r14	; 0x0a
    4610:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
    4612:	66 a5       	ldd	r22, Z+46	; 0x2e
    4614:	77 a5       	ldd	r23, Z+47	; 0x2f
    4616:	80 a9       	ldd	r24, Z+48	; 0x30
    4618:	91 a9       	ldd	r25, Z+49	; 0x31
    461a:	0e 94 c0 b2 	call	0x16580	; 0x16580 <__floatunsisf>
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	30 e0       	ldi	r19, 0x00	; 0
    4622:	4a e7       	ldi	r20, 0x7A	; 122
    4624:	54 e4       	ldi	r21, 0x44	; 68
    4626:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
    462a:	69 83       	std	Y+1, r22	; 0x01
    462c:	7a 83       	std	Y+2, r23	; 0x02
    462e:	8b 83       	std	Y+3, r24	; 0x03
    4630:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
    4632:	ed 81       	ldd	r30, Y+5	; 0x05
    4634:	fe 81       	ldd	r31, Y+6	; 0x06
    4636:	44 86       	std	Z+12, r4	; 0x0c
    4638:	55 86       	std	Z+13, r5	; 0x0d
    463a:	66 86       	std	Z+14, r6	; 0x0e
    463c:	77 86       	std	Z+15, r7	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    463e:	9b 01       	movw	r18, r22
    4640:	ac 01       	movw	r20, r24
    4642:	c5 01       	movw	r24, r10
    4644:	b4 01       	movw	r22, r8
    4646:	0e 94 21 b3 	call	0x16642	; 0x16642 <__mulsf3>
    464a:	4b 01       	movw	r8, r22
    464c:	5c 01       	movw	r10, r24
    464e:	ed 81       	ldd	r30, Y+5	; 0x05
    4650:	fe 81       	ldd	r31, Y+6	; 0x06
    4652:	80 8a       	std	Z+16, r8	; 0x10
    4654:	91 8a       	std	Z+17, r9	; 0x11
    4656:	a2 8a       	std	Z+18, r10	; 0x12
    4658:	b3 8a       	std	Z+19, r11	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    465a:	29 81       	ldd	r18, Y+1	; 0x01
    465c:	3a 81       	ldd	r19, Y+2	; 0x02
    465e:	4b 81       	ldd	r20, Y+3	; 0x03
    4660:	5c 81       	ldd	r21, Y+4	; 0x04
    4662:	c7 01       	movw	r24, r14
    4664:	b6 01       	movw	r22, r12
    4666:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
    466a:	6b 01       	movw	r12, r22
    466c:	7c 01       	movw	r14, r24
    466e:	ed 81       	ldd	r30, Y+5	; 0x05
    4670:	fe 81       	ldd	r31, Y+6	; 0x06
    4672:	c4 8a       	std	Z+20, r12	; 0x14
    4674:	d5 8a       	std	Z+21, r13	; 0x15
    4676:	e6 8a       	std	Z+22, r14	; 0x16
    4678:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
    467a:	80 8d       	ldd	r24, Z+24	; 0x18
    467c:	91 8d       	ldd	r25, Z+25	; 0x19
    467e:	01 97       	sbiw	r24, 0x01	; 1
    4680:	39 f5       	brne	.+78     	; 0x46d0 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
    4682:	a3 01       	movw	r20, r6
    4684:	92 01       	movw	r18, r4
    4686:	60 e0       	ldi	r22, 0x00	; 0
    4688:	70 e0       	ldi	r23, 0x00	; 0
    468a:	cb 01       	movw	r24, r22
    468c:	0e 94 88 b4 	call	0x16910	; 0x16910 <__subsf3>
    4690:	ed 81       	ldd	r30, Y+5	; 0x05
    4692:	fe 81       	ldd	r31, Y+6	; 0x06
    4694:	64 87       	std	Z+12, r22	; 0x0c
    4696:	75 87       	std	Z+13, r23	; 0x0d
    4698:	86 87       	std	Z+14, r24	; 0x0e
    469a:	97 87       	std	Z+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
    469c:	a5 01       	movw	r20, r10
    469e:	94 01       	movw	r18, r8
    46a0:	60 e0       	ldi	r22, 0x00	; 0
    46a2:	70 e0       	ldi	r23, 0x00	; 0
    46a4:	cb 01       	movw	r24, r22
    46a6:	0e 94 88 b4 	call	0x16910	; 0x16910 <__subsf3>
    46aa:	ed 81       	ldd	r30, Y+5	; 0x05
    46ac:	fe 81       	ldd	r31, Y+6	; 0x06
    46ae:	60 8b       	std	Z+16, r22	; 0x10
    46b0:	71 8b       	std	Z+17, r23	; 0x11
    46b2:	82 8b       	std	Z+18, r24	; 0x12
    46b4:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
    46b6:	a7 01       	movw	r20, r14
    46b8:	96 01       	movw	r18, r12
    46ba:	60 e0       	ldi	r22, 0x00	; 0
    46bc:	70 e0       	ldi	r23, 0x00	; 0
    46be:	cb 01       	movw	r24, r22
    46c0:	0e 94 88 b4 	call	0x16910	; 0x16910 <__subsf3>
    46c4:	ed 81       	ldd	r30, Y+5	; 0x05
    46c6:	fe 81       	ldd	r31, Y+6	; 0x06
    46c8:	64 8b       	std	Z+20, r22	; 0x14
    46ca:	75 8b       	std	Z+21, r23	; 0x15
    46cc:	86 8b       	std	Z+22, r24	; 0x16
    46ce:	97 8b       	std	Z+23, r25	; 0x17
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
    46d0:	f1 01       	movw	r30, r2
    46d2:	ef 54       	subi	r30, 0x4F	; 79
    46d4:	f6 4f       	sbci	r31, 0xF6	; 246
    46d6:	10 81       	ld	r17, Z
    46d8:	61 2f       	mov	r22, r17
    46da:	70 e0       	ldi	r23, 0x00	; 0
SetSampleTime():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
    46dc:	61 15       	cp	r22, r1
    46de:	71 05       	cpc	r23, r1
    46e0:	f1 f1       	breq	.+124    	; 0x475e <thermostat_ring_update_pid_parameters(unsigned char)+0x230>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
    46e2:	07 2e       	mov	r0, r23
    46e4:	00 0c       	add	r0, r0
    46e6:	88 0b       	sbc	r24, r24
    46e8:	99 0b       	sbc	r25, r25
    46ea:	0e 94 c2 b2 	call	0x16584	; 0x16584 <__floatsisf>
    46ee:	6b 01       	movw	r12, r22
    46f0:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
    46f2:	ed 81       	ldd	r30, Y+5	; 0x05
    46f4:	fe 81       	ldd	r31, Y+6	; 0x06
    46f6:	66 a5       	ldd	r22, Z+46	; 0x2e
    46f8:	77 a5       	ldd	r23, Z+47	; 0x2f
    46fa:	80 a9       	ldd	r24, Z+48	; 0x30
    46fc:	91 a9       	ldd	r25, Z+49	; 0x31
    46fe:	0e 94 c0 b2 	call	0x16580	; 0x16580 <__floatunsisf>
    4702:	9b 01       	movw	r18, r22
    4704:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
    4706:	c7 01       	movw	r24, r14
    4708:	b6 01       	movw	r22, r12
    470a:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
    470e:	6b 01       	movw	r12, r22
    4710:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
    4712:	ac 01       	movw	r20, r24
    4714:	9b 01       	movw	r18, r22
    4716:	ed 81       	ldd	r30, Y+5	; 0x05
    4718:	fe 81       	ldd	r31, Y+6	; 0x06
    471a:	60 89       	ldd	r22, Z+16	; 0x10
    471c:	71 89       	ldd	r23, Z+17	; 0x11
    471e:	82 89       	ldd	r24, Z+18	; 0x12
    4720:	93 89       	ldd	r25, Z+19	; 0x13
    4722:	0e 94 21 b3 	call	0x16642	; 0x16642 <__mulsf3>
    4726:	ed 81       	ldd	r30, Y+5	; 0x05
    4728:	fe 81       	ldd	r31, Y+6	; 0x06
    472a:	60 8b       	std	Z+16, r22	; 0x10
    472c:	71 8b       	std	Z+17, r23	; 0x11
    472e:	82 8b       	std	Z+18, r24	; 0x12
    4730:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
    4732:	a7 01       	movw	r20, r14
    4734:	96 01       	movw	r18, r12
    4736:	64 89       	ldd	r22, Z+20	; 0x14
    4738:	75 89       	ldd	r23, Z+21	; 0x15
    473a:	86 89       	ldd	r24, Z+22	; 0x16
    473c:	97 89       	ldd	r25, Z+23	; 0x17
    473e:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
    4742:	ed 81       	ldd	r30, Y+5	; 0x05
    4744:	fe 81       	ldd	r31, Y+6	; 0x06
    4746:	64 8b       	std	Z+20, r22	; 0x14
    4748:	75 8b       	std	Z+21, r23	; 0x15
    474a:	86 8b       	std	Z+22, r24	; 0x16
    474c:	97 8b       	std	Z+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
    474e:	81 2f       	mov	r24, r17
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	b0 e0       	ldi	r27, 0x00	; 0
    4754:	a0 e0       	ldi	r26, 0x00	; 0
    4756:	86 a7       	std	Z+46, r24	; 0x2e
    4758:	97 a7       	std	Z+47, r25	; 0x2f
    475a:	a0 ab       	std	Z+48, r26	; 0x30
    475c:	b1 ab       	std	Z+49, r27	; 0x31
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:221
}
    475e:	26 96       	adiw	r28, 0x06	; 6
    4760:	0f b6       	in	r0, 0x3f	; 63
    4762:	f8 94       	cli
    4764:	de bf       	out	0x3e, r29	; 62
    4766:	0f be       	out	0x3f, r0	; 63
    4768:	cd bf       	out	0x3d, r28	; 61
    476a:	df 91       	pop	r29
    476c:	cf 91       	pop	r28
    476e:	1f 91       	pop	r17
    4770:	0f 91       	pop	r16
    4772:	ff 90       	pop	r15
    4774:	ef 90       	pop	r14
    4776:	df 90       	pop	r13
    4778:	cf 90       	pop	r12
    477a:	bf 90       	pop	r11
    477c:	af 90       	pop	r10
    477e:	9f 90       	pop	r9
    4780:	8f 90       	pop	r8
    4782:	7f 90       	pop	r7
    4784:	6f 90       	pop	r6
    4786:	5f 90       	pop	r5
    4788:	4f 90       	pop	r4
    478a:	3f 90       	pop	r3
    478c:	2f 90       	pop	r2
    478e:	08 95       	ret

00004790 <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:163
  }
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
    4790:	fb 01       	movw	r30, r22
    4792:	9c 01       	movw	r18, r24
    4794:	28 5f       	subi	r18, 0xF8	; 248
    4796:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:166
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    4798:	dc 01       	movw	r26, r24
    479a:	5d 91       	ld	r21, X+
    479c:	cd 01       	movw	r24, r26
    479e:	41 91       	ld	r20, Z+
    47a0:	54 13       	cpse	r21, r20
    47a2:	05 c0       	rjmp	.+10     	; 0x47ae <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:165

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    47a4:	a2 17       	cp	r26, r18
    47a6:	b3 07       	cpc	r27, r19
    47a8:	b9 f7       	brne	.-18     	; 0x4798 <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:164
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
    47aa:	81 e0       	ldi	r24, 0x01	; 1
    47ac:	08 95       	ret
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:168
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    {
      ret = False;
    47ae:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:172
      break;
    }
  return ret;
}
    47b0:	08 95       	ret

000047b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    47b2:	80 33       	cpi	r24, 0x30	; 48
    47b4:	9c f0       	brlt	.+38     	; 0x47dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    47b6:	8a 33       	cpi	r24, 0x3A	; 58
    47b8:	24 f0       	brlt	.+8      	; 0x47c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    47ba:	8f 35       	cpi	r24, 0x5F	; 95
    47bc:	24 f0       	brlt	.+8      	; 0x47c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    47be:	8b 37       	cpi	r24, 0x7B	; 123
    47c0:	24 f4       	brge	.+8      	; 0x47ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    47c2:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    47c4:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    47c6:	81 34       	cpi	r24, 0x41	; 65
    47c8:	4c f0       	brlt	.+18     	; 0x47dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    47ca:	8b 35       	cpi	r24, 0x5B	; 91
    47cc:	d4 f3       	brlt	.-12     	; 0x47c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    47ce:	93 ed       	ldi	r25, 0xD3	; 211
    47d0:	98 0f       	add	r25, r24
    47d2:	81 e0       	ldi	r24, 0x01	; 1
    47d4:	92 30       	cpi	r25, 0x02	; 2
    47d6:	b0 f3       	brcs	.-20     	; 0x47c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    47d8:	80 e0       	ldi	r24, 0x00	; 0
    47da:	08 95       	ret
    47dc:	8b 32       	cpi	r24, 0x2B	; 43
    47de:	b9 f7       	brne	.-18     	; 0x47ce <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    47e0:	f0 cf       	rjmp	.-32     	; 0x47c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

000047e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    47e2:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    47e4:	80 85       	ldd	r24, Z+8	; 0x08
    47e6:	81 11       	cpse	r24, r1
    47e8:	0a c0       	rjmp	.+20     	; 0x47fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    47ea:	a2 81       	ldd	r26, Z+2	; 0x02
    47ec:	b3 81       	ldd	r27, Z+3	; 0x03
    47ee:	cd 01       	movw	r24, r26
    47f0:	01 96       	adiw	r24, 0x01	; 1
    47f2:	93 83       	std	Z+3, r25	; 0x03
    47f4:	82 83       	std	Z+2, r24	; 0x02
    47f6:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    47f8:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    47fa:	81 e0       	ldi	r24, 0x01	; 1
    47fc:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    47fe:	87 81       	ldd	r24, Z+7	; 0x07
    4800:	08 95       	ret

00004802 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    4802:	df 92       	push	r13
    4804:	ef 92       	push	r14
    4806:	ff 92       	push	r15
    4808:	0f 93       	push	r16
    480a:	1f 93       	push	r17
    480c:	cf 93       	push	r28
    480e:	df 93       	push	r29
    4810:	ec 01       	movw	r28, r24
    4812:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    4814:	0c 81       	ldd	r16, Y+4	; 0x04
    4816:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    4818:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    481c:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    481e:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    4820:	ce 01       	movw	r24, r28
    4822:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4826:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    4828:	d8 16       	cp	r13, r24
    482a:	89 f1       	breq	.+98     	; 0x488e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    482c:	81 11       	cpse	r24, r1
    482e:	0a c0       	rjmp	.+20     	; 0x4844 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    4830:	81 e0       	ldi	r24, 0x01	; 1
    4832:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    4834:	df 91       	pop	r29
    4836:	cf 91       	pop	r28
    4838:	1f 91       	pop	r17
    483a:	0f 91       	pop	r16
    483c:	ff 90       	pop	r15
    483e:	ef 90       	pop	r14
    4840:	df 90       	pop	r13
    4842:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    4844:	8c 35       	cpi	r24, 0x5C	; 92
    4846:	d1 f4       	brne	.+52     	; 0x487c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    4848:	ce 01       	movw	r24, r28
    484a:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    484e:	88 23       	and	r24, r24
    4850:	79 f3       	breq	.-34     	; 0x4830 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    4852:	85 37       	cpi	r24, 0x75	; 117
    4854:	19 f4       	brne	.+6      	; 0x485c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    4856:	84 e0       	ldi	r24, 0x04	; 4
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	ec cf       	rjmp	.-40     	; 0x4834 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    485c:	e8 ee       	ldi	r30, 0xE8	; 232
    485e:	f2 e0       	ldi	r31, 0x02	; 2
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    4860:	90 81       	ld	r25, Z
    4862:	99 23       	and	r25, r25
    4864:	51 f0       	breq	.+20     	; 0x487a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    4866:	89 13       	cpse	r24, r25
    4868:	06 c0       	rjmp	.+12     	; 0x4876 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    486a:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    486c:	81 11       	cpse	r24, r1
    486e:	05 c0       	rjmp	.+10     	; 0x487a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    4870:	82 e0       	ldi	r24, 0x02	; 2
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	df cf       	rjmp	.-66     	; 0x4834 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    4876:	32 96       	adiw	r30, 0x02	; 2
    4878:	f3 cf       	rjmp	.-26     	; 0x4860 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    487a:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    487c:	ec 81       	ldd	r30, Y+4	; 0x04
    487e:	fd 81       	ldd	r31, Y+5	; 0x05
    4880:	9f 01       	movw	r18, r30
    4882:	2f 5f       	subi	r18, 0xFF	; 255
    4884:	3f 4f       	sbci	r19, 0xFF	; 255
    4886:	3d 83       	std	Y+5, r19	; 0x05
    4888:	2c 83       	std	Y+4, r18	; 0x04
    488a:	80 83       	st	Z, r24
    488c:	c9 cf       	rjmp	.-110    	; 0x4820 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    488e:	ec 81       	ldd	r30, Y+4	; 0x04
    4890:	fd 81       	ldd	r31, Y+5	; 0x05
    4892:	cf 01       	movw	r24, r30
    4894:	01 96       	adiw	r24, 0x01	; 1
    4896:	9d 83       	std	Y+5, r25	; 0x05
    4898:	8c 83       	std	Y+4, r24	; 0x04
    489a:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    489c:	f7 01       	movw	r30, r14
    489e:	11 83       	std	Z+1, r17	; 0x01
    48a0:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    48a2:	83 e0       	ldi	r24, 0x03	; 3
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	01 2b       	or	r16, r17
    48a8:	29 f2       	breq	.-118    	; 0x4834 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	c2 cf       	rjmp	.-124    	; 0x4834 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

000048b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    48b0:	1f 93       	push	r17
    48b2:	cf 93       	push	r28
    48b4:	df 93       	push	r29
    48b6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    48b8:	ce 01       	movw	r24, r28
    48ba:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    48be:	8b 30       	cpi	r24, 0x0B	; 11
    48c0:	3c f4       	brge	.+14     	; 0x48d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    48c2:	89 30       	cpi	r24, 0x09	; 9
    48c4:	5c f4       	brge	.+22     	; 0x48dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    48c6:	88 23       	and	r24, r24
    48c8:	e9 f0       	breq	.+58     	; 0x4904 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	80 e0       	ldi	r24, 0x00	; 0
    48ce:	1c c0       	rjmp	.+56     	; 0x4908 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    48d0:	80 32       	cpi	r24, 0x20	; 32
    48d2:	21 f0       	breq	.+8      	; 0x48dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    48d4:	8f 32       	cpi	r24, 0x2F	; 47
    48d6:	21 f0       	breq	.+8      	; 0x48e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    48d8:	8d 30       	cpi	r24, 0x0D	; 13
    48da:	b9 f7       	brne	.-18     	; 0x48ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    48dc:	18 86       	std	Y+8, r1	; 0x08
    48de:	ec cf       	rjmp	.-40     	; 0x48b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    48e0:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    48e2:	ce 01       	movw	r24, r28
    48e4:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    48e8:	8a 32       	cpi	r24, 0x2A	; 42
    48ea:	29 f0       	breq	.+10     	; 0x48f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    48ec:	8f 32       	cpi	r24, 0x2F	; 47
    48ee:	d1 f0       	breq	.+52     	; 0x4924 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    48f0:	82 e0       	ldi	r24, 0x02	; 2
    48f2:	90 e0       	ldi	r25, 0x00	; 0
    48f4:	09 c0       	rjmp	.+18     	; 0x4908 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    48f6:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    48f8:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    48fa:	ce 01       	movw	r24, r28
    48fc:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    4900:	81 11       	cpse	r24, r1
    4902:	06 c0       	rjmp	.+12     	; 0x4910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    4904:	81 e0       	ldi	r24, 0x01	; 1
    4906:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    4908:	df 91       	pop	r29
    490a:	cf 91       	pop	r28
    490c:	1f 91       	pop	r17
    490e:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    4910:	8f 32       	cpi	r24, 0x2F	; 47
    4912:	11 f4       	brne	.+4      	; 0x4918 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
    4914:	11 11       	cpse	r17, r1
    4916:	e2 cf       	rjmp	.-60     	; 0x48dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    4918:	11 e0       	ldi	r17, 0x01	; 1
    491a:	8a 32       	cpi	r24, 0x2A	; 42
    491c:	09 f0       	breq	.+2      	; 0x4920 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    491e:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4920:	18 86       	std	Y+8, r1	; 0x08
    4922:	eb cf       	rjmp	.-42     	; 0x48fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    4924:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    4926:	ce 01       	movw	r24, r28
    4928:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    492c:	88 23       	and	r24, r24
    492e:	51 f3       	breq	.-44     	; 0x4904 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    4930:	8a 30       	cpi	r24, 0x0A	; 10
    4932:	c1 f7       	brne	.-16     	; 0x4924 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    4934:	c1 cf       	rjmp	.-126    	; 0x48b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

00004936 <get_function_thermostat_ring_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z40get_function_thermostat_ring_is_selectedjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5623
}

uint8_t get_function_thermostat_ring_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 1;
}
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	08 95       	ret

0000493a <get_function_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z32get_function_default_temp_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5516


uint8_t get_function_default_temp_active(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (default_show_temp == args3)
    493a:	81 e0       	ldi	r24, 0x01	; 1
    493c:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <default_show_temp>
    4940:	94 13       	cpse	r25, r20
    4942:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5520
    ret = 1;

  return ret;
}
    4944:	08 95       	ret

00004946 <get_function_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_default_temp_max_itemsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5509
}
//////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci soucet vsech cidel v systemu
uint8_t get_function_default_temp_max_items(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return use_tds + use_rtds;
    4946:	90 91 d1 0a 	lds	r25, 0x0AD1	; 0x800ad1 <use_tds>
    494a:	80 91 d2 0a 	lds	r24, 0x0AD2	; 0x800ad2 <use_rtds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5510
}
    494e:	89 0f       	add	r24, r25
    4950:	08 95       	ret

00004952 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5284
  }
}

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
    4952:	ed eb       	ldi	r30, 0xBD	; 189
    4954:	f9 e0       	ldi	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5285
  uint8_t active = 0;
    4956:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5287
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    if (w_rom[cnt].used == 1) active++;
    4958:	91 85       	ldd	r25, Z+9	; 0x09
    495a:	91 30       	cpi	r25, 0x01	; 1
    495c:	09 f4       	brne	.+2      	; 0x4960 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    495e:	8f 5f       	subi	r24, 0xFF	; 255
    4960:	3b 96       	adiw	r30, 0x0b	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5286

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
  uint8_t active = 0;
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    4962:	99 e0       	ldi	r25, 0x09	; 9
    4964:	ef 3f       	cpi	r30, 0xFF	; 255
    4966:	f9 07       	cpc	r31, r25
    4968:	b9 f7       	brne	.-18     	; 0x4958 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5289
    if (w_rom[cnt].used == 1) active++;
  return active;
}
    496a:	08 95       	ret

0000496c <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5200
/// funkce vraci pocet obsazenych rtds snimacu
uint8_t get_function_rtds_last_index_for_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return MAX_RTDS;
  //return use_rtds;
}
    496c:	8a e0       	ldi	r24, 0x0A	; 10
    496e:	08 95       	ret

00004970 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5176
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
    4970:	ef 92       	push	r14
    4972:	ff 92       	push	r15
    4974:	0f 93       	push	r16
    4976:	1f 93       	push	r17
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2607
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    4978:	80 17       	cp	r24, r16
    497a:	91 07       	cpc	r25, r17
    497c:	74 f4       	brge	.+28     	; 0x499a <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5178
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    497e:	84 0f       	add	r24, r20
    4980:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2607
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    4982:	08 17       	cp	r16, r24
    4984:	19 07       	cpc	r17, r25
    4986:	4c f4       	brge	.+18     	; 0x499a <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
    4988:	6e 15       	cp	r22, r14
    498a:	7f 05       	cpc	r23, r15
    498c:	34 f4       	brge	.+12     	; 0x499a <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5178
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    498e:	62 0f       	add	r22, r18
    4990:	73 1f       	adc	r23, r19
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2607
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    4992:	81 e0       	ldi	r24, 0x01	; 1
    4994:	e6 16       	cp	r14, r22
    4996:	f7 06       	cpc	r15, r23
    4998:	0c f0       	brlt	.+2      	; 0x499c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5177
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
    499a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5183
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
  {
    ret = true;
  }
  return ret;
}
    499c:	1f 91       	pop	r17
    499e:	0f 91       	pop	r16
    49a0:	ff 90       	pop	r15
    49a2:	ef 90       	pop	r14
    49a4:	08 95       	ret

000049a6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5033
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    menu_slider_data_current[args1]--;
}
///
void process_display_element_slider(uint8_t *start, uint8_t *stop, uint8_t args, uint8_t max_element)
{
    49a6:	cf 93       	push	r28
    49a8:	df 93       	push	r29
    49aa:	fc 01       	movw	r30, r24
    49ac:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5034
  if (max_element > 0)
    49ae:	22 23       	and	r18, r18
    49b0:	09 f1       	breq	.+66     	; 0x49f4 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5036
  {
    menu_slider_data_max = *stop;
    49b2:	98 81       	ld	r25, Y
    49b4:	90 93 b6 08 	sts	0x08B6, r25	; 0x8008b6 <menu_slider_data_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5037
    menu_slider_data_min = *start;
    49b8:	80 81       	ld	r24, Z
    49ba:	80 93 b5 08 	sts	0x08B5, r24	; 0x8008b5 <menu_slider_data_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5038
    menu_slider_data_max_element = max_element;
    49be:	20 93 b4 08 	sts	0x08B4, r18	; 0x8008b4 <menu_slider_data_max_element>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5040
    ///
    *start = menu_slider_data_current[args];
    49c2:	a4 2f       	mov	r26, r20
    49c4:	b0 e0       	ldi	r27, 0x00	; 0
    49c6:	a1 55       	subi	r26, 0x51	; 81
    49c8:	b7 4f       	sbci	r27, 0xF7	; 247
    49ca:	3c 91       	ld	r19, X
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5041
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    49cc:	62 2f       	mov	r22, r18
    49ce:	70 e0       	ldi	r23, 0x00	; 0
    49d0:	49 2f       	mov	r20, r25
    49d2:	50 e0       	ldi	r21, 0x00	; 0
    49d4:	db 01       	movw	r26, r22
    49d6:	a3 0f       	add	r26, r19
    49d8:	b1 1d       	adc	r27, r1
    49da:	4a 17       	cp	r20, r26
    49dc:	5b 07       	cpc	r21, r27
    49de:	6c f0       	brlt	.+26     	; 0x49fa <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5040
  {
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    49e0:	30 83       	st	Z, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5043
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
    49e2:	80 81       	ld	r24, Z
    49e4:	98 17       	cp	r25, r24
    49e6:	08 f4       	brcc	.+2      	; 0x49ea <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5044
      *start = menu_slider_data_max;
    49e8:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5047
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
    49ea:	29 17       	cp	r18, r25
    49ec:	78 f4       	brcc	.+30     	; 0x4a0c <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5046
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    49ee:	80 81       	ld	r24, Z
    49f0:	28 0f       	add	r18, r24
    49f2:	28 83       	st	Y, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5050
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
  }
}
    49f4:	df 91       	pop	r29
    49f6:	cf 91       	pop	r28
    49f8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5041
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    49fa:	48 1b       	sub	r20, r24
    49fc:	51 09       	sbc	r21, r1
    49fe:	64 17       	cp	r22, r20
    4a00:	75 07       	cpc	r23, r21
    4a02:	74 f7       	brge	.-36     	; 0x49e0 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5042
      *start = menu_slider_data_max - max_element;
    4a04:	89 2f       	mov	r24, r25
    4a06:	82 1b       	sub	r24, r18
    4a08:	80 83       	st	Z, r24
    4a0a:	eb cf       	rjmp	.-42     	; 0x49e2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5048
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
    4a0c:	98 83       	st	Y, r25
    4a0e:	f2 cf       	rjmp	.-28     	; 0x49f4 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>

00004a10 <display_function_vertical_slider_dec(unsigned char, unsigned char)>:
_Z36display_function_vertical_slider_dechh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5028
    menu_slider_data_current[args1]++;
}
///
void display_function_vertical_slider_dec(uint8_t args1, uint8_t args2)
{
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    4a10:	e8 2f       	mov	r30, r24
    4a12:	f0 e0       	ldi	r31, 0x00	; 0
    4a14:	e1 55       	subi	r30, 0x51	; 81
    4a16:	f7 4f       	sbci	r31, 0xF7	; 247
    4a18:	80 81       	ld	r24, Z
    4a1a:	90 91 b5 08 	lds	r25, 0x08B5	; 0x8008b5 <menu_slider_data_min>
    4a1e:	98 17       	cp	r25, r24
    4a20:	10 f4       	brcc	.+4      	; 0x4a26 <display_function_vertical_slider_dec(unsigned char, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5029
    menu_slider_data_current[args1]--;
    4a22:	81 50       	subi	r24, 0x01	; 1
    4a24:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5030
}
    4a26:	08 95       	ret

00004a28 <display_function_vertical_slider_inc(unsigned char, unsigned char)>:
_Z36display_function_vertical_slider_inchh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5022
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
}
///
void display_function_vertical_slider_inc(uint8_t args1, uint8_t args2)
{
  if (menu_slider_data_current[args1] < (menu_slider_data_max - menu_slider_data_max_element))
    4a28:	e8 2f       	mov	r30, r24
    4a2a:	f0 e0       	ldi	r31, 0x00	; 0
    4a2c:	e1 55       	subi	r30, 0x51	; 81
    4a2e:	f7 4f       	sbci	r31, 0xF7	; 247
    4a30:	80 81       	ld	r24, Z
    4a32:	20 91 b6 08 	lds	r18, 0x08B6	; 0x8008b6 <menu_slider_data_max>
    4a36:	90 91 b4 08 	lds	r25, 0x08B4	; 0x8008b4 <menu_slider_data_max_element>
    4a3a:	29 1b       	sub	r18, r25
    4a3c:	33 0b       	sbc	r19, r19
    4a3e:	82 17       	cp	r24, r18
    4a40:	13 06       	cpc	r1, r19
    4a42:	14 f4       	brge	.+4      	; 0x4a48 <display_function_vertical_slider_inc(unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5023
    menu_slider_data_current[args1]++;
    4a44:	8f 5f       	subi	r24, 0xFF	; 255
    4a46:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5024
}
    4a48:	08 95       	ret

00004a4a <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3917
}
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
    4a4a:	83 30       	cpi	r24, 0x03	; 3
    4a4c:	41 f4       	brne	.+16     	; 0x4a5e <a2d_complete(unsigned char, unsigned int)+0x14>
    4a4e:	70 93 05 0a 	sts	0x0A05, r23	; 0x800a05 <proud+0x1>
    4a52:	60 93 04 0a 	sts	0x0A04, r22	; 0x800a04 <proud>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3922
  if (channel == A_TRIV ) tritri = data;
  if (channel == A_PETV) petnula = data;
  if (channel == A_DVANACTV) dvanact = data;
  if (channel == A_LIGHT) light_curr = data;
  a2d_run_now = 1;
    4a56:	81 e0       	ldi	r24, 0x01	; 1
    4a58:	80 93 d0 0a 	sts	0x0AD0, r24	; 0x800ad0 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3923
}
    4a5c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3918
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
  if (channel == A_TRIV ) tritri = data;
    4a5e:	86 30       	cpi	r24, 0x06	; 6
    4a60:	29 f4       	brne	.+10     	; 0x4a6c <a2d_complete(unsigned char, unsigned int)+0x22>
    4a62:	70 93 0b 0a 	sts	0x0A0B, r23	; 0x800a0b <tritri+0x1>
    4a66:	60 93 0a 0a 	sts	0x0A0A, r22	; 0x800a0a <tritri>
    4a6a:	f5 cf       	rjmp	.-22     	; 0x4a56 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3919
  if (channel == A_PETV) petnula = data;
    4a6c:	85 30       	cpi	r24, 0x05	; 5
    4a6e:	29 f4       	brne	.+10     	; 0x4a7a <a2d_complete(unsigned char, unsigned int)+0x30>
    4a70:	70 93 09 0a 	sts	0x0A09, r23	; 0x800a09 <petnula+0x1>
    4a74:	60 93 08 0a 	sts	0x0A08, r22	; 0x800a08 <petnula>
    4a78:	ee cf       	rjmp	.-36     	; 0x4a56 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3920
  if (channel == A_DVANACTV) dvanact = data;
    4a7a:	84 30       	cpi	r24, 0x04	; 4
    4a7c:	29 f4       	brne	.+10     	; 0x4a88 <a2d_complete(unsigned char, unsigned int)+0x3e>
    4a7e:	70 93 07 0a 	sts	0x0A07, r23	; 0x800a07 <dvanact+0x1>
    4a82:	60 93 06 0a 	sts	0x0A06, r22	; 0x800a06 <dvanact>
    4a86:	e7 cf       	rjmp	.-50     	; 0x4a56 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3921
  if (channel == A_LIGHT) light_curr = data;
    4a88:	87 30       	cpi	r24, 0x07	; 7
    4a8a:	29 f7       	brne	.-54     	; 0x4a56 <a2d_complete(unsigned char, unsigned int)+0xc>
    4a8c:	70 93 cf 0a 	sts	0x0ACF, r23	; 0x800acf <light_curr+0x1>
    4a90:	60 93 ce 0a 	sts	0x0ACE, r22	; 0x800ace <light_curr>
    4a94:	e0 cf       	rjmp	.-64     	; 0x4a56 <a2d_complete(unsigned char, unsigned int)+0xc>

00004a96 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_return_args_1jjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2571


uint8_t get_function_return_args_1(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return args1;
}
    4a96:	08 95       	ret

00004a98 <menu_redraw_update_temp(unsigned char, unsigned char)>:
_Z23menu_redraw_update_temphh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2559
  return 0;
}

uint8_t menu_redraw_update_temp(uint8_t args1, uint8_t args2)
{
  if (menu_redraw10s == 1)
    4a98:	80 91 d8 0a 	lds	r24, 0x0AD8	; 0x800ad8 <menu_redraw10s>
    4a9c:	81 30       	cpi	r24, 0x01	; 1
    4a9e:	19 f4       	brne	.+6      	; 0x4aa6 <menu_redraw_update_temp(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2561
  {
    menu_redraw10s = 0;
    4aa0:	10 92 d8 0a 	sts	0x0AD8, r1	; 0x800ad8 <menu_redraw10s>
    4aa4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2564
    return 1;
  }
  return 0;
    4aa6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2565
}
    4aa8:	08 95       	ret

00004aaa <menu_redraw_change_term_mode(unsigned char, unsigned char)>:
_Z28menu_redraw_change_term_modehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2549
  return 0;
}

uint8_t menu_redraw_change_term_mode(uint8_t args1, uint8_t args2)
{
  if (change_term_mode == 1)
    4aaa:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <change_term_mode>
    4aae:	81 30       	cpi	r24, 0x01	; 1
    4ab0:	19 f4       	brne	.+6      	; 0x4ab8 <menu_redraw_change_term_mode(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2551
  {
    change_term_mode = 0;
    4ab2:	10 92 ef 08 	sts	0x08EF, r1	; 0x8008ef <change_term_mode>
    4ab6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554
    return 1;
  }
  return 0;
    4ab8:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2555
}
    4aba:	08 95       	ret

00004abc <menu_redraw_time05s(unsigned char, unsigned char)>:
_Z19menu_redraw_time05shh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2539
}


uint8_t menu_redraw_time05s(uint8_t args1, uint8_t args2)
{
  if (menu_redraw05s == 1)
    4abc:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <menu_redraw05s>
    4ac0:	81 30       	cpi	r24, 0x01	; 1
    4ac2:	19 f4       	brne	.+6      	; 0x4aca <menu_redraw_time05s(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2541
  {
    menu_redraw05s = 0;
    4ac4:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <menu_redraw05s>
    4ac8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2544
    return 1;
  }
  return 0;
    4aca:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2545
}
    4acc:	08 95       	ret

00004ace <click_keyboard_type(unsigned char, unsigned char)>:
_Z19click_keyboard_typehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2504
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}

void click_keyboard_type(uint8_t args1, uint8_t args2)
{
  dialog_set_string_keyboard_type = args1;
    4ace:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <dialog_set_string_keyboard_type>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2505
}
    4ad2:	08 95       	ret

00004ad4 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2494
  display_element_set_string_add_char(znak);
}
/// vraci pocet prvku pro zobrazeni
uint8_t get_function_keyboard_alfa_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    4ad4:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <dialog_set_string_keyboard_type>
    4ad8:	83 30       	cpi	r24, 0x03	; 3
    4ada:	08 f0       	brcs	.+2      	; 0x4ade <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    4adc:	08 95       	ret
    4ade:	8a e1       	ldi	r24, 0x1A	; 26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2500
    return KEYBOARD_SIZE_CHAR_UPPER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    return KEYBOARD_SIZE_CHAR_LOWER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}
    4ae0:	08 95       	ret

00004ae2 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2465

/////
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    4ae2:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <dialog_set_string_keyboard_type>
    4ae6:	91 11       	cpse	r25, r1
    4ae8:	0a c0       	rjmp	.+20     	; 0x4afe <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2466
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
    4aea:	e8 2f       	mov	r30, r24
    4aec:	f0 e0       	ldi	r31, 0x00	; 0
    4aee:	e8 5c       	subi	r30, 0xC8	; 200
    4af0:	fe 4c       	sbci	r31, 0xCE	; 206
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2470
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    4af2:	e4 91       	lpm	r30, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2471
  line1[0] = znak;
    4af4:	da 01       	movw	r26, r20
    4af6:	ec 93       	st	X, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2472
  line2[0] = 0;
    4af8:	f9 01       	movw	r30, r18
    4afa:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2473
}
    4afc:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2467
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    4afe:	91 30       	cpi	r25, 0x01	; 1
    4b00:	29 f4       	brne	.+10     	; 0x4b0c <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2468
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
    4b02:	e8 2f       	mov	r30, r24
    4b04:	f0 e0       	ldi	r31, 0x00	; 0
    4b06:	e2 5e       	subi	r30, 0xE2	; 226
    4b08:	fe 4c       	sbci	r31, 0xCE	; 206
    4b0a:	f3 cf       	rjmp	.-26     	; 0x4af2 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2469
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    4b0c:	92 30       	cpi	r25, 0x02	; 2
    4b0e:	91 f7       	brne	.-28     	; 0x4af4 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2470
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    4b10:	e8 2f       	mov	r30, r24
    4b12:	f0 e0       	ldi	r31, 0x00	; 0
    4b14:	ec 5f       	subi	r30, 0xFC	; 252
    4b16:	fe 4c       	sbci	r31, 0xCE	; 206
    4b18:	ec cf       	rjmp	.-40     	; 0x4af2 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x10>

00004b1a <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2457
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    4b1a:	8a 30       	cpi	r24, 0x0A	; 10
    4b1c:	31 f0       	breq	.+12     	; 0x4b2a <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2456
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
    4b1e:	80 5d       	subi	r24, 0xD0	; 208
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2457
  if (args1 == 10) line1[0] = '.';
    4b20:	fa 01       	movw	r30, r20
    4b22:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2458
  line2[0] = 0;
    4b24:	f9 01       	movw	r30, r18
    4b26:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2459
}
    4b28:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2457
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    4b2a:	8e e2       	ldi	r24, 0x2E	; 46
    4b2c:	f9 cf       	rjmp	.-14     	; 0x4b20 <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)+0x6>

00004b2e <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_keyboard_number_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
//////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci pocet polozek dynamickeho menu
uint8_t get_function_keyboard_number_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 11;
}
    4b2e:	8b e0       	ldi	r24, 0x0B	; 11
    4b30:	08 95       	ret

00004b32 <get_function_budik_enabled(unsigned char)>:
_Z26get_function_budik_enabledh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2418
   funkce pro nastaveni budiku
*/
uint8_t get_function_budik_enabled(uint8_t args)
{
  return 1;
}
    4b32:	81 e0       	ldi	r24, 0x01	; 1
    4b34:	08 95       	ret

00004b36 <display_function_set_variable_plus()>:
_Z34display_function_set_variable_plusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2295
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args, 0);
  }
}
void display_function_set_variable_plus(void)
{
  if ((menu_dialog_set_variable_now + menu_dialog_set_variable_step) <= menu_dialog_set_variable_max)
    4b36:	80 91 5e 08 	lds	r24, 0x085E	; 0x80085e <menu_dialog_set_variable_step>
    4b3a:	20 91 ab 08 	lds	r18, 0x08AB	; 0x8008ab <menu_dialog_set_variable_now>
    4b3e:	30 91 ac 08 	lds	r19, 0x08AC	; 0x8008ac <menu_dialog_set_variable_now+0x1>
    4b42:	82 0f       	add	r24, r18
    4b44:	93 2f       	mov	r25, r19
    4b46:	91 1d       	adc	r25, r1
    4b48:	20 91 5f 08 	lds	r18, 0x085F	; 0x80085f <menu_dialog_set_variable_max>
    4b4c:	30 91 60 08 	lds	r19, 0x0860	; 0x800860 <menu_dialog_set_variable_max+0x1>
    4b50:	28 17       	cp	r18, r24
    4b52:	39 07       	cpc	r19, r25
    4b54:	8c f0       	brlt	.+34     	; 0x4b78 <display_function_set_variable_plus()+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2297
  {
    menu_dialog_set_variable_now = menu_dialog_set_variable_now + menu_dialog_set_variable_step;
    4b56:	90 93 ac 08 	sts	0x08AC, r25	; 0x8008ac <menu_dialog_set_variable_now+0x1>
    4b5a:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2298
    if (menu_dialog_set_variable_update_now == H_TRUE)
    4b5e:	20 91 5c 08 	lds	r18, 0x085C	; 0x80085c <menu_dialog_set_variable_update_now>
    4b62:	21 30       	cpi	r18, 0x01	; 1
    4b64:	49 f4       	brne	.+18     	; 0x4b78 <display_function_set_variable_plus()+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2299
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args, 0);
    4b66:	60 91 5d 08 	lds	r22, 0x085D	; 0x80085d <menu_dialog_set_variable_args>
    4b6a:	70 e0       	ldi	r23, 0x00	; 0
    4b6c:	e0 91 db 08 	lds	r30, 0x08DB	; 0x8008db <dialog_save_variable_function>
    4b70:	f0 91 dc 08 	lds	r31, 0x08DC	; 0x8008dc <dialog_save_variable_function+0x1>
    4b74:	40 e0       	ldi	r20, 0x00	; 0
    4b76:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2301
  }
}
    4b78:	08 95       	ret

00004b7a <display_function_set_variable_minus()>:
_Z35display_function_set_variable_minusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286
  return menu_dialog_set_variable_now;
}

void display_function_set_variable_minus(void)
{
  if (menu_dialog_set_variable_now - menu_dialog_set_variable_step >= menu_dialog_set_variable_min)
    4b7a:	20 91 5e 08 	lds	r18, 0x085E	; 0x80085e <menu_dialog_set_variable_step>
    4b7e:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <menu_dialog_set_variable_now>
    4b82:	90 91 ac 08 	lds	r25, 0x08AC	; 0x8008ac <menu_dialog_set_variable_now+0x1>
    4b86:	82 1b       	sub	r24, r18
    4b88:	91 09       	sbc	r25, r1
    4b8a:	20 91 61 08 	lds	r18, 0x0861	; 0x800861 <menu_dialog_set_variable_min>
    4b8e:	30 91 62 08 	lds	r19, 0x0862	; 0x800862 <menu_dialog_set_variable_min+0x1>
    4b92:	82 17       	cp	r24, r18
    4b94:	93 07       	cpc	r25, r19
    4b96:	8c f0       	brlt	.+34     	; 0x4bba <display_function_set_variable_minus()+0x40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
  {
    menu_dialog_set_variable_now = menu_dialog_set_variable_now - menu_dialog_set_variable_step;
    4b98:	90 93 ac 08 	sts	0x08AC, r25	; 0x8008ac <menu_dialog_set_variable_now+0x1>
    4b9c:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
    if (menu_dialog_set_variable_update_now == H_TRUE)
    4ba0:	20 91 5c 08 	lds	r18, 0x085C	; 0x80085c <menu_dialog_set_variable_update_now>
    4ba4:	21 30       	cpi	r18, 0x01	; 1
    4ba6:	49 f4       	brne	.+18     	; 0x4bba <display_function_set_variable_minus()+0x40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2290
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args, 0);
    4ba8:	60 91 5d 08 	lds	r22, 0x085D	; 0x80085d <menu_dialog_set_variable_args>
    4bac:	70 e0       	ldi	r23, 0x00	; 0
    4bae:	e0 91 db 08 	lds	r30, 0x08DB	; 0x8008db <dialog_save_variable_function>
    4bb2:	f0 91 dc 08 	lds	r31, 0x08DC	; 0x8008dc <dialog_save_variable_function+0x1>
    4bb6:	40 e0       	ldi	r20, 0x00	; 0
    4bb8:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2292
  }
}
    4bba:	08 95       	ret

00004bbc <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2214
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
    4bbc:	ff 92       	push	r15
    4bbe:	0f 93       	push	r16
    4bc0:	1f 93       	push	r17
    4bc2:	cf 93       	push	r28
    4bc4:	df 93       	push	r29
    4bc6:	dc 01       	movw	r26, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2219
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4bc8:	20 91 6e 08 	lds	r18, 0x086E	; 0x80086e <MenuHistoryIndex>
    4bcc:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2216
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	6d e1       	ldi	r22, 0x1D	; 29
    4bd2:	76 e0       	ldi	r23, 0x06	; 6
    4bd4:	c2 e6       	ldi	r28, 0x62	; 98
    4bd6:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2219
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4bd8:	89 01       	movw	r16, r18
    4bda:	0c 59       	subi	r16, 0x9C	; 156
    4bdc:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2216
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    4bde:	fb 01       	movw	r30, r22
    4be0:	84 91       	lpm	r24, Z
    4be2:	98 17       	cp	r25, r24
    4be4:	e8 f4       	brcc	.+58     	; 0x4c20 <MenuHistoryGetMenu(unsigned char*)+0x64>
    4be6:	9c 9f       	mul	r25, r28
    4be8:	a0 01       	movw	r20, r0
    4bea:	9d 9f       	mul	r25, r29
    4bec:	50 0d       	add	r21, r0
    4bee:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2219
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4bf0:	fa 01       	movw	r30, r20
    4bf2:	e3 59       	subi	r30, 0x93	; 147
    4bf4:	f7 4f       	sbci	r31, 0xF7	; 247
    4bf6:	f4 90       	lpm	r15, Z
    4bf8:	f8 01       	movw	r30, r16
    4bfa:	80 81       	ld	r24, Z
    4bfc:	8f 11       	cpse	r24, r15
    4bfe:	0e c0       	rjmp	.+28     	; 0x4c1c <MenuHistoryGetMenu(unsigned char*)+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2218
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    4c00:	40 5e       	subi	r20, 0xE0	; 224
    4c02:	59 4f       	sbci	r21, 0xF9	; 249
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2240
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
    4c04:	2e 5a       	subi	r18, 0xAE	; 174
    4c06:	37 4f       	sbci	r19, 0xF7	; 247
    4c08:	f9 01       	movw	r30, r18
    4c0a:	20 81       	ld	r18, Z
    4c0c:	2c 93       	st	X, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2246
      return menus;
    }
  }


}
    4c0e:	ca 01       	movw	r24, r20
    4c10:	df 91       	pop	r29
    4c12:	cf 91       	pop	r28
    4c14:	1f 91       	pop	r17
    4c16:	0f 91       	pop	r16
    4c18:	ff 90       	pop	r15
    4c1a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2216
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    4c1c:	9f 5f       	subi	r25, 0xFF	; 255
    4c1e:	df cf       	rjmp	.-66     	; 0x4bde <MenuHistoryGetMenu(unsigned char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2225
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	6e e1       	ldi	r22, 0x1E	; 30
    4c24:	76 e0       	ldi	r23, 0x06	; 6
    4c26:	c2 e6       	ldi	r28, 0x62	; 98
    4c28:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2228
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4c2a:	89 01       	movw	r16, r18
    4c2c:	0c 59       	subi	r16, 0x9C	; 156
    4c2e:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2225
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    4c30:	fb 01       	movw	r30, r22
    4c32:	84 91       	lpm	r24, Z
    4c34:	98 17       	cp	r25, r24
    4c36:	90 f4       	brcc	.+36     	; 0x4c5c <MenuHistoryGetMenu(unsigned char*)+0xa0>
    4c38:	9c 9f       	mul	r25, r28
    4c3a:	a0 01       	movw	r20, r0
    4c3c:	9d 9f       	mul	r25, r29
    4c3e:	50 0d       	add	r21, r0
    4c40:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2228
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4c42:	fa 01       	movw	r30, r20
    4c44:	e7 54       	subi	r30, 0x47	; 71
    4c46:	f9 4e       	sbci	r31, 0xE9	; 233
    4c48:	f4 90       	lpm	r15, Z
    4c4a:	f8 01       	movw	r30, r16
    4c4c:	80 81       	ld	r24, Z
    4c4e:	8f 11       	cpse	r24, r15
    4c50:	03 c0       	rjmp	.+6      	; 0x4c58 <MenuHistoryGetMenu(unsigned char*)+0x9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2227
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
  {
    menus = &Menu_All.ListMenu2[idx];
    4c52:	44 59       	subi	r20, 0x94	; 148
    4c54:	5b 4e       	sbci	r21, 0xEB	; 235
    4c56:	d6 cf       	rjmp	.-84     	; 0x4c04 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2225
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    4c58:	9f 5f       	subi	r25, 0xFF	; 255
    4c5a:	ea cf       	rjmp	.-44     	; 0x4c30 <MenuHistoryGetMenu(unsigned char*)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2235
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	6f e1       	ldi	r22, 0x1F	; 31
    4c60:	76 e0       	ldi	r23, 0x06	; 6
    4c62:	c2 e6       	ldi	r28, 0x62	; 98
    4c64:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2238
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4c66:	89 01       	movw	r16, r18
    4c68:	0c 59       	subi	r16, 0x9C	; 156
    4c6a:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2235
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    4c6c:	fb 01       	movw	r30, r22
    4c6e:	84 91       	lpm	r24, Z
    4c70:	98 17       	cp	r25, r24
    4c72:	68 f6       	brcc	.-102    	; 0x4c0e <MenuHistoryGetMenu(unsigned char*)+0x52>
    4c74:	9c 9f       	mul	r25, r28
    4c76:	a0 01       	movw	r20, r0
    4c78:	9d 9f       	mul	r25, r29
    4c7a:	50 0d       	add	r21, r0
    4c7c:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2238
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4c7e:	fa 01       	movw	r30, r20
    4c80:	eb 5f       	subi	r30, 0xFB	; 251
    4c82:	fa 4d       	sbci	r31, 0xDA	; 218
    4c84:	f4 90       	lpm	r15, Z
    4c86:	f8 01       	movw	r30, r16
    4c88:	80 81       	ld	r24, Z
    4c8a:	8f 11       	cpse	r24, r15
    4c8c:	03 c0       	rjmp	.+6      	; 0x4c94 <MenuHistoryGetMenu(unsigned char*)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2237
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
    4c8e:	48 54       	subi	r20, 0x48	; 72
    4c90:	5d 4d       	sbci	r21, 0xDD	; 221
    4c92:	b8 cf       	rjmp	.-144    	; 0x4c04 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2235
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    4c94:	9f 5f       	subi	r25, 0xFF	; 255
    4c96:	ea cf       	rjmp	.-44     	; 0x4c6c <MenuHistoryGetMenu(unsigned char*)+0xb0>

00004c98 <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1648




bool enable_redraw(uint8_t mask, uint8_t data)
{
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1652
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
  {
    uint8_t v = (1 << i);
    4c9c:	e1 e0       	ldi	r30, 0x01	; 1
    4c9e:	f0 e0       	ldi	r31, 0x00	; 0
    4ca0:	af 01       	movw	r20, r30
    4ca2:	02 2e       	mov	r0, r18
    4ca4:	01 c0       	rjmp	.+2      	; 0x4ca8 <enable_redraw(unsigned char, unsigned char)+0x10>
    4ca6:	44 0f       	add	r20, r20
    4ca8:	0a 94       	dec	r0
    4caa:	ea f7       	brpl	.-6      	; 0x4ca6 <enable_redraw(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1653
    if ( (mask & v) != 0 )
    4cac:	98 2f       	mov	r25, r24
    4cae:	94 23       	and	r25, r20
    4cb0:	11 f0       	breq	.+4      	; 0x4cb6 <enable_redraw(unsigned char, unsigned char)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1654
      if ( (data & v) != 0)
    4cb2:	46 23       	and	r20, r22
    4cb4:	39 f4       	brne	.+14     	; 0x4cc4 <enable_redraw(unsigned char, unsigned char)+0x2c>
    4cb6:	2f 5f       	subi	r18, 0xFF	; 255
    4cb8:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1650


bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
    4cba:	28 30       	cpi	r18, 0x08	; 8
    4cbc:	31 05       	cpc	r19, r1
    4cbe:	81 f7       	brne	.-32     	; 0x4ca0 <enable_redraw(unsigned char, unsigned char)+0x8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1649



bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
    4cc0:	80 e0       	ldi	r24, 0x00	; 0
    4cc2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1656
  {
    uint8_t v = (1 << i);
    if ( (mask & v) != 0 )
      if ( (data & v) != 0)
      {
        ret = true;
    4cc4:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1661
        break;
      }
  }
  return ret;
}
    4cc6:	08 95       	ret

00004cc8 <display_enable_show(unsigned char, unsigned char)>:
_Z19display_enable_showhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1636
  return 0;
}
uint8_t display_enable_show(uint8_t args1, uint8_t args2)
{
  return 1;
}
    4cc8:	81 e0       	ldi	r24, 0x01	; 1
    4cca:	08 95       	ret

00004ccc <returnnullfceargs(unsigned int, unsigned int)>:
_Z17returnnullfceargsjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1632
void nullfce(void) {};
void nullfceargs(uint16_t args1, uint16_t args2) {};
uint8_t returnnullfceargs(uint16_t args1, uint16_t args2)
{
  return 0;
}
    4ccc:	80 e0       	ldi	r24, 0x00	; 0
    4cce:	08 95       	ret

00004cd0 <nullfceargs(unsigned int, unsigned int)>:
_Z11nullfceargsjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1628




void nullfce(void) {};
void nullfceargs(uint16_t args1, uint16_t args2) {};
    4cd0:	08 95       	ret

00004cd2 <nullfce()>:
_Z7nullfcev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1627





void nullfce(void) {};
    4cd2:	08 95       	ret

00004cd4 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:57
  size_t size() const {
    return _size;
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    4cd4:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:82
  void alignNextAlloc() {
    _size = round_size_up(_size);
  }

  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
    4cd6:	86 81       	ldd	r24, Z+6	; 0x06
    4cd8:	97 81       	ldd	r25, Z+7	; 0x07
    4cda:	68 0f       	add	r22, r24
    4cdc:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    4cde:	24 81       	ldd	r18, Z+4	; 0x04
    4ce0:	35 81       	ldd	r19, Z+5	; 0x05
    4ce2:	26 17       	cp	r18, r22
    4ce4:	37 07       	cpc	r19, r23
    4ce6:	38 f0       	brcs	.+14     	; 0x4cf6 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:86
  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
  }

  void* doAlloc(size_t bytes) {
    void* p = &_buffer[_size];
    4ce8:	22 81       	ldd	r18, Z+2	; 0x02
    4cea:	33 81       	ldd	r19, Z+3	; 0x03
    4cec:	82 0f       	add	r24, r18
    4cee:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:87
    _size += bytes;
    4cf0:	77 83       	std	Z+7, r23	; 0x07
    4cf2:	66 83       	std	Z+6, r22	; 0x06
    4cf4:	08 95       	ret
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:61
    return doAlloc(bytes);
  }
    4cfa:	08 95       	ret

00004cfc <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
}

int EthernetClient::peek() {
    4cfc:	0f 93       	push	r16
    4cfe:	1f 93       	push	r17
    4d00:	cf 93       	push	r28
    4d02:	df 93       	push	r29
    4d04:	1f 92       	push	r1
    4d06:	cd b7       	in	r28, 0x3d	; 61
    4d08:	de b7       	in	r29, 0x3e	; 62
    4d0a:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    4d0c:	dc 01       	movw	r26, r24
    4d0e:	ed 91       	ld	r30, X+
    4d10:	fc 91       	ld	r31, X
    4d12:	00 84       	ldd	r0, Z+8	; 0x08
    4d14:	f1 85       	ldd	r31, Z+9	; 0x09
    4d16:	e0 2d       	mov	r30, r0
    4d18:	19 95       	eicall
    4d1a:	89 2b       	or	r24, r25
    4d1c:	91 f0       	breq	.+36     	; 0x4d42 <EthernetClient::peek()+0x46>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
    4d1e:	21 e0       	ldi	r18, 0x01	; 1
    4d20:	41 e0       	ldi	r20, 0x01	; 1
    4d22:	50 e0       	ldi	r21, 0x00	; 0
    4d24:	be 01       	movw	r22, r28
    4d26:	6f 5f       	subi	r22, 0xFF	; 255
    4d28:	7f 4f       	sbci	r23, 0xFF	; 255
    4d2a:	f8 01       	movw	r30, r16
    4d2c:	84 85       	ldd	r24, Z+12	; 0x0c
    4d2e:	0e 94 a1 98 	call	0x13142	; 0x13142 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
    return -1;
  ::peek(_sock, &b);
  return b;
    4d32:	89 81       	ldd	r24, Y+1	; 0x01
    4d34:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
    4d36:	0f 90       	pop	r0
    4d38:	df 91       	pop	r29
    4d3a:	cf 91       	pop	r28
    4d3c:	1f 91       	pop	r17
    4d3e:	0f 91       	pop	r16
    4d40:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    4d42:	8f ef       	ldi	r24, 0xFF	; 255
    4d44:	9f ef       	ldi	r25, 0xFF	; 255
    4d46:	f7 cf       	rjmp	.-18     	; 0x4d36 <EthernetClient::peek()+0x3a>

00004d48 <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
    return -1;
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    4d48:	fc 01       	movw	r30, r24
    4d4a:	84 85       	ldd	r24, Z+12	; 0x0c
    4d4c:	0c 94 07 99 	jmp	0x1320e	; 0x1320e <recv(unsigned char, unsigned char*, int)>

00004d50 <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95
  if (_sock != MAX_SOCK_NUM)
    return w5500.getRXReceivedSize(_sock);
  return 0;
}

int EthernetClient::read() {
    4d50:	cf 93       	push	r28
    4d52:	df 93       	push	r29
    4d54:	1f 92       	push	r1
    4d56:	cd b7       	in	r28, 0x3d	; 61
    4d58:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    4d5a:	41 e0       	ldi	r20, 0x01	; 1
    4d5c:	50 e0       	ldi	r21, 0x00	; 0
    4d5e:	be 01       	movw	r22, r28
    4d60:	6f 5f       	subi	r22, 0xFF	; 255
    4d62:	7f 4f       	sbci	r23, 0xFF	; 255
    4d64:	fc 01       	movw	r30, r24
    4d66:	84 85       	ldd	r24, Z+12	; 0x0c
    4d68:	0e 94 07 99 	call	0x1320e	; 0x1320e <recv(unsigned char, unsigned char*, int)>
    4d6c:	18 16       	cp	r1, r24
    4d6e:	19 06       	cpc	r1, r25
    4d70:	34 f4       	brge	.+12     	; 0x4d7e <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
    4d72:	89 81       	ldd	r24, Y+1	; 0x01
    4d74:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
    4d76:	0f 90       	pop	r0
    4d78:	df 91       	pop	r29
    4d7a:	cf 91       	pop	r28
    4d7c:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
    4d7e:	8f ef       	ldi	r24, 0xFF	; 255
    4d80:	9f ef       	ldi	r25, 0xFF	; 255
    4d82:	f9 cf       	rjmp	.-14     	; 0x4d76 <EthernetClient::read()+0x26>

00004d84 <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    4d84:	fc 01       	movw	r30, r24
    4d86:	84 85       	ldd	r24, Z+12	; 0x0c
    4d88:	88 30       	cpi	r24, 0x08	; 8
    4d8a:	11 f0       	breq	.+4      	; 0x4d90 <EthernetClient::available()+0xc>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
    4d8c:	0c 94 f0 88 	jmp	0x111e0	; 0x111e0 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	80 e0       	ldi	r24, 0x00	; 0
    4d94:	08 95       	ret

00004d96 <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:15
    _ckp = 0;
    _order = MSBFIRST;
    digitalWrite(_sck, _ckp ? HIGH : LOW);
}

void SoftSPIB::begin() {
    4d96:	cf 93       	push	r28
    4d98:	df 93       	push	r29
    4d9a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:16
    pinMode(_mosi, OUTPUT);
    4d9c:	61 e0       	ldi	r22, 0x01	; 1
    4d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    4da0:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:17
    pinMode(_miso, INPUT);
    4da4:	60 e0       	ldi	r22, 0x00	; 0
    4da6:	8b 81       	ldd	r24, Y+3	; 0x03
    4da8:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
    pinMode(_sck, OUTPUT);
    4dac:	61 e0       	ldi	r22, 0x01	; 1
    4dae:	8d 81       	ldd	r24, Y+5	; 0x05
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:19
}
    4db0:	df 91       	pop	r29
    4db2:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
}

void SoftSPIB::begin() {
    pinMode(_mosi, OUTPUT);
    pinMode(_miso, INPUT);
    pinMode(_sck, OUTPUT);
    4db4:	0c 94 d0 8a 	jmp	0x115a0	; 0x115a0 <pinMode>

00004db8 <get_function_budik_text_state(unsigned char, unsigned char, char*, char*)>:
_Z29get_function_budik_text_statehhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2420
uint8_t get_function_budik_enabled(uint8_t args)
{
  return 1;
}
void get_function_budik_text_state(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    4db8:	cf 93       	push	r28
    4dba:	df 93       	push	r29
    4dbc:	ca 01       	movw	r24, r20
    4dbe:	e9 01       	movw	r28, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2421
  strcpy(line1, "Zapnuto 06:45");
    4dc0:	63 ef       	ldi	r22, 0xF3	; 243
    4dc2:	72 e0       	ldi	r23, 0x02	; 2
    4dc4:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2422
  line2[0] = 0;
    4dc8:	18 82       	st	Y, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2423
}
    4dca:	df 91       	pop	r29
    4dcc:	cf 91       	pop	r28
    4dce:	08 95       	ret

00004dd0 <get_function_thermostat_set_mode_button_labels(unsigned char, unsigned char, char*, char*)>:
_Z46get_function_thermostat_set_mode_button_labelshhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5676
  if (args3 == 3) thermostat_ring_set_mode(args2, TERM_MODE_PROG);
  if (args3 == 4) thermostat_ring_set_mode(args2, TERM_MODE_MAN);
}

void get_function_thermostat_set_mode_button_labels(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    4dd0:	cf 93       	push	r28
    4dd2:	df 93       	push	r29
    4dd4:	68 2f       	mov	r22, r24
    4dd6:	ca 01       	movw	r24, r20
    4dd8:	e9 01       	movw	r28, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5677
  if (args1 == 0)
    4dda:	61 11       	cpse	r22, r1
    4ddc:	0b c0       	rjmp	.+22     	; 0x4df4 <get_function_thermostat_set_mode_button_labels(unsigned char, unsigned char, char*, char*)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5679
  {
    strcpy_P(line1, button_term_off);
    4dde:	6f e7       	ldi	r22, 0x7F	; 127
    4de0:	75 e3       	ldi	r23, 0x35	; 53
    4de2:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5680
    strcpy_P(line2, button_term_off_comment);
    4de6:	69 e6       	ldi	r22, 0x69	; 105
    4de8:	75 e3       	ldi	r23, 0x35	; 53
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5700
    strcpy_P(line2, button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, button_term_man);
    strcpy_P(line2, button_term_man_comment);
    4dea:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5702
  }
}
    4dec:	df 91       	pop	r29
    4dee:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5700
    strcpy_P(line2, button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, button_term_man);
    strcpy_P(line2, button_term_man_comment);
    4df0:	0c 94 3e aa 	jmp	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5682
  if (args1 == 0)
  {
    strcpy_P(line1, button_term_off);
    strcpy_P(line2, button_term_off_comment);
  }
  if (args1 == 1)
    4df4:	61 30       	cpi	r22, 0x01	; 1
    4df6:	39 f4       	brne	.+14     	; 0x4e06 <get_function_thermostat_set_mode_button_labels(unsigned char, unsigned char, char*, char*)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5684
  {
    strcpy_P(line1, button_term_max);
    4df8:	65 e6       	ldi	r22, 0x65	; 101
    4dfa:	75 e3       	ldi	r23, 0x35	; 53
    4dfc:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5685
    strcpy_P(line2, button_term_max_comment);
    4e00:	6f e4       	ldi	r22, 0x4F	; 79
    4e02:	75 e3       	ldi	r23, 0x35	; 53
    4e04:	f2 cf       	rjmp	.-28     	; 0x4dea <get_function_thermostat_set_mode_button_labels(unsigned char, unsigned char, char*, char*)+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5687
  }
  if (args1 == 2)
    4e06:	62 30       	cpi	r22, 0x02	; 2
    4e08:	39 f4       	brne	.+14     	; 0x4e18 <get_function_thermostat_set_mode_button_labels(unsigned char, unsigned char, char*, char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5689
  {
    strcpy_P(line1, button_term_min);
    4e0a:	6b e4       	ldi	r22, 0x4B	; 75
    4e0c:	75 e3       	ldi	r23, 0x35	; 53
    4e0e:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5690
    strcpy_P(line2, button_term_min_comment);
    4e12:	64 e3       	ldi	r22, 0x34	; 52
    4e14:	75 e3       	ldi	r23, 0x35	; 53
    4e16:	e9 cf       	rjmp	.-46     	; 0x4dea <get_function_thermostat_set_mode_button_labels(unsigned char, unsigned char, char*, char*)+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5692
  }
  if (args1 == 3)
    4e18:	63 30       	cpi	r22, 0x03	; 3
    4e1a:	39 f4       	brne	.+14     	; 0x4e2a <get_function_thermostat_set_mode_button_labels(unsigned char, unsigned char, char*, char*)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5694
  {
    strcpy_P(line1, button_term_prog);
    4e1c:	6f e2       	ldi	r22, 0x2F	; 47
    4e1e:	75 e3       	ldi	r23, 0x35	; 53
    4e20:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5695
    strcpy_P(line2, button_term_prog_comment);
    4e24:	6b e1       	ldi	r22, 0x1B	; 27
    4e26:	75 e3       	ldi	r23, 0x35	; 53
    4e28:	e0 cf       	rjmp	.-64     	; 0x4dea <get_function_thermostat_set_mode_button_labels(unsigned char, unsigned char, char*, char*)+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5697
  }
  if (args1 == 4)
    4e2a:	64 30       	cpi	r22, 0x04	; 4
    4e2c:	39 f4       	brne	.+14     	; 0x4e3c <get_function_thermostat_set_mode_button_labels(unsigned char, unsigned char, char*, char*)+0x6c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5699
  {
    strcpy_P(line1, button_term_man);
    4e2e:	67 e1       	ldi	r22, 0x17	; 23
    4e30:	75 e3       	ldi	r23, 0x35	; 53
    4e32:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5700
    strcpy_P(line2, button_term_man_comment);
    4e36:	68 e0       	ldi	r22, 0x08	; 8
    4e38:	75 e3       	ldi	r23, 0x35	; 53
    4e3a:	d7 cf       	rjmp	.-82     	; 0x4dea <get_function_thermostat_set_mode_button_labels(unsigned char, unsigned char, char*, char*)+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5702
  }
}
    4e3c:	df 91       	pop	r29
    4e3e:	cf 91       	pop	r28
    4e40:	08 95       	ret

00004e42 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.34():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:294
  template <typename TStringRef>
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    4e42:	0f 93       	push	r16
    4e44:	1f 93       	push	r17
    4e46:	cf 93       	push	r28
    4e48:	df 93       	push	r29
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
    if (!_data) return 0;
    4e4a:	00 97       	sbiw	r24, 0x00	; 0
    4e4c:	01 f1       	breq	.+64     	; 0x4e8e <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x4c>
    4e4e:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:296
    Internals::Slot* slot = _data->head;
    4e50:	fc 01       	movw	r30, r24
    4e52:	c0 81       	ld	r28, Z
    4e54:	d1 81       	ldd	r29, Z+1	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:297
    while (slot) {
    4e56:	20 97       	sbiw	r28, 0x00	; 0
    4e58:	d1 f0       	breq	.+52     	; 0x4e8e <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x4c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:298
      if (Internals::makeString(key).equals(slot->key)) break;
    4e5a:	6a 85       	ldd	r22, Y+10	; 0x0a
    4e5c:	7b 85       	ldd	r23, Y+11	; 0x0b
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:16
 public:
  ZeroTerminatedRamString(const char* str) : _str(str) {}

  bool equals(const char* expected) const {
    const char* actual = reinterpret_cast<const char*>(_str);
    if (!actual || !expected) return actual == expected;
    4e5e:	01 15       	cp	r16, r1
    4e60:	11 05       	cpc	r17, r1
    4e62:	19 f0       	breq	.+6      	; 0x4e6a <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x28>
    4e64:	61 15       	cp	r22, r1
    4e66:	71 05       	cpc	r23, r1
    4e68:	49 f4       	brne	.+18     	; 0x4e7c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x3a>
    4e6a:	06 17       	cp	r16, r22
    4e6c:	17 07       	cpc	r17, r23
    4e6e:	59 f4       	brne	.+22     	; 0x4e86 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.34():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:302
      slot = slot->next;
    }
    return slot;
  }
    4e70:	ce 01       	movw	r24, r28
    4e72:	df 91       	pop	r29
    4e74:	cf 91       	pop	r28
    4e76:	1f 91       	pop	r17
    4e78:	0f 91       	pop	r16
    4e7a:	08 95       	ret
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:17
    return strcmp(actual, expected) == 0;
    4e7c:	c8 01       	movw	r24, r16
    4e7e:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    4e82:	89 2b       	or	r24, r25
    4e84:	a9 f3       	breq	.-22     	; 0x4e70 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.34():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:299
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    Internals::Slot* slot = _data->head;
    while (slot) {
      if (Internals::makeString(key).equals(slot->key)) break;
      slot = slot->next;
    4e86:	0e 80       	ldd	r0, Y+6	; 0x06
    4e88:	df 81       	ldd	r29, Y+7	; 0x07
    4e8a:	c0 2d       	mov	r28, r0
    4e8c:	e4 cf       	rjmp	.-56     	; 0x4e56 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x14>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    4e8e:	d0 e0       	ldi	r29, 0x00	; 0
    4e90:	c0 e0       	ldi	r28, 0x00	; 0
    4e92:	ee cf       	rjmp	.-36     	; 0x4e70 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]+0x2e>

00004e94 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    4e94:	4f 92       	push	r4
    4e96:	5f 92       	push	r5
    4e98:	6f 92       	push	r6
    4e9a:	7f 92       	push	r7
    4e9c:	8f 92       	push	r8
    4e9e:	9f 92       	push	r9
    4ea0:	af 92       	push	r10
    4ea2:	bf 92       	push	r11
    4ea4:	df 92       	push	r13
    4ea6:	ef 92       	push	r14
    4ea8:	ff 92       	push	r15
    4eaa:	0f 93       	push	r16
    4eac:	1f 93       	push	r17
    4eae:	cf 93       	push	r28
    4eb0:	df 93       	push	r29
    4eb2:	cd b7       	in	r28, 0x3d	; 61
    4eb4:	de b7       	in	r29, 0x3e	; 62
    4eb6:	c4 54       	subi	r28, 0x44	; 68
    4eb8:	d1 09       	sbc	r29, r1
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	f8 94       	cli
    4ebe:	de bf       	out	0x3e, r29	; 62
    4ec0:	0f be       	out	0x3f, r0	; 63
    4ec2:	cd bf       	out	0x3d, r28	; 61
    4ec4:	8c 01       	movw	r16, r24
    4ec6:	4a 01       	movw	r8, r20
    4ec8:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    4eca:	0e 94 58 24 	call	0x48b0	; 0x48b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    4ece:	00 97       	sbiw	r24, 0x00	; 0
    4ed0:	09 f0       	breq	.+2      	; 0x4ed4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40>
    4ed2:	b0 c0       	rjmp	.+352    	; 0x5034 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    4ed4:	c8 01       	movw	r24, r16
    4ed6:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4eda:	75 01       	movw	r14, r10
    4edc:	8b 35       	cpi	r24, 0x5B	; 91
    4ede:	49 f1       	breq	.+82     	; 0x4f32 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x9e>
    4ee0:	8b 37       	cpi	r24, 0x7B	; 123
    4ee2:	09 f4       	brne	.+2      	; 0x4ee6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x52>
    4ee4:	d2 c0       	rjmp	.+420    	; 0x508a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1f6>
parseValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    4ee6:	c8 01       	movw	r24, r16
    4ee8:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    4eec:	87 32       	cpi	r24, 0x27	; 39
    4eee:	09 f4       	brne	.+2      	; 0x4ef2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e>
    4ef0:	eb c1       	rjmp	.+982    	; 0x52c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
    4ef2:	82 32       	cpi	r24, 0x22	; 34
    4ef4:	09 f4       	brne	.+2      	; 0x4ef8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64>
    4ef6:	e8 c1       	rjmp	.+976    	; 0x52c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    4ef8:	c8 01       	movw	r24, r16
    4efa:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4efe:	b8 2e       	mov	r11, r24
    4f00:	ce 01       	movw	r24, r28
    4f02:	01 96       	adiw	r24, 0x01	; 1
    4f04:	4c 01       	movw	r8, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    4f06:	d1 2c       	mov	r13, r1
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    4f08:	8b 2d       	mov	r24, r11
    4f0a:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    4f0e:	88 23       	and	r24, r24
    4f10:	09 f4       	brne	.+2      	; 0x4f14 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x80>
    4f12:	f5 c1       	rjmp	.+1002   	; 0x52fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
    4f14:	bf e3       	ldi	r27, 0x3F	; 63
    4f16:	db 16       	cp	r13, r27
    4f18:	09 f4       	brne	.+2      	; 0x4f1c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    4f1a:	f1 c1       	rjmp	.+994    	; 0x52fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4f1c:	f8 01       	movw	r30, r16
    4f1e:	10 86       	std	Z+8, r1	; 0x08
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    4f20:	d3 94       	inc	r13
    4f22:	d4 01       	movw	r26, r8
    4f24:	bd 92       	st	X+, r11
    4f26:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    4f28:	c8 01       	movw	r24, r16
    4f2a:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4f2e:	b8 2e       	mov	r11, r24
    4f30:	eb cf       	rjmp	.-42     	; 0x4f08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74>
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    4f32:	d8 01       	movw	r26, r16
    4f34:	16 96       	adiw	r26, 0x06	; 6
    4f36:	8c 91       	ld	r24, X
    4f38:	88 23       	and	r24, r24
    4f3a:	09 f4       	brne	.+2      	; 0x4f3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xaa>
    4f3c:	c1 c1       	rjmp	.+898    	; 0x52c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    4f3e:	a1 14       	cp	r10, r1
    4f40:	b1 04       	cpc	r11, r1
    4f42:	09 f4       	brne	.+2      	; 0x4f46 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
    4f44:	2d c1       	rjmp	.+602    	; 0x51a0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    4f46:	88 e0       	ldi	r24, 0x08	; 8
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	f5 01       	movw	r30, r10
    4f4c:	91 83       	std	Z+1, r25	; 0x01
    4f4e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    4f50:	13 82       	std	Z+3, r1	; 0x03
    4f52:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    4f54:	15 82       	std	Z+5, r1	; 0x05
    4f56:	14 82       	std	Z+4, r1	; 0x04
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4f58:	c8 01       	movw	r24, r16
    4f5a:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4f5e:	8b 35       	cpi	r24, 0x5B	; 91
    4f60:	09 f0       	breq	.+2      	; 0x4f64 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xd0>
    4f62:	ef c0       	rjmp	.+478    	; 0x5142 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4f64:	d8 01       	movw	r26, r16
    4f66:	18 96       	adiw	r26, 0x08	; 8
    4f68:	1c 92       	st	X, r1
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    4f6a:	c8 01       	movw	r24, r16
    4f6c:	0e 94 58 24 	call	0x48b0	; 0x48b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4f70:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    4f72:	89 2b       	or	r24, r25
    4f74:	09 f0       	breq	.+2      	; 0x4f78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xe4>
    4f76:	5d c0       	rjmp	.+186    	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4f78:	c8 01       	movw	r24, r16
    4f7a:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4f7e:	8d 35       	cpi	r24, 0x5D	; 93
    4f80:	09 f4       	brne	.+2      	; 0x4f84 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf0>
    4f82:	55 c0       	rjmp	.+170    	; 0x502e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19a>
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
  }

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    4f84:	8c e0       	ldi	r24, 0x0C	; 12
    4f86:	d8 2e       	mov	r13, r24
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    4f88:	d4 01       	movw	r26, r8
    4f8a:	ed 91       	ld	r30, X+
    4f8c:	fc 91       	ld	r31, X
    4f8e:	01 90       	ld	r0, Z+
    4f90:	f0 81       	ld	r31, Z
    4f92:	e0 2d       	mov	r30, r0
    4f94:	6c e0       	ldi	r22, 0x0C	; 12
    4f96:	70 e0       	ldi	r23, 0x00	; 0
    4f98:	c4 01       	movw	r24, r8
    4f9a:	19 95       	eicall
    4f9c:	fc 01       	movw	r30, r24
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
    4f9e:	00 97       	sbiw	r24, 0x00	; 0
    4fa0:	09 f4       	brne	.+2      	; 0x4fa4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x110>
    4fa2:	64 c0       	rjmp	.+200    	; 0x506c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1d8>
    4fa4:	dc 01       	movw	r26, r24
    4fa6:	2d 2d       	mov	r18, r13
    4fa8:	1d 92       	st	X+, r1
    4faa:	2a 95       	dec	r18
    4fac:	e9 f7       	brne	.-6      	; 0x4fa8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x114>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    4fae:	11 82       	std	Z+1, r1	; 0x01
    4fb0:	10 82       	st	Z, r1
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:62
    if (!slot) return JsonVariant();

    slot->next = 0;

    if (_data->tail) {
    4fb2:	d7 01       	movw	r26, r14
    4fb4:	14 96       	adiw	r26, 0x04	; 4
    4fb6:	8d 91       	ld	r24, X+
    4fb8:	9c 91       	ld	r25, X
    4fba:	15 97       	sbiw	r26, 0x05	; 5
    4fbc:	00 97       	sbiw	r24, 0x00	; 0
    4fbe:	09 f4       	brne	.+2      	; 0x4fc2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x12e>
    4fc0:	50 c0       	rjmp	.+160    	; 0x5062 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:63
      slot->prev = _data->tail;
    4fc2:	91 87       	std	Z+9, r25	; 0x09
    4fc4:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:64
      _data->tail->next = slot;
    4fc6:	14 96       	adiw	r26, 0x04	; 4
    4fc8:	8d 91       	ld	r24, X+
    4fca:	9c 91       	ld	r25, X
    4fcc:	dc 01       	movw	r26, r24
    4fce:	17 96       	adiw	r26, 0x07	; 7
    4fd0:	fc 93       	st	X, r31
    4fd2:	ee 93       	st	-X, r30
    4fd4:	16 97       	sbiw	r26, 0x06	; 6
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:65
      _data->tail = slot;
    4fd6:	d7 01       	movw	r26, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:69
    } else {
      slot->prev = 0;
      _data->head = slot;
      _data->tail = slot;
    4fd8:	15 96       	adiw	r26, 0x05	; 5
    4fda:	fc 93       	st	X, r31
    4fdc:	ee 93       	st	-X, r30
    4fde:	14 97       	sbiw	r26, 0x04	; 4
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:79
  return JsonArray(_memoryPool, _data->toArray());
    4fe0:	98 2d       	mov	r25, r8
    4fe2:	89 2d       	mov	r24, r9
    4fe4:	49 2e       	mov	r4, r25
    4fe6:	58 2e       	mov	r5, r24
    4fe8:	3f 01       	movw	r6, r30
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    4fea:	ef 2b       	or	r30, r31
    4fec:	09 f4       	brne	.+2      	; 0x4ff0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x15c>
    4fee:	d8 c0       	rjmp	.+432    	; 0x51a0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    4ff0:	f8 01       	movw	r30, r16
    4ff2:	86 81       	ldd	r24, Z+6	; 0x06
    4ff4:	81 50       	subi	r24, 0x01	; 1
    4ff6:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    4ff8:	b3 01       	movw	r22, r6
    4ffa:	a2 01       	movw	r20, r4
    4ffc:	c8 01       	movw	r24, r16
    4ffe:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    5002:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    5004:	d8 01       	movw	r26, r16
    5006:	16 96       	adiw	r26, 0x06	; 6
    5008:	8c 91       	ld	r24, X
    500a:	16 97       	sbiw	r26, 0x06	; 6
    500c:	8f 5f       	subi	r24, 0xFF	; 255
    500e:	16 96       	adiw	r26, 0x06	; 6
    5010:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    5012:	a1 14       	cp	r10, r1
    5014:	b1 04       	cpc	r11, r1
    5016:	69 f4       	brne	.+26     	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    5018:	c8 01       	movw	r24, r16
    501a:	0e 94 58 24 	call	0x48b0	; 0x48b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    501e:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    5020:	89 2b       	or	r24, r25
    5022:	39 f4       	brne	.+14     	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5024:	c8 01       	movw	r24, r16
    5026:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    502a:	8d 35       	cpi	r24, 0x5D	; 93
    502c:	21 f5       	brne	.+72     	; 0x5076 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1e2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    502e:	f8 01       	movw	r30, r16
    5030:	10 86       	std	Z+8, r1	; 0x08
    5032:	c5 01       	movw	r24, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    5034:	cc 5b       	subi	r28, 0xBC	; 188
    5036:	df 4f       	sbci	r29, 0xFF	; 255
    5038:	0f b6       	in	r0, 0x3f	; 63
    503a:	f8 94       	cli
    503c:	de bf       	out	0x3e, r29	; 62
    503e:	0f be       	out	0x3f, r0	; 63
    5040:	cd bf       	out	0x3d, r28	; 61
    5042:	df 91       	pop	r29
    5044:	cf 91       	pop	r28
    5046:	1f 91       	pop	r17
    5048:	0f 91       	pop	r16
    504a:	ff 90       	pop	r15
    504c:	ef 90       	pop	r14
    504e:	df 90       	pop	r13
    5050:	bf 90       	pop	r11
    5052:	af 90       	pop	r10
    5054:	9f 90       	pop	r9
    5056:	8f 90       	pop	r8
    5058:	7f 90       	pop	r7
    505a:	6f 90       	pop	r6
    505c:	5f 90       	pop	r5
    505e:	4f 90       	pop	r4
    5060:	08 95       	ret
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:68
      slot->prev = _data->tail;
      _data->tail->next = slot;
      _data->tail = slot;
    } else {
      slot->prev = 0;
      _data->head = slot;
    5062:	13 96       	adiw	r26, 0x03	; 3
    5064:	fc 93       	st	X, r31
    5066:	ee 93       	st	-X, r30
    5068:	12 97       	sbiw	r26, 0x02	; 2
    506a:	b6 cf       	rjmp	.-148    	; 0x4fd8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x144>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:58

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    if (!slot) return JsonVariant();
    506c:	f0 e0       	ldi	r31, 0x00	; 0
    506e:	e0 e0       	ldi	r30, 0x00	; 0
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	b7 cf       	rjmp	.-146    	; 0x4fe4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x150>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5076:	c8 01       	movw	r24, r16
    5078:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    507c:	8c 32       	cpi	r24, 0x2C	; 44
    507e:	09 f0       	breq	.+2      	; 0x5082 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ee>
    5080:	60 c0       	rjmp	.+192    	; 0x5142 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5082:	d8 01       	movw	r26, r16
    5084:	18 96       	adiw	r26, 0x08	; 8
    5086:	1c 92       	st	X, r1
    5088:	7f cf       	rjmp	.-258    	; 0x4f88 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf4>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    508a:	f8 01       	movw	r30, r16
    508c:	86 81       	ldd	r24, Z+6	; 0x06
    508e:	88 23       	and	r24, r24
    5090:	09 f4       	brne	.+2      	; 0x5094 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x200>
    5092:	16 c1       	rjmp	.+556    	; 0x52c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    5094:	a1 14       	cp	r10, r1
    5096:	b1 04       	cpc	r11, r1
    5098:	09 f4       	brne	.+2      	; 0x509c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x208>
    509a:	82 c0       	rjmp	.+260    	; 0x51a0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
    509c:	34 01       	movw	r6, r8
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    509e:	89 e0       	ldi	r24, 0x09	; 9
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	d5 01       	movw	r26, r10
    50a4:	11 96       	adiw	r26, 0x01	; 1
    50a6:	9c 93       	st	X, r25
    50a8:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    50aa:	13 96       	adiw	r26, 0x03	; 3
    50ac:	1c 92       	st	X, r1
    50ae:	1e 92       	st	-X, r1
    50b0:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    50b2:	15 96       	adiw	r26, 0x05	; 5
    50b4:	1c 92       	st	X, r1
    50b6:	1e 92       	st	-X, r1
    50b8:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    50ba:	45 01       	movw	r8, r10
    50bc:	b2 e0       	ldi	r27, 0x02	; 2
    50be:	8b 0e       	add	r8, r27
    50c0:	91 1c       	adc	r9, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    50c2:	c8 01       	movw	r24, r16
    50c4:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    50c8:	8b 37       	cpi	r24, 0x7B	; 123
    50ca:	d9 f5       	brne	.+118    	; 0x5142 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    50cc:	f8 01       	movw	r30, r16
    50ce:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    50d0:	c8 01       	movw	r24, r16
    50d2:	0e 94 58 24 	call	0x48b0	; 0x48b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    50d6:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    50d8:	89 2b       	or	r24, r25
    50da:	09 f0       	breq	.+2      	; 0x50de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x24a>
    50dc:	aa cf       	rjmp	.-172    	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    50de:	c8 01       	movw	r24, r16
    50e0:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    50e4:	8d 37       	cpi	r24, 0x7D	; 125
    50e6:	09 f4       	brne	.+2      	; 0x50ea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x256>
    50e8:	9c c0       	rjmp	.+312    	; 0x5222 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    50ea:	bc e0       	ldi	r27, 0x0C	; 12
    50ec:	5b 2e       	mov	r5, r27
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
    50ee:	c8 01       	movw	r24, r16
    50f0:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    50f4:	87 32       	cpi	r24, 0x27	; 39
    50f6:	79 f0       	breq	.+30     	; 0x5116 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
    50f8:	82 32       	cpi	r24, 0x22	; 34
    50fa:	69 f0       	breq	.+26     	; 0x5116 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    50fc:	f8 01       	movw	r30, r16
    50fe:	a4 80       	ldd	r10, Z+4	; 0x04
    5100:	b5 80       	ldd	r11, Z+5	; 0x05
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    5102:	c8 01       	movw	r24, r16
    5104:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5108:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    510a:	81 11       	cpse	r24, r1
    510c:	1e c0       	rjmp	.+60     	; 0x514a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2b6>
    510e:	aa 24       	eor	r10, r10
    5110:	a3 94       	inc	r10
    5112:	b1 2c       	mov	r11, r1
    5114:	8e cf       	rjmp	.-228    	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    5116:	be 01       	movw	r22, r28
    5118:	6f 5f       	subi	r22, 0xFF	; 255
    511a:	7f 4f       	sbci	r23, 0xFF	; 255
    511c:	c8 01       	movw	r24, r16
    511e:	0e 94 01 24 	call	0x4802	; 0x4802 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    5122:	5c 01       	movw	r10, r24
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
      if (err) return err;
    5124:	89 2b       	or	r24, r25
    5126:	09 f0       	breq	.+2      	; 0x512a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
    5128:	84 cf       	rjmp	.-248    	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    512a:	c8 01       	movw	r24, r16
    512c:	0e 94 58 24 	call	0x48b0	; 0x48b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5130:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    5132:	89 2b       	or	r24, r25
    5134:	09 f0       	breq	.+2      	; 0x5138 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2a4>
    5136:	7d cf       	rjmp	.-262    	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5138:	c8 01       	movw	r24, r16
    513a:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    513e:	8a 33       	cpi	r24, 0x3A	; 58
    5140:	99 f1       	breq	.+102    	; 0x51a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x314>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:113

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;
    5142:	72 e0       	ldi	r23, 0x02	; 2
    5144:	a7 2e       	mov	r10, r23
    5146:	b1 2c       	mov	r11, r1
    5148:	74 cf       	rjmp	.-280    	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    514a:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    514e:	88 23       	and	r24, r24
    5150:	c1 f3       	breq	.-16     	; 0x5142 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5152:	d8 01       	movw	r26, r16
    5154:	18 96       	adiw	r26, 0x08	; 8
    5156:	1c 92       	st	X, r1
    5158:	18 97       	sbiw	r26, 0x08	; 8
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    515a:	14 96       	adiw	r26, 0x04	; 4
    515c:	ed 91       	ld	r30, X+
    515e:	fc 91       	ld	r31, X
    5160:	15 97       	sbiw	r26, 0x05	; 5
    5162:	cf 01       	movw	r24, r30
    5164:	01 96       	adiw	r24, 0x01	; 1
    5166:	15 96       	adiw	r26, 0x05	; 5
    5168:	9c 93       	st	X, r25
    516a:	8e 93       	st	-X, r24
    516c:	14 97       	sbiw	r26, 0x04	; 4
    516e:	d0 82       	st	Z, r13
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    5170:	c8 01       	movw	r24, r16
    5172:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5176:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    5178:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    517c:	81 11       	cpse	r24, r1
    517e:	e9 cf       	rjmp	.-46     	; 0x5152 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2be>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    5180:	d8 01       	movw	r26, r16
    5182:	14 96       	adiw	r26, 0x04	; 4
    5184:	ed 91       	ld	r30, X+
    5186:	fc 91       	ld	r31, X
    5188:	15 97       	sbiw	r26, 0x05	; 5
    518a:	cf 01       	movw	r24, r30
    518c:	01 96       	adiw	r24, 0x01	; 1
    518e:	15 96       	adiw	r26, 0x05	; 5
    5190:	9c 93       	st	X, r25
    5192:	8e 93       	st	-X, r24
    5194:	14 97       	sbiw	r26, 0x04	; 4
    5196:	10 82       	st	Z, r1
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    5198:	ba 82       	std	Y+2, r11	; 0x02
    519a:	a9 82       	std	Y+1, r10	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    if (*result == NULL) return DeserializationError::NoMemory;
    519c:	ab 28       	or	r10, r11
    519e:	29 f6       	brne	.-118    	; 0x512a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    51a0:	e3 e0       	ldi	r30, 0x03	; 3
    51a2:	ae 2e       	mov	r10, r30
    51a4:	b1 2c       	mov	r11, r1
    51a6:	45 cf       	rjmp	.-374    	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    51a8:	f8 01       	movw	r30, r16
    51aa:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    51ac:	a9 80       	ldd	r10, Y+1	; 0x01
    51ae:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    51b0:	a1 14       	cp	r10, r1
    51b2:	b1 04       	cpc	r11, r1
    51b4:	d1 f5       	brne	.+116    	; 0x522a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x396>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	80 e0       	ldi	r24, 0x00	; 0
    51ba:	30 e0       	ldi	r19, 0x00	; 0
    51bc:	20 e0       	ldi	r18, 0x00	; 0
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    51be:	22 96       	adiw	r28, 0x02	; 2
    51c0:	3f af       	std	Y+63, r19	; 0x3f
    51c2:	22 97       	sbiw	r28, 0x02	; 2
    51c4:	23 96       	adiw	r28, 0x03	; 3
    51c6:	2f af       	std	Y+63, r18	; 0x3f
    51c8:	23 97       	sbiw	r28, 0x03	; 3
    51ca:	25 96       	adiw	r28, 0x05	; 5
    51cc:	9f af       	std	Y+63, r25	; 0x3f
    51ce:	8e af       	std	Y+62, r24	; 0x3e
    51d0:	25 97       	sbiw	r28, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    51d2:	89 2b       	or	r24, r25
    51d4:	29 f3       	breq	.-54     	; 0x51a0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    51d6:	d8 01       	movw	r26, r16
    51d8:	16 96       	adiw	r26, 0x06	; 6
    51da:	8c 91       	ld	r24, X
    51dc:	16 97       	sbiw	r26, 0x06	; 6
    51de:	81 50       	subi	r24, 0x01	; 1
    51e0:	16 96       	adiw	r26, 0x06	; 6
    51e2:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    51e4:	25 96       	adiw	r28, 0x05	; 5
    51e6:	4c ad       	ldd	r20, Y+60	; 0x3c
    51e8:	5d ad       	ldd	r21, Y+61	; 0x3d
    51ea:	6e ad       	ldd	r22, Y+62	; 0x3e
    51ec:	7f ad       	ldd	r23, Y+63	; 0x3f
    51ee:	25 97       	sbiw	r28, 0x05	; 5
    51f0:	c8 01       	movw	r24, r16
    51f2:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    51f6:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    51f8:	f8 01       	movw	r30, r16
    51fa:	86 81       	ldd	r24, Z+6	; 0x06
    51fc:	8f 5f       	subi	r24, 0xFF	; 255
    51fe:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    5200:	a1 14       	cp	r10, r1
    5202:	b1 04       	cpc	r11, r1
    5204:	09 f0       	breq	.+2      	; 0x5208 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x374>
    5206:	15 cf       	rjmp	.-470    	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    5208:	c8 01       	movw	r24, r16
    520a:	0e 94 58 24 	call	0x48b0	; 0x48b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    520e:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    5210:	89 2b       	or	r24, r25
    5212:	09 f0       	breq	.+2      	; 0x5216 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x382>
    5214:	0e cf       	rjmp	.-484    	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5216:	c8 01       	movw	r24, r16
    5218:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    521c:	8d 37       	cpi	r24, 0x7D	; 125
    521e:	09 f0       	breq	.+2      	; 0x5222 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
    5220:	3f c0       	rjmp	.+126    	; 0x52a0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5222:	d8 01       	movw	r26, r16
    5224:	18 96       	adiw	r26, 0x08	; 8
    5226:	1c 92       	st	X, r1
    5228:	04 cf       	rjmp	.-504    	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    522a:	b5 01       	movw	r22, r10
    522c:	c4 01       	movw	r24, r8
    522e:	0e 94 21 27 	call	0x4e42	; 0x4e42 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    5232:	00 97       	sbiw	r24, 0x00	; 0
    5234:	49 f5       	brne	.+82     	; 0x5288 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3f4>
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
    5236:	d3 01       	movw	r26, r6
    5238:	ed 91       	ld	r30, X+
    523a:	fc 91       	ld	r31, X
    523c:	01 90       	ld	r0, Z+
    523e:	f0 81       	ld	r31, Z
    5240:	e0 2d       	mov	r30, r0
    5242:	6c e0       	ldi	r22, 0x0C	; 12
    5244:	70 e0       	ldi	r23, 0x00	; 0
    5246:	c3 01       	movw	r24, r6
    5248:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    524a:	00 97       	sbiw	r24, 0x00	; 0
    524c:	09 f4       	brne	.+2      	; 0x5250 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3bc>
    524e:	b3 cf       	rjmp	.-154    	; 0x51b6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x322>
    5250:	fc 01       	movw	r30, r24
    5252:	25 2d       	mov	r18, r5
    5254:	11 92       	st	Z+, r1
    5256:	2a 95       	dec	r18
    5258:	e9 f7       	brne	.-6      	; 0x5254 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3c0>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    525a:	dc 01       	movw	r26, r24
    525c:	1d 92       	st	X+, r1
    525e:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    5260:	d7 01       	movw	r26, r14
    5262:	14 96       	adiw	r26, 0x04	; 4
    5264:	ed 91       	ld	r30, X+
    5266:	fc 91       	ld	r31, X
    5268:	15 97       	sbiw	r26, 0x05	; 5
    526a:	30 97       	sbiw	r30, 0x00	; 0
    526c:	81 f0       	breq	.+32     	; 0x528e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3fa>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    526e:	dc 01       	movw	r26, r24
    5270:	19 96       	adiw	r26, 0x09	; 9
    5272:	fc 93       	st	X, r31
    5274:	ee 93       	st	-X, r30
    5276:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    5278:	97 83       	std	Z+7, r25	; 0x07
    527a:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    527c:	f7 01       	movw	r30, r14
    527e:	95 83       	std	Z+5, r25	; 0x05
    5280:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    5282:	fc 01       	movw	r30, r24
    5284:	b3 86       	std	Z+11, r11	; 0x0b
    5286:	a2 86       	std	Z+10, r10	; 0x0a
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    5288:	36 2d       	mov	r19, r6
    528a:	27 2d       	mov	r18, r7
    528c:	98 cf       	rjmp	.-208    	; 0x51be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x32a>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    528e:	13 96       	adiw	r26, 0x03	; 3
    5290:	9c 93       	st	X, r25
    5292:	8e 93       	st	-X, r24
    5294:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    5296:	15 96       	adiw	r26, 0x05	; 5
    5298:	9c 93       	st	X, r25
    529a:	8e 93       	st	-X, r24
    529c:	14 97       	sbiw	r26, 0x04	; 4
    529e:	f1 cf       	rjmp	.-30     	; 0x5282 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    52a0:	c8 01       	movw	r24, r16
    52a2:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    52a6:	8c 32       	cpi	r24, 0x2C	; 44
    52a8:	09 f0       	breq	.+2      	; 0x52ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x418>
    52aa:	4b cf       	rjmp	.-362    	; 0x5142 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    52ac:	f8 01       	movw	r30, r16
    52ae:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    52b0:	c8 01       	movw	r24, r16
    52b2:	0e 94 58 24 	call	0x48b0	; 0x48b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    52b6:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    52b8:	89 2b       	or	r24, r25
    52ba:	09 f4       	brne	.+2      	; 0x52be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42a>
    52bc:	18 cf       	rjmp	.-464    	; 0x50ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x25a>
    52be:	b9 ce       	rjmp	.-654    	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    52c0:	f5 e0       	ldi	r31, 0x05	; 5
    52c2:	af 2e       	mov	r10, r31
    52c4:	b1 2c       	mov	r11, r1
    52c6:	b5 ce       	rjmp	.-662    	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.42():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    52c8:	be 01       	movw	r22, r28
    52ca:	6f 5f       	subi	r22, 0xFF	; 255
    52cc:	7f 4f       	sbci	r23, 0xFF	; 255
    52ce:	c8 01       	movw	r24, r16
    52d0:	0e 94 01 24 	call	0x4802	; 0x4802 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    52d4:	00 97       	sbiw	r24, 0x00	; 0
    52d6:	09 f0       	breq	.+2      	; 0x52da <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x446>
    52d8:	ad ce       	rjmp	.-678    	; 0x5034 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    52da:	e1 14       	cp	r14, r1
    52dc:	f1 04       	cpc	r15, r1
    52de:	61 f0       	breq	.+24     	; 0x52f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.42():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    52e0:	89 81       	ldd	r24, Y+1	; 0x01
    52e2:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    52e4:	23 e0       	ldi	r18, 0x03	; 3
    52e6:	30 e0       	ldi	r19, 0x00	; 0
    52e8:	d7 01       	movw	r26, r14
    52ea:	11 96       	adiw	r26, 0x01	; 1
    52ec:	3c 93       	st	X, r19
    52ee:	2e 93       	st	-X, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    52f0:	13 96       	adiw	r26, 0x03	; 3
    52f2:	9c 93       	st	X, r25
    52f4:	8e 93       	st	-X, r24
    52f6:	12 97       	sbiw	r26, 0x02	; 2
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    52f8:	90 e0       	ldi	r25, 0x00	; 0
    52fa:	80 e0       	ldi	r24, 0x00	; 0
    52fc:	9b ce       	rjmp	.-714    	; 0x5034 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    52fe:	e1 e0       	ldi	r30, 0x01	; 1
    5300:	f0 e0       	ldi	r31, 0x00	; 0
    5302:	ec 0f       	add	r30, r28
    5304:	fd 1f       	adc	r31, r29
    5306:	ed 0d       	add	r30, r13
    5308:	f1 1d       	adc	r31, r1
    530a:	10 82       	st	Z, r1
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    530c:	19 81       	ldd	r17, Y+1	; 0x01
    530e:	11 23       	and	r17, r17
    5310:	09 f4       	brne	.+2      	; 0x5314 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x480>
    5312:	51 c0       	rjmp	.+162    	; 0x53b6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    5314:	fe 01       	movw	r30, r28
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    5316:	1d 32       	cpi	r17, 0x2D	; 45
    5318:	71 f1       	breq	.+92     	; 0x5376 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    531a:	1b 32       	cpi	r17, 0x2B	; 43
    531c:	61 f1       	breq	.+88     	; 0x5376 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    531e:	31 96       	adiw	r30, 0x01	; 1
isInteger():
  while (isdigit(*s)) s++;
    5320:	81 91       	ld	r24, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    5322:	90 ed       	ldi	r25, 0xD0	; 208
    5324:	98 0f       	add	r25, r24
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    5326:	9a 30       	cpi	r25, 0x0A	; 10
    5328:	d8 f3       	brcs	.-10     	; 0x5320 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    532a:	81 11       	cpse	r24, r1
    532c:	44 c0       	rjmp	.+136    	; 0x53b6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    532e:	14 37       	cpi	r17, 0x74	; 116
    5330:	09 f4       	brne	.+2      	; 0x5334 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4a0>
    5332:	dd c1       	rjmp	.+954    	; 0x56ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x85a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    5334:	1b 32       	cpi	r17, 0x2B	; 43
    5336:	09 f1       	breq	.+66     	; 0x537a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e6>
    5338:	1d 32       	cpi	r17, 0x2D	; 45
    533a:	19 f1       	breq	.+70     	; 0x5382 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    533c:	10 e0       	ldi	r17, 0x00	; 0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    533e:	fe 01       	movw	r30, r28
    5340:	31 96       	adiw	r30, 0x01	; 1
    5342:	20 e0       	ldi	r18, 0x00	; 0
    5344:	30 e0       	ldi	r19, 0x00	; 0
    5346:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    5348:	01 91       	ld	r16, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    534a:	80 ed       	ldi	r24, 0xD0	; 208
    534c:	80 0f       	add	r24, r16
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    534e:	8a 30       	cpi	r24, 0x0A	; 10
    5350:	d0 f4       	brcc	.+52     	; 0x5386 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f2>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    5352:	aa e0       	ldi	r26, 0x0A	; 10
    5354:	b0 e0       	ldi	r27, 0x00	; 0
    5356:	0e 94 6e b4 	call	0x168dc	; 0x168dc <__muluhisi3>
    535a:	20 2f       	mov	r18, r16
    535c:	00 0f       	add	r16, r16
    535e:	33 0b       	sbc	r19, r19
    5360:	20 53       	subi	r18, 0x30	; 48
    5362:	31 09       	sbc	r19, r1
    5364:	03 2e       	mov	r0, r19
    5366:	00 0c       	add	r0, r0
    5368:	44 0b       	sbc	r20, r20
    536a:	55 0b       	sbc	r21, r21
    536c:	26 0f       	add	r18, r22
    536e:	37 1f       	adc	r19, r23
    5370:	48 1f       	adc	r20, r24
    5372:	59 1f       	adc	r21, r25
    5374:	e9 cf       	rjmp	.-46     	; 0x5348 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4b4>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
  if (issign(*s)) s++;
    5376:	32 96       	adiw	r30, 0x02	; 2
    5378:	d3 cf       	rjmp	.-90     	; 0x5320 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    537a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26

  switch (*s) {
    case '-':
      negative_result = true;
      s++;
    537c:	fe 01       	movw	r30, r28
    537e:	32 96       	adiw	r30, 0x02	; 2
    5380:	e0 cf       	rjmp	.-64     	; 0x5342 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    5382:	11 e0       	ldi	r17, 0x01	; 1
    5384:	fb cf       	rjmp	.-10     	; 0x537c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e8>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    5386:	11 23       	and	r17, r17
    5388:	09 f4       	brne	.+2      	; 0x538c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f8>
    538a:	b5 c1       	rjmp	.+874    	; 0x56f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x862>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    538c:	e1 14       	cp	r14, r1
    538e:	f1 04       	cpc	r15, r1
    5390:	09 f4       	brne	.+2      	; 0x5394 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x500>
    5392:	b2 cf       	rjmp	.-156    	; 0x52f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    5394:	87 e0       	ldi	r24, 0x07	; 7
    5396:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    5398:	21 15       	cp	r18, r1
    539a:	31 05       	cpc	r19, r1
    539c:	41 05       	cpc	r20, r1
    539e:	51 05       	cpc	r21, r1
    53a0:	11 f4       	brne	.+4      	; 0x53a6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x512>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    53a2:	86 e0       	ldi	r24, 0x06	; 6
    53a4:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    53a6:	f7 01       	movw	r30, r14
    53a8:	91 83       	std	Z+1, r25	; 0x01
    53aa:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    53ac:	22 83       	std	Z+2, r18	; 0x02
    53ae:	33 83       	std	Z+3, r19	; 0x03
    53b0:	44 83       	std	Z+4, r20	; 0x04
    53b2:	55 83       	std	Z+5, r21	; 0x05
    53b4:	a1 cf       	rjmp	.-190    	; 0x52f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:16
namespace Internals {

inline bool isFloat(const char* s) {
  if (!s) return false;

  if (!strcmp(s, "NaN")) return true;
    53b6:	61 e0       	ldi	r22, 0x01	; 1
    53b8:	73 e0       	ldi	r23, 0x03	; 3
    53ba:	ce 01       	movw	r24, r28
    53bc:	01 96       	adiw	r24, 0x01	; 1
    53be:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    53c2:	89 2b       	or	r24, r25
    53c4:	09 f4       	brne	.+2      	; 0x53c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x534>
    53c6:	46 c0       	rjmp	.+140    	; 0x5454 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
  if (issign(*s)) s++;
    53c8:	5e 01       	movw	r10, r28
    53ca:	f2 e0       	ldi	r31, 0x02	; 2
    53cc:	af 0e       	add	r10, r31
    53ce:	b1 1c       	adc	r11, r1
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    53d0:	1d 32       	cpi	r17, 0x2D	; 45
    53d2:	49 f0       	breq	.+18     	; 0x53e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
    53d4:	fe 01       	movw	r30, r28
    53d6:	31 96       	adiw	r30, 0x01	; 1
    53d8:	5f 01       	movw	r10, r30
    53da:	1b 32       	cpi	r17, 0x2B	; 43
    53dc:	21 f4       	brne	.+8      	; 0x53e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
    53de:	5e 01       	movw	r10, r28
    53e0:	22 e0       	ldi	r18, 0x02	; 2
    53e2:	a2 0e       	add	r10, r18
    53e4:	b1 1c       	adc	r11, r1
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:18
  if (!strcmp(s, "Infinity")) return true;
    53e6:	65 e0       	ldi	r22, 0x05	; 5
    53e8:	73 e0       	ldi	r23, 0x03	; 3
    53ea:	c5 01       	movw	r24, r10
    53ec:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    53f0:	89 2b       	or	r24, r25
    53f2:	81 f1       	breq	.+96     	; 0x5454 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:19
  if (*s == '\0') return false;
    53f4:	d5 01       	movw	r26, r10
    53f6:	8c 91       	ld	r24, X
    53f8:	88 23       	and	r24, r24
    53fa:	09 f4       	brne	.+2      	; 0x53fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
    53fc:	3b c1       	rjmp	.+630    	; 0x5674 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    53fe:	fd 01       	movw	r30, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21

  while (isdigit(*s)) s++;
    5400:	8d 91       	ld	r24, X+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    5402:	90 ed       	ldi	r25, 0xD0	; 208
    5404:	98 0f       	add	r25, r24
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21
    5406:	9a 30       	cpi	r25, 0x0A	; 10
    5408:	d0 f3       	brcs	.-12     	; 0x53fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:23

  if (*s == '.') {
    540a:	8e 32       	cpi	r24, 0x2E	; 46
    540c:	41 f4       	brne	.+16     	; 0x541e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:24
    s++;
    540e:	9d 01       	movw	r18, r26
    5410:	f9 01       	movw	r30, r18
    5412:	2f 5f       	subi	r18, 0xFF	; 255
    5414:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5416:	80 81       	ld	r24, Z
    5418:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:25
    while (isdigit(*s)) s++;
    541a:	8a 30       	cpi	r24, 0x0A	; 10
    541c:	c8 f3       	brcs	.-14     	; 0x5410 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x57c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:28
  }

  if (*s == 'e' || *s == 'E') {
    541e:	80 81       	ld	r24, Z
    5420:	8f 7d       	andi	r24, 0xDF	; 223
    5422:	85 34       	cpi	r24, 0x45	; 69
    5424:	a1 f4       	brne	.+40     	; 0x544e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    s++;
    if (issign(*s)) s++;
    5426:	81 81       	ldd	r24, Z+1	; 0x01
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    5428:	8d 32       	cpi	r24, 0x2D	; 45
    542a:	09 f4       	brne	.+2      	; 0x542e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x59a>
    542c:	57 c0       	rjmp	.+174    	; 0x54dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
    542e:	8b 32       	cpi	r24, 0x2B	; 43
    5430:	09 f4       	brne	.+2      	; 0x5434 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a0>
    5432:	54 c0       	rjmp	.+168    	; 0x54dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:29
    s++;
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    5434:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    5436:	80 81       	ld	r24, Z
    5438:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:31
    if (issign(*s)) s++;
    if (!isdigit(*s)) return false;
    543a:	8a 30       	cpi	r24, 0x0A	; 10
    543c:	08 f0       	brcs	.+2      	; 0x5440 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ac>
    543e:	1a c1       	rjmp	.+564    	; 0x5674 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    5440:	cf 01       	movw	r24, r30
    5442:	fc 01       	movw	r30, r24
    5444:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5446:	20 81       	ld	r18, Z
    5448:	20 53       	subi	r18, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:32
    while (isdigit(*s)) s++;
    544a:	2a 30       	cpi	r18, 0x0A	; 10
    544c:	d0 f3       	brcs	.-12     	; 0x5442 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ae>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    544e:	80 81       	ld	r24, Z
    5450:	81 11       	cpse	r24, r1
    5452:	10 c1       	rjmp	.+544    	; 0x5674 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    5454:	1b 32       	cpi	r17, 0x2B	; 43
    5456:	09 f4       	brne	.+2      	; 0x545a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c6>
    5458:	43 c0       	rjmp	.+134    	; 0x54e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64c>
    545a:	1d 32       	cpi	r17, 0x2D	; 45
    545c:	09 f0       	breq	.+2      	; 0x5460 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5cc>
    545e:	47 c0       	rjmp	.+142    	; 0x54ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x65a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    5460:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    5462:	dd 24       	eor	r13, r13
    5464:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
      s++;
    5466:	5e 01       	movw	r10, r28
    5468:	b2 e0       	ldi	r27, 0x02	; 2
    546a:	ab 0e       	add	r10, r27
    546c:	b1 1c       	adc	r11, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    546e:	60 e0       	ldi	r22, 0x00	; 0
    5470:	70 e0       	ldi	r23, 0x00	; 0
    5472:	80 e8       	ldi	r24, 0x80	; 128
    5474:	9f e3       	ldi	r25, 0x3F	; 63
parseFloat():
    5476:	14 37       	cpi	r17, 0x74	; 116
    5478:	09 f4       	brne	.+2      	; 0x547c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e8>
    547a:	d2 c0       	rjmp	.+420    	; 0x5620 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    547c:	1f 7d       	andi	r17, 0xDF	; 223
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    547e:	60 e0       	ldi	r22, 0x00	; 0
    5480:	70 e0       	ldi	r23, 0x00	; 0
    5482:	80 ec       	ldi	r24, 0xC0	; 192
    5484:	9f e7       	ldi	r25, 0x7F	; 127
parseFloat():
    5486:	1e 34       	cpi	r17, 0x4E	; 78
    5488:	09 f4       	brne	.+2      	; 0x548c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5f8>
    548a:	ca c0       	rjmp	.+404    	; 0x5620 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35
  if (*s == 'i' || *s == 'I')
    548c:	19 34       	cpi	r17, 0x49	; 73
    548e:	09 f4       	brne	.+2      	; 0x5492 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5fe>
    5490:	97 c0       	rjmp	.+302    	; 0x55c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    5492:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    5494:	20 e0       	ldi	r18, 0x00	; 0
    5496:	30 e0       	ldi	r19, 0x00	; 0
    5498:	a9 01       	movw	r20, r18
    549a:	f5 01       	movw	r30, r10
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    549c:	d5 01       	movw	r26, r10
    549e:	1d 91       	ld	r17, X+
    54a0:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    54a2:	80 ed       	ldi	r24, 0xD0	; 208
    54a4:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    54a6:	8a 30       	cpi	r24, 0x0A	; 10
    54a8:	48 f5       	brcc	.+82     	; 0x54fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x668>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    54aa:	2c 3c       	cpi	r18, 0xCC	; 204
    54ac:	bc ec       	ldi	r27, 0xCC	; 204
    54ae:	3b 07       	cpc	r19, r27
    54b0:	bc e0       	ldi	r27, 0x0C	; 12
    54b2:	4b 07       	cpc	r20, r27
    54b4:	51 05       	cpc	r21, r1
    54b6:	04 f5       	brge	.+64     	; 0x54f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x664>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    54b8:	aa e0       	ldi	r26, 0x0A	; 10
    54ba:	b0 e0       	ldi	r27, 0x00	; 0
    54bc:	0e 94 6e b4 	call	0x168dc	; 0x168dc <__muluhisi3>
    54c0:	21 2f       	mov	r18, r17
    54c2:	11 0f       	add	r17, r17
    54c4:	33 0b       	sbc	r19, r19
    54c6:	20 53       	subi	r18, 0x30	; 48
    54c8:	31 09       	sbc	r19, r1
    54ca:	03 2e       	mov	r0, r19
    54cc:	00 0c       	add	r0, r0
    54ce:	44 0b       	sbc	r20, r20
    54d0:	55 0b       	sbc	r21, r21
    54d2:	26 0f       	add	r18, r22
    54d4:	37 1f       	adc	r19, r23
    54d6:	48 1f       	adc	r20, r24
    54d8:	59 1f       	adc	r21, r25
    54da:	df cf       	rjmp	.-66     	; 0x549a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    if (issign(*s)) s++;
    54dc:	32 96       	adiw	r30, 0x02	; 2
    54de:	ab cf       	rjmp	.-170    	; 0x5436 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    54e0:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    54e2:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    54e4:	5e 01       	movw	r10, r28
    54e6:	e2 e0       	ldi	r30, 0x02	; 2
    54e8:	ae 0e       	add	r10, r30
    54ea:	b1 1c       	adc	r11, r1
    54ec:	c0 cf       	rjmp	.-128    	; 0x546e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    54ee:	d1 2c       	mov	r13, r1
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  switch (*s) {
    54f0:	ce 01       	movw	r24, r28
    54f2:	01 96       	adiw	r24, 0x01	; 1
    54f4:	5c 01       	movw	r10, r24
    54f6:	bb cf       	rjmp	.-138    	; 0x546e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    54f8:	0f 5f       	subi	r16, 0xFF	; 255
    54fa:	cf cf       	rjmp	.-98     	; 0x549a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    s++;
  }

  if (*s == '.') {
    54fc:	1e 32       	cpi	r17, 0x2E	; 46
    54fe:	31 f5       	brne	.+76     	; 0x554c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    5500:	5f 01       	movw	r10, r30
    5502:	8f ef       	ldi	r24, 0xFF	; 255
    5504:	a8 1a       	sub	r10, r24
    5506:	b8 0a       	sbc	r11, r24
    5508:	f5 01       	movw	r30, r10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    550a:	d5 01       	movw	r26, r10
    550c:	1d 91       	ld	r17, X+
    550e:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5510:	80 ed       	ldi	r24, 0xD0	; 208
    5512:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    5514:	8a 30       	cpi	r24, 0x0A	; 10
    5516:	d0 f4       	brcc	.+52     	; 0x554c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    5518:	2c 3c       	cpi	r18, 0xCC	; 204
    551a:	bc ec       	ldi	r27, 0xCC	; 204
    551c:	3b 07       	cpc	r19, r27
    551e:	bc e0       	ldi	r27, 0x0C	; 12
    5520:	4b 07       	cpc	r20, r27
    5522:	51 05       	cpc	r21, r1
    5524:	8c f7       	brge	.-30     	; 0x5508 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    5526:	aa e0       	ldi	r26, 0x0A	; 10
    5528:	b0 e0       	ldi	r27, 0x00	; 0
    552a:	0e 94 6e b4 	call	0x168dc	; 0x168dc <__muluhisi3>
    552e:	21 2f       	mov	r18, r17
    5530:	11 0f       	add	r17, r17
    5532:	33 0b       	sbc	r19, r19
    5534:	20 53       	subi	r18, 0x30	; 48
    5536:	31 09       	sbc	r19, r1
    5538:	03 2e       	mov	r0, r19
    553a:	00 0c       	add	r0, r0
    553c:	44 0b       	sbc	r20, r20
    553e:	55 0b       	sbc	r21, r21
    5540:	26 0f       	add	r18, r22
    5542:	37 1f       	adc	r19, r23
    5544:	48 1f       	adc	r20, r24
    5546:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    5548:	01 50       	subi	r16, 0x01	; 1
    554a:	de cf       	rjmp	.-68     	; 0x5508 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    554c:	80 81       	ld	r24, Z
    554e:	8f 7d       	andi	r24, 0xDF	; 223
    5550:	00 2e       	mov	r0, r16
    5552:	00 0c       	add	r0, r0
    5554:	11 0b       	sbc	r17, r17
    5556:	85 34       	cpi	r24, 0x45	; 69
    5558:	09 f0       	breq	.+2      	; 0x555c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6c8>
    555a:	70 c0       	rjmp	.+224    	; 0x563c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    555c:	81 81       	ldd	r24, Z+1	; 0x01
    555e:	8d 32       	cpi	r24, 0x2D	; 45
    5560:	41 f5       	brne	.+80     	; 0x55b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x71e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    5562:	32 96       	adiw	r30, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    5564:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    5566:	90 e0       	ldi	r25, 0x00	; 0
    5568:	80 e0       	ldi	r24, 0x00	; 0
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    556a:	6a e0       	ldi	r22, 0x0A	; 10
    556c:	b6 2e       	mov	r11, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    556e:	a1 91       	ld	r26, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5570:	60 ed       	ldi	r22, 0xD0	; 208
    5572:	6a 0f       	add	r22, r26
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    5574:	6a 30       	cpi	r22, 0x0A	; 10
    5576:	78 f5       	brcc	.+94     	; 0x55d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x742>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    5578:	b8 9e       	mul	r11, r24
    557a:	b0 01       	movw	r22, r0
    557c:	b9 9e       	mul	r11, r25
    557e:	70 0d       	add	r23, r0
    5580:	11 24       	eor	r1, r1
    5582:	8a 2f       	mov	r24, r26
    5584:	aa 0f       	add	r26, r26
    5586:	99 0b       	sbc	r25, r25
    5588:	c0 97       	sbiw	r24, 0x30	; 48
    558a:	86 0f       	add	r24, r22
    558c:	97 1f       	adc	r25, r23
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    558e:	b8 01       	movw	r22, r16
    5590:	68 0f       	add	r22, r24
    5592:	79 1f       	adc	r23, r25
    5594:	67 32       	cpi	r22, 0x27	; 39
    5596:	71 05       	cpc	r23, r1
    5598:	54 f3       	brlt	.-44     	; 0x556e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    559a:	bb 23       	and	r27, r27
    559c:	89 f0       	breq	.+34     	; 0x55c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    559e:	60 e0       	ldi	r22, 0x00	; 0
    55a0:	70 e0       	ldi	r23, 0x00	; 0
    55a2:	80 e0       	ldi	r24, 0x00	; 0
    55a4:	90 e8       	ldi	r25, 0x80	; 128
parseFloat():
    55a6:	d1 10       	cpse	r13, r1
    55a8:	3b c0       	rjmp	.+118    	; 0x5620 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    55aa:	60 e0       	ldi	r22, 0x00	; 0
    55ac:	70 e0       	ldi	r23, 0x00	; 0
    55ae:	cb 01       	movw	r24, r22
    55b0:	37 c0       	rjmp	.+110    	; 0x5620 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    55b2:	8b 32       	cpi	r24, 0x2B	; 43
    55b4:	19 f0       	breq	.+6      	; 0x55bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x728>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    55b6:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    55b8:	b0 e0       	ldi	r27, 0x00	; 0
    55ba:	d5 cf       	rjmp	.-86     	; 0x5566 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6d2>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    55bc:	32 96       	adiw	r30, 0x02	; 2
    55be:	fc cf       	rjmp	.-8      	; 0x55b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x724>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    55c0:	60 e0       	ldi	r22, 0x00	; 0
    55c2:	70 e0       	ldi	r23, 0x00	; 0
    55c4:	80 e8       	ldi	r24, 0x80	; 128
    55c6:	9f ef       	ldi	r25, 0xFF	; 255
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    55c8:	d1 10       	cpse	r13, r1
    55ca:	2a c0       	rjmp	.+84     	; 0x5620 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    55cc:	60 e0       	ldi	r22, 0x00	; 0
    55ce:	70 e0       	ldi	r23, 0x00	; 0
    55d0:	80 e8       	ldi	r24, 0x80	; 128
    55d2:	9f e7       	ldi	r25, 0x7F	; 127
    55d4:	25 c0       	rjmp	.+74     	; 0x5620 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    55d6:	bb 23       	and	r27, r27
    55d8:	19 f0       	breq	.+6      	; 0x55e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
    55da:	91 95       	neg	r25
    55dc:	81 95       	neg	r24
    55de:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    55e0:	08 0f       	add	r16, r24
    55e2:	19 1f       	adc	r17, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    55e4:	ca 01       	movw	r24, r20
    55e6:	b9 01       	movw	r22, r18
    55e8:	0e 94 c2 b2 	call	0x16584	; 0x16584 <__floatsisf>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    55ec:	10 16       	cp	r1, r16
    55ee:	11 06       	cpc	r1, r17
    55f0:	44 f5       	brge	.+80     	; 0x5642 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    55f2:	b1 2c       	mov	r11, r1
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    55f4:	00 ff       	sbrs	r16, 0
    55f6:	0c c0       	rjmp	.+24     	; 0x5610 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x77c>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    55f8:	24 e0       	ldi	r18, 0x04	; 4
    55fa:	b2 9e       	mul	r11, r18
    55fc:	f0 01       	movw	r30, r0
    55fe:	11 24       	eor	r1, r1
    5600:	e8 5c       	subi	r30, 0xC8	; 200
    5602:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    5604:	20 81       	ld	r18, Z
    5606:	31 81       	ldd	r19, Z+1	; 0x01
    5608:	42 81       	ldd	r20, Z+2	; 0x02
    560a:	53 81       	ldd	r21, Z+3	; 0x03
    560c:	0e 94 21 b3 	call	0x16642	; 0x16642 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    5610:	15 95       	asr	r17
    5612:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    5614:	b3 94       	inc	r11
    5616:	01 15       	cp	r16, r1
    5618:	11 05       	cpc	r17, r1
    561a:	61 f7       	brne	.-40     	; 0x55f4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x760>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    561c:	d1 10       	cpse	r13, r1
    561e:	90 58       	subi	r25, 0x80	; 128
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    5620:	e1 14       	cp	r14, r1
    5622:	f1 04       	cpc	r15, r1
    5624:	09 f4       	brne	.+2      	; 0x5628 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x794>
    5626:	68 ce       	rjmp	.-816    	; 0x52f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    5628:	2a e0       	ldi	r18, 0x0A	; 10
    562a:	30 e0       	ldi	r19, 0x00	; 0
    562c:	f7 01       	movw	r30, r14
    562e:	31 83       	std	Z+1, r19	; 0x01
    5630:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    5632:	62 83       	std	Z+2, r22	; 0x02
    5634:	73 83       	std	Z+3, r23	; 0x03
    5636:	84 83       	std	Z+4, r24	; 0x04
    5638:	95 83       	std	Z+5, r25	; 0x05
    563a:	5e ce       	rjmp	.-836    	; 0x52f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	80 e0       	ldi	r24, 0x00	; 0
    5640:	cf cf       	rjmp	.-98     	; 0x55e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    5642:	11 95       	neg	r17
    5644:	01 95       	neg	r16
    5646:	11 09       	sbc	r17, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    5648:	b1 2c       	mov	r11, r1
make_float():
    564a:	01 15       	cp	r16, r1
    564c:	11 05       	cpc	r17, r1
    564e:	31 f3       	breq	.-52     	; 0x561c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x788>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    5650:	00 ff       	sbrs	r16, 0
    5652:	0c c0       	rjmp	.+24     	; 0x566c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7d8>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    5654:	a4 e0       	ldi	r26, 0x04	; 4
    5656:	ba 9e       	mul	r11, r26
    5658:	f0 01       	movw	r30, r0
    565a:	11 24       	eor	r1, r1
    565c:	e0 5e       	subi	r30, 0xE0	; 224
    565e:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    5660:	20 81       	ld	r18, Z
    5662:	31 81       	ldd	r19, Z+1	; 0x01
    5664:	42 81       	ldd	r20, Z+2	; 0x02
    5666:	53 81       	ldd	r21, Z+3	; 0x03
    5668:	0e 94 21 b3 	call	0x16642	; 0x16642 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    566c:	15 95       	asr	r17
    566e:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    5670:	b3 94       	inc	r11
    5672:	eb cf       	rjmp	.-42     	; 0x564a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7b6>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
      result.set(parseFloat<JsonFloat>(buffer));
    } else if (!strcmp(buffer, "true")) {
    5674:	6e e0       	ldi	r22, 0x0E	; 14
    5676:	73 e0       	ldi	r23, 0x03	; 3
    5678:	ce 01       	movw	r24, r28
    567a:	01 96       	adiw	r24, 0x01	; 1
    567c:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    5680:	89 2b       	or	r24, r25
    5682:	91 f4       	brne	.+36     	; 0x56a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x814>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    5684:	e1 14       	cp	r14, r1
    5686:	f1 04       	cpc	r15, r1
    5688:	09 f4       	brne	.+2      	; 0x568c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7f8>
    568a:	36 ce       	rjmp	.-916    	; 0x52f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    568c:	85 e0       	ldi	r24, 0x05	; 5
    568e:	90 e0       	ldi	r25, 0x00	; 0
    5690:	f7 01       	movw	r30, r14
    5692:	91 83       	std	Z+1, r25	; 0x01
    5694:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    5696:	81 e0       	ldi	r24, 0x01	; 1
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	a0 e0       	ldi	r26, 0x00	; 0
    569c:	b0 e0       	ldi	r27, 0x00	; 0
    569e:	82 83       	std	Z+2, r24	; 0x02
    56a0:	93 83       	std	Z+3, r25	; 0x03
    56a2:	a4 83       	std	Z+4, r26	; 0x04
    56a4:	b5 83       	std	Z+5, r27	; 0x05
    56a6:	28 ce       	rjmp	.-944    	; 0x52f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    56a8:	63 e1       	ldi	r22, 0x13	; 19
    56aa:	73 e0       	ldi	r23, 0x03	; 3
    56ac:	ce 01       	movw	r24, r28
    56ae:	01 96       	adiw	r24, 0x01	; 1
    56b0:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    56b4:	89 2b       	or	r24, r25
    56b6:	79 f4       	brne	.+30     	; 0x56d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x842>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    56b8:	e1 14       	cp	r14, r1
    56ba:	f1 04       	cpc	r15, r1
    56bc:	09 f4       	brne	.+2      	; 0x56c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x82c>
    56be:	1c ce       	rjmp	.-968    	; 0x52f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    56c0:	85 e0       	ldi	r24, 0x05	; 5
    56c2:	90 e0       	ldi	r25, 0x00	; 0
    56c4:	d7 01       	movw	r26, r14
    56c6:	8d 93       	st	X+, r24
    56c8:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    56ca:	f7 01       	movw	r30, r14
    56cc:	12 82       	std	Z+2, r1	; 0x02
    56ce:	13 82       	std	Z+3, r1	; 0x03
    56d0:	14 82       	std	Z+4, r1	; 0x04
    56d2:	15 82       	std	Z+5, r1	; 0x05
    56d4:	11 ce       	rjmp	.-990    	; 0x52f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    56d6:	69 e1       	ldi	r22, 0x19	; 25
    56d8:	73 e0       	ldi	r23, 0x03	; 3
    56da:	ce 01       	movw	r24, r28
    56dc:	01 96       	adiw	r24, 0x01	; 1
    56de:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    56e2:	89 2b       	or	r24, r25
    56e4:	09 f4       	brne	.+2      	; 0x56e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x854>
    56e6:	08 ce       	rjmp	.-1008   	; 0x52f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    56e8:	82 e0       	ldi	r24, 0x02	; 2
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	a3 cc       	rjmp	.-1722   	; 0x5034 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    56ee:	21 e0       	ldi	r18, 0x01	; 1
    56f0:	30 e0       	ldi	r19, 0x00	; 0
    56f2:	40 e0       	ldi	r20, 0x00	; 0
    56f4:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    56f6:	e1 14       	cp	r14, r1
    56f8:	f1 04       	cpc	r15, r1
    56fa:	09 f0       	breq	.+2      	; 0x56fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x86a>
    56fc:	52 ce       	rjmp	.-860    	; 0x53a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x50e>
    56fe:	fc cd       	rjmp	.-1032   	; 0x52f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>

00005700 <remote_tds_get_data(unsigned char) [clone .part.25]>:
_Z19remote_tds_get_datah.part.25():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2775
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (temp & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((temp >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
    5700:	cf 93       	push	r28
    5702:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2780
{
  int temp = 0;
  if (idx < MAX_RTDS)
  {
    temp = SRAM.readByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx)) << 8;
    5704:	93 e0       	ldi	r25, 0x03	; 3
    5706:	89 9f       	mul	r24, r25
    5708:	e0 01       	movw	r28, r0
    570a:	11 24       	eor	r1, r1
    570c:	be 01       	movw	r22, r28
    570e:	6b 59       	subi	r22, 0x9B	; 155
    5710:	7f 4f       	sbci	r23, 0xFF	; 255
    5712:	07 2e       	mov	r0, r23
    5714:	00 0c       	add	r0, r0
    5716:	88 0b       	sbc	r24, r24
    5718:	99 0b       	sbc	r25, r25
    571a:	0e 94 dd 89 	call	0x113ba	; 0x113ba <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2781
    temp = temp = SRAM.readByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx));
    571e:	be 01       	movw	r22, r28
    5720:	6c 59       	subi	r22, 0x9C	; 156
    5722:	7f 4f       	sbci	r23, 0xFF	; 255
    5724:	07 2e       	mov	r0, r23
    5726:	00 0c       	add	r0, r0
    5728:	88 0b       	sbc	r24, r24
    572a:	99 0b       	sbc	r25, r25
    572c:	0e 94 dd 89 	call	0x113ba	; 0x113ba <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2784
  }
  return temp;
}
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	df 91       	pop	r29
    5734:	cf 91       	pop	r28
    5736:	08 95       	ret

00005738 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z32display_element_dialog_show_textjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4858
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
}
/////
void display_element_dialog_show_text(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y)
{
    5738:	ef 92       	push	r14
    573a:	ff 92       	push	r15
    573c:	0f 93       	push	r16
    573e:	1f 93       	push	r17
    5740:	ab 01       	movw	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4859
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
    5742:	ee 24       	eor	r14, r14
    5744:	ea 94       	dec	r14
    5746:	fe 2c       	mov	r15, r14
    5748:	10 e0       	ldi	r17, 0x00	; 0
    574a:	00 e0       	ldi	r16, 0x00	; 0
    574c:	22 e0       	ldi	r18, 0x02	; 2
    574e:	bc 01       	movw	r22, r24
    5750:	87 eb       	ldi	r24, 0xB7	; 183
    5752:	98 e0       	ldi	r25, 0x08	; 8
    5754:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4860
}
    5758:	1f 91       	pop	r17
    575a:	0f 91       	pop	r16
    575c:	ff 90       	pop	r15
    575e:	ef 90       	pop	r14
    5760:	08 95       	ret

00005762 <display_element_set_string_del_char(unsigned char, unsigned char)>:
_Z35display_element_set_string_del_charhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2343
  }
}

void display_element_set_string_del_char(uint8_t args1, uint8_t args2)
{
  uint8_t len = strlen(dialog_set_string);
    5762:	8d ed       	ldi	r24, 0xDD	; 221
    5764:	98 e0       	ldi	r25, 0x08	; 8
    5766:	fc 01       	movw	r30, r24
    5768:	01 90       	ld	r0, Z+
    576a:	00 20       	and	r0, r0
    576c:	e9 f7       	brne	.-6      	; 0x5768 <display_element_set_string_del_char(unsigned char, unsigned char)+0x6>
    576e:	cf 01       	movw	r24, r30
    5770:	8e 5d       	subi	r24, 0xDE	; 222
    5772:	98 40       	sbci	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2344
  if (len > 0)
    5774:	88 23       	and	r24, r24
    5776:	29 f0       	breq	.+10     	; 0x5782 <display_element_set_string_del_char(unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2345
    dialog_set_string[len - 1] = 0;
    5778:	99 27       	eor	r25, r25
    577a:	fc 01       	movw	r30, r24
    577c:	e4 52       	subi	r30, 0x24	; 36
    577e:	f7 4f       	sbci	r31, 0xF7	; 247
    5780:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2346
}
    5782:	08 95       	ret

00005784 <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333
  strcpy(str, dialog_set_string);
}

void display_element_set_string_add_char(char znak)
{
  uint8_t len = strlen(dialog_set_string);
    5784:	ed ed       	ldi	r30, 0xDD	; 221
    5786:	f8 e0       	ldi	r31, 0x08	; 8
    5788:	01 90       	ld	r0, Z+
    578a:	00 20       	and	r0, r0
    578c:	e9 f7       	brne	.-6      	; 0x5788 <display_element_set_string_add_char(char)+0x4>
    578e:	ee 5d       	subi	r30, 0xDE	; 222
    5790:	f8 40       	sbci	r31, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2334
  if (len  < dialog_set_string_max_length - 1)
    5792:	ff 27       	eor	r31, r31
    5794:	20 91 da 08 	lds	r18, 0x08DA	; 0x8008da <dialog_set_string_max_length>
    5798:	21 50       	subi	r18, 0x01	; 1
    579a:	33 0b       	sbc	r19, r19
    579c:	e2 17       	cp	r30, r18
    579e:	f3 07       	cpc	r31, r19
    57a0:	24 f4       	brge	.+8      	; 0x57aa <display_element_set_string_add_char(char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2336
  {
    dialog_set_string[len] = znak;
    57a2:	e3 52       	subi	r30, 0x23	; 35
    57a4:	f7 4f       	sbci	r31, 0xF7	; 247
    57a6:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337
    dialog_set_string[len + 1] = 0;
    57a8:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2339
  }
}
    57aa:	08 95       	ret

000057ac <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)>:
_Z19click_keyboard_alfahhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2482
   args3 ... index prvku
*/
void click_keyboard_alfa(uint8_t args1, uint8_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    57ac:	90 91 63 08 	lds	r25, 0x0863	; 0x800863 <dialog_set_string_keyboard_type>
    57b0:	91 11       	cpse	r25, r1
    57b2:	07 c0       	rjmp	.+14     	; 0x57c2 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2483
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
    57b4:	e4 2f       	mov	r30, r20
    57b6:	f0 e0       	ldi	r31, 0x00	; 0
    57b8:	e8 5c       	subi	r30, 0xC8	; 200
    57ba:	fe 4c       	sbci	r31, 0xCE	; 206
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2487
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    57bc:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2489
  ///
  display_element_set_string_add_char(znak);
    57be:	0c 94 c2 2b 	jmp	0x5784	; 0x5784 <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2484
void click_keyboard_alfa(uint8_t args1, uint8_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    57c2:	91 30       	cpi	r25, 0x01	; 1
    57c4:	29 f4       	brne	.+10     	; 0x57d0 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2485
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
    57c6:	e4 2f       	mov	r30, r20
    57c8:	f0 e0       	ldi	r31, 0x00	; 0
    57ca:	e2 5e       	subi	r30, 0xE2	; 226
    57cc:	fe 4c       	sbci	r31, 0xCE	; 206
    57ce:	f6 cf       	rjmp	.-20     	; 0x57bc <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2486
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    57d0:	92 30       	cpi	r25, 0x02	; 2
    57d2:	a9 f7       	brne	.-22     	; 0x57be <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2487
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    57d4:	e4 2f       	mov	r30, r20
    57d6:	f0 e0       	ldi	r31, 0x00	; 0
    57d8:	ec 5f       	subi	r30, 0xFC	; 252
    57da:	fe 4c       	sbci	r31, 0xCE	; 206
    57dc:	ef cf       	rjmp	.-34     	; 0x57bc <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x10>

000057de <click_keyboard_number(unsigned char, unsigned char, unsigned char)>:
_Z21click_keyboard_numberhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2445
   args3 ... index prvku
*/
void click_keyboard_number(uint8_t args1, uint8_t args2, uint8_t args3)
{
  char znak;
  znak = '0' + args3;
    57de:	80 e3       	ldi	r24, 0x30	; 48
    57e0:	84 0f       	add	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2446
  if (args3 == 10) znak = '.';
    57e2:	4a 30       	cpi	r20, 0x0A	; 10
    57e4:	09 f4       	brne	.+2      	; 0x57e8 <click_keyboard_number(unsigned char, unsigned char, unsigned char)+0xa>
    57e6:	8e e2       	ldi	r24, 0x2E	; 46
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2447
  display_element_set_string_add_char(znak);
    57e8:	0c 94 c2 2b 	jmp	0x5784	; 0x5784 <display_element_set_string_add_char(char)>

000057ec <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5160
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
}
/////////////////////
/// typ_button_3 ////
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
    57ec:	2f 92       	push	r2
    57ee:	3f 92       	push	r3
    57f0:	4f 92       	push	r4
    57f2:	5f 92       	push	r5
    57f4:	6f 92       	push	r6
    57f6:	7f 92       	push	r7
    57f8:	9f 92       	push	r9
    57fa:	af 92       	push	r10
    57fc:	bf 92       	push	r11
    57fe:	cf 92       	push	r12
    5800:	df 92       	push	r13
    5802:	ef 92       	push	r14
    5804:	ff 92       	push	r15
    5806:	0f 93       	push	r16
    5808:	1f 93       	push	r17
    580a:	cf 93       	push	r28
    580c:	df 93       	push	r29
    580e:	00 d0       	rcall	.+0      	; 0x5810 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x24>
    5810:	1f 92       	push	r1
    5812:	1f 92       	push	r1
    5814:	cd b7       	in	r28, 0x3d	; 61
    5816:	de b7       	in	r29, 0x3e	; 62
    5818:	6c 01       	movw	r12, r24
    581a:	5b 01       	movw	r10, r22
    581c:	1a 01       	movw	r2, r20
    581e:	29 01       	movw	r4, r18
    5820:	90 2e       	mov	r9, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    5822:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xb>
    5826:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_lcd+0xa>
    582a:	10 e0       	ldi	r17, 0x00	; 0
    582c:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5165
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    582e:	3b 01       	movw	r6, r22
    5830:	62 0e       	add	r6, r18
    5832:	73 1e       	adc	r7, r19
    5834:	84 0f       	add	r24, r20
    5836:	95 1f       	adc	r25, r21
    5838:	9d 83       	std	Y+5, r25	; 0x05
    583a:	8c 83       	std	Y+4, r24	; 0x04
    583c:	93 01       	movw	r18, r6
    583e:	20 1b       	sub	r18, r16
    5840:	31 0b       	sbc	r19, r17
    5842:	4c 81       	ldd	r20, Y+4	; 0x04
    5844:	5d 81       	ldd	r21, Y+5	; 0x05
    5846:	40 1b       	sub	r20, r16
    5848:	51 0b       	sbc	r21, r17
    584a:	b5 01       	movw	r22, r10
    584c:	60 0f       	add	r22, r16
    584e:	71 1f       	adc	r23, r17
    5850:	c6 01       	movw	r24, r12
    5852:	80 0f       	add	r24, r16
    5854:	91 1f       	adc	r25, r17
    5856:	0e 94 74 83 	call	0x106e8	; 0x106e8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    585a:	0f 5f       	subi	r16, 0xFF	; 255
    585c:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5164
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    585e:	03 30       	cpi	r16, 0x03	; 3
    5860:	11 05       	cpc	r17, r1
    5862:	61 f7       	brne	.-40     	; 0x583c <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5166
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
    5864:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5167
  str1[1] = 0;
    5866:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5169
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
    5868:	ce 01       	movw	r24, r28
    586a:	01 96       	adiw	r24, 0x01	; 1
    586c:	fc 01       	movw	r30, r24
    586e:	01 90       	ld	r0, Z+
    5870:	00 20       	and	r0, r0
    5872:	e9 f7       	brne	.-6      	; 0x586e <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x82>
    5874:	31 97       	sbiw	r30, 0x01	; 1
    5876:	e8 1b       	sub	r30, r24
    5878:	f9 0b       	sbc	r31, r25
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2601
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    587a:	29 2d       	mov	r18, r9
    587c:	22 0f       	add	r18, r18
    587e:	29 0d       	add	r18, r9
    5880:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5171
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    5882:	a2 01       	movw	r20, r4
    5884:	42 1b       	sub	r20, r18
    5886:	51 09       	sbc	r21, r1
    5888:	56 95       	lsr	r21
    588a:	47 95       	ror	r20
    588c:	56 95       	lsr	r21
    588e:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5172
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    5890:	4a 0d       	add	r20, r10
    5892:	5b 2d       	mov	r21, r11
    5894:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2596
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5896:	26 e0       	ldi	r18, 0x06	; 6
    5898:	e2 9f       	mul	r30, r18
    589a:	f0 01       	movw	r30, r0
    589c:	11 24       	eor	r1, r1
    589e:	9e 9e       	mul	r9, r30
    58a0:	90 01       	movw	r18, r0
    58a2:	9f 9e       	mul	r9, r31
    58a4:	30 0d       	add	r19, r0
    58a6:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5170
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
    58a8:	33 27       	eor	r19, r19
    58aa:	b1 01       	movw	r22, r2
    58ac:	62 1b       	sub	r22, r18
    58ae:	73 0b       	sbc	r23, r19
    58b0:	76 95       	lsr	r23
    58b2:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5172
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    58b4:	6c 0d       	add	r22, r12
    58b6:	7d 2d       	mov	r23, r13
    58b8:	71 1d       	adc	r23, r1
    58ba:	ee 24       	eor	r14, r14
    58bc:	ea 94       	dec	r14
    58be:	fe 2c       	mov	r15, r14
    58c0:	10 e0       	ldi	r17, 0x00	; 0
    58c2:	00 e0       	ldi	r16, 0x00	; 0
    58c4:	29 2d       	mov	r18, r9
    58c6:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5173
}
    58ca:	0f 90       	pop	r0
    58cc:	0f 90       	pop	r0
    58ce:	0f 90       	pop	r0
    58d0:	0f 90       	pop	r0
    58d2:	0f 90       	pop	r0
    58d4:	df 91       	pop	r29
    58d6:	cf 91       	pop	r28
    58d8:	1f 91       	pop	r17
    58da:	0f 91       	pop	r16
    58dc:	ff 90       	pop	r15
    58de:	ef 90       	pop	r14
    58e0:	df 90       	pop	r13
    58e2:	cf 90       	pop	r12
    58e4:	bf 90       	pop	r11
    58e6:	af 90       	pop	r10
    58e8:	9f 90       	pop	r9
    58ea:	7f 90       	pop	r7
    58ec:	6f 90       	pop	r6
    58ee:	5f 90       	pop	r5
    58f0:	4f 90       	pop	r4
    58f2:	3f 90       	pop	r3
    58f4:	2f 90       	pop	r2
    58f6:	08 95       	ret

000058f8 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4794
}


/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    58f8:	8f 92       	push	r8
    58fa:	9f 92       	push	r9
    58fc:	af 92       	push	r10
    58fe:	bf 92       	push	r11
    5900:	cf 92       	push	r12
    5902:	df 92       	push	r13
    5904:	ef 92       	push	r14
    5906:	ff 92       	push	r15
    5908:	0f 93       	push	r16
    590a:	1f 93       	push	r17
    590c:	cf 93       	push	r28
    590e:	df 93       	push	r29
    5910:	cd b7       	in	r28, 0x3d	; 61
    5912:	de b7       	in	r29, 0x3e	; 62
    5914:	68 97       	sbiw	r28, 0x18	; 24
    5916:	0f b6       	in	r0, 0x3f	; 63
    5918:	f8 94       	cli
    591a:	de bf       	out	0x3e, r29	; 62
    591c:	0f be       	out	0x3f, r0	; 63
    591e:	cd bf       	out	0x3d, r28	; 61
    5920:	5c 01       	movw	r10, r24
    5922:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4797
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
    5924:	66 e1       	ldi	r22, 0x16	; 22
    5926:	74 e3       	ldi	r23, 0x34	; 52
    5928:	ce 01       	movw	r24, r28
    592a:	01 96       	adiw	r24, 0x01	; 1
    592c:	6c 01       	movw	r12, r24
    592e:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4799
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
    5932:	a4 01       	movw	r20, r8
    5934:	4b 5f       	subi	r20, 0xFB	; 251
    5936:	5f 4f       	sbci	r21, 0xFF	; 255
    5938:	b5 01       	movw	r22, r10
    593a:	61 5b       	subi	r22, 0xB1	; 177
    593c:	7f 4f       	sbci	r23, 0xFF	; 255
    593e:	ee 24       	eor	r14, r14
    5940:	ea 94       	dec	r14
    5942:	fe 2c       	mov	r15, r14
    5944:	10 e0       	ldi	r17, 0x00	; 0
    5946:	00 e0       	ldi	r16, 0x00	; 0
    5948:	21 e0       	ldi	r18, 0x01	; 1
    594a:	c6 01       	movw	r24, r12
    594c:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3956
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    5950:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <selftest_data>
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4800
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    5954:	80 fd       	sbrc	r24, 0
    5956:	50 c0       	rjmp	.+160    	; 0x59f8 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x100>
    5958:	90 91 4c 10 	lds	r25, 0x104C	; 0x80104c <now+0x4>
    595c:	80 91 4b 10 	lds	r24, 0x104B	; 0x80104b <now+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4802
  {
    if (uptime % 2 )
    5960:	20 91 d4 0a 	lds	r18, 0x0AD4	; 0x800ad4 <uptime>
    5964:	20 ff       	sbrs	r18, 0
    5966:	41 c0       	rjmp	.+130    	; 0x59ea <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xf2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4803
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    5968:	1f 92       	push	r1
    596a:	9f 93       	push	r25
    596c:	1f 92       	push	r1
    596e:	8f 93       	push	r24
    5970:	8e e1       	ldi	r24, 0x1E	; 30
    5972:	93 e0       	ldi	r25, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4805
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    5974:	9f 93       	push	r25
    5976:	8f 93       	push	r24
    5978:	df 92       	push	r13
    597a:	cf 92       	push	r12
    597c:	0e 94 27 b7 	call	0x16e4e	; 0x16e4e <sprintf>
    5980:	0f b6       	in	r0, 0x3f	; 63
    5982:	f8 94       	cli
    5984:	de bf       	out	0x3e, r29	; 62
    5986:	0f be       	out	0x3f, r0	; 63
    5988:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    598a:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xb>
    598e:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_lcd+0xa>
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4812
  else
  {
    strcpy(str1, "--:--");
  }
  my_lcd.Set_Draw_color(BLACK);
  show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    5992:	a4 01       	movw	r20, r8
    5994:	4c 5e       	subi	r20, 0xEC	; 236
    5996:	5f 4f       	sbci	r21, 0xFF	; 255
    5998:	b5 01       	movw	r22, r10
    599a:	6c 5f       	subi	r22, 0xFC	; 252
    599c:	7f 4f       	sbci	r23, 0xFF	; 255
    599e:	ee 24       	eor	r14, r14
    59a0:	ea 94       	dec	r14
    59a2:	fe 2c       	mov	r15, r14
    59a4:	10 e0       	ldi	r17, 0x00	; 0
    59a6:	00 e0       	ldi	r16, 0x00	; 0
    59a8:	28 e0       	ldi	r18, 0x08	; 8
    59aa:	c6 01       	movw	r24, r12
    59ac:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4813
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    59b0:	94 01       	movw	r18, r8
    59b2:	2c 5a       	subi	r18, 0xAC	; 172
    59b4:	3f 4f       	sbci	r19, 0xFF	; 255
    59b6:	a5 01       	movw	r20, r10
    59b8:	4c 50       	subi	r20, 0x0C	; 12
    59ba:	5f 4f       	sbci	r21, 0xFF	; 255
    59bc:	b4 01       	movw	r22, r8
    59be:	c5 01       	movw	r24, r10
    59c0:	0e 94 74 83 	call	0x106e8	; 0x106e8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4814
}
    59c4:	68 96       	adiw	r28, 0x18	; 24
    59c6:	0f b6       	in	r0, 0x3f	; 63
    59c8:	f8 94       	cli
    59ca:	de bf       	out	0x3e, r29	; 62
    59cc:	0f be       	out	0x3f, r0	; 63
    59ce:	cd bf       	out	0x3d, r28	; 61
    59d0:	df 91       	pop	r29
    59d2:	cf 91       	pop	r28
    59d4:	1f 91       	pop	r17
    59d6:	0f 91       	pop	r16
    59d8:	ff 90       	pop	r15
    59da:	ef 90       	pop	r14
    59dc:	df 90       	pop	r13
    59de:	cf 90       	pop	r12
    59e0:	bf 90       	pop	r11
    59e2:	af 90       	pop	r10
    59e4:	9f 90       	pop	r9
    59e6:	8f 90       	pop	r8
    59e8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4805
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
  {
    if (uptime % 2 )
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    59ea:	1f 92       	push	r1
    59ec:	9f 93       	push	r25
    59ee:	1f 92       	push	r1
    59f0:	8f 93       	push	r24
    59f2:	88 e2       	ldi	r24, 0x28	; 40
    59f4:	93 e0       	ldi	r25, 0x03	; 3
    59f6:	be cf       	rjmp	.-132    	; 0x5974 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4809
  }
  else
  {
    strcpy(str1, "--:--");
    59f8:	62 e3       	ldi	r22, 0x32	; 50
    59fa:	73 e0       	ldi	r23, 0x03	; 3
    59fc:	c6 01       	movw	r24, r12
    59fe:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
    5a02:	c3 cf       	rjmp	.-122    	; 0x598a <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>

00005a04 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z25display_element_rectanglejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4764
}


void display_element_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    5a04:	26 0f       	add	r18, r22
    5a06:	37 1f       	adc	r19, r23
    5a08:	48 0f       	add	r20, r24
    5a0a:	59 1f       	adc	r21, r25
    5a0c:	0c 94 74 83 	jmp	0x106e8	; 0x106e8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>

00005a10 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5093
  }
}
///////////////////////
/// typ tlacitka 2 ////
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{
    5a10:	2f 92       	push	r2
    5a12:	3f 92       	push	r3
    5a14:	4f 92       	push	r4
    5a16:	5f 92       	push	r5
    5a18:	6f 92       	push	r6
    5a1a:	7f 92       	push	r7
    5a1c:	8f 92       	push	r8
    5a1e:	9f 92       	push	r9
    5a20:	af 92       	push	r10
    5a22:	bf 92       	push	r11
    5a24:	cf 92       	push	r12
    5a26:	df 92       	push	r13
    5a28:	ef 92       	push	r14
    5a2a:	ff 92       	push	r15
    5a2c:	0f 93       	push	r16
    5a2e:	1f 93       	push	r17
    5a30:	cf 93       	push	r28
    5a32:	df 93       	push	r29
    5a34:	00 d0       	rcall	.+0      	; 0x5a36 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
    5a36:	1f 92       	push	r1
    5a38:	cd b7       	in	r28, 0x3d	; 61
    5a3a:	de b7       	in	r29, 0x3e	; 62
    5a3c:	2c 01       	movw	r4, r24
    5a3e:	3b 01       	movw	r6, r22
    5a40:	0a 83       	std	Y+2, r16	; 0x02
    5a42:	eb 82       	std	Y+3, r14	; 0x03
    5a44:	3a 2c       	mov	r3, r10
    5a46:	2b 2c       	mov	r2, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5106
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
  uint8_t druhy = 0;
  back_color = color_inactive;
  if (state == 1)
    5a48:	31 e0       	ldi	r19, 0x01	; 1
    5a4a:	83 12       	cpse	r8, r19
    5a4c:	02 c0       	rjmp	.+4      	; 0x5a52 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5107
    back_color = color_active;
    5a4e:	3c 2c       	mov	r3, r12
    5a50:	2d 2c       	mov	r2, r13
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5a52:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xb>
    5a56:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_lcd+0xa>
    5a5a:	10 e0       	ldi	r17, 0x00	; 0
    5a5c:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5110
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5a5e:	a2 2e       	mov	r10, r18
    5a60:	b1 2c       	mov	r11, r1
    5a62:	84 2e       	mov	r8, r20
    5a64:	91 2c       	mov	r9, r1
    5a66:	65 01       	movw	r12, r10
    5a68:	c6 0c       	add	r12, r6
    5a6a:	d7 1c       	adc	r13, r7
    5a6c:	74 01       	movw	r14, r8
    5a6e:	e4 0c       	add	r14, r4
    5a70:	f5 1c       	adc	r15, r5
    5a72:	96 01       	movw	r18, r12
    5a74:	20 1b       	sub	r18, r16
    5a76:	31 0b       	sbc	r19, r17
    5a78:	a7 01       	movw	r20, r14
    5a7a:	40 1b       	sub	r20, r16
    5a7c:	51 0b       	sbc	r21, r17
    5a7e:	b3 01       	movw	r22, r6
    5a80:	60 0f       	add	r22, r16
    5a82:	71 1f       	adc	r23, r17
    5a84:	c2 01       	movw	r24, r4
    5a86:	80 0f       	add	r24, r16
    5a88:	91 1f       	adc	r25, r17
    5a8a:	0e 94 74 83 	call	0x106e8	; 0x106e8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    5a8e:	0f 5f       	subi	r16, 0xFF	; 255
    5a90:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5109
  uint8_t druhy = 0;
  back_color = color_inactive;
  if (state == 1)
    back_color = color_active;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5a92:	03 30       	cpi	r16, 0x03	; 3
    5a94:	11 05       	cpc	r17, r1
    5a96:	69 f7       	brne	.-38     	; 0x5a72 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x62>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5a98:	30 92 c2 0d 	sts	0x0DC2, r3	; 0x800dc2 <my_lcd+0xa>
    5a9c:	20 92 c3 0d 	sts	0x0DC3, r2	; 0x800dc3 <my_lcd+0xb>
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5112
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    5aa0:	93 01       	movw	r18, r6
    5aa2:	23 50       	subi	r18, 0x03	; 3
    5aa4:	31 09       	sbc	r19, r1
    5aa6:	2a 0d       	add	r18, r10
    5aa8:	3b 1d       	adc	r19, r11
    5aaa:	a2 01       	movw	r20, r4
    5aac:	43 50       	subi	r20, 0x03	; 3
    5aae:	51 09       	sbc	r21, r1
    5ab0:	48 0d       	add	r20, r8
    5ab2:	59 1d       	adc	r21, r9
    5ab4:	b3 01       	movw	r22, r6
    5ab6:	6d 5f       	subi	r22, 0xFD	; 253
    5ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    5aba:	c2 01       	movw	r24, r4
    5abc:	03 96       	adiw	r24, 0x03	; 3
    5abe:	0e 94 cd 83 	call	0x1079a	; 0x1079a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5113
  if (strlen(line1) > 0)
    5ac2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    5ac4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    5ac6:	80 81       	ld	r24, Z
    5ac8:	88 23       	and	r24, r24
    5aca:	09 f4       	brne	.+2      	; 0x5ace <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xbe>
    5acc:	a1 c0       	rjmp	.+322    	; 0x5c10 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x200>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5115
  {
    prvni = 1;
    5ace:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5116
    num_lines_const = 2;
    5ad0:	f2 e0       	ldi	r31, 0x02	; 2
    5ad2:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5118
  }
  if (strlen(line2) > 0)
    5ad4:	ec 8d       	ldd	r30, Y+28	; 0x1c
    5ad6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    5ad8:	90 81       	ld	r25, Z
    5ada:	99 23       	and	r25, r25
    5adc:	09 f4       	brne	.+2      	; 0x5ae0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xd0>
    5ade:	9b c0       	rjmp	.+310    	; 0x5c16 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x206>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5121
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
    5ae0:	f9 81       	ldd	r31, Y+1	; 0x01
    5ae2:	fe 5f       	subi	r31, 0xFE	; 254
    5ae4:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5120
    prvni = 1;
    num_lines_const = 2;
  }
  if (strlen(line2) > 0)
  {
    druhy = 1;
    5ae6:	21 e0       	ldi	r18, 0x01	; 1
    5ae8:	2c 83       	std	Y+4, r18	; 0x04
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5097
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{

  uint16_t back_color;
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    5aea:	d1 2c       	mov	r13, r1
    5aec:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5123
  if (strlen(line2) > 0)
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
    5aee:	81 30       	cpi	r24, 0x01	; 1
    5af0:	d1 f5       	brne	.+116    	; 0x5b66 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x156>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5125
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    5af2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    5af4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    5af6:	01 90       	ld	r0, Z+
    5af8:	00 20       	and	r0, r0
    5afa:	e9 f7       	brne	.-6      	; 0x5af6 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xe6>
    5afc:	9f 01       	movw	r18, r30
    5afe:	21 50       	subi	r18, 0x01	; 1
    5b00:	31 09       	sbc	r19, r1
    5b02:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5b04:	5b 8d       	ldd	r21, Y+27	; 0x1b
    5b06:	24 1b       	sub	r18, r20
    5b08:	35 0b       	sbc	r19, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2601
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    5b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b0c:	88 0f       	add	r24, r24
    5b0e:	5a 81       	ldd	r21, Y+2	; 0x02
    5b10:	85 0f       	add	r24, r21
    5b12:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5127
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    5b14:	f5 01       	movw	r30, r10
    5b16:	e8 1b       	sub	r30, r24
    5b18:	f1 09       	sbc	r31, r1
    5b1a:	cf 01       	movw	r24, r30
    5b1c:	f9 81       	ldd	r31, Y+1	; 0x01
    5b1e:	6f 2f       	mov	r22, r31
    5b20:	70 e0       	ldi	r23, 0x00	; 0
    5b22:	0e 94 19 b4 	call	0x16832	; 0x16832 <__divmodhi4>
    5b26:	6b 01       	movw	r12, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5128
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    5b28:	a3 01       	movw	r20, r6
    5b2a:	41 50       	subi	r20, 0x01	; 1
    5b2c:	51 09       	sbc	r21, r1
    5b2e:	46 0f       	add	r20, r22
    5b30:	57 1f       	adc	r21, r23
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2596
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5b32:	66 e0       	ldi	r22, 0x06	; 6
    5b34:	26 9f       	mul	r18, r22
    5b36:	90 01       	movw	r18, r0
    5b38:	11 24       	eor	r1, r1
    5b3a:	ea 81       	ldd	r30, Y+2	; 0x02
    5b3c:	e2 9f       	mul	r30, r18
    5b3e:	c0 01       	movw	r24, r0
    5b40:	e3 9f       	mul	r30, r19
    5b42:	90 0d       	add	r25, r0
    5b44:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5126
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    5b46:	b4 01       	movw	r22, r8
    5b48:	68 1b       	sub	r22, r24
    5b4a:	79 0b       	sbc	r23, r25
    5b4c:	76 95       	lsr	r23
    5b4e:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5128
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    5b50:	64 0d       	add	r22, r4
    5b52:	75 1d       	adc	r23, r5
    5b54:	e3 2c       	mov	r14, r3
    5b56:	f2 2c       	mov	r15, r2
    5b58:	10 e0       	ldi	r17, 0x00	; 0
    5b5a:	00 e0       	ldi	r16, 0x00	; 0
    5b5c:	2e 2f       	mov	r18, r30
    5b5e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5b60:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5b62:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5130
  }
  if (druhy == 1)
    5b66:	fc 81       	ldd	r31, Y+4	; 0x04
    5b68:	f1 30       	cpi	r31, 0x01	; 1
    5b6a:	d9 f5       	brne	.+118    	; 0x5be2 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5132
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    5b6c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    5b6e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    5b70:	01 90       	ld	r0, Z+
    5b72:	00 20       	and	r0, r0
    5b74:	e9 f7       	brne	.-6      	; 0x5b70 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x160>
    5b76:	31 97       	sbiw	r30, 0x01	; 1
    5b78:	2c 8d       	ldd	r18, Y+28	; 0x1c
    5b7a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    5b7c:	e2 1b       	sub	r30, r18
    5b7e:	f3 0b       	sbc	r31, r19
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2601
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    5b80:	8b 81       	ldd	r24, Y+3	; 0x03
    5b82:	88 0f       	add	r24, r24
    5b84:	3b 81       	ldd	r19, Y+3	; 0x03
    5b86:	83 0f       	add	r24, r19
    5b88:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5134
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    5b8a:	a5 01       	movw	r20, r10
    5b8c:	48 1b       	sub	r20, r24
    5b8e:	51 09       	sbc	r21, r1
    5b90:	ca 01       	movw	r24, r20
    5b92:	88 0f       	add	r24, r24
    5b94:	99 1f       	adc	r25, r25
    5b96:	59 81       	ldd	r21, Y+1	; 0x01
    5b98:	65 2f       	mov	r22, r21
    5b9a:	70 e0       	ldi	r23, 0x00	; 0
    5b9c:	0e 94 19 b4 	call	0x16832	; 0x16832 <__divmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5135
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    5ba0:	81 e0       	ldi	r24, 0x01	; 1
    5ba2:	68 1a       	sub	r6, r24
    5ba4:	71 08       	sbc	r7, r1
    5ba6:	66 0e       	add	r6, r22
    5ba8:	77 1e       	adc	r7, r23
    5baa:	a3 01       	movw	r20, r6
    5bac:	4c 0d       	add	r20, r12
    5bae:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2596
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5bb0:	96 e0       	ldi	r25, 0x06	; 6
    5bb2:	e9 9f       	mul	r30, r25
    5bb4:	f0 01       	movw	r30, r0
    5bb6:	11 24       	eor	r1, r1
    5bb8:	3e 9f       	mul	r19, r30
    5bba:	c0 01       	movw	r24, r0
    5bbc:	3f 9f       	mul	r19, r31
    5bbe:	90 0d       	add	r25, r0
    5bc0:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5133
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    5bc2:	b4 01       	movw	r22, r8
    5bc4:	68 1b       	sub	r22, r24
    5bc6:	79 0b       	sbc	r23, r25
    5bc8:	76 95       	lsr	r23
    5bca:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5135
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    5bcc:	64 0d       	add	r22, r4
    5bce:	75 1d       	adc	r23, r5
    5bd0:	e3 2c       	mov	r14, r3
    5bd2:	f2 2c       	mov	r15, r2
    5bd4:	10 e0       	ldi	r17, 0x00	; 0
    5bd6:	00 e0       	ldi	r16, 0x00	; 0
    5bd8:	23 2f       	mov	r18, r19
    5bda:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5bdc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5bde:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5137
  }
}
    5be2:	0f 90       	pop	r0
    5be4:	0f 90       	pop	r0
    5be6:	0f 90       	pop	r0
    5be8:	0f 90       	pop	r0
    5bea:	df 91       	pop	r29
    5bec:	cf 91       	pop	r28
    5bee:	1f 91       	pop	r17
    5bf0:	0f 91       	pop	r16
    5bf2:	ff 90       	pop	r15
    5bf4:	ef 90       	pop	r14
    5bf6:	df 90       	pop	r13
    5bf8:	cf 90       	pop	r12
    5bfa:	bf 90       	pop	r11
    5bfc:	af 90       	pop	r10
    5bfe:	9f 90       	pop	r9
    5c00:	8f 90       	pop	r8
    5c02:	7f 90       	pop	r7
    5c04:	6f 90       	pop	r6
    5c06:	5f 90       	pop	r5
    5c08:	4f 90       	pop	r4
    5c0a:	3f 90       	pop	r3
    5c0c:	2f 90       	pop	r2
    5c0e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5103
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
    5c10:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5102
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    5c12:	19 82       	std	Y+1, r1	; 0x01
    5c14:	5f cf       	rjmp	.-322    	; 0x5ad4 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5104
  uint8_t prvni = 0;
  uint8_t druhy = 0;
    5c16:	1c 82       	std	Y+4, r1	; 0x04
    5c18:	68 cf       	rjmp	.-304    	; 0x5aea <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xda>

00005c1a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5057
//////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
    5c1a:	2f 92       	push	r2
    5c1c:	3f 92       	push	r3
    5c1e:	4f 92       	push	r4
    5c20:	5f 92       	push	r5
    5c22:	6f 92       	push	r6
    5c24:	7f 92       	push	r7
    5c26:	8f 92       	push	r8
    5c28:	9f 92       	push	r9
    5c2a:	af 92       	push	r10
    5c2c:	bf 92       	push	r11
    5c2e:	cf 92       	push	r12
    5c30:	df 92       	push	r13
    5c32:	ef 92       	push	r14
    5c34:	ff 92       	push	r15
    5c36:	0f 93       	push	r16
    5c38:	1f 93       	push	r17
    5c3a:	cf 93       	push	r28
    5c3c:	df 93       	push	r29
    5c3e:	00 d0       	rcall	.+0      	; 0x5c40 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    5c40:	1f 92       	push	r1
    5c42:	1f 92       	push	r1
    5c44:	cd b7       	in	r28, 0x3d	; 61
    5c46:	de b7       	in	r29, 0x3e	; 62
    5c48:	2c 01       	movw	r4, r24
    5c4a:	3b 01       	movw	r6, r22
    5c4c:	5a 83       	std	Y+2, r21	; 0x02
    5c4e:	49 83       	std	Y+1, r20	; 0x01
    5c50:	19 01       	movw	r2, r18
    5c52:	90 2e       	mov	r9, r16
    5c54:	eb 82       	std	Y+3, r14	; 0x03
    5c56:	dd 82       	std	Y+5, r13	; 0x05
    5c58:	cc 82       	std	Y+4, r12	; 0x04
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5c5a:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xb>
    5c5e:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_lcd+0xa>
    5c62:	10 e0       	ldi	r17, 0x00	; 0
    5c64:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5067
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5c66:	6b 01       	movw	r12, r22
    5c68:	c2 0e       	add	r12, r18
    5c6a:	d3 1e       	adc	r13, r19
    5c6c:	7a 01       	movw	r14, r20
    5c6e:	e8 0e       	add	r14, r24
    5c70:	f9 1e       	adc	r15, r25
    5c72:	96 01       	movw	r18, r12
    5c74:	20 1b       	sub	r18, r16
    5c76:	31 0b       	sbc	r19, r17
    5c78:	a7 01       	movw	r20, r14
    5c7a:	40 1b       	sub	r20, r16
    5c7c:	51 0b       	sbc	r21, r17
    5c7e:	b8 01       	movw	r22, r16
    5c80:	66 0d       	add	r22, r6
    5c82:	77 1d       	adc	r23, r7
    5c84:	c8 01       	movw	r24, r16
    5c86:	84 0d       	add	r24, r4
    5c88:	95 1d       	adc	r25, r5
    5c8a:	0e 94 74 83 	call	0x106e8	; 0x106e8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    5c8e:	0f 5f       	subi	r16, 0xFF	; 255
    5c90:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5066
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5c92:	03 30       	cpi	r16, 0x03	; 3
    5c94:	11 05       	cpc	r17, r1
    5c96:	69 f7       	brne	.-38     	; 0x5c72 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x58>
    5c98:	91 01       	movw	r18, r2
    5c9a:	23 50       	subi	r18, 0x03	; 3
    5c9c:	31 09       	sbc	r19, r1
    5c9e:	49 81       	ldd	r20, Y+1	; 0x01
    5ca0:	5a 81       	ldd	r21, Y+2	; 0x02
    5ca2:	43 50       	subi	r20, 0x03	; 3
    5ca4:	51 09       	sbc	r21, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5068
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  if (clean == 1)
    5ca6:	61 e0       	ldi	r22, 0x01	; 1
    5ca8:	86 12       	cpse	r8, r22
    5caa:	11 c0       	rjmp	.+34     	; 0x5cce <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xb4>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5cac:	8f ef       	ldi	r24, 0xFF	; 255
    5cae:	9f ef       	ldi	r25, 0xFF	; 255
    5cb0:	90 93 c3 0d 	sts	0x0DC3, r25	; 0x800dc3 <my_lcd+0xb>
    5cb4:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <my_lcd+0xa>
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5071
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    5cb8:	26 0d       	add	r18, r6
    5cba:	37 1d       	adc	r19, r7
    5cbc:	44 0d       	add	r20, r4
    5cbe:	55 1d       	adc	r21, r5
    5cc0:	b3 01       	movw	r22, r6
    5cc2:	6d 5f       	subi	r22, 0xFD	; 253
    5cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    5cc6:	c2 01       	movw	r24, r4
    5cc8:	03 96       	adiw	r24, 0x03	; 3
    5cca:	0e 94 cd 83 	call	0x1079a	; 0x1079a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5073
  }
  if (strlen(line1) > 0)
    5cce:	ec 81       	ldd	r30, Y+4	; 0x04
    5cd0:	fd 81       	ldd	r31, Y+5	; 0x05
    5cd2:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5064
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    5cd4:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5059
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    5cd6:	d1 2c       	mov	r13, r1
    5cd8:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5073
  if (clean == 1)
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
    5cda:	88 23       	and	r24, r24
    5cdc:	91 f1       	breq	.+100    	; 0x5d42 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5076
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    5cde:	01 90       	ld	r0, Z+
    5ce0:	00 20       	and	r0, r0
    5ce2:	e9 f7       	brne	.-6      	; 0x5cde <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xc4>
    5ce4:	31 97       	sbiw	r30, 0x01	; 1
    5ce6:	4c 81       	ldd	r20, Y+4	; 0x04
    5ce8:	5d 81       	ldd	r21, Y+5	; 0x05
    5cea:	e4 1b       	sub	r30, r20
    5cec:	f5 0b       	sbc	r31, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2601
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    5cee:	89 2d       	mov	r24, r9
    5cf0:	88 0f       	add	r24, r24
    5cf2:	89 0d       	add	r24, r9
    5cf4:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5078
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    5cf6:	61 01       	movw	r12, r2
    5cf8:	c8 1a       	sub	r12, r24
    5cfa:	d1 08       	sbc	r13, r1
    5cfc:	d6 94       	lsr	r13
    5cfe:	c7 94       	ror	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5079
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    5d00:	a3 01       	movw	r20, r6
    5d02:	41 50       	subi	r20, 0x01	; 1
    5d04:	51 09       	sbc	r21, r1
    5d06:	4c 0d       	add	r20, r12
    5d08:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2596
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5d0a:	66 e0       	ldi	r22, 0x06	; 6
    5d0c:	e6 9f       	mul	r30, r22
    5d0e:	f0 01       	movw	r30, r0
    5d10:	11 24       	eor	r1, r1
    5d12:	9e 9e       	mul	r9, r30
    5d14:	c0 01       	movw	r24, r0
    5d16:	9f 9e       	mul	r9, r31
    5d18:	90 0d       	add	r25, r0
    5d1a:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5077
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    5d1c:	69 81       	ldd	r22, Y+1	; 0x01
    5d1e:	7a 81       	ldd	r23, Y+2	; 0x02
    5d20:	68 1b       	sub	r22, r24
    5d22:	79 0b       	sbc	r23, r25
    5d24:	76 95       	lsr	r23
    5d26:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5079
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    5d28:	64 0d       	add	r22, r4
    5d2a:	75 1d       	adc	r23, r5
    5d2c:	ee 24       	eor	r14, r14
    5d2e:	ea 94       	dec	r14
    5d30:	fe 2c       	mov	r15, r14
    5d32:	10 e0       	ldi	r17, 0x00	; 0
    5d34:	00 e0       	ldi	r16, 0x00	; 0
    5d36:	29 2d       	mov	r18, r9
    5d38:	8c 81       	ldd	r24, Y+4	; 0x04
    5d3a:	9d 81       	ldd	r25, Y+5	; 0x05
    5d3c:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5075
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    5d40:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5081
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
    5d42:	f5 01       	movw	r30, r10
    5d44:	80 81       	ld	r24, Z
    5d46:	88 23       	and	r24, r24
    5d48:	b9 f1       	breq	.+110    	; 0x5db8 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5084
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    5d4a:	01 90       	ld	r0, Z+
    5d4c:	00 20       	and	r0, r0
    5d4e:	e9 f7       	brne	.-6      	; 0x5d4a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x130>
    5d50:	9f 01       	movw	r18, r30
    5d52:	21 50       	subi	r18, 0x01	; 1
    5d54:	31 09       	sbc	r19, r1
    5d56:	2a 19       	sub	r18, r10
    5d58:	3b 09       	sbc	r19, r11
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2601
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    5d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    5d5c:	88 0f       	add	r24, r24
    5d5e:	fb 81       	ldd	r31, Y+3	; 0x03
    5d60:	8f 0f       	add	r24, r31
    5d62:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5086
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    5d64:	a1 01       	movw	r20, r2
    5d66:	48 1b       	sub	r20, r24
    5d68:	51 09       	sbc	r21, r1
    5d6a:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5083
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    5d6c:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5086
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    5d6e:	70 e0       	ldi	r23, 0x00	; 0
    5d70:	0e 94 05 b4 	call	0x1680a	; 0x1680a <__udivmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5087
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    5d74:	51 e0       	ldi	r21, 0x01	; 1
    5d76:	65 1a       	sub	r6, r21
    5d78:	71 08       	sbc	r7, r1
    5d7a:	c6 0c       	add	r12, r6
    5d7c:	d7 1c       	adc	r13, r7
    5d7e:	ab 01       	movw	r20, r22
    5d80:	4c 0d       	add	r20, r12
    5d82:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2596
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5d84:	66 e0       	ldi	r22, 0x06	; 6
    5d86:	26 9f       	mul	r18, r22
    5d88:	90 01       	movw	r18, r0
    5d8a:	11 24       	eor	r1, r1
    5d8c:	f2 9f       	mul	r31, r18
    5d8e:	c0 01       	movw	r24, r0
    5d90:	f3 9f       	mul	r31, r19
    5d92:	90 0d       	add	r25, r0
    5d94:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5085
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    5d96:	69 81       	ldd	r22, Y+1	; 0x01
    5d98:	7a 81       	ldd	r23, Y+2	; 0x02
    5d9a:	68 1b       	sub	r22, r24
    5d9c:	79 0b       	sbc	r23, r25
    5d9e:	76 95       	lsr	r23
    5da0:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5087
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    5da2:	64 0d       	add	r22, r4
    5da4:	75 1d       	adc	r23, r5
    5da6:	ee 24       	eor	r14, r14
    5da8:	ea 94       	dec	r14
    5daa:	fe 2c       	mov	r15, r14
    5dac:	10 e0       	ldi	r17, 0x00	; 0
    5dae:	00 e0       	ldi	r16, 0x00	; 0
    5db0:	2f 2f       	mov	r18, r31
    5db2:	c5 01       	movw	r24, r10
    5db4:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5089
  }
}
    5db8:	0f 90       	pop	r0
    5dba:	0f 90       	pop	r0
    5dbc:	0f 90       	pop	r0
    5dbe:	0f 90       	pop	r0
    5dc0:	0f 90       	pop	r0
    5dc2:	df 91       	pop	r29
    5dc4:	cf 91       	pop	r28
    5dc6:	1f 91       	pop	r17
    5dc8:	0f 91       	pop	r16
    5dca:	ff 90       	pop	r15
    5dcc:	ef 90       	pop	r14
    5dce:	df 90       	pop	r13
    5dd0:	cf 90       	pop	r12
    5dd2:	bf 90       	pop	r11
    5dd4:	af 90       	pop	r10
    5dd6:	9f 90       	pop	r9
    5dd8:	8f 90       	pop	r8
    5dda:	7f 90       	pop	r7
    5ddc:	6f 90       	pop	r6
    5dde:	5f 90       	pop	r5
    5de0:	4f 90       	pop	r4
    5de2:	3f 90       	pop	r3
    5de4:	2f 90       	pop	r2
    5de6:	08 95       	ret

00005de8 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5008
///
/*
   dynamicke posouvani v menu
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    5de8:	4f 92       	push	r4
    5dea:	5f 92       	push	r5
    5dec:	6f 92       	push	r6
    5dee:	7f 92       	push	r7
    5df0:	8f 92       	push	r8
    5df2:	9f 92       	push	r9
    5df4:	af 92       	push	r10
    5df6:	bf 92       	push	r11
    5df8:	cf 92       	push	r12
    5dfa:	df 92       	push	r13
    5dfc:	ef 92       	push	r14
    5dfe:	ff 92       	push	r15
    5e00:	0f 93       	push	r16
    5e02:	cf 93       	push	r28
    5e04:	df 93       	push	r29
    5e06:	ec 01       	movw	r28, r24
    5e08:	6b 01       	movw	r12, r22
    5e0a:	2a 01       	movw	r4, r20
    5e0c:	59 01       	movw	r10, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5e0e:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xb>
    5e12:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_lcd+0xa>
    5e16:	f1 2c       	mov	r15, r1
    5e18:	e1 2c       	mov	r14, r1
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5012
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5e1a:	3b 01       	movw	r6, r22
    5e1c:	62 0e       	add	r6, r18
    5e1e:	73 1e       	adc	r7, r19
    5e20:	4c 01       	movw	r8, r24
    5e22:	84 0e       	add	r8, r20
    5e24:	95 1e       	adc	r9, r21
    5e26:	93 01       	movw	r18, r6
    5e28:	2e 19       	sub	r18, r14
    5e2a:	3f 09       	sbc	r19, r15
    5e2c:	a4 01       	movw	r20, r8
    5e2e:	4e 19       	sub	r20, r14
    5e30:	5f 09       	sbc	r21, r15
    5e32:	b7 01       	movw	r22, r14
    5e34:	6c 0d       	add	r22, r12
    5e36:	7d 1d       	adc	r23, r13
    5e38:	c7 01       	movw	r24, r14
    5e3a:	8c 0f       	add	r24, r28
    5e3c:	9d 1f       	adc	r25, r29
    5e3e:	0e 94 74 83 	call	0x106e8	; 0x106e8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    5e42:	8f ef       	ldi	r24, 0xFF	; 255
    5e44:	e8 1a       	sub	r14, r24
    5e46:	f8 0a       	sbc	r15, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5011
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5e48:	83 e0       	ldi	r24, 0x03	; 3
    5e4a:	e8 16       	cp	r14, r24
    5e4c:	f1 04       	cpc	r15, r1
    5e4e:	59 f7       	brne	.-42     	; 0x5e26 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x3e>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5e50:	8f ef       	ldi	r24, 0xFF	; 255
    5e52:	9f ef       	ldi	r25, 0xFF	; 255
    5e54:	90 93 c3 0d 	sts	0x0DC3, r25	; 0x800dc3 <my_lcd+0xb>
    5e58:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5014
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    5e5c:	83 e0       	ldi	r24, 0x03	; 3
    5e5e:	48 1a       	sub	r4, r24
    5e60:	51 08       	sbc	r5, r1
    5e62:	4c 0e       	add	r4, r28
    5e64:	5d 1e       	adc	r5, r29
    5e66:	23 96       	adiw	r28, 0x03	; 3
    5e68:	95 01       	movw	r18, r10
    5e6a:	23 50       	subi	r18, 0x03	; 3
    5e6c:	31 09       	sbc	r19, r1
    5e6e:	2c 0d       	add	r18, r12
    5e70:	3d 1d       	adc	r19, r13
    5e72:	b6 01       	movw	r22, r12
    5e74:	6d 5f       	subi	r22, 0xFD	; 253
    5e76:	7f 4f       	sbci	r23, 0xFF	; 255
    5e78:	a2 01       	movw	r20, r4
    5e7a:	ce 01       	movw	r24, r28
    5e7c:	0e 94 cd 83 	call	0x1079a	; 0x1079a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5015
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
    5e80:	60 91 b6 08 	lds	r22, 0x08B6	; 0x8008b6 <menu_slider_data_max>
    5e84:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <menu_slider_data_max_element>
    5e88:	68 1b       	sub	r22, r24
    5e8a:	77 0b       	sbc	r23, r23
    5e8c:	6f 5f       	subi	r22, 0xFF	; 255
    5e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e90:	c5 01       	movw	r24, r10
    5e92:	0e 94 05 b4 	call	0x1680a	; 0x1680a <__udivmodhi4>
    5e96:	e0 2f       	mov	r30, r16
    5e98:	f0 e0       	ldi	r31, 0x00	; 0
    5e9a:	e1 55       	subi	r30, 0x51	; 81
    5e9c:	f7 4f       	sbci	r31, 0xF7	; 247
    5e9e:	80 81       	ld	r24, Z
    5ea0:	86 9f       	mul	r24, r22
    5ea2:	60 2d       	mov	r22, r0
    5ea4:	11 24       	eor	r1, r1
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5ea6:	8a e9       	ldi	r24, 0x9A	; 154
    5ea8:	96 ed       	ldi	r25, 0xD6	; 214
    5eaa:	90 93 c3 0d 	sts	0x0DC3, r25	; 0x800dc3 <my_lcd+0xb>
    5eae:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5017
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    5eb2:	6c 0d       	add	r22, r12
    5eb4:	7d 2d       	mov	r23, r13
    5eb6:	71 1d       	adc	r23, r1
    5eb8:	9b 01       	movw	r18, r22
    5eba:	26 5f       	subi	r18, 0xF6	; 246
    5ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ebe:	6b 5f       	subi	r22, 0xFB	; 251
    5ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ec2:	a2 01       	movw	r20, r4
    5ec4:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5018
}
    5ec6:	df 91       	pop	r29
    5ec8:	cf 91       	pop	r28
    5eca:	0f 91       	pop	r16
    5ecc:	ff 90       	pop	r15
    5ece:	ef 90       	pop	r14
    5ed0:	df 90       	pop	r13
    5ed2:	cf 90       	pop	r12
    5ed4:	bf 90       	pop	r11
    5ed6:	af 90       	pop	r10
    5ed8:	9f 90       	pop	r9
    5eda:	8f 90       	pop	r8
    5edc:	7f 90       	pop	r7
    5ede:	6f 90       	pop	r6
    5ee0:	5f 90       	pop	r5
    5ee2:	4f 90       	pop	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5017
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    5ee4:	0c 94 cd 83 	jmp	0x1079a	; 0x1079a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>

00005ee8 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4987
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
}
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    5ee8:	6f 92       	push	r6
    5eea:	7f 92       	push	r7
    5eec:	8f 92       	push	r8
    5eee:	9f 92       	push	r9
    5ef0:	af 92       	push	r10
    5ef2:	bf 92       	push	r11
    5ef4:	cf 92       	push	r12
    5ef6:	df 92       	push	r13
    5ef8:	ef 92       	push	r14
    5efa:	ff 92       	push	r15
    5efc:	0f 93       	push	r16
    5efe:	1f 93       	push	r17
    5f00:	cf 93       	push	r28
    5f02:	df 93       	push	r29
    5f04:	6c 01       	movw	r12, r24
    5f06:	8b 01       	movw	r16, r22
    5f08:	3a 01       	movw	r6, r20
    5f0a:	e9 01       	movw	r28, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5f0c:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xb>
    5f10:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_lcd+0xa>
    5f14:	f1 2c       	mov	r15, r1
    5f16:	e1 2c       	mov	r14, r1
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4991
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5f18:	4b 01       	movw	r8, r22
    5f1a:	82 0e       	add	r8, r18
    5f1c:	93 1e       	adc	r9, r19
    5f1e:	5c 01       	movw	r10, r24
    5f20:	a4 0e       	add	r10, r20
    5f22:	b5 1e       	adc	r11, r21
    5f24:	94 01       	movw	r18, r8
    5f26:	2e 19       	sub	r18, r14
    5f28:	3f 09       	sbc	r19, r15
    5f2a:	a5 01       	movw	r20, r10
    5f2c:	4e 19       	sub	r20, r14
    5f2e:	5f 09       	sbc	r21, r15
    5f30:	b7 01       	movw	r22, r14
    5f32:	60 0f       	add	r22, r16
    5f34:	71 1f       	adc	r23, r17
    5f36:	c7 01       	movw	r24, r14
    5f38:	8c 0d       	add	r24, r12
    5f3a:	9d 1d       	adc	r25, r13
    5f3c:	0e 94 74 83 	call	0x106e8	; 0x106e8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    5f40:	2f ef       	ldi	r18, 0xFF	; 255
    5f42:	e2 1a       	sub	r14, r18
    5f44:	f2 0a       	sbc	r15, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4990
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5f46:	83 e0       	ldi	r24, 0x03	; 3
    5f48:	e8 16       	cp	r14, r24
    5f4a:	f1 04       	cpc	r15, r1
    5f4c:	59 f7       	brne	.-42     	; 0x5f24 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5f4e:	8f ef       	ldi	r24, 0xFF	; 255
    5f50:	9f ef       	ldi	r25, 0xFF	; 255
    5f52:	90 93 c3 0d 	sts	0x0DC3, r25	; 0x800dc3 <my_lcd+0xb>
    5f56:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4993
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    5f5a:	9e 01       	movw	r18, r28
    5f5c:	23 50       	subi	r18, 0x03	; 3
    5f5e:	31 09       	sbc	r19, r1
    5f60:	20 0f       	add	r18, r16
    5f62:	31 1f       	adc	r19, r17
    5f64:	a3 01       	movw	r20, r6
    5f66:	43 50       	subi	r20, 0x03	; 3
    5f68:	51 09       	sbc	r21, r1
    5f6a:	4c 0d       	add	r20, r12
    5f6c:	5d 1d       	adc	r21, r13
    5f6e:	b8 01       	movw	r22, r16
    5f70:	6d 5f       	subi	r22, 0xFD	; 253
    5f72:	7f 4f       	sbci	r23, 0xFF	; 255
    5f74:	c6 01       	movw	r24, r12
    5f76:	03 96       	adiw	r24, 0x03	; 3
    5f78:	0e 94 cd 83 	call	0x1079a	; 0x1079a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5f7c:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xb>
    5f80:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4996

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
    5f84:	8d ed       	ldi	r24, 0xDD	; 221
    5f86:	98 e0       	ldi	r25, 0x08	; 8
    5f88:	fc 01       	movw	r30, r24
    5f8a:	01 90       	ld	r0, Z+
    5f8c:	00 20       	and	r0, r0
    5f8e:	e9 f7       	brne	.-6      	; 0x5f8a <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xa2>
    5f90:	cf 01       	movw	r24, r30
    5f92:	8e 5d       	subi	r24, 0xDE	; 222
    5f94:	98 40       	sbci	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4998
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    5f96:	ae 01       	movw	r20, r28
    5f98:	4c 50       	subi	r20, 0x0C	; 12
    5f9a:	51 09       	sbc	r21, r1
    5f9c:	56 95       	lsr	r21
    5f9e:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4999
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    5fa0:	01 50       	subi	r16, 0x01	; 1
    5fa2:	11 09       	sbc	r17, r1
    5fa4:	40 0f       	add	r20, r16
    5fa6:	51 1f       	adc	r21, r17
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2596
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5fa8:	f6 e0       	ldi	r31, 0x06	; 6
    5faa:	8f 9f       	mul	r24, r31
    5fac:	c0 01       	movw	r24, r0
    5fae:	11 24       	eor	r1, r1
    5fb0:	88 0f       	add	r24, r24
    5fb2:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4997
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
  posx1 = (size_x - tmp1) / 2;
    5fb4:	b3 01       	movw	r22, r6
    5fb6:	68 1b       	sub	r22, r24
    5fb8:	79 0b       	sbc	r23, r25
    5fba:	76 95       	lsr	r23
    5fbc:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4999
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    5fbe:	6c 0d       	add	r22, r12
    5fc0:	7d 1d       	adc	r23, r13
    5fc2:	ee 24       	eor	r14, r14
    5fc4:	ea 94       	dec	r14
    5fc6:	fe 2c       	mov	r15, r14
    5fc8:	10 e0       	ldi	r17, 0x00	; 0
    5fca:	00 e0       	ldi	r16, 0x00	; 0
    5fcc:	22 e0       	ldi	r18, 0x02	; 2
    5fce:	8d ed       	ldi	r24, 0xDD	; 221
    5fd0:	98 e0       	ldi	r25, 0x08	; 8
    5fd2:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5000
}
    5fd6:	df 91       	pop	r29
    5fd8:	cf 91       	pop	r28
    5fda:	1f 91       	pop	r17
    5fdc:	0f 91       	pop	r16
    5fde:	ff 90       	pop	r15
    5fe0:	ef 90       	pop	r14
    5fe2:	df 90       	pop	r13
    5fe4:	cf 90       	pop	r12
    5fe6:	bf 90       	pop	r11
    5fe8:	af 90       	pop	r10
    5fea:	9f 90       	pop	r9
    5fec:	8f 90       	pop	r8
    5fee:	7f 90       	pop	r7
    5ff0:	6f 90       	pop	r6
    5ff2:	08 95       	ret

00005ff4 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4960
    show_string(str1, x + 5, y + 100 , 2, BLACK, WHITE, 0);
  }
}
////////////////////////////////////////////////////////
void display_element_dialog_set_variable(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    5ff4:	4f 92       	push	r4
    5ff6:	5f 92       	push	r5
    5ff8:	6f 92       	push	r6
    5ffa:	7f 92       	push	r7
    5ffc:	8f 92       	push	r8
    5ffe:	9f 92       	push	r9
    6000:	af 92       	push	r10
    6002:	bf 92       	push	r11
    6004:	cf 92       	push	r12
    6006:	df 92       	push	r13
    6008:	ef 92       	push	r14
    600a:	ff 92       	push	r15
    600c:	0f 93       	push	r16
    600e:	1f 93       	push	r17
    6010:	cf 93       	push	r28
    6012:	df 93       	push	r29
    6014:	cd b7       	in	r28, 0x3d	; 61
    6016:	de b7       	in	r29, 0x3e	; 62
    6018:	2d 97       	sbiw	r28, 0x0d	; 13
    601a:	0f b6       	in	r0, 0x3f	; 63
    601c:	f8 94       	cli
    601e:	de bf       	out	0x3e, r29	; 62
    6020:	0f be       	out	0x3f, r0	; 63
    6022:	cd bf       	out	0x3d, r28	; 61
    6024:	6c 01       	movw	r12, r24
    6026:	7b 01       	movw	r14, r22
    6028:	2a 01       	movw	r4, r20
    602a:	39 01       	movw	r6, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    602c:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xb>
    6030:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_lcd+0xa>
    6034:	10 e0       	ldi	r17, 0x00	; 0
    6036:	00 e0       	ldi	r16, 0x00	; 0
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4967
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    6038:	4b 01       	movw	r8, r22
    603a:	82 0e       	add	r8, r18
    603c:	93 1e       	adc	r9, r19
    603e:	5c 01       	movw	r10, r24
    6040:	a4 0e       	add	r10, r20
    6042:	b5 1e       	adc	r11, r21
    6044:	94 01       	movw	r18, r8
    6046:	20 1b       	sub	r18, r16
    6048:	31 0b       	sbc	r19, r17
    604a:	a5 01       	movw	r20, r10
    604c:	40 1b       	sub	r20, r16
    604e:	51 0b       	sbc	r21, r17
    6050:	b8 01       	movw	r22, r16
    6052:	6e 0d       	add	r22, r14
    6054:	7f 1d       	adc	r23, r15
    6056:	c8 01       	movw	r24, r16
    6058:	8c 0d       	add	r24, r12
    605a:	9d 1d       	adc	r25, r13
    605c:	0e 94 74 83 	call	0x106e8	; 0x106e8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    6060:	0f 5f       	subi	r16, 0xFF	; 255
    6062:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4966
  uint16_t tmp1, posx1, posy1;
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    6064:	03 30       	cpi	r16, 0x03	; 3
    6066:	11 05       	cpc	r17, r1
    6068:	69 f7       	brne	.-38     	; 0x6044 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x50>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    606a:	8f ef       	ldi	r24, 0xFF	; 255
    606c:	9f ef       	ldi	r25, 0xFF	; 255
    606e:	90 93 c3 0d 	sts	0x0DC3, r25	; 0x800dc3 <my_lcd+0xb>
    6072:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4969
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    6076:	93 01       	movw	r18, r6
    6078:	23 50       	subi	r18, 0x03	; 3
    607a:	31 09       	sbc	r19, r1
    607c:	2e 0d       	add	r18, r14
    607e:	3f 1d       	adc	r19, r15
    6080:	a2 01       	movw	r20, r4
    6082:	43 50       	subi	r20, 0x03	; 3
    6084:	51 09       	sbc	r21, r1
    6086:	4c 0d       	add	r20, r12
    6088:	5d 1d       	adc	r21, r13
    608a:	b7 01       	movw	r22, r14
    608c:	6d 5f       	subi	r22, 0xFD	; 253
    608e:	7f 4f       	sbci	r23, 0xFF	; 255
    6090:	c6 01       	movw	r24, r12
    6092:	03 96       	adiw	r24, 0x03	; 3
    6094:	0e 94 cd 83 	call	0x1079a	; 0x1079a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4971

  if (menu_dialog_set_divider != 0)
    6098:	00 91 ad 08 	lds	r16, 0x08AD	; 0x8008ad <menu_dialog_set_divider>
    609c:	10 91 ae 08 	lds	r17, 0x08AE	; 0x8008ae <menu_dialog_set_divider+0x1>
    60a0:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <menu_dialog_set_variable_now>
    60a4:	90 91 ac 08 	lds	r25, 0x08AC	; 0x8008ac <menu_dialog_set_variable_now+0x1>
    60a8:	9e 01       	movw	r18, r28
    60aa:	2f 5f       	subi	r18, 0xFF	; 255
    60ac:	3f 4f       	sbci	r19, 0xFF	; 255
    60ae:	59 01       	movw	r10, r18
    60b0:	01 15       	cp	r16, r1
    60b2:	11 05       	cpc	r17, r1
    60b4:	09 f4       	brne	.+2      	; 0x60b8 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc4>
    60b6:	5e c0       	rjmp	.+188    	; 0x6174 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x180>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4973
  {
    te = menu_dialog_set_variable_now / (menu_dialog_set_divider * 1.0);
    60b8:	bc 01       	movw	r22, r24
    60ba:	99 0f       	add	r25, r25
    60bc:	88 0b       	sbc	r24, r24
    60be:	99 0b       	sbc	r25, r25
    60c0:	0e 94 c2 b2 	call	0x16584	; 0x16584 <__floatsisf>
    60c4:	6a 87       	std	Y+10, r22	; 0x0a
    60c6:	7b 87       	std	Y+11, r23	; 0x0b
    60c8:	8c 87       	std	Y+12, r24	; 0x0c
    60ca:	9d 87       	std	Y+13, r25	; 0x0d
    60cc:	b8 01       	movw	r22, r16
    60ce:	90 e0       	ldi	r25, 0x00	; 0
    60d0:	80 e0       	ldi	r24, 0x00	; 0
    60d2:	0e 94 c0 b2 	call	0x16580	; 0x16580 <__floatunsisf>
    60d6:	9b 01       	movw	r18, r22
    60d8:	ac 01       	movw	r20, r24
    60da:	6a 85       	ldd	r22, Y+10	; 0x0a
    60dc:	7b 85       	ldd	r23, Y+11	; 0x0b
    60de:	8c 85       	ldd	r24, Y+12	; 0x0c
    60e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    60e2:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4974
    dtostrf(te, 4, 2, line1);
    60e6:	85 01       	movw	r16, r10
    60e8:	22 e0       	ldi	r18, 0x02	; 2
    60ea:	44 e0       	ldi	r20, 0x04	; 4
    60ec:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    60f0:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xb>
    60f4:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4980
  }
  else
    itoa(menu_dialog_set_variable_now, line1, 10);
  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
    60f8:	f5 01       	movw	r30, r10
    60fa:	01 90       	ld	r0, Z+
    60fc:	00 20       	and	r0, r0
    60fe:	e9 f7       	brne	.-6      	; 0x60fa <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x106>
    6100:	31 97       	sbiw	r30, 0x01	; 1
    6102:	ea 19       	sub	r30, r10
    6104:	fb 09       	sbc	r31, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4982
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    6106:	a3 01       	movw	r20, r6
    6108:	4c 50       	subi	r20, 0x0C	; 12
    610a:	51 09       	sbc	r21, r1
    610c:	56 95       	lsr	r21
    610e:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4983
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    6110:	31 e0       	ldi	r19, 0x01	; 1
    6112:	e3 1a       	sub	r14, r19
    6114:	f1 08       	sbc	r15, r1
    6116:	4e 0d       	add	r20, r14
    6118:	5f 1d       	adc	r21, r15
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2596
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    611a:	86 e0       	ldi	r24, 0x06	; 6
    611c:	e8 9f       	mul	r30, r24
    611e:	f0 01       	movw	r30, r0
    6120:	11 24       	eor	r1, r1
    6122:	ee 0f       	add	r30, r30
    6124:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4981
  else
    itoa(menu_dialog_set_variable_now, line1, 10);
  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
  posx1 = (size_x - tmp1) / 2;
    6126:	b2 01       	movw	r22, r4
    6128:	6e 1b       	sub	r22, r30
    612a:	7f 0b       	sbc	r23, r31
    612c:	76 95       	lsr	r23
    612e:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4983
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    6130:	6c 0d       	add	r22, r12
    6132:	7d 1d       	adc	r23, r13
    6134:	ee 24       	eor	r14, r14
    6136:	ea 94       	dec	r14
    6138:	fe 2c       	mov	r15, r14
    613a:	10 e0       	ldi	r17, 0x00	; 0
    613c:	00 e0       	ldi	r16, 0x00	; 0
    613e:	22 e0       	ldi	r18, 0x02	; 2
    6140:	c5 01       	movw	r24, r10
    6142:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4984
}
    6146:	2d 96       	adiw	r28, 0x0d	; 13
    6148:	0f b6       	in	r0, 0x3f	; 63
    614a:	f8 94       	cli
    614c:	de bf       	out	0x3e, r29	; 62
    614e:	0f be       	out	0x3f, r0	; 63
    6150:	cd bf       	out	0x3d, r28	; 61
    6152:	df 91       	pop	r29
    6154:	cf 91       	pop	r28
    6156:	1f 91       	pop	r17
    6158:	0f 91       	pop	r16
    615a:	ff 90       	pop	r15
    615c:	ef 90       	pop	r14
    615e:	df 90       	pop	r13
    6160:	cf 90       	pop	r12
    6162:	bf 90       	pop	r11
    6164:	af 90       	pop	r10
    6166:	9f 90       	pop	r9
    6168:	8f 90       	pop	r8
    616a:	7f 90       	pop	r7
    616c:	6f 90       	pop	r6
    616e:	5f 90       	pop	r5
    6170:	4f 90       	pop	r4
    6172:	08 95       	ret
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    6174:	4a e0       	ldi	r20, 0x0A	; 10
    6176:	b9 01       	movw	r22, r18
    6178:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
    617c:	b9 cf       	rjmp	.-142    	; 0x60f0 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xfc>

0000617e <display_element_default_ring_set_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z37display_element_default_ring_set_tempjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4787
  }
  show_string(default_text, x, y, 2, BLACK, WHITE, 0);
}
////
void display_element_default_ring_set_temp(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    617e:	ef 92       	push	r14
    6180:	0f 93       	push	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4788
  display_element_dialog_set_variable(x, y, size_x, size_y, args1, args2);
    6182:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4789
}
    6186:	0f 91       	pop	r16
    6188:	ef 90       	pop	r14
    618a:	08 95       	ret

0000618c <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4844
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    618c:	af 92       	push	r10
    618e:	bf 92       	push	r11
    6190:	cf 92       	push	r12
    6192:	df 92       	push	r13
    6194:	ef 92       	push	r14
    6196:	ff 92       	push	r15
    6198:	0f 93       	push	r16
    619a:	1f 93       	push	r17
    619c:	cf 93       	push	r28
    619e:	df 93       	push	r29
    61a0:	cd b7       	in	r28, 0x3d	; 61
    61a2:	de b7       	in	r29, 0x3e	; 62
    61a4:	60 97       	sbiw	r28, 0x10	; 16
    61a6:	0f b6       	in	r0, 0x3f	; 63
    61a8:	f8 94       	cli
    61aa:	de bf       	out	0x3e, r29	; 62
    61ac:	0f be       	out	0x3f, r0	; 63
    61ae:	cd bf       	out	0x3d, r28	; 61
    61b0:	5c 01       	movw	r10, r24
    61b2:	8b 01       	movw	r16, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3956
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    61b4:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <selftest_data>
    61b8:	9e 01       	movw	r18, r28
    61ba:	2f 5f       	subi	r18, 0xFF	; 255
    61bc:	3f 4f       	sbci	r19, 0xFF	; 255
    61be:	69 01       	movw	r12, r18
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4846
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  char str1[16];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    61c0:	80 fd       	sbrc	r24, 0
    61c2:	4e c0       	rjmp	.+156    	; 0x6260 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xd4>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    DateTime (uint16_t year, uint8_t month, uint8_t day, 
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    61c4:	80 91 48 10 	lds	r24, 0x1048	; 0x801048 <now>
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	80 53       	subi	r24, 0x30	; 48
    61cc:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4848
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
    61ce:	9f 93       	push	r25
    61d0:	8f 93       	push	r24
    61d2:	80 91 49 10 	lds	r24, 0x1049	; 0x801049 <now+0x1>
    61d6:	1f 92       	push	r1
    61d8:	8f 93       	push	r24
    61da:	80 91 4a 10 	lds	r24, 0x104A	; 0x80104a <now+0x2>
    61de:	1f 92       	push	r1
    61e0:	8f 93       	push	r24
    61e2:	88 e3       	ldi	r24, 0x38	; 56
    61e4:	93 e0       	ldi	r25, 0x03	; 3
    61e6:	9f 93       	push	r25
    61e8:	8f 93       	push	r24
    61ea:	3f 93       	push	r19
    61ec:	2f 93       	push	r18
    61ee:	0e 94 27 b7 	call	0x16e4e	; 0x16e4e <sprintf>
    61f2:	0f b6       	in	r0, 0x3f	; 63
    61f4:	f8 94       	cli
    61f6:	de bf       	out	0x3e, r29	; 62
    61f8:	0f be       	out	0x3f, r0	; 63
    61fa:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    61fc:	8f ef       	ldi	r24, 0xFF	; 255
    61fe:	9f ef       	ldi	r25, 0xFF	; 255
    6200:	90 93 c3 0d 	sts	0x0DC3, r25	; 0x800dc3 <my_lcd+0xb>
    6204:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <my_lcd+0xa>
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4854
  }
  else
  {
    strcpy(str1, "--.--.----");
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
    6208:	4e e8       	ldi	r20, 0x8E	; 142
    620a:	50 e0       	ldi	r21, 0x00	; 0
    620c:	b8 01       	movw	r22, r16
    620e:	c5 01       	movw	r24, r10
    6210:	0e 94 5e 83 	call	0x106bc	; 0x106bc <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    6214:	b8 01       	movw	r22, r16
    6216:	6f 5f       	subi	r22, 0xFF	; 255
    6218:	7f 4f       	sbci	r23, 0xFF	; 255
    621a:	4e e8       	ldi	r20, 0x8E	; 142
    621c:	50 e0       	ldi	r21, 0x00	; 0
    621e:	c5 01       	movw	r24, r10
    6220:	0e 94 5e 83 	call	0x106bc	; 0x106bc <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    6224:	a8 01       	movw	r20, r16
    6226:	4e 5f       	subi	r20, 0xFE	; 254
    6228:	5f 4f       	sbci	r21, 0xFF	; 255
    622a:	ee 24       	eor	r14, r14
    622c:	ea 94       	dec	r14
    622e:	fe 2c       	mov	r15, r14
    6230:	10 e0       	ldi	r17, 0x00	; 0
    6232:	00 e0       	ldi	r16, 0x00	; 0
    6234:	23 e0       	ldi	r18, 0x03	; 3
    6236:	b5 01       	movw	r22, r10
    6238:	c6 01       	movw	r24, r12
    623a:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4855
}
    623e:	60 96       	adiw	r28, 0x10	; 16
    6240:	0f b6       	in	r0, 0x3f	; 63
    6242:	f8 94       	cli
    6244:	de bf       	out	0x3e, r29	; 62
    6246:	0f be       	out	0x3f, r0	; 63
    6248:	cd bf       	out	0x3d, r28	; 61
    624a:	df 91       	pop	r29
    624c:	cf 91       	pop	r28
    624e:	1f 91       	pop	r17
    6250:	0f 91       	pop	r16
    6252:	ff 90       	pop	r15
    6254:	ef 90       	pop	r14
    6256:	df 90       	pop	r13
    6258:	cf 90       	pop	r12
    625a:	bf 90       	pop	r11
    625c:	af 90       	pop	r10
    625e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4852
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
  }
  else
  {
    strcpy(str1, "--.--.----");
    6260:	67 e4       	ldi	r22, 0x47	; 71
    6262:	73 e0       	ldi	r23, 0x03	; 3
    6264:	c9 01       	movw	r24, r18
    6266:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
    626a:	c8 cf       	rjmp	.-112    	; 0x61fc <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>

0000626c <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2136



/////////////////////////////////////////////////////////////////////////////////////////////
void MenuPrepareStyle(void)
{
    626c:	4f 92       	push	r4
    626e:	5f 92       	push	r5
    6270:	6f 92       	push	r6
    6272:	7f 92       	push	r7
    6274:	8f 92       	push	r8
    6276:	9f 92       	push	r9
    6278:	af 92       	push	r10
    627a:	bf 92       	push	r11
    627c:	cf 92       	push	r12
    627e:	df 92       	push	r13
    6280:	ef 92       	push	r14
    6282:	ff 92       	push	r15
    6284:	0f 93       	push	r16
    6286:	1f 93       	push	r17
    6288:	cf 93       	push	r28
    628a:	df 93       	push	r29
    628c:	1f 92       	push	r1
    628e:	cd b7       	in	r28, 0x3d	; 61
    6290:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2147
  uint16_t color_background;
  uint8_t args1;
  Menu1 *current;
  ret_fptr *rfnt;

  current = MenuHistoryGetMenu(&args1);
    6292:	ce 01       	movw	r24, r28
    6294:	01 96       	adiw	r24, 0x01	; 1
    6296:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <MenuHistoryGetMenu(unsigned char*)>
    629a:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2148
  attr = pgm_read_byte(&current->atributes);
    629c:	fc 01       	movw	r30, r24
    629e:	ea 5a       	subi	r30, 0xAA	; 170
    62a0:	fd 4f       	sbci	r31, 0xFD	; 253
    62a2:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2149
  x = pgm_read_word(&current->x);
    62a4:	38 97       	sbiw	r30, 0x08	; 8
    62a6:	c5 90       	lpm	r12, Z+
    62a8:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2150
  y = pgm_read_word(&current->y);
    62aa:	fc 01       	movw	r30, r24
    62ac:	e0 5b       	subi	r30, 0xB0	; 176
    62ae:	fd 4f       	sbci	r31, 0xFD	; 253
    62b0:	e5 90       	lpm	r14, Z+
    62b2:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2151
  size_x = pgm_read_word(&current->size_x);
    62b4:	fc 01       	movw	r30, r24
    62b6:	ee 5a       	subi	r30, 0xAE	; 174
    62b8:	fd 4f       	sbci	r31, 0xFD	; 253
    62ba:	a5 90       	lpm	r10, Z+
    62bc:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2152
  size_y = pgm_read_word(&current->size_y);
    62be:	fc 01       	movw	r30, r24
    62c0:	ec 5a       	subi	r30, 0xAC	; 172
    62c2:	fd 4f       	sbci	r31, 0xFD	; 253
    62c4:	65 90       	lpm	r6, Z+
    62c6:	74 90       	lpm	r7, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2153
  color_background = pgm_read_word(&current->color_background);
    62c8:	fc 01       	movw	r30, r24
    62ca:	e9 5a       	subi	r30, 0xA9	; 169
    62cc:	fd 4f       	sbci	r31, 0xFD	; 253
    62ce:	85 90       	lpm	r8, Z+
    62d0:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2155

  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
    62d2:	50 fe       	sbrs	r5, 0
    62d4:	03 c0       	rjmp	.+6      	; 0x62dc <MenuPrepareStyle()+0x70>
DisplayClean():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2250

}
///////////////////////////////////////////////////////////////////////////////////
void DisplayClean(uint16_t color)
{
  my_lcd.Fill_Screen(color);
    62d6:	c4 01       	movw	r24, r8
    62d8:	0e 94 37 84 	call	0x1086e	; 0x1086e <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2160
  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
  {
    DisplayClean(color_background);
  }

  if ((attr & (1 << MENU_ATTRIBUTES_FILL_COLOR_RECTANGLE)) != 0)
    62dc:	51 fe       	sbrs	r5, 1
    62de:	0e c0       	rjmp	.+28     	; 0x62fc <MenuPrepareStyle()+0x90>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    62e0:	90 92 c3 0d 	sts	0x0DC3, r9	; 0x800dc3 <my_lcd+0xb>
    62e4:	80 92 c2 0d 	sts	0x0DC2, r8	; 0x800dc2 <my_lcd+0xa>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2163
  {
    my_lcd.Set_Draw_color(color_background);
    my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
    62e8:	97 01       	movw	r18, r14
    62ea:	26 0d       	add	r18, r6
    62ec:	37 1d       	adc	r19, r7
    62ee:	a6 01       	movw	r20, r12
    62f0:	4a 0d       	add	r20, r10
    62f2:	5b 1d       	adc	r21, r11
    62f4:	b7 01       	movw	r22, r14
    62f6:	c6 01       	movw	r24, r12
    62f8:	0e 94 cd 83 	call	0x1079a	; 0x1079a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2166
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
    62fc:	52 fe       	sbrs	r5, 2
    62fe:	2a c0       	rjmp	.+84     	; 0x6354 <MenuPrepareStyle()+0xe8>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6300:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xb>
    6304:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_lcd+0xa>
    6308:	91 2c       	mov	r9, r1
    630a:	81 2c       	mov	r8, r1
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2171
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
    630c:	6e 0c       	add	r6, r14
    630e:	7f 1c       	adc	r7, r15
    6310:	26 01       	movw	r4, r12
    6312:	4a 0c       	add	r4, r10
    6314:	5b 1c       	adc	r5, r11
    6316:	93 01       	movw	r18, r6
    6318:	28 19       	sub	r18, r8
    631a:	39 09       	sbc	r19, r9
    631c:	a2 01       	movw	r20, r4
    631e:	48 19       	sub	r20, r8
    6320:	59 09       	sbc	r21, r9
    6322:	b7 01       	movw	r22, r14
    6324:	c6 01       	movw	r24, r12
    6326:	88 0d       	add	r24, r8
    6328:	99 1d       	adc	r25, r9
    632a:	0e 94 74 83 	call	0x106e8	; 0x106e8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2172
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    632e:	a5 01       	movw	r20, r10
    6330:	48 19       	sub	r20, r8
    6332:	59 09       	sbc	r21, r9
    6334:	b7 01       	movw	r22, r14
    6336:	69 5e       	subi	r22, 0xE9	; 233
    6338:	7f 4f       	sbci	r23, 0xFF	; 255
    633a:	c6 01       	movw	r24, r12
    633c:	0e 94 5e 83 	call	0x106bc	; 0x106bc <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    6340:	8f ef       	ldi	r24, 0xFF	; 255
    6342:	88 1a       	sub	r8, r24
    6344:	98 0a       	sbc	r9, r24
    6346:	ef ef       	ldi	r30, 0xFF	; 255
    6348:	ee 1a       	sub	r14, r30
    634a:	fe 0a       	sbc	r15, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2169
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    634c:	f4 e0       	ldi	r31, 0x04	; 4
    634e:	8f 16       	cp	r8, r31
    6350:	91 04       	cpc	r9, r1
    6352:	09 f7       	brne	.-62     	; 0x6316 <MenuPrepareStyle()+0xaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2175
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    }
  }
  rfnt =  pgm_read_word(&current->preload_function);
    6354:	f8 01       	movw	r30, r16
    6356:	e0 5a       	subi	r30, 0xA0	; 160
    6358:	fd 4f       	sbci	r31, 0xFD	; 253
    635a:	25 91       	lpm	r18, Z+
    635c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2176
  (ret_fptr(rfnt))(pgm_read_byte(&current->idx), 0, 0);
    635e:	f8 01       	movw	r30, r16
    6360:	e3 5b       	subi	r30, 0xB3	; 179
    6362:	fd 4f       	sbci	r31, 0xFD	; 253
    6364:	e4 91       	lpm	r30, Z
    6366:	40 e0       	ldi	r20, 0x00	; 0
    6368:	70 e0       	ldi	r23, 0x00	; 0
    636a:	60 e0       	ldi	r22, 0x00	; 0
    636c:	8e 2f       	mov	r24, r30
    636e:	90 e0       	ldi	r25, 0x00	; 0
    6370:	f9 01       	movw	r30, r18
    6372:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2178

}
    6374:	0f 90       	pop	r0
    6376:	df 91       	pop	r29
    6378:	cf 91       	pop	r28
    637a:	1f 91       	pop	r17
    637c:	0f 91       	pop	r16
    637e:	ff 90       	pop	r15
    6380:	ef 90       	pop	r14
    6382:	df 90       	pop	r13
    6384:	cf 90       	pop	r12
    6386:	bf 90       	pop	r11
    6388:	af 90       	pop	r10
    638a:	9f 90       	pop	r9
    638c:	8f 90       	pop	r8
    638e:	7f 90       	pop	r7
    6390:	6f 90       	pop	r6
    6392:	5f 90       	pop	r5
    6394:	4f 90       	pop	r4
    6396:	08 95       	ret

00006398 <MenuHistoryNextMenu(unsigned char, unsigned char)>:
_Z19MenuHistoryNextMenuhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2199
  }
}
///
void MenuHistoryNextMenu(uint8_t id, uint8_t args1)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
    6398:	20 91 6e 08 	lds	r18, 0x086E	; 0x80086e <MenuHistoryIndex>
    639c:	2a 30       	cpi	r18, 0x0A	; 10
    639e:	70 f4       	brcc	.+28     	; 0x63bc <MenuHistoryNextMenu(unsigned char, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2201
  {
    MenuHistoryIndex++;
    63a0:	2f 5f       	subi	r18, 0xFF	; 255
    63a2:	20 93 6e 08 	sts	0x086E, r18	; 0x80086e <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2202
    MenuHistory[MenuHistoryIndex] = id;
    63a6:	30 e0       	ldi	r19, 0x00	; 0
    63a8:	f9 01       	movw	r30, r18
    63aa:	ec 59       	subi	r30, 0x9C	; 156
    63ac:	f7 4f       	sbci	r31, 0xF7	; 247
    63ae:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2203
    Global_menu_args1[MenuHistoryIndex] = args1;
    63b0:	2e 5a       	subi	r18, 0xAE	; 174
    63b2:	37 4f       	sbci	r19, 0xF7	; 247
    63b4:	f9 01       	movw	r30, r18
    63b6:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2204
    MenuPrepareStyle();
    63b8:	0c 94 36 31 	jmp	0x626c	; 0x626c <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2206
  }
}
    63bc:	08 95       	ret

000063be <click_thermostat_set_mode_via_dialog(unsigned char, unsigned char, unsigned char)>:
_Z36click_thermostat_set_mode_via_dialoghhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5633


/////
void click_thermostat_set_mode_via_dialog(uint8_t args1, uint8_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SELECT_TERM_MODE, default_ring);
    63be:	60 91 0c 0a 	lds	r22, 0x0A0C	; 0x800a0c <default_ring>
    63c2:	88 e6       	ldi	r24, 0x68	; 104
    63c4:	0c 94 cc 31 	jmp	0x6398	; 0x6398 <MenuHistoryNextMenu(unsigned char, unsigned char)>

000063c8 <click_thermostat_set_ring_via_dialog(unsigned char, unsigned char, unsigned char)>:
_Z36click_thermostat_set_ring_via_dialoghhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5617

/////
/////
void click_thermostat_set_ring_via_dialog(uint8_t args1, uint8_t args2, uint8_t args3)
{
MenuHistoryNextMenu(MENU_NASTAVENI_SELECT_RING_SCREEN, default_ring);
    63c8:	60 91 0c 0a 	lds	r22, 0x0A0C	; 0x800a0c <default_ring>
    63cc:	8a e0       	ldi	r24, 0x0A	; 10
    63ce:	0c 94 cc 31 	jmp	0x6398	; 0x6398 <MenuHistoryNextMenu(unsigned char, unsigned char)>

000063d2 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5292
    if (w_rom[cnt].used == 1) active++;
  return active;
}
/// funkce. ktera
void click_tds_associate_or_setting_onewire(uint8_t args1, uint8_t args2, uint8_t idx)
{
    63d2:	cf 93       	push	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5294
  //printf("%d %d\n", args1, idx);
  if (w_rom[idx].tds_idx == 255)
    63d4:	8b e0       	ldi	r24, 0x0B	; 11
    63d6:	48 9f       	mul	r20, r24
    63d8:	f0 01       	movw	r30, r0
    63da:	11 24       	eor	r1, r1
    63dc:	e3 54       	subi	r30, 0x43	; 67
    63de:	f6 4f       	sbci	r31, 0xF6	; 246
    63e0:	62 85       	ldd	r22, Z+10	; 0x0a
    63e2:	6f 3f       	cpi	r22, 0xFF	; 255
    63e4:	a1 f4       	brne	.+40     	; 0x640e <click_tds_associate_or_setting_onewire(unsigned char, unsigned char, unsigned char)+0x3c>
    63e6:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5296
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    63e8:	60 e0       	ldi	r22, 0x00	; 0
    63ea:	84 e6       	ldi	r24, 0x64	; 100
    63ec:	0e 94 cc 31 	call	0x6398	; 0x6398 <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5297
    dialog_yes_function = &tds_associate;
    63f0:	8c e0       	ldi	r24, 0x0C	; 12
    63f2:	96 e5       	ldi	r25, 0x56	; 86
    63f4:	90 93 d9 08 	sts	0x08D9, r25	; 0x8008d9 <dialog_yes_function+0x1>
    63f8:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5298
    dialog_yes_args1 = idx;
    63fc:	c0 93 d7 08 	sts	0x08D7, r28	; 0x8008d7 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5299
    strcpy_P(dialog_text, text_associovat_tds);
    6400:	6f e9       	ldi	r22, 0x9F	; 159
    6402:	74 e3       	ldi	r23, 0x34	; 52
    6404:	87 eb       	ldi	r24, 0xB7	; 183
    6406:	98 e0       	ldi	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5305
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
  }
}
    6408:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5299
  if (w_rom[idx].tds_idx == 255)
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    dialog_yes_function = &tds_associate;
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
    640a:	0c 94 3e aa 	jmp	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5303
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
    640e:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5305
  }
}
    6410:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5303
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
    6412:	0c 94 cc 31 	jmp	0x6398	; 0x6398 <MenuHistoryNextMenu(unsigned char, unsigned char)>

00006416 <MenuHistoryPrevMenu()>:
_Z19MenuHistoryPrevMenuv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2189

/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(void)
{

  if (MenuHistoryIndex > 0)
    6416:	80 91 6e 08 	lds	r24, 0x086E	; 0x80086e <MenuHistoryIndex>
    641a:	88 23       	and	r24, r24
    641c:	29 f0       	breq	.+10     	; 0x6428 <MenuHistoryPrevMenu()+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2191
  {
    MenuHistoryIndex--;
    641e:	81 50       	subi	r24, 0x01	; 1
    6420:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2192
    MenuPrepareStyle();
    6424:	0c 94 36 31 	jmp	0x626c	; 0x626c <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2195

  }
}
    6428:	08 95       	ret

0000642a <dialog_set_variable_button_click(unsigned char, unsigned char)>:
_Z32dialog_set_variable_button_clickhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2521
  MenuHistoryPrevMenu();
}

void dialog_set_variable_button_click(uint8_t args1, uint8_t args2)
{
  dialog_save_variable_function(args1, args2, 0);
    642a:	70 e0       	ldi	r23, 0x00	; 0
    642c:	e0 91 db 08 	lds	r30, 0x08DB	; 0x8008db <dialog_save_variable_function>
    6430:	f0 91 dc 08 	lds	r31, 0x08DC	; 0x8008dc <dialog_save_variable_function+0x1>
    6434:	40 e0       	ldi	r20, 0x00	; 0
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2522
  MenuHistoryPrevMenu();
    643a:	0c 94 0b 32 	jmp	0x6416	; 0x6416 <MenuHistoryPrevMenu()>

0000643e <click_dialog_button_yes(unsigned char, unsigned char)>:
_Z23click_dialog_button_yeshh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2515
   args1 - jsou data z definice funkce
   args2 - jsou globalni data z definice menu
*/
void click_dialog_button_yes(uint8_t args1, uint8_t args2)
{
  dialog_yes_function(dialog_yes_args1, 0, 0);
    643e:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <dialog_yes_args1>
    6442:	e0 91 d8 08 	lds	r30, 0x08D8	; 0x8008d8 <dialog_yes_function>
    6446:	f0 91 d9 08 	lds	r31, 0x08D9	; 0x8008d9 <dialog_yes_function+0x1>
    644a:	40 e0       	ldi	r20, 0x00	; 0
    644c:	70 e0       	ldi	r23, 0x00	; 0
    644e:	60 e0       	ldi	r22, 0x00	; 0
    6450:	90 e0       	ldi	r25, 0x00	; 0
    6452:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2516
  MenuHistoryPrevMenu();
    6454:	0c 94 0b 32 	jmp	0x6416	; 0x6416 <MenuHistoryPrevMenu()>

00006458 <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
    6458:	cf 93       	push	r28
    645a:	c8 2f       	mov	r28, r24
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    645c:	68 2f       	mov	r22, r24
    645e:	8b e6       	ldi	r24, 0x6B	; 107
    6460:	9b e0       	ldi	r25, 0x0B	; 11
    6462:	0e 94 e7 7e 	call	0xfdce	; 0xfdce <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
    6466:	8c 2f       	mov	r24, r28
    6468:	cc 0f       	add	r28, r28
    646a:	99 0b       	sbc	r25, r25
    646c:	cf 91       	pop	r28
    646e:	08 95       	ret

00006470 <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:347
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    6470:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
    uint8_t cntl_byte = (_s<<5)+0x08;
    6472:	82 95       	swap	r24
    6474:	88 0f       	add	r24, r24
    6476:	80 7e       	andi	r24, 0xE0	; 224
    6478:	68 e0       	ldi	r22, 0x08	; 8
    647a:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
    647c:	c9 01       	movw	r24, r18
    647e:	0c 94 43 97 	jmp	0x12e86	; 0x12e86 <W5500Class::read(unsigned int, unsigned char)>

00006482 <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    6482:	8f 92       	push	r8
    6484:	9f 92       	push	r9
    6486:	af 92       	push	r10
    6488:	bf 92       	push	r11
    648a:	cf 92       	push	r12
    648c:	df 92       	push	r13
    648e:	ef 92       	push	r14
    6490:	ff 92       	push	r15
    6492:	0f 93       	push	r16
    6494:	1f 93       	push	r17
    6496:	cf 93       	push	r28
    6498:	6c 01       	movw	r12, r24
    649a:	5b 01       	movw	r10, r22
    649c:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
    649e:	fc 01       	movw	r30, r24
    64a0:	c4 85       	ldd	r28, Z+12	; 0x0c
    64a2:	c8 30       	cpi	r28, 0x08	; 8
    64a4:	a1 f4       	brne	.+40     	; 0x64ce <EthernetClient::write(unsigned char const*, unsigned int)+0x4c>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    64a6:	81 e0       	ldi	r24, 0x01	; 1
    64a8:	90 e0       	ldi	r25, 0x00	; 0
    64aa:	f6 01       	movw	r30, r12
    64ac:	93 83       	std	Z+3, r25	; 0x03
    64ae:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
    64b0:	f1 2c       	mov	r15, r1
    64b2:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
    64b4:	c7 01       	movw	r24, r14
    64b6:	cf 91       	pop	r28
    64b8:	1f 91       	pop	r17
    64ba:	0f 91       	pop	r16
    64bc:	ff 90       	pop	r15
    64be:	ef 90       	pop	r14
    64c0:	df 90       	pop	r13
    64c2:	cf 90       	pop	r12
    64c4:	bf 90       	pop	r11
    64c6:	af 90       	pop	r10
    64c8:	9f 90       	pop	r9
    64ca:	8f 90       	pop	r8
    64cc:	08 95       	ret
    64ce:	8a 01       	movw	r16, r20
    64d0:	41 30       	cpi	r20, 0x01	; 1
    64d2:	58 40       	sbci	r21, 0x08	; 8
    64d4:	10 f0       	brcs	.+4      	; 0x64da <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
    64d6:	00 e0       	ldi	r16, 0x00	; 0
    64d8:	18 e0       	ldi	r17, 0x08	; 8
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:116
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = w5500.getTXFreeSize(s);
    64da:	8c 2f       	mov	r24, r28
    64dc:	0e 94 d4 88 	call	0x111a8	; 0x111a8 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
    64e0:	4c 01       	movw	r8, r24
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    64e2:	63 e0       	ldi	r22, 0x03	; 3
    64e4:	70 e0       	ldi	r23, 0x00	; 0
    64e6:	8c 2f       	mov	r24, r28
    64e8:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:118
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    64ec:	87 31       	cpi	r24, 0x17	; 23
    64ee:	11 f0       	breq	.+4      	; 0x64f4 <EthernetClient::write(unsigned char const*, unsigned int)+0x72>
    64f0:	8c 31       	cpi	r24, 0x1C	; 28
    64f2:	09 f5       	brne	.+66     	; 0x6536 <EthernetClient::write(unsigned char const*, unsigned int)+0xb4>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:124
    {
      ret = 0; 
      break;
    }
  } 
  while (freesize < ret);
    64f4:	80 16       	cp	r8, r16
    64f6:	91 06       	cpc	r9, r17
    64f8:	80 f3       	brcs	.-32     	; 0x64da <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
send_data_processing():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:70
}

void W5500Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    64fa:	98 01       	movw	r18, r16
    64fc:	a5 01       	movw	r20, r10
    64fe:	70 e0       	ldi	r23, 0x00	; 0
    6500:	60 e0       	ldi	r22, 0x00	; 0
    6502:	8c 2f       	mov	r24, r28
    6504:	0e 94 1f 98 	call	0x1303e	; 0x1303e <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:128

  // copy data
  w5500.send_data_processing(s, (uint8_t *)buf, ret);
  w5500.execCmdSn(s, Sock_SEND);
    6508:	60 e2       	ldi	r22, 0x20	; 32
    650a:	70 e0       	ldi	r23, 0x00	; 0
    650c:	8c 2f       	mov	r24, r28
    650e:	0e 94 91 98 	call	0x13122	; 0x13122 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    6512:	62 e0       	ldi	r22, 0x02	; 2
    6514:	70 e0       	ldi	r23, 0x00	; 0
    6516:	8c 2f       	mov	r24, r28
    6518:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:131

  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    651c:	84 fd       	sbrc	r24, 4
    651e:	0e c0       	rjmp	.+28     	; 0x653c <EthernetClient::write(unsigned char const*, unsigned int)+0xba>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    6520:	63 e0       	ldi	r22, 0x03	; 3
    6522:	70 e0       	ldi	r23, 0x00	; 0
    6524:	8c 2f       	mov	r24, r28
    6526:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:134
  {
    /* m2008.01 [bj] : reduce code */
    if ( w5500.readSnSR(s) == SnSR::CLOSED )
    652a:	81 11       	cpse	r24, r1
    652c:	f2 cf       	rjmp	.-28     	; 0x6512 <EthernetClient::write(unsigned char const*, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:136
    {
      close(s);
    652e:	8c 2f       	mov	r24, r28
    6530:	0e 94 f9 99 	call	0x133f2	; 0x133f2 <close(unsigned char)>
    6534:	b8 cf       	rjmp	.-144    	; 0x64a6 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:120
  {
    freesize = w5500.getTXFreeSize(s);
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
    6536:	10 e0       	ldi	r17, 0x00	; 0
    6538:	00 e0       	ldi	r16, 0x00	; 0
    653a:	df cf       	rjmp	.-66     	; 0x64fa <EthernetClient::write(unsigned char const*, unsigned int)+0x78>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    653c:	40 e1       	ldi	r20, 0x10	; 16
    653e:	62 e0       	ldi	r22, 0x02	; 2
    6540:	70 e0       	ldi	r23, 0x00	; 0
    6542:	8c 2f       	mov	r24, r28
    6544:	0e 94 16 98 	call	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
    6548:	01 2b       	or	r16, r17
    654a:	09 f0       	breq	.+2      	; 0x654e <EthernetClient::write(unsigned char const*, unsigned int)+0xcc>
    654c:	b3 cf       	rjmp	.-154    	; 0x64b4 <EthernetClient::write(unsigned char const*, unsigned int)+0x32>
    654e:	ab cf       	rjmp	.-170    	; 0x64a6 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>

00006550 <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    6550:	df 92       	push	r13
    6552:	ef 92       	push	r14
    6554:	ff 92       	push	r15
    6556:	0f 93       	push	r16
    6558:	1f 93       	push	r17
    655a:	cf 93       	push	r28
    655c:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
    655e:	fc 01       	movw	r30, r24
    6560:	24 85       	ldd	r18, Z+12	; 0x0c
    6562:	28 30       	cpi	r18, 0x08	; 8
    6564:	51 f0       	breq	.+20     	; 0x657a <EthernetClient::connect(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
    6566:	90 e0       	ldi	r25, 0x00	; 0
    6568:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
    656a:	df 91       	pop	r29
    656c:	cf 91       	pop	r28
    656e:	1f 91       	pop	r17
    6570:	0f 91       	pop	r16
    6572:	ff 90       	pop	r15
    6574:	ef 90       	pop	r14
    6576:	df 90       	pop	r13
    6578:	08 95       	ret
    657a:	7a 01       	movw	r14, r20
    657c:	eb 01       	movw	r28, r22
    657e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    6580:	d1 2c       	mov	r13, r1
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    6582:	63 e0       	ldi	r22, 0x03	; 3
    6584:	70 e0       	ldi	r23, 0x00	; 0
    6586:	8d 2d       	mov	r24, r13
    6588:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    658c:	81 11       	cpse	r24, r1
    658e:	28 c0       	rjmp	.+80     	; 0x65e0 <EthernetClient::connect(IPAddress, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
    6590:	f8 01       	movw	r30, r16
    6592:	d4 86       	std	Z+12, r13	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    6594:	f8 01       	movw	r30, r16
    6596:	84 85       	ldd	r24, Z+12	; 0x0c
    6598:	88 30       	cpi	r24, 0x08	; 8
    659a:	29 f3       	breq	.-54     	; 0x6566 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
    659c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    65a0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    65a4:	2f 5f       	subi	r18, 0xFF	; 255
    65a6:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
    65a8:	19 f1       	breq	.+70     	; 0x65f0 <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
    65aa:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
    65ae:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
socket():
    65b2:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__data_start>
    65b6:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__data_start+0x1>
    65ba:	61 e0       	ldi	r22, 0x01	; 1
    65bc:	0e 94 06 9a 	call	0x1340c	; 0x1340c <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    65c0:	8a 81       	ldd	r24, Y+2	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:70
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    65c2:	8f 3f       	cpi	r24, 0xFF	; 255
    65c4:	c1 f4       	brne	.+48     	; 0x65f6 <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    65c6:	8b 81       	ldd	r24, Y+3	; 0x03
    65c8:	8f 3f       	cpi	r24, 0xFF	; 255
    65ca:	01 f5       	brne	.+64     	; 0x660c <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    65cc:	8c 81       	ldd	r24, Y+4	; 0x04
    65ce:	8f 3f       	cpi	r24, 0xFF	; 255
    65d0:	e9 f4       	brne	.+58     	; 0x660c <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    65d2:	8d 81       	ldd	r24, Y+5	; 0x05
    65d4:	8f 3f       	cpi	r24, 0xFF	; 255
    65d6:	d1 f4       	brne	.+52     	; 0x660c <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    65d8:	88 e0       	ldi	r24, 0x08	; 8
    65da:	f8 01       	movw	r30, r16
    65dc:	84 87       	std	Z+12, r24	; 0x0c
    65de:	c3 cf       	rjmp	.-122    	; 0x6566 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    65e0:	8b 7f       	andi	r24, 0xFB	; 251
    65e2:	88 31       	cpi	r24, 0x18	; 24
    65e4:	a9 f2       	breq	.-86     	; 0x6590 <EthernetClient::connect(IPAddress, unsigned int)+0x40>
    65e6:	d3 94       	inc	r13
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    65e8:	f8 e0       	ldi	r31, 0x08	; 8
    65ea:	df 12       	cpse	r13, r31
    65ec:	ca cf       	rjmp	.-108    	; 0x6582 <EthernetClient::connect(IPAddress, unsigned int)+0x32>
    65ee:	d2 cf       	rjmp	.-92     	; 0x6594 <EthernetClient::connect(IPAddress, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
    65f0:	20 e0       	ldi	r18, 0x00	; 0
    65f2:	34 e0       	ldi	r19, 0x04	; 4
    65f4:	da cf       	rjmp	.-76     	; 0x65aa <EthernetClient::connect(IPAddress, unsigned int)+0x5a>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    65f6:	81 11       	cpse	r24, r1
    65f8:	09 c0       	rjmp	.+18     	; 0x660c <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:73
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    65fa:	8b 81       	ldd	r24, Y+3	; 0x03
    65fc:	81 11       	cpse	r24, r1
    65fe:	06 c0       	rjmp	.+12     	; 0x660c <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    6600:	8c 81       	ldd	r24, Y+4	; 0x04
    6602:	81 11       	cpse	r24, r1
    6604:	03 c0       	rjmp	.+6      	; 0x660c <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    6606:	8d 81       	ldd	r24, Y+5	; 0x05
    6608:	88 23       	and	r24, r24
    660a:	31 f3       	breq	.-52     	; 0x65d8 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
    660c:	e1 14       	cp	r14, r1
    660e:	f1 04       	cpc	r15, r1
    6610:	19 f3       	breq	.-58     	; 0x65d8 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    6612:	f8 01       	movw	r30, r16
    6614:	d4 84       	ldd	r13, Z+12	; 0x0c
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    6616:	ae 01       	movw	r20, r28
    6618:	4e 5f       	subi	r20, 0xFE	; 254
    661a:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
    661c:	6d 2d       	mov	r22, r13
    661e:	62 95       	swap	r22
    6620:	66 0f       	add	r22, r22
    6622:	60 7e       	andi	r22, 0xE0	; 224
    6624:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
    6626:	24 e0       	ldi	r18, 0x04	; 4
    6628:	30 e0       	ldi	r19, 0x00	; 0
    662a:	8c e0       	ldi	r24, 0x0C	; 12
    662c:	90 e0       	ldi	r25, 0x00	; 0
    662e:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
    6632:	4f 2d       	mov	r20, r15
    6634:	60 e1       	ldi	r22, 0x10	; 16
    6636:	70 e0       	ldi	r23, 0x00	; 0
    6638:	8d 2d       	mov	r24, r13
    663a:	0e 94 16 98 	call	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    663e:	4e 2d       	mov	r20, r14
    6640:	61 e1       	ldi	r22, 0x11	; 17
    6642:	70 e0       	ldi	r23, 0x00	; 0
    6644:	8d 2d       	mov	r24, r13
    6646:	0e 94 16 98 	call	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:81
    return 0;

  // set destination IP
  w5500.writeSnDIPR(s, addr);
  w5500.writeSnDPORT(s, port);
  w5500.execCmdSn(s, Sock_CONNECT);
    664a:	64 e0       	ldi	r22, 0x04	; 4
    664c:	70 e0       	ldi	r23, 0x00	; 0
    664e:	8d 2d       	mov	r24, r13
    6650:	0e 94 91 98 	call	0x13122	; 0x13122 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
    6654:	c8 01       	movw	r24, r16
    6656:	0e 94 dd 9a 	call	0x135ba	; 0x135ba <EthernetClient::status()>
    665a:	87 31       	cpi	r24, 0x17	; 23
    665c:	61 f0       	breq	.+24     	; 0x6676 <EthernetClient::connect(IPAddress, unsigned int)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
    665e:	61 e0       	ldi	r22, 0x01	; 1
    6660:	70 e0       	ldi	r23, 0x00	; 0
    6662:	80 e0       	ldi	r24, 0x00	; 0
    6664:	90 e0       	ldi	r25, 0x00	; 0
    6666:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
    666a:	c8 01       	movw	r24, r16
    666c:	0e 94 dd 9a 	call	0x135ba	; 0x135ba <EthernetClient::status()>
    6670:	81 11       	cpse	r24, r1
    6672:	f0 cf       	rjmp	.-32     	; 0x6654 <EthernetClient::connect(IPAddress, unsigned int)+0x104>
    6674:	b1 cf       	rjmp	.-158    	; 0x65d8 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    6676:	81 e0       	ldi	r24, 0x01	; 1
    6678:	90 e0       	ldi	r25, 0x00	; 0
    667a:	77 cf       	rjmp	.-274    	; 0x656a <EthernetClient::connect(IPAddress, unsigned int)+0x1a>

0000667c <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    667c:	4f 92       	push	r4
    667e:	5f 92       	push	r5
    6680:	6f 92       	push	r6
    6682:	7f 92       	push	r7
    6684:	8f 92       	push	r8
    6686:	9f 92       	push	r9
    6688:	af 92       	push	r10
    668a:	bf 92       	push	r11
    668c:	cf 92       	push	r12
    668e:	df 92       	push	r13
    6690:	ef 92       	push	r14
    6692:	ff 92       	push	r15
    6694:	0f 93       	push	r16
    6696:	1f 93       	push	r17
    6698:	cf 93       	push	r28
    669a:	df 93       	push	r29
    669c:	cd b7       	in	r28, 0x3d	; 61
    669e:	de b7       	in	r29, 0x3e	; 62
    66a0:	63 97       	sbiw	r28, 0x13	; 19
    66a2:	0f b6       	in	r0, 0x3f	; 63
    66a4:	f8 94       	cli
    66a6:	de bf       	out	0x3e, r29	; 62
    66a8:	0f be       	out	0x3f, r0	; 63
    66aa:	cd bf       	out	0x3d, r28	; 61
    66ac:	7c 01       	movw	r14, r24
    66ae:	6b 01       	movw	r12, r22
    66b0:	3a 01       	movw	r6, r20
    66b2:	fb 01       	movw	r30, r22
    66b4:	db 01       	movw	r26, r22
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62

int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    66b6:	8d 91       	ld	r24, X+
    66b8:	81 11       	cpse	r24, r1
    66ba:	fd cf       	rjmp	.-6      	; 0x66b6 <DNSClient::getHostByName(char const*, IPAddress&)+0x3a>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
    66bc:	30 e0       	ldi	r19, 0x00	; 0
    66be:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
    66c0:	90 e0       	ldi	r25, 0x00	; 0
    66c2:	80 e0       	ldi	r24, 0x00	; 0
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    66c4:	5a e0       	ldi	r21, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    66c6:	41 91       	ld	r20, Z+
    66c8:	44 23       	and	r20, r20
    66ca:	01 f1       	breq	.+64     	; 0x670c <DNSClient::getHostByName(char const*, IPAddress&)+0x90>
    66cc:	84 30       	cpi	r24, 0x04	; 4
    66ce:	91 05       	cpc	r25, r1
    66d0:	0c f0       	brlt	.+2      	; 0x66d4 <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
    66d2:	42 c0       	rjmp	.+132    	; 0x6758 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
    66d4:	4e 32       	cpi	r20, 0x2E	; 46
    66d6:	69 f4       	brne	.+26     	; 0x66f2 <DNSClient::getHostByName(char const*, IPAddress&)+0x76>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    66d8:	2f 3f       	cpi	r18, 0xFF	; 255
    66da:	31 05       	cpc	r19, r1
    66dc:	09 f0       	breq	.+2      	; 0x66e0 <DNSClient::getHostByName(char const*, IPAddress&)+0x64>
    66de:	e4 f5       	brge	.+120    	; 0x6758 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    66e0:	d3 01       	movw	r26, r6
    66e2:	a8 0f       	add	r26, r24
    66e4:	b9 1f       	adc	r27, r25
    66e6:	12 96       	adiw	r26, 0x02	; 2
    66e8:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
    66ea:	01 96       	adiw	r24, 0x01	; 1
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
    66ec:	30 e0       	ldi	r19, 0x00	; 0
    66ee:	20 e0       	ldi	r18, 0x00	; 0
    66f0:	ea cf       	rjmp	.-44     	; 0x66c6 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    66f2:	52 9f       	mul	r21, r18
    66f4:	b0 01       	movw	r22, r0
    66f6:	53 9f       	mul	r21, r19
    66f8:	70 0d       	add	r23, r0
    66fa:	11 24       	eor	r1, r1
    66fc:	24 2f       	mov	r18, r20
    66fe:	44 0f       	add	r20, r20
    6700:	33 0b       	sbc	r19, r19
    6702:	20 53       	subi	r18, 0x30	; 48
    6704:	31 09       	sbc	r19, r1
    6706:	26 0f       	add	r18, r22
    6708:	37 1f       	adc	r19, r23
    670a:	dd cf       	rjmp	.-70     	; 0x66c6 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    670c:	2f 3f       	cpi	r18, 0xFF	; 255
    670e:	31 05       	cpc	r19, r1
    6710:	09 f0       	breq	.+2      	; 0x6714 <DNSClient::getHostByName(char const*, IPAddress&)+0x98>
    6712:	14 f5       	brge	.+68     	; 0x6758 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
    6714:	84 30       	cpi	r24, 0x04	; 4
    6716:	91 05       	cpc	r25, r1
    6718:	fc f4       	brge	.+62     	; 0x6758 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    671a:	68 0e       	add	r6, r24
    671c:	79 1e       	adc	r7, r25
    671e:	f3 01       	movw	r30, r6
    6720:	22 83       	std	Z+2, r18	; 0x02
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    6722:	cc 24       	eor	r12, r12
    6724:	c3 94       	inc	r12
    6726:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    6728:	c6 01       	movw	r24, r12
    672a:	63 96       	adiw	r28, 0x13	; 19
    672c:	0f b6       	in	r0, 0x3f	; 63
    672e:	f8 94       	cli
    6730:	de bf       	out	0x3e, r29	; 62
    6732:	0f be       	out	0x3f, r0	; 63
    6734:	cd bf       	out	0x3d, r28	; 61
    6736:	df 91       	pop	r29
    6738:	cf 91       	pop	r28
    673a:	1f 91       	pop	r17
    673c:	0f 91       	pop	r16
    673e:	ff 90       	pop	r15
    6740:	ef 90       	pop	r14
    6742:	df 90       	pop	r13
    6744:	cf 90       	pop	r12
    6746:	bf 90       	pop	r11
    6748:	af 90       	pop	r10
    674a:	9f 90       	pop	r9
    674c:	8f 90       	pop	r8
    674e:	7f 90       	pop	r7
    6750:	6f 90       	pop	r6
    6752:	5f 90       	pop	r5
    6754:	4f 90       	pop	r4
    6756:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    6758:	f7 01       	movw	r30, r14
    675a:	42 81       	ldd	r20, Z+2	; 0x02
    675c:	53 81       	ldd	r21, Z+3	; 0x03
    675e:	64 81       	ldd	r22, Z+4	; 0x04
    6760:	75 81       	ldd	r23, Z+5	; 0x05
    6762:	80 91 17 0c 	lds	r24, 0x0C17	; 0x800c17 <_ZL11INADDR_NONE.lto_priv.196+0x2>
    6766:	90 91 18 0c 	lds	r25, 0x0C18	; 0x800c18 <_ZL11INADDR_NONE.lto_priv.196+0x3>
    676a:	a0 91 19 0c 	lds	r26, 0x0C19	; 0x800c19 <_ZL11INADDR_NONE.lto_priv.196+0x4>
    676e:	b0 91 1a 0c 	lds	r27, 0x0C1A	; 0x800c1a <_ZL11INADDR_NONE.lto_priv.196+0x5>
    6772:	48 17       	cp	r20, r24
    6774:	59 07       	cpc	r21, r25
    6776:	6a 07       	cpc	r22, r26
    6778:	7b 07       	cpc	r23, r27
    677a:	09 f4       	brne	.+2      	; 0x677e <DNSClient::getHostByName(char const*, IPAddress&)+0x102>
    677c:	00 c2       	rjmp	.+1024   	; 0x6b7e <DNSClient::getHostByName(char const*, IPAddress&)+0x502>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    677e:	87 01       	movw	r16, r14
    6780:	08 5f       	subi	r16, 0xF8	; 248
    6782:	1f 4f       	sbci	r17, 0xFF	; 255
    6784:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    6788:	6f 70       	andi	r22, 0x0F	; 15
    678a:	77 27       	eor	r23, r23
    678c:	7c 5f       	subi	r23, 0xFC	; 252
    678e:	c8 01       	movw	r24, r16
    6790:	0e 94 3a 9a 	call	0x13474	; 0x13474 <EthernetUDP::begin(unsigned int)>
    6794:	81 30       	cpi	r24, 0x01	; 1
    6796:	09 f0       	breq	.+2      	; 0x679a <DNSClient::getHostByName(char const*, IPAddress&)+0x11e>
    6798:	f7 c1       	rjmp	.+1006   	; 0x6b88 <DNSClient::getHostByName(char const*, IPAddress&)+0x50c>
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    679a:	82 ee       	ldi	r24, 0xE2	; 226
    679c:	92 e0       	ldi	r25, 0x02	; 2
    679e:	9a 83       	std	Y+2, r25	; 0x02
    67a0:	89 83       	std	Y+1, r24	; 0x01
    67a2:	f7 01       	movw	r30, r14
    67a4:	82 81       	ldd	r24, Z+2	; 0x02
    67a6:	93 81       	ldd	r25, Z+3	; 0x03
    67a8:	a4 81       	ldd	r26, Z+4	; 0x04
    67aa:	b5 81       	ldd	r27, Z+5	; 0x05
    67ac:	8b 83       	std	Y+3, r24	; 0x03
    67ae:	9c 83       	std	Y+4, r25	; 0x04
    67b0:	ad 83       	std	Y+5, r26	; 0x05
    67b2:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    67b4:	45 e3       	ldi	r20, 0x35	; 53
    67b6:	50 e0       	ldi	r21, 0x00	; 0
    67b8:	be 01       	movw	r22, r28
    67ba:	6f 5f       	subi	r22, 0xFF	; 255
    67bc:	7f 4f       	sbci	r23, 0xFF	; 255
    67be:	c8 01       	movw	r24, r16
    67c0:	0e 94 9e 9a 	call	0x1353c	; 0x1353c <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
    67c4:	89 2b       	or	r24, r25
    67c6:	31 f4       	brne	.+12     	; 0x67d4 <DNSClient::getHostByName(char const*, IPAddress&)+0x158>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    67c8:	d1 2c       	mov	r13, r1
    67ca:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    67cc:	c8 01       	movw	r24, r16
    67ce:	0e 94 68 9a 	call	0x134d0	; 0x134d0 <EthernetUDP::stop()>
    67d2:	aa cf       	rjmp	.-172    	; 0x6728 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    67d4:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    67d8:	f7 01       	movw	r30, r14
    67da:	77 83       	std	Z+7, r23	; 0x07
    67dc:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    67de:	42 e0       	ldi	r20, 0x02	; 2
    67e0:	50 e0       	ldi	r21, 0x00	; 0
    67e2:	b7 01       	movw	r22, r14
    67e4:	6a 5f       	subi	r22, 0xFA	; 250
    67e6:	7f 4f       	sbci	r23, 0xFF	; 255
    67e8:	c8 01       	movw	r24, r16
    67ea:	0e 94 5f 98 	call	0x130be	; 0x130be <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    67ee:	81 e0       	ldi	r24, 0x01	; 1
    67f0:	90 e0       	ldi	r25, 0x00	; 0
    67f2:	9a 83       	std	Y+2, r25	; 0x02
    67f4:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    67f6:	42 e0       	ldi	r20, 0x02	; 2
    67f8:	50 e0       	ldi	r21, 0x00	; 0
    67fa:	be 01       	movw	r22, r28
    67fc:	6f 5f       	subi	r22, 0xFF	; 255
    67fe:	7f 4f       	sbci	r23, 0xFF	; 255
    6800:	c8 01       	movw	r24, r16
    6802:	0e 94 5f 98 	call	0x130be	; 0x130be <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
    6806:	80 e0       	ldi	r24, 0x00	; 0
    6808:	91 e0       	ldi	r25, 0x01	; 1
    680a:	9a 83       	std	Y+2, r25	; 0x02
    680c:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    680e:	42 e0       	ldi	r20, 0x02	; 2
    6810:	50 e0       	ldi	r21, 0x00	; 0
    6812:	be 01       	movw	r22, r28
    6814:	6f 5f       	subi	r22, 0xFF	; 255
    6816:	7f 4f       	sbci	r23, 0xFF	; 255
    6818:	c8 01       	movw	r24, r16
    681a:	0e 94 5f 98 	call	0x130be	; 0x130be <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
    681e:	1a 82       	std	Y+2, r1	; 0x02
    6820:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6822:	42 e0       	ldi	r20, 0x02	; 2
    6824:	50 e0       	ldi	r21, 0x00	; 0
    6826:	be 01       	movw	r22, r28
    6828:	6f 5f       	subi	r22, 0xFF	; 255
    682a:	7f 4f       	sbci	r23, 0xFF	; 255
    682c:	c8 01       	movw	r24, r16
    682e:	0e 94 5f 98 	call	0x130be	; 0x130be <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6832:	42 e0       	ldi	r20, 0x02	; 2
    6834:	50 e0       	ldi	r21, 0x00	; 0
    6836:	be 01       	movw	r22, r28
    6838:	6f 5f       	subi	r22, 0xFF	; 255
    683a:	7f 4f       	sbci	r23, 0xFF	; 255
    683c:	c8 01       	movw	r24, r16
    683e:	0e 94 5f 98 	call	0x130be	; 0x130be <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6842:	42 e0       	ldi	r20, 0x02	; 2
    6844:	50 e0       	ldi	r21, 0x00	; 0
    6846:	be 01       	movw	r22, r28
    6848:	6f 5f       	subi	r22, 0xFF	; 255
    684a:	7f 4f       	sbci	r23, 0xFF	; 255
    684c:	c8 01       	movw	r24, r16
    684e:	0e 94 5f 98 	call	0x130be	; 0x130be <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
    6852:	56 01       	movw	r10, r12
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    6854:	f6 01       	movw	r30, r12
    6856:	80 81       	ld	r24, Z
    6858:	88 23       	and	r24, r24
    685a:	01 f1       	breq	.+64     	; 0x689c <DNSClient::getHostByName(char const*, IPAddress&)+0x220>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
    685c:	65 01       	movw	r12, r10
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
    685e:	f6 01       	movw	r30, r12
    6860:	81 91       	ld	r24, Z+
    6862:	2f 01       	movw	r4, r30
    6864:	88 23       	and	r24, r24
    6866:	11 f0       	breq	.+4      	; 0x686c <DNSClient::getHostByName(char const*, IPAddress&)+0x1f0>
    6868:	8e 32       	cpi	r24, 0x2E	; 46
    686a:	b1 f4       	brne	.+44     	; 0x6898 <DNSClient::getHostByName(char const*, IPAddress&)+0x21c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
    686c:	46 01       	movw	r8, r12
    686e:	8a 18       	sub	r8, r10
    6870:	9b 08       	sbc	r9, r11
    6872:	18 14       	cp	r1, r8
    6874:	19 04       	cpc	r1, r9
    6876:	74 f4       	brge	.+28     	; 0x6894 <DNSClient::getHostByName(char const*, IPAddress&)+0x218>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
    6878:	8d 86       	std	Y+13, r8	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
    687a:	41 e0       	ldi	r20, 0x01	; 1
    687c:	50 e0       	ldi	r21, 0x00	; 0
    687e:	be 01       	movw	r22, r28
    6880:	63 5f       	subi	r22, 0xF3	; 243
    6882:	7f 4f       	sbci	r23, 0xFF	; 255
    6884:	c8 01       	movw	r24, r16
    6886:	0e 94 5f 98 	call	0x130be	; 0x130be <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    688a:	a4 01       	movw	r20, r8
    688c:	b5 01       	movw	r22, r10
    688e:	c8 01       	movw	r24, r16
    6890:	0e 94 5f 98 	call	0x130be	; 0x130be <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    6894:	52 01       	movw	r10, r4
    6896:	de cf       	rjmp	.-68     	; 0x6854 <DNSClient::getHostByName(char const*, IPAddress&)+0x1d8>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    6898:	62 01       	movw	r12, r4
    689a:	e1 cf       	rjmp	.-62     	; 0x685e <DNSClient::getHostByName(char const*, IPAddress&)+0x1e2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    689c:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
    689e:	41 e0       	ldi	r20, 0x01	; 1
    68a0:	50 e0       	ldi	r21, 0x00	; 0
    68a2:	be 01       	movw	r22, r28
    68a4:	63 5f       	subi	r22, 0xF3	; 243
    68a6:	7f 4f       	sbci	r23, 0xFF	; 255
    68a8:	c8 01       	movw	r24, r16
    68aa:	0e 94 5f 98 	call	0x130be	; 0x130be <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    68ae:	c1 2c       	mov	r12, r1
    68b0:	dd 24       	eor	r13, r13
    68b2:	d3 94       	inc	r13
    68b4:	da 82       	std	Y+2, r13	; 0x02
    68b6:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    68b8:	42 e0       	ldi	r20, 0x02	; 2
    68ba:	50 e0       	ldi	r21, 0x00	; 0
    68bc:	be 01       	movw	r22, r28
    68be:	6f 5f       	subi	r22, 0xFF	; 255
    68c0:	7f 4f       	sbci	r23, 0xFF	; 255
    68c2:	c8 01       	movw	r24, r16
    68c4:	0e 94 5f 98 	call	0x130be	; 0x130be <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    68c8:	da 82       	std	Y+2, r13	; 0x02
    68ca:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    68cc:	42 e0       	ldi	r20, 0x02	; 2
    68ce:	50 e0       	ldi	r21, 0x00	; 0
    68d0:	be 01       	movw	r22, r28
    68d2:	6f 5f       	subi	r22, 0xFF	; 255
    68d4:	7f 4f       	sbci	r23, 0xFF	; 255
    68d6:	c8 01       	movw	r24, r16
    68d8:	0e 94 5f 98 	call	0x130be	; 0x130be <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                // Now output the request data
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    68dc:	c8 01       	movw	r24, r16
    68de:	0e 94 75 9a 	call	0x134ea	; 0x134ea <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
    68e2:	89 2b       	or	r24, r25
    68e4:	09 f4       	brne	.+2      	; 0x68e8 <DNSClient::getHostByName(char const*, IPAddress&)+0x26c>
    68e6:	70 cf       	rjmp	.-288    	; 0x67c8 <DNSClient::getHostByName(char const*, IPAddress&)+0x14c>
    68e8:	f3 e0       	ldi	r31, 0x03	; 3
    68ea:	af 2e       	mov	r10, r31
    68ec:	b1 2c       	mov	r11, r1
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    68ee:	23 01       	movw	r4, r6
    68f0:	22 e0       	ldi	r18, 0x02	; 2
    68f2:	42 0e       	add	r4, r18
    68f4:	51 1c       	adc	r5, r1
    68f6:	43 c0       	rjmp	.+134    	; 0x697e <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    68f8:	f7 01       	movw	r30, r14
    68fa:	42 81       	ldd	r20, Z+2	; 0x02
    68fc:	53 81       	ldd	r21, Z+3	; 0x03
    68fe:	64 81       	ldd	r22, Z+4	; 0x04
    6900:	75 81       	ldd	r23, Z+5	; 0x05
    6902:	81 8d       	ldd	r24, Z+25	; 0x19
    6904:	92 8d       	ldd	r25, Z+26	; 0x1a
    6906:	a3 8d       	ldd	r26, Z+27	; 0x1b
    6908:	b4 8d       	ldd	r27, Z+28	; 0x1c
    690a:	48 17       	cp	r20, r24
    690c:	59 07       	cpc	r21, r25
    690e:	6a 07       	cpc	r22, r26
    6910:	7b 07       	cpc	r23, r27
    6912:	09 f0       	breq	.+2      	; 0x6916 <DNSClient::getHostByName(char const*, IPAddress&)+0x29a>
    6914:	2a c1       	rjmp	.+596    	; 0x6b6a <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
    6916:	85 8d       	ldd	r24, Z+29	; 0x1d
    6918:	96 8d       	ldd	r25, Z+30	; 0x1e
    691a:	c5 97       	sbiw	r24, 0x35	; 53
    691c:	09 f0       	breq	.+2      	; 0x6920 <DNSClient::getHostByName(char const*, IPAddress&)+0x2a4>
    691e:	25 c1       	rjmp	.+586    	; 0x6b6a <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    6920:	81 a1       	ldd	r24, Z+33	; 0x21
    6922:	92 a1       	ldd	r25, Z+34	; 0x22
    6924:	0c 97       	sbiw	r24, 0x0c	; 12
    6926:	0c f4       	brge	.+2      	; 0x692a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ae>
    6928:	25 c1       	rjmp	.+586    	; 0x6b74 <DNSClient::getHostByName(char const*, IPAddress&)+0x4f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    692a:	4c e0       	ldi	r20, 0x0C	; 12
    692c:	50 e0       	ldi	r21, 0x00	; 0
    692e:	be 01       	movw	r22, r28
    6930:	6f 5f       	subi	r22, 0xFF	; 255
    6932:	7f 4f       	sbci	r23, 0xFF	; 255
    6934:	c8 01       	movw	r24, r16
    6936:	0e 94 44 99 	call	0x13288	; 0x13288 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    693a:	8b 81       	ldd	r24, Y+3	; 0x03
    693c:	9c 81       	ldd	r25, Y+4	; 0x04
    693e:	98 27       	eor	r25, r24
    6940:	89 27       	eor	r24, r25
    6942:	98 27       	eor	r25, r24
    6944:	9a 8b       	std	Y+18, r25	; 0x12
    6946:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    6948:	f7 01       	movw	r30, r14
    694a:	46 81       	ldd	r20, Z+6	; 0x06
    694c:	57 81       	ldd	r21, Z+7	; 0x07
    694e:	29 81       	ldd	r18, Y+1	; 0x01
    6950:	3a 81       	ldd	r19, Y+2	; 0x02
    6952:	42 17       	cp	r20, r18
    6954:	53 07       	cpc	r21, r19
    6956:	11 f4       	brne	.+4      	; 0x695c <DNSClient::getHostByName(char const*, IPAddress&)+0x2e0>
    6958:	97 fd       	sbrc	r25, 7
    695a:	2f c0       	rjmp	.+94     	; 0x69ba <DNSClient::getHostByName(char const*, IPAddress&)+0x33e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    695c:	c8 01       	movw	r24, r16
    695e:	0e 94 69 80 	call	0x100d2	; 0x100d2 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
    6962:	ec ef       	ldi	r30, 0xFC	; 252
    6964:	ce 2e       	mov	r12, r30
    6966:	dd 24       	eor	r13, r13
    6968:	da 94       	dec	r13
    696a:	81 e0       	ldi	r24, 0x01	; 1
    696c:	a8 1a       	sub	r10, r24
    696e:	b1 08       	sbc	r11, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    6970:	09 f4       	brne	.+2      	; 0x6974 <DNSClient::getHostByName(char const*, IPAddress&)+0x2f8>
    6972:	2c cf       	rjmp	.-424    	; 0x67cc <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
    6974:	ff ef       	ldi	r31, 0xFF	; 255
    6976:	cf 16       	cp	r12, r31
    6978:	df 06       	cpc	r13, r31
    697a:	09 f0       	breq	.+2      	; 0x697e <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
    697c:	27 cf       	rjmp	.-434    	; 0x67cc <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();
    697e:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    6982:	3b 01       	movw	r6, r22
    6984:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    6986:	c8 01       	movw	r24, r16
    6988:	0e 94 8d 99 	call	0x1331a	; 0x1331a <EthernetUDP::parsePacket()>
    698c:	18 16       	cp	r1, r24
    698e:	19 06       	cpc	r1, r25
    6990:	0c f4       	brge	.+2      	; 0x6994 <DNSClient::getHostByName(char const*, IPAddress&)+0x318>
    6992:	b2 cf       	rjmp	.-156    	; 0x68f8 <DNSClient::getHostByName(char const*, IPAddress&)+0x27c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
    6994:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    6998:	66 19       	sub	r22, r6
    699a:	77 09       	sbc	r23, r7
    699c:	88 09       	sbc	r24, r8
    699e:	99 09       	sbc	r25, r9
    69a0:	69 38       	cpi	r22, 0x89	; 137
    69a2:	73 41       	sbci	r23, 0x13	; 19
    69a4:	81 05       	cpc	r24, r1
    69a6:	91 05       	cpc	r25, r1
    69a8:	08 f0       	brcs	.+2      	; 0x69ac <DNSClient::getHostByName(char const*, IPAddress&)+0x330>
    69aa:	db c0       	rjmp	.+438    	; 0x6b62 <DNSClient::getHostByName(char const*, IPAddress&)+0x4e6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
    69ac:	62 e3       	ldi	r22, 0x32	; 50
    69ae:	70 e0       	ldi	r23, 0x00	; 0
    69b0:	80 e0       	ldi	r24, 0x00	; 0
    69b2:	90 e0       	ldi	r25, 0x00	; 0
    69b4:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
    69b8:	e6 cf       	rjmp	.-52     	; 0x6986 <DNSClient::getHostByName(char const*, IPAddress&)+0x30a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    69ba:	8f 70       	andi	r24, 0x0F	; 15
    69bc:	92 70       	andi	r25, 0x02	; 2
    69be:	89 2b       	or	r24, r25
    69c0:	41 f0       	breq	.+16     	; 0x69d2 <DNSClient::getHostByName(char const*, IPAddress&)+0x356>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
    69c2:	c8 01       	movw	r24, r16
    69c4:	0e 94 69 80 	call	0x100d2	; 0x100d2 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
    69c8:	7b ef       	ldi	r23, 0xFB	; 251
    69ca:	c7 2e       	mov	r12, r23
    69cc:	dd 24       	eor	r13, r13
    69ce:	da 94       	dec	r13
    69d0:	cc cf       	rjmp	.-104    	; 0x696a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    69d2:	6f 80       	ldd	r6, Y+7	; 0x07
    69d4:	78 84       	ldd	r7, Y+8	; 0x08
    69d6:	76 24       	eor	r7, r6
    69d8:	67 24       	eor	r6, r7
    69da:	76 24       	eor	r7, r6
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    69dc:	d1 2c       	mov	r13, r1
    69de:	c1 2c       	mov	r12, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    69e0:	61 14       	cp	r6, r1
    69e2:	71 04       	cpc	r7, r1
    69e4:	d1 f4       	brne	.+52     	; 0x6a1a <DNSClient::getHostByName(char const*, IPAddress&)+0x39e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
    69e6:	c8 01       	movw	r24, r16
    69e8:	0e 94 69 80 	call	0x100d2	; 0x100d2 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
    69ec:	6a ef       	ldi	r22, 0xFA	; 250
    69ee:	c6 2e       	mov	r12, r22
    69f0:	dd 24       	eor	r13, r13
    69f2:	da 94       	dec	r13
    69f4:	ba cf       	rjmp	.-140    	; 0x696a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    69f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    69f8:	81 11       	cpse	r24, r1
    69fa:	17 c0       	rjmp	.+46     	; 0x6a2a <DNSClient::getHostByName(char const*, IPAddress&)+0x3ae>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    69fc:	c8 01       	movw	r24, r16
    69fe:	0e 94 63 99 	call	0x132c6	; 0x132c6 <EthernetUDP::read()>
    6a02:	c8 01       	movw	r24, r16
    6a04:	0e 94 63 99 	call	0x132c6	; 0x132c6 <EthernetUDP::read()>
    6a08:	c8 01       	movw	r24, r16
    6a0a:	0e 94 63 99 	call	0x132c6	; 0x132c6 <EthernetUDP::read()>
    6a0e:	c8 01       	movw	r24, r16
    6a10:	0e 94 63 99 	call	0x132c6	; 0x132c6 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    6a14:	ff ef       	ldi	r31, 0xFF	; 255
    6a16:	cf 1a       	sub	r12, r31
    6a18:	df 0a       	sbc	r13, r31
    6a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    6a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    6a1e:	98 27       	eor	r25, r24
    6a20:	89 27       	eor	r24, r25
    6a22:	98 27       	eor	r25, r24
    6a24:	c8 16       	cp	r12, r24
    6a26:	d9 06       	cpc	r13, r25
    6a28:	a8 f4       	brcc	.+42     	; 0x6a54 <DNSClient::getHostByName(char const*, IPAddress&)+0x3d8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    6a2a:	41 e0       	ldi	r20, 0x01	; 1
    6a2c:	50 e0       	ldi	r21, 0x00	; 0
    6a2e:	be 01       	movw	r22, r28
    6a30:	63 5f       	subi	r22, 0xF3	; 243
    6a32:	7f 4f       	sbci	r23, 0xFF	; 255
    6a34:	c8 01       	movw	r24, r16
    6a36:	0e 94 44 99 	call	0x13288	; 0x13288 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
    6a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a3c:	88 23       	and	r24, r24
    6a3e:	d9 f2       	breq	.-74     	; 0x69f6 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    6a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a42:	9f ef       	ldi	r25, 0xFF	; 255
    6a44:	98 0f       	add	r25, r24
    6a46:	9d 87       	std	Y+13, r25	; 0x0d
    6a48:	88 23       	and	r24, r24
    6a4a:	a9 f2       	breq	.-86     	; 0x69f6 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
    6a4c:	c8 01       	movw	r24, r16
    6a4e:	0e 94 63 99 	call	0x132c6	; 0x132c6 <EthernetUDP::read()>
    6a52:	f6 cf       	rjmp	.-20     	; 0x6a40 <DNSClient::getHostByName(char const*, IPAddress&)+0x3c4>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    6a54:	91 2c       	mov	r9, r1
    6a56:	81 2c       	mov	r8, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    6a58:	41 e0       	ldi	r20, 0x01	; 1
    6a5a:	50 e0       	ldi	r21, 0x00	; 0
    6a5c:	be 01       	movw	r22, r28
    6a5e:	6d 5e       	subi	r22, 0xED	; 237
    6a60:	7f 4f       	sbci	r23, 0xFF	; 255
    6a62:	c8 01       	movw	r24, r16
    6a64:	0e 94 44 99 	call	0x13288	; 0x13288 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    6a68:	8b 89       	ldd	r24, Y+19	; 0x13
    6a6a:	98 2f       	mov	r25, r24
    6a6c:	90 7c       	andi	r25, 0xC0	; 192
    6a6e:	61 f4       	brne	.+24     	; 0x6a88 <DNSClient::getHostByName(char const*, IPAddress&)+0x40c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
    6a70:	88 23       	and	r24, r24
    6a72:	89 f0       	breq	.+34     	; 0x6a96 <DNSClient::getHostByName(char const*, IPAddress&)+0x41a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    6a74:	8b 89       	ldd	r24, Y+19	; 0x13
    6a76:	9f ef       	ldi	r25, 0xFF	; 255
    6a78:	98 0f       	add	r25, r24
    6a7a:	9b 8b       	std	Y+19, r25	; 0x13
    6a7c:	88 23       	and	r24, r24
    6a7e:	41 f0       	breq	.+16     	; 0x6a90 <DNSClient::getHostByName(char const*, IPAddress&)+0x414>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
    6a80:	c8 01       	movw	r24, r16
    6a82:	0e 94 63 99 	call	0x132c6	; 0x132c6 <EthernetUDP::read()>
    6a86:	f6 cf       	rjmp	.-20     	; 0x6a74 <DNSClient::getHostByName(char const*, IPAddress&)+0x3f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    6a88:	c8 01       	movw	r24, r16
    6a8a:	0e 94 63 99 	call	0x132c6	; 0x132c6 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
    6a8e:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
    6a90:	8b 89       	ldd	r24, Y+19	; 0x13
    6a92:	81 11       	cpse	r24, r1
    6a94:	e1 cf       	rjmp	.-62     	; 0x6a58 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    6a96:	42 e0       	ldi	r20, 0x02	; 2
    6a98:	50 e0       	ldi	r21, 0x00	; 0
    6a9a:	be 01       	movw	r22, r28
    6a9c:	61 5f       	subi	r22, 0xF1	; 241
    6a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    6aa0:	c8 01       	movw	r24, r16
    6aa2:	0e 94 44 99 	call	0x13288	; 0x13288 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    6aa6:	42 e0       	ldi	r20, 0x02	; 2
    6aa8:	50 e0       	ldi	r21, 0x00	; 0
    6aaa:	be 01       	movw	r22, r28
    6aac:	63 5f       	subi	r22, 0xF3	; 243
    6aae:	7f 4f       	sbci	r23, 0xFF	; 255
    6ab0:	c8 01       	movw	r24, r16
    6ab2:	0e 94 44 99 	call	0x13288	; 0x13288 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    6ab6:	c8 01       	movw	r24, r16
    6ab8:	0e 94 63 99 	call	0x132c6	; 0x132c6 <EthernetUDP::read()>
    6abc:	c8 01       	movw	r24, r16
    6abe:	0e 94 63 99 	call	0x132c6	; 0x132c6 <EthernetUDP::read()>
    6ac2:	c8 01       	movw	r24, r16
    6ac4:	0e 94 63 99 	call	0x132c6	; 0x132c6 <EthernetUDP::read()>
    6ac8:	c8 01       	movw	r24, r16
    6aca:	0e 94 63 99 	call	0x132c6	; 0x132c6 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    6ace:	42 e0       	ldi	r20, 0x02	; 2
    6ad0:	50 e0       	ldi	r21, 0x00	; 0
    6ad2:	be 01       	movw	r22, r28
    6ad4:	6f 5e       	subi	r22, 0xEF	; 239
    6ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    6ad8:	c8 01       	movw	r24, r16
    6ada:	0e 94 44 99 	call	0x13288	; 0x13288 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    6ade:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ae0:	98 89       	ldd	r25, Y+16	; 0x10
    6ae2:	81 15       	cp	r24, r1
    6ae4:	91 40       	sbci	r25, 0x01	; 1
    6ae6:	e9 f4       	brne	.+58     	; 0x6b22 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
    6ae8:	cd 84       	ldd	r12, Y+13	; 0x0d
    6aea:	de 84       	ldd	r13, Y+14	; 0x0e
    6aec:	dc 24       	eor	r13, r12
    6aee:	cd 24       	eor	r12, r13
    6af0:	dc 24       	eor	r13, r12
    6af2:	81 e0       	ldi	r24, 0x01	; 1
    6af4:	c8 16       	cp	r12, r24
    6af6:	d1 04       	cpc	r13, r1
    6af8:	a1 f4       	brne	.+40     	; 0x6b22 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
    6afa:	89 89       	ldd	r24, Y+17	; 0x11
    6afc:	9a 89       	ldd	r25, Y+18	; 0x12
    6afe:	81 15       	cp	r24, r1
    6b00:	94 40       	sbci	r25, 0x04	; 4
    6b02:	41 f0       	breq	.+16     	; 0x6b14 <DNSClient::getHostByName(char const*, IPAddress&)+0x498>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    6b04:	c8 01       	movw	r24, r16
    6b06:	0e 94 69 80 	call	0x100d2	; 0x100d2 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
    6b0a:	57 ef       	ldi	r21, 0xF7	; 247
    6b0c:	c5 2e       	mov	r12, r21
    6b0e:	dd 24       	eor	r13, r13
    6b10:	da 94       	dec	r13
    6b12:	2b cf       	rjmp	.-426    	; 0x696a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
    6b14:	44 e0       	ldi	r20, 0x04	; 4
    6b16:	50 e0       	ldi	r21, 0x00	; 0
    6b18:	b2 01       	movw	r22, r4
    6b1a:	c8 01       	movw	r24, r16
    6b1c:	0e 94 44 99 	call	0x13288	; 0x13288 <EthernetUDP::read(unsigned char*, unsigned int)>
    6b20:	24 cf       	rjmp	.-440    	; 0x696a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    6b22:	d1 2c       	mov	r13, r1
    6b24:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    6b26:	89 89       	ldd	r24, Y+17	; 0x11
    6b28:	9a 89       	ldd	r25, Y+18	; 0x12
    6b2a:	98 27       	eor	r25, r24
    6b2c:	89 27       	eor	r24, r25
    6b2e:	98 27       	eor	r25, r24
    6b30:	c8 16       	cp	r12, r24
    6b32:	d9 06       	cpc	r13, r25
    6b34:	38 f4       	brcc	.+14     	; 0x6b44 <DNSClient::getHostByName(char const*, IPAddress&)+0x4c8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412
            {
                iUdp.read(); // we don't care about the returned byte
    6b36:	c8 01       	movw	r24, r16
    6b38:	0e 94 63 99 	call	0x132c6	; 0x132c6 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    6b3c:	ff ef       	ldi	r31, 0xFF	; 255
    6b3e:	cf 1a       	sub	r12, r31
    6b40:	df 0a       	sbc	r13, r31
    6b42:	f1 cf       	rjmp	.-30     	; 0x6b26 <DNSClient::getHostByName(char const*, IPAddress&)+0x4aa>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    6b44:	2f ef       	ldi	r18, 0xFF	; 255
    6b46:	82 1a       	sub	r8, r18
    6b48:	92 0a       	sbc	r9, r18
    6b4a:	68 14       	cp	r6, r8
    6b4c:	79 04       	cpc	r7, r9
    6b4e:	09 f0       	breq	.+2      	; 0x6b52 <DNSClient::getHostByName(char const*, IPAddress&)+0x4d6>
    6b50:	83 cf       	rjmp	.-250    	; 0x6a58 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    6b52:	c8 01       	movw	r24, r16
    6b54:	0e 94 69 80 	call	0x100d2	; 0x100d2 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    6b58:	46 ef       	ldi	r20, 0xF6	; 246
    6b5a:	c4 2e       	mov	r12, r20
    6b5c:	dd 24       	eor	r13, r13
    6b5e:	da 94       	dec	r13
    6b60:	04 cf       	rjmp	.-504    	; 0x696a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    6b62:	cc 24       	eor	r12, r12
    6b64:	ca 94       	dec	r12
    6b66:	dc 2c       	mov	r13, r12
    6b68:	00 cf       	rjmp	.-512    	; 0x696a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    6b6a:	2e ef       	ldi	r18, 0xFE	; 254
    6b6c:	c2 2e       	mov	r12, r18
    6b6e:	dd 24       	eor	r13, r13
    6b70:	da 94       	dec	r13
    6b72:	fb ce       	rjmp	.-522    	; 0x696a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    6b74:	9d ef       	ldi	r25, 0xFD	; 253
    6b76:	c9 2e       	mov	r12, r25
    6b78:	dd 24       	eor	r13, r13
    6b7a:	da 94       	dec	r13
    6b7c:	f6 ce       	rjmp	.-532    	; 0x696a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    6b7e:	8e ef       	ldi	r24, 0xFE	; 254
    6b80:	c8 2e       	mov	r12, r24
    6b82:	dd 24       	eor	r13, r13
    6b84:	da 94       	dec	r13
    6b86:	d0 cd       	rjmp	.-1120   	; 0x6728 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:120
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    6b88:	d1 2c       	mov	r13, r1
    6b8a:	c1 2c       	mov	r12, r1
    6b8c:	cd cd       	rjmp	.-1126   	; 0x6728 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>

00006b8e <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    6b8e:	cf 92       	push	r12
    6b90:	df 92       	push	r13
    6b92:	ef 92       	push	r14
    6b94:	ff 92       	push	r15
    6b96:	0f 93       	push	r16
    6b98:	1f 93       	push	r17
    6b9a:	cf 93       	push	r28
    6b9c:	df 93       	push	r29
    6b9e:	cd b7       	in	r28, 0x3d	; 61
    6ba0:	de b7       	in	r29, 0x3e	; 62
    6ba2:	af 97       	sbiw	r28, 0x2f	; 47
    6ba4:	0f b6       	in	r0, 0x3f	; 63
    6ba6:	f8 94       	cli
    6ba8:	de bf       	out	0x3e, r29	; 62
    6baa:	0f be       	out	0x3f, r0	; 63
    6bac:	cd bf       	out	0x3d, r28	; 61
    6bae:	7c 01       	movw	r14, r24
    6bb0:	6a 01       	movw	r12, r20
__base_ctor ():
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    6bb2:	02 ee       	ldi	r16, 0xE2	; 226
    6bb4:	12 e0       	ldi	r17, 0x02	; 2
    6bb6:	1a 83       	std	Y+2, r17	; 0x02
    6bb8:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
    6bba:	1c 86       	std	Y+12, r1	; 0x0c
    6bbc:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    6bbe:	88 ee       	ldi	r24, 0xE8	; 232
    6bc0:	93 e0       	ldi	r25, 0x03	; 3
    6bc2:	a0 e0       	ldi	r26, 0x00	; 0
    6bc4:	b0 e0       	ldi	r27, 0x00	; 0
    6bc6:	8d 87       	std	Y+13, r24	; 0x0d
    6bc8:	9e 87       	std	Y+14, r25	; 0x0e
    6bca:	af 87       	std	Y+15, r26	; 0x0f
    6bcc:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    6bce:	88 e9       	ldi	r24, 0x98	; 152
    6bd0:	92 e0       	ldi	r25, 0x02	; 2
    6bd2:	9a 87       	std	Y+10, r25	; 0x0a
    6bd4:	89 87       	std	Y+9, r24	; 0x09
    6bd6:	88 e0       	ldi	r24, 0x08	; 8
    6bd8:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
    6bda:	19 8f       	std	Y+25, r17	; 0x19
    6bdc:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    6bde:	1a 8e       	std	Y+26, r1	; 0x1a
    6be0:	1b 8e       	std	Y+27, r1	; 0x1b
    6be2:	1c 8e       	std	Y+28, r1	; 0x1c
    6be4:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    6be6:	1b a7       	std	Y+43, r17	; 0x2b
    6be8:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    6bea:	1c a6       	std	Y+44, r1	; 0x2c
    6bec:	1d a6       	std	Y+45, r1	; 0x2d
    6bee:	1e a6       	std	Y+46, r1	; 0x2e
    6bf0:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    6bf2:	80 91 0a 0c 	lds	r24, 0x0C0A	; 0x800c0a <Ethernet+0x2>
    6bf6:	90 91 0b 0c 	lds	r25, 0x0C0B	; 0x800c0b <Ethernet+0x3>
    6bfa:	a0 91 0c 0c 	lds	r26, 0x0C0C	; 0x800c0c <Ethernet+0x4>
    6bfe:	b0 91 0d 0c 	lds	r27, 0x0C0D	; 0x800c0d <Ethernet+0x5>
    6c02:	8e a3       	std	Y+38, r24	; 0x26
    6c04:	9f a3       	std	Y+39, r25	; 0x27
    6c06:	a8 a7       	std	Y+40, r26	; 0x28
    6c08:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    6c0a:	8b 83       	std	Y+3, r24	; 0x03
    6c0c:	9c 83       	std	Y+4, r25	; 0x04
    6c0e:	ad 83       	std	Y+5, r26	; 0x05
    6c10:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    6c12:	18 86       	std	Y+8, r1	; 0x08
    6c14:	1f 82       	std	Y+7, r1	; 0x07
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    6c16:	ae 01       	movw	r20, r28
    6c18:	46 5d       	subi	r20, 0xD6	; 214
    6c1a:	5f 4f       	sbci	r21, 0xFF	; 255
    6c1c:	ce 01       	movw	r24, r28
    6c1e:	01 96       	adiw	r24, 0x01	; 1
    6c20:	0e 94 3e 33 	call	0x667c	; 0x667c <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
    6c24:	81 30       	cpi	r24, 0x01	; 1
    6c26:	91 05       	cpc	r25, r1
    6c28:	b1 f4       	brne	.+44     	; 0x6c56 <EthernetClient::connect(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
    6c2a:	d7 01       	movw	r26, r14
    6c2c:	ed 91       	ld	r30, X+
    6c2e:	fc 91       	ld	r31, X
    6c30:	06 84       	ldd	r0, Z+14	; 0x0e
    6c32:	f7 85       	ldd	r31, Z+15	; 0x0f
    6c34:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    6c36:	1d a3       	std	Y+37, r17	; 0x25
    6c38:	0c a3       	std	Y+36, r16	; 0x24
    6c3a:	8c a5       	ldd	r24, Y+44	; 0x2c
    6c3c:	9d a5       	ldd	r25, Y+45	; 0x2d
    6c3e:	ae a5       	ldd	r26, Y+46	; 0x2e
    6c40:	bf a5       	ldd	r27, Y+47	; 0x2f
    6c42:	8e a3       	std	Y+38, r24	; 0x26
    6c44:	9f a3       	std	Y+39, r25	; 0x27
    6c46:	a8 a7       	std	Y+40, r26	; 0x28
    6c48:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    6c4a:	a6 01       	movw	r20, r12
    6c4c:	be 01       	movw	r22, r28
    6c4e:	6c 5d       	subi	r22, 0xDC	; 220
    6c50:	7f 4f       	sbci	r23, 0xFF	; 255
    6c52:	c7 01       	movw	r24, r14
    6c54:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
    6c56:	af 96       	adiw	r28, 0x2f	; 47
    6c58:	0f b6       	in	r0, 0x3f	; 63
    6c5a:	f8 94       	cli
    6c5c:	de bf       	out	0x3e, r29	; 62
    6c5e:	0f be       	out	0x3f, r0	; 63
    6c60:	cd bf       	out	0x3d, r28	; 61
    6c62:	df 91       	pop	r29
    6c64:	cf 91       	pop	r28
    6c66:	1f 91       	pop	r17
    6c68:	0f 91       	pop	r16
    6c6a:	ff 90       	pop	r15
    6c6c:	ef 90       	pop	r14
    6c6e:	df 90       	pop	r13
    6c70:	cf 90       	pop	r12
    6c72:	08 95       	ret

00006c74 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    6c74:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
    6c76:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    6c78:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
    6c7a:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <SPIClass::initialized>
    6c7e:	81 11       	cpse	r24, r1
    6c80:	27 c0       	rjmp	.+78     	; 0x6cd0 <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    6c82:	ec e8       	ldi	r30, 0x8C	; 140
    6c84:	fb e3       	ldi	r31, 0x3B	; 59
    6c86:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    6c88:	e6 e4       	ldi	r30, 0x46	; 70
    6c8a:	fb e3       	ldi	r31, 0x3B	; 59
    6c8c:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    6c8e:	e8 2f       	mov	r30, r24
    6c90:	f0 e0       	ldi	r31, 0x00	; 0
    6c92:	ee 0f       	add	r30, r30
    6c94:	ff 1f       	adc	r31, r31
    6c96:	e3 51       	subi	r30, 0x13	; 19
    6c98:	fa 4c       	sbci	r31, 0xCA	; 202
    6c9a:	a5 91       	lpm	r26, Z+
    6c9c:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    6c9e:	ec 91       	ld	r30, X
    6ca0:	e9 23       	and	r30, r25
    6ca2:	21 f4       	brne	.+8      	; 0x6cac <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    6ca4:	61 e0       	ldi	r22, 0x01	; 1
    6ca6:	88 e0       	ldi	r24, 0x08	; 8
    6ca8:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    6cac:	61 e0       	ldi	r22, 0x01	; 1
    6cae:	88 e0       	ldi	r24, 0x08	; 8
    6cb0:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    6cb4:	8c b5       	in	r24, 0x2c	; 44
    6cb6:	80 61       	ori	r24, 0x10	; 16
    6cb8:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
    6cba:	8c b5       	in	r24, 0x2c	; 44
    6cbc:	80 64       	ori	r24, 0x40	; 64
    6cbe:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    6cc0:	61 e0       	ldi	r22, 0x01	; 1
    6cc2:	89 e0       	ldi	r24, 0x09	; 9
    6cc4:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    6cc8:	61 e0       	ldi	r22, 0x01	; 1
    6cca:	8a e0       	ldi	r24, 0x0A	; 10
    6ccc:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
    6cd0:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <SPIClass::initialized>
    6cd4:	8f 5f       	subi	r24, 0xFF	; 255
    6cd6:	80 93 b6 09 	sts	0x09B6, r24	; 0x8009b6 <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
    6cda:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:64
}
    6cdc:	cf 91       	pop	r28
    6cde:	08 95       	ret

00006ce0 <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
    6ce0:	7f 92       	push	r7
    6ce2:	8f 92       	push	r8
    6ce4:	9f 92       	push	r9
    6ce6:	af 92       	push	r10
    6ce8:	bf 92       	push	r11
    6cea:	cf 92       	push	r12
    6cec:	df 92       	push	r13
    6cee:	ef 92       	push	r14
    6cf0:	ff 92       	push	r15
    6cf2:	0f 93       	push	r16
    6cf4:	1f 93       	push	r17
    6cf6:	cf 93       	push	r28
    6cf8:	df 93       	push	r29
    6cfa:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
    6cfc:	fc 01       	movw	r30, r24
    6cfe:	86 81       	ldd	r24, Z+6	; 0x06
    6d00:	81 11       	cpse	r24, r1
    6d02:	35 c0       	rjmp	.+106    	; 0x6d6e <SoftSPIB::transfer(unsigned char)+0x8e>
    6d04:	86 2f       	mov	r24, r22
    6d06:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
    6d08:	ec 01       	movw	r28, r24
    6d0a:	d6 95       	lsr	r29
    6d0c:	dc 2f       	mov	r29, r28
    6d0e:	cc 27       	eor	r28, r28
    6d10:	d7 95       	ror	r29
    6d12:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
    6d14:	66 1f       	adc	r22, r22
    6d16:	66 27       	eor	r22, r22
    6d18:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6d1a:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
    6d1c:	ec 01       	movw	r28, r24
    6d1e:	55 e0       	ldi	r21, 0x05	; 5
    6d20:	cc 0f       	add	r28, r28
    6d22:	dd 1f       	adc	r29, r29
    6d24:	5a 95       	dec	r21
    6d26:	e1 f7       	brne	.-8      	; 0x6d20 <SoftSPIB::transfer(unsigned char)+0x40>
    6d28:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6d2a:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
    6d2c:	ec 01       	movw	r28, r24
    6d2e:	73 e0       	ldi	r23, 0x03	; 3
    6d30:	cc 0f       	add	r28, r28
    6d32:	dd 1f       	adc	r29, r29
    6d34:	7a 95       	dec	r23
    6d36:	e1 f7       	brne	.-8      	; 0x6d30 <SoftSPIB::transfer(unsigned char)+0x50>
    6d38:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6d3a:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
    6d3c:	ec 01       	movw	r28, r24
    6d3e:	cc 0f       	add	r28, r28
    6d40:	dd 1f       	adc	r29, r29
    6d42:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6d44:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
    6d46:	ec 01       	movw	r28, r24
    6d48:	d5 95       	asr	r29
    6d4a:	c7 95       	ror	r28
    6d4c:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6d4e:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
    6d50:	ec 01       	movw	r28, r24
    6d52:	a3 e0       	ldi	r26, 0x03	; 3
    6d54:	d5 95       	asr	r29
    6d56:	c7 95       	ror	r28
    6d58:	aa 95       	dec	r26
    6d5a:	e1 f7       	brne	.-8      	; 0x6d54 <SoftSPIB::transfer(unsigned char)+0x74>
    6d5c:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
    6d5e:	6c 2b       	or	r22, r28
    6d60:	b5 e0       	ldi	r27, 0x05	; 5
    6d62:	95 95       	asr	r25
    6d64:	87 95       	ror	r24
    6d66:	ba 95       	dec	r27
    6d68:	e1 f7       	brne	.-8      	; 0x6d62 <SoftSPIB::transfer(unsigned char)+0x82>
    6d6a:	82 70       	andi	r24, 0x02	; 2
    6d6c:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
    6d6e:	91 e0       	ldi	r25, 0x01	; 1
    6d70:	80 e0       	ldi	r24, 0x00	; 0
    6d72:	f8 01       	movw	r30, r16
    6d74:	21 81       	ldd	r18, Z+1	; 0x01
    6d76:	21 11       	cpse	r18, r1
    6d78:	01 c0       	rjmp	.+2      	; 0x6d7c <SoftSPIB::transfer(unsigned char)+0x9c>
    6d7a:	90 e0       	ldi	r25, 0x00	; 0
    6d7c:	e9 2e       	mov	r14, r25
    6d7e:	f8 2e       	mov	r15, r24
    6d80:	d1 2c       	mov	r13, r1
    6d82:	c1 2c       	mov	r12, r1
    6d84:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    6d86:	c6 2f       	mov	r28, r22
    6d88:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
    6d8a:	f8 01       	movw	r30, r16
    6d8c:	80 81       	ld	r24, Z
    6d8e:	88 23       	and	r24, r24
    6d90:	39 f0       	breq	.+14     	; 0x6da0 <SoftSPIB::transfer(unsigned char)+0xc0>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
    6d92:	f1 e0       	ldi	r31, 0x01	; 1
    6d94:	ef 26       	eor	r14, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
    6d96:	6e 2d       	mov	r22, r14
    6d98:	f8 01       	movw	r30, r16
    6d9a:	85 81       	ldd	r24, Z+5	; 0x05
    6d9c:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    6da0:	be 01       	movw	r22, r28
    6da2:	0c 2c       	mov	r0, r12
    6da4:	02 c0       	rjmp	.+4      	; 0x6daa <SoftSPIB::transfer(unsigned char)+0xca>
    6da6:	75 95       	asr	r23
    6da8:	67 95       	ror	r22
    6daa:	0a 94       	dec	r0
    6dac:	e2 f7       	brpl	.-8      	; 0x6da6 <SoftSPIB::transfer(unsigned char)+0xc6>
    6dae:	61 70       	andi	r22, 0x01	; 1
    6db0:	f8 01       	movw	r30, r16
    6db2:	84 81       	ldd	r24, Z+4	; 0x04
    6db4:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
    6db8:	57 01       	movw	r10, r14
    6dba:	f1 e0       	ldi	r31, 0x01	; 1
    6dbc:	af 26       	eor	r10, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
    6dbe:	6a 2d       	mov	r22, r10
    6dc0:	f8 01       	movw	r30, r16
    6dc2:	85 81       	ldd	r24, Z+5	; 0x05
    6dc4:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
    6dc8:	f8 01       	movw	r30, r16
    6dca:	23 81       	ldd	r18, Z+3	; 0x03
    6dcc:	30 e0       	ldi	r19, 0x00	; 0
    6dce:	f9 01       	movw	r30, r18
    6dd0:	e3 50       	subi	r30, 0x03	; 3
    6dd2:	fa 4c       	sbci	r31, 0xCA	; 202
    6dd4:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    6dd6:	f9 01       	movw	r30, r18
    6dd8:	e2 5c       	subi	r30, 0xC2	; 194
    6dda:	f4 4c       	sbci	r31, 0xC4	; 196
    6ddc:	84 90       	lpm	r8, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    6dde:	f9 01       	movw	r30, r18
    6de0:	ec 57       	subi	r30, 0x7C	; 124
    6de2:	f4 4c       	sbci	r31, 0xC4	; 196
    6de4:	74 90       	lpm	r7, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    6de6:	77 20       	and	r7, r7
    6de8:	a9 f1       	breq	.+106    	; 0x6e54 <SoftSPIB::transfer(unsigned char)+0x174>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6dea:	81 11       	cpse	r24, r1
    6dec:	0e 94 0c 89 	call	0x11218	; 0x11218 <turnOffPWM.lto_priv.233>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    6df0:	e7 2d       	mov	r30, r7
    6df2:	f0 e0       	ldi	r31, 0x00	; 0
    6df4:	ee 0f       	add	r30, r30
    6df6:	ff 1f       	adc	r31, r31
    6df8:	e2 5d       	subi	r30, 0xD2	; 210
    6dfa:	f4 4c       	sbci	r31, 0xC4	; 196
    6dfc:	a5 91       	lpm	r26, Z+
    6dfe:	b4 91       	lpm	r27, Z
    6e00:	ec 91       	ld	r30, X
    6e02:	8e 22       	and	r8, r30
    6e04:	31 e0       	ldi	r19, 0x01	; 1
    6e06:	20 e0       	ldi	r18, 0x00	; 0
    6e08:	09 f4       	brne	.+2      	; 0x6e0c <SoftSPIB::transfer(unsigned char)+0x12c>
    6e0a:	30 e0       	ldi	r19, 0x00	; 0
_ZN8SoftSPIB8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    6e0c:	83 2f       	mov	r24, r19
    6e0e:	92 2f       	mov	r25, r18
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

        /* ... Read bit */
        {
            bval = digitalRead(_miso);

            if (_order == MSBFIRST) {
    6e10:	f8 01       	movw	r30, r16
    6e12:	26 81       	ldd	r18, Z+6	; 0x06
    6e14:	21 11       	cpse	r18, r1
    6e16:	21 c0       	rjmp	.+66     	; 0x6e5a <SoftSPIB::transfer(unsigned char)+0x17a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
    6e18:	99 0c       	add	r9, r9
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    6e1a:	98 2a       	or	r9, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
    6e1c:	f8 01       	movw	r30, r16
    6e1e:	80 81       	ld	r24, Z
    6e20:	88 23       	and	r24, r24
    6e22:	11 f1       	breq	.+68     	; 0x6e68 <SoftSPIB::transfer(unsigned char)+0x188>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
    6e24:	75 01       	movw	r14, r10
    6e26:	ff ef       	ldi	r31, 0xFF	; 255
    6e28:	cf 1a       	sub	r12, r31
    6e2a:	df 0a       	sbc	r13, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    6e2c:	28 e0       	ldi	r18, 0x08	; 8
    6e2e:	c2 16       	cp	r12, r18
    6e30:	d1 04       	cpc	r13, r1
    6e32:	09 f0       	breq	.+2      	; 0x6e36 <SoftSPIB::transfer(unsigned char)+0x156>
    6e34:	aa cf       	rjmp	.-172    	; 0x6d8a <SoftSPIB::transfer(unsigned char)+0xaa>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
    6e36:	89 2d       	mov	r24, r9
    6e38:	df 91       	pop	r29
    6e3a:	cf 91       	pop	r28
    6e3c:	1f 91       	pop	r17
    6e3e:	0f 91       	pop	r16
    6e40:	ff 90       	pop	r15
    6e42:	ef 90       	pop	r14
    6e44:	df 90       	pop	r13
    6e46:	cf 90       	pop	r12
    6e48:	bf 90       	pop	r11
    6e4a:	af 90       	pop	r10
    6e4c:	9f 90       	pop	r9
    6e4e:	8f 90       	pop	r8
    6e50:	7f 90       	pop	r7
    6e52:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
    6e54:	90 e0       	ldi	r25, 0x00	; 0
    6e56:	80 e0       	ldi	r24, 0x00	; 0
    6e58:	db cf       	rjmp	.-74     	; 0x6e10 <SoftSPIB::transfer(unsigned char)+0x130>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    6e5a:	96 95       	lsr	r25
    6e5c:	98 2f       	mov	r25, r24
    6e5e:	88 27       	eor	r24, r24
    6e60:	97 95       	ror	r25
    6e62:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
    6e64:	96 94       	lsr	r9
    6e66:	d9 cf       	rjmp	.-78     	; 0x6e1a <SoftSPIB::transfer(unsigned char)+0x13a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
    6e68:	6e 2d       	mov	r22, r14
    6e6a:	85 81       	ldd	r24, Z+5	; 0x05
    6e6c:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
    6e70:	da cf       	rjmp	.-76     	; 0x6e26 <SoftSPIB::transfer(unsigned char)+0x146>

00006e72 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    6e72:	cf 93       	push	r28
    6e74:	df 93       	push	r29
    6e76:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:306
  	CS_ACTIVE;
    6e78:	a6 a5       	ldd	r26, Z+46	; 0x2e
    6e7a:	b7 a5       	ldd	r27, Z+47	; 0x2f
    6e7c:	8c 91       	ld	r24, X
    6e7e:	92 ad       	ldd	r25, Z+58	; 0x3a
    6e80:	89 23       	and	r24, r25
    6e82:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:307
    writeCmd16(cmd);
    6e84:	a0 a9       	ldd	r26, Z+48	; 0x30
    6e86:	b1 a9       	ldd	r27, Z+49	; 0x31
    6e88:	8c 91       	ld	r24, X
    6e8a:	93 ad       	ldd	r25, Z+59	; 0x3b
    6e8c:	89 23       	and	r24, r25
    6e8e:	8c 93       	st	X, r24
    6e90:	72 b9       	out	0x02, r23	; 2
    6e92:	a2 a9       	ldd	r26, Z+50	; 0x32
    6e94:	b3 a9       	ldd	r27, Z+51	; 0x33
    6e96:	8c 91       	ld	r24, X
    6e98:	94 ad       	ldd	r25, Z+60	; 0x3c
    6e9a:	89 23       	and	r24, r25
    6e9c:	8c 93       	st	X, r24
    6e9e:	a2 a9       	ldd	r26, Z+50	; 0x32
    6ea0:	b3 a9       	ldd	r27, Z+51	; 0x33
    6ea2:	8c 91       	ld	r24, X
    6ea4:	90 ad       	ldd	r25, Z+56	; 0x38
    6ea6:	89 2b       	or	r24, r25
    6ea8:	8c 93       	st	X, r24
    6eaa:	62 b9       	out	0x02, r22	; 2
    6eac:	a2 a9       	ldd	r26, Z+50	; 0x32
    6eae:	b3 a9       	ldd	r27, Z+51	; 0x33
    6eb0:	8c 91       	ld	r24, X
    6eb2:	94 ad       	ldd	r25, Z+60	; 0x3c
    6eb4:	89 23       	and	r24, r25
    6eb6:	8c 93       	st	X, r24
    6eb8:	a2 a9       	ldd	r26, Z+50	; 0x32
    6eba:	b3 a9       	ldd	r27, Z+51	; 0x33
    6ebc:	8c 91       	ld	r24, X
    6ebe:	90 ad       	ldd	r25, Z+56	; 0x38
    6ec0:	89 2b       	or	r24, r25
    6ec2:	8c 93       	st	X, r24
    6ec4:	a0 a9       	ldd	r26, Z+48	; 0x30
    6ec6:	b1 a9       	ldd	r27, Z+49	; 0x31
    6ec8:	8c 91       	ld	r24, X
    6eca:	97 a9       	ldd	r25, Z+55	; 0x37
    6ecc:	89 2b       	or	r24, r25
    6ece:	8c 93       	st	X, r24
    6ed0:	da 01       	movw	r26, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:308
    while (N-- > 0) 
    6ed2:	9f ef       	ldi	r25, 0xFF	; 255
    6ed4:	92 0f       	add	r25, r18
    6ed6:	12 16       	cp	r1, r18
    6ed8:	0c f0       	brlt	.+2      	; 0x6edc <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
    6eda:	3f c0       	rjmp	.+126    	; 0x6f5a <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:310
	{
        uint8_t u8 = *block++;
    6edc:	8d 91       	ld	r24, X+
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:311
        writeData8(u8); 
    6ede:	82 b9       	out	0x02, r24	; 2
    6ee0:	c2 a9       	ldd	r28, Z+50	; 0x32
    6ee2:	d3 a9       	ldd	r29, Z+51	; 0x33
    6ee4:	88 81       	ld	r24, Y
    6ee6:	24 ad       	ldd	r18, Z+60	; 0x3c
    6ee8:	82 23       	and	r24, r18
    6eea:	88 83       	st	Y, r24
    6eec:	c2 a9       	ldd	r28, Z+50	; 0x32
    6eee:	d3 a9       	ldd	r29, Z+51	; 0x33
    6ef0:	88 81       	ld	r24, Y
    6ef2:	20 ad       	ldd	r18, Z+56	; 0x38
    6ef4:	82 2b       	or	r24, r18
    6ef6:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:312
		if(N && (lcd_driver == ID_7575))
    6ef8:	99 23       	and	r25, r25
    6efa:	69 f1       	breq	.+90     	; 0x6f56 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
    6efc:	20 8d       	ldd	r18, Z+24	; 0x18
    6efe:	31 8d       	ldd	r19, Z+25	; 0x19
    6f00:	21 30       	cpi	r18, 0x01	; 1
    6f02:	31 05       	cpc	r19, r1
    6f04:	41 f5       	brne	.+80     	; 0x6f56 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:314
		{
			cmd++;
    6f06:	6f 5f       	subi	r22, 0xFF	; 255
    6f08:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:315
			writeCmd16(cmd);
    6f0a:	c0 a9       	ldd	r28, Z+48	; 0x30
    6f0c:	d1 a9       	ldd	r29, Z+49	; 0x31
    6f0e:	88 81       	ld	r24, Y
    6f10:	23 ad       	ldd	r18, Z+59	; 0x3b
    6f12:	82 23       	and	r24, r18
    6f14:	88 83       	st	Y, r24
    6f16:	72 b9       	out	0x02, r23	; 2
    6f18:	c2 a9       	ldd	r28, Z+50	; 0x32
    6f1a:	d3 a9       	ldd	r29, Z+51	; 0x33
    6f1c:	88 81       	ld	r24, Y
    6f1e:	24 ad       	ldd	r18, Z+60	; 0x3c
    6f20:	82 23       	and	r24, r18
    6f22:	88 83       	st	Y, r24
    6f24:	c2 a9       	ldd	r28, Z+50	; 0x32
    6f26:	d3 a9       	ldd	r29, Z+51	; 0x33
    6f28:	88 81       	ld	r24, Y
    6f2a:	20 ad       	ldd	r18, Z+56	; 0x38
    6f2c:	82 2b       	or	r24, r18
    6f2e:	88 83       	st	Y, r24
    6f30:	62 b9       	out	0x02, r22	; 2
    6f32:	c2 a9       	ldd	r28, Z+50	; 0x32
    6f34:	d3 a9       	ldd	r29, Z+51	; 0x33
    6f36:	88 81       	ld	r24, Y
    6f38:	24 ad       	ldd	r18, Z+60	; 0x3c
    6f3a:	82 23       	and	r24, r18
    6f3c:	88 83       	st	Y, r24
    6f3e:	c2 a9       	ldd	r28, Z+50	; 0x32
    6f40:	d3 a9       	ldd	r29, Z+51	; 0x33
    6f42:	88 81       	ld	r24, Y
    6f44:	20 ad       	ldd	r18, Z+56	; 0x38
    6f46:	82 2b       	or	r24, r18
    6f48:	88 83       	st	Y, r24
    6f4a:	c0 a9       	ldd	r28, Z+48	; 0x30
    6f4c:	d1 a9       	ldd	r29, Z+49	; 0x31
    6f4e:	88 81       	ld	r24, Y
    6f50:	27 a9       	ldd	r18, Z+55	; 0x37
    6f52:	82 2b       	or	r24, r18
    6f54:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    6f56:	29 2f       	mov	r18, r25
    6f58:	bc cf       	rjmp	.-136    	; 0x6ed2 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:318
		{
			cmd++;
			writeCmd16(cmd);
		}
    }
    CS_IDLE;
    6f5a:	a6 a5       	ldd	r26, Z+46	; 0x2e
    6f5c:	b7 a5       	ldd	r27, Z+47	; 0x2f
    6f5e:	8c 91       	ld	r24, X
    6f60:	96 a9       	ldd	r25, Z+54	; 0x36
    6f62:	89 2b       	or	r24, r25
    6f64:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:319
}
    6f66:	df 91       	pop	r29
    6f68:	cf 91       	pop	r28
    6f6a:	08 95       	ret

00006f6c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:323

// Sets the LCD address window 
void LCDWIKI_KBV::Set_Addr_Window(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
    6f6c:	af 92       	push	r10
    6f6e:	bf 92       	push	r11
    6f70:	cf 92       	push	r12
    6f72:	df 92       	push	r13
    6f74:	ef 92       	push	r14
    6f76:	ff 92       	push	r15
    6f78:	0f 93       	push	r16
    6f7a:	1f 93       	push	r17
    6f7c:	cf 93       	push	r28
    6f7e:	df 93       	push	r29
    6f80:	00 d0       	rcall	.+0      	; 0x6f82 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
    6f82:	00 d0       	rcall	.+0      	; 0x6f84 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
    6f84:	1f 92       	push	r1
    6f86:	1f 92       	push	r1
    6f88:	cd b7       	in	r28, 0x3d	; 61
    6f8a:	de b7       	in	r29, 0x3e	; 62
    6f8c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:324
	CS_ACTIVE;
    6f8e:	dc 01       	movw	r26, r24
    6f90:	9e 96       	adiw	r26, 0x2e	; 46
    6f92:	ed 91       	ld	r30, X+
    6f94:	fc 91       	ld	r31, X
    6f96:	9f 97       	sbiw	r26, 0x2f	; 47
    6f98:	80 81       	ld	r24, Z
    6f9a:	da 96       	adiw	r26, 0x3a	; 58
    6f9c:	9c 91       	ld	r25, X
    6f9e:	da 97       	sbiw	r26, 0x3a	; 58
    6fa0:	89 23       	and	r24, r25
    6fa2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:325
	if(lcd_driver == ID_932X) 
    6fa4:	58 96       	adiw	r26, 0x18	; 24
    6fa6:	8d 91       	ld	r24, X+
    6fa8:	9c 91       	ld	r25, X
    6faa:	59 97       	sbiw	r26, 0x19	; 25
    6fac:	00 97       	sbiw	r24, 0x00	; 0
    6fae:	09 f0       	breq	.+2      	; 0x6fb2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
    6fb0:	44 c3       	rjmp	.+1672   	; 0x763a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:336
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
    6fb2:	56 96       	adiw	r26, 0x16	; 22
    6fb4:	8d 91       	ld	r24, X+
    6fb6:	9c 91       	ld	r25, X
    6fb8:	57 97       	sbiw	r26, 0x17	; 23
    6fba:	82 30       	cpi	r24, 0x02	; 2
    6fbc:	91 05       	cpc	r25, r1
    6fbe:	09 f4       	brne	.+2      	; 0x6fc2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
    6fc0:	0b c3       	rjmp	.+1558   	; 0x75d8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
    6fc2:	83 30       	cpi	r24, 0x03	; 3
    6fc4:	91 05       	cpc	r25, r1
    6fc6:	09 f4       	brne	.+2      	; 0x6fca <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
    6fc8:	23 c3       	rjmp	.+1606   	; 0x7610 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
    6fca:	01 97       	sbiw	r24, 0x01	; 1
    6fcc:	09 f0       	breq	.+2      	; 0x6fd0 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
    6fce:	32 c3       	rjmp	.+1636   	; 0x7634 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
    6fd0:	1e 96       	adiw	r26, 0x0e	; 14
    6fd2:	0d 90       	ld	r0, X+
    6fd4:	bc 91       	ld	r27, X
    6fd6:	a0 2d       	mov	r26, r0
    6fd8:	68 01       	movw	r12, r16
    6fda:	c0 94       	com	r12
    6fdc:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      y2 = x2;
			      x2 = WIDTH  - 1 - t;
    6fde:	40 95       	com	r20
    6fe0:	50 95       	com	r21
    6fe2:	fa 01       	movw	r30, r20
    6fe4:	ea 0f       	add	r30, r26
    6fe6:	fb 1f       	adc	r31, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:349
			      x  = x2;
			      y  = y1;
    6fe8:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:346
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
			      y2 = x2;
    6fea:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      x2 = WIDTH  - 1 - t;
    6fec:	9f 01       	movw	r18, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:344
			      x  = x1;
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
    6fee:	ab 01       	movw	r20, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      x1 = WIDTH  - 1 - y2;
    6ff0:	b6 01       	movw	r22, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    6ff2:	6a 0f       	add	r22, r26
    6ff4:	7b 1f       	adc	r23, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:371
			      y2 = HEIGHT - 1 - t;
			      x  = x1;
			      y  = y2;
			      break;
    	}
    writeCmdData16(ILI932X_HOR_START_AD, x1); // Set address window
    6ff6:	d7 01       	movw	r26, r14
    6ff8:	d0 96       	adiw	r26, 0x30	; 48
    6ffa:	cd 90       	ld	r12, X+
    6ffc:	dc 90       	ld	r13, X
    6ffe:	d6 01       	movw	r26, r12
    7000:	bc 90       	ld	r11, X
    7002:	d7 01       	movw	r26, r14
    7004:	db 96       	adiw	r26, 0x3b	; 59
    7006:	ac 90       	ld	r10, X
    7008:	ba 20       	and	r11, r10
    700a:	d6 01       	movw	r26, r12
    700c:	bc 92       	st	X, r11
    700e:	12 b8       	out	0x02, r1	; 2
    7010:	d7 01       	movw	r26, r14
    7012:	d2 96       	adiw	r26, 0x32	; 50
    7014:	cd 90       	ld	r12, X+
    7016:	dc 90       	ld	r13, X
    7018:	d6 01       	movw	r26, r12
    701a:	bc 90       	ld	r11, X
    701c:	d7 01       	movw	r26, r14
    701e:	dc 96       	adiw	r26, 0x3c	; 60
    7020:	ac 90       	ld	r10, X
    7022:	ba 20       	and	r11, r10
    7024:	d6 01       	movw	r26, r12
    7026:	bc 92       	st	X, r11
    7028:	d7 01       	movw	r26, r14
    702a:	d2 96       	adiw	r26, 0x32	; 50
    702c:	cd 90       	ld	r12, X+
    702e:	dc 90       	ld	r13, X
    7030:	d6 01       	movw	r26, r12
    7032:	bc 90       	ld	r11, X
    7034:	d7 01       	movw	r26, r14
    7036:	d8 96       	adiw	r26, 0x38	; 56
    7038:	ac 90       	ld	r10, X
    703a:	ba 28       	or	r11, r10
    703c:	d6 01       	movw	r26, r12
    703e:	bc 92       	st	X, r11
    7040:	a0 e5       	ldi	r26, 0x50	; 80
    7042:	a2 b9       	out	0x02, r26	; 2
    7044:	d7 01       	movw	r26, r14
    7046:	d2 96       	adiw	r26, 0x32	; 50
    7048:	cd 90       	ld	r12, X+
    704a:	dc 90       	ld	r13, X
    704c:	d6 01       	movw	r26, r12
    704e:	bc 90       	ld	r11, X
    7050:	d7 01       	movw	r26, r14
    7052:	dc 96       	adiw	r26, 0x3c	; 60
    7054:	ac 90       	ld	r10, X
    7056:	ba 20       	and	r11, r10
    7058:	d6 01       	movw	r26, r12
    705a:	bc 92       	st	X, r11
    705c:	d7 01       	movw	r26, r14
    705e:	d2 96       	adiw	r26, 0x32	; 50
    7060:	cd 90       	ld	r12, X+
    7062:	dc 90       	ld	r13, X
    7064:	d6 01       	movw	r26, r12
    7066:	bc 90       	ld	r11, X
    7068:	d7 01       	movw	r26, r14
    706a:	d8 96       	adiw	r26, 0x38	; 56
    706c:	ac 90       	ld	r10, X
    706e:	ba 28       	or	r11, r10
    7070:	d6 01       	movw	r26, r12
    7072:	bc 92       	st	X, r11
    7074:	d7 01       	movw	r26, r14
    7076:	d0 96       	adiw	r26, 0x30	; 48
    7078:	cd 90       	ld	r12, X+
    707a:	dc 90       	ld	r13, X
    707c:	d6 01       	movw	r26, r12
    707e:	bc 90       	ld	r11, X
    7080:	d7 01       	movw	r26, r14
    7082:	d7 96       	adiw	r26, 0x37	; 55
    7084:	ac 90       	ld	r10, X
    7086:	ba 28       	or	r11, r10
    7088:	d6 01       	movw	r26, r12
    708a:	bc 92       	st	X, r11
    708c:	72 b9       	out	0x02, r23	; 2
    708e:	d7 01       	movw	r26, r14
    7090:	d2 96       	adiw	r26, 0x32	; 50
    7092:	ad 90       	ld	r10, X+
    7094:	bc 90       	ld	r11, X
    7096:	d5 01       	movw	r26, r10
    7098:	7c 91       	ld	r23, X
    709a:	d7 01       	movw	r26, r14
    709c:	dc 96       	adiw	r26, 0x3c	; 60
    709e:	dc 90       	ld	r13, X
    70a0:	7d 21       	and	r23, r13
    70a2:	d5 01       	movw	r26, r10
    70a4:	7c 93       	st	X, r23
    70a6:	d7 01       	movw	r26, r14
    70a8:	d2 96       	adiw	r26, 0x32	; 50
    70aa:	ad 90       	ld	r10, X+
    70ac:	bc 90       	ld	r11, X
    70ae:	d5 01       	movw	r26, r10
    70b0:	7c 91       	ld	r23, X
    70b2:	d7 01       	movw	r26, r14
    70b4:	d8 96       	adiw	r26, 0x38	; 56
    70b6:	dc 90       	ld	r13, X
    70b8:	7d 29       	or	r23, r13
    70ba:	d5 01       	movw	r26, r10
    70bc:	7c 93       	st	X, r23
    70be:	62 b9       	out	0x02, r22	; 2
    70c0:	d7 01       	movw	r26, r14
    70c2:	d2 96       	adiw	r26, 0x32	; 50
    70c4:	cd 90       	ld	r12, X+
    70c6:	dc 90       	ld	r13, X
    70c8:	d6 01       	movw	r26, r12
    70ca:	6c 91       	ld	r22, X
    70cc:	d7 01       	movw	r26, r14
    70ce:	dc 96       	adiw	r26, 0x3c	; 60
    70d0:	7c 91       	ld	r23, X
    70d2:	67 23       	and	r22, r23
    70d4:	d6 01       	movw	r26, r12
    70d6:	6c 93       	st	X, r22
    70d8:	d7 01       	movw	r26, r14
    70da:	d2 96       	adiw	r26, 0x32	; 50
    70dc:	cd 90       	ld	r12, X+
    70de:	dc 90       	ld	r13, X
    70e0:	d6 01       	movw	r26, r12
    70e2:	6c 91       	ld	r22, X
    70e4:	d7 01       	movw	r26, r14
    70e6:	d8 96       	adiw	r26, 0x38	; 56
    70e8:	7c 91       	ld	r23, X
    70ea:	67 2b       	or	r22, r23
    70ec:	d6 01       	movw	r26, r12
    70ee:	6c 93       	st	X, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:372
    writeCmdData16(ILI932X_HOR_END_AD, x2);
    70f0:	d7 01       	movw	r26, r14
    70f2:	d0 96       	adiw	r26, 0x30	; 48
    70f4:	cd 90       	ld	r12, X+
    70f6:	dc 90       	ld	r13, X
    70f8:	d6 01       	movw	r26, r12
    70fa:	6c 91       	ld	r22, X
    70fc:	d7 01       	movw	r26, r14
    70fe:	db 96       	adiw	r26, 0x3b	; 59
    7100:	7c 91       	ld	r23, X
    7102:	67 23       	and	r22, r23
    7104:	d6 01       	movw	r26, r12
    7106:	6c 93       	st	X, r22
    7108:	12 b8       	out	0x02, r1	; 2
    710a:	d7 01       	movw	r26, r14
    710c:	d2 96       	adiw	r26, 0x32	; 50
    710e:	cd 90       	ld	r12, X+
    7110:	dc 90       	ld	r13, X
    7112:	d6 01       	movw	r26, r12
    7114:	6c 91       	ld	r22, X
    7116:	d7 01       	movw	r26, r14
    7118:	dc 96       	adiw	r26, 0x3c	; 60
    711a:	7c 91       	ld	r23, X
    711c:	67 23       	and	r22, r23
    711e:	d6 01       	movw	r26, r12
    7120:	6c 93       	st	X, r22
    7122:	d7 01       	movw	r26, r14
    7124:	d2 96       	adiw	r26, 0x32	; 50
    7126:	cd 90       	ld	r12, X+
    7128:	dc 90       	ld	r13, X
    712a:	d6 01       	movw	r26, r12
    712c:	6c 91       	ld	r22, X
    712e:	d7 01       	movw	r26, r14
    7130:	d8 96       	adiw	r26, 0x38	; 56
    7132:	7c 91       	ld	r23, X
    7134:	67 2b       	or	r22, r23
    7136:	d6 01       	movw	r26, r12
    7138:	6c 93       	st	X, r22
    713a:	61 e5       	ldi	r22, 0x51	; 81
    713c:	62 b9       	out	0x02, r22	; 2
    713e:	d7 01       	movw	r26, r14
    7140:	d2 96       	adiw	r26, 0x32	; 50
    7142:	cd 90       	ld	r12, X+
    7144:	dc 90       	ld	r13, X
    7146:	d6 01       	movw	r26, r12
    7148:	6c 91       	ld	r22, X
    714a:	d7 01       	movw	r26, r14
    714c:	dc 96       	adiw	r26, 0x3c	; 60
    714e:	7c 91       	ld	r23, X
    7150:	67 23       	and	r22, r23
    7152:	d6 01       	movw	r26, r12
    7154:	6c 93       	st	X, r22
    7156:	d7 01       	movw	r26, r14
    7158:	d2 96       	adiw	r26, 0x32	; 50
    715a:	cd 90       	ld	r12, X+
    715c:	dc 90       	ld	r13, X
    715e:	d6 01       	movw	r26, r12
    7160:	6c 91       	ld	r22, X
    7162:	d7 01       	movw	r26, r14
    7164:	d8 96       	adiw	r26, 0x38	; 56
    7166:	7c 91       	ld	r23, X
    7168:	67 2b       	or	r22, r23
    716a:	d6 01       	movw	r26, r12
    716c:	6c 93       	st	X, r22
    716e:	d7 01       	movw	r26, r14
    7170:	d0 96       	adiw	r26, 0x30	; 48
    7172:	cd 90       	ld	r12, X+
    7174:	dc 90       	ld	r13, X
    7176:	d6 01       	movw	r26, r12
    7178:	6c 91       	ld	r22, X
    717a:	d7 01       	movw	r26, r14
    717c:	d7 96       	adiw	r26, 0x37	; 55
    717e:	7c 91       	ld	r23, X
    7180:	67 2b       	or	r22, r23
    7182:	d6 01       	movw	r26, r12
    7184:	6c 93       	st	X, r22
    7186:	32 b9       	out	0x02, r19	; 2
    7188:	d7 01       	movw	r26, r14
    718a:	d2 96       	adiw	r26, 0x32	; 50
    718c:	cd 90       	ld	r12, X+
    718e:	dc 90       	ld	r13, X
    7190:	d6 01       	movw	r26, r12
    7192:	3c 91       	ld	r19, X
    7194:	d7 01       	movw	r26, r14
    7196:	dc 96       	adiw	r26, 0x3c	; 60
    7198:	6c 91       	ld	r22, X
    719a:	36 23       	and	r19, r22
    719c:	d6 01       	movw	r26, r12
    719e:	3c 93       	st	X, r19
    71a0:	d7 01       	movw	r26, r14
    71a2:	d2 96       	adiw	r26, 0x32	; 50
    71a4:	cd 90       	ld	r12, X+
    71a6:	dc 90       	ld	r13, X
    71a8:	d6 01       	movw	r26, r12
    71aa:	3c 91       	ld	r19, X
    71ac:	d7 01       	movw	r26, r14
    71ae:	d8 96       	adiw	r26, 0x38	; 56
    71b0:	6c 91       	ld	r22, X
    71b2:	36 2b       	or	r19, r22
    71b4:	d6 01       	movw	r26, r12
    71b6:	3c 93       	st	X, r19
    71b8:	22 b9       	out	0x02, r18	; 2
    71ba:	d7 01       	movw	r26, r14
    71bc:	d2 96       	adiw	r26, 0x32	; 50
    71be:	6d 91       	ld	r22, X+
    71c0:	7c 91       	ld	r23, X
    71c2:	db 01       	movw	r26, r22
    71c4:	2c 91       	ld	r18, X
    71c6:	d7 01       	movw	r26, r14
    71c8:	dc 96       	adiw	r26, 0x3c	; 60
    71ca:	3c 91       	ld	r19, X
    71cc:	23 23       	and	r18, r19
    71ce:	db 01       	movw	r26, r22
    71d0:	2c 93       	st	X, r18
    71d2:	d7 01       	movw	r26, r14
    71d4:	d2 96       	adiw	r26, 0x32	; 50
    71d6:	6d 91       	ld	r22, X+
    71d8:	7c 91       	ld	r23, X
    71da:	db 01       	movw	r26, r22
    71dc:	2c 91       	ld	r18, X
    71de:	d7 01       	movw	r26, r14
    71e0:	d8 96       	adiw	r26, 0x38	; 56
    71e2:	3c 91       	ld	r19, X
    71e4:	23 2b       	or	r18, r19
    71e6:	db 01       	movw	r26, r22
    71e8:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:373
    writeCmdData16(ILI932X_VER_START_AD, y1);
    71ea:	d7 01       	movw	r26, r14
    71ec:	d0 96       	adiw	r26, 0x30	; 48
    71ee:	6d 91       	ld	r22, X+
    71f0:	7c 91       	ld	r23, X
    71f2:	db 01       	movw	r26, r22
    71f4:	2c 91       	ld	r18, X
    71f6:	d7 01       	movw	r26, r14
    71f8:	db 96       	adiw	r26, 0x3b	; 59
    71fa:	3c 91       	ld	r19, X
    71fc:	23 23       	and	r18, r19
    71fe:	db 01       	movw	r26, r22
    7200:	2c 93       	st	X, r18
    7202:	12 b8       	out	0x02, r1	; 2
    7204:	d7 01       	movw	r26, r14
    7206:	d2 96       	adiw	r26, 0x32	; 50
    7208:	6d 91       	ld	r22, X+
    720a:	7c 91       	ld	r23, X
    720c:	db 01       	movw	r26, r22
    720e:	2c 91       	ld	r18, X
    7210:	d7 01       	movw	r26, r14
    7212:	dc 96       	adiw	r26, 0x3c	; 60
    7214:	3c 91       	ld	r19, X
    7216:	23 23       	and	r18, r19
    7218:	db 01       	movw	r26, r22
    721a:	2c 93       	st	X, r18
    721c:	d7 01       	movw	r26, r14
    721e:	d2 96       	adiw	r26, 0x32	; 50
    7220:	6d 91       	ld	r22, X+
    7222:	7c 91       	ld	r23, X
    7224:	db 01       	movw	r26, r22
    7226:	2c 91       	ld	r18, X
    7228:	d7 01       	movw	r26, r14
    722a:	d8 96       	adiw	r26, 0x38	; 56
    722c:	3c 91       	ld	r19, X
    722e:	23 2b       	or	r18, r19
    7230:	db 01       	movw	r26, r22
    7232:	2c 93       	st	X, r18
    7234:	22 e5       	ldi	r18, 0x52	; 82
    7236:	22 b9       	out	0x02, r18	; 2
    7238:	d7 01       	movw	r26, r14
    723a:	d2 96       	adiw	r26, 0x32	; 50
    723c:	6d 91       	ld	r22, X+
    723e:	7c 91       	ld	r23, X
    7240:	db 01       	movw	r26, r22
    7242:	2c 91       	ld	r18, X
    7244:	d7 01       	movw	r26, r14
    7246:	dc 96       	adiw	r26, 0x3c	; 60
    7248:	3c 91       	ld	r19, X
    724a:	23 23       	and	r18, r19
    724c:	db 01       	movw	r26, r22
    724e:	2c 93       	st	X, r18
    7250:	d7 01       	movw	r26, r14
    7252:	d2 96       	adiw	r26, 0x32	; 50
    7254:	6d 91       	ld	r22, X+
    7256:	7c 91       	ld	r23, X
    7258:	db 01       	movw	r26, r22
    725a:	2c 91       	ld	r18, X
    725c:	d7 01       	movw	r26, r14
    725e:	d8 96       	adiw	r26, 0x38	; 56
    7260:	3c 91       	ld	r19, X
    7262:	23 2b       	or	r18, r19
    7264:	db 01       	movw	r26, r22
    7266:	2c 93       	st	X, r18
    7268:	d7 01       	movw	r26, r14
    726a:	d0 96       	adiw	r26, 0x30	; 48
    726c:	6d 91       	ld	r22, X+
    726e:	7c 91       	ld	r23, X
    7270:	db 01       	movw	r26, r22
    7272:	2c 91       	ld	r18, X
    7274:	d7 01       	movw	r26, r14
    7276:	d7 96       	adiw	r26, 0x37	; 55
    7278:	3c 91       	ld	r19, X
    727a:	23 2b       	or	r18, r19
    727c:	db 01       	movw	r26, r22
    727e:	2c 93       	st	X, r18
    7280:	52 b9       	out	0x02, r21	; 2
    7282:	d7 01       	movw	r26, r14
    7284:	d2 96       	adiw	r26, 0x32	; 50
    7286:	6d 91       	ld	r22, X+
    7288:	7c 91       	ld	r23, X
    728a:	db 01       	movw	r26, r22
    728c:	2c 91       	ld	r18, X
    728e:	d7 01       	movw	r26, r14
    7290:	dc 96       	adiw	r26, 0x3c	; 60
    7292:	3c 91       	ld	r19, X
    7294:	23 23       	and	r18, r19
    7296:	db 01       	movw	r26, r22
    7298:	2c 93       	st	X, r18
    729a:	d7 01       	movw	r26, r14
    729c:	d2 96       	adiw	r26, 0x32	; 50
    729e:	6d 91       	ld	r22, X+
    72a0:	7c 91       	ld	r23, X
    72a2:	db 01       	movw	r26, r22
    72a4:	2c 91       	ld	r18, X
    72a6:	d7 01       	movw	r26, r14
    72a8:	d8 96       	adiw	r26, 0x38	; 56
    72aa:	3c 91       	ld	r19, X
    72ac:	23 2b       	or	r18, r19
    72ae:	db 01       	movw	r26, r22
    72b0:	2c 93       	st	X, r18
    72b2:	42 b9       	out	0x02, r20	; 2
    72b4:	d7 01       	movw	r26, r14
    72b6:	d2 96       	adiw	r26, 0x32	; 50
    72b8:	4d 91       	ld	r20, X+
    72ba:	5c 91       	ld	r21, X
    72bc:	da 01       	movw	r26, r20
    72be:	2c 91       	ld	r18, X
    72c0:	d7 01       	movw	r26, r14
    72c2:	dc 96       	adiw	r26, 0x3c	; 60
    72c4:	3c 91       	ld	r19, X
    72c6:	23 23       	and	r18, r19
    72c8:	da 01       	movw	r26, r20
    72ca:	2c 93       	st	X, r18
    72cc:	d7 01       	movw	r26, r14
    72ce:	d2 96       	adiw	r26, 0x32	; 50
    72d0:	4d 91       	ld	r20, X+
    72d2:	5c 91       	ld	r21, X
    72d4:	da 01       	movw	r26, r20
    72d6:	2c 91       	ld	r18, X
    72d8:	d7 01       	movw	r26, r14
    72da:	d8 96       	adiw	r26, 0x38	; 56
    72dc:	3c 91       	ld	r19, X
    72de:	23 2b       	or	r18, r19
    72e0:	da 01       	movw	r26, r20
    72e2:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:374
    writeCmdData16(ILI932X_VER_END_AD, y2);
    72e4:	d7 01       	movw	r26, r14
    72e6:	d0 96       	adiw	r26, 0x30	; 48
    72e8:	4d 91       	ld	r20, X+
    72ea:	5c 91       	ld	r21, X
    72ec:	da 01       	movw	r26, r20
    72ee:	2c 91       	ld	r18, X
    72f0:	d7 01       	movw	r26, r14
    72f2:	db 96       	adiw	r26, 0x3b	; 59
    72f4:	3c 91       	ld	r19, X
    72f6:	23 23       	and	r18, r19
    72f8:	da 01       	movw	r26, r20
    72fa:	2c 93       	st	X, r18
    72fc:	12 b8       	out	0x02, r1	; 2
    72fe:	d7 01       	movw	r26, r14
    7300:	d2 96       	adiw	r26, 0x32	; 50
    7302:	4d 91       	ld	r20, X+
    7304:	5c 91       	ld	r21, X
    7306:	da 01       	movw	r26, r20
    7308:	2c 91       	ld	r18, X
    730a:	d7 01       	movw	r26, r14
    730c:	dc 96       	adiw	r26, 0x3c	; 60
    730e:	3c 91       	ld	r19, X
    7310:	23 23       	and	r18, r19
    7312:	da 01       	movw	r26, r20
    7314:	2c 93       	st	X, r18
    7316:	d7 01       	movw	r26, r14
    7318:	d2 96       	adiw	r26, 0x32	; 50
    731a:	4d 91       	ld	r20, X+
    731c:	5c 91       	ld	r21, X
    731e:	da 01       	movw	r26, r20
    7320:	2c 91       	ld	r18, X
    7322:	d7 01       	movw	r26, r14
    7324:	d8 96       	adiw	r26, 0x38	; 56
    7326:	3c 91       	ld	r19, X
    7328:	23 2b       	or	r18, r19
    732a:	da 01       	movw	r26, r20
    732c:	2c 93       	st	X, r18
    732e:	23 e5       	ldi	r18, 0x53	; 83
    7330:	22 b9       	out	0x02, r18	; 2
    7332:	d7 01       	movw	r26, r14
    7334:	d2 96       	adiw	r26, 0x32	; 50
    7336:	4d 91       	ld	r20, X+
    7338:	5c 91       	ld	r21, X
    733a:	da 01       	movw	r26, r20
    733c:	2c 91       	ld	r18, X
    733e:	d7 01       	movw	r26, r14
    7340:	dc 96       	adiw	r26, 0x3c	; 60
    7342:	3c 91       	ld	r19, X
    7344:	23 23       	and	r18, r19
    7346:	da 01       	movw	r26, r20
    7348:	2c 93       	st	X, r18
    734a:	d7 01       	movw	r26, r14
    734c:	d2 96       	adiw	r26, 0x32	; 50
    734e:	4d 91       	ld	r20, X+
    7350:	5c 91       	ld	r21, X
    7352:	da 01       	movw	r26, r20
    7354:	2c 91       	ld	r18, X
    7356:	d7 01       	movw	r26, r14
    7358:	d8 96       	adiw	r26, 0x38	; 56
    735a:	3c 91       	ld	r19, X
    735c:	23 2b       	or	r18, r19
    735e:	da 01       	movw	r26, r20
    7360:	2c 93       	st	X, r18
    7362:	d7 01       	movw	r26, r14
    7364:	d0 96       	adiw	r26, 0x30	; 48
    7366:	4d 91       	ld	r20, X+
    7368:	5c 91       	ld	r21, X
    736a:	da 01       	movw	r26, r20
    736c:	2c 91       	ld	r18, X
    736e:	d7 01       	movw	r26, r14
    7370:	d7 96       	adiw	r26, 0x37	; 55
    7372:	3c 91       	ld	r19, X
    7374:	23 2b       	or	r18, r19
    7376:	da 01       	movw	r26, r20
    7378:	2c 93       	st	X, r18
    737a:	12 b9       	out	0x02, r17	; 2
    737c:	d7 01       	movw	r26, r14
    737e:	d2 96       	adiw	r26, 0x32	; 50
    7380:	4d 91       	ld	r20, X+
    7382:	5c 91       	ld	r21, X
    7384:	da 01       	movw	r26, r20
    7386:	2c 91       	ld	r18, X
    7388:	d7 01       	movw	r26, r14
    738a:	dc 96       	adiw	r26, 0x3c	; 60
    738c:	3c 91       	ld	r19, X
    738e:	23 23       	and	r18, r19
    7390:	da 01       	movw	r26, r20
    7392:	2c 93       	st	X, r18
    7394:	d7 01       	movw	r26, r14
    7396:	d2 96       	adiw	r26, 0x32	; 50
    7398:	4d 91       	ld	r20, X+
    739a:	5c 91       	ld	r21, X
    739c:	da 01       	movw	r26, r20
    739e:	2c 91       	ld	r18, X
    73a0:	d7 01       	movw	r26, r14
    73a2:	d8 96       	adiw	r26, 0x38	; 56
    73a4:	3c 91       	ld	r19, X
    73a6:	23 2b       	or	r18, r19
    73a8:	da 01       	movw	r26, r20
    73aa:	2c 93       	st	X, r18
    73ac:	02 b9       	out	0x02, r16	; 2
    73ae:	d7 01       	movw	r26, r14
    73b0:	d2 96       	adiw	r26, 0x32	; 50
    73b2:	4d 91       	ld	r20, X+
    73b4:	5c 91       	ld	r21, X
    73b6:	da 01       	movw	r26, r20
    73b8:	2c 91       	ld	r18, X
    73ba:	d7 01       	movw	r26, r14
    73bc:	dc 96       	adiw	r26, 0x3c	; 60
    73be:	3c 91       	ld	r19, X
    73c0:	23 23       	and	r18, r19
    73c2:	da 01       	movw	r26, r20
    73c4:	2c 93       	st	X, r18
    73c6:	d7 01       	movw	r26, r14
    73c8:	d2 96       	adiw	r26, 0x32	; 50
    73ca:	4d 91       	ld	r20, X+
    73cc:	5c 91       	ld	r21, X
    73ce:	da 01       	movw	r26, r20
    73d0:	2c 91       	ld	r18, X
    73d2:	d7 01       	movw	r26, r14
    73d4:	d8 96       	adiw	r26, 0x38	; 56
    73d6:	3c 91       	ld	r19, X
    73d8:	23 2b       	or	r18, r19
    73da:	da 01       	movw	r26, r20
    73dc:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:375
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    73de:	d7 01       	movw	r26, r14
    73e0:	d0 96       	adiw	r26, 0x30	; 48
    73e2:	4d 91       	ld	r20, X+
    73e4:	5c 91       	ld	r21, X
    73e6:	da 01       	movw	r26, r20
    73e8:	2c 91       	ld	r18, X
    73ea:	d7 01       	movw	r26, r14
    73ec:	db 96       	adiw	r26, 0x3b	; 59
    73ee:	3c 91       	ld	r19, X
    73f0:	23 23       	and	r18, r19
    73f2:	da 01       	movw	r26, r20
    73f4:	2c 93       	st	X, r18
    73f6:	12 b8       	out	0x02, r1	; 2
    73f8:	d7 01       	movw	r26, r14
    73fa:	d2 96       	adiw	r26, 0x32	; 50
    73fc:	4d 91       	ld	r20, X+
    73fe:	5c 91       	ld	r21, X
    7400:	da 01       	movw	r26, r20
    7402:	2c 91       	ld	r18, X
    7404:	d7 01       	movw	r26, r14
    7406:	dc 96       	adiw	r26, 0x3c	; 60
    7408:	3c 91       	ld	r19, X
    740a:	23 23       	and	r18, r19
    740c:	da 01       	movw	r26, r20
    740e:	2c 93       	st	X, r18
    7410:	d7 01       	movw	r26, r14
    7412:	d2 96       	adiw	r26, 0x32	; 50
    7414:	4d 91       	ld	r20, X+
    7416:	5c 91       	ld	r21, X
    7418:	da 01       	movw	r26, r20
    741a:	2c 91       	ld	r18, X
    741c:	d7 01       	movw	r26, r14
    741e:	d8 96       	adiw	r26, 0x38	; 56
    7420:	3c 91       	ld	r19, X
    7422:	23 2b       	or	r18, r19
    7424:	da 01       	movw	r26, r20
    7426:	2c 93       	st	X, r18
    7428:	20 e2       	ldi	r18, 0x20	; 32
    742a:	22 b9       	out	0x02, r18	; 2
    742c:	d7 01       	movw	r26, r14
    742e:	d2 96       	adiw	r26, 0x32	; 50
    7430:	4d 91       	ld	r20, X+
    7432:	5c 91       	ld	r21, X
    7434:	da 01       	movw	r26, r20
    7436:	2c 91       	ld	r18, X
    7438:	d7 01       	movw	r26, r14
    743a:	dc 96       	adiw	r26, 0x3c	; 60
    743c:	3c 91       	ld	r19, X
    743e:	23 23       	and	r18, r19
    7440:	da 01       	movw	r26, r20
    7442:	2c 93       	st	X, r18
    7444:	d7 01       	movw	r26, r14
    7446:	d2 96       	adiw	r26, 0x32	; 50
    7448:	4d 91       	ld	r20, X+
    744a:	5c 91       	ld	r21, X
    744c:	da 01       	movw	r26, r20
    744e:	2c 91       	ld	r18, X
    7450:	d7 01       	movw	r26, r14
    7452:	d8 96       	adiw	r26, 0x38	; 56
    7454:	3c 91       	ld	r19, X
    7456:	23 2b       	or	r18, r19
    7458:	da 01       	movw	r26, r20
    745a:	2c 93       	st	X, r18
    745c:	d7 01       	movw	r26, r14
    745e:	d0 96       	adiw	r26, 0x30	; 48
    7460:	4d 91       	ld	r20, X+
    7462:	5c 91       	ld	r21, X
    7464:	da 01       	movw	r26, r20
    7466:	2c 91       	ld	r18, X
    7468:	d7 01       	movw	r26, r14
    746a:	d7 96       	adiw	r26, 0x37	; 55
    746c:	3c 91       	ld	r19, X
    746e:	23 2b       	or	r18, r19
    7470:	da 01       	movw	r26, r20
    7472:	2c 93       	st	X, r18
    7474:	f2 b9       	out	0x02, r31	; 2
    7476:	d7 01       	movw	r26, r14
    7478:	d2 96       	adiw	r26, 0x32	; 50
    747a:	4d 91       	ld	r20, X+
    747c:	5c 91       	ld	r21, X
    747e:	da 01       	movw	r26, r20
    7480:	2c 91       	ld	r18, X
    7482:	d7 01       	movw	r26, r14
    7484:	dc 96       	adiw	r26, 0x3c	; 60
    7486:	3c 91       	ld	r19, X
    7488:	23 23       	and	r18, r19
    748a:	da 01       	movw	r26, r20
    748c:	2c 93       	st	X, r18
    748e:	d7 01       	movw	r26, r14
    7490:	d2 96       	adiw	r26, 0x32	; 50
    7492:	4d 91       	ld	r20, X+
    7494:	5c 91       	ld	r21, X
    7496:	da 01       	movw	r26, r20
    7498:	2c 91       	ld	r18, X
    749a:	d7 01       	movw	r26, r14
    749c:	d8 96       	adiw	r26, 0x38	; 56
    749e:	3c 91       	ld	r19, X
    74a0:	23 2b       	or	r18, r19
    74a2:	da 01       	movw	r26, r20
    74a4:	2c 93       	st	X, r18
    74a6:	e2 b9       	out	0x02, r30	; 2
    74a8:	d7 01       	movw	r26, r14
    74aa:	d2 96       	adiw	r26, 0x32	; 50
    74ac:	ed 91       	ld	r30, X+
    74ae:	fc 91       	ld	r31, X
    74b0:	d3 97       	sbiw	r26, 0x33	; 51
    74b2:	20 81       	ld	r18, Z
    74b4:	dc 96       	adiw	r26, 0x3c	; 60
    74b6:	3c 91       	ld	r19, X
    74b8:	dc 97       	sbiw	r26, 0x3c	; 60
    74ba:	23 23       	and	r18, r19
    74bc:	20 83       	st	Z, r18
    74be:	d2 96       	adiw	r26, 0x32	; 50
    74c0:	ed 91       	ld	r30, X+
    74c2:	fc 91       	ld	r31, X
    74c4:	d3 97       	sbiw	r26, 0x33	; 51
    74c6:	20 81       	ld	r18, Z
    74c8:	d8 96       	adiw	r26, 0x38	; 56
    74ca:	3c 91       	ld	r19, X
    74cc:	d8 97       	sbiw	r26, 0x38	; 56
    74ce:	23 2b       	or	r18, r19
    74d0:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:376
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
    74d2:	d0 96       	adiw	r26, 0x30	; 48
    74d4:	ed 91       	ld	r30, X+
    74d6:	fc 91       	ld	r31, X
    74d8:	d1 97       	sbiw	r26, 0x31	; 49
    74da:	20 81       	ld	r18, Z
    74dc:	db 96       	adiw	r26, 0x3b	; 59
    74de:	3c 91       	ld	r19, X
    74e0:	db 97       	sbiw	r26, 0x3b	; 59
    74e2:	23 23       	and	r18, r19
    74e4:	20 83       	st	Z, r18
    74e6:	12 b8       	out	0x02, r1	; 2
    74e8:	d2 96       	adiw	r26, 0x32	; 50
    74ea:	ed 91       	ld	r30, X+
    74ec:	fc 91       	ld	r31, X
    74ee:	d3 97       	sbiw	r26, 0x33	; 51
    74f0:	20 81       	ld	r18, Z
    74f2:	dc 96       	adiw	r26, 0x3c	; 60
    74f4:	3c 91       	ld	r19, X
    74f6:	dc 97       	sbiw	r26, 0x3c	; 60
    74f8:	23 23       	and	r18, r19
    74fa:	20 83       	st	Z, r18
    74fc:	d2 96       	adiw	r26, 0x32	; 50
    74fe:	ed 91       	ld	r30, X+
    7500:	fc 91       	ld	r31, X
    7502:	d3 97       	sbiw	r26, 0x33	; 51
    7504:	20 81       	ld	r18, Z
    7506:	d8 96       	adiw	r26, 0x38	; 56
    7508:	3c 91       	ld	r19, X
    750a:	d8 97       	sbiw	r26, 0x38	; 56
    750c:	23 2b       	or	r18, r19
    750e:	20 83       	st	Z, r18
    7510:	21 e2       	ldi	r18, 0x21	; 33
    7512:	22 b9       	out	0x02, r18	; 2
    7514:	d2 96       	adiw	r26, 0x32	; 50
    7516:	ed 91       	ld	r30, X+
    7518:	fc 91       	ld	r31, X
    751a:	d3 97       	sbiw	r26, 0x33	; 51
    751c:	20 81       	ld	r18, Z
    751e:	dc 96       	adiw	r26, 0x3c	; 60
    7520:	3c 91       	ld	r19, X
    7522:	dc 97       	sbiw	r26, 0x3c	; 60
    7524:	23 23       	and	r18, r19
    7526:	20 83       	st	Z, r18
    7528:	d2 96       	adiw	r26, 0x32	; 50
    752a:	ed 91       	ld	r30, X+
    752c:	fc 91       	ld	r31, X
    752e:	d3 97       	sbiw	r26, 0x33	; 51
    7530:	20 81       	ld	r18, Z
    7532:	d8 96       	adiw	r26, 0x38	; 56
    7534:	3c 91       	ld	r19, X
    7536:	d8 97       	sbiw	r26, 0x38	; 56
    7538:	23 2b       	or	r18, r19
    753a:	20 83       	st	Z, r18
    753c:	d0 96       	adiw	r26, 0x30	; 48
    753e:	ed 91       	ld	r30, X+
    7540:	fc 91       	ld	r31, X
    7542:	d1 97       	sbiw	r26, 0x31	; 49
    7544:	20 81       	ld	r18, Z
    7546:	d7 96       	adiw	r26, 0x37	; 55
    7548:	3c 91       	ld	r19, X
    754a:	d7 97       	sbiw	r26, 0x37	; 55
    754c:	23 2b       	or	r18, r19
    754e:	20 83       	st	Z, r18
    7550:	92 b9       	out	0x02, r25	; 2
    7552:	d2 96       	adiw	r26, 0x32	; 50
    7554:	ed 91       	ld	r30, X+
    7556:	fc 91       	ld	r31, X
    7558:	d3 97       	sbiw	r26, 0x33	; 51
    755a:	90 81       	ld	r25, Z
    755c:	dc 96       	adiw	r26, 0x3c	; 60
    755e:	2c 91       	ld	r18, X
    7560:	dc 97       	sbiw	r26, 0x3c	; 60
    7562:	92 23       	and	r25, r18
    7564:	90 83       	st	Z, r25
    7566:	d2 96       	adiw	r26, 0x32	; 50
    7568:	ed 91       	ld	r30, X+
    756a:	fc 91       	ld	r31, X
    756c:	d3 97       	sbiw	r26, 0x33	; 51
    756e:	90 81       	ld	r25, Z
    7570:	d8 96       	adiw	r26, 0x38	; 56
    7572:	2c 91       	ld	r18, X
    7574:	d8 97       	sbiw	r26, 0x38	; 56
    7576:	92 2b       	or	r25, r18
    7578:	90 83       	st	Z, r25
    757a:	82 b9       	out	0x02, r24	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    757c:	d2 96       	adiw	r26, 0x32	; 50
    757e:	ed 91       	ld	r30, X+
    7580:	fc 91       	ld	r31, X
    7582:	d3 97       	sbiw	r26, 0x33	; 51
    7584:	80 81       	ld	r24, Z
    7586:	dc 96       	adiw	r26, 0x3c	; 60
    7588:	9c 91       	ld	r25, X
    758a:	dc 97       	sbiw	r26, 0x3c	; 60
    758c:	89 23       	and	r24, r25
    758e:	80 83       	st	Z, r24
    7590:	d2 96       	adiw	r26, 0x32	; 50
    7592:	ed 91       	ld	r30, X+
    7594:	fc 91       	ld	r31, X
    7596:	d3 97       	sbiw	r26, 0x33	; 51
    7598:	80 81       	ld	r24, Z
    759a:	d8 96       	adiw	r26, 0x38	; 56
    759c:	9c 91       	ld	r25, X
    759e:	89 2b       	or	r24, r25
    75a0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:397
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
	
		Push_Command(XC, x_buf, 4); //set x address
		Push_Command(YC, y_buf, 4); //set y address
	}
	CS_IDLE;		
    75a2:	d7 01       	movw	r26, r14
    75a4:	9e 96       	adiw	r26, 0x2e	; 46
    75a6:	ed 91       	ld	r30, X+
    75a8:	fc 91       	ld	r31, X
    75aa:	9f 97       	sbiw	r26, 0x2f	; 47
    75ac:	80 81       	ld	r24, Z
    75ae:	d6 96       	adiw	r26, 0x36	; 54
    75b0:	9c 91       	ld	r25, X
    75b2:	89 2b       	or	r24, r25
    75b4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:398
}
    75b6:	28 96       	adiw	r28, 0x08	; 8
    75b8:	0f b6       	in	r0, 0x3f	; 63
    75ba:	f8 94       	cli
    75bc:	de bf       	out	0x3e, r29	; 62
    75be:	0f be       	out	0x3f, r0	; 63
    75c0:	cd bf       	out	0x3d, r28	; 61
    75c2:	df 91       	pop	r29
    75c4:	cf 91       	pop	r28
    75c6:	1f 91       	pop	r17
    75c8:	0f 91       	pop	r16
    75ca:	ff 90       	pop	r15
    75cc:	ef 90       	pop	r14
    75ce:	df 90       	pop	r13
    75d0:	cf 90       	pop	r12
    75d2:	bf 90       	pop	r11
    75d4:	af 90       	pop	r10
    75d6:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    75d8:	f7 01       	movw	r30, r14
    75da:	a6 85       	ldd	r26, Z+14	; 0x0e
    75dc:	b7 85       	ldd	r27, Z+15	; 0x0f
    75de:	59 01       	movw	r10, r18
    75e0:	a0 94       	com	r10
    75e2:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:354
			      x2 = WIDTH  - 1 - t;
    75e4:	9d 01       	movw	r18, r26
    75e6:	26 1b       	sub	r18, r22
    75e8:	37 0b       	sbc	r19, r23
    75ea:	21 50       	subi	r18, 0x01	; 1
    75ec:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    75ee:	60 89       	ldd	r22, Z+16	; 0x10
    75f0:	71 89       	ldd	r23, Z+17	; 0x11
    75f2:	68 01       	movw	r12, r16
    75f4:	c0 94       	com	r12
    75f6:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:357
			      y2 = HEIGHT - 1 - t;
    75f8:	8a 01       	movw	r16, r20
    75fa:	00 95       	com	r16
    75fc:	10 95       	com	r17
    75fe:	06 0f       	add	r16, r22
    7600:	17 1f       	adc	r17, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:359
			      x  = x2;
			      y  = y2;
    7602:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:358
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
			      y2 = HEIGHT - 1 - t;
			      x  = x2;
    7604:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    7606:	a6 01       	movw	r20, r12
    7608:	46 0f       	add	r20, r22
    760a:	57 1f       	adc	r21, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    760c:	b5 01       	movw	r22, r10
    760e:	f1 cc       	rjmp	.-1566   	; 0x6ff2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
    7610:	f7 01       	movw	r30, r14
    7612:	a0 89       	ldd	r26, Z+16	; 0x10
    7614:	b1 89       	ldd	r27, Z+17	; 0x11
    7616:	69 01       	movw	r12, r18
    7618:	c0 94       	com	r12
    761a:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      x2 = y2;
			      y2 = HEIGHT - 1 - t;
    761c:	cd 01       	movw	r24, r26
    761e:	86 1b       	sub	r24, r22
    7620:	97 0b       	sbc	r25, r23
    7622:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:367
			      x  = x1;
    7624:	fa 01       	movw	r30, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:365
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
			      x2 = y2;
    7626:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      y2 = HEIGHT - 1 - t;
    7628:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:363
			      x  = x2;
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
    762a:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y1 = HEIGHT - 1 - x2;
    762c:	a6 01       	movw	r20, r12
    762e:	4a 0f       	add	r20, r26
    7630:	5b 1f       	adc	r21, r27
    7632:	e1 cc       	rjmp	.-1598   	; 0x6ff6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:340
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
			      y  = y1;
    7634:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:339
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
    7636:	fb 01       	movw	r30, r22
    7638:	de cc       	rjmp	.-1604   	; 0x6ff6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:378
    writeCmdData16(ILI932X_VER_START_AD, y1);
    writeCmdData16(ILI932X_VER_END_AD, y2);
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
 	} 
	else if(lcd_driver == ID_7575)
    763a:	01 97       	sbiw	r24, 0x01	; 1
    763c:	09 f0       	breq	.+2      	; 0x7640 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
    763e:	e5 c1       	rjmp	.+970    	; 0x7a0a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:380
	{
		writeCmdData8(HX8347G_COLADDRSTART_HI,x1>>8);
    7640:	d0 96       	adiw	r26, 0x30	; 48
    7642:	ed 91       	ld	r30, X+
    7644:	fc 91       	ld	r31, X
    7646:	d1 97       	sbiw	r26, 0x31	; 49
    7648:	80 81       	ld	r24, Z
    764a:	db 96       	adiw	r26, 0x3b	; 59
    764c:	9c 91       	ld	r25, X
    764e:	db 97       	sbiw	r26, 0x3b	; 59
    7650:	89 23       	and	r24, r25
    7652:	80 83       	st	Z, r24
    7654:	82 e0       	ldi	r24, 0x02	; 2
    7656:	82 b9       	out	0x02, r24	; 2
    7658:	d2 96       	adiw	r26, 0x32	; 50
    765a:	ed 91       	ld	r30, X+
    765c:	fc 91       	ld	r31, X
    765e:	d3 97       	sbiw	r26, 0x33	; 51
    7660:	80 81       	ld	r24, Z
    7662:	dc 96       	adiw	r26, 0x3c	; 60
    7664:	9c 91       	ld	r25, X
    7666:	dc 97       	sbiw	r26, 0x3c	; 60
    7668:	89 23       	and	r24, r25
    766a:	80 83       	st	Z, r24
    766c:	d2 96       	adiw	r26, 0x32	; 50
    766e:	ed 91       	ld	r30, X+
    7670:	fc 91       	ld	r31, X
    7672:	d3 97       	sbiw	r26, 0x33	; 51
    7674:	80 81       	ld	r24, Z
    7676:	d8 96       	adiw	r26, 0x38	; 56
    7678:	9c 91       	ld	r25, X
    767a:	d8 97       	sbiw	r26, 0x38	; 56
    767c:	89 2b       	or	r24, r25
    767e:	80 83       	st	Z, r24
    7680:	d0 96       	adiw	r26, 0x30	; 48
    7682:	ed 91       	ld	r30, X+
    7684:	fc 91       	ld	r31, X
    7686:	d1 97       	sbiw	r26, 0x31	; 49
    7688:	80 81       	ld	r24, Z
    768a:	d7 96       	adiw	r26, 0x37	; 55
    768c:	9c 91       	ld	r25, X
    768e:	d7 97       	sbiw	r26, 0x37	; 55
    7690:	89 2b       	or	r24, r25
    7692:	80 83       	st	Z, r24
    7694:	72 b9       	out	0x02, r23	; 2
    7696:	d2 96       	adiw	r26, 0x32	; 50
    7698:	ed 91       	ld	r30, X+
    769a:	fc 91       	ld	r31, X
    769c:	d3 97       	sbiw	r26, 0x33	; 51
    769e:	80 81       	ld	r24, Z
    76a0:	dc 96       	adiw	r26, 0x3c	; 60
    76a2:	9c 91       	ld	r25, X
    76a4:	dc 97       	sbiw	r26, 0x3c	; 60
    76a6:	89 23       	and	r24, r25
    76a8:	80 83       	st	Z, r24
    76aa:	d2 96       	adiw	r26, 0x32	; 50
    76ac:	ed 91       	ld	r30, X+
    76ae:	fc 91       	ld	r31, X
    76b0:	d3 97       	sbiw	r26, 0x33	; 51
    76b2:	80 81       	ld	r24, Z
    76b4:	d8 96       	adiw	r26, 0x38	; 56
    76b6:	9c 91       	ld	r25, X
    76b8:	d8 97       	sbiw	r26, 0x38	; 56
    76ba:	89 2b       	or	r24, r25
    76bc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:381
		writeCmdData8(HX8347G_COLADDRSTART_LO,x1);
    76be:	d0 96       	adiw	r26, 0x30	; 48
    76c0:	ed 91       	ld	r30, X+
    76c2:	fc 91       	ld	r31, X
    76c4:	d1 97       	sbiw	r26, 0x31	; 49
    76c6:	80 81       	ld	r24, Z
    76c8:	db 96       	adiw	r26, 0x3b	; 59
    76ca:	9c 91       	ld	r25, X
    76cc:	db 97       	sbiw	r26, 0x3b	; 59
    76ce:	89 23       	and	r24, r25
    76d0:	80 83       	st	Z, r24
    76d2:	83 e0       	ldi	r24, 0x03	; 3
    76d4:	82 b9       	out	0x02, r24	; 2
    76d6:	d2 96       	adiw	r26, 0x32	; 50
    76d8:	ed 91       	ld	r30, X+
    76da:	fc 91       	ld	r31, X
    76dc:	d3 97       	sbiw	r26, 0x33	; 51
    76de:	80 81       	ld	r24, Z
    76e0:	dc 96       	adiw	r26, 0x3c	; 60
    76e2:	9c 91       	ld	r25, X
    76e4:	dc 97       	sbiw	r26, 0x3c	; 60
    76e6:	89 23       	and	r24, r25
    76e8:	80 83       	st	Z, r24
    76ea:	d2 96       	adiw	r26, 0x32	; 50
    76ec:	ed 91       	ld	r30, X+
    76ee:	fc 91       	ld	r31, X
    76f0:	d3 97       	sbiw	r26, 0x33	; 51
    76f2:	80 81       	ld	r24, Z
    76f4:	d8 96       	adiw	r26, 0x38	; 56
    76f6:	9c 91       	ld	r25, X
    76f8:	d8 97       	sbiw	r26, 0x38	; 56
    76fa:	89 2b       	or	r24, r25
    76fc:	80 83       	st	Z, r24
    76fe:	d0 96       	adiw	r26, 0x30	; 48
    7700:	ed 91       	ld	r30, X+
    7702:	fc 91       	ld	r31, X
    7704:	d1 97       	sbiw	r26, 0x31	; 49
    7706:	80 81       	ld	r24, Z
    7708:	d7 96       	adiw	r26, 0x37	; 55
    770a:	9c 91       	ld	r25, X
    770c:	d7 97       	sbiw	r26, 0x37	; 55
    770e:	89 2b       	or	r24, r25
    7710:	80 83       	st	Z, r24
    7712:	62 b9       	out	0x02, r22	; 2
    7714:	d2 96       	adiw	r26, 0x32	; 50
    7716:	ed 91       	ld	r30, X+
    7718:	fc 91       	ld	r31, X
    771a:	d3 97       	sbiw	r26, 0x33	; 51
    771c:	80 81       	ld	r24, Z
    771e:	dc 96       	adiw	r26, 0x3c	; 60
    7720:	9c 91       	ld	r25, X
    7722:	dc 97       	sbiw	r26, 0x3c	; 60
    7724:	89 23       	and	r24, r25
    7726:	80 83       	st	Z, r24
    7728:	d2 96       	adiw	r26, 0x32	; 50
    772a:	ed 91       	ld	r30, X+
    772c:	fc 91       	ld	r31, X
    772e:	d3 97       	sbiw	r26, 0x33	; 51
    7730:	80 81       	ld	r24, Z
    7732:	d8 96       	adiw	r26, 0x38	; 56
    7734:	9c 91       	ld	r25, X
    7736:	d8 97       	sbiw	r26, 0x38	; 56
    7738:	89 2b       	or	r24, r25
    773a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:382
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
    773c:	d0 96       	adiw	r26, 0x30	; 48
    773e:	ed 91       	ld	r30, X+
    7740:	fc 91       	ld	r31, X
    7742:	d1 97       	sbiw	r26, 0x31	; 49
    7744:	80 81       	ld	r24, Z
    7746:	db 96       	adiw	r26, 0x3b	; 59
    7748:	9c 91       	ld	r25, X
    774a:	db 97       	sbiw	r26, 0x3b	; 59
    774c:	89 23       	and	r24, r25
    774e:	80 83       	st	Z, r24
    7750:	86 e0       	ldi	r24, 0x06	; 6
    7752:	82 b9       	out	0x02, r24	; 2
    7754:	d2 96       	adiw	r26, 0x32	; 50
    7756:	ed 91       	ld	r30, X+
    7758:	fc 91       	ld	r31, X
    775a:	d3 97       	sbiw	r26, 0x33	; 51
    775c:	80 81       	ld	r24, Z
    775e:	dc 96       	adiw	r26, 0x3c	; 60
    7760:	9c 91       	ld	r25, X
    7762:	dc 97       	sbiw	r26, 0x3c	; 60
    7764:	89 23       	and	r24, r25
    7766:	80 83       	st	Z, r24
    7768:	d2 96       	adiw	r26, 0x32	; 50
    776a:	ed 91       	ld	r30, X+
    776c:	fc 91       	ld	r31, X
    776e:	d3 97       	sbiw	r26, 0x33	; 51
    7770:	80 81       	ld	r24, Z
    7772:	d8 96       	adiw	r26, 0x38	; 56
    7774:	9c 91       	ld	r25, X
    7776:	d8 97       	sbiw	r26, 0x38	; 56
    7778:	89 2b       	or	r24, r25
    777a:	80 83       	st	Z, r24
    777c:	d0 96       	adiw	r26, 0x30	; 48
    777e:	ed 91       	ld	r30, X+
    7780:	fc 91       	ld	r31, X
    7782:	d1 97       	sbiw	r26, 0x31	; 49
    7784:	80 81       	ld	r24, Z
    7786:	d7 96       	adiw	r26, 0x37	; 55
    7788:	9c 91       	ld	r25, X
    778a:	d7 97       	sbiw	r26, 0x37	; 55
    778c:	89 2b       	or	r24, r25
    778e:	80 83       	st	Z, r24
    7790:	52 b9       	out	0x02, r21	; 2
    7792:	d2 96       	adiw	r26, 0x32	; 50
    7794:	ed 91       	ld	r30, X+
    7796:	fc 91       	ld	r31, X
    7798:	d3 97       	sbiw	r26, 0x33	; 51
    779a:	80 81       	ld	r24, Z
    779c:	dc 96       	adiw	r26, 0x3c	; 60
    779e:	9c 91       	ld	r25, X
    77a0:	dc 97       	sbiw	r26, 0x3c	; 60
    77a2:	89 23       	and	r24, r25
    77a4:	80 83       	st	Z, r24
    77a6:	d2 96       	adiw	r26, 0x32	; 50
    77a8:	ed 91       	ld	r30, X+
    77aa:	fc 91       	ld	r31, X
    77ac:	d3 97       	sbiw	r26, 0x33	; 51
    77ae:	80 81       	ld	r24, Z
    77b0:	d8 96       	adiw	r26, 0x38	; 56
    77b2:	9c 91       	ld	r25, X
    77b4:	d8 97       	sbiw	r26, 0x38	; 56
    77b6:	89 2b       	or	r24, r25
    77b8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:383
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
    77ba:	d0 96       	adiw	r26, 0x30	; 48
    77bc:	ed 91       	ld	r30, X+
    77be:	fc 91       	ld	r31, X
    77c0:	d1 97       	sbiw	r26, 0x31	; 49
    77c2:	80 81       	ld	r24, Z
    77c4:	db 96       	adiw	r26, 0x3b	; 59
    77c6:	9c 91       	ld	r25, X
    77c8:	db 97       	sbiw	r26, 0x3b	; 59
    77ca:	89 23       	and	r24, r25
    77cc:	80 83       	st	Z, r24
    77ce:	87 e0       	ldi	r24, 0x07	; 7
    77d0:	82 b9       	out	0x02, r24	; 2
    77d2:	d2 96       	adiw	r26, 0x32	; 50
    77d4:	ed 91       	ld	r30, X+
    77d6:	fc 91       	ld	r31, X
    77d8:	d3 97       	sbiw	r26, 0x33	; 51
    77da:	80 81       	ld	r24, Z
    77dc:	dc 96       	adiw	r26, 0x3c	; 60
    77de:	9c 91       	ld	r25, X
    77e0:	dc 97       	sbiw	r26, 0x3c	; 60
    77e2:	89 23       	and	r24, r25
    77e4:	80 83       	st	Z, r24
    77e6:	d2 96       	adiw	r26, 0x32	; 50
    77e8:	ed 91       	ld	r30, X+
    77ea:	fc 91       	ld	r31, X
    77ec:	d3 97       	sbiw	r26, 0x33	; 51
    77ee:	80 81       	ld	r24, Z
    77f0:	d8 96       	adiw	r26, 0x38	; 56
    77f2:	9c 91       	ld	r25, X
    77f4:	d8 97       	sbiw	r26, 0x38	; 56
    77f6:	89 2b       	or	r24, r25
    77f8:	80 83       	st	Z, r24
    77fa:	d0 96       	adiw	r26, 0x30	; 48
    77fc:	ed 91       	ld	r30, X+
    77fe:	fc 91       	ld	r31, X
    7800:	d1 97       	sbiw	r26, 0x31	; 49
    7802:	80 81       	ld	r24, Z
    7804:	d7 96       	adiw	r26, 0x37	; 55
    7806:	9c 91       	ld	r25, X
    7808:	d7 97       	sbiw	r26, 0x37	; 55
    780a:	89 2b       	or	r24, r25
    780c:	80 83       	st	Z, r24
    780e:	42 b9       	out	0x02, r20	; 2
    7810:	d2 96       	adiw	r26, 0x32	; 50
    7812:	ed 91       	ld	r30, X+
    7814:	fc 91       	ld	r31, X
    7816:	d3 97       	sbiw	r26, 0x33	; 51
    7818:	80 81       	ld	r24, Z
    781a:	dc 96       	adiw	r26, 0x3c	; 60
    781c:	9c 91       	ld	r25, X
    781e:	dc 97       	sbiw	r26, 0x3c	; 60
    7820:	89 23       	and	r24, r25
    7822:	80 83       	st	Z, r24
    7824:	d2 96       	adiw	r26, 0x32	; 50
    7826:	ed 91       	ld	r30, X+
    7828:	fc 91       	ld	r31, X
    782a:	d3 97       	sbiw	r26, 0x33	; 51
    782c:	80 81       	ld	r24, Z
    782e:	d8 96       	adiw	r26, 0x38	; 56
    7830:	9c 91       	ld	r25, X
    7832:	d8 97       	sbiw	r26, 0x38	; 56
    7834:	89 2b       	or	r24, r25
    7836:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:384
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
    7838:	d0 96       	adiw	r26, 0x30	; 48
    783a:	ed 91       	ld	r30, X+
    783c:	fc 91       	ld	r31, X
    783e:	d1 97       	sbiw	r26, 0x31	; 49
    7840:	80 81       	ld	r24, Z
    7842:	db 96       	adiw	r26, 0x3b	; 59
    7844:	9c 91       	ld	r25, X
    7846:	db 97       	sbiw	r26, 0x3b	; 59
    7848:	89 23       	and	r24, r25
    784a:	80 83       	st	Z, r24
    784c:	84 e0       	ldi	r24, 0x04	; 4
    784e:	82 b9       	out	0x02, r24	; 2
    7850:	d2 96       	adiw	r26, 0x32	; 50
    7852:	ed 91       	ld	r30, X+
    7854:	fc 91       	ld	r31, X
    7856:	d3 97       	sbiw	r26, 0x33	; 51
    7858:	80 81       	ld	r24, Z
    785a:	dc 96       	adiw	r26, 0x3c	; 60
    785c:	9c 91       	ld	r25, X
    785e:	dc 97       	sbiw	r26, 0x3c	; 60
    7860:	89 23       	and	r24, r25
    7862:	80 83       	st	Z, r24
    7864:	d2 96       	adiw	r26, 0x32	; 50
    7866:	ed 91       	ld	r30, X+
    7868:	fc 91       	ld	r31, X
    786a:	d3 97       	sbiw	r26, 0x33	; 51
    786c:	80 81       	ld	r24, Z
    786e:	d8 96       	adiw	r26, 0x38	; 56
    7870:	9c 91       	ld	r25, X
    7872:	d8 97       	sbiw	r26, 0x38	; 56
    7874:	89 2b       	or	r24, r25
    7876:	80 83       	st	Z, r24
    7878:	d0 96       	adiw	r26, 0x30	; 48
    787a:	ed 91       	ld	r30, X+
    787c:	fc 91       	ld	r31, X
    787e:	d1 97       	sbiw	r26, 0x31	; 49
    7880:	80 81       	ld	r24, Z
    7882:	d7 96       	adiw	r26, 0x37	; 55
    7884:	9c 91       	ld	r25, X
    7886:	d7 97       	sbiw	r26, 0x37	; 55
    7888:	89 2b       	or	r24, r25
    788a:	80 83       	st	Z, r24
    788c:	32 b9       	out	0x02, r19	; 2
    788e:	d2 96       	adiw	r26, 0x32	; 50
    7890:	ed 91       	ld	r30, X+
    7892:	fc 91       	ld	r31, X
    7894:	d3 97       	sbiw	r26, 0x33	; 51
    7896:	80 81       	ld	r24, Z
    7898:	dc 96       	adiw	r26, 0x3c	; 60
    789a:	9c 91       	ld	r25, X
    789c:	dc 97       	sbiw	r26, 0x3c	; 60
    789e:	89 23       	and	r24, r25
    78a0:	80 83       	st	Z, r24
    78a2:	d2 96       	adiw	r26, 0x32	; 50
    78a4:	ed 91       	ld	r30, X+
    78a6:	fc 91       	ld	r31, X
    78a8:	d3 97       	sbiw	r26, 0x33	; 51
    78aa:	80 81       	ld	r24, Z
    78ac:	d8 96       	adiw	r26, 0x38	; 56
    78ae:	9c 91       	ld	r25, X
    78b0:	d8 97       	sbiw	r26, 0x38	; 56
    78b2:	89 2b       	or	r24, r25
    78b4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:385
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
    78b6:	d0 96       	adiw	r26, 0x30	; 48
    78b8:	ed 91       	ld	r30, X+
    78ba:	fc 91       	ld	r31, X
    78bc:	d1 97       	sbiw	r26, 0x31	; 49
    78be:	80 81       	ld	r24, Z
    78c0:	db 96       	adiw	r26, 0x3b	; 59
    78c2:	9c 91       	ld	r25, X
    78c4:	db 97       	sbiw	r26, 0x3b	; 59
    78c6:	89 23       	and	r24, r25
    78c8:	80 83       	st	Z, r24
    78ca:	85 e0       	ldi	r24, 0x05	; 5
    78cc:	82 b9       	out	0x02, r24	; 2
    78ce:	d2 96       	adiw	r26, 0x32	; 50
    78d0:	ed 91       	ld	r30, X+
    78d2:	fc 91       	ld	r31, X
    78d4:	d3 97       	sbiw	r26, 0x33	; 51
    78d6:	80 81       	ld	r24, Z
    78d8:	dc 96       	adiw	r26, 0x3c	; 60
    78da:	9c 91       	ld	r25, X
    78dc:	dc 97       	sbiw	r26, 0x3c	; 60
    78de:	89 23       	and	r24, r25
    78e0:	80 83       	st	Z, r24
    78e2:	d2 96       	adiw	r26, 0x32	; 50
    78e4:	ed 91       	ld	r30, X+
    78e6:	fc 91       	ld	r31, X
    78e8:	d3 97       	sbiw	r26, 0x33	; 51
    78ea:	80 81       	ld	r24, Z
    78ec:	d8 96       	adiw	r26, 0x38	; 56
    78ee:	9c 91       	ld	r25, X
    78f0:	d8 97       	sbiw	r26, 0x38	; 56
    78f2:	89 2b       	or	r24, r25
    78f4:	80 83       	st	Z, r24
    78f6:	d0 96       	adiw	r26, 0x30	; 48
    78f8:	ed 91       	ld	r30, X+
    78fa:	fc 91       	ld	r31, X
    78fc:	d1 97       	sbiw	r26, 0x31	; 49
    78fe:	80 81       	ld	r24, Z
    7900:	d7 96       	adiw	r26, 0x37	; 55
    7902:	9c 91       	ld	r25, X
    7904:	d7 97       	sbiw	r26, 0x37	; 55
    7906:	89 2b       	or	r24, r25
    7908:	80 83       	st	Z, r24
    790a:	22 b9       	out	0x02, r18	; 2
    790c:	d2 96       	adiw	r26, 0x32	; 50
    790e:	ed 91       	ld	r30, X+
    7910:	fc 91       	ld	r31, X
    7912:	d3 97       	sbiw	r26, 0x33	; 51
    7914:	80 81       	ld	r24, Z
    7916:	dc 96       	adiw	r26, 0x3c	; 60
    7918:	9c 91       	ld	r25, X
    791a:	dc 97       	sbiw	r26, 0x3c	; 60
    791c:	89 23       	and	r24, r25
    791e:	80 83       	st	Z, r24
    7920:	d2 96       	adiw	r26, 0x32	; 50
    7922:	ed 91       	ld	r30, X+
    7924:	fc 91       	ld	r31, X
    7926:	d3 97       	sbiw	r26, 0x33	; 51
    7928:	80 81       	ld	r24, Z
    792a:	d8 96       	adiw	r26, 0x38	; 56
    792c:	9c 91       	ld	r25, X
    792e:	d8 97       	sbiw	r26, 0x38	; 56
    7930:	89 2b       	or	r24, r25
    7932:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:386
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
    7934:	d0 96       	adiw	r26, 0x30	; 48
    7936:	ed 91       	ld	r30, X+
    7938:	fc 91       	ld	r31, X
    793a:	d1 97       	sbiw	r26, 0x31	; 49
    793c:	80 81       	ld	r24, Z
    793e:	db 96       	adiw	r26, 0x3b	; 59
    7940:	9c 91       	ld	r25, X
    7942:	db 97       	sbiw	r26, 0x3b	; 59
    7944:	89 23       	and	r24, r25
    7946:	80 83       	st	Z, r24
    7948:	88 e0       	ldi	r24, 0x08	; 8
    794a:	82 b9       	out	0x02, r24	; 2
    794c:	d2 96       	adiw	r26, 0x32	; 50
    794e:	ed 91       	ld	r30, X+
    7950:	fc 91       	ld	r31, X
    7952:	d3 97       	sbiw	r26, 0x33	; 51
    7954:	80 81       	ld	r24, Z
    7956:	dc 96       	adiw	r26, 0x3c	; 60
    7958:	9c 91       	ld	r25, X
    795a:	dc 97       	sbiw	r26, 0x3c	; 60
    795c:	89 23       	and	r24, r25
    795e:	80 83       	st	Z, r24
    7960:	d2 96       	adiw	r26, 0x32	; 50
    7962:	ed 91       	ld	r30, X+
    7964:	fc 91       	ld	r31, X
    7966:	d3 97       	sbiw	r26, 0x33	; 51
    7968:	80 81       	ld	r24, Z
    796a:	d8 96       	adiw	r26, 0x38	; 56
    796c:	9c 91       	ld	r25, X
    796e:	d8 97       	sbiw	r26, 0x38	; 56
    7970:	89 2b       	or	r24, r25
    7972:	80 83       	st	Z, r24
    7974:	d0 96       	adiw	r26, 0x30	; 48
    7976:	ed 91       	ld	r30, X+
    7978:	fc 91       	ld	r31, X
    797a:	d1 97       	sbiw	r26, 0x31	; 49
    797c:	80 81       	ld	r24, Z
    797e:	d7 96       	adiw	r26, 0x37	; 55
    7980:	9c 91       	ld	r25, X
    7982:	d7 97       	sbiw	r26, 0x37	; 55
    7984:	89 2b       	or	r24, r25
    7986:	80 83       	st	Z, r24
    7988:	12 b9       	out	0x02, r17	; 2
    798a:	d2 96       	adiw	r26, 0x32	; 50
    798c:	ed 91       	ld	r30, X+
    798e:	fc 91       	ld	r31, X
    7990:	d3 97       	sbiw	r26, 0x33	; 51
    7992:	80 81       	ld	r24, Z
    7994:	dc 96       	adiw	r26, 0x3c	; 60
    7996:	9c 91       	ld	r25, X
    7998:	dc 97       	sbiw	r26, 0x3c	; 60
    799a:	89 23       	and	r24, r25
    799c:	80 83       	st	Z, r24
    799e:	d2 96       	adiw	r26, 0x32	; 50
    79a0:	ed 91       	ld	r30, X+
    79a2:	fc 91       	ld	r31, X
    79a4:	d3 97       	sbiw	r26, 0x33	; 51
    79a6:	80 81       	ld	r24, Z
    79a8:	d8 96       	adiw	r26, 0x38	; 56
    79aa:	9c 91       	ld	r25, X
    79ac:	d8 97       	sbiw	r26, 0x38	; 56
    79ae:	89 2b       	or	r24, r25
    79b0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    79b2:	d0 96       	adiw	r26, 0x30	; 48
    79b4:	ed 91       	ld	r30, X+
    79b6:	fc 91       	ld	r31, X
    79b8:	d1 97       	sbiw	r26, 0x31	; 49
    79ba:	80 81       	ld	r24, Z
    79bc:	db 96       	adiw	r26, 0x3b	; 59
    79be:	9c 91       	ld	r25, X
    79c0:	db 97       	sbiw	r26, 0x3b	; 59
    79c2:	89 23       	and	r24, r25
    79c4:	80 83       	st	Z, r24
    79c6:	89 e0       	ldi	r24, 0x09	; 9
    79c8:	82 b9       	out	0x02, r24	; 2
    79ca:	d2 96       	adiw	r26, 0x32	; 50
    79cc:	ed 91       	ld	r30, X+
    79ce:	fc 91       	ld	r31, X
    79d0:	d3 97       	sbiw	r26, 0x33	; 51
    79d2:	80 81       	ld	r24, Z
    79d4:	dc 96       	adiw	r26, 0x3c	; 60
    79d6:	9c 91       	ld	r25, X
    79d8:	dc 97       	sbiw	r26, 0x3c	; 60
    79da:	89 23       	and	r24, r25
    79dc:	80 83       	st	Z, r24
    79de:	d2 96       	adiw	r26, 0x32	; 50
    79e0:	ed 91       	ld	r30, X+
    79e2:	fc 91       	ld	r31, X
    79e4:	d3 97       	sbiw	r26, 0x33	; 51
    79e6:	80 81       	ld	r24, Z
    79e8:	d8 96       	adiw	r26, 0x38	; 56
    79ea:	9c 91       	ld	r25, X
    79ec:	d8 97       	sbiw	r26, 0x38	; 56
    79ee:	89 2b       	or	r24, r25
    79f0:	80 83       	st	Z, r24
    79f2:	d0 96       	adiw	r26, 0x30	; 48
    79f4:	ed 91       	ld	r30, X+
    79f6:	fc 91       	ld	r31, X
    79f8:	d1 97       	sbiw	r26, 0x31	; 49
    79fa:	80 81       	ld	r24, Z
    79fc:	d7 96       	adiw	r26, 0x37	; 55
    79fe:	9c 91       	ld	r25, X
    7a00:	d7 97       	sbiw	r26, 0x37	; 55
    7a02:	89 2b       	or	r24, r25
    7a04:	80 83       	st	Z, r24
    7a06:	02 b9       	out	0x02, r16	; 2
    7a08:	b9 cd       	rjmp	.-1166   	; 0x757c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:391
	}
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF}; 
    7a0a:	7d 83       	std	Y+5, r23	; 0x05
    7a0c:	6e 83       	std	Y+6, r22	; 0x06
    7a0e:	3f 83       	std	Y+7, r19	; 0x07
    7a10:	28 87       	std	Y+8, r18	; 0x08
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:392
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
    7a12:	59 83       	std	Y+1, r21	; 0x01
    7a14:	4a 83       	std	Y+2, r20	; 0x02
    7a16:	1b 83       	std	Y+3, r17	; 0x03
    7a18:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:394
	
		Push_Command(XC, x_buf, 4); //set x address
    7a1a:	f7 01       	movw	r30, r14
    7a1c:	64 8d       	ldd	r22, Z+28	; 0x1c
    7a1e:	75 8d       	ldd	r23, Z+29	; 0x1d
    7a20:	24 e0       	ldi	r18, 0x04	; 4
    7a22:	ae 01       	movw	r20, r28
    7a24:	4b 5f       	subi	r20, 0xFB	; 251
    7a26:	5f 4f       	sbci	r21, 0xFF	; 255
    7a28:	c7 01       	movw	r24, r14
    7a2a:	0e 94 39 37 	call	0x6e72	; 0x6e72 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:395
		Push_Command(YC, y_buf, 4); //set y address
    7a2e:	d7 01       	movw	r26, r14
    7a30:	5e 96       	adiw	r26, 0x1e	; 30
    7a32:	6d 91       	ld	r22, X+
    7a34:	7c 91       	ld	r23, X
    7a36:	24 e0       	ldi	r18, 0x04	; 4
    7a38:	ae 01       	movw	r20, r28
    7a3a:	4f 5f       	subi	r20, 0xFF	; 255
    7a3c:	5f 4f       	sbci	r21, 0xFF	; 255
    7a3e:	c7 01       	movw	r24, r14
    7a40:	0e 94 39 37 	call	0x6e72	; 0x6e72 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    7a44:	ae cd       	rjmp	.-1188   	; 0x75a2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

00007a46 <draw_menu(bool)>:
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1668




bool draw_menu(bool redraw)
{
    7a46:	2f 92       	push	r2
    7a48:	3f 92       	push	r3
    7a4a:	4f 92       	push	r4
    7a4c:	5f 92       	push	r5
    7a4e:	6f 92       	push	r6
    7a50:	7f 92       	push	r7
    7a52:	8f 92       	push	r8
    7a54:	9f 92       	push	r9
    7a56:	af 92       	push	r10
    7a58:	bf 92       	push	r11
    7a5a:	cf 92       	push	r12
    7a5c:	df 92       	push	r13
    7a5e:	ef 92       	push	r14
    7a60:	ff 92       	push	r15
    7a62:	0f 93       	push	r16
    7a64:	1f 93       	push	r17
    7a66:	cf 93       	push	r28
    7a68:	df 93       	push	r29
    7a6a:	cd b7       	in	r28, 0x3d	; 61
    7a6c:	de b7       	in	r29, 0x3e	; 62
    7a6e:	c3 5e       	subi	r28, 0xE3	; 227
    7a70:	d1 09       	sbc	r29, r1
    7a72:	0f b6       	in	r0, 0x3f	; 63
    7a74:	f8 94       	cli
    7a76:	de bf       	out	0x3e, r29	; 62
    7a78:	0f be       	out	0x3f, r0	; 63
    7a7a:	cd bf       	out	0x3d, r28	; 61
    7a7c:	b8 2e       	mov	r11, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1700
  uint8_t menu_args1;
  uint8_t redraw_class;
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);
    7a7e:	ce 01       	movw	r24, r28
    7a80:	8d 54       	subi	r24, 0x4D	; 77
    7a82:	9f 4f       	sbci	r25, 0xFF	; 255
    7a84:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <MenuHistoryGetMenu(unsigned char*)>
    7a88:	3c 01       	movw	r6, r24
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:186
  	}        
} 

uint8_t LCDWIKI_TOUCH::TP_Scan(uint8_t mode)
{
	if(TIRQ_STATE==0) 
    7a8a:	e0 91 b1 0d 	lds	r30, 0x0DB1	; 0x800db1 <my_touch+0x17>
    7a8e:	f0 91 b2 0d 	lds	r31, 0x0DB2	; 0x800db2 <my_touch+0x18>
    7a92:	80 81       	ld	r24, Z
    7a94:	90 91 b7 0d 	lds	r25, 0x0DB7	; 0x800db7 <my_touch+0x1d>
    7a98:	89 23       	and	r24, r25
    7a9a:	09 f0       	breq	.+2      	; 0x7a9e <draw_menu(bool)+0x58>
    7a9c:	76 c2       	rjmp	.+1260   	; 0x7f8a <draw_menu(bool)+0x544>
TP_Read_Coordinate():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    7a9e:	80 ed       	ldi	r24, 0xD0	; 208
    7aa0:	0e 94 df 84 	call	0x109be	; 0x109be <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    7aa4:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    7aa6:	80 e9       	ldi	r24, 0x90	; 144
    7aa8:	0e 94 df 84 	call	0x109be	; 0x109be <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    7aac:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    7aae:	80 ed       	ldi	r24, 0xD0	; 208
    7ab0:	0e 94 df 84 	call	0x109be	; 0x109be <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    7ab4:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    7ab6:	80 e9       	ldi	r24, 0x90	; 144
    7ab8:	0e 94 df 84 	call	0x109be	; 0x109be <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    7abc:	6c 01       	movw	r12, r24
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:171
	flag=TP_Read_Coordinate(&x2,&y2);
    if(flag==0)
    {
		return 0;   
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    7abe:	e8 14       	cp	r14, r8
    7ac0:	f9 04       	cpc	r15, r9
    7ac2:	48 f0       	brcs	.+18     	; 0x7ad6 <draw_menu(bool)+0x90>
    7ac4:	c4 01       	movw	r24, r8
    7ac6:	c2 96       	adiw	r24, 0x32	; 50
    7ac8:	e8 16       	cp	r14, r24
    7aca:	f9 06       	cpc	r15, r25
    7acc:	50 f0       	brcs	.+20     	; 0x7ae2 <draw_menu(bool)+0x9c>
    7ace:	8e 14       	cp	r8, r14
    7ad0:	9f 04       	cpc	r9, r15
    7ad2:	08 f4       	brcc	.+2      	; 0x7ad6 <draw_menu(bool)+0x90>
    7ad4:	52 c0       	rjmp	.+164    	; 0x7b7a <draw_menu(bool)+0x134>
    7ad6:	c7 01       	movw	r24, r14
    7ad8:	c2 96       	adiw	r24, 0x32	; 50
    7ada:	88 16       	cp	r8, r24
    7adc:	99 06       	cpc	r9, r25
    7ade:	08 f0       	brcs	.+2      	; 0x7ae2 <draw_menu(bool)+0x9c>
    7ae0:	4c c0       	rjmp	.+152    	; 0x7b7a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:172
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    7ae2:	0c 15       	cp	r16, r12
    7ae4:	1d 05       	cpc	r17, r13
    7ae6:	48 f0       	brcs	.+18     	; 0x7afa <draw_menu(bool)+0xb4>
    7ae8:	c6 01       	movw	r24, r12
    7aea:	c2 96       	adiw	r24, 0x32	; 50
    7aec:	08 17       	cp	r16, r24
    7aee:	19 07       	cpc	r17, r25
    7af0:	48 f0       	brcs	.+18     	; 0x7b04 <draw_menu(bool)+0xbe>
    7af2:	c0 16       	cp	r12, r16
    7af4:	d1 06       	cpc	r13, r17
    7af6:	08 f4       	brcc	.+2      	; 0x7afa <draw_menu(bool)+0xb4>
    7af8:	40 c0       	rjmp	.+128    	; 0x7b7a <draw_menu(bool)+0x134>
    7afa:	c8 01       	movw	r24, r16
    7afc:	c2 96       	adiw	r24, 0x32	; 50
    7afe:	c8 16       	cp	r12, r24
    7b00:	d9 06       	cpc	r13, r25
    7b02:	d8 f5       	brcc	.+118    	; 0x7b7a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:174
    {
        *x=(x1+x2)/2;
    7b04:	e8 0c       	add	r14, r8
    7b06:	f9 1c       	adc	r15, r9
    7b08:	97 01       	movw	r18, r14
    7b0a:	36 95       	lsr	r19
    7b0c:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:201
			temp = (long)XFAC*x/10000;
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
    7b0e:	a4 e5       	ldi	r26, 0x54	; 84
    7b10:	b3 e0       	ldi	r27, 0x03	; 3
    7b12:	0e 94 79 b4 	call	0x168f2	; 0x168f2 <__umulhisi3>
    7b16:	20 e1       	ldi	r18, 0x10	; 16
    7b18:	22 2e       	mov	r2, r18
    7b1a:	27 e2       	ldi	r18, 0x27	; 39
    7b1c:	32 2e       	mov	r3, r18
    7b1e:	41 2c       	mov	r4, r1
    7b20:	51 2c       	mov	r5, r1
    7b22:	a2 01       	movw	r20, r4
    7b24:	91 01       	movw	r18, r2
    7b26:	0e 94 4f b4 	call	0x1689e	; 0x1689e <__divmodsi4>
    7b2a:	79 01       	movw	r14, r18
    7b2c:	6e e0       	ldi	r22, 0x0E	; 14
    7b2e:	e6 1a       	sub	r14, r22
    7b30:	f1 08       	sbc	r15, r1
    7b32:	f0 92 9f 0d 	sts	0x0D9F, r15	; 0x800d9f <my_touch+0x5>
    7b36:	e0 92 9e 0d 	sts	0x0D9E, r14	; 0x800d9e <my_touch+0x4>
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:175
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    {
        *x=(x1+x2)/2;
        *y=(y1+y2)/2;
    7b3a:	0c 0d       	add	r16, r12
    7b3c:	1d 1d       	adc	r17, r13
    7b3e:	98 01       	movw	r18, r16
    7b40:	36 95       	lsr	r19
    7b42:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:202
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
    7b44:	a4 e0       	ldi	r26, 0x04	; 4
    7b46:	b5 e0       	ldi	r27, 0x05	; 5
    7b48:	0e 94 79 b4 	call	0x168f2	; 0x168f2 <__umulhisi3>
    7b4c:	a2 01       	movw	r20, r4
    7b4e:	91 01       	movw	r18, r2
    7b50:	0e 94 4f b4 	call	0x1689e	; 0x1689e <__divmodsi4>
    7b54:	2e 51       	subi	r18, 0x1E	; 30
    7b56:	31 09       	sbc	r19, r1
    7b58:	30 93 a1 0d 	sts	0x0DA1, r19	; 0x800da1 <my_touch+0x7>
    7b5c:	20 93 a0 0d 	sts	0x0DA0, r18	; 0x800da0 <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:203
			switch(touch_rotation)
    7b60:	80 91 a7 0d 	lds	r24, 0x0DA7	; 0x800da7 <my_touch+0xd>
    7b64:	81 30       	cpi	r24, 0x01	; 1
    7b66:	09 f4       	brne	.+2      	; 0x7b6a <draw_menu(bool)+0x124>
    7b68:	c6 c1       	rjmp	.+908    	; 0x7ef6 <draw_menu(bool)+0x4b0>
    7b6a:	08 f4       	brcc	.+2      	; 0x7b6e <draw_menu(bool)+0x128>
    7b6c:	93 c1       	rjmp	.+806    	; 0x7e94 <draw_menu(bool)+0x44e>
    7b6e:	82 30       	cpi	r24, 0x02	; 2
    7b70:	09 f4       	brne	.+2      	; 0x7b74 <draw_menu(bool)+0x12e>
    7b72:	f2 c1       	rjmp	.+996    	; 0x7f58 <draw_menu(bool)+0x512>
    7b74:	83 30       	cpi	r24, 0x03	; 3
    7b76:	09 f4       	brne	.+2      	; 0x7b7a <draw_menu(bool)+0x134>
    7b78:	fb c1       	rjmp	.+1014   	; 0x7f70 <draw_menu(bool)+0x52a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:315
					break;
				default:
					break;
			}
	 	}
		if((touch_statue&TP_PRES_DOWN)==0)
    7b7a:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <my_touch+0xc>
    7b7e:	87 fd       	sbrc	r24, 7
    7b80:	13 c0       	rjmp	.+38     	; 0x7ba8 <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:317
		{		 
			touch_statue=TP_PRES_DOWN|TP_CATH_PRES; 
    7b82:	80 ec       	ldi	r24, 0xC0	; 192
    7b84:	80 93 a6 0d 	sts	0x0DA6, r24	; 0x800da6 <my_touch+0xc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:318
			x0=x;
    7b88:	80 91 9e 0d 	lds	r24, 0x0D9E	; 0x800d9e <my_touch+0x4>
    7b8c:	90 91 9f 0d 	lds	r25, 0x0D9F	; 0x800d9f <my_touch+0x5>
    7b90:	90 93 9b 0d 	sts	0x0D9B, r25	; 0x800d9b <my_touch+0x1>
    7b94:	80 93 9a 0d 	sts	0x0D9A, r24	; 0x800d9a <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:319
			y0=y;  	   			 
    7b98:	80 91 a0 0d 	lds	r24, 0x0DA0	; 0x800da0 <my_touch+0x6>
    7b9c:	90 91 a1 0d 	lds	r25, 0x0DA1	; 0x800da1 <my_touch+0x7>
    7ba0:	90 93 9d 0d 	sts	0x0D9D, r25	; 0x800d9d <my_touch+0x3>
    7ba4:	80 93 9c 0d 	sts	0x0D9C, r24	; 0x800d9c <my_touch+0x2>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1706

  click_x = 0;
  click_y = 0;

  my_touch.TP_Scan(0);
  if (my_touch.TP_Get_State()&TP_PRES_DOWN && redraw == false)
    7ba8:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <my_touch+0xc>
    7bac:	87 ff       	sbrs	r24, 7
    7bae:	08 c2       	rjmp	.+1040   	; 0x7fc0 <draw_menu(bool)+0x57a>
    7bb0:	b1 10       	cpse	r11, r1
    7bb2:	06 c2       	rjmp	.+1036   	; 0x7fc0 <draw_menu(bool)+0x57a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1708
  {
    click_x = my_touch.x;
    7bb4:	80 91 9e 0d 	lds	r24, 0x0D9E	; 0x800d9e <my_touch+0x4>
    7bb8:	90 91 9f 0d 	lds	r25, 0x0D9F	; 0x800d9f <my_touch+0x5>
    7bbc:	cc 53       	subi	r28, 0x3C	; 60
    7bbe:	df 4f       	sbci	r29, 0xFF	; 255
    7bc0:	99 83       	std	Y+1, r25	; 0x01
    7bc2:	88 83       	st	Y, r24
    7bc4:	c4 5c       	subi	r28, 0xC4	; 196
    7bc6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1709
    click_y = my_touch.y;
    7bc8:	e0 91 a0 0d 	lds	r30, 0x0DA0	; 0x800da0 <my_touch+0x6>
    7bcc:	f0 91 a1 0d 	lds	r31, 0x0DA1	; 0x800da1 <my_touch+0x7>
    7bd0:	ca 53       	subi	r28, 0x3A	; 58
    7bd2:	df 4f       	sbci	r29, 0xFF	; 255
    7bd4:	f9 83       	std	Y+1, r31	; 0x01
    7bd6:	e8 83       	st	Y, r30
    7bd8:	c6 5c       	subi	r28, 0xC6	; 198
    7bda:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1712
  }

  global_x = pgm_read_word(&current->x);
    7bdc:	83 01       	movw	r16, r6
    7bde:	02 5b       	subi	r16, 0xB2	; 178
    7be0:	1d 4f       	sbci	r17, 0xFD	; 253
    7be2:	f8 01       	movw	r30, r16
    7be4:	25 91       	lpm	r18, Z+
    7be6:	34 91       	lpm	r19, Z
    7be8:	c8 54       	subi	r28, 0x48	; 72
    7bea:	df 4f       	sbci	r29, 0xFF	; 255
    7bec:	39 83       	std	Y+1, r19	; 0x01
    7bee:	28 83       	st	Y, r18
    7bf0:	c8 5b       	subi	r28, 0xB8	; 184
    7bf2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1713
  global_y = pgm_read_word(&current->y);
    7bf4:	73 01       	movw	r14, r6
    7bf6:	30 eb       	ldi	r19, 0xB0	; 176
    7bf8:	e3 1a       	sub	r14, r19
    7bfa:	3d ef       	ldi	r19, 0xFD	; 253
    7bfc:	f3 0a       	sbc	r15, r19
    7bfe:	f7 01       	movw	r30, r14
    7c00:	45 91       	lpm	r20, Z+
    7c02:	54 91       	lpm	r21, Z
    7c04:	c6 54       	subi	r28, 0x46	; 70
    7c06:	df 4f       	sbci	r29, 0xFF	; 255
    7c08:	59 83       	std	Y+1, r21	; 0x01
    7c0a:	48 83       	st	Y, r20
    7c0c:	ca 5b       	subi	r28, 0xBA	; 186
    7c0e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1716


  rfnt = pgm_read_word(&current->redraw_class_0);
    7c10:	f3 01       	movw	r30, r6
    7c12:	e6 5a       	subi	r30, 0xA6	; 166
    7c14:	fd 4f       	sbci	r31, 0xFD	; 253
    7c16:	25 91       	lpm	r18, Z+
    7c18:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1717
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    7c1a:	63 01       	movw	r12, r6
    7c1c:	53 eb       	ldi	r21, 0xB3	; 179
    7c1e:	c5 1a       	sub	r12, r21
    7c20:	5d ef       	ldi	r21, 0xFD	; 253
    7c22:	d5 0a       	sbc	r13, r21
    7c24:	f6 01       	movw	r30, r12
    7c26:	84 91       	lpm	r24, Z
    7c28:	cd 54       	subi	r28, 0x4D	; 77
    7c2a:	df 4f       	sbci	r29, 0xFF	; 255
    7c2c:	68 81       	ld	r22, Y
    7c2e:	c3 5b       	subi	r28, 0xB3	; 179
    7c30:	d0 40       	sbci	r29, 0x00	; 0
    7c32:	70 e0       	ldi	r23, 0x00	; 0
    7c34:	4f ef       	ldi	r20, 0xFF	; 255
    7c36:	90 e0       	ldi	r25, 0x00	; 0
    7c38:	f9 01       	movw	r30, r18
    7c3a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1719
  if (rdr == 0)
    cbi(redraw_class, 0);
    7c3c:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1718
  global_y = pgm_read_word(&current->y);


  rfnt = pgm_read_word(&current->redraw_class_0);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    7c3e:	88 23       	and	r24, r24
    7c40:	11 f0       	breq	.+4      	; 0x7c46 <draw_menu(bool)+0x200>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1721
    cbi(redraw_class, 0);
  else
    sbi(redraw_class, 0);
    7c42:	aa 24       	eor	r10, r10
    7c44:	a3 94       	inc	r10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1723
  ///
  rfnt = pgm_read_word(&current->redraw_class_1);
    7c46:	f3 01       	movw	r30, r6
    7c48:	e4 5a       	subi	r30, 0xA4	; 164
    7c4a:	fd 4f       	sbci	r31, 0xFD	; 253
    7c4c:	25 91       	lpm	r18, Z+
    7c4e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1724
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    7c50:	f6 01       	movw	r30, r12
    7c52:	84 91       	lpm	r24, Z
    7c54:	cd 54       	subi	r28, 0x4D	; 77
    7c56:	df 4f       	sbci	r29, 0xFF	; 255
    7c58:	68 81       	ld	r22, Y
    7c5a:	c3 5b       	subi	r28, 0xB3	; 179
    7c5c:	d0 40       	sbci	r29, 0x00	; 0
    7c5e:	70 e0       	ldi	r23, 0x00	; 0
    7c60:	4f ef       	ldi	r20, 0xFF	; 255
    7c62:	90 e0       	ldi	r25, 0x00	; 0
    7c64:	f9 01       	movw	r30, r18
    7c66:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1725
  if (rdr == 0)
    7c68:	81 11       	cpse	r24, r1
    7c6a:	b7 c1       	rjmp	.+878    	; 0x7fda <draw_menu(bool)+0x594>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1726
    cbi(redraw_class, 1);
    7c6c:	e8 94       	clt
    7c6e:	a1 f8       	bld	r10, 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1730
  else
    sbi(redraw_class, 1);
  ///
  rfnt = pgm_read_word(&current->redraw_class_2);
    7c70:	f3 01       	movw	r30, r6
    7c72:	e2 5a       	subi	r30, 0xA2	; 162
    7c74:	fd 4f       	sbci	r31, 0xFD	; 253
    7c76:	25 91       	lpm	r18, Z+
    7c78:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    7c7a:	f6 01       	movw	r30, r12
    7c7c:	84 91       	lpm	r24, Z
    7c7e:	cd 54       	subi	r28, 0x4D	; 77
    7c80:	df 4f       	sbci	r29, 0xFF	; 255
    7c82:	68 81       	ld	r22, Y
    7c84:	c3 5b       	subi	r28, 0xB3	; 179
    7c86:	d0 40       	sbci	r29, 0x00	; 0
    7c88:	70 e0       	ldi	r23, 0x00	; 0
    7c8a:	4f ef       	ldi	r20, 0xFF	; 255
    7c8c:	90 e0       	ldi	r25, 0x00	; 0
    7c8e:	f9 01       	movw	r30, r18
    7c90:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1732
  if (rdr == 0)
    7c92:	81 11       	cpse	r24, r1
    7c94:	a5 c1       	rjmp	.+842    	; 0x7fe0 <draw_menu(bool)+0x59a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1733
    cbi(redraw_class, 2);
    7c96:	8a 2d       	mov	r24, r10
    7c98:	8b 7f       	andi	r24, 0xFB	; 251
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1737
  else
    sbi(redraw_class, 2);
  ///
  if (redraw == false)
    7c9a:	b1 10       	cpse	r11, r1
    7c9c:	a4 c1       	rjmp	.+840    	; 0x7fe6 <draw_menu(bool)+0x5a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1738
    cbi(redraw_class, 3);
    7c9e:	87 7f       	andi	r24, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1740
  else
    sbi(redraw_class, 3);
    7ca0:	cf 52       	subi	r28, 0x2F	; 47
    7ca2:	df 4f       	sbci	r29, 0xFF	; 255
    7ca4:	88 83       	st	Y, r24
    7ca6:	c1 5d       	subi	r28, 0xD1	; 209
    7ca8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1743
  /////
  /////
  rdr = pgm_read_byte(&current->redraw_class);
    7caa:	f3 01       	movw	r30, r6
    7cac:	e7 5a       	subi	r30, 0xA7	; 167
    7cae:	fd 4f       	sbci	r31, 0xFD	; 253
    7cb0:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1744
  if (enable_redraw(rdr, redraw_class) == true)
    7cb2:	cf 52       	subi	r28, 0x2F	; 47
    7cb4:	df 4f       	sbci	r29, 0xFF	; 255
    7cb6:	68 81       	ld	r22, Y
    7cb8:	c1 5d       	subi	r28, 0xD1	; 209
    7cba:	d0 40       	sbci	r29, 0x00	; 0
    7cbc:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <enable_redraw(unsigned char, unsigned char)>
    7cc0:	88 23       	and	r24, r24
    7cc2:	d9 f0       	breq	.+54     	; 0x7cfa <draw_menu(bool)+0x2b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1746
  {
    strcpy_P(str1, pgm_read_word(&current->name));
    7cc4:	f3 01       	movw	r30, r6
    7cc6:	65 91       	lpm	r22, Z+
    7cc8:	74 91       	lpm	r23, Z
    7cca:	ce 01       	movw	r24, r28
    7ccc:	01 96       	adiw	r24, 0x01	; 1
    7cce:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1747
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
    7cd2:	f7 01       	movw	r30, r14
    7cd4:	45 91       	lpm	r20, Z+
    7cd6:	54 91       	lpm	r21, Z
    7cd8:	f8 01       	movw	r30, r16
    7cda:	65 91       	lpm	r22, Z+
    7cdc:	74 91       	lpm	r23, Z
    7cde:	4b 5f       	subi	r20, 0xFB	; 251
    7ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    7ce2:	6b 5f       	subi	r22, 0xFB	; 251
    7ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    7ce6:	ee 24       	eor	r14, r14
    7ce8:	ea 94       	dec	r14
    7cea:	fe 2c       	mov	r15, r14
    7cec:	10 e0       	ldi	r17, 0x00	; 0
    7cee:	00 e0       	ldi	r16, 0x00	; 0
    7cf0:	22 e0       	ldi	r18, 0x02	; 2
    7cf2:	ce 01       	movw	r24, r28
    7cf4:	01 96       	adiw	r24, 0x01	; 1
    7cf6:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1702
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
    7cfa:	91 2c       	mov	r9, r1
    7cfc:	c4 53       	subi	r28, 0x34	; 52
    7cfe:	df 4f       	sbci	r29, 0xFF	; 255
    7d00:	18 82       	st	Y, r1
    7d02:	cc 5c       	subi	r28, 0xCC	; 204
    7d04:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1751
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    7d06:	13 01       	movw	r2, r6
    7d08:	fb eb       	ldi	r31, 0xBB	; 187
    7d0a:	2f 1a       	sub	r2, r31
    7d0c:	fd ef       	ldi	r31, 0xFD	; 253
    7d0e:	3f 0a       	sbc	r3, r31
    7d10:	f1 01       	movw	r30, r2
    7d12:	84 91       	lpm	r24, Z
    7d14:	98 16       	cp	r9, r24
    7d16:	08 f0       	brcs	.+2      	; 0x7d1a <draw_menu(bool)+0x2d4>
    7d18:	68 c1       	rjmp	.+720    	; 0x7fea <draw_menu(bool)+0x5a4>
    7d1a:	f1 e1       	ldi	r31, 0x11	; 17
    7d1c:	9f 9e       	mul	r9, r31
    7d1e:	20 01       	movw	r4, r0
    7d20:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1757
  {
    button_1 = &current->button_1[idx];
    //rfnt = pgm_read_word(&button_1->enable_show);
    //active = (ret_fptr(rfnt))(pgm_read_byte(&button_1->args), menu_args1, -1);
    //if (active == 0) continue;
    rdr = pgm_read_byte(&button_1->redraw_class);
    7d22:	f2 01       	movw	r30, r4
    7d24:	70 96       	adiw	r30, 0x10	; 16
    7d26:	e6 0d       	add	r30, r6
    7d28:	f7 1d       	adc	r31, r7
    7d2a:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1758
    if (enable_redraw(rdr, redraw_class) == true)
    7d2c:	cf 52       	subi	r28, 0x2F	; 47
    7d2e:	df 4f       	sbci	r29, 0xFF	; 255
    7d30:	68 81       	ld	r22, Y
    7d32:	c1 5d       	subi	r28, 0xD1	; 209
    7d34:	d0 40       	sbci	r29, 0x00	; 0
    7d36:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <enable_redraw(unsigned char, unsigned char)>
    7d3a:	88 23       	and	r24, r24
    7d3c:	09 f4       	brne	.+2      	; 0x7d40 <draw_menu(bool)+0x2fa>
    7d3e:	43 c0       	rjmp	.+134    	; 0x7dc6 <draw_menu(bool)+0x380>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1760
    {
      strcpy_P(str2, pgm_read_word(&button_1->name));
    7d40:	f2 01       	movw	r30, r4
    7d42:	32 96       	adiw	r30, 0x02	; 2
    7d44:	e6 0d       	add	r30, r6
    7d46:	f7 1d       	adc	r31, r7
    7d48:	65 91       	lpm	r22, Z+
    7d4a:	74 91       	lpm	r23, Z
    7d4c:	ce 01       	movw	r24, r28
    7d4e:	8f 57       	subi	r24, 0x7F	; 127
    7d50:	9f 4f       	sbci	r25, 0xFF	; 255
    7d52:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1761
      str1[0] = 0;
    7d56:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1762
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&button_1->font_size), str2, str1, 0);
    7d58:	f2 01       	movw	r30, r4
    7d5a:	3c 96       	adiw	r30, 0x0c	; 12
    7d5c:	e6 0d       	add	r30, r6
    7d5e:	f7 1d       	adc	r31, r7
    7d60:	e4 90       	lpm	r14, Z
    7d62:	04 91       	lpm	r16, Z
    7d64:	f2 01       	movw	r30, r4
    7d66:	3a 96       	adiw	r30, 0x0a	; 10
    7d68:	e6 0d       	add	r30, r6
    7d6a:	f7 1d       	adc	r31, r7
    7d6c:	25 91       	lpm	r18, Z+
    7d6e:	34 91       	lpm	r19, Z
    7d70:	f2 01       	movw	r30, r4
    7d72:	38 96       	adiw	r30, 0x08	; 8
    7d74:	e6 0d       	add	r30, r6
    7d76:	f7 1d       	adc	r31, r7
    7d78:	45 91       	lpm	r20, Z+
    7d7a:	54 91       	lpm	r21, Z
    7d7c:	f2 01       	movw	r30, r4
    7d7e:	36 96       	adiw	r30, 0x06	; 6
    7d80:	e6 0d       	add	r30, r6
    7d82:	f7 1d       	adc	r31, r7
    7d84:	65 91       	lpm	r22, Z+
    7d86:	74 91       	lpm	r23, Z
    7d88:	f2 01       	movw	r30, r4
    7d8a:	34 96       	adiw	r30, 0x04	; 4
    7d8c:	e6 0d       	add	r30, r6
    7d8e:	f7 1d       	adc	r31, r7
    7d90:	85 91       	lpm	r24, Z+
    7d92:	94 91       	lpm	r25, Z
    7d94:	c6 54       	subi	r28, 0x46	; 70
    7d96:	df 4f       	sbci	r29, 0xFF	; 255
    7d98:	e8 81       	ld	r30, Y
    7d9a:	f9 81       	ldd	r31, Y+1	; 0x01
    7d9c:	ca 5b       	subi	r28, 0xBA	; 186
    7d9e:	d0 40       	sbci	r29, 0x00	; 0
    7da0:	6e 0f       	add	r22, r30
    7da2:	7f 1f       	adc	r23, r31
    7da4:	81 2c       	mov	r8, r1
    7da6:	fe 01       	movw	r30, r28
    7da8:	31 96       	adiw	r30, 0x01	; 1
    7daa:	5f 01       	movw	r10, r30
    7dac:	e0 58       	subi	r30, 0x80	; 128
    7dae:	ff 4f       	sbci	r31, 0xFF	; 255
    7db0:	6f 01       	movw	r12, r30
    7db2:	c8 54       	subi	r28, 0x48	; 72
    7db4:	df 4f       	sbci	r29, 0xFF	; 255
    7db6:	e8 81       	ld	r30, Y
    7db8:	f9 81       	ldd	r31, Y+1	; 0x01
    7dba:	c8 5b       	subi	r28, 0xB8	; 184
    7dbc:	d0 40       	sbci	r29, 0x00	; 0
    7dbe:	8e 0f       	add	r24, r30
    7dc0:	9f 1f       	adc	r25, r31
    7dc2:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1764
    }
    if (click_x > 0 && click_y > 0)
    7dc6:	cc 53       	subi	r28, 0x3C	; 60
    7dc8:	df 4f       	sbci	r29, 0xFF	; 255
    7dca:	28 81       	ld	r18, Y
    7dcc:	39 81       	ldd	r19, Y+1	; 0x01
    7dce:	c4 5c       	subi	r28, 0xC4	; 196
    7dd0:	d0 40       	sbci	r29, 0x00	; 0
    7dd2:	23 2b       	or	r18, r19
    7dd4:	09 f4       	brne	.+2      	; 0x7dd8 <draw_menu(bool)+0x392>
    7dd6:	5c c0       	rjmp	.+184    	; 0x7e90 <draw_menu(bool)+0x44a>
    7dd8:	ca 53       	subi	r28, 0x3A	; 58
    7dda:	df 4f       	sbci	r29, 0xFF	; 255
    7ddc:	48 81       	ld	r20, Y
    7dde:	59 81       	ldd	r21, Y+1	; 0x01
    7de0:	c6 5c       	subi	r28, 0xC6	; 198
    7de2:	d0 40       	sbci	r29, 0x00	; 0
    7de4:	45 2b       	or	r20, r21
    7de6:	09 f4       	brne	.+2      	; 0x7dea <draw_menu(bool)+0x3a4>
    7de8:	53 c0       	rjmp	.+166    	; 0x7e90 <draw_menu(bool)+0x44a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1765
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
    7dea:	f2 01       	movw	r30, r4
    7dec:	3a 96       	adiw	r30, 0x0a	; 10
    7dee:	e6 0d       	add	r30, r6
    7df0:	f7 1d       	adc	r31, r7
    7df2:	25 91       	lpm	r18, Z+
    7df4:	34 91       	lpm	r19, Z
    7df6:	f2 01       	movw	r30, r4
    7df8:	38 96       	adiw	r30, 0x08	; 8
    7dfa:	e6 0d       	add	r30, r6
    7dfc:	f7 1d       	adc	r31, r7
    7dfe:	45 91       	lpm	r20, Z+
    7e00:	54 91       	lpm	r21, Z
    7e02:	f2 01       	movw	r30, r4
    7e04:	36 96       	adiw	r30, 0x06	; 6
    7e06:	e6 0d       	add	r30, r6
    7e08:	f7 1d       	adc	r31, r7
    7e0a:	65 91       	lpm	r22, Z+
    7e0c:	74 91       	lpm	r23, Z
    7e0e:	f2 01       	movw	r30, r4
    7e10:	34 96       	adiw	r30, 0x04	; 4
    7e12:	e6 0d       	add	r30, r6
    7e14:	f7 1d       	adc	r31, r7
    7e16:	85 91       	lpm	r24, Z+
    7e18:	94 91       	lpm	r25, Z
    7e1a:	c6 54       	subi	r28, 0x46	; 70
    7e1c:	df 4f       	sbci	r29, 0xFF	; 255
    7e1e:	e8 81       	ld	r30, Y
    7e20:	f9 81       	ldd	r31, Y+1	; 0x01
    7e22:	ca 5b       	subi	r28, 0xBA	; 186
    7e24:	d0 40       	sbci	r29, 0x00	; 0
    7e26:	6e 0f       	add	r22, r30
    7e28:	7f 1f       	adc	r23, r31
    7e2a:	ca 53       	subi	r28, 0x3A	; 58
    7e2c:	df 4f       	sbci	r29, 0xFF	; 255
    7e2e:	e8 80       	ld	r14, Y
    7e30:	f9 80       	ldd	r15, Y+1	; 0x01
    7e32:	c6 5c       	subi	r28, 0xC6	; 198
    7e34:	d0 40       	sbci	r29, 0x00	; 0
    7e36:	cc 53       	subi	r28, 0x3C	; 60
    7e38:	df 4f       	sbci	r29, 0xFF	; 255
    7e3a:	08 81       	ld	r16, Y
    7e3c:	19 81       	ldd	r17, Y+1	; 0x01
    7e3e:	c4 5c       	subi	r28, 0xC4	; 196
    7e40:	d0 40       	sbci	r29, 0x00	; 0
    7e42:	c8 54       	subi	r28, 0x48	; 72
    7e44:	df 4f       	sbci	r29, 0xFF	; 255
    7e46:	e8 81       	ld	r30, Y
    7e48:	f9 81       	ldd	r31, Y+1	; 0x01
    7e4a:	c8 5b       	subi	r28, 0xB8	; 184
    7e4c:	d0 40       	sbci	r29, 0x00	; 0
    7e4e:	8e 0f       	add	r24, r30
    7e50:	9f 1f       	adc	r25, r31
    7e52:	0e 94 b8 24 	call	0x4970	; 0x4970 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    7e56:	18 2f       	mov	r17, r24
    7e58:	88 23       	and	r24, r24
    7e5a:	d1 f0       	breq	.+52     	; 0x7e90 <draw_menu(bool)+0x44a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1767
      {
        fntargs =  pgm_read_word(&button_1->onclick);
    7e5c:	f2 01       	movw	r30, r4
    7e5e:	3e 96       	adiw	r30, 0x0e	; 14
    7e60:	e6 0d       	add	r30, r6
    7e62:	f7 1d       	adc	r31, r7
    7e64:	25 91       	lpm	r18, Z+
    7e66:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1768
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
    7e68:	f2 01       	movw	r30, r4
    7e6a:	3d 96       	adiw	r30, 0x0d	; 13
    7e6c:	e6 0d       	add	r30, r6
    7e6e:	f7 1d       	adc	r31, r7
    7e70:	84 91       	lpm	r24, Z
    7e72:	cd 54       	subi	r28, 0x4D	; 77
    7e74:	df 4f       	sbci	r29, 0xFF	; 255
    7e76:	68 81       	ld	r22, Y
    7e78:	c3 5b       	subi	r28, 0xB3	; 179
    7e7a:	d0 40       	sbci	r29, 0x00	; 0
    7e7c:	70 e0       	ldi	r23, 0x00	; 0
    7e7e:	49 2d       	mov	r20, r9
    7e80:	90 e0       	ldi	r25, 0x00	; 0
    7e82:	f9 01       	movw	r30, r18
    7e84:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1769
        ret = true;
    7e86:	c4 53       	subi	r28, 0x34	; 52
    7e88:	df 4f       	sbci	r29, 0xFF	; 255
    7e8a:	18 83       	st	Y, r17
    7e8c:	cc 5c       	subi	r28, 0xCC	; 204
    7e8e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1751
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    7e90:	93 94       	inc	r9
    7e92:	3e cf       	rjmp	.-388    	; 0x7d10 <draw_menu(bool)+0x2ca>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:206
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
			switch(touch_rotation)
			{
				case 0:
					if(lcd_rotation == 0)
    7e94:	80 91 a8 0d 	lds	r24, 0x0DA8	; 0x800da8 <my_touch+0xe>
    7e98:	88 23       	and	r24, r24
    7e9a:	09 f4       	brne	.+2      	; 0x7e9e <draw_menu(bool)+0x458>
    7e9c:	6e ce       	rjmp	.-804    	; 0x7b7a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:210
					{
						break;
					}
					else if(lcd_rotation == 1)
    7e9e:	81 30       	cpi	r24, 0x01	; 1
    7ea0:	59 f4       	brne	.+22     	; 0x7eb8 <draw_menu(bool)+0x472>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:280
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    7ea2:	30 93 9f 0d 	sts	0x0D9F, r19	; 0x800d9f <my_touch+0x5>
    7ea6:	20 93 9e 0d 	sts	0x0D9E, r18	; 0x800d9e <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    7eaa:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <my_touch+0xa>
    7eae:	90 91 a5 0d 	lds	r25, 0x0DA5	; 0x800da5 <my_touch+0xb>
    7eb2:	8e 19       	sub	r24, r14
    7eb4:	9f 09       	sbc	r25, r15
    7eb6:	3d c0       	rjmp	.+122    	; 0x7f32 <draw_menu(bool)+0x4ec>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:218
						tmp = x;
						x=y;
						y=tmp;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    7eb8:	82 30       	cpi	r24, 0x02	; 2
    7eba:	59 f4       	brne	.+22     	; 0x7ed2 <draw_menu(bool)+0x48c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:261
					}
					break;
				case 2:
					if(lcd_rotation == 0)
					{
						x = wid-x;
    7ebc:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <my_touch+0x8>
    7ec0:	90 91 a3 0d 	lds	r25, 0x0DA3	; 0x800da3 <my_touch+0x9>
    7ec4:	8e 19       	sub	r24, r14
    7ec6:	9f 09       	sbc	r25, r15
    7ec8:	90 93 9f 0d 	sts	0x0D9F, r25	; 0x800d9f <my_touch+0x5>
    7ecc:	80 93 9e 0d 	sts	0x0D9E, r24	; 0x800d9e <my_touch+0x4>
    7ed0:	2a c0       	rjmp	.+84     	; 0x7f26 <draw_menu(bool)+0x4e0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:223
					else if(lcd_rotation == 2)
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    7ed2:	83 30       	cpi	r24, 0x03	; 3
    7ed4:	09 f0       	breq	.+2      	; 0x7ed8 <draw_menu(bool)+0x492>
    7ed6:	51 ce       	rjmp	.-862    	; 0x7b7a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:269
					else if(lcd_rotation == 1)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
    7ed8:	f0 92 a1 0d 	sts	0x0DA1, r15	; 0x800da1 <my_touch+0x7>
    7edc:	e0 92 a0 0d 	sts	0x0DA0, r14	; 0x800da0 <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:270
						x = wid-x;
    7ee0:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <my_touch+0x8>
    7ee4:	90 91 a3 0d 	lds	r25, 0x0DA3	; 0x800da3 <my_touch+0x9>
    7ee8:	82 1b       	sub	r24, r18
    7eea:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    7eec:	90 93 9f 0d 	sts	0x0D9F, r25	; 0x800d9f <my_touch+0x5>
    7ef0:	80 93 9e 0d 	sts	0x0D9E, r24	; 0x800d9e <my_touch+0x4>
    7ef4:	42 ce       	rjmp	.-892    	; 0x7b7a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:233
						y=tmp;
						x = wid-x;
					}
					break;
				case 1:
					if(lcd_rotation == 0)
    7ef6:	80 91 a8 0d 	lds	r24, 0x0DA8	; 0x800da8 <my_touch+0xe>
    7efa:	81 11       	cpse	r24, r1
    7efc:	07 c0       	rjmp	.+14     	; 0x7f0c <draw_menu(bool)+0x4c6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    7efe:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <my_touch+0x8>
    7f02:	90 91 a3 0d 	lds	r25, 0x0DA3	; 0x800da3 <my_touch+0x9>
    7f06:	8e 19       	sub	r24, r14
    7f08:	9f 09       	sbc	r25, r15
    7f0a:	f0 cf       	rjmp	.-32     	; 0x7eec <draw_menu(bool)+0x4a6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:237
				case 1:
					if(lcd_rotation == 0)
					{
						x = wid-x;
					}
					else if(lcd_rotation == 1)
    7f0c:	81 30       	cpi	r24, 0x01	; 1
    7f0e:	49 f4       	brne	.+18     	; 0x7f22 <draw_menu(bool)+0x4dc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:307
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    7f10:	30 93 9f 0d 	sts	0x0D9F, r19	; 0x800d9f <my_touch+0x5>
    7f14:	20 93 9e 0d 	sts	0x0D9E, r18	; 0x800d9e <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:308
						y=tmp;
    7f18:	f0 92 a1 0d 	sts	0x0DA1, r15	; 0x800da1 <my_touch+0x7>
    7f1c:	e0 92 a0 0d 	sts	0x0DA0, r14	; 0x800da0 <my_touch+0x6>
    7f20:	2c ce       	rjmp	.-936    	; 0x7b7a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:244
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
					}
					else if(lcd_rotation == 2)
    7f22:	82 30       	cpi	r24, 0x02	; 2
    7f24:	59 f4       	brne	.+22     	; 0x7f3c <draw_menu(bool)+0x4f6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:288
					}
					break;
				case 3:
					if(lcd_rotation == 0)
					{
						y = heig - y;
    7f26:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <my_touch+0xa>
    7f2a:	90 91 a5 0d 	lds	r25, 0x0DA5	; 0x800da5 <my_touch+0xb>
    7f2e:	82 1b       	sub	r24, r18
    7f30:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    7f32:	90 93 a1 0d 	sts	0x0DA1, r25	; 0x800da1 <my_touch+0x7>
    7f36:	80 93 a0 0d 	sts	0x0DA0, r24	; 0x800da0 <my_touch+0x6>
    7f3a:	1f ce       	rjmp	.-962    	; 0x7b7a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:248
					}
					else if(lcd_rotation == 2)
					{
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    7f3c:	83 30       	cpi	r24, 0x03	; 3
    7f3e:	09 f0       	breq	.+2      	; 0x7f42 <draw_menu(bool)+0x4fc>
    7f40:	1c ce       	rjmp	.-968    	; 0x7b7a <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:296
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
    7f42:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <my_touch+0x8>
    7f46:	90 91 a3 0d 	lds	r25, 0x0DA3	; 0x800da3 <my_touch+0x9>
    7f4a:	82 1b       	sub	r24, r18
    7f4c:	93 0b       	sbc	r25, r19
    7f4e:	90 93 9f 0d 	sts	0x0D9F, r25	; 0x800d9f <my_touch+0x5>
    7f52:	80 93 9e 0d 	sts	0x0D9E, r24	; 0x800d9e <my_touch+0x4>
    7f56:	a9 cf       	rjmp	.-174    	; 0x7eaa <draw_menu(bool)+0x464>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:259
						x = wid-x;
						y = heig - y;
					}
					break;
				case 2:
					if(lcd_rotation == 0)
    7f58:	80 91 a8 0d 	lds	r24, 0x0DA8	; 0x800da8 <my_touch+0xe>
    7f5c:	88 23       	and	r24, r24
    7f5e:	09 f4       	brne	.+2      	; 0x7f62 <draw_menu(bool)+0x51c>
    7f60:	ad cf       	rjmp	.-166    	; 0x7ebc <draw_menu(bool)+0x476>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:264
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    7f62:	81 30       	cpi	r24, 0x01	; 1
    7f64:	09 f4       	brne	.+2      	; 0x7f68 <draw_menu(bool)+0x522>
    7f66:	b8 cf       	rjmp	.-144    	; 0x7ed8 <draw_menu(bool)+0x492>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:276
					}
					else if(lcd_rotation == 2)
					{
						break;
					}
					else if(lcd_rotation == 3)
    7f68:	83 30       	cpi	r24, 0x03	; 3
    7f6a:	09 f0       	breq	.+2      	; 0x7f6e <draw_menu(bool)+0x528>
    7f6c:	06 ce       	rjmp	.-1012   	; 0x7b7a <draw_menu(bool)+0x134>
    7f6e:	99 cf       	rjmp	.-206    	; 0x7ea2 <draw_menu(bool)+0x45c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:286
						y=tmp;
						y = heig - y;
					}
					break;
				case 3:
					if(lcd_rotation == 0)
    7f70:	80 91 a8 0d 	lds	r24, 0x0DA8	; 0x800da8 <my_touch+0xe>
    7f74:	88 23       	and	r24, r24
    7f76:	b9 f2       	breq	.-82     	; 0x7f26 <draw_menu(bool)+0x4e0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:290
					{
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    7f78:	81 30       	cpi	r24, 0x01	; 1
    7f7a:	19 f3       	breq	.-58     	; 0x7f42 <draw_menu(bool)+0x4fc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:299
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    7f7c:	82 30       	cpi	r24, 0x02	; 2
    7f7e:	09 f4       	brne	.+2      	; 0x7f82 <draw_menu(bool)+0x53c>
    7f80:	be cf       	rjmp	.-132    	; 0x7efe <draw_menu(bool)+0x4b8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:303
					{
						x = wid-x;;
					}
					else if(lcd_rotation == 3)
    7f82:	83 30       	cpi	r24, 0x03	; 3
    7f84:	09 f0       	breq	.+2      	; 0x7f88 <draw_menu(bool)+0x542>
    7f86:	f9 cd       	rjmp	.-1038   	; 0x7b7a <draw_menu(bool)+0x134>
    7f88:	c3 cf       	rjmp	.-122    	; 0x7f10 <draw_menu(bool)+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:324
			y0=y;  	   			 
		}			   
	}
	else
	{
		if(touch_statue&TP_PRES_DOWN)
    7f8a:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <my_touch+0xc>
    7f8e:	87 ff       	sbrs	r24, 7
    7f90:	04 c0       	rjmp	.+8      	; 0x7f9a <draw_menu(bool)+0x554>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:326
		{
			touch_statue&=~(1<<7);
    7f92:	8f 77       	andi	r24, 0x7F	; 127
    7f94:	80 93 a6 0d 	sts	0x0DA6, r24	; 0x800da6 <my_touch+0xc>
    7f98:	07 ce       	rjmp	.-1010   	; 0x7ba8 <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:330
		}
		else
		{
			x0=0;
    7f9a:	10 92 9b 0d 	sts	0x0D9B, r1	; 0x800d9b <my_touch+0x1>
    7f9e:	10 92 9a 0d 	sts	0x0D9A, r1	; 0x800d9a <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:331
			y0=0;
    7fa2:	10 92 9d 0d 	sts	0x0D9D, r1	; 0x800d9d <my_touch+0x3>
    7fa6:	10 92 9c 0d 	sts	0x0D9C, r1	; 0x800d9c <my_touch+0x2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:332
			x=0xffff;
    7faa:	8f ef       	ldi	r24, 0xFF	; 255
    7fac:	9f ef       	ldi	r25, 0xFF	; 255
    7fae:	90 93 9f 0d 	sts	0x0D9F, r25	; 0x800d9f <my_touch+0x5>
    7fb2:	80 93 9e 0d 	sts	0x0D9E, r24	; 0x800d9e <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:333
			y=0xffff;
    7fb6:	90 93 a1 0d 	sts	0x0DA1, r25	; 0x800da1 <my_touch+0x7>
    7fba:	80 93 a0 0d 	sts	0x0DA0, r24	; 0x800da0 <my_touch+0x6>
    7fbe:	f4 cd       	rjmp	.-1048   	; 0x7ba8 <draw_menu(bool)+0x162>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1703
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
  click_y = 0;
    7fc0:	ca 53       	subi	r28, 0x3A	; 58
    7fc2:	df 4f       	sbci	r29, 0xFF	; 255
    7fc4:	19 82       	std	Y+1, r1	; 0x01
    7fc6:	18 82       	st	Y, r1
    7fc8:	c6 5c       	subi	r28, 0xC6	; 198
    7fca:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1702
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
    7fcc:	cc 53       	subi	r28, 0x3C	; 60
    7fce:	df 4f       	sbci	r29, 0xFF	; 255
    7fd0:	19 82       	std	Y+1, r1	; 0x01
    7fd2:	18 82       	st	Y, r1
    7fd4:	c4 5c       	subi	r28, 0xC4	; 196
    7fd6:	d0 40       	sbci	r29, 0x00	; 0
    7fd8:	01 ce       	rjmp	.-1022   	; 0x7bdc <draw_menu(bool)+0x196>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1728
  rfnt = pgm_read_word(&current->redraw_class_1);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 1);
  else
    sbi(redraw_class, 1);
    7fda:	68 94       	set
    7fdc:	a1 f8       	bld	r10, 1
    7fde:	48 ce       	rjmp	.-880    	; 0x7c70 <draw_menu(bool)+0x22a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1735
  rfnt = pgm_read_word(&current->redraw_class_2);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 2);
  else
    sbi(redraw_class, 2);
    7fe0:	8a 2d       	mov	r24, r10
    7fe2:	84 60       	ori	r24, 0x04	; 4
    7fe4:	5a ce       	rjmp	.-844    	; 0x7c9a <draw_menu(bool)+0x254>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1740
  ///
  if (redraw == false)
    cbi(redraw_class, 3);
  else
    sbi(redraw_class, 3);
    7fe6:	88 60       	ori	r24, 0x08	; 8
    7fe8:	5b ce       	rjmp	.-842    	; 0x7ca0 <draw_menu(bool)+0x25a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1772
        fntargs =  pgm_read_word(&button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    7fea:	c4 53       	subi	r28, 0x34	; 52
    7fec:	df 4f       	sbci	r29, 0xFF	; 255
    7fee:	f8 81       	ld	r31, Y
    7ff0:	cc 5c       	subi	r28, 0xCC	; 204
    7ff2:	d0 40       	sbci	r29, 0x00	; 0
    7ff4:	f1 11       	cpse	r31, r1
    7ff6:	0c 94 c3 4f 	jmp	0x9f86	; 0x9f86 <draw_menu(bool)+0x2540>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1774
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    7ffa:	91 2c       	mov	r9, r1
    7ffc:	93 01       	movw	r18, r6
    7ffe:	2a 5b       	subi	r18, 0xBA	; 186
    8000:	3d 4f       	sbci	r19, 0xFD	; 253
    8002:	c4 54       	subi	r28, 0x44	; 68
    8004:	df 4f       	sbci	r29, 0xFF	; 255
    8006:	39 83       	std	Y+1, r19	; 0x01
    8008:	28 83       	st	Y, r18
    800a:	cc 5b       	subi	r28, 0xBC	; 188
    800c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1783
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, -1);
    if (active == 0) continue;
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    800e:	1e 01       	movw	r2, r28
    8010:	31 e8       	ldi	r19, 0x81	; 129
    8012:	23 0e       	add	r2, r19
    8014:	31 1c       	adc	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1774
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    8016:	c4 54       	subi	r28, 0x44	; 68
    8018:	df 4f       	sbci	r29, 0xFF	; 255
    801a:	e8 81       	ld	r30, Y
    801c:	f9 81       	ldd	r31, Y+1	; 0x01
    801e:	cc 5b       	subi	r28, 0xBC	; 188
    8020:	d0 40       	sbci	r29, 0x00	; 0
    8022:	84 91       	lpm	r24, Z
    8024:	98 16       	cp	r9, r24
    8026:	08 f0       	brcs	.+2      	; 0x802a <draw_menu(bool)+0x5e4>
    8028:	1c c1       	rjmp	.+568    	; 0x8262 <draw_menu(bool)+0x81c>
    802a:	f7 e1       	ldi	r31, 0x17	; 23
    802c:	9f 9e       	mul	r9, r31
    802e:	20 01       	movw	r4, r0
    8030:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1777
  {
    button_2 = &current->button_2[idx];
    rfnt = pgm_read_word(&button_2->enable_show);
    8032:	f2 01       	movw	r30, r4
    8034:	ef 53       	subi	r30, 0x3F	; 63
    8036:	ff 4f       	sbci	r31, 0xFF	; 255
    8038:	e6 0d       	add	r30, r6
    803a:	f7 1d       	adc	r31, r7
    803c:	25 91       	lpm	r18, Z+
    803e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1778
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, -1);
    8040:	c2 01       	movw	r24, r4
    8042:	85 54       	subi	r24, 0x45	; 69
    8044:	9f 4f       	sbci	r25, 0xFF	; 255
    8046:	a3 01       	movw	r20, r6
    8048:	48 0f       	add	r20, r24
    804a:	59 1f       	adc	r21, r25
    804c:	ca 54       	subi	r28, 0x4A	; 74
    804e:	df 4f       	sbci	r29, 0xFF	; 255
    8050:	59 83       	std	Y+1, r21	; 0x01
    8052:	48 83       	st	Y, r20
    8054:	c6 5b       	subi	r28, 0xB6	; 182
    8056:	d0 40       	sbci	r29, 0x00	; 0
    8058:	fa 01       	movw	r30, r20
    805a:	84 91       	lpm	r24, Z
    805c:	cd 54       	subi	r28, 0x4D	; 77
    805e:	df 4f       	sbci	r29, 0xFF	; 255
    8060:	68 81       	ld	r22, Y
    8062:	c3 5b       	subi	r28, 0xB3	; 179
    8064:	d0 40       	sbci	r29, 0x00	; 0
    8066:	70 e0       	ldi	r23, 0x00	; 0
    8068:	4f ef       	ldi	r20, 0xFF	; 255
    806a:	90 e0       	ldi	r25, 0x00	; 0
    806c:	f9 01       	movw	r30, r18
    806e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1779
    if (active == 0) continue;
    8070:	88 23       	and	r24, r24
    8072:	09 f4       	brne	.+2      	; 0x8076 <draw_menu(bool)+0x630>
    8074:	f4 c0       	rjmp	.+488    	; 0x825e <draw_menu(bool)+0x818>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1780
    rdr = pgm_read_byte(&button_2->redraw_class);
    8076:	f2 01       	movw	r30, r4
    8078:	e0 54       	subi	r30, 0x40	; 64
    807a:	ff 4f       	sbci	r31, 0xFF	; 255
    807c:	e6 0d       	add	r30, r6
    807e:	f7 1d       	adc	r31, r7
    8080:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1781
    if (enable_redraw(rdr, redraw_class) == true)
    8082:	cf 52       	subi	r28, 0x2F	; 47
    8084:	df 4f       	sbci	r29, 0xFF	; 255
    8086:	68 81       	ld	r22, Y
    8088:	c1 5d       	subi	r28, 0xD1	; 209
    808a:	d0 40       	sbci	r29, 0x00	; 0
    808c:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <enable_redraw(unsigned char, unsigned char)>
    8090:	88 23       	and	r24, r24
    8092:	09 f4       	brne	.+2      	; 0x8096 <draw_menu(bool)+0x650>
    8094:	78 c0       	rjmp	.+240    	; 0x8186 <draw_menu(bool)+0x740>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1783
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    8096:	f2 01       	movw	r30, r4
    8098:	e4 55       	subi	r30, 0x54	; 84
    809a:	ff 4f       	sbci	r31, 0xFF	; 255
    809c:	e6 0d       	add	r30, r6
    809e:	f7 1d       	adc	r31, r7
    80a0:	65 91       	lpm	r22, Z+
    80a2:	74 91       	lpm	r23, Z
    80a4:	c1 01       	movw	r24, r2
    80a6:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1784
      rfnt = pgm_read_word(&button_2->get_status_fnt);
    80aa:	f2 01       	movw	r30, r4
    80ac:	e2 54       	subi	r30, 0x42	; 66
    80ae:	ff 4f       	sbci	r31, 0xFF	; 255
    80b0:	e6 0d       	add	r30, r6
    80b2:	f7 1d       	adc	r31, r7
    80b4:	25 91       	lpm	r18, Z+
    80b6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1785
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, -1);
    80b8:	ca 54       	subi	r28, 0x4A	; 74
    80ba:	df 4f       	sbci	r29, 0xFF	; 255
    80bc:	e8 81       	ld	r30, Y
    80be:	f9 81       	ldd	r31, Y+1	; 0x01
    80c0:	c6 5b       	subi	r28, 0xB6	; 182
    80c2:	d0 40       	sbci	r29, 0x00	; 0
    80c4:	84 91       	lpm	r24, Z
    80c6:	cd 54       	subi	r28, 0x4D	; 77
    80c8:	df 4f       	sbci	r29, 0xFF	; 255
    80ca:	68 81       	ld	r22, Y
    80cc:	c3 5b       	subi	r28, 0xB3	; 179
    80ce:	d0 40       	sbci	r29, 0x00	; 0
    80d0:	70 e0       	ldi	r23, 0x00	; 0
    80d2:	4f ef       	ldi	r20, 0xFF	; 255
    80d4:	90 e0       	ldi	r25, 0x00	; 0
    80d6:	f9 01       	movw	r30, r18
    80d8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1786
      str1[0] = 0;
    80da:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1791
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    80dc:	f2 01       	movw	r30, r4
    80de:	e7 54       	subi	r30, 0x47	; 71
    80e0:	ff 4f       	sbci	r31, 0xFF	; 255
    80e2:	e6 0d       	add	r30, r6
    80e4:	f7 1d       	adc	r31, r7
    80e6:	a5 90       	lpm	r10, Z+
    80e8:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1790
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, -1);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
    80ea:	f2 01       	movw	r30, r4
    80ec:	e9 54       	subi	r30, 0x49	; 73
    80ee:	ff 4f       	sbci	r31, 0xFF	; 255
    80f0:	e6 0d       	add	r30, r6
    80f2:	f7 1d       	adc	r31, r7
    80f4:	c5 90       	lpm	r12, Z+
    80f6:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1789
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, -1);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
    80f8:	82 01       	movw	r16, r4
    80fa:	0a 54       	subi	r16, 0x4A	; 74
    80fc:	1f 4f       	sbci	r17, 0xFF	; 255
    80fe:	06 0d       	add	r16, r6
    8100:	17 1d       	adc	r17, r7
    8102:	f8 01       	movw	r30, r16
    8104:	04 91       	lpm	r16, Z
    8106:	f2 01       	movw	r30, r4
    8108:	ec 54       	subi	r30, 0x4C	; 76
    810a:	ff 4f       	sbci	r31, 0xFF	; 255
    810c:	e6 0d       	add	r30, r6
    810e:	f7 1d       	adc	r31, r7
    8110:	25 91       	lpm	r18, Z+
    8112:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1788
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, -1);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
    8114:	f2 01       	movw	r30, r4
    8116:	ee 54       	subi	r30, 0x4E	; 78
    8118:	ff 4f       	sbci	r31, 0xFF	; 255
    811a:	e6 0d       	add	r30, r6
    811c:	f7 1d       	adc	r31, r7
    811e:	45 91       	lpm	r20, Z+
    8120:	54 91       	lpm	r21, Z
    8122:	f2 01       	movw	r30, r4
    8124:	e0 55       	subi	r30, 0x50	; 80
    8126:	ff 4f       	sbci	r31, 0xFF	; 255
    8128:	e6 0d       	add	r30, r6
    812a:	f7 1d       	adc	r31, r7
    812c:	65 91       	lpm	r22, Z+
    812e:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1787
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, -1);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    8130:	f2 01       	movw	r30, r4
    8132:	e2 55       	subi	r30, 0x52	; 82
    8134:	ff 4f       	sbci	r31, 0xFF	; 255
    8136:	e6 0d       	add	r30, r6
    8138:	f7 1d       	adc	r31, r7
    813a:	a5 91       	lpm	r26, Z+
    813c:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1785
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, -1);
    813e:	88 24       	eor	r8, r8
    8140:	83 94       	inc	r8
    8142:	81 11       	cpse	r24, r1
    8144:	01 c0       	rjmp	.+2      	; 0x8148 <draw_menu(bool)+0x702>
    8146:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1787
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    8148:	c6 54       	subi	r28, 0x46	; 70
    814a:	df 4f       	sbci	r29, 0xFF	; 255
    814c:	88 81       	ld	r24, Y
    814e:	99 81       	ldd	r25, Y+1	; 0x01
    8150:	ca 5b       	subi	r28, 0xBA	; 186
    8152:	d0 40       	sbci	r29, 0x00	; 0
    8154:	68 0f       	add	r22, r24
    8156:	79 1f       	adc	r23, r25
    8158:	e1 e0       	ldi	r30, 0x01	; 1
    815a:	f0 e0       	ldi	r31, 0x00	; 0
    815c:	ec 0f       	add	r30, r28
    815e:	fd 1f       	adc	r31, r29
    8160:	ff 93       	push	r31
    8162:	ef 93       	push	r30
    8164:	3f 92       	push	r3
    8166:	2f 92       	push	r2
    8168:	e1 2c       	mov	r14, r1
    816a:	c8 54       	subi	r28, 0x48	; 72
    816c:	df 4f       	sbci	r29, 0xFF	; 255
    816e:	88 81       	ld	r24, Y
    8170:	99 81       	ldd	r25, Y+1	; 0x01
    8172:	c8 5b       	subi	r28, 0xB8	; 184
    8174:	d0 40       	sbci	r29, 0x00	; 0
    8176:	8a 0f       	add	r24, r26
    8178:	9b 1f       	adc	r25, r27
    817a:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    817e:	0f 90       	pop	r0
    8180:	0f 90       	pop	r0
    8182:	0f 90       	pop	r0
    8184:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1793
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    }
    if (click_x > 0 && click_y > 0)
    8186:	cc 53       	subi	r28, 0x3C	; 60
    8188:	df 4f       	sbci	r29, 0xFF	; 255
    818a:	28 81       	ld	r18, Y
    818c:	39 81       	ldd	r19, Y+1	; 0x01
    818e:	c4 5c       	subi	r28, 0xC4	; 196
    8190:	d0 40       	sbci	r29, 0x00	; 0
    8192:	23 2b       	or	r18, r19
    8194:	09 f4       	brne	.+2      	; 0x8198 <draw_menu(bool)+0x752>
    8196:	63 c0       	rjmp	.+198    	; 0x825e <draw_menu(bool)+0x818>
    8198:	ca 53       	subi	r28, 0x3A	; 58
    819a:	df 4f       	sbci	r29, 0xFF	; 255
    819c:	48 81       	ld	r20, Y
    819e:	59 81       	ldd	r21, Y+1	; 0x01
    81a0:	c6 5c       	subi	r28, 0xC6	; 198
    81a2:	d0 40       	sbci	r29, 0x00	; 0
    81a4:	45 2b       	or	r20, r21
    81a6:	09 f4       	brne	.+2      	; 0x81aa <draw_menu(bool)+0x764>
    81a8:	5a c0       	rjmp	.+180    	; 0x825e <draw_menu(bool)+0x818>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1794
      if (button_click_touch(global_x + pgm_read_word(&button_2->x), global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
    81aa:	f2 01       	movw	r30, r4
    81ac:	ec 54       	subi	r30, 0x4C	; 76
    81ae:	ff 4f       	sbci	r31, 0xFF	; 255
    81b0:	e6 0d       	add	r30, r6
    81b2:	f7 1d       	adc	r31, r7
    81b4:	25 91       	lpm	r18, Z+
    81b6:	34 91       	lpm	r19, Z
    81b8:	f2 01       	movw	r30, r4
    81ba:	ee 54       	subi	r30, 0x4E	; 78
    81bc:	ff 4f       	sbci	r31, 0xFF	; 255
    81be:	e6 0d       	add	r30, r6
    81c0:	f7 1d       	adc	r31, r7
    81c2:	45 91       	lpm	r20, Z+
    81c4:	54 91       	lpm	r21, Z
    81c6:	f2 01       	movw	r30, r4
    81c8:	e0 55       	subi	r30, 0x50	; 80
    81ca:	ff 4f       	sbci	r31, 0xFF	; 255
    81cc:	e6 0d       	add	r30, r6
    81ce:	f7 1d       	adc	r31, r7
    81d0:	65 91       	lpm	r22, Z+
    81d2:	74 91       	lpm	r23, Z
    81d4:	f2 01       	movw	r30, r4
    81d6:	e2 55       	subi	r30, 0x52	; 82
    81d8:	ff 4f       	sbci	r31, 0xFF	; 255
    81da:	e6 0d       	add	r30, r6
    81dc:	f7 1d       	adc	r31, r7
    81de:	85 91       	lpm	r24, Z+
    81e0:	94 91       	lpm	r25, Z
    81e2:	c6 54       	subi	r28, 0x46	; 70
    81e4:	df 4f       	sbci	r29, 0xFF	; 255
    81e6:	e8 81       	ld	r30, Y
    81e8:	f9 81       	ldd	r31, Y+1	; 0x01
    81ea:	ca 5b       	subi	r28, 0xBA	; 186
    81ec:	d0 40       	sbci	r29, 0x00	; 0
    81ee:	6e 0f       	add	r22, r30
    81f0:	7f 1f       	adc	r23, r31
    81f2:	ca 53       	subi	r28, 0x3A	; 58
    81f4:	df 4f       	sbci	r29, 0xFF	; 255
    81f6:	e8 80       	ld	r14, Y
    81f8:	f9 80       	ldd	r15, Y+1	; 0x01
    81fa:	c6 5c       	subi	r28, 0xC6	; 198
    81fc:	d0 40       	sbci	r29, 0x00	; 0
    81fe:	cc 53       	subi	r28, 0x3C	; 60
    8200:	df 4f       	sbci	r29, 0xFF	; 255
    8202:	08 81       	ld	r16, Y
    8204:	19 81       	ldd	r17, Y+1	; 0x01
    8206:	c4 5c       	subi	r28, 0xC4	; 196
    8208:	d0 40       	sbci	r29, 0x00	; 0
    820a:	c8 54       	subi	r28, 0x48	; 72
    820c:	df 4f       	sbci	r29, 0xFF	; 255
    820e:	e8 81       	ld	r30, Y
    8210:	f9 81       	ldd	r31, Y+1	; 0x01
    8212:	c8 5b       	subi	r28, 0xB8	; 184
    8214:	d0 40       	sbci	r29, 0x00	; 0
    8216:	8e 0f       	add	r24, r30
    8218:	9f 1f       	adc	r25, r31
    821a:	0e 94 b8 24 	call	0x4970	; 0x4970 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    821e:	18 2f       	mov	r17, r24
    8220:	88 23       	and	r24, r24
    8222:	e9 f0       	breq	.+58     	; 0x825e <draw_menu(bool)+0x818>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1796
      {
        fntargs =  pgm_read_word(&button_2->onclick);
    8224:	f2 01       	movw	r30, r4
    8226:	e4 54       	subi	r30, 0x44	; 68
    8228:	ff 4f       	sbci	r31, 0xFF	; 255
    822a:	e6 0d       	add	r30, r6
    822c:	f7 1d       	adc	r31, r7
    822e:	25 91       	lpm	r18, Z+
    8230:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1797
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
    8232:	ca 54       	subi	r28, 0x4A	; 74
    8234:	df 4f       	sbci	r29, 0xFF	; 255
    8236:	e8 81       	ld	r30, Y
    8238:	f9 81       	ldd	r31, Y+1	; 0x01
    823a:	c6 5b       	subi	r28, 0xB6	; 182
    823c:	d0 40       	sbci	r29, 0x00	; 0
    823e:	84 91       	lpm	r24, Z
    8240:	cd 54       	subi	r28, 0x4D	; 77
    8242:	df 4f       	sbci	r29, 0xFF	; 255
    8244:	68 81       	ld	r22, Y
    8246:	c3 5b       	subi	r28, 0xB3	; 179
    8248:	d0 40       	sbci	r29, 0x00	; 0
    824a:	70 e0       	ldi	r23, 0x00	; 0
    824c:	49 2d       	mov	r20, r9
    824e:	90 e0       	ldi	r25, 0x00	; 0
    8250:	f9 01       	movw	r30, r18
    8252:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1798
        ret = true;
    8254:	c4 53       	subi	r28, 0x34	; 52
    8256:	df 4f       	sbci	r29, 0xFF	; 255
    8258:	18 83       	st	Y, r17
    825a:	cc 5c       	subi	r28, 0xCC	; 204
    825c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1774
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    825e:	93 94       	inc	r9
    8260:	da ce       	rjmp	.-588    	; 0x8016 <draw_menu(bool)+0x5d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1801
        fntargs =  pgm_read_word(&button_2->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    8262:	c4 53       	subi	r28, 0x34	; 52
    8264:	df 4f       	sbci	r29, 0xFF	; 255
    8266:	f8 81       	ld	r31, Y
    8268:	cc 5c       	subi	r28, 0xCC	; 204
    826a:	d0 40       	sbci	r29, 0x00	; 0
    826c:	f1 11       	cpse	r31, r1
    826e:	0c 94 c3 4f 	jmp	0x9f86	; 0x9f86 <draw_menu(bool)+0x2540>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1803
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    8272:	91 2c       	mov	r9, r1
    8274:	53 01       	movw	r10, r6
    8276:	29 eb       	ldi	r18, 0xB9	; 185
    8278:	a2 1a       	sub	r10, r18
    827a:	2d ef       	ldi	r18, 0xFD	; 253
    827c:	b2 0a       	sbc	r11, r18
    827e:	f5 01       	movw	r30, r10
    8280:	84 91       	lpm	r24, Z
    8282:	98 16       	cp	r9, r24
    8284:	08 f0       	brcs	.+2      	; 0x8288 <draw_menu(bool)+0x842>
    8286:	bf c0       	rjmp	.+382    	; 0x8406 <draw_menu(bool)+0x9c0>
    8288:	f0 e1       	ldi	r31, 0x10	; 16
    828a:	9f 9e       	mul	r9, r31
    828c:	60 01       	movw	r12, r0
    828e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1806
  {
    function_1 = &current->function_1[idx];
    rfnt = pgm_read_word(&function_1->enable_show);
    8290:	f6 01       	movw	r30, r12
    8292:	e3 5d       	subi	r30, 0xD3	; 211
    8294:	fe 4f       	sbci	r31, 0xFE	; 254
    8296:	e6 0d       	add	r30, r6
    8298:	f7 1d       	adc	r31, r7
    829a:	25 91       	lpm	r18, Z+
    829c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1807
    active = (ret_fptr(rfnt))(pgm_read_byte(&function_1->args), menu_args1, idx);
    829e:	86 01       	movw	r16, r12
    82a0:	0d 5d       	subi	r16, 0xDD	; 221
    82a2:	1e 4f       	sbci	r17, 0xFE	; 254
    82a4:	06 0d       	add	r16, r6
    82a6:	17 1d       	adc	r17, r7
    82a8:	f8 01       	movw	r30, r16
    82aa:	84 91       	lpm	r24, Z
    82ac:	cd 54       	subi	r28, 0x4D	; 77
    82ae:	df 4f       	sbci	r29, 0xFF	; 255
    82b0:	68 81       	ld	r22, Y
    82b2:	c3 5b       	subi	r28, 0xB3	; 179
    82b4:	d0 40       	sbci	r29, 0x00	; 0
    82b6:	70 e0       	ldi	r23, 0x00	; 0
    82b8:	49 2d       	mov	r20, r9
    82ba:	90 e0       	ldi	r25, 0x00	; 0
    82bc:	f9 01       	movw	r30, r18
    82be:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1808
    if (active == 0) continue;
    82c0:	88 23       	and	r24, r24
    82c2:	09 f4       	brne	.+2      	; 0x82c6 <draw_menu(bool)+0x880>
    82c4:	9e c0       	rjmp	.+316    	; 0x8402 <draw_menu(bool)+0x9bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1809
    rdr = pgm_read_byte(&function_1->redraw_class);
    82c6:	f6 01       	movw	r30, r12
    82c8:	e6 5d       	subi	r30, 0xD6	; 214
    82ca:	fe 4f       	sbci	r31, 0xFE	; 254
    82cc:	e6 0d       	add	r30, r6
    82ce:	f7 1d       	adc	r31, r7
    82d0:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1810
    if (enable_redraw(rdr, redraw_class) == true)
    82d2:	cf 52       	subi	r28, 0x2F	; 47
    82d4:	df 4f       	sbci	r29, 0xFF	; 255
    82d6:	68 81       	ld	r22, Y
    82d8:	c1 5d       	subi	r28, 0xD1	; 209
    82da:	d0 40       	sbci	r29, 0x00	; 0
    82dc:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <enable_redraw(unsigned char, unsigned char)>
    82e0:	88 23       	and	r24, r24
    82e2:	09 f4       	brne	.+2      	; 0x82e6 <draw_menu(bool)+0x8a0>
    82e4:	3c c0       	rjmp	.+120    	; 0x835e <draw_menu(bool)+0x918>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1812
    {
      fnt_coordinate_xy =  pgm_read_word(&function_1->fnt_coordinate_xy);
    82e6:	f6 01       	movw	r30, r12
    82e8:	ec 5d       	subi	r30, 0xDC	; 220
    82ea:	fe 4f       	sbci	r31, 0xFE	; 254
    82ec:	e6 0d       	add	r30, r6
    82ee:	f7 1d       	adc	r31, r7
    82f0:	a5 91       	lpm	r26, Z+
    82f2:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1813
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_byte(&function_1->args), menu_args1);
    82f4:	f8 01       	movw	r30, r16
    82f6:	04 91       	lpm	r16, Z
    82f8:	f6 01       	movw	r30, r12
    82fa:	e8 5d       	subi	r30, 0xD8	; 216
    82fc:	fe 4f       	sbci	r31, 0xFE	; 254
    82fe:	e6 0d       	add	r30, r6
    8300:	f7 1d       	adc	r31, r7
    8302:	25 91       	lpm	r18, Z+
    8304:	34 91       	lpm	r19, Z
    8306:	f6 01       	movw	r30, r12
    8308:	ea 5d       	subi	r30, 0xDA	; 218
    830a:	fe 4f       	sbci	r31, 0xFE	; 254
    830c:	e6 0d       	add	r30, r6
    830e:	f7 1d       	adc	r31, r7
    8310:	45 91       	lpm	r20, Z+
    8312:	54 91       	lpm	r21, Z
    8314:	f6 01       	movw	r30, r12
    8316:	ef 5d       	subi	r30, 0xDF	; 223
    8318:	fe 4f       	sbci	r31, 0xFE	; 254
    831a:	e6 0d       	add	r30, r6
    831c:	f7 1d       	adc	r31, r7
    831e:	65 91       	lpm	r22, Z+
    8320:	74 91       	lpm	r23, Z
    8322:	f6 01       	movw	r30, r12
    8324:	e1 5e       	subi	r30, 0xE1	; 225
    8326:	fe 4f       	sbci	r31, 0xFE	; 254
    8328:	e6 0d       	add	r30, r6
    832a:	f7 1d       	adc	r31, r7
    832c:	85 91       	lpm	r24, Z+
    832e:	94 91       	lpm	r25, Z
    8330:	c6 54       	subi	r28, 0x46	; 70
    8332:	df 4f       	sbci	r29, 0xFF	; 255
    8334:	e8 81       	ld	r30, Y
    8336:	f9 81       	ldd	r31, Y+1	; 0x01
    8338:	ca 5b       	subi	r28, 0xBA	; 186
    833a:	d0 40       	sbci	r29, 0x00	; 0
    833c:	6e 0f       	add	r22, r30
    833e:	7f 1f       	adc	r23, r31
    8340:	cd 54       	subi	r28, 0x4D	; 77
    8342:	df 4f       	sbci	r29, 0xFF	; 255
    8344:	e8 80       	ld	r14, Y
    8346:	c3 5b       	subi	r28, 0xB3	; 179
    8348:	d0 40       	sbci	r29, 0x00	; 0
    834a:	c8 54       	subi	r28, 0x48	; 72
    834c:	df 4f       	sbci	r29, 0xFF	; 255
    834e:	e8 81       	ld	r30, Y
    8350:	f9 81       	ldd	r31, Y+1	; 0x01
    8352:	c8 5b       	subi	r28, 0xB8	; 184
    8354:	d0 40       	sbci	r29, 0x00	; 0
    8356:	8e 0f       	add	r24, r30
    8358:	9f 1f       	adc	r25, r31
    835a:	fd 01       	movw	r30, r26
    835c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1815
    }
    if (click_x > 0 && click_y > 0)
    835e:	cc 53       	subi	r28, 0x3C	; 60
    8360:	df 4f       	sbci	r29, 0xFF	; 255
    8362:	28 81       	ld	r18, Y
    8364:	39 81       	ldd	r19, Y+1	; 0x01
    8366:	c4 5c       	subi	r28, 0xC4	; 196
    8368:	d0 40       	sbci	r29, 0x00	; 0
    836a:	23 2b       	or	r18, r19
    836c:	09 f4       	brne	.+2      	; 0x8370 <draw_menu(bool)+0x92a>
    836e:	49 c0       	rjmp	.+146    	; 0x8402 <draw_menu(bool)+0x9bc>
    8370:	ca 53       	subi	r28, 0x3A	; 58
    8372:	df 4f       	sbci	r29, 0xFF	; 255
    8374:	48 81       	ld	r20, Y
    8376:	59 81       	ldd	r21, Y+1	; 0x01
    8378:	c6 5c       	subi	r28, 0xC6	; 198
    837a:	d0 40       	sbci	r29, 0x00	; 0
    837c:	45 2b       	or	r20, r21
    837e:	09 f4       	brne	.+2      	; 0x8382 <draw_menu(bool)+0x93c>
    8380:	40 c0       	rjmp	.+128    	; 0x8402 <draw_menu(bool)+0x9bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1816
      if (button_click_touch(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), click_x, click_y) == true)
    8382:	f6 01       	movw	r30, r12
    8384:	e8 5d       	subi	r30, 0xD8	; 216
    8386:	fe 4f       	sbci	r31, 0xFE	; 254
    8388:	e6 0d       	add	r30, r6
    838a:	f7 1d       	adc	r31, r7
    838c:	25 91       	lpm	r18, Z+
    838e:	34 91       	lpm	r19, Z
    8390:	f6 01       	movw	r30, r12
    8392:	ea 5d       	subi	r30, 0xDA	; 218
    8394:	fe 4f       	sbci	r31, 0xFE	; 254
    8396:	e6 0d       	add	r30, r6
    8398:	f7 1d       	adc	r31, r7
    839a:	45 91       	lpm	r20, Z+
    839c:	54 91       	lpm	r21, Z
    839e:	f6 01       	movw	r30, r12
    83a0:	ef 5d       	subi	r30, 0xDF	; 223
    83a2:	fe 4f       	sbci	r31, 0xFE	; 254
    83a4:	e6 0d       	add	r30, r6
    83a6:	f7 1d       	adc	r31, r7
    83a8:	65 91       	lpm	r22, Z+
    83aa:	74 91       	lpm	r23, Z
    83ac:	f6 01       	movw	r30, r12
    83ae:	e1 5e       	subi	r30, 0xE1	; 225
    83b0:	fe 4f       	sbci	r31, 0xFE	; 254
    83b2:	e6 0d       	add	r30, r6
    83b4:	f7 1d       	adc	r31, r7
    83b6:	85 91       	lpm	r24, Z+
    83b8:	94 91       	lpm	r25, Z
    83ba:	c6 54       	subi	r28, 0x46	; 70
    83bc:	df 4f       	sbci	r29, 0xFF	; 255
    83be:	e8 81       	ld	r30, Y
    83c0:	f9 81       	ldd	r31, Y+1	; 0x01
    83c2:	ca 5b       	subi	r28, 0xBA	; 186
    83c4:	d0 40       	sbci	r29, 0x00	; 0
    83c6:	6e 0f       	add	r22, r30
    83c8:	7f 1f       	adc	r23, r31
    83ca:	ca 53       	subi	r28, 0x3A	; 58
    83cc:	df 4f       	sbci	r29, 0xFF	; 255
    83ce:	e8 80       	ld	r14, Y
    83d0:	f9 80       	ldd	r15, Y+1	; 0x01
    83d2:	c6 5c       	subi	r28, 0xC6	; 198
    83d4:	d0 40       	sbci	r29, 0x00	; 0
    83d6:	cc 53       	subi	r28, 0x3C	; 60
    83d8:	df 4f       	sbci	r29, 0xFF	; 255
    83da:	08 81       	ld	r16, Y
    83dc:	19 81       	ldd	r17, Y+1	; 0x01
    83de:	c4 5c       	subi	r28, 0xC4	; 196
    83e0:	d0 40       	sbci	r29, 0x00	; 0
    83e2:	c8 54       	subi	r28, 0x48	; 72
    83e4:	df 4f       	sbci	r29, 0xFF	; 255
    83e6:	e8 81       	ld	r30, Y
    83e8:	f9 81       	ldd	r31, Y+1	; 0x01
    83ea:	c8 5b       	subi	r28, 0xB8	; 184
    83ec:	d0 40       	sbci	r29, 0x00	; 0
    83ee:	8e 0f       	add	r24, r30
    83f0:	9f 1f       	adc	r25, r31
    83f2:	0e 94 b8 24 	call	0x4970	; 0x4970 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    83f6:	88 23       	and	r24, r24
    83f8:	21 f0       	breq	.+8      	; 0x8402 <draw_menu(bool)+0x9bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1821
      {
        //fntargs =  pgm_read_word(&function_1->onclick);
        //((fptr_args)fntargs)(pgm_read_byte(&function_1->args), menu_args1);
        //ret = true;
        printf("mrdka funkce\n");
    83fa:	82 e5       	ldi	r24, 0x52	; 82
    83fc:	93 e0       	ldi	r25, 0x03	; 3
    83fe:	0e 94 fc b6 	call	0x16df8	; 0x16df8 <puts>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1803
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    8402:	93 94       	inc	r9
    8404:	3c cf       	rjmp	.-392    	; 0x827e <draw_menu(bool)+0x838>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1827
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    8406:	ca 54       	subi	r28, 0x4A	; 74
    8408:	df 4f       	sbci	r29, 0xFF	; 255
    840a:	18 82       	st	Y, r1
    840c:	c6 5b       	subi	r28, 0xB6	; 182
    840e:	d0 40       	sbci	r29, 0x00	; 0
    8410:	93 01       	movw	r18, r6
    8412:	28 5b       	subi	r18, 0xB8	; 184
    8414:	3d 4f       	sbci	r19, 0xFD	; 253
    8416:	c8 53       	subi	r28, 0x38	; 56
    8418:	df 4f       	sbci	r29, 0xFF	; 255
    841a:	39 83       	std	Y+1, r19	; 0x01
    841c:	28 83       	st	Y, r18
    841e:	c8 5c       	subi	r28, 0xC8	; 200
    8420:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1833
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    8422:	4e 01       	movw	r8, r28
    8424:	31 e8       	ldi	r19, 0x81	; 129
    8426:	83 0e       	add	r8, r19
    8428:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1838
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
    842a:	ae 01       	movw	r20, r28
    842c:	4f 5f       	subi	r20, 0xFF	; 255
    842e:	5f 4f       	sbci	r21, 0xFF	; 255
    8430:	cc 54       	subi	r28, 0x4C	; 76
    8432:	df 4f       	sbci	r29, 0xFF	; 255
    8434:	59 83       	std	Y+1, r21	; 0x01
    8436:	48 83       	st	Y, r20
    8438:	c4 5b       	subi	r28, 0xB4	; 180
    843a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1827
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    843c:	c8 53       	subi	r28, 0x38	; 56
    843e:	df 4f       	sbci	r29, 0xFF	; 255
    8440:	e8 81       	ld	r30, Y
    8442:	f9 81       	ldd	r31, Y+1	; 0x01
    8444:	c8 5c       	subi	r28, 0xC8	; 200
    8446:	d0 40       	sbci	r29, 0x00	; 0
    8448:	84 91       	lpm	r24, Z
    844a:	ca 54       	subi	r28, 0x4A	; 74
    844c:	df 4f       	sbci	r29, 0xFF	; 255
    844e:	f8 81       	ld	r31, Y
    8450:	c6 5b       	subi	r28, 0xB6	; 182
    8452:	d0 40       	sbci	r29, 0x00	; 0
    8454:	f8 17       	cp	r31, r24
    8456:	08 f0       	brcs	.+2      	; 0x845a <draw_menu(bool)+0xa14>
    8458:	d0 c1       	rjmp	.+928    	; 0x87fa <draw_menu(bool)+0xdb4>
    845a:	27 e1       	ldi	r18, 0x17	; 23
    845c:	f2 9f       	mul	r31, r18
    845e:	60 01       	movw	r12, r0
    8460:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1830
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    8462:	f6 01       	movw	r30, r12
    8464:	eb 59       	subi	r30, 0x9B	; 155
    8466:	fe 4f       	sbci	r31, 0xFE	; 254
    8468:	e6 0d       	add	r30, r6
    846a:	f7 1d       	adc	r31, r7
    846c:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1831
    if (enable_redraw(rdr, redraw_class) == true)
    846e:	cf 52       	subi	r28, 0x2F	; 47
    8470:	df 4f       	sbci	r29, 0xFF	; 255
    8472:	68 81       	ld	r22, Y
    8474:	c1 5d       	subi	r28, 0xD1	; 209
    8476:	d0 40       	sbci	r29, 0x00	; 0
    8478:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <enable_redraw(unsigned char, unsigned char)>
    847c:	88 23       	and	r24, r24
    847e:	09 f4       	brne	.+2      	; 0x8482 <draw_menu(bool)+0xa3c>
    8480:	41 c1       	rjmp	.+642    	; 0x8704 <draw_menu(bool)+0xcbe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1833
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    8482:	f6 01       	movw	r30, r12
    8484:	e1 5b       	subi	r30, 0xB1	; 177
    8486:	fe 4f       	sbci	r31, 0xFE	; 254
    8488:	e6 0d       	add	r30, r6
    848a:	f7 1d       	adc	r31, r7
    848c:	65 91       	lpm	r22, Z+
    848e:	74 91       	lpm	r23, Z
    8490:	c4 01       	movw	r24, r8
    8492:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1834
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
    8496:	f6 01       	movw	r30, r12
    8498:	ef 59       	subi	r30, 0x9F	; 159
    849a:	fe 4f       	sbci	r31, 0xFE	; 254
    849c:	e6 0d       	add	r30, r6
    849e:	f7 1d       	adc	r31, r7
    84a0:	25 91       	lpm	r18, Z+
    84a2:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1835
      gss = pgm_read_word(&switch_1->get_status_string);
    84a4:	f6 01       	movw	r30, r12
    84a6:	ed 59       	subi	r30, 0x9D	; 157
    84a8:	fe 4f       	sbci	r31, 0xFE	; 254
    84aa:	e6 0d       	add	r30, r6
    84ac:	f7 1d       	adc	r31, r7
    84ae:	e5 90       	lpm	r14, Z+
    84b0:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1836
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
    84b2:	86 01       	movw	r16, r12
    84b4:	02 5a       	subi	r16, 0xA2	; 162
    84b6:	1e 4f       	sbci	r17, 0xFE	; 254
    84b8:	06 0d       	add	r16, r6
    84ba:	17 1d       	adc	r17, r7
    84bc:	f8 01       	movw	r30, r16
    84be:	84 91       	lpm	r24, Z
    84c0:	cd 54       	subi	r28, 0x4D	; 77
    84c2:	df 4f       	sbci	r29, 0xFF	; 255
    84c4:	68 81       	ld	r22, Y
    84c6:	c3 5b       	subi	r28, 0xB3	; 179
    84c8:	d0 40       	sbci	r29, 0x00	; 0
    84ca:	70 e0       	ldi	r23, 0x00	; 0
    84cc:	ca 54       	subi	r28, 0x4A	; 74
    84ce:	df 4f       	sbci	r29, 0xFF	; 255
    84d0:	48 81       	ld	r20, Y
    84d2:	c6 5b       	subi	r28, 0xB6	; 182
    84d4:	d0 40       	sbci	r29, 0x00	; 0
    84d6:	90 e0       	ldi	r25, 0x00	; 0
    84d8:	f9 01       	movw	r30, r18
    84da:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1837
      str3[0] = 0;
    84dc:	cf 55       	subi	r28, 0x5F	; 95
    84de:	df 4f       	sbci	r29, 0xFF	; 255
    84e0:	18 82       	st	Y, r1
    84e2:	c1 5a       	subi	r28, 0xA1	; 161
    84e4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1838
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
    84e6:	f8 01       	movw	r30, r16
    84e8:	84 91       	lpm	r24, Z
    84ea:	9e 01       	movw	r18, r28
    84ec:	2f 55       	subi	r18, 0x5F	; 95
    84ee:	3f 4f       	sbci	r19, 0xFF	; 255
    84f0:	ae 01       	movw	r20, r28
    84f2:	4f 5f       	subi	r20, 0xFF	; 255
    84f4:	5f 4f       	sbci	r21, 0xFF	; 255
    84f6:	cd 54       	subi	r28, 0x4D	; 77
    84f8:	df 4f       	sbci	r29, 0xFF	; 255
    84fa:	68 81       	ld	r22, Y
    84fc:	c3 5b       	subi	r28, 0xB3	; 179
    84fe:	d0 40       	sbci	r29, 0x00	; 0
    8500:	f7 01       	movw	r30, r14
    8502:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1843
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);
    8504:	f6 01       	movw	r30, r12
    8506:	e7 5a       	subi	r30, 0xA7	; 167
    8508:	fe 4f       	sbci	r31, 0xFE	; 254
    850a:	e6 0d       	add	r30, r6
    850c:	f7 1d       	adc	r31, r7
    850e:	25 91       	lpm	r18, Z+
    8510:	34 91       	lpm	r19, Z
    8512:	c4 54       	subi	r28, 0x44	; 68
    8514:	df 4f       	sbci	r29, 0xFF	; 255
    8516:	39 83       	std	Y+1, r19	; 0x01
    8518:	28 83       	st	Y, r18
    851a:	cc 5b       	subi	r28, 0xBC	; 188
    851c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1842
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
    851e:	f6 01       	movw	r30, r12
    8520:	e9 5a       	subi	r30, 0xA9	; 169
    8522:	fe 4f       	sbci	r31, 0xFE	; 254
    8524:	e6 0d       	add	r30, r6
    8526:	f7 1d       	adc	r31, r7
    8528:	45 90       	lpm	r4, Z+
    852a:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1841
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
    852c:	f6 01       	movw	r30, r12
    852e:	eb 5a       	subi	r30, 0xAB	; 171
    8530:	fe 4f       	sbci	r31, 0xFE	; 254
    8532:	e6 0d       	add	r30, r6
    8534:	f7 1d       	adc	r31, r7
    8536:	85 91       	lpm	r24, Z+
    8538:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1840
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
    853a:	f6 01       	movw	r30, r12
    853c:	ed 5a       	subi	r30, 0xAD	; 173
    853e:	fe 4f       	sbci	r31, 0xFE	; 254
    8540:	e6 0d       	add	r30, r6
    8542:	f7 1d       	adc	r31, r7
    8544:	25 90       	lpm	r2, Z+
    8546:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1839
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
    8548:	c6 54       	subi	r28, 0x46	; 70
    854a:	df 4f       	sbci	r29, 0xFF	; 255
    854c:	48 81       	ld	r20, Y
    854e:	59 81       	ldd	r21, Y+1	; 0x01
    8550:	ca 5b       	subi	r28, 0xBA	; 186
    8552:	d0 40       	sbci	r29, 0x00	; 0
    8554:	24 0e       	add	r2, r20
    8556:	35 1e       	adc	r3, r21
    8558:	f6 01       	movw	r30, r12
    855a:	ef 5a       	subi	r30, 0xAF	; 175
    855c:	fe 4f       	sbci	r31, 0xFE	; 254
    855e:	e6 0d       	add	r30, r6
    8560:	f7 1d       	adc	r31, r7
    8562:	a5 90       	lpm	r10, Z+
    8564:	b4 90       	lpm	r11, Z
    8566:	c8 54       	subi	r28, 0x48	; 72
    8568:	df 4f       	sbci	r29, 0xFF	; 255
    856a:	68 81       	ld	r22, Y
    856c:	79 81       	ldd	r23, Y+1	; 0x01
    856e:	c8 5b       	subi	r28, 0xB8	; 184
    8570:	d0 40       	sbci	r29, 0x00	; 0
    8572:	a6 0e       	add	r10, r22
    8574:	b7 1e       	adc	r11, r23
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    8576:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xb>
    857a:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_lcd+0xa>
    857e:	10 e0       	ldi	r17, 0x00	; 0
    8580:	00 e0       	ldi	r16, 0x00	; 0
    8582:	55 24       	eor	r5, r5
    8584:	fc 01       	movw	r30, r24
    8586:	ff 27       	eor	r31, r31
    8588:	ce 53       	subi	r28, 0x3E	; 62
    858a:	df 4f       	sbci	r29, 0xFF	; 255
    858c:	f9 83       	std	Y+1, r31	; 0x01
    858e:	e8 83       	st	Y, r30
    8590:	c2 5c       	subi	r28, 0xC2	; 194
    8592:	d0 40       	sbci	r29, 0x00	; 0
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5145
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    8594:	91 01       	movw	r18, r2
    8596:	24 0d       	add	r18, r4
    8598:	35 1d       	adc	r19, r5
    859a:	c6 53       	subi	r28, 0x36	; 54
    859c:	df 4f       	sbci	r29, 0xFF	; 255
    859e:	39 83       	std	Y+1, r19	; 0x01
    85a0:	28 83       	st	Y, r18
    85a2:	ca 5c       	subi	r28, 0xCA	; 202
    85a4:	d0 40       	sbci	r29, 0x00	; 0
    85a6:	7f 01       	movw	r14, r30
    85a8:	ea 0c       	add	r14, r10
    85aa:	fb 1c       	adc	r15, r11
    85ac:	c6 53       	subi	r28, 0x36	; 54
    85ae:	df 4f       	sbci	r29, 0xFF	; 255
    85b0:	28 81       	ld	r18, Y
    85b2:	39 81       	ldd	r19, Y+1	; 0x01
    85b4:	ca 5c       	subi	r28, 0xCA	; 202
    85b6:	d0 40       	sbci	r29, 0x00	; 0
    85b8:	20 1b       	sub	r18, r16
    85ba:	31 0b       	sbc	r19, r17
    85bc:	a7 01       	movw	r20, r14
    85be:	40 1b       	sub	r20, r16
    85c0:	51 0b       	sbc	r21, r17
    85c2:	b1 01       	movw	r22, r2
    85c4:	60 0f       	add	r22, r16
    85c6:	71 1f       	adc	r23, r17
    85c8:	c5 01       	movw	r24, r10
    85ca:	80 0f       	add	r24, r16
    85cc:	91 1f       	adc	r25, r17
    85ce:	0e 94 74 83 	call	0x106e8	; 0x106e8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    85d2:	0f 5f       	subi	r16, 0xFF	; 255
    85d4:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5144
/// typ button_1 ////
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    85d6:	03 30       	cpi	r16, 0x03	; 3
    85d8:	11 05       	cpc	r17, r1
    85da:	41 f7       	brne	.-48     	; 0x85ac <draw_menu(bool)+0xb66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5147
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
    85dc:	f4 01       	movw	r30, r8
    85de:	01 90       	ld	r0, Z+
    85e0:	00 20       	and	r0, r0
    85e2:	e9 f7       	brne	.-6      	; 0x85de <draw_menu(bool)+0xb98>
    85e4:	31 97       	sbiw	r30, 0x01	; 1
    85e6:	e8 19       	sub	r30, r8
    85e8:	f9 09       	sbc	r31, r9
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2601
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    85ea:	c4 54       	subi	r28, 0x44	; 68
    85ec:	df 4f       	sbci	r29, 0xFF	; 255
    85ee:	88 81       	ld	r24, Y
    85f0:	cc 5b       	subi	r28, 0xBC	; 188
    85f2:	d0 40       	sbci	r29, 0x00	; 0
    85f4:	88 0f       	add	r24, r24
    85f6:	c4 54       	subi	r28, 0x44	; 68
    85f8:	df 4f       	sbci	r29, 0xFF	; 255
    85fa:	38 81       	ld	r19, Y
    85fc:	cc 5b       	subi	r28, 0xBC	; 188
    85fe:	d0 40       	sbci	r29, 0x00	; 0
    8600:	83 0f       	add	r24, r19
    8602:	88 0f       	add	r24, r24
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5149
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    8604:	a2 01       	movw	r20, r4
    8606:	48 1b       	sub	r20, r24
    8608:	51 09       	sbc	r21, r1
    860a:	57 ff       	sbrs	r21, 7
    860c:	02 c0       	rjmp	.+4      	; 0x8612 <draw_menu(bool)+0xbcc>
    860e:	4d 5f       	subi	r20, 0xFD	; 253
    8610:	5f 4f       	sbci	r21, 0xFF	; 255
    8612:	55 95       	asr	r21
    8614:	47 95       	ror	r20
    8616:	55 95       	asr	r21
    8618:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5150
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    861a:	42 0d       	add	r20, r2
    861c:	53 2d       	mov	r21, r3
    861e:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2596
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    8620:	66 e0       	ldi	r22, 0x06	; 6
    8622:	e6 9f       	mul	r30, r22
    8624:	f0 01       	movw	r30, r0
    8626:	11 24       	eor	r1, r1
    8628:	c4 54       	subi	r28, 0x44	; 68
    862a:	df 4f       	sbci	r29, 0xFF	; 255
    862c:	78 81       	ld	r23, Y
    862e:	cc 5b       	subi	r28, 0xBC	; 188
    8630:	d0 40       	sbci	r29, 0x00	; 0
    8632:	7e 9f       	mul	r23, r30
    8634:	c0 01       	movw	r24, r0
    8636:	7f 9f       	mul	r23, r31
    8638:	90 0d       	add	r25, r0
    863a:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5148
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
    863c:	99 27       	eor	r25, r25
    863e:	ce 53       	subi	r28, 0x3E	; 62
    8640:	df 4f       	sbci	r29, 0xFF	; 255
    8642:	68 81       	ld	r22, Y
    8644:	79 81       	ldd	r23, Y+1	; 0x01
    8646:	c2 5c       	subi	r28, 0xC2	; 194
    8648:	d0 40       	sbci	r29, 0x00	; 0
    864a:	68 1b       	sub	r22, r24
    864c:	79 0b       	sbc	r23, r25
    864e:	77 ff       	sbrs	r23, 7
    8650:	02 c0       	rjmp	.+4      	; 0x8656 <draw_menu(bool)+0xc10>
    8652:	6f 5f       	subi	r22, 0xFF	; 255
    8654:	7f 4f       	sbci	r23, 0xFF	; 255
    8656:	75 95       	asr	r23
    8658:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5150
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    865a:	6a 0d       	add	r22, r10
    865c:	7b 2d       	mov	r23, r11
    865e:	71 1d       	adc	r23, r1
    8660:	ee 24       	eor	r14, r14
    8662:	ea 94       	dec	r14
    8664:	fe 2c       	mov	r15, r14
    8666:	10 e0       	ldi	r17, 0x00	; 0
    8668:	00 e0       	ldi	r16, 0x00	; 0
    866a:	c4 54       	subi	r28, 0x44	; 68
    866c:	df 4f       	sbci	r29, 0xFF	; 255
    866e:	28 81       	ld	r18, Y
    8670:	cc 5b       	subi	r28, 0xBC	; 188
    8672:	d0 40       	sbci	r29, 0x00	; 0
    8674:	c4 01       	movw	r24, r8
    8676:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5152
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
    867a:	cc 54       	subi	r28, 0x4C	; 76
    867c:	df 4f       	sbci	r29, 0xFF	; 255
    867e:	e8 81       	ld	r30, Y
    8680:	f9 81       	ldd	r31, Y+1	; 0x01
    8682:	c4 5b       	subi	r28, 0xB4	; 180
    8684:	d0 40       	sbci	r29, 0x00	; 0
    8686:	01 90       	ld	r0, Z+
    8688:	00 20       	and	r0, r0
    868a:	e9 f7       	brne	.-6      	; 0x8686 <draw_menu(bool)+0xc40>
    868c:	31 97       	sbiw	r30, 0x01	; 1
    868e:	cc 54       	subi	r28, 0x4C	; 76
    8690:	df 4f       	sbci	r29, 0xFF	; 255
    8692:	88 81       	ld	r24, Y
    8694:	99 81       	ldd	r25, Y+1	; 0x01
    8696:	c4 5b       	subi	r28, 0xB4	; 180
    8698:	d0 40       	sbci	r29, 0x00	; 0
    869a:	e8 1b       	sub	r30, r24
    869c:	f9 0b       	sbc	r31, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5154
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    869e:	a2 01       	movw	r20, r4
    86a0:	46 50       	subi	r20, 0x06	; 6
    86a2:	51 09       	sbc	r21, r1
    86a4:	57 ff       	sbrs	r21, 7
    86a6:	02 c0       	rjmp	.+4      	; 0x86ac <draw_menu(bool)+0xc66>
    86a8:	4d 5f       	subi	r20, 0xFD	; 253
    86aa:	5f 4f       	sbci	r21, 0xFF	; 255
    86ac:	55 95       	asr	r21
    86ae:	47 95       	ror	r20
    86b0:	55 95       	asr	r21
    86b2:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5155
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    86b4:	55 27       	eor	r21, r21
    86b6:	ca 01       	movw	r24, r20
    86b8:	88 0f       	add	r24, r24
    86ba:	99 1f       	adc	r25, r25
    86bc:	48 0f       	add	r20, r24
    86be:	59 1f       	adc	r21, r25
    86c0:	42 0d       	add	r20, r2
    86c2:	53 1d       	adc	r21, r3
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2596
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    86c4:	96 e0       	ldi	r25, 0x06	; 6
    86c6:	e9 9f       	mul	r30, r25
    86c8:	f0 01       	movw	r30, r0
    86ca:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5153
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
  posx = (size_x - tmpx) / 2;
    86cc:	ff 27       	eor	r31, r31
    86ce:	ce 53       	subi	r28, 0x3E	; 62
    86d0:	df 4f       	sbci	r29, 0xFF	; 255
    86d2:	68 81       	ld	r22, Y
    86d4:	79 81       	ldd	r23, Y+1	; 0x01
    86d6:	c2 5c       	subi	r28, 0xC2	; 194
    86d8:	d0 40       	sbci	r29, 0x00	; 0
    86da:	6e 1b       	sub	r22, r30
    86dc:	7f 0b       	sbc	r23, r31
    86de:	77 ff       	sbrs	r23, 7
    86e0:	02 c0       	rjmp	.+4      	; 0x86e6 <draw_menu(bool)+0xca0>
    86e2:	6f 5f       	subi	r22, 0xFF	; 255
    86e4:	7f 4f       	sbci	r23, 0xFF	; 255
    86e6:	75 95       	asr	r23
    86e8:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5155
  posy = (size_y - tmpy) / 4;
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    86ea:	6a 0d       	add	r22, r10
    86ec:	7b 2d       	mov	r23, r11
    86ee:	71 1d       	adc	r23, r1
    86f0:	ee 24       	eor	r14, r14
    86f2:	ea 94       	dec	r14
    86f4:	fe 2c       	mov	r15, r14
    86f6:	10 e0       	ldi	r17, 0x00	; 0
    86f8:	00 e0       	ldi	r16, 0x00	; 0
    86fa:	21 e0       	ldi	r18, 0x01	; 1
    86fc:	ce 01       	movw	r24, r28
    86fe:	01 96       	adiw	r24, 0x01	; 1
    8700:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1846
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);

    }
    if (click_x > 0 && click_y > 0)
    8704:	cc 53       	subi	r28, 0x3C	; 60
    8706:	df 4f       	sbci	r29, 0xFF	; 255
    8708:	e8 81       	ld	r30, Y
    870a:	f9 81       	ldd	r31, Y+1	; 0x01
    870c:	c4 5c       	subi	r28, 0xC4	; 196
    870e:	d0 40       	sbci	r29, 0x00	; 0
    8710:	ef 2b       	or	r30, r31
    8712:	09 f4       	brne	.+2      	; 0x8716 <draw_menu(bool)+0xcd0>
    8714:	66 c0       	rjmp	.+204    	; 0x87e2 <draw_menu(bool)+0xd9c>
    8716:	ca 53       	subi	r28, 0x3A	; 58
    8718:	df 4f       	sbci	r29, 0xFF	; 255
    871a:	28 81       	ld	r18, Y
    871c:	39 81       	ldd	r19, Y+1	; 0x01
    871e:	c6 5c       	subi	r28, 0xC6	; 198
    8720:	d0 40       	sbci	r29, 0x00	; 0
    8722:	23 2b       	or	r18, r19
    8724:	09 f4       	brne	.+2      	; 0x8728 <draw_menu(bool)+0xce2>
    8726:	5d c0       	rjmp	.+186    	; 0x87e2 <draw_menu(bool)+0xd9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1847
      if (button_click_touch(global_x + pgm_read_word(&switch_1->x), global_y + pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
    8728:	f6 01       	movw	r30, r12
    872a:	e9 5a       	subi	r30, 0xA9	; 169
    872c:	fe 4f       	sbci	r31, 0xFE	; 254
    872e:	e6 0d       	add	r30, r6
    8730:	f7 1d       	adc	r31, r7
    8732:	25 91       	lpm	r18, Z+
    8734:	34 91       	lpm	r19, Z
    8736:	f6 01       	movw	r30, r12
    8738:	eb 5a       	subi	r30, 0xAB	; 171
    873a:	fe 4f       	sbci	r31, 0xFE	; 254
    873c:	e6 0d       	add	r30, r6
    873e:	f7 1d       	adc	r31, r7
    8740:	45 91       	lpm	r20, Z+
    8742:	54 91       	lpm	r21, Z
    8744:	f6 01       	movw	r30, r12
    8746:	ed 5a       	subi	r30, 0xAD	; 173
    8748:	fe 4f       	sbci	r31, 0xFE	; 254
    874a:	e6 0d       	add	r30, r6
    874c:	f7 1d       	adc	r31, r7
    874e:	65 91       	lpm	r22, Z+
    8750:	74 91       	lpm	r23, Z
    8752:	f6 01       	movw	r30, r12
    8754:	ef 5a       	subi	r30, 0xAF	; 175
    8756:	fe 4f       	sbci	r31, 0xFE	; 254
    8758:	e6 0d       	add	r30, r6
    875a:	f7 1d       	adc	r31, r7
    875c:	85 91       	lpm	r24, Z+
    875e:	94 91       	lpm	r25, Z
    8760:	c6 54       	subi	r28, 0x46	; 70
    8762:	df 4f       	sbci	r29, 0xFF	; 255
    8764:	e8 81       	ld	r30, Y
    8766:	f9 81       	ldd	r31, Y+1	; 0x01
    8768:	ca 5b       	subi	r28, 0xBA	; 186
    876a:	d0 40       	sbci	r29, 0x00	; 0
    876c:	6e 0f       	add	r22, r30
    876e:	7f 1f       	adc	r23, r31
    8770:	ca 53       	subi	r28, 0x3A	; 58
    8772:	df 4f       	sbci	r29, 0xFF	; 255
    8774:	e8 80       	ld	r14, Y
    8776:	f9 80       	ldd	r15, Y+1	; 0x01
    8778:	c6 5c       	subi	r28, 0xC6	; 198
    877a:	d0 40       	sbci	r29, 0x00	; 0
    877c:	cc 53       	subi	r28, 0x3C	; 60
    877e:	df 4f       	sbci	r29, 0xFF	; 255
    8780:	08 81       	ld	r16, Y
    8782:	19 81       	ldd	r17, Y+1	; 0x01
    8784:	c4 5c       	subi	r28, 0xC4	; 196
    8786:	d0 40       	sbci	r29, 0x00	; 0
    8788:	c8 54       	subi	r28, 0x48	; 72
    878a:	df 4f       	sbci	r29, 0xFF	; 255
    878c:	e8 81       	ld	r30, Y
    878e:	f9 81       	ldd	r31, Y+1	; 0x01
    8790:	c8 5b       	subi	r28, 0xB8	; 184
    8792:	d0 40       	sbci	r29, 0x00	; 0
    8794:	8e 0f       	add	r24, r30
    8796:	9f 1f       	adc	r25, r31
    8798:	0e 94 b8 24 	call	0x4970	; 0x4970 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    879c:	18 2f       	mov	r17, r24
    879e:	88 23       	and	r24, r24
    87a0:	01 f1       	breq	.+64     	; 0x87e2 <draw_menu(bool)+0xd9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1849
      {
        fntargs =  pgm_read_word(&switch_1->onclick);
    87a2:	f6 01       	movw	r30, r12
    87a4:	e1 5a       	subi	r30, 0xA1	; 161
    87a6:	fe 4f       	sbci	r31, 0xFE	; 254
    87a8:	e6 0d       	add	r30, r6
    87aa:	f7 1d       	adc	r31, r7
    87ac:	25 91       	lpm	r18, Z+
    87ae:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1850
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
    87b0:	f6 01       	movw	r30, r12
    87b2:	e2 5a       	subi	r30, 0xA2	; 162
    87b4:	fe 4f       	sbci	r31, 0xFE	; 254
    87b6:	e6 0d       	add	r30, r6
    87b8:	f7 1d       	adc	r31, r7
    87ba:	84 91       	lpm	r24, Z
    87bc:	cd 54       	subi	r28, 0x4D	; 77
    87be:	df 4f       	sbci	r29, 0xFF	; 255
    87c0:	68 81       	ld	r22, Y
    87c2:	c3 5b       	subi	r28, 0xB3	; 179
    87c4:	d0 40       	sbci	r29, 0x00	; 0
    87c6:	70 e0       	ldi	r23, 0x00	; 0
    87c8:	ca 54       	subi	r28, 0x4A	; 74
    87ca:	df 4f       	sbci	r29, 0xFF	; 255
    87cc:	48 81       	ld	r20, Y
    87ce:	c6 5b       	subi	r28, 0xB6	; 182
    87d0:	d0 40       	sbci	r29, 0x00	; 0
    87d2:	90 e0       	ldi	r25, 0x00	; 0
    87d4:	f9 01       	movw	r30, r18
    87d6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1851
        ret = true;
    87d8:	c4 53       	subi	r28, 0x34	; 52
    87da:	df 4f       	sbci	r29, 0xFF	; 255
    87dc:	18 83       	st	Y, r17
    87de:	cc 5c       	subi	r28, 0xCC	; 204
    87e0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1827
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    87e2:	ca 54       	subi	r28, 0x4A	; 74
    87e4:	df 4f       	sbci	r29, 0xFF	; 255
    87e6:	f8 81       	ld	r31, Y
    87e8:	c6 5b       	subi	r28, 0xB6	; 182
    87ea:	d0 40       	sbci	r29, 0x00	; 0
    87ec:	ff 5f       	subi	r31, 0xFF	; 255
    87ee:	ca 54       	subi	r28, 0x4A	; 74
    87f0:	df 4f       	sbci	r29, 0xFF	; 255
    87f2:	f8 83       	st	Y, r31
    87f4:	c6 5b       	subi	r28, 0xB6	; 182
    87f6:	d0 40       	sbci	r29, 0x00	; 0
    87f8:	21 ce       	rjmp	.-958    	; 0x843c <draw_menu(bool)+0x9f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1854
        fntargs =  pgm_read_word(&switch_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    87fa:	c4 53       	subi	r28, 0x34	; 52
    87fc:	df 4f       	sbci	r29, 0xFF	; 255
    87fe:	28 81       	ld	r18, Y
    8800:	cc 5c       	subi	r28, 0xCC	; 204
    8802:	d0 40       	sbci	r29, 0x00	; 0
    8804:	21 11       	cpse	r18, r1
    8806:	0c 94 c3 4f 	jmp	0x9f86	; 0x9f86 <draw_menu(bool)+0x2540>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1856
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    880a:	51 2c       	mov	r5, r1
    880c:	43 01       	movw	r8, r6
    880e:	36 eb       	ldi	r19, 0xB6	; 182
    8810:	83 1a       	sub	r8, r19
    8812:	3d ef       	ldi	r19, 0xFD	; 253
    8814:	93 0a       	sbc	r9, r19
    8816:	f4 01       	movw	r30, r8
    8818:	84 91       	lpm	r24, Z
    881a:	58 16       	cp	r5, r24
    881c:	08 f0       	brcs	.+2      	; 0x8820 <draw_menu(bool)+0xdda>
    881e:	cd c0       	rjmp	.+410    	; 0x89ba <draw_menu(bool)+0xf74>
    8820:	c5 2c       	mov	r12, r5
    8822:	d1 2c       	mov	r13, r1
    8824:	fd e1       	ldi	r31, 0x1D	; 29
    8826:	cf 0e       	add	r12, r31
    8828:	d1 1c       	adc	r13, r1
    882a:	84 e0       	ldi	r24, 0x04	; 4
    882c:	cc 0c       	add	r12, r12
    882e:	dd 1c       	adc	r13, r13
    8830:	8a 95       	dec	r24
    8832:	e1 f7       	brne	.-8      	; 0x882c <draw_menu(bool)+0xde6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1859
  {
    symbol_button_1 = &current->symbol_button_1[idx];
    rfnt = pgm_read_word(&symbol_button_1->enable_show);
    8834:	f3 01       	movw	r30, r6
    8836:	ec 0d       	add	r30, r12
    8838:	fd 1d       	adc	r31, r13
    883a:	25 91       	lpm	r18, Z+
    883c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1860
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    883e:	56 01       	movw	r10, r12
    8840:	44 e0       	ldi	r20, 0x04	; 4
    8842:	a4 1a       	sub	r10, r20
    8844:	b1 08       	sbc	r11, r1
    8846:	a6 0c       	add	r10, r6
    8848:	b7 1c       	adc	r11, r7
    884a:	f5 01       	movw	r30, r10
    884c:	84 91       	lpm	r24, Z
    884e:	cd 54       	subi	r28, 0x4D	; 77
    8850:	df 4f       	sbci	r29, 0xFF	; 255
    8852:	68 81       	ld	r22, Y
    8854:	c3 5b       	subi	r28, 0xB3	; 179
    8856:	d0 40       	sbci	r29, 0x00	; 0
    8858:	70 e0       	ldi	r23, 0x00	; 0
    885a:	45 2d       	mov	r20, r5
    885c:	90 e0       	ldi	r25, 0x00	; 0
    885e:	f9 01       	movw	r30, r18
    8860:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1861
    if (active == 0) continue;
    8862:	88 23       	and	r24, r24
    8864:	09 f4       	brne	.+2      	; 0x8868 <draw_menu(bool)+0xe22>
    8866:	a7 c0       	rjmp	.+334    	; 0x89b6 <draw_menu(bool)+0xf70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1862
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    8868:	f6 01       	movw	r30, r12
    886a:	31 97       	sbiw	r30, 0x01	; 1
    886c:	e6 0d       	add	r30, r6
    886e:	f7 1d       	adc	r31, r7
    8870:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1863
    if (enable_redraw(rdr, redraw_class) == true)
    8872:	cf 52       	subi	r28, 0x2F	; 47
    8874:	df 4f       	sbci	r29, 0xFF	; 255
    8876:	68 81       	ld	r22, Y
    8878:	c1 5d       	subi	r28, 0xD1	; 209
    887a:	d0 40       	sbci	r29, 0x00	; 0
    887c:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <enable_redraw(unsigned char, unsigned char)>
    8880:	88 23       	and	r24, r24
    8882:	09 f4       	brne	.+2      	; 0x8886 <draw_menu(bool)+0xe40>
    8884:	36 c0       	rjmp	.+108    	; 0x88f2 <draw_menu(bool)+0xeac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1867
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    8886:	f6 01       	movw	r30, r12
    8888:	3e 97       	sbiw	r30, 0x0e	; 14
    888a:	e6 0d       	add	r30, r6
    888c:	f7 1d       	adc	r31, r7
    888e:	e5 90       	lpm	r14, Z+
    8890:	f4 90       	lpm	r15, Z
    8892:	f6 01       	movw	r30, r12
    8894:	35 97       	sbiw	r30, 0x05	; 5
    8896:	e6 0d       	add	r30, r6
    8898:	f7 1d       	adc	r31, r7
    889a:	05 91       	lpm	r16, Z+
    889c:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1866
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
    889e:	f6 01       	movw	r30, r12
    88a0:	37 97       	sbiw	r30, 0x07	; 7
    88a2:	e6 0d       	add	r30, r6
    88a4:	f7 1d       	adc	r31, r7
    88a6:	25 91       	lpm	r18, Z+
    88a8:	34 91       	lpm	r19, Z
    88aa:	f6 01       	movw	r30, r12
    88ac:	39 97       	sbiw	r30, 0x09	; 9
    88ae:	e6 0d       	add	r30, r6
    88b0:	f7 1d       	adc	r31, r7
    88b2:	45 91       	lpm	r20, Z+
    88b4:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1865
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
    88b6:	f6 01       	movw	r30, r12
    88b8:	3b 97       	sbiw	r30, 0x0b	; 11
    88ba:	e6 0d       	add	r30, r6
    88bc:	f7 1d       	adc	r31, r7
    88be:	65 91       	lpm	r22, Z+
    88c0:	74 91       	lpm	r23, Z
    88c2:	f6 01       	movw	r30, r12
    88c4:	3d 97       	sbiw	r30, 0x0d	; 13
    88c6:	e6 0d       	add	r30, r6
    88c8:	f7 1d       	adc	r31, r7
    88ca:	85 91       	lpm	r24, Z+
    88cc:	94 91       	lpm	r25, Z
    88ce:	c6 54       	subi	r28, 0x46	; 70
    88d0:	df 4f       	sbci	r29, 0xFF	; 255
    88d2:	e8 81       	ld	r30, Y
    88d4:	f9 81       	ldd	r31, Y+1	; 0x01
    88d6:	ca 5b       	subi	r28, 0xBA	; 186
    88d8:	d0 40       	sbci	r29, 0x00	; 0
    88da:	6e 0f       	add	r22, r30
    88dc:	7f 1f       	adc	r23, r31
    88de:	c8 54       	subi	r28, 0x48	; 72
    88e0:	df 4f       	sbci	r29, 0xFF	; 255
    88e2:	e8 81       	ld	r30, Y
    88e4:	f9 81       	ldd	r31, Y+1	; 0x01
    88e6:	c8 5b       	subi	r28, 0xB8	; 184
    88e8:	d0 40       	sbci	r29, 0x00	; 0
    88ea:	8e 0f       	add	r24, r30
    88ec:	9f 1f       	adc	r25, r31
    88ee:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1869
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    }
    if (click_x > 0 && click_y > 0)
    88f2:	cc 53       	subi	r28, 0x3C	; 60
    88f4:	df 4f       	sbci	r29, 0xFF	; 255
    88f6:	28 81       	ld	r18, Y
    88f8:	39 81       	ldd	r19, Y+1	; 0x01
    88fa:	c4 5c       	subi	r28, 0xC4	; 196
    88fc:	d0 40       	sbci	r29, 0x00	; 0
    88fe:	23 2b       	or	r18, r19
    8900:	09 f4       	brne	.+2      	; 0x8904 <draw_menu(bool)+0xebe>
    8902:	59 c0       	rjmp	.+178    	; 0x89b6 <draw_menu(bool)+0xf70>
    8904:	ca 53       	subi	r28, 0x3A	; 58
    8906:	df 4f       	sbci	r29, 0xFF	; 255
    8908:	48 81       	ld	r20, Y
    890a:	59 81       	ldd	r21, Y+1	; 0x01
    890c:	c6 5c       	subi	r28, 0xC6	; 198
    890e:	d0 40       	sbci	r29, 0x00	; 0
    8910:	45 2b       	or	r20, r21
    8912:	09 f4       	brne	.+2      	; 0x8916 <draw_menu(bool)+0xed0>
    8914:	50 c0       	rjmp	.+160    	; 0x89b6 <draw_menu(bool)+0xf70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1870
      if (button_click_touch(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), click_x, click_y) == true)
    8916:	f6 01       	movw	r30, r12
    8918:	37 97       	sbiw	r30, 0x07	; 7
    891a:	e6 0d       	add	r30, r6
    891c:	f7 1d       	adc	r31, r7
    891e:	25 91       	lpm	r18, Z+
    8920:	34 91       	lpm	r19, Z
    8922:	f6 01       	movw	r30, r12
    8924:	39 97       	sbiw	r30, 0x09	; 9
    8926:	e6 0d       	add	r30, r6
    8928:	f7 1d       	adc	r31, r7
    892a:	45 91       	lpm	r20, Z+
    892c:	54 91       	lpm	r21, Z
    892e:	f6 01       	movw	r30, r12
    8930:	3b 97       	sbiw	r30, 0x0b	; 11
    8932:	e6 0d       	add	r30, r6
    8934:	f7 1d       	adc	r31, r7
    8936:	65 91       	lpm	r22, Z+
    8938:	74 91       	lpm	r23, Z
    893a:	f6 01       	movw	r30, r12
    893c:	3d 97       	sbiw	r30, 0x0d	; 13
    893e:	e6 0d       	add	r30, r6
    8940:	f7 1d       	adc	r31, r7
    8942:	85 91       	lpm	r24, Z+
    8944:	94 91       	lpm	r25, Z
    8946:	c6 54       	subi	r28, 0x46	; 70
    8948:	df 4f       	sbci	r29, 0xFF	; 255
    894a:	e8 81       	ld	r30, Y
    894c:	f9 81       	ldd	r31, Y+1	; 0x01
    894e:	ca 5b       	subi	r28, 0xBA	; 186
    8950:	d0 40       	sbci	r29, 0x00	; 0
    8952:	6e 0f       	add	r22, r30
    8954:	7f 1f       	adc	r23, r31
    8956:	ca 53       	subi	r28, 0x3A	; 58
    8958:	df 4f       	sbci	r29, 0xFF	; 255
    895a:	e8 80       	ld	r14, Y
    895c:	f9 80       	ldd	r15, Y+1	; 0x01
    895e:	c6 5c       	subi	r28, 0xC6	; 198
    8960:	d0 40       	sbci	r29, 0x00	; 0
    8962:	cc 53       	subi	r28, 0x3C	; 60
    8964:	df 4f       	sbci	r29, 0xFF	; 255
    8966:	08 81       	ld	r16, Y
    8968:	19 81       	ldd	r17, Y+1	; 0x01
    896a:	c4 5c       	subi	r28, 0xC4	; 196
    896c:	d0 40       	sbci	r29, 0x00	; 0
    896e:	c8 54       	subi	r28, 0x48	; 72
    8970:	df 4f       	sbci	r29, 0xFF	; 255
    8972:	e8 81       	ld	r30, Y
    8974:	f9 81       	ldd	r31, Y+1	; 0x01
    8976:	c8 5b       	subi	r28, 0xB8	; 184
    8978:	d0 40       	sbci	r29, 0x00	; 0
    897a:	8e 0f       	add	r24, r30
    897c:	9f 1f       	adc	r25, r31
    897e:	0e 94 b8 24 	call	0x4970	; 0x4970 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    8982:	18 2f       	mov	r17, r24
    8984:	88 23       	and	r24, r24
    8986:	b9 f0       	breq	.+46     	; 0x89b6 <draw_menu(bool)+0xf70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1872
      {
        fntargs =  pgm_read_word(&symbol_button_1->onclick);
    8988:	f6 01       	movw	r30, r12
    898a:	33 97       	sbiw	r30, 0x03	; 3
    898c:	e6 0d       	add	r30, r6
    898e:	f7 1d       	adc	r31, r7
    8990:	25 91       	lpm	r18, Z+
    8992:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1873
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    8994:	f5 01       	movw	r30, r10
    8996:	84 91       	lpm	r24, Z
    8998:	cd 54       	subi	r28, 0x4D	; 77
    899a:	df 4f       	sbci	r29, 0xFF	; 255
    899c:	68 81       	ld	r22, Y
    899e:	c3 5b       	subi	r28, 0xB3	; 179
    89a0:	d0 40       	sbci	r29, 0x00	; 0
    89a2:	70 e0       	ldi	r23, 0x00	; 0
    89a4:	45 2d       	mov	r20, r5
    89a6:	90 e0       	ldi	r25, 0x00	; 0
    89a8:	f9 01       	movw	r30, r18
    89aa:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1874
        ret = true;
    89ac:	c4 53       	subi	r28, 0x34	; 52
    89ae:	df 4f       	sbci	r29, 0xFF	; 255
    89b0:	18 83       	st	Y, r17
    89b2:	cc 5c       	subi	r28, 0xCC	; 204
    89b4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1856
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    89b6:	53 94       	inc	r5
    89b8:	2e cf       	rjmp	.-420    	; 0x8816 <draw_menu(bool)+0xdd0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1877
        fntargs =  pgm_read_word(&symbol_button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    89ba:	c4 53       	subi	r28, 0x34	; 52
    89bc:	df 4f       	sbci	r29, 0xFF	; 255
    89be:	f8 81       	ld	r31, Y
    89c0:	cc 5c       	subi	r28, 0xCC	; 204
    89c2:	d0 40       	sbci	r29, 0x00	; 0
    89c4:	f1 11       	cpse	r31, r1
    89c6:	0c 94 c3 4f 	jmp	0x9f86	; 0x9f86 <draw_menu(bool)+0x2540>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1879
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    89ca:	51 2c       	mov	r5, r1
    89cc:	93 01       	movw	r18, r6
    89ce:	25 5b       	subi	r18, 0xB5	; 181
    89d0:	3d 4f       	sbci	r19, 0xFD	; 253
    89d2:	cc 52       	subi	r28, 0x2C	; 44
    89d4:	df 4f       	sbci	r29, 0xFF	; 255
    89d6:	39 83       	std	Y+1, r19	; 0x01
    89d8:	28 83       	st	Y, r18
    89da:	c4 5d       	subi	r28, 0xD4	; 212
    89dc:	d0 40       	sbci	r29, 0x00	; 0
    89de:	cc 52       	subi	r28, 0x2C	; 44
    89e0:	df 4f       	sbci	r29, 0xFF	; 255
    89e2:	e8 81       	ld	r30, Y
    89e4:	f9 81       	ldd	r31, Y+1	; 0x01
    89e6:	c4 5d       	subi	r28, 0xD4	; 212
    89e8:	d0 40       	sbci	r29, 0x00	; 0
    89ea:	84 91       	lpm	r24, Z
    89ec:	58 16       	cp	r5, r24
    89ee:	08 f0       	brcs	.+2      	; 0x89f2 <draw_menu(bool)+0xfac>
    89f0:	51 c3       	rjmp	.+1698   	; 0x9094 <draw_menu(bool)+0x164e>
    89f2:	f7 e1       	ldi	r31, 0x17	; 23
    89f4:	5f 9e       	mul	r5, r31
    89f6:	60 01       	movw	r12, r0
    89f8:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1882
  {
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    89fa:	f6 01       	movw	r30, r12
    89fc:	e8 50       	subi	r30, 0x08	; 8
    89fe:	fe 4f       	sbci	r31, 0xFE	; 254
    8a00:	e6 0d       	add	r30, r6
    8a02:	f7 1d       	adc	r31, r7
    8a04:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1883
    if (enable_redraw(rdr, redraw_class) == true)
    8a06:	cf 52       	subi	r28, 0x2F	; 47
    8a08:	df 4f       	sbci	r29, 0xFF	; 255
    8a0a:	68 81       	ld	r22, Y
    8a0c:	c1 5d       	subi	r28, 0xD1	; 209
    8a0e:	d0 40       	sbci	r29, 0x00	; 0
    8a10:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <enable_redraw(unsigned char, unsigned char)>
    8a14:	88 23       	and	r24, r24
    8a16:	09 f4       	brne	.+2      	; 0x8a1a <draw_menu(bool)+0xfd4>
    8a18:	89 c1       	rjmp	.+786    	; 0x8d2c <draw_menu(bool)+0x12e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1885
    {
      loop_i = 0;
    8a1a:	ce 54       	subi	r28, 0x4E	; 78
    8a1c:	df 4f       	sbci	r29, 0xFF	; 255
    8a1e:	18 82       	st	Y, r1
    8a20:	c2 5b       	subi	r28, 0xB2	; 178
    8a22:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1888
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
    8a24:	f6 01       	movw	r30, r12
    8a26:	ea 50       	subi	r30, 0x0A	; 10
    8a28:	fe 4f       	sbci	r31, 0xFE	; 254
    8a2a:	e6 0d       	add	r30, r6
    8a2c:	f7 1d       	adc	r31, r7
    8a2e:	25 91       	lpm	r18, Z+
    8a30:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1889
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    8a32:	f6 01       	movw	r30, r12
    8a34:	ef 50       	subi	r30, 0x0F	; 15
    8a36:	fe 4f       	sbci	r31, 0xFE	; 254
    8a38:	e6 0d       	add	r30, r6
    8a3a:	f7 1d       	adc	r31, r7
    8a3c:	84 91       	lpm	r24, Z
    8a3e:	cd 54       	subi	r28, 0x4D	; 77
    8a40:	df 4f       	sbci	r29, 0xFF	; 255
    8a42:	68 81       	ld	r22, Y
    8a44:	c3 5b       	subi	r28, 0xB3	; 179
    8a46:	d0 40       	sbci	r29, 0x00	; 0
    8a48:	70 e0       	ldi	r23, 0x00	; 0
    8a4a:	40 e0       	ldi	r20, 0x00	; 0
    8a4c:	90 e0       	ldi	r25, 0x00	; 0
    8a4e:	f9 01       	movw	r30, r18
    8a50:	19 95       	eicall
    8a52:	cf 54       	subi	r28, 0x4F	; 79
    8a54:	df 4f       	sbci	r29, 0xFF	; 255
    8a56:	88 83       	st	Y, r24
    8a58:	c1 5b       	subi	r28, 0xB1	; 177
    8a5a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1890
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
    8a5c:	f6 01       	movw	r30, r12
    8a5e:	ee 50       	subi	r30, 0x0E	; 14
    8a60:	fe 4f       	sbci	r31, 0xFE	; 254
    8a62:	e6 0d       	add	r30, r6
    8a64:	f7 1d       	adc	r31, r7
    8a66:	25 91       	lpm	r18, Z+
    8a68:	34 91       	lpm	r19, Z
    8a6a:	c1 53       	subi	r28, 0x31	; 49
    8a6c:	df 4f       	sbci	r29, 0xFF	; 255
    8a6e:	39 83       	std	Y+1, r19	; 0x01
    8a70:	28 83       	st	Y, r18
    8a72:	cf 5c       	subi	r28, 0xCF	; 207
    8a74:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1893
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8a76:	56 01       	movw	r10, r12
    8a78:	3e e1       	ldi	r19, 0x1E	; 30
    8a7a:	a3 1a       	sub	r10, r19
    8a7c:	3e ef       	ldi	r19, 0xFE	; 254
    8a7e:	b3 0a       	sbc	r11, r19
    8a80:	a6 0c       	add	r10, r6
    8a82:	b7 1c       	adc	r11, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1894
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8a84:	46 01       	movw	r8, r12
    8a86:	4c e1       	ldi	r20, 0x1C	; 28
    8a88:	84 1a       	sub	r8, r20
    8a8a:	4e ef       	ldi	r20, 0xFE	; 254
    8a8c:	94 0a       	sbc	r9, r20
    8a8e:	86 0c       	add	r8, r6
    8a90:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1895
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    8a92:	16 01       	movw	r2, r12
    8a94:	53 e1       	ldi	r21, 0x13	; 19
    8a96:	25 1a       	sub	r2, r21
    8a98:	5e ef       	ldi	r21, 0xFE	; 254
    8a9a:	35 0a       	sbc	r3, r21
    8a9c:	26 0c       	add	r2, r6
    8a9e:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1897
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    8aa0:	c6 01       	movw	r24, r12
    8aa2:	84 51       	subi	r24, 0x14	; 20
    8aa4:	9e 4f       	sbci	r25, 0xFE	; 254
    8aa6:	b3 01       	movw	r22, r6
    8aa8:	68 0f       	add	r22, r24
    8aaa:	79 1f       	adc	r23, r25
    8aac:	ca 54       	subi	r28, 0x4A	; 74
    8aae:	df 4f       	sbci	r29, 0xFF	; 255
    8ab0:	79 83       	std	Y+1, r23	; 0x01
    8ab2:	68 83       	st	Y, r22
    8ab4:	c6 5b       	subi	r28, 0xB6	; 182
    8ab6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1902
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8ab8:	01 97       	sbiw	r24, 0x01	; 1
    8aba:	f3 01       	movw	r30, r6
    8abc:	e8 0f       	add	r30, r24
    8abe:	f9 1f       	adc	r31, r25
    8ac0:	c4 54       	subi	r28, 0x44	; 68
    8ac2:	df 4f       	sbci	r29, 0xFF	; 255
    8ac4:	f9 83       	std	Y+1, r31	; 0x01
    8ac6:	e8 83       	st	Y, r30
    8ac8:	cc 5b       	subi	r28, 0xBC	; 188
    8aca:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1910
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    8acc:	03 96       	adiw	r24, 0x03	; 3
    8ace:	93 01       	movw	r18, r6
    8ad0:	28 0f       	add	r18, r24
    8ad2:	39 1f       	adc	r19, r25
    8ad4:	ce 53       	subi	r28, 0x3E	; 62
    8ad6:	df 4f       	sbci	r29, 0xFF	; 255
    8ad8:	39 83       	std	Y+1, r19	; 0x01
    8ada:	28 83       	st	Y, r18
    8adc:	c2 5c       	subi	r28, 0xC2	; 194
    8ade:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1918
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    8ae0:	04 97       	sbiw	r24, 0x04	; 4
    8ae2:	a3 01       	movw	r20, r6
    8ae4:	48 0f       	add	r20, r24
    8ae6:	59 1f       	adc	r21, r25
    8ae8:	c8 53       	subi	r28, 0x38	; 56
    8aea:	df 4f       	sbci	r29, 0xFF	; 255
    8aec:	59 83       	std	Y+1, r21	; 0x01
    8aee:	48 83       	st	Y, r20
    8af0:	c8 5c       	subi	r28, 0xC8	; 200
    8af2:	d0 40       	sbci	r29, 0x00	; 0
    8af4:	02 97       	sbiw	r24, 0x02	; 2
    8af6:	b3 01       	movw	r22, r6
    8af8:	68 0f       	add	r22, r24
    8afa:	79 1f       	adc	r23, r25
    8afc:	c6 53       	subi	r28, 0x36	; 54
    8afe:	df 4f       	sbci	r29, 0xFF	; 255
    8b00:	79 83       	std	Y+1, r23	; 0x01
    8b02:	68 83       	st	Y, r22
    8b04:	ca 5c       	subi	r28, 0xCA	; 202
    8b06:	d0 40       	sbci	r29, 0x00	; 0
    8b08:	02 97       	sbiw	r24, 0x02	; 2
    8b0a:	f3 01       	movw	r30, r6
    8b0c:	e8 0f       	add	r30, r24
    8b0e:	f9 1f       	adc	r31, r25
    8b10:	c3 53       	subi	r28, 0x33	; 51
    8b12:	df 4f       	sbci	r29, 0xFF	; 255
    8b14:	f9 83       	std	Y+1, r31	; 0x01
    8b16:	e8 83       	st	Y, r30
    8b18:	cd 5c       	subi	r28, 0xCD	; 205
    8b1a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1887
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    8b1c:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1886
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
    8b1e:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1891
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
    8b20:	ce 54       	subi	r28, 0x4E	; 78
    8b22:	df 4f       	sbci	r29, 0xFF	; 255
    8b24:	88 81       	ld	r24, Y
    8b26:	c2 5b       	subi	r28, 0xB2	; 178
    8b28:	d0 40       	sbci	r29, 0x00	; 0
    8b2a:	cf 54       	subi	r28, 0x4F	; 79
    8b2c:	df 4f       	sbci	r29, 0xFF	; 255
    8b2e:	98 81       	ld	r25, Y
    8b30:	c1 5b       	subi	r28, 0xB1	; 177
    8b32:	d0 40       	sbci	r29, 0x00	; 0
    8b34:	89 17       	cp	r24, r25
    8b36:	08 f0       	brcs	.+2      	; 0x8b3a <draw_menu(bool)+0x10f4>
    8b38:	f9 c0       	rjmp	.+498    	; 0x8d2c <draw_menu(bool)+0x12e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1893
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8b3a:	f5 01       	movw	r30, r10
    8b3c:	45 91       	lpm	r20, Z+
    8b3e:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1894
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8b40:	f4 01       	movw	r30, r8
    8b42:	25 91       	lpm	r18, Z+
    8b44:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1895
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    8b46:	f1 01       	movw	r30, r2
    8b48:	94 91       	lpm	r25, Z
    8b4a:	99 23       	and	r25, r25
    8b4c:	09 f4       	brne	.+2      	; 0x8b50 <draw_menu(bool)+0x110a>
    8b4e:	b0 c0       	rjmp	.+352    	; 0x8cb0 <draw_menu(bool)+0x126a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1894
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8b50:	c6 54       	subi	r28, 0x46	; 70
    8b52:	df 4f       	sbci	r29, 0xFF	; 255
    8b54:	68 81       	ld	r22, Y
    8b56:	79 81       	ldd	r23, Y+1	; 0x01
    8b58:	ca 5b       	subi	r28, 0xBA	; 186
    8b5a:	d0 40       	sbci	r29, 0x00	; 0
    8b5c:	62 0f       	add	r22, r18
    8b5e:	73 1f       	adc	r23, r19
    8b60:	c0 54       	subi	r28, 0x40	; 64
    8b62:	df 4f       	sbci	r29, 0xFF	; 255
    8b64:	79 83       	std	Y+1, r23	; 0x01
    8b66:	68 83       	st	Y, r22
    8b68:	c0 5c       	subi	r28, 0xC0	; 192
    8b6a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1900
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    8b6c:	f1 01       	movw	r30, r2
    8b6e:	94 91       	lpm	r25, Z
    8b70:	91 30       	cpi	r25, 0x01	; 1
    8b72:	09 f4       	brne	.+2      	; 0x8b76 <draw_menu(bool)+0x1130>
    8b74:	bc c0       	rjmp	.+376    	; 0x8cee <draw_menu(bool)+0x12a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1893
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8b76:	c8 54       	subi	r28, 0x48	; 72
    8b78:	df 4f       	sbci	r29, 0xFF	; 255
    8b7a:	28 81       	ld	r18, Y
    8b7c:	39 81       	ldd	r19, Y+1	; 0x01
    8b7e:	c8 5b       	subi	r28, 0xB8	; 184
    8b80:	d0 40       	sbci	r29, 0x00	; 0
    8b82:	24 0f       	add	r18, r20
    8b84:	35 1f       	adc	r19, r21
    8b86:	c2 54       	subi	r28, 0x42	; 66
    8b88:	df 4f       	sbci	r29, 0xFF	; 255
    8b8a:	39 83       	std	Y+1, r19	; 0x01
    8b8c:	28 83       	st	Y, r18
    8b8e:	ce 5b       	subi	r28, 0xBE	; 190
    8b90:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1905
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    8b92:	f1 01       	movw	r30, r2
    8b94:	94 91       	lpm	r25, Z
    8b96:	92 30       	cpi	r25, 0x02	; 2
    8b98:	09 f0       	breq	.+2      	; 0x8b9c <draw_menu(bool)+0x1156>
    8b9a:	46 c0       	rjmp	.+140    	; 0x8c28 <draw_menu(bool)+0x11e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1907
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8b9c:	f5 01       	movw	r30, r10
    8b9e:	25 91       	lpm	r18, Z+
    8ba0:	34 91       	lpm	r19, Z
    8ba2:	c4 54       	subi	r28, 0x44	; 68
    8ba4:	df 4f       	sbci	r29, 0xFF	; 255
    8ba6:	e8 81       	ld	r30, Y
    8ba8:	f9 81       	ldd	r31, Y+1	; 0x01
    8baa:	cc 5b       	subi	r28, 0xBC	; 188
    8bac:	d0 40       	sbci	r29, 0x00	; 0
    8bae:	94 91       	lpm	r25, Z
    8bb0:	c8 54       	subi	r28, 0x48	; 72
    8bb2:	df 4f       	sbci	r29, 0xFF	; 255
    8bb4:	48 81       	ld	r20, Y
    8bb6:	59 81       	ldd	r21, Y+1	; 0x01
    8bb8:	c8 5b       	subi	r28, 0xB8	; 184
    8bba:	d0 40       	sbci	r29, 0x00	; 0
    8bbc:	24 0f       	add	r18, r20
    8bbe:	35 1f       	adc	r19, r21
    8bc0:	b9 01       	movw	r22, r18
    8bc2:	91 9f       	mul	r25, r17
    8bc4:	60 0d       	add	r22, r0
    8bc6:	71 1d       	adc	r23, r1
    8bc8:	11 24       	eor	r1, r1
    8bca:	c2 54       	subi	r28, 0x42	; 66
    8bcc:	df 4f       	sbci	r29, 0xFF	; 255
    8bce:	79 83       	std	Y+1, r23	; 0x01
    8bd0:	68 83       	st	Y, r22
    8bd2:	ce 5b       	subi	r28, 0xBE	; 190
    8bd4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1908
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
    8bd6:	f4 01       	movw	r30, r8
    8bd8:	25 91       	lpm	r18, Z+
    8bda:	34 91       	lpm	r19, Z
    8bdc:	ca 54       	subi	r28, 0x4A	; 74
    8bde:	df 4f       	sbci	r29, 0xFF	; 255
    8be0:	e8 81       	ld	r30, Y
    8be2:	f9 81       	ldd	r31, Y+1	; 0x01
    8be4:	c6 5b       	subi	r28, 0xB6	; 182
    8be6:	d0 40       	sbci	r29, 0x00	; 0
    8be8:	94 91       	lpm	r25, Z
    8bea:	c6 54       	subi	r28, 0x46	; 70
    8bec:	df 4f       	sbci	r29, 0xFF	; 255
    8bee:	48 81       	ld	r20, Y
    8bf0:	59 81       	ldd	r21, Y+1	; 0x01
    8bf2:	ca 5b       	subi	r28, 0xBA	; 186
    8bf4:	d0 40       	sbci	r29, 0x00	; 0
    8bf6:	24 0f       	add	r18, r20
    8bf8:	35 1f       	adc	r19, r21
    8bfa:	b9 01       	movw	r22, r18
    8bfc:	9f 9d       	mul	r25, r15
    8bfe:	60 0d       	add	r22, r0
    8c00:	71 1d       	adc	r23, r1
    8c02:	11 24       	eor	r1, r1
    8c04:	c0 54       	subi	r28, 0x40	; 64
    8c06:	df 4f       	sbci	r29, 0xFF	; 255
    8c08:	79 83       	std	Y+1, r23	; 0x01
    8c0a:	68 83       	st	Y, r22
    8c0c:	c0 5c       	subi	r28, 0xC0	; 192
    8c0e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1909
          loop_t++;
    8c10:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1910
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    8c12:	ce 53       	subi	r28, 0x3E	; 62
    8c14:	df 4f       	sbci	r29, 0xFF	; 255
    8c16:	e8 81       	ld	r30, Y
    8c18:	f9 81       	ldd	r31, Y+1	; 0x01
    8c1a:	c2 5c       	subi	r28, 0xC2	; 194
    8c1c:	d0 40       	sbci	r29, 0x00	; 0
    8c1e:	94 91       	lpm	r25, Z
    8c20:	19 17       	cp	r17, r25
    8c22:	10 f0       	brcs	.+4      	; 0x8c28 <draw_menu(bool)+0x11e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1913
          {
            loop_t = 0;
            loop_r++;
    8c24:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1912
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
    8c26:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1916
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    8c28:	9e 01       	movw	r18, r28
    8c2a:	2f 57       	subi	r18, 0x7F	; 127
    8c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    8c2e:	ae 01       	movw	r20, r28
    8c30:	4f 5f       	subi	r20, 0xFF	; 255
    8c32:	5f 4f       	sbci	r21, 0xFF	; 255
    8c34:	cd 54       	subi	r28, 0x4D	; 77
    8c36:	df 4f       	sbci	r29, 0xFF	; 255
    8c38:	68 81       	ld	r22, Y
    8c3a:	c3 5b       	subi	r28, 0xB3	; 179
    8c3c:	d0 40       	sbci	r29, 0x00	; 0
    8c3e:	c1 53       	subi	r28, 0x31	; 49
    8c40:	df 4f       	sbci	r29, 0xFF	; 255
    8c42:	e8 81       	ld	r30, Y
    8c44:	f9 81       	ldd	r31, Y+1	; 0x01
    8c46:	cf 5c       	subi	r28, 0xCF	; 207
    8c48:	d0 40       	sbci	r29, 0x00	; 0
    8c4a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1918
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    8c4c:	c8 53       	subi	r28, 0x38	; 56
    8c4e:	df 4f       	sbci	r29, 0xFF	; 255
    8c50:	e8 81       	ld	r30, Y
    8c52:	f9 81       	ldd	r31, Y+1	; 0x01
    8c54:	c8 5c       	subi	r28, 0xC8	; 200
    8c56:	d0 40       	sbci	r29, 0x00	; 0
    8c58:	04 91       	lpm	r16, Z
    8c5a:	c6 53       	subi	r28, 0x36	; 54
    8c5c:	df 4f       	sbci	r29, 0xFF	; 255
    8c5e:	e8 81       	ld	r30, Y
    8c60:	f9 81       	ldd	r31, Y+1	; 0x01
    8c62:	ca 5c       	subi	r28, 0xCA	; 202
    8c64:	d0 40       	sbci	r29, 0x00	; 0
    8c66:	25 91       	lpm	r18, Z+
    8c68:	34 91       	lpm	r19, Z
    8c6a:	c3 53       	subi	r28, 0x33	; 51
    8c6c:	df 4f       	sbci	r29, 0xFF	; 255
    8c6e:	e8 81       	ld	r30, Y
    8c70:	f9 81       	ldd	r31, Y+1	; 0x01
    8c72:	cd 5c       	subi	r28, 0xCD	; 205
    8c74:	d0 40       	sbci	r29, 0x00	; 0
    8c76:	45 91       	lpm	r20, Z+
    8c78:	54 91       	lpm	r21, Z
    8c7a:	e9 80       	ldd	r14, Y+1	; 0x01
    8c7c:	c0 54       	subi	r28, 0x40	; 64
    8c7e:	df 4f       	sbci	r29, 0xFF	; 255
    8c80:	68 81       	ld	r22, Y
    8c82:	79 81       	ldd	r23, Y+1	; 0x01
    8c84:	c0 5c       	subi	r28, 0xC0	; 192
    8c86:	d0 40       	sbci	r29, 0x00	; 0
    8c88:	c2 54       	subi	r28, 0x42	; 66
    8c8a:	df 4f       	sbci	r29, 0xFF	; 255
    8c8c:	88 81       	ld	r24, Y
    8c8e:	99 81       	ldd	r25, Y+1	; 0x01
    8c90:	ce 5b       	subi	r28, 0xBE	; 190
    8c92:	d0 40       	sbci	r29, 0x00	; 0
    8c94:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1919
        loop_i++;
    8c98:	ce 54       	subi	r28, 0x4E	; 78
    8c9a:	df 4f       	sbci	r29, 0xFF	; 255
    8c9c:	88 81       	ld	r24, Y
    8c9e:	c2 5b       	subi	r28, 0xB2	; 178
    8ca0:	d0 40       	sbci	r29, 0x00	; 0
    8ca2:	8f 5f       	subi	r24, 0xFF	; 255
    8ca4:	ce 54       	subi	r28, 0x4E	; 78
    8ca6:	df 4f       	sbci	r29, 0xFF	; 255
    8ca8:	88 83       	st	Y, r24
    8caa:	c2 5b       	subi	r28, 0xB2	; 178
    8cac:	d0 40       	sbci	r29, 0x00	; 0
    8cae:	38 cf       	rjmp	.-400    	; 0x8b20 <draw_menu(bool)+0x10da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1897
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    8cb0:	f4 01       	movw	r30, r8
    8cb2:	25 91       	lpm	r18, Z+
    8cb4:	34 91       	lpm	r19, Z
    8cb6:	ca 54       	subi	r28, 0x4A	; 74
    8cb8:	df 4f       	sbci	r29, 0xFF	; 255
    8cba:	e8 81       	ld	r30, Y
    8cbc:	f9 81       	ldd	r31, Y+1	; 0x01
    8cbe:	c6 5b       	subi	r28, 0xB6	; 182
    8cc0:	d0 40       	sbci	r29, 0x00	; 0
    8cc2:	94 91       	lpm	r25, Z
    8cc4:	c6 54       	subi	r28, 0x46	; 70
    8cc6:	df 4f       	sbci	r29, 0xFF	; 255
    8cc8:	68 81       	ld	r22, Y
    8cca:	79 81       	ldd	r23, Y+1	; 0x01
    8ccc:	ca 5b       	subi	r28, 0xBA	; 186
    8cce:	d0 40       	sbci	r29, 0x00	; 0
    8cd0:	26 0f       	add	r18, r22
    8cd2:	37 1f       	adc	r19, r23
    8cd4:	f9 01       	movw	r30, r18
    8cd6:	91 9f       	mul	r25, r17
    8cd8:	e0 0d       	add	r30, r0
    8cda:	f1 1d       	adc	r31, r1
    8cdc:	11 24       	eor	r1, r1
    8cde:	c0 54       	subi	r28, 0x40	; 64
    8ce0:	df 4f       	sbci	r29, 0xFF	; 255
    8ce2:	f9 83       	std	Y+1, r31	; 0x01
    8ce4:	e8 83       	st	Y, r30
    8ce6:	c0 5c       	subi	r28, 0xC0	; 192
    8ce8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1898
          loop_t++;
    8cea:	1f 5f       	subi	r17, 0xFF	; 255
    8cec:	3f cf       	rjmp	.-386    	; 0x8b6c <draw_menu(bool)+0x1126>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1902
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8cee:	f5 01       	movw	r30, r10
    8cf0:	25 91       	lpm	r18, Z+
    8cf2:	34 91       	lpm	r19, Z
    8cf4:	c4 54       	subi	r28, 0x44	; 68
    8cf6:	df 4f       	sbci	r29, 0xFF	; 255
    8cf8:	e8 81       	ld	r30, Y
    8cfa:	f9 81       	ldd	r31, Y+1	; 0x01
    8cfc:	cc 5b       	subi	r28, 0xBC	; 188
    8cfe:	d0 40       	sbci	r29, 0x00	; 0
    8d00:	94 91       	lpm	r25, Z
    8d02:	c8 54       	subi	r28, 0x48	; 72
    8d04:	df 4f       	sbci	r29, 0xFF	; 255
    8d06:	48 81       	ld	r20, Y
    8d08:	59 81       	ldd	r21, Y+1	; 0x01
    8d0a:	c8 5b       	subi	r28, 0xB8	; 184
    8d0c:	d0 40       	sbci	r29, 0x00	; 0
    8d0e:	24 0f       	add	r18, r20
    8d10:	35 1f       	adc	r19, r21
    8d12:	b9 01       	movw	r22, r18
    8d14:	91 9f       	mul	r25, r17
    8d16:	60 0d       	add	r22, r0
    8d18:	71 1d       	adc	r23, r1
    8d1a:	11 24       	eor	r1, r1
    8d1c:	c2 54       	subi	r28, 0x42	; 66
    8d1e:	df 4f       	sbci	r29, 0xFF	; 255
    8d20:	79 83       	std	Y+1, r23	; 0x01
    8d22:	68 83       	st	Y, r22
    8d24:	ce 5b       	subi	r28, 0xBE	; 190
    8d26:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1903
          loop_t++;
    8d28:	1f 5f       	subi	r17, 0xFF	; 255
    8d2a:	33 cf       	rjmp	.-410    	; 0x8b92 <draw_menu(bool)+0x114c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1922
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    8d2c:	cc 53       	subi	r28, 0x3C	; 60
    8d2e:	df 4f       	sbci	r29, 0xFF	; 255
    8d30:	28 81       	ld	r18, Y
    8d32:	39 81       	ldd	r19, Y+1	; 0x01
    8d34:	c4 5c       	subi	r28, 0xC4	; 196
    8d36:	d0 40       	sbci	r29, 0x00	; 0
    8d38:	23 2b       	or	r18, r19
    8d3a:	09 f4       	brne	.+2      	; 0x8d3e <draw_menu(bool)+0x12f8>
    8d3c:	69 c1       	rjmp	.+722    	; 0x9010 <draw_menu(bool)+0x15ca>
    8d3e:	ca 53       	subi	r28, 0x3A	; 58
    8d40:	df 4f       	sbci	r29, 0xFF	; 255
    8d42:	48 81       	ld	r20, Y
    8d44:	59 81       	ldd	r21, Y+1	; 0x01
    8d46:	c6 5c       	subi	r28, 0xC6	; 198
    8d48:	d0 40       	sbci	r29, 0x00	; 0
    8d4a:	45 2b       	or	r20, r21
    8d4c:	09 f4       	brne	.+2      	; 0x8d50 <draw_menu(bool)+0x130a>
    8d4e:	60 c1       	rjmp	.+704    	; 0x9010 <draw_menu(bool)+0x15ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1924
    {
      loop_i = 0;
    8d50:	ce 54       	subi	r28, 0x4E	; 78
    8d52:	df 4f       	sbci	r29, 0xFF	; 255
    8d54:	18 82       	st	Y, r1
    8d56:	c2 5b       	subi	r28, 0xB2	; 178
    8d58:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1927
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
    8d5a:	f6 01       	movw	r30, r12
    8d5c:	ea 50       	subi	r30, 0x0A	; 10
    8d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    8d60:	e6 0d       	add	r30, r6
    8d62:	f7 1d       	adc	r31, r7
    8d64:	25 91       	lpm	r18, Z+
    8d66:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1928
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    8d68:	c6 01       	movw	r24, r12
    8d6a:	8f 50       	subi	r24, 0x0F	; 15
    8d6c:	9e 4f       	sbci	r25, 0xFE	; 254
    8d6e:	b3 01       	movw	r22, r6
    8d70:	68 0f       	add	r22, r24
    8d72:	79 1f       	adc	r23, r25
    8d74:	ce 53       	subi	r28, 0x3E	; 62
    8d76:	df 4f       	sbci	r29, 0xFF	; 255
    8d78:	79 83       	std	Y+1, r23	; 0x01
    8d7a:	68 83       	st	Y, r22
    8d7c:	c2 5c       	subi	r28, 0xC2	; 194
    8d7e:	d0 40       	sbci	r29, 0x00	; 0
    8d80:	fb 01       	movw	r30, r22
    8d82:	84 91       	lpm	r24, Z
    8d84:	cd 54       	subi	r28, 0x4D	; 77
    8d86:	df 4f       	sbci	r29, 0xFF	; 255
    8d88:	68 81       	ld	r22, Y
    8d8a:	c3 5b       	subi	r28, 0xB3	; 179
    8d8c:	d0 40       	sbci	r29, 0x00	; 0
    8d8e:	70 e0       	ldi	r23, 0x00	; 0
    8d90:	40 e0       	ldi	r20, 0x00	; 0
    8d92:	90 e0       	ldi	r25, 0x00	; 0
    8d94:	f9 01       	movw	r30, r18
    8d96:	19 95       	eicall
    8d98:	c4 54       	subi	r28, 0x44	; 68
    8d9a:	df 4f       	sbci	r29, 0xFF	; 255
    8d9c:	88 83       	st	Y, r24
    8d9e:	cc 5b       	subi	r28, 0xBC	; 188
    8da0:	d0 40       	sbci	r29, 0x00	; 0
    8da2:	cf 54       	subi	r28, 0x4F	; 79
    8da4:	df 4f       	sbci	r29, 0xFF	; 255
    8da6:	88 83       	st	Y, r24
    8da8:	c1 5b       	subi	r28, 0xB1	; 177
    8daa:	d0 40       	sbci	r29, 0x00	; 0
    8dac:	ce 54       	subi	r28, 0x4E	; 78
    8dae:	df 4f       	sbci	r29, 0xFF	; 255
    8db0:	a8 80       	ld	r10, Y
    8db2:	c2 5b       	subi	r28, 0xB2	; 178
    8db4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1931
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8db6:	16 01       	movw	r2, r12
    8db8:	fe e1       	ldi	r31, 0x1E	; 30
    8dba:	2f 1a       	sub	r2, r31
    8dbc:	fe ef       	ldi	r31, 0xFE	; 254
    8dbe:	3f 0a       	sbc	r3, r31
    8dc0:	26 0c       	add	r2, r6
    8dc2:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1932
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8dc4:	46 01       	movw	r8, r12
    8dc6:	2c e1       	ldi	r18, 0x1C	; 28
    8dc8:	82 1a       	sub	r8, r18
    8dca:	2e ef       	ldi	r18, 0xFE	; 254
    8dcc:	92 0a       	sbc	r9, r18
    8dce:	86 0c       	add	r8, r6
    8dd0:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1933
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    8dd2:	c6 01       	movw	r24, r12
    8dd4:	83 51       	subi	r24, 0x13	; 19
    8dd6:	9e 4f       	sbci	r25, 0xFE	; 254
    8dd8:	a3 01       	movw	r20, r6
    8dda:	48 0f       	add	r20, r24
    8ddc:	59 1f       	adc	r21, r25
    8dde:	ca 54       	subi	r28, 0x4A	; 74
    8de0:	df 4f       	sbci	r29, 0xFF	; 255
    8de2:	59 83       	std	Y+1, r21	; 0x01
    8de4:	48 83       	st	Y, r20
    8de6:	c6 5b       	subi	r28, 0xB6	; 182
    8de8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1935
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    8dea:	01 97       	sbiw	r24, 0x01	; 1
    8dec:	b3 01       	movw	r22, r6
    8dee:	68 0f       	add	r22, r24
    8df0:	79 1f       	adc	r23, r25
    8df2:	c8 53       	subi	r28, 0x38	; 56
    8df4:	df 4f       	sbci	r29, 0xFF	; 255
    8df6:	79 83       	std	Y+1, r23	; 0x01
    8df8:	68 83       	st	Y, r22
    8dfa:	c8 5c       	subi	r28, 0xC8	; 200
    8dfc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8dfe:	01 97       	sbiw	r24, 0x01	; 1
    8e00:	f3 01       	movw	r30, r6
    8e02:	e8 0f       	add	r30, r24
    8e04:	f9 1f       	adc	r31, r25
    8e06:	c6 53       	subi	r28, 0x36	; 54
    8e08:	df 4f       	sbci	r29, 0xFF	; 255
    8e0a:	f9 83       	std	Y+1, r31	; 0x01
    8e0c:	e8 83       	st	Y, r30
    8e0e:	ca 5c       	subi	r28, 0xCA	; 202
    8e10:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1948
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    8e12:	03 96       	adiw	r24, 0x03	; 3
    8e14:	93 01       	movw	r18, r6
    8e16:	28 0f       	add	r18, r24
    8e18:	39 1f       	adc	r19, r25
    8e1a:	c3 53       	subi	r28, 0x33	; 51
    8e1c:	df 4f       	sbci	r29, 0xFF	; 255
    8e1e:	39 83       	std	Y+1, r19	; 0x01
    8e20:	28 83       	st	Y, r18
    8e22:	cd 5c       	subi	r28, 0xCD	; 205
    8e24:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1954
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    8e26:	06 97       	sbiw	r24, 0x06	; 6
    8e28:	a3 01       	movw	r20, r6
    8e2a:	48 0f       	add	r20, r24
    8e2c:	59 1f       	adc	r21, r25
    8e2e:	c1 53       	subi	r28, 0x31	; 49
    8e30:	df 4f       	sbci	r29, 0xFF	; 255
    8e32:	59 83       	std	Y+1, r21	; 0x01
    8e34:	48 83       	st	Y, r20
    8e36:	cf 5c       	subi	r28, 0xCF	; 207
    8e38:	d0 40       	sbci	r29, 0x00	; 0
    8e3a:	02 97       	sbiw	r24, 0x02	; 2
    8e3c:	b3 01       	movw	r22, r6
    8e3e:	68 0f       	add	r22, r24
    8e40:	79 1f       	adc	r23, r25
    8e42:	ce 52       	subi	r28, 0x2E	; 46
    8e44:	df 4f       	sbci	r29, 0xFF	; 255
    8e46:	79 83       	std	Y+1, r23	; 0x01
    8e48:	68 83       	st	Y, r22
    8e4a:	c2 5d       	subi	r28, 0xD2	; 210
    8e4c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1926
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    8e4e:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1925
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
    8e50:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
    8e52:	c4 54       	subi	r28, 0x44	; 68
    8e54:	df 4f       	sbci	r29, 0xFF	; 255
    8e56:	78 81       	ld	r23, Y
    8e58:	cc 5b       	subi	r28, 0xBC	; 188
    8e5a:	d0 40       	sbci	r29, 0x00	; 0
    8e5c:	a7 16       	cp	r10, r23
    8e5e:	08 f0       	brcs	.+2      	; 0x8e62 <draw_menu(bool)+0x141c>
    8e60:	d7 c0       	rjmp	.+430    	; 0x9010 <draw_menu(bool)+0x15ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1931
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8e62:	f1 01       	movw	r30, r2
    8e64:	25 91       	lpm	r18, Z+
    8e66:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1932
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8e68:	f4 01       	movw	r30, r8
    8e6a:	85 91       	lpm	r24, Z+
    8e6c:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1933
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    8e6e:	ca 54       	subi	r28, 0x4A	; 74
    8e70:	df 4f       	sbci	r29, 0xFF	; 255
    8e72:	e8 81       	ld	r30, Y
    8e74:	f9 81       	ldd	r31, Y+1	; 0x01
    8e76:	c6 5b       	subi	r28, 0xB6	; 182
    8e78:	d0 40       	sbci	r29, 0x00	; 0
    8e7a:	44 91       	lpm	r20, Z
    8e7c:	44 23       	and	r20, r20
    8e7e:	09 f4       	brne	.+2      	; 0x8e82 <draw_menu(bool)+0x143c>
    8e80:	cb c0       	rjmp	.+406    	; 0x9018 <draw_menu(bool)+0x15d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1932
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8e82:	c6 54       	subi	r28, 0x46	; 70
    8e84:	df 4f       	sbci	r29, 0xFF	; 255
    8e86:	48 81       	ld	r20, Y
    8e88:	59 81       	ldd	r21, Y+1	; 0x01
    8e8a:	ca 5b       	subi	r28, 0xBA	; 186
    8e8c:	d0 40       	sbci	r29, 0x00	; 0
    8e8e:	48 0f       	add	r20, r24
    8e90:	59 1f       	adc	r21, r25
    8e92:	c0 54       	subi	r28, 0x40	; 64
    8e94:	df 4f       	sbci	r29, 0xFF	; 255
    8e96:	59 83       	std	Y+1, r21	; 0x01
    8e98:	48 83       	st	Y, r20
    8e9a:	c0 5c       	subi	r28, 0xC0	; 192
    8e9c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1938
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    8e9e:	ca 54       	subi	r28, 0x4A	; 74
    8ea0:	df 4f       	sbci	r29, 0xFF	; 255
    8ea2:	e8 81       	ld	r30, Y
    8ea4:	f9 81       	ldd	r31, Y+1	; 0x01
    8ea6:	c6 5b       	subi	r28, 0xB6	; 182
    8ea8:	d0 40       	sbci	r29, 0x00	; 0
    8eaa:	84 91       	lpm	r24, Z
    8eac:	81 30       	cpi	r24, 0x01	; 1
    8eae:	09 f4       	brne	.+2      	; 0x8eb2 <draw_menu(bool)+0x146c>
    8eb0:	d2 c0       	rjmp	.+420    	; 0x9056 <draw_menu(bool)+0x1610>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1931
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8eb2:	c8 54       	subi	r28, 0x48	; 72
    8eb4:	df 4f       	sbci	r29, 0xFF	; 255
    8eb6:	48 81       	ld	r20, Y
    8eb8:	59 81       	ldd	r21, Y+1	; 0x01
    8eba:	c8 5b       	subi	r28, 0xB8	; 184
    8ebc:	d0 40       	sbci	r29, 0x00	; 0
    8ebe:	42 0f       	add	r20, r18
    8ec0:	53 1f       	adc	r21, r19
    8ec2:	c2 54       	subi	r28, 0x42	; 66
    8ec4:	df 4f       	sbci	r29, 0xFF	; 255
    8ec6:	59 83       	std	Y+1, r21	; 0x01
    8ec8:	48 83       	st	Y, r20
    8eca:	ce 5b       	subi	r28, 0xBE	; 190
    8ecc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1943
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    8ece:	ca 54       	subi	r28, 0x4A	; 74
    8ed0:	df 4f       	sbci	r29, 0xFF	; 255
    8ed2:	e8 81       	ld	r30, Y
    8ed4:	f9 81       	ldd	r31, Y+1	; 0x01
    8ed6:	c6 5b       	subi	r28, 0xB6	; 182
    8ed8:	d0 40       	sbci	r29, 0x00	; 0
    8eda:	84 91       	lpm	r24, Z
    8edc:	82 30       	cpi	r24, 0x02	; 2
    8ede:	09 f0       	breq	.+2      	; 0x8ee2 <draw_menu(bool)+0x149c>
    8ee0:	46 c0       	rjmp	.+140    	; 0x8f6e <draw_menu(bool)+0x1528>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1945
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8ee2:	f1 01       	movw	r30, r2
    8ee4:	85 91       	lpm	r24, Z+
    8ee6:	94 91       	lpm	r25, Z
    8ee8:	c6 53       	subi	r28, 0x36	; 54
    8eea:	df 4f       	sbci	r29, 0xFF	; 255
    8eec:	e8 81       	ld	r30, Y
    8eee:	f9 81       	ldd	r31, Y+1	; 0x01
    8ef0:	ca 5c       	subi	r28, 0xCA	; 202
    8ef2:	d0 40       	sbci	r29, 0x00	; 0
    8ef4:	24 91       	lpm	r18, Z
    8ef6:	c8 54       	subi	r28, 0x48	; 72
    8ef8:	df 4f       	sbci	r29, 0xFF	; 255
    8efa:	48 81       	ld	r20, Y
    8efc:	59 81       	ldd	r21, Y+1	; 0x01
    8efe:	c8 5b       	subi	r28, 0xB8	; 184
    8f00:	d0 40       	sbci	r29, 0x00	; 0
    8f02:	84 0f       	add	r24, r20
    8f04:	95 1f       	adc	r25, r21
    8f06:	bc 01       	movw	r22, r24
    8f08:	2b 9d       	mul	r18, r11
    8f0a:	60 0d       	add	r22, r0
    8f0c:	71 1d       	adc	r23, r1
    8f0e:	11 24       	eor	r1, r1
    8f10:	c2 54       	subi	r28, 0x42	; 66
    8f12:	df 4f       	sbci	r29, 0xFF	; 255
    8f14:	79 83       	std	Y+1, r23	; 0x01
    8f16:	68 83       	st	Y, r22
    8f18:	ce 5b       	subi	r28, 0xBE	; 190
    8f1a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1946
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
    8f1c:	f4 01       	movw	r30, r8
    8f1e:	85 91       	lpm	r24, Z+
    8f20:	94 91       	lpm	r25, Z
    8f22:	c8 53       	subi	r28, 0x38	; 56
    8f24:	df 4f       	sbci	r29, 0xFF	; 255
    8f26:	e8 81       	ld	r30, Y
    8f28:	f9 81       	ldd	r31, Y+1	; 0x01
    8f2a:	c8 5c       	subi	r28, 0xC8	; 200
    8f2c:	d0 40       	sbci	r29, 0x00	; 0
    8f2e:	24 91       	lpm	r18, Z
    8f30:	c6 54       	subi	r28, 0x46	; 70
    8f32:	df 4f       	sbci	r29, 0xFF	; 255
    8f34:	48 81       	ld	r20, Y
    8f36:	59 81       	ldd	r21, Y+1	; 0x01
    8f38:	ca 5b       	subi	r28, 0xBA	; 186
    8f3a:	d0 40       	sbci	r29, 0x00	; 0
    8f3c:	84 0f       	add	r24, r20
    8f3e:	95 1f       	adc	r25, r21
    8f40:	bc 01       	movw	r22, r24
    8f42:	24 9d       	mul	r18, r4
    8f44:	60 0d       	add	r22, r0
    8f46:	71 1d       	adc	r23, r1
    8f48:	11 24       	eor	r1, r1
    8f4a:	c0 54       	subi	r28, 0x40	; 64
    8f4c:	df 4f       	sbci	r29, 0xFF	; 255
    8f4e:	79 83       	std	Y+1, r23	; 0x01
    8f50:	68 83       	st	Y, r22
    8f52:	c0 5c       	subi	r28, 0xC0	; 192
    8f54:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1947
          loop_t++;
    8f56:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1948
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    8f58:	c3 53       	subi	r28, 0x33	; 51
    8f5a:	df 4f       	sbci	r29, 0xFF	; 255
    8f5c:	e8 81       	ld	r30, Y
    8f5e:	f9 81       	ldd	r31, Y+1	; 0x01
    8f60:	cd 5c       	subi	r28, 0xCD	; 205
    8f62:	d0 40       	sbci	r29, 0x00	; 0
    8f64:	84 91       	lpm	r24, Z
    8f66:	b8 16       	cp	r11, r24
    8f68:	10 f0       	brcs	.+4      	; 0x8f6e <draw_menu(bool)+0x1528>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1951
          {
            loop_t = 0;
            loop_r++;
    8f6a:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1950
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
    8f6c:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1954
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    8f6e:	c1 53       	subi	r28, 0x31	; 49
    8f70:	df 4f       	sbci	r29, 0xFF	; 255
    8f72:	e8 81       	ld	r30, Y
    8f74:	f9 81       	ldd	r31, Y+1	; 0x01
    8f76:	cf 5c       	subi	r28, 0xCF	; 207
    8f78:	d0 40       	sbci	r29, 0x00	; 0
    8f7a:	25 91       	lpm	r18, Z+
    8f7c:	34 91       	lpm	r19, Z
    8f7e:	ce 52       	subi	r28, 0x2E	; 46
    8f80:	df 4f       	sbci	r29, 0xFF	; 255
    8f82:	e8 81       	ld	r30, Y
    8f84:	f9 81       	ldd	r31, Y+1	; 0x01
    8f86:	c2 5d       	subi	r28, 0xD2	; 210
    8f88:	d0 40       	sbci	r29, 0x00	; 0
    8f8a:	45 91       	lpm	r20, Z+
    8f8c:	54 91       	lpm	r21, Z
    8f8e:	ca 53       	subi	r28, 0x3A	; 58
    8f90:	df 4f       	sbci	r29, 0xFF	; 255
    8f92:	e8 80       	ld	r14, Y
    8f94:	f9 80       	ldd	r15, Y+1	; 0x01
    8f96:	c6 5c       	subi	r28, 0xC6	; 198
    8f98:	d0 40       	sbci	r29, 0x00	; 0
    8f9a:	cc 53       	subi	r28, 0x3C	; 60
    8f9c:	df 4f       	sbci	r29, 0xFF	; 255
    8f9e:	08 81       	ld	r16, Y
    8fa0:	19 81       	ldd	r17, Y+1	; 0x01
    8fa2:	c4 5c       	subi	r28, 0xC4	; 196
    8fa4:	d0 40       	sbci	r29, 0x00	; 0
    8fa6:	c0 54       	subi	r28, 0x40	; 64
    8fa8:	df 4f       	sbci	r29, 0xFF	; 255
    8faa:	68 81       	ld	r22, Y
    8fac:	79 81       	ldd	r23, Y+1	; 0x01
    8fae:	c0 5c       	subi	r28, 0xC0	; 192
    8fb0:	d0 40       	sbci	r29, 0x00	; 0
    8fb2:	c2 54       	subi	r28, 0x42	; 66
    8fb4:	df 4f       	sbci	r29, 0xFF	; 255
    8fb6:	88 81       	ld	r24, Y
    8fb8:	99 81       	ldd	r25, Y+1	; 0x01
    8fba:	ce 5b       	subi	r28, 0xBE	; 190
    8fbc:	d0 40       	sbci	r29, 0x00	; 0
    8fbe:	0e 94 b8 24 	call	0x4970	; 0x4970 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    8fc2:	18 2f       	mov	r17, r24
    8fc4:	81 e0       	ldi	r24, 0x01	; 1
    8fc6:	8a 0d       	add	r24, r10
    8fc8:	11 23       	and	r17, r17
    8fca:	21 f1       	breq	.+72     	; 0x9014 <draw_menu(bool)+0x15ce>
    8fcc:	ce 54       	subi	r28, 0x4E	; 78
    8fce:	df 4f       	sbci	r29, 0xFF	; 255
    8fd0:	a8 82       	st	Y, r10
    8fd2:	c2 5b       	subi	r28, 0xB2	; 178
    8fd4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1956
        {
          fntargs =  pgm_read_word(&dyn_symbol_1->dyn_symbol_onclick);
    8fd6:	f6 01       	movw	r30, r12
    8fd8:	ec 50       	subi	r30, 0x0C	; 12
    8fda:	fe 4f       	sbci	r31, 0xFE	; 254
    8fdc:	e6 0d       	add	r30, r6
    8fde:	f7 1d       	adc	r31, r7
    8fe0:	25 91       	lpm	r18, Z+
    8fe2:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1957
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    8fe4:	ce 53       	subi	r28, 0x3E	; 62
    8fe6:	df 4f       	sbci	r29, 0xFF	; 255
    8fe8:	e8 81       	ld	r30, Y
    8fea:	f9 81       	ldd	r31, Y+1	; 0x01
    8fec:	c2 5c       	subi	r28, 0xC2	; 194
    8fee:	d0 40       	sbci	r29, 0x00	; 0
    8ff0:	84 91       	lpm	r24, Z
    8ff2:	cd 54       	subi	r28, 0x4D	; 77
    8ff4:	df 4f       	sbci	r29, 0xFF	; 255
    8ff6:	68 81       	ld	r22, Y
    8ff8:	c3 5b       	subi	r28, 0xB3	; 179
    8ffa:	d0 40       	sbci	r29, 0x00	; 0
    8ffc:	70 e0       	ldi	r23, 0x00	; 0
    8ffe:	4a 2d       	mov	r20, r10
    9000:	90 e0       	ldi	r25, 0x00	; 0
    9002:	f9 01       	movw	r30, r18
    9004:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1958
          ret = true;
    9006:	c4 53       	subi	r28, 0x34	; 52
    9008:	df 4f       	sbci	r29, 0xFF	; 255
    900a:	18 83       	st	Y, r17
    900c:	cc 5c       	subi	r28, 0xCC	; 204
    900e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1879
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    9010:	53 94       	inc	r5
    9012:	e5 cc       	rjmp	.-1590   	; 0x89de <draw_menu(bool)+0xf98>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1954
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    9014:	a8 2e       	mov	r10, r24
    9016:	1d cf       	rjmp	.-454    	; 0x8e52 <draw_menu(bool)+0x140c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1935
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    9018:	f4 01       	movw	r30, r8
    901a:	85 91       	lpm	r24, Z+
    901c:	94 91       	lpm	r25, Z
    901e:	c8 53       	subi	r28, 0x38	; 56
    9020:	df 4f       	sbci	r29, 0xFF	; 255
    9022:	e8 81       	ld	r30, Y
    9024:	f9 81       	ldd	r31, Y+1	; 0x01
    9026:	c8 5c       	subi	r28, 0xC8	; 200
    9028:	d0 40       	sbci	r29, 0x00	; 0
    902a:	44 91       	lpm	r20, Z
    902c:	c6 54       	subi	r28, 0x46	; 70
    902e:	df 4f       	sbci	r29, 0xFF	; 255
    9030:	68 81       	ld	r22, Y
    9032:	79 81       	ldd	r23, Y+1	; 0x01
    9034:	ca 5b       	subi	r28, 0xBA	; 186
    9036:	d0 40       	sbci	r29, 0x00	; 0
    9038:	86 0f       	add	r24, r22
    903a:	97 1f       	adc	r25, r23
    903c:	fc 01       	movw	r30, r24
    903e:	4b 9d       	mul	r20, r11
    9040:	e0 0d       	add	r30, r0
    9042:	f1 1d       	adc	r31, r1
    9044:	11 24       	eor	r1, r1
    9046:	c0 54       	subi	r28, 0x40	; 64
    9048:	df 4f       	sbci	r29, 0xFF	; 255
    904a:	f9 83       	std	Y+1, r31	; 0x01
    904c:	e8 83       	st	Y, r30
    904e:	c0 5c       	subi	r28, 0xC0	; 192
    9050:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1936
          loop_t++;
    9052:	b3 94       	inc	r11
    9054:	24 cf       	rjmp	.-440    	; 0x8e9e <draw_menu(bool)+0x1458>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    9056:	f1 01       	movw	r30, r2
    9058:	85 91       	lpm	r24, Z+
    905a:	94 91       	lpm	r25, Z
    905c:	c6 53       	subi	r28, 0x36	; 54
    905e:	df 4f       	sbci	r29, 0xFF	; 255
    9060:	e8 81       	ld	r30, Y
    9062:	f9 81       	ldd	r31, Y+1	; 0x01
    9064:	ca 5c       	subi	r28, 0xCA	; 202
    9066:	d0 40       	sbci	r29, 0x00	; 0
    9068:	24 91       	lpm	r18, Z
    906a:	c8 54       	subi	r28, 0x48	; 72
    906c:	df 4f       	sbci	r29, 0xFF	; 255
    906e:	48 81       	ld	r20, Y
    9070:	59 81       	ldd	r21, Y+1	; 0x01
    9072:	c8 5b       	subi	r28, 0xB8	; 184
    9074:	d0 40       	sbci	r29, 0x00	; 0
    9076:	84 0f       	add	r24, r20
    9078:	95 1f       	adc	r25, r21
    907a:	bc 01       	movw	r22, r24
    907c:	2b 9d       	mul	r18, r11
    907e:	60 0d       	add	r22, r0
    9080:	71 1d       	adc	r23, r1
    9082:	11 24       	eor	r1, r1
    9084:	c2 54       	subi	r28, 0x42	; 66
    9086:	df 4f       	sbci	r29, 0xFF	; 255
    9088:	79 83       	std	Y+1, r23	; 0x01
    908a:	68 83       	st	Y, r22
    908c:	ce 5b       	subi	r28, 0xBE	; 190
    908e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1941
          loop_t++;
    9090:	b3 94       	inc	r11
    9092:	1d cf       	rjmp	.-454    	; 0x8ece <draw_menu(bool)+0x1488>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1965
        }
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    9094:	c4 53       	subi	r28, 0x34	; 52
    9096:	df 4f       	sbci	r29, 0xFF	; 255
    9098:	f8 81       	ld	r31, Y
    909a:	cc 5c       	subi	r28, 0xCC	; 204
    909c:	d0 40       	sbci	r29, 0x00	; 0
    909e:	f1 11       	cpse	r31, r1
    90a0:	0c 94 c3 4f 	jmp	0x9f86	; 0x9f86 <draw_menu(bool)+0x2540>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1967
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    90a4:	91 2c       	mov	r9, r1
    90a6:	93 01       	movw	r18, r6
    90a8:	27 5b       	subi	r18, 0xB7	; 183
    90aa:	3d 4f       	sbci	r19, 0xFD	; 253
    90ac:	ce 52       	subi	r28, 0x2E	; 46
    90ae:	df 4f       	sbci	r29, 0xFF	; 255
    90b0:	39 83       	std	Y+1, r19	; 0x01
    90b2:	28 83       	st	Y, r18
    90b4:	c2 5d       	subi	r28, 0xD2	; 210
    90b6:	d0 40       	sbci	r29, 0x00	; 0
    90b8:	ce 52       	subi	r28, 0x2E	; 46
    90ba:	df 4f       	sbci	r29, 0xFF	; 255
    90bc:	e8 81       	ld	r30, Y
    90be:	f9 81       	ldd	r31, Y+1	; 0x01
    90c0:	c2 5d       	subi	r28, 0xD2	; 210
    90c2:	d0 40       	sbci	r29, 0x00	; 0
    90c4:	84 91       	lpm	r24, Z
    90c6:	98 16       	cp	r9, r24
    90c8:	08 f0       	brcs	.+2      	; 0x90cc <draw_menu(bool)+0x1686>
    90ca:	05 c3       	rjmp	.+1546   	; 0x96d6 <draw_menu(bool)+0x1c90>
    90cc:	f7 e1       	ldi	r31, 0x17	; 23
    90ce:	9f 9e       	mul	r9, r31
    90d0:	20 01       	movw	r4, r0
    90d2:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1970
  {
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
    90d4:	f2 01       	movw	r30, r4
    90d6:	e6 55       	subi	r30, 0x56	; 86
    90d8:	fe 4f       	sbci	r31, 0xFE	; 254
    90da:	e6 0d       	add	r30, r6
    90dc:	f7 1d       	adc	r31, r7
    90de:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
    if (enable_redraw(rdr, redraw_class) == true)
    90e0:	cf 52       	subi	r28, 0x2F	; 47
    90e2:	df 4f       	sbci	r29, 0xFF	; 255
    90e4:	68 81       	ld	r22, Y
    90e6:	c1 5d       	subi	r28, 0xD1	; 209
    90e8:	d0 40       	sbci	r29, 0x00	; 0
    90ea:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <enable_redraw(unsigned char, unsigned char)>
    90ee:	88 23       	and	r24, r24
    90f0:	09 f4       	brne	.+2      	; 0x90f4 <draw_menu(bool)+0x16ae>
    90f2:	74 c1       	rjmp	.+744    	; 0x93dc <draw_menu(bool)+0x1996>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1973
    {
      loop_i = 0;
    90f4:	ce 54       	subi	r28, 0x4E	; 78
    90f6:	df 4f       	sbci	r29, 0xFF	; 255
    90f8:	18 82       	st	Y, r1
    90fa:	c2 5b       	subi	r28, 0xB2	; 178
    90fc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1975
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    90fe:	f2 01       	movw	r30, r4
    9100:	e8 55       	subi	r30, 0x58	; 88
    9102:	fe 4f       	sbci	r31, 0xFE	; 254
    9104:	e6 0d       	add	r30, r6
    9106:	f7 1d       	adc	r31, r7
    9108:	25 91       	lpm	r18, Z+
    910a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    910c:	f2 01       	movw	r30, r4
    910e:	ed 55       	subi	r30, 0x5D	; 93
    9110:	fe 4f       	sbci	r31, 0xFE	; 254
    9112:	e6 0d       	add	r30, r6
    9114:	f7 1d       	adc	r31, r7
    9116:	84 91       	lpm	r24, Z
    9118:	cd 54       	subi	r28, 0x4D	; 77
    911a:	df 4f       	sbci	r29, 0xFF	; 255
    911c:	68 81       	ld	r22, Y
    911e:	c3 5b       	subi	r28, 0xB3	; 179
    9120:	d0 40       	sbci	r29, 0x00	; 0
    9122:	70 e0       	ldi	r23, 0x00	; 0
    9124:	40 e0       	ldi	r20, 0x00	; 0
    9126:	90 e0       	ldi	r25, 0x00	; 0
    9128:	f9 01       	movw	r30, r18
    912a:	19 95       	eicall
    912c:	cf 54       	subi	r28, 0x4F	; 79
    912e:	df 4f       	sbci	r29, 0xFF	; 255
    9130:	88 83       	st	Y, r24
    9132:	c1 5b       	subi	r28, 0xB1	; 177
    9134:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1977
      gss = pgm_read_word(&dyn_button_1->get_status_string);
    9136:	f2 01       	movw	r30, r4
    9138:	ec 55       	subi	r30, 0x5C	; 92
    913a:	fe 4f       	sbci	r31, 0xFE	; 254
    913c:	e6 0d       	add	r30, r6
    913e:	f7 1d       	adc	r31, r7
    9140:	25 91       	lpm	r18, Z+
    9142:	34 91       	lpm	r19, Z
    9144:	cc 52       	subi	r28, 0x2C	; 44
    9146:	df 4f       	sbci	r29, 0xFF	; 255
    9148:	39 83       	std	Y+1, r19	; 0x01
    914a:	28 83       	st	Y, r18
    914c:	c4 5d       	subi	r28, 0xD4	; 212
    914e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1979

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
    9150:	f2 01       	movw	r30, r4
    9152:	ee 55       	subi	r30, 0x5E	; 94
    9154:	fe 4f       	sbci	r31, 0xFE	; 254
    9156:	e6 0d       	add	r30, r6
    9158:	f7 1d       	adc	r31, r7
    915a:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1980
      if (slider_active != MENU_SLIDER_OFF)
    915c:	4f 3f       	cpi	r20, 0xFF	; 255
    915e:	b9 f0       	breq	.+46     	; 0x918e <draw_menu(bool)+0x1748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1981
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
    9160:	f2 01       	movw	r30, r4
    9162:	e0 56       	subi	r30, 0x60	; 96
    9164:	fe 4f       	sbci	r31, 0xFE	; 254
    9166:	e6 0d       	add	r30, r6
    9168:	f7 1d       	adc	r31, r7
    916a:	24 91       	lpm	r18, Z
    916c:	f2 01       	movw	r30, r4
    916e:	ef 55       	subi	r30, 0x5F	; 95
    9170:	fe 4f       	sbci	r31, 0xFE	; 254
    9172:	e6 0d       	add	r30, r6
    9174:	f7 1d       	adc	r31, r7
    9176:	e4 91       	lpm	r30, Z
    9178:	2e 9f       	mul	r18, r30
    917a:	20 2d       	mov	r18, r0
    917c:	11 24       	eor	r1, r1
    917e:	be 01       	movw	r22, r28
    9180:	6f 54       	subi	r22, 0x4F	; 79
    9182:	7f 4f       	sbci	r23, 0xFF	; 255
    9184:	ce 01       	movw	r24, r28
    9186:	8e 54       	subi	r24, 0x4E	; 78
    9188:	9f 4f       	sbci	r25, 0xFF	; 255
    918a:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1984
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    918e:	c2 01       	movw	r24, r4
    9190:	8c 56       	subi	r24, 0x6C	; 108
    9192:	9e 4f       	sbci	r25, 0xFE	; 254
    9194:	a3 01       	movw	r20, r6
    9196:	48 0f       	add	r20, r24
    9198:	59 1f       	adc	r21, r25
    919a:	ca 54       	subi	r28, 0x4A	; 74
    919c:	df 4f       	sbci	r29, 0xFF	; 255
    919e:	59 83       	std	Y+1, r21	; 0x01
    91a0:	48 83       	st	Y, r20
    91a2:	c6 5b       	subi	r28, 0xB6	; 182
    91a4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1985
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    91a6:	12 01       	movw	r2, r4
    91a8:	5a e6       	ldi	r21, 0x6A	; 106
    91aa:	25 1a       	sub	r2, r21
    91ac:	5e ef       	ldi	r21, 0xFE	; 254
    91ae:	35 0a       	sbc	r3, r21
    91b0:	26 0c       	add	r2, r6
    91b2:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1986
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    91b4:	0b 96       	adiw	r24, 0x0b	; 11
    91b6:	b3 01       	movw	r22, r6
    91b8:	68 0f       	add	r22, r24
    91ba:	79 1f       	adc	r23, r25
    91bc:	c4 54       	subi	r28, 0x44	; 68
    91be:	df 4f       	sbci	r29, 0xFF	; 255
    91c0:	79 83       	std	Y+1, r23	; 0x01
    91c2:	68 83       	st	Y, r22
    91c4:	cc 5b       	subi	r28, 0xBC	; 188
    91c6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1987
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    91c8:	01 97       	sbiw	r24, 0x01	; 1
    91ca:	f3 01       	movw	r30, r6
    91cc:	e8 0f       	add	r30, r24
    91ce:	f9 1f       	adc	r31, r25
    91d0:	c8 53       	subi	r28, 0x38	; 56
    91d2:	df 4f       	sbci	r29, 0xFF	; 255
    91d4:	f9 83       	std	Y+1, r31	; 0x01
    91d6:	e8 83       	st	Y, r30
    91d8:	c8 5c       	subi	r28, 0xC8	; 200
    91da:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1989
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    91dc:	01 97       	sbiw	r24, 0x01	; 1
    91de:	93 01       	movw	r18, r6
    91e0:	28 0f       	add	r18, r24
    91e2:	39 1f       	adc	r19, r25
    91e4:	c6 53       	subi	r28, 0x36	; 54
    91e6:	df 4f       	sbci	r29, 0xFF	; 255
    91e8:	39 83       	std	Y+1, r19	; 0x01
    91ea:	28 83       	st	Y, r18
    91ec:	ca 5c       	subi	r28, 0xCA	; 202
    91ee:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1991
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    91f0:	01 97       	sbiw	r24, 0x01	; 1
    91f2:	a3 01       	movw	r20, r6
    91f4:	48 0f       	add	r20, r24
    91f6:	59 1f       	adc	r21, r25
    91f8:	ce 53       	subi	r28, 0x3E	; 62
    91fa:	df 4f       	sbci	r29, 0xFF	; 255
    91fc:	59 83       	std	Y+1, r21	; 0x01
    91fe:	48 83       	st	Y, r20
    9200:	c2 5c       	subi	r28, 0xC2	; 194
    9202:	d0 40       	sbci	r29, 0x00	; 0
    9204:	02 97       	sbiw	r24, 0x02	; 2
    9206:	b3 01       	movw	r22, r6
    9208:	68 0f       	add	r22, r24
    920a:	79 1f       	adc	r23, r25
    920c:	c3 53       	subi	r28, 0x33	; 51
    920e:	df 4f       	sbci	r29, 0xFF	; 255
    9210:	79 83       	std	Y+1, r23	; 0x01
    9212:	68 83       	st	Y, r22
    9214:	cd 5c       	subi	r28, 0xCD	; 205
    9216:	d0 40       	sbci	r29, 0x00	; 0
    9218:	02 97       	sbiw	r24, 0x02	; 2
    921a:	f3 01       	movw	r30, r6
    921c:	e8 0f       	add	r30, r24
    921e:	f9 1f       	adc	r31, r25
    9220:	c1 53       	subi	r28, 0x31	; 49
    9222:	df 4f       	sbci	r29, 0xFF	; 255
    9224:	f9 83       	std	Y+1, r31	; 0x01
    9226:	e8 83       	st	Y, r30
    9228:	cf 5c       	subi	r28, 0xCF	; 207
    922a:	d0 40       	sbci	r29, 0x00	; 0
    922c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1982
      gss = pgm_read_word(&dyn_button_1->get_status_string);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
    922e:	ce 54       	subi	r28, 0x4E	; 78
    9230:	df 4f       	sbci	r29, 0xFF	; 255
    9232:	88 81       	ld	r24, Y
    9234:	c2 5b       	subi	r28, 0xB2	; 178
    9236:	d0 40       	sbci	r29, 0x00	; 0
    9238:	cf 54       	subi	r28, 0x4F	; 79
    923a:	df 4f       	sbci	r29, 0xFF	; 255
    923c:	98 81       	ld	r25, Y
    923e:	c1 5b       	subi	r28, 0xB1	; 177
    9240:	d0 40       	sbci	r29, 0x00	; 0
    9242:	89 17       	cp	r24, r25
    9244:	08 f0       	brcs	.+2      	; 0x9248 <draw_menu(bool)+0x1802>
    9246:	ca c0       	rjmp	.+404    	; 0x93dc <draw_menu(bool)+0x1996>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1984
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    9248:	ca 54       	subi	r28, 0x4A	; 74
    924a:	df 4f       	sbci	r29, 0xFF	; 255
    924c:	e8 81       	ld	r30, Y
    924e:	f9 81       	ldd	r31, Y+1	; 0x01
    9250:	c6 5b       	subi	r28, 0xB6	; 182
    9252:	d0 40       	sbci	r29, 0x00	; 0
    9254:	45 91       	lpm	r20, Z+
    9256:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1985
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    9258:	f1 01       	movw	r30, r2
    925a:	25 91       	lpm	r18, Z+
    925c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1986
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    925e:	c4 54       	subi	r28, 0x44	; 68
    9260:	df 4f       	sbci	r29, 0xFF	; 255
    9262:	e8 81       	ld	r30, Y
    9264:	f9 81       	ldd	r31, Y+1	; 0x01
    9266:	cc 5b       	subi	r28, 0xBC	; 188
    9268:	d0 40       	sbci	r29, 0x00	; 0
    926a:	94 91       	lpm	r25, Z
    926c:	99 23       	and	r25, r25
    926e:	09 f4       	brne	.+2      	; 0x9272 <draw_menu(bool)+0x182c>
    9270:	74 c0       	rjmp	.+232    	; 0x935a <draw_menu(bool)+0x1914>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1985
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    9272:	c6 54       	subi	r28, 0x46	; 70
    9274:	df 4f       	sbci	r29, 0xFF	; 255
    9276:	68 81       	ld	r22, Y
    9278:	79 81       	ldd	r23, Y+1	; 0x01
    927a:	ca 5b       	subi	r28, 0xBA	; 186
    927c:	d0 40       	sbci	r29, 0x00	; 0
    927e:	62 0f       	add	r22, r18
    9280:	73 1f       	adc	r23, r19
    9282:	c0 54       	subi	r28, 0x40	; 64
    9284:	df 4f       	sbci	r29, 0xFF	; 255
    9286:	79 83       	std	Y+1, r23	; 0x01
    9288:	68 83       	st	Y, r22
    928a:	c0 5c       	subi	r28, 0xC0	; 192
    928c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1988
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    928e:	c4 54       	subi	r28, 0x44	; 68
    9290:	df 4f       	sbci	r29, 0xFF	; 255
    9292:	e8 81       	ld	r30, Y
    9294:	f9 81       	ldd	r31, Y+1	; 0x01
    9296:	cc 5b       	subi	r28, 0xBC	; 188
    9298:	d0 40       	sbci	r29, 0x00	; 0
    929a:	94 91       	lpm	r25, Z
    929c:	91 30       	cpi	r25, 0x01	; 1
    929e:	09 f4       	brne	.+2      	; 0x92a2 <draw_menu(bool)+0x185c>
    92a0:	7a c0       	rjmp	.+244    	; 0x9396 <draw_menu(bool)+0x1950>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1984
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    92a2:	c8 54       	subi	r28, 0x48	; 72
    92a4:	df 4f       	sbci	r29, 0xFF	; 255
    92a6:	28 81       	ld	r18, Y
    92a8:	39 81       	ldd	r19, Y+1	; 0x01
    92aa:	c8 5b       	subi	r28, 0xB8	; 184
    92ac:	d0 40       	sbci	r29, 0x00	; 0
    92ae:	24 0f       	add	r18, r20
    92b0:	35 1f       	adc	r19, r21
    92b2:	c2 54       	subi	r28, 0x42	; 66
    92b4:	df 4f       	sbci	r29, 0xFF	; 255
    92b6:	39 83       	std	Y+1, r19	; 0x01
    92b8:	28 83       	st	Y, r18
    92ba:	ce 5b       	subi	r28, 0xBE	; 190
    92bc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1990
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    92be:	9e 01       	movw	r18, r28
    92c0:	2f 57       	subi	r18, 0x7F	; 127
    92c2:	3f 4f       	sbci	r19, 0xFF	; 255
    92c4:	ae 01       	movw	r20, r28
    92c6:	4f 5f       	subi	r20, 0xFF	; 255
    92c8:	5f 4f       	sbci	r21, 0xFF	; 255
    92ca:	cd 54       	subi	r28, 0x4D	; 77
    92cc:	df 4f       	sbci	r29, 0xFF	; 255
    92ce:	68 81       	ld	r22, Y
    92d0:	c3 5b       	subi	r28, 0xB3	; 179
    92d2:	d0 40       	sbci	r29, 0x00	; 0
    92d4:	cc 52       	subi	r28, 0x2C	; 44
    92d6:	df 4f       	sbci	r29, 0xFF	; 255
    92d8:	e8 81       	ld	r30, Y
    92da:	f9 81       	ldd	r31, Y+1	; 0x01
    92dc:	c4 5d       	subi	r28, 0xD4	; 212
    92de:	d0 40       	sbci	r29, 0x00	; 0
    92e0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1991
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    92e2:	ce 53       	subi	r28, 0x3E	; 62
    92e4:	df 4f       	sbci	r29, 0xFF	; 255
    92e6:	e8 81       	ld	r30, Y
    92e8:	f9 81       	ldd	r31, Y+1	; 0x01
    92ea:	c2 5c       	subi	r28, 0xC2	; 194
    92ec:	d0 40       	sbci	r29, 0x00	; 0
    92ee:	e4 90       	lpm	r14, Z
    92f0:	04 91       	lpm	r16, Z
    92f2:	c3 53       	subi	r28, 0x33	; 51
    92f4:	df 4f       	sbci	r29, 0xFF	; 255
    92f6:	e8 81       	ld	r30, Y
    92f8:	f9 81       	ldd	r31, Y+1	; 0x01
    92fa:	cd 5c       	subi	r28, 0xCD	; 205
    92fc:	d0 40       	sbci	r29, 0x00	; 0
    92fe:	25 91       	lpm	r18, Z+
    9300:	34 91       	lpm	r19, Z
    9302:	c1 53       	subi	r28, 0x31	; 49
    9304:	df 4f       	sbci	r29, 0xFF	; 255
    9306:	e8 81       	ld	r30, Y
    9308:	f9 81       	ldd	r31, Y+1	; 0x01
    930a:	cf 5c       	subi	r28, 0xCF	; 207
    930c:	d0 40       	sbci	r29, 0x00	; 0
    930e:	45 91       	lpm	r20, Z+
    9310:	54 91       	lpm	r21, Z
    9312:	88 24       	eor	r8, r8
    9314:	83 94       	inc	r8
    9316:	be 01       	movw	r22, r28
    9318:	6f 57       	subi	r22, 0x7F	; 127
    931a:	7f 4f       	sbci	r23, 0xFF	; 255
    931c:	5b 01       	movw	r10, r22
    931e:	ce 01       	movw	r24, r28
    9320:	01 96       	adiw	r24, 0x01	; 1
    9322:	6c 01       	movw	r12, r24
    9324:	c0 54       	subi	r28, 0x40	; 64
    9326:	df 4f       	sbci	r29, 0xFF	; 255
    9328:	68 81       	ld	r22, Y
    932a:	79 81       	ldd	r23, Y+1	; 0x01
    932c:	c0 5c       	subi	r28, 0xC0	; 192
    932e:	d0 40       	sbci	r29, 0x00	; 0
    9330:	c2 54       	subi	r28, 0x42	; 66
    9332:	df 4f       	sbci	r29, 0xFF	; 255
    9334:	88 81       	ld	r24, Y
    9336:	99 81       	ldd	r25, Y+1	; 0x01
    9338:	ce 5b       	subi	r28, 0xBE	; 190
    933a:	d0 40       	sbci	r29, 0x00	; 0
    933c:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1992
        loop_t++;
    9340:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1993
        loop_i++;
    9342:	ce 54       	subi	r28, 0x4E	; 78
    9344:	df 4f       	sbci	r29, 0xFF	; 255
    9346:	88 81       	ld	r24, Y
    9348:	c2 5b       	subi	r28, 0xB2	; 178
    934a:	d0 40       	sbci	r29, 0x00	; 0
    934c:	8f 5f       	subi	r24, 0xFF	; 255
    934e:	ce 54       	subi	r28, 0x4E	; 78
    9350:	df 4f       	sbci	r29, 0xFF	; 255
    9352:	88 83       	st	Y, r24
    9354:	c2 5b       	subi	r28, 0xB2	; 178
    9356:	d0 40       	sbci	r29, 0x00	; 0
    9358:	6a cf       	rjmp	.-300    	; 0x922e <draw_menu(bool)+0x17e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1987
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    935a:	f1 01       	movw	r30, r2
    935c:	25 91       	lpm	r18, Z+
    935e:	34 91       	lpm	r19, Z
    9360:	c8 53       	subi	r28, 0x38	; 56
    9362:	df 4f       	sbci	r29, 0xFF	; 255
    9364:	e8 81       	ld	r30, Y
    9366:	f9 81       	ldd	r31, Y+1	; 0x01
    9368:	c8 5c       	subi	r28, 0xC8	; 200
    936a:	d0 40       	sbci	r29, 0x00	; 0
    936c:	94 91       	lpm	r25, Z
    936e:	c6 54       	subi	r28, 0x46	; 70
    9370:	df 4f       	sbci	r29, 0xFF	; 255
    9372:	68 81       	ld	r22, Y
    9374:	79 81       	ldd	r23, Y+1	; 0x01
    9376:	ca 5b       	subi	r28, 0xBA	; 186
    9378:	d0 40       	sbci	r29, 0x00	; 0
    937a:	26 0f       	add	r18, r22
    937c:	37 1f       	adc	r19, r23
    937e:	f9 01       	movw	r30, r18
    9380:	91 9f       	mul	r25, r17
    9382:	e0 0d       	add	r30, r0
    9384:	f1 1d       	adc	r31, r1
    9386:	11 24       	eor	r1, r1
    9388:	c0 54       	subi	r28, 0x40	; 64
    938a:	df 4f       	sbci	r29, 0xFF	; 255
    938c:	f9 83       	std	Y+1, r31	; 0x01
    938e:	e8 83       	st	Y, r30
    9390:	c0 5c       	subi	r28, 0xC0	; 192
    9392:	d0 40       	sbci	r29, 0x00	; 0
    9394:	7c cf       	rjmp	.-264    	; 0x928e <draw_menu(bool)+0x1848>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1989
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    9396:	ca 54       	subi	r28, 0x4A	; 74
    9398:	df 4f       	sbci	r29, 0xFF	; 255
    939a:	e8 81       	ld	r30, Y
    939c:	f9 81       	ldd	r31, Y+1	; 0x01
    939e:	c6 5b       	subi	r28, 0xB6	; 182
    93a0:	d0 40       	sbci	r29, 0x00	; 0
    93a2:	25 91       	lpm	r18, Z+
    93a4:	34 91       	lpm	r19, Z
    93a6:	c6 53       	subi	r28, 0x36	; 54
    93a8:	df 4f       	sbci	r29, 0xFF	; 255
    93aa:	e8 81       	ld	r30, Y
    93ac:	f9 81       	ldd	r31, Y+1	; 0x01
    93ae:	ca 5c       	subi	r28, 0xCA	; 202
    93b0:	d0 40       	sbci	r29, 0x00	; 0
    93b2:	94 91       	lpm	r25, Z
    93b4:	c8 54       	subi	r28, 0x48	; 72
    93b6:	df 4f       	sbci	r29, 0xFF	; 255
    93b8:	48 81       	ld	r20, Y
    93ba:	59 81       	ldd	r21, Y+1	; 0x01
    93bc:	c8 5b       	subi	r28, 0xB8	; 184
    93be:	d0 40       	sbci	r29, 0x00	; 0
    93c0:	24 0f       	add	r18, r20
    93c2:	35 1f       	adc	r19, r21
    93c4:	b9 01       	movw	r22, r18
    93c6:	91 9f       	mul	r25, r17
    93c8:	60 0d       	add	r22, r0
    93ca:	71 1d       	adc	r23, r1
    93cc:	11 24       	eor	r1, r1
    93ce:	c2 54       	subi	r28, 0x42	; 66
    93d0:	df 4f       	sbci	r29, 0xFF	; 255
    93d2:	79 83       	std	Y+1, r23	; 0x01
    93d4:	68 83       	st	Y, r22
    93d6:	ce 5b       	subi	r28, 0xBE	; 190
    93d8:	d0 40       	sbci	r29, 0x00	; 0
    93da:	71 cf       	rjmp	.-286    	; 0x92be <draw_menu(bool)+0x1878>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1996
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
        loop_t++;
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    93dc:	cc 53       	subi	r28, 0x3C	; 60
    93de:	df 4f       	sbci	r29, 0xFF	; 255
    93e0:	e8 81       	ld	r30, Y
    93e2:	f9 81       	ldd	r31, Y+1	; 0x01
    93e4:	c4 5c       	subi	r28, 0xC4	; 196
    93e6:	d0 40       	sbci	r29, 0x00	; 0
    93e8:	ef 2b       	or	r30, r31
    93ea:	09 f4       	brne	.+2      	; 0x93ee <draw_menu(bool)+0x19a8>
    93ec:	51 c1       	rjmp	.+674    	; 0x9690 <draw_menu(bool)+0x1c4a>
    93ee:	ca 53       	subi	r28, 0x3A	; 58
    93f0:	df 4f       	sbci	r29, 0xFF	; 255
    93f2:	28 81       	ld	r18, Y
    93f4:	39 81       	ldd	r19, Y+1	; 0x01
    93f6:	c6 5c       	subi	r28, 0xC6	; 198
    93f8:	d0 40       	sbci	r29, 0x00	; 0
    93fa:	23 2b       	or	r18, r19
    93fc:	09 f4       	brne	.+2      	; 0x9400 <draw_menu(bool)+0x19ba>
    93fe:	48 c1       	rjmp	.+656    	; 0x9690 <draw_menu(bool)+0x1c4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1998
    {
      loop_i = 0;
    9400:	ce 54       	subi	r28, 0x4E	; 78
    9402:	df 4f       	sbci	r29, 0xFF	; 255
    9404:	18 82       	st	Y, r1
    9406:	c2 5b       	subi	r28, 0xB2	; 178
    9408:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2000
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    940a:	f2 01       	movw	r30, r4
    940c:	e8 55       	subi	r30, 0x58	; 88
    940e:	fe 4f       	sbci	r31, 0xFE	; 254
    9410:	e6 0d       	add	r30, r6
    9412:	f7 1d       	adc	r31, r7
    9414:	25 91       	lpm	r18, Z+
    9416:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2001
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    9418:	c2 01       	movw	r24, r4
    941a:	8d 55       	subi	r24, 0x5D	; 93
    941c:	9e 4f       	sbci	r25, 0xFE	; 254
    941e:	a3 01       	movw	r20, r6
    9420:	48 0f       	add	r20, r24
    9422:	59 1f       	adc	r21, r25
    9424:	ca 54       	subi	r28, 0x4A	; 74
    9426:	df 4f       	sbci	r29, 0xFF	; 255
    9428:	59 83       	std	Y+1, r21	; 0x01
    942a:	48 83       	st	Y, r20
    942c:	c6 5b       	subi	r28, 0xB6	; 182
    942e:	d0 40       	sbci	r29, 0x00	; 0
    9430:	fa 01       	movw	r30, r20
    9432:	84 91       	lpm	r24, Z
    9434:	cd 54       	subi	r28, 0x4D	; 77
    9436:	df 4f       	sbci	r29, 0xFF	; 255
    9438:	68 81       	ld	r22, Y
    943a:	c3 5b       	subi	r28, 0xB3	; 179
    943c:	d0 40       	sbci	r29, 0x00	; 0
    943e:	70 e0       	ldi	r23, 0x00	; 0
    9440:	40 e0       	ldi	r20, 0x00	; 0
    9442:	90 e0       	ldi	r25, 0x00	; 0
    9444:	f9 01       	movw	r30, r18
    9446:	19 95       	eicall
    9448:	cf 54       	subi	r28, 0x4F	; 79
    944a:	df 4f       	sbci	r29, 0xFF	; 255
    944c:	88 83       	st	Y, r24
    944e:	c1 5b       	subi	r28, 0xB1	; 177
    9450:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2003

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
    9452:	f2 01       	movw	r30, r4
    9454:	ee 55       	subi	r30, 0x5E	; 94
    9456:	fe 4f       	sbci	r31, 0xFE	; 254
    9458:	e6 0d       	add	r30, r6
    945a:	f7 1d       	adc	r31, r7
    945c:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2004
      if (slider_active != MENU_SLIDER_OFF)
    945e:	4f 3f       	cpi	r20, 0xFF	; 255
    9460:	b9 f0       	breq	.+46     	; 0x9490 <draw_menu(bool)+0x1a4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2005
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
    9462:	f2 01       	movw	r30, r4
    9464:	e0 56       	subi	r30, 0x60	; 96
    9466:	fe 4f       	sbci	r31, 0xFE	; 254
    9468:	e6 0d       	add	r30, r6
    946a:	f7 1d       	adc	r31, r7
    946c:	24 91       	lpm	r18, Z
    946e:	f2 01       	movw	r30, r4
    9470:	ef 55       	subi	r30, 0x5F	; 95
    9472:	fe 4f       	sbci	r31, 0xFE	; 254
    9474:	e6 0d       	add	r30, r6
    9476:	f7 1d       	adc	r31, r7
    9478:	e4 91       	lpm	r30, Z
    947a:	2e 9f       	mul	r18, r30
    947c:	20 2d       	mov	r18, r0
    947e:	11 24       	eor	r1, r1
    9480:	be 01       	movw	r22, r28
    9482:	6f 54       	subi	r22, 0x4F	; 79
    9484:	7f 4f       	sbci	r23, 0xFF	; 255
    9486:	ce 01       	movw	r24, r28
    9488:	8e 54       	subi	r24, 0x4E	; 78
    948a:	9f 4f       	sbci	r25, 0xFF	; 255
    948c:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    9490:	ce 54       	subi	r28, 0x4E	; 78
    9492:	df 4f       	sbci	r29, 0xFF	; 255
    9494:	a8 80       	ld	r10, Y
    9496:	c2 5b       	subi	r28, 0xB2	; 178
    9498:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2006
      while (loop_i < loop_cnt)
    949a:	cf 54       	subi	r28, 0x4F	; 79
    949c:	df 4f       	sbci	r29, 0xFF	; 255
    949e:	88 80       	ld	r8, Y
    94a0:	c1 5b       	subi	r28, 0xB1	; 177
    94a2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2008
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    94a4:	c2 01       	movw	r24, r4
    94a6:	8c 56       	subi	r24, 0x6C	; 108
    94a8:	9e 4f       	sbci	r25, 0xFE	; 254
    94aa:	93 01       	movw	r18, r6
    94ac:	28 0f       	add	r18, r24
    94ae:	39 1f       	adc	r19, r25
    94b0:	c4 54       	subi	r28, 0x44	; 68
    94b2:	df 4f       	sbci	r29, 0xFF	; 255
    94b4:	39 83       	std	Y+1, r19	; 0x01
    94b6:	28 83       	st	Y, r18
    94b8:	cc 5b       	subi	r28, 0xBC	; 188
    94ba:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2009
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    94bc:	12 01       	movw	r2, r4
    94be:	3a e6       	ldi	r19, 0x6A	; 106
    94c0:	23 1a       	sub	r2, r19
    94c2:	3e ef       	ldi	r19, 0xFE	; 254
    94c4:	33 0a       	sbc	r3, r19
    94c6:	26 0c       	add	r2, r6
    94c8:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2010
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    94ca:	0b 96       	adiw	r24, 0x0b	; 11
    94cc:	a3 01       	movw	r20, r6
    94ce:	48 0f       	add	r20, r24
    94d0:	59 1f       	adc	r21, r25
    94d2:	ce 53       	subi	r28, 0x3E	; 62
    94d4:	df 4f       	sbci	r29, 0xFF	; 255
    94d6:	59 83       	std	Y+1, r21	; 0x01
    94d8:	48 83       	st	Y, r20
    94da:	c2 5c       	subi	r28, 0xC2	; 194
    94dc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2011
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    94de:	01 97       	sbiw	r24, 0x01	; 1
    94e0:	b3 01       	movw	r22, r6
    94e2:	68 0f       	add	r22, r24
    94e4:	79 1f       	adc	r23, r25
    94e6:	c8 53       	subi	r28, 0x38	; 56
    94e8:	df 4f       	sbci	r29, 0xFF	; 255
    94ea:	79 83       	std	Y+1, r23	; 0x01
    94ec:	68 83       	st	Y, r22
    94ee:	c8 5c       	subi	r28, 0xC8	; 200
    94f0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2013
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    94f2:	01 97       	sbiw	r24, 0x01	; 1
    94f4:	f3 01       	movw	r30, r6
    94f6:	e8 0f       	add	r30, r24
    94f8:	f9 1f       	adc	r31, r25
    94fa:	c6 53       	subi	r28, 0x36	; 54
    94fc:	df 4f       	sbci	r29, 0xFF	; 255
    94fe:	f9 83       	std	Y+1, r31	; 0x01
    9500:	e8 83       	st	Y, r30
    9502:	ca 5c       	subi	r28, 0xCA	; 202
    9504:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2014
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    9506:	03 97       	sbiw	r24, 0x03	; 3
    9508:	93 01       	movw	r18, r6
    950a:	28 0f       	add	r18, r24
    950c:	39 1f       	adc	r19, r25
    950e:	c3 53       	subi	r28, 0x33	; 51
    9510:	df 4f       	sbci	r29, 0xFF	; 255
    9512:	39 83       	std	Y+1, r19	; 0x01
    9514:	28 83       	st	Y, r18
    9516:	cd 5c       	subi	r28, 0xCD	; 205
    9518:	d0 40       	sbci	r29, 0x00	; 0
    951a:	02 97       	sbiw	r24, 0x02	; 2
    951c:	a3 01       	movw	r20, r6
    951e:	48 0f       	add	r20, r24
    9520:	59 1f       	adc	r21, r25
    9522:	c1 53       	subi	r28, 0x31	; 49
    9524:	df 4f       	sbci	r29, 0xFF	; 255
    9526:	59 83       	std	Y+1, r21	; 0x01
    9528:	48 83       	st	Y, r20
    952a:	cf 5c       	subi	r28, 0xCF	; 207
    952c:	d0 40       	sbci	r29, 0x00	; 0
    952e:	d1 2c       	mov	r13, r1
    9530:	c1 2c       	mov	r12, r1
    9532:	ba 2c       	mov	r11, r10
    9534:	bc 0c       	add	r11, r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2006
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
    9536:	b8 14       	cp	r11, r8
    9538:	08 f0       	brcs	.+2      	; 0x953c <draw_menu(bool)+0x1af6>
    953a:	aa c0       	rjmp	.+340    	; 0x9690 <draw_menu(bool)+0x1c4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2008
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    953c:	c4 54       	subi	r28, 0x44	; 68
    953e:	df 4f       	sbci	r29, 0xFF	; 255
    9540:	e8 81       	ld	r30, Y
    9542:	f9 81       	ldd	r31, Y+1	; 0x01
    9544:	cc 5b       	subi	r28, 0xBC	; 188
    9546:	d0 40       	sbci	r29, 0x00	; 0
    9548:	25 91       	lpm	r18, Z+
    954a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2009
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    954c:	f1 01       	movw	r30, r2
    954e:	85 91       	lpm	r24, Z+
    9550:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2010
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    9552:	ce 53       	subi	r28, 0x3E	; 62
    9554:	df 4f       	sbci	r29, 0xFF	; 255
    9556:	e8 81       	ld	r30, Y
    9558:	f9 81       	ldd	r31, Y+1	; 0x01
    955a:	c2 5c       	subi	r28, 0xC2	; 194
    955c:	d0 40       	sbci	r29, 0x00	; 0
    955e:	44 91       	lpm	r20, Z
    9560:	44 23       	and	r20, r20
    9562:	09 f4       	brne	.+2      	; 0x9566 <draw_menu(bool)+0x1b20>
    9564:	97 c0       	rjmp	.+302    	; 0x9694 <draw_menu(bool)+0x1c4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2009
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    9566:	c6 54       	subi	r28, 0x46	; 70
    9568:	df 4f       	sbci	r29, 0xFF	; 255
    956a:	48 81       	ld	r20, Y
    956c:	59 81       	ldd	r21, Y+1	; 0x01
    956e:	ca 5b       	subi	r28, 0xBA	; 186
    9570:	d0 40       	sbci	r29, 0x00	; 0
    9572:	48 0f       	add	r20, r24
    9574:	59 1f       	adc	r21, r25
    9576:	c0 54       	subi	r28, 0x40	; 64
    9578:	df 4f       	sbci	r29, 0xFF	; 255
    957a:	59 83       	std	Y+1, r21	; 0x01
    957c:	48 83       	st	Y, r20
    957e:	c0 5c       	subi	r28, 0xC0	; 192
    9580:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2012
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    9582:	ce 53       	subi	r28, 0x3E	; 62
    9584:	df 4f       	sbci	r29, 0xFF	; 255
    9586:	e8 81       	ld	r30, Y
    9588:	f9 81       	ldd	r31, Y+1	; 0x01
    958a:	c2 5c       	subi	r28, 0xC2	; 194
    958c:	d0 40       	sbci	r29, 0x00	; 0
    958e:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2008
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    9590:	c8 54       	subi	r28, 0x48	; 72
    9592:	df 4f       	sbci	r29, 0xFF	; 255
    9594:	48 81       	ld	r20, Y
    9596:	59 81       	ldd	r21, Y+1	; 0x01
    9598:	c8 5b       	subi	r28, 0xB8	; 184
    959a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2012
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    959c:	81 30       	cpi	r24, 0x01	; 1
    959e:	e9 f4       	brne	.+58     	; 0x95da <draw_menu(bool)+0x1b94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2013
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    95a0:	c4 54       	subi	r28, 0x44	; 68
    95a2:	df 4f       	sbci	r29, 0xFF	; 255
    95a4:	e8 81       	ld	r30, Y
    95a6:	f9 81       	ldd	r31, Y+1	; 0x01
    95a8:	cc 5b       	subi	r28, 0xBC	; 188
    95aa:	d0 40       	sbci	r29, 0x00	; 0
    95ac:	85 91       	lpm	r24, Z+
    95ae:	94 91       	lpm	r25, Z
    95b0:	c6 53       	subi	r28, 0x36	; 54
    95b2:	df 4f       	sbci	r29, 0xFF	; 255
    95b4:	e8 81       	ld	r30, Y
    95b6:	f9 81       	ldd	r31, Y+1	; 0x01
    95b8:	ca 5c       	subi	r28, 0xCA	; 202
    95ba:	d0 40       	sbci	r29, 0x00	; 0
    95bc:	44 91       	lpm	r20, Z
    95be:	c8 54       	subi	r28, 0x48	; 72
    95c0:	df 4f       	sbci	r29, 0xFF	; 255
    95c2:	28 81       	ld	r18, Y
    95c4:	39 81       	ldd	r19, Y+1	; 0x01
    95c6:	c8 5b       	subi	r28, 0xB8	; 184
    95c8:	d0 40       	sbci	r29, 0x00	; 0
    95ca:	82 0f       	add	r24, r18
    95cc:	93 1f       	adc	r25, r19
    95ce:	4c 9d       	mul	r20, r12
    95d0:	90 01       	movw	r18, r0
    95d2:	4d 9d       	mul	r20, r13
    95d4:	30 0d       	add	r19, r0
    95d6:	11 24       	eor	r1, r1
    95d8:	ac 01       	movw	r20, r24
    95da:	42 0f       	add	r20, r18
    95dc:	53 1f       	adc	r21, r19
    95de:	c2 54       	subi	r28, 0x42	; 66
    95e0:	df 4f       	sbci	r29, 0xFF	; 255
    95e2:	59 83       	std	Y+1, r21	; 0x01
    95e4:	48 83       	st	Y, r20
    95e6:	ce 5b       	subi	r28, 0xBE	; 190
    95e8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2014
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    95ea:	c3 53       	subi	r28, 0x33	; 51
    95ec:	df 4f       	sbci	r29, 0xFF	; 255
    95ee:	e8 81       	ld	r30, Y
    95f0:	f9 81       	ldd	r31, Y+1	; 0x01
    95f2:	cd 5c       	subi	r28, 0xCD	; 205
    95f4:	d0 40       	sbci	r29, 0x00	; 0
    95f6:	25 91       	lpm	r18, Z+
    95f8:	34 91       	lpm	r19, Z
    95fa:	c1 53       	subi	r28, 0x31	; 49
    95fc:	df 4f       	sbci	r29, 0xFF	; 255
    95fe:	e8 81       	ld	r30, Y
    9600:	f9 81       	ldd	r31, Y+1	; 0x01
    9602:	cf 5c       	subi	r28, 0xCF	; 207
    9604:	d0 40       	sbci	r29, 0x00	; 0
    9606:	45 91       	lpm	r20, Z+
    9608:	54 91       	lpm	r21, Z
    960a:	ca 53       	subi	r28, 0x3A	; 58
    960c:	df 4f       	sbci	r29, 0xFF	; 255
    960e:	e8 80       	ld	r14, Y
    9610:	f9 80       	ldd	r15, Y+1	; 0x01
    9612:	c6 5c       	subi	r28, 0xC6	; 198
    9614:	d0 40       	sbci	r29, 0x00	; 0
    9616:	cc 53       	subi	r28, 0x3C	; 60
    9618:	df 4f       	sbci	r29, 0xFF	; 255
    961a:	08 81       	ld	r16, Y
    961c:	19 81       	ldd	r17, Y+1	; 0x01
    961e:	c4 5c       	subi	r28, 0xC4	; 196
    9620:	d0 40       	sbci	r29, 0x00	; 0
    9622:	c0 54       	subi	r28, 0x40	; 64
    9624:	df 4f       	sbci	r29, 0xFF	; 255
    9626:	68 81       	ld	r22, Y
    9628:	79 81       	ldd	r23, Y+1	; 0x01
    962a:	c0 5c       	subi	r28, 0xC0	; 192
    962c:	d0 40       	sbci	r29, 0x00	; 0
    962e:	c2 54       	subi	r28, 0x42	; 66
    9630:	df 4f       	sbci	r29, 0xFF	; 255
    9632:	88 81       	ld	r24, Y
    9634:	99 81       	ldd	r25, Y+1	; 0x01
    9636:	ce 5b       	subi	r28, 0xBE	; 190
    9638:	d0 40       	sbci	r29, 0x00	; 0
    963a:	0e 94 b8 24 	call	0x4970	; 0x4970 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    963e:	18 2f       	mov	r17, r24
    9640:	5f ef       	ldi	r21, 0xFF	; 255
    9642:	c5 1a       	sub	r12, r21
    9644:	d5 0a       	sbc	r13, r21
    9646:	88 23       	and	r24, r24
    9648:	09 f4       	brne	.+2      	; 0x964c <draw_menu(bool)+0x1c06>
    964a:	73 cf       	rjmp	.-282    	; 0x9532 <draw_menu(bool)+0x1aec>
    964c:	ce 54       	subi	r28, 0x4E	; 78
    964e:	df 4f       	sbci	r29, 0xFF	; 255
    9650:	b8 82       	st	Y, r11
    9652:	c2 5b       	subi	r28, 0xB2	; 178
    9654:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2016
        {
          fntargs =  pgm_read_word(&dyn_button_1->dyn_button_onclick);
    9656:	f2 01       	movw	r30, r4
    9658:	ea 55       	subi	r30, 0x5A	; 90
    965a:	fe 4f       	sbci	r31, 0xFE	; 254
    965c:	e6 0d       	add	r30, r6
    965e:	f7 1d       	adc	r31, r7
    9660:	25 91       	lpm	r18, Z+
    9662:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2017
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    9664:	ca 54       	subi	r28, 0x4A	; 74
    9666:	df 4f       	sbci	r29, 0xFF	; 255
    9668:	e8 81       	ld	r30, Y
    966a:	f9 81       	ldd	r31, Y+1	; 0x01
    966c:	c6 5b       	subi	r28, 0xB6	; 182
    966e:	d0 40       	sbci	r29, 0x00	; 0
    9670:	84 91       	lpm	r24, Z
    9672:	cd 54       	subi	r28, 0x4D	; 77
    9674:	df 4f       	sbci	r29, 0xFF	; 255
    9676:	68 81       	ld	r22, Y
    9678:	c3 5b       	subi	r28, 0xB3	; 179
    967a:	d0 40       	sbci	r29, 0x00	; 0
    967c:	70 e0       	ldi	r23, 0x00	; 0
    967e:	4b 2d       	mov	r20, r11
    9680:	90 e0       	ldi	r25, 0x00	; 0
    9682:	f9 01       	movw	r30, r18
    9684:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2018
          ret = true;
    9686:	c4 53       	subi	r28, 0x34	; 52
    9688:	df 4f       	sbci	r29, 0xFF	; 255
    968a:	18 83       	st	Y, r17
    968c:	cc 5c       	subi	r28, 0xCC	; 204
    968e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1967
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    9690:	93 94       	inc	r9
    9692:	12 cd       	rjmp	.-1500   	; 0x90b8 <draw_menu(bool)+0x1672>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2011
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    9694:	f1 01       	movw	r30, r2
    9696:	85 91       	lpm	r24, Z+
    9698:	94 91       	lpm	r25, Z
    969a:	c8 53       	subi	r28, 0x38	; 56
    969c:	df 4f       	sbci	r29, 0xFF	; 255
    969e:	e8 81       	ld	r30, Y
    96a0:	f9 81       	ldd	r31, Y+1	; 0x01
    96a2:	c8 5c       	subi	r28, 0xC8	; 200
    96a4:	d0 40       	sbci	r29, 0x00	; 0
    96a6:	64 91       	lpm	r22, Z
    96a8:	c6 54       	subi	r28, 0x46	; 70
    96aa:	df 4f       	sbci	r29, 0xFF	; 255
    96ac:	48 81       	ld	r20, Y
    96ae:	59 81       	ldd	r21, Y+1	; 0x01
    96b0:	ca 5b       	subi	r28, 0xBA	; 186
    96b2:	d0 40       	sbci	r29, 0x00	; 0
    96b4:	84 0f       	add	r24, r20
    96b6:	95 1f       	adc	r25, r21
    96b8:	6c 9d       	mul	r22, r12
    96ba:	a0 01       	movw	r20, r0
    96bc:	6d 9d       	mul	r22, r13
    96be:	50 0d       	add	r21, r0
    96c0:	11 24       	eor	r1, r1
    96c2:	bc 01       	movw	r22, r24
    96c4:	64 0f       	add	r22, r20
    96c6:	75 1f       	adc	r23, r21
    96c8:	c0 54       	subi	r28, 0x40	; 64
    96ca:	df 4f       	sbci	r29, 0xFF	; 255
    96cc:	79 83       	std	Y+1, r23	; 0x01
    96ce:	68 83       	st	Y, r22
    96d0:	c0 5c       	subi	r28, 0xC0	; 192
    96d2:	d0 40       	sbci	r29, 0x00	; 0
    96d4:	56 cf       	rjmp	.-340    	; 0x9582 <draw_menu(bool)+0x1b3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2026
        loop_t++;
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    96d6:	c4 53       	subi	r28, 0x34	; 52
    96d8:	df 4f       	sbci	r29, 0xFF	; 255
    96da:	f8 81       	ld	r31, Y
    96dc:	cc 5c       	subi	r28, 0xCC	; 204
    96de:	d0 40       	sbci	r29, 0x00	; 0
    96e0:	f1 11       	cpse	r31, r1
    96e2:	51 c4       	rjmp	.+2210   	; 0x9f86 <draw_menu(bool)+0x2540>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2027
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    96e4:	ca 54       	subi	r28, 0x4A	; 74
    96e6:	df 4f       	sbci	r29, 0xFF	; 255
    96e8:	18 82       	st	Y, r1
    96ea:	c6 5b       	subi	r28, 0xB6	; 182
    96ec:	d0 40       	sbci	r29, 0x00	; 0
    96ee:	93 01       	movw	r18, r6
    96f0:	24 5b       	subi	r18, 0xB4	; 180
    96f2:	3d 4f       	sbci	r19, 0xFD	; 253
    96f4:	c0 52       	subi	r28, 0x20	; 32
    96f6:	df 4f       	sbci	r29, 0xFF	; 255
    96f8:	39 83       	std	Y+1, r19	; 0x01
    96fa:	28 83       	st	Y, r18
    96fc:	c0 5e       	subi	r28, 0xE0	; 224
    96fe:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2067
          {
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    9700:	ae 01       	movw	r20, r28
    9702:	4f 57       	subi	r20, 0x7F	; 127
    9704:	5f 4f       	sbci	r21, 0xFF	; 255
    9706:	cc 54       	subi	r28, 0x4C	; 76
    9708:	df 4f       	sbci	r29, 0xFF	; 255
    970a:	59 83       	std	Y+1, r21	; 0x01
    970c:	48 83       	st	Y, r20
    970e:	c4 5b       	subi	r28, 0xB4	; 180
    9710:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2027
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    9712:	c0 52       	subi	r28, 0x20	; 32
    9714:	df 4f       	sbci	r29, 0xFF	; 255
    9716:	e8 81       	ld	r30, Y
    9718:	f9 81       	ldd	r31, Y+1	; 0x01
    971a:	c0 5e       	subi	r28, 0xE0	; 224
    971c:	d0 40       	sbci	r29, 0x00	; 0
    971e:	84 91       	lpm	r24, Z
    9720:	ca 54       	subi	r28, 0x4A	; 74
    9722:	df 4f       	sbci	r29, 0xFF	; 255
    9724:	f8 81       	ld	r31, Y
    9726:	c6 5b       	subi	r28, 0xB6	; 182
    9728:	d0 40       	sbci	r29, 0x00	; 0
    972a:	f8 17       	cp	r31, r24
    972c:	08 f0       	brcs	.+2      	; 0x9730 <draw_menu(bool)+0x1cea>
    972e:	31 c4       	rjmp	.+2146   	; 0x9f92 <draw_menu(bool)+0x254c>
    9730:	2e e1       	ldi	r18, 0x1E	; 30
    9732:	f2 9f       	mul	r31, r18
    9734:	20 01       	movw	r4, r0
    9736:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2030
  {
    dyn_select_box_1 = &current->dyn_select_box_1[idx];
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
    9738:	f2 01       	movw	r30, r4
    973a:	ec 5b       	subi	r30, 0xBC	; 188
    973c:	fd 4f       	sbci	r31, 0xFD	; 253
    973e:	e6 0d       	add	r30, r6
    9740:	f7 1d       	adc	r31, r7
    9742:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2031
    if (enable_redraw(rdr, redraw_class) == true)
    9744:	cf 52       	subi	r28, 0x2F	; 47
    9746:	df 4f       	sbci	r29, 0xFF	; 255
    9748:	68 81       	ld	r22, Y
    974a:	c1 5d       	subi	r28, 0xD1	; 209
    974c:	d0 40       	sbci	r29, 0x00	; 0
    974e:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <enable_redraw(unsigned char, unsigned char)>
    9752:	88 23       	and	r24, r24
    9754:	09 f4       	brne	.+2      	; 0x9758 <draw_menu(bool)+0x1d12>
    9756:	45 c2       	rjmp	.+1162   	; 0x9be2 <draw_menu(bool)+0x219c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2033
    {
      loop_i = 0;
    9758:	ce 54       	subi	r28, 0x4E	; 78
    975a:	df 4f       	sbci	r29, 0xFF	; 255
    975c:	18 82       	st	Y, r1
    975e:	c2 5b       	subi	r28, 0xB2	; 178
    9760:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2036
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
    9762:	f2 01       	movw	r30, r4
    9764:	e0 5c       	subi	r30, 0xC0	; 192
    9766:	fd 4f       	sbci	r31, 0xFD	; 253
    9768:	e6 0d       	add	r30, r6
    976a:	f7 1d       	adc	r31, r7
    976c:	25 91       	lpm	r18, Z+
    976e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2037
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    9770:	c2 01       	movw	r24, r4
    9772:	85 5c       	subi	r24, 0xC5	; 197
    9774:	9d 4f       	sbci	r25, 0xFD	; 253
    9776:	a3 01       	movw	r20, r6
    9778:	48 0f       	add	r20, r24
    977a:	59 1f       	adc	r21, r25
    977c:	c8 53       	subi	r28, 0x38	; 56
    977e:	df 4f       	sbci	r29, 0xFF	; 255
    9780:	59 83       	std	Y+1, r21	; 0x01
    9782:	48 83       	st	Y, r20
    9784:	c8 5c       	subi	r28, 0xC8	; 200
    9786:	d0 40       	sbci	r29, 0x00	; 0
    9788:	fa 01       	movw	r30, r20
    978a:	84 91       	lpm	r24, Z
    978c:	cd 54       	subi	r28, 0x4D	; 77
    978e:	df 4f       	sbci	r29, 0xFF	; 255
    9790:	68 81       	ld	r22, Y
    9792:	c3 5b       	subi	r28, 0xB3	; 179
    9794:	d0 40       	sbci	r29, 0x00	; 0
    9796:	70 e0       	ldi	r23, 0x00	; 0
    9798:	40 e0       	ldi	r20, 0x00	; 0
    979a:	90 e0       	ldi	r25, 0x00	; 0
    979c:	f9 01       	movw	r30, r18
    979e:	19 95       	eicall
    97a0:	cf 54       	subi	r28, 0x4F	; 79
    97a2:	df 4f       	sbci	r29, 0xFF	; 255
    97a4:	88 83       	st	Y, r24
    97a6:	c1 5b       	subi	r28, 0xB1	; 177
    97a8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2038
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
    97aa:	f2 01       	movw	r30, r4
    97ac:	e4 5c       	subi	r30, 0xC4	; 196
    97ae:	fd 4f       	sbci	r31, 0xFD	; 253
    97b0:	e6 0d       	add	r30, r6
    97b2:	f7 1d       	adc	r31, r7
    97b4:	25 91       	lpm	r18, Z+
    97b6:	34 91       	lpm	r19, Z
    97b8:	ce 51       	subi	r28, 0x1E	; 30
    97ba:	df 4f       	sbci	r29, 0xFF	; 255
    97bc:	39 83       	std	Y+1, r19	; 0x01
    97be:	28 83       	st	Y, r18
    97c0:	c2 5e       	subi	r28, 0xE2	; 226
    97c2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2039
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
    97c4:	f2 01       	movw	r30, r4
    97c6:	e6 5c       	subi	r30, 0xC6	; 198
    97c8:	fd 4f       	sbci	r31, 0xFD	; 253
    97ca:	e6 0d       	add	r30, r6
    97cc:	f7 1d       	adc	r31, r7
    97ce:	44 91       	lpm	r20, Z
    97d0:	c2 01       	movw	r24, r4
    97d2:	88 5c       	subi	r24, 0xC8	; 200
    97d4:	9d 4f       	sbci	r25, 0xFD	; 253
    97d6:	b3 01       	movw	r22, r6
    97d8:	68 0f       	add	r22, r24
    97da:	79 1f       	adc	r23, r25
    97dc:	c1 53       	subi	r28, 0x31	; 49
    97de:	df 4f       	sbci	r29, 0xFF	; 255
    97e0:	79 83       	std	Y+1, r23	; 0x01
    97e2:	68 83       	st	Y, r22
    97e4:	cf 5c       	subi	r28, 0xCF	; 207
    97e6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2040
      if (slider_active != MENU_SLIDER_OFF)
    97e8:	4f 3f       	cpi	r20, 0xFF	; 255
    97ea:	99 f0       	breq	.+38     	; 0x9812 <draw_menu(bool)+0x1dcc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2041
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
    97ec:	fb 01       	movw	r30, r22
    97ee:	24 91       	lpm	r18, Z
    97f0:	f2 01       	movw	r30, r4
    97f2:	e7 5c       	subi	r30, 0xC7	; 199
    97f4:	fd 4f       	sbci	r31, 0xFD	; 253
    97f6:	e6 0d       	add	r30, r6
    97f8:	f7 1d       	adc	r31, r7
    97fa:	e4 91       	lpm	r30, Z
    97fc:	2e 9f       	mul	r18, r30
    97fe:	20 2d       	mov	r18, r0
    9800:	11 24       	eor	r1, r1
    9802:	be 01       	movw	r22, r28
    9804:	6f 54       	subi	r22, 0x4F	; 79
    9806:	7f 4f       	sbci	r23, 0xFF	; 255
    9808:	ce 01       	movw	r24, r28
    980a:	8e 54       	subi	r24, 0x4E	; 78
    980c:	9f 4f       	sbci	r25, 0xFF	; 255
    980e:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2044
      while (loop_i < loop_cnt)
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    9812:	c2 01       	movw	r24, r4
    9814:	89 5c       	subi	r24, 0xC9	; 201
    9816:	9d 4f       	sbci	r25, 0xFD	; 253
    9818:	93 01       	movw	r18, r6
    981a:	28 0f       	add	r18, r24
    981c:	39 1f       	adc	r19, r25
    981e:	c4 54       	subi	r28, 0x44	; 68
    9820:	df 4f       	sbci	r29, 0xFF	; 255
    9822:	39 83       	std	Y+1, r19	; 0x01
    9824:	28 83       	st	Y, r18
    9826:	cc 5b       	subi	r28, 0xBC	; 188
    9828:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2046
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    982a:	40 97       	sbiw	r24, 0x10	; 16
    982c:	a3 01       	movw	r20, r6
    982e:	48 0f       	add	r20, r24
    9830:	59 1f       	adc	r21, r25
    9832:	ce 53       	subi	r28, 0x3E	; 62
    9834:	df 4f       	sbci	r29, 0xFF	; 255
    9836:	59 83       	std	Y+1, r21	; 0x01
    9838:	48 83       	st	Y, r20
    983a:	c2 5c       	subi	r28, 0xC2	; 194
    983c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2047
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    983e:	12 01       	movw	r2, r4
    9840:	57 ed       	ldi	r21, 0xD7	; 215
    9842:	25 1a       	sub	r2, r21
    9844:	5d ef       	ldi	r21, 0xFD	; 253
    9846:	35 0a       	sbc	r3, r21
    9848:	26 0c       	add	r2, r6
    984a:	37 1c       	adc	r3, r7
    984c:	0f 96       	adiw	r24, 0x0f	; 15
    984e:	b3 01       	movw	r22, r6
    9850:	68 0f       	add	r22, r24
    9852:	79 1f       	adc	r23, r25
    9854:	c6 53       	subi	r28, 0x36	; 54
    9856:	df 4f       	sbci	r29, 0xFF	; 255
    9858:	79 83       	std	Y+1, r23	; 0x01
    985a:	68 83       	st	Y, r22
    985c:	ca 5c       	subi	r28, 0xCA	; 202
    985e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2053
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9860:	01 97       	sbiw	r24, 0x01	; 1
    9862:	f3 01       	movw	r30, r6
    9864:	e8 0f       	add	r30, r24
    9866:	f9 1f       	adc	r31, r25
    9868:	c3 53       	subi	r28, 0x33	; 51
    986a:	df 4f       	sbci	r29, 0xFF	; 255
    986c:	f9 83       	std	Y+1, r31	; 0x01
    986e:	e8 83       	st	Y, r30
    9870:	cd 5c       	subi	r28, 0xCD	; 205
    9872:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2068
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
    9874:	0d 96       	adiw	r24, 0x0d	; 13
    9876:	93 01       	movw	r18, r6
    9878:	28 0f       	add	r18, r24
    987a:	39 1f       	adc	r19, r25
    987c:	ce 52       	subi	r28, 0x2E	; 46
    987e:	df 4f       	sbci	r29, 0xFF	; 255
    9880:	39 83       	std	Y+1, r19	; 0x01
    9882:	28 83       	st	Y, r18
    9884:	c2 5d       	subi	r28, 0xD2	; 210
    9886:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2073
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
    9888:	0f 97       	sbiw	r24, 0x0f	; 15
    988a:	a3 01       	movw	r20, r6
    988c:	48 0f       	add	r20, r24
    988e:	59 1f       	adc	r21, r25
    9890:	cc 52       	subi	r28, 0x2C	; 44
    9892:	df 4f       	sbci	r29, 0xFF	; 255
    9894:	59 83       	std	Y+1, r21	; 0x01
    9896:	48 83       	st	Y, r20
    9898:	c4 5d       	subi	r28, 0xD4	; 212
    989a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2072
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
    989c:	02 97       	sbiw	r24, 0x02	; 2
    989e:	b3 01       	movw	r22, r6
    98a0:	68 0f       	add	r22, r24
    98a2:	79 1f       	adc	r23, r25
    98a4:	ca 52       	subi	r28, 0x2A	; 42
    98a6:	df 4f       	sbci	r29, 0xFF	; 255
    98a8:	79 83       	std	Y+1, r23	; 0x01
    98aa:	68 83       	st	Y, r22
    98ac:	c6 5d       	subi	r28, 0xD6	; 214
    98ae:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2071
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
    98b0:	01 97       	sbiw	r24, 0x01	; 1
    98b2:	f3 01       	movw	r30, r6
    98b4:	e8 0f       	add	r30, r24
    98b6:	f9 1f       	adc	r31, r25
    98b8:	c8 52       	subi	r28, 0x28	; 40
    98ba:	df 4f       	sbci	r29, 0xFF	; 255
    98bc:	f9 83       	std	Y+1, r31	; 0x01
    98be:	e8 83       	st	Y, r30
    98c0:	c8 5d       	subi	r28, 0xD8	; 216
    98c2:	d0 40       	sbci	r29, 0x00	; 0
    98c4:	01 97       	sbiw	r24, 0x01	; 1
    98c6:	93 01       	movw	r18, r6
    98c8:	28 0f       	add	r18, r24
    98ca:	39 1f       	adc	r19, r25
    98cc:	c6 52       	subi	r28, 0x26	; 38
    98ce:	df 4f       	sbci	r29, 0xFF	; 255
    98d0:	39 83       	std	Y+1, r19	; 0x01
    98d2:	28 83       	st	Y, r18
    98d4:	ca 5d       	subi	r28, 0xDA	; 218
    98d6:	d0 40       	sbci	r29, 0x00	; 0
    98d8:	02 97       	sbiw	r24, 0x02	; 2
    98da:	a3 01       	movw	r20, r6
    98dc:	48 0f       	add	r20, r24
    98de:	59 1f       	adc	r21, r25
    98e0:	c4 52       	subi	r28, 0x24	; 36
    98e2:	df 4f       	sbci	r29, 0xFF	; 255
    98e4:	59 83       	std	Y+1, r21	; 0x01
    98e6:	48 83       	st	Y, r20
    98e8:	cc 5d       	subi	r28, 0xDC	; 220
    98ea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2070
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    98ec:	02 97       	sbiw	r24, 0x02	; 2
    98ee:	b3 01       	movw	r22, r6
    98f0:	68 0f       	add	r22, r24
    98f2:	79 1f       	adc	r23, r25
    98f4:	c2 52       	subi	r28, 0x22	; 34
    98f6:	df 4f       	sbci	r29, 0xFF	; 255
    98f8:	79 83       	std	Y+1, r23	; 0x01
    98fa:	68 83       	st	Y, r22
    98fc:	ce 5d       	subi	r28, 0xDE	; 222
    98fe:	d0 40       	sbci	r29, 0x00	; 0
    9900:	f1 2c       	mov	r15, r1
    9902:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2042
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
    9904:	ce 54       	subi	r28, 0x4E	; 78
    9906:	df 4f       	sbci	r29, 0xFF	; 255
    9908:	88 81       	ld	r24, Y
    990a:	c2 5b       	subi	r28, 0xB2	; 178
    990c:	d0 40       	sbci	r29, 0x00	; 0
    990e:	cf 54       	subi	r28, 0x4F	; 79
    9910:	df 4f       	sbci	r29, 0xFF	; 255
    9912:	98 81       	ld	r25, Y
    9914:	c1 5b       	subi	r28, 0xB1	; 177
    9916:	d0 40       	sbci	r29, 0x00	; 0
    9918:	89 17       	cp	r24, r25
    991a:	08 f0       	brcs	.+2      	; 0x991e <draw_menu(bool)+0x1ed8>
    991c:	62 c1       	rjmp	.+708    	; 0x9be2 <draw_menu(bool)+0x219c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2044
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    991e:	c4 54       	subi	r28, 0x44	; 68
    9920:	df 4f       	sbci	r29, 0xFF	; 255
    9922:	e8 81       	ld	r30, Y
    9924:	f9 81       	ldd	r31, Y+1	; 0x01
    9926:	cc 5b       	subi	r28, 0xBC	; 188
    9928:	d0 40       	sbci	r29, 0x00	; 0
    992a:	94 91       	lpm	r25, Z
    992c:	91 11       	cpse	r25, r1
    992e:	34 c0       	rjmp	.+104    	; 0x9998 <draw_menu(bool)+0x1f52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2046
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    9930:	ce 53       	subi	r28, 0x3E	; 62
    9932:	df 4f       	sbci	r29, 0xFF	; 255
    9934:	e8 81       	ld	r30, Y
    9936:	f9 81       	ldd	r31, Y+1	; 0x01
    9938:	c2 5c       	subi	r28, 0xC2	; 194
    993a:	d0 40       	sbci	r29, 0x00	; 0
    993c:	25 91       	lpm	r18, Z+
    993e:	34 91       	lpm	r19, Z
    9940:	c8 54       	subi	r28, 0x48	; 72
    9942:	df 4f       	sbci	r29, 0xFF	; 255
    9944:	48 81       	ld	r20, Y
    9946:	59 81       	ldd	r21, Y+1	; 0x01
    9948:	c8 5b       	subi	r28, 0xB8	; 184
    994a:	d0 40       	sbci	r29, 0x00	; 0
    994c:	42 0f       	add	r20, r18
    994e:	53 1f       	adc	r21, r19
    9950:	c2 54       	subi	r28, 0x42	; 66
    9952:	df 4f       	sbci	r29, 0xFF	; 255
    9954:	59 83       	std	Y+1, r21	; 0x01
    9956:	48 83       	st	Y, r20
    9958:	ce 5b       	subi	r28, 0xBE	; 190
    995a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2047
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    995c:	f1 01       	movw	r30, r2
    995e:	25 91       	lpm	r18, Z+
    9960:	34 91       	lpm	r19, Z
    9962:	c6 53       	subi	r28, 0x36	; 54
    9964:	df 4f       	sbci	r29, 0xFF	; 255
    9966:	e8 81       	ld	r30, Y
    9968:	f9 81       	ldd	r31, Y+1	; 0x01
    996a:	ca 5c       	subi	r28, 0xCA	; 202
    996c:	d0 40       	sbci	r29, 0x00	; 0
    996e:	94 91       	lpm	r25, Z
    9970:	c6 54       	subi	r28, 0x46	; 70
    9972:	df 4f       	sbci	r29, 0xFF	; 255
    9974:	48 81       	ld	r20, Y
    9976:	59 81       	ldd	r21, Y+1	; 0x01
    9978:	ca 5b       	subi	r28, 0xBA	; 186
    997a:	d0 40       	sbci	r29, 0x00	; 0
    997c:	24 0f       	add	r18, r20
    997e:	35 1f       	adc	r19, r21
    9980:	b9 01       	movw	r22, r18
    9982:	91 9f       	mul	r25, r17
    9984:	60 0d       	add	r22, r0
    9986:	71 1d       	adc	r23, r1
    9988:	11 24       	eor	r1, r1
    998a:	c0 54       	subi	r28, 0x40	; 64
    998c:	df 4f       	sbci	r29, 0xFF	; 255
    998e:	79 83       	std	Y+1, r23	; 0x01
    9990:	68 83       	st	Y, r22
    9992:	c0 5c       	subi	r28, 0xC0	; 192
    9994:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2048
          loop_t++;
    9996:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2050
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    9998:	c4 54       	subi	r28, 0x44	; 68
    999a:	df 4f       	sbci	r29, 0xFF	; 255
    999c:	e8 81       	ld	r30, Y
    999e:	f9 81       	ldd	r31, Y+1	; 0x01
    99a0:	cc 5b       	subi	r28, 0xBC	; 188
    99a2:	d0 40       	sbci	r29, 0x00	; 0
    99a4:	94 91       	lpm	r25, Z
    99a6:	91 30       	cpi	r25, 0x01	; 1
    99a8:	09 f0       	breq	.+2      	; 0x99ac <draw_menu(bool)+0x1f66>
    99aa:	34 c0       	rjmp	.+104    	; 0x9a14 <draw_menu(bool)+0x1fce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2052
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    99ac:	f1 01       	movw	r30, r2
    99ae:	25 91       	lpm	r18, Z+
    99b0:	34 91       	lpm	r19, Z
    99b2:	c6 54       	subi	r28, 0x46	; 70
    99b4:	df 4f       	sbci	r29, 0xFF	; 255
    99b6:	48 81       	ld	r20, Y
    99b8:	59 81       	ldd	r21, Y+1	; 0x01
    99ba:	ca 5b       	subi	r28, 0xBA	; 186
    99bc:	d0 40       	sbci	r29, 0x00	; 0
    99be:	42 0f       	add	r20, r18
    99c0:	53 1f       	adc	r21, r19
    99c2:	c0 54       	subi	r28, 0x40	; 64
    99c4:	df 4f       	sbci	r29, 0xFF	; 255
    99c6:	59 83       	std	Y+1, r21	; 0x01
    99c8:	48 83       	st	Y, r20
    99ca:	c0 5c       	subi	r28, 0xC0	; 192
    99cc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2053
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    99ce:	ce 53       	subi	r28, 0x3E	; 62
    99d0:	df 4f       	sbci	r29, 0xFF	; 255
    99d2:	e8 81       	ld	r30, Y
    99d4:	f9 81       	ldd	r31, Y+1	; 0x01
    99d6:	c2 5c       	subi	r28, 0xC2	; 194
    99d8:	d0 40       	sbci	r29, 0x00	; 0
    99da:	25 91       	lpm	r18, Z+
    99dc:	34 91       	lpm	r19, Z
    99de:	c3 53       	subi	r28, 0x33	; 51
    99e0:	df 4f       	sbci	r29, 0xFF	; 255
    99e2:	e8 81       	ld	r30, Y
    99e4:	f9 81       	ldd	r31, Y+1	; 0x01
    99e6:	cd 5c       	subi	r28, 0xCD	; 205
    99e8:	d0 40       	sbci	r29, 0x00	; 0
    99ea:	94 91       	lpm	r25, Z
    99ec:	c8 54       	subi	r28, 0x48	; 72
    99ee:	df 4f       	sbci	r29, 0xFF	; 255
    99f0:	48 81       	ld	r20, Y
    99f2:	59 81       	ldd	r21, Y+1	; 0x01
    99f4:	c8 5b       	subi	r28, 0xB8	; 184
    99f6:	d0 40       	sbci	r29, 0x00	; 0
    99f8:	24 0f       	add	r18, r20
    99fa:	35 1f       	adc	r19, r21
    99fc:	b9 01       	movw	r22, r18
    99fe:	91 9f       	mul	r25, r17
    9a00:	60 0d       	add	r22, r0
    9a02:	71 1d       	adc	r23, r1
    9a04:	11 24       	eor	r1, r1
    9a06:	c2 54       	subi	r28, 0x42	; 66
    9a08:	df 4f       	sbci	r29, 0xFF	; 255
    9a0a:	79 83       	std	Y+1, r23	; 0x01
    9a0c:	68 83       	st	Y, r22
    9a0e:	ce 5b       	subi	r28, 0xBE	; 190
    9a10:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2054
          loop_t++;
    9a12:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2056
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
    9a14:	c4 54       	subi	r28, 0x44	; 68
    9a16:	df 4f       	sbci	r29, 0xFF	; 255
    9a18:	e8 81       	ld	r30, Y
    9a1a:	f9 81       	ldd	r31, Y+1	; 0x01
    9a1c:	cc 5b       	subi	r28, 0xBC	; 188
    9a1e:	d0 40       	sbci	r29, 0x00	; 0
    9a20:	94 91       	lpm	r25, Z
    9a22:	92 30       	cpi	r25, 0x02	; 2
    9a24:	09 f0       	breq	.+2      	; 0x9a28 <draw_menu(bool)+0x1fe2>
    9a26:	4b c0       	rjmp	.+150    	; 0x9abe <draw_menu(bool)+0x2078>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2058
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9a28:	ce 53       	subi	r28, 0x3E	; 62
    9a2a:	df 4f       	sbci	r29, 0xFF	; 255
    9a2c:	e8 81       	ld	r30, Y
    9a2e:	f9 81       	ldd	r31, Y+1	; 0x01
    9a30:	c2 5c       	subi	r28, 0xC2	; 194
    9a32:	d0 40       	sbci	r29, 0x00	; 0
    9a34:	25 91       	lpm	r18, Z+
    9a36:	34 91       	lpm	r19, Z
    9a38:	c3 53       	subi	r28, 0x33	; 51
    9a3a:	df 4f       	sbci	r29, 0xFF	; 255
    9a3c:	e8 81       	ld	r30, Y
    9a3e:	f9 81       	ldd	r31, Y+1	; 0x01
    9a40:	cd 5c       	subi	r28, 0xCD	; 205
    9a42:	d0 40       	sbci	r29, 0x00	; 0
    9a44:	94 91       	lpm	r25, Z
    9a46:	c8 54       	subi	r28, 0x48	; 72
    9a48:	df 4f       	sbci	r29, 0xFF	; 255
    9a4a:	48 81       	ld	r20, Y
    9a4c:	59 81       	ldd	r21, Y+1	; 0x01
    9a4e:	c8 5b       	subi	r28, 0xB8	; 184
    9a50:	d0 40       	sbci	r29, 0x00	; 0
    9a52:	24 0f       	add	r18, r20
    9a54:	35 1f       	adc	r19, r21
    9a56:	b9 01       	movw	r22, r18
    9a58:	91 9f       	mul	r25, r17
    9a5a:	60 0d       	add	r22, r0
    9a5c:	71 1d       	adc	r23, r1
    9a5e:	11 24       	eor	r1, r1
    9a60:	c2 54       	subi	r28, 0x42	; 66
    9a62:	df 4f       	sbci	r29, 0xFF	; 255
    9a64:	79 83       	std	Y+1, r23	; 0x01
    9a66:	68 83       	st	Y, r22
    9a68:	ce 5b       	subi	r28, 0xBE	; 190
    9a6a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2059
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
    9a6c:	f1 01       	movw	r30, r2
    9a6e:	25 91       	lpm	r18, Z+
    9a70:	34 91       	lpm	r19, Z
    9a72:	c6 53       	subi	r28, 0x36	; 54
    9a74:	df 4f       	sbci	r29, 0xFF	; 255
    9a76:	e8 81       	ld	r30, Y
    9a78:	f9 81       	ldd	r31, Y+1	; 0x01
    9a7a:	ca 5c       	subi	r28, 0xCA	; 202
    9a7c:	d0 40       	sbci	r29, 0x00	; 0
    9a7e:	94 91       	lpm	r25, Z
    9a80:	c6 54       	subi	r28, 0x46	; 70
    9a82:	df 4f       	sbci	r29, 0xFF	; 255
    9a84:	48 81       	ld	r20, Y
    9a86:	59 81       	ldd	r21, Y+1	; 0x01
    9a88:	ca 5b       	subi	r28, 0xBA	; 186
    9a8a:	d0 40       	sbci	r29, 0x00	; 0
    9a8c:	24 0f       	add	r18, r20
    9a8e:	35 1f       	adc	r19, r21
    9a90:	b9 01       	movw	r22, r18
    9a92:	9f 9d       	mul	r25, r15
    9a94:	60 0d       	add	r22, r0
    9a96:	71 1d       	adc	r23, r1
    9a98:	11 24       	eor	r1, r1
    9a9a:	c0 54       	subi	r28, 0x40	; 64
    9a9c:	df 4f       	sbci	r29, 0xFF	; 255
    9a9e:	79 83       	std	Y+1, r23	; 0x01
    9aa0:	68 83       	st	Y, r22
    9aa2:	c0 5c       	subi	r28, 0xC0	; 192
    9aa4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2060
          loop_t++;
    9aa6:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2061
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
    9aa8:	c1 53       	subi	r28, 0x31	; 49
    9aaa:	df 4f       	sbci	r29, 0xFF	; 255
    9aac:	e8 81       	ld	r30, Y
    9aae:	f9 81       	ldd	r31, Y+1	; 0x01
    9ab0:	cf 5c       	subi	r28, 0xCF	; 207
    9ab2:	d0 40       	sbci	r29, 0x00	; 0
    9ab4:	94 91       	lpm	r25, Z
    9ab6:	19 17       	cp	r17, r25
    9ab8:	10 f0       	brcs	.+4      	; 0x9abe <draw_menu(bool)+0x2078>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2064
          {
            loop_t = 0;
            loop_r++;
    9aba:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2063
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
          {
            loop_t = 0;
    9abc:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2067
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    9abe:	9e 01       	movw	r18, r28
    9ac0:	2f 57       	subi	r18, 0x7F	; 127
    9ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    9ac4:	ae 01       	movw	r20, r28
    9ac6:	4f 5f       	subi	r20, 0xFF	; 255
    9ac8:	5f 4f       	sbci	r21, 0xFF	; 255
    9aca:	cd 54       	subi	r28, 0x4D	; 77
    9acc:	df 4f       	sbci	r29, 0xFF	; 255
    9ace:	68 81       	ld	r22, Y
    9ad0:	c3 5b       	subi	r28, 0xB3	; 179
    9ad2:	d0 40       	sbci	r29, 0x00	; 0
    9ad4:	ce 51       	subi	r28, 0x1E	; 30
    9ad6:	df 4f       	sbci	r29, 0xFF	; 255
    9ad8:	e8 81       	ld	r30, Y
    9ada:	f9 81       	ldd	r31, Y+1	; 0x01
    9adc:	c2 5e       	subi	r28, 0xE2	; 226
    9ade:	d0 40       	sbci	r29, 0x00	; 0
    9ae0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2068
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
    9ae2:	ce 52       	subi	r28, 0x2E	; 46
    9ae4:	df 4f       	sbci	r29, 0xFF	; 255
    9ae6:	e8 81       	ld	r30, Y
    9ae8:	f9 81       	ldd	r31, Y+1	; 0x01
    9aea:	c2 5d       	subi	r28, 0xD2	; 210
    9aec:	d0 40       	sbci	r29, 0x00	; 0
    9aee:	25 91       	lpm	r18, Z+
    9af0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2069
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    9af2:	c8 53       	subi	r28, 0x38	; 56
    9af4:	df 4f       	sbci	r29, 0xFF	; 255
    9af6:	e8 81       	ld	r30, Y
    9af8:	f9 81       	ldd	r31, Y+1	; 0x01
    9afa:	c8 5c       	subi	r28, 0xC8	; 200
    9afc:	d0 40       	sbci	r29, 0x00	; 0
    9afe:	84 91       	lpm	r24, Z
    9b00:	cd 54       	subi	r28, 0x4D	; 77
    9b02:	df 4f       	sbci	r29, 0xFF	; 255
    9b04:	68 81       	ld	r22, Y
    9b06:	c3 5b       	subi	r28, 0xB3	; 179
    9b08:	d0 40       	sbci	r29, 0x00	; 0
    9b0a:	70 e0       	ldi	r23, 0x00	; 0
    9b0c:	ce 54       	subi	r28, 0x4E	; 78
    9b0e:	df 4f       	sbci	r29, 0xFF	; 255
    9b10:	48 81       	ld	r20, Y
    9b12:	c2 5b       	subi	r28, 0xB2	; 178
    9b14:	d0 40       	sbci	r29, 0x00	; 0
    9b16:	90 e0       	ldi	r25, 0x00	; 0
    9b18:	f9 01       	movw	r30, r18
    9b1a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2073
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
    9b1c:	cc 52       	subi	r28, 0x2C	; 44
    9b1e:	df 4f       	sbci	r29, 0xFF	; 255
    9b20:	e8 81       	ld	r30, Y
    9b22:	f9 81       	ldd	r31, Y+1	; 0x01
    9b24:	c4 5d       	subi	r28, 0xD4	; 212
    9b26:	d0 40       	sbci	r29, 0x00	; 0
    9b28:	a5 90       	lpm	r10, Z+
    9b2a:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2072
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
    9b2c:	ca 52       	subi	r28, 0x2A	; 42
    9b2e:	df 4f       	sbci	r29, 0xFF	; 255
    9b30:	e8 81       	ld	r30, Y
    9b32:	f9 81       	ldd	r31, Y+1	; 0x01
    9b34:	c6 5d       	subi	r28, 0xD6	; 214
    9b36:	d0 40       	sbci	r29, 0x00	; 0
    9b38:	c5 90       	lpm	r12, Z+
    9b3a:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2071
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
    9b3c:	c8 52       	subi	r28, 0x28	; 40
    9b3e:	df 4f       	sbci	r29, 0xFF	; 255
    9b40:	e8 81       	ld	r30, Y
    9b42:	f9 81       	ldd	r31, Y+1	; 0x01
    9b44:	c8 5d       	subi	r28, 0xD8	; 216
    9b46:	d0 40       	sbci	r29, 0x00	; 0
    9b48:	e4 90       	lpm	r14, Z
    9b4a:	c6 52       	subi	r28, 0x26	; 38
    9b4c:	df 4f       	sbci	r29, 0xFF	; 255
    9b4e:	e8 81       	ld	r30, Y
    9b50:	f9 81       	ldd	r31, Y+1	; 0x01
    9b52:	ca 5d       	subi	r28, 0xDA	; 218
    9b54:	d0 40       	sbci	r29, 0x00	; 0
    9b56:	04 91       	lpm	r16, Z
    9b58:	c4 52       	subi	r28, 0x24	; 36
    9b5a:	df 4f       	sbci	r29, 0xFF	; 255
    9b5c:	e8 81       	ld	r30, Y
    9b5e:	f9 81       	ldd	r31, Y+1	; 0x01
    9b60:	cc 5d       	subi	r28, 0xDC	; 220
    9b62:	d0 40       	sbci	r29, 0x00	; 0
    9b64:	25 91       	lpm	r18, Z+
    9b66:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2070
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    9b68:	c2 52       	subi	r28, 0x22	; 34
    9b6a:	df 4f       	sbci	r29, 0xFF	; 255
    9b6c:	e8 81       	ld	r30, Y
    9b6e:	f9 81       	ldd	r31, Y+1	; 0x01
    9b70:	ce 5d       	subi	r28, 0xDE	; 222
    9b72:	d0 40       	sbci	r29, 0x00	; 0
    9b74:	45 91       	lpm	r20, Z+
    9b76:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2069
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    9b78:	88 24       	eor	r8, r8
    9b7a:	83 94       	inc	r8
    9b7c:	81 11       	cpse	r24, r1
    9b7e:	01 c0       	rjmp	.+2      	; 0x9b82 <draw_menu(bool)+0x213c>
    9b80:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2070
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    9b82:	cb 54       	subi	r28, 0x4B	; 75
    9b84:	df 4f       	sbci	r29, 0xFF	; 255
    9b86:	f8 81       	ld	r31, Y
    9b88:	c5 5b       	subi	r28, 0xB5	; 181
    9b8a:	d0 40       	sbci	r29, 0x00	; 0
    9b8c:	ff 93       	push	r31
    9b8e:	cc 54       	subi	r28, 0x4C	; 76
    9b90:	df 4f       	sbci	r29, 0xFF	; 255
    9b92:	68 81       	ld	r22, Y
    9b94:	c4 5b       	subi	r28, 0xB4	; 180
    9b96:	d0 40       	sbci	r29, 0x00	; 0
    9b98:	6f 93       	push	r22
    9b9a:	81 e0       	ldi	r24, 0x01	; 1
    9b9c:	90 e0       	ldi	r25, 0x00	; 0
    9b9e:	8c 0f       	add	r24, r28
    9ba0:	9d 1f       	adc	r25, r29
    9ba2:	9f 93       	push	r25
    9ba4:	8f 93       	push	r24
    9ba6:	c0 54       	subi	r28, 0x40	; 64
    9ba8:	df 4f       	sbci	r29, 0xFF	; 255
    9baa:	68 81       	ld	r22, Y
    9bac:	79 81       	ldd	r23, Y+1	; 0x01
    9bae:	c0 5c       	subi	r28, 0xC0	; 192
    9bb0:	d0 40       	sbci	r29, 0x00	; 0
    9bb2:	c2 54       	subi	r28, 0x42	; 66
    9bb4:	df 4f       	sbci	r29, 0xFF	; 255
    9bb6:	88 81       	ld	r24, Y
    9bb8:	99 81       	ldd	r25, Y+1	; 0x01
    9bba:	ce 5b       	subi	r28, 0xBE	; 190
    9bbc:	d0 40       	sbci	r29, 0x00	; 0
    9bbe:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2074
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
        loop_i++;
    9bc2:	ce 54       	subi	r28, 0x4E	; 78
    9bc4:	df 4f       	sbci	r29, 0xFF	; 255
    9bc6:	88 81       	ld	r24, Y
    9bc8:	c2 5b       	subi	r28, 0xB2	; 178
    9bca:	d0 40       	sbci	r29, 0x00	; 0
    9bcc:	8f 5f       	subi	r24, 0xFF	; 255
    9bce:	ce 54       	subi	r28, 0x4E	; 78
    9bd0:	df 4f       	sbci	r29, 0xFF	; 255
    9bd2:	88 83       	st	Y, r24
    9bd4:	c2 5b       	subi	r28, 0xB2	; 178
    9bd6:	d0 40       	sbci	r29, 0x00	; 0
    9bd8:	0f 90       	pop	r0
    9bda:	0f 90       	pop	r0
    9bdc:	0f 90       	pop	r0
    9bde:	0f 90       	pop	r0
    9be0:	91 ce       	rjmp	.-734    	; 0x9904 <draw_menu(bool)+0x1ebe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2077
      }
    }
    if (click_x > 0 && click_y > 0)
    9be2:	cc 53       	subi	r28, 0x3C	; 60
    9be4:	df 4f       	sbci	r29, 0xFF	; 255
    9be6:	e8 81       	ld	r30, Y
    9be8:	f9 81       	ldd	r31, Y+1	; 0x01
    9bea:	c4 5c       	subi	r28, 0xC4	; 196
    9bec:	d0 40       	sbci	r29, 0x00	; 0
    9bee:	ef 2b       	or	r30, r31
    9bf0:	09 f4       	brne	.+2      	; 0x9bf4 <draw_menu(bool)+0x21ae>
    9bf2:	bb c1       	rjmp	.+886    	; 0x9f6a <draw_menu(bool)+0x2524>
    9bf4:	ca 53       	subi	r28, 0x3A	; 58
    9bf6:	df 4f       	sbci	r29, 0xFF	; 255
    9bf8:	28 81       	ld	r18, Y
    9bfa:	39 81       	ldd	r19, Y+1	; 0x01
    9bfc:	c6 5c       	subi	r28, 0xC6	; 198
    9bfe:	d0 40       	sbci	r29, 0x00	; 0
    9c00:	23 2b       	or	r18, r19
    9c02:	09 f4       	brne	.+2      	; 0x9c06 <draw_menu(bool)+0x21c0>
    9c04:	b2 c1       	rjmp	.+868    	; 0x9f6a <draw_menu(bool)+0x2524>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2079
    {
      loop_i = 0;
    9c06:	ce 54       	subi	r28, 0x4E	; 78
    9c08:	df 4f       	sbci	r29, 0xFF	; 255
    9c0a:	18 82       	st	Y, r1
    9c0c:	c2 5b       	subi	r28, 0xB2	; 178
    9c0e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2082
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
    9c10:	f2 01       	movw	r30, r4
    9c12:	e0 5c       	subi	r30, 0xC0	; 192
    9c14:	fd 4f       	sbci	r31, 0xFD	; 253
    9c16:	e6 0d       	add	r30, r6
    9c18:	f7 1d       	adc	r31, r7
    9c1a:	25 91       	lpm	r18, Z+
    9c1c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2083
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    9c1e:	c2 01       	movw	r24, r4
    9c20:	85 5c       	subi	r24, 0xC5	; 197
    9c22:	9d 4f       	sbci	r25, 0xFD	; 253
    9c24:	a3 01       	movw	r20, r6
    9c26:	48 0f       	add	r20, r24
    9c28:	59 1f       	adc	r21, r25
    9c2a:	ce 53       	subi	r28, 0x3E	; 62
    9c2c:	df 4f       	sbci	r29, 0xFF	; 255
    9c2e:	59 83       	std	Y+1, r21	; 0x01
    9c30:	48 83       	st	Y, r20
    9c32:	c2 5c       	subi	r28, 0xC2	; 194
    9c34:	d0 40       	sbci	r29, 0x00	; 0
    9c36:	fa 01       	movw	r30, r20
    9c38:	84 91       	lpm	r24, Z
    9c3a:	cd 54       	subi	r28, 0x4D	; 77
    9c3c:	df 4f       	sbci	r29, 0xFF	; 255
    9c3e:	68 81       	ld	r22, Y
    9c40:	c3 5b       	subi	r28, 0xB3	; 179
    9c42:	d0 40       	sbci	r29, 0x00	; 0
    9c44:	70 e0       	ldi	r23, 0x00	; 0
    9c46:	40 e0       	ldi	r20, 0x00	; 0
    9c48:	90 e0       	ldi	r25, 0x00	; 0
    9c4a:	f9 01       	movw	r30, r18
    9c4c:	19 95       	eicall
    9c4e:	cf 54       	subi	r28, 0x4F	; 79
    9c50:	df 4f       	sbci	r29, 0xFF	; 255
    9c52:	88 83       	st	Y, r24
    9c54:	c1 5b       	subi	r28, 0xB1	; 177
    9c56:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2084
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
    9c58:	f2 01       	movw	r30, r4
    9c5a:	e6 5c       	subi	r30, 0xC6	; 198
    9c5c:	fd 4f       	sbci	r31, 0xFD	; 253
    9c5e:	e6 0d       	add	r30, r6
    9c60:	f7 1d       	adc	r31, r7
    9c62:	44 91       	lpm	r20, Z
    9c64:	c2 01       	movw	r24, r4
    9c66:	88 5c       	subi	r24, 0xC8	; 200
    9c68:	9d 4f       	sbci	r25, 0xFD	; 253
    9c6a:	93 01       	movw	r18, r6
    9c6c:	28 0f       	add	r18, r24
    9c6e:	39 1f       	adc	r19, r25
    9c70:	c3 53       	subi	r28, 0x33	; 51
    9c72:	df 4f       	sbci	r29, 0xFF	; 255
    9c74:	39 83       	std	Y+1, r19	; 0x01
    9c76:	28 83       	st	Y, r18
    9c78:	cd 5c       	subi	r28, 0xCD	; 205
    9c7a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2085
      if (slider_active != MENU_SLIDER_OFF)
    9c7c:	4f 3f       	cpi	r20, 0xFF	; 255
    9c7e:	99 f0       	breq	.+38     	; 0x9ca6 <draw_menu(bool)+0x2260>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2086
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
    9c80:	f9 01       	movw	r30, r18
    9c82:	24 91       	lpm	r18, Z
    9c84:	f2 01       	movw	r30, r4
    9c86:	e7 5c       	subi	r30, 0xC7	; 199
    9c88:	fd 4f       	sbci	r31, 0xFD	; 253
    9c8a:	e6 0d       	add	r30, r6
    9c8c:	f7 1d       	adc	r31, r7
    9c8e:	e4 91       	lpm	r30, Z
    9c90:	2e 9f       	mul	r18, r30
    9c92:	20 2d       	mov	r18, r0
    9c94:	11 24       	eor	r1, r1
    9c96:	be 01       	movw	r22, r28
    9c98:	6f 54       	subi	r22, 0x4F	; 79
    9c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    9c9c:	ce 01       	movw	r24, r28
    9c9e:	8e 54       	subi	r24, 0x4E	; 78
    9ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    9ca2:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    9ca6:	ce 54       	subi	r28, 0x4E	; 78
    9ca8:	df 4f       	sbci	r29, 0xFF	; 255
    9caa:	88 80       	ld	r8, Y
    9cac:	c2 5b       	subi	r28, 0xB2	; 178
    9cae:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2087
      while (loop_i < loop_cnt)
    9cb0:	cf 54       	subi	r28, 0x4F	; 79
    9cb2:	df 4f       	sbci	r29, 0xFF	; 255
    9cb4:	28 80       	ld	r2, Y
    9cb6:	c1 5b       	subi	r28, 0xB1	; 177
    9cb8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2089
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    9cba:	c2 01       	movw	r24, r4
    9cbc:	89 5c       	subi	r24, 0xC9	; 201
    9cbe:	9d 4f       	sbci	r25, 0xFD	; 253
    9cc0:	93 01       	movw	r18, r6
    9cc2:	28 0f       	add	r18, r24
    9cc4:	39 1f       	adc	r19, r25
    9cc6:	c4 54       	subi	r28, 0x44	; 68
    9cc8:	df 4f       	sbci	r29, 0xFF	; 255
    9cca:	39 83       	std	Y+1, r19	; 0x01
    9ccc:	28 83       	st	Y, r18
    9cce:	cc 5b       	subi	r28, 0xBC	; 188
    9cd0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2091
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    9cd2:	62 01       	movw	r12, r4
    9cd4:	39 ed       	ldi	r19, 0xD9	; 217
    9cd6:	c3 1a       	sub	r12, r19
    9cd8:	3d ef       	ldi	r19, 0xFD	; 253
    9cda:	d3 0a       	sbc	r13, r19
    9cdc:	c6 0c       	add	r12, r6
    9cde:	d7 1c       	adc	r13, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2092
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    9ce0:	52 01       	movw	r10, r4
    9ce2:	47 ed       	ldi	r20, 0xD7	; 215
    9ce4:	a4 1a       	sub	r10, r20
    9ce6:	4d ef       	ldi	r20, 0xFD	; 253
    9ce8:	b4 0a       	sbc	r11, r20
    9cea:	a6 0c       	add	r10, r6
    9cec:	b7 1c       	adc	r11, r7
    9cee:	01 97       	sbiw	r24, 0x01	; 1
    9cf0:	b3 01       	movw	r22, r6
    9cf2:	68 0f       	add	r22, r24
    9cf4:	79 1f       	adc	r23, r25
    9cf6:	c8 53       	subi	r28, 0x38	; 56
    9cf8:	df 4f       	sbci	r29, 0xFF	; 255
    9cfa:	79 83       	std	Y+1, r23	; 0x01
    9cfc:	68 83       	st	Y, r22
    9cfe:	c8 5c       	subi	r28, 0xC8	; 200
    9d00:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2098
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9d02:	01 97       	sbiw	r24, 0x01	; 1
    9d04:	f3 01       	movw	r30, r6
    9d06:	e8 0f       	add	r30, r24
    9d08:	f9 1f       	adc	r31, r25
    9d0a:	c6 53       	subi	r28, 0x36	; 54
    9d0c:	df 4f       	sbci	r29, 0xFF	; 255
    9d0e:	f9 83       	std	Y+1, r31	; 0x01
    9d10:	e8 83       	st	Y, r30
    9d12:	ca 5c       	subi	r28, 0xCA	; 202
    9d14:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2112
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    9d16:	08 97       	sbiw	r24, 0x08	; 8
    9d18:	93 01       	movw	r18, r6
    9d1a:	28 0f       	add	r18, r24
    9d1c:	39 1f       	adc	r19, r25
    9d1e:	c1 53       	subi	r28, 0x31	; 49
    9d20:	df 4f       	sbci	r29, 0xFF	; 255
    9d22:	39 83       	std	Y+1, r19	; 0x01
    9d24:	28 83       	st	Y, r18
    9d26:	cf 5c       	subi	r28, 0xCF	; 207
    9d28:	d0 40       	sbci	r29, 0x00	; 0
    9d2a:	02 97       	sbiw	r24, 0x02	; 2
    9d2c:	a3 01       	movw	r20, r6
    9d2e:	48 0f       	add	r20, r24
    9d30:	59 1f       	adc	r21, r25
    9d32:	ce 52       	subi	r28, 0x2E	; 46
    9d34:	df 4f       	sbci	r29, 0xFF	; 255
    9d36:	59 83       	std	Y+1, r21	; 0x01
    9d38:	48 83       	st	Y, r20
    9d3a:	c2 5d       	subi	r28, 0xD2	; 210
    9d3c:	d0 40       	sbci	r29, 0x00	; 0
    9d3e:	31 2c       	mov	r3, r1
    9d40:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2087
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
    9d42:	82 14       	cp	r8, r2
    9d44:	08 f0       	brcs	.+2      	; 0x9d48 <draw_menu(bool)+0x2302>
    9d46:	11 c1       	rjmp	.+546    	; 0x9f6a <draw_menu(bool)+0x2524>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2089
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    9d48:	c4 54       	subi	r28, 0x44	; 68
    9d4a:	df 4f       	sbci	r29, 0xFF	; 255
    9d4c:	e8 81       	ld	r30, Y
    9d4e:	f9 81       	ldd	r31, Y+1	; 0x01
    9d50:	cc 5b       	subi	r28, 0xBC	; 188
    9d52:	d0 40       	sbci	r29, 0x00	; 0
    9d54:	84 91       	lpm	r24, Z
    9d56:	81 11       	cpse	r24, r1
    9d58:	2f c0       	rjmp	.+94     	; 0x9db8 <draw_menu(bool)+0x2372>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2091
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    9d5a:	f6 01       	movw	r30, r12
    9d5c:	85 91       	lpm	r24, Z+
    9d5e:	94 91       	lpm	r25, Z
    9d60:	c8 54       	subi	r28, 0x48	; 72
    9d62:	df 4f       	sbci	r29, 0xFF	; 255
    9d64:	28 81       	ld	r18, Y
    9d66:	39 81       	ldd	r19, Y+1	; 0x01
    9d68:	c8 5b       	subi	r28, 0xB8	; 184
    9d6a:	d0 40       	sbci	r29, 0x00	; 0
    9d6c:	28 0f       	add	r18, r24
    9d6e:	39 1f       	adc	r19, r25
    9d70:	c2 54       	subi	r28, 0x42	; 66
    9d72:	df 4f       	sbci	r29, 0xFF	; 255
    9d74:	39 83       	std	Y+1, r19	; 0x01
    9d76:	28 83       	st	Y, r18
    9d78:	ce 5b       	subi	r28, 0xBE	; 190
    9d7a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2092
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    9d7c:	f5 01       	movw	r30, r10
    9d7e:	85 91       	lpm	r24, Z+
    9d80:	94 91       	lpm	r25, Z
    9d82:	c8 53       	subi	r28, 0x38	; 56
    9d84:	df 4f       	sbci	r29, 0xFF	; 255
    9d86:	e8 81       	ld	r30, Y
    9d88:	f9 81       	ldd	r31, Y+1	; 0x01
    9d8a:	c8 5c       	subi	r28, 0xC8	; 200
    9d8c:	d0 40       	sbci	r29, 0x00	; 0
    9d8e:	24 91       	lpm	r18, Z
    9d90:	c6 54       	subi	r28, 0x46	; 70
    9d92:	df 4f       	sbci	r29, 0xFF	; 255
    9d94:	48 81       	ld	r20, Y
    9d96:	59 81       	ldd	r21, Y+1	; 0x01
    9d98:	ca 5b       	subi	r28, 0xBA	; 186
    9d9a:	d0 40       	sbci	r29, 0x00	; 0
    9d9c:	84 0f       	add	r24, r20
    9d9e:	95 1f       	adc	r25, r21
    9da0:	bc 01       	movw	r22, r24
    9da2:	29 9d       	mul	r18, r9
    9da4:	60 0d       	add	r22, r0
    9da6:	71 1d       	adc	r23, r1
    9da8:	11 24       	eor	r1, r1
    9daa:	c0 54       	subi	r28, 0x40	; 64
    9dac:	df 4f       	sbci	r29, 0xFF	; 255
    9dae:	79 83       	std	Y+1, r23	; 0x01
    9db0:	68 83       	st	Y, r22
    9db2:	c0 5c       	subi	r28, 0xC0	; 192
    9db4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2093
          loop_t++;
    9db6:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2095
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    9db8:	c4 54       	subi	r28, 0x44	; 68
    9dba:	df 4f       	sbci	r29, 0xFF	; 255
    9dbc:	e8 81       	ld	r30, Y
    9dbe:	f9 81       	ldd	r31, Y+1	; 0x01
    9dc0:	cc 5b       	subi	r28, 0xBC	; 188
    9dc2:	d0 40       	sbci	r29, 0x00	; 0
    9dc4:	84 91       	lpm	r24, Z
    9dc6:	81 30       	cpi	r24, 0x01	; 1
    9dc8:	79 f5       	brne	.+94     	; 0x9e28 <draw_menu(bool)+0x23e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2097
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    9dca:	f5 01       	movw	r30, r10
    9dcc:	85 91       	lpm	r24, Z+
    9dce:	94 91       	lpm	r25, Z
    9dd0:	c6 54       	subi	r28, 0x46	; 70
    9dd2:	df 4f       	sbci	r29, 0xFF	; 255
    9dd4:	28 81       	ld	r18, Y
    9dd6:	39 81       	ldd	r19, Y+1	; 0x01
    9dd8:	ca 5b       	subi	r28, 0xBA	; 186
    9dda:	d0 40       	sbci	r29, 0x00	; 0
    9ddc:	28 0f       	add	r18, r24
    9dde:	39 1f       	adc	r19, r25
    9de0:	c0 54       	subi	r28, 0x40	; 64
    9de2:	df 4f       	sbci	r29, 0xFF	; 255
    9de4:	39 83       	std	Y+1, r19	; 0x01
    9de6:	28 83       	st	Y, r18
    9de8:	c0 5c       	subi	r28, 0xC0	; 192
    9dea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2098
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9dec:	f6 01       	movw	r30, r12
    9dee:	85 91       	lpm	r24, Z+
    9df0:	94 91       	lpm	r25, Z
    9df2:	c6 53       	subi	r28, 0x36	; 54
    9df4:	df 4f       	sbci	r29, 0xFF	; 255
    9df6:	e8 81       	ld	r30, Y
    9df8:	f9 81       	ldd	r31, Y+1	; 0x01
    9dfa:	ca 5c       	subi	r28, 0xCA	; 202
    9dfc:	d0 40       	sbci	r29, 0x00	; 0
    9dfe:	24 91       	lpm	r18, Z
    9e00:	c8 54       	subi	r28, 0x48	; 72
    9e02:	df 4f       	sbci	r29, 0xFF	; 255
    9e04:	48 81       	ld	r20, Y
    9e06:	59 81       	ldd	r21, Y+1	; 0x01
    9e08:	c8 5b       	subi	r28, 0xB8	; 184
    9e0a:	d0 40       	sbci	r29, 0x00	; 0
    9e0c:	84 0f       	add	r24, r20
    9e0e:	95 1f       	adc	r25, r21
    9e10:	bc 01       	movw	r22, r24
    9e12:	29 9d       	mul	r18, r9
    9e14:	60 0d       	add	r22, r0
    9e16:	71 1d       	adc	r23, r1
    9e18:	11 24       	eor	r1, r1
    9e1a:	c2 54       	subi	r28, 0x42	; 66
    9e1c:	df 4f       	sbci	r29, 0xFF	; 255
    9e1e:	79 83       	std	Y+1, r23	; 0x01
    9e20:	68 83       	st	Y, r22
    9e22:	ce 5b       	subi	r28, 0xBE	; 190
    9e24:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2099
          loop_t++;
    9e26:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2101
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
    9e28:	c4 54       	subi	r28, 0x44	; 68
    9e2a:	df 4f       	sbci	r29, 0xFF	; 255
    9e2c:	e8 81       	ld	r30, Y
    9e2e:	f9 81       	ldd	r31, Y+1	; 0x01
    9e30:	cc 5b       	subi	r28, 0xBC	; 188
    9e32:	d0 40       	sbci	r29, 0x00	; 0
    9e34:	84 91       	lpm	r24, Z
    9e36:	82 30       	cpi	r24, 0x02	; 2
    9e38:	09 f0       	breq	.+2      	; 0x9e3c <draw_menu(bool)+0x23f6>
    9e3a:	46 c0       	rjmp	.+140    	; 0x9ec8 <draw_menu(bool)+0x2482>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2103
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9e3c:	f6 01       	movw	r30, r12
    9e3e:	85 91       	lpm	r24, Z+
    9e40:	94 91       	lpm	r25, Z
    9e42:	c6 53       	subi	r28, 0x36	; 54
    9e44:	df 4f       	sbci	r29, 0xFF	; 255
    9e46:	e8 81       	ld	r30, Y
    9e48:	f9 81       	ldd	r31, Y+1	; 0x01
    9e4a:	ca 5c       	subi	r28, 0xCA	; 202
    9e4c:	d0 40       	sbci	r29, 0x00	; 0
    9e4e:	24 91       	lpm	r18, Z
    9e50:	c8 54       	subi	r28, 0x48	; 72
    9e52:	df 4f       	sbci	r29, 0xFF	; 255
    9e54:	48 81       	ld	r20, Y
    9e56:	59 81       	ldd	r21, Y+1	; 0x01
    9e58:	c8 5b       	subi	r28, 0xB8	; 184
    9e5a:	d0 40       	sbci	r29, 0x00	; 0
    9e5c:	84 0f       	add	r24, r20
    9e5e:	95 1f       	adc	r25, r21
    9e60:	bc 01       	movw	r22, r24
    9e62:	29 9d       	mul	r18, r9
    9e64:	60 0d       	add	r22, r0
    9e66:	71 1d       	adc	r23, r1
    9e68:	11 24       	eor	r1, r1
    9e6a:	c2 54       	subi	r28, 0x42	; 66
    9e6c:	df 4f       	sbci	r29, 0xFF	; 255
    9e6e:	79 83       	std	Y+1, r23	; 0x01
    9e70:	68 83       	st	Y, r22
    9e72:	ce 5b       	subi	r28, 0xBE	; 190
    9e74:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2104
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
    9e76:	f5 01       	movw	r30, r10
    9e78:	85 91       	lpm	r24, Z+
    9e7a:	94 91       	lpm	r25, Z
    9e7c:	c8 53       	subi	r28, 0x38	; 56
    9e7e:	df 4f       	sbci	r29, 0xFF	; 255
    9e80:	e8 81       	ld	r30, Y
    9e82:	f9 81       	ldd	r31, Y+1	; 0x01
    9e84:	c8 5c       	subi	r28, 0xC8	; 200
    9e86:	d0 40       	sbci	r29, 0x00	; 0
    9e88:	24 91       	lpm	r18, Z
    9e8a:	c6 54       	subi	r28, 0x46	; 70
    9e8c:	df 4f       	sbci	r29, 0xFF	; 255
    9e8e:	48 81       	ld	r20, Y
    9e90:	59 81       	ldd	r21, Y+1	; 0x01
    9e92:	ca 5b       	subi	r28, 0xBA	; 186
    9e94:	d0 40       	sbci	r29, 0x00	; 0
    9e96:	84 0f       	add	r24, r20
    9e98:	95 1f       	adc	r25, r21
    9e9a:	bc 01       	movw	r22, r24
    9e9c:	23 9d       	mul	r18, r3
    9e9e:	60 0d       	add	r22, r0
    9ea0:	71 1d       	adc	r23, r1
    9ea2:	11 24       	eor	r1, r1
    9ea4:	c0 54       	subi	r28, 0x40	; 64
    9ea6:	df 4f       	sbci	r29, 0xFF	; 255
    9ea8:	79 83       	std	Y+1, r23	; 0x01
    9eaa:	68 83       	st	Y, r22
    9eac:	c0 5c       	subi	r28, 0xC0	; 192
    9eae:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2105
          loop_t++;
    9eb0:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2106
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
    9eb2:	c3 53       	subi	r28, 0x33	; 51
    9eb4:	df 4f       	sbci	r29, 0xFF	; 255
    9eb6:	e8 81       	ld	r30, Y
    9eb8:	f9 81       	ldd	r31, Y+1	; 0x01
    9eba:	cd 5c       	subi	r28, 0xCD	; 205
    9ebc:	d0 40       	sbci	r29, 0x00	; 0
    9ebe:	84 91       	lpm	r24, Z
    9ec0:	98 16       	cp	r9, r24
    9ec2:	10 f0       	brcs	.+4      	; 0x9ec8 <draw_menu(bool)+0x2482>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2109
          {
            loop_t = 0;
            loop_r++;
    9ec4:	33 94       	inc	r3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2108
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
          {
            loop_t = 0;
    9ec6:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2112
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    9ec8:	c1 53       	subi	r28, 0x31	; 49
    9eca:	df 4f       	sbci	r29, 0xFF	; 255
    9ecc:	e8 81       	ld	r30, Y
    9ece:	f9 81       	ldd	r31, Y+1	; 0x01
    9ed0:	cf 5c       	subi	r28, 0xCF	; 207
    9ed2:	d0 40       	sbci	r29, 0x00	; 0
    9ed4:	25 91       	lpm	r18, Z+
    9ed6:	34 91       	lpm	r19, Z
    9ed8:	ce 52       	subi	r28, 0x2E	; 46
    9eda:	df 4f       	sbci	r29, 0xFF	; 255
    9edc:	e8 81       	ld	r30, Y
    9ede:	f9 81       	ldd	r31, Y+1	; 0x01
    9ee0:	c2 5d       	subi	r28, 0xD2	; 210
    9ee2:	d0 40       	sbci	r29, 0x00	; 0
    9ee4:	45 91       	lpm	r20, Z+
    9ee6:	54 91       	lpm	r21, Z
    9ee8:	ca 53       	subi	r28, 0x3A	; 58
    9eea:	df 4f       	sbci	r29, 0xFF	; 255
    9eec:	e8 80       	ld	r14, Y
    9eee:	f9 80       	ldd	r15, Y+1	; 0x01
    9ef0:	c6 5c       	subi	r28, 0xC6	; 198
    9ef2:	d0 40       	sbci	r29, 0x00	; 0
    9ef4:	cc 53       	subi	r28, 0x3C	; 60
    9ef6:	df 4f       	sbci	r29, 0xFF	; 255
    9ef8:	08 81       	ld	r16, Y
    9efa:	19 81       	ldd	r17, Y+1	; 0x01
    9efc:	c4 5c       	subi	r28, 0xC4	; 196
    9efe:	d0 40       	sbci	r29, 0x00	; 0
    9f00:	c0 54       	subi	r28, 0x40	; 64
    9f02:	df 4f       	sbci	r29, 0xFF	; 255
    9f04:	68 81       	ld	r22, Y
    9f06:	79 81       	ldd	r23, Y+1	; 0x01
    9f08:	c0 5c       	subi	r28, 0xC0	; 192
    9f0a:	d0 40       	sbci	r29, 0x00	; 0
    9f0c:	c2 54       	subi	r28, 0x42	; 66
    9f0e:	df 4f       	sbci	r29, 0xFF	; 255
    9f10:	88 81       	ld	r24, Y
    9f12:	99 81       	ldd	r25, Y+1	; 0x01
    9f14:	ce 5b       	subi	r28, 0xBE	; 190
    9f16:	d0 40       	sbci	r29, 0x00	; 0
    9f18:	0e 94 b8 24 	call	0x4970	; 0x4970 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    9f1c:	18 2f       	mov	r17, r24
    9f1e:	81 e0       	ldi	r24, 0x01	; 1
    9f20:	88 0d       	add	r24, r8
    9f22:	11 23       	and	r17, r17
    9f24:	71 f1       	breq	.+92     	; 0x9f82 <draw_menu(bool)+0x253c>
    9f26:	ce 54       	subi	r28, 0x4E	; 78
    9f28:	df 4f       	sbci	r29, 0xFF	; 255
    9f2a:	88 82       	st	Y, r8
    9f2c:	c2 5b       	subi	r28, 0xB2	; 178
    9f2e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2114
        {
          fntargs =  pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
    9f30:	f2 01       	movw	r30, r4
    9f32:	e2 5c       	subi	r30, 0xC2	; 194
    9f34:	fd 4f       	sbci	r31, 0xFD	; 253
    9f36:	e6 0d       	add	r30, r6
    9f38:	f7 1d       	adc	r31, r7
    9f3a:	25 91       	lpm	r18, Z+
    9f3c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2115
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    9f3e:	ce 53       	subi	r28, 0x3E	; 62
    9f40:	df 4f       	sbci	r29, 0xFF	; 255
    9f42:	e8 81       	ld	r30, Y
    9f44:	f9 81       	ldd	r31, Y+1	; 0x01
    9f46:	c2 5c       	subi	r28, 0xC2	; 194
    9f48:	d0 40       	sbci	r29, 0x00	; 0
    9f4a:	84 91       	lpm	r24, Z
    9f4c:	cd 54       	subi	r28, 0x4D	; 77
    9f4e:	df 4f       	sbci	r29, 0xFF	; 255
    9f50:	68 81       	ld	r22, Y
    9f52:	c3 5b       	subi	r28, 0xB3	; 179
    9f54:	d0 40       	sbci	r29, 0x00	; 0
    9f56:	70 e0       	ldi	r23, 0x00	; 0
    9f58:	48 2d       	mov	r20, r8
    9f5a:	90 e0       	ldi	r25, 0x00	; 0
    9f5c:	f9 01       	movw	r30, r18
    9f5e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2116
          ret = true;
    9f60:	c4 53       	subi	r28, 0x34	; 52
    9f62:	df 4f       	sbci	r29, 0xFF	; 255
    9f64:	18 83       	st	Y, r17
    9f66:	cc 5c       	subi	r28, 0xCC	; 204
    9f68:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2027
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    9f6a:	ca 54       	subi	r28, 0x4A	; 74
    9f6c:	df 4f       	sbci	r29, 0xFF	; 255
    9f6e:	f8 81       	ld	r31, Y
    9f70:	c6 5b       	subi	r28, 0xB6	; 182
    9f72:	d0 40       	sbci	r29, 0x00	; 0
    9f74:	ff 5f       	subi	r31, 0xFF	; 255
    9f76:	ca 54       	subi	r28, 0x4A	; 74
    9f78:	df 4f       	sbci	r29, 0xFF	; 255
    9f7a:	f8 83       	st	Y, r31
    9f7c:	c6 5b       	subi	r28, 0xB6	; 182
    9f7e:	d0 40       	sbci	r29, 0x00	; 0
    9f80:	c8 cb       	rjmp	.-2160   	; 0x9712 <draw_menu(bool)+0x1ccc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2112
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    9f82:	88 2e       	mov	r8, r24
    9f84:	de ce       	rjmp	.-580    	; 0x9d42 <draw_menu(bool)+0x22fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2116
        {
          fntargs =  pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
          ret = true;
    9f86:	21 e0       	ldi	r18, 0x01	; 1
    9f88:	c4 53       	subi	r28, 0x34	; 52
    9f8a:	df 4f       	sbci	r29, 0xFF	; 255
    9f8c:	28 83       	st	Y, r18
    9f8e:	cc 5c       	subi	r28, 0xCC	; 204
    9f90:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2127
  }


draw_menu_end:
  return ret;
}
    9f92:	c4 53       	subi	r28, 0x34	; 52
    9f94:	df 4f       	sbci	r29, 0xFF	; 255
    9f96:	88 81       	ld	r24, Y
    9f98:	cc 5c       	subi	r28, 0xCC	; 204
    9f9a:	d0 40       	sbci	r29, 0x00	; 0
    9f9c:	cd 51       	subi	r28, 0x1D	; 29
    9f9e:	df 4f       	sbci	r29, 0xFF	; 255
    9fa0:	0f b6       	in	r0, 0x3f	; 63
    9fa2:	f8 94       	cli
    9fa4:	de bf       	out	0x3e, r29	; 62
    9fa6:	0f be       	out	0x3f, r0	; 63
    9fa8:	cd bf       	out	0x3d, r28	; 61
    9faa:	df 91       	pop	r29
    9fac:	cf 91       	pop	r28
    9fae:	1f 91       	pop	r17
    9fb0:	0f 91       	pop	r16
    9fb2:	ff 90       	pop	r15
    9fb4:	ef 90       	pop	r14
    9fb6:	df 90       	pop	r13
    9fb8:	cf 90       	pop	r12
    9fba:	bf 90       	pop	r11
    9fbc:	af 90       	pop	r10
    9fbe:	9f 90       	pop	r9
    9fc0:	8f 90       	pop	r8
    9fc2:	7f 90       	pop	r7
    9fc4:	6f 90       	pop	r6
    9fc6:	5f 90       	pop	r5
    9fc8:	4f 90       	pop	r4
    9fca:	3f 90       	pop	r3
    9fcc:	2f 90       	pop	r2
    9fce:	08 95       	ret

00009fd0 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:371
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
    9fd0:	2d e4       	ldi	r18, 0x4D	; 77
    9fd2:	82 9f       	mul	r24, r18
    9fd4:	c0 01       	movw	r24, r0
    9fd6:	11 24       	eor	r1, r1
    9fd8:	26 e0       	ldi	r18, 0x06	; 6
    9fda:	62 9f       	mul	r22, r18
    9fdc:	80 0d       	add	r24, r0
    9fde:	91 1d       	adc	r25, r1
    9fe0:	11 24       	eor	r1, r1
    9fe2:	64 2f       	mov	r22, r20
    9fe4:	8e 50       	subi	r24, 0x0E	; 14
    9fe6:	9e 4f       	sbci	r25, 0xFE	; 254
    9fe8:	0c 94 5e 96 	jmp	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

00009fec <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:330
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
  return ret;
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
    9fec:	1f 93       	push	r17
    9fee:	cf 93       	push	r28
    9ff0:	df 93       	push	r29
    9ff2:	14 2f       	mov	r17, r20
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
    9ff4:	9d e4       	ldi	r25, 0x4D	; 77
    9ff6:	89 9f       	mul	r24, r25
    9ff8:	e0 01       	movw	r28, r0
    9ffa:	11 24       	eor	r1, r1
    9ffc:	cf 50       	subi	r28, 0x0F	; 15
    9ffe:	de 4f       	sbci	r29, 0xFE	; 254
    a000:	86 e0       	ldi	r24, 0x06	; 6
    a002:	68 9f       	mul	r22, r24
    a004:	c0 0d       	add	r28, r0
    a006:	d1 1d       	adc	r29, r1
    a008:	11 24       	eor	r1, r1
    a00a:	65 2f       	mov	r22, r21
    a00c:	ce 01       	movw	r24, r28
    a00e:	05 96       	adiw	r24, 0x05	; 5
    a010:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    a014:	61 2f       	mov	r22, r17
    a016:	ce 01       	movw	r24, r28
    a018:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:333
}
    a01a:	df 91       	pop	r29
    a01c:	cf 91       	pop	r28
    a01e:	1f 91       	pop	r17
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    a020:	0c 94 5e 96 	jmp	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a024 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:312
  *stop_min = (stop & 0b00000011) * 15;
  *active = start & 0b00000001;
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
    a024:	cf 92       	push	r12
    a026:	ef 92       	push	r14
    a028:	0f 93       	push	r16
    a02a:	1f 93       	push	r17
    a02c:	cf 93       	push	r28
    a02e:	df 93       	push	r29
    a030:	c8 2f       	mov	r28, r24
    a032:	56 2f       	mov	r21, r22
    a034:	8e 2d       	mov	r24, r14
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
    a036:	3f e0       	ldi	r19, 0x0F	; 15
    a038:	63 2f       	mov	r22, r19
    a03a:	0e 94 a2 b5 	call	0x16b44	; 0x16b44 <__udivmodqi4>
    a03e:	83 70       	andi	r24, 0x03	; 3
    a040:	98 e0       	ldi	r25, 0x08	; 8
    a042:	09 9f       	mul	r16, r25
    a044:	80 01       	movw	r16, r0
    a046:	11 24       	eor	r1, r1
    a048:	08 0f       	add	r16, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    a04a:	8d e4       	ldi	r24, 0x4D	; 77
    a04c:	c8 9f       	mul	r28, r24
    a04e:	e0 01       	movw	r28, r0
    a050:	11 24       	eor	r1, r1
    a052:	cf 50       	subi	r28, 0x0F	; 15
    a054:	de 4f       	sbci	r29, 0xFE	; 254
    a056:	96 e0       	ldi	r25, 0x06	; 6
    a058:	59 9f       	mul	r21, r25
    a05a:	c0 0d       	add	r28, r0
    a05c:	d1 1d       	adc	r29, r1
    a05e:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
    a060:	82 2f       	mov	r24, r18
    a062:	0e 94 a2 b5 	call	0x16b44	; 0x16b44 <__udivmodqi4>
    a066:	68 2f       	mov	r22, r24
    a068:	66 0f       	add	r22, r22
    a06a:	66 70       	andi	r22, 0x06	; 6
    a06c:	88 e0       	ldi	r24, 0x08	; 8
    a06e:	48 9f       	mul	r20, r24
    a070:	a0 01       	movw	r20, r0
    a072:	11 24       	eor	r1, r1
    a074:	9c 2d       	mov	r25, r12
    a076:	91 70       	andi	r25, 0x01	; 1
    a078:	c9 2e       	mov	r12, r25
    a07a:	c4 0e       	add	r12, r20
    a07c:	6c 0d       	add	r22, r12
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    a07e:	ce 01       	movw	r24, r28
    a080:	02 96       	adiw	r24, 0x02	; 2
    a082:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    a086:	60 2f       	mov	r22, r16
    a088:	ce 01       	movw	r24, r28
    a08a:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:318
}
    a08c:	df 91       	pop	r29
    a08e:	cf 91       	pop	r28
    a090:	1f 91       	pop	r17
    a092:	0f 91       	pop	r16
    a094:	ef 90       	pop	r14
    a096:	cf 90       	pop	r12
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    a098:	0c 94 5e 96 	jmp	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a09c <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:281
    if (t == 0) break;
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
    a09c:	ef 92       	push	r14
    a09e:	ff 92       	push	r15
    a0a0:	0f 93       	push	r16
    a0a2:	1f 93       	push	r17
    a0a4:	cf 93       	push	r28
    a0a6:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    a0a8:	9d e4       	ldi	r25, 0x4D	; 77
    a0aa:	89 9f       	mul	r24, r25
    a0ac:	80 01       	movw	r16, r0
    a0ae:	11 24       	eor	r1, r1
    a0b0:	eb 01       	movw	r28, r22
    a0b2:	78 01       	movw	r14, r16
    a0b4:	8c ec       	ldi	r24, 0xCC	; 204
    a0b6:	e8 1a       	sub	r14, r24
    a0b8:	8d ef       	ldi	r24, 0xFD	; 253
    a0ba:	f8 0a       	sbc	r15, r24
    a0bc:	02 5c       	subi	r16, 0xC2	; 194
    a0be:	1d 4f       	sbci	r17, 0xFD	; 253
    a0c0:	69 91       	ld	r22, Y+
    a0c2:	c7 01       	movw	r24, r14
    a0c4:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
    a0c8:	fe 01       	movw	r30, r28
    a0ca:	31 97       	sbiw	r30, 0x01	; 1
    a0cc:	80 81       	ld	r24, Z
    a0ce:	88 23       	and	r24, r24
    a0d0:	31 f0       	breq	.+12     	; 0xa0de <thermostat_program_set_name(unsigned char, char*)+0x42>
    a0d2:	9f ef       	ldi	r25, 0xFF	; 255
    a0d4:	e9 1a       	sub	r14, r25
    a0d6:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:282
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
    a0d8:	e0 16       	cp	r14, r16
    a0da:	f1 06       	cpc	r15, r17
    a0dc:	89 f7       	brne	.-30     	; 0xa0c0 <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
    a0de:	df 91       	pop	r29
    a0e0:	cf 91       	pop	r28
    a0e2:	1f 91       	pop	r17
    a0e4:	0f 91       	pop	r16
    a0e6:	ff 90       	pop	r15
    a0e8:	ef 90       	pop	r14
    a0ea:	08 95       	ret

0000a0ec <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:232
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
}

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
    a0ec:	ef 92       	push	r14
    a0ee:	ff 92       	push	r15
    a0f0:	0f 93       	push	r16
    a0f2:	1f 93       	push	r17
    a0f4:	cf 93       	push	r28
    a0f6:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
    a0f8:	e8 2e       	mov	r14, r24
    a0fa:	f1 2c       	mov	r15, r1
    a0fc:	91 e2       	ldi	r25, 0x21	; 33
    a0fe:	89 9f       	mul	r24, r25
    a100:	e0 01       	movw	r28, r0
    a102:	11 24       	eor	r1, r1
    a104:	87 01       	movw	r16, r14
    a106:	00 0f       	add	r16, r16
    a108:	11 1f       	adc	r17, r17
    a10a:	00 0f       	add	r16, r16
    a10c:	11 1f       	adc	r17, r17
    a10e:	f8 01       	movw	r30, r16
    a110:	eb 58       	subi	r30, 0x8B	; 139
    a112:	f6 4f       	sbci	r31, 0xF6	; 246
    a114:	40 81       	ld	r20, Z
    a116:	51 81       	ldd	r21, Z+1	; 0x01
    a118:	62 81       	ldd	r22, Z+2	; 0x02
    a11a:	73 81       	ldd	r23, Z+3	; 0x03
    a11c:	ce 01       	movw	r24, r28
    a11e:	80 5a       	subi	r24, 0xA0	; 160
    a120:	9e 4f       	sbci	r25, 0xFE	; 254
    a122:	0e 94 e1 96 	call	0x12dc2	; 0x12dc2 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
    a126:	f8 01       	movw	r30, r16
    a128:	e7 57       	subi	r30, 0x77	; 119
    a12a:	f6 4f       	sbci	r31, 0xF6	; 246
    a12c:	40 81       	ld	r20, Z
    a12e:	51 81       	ldd	r21, Z+1	; 0x01
    a130:	62 81       	ldd	r22, Z+2	; 0x02
    a132:	73 81       	ldd	r23, Z+3	; 0x03
    a134:	ce 01       	movw	r24, r28
    a136:	8c 59       	subi	r24, 0x9C	; 156
    a138:	9e 4f       	sbci	r25, 0xFE	; 254
    a13a:	0e 94 e1 96 	call	0x12dc2	; 0x12dc2 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
    a13e:	f8 01       	movw	r30, r16
    a140:	e3 56       	subi	r30, 0x63	; 99
    a142:	f6 4f       	sbci	r31, 0xF6	; 246
    a144:	40 81       	ld	r20, Z
    a146:	51 81       	ldd	r21, Z+1	; 0x01
    a148:	62 81       	ldd	r22, Z+2	; 0x02
    a14a:	73 81       	ldd	r23, Z+3	; 0x03
    a14c:	ce 01       	movw	r24, r28
    a14e:	88 59       	subi	r24, 0x98	; 152
    a150:	9e 4f       	sbci	r25, 0xFE	; 254
    a152:	0e 94 e1 96 	call	0x12dc2	; 0x12dc2 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    a156:	f7 01       	movw	r30, r14
    a158:	ef 54       	subi	r30, 0x4F	; 79
    a15a:	f6 4f       	sbci	r31, 0xF6	; 246
    a15c:	60 81       	ld	r22, Z
    a15e:	ce 01       	movw	r24, r28
    a160:	84 59       	subi	r24, 0x94	; 148
    a162:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:237
}
    a164:	df 91       	pop	r29
    a166:	cf 91       	pop	r28
    a168:	1f 91       	pop	r17
    a16a:	0f 91       	pop	r16
    a16c:	ff 90       	pop	r15
    a16e:	ef 90       	pop	r14
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    a170:	0c 94 5e 96 	jmp	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a174 <thermostat_ring_set_mode(unsigned char, unsigned char)>:
_Z24thermostat_ring_set_modehh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    a174:	21 e2       	ldi	r18, 0x21	; 33
    a176:	82 9f       	mul	r24, r18
    a178:	c0 01       	movw	r24, r0
    a17a:	11 24       	eor	r1, r1
    a17c:	82 5a       	subi	r24, 0xA2	; 162
    a17e:	9e 4f       	sbci	r25, 0xFE	; 254
    a180:	0c 94 5e 96 	jmp	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a184 <click_function_thermostat_set_mode(unsigned char, unsigned char, unsigned char)>:
_Z34click_function_thermostat_set_modehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5667
   args1 ... globalni argument z definice menu
   args2 ... zde je cislo ringu
   args3 ... id polozky menu
*/
void click_function_thermostat_set_mode(uint8_t args1, uint8_t args2, uint8_t args3)
{
    a184:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5668
  if (args3 == 0) thermostat_ring_set_mode(args2, TERM_MODE_OFF);
    a186:	60 e0       	ldi	r22, 0x00	; 0
    a188:	44 23       	and	r20, r20
    a18a:	61 f0       	breq	.+24     	; 0xa1a4 <click_function_thermostat_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5669
  if (args3 == 1) thermostat_ring_set_mode(args2, TERM_MODE_MAX);
    a18c:	61 e0       	ldi	r22, 0x01	; 1
    a18e:	41 30       	cpi	r20, 0x01	; 1
    a190:	49 f0       	breq	.+18     	; 0xa1a4 <click_function_thermostat_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5670
  if (args3 == 2) thermostat_ring_set_mode(args2, TERM_MODE_MIN);
    a192:	67 e0       	ldi	r22, 0x07	; 7
    a194:	42 30       	cpi	r20, 0x02	; 2
    a196:	31 f0       	breq	.+12     	; 0xa1a4 <click_function_thermostat_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5671
  if (args3 == 3) thermostat_ring_set_mode(args2, TERM_MODE_PROG);
    a198:	62 e0       	ldi	r22, 0x02	; 2
    a19a:	43 30       	cpi	r20, 0x03	; 3
    a19c:	19 f0       	breq	.+6      	; 0xa1a4 <click_function_thermostat_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5672
  if (args3 == 4) thermostat_ring_set_mode(args2, TERM_MODE_MAN);
    a19e:	44 30       	cpi	r20, 0x04	; 4
    a1a0:	19 f4       	brne	.+6      	; 0xa1a8 <click_function_thermostat_set_mode(unsigned char, unsigned char, unsigned char)+0x24>
    a1a2:	68 e0       	ldi	r22, 0x08	; 8
    a1a4:	0c 94 ba 50 	jmp	0xa174	; 0xa174 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5673
}
    a1a8:	08 95       	ret

0000a1aa <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:157
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
    a1aa:	1f 93       	push	r17
    a1ac:	cf 93       	push	r28
    a1ae:	df 93       	push	r29
    a1b0:	16 2f       	mov	r17, r22
    a1b2:	67 2f       	mov	r22, r23
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
    a1b4:	91 e2       	ldi	r25, 0x21	; 33
    a1b6:	89 9f       	mul	r24, r25
    a1b8:	e0 01       	movw	r28, r0
    a1ba:	11 24       	eor	r1, r1
    a1bc:	ce 01       	movw	r24, r28
    a1be:	8a 5a       	subi	r24, 0xAA	; 170
    a1c0:	9e 4f       	sbci	r25, 0xFE	; 254
    a1c2:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    a1c6:	61 2f       	mov	r22, r17
    a1c8:	ce 01       	movw	r24, r28
    a1ca:	89 5a       	subi	r24, 0xA9	; 169
    a1cc:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:160
}
    a1ce:	df 91       	pop	r29
    a1d0:	cf 91       	pop	r28
    a1d2:	1f 91       	pop	r17
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    a1d4:	0c 94 5e 96 	jmp	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a1d8 <helper_thermostat_set_mezni(int, unsigned char)>:
_Z27helper_thermostat_set_mezniih():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2259
/*
  args1 -- menu_dialog_set_variable_now, aktualni hodnota
  args2 -- menu_dialog_set_variable_args, id ringu
*/
void helper_thermostat_set_mezni(int args1, uint8_t args2)
{
    a1d8:	9c 01       	movw	r18, r24
    a1da:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2260
  thermostat_ring_set_mezni(args2, args1);
    a1dc:	b9 01       	movw	r22, r18
    a1de:	0c 94 d5 50 	jmp	0xa1aa	; 0xa1aa <thermostat_ring_set_mezni(unsigned char, int)>

0000a1e2 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:110
    name[i] = t;
    if (t == 0) break;
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
    a1e2:	df 92       	push	r13
    a1e4:	ef 92       	push	r14
    a1e6:	ff 92       	push	r15
    a1e8:	0f 93       	push	r16
    a1ea:	1f 93       	push	r17
    a1ec:	cf 93       	push	r28
    a1ee:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    a1f0:	91 e2       	ldi	r25, 0x21	; 33
    a1f2:	89 9f       	mul	r24, r25
    a1f4:	e0 01       	movw	r28, r0
    a1f6:	11 24       	eor	r1, r1
    a1f8:	7b 01       	movw	r14, r22
    a1fa:	8e 01       	movw	r16, r28
    a1fc:	04 5b       	subi	r16, 0xB4	; 180
    a1fe:	1e 4f       	sbci	r17, 0xFE	; 254
    a200:	cb 5a       	subi	r28, 0xAB	; 171
    a202:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    a204:	f7 01       	movw	r30, r14
    a206:	d1 90       	ld	r13, Z+
    a208:	7f 01       	movw	r14, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    a20a:	6d 2d       	mov	r22, r13
    a20c:	c8 01       	movw	r24, r16
    a20e:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
    a212:	dd 20       	and	r13, r13
    a214:	29 f0       	breq	.+10     	; 0xa220 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
    a216:	0f 5f       	subi	r16, 0xFF	; 255
    a218:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:112
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    a21a:	0c 17       	cp	r16, r28
    a21c:	1d 07       	cpc	r17, r29
    a21e:	91 f7       	brne	.-28     	; 0xa204 <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
    a220:	df 91       	pop	r29
    a222:	cf 91       	pop	r28
    a224:	1f 91       	pop	r17
    a226:	0f 91       	pop	r16
    a228:	ff 90       	pop	r15
    a22a:	ef 90       	pop	r14
    a22c:	df 90       	pop	r13
    a22e:	08 95       	ret

0000a230 <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
    a230:	8f 92       	push	r8
    a232:	9f 92       	push	r9
    a234:	af 92       	push	r10
    a236:	bf 92       	push	r11
    a238:	ef 92       	push	r14
    a23a:	ff 92       	push	r15
    a23c:	0f 93       	push	r16
    a23e:	1f 93       	push	r17
    a240:	cf 93       	push	r28
    a242:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    a244:	e8 2e       	mov	r14, r24
    a246:	f1 2c       	mov	r15, r1
    a248:	87 01       	movw	r16, r14
    a24a:	00 0f       	add	r16, r16
    a24c:	11 1f       	adc	r17, r17
    a24e:	00 0f       	add	r16, r16
    a250:	11 1f       	adc	r17, r17
    a252:	f8 01       	movw	r30, r16
    a254:	eb 58       	subi	r30, 0x8B	; 139
    a256:	f6 4f       	sbci	r31, 0xF6	; 246
    a258:	81 2c       	mov	r8, r1
    a25a:	91 2c       	mov	r9, r1
    a25c:	90 e8       	ldi	r25, 0x80	; 128
    a25e:	a9 2e       	mov	r10, r25
    a260:	9f e3       	ldi	r25, 0x3F	; 63
    a262:	b9 2e       	mov	r11, r25
    a264:	80 82       	st	Z, r8
    a266:	91 82       	std	Z+1, r9	; 0x01
    a268:	a2 82       	std	Z+2, r10	; 0x02
    a26a:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    a26c:	8c 2f       	mov	r24, r28
    a26e:	0e 94 97 22 	call	0x452e	; 0x452e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    a272:	8c 2f       	mov	r24, r28
    a274:	0e 94 76 50 	call	0xa0ec	; 0xa0ec <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    a278:	f8 01       	movw	r30, r16
    a27a:	e7 57       	subi	r30, 0x77	; 119
    a27c:	f6 4f       	sbci	r31, 0xF6	; 246
    a27e:	80 e0       	ldi	r24, 0x00	; 0
    a280:	90 e0       	ldi	r25, 0x00	; 0
    a282:	a0 e0       	ldi	r26, 0x00	; 0
    a284:	bf e3       	ldi	r27, 0x3F	; 63
    a286:	80 83       	st	Z, r24
    a288:	91 83       	std	Z+1, r25	; 0x01
    a28a:	a2 83       	std	Z+2, r26	; 0x02
    a28c:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    a28e:	8c 2f       	mov	r24, r28
    a290:	0e 94 97 22 	call	0x452e	; 0x452e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    a294:	8c 2f       	mov	r24, r28
    a296:	0e 94 76 50 	call	0xa0ec	; 0xa0ec <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    a29a:	f8 01       	movw	r30, r16
    a29c:	e3 56       	subi	r30, 0x63	; 99
    a29e:	f6 4f       	sbci	r31, 0xF6	; 246
    a2a0:	80 82       	st	Z, r8
    a2a2:	91 82       	std	Z+1, r9	; 0x01
    a2a4:	a2 82       	std	Z+2, r10	; 0x02
    a2a6:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    a2a8:	8c 2f       	mov	r24, r28
    a2aa:	0e 94 97 22 	call	0x452e	; 0x452e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    a2ae:	8c 2f       	mov	r24, r28
    a2b0:	0e 94 76 50 	call	0xa0ec	; 0xa0ec <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    a2b4:	f7 01       	movw	r30, r14
    a2b6:	ef 54       	subi	r30, 0x4F	; 79
    a2b8:	f6 4f       	sbci	r31, 0xF6	; 246
    a2ba:	8c e3       	ldi	r24, 0x3C	; 60
    a2bc:	80 83       	st	Z, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    a2be:	8c 2f       	mov	r24, r28
    a2c0:	0e 94 97 22 	call	0x452e	; 0x452e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    a2c4:	8c 2f       	mov	r24, r28
    a2c6:	0e 94 76 50 	call	0xa0ec	; 0xa0ec <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    a2ca:	81 e2       	ldi	r24, 0x21	; 33
    a2cc:	c8 9f       	mul	r28, r24
    a2ce:	80 01       	movw	r16, r0
    a2d0:	11 24       	eor	r1, r1
    a2d2:	6f ef       	ldi	r22, 0xFF	; 255
    a2d4:	c8 01       	movw	r24, r16
    a2d6:	84 5a       	subi	r24, 0xA4	; 164
    a2d8:	9e 4f       	sbci	r25, 0xFE	; 254
    a2da:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:424
  thermostat_ring_pid_set_kp(idx, 1);
  thermostat_ring_pid_set_ki(idx, 0.5);
  thermostat_ring_pid_set_kd(idx, 1);
  thermostat_ring_pid_set_time(idx, 60);
  thermostat_ring_set_asociate_tds(idx, 255);
  thermostat_ring_set_mezni(idx, 220);
    a2de:	6c ed       	ldi	r22, 0xDC	; 220
    a2e0:	70 e0       	ldi	r23, 0x00	; 0
    a2e2:	8c 2f       	mov	r24, r28
    a2e4:	0e 94 d5 50 	call	0xa1aa	; 0xa1aa <thermostat_ring_set_mezni(unsigned char, int)>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    a2e8:	6f ef       	ldi	r22, 0xFF	; 255
    a2ea:	c8 01       	movw	r24, r16
    a2ec:	85 5a       	subi	r24, 0xA5	; 165
    a2ee:	9e 4f       	sbci	r25, 0xFE	; 254
    a2f0:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
thermostat_ring_set_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    a2f4:	f7 01       	movw	r30, r14
    a2f6:	e3 5f       	subi	r30, 0xF3	; 243
    a2f8:	f5 4f       	sbci	r31, 0xF5	; 245
    a2fa:	10 82       	st	Z, r1
thermostat_ring_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    a2fc:	6f ef       	ldi	r22, 0xFF	; 255
    a2fe:	c8 01       	movw	r24, r16
    a300:	83 5a       	subi	r24, 0xA3	; 163
    a302:	9e 4f       	sbci	r25, 0xFE	; 254
    a304:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    a308:	6f ef       	ldi	r22, 0xFF	; 255
    a30a:	c8 01       	movw	r24, r16
    a30c:	81 5a       	subi	r24, 0xA1	; 161
    a30e:	9e 4f       	sbci	r25, 0xFE	; 254
    a310:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:430
  thermostat_ring_set_program_id(idx, PROG_FREE);
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
    a314:	60 e0       	ldi	r22, 0x00	; 0
    a316:	8c 2f       	mov	r24, r28
    a318:	0e 94 ba 50 	call	0xa174	; 0xa174 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_name(idx, "FREE");
    a31c:	6f e5       	ldi	r22, 0x5F	; 95
    a31e:	73 e0       	ldi	r23, 0x03	; 3
    a320:	8c 2f       	mov	r24, r28
    a322:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <thermostat_ring_set_name(unsigned char, char*)>
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    a326:	60 e0       	ldi	r22, 0x00	; 0
    a328:	c8 01       	movw	r24, r16
    a32a:	88 5a       	subi	r24, 0xA8	; 168
    a32c:	9e 4f       	sbci	r25, 0xFE	; 254
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
    a32e:	cf 91       	pop	r28
    a330:	1f 91       	pop	r17
    a332:	0f 91       	pop	r16
    a334:	ff 90       	pop	r15
    a336:	ef 90       	pop	r14
    a338:	bf 90       	pop	r11
    a33a:	af 90       	pop	r10
    a33c:	9f 90       	pop	r9
    a33e:	8f 90       	pop	r8
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    a340:	0c 94 5e 96 	jmp	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a344 <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:55
  }
  return ret;
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    a344:	af 92       	push	r10
    a346:	bf 92       	push	r11
    a348:	cf 92       	push	r12
    a34a:	df 92       	push	r13
    a34c:	ef 92       	push	r14
    a34e:	ff 92       	push	r15
    a350:	0f 93       	push	r16
    a352:	1f 93       	push	r17
    a354:	cf 93       	push	r28
    a356:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:56
  if (idx < HW_ONEWIRE_MAXROMS)
    a358:	86 30       	cpi	r24, 0x06	; 6
    a35a:	08 f0       	brcs	.+2      	; 0xa35e <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    a35c:	49 c0       	rjmp	.+146    	; 0xa3f0 <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
    a35e:	6b 01       	movw	r12, r22
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:58
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    a360:	96 e1       	ldi	r25, 0x16	; 22
    a362:	89 9f       	mul	r24, r25
    a364:	e0 01       	movw	r28, r0
    a366:	11 24       	eor	r1, r1
    a368:	f6 01       	movw	r30, r12
    a36a:	61 91       	ld	r22, Z+
    a36c:	7f 01       	movw	r14, r30
    a36e:	ce 01       	movw	r24, r28
    a370:	88 53       	subi	r24, 0x38	; 56
    a372:	9f 4f       	sbci	r25, 0xFF	; 255
    a374:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a378:	8e 01       	movw	r16, r28
    a37a:	07 53       	subi	r16, 0x37	; 55
    a37c:	1f 4f       	sbci	r17, 0xFF	; 255
    a37e:	5e 01       	movw	r10, r28
    a380:	f1 ed       	ldi	r31, 0xD1	; 209
    a382:	af 0e       	add	r10, r31
    a384:	b1 1c       	adc	r11, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:61
    for (uint8_t m = 0; m < 8; m++)
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    a386:	f7 01       	movw	r30, r14
    a388:	61 91       	ld	r22, Z+
    a38a:	7f 01       	movw	r14, r30
    a38c:	c8 01       	movw	r24, r16
    a38e:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:62
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    a392:	f7 01       	movw	r30, r14
    a394:	62 85       	ldd	r22, Z+10	; 0x0a
    a396:	c8 01       	movw	r24, r16
    a398:	0b 96       	adiw	r24, 0x0b	; 11
    a39a:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a39e:	0f 5f       	subi	r16, 0xFF	; 255
    a3a0:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:59
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    for (uint8_t m = 0; m < 8; m++)
    a3a2:	0a 15       	cp	r16, r10
    a3a4:	1b 05       	cpc	r17, r11
    a3a6:	79 f7       	brne	.-34     	; 0xa386 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:64
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    a3a8:	f6 01       	movw	r30, r12
    a3aa:	61 85       	ldd	r22, Z+9	; 0x09
    a3ac:	c8 01       	movw	r24, r16
    a3ae:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:65
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    a3b2:	f6 01       	movw	r30, r12
    a3b4:	63 85       	ldd	r22, Z+11	; 0x0b
    a3b6:	ce 01       	movw	r24, r28
    a3b8:	8e 52       	subi	r24, 0x2E	; 46
    a3ba:	9f 4f       	sbci	r25, 0xFF	; 255
    a3bc:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:66
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    a3c0:	f6 01       	movw	r30, r12
    a3c2:	62 85       	ldd	r22, Z+10	; 0x0a
    a3c4:	ce 01       	movw	r24, r28
    a3c6:	8d 52       	subi	r24, 0x2D	; 45
    a3c8:	9f 4f       	sbci	r25, 0xFF	; 255
    a3ca:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:67
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    a3ce:	f6 01       	movw	r30, r12
    a3d0:	64 89       	ldd	r22, Z+20	; 0x14
    a3d2:	ce 01       	movw	r24, r28
    a3d4:	84 52       	subi	r24, 0x24	; 36
    a3d6:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:69
  }
}
    a3d8:	df 91       	pop	r29
    a3da:	cf 91       	pop	r28
    a3dc:	1f 91       	pop	r17
    a3de:	0f 91       	pop	r16
    a3e0:	ff 90       	pop	r15
    a3e2:	ef 90       	pop	r14
    a3e4:	df 90       	pop	r13
    a3e6:	cf 90       	pop	r12
    a3e8:	bf 90       	pop	r11
    a3ea:	af 90       	pop	r10
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:67
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    a3ec:	0c 94 5e 96 	jmp	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:69
  }
}
    a3f0:	df 91       	pop	r29
    a3f2:	cf 91       	pop	r28
    a3f4:	1f 91       	pop	r17
    a3f6:	0f 91       	pop	r16
    a3f8:	ff 90       	pop	r15
    a3fa:	ef 90       	pop	r14
    a3fc:	df 90       	pop	r13
    a3fe:	cf 90       	pop	r12
    a400:	bf 90       	pop	r11
    a402:	af 90       	pop	r10
    a404:	08 95       	ret

0000a406 <device_set_name(char*)>:
_Z15device_set_namePc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:74
    }
  }
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
    a406:	ff 92       	push	r15
    a408:	0f 93       	push	r16
    a40a:	1f 93       	push	r17
    a40c:	cf 93       	push	r28
    a40e:	df 93       	push	r29
    a410:	8c 01       	movw	r16, r24
    a412:	d0 e0       	ldi	r29, 0x00	; 0
    a414:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:78
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    a416:	f8 01       	movw	r30, r16
    a418:	f1 90       	ld	r15, Z+
    a41a:	8f 01       	movw	r16, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:79
    EEPROM.write(device_nazev +  i, t);
    a41c:	6f 2d       	mov	r22, r15
    a41e:	ce 01       	movw	r24, r28
    a420:	8c 59       	subi	r24, 0x9C	; 156
    a422:	9f 4f       	sbci	r25, 0xFF	; 255
    a424:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:80
    if (t == 0)
    a428:	f1 10       	cpse	r15, r1
    a42a:	0b c0       	rjmp	.+22     	; 0xa442 <device_set_name(char*)+0x3c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:82
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    a42c:	60 e0       	ldi	r22, 0x00	; 0
    a42e:	ce 01       	movw	r24, r28
    a430:	8b 59       	subi	r24, 0x9B	; 155
    a432:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:86
      break;
    }
  }
}
    a434:	df 91       	pop	r29
    a436:	cf 91       	pop	r28
    a438:	1f 91       	pop	r17
    a43a:	0f 91       	pop	r16
    a43c:	ff 90       	pop	r15
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:82
  {
    t = name[i];
    EEPROM.write(device_nazev +  i, t);
    if (t == 0)
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    a43e:	0c 94 5e 96 	jmp	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a442:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:76
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    a444:	c9 30       	cpi	r28, 0x09	; 9
    a446:	d1 05       	cpc	r29, r1
    a448:	31 f7       	brne	.-52     	; 0xa416 <device_set_name(char*)+0x10>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:86
    {
      EEPROM.write(device_nazev +  i + 1, 0);
      break;
    }
  }
}
    a44a:	df 91       	pop	r29
    a44c:	cf 91       	pop	r28
    a44e:	1f 91       	pop	r17
    a450:	0f 91       	pop	r16
    a452:	ff 90       	pop	r15
    a454:	08 95       	ret

0000a456 <save_setup_network()>:
_Z18save_setup_networkv():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:41
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ulozi nastaveni site
void save_setup_network(void)
{
    a456:	ef 92       	push	r14
    a458:	ff 92       	push	r15
    a45a:	0f 93       	push	r16
    a45c:	1f 93       	push	r17
    a45e:	cf 93       	push	r28
    a460:	df 93       	push	r29
    a462:	0d e1       	ldi	r16, 0x1D	; 29
    a464:	1c e0       	ldi	r17, 0x0C	; 12
    a466:	ce e6       	ldi	r28, 0x6E	; 110
    a468:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:42
  for (uint8_t m = 0; m < 6; m++) EEPROM.write(device_mac + m, device.mac[m]);
    a46a:	f8 01       	movw	r30, r16
    a46c:	61 91       	ld	r22, Z+
    a46e:	8f 01       	movw	r16, r30
    a470:	ce 01       	movw	r24, r28
    a472:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a476:	21 96       	adiw	r28, 0x01	; 1
    a478:	c4 37       	cpi	r28, 0x74	; 116
    a47a:	d1 05       	cpc	r29, r1
    a47c:	b1 f7       	brne	.-20     	; 0xa46a <save_setup_network()+0x14>
    a47e:	03 e2       	ldi	r16, 0x23	; 35
    a480:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:43
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ip + m, device.myIP[m]);
    a482:	f8 01       	movw	r30, r16
    a484:	61 91       	ld	r22, Z+
    a486:	8f 01       	movw	r16, r30
    a488:	ce 01       	movw	r24, r28
    a48a:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a48e:	21 96       	adiw	r28, 0x01	; 1
    a490:	c8 37       	cpi	r28, 0x78	; 120
    a492:	d1 05       	cpc	r29, r1
    a494:	b1 f7       	brne	.-20     	; 0xa482 <save_setup_network()+0x2c>
    a496:	07 e2       	ldi	r16, 0x27	; 39
    a498:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:44
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mask + m, device.myMASK[m]);
    a49a:	f8 01       	movw	r30, r16
    a49c:	61 91       	ld	r22, Z+
    a49e:	8f 01       	movw	r16, r30
    a4a0:	ce 01       	movw	r24, r28
    a4a2:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a4a6:	21 96       	adiw	r28, 0x01	; 1
    a4a8:	cc 37       	cpi	r28, 0x7C	; 124
    a4aa:	d1 05       	cpc	r29, r1
    a4ac:	b1 f7       	brne	.-20     	; 0xa49a <save_setup_network()+0x44>
    a4ae:	2f e2       	ldi	r18, 0x2F	; 47
    a4b0:	e2 2e       	mov	r14, r18
    a4b2:	2c e0       	ldi	r18, 0x0C	; 12
    a4b4:	f2 2e       	mov	r15, r18
    a4b6:	00 e8       	ldi	r16, 0x80	; 128
    a4b8:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:45
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_gw + m, device.myGW[m]);
    a4ba:	f7 01       	movw	r30, r14
    a4bc:	61 91       	ld	r22, Z+
    a4be:	7f 01       	movw	r14, r30
    a4c0:	c8 01       	movw	r24, r16
    a4c2:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a4c6:	0f 5f       	subi	r16, 0xFF	; 255
    a4c8:	1f 4f       	sbci	r17, 0xFF	; 255
    a4ca:	04 38       	cpi	r16, 0x84	; 132
    a4cc:	11 05       	cpc	r17, r1
    a4ce:	a9 f7       	brne	.-22     	; 0xa4ba <save_setup_network()+0x64>
    a4d0:	9b e2       	ldi	r25, 0x2B	; 43
    a4d2:	e9 2e       	mov	r14, r25
    a4d4:	9c e0       	ldi	r25, 0x0C	; 12
    a4d6:	f9 2e       	mov	r15, r25
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:46
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_dns + m, device.myDNS[m]);
    a4d8:	f7 01       	movw	r30, r14
    a4da:	61 91       	ld	r22, Z+
    a4dc:	7f 01       	movw	r14, r30
    a4de:	ce 01       	movw	r24, r28
    a4e0:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a4e4:	21 96       	adiw	r28, 0x01	; 1
    a4e6:	c0 38       	cpi	r28, 0x80	; 128
    a4e8:	d1 05       	cpc	r29, r1
    a4ea:	b1 f7       	brne	.-20     	; 0xa4d8 <save_setup_network()+0x82>
    a4ec:	83 e3       	ldi	r24, 0x33	; 51
    a4ee:	e8 2e       	mov	r14, r24
    a4f0:	8c e0       	ldi	r24, 0x0C	; 12
    a4f2:	f8 2e       	mov	r15, r24
    a4f4:	c4 e6       	ldi	r28, 0x64	; 100
    a4f6:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:47
  for (uint8_t m = 0; m < 9; m++) EEPROM.write(device_nazev + m, device.nazev[m]);
    a4f8:	f7 01       	movw	r30, r14
    a4fa:	61 91       	ld	r22, Z+
    a4fc:	7f 01       	movw	r14, r30
    a4fe:	ce 01       	movw	r24, r28
    a500:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a504:	21 96       	adiw	r28, 0x01	; 1
    a506:	cd 36       	cpi	r28, 0x6D	; 109
    a508:	d1 05       	cpc	r29, r1
    a50a:	b1 f7       	brne	.-20     	; 0xa4f8 <save_setup_network()+0xa2>
    a50c:	cd e3       	ldi	r28, 0x3D	; 61
    a50e:	dc e0       	ldi	r29, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:48
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mqtt_server + m, device.mqtt_server[m]);
    a510:	69 91       	ld	r22, Y+
    a512:	c8 01       	movw	r24, r16
    a514:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a518:	0f 5f       	subi	r16, 0xFF	; 255
    a51a:	1f 4f       	sbci	r17, 0xFF	; 255
    a51c:	08 38       	cpi	r16, 0x88	; 136
    a51e:	11 05       	cpc	r17, r1
    a520:	b9 f7       	brne	.-18     	; 0xa510 <save_setup_network()+0xba>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:49
  EEPROM.write(device_mqtt_port, device.mqtt_port >> 8);
    a522:	60 91 42 0c 	lds	r22, 0x0C42	; 0x800c42 <device+0x25>
    a526:	88 e8       	ldi	r24, 0x88	; 136
    a528:	90 e0       	ldi	r25, 0x00	; 0
    a52a:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:50
  EEPROM.write(device_mqtt_port + 1, device.mqtt_port & 0xff);
    a52e:	60 91 41 0c 	lds	r22, 0x0C41	; 0x800c41 <device+0x24>
    a532:	89 e8       	ldi	r24, 0x89	; 137
    a534:	90 e0       	ldi	r25, 0x00	; 0
    a536:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a53a:	03 e4       	ldi	r16, 0x43	; 67
    a53c:	1c e0       	ldi	r17, 0x0C	; 12
    a53e:	ca e8       	ldi	r28, 0x8A	; 138
    a540:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:51
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_user + m, device.mqtt_user[m]);
    a542:	f8 01       	movw	r30, r16
    a544:	61 91       	ld	r22, Z+
    a546:	8f 01       	movw	r16, r30
    a548:	ce 01       	movw	r24, r28
    a54a:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a54e:	21 96       	adiw	r28, 0x01	; 1
    a550:	ce 39       	cpi	r28, 0x9E	; 158
    a552:	d1 05       	cpc	r29, r1
    a554:	b1 f7       	brne	.-20     	; 0xa542 <save_setup_network()+0xec>
    a556:	07 e5       	ldi	r16, 0x57	; 87
    a558:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:52
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_key + m, device.mqtt_key[m]);
    a55a:	f8 01       	movw	r30, r16
    a55c:	61 91       	ld	r22, Z+
    a55e:	8f 01       	movw	r16, r30
    a560:	ce 01       	movw	r24, r28
    a562:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a566:	21 96       	adiw	r28, 0x01	; 1
    a568:	c2 3b       	cpi	r28, 0xB2	; 178
    a56a:	d1 05       	cpc	r29, r1
    a56c:	b1 f7       	brne	.-20     	; 0xa55a <save_setup_network()+0x104>
    a56e:	0b e6       	ldi	r16, 0x6B	; 107
    a570:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:53
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ntp_server + m, device.ntp_server[m]);
    a572:	f8 01       	movw	r30, r16
    a574:	61 91       	ld	r22, Z+
    a576:	8f 01       	movw	r16, r30
    a578:	ce 01       	movw	r24, r28
    a57a:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a57e:	21 96       	adiw	r28, 0x01	; 1
    a580:	c6 3b       	cpi	r28, 0xB6	; 182
    a582:	d1 05       	cpc	r29, r1
    a584:	b1 f7       	brne	.-20     	; 0xa572 <save_setup_network()+0x11c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:54
}
    a586:	df 91       	pop	r29
    a588:	cf 91       	pop	r28
    a58a:	1f 91       	pop	r17
    a58c:	0f 91       	pop	r16
    a58e:	ff 90       	pop	r15
    a590:	ef 90       	pop	r14
    a592:	08 95       	ret

0000a594 <remote_tds_set_name(unsigned char, char*) [clone .part.21]>:
_Z19remote_tds_set_namehPc.part.21():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2661
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
    a594:	df 92       	push	r13
    a596:	ef 92       	push	r14
    a598:	ff 92       	push	r15
    a59a:	0f 93       	push	r16
    a59c:	1f 93       	push	r17
    a59e:	cf 93       	push	r28
    a5a0:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    a5a2:	94 e1       	ldi	r25, 0x14	; 20
    a5a4:	89 9f       	mul	r24, r25
    a5a6:	e0 01       	movw	r28, r0
    a5a8:	11 24       	eor	r1, r1
    a5aa:	7b 01       	movw	r14, r22
    a5ac:	8e 01       	movw	r16, r28
    a5ae:	06 55       	subi	r16, 0x56	; 86
    a5b0:	1a 4f       	sbci	r17, 0xFA	; 250
    a5b2:	c4 54       	subi	r28, 0x44	; 68
    a5b4:	da 4f       	sbci	r29, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2667
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
    a5b6:	f7 01       	movw	r30, r14
    a5b8:	d1 90       	ld	r13, Z+
    a5ba:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    a5bc:	6d 2d       	mov	r22, r13
    a5be:	c8 01       	movw	r24, r16
    a5c0:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2669
      if (t == 0) break;
    a5c4:	dd 20       	and	r13, r13
    a5c6:	29 f0       	breq	.+10     	; 0xa5d2 <remote_tds_set_name(unsigned char, char*) [clone .part.21]+0x3e>
    a5c8:	0f 5f       	subi	r16, 0xFF	; 255
    a5ca:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    a5cc:	0c 17       	cp	r16, r28
    a5ce:	1d 07       	cpc	r17, r29
    a5d0:	91 f7       	brne	.-28     	; 0xa5b6 <remote_tds_set_name(unsigned char, char*) [clone .part.21]+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2671
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
      if (t == 0) break;
    }
}
    a5d2:	df 91       	pop	r29
    a5d4:	cf 91       	pop	r28
    a5d6:	1f 91       	pop	r17
    a5d8:	0f 91       	pop	r16
    a5da:	ff 90       	pop	r15
    a5dc:	ef 90       	pop	r14
    a5de:	df 90       	pop	r13
    a5e0:	08 95       	ret

0000a5e2 <click_function_default_temp(unsigned char, unsigned char, unsigned char)>:
_Z27click_function_default_temphhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5502
   args2 -- globalni argument celeho menu
   args3 -- id polozky menu kliku
*/
void click_function_default_temp(uint8_t args1, uint8_t args2, uint8_t args3)
{
  default_show_temp = args3;
    a5e2:	40 93 ee 08 	sts	0x08EE, r20	; 0x8008ee <default_show_temp>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2847
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    a5e6:	64 2f       	mov	r22, r20
    a5e8:	8d e5       	ldi	r24, 0x5D	; 93
    a5ea:	90 e0       	ldi	r25, 0x00	; 0
    a5ec:	0c 94 5e 96 	jmp	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a5f0 <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2656
    *active = 255;
  }
}
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
    a5f0:	cf 93       	push	r28
    a5f2:	df 93       	push	r29
    a5f4:	d6 2f       	mov	r29, r22
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2664
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    a5f6:	8a 30       	cpi	r24, 0x0A	; 10
    a5f8:	78 f4       	brcc	.+30     	; 0xa618 <remote_tds_set_complete(unsigned char, unsigned char, char*)+0x28>
    a5fa:	ba 01       	movw	r22, r20
    a5fc:	c8 2f       	mov	r28, r24
    a5fe:	0e 94 ca 52 	call	0xa594	; 0xa594 <remote_tds_set_name(unsigned char, char*) [clone .part.21]>
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2687
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    a602:	24 e1       	ldi	r18, 0x14	; 20
    a604:	c2 9f       	mul	r28, r18
    a606:	c0 01       	movw	r24, r0
    a608:	11 24       	eor	r1, r1
    a60a:	6d 2f       	mov	r22, r29
    a60c:	83 54       	subi	r24, 0x43	; 67
    a60e:	9a 4f       	sbci	r25, 0xFA	; 250
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2659
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    a610:	df 91       	pop	r29
    a612:	cf 91       	pop	r28
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2687
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    a614:	0c 94 5e 96 	jmp	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2659
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    a618:	df 91       	pop	r29
    a61a:	cf 91       	pop	r28
    a61c:	08 95       	ret

0000a61e <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2691
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
}
///
void remote_tds_clear(uint8_t idx)
{
    a61e:	cf 93       	push	r28
    a620:	df 93       	push	r29
    a622:	cd b7       	in	r28, 0x3d	; 61
    a624:	de b7       	in	r29, 0x3e	; 62
    a626:	62 97       	sbiw	r28, 0x12	; 18
    a628:	0f b6       	in	r0, 0x3f	; 63
    a62a:	f8 94       	cli
    a62c:	de bf       	out	0x3e, r29	; 62
    a62e:	0f be       	out	0x3f, r0	; 63
    a630:	cd bf       	out	0x3d, r28	; 61
    a632:	e1 e0       	ldi	r30, 0x01	; 1
    a634:	f0 e0       	ldi	r31, 0x00	; 0
    a636:	ec 0f       	add	r30, r28
    a638:	fd 1f       	adc	r31, r29
    a63a:	e8 0f       	add	r30, r24
    a63c:	f1 1d       	adc	r31, r1
    a63e:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2695
  char rtds_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    rtds_name[idx] = 0;
  remote_tds_set_complete(idx, 0, rtds_name);
    a640:	ae 01       	movw	r20, r28
    a642:	4f 5f       	subi	r20, 0xFF	; 255
    a644:	5f 4f       	sbci	r21, 0xFF	; 255
    a646:	60 e0       	ldi	r22, 0x00	; 0
    a648:	0e 94 f8 52 	call	0xa5f0	; 0xa5f0 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696
}
    a64c:	62 96       	adiw	r28, 0x12	; 18
    a64e:	0f b6       	in	r0, 0x3f	; 63
    a650:	f8 94       	cli
    a652:	de bf       	out	0x3e, r29	; 62
    a654:	0f be       	out	0x3f, r0	; 63
    a656:	cd bf       	out	0x3d, r28	; 61
    a658:	df 91       	pop	r29
    a65a:	cf 91       	pop	r28
    a65c:	08 95       	ret

0000a65e <click_rtds_deassociate_onewire(unsigned char, unsigned char)>:
_Z30click_rtds_deassociate_onewirehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5236
/*
   args1 --- atributy z nastaveni tlacitka
   args2 --- index polozky z menu
*/
void click_rtds_deassociate_onewire(uint8_t args1, uint8_t args2)
{
    a65e:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5238
  //printf("mazu rtds args1:%d args2:%d\n", args1, args2);
  remote_tds_clear(args2);
    a660:	0e 94 0f 53 	call	0xa61e	; 0xa61e <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5239
  MenuHistoryPrevMenu();
    a664:	0c 94 0b 32 	jmp	0x6416	; 0x6416 <MenuHistoryPrevMenu()>

0000a668 <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
    a668:	21 e2       	ldi	r18, 0x21	; 33
    a66a:	82 9f       	mul	r24, r18
    a66c:	c0 01       	movw	r24, r0
    a66e:	11 24       	eor	r1, r1
    a670:	82 5a       	subi	r24, 0xA2	; 162
    a672:	9e 4f       	sbci	r25, 0xFE	; 254
    a674:	0c 94 60 96 	jmp	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>

0000a678 <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z40get_function_thermostat_mode_is_selectedjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5649
   args1 ... globalni argument z definice menu
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t get_function_thermostat_mode_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a678:	cf 93       	push	r28
    a67a:	86 2f       	mov	r24, r22
    a67c:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5652
  uint8_t mode;
  uint8_t ret = 0;
  mode = thermostat_ring_get_mode(args2);
    a67e:	0e 94 34 53 	call	0xa668	; 0xa668 <thermostat_ring_get_mode(unsigned char)>
    a682:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5653
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
    a684:	c1 11       	cpse	r28, r1
    a686:	05 c0       	rjmp	.+10     	; 0xa692 <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x1a>
    a688:	81 e0       	ldi	r24, 0x01	; 1
    a68a:	99 23       	and	r25, r25
    a68c:	39 f0       	breq	.+14     	; 0xa69c <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5651
   args3 ... id polozky dynamickeho menu
*/
uint8_t get_function_thermostat_mode_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode;
  uint8_t ret = 0;
    a68e:	80 e0       	ldi	r24, 0x00	; 0
    a690:	05 c0       	rjmp	.+10     	; 0xa69c <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5654
  mode = thermostat_ring_get_mode(args2);
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
  if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
    a692:	c1 30       	cpi	r28, 0x01	; 1
    a694:	29 f4       	brne	.+10     	; 0xa6a0 <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x28>
    a696:	81 e0       	ldi	r24, 0x01	; 1
    a698:	91 30       	cpi	r25, 0x01	; 1
    a69a:	c9 f7       	brne	.-14     	; 0xa68e <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5659
  if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
  if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
  if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
  return ret;
}
    a69c:	cf 91       	pop	r28
    a69e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5655
  uint8_t mode;
  uint8_t ret = 0;
  mode = thermostat_ring_get_mode(args2);
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
  if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
  if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
    a6a0:	c2 30       	cpi	r28, 0x02	; 2
    a6a2:	21 f4       	brne	.+8      	; 0xa6ac <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x34>
    a6a4:	81 e0       	ldi	r24, 0x01	; 1
    a6a6:	97 30       	cpi	r25, 0x07	; 7
    a6a8:	91 f7       	brne	.-28     	; 0xa68e <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    a6aa:	f8 cf       	rjmp	.-16     	; 0xa69c <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5656
  if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
    a6ac:	c3 30       	cpi	r28, 0x03	; 3
    a6ae:	21 f4       	brne	.+8      	; 0xa6b8 <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x40>
    a6b0:	81 e0       	ldi	r24, 0x01	; 1
    a6b2:	92 30       	cpi	r25, 0x02	; 2
    a6b4:	61 f7       	brne	.-40     	; 0xa68e <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    a6b6:	f2 cf       	rjmp	.-28     	; 0xa69c <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5657
  if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
    a6b8:	c4 30       	cpi	r28, 0x04	; 4
    a6ba:	49 f7       	brne	.-46     	; 0xa68e <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    a6bc:	81 e0       	ldi	r24, 0x01	; 1
    a6be:	98 30       	cpi	r25, 0x08	; 8
    a6c0:	69 f3       	breq	.-38     	; 0xa69c <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    a6c2:	93 30       	cpi	r25, 0x03	; 3
    a6c4:	59 f3       	breq	.-42     	; 0xa69c <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    a6c6:	95 30       	cpi	r25, 0x05	; 5
    a6c8:	11 f7       	brne	.-60     	; 0xa68e <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    a6ca:	e8 cf       	rjmp	.-48     	; 0xa69c <get_function_thermostat_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>

0000a6cc <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>:
_Z33display_enable_show_term_mode_manjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5606
  }
}

uint8_t display_enable_show_term_mode_man(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode = thermostat_ring_get_mode(default_ring);
    a6cc:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <default_ring>
    a6d0:	0e 94 34 53 	call	0xa668	; 0xa668 <thermostat_ring_get_mode(unsigned char)>
    a6d4:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5608
  if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
    return 1;
    a6d6:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5607
}

uint8_t display_enable_show_term_mode_man(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode = thermostat_ring_get_mode(default_ring);
  if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
    a6d8:	93 30       	cpi	r25, 0x03	; 3
    a6da:	31 f0       	breq	.+12     	; 0xa6e8 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1c>
    a6dc:	95 30       	cpi	r25, 0x05	; 5
    a6de:	29 f0       	breq	.+10     	; 0xa6ea <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1e>
    a6e0:	98 30       	cpi	r25, 0x08	; 8
    a6e2:	19 f0       	breq	.+6      	; 0xa6ea <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1e>
    a6e4:	80 e0       	ldi	r24, 0x00	; 0
    a6e6:	08 95       	ret
    a6e8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5611
    return 1;

  return 0;
}
    a6ea:	08 95       	ret

0000a6ec <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)>:
_Z34get_funtion_default_ring_temp_modehhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5550
  sprintf(line2, "Regulator %d - %s", default_ring, name);
  strcpy_P(line1, text_change_default_ring);
}

void get_funtion_default_ring_temp_mode(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    a6ec:	cf 93       	push	r28
    a6ee:	df 93       	push	r29
    a6f0:	ca 01       	movw	r24, r20
    a6f2:	e9 01       	movw	r28, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5551
  strcpy_P(line1, text_current_ring_mode);
    a6f4:	60 ef       	ldi	r22, 0xF0	; 240
    a6f6:	74 e3       	ldi	r23, 0x34	; 52
    a6f8:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5552
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
    a6fc:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <default_ring>
    a700:	0e 94 34 53 	call	0xa668	; 0xa668 <thermostat_ring_get_mode(unsigned char)>
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4054
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
}

void convert_mode_text_1(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy_P(str, button_term_off);
    a704:	6f e7       	ldi	r22, 0x7F	; 127
    a706:	75 e3       	ldi	r23, 0x35	; 53
    a708:	88 23       	and	r24, r24
    a70a:	61 f0       	breq	.+24     	; 0xa724 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4055
  if (mode == TERM_MODE_MAX)   strcpy_P(str, button_term_max);
    a70c:	65 e6       	ldi	r22, 0x65	; 101
    a70e:	75 e3       	ldi	r23, 0x35	; 53
    a710:	81 30       	cpi	r24, 0x01	; 1
    a712:	41 f0       	breq	.+16     	; 0xa724 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4056
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, button_term_man);
    a714:	67 e1       	ldi	r22, 0x17	; 23
    a716:	75 e3       	ldi	r23, 0x35	; 53
    a718:	83 30       	cpi	r24, 0x03	; 3
    a71a:	21 f0       	breq	.+8      	; 0xa724 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4057
  if (mode == TERM_MODE_PROG)   strcpy_P(str, button_term_prog);
    a71c:	82 30       	cpi	r24, 0x02	; 2
    a71e:	41 f4       	brne	.+16     	; 0xa730 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x44>
    a720:	6f e2       	ldi	r22, 0x2F	; 47
    a722:	75 e3       	ldi	r23, 0x35	; 53
    a724:	ce 01       	movw	r24, r28
    a726:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
_Z34get_funtion_default_ring_temp_modehhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5553

void get_funtion_default_ring_temp_mode(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  strcpy_P(line1, text_current_ring_mode);
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
}
    a72a:	df 91       	pop	r29
    a72c:	cf 91       	pop	r28
    a72e:	08 95       	ret
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4058
{
  if (mode == TERM_MODE_OFF)   strcpy_P(str, button_term_off);
  if (mode == TERM_MODE_MAX)   strcpy_P(str, button_term_max);
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, button_term_man);
    a730:	84 30       	cpi	r24, 0x04	; 4
    a732:	39 f4       	brne	.+14     	; 0xa742 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4060
  if (mode == TERM_MODE_FAN)   strcpy_P(str, button_term_fan);
  if (mode == TERM_MODE_MAN)   strcpy_P(str, button_term_man);
    a734:	67 e1       	ldi	r22, 0x17	; 23
    a736:	75 e3       	ldi	r23, 0x35	; 53
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4061
  if (mode == TERM_MODE_MIN)   strcpy_P(str, button_term_min);
    a738:	ce 01       	movw	r24, r28
_Z34get_funtion_default_ring_temp_modehhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5553

void get_funtion_default_ring_temp_mode(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  strcpy_P(line1, text_current_ring_mode);
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
}
    a73a:	df 91       	pop	r29
    a73c:	cf 91       	pop	r28
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4061
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, button_term_man);
  if (mode == TERM_MODE_FAN)   strcpy_P(str, button_term_fan);
  if (mode == TERM_MODE_MAN)   strcpy_P(str, button_term_man);
  if (mode == TERM_MODE_MIN)   strcpy_P(str, button_term_min);
    a73e:	0c 94 3e aa 	jmp	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4059
  if (mode == TERM_MODE_OFF)   strcpy_P(str, button_term_off);
  if (mode == TERM_MODE_MAX)   strcpy_P(str, button_term_max);
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, button_term_man);
  if (mode == TERM_MODE_FAN)   strcpy_P(str, button_term_fan);
    a742:	6c ee       	ldi	r22, 0xEC	; 236
    a744:	74 e3       	ldi	r23, 0x34	; 52
    a746:	86 30       	cpi	r24, 0x06	; 6
    a748:	b9 f3       	breq	.-18     	; 0xa738 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4060
  if (mode == TERM_MODE_MAN)   strcpy_P(str, button_term_man);
    a74a:	88 30       	cpi	r24, 0x08	; 8
    a74c:	99 f3       	breq	.-26     	; 0xa734 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4061
  if (mode == TERM_MODE_MIN)   strcpy_P(str, button_term_min);
    a74e:	87 30       	cpi	r24, 0x07	; 7
    a750:	61 f7       	brne	.-40     	; 0xa72a <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x3e>
    a752:	6b e4       	ldi	r22, 0x4B	; 75
    a754:	75 e3       	ldi	r23, 0x35	; 53
    a756:	f0 cf       	rjmp	.-32     	; 0xa738 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x4c>

0000a758 <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:153
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
    a758:	0f 93       	push	r16
    a75a:	1f 93       	push	r17
    a75c:	cf 93       	push	r28
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:154
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
    a75e:	91 e2       	ldi	r25, 0x21	; 33
    a760:	89 9f       	mul	r24, r25
    a762:	80 01       	movw	r16, r0
    a764:	11 24       	eor	r1, r1
    a766:	c8 01       	movw	r24, r16
    a768:	8a 5a       	subi	r24, 0xAA	; 170
    a76a:	9e 4f       	sbci	r25, 0xFE	; 254
    a76c:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    a770:	c8 2f       	mov	r28, r24
    a772:	c8 01       	movw	r24, r16
    a774:	89 5a       	subi	r24, 0xA9	; 169
    a776:	9e 4f       	sbci	r25, 0xFE	; 254
    a778:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    a77c:	2c 2f       	mov	r18, r28
    a77e:	30 e0       	ldi	r19, 0x00	; 0
    a780:	32 2f       	mov	r19, r18
    a782:	22 27       	eor	r18, r18
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:155
}
    a784:	82 0f       	add	r24, r18
    a786:	93 2f       	mov	r25, r19
    a788:	91 1d       	adc	r25, r1
    a78a:	cf 91       	pop	r28
    a78c:	1f 91       	pop	r17
    a78e:	0f 91       	pop	r16
    a790:	08 95       	ret

0000a792 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>:
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2267




uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a792:	cf 93       	push	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2268
  display_function_set_variable(thermostat_ring_get_mezni(default_ring), 160, 320, 5, default_ring, 10,  H_TRUE);
    a794:	c0 91 0c 0a 	lds	r28, 0x0A0C	; 0x800a0c <default_ring>
    a798:	8c 2f       	mov	r24, r28
    a79a:	0e 94 ac 53 	call	0xa758	; 0xa758 <thermostat_ring_get_mezni(unsigned char)>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2304
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args, 0);
  }
}
void display_function_set_variable(uint16_t now, uint16_t min, uint16_t max, uint8_t step, uint8_t args, uint16_t divider, uint8_t update_now)
{
  menu_dialog_set_variable_now = now;
    a79e:	90 93 ac 08 	sts	0x08AC, r25	; 0x8008ac <menu_dialog_set_variable_now+0x1>
    a7a2:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2305
  menu_dialog_set_variable_min = min;
    a7a6:	80 ea       	ldi	r24, 0xA0	; 160
    a7a8:	90 e0       	ldi	r25, 0x00	; 0
    a7aa:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <menu_dialog_set_variable_min+0x1>
    a7ae:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <menu_dialog_set_variable_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2306
  menu_dialog_set_variable_max = max;
    a7b2:	80 e4       	ldi	r24, 0x40	; 64
    a7b4:	91 e0       	ldi	r25, 0x01	; 1
    a7b6:	90 93 60 08 	sts	0x0860, r25	; 0x800860 <menu_dialog_set_variable_max+0x1>
    a7ba:	80 93 5f 08 	sts	0x085F, r24	; 0x80085f <menu_dialog_set_variable_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
  menu_dialog_set_variable_step = step;
    a7be:	85 e0       	ldi	r24, 0x05	; 5
    a7c0:	80 93 5e 08 	sts	0x085E, r24	; 0x80085e <menu_dialog_set_variable_step>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2308
  menu_dialog_set_variable_args = args;
    a7c4:	c0 93 5d 08 	sts	0x085D, r28	; 0x80085d <menu_dialog_set_variable_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
  menu_dialog_set_divider = divider;
    a7c8:	8a e0       	ldi	r24, 0x0A	; 10
    a7ca:	90 e0       	ldi	r25, 0x00	; 0
    a7cc:	90 93 ae 08 	sts	0x08AE, r25	; 0x8008ae <menu_dialog_set_divider+0x1>
    a7d0:	80 93 ad 08 	sts	0x08AD, r24	; 0x8008ad <menu_dialog_set_divider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
  dialog_save_variable_function = NULL;
  menu_dialog_set_variable_update_now = update_now;
    a7d4:	81 e0       	ldi	r24, 0x01	; 1
    a7d6:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <menu_dialog_set_variable_update_now>
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2269


uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(default_ring), 160, 320, 5, default_ring, 10,  H_TRUE);
  dialog_save_variable_function = &helper_thermostat_set_mezni;
    a7da:	8c ee       	ldi	r24, 0xEC	; 236
    a7dc:	90 e5       	ldi	r25, 0x50	; 80
    a7de:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <dialog_save_variable_function+0x1>
    a7e2:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2270
}
    a7e6:	cf 91       	pop	r28
    a7e8:	08 95       	ret

0000a7ea <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
    a7ea:	21 e2       	ldi	r18, 0x21	; 33
    a7ec:	82 9f       	mul	r24, r18
    a7ee:	c0 01       	movw	r24, r0
    a7f0:	11 24       	eor	r1, r1
    a7f2:	83 5a       	subi	r24, 0xA3	; 163
    a7f4:	9e 4f       	sbci	r25, 0xFE	; 254
    a7f6:	0c 94 60 96 	jmp	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>

0000a7fa <set_function_thermostat_heat_or_cool(unsigned char)>:
_Z36set_function_thermostat_heat_or_coolh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5594
  }
  return ret;
}

void set_function_thermostat_heat_or_cool(uint8_t args)
{
    a7fa:	cf 93       	push	r28
    a7fc:	df 93       	push	r29
    a7fe:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5595
  if (thermostat_ring_get_active(default_ring) != 255)
    a800:	c0 91 0c 0a 	lds	r28, 0x0A0C	; 0x800a0c <default_ring>
    a804:	8c 2f       	mov	r24, r28
    a806:	0e 94 f5 53 	call	0xa7ea	; 0xa7ea <thermostat_ring_get_active(unsigned char)>
    a80a:	8f 3f       	cpi	r24, 0xFF	; 255
    a80c:	59 f0       	breq	.+22     	; 0xa824 <set_function_thermostat_heat_or_cool(unsigned char)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5598
  {
    if (args == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    a80e:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5597

void set_function_thermostat_heat_or_cool(uint8_t args)
{
  if (thermostat_ring_get_active(default_ring) != 255)
  {
    if (args == TERM_MODE_MAN_HEAT)
    a810:	d3 30       	cpi	r29, 0x03	; 3
    a812:	19 f0       	breq	.+6      	; 0xa81a <set_function_thermostat_heat_or_cool(unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5599
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args == TERM_MODE_MAN_COOL)
    a814:	d5 30       	cpi	r29, 0x05	; 5
    a816:	31 f4       	brne	.+12     	; 0xa824 <set_function_thermostat_heat_or_cool(unsigned char)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5600
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 1);
    a818:	61 e0       	ldi	r22, 0x01	; 1
    a81a:	8c 2f       	mov	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5602
  }
}
    a81c:	df 91       	pop	r29
    a81e:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5600
  if (thermostat_ring_get_active(default_ring) != 255)
  {
    if (args == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args == TERM_MODE_MAN_COOL)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 1);
    a820:	0c 94 62 96 	jmp	0x12cc4	; 0x12cc4 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5602
  }
}
    a824:	df 91       	pop	r29
    a826:	cf 91       	pop	r28
    a828:	08 95       	ret

0000a82a <click_thermostat_set_mode(unsigned char)>:
_Z25click_thermostat_set_modeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5569
    if (thermostat_ring_get_mode_1(default_ring, args) == true)
      ret = 1;
  return ret;
}
void click_thermostat_set_mode(uint8_t args)
{
    a82a:	cf 93       	push	r28
    a82c:	df 93       	push	r29
    a82e:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5570
  if (thermostat_ring_get_active(default_ring) != 255)
    a830:	c0 91 0c 0a 	lds	r28, 0x0A0C	; 0x800a0c <default_ring>
    a834:	8c 2f       	mov	r24, r28
    a836:	0e 94 f5 53 	call	0xa7ea	; 0xa7ea <thermostat_ring_get_active(unsigned char)>
    a83a:	8f 3f       	cpi	r24, 0xFF	; 255
    a83c:	39 f0       	breq	.+14     	; 0xa84c <click_thermostat_set_mode(unsigned char)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5572
  {
    thermostat_ring_set_mode(default_ring, args);
    a83e:	6d 2f       	mov	r22, r29
    a840:	8c 2f       	mov	r24, r28
    a842:	0e 94 ba 50 	call	0xa174	; 0xa174 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5573
    change_term_mode = 1;
    a846:	81 e0       	ldi	r24, 0x01	; 1
    a848:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5575
  }
}
    a84c:	df 91       	pop	r29
    a84e:	cf 91       	pop	r28
    a850:	08 95       	ret

0000a852 <get_function_thermostat_has_mode(unsigned char)>:
_Z32get_function_thermostat_has_modeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5561
   funkce pro zjisteni, zda mode v args je aktivni a nebo ne
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t get_function_thermostat_has_mode(uint8_t args)
{
    a852:	cf 93       	push	r28
    a854:	df 93       	push	r29
    a856:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5563
  uint8_t ret = 0;
  if (thermostat_ring_get_active(default_ring) != 255)
    a858:	c0 91 0c 0a 	lds	r28, 0x0A0C	; 0x800a0c <default_ring>
    a85c:	8c 2f       	mov	r24, r28
    a85e:	0e 94 f5 53 	call	0xa7ea	; 0xa7ea <thermostat_ring_get_active(unsigned char)>
    a862:	8f 3f       	cpi	r24, 0xFF	; 255
    a864:	29 f0       	breq	.+10     	; 0xa870 <get_function_thermostat_has_mode(unsigned char)+0x1e>
thermostat_ring_get_mode_1():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:185
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
    a866:	8c 2f       	mov	r24, r28
    a868:	0e 94 34 53 	call	0xa668	; 0xa668 <thermostat_ring_get_mode(unsigned char)>
    a86c:	91 e0       	ldi	r25, 0x01	; 1
    a86e:	d8 13       	cpse	r29, r24
_Z32get_function_thermostat_has_modeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5562
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t get_function_thermostat_has_mode(uint8_t args)
{
  uint8_t ret = 0;
    a870:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5567
  if (thermostat_ring_get_active(default_ring) != 255)
    if (thermostat_ring_get_mode_1(default_ring, args) == true)
      ret = 1;
  return ret;
}
    a872:	89 2f       	mov	r24, r25
    a874:	df 91       	pop	r29
    a876:	cf 91       	pop	r28
    a878:	08 95       	ret

0000a87a <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:100
  return PID_time[idx];
}

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
    a87a:	ef 92       	push	r14
    a87c:	ff 92       	push	r15
    a87e:	0f 93       	push	r16
    a880:	1f 93       	push	r17
    a882:	cf 93       	push	r28
    a884:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:104
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    a886:	91 e2       	ldi	r25, 0x21	; 33
    a888:	89 9f       	mul	r24, r25
    a88a:	e0 01       	movw	r28, r0
    a88c:	11 24       	eor	r1, r1
    a88e:	8e 01       	movw	r16, r28
    a890:	04 5b       	subi	r16, 0xB4	; 180
    a892:	1e 4f       	sbci	r17, 0xFE	; 254
    a894:	7b 01       	movw	r14, r22
    a896:	cb 5a       	subi	r28, 0xAB	; 171
    a898:	de 4f       	sbci	r29, 0xFE	; 254
    a89a:	c8 01       	movw	r24, r16
    a89c:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:105
    name[i] = t;
    a8a0:	f7 01       	movw	r30, r14
    a8a2:	81 93       	st	Z+, r24
    a8a4:	7f 01       	movw	r14, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
    a8a6:	88 23       	and	r24, r24
    a8a8:	29 f0       	breq	.+10     	; 0xa8b4 <thermostat_ring_get_name(unsigned char, char*)+0x3a>
    a8aa:	0f 5f       	subi	r16, 0xFF	; 255
    a8ac:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:102

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    a8ae:	0c 17       	cp	r16, r28
    a8b0:	1d 07       	cpc	r17, r29
    a8b2:	99 f7       	brne	.-26     	; 0xa89a <thermostat_ring_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:108
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    name[i] = t;
    if (t == 0) break;
  }
}
    a8b4:	df 91       	pop	r29
    a8b6:	cf 91       	pop	r28
    a8b8:	1f 91       	pop	r17
    a8ba:	0f 91       	pop	r16
    a8bc:	ff 90       	pop	r15
    a8be:	ef 90       	pop	r14
    a8c0:	08 95       	ret

0000a8c2 <get_funtion_default_ring(unsigned char, unsigned char, char*, char*)>:
_Z24get_funtion_default_ringhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5542
  strcpy(line1, "Ahoj");
}


void get_funtion_default_ring(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    a8c2:	cf 92       	push	r12
    a8c4:	df 92       	push	r13
    a8c6:	ef 92       	push	r14
    a8c8:	ff 92       	push	r15
    a8ca:	0f 93       	push	r16
    a8cc:	1f 93       	push	r17
    a8ce:	cf 93       	push	r28
    a8d0:	df 93       	push	r29
    a8d2:	00 d0       	rcall	.+0      	; 0xa8d4 <get_funtion_default_ring(unsigned char, unsigned char, char*, char*)+0x12>
    a8d4:	00 d0       	rcall	.+0      	; 0xa8d6 <get_funtion_default_ring(unsigned char, unsigned char, char*, char*)+0x14>
    a8d6:	00 d0       	rcall	.+0      	; 0xa8d8 <get_funtion_default_ring(unsigned char, unsigned char, char*, char*)+0x16>
    a8d8:	1f 92       	push	r1
    a8da:	cd b7       	in	r28, 0x3d	; 61
    a8dc:	de b7       	in	r29, 0x3e	; 62
    a8de:	7a 01       	movw	r14, r20
    a8e0:	d2 2e       	mov	r13, r18
    a8e2:	c3 2e       	mov	r12, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5544
  char name[10];
  thermostat_ring_get_name(default_ring, name);
    a8e4:	8e 01       	movw	r16, r28
    a8e6:	0f 5f       	subi	r16, 0xFF	; 255
    a8e8:	1f 4f       	sbci	r17, 0xFF	; 255
    a8ea:	b8 01       	movw	r22, r16
    a8ec:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <default_ring>
    a8f0:	0e 94 3d 54 	call	0xa87a	; 0xa87a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5545
  sprintf(line2, "Regulator %d - %s", default_ring, name);
    a8f4:	1f 93       	push	r17
    a8f6:	0f 93       	push	r16
    a8f8:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <default_ring>
    a8fc:	1f 92       	push	r1
    a8fe:	8f 93       	push	r24
    a900:	84 e6       	ldi	r24, 0x64	; 100
    a902:	93 e0       	ldi	r25, 0x03	; 3
    a904:	9f 93       	push	r25
    a906:	8f 93       	push	r24
    a908:	cf 92       	push	r12
    a90a:	df 92       	push	r13
    a90c:	0e 94 27 b7 	call	0x16e4e	; 0x16e4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5546
  strcpy_P(line1, text_change_default_ring);
    a910:	62 ed       	ldi	r22, 0xD2	; 210
    a912:	74 e3       	ldi	r23, 0x34	; 52
    a914:	c7 01       	movw	r24, r14
    a916:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
    a91a:	0f b6       	in	r0, 0x3f	; 63
    a91c:	f8 94       	cli
    a91e:	de bf       	out	0x3e, r29	; 62
    a920:	0f be       	out	0x3f, r0	; 63
    a922:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5547
}
    a924:	2a 96       	adiw	r28, 0x0a	; 10
    a926:	0f b6       	in	r0, 0x3f	; 63
    a928:	f8 94       	cli
    a92a:	de bf       	out	0x3e, r29	; 62
    a92c:	0f be       	out	0x3f, r0	; 63
    a92e:	cd bf       	out	0x3d, r28	; 61
    a930:	df 91       	pop	r29
    a932:	cf 91       	pop	r28
    a934:	1f 91       	pop	r17
    a936:	0f 91       	pop	r16
    a938:	ff 90       	pop	r15
    a93a:	ef 90       	pop	r14
    a93c:	df 90       	pop	r13
    a93e:	cf 90       	pop	r12
    a940:	08 95       	ret

0000a942 <get_funtion_change_default_ring_button_labels(unsigned char, unsigned char, char*, char*)>:
_Z45get_funtion_change_default_ring_button_labelshhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5532
/*
 * args1 ... loop_id z menu
 * args2 ... globalni parametr z menu
 */
void get_funtion_change_default_ring_button_labels(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    a942:	bf 92       	push	r11
    a944:	cf 92       	push	r12
    a946:	df 92       	push	r13
    a948:	ef 92       	push	r14
    a94a:	ff 92       	push	r15
    a94c:	0f 93       	push	r16
    a94e:	1f 93       	push	r17
    a950:	cf 93       	push	r28
    a952:	df 93       	push	r29
    a954:	00 d0       	rcall	.+0      	; 0xa956 <get_funtion_change_default_ring_button_labels(unsigned char, unsigned char, char*, char*)+0x14>
    a956:	00 d0       	rcall	.+0      	; 0xa958 <get_funtion_change_default_ring_button_labels(unsigned char, unsigned char, char*, char*)+0x16>
    a958:	00 d0       	rcall	.+0      	; 0xa95a <get_funtion_change_default_ring_button_labels(unsigned char, unsigned char, char*, char*)+0x18>
    a95a:	1f 92       	push	r1
    a95c:	cd b7       	in	r28, 0x3d	; 61
    a95e:	de b7       	in	r29, 0x3e	; 62
    a960:	f8 2e       	mov	r15, r24
    a962:	6a 01       	movw	r12, r20
    a964:	e2 2e       	mov	r14, r18
    a966:	b3 2e       	mov	r11, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5533
  printf("%d %d\n", args1, args2);
    a968:	1f 92       	push	r1
    a96a:	6f 93       	push	r22
    a96c:	1f 92       	push	r1
    a96e:	8f 93       	push	r24
    a970:	86 e7       	ldi	r24, 0x76	; 118
    a972:	93 e0       	ldi	r25, 0x03	; 3
    a974:	9f 93       	push	r25
    a976:	8f 93       	push	r24
    a978:	0e 94 e8 b6 	call	0x16dd0	; 0x16dd0 <printf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5535
  char name[10];
  thermostat_ring_get_name(args1, name);
    a97c:	8e 01       	movw	r16, r28
    a97e:	0f 5f       	subi	r16, 0xFF	; 255
    a980:	1f 4f       	sbci	r17, 0xFF	; 255
    a982:	b8 01       	movw	r22, r16
    a984:	8f 2d       	mov	r24, r15
    a986:	0e 94 3d 54 	call	0xa87a	; 0xa87a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5536
  sprintf(line2, "Regulator %d - %s", default_ring, name);
    a98a:	1f 93       	push	r17
    a98c:	0f 93       	push	r16
    a98e:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <default_ring>
    a992:	1f 92       	push	r1
    a994:	8f 93       	push	r24
    a996:	84 e6       	ldi	r24, 0x64	; 100
    a998:	93 e0       	ldi	r25, 0x03	; 3
    a99a:	9f 93       	push	r25
    a99c:	8f 93       	push	r24
    a99e:	bf 92       	push	r11
    a9a0:	ef 92       	push	r14
    a9a2:	0e 94 27 b7 	call	0x16e4e	; 0x16e4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5537
  strcpy(line1, "Ahoj");
    a9a6:	0f b6       	in	r0, 0x3f	; 63
    a9a8:	f8 94       	cli
    a9aa:	de bf       	out	0x3e, r29	; 62
    a9ac:	0f be       	out	0x3f, r0	; 63
    a9ae:	cd bf       	out	0x3d, r28	; 61
    a9b0:	6d e7       	ldi	r22, 0x7D	; 125
    a9b2:	73 e0       	ldi	r23, 0x03	; 3
    a9b4:	c6 01       	movw	r24, r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5538
}
    a9b6:	2a 96       	adiw	r28, 0x0a	; 10
    a9b8:	0f b6       	in	r0, 0x3f	; 63
    a9ba:	f8 94       	cli
    a9bc:	de bf       	out	0x3e, r29	; 62
    a9be:	0f be       	out	0x3f, r0	; 63
    a9c0:	cd bf       	out	0x3d, r28	; 61
    a9c2:	df 91       	pop	r29
    a9c4:	cf 91       	pop	r28
    a9c6:	1f 91       	pop	r17
    a9c8:	0f 91       	pop	r16
    a9ca:	ff 90       	pop	r15
    a9cc:	ef 90       	pop	r14
    a9ce:	df 90       	pop	r13
    a9d0:	cf 90       	pop	r12
    a9d2:	bf 90       	pop	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5537
{
  printf("%d %d\n", args1, args2);
  char name[10];
  thermostat_ring_get_name(args1, name);
  sprintf(line2, "Regulator %d - %s", default_ring, name);
  strcpy(line1, "Ahoj");
    a9d4:	0c 94 c4 b6 	jmp	0x16d88	; 0x16d88 <strcpy>

0000a9d8 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z35display_element_dialog_default_ringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4769
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void display_element_dialog_default_ring(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    a9d8:	af 92       	push	r10
    a9da:	bf 92       	push	r11
    a9dc:	cf 92       	push	r12
    a9de:	df 92       	push	r13
    a9e0:	ef 92       	push	r14
    a9e2:	ff 92       	push	r15
    a9e4:	0f 93       	push	r16
    a9e6:	1f 93       	push	r17
    a9e8:	cf 93       	push	r28
    a9ea:	df 93       	push	r29
    a9ec:	cd b7       	in	r28, 0x3d	; 61
    a9ee:	de b7       	in	r29, 0x3e	; 62
    a9f0:	a8 97       	sbiw	r28, 0x28	; 40
    a9f2:	0f b6       	in	r0, 0x3f	; 63
    a9f4:	f8 94       	cli
    a9f6:	de bf       	out	0x3e, r29	; 62
    a9f8:	0f be       	out	0x3f, r0	; 63
    a9fa:	cd bf       	out	0x3d, r28	; 61
    a9fc:	6c 01       	movw	r12, r24
    a9fe:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4772
  char name[10];
  char default_text[30];
  strcpy_P(default_text, regulator_default_text);
    aa00:	63 e0       	ldi	r22, 0x03	; 3
    aa02:	74 e3       	ldi	r23, 0x34	; 52
    aa04:	ce 01       	movw	r24, r28
    aa06:	01 96       	adiw	r24, 0x01	; 1
    aa08:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4773
  if (thermostat_ring_get_active(default_ring) != 255)
    aa0c:	10 91 0c 0a 	lds	r17, 0x0A0C	; 0x800a0c <default_ring>
    aa10:	81 2f       	mov	r24, r17
    aa12:	0e 94 f5 53 	call	0xa7ea	; 0xa7ea <thermostat_ring_get_active(unsigned char)>
    aa16:	8f 3f       	cpi	r24, 0xFF	; 255
    aa18:	51 f1       	breq	.+84     	; 0xaa6e <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4775
  {
    thermostat_ring_get_name(default_ring, name);
    aa1a:	be 01       	movw	r22, r28
    aa1c:	61 5e       	subi	r22, 0xE1	; 225
    aa1e:	7f 4f       	sbci	r23, 0xFF	; 255
    aa20:	81 2f       	mov	r24, r17
    aa22:	0e 94 3d 54 	call	0xa87a	; 0xa87a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4781
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_err);
    strcat(default_text, name);
    aa26:	be 01       	movw	r22, r28
    aa28:	61 5e       	subi	r22, 0xE1	; 225
    aa2a:	7f 4f       	sbci	r23, 0xFF	; 255
    aa2c:	ce 01       	movw	r24, r28
    aa2e:	01 96       	adiw	r24, 0x01	; 1
    aa30:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4783
  }
  show_string(default_text, x, y, 2, BLACK, WHITE, 0);
    aa34:	ee 24       	eor	r14, r14
    aa36:	ea 94       	dec	r14
    aa38:	fe 2c       	mov	r15, r14
    aa3a:	10 e0       	ldi	r17, 0x00	; 0
    aa3c:	00 e0       	ldi	r16, 0x00	; 0
    aa3e:	22 e0       	ldi	r18, 0x02	; 2
    aa40:	a5 01       	movw	r20, r10
    aa42:	b6 01       	movw	r22, r12
    aa44:	ce 01       	movw	r24, r28
    aa46:	01 96       	adiw	r24, 0x01	; 1
    aa48:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4784
}
    aa4c:	a8 96       	adiw	r28, 0x28	; 40
    aa4e:	0f b6       	in	r0, 0x3f	; 63
    aa50:	f8 94       	cli
    aa52:	de bf       	out	0x3e, r29	; 62
    aa54:	0f be       	out	0x3f, r0	; 63
    aa56:	cd bf       	out	0x3d, r28	; 61
    aa58:	df 91       	pop	r29
    aa5a:	cf 91       	pop	r28
    aa5c:	1f 91       	pop	r17
    aa5e:	0f 91       	pop	r16
    aa60:	ff 90       	pop	r15
    aa62:	ef 90       	pop	r14
    aa64:	df 90       	pop	r13
    aa66:	cf 90       	pop	r12
    aa68:	bf 90       	pop	r11
    aa6a:	af 90       	pop	r10
    aa6c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4780
    thermostat_ring_get_name(default_ring, name);
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_err);
    aa6e:	65 e3       	ldi	r22, 0x35	; 53
    aa70:	74 e3       	ldi	r23, 0x34	; 52
    aa72:	ce 01       	movw	r24, r28
    aa74:	4f 96       	adiw	r24, 0x1f	; 31
    aa76:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
    aa7a:	d5 cf       	rjmp	.-86     	; 0xaa26 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x4e>

0000aa7c <get_function_thermostat_heat_or_cool(unsigned char)>:
_Z36get_function_thermostat_heat_or_coolh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5579
  }
}


uint8_t get_function_thermostat_heat_or_cool(uint8_t args)
{
    aa7c:	cf 93       	push	r28
    aa7e:	df 93       	push	r29
    aa80:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5582
  uint8_t ret = 0;
  uint8_t b;
  if (thermostat_ring_get_active(default_ring) != 255)
    aa82:	c0 91 0c 0a 	lds	r28, 0x0A0C	; 0x800a0c <default_ring>
    aa86:	8c 2f       	mov	r24, r28
    aa88:	0e 94 f5 53 	call	0xa7ea	; 0xa7ea <thermostat_ring_get_active(unsigned char)>
    aa8c:	8f 3f       	cpi	r24, 0xFF	; 255
    aa8e:	69 f0       	breq	.+26     	; 0xaaaa <get_function_thermostat_heat_or_cool(unsigned char)+0x2e>
thermostat_ring_get_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:197
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
    aa90:	21 e2       	ldi	r18, 0x21	; 33
    aa92:	c2 9f       	mul	r28, r18
    aa94:	c0 01       	movw	r24, r0
    aa96:	11 24       	eor	r1, r1
    aa98:	88 5a       	subi	r24, 0xA8	; 168
    aa9a:	9e 4f       	sbci	r25, 0xFE	; 254
    aa9c:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z36get_function_thermostat_heat_or_coolh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5585
  {
    b = thermostat_ring_get_status_bites(default_ring, STATUS_BIT_HEAT_OR_COOL);
    if (b == 0 && args == TERM_MODE_MAN_HEAT)
    aaa0:	80 fd       	sbrc	r24, 0
    aaa2:	05 c0       	rjmp	.+10     	; 0xaaae <get_function_thermostat_heat_or_cool(unsigned char)+0x32>
    aaa4:	81 e0       	ldi	r24, 0x01	; 1
    aaa6:	d3 30       	cpi	r29, 0x03	; 3
    aaa8:	29 f0       	breq	.+10     	; 0xaab4 <get_function_thermostat_heat_or_cool(unsigned char)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5587
      ret = 1;
    if (b != 0 && args == TERM_MODE_MAN_COOL)
    aaaa:	80 e0       	ldi	r24, 0x00	; 0
    aaac:	03 c0       	rjmp	.+6      	; 0xaab4 <get_function_thermostat_heat_or_cool(unsigned char)+0x38>
    aaae:	81 e0       	ldi	r24, 0x01	; 1
    aab0:	d5 30       	cpi	r29, 0x05	; 5
    aab2:	d9 f7       	brne	.-10     	; 0xaaaa <get_function_thermostat_heat_or_cool(unsigned char)+0x2e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5591
      ret = 1;
  }
  return ret;
}
    aab4:	df 91       	pop	r29
    aab6:	cf 91       	pop	r28
    aab8:	08 95       	ret

0000aaba <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:35
  }
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    aaba:	af 92       	push	r10
    aabc:	bf 92       	push	r11
    aabe:	cf 92       	push	r12
    aac0:	df 92       	push	r13
    aac2:	ef 92       	push	r14
    aac4:	ff 92       	push	r15
    aac6:	0f 93       	push	r16
    aac8:	1f 93       	push	r17
    aaca:	cf 93       	push	r28
    aacc:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:37
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
    aace:	86 30       	cpi	r24, 0x06	; 6
    aad0:	08 f0       	brcs	.+2      	; 0xaad4 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    aad2:	56 c0       	rjmp	.+172    	; 0xab80 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
    aad4:	8b 01       	movw	r16, r22
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:39
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    aad6:	96 e1       	ldi	r25, 0x16	; 22
    aad8:	89 9f       	mul	r24, r25
    aada:	e0 01       	movw	r28, r0
    aadc:	11 24       	eor	r1, r1
    aade:	ce 01       	movw	r24, r28
    aae0:	88 53       	subi	r24, 0x38	; 56
    aae2:	9f 4f       	sbci	r25, 0xFF	; 255
    aae4:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    aae8:	f8 01       	movw	r30, r16
    aaea:	81 93       	st	Z+, r24
    aaec:	6f 01       	movw	r12, r30
    aaee:	7e 01       	movw	r14, r28
    aaf0:	f9 ec       	ldi	r31, 0xC9	; 201
    aaf2:	ef 0e       	add	r14, r31
    aaf4:	f1 1c       	adc	r15, r1
    aaf6:	5e 01       	movw	r10, r28
    aaf8:	81 ed       	ldi	r24, 0xD1	; 209
    aafa:	a8 0e       	add	r10, r24
    aafc:	b1 1c       	adc	r11, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:42
    for (uint8_t m = 0; m < 8; m++)
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
    aafe:	c7 01       	movw	r24, r14
    ab00:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ab04:	f6 01       	movw	r30, r12
    ab06:	81 93       	st	Z+, r24
    ab08:	6f 01       	movw	r12, r30
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:43
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    ab0a:	c7 01       	movw	r24, r14
    ab0c:	0b 96       	adiw	r24, 0x0b	; 11
    ab0e:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ab12:	f6 01       	movw	r30, r12
    ab14:	82 87       	std	Z+10, r24	; 0x0a
    ab16:	ff ef       	ldi	r31, 0xFF	; 255
    ab18:	ef 1a       	sub	r14, r31
    ab1a:	ff 0a       	sbc	r15, r31
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:40
{
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    for (uint8_t m = 0; m < 8; m++)
    ab1c:	ea 14       	cp	r14, r10
    ab1e:	fb 04       	cpc	r15, r11
    ab20:	71 f7       	brne	.-36     	; 0xaafe <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:45
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    }
    tds->name[7] = 0;
    ab22:	f8 01       	movw	r30, r16
    ab24:	13 8a       	std	Z+19, r1	; 0x13
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:46
    tds->assigned_ds2482 = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned);
    ab26:	c7 01       	movw	r24, r14
    ab28:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ab2c:	f8 01       	movw	r30, r16
    ab2e:	81 87       	std	Z+9, r24	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:47
    tds->offset = (EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high) << 8) + EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low);
    ab30:	ce 01       	movw	r24, r28
    ab32:	8e 52       	subi	r24, 0x2E	; 46
    ab34:	9f 4f       	sbci	r25, 0xFF	; 255
    ab36:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ab3a:	f8 2e       	mov	r15, r24
    ab3c:	ce 01       	movw	r24, r28
    ab3e:	8d 52       	subi	r24, 0x2D	; 45
    ab40:	9f 4f       	sbci	r25, 0xFF	; 255
    ab42:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ab46:	2f 2d       	mov	r18, r15
    ab48:	30 e0       	ldi	r19, 0x00	; 0
    ab4a:	32 2f       	mov	r19, r18
    ab4c:	22 27       	eor	r18, r18
    ab4e:	82 0f       	add	r24, r18
    ab50:	93 2f       	mov	r25, r19
    ab52:	91 1d       	adc	r25, r1
    ab54:	f8 01       	movw	r30, r16
    ab56:	93 87       	std	Z+11, r25	; 0x0b
    ab58:	82 87       	std	Z+10, r24	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:48
    tds->period = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period);
    ab5a:	ce 01       	movw	r24, r28
    ab5c:	84 52       	subi	r24, 0x24	; 36
    ab5e:	9f 4f       	sbci	r25, 0xFF	; 255
    ab60:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ab64:	f8 01       	movw	r30, r16
    ab66:	84 8b       	std	Z+20, r24	; 0x14
    ab68:	81 e0       	ldi	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:52
    ret = 1;
  }
  return ret;
}
    ab6a:	df 91       	pop	r29
    ab6c:	cf 91       	pop	r28
    ab6e:	1f 91       	pop	r17
    ab70:	0f 91       	pop	r16
    ab72:	ff 90       	pop	r15
    ab74:	ef 90       	pop	r14
    ab76:	df 90       	pop	r13
    ab78:	cf 90       	pop	r12
    ab7a:	bf 90       	pop	r11
    ab7c:	af 90       	pop	r10
    ab7e:	08 95       	ret
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:36
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  uint8_t ret = 0;
    ab80:	80 e0       	ldi	r24, 0x00	; 0
    ab82:	f3 cf       	rjmp	.-26     	; 0xab6a <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

0000ab84 <tds_update_associate()>:
_Z20tds_update_associatev():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:141
  tds_set_clear(w_rom[idx].tds_idx);
}

//// funkce, ktera zpetne nastavi do w_rom tds_idx, do jake realne tds je to assiciovano
void tds_update_associate(void)
{
    ab84:	ef 92       	push	r14
    ab86:	ff 92       	push	r15
    ab88:	0f 93       	push	r16
    ab8a:	1f 93       	push	r17
    ab8c:	cf 93       	push	r28
    ab8e:	df 93       	push	r29
    ab90:	cd b7       	in	r28, 0x3d	; 61
    ab92:	de b7       	in	r29, 0x3e	; 62
    ab94:	6e 97       	sbiw	r28, 0x1e	; 30
    ab96:	0f b6       	in	r0, 0x3f	; 63
    ab98:	f8 94       	cli
    ab9a:	de bf       	out	0x3e, r29	; 62
    ab9c:	0f be       	out	0x3f, r0	; 63
    ab9e:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:144
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;
    aba0:	1f 8a       	std	Y+23, r1	; 0x17
    aba2:	18 8e       	std	Y+24, r1	; 0x18
    aba4:	19 8e       	std	Y+25, r1	; 0x19
    aba6:	1a 8e       	std	Y+26, r1	; 0x1a
    aba8:	1b 8e       	std	Y+27, r1	; 0x1b
    abaa:	1c 8e       	std	Y+28, r1	; 0x1c
    abac:	1d 8e       	std	Y+29, r1	; 0x1d
    abae:	1e 8e       	std	Y+30, r1	; 0x1e
    abb0:	0d eb       	ldi	r16, 0xBD	; 189
    abb2:	19 e0       	ldi	r17, 0x09	; 9
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:148

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
  {
    w_rom[wrom_id].tds_idx = 255;
    abb4:	ee 24       	eor	r14, r14
    abb6:	ea 94       	dec	r14
    abb8:	f8 01       	movw	r30, r16
    abba:	e2 86       	std	Z+10, r14	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:149
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
    abbc:	b8 01       	movw	r22, r16
    abbe:	ce 01       	movw	r24, r28
    abc0:	47 96       	adiw	r24, 0x17	; 23
    abc2:	0e 94 c8 23 	call	0x4790	; 0x4790 <tds_compare_rom(unsigned char*, unsigned char*)>
    abc6:	81 11       	cpse	r24, r1
    abc8:	14 c0       	rjmp	.+40     	; 0xabf2 <tds_update_associate()+0x6e>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:152
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    abca:	f1 2c       	mov	r15, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:154
    {
      get_tds18s20(tds_id, &tds);
    abcc:	be 01       	movw	r22, r28
    abce:	6f 5f       	subi	r22, 0xFF	; 255
    abd0:	7f 4f       	sbci	r23, 0xFF	; 255
    abd2:	8f 2d       	mov	r24, r15
    abd4:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:155
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
    abd8:	b8 01       	movw	r22, r16
    abda:	ce 01       	movw	r24, r28
    abdc:	02 96       	adiw	r24, 0x02	; 2
    abde:	0e 94 c8 23 	call	0x4790	; 0x4790 <tds_compare_rom(unsigned char*, unsigned char*)>
    abe2:	88 23       	and	r24, r24
    abe4:	11 f0       	breq	.+4      	; 0xabea <tds_update_associate()+0x66>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:156
        w_rom[wrom_id].tds_idx = tds_id;
    abe6:	f8 01       	movw	r30, r16
    abe8:	f2 86       	std	Z+10, r15	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:152
  {
    w_rom[wrom_id].tds_idx = 255;
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    abea:	f3 94       	inc	r15
    abec:	f6 e0       	ldi	r31, 0x06	; 6
    abee:	ff 12       	cpse	r15, r31
    abf0:	ed cf       	rjmp	.-38     	; 0xabcc <tds_update_associate()+0x48>
    abf2:	05 5f       	subi	r16, 0xF5	; 245
    abf4:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:146
{
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
    abf6:	89 e0       	ldi	r24, 0x09	; 9
    abf8:	0f 3f       	cpi	r16, 0xFF	; 255
    abfa:	18 07       	cpc	r17, r24
    abfc:	e9 f6       	brne	.-70     	; 0xabb8 <tds_update_associate()+0x34>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:159
      get_tds18s20(tds_id, &tds);
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
        w_rom[wrom_id].tds_idx = tds_id;
    }
  }
}
    abfe:	6e 96       	adiw	r28, 0x1e	; 30
    ac00:	0f b6       	in	r0, 0x3f	; 63
    ac02:	f8 94       	cli
    ac04:	de bf       	out	0x3e, r29	; 62
    ac06:	0f be       	out	0x3f, r0	; 63
    ac08:	cd bf       	out	0x3d, r28	; 61
    ac0a:	df 91       	pop	r29
    ac0c:	cf 91       	pop	r28
    ac0e:	1f 91       	pop	r17
    ac10:	0f 91       	pop	r16
    ac12:	ff 90       	pop	r15
    ac14:	ef 90       	pop	r14
    ac16:	08 95       	ret

0000ac18 <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:202
{
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
    ac18:	af 92       	push	r10
    ac1a:	bf 92       	push	r11
    ac1c:	cf 92       	push	r12
    ac1e:	df 92       	push	r13
    ac20:	ef 92       	push	r14
    ac22:	ff 92       	push	r15
    ac24:	1f 93       	push	r17
    ac26:	cf 93       	push	r28
    ac28:	df 93       	push	r29
    ac2a:	cd b7       	in	r28, 0x3d	; 61
    ac2c:	de b7       	in	r29, 0x3e	; 62
    ac2e:	66 97       	sbiw	r28, 0x16	; 22
    ac30:	0f b6       	in	r0, 0x3f	; 63
    ac32:	f8 94       	cli
    ac34:	de bf       	out	0x3e, r29	; 62
    ac36:	0f be       	out	0x3f, r0	; 63
    ac38:	cd bf       	out	0x3d, r28	; 61
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:179
/// funkce overeni associace
uint8_t tds_check_associate(uint8_t id)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
    ac3a:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <Global_HWwirenum>
    ac3e:	89 17       	cp	r24, r25
    ac40:	a0 f0       	brcs	.+40     	; 0xac6a <tds_associate(unsigned char)+0x52>
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
    ac42:	1f ef       	ldi	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
    ac44:	0e 94 c2 55 	call	0xab84	; 0xab84 <tds_update_associate()>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:226
  return ret;
}
    ac48:	81 2f       	mov	r24, r17
    ac4a:	66 96       	adiw	r28, 0x16	; 22
    ac4c:	0f b6       	in	r0, 0x3f	; 63
    ac4e:	f8 94       	cli
    ac50:	de bf       	out	0x3e, r29	; 62
    ac52:	0f be       	out	0x3f, r0	; 63
    ac54:	cd bf       	out	0x3d, r28	; 61
    ac56:	df 91       	pop	r29
    ac58:	cf 91       	pop	r28
    ac5a:	1f 91       	pop	r17
    ac5c:	ff 90       	pop	r15
    ac5e:	ef 90       	pop	r14
    ac60:	df 90       	pop	r13
    ac62:	cf 90       	pop	r12
    ac64:	bf 90       	pop	r11
    ac66:	af 90       	pop	r10
    ac68:	08 95       	ret
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:184
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    ac6a:	a8 2e       	mov	r10, r24
    ac6c:	b1 2c       	mov	r11, r1
    ac6e:	2b e0       	ldi	r18, 0x0B	; 11
    ac70:	82 9f       	mul	r24, r18
    ac72:	c0 01       	movw	r24, r0
    ac74:	11 24       	eor	r1, r1
    ac76:	fc 01       	movw	r30, r24
    ac78:	e3 54       	subi	r30, 0x43	; 67
    ac7a:	f6 4f       	sbci	r31, 0xF6	; 246
    ac7c:	7f 01       	movw	r14, r30
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    ac7e:	10 e0       	ldi	r17, 0x00	; 0
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:183
    {
      get_tds18s20(idx, &tds);
    ac80:	be 01       	movw	r22, r28
    ac82:	6f 5f       	subi	r22, 0xFF	; 255
    ac84:	7f 4f       	sbci	r23, 0xFF	; 255
    ac86:	81 2f       	mov	r24, r17
    ac88:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:184
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    ac8c:	b7 01       	movw	r22, r14
    ac8e:	ce 01       	movw	r24, r28
    ac90:	02 96       	adiw	r24, 0x02	; 2
    ac92:	0e 94 c8 23 	call	0x4790	; 0x4790 <tds_compare_rom(unsigned char*, unsigned char*)>
    ac96:	81 11       	cpse	r24, r1
    ac98:	d4 cf       	rjmp	.-88     	; 0xac42 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    ac9a:	1f 5f       	subi	r17, 0xFF	; 255
    ac9c:	16 30       	cpi	r17, 0x06	; 6
    ac9e:	81 f7       	brne	.-32     	; 0xac80 <tds_associate(unsigned char)+0x68>
    aca0:	10 e0       	ldi	r17, 0x00	; 0
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:210
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
    aca2:	2b e0       	ldi	r18, 0x0B	; 11
    aca4:	2a 9d       	mul	r18, r10
    aca6:	c0 01       	movw	r24, r0
    aca8:	2b 9d       	mul	r18, r11
    acaa:	90 0d       	add	r25, r0
    acac:	11 24       	eor	r1, r1
    acae:	fc 01       	movw	r30, r24
    acb0:	ea 53       	subi	r30, 0x3A	; 58
    acb2:	f6 4f       	sbci	r31, 0xF6	; 246
    acb4:	6f 01       	movw	r12, r30
    acb6:	03 c0       	rjmp	.+6      	; 0xacbe <tds_associate(unsigned char)+0xa6>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:207
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    acb8:	1f 5f       	subi	r17, 0xFF	; 255
    acba:	16 30       	cpi	r17, 0x06	; 6
    acbc:	11 f2       	breq	.-124    	; 0xac42 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:209
    {
      get_tds18s20(idx, &tds);
    acbe:	be 01       	movw	r22, r28
    acc0:	6f 5f       	subi	r22, 0xFF	; 255
    acc2:	7f 4f       	sbci	r23, 0xFF	; 255
    acc4:	81 2f       	mov	r24, r17
    acc6:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
    acca:	89 81       	ldd	r24, Y+1	; 0x01
    accc:	81 11       	cpse	r24, r1
    acce:	f4 cf       	rjmp	.-24     	; 0xacb8 <tds_associate(unsigned char)+0xa0>
    acd0:	f6 01       	movw	r30, r12
    acd2:	80 81       	ld	r24, Z
    acd4:	81 30       	cpi	r24, 0x01	; 1
    acd6:	81 f7       	brne	.-32     	; 0xacb8 <tds_associate(unsigned char)+0xa0>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
    acd8:	89 83       	std	Y+1, r24	; 0x01
    acda:	fe 01       	movw	r30, r28
    acdc:	32 96       	adiw	r30, 0x02	; 2
    acde:	90 e0       	ldi	r25, 0x00	; 0
    ace0:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:214
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
    ace2:	d7 01       	movw	r26, r14
    ace4:	a8 0f       	add	r26, r24
    ace6:	b9 1f       	adc	r27, r25
    ace8:	2c 91       	ld	r18, X
    acea:	21 93       	st	Z+, r18
    acec:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:213
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
    acee:	88 30       	cpi	r24, 0x08	; 8
    acf0:	91 05       	cpc	r25, r1
    acf2:	b9 f7       	brne	.-18     	; 0xace2 <tds_associate(unsigned char)+0xca>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
    acf4:	2b e0       	ldi	r18, 0x0B	; 11
    acf6:	12 9f       	mul	r17, r18
    acf8:	f0 01       	movw	r30, r0
    acfa:	11 24       	eor	r1, r1
    acfc:	e3 54       	subi	r30, 0x43	; 67
    acfe:	f6 4f       	sbci	r31, 0xF6	; 246
    ad00:	e0 85       	ldd	r30, Z+8	; 0x08
    ad02:	f0 e0       	ldi	r31, 0x00	; 0
    ad04:	ee 0f       	add	r30, r30
    ad06:	ff 1f       	adc	r31, r31
    ad08:	ed 58       	subi	r30, 0x8D	; 141
    ad0a:	f6 4f       	sbci	r31, 0xF6	; 246
    ad0c:	80 81       	ld	r24, Z
    ad0e:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
    ad10:	be 01       	movw	r22, r28
    ad12:	6f 5f       	subi	r22, 0xFF	; 255
    ad14:	7f 4f       	sbci	r23, 0xFF	; 255
    ad16:	81 2f       	mov	r24, r17
    ad18:	0e 94 a2 51 	call	0xa344	; 0xa344 <set_tds18s20(unsigned char, struct_DDS18s20*)>
    ad1c:	3e e1       	ldi	r19, 0x1E	; 30
    ad1e:	13 9f       	mul	r17, r19
    ad20:	a0 01       	movw	r20, r0
    ad22:	11 24       	eor	r1, r1
    ad24:	90 e0       	ldi	r25, 0x00	; 0
    ad26:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    ad28:	20 e2       	ldi	r18, 0x20	; 32
    ad2a:	3e e4       	ldi	r19, 0x4E	; 78
    ad2c:	fc 01       	movw	r30, r24
    ad2e:	ee 0f       	add	r30, r30
    ad30:	ff 1f       	adc	r31, r31
    ad32:	e4 0f       	add	r30, r20
    ad34:	f5 1f       	adc	r31, r21
    ad36:	e9 5e       	subi	r30, 0xE9	; 233
    ad38:	f5 4f       	sbci	r31, 0xF5	; 245
    ad3a:	30 87       	std	Z+8, r19	; 0x08
    ad3c:	27 83       	std	Z+7, r18	; 0x07
    ad3e:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:217
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    ad40:	8a 30       	cpi	r24, 0x0A	; 10
    ad42:	91 05       	cpc	r25, r1
    ad44:	99 f7       	brne	.-26     	; 0xad2c <tds_associate(unsigned char)+0x114>
    ad46:	7e cf       	rjmp	.-260    	; 0xac44 <tds_associate(unsigned char)+0x2c>

0000ad48 <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:120
  return tds.period;
}

//// funkce vymaze associovane 1wire -> tds
void tds_set_clear(uint8_t idx)
{
    ad48:	1f 93       	push	r17
    ad4a:	cf 93       	push	r28
    ad4c:	df 93       	push	r29
    ad4e:	cd b7       	in	r28, 0x3d	; 61
    ad50:	de b7       	in	r29, 0x3e	; 62
    ad52:	66 97       	sbiw	r28, 0x16	; 22
    ad54:	0f b6       	in	r0, 0x3f	; 63
    ad56:	f8 94       	cli
    ad58:	de bf       	out	0x3e, r29	; 62
    ad5a:	0f be       	out	0x3f, r0	; 63
    ad5c:	cd bf       	out	0x3d, r28	; 61
    ad5e:	18 2f       	mov	r17, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:122
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ad60:	be 01       	movw	r22, r28
    ad62:	6f 5f       	subi	r22, 0xFF	; 255
    ad64:	7f 4f       	sbci	r23, 0xFF	; 255
    ad66:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:123
  tds.used = 0;
    ad6a:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:124
  strcpy(tds.name, "FREE");
    ad6c:	6f e5       	ldi	r22, 0x5F	; 95
    ad6e:	73 e0       	ldi	r23, 0x03	; 3
    ad70:	ce 01       	movw	r24, r28
    ad72:	0d 96       	adiw	r24, 0x0d	; 13
    ad74:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:125
  tds.offset = 0;
    ad78:	1c 86       	std	Y+12, r1	; 0x0c
    ad7a:	1b 86       	std	Y+11, r1	; 0x0b
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:126
  tds.period = 10;
    ad7c:	8a e0       	ldi	r24, 0x0A	; 10
    ad7e:	8d 8b       	std	Y+21, r24	; 0x15
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:128
  for (uint8_t i = 0; i < 8; i++)
    tds.rom[i] = 0;
    ad80:	1a 82       	std	Y+2, r1	; 0x02
    ad82:	1b 82       	std	Y+3, r1	; 0x03
    ad84:	1c 82       	std	Y+4, r1	; 0x04
    ad86:	1d 82       	std	Y+5, r1	; 0x05
    ad88:	1e 82       	std	Y+6, r1	; 0x06
    ad8a:	1f 82       	std	Y+7, r1	; 0x07
    ad8c:	18 86       	std	Y+8, r1	; 0x08
    ad8e:	19 86       	std	Y+9, r1	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:129
  tds.assigned_ds2482 = 0;
    ad90:	1a 86       	std	Y+10, r1	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:130
  set_tds18s20(idx, &tds);
    ad92:	be 01       	movw	r22, r28
    ad94:	6f 5f       	subi	r22, 0xFF	; 255
    ad96:	7f 4f       	sbci	r23, 0xFF	; 255
    ad98:	81 2f       	mov	r24, r17
    ad9a:	0e 94 a2 51 	call	0xa344	; 0xa344 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:131
  tds_update_associate();
    ad9e:	0e 94 c2 55 	call	0xab84	; 0xab84 <tds_update_associate()>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:132
}
    ada2:	66 96       	adiw	r28, 0x16	; 22
    ada4:	0f b6       	in	r0, 0x3f	; 63
    ada6:	f8 94       	cli
    ada8:	de bf       	out	0x3e, r29	; 62
    adaa:	0f be       	out	0x3f, r0	; 63
    adac:	cd bf       	out	0x3d, r28	; 61
    adae:	df 91       	pop	r29
    adb0:	cf 91       	pop	r28
    adb2:	1f 91       	pop	r17
    adb4:	08 95       	ret

0000adb6 <click_tds_deassociate_onewire(unsigned char, unsigned char)>:
_Z29click_tds_deassociate_onewirehh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:136

void tds_set_clear_wrom_id(uint8_t idx)
{
  tds_set_clear(w_rom[idx].tds_idx);
    adb6:	8b e0       	ldi	r24, 0x0B	; 11
    adb8:	68 9f       	mul	r22, r24
    adba:	f0 01       	movw	r30, r0
    adbc:	11 24       	eor	r1, r1
    adbe:	e3 54       	subi	r30, 0x43	; 67
    adc0:	f6 4f       	sbci	r31, 0xF6	; 246
    adc2:	82 85       	ldd	r24, Z+10	; 0x0a
    adc4:	0e 94 a4 56 	call	0xad48	; 0xad48 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5311
/// zruseni associace
void click_tds_deassociate_onewire(uint8_t args1, uint8_t idx)
{

  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu();
    adc8:	0c 94 0b 32 	jmp	0x6416	; 0x6416 <MenuHistoryPrevMenu()>

0000adcc <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5261
   args2 parametr ... definece z globalniho nastaveni menu, zde v nasem pripade je to index 1w cidla na sbernici
 * *line1 - vraci ROM adresu
 * *line2 - vraci akci associovat/nastavit
*/
void get_function_one_wire_associate_or_setting_text_button(uint8_t args1, uint8_t args2 , char *line1, char *line2)
{
    adcc:	8f 92       	push	r8
    adce:	9f 92       	push	r9
    add0:	af 92       	push	r10
    add2:	bf 92       	push	r11
    add4:	cf 92       	push	r12
    add6:	df 92       	push	r13
    add8:	ef 92       	push	r14
    adda:	ff 92       	push	r15
    addc:	0f 93       	push	r16
    adde:	1f 93       	push	r17
    ade0:	cf 93       	push	r28
    ade2:	df 93       	push	r29
    ade4:	cd b7       	in	r28, 0x3d	; 61
    ade6:	de b7       	in	r29, 0x3e	; 62
    ade8:	e0 97       	sbiw	r28, 0x30	; 48
    adea:	0f b6       	in	r0, 0x3f	; 63
    adec:	f8 94       	cli
    adee:	de bf       	out	0x3e, r29	; 62
    adf0:	0f be       	out	0x3f, r0	; 63
    adf2:	cd bf       	out	0x3d, r28	; 61
    adf4:	18 2f       	mov	r17, r24
    adf6:	94 2e       	mov	r9, r20
    adf8:	85 2e       	mov	r8, r21
    adfa:	79 01       	movw	r14, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5263
  char str2[26];
  strcpy_P(line1, text_not_used);
    adfc:	62 e9       	ldi	r22, 0x92	; 146
    adfe:	74 e3       	ldi	r23, 0x34	; 52
    ae00:	84 2f       	mov	r24, r20
    ae02:	95 2f       	mov	r25, r21
    ae04:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5264
  strcpy(line2, "-");
    ae08:	60 e5       	ldi	r22, 0x50	; 80
    ae0a:	73 e0       	ldi	r23, 0x03	; 3
    ae0c:	c7 01       	movw	r24, r14
    ae0e:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5265
  if (w_rom[args1].used == 1)
    ae12:	4b e0       	ldi	r20, 0x0B	; 11
    ae14:	41 9f       	mul	r20, r17
    ae16:	c0 01       	movw	r24, r0
    ae18:	11 24       	eor	r1, r1
    ae1a:	9c 01       	movw	r18, r24
    ae1c:	23 54       	subi	r18, 0x43	; 67
    ae1e:	36 4f       	sbci	r19, 0xF6	; 246
    ae20:	69 01       	movw	r12, r18
    ae22:	f9 01       	movw	r30, r18
    ae24:	81 85       	ldd	r24, Z+9	; 0x09
    ae26:	81 30       	cpi	r24, 0x01	; 1
    ae28:	c9 f5       	brne	.+114    	; 0xae9c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xd0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5267
  {
    createString(str2, ':', w_rom[args1].rom, 8, 16);
    ae2a:	a9 01       	movw	r20, r18
    ae2c:	00 e1       	ldi	r16, 0x10	; 16
    ae2e:	28 e0       	ldi	r18, 0x08	; 8
    ae30:	6a e3       	ldi	r22, 0x3A	; 58
    ae32:	ce 01       	movw	r24, r28
    ae34:	01 96       	adiw	r24, 0x01	; 1
    ae36:	5c 01       	movw	r10, r24
    ae38:	0e 94 7b 96 	call	0x12cf6	; 0x12cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5268
    sprintf(line1, "%d: %s", args1, str2);
    ae3c:	bf 92       	push	r11
    ae3e:	af 92       	push	r10
    ae40:	1f 92       	push	r1
    ae42:	1f 93       	push	r17
    ae44:	82 e8       	ldi	r24, 0x82	; 130
    ae46:	93 e0       	ldi	r25, 0x03	; 3
    ae48:	9f 93       	push	r25
    ae4a:	8f 93       	push	r24
    ae4c:	8f 92       	push	r8
    ae4e:	9f 92       	push	r9
    ae50:	0e 94 27 b7 	call	0x16e4e	; 0x16e4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5270

    if (w_rom[args1].tds_idx != 255)
    ae54:	0f b6       	in	r0, 0x3f	; 63
    ae56:	f8 94       	cli
    ae58:	de bf       	out	0x3e, r29	; 62
    ae5a:	0f be       	out	0x3f, r0	; 63
    ae5c:	cd bf       	out	0x3d, r28	; 61
    ae5e:	f6 01       	movw	r30, r12
    ae60:	82 85       	ldd	r24, Z+10	; 0x0a
    ae62:	8f 3f       	cpi	r24, 0xFF	; 255
    ae64:	71 f1       	breq	.+92     	; 0xaec2 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5272
    {
      strcpy_P(line2, text_nastavit_tds);
    ae66:	6f e7       	ldi	r22, 0x7F	; 127
    ae68:	74 e3       	ldi	r23, 0x34	; 52
    ae6a:	c7 01       	movw	r24, r14
    ae6c:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ae70:	be 01       	movw	r22, r28
    ae72:	65 5e       	subi	r22, 0xE5	; 229
    ae74:	7f 4f       	sbci	r23, 0xFF	; 255
    ae76:	f6 01       	movw	r30, r12
    ae78:	82 85       	ldd	r24, Z+10	; 0x0a
    ae7a:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    ae7e:	be 01       	movw	r22, r28
    ae80:	69 5d       	subi	r22, 0xD9	; 217
    ae82:	7f 4f       	sbci	r23, 0xFF	; 255
    ae84:	c5 01       	movw	r24, r10
    ae86:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
_Z54get_function_one_wire_associate_or_setting_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5274
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
    ae8a:	64 e2       	ldi	r22, 0x24	; 36
    ae8c:	76 e0       	ldi	r23, 0x06	; 6
    ae8e:	c7 01       	movw	r24, r14
    ae90:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5275
      strcat(line2, str2);
    ae94:	b5 01       	movw	r22, r10
    ae96:	c7 01       	movw	r24, r14
    ae98:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5280
    }
    else
      strcpy_P(line2, text_associovat_tds);
  }
}
    ae9c:	e0 96       	adiw	r28, 0x30	; 48
    ae9e:	0f b6       	in	r0, 0x3f	; 63
    aea0:	f8 94       	cli
    aea2:	de bf       	out	0x3e, r29	; 62
    aea4:	0f be       	out	0x3f, r0	; 63
    aea6:	cd bf       	out	0x3d, r28	; 61
    aea8:	df 91       	pop	r29
    aeaa:	cf 91       	pop	r28
    aeac:	1f 91       	pop	r17
    aeae:	0f 91       	pop	r16
    aeb0:	ff 90       	pop	r15
    aeb2:	ef 90       	pop	r14
    aeb4:	df 90       	pop	r13
    aeb6:	cf 90       	pop	r12
    aeb8:	bf 90       	pop	r11
    aeba:	af 90       	pop	r10
    aebc:	9f 90       	pop	r9
    aebe:	8f 90       	pop	r8
    aec0:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5278
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
      strcat(line2, str2);
    }
    else
      strcpy_P(line2, text_associovat_tds);
    aec2:	6f e9       	ldi	r22, 0x9F	; 159
    aec4:	74 e3       	ldi	r23, 0x34	; 52
    aec6:	c7 01       	movw	r24, r14
    aec8:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
    aecc:	e7 cf       	rjmp	.-50     	; 0xae9c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xd0>

0000aece <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z36display_element_show_tds_info_staticjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4881
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
  }
}
////
void display_element_show_tds_info_static(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    aece:	3f 92       	push	r3
    aed0:	4f 92       	push	r4
    aed2:	5f 92       	push	r5
    aed4:	6f 92       	push	r6
    aed6:	7f 92       	push	r7
    aed8:	8f 92       	push	r8
    aeda:	9f 92       	push	r9
    aedc:	af 92       	push	r10
    aede:	bf 92       	push	r11
    aee0:	cf 92       	push	r12
    aee2:	df 92       	push	r13
    aee4:	ef 92       	push	r14
    aee6:	ff 92       	push	r15
    aee8:	0f 93       	push	r16
    aeea:	1f 93       	push	r17
    aeec:	cf 93       	push	r28
    aeee:	df 93       	push	r29
    aef0:	cd b7       	in	r28, 0x3d	; 61
    aef2:	de b7       	in	r29, 0x3e	; 62
    aef4:	ca 54       	subi	r28, 0x4A	; 74
    aef6:	d1 09       	sbc	r29, r1
    aef8:	0f b6       	in	r0, 0x3f	; 63
    aefa:	f8 94       	cli
    aefc:	de bf       	out	0x3e, r29	; 62
    aefe:	0f be       	out	0x3f, r0	; 63
    af00:	cd bf       	out	0x3d, r28	; 61
    af02:	4c 01       	movw	r8, r24
    af04:	3b 01       	movw	r6, r22
    af06:	3e 2c       	mov	r3, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    af08:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xb>
    af0c:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_lcd+0xa>
_Z36display_element_show_tds_info_staticjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4887
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    af10:	26 0f       	add	r18, r22
    af12:	37 1f       	adc	r19, r23
    af14:	48 0f       	add	r20, r24
    af16:	59 1f       	adc	r21, r25
    af18:	0e 94 74 83 	call	0x106e8	; 0x106e8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4888
  if (get_tds18s20(args2, &tds) == 1)
    af1c:	be 01       	movw	r22, r28
    af1e:	6b 5c       	subi	r22, 0xCB	; 203
    af20:	7f 4f       	sbci	r23, 0xFF	; 255
    af22:	8e 2d       	mov	r24, r14
    af24:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
    af28:	23 01       	movw	r4, r6
    af2a:	28 e2       	ldi	r18, 0x28	; 40
    af2c:	42 0e       	add	r4, r18
    af2e:	51 1c       	adc	r5, r1
    af30:	9e 01       	movw	r18, r28
    af32:	2f 5f       	subi	r18, 0xFF	; 255
    af34:	3f 4f       	sbci	r19, 0xFF	; 255
    af36:	59 01       	movw	r10, r18
    af38:	81 30       	cpi	r24, 0x01	; 1
    af3a:	09 f0       	breq	.+2      	; 0xaf3e <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>
    af3c:	ca c0       	rjmp	.+404    	; 0xb0d2 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x204>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4890
  {
    createString(str2, ':', tds.rom, 8, 16);
    af3e:	6e 01       	movw	r12, r28
    af40:	3b e1       	ldi	r19, 0x1B	; 27
    af42:	c3 0e       	add	r12, r19
    af44:	d1 1c       	adc	r13, r1
    af46:	00 e1       	ldi	r16, 0x10	; 16
    af48:	28 e0       	ldi	r18, 0x08	; 8
    af4a:	ae 01       	movw	r20, r28
    af4c:	4a 5c       	subi	r20, 0xCA	; 202
    af4e:	5f 4f       	sbci	r21, 0xFF	; 255
    af50:	6a e3       	ldi	r22, 0x3A	; 58
    af52:	c6 01       	movw	r24, r12
    af54:	0e 94 7b 96 	call	0x12cf6	; 0x12cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4891
    sprintf(str1, "rom: %s", str2);
    af58:	df 92       	push	r13
    af5a:	cf 92       	push	r12
    af5c:	89 e8       	ldi	r24, 0x89	; 137
    af5e:	93 e0       	ldi	r25, 0x03	; 3
    af60:	9f 93       	push	r25
    af62:	8f 93       	push	r24
    af64:	bf 92       	push	r11
    af66:	af 92       	push	r10
    af68:	0e 94 27 b7 	call	0x16e4e	; 0x16e4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4892
    show_string(str1, x + 10, y + 85, 1, BLACK, WHITE, 0);
    af6c:	8a e0       	ldi	r24, 0x0A	; 10
    af6e:	88 0e       	add	r8, r24
    af70:	91 1c       	adc	r9, r1
    af72:	a3 01       	movw	r20, r6
    af74:	4b 5a       	subi	r20, 0xAB	; 171
    af76:	5f 4f       	sbci	r21, 0xFF	; 255
    af78:	ee 24       	eor	r14, r14
    af7a:	ea 94       	dec	r14
    af7c:	fe 2c       	mov	r15, r14
    af7e:	10 e0       	ldi	r17, 0x00	; 0
    af80:	00 e0       	ldi	r16, 0x00	; 0
    af82:	21 e0       	ldi	r18, 0x01	; 1
    af84:	b4 01       	movw	r22, r8
    af86:	c5 01       	movw	r24, r10
    af88:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4894
    ///
    strcpy_P(str2, text_nazev);
    af8c:	68 e7       	ldi	r22, 0x78	; 120
    af8e:	74 e3       	ldi	r23, 0x34	; 52
    af90:	c6 01       	movw	r24, r12
    af92:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4895
    sprintf(str1, "%s: %s", str2, tds.name);
    af96:	85 e3       	ldi	r24, 0x35	; 53
    af98:	90 e0       	ldi	r25, 0x00	; 0
    af9a:	8c 0f       	add	r24, r28
    af9c:	9d 1f       	adc	r25, r29
    af9e:	0c 96       	adiw	r24, 0x0c	; 12
    afa0:	9f 93       	push	r25
    afa2:	8f 93       	push	r24
    afa4:	df 92       	push	r13
    afa6:	cf 92       	push	r12
    afa8:	81 e9       	ldi	r24, 0x91	; 145
    afaa:	93 e0       	ldi	r25, 0x03	; 3
    afac:	9f 93       	push	r25
    afae:	8f 93       	push	r24
    afb0:	bf 92       	push	r11
    afb2:	af 92       	push	r10
    afb4:	0e 94 27 b7 	call	0x16e4e	; 0x16e4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4896
    show_string(str1, x + 10, y + 40, 2, BLACK, WHITE, 0);
    afb8:	22 e0       	ldi	r18, 0x02	; 2
    afba:	a2 01       	movw	r20, r4
    afbc:	b4 01       	movw	r22, r8
    afbe:	c5 01       	movw	r24, r10
    afc0:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4898
    /// zobrazeni offsetu
    te = tds.offset / 1000.0;
    afc4:	21 96       	adiw	r28, 0x01	; 1
    afc6:	6e ad       	ldd	r22, Y+62	; 0x3e
    afc8:	7f ad       	ldd	r23, Y+63	; 0x3f
    afca:	21 97       	sbiw	r28, 0x01	; 1
    afcc:	07 2e       	mov	r0, r23
    afce:	00 0c       	add	r0, r0
    afd0:	88 0b       	sbc	r24, r24
    afd2:	99 0b       	sbc	r25, r25
    afd4:	0e 94 c2 b2 	call	0x16584	; 0x16584 <__floatsisf>
    afd8:	20 e0       	ldi	r18, 0x00	; 0
    afda:	30 e0       	ldi	r19, 0x00	; 0
    afdc:	4a e7       	ldi	r20, 0x7A	; 122
    afde:	54 e4       	ldi	r21, 0x44	; 68
    afe0:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4899
    dtostrf(te, 4, 2, str1);
    afe4:	85 01       	movw	r16, r10
    afe6:	22 e0       	ldi	r18, 0x02	; 2
    afe8:	44 e0       	ldi	r20, 0x04	; 4
    afea:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4900
    strcat(str1, "C");
    afee:	6c ec       	ldi	r22, 0xCC	; 204
    aff0:	76 e0       	ldi	r23, 0x06	; 6
    aff2:	c5 01       	movw	r24, r10
    aff4:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4901
    strcpy_P(str2, temp_offset_short);
    aff8:	6a e4       	ldi	r22, 0x4A	; 74
    affa:	74 e3       	ldi	r23, 0x34	; 52
    affc:	c6 01       	movw	r24, r12
    affe:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4902
    strcat(str2, str1);
    b002:	b5 01       	movw	r22, r10
    b004:	c6 01       	movw	r24, r12
    b006:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4903
    show_string(str2, x + 10, y + 60 , 2, BLACK, WHITE, 0);
    b00a:	a3 01       	movw	r20, r6
    b00c:	44 5c       	subi	r20, 0xC4	; 196
    b00e:	5f 4f       	sbci	r21, 0xFF	; 255
    b010:	10 e0       	ldi	r17, 0x00	; 0
    b012:	00 e0       	ldi	r16, 0x00	; 0
    b014:	22 e0       	ldi	r18, 0x02	; 2
    b016:	b4 01       	movw	r22, r8
    b018:	c6 01       	movw	r24, r12
    b01a:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4905
    ///
    strcpy_P(str2, nastaveni_tds_period);
    b01e:	6b e3       	ldi	r22, 0x3B	; 59
    b020:	74 e3       	ldi	r23, 0x34	; 52
    b022:	c6 01       	movw	r24, r12
    b024:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4906
    sprintf(str1, "%s: %ds", str2, tds.period);
    b028:	2a 96       	adiw	r28, 0x0a	; 10
    b02a:	8f ad       	ldd	r24, Y+63	; 0x3f
    b02c:	2a 97       	sbiw	r28, 0x0a	; 10
    b02e:	1f 92       	push	r1
    b030:	8f 93       	push	r24
    b032:	df 92       	push	r13
    b034:	cf 92       	push	r12
    b036:	88 e9       	ldi	r24, 0x98	; 152
    b038:	93 e0       	ldi	r25, 0x03	; 3
    b03a:	9f 93       	push	r25
    b03c:	8f 93       	push	r24
    b03e:	bf 92       	push	r11
    b040:	af 92       	push	r10
    b042:	0e 94 27 b7 	call	0x16e4e	; 0x16e4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4907
    show_string(str1, x + 10, y + 100 , 2, BLACK, WHITE, 0);
    b046:	a3 01       	movw	r20, r6
    b048:	4c 59       	subi	r20, 0x9C	; 156
    b04a:	5f 4f       	sbci	r21, 0xFF	; 255
    b04c:	22 e0       	ldi	r18, 0x02	; 2
    b04e:	b4 01       	movw	r22, r8
    b050:	c5 01       	movw	r24, r10
    b052:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4910

    ///
    strcpy_P(str2, text_online);
    b056:	62 e5       	ldi	r22, 0x52	; 82
    b058:	74 e3       	ldi	r23, 0x34	; 52
    b05a:	c6 01       	movw	r24, r12
    b05c:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4911
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    b060:	9e e1       	ldi	r25, 0x1E	; 30
    b062:	39 9e       	mul	r3, r25
    b064:	f0 01       	movw	r30, r0
    b066:	11 24       	eor	r1, r1
    b068:	e9 5e       	subi	r30, 0xE9	; 233
    b06a:	f5 4f       	sbci	r31, 0xF5	; 245
    b06c:	83 8d       	ldd	r24, Z+27	; 0x1b
    b06e:	1f 92       	push	r1
    b070:	8f 93       	push	r24
    b072:	df 92       	push	r13
    b074:	cf 92       	push	r12
    b076:	80 ea       	ldi	r24, 0xA0	; 160
    b078:	93 e0       	ldi	r25, 0x03	; 3
    b07a:	9f 93       	push	r25
    b07c:	8f 93       	push	r24
    b07e:	bf 92       	push	r11
    b080:	af 92       	push	r10
    b082:	0e 94 27 b7 	call	0x16e4e	; 0x16e4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4912
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
    b086:	a3 01       	movw	r20, r6
    b088:	48 58       	subi	r20, 0x88	; 136
    b08a:	5f 4f       	sbci	r21, 0xFF	; 255
    b08c:	22 e0       	ldi	r18, 0x02	; 2
    b08e:	b4 01       	movw	r22, r8
    b090:	c5 01       	movw	r24, r10
    b092:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    b096:	0f b6       	in	r0, 0x3f	; 63
    b098:	f8 94       	cli
    b09a:	de bf       	out	0x3e, r29	; 62
    b09c:	0f be       	out	0x3f, r0	; 63
    b09e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4919
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
    b0a0:	c6 5b       	subi	r28, 0xB6	; 182
    b0a2:	df 4f       	sbci	r29, 0xFF	; 255
    b0a4:	0f b6       	in	r0, 0x3f	; 63
    b0a6:	f8 94       	cli
    b0a8:	de bf       	out	0x3e, r29	; 62
    b0aa:	0f be       	out	0x3f, r0	; 63
    b0ac:	cd bf       	out	0x3d, r28	; 61
    b0ae:	df 91       	pop	r29
    b0b0:	cf 91       	pop	r28
    b0b2:	1f 91       	pop	r17
    b0b4:	0f 91       	pop	r16
    b0b6:	ff 90       	pop	r15
    b0b8:	ef 90       	pop	r14
    b0ba:	df 90       	pop	r13
    b0bc:	cf 90       	pop	r12
    b0be:	bf 90       	pop	r11
    b0c0:	af 90       	pop	r10
    b0c2:	9f 90       	pop	r9
    b0c4:	8f 90       	pop	r8
    b0c6:	7f 90       	pop	r7
    b0c8:	6f 90       	pop	r6
    b0ca:	5f 90       	pop	r5
    b0cc:	4f 90       	pop	r4
    b0ce:	3f 90       	pop	r3
    b0d0:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4916
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    b0d2:	65 e3       	ldi	r22, 0x35	; 53
    b0d4:	74 e3       	ldi	r23, 0x34	; 52
    b0d6:	c9 01       	movw	r24, r18
    b0d8:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4917
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
    b0dc:	b4 01       	movw	r22, r8
    b0de:	67 5e       	subi	r22, 0xE7	; 231
    b0e0:	7f 4f       	sbci	r23, 0xFF	; 255
    b0e2:	ee 24       	eor	r14, r14
    b0e4:	ea 94       	dec	r14
    b0e6:	fe 2c       	mov	r15, r14
    b0e8:	00 e0       	ldi	r16, 0x00	; 0
    b0ea:	18 ef       	ldi	r17, 0xF8	; 248
    b0ec:	24 e0       	ldi	r18, 0x04	; 4
    b0ee:	a2 01       	movw	r20, r4
    b0f0:	c5 01       	movw	r24, r10
    b0f2:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    b0f6:	d4 cf       	rjmp	.-88     	; 0xb0a0 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d2>

0000b0f8 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z38display_element_show_tds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4863
{
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
}
//////////////////////////////////////////////
void display_element_show_tds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    b0f8:	af 92       	push	r10
    b0fa:	bf 92       	push	r11
    b0fc:	cf 92       	push	r12
    b0fe:	df 92       	push	r13
    b100:	ef 92       	push	r14
    b102:	ff 92       	push	r15
    b104:	0f 93       	push	r16
    b106:	1f 93       	push	r17
    b108:	cf 93       	push	r28
    b10a:	df 93       	push	r29
    b10c:	cd b7       	in	r28, 0x3d	; 61
    b10e:	de b7       	in	r29, 0x3e	; 62
    b110:	ca 54       	subi	r28, 0x4A	; 74
    b112:	d1 09       	sbc	r29, r1
    b114:	0f b6       	in	r0, 0x3f	; 63
    b116:	f8 94       	cli
    b118:	de bf       	out	0x3e, r29	; 62
    b11a:	0f be       	out	0x3f, r0	; 63
    b11c:	cd bf       	out	0x3d, r28	; 61
    b11e:	6c 01       	movw	r12, r24
    b120:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4868
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  if (get_tds18s20(args2, &tds) == 1)
    b122:	be 01       	movw	r22, r28
    b124:	6b 5c       	subi	r22, 0xCB	; 203
    b126:	7f 4f       	sbci	r23, 0xFF	; 255
    b128:	8e 2d       	mov	r24, r14
    b12a:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
    b12e:	81 30       	cpi	r24, 0x01	; 1
    b130:	d9 f5       	brne	.+118    	; 0xb1a8 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4871
  {
    /// zobrazeni teploty
    te = status_tds18s20[args2].temp / 1000.0;
    b132:	8e e1       	ldi	r24, 0x1E	; 30
    b134:	e8 9e       	mul	r14, r24
    b136:	f0 01       	movw	r30, r0
    b138:	11 24       	eor	r1, r1
    b13a:	e9 5e       	subi	r30, 0xE9	; 233
    b13c:	f5 4f       	sbci	r31, 0xF5	; 245
    b13e:	65 81       	ldd	r22, Z+5	; 0x05
    b140:	76 81       	ldd	r23, Z+6	; 0x06
    b142:	07 2e       	mov	r0, r23
    b144:	00 0c       	add	r0, r0
    b146:	88 0b       	sbc	r24, r24
    b148:	99 0b       	sbc	r25, r25
    b14a:	0e 94 c2 b2 	call	0x16584	; 0x16584 <__floatsisf>
    b14e:	20 e0       	ldi	r18, 0x00	; 0
    b150:	30 e0       	ldi	r19, 0x00	; 0
    b152:	4a e7       	ldi	r20, 0x7A	; 122
    b154:	54 e4       	ldi	r21, 0x44	; 68
    b156:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4872
    dtostrf(te, 4, 2, str1);
    b15a:	8e 01       	movw	r16, r28
    b15c:	05 5e       	subi	r16, 0xE5	; 229
    b15e:	1f 4f       	sbci	r17, 0xFF	; 255
    b160:	22 e0       	ldi	r18, 0x02	; 2
    b162:	44 e0       	ldi	r20, 0x04	; 4
    b164:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4873
    strcat(str1, "C");
    b168:	6c ec       	ldi	r22, 0xCC	; 204
    b16a:	76 e0       	ldi	r23, 0x06	; 6
    b16c:	c8 01       	movw	r24, r16
    b16e:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4874
    strcpy_P(str2, current_temp_short);
    b172:	6f e6       	ldi	r22, 0x6F	; 111
    b174:	74 e3       	ldi	r23, 0x34	; 52
    b176:	ce 01       	movw	r24, r28
    b178:	01 96       	adiw	r24, 0x01	; 1
    b17a:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4875
    strcat(str2, str1);
    b17e:	b8 01       	movw	r22, r16
    b180:	ce 01       	movw	r24, r28
    b182:	01 96       	adiw	r24, 0x01	; 1
    b184:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4876
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
    b188:	a5 01       	movw	r20, r10
    b18a:	44 57       	subi	r20, 0x74	; 116
    b18c:	5f 4f       	sbci	r21, 0xFF	; 255
    b18e:	b6 01       	movw	r22, r12
    b190:	66 5f       	subi	r22, 0xF6	; 246
    b192:	7f 4f       	sbci	r23, 0xFF	; 255
    b194:	ee 24       	eor	r14, r14
    b196:	ea 94       	dec	r14
    b198:	fe 2c       	mov	r15, r14
    b19a:	10 e0       	ldi	r17, 0x00	; 0
    b19c:	00 e0       	ldi	r16, 0x00	; 0
    b19e:	22 e0       	ldi	r18, 0x02	; 2
    b1a0:	ce 01       	movw	r24, r28
    b1a2:	01 96       	adiw	r24, 0x01	; 1
    b1a4:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4878
  }
}
    b1a8:	c6 5b       	subi	r28, 0xB6	; 182
    b1aa:	df 4f       	sbci	r29, 0xFF	; 255
    b1ac:	0f b6       	in	r0, 0x3f	; 63
    b1ae:	f8 94       	cli
    b1b0:	de bf       	out	0x3e, r29	; 62
    b1b2:	0f be       	out	0x3f, r0	; 63
    b1b4:	cd bf       	out	0x3d, r28	; 61
    b1b6:	df 91       	pop	r29
    b1b8:	cf 91       	pop	r28
    b1ba:	1f 91       	pop	r17
    b1bc:	0f 91       	pop	r16
    b1be:	ff 90       	pop	r15
    b1c0:	ef 90       	pop	r14
    b1c2:	df 90       	pop	r13
    b1c4:	cf 90       	pop	r12
    b1c6:	bf 90       	pop	r11
    b1c8:	af 90       	pop	r10
    b1ca:	08 95       	ret

0000b1cc <display_menu_tds_set_name(unsigned char, unsigned char)>:
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2393
  dialog_save_variable_function = &menu_tds_save_period;
}

/// funkce pro nastaveni nazvu cidla
void display_menu_tds_set_name(uint8_t args1, uint8_t args2)
{
    b1cc:	1f 93       	push	r17
    b1ce:	cf 93       	push	r28
    b1d0:	df 93       	push	r29
    b1d2:	cd b7       	in	r28, 0x3d	; 61
    b1d4:	de b7       	in	r29, 0x3e	; 62
    b1d6:	a0 97       	sbiw	r28, 0x20	; 32
    b1d8:	0f b6       	in	r0, 0x3f	; 63
    b1da:	f8 94       	cli
    b1dc:	de bf       	out	0x3e, r29	; 62
    b1de:	0f be       	out	0x3f, r0	; 63
    b1e0:	cd bf       	out	0x3d, r28	; 61
    b1e2:	16 2f       	mov	r17, r22
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b1e4:	be 01       	movw	r22, r28
    b1e6:	6f 5f       	subi	r22, 0xFF	; 255
    b1e8:	7f 4f       	sbci	r23, 0xFF	; 255
    b1ea:	81 2f       	mov	r24, r17
    b1ec:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    b1f0:	be 01       	movw	r22, r28
    b1f2:	63 5f       	subi	r22, 0xF3	; 243
    b1f4:	7f 4f       	sbci	r23, 0xFF	; 255
    b1f6:	ce 01       	movw	r24, r28
    b1f8:	47 96       	adiw	r24, 0x17	; 23
    b1fa:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2396
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    b1fe:	60 e0       	ldi	r22, 0x00	; 0
    b200:	87 e6       	ldi	r24, 0x67	; 103
    b202:	0e 94 cc 31 	call	0x6398	; 0x6398 <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
  menu_dialog_set_variable_update_now = update_now;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    b206:	be 01       	movw	r22, r28
    b208:	69 5e       	subi	r22, 0xE9	; 233
    b20a:	7f 4f       	sbci	r23, 0xFF	; 255
    b20c:	8d ed       	ldi	r24, 0xDD	; 221
    b20e:	98 e0       	ldi	r25, 0x08	; 8
    b210:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2317
  dialog_set_string_max_length = max_length;
    b214:	88 e0       	ldi	r24, 0x08	; 8
    b216:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
  dialog_set_string_args = idx;
    b21a:	10 93 ed 08 	sts	0x08ED, r17	; 0x8008ed <dialog_set_string_args>
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2398
{
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
  display_element_set_string(name, 8, args2);
  dialog_save_variable_function = &menu_tds_save_name;
    b21e:	87 ea       	ldi	r24, 0xA7	; 167
    b220:	99 e5       	ldi	r25, 0x59	; 89
    b222:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <dialog_save_variable_function+0x1>
    b226:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2399
}
    b22a:	a0 96       	adiw	r28, 0x20	; 32
    b22c:	0f b6       	in	r0, 0x3f	; 63
    b22e:	f8 94       	cli
    b230:	de bf       	out	0x3e, r29	; 62
    b232:	0f be       	out	0x3f, r0	; 63
    b234:	cd bf       	out	0x3d, r28	; 61
    b236:	df 91       	pop	r29
    b238:	cf 91       	pop	r28
    b23a:	1f 91       	pop	r17
    b23c:	08 95       	ret

0000b23e <display_menu_tds_set_period(unsigned char, unsigned char)>:
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2385
  dialog_save_variable_function = &menu_tds_save_offset;
}

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
    b23e:	1f 93       	push	r17
    b240:	cf 93       	push	r28
    b242:	df 93       	push	r29
    b244:	cd b7       	in	r28, 0x3d	; 61
    b246:	de b7       	in	r29, 0x3e	; 62
    b248:	66 97       	sbiw	r28, 0x16	; 22
    b24a:	0f b6       	in	r0, 0x3f	; 63
    b24c:	f8 94       	cli
    b24e:	de bf       	out	0x3e, r29	; 62
    b250:	0f be       	out	0x3f, r0	; 63
    b252:	cd bf       	out	0x3d, r28	; 61
    b254:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2386
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
    b256:	60 e0       	ldi	r22, 0x00	; 0
    b258:	86 e6       	ldi	r24, 0x66	; 102
    b25a:	0e 94 cc 31 	call	0x6398	; 0x6398 <MenuHistoryNextMenu(unsigned char, unsigned char)>
tds_get_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:114
}
//// funkce ziska periodu mereni
int tds_get_period(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b25e:	be 01       	movw	r22, r28
    b260:	6f 5f       	subi	r22, 0xFF	; 255
    b262:	7f 4f       	sbci	r23, 0xFF	; 255
    b264:	81 2f       	mov	r24, r17
    b266:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:115
  return tds.period;
    b26a:	8d 89       	ldd	r24, Y+21	; 0x15
    b26c:	90 e0       	ldi	r25, 0x00	; 0
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2304
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args, 0);
  }
}
void display_function_set_variable(uint16_t now, uint16_t min, uint16_t max, uint8_t step, uint8_t args, uint16_t divider, uint8_t update_now)
{
  menu_dialog_set_variable_now = now;
    b26e:	90 93 ac 08 	sts	0x08AC, r25	; 0x8008ac <menu_dialog_set_variable_now+0x1>
    b272:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2305
  menu_dialog_set_variable_min = min;
    b276:	81 e0       	ldi	r24, 0x01	; 1
    b278:	90 e0       	ldi	r25, 0x00	; 0
    b27a:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <menu_dialog_set_variable_min+0x1>
    b27e:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <menu_dialog_set_variable_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2306
  menu_dialog_set_variable_max = max;
    b282:	8f ef       	ldi	r24, 0xFF	; 255
    b284:	90 e0       	ldi	r25, 0x00	; 0
    b286:	90 93 60 08 	sts	0x0860, r25	; 0x800860 <menu_dialog_set_variable_max+0x1>
    b28a:	80 93 5f 08 	sts	0x085F, r24	; 0x80085f <menu_dialog_set_variable_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
  menu_dialog_set_variable_step = step;
    b28e:	81 e0       	ldi	r24, 0x01	; 1
    b290:	80 93 5e 08 	sts	0x085E, r24	; 0x80085e <menu_dialog_set_variable_step>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2308
  menu_dialog_set_variable_args = args;
    b294:	10 93 5d 08 	sts	0x085D, r17	; 0x80085d <menu_dialog_set_variable_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
  menu_dialog_set_divider = divider;
    b298:	10 92 ae 08 	sts	0x08AE, r1	; 0x8008ae <menu_dialog_set_divider+0x1>
    b29c:	10 92 ad 08 	sts	0x08AD, r1	; 0x8008ad <menu_dialog_set_divider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
  dialog_save_variable_function = NULL;
  menu_dialog_set_variable_update_now = update_now;
    b2a0:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <menu_dialog_set_variable_update_now>
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2388
/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_function_set_variable(tds_get_period(args2), 1, 255, 1, args2, 0, H_FALSE);
  dialog_save_variable_function = &menu_tds_save_period;
    b2a4:	8a ed       	ldi	r24, 0xDA	; 218
    b2a6:	99 e5       	ldi	r25, 0x59	; 89
    b2a8:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <dialog_save_variable_function+0x1>
    b2ac:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2389
}
    b2b0:	66 96       	adiw	r28, 0x16	; 22
    b2b2:	0f b6       	in	r0, 0x3f	; 63
    b2b4:	f8 94       	cli
    b2b6:	de bf       	out	0x3e, r29	; 62
    b2b8:	0f be       	out	0x3f, r0	; 63
    b2ba:	cd bf       	out	0x3d, r28	; 61
    b2bc:	df 91       	pop	r29
    b2be:	cf 91       	pop	r28
    b2c0:	1f 91       	pop	r17
    b2c2:	08 95       	ret

0000b2c4 <display_menu_tds_set_offset(unsigned char, unsigned char)>:
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2377
   args2 ... je dynamicky parametr nastaveni menu

*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
    b2c4:	1f 93       	push	r17
    b2c6:	cf 93       	push	r28
    b2c8:	df 93       	push	r29
    b2ca:	cd b7       	in	r28, 0x3d	; 61
    b2cc:	de b7       	in	r29, 0x3e	; 62
    b2ce:	66 97       	sbiw	r28, 0x16	; 22
    b2d0:	0f b6       	in	r0, 0x3f	; 63
    b2d2:	f8 94       	cli
    b2d4:	de bf       	out	0x3e, r29	; 62
    b2d6:	0f be       	out	0x3f, r0	; 63
    b2d8:	cd bf       	out	0x3d, r28	; 61
    b2da:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2378
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
    b2dc:	60 e0       	ldi	r22, 0x00	; 0
    b2de:	86 e6       	ldi	r24, 0x66	; 102
    b2e0:	0e 94 cc 31 	call	0x6398	; 0x6398 <MenuHistoryNextMenu(unsigned char, unsigned char)>
tds_get_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:98
}
//// funkce ziska offset cidlu tds
int tds_get_offset(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b2e4:	be 01       	movw	r22, r28
    b2e6:	6f 5f       	subi	r22, 0xFF	; 255
    b2e8:	7f 4f       	sbci	r23, 0xFF	; 255
    b2ea:	81 2f       	mov	r24, r17
    b2ec:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:99
  return tds.offset;
    b2f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    b2f2:	9c 85       	ldd	r25, Y+12	; 0x0c
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2304
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args, 0);
  }
}
void display_function_set_variable(uint16_t now, uint16_t min, uint16_t max, uint8_t step, uint8_t args, uint16_t divider, uint8_t update_now)
{
  menu_dialog_set_variable_now = now;
    b2f4:	90 93 ac 08 	sts	0x08AC, r25	; 0x8008ac <menu_dialog_set_variable_now+0x1>
    b2f8:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2305
  menu_dialog_set_variable_min = min;
    b2fc:	80 ef       	ldi	r24, 0xF0	; 240
    b2fe:	98 ed       	ldi	r25, 0xD8	; 216
    b300:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <menu_dialog_set_variable_min+0x1>
    b304:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <menu_dialog_set_variable_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2306
  menu_dialog_set_variable_max = max;
    b308:	80 e1       	ldi	r24, 0x10	; 16
    b30a:	97 e2       	ldi	r25, 0x27	; 39
    b30c:	90 93 60 08 	sts	0x0860, r25	; 0x800860 <menu_dialog_set_variable_max+0x1>
    b310:	80 93 5f 08 	sts	0x085F, r24	; 0x80085f <menu_dialog_set_variable_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
  menu_dialog_set_variable_step = step;
    b314:	84 e6       	ldi	r24, 0x64	; 100
    b316:	80 93 5e 08 	sts	0x085E, r24	; 0x80085e <menu_dialog_set_variable_step>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2308
  menu_dialog_set_variable_args = args;
    b31a:	10 93 5d 08 	sts	0x085D, r17	; 0x80085d <menu_dialog_set_variable_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
  menu_dialog_set_divider = divider;
    b31e:	88 ee       	ldi	r24, 0xE8	; 232
    b320:	93 e0       	ldi	r25, 0x03	; 3
    b322:	90 93 ae 08 	sts	0x08AE, r25	; 0x8008ae <menu_dialog_set_divider+0x1>
    b326:	80 93 ad 08 	sts	0x08AD, r24	; 0x8008ad <menu_dialog_set_divider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
  dialog_save_variable_function = NULL;
  menu_dialog_set_variable_update_now = update_now;
    b32a:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <menu_dialog_set_variable_update_now>
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2380
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_function_set_variable(tds_get_offset(args2), -10000, 10000, 100, args2, 1000, H_FALSE);
  dialog_save_variable_function = &menu_tds_save_offset;
    b32e:	82 e0       	ldi	r24, 0x02	; 2
    b330:	9a e5       	ldi	r25, 0x5A	; 90
    b332:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <dialog_save_variable_function+0x1>
    b336:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2381
}
    b33a:	66 96       	adiw	r28, 0x16	; 22
    b33c:	0f b6       	in	r0, 0x3f	; 63
    b33e:	f8 94       	cli
    b340:	de bf       	out	0x3e, r29	; 62
    b342:	0f be       	out	0x3f, r0	; 63
    b344:	cd bf       	out	0x3d, r28	; 61
    b346:	df 91       	pop	r29
    b348:	cf 91       	pop	r28
    b34a:	1f 91       	pop	r17
    b34c:	08 95       	ret

0000b34e <menu_tds_save_name(unsigned char, unsigned char)>:
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2360
{
  tds_set_period(display_function_get_variable_args(), display_function_get_variable());
}
/////
void menu_tds_save_name(uint8_t args1, uint8_t args2)
{
    b34e:	1f 93       	push	r17
    b350:	cf 93       	push	r28
    b352:	df 93       	push	r29
    b354:	cd b7       	in	r28, 0x3d	; 61
    b356:	de b7       	in	r29, 0x3e	; 62
    b358:	a0 97       	sbiw	r28, 0x20	; 32
    b35a:	0f b6       	in	r0, 0x3f	; 63
    b35c:	f8 94       	cli
    b35e:	de bf       	out	0x3e, r29	; 62
    b360:	0f be       	out	0x3f, r0	; 63
    b362:	cd bf       	out	0x3d, r28	; 61
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    b364:	6d ed       	ldi	r22, 0xDD	; 221
    b366:	78 e0       	ldi	r23, 0x08	; 8
    b368:	ce 01       	movw	r24, r28
    b36a:	47 96       	adiw	r24, 0x17	; 23
    b36c:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2363
/////
void menu_tds_save_name(uint8_t args1, uint8_t args2)
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    b370:	8f 89       	ldd	r24, Y+23	; 0x17
    b372:	88 23       	and	r24, r24
    b374:	a9 f0       	breq	.+42     	; 0xb3a0 <menu_tds_save_name(unsigned char, unsigned char)+0x52>
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2323
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    b376:	10 91 ed 08 	lds	r17, 0x08ED	; 0x8008ed <dialog_set_string_args>
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b37a:	be 01       	movw	r22, r28
    b37c:	6f 5f       	subi	r22, 0xFF	; 255
    b37e:	7f 4f       	sbci	r23, 0xFF	; 255
    b380:	81 2f       	mov	r24, r17
    b382:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    b386:	be 01       	movw	r22, r28
    b388:	69 5e       	subi	r22, 0xE9	; 233
    b38a:	7f 4f       	sbci	r23, 0xFF	; 255
    b38c:	ce 01       	movw	r24, r28
    b38e:	0d 96       	adiw	r24, 0x0d	; 13
    b390:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    b394:	be 01       	movw	r22, r28
    b396:	6f 5f       	subi	r22, 0xFF	; 255
    b398:	7f 4f       	sbci	r23, 0xFF	; 255
    b39a:	81 2f       	mov	r24, r17
    b39c:	0e 94 a2 51 	call	0xa344	; 0xa344 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2365
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    tds_set_name(display_element_get_string_args(), name);
}
    b3a0:	a0 96       	adiw	r28, 0x20	; 32
    b3a2:	0f b6       	in	r0, 0x3f	; 63
    b3a4:	f8 94       	cli
    b3a6:	de bf       	out	0x3e, r29	; 62
    b3a8:	0f be       	out	0x3f, r0	; 63
    b3aa:	cd bf       	out	0x3d, r28	; 61
    b3ac:	df 91       	pop	r29
    b3ae:	cf 91       	pop	r28
    b3b0:	1f 91       	pop	r17
    b3b2:	08 95       	ret

0000b3b4 <menu_tds_save_period(unsigned char, unsigned char)>:
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2355
{
  tds_set_offset(display_function_get_variable_args(), display_function_get_variable());
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
    b3b4:	0f 93       	push	r16
    b3b6:	1f 93       	push	r17
    b3b8:	cf 93       	push	r28
    b3ba:	df 93       	push	r29
    b3bc:	cd b7       	in	r28, 0x3d	; 61
    b3be:	de b7       	in	r29, 0x3e	; 62
    b3c0:	66 97       	sbiw	r28, 0x16	; 22
    b3c2:	0f b6       	in	r0, 0x3f	; 63
    b3c4:	f8 94       	cli
    b3c6:	de bf       	out	0x3e, r29	; 62
    b3c8:	0f be       	out	0x3f, r0	; 63
    b3ca:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2356
  tds_set_period(display_function_get_variable_args(), display_function_get_variable());
    b3cc:	00 91 ab 08 	lds	r16, 0x08AB	; 0x8008ab <menu_dialog_set_variable_now>
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2276

/////////////////////////////////////////////////////////////////////////////////

uint8_t display_function_get_variable_args(void)
{
  return menu_dialog_set_variable_args;
    b3d0:	10 91 5d 08 	lds	r17, 0x085D	; 0x80085d <menu_dialog_set_variable_args>
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b3d4:	be 01       	movw	r22, r28
    b3d6:	6f 5f       	subi	r22, 0xFF	; 255
    b3d8:	7f 4f       	sbci	r23, 0xFF	; 255
    b3da:	81 2f       	mov	r24, r17
    b3dc:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:107
  tds.period = period;
    b3e0:	0d 8b       	std	Y+21, r16	; 0x15
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:108
  set_tds18s20(idx, &tds);
    b3e2:	be 01       	movw	r22, r28
    b3e4:	6f 5f       	subi	r22, 0xFF	; 255
    b3e6:	7f 4f       	sbci	r23, 0xFF	; 255
    b3e8:	81 2f       	mov	r24, r17
    b3ea:	0e 94 a2 51 	call	0xa344	; 0xa344 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2357
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
  tds_set_period(display_function_get_variable_args(), display_function_get_variable());
}
    b3ee:	66 96       	adiw	r28, 0x16	; 22
    b3f0:	0f b6       	in	r0, 0x3f	; 63
    b3f2:	f8 94       	cli
    b3f4:	de bf       	out	0x3e, r29	; 62
    b3f6:	0f be       	out	0x3f, r0	; 63
    b3f8:	cd bf       	out	0x3d, r28	; 61
    b3fa:	df 91       	pop	r29
    b3fc:	cf 91       	pop	r28
    b3fe:	1f 91       	pop	r17
    b400:	0f 91       	pop	r16
    b402:	08 95       	ret

0000b404 <menu_tds_save_offset(unsigned char, unsigned char)>:
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2350
    dialog_set_string[len - 1] = 0;
}

/////
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
    b404:	ef 92       	push	r14
    b406:	ff 92       	push	r15
    b408:	1f 93       	push	r17
    b40a:	cf 93       	push	r28
    b40c:	df 93       	push	r29
    b40e:	cd b7       	in	r28, 0x3d	; 61
    b410:	de b7       	in	r29, 0x3e	; 62
    b412:	66 97       	sbiw	r28, 0x16	; 22
    b414:	0f b6       	in	r0, 0x3f	; 63
    b416:	f8 94       	cli
    b418:	de bf       	out	0x3e, r29	; 62
    b41a:	0f be       	out	0x3f, r0	; 63
    b41c:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2281
  return menu_dialog_set_variable_args;
}

uint16_t display_function_get_variable(void)
{
  return menu_dialog_set_variable_now;
    b41e:	e0 90 ab 08 	lds	r14, 0x08AB	; 0x8008ab <menu_dialog_set_variable_now>
    b422:	f0 90 ac 08 	lds	r15, 0x08AC	; 0x8008ac <menu_dialog_set_variable_now+0x1>
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2276

/////////////////////////////////////////////////////////////////////////////////

uint8_t display_function_get_variable_args(void)
{
  return menu_dialog_set_variable_args;
    b426:	10 91 5d 08 	lds	r17, 0x085D	; 0x80085d <menu_dialog_set_variable_args>
tds_set_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b42a:	be 01       	movw	r22, r28
    b42c:	6f 5f       	subi	r22, 0xFF	; 255
    b42e:	7f 4f       	sbci	r23, 0xFF	; 255
    b430:	81 2f       	mov	r24, r17
    b432:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    b436:	fc 86       	std	Y+12, r15	; 0x0c
    b438:	eb 86       	std	Y+11, r14	; 0x0b
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    b43a:	be 01       	movw	r22, r28
    b43c:	6f 5f       	subi	r22, 0xFF	; 255
    b43e:	7f 4f       	sbci	r23, 0xFF	; 255
    b440:	81 2f       	mov	r24, r17
    b442:	0e 94 a2 51 	call	0xa344	; 0xa344 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2352

/////
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
  tds_set_offset(display_function_get_variable_args(), display_function_get_variable());
}
    b446:	66 96       	adiw	r28, 0x16	; 22
    b448:	0f b6       	in	r0, 0x3f	; 63
    b44a:	f8 94       	cli
    b44c:	de bf       	out	0x3e, r29	; 62
    b44e:	0f be       	out	0x3f, r0	; 63
    b450:	cd bf       	out	0x3d, r28	; 61
    b452:	df 91       	pop	r29
    b454:	cf 91       	pop	r28
    b456:	1f 91       	pop	r17
    b458:	ff 90       	pop	r15
    b45a:	ef 90       	pop	r14
    b45c:	08 95       	ret

0000b45e <device_get_name(char*)>:
_Z15device_get_namePc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:59

//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
    b45e:	0f 93       	push	r16
    b460:	1f 93       	push	r17
    b462:	cf 93       	push	r28
    b464:	df 93       	push	r29
    b466:	8c 01       	movw	r16, r24
    b468:	c4 e6       	ldi	r28, 0x64	; 100
    b46a:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:63
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(device_nazev  + i);
    b46c:	ce 01       	movw	r24, r28
    b46e:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:64
    name[i] = t;
    b472:	f8 01       	movw	r30, r16
    b474:	81 93       	st	Z+, r24
    b476:	8f 01       	movw	r16, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:65
    name[i + 1] = 0;
    b478:	10 82       	st	Z, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:66
    if (t == 0)
    b47a:	88 23       	and	r24, r24
    b47c:	21 f0       	breq	.+8      	; 0xb486 <device_get_name(char*)+0x28>
    b47e:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:61
//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    b480:	cd 36       	cpi	r28, 0x6D	; 109
    b482:	d1 05       	cpc	r29, r1
    b484:	99 f7       	brne	.-26     	; 0xb46c <device_get_name(char*)+0xe>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:71
    if (t == 0)
    {
      break;
    }
  }
}
    b486:	df 91       	pop	r29
    b488:	cf 91       	pop	r28
    b48a:	1f 91       	pop	r17
    b48c:	0f 91       	pop	r16
    b48e:	08 95       	ret

0000b490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:217
  else
    mqtt_error++;
}
///
void send_mqtt_general_payload(PubSubClient *mqtt_client, char *topic, const char *payload)
{
    b490:	cf 92       	push	r12
    b492:	df 92       	push	r13
    b494:	ef 92       	push	r14
    b496:	ff 92       	push	r15
    b498:	0f 93       	push	r16
    b49a:	1f 93       	push	r17
    b49c:	cf 93       	push	r28
    b49e:	df 93       	push	r29
    b4a0:	cd b7       	in	r28, 0x3d	; 61
    b4a2:	de b7       	in	r29, 0x3e	; 62
    b4a4:	ca 54       	subi	r28, 0x4A	; 74
    b4a6:	d1 09       	sbc	r29, r1
    b4a8:	0f b6       	in	r0, 0x3f	; 63
    b4aa:	f8 94       	cli
    b4ac:	de bf       	out	0x3e, r29	; 62
    b4ae:	0f be       	out	0x3f, r0	; 63
    b4b0:	cd bf       	out	0x3d, r28	; 61
    b4b2:	8c 01       	movw	r16, r24
    b4b4:	6b 01       	movw	r12, r22
    b4b6:	7a 01       	movw	r14, r20
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:220
  const char str_topic[64];
  char hostname[10];
  if (mqtt_client->connected())
    b4b8:	0e 94 2b 93 	call	0x12656	; 0x12656 <PubSubClient::connected()>
    b4bc:	88 23       	and	r24, r24
    b4be:	89 f1       	breq	.+98     	; 0xb522 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:222
  {
    mqtt_send_message++;
    b4c0:	80 91 67 0b 	lds	r24, 0x0B67	; 0x800b67 <mqtt_send_message>
    b4c4:	90 91 68 0b 	lds	r25, 0x0B68	; 0x800b68 <mqtt_send_message+0x1>
    b4c8:	01 96       	adiw	r24, 0x01	; 1
    b4ca:	90 93 68 0b 	sts	0x0B68, r25	; 0x800b68 <mqtt_send_message+0x1>
    b4ce:	80 93 67 0b 	sts	0x0B67, r24	; 0x800b67 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:223
    device_get_name(hostname);
    b4d2:	ce 01       	movw	r24, r28
    b4d4:	8f 5b       	subi	r24, 0xBF	; 191
    b4d6:	9f 4f       	sbci	r25, 0xFF	; 255
    b4d8:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <device_get_name(char*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:224
    strcpy_P(str_topic, header_out);
    b4dc:	60 91 65 0b 	lds	r22, 0x0B65	; 0x800b65 <header_out>
    b4e0:	70 91 66 0b 	lds	r23, 0x0B66	; 0x800b66 <header_out+0x1>
    b4e4:	ce 01       	movw	r24, r28
    b4e6:	01 96       	adiw	r24, 0x01	; 1
    b4e8:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:225
    strcat(str_topic, hostname);
    b4ec:	be 01       	movw	r22, r28
    b4ee:	6f 5b       	subi	r22, 0xBF	; 191
    b4f0:	7f 4f       	sbci	r23, 0xFF	; 255
    b4f2:	ce 01       	movw	r24, r28
    b4f4:	01 96       	adiw	r24, 0x01	; 1
    b4f6:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:226
    strcat(str_topic, "/");
    b4fa:	69 ed       	ldi	r22, 0xD9	; 217
    b4fc:	73 e0       	ldi	r23, 0x03	; 3
    b4fe:	ce 01       	movw	r24, r28
    b500:	01 96       	adiw	r24, 0x01	; 1
    b502:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:227
    strcat(str_topic, topic);
    b506:	b6 01       	movw	r22, r12
    b508:	ce 01       	movw	r24, r28
    b50a:	01 96       	adiw	r24, 0x01	; 1
    b50c:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:228
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
    b510:	a7 01       	movw	r20, r14
    b512:	be 01       	movw	r22, r28
    b514:	6f 5f       	subi	r22, 0xFF	; 255
    b516:	7f 4f       	sbci	r23, 0xFF	; 255
    b518:	c8 01       	movw	r24, r16
    b51a:	0e 94 78 95 	call	0x12af0	; 0x12af0 <PubSubClient::publish(char const*, char const*)>
    b51e:	81 11       	cpse	r24, r1
    b520:	09 c0       	rjmp	.+18     	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:231
  }
  else
    mqtt_error++;
    b522:	80 91 69 0b 	lds	r24, 0x0B69	; 0x800b69 <mqtt_error>
    b526:	90 91 6a 0b 	lds	r25, 0x0B6A	; 0x800b6a <mqtt_error+0x1>
    b52a:	01 96       	adiw	r24, 0x01	; 1
    b52c:	90 93 6a 0b 	sts	0x0B6A, r25	; 0x800b6a <mqtt_error+0x1>
    b530:	80 93 69 0b 	sts	0x0B69, r24	; 0x800b69 <mqtt_error>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:232
}
    b534:	c6 5b       	subi	r28, 0xB6	; 182
    b536:	df 4f       	sbci	r29, 0xFF	; 255
    b538:	0f b6       	in	r0, 0x3f	; 63
    b53a:	f8 94       	cli
    b53c:	de bf       	out	0x3e, r29	; 62
    b53e:	0f be       	out	0x3f, r0	; 63
    b540:	cd bf       	out	0x3d, r28	; 61
    b542:	df 91       	pop	r29
    b544:	cf 91       	pop	r28
    b546:	1f 91       	pop	r17
    b548:	0f 91       	pop	r16
    b54a:	ff 90       	pop	r15
    b54c:	ef 90       	pop	r14
    b54e:	df 90       	pop	r13
    b550:	cf 90       	pop	r12
    b552:	08 95       	ret

0000b554 <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:437
  return ret;
}
//////////////////////////////////////////////////////////////////////
/// servisni logovatko pres mqtt ///
int printf_via_mqtt(char c, FILE * t)
{
    b554:	cf 93       	push	r28
    b556:	df 93       	push	r29
    b558:	cd b7       	in	r28, 0x3d	; 61
    b55a:	de b7       	in	r29, 0x3e	; 62
    b55c:	60 97       	sbiw	r28, 0x10	; 16
    b55e:	0f b6       	in	r0, 0x3f	; 63
    b560:	f8 94       	cli
    b562:	de bf       	out	0x3e, r29	; 62
    b564:	0f be       	out	0x3f, r0	; 63
    b566:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:439
  char topic[16];
  mqtt_log[mqtt_log_cnt] = c;
    b568:	90 91 72 09 	lds	r25, 0x0972	; 0x800972 <mqtt_log_cnt>
    b56c:	e9 2f       	mov	r30, r25
    b56e:	f0 e0       	ldi	r31, 0x00	; 0
    b570:	ee 50       	subi	r30, 0x0E	; 14
    b572:	f7 4f       	sbci	r31, 0xF7	; 247
    b574:	80 83       	st	Z, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:440
  mqtt_log[mqtt_log_cnt + 1] = 0;
    b576:	11 82       	std	Z+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:441
  mqtt_log_cnt++;
    b578:	9f 5f       	subi	r25, 0xFF	; 255
    b57a:	90 93 72 09 	sts	0x0972, r25	; 0x800972 <mqtt_log_cnt>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:442
  if (mqtt_log_cnt > 127 || c == '\n' || c == 0)
    b57e:	97 fd       	sbrc	r25, 7
    b580:	04 c0       	rjmp	.+8      	; 0xb58a <printf_via_mqtt(char, __file*)+0x36>
    b582:	8a 30       	cpi	r24, 0x0A	; 10
    b584:	11 f0       	breq	.+4      	; 0xb58a <printf_via_mqtt(char, __file*)+0x36>
    b586:	81 11       	cpse	r24, r1
    b588:	13 c0       	rjmp	.+38     	; 0xb5b0 <printf_via_mqtt(char, __file*)+0x5c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:444
  {
    strcpy(topic, "log-printf");
    b58a:	67 ea       	ldi	r22, 0xA7	; 167
    b58c:	73 e0       	ldi	r23, 0x03	; 3
    b58e:	ce 01       	movw	r24, r28
    b590:	01 96       	adiw	r24, 0x01	; 1
    b592:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:445
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    b596:	42 ef       	ldi	r20, 0xF2	; 242
    b598:	58 e0       	ldi	r21, 0x08	; 8
    b59a:	be 01       	movw	r22, r28
    b59c:	6f 5f       	subi	r22, 0xFF	; 255
    b59e:	7f 4f       	sbci	r23, 0xFF	; 255
    b5a0:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <pub_mqtt_client>
    b5a4:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <pub_mqtt_client+0x1>
    b5a8:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:446
    mqtt_log_cnt = 0;
    b5ac:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <mqtt_log_cnt>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:448
  }
}
    b5b0:	60 96       	adiw	r28, 0x10	; 16
    b5b2:	0f b6       	in	r0, 0x3f	; 63
    b5b4:	f8 94       	cli
    b5b6:	de bf       	out	0x3e, r29	; 62
    b5b8:	0f be       	out	0x3f, r0	; 63
    b5ba:	cd bf       	out	0x3d, r28	; 61
    b5bc:	df 91       	pop	r29
    b5be:	cf 91       	pop	r28
    b5c0:	08 95       	ret

0000b5c2 <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2675
    }
}
///
/// je aktivni
void remote_tds_get_active(uint8_t idx, uint8_t *active)
{
    b5c2:	cf 93       	push	r28
    b5c4:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2676
  if (idx < MAX_RTDS)
    b5c6:	8a 30       	cpi	r24, 0x0A	; 10
    b5c8:	68 f4       	brcc	.+26     	; 0xb5e4 <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    b5ca:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    b5cc:	24 e1       	ldi	r18, 0x14	; 20
    b5ce:	82 9f       	mul	r24, r18
    b5d0:	c0 01       	movw	r24, r0
    b5d2:	11 24       	eor	r1, r1
    b5d4:	83 54       	subi	r24, 0x43	; 67
    b5d6:	9a 4f       	sbci	r25, 0xFA	; 250
    b5d8:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b5dc:	88 83       	st	Y, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2682
  }
  else
    *active = 255;
}
    b5de:	df 91       	pop	r29
    b5e0:	cf 91       	pop	r28
    b5e2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2681
  if (idx < MAX_RTDS)
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
    *active = 255;
    b5e4:	8f ef       	ldi	r24, 0xFF	; 255
    b5e6:	fb 01       	movw	r30, r22
    b5e8:	80 83       	st	Z, r24
    b5ea:	f9 cf       	rjmp	.-14     	; 0xb5de <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

0000b5ec <click_rtds_setting_sensor(unsigned char, unsigned char, unsigned char)>:
_Z25click_rtds_setting_sensorhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5379
    args1 - parametr z globalniho nastaveni tlacitek
    args2 / definice menu
    loop_idx - polozka z menu
*/
void click_rtds_setting_sensor(uint8_t args1, uint8_t args2, uint8_t loop_idx)
{
    b5ec:	1f 93       	push	r17
    b5ee:	cf 93       	push	r28
    b5f0:	df 93       	push	r29
    b5f2:	1f 92       	push	r1
    b5f4:	cd b7       	in	r28, 0x3d	; 61
    b5f6:	de b7       	in	r29, 0x3e	; 62
    b5f8:	14 2f       	mov	r17, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5384
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  //printf("pr %d %d %d\n", args1, args2, loop_idx);
  
  remote_tds_get_active(loop_idx, &active);
    b5fa:	be 01       	movw	r22, r28
    b5fc:	6f 5f       	subi	r22, 0xFF	; 255
    b5fe:	7f 4f       	sbci	r23, 0xFF	; 255
    b600:	84 2f       	mov	r24, r20
    b602:	0e 94 e1 5a 	call	0xb5c2	; 0xb5c2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5385
  if (active == 1)
    b606:	89 81       	ldd	r24, Y+1	; 0x01
    b608:	81 30       	cpi	r24, 0x01	; 1
    b60a:	21 f4       	brne	.+8      	; 0xb614 <click_rtds_setting_sensor(unsigned char, unsigned char, unsigned char)+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5387
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_RTDS_DETAIL, loop_idx);
    b60c:	61 2f       	mov	r22, r17
    b60e:	87 e0       	ldi	r24, 0x07	; 7
    b610:	0e 94 cc 31 	call	0x6398	; 0x6398 <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5389
  }
}
    b614:	0f 90       	pop	r0
    b616:	df 91       	pop	r29
    b618:	cf 91       	pop	r28
    b61a:	1f 91       	pop	r17
    b61c:	08 95       	ret

0000b61e <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2732
  }
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
    b61e:	1f 93       	push	r17
    b620:	cf 93       	push	r28
    b622:	df 93       	push	r29
    b624:	1f 92       	push	r1
    b626:	cd b7       	in	r28, 0x3d	; 61
    b628:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b62a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2737
  {
    remote_tds_get_active(idx, &active);
    b62c:	be 01       	movw	r22, r28
    b62e:	6f 5f       	subi	r22, 0xFF	; 255
    b630:	7f 4f       	sbci	r23, 0xFF	; 255
    b632:	81 2f       	mov	r24, r17
    b634:	0e 94 e1 5a 	call	0xb5c2	; 0xb5c2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
    if (active == 0)
    b638:	89 81       	ldd	r24, Y+1	; 0x01
    b63a:	88 23       	and	r24, r24
    b63c:	21 f0       	breq	.+8      	; 0xb646 <remote_tds_find_free()+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b63e:	1f 5f       	subi	r17, 0xFF	; 255
    b640:	1a 30       	cpi	r17, 0x0A	; 10
    b642:	a1 f7       	brne	.-24     	; 0xb62c <remote_tds_find_free()+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
    b644:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2745
      ret = idx;
      break;
    }
  }
  return ret;
}
    b646:	81 2f       	mov	r24, r17
    b648:	0f 90       	pop	r0
    b64a:	df 91       	pop	r29
    b64c:	cf 91       	pop	r28
    b64e:	1f 91       	pop	r17
    b650:	08 95       	ret

0000b652 <click_rtds_add_sensor(unsigned char, unsigned char)>:
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5330
  }
  return cnt;
}

void click_rtds_add_sensor(uint8_t args1, uint8_t args)
{
    b652:	1f 93       	push	r17
    b654:	cf 93       	push	r28
    b656:	df 93       	push	r29
    b658:	00 d0       	rcall	.+0      	; 0xb65a <click_rtds_add_sensor(unsigned char, unsigned char)+0x8>
    b65a:	1f 92       	push	r1
    b65c:	1f 92       	push	r1
    b65e:	cd b7       	in	r28, 0x3d	; 61
    b660:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5333
  char rtds_topic[5];
  uint8_t idx;
  idx = remote_tds_find_free();
    b662:	0e 94 0f 5b 	call	0xb61e	; 0xb61e <remote_tds_find_free()>
    b666:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5334
  if (idx != 255)
    b668:	8f 3f       	cpi	r24, 0xFF	; 255
    b66a:	e1 f0       	breq	.+56     	; 0xb6a4 <click_rtds_add_sensor(unsigned char, unsigned char)+0x52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5336
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    b66c:	63 eb       	ldi	r22, 0xB3	; 179
    b66e:	74 e3       	ldi	r23, 0x34	; 52
    b670:	ce 01       	movw	r24, r28
    b672:	01 96       	adiw	r24, 0x01	; 1
    b674:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5337
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    b678:	60 e0       	ldi	r22, 0x00	; 0
    b67a:	87 e6       	ldi	r24, 0x67	; 103
    b67c:	0e 94 cc 31 	call	0x6398	; 0x6398 <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
  menu_dialog_set_variable_update_now = update_now;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    b680:	be 01       	movw	r22, r28
    b682:	6f 5f       	subi	r22, 0xFF	; 255
    b684:	7f 4f       	sbci	r23, 0xFF	; 255
    b686:	8d ed       	ldi	r24, 0xDD	; 221
    b688:	98 e0       	ldi	r25, 0x08	; 8
    b68a:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2317
  dialog_set_string_max_length = max_length;
    b68e:	82 e1       	ldi	r24, 0x12	; 18
    b690:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
  dialog_set_string_args = idx;
    b694:	10 93 ed 08 	sts	0x08ED, r17	; 0x8008ed <dialog_set_string_args>
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5339
  if (idx != 255)
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx);
    dialog_save_variable_function = &menu_rtds_create_name;
    b698:	88 ea       	ldi	r24, 0xA8	; 168
    b69a:	9f e5       	ldi	r25, 0x5F	; 95
    b69c:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <dialog_save_variable_function+0x1>
    b6a0:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5342
  }

}
    b6a4:	0f 90       	pop	r0
    b6a6:	0f 90       	pop	r0
    b6a8:	0f 90       	pop	r0
    b6aa:	0f 90       	pop	r0
    b6ac:	0f 90       	pop	r0
    b6ae:	df 91       	pop	r29
    b6b0:	cf 91       	pop	r28
    b6b2:	1f 91       	pop	r17
    b6b4:	08 95       	ret

0000b6b6 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2636
  active - ukazatel na promenou active
  name - ukazatel na nazev topicu
*/
/// ziska nazev topicu
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
    b6b6:	af 92       	push	r10
    b6b8:	bf 92       	push	r11
    b6ba:	cf 92       	push	r12
    b6bc:	df 92       	push	r13
    b6be:	ef 92       	push	r14
    b6c0:	ff 92       	push	r15
    b6c2:	0f 93       	push	r16
    b6c4:	1f 93       	push	r17
    b6c6:	cf 93       	push	r28
    b6c8:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2638
  char t;
  if (idx < MAX_RTDS)
    b6ca:	8a 30       	cpi	r24, 0x0A	; 10
    b6cc:	88 f5       	brcc	.+98     	; 0xb730 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    b6ce:	7b 01       	movw	r14, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2642
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    {
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
    b6d0:	94 e1       	ldi	r25, 0x14	; 20
    b6d2:	89 9f       	mul	r24, r25
    b6d4:	e0 01       	movw	r28, r0
    b6d6:	11 24       	eor	r1, r1
    b6d8:	6e 01       	movw	r12, r28
    b6da:	e6 e5       	ldi	r30, 0x56	; 86
    b6dc:	ce 1a       	sub	r12, r30
    b6de:	ea ef       	ldi	r30, 0xFA	; 250
    b6e0:	de 0a       	sbc	r13, r30
    b6e2:	8a 01       	movw	r16, r20
    b6e4:	5e 01       	movw	r10, r28
    b6e6:	f4 e4       	ldi	r31, 0x44	; 68
    b6e8:	af 1a       	sub	r10, r31
    b6ea:	fa ef       	ldi	r31, 0xFA	; 250
    b6ec:	bf 0a       	sbc	r11, r31
    b6ee:	c6 01       	movw	r24, r12
    b6f0:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2643
      name[i] = t;
    b6f4:	f8 01       	movw	r30, r16
    b6f6:	81 93       	st	Z+, r24
    b6f8:	8f 01       	movw	r16, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2644
      name[i + 1] = 0;
    b6fa:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2645
      if (t == 0) break;
    b6fc:	88 23       	and	r24, r24
    b6fe:	31 f0       	breq	.+12     	; 0xb70c <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    b700:	ff ef       	ldi	r31, 0xFF	; 255
    b702:	cf 1a       	sub	r12, r31
    b704:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2640
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
  char t;
  if (idx < MAX_RTDS)
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    b706:	ca 14       	cp	r12, r10
    b708:	db 04       	cpc	r13, r11
    b70a:	89 f7       	brne	.-30     	; 0xb6ee <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2647
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
      name[i] = t;
      name[i + 1] = 0;
      if (t == 0) break;
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    b70c:	ce 01       	movw	r24, r28
    b70e:	83 54       	subi	r24, 0x43	; 67
    b710:	9a 4f       	sbci	r25, 0xFA	; 250
    b712:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b716:	f7 01       	movw	r30, r14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2651
  }
  else
  {
    *active = 255;
    b718:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2653
  }
}
    b71a:	df 91       	pop	r29
    b71c:	cf 91       	pop	r28
    b71e:	1f 91       	pop	r17
    b720:	0f 91       	pop	r16
    b722:	ff 90       	pop	r15
    b724:	ef 90       	pop	r14
    b726:	df 90       	pop	r13
    b728:	cf 90       	pop	r12
    b72a:	bf 90       	pop	r11
    b72c:	af 90       	pop	r10
    b72e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2651
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
  {
    *active = 255;
    b730:	8f ef       	ldi	r24, 0xFF	; 255
    b732:	fb 01       	movw	r30, r22
    b734:	f1 cf       	rjmp	.-30     	; 0xb718 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

0000b736 <get_function_default_temp(unsigned char, unsigned char, char*, char*)>:
_Z25get_function_default_temphhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5449
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci zpet popisek k tlacitkum
void get_function_default_temp(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    b736:	9f 92       	push	r9
    b738:	af 92       	push	r10
    b73a:	bf 92       	push	r11
    b73c:	cf 92       	push	r12
    b73e:	df 92       	push	r13
    b740:	ef 92       	push	r14
    b742:	ff 92       	push	r15
    b744:	0f 93       	push	r16
    b746:	1f 93       	push	r17
    b748:	cf 93       	push	r28
    b74a:	df 93       	push	r29
    b74c:	cd b7       	in	r28, 0x3d	; 61
    b74e:	de b7       	in	r29, 0x3e	; 62
    b750:	aa 97       	sbiw	r28, 0x2a	; 42
    b752:	0f b6       	in	r0, 0x3f	; 63
    b754:	f8 94       	cli
    b756:	de bf       	out	0x3e, r29	; 62
    b758:	0f be       	out	0x3f, r0	; 63
    b75a:	cd bf       	out	0x3d, r28	; 61
    b75c:	98 2e       	mov	r9, r24
    b75e:	7a 01       	movw	r14, r20
    b760:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5453
  char name[20];
  uint8_t cri = 0;
  uint8_t active;
  strcpy(line1, "");
    b762:	62 ef       	ldi	r22, 0xF2	; 242
    b764:	72 e0       	ldi	r23, 0x02	; 2
    b766:	ca 01       	movw	r24, r20
    b768:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5454
  strcpy(line2, "");
    b76c:	62 ef       	ldi	r22, 0xF2	; 242
    b76e:	72 e0       	ldi	r23, 0x02	; 2
    b770:	c6 01       	movw	r24, r12
    b772:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
    b776:	88 ec       	ldi	r24, 0xC8	; 200
    b778:	a8 2e       	mov	r10, r24
    b77a:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5456
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    b77c:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5451
////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci zpet popisek k tlacitkum
void get_function_default_temp(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char name[20];
  uint8_t cri = 0;
    b77e:	10 e0       	ldi	r17, 0x00	; 0
tds_used():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:29

uint8_t tds_used(uint8_t idx)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    return EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    b780:	c5 01       	movw	r24, r10
    b782:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z25get_function_default_temphhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5458
  strcpy(line1, "");
  strcpy(line2, "");
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
  {
    if (tds_used(idx) == 1)
    b786:	81 30       	cpi	r24, 0x01	; 1
    b788:	69 f5       	brne	.+90     	; 0xb7e4 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5460
    {
      if (cri == args1)
    b78a:	91 12       	cpse	r9, r17
    b78c:	2a c0       	rjmp	.+84     	; 0xb7e2 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xac>
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b78e:	be 01       	movw	r22, r28
    b790:	6f 5f       	subi	r22, 0xFF	; 255
    b792:	7f 4f       	sbci	r23, 0xFF	; 255
    b794:	80 2f       	mov	r24, r16
    b796:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    b79a:	be 01       	movw	r22, r28
    b79c:	63 5f       	subi	r22, 0xF3	; 243
    b79e:	7f 4f       	sbci	r23, 0xFF	; 255
    b7a0:	ce 01       	movw	r24, r28
    b7a2:	47 96       	adiw	r24, 0x17	; 23
    b7a4:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
_Z25get_function_default_temphhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5463
      {
        tds_get_name(idx, name);
        strcpy(line2, name);
    b7a8:	be 01       	movw	r22, r28
    b7aa:	69 5e       	subi	r22, 0xE9	; 233
    b7ac:	7f 4f       	sbci	r23, 0xFF	; 255
    b7ae:	c6 01       	movw	r24, r12
    b7b0:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5464
        strcpy_P(line1, nastaveni_onewire);
    b7b4:	64 ec       	ldi	r22, 0xC4	; 196
    b7b6:	74 e3       	ldi	r23, 0x34	; 52
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5480
    {
      if (cri == args1)
      {
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
    b7b8:	c7 01       	movw	r24, r14
    b7ba:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5489
    }
  }
get_function_default_temp_end:
  /// hack kvuli goto
  cri = 0;
}
    b7be:	aa 96       	adiw	r28, 0x2a	; 42
    b7c0:	0f b6       	in	r0, 0x3f	; 63
    b7c2:	f8 94       	cli
    b7c4:	de bf       	out	0x3e, r29	; 62
    b7c6:	0f be       	out	0x3f, r0	; 63
    b7c8:	cd bf       	out	0x3d, r28	; 61
    b7ca:	df 91       	pop	r29
    b7cc:	cf 91       	pop	r28
    b7ce:	1f 91       	pop	r17
    b7d0:	0f 91       	pop	r16
    b7d2:	ff 90       	pop	r15
    b7d4:	ef 90       	pop	r14
    b7d6:	df 90       	pop	r13
    b7d8:	cf 90       	pop	r12
    b7da:	bf 90       	pop	r11
    b7dc:	af 90       	pop	r10
    b7de:	9f 90       	pop	r9
    b7e0:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5467
        tds_get_name(idx, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_onewire);
        goto get_function_default_temp_end;
      }
      cri++;
    b7e2:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5456
  uint8_t cri = 0;
  uint8_t active;
  strcpy(line1, "");
  strcpy(line2, "");
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    b7e4:	0f 5f       	subi	r16, 0xFF	; 255
    b7e6:	86 e1       	ldi	r24, 0x16	; 22
    b7e8:	a8 0e       	add	r10, r24
    b7ea:	b1 1c       	adc	r11, r1
    b7ec:	06 30       	cpi	r16, 0x06	; 6
    b7ee:	41 f6       	brne	.-112    	; 0xb780 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5471
      }
      cri++;
    }
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b7f0:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5473
  {
    remote_tds_get_active(idx, &active);
    b7f2:	be 01       	movw	r22, r28
    b7f4:	6f 5f       	subi	r22, 0xFF	; 255
    b7f6:	7f 4f       	sbci	r23, 0xFF	; 255
    b7f8:	80 2f       	mov	r24, r16
    b7fa:	0e 94 e1 5a 	call	0xb5c2	; 0xb5c2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5474
    if (active == 1)
    b7fe:	89 81       	ldd	r24, Y+1	; 0x01
    b800:	81 30       	cpi	r24, 0x01	; 1
    b802:	a9 f4       	brne	.+42     	; 0xb82e <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xf8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5476
    {
      if (cri == args1)
    b804:	91 12       	cpse	r9, r17
    b806:	12 c0       	rjmp	.+36     	; 0xb82c <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5478
      {
        remote_tds_get_complete(idx, &active, name);
    b808:	ae 01       	movw	r20, r28
    b80a:	49 5e       	subi	r20, 0xE9	; 233
    b80c:	5f 4f       	sbci	r21, 0xFF	; 255
    b80e:	be 01       	movw	r22, r28
    b810:	6f 5f       	subi	r22, 0xFF	; 255
    b812:	7f 4f       	sbci	r23, 0xFF	; 255
    b814:	80 2f       	mov	r24, r16
    b816:	0e 94 5b 5b 	call	0xb6b6	; 0xb6b6 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5479
        strcpy(line2, name);
    b81a:	be 01       	movw	r22, r28
    b81c:	69 5e       	subi	r22, 0xE9	; 233
    b81e:	7f 4f       	sbci	r23, 0xFF	; 255
    b820:	c6 01       	movw	r24, r12
    b822:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5480
        strcpy_P(line1, nastaveni_rtds);
    b826:	65 eb       	ldi	r22, 0xB5	; 181
    b828:	74 e3       	ldi	r23, 0x34	; 52
    b82a:	c6 cf       	rjmp	.-116    	; 0xb7b8 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0x82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5483
        goto get_function_default_temp_end;
      }
      cri++;
    b82c:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5471
      }
      cri++;
    }
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b82e:	0f 5f       	subi	r16, 0xFF	; 255
    b830:	0a 30       	cpi	r16, 0x0A	; 10
    b832:	f9 f6       	brne	.-66     	; 0xb7f2 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xbc>
    b834:	c4 cf       	rjmp	.-120    	; 0xb7be <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0x88>

0000b836 <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5219
  return active;
  }
*/

void get_function_rtds_text_button(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    b836:	cf 92       	push	r12
    b838:	df 92       	push	r13
    b83a:	ef 92       	push	r14
    b83c:	ff 92       	push	r15
    b83e:	1f 93       	push	r17
    b840:	cf 93       	push	r28
    b842:	df 93       	push	r29
    b844:	1f 92       	push	r1
    b846:	cd b7       	in	r28, 0x3d	; 61
    b848:	de b7       	in	r29, 0x3e	; 62
    b84a:	18 2f       	mov	r17, r24
    b84c:	7a 01       	movw	r14, r20
    b84e:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5221
  uint8_t active;
  strcpy_P(line1, text_not_used);
    b850:	62 e9       	ldi	r22, 0x92	; 146
    b852:	74 e3       	ldi	r23, 0x34	; 52
    b854:	ca 01       	movw	r24, r20
    b856:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5223
  //sprintf(line2, "%d %d", args1, args2);
  line2[0] = 0;
    b85a:	f6 01       	movw	r30, r12
    b85c:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5224
  remote_tds_get_active(args1, &active);
    b85e:	be 01       	movw	r22, r28
    b860:	6f 5f       	subi	r22, 0xFF	; 255
    b862:	7f 4f       	sbci	r23, 0xFF	; 255
    b864:	81 2f       	mov	r24, r17
    b866:	0e 94 e1 5a 	call	0xb5c2	; 0xb5c2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5225
  if (active == 1)
    b86a:	89 81       	ldd	r24, Y+1	; 0x01
    b86c:	81 30       	cpi	r24, 0x01	; 1
    b86e:	39 f4       	brne	.+14     	; 0xb87e <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5227
  {
    remote_tds_get_complete(args1, &active, line1);
    b870:	a7 01       	movw	r20, r14
    b872:	be 01       	movw	r22, r28
    b874:	6f 5f       	subi	r22, 0xFF	; 255
    b876:	7f 4f       	sbci	r23, 0xFF	; 255
    b878:	81 2f       	mov	r24, r17
    b87a:	0e 94 5b 5b 	call	0xb6b6	; 0xb6b6 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5229
  }
}
    b87e:	0f 90       	pop	r0
    b880:	df 91       	pop	r29
    b882:	cf 91       	pop	r28
    b884:	1f 91       	pop	r17
    b886:	ff 90       	pop	r15
    b888:	ef 90       	pop	r14
    b88a:	df 90       	pop	r13
    b88c:	cf 90       	pop	r12
    b88e:	08 95       	ret

0000b890 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4922
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
/////
void display_element_show_rtds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    b890:	5f 92       	push	r5
    b892:	6f 92       	push	r6
    b894:	7f 92       	push	r7
    b896:	8f 92       	push	r8
    b898:	9f 92       	push	r9
    b89a:	af 92       	push	r10
    b89c:	bf 92       	push	r11
    b89e:	cf 92       	push	r12
    b8a0:	df 92       	push	r13
    b8a2:	ef 92       	push	r14
    b8a4:	ff 92       	push	r15
    b8a6:	0f 93       	push	r16
    b8a8:	1f 93       	push	r17
    b8aa:	cf 93       	push	r28
    b8ac:	df 93       	push	r29
    b8ae:	cd b7       	in	r28, 0x3d	; 61
    b8b0:	de b7       	in	r29, 0x3e	; 62
    b8b2:	cd 54       	subi	r28, 0x4D	; 77
    b8b4:	d1 09       	sbc	r29, r1
    b8b6:	0f b6       	in	r0, 0x3f	; 63
    b8b8:	f8 94       	cli
    b8ba:	de bf       	out	0x3e, r29	; 62
    b8bc:	0f be       	out	0x3f, r0	; 63
    b8be:	cd bf       	out	0x3d, r28	; 61
    b8c0:	4c 01       	movw	r8, r24
    b8c2:	5b 01       	movw	r10, r22
    b8c4:	5e 2c       	mov	r5, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    b8c6:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xb>
    b8ca:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_lcd+0xa>
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4930
  char name[RTDS_DEVICE_STRING_LEN];
  float te;
  uint8_t last_update;
  uint8_t active;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    b8ce:	26 0f       	add	r18, r22
    b8d0:	37 1f       	adc	r19, r23
    b8d2:	48 0f       	add	r20, r24
    b8d4:	59 1f       	adc	r21, r25
    b8d6:	0e 94 74 83 	call	0x106e8	; 0x106e8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4931
  remote_tds_get_complete(args2, &active, name);
    b8da:	ae 01       	movw	r20, r28
    b8dc:	45 5c       	subi	r20, 0xC5	; 197
    b8de:	5f 4f       	sbci	r21, 0xFF	; 255
    b8e0:	be 01       	movw	r22, r28
    b8e2:	63 5b       	subi	r22, 0xB3	; 179
    b8e4:	7f 4f       	sbci	r23, 0xFF	; 255
    b8e6:	8e 2d       	mov	r24, r14
    b8e8:	0e 94 5b 5b 	call	0xb6b6	; 0xb6b6 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4932
  if (active == 1)
    b8ec:	2e 96       	adiw	r28, 0x0e	; 14
    b8ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    b8f0:	2e 97       	sbiw	r28, 0x0e	; 14
    b8f2:	81 30       	cpi	r24, 0x01	; 1
    b8f4:	09 f0       	breq	.+2      	; 0xb8f8 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x68>
    b8f6:	c1 c0       	rjmp	.+386    	; 0xba7a <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4935
  {
    /// nazev
    strcpy_P(str1, text_nazev);
    b8f8:	68 e7       	ldi	r22, 0x78	; 120
    b8fa:	74 e3       	ldi	r23, 0x34	; 52
    b8fc:	ce 01       	movw	r24, r28
    b8fe:	01 96       	adiw	r24, 0x01	; 1
    b900:	6c 01       	movw	r12, r24
    b902:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4936
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    b906:	34 01       	movw	r6, r8
    b908:	95 e0       	ldi	r25, 0x05	; 5
    b90a:	69 0e       	add	r6, r25
    b90c:	71 1c       	adc	r7, r1
    b90e:	ee 24       	eor	r14, r14
    b910:	ea 94       	dec	r14
    b912:	fe 2c       	mov	r15, r14
    b914:	10 e0       	ldi	r17, 0x00	; 0
    b916:	00 e0       	ldi	r16, 0x00	; 0
    b918:	22 e0       	ldi	r18, 0x02	; 2
    b91a:	a5 01       	movw	r20, r10
    b91c:	46 5f       	subi	r20, 0xF6	; 246
    b91e:	5f 4f       	sbci	r21, 0xFF	; 255
    b920:	b3 01       	movw	r22, r6
    b922:	c6 01       	movw	r24, r12
    b924:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4937
    strcpy(str1, name);
    b928:	be 01       	movw	r22, r28
    b92a:	65 5c       	subi	r22, 0xC5	; 197
    b92c:	7f 4f       	sbci	r23, 0xFF	; 255
    b92e:	c6 01       	movw	r24, r12
    b930:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4938
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    b934:	b4 01       	movw	r22, r8
    b936:	6c 5e       	subi	r22, 0xEC	; 236
    b938:	7f 4f       	sbci	r23, 0xFF	; 255
    b93a:	22 e0       	ldi	r18, 0x02	; 2
    b93c:	a5 01       	movw	r20, r10
    b93e:	42 5e       	subi	r20, 0xE2	; 226
    b940:	5f 4f       	sbci	r21, 0xFF	; 255
    b942:	c6 01       	movw	r24, r12
    b944:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
remote_tds_get_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2778
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int temp = 0;
  if (idx < MAX_RTDS)
    b948:	89 e0       	ldi	r24, 0x09	; 9
    b94a:	85 15       	cp	r24, r5
    b94c:	08 f4       	brcc	.+2      	; 0xb950 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc0>
    b94e:	ac c0       	rjmp	.+344    	; 0xbaa8 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x218>
    b950:	85 2d       	mov	r24, r5
    b952:	0e 94 80 2b 	call	0x5700	; 0x5700 <remote_tds_get_data(unsigned char) [clone .part.25]>
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4940
    strcpy_P(str1, text_nazev);
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    strcpy(str1, name);
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    /// teplota
    te = remote_tds_get_data(args2) / 1000.0;
    b956:	bc 01       	movw	r22, r24
    b958:	99 0f       	add	r25, r25
    b95a:	88 0b       	sbc	r24, r24
    b95c:	99 0b       	sbc	r25, r25
    b95e:	0e 94 c2 b2 	call	0x16584	; 0x16584 <__floatsisf>
    b962:	20 e0       	ldi	r18, 0x00	; 0
    b964:	30 e0       	ldi	r19, 0x00	; 0
    b966:	4a e7       	ldi	r20, 0x7A	; 122
    b968:	54 e4       	ldi	r21, 0x44	; 68
    b96a:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4941
    dtostrf(te, 4, 2, str1);
    b96e:	86 01       	movw	r16, r12
    b970:	22 e0       	ldi	r18, 0x02	; 2
    b972:	44 e0       	ldi	r20, 0x04	; 4
    b974:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4942
    strcat(str1, "C");
    b978:	6c ec       	ldi	r22, 0xCC	; 204
    b97a:	76 e0       	ldi	r23, 0x06	; 6
    b97c:	c6 01       	movw	r24, r12
    b97e:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4943
    strcpy_P(str2, current_temp_short);
    b982:	4e 01       	movw	r8, r28
    b984:	91 e2       	ldi	r25, 0x21	; 33
    b986:	89 0e       	add	r8, r25
    b988:	91 1c       	adc	r9, r1
    b98a:	6f e6       	ldi	r22, 0x6F	; 111
    b98c:	74 e3       	ldi	r23, 0x34	; 52
    b98e:	c4 01       	movw	r24, r8
    b990:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4944
    strcat(str2, str1);
    b994:	b6 01       	movw	r22, r12
    b996:	c4 01       	movw	r24, r8
    b998:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4945
    show_string(str2, x + 5, y + 60 , 2, BLACK, WHITE, 0);
    b99c:	ee 24       	eor	r14, r14
    b99e:	ea 94       	dec	r14
    b9a0:	fe 2c       	mov	r15, r14
    b9a2:	10 e0       	ldi	r17, 0x00	; 0
    b9a4:	00 e0       	ldi	r16, 0x00	; 0
    b9a6:	22 e0       	ldi	r18, 0x02	; 2
    b9a8:	a5 01       	movw	r20, r10
    b9aa:	44 5c       	subi	r20, 0xC4	; 196
    b9ac:	5f 4f       	sbci	r21, 0xFF	; 255
    b9ae:	b3 01       	movw	r22, r6
    b9b0:	c4 01       	movw	r24, r8
    b9b2:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2788
  return temp;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
    b9b6:	89 e0       	ldi	r24, 0x09	; 9
    b9b8:	85 15       	cp	r24, r5
    b9ba:	08 f4       	brcc	.+2      	; 0xb9be <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x12e>
    b9bc:	78 c0       	rjmp	.+240    	; 0xbaae <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x21e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    b9be:	93 e0       	ldi	r25, 0x03	; 3
    b9c0:	59 9e       	mul	r5, r25
    b9c2:	b0 01       	movw	r22, r0
    b9c4:	11 24       	eor	r1, r1
    b9c6:	6a 59       	subi	r22, 0x9A	; 154
    b9c8:	7f 4f       	sbci	r23, 0xFF	; 255
    b9ca:	07 2e       	mov	r0, r23
    b9cc:	00 0c       	add	r0, r0
    b9ce:	88 0b       	sbc	r24, r24
    b9d0:	99 0b       	sbc	r25, r25
    b9d2:	0e 94 dd 89 	call	0x113ba	; 0x113ba <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
    b9d6:	58 2e       	mov	r5, r24
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4948
    strcpy_P(str2, current_temp_short);
    strcat(str2, str1);
    show_string(str2, x + 5, y + 60 , 2, BLACK, WHITE, 0);
    /// posledni aktualizace
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    b9d8:	69 e5       	ldi	r22, 0x59	; 89
    b9da:	74 e3       	ldi	r23, 0x34	; 52
    b9dc:	c4 01       	movw	r24, r8
    b9de:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4949
    sprintf(str1, "%s: %d", str2, last_update);
    b9e2:	1f 92       	push	r1
    b9e4:	5f 92       	push	r5
    b9e6:	9f 92       	push	r9
    b9e8:	8f 92       	push	r8
    b9ea:	80 ea       	ldi	r24, 0xA0	; 160
    b9ec:	93 e0       	ldi	r25, 0x03	; 3
    b9ee:	9f 93       	push	r25
    b9f0:	8f 93       	push	r24
    b9f2:	df 92       	push	r13
    b9f4:	cf 92       	push	r12
    b9f6:	0e 94 27 b7 	call	0x16e4e	; 0x16e4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4950
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    b9fa:	ee 24       	eor	r14, r14
    b9fc:	ea 94       	dec	r14
    b9fe:	fe 2c       	mov	r15, r14
    ba00:	10 e0       	ldi	r17, 0x00	; 0
    ba02:	00 e0       	ldi	r16, 0x00	; 0
    ba04:	21 e0       	ldi	r18, 0x01	; 1
    ba06:	a5 01       	movw	r20, r10
    ba08:	40 5b       	subi	r20, 0xB0	; 176
    ba0a:	5f 4f       	sbci	r21, 0xFF	; 255
    ba0c:	b3 01       	movw	r22, r6
    ba0e:	c6 01       	movw	r24, r12
    ba10:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4952
    active = 1;
    if (last_update >= 250) active = 0;
    ba14:	0f b6       	in	r0, 0x3f	; 63
    ba16:	f8 94       	cli
    ba18:	de bf       	out	0x3e, r29	; 62
    ba1a:	0f be       	out	0x3f, r0	; 63
    ba1c:	cd bf       	out	0x3d, r28	; 61
    ba1e:	99 ef       	ldi	r25, 0xF9	; 249
    ba20:	95 15       	cp	r25, r5
    ba22:	08 f4       	brcc	.+2      	; 0xba26 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x196>
    ba24:	47 c0       	rjmp	.+142    	; 0xbab4 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4951
    /// posledni aktualizace
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    sprintf(str1, "%s: %d", str2, last_update);
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    active = 1;
    ba26:	81 e0       	ldi	r24, 0x01	; 1
    ba28:	2e 96       	adiw	r28, 0x0e	; 14
    ba2a:	8f af       	std	Y+63, r24	; 0x3f
    ba2c:	2e 97       	sbiw	r28, 0x0e	; 14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4953
    if (last_update >= 250) active = 0;
    strcpy_P(str2, text_online);
    ba2e:	62 e5       	ldi	r22, 0x52	; 82
    ba30:	74 e3       	ldi	r23, 0x34	; 52
    ba32:	c4 01       	movw	r24, r8
    ba34:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4954
    sprintf(str1, "%s: %d", str2, active);
    ba38:	2e 96       	adiw	r28, 0x0e	; 14
    ba3a:	8f ad       	ldd	r24, Y+63	; 0x3f
    ba3c:	2e 97       	sbiw	r28, 0x0e	; 14
    ba3e:	1f 92       	push	r1
    ba40:	8f 93       	push	r24
    ba42:	9f 92       	push	r9
    ba44:	8f 92       	push	r8
    ba46:	80 ea       	ldi	r24, 0xA0	; 160
    ba48:	93 e0       	ldi	r25, 0x03	; 3
    ba4a:	9f 93       	push	r25
    ba4c:	8f 93       	push	r24
    ba4e:	df 92       	push	r13
    ba50:	cf 92       	push	r12
    ba52:	0e 94 27 b7 	call	0x16e4e	; 0x16e4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4955
    show_string(str1, x + 5, y + 100 , 2, BLACK, WHITE, 0);
    ba56:	a5 01       	movw	r20, r10
    ba58:	4c 59       	subi	r20, 0x9C	; 156
    ba5a:	5f 4f       	sbci	r21, 0xFF	; 255
    ba5c:	ee 24       	eor	r14, r14
    ba5e:	ea 94       	dec	r14
    ba60:	fe 2c       	mov	r15, r14
    ba62:	10 e0       	ldi	r17, 0x00	; 0
    ba64:	00 e0       	ldi	r16, 0x00	; 0
    ba66:	22 e0       	ldi	r18, 0x02	; 2
    ba68:	b3 01       	movw	r22, r6
    ba6a:	c6 01       	movw	r24, r12
    ba6c:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    ba70:	0f b6       	in	r0, 0x3f	; 63
    ba72:	f8 94       	cli
    ba74:	de bf       	out	0x3e, r29	; 62
    ba76:	0f be       	out	0x3f, r0	; 63
    ba78:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4957
  }
}
    ba7a:	c3 5b       	subi	r28, 0xB3	; 179
    ba7c:	df 4f       	sbci	r29, 0xFF	; 255
    ba7e:	0f b6       	in	r0, 0x3f	; 63
    ba80:	f8 94       	cli
    ba82:	de bf       	out	0x3e, r29	; 62
    ba84:	0f be       	out	0x3f, r0	; 63
    ba86:	cd bf       	out	0x3d, r28	; 61
    ba88:	df 91       	pop	r29
    ba8a:	cf 91       	pop	r28
    ba8c:	1f 91       	pop	r17
    ba8e:	0f 91       	pop	r16
    ba90:	ff 90       	pop	r15
    ba92:	ef 90       	pop	r14
    ba94:	df 90       	pop	r13
    ba96:	cf 90       	pop	r12
    ba98:	bf 90       	pop	r11
    ba9a:	af 90       	pop	r10
    ba9c:	9f 90       	pop	r9
    ba9e:	8f 90       	pop	r8
    baa0:	7f 90       	pop	r7
    baa2:	6f 90       	pop	r6
    baa4:	5f 90       	pop	r5
    baa6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int temp = 0;
    baa8:	90 e0       	ldi	r25, 0x00	; 0
    baaa:	80 e0       	ldi	r24, 0x00	; 0
    baac:	54 cf       	rjmp	.-344    	; 0xb956 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2787
  }
  return temp;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
    baae:	55 24       	eor	r5, r5
    bab0:	5a 94       	dec	r5
    bab2:	92 cf       	rjmp	.-220    	; 0xb9d8 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x148>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4952
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    sprintf(str1, "%s: %d", str2, last_update);
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    active = 1;
    if (last_update >= 250) active = 0;
    bab4:	2e 96       	adiw	r28, 0x0e	; 14
    bab6:	1f ae       	std	Y+63, r1	; 0x3f
    bab8:	2e 97       	sbiw	r28, 0x0e	; 14
    baba:	b9 cf       	rjmp	.-142    	; 0xba2e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>

0000babc <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4818
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
///
/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    babc:	2f 92       	push	r2
    babe:	3f 92       	push	r3
    bac0:	4f 92       	push	r4
    bac2:	5f 92       	push	r5
    bac4:	6f 92       	push	r6
    bac6:	7f 92       	push	r7
    bac8:	8f 92       	push	r8
    baca:	9f 92       	push	r9
    bacc:	af 92       	push	r10
    bace:	bf 92       	push	r11
    bad0:	cf 92       	push	r12
    bad2:	df 92       	push	r13
    bad4:	ef 92       	push	r14
    bad6:	ff 92       	push	r15
    bad8:	0f 93       	push	r16
    bada:	1f 93       	push	r17
    badc:	cf 93       	push	r28
    bade:	df 93       	push	r29
    bae0:	cd b7       	in	r28, 0x3d	; 61
    bae2:	de b7       	in	r29, 0x3e	; 62
    bae4:	ce 54       	subi	r28, 0x4E	; 78
    bae6:	d1 09       	sbc	r29, r1
    bae8:	0f b6       	in	r0, 0x3f	; 63
    baea:	f8 94       	cli
    baec:	de bf       	out	0x3e, r29	; 62
    baee:	0f be       	out	0x3f, r0	; 63
    baf0:	cd bf       	out	0x3d, r28	; 61
    baf2:	5c 01       	movw	r10, r24
    baf4:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4823
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
    baf6:	63 e2       	ldi	r22, 0x23	; 35
    baf8:	74 e3       	ldi	r23, 0x34	; 52
    bafa:	ce 01       	movw	r24, r28
    bafc:	01 96       	adiw	r24, 0x01	; 1
    bafe:	6c 01       	movw	r12, r24
    bb00:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4824
  stat = get_global_temp(default_show_temp, str2, &te);
    bb04:	10 91 ee 08 	lds	r17, 0x08EE	; 0x8008ee <default_show_temp>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5403
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
    bb08:	65 e3       	ldi	r22, 0x35	; 53
    bb0a:	74 e3       	ldi	r23, 0x34	; 52
    bb0c:	ce 01       	movw	r24, r28
    bb0e:	c7 96       	adiw	r24, 0x37	; 55
    bb10:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
    bb14:	51 2c       	mov	r5, r1
    bb16:	41 2c       	mov	r4, r1
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5400
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
    bb18:	71 2c       	mov	r7, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5413
      if (tds.used == 1)
      {
        if (cri == device)
        {
          strcpy(name, tds.name);
          if (status_tds18s20[idx].online == True)
    bb1a:	0e e1       	ldi	r16, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5407
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if (get_tds18s20(idx, &tds) == 1)
    bb1c:	be 01       	movw	r22, r28
    bb1e:	6f 5d       	subi	r22, 0xDF	; 223
    bb20:	7f 4f       	sbci	r23, 0xFF	; 255
    bb22:	84 2d       	mov	r24, r4
    bb24:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
    bb28:	81 30       	cpi	r24, 0x01	; 1
    bb2a:	09 f0       	breq	.+2      	; 0xbb2e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x72>
    bb2c:	9c c0       	rjmp	.+312    	; 0xbc66 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5408
      if (tds.used == 1)
    bb2e:	89 a1       	ldd	r24, Y+33	; 0x21
    bb30:	81 30       	cpi	r24, 0x01	; 1
    bb32:	09 f0       	breq	.+2      	; 0xbb36 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x7a>
    bb34:	98 c0       	rjmp	.+304    	; 0xbc66 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5410
      {
        if (cri == device)
    bb36:	17 11       	cpse	r17, r7
    bb38:	95 c0       	rjmp	.+298    	; 0xbc64 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5412
        {
          strcpy(name, tds.name);
    bb3a:	be 01       	movw	r22, r28
    bb3c:	63 5d       	subi	r22, 0xD3	; 211
    bb3e:	7f 4f       	sbci	r23, 0xFF	; 255
    bb40:	ce 01       	movw	r24, r28
    bb42:	c7 96       	adiw	r24, 0x37	; 55
    bb44:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5413
          if (status_tds18s20[idx].online == True)
    bb48:	04 9d       	mul	r16, r4
    bb4a:	f0 01       	movw	r30, r0
    bb4c:	05 9d       	mul	r16, r5
    bb4e:	f0 0d       	add	r31, r0
    bb50:	11 24       	eor	r1, r1
    bb52:	e9 5e       	subi	r30, 0xE9	; 233
    bb54:	f5 4f       	sbci	r31, 0xF5	; 245
    bb56:	93 8d       	ldd	r25, Z+27	; 0x1b
    bb58:	2d 96       	adiw	r28, 0x0d	; 13
    bb5a:	9f af       	std	Y+63, r25	; 0x3f
    bb5c:	2d 97       	sbiw	r28, 0x0d	; 13
    bb5e:	91 30       	cpi	r25, 0x01	; 1
    bb60:	09 f0       	breq	.+2      	; 0xbb64 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xa8>
    bb62:	80 c0       	rjmp	.+256    	; 0xbc64 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5415
          {
            *temp = status_tds18s20[idx].temp / 1000.0;
    bb64:	65 81       	ldd	r22, Z+5	; 0x05
    bb66:	76 81       	ldd	r23, Z+6	; 0x06
    bb68:	07 2e       	mov	r0, r23
    bb6a:	00 0c       	add	r0, r0
    bb6c:	88 0b       	sbc	r24, r24
    bb6e:	99 0b       	sbc	r25, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5433
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    bb70:	0e 94 c2 b2 	call	0x16584	; 0x16584 <__floatsisf>
    bb74:	20 e0       	ldi	r18, 0x00	; 0
    bb76:	30 e0       	ldi	r19, 0x00	; 0
    bb78:	4a e7       	ldi	r20, 0x7A	; 122
    bb7a:	54 e4       	ldi	r21, 0x44	; 68
    bb7c:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
    bb80:	1b 01       	movw	r2, r22
    bb82:	2c 01       	movw	r4, r24
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4825
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
  stat = get_global_temp(default_show_temp, str2, &te);
  strcat(str1, str2);
    bb84:	be 01       	movw	r22, r28
    bb86:	69 5c       	subi	r22, 0xC9	; 201
    bb88:	7f 4f       	sbci	r23, 0xFF	; 255
    bb8a:	c6 01       	movw	r24, r12
    bb8c:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4826
  show_string(str1, x + 5, y + 5, 1, BLACK, WHITE, 0);
    bb90:	ee 24       	eor	r14, r14
    bb92:	ea 94       	dec	r14
    bb94:	fe 2c       	mov	r15, r14
    bb96:	10 e0       	ldi	r17, 0x00	; 0
    bb98:	00 e0       	ldi	r16, 0x00	; 0
    bb9a:	21 e0       	ldi	r18, 0x01	; 1
    bb9c:	a4 01       	movw	r20, r8
    bb9e:	4b 5f       	subi	r20, 0xFB	; 251
    bba0:	5f 4f       	sbci	r21, 0xFF	; 255
    bba2:	b5 01       	movw	r22, r10
    bba4:	6b 5f       	subi	r22, 0xFB	; 251
    bba6:	7f 4f       	sbci	r23, 0xFF	; 255
    bba8:	c6 01       	movw	r24, r12
    bbaa:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    bbae:	34 01       	movw	r6, r8
    bbb0:	94 e1       	ldi	r25, 0x14	; 20
    bbb2:	69 0e       	add	r6, r25
    bbb4:	71 1c       	adc	r7, r1
    bbb6:	c5 01       	movw	r24, r10
    bbb8:	04 96       	adiw	r24, 0x04	; 4
    bbba:	2f 96       	adiw	r28, 0x0f	; 15
    bbbc:	9f af       	std	Y+63, r25	; 0x3f
    bbbe:	8e af       	std	Y+62, r24	; 0x3e
    bbc0:	2f 97       	sbiw	r28, 0x0f	; 15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4827
  if (stat == 1)
    bbc2:	2d 96       	adiw	r28, 0x0d	; 13
    bbc4:	9f ad       	ldd	r25, Y+63	; 0x3f
    bbc6:	2d 97       	sbiw	r28, 0x0d	; 13
    bbc8:	91 30       	cpi	r25, 0x01	; 1
    bbca:	09 f0       	breq	.+2      	; 0xbbce <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x112>
    bbcc:	95 c0       	rjmp	.+298    	; 0xbcf8 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x23c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4829
  {
    dtostrf(te, 4, 1, str1);
    bbce:	86 01       	movw	r16, r12
    bbd0:	21 e0       	ldi	r18, 0x01	; 1
    bbd2:	44 e0       	ldi	r20, 0x04	; 4
    bbd4:	c2 01       	movw	r24, r4
    bbd6:	b1 01       	movw	r22, r2
    bbd8:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4830
    if (strlen(str1) <= 4)
    bbdc:	f6 01       	movw	r30, r12
    bbde:	01 90       	ld	r0, Z+
    bbe0:	00 20       	and	r0, r0
    bbe2:	e9 f7       	brne	.-6      	; 0xbbde <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    bbe4:	31 97       	sbiw	r30, 0x01	; 1
    bbe6:	ec 19       	sub	r30, r12
    bbe8:	fd 09       	sbc	r31, r13
    bbea:	35 97       	sbiw	r30, 0x05	; 5
    bbec:	28 f4       	brcc	.+10     	; 0xbbf8 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x13c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4831
      strcat(str1, "C");
    bbee:	6c ec       	ldi	r22, 0xCC	; 204
    bbf0:	76 e0       	ldi	r23, 0x06	; 6
    bbf2:	c6 01       	movw	r24, r12
    bbf4:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4832
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    bbf8:	ee 24       	eor	r14, r14
    bbfa:	ea 94       	dec	r14
    bbfc:	fe 2c       	mov	r15, r14
    bbfe:	10 e0       	ldi	r17, 0x00	; 0
    bc00:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4837
  }
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    bc02:	28 e0       	ldi	r18, 0x08	; 8
    bc04:	a3 01       	movw	r20, r6
    bc06:	2f 96       	adiw	r28, 0x0f	; 15
    bc08:	6e ad       	ldd	r22, Y+62	; 0x3e
    bc0a:	7f ad       	ldd	r23, Y+63	; 0x3f
    bc0c:	2f 97       	sbiw	r28, 0x0f	; 15
    bc0e:	c6 01       	movw	r24, r12
    bc10:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    bc14:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xb>
    bc18:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_lcd+0xa>
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4840
  }
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    bc1c:	94 01       	movw	r18, r8
    bc1e:	2c 5a       	subi	r18, 0xAC	; 172
    bc20:	3f 4f       	sbci	r19, 0xFF	; 255
    bc22:	a5 01       	movw	r20, r10
    bc24:	4c 50       	subi	r20, 0x0C	; 12
    bc26:	5f 4f       	sbci	r21, 0xFF	; 255
    bc28:	b4 01       	movw	r22, r8
    bc2a:	c5 01       	movw	r24, r10
    bc2c:	0e 94 74 83 	call	0x106e8	; 0x106e8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4841
}
    bc30:	c2 5b       	subi	r28, 0xB2	; 178
    bc32:	df 4f       	sbci	r29, 0xFF	; 255
    bc34:	0f b6       	in	r0, 0x3f	; 63
    bc36:	f8 94       	cli
    bc38:	de bf       	out	0x3e, r29	; 62
    bc3a:	0f be       	out	0x3f, r0	; 63
    bc3c:	cd bf       	out	0x3d, r28	; 61
    bc3e:	df 91       	pop	r29
    bc40:	cf 91       	pop	r28
    bc42:	1f 91       	pop	r17
    bc44:	0f 91       	pop	r16
    bc46:	ff 90       	pop	r15
    bc48:	ef 90       	pop	r14
    bc4a:	df 90       	pop	r13
    bc4c:	cf 90       	pop	r12
    bc4e:	bf 90       	pop	r11
    bc50:	af 90       	pop	r10
    bc52:	9f 90       	pop	r9
    bc54:	8f 90       	pop	r8
    bc56:	7f 90       	pop	r7
    bc58:	6f 90       	pop	r6
    bc5a:	5f 90       	pop	r5
    bc5c:	4f 90       	pop	r4
    bc5e:	3f 90       	pop	r3
    bc60:	2f 90       	pop	r2
    bc62:	08 95       	ret
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5420
            *temp = status_tds18s20[idx].temp / 1000.0;
            ret = 1;
            goto get_global_temp_end;
          }
        }
        cri++;
    bc64:	73 94       	inc	r7
    bc66:	8f ef       	ldi	r24, 0xFF	; 255
    bc68:	48 1a       	sub	r4, r24
    bc6a:	58 0a       	sbc	r5, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5406
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    bc6c:	96 e0       	ldi	r25, 0x06	; 6
    bc6e:	49 16       	cp	r4, r25
    bc70:	51 04       	cpc	r5, r1
    bc72:	09 f0       	breq	.+2      	; 0xbc76 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1ba>
    bc74:	53 cf       	rjmp	.-346    	; 0xbb1c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x60>
    bc76:	36 e6       	ldi	r19, 0x66	; 102
    bc78:	23 2e       	mov	r2, r19
    bc7a:	31 2c       	mov	r3, r1
    bc7c:	41 2c       	mov	r4, r1
    bc7e:	51 2c       	mov	r5, r1
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5423
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    bc80:	61 2c       	mov	r6, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5425
  {
    remote_tds_get_active(idx, &active);
    bc82:	be 01       	movw	r22, r28
    bc84:	65 5b       	subi	r22, 0xB5	; 181
    bc86:	7f 4f       	sbci	r23, 0xFF	; 255
    bc88:	86 2d       	mov	r24, r6
    bc8a:	0e 94 e1 5a 	call	0xb5c2	; 0xb5c2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5426
    if (active == 1)
    bc8e:	2c 96       	adiw	r28, 0x0c	; 12
    bc90:	8f ad       	ldd	r24, Y+63	; 0x3f
    bc92:	2c 97       	sbiw	r28, 0x0c	; 12
    bc94:	2d 96       	adiw	r28, 0x0d	; 13
    bc96:	8f af       	std	Y+63, r24	; 0x3f
    bc98:	2d 97       	sbiw	r28, 0x0d	; 13
    bc9a:	81 30       	cpi	r24, 0x01	; 1
    bc9c:	d1 f4       	brne	.+52     	; 0xbcd2 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x216>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5428
    {
      if (cri == device)
    bc9e:	17 11       	cpse	r17, r7
    bca0:	17 c0       	rjmp	.+46     	; 0xbcd0 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x214>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5430
      {
        remote_tds_get_complete(idx, &active, name);
    bca2:	ae 01       	movw	r20, r28
    bca4:	49 5c       	subi	r20, 0xC9	; 201
    bca6:	5f 4f       	sbci	r21, 0xFF	; 255
    bca8:	be 01       	movw	r22, r28
    bcaa:	65 5b       	subi	r22, 0xB5	; 181
    bcac:	7f 4f       	sbci	r23, 0xFF	; 255
    bcae:	86 2d       	mov	r24, r6
    bcb0:	0e 94 5b 5b 	call	0xb6b6	; 0xb6b6 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    bcb4:	c2 01       	movw	r24, r4
    bcb6:	b1 01       	movw	r22, r2
    bcb8:	0e 94 dd 89 	call	0x113ba	; 0x113ba <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5431
    if (active == 1)
    {
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
    bcbc:	8a 3f       	cpi	r24, 0xFA	; 250
    bcbe:	40 f4       	brcc	.+16     	; 0xbcd0 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x214>
remote_tds_get_data():
    bcc0:	86 2d       	mov	r24, r6
    bcc2:	0e 94 80 2b 	call	0x5700	; 0x5700 <remote_tds_get_data(unsigned char) [clone .part.25]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5433
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    bcc6:	bc 01       	movw	r22, r24
    bcc8:	99 0f       	add	r25, r25
    bcca:	88 0b       	sbc	r24, r24
    bccc:	99 0b       	sbc	r25, r25
    bcce:	50 cf       	rjmp	.-352    	; 0xbb70 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5438
          ret = 1;
          goto get_global_temp_end;
        }
      }
      cri++;
    bcd0:	73 94       	inc	r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5423
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    bcd2:	63 94       	inc	r6
    bcd4:	93 e0       	ldi	r25, 0x03	; 3
    bcd6:	29 0e       	add	r2, r25
    bcd8:	31 1c       	adc	r3, r1
    bcda:	41 1c       	adc	r4, r1
    bcdc:	51 1c       	adc	r5, r1
    bcde:	84 e8       	ldi	r24, 0x84	; 132
    bce0:	28 16       	cp	r2, r24
    bce2:	31 04       	cpc	r3, r1
    bce4:	41 04       	cpc	r4, r1
    bce6:	51 04       	cpc	r5, r1
    bce8:	61 f6       	brne	.-104    	; 0xbc82 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5404
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
    bcea:	21 2c       	mov	r2, r1
    bcec:	31 2c       	mov	r3, r1
    bcee:	21 01       	movw	r4, r2
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5401
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
    bcf0:	2d 96       	adiw	r28, 0x0d	; 13
    bcf2:	1f ae       	std	Y+63, r1	; 0x3f
    bcf4:	2d 97       	sbiw	r28, 0x0d	; 13
    bcf6:	46 cf       	rjmp	.-372    	; 0xbb84 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4836
      strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    bcf8:	65 e3       	ldi	r22, 0x35	; 53
    bcfa:	74 e3       	ldi	r23, 0x34	; 52
    bcfc:	c6 01       	movw	r24, r12
    bcfe:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4837
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    bd02:	ee 24       	eor	r14, r14
    bd04:	ea 94       	dec	r14
    bd06:	fe 2c       	mov	r15, r14
    bd08:	00 e0       	ldi	r16, 0x00	; 0
    bd0a:	18 ef       	ldi	r17, 0xF8	; 248
    bd0c:	7a cf       	rjmp	.-268    	; 0xbc02 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x146>

0000bd0e <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3850
  }
*/
///
///
void send_mqtt_remote_tds_status(void)
{
    bd0e:	cf 92       	push	r12
    bd10:	df 92       	push	r13
    bd12:	ef 92       	push	r14
    bd14:	ff 92       	push	r15
    bd16:	1f 93       	push	r17
    bd18:	cf 93       	push	r28
    bd1a:	df 93       	push	r29
    bd1c:	cd b7       	in	r28, 0x3d	; 61
    bd1e:	de b7       	in	r29, 0x3e	; 62
    bd20:	63 97       	sbiw	r28, 0x13	; 19
    bd22:	0f b6       	in	r0, 0x3f	; 63
    bd24:	f8 94       	cli
    bd26:	de bf       	out	0x3e, r29	; 62
    bd28:	0f be       	out	0x3f, r0	; 63
    bd2a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3851
  uint8_t active = 0;
    bd2c:	1b 8a       	std	Y+19, r1	; 0x13
    bd2e:	86 e6       	ldi	r24, 0x66	; 102
    bd30:	c8 2e       	mov	r12, r24
    bd32:	d1 2c       	mov	r13, r1
    bd34:	e1 2c       	mov	r14, r1
    bd36:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3853
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    bd38:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3855
  {
    remote_tds_get_complete(idx, &active, payload);
    bd3a:	ae 01       	movw	r20, r28
    bd3c:	4f 5f       	subi	r20, 0xFF	; 255
    bd3e:	5f 4f       	sbci	r21, 0xFF	; 255
    bd40:	be 01       	movw	r22, r28
    bd42:	6d 5e       	subi	r22, 0xED	; 237
    bd44:	7f 4f       	sbci	r23, 0xFF	; 255
    bd46:	81 2f       	mov	r24, r17
    bd48:	0e 94 5b 5b 	call	0xb6b6	; 0xb6b6 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3857
    /// odeslu pouze pokud je neco aktivni, jinak ne
    if (active == 1)
    bd4c:	8b 89       	ldd	r24, Y+19	; 0x13
    bd4e:	81 30       	cpi	r24, 0x01	; 1
    bd50:	09 f0       	breq	.+2      	; 0xbd54 <send_mqtt_remote_tds_status()+0x46>
    bd52:	44 c0       	rjmp	.+136    	; 0xbddc <send_mqtt_remote_tds_status()+0xce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3859
    {
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "name", payload);
    bd54:	9e 01       	movw	r18, r28
    bd56:	2f 5f       	subi	r18, 0xFF	; 255
    bd58:	3f 4f       	sbci	r19, 0xFF	; 255
    bd5a:	42 eb       	ldi	r20, 0xB2	; 178
    bd5c:	53 e0       	ldi	r21, 0x03	; 3
    bd5e:	61 2f       	mov	r22, r17
    bd60:	87 eb       	ldi	r24, 0xB7	; 183
    bd62:	93 e0       	ldi	r25, 0x03	; 3
    bd64:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3860
      itoa(active, payload, 10);
    bd68:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    bd6a:	4a e0       	ldi	r20, 0x0A	; 10
    bd6c:	be 01       	movw	r22, r28
    bd6e:	6f 5f       	subi	r22, 0xFF	; 255
    bd70:	7f 4f       	sbci	r23, 0xFF	; 255
    bd72:	90 e0       	ldi	r25, 0x00	; 0
    bd74:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3861
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
    bd78:	9e 01       	movw	r18, r28
    bd7a:	2f 5f       	subi	r18, 0xFF	; 255
    bd7c:	3f 4f       	sbci	r19, 0xFF	; 255
    bd7e:	4c eb       	ldi	r20, 0xBC	; 188
    bd80:	53 e0       	ldi	r21, 0x03	; 3
    bd82:	61 2f       	mov	r22, r17
    bd84:	87 eb       	ldi	r24, 0xB7	; 183
    bd86:	93 e0       	ldi	r25, 0x03	; 3
    bd88:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
remote_tds_get_data():
    bd8c:	81 2f       	mov	r24, r17
    bd8e:	0e 94 80 2b 	call	0x5700	; 0x5700 <remote_tds_get_data(unsigned char) [clone .part.25]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    bd92:	4a e0       	ldi	r20, 0x0A	; 10
    bd94:	be 01       	movw	r22, r28
    bd96:	6f 5f       	subi	r22, 0xFF	; 255
    bd98:	7f 4f       	sbci	r23, 0xFF	; 255
    bd9a:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3863
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
    bd9e:	9e 01       	movw	r18, r28
    bda0:	2f 5f       	subi	r18, 0xFF	; 255
    bda2:	3f 4f       	sbci	r19, 0xFF	; 255
    bda4:	43 ec       	ldi	r20, 0xC3	; 195
    bda6:	53 e0       	ldi	r21, 0x03	; 3
    bda8:	61 2f       	mov	r22, r17
    bdaa:	87 eb       	ldi	r24, 0xB7	; 183
    bdac:	93 e0       	ldi	r25, 0x03	; 3
    bdae:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    bdb2:	c7 01       	movw	r24, r14
    bdb4:	b6 01       	movw	r22, r12
    bdb6:	0e 94 dd 89 	call	0x113ba	; 0x113ba <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    bdba:	4a e0       	ldi	r20, 0x0A	; 10
    bdbc:	be 01       	movw	r22, r28
    bdbe:	6f 5f       	subi	r22, 0xFF	; 255
    bdc0:	7f 4f       	sbci	r23, 0xFF	; 255
    bdc2:	90 e0       	ldi	r25, 0x00	; 0
    bdc4:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3865
      itoa(active, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    bdc8:	9e 01       	movw	r18, r28
    bdca:	2f 5f       	subi	r18, 0xFF	; 255
    bdcc:	3f 4f       	sbci	r19, 0xFF	; 255
    bdce:	48 ec       	ldi	r20, 0xC8	; 200
    bdd0:	53 e0       	ldi	r21, 0x03	; 3
    bdd2:	61 2f       	mov	r22, r17
    bdd4:	87 eb       	ldi	r24, 0xB7	; 183
    bdd6:	93 e0       	ldi	r25, 0x03	; 3
    bdd8:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3853
///
void send_mqtt_remote_tds_status(void)
{
  uint8_t active = 0;
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    bddc:	1f 5f       	subi	r17, 0xFF	; 255
    bdde:	83 e0       	ldi	r24, 0x03	; 3
    bde0:	c8 0e       	add	r12, r24
    bde2:	d1 1c       	adc	r13, r1
    bde4:	e1 1c       	adc	r14, r1
    bde6:	f1 1c       	adc	r15, r1
    bde8:	84 e8       	ldi	r24, 0x84	; 132
    bdea:	c8 16       	cp	r12, r24
    bdec:	d1 04       	cpc	r13, r1
    bdee:	e1 04       	cpc	r14, r1
    bdf0:	f1 04       	cpc	r15, r1
    bdf2:	09 f0       	breq	.+2      	; 0xbdf6 <send_mqtt_remote_tds_status()+0xe8>
    bdf4:	a2 cf       	rjmp	.-188    	; 0xbd3a <send_mqtt_remote_tds_status()+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3868
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    }
  }
}
    bdf6:	63 96       	adiw	r28, 0x13	; 19
    bdf8:	0f b6       	in	r0, 0x3f	; 63
    bdfa:	f8 94       	cli
    bdfc:	de bf       	out	0x3e, r29	; 62
    bdfe:	0f be       	out	0x3f, r0	; 63
    be00:	cd bf       	out	0x3d, r28	; 61
    be02:	df 91       	pop	r29
    be04:	cf 91       	pop	r28
    be06:	1f 91       	pop	r17
    be08:	ff 90       	pop	r15
    be0a:	ef 90       	pop	r14
    be0c:	df 90       	pop	r13
    be0e:	cf 90       	pop	r12
    be10:	08 95       	ret

0000be12 <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2753
   navratove hodnoty
   255 ... nenalezeno
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
    be12:	ef 92       	push	r14
    be14:	ff 92       	push	r15
    be16:	0f 93       	push	r16
    be18:	1f 93       	push	r17
    be1a:	cf 93       	push	r28
    be1c:	df 93       	push	r29
    be1e:	cd b7       	in	r28, 0x3d	; 61
    be20:	de b7       	in	r29, 0x3e	; 62
    be22:	63 97       	sbiw	r28, 0x13	; 19
    be24:	0f b6       	in	r0, 0x3f	; 63
    be26:	f8 94       	cli
    be28:	de bf       	out	0x3e, r29	; 62
    be2a:	0f be       	out	0x3f, r0	; 63
    be2c:	cd bf       	out	0x3d, r28	; 61
    be2e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2757
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    be30:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2755
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
    be32:	0f ef       	ldi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2759
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_complete(idx, &active, tmp_name);
    be34:	ae 01       	movw	r20, r28
    be36:	4f 5f       	subi	r20, 0xFF	; 255
    be38:	5f 4f       	sbci	r21, 0xFF	; 255
    be3a:	be 01       	movw	r22, r28
    be3c:	6d 5e       	subi	r22, 0xED	; 237
    be3e:	7f 4f       	sbci	r23, 0xFF	; 255
    be40:	81 2f       	mov	r24, r17
    be42:	0e 94 5b 5b 	call	0xb6b6	; 0xb6b6 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2760
    if (strcmp(name, tmp_name) == 0)
    be46:	be 01       	movw	r22, r28
    be48:	6f 5f       	subi	r22, 0xFF	; 255
    be4a:	7f 4f       	sbci	r23, 0xFF	; 255
    be4c:	c7 01       	movw	r24, r14
    be4e:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    be52:	89 2b       	or	r24, r25
    be54:	09 f4       	brne	.+2      	; 0xbe58 <remote_tds_name_exist(char*)+0x46>
    be56:	01 2f       	mov	r16, r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2757
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    be58:	1f 5f       	subi	r17, 0xFF	; 255
    be5a:	1a 30       	cpi	r17, 0x0A	; 10
    be5c:	59 f7       	brne	.-42     	; 0xbe34 <remote_tds_name_exist(char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2764
    remote_tds_get_complete(idx, &active, tmp_name);
    if (strcmp(name, tmp_name) == 0)
      found = idx;
  }
  return found;
}
    be5e:	80 2f       	mov	r24, r16
    be60:	63 96       	adiw	r28, 0x13	; 19
    be62:	0f b6       	in	r0, 0x3f	; 63
    be64:	f8 94       	cli
    be66:	de bf       	out	0x3e, r29	; 62
    be68:	0f be       	out	0x3f, r0	; 63
    be6a:	cd bf       	out	0x3d, r28	; 61
    be6c:	df 91       	pop	r29
    be6e:	cf 91       	pop	r28
    be70:	1f 91       	pop	r17
    be72:	0f 91       	pop	r16
    be74:	ff 90       	pop	r15
    be76:	ef 90       	pop	r14
    be78:	08 95       	ret

0000be7a <menu_rtds_update_name(unsigned char, unsigned char)>:
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5361
      remote_tds_subscibe_topic(idx);
    }
}

void menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
    be7a:	1f 93       	push	r17
    be7c:	cf 93       	push	r28
    be7e:	df 93       	push	r29
    be80:	cd b7       	in	r28, 0x3d	; 61
    be82:	de b7       	in	r29, 0x3e	; 62
    be84:	62 97       	sbiw	r28, 0x12	; 18
    be86:	0f b6       	in	r0, 0x3f	; 63
    be88:	f8 94       	cli
    be8a:	de bf       	out	0x3e, r29	; 62
    be8c:	0f be       	out	0x3f, r0	; 63
    be8e:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2323
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    be90:	10 91 ed 08 	lds	r17, 0x08ED	; 0x8008ed <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    be94:	6d ed       	ldi	r22, 0xDD	; 221
    be96:	78 e0       	ldi	r23, 0x08	; 8
    be98:	ce 01       	movw	r24, r28
    be9a:	01 96       	adiw	r24, 0x01	; 1
    be9c:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5366
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  //printf("update %s, %d\n", name, idx);
  if (strlen(name) > 0)
    bea0:	89 81       	ldd	r24, Y+1	; 0x01
    bea2:	88 23       	and	r24, r24
    bea4:	71 f0       	breq	.+28     	; 0xbec2 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5368
  {
    if (remote_tds_name_exist(name) == 255)
    bea6:	ce 01       	movw	r24, r28
    bea8:	01 96       	adiw	r24, 0x01	; 1
    beaa:	0e 94 09 5f 	call	0xbe12	; 0xbe12 <remote_tds_name_exist(char*)>
    beae:	8f 3f       	cpi	r24, 0xFF	; 255
    beb0:	41 f4       	brne	.+16     	; 0xbec2 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2664
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    beb2:	1a 30       	cpi	r17, 0x0A	; 10
    beb4:	30 f4       	brcc	.+12     	; 0xbec2 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
    beb6:	be 01       	movw	r22, r28
    beb8:	6f 5f       	subi	r22, 0xFF	; 255
    beba:	7f 4f       	sbci	r23, 0xFF	; 255
    bebc:	81 2f       	mov	r24, r17
    bebe:	0e 94 ca 52 	call	0xa594	; 0xa594 <remote_tds_set_name(unsigned char, char*) [clone .part.21]>
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5371
  if (strlen(name) > 0)
  {
    if (remote_tds_name_exist(name) == 255)
      remote_tds_set_name(idx, name);
  }
}
    bec2:	62 96       	adiw	r28, 0x12	; 18
    bec4:	0f b6       	in	r0, 0x3f	; 63
    bec6:	f8 94       	cli
    bec8:	de bf       	out	0x3e, r29	; 62
    beca:	0f be       	out	0x3f, r0	; 63
    becc:	cd bf       	out	0x3d, r28	; 61
    bece:	df 91       	pop	r29
    bed0:	cf 91       	pop	r28
    bed2:	1f 91       	pop	r17
    bed4:	08 95       	ret

0000bed6 <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2702
/// funkce pro nastaveni odebirani topicu vzdalenych cidel
/*
  idx - index nazvu topicu, ktery si chci subscribnout/unsubscribnout
*/
void remote_tds_subscibe_topic(uint8_t idx)
{
    bed6:	cf 93       	push	r28
    bed8:	df 93       	push	r29
    beda:	cd b7       	in	r28, 0x3d	; 61
    bedc:	de b7       	in	r29, 0x3e	; 62
    bede:	c1 58       	subi	r28, 0x81	; 129
    bee0:	d1 09       	sbc	r29, r1
    bee2:	0f b6       	in	r0, 0x3f	; 63
    bee4:	f8 94       	cli
    bee6:	de bf       	out	0x3e, r29	; 62
    bee8:	0f be       	out	0x3f, r0	; 63
    beea:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2705
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    beec:	cf 57       	subi	r28, 0x7F	; 127
    beee:	df 4f       	sbci	r29, 0xFF	; 255
    bef0:	18 82       	st	Y, r1
    bef2:	c1 58       	subi	r28, 0x81	; 129
    bef4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2706
  remote_tds_get_complete(idx, &active, tmp1);
    bef6:	ae 01       	movw	r20, r28
    bef8:	4f 5f       	subi	r20, 0xFF	; 255
    befa:	5f 4f       	sbci	r21, 0xFF	; 255
    befc:	be 01       	movw	r22, r28
    befe:	6f 57       	subi	r22, 0x7F	; 127
    bf00:	7f 4f       	sbci	r23, 0xFF	; 255
    bf02:	0e 94 5b 5b 	call	0xb6b6	; 0xb6b6 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2707
  if (active == 1)
    bf06:	cf 57       	subi	r28, 0x7F	; 127
    bf08:	df 4f       	sbci	r29, 0xFF	; 255
    bf0a:	88 81       	ld	r24, Y
    bf0c:	c1 58       	subi	r28, 0x81	; 129
    bf0e:	d0 40       	sbci	r29, 0x00	; 0
    bf10:	81 30       	cpi	r24, 0x01	; 1
    bf12:	a1 f4       	brne	.+40     	; 0xbf3c <remote_tds_subscibe_topic(unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2709
  {
    strcpy(tmp2, "/rtds/");
    bf14:	64 ed       	ldi	r22, 0xD4	; 212
    bf16:	73 e0       	ldi	r23, 0x03	; 3
    bf18:	ce 01       	movw	r24, r28
    bf1a:	8f 5b       	subi	r24, 0xBF	; 191
    bf1c:	9f 4f       	sbci	r25, 0xFF	; 255
    bf1e:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2710
    strcat(tmp2, tmp1);
    bf22:	be 01       	movw	r22, r28
    bf24:	6f 5f       	subi	r22, 0xFF	; 255
    bf26:	7f 4f       	sbci	r23, 0xFF	; 255
    bf28:	ce 01       	movw	r24, r28
    bf2a:	8f 5b       	subi	r24, 0xBF	; 191
    bf2c:	9f 4f       	sbci	r25, 0xFF	; 255
    bf2e:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2711
    mqtt_client.subscribe(tmp2);
    bf32:	ce 01       	movw	r24, r28
    bf34:	8f 5b       	subi	r24, 0xBF	; 191
    bf36:	9f 4f       	sbci	r25, 0xFF	; 255
    bf38:	0e 94 33 95 	call	0x12a66	; 0x12a66 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2713
  }
}
    bf3c:	cf 57       	subi	r28, 0x7F	; 127
    bf3e:	df 4f       	sbci	r29, 0xFF	; 255
    bf40:	0f b6       	in	r0, 0x3f	; 63
    bf42:	f8 94       	cli
    bf44:	de bf       	out	0x3e, r29	; 62
    bf46:	0f be       	out	0x3f, r0	; 63
    bf48:	cd bf       	out	0x3d, r28	; 61
    bf4a:	df 91       	pop	r29
    bf4c:	cf 91       	pop	r28
    bf4e:	08 95       	ret

0000bf50 <menu_rtds_create_name(unsigned char, unsigned char)>:
_Z21menu_rtds_create_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5346

}


void menu_rtds_create_name(uint8_t args1, uint8_t args2)
{
    bf50:	1f 93       	push	r17
    bf52:	cf 93       	push	r28
    bf54:	df 93       	push	r29
    bf56:	cd b7       	in	r28, 0x3d	; 61
    bf58:	de b7       	in	r29, 0x3e	; 62
    bf5a:	62 97       	sbiw	r28, 0x12	; 18
    bf5c:	0f b6       	in	r0, 0x3f	; 63
    bf5e:	f8 94       	cli
    bf60:	de bf       	out	0x3e, r29	; 62
    bf62:	0f be       	out	0x3f, r0	; 63
    bf64:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2323
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    bf66:	10 91 ed 08 	lds	r17, 0x08ED	; 0x8008ed <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    bf6a:	6d ed       	ldi	r22, 0xDD	; 221
    bf6c:	78 e0       	ldi	r23, 0x08	; 8
    bf6e:	ce 01       	movw	r24, r28
    bf70:	01 96       	adiw	r24, 0x01	; 1
    bf72:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
_Z21menu_rtds_create_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5352
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active = 1;
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  //printf("create %s, %d\n", name, idx);
  if (strlen(name) > 0)
    bf76:	89 81       	ldd	r24, Y+1	; 0x01
    bf78:	88 23       	and	r24, r24
    bf7a:	81 f0       	breq	.+32     	; 0xbf9c <menu_rtds_create_name(unsigned char, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5353
    if (remote_tds_name_exist(name) == 255)
    bf7c:	ce 01       	movw	r24, r28
    bf7e:	01 96       	adiw	r24, 0x01	; 1
    bf80:	0e 94 09 5f 	call	0xbe12	; 0xbe12 <remote_tds_name_exist(char*)>
    bf84:	8f 3f       	cpi	r24, 0xFF	; 255
    bf86:	51 f4       	brne	.+20     	; 0xbf9c <menu_rtds_create_name(unsigned char, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5355
    {
      remote_tds_set_complete(idx, active, name);
    bf88:	ae 01       	movw	r20, r28
    bf8a:	4f 5f       	subi	r20, 0xFF	; 255
    bf8c:	5f 4f       	sbci	r21, 0xFF	; 255
    bf8e:	61 e0       	ldi	r22, 0x01	; 1
    bf90:	81 2f       	mov	r24, r17
    bf92:	0e 94 f8 52 	call	0xa5f0	; 0xa5f0 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5356
      remote_tds_subscibe_topic(idx);
    bf96:	81 2f       	mov	r24, r17
    bf98:	0e 94 6b 5f 	call	0xbed6	; 0xbed6 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5358
    }
}
    bf9c:	62 96       	adiw	r28, 0x12	; 18
    bf9e:	0f b6       	in	r0, 0x3f	; 63
    bfa0:	f8 94       	cli
    bfa2:	de bf       	out	0x3e, r29	; 62
    bfa4:	0f be       	out	0x3f, r0	; 63
    bfa6:	cd bf       	out	0x3d, r28	; 61
    bfa8:	df 91       	pop	r29
    bfaa:	cf 91       	pop	r28
    bfac:	1f 91       	pop	r17
    bfae:	08 95       	ret

0000bfb0 <click_rtds_subscribe(unsigned char, unsigned char)>:
_Z20click_rtds_subscribehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5243
  remote_tds_clear(args2);
  MenuHistoryPrevMenu();
}
////
void click_rtds_subscribe(uint8_t args1, uint8_t idx)
{
    bfb0:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5245
  //printf("prihlasuji %d %d\n", args1, idx);
  remote_tds_subscibe_topic(idx);
    bfb2:	0c 94 6b 5f 	jmp	0xbed6	; 0xbed6 <remote_tds_subscibe_topic(unsigned char)>

0000bfb6 <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2889
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
    bfb6:	2f 92       	push	r2
    bfb8:	3f 92       	push	r3
    bfba:	4f 92       	push	r4
    bfbc:	5f 92       	push	r5
    bfbe:	6f 92       	push	r6
    bfc0:	7f 92       	push	r7
    bfc2:	8f 92       	push	r8
    bfc4:	9f 92       	push	r9
    bfc6:	af 92       	push	r10
    bfc8:	bf 92       	push	r11
    bfca:	cf 92       	push	r12
    bfcc:	df 92       	push	r13
    bfce:	ef 92       	push	r14
    bfd0:	ff 92       	push	r15
    bfd2:	0f 93       	push	r16
    bfd4:	1f 93       	push	r17
    bfd6:	cf 93       	push	r28
    bfd8:	df 93       	push	r29
    bfda:	cd b7       	in	r28, 0x3d	; 61
    bfdc:	de b7       	in	r29, 0x3e	; 62
    bfde:	cc 52       	subi	r28, 0x2C	; 44
    bfe0:	d1 40       	sbci	r29, 0x01	; 1
    bfe2:	0f b6       	in	r0, 0x3f	; 63
    bfe4:	f8 94       	cli
    bfe6:	de bf       	out	0x3e, r29	; 62
    bfe8:	0f be       	out	0x3f, r0	; 63
    bfea:	cd bf       	out	0x3d, r28	; 61
    bfec:	4c 01       	movw	r8, r24
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    bfee:	1b 82       	std	Y+3, r1	; 0x03
    bff0:	8b ed       	ldi	r24, 0xDB	; 219
    bff2:	93 e0       	ldi	r25, 0x03	; 3
    bff4:	9d 83       	std	Y+5, r25	; 0x05
    bff6:	8c 83       	std	Y+4, r24	; 0x04
    bff8:	89 e3       	ldi	r24, 0x39	; 57
    bffa:	95 e0       	ldi	r25, 0x05	; 5
    bffc:	9f 83       	std	Y+7, r25	; 0x07
    bffe:	8e 83       	std	Y+6, r24	; 0x06
    c000:	18 86       	std	Y+8, r1	; 0x08
    c002:	19 86       	std	Y+9, r1	; 0x09
    c004:	1a 86       	std	Y+10, r1	; 0x0a
    c006:	1b 86       	std	Y+11, r1	; 0x0b
    c008:	80 e6       	ldi	r24, 0x60	; 96
    c00a:	9a ee       	ldi	r25, 0xEA	; 234
    c00c:	a0 e0       	ldi	r26, 0x00	; 0
    c00e:	b0 e0       	ldi	r27, 0x00	; 0
    c010:	8c 87       	std	Y+12, r24	; 0x0c
    c012:	9d 87       	std	Y+13, r25	; 0x0d
    c014:	ae 87       	std	Y+14, r26	; 0x0e
    c016:	bf 87       	std	Y+15, r27	; 0x0f
    c018:	18 8a       	std	Y+16, r1	; 0x10
    c01a:	19 8a       	std	Y+17, r1	; 0x11
    c01c:	1a 8a       	std	Y+18, r1	; 0x12
    c01e:	1b 8a       	std	Y+19, r1	; 0x13
    c020:	1c 8a       	std	Y+20, r1	; 0x14
    c022:	1d 8a       	std	Y+21, r1	; 0x15
    c024:	1e 8a       	std	Y+22, r1	; 0x16
    c026:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    c028:	8d e2       	ldi	r24, 0x2D	; 45
    c02a:	90 e1       	ldi	r25, 0x10	; 16
    c02c:	9a 83       	std	Y+2, r25	; 0x02
    c02e:	89 83       	std	Y+1, r24	; 0x01
    c030:	e9 ed       	ldi	r30, 0xD9	; 217
    c032:	fa e0       	ldi	r31, 0x0A	; 10
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2903
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;
  NTPClient timeClient(udpClient);

  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    c034:	80 e0       	ldi	r24, 0x00	; 0
    c036:	11 92       	st	Z+, r1
    c038:	8f 5f       	subi	r24, 0xFF	; 255
    c03a:	80 38       	cpi	r24, 0x80	; 128
    c03c:	e1 f7       	brne	.-8      	; 0xc036 <mqtt_callback(char*, unsigned char*, unsigned int)+0x80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2905
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    c03e:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <mqtt_receive_message>
    c042:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <mqtt_receive_message+0x1>
    c046:	01 96       	adiw	r24, 0x01	; 1
    c048:	90 93 03 0a 	sts	0x0A03, r25	; 0x800a03 <mqtt_receive_message+0x1>
    c04c:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2906
  strncpy(my_payload, (char*) payload, length);
    c050:	89 ed       	ldi	r24, 0xD9	; 217
    c052:	9a e0       	ldi	r25, 0x0A	; 10
    c054:	0e 94 d9 b6 	call	0x16db2	; 0x16db2 <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2909
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    c058:	5e 01       	movw	r10, r28
    c05a:	28 ec       	ldi	r18, 0xC8	; 200
    c05c:	a2 0e       	add	r10, r18
    c05e:	b1 1c       	adc	r11, r1
    c060:	6a e2       	ldi	r22, 0x2A	; 42
    c062:	72 e3       	ldi	r23, 0x32	; 50
    c064:	c5 01       	movw	r24, r10
    c066:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2910
  if (strcmp(str1, topic) == 0)
    c06a:	b4 01       	movw	r22, r8
    c06c:	c5 01       	movw	r24, r10
    c06e:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    c072:	89 2b       	or	r24, r25
    c074:	49 f4       	brne	.+18     	; 0xc088 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2912
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    c076:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    c07a:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    c07e:	01 96       	adiw	r24, 0x01	; 1
    c080:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    c084:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2915
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
  }
  strcpy_P(str1, thermctl_subscribe);
    c088:	61 e4       	ldi	r22, 0x41	; 65
    c08a:	72 e3       	ldi	r23, 0x32	; 50
    c08c:	c5 01       	movw	r24, r10
    c08e:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2916
  if (strcmp(str1, topic) == 0)
    c092:	b4 01       	movw	r22, r8
    c094:	c5 01       	movw	r24, r10
    c096:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    c09a:	89 2b       	or	r24, r25
    c09c:	49 f4       	brne	.+18     	; 0xc0b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
  {
    mqtt_process_message++;
    c09e:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    c0a2:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    c0a6:	01 96       	adiw	r24, 0x01	; 1
    c0a8:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    c0ac:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2924
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    c0b0:	68 e6       	ldi	r22, 0x68	; 104
    c0b2:	72 e3       	ldi	r23, 0x32	; 50
    c0b4:	c5 01       	movw	r24, r10
    c0b6:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2925
  strcat_P(str1, global_time_set);
    c0ba:	6c e0       	ldi	r22, 0x0C	; 12
    c0bc:	72 e3       	ldi	r23, 0x32	; 50
    c0be:	c5 01       	movw	r24, r10
    c0c0:	0e 94 33 aa 	call	0x15466	; 0x15466 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2926
  if (strcmp(str1, topic) == 0)
    c0c4:	b4 01       	movw	r22, r8
    c0c6:	c5 01       	movw	r24, r10
    c0c8:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    c0cc:	89 2b       	or	r24, r25
    c0ce:	09 f0       	breq	.+2      	; 0xc0d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11c>
    c0d0:	bb c0       	rjmp	.+374    	; 0xc248 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2928
  {
    mqtt_process_message++;
    c0d2:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    c0d6:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    c0da:	01 96       	adiw	r24, 0x01	; 1
    c0dc:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    c0e0:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    c0e4:	20 91 8b 0c 	lds	r18, 0x0C8B	; 0x800c8b <doc>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcEC2EPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
class UnsafeCharPointerReader {
  const TChar* _ptr;

 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}
    c0e8:	89 ed       	ldi	r24, 0xD9	; 217
    c0ea:	9a e0       	ldi	r25, 0x0A	; 10
    c0ec:	89 2b       	or	r24, r25
    c0ee:	09 f0       	breq	.+2      	; 0xc0f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c>
    c0f0:	3a c2       	rjmp	.+1140   	; 0xc566 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b0>
_Z13mqtt_callbackPcPhj():
    c0f2:	82 ef       	ldi	r24, 0xF2	; 242
    c0f4:	92 e0       	ldi	r25, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC2ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    c0f6:	4c e8       	ldi	r20, 0x8C	; 140
    c0f8:	5c e0       	ldi	r21, 0x0C	; 12
    c0fa:	2a 96       	adiw	r28, 0x0a	; 10
    c0fc:	5f af       	std	Y+63, r21	; 0x3f
    c0fe:	4e af       	std	Y+62, r20	; 0x3e
    c100:	2a 97       	sbiw	r28, 0x0a	; 10
    c102:	2c 96       	adiw	r28, 0x0c	; 12
    c104:	9f af       	std	Y+63, r25	; 0x3f
    c106:	8e af       	std	Y+62, r24	; 0x3e
    c108:	2c 97       	sbiw	r28, 0x0c	; 12
    c10a:	89 ed       	ldi	r24, 0xD9	; 217
    c10c:	9a e0       	ldi	r25, 0x0A	; 10
    c10e:	2e 96       	adiw	r28, 0x0e	; 14
    c110:	9f af       	std	Y+63, r25	; 0x3f
    c112:	8e af       	std	Y+62, r24	; 0x3e
    c114:	2e 97       	sbiw	r28, 0x0e	; 14
    c116:	2f 96       	adiw	r28, 0x0f	; 15
    c118:	2f af       	std	Y+63, r18	; 0x3f
    c11a:	2f 97       	sbiw	r28, 0x0f	; 15
    c11c:	61 96       	adiw	r28, 0x11	; 17
    c11e:	1f ae       	std	Y+63, r1	; 0x3f
    c120:	61 97       	sbiw	r28, 0x11	; 17
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    c122:	10 92 93 0c 	sts	0x0C93, r1	; 0x800c93 <doc+0x8>
    c126:	10 92 92 0c 	sts	0x0C92, r1	; 0x800c92 <doc+0x7>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    c12a:	84 e9       	ldi	r24, 0x94	; 148
    c12c:	9d e0       	ldi	r25, 0x0D	; 13
    c12e:	89 2b       	or	r24, r25
    c130:	09 f4       	brne	.+2      	; 0xc134 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17e>
    c132:	1c c2       	rjmp	.+1080   	; 0xc56c <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b6>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:66
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    c134:	10 92 95 0d 	sts	0x0D95, r1	; 0x800d95 <doc+0x10a>
    c138:	10 92 94 0d 	sts	0x0D94, r1	; 0x800d94 <doc+0x109>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:96
  _data->setNull();
  return *this;
    c13c:	ca 01       	movw	r24, r20
    c13e:	ac 01       	movw	r20, r24
    c140:	64 e9       	ldi	r22, 0x94	; 148
    c142:	7d e0       	ldi	r23, 0x0D	; 13
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    c144:	ce 01       	movw	r24, r28
    c146:	88 5b       	subi	r24, 0xB8	; 184
    c148:	9f 4f       	sbci	r25, 0xFF	; 255
    c14a:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
inline typename Internals::enable_if<
    Internals::is_same<typename Internals::remove_const<T>::type,
                       JsonObject>::value,
    T>::type
JsonVariant::as() const {
  return _data ? JsonObject(_memoryPool, _data->asObject()) : JsonObject();
    c14e:	84 e9       	ldi	r24, 0x94	; 148
    c150:	9d e0       	ldi	r25, 0x0D	; 13
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
  friend class JsonVariant;

 public:
  typedef JsonObjectIterator iterator;

  FORCE_INLINE JsonObject() : _memoryPool(0), _data(0) {}
    c152:	04 e9       	ldi	r16, 0x94	; 148
    c154:	1d e0       	ldi	r17, 0x0D	; 13
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
    c156:	89 2b       	or	r24, r25
    c158:	51 f0       	breq	.+20     	; 0xc16e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    c15a:	80 91 94 0d 	lds	r24, 0x0D94	; 0x800d94 <doc+0x109>
    c15e:	90 91 95 0d 	lds	r25, 0x0D95	; 0x800d95 <doc+0x10a>
_Z13mqtt_callbackPcPhj():
    c162:	06 e9       	ldi	r16, 0x96	; 150
    c164:	1d e0       	ldi	r17, 0x0D	; 13
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
    c166:	09 97       	sbiw	r24, 0x09	; 9
    c168:	11 f0       	breq	.+4      	; 0xc16e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
    c16a:	10 e0       	ldi	r17, 0x00	; 0
    c16c:	00 e0       	ldi	r16, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    c16e:	68 ee       	ldi	r22, 0xE8	; 232
    c170:	73 e0       	ldi	r23, 0x03	; 3
    c172:	c8 01       	movw	r24, r16
    c174:	0e 94 21 27 	call	0x4e42	; 0x4e42 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>
    c178:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2931
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    c17a:	89 2b       	or	r24, r25
    c17c:	09 f4       	brne	.+2      	; 0xc180 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ca>
    c17e:	64 c0       	rjmp	.+200    	; 0xc248 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    c180:	6d ee       	ldi	r22, 0xED	; 237
    c182:	73 e0       	ldi	r23, 0x03	; 3
    c184:	c8 01       	movw	r24, r16
    c186:	0e 94 21 27 	call	0x4e42	; 0x4e42 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>
    c18a:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2931
    c18c:	89 2b       	or	r24, r25
    c18e:	09 f4       	brne	.+2      	; 0xc192 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1dc>
    c190:	5b c0       	rjmp	.+182    	; 0xc248 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    c192:	63 ef       	ldi	r22, 0xF3	; 243
    c194:	73 e0       	ldi	r23, 0x03	; 3
    c196:	c8 01       	movw	r24, r16
    c198:	0e 94 21 27 	call	0x4e42	; 0x4e42 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>
    c19c:	3c 01       	movw	r6, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2931
    c19e:	89 2b       	or	r24, r25
    c1a0:	09 f4       	brne	.+2      	; 0xc1a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ee>
    c1a2:	52 c0       	rjmp	.+164    	; 0xc248 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    c1a4:	68 ef       	ldi	r22, 0xF8	; 248
    c1a6:	73 e0       	ldi	r23, 0x03	; 3
    c1a8:	c8 01       	movw	r24, r16
    c1aa:	0e 94 21 27 	call	0x4e42	; 0x4e42 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>
    c1ae:	6c 01       	movw	r12, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2931
    c1b0:	89 2b       	or	r24, r25
    c1b2:	09 f4       	brne	.+2      	; 0xc1b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x200>
    c1b4:	49 c0       	rjmp	.+146    	; 0xc248 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    c1b6:	6f ef       	ldi	r22, 0xFF	; 255
    c1b8:	73 e0       	ldi	r23, 0x03	; 3
    c1ba:	c8 01       	movw	r24, r16
    c1bc:	0e 94 21 27 	call	0x4e42	; 0x4e42 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2931
    c1c0:	00 97       	sbiw	r24, 0x00	; 0
    c1c2:	09 f4       	brne	.+2      	; 0xc1c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x210>
    c1c4:	41 c0       	rjmp	.+130    	; 0xc248 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    c1c6:	0e 94 74 9c 	call	0x138e8	; 0x138e8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    c1ca:	38 2e       	mov	r3, r24
    c1cc:	c6 01       	movw	r24, r12
    c1ce:	0e 94 74 9c 	call	0x138e8	; 0x138e8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    c1d2:	d8 2e       	mov	r13, r24
    c1d4:	c3 01       	movw	r24, r6
    c1d6:	0e 94 74 9c 	call	0x138e8	; 0x138e8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    c1da:	c8 2e       	mov	r12, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    c1dc:	66 e0       	ldi	r22, 0x06	; 6
    c1de:	74 e0       	ldi	r23, 0x04	; 4
    c1e0:	c8 01       	movw	r24, r16
    c1e2:	0e 94 21 27 	call	0x4e42	; 0x4e42 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.34]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    c1e6:	10 e0       	ldi	r17, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
    c1e8:	00 97       	sbiw	r24, 0x00	; 0
    c1ea:	19 f0       	breq	.+6      	; 0xc1f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x23c>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    c1ec:	0e 94 74 9c 	call	0x138e8	; 0x138e8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    c1f0:	18 2f       	mov	r17, r24
    c1f2:	c2 01       	movw	r24, r4
    c1f4:	0e 94 74 9c 	call	0x138e8	; 0x138e8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    c1f8:	08 2f       	mov	r16, r24
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    c1fa:	d7 01       	movw	r26, r14
    c1fc:	8d 91       	ld	r24, X+
    c1fe:	9c 91       	ld	r25, X
    c200:	11 97       	sbiw	r26, 0x01	; 1
    c202:	87 30       	cpi	r24, 0x07	; 7
    c204:	91 05       	cpc	r25, r1
    c206:	08 f0       	brcs	.+2      	; 0xc20a <mqtt_callback(char*, unsigned char*, unsigned int)+0x254>
    c208:	b4 c1       	rjmp	.+872    	; 0xc572 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5bc>
    c20a:	85 30       	cpi	r24, 0x05	; 5
    c20c:	91 05       	cpc	r25, r1
    c20e:	08 f0       	brcs	.+2      	; 0xc212 <mqtt_callback(char*, unsigned char*, unsigned int)+0x25c>
    c210:	be c1       	rjmp	.+892    	; 0xc58e <mqtt_callback(char*, unsigned char*, unsigned int)+0x5d8>
    c212:	03 97       	sbiw	r24, 0x03	; 3
    c214:	08 f0       	brcs	.+2      	; 0xc218 <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
    c216:	cd c1       	rjmp	.+922    	; 0xc5b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5fc>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    c218:	60 e0       	ldi	r22, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    c21a:	29 96       	adiw	r28, 0x09	; 9
    c21c:	6f af       	std	Y+63, r22	; 0x3f
    c21e:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    c220:	2a 96       	adiw	r28, 0x0a	; 10
    c222:	0f af       	std	Y+63, r16	; 0x3f
    c224:	2a 97       	sbiw	r28, 0x0a	; 10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    c226:	2b 96       	adiw	r28, 0x0b	; 11
    c228:	1f af       	std	Y+63, r17	; 0x3f
    c22a:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    c22c:	2c 96       	adiw	r28, 0x0c	; 12
    c22e:	cf ae       	std	Y+63, r12	; 0x3f
    c230:	2c 97       	sbiw	r28, 0x0c	; 12
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    c232:	2d 96       	adiw	r28, 0x0d	; 13
    c234:	df ae       	std	Y+63, r13	; 0x3f
    c236:	2d 97       	sbiw	r28, 0x0d	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    c238:	2e 96       	adiw	r28, 0x0e	; 14
    c23a:	3f ae       	std	Y+63, r3	; 0x3f
    c23c:	2e 97       	sbiw	r28, 0x0e	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2932
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    c23e:	ce 01       	movw	r24, r28
    c240:	88 5b       	subi	r24, 0xB8	; 184
    c242:	9f 4f       	sbci	r25, 0xFF	; 255
    c244:	0e 94 be 92 	call	0x1257c	; 0x1257c <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2935
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    c248:	68 e6       	ldi	r22, 0x68	; 104
    c24a:	72 e3       	ldi	r23, 0x32	; 50
    c24c:	c5 01       	movw	r24, r10
    c24e:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2936
  strcat_P(str1, global_time_ntp);
    c252:	6c ef       	ldi	r22, 0xFC	; 252
    c254:	71 e3       	ldi	r23, 0x31	; 49
    c256:	c5 01       	movw	r24, r10
    c258:	0e 94 33 aa 	call	0x15466	; 0x15466 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2937
  if (strcmp(str1, topic) == 0)
    c25c:	b4 01       	movw	r22, r8
    c25e:	c5 01       	movw	r24, r10
    c260:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    c264:	89 2b       	or	r24, r25
    c266:	09 f0       	breq	.+2      	; 0xc26a <mqtt_callback(char*, unsigned char*, unsigned int)+0x2b4>
    c268:	e5 c0       	rjmp	.+458    	; 0xc434 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2939
  {
    mqtt_process_message++;
    c26a:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    c26e:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    c272:	01 96       	adiw	r24, 0x01	; 1
    c274:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    c278:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4000
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    c27c:	81 e0       	ldi	r24, 0x01	; 1
    c27e:	90 e0       	ldi	r25, 0x00	; 0
    c280:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    c284:	18 2f       	mov	r17, r24
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:402
//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    c286:	7e 01       	movw	r14, r28
    c288:	28 e4       	ldi	r18, 0x48	; 72
    c28a:	e2 0e       	add	r14, r18
    c28c:	f1 1c       	adc	r15, r1
    c28e:	d7 01       	movw	r26, r14
    c290:	1c 92       	st	X, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:403
  createString(tmp1, '.', device.ntp_server, 4, 10);
    c292:	0a e0       	ldi	r16, 0x0A	; 10
    c294:	24 e0       	ldi	r18, 0x04	; 4
    c296:	4b e6       	ldi	r20, 0x6B	; 107
    c298:	5c e0       	ldi	r21, 0x0C	; 12
    c29a:	6e e2       	ldi	r22, 0x2E	; 46
    c29c:	c7 01       	movw	r24, r14
    c29e:	0e 94 7b 96 	call	0x12cf6	; 0x12cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:404
  timeClient->begin();
    c2a2:	ce 01       	movw	r24, r28
    c2a4:	01 96       	adiw	r24, 0x01	; 1
    c2a6:	0e 94 a2 8e 	call	0x11d44	; 0x11d44 <NTPClient::begin()>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:405
  timeClient->setTimeOffset(3600 * offset);
    c2aa:	20 e1       	ldi	r18, 0x10	; 16
    c2ac:	3e e0       	ldi	r19, 0x0E	; 14
    c2ae:	12 9f       	mul	r17, r18
    c2b0:	c0 01       	movw	r24, r0
    c2b2:	13 9f       	mul	r17, r19
    c2b4:	90 0d       	add	r25, r0
    c2b6:	11 24       	eor	r1, r1
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    c2b8:	09 2e       	mov	r0, r25
    c2ba:	00 0c       	add	r0, r0
    c2bc:	aa 0b       	sbc	r26, r26
    c2be:	bb 0b       	sbc	r27, r27
    c2c0:	88 87       	std	Y+8, r24	; 0x08
    c2c2:	99 87       	std	Y+9, r25	; 0x09
    c2c4:	aa 87       	std	Y+10, r26	; 0x0a
    c2c6:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    c2c8:	fd 82       	std	Y+5, r15	; 0x05
    c2ca:	ec 82       	std	Y+4, r14	; 0x04
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:407
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    c2cc:	ce 01       	movw	r24, r28
    c2ce:	01 96       	adiw	r24, 0x01	; 1
    c2d0:	0e 94 b9 8e 	call	0x11d72	; 0x11d72 <NTPClient::update()>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:401

//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
    c2d4:	10 e0       	ldi	r17, 0x00	; 0
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:407
  tmp1[0] = 0;
  createString(tmp1, '.', device.ntp_server, 4, 10);
  timeClient->begin();
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    c2d6:	88 23       	and	r24, r24
    c2d8:	09 f4       	brne	.+2      	; 0xc2dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x326>
    c2da:	9a c0       	rjmp	.+308    	; 0xc410 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45a>
getSeconds():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:148
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
}
int NTPClient::getSeconds() const {
  return (this->getEpochTime() % 60);
    c2dc:	ce 01       	movw	r24, r28
    c2de:	01 96       	adiw	r24, 0x01	; 1
    c2e0:	0e 94 52 8e 	call	0x11ca4	; 0x11ca4 <NTPClient::getEpochTime() const>
    c2e4:	2c e3       	ldi	r18, 0x3C	; 60
    c2e6:	c2 2e       	mov	r12, r18
    c2e8:	d1 2c       	mov	r13, r1
    c2ea:	e1 2c       	mov	r14, r1
    c2ec:	f1 2c       	mov	r15, r1
    c2ee:	a7 01       	movw	r20, r14
    c2f0:	96 01       	movw	r18, r12
    c2f2:	0e 94 2d b4 	call	0x1685a	; 0x1685a <__udivmodsi4>
    c2f6:	36 2e       	mov	r3, r22
getMinutes():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:145
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
    c2f8:	ce 01       	movw	r24, r28
    c2fa:	01 96       	adiw	r24, 0x01	; 1
    c2fc:	0e 94 52 8e 	call	0x11ca4	; 0x11ca4 <NTPClient::getEpochTime() const>
    c300:	30 e1       	ldi	r19, 0x10	; 16
    c302:	43 2e       	mov	r4, r19
    c304:	3e e0       	ldi	r19, 0x0E	; 14
    c306:	53 2e       	mov	r5, r19
    c308:	61 2c       	mov	r6, r1
    c30a:	71 2c       	mov	r7, r1
    c30c:	a3 01       	movw	r20, r6
    c30e:	92 01       	movw	r18, r4
    c310:	0e 94 2d b4 	call	0x1685a	; 0x1685a <__udivmodsi4>
    c314:	a7 01       	movw	r20, r14
    c316:	96 01       	movw	r18, r12
    c318:	0e 94 2d b4 	call	0x1685a	; 0x1685a <__udivmodsi4>
    c31c:	e2 2e       	mov	r14, r18
getHours():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:142

int NTPClient::getDay() const {
  return (((this->getEpochTime()  / 86400L) + 4 ) % 7); //0 is Sunday
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
    c31e:	ce 01       	movw	r24, r28
    c320:	01 96       	adiw	r24, 0x01	; 1
    c322:	0e 94 52 8e 	call	0x11ca4	; 0x11ca4 <NTPClient::getEpochTime() const>
    c326:	20 e8       	ldi	r18, 0x80	; 128
    c328:	31 e5       	ldi	r19, 0x51	; 81
    c32a:	41 e0       	ldi	r20, 0x01	; 1
    c32c:	50 e0       	ldi	r21, 0x00	; 0
    c32e:	0e 94 2d b4 	call	0x1685a	; 0x1685a <__udivmodsi4>
    c332:	a3 01       	movw	r20, r6
    c334:	92 01       	movw	r18, r4
    c336:	0e 94 2d b4 	call	0x1685a	; 0x1685a <__udivmodsi4>
    c33a:	d2 2e       	mov	r13, r18
getDate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:130

  return month;
}

int NTPClient::getDate() const {
  time_t rawtime = this->getEpochTime();
    c33c:	ce 01       	movw	r24, r28
    c33e:	01 96       	adiw	r24, 0x01	; 1
    c340:	0e 94 52 8e 	call	0x11ca4	; 0x11ca4 <NTPClient::getEpochTime() const>
    c344:	c8 57       	subi	r28, 0x78	; 120
    c346:	df 4f       	sbci	r29, 0xFF	; 255
    c348:	68 83       	st	Y, r22
    c34a:	79 83       	std	Y+1, r23	; 0x01
    c34c:	8a 83       	std	Y+2, r24	; 0x02
    c34e:	9b 83       	std	Y+3, r25	; 0x03
    c350:	c8 58       	subi	r28, 0x88	; 136
    c352:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:132
  struct tm * ti;
  ti = localtime (&rawtime);
    c354:	ce 01       	movw	r24, r28
    c356:	88 57       	subi	r24, 0x78	; 120
    c358:	9f 4f       	sbci	r25, 0xFF	; 255
    c35a:	0e 94 44 9b 	call	0x13688	; 0x13688 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:133
  int month = (ti->tm_mday) < 10 ? 0 + (ti->tm_mday) : (ti->tm_mday);
    c35e:	fc 01       	movw	r30, r24
    c360:	c3 80       	ldd	r12, Z+3	; 0x03
getMonth():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:121

  return year;
}

int NTPClient::getMonth() const {
  time_t rawtime = this->getEpochTime();
    c362:	ce 01       	movw	r24, r28
    c364:	01 96       	adiw	r24, 0x01	; 1
    c366:	0e 94 52 8e 	call	0x11ca4	; 0x11ca4 <NTPClient::getEpochTime() const>
    c36a:	c8 57       	subi	r28, 0x78	; 120
    c36c:	df 4f       	sbci	r29, 0xFF	; 255
    c36e:	68 83       	st	Y, r22
    c370:	79 83       	std	Y+1, r23	; 0x01
    c372:	8a 83       	std	Y+2, r24	; 0x02
    c374:	9b 83       	std	Y+3, r25	; 0x03
    c376:	c8 58       	subi	r28, 0x88	; 136
    c378:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:123
  struct tm * ti;
  ti = localtime (&rawtime);
    c37a:	ce 01       	movw	r24, r28
    c37c:	88 57       	subi	r24, 0x78	; 120
    c37e:	9f 4f       	sbci	r25, 0xFF	; 255
    c380:	0e 94 44 9b 	call	0x13688	; 0x13688 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:124
  int month = (ti->tm_mon + 1) < 10 ? 0 + (ti->tm_mon + 1) : (ti->tm_mon + 1);
    c384:	dc 01       	movw	r26, r24
    c386:	15 96       	adiw	r26, 0x05	; 5
    c388:	0c 91       	ld	r16, X
    c38a:	00 2e       	mov	r0, r16
    c38c:	00 0c       	add	r0, r0
    c38e:	11 0b       	sbc	r17, r17
    c390:	0f 5f       	subi	r16, 0xFF	; 255
    c392:	1f 4f       	sbci	r17, 0xFF	; 255
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:409
  {
    rtc->adjust(DateTime((uint16_t)timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    c394:	ce 01       	movw	r24, r28
    c396:	01 96       	adiw	r24, 0x01	; 1
    c398:	0e 94 86 8e 	call	0x11d0c	; 0x11d0c <NTPClient::getYear() const>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    c39c:	80 3d       	cpi	r24, 0xD0	; 208
    c39e:	b7 e0       	ldi	r27, 0x07	; 7
    c3a0:	9b 07       	cpc	r25, r27
    c3a2:	10 f0       	brcs	.+4      	; 0xc3a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f2>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    c3a4:	80 5d       	subi	r24, 0xD0	; 208
    c3a6:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
    c3a8:	c8 57       	subi	r28, 0x78	; 120
    c3aa:	df 4f       	sbci	r29, 0xFF	; 255
    c3ac:	88 83       	st	Y, r24
    c3ae:	c8 58       	subi	r28, 0x88	; 136
    c3b0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    c3b2:	c7 57       	subi	r28, 0x77	; 119
    c3b4:	df 4f       	sbci	r29, 0xFF	; 255
    c3b6:	08 83       	st	Y, r16
    c3b8:	c9 58       	subi	r28, 0x89	; 137
    c3ba:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    c3bc:	c6 57       	subi	r28, 0x76	; 118
    c3be:	df 4f       	sbci	r29, 0xFF	; 255
    c3c0:	c8 82       	st	Y, r12
    c3c2:	ca 58       	subi	r28, 0x8A	; 138
    c3c4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    c3c6:	c5 57       	subi	r28, 0x75	; 117
    c3c8:	df 4f       	sbci	r29, 0xFF	; 255
    c3ca:	d8 82       	st	Y, r13
    c3cc:	cb 58       	subi	r28, 0x8B	; 139
    c3ce:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    c3d0:	c4 57       	subi	r28, 0x74	; 116
    c3d2:	df 4f       	sbci	r29, 0xFF	; 255
    c3d4:	e8 82       	st	Y, r14
    c3d6:	cc 58       	subi	r28, 0x8C	; 140
    c3d8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    c3da:	c3 57       	subi	r28, 0x73	; 115
    c3dc:	df 4f       	sbci	r29, 0xFF	; 255
    c3de:	38 82       	st	Y, r3
    c3e0:	cd 58       	subi	r28, 0x8D	; 141
    c3e2:	d0 40       	sbci	r29, 0x00	; 0
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:409
    c3e4:	ce 01       	movw	r24, r28
    c3e6:	88 57       	subi	r24, 0x78	; 120
    c3e8:	9f 4f       	sbci	r25, 0xFF	; 255
    c3ea:	0e 94 be 92 	call	0x1257c	; 0x1257c <RTC_DS1307::adjust(DateTime const&)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:411
    ret = 1;
    printf("y%d\n", timeClient->getYear());
    c3ee:	ce 01       	movw	r24, r28
    c3f0:	01 96       	adiw	r24, 0x01	; 1
    c3f2:	0e 94 86 8e 	call	0x11d0c	; 0x11d0c <NTPClient::getYear() const>
    c3f6:	9f 93       	push	r25
    c3f8:	8f 93       	push	r24
    c3fa:	8a e0       	ldi	r24, 0x0A	; 10
    c3fc:	94 e0       	ldi	r25, 0x04	; 4
    c3fe:	9f 93       	push	r25
    c400:	8f 93       	push	r24
    c402:	0e 94 e8 b6 	call	0x16dd0	; 0x16dd0 <printf>
    c406:	0f 90       	pop	r0
    c408:	0f 90       	pop	r0
    c40a:	0f 90       	pop	r0
    c40c:	0f 90       	pop	r0
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:410
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
  {
    rtc->adjust(DateTime((uint16_t)timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    ret = 1;
    c40e:	11 e0       	ldi	r17, 0x01	; 1
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    c410:	89 81       	ldd	r24, Y+1	; 0x01
    c412:	9a 81       	ldd	r25, Y+2	; 0x02
    c414:	dc 01       	movw	r26, r24
    c416:	ed 91       	ld	r30, X+
    c418:	fc 91       	ld	r31, X
    c41a:	02 88       	ldd	r0, Z+18	; 0x12
    c41c:	f3 89       	ldd	r31, Z+19	; 0x13
    c41e:	e0 2d       	mov	r30, r0
    c420:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    c422:	1b 82       	std	Y+3, r1	; 0x03
    c424:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <selftest_data>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2940
  strcpy_P(str1, thermctl_header_in);
  strcat_P(str1, global_time_ntp);
  if (strcmp(str1, topic) == 0)
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
    c428:	11 30       	cpi	r17, 0x01	; 1
    c42a:	09 f0       	breq	.+2      	; 0xc42e <mqtt_callback(char*, unsigned char*, unsigned int)+0x478>
    c42c:	ef c0       	rjmp	.+478    	; 0xc60c <mqtt_callback(char*, unsigned char*, unsigned int)+0x656>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2941
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    c42e:	8d 7f       	andi	r24, 0xFD	; 253
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2943
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    c430:	80 93 cb 0a 	sts	0x0ACB, r24	; 0x800acb <selftest_data>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2946
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    c434:	68 e6       	ldi	r22, 0x68	; 104
    c436:	72 e3       	ldi	r23, 0x32	; 50
    c438:	c5 01       	movw	r24, r10
    c43a:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2947
  strcat_P(str1, global_time_offset);
    c43e:	65 ee       	ldi	r22, 0xE5	; 229
    c440:	71 e3       	ldi	r23, 0x31	; 49
    c442:	c5 01       	movw	r24, r10
    c444:	0e 94 33 aa 	call	0x15466	; 0x15466 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2948
  if (strcmp(str1, topic) == 0)
    c448:	b4 01       	movw	r22, r8
    c44a:	c5 01       	movw	r24, r10
    c44c:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    c450:	89 2b       	or	r24, r25
    c452:	91 f4       	brne	.+36     	; 0xc478 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2950
  {
    mqtt_process_message++;
    c454:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    c458:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    c45c:	01 96       	adiw	r24, 0x01	; 1
    c45e:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    c462:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2951
    time_set_offset(atoi(my_payload));
    c466:	89 ed       	ldi	r24, 0xD9	; 217
    c468:	9a e0       	ldi	r25, 0x0A	; 10
    c46a:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4005
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    c46e:	68 2f       	mov	r22, r24
    c470:	81 e0       	ldi	r24, 0x01	; 1
    c472:	90 e0       	ldi	r25, 0x00	; 0
    c474:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2955
    mqtt_process_message++;
    time_set_offset(atoi(my_payload));
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    c478:	68 e6       	ldi	r22, 0x68	; 104
    c47a:	72 e3       	ldi	r23, 0x32	; 50
    c47c:	c5 01       	movw	r24, r10
    c47e:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2956
  strcat(str1, device.nazev);
    c482:	63 e3       	ldi	r22, 0x33	; 51
    c484:	7c e0       	ldi	r23, 0x0C	; 12
    c486:	c5 01       	movw	r24, r10
    c488:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2957
  strcat(str1, "/tds/associate");
    c48c:	6f e0       	ldi	r22, 0x0F	; 15
    c48e:	74 e0       	ldi	r23, 0x04	; 4
    c490:	c5 01       	movw	r24, r10
    c492:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2958
  if (strcmp(str1, topic) == 0)
    c496:	b4 01       	movw	r22, r8
    c498:	c5 01       	movw	r24, r10
    c49a:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2896
  const char tmp1[16];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    c49e:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2958
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    c4a0:	89 2b       	or	r24, r25
    c4a2:	b1 f4       	brne	.+44     	; 0xc4d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x51a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2960
  {
    mqtt_process_message++;
    c4a4:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    c4a8:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    c4ac:	01 96       	adiw	r24, 0x01	; 1
    c4ae:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    c4b2:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2961
    id = atoi(my_payload);
    c4b6:	89 ed       	ldi	r24, 0xD9	; 217
    c4b8:	9a e0       	ldi	r25, 0x0A	; 10
    c4ba:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    c4be:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2962
    if (tds_associate(id) == 255)
    c4c0:	0e 94 0c 56 	call	0xac18	; 0xac18 <tds_associate(unsigned char)>
    c4c4:	8f 3f       	cpi	r24, 0xFF	; 255
    c4c6:	21 f4       	brne	.+8      	; 0xc4d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x51a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2963
      log_error(&mqtt_client, "tds/associate full or bad id");
    c4c8:	8e e1       	ldi	r24, 0x1E	; 30
    c4ca:	94 e0       	ldi	r25, 0x04	; 4
    c4cc:	0e 94 7b 88 	call	0x110f6	; 0x110f6 <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2969
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    c4d0:	68 e6       	ldi	r22, 0x68	; 104
    c4d2:	72 e3       	ldi	r23, 0x32	; 50
    c4d4:	c5 01       	movw	r24, r10
    c4d6:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2970
  strcat(str1, device.nazev);
    c4da:	63 e3       	ldi	r22, 0x33	; 51
    c4dc:	7c e0       	ldi	r23, 0x0C	; 12
    c4de:	c5 01       	movw	r24, r10
    c4e0:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2971
  strcat(str1, "/tds/set/");
    c4e4:	6b e3       	ldi	r22, 0x3B	; 59
    c4e6:	74 e0       	ldi	r23, 0x04	; 4
    c4e8:	c5 01       	movw	r24, r10
    c4ea:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2972
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c4ee:	f5 01       	movw	r30, r10
    c4f0:	01 90       	ld	r0, Z+
    c4f2:	00 20       	and	r0, r0
    c4f4:	e9 f7       	brne	.-6      	; 0xc4f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x53a>
    c4f6:	31 97       	sbiw	r30, 0x01	; 1
    c4f8:	af 01       	movw	r20, r30
    c4fa:	4a 19       	sub	r20, r10
    c4fc:	5b 09       	sbc	r21, r11
    c4fe:	b4 01       	movw	r22, r8
    c500:	c5 01       	movw	r24, r10
    c502:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    c506:	89 2b       	or	r24, r25
    c508:	09 f0       	breq	.+2      	; 0xc50c <mqtt_callback(char*, unsigned char*, unsigned int)+0x556>
    c50a:	02 c1       	rjmp	.+516    	; 0xc710 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2974
  {
    mqtt_process_message++;
    c50c:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    c510:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    c514:	01 96       	adiw	r24, 0x01	; 1
    c516:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    c51a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2976
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c51e:	f5 01       	movw	r30, r10
    c520:	01 90       	ld	r0, Z+
    c522:	00 20       	and	r0, r0
    c524:	e9 f7       	brne	.-6      	; 0xc520 <mqtt_callback(char*, unsigned char*, unsigned int)+0x56a>
    c526:	31 97       	sbiw	r30, 0x01	; 1
    c528:	ea 19       	sub	r30, r10
    c52a:	fb 09       	sbc	r31, r11
    c52c:	9e 2f       	mov	r25, r30
    c52e:	4e 2f       	mov	r20, r30
    c530:	84 2f       	mov	r24, r20
    c532:	89 1b       	sub	r24, r25
    c534:	24 2f       	mov	r18, r20
    c536:	30 e0       	ldi	r19, 0x00	; 0
    c538:	d4 01       	movw	r26, r8
    c53a:	0d 90       	ld	r0, X+
    c53c:	00 20       	and	r0, r0
    c53e:	e9 f7       	brne	.-6      	; 0xc53a <mqtt_callback(char*, unsigned char*, unsigned int)+0x584>
    c540:	11 97       	sbiw	r26, 0x01	; 1
    c542:	a8 19       	sub	r26, r8
    c544:	b9 09       	sbc	r27, r9
    c546:	2a 17       	cp	r18, r26
    c548:	3b 07       	cpc	r19, r27
    c54a:	08 f0       	brcs	.+2      	; 0xc54e <mqtt_callback(char*, unsigned char*, unsigned int)+0x598>
    c54c:	61 c0       	rjmp	.+194    	; 0xc610 <mqtt_callback(char*, unsigned char*, unsigned int)+0x65a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2978
    {
      str1[cnt] = topic[f];
    c54e:	d5 01       	movw	r26, r10
    c550:	a8 0f       	add	r26, r24
    c552:	b1 1d       	adc	r27, r1
    c554:	28 0d       	add	r18, r8
    c556:	39 1d       	adc	r19, r9
    c558:	f9 01       	movw	r30, r18
    c55a:	80 81       	ld	r24, Z
    c55c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2979
      str1[cnt + 1] = 0;
    c55e:	11 96       	adiw	r26, 0x01	; 1
    c560:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2976
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c562:	4f 5f       	subi	r20, 0xFF	; 255
    c564:	e5 cf       	rjmp	.-54     	; 0xc530 <mqtt_callback(char*, unsigned char*, unsigned int)+0x57a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
    c566:	89 ed       	ldi	r24, 0xD9	; 217
    c568:	9a e0       	ldi	r25, 0x0A	; 10
    c56a:	c5 cd       	rjmp	.-1142   	; 0xc0f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x140>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    c56c:	84 e9       	ldi	r24, 0x94	; 148
    c56e:	9d e0       	ldi	r25, 0x0D	; 13
    c570:	e6 cd       	rjmp	.-1076   	; 0xc13e <mqtt_callback(char*, unsigned char*, unsigned int)+0x188>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    c572:	87 30       	cpi	r24, 0x07	; 7
    c574:	91 05       	cpc	r25, r1
    c576:	b1 f0       	breq	.+44     	; 0xc5a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ee>
    c578:	0a 97       	sbiw	r24, 0x0a	; 10
    c57a:	09 f0       	breq	.+2      	; 0xc57e <mqtt_callback(char*, unsigned char*, unsigned int)+0x5c8>
    c57c:	4d ce       	rjmp	.-870    	; 0xc218 <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    c57e:	f7 01       	movw	r30, r14
    c580:	62 81       	ldd	r22, Z+2	; 0x02
    c582:	73 81       	ldd	r23, Z+3	; 0x03
    c584:	84 81       	ldd	r24, Z+4	; 0x04
    c586:	95 81       	ldd	r25, Z+5	; 0x05
    c588:	0e 94 6e b5 	call	0x16adc	; 0x16adc <__fixunssfsi>
    c58c:	03 c0       	rjmp	.+6      	; 0xc594 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    c58e:	f7 01       	movw	r30, r14
    c590:	62 81       	ldd	r22, Z+2	; 0x02
    c592:	73 81       	ldd	r23, Z+3	; 0x03
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    c594:	60 3d       	cpi	r22, 0xD0	; 208
    c596:	f7 e0       	ldi	r31, 0x07	; 7
    c598:	7f 07       	cpc	r23, r31
    c59a:	08 f4       	brcc	.+2      	; 0xc59e <mqtt_callback(char*, unsigned char*, unsigned int)+0x5e8>
    c59c:	3e ce       	rjmp	.-900    	; 0xc21a <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    c59e:	60 5d       	subi	r22, 0xD0	; 208
    c5a0:	77 40       	sbci	r23, 0x07	; 7
    c5a2:	3b ce       	rjmp	.-906    	; 0xc21a <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    c5a4:	12 96       	adiw	r26, 0x02	; 2
    c5a6:	6d 91       	ld	r22, X+
    c5a8:	7c 91       	ld	r23, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    c5aa:	71 95       	neg	r23
    c5ac:	61 95       	neg	r22
    c5ae:	71 09       	sbc	r23, r1
    c5b0:	f1 cf       	rjmp	.-30     	; 0xc594 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    c5b2:	12 96       	adiw	r26, 0x02	; 2
    c5b4:	ed 91       	ld	r30, X+
    c5b6:	fc 91       	ld	r31, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    c5b8:	30 97       	sbiw	r30, 0x00	; 0
    c5ba:	09 f4       	brne	.+2      	; 0xc5be <mqtt_callback(char*, unsigned char*, unsigned int)+0x608>
    c5bc:	2d ce       	rjmp	.-934    	; 0xc218 <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    c5be:	80 81       	ld	r24, Z
_Z13mqtt_callbackPcPhj():
    c5c0:	61 e0       	ldi	r22, 0x01	; 1
    c5c2:	70 e0       	ldi	r23, 0x00	; 0
parseInteger():
    c5c4:	84 37       	cpi	r24, 0x74	; 116
    c5c6:	09 f4       	brne	.+2      	; 0xc5ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x614>
    c5c8:	28 ce       	rjmp	.-944    	; 0xc21a <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    c5ca:	8b 32       	cpi	r24, 0x2B	; 43
    c5cc:	c9 f0       	breq	.+50     	; 0xc600 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64a>
    c5ce:	8d 32       	cpi	r24, 0x2D	; 45
    c5d0:	c1 f4       	brne	.+48     	; 0xc602 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    c5d2:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    c5d4:	81 e0       	ldi	r24, 0x01	; 1
parseInteger():
    c5d6:	70 e0       	ldi	r23, 0x00	; 0
    c5d8:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    c5da:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    c5dc:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    c5de:	20 ed       	ldi	r18, 0xD0	; 208
    c5e0:	29 0f       	add	r18, r25
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    c5e2:	2a 30       	cpi	r18, 0x0A	; 10
    c5e4:	80 f4       	brcc	.+32     	; 0xc606 <mqtt_callback(char*, unsigned char*, unsigned int)+0x650>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    c5e6:	46 9f       	mul	r20, r22
    c5e8:	90 01       	movw	r18, r0
    c5ea:	47 9f       	mul	r20, r23
    c5ec:	30 0d       	add	r19, r0
    c5ee:	11 24       	eor	r1, r1
    c5f0:	b9 01       	movw	r22, r18
    c5f2:	60 53       	subi	r22, 0x30	; 48
    c5f4:	71 09       	sbc	r23, r1
    c5f6:	69 0f       	add	r22, r25
    c5f8:	71 1d       	adc	r23, r1
    c5fa:	97 fd       	sbrc	r25, 7
    c5fc:	7a 95       	dec	r23
    c5fe:	ee cf       	rjmp	.-36     	; 0xc5dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x626>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    c600:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    c602:	80 e0       	ldi	r24, 0x00	; 0
    c604:	e8 cf       	rjmp	.-48     	; 0xc5d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x620>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    c606:	81 11       	cpse	r24, r1
    c608:	d0 cf       	rjmp	.-96     	; 0xc5aa <mqtt_callback(char*, unsigned char*, unsigned int)+0x5f4>
    c60a:	c4 cf       	rjmp	.-120    	; 0xc594 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2943
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    c60c:	82 60       	ori	r24, 0x02	; 2
    c60e:	10 cf       	rjmp	.-480    	; 0xc430 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2983
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    c610:	69 ed       	ldi	r22, 0xD9	; 217
    c612:	73 e0       	ldi	r23, 0x03	; 3
    c614:	c5 01       	movw	r24, r10
    c616:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
    c61a:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2982
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    c61c:	61 2c       	mov	r6, r1
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
  strcpy(tds.name, name);
    c61e:	88 e4       	ldi	r24, 0x48	; 72
    c620:	e8 2e       	mov	r14, r24
    c622:	f1 2c       	mov	r15, r1
    c624:	ec 0e       	add	r14, r28
    c626:	fd 1e       	adc	r15, r29
    c628:	fc e0       	ldi	r31, 0x0C	; 12
    c62a:	ef 0e       	add	r14, r31
    c62c:	f1 1c       	adc	r15, r1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2984
    pch = strtok (str1, "/");
    while (pch != NULL)
    c62e:	01 15       	cp	r16, r1
    c630:	11 05       	cpc	r17, r1
    c632:	09 f4       	brne	.+2      	; 0xc636 <mqtt_callback(char*, unsigned char*, unsigned int)+0x680>
    c634:	6d c0       	rjmp	.+218    	; 0xc710 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2986
    {
      if (cnt == 0) id = atoi(pch);
    c636:	61 10       	cpse	r6, r1
    c638:	0d c0       	rjmp	.+26     	; 0xc654 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69e>
    c63a:	c8 01       	movw	r24, r16
    c63c:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    c640:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2987
      if (id < HW_ONEWIRE_MAXROMS)
    c642:	25 e0       	ldi	r18, 0x05	; 5
    c644:	28 17       	cp	r18, r24
    c646:	08 f0       	brcs	.+2      	; 0xc64a <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
    c648:	5a c0       	rjmp	.+180    	; 0xc6fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2995
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    c64a:	8c e7       	ldi	r24, 0x7C	; 124
    c64c:	94 e0       	ldi	r25, 0x04	; 4
    c64e:	0e 94 7b 88 	call	0x110f6	; 0x110f6 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    c652:	55 c0       	rjmp	.+170    	; 0xc6fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2987
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    c654:	85 e0       	ldi	r24, 0x05	; 5
    c656:	87 15       	cp	r24, r7
    c658:	c0 f3       	brcs	.-16     	; 0xc64a <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2989
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    c65a:	a1 e0       	ldi	r26, 0x01	; 1
    c65c:	6a 12       	cpse	r6, r26
    c65e:	4f c0       	rjmp	.+158    	; 0xc6fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
    c660:	62 eb       	ldi	r22, 0xB2	; 178
    c662:	73 e0       	ldi	r23, 0x03	; 3
    c664:	c8 01       	movw	r24, r16
    c666:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    c66a:	89 2b       	or	r24, r25
    c66c:	89 f4       	brne	.+34     	; 0xc690 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6da>
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c66e:	be 01       	movw	r22, r28
    c670:	68 5b       	subi	r22, 0xB8	; 184
    c672:	7f 4f       	sbci	r23, 0xFF	; 255
    c674:	87 2d       	mov	r24, r7
    c676:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    c67a:	69 ed       	ldi	r22, 0xD9	; 217
    c67c:	7a e0       	ldi	r23, 0x0A	; 10
    c67e:	c7 01       	movw	r24, r14
    c680:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    c684:	be 01       	movw	r22, r28
    c686:	68 5b       	subi	r22, 0xB8	; 184
    c688:	7f 4f       	sbci	r23, 0xFF	; 255
    c68a:	87 2d       	mov	r24, r7
    c68c:	0e 94 a2 51 	call	0xa344	; 0xa344 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2990
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    c690:	6b eb       	ldi	r22, 0xBB	; 187
    c692:	77 e0       	ldi	r23, 0x07	; 7
    c694:	c8 01       	movw	r24, r16
    c696:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    c69a:	89 2b       	or	r24, r25
    c69c:	a9 f4       	brne	.+42     	; 0xc6c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x712>
    c69e:	89 ed       	ldi	r24, 0xD9	; 217
    c6a0:	9a e0       	ldi	r25, 0x0A	; 10
    c6a2:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    c6a6:	6c 01       	movw	r12, r24
tds_set_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c6a8:	be 01       	movw	r22, r28
    c6aa:	68 5b       	subi	r22, 0xB8	; 184
    c6ac:	7f 4f       	sbci	r23, 0xFF	; 255
    c6ae:	87 2d       	mov	r24, r7
    c6b0:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    c6b4:	64 96       	adiw	r28, 0x14	; 20
    c6b6:	df ae       	std	Y+63, r13	; 0x3f
    c6b8:	ce ae       	std	Y+62, r12	; 0x3e
    c6ba:	64 97       	sbiw	r28, 0x14	; 20
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    c6bc:	be 01       	movw	r22, r28
    c6be:	68 5b       	subi	r22, 0xB8	; 184
    c6c0:	7f 4f       	sbci	r23, 0xFF	; 255
    c6c2:	87 2d       	mov	r24, r7
    c6c4:	0e 94 a2 51 	call	0xa344	; 0xa344 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2991
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    c6c8:	64 e4       	ldi	r22, 0x44	; 68
    c6ca:	76 e0       	ldi	r23, 0x06	; 6
    c6cc:	c8 01       	movw	r24, r16
    c6ce:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    c6d2:	89 2b       	or	r24, r25
    c6d4:	a1 f4       	brne	.+40     	; 0xc6fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
    c6d6:	89 ed       	ldi	r24, 0xD9	; 217
    c6d8:	9a e0       	ldi	r25, 0x0A	; 10
    c6da:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    c6de:	18 2f       	mov	r17, r24
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c6e0:	be 01       	movw	r22, r28
    c6e2:	68 5b       	subi	r22, 0xB8	; 184
    c6e4:	7f 4f       	sbci	r23, 0xFF	; 255
    c6e6:	87 2d       	mov	r24, r7
    c6e8:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2991
    c6ec:	6d 96       	adiw	r28, 0x1d	; 29
    c6ee:	1f af       	std	Y+63, r17	; 0x3f
    c6f0:	6d 97       	sbiw	r28, 0x1d	; 29
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:108
  tds.period = period;
  set_tds18s20(idx, &tds);
    c6f2:	be 01       	movw	r22, r28
    c6f4:	68 5b       	subi	r22, 0xB8	; 184
    c6f6:	7f 4f       	sbci	r23, 0xFF	; 255
    c6f8:	87 2d       	mov	r24, r7
    c6fa:	0e 94 a2 51 	call	0xa344	; 0xa344 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2997
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    c6fe:	69 ed       	ldi	r22, 0xD9	; 217
    c700:	73 e0       	ldi	r23, 0x03	; 3
    c702:	90 e0       	ldi	r25, 0x00	; 0
    c704:	80 e0       	ldi	r24, 0x00	; 0
    c706:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
    c70a:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2998
      cnt++;
    c70c:	63 94       	inc	r6
    c70e:	8f cf       	rjmp	.-226    	; 0xc62e <mqtt_callback(char*, unsigned char*, unsigned int)+0x678>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3003
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    c710:	68 e6       	ldi	r22, 0x68	; 104
    c712:	72 e3       	ldi	r23, 0x32	; 50
    c714:	c5 01       	movw	r24, r10
    c716:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3004
  strcat(str1, device.nazev);
    c71a:	63 e3       	ldi	r22, 0x33	; 51
    c71c:	7c e0       	ldi	r23, 0x0C	; 12
    c71e:	c5 01       	movw	r24, r10
    c720:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3005
  strcat(str1, "/tds/clear");
    c724:	65 e4       	ldi	r22, 0x45	; 69
    c726:	74 e0       	ldi	r23, 0x04	; 4
    c728:	c5 01       	movw	r24, r10
    c72a:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3006
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c72e:	f5 01       	movw	r30, r10
    c730:	01 90       	ld	r0, Z+
    c732:	00 20       	and	r0, r0
    c734:	e9 f7       	brne	.-6      	; 0xc730 <mqtt_callback(char*, unsigned char*, unsigned int)+0x77a>
    c736:	31 97       	sbiw	r30, 0x01	; 1
    c738:	af 01       	movw	r20, r30
    c73a:	4a 19       	sub	r20, r10
    c73c:	5b 09       	sbc	r21, r11
    c73e:	b4 01       	movw	r22, r8
    c740:	c5 01       	movw	r24, r10
    c742:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    c746:	89 2b       	or	r24, r25
    c748:	a1 f4       	brne	.+40     	; 0xc772 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3008
  {
    mqtt_process_message++;
    c74a:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    c74e:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    c752:	01 96       	adiw	r24, 0x01	; 1
    c754:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    c758:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3009
    id = atoi(my_payload);
    c75c:	89 ed       	ldi	r24, 0xD9	; 217
    c75e:	9a e0       	ldi	r25, 0x0A	; 10
    c760:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    c764:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3010
    if (id < HW_ONEWIRE_MAXROMS)
    c766:	b5 e0       	ldi	r27, 0x05	; 5
    c768:	b8 17       	cp	r27, r24
    c76a:	08 f4       	brcc	.+2      	; 0xc76e <mqtt_callback(char*, unsigned char*, unsigned int)+0x7b8>
    c76c:	83 c0       	rjmp	.+262    	; 0xc874 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3011
      tds_set_clear(id);
    c76e:	0e 94 a4 56 	call	0xad48	; 0xad48 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3020
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///

  //// thermctl-in/XXXXX/rtds/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
    c772:	68 e6       	ldi	r22, 0x68	; 104
    c774:	72 e3       	ldi	r23, 0x32	; 50
    c776:	c5 01       	movw	r24, r10
    c778:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3021
  strcat(str1, device.nazev);
    c77c:	63 e3       	ldi	r22, 0x33	; 51
    c77e:	7c e0       	ldi	r23, 0x0C	; 12
    c780:	c5 01       	movw	r24, r10
    c782:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3022
  strcat(str1, "/rtds/register");
    c786:	61 e6       	ldi	r22, 0x61	; 97
    c788:	74 e0       	ldi	r23, 0x04	; 4
    c78a:	c5 01       	movw	r24, r10
    c78c:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3023
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c790:	f5 01       	movw	r30, r10
    c792:	01 90       	ld	r0, Z+
    c794:	00 20       	and	r0, r0
    c796:	e9 f7       	brne	.-6      	; 0xc792 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7dc>
    c798:	31 97       	sbiw	r30, 0x01	; 1
    c79a:	af 01       	movw	r20, r30
    c79c:	4a 19       	sub	r20, r10
    c79e:	5b 09       	sbc	r21, r11
    c7a0:	b4 01       	movw	r22, r8
    c7a2:	c5 01       	movw	r24, r10
    c7a4:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    c7a8:	89 2b       	or	r24, r25
    c7aa:	d1 f4       	brne	.+52     	; 0xc7e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3025
  {
    mqtt_process_message++;
    c7ac:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    c7b0:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    c7b4:	01 96       	adiw	r24, 0x01	; 1
    c7b6:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    c7ba:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3026
    if (remote_tds_name_exist(my_payload) == 255)
    c7be:	89 ed       	ldi	r24, 0xD9	; 217
    c7c0:	9a e0       	ldi	r25, 0x0A	; 10
    c7c2:	0e 94 09 5f 	call	0xbe12	; 0xbe12 <remote_tds_name_exist(char*)>
    c7c6:	8f 3f       	cpi	r24, 0xFF	; 255
    c7c8:	59 f4       	brne	.+22     	; 0xc7e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3028
    {
      id = remote_tds_find_free();
    c7ca:	0e 94 0f 5b 	call	0xb61e	; 0xb61e <remote_tds_find_free()>
    c7ce:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3029
      remote_tds_set_complete(id, 1, my_payload);
    c7d0:	49 ed       	ldi	r20, 0xD9	; 217
    c7d2:	5a e0       	ldi	r21, 0x0A	; 10
    c7d4:	61 e0       	ldi	r22, 0x01	; 1
    c7d6:	0e 94 f8 52 	call	0xa5f0	; 0xa5f0 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3030
      remote_tds_subscibe_topic(id);
    c7da:	87 2d       	mov	r24, r7
    c7dc:	0e 94 6b 5f 	call	0xbed6	; 0xbed6 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3036
    }
    ///TODO - vratit ze jiz existuje
  }

  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    c7e0:	68 e6       	ldi	r22, 0x68	; 104
    c7e2:	72 e3       	ldi	r23, 0x32	; 50
    c7e4:	c5 01       	movw	r24, r10
    c7e6:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3037
  strcat(str1, device.nazev);
    c7ea:	63 e3       	ldi	r22, 0x33	; 51
    c7ec:	7c e0       	ldi	r23, 0x0C	; 12
    c7ee:	c5 01       	movw	r24, r10
    c7f0:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3038
  strcat(str1, "/rtds/set/");
    c7f4:	60 e7       	ldi	r22, 0x70	; 112
    c7f6:	74 e0       	ldi	r23, 0x04	; 4
    c7f8:	c5 01       	movw	r24, r10
    c7fa:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3039
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c7fe:	f5 01       	movw	r30, r10
    c800:	01 90       	ld	r0, Z+
    c802:	00 20       	and	r0, r0
    c804:	e9 f7       	brne	.-6      	; 0xc800 <mqtt_callback(char*, unsigned char*, unsigned int)+0x84a>
    c806:	31 97       	sbiw	r30, 0x01	; 1
    c808:	af 01       	movw	r20, r30
    c80a:	4a 19       	sub	r20, r10
    c80c:	5b 09       	sbc	r21, r11
    c80e:	b4 01       	movw	r22, r8
    c810:	c5 01       	movw	r24, r10
    c812:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    c816:	89 2b       	or	r24, r25
    c818:	09 f0       	breq	.+2      	; 0xc81c <mqtt_callback(char*, unsigned char*, unsigned int)+0x866>
    c81a:	6a c0       	rjmp	.+212    	; 0xc8f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3041
  {
    mqtt_process_message++;
    c81c:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    c820:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    c824:	01 96       	adiw	r24, 0x01	; 1
    c826:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    c82a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3043
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c82e:	f5 01       	movw	r30, r10
    c830:	01 90       	ld	r0, Z+
    c832:	00 20       	and	r0, r0
    c834:	e9 f7       	brne	.-6      	; 0xc830 <mqtt_callback(char*, unsigned char*, unsigned int)+0x87a>
    c836:	31 97       	sbiw	r30, 0x01	; 1
    c838:	ea 19       	sub	r30, r10
    c83a:	fb 09       	sbc	r31, r11
    c83c:	9e 2f       	mov	r25, r30
    c83e:	4e 2f       	mov	r20, r30
    c840:	84 2f       	mov	r24, r20
    c842:	89 1b       	sub	r24, r25
    c844:	24 2f       	mov	r18, r20
    c846:	30 e0       	ldi	r19, 0x00	; 0
    c848:	d4 01       	movw	r26, r8
    c84a:	0d 90       	ld	r0, X+
    c84c:	00 20       	and	r0, r0
    c84e:	e9 f7       	brne	.-6      	; 0xc84a <mqtt_callback(char*, unsigned char*, unsigned int)+0x894>
    c850:	11 97       	sbiw	r26, 0x01	; 1
    c852:	a8 19       	sub	r26, r8
    c854:	b9 09       	sbc	r27, r9
    c856:	2a 17       	cp	r18, r26
    c858:	3b 07       	cpc	r19, r27
    c85a:	88 f4       	brcc	.+34     	; 0xc87e <mqtt_callback(char*, unsigned char*, unsigned int)+0x8c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3045
    {
      str1[cnt] = topic[f];
    c85c:	d5 01       	movw	r26, r10
    c85e:	a8 0f       	add	r26, r24
    c860:	b1 1d       	adc	r27, r1
    c862:	28 0d       	add	r18, r8
    c864:	39 1d       	adc	r19, r9
    c866:	f9 01       	movw	r30, r18
    c868:	80 81       	ld	r24, Z
    c86a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3046
      str1[cnt + 1] = 0;
    c86c:	11 96       	adiw	r26, 0x01	; 1
    c86e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3043
  strcat(str1, "/rtds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c870:	4f 5f       	subi	r20, 0xFF	; 255
    c872:	e6 cf       	rjmp	.-52     	; 0xc840 <mqtt_callback(char*, unsigned char*, unsigned int)+0x88a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3013
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    c874:	80 e5       	ldi	r24, 0x50	; 80
    c876:	94 e0       	ldi	r25, 0x04	; 4
    c878:	0e 94 7b 88 	call	0x110f6	; 0x110f6 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    c87c:	7a cf       	rjmp	.-268    	; 0xc772 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3050
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    c87e:	69 ed       	ldi	r22, 0xD9	; 217
    c880:	73 e0       	ldi	r23, 0x03	; 3
    c882:	c5 01       	movw	r24, r10
    c884:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3049
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    c888:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3051
    pch = strtok (str1, "/");
    while (pch != NULL)
    c88a:	00 97       	sbiw	r24, 0x00	; 0
    c88c:	89 f1       	breq	.+98     	; 0xc8f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3053
    {
      if (cnt == 0) id = atoi(pch);
    c88e:	11 11       	cpse	r17, r1
    c890:	0b c0       	rjmp	.+22     	; 0xc8a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8f2>
    c892:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    c896:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3067
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
    c898:	69 ed       	ldi	r22, 0xD9	; 217
    c89a:	73 e0       	ldi	r23, 0x03	; 3
    c89c:	90 e0       	ldi	r25, 0x00	; 0
    c89e:	80 e0       	ldi	r24, 0x00	; 0
    c8a0:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3068
      cnt++;
    c8a4:	1f 5f       	subi	r17, 0xFF	; 255
    c8a6:	f1 cf       	rjmp	.-30     	; 0xc88a <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3054
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
    c8a8:	11 30       	cpi	r17, 0x01	; 1
    c8aa:	b1 f7       	brne	.-20     	; 0xc898 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
    c8ac:	62 eb       	ldi	r22, 0xB2	; 178
    c8ae:	73 e0       	ldi	r23, 0x03	; 3
    c8b0:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    c8b4:	89 2b       	or	r24, r25
    c8b6:	81 f7       	brne	.-32     	; 0xc898 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3056
      {
        remote_tds_get_active(id, &active);
    c8b8:	be 01       	movw	r22, r28
    c8ba:	64 5d       	subi	r22, 0xD4	; 212
    c8bc:	7e 4f       	sbci	r23, 0xFE	; 254
    c8be:	87 2d       	mov	r24, r7
    c8c0:	0e 94 e1 5a 	call	0xb5c2	; 0xb5c2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3057
        if (active == 0)
    c8c4:	c4 5d       	subi	r28, 0xD4	; 212
    c8c6:	de 4f       	sbci	r29, 0xFE	; 254
    c8c8:	88 81       	ld	r24, Y
    c8ca:	cc 52       	subi	r28, 0x2C	; 44
    c8cc:	d1 40       	sbci	r29, 0x01	; 1
    c8ce:	81 11       	cpse	r24, r1
    c8d0:	0a c0       	rjmp	.+20     	; 0xc8e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x930>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3059
        {
          remote_tds_set_complete(id, 1, my_payload);
    c8d2:	49 ed       	ldi	r20, 0xD9	; 217
    c8d4:	5a e0       	ldi	r21, 0x0A	; 10
    c8d6:	61 e0       	ldi	r22, 0x01	; 1
    c8d8:	87 2d       	mov	r24, r7
    c8da:	0e 94 f8 52 	call	0xa5f0	; 0xa5f0 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3060
          remote_tds_subscibe_topic(id);
    c8de:	87 2d       	mov	r24, r7
    c8e0:	0e 94 6b 5f 	call	0xbed6	; 0xbed6 <remote_tds_subscibe_topic(unsigned char)>
    c8e4:	d9 cf       	rjmp	.-78     	; 0xc898 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3064
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
    c8e6:	8b e7       	ldi	r24, 0x7B	; 123
    c8e8:	94 e0       	ldi	r25, 0x04	; 4
    c8ea:	0e 94 7b 88 	call	0x110f6	; 0x110f6 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    c8ee:	d4 cf       	rjmp	.-88     	; 0xc898 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3074
    }
  }

  ////
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    c8f0:	68 e6       	ldi	r22, 0x68	; 104
    c8f2:	72 e3       	ldi	r23, 0x32	; 50
    c8f4:	c5 01       	movw	r24, r10
    c8f6:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3075
  strcat(str1, device.nazev);
    c8fa:	63 e3       	ldi	r22, 0x33	; 51
    c8fc:	7c e0       	ldi	r23, 0x0C	; 12
    c8fe:	c5 01       	movw	r24, r10
    c900:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3076
  strcat(str1, "/rtds/clear");
    c904:	6b e8       	ldi	r22, 0x8B	; 139
    c906:	74 e0       	ldi	r23, 0x04	; 4
    c908:	c5 01       	movw	r24, r10
    c90a:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3077
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c90e:	f5 01       	movw	r30, r10
    c910:	01 90       	ld	r0, Z+
    c912:	00 20       	and	r0, r0
    c914:	e9 f7       	brne	.-6      	; 0xc910 <mqtt_callback(char*, unsigned char*, unsigned int)+0x95a>
    c916:	31 97       	sbiw	r30, 0x01	; 1
    c918:	af 01       	movw	r20, r30
    c91a:	4a 19       	sub	r20, r10
    c91c:	5b 09       	sbc	r21, r11
    c91e:	b4 01       	movw	r22, r8
    c920:	c5 01       	movw	r24, r10
    c922:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    c926:	89 2b       	or	r24, r25
    c928:	09 f0       	breq	.+2      	; 0xc92c <mqtt_callback(char*, unsigned char*, unsigned int)+0x976>
    c92a:	6f c0       	rjmp	.+222    	; 0xca0a <mqtt_callback(char*, unsigned char*, unsigned int)+0xa54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3079
  {
    mqtt_process_message++;
    c92c:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    c930:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    c934:	01 96       	adiw	r24, 0x01	; 1
    c936:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    c93a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3080
    id = atoi(my_payload);
    c93e:	89 ed       	ldi	r24, 0xD9	; 217
    c940:	9a e0       	ldi	r25, 0x0A	; 10
    c942:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    c946:	78 2e       	mov	r7, r24
remote_tds_unsubscibe_topic():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2720
/// funkce pro zruseni odebirani topicu vzdalenych cidel
void remote_tds_unsubscibe_topic(uint8_t idx)
{
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    c948:	c8 5f       	subi	r28, 0xF8	; 248
    c94a:	de 4f       	sbci	r29, 0xFE	; 254
    c94c:	18 82       	st	Y, r1
    c94e:	c8 50       	subi	r28, 0x08	; 8
    c950:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2721
  remote_tds_get_complete(idx, &active, tmp1);
    c952:	ae 01       	movw	r20, r28
    c954:	48 57       	subi	r20, 0x78	; 120
    c956:	5f 4f       	sbci	r21, 0xFF	; 255
    c958:	be 01       	movw	r22, r28
    c95a:	68 5f       	subi	r22, 0xF8	; 248
    c95c:	7e 4f       	sbci	r23, 0xFE	; 254
    c95e:	0e 94 5b 5b 	call	0xb6b6	; 0xb6b6 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2722
  if (active == 1)
    c962:	c8 5f       	subi	r28, 0xF8	; 248
    c964:	de 4f       	sbci	r29, 0xFE	; 254
    c966:	88 81       	ld	r24, Y
    c968:	c8 50       	subi	r28, 0x08	; 8
    c96a:	d1 40       	sbci	r29, 0x01	; 1
    c96c:	81 30       	cpi	r24, 0x01	; 1
    c96e:	09 f0       	breq	.+2      	; 0xc972 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9bc>
    c970:	49 c0       	rjmp	.+146    	; 0xca04 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2724
  {
    strcpy(tmp2, "/rtds/");
    c972:	8e 01       	movw	r16, r28
    c974:	08 5b       	subi	r16, 0xB8	; 184
    c976:	1f 4f       	sbci	r17, 0xFF	; 255
    c978:	64 ed       	ldi	r22, 0xD4	; 212
    c97a:	73 e0       	ldi	r23, 0x03	; 3
    c97c:	c8 01       	movw	r24, r16
    c97e:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2725
    strcat(tmp2, tmp1);
    c982:	be 01       	movw	r22, r28
    c984:	68 57       	subi	r22, 0x78	; 120
    c986:	7f 4f       	sbci	r23, 0xFF	; 255
    c988:	c8 01       	movw	r24, r16
    c98a:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
unsubscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:497
    }
    return false;
}

boolean PubSubClient::unsubscribe(const char* topic) {
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
    c98e:	d8 01       	movw	r26, r16
    c990:	0d 90       	ld	r0, X+
    c992:	00 20       	and	r0, r0
    c994:	e9 f7       	brne	.-6      	; 0xc990 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9da>
    c996:	cd 01       	movw	r24, r26
    c998:	80 1b       	sub	r24, r16
    c99a:	91 0b       	sbc	r25, r17
    c99c:	08 96       	adiw	r24, 0x08	; 8
    c99e:	81 30       	cpi	r24, 0x01	; 1
    c9a0:	92 40       	sbci	r25, 0x02	; 2
    c9a2:	80 f5       	brcc	.+96     	; 0xca04 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:501
        // Too long
        return false;
    }
    if (connected()) {
    c9a4:	80 e1       	ldi	r24, 0x10	; 16
    c9a6:	9e e0       	ldi	r25, 0x0E	; 14
    c9a8:	0e 94 2b 93 	call	0x12656	; 0x12656 <PubSubClient::connected()>
    c9ac:	88 23       	and	r24, r24
    c9ae:	51 f1       	breq	.+84     	; 0xca04 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:503
        uint16_t length = 5;
        nextMsgId++;
    c9b0:	80 91 12 10 	lds	r24, 0x1012	; 0x801012 <mqtt_client+0x202>
    c9b4:	90 91 13 10 	lds	r25, 0x1013	; 0x801013 <mqtt_client+0x203>
    c9b8:	01 96       	adiw	r24, 0x01	; 1
    c9ba:	90 93 13 10 	sts	0x1013, r25	; 0x801013 <mqtt_client+0x203>
    c9be:	80 93 12 10 	sts	0x1012, r24	; 0x801012 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:504
        if (nextMsgId == 0) {
    c9c2:	89 2b       	or	r24, r25
    c9c4:	31 f4       	brne	.+12     	; 0xc9d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa1c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:505
            nextMsgId = 1;
    c9c6:	81 e0       	ldi	r24, 0x01	; 1
    c9c8:	90 e0       	ldi	r25, 0x00	; 0
    c9ca:	90 93 13 10 	sts	0x1013, r25	; 0x801013 <mqtt_client+0x203>
    c9ce:	80 93 12 10 	sts	0x1012, r24	; 0x801012 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:507
        }
        buffer[length++] = (nextMsgId >> 8);
    c9d2:	80 91 12 10 	lds	r24, 0x1012	; 0x801012 <mqtt_client+0x202>
    c9d6:	90 91 13 10 	lds	r25, 0x1013	; 0x801013 <mqtt_client+0x203>
    c9da:	90 93 17 0e 	sts	0x0E17, r25	; 0x800e17 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:508
        buffer[length++] = (nextMsgId & 0xFF);
    c9de:	80 93 18 0e 	sts	0x0E18, r24	; 0x800e18 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:509
        length = writeString(topic, buffer,length);
    c9e2:	47 e0       	ldi	r20, 0x07	; 7
    c9e4:	50 e0       	ldi	r21, 0x00	; 0
    c9e6:	62 e1       	ldi	r22, 0x12	; 18
    c9e8:	7e e0       	ldi	r23, 0x0E	; 14
    c9ea:	c8 01       	movw	r24, r16
    c9ec:	0e 94 bd 84 	call	0x1097a	; 0x1097a <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:510
        return write(MQTTUNSUBSCRIBE|MQTTQOS1,buffer,length-5);
    c9f0:	9c 01       	movw	r18, r24
    c9f2:	25 50       	subi	r18, 0x05	; 5
    c9f4:	31 09       	sbc	r19, r1
    c9f6:	42 e1       	ldi	r20, 0x12	; 18
    c9f8:	5e e0       	ldi	r21, 0x0E	; 14
    c9fa:	62 ea       	ldi	r22, 0xA2	; 162
    c9fc:	80 e1       	ldi	r24, 0x10	; 16
    c9fe:	9e e0       	ldi	r25, 0x0E	; 14
    ca00:	0e 94 c5 94 	call	0x1298a	; 0x1298a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3083
  {
    mqtt_process_message++;
    id = atoi(my_payload);
    remote_tds_unsubscibe_topic(id);
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
    ca04:	87 2d       	mov	r24, r7
    ca06:	0e 94 0f 53 	call	0xa61e	; 0xa61e <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3087
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    ca0a:	68 e6       	ldi	r22, 0x68	; 104
    ca0c:	72 e3       	ldi	r23, 0x32	; 50
    ca0e:	c5 01       	movw	r24, r10
    ca10:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3088
  strcat(str1, device.nazev);
    ca14:	63 e3       	ldi	r22, 0x33	; 51
    ca16:	7c e0       	ldi	r23, 0x0C	; 12
    ca18:	c5 01       	movw	r24, r10
    ca1a:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3089
  strcat(str1, "/rtds/get");
    ca1e:	67 e9       	ldi	r22, 0x97	; 151
    ca20:	74 e0       	ldi	r23, 0x04	; 4
    ca22:	c5 01       	movw	r24, r10
    ca24:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3090
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ca28:	f5 01       	movw	r30, r10
    ca2a:	01 90       	ld	r0, Z+
    ca2c:	00 20       	and	r0, r0
    ca2e:	e9 f7       	brne	.-6      	; 0xca2a <mqtt_callback(char*, unsigned char*, unsigned int)+0xa74>
    ca30:	31 97       	sbiw	r30, 0x01	; 1
    ca32:	af 01       	movw	r20, r30
    ca34:	4a 19       	sub	r20, r10
    ca36:	5b 09       	sbc	r21, r11
    ca38:	b4 01       	movw	r22, r8
    ca3a:	c5 01       	movw	r24, r10
    ca3c:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    ca40:	89 2b       	or	r24, r25
    ca42:	11 f4       	brne	.+4      	; 0xca48 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3092
  {
    send_mqtt_remote_tds_status();
    ca44:	0e 94 87 5e 	call	0xbd0e	; 0xbd0e <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3096
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy(str1, "/rtds/");
    ca48:	64 ed       	ldi	r22, 0xD4	; 212
    ca4a:	73 e0       	ldi	r23, 0x03	; 3
    ca4c:	c5 01       	movw	r24, r10
    ca4e:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3097
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ca52:	f5 01       	movw	r30, r10
    ca54:	01 90       	ld	r0, Z+
    ca56:	00 20       	and	r0, r0
    ca58:	e9 f7       	brne	.-6      	; 0xca54 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa9e>
    ca5a:	31 97       	sbiw	r30, 0x01	; 1
    ca5c:	af 01       	movw	r20, r30
    ca5e:	4a 19       	sub	r20, r10
    ca60:	5b 09       	sbc	r21, r11
    ca62:	b4 01       	movw	r22, r8
    ca64:	c5 01       	movw	r24, r10
    ca66:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    ca6a:	89 2b       	or	r24, r25
    ca6c:	09 f0       	breq	.+2      	; 0xca70 <mqtt_callback(char*, unsigned char*, unsigned int)+0xaba>
    ca6e:	74 c0       	rjmp	.+232    	; 0xcb58 <mqtt_callback(char*, unsigned char*, unsigned int)+0xba2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3099
  {
    mqtt_process_message++;
    ca70:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    ca74:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    ca78:	01 96       	adiw	r24, 0x01	; 1
    ca7a:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    ca7e:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3101
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ca82:	f5 01       	movw	r30, r10
    ca84:	01 90       	ld	r0, Z+
    ca86:	00 20       	and	r0, r0
    ca88:	e9 f7       	brne	.-6      	; 0xca84 <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
    ca8a:	31 97       	sbiw	r30, 0x01	; 1
    ca8c:	ea 19       	sub	r30, r10
    ca8e:	fb 09       	sbc	r31, r11
    ca90:	9e 2f       	mov	r25, r30
    ca92:	4e 2f       	mov	r20, r30
    ca94:	84 2f       	mov	r24, r20
    ca96:	89 1b       	sub	r24, r25
    ca98:	24 2f       	mov	r18, r20
    ca9a:	30 e0       	ldi	r19, 0x00	; 0
    ca9c:	d4 01       	movw	r26, r8
    ca9e:	0d 90       	ld	r0, X+
    caa0:	00 20       	and	r0, r0
    caa2:	e9 f7       	brne	.-6      	; 0xca9e <mqtt_callback(char*, unsigned char*, unsigned int)+0xae8>
    caa4:	11 97       	sbiw	r26, 0x01	; 1
    caa6:	a8 19       	sub	r26, r8
    caa8:	b9 09       	sbc	r27, r9
    caaa:	2a 17       	cp	r18, r26
    caac:	3b 07       	cpc	r19, r27
    caae:	60 f4       	brcc	.+24     	; 0xcac8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3103
    {
      str1[cnt] = topic[f];
    cab0:	d5 01       	movw	r26, r10
    cab2:	a8 0f       	add	r26, r24
    cab4:	b1 1d       	adc	r27, r1
    cab6:	28 0d       	add	r18, r8
    cab8:	39 1d       	adc	r19, r9
    caba:	f9 01       	movw	r30, r18
    cabc:	80 81       	ld	r24, Z
    cabe:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3104
      str1[cnt + 1] = 0;
    cac0:	11 96       	adiw	r26, 0x01	; 1
    cac2:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3101
  strcpy(str1, "/rtds/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cac4:	4f 5f       	subi	r20, 0xFF	; 255
    cac6:	e6 cf       	rjmp	.-52     	; 0xca94 <mqtt_callback(char*, unsigned char*, unsigned int)+0xade>
    cac8:	b4 e6       	ldi	r27, 0x64	; 100
    caca:	cb 2e       	mov	r12, r27
    cacc:	d1 2c       	mov	r13, r1
    cace:	e1 2c       	mov	r14, r1
    cad0:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3107
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cad2:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3109
    {
      uint8_t active = 0;
    cad4:	29 96       	adiw	r28, 0x09	; 9
    cad6:	1f ae       	std	Y+63, r1	; 0x3f
    cad8:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3110
      remote_tds_get_complete(idx, &active, tmp1);
    cada:	ae 01       	movw	r20, r28
    cadc:	44 5e       	subi	r20, 0xE4	; 228
    cade:	5e 4f       	sbci	r21, 0xFE	; 254
    cae0:	be 01       	movw	r22, r28
    cae2:	68 5b       	subi	r22, 0xB8	; 184
    cae4:	7f 4f       	sbci	r23, 0xFF	; 255
    cae6:	81 2f       	mov	r24, r17
    cae8:	0e 94 5b 5b 	call	0xb6b6	; 0xb6b6 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3111
      if (active == 1 && strcmp(tmp1, str1) == 0)
    caec:	29 96       	adiw	r28, 0x09	; 9
    caee:	8f ad       	ldd	r24, Y+63	; 0x3f
    caf0:	29 97       	sbiw	r28, 0x09	; 9
    caf2:	81 30       	cpi	r24, 0x01	; 1
    caf4:	21 f5       	brne	.+72     	; 0xcb3e <mqtt_callback(char*, unsigned char*, unsigned int)+0xb88>
    caf6:	b5 01       	movw	r22, r10
    caf8:	ce 01       	movw	r24, r28
    cafa:	84 5e       	subi	r24, 0xE4	; 228
    cafc:	9e 4f       	sbci	r25, 0xFE	; 254
    cafe:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    cb02:	89 2b       	or	r24, r25
    cb04:	e1 f4       	brne	.+56     	; 0xcb3e <mqtt_callback(char*, unsigned char*, unsigned int)+0xb88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3113
      {
        remote_tds_set_data(idx, atoi(my_payload));
    cb06:	89 ed       	ldi	r24, 0xD9	; 217
    cb08:	9a e0       	ldi	r25, 0x0A	; 10
    cb0a:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    cb0e:	09 2f       	mov	r16, r25
remote_tds_set_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2770
///
void remote_tds_set_data(uint8_t idx, int temp)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (temp & 0xff));
    cb10:	48 2f       	mov	r20, r24
    cb12:	c7 01       	movw	r24, r14
    cb14:	b6 01       	movw	r22, r12
    cb16:	0e 94 a1 89 	call	0x11342	; 0x11342 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2771
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((temp >> 8) & 0xff));
    cb1a:	40 2f       	mov	r20, r16
    cb1c:	c7 01       	movw	r24, r14
    cb1e:	b6 01       	movw	r22, r12
    cb20:	6f 5f       	subi	r22, 0xFF	; 255
    cb22:	7f 4f       	sbci	r23, 0xFF	; 255
    cb24:	8f 4f       	sbci	r24, 0xFF	; 255
    cb26:	9f 4f       	sbci	r25, 0xFF	; 255
    cb28:	0e 94 a1 89 	call	0x11342	; 0x11342 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2772
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    cb2c:	40 e0       	ldi	r20, 0x00	; 0
    cb2e:	c7 01       	movw	r24, r14
    cb30:	b6 01       	movw	r22, r12
    cb32:	6e 5f       	subi	r22, 0xFE	; 254
    cb34:	7f 4f       	sbci	r23, 0xFF	; 255
    cb36:	8f 4f       	sbci	r24, 0xFF	; 255
    cb38:	9f 4f       	sbci	r25, 0xFF	; 255
    cb3a:	0e 94 a1 89 	call	0x11342	; 0x11342 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3107
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cb3e:	1f 5f       	subi	r17, 0xFF	; 255
    cb40:	f3 e0       	ldi	r31, 0x03	; 3
    cb42:	cf 0e       	add	r12, r31
    cb44:	d1 1c       	adc	r13, r1
    cb46:	e1 1c       	adc	r14, r1
    cb48:	f1 1c       	adc	r15, r1
    cb4a:	22 e8       	ldi	r18, 0x82	; 130
    cb4c:	c2 16       	cp	r12, r18
    cb4e:	d1 04       	cpc	r13, r1
    cb50:	e1 04       	cpc	r14, r1
    cb52:	f1 04       	cpc	r15, r1
    cb54:	09 f0       	breq	.+2      	; 0xcb58 <mqtt_callback(char*, unsigned char*, unsigned int)+0xba2>
    cb56:	be cf       	rjmp	.-132    	; 0xcad4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3117
      {
        remote_tds_set_data(idx, atoi(my_payload));
      }
    }
  }
  strcpy(str1, "/rtds/list");
    cb58:	61 ea       	ldi	r22, 0xA1	; 161
    cb5a:	74 e0       	ldi	r23, 0x04	; 4
    cb5c:	c5 01       	movw	r24, r10
    cb5e:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3132
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    cb62:	68 e6       	ldi	r22, 0x68	; 104
    cb64:	72 e3       	ldi	r23, 0x32	; 50
    cb66:	c5 01       	movw	r24, r10
    cb68:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3133
  strcat(str1, device.nazev);
    cb6c:	63 e3       	ldi	r22, 0x33	; 51
    cb6e:	7c e0       	ldi	r23, 0x0C	; 12
    cb70:	c5 01       	movw	r24, r10
    cb72:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3134
  strcat(str1, "/prog/set/");
    cb76:	6c ea       	ldi	r22, 0xAC	; 172
    cb78:	74 e0       	ldi	r23, 0x04	; 4
    cb7a:	c5 01       	movw	r24, r10
    cb7c:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3135
  if (strncmp(str1, topic, strlen(str1)) == 0)
    cb80:	f5 01       	movw	r30, r10
    cb82:	01 90       	ld	r0, Z+
    cb84:	00 20       	and	r0, r0
    cb86:	e9 f7       	brne	.-6      	; 0xcb82 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbcc>
    cb88:	31 97       	sbiw	r30, 0x01	; 1
    cb8a:	af 01       	movw	r20, r30
    cb8c:	4a 19       	sub	r20, r10
    cb8e:	5b 09       	sbc	r21, r11
    cb90:	b4 01       	movw	r22, r8
    cb92:	c5 01       	movw	r24, r10
    cb94:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    cb98:	89 2b       	or	r24, r25
    cb9a:	09 f0       	breq	.+2      	; 0xcb9e <mqtt_callback(char*, unsigned char*, unsigned int)+0xbe8>
    cb9c:	75 c0       	rjmp	.+234    	; 0xcc88 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3137
  {
    mqtt_process_message++;
    cb9e:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    cba2:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    cba6:	01 96       	adiw	r24, 0x01	; 1
    cba8:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    cbac:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3139
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cbb0:	f5 01       	movw	r30, r10
    cbb2:	01 90       	ld	r0, Z+
    cbb4:	00 20       	and	r0, r0
    cbb6:	e9 f7       	brne	.-6      	; 0xcbb2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbfc>
    cbb8:	31 97       	sbiw	r30, 0x01	; 1
    cbba:	ea 19       	sub	r30, r10
    cbbc:	fb 09       	sbc	r31, r11
    cbbe:	9e 2f       	mov	r25, r30
    cbc0:	4e 2f       	mov	r20, r30
    cbc2:	84 2f       	mov	r24, r20
    cbc4:	89 1b       	sub	r24, r25
    cbc6:	24 2f       	mov	r18, r20
    cbc8:	30 e0       	ldi	r19, 0x00	; 0
    cbca:	d4 01       	movw	r26, r8
    cbcc:	0d 90       	ld	r0, X+
    cbce:	00 20       	and	r0, r0
    cbd0:	e9 f7       	brne	.-6      	; 0xcbcc <mqtt_callback(char*, unsigned char*, unsigned int)+0xc16>
    cbd2:	11 97       	sbiw	r26, 0x01	; 1
    cbd4:	a8 19       	sub	r26, r8
    cbd6:	b9 09       	sbc	r27, r9
    cbd8:	2a 17       	cp	r18, r26
    cbda:	3b 07       	cpc	r19, r27
    cbdc:	60 f4       	brcc	.+24     	; 0xcbf6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3141
    {
      str1[cnt] = topic[f];
    cbde:	d5 01       	movw	r26, r10
    cbe0:	a8 0f       	add	r26, r24
    cbe2:	b1 1d       	adc	r27, r1
    cbe4:	28 0d       	add	r18, r8
    cbe6:	39 1d       	adc	r19, r9
    cbe8:	f9 01       	movw	r30, r18
    cbea:	80 81       	ld	r24, Z
    cbec:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3142
      str1[cnt + 1] = 0;
    cbee:	11 96       	adiw	r26, 0x01	; 1
    cbf0:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3139
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cbf2:	4f 5f       	subi	r20, 0xFF	; 255
    cbf4:	e6 cf       	rjmp	.-52     	; 0xcbc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc0c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3146
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    cbf6:	69 ed       	ldi	r22, 0xD9	; 217
    cbf8:	73 e0       	ldi	r23, 0x03	; 3
    cbfa:	c5 01       	movw	r24, r10
    cbfc:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
    cc00:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3145
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    cc02:	f1 2c       	mov	r15, r1
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    cc04:	ad e4       	ldi	r26, 0x4D	; 77
    cc06:	ea 2e       	mov	r14, r26
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3147
    pch = strtok (str1, "/");
    while (pch != NULL)
    cc08:	01 15       	cp	r16, r1
    cc0a:	11 05       	cpc	r17, r1
    cc0c:	e9 f1       	breq	.+122    	; 0xcc88 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3149
    {
      if (cnt == 0) id = atoi(pch);
    cc0e:	f1 10       	cpse	r15, r1
    cc10:	0c c0       	rjmp	.+24     	; 0xcc2a <mqtt_callback(char*, unsigned char*, unsigned int)+0xc74>
    cc12:	c8 01       	movw	r24, r16
    cc14:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    cc18:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3150
      if (id < AVAILABLE_PROGRAM)
    cc1a:	f7 e0       	ldi	r31, 0x07	; 7
    cc1c:	f8 17       	cp	r31, r24
    cc1e:	58 f5       	brcc	.+86     	; 0xcc76 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3157
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    cc20:	87 eb       	ldi	r24, 0xB7	; 183
    cc22:	94 e0       	ldi	r25, 0x04	; 4
    cc24:	0e 94 7b 88 	call	0x110f6	; 0x110f6 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    cc28:	26 c0       	rjmp	.+76     	; 0xcc76 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3150
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    cc2a:	27 e0       	ldi	r18, 0x07	; 7
    cc2c:	27 15       	cp	r18, r7
    cc2e:	c0 f3       	brcs	.-16     	; 0xcc20 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3152
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    cc30:	81 e0       	ldi	r24, 0x01	; 1
    cc32:	f8 12       	cpse	r15, r24
    cc34:	20 c0       	rjmp	.+64     	; 0xcc76 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
    cc36:	62 eb       	ldi	r22, 0xB2	; 178
    cc38:	73 e0       	ldi	r23, 0x03	; 3
    cc3a:	c8 01       	movw	r24, r16
    cc3c:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    cc40:	89 2b       	or	r24, r25
    cc42:	29 f4       	brne	.+10     	; 0xcc4e <mqtt_callback(char*, unsigned char*, unsigned int)+0xc98>
    cc44:	69 ed       	ldi	r22, 0xD9	; 217
    cc46:	7a e0       	ldi	r23, 0x0A	; 10
    cc48:	87 2d       	mov	r24, r7
    cc4a:	0e 94 4e 50 	call	0xa09c	; 0xa09c <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3153
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    cc4e:	6c eb       	ldi	r22, 0xBC	; 188
    cc50:	73 e0       	ldi	r23, 0x03	; 3
    cc52:	c8 01       	movw	r24, r16
    cc54:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    cc58:	89 2b       	or	r24, r25
    cc5a:	69 f4       	brne	.+26     	; 0xcc76 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
    cc5c:	89 ed       	ldi	r24, 0xD9	; 217
    cc5e:	9a e0       	ldi	r25, 0x0A	; 10
    cc60:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
    cc64:	7e 9c       	mul	r7, r14
    cc66:	90 01       	movw	r18, r0
    cc68:	11 24       	eor	r1, r1
    cc6a:	68 2f       	mov	r22, r24
    cc6c:	c9 01       	movw	r24, r18
    cc6e:	8f 50       	subi	r24, 0x0F	; 15
    cc70:	9e 4f       	sbci	r25, 0xFE	; 254
    cc72:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3159
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
      }
      pch = strtok (NULL, "/");
    cc76:	69 ed       	ldi	r22, 0xD9	; 217
    cc78:	73 e0       	ldi	r23, 0x03	; 3
    cc7a:	90 e0       	ldi	r25, 0x00	; 0
    cc7c:	80 e0       	ldi	r24, 0x00	; 0
    cc7e:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
    cc82:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3160
      cnt++;
    cc84:	f3 94       	inc	r15
    cc86:	c0 cf       	rjmp	.-128    	; 0xcc08 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3164
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    cc88:	68 e6       	ldi	r22, 0x68	; 104
    cc8a:	72 e3       	ldi	r23, 0x32	; 50
    cc8c:	c5 01       	movw	r24, r10
    cc8e:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3165
  strcat(str1, device.nazev);
    cc92:	63 e3       	ldi	r22, 0x33	; 51
    cc94:	7c e0       	ldi	r23, 0x0C	; 12
    cc96:	c5 01       	movw	r24, r10
    cc98:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3166
  strcat(str1, "/prog/clear");
    cc9c:	67 ec       	ldi	r22, 0xC7	; 199
    cc9e:	74 e0       	ldi	r23, 0x04	; 4
    cca0:	c5 01       	movw	r24, r10
    cca2:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3167
  if (strncmp(str1, topic, strlen(str1)) == 0)
    cca6:	f5 01       	movw	r30, r10
    cca8:	01 90       	ld	r0, Z+
    ccaa:	00 20       	and	r0, r0
    ccac:	e9 f7       	brne	.-6      	; 0xcca8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcf2>
    ccae:	31 97       	sbiw	r30, 0x01	; 1
    ccb0:	af 01       	movw	r20, r30
    ccb2:	4a 19       	sub	r20, r10
    ccb4:	5b 09       	sbc	r21, r11
    ccb6:	b4 01       	movw	r22, r8
    ccb8:	c5 01       	movw	r24, r10
    ccba:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    ccbe:	89 2b       	or	r24, r25
    ccc0:	09 f0       	breq	.+2      	; 0xccc4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd0e>
    ccc2:	52 c0       	rjmp	.+164    	; 0xcd68 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3169
  {
    mqtt_process_message++;
    ccc4:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    ccc8:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    cccc:	01 96       	adiw	r24, 0x01	; 1
    ccce:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    ccd2:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3170
    id = atoi(my_payload);
    ccd6:	89 ed       	ldi	r24, 0xD9	; 217
    ccd8:	9a e0       	ldi	r25, 0x0A	; 10
    ccda:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    ccde:	18 2f       	mov	r17, r24
    cce0:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3171
    if (id < AVAILABLE_PROGRAM)
    cce2:	a7 e0       	ldi	r26, 0x07	; 7
    cce4:	a8 17       	cp	r26, r24
    cce6:	08 f4       	brcc	.+2      	; 0xccea <mqtt_callback(char*, unsigned char*, unsigned int)+0xd34>
    cce8:	89 c0       	rjmp	.+274    	; 0xcdfc <mqtt_callback(char*, unsigned char*, unsigned int)+0xe46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3173
    {
      strcpy(tmp2, "PROG");
    ccea:	63 ed       	ldi	r22, 0xD3	; 211
    ccec:	74 e0       	ldi	r23, 0x04	; 4
    ccee:	ce 01       	movw	r24, r28
    ccf0:	88 57       	subi	r24, 0x78	; 120
    ccf2:	9f 4f       	sbci	r25, 0xFF	; 255
    ccf4:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3174
      thermostat_program_set_name(id, tmp2);
    ccf8:	be 01       	movw	r22, r28
    ccfa:	68 57       	subi	r22, 0x78	; 120
    ccfc:	7f 4f       	sbci	r23, 0xFF	; 255
    ccfe:	81 2f       	mov	r24, r17
    cd00:	0e 94 4e 50 	call	0xa09c	; 0xa09c <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
    cd04:	bd e4       	ldi	r27, 0x4D	; 77
    cd06:	1b 9f       	mul	r17, r27
    cd08:	c0 01       	movw	r24, r0
    cd0a:	11 24       	eor	r1, r1
    cd0c:	60 e0       	ldi	r22, 0x00	; 0
    cd0e:	8f 50       	subi	r24, 0x0F	; 15
    cd10:	9e 4f       	sbci	r25, 0xFE	; 254
    cd12:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3176
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    cd16:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3178
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    cd18:	c1 2c       	mov	r12, r1
    cd1a:	e1 2c       	mov	r14, r1
    cd1c:	00 e0       	ldi	r16, 0x00	; 0
    cd1e:	20 e0       	ldi	r18, 0x00	; 0
    cd20:	40 e0       	ldi	r20, 0x00	; 0
    cd22:	61 2f       	mov	r22, r17
    cd24:	87 2d       	mov	r24, r7
    cd26:	0e 94 12 50 	call	0xa024	; 0xa024 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3179
        thermostat_program_set_threshold(id, progid, 220);
    cd2a:	4c ed       	ldi	r20, 0xDC	; 220
    cd2c:	50 e0       	ldi	r21, 0x00	; 0
    cd2e:	61 2f       	mov	r22, r17
    cd30:	87 2d       	mov	r24, r7
    cd32:	0e 94 f6 4f 	call	0x9fec	; 0x9fec <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3180
        thermostat_program_set_week(id, progid, 0);
    cd36:	40 e0       	ldi	r20, 0x00	; 0
    cd38:	61 2f       	mov	r22, r17
    cd3a:	87 2d       	mov	r24, r7
    cd3c:	0e 94 e8 4f 	call	0x9fd0	; 0x9fd0 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3176
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy(tmp2, "PROG");
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    cd40:	1f 5f       	subi	r17, 0xFF	; 255
    cd42:	1b 30       	cpi	r17, 0x0B	; 11
    cd44:	49 f7       	brne	.-46     	; 0xcd18 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd62>
    cd46:	0b e5       	ldi	r16, 0x5B	; 91
    cd48:	11 e0       	ldi	r17, 0x01	; 1
thermostat_ring_get_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
    cd4a:	c8 01       	movw	r24, r16
    cd4c:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3184
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
    cd50:	78 12       	cpse	r7, r24
    cd52:	04 c0       	rjmp	.+8      	; 0xcd5c <mqtt_callback(char*, unsigned char*, unsigned int)+0xda6>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    cd54:	6f ef       	ldi	r22, 0xFF	; 255
    cd56:	c8 01       	movw	r24, r16
    cd58:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    cd5c:	0f 5d       	subi	r16, 0xDF	; 223
    cd5e:	1f 4f       	sbci	r17, 0xFF	; 255
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3182
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    cd60:	01 15       	cp	r16, r1
    cd62:	e2 e0       	ldi	r30, 0x02	; 2
    cd64:	1e 07       	cpc	r17, r30
    cd66:	89 f7       	brne	.-30     	; 0xcd4a <mqtt_callback(char*, unsigned char*, unsigned int)+0xd94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3196
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    cd68:	68 e6       	ldi	r22, 0x68	; 104
    cd6a:	72 e3       	ldi	r23, 0x32	; 50
    cd6c:	c5 01       	movw	r24, r10
    cd6e:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3197
  strcat(str1, device.nazev);
    cd72:	63 e3       	ldi	r22, 0x33	; 51
    cd74:	7c e0       	ldi	r23, 0x0C	; 12
    cd76:	c5 01       	movw	r24, r10
    cd78:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3198
  strcat(str1, "/prog_interval/set/");
    cd7c:	6a ee       	ldi	r22, 0xEA	; 234
    cd7e:	74 e0       	ldi	r23, 0x04	; 4
    cd80:	c5 01       	movw	r24, r10
    cd82:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3199
  if (strncmp(str1, topic, strlen(str1)) == 0)
    cd86:	f5 01       	movw	r30, r10
    cd88:	01 90       	ld	r0, Z+
    cd8a:	00 20       	and	r0, r0
    cd8c:	e9 f7       	brne	.-6      	; 0xcd88 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdd2>
    cd8e:	31 97       	sbiw	r30, 0x01	; 1
    cd90:	af 01       	movw	r20, r30
    cd92:	4a 19       	sub	r20, r10
    cd94:	5b 09       	sbc	r21, r11
    cd96:	b4 01       	movw	r22, r8
    cd98:	c5 01       	movw	r24, r10
    cd9a:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    cd9e:	89 2b       	or	r24, r25
    cda0:	09 f0       	breq	.+2      	; 0xcda4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdee>
    cda2:	04 c1       	rjmp	.+520    	; 0xcfac <mqtt_callback(char*, unsigned char*, unsigned int)+0xff6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3201
  {
    mqtt_process_message++;
    cda4:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    cda8:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    cdac:	01 96       	adiw	r24, 0x01	; 1
    cdae:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    cdb2:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3203
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cdb6:	f5 01       	movw	r30, r10
    cdb8:	01 90       	ld	r0, Z+
    cdba:	00 20       	and	r0, r0
    cdbc:	e9 f7       	brne	.-6      	; 0xcdb8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe02>
    cdbe:	31 97       	sbiw	r30, 0x01	; 1
    cdc0:	ea 19       	sub	r30, r10
    cdc2:	fb 09       	sbc	r31, r11
    cdc4:	9e 2f       	mov	r25, r30
    cdc6:	4e 2f       	mov	r20, r30
    cdc8:	84 2f       	mov	r24, r20
    cdca:	89 1b       	sub	r24, r25
    cdcc:	24 2f       	mov	r18, r20
    cdce:	30 e0       	ldi	r19, 0x00	; 0
    cdd0:	d4 01       	movw	r26, r8
    cdd2:	0d 90       	ld	r0, X+
    cdd4:	00 20       	and	r0, r0
    cdd6:	e9 f7       	brne	.-6      	; 0xcdd2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe1c>
    cdd8:	11 97       	sbiw	r26, 0x01	; 1
    cdda:	a8 19       	sub	r26, r8
    cddc:	b9 09       	sbc	r27, r9
    cdde:	2a 17       	cp	r18, r26
    cde0:	3b 07       	cpc	r19, r27
    cde2:	88 f4       	brcc	.+34     	; 0xce06 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3205
    {
      str1[cnt] = topic[f];
    cde4:	d5 01       	movw	r26, r10
    cde6:	a8 0f       	add	r26, r24
    cde8:	b1 1d       	adc	r27, r1
    cdea:	28 0d       	add	r18, r8
    cdec:	39 1d       	adc	r19, r9
    cdee:	f9 01       	movw	r30, r18
    cdf0:	80 81       	ld	r24, Z
    cdf2:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3206
      str1[cnt + 1] = 0;
    cdf4:	11 96       	adiw	r26, 0x01	; 1
    cdf6:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3203
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cdf8:	4f 5f       	subi	r20, 0xFF	; 255
    cdfa:	e6 cf       	rjmp	.-52     	; 0xcdc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3192
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    cdfc:	88 ed       	ldi	r24, 0xD8	; 216
    cdfe:	94 e0       	ldi	r25, 0x04	; 4
    ce00:	0e 94 7b 88 	call	0x110f6	; 0x110f6 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    ce04:	b1 cf       	rjmp	.-158    	; 0xcd68 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3210
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    ce06:	69 ed       	ldi	r22, 0xD9	; 217
    ce08:	73 e0       	ldi	r23, 0x03	; 3
    ce0a:	c5 01       	movw	r24, r10
    ce0c:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
    ce10:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2897
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    ce12:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3209
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    ce14:	d1 2c       	mov	r13, r1
thermostat_program_get_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:302


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    ce16:	e6 e0       	ldi	r30, 0x06	; 6
    ce18:	3e 2e       	mov	r3, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:305
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
  *start_hour = (start >> 3) & 0b00011111;
  *start_min = (start >> 1 & 0b00000011) * 15;
    ce1a:	ff e0       	ldi	r31, 0x0F	; 15
    ce1c:	6f 2e       	mov	r6, r31
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3211
    pch = strtok (str1, "/");
    while (pch != NULL)
    ce1e:	41 14       	cp	r4, r1
    ce20:	51 04       	cpc	r5, r1
    ce22:	09 f4       	brne	.+2      	; 0xce26 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe70>
    ce24:	c3 c0       	rjmp	.+390    	; 0xcfac <mqtt_callback(char*, unsigned char*, unsigned int)+0xff6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3213
    {
      if (cnt == 0) id = atoi(pch);
    ce26:	d1 10       	cpse	r13, r1
    ce28:	7f c0       	rjmp	.+254    	; 0xcf28 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf72>
    ce2a:	c2 01       	movw	r24, r4
    ce2c:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    ce30:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3215
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    ce32:	27 e0       	ldi	r18, 0x07	; 7
    ce34:	27 15       	cp	r18, r7
    ce36:	08 f4       	brcc	.+2      	; 0xce3a <mqtt_callback(char*, unsigned char*, unsigned int)+0xe84>
    ce38:	b4 c0       	rjmp	.+360    	; 0xcfa2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfec>
    ce3a:	1b 30       	cpi	r17, 0x0B	; 11
    ce3c:	08 f0       	brcs	.+2      	; 0xce40 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe8a>
    ce3e:	b1 c0       	rjmp	.+354    	; 0xcfa2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3217
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    ce40:	82 e0       	ldi	r24, 0x02	; 2
    ce42:	d8 12       	cpse	r13, r24
    ce44:	a5 c0       	rjmp	.+330    	; 0xcf90 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
    ce46:	6c eb       	ldi	r22, 0xBC	; 188
    ce48:	73 e0       	ldi	r23, 0x03	; 3
    ce4a:	c2 01       	movw	r24, r4
    ce4c:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    ce50:	89 2b       	or	r24, r25
    ce52:	b1 f5       	brne	.+108    	; 0xcec0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf0a>
    ce54:	89 ed       	ldi	r24, 0xD9	; 217
    ce56:	9a e0       	ldi	r25, 0x0A	; 10
    ce58:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    ce5c:	c8 2e       	mov	r12, r24
thermostat_program_get_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:302


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    ce5e:	ad e4       	ldi	r26, 0x4D	; 77
    ce60:	7a 9e       	mul	r7, r26
    ce62:	70 01       	movw	r14, r0
    ce64:	11 24       	eor	r1, r1
    ce66:	bf e0       	ldi	r27, 0x0F	; 15
    ce68:	eb 1a       	sub	r14, r27
    ce6a:	be ef       	ldi	r27, 0xFE	; 254
    ce6c:	fb 0a       	sbc	r15, r27
    ce6e:	13 9d       	mul	r17, r3
    ce70:	e0 0c       	add	r14, r0
    ce72:	f1 1c       	adc	r15, r1
    ce74:	11 24       	eor	r1, r1
    ce76:	c7 01       	movw	r24, r14
    ce78:	02 96       	adiw	r24, 0x02	; 2
    ce7a:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ce7e:	28 2e       	mov	r2, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
    ce80:	c7 01       	movw	r24, r14
    ce82:	03 96       	adiw	r24, 0x03	; 3
    ce84:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
    ce88:	42 2d       	mov	r20, r2
    ce8a:	46 95       	lsr	r20
    ce8c:	46 95       	lsr	r20
    ce8e:	46 95       	lsr	r20
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
    ce90:	22 2d       	mov	r18, r2
    ce92:	30 e0       	ldi	r19, 0x00	; 0
    ce94:	35 95       	asr	r19
    ce96:	27 95       	ror	r18
    ce98:	23 70       	andi	r18, 0x03	; 3
    ce9a:	26 9d       	mul	r18, r6
    ce9c:	20 2d       	mov	r18, r0
    ce9e:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
    cea0:	08 2f       	mov	r16, r24
    cea2:	06 95       	lsr	r16
    cea4:	06 95       	lsr	r16
    cea6:	06 95       	lsr	r16
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
    cea8:	83 70       	andi	r24, 0x03	; 3
    ceaa:	86 9d       	mul	r24, r6
    ceac:	e0 2c       	mov	r14, r0
    ceae:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
    ceb0:	82 2d       	mov	r24, r2
    ceb2:	81 70       	andi	r24, 0x01	; 1
thermostat_program_set_interval_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:380
/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
  if (active != set_active)
    ceb4:	c8 16       	cp	r12, r24
    ceb6:	21 f0       	breq	.+8      	; 0xcec0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf0a>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
    ceb8:	61 2f       	mov	r22, r17
    ceba:	87 2d       	mov	r24, r7
    cebc:	0e 94 12 50 	call	0xa024	; 0xa024 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3218
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
    cec0:	6b e4       	ldi	r22, 0x4B	; 75
    cec2:	76 e0       	ldi	r23, 0x06	; 6
    cec4:	c2 01       	movw	r24, r4
    cec6:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    ceca:	89 2b       	or	r24, r25
    cecc:	49 f4       	brne	.+18     	; 0xcee0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf2a>
    cece:	89 ed       	ldi	r24, 0xD9	; 217
    ced0:	9a e0       	ldi	r25, 0x0A	; 10
    ced2:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    ced6:	ac 01       	movw	r20, r24
    ced8:	61 2f       	mov	r22, r17
    ceda:	87 2d       	mov	r24, r7
    cedc:	0e 94 f6 4f 	call	0x9fec	; 0x9fec <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3219
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
    cee0:	63 e9       	ldi	r22, 0x93	; 147
    cee2:	76 e0       	ldi	r23, 0x06	; 6
    cee4:	c2 01       	movw	r24, r4
    cee6:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    ceea:	89 2b       	or	r24, r25
    ceec:	09 f0       	breq	.+2      	; 0xcef0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf3a>
    ceee:	50 c0       	rjmp	.+160    	; 0xcf90 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:343
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
    cef0:	6e ef       	ldi	r22, 0xFE	; 254
    cef2:	74 e0       	ldi	r23, 0x04	; 4
    cef4:	89 ed       	ldi	r24, 0xD9	; 217
    cef6:	9a e0       	ldi	r25, 0x0A	; 10
    cef8:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
    cefc:	f1 2c       	mov	r15, r1
    cefe:	c1 2c       	mov	r12, r1
    cf00:	e1 2c       	mov	r14, r1
    cf02:	21 2c       	mov	r2, r1
    cf04:	41 2c       	mov	r4, r1
    cf06:	51 2c       	mov	r5, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
    cf08:	00 e0       	ldi	r16, 0x00	; 0
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
    cf0a:	00 97       	sbiw	r24, 0x00	; 0
    cf0c:	99 f1       	breq	.+102    	; 0xcf74 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfbe>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
    cf0e:	01 11       	cpse	r16, r1
    cf10:	13 c0       	rjmp	.+38     	; 0xcf38 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf82>
    cf12:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    cf16:	58 2e       	mov	r5, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
    cf18:	6e ef       	ldi	r22, 0xFE	; 254
    cf1a:	74 e0       	ldi	r23, 0x04	; 4
    cf1c:	90 e0       	ldi	r25, 0x00	; 0
    cf1e:	80 e0       	ldi	r24, 0x00	; 0
    cf20:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:354
    cnt++;
    cf24:	0f 5f       	subi	r16, 0xFF	; 255
    cf26:	f1 cf       	rjmp	.-30     	; 0xcf0a <mqtt_callback(char*, unsigned char*, unsigned int)+0xf54>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3214
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
    cf28:	f1 e0       	ldi	r31, 0x01	; 1
    cf2a:	df 12       	cpse	r13, r31
    cf2c:	82 cf       	rjmp	.-252    	; 0xce32 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
    cf2e:	c2 01       	movw	r24, r4
    cf30:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    cf34:	18 2f       	mov	r17, r24
    cf36:	7d cf       	rjmp	.-262    	; 0xce32 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:347
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
    cf38:	01 30       	cpi	r16, 0x01	; 1
    cf3a:	21 f4       	brne	.+8      	; 0xcf44 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf8e>
    cf3c:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    cf40:	48 2e       	mov	r4, r24
    cf42:	ea cf       	rjmp	.-44     	; 0xcf18 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
    cf44:	02 30       	cpi	r16, 0x02	; 2
    cf46:	21 f4       	brne	.+8      	; 0xcf50 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf9a>
    cf48:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    cf4c:	28 2e       	mov	r2, r24
    cf4e:	e4 cf       	rjmp	.-56     	; 0xcf18 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
    cf50:	03 30       	cpi	r16, 0x03	; 3
    cf52:	21 f4       	brne	.+8      	; 0xcf5c <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa6>
    cf54:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    cf58:	e8 2e       	mov	r14, r24
    cf5a:	de cf       	rjmp	.-68     	; 0xcf18 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
    cf5c:	04 30       	cpi	r16, 0x04	; 4
    cf5e:	21 f4       	brne	.+8      	; 0xcf68 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfb2>
    cf60:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    cf64:	f8 2e       	mov	r15, r24
    cf66:	d8 cf       	rjmp	.-80     	; 0xcf18 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
    cf68:	05 30       	cpi	r16, 0x05	; 5
    cf6a:	b1 f6       	brne	.-84     	; 0xcf18 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
    cf6c:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    cf70:	c8 2e       	mov	r12, r24
    cf72:	d2 cf       	rjmp	.-92     	; 0xcf18 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
    cf74:	06 30       	cpi	r16, 0x06	; 6
    cf76:	61 f4       	brne	.+24     	; 0xcf90 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    cf78:	02 2d       	mov	r16, r2
    cf7a:	24 2d       	mov	r18, r4
    cf7c:	45 2d       	mov	r20, r5
    cf7e:	61 2f       	mov	r22, r17
    cf80:	87 2d       	mov	r24, r7
    cf82:	0e 94 12 50 	call	0xa024	; 0xa024 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
    cf86:	4f 2d       	mov	r20, r15
    cf88:	61 2f       	mov	r22, r17
    cf8a:	87 2d       	mov	r24, r7
    cf8c:	0e 94 e8 4f 	call	0x9fd0	; 0x9fd0 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3225
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
      }
      pch = strtok (NULL, "/");
    cf90:	69 ed       	ldi	r22, 0xD9	; 217
    cf92:	73 e0       	ldi	r23, 0x03	; 3
    cf94:	90 e0       	ldi	r25, 0x00	; 0
    cf96:	80 e0       	ldi	r24, 0x00	; 0
    cf98:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
    cf9c:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3226
      cnt++;
    cf9e:	d3 94       	inc	r13
    cfa0:	3e cf       	rjmp	.-388    	; 0xce1e <mqtt_callback(char*, unsigned char*, unsigned int)+0xe68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3223
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
    cfa2:	80 e0       	ldi	r24, 0x00	; 0
    cfa4:	95 e0       	ldi	r25, 0x05	; 5
    cfa6:	0e 94 7b 88 	call	0x110f6	; 0x110f6 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    cfaa:	f2 cf       	rjmp	.-28     	; 0xcf90 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3231
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
    cfac:	68 e6       	ldi	r22, 0x68	; 104
    cfae:	72 e3       	ldi	r23, 0x32	; 50
    cfb0:	c5 01       	movw	r24, r10
    cfb2:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3232
  strcat(str1, device.nazev);
    cfb6:	63 e3       	ldi	r22, 0x33	; 51
    cfb8:	7c e0       	ldi	r23, 0x0C	; 12
    cfba:	c5 01       	movw	r24, r10
    cfbc:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3233
  strcat(str1, "/ring/default");
    cfc0:	69 e1       	ldi	r22, 0x19	; 25
    cfc2:	75 e0       	ldi	r23, 0x05	; 5
    cfc4:	c5 01       	movw	r24, r10
    cfc6:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3234
  if (strcmp(str1, topic) == 0)
    cfca:	b4 01       	movw	r22, r8
    cfcc:	c5 01       	movw	r24, r10
    cfce:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    cfd2:	89 2b       	or	r24, r25
    cfd4:	a1 f4       	brne	.+40     	; 0xcffe <mqtt_callback(char*, unsigned char*, unsigned int)+0x1048>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3236
  {
    mqtt_process_message++;
    cfd6:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    cfda:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    cfde:	01 96       	adiw	r24, 0x01	; 1
    cfe0:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    cfe4:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3237
    default_ring = atoi(my_payload);
    cfe8:	89 ed       	ldi	r24, 0xD9	; 217
    cfea:	9a e0       	ldi	r25, 0x0A	; 10
    cfec:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    cff0:	80 93 0c 0a 	sts	0x0A0C, r24	; 0x800a0c <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2832
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    cff4:	68 2f       	mov	r22, r24
    cff6:	8c e5       	ldi	r24, 0x5C	; 92
    cff8:	90 e0       	ldi	r25, 0x00	; 0
    cffa:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3242
    default_ring = atoi(my_payload);
    set_default_ring(default_ring);
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
    cffe:	68 e6       	ldi	r22, 0x68	; 104
    d000:	72 e3       	ldi	r23, 0x32	; 50
    d002:	c5 01       	movw	r24, r10
    d004:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3243
  strcat(str1, device.nazev);
    d008:	63 e3       	ldi	r22, 0x33	; 51
    d00a:	7c e0       	ldi	r23, 0x0C	; 12
    d00c:	c5 01       	movw	r24, r10
    d00e:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3244
  strcat(str1, "/ring/get/");
    d012:	67 e2       	ldi	r22, 0x27	; 39
    d014:	75 e0       	ldi	r23, 0x05	; 5
    d016:	c5 01       	movw	r24, r10
    d018:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3245
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d01c:	f5 01       	movw	r30, r10
    d01e:	01 90       	ld	r0, Z+
    d020:	00 20       	and	r0, r0
    d022:	e9 f7       	brne	.-6      	; 0xd01e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1068>
    d024:	31 97       	sbiw	r30, 0x01	; 1
    d026:	8f 01       	movw	r16, r30
    d028:	0a 19       	sub	r16, r10
    d02a:	1b 09       	sbc	r17, r11
    d02c:	a8 01       	movw	r20, r16
    d02e:	b4 01       	movw	r22, r8
    d030:	c5 01       	movw	r24, r10
    d032:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    d036:	89 2b       	or	r24, r25
    d038:	09 f0       	breq	.+2      	; 0xd03c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1086>
    d03a:	9c c0       	rjmp	.+312    	; 0xd174 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3248
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d03c:	90 2f       	mov	r25, r16
    d03e:	80 2f       	mov	r24, r16
    d040:	89 1b       	sub	r24, r25
    d042:	20 2f       	mov	r18, r16
    d044:	30 e0       	ldi	r19, 0x00	; 0
    d046:	f4 01       	movw	r30, r8
    d048:	01 90       	ld	r0, Z+
    d04a:	00 20       	and	r0, r0
    d04c:	e9 f7       	brne	.-6      	; 0xd048 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1092>
    d04e:	31 97       	sbiw	r30, 0x01	; 1
    d050:	e8 19       	sub	r30, r8
    d052:	f9 09       	sbc	r31, r9
    d054:	2e 17       	cp	r18, r30
    d056:	3f 07       	cpc	r19, r31
    d058:	58 f4       	brcc	.+22     	; 0xd070 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3250
    {
      str1[cnt] = topic[f];
    d05a:	f5 01       	movw	r30, r10
    d05c:	e8 0f       	add	r30, r24
    d05e:	f1 1d       	adc	r31, r1
    d060:	28 0d       	add	r18, r8
    d062:	39 1d       	adc	r19, r9
    d064:	d9 01       	movw	r26, r18
    d066:	8c 91       	ld	r24, X
    d068:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3251
      str1[cnt + 1] = 0;
    d06a:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3248
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d06c:	0f 5f       	subi	r16, 0xFF	; 255
    d06e:	e7 cf       	rjmp	.-50     	; 0xd03e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1088>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3255
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    d070:	69 ed       	ldi	r22, 0xD9	; 217
    d072:	73 e0       	ldi	r23, 0x03	; 3
    d074:	c5 01       	movw	r24, r10
    d076:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3254
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    d07a:	61 2c       	mov	r6, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3256
    pch = strtok (str1, "/");
    while (pch != NULL)
    d07c:	00 97       	sbiw	r24, 0x00	; 0
    d07e:	09 f4       	brne	.+2      	; 0xd082 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10cc>
    d080:	79 c0       	rjmp	.+242    	; 0xd174 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3258
    {
      if (cnt == 0) id = atoi(my_payload);
    d082:	61 10       	cpse	r6, r1
    d084:	0e c0       	rjmp	.+28     	; 0xd0a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ec>
    d086:	89 ed       	ldi	r24, 0xD9	; 217
    d088:	9a e0       	ldi	r25, 0x0A	; 10
    d08a:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    d08e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3259
      if (id < MAX_THERMOSTAT)
    d090:	b4 e0       	ldi	r27, 0x04	; 4
    d092:	b8 17       	cp	r27, r24
    d094:	08 f0       	brcs	.+2      	; 0xd098 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10e2>
    d096:	66 c0       	rjmp	.+204    	; 0xd164 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3265
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    d098:	86 e3       	ldi	r24, 0x36	; 54
    d09a:	95 e0       	ldi	r25, 0x05	; 5
    d09c:	0e 94 7b 88 	call	0x110f6	; 0x110f6 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    d0a0:	61 c0       	rjmp	.+194    	; 0xd164 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3259
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
    d0a2:	e4 e0       	ldi	r30, 0x04	; 4
    d0a4:	e7 15       	cp	r30, r7
    d0a6:	c0 f3       	brcs	.-16     	; 0xd098 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3261
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
    d0a8:	f1 e0       	ldi	r31, 0x01	; 1
    d0aa:	6f 12       	cpse	r6, r31
    d0ac:	5b c0       	rjmp	.+182    	; 0xd164 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
    d0ae:	62 e3       	ldi	r22, 0x32	; 50
    d0b0:	75 e0       	ldi	r23, 0x05	; 5
    d0b2:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d0b6:	89 2b       	or	r24, r25
    d0b8:	09 f0       	breq	.+2      	; 0xd0bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1106>
    d0ba:	54 c0       	rjmp	.+168    	; 0xd164 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
thermostat_get_pid_p():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    d0bc:	c7 2c       	mov	r12, r7
    d0be:	d1 2c       	mov	r13, r1
    d0c0:	76 01       	movw	r14, r12
    d0c2:	ee 0c       	add	r14, r14
    d0c4:	ff 1c       	adc	r15, r15
    d0c6:	ee 0c       	add	r14, r14
    d0c8:	ff 1c       	adc	r15, r15
    d0ca:	f7 01       	movw	r30, r14
    d0cc:	eb 58       	subi	r30, 0x8B	; 139
    d0ce:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3817
   /thermctl-out/XXXXX/pid/IDX/kd
*/
void mqtt_send_pid_variable(uint8_t idx)
{
  char payload[32];
  dtostrf(thermostat_get_pid_p(idx), 7, 2, payload);
    d0d0:	60 81       	ld	r22, Z
    d0d2:	71 81       	ldd	r23, Z+1	; 0x01
    d0d4:	82 81       	ldd	r24, Z+2	; 0x02
    d0d6:	93 81       	ldd	r25, Z+3	; 0x03
    d0d8:	8e 01       	movw	r16, r28
    d0da:	08 5b       	subi	r16, 0xB8	; 184
    d0dc:	1f 4f       	sbci	r17, 0xFF	; 255
    d0de:	22 e0       	ldi	r18, 0x02	; 2
    d0e0:	47 e0       	ldi	r20, 0x07	; 7
    d0e2:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3818
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kp", payload);
    d0e6:	98 01       	movw	r18, r16
    d0e8:	4e e7       	ldi	r20, 0x7E	; 126
    d0ea:	56 e0       	ldi	r21, 0x06	; 6
    d0ec:	67 2d       	mov	r22, r7
    d0ee:	82 e3       	ldi	r24, 0x32	; 50
    d0f0:	95 e0       	ldi	r25, 0x05	; 5
    d0f2:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_i():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    d0f6:	f7 01       	movw	r30, r14
    d0f8:	e7 57       	subi	r30, 0x77	; 119
    d0fa:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3819
  dtostrf(thermostat_get_pid_i(idx), 7, 2, payload);
    d0fc:	60 81       	ld	r22, Z
    d0fe:	71 81       	ldd	r23, Z+1	; 0x01
    d100:	82 81       	ldd	r24, Z+2	; 0x02
    d102:	93 81       	ldd	r25, Z+3	; 0x03
    d104:	22 e0       	ldi	r18, 0x02	; 2
    d106:	47 e0       	ldi	r20, 0x07	; 7
    d108:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3820
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "ki", payload);
    d10c:	98 01       	movw	r18, r16
    d10e:	45 e8       	ldi	r20, 0x85	; 133
    d110:	56 e0       	ldi	r21, 0x06	; 6
    d112:	67 2d       	mov	r22, r7
    d114:	82 e3       	ldi	r24, 0x32	; 50
    d116:	95 e0       	ldi	r25, 0x05	; 5
    d118:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_d():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    d11c:	f7 01       	movw	r30, r14
    d11e:	e3 56       	subi	r30, 0x63	; 99
    d120:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3821
  dtostrf(thermostat_get_pid_d(idx), 7, 2, payload);
    d122:	60 81       	ld	r22, Z
    d124:	71 81       	ldd	r23, Z+1	; 0x01
    d126:	82 81       	ldd	r24, Z+2	; 0x02
    d128:	93 81       	ldd	r25, Z+3	; 0x03
    d12a:	22 e0       	ldi	r18, 0x02	; 2
    d12c:	47 e0       	ldi	r20, 0x07	; 7
    d12e:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3822
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kd", payload);
    d132:	98 01       	movw	r18, r16
    d134:	4c e8       	ldi	r20, 0x8C	; 140
    d136:	56 e0       	ldi	r21, 0x06	; 6
    d138:	67 2d       	mov	r22, r7
    d13a:	82 e3       	ldi	r24, 0x32	; 50
    d13c:	95 e0       	ldi	r25, 0x05	; 5
    d13e:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    d142:	f6 01       	movw	r30, r12
    d144:	ef 54       	subi	r30, 0x4F	; 79
    d146:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3823
  itoa(thermostat_get_pid_time(idx), payload, 10);
    d148:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    d14a:	4a e0       	ldi	r20, 0x0A	; 10
    d14c:	b8 01       	movw	r22, r16
    d14e:	90 e0       	ldi	r25, 0x00	; 0
    d150:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3824
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "time", payload);
    d154:	98 01       	movw	r18, r16
    d156:	43 e9       	ldi	r20, 0x93	; 147
    d158:	56 e0       	ldi	r21, 0x06	; 6
    d15a:	67 2d       	mov	r22, r7
    d15c:	82 e3       	ldi	r24, 0x32	; 50
    d15e:	95 e0       	ldi	r25, 0x05	; 5
    d160:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3267
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    d164:	69 ed       	ldi	r22, 0xD9	; 217
    d166:	73 e0       	ldi	r23, 0x03	; 3
    d168:	90 e0       	ldi	r25, 0x00	; 0
    d16a:	80 e0       	ldi	r24, 0x00	; 0
    d16c:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3268
      cnt++;
    d170:	63 94       	inc	r6
    d172:	84 cf       	rjmp	.-248    	; 0xd07c <mqtt_callback(char*, unsigned char*, unsigned int)+0x10c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3287
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
    d174:	68 e6       	ldi	r22, 0x68	; 104
    d176:	72 e3       	ldi	r23, 0x32	; 50
    d178:	c5 01       	movw	r24, r10
    d17a:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3288
  strcat(str1, device.nazev);
    d17e:	63 e3       	ldi	r22, 0x33	; 51
    d180:	7c e0       	ldi	r23, 0x0C	; 12
    d182:	c5 01       	movw	r24, r10
    d184:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3289
  strcat(str1, "/ring/set/");
    d188:	66 e4       	ldi	r22, 0x46	; 70
    d18a:	75 e0       	ldi	r23, 0x05	; 5
    d18c:	c5 01       	movw	r24, r10
    d18e:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3290
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d192:	f5 01       	movw	r30, r10
    d194:	01 90       	ld	r0, Z+
    d196:	00 20       	and	r0, r0
    d198:	e9 f7       	brne	.-6      	; 0xd194 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11de>
    d19a:	31 97       	sbiw	r30, 0x01	; 1
    d19c:	8f 01       	movw	r16, r30
    d19e:	0a 19       	sub	r16, r10
    d1a0:	1b 09       	sbc	r17, r11
    d1a2:	a8 01       	movw	r20, r16
    d1a4:	b4 01       	movw	r22, r8
    d1a6:	c5 01       	movw	r24, r10
    d1a8:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    d1ac:	89 2b       	or	r24, r25
    d1ae:	09 f0       	breq	.+2      	; 0xd1b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11fc>
    d1b0:	c8 c1       	rjmp	.+912    	; 0xd542 <mqtt_callback(char*, unsigned char*, unsigned int)+0x158c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3293
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d1b2:	90 2f       	mov	r25, r16
    d1b4:	80 2f       	mov	r24, r16
    d1b6:	89 1b       	sub	r24, r25
    d1b8:	20 2f       	mov	r18, r16
    d1ba:	30 e0       	ldi	r19, 0x00	; 0
    d1bc:	f4 01       	movw	r30, r8
    d1be:	01 90       	ld	r0, Z+
    d1c0:	00 20       	and	r0, r0
    d1c2:	e9 f7       	brne	.-6      	; 0xd1be <mqtt_callback(char*, unsigned char*, unsigned int)+0x1208>
    d1c4:	31 97       	sbiw	r30, 0x01	; 1
    d1c6:	e8 19       	sub	r30, r8
    d1c8:	f9 09       	sbc	r31, r9
    d1ca:	2e 17       	cp	r18, r30
    d1cc:	3f 07       	cpc	r19, r31
    d1ce:	58 f4       	brcc	.+22     	; 0xd1e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1230>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3295
    {
      str1[cnt] = topic[f];
    d1d0:	f5 01       	movw	r30, r10
    d1d2:	e8 0f       	add	r30, r24
    d1d4:	f1 1d       	adc	r31, r1
    d1d6:	28 0d       	add	r18, r8
    d1d8:	39 1d       	adc	r19, r9
    d1da:	d9 01       	movw	r26, r18
    d1dc:	8c 91       	ld	r24, X
    d1de:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3296
      str1[cnt + 1] = 0;
    d1e0:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3293
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d1e2:	0f 5f       	subi	r16, 0xFF	; 255
    d1e4:	e7 cf       	rjmp	.-50     	; 0xd1b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3300
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    d1e6:	69 ed       	ldi	r22, 0xD9	; 217
    d1e8:	73 e0       	ldi	r23, 0x03	; 3
    d1ea:	c5 01       	movw	r24, r10
    d1ec:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
    d1f0:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3299
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    d1f2:	d1 2c       	mov	r13, r1
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    d1f4:	51 e2       	ldi	r21, 0x21	; 33
    d1f6:	e5 2e       	mov	r14, r21
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3301
    pch = strtok (str1, "/");
    while (pch != NULL)
    d1f8:	01 15       	cp	r16, r1
    d1fa:	11 05       	cpc	r17, r1
    d1fc:	09 f4       	brne	.+2      	; 0xd200 <mqtt_callback(char*, unsigned char*, unsigned int)+0x124a>
    d1fe:	a1 c1       	rjmp	.+834    	; 0xd542 <mqtt_callback(char*, unsigned char*, unsigned int)+0x158c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3303
    {
      if (cnt == 0) id = atoi(pch);
    d200:	d1 10       	cpse	r13, r1
    d202:	0d c0       	rjmp	.+26     	; 0xd21e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1268>
    d204:	c8 01       	movw	r24, r16
    d206:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    d20a:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3304
      if (id < MAX_THERMOSTAT)
    d20c:	b4 e0       	ldi	r27, 0x04	; 4
    d20e:	b8 17       	cp	r27, r24
    d210:	08 f0       	brcs	.+2      	; 0xd214 <mqtt_callback(char*, unsigned char*, unsigned int)+0x125e>
    d212:	8e c1       	rjmp	.+796    	; 0xd530 <mqtt_callback(char*, unsigned char*, unsigned int)+0x157a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3341
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    d214:	86 e3       	ldi	r24, 0x36	; 54
    d216:	95 e0       	ldi	r25, 0x05	; 5
    d218:	0e 94 7b 88 	call	0x110f6	; 0x110f6 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    d21c:	89 c1       	rjmp	.+786    	; 0xd530 <mqtt_callback(char*, unsigned char*, unsigned int)+0x157a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3304
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
    d21e:	e4 e0       	ldi	r30, 0x04	; 4
    d220:	e7 15       	cp	r30, r7
    d222:	c0 f3       	brcs	.-16     	; 0xd214 <mqtt_callback(char*, unsigned char*, unsigned int)+0x125e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3306
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
    d224:	f1 e0       	ldi	r31, 0x01	; 1
    d226:	df 12       	cpse	r13, r31
    d228:	83 c1       	rjmp	.+774    	; 0xd530 <mqtt_callback(char*, unsigned char*, unsigned int)+0x157a>
    d22a:	62 eb       	ldi	r22, 0xB2	; 178
    d22c:	73 e0       	ldi	r23, 0x03	; 3
    d22e:	c8 01       	movw	r24, r16
    d230:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d234:	89 2b       	or	r24, r25
    d236:	29 f4       	brne	.+10     	; 0xd242 <mqtt_callback(char*, unsigned char*, unsigned int)+0x128c>
    d238:	69 ed       	ldi	r22, 0xD9	; 217
    d23a:	7a e0       	ldi	r23, 0x0A	; 10
    d23c:	87 2d       	mov	r24, r7
    d23e:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3307
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
    d242:	65 e5       	ldi	r22, 0x55	; 85
    d244:	76 e0       	ldi	r23, 0x06	; 6
    d246:	c8 01       	movw	r24, r16
    d248:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d24c:	89 2b       	or	r24, r25
    d24e:	81 f4       	brne	.+32     	; 0xd270 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3308
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
    d250:	89 ed       	ldi	r24, 0xD9	; 217
    d252:	9a e0       	ldi	r25, 0x0A	; 10
    d254:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    d258:	88 30       	cpi	r24, 0x08	; 8
    d25a:	91 05       	cpc	r25, r1
    d25c:	4c f4       	brge	.+18     	; 0xd270 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ba>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    d25e:	7e 9c       	mul	r7, r14
    d260:	90 01       	movw	r18, r0
    d262:	11 24       	eor	r1, r1
    d264:	68 2f       	mov	r22, r24
    d266:	c9 01       	movw	r24, r18
    d268:	85 5a       	subi	r24, 0xA5	; 165
    d26a:	9e 4f       	sbci	r25, 0xFE	; 254
    d26c:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3310
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
    d270:	6d e5       	ldi	r22, 0x5D	; 93
    d272:	76 e0       	ldi	r23, 0x06	; 6
    d274:	c8 01       	movw	r24, r16
    d276:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d27a:	89 2b       	or	r24, r25
    d27c:	79 f4       	brne	.+30     	; 0xd29c <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e6>
    d27e:	89 ed       	ldi	r24, 0xD9	; 217
    d280:	9a e0       	ldi	r25, 0x0A	; 10
    d282:	0e 94 08 aa 	call	0x15410	; 0x15410 <atof>
    d286:	20 e0       	ldi	r18, 0x00	; 0
    d288:	30 e0       	ldi	r19, 0x00	; 0
    d28a:	40 e2       	ldi	r20, 0x20	; 32
    d28c:	51 e4       	ldi	r21, 0x41	; 65
    d28e:	0e 94 21 b3 	call	0x16642	; 0x16642 <__mulsf3>
    d292:	0e 94 67 b5 	call	0x16ace	; 0x16ace <__fixsfsi>
    d296:	87 2d       	mov	r24, r7
    d298:	0e 94 d5 50 	call	0xa1aa	; 0xa1aa <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3311
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
    d29c:	6b e4       	ldi	r22, 0x4B	; 75
    d29e:	76 e0       	ldi	r23, 0x06	; 6
    d2a0:	c8 01       	movw	r24, r16
    d2a2:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d2a6:	89 2b       	or	r24, r25
    d2a8:	41 f4       	brne	.+16     	; 0xd2ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x1304>
    d2aa:	89 ed       	ldi	r24, 0xD9	; 217
    d2ac:	9a e0       	ldi	r25, 0x0A	; 10
    d2ae:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    d2b2:	bc 01       	movw	r22, r24
    d2b4:	87 2d       	mov	r24, r7
    d2b6:	0e 94 d5 50 	call	0xa1aa	; 0xa1aa <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3312
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
    d2ba:	69 e6       	ldi	r22, 0x69	; 105
    d2bc:	76 e0       	ldi	r23, 0x06	; 6
    d2be:	c8 01       	movw	r24, r16
    d2c0:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d2c4:	89 2b       	or	r24, r25
    d2c6:	09 f0       	breq	.+2      	; 0xd2ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x1314>
    d2c8:	52 c0       	rjmp	.+164    	; 0xd36e <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b8>
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4034
/// funkce prevadi ciselnou hodnotu na skutecne pojmenovani
uint8_t convert_text_mode(char *str2)
{
  uint8_t mode = 0;
  if (strcmp(str2, "off") == 0) mode = TERM_MODE_OFF;
  if (strcmp(str2, "heat") == 0) mode = TERM_MODE_MAX;
    d2ca:	61 e5       	ldi	r22, 0x51	; 81
    d2cc:	75 e0       	ldi	r23, 0x05	; 5
    d2ce:	89 ed       	ldi	r24, 0xD9	; 217
    d2d0:	9a e0       	ldi	r25, 0x0A	; 10
    d2d2:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d2d6:	ff 24       	eor	r15, r15
    d2d8:	f3 94       	inc	r15
    d2da:	89 2b       	or	r24, r25
    d2dc:	09 f0       	breq	.+2      	; 0xd2e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x132a>
    d2de:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4035
  if (strcmp(str2, "manual") == 0) mode = TERM_MODE_MAN_HEAT;
    d2e0:	66 e5       	ldi	r22, 0x56	; 86
    d2e2:	75 e0       	ldi	r23, 0x05	; 5
    d2e4:	89 ed       	ldi	r24, 0xD9	; 217
    d2e6:	9a e0       	ldi	r25, 0x0A	; 10
    d2e8:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d2ec:	89 2b       	or	r24, r25
    d2ee:	11 f4       	brne	.+4      	; 0xd2f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x133e>
_Z13mqtt_callbackPcPhj():
    d2f0:	43 e0       	ldi	r20, 0x03	; 3
    d2f2:	f4 2e       	mov	r15, r20
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4036
  if (strcmp(str2, "auto") == 0) mode = TERM_MODE_PROG;
    d2f4:	6d e5       	ldi	r22, 0x5D	; 93
    d2f6:	75 e0       	ldi	r23, 0x05	; 5
    d2f8:	89 ed       	ldi	r24, 0xD9	; 217
    d2fa:	9a e0       	ldi	r25, 0x0A	; 10
    d2fc:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d300:	89 2b       	or	r24, r25
    d302:	11 f4       	brne	.+4      	; 0xd308 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1352>
_Z13mqtt_callbackPcPhj():
    d304:	32 e0       	ldi	r19, 0x02	; 2
    d306:	f3 2e       	mov	r15, r19
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4037
  if (strcmp(str2, "cool") == 0) mode = TERM_MODE_CLIMATE_MAX;
    d308:	62 e6       	ldi	r22, 0x62	; 98
    d30a:	75 e0       	ldi	r23, 0x05	; 5
    d30c:	89 ed       	ldi	r24, 0xD9	; 217
    d30e:	9a e0       	ldi	r25, 0x0A	; 10
    d310:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d314:	89 2b       	or	r24, r25
    d316:	11 f4       	brne	.+4      	; 0xd31c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1366>
_Z13mqtt_callbackPcPhj():
    d318:	24 e0       	ldi	r18, 0x04	; 4
    d31a:	f2 2e       	mov	r15, r18
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4038
  if (strcmp(str2, "fan_only") == 0) mode = TERM_MODE_FAN;
    d31c:	67 e6       	ldi	r22, 0x67	; 103
    d31e:	75 e0       	ldi	r23, 0x05	; 5
    d320:	89 ed       	ldi	r24, 0xD9	; 217
    d322:	9a e0       	ldi	r25, 0x0A	; 10
    d324:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d328:	89 2b       	or	r24, r25
    d32a:	11 f4       	brne	.+4      	; 0xd330 <mqtt_callback(char*, unsigned char*, unsigned int)+0x137a>
_Z13mqtt_callbackPcPhj():
    d32c:	96 e0       	ldi	r25, 0x06	; 6
    d32e:	f9 2e       	mov	r15, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3314
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
        {
          active = convert_text_mode(my_payload);
    d330:	c4 5d       	subi	r28, 0xD4	; 212
    d332:	de 4f       	sbci	r29, 0xFE	; 254
    d334:	f8 82       	st	Y, r15
    d336:	cc 52       	subi	r28, 0x2C	; 44
    d338:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3315
          thermostat_ring_set_mode(id, active);
    d33a:	6f 2d       	mov	r22, r15
    d33c:	87 2d       	mov	r24, r7
    d33e:	0e 94 ba 50 	call	0xa174	; 0xa174 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3316
          if (active == TERM_MODE_MAN_HEAT)
    d342:	c4 5d       	subi	r28, 0xD4	; 212
    d344:	de 4f       	sbci	r29, 0xFE	; 254
    d346:	88 81       	ld	r24, Y
    d348:	cc 52       	subi	r28, 0x2C	; 44
    d34a:	d1 40       	sbci	r29, 0x01	; 1
    d34c:	83 30       	cpi	r24, 0x03	; 3
    d34e:	21 f4       	brne	.+8      	; 0xd358 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3317
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    d350:	60 e0       	ldi	r22, 0x00	; 0
    d352:	87 2d       	mov	r24, r7
    d354:	0e 94 62 96 	call	0x12cc4	; 0x12cc4 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3318
          if (active == TERM_MODE_MAN_COOL)
    d358:	c4 5d       	subi	r28, 0xD4	; 212
    d35a:	de 4f       	sbci	r29, 0xFE	; 254
    d35c:	88 81       	ld	r24, Y
    d35e:	cc 52       	subi	r28, 0x2C	; 44
    d360:	d1 40       	sbci	r29, 0x01	; 1
    d362:	85 30       	cpi	r24, 0x05	; 5
    d364:	21 f4       	brne	.+8      	; 0xd36e <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3319
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    d366:	61 e0       	ldi	r22, 0x01	; 1
    d368:	87 2d       	mov	r24, r7
    d36a:	0e 94 62 96 	call	0x12cc4	; 0x12cc4 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3321
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
    d36e:	6e e6       	ldi	r22, 0x6E	; 110
    d370:	76 e0       	ldi	r23, 0x06	; 6
    d372:	c8 01       	movw	r24, r16
    d374:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d378:	89 2b       	or	r24, r25
    d37a:	19 f5       	brne	.+70     	; 0xd3c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x140c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3323
        {
          active = atoi(my_payload);
    d37c:	89 ed       	ldi	r24, 0xD9	; 217
    d37e:	9a e0       	ldi	r25, 0x0A	; 10
    d380:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    d384:	c4 5d       	subi	r28, 0xD4	; 212
    d386:	de 4f       	sbci	r29, 0xFE	; 254
    d388:	88 83       	st	Y, r24
    d38a:	cc 52       	subi	r28, 0x2C	; 44
    d38c:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3324
          thermostat_ring_set_mode(id, active);
    d38e:	68 2f       	mov	r22, r24
    d390:	87 2d       	mov	r24, r7
    d392:	0e 94 ba 50 	call	0xa174	; 0xa174 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3325
          if (active == TERM_MODE_MAN_HEAT)
    d396:	c4 5d       	subi	r28, 0xD4	; 212
    d398:	de 4f       	sbci	r29, 0xFE	; 254
    d39a:	88 81       	ld	r24, Y
    d39c:	cc 52       	subi	r28, 0x2C	; 44
    d39e:	d1 40       	sbci	r29, 0x01	; 1
    d3a0:	83 30       	cpi	r24, 0x03	; 3
    d3a2:	21 f4       	brne	.+8      	; 0xd3ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x13f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3326
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    d3a4:	60 e0       	ldi	r22, 0x00	; 0
    d3a6:	87 2d       	mov	r24, r7
    d3a8:	0e 94 62 96 	call	0x12cc4	; 0x12cc4 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3327
          if (active == TERM_MODE_MAN_COOL)
    d3ac:	c4 5d       	subi	r28, 0xD4	; 212
    d3ae:	de 4f       	sbci	r29, 0xFE	; 254
    d3b0:	88 81       	ld	r24, Y
    d3b2:	cc 52       	subi	r28, 0x2C	; 44
    d3b4:	d1 40       	sbci	r29, 0x01	; 1
    d3b6:	85 30       	cpi	r24, 0x05	; 5
    d3b8:	21 f4       	brne	.+8      	; 0xd3c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x140c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3328
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    d3ba:	61 e0       	ldi	r22, 0x01	; 1
    d3bc:	87 2d       	mov	r24, r7
    d3be:	0e 94 62 96 	call	0x12cc4	; 0x12cc4 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3330
        }
        if ((cnt == 1) && (strcmp(pch, "tds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
    d3c2:	68 eb       	ldi	r22, 0xB8	; 184
    d3c4:	73 e0       	ldi	r23, 0x03	; 3
    d3c6:	c8 01       	movw	r24, r16
    d3c8:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d3cc:	89 2b       	or	r24, r25
    d3ce:	69 f4       	brne	.+26     	; 0xd3ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x1434>
    d3d0:	89 ed       	ldi	r24, 0xD9	; 217
    d3d2:	9a e0       	ldi	r25, 0x0A	; 10
    d3d4:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    d3d8:	7e 9c       	mul	r7, r14
    d3da:	90 01       	movw	r18, r0
    d3dc:	11 24       	eor	r1, r1
    d3de:	68 2f       	mov	r22, r24
    d3e0:	c9 01       	movw	r24, r18
    d3e2:	84 5a       	subi	r24, 0xA4	; 164
    d3e4:	9e 4f       	sbci	r25, 0xFE	; 254
    d3e6:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3331
        if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
    d3ea:	67 eb       	ldi	r22, 0xB7	; 183
    d3ec:	73 e0       	ldi	r23, 0x03	; 3
    d3ee:	c8 01       	movw	r24, r16
    d3f0:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d3f4:	89 2b       	or	r24, r25
    d3f6:	69 f4       	brne	.+26     	; 0xd412 <mqtt_callback(char*, unsigned char*, unsigned int)+0x145c>
    d3f8:	89 ed       	ldi	r24, 0xD9	; 217
    d3fa:	9a e0       	ldi	r25, 0x0A	; 10
    d3fc:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    d400:	60 e1       	ldi	r22, 0x10	; 16
    d402:	68 0f       	add	r22, r24
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
    d404:	7e 9c       	mul	r7, r14
    d406:	c0 01       	movw	r24, r0
    d408:	11 24       	eor	r1, r1
    d40a:	84 5a       	subi	r24, 0xA4	; 164
    d40c:	9e 4f       	sbci	r25, 0xFE	; 254
    d40e:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3332
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
    d412:	6c eb       	ldi	r22, 0xBC	; 188
    d414:	73 e0       	ldi	r23, 0x03	; 3
    d416:	c8 01       	movw	r24, r16
    d418:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d41c:	89 2b       	or	r24, r25
    d41e:	69 f4       	brne	.+26     	; 0xd43a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1484>
    d420:	89 ed       	ldi	r24, 0xD9	; 217
    d422:	9a e0       	ldi	r25, 0x0A	; 10
    d424:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
thermostat_ring_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    d428:	7e 9c       	mul	r7, r14
    d42a:	90 01       	movw	r18, r0
    d42c:	11 24       	eor	r1, r1
    d42e:	68 2f       	mov	r22, r24
    d430:	c9 01       	movw	r24, r18
    d432:	83 5a       	subi	r24, 0xA3	; 163
    d434:	9e 4f       	sbci	r25, 0xFE	; 254
    d436:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3333
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
    d43a:	63 e7       	ldi	r22, 0x73	; 115
    d43c:	76 e0       	ldi	r23, 0x06	; 6
    d43e:	c8 01       	movw	r24, r16
    d440:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d444:	89 2b       	or	r24, r25
    d446:	69 f4       	brne	.+26     	; 0xd462 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14ac>
    d448:	89 ed       	ldi	r24, 0xD9	; 217
    d44a:	9a e0       	ldi	r25, 0x0A	; 10
    d44c:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    d450:	7e 9c       	mul	r7, r14
    d452:	90 01       	movw	r18, r0
    d454:	11 24       	eor	r1, r1
    d456:	68 2f       	mov	r22, r24
    d458:	c9 01       	movw	r24, r18
    d45a:	81 5a       	subi	r24, 0xA1	; 161
    d45c:	9e 4f       	sbci	r25, 0xFE	; 254
    d45e:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3334
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
    d462:	6a e7       	ldi	r22, 0x7A	; 122
    d464:	76 e0       	ldi	r23, 0x06	; 6
    d466:	c8 01       	movw	r24, r16
    d468:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d46c:	89 2b       	or	r24, r25
    d46e:	a1 f4       	brne	.+40     	; 0xd498 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14e2>
    d470:	89 ed       	ldi	r24, 0xD9	; 217
    d472:	9a e0       	ldi	r25, 0x0A	; 10
    d474:	0e 94 08 aa 	call	0x15410	; 0x15410 <atof>
thermostat_ring_pid_set_kp():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    d478:	24 e0       	ldi	r18, 0x04	; 4
    d47a:	72 9e       	mul	r7, r18
    d47c:	f0 01       	movw	r30, r0
    d47e:	11 24       	eor	r1, r1
    d480:	eb 58       	subi	r30, 0x8B	; 139
    d482:	f6 4f       	sbci	r31, 0xF6	; 246
    d484:	60 83       	st	Z, r22
    d486:	71 83       	std	Z+1, r23	; 0x01
    d488:	82 83       	std	Z+2, r24	; 0x02
    d48a:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    d48c:	87 2d       	mov	r24, r7
    d48e:	0e 94 97 22 	call	0x452e	; 0x452e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    d492:	87 2d       	mov	r24, r7
    d494:	0e 94 76 50 	call	0xa0ec	; 0xa0ec <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3335
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
    d498:	61 e8       	ldi	r22, 0x81	; 129
    d49a:	76 e0       	ldi	r23, 0x06	; 6
    d49c:	c8 01       	movw	r24, r16
    d49e:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d4a2:	89 2b       	or	r24, r25
    d4a4:	a1 f4       	brne	.+40     	; 0xd4ce <mqtt_callback(char*, unsigned char*, unsigned int)+0x1518>
    d4a6:	89 ed       	ldi	r24, 0xD9	; 217
    d4a8:	9a e0       	ldi	r25, 0x0A	; 10
    d4aa:	0e 94 08 aa 	call	0x15410	; 0x15410 <atof>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    d4ae:	a4 e0       	ldi	r26, 0x04	; 4
    d4b0:	7a 9e       	mul	r7, r26
    d4b2:	f0 01       	movw	r30, r0
    d4b4:	11 24       	eor	r1, r1
    d4b6:	e7 57       	subi	r30, 0x77	; 119
    d4b8:	f6 4f       	sbci	r31, 0xF6	; 246
    d4ba:	60 83       	st	Z, r22
    d4bc:	71 83       	std	Z+1, r23	; 0x01
    d4be:	82 83       	std	Z+2, r24	; 0x02
    d4c0:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    d4c2:	87 2d       	mov	r24, r7
    d4c4:	0e 94 97 22 	call	0x452e	; 0x452e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    d4c8:	87 2d       	mov	r24, r7
    d4ca:	0e 94 76 50 	call	0xa0ec	; 0xa0ec <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3336
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
    d4ce:	68 e8       	ldi	r22, 0x88	; 136
    d4d0:	76 e0       	ldi	r23, 0x06	; 6
    d4d2:	c8 01       	movw	r24, r16
    d4d4:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d4d8:	89 2b       	or	r24, r25
    d4da:	a1 f4       	brne	.+40     	; 0xd504 <mqtt_callback(char*, unsigned char*, unsigned int)+0x154e>
    d4dc:	89 ed       	ldi	r24, 0xD9	; 217
    d4de:	9a e0       	ldi	r25, 0x0A	; 10
    d4e0:	0e 94 08 aa 	call	0x15410	; 0x15410 <atof>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    d4e4:	b4 e0       	ldi	r27, 0x04	; 4
    d4e6:	7b 9e       	mul	r7, r27
    d4e8:	f0 01       	movw	r30, r0
    d4ea:	11 24       	eor	r1, r1
    d4ec:	e3 56       	subi	r30, 0x63	; 99
    d4ee:	f6 4f       	sbci	r31, 0xF6	; 246
    d4f0:	60 83       	st	Z, r22
    d4f2:	71 83       	std	Z+1, r23	; 0x01
    d4f4:	82 83       	std	Z+2, r24	; 0x02
    d4f6:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    d4f8:	87 2d       	mov	r24, r7
    d4fa:	0e 94 97 22 	call	0x452e	; 0x452e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    d4fe:	87 2d       	mov	r24, r7
    d500:	0e 94 76 50 	call	0xa0ec	; 0xa0ec <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3337
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
    d504:	6f e8       	ldi	r22, 0x8F	; 143
    d506:	76 e0       	ldi	r23, 0x06	; 6
    d508:	c8 01       	movw	r24, r16
    d50a:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d50e:	89 2b       	or	r24, r25
    d510:	79 f4       	brne	.+30     	; 0xd530 <mqtt_callback(char*, unsigned char*, unsigned int)+0x157a>
    d512:	89 ed       	ldi	r24, 0xD9	; 217
    d514:	9a e0       	ldi	r25, 0x0A	; 10
    d516:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    d51a:	e7 2d       	mov	r30, r7
    d51c:	f0 e0       	ldi	r31, 0x00	; 0
    d51e:	ef 54       	subi	r30, 0x4F	; 79
    d520:	f6 4f       	sbci	r31, 0xF6	; 246
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3337
    d522:	80 83       	st	Z, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    d524:	87 2d       	mov	r24, r7
    d526:	0e 94 97 22 	call	0x452e	; 0x452e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    d52a:	87 2d       	mov	r24, r7
    d52c:	0e 94 76 50 	call	0xa0ec	; 0xa0ec <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3343
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    d530:	69 ed       	ldi	r22, 0xD9	; 217
    d532:	73 e0       	ldi	r23, 0x03	; 3
    d534:	90 e0       	ldi	r25, 0x00	; 0
    d536:	80 e0       	ldi	r24, 0x00	; 0
    d538:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
    d53c:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3344
      cnt++;
    d53e:	d3 94       	inc	r13
    d540:	5b ce       	rjmp	.-842    	; 0xd1f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1242>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3349
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
    d542:	68 e6       	ldi	r22, 0x68	; 104
    d544:	72 e3       	ldi	r23, 0x32	; 50
    d546:	c5 01       	movw	r24, r10
    d548:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3350
  strcat(str1, device.nazev);
    d54c:	63 e3       	ldi	r22, 0x33	; 51
    d54e:	7c e0       	ldi	r23, 0x0C	; 12
    d550:	c5 01       	movw	r24, r10
    d552:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3351
  strcat(str1, "/ring/clear");
    d556:	60 e7       	ldi	r22, 0x70	; 112
    d558:	75 e0       	ldi	r23, 0x05	; 5
    d55a:	c5 01       	movw	r24, r10
    d55c:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3352
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d560:	f5 01       	movw	r30, r10
    d562:	01 90       	ld	r0, Z+
    d564:	00 20       	and	r0, r0
    d566:	e9 f7       	brne	.-6      	; 0xd562 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15ac>
    d568:	31 97       	sbiw	r30, 0x01	; 1
    d56a:	af 01       	movw	r20, r30
    d56c:	4a 19       	sub	r20, r10
    d56e:	5b 09       	sbc	r21, r11
    d570:	b4 01       	movw	r22, r8
    d572:	c5 01       	movw	r24, r10
    d574:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    d578:	89 2b       	or	r24, r25
    d57a:	a1 f4       	brne	.+40     	; 0xd5a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3354
  {
    mqtt_process_message++;
    d57c:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    d580:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    d584:	01 96       	adiw	r24, 0x01	; 1
    d586:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    d58a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3355
    id = atoi(my_payload);
    d58e:	89 ed       	ldi	r24, 0xD9	; 217
    d590:	9a e0       	ldi	r25, 0x0A	; 10
    d592:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    d596:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3356
    if (id < MAX_THERMOSTAT)
    d598:	e4 e0       	ldi	r30, 0x04	; 4
    d59a:	e8 17       	cp	r30, r24
    d59c:	08 f4       	brcc	.+2      	; 0xd5a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15ea>
    d59e:	99 c1       	rjmp	.+818    	; 0xd8d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x191c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3358
    {
      thermostat_ring_clear(id);
    d5a0:	0e 94 18 51 	call	0xa230	; 0xa230 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3369
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
    d5a4:	68 e6       	ldi	r22, 0x68	; 104
    d5a6:	72 e3       	ldi	r23, 0x32	; 50
    d5a8:	c5 01       	movw	r24, r10
    d5aa:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3370
  strcat(str1, device.nazev);
    d5ae:	63 e3       	ldi	r22, 0x33	; 51
    d5b0:	7c e0       	ldi	r23, 0x0C	; 12
    d5b2:	c5 01       	movw	r24, r10
    d5b4:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3371
  strcat(str1, "/network/get/config");
    d5b8:	6e e8       	ldi	r22, 0x8E	; 142
    d5ba:	75 e0       	ldi	r23, 0x05	; 5
    d5bc:	c5 01       	movw	r24, r10
    d5be:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3372
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d5c2:	f5 01       	movw	r30, r10
    d5c4:	01 90       	ld	r0, Z+
    d5c6:	00 20       	and	r0, r0
    d5c8:	e9 f7       	brne	.-6      	; 0xd5c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x160e>
    d5ca:	31 97       	sbiw	r30, 0x01	; 1
    d5cc:	af 01       	movw	r20, r30
    d5ce:	4a 19       	sub	r20, r10
    d5d0:	5b 09       	sbc	r21, r11
    d5d2:	b4 01       	movw	r22, r8
    d5d4:	c5 01       	movw	r24, r10
    d5d6:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    d5da:	89 2b       	or	r24, r25
    d5dc:	09 f0       	breq	.+2      	; 0xd5e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x162a>
    d5de:	2f c1       	rjmp	.+606    	; 0xd83e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1888>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3374
  {
    mqtt_process_message++;
    d5e0:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    d5e4:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    d5e8:	01 96       	adiw	r24, 0x01	; 1
    d5ea:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    d5ee:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
send_network_config():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:262
//// thermctl-out/XXXXX/network/name
void send_network_config(PubSubClient *mqtt_client)
{
  char payload[20];
  char str_topic[32];
  payload[0] = 0;
    d5f2:	c8 5f       	subi	r28, 0xF8	; 248
    d5f4:	de 4f       	sbci	r29, 0xFE	; 254
    d5f6:	18 82       	st	Y, r1
    d5f8:	c8 50       	subi	r28, 0x08	; 8
    d5fa:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:263
  createString(payload, ':', device.mac, 6, 16);
    d5fc:	00 e1       	ldi	r16, 0x10	; 16
    d5fe:	26 e0       	ldi	r18, 0x06	; 6
    d600:	4d e1       	ldi	r20, 0x1D	; 29
    d602:	5c e0       	ldi	r21, 0x0C	; 12
    d604:	6a e3       	ldi	r22, 0x3A	; 58
    d606:	ce 01       	movw	r24, r28
    d608:	88 5f       	subi	r24, 0xF8	; 248
    d60a:	9e 4f       	sbci	r25, 0xFE	; 254
    d60c:	0e 94 7b 96 	call	0x12cf6	; 0x12cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:264
  strcpy_P(str_topic, network_mac);
    d610:	69 ed       	ldi	r22, 0xD9	; 217
    d612:	71 e3       	ldi	r23, 0x31	; 49
    d614:	ce 01       	movw	r24, r28
    d616:	88 5b       	subi	r24, 0xB8	; 184
    d618:	9f 4f       	sbci	r25, 0xFF	; 255
    d61a:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:265
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d61e:	ae 01       	movw	r20, r28
    d620:	48 5f       	subi	r20, 0xF8	; 248
    d622:	5e 4f       	sbci	r21, 0xFE	; 254
    d624:	be 01       	movw	r22, r28
    d626:	68 5b       	subi	r22, 0xB8	; 184
    d628:	7f 4f       	sbci	r23, 0xFF	; 255
    d62a:	80 e1       	ldi	r24, 0x10	; 16
    d62c:	9e e0       	ldi	r25, 0x0E	; 14
    d62e:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:267
  ///
  payload[0] = 0;
    d632:	c8 5f       	subi	r28, 0xF8	; 248
    d634:	de 4f       	sbci	r29, 0xFE	; 254
    d636:	18 82       	st	Y, r1
    d638:	c8 50       	subi	r28, 0x08	; 8
    d63a:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:268
  createString(payload, '.', device.myIP, 4, 10);
    d63c:	0a e0       	ldi	r16, 0x0A	; 10
    d63e:	24 e0       	ldi	r18, 0x04	; 4
    d640:	43 e2       	ldi	r20, 0x23	; 35
    d642:	5c e0       	ldi	r21, 0x0C	; 12
    d644:	6e e2       	ldi	r22, 0x2E	; 46
    d646:	ce 01       	movw	r24, r28
    d648:	88 5f       	subi	r24, 0xF8	; 248
    d64a:	9e 4f       	sbci	r25, 0xFE	; 254
    d64c:	0e 94 7b 96 	call	0x12cf6	; 0x12cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:269
  strcpy_P(str_topic, network_ip);
    d650:	67 e9       	ldi	r22, 0x97	; 151
    d652:	75 e3       	ldi	r23, 0x35	; 53
    d654:	ce 01       	movw	r24, r28
    d656:	88 5b       	subi	r24, 0xB8	; 184
    d658:	9f 4f       	sbci	r25, 0xFF	; 255
    d65a:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:270
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d65e:	ae 01       	movw	r20, r28
    d660:	48 5f       	subi	r20, 0xF8	; 248
    d662:	5e 4f       	sbci	r21, 0xFE	; 254
    d664:	be 01       	movw	r22, r28
    d666:	68 5b       	subi	r22, 0xB8	; 184
    d668:	7f 4f       	sbci	r23, 0xFF	; 255
    d66a:	80 e1       	ldi	r24, 0x10	; 16
    d66c:	9e e0       	ldi	r25, 0x0E	; 14
    d66e:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:272
  ///
  payload[0] = 0;
    d672:	c8 5f       	subi	r28, 0xF8	; 248
    d674:	de 4f       	sbci	r29, 0xFE	; 254
    d676:	18 82       	st	Y, r1
    d678:	c8 50       	subi	r28, 0x08	; 8
    d67a:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:273
  createString(payload, '.', device.myMASK, 4, 10);
    d67c:	24 e0       	ldi	r18, 0x04	; 4
    d67e:	47 e2       	ldi	r20, 0x27	; 39
    d680:	5c e0       	ldi	r21, 0x0C	; 12
    d682:	6e e2       	ldi	r22, 0x2E	; 46
    d684:	ce 01       	movw	r24, r28
    d686:	88 5f       	subi	r24, 0xF8	; 248
    d688:	9e 4f       	sbci	r25, 0xFE	; 254
    d68a:	0e 94 7b 96 	call	0x12cf6	; 0x12cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:274
  strcpy_P(str_topic, network_netmask);
    d68e:	69 ec       	ldi	r22, 0xC9	; 201
    d690:	71 e3       	ldi	r23, 0x31	; 49
    d692:	ce 01       	movw	r24, r28
    d694:	88 5b       	subi	r24, 0xB8	; 184
    d696:	9f 4f       	sbci	r25, 0xFF	; 255
    d698:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:275
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d69c:	ae 01       	movw	r20, r28
    d69e:	48 5f       	subi	r20, 0xF8	; 248
    d6a0:	5e 4f       	sbci	r21, 0xFE	; 254
    d6a2:	be 01       	movw	r22, r28
    d6a4:	68 5b       	subi	r22, 0xB8	; 184
    d6a6:	7f 4f       	sbci	r23, 0xFF	; 255
    d6a8:	80 e1       	ldi	r24, 0x10	; 16
    d6aa:	9e e0       	ldi	r25, 0x0E	; 14
    d6ac:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:277
  ///
  payload[0] = 0;
    d6b0:	c8 5f       	subi	r28, 0xF8	; 248
    d6b2:	de 4f       	sbci	r29, 0xFE	; 254
    d6b4:	18 82       	st	Y, r1
    d6b6:	c8 50       	subi	r28, 0x08	; 8
    d6b8:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:278
  createString(payload, '.', device.myGW, 4, 10);
    d6ba:	24 e0       	ldi	r18, 0x04	; 4
    d6bc:	4f e2       	ldi	r20, 0x2F	; 47
    d6be:	5c e0       	ldi	r21, 0x0C	; 12
    d6c0:	6e e2       	ldi	r22, 0x2E	; 46
    d6c2:	ce 01       	movw	r24, r28
    d6c4:	88 5f       	subi	r24, 0xF8	; 248
    d6c6:	9e 4f       	sbci	r25, 0xFE	; 254
    d6c8:	0e 94 7b 96 	call	0x12cf6	; 0x12cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:279
  strcpy_P(str_topic, network_gw);
    d6cc:	6e eb       	ldi	r22, 0xBE	; 190
    d6ce:	71 e3       	ldi	r23, 0x31	; 49
    d6d0:	ce 01       	movw	r24, r28
    d6d2:	88 5b       	subi	r24, 0xB8	; 184
    d6d4:	9f 4f       	sbci	r25, 0xFF	; 255
    d6d6:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:280
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d6da:	ae 01       	movw	r20, r28
    d6dc:	48 5f       	subi	r20, 0xF8	; 248
    d6de:	5e 4f       	sbci	r21, 0xFE	; 254
    d6e0:	be 01       	movw	r22, r28
    d6e2:	68 5b       	subi	r22, 0xB8	; 184
    d6e4:	7f 4f       	sbci	r23, 0xFF	; 255
    d6e6:	80 e1       	ldi	r24, 0x10	; 16
    d6e8:	9e e0       	ldi	r25, 0x0E	; 14
    d6ea:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:282
  ///
  payload[0] = 0;
    d6ee:	c8 5f       	subi	r28, 0xF8	; 248
    d6f0:	de 4f       	sbci	r29, 0xFE	; 254
    d6f2:	18 82       	st	Y, r1
    d6f4:	c8 50       	subi	r28, 0x08	; 8
    d6f6:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:283
  createString(payload, '.', device.myDNS, 4, 10);
    d6f8:	24 e0       	ldi	r18, 0x04	; 4
    d6fa:	4b e2       	ldi	r20, 0x2B	; 43
    d6fc:	5c e0       	ldi	r21, 0x0C	; 12
    d6fe:	6e e2       	ldi	r22, 0x2E	; 46
    d700:	ce 01       	movw	r24, r28
    d702:	88 5f       	subi	r24, 0xF8	; 248
    d704:	9e 4f       	sbci	r25, 0xFE	; 254
    d706:	0e 94 7b 96 	call	0x12cf6	; 0x12cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:284
  strcpy_P(str_topic, network_dns);
    d70a:	62 eb       	ldi	r22, 0xB2	; 178
    d70c:	71 e3       	ldi	r23, 0x31	; 49
    d70e:	ce 01       	movw	r24, r28
    d710:	88 5b       	subi	r24, 0xB8	; 184
    d712:	9f 4f       	sbci	r25, 0xFF	; 255
    d714:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:285
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d718:	ae 01       	movw	r20, r28
    d71a:	48 5f       	subi	r20, 0xF8	; 248
    d71c:	5e 4f       	sbci	r21, 0xFE	; 254
    d71e:	be 01       	movw	r22, r28
    d720:	68 5b       	subi	r22, 0xB8	; 184
    d722:	7f 4f       	sbci	r23, 0xFF	; 255
    d724:	80 e1       	ldi	r24, 0x10	; 16
    d726:	9e e0       	ldi	r25, 0x0E	; 14
    d728:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:287
  ///
  payload[0] = 0;
    d72c:	c8 5f       	subi	r28, 0xF8	; 248
    d72e:	de 4f       	sbci	r29, 0xFE	; 254
    d730:	18 82       	st	Y, r1
    d732:	c8 50       	subi	r28, 0x08	; 8
    d734:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:288
  createString(payload, '.', device.ntp_server, 4, 10);
    d736:	24 e0       	ldi	r18, 0x04	; 4
    d738:	4b e6       	ldi	r20, 0x6B	; 107
    d73a:	5c e0       	ldi	r21, 0x0C	; 12
    d73c:	6e e2       	ldi	r22, 0x2E	; 46
    d73e:	ce 01       	movw	r24, r28
    d740:	88 5f       	subi	r24, 0xF8	; 248
    d742:	9e 4f       	sbci	r25, 0xFE	; 254
    d744:	0e 94 7b 96 	call	0x12cf6	; 0x12cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:289
  strcpy_P(str_topic, network_ntp);
    d748:	66 ea       	ldi	r22, 0xA6	; 166
    d74a:	71 e3       	ldi	r23, 0x31	; 49
    d74c:	ce 01       	movw	r24, r28
    d74e:	88 5b       	subi	r24, 0xB8	; 184
    d750:	9f 4f       	sbci	r25, 0xFF	; 255
    d752:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:290
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d756:	ae 01       	movw	r20, r28
    d758:	48 5f       	subi	r20, 0xF8	; 248
    d75a:	5e 4f       	sbci	r21, 0xFE	; 254
    d75c:	be 01       	movw	r22, r28
    d75e:	68 5b       	subi	r22, 0xB8	; 184
    d760:	7f 4f       	sbci	r23, 0xFF	; 255
    d762:	80 e1       	ldi	r24, 0x10	; 16
    d764:	9e e0       	ldi	r25, 0x0E	; 14
    d766:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:292
  ///
  payload[0] = 0;
    d76a:	c8 5f       	subi	r28, 0xF8	; 248
    d76c:	de 4f       	sbci	r29, 0xFE	; 254
    d76e:	18 82       	st	Y, r1
    d770:	c8 50       	subi	r28, 0x08	; 8
    d772:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:293
  createString(payload, '.', device.mqtt_server, 4, 10);
    d774:	24 e0       	ldi	r18, 0x04	; 4
    d776:	4d e3       	ldi	r20, 0x3D	; 61
    d778:	5c e0       	ldi	r21, 0x0C	; 12
    d77a:	6e e2       	ldi	r22, 0x2E	; 46
    d77c:	ce 01       	movw	r24, r28
    d77e:	88 5f       	subi	r24, 0xF8	; 248
    d780:	9e 4f       	sbci	r25, 0xFE	; 254
    d782:	0e 94 7b 96 	call	0x12cf6	; 0x12cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:294
  strcpy_P(str_topic, network_mqtt_host);
    d786:	64 e9       	ldi	r22, 0x94	; 148
    d788:	71 e3       	ldi	r23, 0x31	; 49
    d78a:	ce 01       	movw	r24, r28
    d78c:	88 5b       	subi	r24, 0xB8	; 184
    d78e:	9f 4f       	sbci	r25, 0xFF	; 255
    d790:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:295
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d794:	ae 01       	movw	r20, r28
    d796:	48 5f       	subi	r20, 0xF8	; 248
    d798:	5e 4f       	sbci	r21, 0xFE	; 254
    d79a:	be 01       	movw	r22, r28
    d79c:	68 5b       	subi	r22, 0xB8	; 184
    d79e:	7f 4f       	sbci	r23, 0xFF	; 255
    d7a0:	80 e1       	ldi	r24, 0x10	; 16
    d7a2:	9e e0       	ldi	r25, 0x0E	; 14
    d7a4:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    d7a8:	4a e0       	ldi	r20, 0x0A	; 10
    d7aa:	be 01       	movw	r22, r28
    d7ac:	68 5f       	subi	r22, 0xF8	; 248
    d7ae:	7e 4f       	sbci	r23, 0xFE	; 254
    d7b0:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <device+0x24>
    d7b4:	90 91 42 0c 	lds	r25, 0x0C42	; 0x800c42 <device+0x25>
    d7b8:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_network_config():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:298
  ///
  itoa(device.mqtt_port, payload, 10);
  strcpy_P(str_topic, network_mqtt_port);
    d7bc:	62 e8       	ldi	r22, 0x82	; 130
    d7be:	71 e3       	ldi	r23, 0x31	; 49
    d7c0:	ce 01       	movw	r24, r28
    d7c2:	88 5b       	subi	r24, 0xB8	; 184
    d7c4:	9f 4f       	sbci	r25, 0xFF	; 255
    d7c6:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:299
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d7ca:	ae 01       	movw	r20, r28
    d7cc:	48 5f       	subi	r20, 0xF8	; 248
    d7ce:	5e 4f       	sbci	r21, 0xFE	; 254
    d7d0:	be 01       	movw	r22, r28
    d7d2:	68 5b       	subi	r22, 0xB8	; 184
    d7d4:	7f 4f       	sbci	r23, 0xFF	; 255
    d7d6:	80 e1       	ldi	r24, 0x10	; 16
    d7d8:	9e e0       	ldi	r25, 0x0E	; 14
    d7da:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:301
  ///
  strcpy_P(str_topic, network_mqtt_user);
    d7de:	60 e7       	ldi	r22, 0x70	; 112
    d7e0:	71 e3       	ldi	r23, 0x31	; 49
    d7e2:	ce 01       	movw	r24, r28
    d7e4:	88 5b       	subi	r24, 0xB8	; 184
    d7e6:	9f 4f       	sbci	r25, 0xFF	; 255
    d7e8:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:302
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_user);
    d7ec:	43 e4       	ldi	r20, 0x43	; 67
    d7ee:	5c e0       	ldi	r21, 0x0C	; 12
    d7f0:	be 01       	movw	r22, r28
    d7f2:	68 5b       	subi	r22, 0xB8	; 184
    d7f4:	7f 4f       	sbci	r23, 0xFF	; 255
    d7f6:	80 e1       	ldi	r24, 0x10	; 16
    d7f8:	9e e0       	ldi	r25, 0x0E	; 14
    d7fa:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:304
  ///
  strcpy_P(str_topic, network_mqtt_key);
    d7fe:	6f e5       	ldi	r22, 0x5F	; 95
    d800:	71 e3       	ldi	r23, 0x31	; 49
    d802:	ce 01       	movw	r24, r28
    d804:	88 5b       	subi	r24, 0xB8	; 184
    d806:	9f 4f       	sbci	r25, 0xFF	; 255
    d808:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:305
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_key);
    d80c:	47 e5       	ldi	r20, 0x57	; 87
    d80e:	5c e0       	ldi	r21, 0x0C	; 12
    d810:	be 01       	movw	r22, r28
    d812:	68 5b       	subi	r22, 0xB8	; 184
    d814:	7f 4f       	sbci	r23, 0xFF	; 255
    d816:	80 e1       	ldi	r24, 0x10	; 16
    d818:	9e e0       	ldi	r25, 0x0E	; 14
    d81a:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:307
  ///
  strcpy_P(str_topic, network_name);
    d81e:	62 e5       	ldi	r22, 0x52	; 82
    d820:	71 e3       	ldi	r23, 0x31	; 49
    d822:	ce 01       	movw	r24, r28
    d824:	88 5b       	subi	r24, 0xB8	; 184
    d826:	9f 4f       	sbci	r25, 0xFF	; 255
    d828:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:308
  send_mqtt_general_payload(mqtt_client, str_topic, device.nazev);
    d82c:	43 e3       	ldi	r20, 0x33	; 51
    d82e:	5c e0       	ldi	r21, 0x0C	; 12
    d830:	be 01       	movw	r22, r28
    d832:	68 5b       	subi	r22, 0xB8	; 184
    d834:	7f 4f       	sbci	r23, 0xFF	; 255
    d836:	80 e1       	ldi	r24, 0x10	; 16
    d838:	9e e0       	ldi	r25, 0x0E	; 14
    d83a:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3389
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
    d83e:	68 e6       	ldi	r22, 0x68	; 104
    d840:	72 e3       	ldi	r23, 0x32	; 50
    d842:	c5 01       	movw	r24, r10
    d844:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3390
  strcat(str1, device.nazev);
    d848:	63 e3       	ldi	r22, 0x33	; 51
    d84a:	7c e0       	ldi	r23, 0x0C	; 12
    d84c:	c5 01       	movw	r24, r10
    d84e:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3391
  strcat(str1, "/network/set/");
    d852:	62 ea       	ldi	r22, 0xA2	; 162
    d854:	75 e0       	ldi	r23, 0x05	; 5
    d856:	c5 01       	movw	r24, r10
    d858:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3392
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d85c:	f5 01       	movw	r30, r10
    d85e:	01 90       	ld	r0, Z+
    d860:	00 20       	and	r0, r0
    d862:	e9 f7       	brne	.-6      	; 0xd85e <mqtt_callback(char*, unsigned char*, unsigned int)+0x18a8>
    d864:	31 97       	sbiw	r30, 0x01	; 1
    d866:	af 01       	movw	r20, r30
    d868:	4a 19       	sub	r20, r10
    d86a:	5b 09       	sbc	r21, r11
    d86c:	b4 01       	movw	r22, r8
    d86e:	c5 01       	movw	r24, r10
    d870:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    d874:	89 2b       	or	r24, r25
    d876:	09 f0       	breq	.+2      	; 0xd87a <mqtt_callback(char*, unsigned char*, unsigned int)+0x18c4>
    d878:	f1 c0       	rjmp	.+482    	; 0xda5c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3394
  {
    mqtt_process_message++;
    d87a:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    d87e:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    d882:	01 96       	adiw	r24, 0x01	; 1
    d884:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    d888:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3396
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d88c:	f5 01       	movw	r30, r10
    d88e:	01 90       	ld	r0, Z+
    d890:	00 20       	and	r0, r0
    d892:	e9 f7       	brne	.-6      	; 0xd88e <mqtt_callback(char*, unsigned char*, unsigned int)+0x18d8>
    d894:	31 97       	sbiw	r30, 0x01	; 1
    d896:	ea 19       	sub	r30, r10
    d898:	fb 09       	sbc	r31, r11
    d89a:	9e 2f       	mov	r25, r30
    d89c:	4e 2f       	mov	r20, r30
    d89e:	84 2f       	mov	r24, r20
    d8a0:	89 1b       	sub	r24, r25
    d8a2:	24 2f       	mov	r18, r20
    d8a4:	30 e0       	ldi	r19, 0x00	; 0
    d8a6:	d4 01       	movw	r26, r8
    d8a8:	0d 90       	ld	r0, X+
    d8aa:	00 20       	and	r0, r0
    d8ac:	e9 f7       	brne	.-6      	; 0xd8a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18f2>
    d8ae:	11 97       	sbiw	r26, 0x01	; 1
    d8b0:	a8 19       	sub	r26, r8
    d8b2:	b9 09       	sbc	r27, r9
    d8b4:	2a 17       	cp	r18, r26
    d8b6:	3b 07       	cpc	r19, r27
    d8b8:	88 f4       	brcc	.+34     	; 0xd8dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1926>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3398
    {
      str1[cnt] = topic[f];
    d8ba:	d5 01       	movw	r26, r10
    d8bc:	a8 0f       	add	r26, r24
    d8be:	b1 1d       	adc	r27, r1
    d8c0:	28 0d       	add	r18, r8
    d8c2:	39 1d       	adc	r19, r9
    d8c4:	f9 01       	movw	r30, r18
    d8c6:	80 81       	ld	r24, Z
    d8c8:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3399
      str1[cnt + 1] = 0;
    d8ca:	11 96       	adiw	r26, 0x01	; 1
    d8cc:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3396
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d8ce:	4f 5f       	subi	r20, 0xFF	; 255
    d8d0:	e6 cf       	rjmp	.-52     	; 0xd89e <mqtt_callback(char*, unsigned char*, unsigned int)+0x18e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3362
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
    d8d2:	8c e7       	ldi	r24, 0x7C	; 124
    d8d4:	95 e0       	ldi	r25, 0x05	; 5
    d8d6:	0e 94 7b 88 	call	0x110f6	; 0x110f6 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    d8da:	64 ce       	rjmp	.-824    	; 0xd5a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15ee>
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:94
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
  pch = strtok (data, "/");
    d8dc:	69 ed       	ldi	r22, 0xD9	; 217
    d8de:	73 e0       	ldi	r23, 0x03	; 3
    d8e0:	c5 01       	movw	r24, r10
    d8e2:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
    d8e6:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:93
uint8_t setting_network(char *data, char *my_payload)
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
    d8e8:	10 e0       	ldi	r17, 0x00	; 0
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:95
  pch = strtok (data, "/");
  while (pch != NULL)
    d8ea:	e1 14       	cp	r14, r1
    d8ec:	f1 04       	cpc	r15, r1
    d8ee:	09 f4       	brne	.+2      	; 0xd8f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x193c>
    d8f0:	a9 c0       	rjmp	.+338    	; 0xda44 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a8e>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:97
  {
    if (strcmp(pch, "mac") == 0)
    d8f2:	60 eb       	ldi	r22, 0xB0	; 176
    d8f4:	75 e0       	ldi	r23, 0x05	; 5
    d8f6:	c7 01       	movw	r24, r14
    d8f8:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d8fc:	89 2b       	or	r24, r25
    d8fe:	41 f4       	brne	.+16     	; 0xd910 <mqtt_callback(char*, unsigned char*, unsigned int)+0x195a>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:99
    {
      parseBytes(my_payload, ':', device.mac, 6, 10);
    d900:	46 e0       	ldi	r20, 0x06	; 6
    d902:	50 e0       	ldi	r21, 0x00	; 0
    d904:	6d e1       	ldi	r22, 0x1D	; 29
    d906:	7c e0       	ldi	r23, 0x0C	; 12
    d908:	8a e3       	ldi	r24, 0x3A	; 58
    d90a:	0e 94 a1 88 	call	0x11142	; 0x11142 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:100
      cnt = 1;
    d90e:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:102
    }
    if (strcmp(pch, "ip") == 0)
    d910:	64 eb       	ldi	r22, 0xB4	; 180
    d912:	75 e0       	ldi	r23, 0x05	; 5
    d914:	c7 01       	movw	r24, r14
    d916:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d91a:	89 2b       	or	r24, r25
    d91c:	41 f4       	brne	.+16     	; 0xd92e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1978>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:104
    {
      parseBytes(my_payload, '.', device.myIP, 4, 10);
    d91e:	44 e0       	ldi	r20, 0x04	; 4
    d920:	50 e0       	ldi	r21, 0x00	; 0
    d922:	63 e2       	ldi	r22, 0x23	; 35
    d924:	7c e0       	ldi	r23, 0x0C	; 12
    d926:	8e e2       	ldi	r24, 0x2E	; 46
    d928:	0e 94 a1 88 	call	0x11142	; 0x11142 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:105
      cnt = 1;
    d92c:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:107
    }
    if (strcmp(pch, "netmask") == 0)
    d92e:	67 eb       	ldi	r22, 0xB7	; 183
    d930:	75 e0       	ldi	r23, 0x05	; 5
    d932:	c7 01       	movw	r24, r14
    d934:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d938:	89 2b       	or	r24, r25
    d93a:	41 f4       	brne	.+16     	; 0xd94c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1996>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:109
    {
      parseBytes(my_payload, '.', device.myMASK, 4, 10);
    d93c:	44 e0       	ldi	r20, 0x04	; 4
    d93e:	50 e0       	ldi	r21, 0x00	; 0
    d940:	67 e2       	ldi	r22, 0x27	; 39
    d942:	7c e0       	ldi	r23, 0x0C	; 12
    d944:	8e e2       	ldi	r24, 0x2E	; 46
    d946:	0e 94 a1 88 	call	0x11142	; 0x11142 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:110
      cnt = 1;
    d94a:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:112
    }
    if (strcmp(pch, "gw") == 0)
    d94c:	6f eb       	ldi	r22, 0xBF	; 191
    d94e:	75 e0       	ldi	r23, 0x05	; 5
    d950:	c7 01       	movw	r24, r14
    d952:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d956:	89 2b       	or	r24, r25
    d958:	41 f4       	brne	.+16     	; 0xd96a <mqtt_callback(char*, unsigned char*, unsigned int)+0x19b4>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:114
    {
      parseBytes(my_payload, '.', device.myGW, 4, 10);
    d95a:	44 e0       	ldi	r20, 0x04	; 4
    d95c:	50 e0       	ldi	r21, 0x00	; 0
    d95e:	6f e2       	ldi	r22, 0x2F	; 47
    d960:	7c e0       	ldi	r23, 0x0C	; 12
    d962:	8e e2       	ldi	r24, 0x2E	; 46
    d964:	0e 94 a1 88 	call	0x11142	; 0x11142 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:115
      cnt = 1;
    d968:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:117
    }
    if (strcmp(pch, "dns") == 0)
    d96a:	62 ec       	ldi	r22, 0xC2	; 194
    d96c:	75 e0       	ldi	r23, 0x05	; 5
    d96e:	c7 01       	movw	r24, r14
    d970:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d974:	89 2b       	or	r24, r25
    d976:	41 f4       	brne	.+16     	; 0xd988 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19d2>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:119
    {
      parseBytes(my_payload, '.', device.myDNS, 4, 10);
    d978:	44 e0       	ldi	r20, 0x04	; 4
    d97a:	50 e0       	ldi	r21, 0x00	; 0
    d97c:	6b e2       	ldi	r22, 0x2B	; 43
    d97e:	7c e0       	ldi	r23, 0x0C	; 12
    d980:	8e e2       	ldi	r24, 0x2E	; 46
    d982:	0e 94 a1 88 	call	0x11142	; 0x11142 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:120
      cnt = 1;
    d986:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:122
    }
    if (strcmp(pch, "ntp") == 0)
    d988:	66 ec       	ldi	r22, 0xC6	; 198
    d98a:	75 e0       	ldi	r23, 0x05	; 5
    d98c:	c7 01       	movw	r24, r14
    d98e:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d992:	89 2b       	or	r24, r25
    d994:	41 f4       	brne	.+16     	; 0xd9a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19f0>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:124
    {
      parseBytes(my_payload, '.', device.ntp_server, 4, 10);
    d996:	44 e0       	ldi	r20, 0x04	; 4
    d998:	50 e0       	ldi	r21, 0x00	; 0
    d99a:	6b e6       	ldi	r22, 0x6B	; 107
    d99c:	7c e0       	ldi	r23, 0x0C	; 12
    d99e:	8e e2       	ldi	r24, 0x2E	; 46
    d9a0:	0e 94 a1 88 	call	0x11142	; 0x11142 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:125
      cnt = 1;
    d9a4:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:127
    }
    if (strcmp(pch, "mqtt_host") == 0)
    d9a6:	6a ec       	ldi	r22, 0xCA	; 202
    d9a8:	75 e0       	ldi	r23, 0x05	; 5
    d9aa:	c7 01       	movw	r24, r14
    d9ac:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d9b0:	89 2b       	or	r24, r25
    d9b2:	41 f4       	brne	.+16     	; 0xd9c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a0e>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:129
    {
      parseBytes(my_payload, '.', device.mqtt_server, 4, 10);
    d9b4:	44 e0       	ldi	r20, 0x04	; 4
    d9b6:	50 e0       	ldi	r21, 0x00	; 0
    d9b8:	6d e3       	ldi	r22, 0x3D	; 61
    d9ba:	7c e0       	ldi	r23, 0x0C	; 12
    d9bc:	8e e2       	ldi	r24, 0x2E	; 46
    d9be:	0e 94 a1 88 	call	0x11142	; 0x11142 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:130
      cnt = 1;
    d9c2:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:132
    }
    if (strcmp(pch, "mqtt_port") == 0)
    d9c4:	64 ed       	ldi	r22, 0xD4	; 212
    d9c6:	75 e0       	ldi	r23, 0x05	; 5
    d9c8:	c7 01       	movw	r24, r14
    d9ca:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d9ce:	89 2b       	or	r24, r25
    d9d0:	49 f4       	brne	.+18     	; 0xd9e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a2e>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:134
    {
      device.mqtt_port = atoi(my_payload);
    d9d2:	89 ed       	ldi	r24, 0xD9	; 217
    d9d4:	9a e0       	ldi	r25, 0x0A	; 10
    d9d6:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    d9da:	90 93 42 0c 	sts	0x0C42, r25	; 0x800c42 <device+0x25>
    d9de:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <device+0x24>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:135
      cnt = 1;
    d9e2:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:137
    }
    if (strcmp(pch, "mqtt_user") == 0)
    d9e4:	6e ed       	ldi	r22, 0xDE	; 222
    d9e6:	75 e0       	ldi	r23, 0x05	; 5
    d9e8:	c7 01       	movw	r24, r14
    d9ea:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    d9ee:	89 2b       	or	r24, r25
    d9f0:	39 f4       	brne	.+14     	; 0xda00 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a4a>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:139
    {
      strcpy(device.mqtt_user, my_payload);
    d9f2:	69 ed       	ldi	r22, 0xD9	; 217
    d9f4:	7a e0       	ldi	r23, 0x0A	; 10
    d9f6:	83 e4       	ldi	r24, 0x43	; 67
    d9f8:	9c e0       	ldi	r25, 0x0C	; 12
    d9fa:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:140
      cnt = 1;
    d9fe:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:142
    }
    if (strcmp(pch, "mqtt_pass") == 0)
    da00:	68 ee       	ldi	r22, 0xE8	; 232
    da02:	75 e0       	ldi	r23, 0x05	; 5
    da04:	c7 01       	movw	r24, r14
    da06:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    da0a:	89 2b       	or	r24, r25
    da0c:	39 f4       	brne	.+14     	; 0xda1c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a66>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:144
    {
      strcpy(device.mqtt_key, my_payload);
    da0e:	69 ed       	ldi	r22, 0xD9	; 217
    da10:	7a e0       	ldi	r23, 0x0A	; 10
    da12:	87 e5       	ldi	r24, 0x57	; 87
    da14:	9c e0       	ldi	r25, 0x0C	; 12
    da16:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:145
      cnt = 1;
    da1a:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:147
    }
    if (strcmp(pch, "name") == 0)
    da1c:	62 eb       	ldi	r22, 0xB2	; 178
    da1e:	73 e0       	ldi	r23, 0x03	; 3
    da20:	c7 01       	movw	r24, r14
    da22:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    da26:	89 2b       	or	r24, r25
    da28:	29 f4       	brne	.+10     	; 0xda34 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a7e>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:149
    {
      device_set_name(my_payload);
    da2a:	89 ed       	ldi	r24, 0xD9	; 217
    da2c:	9a e0       	ldi	r25, 0x0A	; 10
    da2e:	0e 94 03 52 	call	0xa406	; 0xa406 <device_set_name(char*)>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:150
      cnt = 2;
    da32:	12 e0       	ldi	r17, 0x02	; 2
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:152
    }
    pch = strtok (NULL, "/");
    da34:	69 ed       	ldi	r22, 0xD9	; 217
    da36:	73 e0       	ldi	r23, 0x03	; 3
    da38:	90 e0       	ldi	r25, 0x00	; 0
    da3a:	80 e0       	ldi	r24, 0x00	; 0
    da3c:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
    da40:	7c 01       	movw	r14, r24
    da42:	53 cf       	rjmp	.-346    	; 0xd8ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x1934>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3403
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    if (cnt == 1)
    da44:	11 30       	cpi	r17, 0x01	; 1
    da46:	41 f4       	brne	.+16     	; 0xda58 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3405
    {
      save_setup_network();
    da48:	0e 94 2b 52 	call	0xa456	; 0xa456 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3410
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    da4c:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <selftest_data>
    da50:	80 68       	ori	r24, 0x80	; 128
    da52:	80 93 cb 0a 	sts	0x0ACB, r24	; 0x800acb <selftest_data>
    da56:	02 c0       	rjmp	.+4      	; 0xda5c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3408
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    da58:	12 30       	cpi	r17, 0x02	; 2
    da5a:	c1 f3       	breq	.-16     	; 0xda4c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3415
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
    da5c:	68 e6       	ldi	r22, 0x68	; 104
    da5e:	72 e3       	ldi	r23, 0x32	; 50
    da60:	c5 01       	movw	r24, r10
    da62:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3416
  strcat(str1, device.nazev);
    da66:	63 e3       	ldi	r22, 0x33	; 51
    da68:	7c e0       	ldi	r23, 0x0C	; 12
    da6a:	c5 01       	movw	r24, r10
    da6c:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3417
  strcat(str1, "/light/set/");
    da70:	62 ef       	ldi	r22, 0xF2	; 242
    da72:	75 e0       	ldi	r23, 0x05	; 5
    da74:	c5 01       	movw	r24, r10
    da76:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3418
  if (strncmp(str1, topic, strlen(str1)) == 0)
    da7a:	f5 01       	movw	r30, r10
    da7c:	01 90       	ld	r0, Z+
    da7e:	00 20       	and	r0, r0
    da80:	e9 f7       	brne	.-6      	; 0xda7c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ac6>
    da82:	31 97       	sbiw	r30, 0x01	; 1
    da84:	af 01       	movw	r20, r30
    da86:	4a 19       	sub	r20, r10
    da88:	5b 09       	sbc	r21, r11
    da8a:	b4 01       	movw	r22, r8
    da8c:	c5 01       	movw	r24, r10
    da8e:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    da92:	89 2b       	or	r24, r25
    da94:	09 f0       	breq	.+2      	; 0xda98 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ae2>
    da96:	41 c0       	rjmp	.+130    	; 0xdb1a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3420
  {
    mqtt_process_message++;
    da98:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    da9c:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    daa0:	01 96       	adiw	r24, 0x01	; 1
    daa2:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    daa6:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3423
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    daaa:	f5 01       	movw	r30, r10
    daac:	01 90       	ld	r0, Z+
    daae:	00 20       	and	r0, r0
    dab0:	e9 f7       	brne	.-6      	; 0xdaac <mqtt_callback(char*, unsigned char*, unsigned int)+0x1af6>
    dab2:	31 97       	sbiw	r30, 0x01	; 1
    dab4:	ea 19       	sub	r30, r10
    dab6:	fb 09       	sbc	r31, r11
    dab8:	9e 2f       	mov	r25, r30
    daba:	4e 2f       	mov	r20, r30
    dabc:	84 2f       	mov	r24, r20
    dabe:	89 1b       	sub	r24, r25
    dac0:	24 2f       	mov	r18, r20
    dac2:	30 e0       	ldi	r19, 0x00	; 0
    dac4:	d4 01       	movw	r26, r8
    dac6:	0d 90       	ld	r0, X+
    dac8:	00 20       	and	r0, r0
    daca:	e9 f7       	brne	.-6      	; 0xdac6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b10>
    dacc:	11 97       	sbiw	r26, 0x01	; 1
    dace:	a8 19       	sub	r26, r8
    dad0:	b9 09       	sbc	r27, r9
    dad2:	2a 17       	cp	r18, r26
    dad4:	3b 07       	cpc	r19, r27
    dad6:	60 f4       	brcc	.+24     	; 0xdaf0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3425
    {
      str1[cnt] = topic[f];
    dad8:	d5 01       	movw	r26, r10
    dada:	a8 0f       	add	r26, r24
    dadc:	b1 1d       	adc	r27, r1
    dade:	28 0d       	add	r18, r8
    dae0:	39 1d       	adc	r19, r9
    dae2:	f9 01       	movw	r30, r18
    dae4:	80 81       	ld	r24, Z
    dae6:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3426
      str1[cnt + 1] = 0;
    dae8:	11 96       	adiw	r26, 0x01	; 1
    daea:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3423
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    daec:	4f 5f       	subi	r20, 0xFF	; 255
    daee:	e6 cf       	rjmp	.-52     	; 0xdabc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b06>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3430
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    daf0:	69 ed       	ldi	r22, 0xD9	; 217
    daf2:	73 e0       	ldi	r23, 0x03	; 3
    daf4:	c5 01       	movw	r24, r10
    daf6:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3429
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    dafa:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3431
    pch = strtok (str1, "/");
    while (pch != NULL)
    dafc:	00 97       	sbiw	r24, 0x00	; 0
    dafe:	69 f0       	breq	.+26     	; 0xdb1a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3433
    {
      if (cnt == 0) id = atoi(pch);
    db00:	11 11       	cpse	r17, r1
    db02:	03 c0       	rjmp	.+6      	; 0xdb0a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b54>
    db04:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    db08:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3436
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
    db0a:	69 ed       	ldi	r22, 0xD9	; 217
    db0c:	73 e0       	ldi	r23, 0x03	; 3
    db0e:	90 e0       	ldi	r25, 0x00	; 0
    db10:	80 e0       	ldi	r24, 0x00	; 0
    db12:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3437
      cnt++;
    db16:	1f 5f       	subi	r17, 0xFF	; 255
    db18:	f1 cf       	rjmp	.-30     	; 0xdafc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3442
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
    db1a:	6c e1       	ldi	r22, 0x1C	; 28
    db1c:	72 e3       	ldi	r23, 0x32	; 50
    db1e:	c5 01       	movw	r24, r10
    db20:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3443
  strcat(str1, "output/");
    db24:	6e ef       	ldi	r22, 0xFE	; 254
    db26:	75 e0       	ldi	r23, 0x05	; 5
    db28:	c5 01       	movw	r24, r10
    db2a:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3444
  if (strncmp(str1, topic, strlen(str1)) == 0)
    db2e:	f5 01       	movw	r30, r10
    db30:	01 90       	ld	r0, Z+
    db32:	00 20       	and	r0, r0
    db34:	e9 f7       	brne	.-6      	; 0xdb30 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b7a>
    db36:	31 97       	sbiw	r30, 0x01	; 1
    db38:	af 01       	movw	r20, r30
    db3a:	4a 19       	sub	r20, r10
    db3c:	5b 09       	sbc	r21, r11
    db3e:	b4 01       	movw	r22, r8
    db40:	c5 01       	movw	r24, r10
    db42:	0e 94 cb b6 	call	0x16d96	; 0x16d96 <strncmp>
    db46:	89 2b       	or	r24, r25
    db48:	09 f0       	breq	.+2      	; 0xdb4c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b96>
    db4a:	73 c0       	rjmp	.+230    	; 0xdc32 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3446
  {
    mqtt_process_message++;
    db4c:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    db50:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    db54:	01 96       	adiw	r24, 0x01	; 1
    db56:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    db5a:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3448
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    db5e:	f5 01       	movw	r30, r10
    db60:	01 90       	ld	r0, Z+
    db62:	00 20       	and	r0, r0
    db64:	e9 f7       	brne	.-6      	; 0xdb60 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1baa>
    db66:	31 97       	sbiw	r30, 0x01	; 1
    db68:	ea 19       	sub	r30, r10
    db6a:	fb 09       	sbc	r31, r11
    db6c:	9e 2f       	mov	r25, r30
    db6e:	4e 2f       	mov	r20, r30
    db70:	84 2f       	mov	r24, r20
    db72:	89 1b       	sub	r24, r25
    db74:	24 2f       	mov	r18, r20
    db76:	30 e0       	ldi	r19, 0x00	; 0
    db78:	d4 01       	movw	r26, r8
    db7a:	0d 90       	ld	r0, X+
    db7c:	00 20       	and	r0, r0
    db7e:	e9 f7       	brne	.-6      	; 0xdb7a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bc4>
    db80:	11 97       	sbiw	r26, 0x01	; 1
    db82:	a8 19       	sub	r26, r8
    db84:	b9 09       	sbc	r27, r9
    db86:	2a 17       	cp	r18, r26
    db88:	3b 07       	cpc	r19, r27
    db8a:	60 f4       	brcc	.+24     	; 0xdba4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3450
    {
      str1[cnt] = topic[f];
    db8c:	d5 01       	movw	r26, r10
    db8e:	a8 0f       	add	r26, r24
    db90:	b1 1d       	adc	r27, r1
    db92:	28 0d       	add	r18, r8
    db94:	39 1d       	adc	r19, r9
    db96:	f9 01       	movw	r30, r18
    db98:	80 81       	ld	r24, Z
    db9a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3451
      str1[cnt + 1] = 0;
    db9c:	11 96       	adiw	r26, 0x01	; 1
    db9e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3448
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    dba0:	4f 5f       	subi	r20, 0xFF	; 255
    dba2:	e6 cf       	rjmp	.-52     	; 0xdb70 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3455
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    dba4:	69 ed       	ldi	r22, 0xD9	; 217
    dba6:	73 e0       	ldi	r23, 0x03	; 3
    dba8:	c5 01       	movw	r24, r10
    dbaa:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
    dbae:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3454
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    dbb0:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3456
    pch = strtok (str1, "/");
    while (pch != NULL)
    dbb2:	01 15       	cp	r16, r1
    dbb4:	11 05       	cpc	r17, r1
    dbb6:	e9 f1       	breq	.+122    	; 0xdc32 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3458
    {
      if (cnt == 0) id = atoi(pch);
    dbb8:	f1 10       	cpse	r15, r1
    dbba:	0d c0       	rjmp	.+26     	; 0xdbd6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c20>
    dbbc:	c8 01       	movw	r24, r16
    dbbe:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    dbc2:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3469
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
    dbc4:	69 ed       	ldi	r22, 0xD9	; 217
    dbc6:	73 e0       	ldi	r23, 0x03	; 3
    dbc8:	90 e0       	ldi	r25, 0x00	; 0
    dbca:	80 e0       	ldi	r24, 0x00	; 0
    dbcc:	0e 94 45 aa 	call	0x1548a	; 0x1548a <strtok>
    dbd0:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3470
      cnt++;
    dbd2:	f3 94       	inc	r15
    dbd4:	ee cf       	rjmp	.-36     	; 0xdbb2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bfc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3459
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
    dbd6:	f1 e0       	ldi	r31, 0x01	; 1
    dbd8:	ff 12       	cpse	r15, r31
    dbda:	f4 cf       	rjmp	.-24     	; 0xdbc4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c0e>
    dbdc:	8f e5       	ldi	r24, 0x5F	; 95
    dbde:	c8 2e       	mov	r12, r24
    dbe0:	dd 24       	eor	r13, r13
    dbe2:	d3 94       	inc	r13
thermostat_ring_get_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
    dbe4:	c6 01       	movw	r24, r12
    dbe6:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3462
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
    dbea:	78 12       	cpse	r7, r24
    dbec:	19 c0       	rjmp	.+50     	; 0xdc20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3464
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
    dbee:	66 e0       	ldi	r22, 0x06	; 6
    dbf0:	76 e0       	ldi	r23, 0x06	; 6
    dbf2:	c8 01       	movw	r24, r16
    dbf4:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    dbf8:	89 2b       	or	r24, r25
    dbfa:	29 f0       	breq	.+10     	; 0xdc06 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c50>
    dbfc:	e7 2d       	mov	r30, r7
    dbfe:	f0 e0       	ldi	r31, 0x00	; 0
    dc00:	ee 5e       	subi	r30, 0xEE	; 238
    dc02:	f5 4f       	sbci	r31, 0xF5	; 245
    dc04:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3465
            if (strcmp(pch, "state")) last_output_update[id] = 0;
    dc06:	6a e0       	ldi	r22, 0x0A	; 10
    dc08:	76 e0       	ldi	r23, 0x06	; 6
    dc0a:	c8 01       	movw	r24, r16
    dc0c:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    dc10:	89 2b       	or	r24, r25
    dc12:	c1 f2       	breq	.-80     	; 0xdbc4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c0e>
    dc14:	e7 2d       	mov	r30, r7
    dc16:	f0 e0       	ldi	r31, 0x00	; 0
    dc18:	ee 5e       	subi	r30, 0xEE	; 238
    dc1a:	f5 4f       	sbci	r31, 0xF5	; 245
    dc1c:	10 82       	st	Z, r1
    dc1e:	d2 cf       	rjmp	.-92     	; 0xdbc4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c0e>
    dc20:	21 e2       	ldi	r18, 0x21	; 33
    dc22:	c2 0e       	add	r12, r18
    dc24:	d1 1c       	adc	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3461
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    dc26:	84 e0       	ldi	r24, 0x04	; 4
    dc28:	c8 16       	cp	r12, r24
    dc2a:	82 e0       	ldi	r24, 0x02	; 2
    dc2c:	d8 06       	cpc	r13, r24
    dc2e:	d1 f6       	brne	.-76     	; 0xdbe4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c2e>
    dc30:	c9 cf       	rjmp	.-110    	; 0xdbc4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c0e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3475
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    dc32:	68 e6       	ldi	r22, 0x68	; 104
    dc34:	72 e3       	ldi	r23, 0x32	; 50
    dc36:	c5 01       	movw	r24, r10
    dc38:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3476
  strcat(str1, device.nazev);
    dc3c:	63 e3       	ldi	r22, 0x33	; 51
    dc3e:	7c e0       	ldi	r23, 0x0C	; 12
    dc40:	c5 01       	movw	r24, r10
    dc42:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3477
  strcat(str1, "/reload");
    dc46:	60 e1       	ldi	r22, 0x10	; 16
    dc48:	76 e0       	ldi	r23, 0x06	; 6
    dc4a:	c5 01       	movw	r24, r10
    dc4c:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3478
  if (strcmp(str1, topic) == 0)
    dc50:	b4 01       	movw	r22, r8
    dc52:	c5 01       	movw	r24, r10
    dc54:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    dc58:	8c 01       	movw	r16, r24
    dc5a:	89 2b       	or	r24, r25
    dc5c:	79 f4       	brne	.+30     	; 0xdc7c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1cc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3480
  {
    mqtt_process_message++;
    dc5e:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    dc62:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    dc66:	01 96       	adiw	r24, 0x01	; 1
    dc68:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    dc6c:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3481
    log_error(&mqtt_client, "reload ..... ");
    dc70:	88 e1       	ldi	r24, 0x18	; 24
    dc72:	96 e0       	ldi	r25, 0x06	; 6
    dc74:	0e 94 7b 88 	call	0x110f6	; 0x110f6 <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3482
    resetFunc();
    dc78:	f8 01       	movw	r30, r16
    dc7a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3486
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    dc7c:	68 e6       	ldi	r22, 0x68	; 104
    dc7e:	72 e3       	ldi	r23, 0x32	; 50
    dc80:	c5 01       	movw	r24, r10
    dc82:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3487
  strcat(str1, device.nazev);
    dc86:	63 e3       	ldi	r22, 0x33	; 51
    dc88:	7c e0       	ldi	r23, 0x0C	; 12
    dc8a:	c5 01       	movw	r24, r10
    dc8c:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3488
  strcat(str1, "/bootloader");
    dc90:	66 e2       	ldi	r22, 0x26	; 38
    dc92:	76 e0       	ldi	r23, 0x06	; 6
    dc94:	c5 01       	movw	r24, r10
    dc96:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3489
  if (strcmp(str1, topic) == 0)
    dc9a:	b4 01       	movw	r22, r8
    dc9c:	c5 01       	movw	r24, r10
    dc9e:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    dca2:	89 2b       	or	r24, r25
    dca4:	e9 f4       	brne	.+58     	; 0xdce0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3491
  {
    mqtt_process_message++;
    dca6:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    dcaa:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    dcae:	01 96       	adiw	r24, 0x01	; 1
    dcb0:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    dcb4:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3492
    log_error(&mqtt_client, "bootloader ..... ");
    dcb8:	82 e3       	ldi	r24, 0x32	; 50
    dcba:	96 e0       	ldi	r25, 0x06	; 6
    dcbc:	0e 94 7b 88 	call	0x110f6	; 0x110f6 <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3493
    EEPROM.write(bootloader_tag, 255);
    dcc0:	6f ef       	ldi	r22, 0xFF	; 255
    dcc2:	90 e0       	ldi	r25, 0x00	; 0
    dcc4:	80 e0       	ldi	r24, 0x00	; 0
    dcc6:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    dcca:	88 e1       	ldi	r24, 0x18	; 24
    dccc:	9e e0       	ldi	r25, 0x0E	; 14
    dcce:	0f b6       	in	r0, 0x3f	; 63
    dcd0:	f8 94       	cli
    dcd2:	a8 95       	wdr
    dcd4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    dcd8:	0f be       	out	0x3f, r0	; 63
    dcda:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    dcde:	ff cf       	rjmp	.-2      	; 0xdcde <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d28>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3499
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
    dce0:	68 e6       	ldi	r22, 0x68	; 104
    dce2:	72 e3       	ldi	r23, 0x32	; 50
    dce4:	c5 01       	movw	r24, r10
    dce6:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3500
  strcat(str1, device.nazev);
    dcea:	63 e3       	ldi	r22, 0x33	; 51
    dcec:	7c e0       	ldi	r23, 0x0C	; 12
    dcee:	c5 01       	movw	r24, r10
    dcf0:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3501
  strcat(str1, "/default");
    dcf4:	6e e1       	ldi	r22, 0x1E	; 30
    dcf6:	75 e0       	ldi	r23, 0x05	; 5
    dcf8:	c5 01       	movw	r24, r10
    dcfa:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3502
  if (strcmp(str1, topic) == 0)
    dcfe:	b4 01       	movw	r22, r8
    dd00:	c5 01       	movw	r24, r10
    dd02:	0e 94 bb b6 	call	0x16d76	; 0x16d76 <strcmp>
    dd06:	89 2b       	or	r24, r25
    dd08:	91 f4       	brne	.+36     	; 0xdd2e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3504
  {
    mqtt_process_message++;
    dd0a:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
    dd0e:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
    dd12:	01 96       	adiw	r24, 0x01	; 1
    dd14:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_process_message+0x1>
    dd18:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3506
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
    dd1c:	89 ed       	ldi	r24, 0xD9	; 217
    dd1e:	9a e0       	ldi	r25, 0x0A	; 10
    dd20:	0e 94 0c aa 	call	0x15418	; 0x15418 <atoi>
    dd24:	68 2f       	mov	r22, r24
    dd26:	8a e5       	ldi	r24, 0x5A	; 90
    dd28:	90 e0       	ldi	r25, 0x00	; 0
    dd2a:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3509
  }

}
    dd2e:	c4 5d       	subi	r28, 0xD4	; 212
    dd30:	de 4f       	sbci	r29, 0xFE	; 254
    dd32:	0f b6       	in	r0, 0x3f	; 63
    dd34:	f8 94       	cli
    dd36:	de bf       	out	0x3e, r29	; 62
    dd38:	0f be       	out	0x3f, r0	; 63
    dd3a:	cd bf       	out	0x3d, r28	; 61
    dd3c:	df 91       	pop	r29
    dd3e:	cf 91       	pop	r28
    dd40:	1f 91       	pop	r17
    dd42:	0f 91       	pop	r16
    dd44:	ff 90       	pop	r15
    dd46:	ef 90       	pop	r14
    dd48:	df 90       	pop	r13
    dd4a:	cf 90       	pop	r12
    dd4c:	bf 90       	pop	r11
    dd4e:	af 90       	pop	r10
    dd50:	9f 90       	pop	r9
    dd52:	8f 90       	pop	r8
    dd54:	7f 90       	pop	r7
    dd56:	6f 90       	pop	r6
    dd58:	5f 90       	pop	r5
    dd5a:	4f 90       	pop	r4
    dd5c:	3f 90       	pop	r3
    dd5e:	2f 90       	pop	r2
    dd60:	08 95       	ret

0000dd62 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3513
/*************************************************************************************************************************/
/// mqtt_reconent - funkce pro prihlaseni k MQTT topicum
byte mqtt_reconnect(void)
{
    dd62:	0f 93       	push	r16
    dd64:	1f 93       	push	r17
    dd66:	cf 93       	push	r28
    dd68:	df 93       	push	r29
    dd6a:	cd b7       	in	r28, 0x3d	; 61
    dd6c:	de b7       	in	r29, 0x3e	; 62
    dd6e:	a5 97       	sbiw	r28, 0x25	; 37
    dd70:	0f b6       	in	r0, 0x3f	; 63
    dd72:	f8 94       	cli
    dd74:	de bf       	out	0x3e, r29	; 62
    dd76:	0f be       	out	0x3f, r0	; 63
    dd78:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3519
  char nazev[10];
  char topic[26];
  byte ret = MQTT_DISCONNECTED;
  ///  /thermctl/xxxxxxxx/#
  ///  /thermctl/global/#
  device_get_name(nazev);
    dd7a:	ce 01       	movw	r24, r28
    dd7c:	4b 96       	adiw	r24, 0x1b	; 27
    dd7e:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3520
  if (!mqtt_client.connected())
    dd82:	80 e1       	ldi	r24, 0x10	; 16
    dd84:	9e e0       	ldi	r25, 0x0E	; 14
    dd86:	0e 94 2b 93 	call	0x12656	; 0x12656 <PubSubClient::connected()>
    dd8a:	81 11       	cpse	r24, r1
    dd8c:	97 c0       	rjmp	.+302    	; 0xdebc <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:117
boolean PubSubClient::connect(const char *id, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage);
}

boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    if (!connected()) {
    dd8e:	80 e1       	ldi	r24, 0x10	; 16
    dd90:	9e e0       	ldi	r25, 0x0E	; 14
    dd92:	0e 94 2b 93 	call	0x12656	; 0x12656 <PubSubClient::connected()>
    dd96:	81 11       	cpse	r24, r1
    dd98:	d0 c0       	rjmp	.+416    	; 0xdf3a <mqtt_reconnect()+0x1d8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:120
        int result = 0;

        if (domain != NULL) {
    dd9a:	60 91 25 10 	lds	r22, 0x1025	; 0x801025 <mqtt_client+0x215>
    dd9e:	70 91 26 10 	lds	r23, 0x1026	; 0x801026 <mqtt_client+0x216>
    dda2:	80 91 10 0e 	lds	r24, 0x0E10	; 0x800e10 <mqtt_client>
    dda6:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <mqtt_client+0x1>
    ddaa:	dc 01       	movw	r26, r24
    ddac:	ed 91       	ld	r30, X+
    ddae:	fc 91       	ld	r31, X
    ddb0:	40 91 27 10 	lds	r20, 0x1027	; 0x801027 <mqtt_client+0x217>
    ddb4:	50 91 28 10 	lds	r21, 0x1028	; 0x801028 <mqtt_client+0x218>
    ddb8:	61 15       	cp	r22, r1
    ddba:	71 05       	cpc	r23, r1
    ddbc:	09 f4       	brne	.+2      	; 0xddc0 <mqtt_reconnect()+0x5e>
    ddbe:	8b c0       	rjmp	.+278    	; 0xded6 <mqtt_reconnect()+0x174>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:121
            result = _client->connect(this->domain, this->port);
    ddc0:	00 88       	ldd	r0, Z+16	; 0x10
    ddc2:	f1 89       	ldd	r31, Z+17	; 0x11
    ddc4:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        } else {
            result = _client->connect(this->ip, this->port);
    ddc6:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:125
        }
        if (result == 1) {
    ddc8:	81 30       	cpi	r24, 0x01	; 1
    ddca:	91 05       	cpc	r25, r1
    ddcc:	09 f0       	breq	.+2      	; 0xddd0 <mqtt_reconnect()+0x6e>
    ddce:	12 c1       	rjmp	.+548    	; 0xdff4 <mqtt_reconnect()+0x292>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:126
            nextMsgId = 1;
    ddd0:	90 93 13 10 	sts	0x1013, r25	; 0x801013 <mqtt_client+0x203>
    ddd4:	80 93 12 10 	sts	0x1012, r24	; 0x801012 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:135

#if MQTT_VERSION == MQTT_VERSION_3_1
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
    ddd8:	87 e0       	ldi	r24, 0x07	; 7
    ddda:	e6 e1       	ldi	r30, 0x16	; 22
    dddc:	f2 e0       	ldi	r31, 0x02	; 2
    ddde:	de 01       	movw	r26, r28
    dde0:	11 96       	adiw	r26, 0x01	; 1
    dde2:	01 90       	ld	r0, Z+
    dde4:	0d 92       	st	X+, r0
    dde6:	8a 95       	dec	r24
    dde8:	e1 f7       	brne	.-8      	; 0xdde2 <mqtt_reconnect()+0x80>
    ddea:	fe 01       	movw	r30, r28
    ddec:	31 96       	adiw	r30, 0x01	; 1
    ddee:	a7 e1       	ldi	r26, 0x17	; 23
    ddf0:	be e0       	ldi	r27, 0x0E	; 14
    ddf2:	ce 01       	movw	r24, r28
    ddf4:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:139
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
                buffer[length++] = d[j];
    ddf6:	21 91       	ld	r18, Z+
    ddf8:	2d 93       	st	X+, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:138
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
    ddfa:	8e 17       	cp	r24, r30
    ddfc:	9f 07       	cpc	r25, r31
    ddfe:	d9 f7       	brne	.-10     	; 0xddf6 <mqtt_reconnect()+0x94>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:157
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
    de00:	82 e0       	ldi	r24, 0x02	; 2
    de02:	80 93 1e 0e 	sts	0x0E1E, r24	; 0x800e1e <mqtt_client+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:159

            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
    de06:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <mqtt_client+0xf>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:160
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
    de0a:	8f e0       	ldi	r24, 0x0F	; 15
    de0c:	80 93 20 0e 	sts	0x0E20, r24	; 0x800e20 <mqtt_client+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:161
            length = writeString(id,buffer,length);
    de10:	4f e0       	ldi	r20, 0x0F	; 15
    de12:	50 e0       	ldi	r21, 0x00	; 0
    de14:	62 e1       	ldi	r22, 0x12	; 18
    de16:	7e e0       	ldi	r23, 0x0E	; 14
    de18:	ce 01       	movw	r24, r28
    de1a:	4b 96       	adiw	r24, 0x1b	; 27
    de1c:	0e 94 bd 84 	call	0x1097a	; 0x1097a <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:174
                if(pass != NULL) {
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT,buffer,length-5);
    de20:	9c 01       	movw	r18, r24
    de22:	25 50       	subi	r18, 0x05	; 5
    de24:	31 09       	sbc	r19, r1
    de26:	42 e1       	ldi	r20, 0x12	; 18
    de28:	5e e0       	ldi	r21, 0x0E	; 14
    de2a:	60 e1       	ldi	r22, 0x10	; 16
    de2c:	80 e1       	ldi	r24, 0x10	; 16
    de2e:	9e e0       	ldi	r25, 0x0E	; 14
    de30:	0e 94 c5 94 	call	0x1298a	; 0x1298a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:176

            lastInActivity = lastOutActivity = millis();
    de34:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    de38:	60 93 14 10 	sts	0x1014, r22	; 0x801014 <mqtt_client+0x204>
    de3c:	70 93 15 10 	sts	0x1015, r23	; 0x801015 <mqtt_client+0x205>
    de40:	80 93 16 10 	sts	0x1016, r24	; 0x801016 <mqtt_client+0x206>
    de44:	90 93 17 10 	sts	0x1017, r25	; 0x801017 <mqtt_client+0x207>
    de48:	60 93 18 10 	sts	0x1018, r22	; 0x801018 <mqtt_client+0x208>
    de4c:	70 93 19 10 	sts	0x1019, r23	; 0x801019 <mqtt_client+0x209>
    de50:	80 93 1a 10 	sts	0x101A, r24	; 0x80101a <mqtt_client+0x20a>
    de54:	90 93 1b 10 	sts	0x101B, r25	; 0x80101b <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:178

            while (!_client->available()) {
    de58:	80 91 10 0e 	lds	r24, 0x0E10	; 0x800e10 <mqtt_client>
    de5c:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <mqtt_client+0x1>
    de60:	dc 01       	movw	r26, r24
    de62:	ed 91       	ld	r30, X+
    de64:	fc 91       	ld	r31, X
    de66:	00 84       	ldd	r0, Z+8	; 0x08
    de68:	f1 85       	ldd	r31, Z+9	; 0x09
    de6a:	e0 2d       	mov	r30, r0
    de6c:	19 95       	eicall
    de6e:	89 2b       	or	r24, r25
    de70:	09 f0       	breq	.+2      	; 0xde74 <mqtt_reconnect()+0x112>
    de72:	48 c0       	rjmp	.+144    	; 0xdf04 <mqtt_reconnect()+0x1a2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:179
                unsigned long t = millis();
    de74:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:180
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*100)) {
    de78:	00 91 18 10 	lds	r16, 0x1018	; 0x801018 <mqtt_client+0x208>
    de7c:	10 91 19 10 	lds	r17, 0x1019	; 0x801019 <mqtt_client+0x209>
    de80:	20 91 1a 10 	lds	r18, 0x101A	; 0x80101a <mqtt_client+0x20a>
    de84:	30 91 1b 10 	lds	r19, 0x101B	; 0x80101b <mqtt_client+0x20b>
    de88:	60 1b       	sub	r22, r16
    de8a:	71 0b       	sbc	r23, r17
    de8c:	82 0b       	sbc	r24, r18
    de8e:	93 0b       	sbc	r25, r19
    de90:	64 36       	cpi	r22, 0x64	; 100
    de92:	71 05       	cpc	r23, r1
    de94:	81 05       	cpc	r24, r1
    de96:	91 05       	cpc	r25, r1
    de98:	f8 f2       	brcs	.-66     	; 0xde58 <mqtt_reconnect()+0xf6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:181
                    _state = MQTT_CONNECTION_TIMEOUT;
    de9a:	8c ef       	ldi	r24, 0xFC	; 252
    de9c:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    de9e:	90 93 2c 10 	sts	0x102C, r25	; 0x80102c <mqtt_client+0x21c>
    dea2:	80 93 2b 10 	sts	0x102B, r24	; 0x80102b <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:199
                }
            }
            _client->stop();
    dea6:	80 91 10 0e 	lds	r24, 0x0E10	; 0x800e10 <mqtt_client>
    deaa:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <mqtt_client+0x1>
    deae:	dc 01       	movw	r26, r24
    deb0:	ed 91       	ld	r30, X+
    deb2:	fc 91       	ld	r31, X
    deb4:	04 88       	ldd	r0, Z+20	; 0x14
    deb6:	f5 89       	ldd	r31, Z+21	; 0x15
    deb8:	e0 2d       	mov	r30, r0
    deba:	19 95       	eicall
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3549
      strcpy_P(topic, termbig_header_out);
      mqtt_client.subscribe(topic);
    }
  ret = mqtt_client.state();
  return ret;
}
    debc:	80 91 2b 10 	lds	r24, 0x102B	; 0x80102b <mqtt_client+0x21b>
    dec0:	a5 96       	adiw	r28, 0x25	; 37
    dec2:	0f b6       	in	r0, 0x3f	; 63
    dec4:	f8 94       	cli
    dec6:	de bf       	out	0x3e, r29	; 62
    dec8:	0f be       	out	0x3f, r0	; 63
    deca:	cd bf       	out	0x3d, r28	; 61
    decc:	df 91       	pop	r29
    dece:	cf 91       	pop	r28
    ded0:	1f 91       	pop	r17
    ded2:	0f 91       	pop	r16
    ded4:	08 95       	ret
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        int result = 0;

        if (domain != NULL) {
            result = _client->connect(this->domain, this->port);
        } else {
            result = _client->connect(this->ip, this->port);
    ded6:	06 84       	ldd	r0, Z+14	; 0x0e
    ded8:	f7 85       	ldd	r31, Z+15	; 0x0f
    deda:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    dedc:	22 ee       	ldi	r18, 0xE2	; 226
    dede:	32 e0       	ldi	r19, 0x02	; 2
    dee0:	3a 83       	std	Y+2, r19	; 0x02
    dee2:	29 83       	std	Y+1, r18	; 0x01
    dee4:	00 91 21 10 	lds	r16, 0x1021	; 0x801021 <mqtt_client+0x211>
    dee8:	10 91 22 10 	lds	r17, 0x1022	; 0x801022 <mqtt_client+0x212>
    deec:	20 91 23 10 	lds	r18, 0x1023	; 0x801023 <mqtt_client+0x213>
    def0:	30 91 24 10 	lds	r19, 0x1024	; 0x801024 <mqtt_client+0x214>
    def4:	0b 83       	std	Y+3, r16	; 0x03
    def6:	1c 83       	std	Y+4, r17	; 0x04
    def8:	2d 83       	std	Y+5, r18	; 0x05
    defa:	3e 83       	std	Y+6, r19	; 0x06
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
    defc:	be 01       	movw	r22, r28
    defe:	6f 5f       	subi	r22, 0xFF	; 255
    df00:	7f 4f       	sbci	r23, 0xFF	; 255
    df02:	61 cf       	rjmp	.-318    	; 0xddc6 <mqtt_reconnect()+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:187
                    _client->stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
    df04:	ce 01       	movw	r24, r28
    df06:	85 96       	adiw	r24, 0x25	; 37
    df08:	0e 94 79 8c 	call	0x118f2	; 0x118f2 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:189

            if (len == 4) {
    df0c:	04 97       	sbiw	r24, 0x04	; 4
    df0e:	59 f6       	brne	.-106    	; 0xdea6 <mqtt_reconnect()+0x144>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
                if (buffer[3] == 0) {
    df10:	80 91 15 0e 	lds	r24, 0x0E15	; 0x800e15 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    df14:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == 0) {
    df16:	81 11       	cpse	r24, r1
    df18:	c2 cf       	rjmp	.-124    	; 0xde9e <mqtt_reconnect()+0x13c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:191
                    lastInActivity = millis();
    df1a:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    df1e:	60 93 18 10 	sts	0x1018, r22	; 0x801018 <mqtt_client+0x208>
    df22:	70 93 19 10 	sts	0x1019, r23	; 0x801019 <mqtt_client+0x209>
    df26:	80 93 1a 10 	sts	0x101A, r24	; 0x80101a <mqtt_client+0x20a>
    df2a:	90 93 1b 10 	sts	0x101B, r25	; 0x80101b <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:192
                    pingOutstanding = false;
    df2e:	10 92 1c 10 	sts	0x101C, r1	; 0x80101c <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:193
                    _state = MQTT_CONNECTED;
    df32:	10 92 2c 10 	sts	0x102C, r1	; 0x80102c <mqtt_client+0x21c>
    df36:	10 92 2b 10 	sts	0x102B, r1	; 0x80102b <mqtt_client+0x21b>
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3523
  ///  /thermctl/global/#
  device_get_name(nazev);
  if (!mqtt_client.connected())
    if (mqtt_client.connect(nazev))
    {
      strcpy_P(topic, thermctl_header_in);
    df3a:	68 e6       	ldi	r22, 0x68	; 104
    df3c:	72 e3       	ldi	r23, 0x32	; 50
    df3e:	ce 01       	movw	r24, r28
    df40:	01 96       	adiw	r24, 0x01	; 1
    df42:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3524
      strcat(topic, nazev);
    df46:	be 01       	movw	r22, r28
    df48:	65 5e       	subi	r22, 0xE5	; 229
    df4a:	7f 4f       	sbci	r23, 0xFF	; 255
    df4c:	ce 01       	movw	r24, r28
    df4e:	01 96       	adiw	r24, 0x01	; 1
    df50:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3525
      strcat(topic, "/#");
    df54:	6e e9       	ldi	r22, 0x9E	; 158
    df56:	76 e0       	ldi	r23, 0x06	; 6
    df58:	ce 01       	movw	r24, r28
    df5a:	01 96       	adiw	r24, 0x01	; 1
    df5c:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3526
      mqtt_client.subscribe(topic);
    df60:	ce 01       	movw	r24, r28
    df62:	01 96       	adiw	r24, 0x01	; 1
    df64:	0e 94 33 95 	call	0x12a66	; 0x12a66 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3527
      strcpy_P(topic, thermctl_header_in);
    df68:	68 e6       	ldi	r22, 0x68	; 104
    df6a:	72 e3       	ldi	r23, 0x32	; 50
    df6c:	ce 01       	movw	r24, r28
    df6e:	01 96       	adiw	r24, 0x01	; 1
    df70:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3528
      strcat(topic, "global/#");
    df74:	68 e9       	ldi	r22, 0x98	; 152
    df76:	76 e0       	ldi	r23, 0x06	; 6
    df78:	ce 01       	movw	r24, r28
    df7a:	01 96       	adiw	r24, 0x01	; 1
    df7c:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3529
      mqtt_client.subscribe(topic);
    df80:	ce 01       	movw	r24, r28
    df82:	01 96       	adiw	r24, 0x01	; 1
    df84:	0e 94 33 95 	call	0x12a66	; 0x12a66 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3531
      //// /rtds/xxxxx
      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    df88:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3532
        remote_tds_subscibe_topic(idx);
    df8a:	81 2f       	mov	r24, r17
    df8c:	0e 94 6b 5f 	call	0xbed6	; 0xbed6 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3531
      mqtt_client.subscribe(topic);
      strcpy_P(topic, thermctl_header_in);
      strcat(topic, "global/#");
      mqtt_client.subscribe(topic);
      //// /rtds/xxxxx
      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    df90:	1f 5f       	subi	r17, 0xFF	; 255
    df92:	1a 30       	cpi	r17, 0x0A	; 10
    df94:	d1 f7       	brne	.-12     	; 0xdf8a <mqtt_reconnect()+0x228>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3534
        remote_tds_subscibe_topic(idx);
      //// svetelny controller
      strcpy_P(topic, lightctl_header_out);
    df96:	69 e5       	ldi	r22, 0x59	; 89
    df98:	72 e3       	ldi	r23, 0x32	; 50
    df9a:	ce 01       	movw	r24, r28
    df9c:	01 96       	adiw	r24, 0x01	; 1
    df9e:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3535
      strcat(topic, "/#");
    dfa2:	6e e9       	ldi	r22, 0x9E	; 158
    dfa4:	76 e0       	ldi	r23, 0x06	; 6
    dfa6:	ce 01       	movw	r24, r28
    dfa8:	01 96       	adiw	r24, 0x01	; 1
    dfaa:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3536
      mqtt_client.subscribe(topic);
    dfae:	ce 01       	movw	r24, r28
    dfb0:	01 96       	adiw	r24, 0x01	; 1
    dfb2:	0e 94 33 95 	call	0x12a66	; 0x12a66 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3538
      /// zpetna vazba od ostatnich room controleru
      strcpy_P(topic, thermctl_subscribe);
    dfb6:	61 e4       	ldi	r22, 0x41	; 65
    dfb8:	72 e3       	ldi	r23, 0x32	; 50
    dfba:	ce 01       	movw	r24, r28
    dfbc:	01 96       	adiw	r24, 0x01	; 1
    dfbe:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3539
      mqtt_client.subscribe(topic);
    dfc2:	ce 01       	movw	r24, r28
    dfc4:	01 96       	adiw	r24, 0x01	; 1
    dfc6:	0e 94 33 95 	call	0x12a66	; 0x12a66 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3541
      /// zpetna vazba od ostatnich term controlleru
      strcpy_P(topic, termbig_subscribe);
    dfca:	6a e2       	ldi	r22, 0x2A	; 42
    dfcc:	72 e3       	ldi	r23, 0x32	; 50
    dfce:	ce 01       	movw	r24, r28
    dfd0:	01 96       	adiw	r24, 0x01	; 1
    dfd2:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3542
      mqtt_client.subscribe(topic);
    dfd6:	ce 01       	movw	r24, r28
    dfd8:	01 96       	adiw	r24, 0x01	; 1
    dfda:	0e 94 33 95 	call	0x12a66	; 0x12a66 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3544
      /// zpetna vazba od vystupu
      strcpy_P(topic, termbig_header_out);
    dfde:	6c e1       	ldi	r22, 0x1C	; 28
    dfe0:	72 e3       	ldi	r23, 0x32	; 50
    dfe2:	ce 01       	movw	r24, r28
    dfe4:	01 96       	adiw	r24, 0x01	; 1
    dfe6:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3545
      mqtt_client.subscribe(topic);
    dfea:	ce 01       	movw	r24, r28
    dfec:	01 96       	adiw	r24, 0x01	; 1
    dfee:	0e 94 33 95 	call	0x12a66	; 0x12a66 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
    dff2:	64 cf       	rjmp	.-312    	; 0xdebc <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:201
                    _state = buffer[3];
                }
            }
            _client->stop();
        } else {
            _state = MQTT_CONNECT_FAILED;
    dff4:	8e ef       	ldi	r24, 0xFE	; 254
    dff6:	9f ef       	ldi	r25, 0xFF	; 255
    dff8:	90 93 2c 10 	sts	0x102C, r25	; 0x80102c <mqtt_client+0x21c>
    dffc:	80 93 2b 10 	sts	0x102B, r24	; 0x80102b <mqtt_client+0x21b>
    e000:	5d cf       	rjmp	.-326    	; 0xdebc <mqtt_reconnect()+0x15a>

0000e002 <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4223
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
    e002:	2f 92       	push	r2
    e004:	3f 92       	push	r3
    e006:	4f 92       	push	r4
    e008:	5f 92       	push	r5
    e00a:	6f 92       	push	r6
    e00c:	7f 92       	push	r7
    e00e:	8f 92       	push	r8
    e010:	9f 92       	push	r9
    e012:	af 92       	push	r10
    e014:	bf 92       	push	r11
    e016:	cf 92       	push	r12
    e018:	df 92       	push	r13
    e01a:	ef 92       	push	r14
    e01c:	ff 92       	push	r15
    e01e:	0f 93       	push	r16
    e020:	1f 93       	push	r17
    e022:	cf 93       	push	r28
    e024:	df 93       	push	r29
    e026:	cd b7       	in	r28, 0x3d	; 61
    e028:	de b7       	in	r29, 0x3e	; 62
    e02a:	cd 54       	subi	r28, 0x4D	; 77
    e02c:	d1 40       	sbci	r29, 0x01	; 1
    e02e:	0f b6       	in	r0, 0x3f	; 63
    e030:	f8 94       	cli
    e032:	de bf       	out	0x3e, r29	; 62
    e034:	0f be       	out	0x3f, r0	; 63
    e036:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    e038:	1b 82       	std	Y+3, r1	; 0x03
    e03a:	8b ed       	ldi	r24, 0xDB	; 219
    e03c:	93 e0       	ldi	r25, 0x03	; 3
    e03e:	9d 83       	std	Y+5, r25	; 0x05
    e040:	8c 83       	std	Y+4, r24	; 0x04
    e042:	89 e3       	ldi	r24, 0x39	; 57
    e044:	95 e0       	ldi	r25, 0x05	; 5
    e046:	9f 83       	std	Y+7, r25	; 0x07
    e048:	8e 83       	std	Y+6, r24	; 0x06
    e04a:	18 86       	std	Y+8, r1	; 0x08
    e04c:	19 86       	std	Y+9, r1	; 0x09
    e04e:	1a 86       	std	Y+10, r1	; 0x0a
    e050:	1b 86       	std	Y+11, r1	; 0x0b
    e052:	80 e6       	ldi	r24, 0x60	; 96
    e054:	9a ee       	ldi	r25, 0xEA	; 234
    e056:	a0 e0       	ldi	r26, 0x00	; 0
    e058:	b0 e0       	ldi	r27, 0x00	; 0
    e05a:	8c 87       	std	Y+12, r24	; 0x0c
    e05c:	9d 87       	std	Y+13, r25	; 0x0d
    e05e:	ae 87       	std	Y+14, r26	; 0x0e
    e060:	bf 87       	std	Y+15, r27	; 0x0f
    e062:	18 8a       	std	Y+16, r1	; 0x10
    e064:	19 8a       	std	Y+17, r1	; 0x11
    e066:	1a 8a       	std	Y+18, r1	; 0x12
    e068:	1b 8a       	std	Y+19, r1	; 0x13
    e06a:	1c 8a       	std	Y+20, r1	; 0x14
    e06c:	1d 8a       	std	Y+21, r1	; 0x15
    e06e:	1e 8a       	std	Y+22, r1	; 0x16
    e070:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    e072:	8d e2       	ldi	r24, 0x2D	; 45
    e074:	90 e1       	ldi	r25, 0x10	; 16
    e076:	9a 83       	std	Y+2, r25	; 0x02
    e078:	89 83       	std	Y+1, r24	; 0x01
setup_io_pin():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4012
/////////////// HW funkce ///////////////////////////////////////////////////////////////////////

/// setup_io_pin - nastaveni IO pinu
void setup_io_pin(void)
{
  pinMode(ETH_RST, OUTPUT);
    e07a:	61 e0       	ldi	r22, 0x01	; 1
    e07c:	86 e0       	ldi	r24, 0x06	; 6
    e07e:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4013
  pinMode(ETH_CS, OUTPUT);
    e082:	61 e0       	ldi	r22, 0x01	; 1
    e084:	8f e0       	ldi	r24, 0x0F	; 15
    e086:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4014
  pinMode(LED, OUTPUT);
    e08a:	61 e0       	ldi	r22, 0x01	; 1
    e08c:	88 e0       	ldi	r24, 0x08	; 8
    e08e:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4015
  pinMode(PIEZO, OUTPUT);
    e092:	61 e0       	ldi	r22, 0x01	; 1
    e094:	8c e0       	ldi	r24, 0x0C	; 12
    e096:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4016
  pinMode(STORAGE_RAM_CS, OUTPUT);
    e09a:	61 e0       	ldi	r22, 0x01	; 1
    e09c:	86 e1       	ldi	r24, 0x16	; 22
    e09e:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4017
  pinMode(STORAGE_EEPROM_CS, OUTPUT);
    e0a2:	61 e0       	ldi	r22, 0x01	; 1
    e0a4:	87 e1       	ldi	r24, 0x17	; 23
    e0a6:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4018
  pinMode(JUMPER, INPUT_PULLUP);
    e0aa:	62 e0       	ldi	r22, 0x02	; 2
    e0ac:	8e e0       	ldi	r24, 0x0E	; 14
    e0ae:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4020

  digitalWrite(PIEZO, LOW);
    e0b2:	60 e0       	ldi	r22, 0x00	; 0
    e0b4:	8c e0       	ldi	r24, 0x0C	; 12
    e0b6:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4021
  delay(1000);
    e0ba:	68 ee       	ldi	r22, 0xE8	; 232
    e0bc:	73 e0       	ldi	r23, 0x03	; 3
    e0be:	80 e0       	ldi	r24, 0x00	; 0
    e0c0:	90 e0       	ldi	r25, 0x00	; 0
    e0c2:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4022
  digitalWrite(PIEZO, HIGH);
    e0c6:	61 e0       	ldi	r22, 0x01	; 1
    e0c8:	8c e0       	ldi	r24, 0x0C	; 12
    e0ca:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4239

  NTPClient timeClient(udpClient);

  setup_io_pin();

  interrupts();             // enable all interrupts
    e0ce:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4240
  SPI.begin();
    e0d0:	0e 94 3a 36 	call	0x6c74	; 0x6c74 <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4241
  Wire.begin();
    e0d4:	0e 94 73 8a 	call	0x114e6	; 0x114e6 <TwoWire::begin() [clone .constprop.63]>
begin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:240

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
  Wire.begin();
    e0d8:	0e 94 73 8a 	call	0x114e6	; 0x114e6 <TwoWire::begin() [clone .constprop.63]>
mqtt_set_public_mqtt_client():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:459
  send_mqtt_general_payload(mqtt_client, topic, log);
}
///////////////////////////////////////////////////////////////////////////
void mqtt_set_public_mqtt_client(PubSubClient *mqtt_client)
{
  pub_mqtt_client = mqtt_client;
    e0dc:	80 e1       	ldi	r24, 0x10	; 16
    e0de:	9e e0       	ldi	r25, 0x0E	; 14
    e0e0:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <pub_mqtt_client+0x1>
    e0e4:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <pub_mqtt_client>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4245
  rtc.begin();

  mqtt_set_public_mqtt_client(&mqtt_client);
  fdevopen( &printf_via_mqtt, 0);
    e0e8:	70 e0       	ldi	r23, 0x00	; 0
    e0ea:	60 e0       	ldi	r22, 0x00	; 0
    e0ec:	8a ea       	ldi	r24, 0xAA	; 170
    e0ee:	9a e5       	ldi	r25, 0x5A	; 90
    e0f0:	0e 94 a8 aa 	call	0x15550	; 0x15550 <fdevopen>
printf_begin():
/home/saric/Arduino/libraries/RF24/printf.h:31

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
    e0f4:	70 e0       	ldi	r23, 0x00	; 0
    e0f6:	60 e0       	ldi	r22, 0x00	; 0
    e0f8:	8c e2       	ldi	r24, 0x2C	; 44
    e0fa:	92 e3       	ldi	r25, 0x32	; 50
    e0fc:	0e 94 a8 aa 	call	0x15550	; 0x15550 <fdevopen>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4248
  printf_begin();

  swSPI.begin();
    e100:	8f e4       	ldi	r24, 0x4F	; 79
    e102:	90 e1       	ldi	r25, 0x10	; 16
    e104:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <SoftSPIB::begin()>
MenuHistoryInit():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2210
  }
}
///
void MenuHistoryInit(void)
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
    e108:	e0 91 6e 08 	lds	r30, 0x086E	; 0x80086e <MenuHistoryIndex>
    e10c:	f0 e0       	ldi	r31, 0x00	; 0
    e10e:	ec 59       	subi	r30, 0x9C	; 156
    e110:	f7 4f       	sbci	r31, 0xF7	; 247
    e112:	10 82       	st	Z, r1
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
    e114:	0e 94 3f 8b 	call	0x1167e	; 0x1167e <LCDWIKI_KBV::reset() [clone .constprop.71]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
    e118:	80 91 d2 0d 	lds	r24, 0x0DD2	; 0x800dd2 <my_lcd+0x1a>
    e11c:	90 91 d3 0d 	lds	r25, 0x0DD3	; 0x800dd3 <my_lcd+0x1b>
    e120:	01 96       	adiw	r24, 0x01	; 1
    e122:	09 f0       	breq	.+2      	; 0xe126 <setup+0x124>
    e124:	4c c0       	rjmp	.+152    	; 0xe1be <setup+0x1bc>
Read_ID():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:575

//read LCD controller chip ID 
uint16_t LCDWIKI_KBV::Read_ID(void)
{
	uint16_t ret;
	if ((Read_Reg(0x04,0) == 0x00)&&(Read_Reg(0x04,1) == 0x8000))
    e126:	60 e0       	ldi	r22, 0x00	; 0
    e128:	84 e0       	ldi	r24, 0x04	; 4
    e12a:	90 e0       	ldi	r25, 0x00	; 0
    e12c:	0e 94 b0 8b 	call	0x11760	; 0x11760 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    e130:	89 2b       	or	r24, r25
    e132:	39 f5       	brne	.+78     	; 0xe182 <setup+0x180>
    e134:	61 e0       	ldi	r22, 0x01	; 1
    e136:	84 e0       	ldi	r24, 0x04	; 4
    e138:	90 e0       	ldi	r25, 0x00	; 0
    e13a:	0e 94 b0 8b 	call	0x11760	; 0x11760 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    e13e:	81 15       	cp	r24, r1
    e140:	90 48       	sbci	r25, 0x80	; 128
    e142:	f9 f4       	brne	.+62     	; 0xe182 <setup+0x180>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:577
	{
		uint8_t buf[] = {0xFF, 0x83, 0x57};
    e144:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <__malloc_margin+0x9>
    e148:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <__malloc_margin+0xa>
    e14c:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <__malloc_margin+0xb>
    e150:	2b 96       	adiw	r28, 0x0b	; 11
    e152:	8d af       	std	Y+61, r24	; 0x3d
    e154:	9e af       	std	Y+62, r25	; 0x3e
    e156:	af af       	std	Y+63, r26	; 0x3f
    e158:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:578
		Push_Command(HX8357D_SETC, buf, sizeof(buf));
    e15a:	23 e0       	ldi	r18, 0x03	; 3
    e15c:	ae 01       	movw	r20, r28
    e15e:	48 5b       	subi	r20, 0xB8	; 184
    e160:	5f 4f       	sbci	r21, 0xFF	; 255
    e162:	69 eb       	ldi	r22, 0xB9	; 185
    e164:	70 e0       	ldi	r23, 0x00	; 0
    e166:	88 eb       	ldi	r24, 0xB8	; 184
    e168:	9d e0       	ldi	r25, 0x0D	; 13
    e16a:	0e 94 39 37 	call	0x6e72	; 0x6e72 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:579
		ret = (Read_Reg(0xD0,0) << 16) | Read_Reg(0xD0,1);
    e16e:	60 e0       	ldi	r22, 0x00	; 0
    e170:	80 ed       	ldi	r24, 0xD0	; 208
    e172:	90 e0       	ldi	r25, 0x00	; 0
    e174:	0e 94 b0 8b 	call	0x11760	; 0x11760 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    e178:	61 e0       	ldi	r22, 0x01	; 1
    e17a:	80 ed       	ldi	r24, 0xD0	; 208
    e17c:	90 e0       	ldi	r25, 0x00	; 0
    e17e:	0e 94 b0 8b 	call	0x11760	; 0x11760 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:585
		if((ret == 0x990000) || (ret == 0x900000))
		{
			return 0x9090;
		}
	}
	ret = Read_Reg(0xD3,1); //0x9341 0x9486
    e182:	61 e0       	ldi	r22, 0x01	; 1
    e184:	83 ed       	ldi	r24, 0xD3	; 211
    e186:	90 e0       	ldi	r25, 0x00	; 0
    e188:	0e 94 b0 8b 	call	0x11760	; 0x11760 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:586
	if(ret == 0x9341)
    e18c:	81 34       	cpi	r24, 0x41	; 65
    e18e:	a3 e9       	ldi	r26, 0x93	; 147
    e190:	9a 07       	cpc	r25, r26
    e192:	89 f0       	breq	.+34     	; 0xe1b6 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:590
	{
		return 0x9341;
	}
	else if(ret == 0x9486)
    e194:	86 38       	cpi	r24, 0x86	; 134
    e196:	b4 e9       	ldi	r27, 0x94	; 148
    e198:	9b 07       	cpc	r25, r27
    e19a:	69 f0       	breq	.+26     	; 0xe1b6 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:594
	{
		return 0x9486;
	}
	else if(ret == 0x9488)
    e19c:	88 38       	cpi	r24, 0x88	; 136
    e19e:	e4 e9       	ldi	r30, 0x94	; 148
    e1a0:	9e 07       	cpc	r25, r30
    e1a2:	49 f0       	breq	.+18     	; 0xe1b6 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:598
	{
		return 0x9488;
	}
	else if(ret == 0x7796)
    e1a4:	86 39       	cpi	r24, 0x96	; 150
    e1a6:	f7 e7       	ldi	r31, 0x77	; 119
    e1a8:	9f 07       	cpc	r25, r31
    e1aa:	29 f0       	breq	.+10     	; 0xe1b6 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:604
	{
		return 0x7796;
	}
	else
	{
		return Read_Reg(0, 0); //others
    e1ac:	60 e0       	ldi	r22, 0x00	; 0
    e1ae:	90 e0       	ldi	r25, 0x00	; 0
    e1b0:	80 e0       	ldi	r24, 0x00	; 0
    e1b2:	0e 94 b0 8b 	call	0x11760	; 0x11760 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
    e1b6:	90 93 d3 0d 	sts	0x0DD3, r25	; 0x800dd3 <my_lcd+0x1b>
    e1ba:	80 93 d2 0d 	sts	0x0DD2, r24	; 0x800dd2 <my_lcd+0x1a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
    e1be:	00 91 d2 0d 	lds	r16, 0x0DD2	; 0x800dd2 <my_lcd+0x1a>
    e1c2:	10 91 d3 0d 	lds	r17, 0x0DD3	; 0x800dd3 <my_lcd+0x1b>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
    }
}

void LCDWIKI_KBV::start(uint16_t ID)
{
	reset();
    e1c6:	0e 94 3f 8b 	call	0x1167e	; 0x1167e <LCDWIKI_KBV::reset() [clone .constprop.71]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
    e1ca:	68 ec       	ldi	r22, 0xC8	; 200
    e1cc:	70 e0       	ldi	r23, 0x00	; 0
    e1ce:	80 e0       	ldi	r24, 0x00	; 0
    e1d0:	90 e0       	ldi	r25, 0x00	; 0
    e1d2:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
    e1d6:	06 39       	cpi	r16, 0x96	; 150
    e1d8:	17 47       	sbci	r17, 0x77	; 119
    e1da:	09 f0       	breq	.+2      	; 0xe1de <setup+0x1dc>
    e1dc:	34 c3       	rjmp	.+1640   	; 0xe846 <setup+0x844>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
    e1de:	89 e0       	ldi	r24, 0x09	; 9
    e1e0:	90 e0       	ldi	r25, 0x00	; 0
    e1e2:	90 93 d1 0d 	sts	0x0DD1, r25	; 0x800dd1 <my_lcd+0x19>
    e1e6:	80 93 d0 0d 	sts	0x0DD0, r24	; 0x800dd0 <my_lcd+0x18>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    e1ea:	8a e2       	ldi	r24, 0x2A	; 42
    e1ec:	90 e0       	ldi	r25, 0x00	; 0
    e1ee:	90 93 d5 0d 	sts	0x0DD5, r25	; 0x800dd5 <my_lcd+0x1d>
    e1f2:	80 93 d4 0d 	sts	0x0DD4, r24	; 0x800dd4 <my_lcd+0x1c>
    e1f6:	8b e2       	ldi	r24, 0x2B	; 43
    e1f8:	90 e0       	ldi	r25, 0x00	; 0
    e1fa:	90 93 d7 0d 	sts	0x0DD7, r25	; 0x800dd7 <my_lcd+0x1f>
    e1fe:	80 93 d6 0d 	sts	0x0DD6, r24	; 0x800dd6 <my_lcd+0x1e>
    e202:	8c e2       	ldi	r24, 0x2C	; 44
    e204:	90 e0       	ldi	r25, 0x00	; 0
    e206:	90 93 d9 0d 	sts	0x0DD9, r25	; 0x800dd9 <my_lcd+0x21>
    e20a:	80 93 d8 0d 	sts	0x0DD8, r24	; 0x800dd8 <my_lcd+0x20>
    e20e:	8e e2       	ldi	r24, 0x2E	; 46
    e210:	90 e0       	ldi	r25, 0x00	; 0
    e212:	90 93 db 0d 	sts	0x0DDB, r25	; 0x800ddb <my_lcd+0x23>
    e216:	80 93 da 0d 	sts	0x0DDA, r24	; 0x800dda <my_lcd+0x22>
    e21a:	83 e3       	ldi	r24, 0x33	; 51
    e21c:	90 e0       	ldi	r25, 0x00	; 0
    e21e:	90 93 dd 0d 	sts	0x0DDD, r25	; 0x800ddd <my_lcd+0x25>
    e222:	80 93 dc 0d 	sts	0x0DDC, r24	; 0x800ddc <my_lcd+0x24>
    e226:	87 e3       	ldi	r24, 0x37	; 55
    e228:	90 e0       	ldi	r25, 0x00	; 0
    e22a:	90 93 df 0d 	sts	0x0DDF, r25	; 0x800ddf <my_lcd+0x27>
    e22e:	80 93 de 0d 	sts	0x0DDE, r24	; 0x800dde <my_lcd+0x26>
    e232:	86 e3       	ldi	r24, 0x36	; 54
    e234:	90 e0       	ldi	r25, 0x00	; 0
    e236:	90 93 e1 0d 	sts	0x0DE1, r25	; 0x800de1 <my_lcd+0x29>
    e23a:	80 93 e0 0d 	sts	0x0DE0, r24	; 0x800de0 <my_lcd+0x28>
    e23e:	10 92 e3 0d 	sts	0x0DE3, r1	; 0x800de3 <my_lcd+0x2b>
    e242:	10 92 e2 0d 	sts	0x0DE2, r1	; 0x800de2 <my_lcd+0x2a>
    e246:	10 92 e5 0d 	sts	0x0DE5, r1	; 0x800de5 <my_lcd+0x2d>
    e24a:	10 92 e4 0d 	sts	0x0DE4, r1	; 0x800de4 <my_lcd+0x2c>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:912
}

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    e24e:	26 e7       	ldi	r18, 0x76	; 118
    e250:	e2 2e       	mov	r14, r18
    e252:	22 e3       	ldi	r18, 0x32	; 50
    e254:	f2 2e       	mov	r15, r18
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965

		case 0x7796:
			lcd_driver = ID_7796;
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    e256:	3c e6       	ldi	r19, 0x6C	; 108
    e258:	c3 2e       	mov	r12, r19
    e25a:	d1 2c       	mov	r13, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:915
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
	{
        uint8_t cmd = pgm_read_byte(p++);
    e25c:	f7 01       	movw	r30, r14
    e25e:	64 91       	lpm	r22, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:916
        uint8_t len = pgm_read_byte(p++);
    e260:	31 96       	adiw	r30, 0x01	; 1
    e262:	14 91       	lpm	r17, Z
    e264:	f2 e0       	ldi	r31, 0x02	; 2
    e266:	ef 0e       	add	r14, r31
    e268:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:917
        if (cmd == TFTLCD_DELAY8) 
    e26a:	6f 37       	cpi	r22, 0x7F	; 127
    e26c:	89 f0       	breq	.+34     	; 0xe290 <setup+0x28e>
    e26e:	de 01       	movw	r26, r28
    e270:	a8 5b       	subi	r26, 0xB8	; 184
    e272:	bf 4f       	sbci	r27, 0xFF	; 255
    e274:	30 e0       	ldi	r19, 0x00	; 0
    e276:	20 e0       	ldi	r18, 0x00	; 0
    e278:	ad 01       	movw	r20, r26
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:924
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
    e27a:	21 17       	cp	r18, r17
    e27c:	08 f0       	brcs	.+2      	; 0xe280 <setup+0x27e>
    e27e:	da c2       	rjmp	.+1460   	; 0xe834 <setup+0x832>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:926
            {
                dat[i] = pgm_read_byte(p++);
    e280:	f7 01       	movw	r30, r14
    e282:	e2 0f       	add	r30, r18
    e284:	f3 1f       	adc	r31, r19
    e286:	e4 91       	lpm	r30, Z
    e288:	ed 93       	st	X+, r30
    e28a:	2f 5f       	subi	r18, 0xFF	; 255
    e28c:	3f 4f       	sbci	r19, 0xFF	; 255
    e28e:	f5 cf       	rjmp	.-22     	; 0xe27a <setup+0x278>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:919
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
    e290:	61 2f       	mov	r22, r17
    e292:	70 e0       	ldi	r23, 0x00	; 0
    e294:	90 e0       	ldi	r25, 0x00	; 0
    e296:	80 e0       	ldi	r24, 0x00	; 0
    e298:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:920
            len = 0;
    e29c:	10 e0       	ldi	r17, 0x00	; 0
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:930
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
    e29e:	61 2f       	mov	r22, r17
    e2a0:	70 e0       	ldi	r23, 0x00	; 0
    e2a2:	6e 5f       	subi	r22, 0xFE	; 254
    e2a4:	7f 4f       	sbci	r23, 0xFF	; 255
    e2a6:	c6 1a       	sub	r12, r22
    e2a8:	d7 0a       	sbc	r13, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:913

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
    e2aa:	1c 14       	cp	r1, r12
    e2ac:	1d 04       	cpc	r1, r13
    e2ae:	b4 f2       	brlt	.-84     	; 0xe25c <setup+0x25a>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
    e2b0:	80 91 ce 0d 	lds	r24, 0x0DCE	; 0x800dce <my_lcd+0x16>
    e2b4:	0e 94 da 85 	call	0x10bb4	; 0x10bb4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:892
}

//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
    e2b8:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x2e>
    e2bc:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x2f>
    e2c0:	80 81       	ld	r24, Z
    e2c2:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3a>
    e2c6:	89 23       	and	r24, r25
    e2c8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:893
	uint8_t val = VL^i;
    e2ca:	90 91 e2 0d 	lds	r25, 0x0DE2	; 0x800de2 <my_lcd+0x2a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
	if(lcd_driver == ID_932X)
    e2ce:	20 91 d0 0d 	lds	r18, 0x0DD0	; 0x800dd0 <my_lcd+0x18>
    e2d2:	30 91 d1 0d 	lds	r19, 0x0DD1	; 0x800dd1 <my_lcd+0x19>
    e2d6:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
    e2da:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
    e2de:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <my_lcd+0x3b>
    e2e2:	21 15       	cp	r18, r1
    e2e4:	31 05       	cpc	r19, r1
    e2e6:	09 f0       	breq	.+2      	; 0xe2ea <setup+0x2e8>
    e2e8:	b5 c2       	rjmp	.+1386   	; 0xe854 <setup+0x852>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
    e2ea:	20 81       	ld	r18, Z
    e2ec:	82 23       	and	r24, r18
    e2ee:	80 83       	st	Z, r24
    e2f0:	81 e6       	ldi	r24, 0x61	; 97
    e2f2:	82 b9       	out	0x02, r24	; 2
    e2f4:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
    e2f8:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
    e2fc:	80 81       	ld	r24, Z
    e2fe:	20 91 f4 0d 	lds	r18, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
    e302:	82 23       	and	r24, r18
    e304:	80 83       	st	Z, r24
    e306:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
    e30a:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
    e30e:	80 81       	ld	r24, Z
    e310:	20 91 f0 0d 	lds	r18, 0x0DF0	; 0x800df0 <my_lcd+0x38>
    e314:	82 2b       	or	r24, r18
    e316:	80 83       	st	Z, r24
    e318:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
    e31c:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
    e320:	80 81       	ld	r24, Z
    e322:	20 91 ef 0d 	lds	r18, 0x0DEF	; 0x800def <my_lcd+0x37>
    e326:	82 2b       	or	r24, r18
    e328:	80 83       	st	Z, r24
    e32a:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	}
	else if(lcd_driver == ID_7575)
	{
		writeCmdData8(0x01, val ? 8 : 10);
    e32c:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
    e330:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
    e334:	80 81       	ld	r24, Z
    e336:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
    e33a:	89 23       	and	r24, r25
    e33c:	80 83       	st	Z, r24
    e33e:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
    e342:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
    e346:	80 81       	ld	r24, Z
    e348:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    e34c:	89 2b       	or	r24, r25
    e34e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:906
	}
	CS_IDLE;
    e350:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x2e>
    e354:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x2f>
    e358:	80 81       	ld	r24, Z
    e35a:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x36>
    e35e:	89 2b       	or	r24, r25
    e360:	80 83       	st	Z, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4253
  swSPI.begin();

  MenuHistoryInit();

  my_lcd.Init_LCD();
  my_lcd.Set_Rotation(3);
    e362:	83 e0       	ldi	r24, 0x03	; 3
    e364:	0e 94 da 85 	call	0x10bb4	; 0x10bb4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>
TP_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:341
	return touch_statue&TP_PRES_DOWN;
}

void LCDWIKI_TOUCH::TP_Set_Rotation(uint8_t val)
{
	touch_rotation = val;
    e368:	83 e0       	ldi	r24, 0x03	; 3
    e36a:	80 93 a7 0d 	sts	0x0DA7, r24	; 0x800da7 <my_touch+0xd>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    e36e:	20 91 cc 0d 	lds	r18, 0x0DCC	; 0x800dcc <my_lcd+0x14>
    e372:	30 91 cd 0d 	lds	r19, 0x0DCD	; 0x800dcd <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
    e376:	40 91 ca 0d 	lds	r20, 0x0DCA	; 0x800dca <my_lcd+0x12>
    e37a:	50 91 cb 0d 	lds	r21, 0x0DCB	; 0x800dcb <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
    e37e:	90 91 ce 0d 	lds	r25, 0x0DCE	; 0x800dce <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
    e382:	e0 91 af 0d 	lds	r30, 0x0DAF	; 0x800daf <my_touch+0x15>
    e386:	f0 91 b0 0d 	lds	r31, 0x0DB0	; 0x800db0 <my_touch+0x16>
    e38a:	80 81       	ld	r24, Z
    e38c:	60 91 b6 0d 	lds	r22, 0x0DB6	; 0x800db6 <my_touch+0x1c>
    e390:	86 2b       	or	r24, r22
    e392:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
    e394:	e0 91 ab 0d 	lds	r30, 0x0DAB	; 0x800dab <my_touch+0x11>
    e398:	f0 91 ac 0d 	lds	r31, 0x0DAC	; 0x800dac <my_touch+0x12>
    e39c:	80 81       	ld	r24, Z
    e39e:	60 91 b4 0d 	lds	r22, 0x0DB4	; 0x800db4 <my_touch+0x1a>
    e3a2:	86 2b       	or	r24, r22
    e3a4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
    e3a6:	e0 91 a9 0d 	lds	r30, 0x0DA9	; 0x800da9 <my_touch+0xf>
    e3aa:	f0 91 aa 0d 	lds	r31, 0x0DAA	; 0x800daa <my_touch+0x10>
    e3ae:	80 81       	ld	r24, Z
    e3b0:	60 91 b3 0d 	lds	r22, 0x0DB3	; 0x800db3 <my_touch+0x19>
    e3b4:	86 2b       	or	r24, r22
    e3b6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
    e3b8:	50 93 a3 0d 	sts	0x0DA3, r21	; 0x800da3 <my_touch+0x9>
    e3bc:	40 93 a2 0d 	sts	0x0DA2, r20	; 0x800da2 <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
    e3c0:	30 93 a5 0d 	sts	0x0DA5, r19	; 0x800da5 <my_touch+0xb>
    e3c4:	20 93 a4 0d 	sts	0x0DA4, r18	; 0x800da4 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
    e3c8:	90 93 a8 0d 	sts	0x0DA8, r25	; 0x800da8 <my_touch+0xe>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4256
  my_touch.TP_Set_Rotation(3);
  my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
  my_lcd.Fill_Screen(WHITE);
    e3cc:	8f ef       	ldi	r24, 0xFF	; 255
    e3ce:	9f ef       	ldi	r25, 0xFF	; 255
    e3d0:	0e 94 37 84 	call	0x1086e	; 0x1086e <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    e3d4:	8f e1       	ldi	r24, 0x1F	; 31
    e3d6:	90 e0       	ldi	r25, 0x00	; 0
    e3d8:	90 93 c3 0d 	sts	0x0DC3, r25	; 0x800dc3 <my_lcd+0xb>
    e3dc:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <my_lcd+0xa>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4258
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
    e3e0:	1e 01       	movw	r2, r28
    e3e2:	28 e4       	ldi	r18, 0x48	; 72
    e3e4:	22 0e       	add	r2, r18
    e3e6:	31 1c       	adc	r3, r1
    e3e8:	6d ee       	ldi	r22, 0xED	; 237
    e3ea:	73 e3       	ldi	r23, 0x33	; 51
    e3ec:	c1 01       	movw	r24, r2
    e3ee:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4259
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
    e3f2:	ee 24       	eor	r14, r14
    e3f4:	ea 94       	dec	r14
    e3f6:	fe 2c       	mov	r15, r14
    e3f8:	0f e1       	ldi	r16, 0x1F	; 31
    e3fa:	10 e0       	ldi	r17, 0x00	; 0
    e3fc:	22 e0       	ldi	r18, 0x02	; 2
    e3fe:	4a e0       	ldi	r20, 0x0A	; 10
    e400:	50 e0       	ldi	r21, 0x00	; 0
    e402:	6e e1       	ldi	r22, 0x1E	; 30
    e404:	70 e0       	ldi	r23, 0x00	; 0
    e406:	c1 01       	movw	r24, r2
    e408:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    e40c:	8e e1       	ldi	r24, 0x1E	; 30
    e40e:	90 e0       	ldi	r25, 0x00	; 0
    e410:	c4 5c       	subi	r28, 0xC4	; 196
    e412:	de 4f       	sbci	r29, 0xFE	; 254
    e414:	99 83       	std	Y+1, r25	; 0x01
    e416:	88 83       	st	Y, r24
    e418:	cc 53       	subi	r28, 0x3C	; 60
    e41a:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4261
  ///
  for (uint8_t init = 0;  init < 16; init++)
    e41c:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4624
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    {
      strcpy_P(str1, text_rtc_cas);
    e41e:	d2 2c       	mov	r13, r2
    e420:	b3 2c       	mov	r11, r3
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    e422:	a2 e3       	ldi	r26, 0x32	; 50
    e424:	b1 e0       	ldi	r27, 0x01	; 1
    e426:	ac 0f       	add	r26, r28
    e428:	bd 1f       	adc	r27, r29
    e42a:	12 96       	adiw	r26, 0x02	; 2
    e42c:	cc 5b       	subi	r28, 0xBC	; 188
    e42e:	de 4f       	sbci	r29, 0xFE	; 254
    e430:	b9 83       	std	Y+1, r27	; 0x01
    e432:	a8 83       	st	Y, r26
    e434:	c4 54       	subi	r28, 0x44	; 68
    e436:	d1 40       	sbci	r29, 0x01	; 1
    e438:	ec e2       	ldi	r30, 0x2C	; 44
    e43a:	f1 e0       	ldi	r31, 0x01	; 1
    e43c:	ec 0f       	add	r30, r28
    e43e:	fd 1f       	adc	r31, r29
    e440:	32 96       	adiw	r30, 0x02	; 2
    e442:	ca 5b       	subi	r28, 0xBA	; 186
    e444:	de 4f       	sbci	r29, 0xFE	; 254
    e446:	f9 83       	std	Y+1, r31	; 0x01
    e448:	e8 83       	st	Y, r30
    e44a:	c6 54       	subi	r28, 0x46	; 70
    e44c:	d1 40       	sbci	r29, 0x01	; 1
    e44e:	26 e2       	ldi	r18, 0x26	; 38
    e450:	31 e0       	ldi	r19, 0x01	; 1
    e452:	2c 0f       	add	r18, r28
    e454:	3d 1f       	adc	r19, r29
    e456:	2e 5f       	subi	r18, 0xFE	; 254
    e458:	3f 4f       	sbci	r19, 0xFF	; 255
    e45a:	c8 5b       	subi	r28, 0xB8	; 184
    e45c:	de 4f       	sbci	r29, 0xFE	; 254
    e45e:	39 83       	std	Y+1, r19	; 0x01
    e460:	28 83       	st	Y, r18
    e462:	c8 54       	subi	r28, 0x48	; 72
    e464:	d1 40       	sbci	r29, 0x01	; 1
    e466:	8e ed       	ldi	r24, 0xDE	; 222
    e468:	90 e0       	ldi	r25, 0x00	; 0
    e46a:	8c 0f       	add	r24, r28
    e46c:	9d 1f       	adc	r25, r29
    e46e:	02 96       	adiw	r24, 0x02	; 2
    e470:	c6 5b       	subi	r28, 0xB6	; 182
    e472:	de 4f       	sbci	r29, 0xFE	; 254
    e474:	99 83       	std	Y+1, r25	; 0x01
    e476:	88 83       	st	Y, r24
    e478:	ca 54       	subi	r28, 0x4A	; 74
    e47a:	d1 40       	sbci	r29, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4363
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
    e47c:	a8 ec       	ldi	r26, 0xC8	; 200
    e47e:	b0 e0       	ldi	r27, 0x00	; 0
    e480:	ac 0f       	add	r26, r28
    e482:	bd 1f       	adc	r27, r29
    e484:	1c 96       	adiw	r26, 0x0c	; 12
    e486:	c4 5b       	subi	r28, 0xB4	; 180
    e488:	de 4f       	sbci	r29, 0xFE	; 254
    e48a:	b9 83       	std	Y+1, r27	; 0x01
    e48c:	a8 83       	st	Y, r26
    e48e:	cc 54       	subi	r28, 0x4C	; 76
    e490:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4263
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
    e492:	ee 24       	eor	r14, r14
    e494:	ea 94       	dec	r14
    e496:	fe 2c       	mov	r15, r14
    e498:	00 e0       	ldi	r16, 0x00	; 0
    e49a:	18 ef       	ldi	r17, 0xF8	; 248
    e49c:	21 e0       	ldi	r18, 0x01	; 1
    e49e:	4e e1       	ldi	r20, 0x1E	; 30
    e4a0:	50 e0       	ldi	r21, 0x00	; 0
    e4a2:	c4 5c       	subi	r28, 0xC4	; 196
    e4a4:	de 4f       	sbci	r29, 0xFE	; 254
    e4a6:	68 81       	ld	r22, Y
    e4a8:	79 81       	ldd	r23, Y+1	; 0x01
    e4aa:	cc 53       	subi	r28, 0x3C	; 60
    e4ac:	d1 40       	sbci	r29, 0x01	; 1
    e4ae:	81 ea       	ldi	r24, 0xA1	; 161
    e4b0:	96 e0       	ldi	r25, 0x06	; 6
    e4b2:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4265
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
    e4b6:	a1 10       	cpse	r10, r1
    e4b8:	18 c2       	rjmp	.+1072   	; 0xe8ea <setup+0x8e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4267
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    e4ba:	6d ed       	ldi	r22, 0xDD	; 221
    e4bc:	73 e3       	ldi	r23, 0x33	; 51
    e4be:	c1 01       	movw	r24, r2
    e4c0:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4268
      strcat(str1, ":1");
    e4c4:	63 ea       	ldi	r22, 0xA3	; 163
    e4c6:	76 e0       	ldi	r23, 0x06	; 6
    e4c8:	c1 01       	movw	r24, r2
    e4ca:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4269
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e4ce:	00 ee       	ldi	r16, 0xE0	; 224
    e4d0:	17 e0       	ldi	r17, 0x07	; 7
    e4d2:	21 e0       	ldi	r18, 0x01	; 1
    e4d4:	42 e3       	ldi	r20, 0x32	; 50
    e4d6:	50 e0       	ldi	r21, 0x00	; 0
    e4d8:	6e e1       	ldi	r22, 0x1E	; 30
    e4da:	70 e0       	ldi	r23, 0x00	; 0
    e4dc:	c1 01       	movw	r24, r2
    e4de:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4271

      tritri = 0;
    e4e2:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <tritri+0x1>
    e4e6:	10 92 0a 0a 	sts	0x0A0A, r1	; 0x800a0a <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4272
      petnula = 0;
    e4ea:	10 92 09 0a 	sts	0x0A09, r1	; 0x800a09 <petnula+0x1>
    e4ee:	10 92 08 0a 	sts	0x0A08, r1	; 0x800a08 <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4273
      dvanact = 0;
    e4f2:	10 92 07 0a 	sts	0x0A07, r1	; 0x800a07 <dvanact+0x1>
    e4f6:	10 92 06 0a 	sts	0x0A06, r1	; 0x800a06 <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4275
      dvanact = 0;
      light_curr = 0;
    e4fa:	10 92 cf 0a 	sts	0x0ACF, r1	; 0x800acf <light_curr+0x1>
    e4fe:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <light_curr>
init_a2d():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:35

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// inicializace a2d prevodniku //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_a2d(uint8_t enable_channel, uint8_t delicka, uint8_t reference)
{
a2d_enable = enable_channel;
    e502:	88 ef       	ldi	r24, 0xF8	; 248
    e504:	80 93 cc 0a 	sts	0x0ACC, r24	; 0x800acc <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:36
a2d_reference = reference;
    e508:	83 e0       	ldi	r24, 0x03	; 3
    e50a:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <a2d_reference>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:38
a2d_delicka = delicka;
a2d_index = 0;
    e50e:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:39
a2d_input = 0;
    e512:	10 92 b8 09 	sts	0x09B8, r1	; 0x8009b8 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:41
a2d_data = 0;
ADCSRA = ((1<<ADEN|1<<ADIE) + (a2d_delicka & 7));
    e516:	8e e8       	ldi	r24, 0x8E	; 142
    e518:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:42
ADMUX = 0;
    e51c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:43
ADMUX = ((a2d_reference & 3) << 6) ;
    e520:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <a2d_reference>
    e524:	b0 e4       	ldi	r27, 0x40	; 64
    e526:	8b 9f       	mul	r24, r27
    e528:	c0 01       	movw	r24, r0
    e52a:	11 24       	eor	r1, r1
    e52c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
a2d_handler():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:18
typedef void (*a2d_interupt)(uint8_t, uint16_t);
volatile static a2d_interupt a2d_interupt_func;

void a2d_handler(void (*a2d_command)(uint8_t channel, uint16_t data))
{
a2d_interupt_func = a2d_command;
    e530:	85 e2       	ldi	r24, 0x25	; 37
    e532:	95 e2       	ldi	r25, 0x25	; 37
    e534:	90 93 ba 09 	sts	0x09BA, r25	; 0x8009ba <_ZL17a2d_interupt_func.lto_priv.228+0x1>
    e538:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <_ZL17a2d_interupt_func.lto_priv.228>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4281
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
      a2d_handler(a2d_complete);
      ///
      /// spotreba proudu
      a2d_run_now = 0;
    e53c:	10 92 d0 0a 	sts	0x0AD0, r1	; 0x800ad0 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4282
      a2d_start_first(A_PROUD);
    e540:	83 e0       	ldi	r24, 0x03	; 3
    e542:	0e 94 41 8e 	call	0x11c82	; 0x11c82 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4283
      milis = millis();
    e546:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    e54a:	2b 01       	movw	r4, r22
    e54c:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4284
      while (a2d_run_now == 0 && millis() - milis < 10);
    e54e:	80 91 d0 0a 	lds	r24, 0x0AD0	; 0x800ad0 <a2d_run_now>
    e552:	81 11       	cpse	r24, r1
    e554:	0b c0       	rjmp	.+22     	; 0xe56c <setup+0x56a>
    e556:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    e55a:	64 19       	sub	r22, r4
    e55c:	75 09       	sbc	r23, r5
    e55e:	86 09       	sbc	r24, r6
    e560:	97 09       	sbc	r25, r7
    e562:	6a 30       	cpi	r22, 0x0A	; 10
    e564:	71 05       	cpc	r23, r1
    e566:	81 05       	cpc	r24, r1
    e568:	91 05       	cpc	r25, r1
    e56a:	88 f3       	brcs	.-30     	; 0xe54e <setup+0x54c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4286
      /// regulator 3.3V
      a2d_run_now = 0;
    e56c:	10 92 d0 0a 	sts	0x0AD0, r1	; 0x800ad0 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4287
      a2d_start_first(A_TRIV);
    e570:	86 e0       	ldi	r24, 0x06	; 6
    e572:	0e 94 41 8e 	call	0x11c82	; 0x11c82 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4288
      milis = millis();
    e576:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    e57a:	2b 01       	movw	r4, r22
    e57c:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4289
      while (a2d_run_now == 0 && millis() - milis < 10);
    e57e:	80 91 d0 0a 	lds	r24, 0x0AD0	; 0x800ad0 <a2d_run_now>
    e582:	81 11       	cpse	r24, r1
    e584:	0b c0       	rjmp	.+22     	; 0xe59c <setup+0x59a>
    e586:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    e58a:	64 19       	sub	r22, r4
    e58c:	75 09       	sbc	r23, r5
    e58e:	86 09       	sbc	r24, r6
    e590:	97 09       	sbc	r25, r7
    e592:	6a 30       	cpi	r22, 0x0A	; 10
    e594:	71 05       	cpc	r23, r1
    e596:	81 05       	cpc	r24, r1
    e598:	91 05       	cpc	r25, r1
    e59a:	88 f3       	brcs	.-30     	; 0xe57e <setup+0x57c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4291
      /// regulator 5.0V
      a2d_run_now = 0;
    e59c:	10 92 d0 0a 	sts	0x0AD0, r1	; 0x800ad0 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4292
      a2d_start_first(A_PETV);
    e5a0:	85 e0       	ldi	r24, 0x05	; 5
    e5a2:	0e 94 41 8e 	call	0x11c82	; 0x11c82 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4293
      milis = millis();
    e5a6:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    e5aa:	2b 01       	movw	r4, r22
    e5ac:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4294
      while (a2d_run_now == 0 && millis() - milis < 10);
    e5ae:	80 91 d0 0a 	lds	r24, 0x0AD0	; 0x800ad0 <a2d_run_now>
    e5b2:	81 11       	cpse	r24, r1
    e5b4:	0b c0       	rjmp	.+22     	; 0xe5cc <setup+0x5ca>
    e5b6:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    e5ba:	64 19       	sub	r22, r4
    e5bc:	75 09       	sbc	r23, r5
    e5be:	86 09       	sbc	r24, r6
    e5c0:	97 09       	sbc	r25, r7
    e5c2:	6a 30       	cpi	r22, 0x0A	; 10
    e5c4:	71 05       	cpc	r23, r1
    e5c6:	81 05       	cpc	r24, r1
    e5c8:	91 05       	cpc	r25, r1
    e5ca:	88 f3       	brcs	.-30     	; 0xe5ae <setup+0x5ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4296
      /// vstupni napeti 12V
      a2d_run_now = 0;
    e5cc:	10 92 d0 0a 	sts	0x0AD0, r1	; 0x800ad0 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4297
      a2d_start_first(A_DVANACTV);
    e5d0:	84 e0       	ldi	r24, 0x04	; 4
    e5d2:	0e 94 41 8e 	call	0x11c82	; 0x11c82 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4298
      milis = millis();
    e5d6:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    e5da:	2b 01       	movw	r4, r22
    e5dc:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4299
      while (a2d_run_now == 0 && millis() - milis < 10);
    e5de:	80 91 d0 0a 	lds	r24, 0x0AD0	; 0x800ad0 <a2d_run_now>
    e5e2:	81 11       	cpse	r24, r1
    e5e4:	0b c0       	rjmp	.+22     	; 0xe5fc <setup+0x5fa>
    e5e6:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    e5ea:	64 19       	sub	r22, r4
    e5ec:	75 09       	sbc	r23, r5
    e5ee:	86 09       	sbc	r24, r6
    e5f0:	97 09       	sbc	r25, r7
    e5f2:	6a 30       	cpi	r22, 0x0A	; 10
    e5f4:	71 05       	cpc	r23, r1
    e5f6:	81 05       	cpc	r24, r1
    e5f8:	91 05       	cpc	r25, r1
    e5fa:	88 f3       	brcs	.-30     	; 0xe5de <setup+0x5dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4301
      /// aktualni intenzita svetla
      a2d_run_now = 0;
    e5fc:	10 92 d0 0a 	sts	0x0AD0, r1	; 0x800ad0 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4302
      a2d_start_first(A_LIGHT);
    e600:	87 e0       	ldi	r24, 0x07	; 7
    e602:	0e 94 41 8e 	call	0x11c82	; 0x11c82 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4303
      milis = millis();
    e606:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    e60a:	2b 01       	movw	r4, r22
    e60c:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4304
      while (a2d_run_now == 0 && millis() - milis < 10);
    e60e:	80 91 d0 0a 	lds	r24, 0x0AD0	; 0x800ad0 <a2d_run_now>
    e612:	81 11       	cpse	r24, r1
    e614:	0b c0       	rjmp	.+22     	; 0xe62c <setup+0x62a>
    e616:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    e61a:	64 19       	sub	r22, r4
    e61c:	75 09       	sbc	r23, r5
    e61e:	86 09       	sbc	r24, r6
    e620:	97 09       	sbc	r25, r7
    e622:	6a 30       	cpi	r22, 0x0A	; 10
    e624:	71 05       	cpc	r23, r1
    e626:	81 05       	cpc	r24, r1
    e628:	91 05       	cpc	r25, r1
    e62a:	88 f3       	brcs	.-30     	; 0xe60e <setup+0x60c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4306
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
    e62c:	10 92 d0 0a 	sts	0x0AD0, r1	; 0x800ad0 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4308
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    e630:	4e 01       	movw	r8, r28
    e632:	ea ef       	ldi	r30, 0xFA	; 250
    e634:	8e 1a       	sub	r8, r30
    e636:	ee ef       	ldi	r30, 0xFE	; 254
    e638:	9e 0a       	sbc	r9, r30
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    e63a:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <tritri>
    e63e:	90 91 0b 0a 	lds	r25, 0x0A0B	; 0x800a0b <tritri+0x1>
    e642:	25 e0       	ldi	r18, 0x05	; 5
    e644:	28 9f       	mul	r18, r24
    e646:	b0 01       	movw	r22, r0
    e648:	29 9f       	mul	r18, r25
    e64a:	70 0d       	add	r23, r0
    e64c:	11 24       	eor	r1, r1
    e64e:	90 e0       	ldi	r25, 0x00	; 0
    e650:	80 e0       	ldi	r24, 0x00	; 0
    e652:	0e 94 c0 b2 	call	0x16580	; 0x16580 <__floatunsisf>
    e656:	20 e0       	ldi	r18, 0x00	; 0
    e658:	30 e0       	ldi	r19, 0x00	; 0
    e65a:	4a e7       	ldi	r20, 0x7A	; 122
    e65c:	54 e4       	ldi	r21, 0x44	; 68
    e65e:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4308
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    e662:	84 01       	movw	r16, r8
    e664:	22 e0       	ldi	r18, 0x02	; 2
    e666:	44 e0       	ldi	r20, 0x04	; 4
    e668:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4309
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    e66c:	7e 01       	movw	r14, r28
    e66e:	f2 ef       	ldi	r31, 0xF2	; 242
    e670:	ef 1a       	sub	r14, r31
    e672:	fe ef       	ldi	r31, 0xFE	; 254
    e674:	ff 0a       	sbc	r15, r31
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    e676:	60 91 08 0a 	lds	r22, 0x0A08	; 0x800a08 <petnula>
    e67a:	70 91 09 0a 	lds	r23, 0x0A09	; 0x800a09 <petnula+0x1>
    e67e:	13 e0       	ldi	r17, 0x03	; 3
    e680:	66 0f       	add	r22, r22
    e682:	77 1f       	adc	r23, r23
    e684:	1a 95       	dec	r17
    e686:	e1 f7       	brne	.-8      	; 0xe680 <setup+0x67e>
    e688:	90 e0       	ldi	r25, 0x00	; 0
    e68a:	80 e0       	ldi	r24, 0x00	; 0
    e68c:	0e 94 c0 b2 	call	0x16580	; 0x16580 <__floatunsisf>
    e690:	20 e0       	ldi	r18, 0x00	; 0
    e692:	30 e0       	ldi	r19, 0x00	; 0
    e694:	4a e7       	ldi	r20, 0x7A	; 122
    e696:	54 e4       	ldi	r21, 0x44	; 68
    e698:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4309
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    e69c:	87 01       	movw	r16, r14
    e69e:	22 e0       	ldi	r18, 0x02	; 2
    e6a0:	44 e0       	ldi	r20, 0x04	; 4
    e6a2:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4310
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    e6a6:	3e 01       	movw	r6, r28
    e6a8:	2a ee       	ldi	r18, 0xEA	; 234
    e6aa:	62 1a       	sub	r6, r18
    e6ac:	2e ef       	ldi	r18, 0xFE	; 254
    e6ae:	72 0a       	sbc	r7, r18
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    e6b0:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <dvanact>
    e6b4:	90 91 07 0a 	lds	r25, 0x0A07	; 0x800a07 <dvanact+0x1>
    e6b8:	29 e3       	ldi	r18, 0x39	; 57
    e6ba:	28 9f       	mul	r18, r24
    e6bc:	b0 01       	movw	r22, r0
    e6be:	29 9f       	mul	r18, r25
    e6c0:	70 0d       	add	r23, r0
    e6c2:	11 24       	eor	r1, r1
    e6c4:	90 e0       	ldi	r25, 0x00	; 0
    e6c6:	80 e0       	ldi	r24, 0x00	; 0
    e6c8:	0e 94 c0 b2 	call	0x16580	; 0x16580 <__floatunsisf>
    e6cc:	20 e0       	ldi	r18, 0x00	; 0
    e6ce:	30 e0       	ldi	r19, 0x00	; 0
    e6d0:	4a e7       	ldi	r20, 0x7A	; 122
    e6d2:	54 e4       	ldi	r21, 0x44	; 68
    e6d4:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4310
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    e6d8:	83 01       	movw	r16, r6
    e6da:	22 e0       	ldi	r18, 0x02	; 2
    e6dc:	44 e0       	ldi	r20, 0x04	; 4
    e6de:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4311
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    e6e2:	2e 01       	movw	r4, r28
    e6e4:	32 ee       	ldi	r19, 0xE2	; 226
    e6e6:	43 1a       	sub	r4, r19
    e6e8:	3e ef       	ldi	r19, 0xFE	; 254
    e6ea:	53 0a       	sbc	r5, r19
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3993
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    e6ec:	60 91 04 0a 	lds	r22, 0x0A04	; 0x800a04 <proud>
    e6f0:	70 91 05 0a 	lds	r23, 0x0A05	; 0x800a05 <proud+0x1>
    e6f4:	90 e0       	ldi	r25, 0x00	; 0
    e6f6:	80 e0       	ldi	r24, 0x00	; 0
    e6f8:	0e 94 c0 b2 	call	0x16580	; 0x16580 <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4311
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    e6fc:	82 01       	movw	r16, r4
    e6fe:	22 e0       	ldi	r18, 0x02	; 2
    e700:	44 e0       	ldi	r20, 0x04	; 4
    e702:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4312
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
    e706:	5f 92       	push	r5
    e708:	4f 92       	push	r4
    e70a:	7f 92       	push	r7
    e70c:	6f 92       	push	r6
    e70e:	ff 92       	push	r15
    e710:	ef 92       	push	r14
    e712:	9f 92       	push	r9
    e714:	8f 92       	push	r8
    e716:	86 ea       	ldi	r24, 0xA6	; 166
    e718:	96 e0       	ldi	r25, 0x06	; 6
    e71a:	9f 93       	push	r25
    e71c:	8f 93       	push	r24
    e71e:	4e 01       	movw	r8, r28
    e720:	88 e8       	ldi	r24, 0x88	; 136
    e722:	88 0e       	add	r8, r24
    e724:	91 1c       	adc	r9, r1
    e726:	9f 92       	push	r9
    e728:	8f 92       	push	r8
    e72a:	0e 94 27 b7 	call	0x16e4e	; 0x16e4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4313
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e72e:	ee 24       	eor	r14, r14
    e730:	ea 94       	dec	r14
    e732:	fe 2c       	mov	r15, r14
    e734:	00 ee       	ldi	r16, 0xE0	; 224
    e736:	17 e0       	ldi	r17, 0x07	; 7
    e738:	21 e0       	ldi	r18, 0x01	; 1
    e73a:	42 e3       	ldi	r20, 0x32	; 50
    e73c:	50 e0       	ldi	r21, 0x00	; 0
    e73e:	60 ea       	ldi	r22, 0xA0	; 160
    e740:	70 e0       	ldi	r23, 0x00	; 0
    e742:	c4 01       	movw	r24, r8
    e744:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    e748:	0f b6       	in	r0, 0x3f	; 63
    e74a:	f8 94       	cli
    e74c:	de bf       	out	0x3e, r29	; 62
    e74e:	0f be       	out	0x3f, r0	; 63
    e750:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4603
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
    e752:	2e e0       	ldi	r18, 0x0E	; 14
    e754:	a2 12       	cpse	r10, r18
    e756:	0c 94 e1 7b 	jmp	0xf7c2	; 0xf7c2 <setup+0x17c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4605
    {
      strcpy_P(str1, text_ntp_cas);
    e75a:	65 ef       	ldi	r22, 0xF5	; 245
    e75c:	72 e3       	ldi	r23, 0x32	; 50
    e75e:	c1 01       	movw	r24, r2
    e760:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4606
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e764:	ee 24       	eor	r14, r14
    e766:	ea 94       	dec	r14
    e768:	fe 2c       	mov	r15, r14
    e76a:	00 ee       	ldi	r16, 0xE0	; 224
    e76c:	17 e0       	ldi	r17, 0x07	; 7
    e76e:	21 e0       	ldi	r18, 0x01	; 1
    e770:	4e eb       	ldi	r20, 0xBE	; 190
    e772:	50 e0       	ldi	r21, 0x00	; 0
    e774:	6e e1       	ldi	r22, 0x1E	; 30
    e776:	70 e0       	ldi	r23, 0x00	; 0
    e778:	c1 01       	movw	r24, r2
    e77a:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
ntp_check():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:421

uint8_t ntp_check(NTPClient *timeClient)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    e77e:	c2 52       	subi	r28, 0x22	; 34
    e780:	df 4f       	sbci	r29, 0xFF	; 255
    e782:	18 82       	st	Y, r1
    e784:	ce 5d       	subi	r28, 0xDE	; 222
    e786:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:422
  createString(tmp1, '.', device.ntp_server, 4, 10);
    e788:	0a e0       	ldi	r16, 0x0A	; 10
    e78a:	24 e0       	ldi	r18, 0x04	; 4
    e78c:	4b e6       	ldi	r20, 0x6B	; 107
    e78e:	5c e0       	ldi	r21, 0x0C	; 12
    e790:	6e e2       	ldi	r22, 0x2E	; 46
    e792:	ce 01       	movw	r24, r28
    e794:	82 52       	subi	r24, 0x22	; 34
    e796:	9f 4f       	sbci	r25, 0xFF	; 255
    e798:	0e 94 7b 96 	call	0x12cf6	; 0x12cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
    e79c:	89 e3       	ldi	r24, 0x39	; 57
    e79e:	95 e0       	ldi	r25, 0x05	; 5
    e7a0:	9f 83       	std	Y+7, r25	; 0x07
    e7a2:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
    e7a4:	89 81       	ldd	r24, Y+1	; 0x01
    e7a6:	9a 81       	ldd	r25, Y+2	; 0x02
    e7a8:	dc 01       	movw	r26, r24
    e7aa:	ed 91       	ld	r30, X+
    e7ac:	fc 91       	ld	r31, X
    e7ae:	06 84       	ldd	r0, Z+14	; 0x0e
    e7b0:	f7 85       	ldd	r31, Z+15	; 0x0f
    e7b2:	e0 2d       	mov	r30, r0
    e7b4:	69 e3       	ldi	r22, 0x39	; 57
    e7b6:	75 e0       	ldi	r23, 0x05	; 5
    e7b8:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
    e7ba:	81 e0       	ldi	r24, 0x01	; 1
    e7bc:	8b 83       	std	Y+3, r24	; 0x03
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    e7be:	80 e1       	ldi	r24, 0x10	; 16
    e7c0:	9e e0       	ldi	r25, 0x0E	; 14
    e7c2:	a0 e0       	ldi	r26, 0x00	; 0
    e7c4:	b0 e0       	ldi	r27, 0x00	; 0
    e7c6:	88 87       	std	Y+8, r24	; 0x08
    e7c8:	99 87       	std	Y+9, r25	; 0x09
    e7ca:	aa 87       	std	Y+10, r26	; 0x0a
    e7cc:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    e7ce:	ee ed       	ldi	r30, 0xDE	; 222
    e7d0:	f0 e0       	ldi	r31, 0x00	; 0
    e7d2:	ec 0f       	add	r30, r28
    e7d4:	fd 1f       	adc	r31, r29
    e7d6:	fd 83       	std	Y+5, r31	; 0x05
    e7d8:	ec 83       	std	Y+4, r30	; 0x04
setUpdateInterval():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176
void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
}

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
    e7da:	81 e0       	ldi	r24, 0x01	; 1
    e7dc:	90 e0       	ldi	r25, 0x00	; 0
    e7de:	a0 e0       	ldi	r26, 0x00	; 0
    e7e0:	b0 e0       	ldi	r27, 0x00	; 0
    e7e2:	8c 87       	std	Y+12, r24	; 0x0c
    e7e4:	9d 87       	std	Y+13, r25	; 0x0d
    e7e6:	ae 87       	std	Y+14, r26	; 0x0e
    e7e8:	bf 87       	std	Y+15, r27	; 0x0f
ntp_check():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:427
  timeClient->begin();
  timeClient->setTimeOffset(3600);
  timeClient->setPoolServerName(tmp1);
  timeClient->setUpdateInterval(1);
  if (timeClient->update() == true)
    e7ea:	ce 01       	movw	r24, r28
    e7ec:	01 96       	adiw	r24, 0x01	; 1
    e7ee:	0e 94 b9 8e 	call	0x11d72	; 0x11d72 <NTPClient::update()>
    e7f2:	18 2f       	mov	r17, r24
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    e7f4:	89 81       	ldd	r24, Y+1	; 0x01
    e7f6:	9a 81       	ldd	r25, Y+2	; 0x02
    e7f8:	dc 01       	movw	r26, r24
    e7fa:	ed 91       	ld	r30, X+
    e7fc:	fc 91       	ld	r31, X
    e7fe:	02 88       	ldd	r0, Z+18	; 0x12
    e800:	f3 89       	ldd	r31, Z+19	; 0x13
    e802:	e0 2d       	mov	r30, r0
    e804:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    e806:	1b 82       	std	Y+3, r1	; 0x03
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4607
      if (ntp_check(&timeClient) == 0)
    e808:	11 11       	cpse	r17, r1
    e80a:	c5 c7       	rjmp	.+3978   	; 0xf796 <setup+0x1794>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4609
      {
        strcpy_P(str1, text_err);
    e80c:	65 e3       	ldi	r22, 0x35	; 53
    e80e:	74 e3       	ldi	r23, 0x34	; 52
    e810:	c1 01       	movw	r24, r2
    e812:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4610
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    e816:	00 e0       	ldi	r16, 0x00	; 0
    e818:	18 ef       	ldi	r17, 0xF8	; 248
    e81a:	21 e0       	ldi	r18, 0x01	; 1
    e81c:	4e eb       	ldi	r20, 0xBE	; 190
    e81e:	50 e0       	ldi	r21, 0x00	; 0
    e820:	60 ea       	ldi	r22, 0xA0	; 160
    e822:	70 e0       	ldi	r23, 0x00	; 0
    e824:	c1 01       	movw	r24, r2
    e826:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3934
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    e82a:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <selftest_data>
    e82e:	82 60       	ori	r24, 0x02	; 2
    e830:	0c 94 79 7c 	jmp	0xf8f2	; 0xf8f2 <setup+0x18f0>
    e834:	e1 0e       	add	r14, r17
    e836:	f1 1c       	adc	r15, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:928
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
    e838:	70 e0       	ldi	r23, 0x00	; 0
    e83a:	21 2f       	mov	r18, r17
    e83c:	88 eb       	ldi	r24, 0xB8	; 184
    e83e:	9d e0       	ldi	r25, 0x0D	; 13
    e840:	0e 94 39 37 	call	0x6e72	; 0x6e72 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    e844:	2c cd       	rjmp	.-1448   	; 0xe29e <setup+0x29c>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
    e846:	8f ef       	ldi	r24, 0xFF	; 255
    e848:	90 e0       	ldi	r25, 0x00	; 0
    e84a:	90 93 d1 0d 	sts	0x0DD1, r25	; 0x800dd1 <my_lcd+0x19>
    e84e:	80 93 d0 0d 	sts	0x0DD0, r24	; 0x800dd0 <my_lcd+0x18>
    e852:	2e cd       	rjmp	.-1444   	; 0xe2b0 <setup+0x2ae>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:898
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
	{
		writeCmdData8(0x61, val);
	}
	else if(lcd_driver == ID_7575)
    e854:	21 30       	cpi	r18, 0x01	; 1
    e856:	31 05       	cpc	r19, r1
    e858:	31 f5       	brne	.+76     	; 0xe8a6 <setup+0x8a4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	{
		writeCmdData8(0x01, val ? 8 : 10);
    e85a:	20 81       	ld	r18, Z
    e85c:	82 23       	and	r24, r18
    e85e:	80 83       	st	Z, r24
    e860:	81 e0       	ldi	r24, 0x01	; 1
    e862:	82 b9       	out	0x02, r24	; 2
    e864:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
    e868:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
    e86c:	80 81       	ld	r24, Z
    e86e:	20 91 f4 0d 	lds	r18, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
    e872:	82 23       	and	r24, r18
    e874:	80 83       	st	Z, r24
    e876:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
    e87a:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
    e87e:	80 81       	ld	r24, Z
    e880:	20 91 f0 0d 	lds	r18, 0x0DF0	; 0x800df0 <my_lcd+0x38>
    e884:	82 2b       	or	r24, r18
    e886:	80 83       	st	Z, r24
    e888:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
    e88c:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
    e890:	80 81       	ld	r24, Z
    e892:	20 91 ef 0d 	lds	r18, 0x0DEF	; 0x800def <my_lcd+0x37>
    e896:	82 2b       	or	r24, r18
    e898:	80 83       	st	Z, r24
setup():
    e89a:	88 e0       	ldi	r24, 0x08	; 8
Invert_Display():
    e89c:	91 11       	cpse	r25, r1
    e89e:	01 c0       	rjmp	.+2      	; 0xe8a2 <setup+0x8a0>
setup():
    e8a0:	8a e0       	ldi	r24, 0x0A	; 10
Invert_Display():
    e8a2:	82 b9       	out	0x02, r24	; 2
    e8a4:	43 cd       	rjmp	.-1402   	; 0xe32c <setup+0x32a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    e8a6:	20 81       	ld	r18, Z
    e8a8:	82 23       	and	r24, r18
    e8aa:	80 83       	st	Z, r24
setup():
    e8ac:	81 e2       	ldi	r24, 0x21	; 33
Invert_Display():
    e8ae:	91 11       	cpse	r25, r1
    e8b0:	01 c0       	rjmp	.+2      	; 0xe8b4 <setup+0x8b2>
setup():
    e8b2:	80 e2       	ldi	r24, 0x20	; 32
Invert_Display():
    e8b4:	82 b9       	out	0x02, r24	; 2
    e8b6:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
    e8ba:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
    e8be:	80 81       	ld	r24, Z
    e8c0:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
    e8c4:	89 23       	and	r24, r25
    e8c6:	80 83       	st	Z, r24
    e8c8:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
    e8cc:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
    e8d0:	80 81       	ld	r24, Z
    e8d2:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
    e8d6:	89 2b       	or	r24, r25
    e8d8:	80 83       	st	Z, r24
    e8da:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
    e8de:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
    e8e2:	80 81       	ld	r24, Z
    e8e4:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <my_lcd+0x37>
    e8e8:	31 cd       	rjmp	.-1438   	; 0xe34c <setup+0x34a>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4317
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
    e8ea:	b1 e0       	ldi	r27, 0x01	; 1
    e8ec:	ab 12       	cpse	r10, r27
    e8ee:	c3 c0       	rjmp	.+390    	; 0xea76 <setup+0xa74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4319
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    e8f0:	6d ed       	ldi	r22, 0xDD	; 221
    e8f2:	73 e3       	ldi	r23, 0x33	; 51
    e8f4:	c1 01       	movw	r24, r2
    e8f6:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4320
      strcat(str1, ":2");
    e8fa:	64 ec       	ldi	r22, 0xC4	; 196
    e8fc:	76 e0       	ldi	r23, 0x06	; 6
    e8fe:	c1 01       	movw	r24, r2
    e900:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4321
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e904:	ee 24       	eor	r14, r14
    e906:	ea 94       	dec	r14
    e908:	fe 2c       	mov	r15, r14
    e90a:	00 ee       	ldi	r16, 0xE0	; 224
    e90c:	17 e0       	ldi	r17, 0x07	; 7
    e90e:	21 e0       	ldi	r18, 0x01	; 1
    e910:	4c e3       	ldi	r20, 0x3C	; 60
    e912:	50 e0       	ldi	r21, 0x00	; 0
    e914:	6e e1       	ldi	r22, 0x1E	; 30
    e916:	70 e0       	ldi	r23, 0x00	; 0
    e918:	c1 01       	movw	r24, r2
    e91a:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
    e91e:	e0 91 0e 0e 	lds	r30, 0x0E0E	; 0x800e0e <lm75_temp+0xb>
    e922:	f0 91 0f 0e 	lds	r31, 0x0E0F	; 0x800e0f <lm75_temp+0xc>
    e926:	04 80       	ldd	r0, Z+4	; 0x04
    e928:	f5 81       	ldd	r31, Z+5	; 0x05
    e92a:	e0 2d       	mov	r30, r0
    e92c:	10 81       	ld	r17, Z
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
    e92e:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <lm75_temp+0x2>
    e932:	0e 94 2d 84 	call	0x1085a	; 0x1085a <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
    e936:	80 91 03 0e 	lds	r24, 0x0E03	; 0x800e03 <lm75_temp>
    e93a:	90 91 04 0e 	lds	r25, 0x0E04	; 0x800e04 <lm75_temp+0x1>
    e93e:	dc 01       	movw	r26, r24
    e940:	ed 91       	ld	r30, X+
    e942:	fc 91       	ld	r31, X
    e944:	01 90       	ld	r0, Z+
    e946:	f0 81       	ld	r31, Z
    e948:	e0 2d       	mov	r30, r0
    e94a:	61 2f       	mov	r22, r17
    e94c:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
    e94e:	80 91 03 0e 	lds	r24, 0x0E03	; 0x800e03 <lm75_temp>
    e952:	90 91 04 0e 	lds	r25, 0x0E04	; 0x800e04 <lm75_temp+0x1>
    e956:	0e 94 a8 90 	call	0x12150	; 0x12150 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
    e95a:	80 91 03 0e 	lds	r24, 0x0E03	; 0x800e03 <lm75_temp>
    e95e:	90 91 04 0e 	lds	r25, 0x0E04	; 0x800e04 <lm75_temp+0x1>
    e962:	20 91 06 0e 	lds	r18, 0x0E06	; 0x800e06 <lm75_temp+0x3>
setup():
    e966:	41 e0       	ldi	r20, 0x01	; 1
readIntegerTemperatureRegister():
    e968:	29 30       	cpi	r18, 0x09	; 9
    e96a:	08 f0       	brcs	.+2      	; 0xe96e <setup+0x96c>
setup():
    e96c:	42 e0       	ldi	r20, 0x02	; 2
readIntegerTemperatureRegister():
    e96e:	60 91 05 0e 	lds	r22, 0x0E05	; 0x800e05 <lm75_temp+0x2>
    e972:	0e 94 29 91 	call	0x12252	; 0x12252 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
    e976:	80 91 03 0e 	lds	r24, 0x0E03	; 0x800e03 <lm75_temp>
    e97a:	90 91 04 0e 	lds	r25, 0x0E04	; 0x800e04 <lm75_temp+0x1>
    e97e:	dc 01       	movw	r26, r24
    e980:	ed 91       	ld	r30, X+
    e982:	fc 91       	ld	r31, X
    e984:	02 84       	ldd	r0, Z+10	; 0x0a
    e986:	f3 85       	ldd	r31, Z+11	; 0x0b
    e988:	e0 2d       	mov	r30, r0
    e98a:	19 95       	eicall
    e98c:	c1 5c       	subi	r28, 0xC1	; 193
    e98e:	de 4f       	sbci	r29, 0xFE	; 254
    e990:	88 83       	st	Y, r24
    e992:	cf 53       	subi	r28, 0x3F	; 63
    e994:	d1 40       	sbci	r29, 0x01	; 1
    e996:	c2 5c       	subi	r28, 0xC2	; 194
    e998:	de 4f       	sbci	r29, 0xFE	; 254
    e99a:	18 82       	st	Y, r1
    e99c:	ce 53       	subi	r28, 0x3E	; 62
    e99e:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
    e9a0:	80 91 06 0e 	lds	r24, 0x0E06	; 0x800e06 <lm75_temp+0x3>
    e9a4:	89 30       	cpi	r24, 0x09	; 9
    e9a6:	c8 f0       	brcs	.+50     	; 0xe9da <setup+0x9d8>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
    e9a8:	80 91 03 0e 	lds	r24, 0x0E03	; 0x800e03 <lm75_temp>
    e9ac:	90 91 04 0e 	lds	r25, 0x0E04	; 0x800e04 <lm75_temp+0x1>
    e9b0:	dc 01       	movw	r26, r24
    e9b2:	ed 91       	ld	r30, X+
    e9b4:	fc 91       	ld	r31, X
    e9b6:	02 84       	ldd	r0, Z+10	; 0x0a
    e9b8:	f3 85       	ldd	r31, Z+11	; 0x0b
    e9ba:	e0 2d       	mov	r30, r0
    e9bc:	19 95       	eicall
    e9be:	c2 5c       	subi	r28, 0xC2	; 194
    e9c0:	de 4f       	sbci	r29, 0xFE	; 254
    e9c2:	e8 81       	ld	r30, Y
    e9c4:	f9 81       	ldd	r31, Y+1	; 0x01
    e9c6:	ce 53       	subi	r28, 0x3E	; 62
    e9c8:	d1 40       	sbci	r29, 0x01	; 1
    e9ca:	e8 2b       	or	r30, r24
    e9cc:	f9 2b       	or	r31, r25
    e9ce:	c2 5c       	subi	r28, 0xC2	; 194
    e9d0:	de 4f       	sbci	r29, 0xFE	; 254
    e9d2:	f9 83       	std	Y+1, r31	; 0x01
    e9d4:	e8 83       	st	Y, r30
    e9d6:	ce 53       	subi	r28, 0x3E	; 62
    e9d8:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
    e9da:	80 91 03 0e 	lds	r24, 0x0E03	; 0x800e03 <lm75_temp>
    e9de:	90 91 04 0e 	lds	r25, 0x0E04	; 0x800e04 <lm75_temp+0x1>
    e9e2:	0e 94 a8 90 	call	0x12150	; 0x12150 <TwoWire::endTransmission()>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4322
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
    e9e6:	7e 01       	movw	r14, r28
    e9e8:	f2 ee       	ldi	r31, 0xE2	; 226
    e9ea:	ef 1a       	sub	r14, r31
    e9ec:	fe ef       	ldi	r31, 0xFE	; 254
    e9ee:	ff 0a       	sbc	r15, r31
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
    e9f0:	60 91 07 0e 	lds	r22, 0x0E07	; 0x800e07 <lm75_temp+0x4>
    e9f4:	70 91 08 0e 	lds	r23, 0x0E08	; 0x800e08 <lm75_temp+0x5>
    e9f8:	c2 5c       	subi	r28, 0xC2	; 194
    e9fa:	de 4f       	sbci	r29, 0xFE	; 254
    e9fc:	28 81       	ld	r18, Y
    e9fe:	39 81       	ldd	r19, Y+1	; 0x01
    ea00:	ce 53       	subi	r28, 0x3E	; 62
    ea02:	d1 40       	sbci	r29, 0x01	; 1
    ea04:	62 23       	and	r22, r18
    ea06:	73 23       	and	r23, r19
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
    ea08:	07 2e       	mov	r0, r23
    ea0a:	00 0c       	add	r0, r0
    ea0c:	88 0b       	sbc	r24, r24
    ea0e:	99 0b       	sbc	r25, r25
    ea10:	0e 94 c2 b2 	call	0x16584	; 0x16584 <__floatsisf>
    ea14:	20 91 0a 0e 	lds	r18, 0x0E0A	; 0x800e0a <lm75_temp+0x7>
    ea18:	30 91 0b 0e 	lds	r19, 0x0E0B	; 0x800e0b <lm75_temp+0x8>
    ea1c:	40 91 0c 0e 	lds	r20, 0x0E0C	; 0x800e0c <lm75_temp+0x9>
    ea20:	50 91 0d 0e 	lds	r21, 0x0E0D	; 0x800e0d <lm75_temp+0xa>
    ea24:	0e 94 21 b3 	call	0x16642	; 0x16642 <__mulsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4322
    ea28:	87 01       	movw	r16, r14
    ea2a:	22 e0       	ldi	r18, 0x02	; 2
    ea2c:	44 e0       	ldi	r20, 0x04	; 4
    ea2e:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4323
      sprintf(str2, "iT=%sC", s_current);
    ea32:	ff 92       	push	r15
    ea34:	ef 92       	push	r14
    ea36:	87 ec       	ldi	r24, 0xC7	; 199
    ea38:	96 e0       	ldi	r25, 0x06	; 6
    ea3a:	9f 93       	push	r25
    ea3c:	8f 93       	push	r24
    ea3e:	4e 01       	movw	r8, r28
    ea40:	38 e8       	ldi	r19, 0x88	; 136
    ea42:	83 0e       	add	r8, r19
    ea44:	91 1c       	adc	r9, r1
    ea46:	9f 92       	push	r9
    ea48:	8f 92       	push	r8
    ea4a:	0e 94 27 b7 	call	0x16e4e	; 0x16e4e <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4324
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ea4e:	ee 24       	eor	r14, r14
    ea50:	ea 94       	dec	r14
    ea52:	fe 2c       	mov	r15, r14
    ea54:	00 ee       	ldi	r16, 0xE0	; 224
    ea56:	17 e0       	ldi	r17, 0x07	; 7
    ea58:	21 e0       	ldi	r18, 0x01	; 1
    ea5a:	4c e3       	ldi	r20, 0x3C	; 60
    ea5c:	50 e0       	ldi	r21, 0x00	; 0
    ea5e:	60 ea       	ldi	r22, 0xA0	; 160
    ea60:	70 e0       	ldi	r23, 0x00	; 0
    ea62:	c4 01       	movw	r24, r8
    ea64:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    ea68:	0f 90       	pop	r0
    ea6a:	0f 90       	pop	r0
    ea6c:	0f 90       	pop	r0
    ea6e:	0f 90       	pop	r0
    ea70:	0f 90       	pop	r0
    ea72:	0f 90       	pop	r0
    ea74:	6e ce       	rjmp	.-804    	; 0xe752 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4328
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
    ea76:	82 e0       	ldi	r24, 0x02	; 2
    ea78:	a8 12       	cpse	r10, r24
    ea7a:	8c c1       	rjmp	.+792    	; 0xed94 <setup+0xd92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4330
    {
      if (EEPROM.read(set_default_values) == 255)
    ea7c:	8a e5       	ldi	r24, 0x5A	; 90
    ea7e:	90 e0       	ldi	r25, 0x00	; 0
    ea80:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ea84:	8f 3f       	cpi	r24, 0xFF	; 255
    ea86:	09 f0       	breq	.+2      	; 0xea8a <setup+0xa88>
    ea88:	74 c1       	rjmp	.+744    	; 0xed72 <setup+0xd70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4332
      {
        EEPROM.write(set_default_values, 0);
    ea8a:	60 e0       	ldi	r22, 0x00	; 0
    ea8c:	8a e5       	ldi	r24, 0x5A	; 90
    ea8e:	90 e0       	ldi	r25, 0x00	; 0
    ea90:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4333
        strcpy_P(str1, text_vychozi_nastaveni);
    ea94:	6b ec       	ldi	r22, 0xCB	; 203
    ea96:	73 e3       	ldi	r23, 0x33	; 51
    ea98:	8d 2d       	mov	r24, r13
    ea9a:	9b 2d       	mov	r25, r11
    ea9c:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4334
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    eaa0:	ee 24       	eor	r14, r14
    eaa2:	ea 94       	dec	r14
    eaa4:	fe 2c       	mov	r15, r14
    eaa6:	00 e0       	ldi	r16, 0x00	; 0
    eaa8:	18 ef       	ldi	r17, 0xF8	; 248
    eaaa:	21 e0       	ldi	r18, 0x01	; 1
    eaac:	46 e4       	ldi	r20, 0x46	; 70
    eaae:	50 e0       	ldi	r21, 0x00	; 0
    eab0:	6e e1       	ldi	r22, 0x1E	; 30
    eab2:	70 e0       	ldi	r23, 0x00	; 0
    eab4:	8d 2d       	mov	r24, r13
    eab6:	9b 2d       	mov	r25, r11
    eab8:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2847
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    eabc:	6f ef       	ldi	r22, 0xFF	; 255
    eabe:	8d e5       	ldi	r24, 0x5D	; 93
    eac0:	90 e0       	ldi	r25, 0x00	; 0
    eac2:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4339
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );

        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
    eac6:	80 e0       	ldi	r24, 0x00	; 0
    eac8:	0e 94 18 51 	call	0xa230	; 0xa230 <thermostat_ring_clear(unsigned char)>
    eacc:	81 e0       	ldi	r24, 0x01	; 1
    eace:	0e 94 18 51 	call	0xa230	; 0xa230 <thermostat_ring_clear(unsigned char)>
    ead2:	82 e0       	ldi	r24, 0x02	; 2
    ead4:	0e 94 18 51 	call	0xa230	; 0xa230 <thermostat_ring_clear(unsigned char)>
    ead8:	83 e0       	ldi	r24, 0x03	; 3
    eada:	0e 94 18 51 	call	0xa230	; 0xa230 <thermostat_ring_clear(unsigned char)>
    eade:	84 e0       	ldi	r24, 0x04	; 4
    eae0:	0e 94 18 51 	call	0xa230	; 0xa230 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4341
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    eae4:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4343
        {
          strcpy(tmp1, "");
    eae6:	62 ef       	ldi	r22, 0xF2	; 242
    eae8:	72 e0       	ldi	r23, 0x02	; 2
    eaea:	ce 01       	movw	r24, r28
    eaec:	8e 50       	subi	r24, 0x0E	; 14
    eaee:	9f 4f       	sbci	r25, 0xFF	; 255
    eaf0:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4344
          remote_tds_clear(idx);
    eaf4:	81 2f       	mov	r24, r17
    eaf6:	0e 94 0f 53 	call	0xa61e	; 0xa61e <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4341
        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    eafa:	1f 5f       	subi	r17, 0xFF	; 255
    eafc:	1a 30       	cpi	r17, 0x0A	; 10
    eafe:	99 f7       	brne	.-26     	; 0xeae6 <setup+0xae4>
    eb00:	e1 ef       	ldi	r30, 0xF1	; 241
    eb02:	8e 2e       	mov	r8, r30
    eb04:	99 24       	eor	r9, r9
    eb06:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4347
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    eb08:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4349
        {
          strcpy(str2, "PROG");
    eb0a:	63 ed       	ldi	r22, 0xD3	; 211
    eb0c:	74 e0       	ldi	r23, 0x04	; 4
    eb0e:	ce 01       	movw	r24, r28
    eb10:	88 57       	subi	r24, 0x78	; 120
    eb12:	9f 4f       	sbci	r25, 0xFF	; 255
    eb14:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4350
          thermostat_program_set_name(idx, str2);
    eb18:	be 01       	movw	r22, r28
    eb1a:	68 57       	subi	r22, 0x78	; 120
    eb1c:	7f 4f       	sbci	r23, 0xFF	; 255
    eb1e:	81 2f       	mov	r24, r17
    eb20:	0e 94 4e 50 	call	0xa09c	; 0xa09c <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    eb24:	60 e0       	ldi	r22, 0x00	; 0
    eb26:	c4 01       	movw	r24, r8
    eb28:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4352
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    eb2c:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4354
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
    eb2e:	c1 2c       	mov	r12, r1
    eb30:	e1 2c       	mov	r14, r1
    eb32:	00 e0       	ldi	r16, 0x00	; 0
    eb34:	20 e0       	ldi	r18, 0x00	; 0
    eb36:	40 e0       	ldi	r20, 0x00	; 0
    eb38:	6f 2d       	mov	r22, r15
    eb3a:	81 2f       	mov	r24, r17
    eb3c:	0e 94 12 50 	call	0xa024	; 0xa024 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4355
            thermostat_program_set_threshold(idx, interval_id, 220);
    eb40:	4c ed       	ldi	r20, 0xDC	; 220
    eb42:	50 e0       	ldi	r21, 0x00	; 0
    eb44:	6f 2d       	mov	r22, r15
    eb46:	81 2f       	mov	r24, r17
    eb48:	0e 94 f6 4f 	call	0x9fec	; 0x9fec <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4356
            thermostat_program_set_week(idx, interval_id, 0);
    eb4c:	40 e0       	ldi	r20, 0x00	; 0
    eb4e:	6f 2d       	mov	r22, r15
    eb50:	81 2f       	mov	r24, r17
    eb52:	0e 94 e8 4f 	call	0x9fd0	; 0x9fd0 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4352
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy(str2, "PROG");
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    eb56:	f3 94       	inc	r15
    eb58:	9b e0       	ldi	r25, 0x0B	; 11
    eb5a:	f9 12       	cpse	r15, r25
    eb5c:	e8 cf       	rjmp	.-48     	; 0xeb2e <setup+0xb2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4347
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    eb5e:	1f 5f       	subi	r17, 0xFF	; 255
    eb60:	ad e4       	ldi	r26, 0x4D	; 77
    eb62:	8a 0e       	add	r8, r26
    eb64:	91 1c       	adc	r9, r1
    eb66:	18 30       	cpi	r17, 0x08	; 8
    eb68:	81 f6       	brne	.-96     	; 0xeb0a <setup+0xb08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4367
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
    eb6a:	7a e0       	ldi	r23, 0x0A	; 10
    eb6c:	f7 2e       	mov	r15, r23
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4368
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    eb6e:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4362
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
    eb70:	be 01       	movw	r22, r28
    eb72:	68 53       	subi	r22, 0x38	; 56
    eb74:	7f 4f       	sbci	r23, 0xFF	; 255
    eb76:	80 2f       	mov	r24, r16
    eb78:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4363
          strcpy(tds.name, "FREE");
    eb7c:	6f e5       	ldi	r22, 0x5F	; 95
    eb7e:	73 e0       	ldi	r23, 0x03	; 3
    eb80:	c4 5b       	subi	r28, 0xB4	; 180
    eb82:	de 4f       	sbci	r29, 0xFE	; 254
    eb84:	88 81       	ld	r24, Y
    eb86:	99 81       	ldd	r25, Y+1	; 0x01
    eb88:	cc 54       	subi	r28, 0x4C	; 76
    eb8a:	d1 40       	sbci	r29, 0x01	; 1
    eb8c:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4364
          tds.used = 0;
    eb90:	c8 53       	subi	r28, 0x38	; 56
    eb92:	df 4f       	sbci	r29, 0xFF	; 255
    eb94:	18 82       	st	Y, r1
    eb96:	c8 5c       	subi	r28, 0xC8	; 200
    eb98:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4365
          tds.offset = 0;
    eb9a:	ce 52       	subi	r28, 0x2E	; 46
    eb9c:	df 4f       	sbci	r29, 0xFF	; 255
    eb9e:	19 82       	std	Y+1, r1	; 0x01
    eba0:	18 82       	st	Y, r1
    eba2:	c2 5d       	subi	r28, 0xD2	; 210
    eba4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4366
          tds.assigned_ds2482 = 0;
    eba6:	cf 52       	subi	r28, 0x2F	; 47
    eba8:	df 4f       	sbci	r29, 0xFF	; 255
    ebaa:	18 82       	st	Y, r1
    ebac:	c1 5d       	subi	r28, 0xD1	; 209
    ebae:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4367
          tds.period = 10;
    ebb0:	c4 52       	subi	r28, 0x24	; 36
    ebb2:	df 4f       	sbci	r29, 0xFF	; 255
    ebb4:	f8 82       	st	Y, r15
    ebb6:	cc 5d       	subi	r28, 0xDC	; 220
    ebb8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4368
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    ebba:	c7 53       	subi	r28, 0x37	; 55
    ebbc:	df 4f       	sbci	r29, 0xFF	; 255
    ebbe:	18 83       	st	Y, r17
    ebc0:	c9 5c       	subi	r28, 0xC9	; 201
    ebc2:	d0 40       	sbci	r29, 0x00	; 0
    ebc4:	c6 53       	subi	r28, 0x36	; 54
    ebc6:	df 4f       	sbci	r29, 0xFF	; 255
    ebc8:	18 83       	st	Y, r17
    ebca:	ca 5c       	subi	r28, 0xCA	; 202
    ebcc:	d0 40       	sbci	r29, 0x00	; 0
    ebce:	c5 53       	subi	r28, 0x35	; 53
    ebd0:	df 4f       	sbci	r29, 0xFF	; 255
    ebd2:	18 83       	st	Y, r17
    ebd4:	cb 5c       	subi	r28, 0xCB	; 203
    ebd6:	d0 40       	sbci	r29, 0x00	; 0
    ebd8:	c4 53       	subi	r28, 0x34	; 52
    ebda:	df 4f       	sbci	r29, 0xFF	; 255
    ebdc:	18 83       	st	Y, r17
    ebde:	cc 5c       	subi	r28, 0xCC	; 204
    ebe0:	d0 40       	sbci	r29, 0x00	; 0
    ebe2:	c3 53       	subi	r28, 0x33	; 51
    ebe4:	df 4f       	sbci	r29, 0xFF	; 255
    ebe6:	18 83       	st	Y, r17
    ebe8:	cd 5c       	subi	r28, 0xCD	; 205
    ebea:	d0 40       	sbci	r29, 0x00	; 0
    ebec:	c2 53       	subi	r28, 0x32	; 50
    ebee:	df 4f       	sbci	r29, 0xFF	; 255
    ebf0:	18 83       	st	Y, r17
    ebf2:	ce 5c       	subi	r28, 0xCE	; 206
    ebf4:	d0 40       	sbci	r29, 0x00	; 0
    ebf6:	c1 53       	subi	r28, 0x31	; 49
    ebf8:	df 4f       	sbci	r29, 0xFF	; 255
    ebfa:	18 83       	st	Y, r17
    ebfc:	cf 5c       	subi	r28, 0xCF	; 207
    ebfe:	d0 40       	sbci	r29, 0x00	; 0
    ec00:	c0 53       	subi	r28, 0x30	; 48
    ec02:	df 4f       	sbci	r29, 0xFF	; 255
    ec04:	18 83       	st	Y, r17
    ec06:	c0 5d       	subi	r28, 0xD0	; 208
    ec08:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4369
          set_tds18s20(idx, &tds);
    ec0a:	be 01       	movw	r22, r28
    ec0c:	68 53       	subi	r22, 0x38	; 56
    ec0e:	7f 4f       	sbci	r23, 0xFF	; 255
    ec10:	80 2f       	mov	r24, r16
    ec12:	0e 94 a2 51 	call	0xa344	; 0xa344 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4360
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    ec16:	0f 5f       	subi	r16, 0xFF	; 255
    ec18:	06 30       	cpi	r16, 0x06	; 6
    ec1a:	09 f0       	breq	.+2      	; 0xec1e <setup+0xc1c>
    ec1c:	a9 cf       	rjmp	.-174    	; 0xeb70 <setup+0xb6e>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    ec1e:	84 e1       	ldi	r24, 0x14	; 20
    ec20:	c2 52       	subi	r28, 0x22	; 34
    ec22:	df 4f       	sbci	r29, 0xFF	; 255
    ec24:	88 83       	st	Y, r24
    ec26:	ce 5d       	subi	r28, 0xDE	; 222
    ec28:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    ec2a:	8c e0       	ldi	r24, 0x0C	; 12
    ec2c:	c1 52       	subi	r28, 0x21	; 33
    ec2e:	df 4f       	sbci	r29, 0xFF	; 255
    ec30:	88 83       	st	Y, r24
    ec32:	cf 5d       	subi	r28, 0xDF	; 223
    ec34:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    ec36:	8e e0       	ldi	r24, 0x0E	; 14
    ec38:	c0 52       	subi	r28, 0x20	; 32
    ec3a:	df 4f       	sbci	r29, 0xFF	; 255
    ec3c:	88 83       	st	Y, r24
    ec3e:	c0 5e       	subi	r28, 0xE0	; 224
    ec40:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    ec42:	91 e1       	ldi	r25, 0x11	; 17
    ec44:	cf 51       	subi	r28, 0x1F	; 31
    ec46:	df 4f       	sbci	r29, 0xFF	; 255
    ec48:	98 83       	st	Y, r25
    ec4a:	c1 5e       	subi	r28, 0xE1	; 225
    ec4c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    ec4e:	ce 51       	subi	r28, 0x1E	; 30
    ec50:	df 4f       	sbci	r29, 0xFF	; 255
    ec52:	88 83       	st	Y, r24
    ec54:	c2 5e       	subi	r28, 0xE2	; 226
    ec56:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    ec58:	cd 51       	subi	r28, 0x1D	; 29
    ec5a:	df 4f       	sbci	r29, 0xFF	; 255
    ec5c:	18 82       	st	Y, r1
    ec5e:	c3 5e       	subi	r28, 0xE3	; 227
    ec60:	d0 40       	sbci	r29, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4372
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
    ec62:	ce 01       	movw	r24, r28
    ec64:	82 52       	subi	r24, 0x22	; 34
    ec66:	9f 4f       	sbci	r25, 0xFF	; 255
    ec68:	0e 94 be 92 	call	0x1257c	; 0x1257c <RTC_DS1307::adjust(DateTime const&)>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4005
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    ec6c:	61 e0       	ldi	r22, 0x01	; 1
    ec6e:	81 e0       	ldi	r24, 0x01	; 1
    ec70:	90 e0       	ldi	r25, 0x00	; 0
    ec72:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4375
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
        time_set_offset(1);
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
    ec76:	82 e0       	ldi	r24, 0x02	; 2
    ec78:	80 93 1d 0c 	sts	0x0C1D, r24	; 0x800c1d <device>
    ec7c:	91 e0       	ldi	r25, 0x01	; 1
    ec7e:	90 93 1e 0c 	sts	0x0C1E, r25	; 0x800c1e <device+0x1>
    ec82:	80 93 1f 0c 	sts	0x0C1F, r24	; 0x800c1f <device+0x2>
    ec86:	20 91 06 0a 	lds	r18, 0x0A06	; 0x800a06 <dvanact>
    ec8a:	30 91 07 0a 	lds	r19, 0x0A07	; 0x800a07 <dvanact+0x1>
    ec8e:	36 95       	lsr	r19
    ec90:	27 95       	ror	r18
    ec92:	20 93 20 0c 	sts	0x0C20, r18	; 0x800c20 <device+0x3>
    ec96:	20 91 ce 0a 	lds	r18, 0x0ACE	; 0x800ace <light_curr>
    ec9a:	30 91 cf 0a 	lds	r19, 0x0ACF	; 0x800acf <light_curr+0x1>
    ec9e:	36 95       	lsr	r19
    eca0:	27 95       	ror	r18
    eca2:	20 93 21 0c 	sts	0x0C21, r18	; 0x800c21 <device+0x4>
    eca6:	20 91 04 0a 	lds	r18, 0x0A04	; 0x800a04 <proud>
    ecaa:	30 91 05 0a 	lds	r19, 0x0A05	; 0x800a05 <proud+0x1>
    ecae:	36 95       	lsr	r19
    ecb0:	27 95       	ror	r18
    ecb2:	20 93 22 0c 	sts	0x0C22, r18	; 0x800c22 <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4376
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 110;
    ecb6:	30 ec       	ldi	r19, 0xC0	; 192
    ecb8:	30 93 23 0c 	sts	0x0C23, r19	; 0x800c23 <device+0x6>
    ecbc:	28 ea       	ldi	r18, 0xA8	; 168
    ecbe:	20 93 24 0c 	sts	0x0C24, r18	; 0x800c24 <device+0x7>
    ecc2:	80 93 25 0c 	sts	0x0C25, r24	; 0x800c25 <device+0x8>
    ecc6:	4e e6       	ldi	r20, 0x6E	; 110
    ecc8:	40 93 26 0c 	sts	0x0C26, r20	; 0x800c26 <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4377
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
    eccc:	10 93 27 0c 	sts	0x0C27, r17	; 0x800c27 <device+0xa>
    ecd0:	10 93 28 0c 	sts	0x0C28, r17	; 0x800c28 <device+0xb>
    ecd4:	10 93 29 0c 	sts	0x0C29, r17	; 0x800c29 <device+0xc>
    ecd8:	10 92 2a 0c 	sts	0x0C2A, r1	; 0x800c2a <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4379

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
    ecdc:	30 93 2f 0c 	sts	0x0C2F, r19	; 0x800c2f <device+0x12>
    ece0:	20 93 30 0c 	sts	0x0C30, r18	; 0x800c30 <device+0x13>
    ece4:	80 93 31 0c 	sts	0x0C31, r24	; 0x800c31 <device+0x14>
    ece8:	90 93 32 0c 	sts	0x0C32, r25	; 0x800c32 <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4380
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
    ecec:	30 93 2b 0c 	sts	0x0C2B, r19	; 0x800c2b <device+0xe>
    ecf0:	20 93 2c 0c 	sts	0x0C2C, r18	; 0x800c2c <device+0xf>
    ecf4:	80 93 2d 0c 	sts	0x0C2D, r24	; 0x800c2d <device+0x10>
    ecf8:	90 93 2e 0c 	sts	0x0C2E, r25	; 0x800c2e <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4381
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
    ecfc:	30 93 3d 0c 	sts	0x0C3D, r19	; 0x800c3d <device+0x20>
    ed00:	20 93 3e 0c 	sts	0x0C3E, r18	; 0x800c3e <device+0x21>
    ed04:	80 93 3f 0c 	sts	0x0C3F, r24	; 0x800c3f <device+0x22>
    ed08:	90 93 40 0c 	sts	0x0C40, r25	; 0x800c40 <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4382
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
    ed0c:	30 93 6b 0c 	sts	0x0C6B, r19	; 0x800c6b <device+0x4e>
    ed10:	20 93 6c 0c 	sts	0x0C6C, r18	; 0x800c6c <device+0x4f>
    ed14:	80 93 6d 0c 	sts	0x0C6D, r24	; 0x800c6d <device+0x50>
    ed18:	90 93 6e 0c 	sts	0x0C6E, r25	; 0x800c6e <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4383
        device.mqtt_port = 1883;
    ed1c:	8b e5       	ldi	r24, 0x5B	; 91
    ed1e:	97 e0       	ldi	r25, 0x07	; 7
    ed20:	90 93 42 0c 	sts	0x0C42, r25	; 0x800c42 <device+0x25>
    ed24:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4384
        strcpy(device.mqtt_user, "saric");
    ed28:	6e ec       	ldi	r22, 0xCE	; 206
    ed2a:	76 e0       	ldi	r23, 0x06	; 6
    ed2c:	83 e4       	ldi	r24, 0x43	; 67
    ed2e:	9c e0       	ldi	r25, 0x0C	; 12
    ed30:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4385
        strcpy(device.mqtt_key, "no");
    ed34:	64 ed       	ldi	r22, 0xD4	; 212
    ed36:	76 e0       	ldi	r23, 0x06	; 6
    ed38:	87 e5       	ldi	r24, 0x57	; 87
    ed3a:	9c e0       	ldi	r25, 0x0C	; 12
    ed3c:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4386
        save_setup_network();
    ed40:	0e 94 2b 52 	call	0xa456	; 0xa456 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4387
        strcpy(str1, "TERM D1");
    ed44:	67 ed       	ldi	r22, 0xD7	; 215
    ed46:	76 e0       	ldi	r23, 0x06	; 6
    ed48:	8d 2d       	mov	r24, r13
    ed4a:	9b 2d       	mov	r25, r11
    ed4c:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4388
        device_set_name(str1);
    ed50:	8d 2d       	mov	r24, r13
    ed52:	9b 2d       	mov	r25, r11
    ed54:	0e 94 03 52 	call	0xa406	; 0xa406 <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4390
        char hostname[10];
        device_get_name(hostname);
    ed58:	ce 01       	movw	r24, r28
    ed5a:	82 52       	subi	r24, 0x22	; 34
    ed5c:	9f 4f       	sbci	r25, 0xFF	; 255
    ed5e:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4391
        default_ring = 0;
    ed62:	10 92 0c 0a 	sts	0x0A0C, r1	; 0x800a0c <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2832
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    ed66:	60 e0       	ldi	r22, 0x00	; 0
    ed68:	8c e5       	ldi	r24, 0x5C	; 92
    ed6a:	90 e0       	ldi	r25, 0x00	; 0
    ed6c:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    ed70:	f0 cc       	rjmp	.-1568   	; 0xe752 <setup+0x750>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4396
        default_ring = 0;
        set_default_ring(default_ring);
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
    ed72:	6f eb       	ldi	r22, 0xBF	; 191
    ed74:	73 e3       	ldi	r23, 0x33	; 51
    ed76:	8d 2d       	mov	r24, r13
    ed78:	9b 2d       	mov	r25, r11
    ed7a:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4397
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ed7e:	ee 24       	eor	r14, r14
    ed80:	ea 94       	dec	r14
    ed82:	fe 2c       	mov	r15, r14
    ed84:	00 ee       	ldi	r16, 0xE0	; 224
    ed86:	17 e0       	ldi	r17, 0x07	; 7
    ed88:	21 e0       	ldi	r18, 0x01	; 1
    ed8a:	46 e4       	ldi	r20, 0x46	; 70
    ed8c:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4430
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    ed8e:	6e e1       	ldi	r22, 0x1E	; 30
    ed90:	70 e0       	ldi	r23, 0x00	; 0
    ed92:	5d c0       	rjmp	.+186    	; 0xee4e <setup+0xe4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4402
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
    ed94:	b3 e0       	ldi	r27, 0x03	; 3
    ed96:	ab 12       	cpse	r10, r27
    ed98:	72 c0       	rjmp	.+228    	; 0xee7e <setup+0xe7c>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50



void SRAM_23LC::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    ed9a:	61 e0       	ldi	r22, 0x01	; 1
    ed9c:	80 91 86 0c 	lds	r24, 0x0C86	; 0x800c86 <SRAM+0x8>
    eda0:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
    eda4:	61 e0       	ldi	r22, 0x01	; 1
    eda6:	80 91 86 0c 	lds	r24, 0x0C86	; 0x800c86 <SRAM+0x8>
    edaa:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
    edae:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <SRAM>
    edb2:	90 91 7f 0c 	lds	r25, 0x0C7F	; 0x800c7f <SRAM+0x1>
    edb6:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <SoftSPIB::begin()>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
    edba:	60 e0       	ldi	r22, 0x00	; 0
    edbc:	80 91 86 0c 	lds	r24, 0x0C86	; 0x800c86 <SRAM+0x8>
    edc0:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
    edc4:	61 e0       	ldi	r22, 0x01	; 1
    edc6:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <SRAM>
    edca:	90 91 7f 0c 	lds	r25, 0x0C7F	; 0x800c7f <SRAM+0x1>
    edce:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  pinMode(_chipSelect, OUTPUT);

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
    edd2:	60 e4       	ldi	r22, 0x40	; 64
    edd4:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <SRAM>
    edd8:	90 91 7f 0c 	lds	r25, 0x0C7F	; 0x800c7f <SRAM+0x1>
    eddc:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
    ede0:	61 e0       	ldi	r22, 0x01	; 1
    ede2:	80 91 86 0c 	lds	r24, 0x0C86	; 0x800c86 <SRAM+0x8>
    ede6:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4405
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
    edea:	4b ea       	ldi	r20, 0xAB	; 171
    edec:	60 e0       	ldi	r22, 0x00	; 0
    edee:	70 e0       	ldi	r23, 0x00	; 0
    edf0:	cb 01       	movw	r24, r22
    edf2:	0e 94 a1 89 	call	0x11342	; 0x11342 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4406
      if (SRAM.readByte(0) == 0xAB)
    edf6:	60 e0       	ldi	r22, 0x00	; 0
    edf8:	70 e0       	ldi	r23, 0x00	; 0
    edfa:	cb 01       	movw	r24, r22
    edfc:	0e 94 dd 89 	call	0x113ba	; 0x113ba <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4408
      {
        strcpy_P(str1, text_test_ram);
    ee00:	62 eb       	ldi	r22, 0xB2	; 178
    ee02:	73 e3       	ldi	r23, 0x33	; 51
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4406
    /// test SRAM
    if (init == 3)
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
    ee04:	8b 3a       	cpi	r24, 0xAB	; 171
    ee06:	41 f5       	brne	.+80     	; 0xee58 <setup+0xe56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4408
      {
        strcpy_P(str1, text_test_ram);
    ee08:	8d 2d       	mov	r24, r13
    ee0a:	9b 2d       	mov	r25, r11
    ee0c:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4409
        strcat(str1, " init ...");
    ee10:	6f ed       	ldi	r22, 0xDF	; 223
    ee12:	76 e0       	ldi	r23, 0x06	; 6
    ee14:	8d 2d       	mov	r24, r13
    ee16:	9b 2d       	mov	r25, r11
    ee18:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4410
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ee1c:	ee 24       	eor	r14, r14
    ee1e:	ea 94       	dec	r14
    ee20:	fe 2c       	mov	r15, r14
    ee22:	00 ee       	ldi	r16, 0xE0	; 224
    ee24:	17 e0       	ldi	r17, 0x07	; 7
    ee26:	21 e0       	ldi	r18, 0x01	; 1
    ee28:	40 e5       	ldi	r20, 0x50	; 80
    ee2a:	50 e0       	ldi	r21, 0x00	; 0
    ee2c:	6e e1       	ldi	r22, 0x1E	; 30
    ee2e:	70 e0       	ldi	r23, 0x00	; 0
    ee30:	8d 2d       	mov	r24, r13
    ee32:	9b 2d       	mov	r25, r11
    ee34:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4423
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
    ee38:	6f ea       	ldi	r22, 0xAF	; 175
    ee3a:	73 e3       	ldi	r23, 0x33	; 51
    ee3c:	8d 2d       	mov	r24, r13
    ee3e:	9b 2d       	mov	r25, r11
    ee40:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4424
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ee44:	21 e0       	ldi	r18, 0x01	; 1
    ee46:	40 e5       	ldi	r20, 0x50	; 80
    ee48:	50 e0       	ldi	r21, 0x00	; 0
    ee4a:	62 ed       	ldi	r22, 0xD2	; 210
    ee4c:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4430
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    ee4e:	8d 2d       	mov	r24, r13
    ee50:	9b 2d       	mov	r25, r11
    ee52:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    ee56:	7d cc       	rjmp	.-1798   	; 0xe752 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4428
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
    ee58:	8d 2d       	mov	r24, r13
    ee5a:	9b 2d       	mov	r25, r11
    ee5c:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4429
        strcat_P(str1, text_err);
    ee60:	65 e3       	ldi	r22, 0x35	; 53
    ee62:	74 e3       	ldi	r23, 0x34	; 52
    ee64:	8d 2d       	mov	r24, r13
    ee66:	9b 2d       	mov	r25, r11
    ee68:	0e 94 33 aa 	call	0x15466	; 0x15466 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4430
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    ee6c:	ee 24       	eor	r14, r14
    ee6e:	ea 94       	dec	r14
    ee70:	fe 2c       	mov	r15, r14
    ee72:	00 e0       	ldi	r16, 0x00	; 0
    ee74:	18 ef       	ldi	r17, 0xF8	; 248
    ee76:	21 e0       	ldi	r18, 0x01	; 1
    ee78:	40 e5       	ldi	r20, 0x50	; 80
    ee7a:	50 e0       	ldi	r21, 0x00	; 0
    ee7c:	88 cf       	rjmp	.-240    	; 0xed8e <setup+0xd8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4435
      }
    }

    //// init EEPROMKY
    if (init == 4)
    ee7e:	e4 e0       	ldi	r30, 0x04	; 4
    ee80:	ae 12       	cpse	r10, r30
    ee82:	e5 c4       	rjmp	.+2506   	; 0xf84e <setup+0x184c>
begin():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:31
}


void EEPROM_CAT25::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    ee84:	61 e0       	ldi	r22, 0x01	; 1
    ee86:	80 91 79 0c 	lds	r24, 0x0C79	; 0x800c79 <SROM+0xa>
    ee8a:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:32
  pinMode(_chipSelect, OUTPUT);
    ee8e:	61 e0       	ldi	r22, 0x01	; 1
    ee90:	80 91 79 0c 	lds	r24, 0x0C79	; 0x800c79 <SROM+0xa>
    ee94:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:34

  _spi->begin();
    ee98:	80 91 6f 0c 	lds	r24, 0x0C6F	; 0x800c6f <SROM>
    ee9c:	90 91 70 0c 	lds	r25, 0x0C70	; 0x800c70 <SROM+0x1>
    eea0:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <SoftSPIB::begin()>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90
}

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
    eea4:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <SROM+0x4>
    eea8:	90 91 74 0c 	lds	r25, 0x0C74	; 0x800c74 <SROM+0x5>
    eeac:	a0 91 75 0c 	lds	r26, 0x0C75	; 0x800c75 <SROM+0x6>
    eeb0:	b0 91 76 0c 	lds	r27, 0x0C76	; 0x800c76 <SROM+0x7>
    eeb4:	89 2b       	or	r24, r25
    eeb6:	8a 2b       	or	r24, r26
    eeb8:	8b 2b       	or	r24, r27
    eeba:	a9 f0       	breq	.+42     	; 0xeee6 <setup+0xee4>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    eebc:	0e 94 62 8a 	call	0x114c4	; 0x114c4 <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>
    eec0:	80 fd       	sbrc	r24, 0
    eec2:	fc cf       	rjmp	.-8      	; 0xeebc <setup+0xeba>
enableWrite():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:60
  return(true);
}

void EEPROM_CAT25::enableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WREN, 0);
    eec4:	86 e0       	ldi	r24, 0x06	; 6
    eec6:	0e 94 1a 8a 	call	0x11434	; 0x11434 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:61
  endCommand();
    eeca:	0e 94 15 8a 	call	0x1142a	; 0x1142a <EEPROM_CAT25::endCommand() [clone .constprop.90]>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  while (!isReady()) {
    yield();
  }

  enableWrite();
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
    eece:	82 e0       	ldi	r24, 0x02	; 2
    eed0:	0e 94 1a 8a 	call	0x11434	; 0x11434 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
    eed4:	6a eb       	ldi	r22, 0xBA	; 186
    eed6:	80 91 6f 0c 	lds	r24, 0x0C6F	; 0x800c6f <SROM>
    eeda:	90 91 70 0c 	lds	r25, 0x0C70	; 0x800c70 <SROM+0x1>
    eede:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
    eee2:	0e 94 15 8a 	call	0x1142a	; 0x1142a <EEPROM_CAT25::endCommand() [clone .constprop.90]>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    eee6:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <SROM+0x4>
    eeea:	90 91 74 0c 	lds	r25, 0x0C74	; 0x800c74 <SROM+0x5>
    eeee:	a0 91 75 0c 	lds	r26, 0x0C75	; 0x800c75 <SROM+0x6>
    eef2:	b0 91 76 0c 	lds	r27, 0x0C76	; 0x800c76 <SROM+0x7>
    eef6:	89 2b       	or	r24, r25
    eef8:	8a 2b       	or	r24, r26
    eefa:	8b 2b       	or	r24, r27
    eefc:	71 f1       	breq	.+92     	; 0xef5a <setup+0xf58>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    eefe:	0e 94 62 8a 	call	0x114c4	; 0x114c4 <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>
    ef02:	80 fd       	sbrc	r24, 0
    ef04:	fc cf       	rjmp	.-8      	; 0xeefe <setup+0xefc>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80

  while (!isReady()) {
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
    ef06:	83 e0       	ldi	r24, 0x03	; 3
    ef08:	0e 94 1a 8a 	call	0x11434	; 0x11434 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
    ef0c:	6f ef       	ldi	r22, 0xFF	; 255
    ef0e:	80 91 6f 0c 	lds	r24, 0x0C6F	; 0x800c6f <SROM>
    ef12:	90 91 70 0c 	lds	r25, 0x0C70	; 0x800c70 <SROM+0x1>
    ef16:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
    ef1a:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
    ef1c:	0e 94 15 8a 	call	0x1142a	; 0x1142a <EEPROM_CAT25::endCommand() [clone .constprop.90]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4439
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
    ef20:	1a 3b       	cpi	r17, 0xBA	; 186
    ef22:	d9 f4       	brne	.+54     	; 0xef5a <setup+0xf58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4442

      {
        strcpy_P(str1, text_test_eeprom);
    ef24:	6f e9       	ldi	r22, 0x9F	; 159
    ef26:	73 e3       	ldi	r23, 0x33	; 51
    ef28:	8d 2d       	mov	r24, r13
    ef2a:	9b 2d       	mov	r25, r11
    ef2c:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4443
        strcat_P(str1, text_ok);
    ef30:	6f ea       	ldi	r22, 0xAF	; 175
    ef32:	73 e3       	ldi	r23, 0x33	; 51
    ef34:	8d 2d       	mov	r24, r13
    ef36:	9b 2d       	mov	r25, r11
    ef38:	0e 94 33 aa 	call	0x15466	; 0x15466 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4444
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ef3c:	ee 24       	eor	r14, r14
    ef3e:	ea 94       	dec	r14
    ef40:	fe 2c       	mov	r15, r14
    ef42:	00 ee       	ldi	r16, 0xE0	; 224
    ef44:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4450
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    ef46:	21 e0       	ldi	r18, 0x01	; 1
    ef48:	4a e5       	ldi	r20, 0x5A	; 90
    ef4a:	50 e0       	ldi	r21, 0x00	; 0
    ef4c:	6e e1       	ldi	r22, 0x1E	; 30
    ef4e:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4565
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ef50:	8d 2d       	mov	r24, r13
    ef52:	9b 2d       	mov	r25, r11
    ef54:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    ef58:	fc c0       	rjmp	.+504    	; 0xf152 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4448
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
    ef5a:	6f e9       	ldi	r22, 0x9F	; 159
    ef5c:	73 e3       	ldi	r23, 0x33	; 51
    ef5e:	8d 2d       	mov	r24, r13
    ef60:	9b 2d       	mov	r25, r11
    ef62:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4449
        strcat_P(str1, text_err);
    ef66:	65 e3       	ldi	r22, 0x35	; 53
    ef68:	74 e3       	ldi	r23, 0x34	; 52
    ef6a:	8d 2d       	mov	r24, r13
    ef6c:	9b 2d       	mov	r25, r11
    ef6e:	0e 94 33 aa 	call	0x15466	; 0x15466 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4450
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    ef72:	ee 24       	eor	r14, r14
    ef74:	ea 94       	dec	r14
    ef76:	fe 2c       	mov	r15, r14
    ef78:	00 e0       	ldi	r16, 0x00	; 0
    ef7a:	18 ef       	ldi	r17, 0xF8	; 248
    ef7c:	e4 cf       	rjmp	.-56     	; 0xef46 <setup+0xf44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4457
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
    ef7e:	6d e8       	ldi	r22, 0x8D	; 141
    ef80:	73 e3       	ldi	r23, 0x33	; 51
    ef82:	8d 2d       	mov	r24, r13
    ef84:	9b 2d       	mov	r25, r11
    ef86:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4458
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ef8a:	ee 24       	eor	r14, r14
    ef8c:	ea 94       	dec	r14
    ef8e:	fe 2c       	mov	r15, r14
    ef90:	00 ee       	ldi	r16, 0xE0	; 224
    ef92:	17 e0       	ldi	r17, 0x07	; 7
    ef94:	21 e0       	ldi	r18, 0x01	; 1
    ef96:	44 e6       	ldi	r20, 0x64	; 100
    ef98:	50 e0       	ldi	r21, 0x00	; 0
    ef9a:	6e e1       	ldi	r22, 0x1E	; 30
    ef9c:	70 e0       	ldi	r23, 0x00	; 0
    ef9e:	8d 2d       	mov	r24, r13
    efa0:	9b 2d       	mov	r25, r11
    efa2:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    efa6:	ad e1       	ldi	r26, 0x1D	; 29
    efa8:	ea 2e       	mov	r14, r26
    efaa:	ac e0       	ldi	r26, 0x0C	; 12
    efac:	fa 2e       	mov	r15, r26
    efae:	0e e6       	ldi	r16, 0x6E	; 110
    efb0:	10 e0       	ldi	r17, 0x00	; 0
load_setup_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:25

///////////////////////////////////////// MQTT network funkce //////////////////////////////////////////////////////
//
void load_setup_network(void)
{
  for (uint8_t m = 0; m < 6; m++) device.mac[m] = EEPROM.read(device_mac + m);
    efb2:	c8 01       	movw	r24, r16
    efb4:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    efb8:	d7 01       	movw	r26, r14
    efba:	8d 93       	st	X+, r24
    efbc:	7d 01       	movw	r14, r26
    efbe:	0f 5f       	subi	r16, 0xFF	; 255
    efc0:	1f 4f       	sbci	r17, 0xFF	; 255
    efc2:	04 37       	cpi	r16, 0x74	; 116
    efc4:	11 05       	cpc	r17, r1
    efc6:	a9 f7       	brne	.-22     	; 0xefb2 <setup+0xfb0>
    efc8:	e3 e2       	ldi	r30, 0x23	; 35
    efca:	ee 2e       	mov	r14, r30
    efcc:	ec e0       	ldi	r30, 0x0C	; 12
    efce:	fe 2e       	mov	r15, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:26
  for (uint8_t m = 0; m < 4; m++) device.myIP[m] = EEPROM.read(device_ip + m);
    efd0:	c8 01       	movw	r24, r16
    efd2:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    efd6:	f7 01       	movw	r30, r14
    efd8:	81 93       	st	Z+, r24
    efda:	7f 01       	movw	r14, r30
    efdc:	0f 5f       	subi	r16, 0xFF	; 255
    efde:	1f 4f       	sbci	r17, 0xFF	; 255
    efe0:	08 37       	cpi	r16, 0x78	; 120
    efe2:	11 05       	cpc	r17, r1
    efe4:	a9 f7       	brne	.-22     	; 0xefd0 <setup+0xfce>
    efe6:	77 e2       	ldi	r23, 0x27	; 39
    efe8:	e7 2e       	mov	r14, r23
    efea:	7c e0       	ldi	r23, 0x0C	; 12
    efec:	f7 2e       	mov	r15, r23
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:27
  for (uint8_t m = 0; m < 4; m++) device.myMASK[m] = EEPROM.read(device_mask + m);
    efee:	c8 01       	movw	r24, r16
    eff0:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    eff4:	d7 01       	movw	r26, r14
    eff6:	8d 93       	st	X+, r24
    eff8:	7d 01       	movw	r14, r26
    effa:	0f 5f       	subi	r16, 0xFF	; 255
    effc:	1f 4f       	sbci	r17, 0xFF	; 255
    effe:	0c 37       	cpi	r16, 0x7C	; 124
    f000:	11 05       	cpc	r17, r1
    f002:	a9 f7       	brne	.-22     	; 0xefee <setup+0xfec>
    f004:	5f e2       	ldi	r21, 0x2F	; 47
    f006:	85 2e       	mov	r8, r21
    f008:	5c e0       	ldi	r21, 0x0C	; 12
    f00a:	95 2e       	mov	r9, r21
    f00c:	60 e8       	ldi	r22, 0x80	; 128
    f00e:	e6 2e       	mov	r14, r22
    f010:	f1 2c       	mov	r15, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:28
  for (uint8_t m = 0; m < 4; m++) device.myGW[m] = EEPROM.read(device_gw + m);
    f012:	c7 01       	movw	r24, r14
    f014:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f018:	f4 01       	movw	r30, r8
    f01a:	81 93       	st	Z+, r24
    f01c:	4f 01       	movw	r8, r30
    f01e:	ff ef       	ldi	r31, 0xFF	; 255
    f020:	ef 1a       	sub	r14, r31
    f022:	ff 0a       	sbc	r15, r31
    f024:	24 e8       	ldi	r18, 0x84	; 132
    f026:	e2 16       	cp	r14, r18
    f028:	f1 04       	cpc	r15, r1
    f02a:	99 f7       	brne	.-26     	; 0xf012 <setup+0x1010>
    f02c:	4b e2       	ldi	r20, 0x2B	; 43
    f02e:	84 2e       	mov	r8, r20
    f030:	4c e0       	ldi	r20, 0x0C	; 12
    f032:	94 2e       	mov	r9, r20
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:29
  for (uint8_t m = 0; m < 4; m++) device.myDNS[m] = EEPROM.read(device_dns + m);
    f034:	c8 01       	movw	r24, r16
    f036:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f03a:	d4 01       	movw	r26, r8
    f03c:	8d 93       	st	X+, r24
    f03e:	4d 01       	movw	r8, r26
    f040:	0f 5f       	subi	r16, 0xFF	; 255
    f042:	1f 4f       	sbci	r17, 0xFF	; 255
    f044:	00 38       	cpi	r16, 0x80	; 128
    f046:	11 05       	cpc	r17, r1
    f048:	a9 f7       	brne	.-22     	; 0xf034 <setup+0x1032>
    f04a:	33 e3       	ldi	r19, 0x33	; 51
    f04c:	83 2e       	mov	r8, r19
    f04e:	3c e0       	ldi	r19, 0x0C	; 12
    f050:	93 2e       	mov	r9, r19
    f052:	04 e6       	ldi	r16, 0x64	; 100
    f054:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:30
  for (uint8_t m = 0; m < 9; m++) device.nazev[m] = EEPROM.read(device_nazev + m);
    f056:	c8 01       	movw	r24, r16
    f058:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f05c:	f4 01       	movw	r30, r8
    f05e:	81 93       	st	Z+, r24
    f060:	4f 01       	movw	r8, r30
    f062:	0f 5f       	subi	r16, 0xFF	; 255
    f064:	1f 4f       	sbci	r17, 0xFF	; 255
    f066:	0d 36       	cpi	r16, 0x6D	; 109
    f068:	11 05       	cpc	r17, r1
    f06a:	a9 f7       	brne	.-22     	; 0xf056 <setup+0x1054>
    f06c:	0d e3       	ldi	r16, 0x3D	; 61
    f06e:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:31
  for (uint8_t m = 0; m < 4; m++) device.mqtt_server[m] = EEPROM.read(device_mqtt_server + m);
    f070:	c7 01       	movw	r24, r14
    f072:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f076:	d8 01       	movw	r26, r16
    f078:	8d 93       	st	X+, r24
    f07a:	8d 01       	movw	r16, r26
    f07c:	bf ef       	ldi	r27, 0xFF	; 255
    f07e:	eb 1a       	sub	r14, r27
    f080:	fb 0a       	sbc	r15, r27
    f082:	e8 e8       	ldi	r30, 0x88	; 136
    f084:	ee 16       	cp	r14, r30
    f086:	f1 04       	cpc	r15, r1
    f088:	99 f7       	brne	.-26     	; 0xf070 <setup+0x106e>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:32
  device.mqtt_port = (EEPROM.read(device_mqtt_port) << 8) + EEPROM.read(device_mqtt_port + 1);
    f08a:	88 e8       	ldi	r24, 0x88	; 136
    f08c:	90 e0       	ldi	r25, 0x00	; 0
    f08e:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f092:	18 2f       	mov	r17, r24
    f094:	89 e8       	ldi	r24, 0x89	; 137
    f096:	90 e0       	ldi	r25, 0x00	; 0
    f098:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f09c:	21 2f       	mov	r18, r17
    f09e:	30 e0       	ldi	r19, 0x00	; 0
    f0a0:	32 2f       	mov	r19, r18
    f0a2:	22 27       	eor	r18, r18
    f0a4:	82 0f       	add	r24, r18
    f0a6:	93 2f       	mov	r25, r19
    f0a8:	91 1d       	adc	r25, r1
    f0aa:	90 93 42 0c 	sts	0x0C42, r25	; 0x800c42 <device+0x25>
    f0ae:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <device+0x24>
    f0b2:	23 e4       	ldi	r18, 0x43	; 67
    f0b4:	e2 2e       	mov	r14, r18
    f0b6:	2c e0       	ldi	r18, 0x0C	; 12
    f0b8:	f2 2e       	mov	r15, r18
    f0ba:	0a e8       	ldi	r16, 0x8A	; 138
    f0bc:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:33
  for (uint8_t m = 0; m < 20; m++) device.mqtt_user[m] = EEPROM.read(device_mqtt_user + m);
    f0be:	c8 01       	movw	r24, r16
    f0c0:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f0c4:	d7 01       	movw	r26, r14
    f0c6:	8d 93       	st	X+, r24
    f0c8:	7d 01       	movw	r14, r26
    f0ca:	0f 5f       	subi	r16, 0xFF	; 255
    f0cc:	1f 4f       	sbci	r17, 0xFF	; 255
    f0ce:	0e 39       	cpi	r16, 0x9E	; 158
    f0d0:	11 05       	cpc	r17, r1
    f0d2:	a9 f7       	brne	.-22     	; 0xf0be <setup+0x10bc>
    f0d4:	87 e5       	ldi	r24, 0x57	; 87
    f0d6:	e8 2e       	mov	r14, r24
    f0d8:	8c e0       	ldi	r24, 0x0C	; 12
    f0da:	f8 2e       	mov	r15, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:34
  for (uint8_t m = 0; m < 20; m++) device.mqtt_key[m] = EEPROM.read(device_mqtt_key + m);
    f0dc:	c8 01       	movw	r24, r16
    f0de:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f0e2:	f7 01       	movw	r30, r14
    f0e4:	81 93       	st	Z+, r24
    f0e6:	7f 01       	movw	r14, r30
    f0e8:	0f 5f       	subi	r16, 0xFF	; 255
    f0ea:	1f 4f       	sbci	r17, 0xFF	; 255
    f0ec:	02 3b       	cpi	r16, 0xB2	; 178
    f0ee:	11 05       	cpc	r17, r1
    f0f0:	a9 f7       	brne	.-22     	; 0xf0dc <setup+0x10da>
    f0f2:	bb e6       	ldi	r27, 0x6B	; 107
    f0f4:	eb 2e       	mov	r14, r27
    f0f6:	bc e0       	ldi	r27, 0x0C	; 12
    f0f8:	fb 2e       	mov	r15, r27
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:35
  for (uint8_t m = 0; m < 4; m++) device.ntp_server[m] = EEPROM.read(device_ntp_server + m);
    f0fa:	c8 01       	movw	r24, r16
    f0fc:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f100:	d7 01       	movw	r26, r14
    f102:	8d 93       	st	X+, r24
    f104:	7d 01       	movw	r14, r26
    f106:	0f 5f       	subi	r16, 0xFF	; 255
    f108:	1f 4f       	sbci	r17, 0xFF	; 255
    f10a:	06 3b       	cpi	r16, 0xB6	; 182
    f10c:	11 05       	cpc	r17, r1
    f10e:	a9 f7       	brne	.-22     	; 0xf0fa <setup+0x10f8>
    f110:	47 e1       	ldi	r20, 0x17	; 23
    f112:	5a e0       	ldi	r21, 0x0A	; 10
    f114:	26 e0       	ldi	r18, 0x06	; 6
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4464
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    f116:	60 e2       	ldi	r22, 0x20	; 32
    f118:	7e e4       	ldi	r23, 0x4E	; 78
load_setup_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:35
    f11a:	90 e0       	ldi	r25, 0x00	; 0
    f11c:	80 e0       	ldi	r24, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4464
    f11e:	fc 01       	movw	r30, r24
    f120:	ee 0f       	add	r30, r30
    f122:	ff 1f       	adc	r31, r31
    f124:	e4 0f       	add	r30, r20
    f126:	f5 1f       	adc	r31, r21
    f128:	70 87       	std	Z+8, r23	; 0x08
    f12a:	67 83       	std	Z+7, r22	; 0x07
    f12c:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4463
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    f12e:	8a 30       	cpi	r24, 0x0A	; 10
    f130:	91 05       	cpc	r25, r1
    f132:	a9 f7       	brne	.-22     	; 0xf11e <setup+0x111c>
    f134:	21 50       	subi	r18, 0x01	; 1
    f136:	42 5e       	subi	r20, 0xE2	; 226
    f138:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4462
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    f13a:	21 11       	cpse	r18, r1
    f13c:	ee cf       	rjmp	.-36     	; 0xf11a <setup+0x1118>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4467
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    f13e:	10 92 12 0a 	sts	0x0A12, r1	; 0x800a12 <last_output_update>
    f142:	10 92 13 0a 	sts	0x0A13, r1	; 0x800a13 <last_output_update+0x1>
    f146:	10 92 14 0a 	sts	0x0A14, r1	; 0x800a14 <last_output_update+0x2>
    f14a:	10 92 15 0a 	sts	0x0A15, r1	; 0x800a15 <last_output_update+0x3>
    f14e:	10 92 16 0a 	sts	0x0A16, r1	; 0x800a16 <last_output_update+0x4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4261
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
    f152:	a3 94       	inc	r10
    f154:	c4 5c       	subi	r28, 0xC4	; 196
    f156:	de 4f       	sbci	r29, 0xFE	; 254
    f158:	e8 81       	ld	r30, Y
    f15a:	f9 81       	ldd	r31, Y+1	; 0x01
    f15c:	cc 53       	subi	r28, 0x3C	; 60
    f15e:	d1 40       	sbci	r29, 0x01	; 1
    f160:	3f 96       	adiw	r30, 0x0f	; 15
    f162:	c4 5c       	subi	r28, 0xC4	; 196
    f164:	de 4f       	sbci	r29, 0xFE	; 254
    f166:	f9 83       	std	Y+1, r31	; 0x01
    f168:	e8 83       	st	Y, r30
    f16a:	cc 53       	subi	r28, 0x3C	; 60
    f16c:	d1 40       	sbci	r29, 0x01	; 1
    f16e:	f0 e1       	ldi	r31, 0x10	; 16
    f170:	af 12       	cpse	r10, r31
    f172:	8f c9       	rjmp	.-3298   	; 0xe492 <setup+0x490>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4641
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
    f174:	64 ef       	ldi	r22, 0xF4	; 244
    f176:	71 e0       	ldi	r23, 0x01	; 1
    f178:	80 e0       	ldi	r24, 0x00	; 0
    f17a:	90 e0       	ldi	r25, 0x00	; 0
    f17c:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4642
  MenuPrepareStyle();
    f180:	0e 94 36 31 	call	0x626c	; 0x626c <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4643
  draw_menu(true);
    f184:	81 e0       	ldi	r24, 0x01	; 1
    f186:	0e 94 23 3d 	call	0x7a46	; 0x7a46 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4644
  a2d_run_now = 1;
    f18a:	81 e0       	ldi	r24, 0x01	; 1
    f18c:	80 93 d0 0a 	sts	0x0AD0, r24	; 0x800ad0 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4646

}
    f190:	c3 5b       	subi	r28, 0xB3	; 179
    f192:	de 4f       	sbci	r29, 0xFE	; 254
    f194:	0f b6       	in	r0, 0x3f	; 63
    f196:	f8 94       	cli
    f198:	de bf       	out	0x3e, r29	; 62
    f19a:	0f be       	out	0x3f, r0	; 63
    f19c:	cd bf       	out	0x3d, r28	; 61
    f19e:	df 91       	pop	r29
    f1a0:	cf 91       	pop	r28
    f1a2:	1f 91       	pop	r17
    f1a4:	0f 91       	pop	r16
    f1a6:	ff 90       	pop	r15
    f1a8:	ef 90       	pop	r14
    f1aa:	df 90       	pop	r13
    f1ac:	cf 90       	pop	r12
    f1ae:	bf 90       	pop	r11
    f1b0:	af 90       	pop	r10
    f1b2:	9f 90       	pop	r9
    f1b4:	8f 90       	pop	r8
    f1b6:	7f 90       	pop	r7
    f1b8:	6f 90       	pop	r6
    f1ba:	5f 90       	pop	r5
    f1bc:	4f 90       	pop	r4
    f1be:	3f 90       	pop	r3
    f1c0:	2f 90       	pop	r2
    f1c2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4473
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
    f1c4:	61 e8       	ldi	r22, 0x81	; 129
    f1c6:	73 e3       	ldi	r23, 0x33	; 51
    f1c8:	c1 01       	movw	r24, r2
    f1ca:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4474
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f1ce:	ee 24       	eor	r14, r14
    f1d0:	ea 94       	dec	r14
    f1d2:	fe 2c       	mov	r15, r14
    f1d4:	00 ee       	ldi	r16, 0xE0	; 224
    f1d6:	17 e0       	ldi	r17, 0x07	; 7
    f1d8:	21 e0       	ldi	r18, 0x01	; 1
    f1da:	4e e6       	ldi	r20, 0x6E	; 110
    f1dc:	50 e0       	ldi	r21, 0x00	; 0
    f1de:	6e e1       	ldi	r22, 0x1E	; 30
    f1e0:	70 e0       	ldi	r23, 0x00	; 0
    f1e2:	c1 01       	movw	r24, r2
    f1e4:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    f1e8:	20 91 cc 0d 	lds	r18, 0x0DCC	; 0x800dcc <my_lcd+0x14>
    f1ec:	30 91 cd 0d 	lds	r19, 0x0DCD	; 0x800dcd <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
    f1f0:	40 91 ca 0d 	lds	r20, 0x0DCA	; 0x800dca <my_lcd+0x12>
    f1f4:	50 91 cb 0d 	lds	r21, 0x0DCB	; 0x800dcb <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
    f1f8:	90 91 ce 0d 	lds	r25, 0x0DCE	; 0x800dce <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
    f1fc:	e0 91 af 0d 	lds	r30, 0x0DAF	; 0x800daf <my_touch+0x15>
    f200:	f0 91 b0 0d 	lds	r31, 0x0DB0	; 0x800db0 <my_touch+0x16>
    f204:	80 81       	ld	r24, Z
    f206:	60 91 b6 0d 	lds	r22, 0x0DB6	; 0x800db6 <my_touch+0x1c>
    f20a:	86 2b       	or	r24, r22
    f20c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
    f20e:	e0 91 ab 0d 	lds	r30, 0x0DAB	; 0x800dab <my_touch+0x11>
    f212:	f0 91 ac 0d 	lds	r31, 0x0DAC	; 0x800dac <my_touch+0x12>
    f216:	80 81       	ld	r24, Z
    f218:	60 91 b4 0d 	lds	r22, 0x0DB4	; 0x800db4 <my_touch+0x1a>
    f21c:	86 2b       	or	r24, r22
    f21e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
    f220:	e0 91 a9 0d 	lds	r30, 0x0DA9	; 0x800da9 <my_touch+0xf>
    f224:	f0 91 aa 0d 	lds	r31, 0x0DAA	; 0x800daa <my_touch+0x10>
    f228:	80 81       	ld	r24, Z
    f22a:	60 91 b3 0d 	lds	r22, 0x0DB3	; 0x800db3 <my_touch+0x19>
    f22e:	86 2b       	or	r24, r22
    f230:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
    f232:	50 93 a3 0d 	sts	0x0DA3, r21	; 0x800da3 <my_touch+0x9>
    f236:	40 93 a2 0d 	sts	0x0DA2, r20	; 0x800da2 <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
    f23a:	30 93 a5 0d 	sts	0x0DA5, r19	; 0x800da5 <my_touch+0xb>
    f23e:	20 93 a4 0d 	sts	0x0DA4, r18	; 0x800da4 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
    f242:	90 93 a8 0d 	sts	0x0DA8, r25	; 0x800da8 <my_touch+0xe>
    f246:	85 cf       	rjmp	.-246    	; 0xf152 <setup+0x1150>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4500
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
    f248:	65 e3       	ldi	r22, 0x35	; 53
    f24a:	74 e3       	ldi	r23, 0x34	; 52
    f24c:	8d 2d       	mov	r24, r13
    f24e:	9b 2d       	mov	r25, r11
    f250:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4501
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    f254:	ee 24       	eor	r14, r14
    f256:	ea 94       	dec	r14
    f258:	fe 2c       	mov	r15, r14
    f25a:	00 e0       	ldi	r16, 0x00	; 0
    f25c:	18 ef       	ldi	r17, 0xF8	; 248
    f25e:	21 e0       	ldi	r18, 0x01	; 1
    f260:	48 e7       	ldi	r20, 0x78	; 120
    f262:	50 e0       	ldi	r21, 0x00	; 0
    f264:	60 ea       	ldi	r22, 0xA0	; 160
    f266:	70 e0       	ldi	r23, 0x00	; 0
    f268:	8d 2d       	mov	r24, r13
    f26a:	9b 2d       	mov	r25, r11
    f26c:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3934
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f270:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <selftest_data>
    f274:	84 60       	ori	r24, 0x04	; 4
    f276:	3d c3       	rjmp	.+1658   	; 0xf8f2 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4507
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
    f278:	e8 e0       	ldi	r30, 0x08	; 8
    f27a:	ae 12       	cpse	r10, r30
    f27c:	9d c0       	rjmp	.+314    	; 0xf3b8 <setup+0x13b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4509
    {
      strcpy_P(str1, text_onewire_hledam);
    f27e:	65 e6       	ldi	r22, 0x65	; 101
    f280:	73 e3       	ldi	r23, 0x33	; 51
    f282:	8d 2d       	mov	r24, r13
    f284:	9b 2d       	mov	r25, r11
    f286:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4510
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f28a:	ee 24       	eor	r14, r14
    f28c:	ea 94       	dec	r14
    f28e:	fe 2c       	mov	r15, r14
    f290:	00 ee       	ldi	r16, 0xE0	; 224
    f292:	17 e0       	ldi	r17, 0x07	; 7
    f294:	21 e0       	ldi	r18, 0x01	; 1
    f296:	42 e8       	ldi	r20, 0x82	; 130
    f298:	50 e0       	ldi	r21, 0x00	; 0
    f29a:	6e e1       	ldi	r22, 0x1E	; 30
    f29c:	70 e0       	ldi	r23, 0x00	; 0
    f29e:	8d 2d       	mov	r24, r13
    f2a0:	9b 2d       	mov	r25, r11
    f2a2:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4511
      Global_HWwirenum = 0;
    f2a6:	10 92 ff 09 	sts	0x09FF, r1	; 0x8009ff <Global_HWwirenum>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:234
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
    f2aa:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <ds2482_address+0x1>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
    f2ae:	10 91 73 09 	lds	r17, 0x0973	; 0x800973 <ds2482_address>
ds2482init():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:186
 * Initialize TWI, this routine is designed for 8Mhz operation.
 */
uint8_t ds2482init(uint8_t addr)
{

	Wire.beginTransmission(addr);
    f2b2:	81 2f       	mov	r24, r17
    f2b4:	0e 94 2d 84 	call	0x1085a	; 0x1085a <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:187
        if (Wire.endTransmission() == I2C_ERROR_OK)
    f2b8:	87 ef       	ldi	r24, 0xF7	; 247
    f2ba:	9d e0       	ldi	r25, 0x0D	; 13
    f2bc:	0e 94 a8 90 	call	0x12150	; 0x12150 <TwoWire::endTransmission()>
    f2c0:	81 11       	cpse	r24, r1
    f2c2:	10 c0       	rjmp	.+32     	; 0xf2e4 <setup+0x12e2>
ds2482setConfig():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:352
	//	return DS2482_ERR_WRITE;

	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
    f2c4:	81 2f       	mov	r24, r17
    f2c6:	0e 94 2d 84 	call	0x1085a	; 0x1085a <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:353
        Wire.write(DS2482_C_WCFG);
    f2ca:	82 ed       	ldi	r24, 0xD2	; 210
    f2cc:	90 e0       	ldi	r25, 0x00	; 0
    f2ce:	0e 94 d5 85 	call	0x10baa	; 0x10baa <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:354
        Wire.write(config);
    f2d2:	60 e0       	ldi	r22, 0x00	; 0
    f2d4:	87 ef       	ldi	r24, 0xF7	; 247
    f2d6:	9d e0       	ldi	r25, 0x0D	; 13
    f2d8:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:355
        if (Wire.endTransmission() == I2C_ERROR_OK)
    f2dc:	87 ef       	ldi	r24, 0xF7	; 247
    f2de:	9d e0       	ldi	r25, 0x0D	; 13
    f2e0:	0e 94 a8 90 	call	0x12150	; 0x12150 <TwoWire::endTransmission()>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
    f2e4:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <ds2482_address>
    f2e8:	0e 94 1c 91 	call	0x12238	; 0x12238 <ds2482reset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
    f2ec:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <ds2482_address>
    f2f0:	0e 94 e6 91 	call	0x123cc	; 0x123cc <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
    f2f4:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <ds2482_address>
owMatchFirst():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
    f2f8:	10 92 62 0b 	sts	0x0B62, r1	; 0x800b62 <lastDevice>
    f2fc:	10 92 59 0b 	sts	0x0B59, r1	; 0x800b59 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
    f300:	0e 94 1c 92 	call	0x12438	; 0x12438 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    f304:	81 11       	cpse	r24, r1
    f306:	35 c0       	rjmp	.+106    	; 0xf372 <setup+0x1370>
    f308:	1b e0       	ldi	r17, 0x0B	; 11
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:251
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
    f30a:	01 e0       	ldi	r16, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
    f30c:	80 91 74 09 	lds	r24, 0x0974	; 0x800974 <ds2482_address+0x1>
    f310:	86 30       	cpi	r24, 0x06	; 6
    f312:	78 f5       	brcc	.+94     	; 0xf372 <setup+0x1370>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
    f314:	20 91 ff 09 	lds	r18, 0x09FF	; 0x8009ff <Global_HWwirenum>
    f318:	42 2f       	mov	r20, r18
    f31a:	50 e0       	ldi	r21, 0x00	; 0
    f31c:	aa e5       	ldi	r26, 0x5A	; 90
    f31e:	bb e0       	ldi	r27, 0x0B	; 11
    f320:	21 9f       	mul	r18, r17
    f322:	90 01       	movw	r18, r0
    f324:	11 24       	eor	r1, r1
    f326:	90 e0       	ldi	r25, 0x00	; 0
    f328:	80 e0       	ldi	r24, 0x00	; 0
    f32a:	6d 91       	ld	r22, X+
    f32c:	fc 01       	movw	r30, r24
    f32e:	e2 0f       	add	r30, r18
    f330:	f3 1f       	adc	r31, r19
    f332:	e3 54       	subi	r30, 0x43	; 67
    f334:	f6 4f       	sbci	r31, 0xF6	; 246
    f336:	60 83       	st	Z, r22
    f338:	01 96       	adiw	r24, 0x01	; 1
    f33a:	88 30       	cpi	r24, 0x08	; 8
    f33c:	91 05       	cpc	r25, r1
    f33e:	a9 f7       	brne	.-22     	; 0xf32a <setup+0x1328>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
    f340:	14 9f       	mul	r17, r20
    f342:	f0 01       	movw	r30, r0
    f344:	15 9f       	mul	r17, r21
    f346:	f0 0d       	add	r31, r0
    f348:	11 24       	eor	r1, r1
    f34a:	e3 54       	subi	r30, 0x43	; 67
    f34c:	f6 4f       	sbci	r31, 0xF6	; 246
    f34e:	10 86       	std	Z+8, r1	; 0x08
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
    f350:	01 87       	std	Z+9, r16	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
    f352:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <ds2482_address>
    f356:	0e 94 1c 92 	call	0x12438	; 0x12438 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
    f35a:	90 91 74 09 	lds	r25, 0x0974	; 0x800974 <ds2482_address+0x1>
    f35e:	9f 5f       	subi	r25, 0xFF	; 255
    f360:	90 93 74 09 	sts	0x0974, r25	; 0x800974 <ds2482_address+0x1>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
    f364:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <Global_HWwirenum>
    f368:	9f 5f       	subi	r25, 0xFF	; 255
    f36a:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <Global_HWwirenum>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
    f36e:	85 30       	cpi	r24, 0x05	; 5
    f370:	69 f6       	brne	.-102    	; 0xf30c <setup+0x130a>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4513
      one_hw_search_device(0);
      tds_update_associate();
    f372:	0e 94 c2 55 	call	0xab84	; 0xab84 <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4514
      strcpy (str1, "Nalezeno: ");
    f376:	69 ee       	ldi	r22, 0xE9	; 233
    f378:	76 e0       	ldi	r23, 0x06	; 6
    f37a:	8d 2d       	mov	r24, r13
    f37c:	9b 2d       	mov	r25, r11
    f37e:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4515
      itoa(Global_HWwirenum, str2, 10);
    f382:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f386:	4a e0       	ldi	r20, 0x0A	; 10
    f388:	be 01       	movw	r22, r28
    f38a:	68 57       	subi	r22, 0x78	; 120
    f38c:	7f 4f       	sbci	r23, 0xFF	; 255
    f38e:	90 e0       	ldi	r25, 0x00	; 0
    f390:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4516
      strcat(str1, str2);
    f394:	be 01       	movw	r22, r28
    f396:	68 57       	subi	r22, 0x78	; 120
    f398:	7f 4f       	sbci	r23, 0xFF	; 255
    f39a:	8d 2d       	mov	r24, r13
    f39c:	9b 2d       	mov	r25, r11
    f39e:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4517
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f3a2:	ee 24       	eor	r14, r14
    f3a4:	ea 94       	dec	r14
    f3a6:	fe 2c       	mov	r15, r14
    f3a8:	00 ee       	ldi	r16, 0xE0	; 224
    f3aa:	17 e0       	ldi	r17, 0x07	; 7
    f3ac:	21 e0       	ldi	r18, 0x01	; 1
    f3ae:	42 e8       	ldi	r20, 0x82	; 130
    f3b0:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4565
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f3b2:	60 ea       	ldi	r22, 0xA0	; 160
    f3b4:	70 e0       	ldi	r23, 0x00	; 0
    f3b6:	cc cd       	rjmp	.-1128   	; 0xef50 <setup+0xf4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4521
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
    f3b8:	f9 e0       	ldi	r31, 0x09	; 9
    f3ba:	af 12       	cpse	r10, r31
    f3bc:	9d c2       	rjmp	.+1338   	; 0xf8f8 <setup+0x18f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4523
    {
      digitalWrite(ETH_RST, HIGH);
    f3be:	61 e0       	ldi	r22, 0x01	; 1
    f3c0:	86 e0       	ldi	r24, 0x06	; 6
    f3c2:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4524
      delay(10);
    f3c6:	6a e0       	ldi	r22, 0x0A	; 10
    f3c8:	70 e0       	ldi	r23, 0x00	; 0
    f3ca:	80 e0       	ldi	r24, 0x00	; 0
    f3cc:	90 e0       	ldi	r25, 0x00	; 0
    f3ce:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4525
      digitalWrite(ETH_RST, LOW);
    f3d2:	60 e0       	ldi	r22, 0x00	; 0
    f3d4:	86 e0       	ldi	r24, 0x06	; 6
    f3d6:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4526
      delay(10);
    f3da:	6a e0       	ldi	r22, 0x0A	; 10
    f3dc:	70 e0       	ldi	r23, 0x00	; 0
    f3de:	80 e0       	ldi	r24, 0x00	; 0
    f3e0:	90 e0       	ldi	r25, 0x00	; 0
    f3e2:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4527
      digitalWrite(ETH_RST, HIGH);
    f3e6:	61 e0       	ldi	r22, 0x01	; 1
    f3e8:	86 e0       	ldi	r24, 0x06	; 6
    f3ea:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4528
      delay(100);
    f3ee:	64 e6       	ldi	r22, 0x64	; 100
    f3f0:	70 e0       	ldi	r23, 0x00	; 0
    f3f2:	80 e0       	ldi	r24, 0x00	; 0
    f3f4:	90 e0       	ldi	r25, 0x00	; 0
    f3f6:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
    f3fa:	8f e0       	ldi	r24, 0x0F	; 15
    f3fc:	80 93 14 0c 	sts	0x0C14, r24	; 0x800c14 <Ethernet+0xc>
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    f400:	82 ee       	ldi	r24, 0xE2	; 226
    f402:	92 e0       	ldi	r25, 0x02	; 2
    f404:	ce 5c       	subi	r28, 0xCE	; 206
    f406:	de 4f       	sbci	r29, 0xFE	; 254
    f408:	99 83       	std	Y+1, r25	; 0x01
    f40a:	88 83       	st	Y, r24
    f40c:	c2 53       	subi	r28, 0x32	; 50
    f40e:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    f410:	24 e0       	ldi	r18, 0x04	; 4
    f412:	e7 e2       	ldi	r30, 0x27	; 39
    f414:	fc e0       	ldi	r31, 0x0C	; 12
    f416:	cc 5b       	subi	r28, 0xBC	; 188
    f418:	de 4f       	sbci	r29, 0xFE	; 254
    f41a:	a8 81       	ld	r26, Y
    f41c:	b9 81       	ldd	r27, Y+1	; 0x01
    f41e:	c4 54       	subi	r28, 0x44	; 68
    f420:	d1 40       	sbci	r29, 0x01	; 1
    f422:	01 90       	ld	r0, Z+
    f424:	0d 92       	st	X+, r0
    f426:	2a 95       	dec	r18
    f428:	e1 f7       	brne	.-8      	; 0xf422 <setup+0x1420>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    f42a:	c4 5d       	subi	r28, 0xD4	; 212
    f42c:	de 4f       	sbci	r29, 0xFE	; 254
    f42e:	99 83       	std	Y+1, r25	; 0x01
    f430:	88 83       	st	Y, r24
    f432:	cc 52       	subi	r28, 0x2C	; 44
    f434:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    f436:	24 e0       	ldi	r18, 0x04	; 4
    f438:	ef e2       	ldi	r30, 0x2F	; 47
    f43a:	fc e0       	ldi	r31, 0x0C	; 12
    f43c:	ca 5b       	subi	r28, 0xBA	; 186
    f43e:	de 4f       	sbci	r29, 0xFE	; 254
    f440:	a8 81       	ld	r26, Y
    f442:	b9 81       	ldd	r27, Y+1	; 0x01
    f444:	c6 54       	subi	r28, 0x46	; 70
    f446:	d1 40       	sbci	r29, 0x01	; 1
    f448:	01 90       	ld	r0, Z+
    f44a:	0d 92       	st	X+, r0
    f44c:	2a 95       	dec	r18
    f44e:	e1 f7       	brne	.-8      	; 0xf448 <setup+0x1446>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    f450:	ca 5d       	subi	r28, 0xDA	; 218
    f452:	de 4f       	sbci	r29, 0xFE	; 254
    f454:	99 83       	std	Y+1, r25	; 0x01
    f456:	88 83       	st	Y, r24
    f458:	c6 52       	subi	r28, 0x26	; 38
    f45a:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    f45c:	24 e0       	ldi	r18, 0x04	; 4
    f45e:	eb e2       	ldi	r30, 0x2B	; 43
    f460:	fc e0       	ldi	r31, 0x0C	; 12
    f462:	c8 5b       	subi	r28, 0xB8	; 184
    f464:	de 4f       	sbci	r29, 0xFE	; 254
    f466:	a8 81       	ld	r26, Y
    f468:	b9 81       	ldd	r27, Y+1	; 0x01
    f46a:	c8 54       	subi	r28, 0x48	; 72
    f46c:	d1 40       	sbci	r29, 0x01	; 1
    f46e:	01 90       	ld	r0, Z+
    f470:	0d 92       	st	X+, r0
    f472:	2a 95       	dec	r18
    f474:	e1 f7       	brne	.-8      	; 0xf46e <setup+0x146c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    f476:	c2 52       	subi	r28, 0x22	; 34
    f478:	df 4f       	sbci	r29, 0xFF	; 255
    f47a:	99 83       	std	Y+1, r25	; 0x01
    f47c:	88 83       	st	Y, r24
    f47e:	ce 5d       	subi	r28, 0xDE	; 222
    f480:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    f482:	84 e0       	ldi	r24, 0x04	; 4
    f484:	e3 e2       	ldi	r30, 0x23	; 35
    f486:	fc e0       	ldi	r31, 0x0C	; 12
    f488:	c6 5b       	subi	r28, 0xB6	; 182
    f48a:	de 4f       	sbci	r29, 0xFE	; 254
    f48c:	a8 81       	ld	r26, Y
    f48e:	b9 81       	ldd	r27, Y+1	; 0x01
    f490:	ca 54       	subi	r28, 0x4A	; 74
    f492:	d1 40       	sbci	r29, 0x01	; 1
    f494:	01 90       	ld	r0, Z+
    f496:	0d 92       	st	X+, r0
    f498:	8a 95       	dec	r24
    f49a:	e1 f7       	brne	.-8      	; 0xf494 <setup+0x1492>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4530
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
    f49c:	9e 01       	movw	r18, r28
    f49e:	2e 5c       	subi	r18, 0xCE	; 206
    f4a0:	3e 4f       	sbci	r19, 0xFE	; 254
    f4a2:	ae 01       	movw	r20, r28
    f4a4:	44 5d       	subi	r20, 0xD4	; 212
    f4a6:	5e 4f       	sbci	r21, 0xFE	; 254
    f4a8:	be 01       	movw	r22, r28
    f4aa:	6a 5d       	subi	r22, 0xDA	; 218
    f4ac:	7e 4f       	sbci	r23, 0xFE	; 254
    f4ae:	ce 01       	movw	r24, r28
    f4b0:	82 52       	subi	r24, 0x22	; 34
    f4b2:	9f 4f       	sbci	r25, 0xFF	; 255
    f4b4:	0e 94 94 97 	call	0x12f28	; 0x12f28 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4531
      strcpy_P(str1, text_ethernet_rozhrani);
    f4b8:	63 e5       	ldi	r22, 0x53	; 83
    f4ba:	73 e3       	ldi	r23, 0x33	; 51
    f4bc:	8d 2d       	mov	r24, r13
    f4be:	9b 2d       	mov	r25, r11
    f4c0:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4532
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f4c4:	ee 24       	eor	r14, r14
    f4c6:	ea 94       	dec	r14
    f4c8:	fe 2c       	mov	r15, r14
    f4ca:	00 ee       	ldi	r16, 0xE0	; 224
    f4cc:	17 e0       	ldi	r17, 0x07	; 7
    f4ce:	21 e0       	ldi	r18, 0x01	; 1
    f4d0:	4c e8       	ldi	r20, 0x8C	; 140
    f4d2:	50 e0       	ldi	r21, 0x00	; 0
    f4d4:	6e e1       	ldi	r22, 0x1E	; 30
    f4d6:	70 e0       	ldi	r23, 0x00	; 0
    f4d8:	8d 2d       	mov	r24, r13
    f4da:	9b 2d       	mov	r25, r11
    f4dc:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4533
      delay(100);
    f4e0:	64 e6       	ldi	r22, 0x64	; 100
    f4e2:	70 e0       	ldi	r23, 0x00	; 0
    f4e4:	80 e0       	ldi	r24, 0x00	; 0
    f4e6:	90 e0       	ldi	r25, 0x00	; 0
    f4e8:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
    f4ec:	32 ce       	rjmp	.-924    	; 0xf152 <setup+0x1150>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3934
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f4ee:	90 62       	ori	r25, 0x20	; 32
    f4f0:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <selftest_data>
    f4f4:	42 c2       	rjmp	.+1156   	; 0xf97a <setup+0x1978>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4564
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
    f4f6:	6f ea       	ldi	r22, 0xAF	; 175
    f4f8:	73 e3       	ldi	r23, 0x33	; 51
    f4fa:	8d 2d       	mov	r24, r13
    f4fc:	9b 2d       	mov	r25, r11
    f4fe:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4565
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f502:	ee 24       	eor	r14, r14
    f504:	ea 94       	dec	r14
    f506:	fe 2c       	mov	r15, r14
    f508:	00 ee       	ldi	r16, 0xE0	; 224
    f50a:	17 e0       	ldi	r17, 0x07	; 7
    f50c:	5b c2       	rjmp	.+1206   	; 0xf9c4 <setup+0x19c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4571
      }

    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    f50e:	3b e0       	ldi	r19, 0x0B	; 11
    f510:	a3 12       	cpse	r10, r19
    f512:	0f c0       	rjmp	.+30     	; 0xf532 <setup+0x1530>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4573
    {
      strcpy_P(str1, text_rest_rozhrani);
    f514:	64 e2       	ldi	r22, 0x24	; 36
    f516:	73 e3       	ldi	r23, 0x33	; 51
    f518:	8d 2d       	mov	r24, r13
    f51a:	9b 2d       	mov	r25, r11
    f51c:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4574
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f520:	ee 24       	eor	r14, r14
    f522:	ea 94       	dec	r14
    f524:	fe 2c       	mov	r15, r14
    f526:	00 ee       	ldi	r16, 0xE0	; 224
    f528:	17 e0       	ldi	r17, 0x07	; 7
    f52a:	21 e0       	ldi	r18, 0x01	; 1
    f52c:	40 ea       	ldi	r20, 0xA0	; 160
    f52e:	50 e0       	ldi	r21, 0x00	; 0
    f530:	0d cd       	rjmp	.-1510   	; 0xef4c <setup+0xf4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4578
    }
    ///
    /// inicializace nrf
    if (init == 12)
    f532:	8c e0       	ldi	r24, 0x0C	; 12
    f534:	a8 12       	cpse	r10, r24
    f536:	4a c2       	rjmp	.+1172   	; 0xf9cc <setup+0x19ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4580
    {
      strcpy_P(str1, text_nrf_rozhrani);
    f538:	67 e1       	ldi	r22, 0x17	; 23
    f53a:	73 e3       	ldi	r23, 0x33	; 51
    f53c:	8d 2d       	mov	r24, r13
    f53e:	9b 2d       	mov	r25, r11
    f540:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4581
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f544:	ee 24       	eor	r14, r14
    f546:	ea 94       	dec	r14
    f548:	fe 2c       	mov	r15, r14
    f54a:	00 ee       	ldi	r16, 0xE0	; 224
    f54c:	17 e0       	ldi	r17, 0x07	; 7
    f54e:	21 e0       	ldi	r18, 0x01	; 1
    f550:	4a ea       	ldi	r20, 0xAA	; 170
    f552:	50 e0       	ldi	r21, 0x00	; 0
    f554:	fb cc       	rjmp	.-1546   	; 0xef4c <setup+0xf4a>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
    f556:	d8 01       	movw	r26, r16
    f558:	d2 96       	adiw	r26, 0x32	; 50
    f55a:	8d 91       	ld	r24, X+
    f55c:	9d 91       	ld	r25, X+
    f55e:	0d 90       	ld	r0, X+
    f560:	bc 91       	ld	r27, X
    f562:	a0 2d       	mov	r26, r0
    f564:	c8 5c       	subi	r28, 0xC8	; 200
    f566:	de 4f       	sbci	r29, 0xFE	; 254
    f568:	88 83       	st	Y, r24
    f56a:	99 83       	std	Y+1, r25	; 0x01
    f56c:	aa 83       	std	Y+2, r26	; 0x02
    f56e:	bb 83       	std	Y+3, r27	; 0x03
    f570:	c8 53       	subi	r28, 0x38	; 56
    f572:	d1 40       	sbci	r29, 0x01	; 1
    f574:	9c 01       	movw	r18, r24
    f576:	ad 01       	movw	r20, r26
    f578:	c3 01       	movw	r24, r6
    f57a:	b2 01       	movw	r22, r4
    f57c:	0e 94 bb b2 	call	0x16576	; 0x16576 <__cmpsf2>
    f580:	87 fd       	sbrc	r24, 7
    f582:	13 c3       	rjmp	.+1574   	; 0xfbaa <setup+0x1ba8>
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  /*we just went from manual to auto*/
        PID::Initialize();
    }
    inAuto = newAuto;
    f584:	d8 01       	movw	r26, r16
    f586:	da 96       	adiw	r26, 0x3a	; 58
    f588:	cc 92       	st	X, r12
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    f58a:	f8 01       	movw	r30, r16
    f58c:	12 aa       	std	Z+50, r1	; 0x32
    f58e:	13 aa       	std	Z+51, r1	; 0x33
    f590:	14 aa       	std	Z+52, r1	; 0x34
    f592:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
    f594:	80 e0       	ldi	r24, 0x00	; 0
    f596:	90 e0       	ldi	r25, 0x00	; 0
    f598:	af e7       	ldi	r26, 0x7F	; 127
    f59a:	b3 e4       	ldi	r27, 0x43	; 67
    f59c:	86 ab       	std	Z+54, r24	; 0x36
    f59e:	97 ab       	std	Z+55, r25	; 0x37
    f5a0:	a0 af       	std	Z+56, r26	; 0x38
    f5a2:	b1 af       	std	Z+57, r27	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    f5a4:	26 8d       	ldd	r18, Z+30	; 0x1e
    f5a6:	37 8d       	ldd	r19, Z+31	; 0x1f
    f5a8:	c8 5c       	subi	r28, 0xC8	; 200
    f5aa:	de 4f       	sbci	r29, 0xFE	; 254
    f5ac:	39 83       	std	Y+1, r19	; 0x01
    f5ae:	28 83       	st	Y, r18
    f5b0:	c8 53       	subi	r28, 0x38	; 56
    f5b2:	d1 40       	sbci	r29, 0x01	; 1
    f5b4:	d9 01       	movw	r26, r18
    f5b6:	4d 90       	ld	r4, X+
    f5b8:	5d 90       	ld	r5, X+
    f5ba:	6d 90       	ld	r6, X+
    f5bc:	7c 90       	ld	r7, X
    f5be:	20 e0       	ldi	r18, 0x00	; 0
    f5c0:	30 e0       	ldi	r19, 0x00	; 0
    f5c2:	4f e7       	ldi	r20, 0x7F	; 127
    f5c4:	53 e4       	ldi	r21, 0x43	; 67
    f5c6:	c3 01       	movw	r24, r6
    f5c8:	b2 01       	movw	r22, r4
    f5ca:	0e 94 9d b5 	call	0x16b3a	; 0x16b3a <__gesf2>
    f5ce:	18 16       	cp	r1, r24
    f5d0:	94 f5       	brge	.+100    	; 0xf636 <setup+0x1634>
    f5d2:	80 e0       	ldi	r24, 0x00	; 0
    f5d4:	90 e0       	ldi	r25, 0x00	; 0
    f5d6:	af e7       	ldi	r26, 0x7F	; 127
    f5d8:	b3 e4       	ldi	r27, 0x43	; 67
    f5da:	c8 5c       	subi	r28, 0xC8	; 200
    f5dc:	de 4f       	sbci	r29, 0xFE	; 254
    f5de:	e8 81       	ld	r30, Y
    f5e0:	f9 81       	ldd	r31, Y+1	; 0x01
    f5e2:	c8 53       	subi	r28, 0x38	; 56
    f5e4:	d1 40       	sbci	r29, 0x01	; 1
    f5e6:	80 83       	st	Z, r24
    f5e8:	91 83       	std	Z+1, r25	; 0x01
    f5ea:	a2 83       	std	Z+2, r26	; 0x02
    f5ec:	b3 83       	std	Z+3, r27	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
    f5ee:	d8 01       	movw	r26, r16
    f5f0:	96 96       	adiw	r26, 0x26	; 38
    f5f2:	8d 91       	ld	r24, X+
    f5f4:	9d 91       	ld	r25, X+
    f5f6:	0d 90       	ld	r0, X+
    f5f8:	bc 91       	ld	r27, X
    f5fa:	a0 2d       	mov	r26, r0
    f5fc:	c8 5c       	subi	r28, 0xC8	; 200
    f5fe:	de 4f       	sbci	r29, 0xFE	; 254
    f600:	88 83       	st	Y, r24
    f602:	99 83       	std	Y+1, r25	; 0x01
    f604:	aa 83       	std	Y+2, r26	; 0x02
    f606:	bb 83       	std	Y+3, r27	; 0x03
    f608:	c8 53       	subi	r28, 0x38	; 56
    f60a:	d1 40       	sbci	r29, 0x01	; 1
    f60c:	f8 01       	movw	r30, r16
    f60e:	46 a8       	ldd	r4, Z+54	; 0x36
    f610:	57 a8       	ldd	r5, Z+55	; 0x37
    f612:	60 ac       	ldd	r6, Z+56	; 0x38
    f614:	71 ac       	ldd	r7, Z+57	; 0x39
    f616:	a3 01       	movw	r20, r6
    f618:	92 01       	movw	r18, r4
    f61a:	bc 01       	movw	r22, r24
    f61c:	cd 01       	movw	r24, r26
    f61e:	0e 94 9d b5 	call	0x16b3a	; 0x16b3a <__gesf2>
    f622:	18 16       	cp	r1, r24
    f624:	ec f4       	brge	.+58     	; 0xf660 <setup+0x165e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
    f626:	d8 01       	movw	r26, r16
    f628:	96 96       	adiw	r26, 0x26	; 38
    f62a:	4d 92       	st	X+, r4
    f62c:	5d 92       	st	X+, r5
    f62e:	6d 92       	st	X+, r6
    f630:	7c 92       	st	X, r7
    f632:	99 97       	sbiw	r26, 0x29	; 41
    f634:	28 c0       	rjmp	.+80     	; 0xf686 <setup+0x1684>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
    f636:	20 e0       	ldi	r18, 0x00	; 0
    f638:	30 e0       	ldi	r19, 0x00	; 0
    f63a:	a9 01       	movw	r20, r18
    f63c:	c3 01       	movw	r24, r6
    f63e:	b2 01       	movw	r22, r4
    f640:	0e 94 bb b2 	call	0x16576	; 0x16576 <__cmpsf2>
    f644:	87 ff       	sbrs	r24, 7
    f646:	d3 cf       	rjmp	.-90     	; 0xf5ee <setup+0x15ec>
    f648:	c8 5c       	subi	r28, 0xC8	; 200
    f64a:	de 4f       	sbci	r29, 0xFE	; 254
    f64c:	a8 81       	ld	r26, Y
    f64e:	b9 81       	ldd	r27, Y+1	; 0x01
    f650:	c8 53       	subi	r28, 0x38	; 56
    f652:	d1 40       	sbci	r29, 0x01	; 1
    f654:	1d 92       	st	X+, r1
    f656:	1d 92       	st	X+, r1
    f658:	1d 92       	st	X+, r1
    f65a:	1c 92       	st	X, r1
    f65c:	13 97       	sbiw	r26, 0x03	; 3
    f65e:	c7 cf       	rjmp	.-114    	; 0xf5ee <setup+0x15ec>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
    f660:	f8 01       	movw	r30, r16
    f662:	42 a8       	ldd	r4, Z+50	; 0x32
    f664:	53 a8       	ldd	r5, Z+51	; 0x33
    f666:	64 a8       	ldd	r6, Z+52	; 0x34
    f668:	75 a8       	ldd	r7, Z+53	; 0x35
    f66a:	a3 01       	movw	r20, r6
    f66c:	92 01       	movw	r18, r4
    f66e:	c8 5c       	subi	r28, 0xC8	; 200
    f670:	de 4f       	sbci	r29, 0xFE	; 254
    f672:	68 81       	ld	r22, Y
    f674:	79 81       	ldd	r23, Y+1	; 0x01
    f676:	8a 81       	ldd	r24, Y+2	; 0x02
    f678:	9b 81       	ldd	r25, Y+3	; 0x03
    f67a:	c8 53       	subi	r28, 0x38	; 56
    f67c:	d1 40       	sbci	r29, 0x01	; 1
    f67e:	0e 94 bb b2 	call	0x16576	; 0x16576 <__cmpsf2>
    f682:	87 fd       	sbrc	r24, 7
    f684:	d0 cf       	rjmp	.-96     	; 0xf626 <setup+0x1624>
    f686:	c0 5c       	subi	r28, 0xC0	; 192
    f688:	de 4f       	sbci	r29, 0xFE	; 254
    f68a:	e8 81       	ld	r30, Y
    f68c:	f9 81       	ldd	r31, Y+1	; 0x01
    f68e:	c0 54       	subi	r28, 0x40	; 64
    f690:	d1 40       	sbci	r29, 0x01	; 1
    f692:	34 96       	adiw	r30, 0x04	; 4
    f694:	c0 5c       	subi	r28, 0xC0	; 192
    f696:	de 4f       	sbci	r29, 0xFE	; 254
    f698:	f9 83       	std	Y+1, r31	; 0x01
    f69a:	e8 83       	st	Y, r30
    f69c:	c0 54       	subi	r28, 0x40	; 64
    f69e:	d1 40       	sbci	r29, 0x01	; 1
    f6a0:	ce 5b       	subi	r28, 0xBE	; 190
    f6a2:	de 4f       	sbci	r29, 0xFE	; 254
    f6a4:	28 81       	ld	r18, Y
    f6a6:	39 81       	ldd	r19, Y+1	; 0x01
    f6a8:	c2 54       	subi	r28, 0x42	; 66
    f6aa:	d1 40       	sbci	r29, 0x01	; 1
    f6ac:	2c 5f       	subi	r18, 0xFC	; 252
    f6ae:	3f 4f       	sbci	r19, 0xFF	; 255
    f6b0:	ce 5b       	subi	r28, 0xBE	; 190
    f6b2:	de 4f       	sbci	r29, 0xFE	; 254
    f6b4:	39 83       	std	Y+1, r19	; 0x01
    f6b6:	28 83       	st	Y, r18
    f6b8:	c2 54       	subi	r28, 0x42	; 66
    f6ba:	d1 40       	sbci	r29, 0x01	; 1
    f6bc:	34 e0       	ldi	r19, 0x04	; 4
    f6be:	e3 0e       	add	r14, r19
    f6c0:	f1 1c       	adc	r15, r1
    f6c2:	82 e0       	ldi	r24, 0x02	; 2
    f6c4:	88 0e       	add	r8, r24
    f6c6:	91 1c       	adc	r9, r1
thermostat_init_pid():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:40

PID** array_pids = new PID*[MAX_THERMOSTAT];

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
    f6c8:	9a e0       	ldi	r25, 0x0A	; 10
    f6ca:	89 16       	cp	r8, r25
    f6cc:	91 04       	cpc	r9, r1
    f6ce:	09 f0       	breq	.+2      	; 0xf6d2 <setup+0x16d0>
    f6d0:	ad c1       	rjmp	.+858    	; 0xfa2c <setup+0x1a2a>
    f6d2:	ad e0       	ldi	r26, 0x0D	; 13
    f6d4:	ba e0       	ldi	r27, 0x0A	; 10
    f6d6:	c8 5c       	subi	r28, 0xC8	; 200
    f6d8:	de 4f       	sbci	r29, 0xFE	; 254
    f6da:	b9 83       	std	Y+1, r27	; 0x01
    f6dc:	a8 83       	st	Y, r26
    f6de:	c8 53       	subi	r28, 0x38	; 56
    f6e0:	d1 40       	sbci	r29, 0x01	; 1
    f6e2:	45 e7       	ldi	r20, 0x75	; 117
    f6e4:	44 2e       	mov	r4, r20
    f6e6:	49 e0       	ldi	r20, 0x09	; 9
    f6e8:	54 2e       	mov	r5, r20
    f6ea:	59 e8       	ldi	r21, 0x89	; 137
    f6ec:	65 2e       	mov	r6, r21
    f6ee:	59 e0       	ldi	r21, 0x09	; 9
    f6f0:	75 2e       	mov	r7, r21
    f6f2:	6d e9       	ldi	r22, 0x9D	; 157
    f6f4:	86 2e       	mov	r8, r22
    f6f6:	69 e0       	ldi	r22, 0x09	; 9
    f6f8:	96 2e       	mov	r9, r22
    f6fa:	71 eb       	ldi	r23, 0xB1	; 177
    f6fc:	e7 2e       	mov	r14, r23
    f6fe:	79 e0       	ldi	r23, 0x09	; 9
    f700:	f7 2e       	mov	r15, r23
    f702:	00 e6       	ldi	r16, 0x60	; 96
    f704:	11 e0       	ldi	r17, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4591
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    f706:	c1 2c       	mov	r12, r1
thermostat_ring_set_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    f708:	c8 5c       	subi	r28, 0xC8	; 200
    f70a:	de 4f       	sbci	r29, 0xFE	; 254
    f70c:	e8 81       	ld	r30, Y
    f70e:	f9 81       	ldd	r31, Y+1	; 0x01
    f710:	c8 53       	subi	r28, 0x38	; 56
    f712:	d1 40       	sbci	r29, 0x01	; 1
    f714:	11 92       	st	Z+, r1
    f716:	c8 5c       	subi	r28, 0xC8	; 200
    f718:	de 4f       	sbci	r29, 0xFE	; 254
    f71a:	f9 83       	std	Y+1, r31	; 0x01
    f71c:	e8 83       	st	Y, r30
    f71e:	c8 53       	subi	r28, 0x38	; 56
    f720:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_get_pid_eeprom():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:225
  array_pids[idx]->SetSampleTime(PID_time[idx]);
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
    f722:	c8 01       	movw	r24, r16
    f724:	0e 94 11 97 	call	0x12e22	; 0x12e22 <EEPROMreadFloat(unsigned int)>
    f728:	d2 01       	movw	r26, r4
    f72a:	6d 93       	st	X+, r22
    f72c:	7d 93       	st	X+, r23
    f72e:	8d 93       	st	X+, r24
    f730:	9d 93       	st	X+, r25
    f732:	2d 01       	movw	r4, r26
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
    f734:	c8 01       	movw	r24, r16
    f736:	04 96       	adiw	r24, 0x04	; 4
    f738:	0e 94 11 97 	call	0x12e22	; 0x12e22 <EEPROMreadFloat(unsigned int)>
    f73c:	f3 01       	movw	r30, r6
    f73e:	61 93       	st	Z+, r22
    f740:	71 93       	st	Z+, r23
    f742:	81 93       	st	Z+, r24
    f744:	91 93       	st	Z+, r25
    f746:	3f 01       	movw	r6, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
    f748:	c8 01       	movw	r24, r16
    f74a:	08 96       	adiw	r24, 0x08	; 8
    f74c:	0e 94 11 97 	call	0x12e22	; 0x12e22 <EEPROMreadFloat(unsigned int)>
    f750:	d4 01       	movw	r26, r8
    f752:	6d 93       	st	X+, r22
    f754:	7d 93       	st	X+, r23
    f756:	8d 93       	st	X+, r24
    f758:	9d 93       	st	X+, r25
    f75a:	4d 01       	movw	r8, r26
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
    f75c:	c8 01       	movw	r24, r16
    f75e:	0c 96       	adiw	r24, 0x0c	; 12
    f760:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f764:	f7 01       	movw	r30, r14
    f766:	81 93       	st	Z+, r24
    f768:	7f 01       	movw	r14, r30
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4596
      {
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
    f76a:	8c 2d       	mov	r24, r12
    f76c:	0e 94 97 22 	call	0x452e	; 0x452e <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4591
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    f770:	c3 94       	inc	r12
    f772:	0f 5d       	subi	r16, 0xDF	; 223
    f774:	1f 4f       	sbci	r17, 0xFF	; 255
    f776:	f5 e0       	ldi	r31, 0x05	; 5
    f778:	cf 12       	cpse	r12, r31
    f77a:	c6 cf       	rjmp	.-116    	; 0xf708 <setup+0x1706>
get_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2841
   return
     - uint8_t s id ringu
*/
uint8_t get_default_ring(void)
{
  return EEPROM.read(my_default_ring);
    f77c:	8c e5       	ldi	r24, 0x5C	; 92
    f77e:	90 e0       	ldi	r25, 0x00	; 0
    f780:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4598
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
    f784:	80 93 0c 0a 	sts	0x0A0C, r24	; 0x800a0c <default_ring>
get_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2856
   return
     - uint8_t s id cislo cidla
*/
uint8_t get_default_show_temp(void)
{
  return EEPROM.read(my_default_show_temp);
    f788:	8d e5       	ldi	r24, 0x5D	; 93
    f78a:	90 e0       	ldi	r25, 0x00	; 0
    f78c:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4599
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
    f790:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <default_show_temp>
    f794:	de cc       	rjmp	.-1604   	; 0xf152 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4615
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
    f796:	6f ea       	ldi	r22, 0xAF	; 175
    f798:	73 e3       	ldi	r23, 0x33	; 51
    f79a:	c1 01       	movw	r24, r2
    f79c:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4616
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f7a0:	ee 24       	eor	r14, r14
    f7a2:	ea 94       	dec	r14
    f7a4:	fe 2c       	mov	r15, r14
    f7a6:	00 ee       	ldi	r16, 0xE0	; 224
    f7a8:	17 e0       	ldi	r17, 0x07	; 7
    f7aa:	21 e0       	ldi	r18, 0x01	; 1
    f7ac:	4e eb       	ldi	r20, 0xBE	; 190
    f7ae:	50 e0       	ldi	r21, 0x00	; 0
    f7b0:	60 ea       	ldi	r22, 0xA0	; 160
    f7b2:	70 e0       	ldi	r23, 0x00	; 0
    f7b4:	c1 01       	movw	r24, r2
    f7b6:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3943
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f7ba:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <selftest_data>
    f7be:	8d 7f       	andi	r24, 0xFD	; 253
    f7c0:	98 c0       	rjmp	.+304    	; 0xf8f2 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4622
        selftest_clear_0(SELFTEST_ERR_NTP);
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    f7c2:	bf e0       	ldi	r27, 0x0F	; 15
    f7c4:	ab 12       	cpse	r10, r27
    f7c6:	c5 cc       	rjmp	.-1654   	; 0xf152 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4624
    {
      strcpy_P(str1, text_rtc_cas);
    f7c8:	62 ee       	ldi	r22, 0xE2	; 226
    f7ca:	72 e3       	ldi	r23, 0x32	; 50
    f7cc:	8d 2d       	mov	r24, r13
    f7ce:	9b 2d       	mov	r25, r11
    f7d0:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4625
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f7d4:	ee 24       	eor	r14, r14
    f7d6:	ea 94       	dec	r14
    f7d8:	fe 2c       	mov	r15, r14
    f7da:	00 ee       	ldi	r16, 0xE0	; 224
    f7dc:	17 e0       	ldi	r17, 0x07	; 7
    f7de:	21 e0       	ldi	r18, 0x01	; 1
    f7e0:	48 ec       	ldi	r20, 0xC8	; 200
    f7e2:	50 e0       	ldi	r21, 0x00	; 0
    f7e4:	6e e1       	ldi	r22, 0x1E	; 30
    f7e6:	70 e0       	ldi	r23, 0x00	; 0
    f7e8:	8d 2d       	mov	r24, r13
    f7ea:	9b 2d       	mov	r25, r11
    f7ec:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4626
      if (rtc.isrunning())
    f7f0:	0e 94 05 91 	call	0x1220a	; 0x1220a <RTC_DS1307::isrunning() [clone .constprop.127]>
    f7f4:	88 23       	and	r24, r24
    f7f6:	99 f0       	breq	.+38     	; 0xf81e <setup+0x181c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4628
      {
        strcpy_P(str1, text_ok);
    f7f8:	6f ea       	ldi	r22, 0xAF	; 175
    f7fa:	73 e3       	ldi	r23, 0x33	; 51
    f7fc:	8d 2d       	mov	r24, r13
    f7fe:	9b 2d       	mov	r25, r11
    f800:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4629
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f804:	21 e0       	ldi	r18, 0x01	; 1
    f806:	48 ec       	ldi	r20, 0xC8	; 200
    f808:	50 e0       	ldi	r21, 0x00	; 0
    f80a:	60 ea       	ldi	r22, 0xA0	; 160
    f80c:	70 e0       	ldi	r23, 0x00	; 0
    f80e:	8d 2d       	mov	r24, r13
    f810:	9b 2d       	mov	r25, r11
    f812:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3943
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f816:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <selftest_data>
    f81a:	8e 7f       	andi	r24, 0xFE	; 254
    f81c:	6a c0       	rjmp	.+212    	; 0xf8f2 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4634
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
      }
      else
      {
        strcpy_P(str1, text_err);
    f81e:	65 e3       	ldi	r22, 0x35	; 53
    f820:	74 e3       	ldi	r23, 0x34	; 52
    f822:	8d 2d       	mov	r24, r13
    f824:	9b 2d       	mov	r25, r11
    f826:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4635
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    f82a:	ee 24       	eor	r14, r14
    f82c:	ea 94       	dec	r14
    f82e:	fe 2c       	mov	r15, r14
    f830:	00 e0       	ldi	r16, 0x00	; 0
    f832:	18 ef       	ldi	r17, 0xF8	; 248
    f834:	21 e0       	ldi	r18, 0x01	; 1
    f836:	48 ec       	ldi	r20, 0xC8	; 200
    f838:	50 e0       	ldi	r21, 0x00	; 0
    f83a:	60 ea       	ldi	r22, 0xA0	; 160
    f83c:	70 e0       	ldi	r23, 0x00	; 0
    f83e:	8d 2d       	mov	r24, r13
    f840:	9b 2d       	mov	r25, r11
    f842:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3934
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f846:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <selftest_data>
    f84a:	81 60       	ori	r24, 0x01	; 1
    f84c:	52 c0       	rjmp	.+164    	; 0xf8f2 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4455
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    f84e:	25 e0       	ldi	r18, 0x05	; 5
    f850:	a2 16       	cp	r10, r18
    f852:	09 f4       	brne	.+2      	; 0xf856 <setup+0x1854>
    f854:	94 cb       	rjmp	.-2264   	; 0xef7e <setup+0xf7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4471
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    f856:	36 e0       	ldi	r19, 0x06	; 6
    f858:	a3 16       	cp	r10, r19
    f85a:	09 f4       	brne	.+2      	; 0xf85e <setup+0x185c>
    f85c:	b3 cc       	rjmp	.-1690   	; 0xf1c4 <setup+0x11c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4479
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
    }
    ///
    /// inicializace ds2482
    if (init == 7)
    f85e:	87 e0       	ldi	r24, 0x07	; 7
    f860:	a8 12       	cpse	r10, r24
    f862:	0a cd       	rjmp	.-1516   	; 0xf278 <setup+0x1276>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4481
    {
      strcpy_P(str1, text_onewire_rozhrani);
    f864:	62 e7       	ldi	r22, 0x72	; 114
    f866:	73 e3       	ldi	r23, 0x33	; 51
    f868:	8d 2d       	mov	r24, r13
    f86a:	9b 2d       	mov	r25, r11
    f86c:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4482
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f870:	ee 24       	eor	r14, r14
    f872:	ea 94       	dec	r14
    f874:	fe 2c       	mov	r15, r14
    f876:	00 ee       	ldi	r16, 0xE0	; 224
    f878:	17 e0       	ldi	r17, 0x07	; 7
    f87a:	21 e0       	ldi	r18, 0x01	; 1
    f87c:	48 e7       	ldi	r20, 0x78	; 120
    f87e:	50 e0       	ldi	r21, 0x00	; 0
    f880:	6e e1       	ldi	r22, 0x1E	; 30
    f882:	70 e0       	ldi	r23, 0x00	; 0
    f884:	8d 2d       	mov	r24, r13
    f886:	9b 2d       	mov	r25, r11
    f888:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4483
      ds2482_address[0].i2c_addr = 0b0011000;
    f88c:	88 e1       	ldi	r24, 0x18	; 24
    f88e:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4484
      ds2482_address[0].HWwirenum = 0;
    f892:	10 92 74 09 	sts	0x0974, r1	; 0x800974 <ds2482_address+0x1>
    f896:	e7 e1       	ldi	r30, 0x17	; 23
    f898:	fa e0       	ldi	r31, 0x0A	; 10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4488
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
    f89a:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4489
        status_tds18s20[idx].period_now = 0;
    f89c:	14 8e       	std	Z+28, r1	; 0x1c
    f89e:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4486
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
    f8a0:	ba e0       	ldi	r27, 0x0A	; 10
    f8a2:	eb 3c       	cpi	r30, 0xCB	; 203
    f8a4:	fb 07       	cpc	r31, r27
    f8a6:	c9 f7       	brne	.-14     	; 0xf89a <setup+0x1898>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f8a8:	4a e0       	ldi	r20, 0x0A	; 10
    f8aa:	be 01       	movw	r22, r28
    f8ac:	6e 50       	subi	r22, 0x0E	; 14
    f8ae:	7f 4f       	sbci	r23, 0xFF	; 255
    f8b0:	88 e1       	ldi	r24, 0x18	; 24
    f8b2:	90 e0       	ldi	r25, 0x00	; 0
    f8b4:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4492
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
    f8b8:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <ds2482_address>
    f8bc:	0e 94 1c 91 	call	0x12238	; 0x12238 <ds2482reset(unsigned char)>
    f8c0:	81 11       	cpse	r24, r1
    f8c2:	c2 cc       	rjmp	.-1660   	; 0xf248 <setup+0x1246>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4494
      {
        strcpy_P(str1, text_ok);
    f8c4:	6f ea       	ldi	r22, 0xAF	; 175
    f8c6:	73 e3       	ldi	r23, 0x33	; 51
    f8c8:	8d 2d       	mov	r24, r13
    f8ca:	9b 2d       	mov	r25, r11
    f8cc:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4495
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f8d0:	ee 24       	eor	r14, r14
    f8d2:	ea 94       	dec	r14
    f8d4:	fe 2c       	mov	r15, r14
    f8d6:	00 ee       	ldi	r16, 0xE0	; 224
    f8d8:	17 e0       	ldi	r17, 0x07	; 7
    f8da:	21 e0       	ldi	r18, 0x01	; 1
    f8dc:	48 e7       	ldi	r20, 0x78	; 120
    f8de:	50 e0       	ldi	r21, 0x00	; 0
    f8e0:	60 ea       	ldi	r22, 0xA0	; 160
    f8e2:	70 e0       	ldi	r23, 0x00	; 0
    f8e4:	8d 2d       	mov	r24, r13
    f8e6:	9b 2d       	mov	r25, r11
    f8e8:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3943
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f8ec:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <selftest_data>
    f8f0:	8b 7f       	andi	r24, 0xFB	; 251
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3934
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f8f2:	80 93 cb 0a 	sts	0x0ACB, r24	; 0x800acb <selftest_data>
    f8f6:	2d cc       	rjmp	.-1958   	; 0xf152 <setup+0x1150>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4537
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      delay(100);
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
    f8f8:	9a e0       	ldi	r25, 0x0A	; 10
    f8fa:	a9 12       	cpse	r10, r25
    f8fc:	08 ce       	rjmp	.-1008   	; 0xf50e <setup+0x150c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4539
    {
      strcpy_P(str1, text_mqtt_rozhrani);
    f8fe:	65 e4       	ldi	r22, 0x45	; 69
    f900:	73 e3       	ldi	r23, 0x33	; 51
    f902:	c1 01       	movw	r24, r2
    f904:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4540
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f908:	ee 24       	eor	r14, r14
    f90a:	ea 94       	dec	r14
    f90c:	fe 2c       	mov	r15, r14
    f90e:	00 ee       	ldi	r16, 0xE0	; 224
    f910:	17 e0       	ldi	r17, 0x07	; 7
    f912:	21 e0       	ldi	r18, 0x01	; 1
    f914:	46 e9       	ldi	r20, 0x96	; 150
    f916:	50 e0       	ldi	r21, 0x00	; 0
    f918:	6e e1       	ldi	r22, 0x1E	; 30
    f91a:	70 e0       	ldi	r23, 0x00	; 0
    f91c:	c1 01       	movw	r24, r2
    f91e:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4541
      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
    f922:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <device+0x24>
    f926:	90 91 42 0c 	lds	r25, 0x0C42	; 0x800c42 <device+0x25>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:556
    }
    return rc;
}

PubSubClient& PubSubClient::setServer(uint8_t * ip, uint16_t port) {
    IPAddress addr(ip[0],ip[1],ip[2],ip[3]);
    f92a:	20 91 40 0c 	lds	r18, 0x0C40	; 0x800c40 <device+0x23>
    f92e:	30 91 3f 0c 	lds	r19, 0x0C3F	; 0x800c3f <device+0x22>
    f932:	40 91 3e 0c 	lds	r20, 0x0C3E	; 0x800c3e <device+0x21>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    f936:	50 91 3d 0c 	lds	r21, 0x0C3D	; 0x800c3d <device+0x20>
    f93a:	50 93 21 10 	sts	0x1021, r21	; 0x801021 <mqtt_client+0x211>
    f93e:	40 93 22 10 	sts	0x1022, r20	; 0x801022 <mqtt_client+0x212>
    f942:	30 93 23 10 	sts	0x1023, r19	; 0x801023 <mqtt_client+0x213>
    f946:	20 93 24 10 	sts	0x1024, r18	; 0x801024 <mqtt_client+0x214>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:562
    return setServer(addr,port);
}

PubSubClient& PubSubClient::setServer(IPAddress ip, uint16_t port) {
    this->ip = ip;
    this->port = port;
    f94a:	90 93 28 10 	sts	0x1028, r25	; 0x801028 <mqtt_client+0x218>
    f94e:	80 93 27 10 	sts	0x1027, r24	; 0x801027 <mqtt_client+0x217>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:563
    this->domain = NULL;
    f952:	10 92 26 10 	sts	0x1026, r1	; 0x801026 <mqtt_client+0x216>
    f956:	10 92 25 10 	sts	0x1025, r1	; 0x801025 <mqtt_client+0x215>
setCallback():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:574
    this->port = port;
    return *this;
}

PubSubClient& PubSubClient::setCallback(MQTT_CALLBACK_SIGNATURE) {
    this->callback = callback;
    f95a:	8b ed       	ldi	r24, 0xDB	; 219
    f95c:	9f e5       	ldi	r25, 0x5F	; 95
    f95e:	90 93 1e 10 	sts	0x101E, r25	; 0x80101e <mqtt_client+0x20e>
    f962:	80 93 1d 10 	sts	0x101D, r24	; 0x80101d <mqtt_client+0x20d>
send_mqtt_set_header():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:162

////////////////////////////////////////////////////////////////////////////////////////////////////////
//****************************************************************************************************//
void send_mqtt_set_header(char* header)
{
  header_out = header;
    f966:	86 e3       	ldi	r24, 0x36	; 54
    f968:	93 e3       	ldi	r25, 0x33	; 51
    f96a:	90 93 66 0b 	sts	0x0B66, r25	; 0x800b66 <header_out+0x1>
    f96e:	80 93 65 0b 	sts	0x0B65, r24	; 0x800b65 <header_out>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4544
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
    f972:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    f976:	2b 01       	movw	r4, r22
    f978:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4545
      while ((millis() - milis) < 3000 )
    f97a:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    f97e:	64 19       	sub	r22, r4
    f980:	75 09       	sbc	r23, r5
    f982:	86 09       	sbc	r24, r6
    f984:	97 09       	sbc	r25, r7
    f986:	68 3b       	cpi	r22, 0xB8	; 184
    f988:	7b 40       	sbci	r23, 0x0B	; 11
    f98a:	81 05       	cpc	r24, r1
    f98c:	91 05       	cpc	r25, r1
    f98e:	58 f4       	brcc	.+22     	; 0xf9a6 <setup+0x19a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4547
      {
        mqtt_client.loop();
    f990:	0e 94 61 93 	call	0x126c2	; 0x126c2 <PubSubClient::loop() [clone .constprop.106]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4548
        if (mqtt_reconnect() == 0)
    f994:	0e 94 b1 6e 	call	0xdd62	; 0xdd62 <mqtt_reconnect()>
    f998:	90 91 cb 0a 	lds	r25, 0x0ACB	; 0x800acb <selftest_data>
    f99c:	81 11       	cpse	r24, r1
    f99e:	a7 cd       	rjmp	.-1202   	; 0xf4ee <setup+0x14ec>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3943
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f9a0:	9f 7d       	andi	r25, 0xDF	; 223
    f9a2:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <selftest_data>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3956
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    f9a6:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4557
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }

      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
    f9aa:	85 ff       	sbrs	r24, 5
    f9ac:	a4 cd       	rjmp	.-1208   	; 0xf4f6 <setup+0x14f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4559
      {
        strcpy_P(str1, text_err);
    f9ae:	65 e3       	ldi	r22, 0x35	; 53
    f9b0:	74 e3       	ldi	r23, 0x34	; 52
    f9b2:	8d 2d       	mov	r24, r13
    f9b4:	9b 2d       	mov	r25, r11
    f9b6:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4560
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    f9ba:	ee 24       	eor	r14, r14
    f9bc:	ea 94       	dec	r14
    f9be:	fe 2c       	mov	r15, r14
    f9c0:	00 e0       	ldi	r16, 0x00	; 0
    f9c2:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4565
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f9c4:	21 e0       	ldi	r18, 0x01	; 1
    f9c6:	46 e9       	ldi	r20, 0x96	; 150
    f9c8:	50 e0       	ldi	r21, 0x00	; 0
    f9ca:	f3 cc       	rjmp	.-1562   	; 0xf3b2 <setup+0x13b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4585
      strcpy_P(str1, text_nrf_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace termostatu
    if (init == 13)
    f9cc:	ad e0       	ldi	r26, 0x0D	; 13
    f9ce:	aa 12       	cpse	r10, r26
    f9d0:	0c 94 a9 73 	jmp	0xe752	; 0xe752 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4587
    {
      strcpy_P(str1, text_pid_regulator);
    f9d4:	69 e0       	ldi	r22, 0x09	; 9
    f9d6:	73 e3       	ldi	r23, 0x33	; 51
    f9d8:	8d 2d       	mov	r24, r13
    f9da:	9b 2d       	mov	r25, r11
    f9dc:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4588
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f9e0:	ee 24       	eor	r14, r14
    f9e2:	ea 94       	dec	r14
    f9e4:	fe 2c       	mov	r15, r14
    f9e6:	00 ee       	ldi	r16, 0xE0	; 224
    f9e8:	17 e0       	ldi	r17, 0x07	; 7
    f9ea:	21 e0       	ldi	r18, 0x01	; 1
    f9ec:	44 eb       	ldi	r20, 0xB4	; 180
    f9ee:	50 e0       	ldi	r21, 0x00	; 0
    f9f0:	6e e1       	ldi	r22, 0x1E	; 30
    f9f2:	70 e0       	ldi	r23, 0x00	; 0
    f9f4:	8d 2d       	mov	r24, r13
    f9f6:	9b 2d       	mov	r25, r11
    f9f8:	0e 94 4e 84 	call	0x1089c	; 0x1089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    f9fc:	a3 e8       	ldi	r26, 0x83	; 131
    f9fe:	b8 e0       	ldi	r27, 0x08	; 8
    fa00:	c0 5c       	subi	r28, 0xC0	; 192
    fa02:	de 4f       	sbci	r29, 0xFE	; 254
    fa04:	b9 83       	std	Y+1, r27	; 0x01
    fa06:	a8 83       	st	Y, r26
    fa08:	c0 54       	subi	r28, 0x40	; 64
    fa0a:	d1 40       	sbci	r29, 0x01	; 1
    fa0c:	ef e6       	ldi	r30, 0x6F	; 111
    fa0e:	f8 e0       	ldi	r31, 0x08	; 8
    fa10:	ce 5b       	subi	r28, 0xBE	; 190
    fa12:	de 4f       	sbci	r29, 0xFE	; 254
    fa14:	f9 83       	std	Y+1, r31	; 0x01
    fa16:	e8 83       	st	Y, r30
    fa18:	c2 54       	subi	r28, 0x42	; 66
    fa1a:	d1 40       	sbci	r29, 0x01	; 1
    fa1c:	f7 e9       	ldi	r31, 0x97	; 151
    fa1e:	ef 2e       	mov	r14, r31
    fa20:	f8 e0       	ldi	r31, 0x08	; 8
    fa22:	ff 2e       	mov	r15, r31
    fa24:	91 2c       	mov	r9, r1
    fa26:	81 2c       	mov	r8, r1
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   pOnE = POn == P_ON_E;
    fa28:	cc 24       	eor	r12, r12
    fa2a:	c3 94       	inc	r12
operator new():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    fa2c:	8c e3       	ldi	r24, 0x3C	; 60
    fa2e:	90 e0       	ldi	r25, 0x00	; 0
    fa30:	0e 94 8a ae 	call	0x15d14	; 0x15d14 <malloc>
    fa34:	8c 01       	movw	r16, r24
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    fa36:	c0 5c       	subi	r28, 0xC0	; 192
    fa38:	de 4f       	sbci	r29, 0xFE	; 254
    fa3a:	e8 81       	ld	r30, Y
    fa3c:	f9 81       	ldd	r31, Y+1	; 0x01
    fa3e:	c0 54       	subi	r28, 0x40	; 64
    fa40:	d1 40       	sbci	r29, 0x01	; 1
    fa42:	dc 01       	movw	r26, r24
    fa44:	5f 96       	adiw	r26, 0x1f	; 31
    fa46:	fc 93       	st	X, r31
    fa48:	ee 93       	st	-X, r30
    fa4a:	5e 97       	sbiw	r26, 0x1e	; 30
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
    fa4c:	ce 5b       	subi	r28, 0xBE	; 190
    fa4e:	de 4f       	sbci	r29, 0xFE	; 254
    fa50:	28 81       	ld	r18, Y
    fa52:	39 81       	ldd	r19, Y+1	; 0x01
    fa54:	c2 54       	subi	r28, 0x42	; 66
    fa56:	d1 40       	sbci	r29, 0x01	; 1
    fa58:	5d 96       	adiw	r26, 0x1d	; 29
    fa5a:	3c 93       	st	X, r19
    fa5c:	2e 93       	st	-X, r18
    fa5e:	5c 97       	sbiw	r26, 0x1c	; 28
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
    fa60:	91 96       	adiw	r26, 0x21	; 33
    fa62:	fc 92       	st	X, r15
    fa64:	ee 92       	st	-X, r14
    fa66:	90 97       	sbiw	r26, 0x20	; 32
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
    fa68:	da 96       	adiw	r26, 0x3a	; 58
    fa6a:	1c 92       	st	X, r1
    fa6c:	da 97       	sbiw	r26, 0x3a	; 58
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    fa6e:	d2 96       	adiw	r26, 0x32	; 50
    fa70:	1d 92       	st	X+, r1
    fa72:	1d 92       	st	X+, r1
    fa74:	1d 92       	st	X+, r1
    fa76:	1c 92       	st	X, r1
    fa78:	d5 97       	sbiw	r26, 0x35	; 53
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
    fa7a:	80 e0       	ldi	r24, 0x00	; 0
    fa7c:	90 e0       	ldi	r25, 0x00	; 0
    fa7e:	af e7       	ldi	r26, 0x7F	; 127
    fa80:	b3 e4       	ldi	r27, 0x43	; 67
    fa82:	f8 01       	movw	r30, r16
    fa84:	86 ab       	std	Z+54, r24	; 0x36
    fa86:	97 ab       	std	Z+55, r25	; 0x37
    fa88:	a0 af       	std	Z+56, r26	; 0x38
    fa8a:	b1 af       	std	Z+57, r27	; 0x39
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    fa8c:	84 e6       	ldi	r24, 0x64	; 100
    fa8e:	90 e0       	ldi	r25, 0x00	; 0
    fa90:	a0 e0       	ldi	r26, 0x00	; 0
    fa92:	b0 e0       	ldi	r27, 0x00	; 0
    fa94:	86 a7       	std	Z+46, r24	; 0x2e
    fa96:	97 a7       	std	Z+47, r25	; 0x2f
    fa98:	a0 ab       	std	Z+48, r26	; 0x30
    fa9a:	b1 ab       	std	Z+49, r27	; 0x31
SetControllerDirection():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   {
	    kp = (0 - kp);
      ki = (0 - ki);
      kd = (0 - kd);
   }
   controllerDirection = Direction;
    fa9c:	11 8e       	std	Z+25, r1	; 0x19
    fa9e:	10 8e       	std	Z+24, r1	; 0x18
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
    faa0:	21 e0       	ldi	r18, 0x01	; 1
    faa2:	30 e0       	ldi	r19, 0x00	; 0
    faa4:	33 8f       	std	Z+27, r19	; 0x1b
    faa6:	22 8f       	std	Z+26, r18	; 0x1a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
    faa8:	c3 ae       	std	Z+59, r12	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    faaa:	80 e0       	ldi	r24, 0x00	; 0
    faac:	90 e0       	ldi	r25, 0x00	; 0
    faae:	a0 e0       	ldi	r26, 0x00	; 0
    fab0:	b0 e4       	ldi	r27, 0x40	; 64
    fab2:	80 83       	st	Z, r24
    fab4:	91 83       	std	Z+1, r25	; 0x01
    fab6:	a2 83       	std	Z+2, r26	; 0x02
    fab8:	b3 83       	std	Z+3, r27	; 0x03
    faba:	80 e0       	ldi	r24, 0x00	; 0
    fabc:	90 e0       	ldi	r25, 0x00	; 0
    fabe:	a0 ea       	ldi	r26, 0xA0	; 160
    fac0:	b0 e4       	ldi	r27, 0x40	; 64
    fac2:	84 83       	std	Z+4, r24	; 0x04
    fac4:	95 83       	std	Z+5, r25	; 0x05
    fac6:	a6 83       	std	Z+6, r26	; 0x06
    fac8:	b7 83       	std	Z+7, r27	; 0x07
    faca:	80 e0       	ldi	r24, 0x00	; 0
    facc:	90 e0       	ldi	r25, 0x00	; 0
    face:	a0 e8       	ldi	r26, 0x80	; 128
    fad0:	bf e3       	ldi	r27, 0x3F	; 63
    fad2:	80 87       	std	Z+8, r24	; 0x08
    fad4:	91 87       	std	Z+9, r25	; 0x09
    fad6:	a2 87       	std	Z+10, r26	; 0x0a
    fad8:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112

   double SampleTimeInSec = ((double)SampleTime)/1000;
   kp = Kp;
    fada:	80 e0       	ldi	r24, 0x00	; 0
    fadc:	90 e0       	ldi	r25, 0x00	; 0
    fade:	a0 e0       	ldi	r26, 0x00	; 0
    fae0:	b0 e4       	ldi	r27, 0x40	; 64
    fae2:	84 87       	std	Z+12, r24	; 0x0c
    fae4:	95 87       	std	Z+13, r25	; 0x0d
    fae6:	a6 87       	std	Z+14, r26	; 0x0e
    fae8:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    faea:	80 e0       	ldi	r24, 0x00	; 0
    faec:	90 e0       	ldi	r25, 0x00	; 0
    faee:	a0 e0       	ldi	r26, 0x00	; 0
    faf0:	bf e3       	ldi	r27, 0x3F	; 63
    faf2:	80 8b       	std	Z+16, r24	; 0x10
    faf4:	91 8b       	std	Z+17, r25	; 0x11
    faf6:	a2 8b       	std	Z+18, r26	; 0x12
    faf8:	b3 8b       	std	Z+19, r27	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    fafa:	80 e0       	ldi	r24, 0x00	; 0
    fafc:	90 e0       	ldi	r25, 0x00	; 0
    fafe:	a0 e2       	ldi	r26, 0x20	; 32
    fb00:	b1 e4       	ldi	r27, 0x41	; 65
    fb02:	84 8b       	std	Z+20, r24	; 0x14
    fb04:	95 8b       	std	Z+21, r25	; 0x15
    fb06:	a6 8b       	std	Z+22, r26	; 0x16
    fb08:	b7 8b       	std	Z+23, r27	; 0x17
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd, POn);

    lastTime = (millis() / 1000) - SampleTime;
    fb0a:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
    fb0e:	28 ee       	ldi	r18, 0xE8	; 232
    fb10:	33 e0       	ldi	r19, 0x03	; 3
    fb12:	40 e0       	ldi	r20, 0x00	; 0
    fb14:	50 e0       	ldi	r21, 0x00	; 0
    fb16:	0e 94 2d b4 	call	0x1685a	; 0x1685a <__udivmodsi4>
    fb1a:	f8 01       	movw	r30, r16
    fb1c:	86 a5       	ldd	r24, Z+46	; 0x2e
    fb1e:	97 a5       	ldd	r25, Z+47	; 0x2f
    fb20:	a0 a9       	ldd	r26, Z+48	; 0x30
    fb22:	b1 a9       	ldd	r27, Z+49	; 0x31
    fb24:	28 1b       	sub	r18, r24
    fb26:	39 0b       	sbc	r19, r25
    fb28:	4a 0b       	sbc	r20, r26
    fb2a:	5b 0b       	sbc	r21, r27
    fb2c:	d8 01       	movw	r26, r16
    fb2e:	22 a3       	std	Z+34, r18	; 0x22
    fb30:	33 a3       	std	Z+35, r19	; 0x23
    fb32:	44 a3       	std	Z+36, r20	; 0x24
    fb34:	55 a3       	std	Z+37, r21	; 0x25
thermostat_init_pid():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:42

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
  {
    array_pids[p] = new PID(&PID_Input[p], &PID_Output[p], &PID_Setpoint[p], 2, 5, 1, DIRECT);
    fb36:	e0 91 1b 0c 	lds	r30, 0x0C1B	; 0x800c1b <array_pids>
    fb3a:	f0 91 1c 0c 	lds	r31, 0x0C1C	; 0x800c1c <array_pids+0x1>
    fb3e:	e8 0d       	add	r30, r8
    fb40:	f9 1d       	adc	r31, r9
    fb42:	11 83       	std	Z+1, r17	; 0x01
    fb44:	00 83       	st	Z, r16
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    fb46:	da 96       	adiw	r26, 0x3a	; 58
    fb48:	8c 91       	ld	r24, X
    fb4a:	da 97       	sbiw	r26, 0x3a	; 58
    fb4c:	81 11       	cpse	r24, r1
    fb4e:	1a cd       	rjmp	.-1484   	; 0xf584 <setup+0x1582>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   outputSum = *myOutput;
    fb50:	5e 96       	adiw	r26, 0x1e	; 30
    fb52:	ed 91       	ld	r30, X+
    fb54:	fc 91       	ld	r31, X
    fb56:	40 80       	ld	r4, Z
    fb58:	51 80       	ldd	r5, Z+1	; 0x01
    fb5a:	62 80       	ldd	r6, Z+2	; 0x02
    fb5c:	73 80       	ldd	r7, Z+3	; 0x03
    fb5e:	f8 01       	movw	r30, r16
    fb60:	46 a2       	std	Z+38, r4	; 0x26
    fb62:	57 a2       	std	Z+39, r5	; 0x27
    fb64:	60 a6       	std	Z+40, r6	; 0x28
    fb66:	71 a6       	std	Z+41, r7	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
    fb68:	04 8c       	ldd	r0, Z+28	; 0x1c
    fb6a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    fb6c:	e0 2d       	mov	r30, r0
    fb6e:	80 81       	ld	r24, Z
    fb70:	91 81       	ldd	r25, Z+1	; 0x01
    fb72:	a2 81       	ldd	r26, Z+2	; 0x02
    fb74:	b3 81       	ldd	r27, Z+3	; 0x03
    fb76:	f8 01       	movw	r30, r16
    fb78:	82 a7       	std	Z+42, r24	; 0x2a
    fb7a:	93 a7       	std	Z+43, r25	; 0x2b
    fb7c:	a4 a7       	std	Z+44, r26	; 0x2c
    fb7e:	b5 a7       	std	Z+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
    fb80:	86 a9       	ldd	r24, Z+54	; 0x36
    fb82:	97 a9       	ldd	r25, Z+55	; 0x37
    fb84:	a0 ad       	ldd	r26, Z+56	; 0x38
    fb86:	b1 ad       	ldd	r27, Z+57	; 0x39
    fb88:	c8 5c       	subi	r28, 0xC8	; 200
    fb8a:	de 4f       	sbci	r29, 0xFE	; 254
    fb8c:	88 83       	st	Y, r24
    fb8e:	99 83       	std	Y+1, r25	; 0x01
    fb90:	aa 83       	std	Y+2, r26	; 0x02
    fb92:	bb 83       	std	Y+3, r27	; 0x03
    fb94:	c8 53       	subi	r28, 0x38	; 56
    fb96:	d1 40       	sbci	r29, 0x01	; 1
    fb98:	9c 01       	movw	r18, r24
    fb9a:	ad 01       	movw	r20, r26
    fb9c:	c3 01       	movw	r24, r6
    fb9e:	b2 01       	movw	r22, r4
    fba0:	0e 94 9d b5 	call	0x16b3a	; 0x16b3a <__gesf2>
    fba4:	18 16       	cp	r1, r24
    fba6:	0c f0       	brlt	.+2      	; 0xfbaa <setup+0x1ba8>
    fba8:	d6 cc       	rjmp	.-1620   	; 0xf556 <setup+0x1554>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
   else if(outputSum < outMin) outputSum = outMin;
    fbaa:	c8 5c       	subi	r28, 0xC8	; 200
    fbac:	de 4f       	sbci	r29, 0xFE	; 254
    fbae:	88 81       	ld	r24, Y
    fbb0:	99 81       	ldd	r25, Y+1	; 0x01
    fbb2:	aa 81       	ldd	r26, Y+2	; 0x02
    fbb4:	bb 81       	ldd	r27, Y+3	; 0x03
    fbb6:	c8 53       	subi	r28, 0x38	; 56
    fbb8:	d1 40       	sbci	r29, 0x01	; 1
    fbba:	f8 01       	movw	r30, r16
    fbbc:	86 a3       	std	Z+38, r24	; 0x26
    fbbe:	97 a3       	std	Z+39, r25	; 0x27
    fbc0:	a0 a7       	std	Z+40, r26	; 0x28
    fbc2:	b1 a7       	std	Z+41, r27	; 0x29
    fbc4:	df cc       	rjmp	.-1602   	; 0xf584 <setup+0x1582>

0000fbc6 <display_menu_rtds_update_name(unsigned char, unsigned char)>:
_Z29display_menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2402
  display_element_set_string(name, 8, args2);
  dialog_save_variable_function = &menu_tds_save_name;
}
/// funkce pro nastaveni nazvu rtds
void display_menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
    fbc6:	1f 93       	push	r17
    fbc8:	cf 93       	push	r28
    fbca:	df 93       	push	r29
    fbcc:	cd b7       	in	r28, 0x3d	; 61
    fbce:	de b7       	in	r29, 0x3e	; 62
    fbd0:	63 97       	sbiw	r28, 0x13	; 19
    fbd2:	0f b6       	in	r0, 0x3f	; 63
    fbd4:	f8 94       	cli
    fbd6:	de bf       	out	0x3e, r29	; 62
    fbd8:	0f be       	out	0x3f, r0	; 63
    fbda:	cd bf       	out	0x3d, r28	; 61
    fbdc:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2405
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
    fbde:	ae 01       	movw	r20, r28
    fbe0:	4f 5f       	subi	r20, 0xFF	; 255
    fbe2:	5f 4f       	sbci	r21, 0xFF	; 255
    fbe4:	be 01       	movw	r22, r28
    fbe6:	6d 5e       	subi	r22, 0xED	; 237
    fbe8:	7f 4f       	sbci	r23, 0xFF	; 255
    fbea:	81 2f       	mov	r24, r17
    fbec:	0e 94 5b 5b 	call	0xb6b6	; 0xb6b6 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2406
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    fbf0:	60 e0       	ldi	r22, 0x00	; 0
    fbf2:	87 e6       	ldi	r24, 0x67	; 103
    fbf4:	0e 94 cc 31 	call	0x6398	; 0x6398 <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
  menu_dialog_set_variable_update_now = update_now;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    fbf8:	be 01       	movw	r22, r28
    fbfa:	6f 5f       	subi	r22, 0xFF	; 255
    fbfc:	7f 4f       	sbci	r23, 0xFF	; 255
    fbfe:	8d ed       	ldi	r24, 0xDD	; 221
    fc00:	98 e0       	ldi	r25, 0x08	; 8
    fc02:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2317
  dialog_set_string_max_length = max_length;
    fc06:	82 e1       	ldi	r24, 0x12	; 18
    fc08:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
  dialog_set_string_args = idx;
    fc0c:	10 93 ed 08 	sts	0x08ED, r17	; 0x8008ed <dialog_set_string_args>
_Z29display_menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2408
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
  display_element_set_string(name, RTDS_DEVICE_STRING_LEN, args2);
  dialog_save_variable_function = &menu_rtds_update_name;
    fc10:	8d e3       	ldi	r24, 0x3D	; 61
    fc12:	9f e5       	ldi	r25, 0x5F	; 95
    fc14:	90 93 dc 08 	sts	0x08DC, r25	; 0x8008dc <dialog_save_variable_function+0x1>
    fc18:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2409
}
    fc1c:	63 96       	adiw	r28, 0x13	; 19
    fc1e:	0f b6       	in	r0, 0x3f	; 63
    fc20:	f8 94       	cli
    fc22:	de bf       	out	0x3e, r29	; 62
    fc24:	0f be       	out	0x3f, r0	; 63
    fc26:	cd bf       	out	0x3d, r28	; 61
    fc28:	df 91       	pop	r29
    fc2a:	cf 91       	pop	r28
    fc2c:	1f 91       	pop	r17
    fc2e:	08 95       	ret

0000fc30 <twi_readFrom.part.0.constprop.169>:
twi_readFrom.part.0.constprop.169():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    fc30:	90 91 2d 11 	lds	r25, 0x112D	; 0x80112d <twi_state>
    fc34:	91 11       	cpse	r25, r1
    fc36:	fc cf       	rjmp	.-8      	; 0xfc30 <twi_readFrom.part.0.constprop.169>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
    fc38:	91 e0       	ldi	r25, 0x01	; 1
    fc3a:	90 93 2d 11 	sts	0x112D, r25	; 0x80112d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:161
  twi_sendStop = sendStop;
    fc3e:	90 93 2c 11 	sts	0x112C, r25	; 0x80112c <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:163
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    fc42:	2f ef       	ldi	r18, 0xFF	; 255
    fc44:	20 93 2b 11 	sts	0x112B, r18	; 0x80112b <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    fc48:	10 92 2a 11 	sts	0x112A, r1	; 0x80112a <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    fc4c:	26 0f       	add	r18, r22
    fc4e:	20 93 29 11 	sts	0x1129, r18	; 0x801129 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:175
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    fc52:	90 93 28 11 	sts	0x1128, r25	; 0x801128 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:176
  twi_slarw |= address << 1;
    fc56:	90 91 28 11 	lds	r25, 0x1128	; 0x801128 <twi_slarw>
    fc5a:	88 0f       	add	r24, r24
    fc5c:	89 2b       	or	r24, r25
    fc5e:	80 93 28 11 	sts	0x1128, r24	; 0x801128 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:178

  if (true == twi_inRepStart) {
    fc62:	80 91 27 11 	lds	r24, 0x1127	; 0x801127 <twi_inRepStart>
    fc66:	81 30       	cpi	r24, 0x01	; 1
    fc68:	f9 f4       	brne	.+62     	; 0xfca8 <twi_readFrom.part.0.constprop.169+0x78>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    fc6a:	10 92 27 11 	sts	0x1127, r1	; 0x801127 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:187
    do {
      TWDR = twi_slarw;
    fc6e:	80 91 28 11 	lds	r24, 0x1128	; 0x801128 <twi_slarw>
    fc72:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:188
    } while(TWCR & _BV(TWWC));
    fc76:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    fc7a:	83 fd       	sbrc	r24, 3
    fc7c:	f8 cf       	rjmp	.-16     	; 0xfc6e <twi_readFrom.part.0.constprop.169+0x3e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    fc7e:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    fc80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    fc84:	80 91 2d 11 	lds	r24, 0x112D	; 0x80112d <twi_state>
    fc88:	81 30       	cpi	r24, 0x01	; 1
    fc8a:	e1 f3       	breq	.-8      	; 0xfc84 <twi_readFrom.part.0.constprop.169+0x54>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    fc8c:	80 91 2a 11 	lds	r24, 0x112A	; 0x80112a <twi_masterBufferIndex>
    fc90:	86 17       	cp	r24, r22
    fc92:	10 f4       	brcc	.+4      	; 0xfc98 <twi_readFrom.part.0.constprop.169+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:201
    length = twi_masterBufferIndex;
    fc94:	60 91 2a 11 	lds	r22, 0x112A	; 0x80112a <twi_masterBufferIndex>
    fc98:	a7 e0       	ldi	r26, 0x07	; 7
    fc9a:	b1 e1       	ldi	r27, 0x11	; 17
    fc9c:	e7 ee       	ldi	r30, 0xE7	; 231
    fc9e:	f0 e1       	ldi	r31, 0x10	; 16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    fca0:	80 e0       	ldi	r24, 0x00	; 0
    fca2:	86 13       	cpse	r24, r22
    fca4:	03 c0       	rjmp	.+6      	; 0xfcac <twi_readFrom.part.0.constprop.169+0x7c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    fca6:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    fca8:	85 ee       	ldi	r24, 0xE5	; 229
    fcaa:	ea cf       	rjmp	.-44     	; 0xfc80 <twi_readFrom.part.0.constprop.169+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    fcac:	9d 91       	ld	r25, X+
    fcae:	91 93       	st	Z+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    fcb0:	8f 5f       	subi	r24, 0xFF	; 255
    fcb2:	f7 cf       	rjmp	.-18     	; 0xfca2 <twi_readFrom.part.0.constprop.169+0x72>

0000fcb4 <TwoWire::read()>:
_ZN7TwoWire4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    fcb4:	90 91 e2 10 	lds	r25, 0x10E2	; 0x8010e2 <TwoWire::rxBufferIndex>
    fcb8:	80 91 e1 10 	lds	r24, 0x10E1	; 0x8010e1 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    fcbc:	2f ef       	ldi	r18, 0xFF	; 255
    fcbe:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    fcc0:	98 17       	cp	r25, r24
    fcc2:	48 f4       	brcc	.+18     	; 0xfcd6 <TwoWire::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    fcc4:	e9 2f       	mov	r30, r25
    fcc6:	f0 e0       	ldi	r31, 0x00	; 0
    fcc8:	e9 51       	subi	r30, 0x19	; 25
    fcca:	ff 4e       	sbci	r31, 0xEF	; 239
    fccc:	20 81       	ld	r18, Z
    fcce:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    fcd0:	9f 5f       	subi	r25, 0xFF	; 255
    fcd2:	90 93 e2 10 	sts	0x10E2, r25	; 0x8010e2 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    fcd6:	c9 01       	movw	r24, r18
    fcd8:	08 95       	ret

0000fcda <TwoWire::read() [clone .constprop.130]>:
_ZN7TwoWire4readEv.constprop.130():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    fcda:	90 91 e2 10 	lds	r25, 0x10E2	; 0x8010e2 <TwoWire::rxBufferIndex>
    fcde:	80 91 e1 10 	lds	r24, 0x10E1	; 0x8010e1 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    fce2:	2f ef       	ldi	r18, 0xFF	; 255
    fce4:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    fce6:	98 17       	cp	r25, r24
    fce8:	48 f4       	brcc	.+18     	; 0xfcfc <TwoWire::read() [clone .constprop.130]+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    fcea:	e9 2f       	mov	r30, r25
    fcec:	f0 e0       	ldi	r31, 0x00	; 0
    fcee:	e9 51       	subi	r30, 0x19	; 25
    fcf0:	ff 4e       	sbci	r31, 0xEF	; 239
    fcf2:	20 81       	ld	r18, Z
    fcf4:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    fcf6:	9f 5f       	subi	r25, 0xFF	; 255
    fcf8:	90 93 e2 10 	sts	0x10E2, r25	; 0x8010e2 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    fcfc:	c9 01       	movw	r24, r18
    fcfe:	08 95       	ret

0000fd00 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    fd00:	80 91 e1 10 	lds	r24, 0x10E1	; 0x8010e1 <TwoWire::rxBufferLength>
    fd04:	90 91 e2 10 	lds	r25, 0x10E2	; 0x8010e2 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:239
}
    fd08:	89 1b       	sub	r24, r25
    fd0a:	99 0b       	sbc	r25, r25
    fd0c:	08 95       	ret

0000fd0e <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:314
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    fd0e:	08 95       	ret

0000fd10 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:299
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    fd10:	08 95       	ret

0000fd12 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    fd12:	fc 01       	movw	r30, r24
    fd14:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    fd16:	44 8d       	ldd	r20, Z+28	; 0x1c
    fd18:	25 2f       	mov	r18, r21
    fd1a:	30 e0       	ldi	r19, 0x00	; 0
    fd1c:	84 2f       	mov	r24, r20
    fd1e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    fd20:	82 1b       	sub	r24, r18
    fd22:	93 0b       	sbc	r25, r19
    fd24:	54 17       	cp	r21, r20
    fd26:	10 f0       	brcs	.+4      	; 0xfd2c <HardwareSerial::availableForWrite()+0x1a>
    fd28:	cf 96       	adiw	r24, 0x3f	; 63
    fd2a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    fd2c:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
    fd2e:	08 95       	ret

0000fd30 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
    fd30:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    fd32:	91 8d       	ldd	r25, Z+25	; 0x19
    fd34:	82 8d       	ldd	r24, Z+26	; 0x1a
    fd36:	98 17       	cp	r25, r24
    fd38:	61 f0       	breq	.+24     	; 0xfd52 <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    fd3a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    fd3c:	ae 0f       	add	r26, r30
    fd3e:	bf 2f       	mov	r27, r31
    fd40:	b1 1d       	adc	r27, r1
    fd42:	5d 96       	adiw	r26, 0x1d	; 29
    fd44:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    fd46:	92 8d       	ldd	r25, Z+26	; 0x1a
    fd48:	9f 5f       	subi	r25, 0xFF	; 255
    fd4a:	9f 73       	andi	r25, 0x3F	; 63
    fd4c:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    fd4e:	90 e0       	ldi	r25, 0x00	; 0
    fd50:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    fd52:	8f ef       	ldi	r24, 0xFF	; 255
    fd54:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    fd56:	08 95       	ret

0000fd58 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
    fd58:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    fd5a:	91 8d       	ldd	r25, Z+25	; 0x19
    fd5c:	82 8d       	ldd	r24, Z+26	; 0x1a
    fd5e:	98 17       	cp	r25, r24
    fd60:	31 f0       	breq	.+12     	; 0xfd6e <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    fd62:	82 8d       	ldd	r24, Z+26	; 0x1a
    fd64:	e8 0f       	add	r30, r24
    fd66:	f1 1d       	adc	r31, r1
    fd68:	85 8d       	ldd	r24, Z+29	; 0x1d
    fd6a:	90 e0       	ldi	r25, 0x00	; 0
    fd6c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    fd6e:	8f ef       	ldi	r24, 0xFF	; 255
    fd70:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    fd72:	08 95       	ret

0000fd74 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    fd74:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    fd76:	91 8d       	ldd	r25, Z+25	; 0x19
    fd78:	22 8d       	ldd	r18, Z+26	; 0x1a
    fd7a:	89 2f       	mov	r24, r25
    fd7c:	90 e0       	ldi	r25, 0x00	; 0
    fd7e:	80 5c       	subi	r24, 0xC0	; 192
    fd80:	9f 4f       	sbci	r25, 0xFF	; 255
    fd82:	82 1b       	sub	r24, r18
    fd84:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
    fd86:	8f 73       	andi	r24, 0x3F	; 63
    fd88:	99 27       	eor	r25, r25
    fd8a:	08 95       	ret

0000fd8c <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:82
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    fd8c:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    fd8e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    fd90:	a8 0f       	add	r26, r24
    fd92:	b9 2f       	mov	r27, r25
    fd94:	b1 1d       	adc	r27, r1
    fd96:	a3 5a       	subi	r26, 0xA3	; 163
    fd98:	bf 4f       	sbci	r27, 0xFF	; 255
    fd9a:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    fd9c:	84 8d       	ldd	r24, Z+28	; 0x1c
    fd9e:	90 e0       	ldi	r25, 0x00	; 0
    fda0:	01 96       	adiw	r24, 0x01	; 1
    fda2:	8f 73       	andi	r24, 0x3F	; 63
    fda4:	99 27       	eor	r25, r25
    fda6:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    fda8:	a6 89       	ldd	r26, Z+22	; 0x16
    fdaa:	b7 89       	ldd	r27, Z+23	; 0x17
    fdac:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    fdae:	a0 89       	ldd	r26, Z+16	; 0x10
    fdb0:	b1 89       	ldd	r27, Z+17	; 0x11
    fdb2:	8c 91       	ld	r24, X
    fdb4:	80 64       	ori	r24, 0x40	; 64
    fdb6:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    fdb8:	93 8d       	ldd	r25, Z+27	; 0x1b
    fdba:	84 8d       	ldd	r24, Z+28	; 0x1c
    fdbc:	98 13       	cpse	r25, r24
    fdbe:	06 c0       	rjmp	.+12     	; 0xfdcc <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    fdc0:	02 88       	ldd	r0, Z+18	; 0x12
    fdc2:	f3 89       	ldd	r31, Z+19	; 0x13
    fdc4:	e0 2d       	mov	r30, r0
    fdc6:	80 81       	ld	r24, Z
    fdc8:	8f 7d       	andi	r24, 0xDF	; 223
    fdca:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    fdcc:	08 95       	ret

0000fdce <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    fdce:	ef 92       	push	r14
    fdd0:	ff 92       	push	r15
    fdd2:	0f 93       	push	r16
    fdd4:	1f 93       	push	r17
    fdd6:	cf 93       	push	r28
    fdd8:	df 93       	push	r29
    fdda:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    fddc:	81 e0       	ldi	r24, 0x01	; 1
    fdde:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    fde0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    fde2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    fde4:	98 13       	cpse	r25, r24
    fde6:	16 c0       	rjmp	.+44     	; 0xfe14 <__DATA_REGION_LENGTH__+0x14>
    fde8:	e8 89       	ldd	r30, Y+16	; 0x10
    fdea:	f9 89       	ldd	r31, Y+17	; 0x11
    fdec:	80 81       	ld	r24, Z
    fdee:	85 ff       	sbrs	r24, 5
    fdf0:	11 c0       	rjmp	.+34     	; 0xfe14 <__DATA_REGION_LENGTH__+0x14>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    fdf2:	ee 89       	ldd	r30, Y+22	; 0x16
    fdf4:	ff 89       	ldd	r31, Y+23	; 0x17
    fdf6:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    fdf8:	e8 89       	ldd	r30, Y+16	; 0x10
    fdfa:	f9 89       	ldd	r31, Y+17	; 0x11
    fdfc:	80 81       	ld	r24, Z
    fdfe:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    fe00:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    fe02:	81 e0       	ldi	r24, 0x01	; 1
    fe04:	90 e0       	ldi	r25, 0x00	; 0
    fe06:	df 91       	pop	r29
    fe08:	cf 91       	pop	r28
    fe0a:	1f 91       	pop	r17
    fe0c:	0f 91       	pop	r16
    fe0e:	ff 90       	pop	r15
    fe10:	ef 90       	pop	r14
    fe12:	08 95       	ret
    fe14:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    fe16:	0b 8d       	ldd	r16, Y+27	; 0x1b
    fe18:	10 e0       	ldi	r17, 0x00	; 0
    fe1a:	0f 5f       	subi	r16, 0xFF	; 255
    fe1c:	1f 4f       	sbci	r17, 0xFF	; 255
    fe1e:	0f 73       	andi	r16, 0x3F	; 63
    fe20:	11 27       	eor	r17, r17
    fe22:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    fe24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    fe26:	8e 11       	cpse	r24, r14
    fe28:	0c c0       	rjmp	.+24     	; 0xfe42 <__DATA_REGION_LENGTH__+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    fe2a:	0f b6       	in	r0, 0x3f	; 63
    fe2c:	07 fc       	sbrc	r0, 7
    fe2e:	fa cf       	rjmp	.-12     	; 0xfe24 <__DATA_REGION_LENGTH__+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    fe30:	e8 89       	ldd	r30, Y+16	; 0x10
    fe32:	f9 89       	ldd	r31, Y+17	; 0x11
    fe34:	80 81       	ld	r24, Z
    fe36:	85 ff       	sbrs	r24, 5
    fe38:	f5 cf       	rjmp	.-22     	; 0xfe24 <__DATA_REGION_LENGTH__+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    fe3a:	ce 01       	movw	r24, r28
    fe3c:	0e 94 c6 7e 	call	0xfd8c	; 0xfd8c <HardwareSerial::_tx_udr_empty_irq()>
    fe40:	f1 cf       	rjmp	.-30     	; 0xfe24 <__DATA_REGION_LENGTH__+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    fe42:	eb 8d       	ldd	r30, Y+27	; 0x1b
    fe44:	ec 0f       	add	r30, r28
    fe46:	fd 2f       	mov	r31, r29
    fe48:	f1 1d       	adc	r31, r1
    fe4a:	e3 5a       	subi	r30, 0xA3	; 163
    fe4c:	ff 4f       	sbci	r31, 0xFF	; 255
    fe4e:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    fe50:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    fe52:	ea 89       	ldd	r30, Y+18	; 0x12
    fe54:	fb 89       	ldd	r31, Y+19	; 0x13
    fe56:	80 81       	ld	r24, Z
    fe58:	80 62       	ori	r24, 0x20	; 32
    fe5a:	d2 cf       	rjmp	.-92     	; 0xfe00 <__DATA_REGION_LENGTH__>

0000fe5c <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    fe5c:	cf 93       	push	r28
    fe5e:	df 93       	push	r29
    fe60:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    fe62:	88 8d       	ldd	r24, Y+24	; 0x18
    fe64:	88 23       	and	r24, r24
    fe66:	b9 f0       	breq	.+46     	; 0xfe96 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    fe68:	aa 89       	ldd	r26, Y+18	; 0x12
    fe6a:	bb 89       	ldd	r27, Y+19	; 0x13
    fe6c:	e8 89       	ldd	r30, Y+16	; 0x10
    fe6e:	f9 89       	ldd	r31, Y+17	; 0x11
    fe70:	8c 91       	ld	r24, X
    fe72:	85 fd       	sbrc	r24, 5
    fe74:	03 c0       	rjmp	.+6      	; 0xfe7c <HardwareSerial::flush()+0x20>
    fe76:	80 81       	ld	r24, Z
    fe78:	86 fd       	sbrc	r24, 6
    fe7a:	0d c0       	rjmp	.+26     	; 0xfe96 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    fe7c:	0f b6       	in	r0, 0x3f	; 63
    fe7e:	07 fc       	sbrc	r0, 7
    fe80:	f7 cf       	rjmp	.-18     	; 0xfe70 <HardwareSerial::flush()+0x14>
    fe82:	8c 91       	ld	r24, X
    fe84:	85 ff       	sbrs	r24, 5
    fe86:	f2 cf       	rjmp	.-28     	; 0xfe6c <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    fe88:	80 81       	ld	r24, Z
    fe8a:	85 ff       	sbrs	r24, 5
    fe8c:	ed cf       	rjmp	.-38     	; 0xfe68 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    fe8e:	ce 01       	movw	r24, r28
    fe90:	0e 94 c6 7e 	call	0xfd8c	; 0xfd8c <HardwareSerial::_tx_udr_empty_irq()>
    fe94:	e9 cf       	rjmp	.-46     	; 0xfe68 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    fe96:	df 91       	pop	r29
    fe98:	cf 91       	pop	r28
    fe9a:	08 95       	ret

0000fe9c <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    fe9c:	8b e6       	ldi	r24, 0x6B	; 107
    fe9e:	9b e0       	ldi	r25, 0x0B	; 11
    fea0:	0e 94 ba 7e 	call	0xfd74	; 0xfd74 <HardwareSerial::available()>
    fea4:	21 e0       	ldi	r18, 0x01	; 1
    fea6:	89 2b       	or	r24, r25
    fea8:	09 f4       	brne	.+2      	; 0xfeac <Serial0_available()+0x10>
    feaa:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    feac:	82 2f       	mov	r24, r18
    feae:	08 95       	ret

0000feb0 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    feb0:	80 e0       	ldi	r24, 0x00	; 0
    feb2:	90 e0       	ldi	r25, 0x00	; 0
    feb4:	89 2b       	or	r24, r25
    feb6:	29 f0       	breq	.+10     	; 0xfec2 <serialEventRun()+0x12>
    feb8:	0e 94 4e 7f 	call	0xfe9c	; 0xfe9c <Serial0_available()>
    febc:	81 11       	cpse	r24, r1
    febe:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    fec2:	80 e0       	ldi	r24, 0x00	; 0
    fec4:	90 e0       	ldi	r25, 0x00	; 0
    fec6:	89 2b       	or	r24, r25
    fec8:	49 f0       	breq	.+18     	; 0xfedc <serialEventRun()+0x2c>
    feca:	80 e0       	ldi	r24, 0x00	; 0
    fecc:	90 e0       	ldi	r25, 0x00	; 0
    fece:	89 2b       	or	r24, r25
    fed0:	29 f0       	breq	.+10     	; 0xfedc <serialEventRun()+0x2c>
    fed2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    fed6:	81 11       	cpse	r24, r1
    fed8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    fedc:	08 95       	ret

0000fede <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:91
  return m;
}

unsigned long micros() {
  unsigned long m;
  uint8_t oldSREG = SREG;
    fede:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:96
  // t will be the number where the timer0 counter stopped
  uint8_t t;

  // Stop all interrupts
  cli();
    fee0:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:97
  m = timer0_overflow_count;
    fee2:	80 91 d6 10 	lds	r24, 0x10D6	; 0x8010d6 <timer0_overflow_count>
    fee6:	90 91 d7 10 	lds	r25, 0x10D7	; 0x8010d7 <timer0_overflow_count+0x1>
    feea:	a0 91 d8 10 	lds	r26, 0x10D8	; 0x8010d8 <timer0_overflow_count+0x2>
    feee:	b0 91 d9 10 	lds	r27, 0x10D9	; 0x8010d9 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:101

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    fef2:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:110
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    fef4:	a8 9b       	sbis	0x15, 0	; 21
    fef6:	05 c0       	rjmp	.+10     	; 0xff02 <micros+0x24>
    fef8:	2f 3f       	cpi	r18, 0xFF	; 255
    fefa:	19 f0       	breq	.+6      	; 0xff02 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:111
    m++;
    fefc:	01 96       	adiw	r24, 0x01	; 1
    fefe:	a1 1d       	adc	r26, r1
    ff00:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:117
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
    m++;
#endif
  // Restore SREG
  SREG = oldSREG;
    ff02:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:169
#else
  // 32 MHz, 24 MHz, 16 MHz, 8 MHz, 4 MHz, 1 MHz
  // Shift by 8 to the left (multiply by 256) so t (which is 1 byte in size) can fit in 
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    ff04:	ba 2f       	mov	r27, r26
    ff06:	a9 2f       	mov	r26, r25
    ff08:	98 2f       	mov	r25, r24
    ff0a:	88 27       	eor	r24, r24
    ff0c:	bc 01       	movw	r22, r24
    ff0e:	cd 01       	movw	r24, r26
    ff10:	62 0f       	add	r22, r18
    ff12:	71 1d       	adc	r23, r1
    ff14:	81 1d       	adc	r24, r1
    ff16:	91 1d       	adc	r25, r1
    ff18:	42 e0       	ldi	r20, 0x02	; 2
    ff1a:	66 0f       	add	r22, r22
    ff1c:	77 1f       	adc	r23, r23
    ff1e:	88 1f       	adc	r24, r24
    ff20:	99 1f       	adc	r25, r25
    ff22:	4a 95       	dec	r20
    ff24:	d1 f7       	brne	.-12     	; 0xff1a <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:171
#endif
}
    ff26:	08 95       	ret

0000ff28 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    ff28:	af 92       	push	r10
    ff2a:	bf 92       	push	r11
    ff2c:	cf 92       	push	r12
    ff2e:	df 92       	push	r13
    ff30:	ef 92       	push	r14
    ff32:	ff 92       	push	r15
    ff34:	0f 93       	push	r16
    ff36:	1f 93       	push	r17
    ff38:	cf 93       	push	r28
    ff3a:	df 93       	push	r29
    ff3c:	6c 01       	movw	r12, r24
    ff3e:	7b 01       	movw	r14, r22
    ff40:	8b 01       	movw	r16, r22
    ff42:	04 0f       	add	r16, r20
    ff44:	15 1f       	adc	r17, r21
    ff46:	eb 01       	movw	r28, r22
    ff48:	5e 01       	movw	r10, r28
    ff4a:	ae 18       	sub	r10, r14
    ff4c:	bf 08       	sbc	r11, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    ff4e:	c0 17       	cp	r28, r16
    ff50:	d1 07       	cpc	r29, r17
    ff52:	59 f0       	breq	.+22     	; 0xff6a <Print::write(unsigned char const*, unsigned int)+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    ff54:	69 91       	ld	r22, Y+
    ff56:	d6 01       	movw	r26, r12
    ff58:	ed 91       	ld	r30, X+
    ff5a:	fc 91       	ld	r31, X
    ff5c:	01 90       	ld	r0, Z+
    ff5e:	f0 81       	ld	r31, Z
    ff60:	e0 2d       	mov	r30, r0
    ff62:	c6 01       	movw	r24, r12
    ff64:	19 95       	eicall
    ff66:	89 2b       	or	r24, r25
    ff68:	79 f7       	brne	.-34     	; 0xff48 <Print::write(unsigned char const*, unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    ff6a:	c5 01       	movw	r24, r10
    ff6c:	df 91       	pop	r29
    ff6e:	cf 91       	pop	r28
    ff70:	1f 91       	pop	r17
    ff72:	0f 91       	pop	r16
    ff74:	ff 90       	pop	r15
    ff76:	ef 90       	pop	r14
    ff78:	df 90       	pop	r13
    ff7a:	cf 90       	pop	r12
    ff7c:	bf 90       	pop	r11
    ff7e:	af 90       	pop	r10
    ff80:	08 95       	ret

0000ff82 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    ff82:	85 ed       	ldi	r24, 0xD5	; 213
    ff84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    ff88:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    ff8c:	84 fd       	sbrc	r24, 4
    ff8e:	fc cf       	rjmp	.-8      	; 0xff88 <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    ff90:	10 92 2d 11 	sts	0x112D, r1	; 0x80112d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:382
}
    ff94:	08 95       	ret

0000ff96 <twi_transmit>:
twi_transmit():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    ff96:	20 91 96 10 	lds	r18, 0x1096	; 0x801096 <twi_txBufferLength>
    ff9a:	26 0f       	add	r18, r22
    ff9c:	33 27       	eor	r19, r19
    ff9e:	33 1f       	adc	r19, r19
    ffa0:	21 32       	cpi	r18, 0x21	; 33
    ffa2:	31 05       	cpc	r19, r1
    ffa4:	ec f4       	brge	.+58     	; 0xffe0 <twi_transmit+0x4a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:312
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    ffa6:	20 91 2d 11 	lds	r18, 0x112D	; 0x80112d <twi_state>
    ffaa:	fc 01       	movw	r30, r24
    ffac:	90 e0       	ldi	r25, 0x00	; 0
    ffae:	80 e0       	ldi	r24, 0x00	; 0
    ffb0:	24 30       	cpi	r18, 0x04	; 4
    ffb2:	69 f0       	breq	.+26     	; 0xffce <twi_transmit+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:313
    return 2;
    ffb4:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    ffb6:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:318
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    ffb8:	a0 91 96 10 	lds	r26, 0x1096	; 0x801096 <twi_txBufferLength>
    ffbc:	21 91       	ld	r18, Z+
    ffbe:	ac 01       	movw	r20, r24
    ffc0:	4a 58       	subi	r20, 0x8A	; 138
    ffc2:	5f 4e       	sbci	r21, 0xEF	; 239
    ffc4:	a4 0f       	add	r26, r20
    ffc6:	b5 2f       	mov	r27, r21
    ffc8:	b1 1d       	adc	r27, r1
    ffca:	2c 93       	st	X, r18
    ffcc:	01 96       	adiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    ffce:	86 17       	cp	r24, r22
    ffd0:	98 f3       	brcs	.-26     	; 0xffb8 <twi_transmit+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    ffd2:	80 91 96 10 	lds	r24, 0x1096	; 0x801096 <twi_txBufferLength>
    ffd6:	68 0f       	add	r22, r24
    ffd8:	60 93 96 10 	sts	0x1096, r22	; 0x801096 <twi_txBufferLength>
    ffdc:	80 e0       	ldi	r24, 0x00	; 0
    ffde:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    ffe0:	81 e0       	ldi	r24, 0x01	; 1
    ffe2:	08 95       	ret

0000ffe4 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:274
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    ffe4:	08 95       	ret

0000ffe6 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:264
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    ffe6:	e0 91 e2 10 	lds	r30, 0x10E2	; 0x8010e2 <TwoWire::rxBufferIndex>
    ffea:	80 91 e1 10 	lds	r24, 0x10E1	; 0x8010e1 <TwoWire::rxBufferLength>
    ffee:	e8 17       	cp	r30, r24
    fff0:	30 f4       	brcc	.+12     	; 0xfffe <TwoWire::peek()+0x18>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:265
    value = rxBuffer[rxBufferIndex];
    fff2:	f0 e0       	ldi	r31, 0x00	; 0
    fff4:	e9 51       	subi	r30, 0x19	; 25
    fff6:	ff 4e       	sbci	r31, 0xEF	; 239
    fff8:	80 81       	ld	r24, Z
    fffa:	90 e0       	ldi	r25, 0x00	; 0
    fffc:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:262
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    fffe:	8f ef       	ldi	r24, 0xFF	; 255
   10000:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:269
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
   10002:	08 95       	ret

00010004 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:219

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   10004:	cf 92       	push	r12
   10006:	df 92       	push	r13
   10008:	ef 92       	push	r14
   1000a:	ff 92       	push	r15
   1000c:	0f 93       	push	r16
   1000e:	1f 93       	push	r17
   10010:	cf 93       	push	r28
   10012:	df 93       	push	r29
   10014:	7c 01       	movw	r14, r24
   10016:	cb 01       	movw	r24, r22
   10018:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:220
  if(transmitting){
   1001a:	20 91 e6 10 	lds	r18, 0x10E6	; 0x8010e6 <TwoWire::transmitting>
   1001e:	22 23       	and	r18, r18
   10020:	89 f0       	breq	.+34     	; 0x10044 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
   10022:	eb 01       	movw	r28, r22
   10024:	6b 01       	movw	r12, r22
   10026:	c4 0e       	add	r12, r20
   10028:	d5 1e       	adc	r13, r21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:222
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
   1002a:	cc 15       	cp	r28, r12
   1002c:	dd 05       	cpc	r29, r13
   1002e:	69 f0       	breq	.+26     	; 0x1004a <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:223
      write(data[i]);
   10030:	69 91       	ld	r22, Y+
   10032:	d7 01       	movw	r26, r14
   10034:	ed 91       	ld	r30, X+
   10036:	fc 91       	ld	r31, X
   10038:	01 90       	ld	r0, Z+
   1003a:	f0 81       	ld	r31, Z
   1003c:	e0 2d       	mov	r30, r0
   1003e:	c7 01       	movw	r24, r14
   10040:	19 95       	eicall
   10042:	f3 cf       	rjmp	.-26     	; 0x1002a <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:228
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
   10044:	64 2f       	mov	r22, r20
   10046:	0e 94 cb 7f 	call	0xff96	; 0xff96 <twi_transmit>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:231
  }
  return quantity;
}
   1004a:	c8 01       	movw	r24, r16
   1004c:	df 91       	pop	r29
   1004e:	cf 91       	pop	r28
   10050:	1f 91       	pop	r17
   10052:	0f 91       	pop	r16
   10054:	ff 90       	pop	r15
   10056:	ef 90       	pop	r14
   10058:	df 90       	pop	r13
   1005a:	cf 90       	pop	r12
   1005c:	08 95       	ret

0001005e <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:194

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
   1005e:	cf 93       	push	r28
   10060:	df 93       	push	r29
   10062:	1f 92       	push	r1
   10064:	cd b7       	in	r28, 0x3d	; 61
   10066:	de b7       	in	r29, 0x3e	; 62
   10068:	69 83       	std	Y+1, r22	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:195
  if(transmitting){
   1006a:	20 91 e6 10 	lds	r18, 0x10E6	; 0x8010e6 <TwoWire::transmitting>
   1006e:	22 23       	and	r18, r18
   10070:	f9 f0       	breq	.+62     	; 0x100b0 <TwoWire::write(unsigned char)+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:198
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
   10072:	20 91 e3 10 	lds	r18, 0x10E3	; 0x8010e3 <TwoWire::txBufferLength>
   10076:	20 32       	cpi	r18, 0x20	; 32
   10078:	58 f0       	brcs	.+22     	; 0x10090 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   1007a:	21 e0       	ldi	r18, 0x01	; 1
   1007c:	30 e0       	ldi	r19, 0x00	; 0
   1007e:	fc 01       	movw	r30, r24
   10080:	33 83       	std	Z+3, r19	; 0x03
   10082:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:200
      setWriteError();
      return 0;
   10084:	90 e0       	ldi	r25, 0x00	; 0
   10086:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:213
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
   10088:	0f 90       	pop	r0
   1008a:	df 91       	pop	r29
   1008c:	cf 91       	pop	r28
   1008e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:203
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
   10090:	80 91 e4 10 	lds	r24, 0x10E4	; 0x8010e4 <TwoWire::txBufferIndex>
   10094:	e8 2f       	mov	r30, r24
   10096:	f0 e0       	ldi	r31, 0x00	; 0
   10098:	ea 5a       	subi	r30, 0xAA	; 170
   1009a:	ff 4e       	sbci	r31, 0xEF	; 239
   1009c:	99 81       	ldd	r25, Y+1	; 0x01
   1009e:	90 83       	st	Z, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:204
    ++txBufferIndex;
   100a0:	8f 5f       	subi	r24, 0xFF	; 255
   100a2:	80 93 e4 10 	sts	0x10E4, r24	; 0x8010e4 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:206
    // update amount in buffer
    txBufferLength = txBufferIndex;
   100a6:	80 93 e3 10 	sts	0x10E3, r24	; 0x8010e3 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:212
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
   100aa:	81 e0       	ldi	r24, 0x01	; 1
   100ac:	90 e0       	ldi	r25, 0x00	; 0
   100ae:	ec cf       	rjmp	.-40     	; 0x10088 <TwoWire::write(unsigned char)+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:210
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
   100b0:	61 e0       	ldi	r22, 0x01	; 1
   100b2:	ce 01       	movw	r24, r28
   100b4:	01 96       	adiw	r24, 0x01	; 1
   100b6:	0e 94 cb 7f 	call	0xff96	; 0xff96 <twi_transmit>
   100ba:	f7 cf       	rjmp	.-18     	; 0x100aa <TwoWire::write(unsigned char)+0x4c>

000100bc <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
   100bc:	08 95       	ret

000100be <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
   100be:	8e bd       	out	0x2e, r24	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
   100c0:	00 00       	nop
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
   100c2:	0d b4       	in	r0, 0x2d	; 45
   100c4:	07 fe       	sbrs	r0, 7
   100c6:	fd cf       	rjmp	.-6      	; 0x100c2 <SPIClass::transfer(unsigned char)+0x4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:221
    return SPDR;
   100c8:	8e b5       	in	r24, 0x2e	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:222
  }
   100ca:	08 95       	ret

000100cc <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
   100cc:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
   100ce:	9d bd       	out	0x2d, r25	; 45
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:208
  }
   100d0:	08 95       	ret

000100d2 <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
   100d2:	cf 93       	push	r28
   100d4:	df 93       	push	r29
   100d6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   100d8:	89 8d       	ldd	r24, Y+25	; 0x19
   100da:	9a 8d       	ldd	r25, Y+26	; 0x1a
   100dc:	89 2b       	or	r24, r25
   100de:	41 f0       	breq	.+16     	; 0x100f0 <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
   100e0:	e8 81       	ld	r30, Y
   100e2:	f9 81       	ldd	r31, Y+1	; 0x01
   100e4:	02 84       	ldd	r0, Z+10	; 0x0a
   100e6:	f3 85       	ldd	r31, Z+11	; 0x0b
   100e8:	e0 2d       	mov	r30, r0
   100ea:	ce 01       	movw	r24, r28
   100ec:	19 95       	eicall
   100ee:	f4 cf       	rjmp	.-24     	; 0x100d8 <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  }
}
   100f0:	df 91       	pop	r29
   100f2:	cf 91       	pop	r28
   100f4:	08 95       	ret

000100f6 <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
   100f6:	cf 93       	push	r28
   100f8:	df 93       	push	r29
   100fa:	1f 92       	push	r1
   100fc:	cd b7       	in	r28, 0x3d	; 61
   100fe:	de b7       	in	r29, 0x3e	; 62
   10100:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
   10102:	dc 01       	movw	r26, r24
   10104:	ed 91       	ld	r30, X+
   10106:	fc 91       	ld	r31, X
   10108:	02 80       	ldd	r0, Z+2	; 0x02
   1010a:	f3 81       	ldd	r31, Z+3	; 0x03
   1010c:	e0 2d       	mov	r30, r0
   1010e:	41 e0       	ldi	r20, 0x01	; 1
   10110:	50 e0       	ldi	r21, 0x00	; 0
   10112:	be 01       	movw	r22, r28
   10114:	6f 5f       	subi	r22, 0xFF	; 255
   10116:	7f 4f       	sbci	r23, 0xFF	; 255
   10118:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
   1011a:	0f 90       	pop	r0
   1011c:	df 91       	pop	r29
   1011e:	cf 91       	pop	r28
   10120:	08 95       	ret

00010122 <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
   10122:	fc 01       	movw	r30, r24
   10124:	81 8d       	ldd	r24, Z+25	; 0x19
   10126:	92 8d       	ldd	r25, Z+26	; 0x1a
   10128:	08 95       	ret

0001012a <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
   1012a:	fc 01       	movw	r30, r24
   1012c:	85 89       	ldd	r24, Z+21	; 0x15
   1012e:	96 89       	ldd	r25, Z+22	; 0x16
   10130:	08 95       	ret

00010132 <EthernetUDP::remoteIP()>:
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   10132:	22 ee       	ldi	r18, 0xE2	; 226
   10134:	32 e0       	ldi	r19, 0x02	; 2
   10136:	fc 01       	movw	r30, r24
   10138:	31 83       	std	Z+1, r19	; 0x01
   1013a:	20 83       	st	Z, r18
   1013c:	fb 01       	movw	r30, r22
   1013e:	41 89       	ldd	r20, Z+17	; 0x11
   10140:	52 89       	ldd	r21, Z+18	; 0x12
   10142:	63 89       	ldd	r22, Z+19	; 0x13
   10144:	74 89       	ldd	r23, Z+20	; 0x14
   10146:	fc 01       	movw	r30, r24
   10148:	42 83       	std	Z+2, r20	; 0x02
   1014a:	53 83       	std	Z+3, r21	; 0x03
   1014c:	64 83       	std	Z+4, r22	; 0x04
   1014e:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
   10150:	08 95       	ret

00010152 <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
   10152:	80 e0       	ldi	r24, 0x00	; 0
   10154:	08 95       	ret

00010156 <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
   10156:	fc 01       	movw	r30, r24
   10158:	94 85       	ldd	r25, Z+12	; 0x0c
   1015a:	fb 01       	movw	r30, r22
   1015c:	84 85       	ldd	r24, Z+12	; 0x0c
   1015e:	98 13       	cpse	r25, r24
   10160:	03 c0       	rjmp	.+6      	; 0x10168 <EthernetClient::operator==(EthernetClient const&)+0x12>
   10162:	81 e0       	ldi	r24, 0x01	; 1
   10164:	98 30       	cpi	r25, 0x08	; 8
   10166:	09 f4       	brne	.+2      	; 0x1016a <EthernetClient::operator==(EthernetClient const&)+0x14>
   10168:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
   1016a:	08 95       	ret

0001016c <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
   1016c:	21 e0       	ldi	r18, 0x01	; 1
   1016e:	fc 01       	movw	r30, r24
   10170:	84 85       	ldd	r24, Z+12	; 0x0c
   10172:	88 30       	cpi	r24, 0x08	; 8
   10174:	09 f4       	brne	.+2      	; 0x10178 <EthernetClient::operator bool()+0xc>
   10176:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
   10178:	82 2f       	mov	r24, r18
   1017a:	08 95       	ret

0001017c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:657
{
	Print(st, x, y);
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
   1017c:	2f 92       	push	r2
   1017e:	3f 92       	push	r3
   10180:	4f 92       	push	r4
   10182:	5f 92       	push	r5
   10184:	6f 92       	push	r6
   10186:	7f 92       	push	r7
   10188:	8f 92       	push	r8
   1018a:	9f 92       	push	r9
   1018c:	af 92       	push	r10
   1018e:	bf 92       	push	r11
   10190:	cf 92       	push	r12
   10192:	df 92       	push	r13
   10194:	ef 92       	push	r14
   10196:	ff 92       	push	r15
   10198:	0f 93       	push	r16
   1019a:	1f 93       	push	r17
   1019c:	cf 93       	push	r28
   1019e:	df 93       	push	r29
   101a0:	cd b7       	in	r28, 0x3d	; 61
   101a2:	de b7       	in	r29, 0x3e	; 62
   101a4:	2d 97       	sbiw	r28, 0x0d	; 13
   101a6:	0f b6       	in	r0, 0x3f	; 63
   101a8:	f8 94       	cli
   101aa:	de bf       	out	0x3e, r29	; 62
   101ac:	0f be       	out	0x3f, r0	; 63
   101ae:	cd bf       	out	0x3d, r28	; 61
   101b0:	fc 01       	movw	r30, r24
   101b2:	a0 81       	ld	r26, Z
   101b4:	b1 81       	ldd	r27, Z+1	; 0x01
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:611
{
	int16_t pos;
	uint16_t len;
	const char * p = (const char *)st;
	size_t n = 0;
	if (x == CENTER || x == RIGHT) 
   101b6:	cb 01       	movw	r24, r22
   101b8:	8e 50       	subi	r24, 0x0E	; 14
   101ba:	97 42       	sbci	r25, 0x27	; 39
   101bc:	02 97       	sbiw	r24, 0x02	; 2
   101be:	20 f5       	brcc	.+72     	; 0x10208 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x8c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:613
	{
		len = strlen((const char *)st) * 6 * text_size;		
   101c0:	fd 01       	movw	r30, r26
   101c2:	01 90       	ld	r0, Z+
   101c4:	00 20       	and	r0, r0
   101c6:	e9 f7       	brne	.-6      	; 0x101c2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x46>
   101c8:	31 97       	sbiw	r30, 0x01	; 1
   101ca:	ea 1b       	sub	r30, r26
   101cc:	fb 0b       	sbc	r31, r27
   101ce:	80 91 c4 0d 	lds	r24, 0x0DC4	; 0x800dc4 <my_lcd+0xc>
   101d2:	26 e0       	ldi	r18, 0x06	; 6
   101d4:	82 9f       	mul	r24, r18
   101d6:	c0 01       	movw	r24, r0
   101d8:	11 24       	eor	r1, r1
   101da:	8e 9f       	mul	r24, r30
   101dc:	90 01       	movw	r18, r0
   101de:	8f 9f       	mul	r24, r31
   101e0:	30 0d       	add	r19, r0
   101e2:	9e 9f       	mul	r25, r30
   101e4:	30 0d       	add	r19, r0
   101e6:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:614
		pos = (Get_Display_Width() - len); 
   101e8:	80 91 ca 0d 	lds	r24, 0x0DCA	; 0x800dca <my_lcd+0x12>
   101ec:	90 91 cb 0d 	lds	r25, 0x0DCB	; 0x800dcb <my_lcd+0x13>
   101f0:	82 1b       	sub	r24, r18
   101f2:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:615
		if (x == CENTER)
   101f4:	6e 30       	cpi	r22, 0x0E	; 14
   101f6:	77 42       	sbci	r23, 0x27	; 39
   101f8:	89 f5       	brne	.+98     	; 0x1025c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xe0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:617
		{
			x = pos/2;
   101fa:	bc 01       	movw	r22, r24
   101fc:	97 ff       	sbrs	r25, 7
   101fe:	02 c0       	rjmp	.+4      	; 0x10204 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x88>
   10200:	6f 5f       	subi	r22, 0xFF	; 255
   10202:	7f 4f       	sbci	r23, 0xFF	; 255
   10204:	75 95       	asr	r23
   10206:	67 95       	ror	r22
Set_Text_Cousur():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:474
}

//set text coordinate
void LCDWIKI_GUI::Set_Text_Cousur(int16_t x, int16_t y)
{
	text_x = x;
   10208:	70 93 bb 0d 	sts	0x0DBB, r23	; 0x800dbb <my_lcd+0x3>
   1020c:	60 93 ba 0d 	sts	0x0DBA, r22	; 0x800dba <my_lcd+0x2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:475
	text_y = y;
   10210:	50 93 bd 0d 	sts	0x0DBD, r21	; 0x800dbd <my_lcd+0x5>
   10214:	40 93 bc 0d 	sts	0x0DBC, r20	; 0x800dbc <my_lcd+0x4>
   10218:	be 83       	std	Y+6, r27	; 0x06
   1021a:	ad 83       	std	Y+5, r26	; 0x05
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:627
		}
	}
    Set_Text_Cousur(x, y);
	while(1)
	{
		unsigned char ch = *(p++);//pgm_read_byte(p++);
   1021c:	ed 81       	ldd	r30, Y+5	; 0x05
   1021e:	fe 81       	ldd	r31, Y+6	; 0x06
   10220:	91 91       	ld	r25, Z+
   10222:	fe 83       	std	Y+6, r31	; 0x06
   10224:	ed 83       	std	Y+5, r30	; 0x05
   10226:	89 2f       	mov	r24, r25
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:628
		if(ch == 0)
   10228:	99 23       	and	r25, r25
   1022a:	09 f4       	brne	.+2      	; 0x1022e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xb2>
   1022c:	dd c0       	rjmp	.+442    	; 0x103e8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x26c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:792
}

//write a char
size_t LCDWIKI_GUI::write(uint8_t c) 
{
	if (c == '\n') 
   1022e:	9a 30       	cpi	r25, 0x0A	; 10
   10230:	c9 f4       	brne	.+50     	; 0x10264 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:794
	{
    	text_y += text_size*8;
   10232:	80 91 c4 0d 	lds	r24, 0x0DC4	; 0x800dc4 <my_lcd+0xc>
   10236:	f8 e0       	ldi	r31, 0x08	; 8
   10238:	8f 9f       	mul	r24, r31
   1023a:	c0 01       	movw	r24, r0
   1023c:	11 24       	eor	r1, r1
   1023e:	20 91 bc 0d 	lds	r18, 0x0DBC	; 0x800dbc <my_lcd+0x4>
   10242:	30 91 bd 0d 	lds	r19, 0x0DBD	; 0x800dbd <my_lcd+0x5>
   10246:	82 0f       	add	r24, r18
   10248:	93 1f       	adc	r25, r19
   1024a:	90 93 bd 0d 	sts	0x0DBD, r25	; 0x800dbd <my_lcd+0x5>
   1024e:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <my_lcd+0x4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:795
    	text_x  = 0;
   10252:	10 92 bb 0d 	sts	0x0DBB, r1	; 0x800dbb <my_lcd+0x3>
   10256:	10 92 ba 0d 	sts	0x0DBA, r1	; 0x800dba <my_lcd+0x2>
   1025a:	e0 cf       	rjmp	.-64     	; 0x1021c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:621
		{
			x = pos/2;
		}
		else
		{
			x = pos - 1;
   1025c:	bc 01       	movw	r22, r24
   1025e:	61 50       	subi	r22, 0x01	; 1
   10260:	71 09       	sbc	r23, r1
   10262:	d2 cf       	rjmp	.-92     	; 0x10208 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x8c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:797
	if (c == '\n') 
	{
    	text_y += text_size*8;
    	text_x  = 0;
 	} 
	else if(c == '\r')
   10264:	9d 30       	cpi	r25, 0x0D	; 13
   10266:	d1 f2       	breq	.-76     	; 0x1021c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   10268:	20 91 ba 0d 	lds	r18, 0x0DBA	; 0x800dba <my_lcd+0x2>
   1026c:	30 91 bb 0d 	lds	r19, 0x0DBB	; 0x800dbb <my_lcd+0x3>
   10270:	39 87       	std	Y+9, r19	; 0x09
   10272:	28 87       	std	Y+8, r18	; 0x08
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   10274:	20 91 ca 0d 	lds	r18, 0x0DCA	; 0x800dca <my_lcd+0x12>
   10278:	30 91 cb 0d 	lds	r19, 0x0DCB	; 0x800dcb <my_lcd+0x13>
   1027c:	48 85       	ldd	r20, Y+8	; 0x08
   1027e:	59 85       	ldd	r21, Y+9	; 0x09
   10280:	42 17       	cp	r20, r18
   10282:	53 07       	cpc	r21, r19
   10284:	0c f0       	brlt	.+2      	; 0x10288 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x10c>
   10286:	88 c0       	rjmp	.+272    	; 0x10398 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   10288:	60 90 bc 0d 	lds	r6, 0x0DBC	; 0x800dbc <my_lcd+0x4>
   1028c:	70 90 bd 0d 	lds	r7, 0x0DBD	; 0x800dbd <my_lcd+0x5>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   10290:	20 91 cc 0d 	lds	r18, 0x0DCC	; 0x800dcc <my_lcd+0x14>
   10294:	30 91 cd 0d 	lds	r19, 0x0DCD	; 0x800dcd <my_lcd+0x15>
   10298:	62 16       	cp	r6, r18
   1029a:	73 06       	cpc	r7, r19
   1029c:	0c f0       	brlt	.+2      	; 0x102a0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x124>
   1029e:	7c c0       	rjmp	.+248    	; 0x10398 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   102a0:	50 91 c4 0d 	lds	r21, 0x0DC4	; 0x800dc4 <my_lcd+0xc>
   102a4:	5a 83       	std	Y+2, r21	; 0x02
   102a6:	c5 2e       	mov	r12, r21
   102a8:	d1 2c       	mov	r13, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   102aa:	28 85       	ldd	r18, Y+8	; 0x08
   102ac:	39 85       	ldd	r19, Y+9	; 0x09
   102ae:	e6 e0       	ldi	r30, 0x06	; 6
   102b0:	5e 9f       	mul	r21, r30
   102b2:	20 0d       	add	r18, r0
   102b4:	31 1d       	adc	r19, r1
   102b6:	11 24       	eor	r1, r1
   102b8:	12 16       	cp	r1, r18
   102ba:	13 06       	cpc	r1, r19
   102bc:	0c f0       	brlt	.+2      	; 0x102c0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x144>
   102be:	6c c0       	rjmp	.+216    	; 0x10398 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
   102c0:	96 01       	movw	r18, r12
   102c2:	93 e0       	ldi	r25, 0x03	; 3
   102c4:	22 0f       	add	r18, r18
   102c6:	33 1f       	adc	r19, r19
   102c8:	9a 95       	dec	r25
   102ca:	e1 f7       	brne	.-8      	; 0x102c4 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x148>
   102cc:	26 0d       	add	r18, r6
   102ce:	37 1d       	adc	r19, r7
   102d0:	12 16       	cp	r1, r18
   102d2:	13 06       	cpc	r1, r19
   102d4:	0c f0       	brlt	.+2      	; 0x102d8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x15c>
   102d6:	60 c0       	rjmp	.+192    	; 0x10398 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:557
	{
    	return;
	}		
  	if(c >= 176)
   102d8:	80 3b       	cpi	r24, 0xB0	; 176
   102da:	08 f0       	brcs	.+2      	; 0x102de <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x162>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:559
  	{
		c++; 
   102dc:	8f 5f       	subi	r24, 0xFF	; 255
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   102de:	f0 91 c5 0d 	lds	r31, 0x0DC5	; 0x800dc5 <my_lcd+0xd>
   102e2:	ff 83       	std	Y+7, r31	; 0x07
   102e4:	20 90 c0 0d 	lds	r2, 0x0DC0	; 0x800dc0 <my_lcd+0x8>
   102e8:	30 90 c1 0d 	lds	r3, 0x0DC1	; 0x800dc1 <my_lcd+0x9>
   102ec:	20 91 be 0d 	lds	r18, 0x0DBE	; 0x800dbe <my_lcd+0x6>
   102f0:	30 91 bf 0d 	lds	r19, 0x0DBF	; 0x800dbf <my_lcd+0x7>
   102f4:	3c 83       	std	Y+4, r19	; 0x04
   102f6:	2b 83       	std	Y+3, r18	; 0x03
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   102f8:	48 85       	ldd	r20, Y+8	; 0x08
   102fa:	59 85       	ldd	r21, Y+9	; 0x09
   102fc:	5d 87       	std	Y+13, r21	; 0x0d
   102fe:	4c 87       	std	Y+12, r20	; 0x0c
   10300:	5a 01       	movw	r10, r20
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   10302:	19 82       	std	Y+1, r1	; 0x01
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   10304:	23 e3       	ldi	r18, 0x33	; 51
   10306:	36 e3       	ldi	r19, 0x36	; 54
   10308:	24 1b       	sub	r18, r20
   1030a:	35 0b       	sbc	r19, r21
   1030c:	f9 01       	movw	r30, r18
   1030e:	45 e0       	ldi	r20, 0x05	; 5
   10310:	84 9f       	mul	r24, r20
   10312:	e0 0d       	add	r30, r0
   10314:	f1 1d       	adc	r31, r1
   10316:	11 24       	eor	r1, r1
   10318:	fb 87       	std	Y+11, r31	; 0x0b
   1031a:	ea 87       	std	Y+10, r30	; 0x0a
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   1031c:	59 81       	ldd	r21, Y+1	; 0x01
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
    	{
      		line = 0x0;
   1031e:	e0 e0       	ldi	r30, 0x00	; 0
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   10320:	55 30       	cpi	r21, 0x05	; 5
   10322:	29 f0       	breq	.+10     	; 0x1032e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1b2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   10324:	ea 85       	ldd	r30, Y+10	; 0x0a
   10326:	fb 85       	ldd	r31, Y+11	; 0x0b
   10328:	ea 0d       	add	r30, r10
   1032a:	fb 1d       	adc	r31, r11
   1032c:	e4 91       	lpm	r30, Z
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    	{
      		line = 0x0;
   1032e:	23 01       	movw	r4, r6
   10330:	91 2c       	mov	r9, r1
   10332:	81 2c       	mov	r8, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:574
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
   10334:	8e 2f       	mov	r24, r30
   10336:	90 e0       	ldi	r25, 0x00	; 0
   10338:	99 87       	std	Y+9, r25	; 0x09
   1033a:	88 87       	std	Y+8, r24	; 0x08
   1033c:	e0 ff       	sbrs	r30, 0
   1033e:	3c c0       	rjmp	.+120    	; 0x103b8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x23c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
			{
        		if (size == 1)
   10340:	9a 81       	ldd	r25, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:578
        		{
        			Draw_Pixe(x+i, y+j, color);
   10342:	2b 81       	ldd	r18, Y+3	; 0x03
   10344:	3c 81       	ldd	r19, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:582
        		}
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
   10346:	eb 80       	ldd	r14, Y+3	; 0x03
   10348:	fc 80       	ldd	r15, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
			{
        		if (size == 1)
   1034a:	91 30       	cpi	r25, 0x01	; 1
   1034c:	09 f0       	breq	.+2      	; 0x10350 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1d4>
   1034e:	42 c0       	rjmp	.+132    	; 0x103d4 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
			{
				if(!mode)
				{
	        		if (size == 1) 
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   10350:	a3 01       	movw	r20, r6
   10352:	48 0d       	add	r20, r8
   10354:	59 1d       	adc	r21, r9
   10356:	b5 01       	movw	r22, r10
   10358:	88 eb       	ldi	r24, 0xB8	; 184
   1035a:	9d e0       	ldi	r25, 0x0D	; 13
   1035c:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:599
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
					}
				}
			}
      		line >>= 1;
   10360:	e8 85       	ldd	r30, Y+8	; 0x08
   10362:	f9 85       	ldd	r31, Y+9	; 0x09
   10364:	f5 95       	asr	r31
   10366:	e7 95       	ror	r30
   10368:	3f ef       	ldi	r19, 0xFF	; 255
   1036a:	83 1a       	sub	r8, r19
   1036c:	93 0a       	sbc	r9, r19
   1036e:	4c 0c       	add	r4, r12
   10370:	5d 1c       	adc	r5, r13
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:572
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
   10372:	48 e0       	ldi	r20, 0x08	; 8
   10374:	84 16       	cp	r8, r20
   10376:	91 04       	cpc	r9, r1
   10378:	e9 f6       	brne	.-70     	; 0x10334 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1b8>
   1037a:	5f ef       	ldi	r21, 0xFF	; 255
   1037c:	a5 1a       	sub	r10, r21
   1037e:	b5 0a       	sbc	r11, r21
   10380:	8c 85       	ldd	r24, Y+12	; 0x0c
   10382:	9d 85       	ldd	r25, Y+13	; 0x0d
   10384:	8c 0d       	add	r24, r12
   10386:	9d 1d       	adc	r25, r13
   10388:	9d 87       	std	Y+13, r25	; 0x0d
   1038a:	8c 87       	std	Y+12, r24	; 0x0c
   1038c:	99 81       	ldd	r25, Y+1	; 0x01
   1038e:	9f 5f       	subi	r25, 0xFF	; 255
   10390:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   10392:	96 30       	cpi	r25, 0x06	; 6
   10394:	09 f0       	breq	.+2      	; 0x10398 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
   10396:	c2 cf       	rjmp	.-124    	; 0x1031c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1a0>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:803
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    	text_x += text_size*6;		
   10398:	20 91 c4 0d 	lds	r18, 0x0DC4	; 0x800dc4 <my_lcd+0xc>
   1039c:	80 91 ba 0d 	lds	r24, 0x0DBA	; 0x800dba <my_lcd+0x2>
   103a0:	90 91 bb 0d 	lds	r25, 0x0DBB	; 0x800dbb <my_lcd+0x3>
   103a4:	e6 e0       	ldi	r30, 0x06	; 6
   103a6:	2e 9f       	mul	r18, r30
   103a8:	80 0d       	add	r24, r0
   103aa:	91 1d       	adc	r25, r1
   103ac:	11 24       	eor	r1, r1
   103ae:	90 93 bb 0d 	sts	0x0DBB, r25	; 0x800dbb <my_lcd+0x3>
   103b2:	80 93 ba 0d 	sts	0x0DBA, r24	; 0x800dba <my_lcd+0x2>
   103b6:	32 cf       	rjmp	.-412    	; 0x1021c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:585
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
        		}
        	} 
			else if (bg != color) 				
   103b8:	eb 81       	ldd	r30, Y+3	; 0x03
   103ba:	fc 81       	ldd	r31, Y+4	; 0x04
   103bc:	2e 16       	cp	r2, r30
   103be:	3f 06       	cpc	r3, r31
   103c0:	79 f2       	breq	.-98     	; 0x10360 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:587
			{
				if(!mode)
   103c2:	ff 81       	ldd	r31, Y+7	; 0x07
   103c4:	f1 11       	cpse	r31, r1
   103c6:	cc cf       	rjmp	.-104    	; 0x10360 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
				{
	        		if (size == 1) 
   103c8:	2a 81       	ldd	r18, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   103ca:	71 01       	movw	r14, r2
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
        	} 
			else if (bg != color) 				
			{
				if(!mode)
				{
	        		if (size == 1) 
   103cc:	21 30       	cpi	r18, 0x01	; 1
   103ce:	11 f4       	brne	.+4      	; 0x103d4 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   103d0:	91 01       	movw	r18, r2
   103d2:	be cf       	rjmp	.-132    	; 0x10350 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1d4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   103d4:	86 01       	movw	r16, r12
   103d6:	96 01       	movw	r18, r12
   103d8:	a2 01       	movw	r20, r4
   103da:	6c 85       	ldd	r22, Y+12	; 0x0c
   103dc:	7d 85       	ldd	r23, Y+13	; 0x0d
   103de:	88 eb       	ldi	r24, 0xB8	; 184
   103e0:	9d e0       	ldi	r25, 0x0D	; 13
   103e2:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   103e6:	bc cf       	rjmp	.-136    	; 0x10360 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1e4>
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:660

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
}
   103e8:	2d 96       	adiw	r28, 0x0d	; 13
   103ea:	0f b6       	in	r0, 0x3f	; 63
   103ec:	f8 94       	cli
   103ee:	de bf       	out	0x3e, r29	; 62
   103f0:	0f be       	out	0x3f, r0	; 63
   103f2:	cd bf       	out	0x3d, r28	; 61
   103f4:	df 91       	pop	r29
   103f6:	cf 91       	pop	r28
   103f8:	1f 91       	pop	r17
   103fa:	0f 91       	pop	r16
   103fc:	ff 90       	pop	r15
   103fe:	ef 90       	pop	r14
   10400:	df 90       	pop	r13
   10402:	cf 90       	pop	r12
   10404:	bf 90       	pop	r11
   10406:	af 90       	pop	r10
   10408:	9f 90       	pop	r9
   1040a:	8f 90       	pop	r8
   1040c:	7f 90       	pop	r7
   1040e:	6f 90       	pop	r6
   10410:	5f 90       	pop	r5
   10412:	4f 90       	pop	r4
   10414:	3f 90       	pop	r3
   10416:	2f 90       	pop	r2
   10418:	08 95       	ret

0001041a <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   1041a:	8f 92       	push	r8
   1041c:	9f 92       	push	r9
   1041e:	af 92       	push	r10
   10420:	bf 92       	push	r11
   10422:	ef 92       	push	r14
   10424:	ff 92       	push	r15
   10426:	0f 93       	push	r16
   10428:	1f 93       	push	r17
   1042a:	cf 93       	push	r28
   1042c:	df 93       	push	r29
   1042e:	cd b7       	in	r28, 0x3d	; 61
   10430:	de b7       	in	r29, 0x3e	; 62
   10432:	a1 97       	sbiw	r28, 0x21	; 33
   10434:	0f b6       	in	r0, 0x3f	; 63
   10436:	f8 94       	cli
   10438:	de bf       	out	0x3e, r29	; 62
   1043a:	0f be       	out	0x3f, r0	; 63
   1043c:	cd bf       	out	0x3d, r28	; 61
   1043e:	7c 01       	movw	r14, r24
   10440:	fa 01       	movw	r30, r20
   10442:	cb 01       	movw	r24, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   10444:	19 a2       	std	Y+33, r1	; 0x21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   10446:	22 30       	cpi	r18, 0x02	; 2
   10448:	08 f4       	brcc	.+2      	; 0x1044c <Print::printNumber(unsigned long, unsigned char)+0x32>
   1044a:	2a e0       	ldi	r18, 0x0A	; 10
   1044c:	8e 01       	movw	r16, r28
   1044e:	0f 5d       	subi	r16, 0xDF	; 223
   10450:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
   10452:	82 2e       	mov	r8, r18
   10454:	91 2c       	mov	r9, r1
   10456:	b1 2c       	mov	r11, r1
   10458:	a1 2c       	mov	r10, r1
   1045a:	bf 01       	movw	r22, r30
   1045c:	a5 01       	movw	r20, r10
   1045e:	94 01       	movw	r18, r8
   10460:	0e 94 2d b4 	call	0x1685a	; 0x1685a <__udivmodsi4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
   10464:	f9 01       	movw	r30, r18
   10466:	ca 01       	movw	r24, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   10468:	6a 30       	cpi	r22, 0x0A	; 10
   1046a:	74 f5       	brge	.+92     	; 0x104c8 <Print::printNumber(unsigned long, unsigned char)+0xae>
   1046c:	60 5d       	subi	r22, 0xD0	; 208
   1046e:	d8 01       	movw	r26, r16
   10470:	6e 93       	st	-X, r22
   10472:	8d 01       	movw	r16, r26
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
   10474:	23 2b       	or	r18, r19
   10476:	24 2b       	or	r18, r20
   10478:	25 2b       	or	r18, r21
   1047a:	79 f7       	brne	.-34     	; 0x1045a <Print::printNumber(unsigned long, unsigned char)+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   1047c:	90 e0       	ldi	r25, 0x00	; 0
   1047e:	80 e0       	ldi	r24, 0x00	; 0
write():
   10480:	10 97       	sbiw	r26, 0x00	; 0
   10482:	89 f0       	breq	.+34     	; 0x104a6 <Print::printNumber(unsigned long, unsigned char)+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
   10484:	fd 01       	movw	r30, r26
   10486:	01 90       	ld	r0, Z+
   10488:	00 20       	and	r0, r0
   1048a:	e9 f7       	brne	.-6      	; 0x10486 <Print::printNumber(unsigned long, unsigned char)+0x6c>
   1048c:	31 97       	sbiw	r30, 0x01	; 1
   1048e:	af 01       	movw	r20, r30
   10490:	4a 1b       	sub	r20, r26
   10492:	5b 0b       	sbc	r21, r27
   10494:	d7 01       	movw	r26, r14
   10496:	ed 91       	ld	r30, X+
   10498:	fc 91       	ld	r31, X
   1049a:	02 80       	ldd	r0, Z+2	; 0x02
   1049c:	f3 81       	ldd	r31, Z+3	; 0x03
   1049e:	e0 2d       	mov	r30, r0
   104a0:	b8 01       	movw	r22, r16
   104a2:	c7 01       	movw	r24, r14
   104a4:	19 95       	eicall
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
   104a6:	a1 96       	adiw	r28, 0x21	; 33
   104a8:	0f b6       	in	r0, 0x3f	; 63
   104aa:	f8 94       	cli
   104ac:	de bf       	out	0x3e, r29	; 62
   104ae:	0f be       	out	0x3f, r0	; 63
   104b0:	cd bf       	out	0x3d, r28	; 61
   104b2:	df 91       	pop	r29
   104b4:	cf 91       	pop	r28
   104b6:	1f 91       	pop	r17
   104b8:	0f 91       	pop	r16
   104ba:	ff 90       	pop	r15
   104bc:	ef 90       	pop	r14
   104be:	bf 90       	pop	r11
   104c0:	af 90       	pop	r10
   104c2:	9f 90       	pop	r9
   104c4:	8f 90       	pop	r8
   104c6:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   104c8:	69 5c       	subi	r22, 0xC9	; 201
   104ca:	d1 cf       	rjmp	.-94     	; 0x1046e <Print::printNumber(unsigned long, unsigned char)+0x54>

000104cc <TwoWire::requestFrom(int, int) [clone .constprop.129]>:
_ZN7TwoWire11requestFromEii.constprop.129():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:131
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
   104cc:	68 2f       	mov	r22, r24
   104ce:	88 e6       	ldi	r24, 0x68	; 104
   104d0:	0e 94 18 7e 	call	0xfc30	; 0xfc30 <twi_readFrom.part.0.constprop.169>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   104d4:	10 92 e2 10 	sts	0x10E2, r1	; 0x8010e2 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   104d8:	80 93 e1 10 	sts	0x10E1, r24	; 0x8010e1 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:134
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   104dc:	08 95       	ret

000104de <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:104
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
   104de:	8f 92       	push	r8
   104e0:	9f 92       	push	r9
   104e2:	af 92       	push	r10
   104e4:	bf 92       	push	r11
   104e6:	cf 92       	push	r12
   104e8:	df 92       	push	r13
   104ea:	ef 92       	push	r14
   104ec:	ff 92       	push	r15
   104ee:	0f 93       	push	r16
   104f0:	1f 93       	push	r17
   104f2:	cf 93       	push	r28
   104f4:	df 93       	push	r29
   104f6:	7c 01       	movw	r14, r24
   104f8:	eb 01       	movw	r28, r22
   104fa:	6c 01       	movw	r12, r24
   104fc:	82 e0       	ldi	r24, 0x02	; 2
   104fe:	c8 0e       	add	r12, r24
   10500:	d1 1c       	adc	r13, r1
   10502:	47 01       	movw	r8, r14
   10504:	e5 e0       	ldi	r30, 0x05	; 5
   10506:	8e 0e       	add	r8, r30
   10508:	91 1c       	adc	r9, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:105
    size_t n = 0;
   1050a:	10 e0       	ldi	r17, 0x00	; 0
   1050c:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:108
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
   1050e:	f6 01       	movw	r30, r12
   10510:	41 91       	ld	r20, Z+
   10512:	6f 01       	movw	r12, r30
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   10514:	50 e0       	ldi	r21, 0x00	; 0
   10516:	70 e0       	ldi	r23, 0x00	; 0
   10518:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   1051a:	2a e0       	ldi	r18, 0x0A	; 10
   1051c:	ce 01       	movw	r24, r28
   1051e:	0e 94 0d 82 	call	0x1041a	; 0x1041a <Print::printNumber(unsigned long, unsigned char)>
   10522:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   10524:	e8 81       	ld	r30, Y
   10526:	f9 81       	ldd	r31, Y+1	; 0x01
   10528:	01 90       	ld	r0, Z+
   1052a:	f0 81       	ld	r31, Z
   1052c:	e0 2d       	mov	r30, r0
   1052e:	6e e2       	ldi	r22, 0x2E	; 46
   10530:	ce 01       	movw	r24, r28
   10532:	19 95       	eicall
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:109
        n += p.print('.');
   10534:	8a 0d       	add	r24, r10
   10536:	9b 1d       	adc	r25, r11
   10538:	08 0f       	add	r16, r24
   1053a:	19 1f       	adc	r17, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:106
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
   1053c:	c8 14       	cp	r12, r8
   1053e:	d9 04       	cpc	r13, r9
   10540:	31 f7       	brne	.-52     	; 0x1050e <IPAddress::printTo(Print&) const+0x30>
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   10542:	f7 01       	movw	r30, r14
   10544:	45 81       	ldd	r20, Z+5	; 0x05
   10546:	50 e0       	ldi	r21, 0x00	; 0
   10548:	70 e0       	ldi	r23, 0x00	; 0
   1054a:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   1054c:	2a e0       	ldi	r18, 0x0A	; 10
   1054e:	ce 01       	movw	r24, r28
   10550:	0e 94 0d 82 	call	0x1041a	; 0x1041a <Print::printNumber(unsigned long, unsigned char)>
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:113
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
   10554:	80 0f       	add	r24, r16
   10556:	91 1f       	adc	r25, r17
   10558:	df 91       	pop	r29
   1055a:	cf 91       	pop	r28
   1055c:	1f 91       	pop	r17
   1055e:	0f 91       	pop	r16
   10560:	ff 90       	pop	r15
   10562:	ef 90       	pop	r14
   10564:	df 90       	pop	r13
   10566:	cf 90       	pop	r12
   10568:	bf 90       	pop	r11
   1056a:	af 90       	pop	r10
   1056c:	9f 90       	pop	r9
   1056e:	8f 90       	pop	r8
   10570:	08 95       	ret

00010572 <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:320
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
   10572:	1f 93       	push	r17
   10574:	cf 93       	push	r28
   10576:	df 93       	push	r29
   10578:	18 2f       	mov	r17, r24
   1057a:	66 e2       	ldi	r22, 0x26	; 38
   1057c:	70 e0       	ldi	r23, 0x00	; 0
   1057e:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
   10582:	c8 2f       	mov	r28, r24
   10584:	d0 e0       	ldi	r29, 0x00	; 0
   10586:	dc 2f       	mov	r29, r28
   10588:	cc 27       	eor	r28, r28
   1058a:	67 e2       	ldi	r22, 0x27	; 39
   1058c:	70 e0       	ldi	r23, 0x00	; 0
   1058e:	81 2f       	mov	r24, r17
   10590:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
   10594:	8c 0f       	add	r24, r28
   10596:	9d 2f       	mov	r25, r29
   10598:	91 1d       	adc	r25, r1
   1059a:	df 91       	pop	r29
   1059c:	cf 91       	pop	r28
   1059e:	1f 91       	pop	r17
   105a0:	08 95       	ret

000105a2 <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:317
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
   105a2:	1f 93       	push	r17
   105a4:	cf 93       	push	r28
   105a6:	df 93       	push	r29
   105a8:	18 2f       	mov	r17, r24
   105aa:	60 e2       	ldi	r22, 0x20	; 32
   105ac:	70 e0       	ldi	r23, 0x00	; 0
   105ae:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
   105b2:	c8 2f       	mov	r28, r24
   105b4:	d0 e0       	ldi	r29, 0x00	; 0
   105b6:	dc 2f       	mov	r29, r28
   105b8:	cc 27       	eor	r28, r28
   105ba:	61 e2       	ldi	r22, 0x21	; 33
   105bc:	70 e0       	ldi	r23, 0x00	; 0
   105be:	81 2f       	mov	r24, r17
   105c0:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
   105c4:	8c 0f       	add	r24, r28
   105c6:	9d 2f       	mov	r25, r29
   105c8:	91 1d       	adc	r25, r1
   105ca:	df 91       	pop	r29
   105cc:	cf 91       	pop	r28
   105ce:	1f 91       	pop	r17
   105d0:	08 95       	ret

000105d2 <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   105d2:	0e 94 97 b6 	call	0x16d2e	; 0x16d2e <abort>

000105d6 <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
   105d6:	cf 92       	push	r12
   105d8:	df 92       	push	r13
   105da:	ef 92       	push	r14
   105dc:	ff 92       	push	r15
   105de:	0f 93       	push	r16
   105e0:	1f 93       	push	r17
   105e2:	cf 93       	push	r28
   105e4:	df 93       	push	r29
   105e6:	cd b7       	in	r28, 0x3d	; 61
   105e8:	de b7       	in	r29, 0x3e	; 62
   105ea:	af 97       	sbiw	r28, 0x2f	; 47
   105ec:	0f b6       	in	r0, 0x3f	; 63
   105ee:	f8 94       	cli
   105f0:	de bf       	out	0x3e, r29	; 62
   105f2:	0f be       	out	0x3f, r0	; 63
   105f4:	cd bf       	out	0x3d, r28	; 61
   105f6:	7c 01       	movw	r14, r24
   105f8:	6a 01       	movw	r12, r20
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   105fa:	02 ee       	ldi	r16, 0xE2	; 226
   105fc:	12 e0       	ldi	r17, 0x02	; 2
   105fe:	1a 83       	std	Y+2, r17	; 0x02
   10600:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   10602:	1c 86       	std	Y+12, r1	; 0x0c
   10604:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
   10606:	88 ee       	ldi	r24, 0xE8	; 232
   10608:	93 e0       	ldi	r25, 0x03	; 3
   1060a:	a0 e0       	ldi	r26, 0x00	; 0
   1060c:	b0 e0       	ldi	r27, 0x00	; 0
   1060e:	8d 87       	std	Y+13, r24	; 0x0d
   10610:	9e 87       	std	Y+14, r25	; 0x0e
   10612:	af 87       	std	Y+15, r26	; 0x0f
   10614:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   10616:	88 e9       	ldi	r24, 0x98	; 152
   10618:	92 e0       	ldi	r25, 0x02	; 2
   1061a:	9a 87       	std	Y+10, r25	; 0x0a
   1061c:	89 87       	std	Y+9, r24	; 0x09
   1061e:	88 e0       	ldi	r24, 0x08	; 8
   10620:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
   10622:	19 8f       	std	Y+25, r17	; 0x19
   10624:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   10626:	1a 8e       	std	Y+26, r1	; 0x1a
   10628:	1b 8e       	std	Y+27, r1	; 0x1b
   1062a:	1c 8e       	std	Y+28, r1	; 0x1c
   1062c:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   1062e:	1b a7       	std	Y+43, r17	; 0x2b
   10630:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   10632:	1c a6       	std	Y+44, r1	; 0x2c
   10634:	1d a6       	std	Y+45, r1	; 0x2d
   10636:	1e a6       	std	Y+46, r1	; 0x2e
   10638:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   1063a:	80 91 0a 0c 	lds	r24, 0x0C0A	; 0x800c0a <Ethernet+0x2>
   1063e:	90 91 0b 0c 	lds	r25, 0x0C0B	; 0x800c0b <Ethernet+0x3>
   10642:	a0 91 0c 0c 	lds	r26, 0x0C0C	; 0x800c0c <Ethernet+0x4>
   10646:	b0 91 0d 0c 	lds	r27, 0x0C0D	; 0x800c0d <Ethernet+0x5>
   1064a:	8e a3       	std	Y+38, r24	; 0x26
   1064c:	9f a3       	std	Y+39, r25	; 0x27
   1064e:	a8 a7       	std	Y+40, r26	; 0x28
   10650:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
   10652:	8b 83       	std	Y+3, r24	; 0x03
   10654:	9c 83       	std	Y+4, r25	; 0x04
   10656:	ad 83       	std	Y+5, r26	; 0x05
   10658:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
   1065a:	18 86       	std	Y+8, r1	; 0x08
   1065c:	1f 82       	std	Y+7, r1	; 0x07
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
   1065e:	ae 01       	movw	r20, r28
   10660:	46 5d       	subi	r20, 0xD6	; 214
   10662:	5f 4f       	sbci	r21, 0xFF	; 255
   10664:	ce 01       	movw	r24, r28
   10666:	01 96       	adiw	r24, 0x01	; 1
   10668:	0e 94 3e 33 	call	0x667c	; 0x667c <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
   1066c:	81 30       	cpi	r24, 0x01	; 1
   1066e:	91 05       	cpc	r25, r1
   10670:	b1 f4       	brne	.+44     	; 0x1069e <EthernetUDP::beginPacket(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
   10672:	d7 01       	movw	r26, r14
   10674:	ed 91       	ld	r30, X+
   10676:	fc 91       	ld	r31, X
   10678:	04 88       	ldd	r0, Z+20	; 0x14
   1067a:	f5 89       	ldd	r31, Z+21	; 0x15
   1067c:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   1067e:	1d a3       	std	Y+37, r17	; 0x25
   10680:	0c a3       	std	Y+36, r16	; 0x24
   10682:	8c a5       	ldd	r24, Y+44	; 0x2c
   10684:	9d a5       	ldd	r25, Y+45	; 0x2d
   10686:	ae a5       	ldd	r26, Y+46	; 0x2e
   10688:	bf a5       	ldd	r27, Y+47	; 0x2f
   1068a:	8e a3       	std	Y+38, r24	; 0x26
   1068c:	9f a3       	std	Y+39, r25	; 0x27
   1068e:	a8 a7       	std	Y+40, r26	; 0x28
   10690:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
   10692:	a6 01       	movw	r20, r12
   10694:	be 01       	movw	r22, r28
   10696:	6c 5d       	subi	r22, 0xDC	; 220
   10698:	7f 4f       	sbci	r23, 0xFF	; 255
   1069a:	c7 01       	movw	r24, r14
   1069c:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
   1069e:	af 96       	adiw	r28, 0x2f	; 47
   106a0:	0f b6       	in	r0, 0x3f	; 63
   106a2:	f8 94       	cli
   106a4:	de bf       	out	0x3e, r29	; 62
   106a6:	0f be       	out	0x3f, r0	; 63
   106a8:	cd bf       	out	0x3d, r28	; 61
   106aa:	df 91       	pop	r29
   106ac:	cf 91       	pop	r28
   106ae:	1f 91       	pop	r17
   106b0:	0f 91       	pop	r16
   106b2:	ff 90       	pop	r15
   106b4:	ef 90       	pop	r14
   106b6:	df 90       	pop	r13
   106b8:	cf 90       	pop	r12
   106ba:	08 95       	ret

000106bc <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii.constprop.190():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:93
{
	Fill_Rect(x, y, 1, h, draw_color);
}

//draw a horizontal line
void LCDWIKI_GUI::Draw_Fast_HLine(int16_t x, int16_t y, int16_t w)
   106bc:	ef 92       	push	r14
   106be:	ff 92       	push	r15
   106c0:	0f 93       	push	r16
   106c2:	1f 93       	push	r17
   106c4:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:95
{
	Fill_Rect(x, y, w, 1, draw_color);
   106c6:	e0 90 c2 0d 	lds	r14, 0x0DC2	; 0x800dc2 <my_lcd+0xa>
   106ca:	f0 90 c3 0d 	lds	r15, 0x0DC3	; 0x800dc3 <my_lcd+0xb>
   106ce:	01 e0       	ldi	r16, 0x01	; 1
   106d0:	10 e0       	ldi	r17, 0x00	; 0
   106d2:	ab 01       	movw	r20, r22
   106d4:	bc 01       	movw	r22, r24
   106d6:	88 eb       	ldi	r24, 0xB8	; 184
   106d8:	9d e0       	ldi	r25, 0x0D	; 13
   106da:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:96
}
   106de:	1f 91       	pop	r17
   106e0:	0f 91       	pop	r16
   106e2:	ff 90       	pop	r15
   106e4:	ef 90       	pop	r14
   106e6:	08 95       	ret

000106e8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.189():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:162
    	}
  	}
}

//draw a rectangle
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   106e8:	8f 92       	push	r8
   106ea:	9f 92       	push	r9
   106ec:	af 92       	push	r10
   106ee:	bf 92       	push	r11
   106f0:	cf 92       	push	r12
   106f2:	df 92       	push	r13
   106f4:	ef 92       	push	r14
   106f6:	ff 92       	push	r15
   106f8:	0f 93       	push	r16
   106fa:	1f 93       	push	r17
   106fc:	cf 93       	push	r28
   106fe:	df 93       	push	r29
   10700:	6c 01       	movw	r12, r24
   10702:	eb 01       	movw	r28, r22
   10704:	4a 01       	movw	r8, r20
   10706:	79 01       	movw	r14, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:164
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
   10708:	9a 01       	movw	r18, r20
   1070a:	28 1b       	sub	r18, r24
   1070c:	39 0b       	sbc	r19, r25
   1070e:	89 01       	movw	r16, r18
   10710:	0f 5f       	subi	r16, 0xFF	; 255
   10712:	1f 4f       	sbci	r17, 0xFF	; 255
   10714:	c7 01       	movw	r24, r14
   10716:	86 1b       	sub	r24, r22
   10718:	97 0b       	sbc	r25, r23
   1071a:	5c 01       	movw	r10, r24
   1071c:	4f ef       	ldi	r20, 0xFF	; 255
   1071e:	a4 1a       	sub	r10, r20
   10720:	b4 0a       	sbc	r11, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:165
	if (w < 0) 
   10722:	17 ff       	sbrs	r17, 7
   10724:	04 c0       	rjmp	.+8      	; 0x1072e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]+0x46>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:168
	{ 
		x1 = x2; 
		w = -w; 
   10726:	89 01       	movw	r16, r18
   10728:	00 95       	com	r16
   1072a:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:167
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
	if (w < 0) 
	{ 
		x1 = x2; 
   1072c:	64 01       	movw	r12, r8
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:170
		w = -w; 
	}
	if (h < 0) 
   1072e:	b7 fe       	sbrs	r11, 7
   10730:	04 c0       	rjmp	.+8      	; 0x1073a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]+0x52>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:173
	{ 
		y1 = y2; 
		h = -h; 
   10732:	5c 01       	movw	r10, r24
   10734:	a0 94       	com	r10
   10736:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:172
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   10738:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:175
		h = -h; 
	}
	Draw_Fast_HLine(x1, y1, w);
   1073a:	a8 01       	movw	r20, r16
   1073c:	be 01       	movw	r22, r28
   1073e:	c6 01       	movw	r24, r12
   10740:	0e 94 5e 83 	call	0x106bc	; 0x106bc <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:176
  	Draw_Fast_HLine(x1, y2, w);
   10744:	a8 01       	movw	r20, r16
   10746:	b7 01       	movw	r22, r14
   10748:	c6 01       	movw	r24, r12
   1074a:	0e 94 5e 83 	call	0x106bc	; 0x106bc <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
Draw_Fast_VLine():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:89
}

//draw a vertical line 
void LCDWIKI_GUI::Draw_Fast_VLine(int16_t x, int16_t y, int16_t h)
{
	Fill_Rect(x, y, 1, h, draw_color);
   1074e:	e0 90 c2 0d 	lds	r14, 0x0DC2	; 0x800dc2 <my_lcd+0xa>
   10752:	f0 90 c3 0d 	lds	r15, 0x0DC3	; 0x800dc3 <my_lcd+0xb>
   10756:	85 01       	movw	r16, r10
   10758:	21 e0       	ldi	r18, 0x01	; 1
   1075a:	30 e0       	ldi	r19, 0x00	; 0
   1075c:	ae 01       	movw	r20, r28
   1075e:	b6 01       	movw	r22, r12
   10760:	88 eb       	ldi	r24, 0xB8	; 184
   10762:	9d e0       	ldi	r25, 0x0D	; 13
   10764:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   10768:	e0 90 c2 0d 	lds	r14, 0x0DC2	; 0x800dc2 <my_lcd+0xa>
   1076c:	f0 90 c3 0d 	lds	r15, 0x0DC3	; 0x800dc3 <my_lcd+0xb>
   10770:	21 e0       	ldi	r18, 0x01	; 1
   10772:	30 e0       	ldi	r19, 0x00	; 0
   10774:	ae 01       	movw	r20, r28
   10776:	b4 01       	movw	r22, r8
   10778:	88 eb       	ldi	r24, 0xB8	; 184
   1077a:	9d e0       	ldi	r25, 0x0D	; 13
   1077c:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.189():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:179
	}
	Draw_Fast_HLine(x1, y1, w);
  	Draw_Fast_HLine(x1, y2, w);
	Draw_Fast_VLine(x1, y1, h);
	Draw_Fast_VLine(x2, y1, h);
}
   10780:	df 91       	pop	r29
   10782:	cf 91       	pop	r28
   10784:	1f 91       	pop	r17
   10786:	0f 91       	pop	r16
   10788:	ff 90       	pop	r15
   1078a:	ef 90       	pop	r14
   1078c:	df 90       	pop	r13
   1078e:	cf 90       	pop	r12
   10790:	bf 90       	pop	r11
   10792:	af 90       	pop	r10
   10794:	9f 90       	pop	r9
   10796:	8f 90       	pop	r8
   10798:	08 95       	ret

0001079a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii.constprop.188():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:70
	Read_GRAM(x, y, &colour, 1, 1);
	return colour;
}

//fill a rectangle
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   1079a:	ef 92       	push	r14
   1079c:	ff 92       	push	r15
   1079e:	0f 93       	push	r16
   107a0:	1f 93       	push	r17
   107a2:	cf 93       	push	r28
   107a4:	df 93       	push	r29
   107a6:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:72
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   107a8:	ea 01       	movw	r28, r20
   107aa:	c8 1b       	sub	r28, r24
   107ac:	d9 0b       	sbc	r29, r25
   107ae:	9e 01       	movw	r18, r28
   107b0:	2f 5f       	subi	r18, 0xFF	; 255
   107b2:	3f 4f       	sbci	r19, 0xFF	; 255
   107b4:	df 01       	movw	r26, r30
   107b6:	a6 1b       	sub	r26, r22
   107b8:	b7 0b       	sbc	r27, r23
   107ba:	8d 01       	movw	r16, r26
   107bc:	0f 5f       	subi	r16, 0xFF	; 255
   107be:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:73
   	if (w < 0) 
   107c0:	37 ff       	sbrs	r19, 7
   107c2:	04 c0       	rjmp	.+8      	; 0x107cc <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]+0x32>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:76
	{ 
		x1 = x2; 
		w = -w; 
   107c4:	9e 01       	movw	r18, r28
   107c6:	20 95       	com	r18
   107c8:	30 95       	com	r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:75
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   	if (w < 0) 
	{ 
		x1 = x2; 
   107ca:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:78
		w = -w; 
	}
	if (h < 0) 
   107cc:	17 ff       	sbrs	r17, 7
   107ce:	04 c0       	rjmp	.+8      	; 0x107d8 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]+0x3e>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:81
	{ 
		y1 = y2; 
		h = -h; 
   107d0:	8d 01       	movw	r16, r26
   107d2:	00 95       	com	r16
   107d4:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:80
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   107d6:	bf 01       	movw	r22, r30
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:83
		h = -h; 
	}
	Fill_Rect(x1, y1, w, h, draw_color);
   107d8:	e0 90 c2 0d 	lds	r14, 0x0DC2	; 0x800dc2 <my_lcd+0xa>
   107dc:	f0 90 c3 0d 	lds	r15, 0x0DC3	; 0x800dc3 <my_lcd+0xb>
   107e0:	ab 01       	movw	r20, r22
   107e2:	bc 01       	movw	r22, r24
   107e4:	88 eb       	ldi	r24, 0xB8	; 184
   107e6:	9d e0       	ldi	r25, 0x0D	; 13
   107e8:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:84
}
   107ec:	df 91       	pop	r29
   107ee:	cf 91       	pop	r28
   107f0:	1f 91       	pop	r17
   107f2:	0f 91       	pop	r16
   107f4:	ff 90       	pop	r15
   107f6:	ef 90       	pop	r14
   107f8:	08 95       	ret

000107fa <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>:
_ZN9SRAM_23LC16sendAddressBytesEm.constprop.184():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:133
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
   107fa:	cf 92       	push	r12
   107fc:	df 92       	push	r13
   107fe:	ef 92       	push	r14
   10800:	ff 92       	push	r15
   10802:	6b 01       	movw	r12, r22
   10804:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
{
  if (_capacity > 0x10000) {
   10806:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <SRAM+0x4>
   1080a:	90 91 83 0c 	lds	r25, 0x0C83	; 0x800c83 <SRAM+0x5>
   1080e:	a0 91 84 0c 	lds	r26, 0x0C84	; 0x800c84 <SRAM+0x6>
   10812:	b0 91 85 0c 	lds	r27, 0x0C85	; 0x800c85 <SRAM+0x7>
   10816:	01 97       	sbiw	r24, 0x01	; 1
   10818:	a1 40       	sbci	r26, 0x01	; 1
   1081a:	b1 05       	cpc	r27, r1
   1081c:	48 f0       	brcs	.+18     	; 0x10830 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]+0x36>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   1081e:	b7 01       	movw	r22, r14
   10820:	88 27       	eor	r24, r24
   10822:	99 27       	eor	r25, r25
   10824:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <SRAM>
   10828:	90 91 7f 0c 	lds	r25, 0x0C7F	; 0x800c7f <SRAM+0x1>
   1082c:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   10830:	99 27       	eor	r25, r25
   10832:	8f 2d       	mov	r24, r15
   10834:	7e 2d       	mov	r23, r14
   10836:	6d 2d       	mov	r22, r13
   10838:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <SRAM>
   1083c:	90 91 7f 0c 	lds	r25, 0x0C7F	; 0x800c7f <SRAM+0x1>
   10840:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   10844:	6c 2d       	mov	r22, r12
   10846:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <SRAM>
   1084a:	90 91 7f 0c 	lds	r25, 0x0C7F	; 0x800c7f <SRAM+0x1>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   1084e:	ff 90       	pop	r15
   10850:	ef 90       	pop	r14
   10852:	df 90       	pop	r13
   10854:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   10856:	0c 94 70 36 	jmp	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>

0001085a <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>:
_ZN7TwoWire17beginTransmissionEh.constprop.167():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:144
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
   1085a:	91 e0       	ldi	r25, 0x01	; 1
   1085c:	90 93 e6 10 	sts	0x10E6, r25	; 0x8010e6 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:146
  // set address of targeted slave
  txAddress = address;
   10860:	80 93 e5 10 	sts	0x10E5, r24	; 0x8010e5 <TwoWire::txAddress>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:148
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   10864:	10 92 e4 10 	sts	0x10E4, r1	; 0x8010e4 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:149
  txBufferLength = 0;
   10868:	10 92 e3 10 	sts	0x10E3, r1	; 0x8010e3 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:150
}
   1086c:	08 95       	ret

0001086e <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.161():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:99
{
	Fill_Rect(x, y, w, 1, draw_color);
}

//Fill the full screen with color
void LCDWIKI_GUI::Fill_Screen(uint16_t color)
   1086e:	ef 92       	push	r14
   10870:	ff 92       	push	r15
   10872:	0f 93       	push	r16
   10874:	1f 93       	push	r17
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   10876:	e8 eb       	ldi	r30, 0xB8	; 184
   10878:	fd e0       	ldi	r31, 0x0D	; 13
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.161():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:101
{
	Fill_Rect(0, 0, Get_Width(), Get_Height(), color);
   1087a:	04 89       	ldd	r16, Z+20	; 0x14
   1087c:	15 89       	ldd	r17, Z+21	; 0x15
   1087e:	22 89       	ldd	r18, Z+18	; 0x12
   10880:	33 89       	ldd	r19, Z+19	; 0x13
   10882:	7c 01       	movw	r14, r24
   10884:	50 e0       	ldi	r21, 0x00	; 0
   10886:	40 e0       	ldi	r20, 0x00	; 0
   10888:	70 e0       	ldi	r23, 0x00	; 0
   1088a:	60 e0       	ldi	r22, 0x00	; 0
   1088c:	cf 01       	movw	r24, r30
   1088e:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:102
}
   10892:	1f 91       	pop	r17
   10894:	0f 91       	pop	r16
   10896:	ff 90       	pop	r15
   10898:	ef 90       	pop	r14
   1089a:	08 95       	ret

0001089c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>:
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2585
    csize - velikost pisma
    fc - foreground color
    bc - backgroud color
    mode - ?
*/
void show_string(char *str, int16_t x, int16_t y, uint8_t csize, uint16_t fc, uint16_t bc, boolean mode)
   1089c:	8f 92       	push	r8
   1089e:	9f 92       	push	r9
   108a0:	af 92       	push	r10
   108a2:	bf 92       	push	r11
   108a4:	cf 92       	push	r12
   108a6:	df 92       	push	r13
   108a8:	ef 92       	push	r14
   108aa:	ff 92       	push	r15
   108ac:	0f 93       	push	r16
   108ae:	1f 93       	push	r17
   108b0:	cf 93       	push	r28
   108b2:	df 93       	push	r29
   108b4:	00 d0       	rcall	.+0      	; 0x108b6 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x1a>
   108b6:	00 d0       	rcall	.+0      	; 0x108b8 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x1c>
   108b8:	cd b7       	in	r28, 0x3d	; 61
   108ba:	de b7       	in	r29, 0x3e	; 62
   108bc:	6c 01       	movw	r12, r24
   108be:	5b 01       	movw	r10, r22
   108c0:	4a 01       	movw	r8, r20
Set_Text_Mode():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
   108c2:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xd>
Set_Text_Size():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:529
}

//set text size
void LCDWIKI_GUI::Set_Text_Size(uint8_t s)
{
	text_size = s;
   108c6:	20 93 c4 0d 	sts	0x0DC4, r18	; 0x800dc4 <my_lcd+0xc>
Set_Text_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:493
}

//set text colour with 16bit color
void LCDWIKI_GUI::Set_Text_colour(uint16_t color)
{
	text_color = color;
   108ca:	10 93 bf 0d 	sts	0x0DBF, r17	; 0x800dbf <my_lcd+0x7>
   108ce:	00 93 be 0d 	sts	0x0DBE, r16	; 0x800dbe <my_lcd+0x6>
Set_Text_Back_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:511
}

//set text background colour with 16bits color
void LCDWIKI_GUI::Set_Text_Back_colour(uint16_t color)
{
	text_bgcolor = color;	
   108d2:	f0 92 c1 0d 	sts	0x0DC1, r15	; 0x800dc1 <my_lcd+0x9>
   108d6:	e0 92 c0 0d 	sts	0x0DC0, r14	; 0x800dc0 <my_lcd+0x8>
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   108da:	1a 82       	std	Y+2, r1	; 0x02
   108dc:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   108de:	1c 82       	std	Y+4, r1	; 0x04
   108e0:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   108e2:	1e 82       	std	Y+6, r1	; 0x06
   108e4:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   108e6:	fc 01       	movw	r30, r24
   108e8:	01 90       	ld	r0, Z+
   108ea:	00 20       	and	r0, r0
   108ec:	e9 f7       	brne	.-6      	; 0x108e8 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x4c>
   108ee:	31 97       	sbiw	r30, 0x01	; 1
   108f0:	8f 01       	movw	r16, r30
   108f2:	08 1b       	sub	r16, r24
   108f4:	19 0b       	sbc	r17, r25
changeBuffer():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:157
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   108f6:	b8 01       	movw	r22, r16
   108f8:	6f 5f       	subi	r22, 0xFF	; 255
   108fa:	7f 4f       	sbci	r23, 0xFF	; 255
   108fc:	90 e0       	ldi	r25, 0x00	; 0
   108fe:	80 e0       	ldi	r24, 0x00	; 0
   10900:	0e 94 b6 b5 	call	0x16b6c	; 0x16b6c <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   10904:	00 97       	sbiw	r24, 0x00	; 0
   10906:	81 f0       	breq	.+32     	; 0x10928 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   10908:	9a 83       	std	Y+2, r25	; 0x02
   1090a:	89 83       	std	Y+1, r24	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   1090c:	1c 83       	std	Y+4, r17	; 0x04
   1090e:	0b 83       	std	Y+3, r16	; 0x03
reserve():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   10910:	2d 81       	ldd	r18, Y+5	; 0x05
   10912:	3e 81       	ldd	r19, Y+6	; 0x06
   10914:	23 2b       	or	r18, r19
   10916:	11 f4       	brne	.+4      	; 0x1091c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x80>
   10918:	fc 01       	movw	r30, r24
   1091a:	10 82       	st	Z, r1
copy():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   1091c:	1e 83       	std	Y+6, r17	; 0x06
   1091e:	0d 83       	std	Y+5, r16	; 0x05
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   10920:	b6 01       	movw	r22, r12
   10922:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
   10926:	0c c0       	rjmp	.+24     	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0xa4>
invalidate():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:140
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
   10928:	89 81       	ldd	r24, Y+1	; 0x01
   1092a:	9a 81       	ldd	r25, Y+2	; 0x02
   1092c:	00 97       	sbiw	r24, 0x00	; 0
   1092e:	11 f0       	breq	.+4      	; 0x10934 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x98>
   10930:	0e 94 26 af 	call	0x15e4c	; 0x15e4c <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   10934:	1a 82       	std	Y+2, r1	; 0x02
   10936:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   10938:	1e 82       	std	Y+6, r1	; 0x06
   1093a:	1d 82       	std	Y+5, r1	; 0x05
   1093c:	1c 82       	std	Y+4, r1	; 0x04
   1093e:	1b 82       	std	Y+3, r1	; 0x03
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2591
{
  my_lcd.Set_Text_Mode(mode);
  my_lcd.Set_Text_Size(csize);
  my_lcd.Set_Text_colour(fc);
  my_lcd.Set_Text_Back_colour(bc);
  my_lcd.Print_String(str, x, y);
   10940:	a4 01       	movw	r20, r8
   10942:	b5 01       	movw	r22, r10
   10944:	ce 01       	movw	r24, r28
   10946:	01 96       	adiw	r24, 0x01	; 1
   10948:	0e 94 be 80 	call	0x1017c	; 0x1017c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]>
__base_dtor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   1094c:	89 81       	ldd	r24, Y+1	; 0x01
   1094e:	9a 81       	ldd	r25, Y+2	; 0x02
   10950:	0e 94 26 af 	call	0x15e4c	; 0x15e4c <free>
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2592
}
   10954:	26 96       	adiw	r28, 0x06	; 6
   10956:	0f b6       	in	r0, 0x3f	; 63
   10958:	f8 94       	cli
   1095a:	de bf       	out	0x3e, r29	; 62
   1095c:	0f be       	out	0x3f, r0	; 63
   1095e:	cd bf       	out	0x3d, r28	; 61
   10960:	df 91       	pop	r29
   10962:	cf 91       	pop	r28
   10964:	1f 91       	pop	r17
   10966:	0f 91       	pop	r16
   10968:	ff 90       	pop	r15
   1096a:	ef 90       	pop	r14
   1096c:	df 90       	pop	r13
   1096e:	cf 90       	pop	r12
   10970:	bf 90       	pop	r11
   10972:	af 90       	pop	r10
   10974:	9f 90       	pop	r9
   10976:	8f 90       	pop	r8
   10978:	08 95       	ret

0001097a <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>:
_ZN12PubSubClient11writeStringEPKcPhj.constprop.148():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:524
    _state = MQTT_DISCONNECTED;
    _client->stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   1097a:	cf 93       	push	r28
   1097c:	df 93       	push	r29
   1097e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:527
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   10980:	fa 01       	movw	r30, r20
   10982:	32 96       	adiw	r30, 0x02	; 2
   10984:	e6 0f       	add	r30, r22
   10986:	f7 1f       	adc	r31, r23
   10988:	dc 01       	movw	r26, r24
   1098a:	9d 01       	movw	r18, r26
   1098c:	2c 1b       	sub	r18, r28
   1098e:	3d 0b       	sbc	r19, r29
   10990:	cf 01       	movw	r24, r30
   10992:	86 1b       	sub	r24, r22
   10994:	97 0b       	sbc	r25, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:528
    while (*idp) {
   10996:	4d 91       	ld	r20, X+
   10998:	44 23       	and	r20, r20
   1099a:	11 f0       	breq	.+4      	; 0x109a0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]+0x26>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:529
        buf[pos++] = *idp++;
   1099c:	41 93       	st	Z+, r20
   1099e:	f5 cf       	rjmp	.-22     	; 0x1098a <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:532
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   109a0:	ac 01       	movw	r20, r24
   109a2:	42 1b       	sub	r20, r18
   109a4:	53 0b       	sbc	r21, r19
   109a6:	64 0f       	add	r22, r20
   109a8:	75 1f       	adc	r23, r21
   109aa:	fb 01       	movw	r30, r22
   109ac:	32 97       	sbiw	r30, 0x02	; 2
   109ae:	30 83       	st	Z, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:533
    buf[pos-i-1] = (i & 0xFF);
   109b0:	61 50       	subi	r22, 0x01	; 1
   109b2:	71 09       	sbc	r23, r1
   109b4:	fb 01       	movw	r30, r22
   109b6:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:535
    return pos;
}
   109b8:	df 91       	pop	r29
   109ba:	cf 91       	pop	r28
   109bc:	08 95       	ret

000109be <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:114
   	return num; 
}

#define READ_TIMES 5 //the times for read
#define LOST_VAL 1          //
uint16_t LCDWIKI_TOUCH::TP_Read_XY(uint8_t xy)
   109be:	ef 92       	push	r14
   109c0:	ff 92       	push	r15
   109c2:	0f 93       	push	r16
   109c4:	1f 93       	push	r17
   109c6:	cf 93       	push	r28
   109c8:	df 93       	push	r29
   109ca:	00 d0       	rcall	.+0      	; 0x109cc <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0xe>
   109cc:	00 d0       	rcall	.+0      	; 0x109ce <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x10>
   109ce:	00 d0       	rcall	.+0      	; 0x109d0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x12>
   109d0:	1f 92       	push	r1
   109d2:	cd b7       	in	r28, 0x3d	; 61
   109d4:	de b7       	in	r29, 0x3e	; 62
   109d6:	fe 01       	movw	r30, r28
   109d8:	31 96       	adiw	r30, 0x01	; 1
   109da:	ae 01       	movw	r20, r28
   109dc:	45 5f       	subi	r20, 0xF5	; 245
   109de:	5f 4f       	sbci	r21, 0xFF	; 255
   109e0:	7f 01       	movw	r14, r30
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:84

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
	uint8_t count=0; 
	TCS_LOW; 
   109e2:	20 91 a9 0d 	lds	r18, 0x0DA9	; 0x800da9 <my_touch+0xf>
   109e6:	30 91 aa 0d 	lds	r19, 0x0DAA	; 0x800daa <my_touch+0x10>
   109ea:	d9 01       	movw	r26, r18
   109ec:	6c 91       	ld	r22, X
   109ee:	90 91 b3 0d 	lds	r25, 0x0DB3	; 0x800db3 <my_touch+0x19>
   109f2:	90 95       	com	r25
   109f4:	96 23       	and	r25, r22
   109f6:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:85
	TCLK_LOW;           
   109f8:	20 91 ab 0d 	lds	r18, 0x0DAB	; 0x800dab <my_touch+0x11>
   109fc:	30 91 ac 0d 	lds	r19, 0x0DAC	; 0x800dac <my_touch+0x12>
   10a00:	d9 01       	movw	r26, r18
   10a02:	6c 91       	ld	r22, X
   10a04:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <my_touch+0x1a>
   10a08:	90 95       	com	r25
   10a0a:	96 23       	and	r25, r22
   10a0c:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:86
	TDIN_LOW;
   10a0e:	20 91 af 0d 	lds	r18, 0x0DAF	; 0x800daf <my_touch+0x15>
   10a12:	30 91 b0 0d 	lds	r19, 0x0DB0	; 0x800db0 <my_touch+0x16>
   10a16:	d9 01       	movw	r26, r18
   10a18:	6c 91       	ld	r22, X
   10a1a:	90 91 b6 0d 	lds	r25, 0x0DB6	; 0x800db6 <my_touch+0x1c>
   10a1e:	90 95       	com	r25
   10a20:	96 23       	and	r25, r22
   10a22:	9c 93       	st	X, r25
   10a24:	28 e0       	ldi	r18, 0x08	; 8
   10a26:	30 e0       	ldi	r19, 0x00	; 0
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:63
	LCD_Set_Rotation(r);
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
   10a28:	10 e8       	ldi	r17, 0x80	; 128
   10a2a:	60 91 af 0d 	lds	r22, 0x0DAF	; 0x800daf <my_touch+0x15>
   10a2e:	70 91 b0 0d 	lds	r23, 0x0DB0	; 0x800db0 <my_touch+0x16>
   10a32:	90 91 b6 0d 	lds	r25, 0x0DB6	; 0x800db6 <my_touch+0x1c>
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
	while(val)
	{
		if(data&val)
   10a36:	08 2f       	mov	r16, r24
   10a38:	01 23       	and	r16, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
   10a3a:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
	{
		if(data&val)
   10a3c:	09 f4       	brne	.+2      	; 0x10a40 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x82>
   10a3e:	b1 c0       	rjmp	.+354    	; 0x10ba2 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
   10a40:	0c 91       	ld	r16, X
   10a42:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		}
		else
		{
			TDIN_LOW;
   10a44:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:74
		}
		TCLK_LOW;
   10a46:	60 91 ab 0d 	lds	r22, 0x0DAB	; 0x800dab <my_touch+0x11>
   10a4a:	70 91 ac 0d 	lds	r23, 0x0DAC	; 0x800dac <my_touch+0x12>
   10a4e:	db 01       	movw	r26, r22
   10a50:	0c 91       	ld	r16, X
   10a52:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <my_touch+0x1a>
   10a56:	90 95       	com	r25
   10a58:	90 23       	and	r25, r16
   10a5a:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:75
		TCLK_HIGH;
   10a5c:	60 91 ab 0d 	lds	r22, 0x0DAB	; 0x800dab <my_touch+0x11>
   10a60:	70 91 ac 0d 	lds	r23, 0x0DAC	; 0x800dac <my_touch+0x12>
   10a64:	db 01       	movw	r26, r22
   10a66:	9c 91       	ld	r25, X
   10a68:	00 91 b4 0d 	lds	r16, 0x0DB4	; 0x800db4 <my_touch+0x1a>
   10a6c:	90 2b       	or	r25, r16
   10a6e:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:76
		val >>= 1;
   10a70:	16 95       	lsr	r17
   10a72:	21 50       	subi	r18, 0x01	; 1
   10a74:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:64
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
   10a76:	c9 f6       	brne	.-78     	; 0x10a2a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x6c>
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:89
	TCS_LOW; 
	TCLK_LOW;           
	TDIN_LOW;
	TP_Write_Byte(cmd);
	//delay_us(6);              
	TCLK_LOW; 
   10a78:	20 91 ab 0d 	lds	r18, 0x0DAB	; 0x800dab <my_touch+0x11>
   10a7c:	30 91 ac 0d 	lds	r19, 0x0DAC	; 0x800dac <my_touch+0x12>
   10a80:	d9 01       	movw	r26, r18
   10a82:	6c 91       	ld	r22, X
   10a84:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <my_touch+0x1a>
   10a88:	90 95       	com	r25
   10a8a:	96 23       	and	r25, r22
   10a8c:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:91
	delay_us(1); 
	TCLK_HIGH;
   10a8e:	20 91 ab 0d 	lds	r18, 0x0DAB	; 0x800dab <my_touch+0x11>
   10a92:	30 91 ac 0d 	lds	r19, 0x0DAC	; 0x800dac <my_touch+0x12>
   10a96:	d9 01       	movw	r26, r18
   10a98:	9c 91       	ld	r25, X
   10a9a:	60 91 b4 0d 	lds	r22, 0x0DB4	; 0x800db4 <my_touch+0x1a>
   10a9e:	96 2b       	or	r25, r22
   10aa0:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:92
	TCLK_LOW;
   10aa2:	20 91 ab 0d 	lds	r18, 0x0DAB	; 0x800dab <my_touch+0x11>
   10aa6:	30 91 ac 0d 	lds	r19, 0x0DAC	; 0x800dac <my_touch+0x12>
   10aaa:	d9 01       	movw	r26, r18
   10aac:	6c 91       	ld	r22, X
   10aae:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <my_touch+0x1a>
   10ab2:	90 95       	com	r25
   10ab4:	96 23       	and	r25, r22
   10ab6:	9c 93       	st	X, r25
   10ab8:	60 e1       	ldi	r22, 0x10	; 16
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   10aba:	30 e0       	ldi	r19, 0x00	; 0
   10abc:	20 e0       	ldi	r18, 0x00	; 0
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:95
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
	{   
	    num<<=1;          
   10abe:	22 0f       	add	r18, r18
   10ac0:	33 1f       	adc	r19, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:96
	    TCLK_LOW;                         
   10ac2:	00 91 ab 0d 	lds	r16, 0x0DAB	; 0x800dab <my_touch+0x11>
   10ac6:	10 91 ac 0d 	lds	r17, 0x0DAC	; 0x800dac <my_touch+0x12>
   10aca:	d8 01       	movw	r26, r16
   10acc:	7c 91       	ld	r23, X
   10ace:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <my_touch+0x1a>
   10ad2:	90 95       	com	r25
   10ad4:	97 23       	and	r25, r23
   10ad6:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:97
	    TCLK_HIGH;
   10ad8:	00 91 ab 0d 	lds	r16, 0x0DAB	; 0x800dab <my_touch+0x11>
   10adc:	10 91 ac 0d 	lds	r17, 0x0DAC	; 0x800dac <my_touch+0x12>
   10ae0:	d8 01       	movw	r26, r16
   10ae2:	9c 91       	ld	r25, X
   10ae4:	70 91 b4 0d 	lds	r23, 0x0DB4	; 0x800db4 <my_touch+0x1a>
   10ae8:	97 2b       	or	r25, r23
   10aea:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:98
	    if(TDOUT_STATE)
   10aec:	00 91 ad 0d 	lds	r16, 0x0DAD	; 0x800dad <my_touch+0x13>
   10af0:	10 91 ae 0d 	lds	r17, 0x0DAE	; 0x800dae <my_touch+0x14>
   10af4:	d8 01       	movw	r26, r16
   10af6:	9c 91       	ld	r25, X
   10af8:	70 91 b5 0d 	lds	r23, 0x0DB5	; 0x800db5 <my_touch+0x1b>
   10afc:	97 23       	and	r25, r23
   10afe:	11 f0       	breq	.+4      	; 0x10b04 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x146>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:100
	    {
	         num += 1;                  
   10b00:	2f 5f       	subi	r18, 0xFF	; 255
   10b02:	3f 4f       	sbci	r19, 0xFF	; 255
   10b04:	61 50       	subi	r22, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:93
	//delay_us(6);              
	TCLK_LOW; 
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
   10b06:	d9 f6       	brne	.-74     	; 0x10abe <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x100>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:108
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
    TCS_HIGH;   
   10b08:	60 91 a9 0d 	lds	r22, 0x0DA9	; 0x800da9 <my_touch+0xf>
   10b0c:	70 91 aa 0d 	lds	r23, 0x0DAA	; 0x800daa <my_touch+0x10>
   10b10:	db 01       	movw	r26, r22
   10b12:	9c 91       	ld	r25, X
   10b14:	10 91 b3 0d 	lds	r17, 0x0DB3	; 0x800db3 <my_touch+0x19>
   10b18:	91 2b       	or	r25, r17
   10b1a:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:107
		else
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
   10b1c:	94 e0       	ldi	r25, 0x04	; 4
   10b1e:	36 95       	lsr	r19
   10b20:	27 95       	ror	r18
   10b22:	9a 95       	dec	r25
   10b24:	e1 f7       	brne	.-8      	; 0x10b1e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x160>
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:122
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
   10b26:	d7 01       	movw	r26, r14
   10b28:	2d 93       	st	X+, r18
   10b2a:	3d 93       	st	X+, r19
   10b2c:	7d 01       	movw	r14, r26
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:120
{
 	uint16_t i, j;
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
   10b2e:	a4 17       	cp	r26, r20
   10b30:	b5 07       	cpc	r27, r21
   10b32:	09 f0       	breq	.+2      	; 0x10b36 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x178>
   10b34:	56 cf       	rjmp	.-340    	; 0x109e2 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x24>
   10b36:	cf 01       	movw	r24, r30
   10b38:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   10b3a:	df 01       	movw	r26, r30
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:128
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
       	{
        	if(buf[i]>buf[j])
   10b3c:	20 81       	ld	r18, Z
   10b3e:	31 81       	ldd	r19, Z+1	; 0x01
   10b40:	12 96       	adiw	r26, 0x02	; 2
   10b42:	4d 91       	ld	r20, X+
   10b44:	5c 91       	ld	r21, X
   10b46:	13 97       	sbiw	r26, 0x03	; 3
   10b48:	42 17       	cp	r20, r18
   10b4a:	53 07       	cpc	r21, r19
   10b4c:	30 f4       	brcc	.+12     	; 0x10b5a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x19c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:131
            {
             	temp=buf[i];
             	buf[i]=buf[j];
   10b4e:	51 83       	std	Z+1, r21	; 0x01
   10b50:	40 83       	st	Z, r20
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:132
             	buf[j]=temp;
   10b52:	13 96       	adiw	r26, 0x03	; 3
   10b54:	3c 93       	st	X, r19
   10b56:	2e 93       	st	-X, r18
   10b58:	12 97       	sbiw	r26, 0x02	; 2
   10b5a:	12 96       	adiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:126
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
   10b5c:	8a 17       	cp	r24, r26
   10b5e:	9b 07       	cpc	r25, r27
   10b60:	69 f7       	brne	.-38     	; 0x10b3c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x17e>
   10b62:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:124
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
   10b64:	e8 17       	cp	r30, r24
   10b66:	f9 07       	cpc	r31, r25
   10b68:	41 f7       	brne	.-48     	; 0x10b3a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x17c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:138
          	}
      	}
  	}          
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++) //Remove maximum and minimum values
	{
		sum+=buf[i];
   10b6a:	8b 81       	ldd	r24, Y+3	; 0x03
   10b6c:	9c 81       	ldd	r25, Y+4	; 0x04
   10b6e:	2d 81       	ldd	r18, Y+5	; 0x05
   10b70:	3e 81       	ldd	r19, Y+6	; 0x06
   10b72:	82 0f       	add	r24, r18
   10b74:	93 1f       	adc	r25, r19
   10b76:	2f 81       	ldd	r18, Y+7	; 0x07
   10b78:	38 85       	ldd	r19, Y+8	; 0x08
   10b7a:	82 0f       	add	r24, r18
   10b7c:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:140
	}
	temp=sum/(READ_TIMES-2*LOST_VAL);
   10b7e:	63 e0       	ldi	r22, 0x03	; 3
   10b80:	70 e0       	ldi	r23, 0x00	; 0
   10b82:	0e 94 05 b4 	call	0x1680a	; 0x1680a <__udivmodhi4>
   10b86:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:142
	return temp;   
} 
   10b88:	2a 96       	adiw	r28, 0x0a	; 10
   10b8a:	0f b6       	in	r0, 0x3f	; 63
   10b8c:	f8 94       	cli
   10b8e:	de bf       	out	0x3e, r29	; 62
   10b90:	0f be       	out	0x3f, r0	; 63
   10b92:	cd bf       	out	0x3d, r28	; 61
   10b94:	df 91       	pop	r29
   10b96:	cf 91       	pop	r28
   10b98:	1f 91       	pop	r17
   10b9a:	0f 91       	pop	r16
   10b9c:	ff 90       	pop	r15
   10b9e:	ef 90       	pop	r14
   10ba0:	08 95       	ret
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		{
			TDIN_HIGH; 
		}
		else
		{
			TDIN_LOW;
   10ba2:	0c 91       	ld	r16, X
   10ba4:	90 95       	com	r25
   10ba6:	90 23       	and	r25, r16
   10ba8:	4d cf       	rjmp	.-358    	; 0x10a44 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x86>

00010baa <TwoWire::write(int) [clone .constprop.99]>:
_ZN7TwoWire5writeEi.constprop.99():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.h:78
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   10baa:	68 2f       	mov	r22, r24
   10bac:	87 ef       	ldi	r24, 0xF7	; 247
   10bae:	9d e0       	ldi	r25, 0x0D	; 13
   10bb0:	0c 94 2f 80 	jmp	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>

00010bb4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>:
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.74():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:747
}

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
   10bb4:	0f 93       	push	r16
   10bb6:	1f 93       	push	r17
   10bb8:	cf 93       	push	r28
   10bba:	df 93       	push	r29
   10bbc:	00 d0       	rcall	.+0      	; 0x10bbe <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0xa>
   10bbe:	00 d0       	rcall	.+0      	; 0x10bc0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0xc>
   10bc0:	cd b7       	in	r28, 0x3d	; 61
   10bc2:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:749
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
   10bc4:	48 2f       	mov	r20, r24
   10bc6:	43 70       	andi	r20, 0x03	; 3
   10bc8:	50 e0       	ldi	r21, 0x00	; 0
   10bca:	50 93 cf 0d 	sts	0x0DCF, r21	; 0x800dcf <my_lcd+0x17>
   10bce:	40 93 ce 0d 	sts	0x0DCE, r20	; 0x800dce <my_lcd+0x16>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750
    width = (rotation & 1) ? HEIGHT : WIDTH;
   10bd2:	28 2f       	mov	r18, r24
   10bd4:	21 70       	andi	r18, 0x01	; 1
   10bd6:	80 ff       	sbrs	r24, 0
   10bd8:	3d c1       	rjmp	.+634    	; 0x10e54 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2a0>
   10bda:	80 91 c8 0d 	lds	r24, 0x0DC8	; 0x800dc8 <my_lcd+0x10>
   10bde:	90 91 c9 0d 	lds	r25, 0x0DC9	; 0x800dc9 <my_lcd+0x11>
   10be2:	90 93 cb 0d 	sts	0x0DCB, r25	; 0x800dcb <my_lcd+0x13>
   10be6:	80 93 ca 0d 	sts	0x0DCA, r24	; 0x800dca <my_lcd+0x12>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:751
    height = (rotation & 1) ? WIDTH : HEIGHT;
   10bea:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <my_lcd+0xe>
   10bee:	90 91 c7 0d 	lds	r25, 0x0DC7	; 0x800dc7 <my_lcd+0xf>
   10bf2:	21 11       	cpse	r18, r1
   10bf4:	04 c0       	rjmp	.+8      	; 0x10bfe <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4a>
   10bf6:	80 91 c8 0d 	lds	r24, 0x0DC8	; 0x800dc8 <my_lcd+0x10>
   10bfa:	90 91 c9 0d 	lds	r25, 0x0DC9	; 0x800dc9 <my_lcd+0x11>
   10bfe:	90 93 cd 0d 	sts	0x0DCD, r25	; 0x800dcd <my_lcd+0x15>
   10c02:	80 93 cc 0d 	sts	0x0DCC, r24	; 0x800dcc <my_lcd+0x14>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:752
	CS_ACTIVE;
   10c06:	a0 91 e6 0d 	lds	r26, 0x0DE6	; 0x800de6 <my_lcd+0x2e>
   10c0a:	b0 91 e7 0d 	lds	r27, 0x0DE7	; 0x800de7 <my_lcd+0x2f>
   10c0e:	8c 91       	ld	r24, X
   10c10:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3a>
   10c14:	89 23       	and	r24, r25
   10c16:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:753
	if(lcd_driver == ID_932X)
   10c18:	40 91 d0 0d 	lds	r20, 0x0DD0	; 0x800dd0 <my_lcd+0x18>
   10c1c:	50 91 d1 0d 	lds	r21, 0x0DD1	; 0x800dd1 <my_lcd+0x19>
   10c20:	80 91 ce 0d 	lds	r24, 0x0DCE	; 0x800dce <my_lcd+0x16>
   10c24:	90 91 cf 0d 	lds	r25, 0x0DCF	; 0x800dcf <my_lcd+0x17>
   10c28:	a0 91 e8 0d 	lds	r26, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   10c2c:	b0 91 e9 0d 	lds	r27, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   10c30:	20 91 f3 0d 	lds	r18, 0x0DF3	; 0x800df3 <my_lcd+0x3b>
   10c34:	41 15       	cp	r20, r1
   10c36:	51 05       	cpc	r21, r1
   10c38:	09 f0       	breq	.+2      	; 0x10c3c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x88>
   10c3a:	13 c1       	rjmp	.+550    	; 0x10e62 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2ae>
   10c3c:	01 97       	sbiw	r24, 0x01	; 1
   10c3e:	83 30       	cpi	r24, 0x03	; 3
   10c40:	91 05       	cpc	r25, r1
   10c42:	08 f0       	brcs	.+2      	; 0x10c46 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x92>
   10c44:	0c c1       	rjmp	.+536    	; 0x10e5e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2aa>
   10c46:	88 0f       	add	r24, r24
   10c48:	99 1f       	adc	r25, r25
   10c4a:	fc 01       	movw	r30, r24
   10c4c:	e0 5b       	subi	r30, 0xB0	; 176
   10c4e:	fd 4f       	sbci	r31, 0xFD	; 253
   10c50:	90 81       	ld	r25, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:771
				break;
		 	case 3 : 
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
   10c52:	30 91 e0 0d 	lds	r19, 0x0DE0	; 0x800de0 <my_lcd+0x28>
   10c56:	40 91 e1 0d 	lds	r20, 0x0DE1	; 0x800de1 <my_lcd+0x29>
   10c5a:	8c 91       	ld	r24, X
   10c5c:	28 23       	and	r18, r24
   10c5e:	2c 93       	st	X, r18
   10c60:	42 b9       	out	0x02, r20	; 2
   10c62:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10c66:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10c6a:	80 81       	ld	r24, Z
   10c6c:	20 91 f4 0d 	lds	r18, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   10c70:	82 23       	and	r24, r18
   10c72:	80 83       	st	Z, r24
   10c74:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10c78:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10c7c:	80 81       	ld	r24, Z
   10c7e:	20 91 f0 0d 	lds	r18, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   10c82:	82 2b       	or	r24, r18
   10c84:	80 83       	st	Z, r24
   10c86:	32 b9       	out	0x02, r19	; 2
   10c88:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10c8c:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10c90:	80 81       	ld	r24, Z
   10c92:	20 91 f4 0d 	lds	r18, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   10c96:	82 23       	and	r24, r18
   10c98:	80 83       	st	Z, r24
   10c9a:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10c9e:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10ca2:	80 81       	ld	r24, Z
   10ca4:	20 91 f0 0d 	lds	r18, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   10ca8:	82 2b       	or	r24, r18
   10caa:	80 83       	st	Z, r24
   10cac:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   10cb0:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   10cb4:	80 81       	ld	r24, Z
   10cb6:	20 91 ef 0d 	lds	r18, 0x0DEF	; 0x800def <my_lcd+0x37>
   10cba:	82 2b       	or	r24, r18
   10cbc:	80 83       	st	Z, r24
   10cbe:	80 e1       	ldi	r24, 0x10	; 16
   10cc0:	82 b9       	out	0x02, r24	; 2
   10cc2:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10cc6:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10cca:	80 81       	ld	r24, Z
   10ccc:	20 91 f4 0d 	lds	r18, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   10cd0:	82 23       	and	r24, r18
   10cd2:	80 83       	st	Z, r24
   10cd4:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10cd8:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10cdc:	80 81       	ld	r24, Z
   10cde:	20 91 f0 0d 	lds	r18, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   10ce2:	82 2b       	or	r24, r18
   10ce4:	80 83       	st	Z, r24
   10ce6:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   10ce8:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10cec:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10cf0:	80 81       	ld	r24, Z
   10cf2:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   10cf6:	89 23       	and	r24, r25
   10cf8:	80 83       	st	Z, r24
   10cfa:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10cfe:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10d02:	80 81       	ld	r24, Z
   10d04:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   10d08:	89 2b       	or	r24, r25
   10d0a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:874
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
   10d0c:	00 91 cc 0d 	lds	r16, 0x0DCC	; 0x800dcc <my_lcd+0x14>
   10d10:	10 91 cd 0d 	lds	r17, 0x0DCD	; 0x800dcd <my_lcd+0x15>
   10d14:	01 50       	subi	r16, 0x01	; 1
   10d16:	11 09       	sbc	r17, r1
   10d18:	20 91 ca 0d 	lds	r18, 0x0DCA	; 0x800dca <my_lcd+0x12>
   10d1c:	30 91 cb 0d 	lds	r19, 0x0DCB	; 0x800dcb <my_lcd+0x13>
   10d20:	21 50       	subi	r18, 0x01	; 1
   10d22:	31 09       	sbc	r19, r1
   10d24:	50 e0       	ldi	r21, 0x00	; 0
   10d26:	40 e0       	ldi	r20, 0x00	; 0
   10d28:	70 e0       	ldi	r23, 0x00	; 0
   10d2a:	60 e0       	ldi	r22, 0x00	; 0
   10d2c:	88 eb       	ldi	r24, 0xB8	; 184
   10d2e:	9d e0       	ldi	r25, 0x0D	; 13
   10d30:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:704
    if (offset < 0)
    {
        vsp += scrollines;          //keep in unsigned range
    }
    sea = top + scrollines - 1;
	if(lcd_driver == ID_932X)
   10d34:	80 91 d0 0d 	lds	r24, 0x0DD0	; 0x800dd0 <my_lcd+0x18>
   10d38:	90 91 d1 0d 	lds	r25, 0x0DD1	; 0x800dd1 <my_lcd+0x19>
   10d3c:	89 2b       	or	r24, r25
   10d3e:	09 f0       	breq	.+2      	; 0x10d42 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x18e>
   10d40:	9e c1       	rjmp	.+828    	; 0x1107e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:706
	{
		writeCmdData8(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
   10d42:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   10d46:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   10d4a:	80 81       	ld	r24, Z
   10d4c:	90 91 f3 0d 	lds	r25, 0x0DF3	; 0x800df3 <my_lcd+0x3b>
   10d50:	89 23       	and	r24, r25
   10d52:	80 83       	st	Z, r24
   10d54:	80 91 dc 0d 	lds	r24, 0x0DDC	; 0x800ddc <my_lcd+0x24>
   10d58:	82 b9       	out	0x02, r24	; 2
   10d5a:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10d5e:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10d62:	80 81       	ld	r24, Z
   10d64:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   10d68:	89 23       	and	r24, r25
   10d6a:	80 83       	st	Z, r24
   10d6c:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10d70:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10d74:	80 81       	ld	r24, Z
   10d76:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   10d7a:	89 2b       	or	r24, r25
   10d7c:	80 83       	st	Z, r24
   10d7e:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   10d82:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   10d86:	80 81       	ld	r24, Z
   10d88:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <my_lcd+0x37>
   10d8c:	89 2b       	or	r24, r25
   10d8e:	80 83       	st	Z, r24
   10d90:	83 e0       	ldi	r24, 0x03	; 3
   10d92:	82 b9       	out	0x02, r24	; 2
   10d94:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10d98:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10d9c:	80 81       	ld	r24, Z
   10d9e:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   10da2:	89 23       	and	r24, r25
   10da4:	80 83       	st	Z, r24
   10da6:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10daa:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10dae:	80 81       	ld	r24, Z
   10db0:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   10db4:	89 2b       	or	r24, r25
   10db6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:707
        writeCmdData8(SC2, vsp);        //VL#
   10db8:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   10dbc:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   10dc0:	80 81       	ld	r24, Z
   10dc2:	90 91 f3 0d 	lds	r25, 0x0DF3	; 0x800df3 <my_lcd+0x3b>
   10dc6:	89 23       	and	r24, r25
   10dc8:	80 83       	st	Z, r24
   10dca:	80 91 de 0d 	lds	r24, 0x0DDE	; 0x800dde <my_lcd+0x26>
   10dce:	82 b9       	out	0x02, r24	; 2
   10dd0:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10dd4:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10dd8:	80 81       	ld	r24, Z
   10dda:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   10dde:	89 23       	and	r24, r25
   10de0:	80 83       	st	Z, r24
   10de2:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10de6:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10dea:	80 81       	ld	r24, Z
   10dec:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   10df0:	89 2b       	or	r24, r25
   10df2:	80 83       	st	Z, r24
   10df4:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   10df8:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   10dfc:	80 81       	ld	r24, Z
   10dfe:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <my_lcd+0x37>
   10e02:	89 2b       	or	r24, r25
   10e04:	80 83       	st	Z, r24
   10e06:	12 b8       	out	0x02, r1	; 2
   10e08:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10e0c:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10e10:	80 81       	ld	r24, Z
   10e12:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   10e16:	89 23       	and	r24, r25
   10e18:	80 83       	st	Z, r24
   10e1a:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10e1e:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10e22:	80 81       	ld	r24, Z
   10e24:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   10e28:	89 2b       	or	r24, r25
   10e2a:	80 83       	st	Z, r24
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.74():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:876
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
	CS_IDLE;
   10e2c:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x2e>
   10e30:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x2f>
   10e34:	80 81       	ld	r24, Z
   10e36:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x36>
   10e3a:	89 2b       	or	r24, r25
   10e3c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:877
}
   10e3e:	26 96       	adiw	r28, 0x06	; 6
   10e40:	0f b6       	in	r0, 0x3f	; 63
   10e42:	f8 94       	cli
   10e44:	de bf       	out	0x3e, r29	; 62
   10e46:	0f be       	out	0x3f, r0	; 63
   10e48:	cd bf       	out	0x3d, r28	; 61
   10e4a:	df 91       	pop	r29
   10e4c:	cf 91       	pop	r28
   10e4e:	1f 91       	pop	r17
   10e50:	0f 91       	pop	r16
   10e52:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    width = (rotation & 1) ? HEIGHT : WIDTH;
   10e54:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <my_lcd+0xe>
   10e58:	90 91 c7 0d 	lds	r25, 0x0DC7	; 0x800dc7 <my_lcd+0xf>
   10e5c:	c2 ce       	rjmp	.-636    	; 0x10be2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:756
    height = (rotation & 1) ? WIDTH : HEIGHT;
	CS_ACTIVE;
	if(lcd_driver == ID_932X)
	{
		uint16_t val;
		switch(rotation) 
   10e5e:	90 e3       	ldi	r25, 0x30	; 48
   10e60:	f8 ce       	rjmp	.-528    	; 0x10c52 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:773
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
   10e62:	46 30       	cpi	r20, 0x06	; 6
   10e64:	51 05       	cpc	r21, r1
   10e66:	99 f5       	brne	.+102    	; 0x10ece <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x31a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:782
		{
			case 0: 
				val = 0xD0; //0 degree 
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
   10e68:	f0 ea       	ldi	r31, 0xA0	; 160
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   10e6a:	81 30       	cpi	r24, 0x01	; 1
   10e6c:	91 05       	cpc	r25, r1
   10e6e:	51 f0       	breq	.+20     	; 0x10e84 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:779
		{
			case 0: 
				val = 0xD0; //0 degree 
   10e70:	f0 ed       	ldi	r31, 0xD0	; 208
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   10e72:	81 30       	cpi	r24, 0x01	; 1
   10e74:	91 05       	cpc	r25, r1
   10e76:	30 f0       	brcs	.+12     	; 0x10e84 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:785
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
				break;
		 	case 2: 
				val = 0x00; //180 degree 
   10e78:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   10e7a:	82 30       	cpi	r24, 0x02	; 2
   10e7c:	91 05       	cpc	r25, r1
   10e7e:	11 f0       	breq	.+4      	; 0x10e84 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
   10e80:	03 97       	sbiw	r24, 0x03	; 3
   10e82:	19 f1       	breq	.+70     	; 0x10eca <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x316>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:791
				break;
		 	case 3: 
				val = 0x60; //270 degree
				break;			
		}
		writeCmdData8(MD, val);
   10e84:	8c 91       	ld	r24, X
   10e86:	28 23       	and	r18, r24
   10e88:	2c 93       	st	X, r18
   10e8a:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <my_lcd+0x28>
   10e8e:	82 b9       	out	0x02, r24	; 2
   10e90:	a0 91 ea 0d 	lds	r26, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10e94:	b0 91 eb 0d 	lds	r27, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10e98:	8c 91       	ld	r24, X
   10e9a:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   10e9e:	89 23       	and	r24, r25
   10ea0:	8c 93       	st	X, r24
   10ea2:	a0 91 ea 0d 	lds	r26, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10ea6:	b0 91 eb 0d 	lds	r27, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10eaa:	8c 91       	ld	r24, X
   10eac:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   10eb0:	89 2b       	or	r24, r25
   10eb2:	8c 93       	st	X, r24
   10eb4:	a0 91 e8 0d 	lds	r26, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   10eb8:	b0 91 e9 0d 	lds	r27, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   10ebc:	8c 91       	ld	r24, X
   10ebe:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <my_lcd+0x37>
   10ec2:	89 2b       	or	r24, r25
   10ec4:	8c 93       	st	X, r24
   10ec6:	f2 b9       	out	0x02, r31	; 2
   10ec8:	0f cf       	rjmp	.-482    	; 0x10ce8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:788
				break;
		 	case 2: 
				val = 0x00; //180 degree 
				break;
		 	case 3: 
				val = 0x60; //270 degree
   10eca:	f0 e6       	ldi	r31, 0x60	; 96
   10ecc:	db cf       	rjmp	.-74     	; 0x10e84 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:793
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
   10ece:	48 30       	cpi	r20, 0x08	; 8
   10ed0:	51 05       	cpc	r21, r1
   10ed2:	99 f5       	brne	.+102    	; 0x10f3a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x386>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:802
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
   10ed4:	eb e2       	ldi	r30, 0x2B	; 43
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   10ed6:	81 30       	cpi	r24, 0x01	; 1
   10ed8:	91 05       	cpc	r25, r1
   10eda:	51 f0       	breq	.+20     	; 0x10ef0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:799
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
   10edc:	e9 e0       	ldi	r30, 0x09	; 9
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   10ede:	81 30       	cpi	r24, 0x01	; 1
   10ee0:	91 05       	cpc	r25, r1
   10ee2:	30 f0       	brcs	.+12     	; 0x10ef0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:805
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
   10ee4:	ea e0       	ldi	r30, 0x0A	; 10
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   10ee6:	82 30       	cpi	r24, 0x02	; 2
   10ee8:	91 05       	cpc	r25, r1
   10eea:	11 f0       	breq	.+4      	; 0x10ef0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
   10eec:	03 97       	sbiw	r24, 0x03	; 3
   10eee:	19 f1       	breq	.+70     	; 0x10f36 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x382>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:811
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
		     	break;
		 }
		 writeCmdData8(MD, val); 
   10ef0:	8c 91       	ld	r24, X
   10ef2:	28 23       	and	r18, r24
   10ef4:	2c 93       	st	X, r18
   10ef6:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <my_lcd+0x28>
   10efa:	82 b9       	out	0x02, r24	; 2
   10efc:	a0 91 ea 0d 	lds	r26, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10f00:	b0 91 eb 0d 	lds	r27, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10f04:	8c 91       	ld	r24, X
   10f06:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   10f0a:	89 23       	and	r24, r25
   10f0c:	8c 93       	st	X, r24
   10f0e:	a0 91 ea 0d 	lds	r26, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10f12:	b0 91 eb 0d 	lds	r27, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10f16:	8c 91       	ld	r24, X
   10f18:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   10f1c:	89 2b       	or	r24, r25
   10f1e:	8c 93       	st	X, r24
   10f20:	a0 91 e8 0d 	lds	r26, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   10f24:	b0 91 e9 0d 	lds	r27, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   10f28:	8c 91       	ld	r24, X
   10f2a:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <my_lcd+0x37>
   10f2e:	89 2b       	or	r24, r25
   10f30:	8c 93       	st	X, r24
   10f32:	e2 b9       	out	0x02, r30	; 2
   10f34:	d9 ce       	rjmp	.-590    	; 0x10ce8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:808
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
   10f36:	e8 e2       	ldi	r30, 0x28	; 40
   10f38:	db cf       	rjmp	.-74     	; 0x10ef0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:814
		     	break;
		 }
		 writeCmdData8(MD, val); 

	}
	else if(lcd_driver == ID_9486)
   10f3a:	45 30       	cpi	r20, 0x05	; 5
   10f3c:	51 05       	cpc	r21, r1
   10f3e:	a1 f5       	brne	.+104    	; 0x10fa8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3f4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:817
	{
		uint8_t val;
		switch (rotation) 
   10f40:	81 30       	cpi	r24, 0x01	; 1
   10f42:	91 05       	cpc	r25, r1
   10f44:	49 f1       	breq	.+82     	; 0x10f98 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3e4>
   10f46:	70 f1       	brcs	.+92     	; 0x10fa4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3f0>
   10f48:	82 30       	cpi	r24, 0x02	; 2
   10f4a:	91 05       	cpc	r25, r1
   10f4c:	39 f1       	breq	.+78     	; 0x10f9c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3e8>
   10f4e:	03 97       	sbiw	r24, 0x03	; 3
   10f50:	39 f1       	breq	.+78     	; 0x10fa0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3ec>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:832
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   10f52:	8c 91       	ld	r24, X
   10f54:	28 23       	and	r18, r24
   10f56:	2c 93       	st	X, r18
   10f58:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <my_lcd+0x28>
   10f5c:	82 b9       	out	0x02, r24	; 2
   10f5e:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10f62:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10f66:	80 81       	ld	r24, Z
   10f68:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   10f6c:	89 23       	and	r24, r25
   10f6e:	80 83       	st	Z, r24
   10f70:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10f74:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10f78:	80 81       	ld	r24, Z
   10f7a:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   10f7e:	89 2b       	or	r24, r25
   10f80:	80 83       	st	Z, r24
   10f82:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   10f86:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   10f8a:	80 81       	ld	r24, Z
   10f8c:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <my_lcd+0x37>
   10f90:	89 2b       	or	r24, r25
   10f92:	80 83       	st	Z, r24
   10f94:	72 b9       	out	0x02, r23	; 2
   10f96:	a8 ce       	rjmp	.-688    	; 0x10ce8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:823
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MV | ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR ; //90 degree 
   10f98:	78 e7       	ldi	r23, 0x78	; 120
   10f9a:	db cf       	rjmp	.-74     	; 0x10f52 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:826
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MX |ILI9341_MADCTL_BGR; //180 degree 
   10f9c:	78 ec       	ldi	r23, 0xC8	; 200
   10f9e:	d9 cf       	rjmp	.-78     	; 0x10f52 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:829
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   10fa0:	78 ea       	ldi	r23, 0xA8	; 168
   10fa2:	d7 cf       	rjmp	.-82     	; 0x10f52 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:820
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
   10fa4:	78 e0       	ldi	r23, 0x08	; 8
   10fa6:	d5 cf       	rjmp	.-86     	; 0x10f52 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:834
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
	else if(lcd_driver == ID_9488)
   10fa8:	47 30       	cpi	r20, 0x07	; 7
   10faa:	51 05       	cpc	r21, r1
   10fac:	a1 f5       	brne	.+104    	; 0x11016 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x462>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:837
	{
		uint8_t val;
		switch (rotation) 
   10fae:	81 30       	cpi	r24, 0x01	; 1
   10fb0:	91 05       	cpc	r25, r1
   10fb2:	49 f1       	breq	.+82     	; 0x11006 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x452>
   10fb4:	70 f1       	brcs	.+92     	; 0x11012 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x45e>
   10fb6:	82 30       	cpi	r24, 0x02	; 2
   10fb8:	91 05       	cpc	r25, r1
   10fba:	39 f1       	breq	.+78     	; 0x1100a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x456>
   10fbc:	03 97       	sbiw	r24, 0x03	; 3
   10fbe:	39 f1       	breq	.+78     	; 0x1100e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x45a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:852
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   10fc0:	8c 91       	ld	r24, X
   10fc2:	28 23       	and	r18, r24
   10fc4:	2c 93       	st	X, r18
   10fc6:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <my_lcd+0x28>
   10fca:	82 b9       	out	0x02, r24	; 2
   10fcc:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10fd0:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10fd4:	80 81       	ld	r24, Z
   10fd6:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   10fda:	89 23       	and	r24, r25
   10fdc:	80 83       	st	Z, r24
   10fde:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   10fe2:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   10fe6:	80 81       	ld	r24, Z
   10fe8:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   10fec:	89 2b       	or	r24, r25
   10fee:	80 83       	st	Z, r24
   10ff0:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   10ff4:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   10ff8:	80 81       	ld	r24, Z
   10ffa:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <my_lcd+0x37>
   10ffe:	89 2b       	or	r24, r25
   11000:	80 83       	st	Z, r24
   11002:	62 b9       	out	0x02, r22	; 2
   11004:	71 ce       	rjmp	.-798    	; 0x10ce8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:843
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //90 degree 
   11006:	68 ea       	ldi	r22, 0xA8	; 168
   11008:	db cf       	rjmp	.-74     	; 0x10fc0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:846
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR; //180 degree 
   1100a:	68 e1       	ldi	r22, 0x18	; 24
   1100c:	d9 cf       	rjmp	.-78     	; 0x10fc0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:849
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   1100e:	68 e7       	ldi	r22, 0x78	; 120
   11010:	d7 cf       	rjmp	.-82     	; 0x10fc0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:840
	{
		uint8_t val;
		switch (rotation) 
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
   11012:	68 ec       	ldi	r22, 0xC8	; 200
   11014:	d5 cf       	rjmp	.-86     	; 0x10fc0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:857
		 writeCmdData8(MD, val); 
	}
	else
	{
		uint8_t val;
		switch (rotation) 
   11016:	81 30       	cpi	r24, 0x01	; 1
   11018:	91 05       	cpc	r25, r1
   1101a:	49 f1       	breq	.+82     	; 0x1106e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4ba>
   1101c:	70 f1       	brcs	.+92     	; 0x1107a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4c6>
   1101e:	82 30       	cpi	r24, 0x02	; 2
   11020:	91 05       	cpc	r25, r1
   11022:	39 f1       	breq	.+78     	; 0x11072 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4be>
   11024:	03 97       	sbiw	r24, 0x03	; 3
   11026:	39 f1       	breq	.+78     	; 0x11076 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4c2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   11028:	8c 91       	ld	r24, X
   1102a:	28 23       	and	r18, r24
   1102c:	2c 93       	st	X, r18
   1102e:	80 91 e0 0d 	lds	r24, 0x0DE0	; 0x800de0 <my_lcd+0x28>
   11032:	82 b9       	out	0x02, r24	; 2
   11034:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   11038:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   1103c:	80 81       	ld	r24, Z
   1103e:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   11042:	89 23       	and	r24, r25
   11044:	80 83       	st	Z, r24
   11046:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   1104a:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   1104e:	80 81       	ld	r24, Z
   11050:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   11054:	89 2b       	or	r24, r25
   11056:	80 83       	st	Z, r24
   11058:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   1105c:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   11060:	80 81       	ld	r24, Z
   11062:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <my_lcd+0x37>
   11066:	89 2b       	or	r24, r25
   11068:	80 83       	st	Z, r24
   1106a:	32 b9       	out	0x02, r19	; 2
   1106c:	3d ce       	rjmp	.-902    	; 0x10ce8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:863
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //90 degree 
   1106e:	38 e2       	ldi	r19, 0x28	; 40
   11070:	db cf       	rjmp	.-74     	; 0x11028 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:866
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_ML |ILI9341_MADCTL_BGR; //180 degree 
   11072:	38 e9       	ldi	r19, 0x98	; 152
   11074:	d9 cf       	rjmp	.-78     	; 0x11028 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:869
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   11076:	38 ef       	ldi	r19, 0xF8	; 248
   11078:	d7 cf       	rjmp	.-82     	; 0x11028 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:860
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
   1107a:	38 e4       	ldi	r19, 0x48	; 72
   1107c:	d5 cf       	rjmp	.-86     	; 0x11028 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:875
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
   1107e:	80 91 c8 0d 	lds	r24, 0x0DC8	; 0x800dc8 <my_lcd+0x10>
   11082:	90 91 c9 0d 	lds	r25, 0x0DC9	; 0x800dc9 <my_lcd+0x11>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:712
        writeCmdData8(SC2, vsp);        //VL#
	}
	else
	{
  		uint8_t d[6];           // for multi-byte parameters
  		d[0] = top >> 8;        //TFA
   11086:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:713
  		d[1] = top;
   11088:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:714
  		d[2] = scrollines >> 8; //VSA
   1108a:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:715
  		d[3] = scrollines;
   1108c:	8c 83       	std	Y+4, r24	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:716
  		d[4] = bfa >> 8;        //BFA
   1108e:	1d 82       	std	Y+5, r1	; 0x05
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:717
  		d[5] = bfa;
   11090:	1e 82       	std	Y+6, r1	; 0x06
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:718
		Push_Command(SC1, d, 6);
   11092:	60 91 dc 0d 	lds	r22, 0x0DDC	; 0x800ddc <my_lcd+0x24>
   11096:	70 91 dd 0d 	lds	r23, 0x0DDD	; 0x800ddd <my_lcd+0x25>
   1109a:	26 e0       	ldi	r18, 0x06	; 6
   1109c:	ae 01       	movw	r20, r28
   1109e:	4f 5f       	subi	r20, 0xFF	; 255
   110a0:	5f 4f       	sbci	r21, 0xFF	; 255
   110a2:	88 eb       	ldi	r24, 0xB8	; 184
   110a4:	9d e0       	ldi	r25, 0x0D	; 13
   110a6:	0e 94 39 37 	call	0x6e72	; 0x6e72 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:719
		d[0] = vsp >> 8;        //VSP
   110aa:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:720
  		d[1] = vsp;
   110ac:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:721
		Push_Command(SC2, d, 2);
   110ae:	60 91 de 0d 	lds	r22, 0x0DDE	; 0x800dde <my_lcd+0x26>
   110b2:	70 91 df 0d 	lds	r23, 0x0DDF	; 0x800ddf <my_lcd+0x27>
   110b6:	22 e0       	ldi	r18, 0x02	; 2
   110b8:	ae 01       	movw	r20, r28
   110ba:	4f 5f       	subi	r20, 0xFF	; 255
   110bc:	5f 4f       	sbci	r21, 0xFF	; 255
   110be:	88 eb       	ldi	r24, 0xB8	; 184
   110c0:	9d e0       	ldi	r25, 0x0D	; 13
   110c2:	0e 94 39 37 	call	0x6e72	; 0x6e72 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:722
		if(lcd_driver == ID_7575)
   110c6:	80 91 d0 0d 	lds	r24, 0x0DD0	; 0x800dd0 <my_lcd+0x18>
   110ca:	90 91 d1 0d 	lds	r25, 0x0DD1	; 0x800dd1 <my_lcd+0x19>
   110ce:	01 97       	sbiw	r24, 0x01	; 1
   110d0:	61 f4       	brne	.+24     	; 0x110ea <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x536>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:724
		{
			d[0] = (offset != 0) ? 0x08:0;
   110d2:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:725
			Push_Command(0x01, d, 1);
   110d4:	21 e0       	ldi	r18, 0x01	; 1
   110d6:	ae 01       	movw	r20, r28
   110d8:	4f 5f       	subi	r20, 0xFF	; 255
   110da:	5f 4f       	sbci	r21, 0xFF	; 255
   110dc:	61 e0       	ldi	r22, 0x01	; 1
   110de:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:729
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
   110e0:	88 eb       	ldi	r24, 0xB8	; 184
   110e2:	9d e0       	ldi	r25, 0x0D	; 13
   110e4:	0e 94 39 37 	call	0x6e72	; 0x6e72 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   110e8:	a1 ce       	rjmp	.-702    	; 0x10e2c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x278>
   110ea:	20 e0       	ldi	r18, 0x00	; 0
   110ec:	50 e0       	ldi	r21, 0x00	; 0
   110ee:	40 e0       	ldi	r20, 0x00	; 0
   110f0:	63 e1       	ldi	r22, 0x13	; 19
   110f2:	70 e0       	ldi	r23, 0x00	; 0
   110f4:	f5 cf       	rjmp	.-22     	; 0x110e0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x52c>

000110f6 <log_error(PubSubClient*, char*) [clone .constprop.60]>:
_Z9log_errorP12PubSubClientPc.constprop.60():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:450
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    mqtt_log_cnt = 0;
  }
}
///////////////////////////////////////////////////////////////////////////
void log_error(PubSubClient *mqtt_client, char *log)
   110f6:	0f 93       	push	r16
   110f8:	1f 93       	push	r17
   110fa:	cf 93       	push	r28
   110fc:	df 93       	push	r29
   110fe:	cd b7       	in	r28, 0x3d	; 61
   11100:	de b7       	in	r29, 0x3e	; 62
   11102:	60 97       	sbiw	r28, 0x10	; 16
   11104:	0f b6       	in	r0, 0x3f	; 63
   11106:	f8 94       	cli
   11108:	de bf       	out	0x3e, r29	; 62
   1110a:	0f be       	out	0x3f, r0	; 63
   1110c:	cd bf       	out	0x3d, r28	; 61
   1110e:	8c 01       	movw	r16, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:453
{
  char topic[16];
  strcpy(topic, "log-app");
   11110:	64 ef       	ldi	r22, 0xF4	; 244
   11112:	76 e0       	ldi	r23, 0x06	; 6
   11114:	ce 01       	movw	r24, r28
   11116:	01 96       	adiw	r24, 0x01	; 1
   11118:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:454
  send_mqtt_general_payload(mqtt_client, topic, log);
   1111c:	a8 01       	movw	r20, r16
   1111e:	be 01       	movw	r22, r28
   11120:	6f 5f       	subi	r22, 0xFF	; 255
   11122:	7f 4f       	sbci	r23, 0xFF	; 255
   11124:	80 e1       	ldi	r24, 0x10	; 16
   11126:	9e e0       	ldi	r25, 0x0E	; 14
   11128:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:455
}
   1112c:	60 96       	adiw	r28, 0x10	; 16
   1112e:	0f b6       	in	r0, 0x3f	; 63
   11130:	f8 94       	cli
   11132:	de bf       	out	0x3e, r29	; 62
   11134:	0f be       	out	0x3f, r0	; 63
   11136:	cd bf       	out	0x3d, r28	; 61
   11138:	df 91       	pop	r29
   1113a:	cf 91       	pop	r28
   1113c:	1f 91       	pop	r17
   1113e:	0f 91       	pop	r16
   11140:	08 95       	ret

00011142 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>:
_Z10parseBytesPKccPhii.constprop.59():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:100
  data.f = x;
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
   11142:	cf 92       	push	r12
   11144:	df 92       	push	r13
   11146:	ef 92       	push	r14
   11148:	ff 92       	push	r15
   1114a:	0f 93       	push	r16
   1114c:	1f 93       	push	r17
   1114e:	cf 93       	push	r28
   11150:	df 93       	push	r29
   11152:	8b 01       	movw	r16, r22
   11154:	7b 01       	movw	r14, r22
   11156:	e4 0e       	add	r14, r20
   11158:	f5 1e       	adc	r15, r21
   1115a:	c9 ed       	ldi	r28, 0xD9	; 217
   1115c:	da e0       	ldi	r29, 0x0A	; 10
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   1115e:	c8 2e       	mov	r12, r24
   11160:	88 0f       	add	r24, r24
   11162:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   11164:	4a e0       	ldi	r20, 0x0A	; 10
   11166:	50 e0       	ldi	r21, 0x00	; 0
   11168:	70 e0       	ldi	r23, 0x00	; 0
   1116a:	60 e0       	ldi	r22, 0x00	; 0
   1116c:	ce 01       	movw	r24, r28
   1116e:	0e 94 05 a9 	call	0x1520a	; 0x1520a <strtoul>
   11172:	f8 01       	movw	r30, r16
   11174:	61 93       	st	Z+, r22
   11176:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
    str = strchr(str, sep);               // Find next separator
   11178:	b6 01       	movw	r22, r12
   1117a:	ce 01       	movw	r24, r28
   1117c:	0e 94 b0 b6 	call	0x16d60	; 0x16d60 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:104
    if (str == NULL || *str == '\0') {
   11180:	00 97       	sbiw	r24, 0x00	; 0
   11182:	49 f0       	breq	.+18     	; 0x11196 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x54>
   11184:	fc 01       	movw	r30, r24
   11186:	20 81       	ld	r18, Z
   11188:	22 23       	and	r18, r18
   1118a:	29 f0       	breq	.+10     	; 0x11196 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x54>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
   1118c:	ec 01       	movw	r28, r24
   1118e:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:101
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   11190:	0e 15       	cp	r16, r14
   11192:	1f 05       	cpc	r17, r15
   11194:	39 f7       	brne	.-50     	; 0x11164 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x22>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
   11196:	df 91       	pop	r29
   11198:	cf 91       	pop	r28
   1119a:	1f 91       	pop	r17
   1119c:	0f 91       	pop	r16
   1119e:	ff 90       	pop	r15
   111a0:	ef 90       	pop	r14
   111a2:	df 90       	pop	r13
   111a4:	cf 90       	pop	r12
   111a6:	08 95       	ret

000111a8 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>:
_ZN10W5500Class13getTXFreeSizeEh.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:43
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
  }
}

uint16_t W5500Class::getTXFreeSize(SOCKET s)
   111a8:	ff 92       	push	r15
   111aa:	0f 93       	push	r16
   111ac:	1f 93       	push	r17
   111ae:	cf 93       	push	r28
   111b0:	df 93       	push	r29
   111b2:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:45
{
    uint16_t val=0, val1=0;
   111b4:	10 e0       	ldi	r17, 0x00	; 0
   111b6:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:47
    do {
        val1 = readSnTX_FSR(s);
   111b8:	8f 2d       	mov	r24, r15
   111ba:	0e 94 d1 82 	call	0x105a2	; 0x105a2 <W5500Class::readSnTX_FSR(unsigned char)>
   111be:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:48
        if (val1 != 0)
   111c0:	89 2b       	or	r24, r25
   111c2:	21 f0       	breq	.+8      	; 0x111cc <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:49
            val = readSnTX_FSR(s);
   111c4:	8f 2d       	mov	r24, r15
   111c6:	0e 94 d1 82 	call	0x105a2	; 0x105a2 <W5500Class::readSnTX_FSR(unsigned char)>
   111ca:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:51
    } 
    while (val != val1);
   111cc:	c0 17       	cp	r28, r16
   111ce:	d1 07       	cpc	r29, r17
   111d0:	99 f7       	brne	.-26     	; 0x111b8 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:53
    return val;
}
   111d2:	ce 01       	movw	r24, r28
   111d4:	df 91       	pop	r29
   111d6:	cf 91       	pop	r28
   111d8:	1f 91       	pop	r17
   111da:	0f 91       	pop	r16
   111dc:	ff 90       	pop	r15
   111de:	08 95       	ret

000111e0 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>:
_ZN10W5500Class17getRXReceivedSizeEh.constprop.23():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:55

uint16_t W5500Class::getRXReceivedSize(SOCKET s)
   111e0:	ff 92       	push	r15
   111e2:	0f 93       	push	r16
   111e4:	1f 93       	push	r17
   111e6:	cf 93       	push	r28
   111e8:	df 93       	push	r29
   111ea:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:57
{
    uint16_t val=0,val1=0;
   111ec:	10 e0       	ldi	r17, 0x00	; 0
   111ee:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:59
    do {
        val1 = readSnRX_RSR(s);
   111f0:	8f 2d       	mov	r24, r15
   111f2:	0e 94 b9 82 	call	0x10572	; 0x10572 <W5500Class::readSnRX_RSR(unsigned char)>
   111f6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:60
        if (val1 != 0)
   111f8:	89 2b       	or	r24, r25
   111fa:	21 f0       	breq	.+8      	; 0x11204 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:61
            val = readSnRX_RSR(s);
   111fc:	8f 2d       	mov	r24, r15
   111fe:	0e 94 b9 82 	call	0x10572	; 0x10572 <W5500Class::readSnRX_RSR(unsigned char)>
   11202:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:63
    } 
    while (val != val1);
   11204:	c0 17       	cp	r28, r16
   11206:	d1 07       	cpc	r29, r17
   11208:	99 f7       	brne	.-26     	; 0x111f0 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:65
    return val;
}
   1120a:	ce 01       	movw	r24, r28
   1120c:	df 91       	pop	r29
   1120e:	cf 91       	pop	r28
   11210:	1f 91       	pop	r17
   11212:	0f 91       	pop	r16
   11214:	ff 90       	pop	r15
   11216:	08 95       	ret

00011218 <turnOffPWM.lto_priv.233>:
turnOffPWM.lto_priv.233():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   11218:	82 50       	subi	r24, 0x02	; 2
   1121a:	82 31       	cpi	r24, 0x12	; 18
   1121c:	08 f0       	brcs	.+2      	; 0x11220 <turnOffPWM.lto_priv.233+0x8>
   1121e:	5f c0       	rjmp	.+190    	; 0x112de <turnOffPWM.lto_priv.233+0xc6>
   11220:	e8 2f       	mov	r30, r24
   11222:	f0 e0       	ldi	r31, 0x00	; 0
   11224:	88 27       	eor	r24, r24
   11226:	e8 5e       	subi	r30, 0xE8	; 232
   11228:	f6 47       	sbci	r31, 0x76	; 118
   1122a:	8f 4f       	sbci	r24, 0xFF	; 255
   1122c:	0c 94 ae b5 	jmp	0x16b5c	; 0x16b5c <__tablejump2__>
   11230:	6c 89       	ldd	r22, Y+20	; 0x14
   11232:	70 89       	ldd	r23, Z+16	; 0x10
   11234:	2a 89       	ldd	r18, Y+18	; 0x12
   11236:	30 89       	ldd	r19, Z+16	; 0x10
   11238:	34 89       	ldd	r19, Z+20	; 0x14
   1123a:	6f 89       	ldd	r22, Y+23	; 0x17
   1123c:	38 89       	ldd	r19, Y+16	; 0x10
   1123e:	3e 89       	ldd	r19, Y+22	; 0x16
   11240:	42 89       	ldd	r20, Z+18	; 0x12
   11242:	48 89       	ldd	r20, Y+16	; 0x10
   11244:	4c 89       	ldd	r20, Y+20	; 0x14
   11246:	50 89       	ldd	r21, Z+16	; 0x10
   11248:	56 89       	ldd	r21, Z+22	; 0x16
   1124a:	5a 89       	ldd	r21, Y+18	; 0x12
   1124c:	6f 89       	ldd	r22, Y+23	; 0x17
   1124e:	5e 89       	ldd	r21, Y+22	; 0x16
   11250:	64 89       	ldd	r22, Z+20	; 0x14
   11252:	68 89       	ldd	r22, Y+16	; 0x10
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   11254:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   11258:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   1125a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1125e:	08 95       	ret
   11260:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   11264:	8f 7d       	andi	r24, 0xDF	; 223
   11266:	f9 cf       	rjmp	.-14     	; 0x1125a <turnOffPWM.lto_priv.233+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   11268:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1126c:	87 7f       	andi	r24, 0xF7	; 247
   1126e:	f5 cf       	rjmp	.-22     	; 0x1125a <turnOffPWM.lto_priv.233+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   11270:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   11274:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   11276:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1127a:	08 95       	ret
   1127c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   11280:	8f 7d       	andi	r24, 0xDF	; 223
   11282:	f9 cf       	rjmp	.-14     	; 0x11276 <turnOffPWM.lto_priv.233+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   11284:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   11288:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   1128a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1128e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   11290:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   11294:	8f 7d       	andi	r24, 0xDF	; 223
   11296:	f9 cf       	rjmp	.-14     	; 0x1128a <turnOffPWM.lto_priv.233+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   11298:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1129c:	87 7f       	andi	r24, 0xF7	; 247
   1129e:	f5 cf       	rjmp	.-22     	; 0x1128a <turnOffPWM.lto_priv.233+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   112a0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   112a4:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   112a6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   112aa:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   112ac:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   112b0:	8f 7d       	andi	r24, 0xDF	; 223
   112b2:	f9 cf       	rjmp	.-14     	; 0x112a6 <turnOffPWM.lto_priv.233+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   112b4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   112b8:	87 7f       	andi	r24, 0xF7	; 247
   112ba:	f5 cf       	rjmp	.-22     	; 0x112a6 <turnOffPWM.lto_priv.233+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   112bc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   112c0:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   112c2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   112c6:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   112c8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   112cc:	8f 7d       	andi	r24, 0xDF	; 223
   112ce:	f9 cf       	rjmp	.-14     	; 0x112c2 <turnOffPWM.lto_priv.233+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   112d0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   112d4:	87 7f       	andi	r24, 0xF7	; 247
   112d6:	f5 cf       	rjmp	.-22     	; 0x112c2 <turnOffPWM.lto_priv.233+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   112d8:	84 b5       	in	r24, 0x24	; 36
   112da:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   112dc:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   112de:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   112e0:	84 b5       	in	r24, 0x24	; 36
   112e2:	8f 7d       	andi	r24, 0xDF	; 223
   112e4:	fb cf       	rjmp	.-10     	; 0x112dc <turnOffPWM.lto_priv.233+0xc4>

000112e6 <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   112e6:	1f 93       	push	r17
   112e8:	cf 93       	push	r28
   112ea:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   112ec:	28 2f       	mov	r18, r24
   112ee:	30 e0       	ldi	r19, 0x00	; 0
   112f0:	f9 01       	movw	r30, r18
   112f2:	e3 50       	subi	r30, 0x03	; 3
   112f4:	fa 4c       	sbci	r31, 0xCA	; 202
   112f6:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   112f8:	f9 01       	movw	r30, r18
   112fa:	e2 5c       	subi	r30, 0xC2	; 194
   112fc:	f4 4c       	sbci	r31, 0xC4	; 196
   112fe:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   11300:	f9 01       	movw	r30, r18
   11302:	ec 57       	subi	r30, 0x7C	; 124
   11304:	f4 4c       	sbci	r31, 0xC4	; 196
   11306:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   11308:	cc 23       	and	r28, r28
   1130a:	a9 f0       	breq	.+42     	; 0x11336 <digitalWrite+0x50>
   1130c:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   1130e:	81 11       	cpse	r24, r1
   11310:	0e 94 0c 89 	call	0x11218	; 0x11218 <turnOffPWM.lto_priv.233>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   11314:	ec 2f       	mov	r30, r28
   11316:	f0 e0       	ldi	r31, 0x00	; 0
   11318:	ee 0f       	add	r30, r30
   1131a:	ff 1f       	adc	r31, r31
   1131c:	ec 58       	subi	r30, 0x8C	; 140
   1131e:	f4 4c       	sbci	r31, 0xC4	; 196
   11320:	a5 91       	lpm	r26, Z+
   11322:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   11324:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
   11326:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   11328:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   1132a:	11 11       	cpse	r17, r1
   1132c:	08 c0       	rjmp	.+16     	; 0x1133e <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   1132e:	d0 95       	com	r29
   11330:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   11332:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   11334:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:212
}
   11336:	df 91       	pop	r29
   11338:	cf 91       	pop	r28
   1133a:	1f 91       	pop	r17
   1133c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   1133e:	de 2b       	or	r29, r30
   11340:	f8 cf       	rjmp	.-16     	; 0x11332 <digitalWrite+0x4c>

00011342 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>:
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:78
  endCommand();

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
   11342:	cf 92       	push	r12
   11344:	df 92       	push	r13
   11346:	ef 92       	push	r14
   11348:	ff 92       	push	r15
   1134a:	cf 93       	push	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
{
  if (address >= _capacity) {
   1134c:	c0 90 82 0c 	lds	r12, 0x0C82	; 0x800c82 <SRAM+0x4>
   11350:	d0 90 83 0c 	lds	r13, 0x0C83	; 0x800c83 <SRAM+0x5>
   11354:	e0 90 84 0c 	lds	r14, 0x0C84	; 0x800c84 <SRAM+0x6>
   11358:	f0 90 85 0c 	lds	r15, 0x0C85	; 0x800c85 <SRAM+0x7>
   1135c:	6c 15       	cp	r22, r12
   1135e:	7d 05       	cpc	r23, r13
   11360:	8e 05       	cpc	r24, r14
   11362:	9f 05       	cpc	r25, r15
   11364:	38 f5       	brcc	.+78     	; 0x113b4 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]+0x72>
   11366:	c4 2f       	mov	r28, r20
   11368:	6b 01       	movw	r12, r22
   1136a:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   1136c:	60 e0       	ldi	r22, 0x00	; 0
   1136e:	80 91 86 0c 	lds	r24, 0x0C86	; 0x800c86 <SRAM+0x8>
   11372:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   11376:	62 e0       	ldi	r22, 0x02	; 2
   11378:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <SRAM>
   1137c:	90 91 7f 0c 	lds	r25, 0x0C7F	; 0x800c7f <SRAM+0x1>
   11380:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   11384:	c7 01       	movw	r24, r14
   11386:	b6 01       	movw	r22, r12
   11388:	0e 94 fd 83 	call	0x107fa	; 0x107fa <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
   1138c:	6c 2f       	mov	r22, r28
   1138e:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <SRAM>
   11392:	90 91 7f 0c 	lds	r25, 0x0C7F	; 0x800c7f <SRAM+0x1>
   11396:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   1139a:	61 e0       	ldi	r22, 0x01	; 1
   1139c:	80 91 86 0c 	lds	r24, 0x0C86	; 0x800c86 <SRAM+0x8>
   113a0:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
   113a4:	81 e0       	ldi	r24, 0x01	; 1
   113a6:	90 e0       	ldi	r25, 0x00	; 0
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
  endCommand();
  return(1);
}
   113a8:	cf 91       	pop	r28
   113aa:	ff 90       	pop	r15
   113ac:	ef 90       	pop	r14
   113ae:	df 90       	pop	r13
   113b0:	cf 90       	pop	r12
   113b2:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   113b4:	90 e0       	ldi	r25, 0x00	; 0
   113b6:	80 e0       	ldi	r24, 0x00	; 0
   113b8:	f7 cf       	rjmp	.-18     	; 0x113a8 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]+0x66>

000113ba <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>:
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:65
void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
   113ba:	cf 92       	push	r12
   113bc:	df 92       	push	r13
   113be:	ef 92       	push	r14
   113c0:	ff 92       	push	r15
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
{
  if (address >= _capacity) {
   113c2:	c0 90 82 0c 	lds	r12, 0x0C82	; 0x800c82 <SRAM+0x4>
   113c6:	d0 90 83 0c 	lds	r13, 0x0C83	; 0x800c83 <SRAM+0x5>
   113ca:	e0 90 84 0c 	lds	r14, 0x0C84	; 0x800c84 <SRAM+0x6>
   113ce:	f0 90 85 0c 	lds	r15, 0x0C85	; 0x800c85 <SRAM+0x7>
   113d2:	6c 15       	cp	r22, r12
   113d4:	7d 05       	cpc	r23, r13
   113d6:	8e 05       	cpc	r24, r14
   113d8:	9f 05       	cpc	r25, r15
   113da:	28 f5       	brcc	.+74     	; 0x11426 <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]+0x6c>
   113dc:	6b 01       	movw	r12, r22
   113de:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   113e0:	60 e0       	ldi	r22, 0x00	; 0
   113e2:	80 91 86 0c 	lds	r24, 0x0C86	; 0x800c86 <SRAM+0x8>
   113e6:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   113ea:	63 e0       	ldi	r22, 0x03	; 3
   113ec:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <SRAM>
   113f0:	90 91 7f 0c 	lds	r25, 0x0C7F	; 0x800c7f <SRAM+0x1>
   113f4:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   113f8:	c7 01       	movw	r24, r14
   113fa:	b6 01       	movw	r22, r12
   113fc:	0e 94 fd 83 	call	0x107fa	; 0x107fa <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   11400:	6f ef       	ldi	r22, 0xFF	; 255
   11402:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <SRAM>
   11406:	90 91 7f 0c 	lds	r25, 0x0C7F	; 0x800c7f <SRAM+0x1>
   1140a:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
   1140e:	f8 2e       	mov	r15, r24
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   11410:	61 e0       	ldi	r22, 0x01	; 1
   11412:	80 91 86 0c 	lds	r24, 0x0C86	; 0x800c86 <SRAM+0x8>
   11416:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76
  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
  endCommand();

  return(ret);
}
   1141a:	8f 2d       	mov	r24, r15
   1141c:	ff 90       	pop	r15
   1141e:	ef 90       	pop	r14
   11420:	df 90       	pop	r13
   11422:	cf 90       	pop	r12
   11424:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   11426:	f1 2c       	mov	r15, r1
   11428:	f8 cf       	rjmp	.-16     	; 0x1141a <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]+0x60>

0001142a <EEPROM_CAT25::endCommand() [clone .constprop.90]>:
_ZN12EEPROM_CAT2510endCommandEv.constprop.90():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:215
  _spi->transfer((uint8_t)(address & 0xFF));
}

void EEPROM_CAT25::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   1142a:	61 e0       	ldi	r22, 0x01	; 1
   1142c:	80 91 79 0c 	lds	r24, 0x0C79	; 0x800c79 <SROM+0xa>
   11430:	0c 94 73 89 	jmp	0x112e6	; 0x112e6 <digitalWrite>

00011434 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>:
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:180
  endCommand();

  return(length);
}

void EEPROM_CAT25::startCommand(uint8_t command, const uint32_t address)
   11434:	cf 93       	push	r28
   11436:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:183
{
  //_spi->beginTransaction();
  digitalWrite(_chipSelect, LOW);
   11438:	60 e0       	ldi	r22, 0x00	; 0
   1143a:	80 91 79 0c 	lds	r24, 0x0C79	; 0x800c79 <SROM+0xa>
   1143e:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:193
    } else if (command == EEPROM_CAT25_COMMAND_WRITE) {
      command = EEPROM_CAT25_COMMAND_WRITE_A8_HIGH;
    }
  }

  _spi->transfer(command);
   11442:	6c 2f       	mov	r22, r28
   11444:	80 91 6f 0c 	lds	r24, 0x0C6F	; 0x800c6f <SROM>
   11448:	90 91 70 0c 	lds	r25, 0x0C70	; 0x800c70 <SROM+0x1>
   1144c:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:195

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
   11450:	c2 50       	subi	r28, 0x02	; 2
   11452:	c2 30       	cpi	r28, 0x02	; 2
   11454:	a8 f5       	brcc	.+106    	; 0x114c0 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x8c>
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:202
  }
}

void EEPROM_CAT25::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
   11456:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <SROM+0x4>
   1145a:	90 91 74 0c 	lds	r25, 0x0C74	; 0x800c74 <SROM+0x5>
   1145e:	a0 91 75 0c 	lds	r26, 0x0C75	; 0x800c75 <SROM+0x6>
   11462:	b0 91 76 0c 	lds	r27, 0x0C76	; 0x800c76 <SROM+0x7>
   11466:	01 97       	sbiw	r24, 0x01	; 1
   11468:	a1 40       	sbci	r26, 0x01	; 1
   1146a:	b1 05       	cpc	r27, r1
   1146c:	38 f0       	brcs	.+14     	; 0x1147c <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x48>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:203
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   1146e:	60 e0       	ldi	r22, 0x00	; 0
   11470:	80 91 6f 0c 	lds	r24, 0x0C6F	; 0x800c6f <SROM>
   11474:	90 91 70 0c 	lds	r25, 0x0C70	; 0x800c70 <SROM+0x1>
   11478:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:206
  }

  if ((_capacity > 0x100) && (_device != CAT25040)) {
   1147c:	80 91 73 0c 	lds	r24, 0x0C73	; 0x800c73 <SROM+0x4>
   11480:	90 91 74 0c 	lds	r25, 0x0C74	; 0x800c74 <SROM+0x5>
   11484:	a0 91 75 0c 	lds	r26, 0x0C75	; 0x800c75 <SROM+0x6>
   11488:	b0 91 76 0c 	lds	r27, 0x0C76	; 0x800c76 <SROM+0x7>
   1148c:	81 30       	cpi	r24, 0x01	; 1
   1148e:	91 40       	sbci	r25, 0x01	; 1
   11490:	a1 05       	cpc	r26, r1
   11492:	b1 05       	cpc	r27, r1
   11494:	68 f0       	brcs	.+26     	; 0x114b0 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x7c>
   11496:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <SROM+0x2>
   1149a:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <SROM+0x3>
   1149e:	0b 97       	sbiw	r24, 0x0b	; 11
   114a0:	39 f0       	breq	.+14     	; 0x114b0 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x7c>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:207
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   114a2:	60 e0       	ldi	r22, 0x00	; 0
   114a4:	80 91 6f 0c 	lds	r24, 0x0C6F	; 0x800c6f <SROM>
   114a8:	90 91 70 0c 	lds	r25, 0x0C70	; 0x800c70 <SROM+0x1>
   114ac:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   114b0:	60 e0       	ldi	r22, 0x00	; 0
   114b2:	80 91 6f 0c 	lds	r24, 0x0C6F	; 0x800c6f <SROM>
   114b6:	90 91 70 0c 	lds	r25, 0x0C70	; 0x800c70 <SROM+0x1>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   114ba:	cf 91       	pop	r28
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   114bc:	0c 94 70 36 	jmp	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   114c0:	cf 91       	pop	r28
   114c2:	08 95       	ret

000114c4 <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>:
_ZN12EEPROM_CAT2517getStatusRegisterEv.constprop.87():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:42
void EEPROM_CAT25::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t EEPROM_CAT25::getStatusRegister(void)
   114c4:	cf 93       	push	r28
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:44
{
  startCommand(EEPROM_CAT25_COMMAND_RDSR, 0);
   114c6:	85 e0       	ldi	r24, 0x05	; 5
   114c8:	0e 94 1a 8a 	call	0x11434	; 0x11434 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:45
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   114cc:	6f ef       	ldi	r22, 0xFF	; 255
   114ce:	80 91 6f 0c 	lds	r24, 0x0C6F	; 0x800c6f <SROM>
   114d2:	90 91 70 0c 	lds	r25, 0x0C70	; 0x800c70 <SROM+0x1>
   114d6:	0e 94 70 36 	call	0x6ce0	; 0x6ce0 <SoftSPIB::transfer(unsigned char)>
   114da:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:46
  endCommand();
   114dc:	0e 94 15 8a 	call	0x1142a	; 0x1142a <EEPROM_CAT25::endCommand() [clone .constprop.90]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:48
  return(ret);
}
   114e0:	8c 2f       	mov	r24, r28
   114e2:	cf 91       	pop	r28
   114e4:	08 95       	ret

000114e6 <TwoWire::begin() [clone .constprop.63]>:
_ZN7TwoWire5beginEv.constprop.63():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:57

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
   114e6:	10 92 e2 10 	sts	0x10E2, r1	; 0x8010e2 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:58
  rxBufferLength = 0;
   114ea:	10 92 e1 10 	sts	0x10E1, r1	; 0x8010e1 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:60

  txBufferIndex = 0;
   114ee:	10 92 e4 10 	sts	0x10E4, r1	; 0x8010e4 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:61
  txBufferLength = 0;
   114f2:	10 92 e3 10 	sts	0x10E3, r1	; 0x8010e3 <TwoWire::txBufferLength>
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
   114f6:	10 92 2d 11 	sts	0x112D, r1	; 0x80112d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:72
  twi_sendStop = true; // default value
   114fa:	81 e0       	ldi	r24, 0x01	; 1
   114fc:	80 93 2c 11 	sts	0x112C, r24	; 0x80112c <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:73
  twi_inRepStart = false;
   11500:	10 92 27 11 	sts	0x1127, r1	; 0x801127 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:76

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
   11504:	61 e0       	ldi	r22, 0x01	; 1
   11506:	83 e1       	ldi	r24, 0x13	; 19
   11508:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:77
  digitalWrite(SCL, 1);
   1150c:	61 e0       	ldi	r22, 0x01	; 1
   1150e:	82 e1       	ldi	r24, 0x12	; 18
   11510:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
   11514:	e9 eb       	ldi	r30, 0xB9	; 185
   11516:	f0 e0       	ldi	r31, 0x00	; 0
   11518:	80 81       	ld	r24, Z
   1151a:	8e 7f       	andi	r24, 0xFE	; 254
   1151c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:81
  cbi(TWSR, TWPS1);
   1151e:	80 81       	ld	r24, Z
   11520:	8d 7f       	andi	r24, 0xFD	; 253
   11522:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
   11524:	88 e4       	ldi	r24, 0x48	; 72
   11526:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
   1152a:	85 e4       	ldi	r24, 0x45	; 69
   1152c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
twi_attachSlaveTxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
   11530:	87 e8       	ldi	r24, 0x87	; 135
   11532:	9e e7       	ldi	r25, 0x7E	; 126
   11534:	90 93 df 10 	sts	0x10DF, r25	; 0x8010df <twi_onSlaveTransmit+0x1>
   11538:	80 93 de 10 	sts	0x10DE, r24	; 0x8010de <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
   1153c:	88 e8       	ldi	r24, 0x88	; 136
   1153e:	9e e7       	ldi	r25, 0x7E	; 126
   11540:	90 93 dd 10 	sts	0x10DD, r25	; 0x8010dd <twi_onSlaveReceive+0x1>
   11544:	80 93 dc 10 	sts	0x10DC, r24	; 0x8010dc <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.63():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:66

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
   11548:	08 95       	ret

0001154a <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:342

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
   1154a:	61 e0       	ldi	r22, 0x01	; 1
   1154c:	80 91 e0 10 	lds	r24, 0x10E0	; 0x8010e0 <SPI_CS>
   11550:	0c 94 73 89 	jmp	0x112e6	; 0x112e6 <digitalWrite>

00011554 <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:341
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
   11554:	60 e0       	ldi	r22, 0x00	; 0
   11556:	80 91 e0 10 	lds	r24, 0x10E0	; 0x8010e0 <SPI_CS>
   1155a:	0c 94 73 89 	jmp	0x112e6	; 0x112e6 <digitalWrite>

0001155e <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:104
    uint8_t cntl_byte = (0x18+(s<<5));
    read((uint16_t)src , cntl_byte, (uint8_t *)dst, len);
}

uint8_t W5500Class::write(uint16_t _addr, uint8_t _cb, uint8_t _data)
{
   1155e:	1f 93       	push	r17
   11560:	cf 93       	push	r28
   11562:	df 93       	push	r29
   11564:	18 2f       	mov	r17, r24
   11566:	d6 2f       	mov	r29, r22
   11568:	c4 2f       	mov	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:105
    SPI.beginTransaction(wiznet_SPI_settings);
   1156a:	80 91 3a 11 	lds	r24, 0x113A	; 0x80113a <wiznet_SPI_settings>
   1156e:	90 91 3b 11 	lds	r25, 0x113B	; 0x80113b <wiznet_SPI_settings+0x1>
   11572:	0e 94 66 80 	call	0x100cc	; 0x100cc <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:106
    setSS();  
   11576:	0e 94 aa 8a 	call	0x11554	; 0x11554 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:107
    SPI.transfer(_addr >> 8);
   1157a:	80 e0       	ldi	r24, 0x00	; 0
   1157c:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:108
    SPI.transfer(_addr & 0xFF);
   11580:	81 2f       	mov	r24, r17
   11582:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:109
    SPI.transfer(_cb);
   11586:	8d 2f       	mov	r24, r29
   11588:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:110
    SPI.transfer(_data);
   1158c:	8c 2f       	mov	r24, r28
   1158e:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:111
    resetSS();
   11592:	0e 94 a5 8a 	call	0x1154a	; 0x1154a <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:115
    SPI.endTransaction();

    return 1;
}
   11596:	81 e0       	ldi	r24, 0x01	; 1
   11598:	df 91       	pop	r29
   1159a:	cf 91       	pop	r28
   1159c:	1f 91       	pop	r17
   1159e:	08 95       	ret

000115a0 <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   115a0:	cf 93       	push	r28
   115a2:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   115a4:	90 e0       	ldi	r25, 0x00	; 0
   115a6:	fc 01       	movw	r30, r24
   115a8:	e2 5c       	subi	r30, 0xC2	; 194
   115aa:	f4 4c       	sbci	r31, 0xC4	; 196
   115ac:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   115ae:	8c 57       	subi	r24, 0x7C	; 124
   115b0:	94 4c       	sbci	r25, 0xC4	; 196
   115b2:	fc 01       	movw	r30, r24
   115b4:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   115b6:	88 23       	and	r24, r24
   115b8:	c9 f0       	breq	.+50     	; 0x115ec <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   115ba:	90 e0       	ldi	r25, 0x00	; 0
   115bc:	88 0f       	add	r24, r24
   115be:	99 1f       	adc	r25, r25
   115c0:	fc 01       	movw	r30, r24
   115c2:	e3 51       	subi	r30, 0x13	; 19
   115c4:	fa 4c       	sbci	r31, 0xCA	; 202
   115c6:	a5 91       	lpm	r26, Z+
   115c8:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   115ca:	fc 01       	movw	r30, r24
   115cc:	ec 58       	subi	r30, 0x8C	; 140
   115ce:	f4 4c       	sbci	r31, 0xC4	; 196
   115d0:	c5 91       	lpm	r28, Z+
   115d2:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   115d4:	61 11       	cpse	r22, r1
   115d6:	0d c0       	rjmp	.+26     	; 0x115f2 <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   115d8:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
   115da:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   115dc:	8c 91       	ld	r24, X
   115de:	20 95       	com	r18
   115e0:	82 23       	and	r24, r18
   115e2:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   115e4:	88 81       	ld	r24, Y
   115e6:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   115e8:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   115ea:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   115ec:	df 91       	pop	r29
   115ee:	cf 91       	pop	r28
   115f0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   115f2:	62 30       	cpi	r22, 0x02	; 2
   115f4:	51 f4       	brne	.+20     	; 0x1160a <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   115f6:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
   115f8:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   115fa:	3c 91       	ld	r19, X
   115fc:	82 2f       	mov	r24, r18
   115fe:	80 95       	com	r24
   11600:	83 23       	and	r24, r19
   11602:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   11604:	e8 81       	ld	r30, Y
   11606:	2e 2b       	or	r18, r30
   11608:	ef cf       	rjmp	.-34     	; 0x115e8 <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   1160a:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
   1160c:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   1160e:	ec 91       	ld	r30, X
   11610:	2e 2b       	or	r18, r30
   11612:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   11614:	8f bf       	out	0x3f, r24	; 63
   11616:	ea cf       	rjmp	.-44     	; 0x115ec <pinMode+0x4c>

00011618 <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:174

void delay(unsigned long ms)
{
   11618:	8f 92       	push	r8
   1161a:	9f 92       	push	r9
   1161c:	af 92       	push	r10
   1161e:	bf 92       	push	r11
   11620:	cf 92       	push	r12
   11622:	df 92       	push	r13
   11624:	ef 92       	push	r14
   11626:	ff 92       	push	r15
   11628:	6b 01       	movw	r12, r22
   1162a:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:175
  uint32_t start = micros();
   1162c:	0e 94 6f 7f 	call	0xfede	; 0xfede <micros>
   11630:	4b 01       	movw	r8, r22
   11632:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:179

  while (ms > 0) {
    yield();
    while ( ms > 0 && (micros() - start) >= 1000) {
   11634:	c1 14       	cp	r12, r1
   11636:	d1 04       	cpc	r13, r1
   11638:	e1 04       	cpc	r14, r1
   1163a:	f1 04       	cpc	r15, r1
   1163c:	b9 f0       	breq	.+46     	; 0x1166c <delay+0x54>
   1163e:	0e 94 6f 7f 	call	0xfede	; 0xfede <micros>
   11642:	68 19       	sub	r22, r8
   11644:	79 09       	sbc	r23, r9
   11646:	8a 09       	sbc	r24, r10
   11648:	9b 09       	sbc	r25, r11
   1164a:	68 3e       	cpi	r22, 0xE8	; 232
   1164c:	73 40       	sbci	r23, 0x03	; 3
   1164e:	81 05       	cpc	r24, r1
   11650:	91 05       	cpc	r25, r1
   11652:	80 f3       	brcs	.-32     	; 0x11634 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:180
      ms--;
   11654:	21 e0       	ldi	r18, 0x01	; 1
   11656:	c2 1a       	sub	r12, r18
   11658:	d1 08       	sbc	r13, r1
   1165a:	e1 08       	sbc	r14, r1
   1165c:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:181
      start += 1000;
   1165e:	88 ee       	ldi	r24, 0xE8	; 232
   11660:	88 0e       	add	r8, r24
   11662:	83 e0       	ldi	r24, 0x03	; 3
   11664:	98 1e       	adc	r9, r24
   11666:	a1 1c       	adc	r10, r1
   11668:	b1 1c       	adc	r11, r1
   1166a:	e4 cf       	rjmp	.-56     	; 0x11634 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:184
    }
  }
}
   1166c:	ff 90       	pop	r15
   1166e:	ef 90       	pop	r14
   11670:	df 90       	pop	r13
   11672:	cf 90       	pop	r12
   11674:	bf 90       	pop	r11
   11676:	af 90       	pop	r10
   11678:	9f 90       	pop	r9
   1167a:	8f 90       	pop	r8
   1167c:	08 95       	ret

0001167e <LCDWIKI_KBV::reset() [clone .constprop.71]>:
_ZN11LCDWIKI_KBV5resetEv.constprop.71():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:250
void LCDWIKI_KBV::reset(void)
{
//	have_reset = 1;
//    setWriteDir();
//Set all control bits to idle state
    CS_IDLE;
   1167e:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x2e>
   11682:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x2f>
   11686:	80 81       	ld	r24, Z
   11688:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x36>
   1168c:	89 2b       	or	r24, r25
   1168e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:251
    RD_IDLE;
   11690:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x34>
   11694:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x35>
   11698:	80 81       	ld	r24, Z
   1169a:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x39>
   1169e:	89 2b       	or	r24, r25
   116a0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:252
    WR_IDLE;
   116a2:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   116a6:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   116aa:	80 81       	ld	r24, Z
   116ac:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   116b0:	89 2b       	or	r24, r25
   116b2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:262
  digitalWrite(5, HIGH);
//  delay(100);
  //digitalWrite(5, LOW);
 // delay(100);
#else
  if(_reset) 
   116b4:	80 91 f6 0d 	lds	r24, 0x0DF6	; 0x800df6 <my_lcd+0x3e>
   116b8:	88 23       	and	r24, r24
   116ba:	71 f0       	breq	.+28     	; 0x116d8 <LCDWIKI_KBV::reset() [clone .constprop.71]+0x5a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:264
  {
    digitalWrite(_reset, LOW);
   116bc:	60 e0       	ldi	r22, 0x00	; 0
   116be:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:265
    delay(2);
   116c2:	62 e0       	ldi	r22, 0x02	; 2
   116c4:	70 e0       	ldi	r23, 0x00	; 0
   116c6:	80 e0       	ldi	r24, 0x00	; 0
   116c8:	90 e0       	ldi	r25, 0x00	; 0
   116ca:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:266
    digitalWrite(_reset, HIGH);
   116ce:	61 e0       	ldi	r22, 0x01	; 1
   116d0:	80 91 f6 0d 	lds	r24, 0x0DF6	; 0x800df6 <my_lcd+0x3e>
   116d4:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:272
//	delay(100);
	//digitalWrite(_reset, LOW);
	//delay(100);
  }
#endif
  CS_ACTIVE;
   116d8:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x2e>
   116dc:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x2f>
   116e0:	80 81       	ld	r24, Z
   116e2:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3a>
   116e6:	89 23       	and	r24, r25
   116e8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:273
  CD_COMMAND;
   116ea:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   116ee:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   116f2:	80 81       	ld	r24, Z
   116f4:	90 91 f3 0d 	lds	r25, 0x0DF3	; 0x800df3 <my_lcd+0x3b>
   116f8:	89 23       	and	r24, r25
   116fa:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:274
  write8(0x00);
   116fc:	12 b8       	out	0x02, r1	; 2
   116fe:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   11702:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   11706:	80 81       	ld	r24, Z
   11708:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   1170c:	89 23       	and	r24, r25
   1170e:	80 83       	st	Z, r24
   11710:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   11714:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   11718:	80 81       	ld	r24, Z
   1171a:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   1171e:	89 2b       	or	r24, r25
   11720:	80 83       	st	Z, r24
   11722:	83 e0       	ldi	r24, 0x03	; 3
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:277
  for(uint8_t i=0; i<3; i++)
  {
  	WR_STROBE; // Three extra 0x00s
   11724:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   11728:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   1172c:	90 81       	ld	r25, Z
   1172e:	20 91 f4 0d 	lds	r18, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   11732:	92 23       	and	r25, r18
   11734:	90 83       	st	Z, r25
   11736:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   1173a:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   1173e:	90 81       	ld	r25, Z
   11740:	20 91 f0 0d 	lds	r18, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   11744:	92 2b       	or	r25, r18
   11746:	90 83       	st	Z, r25
   11748:	81 50       	subi	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:275
  }
#endif
  CS_ACTIVE;
  CD_COMMAND;
  write8(0x00);
  for(uint8_t i=0; i<3; i++)
   1174a:	61 f7       	brne	.-40     	; 0x11724 <LCDWIKI_KBV::reset() [clone .constprop.71]+0xa6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:279
  {
  	WR_STROBE; // Three extra 0x00s
  }
  CS_IDLE;
   1174c:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x2e>
   11750:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x2f>
   11754:	80 81       	ld	r24, Z
   11756:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x36>
   1175a:	89 2b       	or	r24, r25
   1175c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:280
}
   1175e:	08 95       	ret

00011760 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>:
_ZN11LCDWIKI_KBV8Read_RegEja.constprop.69():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:491
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

//read value from lcd register 
uint16_t LCDWIKI_KBV::Read_Reg(uint16_t reg, int8_t index)
   11760:	cf 93       	push	r28
   11762:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:499
    uint8_t low;
//  if (!have_reset)
 // {
 //     reset();
//  }
	CS_ACTIVE;
   11764:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x2e>
   11768:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x2f>
   1176c:	90 81       	ld	r25, Z
   1176e:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x3a>
   11772:	92 23       	and	r25, r18
   11774:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:500
    writeCmd16(reg);
   11776:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   1177a:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   1177e:	90 81       	ld	r25, Z
   11780:	20 91 f3 0d 	lds	r18, 0x0DF3	; 0x800df3 <my_lcd+0x3b>
   11784:	92 23       	and	r25, r18
   11786:	90 83       	st	Z, r25
   11788:	12 b8       	out	0x02, r1	; 2
   1178a:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   1178e:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   11792:	90 81       	ld	r25, Z
   11794:	20 91 f4 0d 	lds	r18, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   11798:	92 23       	and	r25, r18
   1179a:	90 83       	st	Z, r25
   1179c:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   117a0:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   117a4:	90 81       	ld	r25, Z
   117a6:	20 91 f0 0d 	lds	r18, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   117aa:	92 2b       	or	r25, r18
   117ac:	90 83       	st	Z, r25
   117ae:	82 b9       	out	0x02, r24	; 2
   117b0:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   117b4:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   117b8:	80 81       	ld	r24, Z
   117ba:	90 91 f4 0d 	lds	r25, 0x0DF4	; 0x800df4 <my_lcd+0x3c>
   117be:	89 23       	and	r24, r25
   117c0:	80 83       	st	Z, r24
   117c2:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   117c6:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   117ca:	80 81       	ld	r24, Z
   117cc:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   117d0:	89 2b       	or	r24, r25
   117d2:	80 83       	st	Z, r24
   117d4:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   117d8:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   117dc:	80 81       	ld	r24, Z
   117de:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <my_lcd+0x37>
   117e2:	89 2b       	or	r24, r25
   117e4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:501
    setReadDir();
   117e6:	81 b1       	in	r24, 0x01	; 1
   117e8:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:502
    delay(1); 
   117ea:	61 e0       	ldi	r22, 0x01	; 1
   117ec:	70 e0       	ldi	r23, 0x00	; 0
   117ee:	80 e0       	ldi	r24, 0x00	; 0
   117f0:	90 e0       	ldi	r25, 0x00	; 0
   117f2:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:508
	do 
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
   117f6:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x34>
   117fa:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x35>
   117fe:	80 81       	ld	r24, Z
   11800:	90 91 f5 0d 	lds	r25, 0x0DF5	; 0x800df5 <my_lcd+0x3d>
   11804:	89 23       	and	r24, r25
   11806:	80 83       	st	Z, r24
   11808:	20 b1       	in	r18, 0x00	; 0
   1180a:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x34>
   1180e:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x35>
   11812:	90 81       	ld	r25, Z
   11814:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <my_lcd+0x39>
   11818:	98 2b       	or	r25, r24
   1181a:	90 83       	st	Z, r25
   1181c:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x34>
   11820:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x35>
   11824:	90 81       	ld	r25, Z
   11826:	80 91 f5 0d 	lds	r24, 0x0DF5	; 0x800df5 <my_lcd+0x3d>
   1182a:	98 23       	and	r25, r24
   1182c:	90 83       	st	Z, r25
   1182e:	80 b1       	in	r24, 0x00	; 0
   11830:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x34>
   11834:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x35>
   11838:	90 81       	ld	r25, Z
   1183a:	30 91 f1 0d 	lds	r19, 0x0DF1	; 0x800df1 <my_lcd+0x39>
   1183e:	93 2b       	or	r25, r19
   11840:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	}while (--index >= 0);   
   11842:	c1 30       	cpi	r28, 0x01	; 1
   11844:	79 f0       	breq	.+30     	; 0x11864 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]+0x104>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:511
//    RD_IDLE;
    CS_IDLE;
   11846:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x2e>
   1184a:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x2f>
   1184e:	90 81       	ld	r25, Z
   11850:	30 91 ee 0d 	lds	r19, 0x0DEE	; 0x800dee <my_lcd+0x36>
   11854:	93 2b       	or	r25, r19
   11856:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:512
    setWriteDir();
   11858:	91 b1       	in	r25, 0x01	; 1
   1185a:	9f ef       	ldi	r25, 0xFF	; 255
   1185c:	91 b9       	out	0x01, r25	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:514
    return ret;
}
   1185e:	92 2f       	mov	r25, r18
   11860:	cf 91       	pop	r28
   11862:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
	}while (--index >= 0);   
   11864:	c0 e0       	ldi	r28, 0x00	; 0
   11866:	c7 cf       	rjmp	.-114    	; 0x117f6 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]+0x96>

00011868 <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:78
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
   11868:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:82

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
   1186a:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:83
  m = timer0_millis;
   1186c:	60 91 d2 10 	lds	r22, 0x10D2	; 0x8010d2 <timer0_millis>
   11870:	70 91 d3 10 	lds	r23, 0x10D3	; 0x8010d3 <timer0_millis+0x1>
   11874:	80 91 d4 10 	lds	r24, 0x10D4	; 0x8010d4 <timer0_millis+0x2>
   11878:	90 91 d5 10 	lds	r25, 0x10D5	; 0x8010d5 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:84
  SREG = oldSREG;
   1187c:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:87

  return m;
}
   1187e:	08 95       	ret

00011880 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>:
_ZN12PubSubClient8readByteEPh.constprop.140():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:209
    }
    return true;
}

// reads a byte into result
boolean PubSubClient::readByte(uint8_t * result) {
   11880:	cf 92       	push	r12
   11882:	df 92       	push	r13
   11884:	ef 92       	push	r14
   11886:	ff 92       	push	r15
   11888:	cf 93       	push	r28
   1188a:	df 93       	push	r29
   1188c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:210
   uint32_t previousMillis = millis();
   1188e:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   11892:	6b 01       	movw	r12, r22
   11894:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:211
   while(!_client->available()) {
   11896:	80 91 10 0e 	lds	r24, 0x0E10	; 0x800e10 <mqtt_client>
   1189a:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <mqtt_client+0x1>
   1189e:	dc 01       	movw	r26, r24
   118a0:	ed 91       	ld	r30, X+
   118a2:	fc 91       	ld	r31, X
   118a4:	00 84       	ldd	r0, Z+8	; 0x08
   118a6:	f1 85       	ldd	r31, Z+9	; 0x09
   118a8:	e0 2d       	mov	r30, r0
   118aa:	19 95       	eicall
   118ac:	89 2b       	or	r24, r25
   118ae:	69 f4       	brne	.+26     	; 0x118ca <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x4a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:212
     uint32_t currentMillis = millis();
   118b0:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:213
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 100)){
   118b4:	6c 19       	sub	r22, r12
   118b6:	7d 09       	sbc	r23, r13
   118b8:	8e 09       	sbc	r24, r14
   118ba:	9f 09       	sbc	r25, r15
   118bc:	64 36       	cpi	r22, 0x64	; 100
   118be:	71 05       	cpc	r23, r1
   118c0:	81 05       	cpc	r24, r1
   118c2:	91 05       	cpc	r25, r1
   118c4:	40 f3       	brcs	.-48     	; 0x11896 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:214
       return false;
   118c6:	80 e0       	ldi	r24, 0x00	; 0
   118c8:	0d c0       	rjmp	.+26     	; 0x118e4 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:217
     }
   }
   *result = _client->read();
   118ca:	80 91 10 0e 	lds	r24, 0x0E10	; 0x800e10 <mqtt_client>
   118ce:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <mqtt_client+0x1>
   118d2:	dc 01       	movw	r26, r24
   118d4:	ed 91       	ld	r30, X+
   118d6:	fc 91       	ld	r31, X
   118d8:	02 84       	ldd	r0, Z+10	; 0x0a
   118da:	f3 85       	ldd	r31, Z+11	; 0x0b
   118dc:	e0 2d       	mov	r30, r0
   118de:	19 95       	eicall
   118e0:	88 83       	st	Y, r24
   118e2:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:219
   return true;
}
   118e4:	df 91       	pop	r29
   118e6:	cf 91       	pop	r28
   118e8:	ff 90       	pop	r15
   118ea:	ef 90       	pop	r14
   118ec:	df 90       	pop	r13
   118ee:	cf 90       	pop	r12
   118f0:	08 95       	ret

000118f2 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>:
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:232
    return true;
  }
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   118f2:	3f 92       	push	r3
   118f4:	4f 92       	push	r4
   118f6:	5f 92       	push	r5
   118f8:	6f 92       	push	r6
   118fa:	7f 92       	push	r7
   118fc:	8f 92       	push	r8
   118fe:	9f 92       	push	r9
   11900:	af 92       	push	r10
   11902:	bf 92       	push	r11
   11904:	cf 92       	push	r12
   11906:	df 92       	push	r13
   11908:	ef 92       	push	r14
   1190a:	ff 92       	push	r15
   1190c:	0f 93       	push	r16
   1190e:	1f 93       	push	r17
   11910:	cf 93       	push	r28
   11912:	df 93       	push	r29
   11914:	1f 92       	push	r1
   11916:	cd b7       	in	r28, 0x3d	; 61
   11918:	de b7       	in	r29, 0x3e	; 62
   1191a:	5c 01       	movw	r10, r24
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   1191c:	82 e1       	ldi	r24, 0x12	; 18
   1191e:	9e e0       	ldi	r25, 0x0E	; 14
   11920:	0e 94 40 8c 	call	0x11880	; 0x11880 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   11924:	81 11       	cpse	r24, r1
   11926:	16 c0       	rjmp	.+44     	; 0x11954 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x62>
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:234
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
   11928:	10 e0       	ldi	r17, 0x00	; 0
   1192a:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:280
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   1192c:	c8 01       	movw	r24, r16
   1192e:	0f 90       	pop	r0
   11930:	df 91       	pop	r29
   11932:	cf 91       	pop	r28
   11934:	1f 91       	pop	r17
   11936:	0f 91       	pop	r16
   11938:	ff 90       	pop	r15
   1193a:	ef 90       	pop	r14
   1193c:	df 90       	pop	r13
   1193e:	cf 90       	pop	r12
   11940:	bf 90       	pop	r11
   11942:	af 90       	pop	r10
   11944:	9f 90       	pop	r9
   11946:	8f 90       	pop	r8
   11948:	7f 90       	pop	r7
   1194a:	6f 90       	pop	r6
   1194c:	5f 90       	pop	r5
   1194e:	4f 90       	pop	r4
   11950:	3f 90       	pop	r3
   11952:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:235
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   11954:	30 90 12 0e 	lds	r3, 0x0E12	; 0x800e12 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:238
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
   11958:	19 82       	std	Y+1, r1	; 0x01
   1195a:	33 e1       	ldi	r19, 0x13	; 19
   1195c:	83 2e       	mov	r8, r19
   1195e:	3e e0       	ldi	r19, 0x0E	; 14
   11960:	93 2e       	mov	r9, r19
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    *index = current_index + 1;
   11962:	ee 24       	eor	r14, r14
   11964:	e3 94       	inc	r14
   11966:	f1 2c       	mov	r15, r1
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:237
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
   11968:	d1 2c       	mov	r13, r1
   1196a:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:236

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
   1196c:	41 2c       	mov	r4, r1
   1196e:	51 2c       	mov	r5, r1
   11970:	32 01       	movw	r6, r4
   11972:	43 94       	inc	r4
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:243
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
   11974:	ce 01       	movw	r24, r28
   11976:	01 96       	adiw	r24, 0x01	; 1
   11978:	0e 94 40 8c 	call	0x11880	; 0x11880 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   1197c:	88 23       	and	r24, r24
   1197e:	a1 f2       	breq	.-88     	; 0x11928 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
        buffer[len++] = digit;
   11980:	87 01       	movw	r16, r14
   11982:	0f 5f       	subi	r16, 0xFF	; 255
   11984:	1f 4f       	sbci	r17, 0xFF	; 255
   11986:	89 81       	ldd	r24, Y+1	; 0x01
   11988:	d4 01       	movw	r26, r8
   1198a:	8d 93       	st	X+, r24
   1198c:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:245
        length += (digit & 127) * multiplier;
   1198e:	28 2f       	mov	r18, r24
   11990:	2f 77       	andi	r18, 0x7F	; 127
   11992:	30 e0       	ldi	r19, 0x00	; 0
   11994:	24 9d       	mul	r18, r4
   11996:	a0 01       	movw	r20, r0
   11998:	25 9d       	mul	r18, r5
   1199a:	50 0d       	add	r21, r0
   1199c:	34 9d       	mul	r19, r4
   1199e:	50 0d       	add	r21, r0
   119a0:	11 24       	eor	r1, r1
   119a2:	c4 0e       	add	r12, r20
   119a4:	d5 1e       	adc	r13, r21
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:246
        multiplier *= 128;
   119a6:	27 e0       	ldi	r18, 0x07	; 7
   119a8:	44 0c       	add	r4, r4
   119aa:	55 1c       	adc	r5, r5
   119ac:	66 1c       	adc	r6, r6
   119ae:	77 1c       	adc	r7, r7
   119b0:	2a 95       	dec	r18
   119b2:	d1 f7       	brne	.-12     	; 0x119a8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xb6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:247
    } while ((digit & 128) != 0);
   119b4:	87 fd       	sbrc	r24, 7
   119b6:	31 c0       	rjmp	.+98     	; 0x11a1a <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x128>
   119b8:	b3 2d       	mov	r27, r3
   119ba:	b0 7f       	andi	r27, 0xF0	; 240
   119bc:	3b 2e       	mov	r3, r27
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:248
    *lengthLength = len-1;
   119be:	8f ef       	ldi	r24, 0xFF	; 255
   119c0:	80 0f       	add	r24, r16
   119c2:	f5 01       	movw	r30, r10
   119c4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:250

    if (isPublish) {
   119c6:	f0 e3       	ldi	r31, 0x30	; 48
   119c8:	bf 13       	cpse	r27, r31
   119ca:	29 c0       	rjmp	.+82     	; 0x11a1e <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x12c>
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   119cc:	c8 01       	movw	r24, r16
   119ce:	8e 5e       	subi	r24, 0xEE	; 238
   119d0:	91 4f       	sbci	r25, 0xF1	; 241
   119d2:	0e 94 40 8c 	call	0x11880	; 0x11880 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   119d6:	88 23       	and	r24, r24
   119d8:	09 f4       	brne	.+2      	; 0x119dc <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xea>
   119da:	a6 cf       	rjmp	.-180    	; 0x11928 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
   119dc:	c7 01       	movw	r24, r14
   119de:	8c 5e       	subi	r24, 0xEC	; 236
   119e0:	91 4f       	sbci	r25, 0xF1	; 241
   119e2:	0e 94 40 8c 	call	0x11880	; 0x11880 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   119e6:	88 23       	and	r24, r24
   119e8:	09 f4       	brne	.+2      	; 0x119ec <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xfa>
   119ea:	9e cf       	rjmp	.-196    	; 0x11928 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
    *index = current_index + 1;
   119ec:	0e 5f       	subi	r16, 0xFE	; 254
   119ee:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:254

    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   119f0:	d5 01       	movw	r26, r10
   119f2:	ec 91       	ld	r30, X
   119f4:	f0 e0       	ldi	r31, 0x00	; 0
   119f6:	e0 5f       	subi	r30, 0xF0	; 240
   119f8:	f1 4f       	sbci	r31, 0xF1	; 241
   119fa:	e3 80       	ldd	r14, Z+3	; 0x03
   119fc:	f1 2c       	mov	r15, r1
   119fe:	fe 2c       	mov	r15, r14
   11a00:	ee 24       	eor	r14, r14
   11a02:	84 81       	ldd	r24, Z+4	; 0x04
   11a04:	e8 0e       	add	r14, r24
   11a06:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:256
        start = 2;
        if (buffer[0]&MQTTQOS1) {
   11a08:	80 91 12 0e 	lds	r24, 0x0E12	; 0x800e12 <mqtt_client+0x2>
   11a0c:	81 ff       	sbrs	r24, 1
   11a0e:	03 c0       	rjmp	.+6      	; 0x11a16 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x124>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:258
            // skip message id
            skip += 2;
   11a10:	b2 e0       	ldi	r27, 0x02	; 2
   11a12:	eb 0e       	add	r14, r27
   11a14:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:255
    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   11a16:	92 e0       	ldi	r25, 0x02	; 2
   11a18:	05 c0       	rjmp	.+10     	; 0x11a24 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x132>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
        buffer[len++] = digit;
   11a1a:	78 01       	movw	r14, r16
   11a1c:	ab cf       	rjmp	.-170    	; 0x11974 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:240
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   11a1e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:239
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
   11a20:	f1 2c       	mov	r15, r1
   11a22:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   11a24:	69 2e       	mov	r6, r25
   11a26:	71 2c       	mov	r7, r1
   11a28:	60 1a       	sub	r6, r16
   11a2a:	71 0a       	sbc	r7, r17
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
        if(!readByte(&digit)) return 0;
        if (this->stream) {
            if (isPublish && len-*lengthLength-2>skip) {
   11a2c:	8e ef       	ldi	r24, 0xFE	; 254
   11a2e:	88 2e       	mov	r8, r24
   11a30:	99 24       	eor	r9, r9
   11a32:	9a 94       	dec	r9
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   11a34:	c3 01       	movw	r24, r6
   11a36:	80 0f       	add	r24, r16
   11a38:	91 1f       	adc	r25, r17
   11a3a:	8c 15       	cp	r24, r12
   11a3c:	9d 05       	cpc	r25, r13
   11a3e:	78 f5       	brcc	.+94     	; 0x11a9e <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:263
        if(!readByte(&digit)) return 0;
   11a40:	ce 01       	movw	r24, r28
   11a42:	01 96       	adiw	r24, 0x01	; 1
   11a44:	0e 94 40 8c 	call	0x11880	; 0x11880 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   11a48:	88 23       	and	r24, r24
   11a4a:	09 f4       	brne	.+2      	; 0x11a4e <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x15c>
   11a4c:	6d cf       	rjmp	.-294    	; 0x11928 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:264
        if (this->stream) {
   11a4e:	80 91 29 10 	lds	r24, 0x1029	; 0x801029 <mqtt_client+0x219>
   11a52:	90 91 2a 10 	lds	r25, 0x102A	; 0x80102a <mqtt_client+0x21a>
   11a56:	00 97       	sbiw	r24, 0x00	; 0
   11a58:	b1 f0       	breq	.+44     	; 0x11a86 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
            if (isPublish && len-*lengthLength-2>skip) {
   11a5a:	e0 e3       	ldi	r30, 0x30	; 48
   11a5c:	3e 12       	cpse	r3, r30
   11a5e:	13 c0       	rjmp	.+38     	; 0x11a86 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
   11a60:	d5 01       	movw	r26, r10
   11a62:	2c 91       	ld	r18, X
   11a64:	f4 01       	movw	r30, r8
   11a66:	e2 1b       	sub	r30, r18
   11a68:	f1 09       	sbc	r31, r1
   11a6a:	9f 01       	movw	r18, r30
   11a6c:	20 0f       	add	r18, r16
   11a6e:	31 1f       	adc	r19, r17
   11a70:	e2 16       	cp	r14, r18
   11a72:	f3 06       	cpc	r15, r19
   11a74:	40 f4       	brcc	.+16     	; 0x11a86 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:266
                this->stream->write(digit);
   11a76:	dc 01       	movw	r26, r24
   11a78:	ed 91       	ld	r30, X+
   11a7a:	fc 91       	ld	r31, X
   11a7c:	01 90       	ld	r0, Z+
   11a7e:	f0 81       	ld	r31, Z
   11a80:	e0 2d       	mov	r30, r0
   11a82:	69 81       	ldd	r22, Y+1	; 0x01
   11a84:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:269
            }
        }
        if (len < MQTT_MAX_PACKET_SIZE) {
   11a86:	01 15       	cp	r16, r1
   11a88:	b2 e0       	ldi	r27, 0x02	; 2
   11a8a:	1b 07       	cpc	r17, r27
   11a8c:	28 f4       	brcc	.+10     	; 0x11a98 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1a6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:270
            buffer[len] = digit;
   11a8e:	89 81       	ldd	r24, Y+1	; 0x01
   11a90:	f8 01       	movw	r30, r16
   11a92:	e0 5f       	subi	r30, 0xF0	; 240
   11a94:	f1 4f       	sbci	r31, 0xF1	; 241
   11a96:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:272
        }
        len++;
   11a98:	0f 5f       	subi	r16, 0xFF	; 255
   11a9a:	1f 4f       	sbci	r17, 0xFF	; 255
   11a9c:	cb cf       	rjmp	.-106    	; 0x11a34 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x142>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:275
    }

    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   11a9e:	80 91 29 10 	lds	r24, 0x1029	; 0x801029 <mqtt_client+0x219>
   11aa2:	90 91 2a 10 	lds	r25, 0x102A	; 0x80102a <mqtt_client+0x21a>
   11aa6:	89 2b       	or	r24, r25
   11aa8:	09 f0       	breq	.+2      	; 0x11aac <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1ba>
   11aaa:	40 cf       	rjmp	.-384    	; 0x1192c <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x3a>
   11aac:	01 30       	cpi	r16, 0x01	; 1
   11aae:	e2 e0       	ldi	r30, 0x02	; 2
   11ab0:	1e 07       	cpc	r17, r30
   11ab2:	08 f0       	brcs	.+2      	; 0x11ab6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1c4>
   11ab4:	39 cf       	rjmp	.-398    	; 0x11928 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
   11ab6:	3a cf       	rjmp	.-396    	; 0x1192c <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x3a>

00011ab8 <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:57
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   11ab8:	1f 92       	push	r1
   11aba:	0f 92       	push	r0
   11abc:	0f b6       	in	r0, 0x3f	; 63
   11abe:	0f 92       	push	r0
   11ac0:	11 24       	eor	r1, r1
   11ac2:	2f 93       	push	r18
   11ac4:	3f 93       	push	r19
   11ac6:	8f 93       	push	r24
   11ac8:	9f 93       	push	r25
   11aca:	af 93       	push	r26
   11acc:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:60
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
   11ace:	80 91 d2 10 	lds	r24, 0x10D2	; 0x8010d2 <timer0_millis>
   11ad2:	90 91 d3 10 	lds	r25, 0x10D3	; 0x8010d3 <timer0_millis+0x1>
   11ad6:	a0 91 d4 10 	lds	r26, 0x10D4	; 0x8010d4 <timer0_millis+0x2>
   11ada:	b0 91 d5 10 	lds	r27, 0x10D5	; 0x8010d5 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:61
  unsigned char f = timer0_fract;
   11ade:	30 91 d1 10 	lds	r19, 0x10D1	; 0x8010d1 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:64

  m += MILLIS_INC;
  f += FRACT_INC;
   11ae2:	23 e0       	ldi	r18, 0x03	; 3
   11ae4:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:65
  if (f >= FRACT_MAX) {
   11ae6:	2d 37       	cpi	r18, 0x7D	; 125
   11ae8:	58 f5       	brcc	.+86     	; 0x11b40 <__vector_23+0x88>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:63
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
   11aea:	01 96       	adiw	r24, 0x01	; 1
   11aec:	a1 1d       	adc	r26, r1
   11aee:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:70
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += 1;
  }

  timer0_fract = f;
   11af0:	20 93 d1 10 	sts	0x10D1, r18	; 0x8010d1 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:71
  timer0_millis = m;
   11af4:	80 93 d2 10 	sts	0x10D2, r24	; 0x8010d2 <timer0_millis>
   11af8:	90 93 d3 10 	sts	0x10D3, r25	; 0x8010d3 <timer0_millis+0x1>
   11afc:	a0 93 d4 10 	sts	0x10D4, r26	; 0x8010d4 <timer0_millis+0x2>
   11b00:	b0 93 d5 10 	sts	0x10D5, r27	; 0x8010d5 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:72
  timer0_overflow_count++;
   11b04:	80 91 d6 10 	lds	r24, 0x10D6	; 0x8010d6 <timer0_overflow_count>
   11b08:	90 91 d7 10 	lds	r25, 0x10D7	; 0x8010d7 <timer0_overflow_count+0x1>
   11b0c:	a0 91 d8 10 	lds	r26, 0x10D8	; 0x8010d8 <timer0_overflow_count+0x2>
   11b10:	b0 91 d9 10 	lds	r27, 0x10D9	; 0x8010d9 <timer0_overflow_count+0x3>
   11b14:	01 96       	adiw	r24, 0x01	; 1
   11b16:	a1 1d       	adc	r26, r1
   11b18:	b1 1d       	adc	r27, r1
   11b1a:	80 93 d6 10 	sts	0x10D6, r24	; 0x8010d6 <timer0_overflow_count>
   11b1e:	90 93 d7 10 	sts	0x10D7, r25	; 0x8010d7 <timer0_overflow_count+0x1>
   11b22:	a0 93 d8 10 	sts	0x10D8, r26	; 0x8010d8 <timer0_overflow_count+0x2>
   11b26:	b0 93 d9 10 	sts	0x10D9, r27	; 0x8010d9 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:73
}
   11b2a:	bf 91       	pop	r27
   11b2c:	af 91       	pop	r26
   11b2e:	9f 91       	pop	r25
   11b30:	8f 91       	pop	r24
   11b32:	3f 91       	pop	r19
   11b34:	2f 91       	pop	r18
   11b36:	0f 90       	pop	r0
   11b38:	0f be       	out	0x3f, r0	; 63
   11b3a:	0f 90       	pop	r0
   11b3c:	1f 90       	pop	r1
   11b3e:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:66
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
   11b40:	26 e8       	ldi	r18, 0x86	; 134
   11b42:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:67
    m += 1;
   11b44:	02 96       	adiw	r24, 0x02	; 2
   11b46:	a1 1d       	adc	r26, r1
   11b48:	b1 1d       	adc	r27, r1
   11b4a:	d2 cf       	rjmp	.-92     	; 0x11af0 <__vector_23+0x38>

00011b4c <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   11b4c:	1f 92       	push	r1
   11b4e:	0f 92       	push	r0
   11b50:	0f b6       	in	r0, 0x3f	; 63
   11b52:	0f 92       	push	r0
   11b54:	11 24       	eor	r1, r1
   11b56:	0b b6       	in	r0, 0x3b	; 59
   11b58:	0f 92       	push	r0
   11b5a:	2f 93       	push	r18
   11b5c:	3f 93       	push	r19
   11b5e:	4f 93       	push	r20
   11b60:	5f 93       	push	r21
   11b62:	6f 93       	push	r22
   11b64:	7f 93       	push	r23
   11b66:	8f 93       	push	r24
   11b68:	9f 93       	push	r25
   11b6a:	af 93       	push	r26
   11b6c:	bf 93       	push	r27
   11b6e:	ef 93       	push	r30
   11b70:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   11b72:	8b e6       	ldi	r24, 0x6B	; 107
   11b74:	9b e0       	ldi	r25, 0x0B	; 11
   11b76:	0e 94 c6 7e 	call	0xfd8c	; 0xfd8c <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
   11b7a:	ff 91       	pop	r31
   11b7c:	ef 91       	pop	r30
   11b7e:	bf 91       	pop	r27
   11b80:	af 91       	pop	r26
   11b82:	9f 91       	pop	r25
   11b84:	8f 91       	pop	r24
   11b86:	7f 91       	pop	r23
   11b88:	6f 91       	pop	r22
   11b8a:	5f 91       	pop	r21
   11b8c:	4f 91       	pop	r20
   11b8e:	3f 91       	pop	r19
   11b90:	2f 91       	pop	r18
   11b92:	0f 90       	pop	r0
   11b94:	0b be       	out	0x3b, r0	; 59
   11b96:	0f 90       	pop	r0
   11b98:	0f be       	out	0x3f, r0	; 63
   11b9a:	0f 90       	pop	r0
   11b9c:	1f 90       	pop	r1
   11b9e:	18 95       	reti

00011ba0 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   11ba0:	1f 92       	push	r1
   11ba2:	0f 92       	push	r0
   11ba4:	0f b6       	in	r0, 0x3f	; 63
   11ba6:	0f 92       	push	r0
   11ba8:	11 24       	eor	r1, r1
   11baa:	0b b6       	in	r0, 0x3b	; 59
   11bac:	0f 92       	push	r0
   11bae:	2f 93       	push	r18
   11bb0:	8f 93       	push	r24
   11bb2:	9f 93       	push	r25
   11bb4:	ef 93       	push	r30
   11bb6:	ff 93       	push	r31
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   11bb8:	e0 91 7b 0b 	lds	r30, 0x0B7B	; 0x800b7b <Serial+0x10>
   11bbc:	f0 91 7c 0b 	lds	r31, 0x0B7C	; 0x800b7c <Serial+0x11>
   11bc0:	80 81       	ld	r24, Z
   11bc2:	e0 91 81 0b 	lds	r30, 0x0B81	; 0x800b81 <Serial+0x16>
   11bc6:	f0 91 82 0b 	lds	r31, 0x0B82	; 0x800b82 <Serial+0x17>
   11bca:	82 fd       	sbrc	r24, 2
   11bcc:	1d c0       	rjmp	.+58     	; 0x11c08 <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   11bce:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   11bd0:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <Serial+0x19>
   11bd4:	8f 5f       	subi	r24, 0xFF	; 255
   11bd6:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   11bd8:	20 91 85 0b 	lds	r18, 0x0B85	; 0x800b85 <Serial+0x1a>
   11bdc:	82 17       	cp	r24, r18
   11bde:	41 f0       	breq	.+16     	; 0x11bf0 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   11be0:	e0 91 84 0b 	lds	r30, 0x0B84	; 0x800b84 <Serial+0x19>
   11be4:	f0 e0       	ldi	r31, 0x00	; 0
   11be6:	e5 59       	subi	r30, 0x95	; 149
   11be8:	f4 4f       	sbci	r31, 0xF4	; 244
   11bea:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   11bec:	80 93 84 0b 	sts	0x0B84, r24	; 0x800b84 <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   11bf0:	ff 91       	pop	r31
   11bf2:	ef 91       	pop	r30
   11bf4:	9f 91       	pop	r25
   11bf6:	8f 91       	pop	r24
   11bf8:	2f 91       	pop	r18
   11bfa:	0f 90       	pop	r0
   11bfc:	0b be       	out	0x3b, r0	; 59
   11bfe:	0f 90       	pop	r0
   11c00:	0f be       	out	0x3f, r0	; 63
   11c02:	0f 90       	pop	r0
   11c04:	1f 90       	pop	r1
   11c06:	18 95       	reti
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   11c08:	80 81       	ld	r24, Z
   11c0a:	f2 cf       	rjmp	.-28     	; 0x11bf0 <__vector_25+0x50>

00011c0c <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95
{
  return a2d_index;
}

ISR(ADC_vect)
{
   11c0c:	1f 92       	push	r1
   11c0e:	0f 92       	push	r0
   11c10:	0f b6       	in	r0, 0x3f	; 63
   11c12:	0f 92       	push	r0
   11c14:	11 24       	eor	r1, r1
   11c16:	0b b6       	in	r0, 0x3b	; 59
   11c18:	0f 92       	push	r0
   11c1a:	2f 93       	push	r18
   11c1c:	3f 93       	push	r19
   11c1e:	4f 93       	push	r20
   11c20:	5f 93       	push	r21
   11c22:	6f 93       	push	r22
   11c24:	7f 93       	push	r23
   11c26:	8f 93       	push	r24
   11c28:	9f 93       	push	r25
   11c2a:	af 93       	push	r26
   11c2c:	bf 93       	push	r27
   11c2e:	cf 93       	push	r28
   11c30:	ef 93       	push	r30
   11c32:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
   11c34:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
   11c36:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
   11c3a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   11c3e:	e0 91 b9 09 	lds	r30, 0x09B9	; 0x8009b9 <_ZL17a2d_interupt_func.lto_priv.228>
   11c42:	f0 91 ba 09 	lds	r31, 0x09BA	; 0x8009ba <_ZL17a2d_interupt_func.lto_priv.228+0x1>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
}

ISR(ADC_vect)
{
  uint8_t back = SREG;
  a2d_data = ADCL + (ADCH<<8);
   11c46:	68 2f       	mov	r22, r24
   11c48:	70 e0       	ldi	r23, 0x00	; 0
   11c4a:	76 2f       	mov	r23, r22
   11c4c:	66 27       	eor	r22, r22
   11c4e:	69 0f       	add	r22, r25
   11c50:	71 1d       	adc	r23, r1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   11c52:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <a2d_input>
   11c56:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
   11c58:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
   11c5a:	ff 91       	pop	r31
   11c5c:	ef 91       	pop	r30
   11c5e:	cf 91       	pop	r28
   11c60:	bf 91       	pop	r27
   11c62:	af 91       	pop	r26
   11c64:	9f 91       	pop	r25
   11c66:	8f 91       	pop	r24
   11c68:	7f 91       	pop	r23
   11c6a:	6f 91       	pop	r22
   11c6c:	5f 91       	pop	r21
   11c6e:	4f 91       	pop	r20
   11c70:	3f 91       	pop	r19
   11c72:	2f 91       	pop	r18
   11c74:	0f 90       	pop	r0
   11c76:	0b be       	out	0x3b, r0	; 59
   11c78:	0f 90       	pop	r0
   11c7a:	0f be       	out	0x3f, r0	; 63
   11c7c:	0f 90       	pop	r0
   11c7e:	1f 90       	pop	r1
   11c80:	18 95       	reti

00011c82 <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58
}


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
   11c82:	20 91 b7 09 	lds	r18, 0x09B7	; 0x8009b7 <a2d_reference>
   11c86:	90 e4       	ldi	r25, 0x40	; 64
   11c88:	29 9f       	mul	r18, r25
   11c8a:	90 01       	movw	r18, r0
   11c8c:	11 24       	eor	r1, r1
   11c8e:	28 0f       	add	r18, r24
   11c90:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
   11c94:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
   11c98:	ea e7       	ldi	r30, 0x7A	; 122
   11c9a:	f0 e0       	ldi	r31, 0x00	; 0
   11c9c:	80 81       	ld	r24, Z
   11c9e:	80 64       	ori	r24, 0x40	; 64
   11ca0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
   11ca2:	08 95       	ret

00011ca4 <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:105
    return this->forceUpdate();
  }
  return true;
}

unsigned long NTPClient::getEpochTime() const {
   11ca4:	cf 92       	push	r12
   11ca6:	df 92       	push	r13
   11ca8:	ef 92       	push	r14
   11caa:	ff 92       	push	r15
   11cac:	0f 93       	push	r16
   11cae:	1f 93       	push	r17
   11cb0:	cf 93       	push	r28
   11cb2:	df 93       	push	r29
   11cb4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:106
  return this->_timeOffset + // User offset
   11cb6:	cf 80       	ldd	r12, Y+7	; 0x07
   11cb8:	d8 84       	ldd	r13, Y+8	; 0x08
   11cba:	e9 84       	ldd	r14, Y+9	; 0x09
   11cbc:	fa 84       	ldd	r15, Y+10	; 0x0a
   11cbe:	8f 85       	ldd	r24, Y+15	; 0x0f
   11cc0:	98 89       	ldd	r25, Y+16	; 0x10
   11cc2:	a9 89       	ldd	r26, Y+17	; 0x11
   11cc4:	ba 89       	ldd	r27, Y+18	; 0x12
   11cc6:	c8 0e       	add	r12, r24
   11cc8:	d9 1e       	adc	r13, r25
   11cca:	ea 1e       	adc	r14, r26
   11ccc:	fb 1e       	adc	r15, r27
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:108
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
   11cce:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   11cd2:	0b 89       	ldd	r16, Y+19	; 0x13
   11cd4:	1c 89       	ldd	r17, Y+20	; 0x14
   11cd6:	2d 89       	ldd	r18, Y+21	; 0x15
   11cd8:	3e 89       	ldd	r19, Y+22	; 0x16
   11cda:	60 1b       	sub	r22, r16
   11cdc:	71 0b       	sbc	r23, r17
   11cde:	82 0b       	sbc	r24, r18
   11ce0:	93 0b       	sbc	r25, r19
   11ce2:	28 ee       	ldi	r18, 0xE8	; 232
   11ce4:	33 e0       	ldi	r19, 0x03	; 3
   11ce6:	40 e0       	ldi	r20, 0x00	; 0
   11ce8:	50 e0       	ldi	r21, 0x00	; 0
   11cea:	0e 94 2d b4 	call	0x1685a	; 0x1685a <__udivmodsi4>
   11cee:	ca 01       	movw	r24, r20
   11cf0:	b9 01       	movw	r22, r18
   11cf2:	6c 0d       	add	r22, r12
   11cf4:	7d 1d       	adc	r23, r13
   11cf6:	8e 1d       	adc	r24, r14
   11cf8:	9f 1d       	adc	r25, r15
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:109
}
   11cfa:	df 91       	pop	r29
   11cfc:	cf 91       	pop	r28
   11cfe:	1f 91       	pop	r17
   11d00:	0f 91       	pop	r16
   11d02:	ff 90       	pop	r15
   11d04:	ef 90       	pop	r14
   11d06:	df 90       	pop	r13
   11d08:	cf 90       	pop	r12
   11d0a:	08 95       	ret

00011d0c <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:111

int NTPClient::getYear() const {
   11d0c:	cf 93       	push	r28
   11d0e:	df 93       	push	r29
   11d10:	00 d0       	rcall	.+0      	; 0x11d12 <NTPClient::getYear() const+0x6>
   11d12:	1f 92       	push	r1
   11d14:	cd b7       	in	r28, 0x3d	; 61
   11d16:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:112
  time_t rawtime = this->getEpochTime();
   11d18:	0e 94 52 8e 	call	0x11ca4	; 0x11ca4 <NTPClient::getEpochTime() const>
   11d1c:	69 83       	std	Y+1, r22	; 0x01
   11d1e:	7a 83       	std	Y+2, r23	; 0x02
   11d20:	8b 83       	std	Y+3, r24	; 0x03
   11d22:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:114
  struct tm * ti;
  ti = localtime (&rawtime);
   11d24:	ce 01       	movw	r24, r28
   11d26:	01 96       	adiw	r24, 0x01	; 1
   11d28:	0e 94 44 9b 	call	0x13688	; 0x13688 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:115
  int year = ti->tm_year + 1900;
   11d2c:	fc 01       	movw	r30, r24
   11d2e:	86 81       	ldd	r24, Z+6	; 0x06
   11d30:	97 81       	ldd	r25, Z+7	; 0x07
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:118

  return year;
}
   11d32:	84 59       	subi	r24, 0x94	; 148
   11d34:	98 4f       	sbci	r25, 0xF8	; 248
   11d36:	0f 90       	pop	r0
   11d38:	0f 90       	pop	r0
   11d3a:	0f 90       	pop	r0
   11d3c:	0f 90       	pop	r0
   11d3e:	df 91       	pop	r29
   11d40:	cf 91       	pop	r28
   11d42:	08 95       	ret

00011d44 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:52
  this->_timeOffset     = timeOffset;
  this->_poolServerName = poolServerName;
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
   11d44:	cf 93       	push	r28
   11d46:	df 93       	push	r29
   11d48:	ec 01       	movw	r28, r24
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
   11d4a:	89 e3       	ldi	r24, 0x39	; 57
   11d4c:	95 e0       	ldi	r25, 0x05	; 5
   11d4e:	9e 83       	std	Y+6, r25	; 0x06
   11d50:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
   11d52:	88 81       	ld	r24, Y
   11d54:	99 81       	ldd	r25, Y+1	; 0x01
   11d56:	dc 01       	movw	r26, r24
   11d58:	ed 91       	ld	r30, X+
   11d5a:	fc 91       	ld	r31, X
   11d5c:	06 84       	ldd	r0, Z+14	; 0x0e
   11d5e:	f7 85       	ldd	r31, Z+15	; 0x0f
   11d60:	e0 2d       	mov	r30, r0
   11d62:	69 e3       	ldi	r22, 0x39	; 57
   11d64:	75 e0       	ldi	r23, 0x05	; 5
   11d66:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
   11d68:	81 e0       	ldi	r24, 0x01	; 1
   11d6a:	8a 83       	std	Y+2, r24	; 0x02
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:54
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}
   11d6c:	df 91       	pop	r29
   11d6e:	cf 91       	pop	r28
   11d70:	08 95       	ret

00011d72 <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
   11d72:	cf 92       	push	r12
   11d74:	df 92       	push	r13
   11d76:	ef 92       	push	r14
   11d78:	ff 92       	push	r15
   11d7a:	0f 93       	push	r16
   11d7c:	1f 93       	push	r17
   11d7e:	cf 93       	push	r28
   11d80:	df 93       	push	r29
   11d82:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
   11d84:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   11d88:	0b 89       	ldd	r16, Y+19	; 0x13
   11d8a:	1c 89       	ldd	r17, Y+20	; 0x14
   11d8c:	2d 89       	ldd	r18, Y+21	; 0x15
   11d8e:	3e 89       	ldd	r19, Y+22	; 0x16
   11d90:	60 1b       	sub	r22, r16
   11d92:	71 0b       	sbc	r23, r17
   11d94:	82 0b       	sbc	r24, r18
   11d96:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
   11d98:	cb 84       	ldd	r12, Y+11	; 0x0b
   11d9a:	dc 84       	ldd	r13, Y+12	; 0x0c
   11d9c:	ed 84       	ldd	r14, Y+13	; 0x0d
   11d9e:	fe 84       	ldd	r15, Y+14	; 0x0e
   11da0:	6c 15       	cp	r22, r12
   11da2:	7d 05       	cpc	r23, r13
   11da4:	8e 05       	cpc	r24, r14
   11da6:	9f 05       	cpc	r25, r15
   11da8:	28 f4       	brcc	.+10     	; 0x11db4 <NTPClient::update()+0x42>
   11daa:	01 2b       	or	r16, r17
   11dac:	02 2b       	or	r16, r18
   11dae:	03 2b       	or	r16, r19
   11db0:	09 f0       	breq	.+2      	; 0x11db4 <NTPClient::update()+0x42>
   11db2:	9e c0       	rjmp	.+316    	; 0x11ef0 <NTPClient::update()+0x17e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
   11db4:	8a 81       	ldd	r24, Y+2	; 0x02
   11db6:	81 11       	cpse	r24, r1
   11db8:	03 c0       	rjmp	.+6      	; 0x11dc0 <NTPClient::update()+0x4e>
   11dba:	ce 01       	movw	r24, r28
   11dbc:	0e 94 a2 8e 	call	0x11d44	; 0x11d44 <NTPClient::begin()>
sendNTPPacket():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   11dc0:	7e 01       	movw	r14, r28
   11dc2:	87 e1       	ldi	r24, 0x17	; 23
   11dc4:	e8 0e       	add	r14, r24
   11dc6:	f1 1c       	adc	r15, r1
   11dc8:	8c e2       	ldi	r24, 0x2C	; 44
   11dca:	fe 01       	movw	r30, r28
   11dcc:	7b 96       	adiw	r30, 0x1b	; 27
   11dce:	df 01       	movw	r26, r30
   11dd0:	1d 92       	st	X+, r1
   11dd2:	8a 95       	dec	r24
   11dd4:	e9 f7       	brne	.-6      	; 0x11dd0 <NTPClient::update()+0x5e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
   11dd6:	83 ee       	ldi	r24, 0xE3	; 227
   11dd8:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
   11dda:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
   11ddc:	86 e0       	ldi	r24, 0x06	; 6
   11dde:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
   11de0:	8c ee       	ldi	r24, 0xEC	; 236
   11de2:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
   11de4:	81 e3       	ldi	r24, 0x31	; 49
   11de6:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
   11de8:	9e e4       	ldi	r25, 0x4E	; 78
   11dea:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
   11dec:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
   11dee:	84 e3       	ldi	r24, 0x34	; 52
   11df0:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
   11df2:	88 81       	ld	r24, Y
   11df4:	99 81       	ldd	r25, Y+1	; 0x01
   11df6:	6b 81       	ldd	r22, Y+3	; 0x03
   11df8:	7c 81       	ldd	r23, Y+4	; 0x04
   11dfa:	dc 01       	movw	r26, r24
   11dfc:	ed 91       	ld	r30, X+
   11dfe:	fc 91       	ld	r31, X
   11e00:	06 88       	ldd	r0, Z+22	; 0x16
   11e02:	f7 89       	ldd	r31, Z+23	; 0x17
   11e04:	e0 2d       	mov	r30, r0
   11e06:	4b e7       	ldi	r20, 0x7B	; 123
   11e08:	50 e0       	ldi	r21, 0x00	; 0
   11e0a:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   11e0c:	88 81       	ld	r24, Y
   11e0e:	99 81       	ldd	r25, Y+1	; 0x01
   11e10:	dc 01       	movw	r26, r24
   11e12:	ed 91       	ld	r30, X+
   11e14:	fc 91       	ld	r31, X
   11e16:	02 80       	ldd	r0, Z+2	; 0x02
   11e18:	f3 81       	ldd	r31, Z+3	; 0x03
   11e1a:	e0 2d       	mov	r30, r0
   11e1c:	40 e3       	ldi	r20, 0x30	; 48
   11e1e:	50 e0       	ldi	r21, 0x00	; 0
   11e20:	b7 01       	movw	r22, r14
   11e22:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
   11e24:	88 81       	ld	r24, Y
   11e26:	99 81       	ldd	r25, Y+1	; 0x01
   11e28:	dc 01       	movw	r26, r24
   11e2a:	ed 91       	ld	r30, X+
   11e2c:	fc 91       	ld	r31, X
   11e2e:	00 8c       	ldd	r0, Z+24	; 0x18
   11e30:	f1 8d       	ldd	r31, Z+25	; 0x19
   11e32:	e0 2d       	mov	r30, r0
   11e34:	19 95       	eicall
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72
  #endif

  this->sendNTPPacket();

  // Wait till data is there or timeout...
  byte timeout = 0;
   11e36:	10 e0       	ldi	r17, 0x00	; 0
forceUpdate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
   11e38:	6a e0       	ldi	r22, 0x0A	; 10
   11e3a:	70 e0       	ldi	r23, 0x00	; 0
   11e3c:	80 e0       	ldi	r24, 0x00	; 0
   11e3e:	90 e0       	ldi	r25, 0x00	; 0
   11e40:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
   11e44:	88 81       	ld	r24, Y
   11e46:	99 81       	ldd	r25, Y+1	; 0x01
   11e48:	dc 01       	movw	r26, r24
   11e4a:	ed 91       	ld	r30, X+
   11e4c:	fc 91       	ld	r31, X
   11e4e:	02 8c       	ldd	r0, Z+26	; 0x1a
   11e50:	f3 8d       	ldd	r31, Z+27	; 0x1b
   11e52:	e0 2d       	mov	r30, r0
   11e54:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
   11e56:	15 36       	cpi	r17, 0x65	; 101
   11e58:	09 f4       	brne	.+2      	; 0x11e5c <NTPClient::update()+0xea>
   11e5a:	54 c0       	rjmp	.+168    	; 0x11f04 <NTPClient::update()+0x192>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
   11e5c:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
   11e5e:	89 2b       	or	r24, r25
   11e60:	59 f3       	breq	.-42     	; 0x11e38 <NTPClient::update()+0xc6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
   11e62:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   11e66:	21 2f       	mov	r18, r17
   11e68:	30 e0       	ldi	r19, 0x00	; 0
   11e6a:	a9 01       	movw	r20, r18
   11e6c:	4f 5f       	subi	r20, 0xFF	; 255
   11e6e:	5f 4f       	sbci	r21, 0xFF	; 255
   11e70:	ea e0       	ldi	r30, 0x0A	; 10
   11e72:	e4 9f       	mul	r30, r20
   11e74:	90 01       	movw	r18, r0
   11e76:	e5 9f       	mul	r30, r21
   11e78:	30 0d       	add	r19, r0
   11e7a:	11 24       	eor	r1, r1
   11e7c:	89 01       	movw	r16, r18
   11e7e:	33 0f       	add	r19, r19
   11e80:	22 0b       	sbc	r18, r18
   11e82:	33 0b       	sbc	r19, r19
   11e84:	ab 01       	movw	r20, r22
   11e86:	bc 01       	movw	r22, r24
   11e88:	40 1b       	sub	r20, r16
   11e8a:	51 0b       	sbc	r21, r17
   11e8c:	62 0b       	sbc	r22, r18
   11e8e:	73 0b       	sbc	r23, r19
   11e90:	4b 8b       	std	Y+19, r20	; 0x13
   11e92:	5c 8b       	std	Y+20, r21	; 0x14
   11e94:	6d 8b       	std	Y+21, r22	; 0x15
   11e96:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
   11e98:	88 81       	ld	r24, Y
   11e9a:	99 81       	ldd	r25, Y+1	; 0x01
   11e9c:	dc 01       	movw	r26, r24
   11e9e:	ed 91       	ld	r30, X+
   11ea0:	fc 91       	ld	r31, X
   11ea2:	04 8c       	ldd	r0, Z+28	; 0x1c
   11ea4:	f5 8d       	ldd	r31, Z+29	; 0x1d
   11ea6:	e0 2d       	mov	r30, r0
   11ea8:	40 e3       	ldi	r20, 0x30	; 48
   11eaa:	50 e0       	ldi	r21, 0x00	; 0
   11eac:	b7 01       	movw	r22, r14
   11eae:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   11eb0:	fe 01       	movw	r30, r28
   11eb2:	ff 96       	adiw	r30, 0x3f	; 63
   11eb4:	80 81       	ld	r24, Z
   11eb6:	91 81       	ldd	r25, Z+1	; 0x01
   11eb8:	98 27       	eor	r25, r24
   11eba:	89 27       	eor	r24, r25
   11ebc:	98 27       	eor	r25, r24
   11ebe:	b0 e0       	ldi	r27, 0x00	; 0
   11ec0:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   11ec2:	dc 01       	movw	r26, r24
   11ec4:	99 27       	eor	r25, r25
   11ec6:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   11ec8:	32 96       	adiw	r30, 0x02	; 2
   11eca:	40 81       	ld	r20, Z
   11ecc:	51 81       	ldd	r21, Z+1	; 0x01
   11ece:	54 27       	eor	r21, r20
   11ed0:	45 27       	eor	r20, r21
   11ed2:	54 27       	eor	r21, r20
   11ed4:	70 e0       	ldi	r23, 0x00	; 0
   11ed6:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   11ed8:	84 2b       	or	r24, r20
   11eda:	95 2b       	or	r25, r21
   11edc:	a6 2b       	or	r26, r22
   11ede:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
   11ee0:	80 58       	subi	r24, 0x80	; 128
   11ee2:	9e 47       	sbci	r25, 0x7E	; 126
   11ee4:	aa 4a       	sbci	r26, 0xAA	; 170
   11ee6:	b3 48       	sbci	r27, 0x83	; 131
   11ee8:	8f 87       	std	Y+15, r24	; 0x0f
   11eea:	98 8b       	std	Y+16, r25	; 0x10
   11eec:	a9 8b       	std	Y+17, r26	; 0x11
   11eee:	ba 8b       	std	Y+18, r27	; 0x12
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:102
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
  }
  return true;
   11ef0:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
}
   11ef2:	df 91       	pop	r29
   11ef4:	cf 91       	pop	r28
   11ef6:	1f 91       	pop	r17
   11ef8:	0f 91       	pop	r16
   11efa:	ff 90       	pop	r15
   11efc:	ef 90       	pop	r14
   11efe:	df 90       	pop	r13
   11f00:	cf 90       	pop	r12
   11f02:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
   11f04:	80 e0       	ldi	r24, 0x00	; 0
   11f06:	f5 cf       	rjmp	.-22     	; 0x11ef2 <NTPClient::update()+0x180>

00011f08 <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
   11f08:	1f 92       	push	r1
   11f0a:	0f 92       	push	r0
   11f0c:	0f b6       	in	r0, 0x3f	; 63
   11f0e:	0f 92       	push	r0
   11f10:	11 24       	eor	r1, r1
   11f12:	0b b6       	in	r0, 0x3b	; 59
   11f14:	0f 92       	push	r0
   11f16:	2f 93       	push	r18
   11f18:	3f 93       	push	r19
   11f1a:	4f 93       	push	r20
   11f1c:	5f 93       	push	r21
   11f1e:	6f 93       	push	r22
   11f20:	7f 93       	push	r23
   11f22:	8f 93       	push	r24
   11f24:	9f 93       	push	r25
   11f26:	af 93       	push	r26
   11f28:	bf 93       	push	r27
   11f2a:	ef 93       	push	r30
   11f2c:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
   11f2e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
   11f32:	88 7f       	andi	r24, 0xF8	; 248
   11f34:	80 36       	cpi	r24, 0x60	; 96
   11f36:	09 f4       	brne	.+2      	; 0x11f3a <__vector_39+0x32>
   11f38:	4d c0       	rjmp	.+154    	; 0x11fd4 <__vector_39+0xcc>
   11f3a:	08 f0       	brcs	.+2      	; 0x11f3e <__vector_39+0x36>
   11f3c:	40 c0       	rjmp	.+128    	; 0x11fbe <__vector_39+0xb6>
   11f3e:	88 32       	cpi	r24, 0x28	; 40
   11f40:	09 f4       	brne	.+2      	; 0x11f44 <__vector_39+0x3c>
   11f42:	a9 c0       	rjmp	.+338    	; 0x12096 <__vector_39+0x18e>
   11f44:	28 f5       	brcc	.+74     	; 0x11f90 <__vector_39+0x88>
   11f46:	80 31       	cpi	r24, 0x10	; 16
   11f48:	09 f4       	brne	.+2      	; 0x11f4c <__vector_39+0x44>
   11f4a:	9d c0       	rjmp	.+314    	; 0x12086 <__vector_39+0x17e>
   11f4c:	c8 f4       	brcc	.+50     	; 0x11f80 <__vector_39+0x78>
   11f4e:	88 23       	and	r24, r24
   11f50:	09 f4       	brne	.+2      	; 0x11f54 <__vector_39+0x4c>
   11f52:	fb c0       	rjmp	.+502    	; 0x1214a <__vector_39+0x242>
   11f54:	88 30       	cpi	r24, 0x08	; 8
   11f56:	09 f4       	brne	.+2      	; 0x11f5a <__vector_39+0x52>
   11f58:	96 c0       	rjmp	.+300    	; 0x12086 <__vector_39+0x17e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
   11f5a:	ff 91       	pop	r31
   11f5c:	ef 91       	pop	r30
   11f5e:	bf 91       	pop	r27
   11f60:	af 91       	pop	r26
   11f62:	9f 91       	pop	r25
   11f64:	8f 91       	pop	r24
   11f66:	7f 91       	pop	r23
   11f68:	6f 91       	pop	r22
   11f6a:	5f 91       	pop	r21
   11f6c:	4f 91       	pop	r20
   11f6e:	3f 91       	pop	r19
   11f70:	2f 91       	pop	r18
   11f72:	0f 90       	pop	r0
   11f74:	0b be       	out	0x3b, r0	; 59
   11f76:	0f 90       	pop	r0
   11f78:	0f be       	out	0x3f, r0	; 63
   11f7a:	0f 90       	pop	r0
   11f7c:	1f 90       	pop	r1
   11f7e:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11f80:	88 31       	cpi	r24, 0x18	; 24
   11f82:	09 f4       	brne	.+2      	; 0x11f86 <__vector_39+0x7e>
   11f84:	88 c0       	rjmp	.+272    	; 0x12096 <__vector_39+0x18e>
   11f86:	80 32       	cpi	r24, 0x20	; 32
   11f88:	41 f7       	brne	.-48     	; 0x11f5a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
   11f8a:	80 93 2b 11 	sts	0x112B, r24	; 0x80112b <twi_error>
   11f8e:	14 c0       	rjmp	.+40     	; 0x11fb8 <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11f90:	80 34       	cpi	r24, 0x40	; 64
   11f92:	09 f4       	brne	.+2      	; 0x11f96 <__vector_39+0x8e>
   11f94:	9d c0       	rjmp	.+314    	; 0x120d0 <__vector_39+0x1c8>
   11f96:	40 f4       	brcc	.+16     	; 0x11fa8 <__vector_39+0xa0>
   11f98:	80 33       	cpi	r24, 0x30	; 48
   11f9a:	b9 f3       	breq	.-18     	; 0x11f8a <__vector_39+0x82>
   11f9c:	88 33       	cpi	r24, 0x38	; 56
   11f9e:	e9 f6       	brne	.-70     	; 0x11f5a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
   11fa0:	80 93 2b 11 	sts	0x112B, r24	; 0x80112b <twi_error>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   11fa4:	85 ec       	ldi	r24, 0xC5	; 197
   11fa6:	b0 c0       	rjmp	.+352    	; 0x12108 <__vector_39+0x200>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11fa8:	80 35       	cpi	r24, 0x50	; 80
   11faa:	09 f4       	brne	.+2      	; 0x11fae <__vector_39+0xa6>
   11fac:	85 c0       	rjmp	.+266    	; 0x120b8 <__vector_39+0x1b0>
   11fae:	88 35       	cpi	r24, 0x58	; 88
   11fb0:	09 f4       	brne	.+2      	; 0x11fb4 <__vector_39+0xac>
   11fb2:	96 c0       	rjmp	.+300    	; 0x120e0 <__vector_39+0x1d8>
   11fb4:	88 34       	cpi	r24, 0x48	; 72
   11fb6:	89 f6       	brne	.-94     	; 0x11f5a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
   11fb8:	0e 94 c1 7f 	call	0xff82	; 0xff82 <twi_stop>
   11fbc:	ce cf       	rjmp	.-100    	; 0x11f5a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11fbe:	88 39       	cpi	r24, 0x98	; 152
   11fc0:	09 f4       	brne	.+2      	; 0x11fc4 <__vector_39+0xbc>
   11fc2:	8c c0       	rjmp	.+280    	; 0x120dc <__vector_39+0x1d4>
   11fc4:	38 f5       	brcc	.+78     	; 0x12014 <__vector_39+0x10c>
   11fc6:	88 37       	cpi	r24, 0x78	; 120
   11fc8:	29 f0       	breq	.+10     	; 0x11fd4 <__vector_39+0xcc>
   11fca:	50 f4       	brcc	.+20     	; 0x11fe0 <__vector_39+0xd8>
   11fcc:	88 36       	cpi	r24, 0x68	; 104
   11fce:	11 f0       	breq	.+4      	; 0x11fd4 <__vector_39+0xcc>
   11fd0:	80 37       	cpi	r24, 0x70	; 112
   11fd2:	19 f6       	brne	.-122    	; 0x11f5a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
   11fd4:	83 e0       	ldi	r24, 0x03	; 3
   11fd6:	80 93 2d 11 	sts	0x112D, r24	; 0x80112d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
   11fda:	10 92 b8 10 	sts	0x10B8, r1	; 0x8010b8 <twi_rxBufferIndex>
   11fde:	57 c0       	rjmp	.+174    	; 0x1208e <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11fe0:	88 38       	cpi	r24, 0x88	; 136
   11fe2:	09 f4       	brne	.+2      	; 0x11fe6 <__vector_39+0xde>
   11fe4:	7b c0       	rjmp	.+246    	; 0x120dc <__vector_39+0x1d4>
   11fe6:	80 39       	cpi	r24, 0x90	; 144
   11fe8:	19 f0       	breq	.+6      	; 0x11ff0 <__vector_39+0xe8>
   11fea:	80 38       	cpi	r24, 0x80	; 128
   11fec:	09 f0       	breq	.+2      	; 0x11ff0 <__vector_39+0xe8>
   11fee:	b5 cf       	rjmp	.-150    	; 0x11f5a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   11ff0:	80 91 b8 10 	lds	r24, 0x10B8	; 0x8010b8 <twi_rxBufferIndex>
   11ff4:	80 32       	cpi	r24, 0x20	; 32
   11ff6:	08 f0       	brcs	.+2      	; 0x11ffa <__vector_39+0xf2>
   11ff8:	71 c0       	rjmp	.+226    	; 0x120dc <__vector_39+0x1d4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
   11ffa:	e0 91 b8 10 	lds	r30, 0x10B8	; 0x8010b8 <twi_rxBufferIndex>
   11ffe:	81 e0       	ldi	r24, 0x01	; 1
   12000:	8e 0f       	add	r24, r30
   12002:	80 93 b8 10 	sts	0x10B8, r24	; 0x8010b8 <twi_rxBufferIndex>
   12006:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   1200a:	f0 e0       	ldi	r31, 0x00	; 0
   1200c:	e8 56       	subi	r30, 0x68	; 104
   1200e:	ff 4e       	sbci	r31, 0xEF	; 239
   12010:	80 83       	st	Z, r24
   12012:	3d c0       	rjmp	.+122    	; 0x1208e <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12014:	80 3b       	cpi	r24, 0xB0	; 176
   12016:	39 f0       	breq	.+14     	; 0x12026 <__vector_39+0x11e>
   12018:	e0 f4       	brcc	.+56     	; 0x12052 <__vector_39+0x14a>
   1201a:	80 3a       	cpi	r24, 0xA0	; 160
   1201c:	09 f4       	brne	.+2      	; 0x12020 <__vector_39+0x118>
   1201e:	79 c0       	rjmp	.+242    	; 0x12112 <__vector_39+0x20a>
   12020:	88 3a       	cpi	r24, 0xA8	; 168
   12022:	09 f0       	breq	.+2      	; 0x12026 <__vector_39+0x11e>
   12024:	9a cf       	rjmp	.-204    	; 0x11f5a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
   12026:	84 e0       	ldi	r24, 0x04	; 4
   12028:	80 93 2d 11 	sts	0x112D, r24	; 0x80112d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
   1202c:	10 92 97 10 	sts	0x1097, r1	; 0x801097 <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
   12030:	10 92 96 10 	sts	0x1096, r1	; 0x801096 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
   12034:	e0 91 de 10 	lds	r30, 0x10DE	; 0x8010de <twi_onSlaveTransmit>
   12038:	f0 91 df 10 	lds	r31, 0x10DF	; 0x8010df <twi_onSlaveTransmit+0x1>
   1203c:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
   1203e:	80 91 96 10 	lds	r24, 0x1096	; 0x801096 <twi_txBufferLength>
   12042:	81 11       	cpse	r24, r1
   12044:	0f c0       	rjmp	.+30     	; 0x12064 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
   12046:	81 e0       	ldi	r24, 0x01	; 1
   12048:	80 93 96 10 	sts	0x1096, r24	; 0x801096 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
   1204c:	10 92 76 10 	sts	0x1076, r1	; 0x801076 <twi_txBuffer>
   12050:	09 c0       	rjmp	.+18     	; 0x12064 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12052:	80 3c       	cpi	r24, 0xC0	; 192
   12054:	09 f4       	brne	.+2      	; 0x12058 <__vector_39+0x150>
   12056:	a6 cf       	rjmp	.-180    	; 0x11fa4 <__vector_39+0x9c>
   12058:	88 3c       	cpi	r24, 0xC8	; 200
   1205a:	09 f4       	brne	.+2      	; 0x1205e <__vector_39+0x156>
   1205c:	a3 cf       	rjmp	.-186    	; 0x11fa4 <__vector_39+0x9c>
   1205e:	88 3b       	cpi	r24, 0xB8	; 184
   12060:	09 f0       	breq	.+2      	; 0x12064 <__vector_39+0x15c>
   12062:	7b cf       	rjmp	.-266    	; 0x11f5a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
   12064:	e0 91 97 10 	lds	r30, 0x1097	; 0x801097 <twi_txBufferIndex>
   12068:	81 e0       	ldi	r24, 0x01	; 1
   1206a:	8e 0f       	add	r24, r30
   1206c:	80 93 97 10 	sts	0x1097, r24	; 0x801097 <twi_txBufferIndex>
   12070:	f0 e0       	ldi	r31, 0x00	; 0
   12072:	ea 58       	subi	r30, 0x8A	; 138
   12074:	ff 4e       	sbci	r31, 0xEF	; 239
   12076:	80 81       	ld	r24, Z
   12078:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   1207c:	90 91 97 10 	lds	r25, 0x1097	; 0x801097 <twi_txBufferIndex>
   12080:	80 91 96 10 	lds	r24, 0x1096	; 0x801096 <twi_txBufferLength>
   12084:	29 c0       	rjmp	.+82     	; 0x120d8 <__vector_39+0x1d0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
   12086:	80 91 28 11 	lds	r24, 0x1128	; 0x801128 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   1208a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   1208e:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   12090:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   12094:	62 cf       	rjmp	.-316    	; 0x11f5a <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
   12096:	90 91 2a 11 	lds	r25, 0x112A	; 0x80112a <twi_masterBufferIndex>
   1209a:	80 91 29 11 	lds	r24, 0x1129	; 0x801129 <twi_masterBufferLength>
   1209e:	98 17       	cp	r25, r24
   120a0:	58 f5       	brcc	.+86     	; 0x120f8 <__vector_39+0x1f0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   120a2:	e0 91 2a 11 	lds	r30, 0x112A	; 0x80112a <twi_masterBufferIndex>
   120a6:	81 e0       	ldi	r24, 0x01	; 1
   120a8:	8e 0f       	add	r24, r30
   120aa:	80 93 2a 11 	sts	0x112A, r24	; 0x80112a <twi_masterBufferIndex>
   120ae:	f0 e0       	ldi	r31, 0x00	; 0
   120b0:	e9 5f       	subi	r30, 0xF9	; 249
   120b2:	fe 4e       	sbci	r31, 0xEE	; 238
   120b4:	80 81       	ld	r24, Z
   120b6:	e9 cf       	rjmp	.-46     	; 0x1208a <__vector_39+0x182>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   120b8:	e0 91 2a 11 	lds	r30, 0x112A	; 0x80112a <twi_masterBufferIndex>
   120bc:	81 e0       	ldi	r24, 0x01	; 1
   120be:	8e 0f       	add	r24, r30
   120c0:	80 93 2a 11 	sts	0x112A, r24	; 0x80112a <twi_masterBufferIndex>
   120c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   120c8:	f0 e0       	ldi	r31, 0x00	; 0
   120ca:	e9 5f       	subi	r30, 0xF9	; 249
   120cc:	fe 4e       	sbci	r31, 0xEE	; 238
   120ce:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
   120d0:	90 91 2a 11 	lds	r25, 0x112A	; 0x80112a <twi_masterBufferIndex>
   120d4:	80 91 29 11 	lds	r24, 0x1129	; 0x801129 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   120d8:	98 17       	cp	r25, r24
   120da:	c8 f2       	brcs	.-78     	; 0x1208e <__vector_39+0x186>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   120dc:	85 e8       	ldi	r24, 0x85	; 133
   120de:	d8 cf       	rjmp	.-80     	; 0x12090 <__vector_39+0x188>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   120e0:	e0 91 2a 11 	lds	r30, 0x112A	; 0x80112a <twi_masterBufferIndex>
   120e4:	81 e0       	ldi	r24, 0x01	; 1
   120e6:	8e 0f       	add	r24, r30
   120e8:	80 93 2a 11 	sts	0x112A, r24	; 0x80112a <twi_masterBufferIndex>
   120ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   120f0:	f0 e0       	ldi	r31, 0x00	; 0
   120f2:	e9 5f       	subi	r30, 0xF9	; 249
   120f4:	fe 4e       	sbci	r31, 0xEE	; 238
   120f6:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
   120f8:	80 91 2c 11 	lds	r24, 0x112C	; 0x80112c <twi_sendStop>
   120fc:	81 11       	cpse	r24, r1
   120fe:	5c cf       	rjmp	.-328    	; 0x11fb8 <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
   12100:	81 e0       	ldi	r24, 0x01	; 1
   12102:	80 93 27 11 	sts	0x1127, r24	; 0x801127 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
   12106:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   12108:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
   1210c:	10 92 2d 11 	sts	0x112D, r1	; 0x80112d <twi_state>
   12110:	24 cf       	rjmp	.-440    	; 0x11f5a <__vector_39+0x52>
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
   12112:	85 ec       	ldi	r24, 0xC5	; 197
   12114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
   12118:	10 92 2d 11 	sts	0x112D, r1	; 0x80112d <twi_state>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   1211c:	80 91 b8 10 	lds	r24, 0x10B8	; 0x8010b8 <twi_rxBufferIndex>
   12120:	80 32       	cpi	r24, 0x20	; 32
   12122:	30 f4       	brcc	.+12     	; 0x12130 <__vector_39+0x228>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
   12124:	e0 91 b8 10 	lds	r30, 0x10B8	; 0x8010b8 <twi_rxBufferIndex>
   12128:	f0 e0       	ldi	r31, 0x00	; 0
   1212a:	e8 56       	subi	r30, 0x68	; 104
   1212c:	ff 4e       	sbci	r31, 0xEF	; 239
   1212e:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
   12130:	60 91 b8 10 	lds	r22, 0x10B8	; 0x8010b8 <twi_rxBufferIndex>
   12134:	70 e0       	ldi	r23, 0x00	; 0
   12136:	e0 91 dc 10 	lds	r30, 0x10DC	; 0x8010dc <twi_onSlaveReceive>
   1213a:	f0 91 dd 10 	lds	r31, 0x10DD	; 0x8010dd <twi_onSlaveReceive+0x1>
   1213e:	88 e9       	ldi	r24, 0x98	; 152
   12140:	90 e1       	ldi	r25, 0x10	; 16
   12142:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
   12144:	10 92 b8 10 	sts	0x10B8, r1	; 0x8010b8 <twi_rxBufferIndex>
   12148:	08 cf       	rjmp	.-496    	; 0x11f5a <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
   1214a:	10 92 2b 11 	sts	0x112B, r1	; 0x80112b <twi_error>
   1214e:	34 cf       	rjmp	.-408    	; 0x11fb8 <__vector_39+0xb0>

00012150 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
   12150:	20 91 e3 10 	lds	r18, 0x10E3	; 0x8010e3 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
   12154:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
   12156:	21 32       	cpi	r18, 0x21	; 33
   12158:	08 f0       	brcs	.+2      	; 0x1215c <TwoWire::endTransmission()+0xc>
   1215a:	44 c0       	rjmp	.+136    	; 0x121e4 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
   1215c:	80 91 2d 11 	lds	r24, 0x112D	; 0x80112d <twi_state>
   12160:	81 11       	cpse	r24, r1
   12162:	fc cf       	rjmp	.-8      	; 0x1215c <TwoWire::endTransmission()+0xc>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
   12164:	80 91 e5 10 	lds	r24, 0x10E5	; 0x8010e5 <TwoWire::txAddress>
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
   12168:	92 e0       	ldi	r25, 0x02	; 2
   1216a:	90 93 2d 11 	sts	0x112D, r25	; 0x80112d <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:240
  twi_sendStop = sendStop;
   1216e:	91 e0       	ldi	r25, 0x01	; 1
   12170:	90 93 2c 11 	sts	0x112C, r25	; 0x80112c <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:242
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
   12174:	9f ef       	ldi	r25, 0xFF	; 255
   12176:	90 93 2b 11 	sts	0x112B, r25	; 0x80112b <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
   1217a:	10 92 2a 11 	sts	0x112A, r1	; 0x80112a <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:246
  twi_masterBufferLength = length;
   1217e:	20 93 29 11 	sts	0x1129, r18	; 0x801129 <twi_masterBufferLength>
   12182:	a6 e5       	ldi	r26, 0x56	; 86
   12184:	b0 e1       	ldi	r27, 0x10	; 16
   12186:	e7 e0       	ldi	r30, 0x07	; 7
   12188:	f1 e1       	ldi	r31, 0x11	; 17
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
   1218a:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
   1218c:	29 13       	cpse	r18, r25
   1218e:	31 c0       	rjmp	.+98     	; 0x121f2 <TwoWire::endTransmission()+0xa2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
   12190:	10 92 28 11 	sts	0x1128, r1	; 0x801128 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:255
  twi_slarw |= address << 1;
   12194:	90 91 28 11 	lds	r25, 0x1128	; 0x801128 <twi_slarw>
   12198:	88 0f       	add	r24, r24
   1219a:	89 2b       	or	r24, r25
   1219c:	80 93 28 11 	sts	0x1128, r24	; 0x801128 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:260

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
   121a0:	80 91 27 11 	lds	r24, 0x1127	; 0x801127 <twi_inRepStart>
   121a4:	81 30       	cpi	r24, 0x01	; 1
   121a6:	49 f5       	brne	.+82     	; 0x121fa <TwoWire::endTransmission()+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
   121a8:	10 92 27 11 	sts	0x1127, r1	; 0x801127 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:269
    do {
      TWDR = twi_slarw;
   121ac:	80 91 28 11 	lds	r24, 0x1128	; 0x801128 <twi_slarw>
   121b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:270
    } while(TWCR & _BV(TWWC));
   121b4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   121b8:	83 fd       	sbrc	r24, 3
   121ba:	f8 cf       	rjmp	.-16     	; 0x121ac <TwoWire::endTransmission()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
   121bc:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
   121be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
   121c2:	80 91 2d 11 	lds	r24, 0x112D	; 0x80112d <twi_state>
   121c6:	82 30       	cpi	r24, 0x02	; 2
   121c8:	e1 f3       	breq	.-8      	; 0x121c2 <TwoWire::endTransmission()+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:282
    continue;
  }

  if (twi_error == 0xFF)
   121ca:	80 91 2b 11 	lds	r24, 0x112B	; 0x80112b <twi_error>
   121ce:	8f 3f       	cpi	r24, 0xFF	; 255
   121d0:	b1 f0       	breq	.+44     	; 0x121fe <TwoWire::endTransmission()+0xae>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
   121d2:	80 91 2b 11 	lds	r24, 0x112B	; 0x80112b <twi_error>
   121d6:	80 32       	cpi	r24, 0x20	; 32
   121d8:	a1 f0       	breq	.+40     	; 0x12202 <TwoWire::endTransmission()+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
   121da:	80 91 2b 11 	lds	r24, 0x112B	; 0x80112b <twi_error>
   121de:	80 33       	cpi	r24, 0x30	; 48
   121e0:	91 f0       	breq	.+36     	; 0x12206 <TwoWire::endTransmission()+0xb6>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
   121e2:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:175
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   121e4:	10 92 e4 10 	sts	0x10E4, r1	; 0x8010e4 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:176
  txBufferLength = 0;
   121e8:	10 92 e3 10 	sts	0x10E3, r1	; 0x8010e3 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:178
  // indicate that we are done transmitting
  transmitting = 0;
   121ec:	10 92 e6 10 	sts	0x10E6, r1	; 0x8010e6 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:188
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
   121f0:	08 95       	ret
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
   121f2:	3d 91       	ld	r19, X+
   121f4:	31 93       	st	Z+, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
   121f6:	9f 5f       	subi	r25, 0xFF	; 255
   121f8:	c9 cf       	rjmp	.-110    	; 0x1218c <TwoWire::endTransmission()+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
   121fa:	85 ee       	ldi	r24, 0xE5	; 229
   121fc:	e0 cf       	rjmp	.-64     	; 0x121be <TwoWire::endTransmission()+0x6e>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }

  if (twi_error == 0xFF)
    return 0; // success
   121fe:	80 e0       	ldi	r24, 0x00	; 0
   12200:	f1 cf       	rjmp	.-30     	; 0x121e4 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
   12202:	82 e0       	ldi	r24, 0x02	; 2
   12204:	ef cf       	rjmp	.-34     	; 0x121e4 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
   12206:	83 e0       	ldi	r24, 0x03	; 3
   12208:	ed cf       	rjmp	.-38     	; 0x121e4 <TwoWire::endTransmission()+0x94>

0001220a <RTC_DS1307::isrunning() [clone .constprop.127]>:
_ZN10RTC_DS13079isrunningEv.constprop.127():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   1220a:	88 e6       	ldi	r24, 0x68	; 104
   1220c:	0e 94 2d 84 	call	0x1085a	; 0x1085a <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
   12210:	60 e0       	ldi	r22, 0x00	; 0
   12212:	87 ef       	ldi	r24, 0xF7	; 247
   12214:	9d e0       	ldi	r25, 0x0D	; 13
   12216:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   1221a:	87 ef       	ldi	r24, 0xF7	; 247
   1221c:	9d e0       	ldi	r25, 0x0D	; 13
   1221e:	0e 94 a8 90 	call	0x12150	; 0x12150 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   12222:	81 e0       	ldi	r24, 0x01	; 1
   12224:	90 e0       	ldi	r25, 0x00	; 0
   12226:	0e 94 66 82 	call	0x104cc	; 0x104cc <TwoWire::requestFrom(int, int) [clone .constprop.129]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   1222a:	0e 94 6d 7e 	call	0xfcda	; 0xfcda <TwoWire::read() [clone .constprop.130]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   1222e:	80 58       	subi	r24, 0x80	; 128
   12230:	87 fb       	bst	r24, 7
   12232:	88 27       	eor	r24, r24
   12234:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   12236:	08 95       	ret

00012238 <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:170
	if(i2c_write(DS2482_C_DRST)==FALSE) { i2c_stop();return DS2482_ERR_WRITE; }
	i2c_stop();
	return DS2482_ERR_OK;
	*/        

        Wire.beginTransmission(address);
   12238:	0e 94 2d 84 	call	0x1085a	; 0x1085a <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:171
        Wire.write(DS2482_C_DRST);
   1223c:	80 ef       	ldi	r24, 0xF0	; 240
   1223e:	90 e0       	ldi	r25, 0x00	; 0
   12240:	0e 94 d5 85 	call	0x10baa	; 0x10baa <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:172
        if (Wire.endTransmission() == I2C_ERROR_OK)
   12244:	87 ef       	ldi	r24, 0xF7	; 247
   12246:	9d e0       	ldi	r25, 0x0D	; 13
   12248:	0e 94 a8 90 	call	0x12150	; 0x12150 <TwoWire::endTransmission()>
   1224c:	81 11       	cpse	r24, r1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:175
          return DS2482_ERR_OK;
        else
          return DS2482_ERR_I2C_DEVICE;        
   1224e:	8a e0       	ldi	r24, 0x0A	; 10
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:177

}
   12250:	08 95       	ret

00012252 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:127
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
   12252:	86 2f       	mov	r24, r22
twi_readFrom():
   12254:	64 2f       	mov	r22, r20
   12256:	0e 94 18 7e 	call	0xfc30	; 0xfc30 <twi_readFrom.part.0.constprop.169>
requestFrom():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   1225a:	10 92 e2 10 	sts	0x10E2, r1	; 0x8010e2 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   1225e:	80 93 e1 10 	sts	0x10E1, r24	; 0x8010e1 <TwoWire::rxBufferLength>
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:129
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   12262:	08 95       	ret

00012264 <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
   12264:	ff 92       	push	r15
   12266:	0f 93       	push	r16
   12268:	1f 93       	push	r17
   1226a:	cf 93       	push	r28
   1226c:	df 93       	push	r29
   1226e:	d8 2f       	mov	r29, r24
   12270:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
   12272:	0e 94 2d 84 	call	0x1085a	; 0x1085a <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
   12276:	86 e9       	ldi	r24, 0x96	; 150
   12278:	90 e0       	ldi	r25, 0x00	; 0
   1227a:	0e 94 d5 85 	call	0x10baa	; 0x10baa <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1227e:	87 ef       	ldi	r24, 0xF7	; 247
   12280:	9d e0       	ldi	r25, 0x0D	; 13
   12282:	0e 94 a8 90 	call	0x12150	; 0x12150 <TwoWire::endTransmission()>
   12286:	ce ef       	ldi	r28, 0xFE	; 254
   12288:	88 23       	and	r24, r24
   1228a:	41 f0       	breq	.+16     	; 0x1229c <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
   1228c:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809
	Wire.requestFrom(address, cnt);	
        if ( Wire.available() >= 1 )
             *byte = Wire.read();	

	return DS2482_ERR_OK;
}
   1228e:	8c 2f       	mov	r24, r28
   12290:	df 91       	pop	r29
   12292:	cf 91       	pop	r28
   12294:	1f 91       	pop	r17
   12296:	0f 91       	pop	r16
   12298:	ff 90       	pop	r15
   1229a:	08 95       	ret
   1229c:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   1229e:	e1 f1       	breq	.+120    	; 0x12318 <ds2482owReadByte(unsigned char, unsigned char*)+0xb4>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   122a0:	41 e0       	ldi	r20, 0x01	; 1
   122a2:	6d 2f       	mov	r22, r29
   122a4:	87 ef       	ldi	r24, 0xF7	; 247
   122a6:	9d e0       	ldi	r25, 0x0D	; 13
   122a8:	0e 94 29 91 	call	0x12252	; 0x12252 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
   122ac:	80 91 e1 10 	lds	r24, 0x10E1	; 0x8010e1 <TwoWire::rxBufferLength>
   122b0:	90 91 e2 10 	lds	r25, 0x10E2	; 0x8010e2 <TwoWire::rxBufferIndex>
   122b4:	89 1b       	sub	r24, r25
   122b6:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
   122b8:	18 16       	cp	r1, r24
   122ba:	19 06       	cpc	r1, r25
   122bc:	1c f4       	brge	.+6      	; 0x122c4 <ds2482owReadByte(unsigned char, unsigned char*)+0x60>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
   122be:	0e 94 6d 7e 	call	0xfcda	; 0xfcda <TwoWire::read() [clone .constprop.130]>
   122c2:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
   122c4:	f0 fc       	sbrc	r15, 0
   122c6:	ea cf       	rjmp	.-44     	; 0x1229c <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
ds2482setReadPointer():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:258
	if(i2c_write(pointer)==FALSE){i2c_stop(); return DS2482_ERR_WRITE;}
	i2c_stop();
	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
   122c8:	8d 2f       	mov	r24, r29
   122ca:	0e 94 2d 84 	call	0x1085a	; 0x1085a <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:259
        Wire.write(DS2482_C_SRP);
   122ce:	81 ee       	ldi	r24, 0xE1	; 225
   122d0:	90 e0       	ldi	r25, 0x00	; 0
   122d2:	0e 94 d5 85 	call	0x10baa	; 0x10baa <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:260
        Wire.write(pointer);
   122d6:	61 ee       	ldi	r22, 0xE1	; 225
   122d8:	87 ef       	ldi	r24, 0xF7	; 247
   122da:	9d e0       	ldi	r25, 0x0D	; 13
   122dc:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:261
        if (Wire.endTransmission() == I2C_ERROR_OK)
   122e0:	87 ef       	ldi	r24, 0xF7	; 247
   122e2:	9d e0       	ldi	r25, 0x0D	; 13
   122e4:	0e 94 a8 90 	call	0x12150	; 0x12150 <TwoWire::endTransmission()>
   122e8:	c8 2f       	mov	r28, r24
   122ea:	81 11       	cpse	r24, r1
   122ec:	cf cf       	rjmp	.-98     	; 0x1228c <ds2482owReadByte(unsigned char, unsigned char*)+0x28>
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
   122ee:	41 e0       	ldi	r20, 0x01	; 1
   122f0:	6d 2f       	mov	r22, r29
   122f2:	87 ef       	ldi	r24, 0xF7	; 247
   122f4:	9d e0       	ldi	r25, 0x0D	; 13
   122f6:	0e 94 29 91 	call	0x12252	; 0x12252 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   122fa:	80 91 e1 10 	lds	r24, 0x10E1	; 0x8010e1 <TwoWire::rxBufferLength>
   122fe:	90 91 e2 10 	lds	r25, 0x10E2	; 0x8010e2 <TwoWire::rxBufferIndex>
   12302:	89 1b       	sub	r24, r25
   12304:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
   12306:	18 16       	cp	r1, r24
   12308:	19 06       	cpc	r1, r25
   1230a:	0c f0       	brlt	.+2      	; 0x1230e <ds2482owReadByte(unsigned char, unsigned char*)+0xaa>
   1230c:	c0 cf       	rjmp	.-128    	; 0x1228e <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
   1230e:	0e 94 6d 7e 	call	0xfcda	; 0xfcda <TwoWire::read() [clone .constprop.130]>
   12312:	f8 01       	movw	r30, r16
   12314:	80 83       	st	Z, r24
   12316:	bb cf       	rjmp	.-138    	; 0x1228e <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   12318:	c4 e0       	ldi	r28, 0x04	; 4
   1231a:	b9 cf       	rjmp	.-142    	; 0x1228e <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>

0001231c <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
   1231c:	0f 93       	push	r16
   1231e:	1f 93       	push	r17
   12320:	cf 93       	push	r28
   12322:	df 93       	push	r29
   12324:	08 2f       	mov	r16, r24
   12326:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   12328:	0e 94 2d 84 	call	0x1085a	; 0x1085a <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
   1232c:	85 ea       	ldi	r24, 0xA5	; 165
   1232e:	90 e0       	ldi	r25, 0x00	; 0
   12330:	0e 94 d5 85 	call	0x10baa	; 0x10baa <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
   12334:	6d 2f       	mov	r22, r29
   12336:	87 ef       	ldi	r24, 0xF7	; 247
   12338:	9d e0       	ldi	r25, 0x0D	; 13
   1233a:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1233e:	87 ef       	ldi	r24, 0xF7	; 247
   12340:	9d e0       	ldi	r25, 0x0D	; 13
   12342:	0e 94 a8 90 	call	0x12150	; 0x12150 <TwoWire::endTransmission()>
   12346:	c8 2f       	mov	r28, r24
   12348:	81 11       	cpse	r24, r1
   1234a:	1d c0       	rjmp	.+58     	; 0x12386 <ds2482owWriteByte(unsigned char, unsigned char)+0x6a>
   1234c:	1e ef       	ldi	r17, 0xFE	; 254
   1234e:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
   12350:	e1 f0       	breq	.+56     	; 0x1238a <ds2482owWriteByte(unsigned char, unsigned char)+0x6e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   12352:	41 e0       	ldi	r20, 0x01	; 1
   12354:	60 2f       	mov	r22, r16
   12356:	87 ef       	ldi	r24, 0xF7	; 247
   12358:	9d e0       	ldi	r25, 0x0D	; 13
   1235a:	0e 94 29 91 	call	0x12252	; 0x12252 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   1235e:	80 91 e1 10 	lds	r24, 0x10E1	; 0x8010e1 <TwoWire::rxBufferLength>
   12362:	90 91 e2 10 	lds	r25, 0x10E2	; 0x8010e2 <TwoWire::rxBufferIndex>
   12366:	89 1b       	sub	r24, r25
   12368:	99 0b       	sbc	r25, r25
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
   1236a:	18 16       	cp	r1, r24
   1236c:	19 06       	cpc	r1, r25
   1236e:	1c f4       	brge	.+6      	; 0x12376 <ds2482owWriteByte(unsigned char, unsigned char)+0x5a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
   12370:	0e 94 6d 7e 	call	0xfcda	; 0xfcda <TwoWire::read() [clone .constprop.130]>
   12374:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
   12376:	d0 fd       	sbrc	r29, 0
   12378:	ea cf       	rjmp	.-44     	; 0x1234e <ds2482owWriteByte(unsigned char, unsigned char)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
   1237a:	8c 2f       	mov	r24, r28
   1237c:	df 91       	pop	r29
   1237e:	cf 91       	pop	r28
   12380:	1f 91       	pop	r17
   12382:	0f 91       	pop	r16
   12384:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   12386:	c3 e0       	ldi	r28, 0x03	; 3
   12388:	f8 cf       	rjmp	.-16     	; 0x1237a <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
   1238a:	c4 e0       	ldi	r28, 0x04	; 4
   1238c:	f6 cf       	rjmp	.-20     	; 0x1237a <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>

0001238e <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:48
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t owMatchRom(uint8_t ds2482_address, uint8_t *rom)
{
   1238e:	ef 92       	push	r14
   12390:	ff 92       	push	r15
   12392:	1f 93       	push	r17
   12394:	cf 93       	push	r28
   12396:	df 93       	push	r29
   12398:	18 2f       	mov	r17, r24
   1239a:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:50
	uint8_t r;
	r = ds2482owWriteByte(ds2482_address, OW_MATCH_ROM);
   1239c:	65 e5       	ldi	r22, 0x55	; 85
   1239e:	0e 94 8e 91 	call	0x1231c	; 0x1231c <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:51
	if(r)
   123a2:	81 11       	cpse	r24, r1
   123a4:	0d c0       	rjmp	.+26     	; 0x123c0 <owMatchRom(unsigned char, unsigned char*)+0x32>
   123a6:	e7 01       	movw	r28, r14
   123a8:	88 e0       	ldi	r24, 0x08	; 8
   123aa:	e8 0e       	add	r14, r24
   123ac:	f1 1c       	adc	r15, r1
owWriteBlock():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:29
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
	{
		r = ds2482owWriteByte(ds2482_address, *(block+c));
   123ae:	69 91       	ld	r22, Y+
   123b0:	81 2f       	mov	r24, r17
   123b2:	0e 94 8e 91 	call	0x1231c	; 0x1231c <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:30
		if(r)
   123b6:	81 11       	cpse	r24, r1
   123b8:	03 c0       	rjmp	.+6      	; 0x123c0 <owMatchRom(unsigned char, unsigned char*)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:27
 */
uint8_t owWriteBlock(uint8_t ds2482_address, uint8_t *block, uint8_t length)
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
   123ba:	ec 16       	cp	r14, r28
   123bc:	fd 06       	cpc	r15, r29
   123be:	b9 f7       	brne	.-18     	; 0x123ae <owMatchRom(unsigned char, unsigned char*)+0x20>
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:59
	r = owWriteBlock(ds2482_address, rom, 8);
	if(r)
		return r;
	
	return DS2482_ERR_OK;
}
   123c0:	df 91       	pop	r29
   123c2:	cf 91       	pop	r28
   123c4:	1f 91       	pop	r17
   123c6:	ff 90       	pop	r15
   123c8:	ef 90       	pop	r14
   123ca:	08 95       	ret

000123cc <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
   123cc:	0f 93       	push	r16
   123ce:	1f 93       	push	r17
   123d0:	cf 93       	push	r28
   123d2:	df 93       	push	r29
   123d4:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   123d6:	0e 94 2d 84 	call	0x1085a	; 0x1085a <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
   123da:	84 eb       	ldi	r24, 0xB4	; 180
   123dc:	90 e0       	ldi	r25, 0x00	; 0
   123de:	0e 94 d5 85 	call	0x10baa	; 0x10baa <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
   123e2:	87 ef       	ldi	r24, 0xF7	; 247
   123e4:	9d e0       	ldi	r25, 0x0D	; 13
   123e6:	0e 94 a8 90 	call	0x12150	; 0x12150 <TwoWire::endTransmission()>
   123ea:	c8 2f       	mov	r28, r24
   123ec:	81 11       	cpse	r24, r1
   123ee:	1b c0       	rjmp	.+54     	; 0x12426 <ds2482owReset(unsigned char)+0x5a>
   123f0:	de ef       	ldi	r29, 0xFE	; 254
   123f2:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
   123f4:	f9 f0       	breq	.+62     	; 0x12434 <ds2482owReset(unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
   123f6:	41 e0       	ldi	r20, 0x01	; 1
   123f8:	60 2f       	mov	r22, r16
   123fa:	87 ef       	ldi	r24, 0xF7	; 247
   123fc:	9d e0       	ldi	r25, 0x0D	; 13
   123fe:	0e 94 29 91 	call	0x12252	; 0x12252 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   12402:	80 91 e1 10 	lds	r24, 0x10E1	; 0x8010e1 <TwoWire::rxBufferLength>
   12406:	90 91 e2 10 	lds	r25, 0x10E2	; 0x8010e2 <TwoWire::rxBufferIndex>
   1240a:	89 1b       	sub	r24, r25
   1240c:	99 0b       	sbc	r25, r25
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
   1240e:	18 16       	cp	r1, r24
   12410:	19 06       	cpc	r1, r25
   12412:	1c f4       	brge	.+6      	; 0x1241a <ds2482owReset(unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
   12414:	0e 94 6d 7e 	call	0xfcda	; 0xfcda <TwoWire::read() [clone .constprop.130]>
   12418:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
   1241a:	10 fd       	sbrc	r17, 0
   1241c:	ea cf       	rjmp	.-44     	; 0x123f2 <ds2482owReset(unsigned char)+0x26>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
   1241e:	11 fd       	sbrc	r17, 1
   12420:	03 c0       	rjmp	.+6      	; 0x12428 <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
   12422:	c5 e0       	ldi	r28, 0x05	; 5
   12424:	01 c0       	rjmp	.+2      	; 0x12428 <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   12426:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
   12428:	8c 2f       	mov	r24, r28
   1242a:	df 91       	pop	r29
   1242c:	cf 91       	pop	r28
   1242e:	1f 91       	pop	r17
   12430:	0f 91       	pop	r16
   12432:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
   12434:	c4 e0       	ldi	r28, 0x04	; 4
   12436:	f8 cf       	rjmp	.-16     	; 0x12428 <ds2482owReset(unsigned char)+0x5c>

00012438 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>:
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:122
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
   12438:	df 92       	push	r13
   1243a:	ef 92       	push	r14
   1243c:	ff 92       	push	r15
   1243e:	0f 93       	push	r16
   12440:	1f 93       	push	r17
   12442:	cf 93       	push	r28
   12444:	df 93       	push	r29
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   12446:	90 91 62 0b 	lds	r25, 0x0B62	; 0x800b62 <lastDevice>
   1244a:	99 23       	and	r25, r25
   1244c:	51 f0       	breq	.+20     	; 0x12462 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   1244e:	d5 e0       	ldi	r29, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   12450:	8d 2f       	mov	r24, r29
   12452:	df 91       	pop	r29
   12454:	cf 91       	pop	r28
   12456:	1f 91       	pop	r17
   12458:	0f 91       	pop	r16
   1245a:	ff 90       	pop	r15
   1245c:	ef 90       	pop	r14
   1245e:	df 90       	pop	r13
   12460:	08 95       	ret
   12462:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
	serial_byte_number = 0;

	if(lastDevice)
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   12464:	0e 94 e6 91 	call	0x123cc	; 0x123cc <ds2482owReset(unsigned char)>
   12468:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   1246a:	81 11       	cpse	r24, r1
   1246c:	f1 cf       	rjmp	.-30     	; 0x12450 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   1246e:	60 ef       	ldi	r22, 0xF0	; 240
   12470:	8f 2d       	mov	r24, r15
   12472:	0e 94 8e 91 	call	0x1231c	; 0x1231c <ds2482owWriteByte(unsigned char, unsigned char)>
   12476:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   12478:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   1247a:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   1247c:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   1247e:	81 11       	cpse	r24, r1
   12480:	e7 cf       	rjmp	.-50     	; 0x12450 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	
	while(serial_byte_number < 8)
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   12482:	80 91 59 0b 	lds	r24, 0x0B59	; 0x800b59 <lastDiscrepancy>
   12486:	08 17       	cp	r16, r24
   12488:	50 f4       	brcc	.+20     	; 0x1249e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   1248a:	ee 2d       	mov	r30, r14
   1248c:	f0 e0       	ldi	r31, 0x00	; 0
   1248e:	e6 5a       	subi	r30, 0xA6	; 166
   12490:	f4 4f       	sbci	r31, 0xF4	; 244
   12492:	80 81       	ld	r24, Z
   12494:	81 23       	and	r24, r17
   12496:	c1 e0       	ldi	r28, 0x01	; 1
   12498:	29 f4       	brne	.+10     	; 0x124a4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x6c>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   1249a:	c0 e0       	ldi	r28, 0x00	; 0
   1249c:	03 c0       	rjmp	.+6      	; 0x124a4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x6c>
   1249e:	c1 e0       	ldi	r28, 0x01	; 1
   124a0:	80 13       	cpse	r24, r16
   124a2:	fb cf       	rjmp	.-10     	; 0x1249a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x62>
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   124a4:	8f 2d       	mov	r24, r15
   124a6:	0e 94 2d 84 	call	0x1085a	; 0x1085a <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   124aa:	88 e7       	ldi	r24, 0x78	; 120
   124ac:	90 e0       	ldi	r25, 0x00	; 0
   124ae:	0e 94 d5 85 	call	0x10baa	; 0x10baa <TwoWire::write(int) [clone .constprop.99]>
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   124b2:	90 e0       	ldi	r25, 0x00	; 0
   124b4:	80 e0       	ldi	r24, 0x00	; 0
ds2482owWriteTriplet():
   124b6:	cc 23       	and	r28, r28
   124b8:	11 f0       	breq	.+4      	; 0x124be <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x86>
_Z11owMatchNexthPh.constprop.97():
   124ba:	80 e8       	ldi	r24, 0x80	; 128
   124bc:	90 e0       	ldi	r25, 0x00	; 0
ds2482owWriteTriplet():
   124be:	0e 94 d5 85 	call	0x10baa	; 0x10baa <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669
        if (Wire.endTransmission() != I2C_ERROR_OK)
   124c2:	87 ef       	ldi	r24, 0xF7	; 247
   124c4:	9d e0       	ldi	r25, 0x0D	; 13
   124c6:	0e 94 a8 90 	call	0x12150	; 0x12150 <TwoWire::endTransmission()>
   124ca:	81 11       	cpse	r24, r1
   124cc:	53 c0       	rjmp	.+166    	; 0x12574 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x13c>
   124ce:	6e ef       	ldi	r22, 0xFE	; 254
   124d0:	d6 2e       	mov	r13, r22
   124d2:	da 94       	dec	r13
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   124d4:	dd 20       	and	r13, r13
   124d6:	09 f4       	brne	.+2      	; 0x124da <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xa2>
   124d8:	4f c0       	rjmp	.+158    	; 0x12578 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x140>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   124da:	41 e0       	ldi	r20, 0x01	; 1
   124dc:	6f 2d       	mov	r22, r15
   124de:	87 ef       	ldi	r24, 0xF7	; 247
   124e0:	9d e0       	ldi	r25, 0x0D	; 13
   124e2:	0e 94 29 91 	call	0x12252	; 0x12252 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   124e6:	80 91 e1 10 	lds	r24, 0x10E1	; 0x8010e1 <TwoWire::rxBufferLength>
   124ea:	90 91 e2 10 	lds	r25, 0x10E2	; 0x8010e2 <TwoWire::rxBufferIndex>
   124ee:	89 1b       	sub	r24, r25
   124f0:	99 0b       	sbc	r25, r25
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   124f2:	18 16       	cp	r1, r24
   124f4:	19 06       	cpc	r1, r25
   124f6:	1c f4       	brge	.+6      	; 0x124fe <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xc6>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   124f8:	0e 94 6d 7e 	call	0xfcda	; 0xfcda <TwoWire::read() [clone .constprop.130]>
   124fc:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   124fe:	c0 fd       	sbrc	r28, 0
   12500:	e8 cf       	rjmp	.-48     	; 0x124d2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x9a>
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		r=ds2482owWriteTriplet(ds2482_address, &direction);
		if(r) return r;

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   12502:	2c 2f       	mov	r18, r28
   12504:	30 e0       	ldi	r19, 0x00	; 0
   12506:	c9 01       	movw	r24, r18
   12508:	45 e0       	ldi	r20, 0x05	; 5
   1250a:	95 95       	asr	r25
   1250c:	87 95       	ror	r24
   1250e:	4a 95       	dec	r20
   12510:	e1 f7       	brne	.-8      	; 0x1250a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xd2>
   12512:	83 70       	andi	r24, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   12514:	22 0f       	add	r18, r18
   12516:	23 2f       	mov	r18, r19
   12518:	22 1f       	adc	r18, r18
   1251a:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   1251c:	83 30       	cpi	r24, 0x03	; 3
   1251e:	99 f0       	breq	.+38     	; 0x12546 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x10e>
   12520:	ee 2d       	mov	r30, r14
   12522:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   12524:	81 11       	cpse	r24, r1
   12526:	1b c0       	rjmp	.+54     	; 0x1255e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x126>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   12528:	22 23       	and	r18, r18
   1252a:	11 f1       	breq	.+68     	; 0x12570 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x138>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   1252c:	e6 5a       	subi	r30, 0xA6	; 166
   1252e:	f4 4f       	sbci	r31, 0xF4	; 244
   12530:	80 81       	ld	r24, Z
   12532:	81 2b       	or	r24, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   12534:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   12536:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   12538:	11 0f       	add	r17, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   1253a:	11 f4       	brne	.+4      	; 0x12540 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   1253c:	e3 94       	inc	r14
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   1253e:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   12540:	88 e0       	ldi	r24, 0x08	; 8
   12542:	e8 12       	cpse	r14, r24
   12544:	9e cf       	rjmp	.-196    	; 0x12482 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x4a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   12546:	01 34       	cpi	r16, 0x41	; 65
   12548:	08 f4       	brcc	.+2      	; 0x1254c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x114>
   1254a:	81 cf       	rjmp	.-254    	; 0x1244e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x16>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   1254c:	d0 93 59 0b 	sts	0x0B59, r29	; 0x800b59 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   12550:	81 e0       	ldi	r24, 0x01	; 1
   12552:	d1 11       	cpse	r29, r1
   12554:	80 e0       	ldi	r24, 0x00	; 0
   12556:	80 93 62 0b 	sts	0x0B62, r24	; 0x800b62 <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:189
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
   1255a:	d0 e0       	ldi	r29, 0x00	; 0
   1255c:	79 cf       	rjmp	.-270    	; 0x12450 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   1255e:	21 11       	cpse	r18, r1
   12560:	e5 cf       	rjmp	.-54     	; 0x1252c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xf4>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   12562:	e6 5a       	subi	r30, 0xA6	; 166
   12564:	f4 4f       	sbci	r31, 0xF4	; 244
   12566:	80 81       	ld	r24, Z
   12568:	91 2f       	mov	r25, r17
   1256a:	90 95       	com	r25
   1256c:	89 23       	and	r24, r25
   1256e:	e2 cf       	rjmp	.-60     	; 0x12534 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xfc>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   12570:	d0 2f       	mov	r29, r16
   12572:	f7 cf       	rjmp	.-18     	; 0x12562 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x12a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   12574:	d3 e0       	ldi	r29, 0x03	; 3
   12576:	6c cf       	rjmp	.-296    	; 0x12450 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   12578:	d4 e0       	ldi	r29, 0x04	; 4
   1257a:	6a cf       	rjmp	.-300    	; 0x12450 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>

0001257c <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:254

void RTC_DS1307::adjust(const DateTime& dt) {
   1257c:	1f 93       	push	r17
   1257e:	cf 93       	push	r28
   12580:	df 93       	push	r29
   12582:	ec 01       	movw	r28, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   12584:	88 e6       	ldi	r24, 0x68	; 104
   12586:	0e 94 2d 84 	call	0x1085a	; 0x1085a <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:256
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
   1258a:	60 e0       	ldi	r22, 0x00	; 0
   1258c:	87 ef       	ldi	r24, 0xF7	; 247
   1258e:	9d e0       	ldi	r25, 0x0D	; 13
   12590:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>
   12594:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   12596:	1a e0       	ldi	r17, 0x0A	; 10
   12598:	82 2f       	mov	r24, r18
   1259a:	61 2f       	mov	r22, r17
   1259c:	0e 94 a2 b5 	call	0x16b44	; 0x16b44 <__udivmodqi4>
   125a0:	68 2f       	mov	r22, r24
   125a2:	66 0f       	add	r22, r22
   125a4:	68 0f       	add	r22, r24
   125a6:	66 0f       	add	r22, r22
   125a8:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:258

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
   125aa:	87 ef       	ldi	r24, 0xF7	; 247
   125ac:	9d e0       	ldi	r25, 0x0D	; 13
   125ae:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>
   125b2:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   125b4:	82 2f       	mov	r24, r18
   125b6:	61 2f       	mov	r22, r17
   125b8:	0e 94 a2 b5 	call	0x16b44	; 0x16b44 <__udivmodqi4>
   125bc:	68 2f       	mov	r22, r24
   125be:	66 0f       	add	r22, r22
   125c0:	68 0f       	add	r22, r24
   125c2:	66 0f       	add	r22, r22
   125c4:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:259
void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
   125c6:	87 ef       	ldi	r24, 0xF7	; 247
   125c8:	9d e0       	ldi	r25, 0x0D	; 13
   125ca:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>
   125ce:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   125d0:	82 2f       	mov	r24, r18
   125d2:	61 2f       	mov	r22, r17
   125d4:	0e 94 a2 b5 	call	0x16b44	; 0x16b44 <__udivmodqi4>
   125d8:	68 2f       	mov	r22, r24
   125da:	66 0f       	add	r22, r22
   125dc:	68 0f       	add	r22, r24
   125de:	66 0f       	add	r22, r22
   125e0:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:260
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
   125e2:	87 ef       	ldi	r24, 0xF7	; 247
   125e4:	9d e0       	ldi	r25, 0x0D	; 13
   125e6:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:261
  Wire._I2C_WRITE(bin2bcd(0));
   125ea:	60 e0       	ldi	r22, 0x00	; 0
   125ec:	87 ef       	ldi	r24, 0xF7	; 247
   125ee:	9d e0       	ldi	r25, 0x0D	; 13
   125f0:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>
   125f4:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   125f6:	82 2f       	mov	r24, r18
   125f8:	61 2f       	mov	r22, r17
   125fa:	0e 94 a2 b5 	call	0x16b44	; 0x16b44 <__udivmodqi4>
   125fe:	68 2f       	mov	r22, r24
   12600:	66 0f       	add	r22, r22
   12602:	68 0f       	add	r22, r24
   12604:	66 0f       	add	r22, r22
   12606:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:262
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
   12608:	87 ef       	ldi	r24, 0xF7	; 247
   1260a:	9d e0       	ldi	r25, 0x0D	; 13
   1260c:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>
   12610:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   12612:	82 2f       	mov	r24, r18
   12614:	61 2f       	mov	r22, r17
   12616:	0e 94 a2 b5 	call	0x16b44	; 0x16b44 <__udivmodqi4>
   1261a:	68 2f       	mov	r22, r24
   1261c:	66 0f       	add	r22, r22
   1261e:	68 0f       	add	r22, r24
   12620:	66 0f       	add	r22, r22
   12622:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:263
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
   12624:	87 ef       	ldi	r24, 0xF7	; 247
   12626:	9d e0       	ldi	r25, 0x0D	; 13
   12628:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>
   1262c:	28 81       	ld	r18, Y
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   1262e:	82 2f       	mov	r24, r18
   12630:	61 2f       	mov	r22, r17
   12632:	0e 94 a2 b5 	call	0x16b44	; 0x16b44 <__udivmodqi4>
   12636:	68 2f       	mov	r22, r24
   12638:	66 0f       	add	r22, r22
   1263a:	68 0f       	add	r22, r24
   1263c:	66 0f       	add	r22, r22
   1263e:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:264
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
   12640:	87 ef       	ldi	r24, 0xF7	; 247
   12642:	9d e0       	ldi	r25, 0x0D	; 13
   12644:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire.endTransmission();
   12648:	87 ef       	ldi	r24, 0xF7	; 247
   1264a:	9d e0       	ldi	r25, 0x0D	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:266
}
   1264c:	df 91       	pop	r29
   1264e:	cf 91       	pop	r28
   12650:	1f 91       	pop	r17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
   12652:	0c 94 a8 90 	jmp	0x12150	; 0x12150 <TwoWire::endTransmission()>

00012656 <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:538
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


boolean PubSubClient::connected() {
   12656:	cf 93       	push	r28
   12658:	df 93       	push	r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:540
    boolean rc;
    if (_client == NULL ) {
   1265a:	fc 01       	movw	r30, r24
   1265c:	a0 81       	ld	r26, Z
   1265e:	b1 81       	ldd	r27, Z+1	; 0x01
   12660:	10 97       	sbiw	r26, 0x00	; 0
   12662:	21 f4       	brne	.+8      	; 0x1266c <PubSubClient::connected()+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
        rc = false;
    } else {
        rc = (int)_client->connected();
   12664:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:553
                _client->stop();
            }
        }
    }
    return rc;
}
   12666:	df 91       	pop	r29
   12668:	cf 91       	pop	r28
   1266a:	08 95       	ret
   1266c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   1266e:	ed 91       	ld	r30, X+
   12670:	fc 91       	ld	r31, X
   12672:	11 97       	sbiw	r26, 0x01	; 1
   12674:	06 88       	ldd	r0, Z+22	; 0x16
   12676:	f7 89       	ldd	r31, Z+23	; 0x17
   12678:	e0 2d       	mov	r30, r0
   1267a:	cd 01       	movw	r24, r26
   1267c:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:544
        if (!rc) {
   1267e:	81 11       	cpse	r24, r1
   12680:	1e c0       	rjmp	.+60     	; 0x126be <PubSubClient::connected()+0x68>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:545
            if (this->_state == MQTT_CONNECTED) {
   12682:	fe 01       	movw	r30, r28
   12684:	e5 5e       	subi	r30, 0xE5	; 229
   12686:	fd 4f       	sbci	r31, 0xFD	; 253
   12688:	80 81       	ld	r24, Z
   1268a:	91 81       	ldd	r25, Z+1	; 0x01
   1268c:	89 2b       	or	r24, r25
   1268e:	51 f7       	brne	.-44     	; 0x12664 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:546
                this->_state = MQTT_CONNECTION_LOST;
   12690:	8d ef       	ldi	r24, 0xFD	; 253
   12692:	9f ef       	ldi	r25, 0xFF	; 255
   12694:	91 83       	std	Z+1, r25	; 0x01
   12696:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:547
                _client->flush();
   12698:	88 81       	ld	r24, Y
   1269a:	99 81       	ldd	r25, Y+1	; 0x01
   1269c:	dc 01       	movw	r26, r24
   1269e:	ed 91       	ld	r30, X+
   126a0:	fc 91       	ld	r31, X
   126a2:	06 80       	ldd	r0, Z+6	; 0x06
   126a4:	f7 81       	ldd	r31, Z+7	; 0x07
   126a6:	e0 2d       	mov	r30, r0
   126a8:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:548
                _client->stop();
   126aa:	88 81       	ld	r24, Y
   126ac:	99 81       	ldd	r25, Y+1	; 0x01
   126ae:	dc 01       	movw	r26, r24
   126b0:	ed 91       	ld	r30, X+
   126b2:	fc 91       	ld	r31, X
   126b4:	04 88       	ldd	r0, Z+20	; 0x14
   126b6:	f5 89       	ldd	r31, Z+21	; 0x15
   126b8:	e0 2d       	mov	r30, r0
   126ba:	19 95       	eicall
   126bc:	d3 cf       	rjmp	.-90     	; 0x12664 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   126be:	81 e0       	ldi	r24, 0x01	; 1
   126c0:	d2 cf       	rjmp	.-92     	; 0x12666 <PubSubClient::connected()+0x10>

000126c2 <PubSubClient::loop() [clone .constprop.106]>:
_ZN12PubSubClient4loopEv.constprop.106():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:282
    }

    return len;
}

boolean PubSubClient::loop() {
   126c2:	3f 92       	push	r3
   126c4:	4f 92       	push	r4
   126c6:	5f 92       	push	r5
   126c8:	6f 92       	push	r6
   126ca:	7f 92       	push	r7
   126cc:	8f 92       	push	r8
   126ce:	9f 92       	push	r9
   126d0:	af 92       	push	r10
   126d2:	bf 92       	push	r11
   126d4:	cf 92       	push	r12
   126d6:	df 92       	push	r13
   126d8:	ef 92       	push	r14
   126da:	ff 92       	push	r15
   126dc:	0f 93       	push	r16
   126de:	1f 93       	push	r17
   126e0:	cf 93       	push	r28
   126e2:	df 93       	push	r29
   126e4:	1f 92       	push	r1
   126e6:	cd b7       	in	r28, 0x3d	; 61
   126e8:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   126ea:	4d b6       	in	r4, 0x3d	; 61
   126ec:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:283

    return len;
}

boolean PubSubClient::loop() {
    if (connected()) {
   126ee:	80 e1       	ldi	r24, 0x10	; 16
   126f0:	9e e0       	ldi	r25, 0x0E	; 14
   126f2:	0e 94 2b 93 	call	0x12656	; 0x12656 <PubSubClient::connected()>
   126f6:	98 2e       	mov	r9, r24
   126f8:	88 23       	and	r24, r24
   126fa:	09 f4       	brne	.+2      	; 0x126fe <PubSubClient::loop() [clone .constprop.106]+0x3c>
   126fc:	45 c0       	rjmp	.+138    	; 0x12788 <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:284
        unsigned long t = millis();
   126fe:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   12702:	6b 01       	movw	r12, r22
   12704:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:285
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   12706:	80 91 18 10 	lds	r24, 0x1018	; 0x801018 <mqtt_client+0x208>
   1270a:	90 91 19 10 	lds	r25, 0x1019	; 0x801019 <mqtt_client+0x209>
   1270e:	a0 91 1a 10 	lds	r26, 0x101A	; 0x80101a <mqtt_client+0x20a>
   12712:	b0 91 1b 10 	lds	r27, 0x101B	; 0x80101b <mqtt_client+0x20b>
   12716:	a7 01       	movw	r20, r14
   12718:	96 01       	movw	r18, r12
   1271a:	28 1b       	sub	r18, r24
   1271c:	39 0b       	sbc	r19, r25
   1271e:	4a 0b       	sbc	r20, r26
   12720:	5b 0b       	sbc	r21, r27
   12722:	da 01       	movw	r26, r20
   12724:	c9 01       	movw	r24, r18
   12726:	89 39       	cpi	r24, 0x99	; 153
   12728:	9a 43       	sbci	r25, 0x3A	; 58
   1272a:	a1 05       	cpc	r26, r1
   1272c:	b1 05       	cpc	r27, r1
   1272e:	b0 f4       	brcc	.+44     	; 0x1275c <PubSubClient::loop() [clone .constprop.106]+0x9a>
   12730:	80 91 14 10 	lds	r24, 0x1014	; 0x801014 <mqtt_client+0x204>
   12734:	90 91 15 10 	lds	r25, 0x1015	; 0x801015 <mqtt_client+0x205>
   12738:	a0 91 16 10 	lds	r26, 0x1016	; 0x801016 <mqtt_client+0x206>
   1273c:	b0 91 17 10 	lds	r27, 0x1017	; 0x801017 <mqtt_client+0x207>
   12740:	a7 01       	movw	r20, r14
   12742:	96 01       	movw	r18, r12
   12744:	28 1b       	sub	r18, r24
   12746:	39 0b       	sbc	r19, r25
   12748:	4a 0b       	sbc	r20, r26
   1274a:	5b 0b       	sbc	r21, r27
   1274c:	da 01       	movw	r26, r20
   1274e:	c9 01       	movw	r24, r18
   12750:	89 39       	cpi	r24, 0x99	; 153
   12752:	9a 43       	sbci	r25, 0x3A	; 58
   12754:	a1 05       	cpc	r26, r1
   12756:	b1 05       	cpc	r27, r1
   12758:	08 f4       	brcc	.+2      	; 0x1275c <PubSubClient::loop() [clone .constprop.106]+0x9a>
   1275a:	52 c0       	rjmp	.+164    	; 0x12800 <PubSubClient::loop() [clone .constprop.106]+0x13e>
   1275c:	80 91 10 0e 	lds	r24, 0x0E10	; 0x800e10 <mqtt_client>
   12760:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <mqtt_client+0x1>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:286
            if (pingOutstanding) {
   12764:	20 91 1c 10 	lds	r18, 0x101C	; 0x80101c <mqtt_client+0x20c>
   12768:	22 23       	and	r18, r18
   1276a:	39 f1       	breq	.+78     	; 0x127ba <PubSubClient::loop() [clone .constprop.106]+0xf8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:287
                this->_state = MQTT_CONNECTION_TIMEOUT;
   1276c:	2c ef       	ldi	r18, 0xFC	; 252
   1276e:	3f ef       	ldi	r19, 0xFF	; 255
   12770:	30 93 2c 10 	sts	0x102C, r19	; 0x80102c <mqtt_client+0x21c>
   12774:	20 93 2b 10 	sts	0x102B, r18	; 0x80102b <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:288
                _client->stop();
   12778:	dc 01       	movw	r26, r24
   1277a:	ed 91       	ld	r30, X+
   1277c:	fc 91       	ld	r31, X
   1277e:	04 88       	ldd	r0, Z+20	; 0x14
   12780:	f5 89       	ldd	r31, Z+21	; 0x15
   12782:	e0 2d       	mov	r30, r0
   12784:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:289
                return false;
   12786:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   12788:	89 2d       	mov	r24, r9
   1278a:	0f b6       	in	r0, 0x3f	; 63
   1278c:	f8 94       	cli
   1278e:	5e be       	out	0x3e, r5	; 62
   12790:	0f be       	out	0x3f, r0	; 63
   12792:	4d be       	out	0x3d, r4	; 61
   12794:	0f 90       	pop	r0
   12796:	df 91       	pop	r29
   12798:	cf 91       	pop	r28
   1279a:	1f 91       	pop	r17
   1279c:	0f 91       	pop	r16
   1279e:	ff 90       	pop	r15
   127a0:	ef 90       	pop	r14
   127a2:	df 90       	pop	r13
   127a4:	cf 90       	pop	r12
   127a6:	bf 90       	pop	r11
   127a8:	af 90       	pop	r10
   127aa:	9f 90       	pop	r9
   127ac:	8f 90       	pop	r8
   127ae:	7f 90       	pop	r7
   127b0:	6f 90       	pop	r6
   127b2:	5f 90       	pop	r5
   127b4:	4f 90       	pop	r4
   127b6:	3f 90       	pop	r3
   127b8:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:291
            if (pingOutstanding) {
                this->_state = MQTT_CONNECTION_TIMEOUT;
                _client->stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
   127ba:	20 ec       	ldi	r18, 0xC0	; 192
   127bc:	20 93 12 0e 	sts	0x0E12, r18	; 0x800e12 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:292
                buffer[1] = 0;
   127c0:	10 92 13 0e 	sts	0x0E13, r1	; 0x800e13 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:293
                _client->write(buffer,2);
   127c4:	dc 01       	movw	r26, r24
   127c6:	ed 91       	ld	r30, X+
   127c8:	fc 91       	ld	r31, X
   127ca:	02 80       	ldd	r0, Z+2	; 0x02
   127cc:	f3 81       	ldd	r31, Z+3	; 0x03
   127ce:	e0 2d       	mov	r30, r0
   127d0:	42 e0       	ldi	r20, 0x02	; 2
   127d2:	50 e0       	ldi	r21, 0x00	; 0
   127d4:	62 e1       	ldi	r22, 0x12	; 18
   127d6:	7e e0       	ldi	r23, 0x0E	; 14
   127d8:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:294
                lastOutActivity = t;
   127da:	c0 92 14 10 	sts	0x1014, r12	; 0x801014 <mqtt_client+0x204>
   127de:	d0 92 15 10 	sts	0x1015, r13	; 0x801015 <mqtt_client+0x205>
   127e2:	e0 92 16 10 	sts	0x1016, r14	; 0x801016 <mqtt_client+0x206>
   127e6:	f0 92 17 10 	sts	0x1017, r15	; 0x801017 <mqtt_client+0x207>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:295
                lastInActivity = t;
   127ea:	c0 92 18 10 	sts	0x1018, r12	; 0x801018 <mqtt_client+0x208>
   127ee:	d0 92 19 10 	sts	0x1019, r13	; 0x801019 <mqtt_client+0x209>
   127f2:	e0 92 1a 10 	sts	0x101A, r14	; 0x80101a <mqtt_client+0x20a>
   127f6:	f0 92 1b 10 	sts	0x101B, r15	; 0x80101b <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:296
                pingOutstanding = true;
   127fa:	81 e0       	ldi	r24, 0x01	; 1
   127fc:	80 93 1c 10 	sts	0x101C, r24	; 0x80101c <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:299
            }
        }
        if (_client->available()) {
   12800:	80 91 10 0e 	lds	r24, 0x0E10	; 0x800e10 <mqtt_client>
   12804:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <mqtt_client+0x1>
   12808:	dc 01       	movw	r26, r24
   1280a:	ed 91       	ld	r30, X+
   1280c:	fc 91       	ld	r31, X
   1280e:	00 84       	ldd	r0, Z+8	; 0x08
   12810:	f1 85       	ldd	r31, Z+9	; 0x09
   12812:	e0 2d       	mov	r30, r0
   12814:	19 95       	eicall
   12816:	89 2b       	or	r24, r25
   12818:	09 f4       	brne	.+2      	; 0x1281c <PubSubClient::loop() [clone .constprop.106]+0x15a>
   1281a:	b6 cf       	rjmp	.-148    	; 0x12788 <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:301
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   1281c:	ce 01       	movw	r24, r28
   1281e:	01 96       	adiw	r24, 0x01	; 1
   12820:	0e 94 79 8c 	call	0x118f2	; 0x118f2 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>
   12824:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:304
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   12826:	89 2b       	or	r24, r25
   12828:	09 f4       	brne	.+2      	; 0x1282c <PubSubClient::loop() [clone .constprop.106]+0x16a>
   1282a:	ae cf       	rjmp	.-164    	; 0x12788 <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:305
                lastInActivity = t;
   1282c:	c0 92 18 10 	sts	0x1018, r12	; 0x801018 <mqtt_client+0x208>
   12830:	d0 92 19 10 	sts	0x1019, r13	; 0x801019 <mqtt_client+0x209>
   12834:	e0 92 1a 10 	sts	0x101A, r14	; 0x80101a <mqtt_client+0x20a>
   12838:	f0 92 1b 10 	sts	0x101B, r15	; 0x80101b <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:306
                uint8_t type = buffer[0]&0xF0;
   1283c:	80 90 12 0e 	lds	r8, 0x0E12	; 0x800e12 <mqtt_client+0x2>
   12840:	88 2d       	mov	r24, r8
   12842:	80 7f       	andi	r24, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:307
                if (type == MQTTPUBLISH) {
   12844:	80 33       	cpi	r24, 0x30	; 48
   12846:	09 f0       	breq	.+2      	; 0x1284a <PubSubClient::loop() [clone .constprop.106]+0x188>
   12848:	83 c0       	rjmp	.+262    	; 0x12950 <PubSubClient::loop() [clone .constprop.106]+0x28e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:308
                    if (callback) {
   1284a:	a0 90 1d 10 	lds	r10, 0x101D	; 0x80101d <mqtt_client+0x20d>
   1284e:	b0 90 1e 10 	lds	r11, 0x101E	; 0x80101e <mqtt_client+0x20e>
   12852:	a1 14       	cp	r10, r1
   12854:	b1 04       	cpc	r11, r1
   12856:	09 f4       	brne	.+2      	; 0x1285a <PubSubClient::loop() [clone .constprop.106]+0x198>
   12858:	97 cf       	rjmp	.-210    	; 0x12788 <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:331
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   1285a:	6d b6       	in	r6, 0x3d	; 61
   1285c:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:309
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   1285e:	69 81       	ldd	r22, Y+1	; 0x01
   12860:	70 e0       	ldi	r23, 0x00	; 0
   12862:	fb 01       	movw	r30, r22
   12864:	e0 5f       	subi	r30, 0xF0	; 240
   12866:	f1 4f       	sbci	r31, 0xF1	; 241
   12868:	23 81       	ldd	r18, Z+3	; 0x03
   1286a:	30 e0       	ldi	r19, 0x00	; 0
   1286c:	32 2f       	mov	r19, r18
   1286e:	22 27       	eor	r18, r18
   12870:	84 81       	ldd	r24, Z+4	; 0x04
   12872:	28 0f       	add	r18, r24
   12874:	31 1d       	adc	r19, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:310
                        char topic[tl+1];
   12876:	c9 01       	movw	r24, r18
   12878:	01 96       	adiw	r24, 0x01	; 1
   1287a:	ed b7       	in	r30, 0x3d	; 61
   1287c:	fe b7       	in	r31, 0x3e	; 62
   1287e:	e8 1b       	sub	r30, r24
   12880:	f9 0b       	sbc	r31, r25
   12882:	0f b6       	in	r0, 0x3f	; 63
   12884:	f8 94       	cli
   12886:	fe bf       	out	0x3e, r31	; 62
   12888:	0f be       	out	0x3f, r0	; 63
   1288a:	ed bf       	out	0x3d, r30	; 61
   1288c:	8d b7       	in	r24, 0x3d	; 61
   1288e:	9e b7       	in	r25, 0x3e	; 62
   12890:	01 96       	adiw	r24, 0x01	; 1
   12892:	db 01       	movw	r26, r22
   12894:	ab 5e       	subi	r26, 0xEB	; 235
   12896:	b1 4f       	sbci	r27, 0xF1	; 241
   12898:	fc 01       	movw	r30, r24
   1289a:	8c 01       	movw	r16, r24
   1289c:	02 0f       	add	r16, r18
   1289e:	13 1f       	adc	r17, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:311
                        for (uint16_t i=0;i<tl;i++) {
   128a0:	e0 17       	cp	r30, r16
   128a2:	f1 07       	cpc	r31, r17
   128a4:	19 f0       	breq	.+6      	; 0x128ac <PubSubClient::loop() [clone .constprop.106]+0x1ea>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:312
                            topic[i] = buffer[llen+3+i];
   128a6:	3d 90       	ld	r3, X+
   128a8:	31 92       	st	Z+, r3
   128aa:	fa cf       	rjmp	.-12     	; 0x128a0 <PubSubClient::loop() [clone .constprop.106]+0x1de>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:314
                        }
                        topic[tl] = 0;
   128ac:	10 82       	st	Z, r1
   128ae:	da 01       	movw	r26, r20
   128b0:	a6 1b       	sub	r26, r22
   128b2:	b7 0b       	sbc	r27, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:316
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   128b4:	f8 2d       	mov	r31, r8
   128b6:	f6 70       	andi	r31, 0x06	; 6
   128b8:	8f 2e       	mov	r8, r31
   128ba:	42 e0       	ldi	r20, 0x02	; 2
   128bc:	f4 13       	cpse	r31, r20
   128be:	3c c0       	rjmp	.+120    	; 0x12938 <PubSubClient::loop() [clone .constprop.106]+0x276>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:317
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   128c0:	62 0f       	add	r22, r18
   128c2:	73 1f       	adc	r23, r19
   128c4:	fb 01       	movw	r30, r22
   128c6:	e0 5f       	subi	r30, 0xF0	; 240
   128c8:	f1 4f       	sbci	r31, 0xF1	; 241
   128ca:	45 81       	ldd	r20, Z+5	; 0x05
   128cc:	50 e0       	ldi	r21, 0x00	; 0
   128ce:	54 2f       	mov	r21, r20
   128d0:	44 27       	eor	r20, r20
   128d2:	06 81       	ldd	r16, Z+6	; 0x06
   128d4:	04 0f       	add	r16, r20
   128d6:	15 2f       	mov	r17, r21
   128d8:	11 1d       	adc	r17, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   128da:	ad 01       	movw	r20, r26
   128dc:	42 1b       	sub	r20, r18
   128de:	53 0b       	sbc	r21, r19
   128e0:	45 50       	subi	r20, 0x05	; 5
   128e2:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:318
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
                            payload = buffer+llen+3+tl+2;
   128e4:	69 5e       	subi	r22, 0xE9	; 233
   128e6:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            callback(topic,payload,len-llen-3-tl-2);
   128e8:	f5 01       	movw	r30, r10
   128ea:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:321

                            buffer[0] = MQTTPUBACK;
   128ec:	80 e4       	ldi	r24, 0x40	; 64
   128ee:	80 93 12 0e 	sts	0x0E12, r24	; 0x800e12 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:322
                            buffer[1] = 2;
   128f2:	80 92 13 0e 	sts	0x0E13, r8	; 0x800e13 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:323
                            buffer[2] = (msgId >> 8);
   128f6:	10 93 14 0e 	sts	0x0E14, r17	; 0x800e14 <mqtt_client+0x4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:324
                            buffer[3] = (msgId & 0xFF);
   128fa:	00 93 15 0e 	sts	0x0E15, r16	; 0x800e15 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:325
                            _client->write(buffer,4);
   128fe:	80 91 10 0e 	lds	r24, 0x0E10	; 0x800e10 <mqtt_client>
   12902:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <mqtt_client+0x1>
   12906:	dc 01       	movw	r26, r24
   12908:	ed 91       	ld	r30, X+
   1290a:	fc 91       	ld	r31, X
   1290c:	02 80       	ldd	r0, Z+2	; 0x02
   1290e:	f3 81       	ldd	r31, Z+3	; 0x03
   12910:	e0 2d       	mov	r30, r0
   12912:	44 e0       	ldi	r20, 0x04	; 4
   12914:	50 e0       	ldi	r21, 0x00	; 0
   12916:	62 e1       	ldi	r22, 0x12	; 18
   12918:	7e e0       	ldi	r23, 0x0E	; 14
   1291a:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:326
                            lastOutActivity = t;
   1291c:	c0 92 14 10 	sts	0x1014, r12	; 0x801014 <mqtt_client+0x204>
   12920:	d0 92 15 10 	sts	0x1015, r13	; 0x801015 <mqtt_client+0x205>
   12924:	e0 92 16 10 	sts	0x1016, r14	; 0x801016 <mqtt_client+0x206>
   12928:	f0 92 17 10 	sts	0x1017, r15	; 0x801017 <mqtt_client+0x207>
   1292c:	0f b6       	in	r0, 0x3f	; 63
   1292e:	f8 94       	cli
   12930:	7e be       	out	0x3e, r7	; 62
   12932:	0f be       	out	0x3f, r0	; 63
   12934:	6d be       	out	0x3d, r6	; 61
   12936:	28 cf       	rjmp	.-432    	; 0x12788 <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   12938:	ad 01       	movw	r20, r26
   1293a:	42 1b       	sub	r20, r18
   1293c:	53 0b       	sbc	r21, r19
   1293e:	43 50       	subi	r20, 0x03	; 3
   12940:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:329
                            buffer[3] = (msgId & 0xFF);
                            _client->write(buffer,4);
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
   12942:	62 0f       	add	r22, r18
   12944:	73 1f       	adc	r23, r19
   12946:	6b 5e       	subi	r22, 0xEB	; 235
   12948:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330
                            callback(topic,payload,len-llen-3-tl);
   1294a:	f5 01       	movw	r30, r10
   1294c:	19 95       	eicall
   1294e:	ee cf       	rjmp	.-36     	; 0x1292c <PubSubClient::loop() [clone .constprop.106]+0x26a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:333
                        }
                    }
                } else if (type == MQTTPINGREQ) {
   12950:	80 3c       	cpi	r24, 0xC0	; 192
   12952:	a9 f4       	brne	.+42     	; 0x1297e <PubSubClient::loop() [clone .constprop.106]+0x2bc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:334
                    buffer[0] = MQTTPINGRESP;
   12954:	80 ed       	ldi	r24, 0xD0	; 208
   12956:	80 93 12 0e 	sts	0x0E12, r24	; 0x800e12 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:335
                    buffer[1] = 0;
   1295a:	10 92 13 0e 	sts	0x0E13, r1	; 0x800e13 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:336
                    _client->write(buffer,2);
   1295e:	80 91 10 0e 	lds	r24, 0x0E10	; 0x800e10 <mqtt_client>
   12962:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <mqtt_client+0x1>
   12966:	dc 01       	movw	r26, r24
   12968:	ed 91       	ld	r30, X+
   1296a:	fc 91       	ld	r31, X
   1296c:	02 80       	ldd	r0, Z+2	; 0x02
   1296e:	f3 81       	ldd	r31, Z+3	; 0x03
   12970:	e0 2d       	mov	r30, r0
   12972:	42 e0       	ldi	r20, 0x02	; 2
   12974:	50 e0       	ldi	r21, 0x00	; 0
   12976:	62 e1       	ldi	r22, 0x12	; 18
   12978:	7e e0       	ldi	r23, 0x0E	; 14
   1297a:	19 95       	eicall
   1297c:	05 cf       	rjmp	.-502    	; 0x12788 <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:337
                } else if (type == MQTTPINGRESP) {
   1297e:	80 3d       	cpi	r24, 0xD0	; 208
   12980:	09 f0       	breq	.+2      	; 0x12984 <PubSubClient::loop() [clone .constprop.106]+0x2c2>
   12982:	02 cf       	rjmp	.-508    	; 0x12788 <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:338
                    pingOutstanding = false;
   12984:	10 92 1c 10 	sts	0x101C, r1	; 0x80101c <mqtt_client+0x20c>
   12988:	ff ce       	rjmp	.-514    	; 0x12788 <PubSubClient::loop() [clone .constprop.106]+0xc6>

0001298a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:426
    lastOutActivity = millis();

    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   1298a:	bf 92       	push	r11
   1298c:	cf 92       	push	r12
   1298e:	df 92       	push	r13
   12990:	ef 92       	push	r14
   12992:	ff 92       	push	r15
   12994:	0f 93       	push	r16
   12996:	1f 93       	push	r17
   12998:	cf 93       	push	r28
   1299a:	df 93       	push	r29
   1299c:	00 d0       	rcall	.+0      	; 0x1299e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
   1299e:	1f 92       	push	r1
   129a0:	cd b7       	in	r28, 0x3d	; 61
   129a2:	de b7       	in	r29, 0x3e	; 62
   129a4:	7c 01       	movw	r14, r24
   129a6:	b6 2e       	mov	r11, r22
   129a8:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:432
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   129aa:	c9 01       	movw	r24, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:428
    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   129ac:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   129ae:	be 01       	movw	r22, r28
   129b0:	6f 5f       	subi	r22, 0xFF	; 255
   129b2:	7f 4f       	sbci	r23, 0xFF	; 255
   129b4:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:434
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   129b6:	28 2f       	mov	r18, r24
   129b8:	2f 77       	andi	r18, 0x7F	; 127
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:435
        len = len / 128;
   129ba:	88 0f       	add	r24, r24
   129bc:	89 2f       	mov	r24, r25
   129be:	88 1f       	adc	r24, r24
   129c0:	99 0b       	sbc	r25, r25
   129c2:	91 95       	neg	r25
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:436
        if (len > 0) {
   129c4:	00 97       	sbiw	r24, 0x00	; 0
   129c6:	09 f0       	breq	.+2      	; 0x129ca <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:437
            digit |= 0x80;
   129c8:	20 68       	ori	r18, 0x80	; 128
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        }
        lenBuf[pos++] = digit;
   129ca:	f6 01       	movw	r30, r12
   129cc:	e3 0f       	add	r30, r19
   129ce:	f1 1d       	adc	r31, r1
   129d0:	20 83       	st	Z, r18
   129d2:	3f 5f       	subi	r19, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:441
        llen++;
    } while(len>0);
   129d4:	00 97       	sbiw	r24, 0x00	; 0
   129d6:	79 f7       	brne	.-34     	; 0x129b6 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:443

    buf[4-llen] = header;
   129d8:	e3 2f       	mov	r30, r19
   129da:	f0 e0       	ldi	r31, 0x00	; 0
   129dc:	ba 01       	movw	r22, r20
   129de:	6e 1b       	sub	r22, r30
   129e0:	7f 0b       	sbc	r23, r31
   129e2:	6c 5f       	subi	r22, 0xFC	; 252
   129e4:	7f 4f       	sbci	r23, 0xFF	; 255
   129e6:	db 01       	movw	r26, r22
   129e8:	bc 92       	st	X, r11
   129ea:	4e 1b       	sub	r20, r30
   129ec:	5f 0b       	sbc	r21, r31
   129ee:	4b 5f       	subi	r20, 0xFB	; 251
   129f0:	5f 4f       	sbci	r21, 0xFF	; 255
   129f2:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:444
    for (int i=0;i<llen;i++) {
   129f4:	9c 01       	movw	r18, r24
   129f6:	2c 19       	sub	r18, r12
   129f8:	3d 09       	sbc	r19, r13
   129fa:	2e 17       	cp	r18, r30
   129fc:	3f 07       	cpc	r19, r31
   129fe:	3c f4       	brge	.+14     	; 0x12a0e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:445
        buf[5-llen+i] = lenBuf[i];
   12a00:	dc 01       	movw	r26, r24
   12a02:	2d 91       	ld	r18, X+
   12a04:	cd 01       	movw	r24, r26
   12a06:	da 01       	movw	r26, r20
   12a08:	2d 93       	st	X+, r18
   12a0a:	ad 01       	movw	r20, r26
   12a0c:	f3 cf       	rjmp	.-26     	; 0x129f4 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:462
        bytesRemaining -= rc;
        writeBuf += rc;
    }
    return result;
#else
    rc = _client->write(buf+(4-llen),length+1+llen);
   12a0e:	d7 01       	movw	r26, r14
   12a10:	8d 91       	ld	r24, X+
   12a12:	9c 91       	ld	r25, X
   12a14:	0f 5f       	subi	r16, 0xFF	; 255
   12a16:	1f 4f       	sbci	r17, 0xFF	; 255
   12a18:	0e 0f       	add	r16, r30
   12a1a:	1f 1f       	adc	r17, r31
   12a1c:	dc 01       	movw	r26, r24
   12a1e:	ed 91       	ld	r30, X+
   12a20:	fc 91       	ld	r31, X
   12a22:	02 80       	ldd	r0, Z+2	; 0x02
   12a24:	f3 81       	ldd	r31, Z+3	; 0x03
   12a26:	e0 2d       	mov	r30, r0
   12a28:	a8 01       	movw	r20, r16
   12a2a:	19 95       	eicall
   12a2c:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:463
    lastOutActivity = millis();
   12a2e:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   12a32:	f7 01       	movw	r30, r14
   12a34:	ec 5f       	subi	r30, 0xFC	; 252
   12a36:	fd 4f       	sbci	r31, 0xFD	; 253
   12a38:	60 83       	st	Z, r22
   12a3a:	71 83       	std	Z+1, r23	; 0x01
   12a3c:	82 83       	std	Z+2, r24	; 0x02
   12a3e:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:464
    return (rc == 1+llen+length);
   12a40:	81 e0       	ldi	r24, 0x01	; 1
   12a42:	0c 15       	cp	r16, r12
   12a44:	1d 05       	cpc	r17, r13
   12a46:	09 f0       	breq	.+2      	; 0x12a4a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
   12a48:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:466
#endif
}
   12a4a:	0f 90       	pop	r0
   12a4c:	0f 90       	pop	r0
   12a4e:	0f 90       	pop	r0
   12a50:	0f 90       	pop	r0
   12a52:	df 91       	pop	r29
   12a54:	cf 91       	pop	r28
   12a56:	1f 91       	pop	r17
   12a58:	0f 91       	pop	r16
   12a5a:	ff 90       	pop	r15
   12a5c:	ef 90       	pop	r14
   12a5e:	df 90       	pop	r13
   12a60:	cf 90       	pop	r12
   12a62:	bf 90       	pop	r11
   12a64:	08 95       	ret

00012a66 <PubSubClient::subscribe(char const*) [clone .constprop.145]>:
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:468

boolean PubSubClient::subscribe(const char* topic) {
   12a66:	cf 93       	push	r28
   12a68:	df 93       	push	r29
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:476

boolean PubSubClient::subscribe(const char* topic, uint8_t qos) {
    if (qos < 0 || qos > 1) {
        return false;
    }
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   12a6a:	fc 01       	movw	r30, r24
   12a6c:	01 90       	ld	r0, Z+
   12a6e:	00 20       	and	r0, r0
   12a70:	e9 f7       	brne	.-6      	; 0x12a6c <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x6>
   12a72:	9f 01       	movw	r18, r30
   12a74:	28 1b       	sub	r18, r24
   12a76:	39 0b       	sbc	r19, r25
   12a78:	28 5f       	subi	r18, 0xF8	; 248
   12a7a:	3f 4f       	sbci	r19, 0xFF	; 255
   12a7c:	21 30       	cpi	r18, 0x01	; 1
   12a7e:	32 40       	sbci	r19, 0x02	; 2
   12a80:	98 f5       	brcc	.+102    	; 0x12ae8 <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x82>
   12a82:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:480
        // Too long
        return false;
    }
    if (connected()) {
   12a84:	80 e1       	ldi	r24, 0x10	; 16
   12a86:	9e e0       	ldi	r25, 0x0E	; 14
   12a88:	0e 94 2b 93 	call	0x12656	; 0x12656 <PubSubClient::connected()>
   12a8c:	88 23       	and	r24, r24
   12a8e:	61 f1       	breq	.+88     	; 0x12ae8 <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:483
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   12a90:	80 91 12 10 	lds	r24, 0x1012	; 0x801012 <mqtt_client+0x202>
   12a94:	90 91 13 10 	lds	r25, 0x1013	; 0x801013 <mqtt_client+0x203>
   12a98:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:484
        if (nextMsgId == 0) {
   12a9a:	19 f1       	breq	.+70     	; 0x12ae2 <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
            nextMsgId = 1;
   12a9c:	90 93 13 10 	sts	0x1013, r25	; 0x801013 <mqtt_client+0x203>
   12aa0:	80 93 12 10 	sts	0x1012, r24	; 0x801012 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:487
        }
        buffer[length++] = (nextMsgId >> 8);
   12aa4:	80 91 12 10 	lds	r24, 0x1012	; 0x801012 <mqtt_client+0x202>
   12aa8:	90 91 13 10 	lds	r25, 0x1013	; 0x801013 <mqtt_client+0x203>
   12aac:	90 93 17 0e 	sts	0x0E17, r25	; 0x800e17 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:488
        buffer[length++] = (nextMsgId & 0xFF);
   12ab0:	80 93 18 0e 	sts	0x0E18, r24	; 0x800e18 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:489
        length = writeString((char*)topic, buffer,length);
   12ab4:	47 e0       	ldi	r20, 0x07	; 7
   12ab6:	50 e0       	ldi	r21, 0x00	; 0
   12ab8:	62 e1       	ldi	r22, 0x12	; 18
   12aba:	7e e0       	ldi	r23, 0x0E	; 14
   12abc:	ce 01       	movw	r24, r28
   12abe:	0e 94 bd 84 	call	0x1097a	; 0x1097a <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:490
        buffer[length++] = qos;
   12ac2:	fc 01       	movw	r30, r24
   12ac4:	e0 5f       	subi	r30, 0xF0	; 240
   12ac6:	f1 4f       	sbci	r31, 0xF1	; 241
   12ac8:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   12aca:	9c 01       	movw	r18, r24
   12acc:	24 50       	subi	r18, 0x04	; 4
   12ace:	31 09       	sbc	r19, r1
   12ad0:	42 e1       	ldi	r20, 0x12	; 18
   12ad2:	5e e0       	ldi	r21, 0x0E	; 14
   12ad4:	62 e8       	ldi	r22, 0x82	; 130
   12ad6:	80 e1       	ldi	r24, 0x10	; 16
   12ad8:	9e e0       	ldi	r25, 0x0E	; 14
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   12ada:	df 91       	pop	r29
   12adc:	cf 91       	pop	r28
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString((char*)topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   12ade:	0c 94 c5 94 	jmp	0x1298a	; 0x1298a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
    if (connected()) {
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
   12ae2:	81 e0       	ldi	r24, 0x01	; 1
   12ae4:	90 e0       	ldi	r25, 0x00	; 0
   12ae6:	da cf       	rjmp	.-76     	; 0x12a9c <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x36>
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   12ae8:	80 e0       	ldi	r24, 0x00	; 0
   12aea:	df 91       	pop	r29
   12aec:	cf 91       	pop	r28
   12aee:	08 95       	ret

00012af0 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:347
        return true;
    }
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
   12af0:	af 92       	push	r10
   12af2:	bf 92       	push	r11
   12af4:	cf 92       	push	r12
   12af6:	df 92       	push	r13
   12af8:	ef 92       	push	r14
   12afa:	ff 92       	push	r15
   12afc:	0f 93       	push	r16
   12afe:	1f 93       	push	r17
   12b00:	cf 93       	push	r28
   12b02:	df 93       	push	r29
   12b04:	7c 01       	movw	r14, r24
   12b06:	5b 01       	movw	r10, r22
   12b08:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:348
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   12b0a:	ea 01       	movw	r28, r20
   12b0c:	09 90       	ld	r0, Y+
   12b0e:	00 20       	and	r0, r0
   12b10:	e9 f7       	brne	.-6      	; 0x12b0c <PubSubClient::publish(char const*, char const*)+0x1c>
   12b12:	21 97       	sbiw	r28, 0x01	; 1
   12b14:	c4 1b       	sub	r28, r20
   12b16:	d5 0b       	sbc	r29, r21
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:360
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
    return publish(topic, payload, plength, false);
}

boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retained) {
    if (connected()) {
   12b18:	0e 94 2b 93 	call	0x12656	; 0x12656 <PubSubClient::connected()>
   12b1c:	88 23       	and	r24, r24
   12b1e:	c9 f1       	breq	.+114    	; 0x12b92 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:361
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   12b20:	f5 01       	movw	r30, r10
   12b22:	01 90       	ld	r0, Z+
   12b24:	00 20       	and	r0, r0
   12b26:	e9 f7       	brne	.-6      	; 0x12b22 <PubSubClient::publish(char const*, char const*)+0x32>
   12b28:	31 97       	sbiw	r30, 0x01	; 1
   12b2a:	ea 19       	sub	r30, r10
   12b2c:	fb 09       	sbc	r31, r11
   12b2e:	ce 01       	movw	r24, r28
   12b30:	07 96       	adiw	r24, 0x07	; 7
   12b32:	e8 0f       	add	r30, r24
   12b34:	f9 1f       	adc	r31, r25
   12b36:	e1 30       	cpi	r30, 0x01	; 1
   12b38:	f2 40       	sbci	r31, 0x02	; 2
   12b3a:	58 f5       	brcc	.+86     	; 0x12b92 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:367
            // Too long
            return false;
        }
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        length = writeString(topic,buffer,length);
   12b3c:	67 01       	movw	r12, r14
   12b3e:	82 e0       	ldi	r24, 0x02	; 2
   12b40:	c8 0e       	add	r12, r24
   12b42:	d1 1c       	adc	r13, r1
   12b44:	45 e0       	ldi	r20, 0x05	; 5
   12b46:	50 e0       	ldi	r21, 0x00	; 0
   12b48:	b6 01       	movw	r22, r12
   12b4a:	c5 01       	movw	r24, r10
   12b4c:	0e 94 bd 84 	call	0x1097a	; 0x1097a <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
   12b50:	f8 01       	movw	r30, r16
   12b52:	dc 01       	movw	r26, r24
   12b54:	12 96       	adiw	r26, 0x02	; 2
   12b56:	ae 0d       	add	r26, r14
   12b58:	bf 1d       	adc	r27, r15
   12b5a:	a8 01       	movw	r20, r16
   12b5c:	4c 0f       	add	r20, r28
   12b5e:	5d 1f       	adc	r21, r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:369
        uint16_t i;
        for (i=0;i<plength;i++) {
   12b60:	e4 17       	cp	r30, r20
   12b62:	f5 07       	cpc	r31, r21
   12b64:	19 f0       	breq	.+6      	; 0x12b6c <PubSubClient::publish(char const*, char const*)+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:370
            buffer[length++] = payload[i];
   12b66:	21 91       	ld	r18, Z+
   12b68:	2d 93       	st	X+, r18
   12b6a:	fa cf       	rjmp	.-12     	; 0x12b60 <PubSubClient::publish(char const*, char const*)+0x70>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   12b6c:	25 97       	sbiw	r28, 0x05	; 5
   12b6e:	9e 01       	movw	r18, r28
   12b70:	28 0f       	add	r18, r24
   12b72:	39 1f       	adc	r19, r25
   12b74:	a6 01       	movw	r20, r12
   12b76:	60 e3       	ldi	r22, 0x30	; 48
   12b78:	c7 01       	movw	r24, r14
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   12b7a:	df 91       	pop	r29
   12b7c:	cf 91       	pop	r28
   12b7e:	1f 91       	pop	r17
   12b80:	0f 91       	pop	r16
   12b82:	ff 90       	pop	r15
   12b84:	ef 90       	pop	r14
   12b86:	df 90       	pop	r13
   12b88:	cf 90       	pop	r12
   12b8a:	bf 90       	pop	r11
   12b8c:	af 90       	pop	r10
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   12b8e:	0c 94 c5 94 	jmp	0x1298a	; 0x1298a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   12b92:	80 e0       	ldi	r24, 0x00	; 0
   12b94:	df 91       	pop	r29
   12b96:	cf 91       	pop	r28
   12b98:	1f 91       	pop	r17
   12b9a:	0f 91       	pop	r16
   12b9c:	ff 90       	pop	r15
   12b9e:	ef 90       	pop	r14
   12ba0:	df 90       	pop	r13
   12ba2:	cf 90       	pop	r12
   12ba4:	bf 90       	pop	r11
   12ba6:	af 90       	pop	r10
   12ba8:	08 95       	ret

00012baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.131():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:165
void send_mqtt_set_header(char* header)
{
  header_out = header;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void send_mqtt_message_prefix_id_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, char *topic, char *payload)
   12baa:	af 92       	push	r10
   12bac:	bf 92       	push	r11
   12bae:	df 92       	push	r13
   12bb0:	ef 92       	push	r14
   12bb2:	ff 92       	push	r15
   12bb4:	0f 93       	push	r16
   12bb6:	1f 93       	push	r17
   12bb8:	cf 93       	push	r28
   12bba:	df 93       	push	r29
   12bbc:	cd b7       	in	r28, 0x3d	; 61
   12bbe:	de b7       	in	r29, 0x3e	; 62
   12bc0:	c6 55       	subi	r28, 0x56	; 86
   12bc2:	d1 09       	sbc	r29, r1
   12bc4:	0f b6       	in	r0, 0x3f	; 63
   12bc6:	f8 94       	cli
   12bc8:	de bf       	out	0x3e, r29	; 62
   12bca:	0f be       	out	0x3f, r0	; 63
   12bcc:	cd bf       	out	0x3d, r28	; 61
   12bce:	5c 01       	movw	r10, r24
   12bd0:	d6 2e       	mov	r13, r22
   12bd2:	7a 01       	movw	r14, r20
   12bd4:	89 01       	movw	r16, r18
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:170
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   12bd6:	80 e1       	ldi	r24, 0x10	; 16
   12bd8:	9e e0       	ldi	r25, 0x0E	; 14
   12bda:	0e 94 2b 93 	call	0x12656	; 0x12656 <PubSubClient::connected()>
   12bde:	88 23       	and	r24, r24
   12be0:	09 f4       	brne	.+2      	; 0x12be4 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0x3a>
   12be2:	52 c0       	rjmp	.+164    	; 0x12c88 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0xde>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:172
  {
    mqtt_send_message++;
   12be4:	80 91 67 0b 	lds	r24, 0x0B67	; 0x800b67 <mqtt_send_message>
   12be8:	90 91 68 0b 	lds	r25, 0x0B68	; 0x800b68 <mqtt_send_message+0x1>
   12bec:	01 96       	adiw	r24, 0x01	; 1
   12bee:	90 93 68 0b 	sts	0x0B68, r25	; 0x800b68 <mqtt_send_message+0x1>
   12bf2:	80 93 67 0b 	sts	0x0B67, r24	; 0x800b67 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:173
    device_get_name(hostname);
   12bf6:	ce 01       	movw	r24, r28
   12bf8:	83 5b       	subi	r24, 0xB3	; 179
   12bfa:	9f 4f       	sbci	r25, 0xFF	; 255
   12bfc:	0e 94 2f 5a 	call	0xb45e	; 0xb45e <device_get_name(char*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:174
    strcpy_P(str_topic, header_out);
   12c00:	60 91 65 0b 	lds	r22, 0x0B65	; 0x800b65 <header_out>
   12c04:	70 91 66 0b 	lds	r23, 0x0B66	; 0x800b66 <header_out+0x1>
   12c08:	ce 01       	movw	r24, r28
   12c0a:	01 96       	adiw	r24, 0x01	; 1
   12c0c:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:175
    strcat(str_topic, hostname);
   12c10:	be 01       	movw	r22, r28
   12c12:	63 5b       	subi	r22, 0xB3	; 179
   12c14:	7f 4f       	sbci	r23, 0xFF	; 255
   12c16:	ce 01       	movw	r24, r28
   12c18:	01 96       	adiw	r24, 0x01	; 1
   12c1a:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:176
    strcat(str_topic, "/");
   12c1e:	69 ed       	ldi	r22, 0xD9	; 217
   12c20:	73 e0       	ldi	r23, 0x03	; 3
   12c22:	ce 01       	movw	r24, r28
   12c24:	01 96       	adiw	r24, 0x01	; 1
   12c26:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:177
    strcat(str_topic, prefix);
   12c2a:	b5 01       	movw	r22, r10
   12c2c:	ce 01       	movw	r24, r28
   12c2e:	01 96       	adiw	r24, 0x01	; 1
   12c30:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:178
    strcat(str_topic, "/");
   12c34:	69 ed       	ldi	r22, 0xD9	; 217
   12c36:	73 e0       	ldi	r23, 0x03	; 3
   12c38:	ce 01       	movw	r24, r28
   12c3a:	01 96       	adiw	r24, 0x01	; 1
   12c3c:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12c40:	4a e0       	ldi	r20, 0x0A	; 10
   12c42:	be 01       	movw	r22, r28
   12c44:	6f 5b       	subi	r22, 0xBF	; 191
   12c46:	7f 4f       	sbci	r23, 0xFF	; 255
   12c48:	8d 2d       	mov	r24, r13
   12c4a:	90 e0       	ldi	r25, 0x00	; 0
   12c4c:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.131():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:180
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   12c50:	be 01       	movw	r22, r28
   12c52:	6f 5b       	subi	r22, 0xBF	; 191
   12c54:	7f 4f       	sbci	r23, 0xFF	; 255
   12c56:	ce 01       	movw	r24, r28
   12c58:	01 96       	adiw	r24, 0x01	; 1
   12c5a:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:181
    strcat(str_topic, "/");
   12c5e:	69 ed       	ldi	r22, 0xD9	; 217
   12c60:	73 e0       	ldi	r23, 0x03	; 3
   12c62:	ce 01       	movw	r24, r28
   12c64:	01 96       	adiw	r24, 0x01	; 1
   12c66:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:182
    strcat(str_topic, topic);
   12c6a:	b7 01       	movw	r22, r14
   12c6c:	ce 01       	movw	r24, r28
   12c6e:	01 96       	adiw	r24, 0x01	; 1
   12c70:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:183
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   12c74:	a8 01       	movw	r20, r16
   12c76:	be 01       	movw	r22, r28
   12c78:	6f 5f       	subi	r22, 0xFF	; 255
   12c7a:	7f 4f       	sbci	r23, 0xFF	; 255
   12c7c:	80 e1       	ldi	r24, 0x10	; 16
   12c7e:	9e e0       	ldi	r25, 0x0E	; 14
   12c80:	0e 94 78 95 	call	0x12af0	; 0x12af0 <PubSubClient::publish(char const*, char const*)>
   12c84:	81 11       	cpse	r24, r1
   12c86:	09 c0       	rjmp	.+18     	; 0x12c9a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0xf0>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:186
  }
  else
    mqtt_error++;
   12c88:	80 91 69 0b 	lds	r24, 0x0B69	; 0x800b69 <mqtt_error>
   12c8c:	90 91 6a 0b 	lds	r25, 0x0B6A	; 0x800b6a <mqtt_error+0x1>
   12c90:	01 96       	adiw	r24, 0x01	; 1
   12c92:	90 93 6a 0b 	sts	0x0B6A, r25	; 0x800b6a <mqtt_error+0x1>
   12c96:	80 93 69 0b 	sts	0x0B69, r24	; 0x800b69 <mqtt_error>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:187
}
   12c9a:	ca 5a       	subi	r28, 0xAA	; 170
   12c9c:	df 4f       	sbci	r29, 0xFF	; 255
   12c9e:	0f b6       	in	r0, 0x3f	; 63
   12ca0:	f8 94       	cli
   12ca2:	de bf       	out	0x3e, r29	; 62
   12ca4:	0f be       	out	0x3f, r0	; 63
   12ca6:	cd bf       	out	0x3d, r28	; 61
   12ca8:	df 91       	pop	r29
   12caa:	cf 91       	pop	r28
   12cac:	1f 91       	pop	r17
   12cae:	0f 91       	pop	r16
   12cb0:	ff 90       	pop	r15
   12cb2:	ef 90       	pop	r14
   12cb4:	df 90       	pop	r13
   12cb6:	bf 90       	pop	r11
   12cb8:	af 90       	pop	r10
   12cba:	08 95       	ret

00012cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>:
_ZN11EEPROMClass5writeEih.isra.1.lto_priv.223():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
   12cbc:	0c 94 e7 b3 	jmp	0x167ce	; 0x167ce <eeprom_write_byte>

00012cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>:
_ZN11EEPROMClass4readEi.isra.0.lto_priv.227():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
   12cc0:	0c 94 df b3 	jmp	0x167be	; 0x167be <eeprom_read_byte>

00012cc4 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>:
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:203
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
   12cc4:	1f 93       	push	r17
   12cc6:	cf 93       	push	r28
   12cc8:	df 93       	push	r29
   12cca:	16 2f       	mov	r17, r22
thermostat_ring_get_status_data():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   12ccc:	91 e2       	ldi	r25, 0x21	; 33
   12cce:	89 9f       	mul	r24, r25
   12cd0:	e0 01       	movw	r28, r0
   12cd2:	11 24       	eor	r1, r1
   12cd4:	c8 5a       	subi	r28, 0xA8	; 168
   12cd6:	de 4f       	sbci	r29, 0xFE	; 254
   12cd8:	ce 01       	movw	r24, r28
   12cda:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   12cde:	68 2f       	mov	r22, r24
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:206
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
   12ce0:	11 11       	cpse	r17, r1
   12ce2:	07 c0       	rjmp	.+14     	; 0x12cf2 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]+0x2e>
   12ce4:	6e 7f       	andi	r22, 0xFE	; 254
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   12ce6:	ce 01       	movw	r24, r28
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:209
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
}
   12ce8:	df 91       	pop	r29
   12cea:	cf 91       	pop	r28
   12cec:	1f 91       	pop	r17
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   12cee:	0c 94 5e 96 	jmp	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   12cf2:	61 60       	ori	r22, 0x01	; 1
   12cf4:	f8 cf       	rjmp	.-16     	; 0x12ce6 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]+0x22>

00012cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:114



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
   12cf6:	4f 92       	push	r4
   12cf8:	5f 92       	push	r5
   12cfa:	6f 92       	push	r6
   12cfc:	7f 92       	push	r7
   12cfe:	8f 92       	push	r8
   12d00:	9f 92       	push	r9
   12d02:	af 92       	push	r10
   12d04:	bf 92       	push	r11
   12d06:	cf 92       	push	r12
   12d08:	df 92       	push	r13
   12d0a:	ef 92       	push	r14
   12d0c:	ff 92       	push	r15
   12d0e:	0f 93       	push	r16
   12d10:	1f 93       	push	r17
   12d12:	cf 93       	push	r28
   12d14:	df 93       	push	r29
   12d16:	00 d0       	rcall	.+0      	; 0x12d18 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x22>
   12d18:	00 d0       	rcall	.+0      	; 0x12d1a <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
   12d1a:	1f 92       	push	r1
   12d1c:	1f 92       	push	r1
   12d1e:	cd b7       	in	r28, 0x3d	; 61
   12d20:	de b7       	in	r29, 0x3e	; 62
   12d22:	6c 01       	movw	r12, r24
   12d24:	46 2e       	mov	r4, r22
   12d26:	52 2e       	mov	r5, r18
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:116
  char tmp1[8];
  str[0] = 0;
   12d28:	fc 01       	movw	r30, r24
   12d2a:	10 82       	st	Z, r1
   12d2c:	3a 01       	movw	r6, r20
   12d2e:	f1 2c       	mov	r15, r1
   12d30:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   12d32:	a0 2e       	mov	r10, r16
   12d34:	b1 2c       	mov	r11, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   12d36:	8e 01       	movw	r16, r28
   12d38:	0f 5f       	subi	r16, 0xFF	; 255
   12d3a:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   12d3c:	82 2f       	mov	r24, r18
   12d3e:	81 50       	subi	r24, 0x01	; 1
   12d40:	99 0b       	sbc	r25, r25
   12d42:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   12d44:	f3 01       	movw	r30, r6
   12d46:	81 91       	ld	r24, Z+
   12d48:	3f 01       	movw	r6, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
   12d4a:	a5 01       	movw	r20, r10
   12d4c:	b8 01       	movw	r22, r16
   12d4e:	90 e0       	ldi	r25, 0x00	; 0
   12d50:	0e 94 70 aa 	call	0x154e0	; 0x154e0 <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:120
    if (strlen(tmp1) < 2)
   12d54:	f8 01       	movw	r30, r16
   12d56:	01 90       	ld	r0, Z+
   12d58:	00 20       	and	r0, r0
   12d5a:	e9 f7       	brne	.-6      	; 0x12d56 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x60>
   12d5c:	31 97       	sbiw	r30, 0x01	; 1
   12d5e:	e0 1b       	sub	r30, r16
   12d60:	f1 0b       	sbc	r31, r17
   12d62:	32 97       	sbiw	r30, 0x02	; 2
   12d64:	28 f4       	brcc	.+10     	; 0x12d70 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x7a>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121
      strcat(str, "0");
   12d66:	6c ef       	ldi	r22, 0xFC	; 252
   12d68:	76 e0       	ldi	r23, 0x06	; 6
   12d6a:	c6 01       	movw	r24, r12
   12d6c:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122
    strcat(str, tmp1); 
   12d70:	b8 01       	movw	r22, r16
   12d72:	c6 01       	movw	r24, r12
   12d74:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
    if (a < maxBytes - 1)
   12d78:	e8 14       	cp	r14, r8
   12d7a:	f9 04       	cpc	r15, r9
   12d7c:	34 f4       	brge	.+12     	; 0x12d8a <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x94>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    {
      tmp1[0] = sep;
   12d7e:	49 82       	std	Y+1, r4	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:126
      tmp1[1] = 0;
   12d80:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
      strcat(str, tmp1);
   12d82:	b8 01       	movw	r22, r16
   12d84:	c6 01       	movw	r24, r12
   12d86:	0e 94 a5 b6 	call	0x16d4a	; 0x16d4a <strcat>
   12d8a:	ff ef       	ldi	r31, 0xFF	; 255
   12d8c:	ef 1a       	sub	r14, r31
   12d8e:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:117

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   12d90:	e5 14       	cp	r14, r5
   12d92:	c0 f2       	brcs	.-80     	; 0x12d44 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   12d94:	28 96       	adiw	r28, 0x08	; 8
   12d96:	0f b6       	in	r0, 0x3f	; 63
   12d98:	f8 94       	cli
   12d9a:	de bf       	out	0x3e, r29	; 62
   12d9c:	0f be       	out	0x3f, r0	; 63
   12d9e:	cd bf       	out	0x3d, r28	; 61
   12da0:	df 91       	pop	r29
   12da2:	cf 91       	pop	r28
   12da4:	1f 91       	pop	r17
   12da6:	0f 91       	pop	r16
   12da8:	ff 90       	pop	r15
   12daa:	ef 90       	pop	r14
   12dac:	df 90       	pop	r13
   12dae:	cf 90       	pop	r12
   12db0:	bf 90       	pop	r11
   12db2:	af 90       	pop	r10
   12db4:	9f 90       	pop	r9
   12db6:	8f 90       	pop	r8
   12db8:	7f 90       	pop	r7
   12dba:	6f 90       	pop	r6
   12dbc:	5f 90       	pop	r5
   12dbe:	4f 90       	pop	r4
   12dc0:	08 95       	ret

00012dc2 <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:69
  return data.f;
}


void EEPROMwriteFloat(unsigned int addr, float x)
{
   12dc2:	cf 92       	push	r12
   12dc4:	df 92       	push	r13
   12dc6:	ef 92       	push	r14
   12dc8:	ff 92       	push	r15
   12dca:	0f 93       	push	r16
   12dcc:	1f 93       	push	r17
   12dce:	cf 93       	push	r28
   12dd0:	df 93       	push	r29
   12dd2:	00 d0       	rcall	.+0      	; 0x12dd4 <EEPROMwriteFloat(unsigned int, float)+0x12>
   12dd4:	1f 92       	push	r1
   12dd6:	cd b7       	in	r28, 0x3d	; 61
   12dd8:	de b7       	in	r29, 0x3e	; 62
   12dda:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:74
  union {
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
   12ddc:	49 83       	std	Y+1, r20	; 0x01
   12dde:	5a 83       	std	Y+2, r21	; 0x02
   12de0:	6b 83       	std	Y+3, r22	; 0x03
   12de2:	7c 83       	std	Y+4, r23	; 0x04
   12de4:	ce 01       	movw	r24, r28
   12de6:	01 96       	adiw	r24, 0x01	; 1
   12de8:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:75
  for (int i = 0; i < 4; i++) EEPROM.write(addr + i, data.b[i]);
   12dea:	10 e0       	ldi	r17, 0x00	; 0
   12dec:	00 e0       	ldi	r16, 0x00	; 0
   12dee:	f7 01       	movw	r30, r14
   12df0:	61 91       	ld	r22, Z+
   12df2:	7f 01       	movw	r14, r30
   12df4:	c8 01       	movw	r24, r16
   12df6:	8c 0d       	add	r24, r12
   12df8:	9d 1d       	adc	r25, r13
   12dfa:	0e 94 5e 96 	call	0x12cbc	; 0x12cbc <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
   12dfe:	0f 5f       	subi	r16, 0xFF	; 255
   12e00:	1f 4f       	sbci	r17, 0xFF	; 255
   12e02:	04 30       	cpi	r16, 0x04	; 4
   12e04:	11 05       	cpc	r17, r1
   12e06:	99 f7       	brne	.-26     	; 0x12dee <EEPROMwriteFloat(unsigned int, float)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:76
}
   12e08:	0f 90       	pop	r0
   12e0a:	0f 90       	pop	r0
   12e0c:	0f 90       	pop	r0
   12e0e:	0f 90       	pop	r0
   12e10:	df 91       	pop	r29
   12e12:	cf 91       	pop	r28
   12e14:	1f 91       	pop	r17
   12e16:	0f 91       	pop	r16
   12e18:	ff 90       	pop	r15
   12e1a:	ef 90       	pop	r14
   12e1c:	df 90       	pop	r13
   12e1e:	cf 90       	pop	r12
   12e20:	08 95       	ret

00012e22 <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:58
}


//// cteni zapis eeprom float datovy typ
float EEPROMreadFloat(unsigned int addr)
{
   12e22:	cf 92       	push	r12
   12e24:	df 92       	push	r13
   12e26:	ef 92       	push	r14
   12e28:	ff 92       	push	r15
   12e2a:	0f 93       	push	r16
   12e2c:	1f 93       	push	r17
   12e2e:	cf 93       	push	r28
   12e30:	df 93       	push	r29
   12e32:	00 d0       	rcall	.+0      	; 0x12e34 <EEPROMreadFloat(unsigned int)+0x12>
   12e34:	1f 92       	push	r1
   12e36:	cd b7       	in	r28, 0x3d	; 61
   12e38:	de b7       	in	r29, 0x3e	; 62
   12e3a:	7e 01       	movw	r14, r28
   12e3c:	25 e0       	ldi	r18, 0x05	; 5
   12e3e:	e2 0e       	add	r14, r18
   12e40:	f1 1c       	adc	r15, r1
   12e42:	8e 01       	movw	r16, r28
   12e44:	0f 5f       	subi	r16, 0xFF	; 255
   12e46:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:63
  union {
    uint8_t b[4];
    float f;
  } data;
  for (int i = 0; i < 4; i++) data.b[i] = EEPROM.read(addr + i);
   12e48:	6c 01       	movw	r12, r24
   12e4a:	c0 1a       	sub	r12, r16
   12e4c:	d1 0a       	sbc	r13, r17
   12e4e:	c6 01       	movw	r24, r12
   12e50:	80 0f       	add	r24, r16
   12e52:	91 1f       	adc	r25, r17
   12e54:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   12e58:	f8 01       	movw	r30, r16
   12e5a:	81 93       	st	Z+, r24
   12e5c:	8f 01       	movw	r16, r30
   12e5e:	ee 15       	cp	r30, r14
   12e60:	ff 05       	cpc	r31, r15
   12e62:	a9 f7       	brne	.-22     	; 0x12e4e <EEPROMreadFloat(unsigned int)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:64
  return data.f;
   12e64:	69 81       	ldd	r22, Y+1	; 0x01
   12e66:	7a 81       	ldd	r23, Y+2	; 0x02
   12e68:	8b 81       	ldd	r24, Y+3	; 0x03
   12e6a:	9c 81       	ldd	r25, Y+4	; 0x04
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:65
}
   12e6c:	0f 90       	pop	r0
   12e6e:	0f 90       	pop	r0
   12e70:	0f 90       	pop	r0
   12e72:	0f 90       	pop	r0
   12e74:	df 91       	pop	r29
   12e76:	cf 91       	pop	r28
   12e78:	1f 91       	pop	r17
   12e7a:	0f 91       	pop	r16
   12e7c:	ff 90       	pop	r15
   12e7e:	ef 90       	pop	r14
   12e80:	df 90       	pop	r13
   12e82:	cf 90       	pop	r12
   12e84:	08 95       	ret

00012e86 <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:134

    return _len;
}

uint8_t W5500Class::read(uint16_t _addr, uint8_t _cb)
{
   12e86:	cf 93       	push	r28
   12e88:	df 93       	push	r29
   12e8a:	d8 2f       	mov	r29, r24
   12e8c:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:135
    SPI.beginTransaction(wiznet_SPI_settings);
   12e8e:	80 91 3a 11 	lds	r24, 0x113A	; 0x80113a <wiznet_SPI_settings>
   12e92:	90 91 3b 11 	lds	r25, 0x113B	; 0x80113b <wiznet_SPI_settings+0x1>
   12e96:	0e 94 66 80 	call	0x100cc	; 0x100cc <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:136
    setSS();
   12e9a:	0e 94 aa 8a 	call	0x11554	; 0x11554 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:137
    SPI.transfer(_addr >> 8);
   12e9e:	80 e0       	ldi	r24, 0x00	; 0
   12ea0:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:138
    SPI.transfer(_addr & 0xFF);
   12ea4:	8d 2f       	mov	r24, r29
   12ea6:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:139
    SPI.transfer(_cb);
   12eaa:	8c 2f       	mov	r24, r28
   12eac:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:140
    uint8_t _data = SPI.transfer(0);
   12eb0:	80 e0       	ldi	r24, 0x00	; 0
   12eb2:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
   12eb6:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:141
    resetSS();
   12eb8:	0e 94 a5 8a 	call	0x1154a	; 0x1154a <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:145
    SPI.endTransaction();

    return _data;
}
   12ebc:	8c 2f       	mov	r24, r28
   12ebe:	df 91       	pop	r29
   12ec0:	cf 91       	pop	r28
   12ec2:	08 95       	ret

00012ec4 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:118

    return 1;
}

uint16_t W5500Class::write(uint16_t _addr, uint8_t _cb, const uint8_t *_buf, uint16_t _len)
{
   12ec4:	df 92       	push	r13
   12ec6:	ef 92       	push	r14
   12ec8:	ff 92       	push	r15
   12eca:	0f 93       	push	r16
   12ecc:	1f 93       	push	r17
   12ece:	cf 93       	push	r28
   12ed0:	df 93       	push	r29
   12ed2:	d8 2f       	mov	r29, r24
   12ed4:	d9 2e       	mov	r13, r25
   12ed6:	c6 2f       	mov	r28, r22
   12ed8:	7a 01       	movw	r14, r20
   12eda:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:119
    SPI.beginTransaction(wiznet_SPI_settings);
   12edc:	80 91 3a 11 	lds	r24, 0x113A	; 0x80113a <wiznet_SPI_settings>
   12ee0:	90 91 3b 11 	lds	r25, 0x113B	; 0x80113b <wiznet_SPI_settings+0x1>
   12ee4:	0e 94 66 80 	call	0x100cc	; 0x100cc <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:120
    setSS();
   12ee8:	0e 94 aa 8a 	call	0x11554	; 0x11554 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:121
    SPI.transfer(_addr >> 8);
   12eec:	8d 2d       	mov	r24, r13
   12eee:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:122
    SPI.transfer(_addr & 0xFF);
   12ef2:	8d 2f       	mov	r24, r29
   12ef4:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:123
    SPI.transfer(_cb);
   12ef8:	8c 2f       	mov	r24, r28
   12efa:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
   12efe:	e7 01       	movw	r28, r14
   12f00:	e0 0e       	add	r14, r16
   12f02:	f1 1e       	adc	r15, r17
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:124
    for (uint16_t i=0; i<_len; i++){
   12f04:	ce 15       	cp	r28, r14
   12f06:	df 05       	cpc	r29, r15
   12f08:	21 f0       	breq	.+8      	; 0x12f12 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:125
        SPI.transfer(_buf[i]);
   12f0a:	89 91       	ld	r24, Y+
   12f0c:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
   12f10:	f9 cf       	rjmp	.-14     	; 0x12f04 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:127
    }
    resetSS();
   12f12:	0e 94 a5 8a 	call	0x1154a	; 0x1154a <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:131
    SPI.endTransaction();

    return _len;
}
   12f16:	c8 01       	movw	r24, r16
   12f18:	df 91       	pop	r29
   12f1a:	cf 91       	pop	r28
   12f1c:	1f 91       	pop	r17
   12f1e:	0f 91       	pop	r16
   12f20:	ff 90       	pop	r15
   12f22:	ef 90       	pop	r14
   12f24:	df 90       	pop	r13
   12f26:	08 95       	ret

00012f28 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.100():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:136
{
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
   12f28:	8f 92       	push	r8
   12f2a:	9f 92       	push	r9
   12f2c:	af 92       	push	r10
   12f2e:	bf 92       	push	r11
   12f30:	cf 92       	push	r12
   12f32:	df 92       	push	r13
   12f34:	ef 92       	push	r14
   12f36:	ff 92       	push	r15
   12f38:	0f 93       	push	r16
   12f3a:	1f 93       	push	r17
   12f3c:	cf 93       	push	r28
   12f3e:	5c 01       	movw	r10, r24
   12f40:	6b 01       	movw	r12, r22
   12f42:	7a 01       	movw	r14, r20
   12f44:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:138
{
  w5500.init(w5500_cspin);
   12f46:	c0 91 14 0c 	lds	r28, 0x0C14	; 0x800c14 <Ethernet+0xc>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:30
SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;

void W5500Class::init(uint8_t ss_pin)
{
  SPI_CS = ss_pin;
   12f4a:	c0 93 e0 10 	sts	0x10E0, r28	; 0x8010e0 <SPI_CS>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:32

  delay(1000);
   12f4e:	68 ee       	ldi	r22, 0xE8	; 232
   12f50:	73 e0       	ldi	r23, 0x03	; 3
   12f52:	80 e0       	ldi	r24, 0x00	; 0
   12f54:	90 e0       	ldi	r25, 0x00	; 0
   12f56:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
initSS():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:340
private:
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
   12f5a:	61 e0       	ldi	r22, 0x01	; 1
   12f5c:	8c 2f       	mov	r24, r28
   12f5e:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:34
  initSS();
  SPI.begin();
   12f62:	0e 94 3a 36 	call	0x6c74	; 0x6c74 <SPIClass::begin()>
readMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   12f66:	60 e0       	ldi	r22, 0x00	; 0
   12f68:	90 e0       	ldi	r25, 0x00	; 0
   12f6a:	80 e0       	ldi	r24, 0x00	; 0
   12f6c:	0e 94 43 97 	call	0x12e86	; 0x12e86 <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv.isra.1():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:417
//  readPHYCFGR();
  return read(0x002E, 0x00);
}

void W5500Class::swReset() {
  writeMR( (readMR() | 0x80) );
   12f70:	48 2f       	mov	r20, r24
   12f72:	40 68       	ori	r20, 0x80	; 128
writeMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   12f74:	64 e0       	ldi	r22, 0x04	; 4
   12f76:	90 e0       	ldi	r25, 0x00	; 0
   12f78:	80 e0       	ldi	r24, 0x00	; 0
   12f7a:	0e 94 af 8a 	call	0x1155e	; 0x1155e <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   12f7e:	cc e0       	ldi	r28, 0x0C	; 12
   12f80:	88 e0       	ldi	r24, 0x08	; 8
   12f82:	88 2e       	mov	r8, r24
   12f84:	91 2c       	mov	r9, r1
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:38
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
    uint8_t cntl_byte = (0x0C + (i<<5));
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
   12f86:	42 e0       	ldi	r20, 0x02	; 2
   12f88:	6c 2f       	mov	r22, r28
   12f8a:	8e e1       	ldi	r24, 0x1E	; 30
   12f8c:	90 e0       	ldi	r25, 0x00	; 0
   12f8e:	0e 94 af 8a 	call	0x1155e	; 0x1155e <W5500Class::write(unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:39
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
   12f92:	42 e0       	ldi	r20, 0x02	; 2
   12f94:	6c 2f       	mov	r22, r28
   12f96:	8f e1       	ldi	r24, 0x1F	; 31
   12f98:	90 e0       	ldi	r25, 0x00	; 0
   12f9a:	0e 94 af 8a 	call	0x1155e	; 0x1155e <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   12f9e:	81 e0       	ldi	r24, 0x01	; 1
   12fa0:	88 1a       	sub	r8, r24
   12fa2:	91 08       	sbc	r9, r1
   12fa4:	c0 5e       	subi	r28, 0xE0	; 224
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:36

  delay(1000);
  initSS();
  SPI.begin();
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
   12fa6:	81 14       	cp	r8, r1
   12fa8:	91 04       	cpc	r9, r1
   12faa:	69 f7       	brne	.-38     	; 0x12f86 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]+0x5e>
writeSHAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:237
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
   12fac:	26 e0       	ldi	r18, 0x06	; 6
   12fae:	30 e0       	ldi	r19, 0x00	; 0
   12fb0:	4d e1       	ldi	r20, 0x1D	; 29
   12fb2:	5c e0       	ldi	r21, 0x0C	; 12
   12fb4:	64 e0       	ldi	r22, 0x04	; 4
   12fb6:	89 e0       	ldi	r24, 0x09	; 9
   12fb8:	90 e0       	ldi	r25, 0x00	; 0
   12fba:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   12fbe:	a5 01       	movw	r20, r10
   12fc0:	4e 5f       	subi	r20, 0xFE	; 254
   12fc2:	5f 4f       	sbci	r21, 0xFF	; 255
writeSIPR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:238
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
   12fc4:	24 e0       	ldi	r18, 0x04	; 4
   12fc6:	30 e0       	ldi	r19, 0x00	; 0
   12fc8:	64 e0       	ldi	r22, 0x04	; 4
   12fca:	8f e0       	ldi	r24, 0x0F	; 15
   12fcc:	90 e0       	ldi	r25, 0x00	; 0
   12fce:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
   12fd2:	a7 01       	movw	r20, r14
   12fd4:	4e 5f       	subi	r20, 0xFE	; 254
   12fd6:	5f 4f       	sbci	r21, 0xFF	; 255
writeGAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:235
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
   12fd8:	24 e0       	ldi	r18, 0x04	; 4
   12fda:	30 e0       	ldi	r19, 0x00	; 0
   12fdc:	64 e0       	ldi	r22, 0x04	; 4
   12fde:	81 e0       	ldi	r24, 0x01	; 1
   12fe0:	90 e0       	ldi	r25, 0x00	; 0
   12fe2:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
   12fe6:	a8 01       	movw	r20, r16
   12fe8:	4e 5f       	subi	r20, 0xFE	; 254
   12fea:	5f 4f       	sbci	r21, 0xFF	; 255
writeSUBR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:236
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
   12fec:	24 e0       	ldi	r18, 0x04	; 4
   12fee:	30 e0       	ldi	r19, 0x00	; 0
   12ff0:	64 e0       	ldi	r22, 0x04	; 4
   12ff2:	85 e0       	ldi	r24, 0x05	; 5
   12ff4:	90 e0       	ldi	r25, 0x00	; 0
   12ff6:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   12ffa:	f6 01       	movw	r30, r12
   12ffc:	82 81       	ldd	r24, Z+2	; 0x02
   12ffe:	93 81       	ldd	r25, Z+3	; 0x03
   13000:	a4 81       	ldd	r26, Z+4	; 0x04
   13002:	b5 81       	ldd	r27, Z+5	; 0x05
   13004:	80 93 0a 0c 	sts	0x0C0A, r24	; 0x800c0a <Ethernet+0x2>
   13008:	90 93 0b 0c 	sts	0x0C0B, r25	; 0x800c0b <Ethernet+0x3>
   1300c:	a0 93 0c 0c 	sts	0x0C0C, r26	; 0x800c0c <Ethernet+0x4>
   13010:	b0 93 0d 0c 	sts	0x0C0D, r27	; 0x800c0d <Ethernet+0x5>
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.100():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:144
  w5500.setMACAddress(mac);
  w5500.setIPAddress(local_ip.raw_address());
  w5500.setGatewayIp(gateway.raw_address());
  w5500.setSubnetMask(subnet.raw_address());
  _dnsServerAddress = dns_server;
}
   13014:	cf 91       	pop	r28
   13016:	1f 91       	pop	r17
   13018:	0f 91       	pop	r16
   1301a:	ff 90       	pop	r15
   1301c:	ef 90       	pop	r14
   1301e:	df 90       	pop	r13
   13020:	cf 90       	pop	r12
   13022:	bf 90       	pop	r11
   13024:	af 90       	pop	r10
   13026:	9f 90       	pop	r9
   13028:	8f 90       	pop	r8
   1302a:	08 95       	ret

0001302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:352
uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
}

uint8_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
   1302c:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:353
    uint8_t cntl_byte = (_s<<5)+0x0C;
   1302e:	82 95       	swap	r24
   13030:	88 0f       	add	r24, r24
   13032:	80 7e       	andi	r24, 0xE0	; 224
   13034:	6c e0       	ldi	r22, 0x0C	; 12
   13036:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:354
    return write(_addr, cntl_byte, _data);
   13038:	c9 01       	movw	r24, r18
   1303a:	0c 94 af 8a 	jmp	0x1155e	; 0x1155e <W5500Class::write(unsigned int, unsigned char, unsigned char)>

0001303e <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:74
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);

}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
   1303e:	bf 92       	push	r11
   13040:	cf 92       	push	r12
   13042:	df 92       	push	r13
   13044:	ef 92       	push	r14
   13046:	ff 92       	push	r15
   13048:	0f 93       	push	r16
   1304a:	1f 93       	push	r17
   1304c:	cf 93       	push	r28
   1304e:	df 93       	push	r29
   13050:	b8 2e       	mov	r11, r24
   13052:	6b 01       	movw	r12, r22
   13054:	7a 01       	movw	r14, r20
   13056:	89 01       	movw	r16, r18
readSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
   13058:	64 e2       	ldi	r22, 0x24	; 36
   1305a:	70 e0       	ldi	r23, 0x00	; 0
   1305c:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
   13060:	c8 2f       	mov	r28, r24
   13062:	65 e2       	ldi	r22, 0x25	; 37
   13064:	70 e0       	ldi	r23, 0x00	; 0
   13066:	8b 2d       	mov	r24, r11
   13068:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
   1306c:	d0 e0       	ldi	r29, 0x00	; 0
   1306e:	dc 2f       	mov	r29, r28
   13070:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:78
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
    ptr += data_offset;
   13072:	8c 0d       	add	r24, r12
   13074:	9d 2d       	mov	r25, r13
   13076:	91 1d       	adc	r25, r1
   13078:	c8 0f       	add	r28, r24
   1307a:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:77
}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
   1307c:	6b 2d       	mov	r22, r11
   1307e:	62 95       	swap	r22
   13080:	66 0f       	add	r22, r22
   13082:	60 7e       	andi	r22, 0xE0	; 224
   13084:	6c 5e       	subi	r22, 0xEC	; 236
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:79
    ptr += data_offset;
    write(ptr, cntl_byte, data, len);
   13086:	98 01       	movw	r18, r16
   13088:	a7 01       	movw	r20, r14
   1308a:	ce 01       	movw	r24, r28
   1308c:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:80
    ptr += len;
   13090:	c0 0f       	add	r28, r16
   13092:	d1 1f       	adc	r29, r17
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   13094:	4d 2f       	mov	r20, r29
   13096:	64 e2       	ldi	r22, 0x24	; 36
   13098:	70 e0       	ldi	r23, 0x00	; 0
   1309a:	8b 2d       	mov	r24, r11
   1309c:	0e 94 16 98 	call	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   130a0:	4c 2f       	mov	r20, r28
   130a2:	65 e2       	ldi	r22, 0x25	; 37
   130a4:	70 e0       	ldi	r23, 0x00	; 0
   130a6:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:82
    writeSnTX_WR(s, ptr);
}
   130a8:	df 91       	pop	r29
   130aa:	cf 91       	pop	r28
   130ac:	1f 91       	pop	r17
   130ae:	0f 91       	pop	r16
   130b0:	ff 90       	pop	r15
   130b2:	ef 90       	pop	r14
   130b4:	df 90       	pop	r13
   130b6:	cf 90       	pop	r12
   130b8:	bf 90       	pop	r11
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   130ba:	0c 94 16 98 	jmp	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

000130be <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
   130be:	af 92       	push	r10
   130c0:	bf 92       	push	r11
   130c2:	cf 92       	push	r12
   130c4:	df 92       	push	r13
   130c6:	ff 92       	push	r15
   130c8:	0f 93       	push	r16
   130ca:	1f 93       	push	r17
   130cc:	cf 93       	push	r28
   130ce:	df 93       	push	r29
   130d0:	8c 01       	movw	r16, r24
   130d2:	5b 01       	movw	r10, r22
   130d4:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
   130d6:	fc 01       	movw	r30, r24
   130d8:	c7 88       	ldd	r12, Z+23	; 0x17
   130da:	d0 8c       	ldd	r13, Z+24	; 0x18
   130dc:	f4 84       	ldd	r15, Z+12	; 0x0c
bufferData():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
   130de:	8f 2d       	mov	r24, r15
   130e0:	0e 94 d4 88 	call	0x111a8	; 0x111a8 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   130e4:	8c 17       	cp	r24, r28
   130e6:	9d 07       	cpc	r25, r29
   130e8:	20 f4       	brcc	.+8      	; 0x130f2 <EthernetUDP::write(unsigned char const*, unsigned int)+0x34>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
   130ea:	8f 2d       	mov	r24, r15
   130ec:	0e 94 d4 88 	call	0x111a8	; 0x111a8 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   130f0:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
   130f2:	9e 01       	movw	r18, r28
   130f4:	a5 01       	movw	r20, r10
   130f6:	b6 01       	movw	r22, r12
   130f8:	8f 2d       	mov	r24, r15
   130fa:	0e 94 1f 98 	call	0x1303e	; 0x1303e <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
   130fe:	f8 01       	movw	r30, r16
   13100:	87 89       	ldd	r24, Z+23	; 0x17
   13102:	90 8d       	ldd	r25, Z+24	; 0x18
   13104:	8c 0f       	add	r24, r28
   13106:	9d 1f       	adc	r25, r29
   13108:	90 8f       	std	Z+24, r25	; 0x18
   1310a:	87 8b       	std	Z+23, r24	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
   1310c:	ce 01       	movw	r24, r28
   1310e:	df 91       	pop	r29
   13110:	cf 91       	pop	r28
   13112:	1f 91       	pop	r17
   13114:	0f 91       	pop	r16
   13116:	ff 90       	pop	r15
   13118:	df 90       	pop	r13
   1311a:	cf 90       	pop	r12
   1311c:	bf 90       	pop	r11
   1311e:	af 90       	pop	r10
   13120:	08 95       	ret

00013122 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>:
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:163
    SPI.endTransaction();

    return _len;
}

void W5500Class::execCmdSn(SOCKET s, SockCMD _cmd) {
   13122:	cf 93       	push	r28
   13124:	c8 2f       	mov	r28, r24
   13126:	46 2f       	mov	r20, r22
writeSnCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:306
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
   13128:	61 e0       	ldi	r22, 0x01	; 1
   1312a:	70 e0       	ldi	r23, 0x00	; 0
   1312c:	0e 94 16 98 	call	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
readSnCR():
   13130:	61 e0       	ldi	r22, 0x01	; 1
   13132:	70 e0       	ldi	r23, 0x00	; 0
   13134:	8c 2f       	mov	r24, r28
   13136:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:167
    // Send command to socket
    writeSnCR(s, _cmd);
    // Wait for command to complete
    while (readSnCR(s))
   1313a:	81 11       	cpse	r24, r1
   1313c:	f9 cf       	rjmp	.-14     	; 0x13130 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]+0xe>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:169
    ;
}
   1313e:	cf 91       	pop	r28
   13140:	08 95       	ret

00013142 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>:
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:84
    write(ptr, cntl_byte, data, len);
    ptr += len;
    writeSnTX_WR(s, ptr);
}

void W5500Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
   13142:	af 92       	push	r10
   13144:	bf 92       	push	r11
   13146:	cf 92       	push	r12
   13148:	df 92       	push	r13
   1314a:	ef 92       	push	r14
   1314c:	ff 92       	push	r15
   1314e:	0f 93       	push	r16
   13150:	1f 93       	push	r17
   13152:	cf 93       	push	r28
   13154:	df 93       	push	r29
   13156:	f8 2e       	mov	r15, r24
   13158:	5b 01       	movw	r10, r22
   1315a:	6a 01       	movw	r12, r20
   1315c:	e2 2e       	mov	r14, r18
readSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
   1315e:	68 e2       	ldi	r22, 0x28	; 40
   13160:	70 e0       	ldi	r23, 0x00	; 0
   13162:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
   13166:	08 2f       	mov	r16, r24
   13168:	10 e0       	ldi	r17, 0x00	; 0
   1316a:	10 2f       	mov	r17, r16
   1316c:	00 27       	eor	r16, r16
   1316e:	69 e2       	ldi	r22, 0x29	; 41
   13170:	70 e0       	ldi	r23, 0x00	; 0
   13172:	8f 2d       	mov	r24, r15
   13174:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
   13178:	e8 01       	movw	r28, r16
   1317a:	c8 0f       	add	r28, r24
   1317c:	d1 1d       	adc	r29, r1
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:149
    return _data;
}

uint16_t W5500Class::read(uint16_t _addr, uint8_t _cb, uint8_t *_buf, uint16_t _len)
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
   1317e:	80 91 3a 11 	lds	r24, 0x113A	; 0x80113a <wiznet_SPI_settings>
   13182:	90 91 3b 11 	lds	r25, 0x113B	; 0x80113b <wiznet_SPI_settings+0x1>
   13186:	0e 94 66 80 	call	0x100cc	; 0x100cc <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:150
    setSS();
   1318a:	0e 94 aa 8a 	call	0x11554	; 0x11554 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:151
    SPI.transfer(_addr >> 8);
   1318e:	8d 2f       	mov	r24, r29
   13190:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:152
    SPI.transfer(_addr & 0xFF);
   13194:	8c 2f       	mov	r24, r28
   13196:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
read_data():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:99
    }
}

void W5500Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    uint8_t cntl_byte = (0x18+(s<<5));
   1319a:	8f 2d       	mov	r24, r15
   1319c:	82 95       	swap	r24
   1319e:	88 0f       	add	r24, r24
   131a0:	80 7e       	andi	r24, 0xE0	; 224
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:153
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
   131a2:	88 5e       	subi	r24, 0xE8	; 232
   131a4:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
   131a8:	85 01       	movw	r16, r10
   131aa:	ac 0c       	add	r10, r12
   131ac:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:155
    for (uint16_t i=0; i<_len; i++){
        _buf[i] = SPI.transfer(0);
   131ae:	80 e0       	ldi	r24, 0x00	; 0
   131b0:	0e 94 5f 80 	call	0x100be	; 0x100be <SPIClass::transfer(unsigned char)>
   131b4:	f8 01       	movw	r30, r16
   131b6:	81 93       	st	Z+, r24
   131b8:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:154
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
    for (uint16_t i=0; i<_len; i++){
   131ba:	ea 15       	cp	r30, r10
   131bc:	fb 05       	cpc	r31, r11
   131be:	b9 f7       	brne	.-18     	; 0x131ae <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0x6c>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:157
        _buf[i] = SPI.transfer(0);
    }
    resetSS();
   131c0:	0e 94 a5 8a 	call	0x1154a	; 0x1154a <W5500Class::resetSS()>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:90
{
    uint16_t ptr;
    ptr = readSnRX_RD(s);

    read_data(s, ptr, data, len);
    if (!peek)
   131c4:	e1 10       	cpse	r14, r1
   131c6:	18 c0       	rjmp	.+48     	; 0x131f8 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0xb6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:92
    {
        ptr += len;
   131c8:	cc 0d       	add	r28, r12
   131ca:	dd 1d       	adc	r29, r13
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   131cc:	4d 2f       	mov	r20, r29
   131ce:	68 e2       	ldi	r22, 0x28	; 40
   131d0:	70 e0       	ldi	r23, 0x00	; 0
   131d2:	8f 2d       	mov	r24, r15
   131d4:	0e 94 16 98 	call	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   131d8:	4c 2f       	mov	r20, r28
   131da:	69 e2       	ldi	r22, 0x29	; 41
   131dc:	70 e0       	ldi	r23, 0x00	; 0
   131de:	8f 2d       	mov	r24, r15
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
        writeSnRX_RD(s, ptr);
    }
}
   131e0:	df 91       	pop	r29
   131e2:	cf 91       	pop	r28
   131e4:	1f 91       	pop	r17
   131e6:	0f 91       	pop	r16
   131e8:	ff 90       	pop	r15
   131ea:	ef 90       	pop	r14
   131ec:	df 90       	pop	r13
   131ee:	cf 90       	pop	r12
   131f0:	bf 90       	pop	r11
   131f2:	af 90       	pop	r10
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   131f4:	0c 94 16 98 	jmp	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
   131f8:	df 91       	pop	r29
   131fa:	cf 91       	pop	r28
   131fc:	1f 91       	pop	r17
   131fe:	0f 91       	pop	r16
   13200:	ff 90       	pop	r15
   13202:	ef 90       	pop	r14
   13204:	df 90       	pop	r13
   13206:	cf 90       	pop	r12
   13208:	bf 90       	pop	r11
   1320a:	af 90       	pop	r10
   1320c:	08 95       	ret

0001320e <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:153
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
   1320e:	cf 92       	push	r12
   13210:	df 92       	push	r13
   13212:	ef 92       	push	r14
   13214:	ff 92       	push	r15
   13216:	1f 93       	push	r17
   13218:	cf 93       	push	r28
   1321a:	df 93       	push	r29
   1321c:	18 2f       	mov	r17, r24
   1321e:	6b 01       	movw	r12, r22
   13220:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:155
  // Check how much data is available
  int16_t ret = w5500.getRXReceivedSize(s);
   13222:	0e 94 f0 88 	call	0x111e0	; 0x111e0 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   13226:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:156
  if ( ret == 0 )
   13228:	00 97       	sbiw	r24, 0x00	; 0
   1322a:	d9 f4       	brne	.+54     	; 0x13262 <recv(unsigned char, unsigned char*, int)+0x54>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   1322c:	63 e0       	ldi	r22, 0x03	; 3
   1322e:	70 e0       	ldi	r23, 0x00	; 0
   13230:	81 2f       	mov	r24, r17
   13232:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:160
  {
    // No data available.
    uint8_t status = w5500.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
   13236:	84 31       	cpi	r24, 0x14	; 20
   13238:	59 f0       	breq	.+22     	; 0x13250 <recv(unsigned char, unsigned char*, int)+0x42>
   1323a:	88 23       	and	r24, r24
   1323c:	49 f0       	breq	.+18     	; 0x13250 <recv(unsigned char, unsigned char*, int)+0x42>
   1323e:	c1 e0       	ldi	r28, 0x01	; 1
   13240:	d0 e0       	ldi	r29, 0x00	; 0
   13242:	8c 31       	cpi	r24, 0x1C	; 28
   13244:	11 f4       	brne	.+4      	; 0x1324a <recv(unsigned char, unsigned char*, int)+0x3c>
   13246:	d0 e0       	ldi	r29, 0x00	; 0
   13248:	c0 e0       	ldi	r28, 0x00	; 0
   1324a:	d1 95       	neg	r29
   1324c:	c1 95       	neg	r28
   1324e:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:182
  {
    w5500.recv_data_processing(s, buf, ret);
    w5500.execCmdSn(s, Sock_RECV);
  }
  return ret;
}
   13250:	ce 01       	movw	r24, r28
   13252:	df 91       	pop	r29
   13254:	cf 91       	pop	r28
   13256:	1f 91       	pop	r17
   13258:	ff 90       	pop	r15
   1325a:	ef 90       	pop	r14
   1325c:	df 90       	pop	r13
   1325e:	cf 90       	pop	r12
   13260:	08 95       	ret
   13262:	e8 16       	cp	r14, r24
   13264:	f9 06       	cpc	r15, r25
   13266:	0c f4       	brge	.+2      	; 0x1326a <recv(unsigned char, unsigned char*, int)+0x5c>
   13268:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:176
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
   1326a:	1c 16       	cp	r1, r28
   1326c:	1d 06       	cpc	r1, r29
   1326e:	84 f7       	brge	.-32     	; 0x13250 <recv(unsigned char, unsigned char*, int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:178
  {
    w5500.recv_data_processing(s, buf, ret);
   13270:	20 e0       	ldi	r18, 0x00	; 0
   13272:	ae 01       	movw	r20, r28
   13274:	b6 01       	movw	r22, r12
   13276:	81 2f       	mov	r24, r17
   13278:	0e 94 a1 98 	call	0x13142	; 0x13142 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:179
    w5500.execCmdSn(s, Sock_RECV);
   1327c:	60 e4       	ldi	r22, 0x40	; 64
   1327e:	70 e0       	ldi	r23, 0x00	; 0
   13280:	81 2f       	mov	r24, r17
   13282:	0e 94 91 98 	call	0x13122	; 0x13122 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
   13286:	e4 cf       	rjmp	.-56     	; 0x13250 <recv(unsigned char, unsigned char*, int)+0x42>

00013288 <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   13288:	cf 93       	push	r28
   1328a:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   1328c:	fc 01       	movw	r30, r24
   1328e:	21 8d       	ldd	r18, Z+25	; 0x19
   13290:	32 8d       	ldd	r19, Z+26	; 0x1a
   13292:	21 15       	cp	r18, r1
   13294:	31 05       	cpc	r19, r1
   13296:	29 f4       	brne	.+10     	; 0x132a2 <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   13298:	8f ef       	ldi	r24, 0xFF	; 255
   1329a:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   1329c:	df 91       	pop	r29
   1329e:	cf 91       	pop	r28
   132a0:	08 95       	ret
   132a2:	ec 01       	movw	r28, r24
   132a4:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   132a6:	42 17       	cp	r20, r18
   132a8:	53 07       	cpc	r21, r19
   132aa:	08 f0       	brcs	.+2      	; 0x132ae <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   132ac:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   132ae:	0e 94 07 99 	call	0x1320e	; 0x1320e <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   132b2:	18 16       	cp	r1, r24
   132b4:	19 06       	cpc	r1, r25
   132b6:	84 f7       	brge	.-32     	; 0x13298 <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   132b8:	29 8d       	ldd	r18, Y+25	; 0x19
   132ba:	3a 8d       	ldd	r19, Y+26	; 0x1a
   132bc:	28 1b       	sub	r18, r24
   132be:	39 0b       	sbc	r19, r25
   132c0:	3a 8f       	std	Y+26, r19	; 0x1a
   132c2:	29 8f       	std	Y+25, r18	; 0x19
   132c4:	eb cf       	rjmp	.-42     	; 0x1329c <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

000132c6 <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   132c6:	0f 93       	push	r16
   132c8:	1f 93       	push	r17
   132ca:	cf 93       	push	r28
   132cc:	df 93       	push	r29
   132ce:	1f 92       	push	r1
   132d0:	cd b7       	in	r28, 0x3d	; 61
   132d2:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   132d4:	fc 01       	movw	r30, r24
   132d6:	21 8d       	ldd	r18, Z+25	; 0x19
   132d8:	32 8d       	ldd	r19, Z+26	; 0x1a
   132da:	23 2b       	or	r18, r19
   132dc:	41 f4       	brne	.+16     	; 0x132ee <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   132de:	8f ef       	ldi	r24, 0xFF	; 255
   132e0:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   132e2:	0f 90       	pop	r0
   132e4:	df 91       	pop	r29
   132e6:	cf 91       	pop	r28
   132e8:	1f 91       	pop	r17
   132ea:	0f 91       	pop	r16
   132ec:	08 95       	ret
   132ee:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   132f0:	41 e0       	ldi	r20, 0x01	; 1
   132f2:	50 e0       	ldi	r21, 0x00	; 0
   132f4:	be 01       	movw	r22, r28
   132f6:	6f 5f       	subi	r22, 0xFF	; 255
   132f8:	7f 4f       	sbci	r23, 0xFF	; 255
   132fa:	fc 01       	movw	r30, r24
   132fc:	84 85       	ldd	r24, Z+12	; 0x0c
   132fe:	0e 94 07 99 	call	0x1320e	; 0x1320e <recv(unsigned char, unsigned char*, int)>
   13302:	18 16       	cp	r1, r24
   13304:	19 06       	cpc	r1, r25
   13306:	5c f7       	brge	.-42     	; 0x132de <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   13308:	f8 01       	movw	r30, r16
   1330a:	81 8d       	ldd	r24, Z+25	; 0x19
   1330c:	92 8d       	ldd	r25, Z+26	; 0x1a
   1330e:	01 97       	sbiw	r24, 0x01	; 1
   13310:	92 8f       	std	Z+26, r25	; 0x1a
   13312:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   13314:	89 81       	ldd	r24, Y+1	; 0x01
   13316:	90 e0       	ldi	r25, 0x00	; 0
   13318:	e4 cf       	rjmp	.-56     	; 0x132e2 <EthernetUDP::read()+0x1c>

0001331a <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   1331a:	0f 93       	push	r16
   1331c:	1f 93       	push	r17
   1331e:	cf 93       	push	r28
   13320:	df 93       	push	r29
   13322:	00 d0       	rcall	.+0      	; 0x13324 <EthernetUDP::parsePacket()+0xa>
   13324:	00 d0       	rcall	.+0      	; 0x13326 <EthernetUDP::parsePacket()+0xc>
   13326:	1f 92       	push	r1
   13328:	1f 92       	push	r1
   1332a:	cd b7       	in	r28, 0x3d	; 61
   1332c:	de b7       	in	r29, 0x3e	; 62
   1332e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   13330:	dc 01       	movw	r26, r24
   13332:	ed 91       	ld	r30, X+
   13334:	fc 91       	ld	r31, X
   13336:	06 80       	ldd	r0, Z+6	; 0x06
   13338:	f7 81       	ldd	r31, Z+7	; 0x07
   1333a:	e0 2d       	mov	r30, r0
   1333c:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   1333e:	f8 01       	movw	r30, r16
   13340:	84 85       	ldd	r24, Z+12	; 0x0c
   13342:	0e 94 f0 88 	call	0x111e0	; 0x111e0 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   13346:	89 2b       	or	r24, r25
   13348:	b1 f1       	breq	.+108    	; 0x133b6 <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   1334a:	48 e0       	ldi	r20, 0x08	; 8
   1334c:	50 e0       	ldi	r21, 0x00	; 0
   1334e:	be 01       	movw	r22, r28
   13350:	6f 5f       	subi	r22, 0xFF	; 255
   13352:	7f 4f       	sbci	r23, 0xFF	; 255
   13354:	d8 01       	movw	r26, r16
   13356:	1c 96       	adiw	r26, 0x0c	; 12
   13358:	8c 91       	ld	r24, X
   1335a:	0e 94 07 99 	call	0x1320e	; 0x1320e <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   1335e:	18 16       	cp	r1, r24
   13360:	19 06       	cpc	r1, r25
   13362:	f4 f4       	brge	.+60     	; 0x133a0 <EthernetUDP::parsePacket()+0x86>
operator=():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:88
    return true;
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   13364:	d8 01       	movw	r26, r16
   13366:	51 96       	adiw	r26, 0x11	; 17
   13368:	84 e0       	ldi	r24, 0x04	; 4
   1336a:	fe 01       	movw	r30, r28
   1336c:	31 96       	adiw	r30, 0x01	; 1
   1336e:	01 90       	ld	r0, Z+
   13370:	0d 92       	st	X+, r0
   13372:	8a 95       	dec	r24
   13374:	e1 f7       	brne	.-8      	; 0x1336e <EthernetUDP::parsePacket()+0x54>
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
    {
      _remoteIP = tmpBuf;
      _remotePort = tmpBuf[4];
   13376:	8d 81       	ldd	r24, Y+5	; 0x05
   13378:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   1337a:	98 2f       	mov	r25, r24
   1337c:	88 27       	eor	r24, r24
   1337e:	2e 81       	ldd	r18, Y+6	; 0x06
   13380:	82 0f       	add	r24, r18
   13382:	91 1d       	adc	r25, r1
   13384:	f8 01       	movw	r30, r16
   13386:	96 8b       	std	Z+22, r25	; 0x16
   13388:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   1338a:	8f 81       	ldd	r24, Y+7	; 0x07
   1338c:	28 2f       	mov	r18, r24
   1338e:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   13390:	32 2f       	mov	r19, r18
   13392:	22 27       	eor	r18, r18
   13394:	88 85       	ldd	r24, Y+8	; 0x08
   13396:	82 0f       	add	r24, r18
   13398:	93 2f       	mov	r25, r19
   1339a:	91 1d       	adc	r25, r1
   1339c:	92 8f       	std	Z+26, r25	; 0x1a
   1339e:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   133a0:	28 96       	adiw	r28, 0x08	; 8
   133a2:	0f b6       	in	r0, 0x3f	; 63
   133a4:	f8 94       	cli
   133a6:	de bf       	out	0x3e, r29	; 62
   133a8:	0f be       	out	0x3f, r0	; 63
   133aa:	cd bf       	out	0x3d, r28	; 61
   133ac:	df 91       	pop	r29
   133ae:	cf 91       	pop	r28
   133b0:	1f 91       	pop	r17
   133b2:	0f 91       	pop	r16
   133b4:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   133b6:	90 e0       	ldi	r25, 0x00	; 0
   133b8:	80 e0       	ldi	r24, 0x00	; 0
   133ba:	f2 cf       	rjmp	.-28     	; 0x133a0 <EthernetUDP::parsePacket()+0x86>

000133bc <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
   133bc:	cf 93       	push	r28
   133be:	df 93       	push	r29
   133c0:	1f 92       	push	r1
   133c2:	cd b7       	in	r28, 0x3d	; 61
   133c4:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   133c6:	fc 01       	movw	r30, r24
   133c8:	21 8d       	ldd	r18, Z+25	; 0x19
   133ca:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
   133cc:	8f ef       	ldi	r24, 0xFF	; 255
   133ce:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   133d0:	23 2b       	or	r18, r19
   133d2:	59 f0       	breq	.+22     	; 0x133ea <EthernetUDP::peek()+0x2e>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
   133d4:	21 e0       	ldi	r18, 0x01	; 1
   133d6:	41 e0       	ldi	r20, 0x01	; 1
   133d8:	50 e0       	ldi	r21, 0x00	; 0
   133da:	be 01       	movw	r22, r28
   133dc:	6f 5f       	subi	r22, 0xFF	; 255
   133de:	7f 4f       	sbci	r23, 0xFF	; 255
   133e0:	84 85       	ldd	r24, Z+12	; 0x0c
   133e2:	0e 94 a1 98 	call	0x13142	; 0x13142 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
    return -1;
  ::peek(_sock, &b);
  return b;
   133e6:	89 81       	ldd	r24, Y+1	; 0x01
   133e8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
   133ea:	0f 90       	pop	r0
   133ec:	df 91       	pop	r29
   133ee:	cf 91       	pop	r28
   133f0:	08 95       	ret

000133f2 <close(unsigned char)>:
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:43

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
   133f2:	cf 93       	push	r28
   133f4:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:44
  w5500.execCmdSn(s, Sock_CLOSE);
   133f6:	60 e1       	ldi	r22, 0x10	; 16
   133f8:	70 e0       	ldi	r23, 0x00	; 0
   133fa:	0e 94 91 98 	call	0x13122	; 0x13122 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   133fe:	4f ef       	ldi	r20, 0xFF	; 255
   13400:	62 e0       	ldi	r22, 0x02	; 2
   13402:	70 e0       	ldi	r23, 0x00	; 0
   13404:	8c 2f       	mov	r24, r28
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:46
  w5500.writeSnIR(s, 0xFF);
}
   13406:	cf 91       	pop	r28
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   13408:	0c 94 16 98 	jmp	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0001340c <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>:
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:16

/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for w5500 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
   1340c:	0f 93       	push	r16
   1340e:	1f 93       	push	r17
   13410:	cf 93       	push	r28
   13412:	df 93       	push	r29
   13414:	c8 2f       	mov	r28, r24
   13416:	d6 2f       	mov	r29, r22
   13418:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:20
{
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
  {
    close(s);
   1341a:	0e 94 f9 99 	call	0x133f2	; 0x133f2 <close(unsigned char)>
writeSnMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:305
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
   1341e:	4d 2f       	mov	r20, r29
   13420:	70 e0       	ldi	r23, 0x00	; 0
   13422:	60 e0       	ldi	r22, 0x00	; 0
   13424:	8c 2f       	mov	r24, r28
   13426:	0e 94 16 98 	call	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:22
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
   1342a:	01 15       	cp	r16, r1
   1342c:	11 05       	cpc	r17, r1
   1342e:	b9 f0       	breq	.+46     	; 0x1345e <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x52>
writeSnPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:309
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
   13430:	41 2f       	mov	r20, r17
   13432:	64 e0       	ldi	r22, 0x04	; 4
   13434:	70 e0       	ldi	r23, 0x00	; 0
   13436:	8c 2f       	mov	r24, r28
   13438:	0e 94 16 98 	call	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1343c:	40 2f       	mov	r20, r16
   1343e:	65 e0       	ldi	r22, 0x05	; 5
   13440:	70 e0       	ldi	r23, 0x00	; 0
   13442:	8c 2f       	mov	r24, r28
   13444:	0e 94 16 98 	call	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:30
    else {
      local_port++; // if don't set the source port, set local_port number.
      w5500.writeSnPORT(s, local_port);
    }

    w5500.execCmdSn(s, Sock_OPEN);
   13448:	61 e0       	ldi	r22, 0x01	; 1
   1344a:	70 e0       	ldi	r23, 0x00	; 0
   1344c:	8c 2f       	mov	r24, r28
   1344e:	0e 94 91 98 	call	0x13122	; 0x13122 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:36
    
    return 1;
  }

  return 0;
}
   13452:	81 e0       	ldi	r24, 0x01	; 1
   13454:	df 91       	pop	r29
   13456:	cf 91       	pop	r28
   13458:	1f 91       	pop	r17
   1345a:	0f 91       	pop	r16
   1345c:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:26
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
      w5500.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
   1345e:	00 91 da 10 	lds	r16, 0x10DA	; 0x8010da <local_port>
   13462:	10 91 db 10 	lds	r17, 0x10DB	; 0x8010db <local_port+0x1>
   13466:	0f 5f       	subi	r16, 0xFF	; 255
   13468:	1f 4f       	sbci	r17, 0xFF	; 255
   1346a:	10 93 db 10 	sts	0x10DB, r17	; 0x8010db <local_port+0x1>
   1346e:	00 93 da 10 	sts	0x10DA, r16	; 0x8010da <local_port>
   13472:	de cf       	rjmp	.-68     	; 0x13430 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x24>

00013474 <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   13474:	ef 92       	push	r14
   13476:	ff 92       	push	r15
   13478:	1f 93       	push	r17
   1347a:	cf 93       	push	r28
   1347c:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   1347e:	fc 01       	movw	r30, r24
   13480:	24 85       	ldd	r18, Z+12	; 0x0c
   13482:	28 30       	cpi	r18, 0x08	; 8
   13484:	39 f0       	breq	.+14     	; 0x13494 <EthernetUDP::begin(unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   13486:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   13488:	df 91       	pop	r29
   1348a:	cf 91       	pop	r28
   1348c:	1f 91       	pop	r17
   1348e:	ff 90       	pop	r15
   13490:	ef 90       	pop	r14
   13492:	08 95       	ret
   13494:	7b 01       	movw	r14, r22
   13496:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
   13498:	10 e0       	ldi	r17, 0x00	; 0
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   1349a:	63 e0       	ldi	r22, 0x03	; 3
   1349c:	70 e0       	ldi	r23, 0x00	; 0
   1349e:	81 2f       	mov	r24, r17
   134a0:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   134a4:	81 11       	cpse	r24, r1
   134a6:	0e c0       	rjmp	.+28     	; 0x134c4 <EthernetUDP::begin(unsigned int)+0x50>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   134a8:	1c 87       	std	Y+12, r17	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   134aa:	8c 85       	ldd	r24, Y+12	; 0x0c
   134ac:	88 30       	cpi	r24, 0x08	; 8
   134ae:	59 f3       	breq	.-42     	; 0x13486 <EthernetUDP::begin(unsigned int)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   134b0:	fe 86       	std	Y+14, r15	; 0x0e
   134b2:	ed 86       	std	Y+13, r14	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   134b4:	1a 8e       	std	Y+26, r1	; 0x1a
   134b6:	19 8e       	std	Y+25, r1	; 0x19
socket():
   134b8:	a7 01       	movw	r20, r14
   134ba:	62 e0       	ldi	r22, 0x02	; 2
   134bc:	0e 94 06 9a 	call	0x1340c	; 0x1340c <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
   134c0:	81 e0       	ldi	r24, 0x01	; 1
   134c2:	e2 cf       	rjmp	.-60     	; 0x13488 <EthernetUDP::begin(unsigned int)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   134c4:	88 31       	cpi	r24, 0x18	; 24
   134c6:	81 f3       	breq	.-32     	; 0x134a8 <EthernetUDP::begin(unsigned int)+0x34>
   134c8:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   134ca:	18 30       	cpi	r17, 0x08	; 8
   134cc:	31 f7       	brne	.-52     	; 0x1349a <EthernetUDP::begin(unsigned int)+0x26>
   134ce:	ed cf       	rjmp	.-38     	; 0x134aa <EthernetUDP::begin(unsigned int)+0x36>

000134d0 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   134d0:	cf 93       	push	r28
   134d2:	df 93       	push	r29
   134d4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   134d6:	8c 85       	ldd	r24, Y+12	; 0x0c
   134d8:	88 30       	cpi	r24, 0x08	; 8
   134da:	21 f0       	breq	.+8      	; 0x134e4 <EthernetUDP::stop()+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   134dc:	0e 94 f9 99 	call	0x133f2	; 0x133f2 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
   134e0:	88 e0       	ldi	r24, 0x08	; 8
   134e2:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   134e4:	df 91       	pop	r29
   134e6:	cf 91       	pop	r28
   134e8:	08 95       	ret

000134ea <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:106
  _offset = 0;
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
   134ea:	cf 93       	push	r28
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
  return sendUDP(_sock);
   134ec:	fc 01       	movw	r30, r24
   134ee:	c4 85       	ldd	r28, Z+12	; 0x0c
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  }
}

int sendUDP(SOCKET s)
{
  w5500.execCmdSn(s, Sock_SEND);
   134f0:	60 e2       	ldi	r22, 0x20	; 32
   134f2:	70 e0       	ldi	r23, 0x00	; 0
   134f4:	8c 2f       	mov	r24, r28
   134f6:	0e 94 91 98 	call	0x13122	; 0x13122 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   134fa:	62 e0       	ldi	r22, 0x02	; 2
   134fc:	70 e0       	ldi	r23, 0x00	; 0
   134fe:	8c 2f       	mov	r24, r28
   13500:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   13504:	84 fd       	sbrc	r24, 4
   13506:	11 c0       	rjmp	.+34     	; 0x1352a <EthernetUDP::endPacket()+0x40>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   13508:	62 e0       	ldi	r22, 0x02	; 2
   1350a:	70 e0       	ldi	r23, 0x00	; 0
   1350c:	8c 2f       	mov	r24, r28
   1350e:	0e 94 38 32 	call	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   13512:	83 ff       	sbrs	r24, 3
   13514:	f2 cf       	rjmp	.-28     	; 0x134fa <EthernetUDP::endPacket()+0x10>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   13516:	48 e1       	ldi	r20, 0x18	; 24
   13518:	62 e0       	ldi	r22, 0x02	; 2
   1351a:	70 e0       	ldi	r23, 0x00	; 0
   1351c:	8c 2f       	mov	r24, r28
   1351e:	0e 94 16 98 	call	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
   13522:	90 e0       	ldi	r25, 0x00	; 0
   13524:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:108
}
   13526:	cf 91       	pop	r28
   13528:	08 95       	ret
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   1352a:	40 e1       	ldi	r20, 0x10	; 16
   1352c:	62 e0       	ldi	r22, 0x02	; 2
   1352e:	70 e0       	ldi	r23, 0x00	; 0
   13530:	8c 2f       	mov	r24, r28
   13532:	0e 94 16 98 	call	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
   13536:	81 e0       	ldi	r24, 0x01	; 1
   13538:	90 e0       	ldi	r25, 0x00	; 0
   1353a:	f5 cf       	rjmp	.-22     	; 0x13526 <EthernetUDP::endPacket()+0x3c>

0001353c <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:100
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
   1353c:	1f 93       	push	r17
   1353e:	cf 93       	push	r28
   13540:	df 93       	push	r29
   13542:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  _offset = 0;
   13544:	dc 01       	movw	r26, r24
   13546:	58 96       	adiw	r26, 0x18	; 24
   13548:	1c 92       	st	X, r1
   1354a:	1e 92       	st	-X, r1
   1354c:	57 97       	sbiw	r26, 0x17	; 23
startUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  return ret;
}

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
  if
   1354e:	22 81       	ldd	r18, Z+2	; 0x02
   13550:	21 11       	cpse	r18, r1
   13552:	09 c0       	rjmp	.+18     	; 0x13566 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   13554:	23 81       	ldd	r18, Z+3	; 0x03
   13556:	21 11       	cpse	r18, r1
   13558:	06 c0       	rjmp	.+12     	; 0x13566 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   1355a:	24 81       	ldd	r18, Z+4	; 0x04
   1355c:	21 11       	cpse	r18, r1
   1355e:	03 c0       	rjmp	.+6      	; 0x13566 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   13560:	25 81       	ldd	r18, Z+5	; 0x05
   13562:	22 23       	and	r18, r18
   13564:	39 f1       	breq	.+78     	; 0x135b4 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   13566:	41 15       	cp	r20, r1
   13568:	51 05       	cpc	r21, r1
   1356a:	21 f1       	breq	.+72     	; 0x135b4 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   1356c:	ea 01       	movw	r28, r20
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   1356e:	dc 01       	movw	r26, r24
   13570:	1c 96       	adiw	r26, 0x0c	; 12
   13572:	1c 91       	ld	r17, X
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   13574:	af 01       	movw	r20, r30
   13576:	4e 5f       	subi	r20, 0xFE	; 254
   13578:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
   1357a:	61 2f       	mov	r22, r17
   1357c:	62 95       	swap	r22
   1357e:	66 0f       	add	r22, r22
   13580:	60 7e       	andi	r22, 0xE0	; 224
   13582:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
   13584:	24 e0       	ldi	r18, 0x04	; 4
   13586:	30 e0       	ldi	r19, 0x00	; 0
   13588:	8c e0       	ldi	r24, 0x0C	; 12
   1358a:	90 e0       	ldi	r25, 0x00	; 0
   1358c:	0e 94 62 97 	call	0x12ec4	; 0x12ec4 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
   13590:	4d 2f       	mov	r20, r29
   13592:	60 e1       	ldi	r22, 0x10	; 16
   13594:	70 e0       	ldi	r23, 0x00	; 0
   13596:	81 2f       	mov	r24, r17
   13598:	0e 94 16 98 	call	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1359c:	4c 2f       	mov	r20, r28
   1359e:	61 e1       	ldi	r22, 0x11	; 17
   135a0:	70 e0       	ldi	r23, 0x00	; 0
   135a2:	81 2f       	mov	r24, r17
   135a4:	0e 94 16 98 	call	0x1302c	; 0x1302c <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   135a8:	81 e0       	ldi	r24, 0x01	; 1
   135aa:	90 e0       	ldi	r25, 0x00	; 0
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:103
}
   135ac:	df 91       	pop	r29
   135ae:	cf 91       	pop	r28
   135b0:	1f 91       	pop	r17
   135b2:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
     ((port == 0x00))
    ) 
  {
    return 0;
   135b4:	90 e0       	ldi	r25, 0x00	; 0
   135b6:	80 e0       	ldi	r24, 0x00	; 0
   135b8:	f9 cf       	rjmp	.-14     	; 0x135ac <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x70>

000135ba <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   135ba:	fc 01       	movw	r30, r24
   135bc:	84 85       	ldd	r24, Z+12	; 0x0c
   135be:	88 30       	cpi	r24, 0x08	; 8
   135c0:	21 f0       	breq	.+8      	; 0x135ca <EthernetClient::status()+0x10>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   135c2:	63 e0       	ldi	r22, 0x03	; 3
   135c4:	70 e0       	ldi	r23, 0x00	; 0
   135c6:	0c 94 38 32 	jmp	0x6470	; 0x6470 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   135ca:	80 e0       	ldi	r24, 0x00	; 0
   135cc:	08 95       	ret

000135ce <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
   135ce:	cf 93       	push	r28
   135d0:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
   135d2:	fc 01       	movw	r30, r24
   135d4:	24 85       	ldd	r18, Z+12	; 0x0c
   135d6:	28 30       	cpi	r18, 0x08	; 8
   135d8:	d9 f0       	breq	.+54     	; 0x13610 <EthernetClient::connected()+0x42>
   135da:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
   135dc:	0e 94 dd 9a 	call	0x135ba	; 0x135ba <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   135e0:	84 31       	cpi	r24, 0x14	; 20
   135e2:	89 f0       	breq	.+34     	; 0x13606 <EthernetClient::connected()+0x38>
   135e4:	88 23       	and	r24, r24
   135e6:	79 f0       	breq	.+30     	; 0x13606 <EthernetClient::connected()+0x38>
   135e8:	88 31       	cpi	r24, 0x18	; 24
   135ea:	69 f0       	breq	.+26     	; 0x13606 <EthernetClient::connected()+0x38>
   135ec:	21 e0       	ldi	r18, 0x01	; 1
   135ee:	8c 31       	cpi	r24, 0x1C	; 28
   135f0:	59 f4       	brne	.+22     	; 0x13608 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   135f2:	e8 81       	ld	r30, Y
   135f4:	f9 81       	ldd	r31, Y+1	; 0x01
   135f6:	00 84       	ldd	r0, Z+8	; 0x08
   135f8:	f1 85       	ldd	r31, Z+9	; 0x09
   135fa:	e0 2d       	mov	r30, r0
   135fc:	ce 01       	movw	r24, r28
   135fe:	19 95       	eicall
   13600:	21 e0       	ldi	r18, 0x01	; 1
   13602:	89 2b       	or	r24, r25
   13604:	09 f4       	brne	.+2      	; 0x13608 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   13606:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   13608:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
   1360a:	df 91       	pop	r29
   1360c:	cf 91       	pop	r28
   1360e:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
   13610:	80 e0       	ldi	r24, 0x00	; 0
   13612:	fb cf       	rjmp	.-10     	; 0x1360a <EthernetClient::connected()+0x3c>

00013614 <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
   13614:	cf 92       	push	r12
   13616:	df 92       	push	r13
   13618:	ef 92       	push	r14
   1361a:	ff 92       	push	r15
   1361c:	cf 93       	push	r28
   1361e:	df 93       	push	r29
   13620:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
   13622:	8c 85       	ldd	r24, Y+12	; 0x0c
   13624:	88 30       	cpi	r24, 0x08	; 8
   13626:	49 f1       	breq	.+82     	; 0x1367a <EthernetClient::stop()+0x66>
disconnect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:94
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
  w5500.execCmdSn(s, Sock_DISCON);
   13628:	68 e0       	ldi	r22, 0x08	; 8
   1362a:	70 e0       	ldi	r23, 0x00	; 0
   1362c:	0e 94 91 98 	call	0x13122	; 0x13122 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();
   13630:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   13634:	6b 01       	movw	r12, r22
   13636:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   13638:	ce 01       	movw	r24, r28
   1363a:	0e 94 dd 9a 	call	0x135ba	; 0x135ba <EthernetClient::status()>
   1363e:	88 23       	and	r24, r24
   13640:	91 f0       	breq	.+36     	; 0x13666 <EthernetClient::stop()+0x52>
   13642:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   13646:	6c 19       	sub	r22, r12
   13648:	7d 09       	sbc	r23, r13
   1364a:	8e 09       	sbc	r24, r14
   1364c:	9f 09       	sbc	r25, r15
   1364e:	68 3e       	cpi	r22, 0xE8	; 232
   13650:	73 40       	sbci	r23, 0x03	; 3
   13652:	81 05       	cpc	r24, r1
   13654:	91 05       	cpc	r25, r1
   13656:	38 f4       	brcc	.+14     	; 0x13666 <EthernetClient::stop()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
   13658:	61 e0       	ldi	r22, 0x01	; 1
   1365a:	70 e0       	ldi	r23, 0x00	; 0
   1365c:	80 e0       	ldi	r24, 0x00	; 0
   1365e:	90 e0       	ldi	r25, 0x00	; 0
   13660:	0e 94 0c 8b 	call	0x11618	; 0x11618 <delay>
   13664:	e9 cf       	rjmp	.-46     	; 0x13638 <EthernetClient::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
   13666:	ce 01       	movw	r24, r28
   13668:	0e 94 dd 9a 	call	0x135ba	; 0x135ba <EthernetClient::status()>
   1366c:	88 23       	and	r24, r24
   1366e:	19 f0       	breq	.+6      	; 0x13676 <EthernetClient::stop()+0x62>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
   13670:	8c 85       	ldd	r24, Y+12	; 0x0c
   13672:	0e 94 f9 99 	call	0x133f2	; 0x133f2 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
   13676:	88 e0       	ldi	r24, 0x08	; 8
   13678:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
   1367a:	df 91       	pop	r29
   1367c:	cf 91       	pop	r28
   1367e:	ff 90       	pop	r15
   13680:	ef 90       	pop	r14
   13682:	df 90       	pop	r13
   13684:	cf 90       	pop	r12
   13686:	08 95       	ret

00013688 <localtime>:
localtime():
   13688:	69 e2       	ldi	r22, 0x29	; 41
   1368a:	73 e1       	ldi	r23, 0x13	; 19
   1368c:	0e 94 4b 9b 	call	0x13696	; 0x13696 <localtime_r>
   13690:	89 e2       	ldi	r24, 0x29	; 41
   13692:	93 e1       	ldi	r25, 0x13	; 19
   13694:	08 95       	ret

00013696 <localtime_r>:
localtime_r():
   13696:	cf 92       	push	r12
   13698:	df 92       	push	r13
   1369a:	ef 92       	push	r14
   1369c:	ff 92       	push	r15
   1369e:	0f 93       	push	r16
   136a0:	1f 93       	push	r17
   136a2:	cf 93       	push	r28
   136a4:	df 93       	push	r29
   136a6:	00 d0       	rcall	.+0      	; 0x136a8 <localtime_r+0x12>
   136a8:	1f 92       	push	r1
   136aa:	cd b7       	in	r28, 0x3d	; 61
   136ac:	de b7       	in	r29, 0x3e	; 62
   136ae:	6c 01       	movw	r12, r24
   136b0:	7b 01       	movw	r14, r22
   136b2:	e0 91 3f 13 	lds	r30, 0x133F	; 0x80133f <__dst_ptr>
   136b6:	f0 91 40 13 	lds	r31, 0x1340	; 0x801340 <__dst_ptr+0x1>
   136ba:	0f ef       	ldi	r16, 0xFF	; 255
   136bc:	1f ef       	ldi	r17, 0xFF	; 255
   136be:	30 97       	sbiw	r30, 0x00	; 0
   136c0:	21 f0       	breq	.+8      	; 0x136ca <localtime_r+0x34>
   136c2:	65 e3       	ldi	r22, 0x35	; 53
   136c4:	73 e1       	ldi	r23, 0x13	; 19
   136c6:	19 95       	eicall
   136c8:	8c 01       	movw	r16, r24
   136ca:	f6 01       	movw	r30, r12
   136cc:	80 81       	ld	r24, Z
   136ce:	91 81       	ldd	r25, Z+1	; 0x01
   136d0:	a2 81       	ldd	r26, Z+2	; 0x02
   136d2:	b3 81       	ldd	r27, Z+3	; 0x03
   136d4:	40 91 35 13 	lds	r20, 0x1335	; 0x801335 <__utc_offset>
   136d8:	50 91 36 13 	lds	r21, 0x1336	; 0x801336 <__utc_offset+0x1>
   136dc:	60 91 37 13 	lds	r22, 0x1337	; 0x801337 <__utc_offset+0x2>
   136e0:	70 91 38 13 	lds	r23, 0x1338	; 0x801338 <__utc_offset+0x3>
   136e4:	84 0f       	add	r24, r20
   136e6:	95 1f       	adc	r25, r21
   136e8:	a6 1f       	adc	r26, r22
   136ea:	b7 1f       	adc	r27, r23
   136ec:	10 16       	cp	r1, r16
   136ee:	11 06       	cpc	r1, r17
   136f0:	cc f0       	brlt	.+50     	; 0x13724 <localtime_r+0x8e>
   136f2:	89 83       	std	Y+1, r24	; 0x01
   136f4:	9a 83       	std	Y+2, r25	; 0x02
   136f6:	ab 83       	std	Y+3, r26	; 0x03
   136f8:	bc 83       	std	Y+4, r27	; 0x04
   136fa:	b7 01       	movw	r22, r14
   136fc:	ce 01       	movw	r24, r28
   136fe:	01 96       	adiw	r24, 0x01	; 1
   13700:	0e 94 9c 9b 	call	0x13738	; 0x13738 <gmtime_r>
   13704:	f7 01       	movw	r30, r14
   13706:	13 87       	std	Z+11, r17	; 0x0b
   13708:	02 87       	std	Z+10, r16	; 0x0a
   1370a:	0f 90       	pop	r0
   1370c:	0f 90       	pop	r0
   1370e:	0f 90       	pop	r0
   13710:	0f 90       	pop	r0
   13712:	df 91       	pop	r29
   13714:	cf 91       	pop	r28
   13716:	1f 91       	pop	r17
   13718:	0f 91       	pop	r16
   1371a:	ff 90       	pop	r15
   1371c:	ef 90       	pop	r14
   1371e:	df 90       	pop	r13
   13720:	cf 90       	pop	r12
   13722:	08 95       	ret
   13724:	a8 01       	movw	r20, r16
   13726:	01 2e       	mov	r0, r17
   13728:	00 0c       	add	r0, r0
   1372a:	66 0b       	sbc	r22, r22
   1372c:	77 0b       	sbc	r23, r23
   1372e:	84 0f       	add	r24, r20
   13730:	95 1f       	adc	r25, r21
   13732:	a6 1f       	adc	r26, r22
   13734:	b7 1f       	adc	r27, r23
   13736:	dd cf       	rjmp	.-70     	; 0x136f2 <localtime_r+0x5c>

00013738 <gmtime_r>:
gmtime_r():
   13738:	cf 92       	push	r12
   1373a:	df 92       	push	r13
   1373c:	ef 92       	push	r14
   1373e:	ff 92       	push	r15
   13740:	0f 93       	push	r16
   13742:	1f 93       	push	r17
   13744:	cf 93       	push	r28
   13746:	df 93       	push	r29
   13748:	00 d0       	rcall	.+0      	; 0x1374a <gmtime_r+0x12>
   1374a:	00 d0       	rcall	.+0      	; 0x1374c <gmtime_r+0x14>
   1374c:	1f 92       	push	r1
   1374e:	1f 92       	push	r1
   13750:	cd b7       	in	r28, 0x3d	; 61
   13752:	de b7       	in	r29, 0x3e	; 62
   13754:	8b 01       	movw	r16, r22
   13756:	fc 01       	movw	r30, r24
   13758:	60 81       	ld	r22, Z
   1375a:	71 81       	ldd	r23, Z+1	; 0x01
   1375c:	82 81       	ldd	r24, Z+2	; 0x02
   1375e:	93 81       	ldd	r25, Z+3	; 0x03
   13760:	20 e8       	ldi	r18, 0x80	; 128
   13762:	31 e5       	ldi	r19, 0x51	; 81
   13764:	41 e0       	ldi	r20, 0x01	; 1
   13766:	50 e0       	ldi	r21, 0x00	; 0
   13768:	0e 94 2d b4 	call	0x1685a	; 0x1685a <__udivmodsi4>
   1376c:	69 01       	movw	r12, r18
   1376e:	7a 01       	movw	r14, r20
   13770:	2c e3       	ldi	r18, 0x3C	; 60
   13772:	30 e0       	ldi	r19, 0x00	; 0
   13774:	40 e0       	ldi	r20, 0x00	; 0
   13776:	50 e0       	ldi	r21, 0x00	; 0
   13778:	0e 94 4f b4 	call	0x1689e	; 0x1689e <__divmodsi4>
   1377c:	29 83       	std	Y+1, r18	; 0x01
   1377e:	3a 83       	std	Y+2, r19	; 0x02
   13780:	4b 83       	std	Y+3, r20	; 0x03
   13782:	5c 83       	std	Y+4, r21	; 0x04
   13784:	89 81       	ldd	r24, Y+1	; 0x01
   13786:	9a 81       	ldd	r25, Y+2	; 0x02
   13788:	ab 81       	ldd	r26, Y+3	; 0x03
   1378a:	bc 81       	ldd	r27, Y+4	; 0x04
   1378c:	f8 01       	movw	r30, r16
   1378e:	60 83       	st	Z, r22
   13790:	6c e3       	ldi	r22, 0x3C	; 60
   13792:	70 e0       	ldi	r23, 0x00	; 0
   13794:	0e 94 19 b4 	call	0x16832	; 0x16832 <__divmodhi4>
   13798:	dc 01       	movw	r26, r24
   1379a:	f8 01       	movw	r30, r16
   1379c:	a1 83       	std	Z+1, r26	; 0x01
   1379e:	62 83       	std	Z+2, r22	; 0x02
   137a0:	c6 01       	movw	r24, r12
   137a2:	06 96       	adiw	r24, 0x06	; 6
   137a4:	67 e0       	ldi	r22, 0x07	; 7
   137a6:	70 e0       	ldi	r23, 0x00	; 0
   137a8:	0e 94 05 b4 	call	0x1680a	; 0x1680a <__udivmodhi4>
   137ac:	84 83       	std	Z+4, r24	; 0x04
   137ae:	2d ea       	ldi	r18, 0xAD	; 173
   137b0:	3e e8       	ldi	r19, 0x8E	; 142
   137b2:	40 e0       	ldi	r20, 0x00	; 0
   137b4:	50 e0       	ldi	r21, 0x00	; 0
   137b6:	c7 01       	movw	r24, r14
   137b8:	b6 01       	movw	r22, r12
   137ba:	0e 94 4f b4 	call	0x1689e	; 0x1689e <__divmodsi4>
   137be:	29 83       	std	Y+1, r18	; 0x01
   137c0:	3a 83       	std	Y+2, r19	; 0x02
   137c2:	6d 83       	std	Y+5, r22	; 0x05
   137c4:	7e 83       	std	Y+6, r23	; 0x06
   137c6:	8f 83       	std	Y+7, r24	; 0x07
   137c8:	98 87       	std	Y+8, r25	; 0x08
   137ca:	89 81       	ldd	r24, Y+1	; 0x01
   137cc:	9a 81       	ldd	r25, Y+2	; 0x02
   137ce:	24 e6       	ldi	r18, 0x64	; 100
   137d0:	28 9f       	mul	r18, r24
   137d2:	60 01       	movw	r12, r0
   137d4:	29 9f       	mul	r18, r25
   137d6:	d0 0c       	add	r13, r0
   137d8:	11 24       	eor	r1, r1
   137da:	6d 81       	ldd	r22, Y+5	; 0x05
   137dc:	7e 81       	ldd	r23, Y+6	; 0x06
   137de:	8f 81       	ldd	r24, Y+7	; 0x07
   137e0:	98 85       	ldd	r25, Y+8	; 0x08
   137e2:	25 eb       	ldi	r18, 0xB5	; 181
   137e4:	35 e0       	ldi	r19, 0x05	; 5
   137e6:	40 e0       	ldi	r20, 0x00	; 0
   137e8:	50 e0       	ldi	r21, 0x00	; 0
   137ea:	0e 94 4f b4 	call	0x1689e	; 0x1689e <__divmodsi4>
   137ee:	29 83       	std	Y+1, r18	; 0x01
   137f0:	3a 83       	std	Y+2, r19	; 0x02
   137f2:	6d 83       	std	Y+5, r22	; 0x05
   137f4:	7e 83       	std	Y+6, r23	; 0x06
   137f6:	e9 80       	ldd	r14, Y+1	; 0x01
   137f8:	fa 80       	ldd	r15, Y+2	; 0x02
   137fa:	ee 0c       	add	r14, r14
   137fc:	ff 1c       	adc	r15, r15
   137fe:	ee 0c       	add	r14, r14
   13800:	ff 1c       	adc	r15, r15
   13802:	ec 0c       	add	r14, r12
   13804:	fd 1c       	adc	r15, r13
   13806:	8d 81       	ldd	r24, Y+5	; 0x05
   13808:	9e 81       	ldd	r25, Y+6	; 0x06
   1380a:	f5 e6       	ldi	r31, 0x65	; 101
   1380c:	ef 16       	cp	r14, r31
   1380e:	f1 04       	cpc	r15, r1
   13810:	08 f4       	brcc	.+2      	; 0x13814 <gmtime_r+0xdc>
   13812:	3f c0       	rjmp	.+126    	; 0x13892 <gmtime_r+0x15a>
   13814:	01 96       	adiw	r24, 0x01	; 1
   13816:	21 e0       	ldi	r18, 0x01	; 1
   13818:	30 e0       	ldi	r19, 0x00	; 0
   1381a:	a9 01       	movw	r20, r18
   1381c:	44 59       	subi	r20, 0x94	; 148
   1381e:	5e 4f       	sbci	r21, 0xFE	; 254
   13820:	48 17       	cp	r20, r24
   13822:	59 07       	cpc	r21, r25
   13824:	60 f4       	brcc	.+24     	; 0x1383e <gmtime_r+0x106>
   13826:	6d e6       	ldi	r22, 0x6D	; 109
   13828:	71 e0       	ldi	r23, 0x01	; 1
   1382a:	82 1b       	sub	r24, r18
   1382c:	93 0b       	sbc	r25, r19
   1382e:	0e 94 19 b4 	call	0x16832	; 0x16832 <__divmodhi4>
   13832:	dc 01       	movw	r26, r24
   13834:	e6 0e       	add	r14, r22
   13836:	f7 1e       	adc	r15, r23
   13838:	cd 01       	movw	r24, r26
   1383a:	30 e0       	ldi	r19, 0x00	; 0
   1383c:	20 e0       	ldi	r18, 0x00	; 0
   1383e:	44 e6       	ldi	r20, 0x64	; 100
   13840:	e4 0e       	add	r14, r20
   13842:	f1 1c       	adc	r15, r1
   13844:	f8 01       	movw	r30, r16
   13846:	f7 82       	std	Z+7, r15	; 0x07
   13848:	e6 82       	std	Z+6, r14	; 0x06
   1384a:	91 87       	std	Z+9, r25	; 0x09
   1384c:	80 87       	std	Z+8, r24	; 0x08
   1384e:	25 5c       	subi	r18, 0xC5	; 197
   13850:	3f 4f       	sbci	r19, 0xFF	; 255
   13852:	82 17       	cp	r24, r18
   13854:	93 07       	cpc	r25, r19
   13856:	38 f5       	brcc	.+78     	; 0x138a6 <gmtime_r+0x16e>
   13858:	6f e1       	ldi	r22, 0x1F	; 31
   1385a:	70 e0       	ldi	r23, 0x00	; 0
   1385c:	0e 94 19 b4 	call	0x16832	; 0x16832 <__divmodhi4>
   13860:	dc 01       	movw	r26, r24
   13862:	f8 01       	movw	r30, r16
   13864:	65 83       	std	Z+5, r22	; 0x05
   13866:	a3 83       	std	Z+3, r26	; 0x03
   13868:	f8 01       	movw	r30, r16
   1386a:	13 86       	std	Z+11, r1	; 0x0b
   1386c:	12 86       	std	Z+10, r1	; 0x0a
   1386e:	83 81       	ldd	r24, Z+3	; 0x03
   13870:	8f 5f       	subi	r24, 0xFF	; 255
   13872:	83 83       	std	Z+3, r24	; 0x03
   13874:	28 96       	adiw	r28, 0x08	; 8
   13876:	0f b6       	in	r0, 0x3f	; 63
   13878:	f8 94       	cli
   1387a:	de bf       	out	0x3e, r29	; 62
   1387c:	0f be       	out	0x3f, r0	; 63
   1387e:	cd bf       	out	0x3d, r28	; 61
   13880:	df 91       	pop	r29
   13882:	cf 91       	pop	r28
   13884:	1f 91       	pop	r17
   13886:	0f 91       	pop	r16
   13888:	ff 90       	pop	r15
   1388a:	ef 90       	pop	r14
   1388c:	df 90       	pop	r13
   1388e:	cf 90       	pop	r12
   13890:	08 95       	ret
   13892:	51 e0       	ldi	r21, 0x01	; 1
   13894:	40 e0       	ldi	r20, 0x00	; 0
   13896:	24 e6       	ldi	r18, 0x64	; 100
   13898:	e2 16       	cp	r14, r18
   1389a:	f1 04       	cpc	r15, r1
   1389c:	09 f4       	brne	.+2      	; 0x138a0 <gmtime_r+0x168>
   1389e:	50 e0       	ldi	r21, 0x00	; 0
   138a0:	25 2f       	mov	r18, r21
   138a2:	34 2f       	mov	r19, r20
   138a4:	ba cf       	rjmp	.-140    	; 0x1381a <gmtime_r+0xe2>
   138a6:	69 e9       	ldi	r22, 0x99	; 153
   138a8:	70 e0       	ldi	r23, 0x00	; 0
   138aa:	82 1b       	sub	r24, r18
   138ac:	93 0b       	sbc	r25, r19
   138ae:	0e 94 19 b4 	call	0x16832	; 0x16832 <__divmodhi4>
   138b2:	dc 01       	movw	r26, r24
   138b4:	26 2f       	mov	r18, r22
   138b6:	22 0f       	add	r18, r18
   138b8:	22 0f       	add	r18, r18
   138ba:	f2 2e       	mov	r15, r18
   138bc:	f6 0e       	add	r15, r22
   138be:	6d e3       	ldi	r22, 0x3D	; 61
   138c0:	70 e0       	ldi	r23, 0x00	; 0
   138c2:	cd 01       	movw	r24, r26
   138c4:	0e 94 19 b4 	call	0x16832	; 0x16832 <__divmodhi4>
   138c8:	dc 01       	movw	r26, r24
   138ca:	e6 2e       	mov	r14, r22
   138cc:	ee 0c       	add	r14, r14
   138ce:	6f e1       	ldi	r22, 0x1F	; 31
   138d0:	70 e0       	ldi	r23, 0x00	; 0
   138d2:	cd 01       	movw	r24, r26
   138d4:	0e 94 19 b4 	call	0x16832	; 0x16832 <__divmodhi4>
   138d8:	dc 01       	movw	r26, r24
   138da:	22 e0       	ldi	r18, 0x02	; 2
   138dc:	26 0f       	add	r18, r22
   138de:	2f 0d       	add	r18, r15
   138e0:	2e 0d       	add	r18, r14
   138e2:	f8 01       	movw	r30, r16
   138e4:	25 83       	std	Z+5, r18	; 0x05
   138e6:	bf cf       	rjmp	.-130    	; 0x13866 <gmtime_r+0x12e>

000138e8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
   138e8:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
   138ea:	80 81       	ld	r24, Z
   138ec:	91 81       	ldd	r25, Z+1	; 0x01
   138ee:	87 30       	cpi	r24, 0x07	; 7
   138f0:	91 05       	cpc	r25, r1
   138f2:	38 f4       	brcc	.+14     	; 0x13902 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
   138f4:	85 30       	cpi	r24, 0x05	; 5
   138f6:	91 05       	cpc	r25, r1
   138f8:	88 f4       	brcc	.+34     	; 0x1391c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
   138fa:	03 97       	sbiw	r24, 0x03	; 3
   138fc:	a0 f4       	brcc	.+40     	; 0x13926 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   138fe:	80 e0       	ldi	r24, 0x00	; 0
   13900:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   13902:	87 30       	cpi	r24, 0x07	; 7
   13904:	91 05       	cpc	r25, r1
   13906:	61 f0       	breq	.+24     	; 0x13920 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
   13908:	0a 97       	sbiw	r24, 0x0a	; 10
   1390a:	c9 f7       	brne	.-14     	; 0x138fe <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   1390c:	62 81       	ldd	r22, Z+2	; 0x02
   1390e:	73 81       	ldd	r23, Z+3	; 0x03
   13910:	84 81       	ldd	r24, Z+4	; 0x04
   13912:	95 81       	ldd	r25, Z+5	; 0x05
   13914:	0e 94 6e b5 	call	0x16adc	; 0x16adc <__fixunssfsi>
   13918:	86 2f       	mov	r24, r22
   1391a:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   1391c:	82 81       	ldd	r24, Z+2	; 0x02
   1391e:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   13920:	82 81       	ldd	r24, Z+2	; 0x02
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   13922:	81 95       	neg	r24
   13924:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   13926:	02 80       	ldd	r0, Z+2	; 0x02
   13928:	f3 81       	ldd	r31, Z+3	; 0x03
   1392a:	e0 2d       	mov	r30, r0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   1392c:	30 97       	sbiw	r30, 0x00	; 0
   1392e:	39 f3       	breq	.-50     	; 0x138fe <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   13930:	80 81       	ld	r24, Z
   13932:	84 37       	cpi	r24, 0x74	; 116
   13934:	c9 f0       	breq	.+50     	; 0x13968 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   13936:	8b 32       	cpi	r24, 0x2B	; 43
   13938:	89 f0       	breq	.+34     	; 0x1395c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
   1393a:	8d 32       	cpi	r24, 0x2D	; 45
   1393c:	81 f4       	brne	.+32     	; 0x1395e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   1393e:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   13940:	91 e0       	ldi	r25, 0x01	; 1
parseInteger():
   13942:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   13944:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   13946:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   13948:	30 ed       	ldi	r19, 0xD0	; 208
   1394a:	36 0f       	add	r19, r22
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   1394c:	3a 30       	cpi	r19, 0x0A	; 10
   1394e:	48 f4       	brcc	.+18     	; 0x13962 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
   13950:	82 9f       	mul	r24, r18
   13952:	60 0d       	add	r22, r0
   13954:	11 24       	eor	r1, r1
   13956:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   13958:	80 53       	subi	r24, 0x30	; 48
   1395a:	f5 cf       	rjmp	.-22     	; 0x13946 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   1395c:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   1395e:	90 e0       	ldi	r25, 0x00	; 0
   13960:	f0 cf       	rjmp	.-32     	; 0x13942 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   13962:	91 11       	cpse	r25, r1
   13964:	de cf       	rjmp	.-68     	; 0x13922 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
   13966:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   13968:	81 e0       	ldi	r24, 0x01	; 1
   1396a:	fd cf       	rjmp	.-6      	; 0x13966 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

0001396c <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7058>:
_GLOBAL__I_65535_0_room_control_v3.ino.cpp.o.7058():
   1396c:	0f 93       	push	r16
   1396e:	1f 93       	push	r17
   13970:	cf 93       	push	r28
   13972:	df 93       	push	r29
   13974:	10 92 6e 0b 	sts	0x0B6E, r1	; 0x800b6e <Serial+0x3>
   13978:	10 92 6d 0b 	sts	0x0B6D, r1	; 0x800b6d <Serial+0x2>
   1397c:	88 ee       	ldi	r24, 0xE8	; 232
   1397e:	93 e0       	ldi	r25, 0x03	; 3
   13980:	a0 e0       	ldi	r26, 0x00	; 0
   13982:	b0 e0       	ldi	r27, 0x00	; 0
   13984:	80 93 6f 0b 	sts	0x0B6F, r24	; 0x800b6f <Serial+0x4>
   13988:	90 93 70 0b 	sts	0x0B70, r25	; 0x800b70 <Serial+0x5>
   1398c:	a0 93 71 0b 	sts	0x0B71, r26	; 0x800b71 <Serial+0x6>
   13990:	b0 93 72 0b 	sts	0x0B72, r27	; 0x800b72 <Serial+0x7>
   13994:	2a e5       	ldi	r18, 0x5A	; 90
   13996:	32 e0       	ldi	r19, 0x02	; 2
   13998:	30 93 6c 0b 	sts	0x0B6C, r19	; 0x800b6c <Serial+0x1>
   1399c:	20 93 6b 0b 	sts	0x0B6B, r18	; 0x800b6b <Serial>
   139a0:	25 ec       	ldi	r18, 0xC5	; 197
   139a2:	30 e0       	ldi	r19, 0x00	; 0
   139a4:	30 93 78 0b 	sts	0x0B78, r19	; 0x800b78 <Serial+0xd>
   139a8:	20 93 77 0b 	sts	0x0B77, r18	; 0x800b77 <Serial+0xc>
   139ac:	24 ec       	ldi	r18, 0xC4	; 196
   139ae:	30 e0       	ldi	r19, 0x00	; 0
   139b0:	30 93 7a 0b 	sts	0x0B7A, r19	; 0x800b7a <Serial+0xf>
   139b4:	20 93 79 0b 	sts	0x0B79, r18	; 0x800b79 <Serial+0xe>
   139b8:	20 ec       	ldi	r18, 0xC0	; 192
   139ba:	30 e0       	ldi	r19, 0x00	; 0
   139bc:	30 93 7c 0b 	sts	0x0B7C, r19	; 0x800b7c <Serial+0x11>
   139c0:	20 93 7b 0b 	sts	0x0B7B, r18	; 0x800b7b <Serial+0x10>
   139c4:	21 ec       	ldi	r18, 0xC1	; 193
   139c6:	30 e0       	ldi	r19, 0x00	; 0
   139c8:	30 93 7e 0b 	sts	0x0B7E, r19	; 0x800b7e <Serial+0x13>
   139cc:	20 93 7d 0b 	sts	0x0B7D, r18	; 0x800b7d <Serial+0x12>
   139d0:	22 ec       	ldi	r18, 0xC2	; 194
   139d2:	30 e0       	ldi	r19, 0x00	; 0
   139d4:	30 93 80 0b 	sts	0x0B80, r19	; 0x800b80 <Serial+0x15>
   139d8:	20 93 7f 0b 	sts	0x0B7F, r18	; 0x800b7f <Serial+0x14>
   139dc:	26 ec       	ldi	r18, 0xC6	; 198
   139de:	30 e0       	ldi	r19, 0x00	; 0
   139e0:	30 93 82 0b 	sts	0x0B82, r19	; 0x800b82 <Serial+0x17>
   139e4:	20 93 81 0b 	sts	0x0B81, r18	; 0x800b81 <Serial+0x16>
   139e8:	10 92 84 0b 	sts	0x0B84, r1	; 0x800b84 <Serial+0x19>
   139ec:	10 92 85 0b 	sts	0x0B85, r1	; 0x800b85 <Serial+0x1a>
   139f0:	10 92 86 0b 	sts	0x0B86, r1	; 0x800b86 <Serial+0x1b>
   139f4:	10 92 87 0b 	sts	0x0B87, r1	; 0x800b87 <Serial+0x1c>
   139f8:	c2 ee       	ldi	r28, 0xE2	; 226
   139fa:	d2 e0       	ldi	r29, 0x02	; 2
   139fc:	d0 93 2f 11 	sts	0x112F, r29	; 0x80112f <_ZL11INADDR_NONE.lto_priv.203+0x1>
   13a00:	c0 93 2e 11 	sts	0x112E, r28	; 0x80112e <_ZL11INADDR_NONE.lto_priv.203>
   13a04:	10 92 30 11 	sts	0x1130, r1	; 0x801130 <_ZL11INADDR_NONE.lto_priv.203+0x2>
   13a08:	10 92 31 11 	sts	0x1131, r1	; 0x801131 <_ZL11INADDR_NONE.lto_priv.203+0x3>
   13a0c:	10 92 32 11 	sts	0x1132, r1	; 0x801132 <_ZL11INADDR_NONE.lto_priv.203+0x4>
   13a10:	10 92 33 11 	sts	0x1133, r1	; 0x801133 <_ZL11INADDR_NONE.lto_priv.203+0x5>
   13a14:	10 92 fa 0d 	sts	0x0DFA, r1	; 0x800dfa <Wire+0x3>
   13a18:	10 92 f9 0d 	sts	0x0DF9, r1	; 0x800df9 <Wire+0x2>
   13a1c:	80 93 fb 0d 	sts	0x0DFB, r24	; 0x800dfb <Wire+0x4>
   13a20:	90 93 fc 0d 	sts	0x0DFC, r25	; 0x800dfc <Wire+0x5>
   13a24:	a0 93 fd 0d 	sts	0x0DFD, r26	; 0x800dfd <Wire+0x6>
   13a28:	b0 93 fe 0d 	sts	0x0DFE, r27	; 0x800dfe <Wire+0x7>
   13a2c:	8c e6       	ldi	r24, 0x6C	; 108
   13a2e:	92 e0       	ldi	r25, 0x02	; 2
   13a30:	90 93 f8 0d 	sts	0x0DF8, r25	; 0x800df8 <Wire+0x1>
   13a34:	80 93 f7 0d 	sts	0x0DF7, r24	; 0x800df7 <Wire>
   13a38:	d0 93 35 11 	sts	0x1135, r29	; 0x801135 <_ZL11INADDR_NONE.lto_priv.202+0x1>
   13a3c:	c0 93 34 11 	sts	0x1134, r28	; 0x801134 <_ZL11INADDR_NONE.lto_priv.202>
   13a40:	10 92 36 11 	sts	0x1136, r1	; 0x801136 <_ZL11INADDR_NONE.lto_priv.202+0x2>
   13a44:	10 92 37 11 	sts	0x1137, r1	; 0x801137 <_ZL11INADDR_NONE.lto_priv.202+0x3>
   13a48:	10 92 38 11 	sts	0x1138, r1	; 0x801138 <_ZL11INADDR_NONE.lto_priv.202+0x4>
   13a4c:	10 92 39 11 	sts	0x1139, r1	; 0x801139 <_ZL11INADDR_NONE.lto_priv.202+0x5>
   13a50:	80 e5       	ldi	r24, 0x50	; 80
   13a52:	80 93 3a 11 	sts	0x113A, r24	; 0x80113a <wiznet_SPI_settings>
   13a56:	81 e0       	ldi	r24, 0x01	; 1
   13a58:	80 93 3b 11 	sts	0x113B, r24	; 0x80113b <wiznet_SPI_settings+0x1>
   13a5c:	d0 93 3d 11 	sts	0x113D, r29	; 0x80113d <_ZL11INADDR_NONE.lto_priv.201+0x1>
   13a60:	c0 93 3c 11 	sts	0x113C, r28	; 0x80113c <_ZL11INADDR_NONE.lto_priv.201>
   13a64:	10 92 3e 11 	sts	0x113E, r1	; 0x80113e <_ZL11INADDR_NONE.lto_priv.201+0x2>
   13a68:	10 92 3f 11 	sts	0x113F, r1	; 0x80113f <_ZL11INADDR_NONE.lto_priv.201+0x3>
   13a6c:	10 92 40 11 	sts	0x1140, r1	; 0x801140 <_ZL11INADDR_NONE.lto_priv.201+0x4>
   13a70:	10 92 41 11 	sts	0x1141, r1	; 0x801141 <_ZL11INADDR_NONE.lto_priv.201+0x5>
   13a74:	d0 93 43 11 	sts	0x1143, r29	; 0x801143 <_ZL11INADDR_NONE.lto_priv.200+0x1>
   13a78:	c0 93 42 11 	sts	0x1142, r28	; 0x801142 <_ZL11INADDR_NONE.lto_priv.200>
   13a7c:	10 92 44 11 	sts	0x1144, r1	; 0x801144 <_ZL11INADDR_NONE.lto_priv.200+0x2>
   13a80:	10 92 45 11 	sts	0x1145, r1	; 0x801145 <_ZL11INADDR_NONE.lto_priv.200+0x3>
   13a84:	10 92 46 11 	sts	0x1146, r1	; 0x801146 <_ZL11INADDR_NONE.lto_priv.200+0x4>
   13a88:	10 92 47 11 	sts	0x1147, r1	; 0x801147 <_ZL11INADDR_NONE.lto_priv.200+0x5>
   13a8c:	d0 93 49 11 	sts	0x1149, r29	; 0x801149 <_ZL11INADDR_NONE.lto_priv.199+0x1>
   13a90:	c0 93 48 11 	sts	0x1148, r28	; 0x801148 <_ZL11INADDR_NONE.lto_priv.199>
   13a94:	10 92 4a 11 	sts	0x114A, r1	; 0x80114a <_ZL11INADDR_NONE.lto_priv.199+0x2>
   13a98:	10 92 4b 11 	sts	0x114B, r1	; 0x80114b <_ZL11INADDR_NONE.lto_priv.199+0x3>
   13a9c:	10 92 4c 11 	sts	0x114C, r1	; 0x80114c <_ZL11INADDR_NONE.lto_priv.199+0x4>
   13aa0:	10 92 4d 11 	sts	0x114D, r1	; 0x80114d <_ZL11INADDR_NONE.lto_priv.199+0x5>
   13aa4:	d0 93 4f 11 	sts	0x114F, r29	; 0x80114f <_ZL11INADDR_NONE.lto_priv.198+0x1>
   13aa8:	c0 93 4e 11 	sts	0x114E, r28	; 0x80114e <_ZL11INADDR_NONE.lto_priv.198>
   13aac:	10 92 50 11 	sts	0x1150, r1	; 0x801150 <_ZL11INADDR_NONE.lto_priv.198+0x2>
   13ab0:	10 92 51 11 	sts	0x1151, r1	; 0x801151 <_ZL11INADDR_NONE.lto_priv.198+0x3>
   13ab4:	10 92 52 11 	sts	0x1152, r1	; 0x801152 <_ZL11INADDR_NONE.lto_priv.198+0x4>
   13ab8:	10 92 53 11 	sts	0x1153, r1	; 0x801153 <_ZL11INADDR_NONE.lto_priv.198+0x5>
   13abc:	d0 93 55 11 	sts	0x1155, r29	; 0x801155 <_ZL11INADDR_NONE.lto_priv.197+0x1>
   13ac0:	c0 93 54 11 	sts	0x1154, r28	; 0x801154 <_ZL11INADDR_NONE.lto_priv.197>
   13ac4:	10 92 56 11 	sts	0x1156, r1	; 0x801156 <_ZL11INADDR_NONE.lto_priv.197+0x2>
   13ac8:	10 92 57 11 	sts	0x1157, r1	; 0x801157 <_ZL11INADDR_NONE.lto_priv.197+0x3>
   13acc:	10 92 58 11 	sts	0x1158, r1	; 0x801158 <_ZL11INADDR_NONE.lto_priv.197+0x4>
   13ad0:	10 92 59 11 	sts	0x1159, r1	; 0x801159 <_ZL11INADDR_NONE.lto_priv.197+0x5>
   13ad4:	d0 93 09 0c 	sts	0x0C09, r29	; 0x800c09 <Ethernet+0x1>
   13ad8:	c0 93 08 0c 	sts	0x0C08, r28	; 0x800c08 <Ethernet>
   13adc:	10 92 0a 0c 	sts	0x0C0A, r1	; 0x800c0a <Ethernet+0x2>
   13ae0:	10 92 0b 0c 	sts	0x0C0B, r1	; 0x800c0b <Ethernet+0x3>
   13ae4:	10 92 0c 0c 	sts	0x0C0C, r1	; 0x800c0c <Ethernet+0x4>
   13ae8:	10 92 0d 0c 	sts	0x0C0D, r1	; 0x800c0d <Ethernet+0x5>
   13aec:	10 92 13 0c 	sts	0x0C13, r1	; 0x800c13 <Ethernet+0xb>
   13af0:	10 92 12 0c 	sts	0x0C12, r1	; 0x800c12 <Ethernet+0xa>
   13af4:	8a e0       	ldi	r24, 0x0A	; 10
   13af6:	80 93 14 0c 	sts	0x0C14, r24	; 0x800c14 <Ethernet+0xc>
   13afa:	d0 93 16 0c 	sts	0x0C16, r29	; 0x800c16 <_ZL11INADDR_NONE.lto_priv.196+0x1>
   13afe:	c0 93 15 0c 	sts	0x0C15, r28	; 0x800c15 <_ZL11INADDR_NONE.lto_priv.196>
   13b02:	10 92 17 0c 	sts	0x0C17, r1	; 0x800c17 <_ZL11INADDR_NONE.lto_priv.196+0x2>
   13b06:	10 92 18 0c 	sts	0x0C18, r1	; 0x800c18 <_ZL11INADDR_NONE.lto_priv.196+0x3>
   13b0a:	10 92 19 0c 	sts	0x0C19, r1	; 0x800c19 <_ZL11INADDR_NONE.lto_priv.196+0x4>
   13b0e:	10 92 1a 0c 	sts	0x0C1A, r1	; 0x800c1a <_ZL11INADDR_NONE.lto_priv.196+0x5>
   13b12:	d0 93 5b 11 	sts	0x115B, r29	; 0x80115b <_ZL11INADDR_NONE.lto_priv.195+0x1>
   13b16:	c0 93 5a 11 	sts	0x115A, r28	; 0x80115a <_ZL11INADDR_NONE.lto_priv.195>
   13b1a:	10 92 5c 11 	sts	0x115C, r1	; 0x80115c <_ZL11INADDR_NONE.lto_priv.195+0x2>
   13b1e:	10 92 5d 11 	sts	0x115D, r1	; 0x80115d <_ZL11INADDR_NONE.lto_priv.195+0x3>
   13b22:	10 92 5e 11 	sts	0x115E, r1	; 0x80115e <_ZL11INADDR_NONE.lto_priv.195+0x4>
   13b26:	10 92 5f 11 	sts	0x115F, r1	; 0x80115f <_ZL11INADDR_NONE.lto_priv.195+0x5>
   13b2a:	8a e0       	ldi	r24, 0x0A	; 10
   13b2c:	90 e0       	ldi	r25, 0x00	; 0
   13b2e:	0e 94 8a ae 	call	0x15d14	; 0x15d14 <malloc>
   13b32:	90 93 1c 0c 	sts	0x0C1C, r25	; 0x800c1c <array_pids+0x1>
   13b36:	80 93 1b 0c 	sts	0x0C1B, r24	; 0x800c1b <array_pids>
   13b3a:	d0 93 61 11 	sts	0x1161, r29	; 0x801161 <_ZL11INADDR_NONE.lto_priv.194+0x1>
   13b3e:	c0 93 60 11 	sts	0x1160, r28	; 0x801160 <_ZL11INADDR_NONE.lto_priv.194>
   13b42:	10 92 62 11 	sts	0x1162, r1	; 0x801162 <_ZL11INADDR_NONE.lto_priv.194+0x2>
   13b46:	10 92 63 11 	sts	0x1163, r1	; 0x801163 <_ZL11INADDR_NONE.lto_priv.194+0x3>
   13b4a:	10 92 64 11 	sts	0x1164, r1	; 0x801164 <_ZL11INADDR_NONE.lto_priv.194+0x4>
   13b4e:	10 92 65 11 	sts	0x1165, r1	; 0x801165 <_ZL11INADDR_NONE.lto_priv.194+0x5>
   13b52:	d0 93 67 11 	sts	0x1167, r29	; 0x801167 <_ZL11INADDR_NONE.lto_priv.193+0x1>
   13b56:	c0 93 66 11 	sts	0x1166, r28	; 0x801166 <_ZL11INADDR_NONE.lto_priv.193>
   13b5a:	10 92 68 11 	sts	0x1168, r1	; 0x801168 <_ZL11INADDR_NONE.lto_priv.193+0x2>
   13b5e:	10 92 69 11 	sts	0x1169, r1	; 0x801169 <_ZL11INADDR_NONE.lto_priv.193+0x3>
   13b62:	10 92 6a 11 	sts	0x116A, r1	; 0x80116a <_ZL11INADDR_NONE.lto_priv.193+0x4>
   13b66:	10 92 6b 11 	sts	0x116B, r1	; 0x80116b <_ZL11INADDR_NONE.lto_priv.193+0x5>
   13b6a:	8b e5       	ldi	r24, 0x5B	; 91
   13b6c:	97 e0       	ldi	r25, 0x07	; 7
   13b6e:	90 93 42 0c 	sts	0x0C42, r25	; 0x800c42 <device+0x25>
   13b72:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <device+0x24>
   13b76:	d0 93 1c 13 	sts	0x131C, r29	; 0x80131c <_ZL11INADDR_NONE.lto_priv.192+0x1>
   13b7a:	c0 93 1b 13 	sts	0x131B, r28	; 0x80131b <_ZL11INADDR_NONE.lto_priv.192>
   13b7e:	10 92 1d 13 	sts	0x131D, r1	; 0x80131d <_ZL11INADDR_NONE.lto_priv.192+0x2>
   13b82:	10 92 1e 13 	sts	0x131E, r1	; 0x80131e <_ZL11INADDR_NONE.lto_priv.192+0x3>
   13b86:	10 92 1f 13 	sts	0x131F, r1	; 0x80131f <_ZL11INADDR_NONE.lto_priv.192+0x4>
   13b8a:	10 92 20 13 	sts	0x1320, r1	; 0x801320 <_ZL11INADDR_NONE.lto_priv.192+0x5>
   13b8e:	88 e1       	ldi	r24, 0x18	; 24
   13b90:	80 93 53 10 	sts	0x1053, r24	; 0x801053 <swSPI+0x4>
   13b94:	8a e1       	ldi	r24, 0x1A	; 26
   13b96:	80 93 52 10 	sts	0x1052, r24	; 0x801052 <swSPI+0x3>
   13b9a:	89 e1       	ldi	r24, 0x19	; 25
   13b9c:	80 93 54 10 	sts	0x1054, r24	; 0x801054 <swSPI+0x5>
   13ba0:	82 e0       	ldi	r24, 0x02	; 2
   13ba2:	80 93 51 10 	sts	0x1051, r24	; 0x801051 <swSPI+0x2>
   13ba6:	10 92 4f 10 	sts	0x104F, r1	; 0x80104f <swSPI>
   13baa:	10 92 50 10 	sts	0x1050, r1	; 0x801050 <swSPI+0x1>
   13bae:	10 92 55 10 	sts	0x1055, r1	; 0x801055 <swSPI+0x6>
   13bb2:	60 e0       	ldi	r22, 0x00	; 0
   13bb4:	89 e1       	ldi	r24, 0x19	; 25
   13bb6:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
   13bba:	80 e1       	ldi	r24, 0x10	; 16
   13bbc:	80 93 4d 10 	sts	0x104D, r24	; 0x80104d <now+0x5>
   13bc0:	8c e1       	ldi	r24, 0x1C	; 28
   13bc2:	80 93 4c 10 	sts	0x104C, r24	; 0x80104c <now+0x4>
   13bc6:	86 e0       	ldi	r24, 0x06	; 6
   13bc8:	80 93 4b 10 	sts	0x104B, r24	; 0x80104b <now+0x3>
   13bcc:	40 e0       	ldi	r20, 0x00	; 0
   13bce:	81 e6       	ldi	r24, 0x61	; 97
   13bd0:	97 e9       	ldi	r25, 0x97	; 151
   13bd2:	e3 e9       	ldi	r30, 0x93	; 147
   13bd4:	fe ef       	ldi	r31, 0xFE	; 254
   13bd6:	54 2f       	mov	r21, r20
   13bd8:	53 70       	andi	r21, 0x03	; 3
   13bda:	21 e0       	ldi	r18, 0x01	; 1
   13bdc:	09 f0       	breq	.+2      	; 0x13be0 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7058+0x274>
   13bde:	20 e0       	ldi	r18, 0x00	; 0
   13be0:	61 e0       	ldi	r22, 0x01	; 1
   13be2:	64 0f       	add	r22, r20
   13be4:	30 e0       	ldi	r19, 0x00	; 0
   13be6:	d9 01       	movw	r26, r18
   13be8:	a3 59       	subi	r26, 0x93	; 147
   13bea:	be 4f       	sbci	r27, 0xFE	; 254
   13bec:	8a 17       	cp	r24, r26
   13bee:	9b 07       	cpc	r25, r27
   13bf0:	38 f0       	brcs	.+14     	; 0x13c00 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7058+0x294>
   13bf2:	af 01       	movw	r20, r30
   13bf4:	42 1b       	sub	r20, r18
   13bf6:	53 0b       	sbc	r21, r19
   13bf8:	84 0f       	add	r24, r20
   13bfa:	95 1f       	adc	r25, r21
   13bfc:	46 2f       	mov	r20, r22
   13bfe:	eb cf       	rjmp	.-42     	; 0x13bd6 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7058+0x26a>
   13c00:	40 93 48 10 	sts	0x1048, r20	; 0x801048 <now>
   13c04:	21 e0       	ldi	r18, 0x01	; 1
   13c06:	62 2f       	mov	r22, r18
   13c08:	61 50       	subi	r22, 0x01	; 1
   13c0a:	77 0b       	sbc	r23, r23
   13c0c:	fb 01       	movw	r30, r22
   13c0e:	e6 54       	subi	r30, 0x46	; 70
   13c10:	f4 4c       	sbci	r31, 0xC4	; 196
   13c12:	e4 91       	lpm	r30, Z
   13c14:	51 11       	cpse	r21, r1
   13c16:	03 c0       	rjmp	.+6      	; 0x13c1e <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7058+0x2b2>
   13c18:	22 30       	cpi	r18, 0x02	; 2
   13c1a:	09 f4       	brne	.+2      	; 0x13c1e <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7058+0x2b2>
   13c1c:	ef 5f       	subi	r30, 0xFF	; 255
   13c1e:	f0 e0       	ldi	r31, 0x00	; 0
   13c20:	31 e0       	ldi	r19, 0x01	; 1
   13c22:	32 0f       	add	r19, r18
   13c24:	8e 17       	cp	r24, r30
   13c26:	9f 07       	cpc	r25, r31
   13c28:	20 f0       	brcs	.+8      	; 0x13c32 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7058+0x2c6>
   13c2a:	8e 1b       	sub	r24, r30
   13c2c:	9f 0b       	sbc	r25, r31
   13c2e:	23 2f       	mov	r18, r19
   13c30:	ea cf       	rjmp	.-44     	; 0x13c06 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7058+0x29a>
   13c32:	20 93 49 10 	sts	0x1049, r18	; 0x801049 <now+0x1>
   13c36:	8f 5f       	subi	r24, 0xFF	; 255
   13c38:	80 93 4a 10 	sts	0x104A, r24	; 0x80104a <now+0x2>
   13c3c:	10 92 11 13 	sts	0x1311, r1	; 0x801311 <ethClient+0x3>
   13c40:	10 92 10 13 	sts	0x1310, r1	; 0x801310 <ethClient+0x2>
   13c44:	48 ee       	ldi	r20, 0xE8	; 232
   13c46:	53 e0       	ldi	r21, 0x03	; 3
   13c48:	60 e0       	ldi	r22, 0x00	; 0
   13c4a:	70 e0       	ldi	r23, 0x00	; 0
   13c4c:	40 93 12 13 	sts	0x1312, r20	; 0x801312 <ethClient+0x4>
   13c50:	50 93 13 13 	sts	0x1313, r21	; 0x801313 <ethClient+0x5>
   13c54:	60 93 14 13 	sts	0x1314, r22	; 0x801314 <ethClient+0x6>
   13c58:	70 93 15 13 	sts	0x1315, r23	; 0x801315 <ethClient+0x7>
   13c5c:	80 ec       	ldi	r24, 0xC0	; 192
   13c5e:	92 e0       	ldi	r25, 0x02	; 2
   13c60:	90 93 0f 13 	sts	0x130F, r25	; 0x80130f <ethClient+0x1>
   13c64:	80 93 0e 13 	sts	0x130E, r24	; 0x80130e <ethClient>
   13c68:	88 e0       	ldi	r24, 0x08	; 8
   13c6a:	80 93 1a 13 	sts	0x131A, r24	; 0x80131a <ethClient+0xc>
   13c6e:	10 92 30 10 	sts	0x1030, r1	; 0x801030 <udpClient+0x3>
   13c72:	10 92 2f 10 	sts	0x102F, r1	; 0x80102f <udpClient+0x2>
   13c76:	40 93 31 10 	sts	0x1031, r20	; 0x801031 <udpClient+0x4>
   13c7a:	50 93 32 10 	sts	0x1032, r21	; 0x801032 <udpClient+0x5>
   13c7e:	60 93 33 10 	sts	0x1033, r22	; 0x801033 <udpClient+0x6>
   13c82:	70 93 34 10 	sts	0x1034, r23	; 0x801034 <udpClient+0x7>
   13c86:	28 e9       	ldi	r18, 0x98	; 152
   13c88:	32 e0       	ldi	r19, 0x02	; 2
   13c8a:	30 93 2e 10 	sts	0x102E, r19	; 0x80102e <udpClient+0x1>
   13c8e:	20 93 2d 10 	sts	0x102D, r18	; 0x80102d <udpClient>
   13c92:	80 93 39 10 	sts	0x1039, r24	; 0x801039 <udpClient+0xc>
   13c96:	82 ee       	ldi	r24, 0xE2	; 226
   13c98:	92 e0       	ldi	r25, 0x02	; 2
   13c9a:	90 93 3d 10 	sts	0x103D, r25	; 0x80103d <udpClient+0x10>
   13c9e:	80 93 3c 10 	sts	0x103C, r24	; 0x80103c <udpClient+0xf>
   13ca2:	10 92 3e 10 	sts	0x103E, r1	; 0x80103e <udpClient+0x11>
   13ca6:	10 92 3f 10 	sts	0x103F, r1	; 0x80103f <udpClient+0x12>
   13caa:	10 92 40 10 	sts	0x1040, r1	; 0x801040 <udpClient+0x13>
   13cae:	10 92 41 10 	sts	0x1041, r1	; 0x801041 <udpClient+0x14>
   13cb2:	90 93 20 10 	sts	0x1020, r25	; 0x801020 <mqtt_client+0x210>
   13cb6:	80 93 1f 10 	sts	0x101F, r24	; 0x80101f <mqtt_client+0x20f>
   13cba:	10 92 21 10 	sts	0x1021, r1	; 0x801021 <mqtt_client+0x211>
   13cbe:	10 92 22 10 	sts	0x1022, r1	; 0x801022 <mqtt_client+0x212>
   13cc2:	10 92 23 10 	sts	0x1023, r1	; 0x801023 <mqtt_client+0x213>
   13cc6:	10 92 24 10 	sts	0x1024, r1	; 0x801024 <mqtt_client+0x214>
   13cca:	0f ef       	ldi	r16, 0xFF	; 255
   13ccc:	1f ef       	ldi	r17, 0xFF	; 255
   13cce:	10 93 2c 10 	sts	0x102C, r17	; 0x80102c <mqtt_client+0x21c>
   13cd2:	00 93 2b 10 	sts	0x102B, r16	; 0x80102b <mqtt_client+0x21b>
   13cd6:	8e e0       	ldi	r24, 0x0E	; 14
   13cd8:	93 e1       	ldi	r25, 0x13	; 19
   13cda:	90 93 11 0e 	sts	0x0E11, r25	; 0x800e11 <mqtt_client+0x1>
   13cde:	80 93 10 0e 	sts	0x0E10, r24	; 0x800e10 <mqtt_client>
   13ce2:	10 92 2a 10 	sts	0x102A, r1	; 0x80102a <mqtt_client+0x21a>
   13ce6:	10 92 29 10 	sts	0x1029, r1	; 0x801029 <mqtt_client+0x219>
   13cea:	86 ef       	ldi	r24, 0xF6	; 246
   13cec:	92 e1       	ldi	r25, 0x12	; 18
   13cee:	23 e0       	ldi	r18, 0x03	; 3
   13cf0:	30 e0       	ldi	r19, 0x00	; 0
   13cf2:	30 93 f7 12 	sts	0x12F7, r19	; 0x8012f7 <radio+0x1>
   13cf6:	20 93 f6 12 	sts	0x12F6, r18	; 0x8012f6 <radio>
   13cfa:	22 e0       	ldi	r18, 0x02	; 2
   13cfc:	30 e0       	ldi	r19, 0x00	; 0
   13cfe:	30 93 f9 12 	sts	0x12F9, r19	; 0x8012f9 <radio+0x3>
   13d02:	20 93 f8 12 	sts	0x12F8, r18	; 0x8012f8 <radio+0x2>
   13d06:	10 92 fc 12 	sts	0x12FC, r1	; 0x8012fc <radio+0x6>
   13d0a:	20 e2       	ldi	r18, 0x20	; 32
   13d0c:	20 93 fd 12 	sts	0x12FD, r18	; 0x8012fd <radio+0x7>
   13d10:	10 92 fe 12 	sts	0x12FE, r1	; 0x8012fe <radio+0x8>
   13d14:	25 e0       	ldi	r18, 0x05	; 5
   13d16:	20 93 04 13 	sts	0x1304, r18	; 0x801304 <radio+0xe>
   13d1a:	45 e0       	ldi	r20, 0x05	; 5
   13d1c:	50 e0       	ldi	r21, 0x00	; 0
   13d1e:	60 e0       	ldi	r22, 0x00	; 0
   13d20:	70 e0       	ldi	r23, 0x00	; 0
   13d22:	40 93 0a 13 	sts	0x130A, r20	; 0x80130a <radio+0x14>
   13d26:	50 93 0b 13 	sts	0x130B, r21	; 0x80130b <radio+0x15>
   13d2a:	60 93 0c 13 	sts	0x130C, r22	; 0x80130c <radio+0x16>
   13d2e:	70 93 0d 13 	sts	0x130D, r23	; 0x80130d <radio+0x17>
   13d32:	10 92 ff 12 	sts	0x12FF, r1	; 0x8012ff <radio+0x9>
   13d36:	90 93 b4 11 	sts	0x11B4, r25	; 0x8011b4 <network+0x30>
   13d3a:	80 93 b3 11 	sts	0x11B3, r24	; 0x8011b3 <network+0x2f>
   13d3e:	29 eb       	ldi	r18, 0xB9	; 185
   13d40:	31 e1       	ldi	r19, 0x11	; 17
   13d42:	30 93 54 12 	sts	0x1254, r19	; 0x801254 <network+0xd0>
   13d46:	20 93 53 12 	sts	0x1253, r18	; 0x801253 <network+0xcf>
   13d4a:	21 e6       	ldi	r18, 0x61	; 97
   13d4c:	32 e1       	ldi	r19, 0x12	; 18
   13d4e:	30 93 60 12 	sts	0x1260, r19	; 0x801260 <network+0xdc>
   13d52:	20 93 5f 12 	sts	0x125F, r18	; 0x80125f <network+0xdb>
   13d56:	25 e5       	ldi	r18, 0x55	; 85
   13d58:	32 e1       	ldi	r19, 0x12	; 18
   13d5a:	30 93 ac 11 	sts	0x11AC, r19	; 0x8011ac <network+0x28>
   13d5e:	20 93 ab 11 	sts	0x11AB, r18	; 0x8011ab <network+0x27>
   13d62:	10 92 af 11 	sts	0x11AF, r1	; 0x8011af <network+0x2b>
   13d66:	10 92 b0 11 	sts	0x11B0, r1	; 0x8011b0 <network+0x2c>
   13d6a:	10 92 b1 11 	sts	0x11B1, r1	; 0x8011b1 <network+0x2d>
   13d6e:	10 92 b2 11 	sts	0x11B2, r1	; 0x8011b2 <network+0x2e>
   13d72:	10 92 ae 11 	sts	0x11AE, r1	; 0x8011ae <network+0x2a>
   13d76:	10 92 ad 11 	sts	0x11AD, r1	; 0x8011ad <network+0x29>
   13d7a:	10 92 84 11 	sts	0x1184, r1	; 0x801184 <network>
   13d7e:	90 93 73 11 	sts	0x1173, r25	; 0x801173 <mesh+0x7>
   13d82:	80 93 72 11 	sts	0x1172, r24	; 0x801172 <mesh+0x6>
   13d86:	84 e8       	ldi	r24, 0x84	; 132
   13d88:	91 e1       	ldi	r25, 0x11	; 17
   13d8a:	90 93 75 11 	sts	0x1175, r25	; 0x801175 <mesh+0x9>
   13d8e:	80 93 74 11 	sts	0x1174, r24	; 0x801174 <mesh+0x8>
   13d92:	87 ef       	ldi	r24, 0xF7	; 247
   13d94:	9d e0       	ldi	r25, 0x0D	; 13
   13d96:	90 93 04 0e 	sts	0x0E04, r25	; 0x800e04 <lm75_temp+0x1>
   13d9a:	80 93 03 0e 	sts	0x0E03, r24	; 0x800e03 <lm75_temp>
   13d9e:	88 e4       	ldi	r24, 0x48	; 72
   13da0:	80 93 05 0e 	sts	0x0E05, r24	; 0x800e05 <lm75_temp+0x2>
   13da4:	8a e0       	ldi	r24, 0x0A	; 10
   13da6:	92 e0       	ldi	r25, 0x02	; 2
   13da8:	90 93 0f 0e 	sts	0x0E0F, r25	; 0x800e0f <lm75_temp+0xc>
   13dac:	80 93 0e 0e 	sts	0x0E0E, r24	; 0x800e0e <lm75_temp+0xb>
   13db0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Generic_LM75_11Bit_Attributes+0x1>
   13db4:	90 93 06 0e 	sts	0x0E06, r25	; 0x800e06 <lm75_temp+0x3>
   13db8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Generic_LM75_11Bit_Attributes>
   13dbc:	89 1b       	sub	r24, r25
   13dbe:	99 0b       	sbc	r25, r25
   13dc0:	c1 e0       	ldi	r28, 0x01	; 1
   13dc2:	d0 e0       	ldi	r29, 0x00	; 0
   13dc4:	9e 01       	movw	r18, r28
   13dc6:	02 c0       	rjmp	.+4      	; 0x13dcc <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7058+0x460>
   13dc8:	22 0f       	add	r18, r18
   13dca:	33 1f       	adc	r19, r19
   13dcc:	8a 95       	dec	r24
   13dce:	e2 f7       	brpl	.-8      	; 0x13dc8 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7058+0x45c>
   13dd0:	c9 01       	movw	r24, r18
   13dd2:	91 95       	neg	r25
   13dd4:	81 95       	neg	r24
   13dd6:	91 09       	sbc	r25, r1
   13dd8:	90 93 08 0e 	sts	0x0E08, r25	; 0x800e08 <lm75_temp+0x5>
   13ddc:	80 93 07 0e 	sts	0x0E07, r24	; 0x800e07 <lm75_temp+0x4>
   13de0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Generic_LM75_11Bit_Attributes+0x2>
   13de4:	80 93 09 0e 	sts	0x0E09, r24	; 0x800e09 <lm75_temp+0x6>
   13de8:	be 01       	movw	r22, r28
   13dea:	02 c0       	rjmp	.+4      	; 0x13df0 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7058+0x484>
   13dec:	66 0f       	add	r22, r22
   13dee:	77 1f       	adc	r23, r23
   13df0:	8a 95       	dec	r24
   13df2:	e2 f7       	brpl	.-8      	; 0x13dec <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7058+0x480>
   13df4:	07 2e       	mov	r0, r23
   13df6:	00 0c       	add	r0, r0
   13df8:	88 0b       	sbc	r24, r24
   13dfa:	99 0b       	sbc	r25, r25
   13dfc:	0e 94 c2 b2 	call	0x16584	; 0x16584 <__floatsisf>
   13e00:	9b 01       	movw	r18, r22
   13e02:	ac 01       	movw	r20, r24
   13e04:	60 e0       	ldi	r22, 0x00	; 0
   13e06:	70 e0       	ldi	r23, 0x00	; 0
   13e08:	80 e8       	ldi	r24, 0x80	; 128
   13e0a:	9f e3       	ldi	r25, 0x3F	; 63
   13e0c:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
   13e10:	60 93 0a 0e 	sts	0x0E0A, r22	; 0x800e0a <lm75_temp+0x7>
   13e14:	70 93 0b 0e 	sts	0x0E0B, r23	; 0x800e0b <lm75_temp+0x8>
   13e18:	80 93 0c 0e 	sts	0x0E0C, r24	; 0x800e0c <lm75_temp+0x9>
   13e1c:	90 93 0d 0e 	sts	0x0E0D, r25	; 0x800e0d <lm75_temp+0xa>
   13e20:	80 e0       	ldi	r24, 0x00	; 0
   13e22:	98 ef       	ldi	r25, 0xF8	; 248
   13e24:	90 93 c1 0d 	sts	0x0DC1, r25	; 0x800dc1 <my_lcd+0x9>
   13e28:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <my_lcd+0x8>
   13e2c:	20 ee       	ldi	r18, 0xE0	; 224
   13e2e:	37 e0       	ldi	r19, 0x07	; 7
   13e30:	30 93 bf 0d 	sts	0x0DBF, r19	; 0x800dbf <my_lcd+0x7>
   13e34:	20 93 be 0d 	sts	0x0DBE, r18	; 0x800dbe <my_lcd+0x6>
   13e38:	90 93 c3 0d 	sts	0x0DC3, r25	; 0x800dc3 <my_lcd+0xb>
   13e3c:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <my_lcd+0xa>
   13e40:	81 e0       	ldi	r24, 0x01	; 1
   13e42:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <my_lcd+0xc>
   13e46:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_lcd+0xd>
   13e4a:	84 e8       	ldi	r24, 0x84	; 132
   13e4c:	92 e0       	ldi	r25, 0x02	; 2
   13e4e:	90 93 b9 0d 	sts	0x0DB9, r25	; 0x800db9 <my_lcd+0x1>
   13e52:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <my_lcd>
   13e56:	82 e2       	ldi	r24, 0x22	; 34
   13e58:	80 93 f6 0d 	sts	0x0DF6, r24	; 0x800df6 <my_lcd+0x3e>
   13e5c:	e5 ea       	ldi	r30, 0xA5	; 165
   13e5e:	fb e3       	ldi	r31, 0x3B	; 59
   13e60:	e4 91       	lpm	r30, Z
   13e62:	f0 e0       	ldi	r31, 0x00	; 0
   13e64:	ee 0f       	add	r30, r30
   13e66:	ff 1f       	adc	r31, r31
   13e68:	ec 58       	subi	r30, 0x8C	; 140
   13e6a:	f4 4c       	sbci	r31, 0xC4	; 196
   13e6c:	a5 91       	lpm	r26, Z+
   13e6e:	b4 91       	lpm	r27, Z
   13e70:	b0 93 e7 0d 	sts	0x0DE7, r27	; 0x800de7 <my_lcd+0x2f>
   13e74:	a0 93 e6 0d 	sts	0x0DE6, r26	; 0x800de6 <my_lcd+0x2e>
   13e78:	e7 ea       	ldi	r30, 0xA7	; 167
   13e7a:	fb e3       	ldi	r31, 0x3B	; 59
   13e7c:	e4 91       	lpm	r30, Z
   13e7e:	f0 e0       	ldi	r31, 0x00	; 0
   13e80:	ee 0f       	add	r30, r30
   13e82:	ff 1f       	adc	r31, r31
   13e84:	ec 58       	subi	r30, 0x8C	; 140
   13e86:	f4 4c       	sbci	r31, 0xC4	; 196
   13e88:	85 91       	lpm	r24, Z+
   13e8a:	94 91       	lpm	r25, Z
   13e8c:	90 93 e9 0d 	sts	0x0DE9, r25	; 0x800de9 <my_lcd+0x31>
   13e90:	80 93 e8 0d 	sts	0x0DE8, r24	; 0x800de8 <my_lcd+0x30>
   13e94:	e8 ea       	ldi	r30, 0xA8	; 168
   13e96:	fb e3       	ldi	r31, 0x3B	; 59
   13e98:	e4 91       	lpm	r30, Z
   13e9a:	f0 e0       	ldi	r31, 0x00	; 0
   13e9c:	ee 0f       	add	r30, r30
   13e9e:	ff 1f       	adc	r31, r31
   13ea0:	ec 58       	subi	r30, 0x8C	; 140
   13ea2:	f4 4c       	sbci	r31, 0xC4	; 196
   13ea4:	85 91       	lpm	r24, Z+
   13ea6:	94 91       	lpm	r25, Z
   13ea8:	90 93 eb 0d 	sts	0x0DEB, r25	; 0x800deb <my_lcd+0x33>
   13eac:	80 93 ea 0d 	sts	0x0DEA, r24	; 0x800dea <my_lcd+0x32>
   13eb0:	e4 ea       	ldi	r30, 0xA4	; 164
   13eb2:	fb e3       	ldi	r31, 0x3B	; 59
   13eb4:	e4 91       	lpm	r30, Z
   13eb6:	f0 e0       	ldi	r31, 0x00	; 0
   13eb8:	ee 0f       	add	r30, r30
   13eba:	ff 1f       	adc	r31, r31
   13ebc:	ec 58       	subi	r30, 0x8C	; 140
   13ebe:	f4 4c       	sbci	r31, 0xC4	; 196
   13ec0:	85 91       	lpm	r24, Z+
   13ec2:	94 91       	lpm	r25, Z
   13ec4:	90 93 ed 0d 	sts	0x0DED, r25	; 0x800ded <my_lcd+0x35>
   13ec8:	80 93 ec 0d 	sts	0x0DEC, r24	; 0x800dec <my_lcd+0x34>
   13ecc:	ef e5       	ldi	r30, 0x5F	; 95
   13ece:	fb e3       	ldi	r31, 0x3B	; 59
   13ed0:	84 91       	lpm	r24, Z
   13ed2:	80 93 ee 0d 	sts	0x0DEE, r24	; 0x800dee <my_lcd+0x36>
   13ed6:	e1 e6       	ldi	r30, 0x61	; 97
   13ed8:	fb e3       	ldi	r31, 0x3B	; 59
   13eda:	24 91       	lpm	r18, Z
   13edc:	20 93 ef 0d 	sts	0x0DEF, r18	; 0x800def <my_lcd+0x37>
   13ee0:	e2 e6       	ldi	r30, 0x62	; 98
   13ee2:	fb e3       	ldi	r31, 0x3B	; 59
   13ee4:	94 91       	lpm	r25, Z
   13ee6:	90 93 f0 0d 	sts	0x0DF0, r25	; 0x800df0 <my_lcd+0x38>
   13eea:	ee e5       	ldi	r30, 0x5E	; 94
   13eec:	fb e3       	ldi	r31, 0x3B	; 59
   13eee:	e4 91       	lpm	r30, Z
   13ef0:	e0 93 f1 0d 	sts	0x0DF1, r30	; 0x800df1 <my_lcd+0x39>
   13ef4:	38 2f       	mov	r19, r24
   13ef6:	30 95       	com	r19
   13ef8:	30 93 f2 0d 	sts	0x0DF2, r19	; 0x800df2 <my_lcd+0x3a>
   13efc:	20 95       	com	r18
   13efe:	20 93 f3 0d 	sts	0x0DF3, r18	; 0x800df3 <my_lcd+0x3b>
   13f02:	90 95       	com	r25
   13f04:	90 93 f4 0d 	sts	0x0DF4, r25	; 0x800df4 <my_lcd+0x3c>
   13f08:	e0 95       	com	r30
   13f0a:	e0 93 f5 0d 	sts	0x0DF5, r30	; 0x800df5 <my_lcd+0x3d>
   13f0e:	ec 91       	ld	r30, X
   13f10:	e8 2b       	or	r30, r24
   13f12:	ec 93       	st	X, r30
   13f14:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x30>
   13f18:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x31>
   13f1c:	80 81       	ld	r24, Z
   13f1e:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <my_lcd+0x37>
   13f22:	89 2b       	or	r24, r25
   13f24:	80 83       	st	Z, r24
   13f26:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x32>
   13f2a:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x33>
   13f2e:	80 81       	ld	r24, Z
   13f30:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x38>
   13f34:	89 2b       	or	r24, r25
   13f36:	80 83       	st	Z, r24
   13f38:	e0 91 ec 0d 	lds	r30, 0x0DEC	; 0x800dec <my_lcd+0x34>
   13f3c:	f0 91 ed 0d 	lds	r31, 0x0DED	; 0x800ded <my_lcd+0x35>
   13f40:	80 81       	ld	r24, Z
   13f42:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x39>
   13f46:	89 2b       	or	r24, r25
   13f48:	80 83       	st	Z, r24
   13f4a:	61 e0       	ldi	r22, 0x01	; 1
   13f4c:	81 e2       	ldi	r24, 0x21	; 33
   13f4e:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
   13f52:	61 e0       	ldi	r22, 0x01	; 1
   13f54:	83 e2       	ldi	r24, 0x23	; 35
   13f56:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
   13f5a:	61 e0       	ldi	r22, 0x01	; 1
   13f5c:	84 e2       	ldi	r24, 0x24	; 36
   13f5e:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
   13f62:	61 e0       	ldi	r22, 0x01	; 1
   13f64:	80 e2       	ldi	r24, 0x20	; 32
   13f66:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
   13f6a:	61 e0       	ldi	r22, 0x01	; 1
   13f6c:	82 e2       	ldi	r24, 0x22	; 34
   13f6e:	0e 94 73 89 	call	0x112e6	; 0x112e6 <digitalWrite>
   13f72:	61 e0       	ldi	r22, 0x01	; 1
   13f74:	82 e2       	ldi	r24, 0x22	; 34
   13f76:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
   13f7a:	10 92 cf 0d 	sts	0x0DCF, r1	; 0x800dcf <my_lcd+0x17>
   13f7e:	10 92 ce 0d 	sts	0x0DCE, r1	; 0x800dce <my_lcd+0x16>
   13f82:	86 e9       	ldi	r24, 0x96	; 150
   13f84:	97 e7       	ldi	r25, 0x77	; 119
   13f86:	90 93 d3 0d 	sts	0x0DD3, r25	; 0x800dd3 <my_lcd+0x1b>
   13f8a:	80 93 d2 0d 	sts	0x0DD2, r24	; 0x800dd2 <my_lcd+0x1a>
   13f8e:	20 e4       	ldi	r18, 0x40	; 64
   13f90:	31 e0       	ldi	r19, 0x01	; 1
   13f92:	30 93 c7 0d 	sts	0x0DC7, r19	; 0x800dc7 <my_lcd+0xf>
   13f96:	20 93 c6 0d 	sts	0x0DC6, r18	; 0x800dc6 <my_lcd+0xe>
   13f9a:	80 ee       	ldi	r24, 0xE0	; 224
   13f9c:	91 e0       	ldi	r25, 0x01	; 1
   13f9e:	90 93 c9 0d 	sts	0x0DC9, r25	; 0x800dc9 <my_lcd+0x11>
   13fa2:	80 93 c8 0d 	sts	0x0DC8, r24	; 0x800dc8 <my_lcd+0x10>
   13fa6:	41 b1       	in	r20, 0x01	; 1
   13fa8:	4f ef       	ldi	r20, 0xFF	; 255
   13faa:	41 b9       	out	0x01, r20	; 1
   13fac:	30 93 cb 0d 	sts	0x0DCB, r19	; 0x800dcb <my_lcd+0x13>
   13fb0:	20 93 ca 0d 	sts	0x0DCA, r18	; 0x800dca <my_lcd+0x12>
   13fb4:	90 93 cd 0d 	sts	0x0DCD, r25	; 0x800dcd <my_lcd+0x15>
   13fb8:	80 93 cc 0d 	sts	0x0DCC, r24	; 0x800dcc <my_lcd+0x14>
   13fbc:	e0 ea       	ldi	r30, 0xA0	; 160
   13fbe:	fb e3       	ldi	r31, 0x3B	; 59
   13fc0:	e4 91       	lpm	r30, Z
   13fc2:	f0 e0       	ldi	r31, 0x00	; 0
   13fc4:	ee 0f       	add	r30, r30
   13fc6:	ff 1f       	adc	r31, r31
   13fc8:	ec 58       	subi	r30, 0x8C	; 140
   13fca:	f4 4c       	sbci	r31, 0xC4	; 196
   13fcc:	85 91       	lpm	r24, Z+
   13fce:	94 91       	lpm	r25, Z
   13fd0:	90 93 aa 0d 	sts	0x0DAA, r25	; 0x800daa <my_touch+0x10>
   13fd4:	80 93 a9 0d 	sts	0x0DA9, r24	; 0x800da9 <my_touch+0xf>
   13fd8:	ef e9       	ldi	r30, 0x9F	; 159
   13fda:	fb e3       	ldi	r31, 0x3B	; 59
   13fdc:	e4 91       	lpm	r30, Z
   13fde:	f0 e0       	ldi	r31, 0x00	; 0
   13fe0:	ee 0f       	add	r30, r30
   13fe2:	ff 1f       	adc	r31, r31
   13fe4:	ec 58       	subi	r30, 0x8C	; 140
   13fe6:	f4 4c       	sbci	r31, 0xC4	; 196
   13fe8:	85 91       	lpm	r24, Z+
   13fea:	94 91       	lpm	r25, Z
   13fec:	90 93 ac 0d 	sts	0x0DAC, r25	; 0x800dac <my_touch+0x12>
   13ff0:	80 93 ab 0d 	sts	0x0DAB, r24	; 0x800dab <my_touch+0x11>
   13ff4:	e1 ea       	ldi	r30, 0xA1	; 161
   13ff6:	fb e3       	ldi	r31, 0x3B	; 59
   13ff8:	e4 91       	lpm	r30, Z
   13ffa:	f0 e0       	ldi	r31, 0x00	; 0
   13ffc:	ee 0f       	add	r30, r30
   13ffe:	ff 1f       	adc	r31, r31
   14000:	e2 5d       	subi	r30, 0xD2	; 210
   14002:	f4 4c       	sbci	r31, 0xC4	; 196
   14004:	85 91       	lpm	r24, Z+
   14006:	94 91       	lpm	r25, Z
   14008:	90 93 ae 0d 	sts	0x0DAE, r25	; 0x800dae <my_touch+0x14>
   1400c:	80 93 ad 0d 	sts	0x0DAD, r24	; 0x800dad <my_touch+0x13>
   14010:	e2 ea       	ldi	r30, 0xA2	; 162
   14012:	fb e3       	ldi	r31, 0x3B	; 59
   14014:	e4 91       	lpm	r30, Z
   14016:	f0 e0       	ldi	r31, 0x00	; 0
   14018:	ee 0f       	add	r30, r30
   1401a:	ff 1f       	adc	r31, r31
   1401c:	ec 58       	subi	r30, 0x8C	; 140
   1401e:	f4 4c       	sbci	r31, 0xC4	; 196
   14020:	85 91       	lpm	r24, Z+
   14022:	94 91       	lpm	r25, Z
   14024:	90 93 b0 0d 	sts	0x0DB0, r25	; 0x800db0 <my_touch+0x16>
   14028:	80 93 af 0d 	sts	0x0DAF, r24	; 0x800daf <my_touch+0x15>
   1402c:	eb e8       	ldi	r30, 0x8B	; 139
   1402e:	fb e3       	ldi	r31, 0x3B	; 59
   14030:	e4 91       	lpm	r30, Z
   14032:	f0 e0       	ldi	r31, 0x00	; 0
   14034:	ee 0f       	add	r30, r30
   14036:	ff 1f       	adc	r31, r31
   14038:	e2 5d       	subi	r30, 0xD2	; 210
   1403a:	f4 4c       	sbci	r31, 0xC4	; 196
   1403c:	85 91       	lpm	r24, Z+
   1403e:	94 91       	lpm	r25, Z
   14040:	90 93 b2 0d 	sts	0x0DB2, r25	; 0x800db2 <my_touch+0x18>
   14044:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <my_touch+0x17>
   14048:	ea e5       	ldi	r30, 0x5A	; 90
   1404a:	fb e3       	ldi	r31, 0x3B	; 59
   1404c:	e4 91       	lpm	r30, Z
   1404e:	e0 93 b3 0d 	sts	0x0DB3, r30	; 0x800db3 <my_touch+0x19>
   14052:	e9 e5       	ldi	r30, 0x59	; 89
   14054:	fb e3       	ldi	r31, 0x3B	; 59
   14056:	e4 91       	lpm	r30, Z
   14058:	e0 93 b4 0d 	sts	0x0DB4, r30	; 0x800db4 <my_touch+0x1a>
   1405c:	eb e5       	ldi	r30, 0x5B	; 91
   1405e:	fb e3       	ldi	r31, 0x3B	; 59
   14060:	e4 91       	lpm	r30, Z
   14062:	e0 93 b5 0d 	sts	0x0DB5, r30	; 0x800db5 <my_touch+0x1b>
   14066:	ec e5       	ldi	r30, 0x5C	; 92
   14068:	fb e3       	ldi	r31, 0x3B	; 59
   1406a:	e4 91       	lpm	r30, Z
   1406c:	e0 93 b6 0d 	sts	0x0DB6, r30	; 0x800db6 <my_touch+0x1c>
   14070:	e5 e4       	ldi	r30, 0x45	; 69
   14072:	fb e3       	ldi	r31, 0x3B	; 59
   14074:	e4 91       	lpm	r30, Z
   14076:	e0 93 b7 0d 	sts	0x0DB7, r30	; 0x800db7 <my_touch+0x1d>
   1407a:	61 e0       	ldi	r22, 0x01	; 1
   1407c:	8c e1       	ldi	r24, 0x1C	; 28
   1407e:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
   14082:	61 e0       	ldi	r22, 0x01	; 1
   14084:	8b e1       	ldi	r24, 0x1B	; 27
   14086:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
   1408a:	60 e0       	ldi	r22, 0x00	; 0
   1408c:	8d e1       	ldi	r24, 0x1D	; 29
   1408e:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
   14092:	61 e0       	ldi	r22, 0x01	; 1
   14094:	8e e1       	ldi	r24, 0x1E	; 30
   14096:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
   1409a:	60 e0       	ldi	r22, 0x00	; 0
   1409c:	87 e0       	ldi	r24, 0x07	; 7
   1409e:	0e 94 d0 8a 	call	0x115a0	; 0x115a0 <pinMode>
   140a2:	10 92 a6 0d 	sts	0x0DA6, r1	; 0x800da6 <my_touch+0xc>
   140a6:	10 92 a7 0d 	sts	0x0DA7, r1	; 0x800da7 <my_touch+0xd>
   140aa:	10 92 a8 0d 	sts	0x0DA8, r1	; 0x800da8 <my_touch+0xe>
   140ae:	10 92 a3 0d 	sts	0x0DA3, r1	; 0x800da3 <my_touch+0x9>
   140b2:	10 92 a2 0d 	sts	0x0DA2, r1	; 0x800da2 <my_touch+0x8>
   140b6:	10 92 a5 0d 	sts	0x0DA5, r1	; 0x800da5 <my_touch+0xb>
   140ba:	10 92 a4 0d 	sts	0x0DA4, r1	; 0x800da4 <my_touch+0xa>
   140be:	10 92 9b 0d 	sts	0x0D9B, r1	; 0x800d9b <my_touch+0x1>
   140c2:	10 92 9a 0d 	sts	0x0D9A, r1	; 0x800d9a <my_touch>
   140c6:	10 92 9d 0d 	sts	0x0D9D, r1	; 0x800d9d <my_touch+0x3>
   140ca:	10 92 9c 0d 	sts	0x0D9C, r1	; 0x800d9c <my_touch+0x2>
   140ce:	10 93 9f 0d 	sts	0x0D9F, r17	; 0x800d9f <my_touch+0x5>
   140d2:	00 93 9e 0d 	sts	0x0D9E, r16	; 0x800d9e <my_touch+0x4>
   140d6:	10 93 a1 0d 	sts	0x0DA1, r17	; 0x800da1 <my_touch+0x7>
   140da:	00 93 a0 0d 	sts	0x0DA0, r16	; 0x800da0 <my_touch+0x6>
   140de:	8a e0       	ldi	r24, 0x0A	; 10
   140e0:	80 93 8b 0c 	sts	0x0C8B, r24	; 0x800c8b <doc>
   140e4:	84 e9       	ldi	r24, 0x94	; 148
   140e6:	9c e0       	ldi	r25, 0x0C	; 12
   140e8:	90 93 8f 0c 	sts	0x0C8F, r25	; 0x800c8f <doc+0x4>
   140ec:	80 93 8e 0c 	sts	0x0C8E, r24	; 0x800c8e <doc+0x3>
   140f0:	20 e0       	ldi	r18, 0x00	; 0
   140f2:	31 e0       	ldi	r19, 0x01	; 1
   140f4:	30 93 91 0c 	sts	0x0C91, r19	; 0x800c91 <doc+0x6>
   140f8:	20 93 90 0c 	sts	0x0C90, r18	; 0x800c90 <doc+0x5>
   140fc:	10 92 93 0c 	sts	0x0C93, r1	; 0x800c93 <doc+0x8>
   14100:	10 92 92 0c 	sts	0x0C92, r1	; 0x800c92 <doc+0x7>
   14104:	8e e7       	ldi	r24, 0x7E	; 126
   14106:	92 e0       	ldi	r25, 0x02	; 2
   14108:	90 93 8d 0c 	sts	0x0C8D, r25	; 0x800c8d <doc+0x2>
   1410c:	80 93 8c 0c 	sts	0x0C8C, r24	; 0x800c8c <doc+0x1>
   14110:	10 92 95 0d 	sts	0x0D95, r1	; 0x800d95 <doc+0x10a>
   14114:	10 92 94 0d 	sts	0x0D94, r1	; 0x800d94 <doc+0x109>
   14118:	80 e0       	ldi	r24, 0x00	; 0
   1411a:	90 e0       	ldi	r25, 0x00	; 0
   1411c:	a2 e0       	ldi	r26, 0x02	; 2
   1411e:	b0 e0       	ldi	r27, 0x00	; 0
   14120:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <SRAM+0x4>
   14124:	90 93 83 0c 	sts	0x0C83, r25	; 0x800c83 <SRAM+0x5>
   14128:	a0 93 84 0c 	sts	0x0C84, r26	; 0x800c84 <SRAM+0x6>
   1412c:	b0 93 85 0c 	sts	0x0C85, r27	; 0x800c85 <SRAM+0x7>
   14130:	d0 93 81 0c 	sts	0x0C81, r29	; 0x800c81 <SRAM+0x3>
   14134:	c0 93 80 0c 	sts	0x0C80, r28	; 0x800c80 <SRAM+0x2>
   14138:	8f e4       	ldi	r24, 0x4F	; 79
   1413a:	90 e1       	ldi	r25, 0x10	; 16
   1413c:	90 93 7f 0c 	sts	0x0C7F, r25	; 0x800c7f <SRAM+0x1>
   14140:	80 93 7e 0c 	sts	0x0C7E, r24	; 0x800c7e <SRAM>
   14144:	46 e1       	ldi	r20, 0x16	; 22
   14146:	40 93 86 0c 	sts	0x0C86, r20	; 0x800c86 <SRAM+0x8>
   1414a:	40 e0       	ldi	r20, 0x00	; 0
   1414c:	50 e0       	ldi	r21, 0x00	; 0
   1414e:	64 e0       	ldi	r22, 0x04	; 4
   14150:	70 e0       	ldi	r23, 0x00	; 0
   14152:	40 93 73 0c 	sts	0x0C73, r20	; 0x800c73 <SROM+0x4>
   14156:	50 93 74 0c 	sts	0x0C74, r21	; 0x800c74 <SROM+0x5>
   1415a:	60 93 75 0c 	sts	0x0C75, r22	; 0x800c75 <SROM+0x6>
   1415e:	70 93 76 0c 	sts	0x0C76, r23	; 0x800c76 <SROM+0x7>
   14162:	30 93 78 0c 	sts	0x0C78, r19	; 0x800c78 <SROM+0x9>
   14166:	20 93 77 0c 	sts	0x0C77, r18	; 0x800c77 <SROM+0x8>
   1416a:	10 92 72 0c 	sts	0x0C72, r1	; 0x800c72 <SROM+0x3>
   1416e:	10 92 71 0c 	sts	0x0C71, r1	; 0x800c71 <SROM+0x2>
   14172:	90 93 70 0c 	sts	0x0C70, r25	; 0x800c70 <SROM+0x1>
   14176:	80 93 6f 0c 	sts	0x0C6F, r24	; 0x800c6f <SROM>
   1417a:	87 e1       	ldi	r24, 0x17	; 23
   1417c:	80 93 79 0c 	sts	0x0C79, r24	; 0x800c79 <SROM+0xa>
   14180:	df 91       	pop	r29
   14182:	cf 91       	pop	r28
   14184:	1f 91       	pop	r17
   14186:	0f 91       	pop	r16
   14188:	08 95       	ret

0001418a <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
   1418a:	cf 93       	push	r28
   1418c:	df 93       	push	r29
   1418e:	cd b7       	in	r28, 0x3d	; 61
   14190:	de b7       	in	r29, 0x3e	; 62
   14192:	c7 58       	subi	r28, 0x87	; 135
   14194:	d1 09       	sbc	r29, r1
   14196:	0f b6       	in	r0, 0x3f	; 63
   14198:	f8 94       	cli
   1419a:	de bf       	out	0x3e, r29	; 62
   1419c:	0f be       	out	0x3f, r0	; 63
   1419e:	cd bf       	out	0x3d, r28	; 61
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:612

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   141a0:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:624

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   141a2:	84 b5       	in	r24, 0x24	; 36
   141a4:	83 60       	ori	r24, 0x03	; 3
   141a6:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:639
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   141a8:	85 b5       	in	r24, 0x25	; 37
   141aa:	83 60       	ori	r24, 0x03	; 3
   141ac:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:651

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   141ae:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   141b2:	81 60       	ori	r24, 0x01	; 1
   141b4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:662
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   141b8:	82 e0       	ldi	r24, 0x02	; 2
   141ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:664
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   141be:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   141c2:	81 60       	ori	r24, 0x01	; 1
   141c4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:673
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   141c8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   141cc:	81 60       	ori	r24, 0x01	; 1
   141ce:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:680

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   141d2:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   141d6:	84 60       	ori	r24, 0x04	; 4
   141d8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:689

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   141dc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   141e0:	81 60       	ori	r24, 0x01	; 1
   141e2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:695
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   141e6:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   141ea:	83 60       	ori	r24, 0x03	; 3
   141ec:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:696
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   141f0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   141f4:	81 60       	ori	r24, 0x01	; 1
   141f6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:705
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode 
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D 
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   141fa:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   141fe:	83 60       	ori	r24, 0x03	; 3
   14200:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:706
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   14204:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   14208:	81 60       	ori	r24, 0x01	; 1
   1420a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:710
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   1420e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   14212:	83 60       	ori	r24, 0x03	; 3
   14214:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:711
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   14218:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1421c:	81 60       	ori	r24, 0x01	; 1
   1421e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:717
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   14222:	87 e8       	ldi	r24, 0x87	; 135
   14224:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:737
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   14228:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   1422c:	0e 94 01 70 	call	0xe002	; 0xe002 <setup>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3733
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);

          strcpy(payload, tds.name);
   14230:	21 e4       	ldi	r18, 0x41	; 65
   14232:	30 e0       	ldi	r19, 0x00	; 0
   14234:	2c 0f       	add	r18, r28
   14236:	3d 1f       	adc	r19, r29
   14238:	24 5f       	subi	r18, 0xF4	; 244
   1423a:	3f 4f       	sbci	r19, 0xFF	; 255
   1423c:	cc 57       	subi	r28, 0x7C	; 124
   1423e:	df 4f       	sbci	r29, 0xFF	; 255
   14240:	39 83       	std	Y+1, r19	; 0x01
   14242:	28 83       	st	Y, r18
   14244:	c4 58       	subi	r28, 0x84	; 132
   14246:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
          tt = status_tds18s20[id].online;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
          payload[0] = 0;
          createString(payload, ':', tds.rom, 8, 16);
   14248:	41 e4       	ldi	r20, 0x41	; 65
   1424a:	50 e0       	ldi	r21, 0x00	; 0
   1424c:	4c 0f       	add	r20, r28
   1424e:	5d 1f       	adc	r21, r29
   14250:	4f 5f       	subi	r20, 0xFF	; 255
   14252:	5f 4f       	sbci	r21, 0xFF	; 255
   14254:	ca 57       	subi	r28, 0x7A	; 122
   14256:	df 4f       	sbci	r29, 0xFF	; 255
   14258:	59 83       	std	Y+1, r21	; 0x01
   1425a:	48 83       	st	Y, r20
   1425c:	c6 58       	subi	r28, 0x86	; 134
   1425e:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4660
  char str1[16];
  unsigned long load_now;



  load_now = millis();
   14260:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   14264:	6b 01       	movw	r12, r22
   14266:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4661
  if (mqtt_reconnect() == 0)
   14268:	0e 94 b1 6e 	call	0xdd62	; 0xdd62 <mqtt_reconnect()>
   1426c:	90 91 cb 0a 	lds	r25, 0x0ACB	; 0x800acb <selftest_data>
   14270:	81 11       	cpse	r24, r1
   14272:	8a c0       	rjmp	.+276    	; 0x14388 <main+0x1fe>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3943
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   14274:	9f 7d       	andi	r25, 0xDF	; 223
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3934
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   14276:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4666
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
   1427a:	0e 94 61 93 	call	0x126c2	; 0x126c2 <PubSubClient::loop() [clone .constprop.106]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4669


  if (draw_menu(false) == true)
   1427e:	80 e0       	ldi	r24, 0x00	; 0
   14280:	0e 94 23 3d 	call	0x7a46	; 0x7a46 <draw_menu(bool)>
   14284:	88 23       	and	r24, r24
   14286:	19 f0       	breq	.+6      	; 0x1428e <main+0x104>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4670
    draw_menu(true);
   14288:	81 e0       	ldi	r24, 0x01	; 1
   1428a:	0e 94 23 3d 	call	0x7a46	; 0x7a46 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4674

  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) > 10000)
   1428e:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   14292:	00 91 cd 10 	lds	r16, 0x10CD	; 0x8010cd <milis_10s>
   14296:	10 91 ce 10 	lds	r17, 0x10CE	; 0x8010ce <milis_10s+0x1>
   1429a:	20 91 cf 10 	lds	r18, 0x10CF	; 0x8010cf <milis_10s+0x2>
   1429e:	30 91 d0 10 	lds	r19, 0x10D0	; 0x8010d0 <milis_10s+0x3>
   142a2:	60 1b       	sub	r22, r16
   142a4:	71 0b       	sbc	r23, r17
   142a6:	82 0b       	sbc	r24, r18
   142a8:	93 0b       	sbc	r25, r19
   142aa:	61 31       	cpi	r22, 0x11	; 17
   142ac:	77 42       	sbci	r23, 0x27	; 39
   142ae:	81 05       	cpc	r24, r1
   142b0:	91 05       	cpc	r25, r1
   142b2:	08 f4       	brcc	.+2      	; 0x142b6 <main+0x12c>
   142b4:	a6 c4       	rjmp	.+2380   	; 0x14c02 <main+0xa78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4676
  {
    milis_10s = millis();
   142b6:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   142ba:	60 93 cd 10 	sts	0x10CD, r22	; 0x8010cd <milis_10s>
   142be:	70 93 ce 10 	sts	0x10CE, r23	; 0x8010ce <milis_10s+0x1>
   142c2:	80 93 cf 10 	sts	0x10CF, r24	; 0x8010cf <milis_10s+0x2>
   142c6:	90 93 d0 10 	sts	0x10D0, r25	; 0x8010d0 <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4679


    menu_redraw10s = 1;
   142ca:	81 e0       	ldi	r24, 0x01	; 1
   142cc:	80 93 d8 0a 	sts	0x0AD8, r24	; 0x800ad8 <menu_redraw10s>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3563
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
   142d0:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
   142d4:	4a e0       	ldi	r20, 0x0A	; 10
   142d6:	be 01       	movw	r22, r28
   142d8:	6f 5f       	subi	r22, 0xFF	; 255
   142da:	7f 4f       	sbci	r23, 0xFF	; 255
   142dc:	90 e0       	ldi	r25, 0x00	; 0
   142de:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3564
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
   142e2:	ae 01       	movw	r20, r28
   142e4:	4f 5f       	subi	r20, 0xFF	; 255
   142e6:	5f 4f       	sbci	r21, 0xFF	; 255
   142e8:	6e ef       	ldi	r22, 0xFE	; 254
   142ea:	76 e0       	ldi	r23, 0x06	; 6
   142ec:	80 e1       	ldi	r24, 0x10	; 16
   142ee:	9e e0       	ldi	r25, 0x0E	; 14
   142f0:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3565
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   142f4:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3567
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   142f6:	ab e0       	ldi	r26, 0x0B	; 11
   142f8:	9a 2e       	mov	r9, r26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3565
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   142fa:	80 91 ff 09 	lds	r24, 0x09FF	; 0x8009ff <Global_HWwirenum>
   142fe:	18 17       	cp	r17, r24
   14300:	08 f0       	brcs	.+2      	; 0x14304 <main+0x17a>
   14302:	44 c0       	rjmp	.+136    	; 0x1438c <main+0x202>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3567
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   14304:	19 9d       	mul	r17, r9
   14306:	c0 01       	movw	r24, r0
   14308:	11 24       	eor	r1, r1
   1430a:	dc 01       	movw	r26, r24
   1430c:	a3 54       	subi	r26, 0x43	; 67
   1430e:	b6 4f       	sbci	r27, 0xF6	; 246
   14310:	5d 01       	movw	r10, r26
   14312:	00 e1       	ldi	r16, 0x10	; 16
   14314:	28 e0       	ldi	r18, 0x08	; 8
   14316:	ad 01       	movw	r20, r26
   14318:	6a e3       	ldi	r22, 0x3A	; 58
   1431a:	ce 01       	movw	r24, r28
   1431c:	01 96       	adiw	r24, 0x01	; 1
   1431e:	0e 94 7b 96 	call	0x12cf6	; 0x12cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3568
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "rom", payload);
   14322:	9e 01       	movw	r18, r28
   14324:	2f 5f       	subi	r18, 0xFF	; 255
   14326:	3f 4f       	sbci	r19, 0xFF	; 255
   14328:	4a e0       	ldi	r20, 0x0A	; 10
   1432a:	57 e0       	ldi	r21, 0x07	; 7
   1432c:	61 2f       	mov	r22, r17
   1432e:	8e e0       	ldi	r24, 0x0E	; 14
   14330:	97 e0       	ldi	r25, 0x07	; 7
   14332:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3570
    ///
    itoa(w_rom[i].assigned_ds2482, payload, 10);
   14336:	f5 01       	movw	r30, r10
   14338:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1433a:	4a e0       	ldi	r20, 0x0A	; 10
   1433c:	be 01       	movw	r22, r28
   1433e:	6f 5f       	subi	r22, 0xFF	; 255
   14340:	7f 4f       	sbci	r23, 0xFF	; 255
   14342:	90 e0       	ldi	r25, 0x00	; 0
   14344:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3571
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "assigned", payload);
   14348:	9e 01       	movw	r18, r28
   1434a:	2f 5f       	subi	r18, 0xFF	; 255
   1434c:	3f 4f       	sbci	r19, 0xFF	; 255
   1434e:	44 e1       	ldi	r20, 0x14	; 20
   14350:	57 e0       	ldi	r21, 0x07	; 7
   14352:	61 2f       	mov	r22, r17
   14354:	8e e0       	ldi	r24, 0x0E	; 14
   14356:	97 e0       	ldi	r25, 0x07	; 7
   14358:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3573
    ///
    itoa(w_rom[i].tds_idx, payload, 10);
   1435c:	d5 01       	movw	r26, r10
   1435e:	1a 96       	adiw	r26, 0x0a	; 10
   14360:	8c 91       	ld	r24, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14362:	4a e0       	ldi	r20, 0x0A	; 10
   14364:	be 01       	movw	r22, r28
   14366:	6f 5f       	subi	r22, 0xFF	; 255
   14368:	7f 4f       	sbci	r23, 0xFF	; 255
   1436a:	90 e0       	ldi	r25, 0x00	; 0
   1436c:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3574
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "tds_idx", payload);
   14370:	9e 01       	movw	r18, r28
   14372:	2f 5f       	subi	r18, 0xFF	; 255
   14374:	3f 4f       	sbci	r19, 0xFF	; 255
   14376:	4d e1       	ldi	r20, 0x1D	; 29
   14378:	57 e0       	ldi	r21, 0x07	; 7
   1437a:	61 2f       	mov	r22, r17
   1437c:	8e e0       	ldi	r24, 0x0E	; 14
   1437e:	97 e0       	ldi	r25, 0x07	; 7
   14380:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3565
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   14384:	1f 5f       	subi	r17, 0xFF	; 255
   14386:	b9 cf       	rjmp	.-142    	; 0x142fa <main+0x170>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3934
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   14388:	90 62       	ori	r25, 0x20	; 32
   1438a:	75 cf       	rjmp	.-278    	; 0x14276 <main+0xec>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:318
void send_mqtt_status(PubSubClient *mqtt_client)
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  if (mqtt_client->connected())
   1438c:	80 e1       	ldi	r24, 0x10	; 16
   1438e:	9e e0       	ldi	r25, 0x0E	; 14
   14390:	0e 94 2b 93 	call	0x12656	; 0x12656 <PubSubClient::connected()>
   14394:	88 23       	and	r24, r24
   14396:	09 f4       	brne	.+2      	; 0x1439a <main+0x210>
   14398:	ac c0       	rjmp	.+344    	; 0x144f2 <main+0x368>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:320
  {
    strcpy_P(str_topic, status_mqtt_send);
   1439a:	6c ed       	ldi	r22, 0xDC	; 220
   1439c:	75 e3       	ldi	r23, 0x35	; 53
   1439e:	ce 01       	movw	r24, r28
   143a0:	8f 5b       	subi	r24, 0xBF	; 191
   143a2:	9f 4f       	sbci	r25, 0xFF	; 255
   143a4:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   143a8:	4a e0       	ldi	r20, 0x0A	; 10
   143aa:	be 01       	movw	r22, r28
   143ac:	6f 5f       	subi	r22, 0xFF	; 255
   143ae:	7f 4f       	sbci	r23, 0xFF	; 255
   143b0:	80 91 67 0b 	lds	r24, 0x0B67	; 0x800b67 <mqtt_send_message>
   143b4:	90 91 68 0b 	lds	r25, 0x0B68	; 0x800b68 <mqtt_send_message+0x1>
   143b8:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:322
    itoa(mqtt_send_message, payload, 10);
    mqtt_send_message = 0;
   143bc:	10 92 68 0b 	sts	0x0B68, r1	; 0x800b68 <mqtt_send_message+0x1>
   143c0:	10 92 67 0b 	sts	0x0B67, r1	; 0x800b67 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:323
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   143c4:	ae 01       	movw	r20, r28
   143c6:	4f 5f       	subi	r20, 0xFF	; 255
   143c8:	5f 4f       	sbci	r21, 0xFF	; 255
   143ca:	be 01       	movw	r22, r28
   143cc:	6f 5b       	subi	r22, 0xBF	; 191
   143ce:	7f 4f       	sbci	r23, 0xFF	; 255
   143d0:	80 e1       	ldi	r24, 0x10	; 16
   143d2:	9e e0       	ldi	r25, 0x0E	; 14
   143d4:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:325
    ///
    strcpy_P(str_topic, status_mqtt_error);
   143d8:	6a ec       	ldi	r22, 0xCA	; 202
   143da:	75 e3       	ldi	r23, 0x35	; 53
   143dc:	ce 01       	movw	r24, r28
   143de:	8f 5b       	subi	r24, 0xBF	; 191
   143e0:	9f 4f       	sbci	r25, 0xFF	; 255
   143e2:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   143e6:	4a e0       	ldi	r20, 0x0A	; 10
   143e8:	be 01       	movw	r22, r28
   143ea:	6f 5f       	subi	r22, 0xFF	; 255
   143ec:	7f 4f       	sbci	r23, 0xFF	; 255
   143ee:	80 91 69 0b 	lds	r24, 0x0B69	; 0x800b69 <mqtt_error>
   143f2:	90 91 6a 0b 	lds	r25, 0x0B6A	; 0x800b6a <mqtt_error+0x1>
   143f6:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:327
    itoa(mqtt_error, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   143fa:	ae 01       	movw	r20, r28
   143fc:	4f 5f       	subi	r20, 0xFF	; 255
   143fe:	5f 4f       	sbci	r21, 0xFF	; 255
   14400:	be 01       	movw	r22, r28
   14402:	6f 5b       	subi	r22, 0xBF	; 191
   14404:	7f 4f       	sbci	r23, 0xFF	; 255
   14406:	80 e1       	ldi	r24, 0x10	; 16
   14408:	9e e0       	ldi	r25, 0x0E	; 14
   1440a:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:329
    ///
    strcpy_P(str_topic, status_mqtt_receive);
   1440e:	66 eb       	ldi	r22, 0xB6	; 182
   14410:	75 e3       	ldi	r23, 0x35	; 53
   14412:	ce 01       	movw	r24, r28
   14414:	8f 5b       	subi	r24, 0xBF	; 191
   14416:	9f 4f       	sbci	r25, 0xFF	; 255
   14418:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1441c:	4a e0       	ldi	r20, 0x0A	; 10
   1441e:	be 01       	movw	r22, r28
   14420:	6f 5f       	subi	r22, 0xFF	; 255
   14422:	7f 4f       	sbci	r23, 0xFF	; 255
   14424:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <mqtt_receive_message>
   14428:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <mqtt_receive_message+0x1>
   1442c:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:331
    itoa(mqtt_receive_message, payload, 10);
    mqtt_receive_message = 0;
   14430:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <mqtt_receive_message+0x1>
   14434:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <mqtt_receive_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:332
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   14438:	ae 01       	movw	r20, r28
   1443a:	4f 5f       	subi	r20, 0xFF	; 255
   1443c:	5f 4f       	sbci	r21, 0xFF	; 255
   1443e:	be 01       	movw	r22, r28
   14440:	6f 5b       	subi	r22, 0xBF	; 191
   14442:	7f 4f       	sbci	r23, 0xFF	; 255
   14444:	80 e1       	ldi	r24, 0x10	; 16
   14446:	9e e0       	ldi	r25, 0x0E	; 14
   14448:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:334
    ///
    strcpy_P(str_topic, status_mqtt_process);
   1444c:	62 ea       	ldi	r22, 0xA2	; 162
   1444e:	75 e3       	ldi	r23, 0x35	; 53
   14450:	ce 01       	movw	r24, r28
   14452:	8f 5b       	subi	r24, 0xBF	; 191
   14454:	9f 4f       	sbci	r25, 0xFF	; 255
   14456:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1445a:	4a e0       	ldi	r20, 0x0A	; 10
   1445c:	be 01       	movw	r22, r28
   1445e:	6f 5f       	subi	r22, 0xFF	; 255
   14460:	7f 4f       	sbci	r23, 0xFF	; 255
   14462:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_process_message>
   14466:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_process_message+0x1>
   1446a:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:336
    itoa(mqtt_process_message, payload, 10);
    mqtt_process_message = 0;
   1446e:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <mqtt_process_message+0x1>
   14472:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <mqtt_process_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:337
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   14476:	ae 01       	movw	r20, r28
   14478:	4f 5f       	subi	r20, 0xFF	; 255
   1447a:	5f 4f       	sbci	r21, 0xFF	; 255
   1447c:	be 01       	movw	r22, r28
   1447e:	6f 5b       	subi	r22, 0xBF	; 191
   14480:	7f 4f       	sbci	r23, 0xFF	; 255
   14482:	80 e1       	ldi	r24, 0x10	; 16
   14484:	9e e0       	ldi	r25, 0x0E	; 14
   14486:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:339

    payload[0] = 0;
   1448a:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:340
    createString(payload, '.', device.myIP, 4, 10);
   1448c:	0a e0       	ldi	r16, 0x0A	; 10
   1448e:	24 e0       	ldi	r18, 0x04	; 4
   14490:	43 e2       	ldi	r20, 0x23	; 35
   14492:	5c e0       	ldi	r21, 0x0C	; 12
   14494:	6e e2       	ldi	r22, 0x2E	; 46
   14496:	ce 01       	movw	r24, r28
   14498:	01 96       	adiw	r24, 0x01	; 1
   1449a:	0e 94 7b 96 	call	0x12cf6	; 0x12cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:341
    strcpy_P(str_topic, network_ip);
   1449e:	67 e9       	ldi	r22, 0x97	; 151
   144a0:	75 e3       	ldi	r23, 0x35	; 53
   144a2:	ce 01       	movw	r24, r28
   144a4:	8f 5b       	subi	r24, 0xBF	; 191
   144a6:	9f 4f       	sbci	r25, 0xFF	; 255
   144a8:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:342
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   144ac:	ae 01       	movw	r20, r28
   144ae:	4f 5f       	subi	r20, 0xFF	; 255
   144b0:	5f 4f       	sbci	r21, 0xFF	; 255
   144b2:	be 01       	movw	r22, r28
   144b4:	6f 5b       	subi	r22, 0xBF	; 191
   144b6:	7f 4f       	sbci	r23, 0xFF	; 255
   144b8:	80 e1       	ldi	r24, 0x10	; 16
   144ba:	9e e0       	ldi	r25, 0x0E	; 14
   144bc:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:344

    strcpy_P(str_topic, status_know_devices);
   144c0:	63 e8       	ldi	r22, 0x83	; 131
   144c2:	75 e3       	ldi	r23, 0x35	; 53
   144c4:	ce 01       	movw	r24, r28
   144c6:	8f 5b       	subi	r24, 0xBF	; 191
   144c8:	9f 4f       	sbci	r25, 0xFF	; 255
   144ca:	0e 94 3e aa 	call	0x1547c	; 0x1547c <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   144ce:	4a e0       	ldi	r20, 0x0A	; 10
   144d0:	be 01       	movw	r22, r28
   144d2:	6f 5f       	subi	r22, 0xFF	; 255
   144d4:	7f 4f       	sbci	r23, 0xFF	; 255
   144d6:	90 e0       	ldi	r25, 0x00	; 0
   144d8:	80 e0       	ldi	r24, 0x00	; 0
   144da:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:346
    itoa(count_know_mqtt, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   144de:	ae 01       	movw	r20, r28
   144e0:	4f 5f       	subi	r20, 0xFF	; 255
   144e2:	5f 4f       	sbci	r21, 0xFF	; 255
   144e4:	be 01       	movw	r22, r28
   144e6:	6f 5b       	subi	r22, 0xBF	; 191
   144e8:	7f 4f       	sbci	r23, 0xFF	; 255
   144ea:	80 e1       	ldi	r24, 0x10	; 16
   144ec:	9e e0       	ldi	r25, 0x0E	; 14
   144ee:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:348
  }
  mqtt_error = 0;
   144f2:	10 92 6a 0b 	sts	0x0B6A, r1	; 0x800b6a <mqtt_error+0x1>
   144f6:	10 92 69 0b 	sts	0x0B69, r1	; 0x800b69 <mqtt_error>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3583
/// funkce pro odeslani zakladnich informaci o tomto zarizeni
void send_device_status(void)
{
  char str_topic[64];
  char payload[64];
  if (mqtt_client.connected())
   144fa:	80 e1       	ldi	r24, 0x10	; 16
   144fc:	9e e0       	ldi	r25, 0x0E	; 14
   144fe:	0e 94 2b 93 	call	0x12656	; 0x12656 <PubSubClient::connected()>
   14502:	88 23       	and	r24, r24
   14504:	09 f4       	brne	.+2      	; 0x14508 <main+0x37e>
   14506:	6c c1       	rjmp	.+728    	; 0x147e0 <main+0x656>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3585
  {
    strcpy(str_topic, "status/uptime");
   14508:	65 e2       	ldi	r22, 0x25	; 37
   1450a:	77 e0       	ldi	r23, 0x07	; 7
   1450c:	ce 01       	movw	r24, r28
   1450e:	8f 5b       	subi	r24, 0xBF	; 191
   14510:	9f 4f       	sbci	r25, 0xFF	; 255
   14512:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14516:	4a e0       	ldi	r20, 0x0A	; 10
   14518:	be 01       	movw	r22, r28
   1451a:	6f 5f       	subi	r22, 0xFF	; 255
   1451c:	7f 4f       	sbci	r23, 0xFF	; 255
   1451e:	80 91 d4 0a 	lds	r24, 0x0AD4	; 0x800ad4 <uptime>
   14522:	90 91 d5 0a 	lds	r25, 0x0AD5	; 0x800ad5 <uptime+0x1>
   14526:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3587
    itoa(uptime, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1452a:	ae 01       	movw	r20, r28
   1452c:	4f 5f       	subi	r20, 0xFF	; 255
   1452e:	5f 4f       	sbci	r21, 0xFF	; 255
   14530:	be 01       	movw	r22, r28
   14532:	6f 5b       	subi	r22, 0xBF	; 191
   14534:	7f 4f       	sbci	r23, 0xFF	; 255
   14536:	80 e1       	ldi	r24, 0x10	; 16
   14538:	9e e0       	ldi	r25, 0x0E	; 14
   1453a:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3589
    ///
    strcpy(str_topic, "status/brigthness");
   1453e:	63 e3       	ldi	r22, 0x33	; 51
   14540:	77 e0       	ldi	r23, 0x07	; 7
   14542:	ce 01       	movw	r24, r28
   14544:	8f 5b       	subi	r24, 0xBF	; 191
   14546:	9f 4f       	sbci	r25, 0xFF	; 255
   14548:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1454c:	4a e0       	ldi	r20, 0x0A	; 10
   1454e:	be 01       	movw	r22, r28
   14550:	6f 5f       	subi	r22, 0xFF	; 255
   14552:	7f 4f       	sbci	r23, 0xFF	; 255
   14554:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <light_curr>
   14558:	90 91 cf 0a 	lds	r25, 0x0ACF	; 0x800acf <light_curr+0x1>
   1455c:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3591
    itoa(light_curr, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   14560:	ae 01       	movw	r20, r28
   14562:	4f 5f       	subi	r20, 0xFF	; 255
   14564:	5f 4f       	sbci	r21, 0xFF	; 255
   14566:	be 01       	movw	r22, r28
   14568:	6f 5b       	subi	r22, 0xBF	; 191
   1456a:	7f 4f       	sbci	r23, 0xFF	; 255
   1456c:	80 e1       	ldi	r24, 0x10	; 16
   1456e:	9e e0       	ldi	r25, 0x0E	; 14
   14570:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3597
    ///
    //strcpy(str_topic, "status/light");
    //itoa(jas_disp, payload, 10);
    //send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    ///
    strcpy(str_topic, "status/auto_brigthness");
   14574:	65 e4       	ldi	r22, 0x45	; 69
   14576:	77 e0       	ldi	r23, 0x07	; 7
   14578:	ce 01       	movw	r24, r28
   1457a:	8f 5b       	subi	r24, 0xBF	; 191
   1457c:	9f 4f       	sbci	r25, 0xFF	; 255
   1457e:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14582:	4a e0       	ldi	r20, 0x0A	; 10
   14584:	be 01       	movw	r22, r28
   14586:	6f 5f       	subi	r22, 0xFF	; 255
   14588:	7f 4f       	sbci	r23, 0xFF	; 255
   1458a:	90 e0       	ldi	r25, 0x00	; 0
   1458c:	80 e0       	ldi	r24, 0x00	; 0
   1458e:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3599
    itoa(auto_jas, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   14592:	ae 01       	movw	r20, r28
   14594:	4f 5f       	subi	r20, 0xFF	; 255
   14596:	5f 4f       	sbci	r21, 0xFF	; 255
   14598:	be 01       	movw	r22, r28
   1459a:	6f 5b       	subi	r22, 0xBF	; 191
   1459c:	7f 4f       	sbci	r23, 0xFF	; 255
   1459e:	80 e1       	ldi	r24, 0x10	; 16
   145a0:	9e e0       	ldi	r25, 0x0E	; 14
   145a2:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3601
    ///
    strcpy(str_topic, "status/load_min");
   145a6:	6c e5       	ldi	r22, 0x5C	; 92
   145a8:	77 e0       	ldi	r23, 0x07	; 7
   145aa:	ce 01       	movw	r24, r28
   145ac:	8f 5b       	subi	r24, 0xBF	; 191
   145ae:	9f 4f       	sbci	r25, 0xFF	; 255
   145b0:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   145b4:	4a e0       	ldi	r20, 0x0A	; 10
   145b6:	be 01       	movw	r22, r28
   145b8:	6f 5f       	subi	r22, 0xFF	; 255
   145ba:	7f 4f       	sbci	r23, 0xFF	; 255
   145bc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <load_min>
   145c0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <load_min+0x1>
   145c4:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3603
    itoa(load_min, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   145c8:	ae 01       	movw	r20, r28
   145ca:	4f 5f       	subi	r20, 0xFF	; 255
   145cc:	5f 4f       	sbci	r21, 0xFF	; 255
   145ce:	be 01       	movw	r22, r28
   145d0:	6f 5b       	subi	r22, 0xBF	; 191
   145d2:	7f 4f       	sbci	r23, 0xFF	; 255
   145d4:	80 e1       	ldi	r24, 0x10	; 16
   145d6:	9e e0       	ldi	r25, 0x0E	; 14
   145d8:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3605
    ///
    strcpy(str_topic, "status/load_max");
   145dc:	6c e6       	ldi	r22, 0x6C	; 108
   145de:	77 e0       	ldi	r23, 0x07	; 7
   145e0:	ce 01       	movw	r24, r28
   145e2:	8f 5b       	subi	r24, 0xBF	; 191
   145e4:	9f 4f       	sbci	r25, 0xFF	; 255
   145e6:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   145ea:	4a e0       	ldi	r20, 0x0A	; 10
   145ec:	be 01       	movw	r22, r28
   145ee:	6f 5f       	subi	r22, 0xFF	; 255
   145f0:	7f 4f       	sbci	r23, 0xFF	; 255
   145f2:	80 91 bd 10 	lds	r24, 0x10BD	; 0x8010bd <load_max>
   145f6:	90 91 be 10 	lds	r25, 0x10BE	; 0x8010be <load_max+0x1>
   145fa:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3607
    itoa(load_max, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   145fe:	ae 01       	movw	r20, r28
   14600:	4f 5f       	subi	r20, 0xFF	; 255
   14602:	5f 4f       	sbci	r21, 0xFF	; 255
   14604:	be 01       	movw	r22, r28
   14606:	6f 5b       	subi	r22, 0xBF	; 191
   14608:	7f 4f       	sbci	r23, 0xFF	; 255
   1460a:	80 e1       	ldi	r24, 0x10	; 16
   1460c:	9e e0       	ldi	r25, 0x0E	; 14
   1460e:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3609
    ///
    load_max = 0;
   14612:	10 92 bd 10 	sts	0x10BD, r1	; 0x8010bd <load_max>
   14616:	10 92 be 10 	sts	0x10BE, r1	; 0x8010be <load_max+0x1>
   1461a:	10 92 bf 10 	sts	0x10BF, r1	; 0x8010bf <load_max+0x2>
   1461e:	10 92 c0 10 	sts	0x10C0, r1	; 0x8010c0 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3610
    load_min = 0xffffffff;
   14622:	2f ef       	ldi	r18, 0xFF	; 255
   14624:	3f ef       	ldi	r19, 0xFF	; 255
   14626:	a9 01       	movw	r20, r18
   14628:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <load_min>
   1462c:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <load_min+0x1>
   14630:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <load_min+0x2>
   14634:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3612
    ///
    strcpy(str_topic, "status/default_ring");
   14638:	6c e7       	ldi	r22, 0x7C	; 124
   1463a:	77 e0       	ldi	r23, 0x07	; 7
   1463c:	ce 01       	movw	r24, r28
   1463e:	8f 5b       	subi	r24, 0xBF	; 191
   14640:	9f 4f       	sbci	r25, 0xFF	; 255
   14642:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3613
    itoa(default_ring, payload, 10);
   14646:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <default_ring>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1464a:	4a e0       	ldi	r20, 0x0A	; 10
   1464c:	be 01       	movw	r22, r28
   1464e:	6f 5f       	subi	r22, 0xFF	; 255
   14650:	7f 4f       	sbci	r23, 0xFF	; 255
   14652:	90 e0       	ldi	r25, 0x00	; 0
   14654:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3614
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   14658:	ae 01       	movw	r20, r28
   1465a:	4f 5f       	subi	r20, 0xFF	; 255
   1465c:	5f 4f       	sbci	r21, 0xFF	; 255
   1465e:	be 01       	movw	r22, r28
   14660:	6f 5b       	subi	r22, 0xBF	; 191
   14662:	7f 4f       	sbci	r23, 0xFF	; 255
   14664:	80 e1       	ldi	r24, 0x10	; 16
   14666:	9e e0       	ldi	r25, 0x0E	; 14
   14668:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3616
    ///
    strcpy(str_topic, "status/selftest");
   1466c:	60 e9       	ldi	r22, 0x90	; 144
   1466e:	77 e0       	ldi	r23, 0x07	; 7
   14670:	ce 01       	movw	r24, r28
   14672:	8f 5b       	subi	r24, 0xBF	; 191
   14674:	9f 4f       	sbci	r25, 0xFF	; 255
   14676:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3617
    itoa(selftest_data, payload, 10);
   1467a:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1467e:	4a e0       	ldi	r20, 0x0A	; 10
   14680:	be 01       	movw	r22, r28
   14682:	6f 5f       	subi	r22, 0xFF	; 255
   14684:	7f 4f       	sbci	r23, 0xFF	; 255
   14686:	90 e0       	ldi	r25, 0x00	; 0
   14688:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3618
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1468c:	ae 01       	movw	r20, r28
   1468e:	4f 5f       	subi	r20, 0xFF	; 255
   14690:	5f 4f       	sbci	r21, 0xFF	; 255
   14692:	be 01       	movw	r22, r28
   14694:	6f 5b       	subi	r22, 0xBF	; 191
   14696:	7f 4f       	sbci	r23, 0xFF	; 255
   14698:	80 e1       	ldi	r24, 0x10	; 16
   1469a:	9e e0       	ldi	r25, 0x0E	; 14
   1469c:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3620

    strcpy(str_topic, "status/rtds/count");
   146a0:	60 ea       	ldi	r22, 0xA0	; 160
   146a2:	77 e0       	ldi	r23, 0x07	; 7
   146a4:	ce 01       	movw	r24, r28
   146a6:	8f 5b       	subi	r24, 0xBF	; 191
   146a8:	9f 4f       	sbci	r25, 0xFF	; 255
   146aa:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3621
    itoa(use_rtds, payload, 10);
   146ae:	80 91 d2 0a 	lds	r24, 0x0AD2	; 0x800ad2 <use_rtds>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   146b2:	4a e0       	ldi	r20, 0x0A	; 10
   146b4:	be 01       	movw	r22, r28
   146b6:	6f 5f       	subi	r22, 0xFF	; 255
   146b8:	7f 4f       	sbci	r23, 0xFF	; 255
   146ba:	90 e0       	ldi	r25, 0x00	; 0
   146bc:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3622
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   146c0:	ae 01       	movw	r20, r28
   146c2:	4f 5f       	subi	r20, 0xFF	; 255
   146c4:	5f 4f       	sbci	r21, 0xFF	; 255
   146c6:	be 01       	movw	r22, r28
   146c8:	6f 5b       	subi	r22, 0xBF	; 191
   146ca:	7f 4f       	sbci	r23, 0xFF	; 255
   146cc:	80 e1       	ldi	r24, 0x10	; 16
   146ce:	9e e0       	ldi	r25, 0x0E	; 14
   146d0:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4000
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   146d4:	81 e0       	ldi	r24, 0x01	; 1
   146d6:	90 e0       	ldi	r25, 0x00	; 0
   146d8:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   146dc:	4a e0       	ldi	r20, 0x0A	; 10
   146de:	be 01       	movw	r22, r28
   146e0:	6f 5f       	subi	r22, 0xFF	; 255
   146e2:	7f 4f       	sbci	r23, 0xFF	; 255
   146e4:	90 e0       	ldi	r25, 0x00	; 0
   146e6:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3629
      strcpy(str_topic, "status/light/count");
      itoa(use_light_curr, payload, 10);
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
   146ea:	ae 01       	movw	r20, r28
   146ec:	4f 5f       	subi	r20, 0xFF	; 255
   146ee:	5f 4f       	sbci	r21, 0xFF	; 255
   146f0:	62 eb       	ldi	r22, 0xB2	; 178
   146f2:	77 e0       	ldi	r23, 0x07	; 7
   146f4:	80 e1       	ldi	r24, 0x10	; 16
   146f6:	9e e0       	ldi	r25, 0x0E	; 14
   146f8:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   146fc:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <tritri>
   14700:	90 91 0b 0a 	lds	r25, 0x0A0B	; 0x800a0b <tritri+0x1>
   14704:	25 e0       	ldi	r18, 0x05	; 5
   14706:	28 9f       	mul	r18, r24
   14708:	b0 01       	movw	r22, r0
   1470a:	29 9f       	mul	r18, r25
   1470c:	70 0d       	add	r23, r0
   1470e:	11 24       	eor	r1, r1
   14710:	90 e0       	ldi	r25, 0x00	; 0
   14712:	80 e0       	ldi	r24, 0x00	; 0
   14714:	0e 94 c0 b2 	call	0x16580	; 0x16580 <__floatunsisf>
   14718:	20 e0       	ldi	r18, 0x00	; 0
   1471a:	30 e0       	ldi	r19, 0x00	; 0
   1471c:	4a e7       	ldi	r20, 0x7A	; 122
   1471e:	54 e4       	ldi	r21, 0x44	; 68
   14720:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3631
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
   14724:	8e 01       	movw	r16, r28
   14726:	0f 5f       	subi	r16, 0xFF	; 255
   14728:	1f 4f       	sbci	r17, 0xFF	; 255
   1472a:	22 e0       	ldi	r18, 0x02	; 2
   1472c:	44 e0       	ldi	r20, 0x04	; 4
   1472e:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3632
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
   14732:	a8 01       	movw	r20, r16
   14734:	62 ec       	ldi	r22, 0xC2	; 194
   14736:	77 e0       	ldi	r23, 0x07	; 7
   14738:	80 e1       	ldi	r24, 0x10	; 16
   1473a:	9e e0       	ldi	r25, 0x0E	; 14
   1473c:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   14740:	60 91 08 0a 	lds	r22, 0x0A08	; 0x800a08 <petnula>
   14744:	70 91 09 0a 	lds	r23, 0x0A09	; 0x800a09 <petnula+0x1>
   14748:	f3 e0       	ldi	r31, 0x03	; 3
   1474a:	66 0f       	add	r22, r22
   1474c:	77 1f       	adc	r23, r23
   1474e:	fa 95       	dec	r31
   14750:	e1 f7       	brne	.-8      	; 0x1474a <main+0x5c0>
   14752:	90 e0       	ldi	r25, 0x00	; 0
   14754:	80 e0       	ldi	r24, 0x00	; 0
   14756:	0e 94 c0 b2 	call	0x16580	; 0x16580 <__floatunsisf>
   1475a:	20 e0       	ldi	r18, 0x00	; 0
   1475c:	30 e0       	ldi	r19, 0x00	; 0
   1475e:	4a e7       	ldi	r20, 0x7A	; 122
   14760:	54 e4       	ldi	r21, 0x44	; 68
   14762:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3634
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
   14766:	22 e0       	ldi	r18, 0x02	; 2
   14768:	44 e0       	ldi	r20, 0x04	; 4
   1476a:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3635
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
   1476e:	a8 01       	movw	r20, r16
   14770:	65 ed       	ldi	r22, 0xD5	; 213
   14772:	77 e0       	ldi	r23, 0x07	; 7
   14774:	80 e1       	ldi	r24, 0x10	; 16
   14776:	9e e0       	ldi	r25, 0x0E	; 14
   14778:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1477c:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <dvanact>
   14780:	90 91 07 0a 	lds	r25, 0x0A07	; 0x800a07 <dvanact+0x1>
   14784:	29 e3       	ldi	r18, 0x39	; 57
   14786:	28 9f       	mul	r18, r24
   14788:	b0 01       	movw	r22, r0
   1478a:	29 9f       	mul	r18, r25
   1478c:	70 0d       	add	r23, r0
   1478e:	11 24       	eor	r1, r1
   14790:	90 e0       	ldi	r25, 0x00	; 0
   14792:	80 e0       	ldi	r24, 0x00	; 0
   14794:	0e 94 c0 b2 	call	0x16580	; 0x16580 <__floatunsisf>
   14798:	20 e0       	ldi	r18, 0x00	; 0
   1479a:	30 e0       	ldi	r19, 0x00	; 0
   1479c:	4a e7       	ldi	r20, 0x7A	; 122
   1479e:	54 e4       	ldi	r21, 0x44	; 68
   147a0:	0e 94 f5 b4 	call	0x169ea	; 0x169ea <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3637
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
   147a4:	22 e0       	ldi	r18, 0x02	; 2
   147a6:	44 e0       	ldi	r20, 0x04	; 4
   147a8:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3638
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
   147ac:	a8 01       	movw	r20, r16
   147ae:	68 ee       	ldi	r22, 0xE8	; 232
   147b0:	77 e0       	ldi	r23, 0x07	; 7
   147b2:	80 e1       	ldi	r24, 0x10	; 16
   147b4:	9e e0       	ldi	r25, 0x0E	; 14
   147b6:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3993
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   147ba:	60 91 04 0a 	lds	r22, 0x0A04	; 0x800a04 <proud>
   147be:	70 91 05 0a 	lds	r23, 0x0A05	; 0x800a05 <proud+0x1>
   147c2:	90 e0       	ldi	r25, 0x00	; 0
   147c4:	80 e0       	ldi	r24, 0x00	; 0
   147c6:	0e 94 c0 b2 	call	0x16580	; 0x16580 <__floatunsisf>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3640
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
    ///
    dtostrf(prepocet_proudu(proud), 4, 2, payload);
   147ca:	22 e0       	ldi	r18, 0x02	; 2
   147cc:	44 e0       	ldi	r20, 0x04	; 4
   147ce:	0e 94 e7 a8 	call	0x151ce	; 0x151ce <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3641
    send_mqtt_general_payload(&mqtt_client, "status/current/consume", payload);
   147d2:	a8 01       	movw	r20, r16
   147d4:	6b ef       	ldi	r22, 0xFB	; 251
   147d6:	77 e0       	ldi	r23, 0x07	; 7
   147d8:	80 e1       	ldi	r24, 0x10	; 16
   147da:	9e e0       	ldi	r25, 0x0E	; 14
   147dc:	0e 94 48 5a 	call	0xb490	; 0xb490 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3565
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   147e0:	e8 e5       	ldi	r30, 0x58	; 88
   147e2:	ae 2e       	mov	r10, r30
   147e4:	bb 24       	eor	r11, r11
   147e6:	b3 94       	inc	r11
   147e8:	10 e0       	ldi	r17, 0x00	; 0
   147ea:	00 e0       	ldi	r16, 0x00	; 0
   147ec:	90 2e       	mov	r9, r16
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3666
  uint8_t tdsid;
  //char tmp1[12];
  //device_get_name(hostname);
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    //// odeslu pouze pokud je ring pripraveny
    if (thermostat_ring_get_active(idx) != RING_FREE)
   147ee:	80 2f       	mov	r24, r16
   147f0:	0e 94 f5 53 	call	0xa7ea	; 0xa7ea <thermostat_ring_get_active(unsigned char)>
   147f4:	8f 3f       	cpi	r24, 0xFF	; 255
   147f6:	09 f4       	brne	.+2      	; 0x147fa <main+0x670>
   147f8:	0d c1       	rjmp	.+538    	; 0x14a14 <main+0x88a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3668
    {
      thermostat_ring_get_name(idx, payload);
   147fa:	be 01       	movw	r22, r28
   147fc:	6f 5f       	subi	r22, 0xFF	; 255
   147fe:	7f 4f       	sbci	r23, 0xFF	; 255
   14800:	80 2f       	mov	r24, r16
   14802:	0e 94 3d 54 	call	0xa87a	; 0xa87a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3669
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "name", payload);
   14806:	9e 01       	movw	r18, r28
   14808:	2f 5f       	subi	r18, 0xFF	; 255
   1480a:	3f 4f       	sbci	r19, 0xFF	; 255
   1480c:	42 eb       	ldi	r20, 0xB2	; 178
   1480e:	53 e0       	ldi	r21, 0x03	; 3
   14810:	60 2f       	mov	r22, r16
   14812:	8b e8       	ldi	r24, 0x8B	; 139
   14814:	97 e0       	ldi	r25, 0x07	; 7
   14816:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3670
      itoa(thermostat_ring_get_active(idx), payload, 10);
   1481a:	80 2f       	mov	r24, r16
   1481c:	0e 94 f5 53 	call	0xa7ea	; 0xa7ea <thermostat_ring_get_active(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14820:	4a e0       	ldi	r20, 0x0A	; 10
   14822:	be 01       	movw	r22, r28
   14824:	6f 5f       	subi	r22, 0xFF	; 255
   14826:	7f 4f       	sbci	r23, 0xFF	; 255
   14828:	90 e0       	ldi	r25, 0x00	; 0
   1482a:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3671
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "active", payload);
   1482e:	9e 01       	movw	r18, r28
   14830:	2f 5f       	subi	r18, 0xFF	; 255
   14832:	3f 4f       	sbci	r19, 0xFF	; 255
   14834:	4c eb       	ldi	r20, 0xBC	; 188
   14836:	53 e0       	ldi	r21, 0x03	; 3
   14838:	60 2f       	mov	r22, r16
   1483a:	8b e8       	ldi	r24, 0x8B	; 139
   1483c:	97 e0       	ldi	r25, 0x07	; 7
   1483e:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   14842:	c5 01       	movw	r24, r10
   14844:	03 96       	adiw	r24, 0x03	; 3
   14846:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1484a:	4a e0       	ldi	r20, 0x0A	; 10
   1484c:	be 01       	movw	r22, r28
   1484e:	6f 5f       	subi	r22, 0xFF	; 255
   14850:	7f 4f       	sbci	r23, 0xFF	; 255
   14852:	90 e0       	ldi	r25, 0x00	; 0
   14854:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3673
      itoa(thermostat_ring_get_program_id(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "program", payload);
   14858:	9e 01       	movw	r18, r28
   1485a:	2f 5f       	subi	r18, 0xFF	; 255
   1485c:	3f 4f       	sbci	r19, 0xFF	; 255
   1485e:	45 e5       	ldi	r20, 0x55	; 85
   14860:	56 e0       	ldi	r21, 0x06	; 6
   14862:	60 2f       	mov	r22, r16
   14864:	8b e8       	ldi	r24, 0x8B	; 139
   14866:	97 e0       	ldi	r25, 0x07	; 7
   14868:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3674
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
   1486c:	80 2f       	mov	r24, r16
   1486e:	0e 94 ac 53 	call	0xa758	; 0xa758 <thermostat_ring_get_mezni(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14872:	4a e0       	ldi	r20, 0x0A	; 10
   14874:	be 01       	movw	r22, r28
   14876:	6f 5f       	subi	r22, 0xFF	; 255
   14878:	7f 4f       	sbci	r23, 0xFF	; 255
   1487a:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3675
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
   1487e:	9e 01       	movw	r18, r28
   14880:	2f 5f       	subi	r18, 0xFF	; 255
   14882:	3f 4f       	sbci	r19, 0xFF	; 255
   14884:	4b e4       	ldi	r20, 0x4B	; 75
   14886:	56 e0       	ldi	r21, 0x06	; 6
   14888:	60 2f       	mov	r22, r16
   1488a:	8b e8       	ldi	r24, 0x8B	; 139
   1488c:	97 e0       	ldi	r25, 0x07	; 7
   1488e:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3676
      itoa(thermostat_ring_get_mode(idx), payload, 10);
   14892:	80 2f       	mov	r24, r16
   14894:	0e 94 34 53 	call	0xa668	; 0xa668 <thermostat_ring_get_mode(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14898:	4a e0       	ldi	r20, 0x0A	; 10
   1489a:	be 01       	movw	r22, r28
   1489c:	6f 5f       	subi	r22, 0xFF	; 255
   1489e:	7f 4f       	sbci	r23, 0xFF	; 255
   148a0:	90 e0       	ldi	r25, 0x00	; 0
   148a2:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3677
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
   148a6:	9e 01       	movw	r18, r28
   148a8:	2f 5f       	subi	r18, 0xFF	; 255
   148aa:	3f 4f       	sbci	r19, 0xFF	; 255
   148ac:	4e e6       	ldi	r20, 0x6E	; 110
   148ae:	56 e0       	ldi	r21, 0x06	; 6
   148b0:	60 2f       	mov	r22, r16
   148b2:	8b e8       	ldi	r24, 0x8B	; 139
   148b4:	97 e0       	ldi	r25, 0x07	; 7
   148b6:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3678
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
   148ba:	80 2f       	mov	r24, r16
   148bc:	0e 94 34 53 	call	0xa668	; 0xa668 <thermostat_ring_get_mode(unsigned char)>
convert_mode_text():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4044
  return mode;
}

void convert_mode_text(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy(str, "off");
   148c0:	62 e1       	ldi	r22, 0x12	; 18
   148c2:	78 e0       	ldi	r23, 0x08	; 8
   148c4:	88 23       	and	r24, r24
   148c6:	a1 f0       	breq	.+40     	; 0x148f0 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4045
  if (mode == TERM_MODE_MAX)   strcpy(str, "heat");
   148c8:	61 e5       	ldi	r22, 0x51	; 81
   148ca:	75 e0       	ldi	r23, 0x05	; 5
   148cc:	81 30       	cpi	r24, 0x01	; 1
   148ce:	81 f0       	breq	.+32     	; 0x148f0 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4046
  if (mode == TERM_MODE_MAN_HEAT)   strcpy(str, "manual");
   148d0:	66 e5       	ldi	r22, 0x56	; 86
   148d2:	75 e0       	ldi	r23, 0x05	; 5
   148d4:	83 30       	cpi	r24, 0x03	; 3
   148d6:	61 f0       	breq	.+24     	; 0x148f0 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4047
  if (mode == TERM_MODE_PROG)   strcpy(str, "auto");
   148d8:	6d e5       	ldi	r22, 0x5D	; 93
   148da:	75 e0       	ldi	r23, 0x05	; 5
   148dc:	82 30       	cpi	r24, 0x02	; 2
   148de:	41 f0       	breq	.+16     	; 0x148f0 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4048
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy(str, "cool");
   148e0:	62 e6       	ldi	r22, 0x62	; 98
   148e2:	75 e0       	ldi	r23, 0x05	; 5
   148e4:	84 30       	cpi	r24, 0x04	; 4
   148e6:	21 f0       	breq	.+8      	; 0x148f0 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4049
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
   148e8:	86 30       	cpi	r24, 0x06	; 6
   148ea:	31 f4       	brne	.+12     	; 0x148f8 <main+0x76e>
   148ec:	67 e6       	ldi	r22, 0x67	; 103
   148ee:	75 e0       	ldi	r23, 0x05	; 5
   148f0:	ce 01       	movw	r24, r28
   148f2:	01 96       	adiw	r24, 0x01	; 1
   148f4:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3679
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "text_mode", payload);
   148f8:	9e 01       	movw	r18, r28
   148fa:	2f 5f       	subi	r18, 0xFF	; 255
   148fc:	3f 4f       	sbci	r19, 0xFF	; 255
   148fe:	49 e6       	ldi	r20, 0x69	; 105
   14900:	56 e0       	ldi	r21, 0x06	; 6
   14902:	69 2d       	mov	r22, r9
   14904:	8b e8       	ldi	r24, 0x8B	; 139
   14906:	97 e0       	ldi	r25, 0x07	; 7
   14908:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:19
uint8_t therm_power[MAX_THERMOSTAT];

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_state(uint8_t idx)
{
  return therm_stav[idx];
   1490c:	f8 01       	movw	r30, r16
   1490e:	e3 5f       	subi	r30, 0xF3	; 243
   14910:	f5 4f       	sbci	r31, 0xF5	; 245
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3680
      itoa(thermostat_ring_get_state(idx), payload, 10);
   14912:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14914:	4a e0       	ldi	r20, 0x0A	; 10
   14916:	be 01       	movw	r22, r28
   14918:	6f 5f       	subi	r22, 0xFF	; 255
   1491a:	7f 4f       	sbci	r23, 0xFF	; 255
   1491c:	90 e0       	ldi	r25, 0x00	; 0
   1491e:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3681
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status", payload);
   14922:	9e 01       	movw	r18, r28
   14924:	2f 5f       	subi	r18, 0xFF	; 255
   14926:	3f 4f       	sbci	r19, 0xFF	; 255
   14928:	46 e1       	ldi	r20, 0x16	; 22
   1492a:	58 e0       	ldi	r21, 0x08	; 8
   1492c:	69 2d       	mov	r22, r9
   1492e:	8b e8       	ldi	r24, 0x8B	; 139
   14930:	97 e0       	ldi	r25, 0x07	; 7
   14932:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   14936:	c5 01       	movw	r24, r10
   14938:	04 96       	adiw	r24, 0x04	; 4
   1493a:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   1493e:	88 2e       	mov	r8, r24
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3683
      tdsid = thermostat_ring_get_asociate_tds(idx);
      if (tdsid >= TDS_MEMORY_MAP_TDS && tdsid < TDS_MEMORY_MAP_RTDS)
   14940:	3f e0       	ldi	r19, 0x0F	; 15
   14942:	38 17       	cp	r19, r24
   14944:	88 f0       	brcs	.+34     	; 0x14968 <main+0x7de>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14946:	4a e0       	ldi	r20, 0x0A	; 10
   14948:	be 01       	movw	r22, r28
   1494a:	6f 5f       	subi	r22, 0xFF	; 255
   1494c:	7f 4f       	sbci	r23, 0xFF	; 255
   1494e:	90 e0       	ldi	r25, 0x00	; 0
   14950:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3686
      {
        itoa(tdsid, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "tds", payload);
   14954:	9e 01       	movw	r18, r28
   14956:	2f 5f       	subi	r18, 0xFF	; 255
   14958:	3f 4f       	sbci	r19, 0xFF	; 255
   1495a:	48 eb       	ldi	r20, 0xB8	; 184
   1495c:	53 e0       	ldi	r21, 0x03	; 3
   1495e:	69 2d       	mov	r22, r9
   14960:	8b e8       	ldi	r24, 0x8B	; 139
   14962:	97 e0       	ldi	r25, 0x07	; 7
   14964:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3688
      }
      if (tdsid >= TDS_MEMORY_MAP_RTDS && tdsid < 127)
   14968:	80 ef       	ldi	r24, 0xF0	; 240
   1496a:	88 0d       	add	r24, r8
   1496c:	8f 36       	cpi	r24, 0x6F	; 111
   1496e:	a0 f4       	brcc	.+40     	; 0x14998 <main+0x80e>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14970:	4a e0       	ldi	r20, 0x0A	; 10
   14972:	be 01       	movw	r22, r28
   14974:	6f 5f       	subi	r22, 0xFF	; 255
   14976:	7f 4f       	sbci	r23, 0xFF	; 255
   14978:	a8 2d       	mov	r26, r8
   1497a:	a0 51       	subi	r26, 0x10	; 16
   1497c:	bb 0b       	sbc	r27, r27
   1497e:	cd 01       	movw	r24, r26
   14980:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3691
      {
        itoa(tdsid - TDS_MEMORY_MAP_RTDS, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "rtds", payload);
   14984:	9e 01       	movw	r18, r28
   14986:	2f 5f       	subi	r18, 0xFF	; 255
   14988:	3f 4f       	sbci	r19, 0xFF	; 255
   1498a:	47 eb       	ldi	r20, 0xB7	; 183
   1498c:	53 e0       	ldi	r21, 0x03	; 3
   1498e:	69 2d       	mov	r22, r9
   14990:	8b e8       	ldi	r24, 0x8B	; 139
   14992:	97 e0       	ldi	r25, 0x07	; 7
   14994:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   14998:	c5 01       	movw	r24, r10
   1499a:	07 96       	adiw	r24, 0x07	; 7
   1499c:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   149a0:	4a e0       	ldi	r20, 0x0A	; 10
   149a2:	be 01       	movw	r22, r28
   149a4:	6f 5f       	subi	r22, 0xFF	; 255
   149a6:	7f 4f       	sbci	r23, 0xFF	; 255
   149a8:	90 e0       	ldi	r25, 0x00	; 0
   149aa:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3694
      }
      itoa(thermostat_ring_get_output(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output", payload);
   149ae:	9e 01       	movw	r18, r28
   149b0:	2f 5f       	subi	r18, 0xFF	; 255
   149b2:	3f 4f       	sbci	r19, 0xFF	; 255
   149b4:	43 e7       	ldi	r20, 0x73	; 115
   149b6:	56 e0       	ldi	r21, 0x06	; 6
   149b8:	69 2d       	mov	r22, r9
   149ba:	8b e8       	ldi	r24, 0x8B	; 139
   149bc:	97 e0       	ldi	r25, 0x07	; 7
   149be:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_status_data():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   149c2:	c5 01       	movw	r24, r10
   149c4:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   149c8:	4a e0       	ldi	r20, 0x0A	; 10
   149ca:	be 01       	movw	r22, r28
   149cc:	6f 5f       	subi	r22, 0xFF	; 255
   149ce:	7f 4f       	sbci	r23, 0xFF	; 255
   149d0:	90 e0       	ldi	r25, 0x00	; 0
   149d2:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3697

      itoa(thermostat_ring_get_status_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status_bites", payload);
   149d6:	9e 01       	movw	r18, r28
   149d8:	2f 5f       	subi	r18, 0xFF	; 255
   149da:	3f 4f       	sbci	r19, 0xFF	; 255
   149dc:	4d e1       	ldi	r20, 0x1D	; 29
   149de:	58 e0       	ldi	r21, 0x08	; 8
   149e0:	69 2d       	mov	r22, r9
   149e2:	8b e8       	ldi	r24, 0x8B	; 139
   149e4:	97 e0       	ldi	r25, 0x07	; 7
   149e6:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3699

      itoa(last_output_update[idx], payload, 10);
   149ea:	f8 01       	movw	r30, r16
   149ec:	ee 5e       	subi	r30, 0xEE	; 238
   149ee:	f5 4f       	sbci	r31, 0xF5	; 245
   149f0:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   149f2:	4a e0       	ldi	r20, 0x0A	; 10
   149f4:	be 01       	movw	r22, r28
   149f6:	6f 5f       	subi	r22, 0xFF	; 255
   149f8:	7f 4f       	sbci	r23, 0xFF	; 255
   149fa:	90 e0       	ldi	r25, 0x00	; 0
   149fc:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3700
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output_update", payload);
   14a00:	9e 01       	movw	r18, r28
   14a02:	2f 5f       	subi	r18, 0xFF	; 255
   14a04:	3f 4f       	sbci	r19, 0xFF	; 255
   14a06:	4a e2       	ldi	r20, 0x2A	; 42
   14a08:	58 e0       	ldi	r21, 0x08	; 8
   14a0a:	69 2d       	mov	r22, r9
   14a0c:	8b e8       	ldi	r24, 0x8B	; 139
   14a0e:	97 e0       	ldi	r25, 0x07	; 7
   14a10:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
   14a14:	0f 5f       	subi	r16, 0xFF	; 255
   14a16:	1f 4f       	sbci	r17, 0xFF	; 255
   14a18:	b1 e2       	ldi	r27, 0x21	; 33
   14a1a:	ab 0e       	add	r10, r27
   14a1c:	b1 1c       	adc	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3664
  //char hostname[10];
  char payload[64];
  uint8_t tdsid;
  //char tmp1[12];
  //device_get_name(hostname);
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   14a1e:	ed ef       	ldi	r30, 0xFD	; 253
   14a20:	ae 16       	cp	r10, r30
   14a22:	e1 e0       	ldi	r30, 0x01	; 1
   14a24:	be 06       	cpc	r11, r30
   14a26:	09 f0       	breq	.+2      	; 0x14a2a <main+0x8a0>
   14a28:	e1 ce       	rjmp	.-574    	; 0x147ec <main+0x662>
   14a2a:	67 e1       	ldi	r22, 0x17	; 23
   14a2c:	a6 2e       	mov	r10, r22
   14a2e:	6a e0       	ldi	r22, 0x0A	; 10
   14a30:	b6 2e       	mov	r11, r22
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3719
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   14a32:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3723
    if (get_tds18s20(id, &tds) == 1)
      if (tds.used == 1) if (status_tds18s20[id].online == True)
        {
          tt = status_tds18s20[id].temp / 10;
   14a34:	7a e0       	ldi	r23, 0x0A	; 10
   14a36:	87 2e       	mov	r8, r23
   14a38:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3720
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    if (get_tds18s20(id, &tds) == 1)
   14a3a:	be 01       	movw	r22, r28
   14a3c:	6f 5b       	subi	r22, 0xBF	; 191
   14a3e:	7f 4f       	sbci	r23, 0xFF	; 255
   14a40:	81 2f       	mov	r24, r17
   14a42:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
   14a46:	81 30       	cpi	r24, 0x01	; 1
   14a48:	09 f0       	breq	.+2      	; 0x14a4c <main+0x8c2>
   14a4a:	d2 c0       	rjmp	.+420    	; 0x14bf0 <main+0xa66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3721
      if (tds.used == 1) if (status_tds18s20[id].online == True)
   14a4c:	22 96       	adiw	r28, 0x02	; 2
   14a4e:	8f ad       	ldd	r24, Y+63	; 0x3f
   14a50:	22 97       	sbiw	r28, 0x02	; 2
   14a52:	81 30       	cpi	r24, 0x01	; 1
   14a54:	09 f0       	breq	.+2      	; 0x14a58 <main+0x8ce>
   14a56:	cc c0       	rjmp	.+408    	; 0x14bf0 <main+0xa66>
   14a58:	d5 01       	movw	r26, r10
   14a5a:	5b 96       	adiw	r26, 0x1b	; 27
   14a5c:	8c 91       	ld	r24, X
   14a5e:	5b 97       	sbiw	r26, 0x1b	; 27
   14a60:	81 30       	cpi	r24, 0x01	; 1
   14a62:	09 f0       	breq	.+2      	; 0x14a66 <main+0x8dc>
   14a64:	c5 c0       	rjmp	.+394    	; 0x14bf0 <main+0xa66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3723
        {
          tt = status_tds18s20[id].temp / 10;
   14a66:	15 96       	adiw	r26, 0x05	; 5
   14a68:	8d 91       	ld	r24, X+
   14a6a:	9c 91       	ld	r25, X
   14a6c:	b4 01       	movw	r22, r8
   14a6e:	0e 94 19 b4 	call	0x16832	; 0x16832 <__divmodhi4>
   14a72:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14a74:	4a e0       	ldi	r20, 0x0A	; 10
   14a76:	be 01       	movw	r22, r28
   14a78:	6f 5f       	subi	r22, 0xFF	; 255
   14a7a:	7f 4f       	sbci	r23, 0xFF	; 255
   14a7c:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3725
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp", payload);
   14a80:	9e 01       	movw	r18, r28
   14a82:	2f 5f       	subi	r18, 0xFF	; 255
   14a84:	3f 4f       	sbci	r19, 0xFF	; 255
   14a86:	43 ec       	ldi	r20, 0xC3	; 195
   14a88:	53 e0       	ldi	r21, 0x03	; 3
   14a8a:	61 2f       	mov	r22, r17
   14a8c:	88 eb       	ldi	r24, 0xB8	; 184
   14a8e:	93 e0       	ldi	r25, 0x03	; 3
   14a90:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
   14a94:	30 e0       	ldi	r19, 0x00	; 0
   14a96:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3726
          avg = 0;
   14a98:	60 e0       	ldi	r22, 0x00	; 0
   14a9a:	70 e0       	ldi	r23, 0x00	; 0
   14a9c:	cb 01       	movw	r24, r22
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3727
          for (uint8_t c = 0; c < MAX_AVG_TEMP; c++) avg = avg + status_tds18s20[id].average_temp[c];
   14a9e:	f9 01       	movw	r30, r18
   14aa0:	ee 0f       	add	r30, r30
   14aa2:	ff 1f       	adc	r31, r31
   14aa4:	ea 0d       	add	r30, r10
   14aa6:	fb 1d       	adc	r31, r11
   14aa8:	47 80       	ldd	r4, Z+7	; 0x07
   14aaa:	50 84       	ldd	r5, Z+8	; 0x08
   14aac:	05 2c       	mov	r0, r5
   14aae:	00 0c       	add	r0, r0
   14ab0:	66 08       	sbc	r6, r6
   14ab2:	77 08       	sbc	r7, r7
   14ab4:	64 0d       	add	r22, r4
   14ab6:	75 1d       	adc	r23, r5
   14ab8:	86 1d       	adc	r24, r6
   14aba:	97 1d       	adc	r25, r7
   14abc:	2f 5f       	subi	r18, 0xFF	; 255
   14abe:	3f 4f       	sbci	r19, 0xFF	; 255
   14ac0:	2a 30       	cpi	r18, 0x0A	; 10
   14ac2:	31 05       	cpc	r19, r1
   14ac4:	61 f7       	brne	.-40     	; 0x14a9e <main+0x914>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3729
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
   14ac6:	24 e6       	ldi	r18, 0x64	; 100
   14ac8:	30 e0       	ldi	r19, 0x00	; 0
   14aca:	40 e0       	ldi	r20, 0x00	; 0
   14acc:	50 e0       	ldi	r21, 0x00	; 0
   14ace:	0e 94 4f b4 	call	0x1689e	; 0x1689e <__divmodsi4>
   14ad2:	c9 01       	movw	r24, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14ad4:	4a e0       	ldi	r20, 0x0A	; 10
   14ad6:	be 01       	movw	r22, r28
   14ad8:	6f 5f       	subi	r22, 0xFF	; 255
   14ada:	7f 4f       	sbci	r23, 0xFF	; 255
   14adc:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3731
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);
   14ae0:	9e 01       	movw	r18, r28
   14ae2:	2f 5f       	subi	r18, 0xFF	; 255
   14ae4:	3f 4f       	sbci	r19, 0xFF	; 255
   14ae6:	48 e3       	ldi	r20, 0x38	; 56
   14ae8:	58 e0       	ldi	r21, 0x08	; 8
   14aea:	61 2f       	mov	r22, r17
   14aec:	88 eb       	ldi	r24, 0xB8	; 184
   14aee:	93 e0       	ldi	r25, 0x03	; 3
   14af0:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3733

          strcpy(payload, tds.name);
   14af4:	cc 57       	subi	r28, 0x7C	; 124
   14af6:	df 4f       	sbci	r29, 0xFF	; 255
   14af8:	68 81       	ld	r22, Y
   14afa:	79 81       	ldd	r23, Y+1	; 0x01
   14afc:	c4 58       	subi	r28, 0x84	; 132
   14afe:	d0 40       	sbci	r29, 0x00	; 0
   14b00:	ce 01       	movw	r24, r28
   14b02:	01 96       	adiw	r24, 0x01	; 1
   14b04:	0e 94 c4 b6 	call	0x16d88	; 0x16d88 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3734
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "name", payload);
   14b08:	9e 01       	movw	r18, r28
   14b0a:	2f 5f       	subi	r18, 0xFF	; 255
   14b0c:	3f 4f       	sbci	r19, 0xFF	; 255
   14b0e:	42 eb       	ldi	r20, 0xB2	; 178
   14b10:	53 e0       	ldi	r21, 0x03	; 3
   14b12:	61 2f       	mov	r22, r17
   14b14:	88 eb       	ldi	r24, 0xB8	; 184
   14b16:	93 e0       	ldi	r25, 0x03	; 3
   14b18:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14b1c:	4a e0       	ldi	r20, 0x0A	; 10
   14b1e:	be 01       	movw	r22, r28
   14b20:	6f 5f       	subi	r22, 0xFF	; 255
   14b22:	7f 4f       	sbci	r23, 0xFF	; 255
   14b24:	2d 96       	adiw	r28, 0x0d	; 13
   14b26:	8e ad       	ldd	r24, Y+62	; 0x3e
   14b28:	9f ad       	ldd	r25, Y+63	; 0x3f
   14b2a:	2d 97       	sbiw	r28, 0x0d	; 13
   14b2c:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3737
          tt = tds.offset;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
   14b30:	9e 01       	movw	r18, r28
   14b32:	2f 5f       	subi	r18, 0xFF	; 255
   14b34:	3f 4f       	sbci	r19, 0xFF	; 255
   14b36:	4b eb       	ldi	r20, 0xBB	; 187
   14b38:	57 e0       	ldi	r21, 0x07	; 7
   14b3a:	61 2f       	mov	r22, r17
   14b3c:	88 eb       	ldi	r24, 0xB8	; 184
   14b3e:	93 e0       	ldi	r25, 0x03	; 3
   14b40:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3738
          tt = status_tds18s20[id].online;
   14b44:	f5 01       	movw	r30, r10
   14b46:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14b48:	4a e0       	ldi	r20, 0x0A	; 10
   14b4a:	be 01       	movw	r22, r28
   14b4c:	6f 5f       	subi	r22, 0xFF	; 255
   14b4e:	7f 4f       	sbci	r23, 0xFF	; 255
   14b50:	90 e0       	ldi	r25, 0x00	; 0
   14b52:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3740
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
   14b56:	9e 01       	movw	r18, r28
   14b58:	2f 5f       	subi	r18, 0xFF	; 255
   14b5a:	3f 4f       	sbci	r19, 0xFF	; 255
   14b5c:	41 e4       	ldi	r20, 0x41	; 65
   14b5e:	58 e0       	ldi	r21, 0x08	; 8
   14b60:	61 2f       	mov	r22, r17
   14b62:	88 eb       	ldi	r24, 0xB8	; 184
   14b64:	93 e0       	ldi	r25, 0x03	; 3
   14b66:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3741
          payload[0] = 0;
   14b6a:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
          createString(payload, ':', tds.rom, 8, 16);
   14b6c:	00 e1       	ldi	r16, 0x10	; 16
   14b6e:	28 e0       	ldi	r18, 0x08	; 8
   14b70:	ca 57       	subi	r28, 0x7A	; 122
   14b72:	df 4f       	sbci	r29, 0xFF	; 255
   14b74:	48 81       	ld	r20, Y
   14b76:	59 81       	ldd	r21, Y+1	; 0x01
   14b78:	c6 58       	subi	r28, 0x86	; 134
   14b7a:	d0 40       	sbci	r29, 0x00	; 0
   14b7c:	6a e3       	ldi	r22, 0x3A	; 58
   14b7e:	ce 01       	movw	r24, r28
   14b80:	01 96       	adiw	r24, 0x01	; 1
   14b82:	0e 94 7b 96 	call	0x12cf6	; 0x12cf6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3743
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "rom", payload);
   14b86:	9e 01       	movw	r18, r28
   14b88:	2f 5f       	subi	r18, 0xFF	; 255
   14b8a:	3f 4f       	sbci	r19, 0xFF	; 255
   14b8c:	4a e0       	ldi	r20, 0x0A	; 10
   14b8e:	57 e0       	ldi	r21, 0x07	; 7
   14b90:	61 2f       	mov	r22, r17
   14b92:	88 eb       	ldi	r24, 0xB8	; 184
   14b94:	93 e0       	ldi	r25, 0x03	; 3
   14b96:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3744
          tt = tds.period;
   14b9a:	66 96       	adiw	r28, 0x16	; 22
   14b9c:	8f ad       	ldd	r24, Y+63	; 0x3f
   14b9e:	66 97       	sbiw	r28, 0x16	; 22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14ba0:	4a e0       	ldi	r20, 0x0A	; 10
   14ba2:	be 01       	movw	r22, r28
   14ba4:	6f 5f       	subi	r22, 0xFF	; 255
   14ba6:	7f 4f       	sbci	r23, 0xFF	; 255
   14ba8:	90 e0       	ldi	r25, 0x00	; 0
   14baa:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3746
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "period", payload);
   14bae:	9e 01       	movw	r18, r28
   14bb0:	2f 5f       	subi	r18, 0xFF	; 255
   14bb2:	3f 4f       	sbci	r19, 0xFF	; 255
   14bb4:	44 e4       	ldi	r20, 0x44	; 68
   14bb6:	56 e0       	ldi	r21, 0x06	; 6
   14bb8:	61 2f       	mov	r22, r17
   14bba:	88 eb       	ldi	r24, 0xB8	; 184
   14bbc:	93 e0       	ldi	r25, 0x03	; 3
   14bbe:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3748

          tt = (uptime & 0xff) - status_tds18s20[id].period_now;
   14bc2:	80 91 d4 0a 	lds	r24, 0x0AD4	; 0x800ad4 <uptime>
   14bc6:	d5 01       	movw	r26, r10
   14bc8:	5c 96       	adiw	r26, 0x1c	; 28
   14bca:	9c 91       	ld	r25, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14bcc:	4a e0       	ldi	r20, 0x0A	; 10
   14bce:	be 01       	movw	r22, r28
   14bd0:	6f 5f       	subi	r22, 0xFF	; 255
   14bd2:	7f 4f       	sbci	r23, 0xFF	; 255
   14bd4:	89 1b       	sub	r24, r25
   14bd6:	99 0b       	sbc	r25, r25
   14bd8:	0e 94 7b aa 	call	0x154f6	; 0x154f6 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3750
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "start_at", payload);
   14bdc:	9e 01       	movw	r18, r28
   14bde:	2f 5f       	subi	r18, 0xFF	; 255
   14be0:	3f 4f       	sbci	r19, 0xFF	; 255
   14be2:	48 e4       	ldi	r20, 0x48	; 72
   14be4:	58 e0       	ldi	r21, 0x08	; 8
   14be6:	61 2f       	mov	r22, r17
   14be8:	88 eb       	ldi	r24, 0xB8	; 184
   14bea:	93 e0       	ldi	r25, 0x03	; 3
   14bec:	0e 94 d5 95 	call	0x12baa	; 0x12baa <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3719
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   14bf0:	1f 5f       	subi	r17, 0xFF	; 255
   14bf2:	be e1       	ldi	r27, 0x1E	; 30
   14bf4:	ab 0e       	add	r10, r27
   14bf6:	b1 1c       	adc	r11, r1
   14bf8:	16 30       	cpi	r17, 0x06	; 6
   14bfa:	09 f0       	breq	.+2      	; 0x14bfe <main+0xa74>
   14bfc:	1e cf       	rjmp	.-452    	; 0x14a3a <main+0x8b0>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4692
    send_mqtt_tds();

    //send_mqtt_program();
    ///thermostat();
    //mqtt_send_pid_variable();
    send_mqtt_remote_tds_status();
   14bfe:	0e 94 87 5e 	call	0xbd0e	; 0xbd0e <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4701
    //send_mesh_status();


  }

  if ((millis() - milis_1s) > 1000)
   14c02:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   14c06:	00 91 c9 10 	lds	r16, 0x10C9	; 0x8010c9 <milis_1s>
   14c0a:	10 91 ca 10 	lds	r17, 0x10CA	; 0x8010ca <milis_1s+0x1>
   14c0e:	20 91 cb 10 	lds	r18, 0x10CB	; 0x8010cb <milis_1s+0x2>
   14c12:	30 91 cc 10 	lds	r19, 0x10CC	; 0x8010cc <milis_1s+0x3>
   14c16:	60 1b       	sub	r22, r16
   14c18:	71 0b       	sbc	r23, r17
   14c1a:	82 0b       	sbc	r24, r18
   14c1c:	93 0b       	sbc	r25, r19
   14c1e:	69 3e       	cpi	r22, 0xE9	; 233
   14c20:	73 40       	sbci	r23, 0x03	; 3
   14c22:	81 05       	cpc	r24, r1
   14c24:	91 05       	cpc	r25, r1
   14c26:	08 f4       	brcc	.+2      	; 0x14c2a <main+0xaa0>
   14c28:	62 c1       	rjmp	.+708    	; 0x14eee <main+0xd64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4703
  {
    milis_1s = millis();
   14c2a:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   14c2e:	60 93 c9 10 	sts	0x10C9, r22	; 0x8010c9 <milis_1s>
   14c32:	70 93 ca 10 	sts	0x10CA, r23	; 0x8010ca <milis_1s+0x1>
   14c36:	80 93 cb 10 	sts	0x10CB, r24	; 0x8010cb <milis_1s+0x2>
   14c3a:	90 93 cc 10 	sts	0x10CC, r25	; 0x8010cc <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4704
    uptime++;
   14c3e:	40 90 d4 0a 	lds	r4, 0x0AD4	; 0x800ad4 <uptime>
   14c42:	50 90 d5 0a 	lds	r5, 0x0AD5	; 0x800ad5 <uptime+0x1>
   14c46:	60 90 d6 0a 	lds	r6, 0x0AD6	; 0x800ad6 <uptime+0x2>
   14c4a:	70 90 d7 0a 	lds	r7, 0x0AD7	; 0x800ad7 <uptime+0x3>
   14c4e:	ff ef       	ldi	r31, 0xFF	; 255
   14c50:	4f 1a       	sub	r4, r31
   14c52:	5f 0a       	sbc	r5, r31
   14c54:	6f 0a       	sbc	r6, r31
   14c56:	7f 0a       	sbc	r7, r31
   14c58:	40 92 d4 0a 	sts	0x0AD4, r4	; 0x800ad4 <uptime>
   14c5c:	50 92 d5 0a 	sts	0x0AD5, r5	; 0x800ad5 <uptime+0x1>
   14c60:	60 92 d6 0a 	sts	0x0AD6, r6	; 0x800ad6 <uptime+0x2>
   14c64:	70 92 d7 0a 	sts	0x0AD7, r7	; 0x800ad7 <uptime+0x3>
   14c68:	07 e1       	ldi	r16, 0x17	; 23
   14c6a:	1a e0       	ldi	r17, 0x0A	; 10
main():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   14c6c:	b1 2c       	mov	r11, r1
mereni_hwwire():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   14c6e:	92 01       	movw	r18, r4
   14c70:	33 27       	eor	r19, r19
   14c72:	ce 57       	subi	r28, 0x7E	; 126
   14c74:	df 4f       	sbci	r29, 0xFF	; 255
   14c76:	39 83       	std	Y+1, r19	; 0x01
   14c78:	28 83       	st	Y, r18
   14c7a:	c2 58       	subi	r28, 0x82	; 130
   14c7c:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   14c7e:	be 01       	movw	r22, r28
   14c80:	6f 5f       	subi	r22, 0xFF	; 255
   14c82:	7f 4f       	sbci	r23, 0xFF	; 255
   14c84:	8b 2d       	mov	r24, r11
   14c86:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   14c8a:	a9 80       	ldd	r10, Y+1	; 0x01
   14c8c:	31 e0       	ldi	r19, 0x01	; 1
   14c8e:	a3 12       	cpse	r10, r19
   14c90:	f7 c0       	rjmp	.+494    	; 0x14e80 <main+0xcf6>
   14c92:	d8 01       	movw	r26, r16
   14c94:	5c 96       	adiw	r26, 0x1c	; 28
   14c96:	8c 91       	ld	r24, X
   14c98:	5c 97       	sbiw	r26, 0x1c	; 28
   14c9a:	ce 57       	subi	r28, 0x7E	; 126
   14c9c:	df 4f       	sbci	r29, 0xFF	; 255
   14c9e:	e8 81       	ld	r30, Y
   14ca0:	f9 81       	ldd	r31, Y+1	; 0x01
   14ca2:	c2 58       	subi	r28, 0x82	; 130
   14ca4:	d0 40       	sbci	r29, 0x00	; 0
   14ca6:	e8 1b       	sub	r30, r24
   14ca8:	f1 09       	sbc	r31, r1
   14caa:	2d 89       	ldd	r18, Y+21	; 0x15
   14cac:	2e 17       	cp	r18, r30
   14cae:	1f 06       	cpc	r1, r31
   14cb0:	08 f0       	brcs	.+2      	; 0x14cb4 <main+0xb2a>
   14cb2:	e6 c0       	rjmp	.+460    	; 0x14e80 <main+0xcf6>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:275
    {
      if (status_tds18s20[w].wait == false)
   14cb4:	5d 96       	adiw	r26, 0x1d	; 29
   14cb6:	8c 91       	ld	r24, X
   14cb8:	81 11       	cpse	r24, r1
   14cba:	10 c0       	rjmp	.+32     	; 0x14cdc <main+0xb52>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:277
      {
        owReset(tds.assigned_ds2482);
   14cbc:	8a 85       	ldd	r24, Y+10	; 0x0a
   14cbe:	0e 94 e6 91 	call	0x123cc	; 0x123cc <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:278
        owMatchRom(tds.assigned_ds2482, tds.rom);
   14cc2:	be 01       	movw	r22, r28
   14cc4:	6e 5f       	subi	r22, 0xFE	; 254
   14cc6:	7f 4f       	sbci	r23, 0xFF	; 255
   14cc8:	8a 85       	ldd	r24, Y+10	; 0x0a
   14cca:	0e 94 c7 91 	call	0x1238e	; 0x1238e <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:279
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   14cce:	64 e4       	ldi	r22, 0x44	; 68
   14cd0:	8a 85       	ldd	r24, Y+10	; 0x0a
   14cd2:	0e 94 8e 91 	call	0x1231c	; 0x1231c <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:280
        status_tds18s20[w].wait = true;
   14cd6:	d8 01       	movw	r26, r16
   14cd8:	5d 96       	adiw	r26, 0x1d	; 29
   14cda:	ac 92       	st	X, r10
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:282
      }
      if (status_tds18s20[w].wait == true)
   14cdc:	f8 01       	movw	r30, r16
   14cde:	a5 8c       	ldd	r10, Z+29	; 0x1d
   14ce0:	f1 e0       	ldi	r31, 0x01	; 1
   14ce2:	af 12       	cpse	r10, r31
   14ce4:	cd c0       	rjmp	.+410    	; 0x14e80 <main+0xcf6>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:284
      {
        owReset(tds.assigned_ds2482);
   14ce6:	8a 85       	ldd	r24, Y+10	; 0x0a
   14ce8:	0e 94 e6 91 	call	0x123cc	; 0x123cc <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:285
        owMatchRom(tds.assigned_ds2482, tds.rom);
   14cec:	be 01       	movw	r22, r28
   14cee:	6e 5f       	subi	r22, 0xFE	; 254
   14cf0:	7f 4f       	sbci	r23, 0xFF	; 255
   14cf2:	8a 85       	ldd	r24, Y+10	; 0x0a
   14cf4:	0e 94 c7 91 	call	0x1238e	; 0x1238e <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:286
        owReadByte(tds.assigned_ds2482, &t);
   14cf8:	be 01       	movw	r22, r28
   14cfa:	6f 57       	subi	r22, 0x7F	; 127
   14cfc:	7f 4f       	sbci	r23, 0xFF	; 255
   14cfe:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d00:	0e 94 32 91 	call	0x12264	; 0x12264 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:287
        if (t != 0)
   14d04:	cf 57       	subi	r28, 0x7F	; 127
   14d06:	df 4f       	sbci	r29, 0xFF	; 255
   14d08:	88 81       	ld	r24, Y
   14d0a:	c1 58       	subi	r28, 0x81	; 129
   14d0c:	d0 40       	sbci	r29, 0x00	; 0
   14d0e:	88 23       	and	r24, r24
   14d10:	09 f4       	brne	.+2      	; 0x14d14 <main+0xb8a>
   14d12:	b6 c0       	rjmp	.+364    	; 0x14e80 <main+0xcf6>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:289
        {
          status_tds18s20[w].wait = false;
   14d14:	d8 01       	movw	r26, r16
   14d16:	5d 96       	adiw	r26, 0x1d	; 29
   14d18:	1c 92       	st	X, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:290
          status = owReset(tds.assigned_ds2482);
   14d1a:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d1c:	0e 94 e6 91 	call	0x123cc	; 0x123cc <ds2482owReset(unsigned char)>
   14d20:	38 2e       	mov	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:291
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   14d22:	be 01       	movw	r22, r28
   14d24:	6e 5f       	subi	r22, 0xFE	; 254
   14d26:	7f 4f       	sbci	r23, 0xFF	; 255
   14d28:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d2a:	0e 94 c7 91 	call	0x1238e	; 0x1238e <owMatchRom(unsigned char, unsigned char*)>
   14d2e:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:292
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   14d30:	6e eb       	ldi	r22, 0xBE	; 190
   14d32:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d34:	0e 94 8e 91 	call	0x1231c	; 0x1231c <ds2482owWriteByte(unsigned char, unsigned char)>
   14d38:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:293
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   14d3a:	be 01       	movw	r22, r28
   14d3c:	6f 5b       	subi	r22, 0xBF	; 191
   14d3e:	7f 4f       	sbci	r23, 0xFF	; 255
   14d40:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d42:	0e 94 32 91 	call	0x12264	; 0x12264 <ds2482owReadByte(unsigned char, unsigned char*)>
   14d46:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:294
          status_tds18s20[w].tempL = e;
   14d48:	22 96       	adiw	r28, 0x02	; 2
   14d4a:	9f ac       	ldd	r9, Y+63	; 0x3f
   14d4c:	22 97       	sbiw	r28, 0x02	; 2
   14d4e:	f8 01       	movw	r30, r16
   14d50:	90 82       	st	Z, r9
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:295
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   14d52:	be 01       	movw	r22, r28
   14d54:	6f 5b       	subi	r22, 0xBF	; 191
   14d56:	7f 4f       	sbci	r23, 0xFF	; 255
   14d58:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d5a:	0e 94 32 91 	call	0x12264	; 0x12264 <ds2482owReadByte(unsigned char, unsigned char*)>
   14d5e:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:296
          status_tds18s20[w].tempH = e;
   14d60:	22 96       	adiw	r28, 0x02	; 2
   14d62:	8f ac       	ldd	r8, Y+63	; 0x3f
   14d64:	22 97       	sbiw	r28, 0x02	; 2
   14d66:	d8 01       	movw	r26, r16
   14d68:	11 96       	adiw	r26, 0x01	; 1
   14d6a:	8c 92       	st	X, r8
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:297
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   14d6c:	be 01       	movw	r22, r28
   14d6e:	6f 5b       	subi	r22, 0xBF	; 191
   14d70:	7f 4f       	sbci	r23, 0xFF	; 255
   14d72:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d74:	0e 94 32 91 	call	0x12264	; 0x12264 <ds2482owReadByte(unsigned char, unsigned char*)>
   14d78:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   14d7a:	be 01       	movw	r22, r28
   14d7c:	6f 5b       	subi	r22, 0xBF	; 191
   14d7e:	7f 4f       	sbci	r23, 0xFF	; 255
   14d80:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d82:	0e 94 32 91 	call	0x12264	; 0x12264 <ds2482owReadByte(unsigned char, unsigned char*)>
   14d86:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   14d88:	be 01       	movw	r22, r28
   14d8a:	6f 5b       	subi	r22, 0xBF	; 191
   14d8c:	7f 4f       	sbci	r23, 0xFF	; 255
   14d8e:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d90:	0e 94 32 91 	call	0x12264	; 0x12264 <ds2482owReadByte(unsigned char, unsigned char*)>
   14d94:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   14d96:	be 01       	movw	r22, r28
   14d98:	6f 5b       	subi	r22, 0xBF	; 191
   14d9a:	7f 4f       	sbci	r23, 0xFF	; 255
   14d9c:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d9e:	0e 94 32 91 	call	0x12264	; 0x12264 <ds2482owReadByte(unsigned char, unsigned char*)>
   14da2:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   14da4:	be 01       	movw	r22, r28
   14da6:	6f 5b       	subi	r22, 0xBF	; 191
   14da8:	7f 4f       	sbci	r23, 0xFF	; 255
   14daa:	8a 85       	ldd	r24, Y+10	; 0x0a
   14dac:	0e 94 32 91 	call	0x12264	; 0x12264 <ds2482owReadByte(unsigned char, unsigned char*)>
   14db0:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:302
          status_tds18s20[w].CR = e; //count remain
   14db2:	22 96       	adiw	r28, 0x02	; 2
   14db4:	8f ad       	ldd	r24, Y+63	; 0x3f
   14db6:	22 97       	sbiw	r28, 0x02	; 2
   14db8:	f8 01       	movw	r30, r16
   14dba:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:303
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   14dbc:	be 01       	movw	r22, r28
   14dbe:	6f 5b       	subi	r22, 0xBF	; 191
   14dc0:	7f 4f       	sbci	r23, 0xFF	; 255
   14dc2:	8a 85       	ldd	r24, Y+10	; 0x0a
   14dc4:	0e 94 32 91 	call	0x12264	; 0x12264 <ds2482owReadByte(unsigned char, unsigned char*)>
   14dc8:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:304
          status_tds18s20[w].CP = e; // count per
   14dca:	22 96       	adiw	r28, 0x02	; 2
   14dcc:	2f ac       	ldd	r2, Y+63	; 0x3f
   14dce:	22 97       	sbiw	r28, 0x02	; 2
   14dd0:	d8 01       	movw	r26, r16
   14dd2:	13 96       	adiw	r26, 0x03	; 3
   14dd4:	2c 92       	st	X, r2
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:305
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   14dd6:	be 01       	movw	r22, r28
   14dd8:	6f 5b       	subi	r22, 0xBF	; 191
   14dda:	7f 4f       	sbci	r23, 0xFF	; 255
   14ddc:	8a 85       	ldd	r24, Y+10	; 0x0a
   14dde:	0e 94 32 91 	call	0x12264	; 0x12264 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:306
          status_tds18s20[w].CRC = e; // crc soucet
   14de2:	22 96       	adiw	r28, 0x02	; 2
   14de4:	9f ad       	ldd	r25, Y+63	; 0x3f
   14de6:	22 97       	sbiw	r28, 0x02	; 2
   14de8:	f8 01       	movw	r30, r16
   14dea:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:305
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   14dec:	83 0d       	add	r24, r3
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   14dee:	09 f0       	breq	.+2      	; 0x14df2 <main+0xc68>
   14df0:	e2 c1       	rjmp	.+964    	; 0x151b6 <main+0x102c>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:310
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   14df2:	62 2d       	mov	r22, r2
   14df4:	70 e0       	ldi	r23, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:309
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   14df6:	28 2d       	mov	r18, r8
   14df8:	30 e0       	ldi	r19, 0x00	; 0
   14dfa:	32 2f       	mov	r19, r18
   14dfc:	22 27       	eor	r18, r18
   14dfe:	33 0f       	add	r19, r19
   14e00:	33 0f       	add	r19, r19
   14e02:	33 0f       	add	r19, r19
   14e04:	f8 e0       	ldi	r31, 0x08	; 8
   14e06:	9f 9e       	mul	r9, r31
   14e08:	c0 01       	movw	r24, r0
   14e0a:	11 24       	eor	r1, r1
   14e0c:	28 2b       	or	r18, r24
   14e0e:	39 2b       	or	r19, r25
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:310
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   14e10:	b3 e0       	ldi	r27, 0x03	; 3
   14e12:	22 0f       	add	r18, r18
   14e14:	33 1f       	adc	r19, r19
   14e16:	ba 95       	dec	r27
   14e18:	e1 f7       	brne	.-8      	; 0x14e12 <main+0xc88>
   14e1a:	20 78       	andi	r18, 0x80	; 128
   14e1c:	8b 85       	ldd	r24, Y+11	; 0x0b
   14e1e:	9c 85       	ldd	r25, Y+12	; 0x0c
   14e20:	40 97       	sbiw	r24, 0x10	; 16
   14e22:	28 0f       	add	r18, r24
   14e24:	39 1f       	adc	r19, r25
   14e26:	cf 57       	subi	r28, 0x7F	; 127
   14e28:	df 4f       	sbci	r29, 0xFF	; 255
   14e2a:	e8 81       	ld	r30, Y
   14e2c:	c1 58       	subi	r28, 0x81	; 129
   14e2e:	d0 40       	sbci	r29, 0x00	; 0
   14e30:	4e e1       	ldi	r20, 0x1E	; 30
   14e32:	4e 9f       	mul	r20, r30
   14e34:	f0 01       	movw	r30, r0
   14e36:	11 24       	eor	r1, r1
   14e38:	e9 5e       	subi	r30, 0xE9	; 233
   14e3a:	f5 4f       	sbci	r31, 0xF5	; 245
   14e3c:	82 81       	ldd	r24, Z+2	; 0x02
   14e3e:	db 01       	movw	r26, r22
   14e40:	a8 1b       	sub	r26, r24
   14e42:	b1 09       	sbc	r27, r1
   14e44:	cd 01       	movw	r24, r26
   14e46:	96 95       	lsr	r25
   14e48:	98 2f       	mov	r25, r24
   14e4a:	88 27       	eor	r24, r24
   14e4c:	97 95       	ror	r25
   14e4e:	87 95       	ror	r24
   14e50:	0e 94 19 b4 	call	0x16832	; 0x16832 <__divmodhi4>
   14e54:	26 0f       	add	r18, r22
   14e56:	37 1f       	adc	r19, r23
   14e58:	f8 01       	movw	r30, r16
   14e5a:	36 83       	std	Z+6, r19	; 0x06
   14e5c:	25 83       	std	Z+5, r18	; 0x05
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].online = True;
   14e5e:	a3 8e       	std	Z+27, r10	; 0x1b
   14e60:	49 e0       	ldi	r20, 0x09	; 9
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:312
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   14e62:	87 89       	ldd	r24, Z+23	; 0x17
   14e64:	90 8d       	ldd	r25, Z+24	; 0x18
   14e66:	92 8f       	std	Z+26, r25	; 0x1a
   14e68:	81 8f       	std	Z+25, r24	; 0x19
   14e6a:	41 50       	subi	r20, 0x01	; 1
   14e6c:	32 97       	sbiw	r30, 0x02	; 2
   14e6e:	41 11       	cpse	r20, r1
   14e70:	f8 cf       	rjmp	.-16     	; 0x14e62 <main+0xcd8>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:313
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   14e72:	d8 01       	movw	r26, r16
   14e74:	18 96       	adiw	r26, 0x08	; 8
   14e76:	3c 93       	st	X, r19
   14e78:	2e 93       	st	-X, r18
   14e7a:	17 97       	sbiw	r26, 0x07	; 7
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].period_now = uptime & 0xff;
   14e7c:	5c 96       	adiw	r26, 0x1c	; 28
   14e7e:	4c 92       	st	X, r4
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   14e80:	b3 94       	inc	r11
   14e82:	02 5e       	subi	r16, 0xE2	; 226
   14e84:	1f 4f       	sbci	r17, 0xFF	; 255
   14e86:	f6 e0       	ldi	r31, 0x06	; 6
   14e88:	bf 12       	cpse	r11, r31
   14e8a:	f9 ce       	rjmp	.-526    	; 0x14c7e <main+0xaf4>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2870
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   14e8c:	10 e0       	ldi	r17, 0x00	; 0
tds_extended_memory_store():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2871
    if (get_tds18s20(id, &tds) == 1)
   14e8e:	be 01       	movw	r22, r28
   14e90:	6f 5f       	subi	r22, 0xFF	; 255
   14e92:	7f 4f       	sbci	r23, 0xFF	; 255
   14e94:	81 2f       	mov	r24, r17
   14e96:	0e 94 5d 55 	call	0xaaba	; 0xaaba <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2870
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   14e9a:	1f 5f       	subi	r17, 0xFF	; 255
   14e9c:	16 30       	cpi	r17, 0x06	; 6
   14e9e:	b9 f7       	brne	.-18     	; 0x14e8e <main+0xd04>
   14ea0:	f6 e6       	ldi	r31, 0x66	; 102
   14ea2:	8f 2e       	mov	r8, r31
   14ea4:	91 2c       	mov	r9, r1
   14ea6:	a1 2c       	mov	r10, r1
   14ea8:	b1 2c       	mov	r11, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2816
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14eaa:	10 e0       	ldi	r17, 0x00	; 0
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2818
  {
    remote_tds_get_active(idx, &active);
   14eac:	be 01       	movw	r22, r28
   14eae:	6f 5f       	subi	r22, 0xFF	; 255
   14eb0:	7f 4f       	sbci	r23, 0xFF	; 255
   14eb2:	81 2f       	mov	r24, r17
   14eb4:	0e 94 e1 5a 	call	0xb5c2	; 0xb5c2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2819
    if (active == 1)
   14eb8:	89 81       	ldd	r24, Y+1	; 0x01
   14eba:	81 30       	cpi	r24, 0x01	; 1
   14ebc:	61 f4       	brne	.+24     	; 0x14ed6 <main+0xd4c>
remote_tds_inc_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2806
uint8_t remote_tds_inc_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
   14ebe:	c5 01       	movw	r24, r10
   14ec0:	b4 01       	movw	r22, r8
   14ec2:	0e 94 dd 89 	call	0x113ba	; 0x113ba <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2807
    if (last < 250)
   14ec6:	8a 3f       	cpi	r24, 0xFA	; 250
   14ec8:	08 f4       	brcc	.+2      	; 0x14ecc <main+0xd42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2808
      last++;
   14eca:	8f 5f       	subi	r24, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), last);
   14ecc:	48 2f       	mov	r20, r24
   14ece:	c5 01       	movw	r24, r10
   14ed0:	b4 01       	movw	r22, r8
   14ed2:	0e 94 a1 89 	call	0x11342	; 0x11342 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2816
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14ed6:	1f 5f       	subi	r17, 0xFF	; 255
   14ed8:	23 e0       	ldi	r18, 0x03	; 3
   14eda:	82 0e       	add	r8, r18
   14edc:	91 1c       	adc	r9, r1
   14ede:	a1 1c       	adc	r10, r1
   14ee0:	b1 1c       	adc	r11, r1
   14ee2:	34 e8       	ldi	r19, 0x84	; 132
   14ee4:	83 16       	cp	r8, r19
   14ee6:	91 04       	cpc	r9, r1
   14ee8:	a1 04       	cpc	r10, r1
   14eea:	b1 04       	cpc	r11, r1
   14eec:	f9 f6       	brne	.-66     	; 0x14eac <main+0xd22>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4711
    tds_extended_memory_store();
    remote_tds_update_last_update();
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) > 500)
   14eee:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   14ef2:	00 91 c5 10 	lds	r16, 0x10C5	; 0x8010c5 <milis_05s>
   14ef6:	10 91 c6 10 	lds	r17, 0x10C6	; 0x8010c6 <milis_05s+0x1>
   14efa:	20 91 c7 10 	lds	r18, 0x10C7	; 0x8010c7 <milis_05s+0x2>
   14efe:	30 91 c8 10 	lds	r19, 0x10C8	; 0x8010c8 <milis_05s+0x3>
   14f02:	60 1b       	sub	r22, r16
   14f04:	71 0b       	sbc	r23, r17
   14f06:	82 0b       	sbc	r24, r18
   14f08:	93 0b       	sbc	r25, r19
   14f0a:	65 3f       	cpi	r22, 0xF5	; 245
   14f0c:	71 40       	sbci	r23, 0x01	; 1
   14f0e:	81 05       	cpc	r24, r1
   14f10:	91 05       	cpc	r25, r1
   14f12:	08 f4       	brcc	.+2      	; 0x14f16 <main+0xd8c>
   14f14:	bc c0       	rjmp	.+376    	; 0x1508e <main+0xf04>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4713
  {
    milis_05s = millis();
   14f16:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   14f1a:	60 93 c5 10 	sts	0x10C5, r22	; 0x8010c5 <milis_05s>
   14f1e:	70 93 c6 10 	sts	0x10C6, r23	; 0x8010c6 <milis_05s+0x1>
   14f22:	80 93 c7 10 	sts	0x10C7, r24	; 0x8010c7 <milis_05s+0x2>
   14f26:	90 93 c8 10 	sts	0x10C8, r25	; 0x8010c8 <milis_05s+0x3>
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
   14f2a:	88 e6       	ldi	r24, 0x68	; 104
   14f2c:	0e 94 2d 84 	call	0x1085a	; 0x1085a <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
}

DateTime RTC_DS1307::now() {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);	
   14f30:	60 e0       	ldi	r22, 0x00	; 0
   14f32:	87 ef       	ldi	r24, 0xF7	; 247
   14f34:	9d e0       	ldi	r25, 0x0D	; 13
   14f36:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
   14f3a:	87 ef       	ldi	r24, 0xF7	; 247
   14f3c:	9d e0       	ldi	r25, 0x0D	; 13
   14f3e:	0e 94 a8 90 	call	0x12150	; 0x12150 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
   14f42:	87 e0       	ldi	r24, 0x07	; 7
   14f44:	90 e0       	ldi	r25, 0x00	; 0
   14f46:	0e 94 66 82 	call	0x104cc	; 0x104cc <TwoWire::requestFrom(int, int) [clone .constprop.129]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   14f4a:	0e 94 6d 7e 	call	0xfcda	; 0xfcda <TwoWire::read() [clone .constprop.130]>
   14f4e:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14f50:	28 2f       	mov	r18, r24
   14f52:	30 e0       	ldi	r19, 0x00	; 0
   14f54:	94 e0       	ldi	r25, 0x04	; 4
   14f56:	35 95       	asr	r19
   14f58:	27 95       	ror	r18
   14f5a:	9a 95       	dec	r25
   14f5c:	e1 f7       	brne	.-8      	; 0x14f56 <main+0xdcc>
   14f5e:	92 2f       	mov	r25, r18
   14f60:	99 0f       	add	r25, r25
   14f62:	99 0f       	add	r25, r25
   14f64:	12 2f       	mov	r17, r18
   14f66:	19 1b       	sub	r17, r25
   14f68:	11 0f       	add	r17, r17
   14f6a:	18 0f       	add	r17, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   14f6c:	0e 94 6d 7e 	call	0xfcda	; 0xfcda <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14f70:	9c 01       	movw	r18, r24
   14f72:	44 e0       	ldi	r20, 0x04	; 4
   14f74:	35 95       	asr	r19
   14f76:	27 95       	ror	r18
   14f78:	4a 95       	dec	r20
   14f7a:	e1 f7       	brne	.-8      	; 0x14f74 <main+0xdea>
   14f7c:	2f 70       	andi	r18, 0x0F	; 15
   14f7e:	33 27       	eor	r19, r19
   14f80:	92 2f       	mov	r25, r18
   14f82:	99 0f       	add	r25, r25
   14f84:	99 0f       	add	r25, r25
   14f86:	02 2f       	mov	r16, r18
   14f88:	09 1b       	sub	r16, r25
   14f8a:	00 0f       	add	r16, r16
   14f8c:	08 0f       	add	r16, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   14f8e:	0e 94 6d 7e 	call	0xfcda	; 0xfcda <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14f92:	9c 01       	movw	r18, r24
   14f94:	54 e0       	ldi	r21, 0x04	; 4
   14f96:	35 95       	asr	r19
   14f98:	27 95       	ror	r18
   14f9a:	5a 95       	dec	r21
   14f9c:	e1 f7       	brne	.-8      	; 0x14f96 <main+0xe0c>
   14f9e:	2f 70       	andi	r18, 0x0F	; 15
   14fa0:	33 27       	eor	r19, r19
   14fa2:	92 2f       	mov	r25, r18
   14fa4:	99 0f       	add	r25, r25
   14fa6:	99 0f       	add	r25, r25
   14fa8:	b2 2e       	mov	r11, r18
   14faa:	b9 1a       	sub	r11, r25
   14fac:	bb 0c       	add	r11, r11
   14fae:	b8 0e       	add	r11, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   14fb0:	0e 94 6d 7e 	call	0xfcda	; 0xfcda <TwoWire::read() [clone .constprop.130]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
   14fb4:	0e 94 6d 7e 	call	0xfcda	; 0xfcda <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14fb8:	9c 01       	movw	r18, r24
   14fba:	64 e0       	ldi	r22, 0x04	; 4
   14fbc:	35 95       	asr	r19
   14fbe:	27 95       	ror	r18
   14fc0:	6a 95       	dec	r22
   14fc2:	e1 f7       	brne	.-8      	; 0x14fbc <main+0xe32>
   14fc4:	2f 70       	andi	r18, 0x0F	; 15
   14fc6:	33 27       	eor	r19, r19
   14fc8:	92 2f       	mov	r25, r18
   14fca:	99 0f       	add	r25, r25
   14fcc:	99 0f       	add	r25, r25
   14fce:	a2 2e       	mov	r10, r18
   14fd0:	a9 1a       	sub	r10, r25
   14fd2:	aa 0c       	add	r10, r10
   14fd4:	a8 0e       	add	r10, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   14fd6:	0e 94 6d 7e 	call	0xfcda	; 0xfcda <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14fda:	9c 01       	movw	r18, r24
   14fdc:	74 e0       	ldi	r23, 0x04	; 4
   14fde:	35 95       	asr	r19
   14fe0:	27 95       	ror	r18
   14fe2:	7a 95       	dec	r23
   14fe4:	e1 f7       	brne	.-8      	; 0x14fde <main+0xe54>
   14fe6:	2f 70       	andi	r18, 0x0F	; 15
   14fe8:	33 27       	eor	r19, r19
   14fea:	92 2f       	mov	r25, r18
   14fec:	99 0f       	add	r25, r25
   14fee:	99 0f       	add	r25, r25
   14ff0:	92 2e       	mov	r9, r18
   14ff2:	99 1a       	sub	r9, r25
   14ff4:	99 0c       	add	r9, r9
   14ff6:	98 0e       	add	r9, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   14ff8:	0e 94 6d 7e 	call	0xfcda	; 0xfcda <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14ffc:	9c 01       	movw	r18, r24
   14ffe:	e4 e0       	ldi	r30, 0x04	; 4
   15000:	35 95       	asr	r19
   15002:	27 95       	ror	r18
   15004:	ea 95       	dec	r30
   15006:	e1 f7       	brne	.-8      	; 0x15000 <main+0xe76>
   15008:	2f 70       	andi	r18, 0x0F	; 15
   1500a:	33 27       	eor	r19, r19
   1500c:	92 2f       	mov	r25, r18
   1500e:	99 0f       	add	r25, r25
   15010:	99 0f       	add	r25, r25
   15012:	29 1b       	sub	r18, r25
   15014:	22 0f       	add	r18, r18
   15016:	82 0f       	add	r24, r18
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   15018:	80 93 48 10 	sts	0x1048, r24	; 0x801048 <now>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4714
    now = rtc.now();
   1501c:	90 92 49 10 	sts	0x1049, r9	; 0x801049 <now+0x1>
   15020:	a0 92 4a 10 	sts	0x104A, r10	; 0x80104a <now+0x2>
   15024:	b0 92 4b 10 	sts	0x104B, r11	; 0x80104b <now+0x3>
   15028:	00 93 4c 10 	sts	0x104C, r16	; 0x80104c <now+0x4>
   1502c:	10 93 4d 10 	sts	0x104D, r17	; 0x80104d <now+0x5>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3962
}
///
/// selftest - pusteni skupiny vlastnich selftestu
void selftest(void)
{
  if (!rtc.isrunning())
   15030:	0e 94 05 91 	call	0x1220a	; 0x1220a <RTC_DS1307::isrunning() [clone .constprop.127]>
   15034:	90 91 cb 0a 	lds	r25, 0x0ACB	; 0x800acb <selftest_data>
   15038:	81 11       	cpse	r24, r1
   1503a:	bf c0       	rjmp	.+382    	; 0x151ba <main+0x1030>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3963
    sbi(selftest_data, SELFTEST_ERR_RTC);
   1503c:	91 60       	ori	r25, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3965
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   1503e:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4716
  if ((millis() - milis_05s) > 500)
  {
    milis_05s = millis();
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;
   15042:	81 e0       	ldi	r24, 0x01	; 1
   15044:	80 93 d3 0a 	sts	0x0AD3, r24	; 0x800ad3 <menu_redraw05s>
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5320
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
   15048:	19 82       	std	Y+1, r1	; 0x01
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5319

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
   1504a:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5321
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1504c:	10 e0       	ldi	r17, 0x00	; 0
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5323
  {
    remote_tds_get_active(idx, &active);
   1504e:	be 01       	movw	r22, r28
   15050:	6f 5f       	subi	r22, 0xFF	; 255
   15052:	7f 4f       	sbci	r23, 0xFF	; 255
   15054:	81 2f       	mov	r24, r17
   15056:	0e 94 e1 5a 	call	0xb5c2	; 0xb5c2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5324
    if (active == 1) cnt++;
   1505a:	89 81       	ldd	r24, Y+1	; 0x01
   1505c:	81 30       	cpi	r24, 0x01	; 1
   1505e:	09 f4       	brne	.+2      	; 0x15062 <main+0xed8>
   15060:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5321
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   15062:	1f 5f       	subi	r17, 0xFF	; 255
   15064:	1a 30       	cpi	r17, 0x0A	; 10
   15066:	99 f7       	brne	.-26     	; 0x1504e <main+0xec4>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4719
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;


    use_rtds = count_use_rtds();
   15068:	00 93 d2 0a 	sts	0x0AD2, r16	; 0x800ad2 <use_rtds>
   1506c:	08 ec       	ldi	r16, 0xC8	; 200
   1506e:	10 e0       	ldi	r17, 0x00	; 0
main():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:19
struct_ds2482 ds2482_address[DS2482_COUNT];

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
   15070:	b1 2c       	mov	r11, r1
count_use_tds():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:21
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if ( EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used) == 1) cnt++;
   15072:	c8 01       	movw	r24, r16
   15074:	0e 94 60 96 	call	0x12cc0	; 0x12cc0 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   15078:	81 30       	cpi	r24, 0x01	; 1
   1507a:	09 f4       	brne	.+2      	; 0x1507e <main+0xef4>
   1507c:	b3 94       	inc	r11
   1507e:	0a 5e       	subi	r16, 0xEA	; 234
   15080:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:20

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   15082:	0c 34       	cpi	r16, 0x4C	; 76
   15084:	51 e0       	ldi	r21, 0x01	; 1
   15086:	15 07       	cpc	r17, r21
   15088:	a1 f7       	brne	.-24     	; 0x15072 <main+0xee8>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4720
    use_tds = count_use_tds();
   1508a:	b0 92 d1 0a 	sts	0x0AD1, r11	; 0x800ad1 <use_tds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4729




  /// kazdych 50ms
  if ((millis() - milis_005s) > 50)
   1508e:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   15092:	00 91 c1 10 	lds	r16, 0x10C1	; 0x8010c1 <milis_005s>
   15096:	10 91 c2 10 	lds	r17, 0x10C2	; 0x8010c2 <milis_005s+0x1>
   1509a:	20 91 c3 10 	lds	r18, 0x10C3	; 0x8010c3 <milis_005s+0x2>
   1509e:	30 91 c4 10 	lds	r19, 0x10C4	; 0x8010c4 <milis_005s+0x3>
   150a2:	60 1b       	sub	r22, r16
   150a4:	71 0b       	sbc	r23, r17
   150a6:	82 0b       	sbc	r24, r18
   150a8:	93 0b       	sbc	r25, r19
   150aa:	63 33       	cpi	r22, 0x33	; 51
   150ac:	71 05       	cpc	r23, r1
   150ae:	81 05       	cpc	r24, r1
   150b0:	91 05       	cpc	r25, r1
   150b2:	90 f1       	brcs	.+100    	; 0x15118 <main+0xf8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4731
  {
    milis_005s = millis();
   150b4:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   150b8:	60 93 c1 10 	sts	0x10C1, r22	; 0x8010c1 <milis_005s>
   150bc:	70 93 c2 10 	sts	0x10C2, r23	; 0x8010c2 <milis_005s+0x1>
   150c0:	80 93 c3 10 	sts	0x10C3, r24	; 0x8010c3 <milis_005s+0x2>
   150c4:	90 93 c4 10 	sts	0x10C4, r25	; 0x8010c4 <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4734

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   150c8:	80 91 d0 0a 	lds	r24, 0x0AD0	; 0x800ad0 <a2d_run_now>
   150cc:	81 30       	cpi	r24, 0x01	; 1
   150ce:	21 f5       	brne	.+72     	; 0x15118 <main+0xf8e>
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   150d0:	30 91 cc 0a 	lds	r19, 0x0ACC	; 0x800acc <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   150d4:	20 91 cd 0a 	lds	r18, 0x0ACD	; 0x800acd <a2d_index>
   150d8:	90 e0       	ldi	r25, 0x00	; 0
   150da:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   150dc:	61 e0       	ldi	r22, 0x01	; 1
   150de:	70 e0       	ldi	r23, 0x00	; 0
   150e0:	ab 01       	movw	r20, r22
   150e2:	08 2e       	mov	r0, r24
   150e4:	01 c0       	rjmp	.+2      	; 0x150e8 <main+0xf5e>
   150e6:	44 0f       	add	r20, r20
   150e8:	0a 94       	dec	r0
   150ea:	ea f7       	brpl	.-6      	; 0x150e6 <main+0xf5c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   150ec:	e3 2f       	mov	r30, r19
   150ee:	e4 23       	and	r30, r20
   150f0:	09 f4       	brne	.+2      	; 0x150f4 <main+0xf6a>
   150f2:	65 c0       	rjmp	.+202    	; 0x151be <main+0x1034>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   150f4:	e2 2f       	mov	r30, r18
   150f6:	e4 23       	and	r30, r20
   150f8:	09 f0       	breq	.+2      	; 0x150fc <main+0xf72>
   150fa:	61 c0       	rjmp	.+194    	; 0x151be <main+0x1034>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   150fc:	24 2b       	or	r18, r20
   150fe:	20 93 cd 0a 	sts	0x0ACD, r18	; 0x800acd <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   15102:	0e 94 41 8e 	call	0x11c82	; 0x11c82 <a2d_start_first(unsigned char)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4737
    {
      a2d_start_process();
      a2d_run_now = 0;
   15106:	10 92 d0 0a 	sts	0x0AD0, r1	; 0x800ad0 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4738
      if (a2d_done() == 0) a2d_run_now = 1;
   1510a:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <a2d_index>
   1510e:	81 11       	cpse	r24, r1
   15110:	03 c0       	rjmp	.+6      	; 0x15118 <main+0xf8e>
   15112:	81 e0       	ldi	r24, 0x01	; 1
   15114:	80 93 d0 0a 	sts	0x0AD0, r24	; 0x800ad0 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4742
    }
  }

  load = millis() - load_now;
   15118:	0e 94 34 8c 	call	0x11868	; 0x11868 <millis>
   1511c:	dc 01       	movw	r26, r24
   1511e:	cb 01       	movw	r24, r22
   15120:	8c 19       	sub	r24, r12
   15122:	9d 09       	sbc	r25, r13
   15124:	ae 09       	sbc	r26, r14
   15126:	bf 09       	sbc	r27, r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4743
  if (load < load_min) load_min = load;
   15128:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <load_min>
   1512c:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <load_min+0x1>
   15130:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <load_min+0x2>
   15134:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <load_min+0x3>
   15138:	80 17       	cp	r24, r16
   1513a:	91 07       	cpc	r25, r17
   1513c:	a2 07       	cpc	r26, r18
   1513e:	b3 07       	cpc	r27, r19
   15140:	40 f4       	brcc	.+16     	; 0x15152 <main+0xfc8>
   15142:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <load_min>
   15146:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <load_min+0x1>
   1514a:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <load_min+0x2>
   1514e:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4744
  if (load > load_max) load_max = load;
   15152:	00 91 bd 10 	lds	r16, 0x10BD	; 0x8010bd <load_max>
   15156:	10 91 be 10 	lds	r17, 0x10BE	; 0x8010be <load_max+0x1>
   1515a:	20 91 bf 10 	lds	r18, 0x10BF	; 0x8010bf <load_max+0x2>
   1515e:	30 91 c0 10 	lds	r19, 0x10C0	; 0x8010c0 <load_max+0x3>
   15162:	08 17       	cp	r16, r24
   15164:	19 07       	cpc	r17, r25
   15166:	2a 07       	cpc	r18, r26
   15168:	3b 07       	cpc	r19, r27
   1516a:	40 f4       	brcc	.+16     	; 0x1517c <main+0xff2>
   1516c:	80 93 bd 10 	sts	0x10BD, r24	; 0x8010bd <load_max>
   15170:	90 93 be 10 	sts	0x10BE, r25	; 0x8010be <load_max+0x1>
   15174:	a0 93 bf 10 	sts	0x10BF, r26	; 0x8010bf <load_max+0x2>
   15178:	b0 93 c0 10 	sts	0x10C0, r27	; 0x8010c0 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4747

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   1517c:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <light_curr>
   15180:	90 91 cf 0a 	lds	r25, 0x0ACF	; 0x800acf <light_curr+0x1>
   15184:	20 91 bb 10 	lds	r18, 0x10BB	; 0x8010bb <light_min>
   15188:	30 91 bc 10 	lds	r19, 0x10BC	; 0x8010bc <light_min+0x1>
   1518c:	82 17       	cp	r24, r18
   1518e:	93 07       	cpc	r25, r19
   15190:	20 f4       	brcc	.+8      	; 0x1519a <main+0x1010>
   15192:	90 93 bc 10 	sts	0x10BC, r25	; 0x8010bc <light_min+0x1>
   15196:	80 93 bb 10 	sts	0x10BB, r24	; 0x8010bb <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4748
  if (light_curr > light_max) light_max = light_curr;
   1519a:	20 91 b9 10 	lds	r18, 0x10B9	; 0x8010b9 <light_max>
   1519e:	30 91 ba 10 	lds	r19, 0x10BA	; 0x8010ba <light_max+0x1>
   151a2:	28 17       	cp	r18, r24
   151a4:	39 07       	cpc	r19, r25
   151a6:	20 f4       	brcc	.+8      	; 0x151b0 <main+0x1026>
   151a8:	90 93 ba 10 	sts	0x10BA, r25	; 0x8010ba <light_max+0x1>
   151ac:	80 93 b9 10 	sts	0x10B9, r24	; 0x8010b9 <light_max>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   151b0:	0e 94 58 7f 	call	0xfeb0	; 0xfeb0 <serialEventRun()>
   151b4:	55 c8       	rjmp	.-3926   	; 0x14260 <main+0xd6>
mereni_hwwire():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:318
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
            status_tds18s20[w].period_now = uptime & 0xff;
          }
          else
          {
            status_tds18s20[w].online = False;
   151b6:	13 8e       	std	Z+27, r1	; 0x1b
   151b8:	63 ce       	rjmp	.-826    	; 0x14e80 <main+0xcf6>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3965
void selftest(void)
{
  if (!rtc.isrunning())
    sbi(selftest_data, SELFTEST_ERR_RTC);
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   151ba:	9e 7f       	andi	r25, 0xFE	; 254
   151bc:	40 cf       	rjmp	.-384    	; 0x1503e <main+0xeb4>
   151be:	01 96       	adiw	r24, 0x01	; 1
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   151c0:	88 30       	cpi	r24, 0x08	; 8
   151c2:	91 05       	cpc	r25, r1
   151c4:	09 f0       	breq	.+2      	; 0x151c8 <main+0x103e>
   151c6:	8c cf       	rjmp	.-232    	; 0x150e0 <main+0xf56>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   151c8:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <a2d_index>
   151cc:	9c cf       	rjmp	.-200    	; 0x15106 <main+0xf7c>

000151ce <dtostrf>:
dtostrf():
   151ce:	ef 92       	push	r14
   151d0:	0f 93       	push	r16
   151d2:	1f 93       	push	r17
   151d4:	cf 93       	push	r28
   151d6:	df 93       	push	r29
   151d8:	e8 01       	movw	r28, r16
   151da:	34 e0       	ldi	r19, 0x04	; 4
   151dc:	47 fd       	sbrc	r20, 7
   151de:	34 e1       	ldi	r19, 0x14	; 20
   151e0:	04 2e       	mov	r0, r20
   151e2:	00 0c       	add	r0, r0
   151e4:	55 0b       	sbc	r21, r21
   151e6:	57 ff       	sbrs	r21, 7
   151e8:	03 c0       	rjmp	.+6      	; 0x151f0 <dtostrf+0x22>
   151ea:	51 95       	neg	r21
   151ec:	41 95       	neg	r20
   151ee:	51 09       	sbc	r21, r1
   151f0:	e3 2e       	mov	r14, r19
   151f2:	02 2f       	mov	r16, r18
   151f4:	24 2f       	mov	r18, r20
   151f6:	ae 01       	movw	r20, r28
   151f8:	0e 94 11 ad 	call	0x15a22	; 0x15a22 <dtoa_prf>
   151fc:	ce 01       	movw	r24, r28
   151fe:	df 91       	pop	r29
   15200:	cf 91       	pop	r28
   15202:	1f 91       	pop	r17
   15204:	0f 91       	pop	r16
   15206:	ef 90       	pop	r14
   15208:	08 95       	ret

0001520a <strtoul>:
strtoul():
   1520a:	3f 92       	push	r3
   1520c:	4f 92       	push	r4
   1520e:	5f 92       	push	r5
   15210:	6f 92       	push	r6
   15212:	7f 92       	push	r7
   15214:	8f 92       	push	r8
   15216:	9f 92       	push	r9
   15218:	af 92       	push	r10
   1521a:	bf 92       	push	r11
   1521c:	cf 92       	push	r12
   1521e:	df 92       	push	r13
   15220:	ef 92       	push	r14
   15222:	ff 92       	push	r15
   15224:	0f 93       	push	r16
   15226:	1f 93       	push	r17
   15228:	cf 93       	push	r28
   1522a:	df 93       	push	r29
   1522c:	5c 01       	movw	r10, r24
   1522e:	6b 01       	movw	r12, r22
   15230:	7a 01       	movw	r14, r20
   15232:	61 15       	cp	r22, r1
   15234:	71 05       	cpc	r23, r1
   15236:	19 f0       	breq	.+6      	; 0x1523e <strtoul+0x34>
   15238:	fb 01       	movw	r30, r22
   1523a:	91 83       	std	Z+1, r25	; 0x01
   1523c:	80 83       	st	Z, r24
   1523e:	e1 14       	cp	r14, r1
   15240:	f1 04       	cpc	r15, r1
   15242:	49 f0       	breq	.+18     	; 0x15256 <strtoul+0x4c>
   15244:	c7 01       	movw	r24, r14
   15246:	02 97       	sbiw	r24, 0x02	; 2
   15248:	83 97       	sbiw	r24, 0x23	; 35
   1524a:	28 f0       	brcs	.+10     	; 0x15256 <strtoul+0x4c>
   1524c:	60 e0       	ldi	r22, 0x00	; 0
   1524e:	70 e0       	ldi	r23, 0x00	; 0
   15250:	cb 01       	movw	r24, r22
   15252:	9b c0       	rjmp	.+310    	; 0x1538a <strtoul+0x180>
   15254:	5e 01       	movw	r10, r28
   15256:	e5 01       	movw	r28, r10
   15258:	21 96       	adiw	r28, 0x01	; 1
   1525a:	f5 01       	movw	r30, r10
   1525c:	10 81       	ld	r17, Z
   1525e:	81 2f       	mov	r24, r17
   15260:	90 e0       	ldi	r25, 0x00	; 0
   15262:	0e 94 2a aa 	call	0x15454	; 0x15454 <isspace>
   15266:	89 2b       	or	r24, r25
   15268:	a9 f7       	brne	.-22     	; 0x15254 <strtoul+0x4a>
   1526a:	1d 32       	cpi	r17, 0x2D	; 45
   1526c:	09 f0       	breq	.+2      	; 0x15270 <strtoul+0x66>
   1526e:	5c c0       	rjmp	.+184    	; 0x15328 <strtoul+0x11e>
   15270:	21 96       	adiw	r28, 0x01	; 1
   15272:	f5 01       	movw	r30, r10
   15274:	11 81       	ldd	r17, Z+1	; 0x01
   15276:	01 e0       	ldi	r16, 0x01	; 1
   15278:	e1 14       	cp	r14, r1
   1527a:	f1 04       	cpc	r15, r1
   1527c:	09 f4       	brne	.+2      	; 0x15280 <strtoul+0x76>
   1527e:	bb c0       	rjmp	.+374    	; 0x153f6 <strtoul+0x1ec>
   15280:	f0 e1       	ldi	r31, 0x10	; 16
   15282:	ef 16       	cp	r14, r31
   15284:	f1 04       	cpc	r15, r1
   15286:	09 f0       	breq	.+2      	; 0x1528a <strtoul+0x80>
   15288:	9b c0       	rjmp	.+310    	; 0x153c0 <strtoul+0x1b6>
   1528a:	10 33       	cpi	r17, 0x30	; 48
   1528c:	41 f4       	brne	.+16     	; 0x1529e <strtoul+0x94>
   1528e:	88 81       	ld	r24, Y
   15290:	8f 7d       	andi	r24, 0xDF	; 223
   15292:	88 35       	cpi	r24, 0x58	; 88
   15294:	09 f0       	breq	.+2      	; 0x15298 <strtoul+0x8e>
   15296:	8f c0       	rjmp	.+286    	; 0x153b6 <strtoul+0x1ac>
   15298:	19 81       	ldd	r17, Y+1	; 0x01
   1529a:	22 96       	adiw	r28, 0x02	; 2
   1529c:	02 60       	ori	r16, 0x02	; 2
   1529e:	e0 e1       	ldi	r30, 0x10	; 16
   152a0:	ee 2e       	mov	r14, r30
   152a2:	f1 2c       	mov	r15, r1
   152a4:	88 24       	eor	r8, r8
   152a6:	8a 94       	dec	r8
   152a8:	98 2c       	mov	r9, r8
   152aa:	a8 2c       	mov	r10, r8
   152ac:	ff e0       	ldi	r31, 0x0F	; 15
   152ae:	bf 2e       	mov	r11, r31
   152b0:	20 e0       	ldi	r18, 0x00	; 0
   152b2:	60 e0       	ldi	r22, 0x00	; 0
   152b4:	70 e0       	ldi	r23, 0x00	; 0
   152b6:	cb 01       	movw	r24, r22
   152b8:	27 01       	movw	r4, r14
   152ba:	0f 2c       	mov	r0, r15
   152bc:	00 0c       	add	r0, r0
   152be:	66 08       	sbc	r6, r6
   152c0:	77 08       	sbc	r7, r7
   152c2:	fe 01       	movw	r30, r28
   152c4:	50 ed       	ldi	r21, 0xD0	; 208
   152c6:	35 2e       	mov	r3, r21
   152c8:	31 0e       	add	r3, r17
   152ca:	39 e0       	ldi	r19, 0x09	; 9
   152cc:	33 15       	cp	r19, r3
   152ce:	68 f4       	brcc	.+26     	; 0x152ea <strtoul+0xe0>
   152d0:	3f eb       	ldi	r19, 0xBF	; 191
   152d2:	31 0f       	add	r19, r17
   152d4:	49 ec       	ldi	r20, 0xC9	; 201
   152d6:	34 2e       	mov	r3, r20
   152d8:	3a 31       	cpi	r19, 0x1A	; 26
   152da:	30 f0       	brcs	.+12     	; 0x152e8 <strtoul+0xde>
   152dc:	3f e9       	ldi	r19, 0x9F	; 159
   152de:	31 0f       	add	r19, r17
   152e0:	3a 31       	cpi	r19, 0x1A	; 26
   152e2:	b0 f5       	brcc	.+108    	; 0x15350 <strtoul+0x146>
   152e4:	39 ea       	ldi	r19, 0xA9	; 169
   152e6:	33 2e       	mov	r3, r19
   152e8:	31 0e       	add	r3, r17
   152ea:	3e 14       	cp	r3, r14
   152ec:	1f 04       	cpc	r1, r15
   152ee:	84 f5       	brge	.+96     	; 0x15350 <strtoul+0x146>
   152f0:	2f 3f       	cpi	r18, 0xFF	; 255
   152f2:	b9 f0       	breq	.+46     	; 0x15322 <strtoul+0x118>
   152f4:	86 16       	cp	r8, r22
   152f6:	97 06       	cpc	r9, r23
   152f8:	a8 06       	cpc	r10, r24
   152fa:	b9 06       	cpc	r11, r25
   152fc:	38 f1       	brcs	.+78     	; 0x1534c <strtoul+0x142>
   152fe:	a3 01       	movw	r20, r6
   15300:	92 01       	movw	r18, r4
   15302:	0e 94 f5 b3 	call	0x167ea	; 0x167ea <__mulsi3>
   15306:	23 2d       	mov	r18, r3
   15308:	30 e0       	ldi	r19, 0x00	; 0
   1530a:	50 e0       	ldi	r21, 0x00	; 0
   1530c:	40 e0       	ldi	r20, 0x00	; 0
   1530e:	62 0f       	add	r22, r18
   15310:	73 1f       	adc	r23, r19
   15312:	84 1f       	adc	r24, r20
   15314:	95 1f       	adc	r25, r21
   15316:	62 17       	cp	r22, r18
   15318:	73 07       	cpc	r23, r19
   1531a:	84 07       	cpc	r24, r20
   1531c:	95 07       	cpc	r25, r21
   1531e:	b0 f0       	brcs	.+44     	; 0x1534c <strtoul+0x142>
   15320:	21 e0       	ldi	r18, 0x01	; 1
   15322:	21 96       	adiw	r28, 0x01	; 1
   15324:	10 81       	ld	r17, Z
   15326:	cd cf       	rjmp	.-102    	; 0x152c2 <strtoul+0xb8>
   15328:	1b 32       	cpi	r17, 0x2B	; 43
   1532a:	21 f4       	brne	.+8      	; 0x15334 <strtoul+0x12a>
   1532c:	e5 01       	movw	r28, r10
   1532e:	22 96       	adiw	r28, 0x02	; 2
   15330:	f5 01       	movw	r30, r10
   15332:	11 81       	ldd	r17, Z+1	; 0x01
   15334:	00 e0       	ldi	r16, 0x00	; 0
   15336:	a0 cf       	rjmp	.-192    	; 0x15278 <strtoul+0x6e>
   15338:	78 e0       	ldi	r23, 0x08	; 8
   1533a:	e7 2e       	mov	r14, r23
   1533c:	f1 2c       	mov	r15, r1
   1533e:	88 24       	eor	r8, r8
   15340:	8a 94       	dec	r8
   15342:	98 2c       	mov	r9, r8
   15344:	a8 2c       	mov	r10, r8
   15346:	6f e1       	ldi	r22, 0x1F	; 31
   15348:	b6 2e       	mov	r11, r22
   1534a:	b2 cf       	rjmp	.-156    	; 0x152b0 <strtoul+0xa6>
   1534c:	2f ef       	ldi	r18, 0xFF	; 255
   1534e:	e9 cf       	rjmp	.-46     	; 0x15322 <strtoul+0x118>
   15350:	c1 14       	cp	r12, r1
   15352:	d1 04       	cpc	r13, r1
   15354:	31 f0       	breq	.+12     	; 0x15362 <strtoul+0x158>
   15356:	22 23       	and	r18, r18
   15358:	51 f1       	breq	.+84     	; 0x153ae <strtoul+0x1a4>
   1535a:	21 97       	sbiw	r28, 0x01	; 1
   1535c:	f6 01       	movw	r30, r12
   1535e:	d1 83       	std	Z+1, r29	; 0x01
   15360:	c0 83       	st	Z, r28
   15362:	00 ff       	sbrs	r16, 0
   15364:	07 c0       	rjmp	.+14     	; 0x15374 <strtoul+0x16a>
   15366:	90 95       	com	r25
   15368:	80 95       	com	r24
   1536a:	70 95       	com	r23
   1536c:	61 95       	neg	r22
   1536e:	7f 4f       	sbci	r23, 0xFF	; 255
   15370:	8f 4f       	sbci	r24, 0xFF	; 255
   15372:	9f 4f       	sbci	r25, 0xFF	; 255
   15374:	2f 3f       	cpi	r18, 0xFF	; 255
   15376:	49 f4       	brne	.+18     	; 0x1538a <strtoul+0x180>
   15378:	82 e2       	ldi	r24, 0x22	; 34
   1537a:	90 e0       	ldi	r25, 0x00	; 0
   1537c:	90 93 3a 13 	sts	0x133A, r25	; 0x80133a <errno+0x1>
   15380:	80 93 39 13 	sts	0x1339, r24	; 0x801339 <errno>
   15384:	6f ef       	ldi	r22, 0xFF	; 255
   15386:	7f ef       	ldi	r23, 0xFF	; 255
   15388:	cb 01       	movw	r24, r22
   1538a:	df 91       	pop	r29
   1538c:	cf 91       	pop	r28
   1538e:	1f 91       	pop	r17
   15390:	0f 91       	pop	r16
   15392:	ff 90       	pop	r15
   15394:	ef 90       	pop	r14
   15396:	df 90       	pop	r13
   15398:	cf 90       	pop	r12
   1539a:	bf 90       	pop	r11
   1539c:	af 90       	pop	r10
   1539e:	9f 90       	pop	r9
   153a0:	8f 90       	pop	r8
   153a2:	7f 90       	pop	r7
   153a4:	6f 90       	pop	r6
   153a6:	5f 90       	pop	r5
   153a8:	4f 90       	pop	r4
   153aa:	3f 90       	pop	r3
   153ac:	08 95       	ret
   153ae:	01 ff       	sbrs	r16, 1
   153b0:	d8 cf       	rjmp	.-80     	; 0x15362 <strtoul+0x158>
   153b2:	22 97       	sbiw	r28, 0x02	; 2
   153b4:	d3 cf       	rjmp	.-90     	; 0x1535c <strtoul+0x152>
   153b6:	10 e3       	ldi	r17, 0x30	; 48
   153b8:	e1 14       	cp	r14, r1
   153ba:	f1 04       	cpc	r15, r1
   153bc:	09 f4       	brne	.+2      	; 0x153c0 <strtoul+0x1b6>
   153be:	bc cf       	rjmp	.-136    	; 0x15338 <strtoul+0x12e>
   153c0:	3a e0       	ldi	r19, 0x0A	; 10
   153c2:	e3 16       	cp	r14, r19
   153c4:	f1 04       	cpc	r15, r1
   153c6:	e9 f0       	breq	.+58     	; 0x15402 <strtoul+0x1f8>
   153c8:	80 e1       	ldi	r24, 0x10	; 16
   153ca:	e8 16       	cp	r14, r24
   153cc:	f1 04       	cpc	r15, r1
   153ce:	09 f4       	brne	.+2      	; 0x153d2 <strtoul+0x1c8>
   153d0:	66 cf       	rjmp	.-308    	; 0x1529e <strtoul+0x94>
   153d2:	e8 e0       	ldi	r30, 0x08	; 8
   153d4:	ee 16       	cp	r14, r30
   153d6:	f1 04       	cpc	r15, r1
   153d8:	09 f4       	brne	.+2      	; 0x153dc <strtoul+0x1d2>
   153da:	b1 cf       	rjmp	.-158    	; 0x1533e <strtoul+0x134>
   153dc:	6f ef       	ldi	r22, 0xFF	; 255
   153de:	7f ef       	ldi	r23, 0xFF	; 255
   153e0:	cb 01       	movw	r24, r22
   153e2:	97 01       	movw	r18, r14
   153e4:	0f 2c       	mov	r0, r15
   153e6:	00 0c       	add	r0, r0
   153e8:	44 0b       	sbc	r20, r20
   153ea:	55 0b       	sbc	r21, r21
   153ec:	0e 94 2d b4 	call	0x1685a	; 0x1685a <__udivmodsi4>
   153f0:	49 01       	movw	r8, r18
   153f2:	5a 01       	movw	r10, r20
   153f4:	5d cf       	rjmp	.-326    	; 0x152b0 <strtoul+0xa6>
   153f6:	10 33       	cpi	r17, 0x30	; 48
   153f8:	09 f4       	brne	.+2      	; 0x153fc <strtoul+0x1f2>
   153fa:	49 cf       	rjmp	.-366    	; 0x1528e <strtoul+0x84>
   153fc:	9a e0       	ldi	r25, 0x0A	; 10
   153fe:	e9 2e       	mov	r14, r25
   15400:	f1 2c       	mov	r15, r1
   15402:	89 e9       	ldi	r24, 0x99	; 153
   15404:	88 2e       	mov	r8, r24
   15406:	98 2c       	mov	r9, r8
   15408:	a8 2c       	mov	r10, r8
   1540a:	89 e1       	ldi	r24, 0x19	; 25
   1540c:	b8 2e       	mov	r11, r24
   1540e:	50 cf       	rjmp	.-352    	; 0x152b0 <strtoul+0xa6>

00015410 <atof>:
atof():
   15410:	66 27       	eor	r22, r22
   15412:	77 27       	eor	r23, r23
   15414:	0c 94 af af 	jmp	0x15f5e	; 0x15f5e <strtod>

00015418 <atoi>:
atoi():
   15418:	fc 01       	movw	r30, r24
   1541a:	88 27       	eor	r24, r24
   1541c:	99 27       	eor	r25, r25
   1541e:	e8 94       	clt
   15420:	21 91       	ld	r18, Z+
   15422:	20 32       	cpi	r18, 0x20	; 32
   15424:	e9 f3       	breq	.-6      	; 0x15420 <atoi+0x8>
   15426:	29 30       	cpi	r18, 0x09	; 9
   15428:	10 f0       	brcs	.+4      	; 0x1542e <atoi+0x16>
   1542a:	2e 30       	cpi	r18, 0x0E	; 14
   1542c:	c8 f3       	brcs	.-14     	; 0x15420 <atoi+0x8>
   1542e:	2b 32       	cpi	r18, 0x2B	; 43
   15430:	41 f0       	breq	.+16     	; 0x15442 <atoi+0x2a>
   15432:	2d 32       	cpi	r18, 0x2D	; 45
   15434:	39 f4       	brne	.+14     	; 0x15444 <atoi+0x2c>
   15436:	68 94       	set
   15438:	04 c0       	rjmp	.+8      	; 0x15442 <atoi+0x2a>
   1543a:	0e 94 86 aa 	call	0x1550c	; 0x1550c <__mulhi_const_10>
   1543e:	82 0f       	add	r24, r18
   15440:	91 1d       	adc	r25, r1
   15442:	21 91       	ld	r18, Z+
   15444:	20 53       	subi	r18, 0x30	; 48
   15446:	2a 30       	cpi	r18, 0x0A	; 10
   15448:	c0 f3       	brcs	.-16     	; 0x1543a <atoi+0x22>
   1544a:	1e f4       	brtc	.+6      	; 0x15452 <atoi+0x3a>
   1544c:	90 95       	com	r25
   1544e:	81 95       	neg	r24
   15450:	9f 4f       	sbci	r25, 0xFF	; 255
   15452:	08 95       	ret

00015454 <isspace>:
isspace():
   15454:	91 11       	cpse	r25, r1
   15456:	0c 94 e5 b1 	jmp	0x163ca	; 0x163ca <__ctype_isfalse>
   1545a:	80 32       	cpi	r24, 0x20	; 32
   1545c:	19 f0       	breq	.+6      	; 0x15464 <isspace+0x10>
   1545e:	89 50       	subi	r24, 0x09	; 9
   15460:	85 50       	subi	r24, 0x05	; 5
   15462:	c8 f7       	brcc	.-14     	; 0x15456 <isspace+0x2>
   15464:	08 95       	ret

00015466 <strcat_P>:
strcat_P():
   15466:	fb 01       	movw	r30, r22
   15468:	dc 01       	movw	r26, r24
   1546a:	0d 90       	ld	r0, X+
   1546c:	00 20       	and	r0, r0
   1546e:	e9 f7       	brne	.-6      	; 0x1546a <strcat_P+0x4>
   15470:	11 97       	sbiw	r26, 0x01	; 1
   15472:	05 90       	lpm	r0, Z+
   15474:	0d 92       	st	X+, r0
   15476:	00 20       	and	r0, r0
   15478:	e1 f7       	brne	.-8      	; 0x15472 <strcat_P+0xc>
   1547a:	08 95       	ret

0001547c <strcpy_P>:
strcpy_P():
   1547c:	fb 01       	movw	r30, r22
   1547e:	dc 01       	movw	r26, r24
   15480:	05 90       	lpm	r0, Z+
   15482:	0d 92       	st	X+, r0
   15484:	00 20       	and	r0, r0
   15486:	e1 f7       	brne	.-8      	; 0x15480 <strcpy_P+0x4>
   15488:	08 95       	ret

0001548a <strtok>:
strtok():
   1548a:	41 e2       	ldi	r20, 0x21	; 33
   1548c:	53 e1       	ldi	r21, 0x13	; 19
   1548e:	0c 94 49 aa 	jmp	0x15492	; 0x15492 <strtok_r>

00015492 <strtok_r>:
strtok_r():
   15492:	fa 01       	movw	r30, r20
   15494:	a1 91       	ld	r26, Z+
   15496:	b0 81       	ld	r27, Z
   15498:	00 97       	sbiw	r24, 0x00	; 0
   1549a:	19 f4       	brne	.+6      	; 0x154a2 <strtok_r+0x10>
   1549c:	10 97       	sbiw	r26, 0x00	; 0
   1549e:	e1 f0       	breq	.+56     	; 0x154d8 <strtok_r+0x46>
   154a0:	cd 01       	movw	r24, r26
   154a2:	dc 01       	movw	r26, r24
   154a4:	cd 01       	movw	r24, r26
   154a6:	0d 90       	ld	r0, X+
   154a8:	00 20       	and	r0, r0
   154aa:	11 f4       	brne	.+4      	; 0x154b0 <strtok_r+0x1e>
   154ac:	c0 01       	movw	r24, r0
   154ae:	13 c0       	rjmp	.+38     	; 0x154d6 <strtok_r+0x44>
   154b0:	fb 01       	movw	r30, r22
   154b2:	21 91       	ld	r18, Z+
   154b4:	22 23       	and	r18, r18
   154b6:	19 f0       	breq	.+6      	; 0x154be <strtok_r+0x2c>
   154b8:	20 15       	cp	r18, r0
   154ba:	d9 f7       	brne	.-10     	; 0x154b2 <strtok_r+0x20>
   154bc:	f3 cf       	rjmp	.-26     	; 0x154a4 <strtok_r+0x12>
   154be:	fb 01       	movw	r30, r22
   154c0:	21 91       	ld	r18, Z+
   154c2:	20 15       	cp	r18, r0
   154c4:	19 f4       	brne	.+6      	; 0x154cc <strtok_r+0x3a>
   154c6:	1e 92       	st	-X, r1
   154c8:	11 96       	adiw	r26, 0x01	; 1
   154ca:	06 c0       	rjmp	.+12     	; 0x154d8 <strtok_r+0x46>
   154cc:	22 23       	and	r18, r18
   154ce:	c1 f7       	brne	.-16     	; 0x154c0 <strtok_r+0x2e>
   154d0:	0d 90       	ld	r0, X+
   154d2:	00 20       	and	r0, r0
   154d4:	a1 f7       	brne	.-24     	; 0x154be <strtok_r+0x2c>
   154d6:	d0 01       	movw	r26, r0
   154d8:	fa 01       	movw	r30, r20
   154da:	a1 93       	st	Z+, r26
   154dc:	b0 83       	st	Z, r27
   154de:	08 95       	ret

000154e0 <itoa>:
itoa():
   154e0:	45 32       	cpi	r20, 0x25	; 37
   154e2:	51 05       	cpc	r21, r1
   154e4:	20 f4       	brcc	.+8      	; 0x154ee <itoa+0xe>
   154e6:	42 30       	cpi	r20, 0x02	; 2
   154e8:	10 f0       	brcs	.+4      	; 0x154ee <itoa+0xe>
   154ea:	0c 94 7b aa 	jmp	0x154f6	; 0x154f6 <__itoa_ncheck>
   154ee:	fb 01       	movw	r30, r22
   154f0:	10 82       	st	Z, r1
   154f2:	cb 01       	movw	r24, r22
   154f4:	08 95       	ret

000154f6 <__itoa_ncheck>:
__itoa_ncheck():
   154f6:	bb 27       	eor	r27, r27
   154f8:	4a 30       	cpi	r20, 0x0A	; 10
   154fa:	31 f4       	brne	.+12     	; 0x15508 <__itoa_ncheck+0x12>
   154fc:	99 23       	and	r25, r25
   154fe:	22 f4       	brpl	.+8      	; 0x15508 <__itoa_ncheck+0x12>
   15500:	bd e2       	ldi	r27, 0x2D	; 45
   15502:	90 95       	com	r25
   15504:	81 95       	neg	r24
   15506:	9f 4f       	sbci	r25, 0xFF	; 255
   15508:	0c 94 8f aa 	jmp	0x1551e	; 0x1551e <__utoa_common>

0001550c <__mulhi_const_10>:
__mulhi_const_10():
   1550c:	7a e0       	ldi	r23, 0x0A	; 10
   1550e:	97 9f       	mul	r25, r23
   15510:	90 2d       	mov	r25, r0
   15512:	87 9f       	mul	r24, r23
   15514:	80 2d       	mov	r24, r0
   15516:	91 0d       	add	r25, r1
   15518:	11 24       	eor	r1, r1
   1551a:	08 95       	ret

0001551c <__utoa_ncheck>:
__utoa_ncheck():
   1551c:	bb 27       	eor	r27, r27

0001551e <__utoa_common>:
   1551e:	fb 01       	movw	r30, r22
   15520:	55 27       	eor	r21, r21
   15522:	aa 27       	eor	r26, r26
   15524:	88 0f       	add	r24, r24
   15526:	99 1f       	adc	r25, r25
   15528:	aa 1f       	adc	r26, r26
   1552a:	a4 17       	cp	r26, r20
   1552c:	10 f0       	brcs	.+4      	; 0x15532 <__utoa_common+0x14>
   1552e:	a4 1b       	sub	r26, r20
   15530:	83 95       	inc	r24
   15532:	50 51       	subi	r21, 0x10	; 16
   15534:	b9 f7       	brne	.-18     	; 0x15524 <__utoa_common+0x6>
   15536:	a0 5d       	subi	r26, 0xD0	; 208
   15538:	aa 33       	cpi	r26, 0x3A	; 58
   1553a:	08 f0       	brcs	.+2      	; 0x1553e <__utoa_common+0x20>
   1553c:	a9 5d       	subi	r26, 0xD9	; 217
   1553e:	a1 93       	st	Z+, r26
   15540:	00 97       	sbiw	r24, 0x00	; 0
   15542:	79 f7       	brne	.-34     	; 0x15522 <__utoa_common+0x4>
   15544:	b1 11       	cpse	r27, r1
   15546:	b1 93       	st	Z+, r27
   15548:	11 92       	st	Z+, r1
   1554a:	cb 01       	movw	r24, r22
   1554c:	0c 94 1d b2 	jmp	0x1643a	; 0x1643a <strrev>

00015550 <fdevopen>:
fdevopen():
   15550:	0f 93       	push	r16
   15552:	1f 93       	push	r17
   15554:	cf 93       	push	r28
   15556:	df 93       	push	r29
   15558:	00 97       	sbiw	r24, 0x00	; 0
   1555a:	59 f4       	brne	.+22     	; 0x15572 <fdevopen+0x22>
   1555c:	61 15       	cp	r22, r1
   1555e:	71 05       	cpc	r23, r1
   15560:	41 f4       	brne	.+16     	; 0x15572 <fdevopen+0x22>
   15562:	f0 e0       	ldi	r31, 0x00	; 0
   15564:	e0 e0       	ldi	r30, 0x00	; 0
   15566:	cf 01       	movw	r24, r30
   15568:	df 91       	pop	r29
   1556a:	cf 91       	pop	r28
   1556c:	1f 91       	pop	r17
   1556e:	0f 91       	pop	r16
   15570:	08 95       	ret
   15572:	8b 01       	movw	r16, r22
   15574:	ec 01       	movw	r28, r24
   15576:	6e e0       	ldi	r22, 0x0E	; 14
   15578:	70 e0       	ldi	r23, 0x00	; 0
   1557a:	81 e0       	ldi	r24, 0x01	; 1
   1557c:	90 e0       	ldi	r25, 0x00	; 0
   1557e:	0e 94 f5 ac 	call	0x159ea	; 0x159ea <calloc>
   15582:	fc 01       	movw	r30, r24
   15584:	89 2b       	or	r24, r25
   15586:	69 f3       	breq	.-38     	; 0x15562 <fdevopen+0x12>
   15588:	80 e8       	ldi	r24, 0x80	; 128
   1558a:	83 83       	std	Z+3, r24	; 0x03
   1558c:	01 15       	cp	r16, r1
   1558e:	11 05       	cpc	r17, r1
   15590:	71 f0       	breq	.+28     	; 0x155ae <fdevopen+0x5e>
   15592:	13 87       	std	Z+11, r17	; 0x0b
   15594:	02 87       	std	Z+10, r16	; 0x0a
   15596:	81 e8       	ldi	r24, 0x81	; 129
   15598:	83 83       	std	Z+3, r24	; 0x03
   1559a:	80 91 23 13 	lds	r24, 0x1323	; 0x801323 <__iob>
   1559e:	90 91 24 13 	lds	r25, 0x1324	; 0x801324 <__iob+0x1>
   155a2:	89 2b       	or	r24, r25
   155a4:	21 f4       	brne	.+8      	; 0x155ae <fdevopen+0x5e>
   155a6:	f0 93 24 13 	sts	0x1324, r31	; 0x801324 <__iob+0x1>
   155aa:	e0 93 23 13 	sts	0x1323, r30	; 0x801323 <__iob>
   155ae:	20 97       	sbiw	r28, 0x00	; 0
   155b0:	d1 f2       	breq	.-76     	; 0x15566 <fdevopen+0x16>
   155b2:	d1 87       	std	Z+9, r29	; 0x09
   155b4:	c0 87       	std	Z+8, r28	; 0x08
   155b6:	83 81       	ldd	r24, Z+3	; 0x03
   155b8:	82 60       	ori	r24, 0x02	; 2
   155ba:	83 83       	std	Z+3, r24	; 0x03
   155bc:	80 91 25 13 	lds	r24, 0x1325	; 0x801325 <__iob+0x2>
   155c0:	90 91 26 13 	lds	r25, 0x1326	; 0x801326 <__iob+0x3>
   155c4:	89 2b       	or	r24, r25
   155c6:	79 f6       	brne	.-98     	; 0x15566 <fdevopen+0x16>
   155c8:	f0 93 26 13 	sts	0x1326, r31	; 0x801326 <__iob+0x3>
   155cc:	e0 93 25 13 	sts	0x1325, r30	; 0x801325 <__iob+0x2>
   155d0:	80 91 27 13 	lds	r24, 0x1327	; 0x801327 <__iob+0x4>
   155d4:	90 91 28 13 	lds	r25, 0x1328	; 0x801328 <__iob+0x5>
   155d8:	89 2b       	or	r24, r25
   155da:	29 f6       	brne	.-118    	; 0x15566 <fdevopen+0x16>
   155dc:	f0 93 28 13 	sts	0x1328, r31	; 0x801328 <__iob+0x5>
   155e0:	e0 93 27 13 	sts	0x1327, r30	; 0x801327 <__iob+0x4>
   155e4:	c0 cf       	rjmp	.-128    	; 0x15566 <fdevopen+0x16>

000155e6 <vfprintf>:
vfprintf():
   155e6:	2f 92       	push	r2
   155e8:	3f 92       	push	r3
   155ea:	4f 92       	push	r4
   155ec:	5f 92       	push	r5
   155ee:	6f 92       	push	r6
   155f0:	7f 92       	push	r7
   155f2:	8f 92       	push	r8
   155f4:	9f 92       	push	r9
   155f6:	af 92       	push	r10
   155f8:	bf 92       	push	r11
   155fa:	cf 92       	push	r12
   155fc:	df 92       	push	r13
   155fe:	ef 92       	push	r14
   15600:	ff 92       	push	r15
   15602:	0f 93       	push	r16
   15604:	1f 93       	push	r17
   15606:	cf 93       	push	r28
   15608:	df 93       	push	r29
   1560a:	00 d0       	rcall	.+0      	; 0x1560c <vfprintf+0x26>
   1560c:	00 d0       	rcall	.+0      	; 0x1560e <vfprintf+0x28>
   1560e:	00 d0       	rcall	.+0      	; 0x15610 <vfprintf+0x2a>
   15610:	1f 92       	push	r1
   15612:	1f 92       	push	r1
   15614:	cd b7       	in	r28, 0x3d	; 61
   15616:	de b7       	in	r29, 0x3e	; 62
   15618:	7c 01       	movw	r14, r24
   1561a:	3b 01       	movw	r6, r22
   1561c:	8a 01       	movw	r16, r20
   1561e:	fc 01       	movw	r30, r24
   15620:	17 82       	std	Z+7, r1	; 0x07
   15622:	16 82       	std	Z+6, r1	; 0x06
   15624:	83 81       	ldd	r24, Z+3	; 0x03
   15626:	81 ff       	sbrs	r24, 1
   15628:	dd c1       	rjmp	.+954    	; 0x159e4 <vfprintf+0x3fe>
   1562a:	ce 01       	movw	r24, r28
   1562c:	01 96       	adiw	r24, 0x01	; 1
   1562e:	5c 01       	movw	r10, r24
   15630:	f7 01       	movw	r30, r14
   15632:	93 81       	ldd	r25, Z+3	; 0x03
   15634:	f3 01       	movw	r30, r6
   15636:	93 fd       	sbrc	r25, 3
   15638:	85 91       	lpm	r24, Z+
   1563a:	93 ff       	sbrs	r25, 3
   1563c:	81 91       	ld	r24, Z+
   1563e:	3f 01       	movw	r6, r30
   15640:	88 23       	and	r24, r24
   15642:	09 f4       	brne	.+2      	; 0x15646 <vfprintf+0x60>
   15644:	53 c1       	rjmp	.+678    	; 0x158ec <vfprintf+0x306>
   15646:	85 32       	cpi	r24, 0x25	; 37
   15648:	39 f4       	brne	.+14     	; 0x15658 <vfprintf+0x72>
   1564a:	93 fd       	sbrc	r25, 3
   1564c:	85 91       	lpm	r24, Z+
   1564e:	93 ff       	sbrs	r25, 3
   15650:	81 91       	ld	r24, Z+
   15652:	3f 01       	movw	r6, r30
   15654:	85 32       	cpi	r24, 0x25	; 37
   15656:	29 f4       	brne	.+10     	; 0x15662 <vfprintf+0x7c>
   15658:	b7 01       	movw	r22, r14
   1565a:	90 e0       	ldi	r25, 0x00	; 0
   1565c:	0e 94 2d b2 	call	0x1645a	; 0x1645a <fputc>
   15660:	e7 cf       	rjmp	.-50     	; 0x15630 <vfprintf+0x4a>
   15662:	91 2c       	mov	r9, r1
   15664:	21 2c       	mov	r2, r1
   15666:	31 2c       	mov	r3, r1
   15668:	ff e1       	ldi	r31, 0x1F	; 31
   1566a:	f3 15       	cp	r31, r3
   1566c:	38 f0       	brcs	.+14     	; 0x1567c <vfprintf+0x96>
   1566e:	8b 32       	cpi	r24, 0x2B	; 43
   15670:	11 f1       	breq	.+68     	; 0x156b6 <vfprintf+0xd0>
   15672:	90 f4       	brcc	.+36     	; 0x15698 <vfprintf+0xb2>
   15674:	80 32       	cpi	r24, 0x20	; 32
   15676:	09 f1       	breq	.+66     	; 0x156ba <vfprintf+0xd4>
   15678:	83 32       	cpi	r24, 0x23	; 35
   1567a:	29 f1       	breq	.+74     	; 0x156c6 <vfprintf+0xe0>
   1567c:	37 fc       	sbrc	r3, 7
   1567e:	3c c0       	rjmp	.+120    	; 0x156f8 <vfprintf+0x112>
   15680:	20 ed       	ldi	r18, 0xD0	; 208
   15682:	28 0f       	add	r18, r24
   15684:	2a 30       	cpi	r18, 0x0A	; 10
   15686:	50 f5       	brcc	.+84     	; 0x156dc <vfprintf+0xf6>
   15688:	36 fe       	sbrs	r3, 6
   1568a:	20 c0       	rjmp	.+64     	; 0x156cc <vfprintf+0xe6>
   1568c:	8a e0       	ldi	r24, 0x0A	; 10
   1568e:	98 9e       	mul	r9, r24
   15690:	20 0d       	add	r18, r0
   15692:	11 24       	eor	r1, r1
   15694:	92 2e       	mov	r9, r18
   15696:	06 c0       	rjmp	.+12     	; 0x156a4 <vfprintf+0xbe>
   15698:	8d 32       	cpi	r24, 0x2D	; 45
   1569a:	91 f0       	breq	.+36     	; 0x156c0 <vfprintf+0xda>
   1569c:	80 33       	cpi	r24, 0x30	; 48
   1569e:	71 f7       	brne	.-36     	; 0x1567c <vfprintf+0x96>
   156a0:	68 94       	set
   156a2:	30 f8       	bld	r3, 0
   156a4:	f3 01       	movw	r30, r6
   156a6:	93 fd       	sbrc	r25, 3
   156a8:	85 91       	lpm	r24, Z+
   156aa:	93 ff       	sbrs	r25, 3
   156ac:	81 91       	ld	r24, Z+
   156ae:	3f 01       	movw	r6, r30
   156b0:	81 11       	cpse	r24, r1
   156b2:	da cf       	rjmp	.-76     	; 0x15668 <vfprintf+0x82>
   156b4:	21 c0       	rjmp	.+66     	; 0x156f8 <vfprintf+0x112>
   156b6:	68 94       	set
   156b8:	31 f8       	bld	r3, 1
   156ba:	68 94       	set
   156bc:	32 f8       	bld	r3, 2
   156be:	f2 cf       	rjmp	.-28     	; 0x156a4 <vfprintf+0xbe>
   156c0:	68 94       	set
   156c2:	33 f8       	bld	r3, 3
   156c4:	ef cf       	rjmp	.-34     	; 0x156a4 <vfprintf+0xbe>
   156c6:	68 94       	set
   156c8:	34 f8       	bld	r3, 4
   156ca:	ec cf       	rjmp	.-40     	; 0x156a4 <vfprintf+0xbe>
   156cc:	ea e0       	ldi	r30, 0x0A	; 10
   156ce:	2e 9e       	mul	r2, r30
   156d0:	20 0d       	add	r18, r0
   156d2:	11 24       	eor	r1, r1
   156d4:	22 2e       	mov	r2, r18
   156d6:	68 94       	set
   156d8:	35 f8       	bld	r3, 5
   156da:	e4 cf       	rjmp	.-56     	; 0x156a4 <vfprintf+0xbe>
   156dc:	8e 32       	cpi	r24, 0x2E	; 46
   156de:	29 f4       	brne	.+10     	; 0x156ea <vfprintf+0x104>
   156e0:	36 fc       	sbrc	r3, 6
   156e2:	04 c1       	rjmp	.+520    	; 0x158ec <vfprintf+0x306>
   156e4:	68 94       	set
   156e6:	36 f8       	bld	r3, 6
   156e8:	dd cf       	rjmp	.-70     	; 0x156a4 <vfprintf+0xbe>
   156ea:	8c 36       	cpi	r24, 0x6C	; 108
   156ec:	19 f4       	brne	.+6      	; 0x156f4 <vfprintf+0x10e>
   156ee:	68 94       	set
   156f0:	37 f8       	bld	r3, 7
   156f2:	d8 cf       	rjmp	.-80     	; 0x156a4 <vfprintf+0xbe>
   156f4:	88 36       	cpi	r24, 0x68	; 104
   156f6:	b1 f2       	breq	.-84     	; 0x156a4 <vfprintf+0xbe>
   156f8:	98 2f       	mov	r25, r24
   156fa:	9f 7d       	andi	r25, 0xDF	; 223
   156fc:	95 54       	subi	r25, 0x45	; 69
   156fe:	93 30       	cpi	r25, 0x03	; 3
   15700:	e0 f0       	brcs	.+56     	; 0x1573a <vfprintf+0x154>
   15702:	83 36       	cpi	r24, 0x63	; 99
   15704:	a1 f1       	breq	.+104    	; 0x1576e <vfprintf+0x188>
   15706:	83 37       	cpi	r24, 0x73	; 115
   15708:	c1 f1       	breq	.+112    	; 0x1577a <vfprintf+0x194>
   1570a:	83 35       	cpi	r24, 0x53	; 83
   1570c:	09 f0       	breq	.+2      	; 0x15710 <vfprintf+0x12a>
   1570e:	63 c0       	rjmp	.+198    	; 0x157d6 <vfprintf+0x1f0>
   15710:	28 01       	movw	r4, r16
   15712:	f2 e0       	ldi	r31, 0x02	; 2
   15714:	4f 0e       	add	r4, r31
   15716:	51 1c       	adc	r5, r1
   15718:	f8 01       	movw	r30, r16
   1571a:	c0 80       	ld	r12, Z
   1571c:	d1 80       	ldd	r13, Z+1	; 0x01
   1571e:	69 2d       	mov	r22, r9
   15720:	70 e0       	ldi	r23, 0x00	; 0
   15722:	36 fc       	sbrc	r3, 6
   15724:	02 c0       	rjmp	.+4      	; 0x1572a <vfprintf+0x144>
   15726:	6f ef       	ldi	r22, 0xFF	; 255
   15728:	7f ef       	ldi	r23, 0xFF	; 255
   1572a:	c6 01       	movw	r24, r12
   1572c:	0e 94 00 b2 	call	0x16400	; 0x16400 <strnlen_P>
   15730:	4c 01       	movw	r8, r24
   15732:	68 94       	set
   15734:	37 f8       	bld	r3, 7
   15736:	82 01       	movw	r16, r4
   15738:	0a c0       	rjmp	.+20     	; 0x1574e <vfprintf+0x168>
   1573a:	0c 5f       	subi	r16, 0xFC	; 252
   1573c:	1f 4f       	sbci	r17, 0xFF	; 255
   1573e:	ff e3       	ldi	r31, 0x3F	; 63
   15740:	f9 83       	std	Y+1, r31	; 0x01
   15742:	88 24       	eor	r8, r8
   15744:	83 94       	inc	r8
   15746:	91 2c       	mov	r9, r1
   15748:	65 01       	movw	r12, r10
   1574a:	e8 94       	clt
   1574c:	37 f8       	bld	r3, 7
   1574e:	33 fe       	sbrs	r3, 3
   15750:	2d c0       	rjmp	.+90     	; 0x157ac <vfprintf+0x1c6>
   15752:	52 2c       	mov	r5, r2
   15754:	81 14       	cp	r8, r1
   15756:	91 04       	cpc	r9, r1
   15758:	71 f5       	brne	.+92     	; 0x157b6 <vfprintf+0x1d0>
   1575a:	55 20       	and	r5, r5
   1575c:	09 f4       	brne	.+2      	; 0x15760 <vfprintf+0x17a>
   1575e:	68 cf       	rjmp	.-304    	; 0x15630 <vfprintf+0x4a>
   15760:	b7 01       	movw	r22, r14
   15762:	80 e2       	ldi	r24, 0x20	; 32
   15764:	90 e0       	ldi	r25, 0x00	; 0
   15766:	0e 94 2d b2 	call	0x1645a	; 0x1645a <fputc>
   1576a:	5a 94       	dec	r5
   1576c:	f6 cf       	rjmp	.-20     	; 0x1575a <vfprintf+0x174>
   1576e:	f8 01       	movw	r30, r16
   15770:	80 81       	ld	r24, Z
   15772:	89 83       	std	Y+1, r24	; 0x01
   15774:	0e 5f       	subi	r16, 0xFE	; 254
   15776:	1f 4f       	sbci	r17, 0xFF	; 255
   15778:	e4 cf       	rjmp	.-56     	; 0x15742 <vfprintf+0x15c>
   1577a:	28 01       	movw	r4, r16
   1577c:	f2 e0       	ldi	r31, 0x02	; 2
   1577e:	4f 0e       	add	r4, r31
   15780:	51 1c       	adc	r5, r1
   15782:	f8 01       	movw	r30, r16
   15784:	c0 80       	ld	r12, Z
   15786:	d1 80       	ldd	r13, Z+1	; 0x01
   15788:	69 2d       	mov	r22, r9
   1578a:	70 e0       	ldi	r23, 0x00	; 0
   1578c:	36 fc       	sbrc	r3, 6
   1578e:	02 c0       	rjmp	.+4      	; 0x15794 <vfprintf+0x1ae>
   15790:	6f ef       	ldi	r22, 0xFF	; 255
   15792:	7f ef       	ldi	r23, 0xFF	; 255
   15794:	c6 01       	movw	r24, r12
   15796:	0e 94 12 b2 	call	0x16424	; 0x16424 <strnlen>
   1579a:	4c 01       	movw	r8, r24
   1579c:	82 01       	movw	r16, r4
   1579e:	d5 cf       	rjmp	.-86     	; 0x1574a <vfprintf+0x164>
   157a0:	b7 01       	movw	r22, r14
   157a2:	80 e2       	ldi	r24, 0x20	; 32
   157a4:	90 e0       	ldi	r25, 0x00	; 0
   157a6:	0e 94 2d b2 	call	0x1645a	; 0x1645a <fputc>
   157aa:	2a 94       	dec	r2
   157ac:	28 14       	cp	r2, r8
   157ae:	19 04       	cpc	r1, r9
   157b0:	09 f0       	breq	.+2      	; 0x157b4 <vfprintf+0x1ce>
   157b2:	b0 f7       	brcc	.-20     	; 0x157a0 <vfprintf+0x1ba>
   157b4:	ce cf       	rjmp	.-100    	; 0x15752 <vfprintf+0x16c>
   157b6:	f6 01       	movw	r30, r12
   157b8:	37 fc       	sbrc	r3, 7
   157ba:	85 91       	lpm	r24, Z+
   157bc:	37 fe       	sbrs	r3, 7
   157be:	81 91       	ld	r24, Z+
   157c0:	6f 01       	movw	r12, r30
   157c2:	b7 01       	movw	r22, r14
   157c4:	90 e0       	ldi	r25, 0x00	; 0
   157c6:	0e 94 2d b2 	call	0x1645a	; 0x1645a <fputc>
   157ca:	51 10       	cpse	r5, r1
   157cc:	5a 94       	dec	r5
   157ce:	f1 e0       	ldi	r31, 0x01	; 1
   157d0:	8f 1a       	sub	r8, r31
   157d2:	91 08       	sbc	r9, r1
   157d4:	bf cf       	rjmp	.-130    	; 0x15754 <vfprintf+0x16e>
   157d6:	84 36       	cpi	r24, 0x64	; 100
   157d8:	19 f0       	breq	.+6      	; 0x157e0 <vfprintf+0x1fa>
   157da:	89 36       	cpi	r24, 0x69	; 105
   157dc:	09 f0       	breq	.+2      	; 0x157e0 <vfprintf+0x1fa>
   157de:	77 c0       	rjmp	.+238    	; 0x158ce <vfprintf+0x2e8>
   157e0:	f8 01       	movw	r30, r16
   157e2:	37 fe       	sbrs	r3, 7
   157e4:	6b c0       	rjmp	.+214    	; 0x158bc <vfprintf+0x2d6>
   157e6:	60 81       	ld	r22, Z
   157e8:	71 81       	ldd	r23, Z+1	; 0x01
   157ea:	82 81       	ldd	r24, Z+2	; 0x02
   157ec:	93 81       	ldd	r25, Z+3	; 0x03
   157ee:	0c 5f       	subi	r16, 0xFC	; 252
   157f0:	1f 4f       	sbci	r17, 0xFF	; 255
   157f2:	f3 2d       	mov	r31, r3
   157f4:	ff 76       	andi	r31, 0x6F	; 111
   157f6:	3f 2e       	mov	r3, r31
   157f8:	97 ff       	sbrs	r25, 7
   157fa:	09 c0       	rjmp	.+18     	; 0x1580e <vfprintf+0x228>
   157fc:	90 95       	com	r25
   157fe:	80 95       	com	r24
   15800:	70 95       	com	r23
   15802:	61 95       	neg	r22
   15804:	7f 4f       	sbci	r23, 0xFF	; 255
   15806:	8f 4f       	sbci	r24, 0xFF	; 255
   15808:	9f 4f       	sbci	r25, 0xFF	; 255
   1580a:	68 94       	set
   1580c:	37 f8       	bld	r3, 7
   1580e:	2a e0       	ldi	r18, 0x0A	; 10
   15810:	30 e0       	ldi	r19, 0x00	; 0
   15812:	a5 01       	movw	r20, r10
   15814:	0e 94 5d b2 	call	0x164ba	; 0x164ba <__ultoa_invert>
   15818:	c8 2e       	mov	r12, r24
   1581a:	ca 18       	sub	r12, r10
   1581c:	8c 2c       	mov	r8, r12
   1581e:	43 2c       	mov	r4, r3
   15820:	36 fe       	sbrs	r3, 6
   15822:	0c c0       	rjmp	.+24     	; 0x1583c <vfprintf+0x256>
   15824:	e8 94       	clt
   15826:	40 f8       	bld	r4, 0
   15828:	c9 14       	cp	r12, r9
   1582a:	40 f4       	brcc	.+16     	; 0x1583c <vfprintf+0x256>
   1582c:	34 fe       	sbrs	r3, 4
   1582e:	05 c0       	rjmp	.+10     	; 0x1583a <vfprintf+0x254>
   15830:	32 fc       	sbrc	r3, 2
   15832:	03 c0       	rjmp	.+6      	; 0x1583a <vfprintf+0x254>
   15834:	f3 2d       	mov	r31, r3
   15836:	fe 7e       	andi	r31, 0xEE	; 238
   15838:	4f 2e       	mov	r4, r31
   1583a:	89 2c       	mov	r8, r9
   1583c:	44 fe       	sbrs	r4, 4
   1583e:	aa c0       	rjmp	.+340    	; 0x15994 <vfprintf+0x3ae>
   15840:	fe 01       	movw	r30, r28
   15842:	ec 0d       	add	r30, r12
   15844:	f1 1d       	adc	r31, r1
   15846:	80 81       	ld	r24, Z
   15848:	80 33       	cpi	r24, 0x30	; 48
   1584a:	09 f0       	breq	.+2      	; 0x1584e <vfprintf+0x268>
   1584c:	9c c0       	rjmp	.+312    	; 0x15986 <vfprintf+0x3a0>
   1584e:	24 2d       	mov	r18, r4
   15850:	29 7e       	andi	r18, 0xE9	; 233
   15852:	42 2e       	mov	r4, r18
   15854:	84 2d       	mov	r24, r4
   15856:	88 70       	andi	r24, 0x08	; 8
   15858:	58 2e       	mov	r5, r24
   1585a:	43 fc       	sbrc	r4, 3
   1585c:	aa c0       	rjmp	.+340    	; 0x159b2 <vfprintf+0x3cc>
   1585e:	40 fe       	sbrs	r4, 0
   15860:	a4 c0       	rjmp	.+328    	; 0x159aa <vfprintf+0x3c4>
   15862:	9c 2c       	mov	r9, r12
   15864:	82 14       	cp	r8, r2
   15866:	18 f4       	brcc	.+6      	; 0x1586e <vfprintf+0x288>
   15868:	2c 0c       	add	r2, r12
   1586a:	92 2c       	mov	r9, r2
   1586c:	98 18       	sub	r9, r8
   1586e:	44 fe       	sbrs	r4, 4
   15870:	a6 c0       	rjmp	.+332    	; 0x159be <vfprintf+0x3d8>
   15872:	b7 01       	movw	r22, r14
   15874:	80 e3       	ldi	r24, 0x30	; 48
   15876:	90 e0       	ldi	r25, 0x00	; 0
   15878:	0e 94 2d b2 	call	0x1645a	; 0x1645a <fputc>
   1587c:	42 fe       	sbrs	r4, 2
   1587e:	09 c0       	rjmp	.+18     	; 0x15892 <vfprintf+0x2ac>
   15880:	88 e7       	ldi	r24, 0x78	; 120
   15882:	90 e0       	ldi	r25, 0x00	; 0
   15884:	41 fe       	sbrs	r4, 1
   15886:	02 c0       	rjmp	.+4      	; 0x1588c <vfprintf+0x2a6>
   15888:	88 e5       	ldi	r24, 0x58	; 88
   1588a:	90 e0       	ldi	r25, 0x00	; 0
   1588c:	b7 01       	movw	r22, r14
   1588e:	0e 94 2d b2 	call	0x1645a	; 0x1645a <fputc>
   15892:	c9 14       	cp	r12, r9
   15894:	08 f4       	brcc	.+2      	; 0x15898 <vfprintf+0x2b2>
   15896:	9f c0       	rjmp	.+318    	; 0x159d6 <vfprintf+0x3f0>
   15898:	ca 94       	dec	r12
   1589a:	d1 2c       	mov	r13, r1
   1589c:	9f ef       	ldi	r25, 0xFF	; 255
   1589e:	c9 1a       	sub	r12, r25
   158a0:	d9 0a       	sbc	r13, r25
   158a2:	ca 0c       	add	r12, r10
   158a4:	db 1c       	adc	r13, r11
   158a6:	f6 01       	movw	r30, r12
   158a8:	82 91       	ld	r24, -Z
   158aa:	6f 01       	movw	r12, r30
   158ac:	b7 01       	movw	r22, r14
   158ae:	90 e0       	ldi	r25, 0x00	; 0
   158b0:	0e 94 2d b2 	call	0x1645a	; 0x1645a <fputc>
   158b4:	ac 14       	cp	r10, r12
   158b6:	bd 04       	cpc	r11, r13
   158b8:	b1 f7       	brne	.-20     	; 0x158a6 <vfprintf+0x2c0>
   158ba:	4f cf       	rjmp	.-354    	; 0x1575a <vfprintf+0x174>
   158bc:	60 81       	ld	r22, Z
   158be:	71 81       	ldd	r23, Z+1	; 0x01
   158c0:	07 2e       	mov	r0, r23
   158c2:	00 0c       	add	r0, r0
   158c4:	88 0b       	sbc	r24, r24
   158c6:	99 0b       	sbc	r25, r25
   158c8:	0e 5f       	subi	r16, 0xFE	; 254
   158ca:	1f 4f       	sbci	r17, 0xFF	; 255
   158cc:	92 cf       	rjmp	.-220    	; 0x157f2 <vfprintf+0x20c>
   158ce:	d3 2c       	mov	r13, r3
   158d0:	e8 94       	clt
   158d2:	d4 f8       	bld	r13, 4
   158d4:	2a e0       	ldi	r18, 0x0A	; 10
   158d6:	30 e0       	ldi	r19, 0x00	; 0
   158d8:	85 37       	cpi	r24, 0x75	; 117
   158da:	e1 f1       	breq	.+120    	; 0x15954 <vfprintf+0x36e>
   158dc:	23 2d       	mov	r18, r3
   158de:	29 7f       	andi	r18, 0xF9	; 249
   158e0:	d2 2e       	mov	r13, r18
   158e2:	8f 36       	cpi	r24, 0x6F	; 111
   158e4:	a9 f1       	breq	.+106    	; 0x15950 <vfprintf+0x36a>
   158e6:	f0 f4       	brcc	.+60     	; 0x15924 <vfprintf+0x33e>
   158e8:	88 35       	cpi	r24, 0x58	; 88
   158ea:	51 f1       	breq	.+84     	; 0x15940 <vfprintf+0x35a>
   158ec:	f7 01       	movw	r30, r14
   158ee:	86 81       	ldd	r24, Z+6	; 0x06
   158f0:	97 81       	ldd	r25, Z+7	; 0x07
   158f2:	2b 96       	adiw	r28, 0x0b	; 11
   158f4:	0f b6       	in	r0, 0x3f	; 63
   158f6:	f8 94       	cli
   158f8:	de bf       	out	0x3e, r29	; 62
   158fa:	0f be       	out	0x3f, r0	; 63
   158fc:	cd bf       	out	0x3d, r28	; 61
   158fe:	df 91       	pop	r29
   15900:	cf 91       	pop	r28
   15902:	1f 91       	pop	r17
   15904:	0f 91       	pop	r16
   15906:	ff 90       	pop	r15
   15908:	ef 90       	pop	r14
   1590a:	df 90       	pop	r13
   1590c:	cf 90       	pop	r12
   1590e:	bf 90       	pop	r11
   15910:	af 90       	pop	r10
   15912:	9f 90       	pop	r9
   15914:	8f 90       	pop	r8
   15916:	7f 90       	pop	r7
   15918:	6f 90       	pop	r6
   1591a:	5f 90       	pop	r5
   1591c:	4f 90       	pop	r4
   1591e:	3f 90       	pop	r3
   15920:	2f 90       	pop	r2
   15922:	08 95       	ret
   15924:	80 37       	cpi	r24, 0x70	; 112
   15926:	49 f0       	breq	.+18     	; 0x1593a <vfprintf+0x354>
   15928:	88 37       	cpi	r24, 0x78	; 120
   1592a:	01 f7       	brne	.-64     	; 0x158ec <vfprintf+0x306>
   1592c:	d4 fe       	sbrs	r13, 4
   1592e:	02 c0       	rjmp	.+4      	; 0x15934 <vfprintf+0x34e>
   15930:	68 94       	set
   15932:	d2 f8       	bld	r13, 2
   15934:	20 e1       	ldi	r18, 0x10	; 16
   15936:	30 e0       	ldi	r19, 0x00	; 0
   15938:	0d c0       	rjmp	.+26     	; 0x15954 <vfprintf+0x36e>
   1593a:	68 94       	set
   1593c:	d4 f8       	bld	r13, 4
   1593e:	f6 cf       	rjmp	.-20     	; 0x1592c <vfprintf+0x346>
   15940:	34 fe       	sbrs	r3, 4
   15942:	03 c0       	rjmp	.+6      	; 0x1594a <vfprintf+0x364>
   15944:	82 2f       	mov	r24, r18
   15946:	86 60       	ori	r24, 0x06	; 6
   15948:	d8 2e       	mov	r13, r24
   1594a:	20 e1       	ldi	r18, 0x10	; 16
   1594c:	32 e0       	ldi	r19, 0x02	; 2
   1594e:	02 c0       	rjmp	.+4      	; 0x15954 <vfprintf+0x36e>
   15950:	28 e0       	ldi	r18, 0x08	; 8
   15952:	30 e0       	ldi	r19, 0x00	; 0
   15954:	f8 01       	movw	r30, r16
   15956:	d7 fe       	sbrs	r13, 7
   15958:	0f c0       	rjmp	.+30     	; 0x15978 <vfprintf+0x392>
   1595a:	60 81       	ld	r22, Z
   1595c:	71 81       	ldd	r23, Z+1	; 0x01
   1595e:	82 81       	ldd	r24, Z+2	; 0x02
   15960:	93 81       	ldd	r25, Z+3	; 0x03
   15962:	0c 5f       	subi	r16, 0xFC	; 252
   15964:	1f 4f       	sbci	r17, 0xFF	; 255
   15966:	a5 01       	movw	r20, r10
   15968:	0e 94 5d b2 	call	0x164ba	; 0x164ba <__ultoa_invert>
   1596c:	c8 2e       	mov	r12, r24
   1596e:	ca 18       	sub	r12, r10
   15970:	3d 2c       	mov	r3, r13
   15972:	e8 94       	clt
   15974:	37 f8       	bld	r3, 7
   15976:	52 cf       	rjmp	.-348    	; 0x1581c <vfprintf+0x236>
   15978:	60 81       	ld	r22, Z
   1597a:	71 81       	ldd	r23, Z+1	; 0x01
   1597c:	90 e0       	ldi	r25, 0x00	; 0
   1597e:	80 e0       	ldi	r24, 0x00	; 0
   15980:	0e 5f       	subi	r16, 0xFE	; 254
   15982:	1f 4f       	sbci	r17, 0xFF	; 255
   15984:	f0 cf       	rjmp	.-32     	; 0x15966 <vfprintf+0x380>
   15986:	42 fc       	sbrc	r4, 2
   15988:	02 c0       	rjmp	.+4      	; 0x1598e <vfprintf+0x3a8>
   1598a:	83 94       	inc	r8
   1598c:	63 cf       	rjmp	.-314    	; 0x15854 <vfprintf+0x26e>
   1598e:	83 94       	inc	r8
   15990:	83 94       	inc	r8
   15992:	60 cf       	rjmp	.-320    	; 0x15854 <vfprintf+0x26e>
   15994:	84 2d       	mov	r24, r4
   15996:	86 78       	andi	r24, 0x86	; 134
   15998:	09 f4       	brne	.+2      	; 0x1599c <vfprintf+0x3b6>
   1599a:	5c cf       	rjmp	.-328    	; 0x15854 <vfprintf+0x26e>
   1599c:	f6 cf       	rjmp	.-20     	; 0x1598a <vfprintf+0x3a4>
   1599e:	b7 01       	movw	r22, r14
   159a0:	80 e2       	ldi	r24, 0x20	; 32
   159a2:	90 e0       	ldi	r25, 0x00	; 0
   159a4:	0e 94 2d b2 	call	0x1645a	; 0x1645a <fputc>
   159a8:	83 94       	inc	r8
   159aa:	82 14       	cp	r8, r2
   159ac:	c0 f3       	brcs	.-16     	; 0x1599e <vfprintf+0x3b8>
   159ae:	51 2c       	mov	r5, r1
   159b0:	5e cf       	rjmp	.-324    	; 0x1586e <vfprintf+0x288>
   159b2:	52 2c       	mov	r5, r2
   159b4:	58 18       	sub	r5, r8
   159b6:	82 14       	cp	r8, r2
   159b8:	08 f4       	brcc	.+2      	; 0x159bc <vfprintf+0x3d6>
   159ba:	59 cf       	rjmp	.-334    	; 0x1586e <vfprintf+0x288>
   159bc:	f8 cf       	rjmp	.-16     	; 0x159ae <vfprintf+0x3c8>
   159be:	84 2d       	mov	r24, r4
   159c0:	86 78       	andi	r24, 0x86	; 134
   159c2:	09 f4       	brne	.+2      	; 0x159c6 <vfprintf+0x3e0>
   159c4:	66 cf       	rjmp	.-308    	; 0x15892 <vfprintf+0x2ac>
   159c6:	8b e2       	ldi	r24, 0x2B	; 43
   159c8:	41 fe       	sbrs	r4, 1
   159ca:	80 e2       	ldi	r24, 0x20	; 32
   159cc:	47 fc       	sbrc	r4, 7
   159ce:	8d e2       	ldi	r24, 0x2D	; 45
   159d0:	b7 01       	movw	r22, r14
   159d2:	90 e0       	ldi	r25, 0x00	; 0
   159d4:	5c cf       	rjmp	.-328    	; 0x1588e <vfprintf+0x2a8>
   159d6:	b7 01       	movw	r22, r14
   159d8:	80 e3       	ldi	r24, 0x30	; 48
   159da:	90 e0       	ldi	r25, 0x00	; 0
   159dc:	0e 94 2d b2 	call	0x1645a	; 0x1645a <fputc>
   159e0:	9a 94       	dec	r9
   159e2:	57 cf       	rjmp	.-338    	; 0x15892 <vfprintf+0x2ac>
   159e4:	8f ef       	ldi	r24, 0xFF	; 255
   159e6:	9f ef       	ldi	r25, 0xFF	; 255
   159e8:	84 cf       	rjmp	.-248    	; 0x158f2 <vfprintf+0x30c>

000159ea <calloc>:
calloc():
   159ea:	0f 93       	push	r16
   159ec:	1f 93       	push	r17
   159ee:	cf 93       	push	r28
   159f0:	df 93       	push	r29
   159f2:	86 9f       	mul	r24, r22
   159f4:	80 01       	movw	r16, r0
   159f6:	87 9f       	mul	r24, r23
   159f8:	10 0d       	add	r17, r0
   159fa:	96 9f       	mul	r25, r22
   159fc:	10 0d       	add	r17, r0
   159fe:	11 24       	eor	r1, r1
   15a00:	c8 01       	movw	r24, r16
   15a02:	0e 94 8a ae 	call	0x15d14	; 0x15d14 <malloc>
   15a06:	ec 01       	movw	r28, r24
   15a08:	00 97       	sbiw	r24, 0x00	; 0
   15a0a:	29 f0       	breq	.+10     	; 0x15a16 <calloc+0x2c>
   15a0c:	a8 01       	movw	r20, r16
   15a0e:	70 e0       	ldi	r23, 0x00	; 0
   15a10:	60 e0       	ldi	r22, 0x00	; 0
   15a12:	0e 94 0b b2 	call	0x16416	; 0x16416 <memset>
   15a16:	ce 01       	movw	r24, r28
   15a18:	df 91       	pop	r29
   15a1a:	cf 91       	pop	r28
   15a1c:	1f 91       	pop	r17
   15a1e:	0f 91       	pop	r16
   15a20:	08 95       	ret

00015a22 <dtoa_prf>:
dtoa_prf():
   15a22:	8f 92       	push	r8
   15a24:	9f 92       	push	r9
   15a26:	af 92       	push	r10
   15a28:	bf 92       	push	r11
   15a2a:	cf 92       	push	r12
   15a2c:	df 92       	push	r13
   15a2e:	ef 92       	push	r14
   15a30:	ff 92       	push	r15
   15a32:	0f 93       	push	r16
   15a34:	1f 93       	push	r17
   15a36:	cf 93       	push	r28
   15a38:	df 93       	push	r29
   15a3a:	00 d0       	rcall	.+0      	; 0x15a3c <dtoa_prf+0x1a>
   15a3c:	00 d0       	rcall	.+0      	; 0x15a3e <dtoa_prf+0x1c>
   15a3e:	00 d0       	rcall	.+0      	; 0x15a40 <dtoa_prf+0x1e>
   15a40:	cd b7       	in	r28, 0x3d	; 61
   15a42:	de b7       	in	r29, 0x3e	; 62
   15a44:	6a 01       	movw	r12, r20
   15a46:	f2 2e       	mov	r15, r18
   15a48:	b0 2e       	mov	r11, r16
   15a4a:	10 2f       	mov	r17, r16
   15a4c:	fb e3       	ldi	r31, 0x3B	; 59
   15a4e:	af 2e       	mov	r10, r31
   15a50:	a0 16       	cp	r10, r16
   15a52:	08 f4       	brcc	.+2      	; 0x15a56 <dtoa_prf+0x34>
   15a54:	1b e3       	ldi	r17, 0x3B	; 59
   15a56:	1f 5f       	subi	r17, 0xFF	; 255
   15a58:	01 2f       	mov	r16, r17
   15a5a:	27 e0       	ldi	r18, 0x07	; 7
   15a5c:	ae 01       	movw	r20, r28
   15a5e:	4f 5f       	subi	r20, 0xFF	; 255
   15a60:	5f 4f       	sbci	r21, 0xFF	; 255
   15a62:	0e 94 0d b1 	call	0x1621a	; 0x1621a <__ftoa_engine>
   15a66:	bc 01       	movw	r22, r24
   15a68:	89 81       	ldd	r24, Y+1	; 0x01
   15a6a:	98 2f       	mov	r25, r24
   15a6c:	99 70       	andi	r25, 0x09	; 9
   15a6e:	91 30       	cpi	r25, 0x01	; 1
   15a70:	09 f4       	brne	.+2      	; 0x15a74 <dtoa_prf+0x52>
   15a72:	4e c0       	rjmp	.+156    	; 0x15b10 <dtoa_prf+0xee>
   15a74:	9b e2       	ldi	r25, 0x2B	; 43
   15a76:	e1 fc       	sbrc	r14, 1
   15a78:	04 c0       	rjmp	.+8      	; 0x15a82 <dtoa_prf+0x60>
   15a7a:	9e 2d       	mov	r25, r14
   15a7c:	91 70       	andi	r25, 0x01	; 1
   15a7e:	e0 fc       	sbrc	r14, 0
   15a80:	49 c0       	rjmp	.+146    	; 0x15b14 <dtoa_prf+0xf2>
   15a82:	5e 2d       	mov	r21, r14
   15a84:	50 71       	andi	r21, 0x10	; 16
   15a86:	e8 2f       	mov	r30, r24
   15a88:	e8 70       	andi	r30, 0x08	; 8
   15a8a:	83 ff       	sbrs	r24, 3
   15a8c:	55 c0       	rjmp	.+170    	; 0x15b38 <dtoa_prf+0x116>
   15a8e:	84 e0       	ldi	r24, 0x04	; 4
   15a90:	91 11       	cpse	r25, r1
   15a92:	01 c0       	rjmp	.+2      	; 0x15a96 <dtoa_prf+0x74>
   15a94:	83 e0       	ldi	r24, 0x03	; 3
   15a96:	ef 2d       	mov	r30, r15
   15a98:	e8 1b       	sub	r30, r24
   15a9a:	8f 15       	cp	r24, r15
   15a9c:	08 f0       	brcs	.+2      	; 0x15aa0 <dtoa_prf+0x7e>
   15a9e:	e0 e0       	ldi	r30, 0x00	; 0
   15aa0:	d6 01       	movw	r26, r12
   15aa2:	8e 2f       	mov	r24, r30
   15aa4:	20 e2       	ldi	r18, 0x20	; 32
   15aa6:	55 23       	and	r21, r21
   15aa8:	c9 f1       	breq	.+114    	; 0x15b1c <dtoa_prf+0xfa>
   15aaa:	99 23       	and	r25, r25
   15aac:	29 f0       	breq	.+10     	; 0x15ab8 <dtoa_prf+0x96>
   15aae:	d6 01       	movw	r26, r12
   15ab0:	9c 93       	st	X, r25
   15ab2:	c6 01       	movw	r24, r12
   15ab4:	01 96       	adiw	r24, 0x01	; 1
   15ab6:	6c 01       	movw	r12, r24
   15ab8:	96 01       	movw	r18, r12
   15aba:	2d 5f       	subi	r18, 0xFD	; 253
   15abc:	3f 4f       	sbci	r19, 0xFF	; 255
   15abe:	e2 fe       	sbrs	r14, 2
   15ac0:	33 c0       	rjmp	.+102    	; 0x15b28 <dtoa_prf+0x106>
   15ac2:	8e e4       	ldi	r24, 0x4E	; 78
   15ac4:	d6 01       	movw	r26, r12
   15ac6:	8c 93       	st	X, r24
   15ac8:	91 e4       	ldi	r25, 0x41	; 65
   15aca:	11 96       	adiw	r26, 0x01	; 1
   15acc:	9c 93       	st	X, r25
   15ace:	11 97       	sbiw	r26, 0x01	; 1
   15ad0:	12 96       	adiw	r26, 0x02	; 2
   15ad2:	8c 93       	st	X, r24
   15ad4:	d9 01       	movw	r26, r18
   15ad6:	8e 2f       	mov	r24, r30
   15ad8:	90 e2       	ldi	r25, 0x20	; 32
   15ada:	81 11       	cpse	r24, r1
   15adc:	2a c0       	rjmp	.+84     	; 0x15b32 <dtoa_prf+0x110>
   15ade:	e2 0f       	add	r30, r18
   15ae0:	f3 2f       	mov	r31, r19
   15ae2:	f1 1d       	adc	r31, r1
   15ae4:	10 82       	st	Z, r1
   15ae6:	8e ef       	ldi	r24, 0xFE	; 254
   15ae8:	9f ef       	ldi	r25, 0xFF	; 255
   15aea:	29 96       	adiw	r28, 0x09	; 9
   15aec:	0f b6       	in	r0, 0x3f	; 63
   15aee:	f8 94       	cli
   15af0:	de bf       	out	0x3e, r29	; 62
   15af2:	0f be       	out	0x3f, r0	; 63
   15af4:	cd bf       	out	0x3d, r28	; 61
   15af6:	df 91       	pop	r29
   15af8:	cf 91       	pop	r28
   15afa:	1f 91       	pop	r17
   15afc:	0f 91       	pop	r16
   15afe:	ff 90       	pop	r15
   15b00:	ef 90       	pop	r14
   15b02:	df 90       	pop	r13
   15b04:	cf 90       	pop	r12
   15b06:	bf 90       	pop	r11
   15b08:	af 90       	pop	r10
   15b0a:	9f 90       	pop	r9
   15b0c:	8f 90       	pop	r8
   15b0e:	08 95       	ret
   15b10:	9d e2       	ldi	r25, 0x2D	; 45
   15b12:	b7 cf       	rjmp	.-146    	; 0x15a82 <dtoa_prf+0x60>
   15b14:	90 e2       	ldi	r25, 0x20	; 32
   15b16:	b5 cf       	rjmp	.-150    	; 0x15a82 <dtoa_prf+0x60>
   15b18:	2d 93       	st	X+, r18
   15b1a:	81 50       	subi	r24, 0x01	; 1
   15b1c:	81 11       	cpse	r24, r1
   15b1e:	fc cf       	rjmp	.-8      	; 0x15b18 <dtoa_prf+0xf6>
   15b20:	ce 0e       	add	r12, r30
   15b22:	d1 1c       	adc	r13, r1
   15b24:	e0 e0       	ldi	r30, 0x00	; 0
   15b26:	c1 cf       	rjmp	.-126    	; 0x15aaa <dtoa_prf+0x88>
   15b28:	8e e6       	ldi	r24, 0x6E	; 110
   15b2a:	d6 01       	movw	r26, r12
   15b2c:	8c 93       	st	X, r24
   15b2e:	91 e6       	ldi	r25, 0x61	; 97
   15b30:	cc cf       	rjmp	.-104    	; 0x15aca <dtoa_prf+0xa8>
   15b32:	9d 93       	st	X+, r25
   15b34:	81 50       	subi	r24, 0x01	; 1
   15b36:	d1 cf       	rjmp	.-94     	; 0x15ada <dtoa_prf+0xb8>
   15b38:	48 2f       	mov	r20, r24
   15b3a:	44 70       	andi	r20, 0x04	; 4
   15b3c:	82 ff       	sbrs	r24, 2
   15b3e:	3d c0       	rjmp	.+122    	; 0x15bba <dtoa_prf+0x198>
   15b40:	84 e0       	ldi	r24, 0x04	; 4
   15b42:	91 11       	cpse	r25, r1
   15b44:	01 c0       	rjmp	.+2      	; 0x15b48 <dtoa_prf+0x126>
   15b46:	83 e0       	ldi	r24, 0x03	; 3
   15b48:	8f 15       	cp	r24, r15
   15b4a:	10 f4       	brcc	.+4      	; 0x15b50 <dtoa_prf+0x12e>
   15b4c:	ef 2d       	mov	r30, r15
   15b4e:	e8 1b       	sub	r30, r24
   15b50:	d6 01       	movw	r26, r12
   15b52:	8e 2f       	mov	r24, r30
   15b54:	20 e2       	ldi	r18, 0x20	; 32
   15b56:	55 23       	and	r21, r21
   15b58:	09 f1       	breq	.+66     	; 0x15b9c <dtoa_prf+0x17a>
   15b5a:	99 23       	and	r25, r25
   15b5c:	29 f0       	breq	.+10     	; 0x15b68 <dtoa_prf+0x146>
   15b5e:	d6 01       	movw	r26, r12
   15b60:	9c 93       	st	X, r25
   15b62:	c6 01       	movw	r24, r12
   15b64:	01 96       	adiw	r24, 0x01	; 1
   15b66:	6c 01       	movw	r12, r24
   15b68:	96 01       	movw	r18, r12
   15b6a:	2d 5f       	subi	r18, 0xFD	; 253
   15b6c:	3f 4f       	sbci	r19, 0xFF	; 255
   15b6e:	e2 fe       	sbrs	r14, 2
   15b70:	1b c0       	rjmp	.+54     	; 0x15ba8 <dtoa_prf+0x186>
   15b72:	89 e4       	ldi	r24, 0x49	; 73
   15b74:	d6 01       	movw	r26, r12
   15b76:	8c 93       	st	X, r24
   15b78:	8e e4       	ldi	r24, 0x4E	; 78
   15b7a:	11 96       	adiw	r26, 0x01	; 1
   15b7c:	8c 93       	st	X, r24
   15b7e:	11 97       	sbiw	r26, 0x01	; 1
   15b80:	86 e4       	ldi	r24, 0x46	; 70
   15b82:	12 96       	adiw	r26, 0x02	; 2
   15b84:	8c 93       	st	X, r24
   15b86:	d9 01       	movw	r26, r18
   15b88:	8e 2f       	mov	r24, r30
   15b8a:	90 e2       	ldi	r25, 0x20	; 32
   15b8c:	88 23       	and	r24, r24
   15b8e:	09 f4       	brne	.+2      	; 0x15b92 <dtoa_prf+0x170>
   15b90:	a6 cf       	rjmp	.-180    	; 0x15ade <dtoa_prf+0xbc>
   15b92:	9d 93       	st	X+, r25
   15b94:	81 50       	subi	r24, 0x01	; 1
   15b96:	fa cf       	rjmp	.-12     	; 0x15b8c <dtoa_prf+0x16a>
   15b98:	2d 93       	st	X+, r18
   15b9a:	81 50       	subi	r24, 0x01	; 1
   15b9c:	81 11       	cpse	r24, r1
   15b9e:	fc cf       	rjmp	.-8      	; 0x15b98 <dtoa_prf+0x176>
   15ba0:	ce 0e       	add	r12, r30
   15ba2:	d1 1c       	adc	r13, r1
   15ba4:	e0 e0       	ldi	r30, 0x00	; 0
   15ba6:	d9 cf       	rjmp	.-78     	; 0x15b5a <dtoa_prf+0x138>
   15ba8:	89 e6       	ldi	r24, 0x69	; 105
   15baa:	d6 01       	movw	r26, r12
   15bac:	8c 93       	st	X, r24
   15bae:	8e e6       	ldi	r24, 0x6E	; 110
   15bb0:	11 96       	adiw	r26, 0x01	; 1
   15bb2:	8c 93       	st	X, r24
   15bb4:	11 97       	sbiw	r26, 0x01	; 1
   15bb6:	86 e6       	ldi	r24, 0x66	; 102
   15bb8:	e4 cf       	rjmp	.-56     	; 0x15b82 <dtoa_prf+0x160>
   15bba:	9b 01       	movw	r18, r22
   15bbc:	77 ff       	sbrs	r23, 7
   15bbe:	02 c0       	rjmp	.+4      	; 0x15bc4 <dtoa_prf+0x1a2>
   15bc0:	30 e0       	ldi	r19, 0x00	; 0
   15bc2:	20 e0       	ldi	r18, 0x00	; 0
   15bc4:	a1 e0       	ldi	r26, 0x01	; 1
   15bc6:	b0 e0       	ldi	r27, 0x00	; 0
   15bc8:	91 11       	cpse	r25, r1
   15bca:	02 c0       	rjmp	.+4      	; 0x15bd0 <dtoa_prf+0x1ae>
   15bcc:	b0 e0       	ldi	r27, 0x00	; 0
   15bce:	a0 e0       	ldi	r26, 0x00	; 0
   15bd0:	f9 01       	movw	r30, r18
   15bd2:	31 96       	adiw	r30, 0x01	; 1
   15bd4:	ae 0f       	add	r26, r30
   15bd6:	bf 1f       	adc	r27, r31
   15bd8:	8b 2c       	mov	r8, r11
   15bda:	91 2c       	mov	r9, r1
   15bdc:	bb 20       	and	r11, r11
   15bde:	09 f4       	brne	.+2      	; 0x15be2 <dtoa_prf+0x1c0>
   15be0:	61 c0       	rjmp	.+194    	; 0x15ca4 <dtoa_prf+0x282>
   15be2:	54 01       	movw	r10, r8
   15be4:	ef ef       	ldi	r30, 0xFF	; 255
   15be6:	ae 1a       	sub	r10, r30
   15be8:	be 0a       	sbc	r11, r30
   15bea:	aa 0d       	add	r26, r10
   15bec:	bb 1d       	adc	r27, r11
   15bee:	fa 16       	cp	r15, r26
   15bf0:	1b 06       	cpc	r1, r27
   15bf2:	19 f0       	breq	.+6      	; 0x15bfa <dtoa_prf+0x1d8>
   15bf4:	14 f0       	brlt	.+4      	; 0x15bfa <dtoa_prf+0x1d8>
   15bf6:	4f 2d       	mov	r20, r15
   15bf8:	4a 1b       	sub	r20, r26
   15bfa:	51 11       	cpse	r21, r1
   15bfc:	88 c0       	rjmp	.+272    	; 0x15d0e <dtoa_prf+0x2ec>
   15bfe:	e3 fc       	sbrc	r14, 3
   15c00:	59 c0       	rjmp	.+178    	; 0x15cb4 <dtoa_prf+0x292>
   15c02:	76 01       	movw	r14, r12
   15c04:	a4 2f       	mov	r26, r20
   15c06:	b0 e2       	ldi	r27, 0x20	; 32
   15c08:	a1 11       	cpse	r26, r1
   15c0a:	4f c0       	rjmp	.+158    	; 0x15caa <dtoa_prf+0x288>
   15c0c:	c4 0e       	add	r12, r20
   15c0e:	d1 1c       	adc	r13, r1
   15c10:	99 23       	and	r25, r25
   15c12:	09 f4       	brne	.+2      	; 0x15c16 <dtoa_prf+0x1f4>
   15c14:	5b c0       	rjmp	.+182    	; 0x15ccc <dtoa_prf+0x2aa>
   15c16:	40 e0       	ldi	r20, 0x00	; 0
   15c18:	d6 01       	movw	r26, r12
   15c1a:	11 96       	adiw	r26, 0x01	; 1
   15c1c:	f6 01       	movw	r30, r12
   15c1e:	90 83       	st	Z, r25
   15c20:	6d 01       	movw	r12, r26
   15c22:	55 23       	and	r21, r21
   15c24:	09 f4       	brne	.+2      	; 0x15c28 <dtoa_prf+0x206>
   15c26:	48 c0       	rjmp	.+144    	; 0x15cb8 <dtoa_prf+0x296>
   15c28:	01 2f       	mov	r16, r17
   15c2a:	06 0f       	add	r16, r22
   15c2c:	9a 81       	ldd	r25, Y+2	; 0x02
   15c2e:	58 2f       	mov	r21, r24
   15c30:	50 71       	andi	r21, 0x10	; 16
   15c32:	84 ff       	sbrs	r24, 4
   15c34:	03 c0       	rjmp	.+6      	; 0x15c3c <dtoa_prf+0x21a>
   15c36:	91 33       	cpi	r25, 0x31	; 49
   15c38:	09 f4       	brne	.+2      	; 0x15c3c <dtoa_prf+0x21a>
   15c3a:	01 50       	subi	r16, 0x01	; 1
   15c3c:	10 16       	cp	r1, r16
   15c3e:	0c f0       	brlt	.+2      	; 0x15c42 <dtoa_prf+0x220>
   15c40:	47 c0       	rjmp	.+142    	; 0x15cd0 <dtoa_prf+0x2ae>
   15c42:	09 30       	cpi	r16, 0x09	; 9
   15c44:	08 f0       	brcs	.+2      	; 0x15c48 <dtoa_prf+0x226>
   15c46:	08 e0       	ldi	r16, 0x08	; 8
   15c48:	ee e2       	ldi	r30, 0x2E	; 46
   15c4a:	fe 2e       	mov	r15, r30
   15c4c:	5b 01       	movw	r10, r22
   15c4e:	a0 1a       	sub	r10, r16
   15c50:	b1 08       	sbc	r11, r1
   15c52:	85 01       	movw	r16, r10
   15c54:	91 94       	neg	r9
   15c56:	81 94       	neg	r8
   15c58:	91 08       	sbc	r9, r1
   15c5a:	2f 3f       	cpi	r18, 0xFF	; 255
   15c5c:	32 07       	cpc	r19, r18
   15c5e:	29 f4       	brne	.+10     	; 0x15c6a <dtoa_prf+0x248>
   15c60:	d6 01       	movw	r26, r12
   15c62:	fc 92       	st	X, r15
   15c64:	f6 01       	movw	r30, r12
   15c66:	31 96       	adiw	r30, 0x01	; 1
   15c68:	6f 01       	movw	r12, r30
   15c6a:	62 17       	cp	r22, r18
   15c6c:	73 07       	cpc	r23, r19
   15c6e:	94 f1       	brlt	.+100    	; 0x15cd4 <dtoa_prf+0x2b2>
   15c70:	02 17       	cp	r16, r18
   15c72:	13 07       	cpc	r17, r19
   15c74:	7c f5       	brge	.+94     	; 0x15cd4 <dtoa_prf+0x2b2>
   15c76:	db 01       	movw	r26, r22
   15c78:	a2 1b       	sub	r26, r18
   15c7a:	b3 0b       	sbc	r27, r19
   15c7c:	aa 24       	eor	r10, r10
   15c7e:	a3 94       	inc	r10
   15c80:	b1 2c       	mov	r11, r1
   15c82:	ac 0e       	add	r10, r28
   15c84:	bd 1e       	adc	r11, r29
   15c86:	aa 0d       	add	r26, r10
   15c88:	bb 1d       	adc	r27, r11
   15c8a:	11 96       	adiw	r26, 0x01	; 1
   15c8c:	8c 91       	ld	r24, X
   15c8e:	21 50       	subi	r18, 0x01	; 1
   15c90:	31 09       	sbc	r19, r1
   15c92:	d6 01       	movw	r26, r12
   15c94:	11 96       	adiw	r26, 0x01	; 1
   15c96:	28 15       	cp	r18, r8
   15c98:	39 05       	cpc	r19, r9
   15c9a:	f4 f0       	brlt	.+60     	; 0x15cd8 <dtoa_prf+0x2b6>
   15c9c:	f6 01       	movw	r30, r12
   15c9e:	80 83       	st	Z, r24
   15ca0:	6d 01       	movw	r12, r26
   15ca2:	db cf       	rjmp	.-74     	; 0x15c5a <dtoa_prf+0x238>
   15ca4:	b1 2c       	mov	r11, r1
   15ca6:	a1 2c       	mov	r10, r1
   15ca8:	a0 cf       	rjmp	.-192    	; 0x15bea <dtoa_prf+0x1c8>
   15caa:	f7 01       	movw	r30, r14
   15cac:	b1 93       	st	Z+, r27
   15cae:	7f 01       	movw	r14, r30
   15cb0:	a1 50       	subi	r26, 0x01	; 1
   15cb2:	aa cf       	rjmp	.-172    	; 0x15c08 <dtoa_prf+0x1e6>
   15cb4:	91 11       	cpse	r25, r1
   15cb6:	b0 cf       	rjmp	.-160    	; 0x15c18 <dtoa_prf+0x1f6>
   15cb8:	d6 01       	movw	r26, r12
   15cba:	94 2f       	mov	r25, r20
   15cbc:	50 e3       	ldi	r21, 0x30	; 48
   15cbe:	02 c0       	rjmp	.+4      	; 0x15cc4 <dtoa_prf+0x2a2>
   15cc0:	5d 93       	st	X+, r21
   15cc2:	91 50       	subi	r25, 0x01	; 1
   15cc4:	91 11       	cpse	r25, r1
   15cc6:	fc cf       	rjmp	.-8      	; 0x15cc0 <dtoa_prf+0x29e>
   15cc8:	c4 0e       	add	r12, r20
   15cca:	d1 1c       	adc	r13, r1
   15ccc:	40 e0       	ldi	r20, 0x00	; 0
   15cce:	ac cf       	rjmp	.-168    	; 0x15c28 <dtoa_prf+0x206>
   15cd0:	01 e0       	ldi	r16, 0x01	; 1
   15cd2:	ba cf       	rjmp	.-140    	; 0x15c48 <dtoa_prf+0x226>
   15cd4:	80 e3       	ldi	r24, 0x30	; 48
   15cd6:	db cf       	rjmp	.-74     	; 0x15c8e <dtoa_prf+0x26c>
   15cd8:	62 17       	cp	r22, r18
   15cda:	73 07       	cpc	r23, r19
   15cdc:	31 f4       	brne	.+12     	; 0x15cea <dtoa_prf+0x2c8>
   15cde:	96 33       	cpi	r25, 0x36	; 54
   15ce0:	88 f4       	brcc	.+34     	; 0x15d04 <dtoa_prf+0x2e2>
   15ce2:	95 33       	cpi	r25, 0x35	; 53
   15ce4:	11 f4       	brne	.+4      	; 0x15cea <dtoa_prf+0x2c8>
   15ce6:	55 23       	and	r21, r21
   15ce8:	69 f0       	breq	.+26     	; 0x15d04 <dtoa_prf+0x2e2>
   15cea:	f6 01       	movw	r30, r12
   15cec:	80 83       	st	Z, r24
   15cee:	fd 01       	movw	r30, r26
   15cf0:	84 2f       	mov	r24, r20
   15cf2:	90 e2       	ldi	r25, 0x20	; 32
   15cf4:	81 11       	cpse	r24, r1
   15cf6:	08 c0       	rjmp	.+16     	; 0x15d08 <dtoa_prf+0x2e6>
   15cf8:	a4 0f       	add	r26, r20
   15cfa:	b1 1d       	adc	r27, r1
   15cfc:	1c 92       	st	X, r1
   15cfe:	90 e0       	ldi	r25, 0x00	; 0
   15d00:	80 e0       	ldi	r24, 0x00	; 0
   15d02:	f3 ce       	rjmp	.-538    	; 0x15aea <dtoa_prf+0xc8>
   15d04:	81 e3       	ldi	r24, 0x31	; 49
   15d06:	f1 cf       	rjmp	.-30     	; 0x15cea <dtoa_prf+0x2c8>
   15d08:	91 93       	st	Z+, r25
   15d0a:	81 50       	subi	r24, 0x01	; 1
   15d0c:	f3 cf       	rjmp	.-26     	; 0x15cf4 <dtoa_prf+0x2d2>
   15d0e:	91 11       	cpse	r25, r1
   15d10:	83 cf       	rjmp	.-250    	; 0x15c18 <dtoa_prf+0x1f6>
   15d12:	8a cf       	rjmp	.-236    	; 0x15c28 <dtoa_prf+0x206>

00015d14 <malloc>:
malloc():
   15d14:	0f 93       	push	r16
   15d16:	1f 93       	push	r17
   15d18:	cf 93       	push	r28
   15d1a:	df 93       	push	r29
   15d1c:	82 30       	cpi	r24, 0x02	; 2
   15d1e:	91 05       	cpc	r25, r1
   15d20:	10 f4       	brcc	.+4      	; 0x15d26 <malloc+0x12>
   15d22:	82 e0       	ldi	r24, 0x02	; 2
   15d24:	90 e0       	ldi	r25, 0x00	; 0
   15d26:	e0 91 3d 13 	lds	r30, 0x133D	; 0x80133d <__flp>
   15d2a:	f0 91 3e 13 	lds	r31, 0x133E	; 0x80133e <__flp+0x1>
   15d2e:	30 e0       	ldi	r19, 0x00	; 0
   15d30:	20 e0       	ldi	r18, 0x00	; 0
   15d32:	b0 e0       	ldi	r27, 0x00	; 0
   15d34:	a0 e0       	ldi	r26, 0x00	; 0
   15d36:	30 97       	sbiw	r30, 0x00	; 0
   15d38:	99 f4       	brne	.+38     	; 0x15d60 <malloc+0x4c>
   15d3a:	21 15       	cp	r18, r1
   15d3c:	31 05       	cpc	r19, r1
   15d3e:	09 f4       	brne	.+2      	; 0x15d42 <malloc+0x2e>
   15d40:	4a c0       	rjmp	.+148    	; 0x15dd6 <malloc+0xc2>
   15d42:	28 1b       	sub	r18, r24
   15d44:	39 0b       	sbc	r19, r25
   15d46:	24 30       	cpi	r18, 0x04	; 4
   15d48:	31 05       	cpc	r19, r1
   15d4a:	d8 f5       	brcc	.+118    	; 0x15dc2 <malloc+0xae>
   15d4c:	8a 81       	ldd	r24, Y+2	; 0x02
   15d4e:	9b 81       	ldd	r25, Y+3	; 0x03
   15d50:	61 15       	cp	r22, r1
   15d52:	71 05       	cpc	r23, r1
   15d54:	89 f1       	breq	.+98     	; 0x15db8 <malloc+0xa4>
   15d56:	fb 01       	movw	r30, r22
   15d58:	93 83       	std	Z+3, r25	; 0x03
   15d5a:	82 83       	std	Z+2, r24	; 0x02
   15d5c:	fe 01       	movw	r30, r28
   15d5e:	11 c0       	rjmp	.+34     	; 0x15d82 <malloc+0x6e>
   15d60:	40 81       	ld	r20, Z
   15d62:	51 81       	ldd	r21, Z+1	; 0x01
   15d64:	02 81       	ldd	r16, Z+2	; 0x02
   15d66:	13 81       	ldd	r17, Z+3	; 0x03
   15d68:	48 17       	cp	r20, r24
   15d6a:	59 07       	cpc	r21, r25
   15d6c:	e0 f0       	brcs	.+56     	; 0x15da6 <malloc+0x92>
   15d6e:	48 17       	cp	r20, r24
   15d70:	59 07       	cpc	r21, r25
   15d72:	99 f4       	brne	.+38     	; 0x15d9a <malloc+0x86>
   15d74:	10 97       	sbiw	r26, 0x00	; 0
   15d76:	61 f0       	breq	.+24     	; 0x15d90 <malloc+0x7c>
   15d78:	12 96       	adiw	r26, 0x02	; 2
   15d7a:	0c 93       	st	X, r16
   15d7c:	12 97       	sbiw	r26, 0x02	; 2
   15d7e:	13 96       	adiw	r26, 0x03	; 3
   15d80:	1c 93       	st	X, r17
   15d82:	32 96       	adiw	r30, 0x02	; 2
   15d84:	cf 01       	movw	r24, r30
   15d86:	df 91       	pop	r29
   15d88:	cf 91       	pop	r28
   15d8a:	1f 91       	pop	r17
   15d8c:	0f 91       	pop	r16
   15d8e:	08 95       	ret
   15d90:	00 93 3d 13 	sts	0x133D, r16	; 0x80133d <__flp>
   15d94:	10 93 3e 13 	sts	0x133E, r17	; 0x80133e <__flp+0x1>
   15d98:	f4 cf       	rjmp	.-24     	; 0x15d82 <malloc+0x6e>
   15d9a:	21 15       	cp	r18, r1
   15d9c:	31 05       	cpc	r19, r1
   15d9e:	51 f0       	breq	.+20     	; 0x15db4 <malloc+0xa0>
   15da0:	42 17       	cp	r20, r18
   15da2:	53 07       	cpc	r21, r19
   15da4:	38 f0       	brcs	.+14     	; 0x15db4 <malloc+0xa0>
   15da6:	a9 01       	movw	r20, r18
   15da8:	db 01       	movw	r26, r22
   15daa:	9a 01       	movw	r18, r20
   15dac:	bd 01       	movw	r22, r26
   15dae:	df 01       	movw	r26, r30
   15db0:	f8 01       	movw	r30, r16
   15db2:	c1 cf       	rjmp	.-126    	; 0x15d36 <malloc+0x22>
   15db4:	ef 01       	movw	r28, r30
   15db6:	f9 cf       	rjmp	.-14     	; 0x15daa <malloc+0x96>
   15db8:	90 93 3e 13 	sts	0x133E, r25	; 0x80133e <__flp+0x1>
   15dbc:	80 93 3d 13 	sts	0x133D, r24	; 0x80133d <__flp>
   15dc0:	cd cf       	rjmp	.-102    	; 0x15d5c <malloc+0x48>
   15dc2:	fe 01       	movw	r30, r28
   15dc4:	e2 0f       	add	r30, r18
   15dc6:	f3 1f       	adc	r31, r19
   15dc8:	81 93       	st	Z+, r24
   15dca:	91 93       	st	Z+, r25
   15dcc:	22 50       	subi	r18, 0x02	; 2
   15dce:	31 09       	sbc	r19, r1
   15dd0:	39 83       	std	Y+1, r19	; 0x01
   15dd2:	28 83       	st	Y, r18
   15dd4:	d7 cf       	rjmp	.-82     	; 0x15d84 <malloc+0x70>
   15dd6:	20 91 3b 13 	lds	r18, 0x133B	; 0x80133b <__brkval>
   15dda:	30 91 3c 13 	lds	r19, 0x133C	; 0x80133c <__brkval+0x1>
   15dde:	23 2b       	or	r18, r19
   15de0:	41 f4       	brne	.+16     	; 0x15df2 <malloc+0xde>
   15de2:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__malloc_heap_start>
   15de6:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__malloc_heap_start+0x1>
   15dea:	30 93 3c 13 	sts	0x133C, r19	; 0x80133c <__brkval+0x1>
   15dee:	20 93 3b 13 	sts	0x133B, r18	; 0x80133b <__brkval>
   15df2:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__malloc_heap_end>
   15df6:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   15dfa:	21 15       	cp	r18, r1
   15dfc:	31 05       	cpc	r19, r1
   15dfe:	41 f4       	brne	.+16     	; 0x15e10 <malloc+0xfc>
   15e00:	2d b7       	in	r18, 0x3d	; 61
   15e02:	3e b7       	in	r19, 0x3e	; 62
   15e04:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   15e08:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   15e0c:	24 1b       	sub	r18, r20
   15e0e:	35 0b       	sbc	r19, r21
   15e10:	e0 91 3b 13 	lds	r30, 0x133B	; 0x80133b <__brkval>
   15e14:	f0 91 3c 13 	lds	r31, 0x133C	; 0x80133c <__brkval+0x1>
   15e18:	e2 17       	cp	r30, r18
   15e1a:	f3 07       	cpc	r31, r19
   15e1c:	a0 f4       	brcc	.+40     	; 0x15e46 <malloc+0x132>
   15e1e:	2e 1b       	sub	r18, r30
   15e20:	3f 0b       	sbc	r19, r31
   15e22:	28 17       	cp	r18, r24
   15e24:	39 07       	cpc	r19, r25
   15e26:	78 f0       	brcs	.+30     	; 0x15e46 <malloc+0x132>
   15e28:	ac 01       	movw	r20, r24
   15e2a:	4e 5f       	subi	r20, 0xFE	; 254
   15e2c:	5f 4f       	sbci	r21, 0xFF	; 255
   15e2e:	24 17       	cp	r18, r20
   15e30:	35 07       	cpc	r19, r21
   15e32:	48 f0       	brcs	.+18     	; 0x15e46 <malloc+0x132>
   15e34:	4e 0f       	add	r20, r30
   15e36:	5f 1f       	adc	r21, r31
   15e38:	50 93 3c 13 	sts	0x133C, r21	; 0x80133c <__brkval+0x1>
   15e3c:	40 93 3b 13 	sts	0x133B, r20	; 0x80133b <__brkval>
   15e40:	81 93       	st	Z+, r24
   15e42:	91 93       	st	Z+, r25
   15e44:	9f cf       	rjmp	.-194    	; 0x15d84 <malloc+0x70>
   15e46:	f0 e0       	ldi	r31, 0x00	; 0
   15e48:	e0 e0       	ldi	r30, 0x00	; 0
   15e4a:	9c cf       	rjmp	.-200    	; 0x15d84 <malloc+0x70>

00015e4c <free>:
free():
   15e4c:	cf 93       	push	r28
   15e4e:	df 93       	push	r29
   15e50:	00 97       	sbiw	r24, 0x00	; 0
   15e52:	e9 f0       	breq	.+58     	; 0x15e8e <free+0x42>
   15e54:	fc 01       	movw	r30, r24
   15e56:	32 97       	sbiw	r30, 0x02	; 2
   15e58:	13 82       	std	Z+3, r1	; 0x03
   15e5a:	12 82       	std	Z+2, r1	; 0x02
   15e5c:	a0 91 3d 13 	lds	r26, 0x133D	; 0x80133d <__flp>
   15e60:	b0 91 3e 13 	lds	r27, 0x133E	; 0x80133e <__flp+0x1>
   15e64:	ed 01       	movw	r28, r26
   15e66:	30 e0       	ldi	r19, 0x00	; 0
   15e68:	20 e0       	ldi	r18, 0x00	; 0
   15e6a:	10 97       	sbiw	r26, 0x00	; 0
   15e6c:	a1 f4       	brne	.+40     	; 0x15e96 <free+0x4a>
   15e6e:	20 81       	ld	r18, Z
   15e70:	31 81       	ldd	r19, Z+1	; 0x01
   15e72:	82 0f       	add	r24, r18
   15e74:	93 1f       	adc	r25, r19
   15e76:	20 91 3b 13 	lds	r18, 0x133B	; 0x80133b <__brkval>
   15e7a:	30 91 3c 13 	lds	r19, 0x133C	; 0x80133c <__brkval+0x1>
   15e7e:	28 17       	cp	r18, r24
   15e80:	39 07       	cpc	r19, r25
   15e82:	09 f0       	breq	.+2      	; 0x15e86 <free+0x3a>
   15e84:	61 c0       	rjmp	.+194    	; 0x15f48 <free+0xfc>
   15e86:	f0 93 3c 13 	sts	0x133C, r31	; 0x80133c <__brkval+0x1>
   15e8a:	e0 93 3b 13 	sts	0x133B, r30	; 0x80133b <__brkval>
   15e8e:	df 91       	pop	r29
   15e90:	cf 91       	pop	r28
   15e92:	08 95       	ret
   15e94:	ea 01       	movw	r28, r20
   15e96:	ce 17       	cp	r28, r30
   15e98:	df 07       	cpc	r29, r31
   15e9a:	e8 f5       	brcc	.+122    	; 0x15f16 <free+0xca>
   15e9c:	4a 81       	ldd	r20, Y+2	; 0x02
   15e9e:	5b 81       	ldd	r21, Y+3	; 0x03
   15ea0:	9e 01       	movw	r18, r28
   15ea2:	41 15       	cp	r20, r1
   15ea4:	51 05       	cpc	r21, r1
   15ea6:	b1 f7       	brne	.-20     	; 0x15e94 <free+0x48>
   15ea8:	e9 01       	movw	r28, r18
   15eaa:	fb 83       	std	Y+3, r31	; 0x03
   15eac:	ea 83       	std	Y+2, r30	; 0x02
   15eae:	49 91       	ld	r20, Y+
   15eb0:	59 91       	ld	r21, Y+
   15eb2:	c4 0f       	add	r28, r20
   15eb4:	d5 1f       	adc	r29, r21
   15eb6:	ec 17       	cp	r30, r28
   15eb8:	fd 07       	cpc	r31, r29
   15eba:	61 f4       	brne	.+24     	; 0x15ed4 <free+0x88>
   15ebc:	80 81       	ld	r24, Z
   15ebe:	91 81       	ldd	r25, Z+1	; 0x01
   15ec0:	02 96       	adiw	r24, 0x02	; 2
   15ec2:	84 0f       	add	r24, r20
   15ec4:	95 1f       	adc	r25, r21
   15ec6:	e9 01       	movw	r28, r18
   15ec8:	99 83       	std	Y+1, r25	; 0x01
   15eca:	88 83       	st	Y, r24
   15ecc:	82 81       	ldd	r24, Z+2	; 0x02
   15ece:	93 81       	ldd	r25, Z+3	; 0x03
   15ed0:	9b 83       	std	Y+3, r25	; 0x03
   15ed2:	8a 83       	std	Y+2, r24	; 0x02
   15ed4:	f0 e0       	ldi	r31, 0x00	; 0
   15ed6:	e0 e0       	ldi	r30, 0x00	; 0
   15ed8:	12 96       	adiw	r26, 0x02	; 2
   15eda:	8d 91       	ld	r24, X+
   15edc:	9c 91       	ld	r25, X
   15ede:	13 97       	sbiw	r26, 0x03	; 3
   15ee0:	00 97       	sbiw	r24, 0x00	; 0
   15ee2:	b9 f5       	brne	.+110    	; 0x15f52 <free+0x106>
   15ee4:	2d 91       	ld	r18, X+
   15ee6:	3c 91       	ld	r19, X
   15ee8:	11 97       	sbiw	r26, 0x01	; 1
   15eea:	cd 01       	movw	r24, r26
   15eec:	02 96       	adiw	r24, 0x02	; 2
   15eee:	82 0f       	add	r24, r18
   15ef0:	93 1f       	adc	r25, r19
   15ef2:	20 91 3b 13 	lds	r18, 0x133B	; 0x80133b <__brkval>
   15ef6:	30 91 3c 13 	lds	r19, 0x133C	; 0x80133c <__brkval+0x1>
   15efa:	28 17       	cp	r18, r24
   15efc:	39 07       	cpc	r19, r25
   15efe:	39 f6       	brne	.-114    	; 0x15e8e <free+0x42>
   15f00:	30 97       	sbiw	r30, 0x00	; 0
   15f02:	51 f5       	brne	.+84     	; 0x15f58 <free+0x10c>
   15f04:	10 92 3e 13 	sts	0x133E, r1	; 0x80133e <__flp+0x1>
   15f08:	10 92 3d 13 	sts	0x133D, r1	; 0x80133d <__flp>
   15f0c:	b0 93 3c 13 	sts	0x133C, r27	; 0x80133c <__brkval+0x1>
   15f10:	a0 93 3b 13 	sts	0x133B, r26	; 0x80133b <__brkval>
   15f14:	bc cf       	rjmp	.-136    	; 0x15e8e <free+0x42>
   15f16:	d3 83       	std	Z+3, r29	; 0x03
   15f18:	c2 83       	std	Z+2, r28	; 0x02
   15f1a:	40 81       	ld	r20, Z
   15f1c:	51 81       	ldd	r21, Z+1	; 0x01
   15f1e:	84 0f       	add	r24, r20
   15f20:	95 1f       	adc	r25, r21
   15f22:	c8 17       	cp	r28, r24
   15f24:	d9 07       	cpc	r29, r25
   15f26:	61 f4       	brne	.+24     	; 0x15f40 <free+0xf4>
   15f28:	4e 5f       	subi	r20, 0xFE	; 254
   15f2a:	5f 4f       	sbci	r21, 0xFF	; 255
   15f2c:	88 81       	ld	r24, Y
   15f2e:	99 81       	ldd	r25, Y+1	; 0x01
   15f30:	48 0f       	add	r20, r24
   15f32:	59 1f       	adc	r21, r25
   15f34:	51 83       	std	Z+1, r21	; 0x01
   15f36:	40 83       	st	Z, r20
   15f38:	8a 81       	ldd	r24, Y+2	; 0x02
   15f3a:	9b 81       	ldd	r25, Y+3	; 0x03
   15f3c:	93 83       	std	Z+3, r25	; 0x03
   15f3e:	82 83       	std	Z+2, r24	; 0x02
   15f40:	21 15       	cp	r18, r1
   15f42:	31 05       	cpc	r19, r1
   15f44:	09 f0       	breq	.+2      	; 0x15f48 <free+0xfc>
   15f46:	b0 cf       	rjmp	.-160    	; 0x15ea8 <free+0x5c>
   15f48:	f0 93 3e 13 	sts	0x133E, r31	; 0x80133e <__flp+0x1>
   15f4c:	e0 93 3d 13 	sts	0x133D, r30	; 0x80133d <__flp>
   15f50:	9e cf       	rjmp	.-196    	; 0x15e8e <free+0x42>
   15f52:	fd 01       	movw	r30, r26
   15f54:	dc 01       	movw	r26, r24
   15f56:	c0 cf       	rjmp	.-128    	; 0x15ed8 <free+0x8c>
   15f58:	13 82       	std	Z+3, r1	; 0x03
   15f5a:	12 82       	std	Z+2, r1	; 0x02
   15f5c:	d7 cf       	rjmp	.-82     	; 0x15f0c <free+0xc0>

00015f5e <strtod>:
strtod():
   15f5e:	8f 92       	push	r8
   15f60:	9f 92       	push	r9
   15f62:	af 92       	push	r10
   15f64:	bf 92       	push	r11
   15f66:	cf 92       	push	r12
   15f68:	df 92       	push	r13
   15f6a:	ef 92       	push	r14
   15f6c:	ff 92       	push	r15
   15f6e:	0f 93       	push	r16
   15f70:	1f 93       	push	r17
   15f72:	cf 93       	push	r28
   15f74:	df 93       	push	r29
   15f76:	5c 01       	movw	r10, r24
   15f78:	7b 01       	movw	r14, r22
   15f7a:	61 15       	cp	r22, r1
   15f7c:	71 05       	cpc	r23, r1
   15f7e:	19 f0       	breq	.+6      	; 0x15f86 <strtod+0x28>
   15f80:	db 01       	movw	r26, r22
   15f82:	8d 93       	st	X+, r24
   15f84:	9c 93       	st	X, r25
   15f86:	85 01       	movw	r16, r10
   15f88:	0f 5f       	subi	r16, 0xFF	; 255
   15f8a:	1f 4f       	sbci	r17, 0xFF	; 255
   15f8c:	f5 01       	movw	r30, r10
   15f8e:	d0 81       	ld	r29, Z
   15f90:	8d 2f       	mov	r24, r29
   15f92:	90 e0       	ldi	r25, 0x00	; 0
   15f94:	0e 94 2a aa 	call	0x15454	; 0x15454 <isspace>
   15f98:	6c 01       	movw	r12, r24
   15f9a:	89 2b       	or	r24, r25
   15f9c:	b9 f5       	brne	.+110    	; 0x1600c <strtod+0xae>
   15f9e:	dd 32       	cpi	r29, 0x2D	; 45
   15fa0:	b9 f5       	brne	.+110    	; 0x16010 <strtod+0xb2>
   15fa2:	0f 5f       	subi	r16, 0xFF	; 255
   15fa4:	1f 4f       	sbci	r17, 0xFF	; 255
   15fa6:	d5 01       	movw	r26, r10
   15fa8:	11 96       	adiw	r26, 0x01	; 1
   15faa:	dc 91       	ld	r29, X
   15fac:	c1 e0       	ldi	r28, 0x01	; 1
   15fae:	58 01       	movw	r10, r16
   15fb0:	f1 e0       	ldi	r31, 0x01	; 1
   15fb2:	af 1a       	sub	r10, r31
   15fb4:	b1 08       	sbc	r11, r1
   15fb6:	43 e0       	ldi	r20, 0x03	; 3
   15fb8:	50 e0       	ldi	r21, 0x00	; 0
   15fba:	6c e4       	ldi	r22, 0x4C	; 76
   15fbc:	73 e0       	ldi	r23, 0x03	; 3
   15fbe:	c5 01       	movw	r24, r10
   15fc0:	0e 94 e8 b1 	call	0x163d0	; 0x163d0 <strncasecmp_P>
   15fc4:	89 2b       	or	r24, r25
   15fc6:	69 f5       	brne	.+90     	; 0x16022 <strtod+0xc4>
   15fc8:	68 01       	movw	r12, r16
   15fca:	82 e0       	ldi	r24, 0x02	; 2
   15fcc:	c8 0e       	add	r12, r24
   15fce:	d1 1c       	adc	r13, r1
   15fd0:	45 e0       	ldi	r20, 0x05	; 5
   15fd2:	50 e0       	ldi	r21, 0x00	; 0
   15fd4:	67 e4       	ldi	r22, 0x47	; 71
   15fd6:	73 e0       	ldi	r23, 0x03	; 3
   15fd8:	c6 01       	movw	r24, r12
   15fda:	0e 94 e8 b1 	call	0x163d0	; 0x163d0 <strncasecmp_P>
   15fde:	89 2b       	or	r24, r25
   15fe0:	21 f4       	brne	.+8      	; 0x15fea <strtod+0x8c>
   15fe2:	68 01       	movw	r12, r16
   15fe4:	97 e0       	ldi	r25, 0x07	; 7
   15fe6:	c9 0e       	add	r12, r25
   15fe8:	d1 1c       	adc	r13, r1
   15fea:	e1 14       	cp	r14, r1
   15fec:	f1 04       	cpc	r15, r1
   15fee:	19 f0       	breq	.+6      	; 0x15ff6 <strtod+0x98>
   15ff0:	d7 01       	movw	r26, r14
   15ff2:	cd 92       	st	X+, r12
   15ff4:	dc 92       	st	X, r13
   15ff6:	60 e0       	ldi	r22, 0x00	; 0
   15ff8:	70 e0       	ldi	r23, 0x00	; 0
   15ffa:	80 e8       	ldi	r24, 0x80	; 128
   15ffc:	9f ef       	ldi	r25, 0xFF	; 255
   15ffe:	c1 11       	cpse	r28, r1
   16000:	ff c0       	rjmp	.+510    	; 0x16200 <strtod+0x2a2>
   16002:	60 e0       	ldi	r22, 0x00	; 0
   16004:	70 e0       	ldi	r23, 0x00	; 0
   16006:	80 e8       	ldi	r24, 0x80	; 128
   16008:	9f e7       	ldi	r25, 0x7F	; 127
   1600a:	fa c0       	rjmp	.+500    	; 0x16200 <strtod+0x2a2>
   1600c:	58 01       	movw	r10, r16
   1600e:	bb cf       	rjmp	.-138    	; 0x15f86 <strtod+0x28>
   16010:	db 32       	cpi	r29, 0x2B	; 43
   16012:	29 f4       	brne	.+10     	; 0x1601e <strtod+0xc0>
   16014:	85 01       	movw	r16, r10
   16016:	0e 5f       	subi	r16, 0xFE	; 254
   16018:	1f 4f       	sbci	r17, 0xFF	; 255
   1601a:	f5 01       	movw	r30, r10
   1601c:	d1 81       	ldd	r29, Z+1	; 0x01
   1601e:	c0 e0       	ldi	r28, 0x00	; 0
   16020:	c6 cf       	rjmp	.-116    	; 0x15fae <strtod+0x50>
   16022:	43 e0       	ldi	r20, 0x03	; 3
   16024:	50 e0       	ldi	r21, 0x00	; 0
   16026:	64 e4       	ldi	r22, 0x44	; 68
   16028:	73 e0       	ldi	r23, 0x03	; 3
   1602a:	c5 01       	movw	r24, r10
   1602c:	0e 94 e8 b1 	call	0x163d0	; 0x163d0 <strncasecmp_P>
   16030:	89 2b       	or	r24, r25
   16032:	e9 f0       	breq	.+58     	; 0x1606e <strtod+0x110>
   16034:	f8 01       	movw	r30, r16
   16036:	10 e0       	ldi	r17, 0x00	; 0
   16038:	00 e0       	ldi	r16, 0x00	; 0
   1603a:	20 e0       	ldi	r18, 0x00	; 0
   1603c:	30 e0       	ldi	r19, 0x00	; 0
   1603e:	a9 01       	movw	r20, r18
   16040:	5f 01       	movw	r10, r30
   16042:	b0 ed       	ldi	r27, 0xD0	; 208
   16044:	8b 2e       	mov	r8, r27
   16046:	8d 0e       	add	r8, r29
   16048:	89 e0       	ldi	r24, 0x09	; 9
   1604a:	88 15       	cp	r24, r8
   1604c:	c8 f1       	brcs	.+114    	; 0x160c0 <strtod+0x162>
   1604e:	9c 2e       	mov	r9, r28
   16050:	68 94       	set
   16052:	91 f8       	bld	r9, 1
   16054:	8c 2f       	mov	r24, r28
   16056:	88 70       	andi	r24, 0x08	; 8
   16058:	c2 ff       	sbrs	r28, 2
   1605a:	16 c0       	rjmp	.+44     	; 0x16088 <strtod+0x12a>
   1605c:	81 11       	cpse	r24, r1
   1605e:	02 c0       	rjmp	.+4      	; 0x16064 <strtod+0x106>
   16060:	0f 5f       	subi	r16, 0xFF	; 255
   16062:	1f 4f       	sbci	r17, 0xFF	; 255
   16064:	31 96       	adiw	r30, 0x01	; 1
   16066:	d5 01       	movw	r26, r10
   16068:	dc 91       	ld	r29, X
   1606a:	c9 2d       	mov	r28, r9
   1606c:	e9 cf       	rjmp	.-46     	; 0x16040 <strtod+0xe2>
   1606e:	e1 14       	cp	r14, r1
   16070:	f1 04       	cpc	r15, r1
   16072:	29 f0       	breq	.+10     	; 0x1607e <strtod+0x120>
   16074:	0e 5f       	subi	r16, 0xFE	; 254
   16076:	1f 4f       	sbci	r17, 0xFF	; 255
   16078:	f7 01       	movw	r30, r14
   1607a:	11 83       	std	Z+1, r17	; 0x01
   1607c:	00 83       	st	Z, r16
   1607e:	60 e0       	ldi	r22, 0x00	; 0
   16080:	70 e0       	ldi	r23, 0x00	; 0
   16082:	80 ec       	ldi	r24, 0xC0	; 192
   16084:	9f e7       	ldi	r25, 0x7F	; 127
   16086:	bc c0       	rjmp	.+376    	; 0x16200 <strtod+0x2a2>
   16088:	88 23       	and	r24, r24
   1608a:	11 f0       	breq	.+4      	; 0x16090 <strtod+0x132>
   1608c:	01 50       	subi	r16, 0x01	; 1
   1608e:	11 09       	sbc	r17, r1
   16090:	a5 e0       	ldi	r26, 0x05	; 5
   16092:	b0 e0       	ldi	r27, 0x00	; 0
   16094:	0e 94 6e b4 	call	0x168dc	; 0x168dc <__muluhisi3>
   16098:	9b 01       	movw	r18, r22
   1609a:	ac 01       	movw	r20, r24
   1609c:	22 0f       	add	r18, r18
   1609e:	33 1f       	adc	r19, r19
   160a0:	44 1f       	adc	r20, r20
   160a2:	55 1f       	adc	r21, r21
   160a4:	28 0d       	add	r18, r8
   160a6:	31 1d       	adc	r19, r1
   160a8:	41 1d       	adc	r20, r1
   160aa:	51 1d       	adc	r21, r1
   160ac:	28 39       	cpi	r18, 0x98	; 152
   160ae:	99 e9       	ldi	r25, 0x99	; 153
   160b0:	39 07       	cpc	r19, r25
   160b2:	49 07       	cpc	r20, r25
   160b4:	99 e1       	ldi	r25, 0x19	; 25
   160b6:	59 07       	cpc	r21, r25
   160b8:	a8 f2       	brcs	.-86     	; 0x16064 <strtod+0x106>
   160ba:	c6 60       	ori	r28, 0x06	; 6
   160bc:	9c 2e       	mov	r9, r28
   160be:	d2 cf       	rjmp	.-92     	; 0x16064 <strtod+0x106>
   160c0:	ae ef       	ldi	r26, 0xFE	; 254
   160c2:	8a 12       	cpse	r8, r26
   160c4:	06 c0       	rjmp	.+12     	; 0x160d2 <strtod+0x174>
   160c6:	c3 fd       	sbrc	r28, 3
   160c8:	3c c0       	rjmp	.+120    	; 0x16142 <strtod+0x1e4>
   160ca:	9c 2e       	mov	r9, r28
   160cc:	68 94       	set
   160ce:	93 f8       	bld	r9, 3
   160d0:	c9 cf       	rjmp	.-110    	; 0x16064 <strtod+0x106>
   160d2:	df 7d       	andi	r29, 0xDF	; 223
   160d4:	d5 34       	cpi	r29, 0x45	; 69
   160d6:	a9 f5       	brne	.+106    	; 0x16142 <strtod+0x1e4>
   160d8:	80 81       	ld	r24, Z
   160da:	8d 32       	cpi	r24, 0x2D	; 45
   160dc:	39 f4       	brne	.+14     	; 0x160ec <strtod+0x18e>
   160de:	c0 61       	ori	r28, 0x10	; 16
   160e0:	df 01       	movw	r26, r30
   160e2:	12 96       	adiw	r26, 0x02	; 2
   160e4:	81 81       	ldd	r24, Z+1	; 0x01
   160e6:	62 e0       	ldi	r22, 0x02	; 2
   160e8:	70 e0       	ldi	r23, 0x00	; 0
   160ea:	06 c0       	rjmp	.+12     	; 0x160f8 <strtod+0x19a>
   160ec:	df 01       	movw	r26, r30
   160ee:	8b 32       	cpi	r24, 0x2B	; 43
   160f0:	c1 f3       	breq	.-16     	; 0x160e2 <strtod+0x184>
   160f2:	11 96       	adiw	r26, 0x01	; 1
   160f4:	61 e0       	ldi	r22, 0x01	; 1
   160f6:	70 e0       	ldi	r23, 0x00	; 0
   160f8:	80 53       	subi	r24, 0x30	; 48
   160fa:	5d 01       	movw	r10, r26
   160fc:	a6 1a       	sub	r10, r22
   160fe:	b7 0a       	sbc	r11, r23
   16100:	8a 30       	cpi	r24, 0x0A	; 10
   16102:	f8 f4       	brcc	.+62     	; 0x16142 <strtod+0x1e4>
   16104:	e0 e8       	ldi	r30, 0x80	; 128
   16106:	ce 16       	cp	r12, r30
   16108:	ec e0       	ldi	r30, 0x0C	; 12
   1610a:	de 06       	cpc	r13, r30
   1610c:	5c f4       	brge	.+22     	; 0x16124 <strtod+0x1c6>
   1610e:	b6 01       	movw	r22, r12
   16110:	66 0f       	add	r22, r22
   16112:	77 1f       	adc	r23, r23
   16114:	66 0f       	add	r22, r22
   16116:	77 1f       	adc	r23, r23
   16118:	c6 0e       	add	r12, r22
   1611a:	d7 1e       	adc	r13, r23
   1611c:	cc 0c       	add	r12, r12
   1611e:	dd 1c       	adc	r13, r13
   16120:	c8 0e       	add	r12, r24
   16122:	d1 1c       	adc	r13, r1
   16124:	5d 01       	movw	r10, r26
   16126:	ff ef       	ldi	r31, 0xFF	; 255
   16128:	af 1a       	sub	r10, r31
   1612a:	bf 0a       	sbc	r11, r31
   1612c:	8c 91       	ld	r24, X
   1612e:	80 53       	subi	r24, 0x30	; 48
   16130:	8a 30       	cpi	r24, 0x0A	; 10
   16132:	a8 f1       	brcs	.+106    	; 0x1619e <strtod+0x240>
   16134:	c4 ff       	sbrs	r28, 4
   16136:	03 c0       	rjmp	.+6      	; 0x1613e <strtod+0x1e0>
   16138:	d1 94       	neg	r13
   1613a:	c1 94       	neg	r12
   1613c:	d1 08       	sbc	r13, r1
   1613e:	0c 0d       	add	r16, r12
   16140:	1d 1d       	adc	r17, r13
   16142:	c1 ff       	sbrs	r28, 1
   16144:	09 c0       	rjmp	.+18     	; 0x16158 <strtod+0x1fa>
   16146:	e1 14       	cp	r14, r1
   16148:	f1 04       	cpc	r15, r1
   1614a:	31 f0       	breq	.+12     	; 0x16158 <strtod+0x1fa>
   1614c:	81 e0       	ldi	r24, 0x01	; 1
   1614e:	a8 1a       	sub	r10, r24
   16150:	b1 08       	sbc	r11, r1
   16152:	d7 01       	movw	r26, r14
   16154:	ad 92       	st	X+, r10
   16156:	bc 92       	st	X, r11
   16158:	ca 01       	movw	r24, r20
   1615a:	b9 01       	movw	r22, r18
   1615c:	0e 94 c0 b2 	call	0x16580	; 0x16580 <__floatunsisf>
   16160:	c3 70       	andi	r28, 0x03	; 3
   16162:	c3 30       	cpi	r28, 0x03	; 3
   16164:	09 f4       	brne	.+2      	; 0x16168 <strtod+0x20a>
   16166:	90 58       	subi	r25, 0x80	; 128
   16168:	4b 01       	movw	r8, r22
   1616a:	5c 01       	movw	r10, r24
   1616c:	20 e0       	ldi	r18, 0x00	; 0
   1616e:	30 e0       	ldi	r19, 0x00	; 0
   16170:	a9 01       	movw	r20, r18
   16172:	0e 94 bb b2 	call	0x16576	; 0x16576 <__cmpsf2>
   16176:	88 23       	and	r24, r24
   16178:	09 f4       	brne	.+2      	; 0x1617c <strtod+0x21e>
   1617a:	40 c0       	rjmp	.+128    	; 0x161fc <strtod+0x29e>
   1617c:	cb e7       	ldi	r28, 0x7B	; 123
   1617e:	d3 e0       	ldi	r29, 0x03	; 3
   16180:	17 ff       	sbrs	r17, 7
   16182:	05 c0       	rjmp	.+10     	; 0x1618e <strtod+0x230>
   16184:	11 95       	neg	r17
   16186:	01 95       	neg	r16
   16188:	11 09       	sbc	r17, r1
   1618a:	c3 e6       	ldi	r28, 0x63	; 99
   1618c:	d3 e0       	ldi	r29, 0x03	; 3
   1618e:	6e 01       	movw	r12, r28
   16190:	b8 e1       	ldi	r27, 0x18	; 24
   16192:	cb 1a       	sub	r12, r27
   16194:	d1 08       	sbc	r13, r1
   16196:	80 e2       	ldi	r24, 0x20	; 32
   16198:	e8 2e       	mov	r14, r24
   1619a:	f1 2c       	mov	r15, r1
   1619c:	0f c0       	rjmp	.+30     	; 0x161bc <strtod+0x25e>
   1619e:	d5 01       	movw	r26, r10
   161a0:	b1 cf       	rjmp	.-158    	; 0x16104 <strtod+0x1a6>
   161a2:	fe 01       	movw	r30, r28
   161a4:	25 91       	lpm	r18, Z+
   161a6:	35 91       	lpm	r19, Z+
   161a8:	45 91       	lpm	r20, Z+
   161aa:	54 91       	lpm	r21, Z
   161ac:	0e 19       	sub	r16, r14
   161ae:	1f 09       	sbc	r17, r15
   161b0:	c5 01       	movw	r24, r10
   161b2:	b4 01       	movw	r22, r8
   161b4:	0e 94 21 b3 	call	0x16642	; 0x16642 <__mulsf3>
   161b8:	4b 01       	movw	r8, r22
   161ba:	5c 01       	movw	r10, r24
   161bc:	d5 01       	movw	r26, r10
   161be:	c4 01       	movw	r24, r8
   161c0:	0e 15       	cp	r16, r14
   161c2:	1f 05       	cpc	r17, r15
   161c4:	74 f7       	brge	.-36     	; 0x161a2 <strtod+0x244>
   161c6:	24 97       	sbiw	r28, 0x04	; 4
   161c8:	f5 94       	asr	r15
   161ca:	e7 94       	ror	r14
   161cc:	cc 16       	cp	r12, r28
   161ce:	dd 06       	cpc	r13, r29
   161d0:	a9 f7       	brne	.-22     	; 0x161bc <strtod+0x25e>
   161d2:	8a 2f       	mov	r24, r26
   161d4:	88 0f       	add	r24, r24
   161d6:	8b 2f       	mov	r24, r27
   161d8:	88 1f       	adc	r24, r24
   161da:	8f 3f       	cpi	r24, 0xFF	; 255
   161dc:	49 f0       	breq	.+18     	; 0x161f0 <strtod+0x292>
   161de:	20 e0       	ldi	r18, 0x00	; 0
   161e0:	30 e0       	ldi	r19, 0x00	; 0
   161e2:	a9 01       	movw	r20, r18
   161e4:	c5 01       	movw	r24, r10
   161e6:	b4 01       	movw	r22, r8
   161e8:	0e 94 bb b2 	call	0x16576	; 0x16576 <__cmpsf2>
   161ec:	81 11       	cpse	r24, r1
   161ee:	06 c0       	rjmp	.+12     	; 0x161fc <strtod+0x29e>
   161f0:	82 e2       	ldi	r24, 0x22	; 34
   161f2:	90 e0       	ldi	r25, 0x00	; 0
   161f4:	90 93 3a 13 	sts	0x133A, r25	; 0x80133a <errno+0x1>
   161f8:	80 93 39 13 	sts	0x1339, r24	; 0x801339 <errno>
   161fc:	c5 01       	movw	r24, r10
   161fe:	b4 01       	movw	r22, r8
   16200:	df 91       	pop	r29
   16202:	cf 91       	pop	r28
   16204:	1f 91       	pop	r17
   16206:	0f 91       	pop	r16
   16208:	ff 90       	pop	r15
   1620a:	ef 90       	pop	r14
   1620c:	df 90       	pop	r13
   1620e:	cf 90       	pop	r12
   16210:	bf 90       	pop	r11
   16212:	af 90       	pop	r10
   16214:	9f 90       	pop	r9
   16216:	8f 90       	pop	r8
   16218:	08 95       	ret

0001621a <__ftoa_engine>:
__ftoa_engine():
   1621a:	28 30       	cpi	r18, 0x08	; 8
   1621c:	08 f0       	brcs	.+2      	; 0x16220 <__ftoa_engine+0x6>
   1621e:	27 e0       	ldi	r18, 0x07	; 7
   16220:	33 27       	eor	r19, r19
   16222:	da 01       	movw	r26, r20
   16224:	99 0f       	add	r25, r25
   16226:	31 1d       	adc	r19, r1
   16228:	87 fd       	sbrc	r24, 7
   1622a:	91 60       	ori	r25, 0x01	; 1
   1622c:	00 96       	adiw	r24, 0x00	; 0
   1622e:	61 05       	cpc	r22, r1
   16230:	71 05       	cpc	r23, r1
   16232:	39 f4       	brne	.+14     	; 0x16242 <__ftoa_engine+0x28>
   16234:	32 60       	ori	r19, 0x02	; 2
   16236:	2e 5f       	subi	r18, 0xFE	; 254
   16238:	3d 93       	st	X+, r19
   1623a:	30 e3       	ldi	r19, 0x30	; 48
   1623c:	2a 95       	dec	r18
   1623e:	e1 f7       	brne	.-8      	; 0x16238 <__ftoa_engine+0x1e>
   16240:	08 95       	ret
   16242:	9f 3f       	cpi	r25, 0xFF	; 255
   16244:	30 f0       	brcs	.+12     	; 0x16252 <__ftoa_engine+0x38>
   16246:	80 38       	cpi	r24, 0x80	; 128
   16248:	71 05       	cpc	r23, r1
   1624a:	61 05       	cpc	r22, r1
   1624c:	09 f0       	breq	.+2      	; 0x16250 <__ftoa_engine+0x36>
   1624e:	3c 5f       	subi	r19, 0xFC	; 252
   16250:	3c 5f       	subi	r19, 0xFC	; 252
   16252:	3d 93       	st	X+, r19
   16254:	91 30       	cpi	r25, 0x01	; 1
   16256:	08 f0       	brcs	.+2      	; 0x1625a <__ftoa_engine+0x40>
   16258:	80 68       	ori	r24, 0x80	; 128
   1625a:	91 1d       	adc	r25, r1
   1625c:	df 93       	push	r29
   1625e:	cf 93       	push	r28
   16260:	1f 93       	push	r17
   16262:	0f 93       	push	r16
   16264:	ff 92       	push	r15
   16266:	ef 92       	push	r14
   16268:	19 2f       	mov	r17, r25
   1626a:	98 7f       	andi	r25, 0xF8	; 248
   1626c:	96 95       	lsr	r25
   1626e:	e9 2f       	mov	r30, r25
   16270:	96 95       	lsr	r25
   16272:	96 95       	lsr	r25
   16274:	e9 0f       	add	r30, r25
   16276:	ff 27       	eor	r31, r31
   16278:	e7 52       	subi	r30, 0x27	; 39
   1627a:	fc 4f       	sbci	r31, 0xFC	; 252
   1627c:	99 27       	eor	r25, r25
   1627e:	33 27       	eor	r19, r19
   16280:	ee 24       	eor	r14, r14
   16282:	ff 24       	eor	r15, r15
   16284:	a7 01       	movw	r20, r14
   16286:	e7 01       	movw	r28, r14
   16288:	05 90       	lpm	r0, Z+
   1628a:	08 94       	sec
   1628c:	07 94       	ror	r0
   1628e:	28 f4       	brcc	.+10     	; 0x1629a <__ftoa_engine+0x80>
   16290:	36 0f       	add	r19, r22
   16292:	e7 1e       	adc	r14, r23
   16294:	f8 1e       	adc	r15, r24
   16296:	49 1f       	adc	r20, r25
   16298:	51 1d       	adc	r21, r1
   1629a:	66 0f       	add	r22, r22
   1629c:	77 1f       	adc	r23, r23
   1629e:	88 1f       	adc	r24, r24
   162a0:	99 1f       	adc	r25, r25
   162a2:	06 94       	lsr	r0
   162a4:	a1 f7       	brne	.-24     	; 0x1628e <__ftoa_engine+0x74>
   162a6:	05 90       	lpm	r0, Z+
   162a8:	07 94       	ror	r0
   162aa:	28 f4       	brcc	.+10     	; 0x162b6 <__ftoa_engine+0x9c>
   162ac:	e7 0e       	add	r14, r23
   162ae:	f8 1e       	adc	r15, r24
   162b0:	49 1f       	adc	r20, r25
   162b2:	56 1f       	adc	r21, r22
   162b4:	c1 1d       	adc	r28, r1
   162b6:	77 0f       	add	r23, r23
   162b8:	88 1f       	adc	r24, r24
   162ba:	99 1f       	adc	r25, r25
   162bc:	66 1f       	adc	r22, r22
   162be:	06 94       	lsr	r0
   162c0:	a1 f7       	brne	.-24     	; 0x162aa <__ftoa_engine+0x90>
   162c2:	05 90       	lpm	r0, Z+
   162c4:	07 94       	ror	r0
   162c6:	28 f4       	brcc	.+10     	; 0x162d2 <__ftoa_engine+0xb8>
   162c8:	f8 0e       	add	r15, r24
   162ca:	49 1f       	adc	r20, r25
   162cc:	56 1f       	adc	r21, r22
   162ce:	c7 1f       	adc	r28, r23
   162d0:	d1 1d       	adc	r29, r1
   162d2:	88 0f       	add	r24, r24
   162d4:	99 1f       	adc	r25, r25
   162d6:	66 1f       	adc	r22, r22
   162d8:	77 1f       	adc	r23, r23
   162da:	06 94       	lsr	r0
   162dc:	a1 f7       	brne	.-24     	; 0x162c6 <__ftoa_engine+0xac>
   162de:	05 90       	lpm	r0, Z+
   162e0:	07 94       	ror	r0
   162e2:	20 f4       	brcc	.+8      	; 0x162ec <__ftoa_engine+0xd2>
   162e4:	49 0f       	add	r20, r25
   162e6:	56 1f       	adc	r21, r22
   162e8:	c7 1f       	adc	r28, r23
   162ea:	d8 1f       	adc	r29, r24
   162ec:	99 0f       	add	r25, r25
   162ee:	66 1f       	adc	r22, r22
   162f0:	77 1f       	adc	r23, r23
   162f2:	88 1f       	adc	r24, r24
   162f4:	06 94       	lsr	r0
   162f6:	a9 f7       	brne	.-22     	; 0x162e2 <__ftoa_engine+0xc8>
   162f8:	84 91       	lpm	r24, Z
   162fa:	10 95       	com	r17
   162fc:	17 70       	andi	r17, 0x07	; 7
   162fe:	41 f0       	breq	.+16     	; 0x16310 <__ftoa_engine+0xf6>
   16300:	d6 95       	lsr	r29
   16302:	c7 95       	ror	r28
   16304:	57 95       	ror	r21
   16306:	47 95       	ror	r20
   16308:	f7 94       	ror	r15
   1630a:	e7 94       	ror	r14
   1630c:	1a 95       	dec	r17
   1630e:	c1 f7       	brne	.-16     	; 0x16300 <__ftoa_engine+0xe6>
   16310:	ef e7       	ldi	r30, 0x7F	; 127
   16312:	f3 e0       	ldi	r31, 0x03	; 3
   16314:	68 94       	set
   16316:	15 90       	lpm	r1, Z+
   16318:	15 91       	lpm	r17, Z+
   1631a:	35 91       	lpm	r19, Z+
   1631c:	65 91       	lpm	r22, Z+
   1631e:	95 91       	lpm	r25, Z+
   16320:	05 90       	lpm	r0, Z+
   16322:	7f e2       	ldi	r23, 0x2F	; 47
   16324:	73 95       	inc	r23
   16326:	e1 18       	sub	r14, r1
   16328:	f1 0a       	sbc	r15, r17
   1632a:	43 0b       	sbc	r20, r19
   1632c:	56 0b       	sbc	r21, r22
   1632e:	c9 0b       	sbc	r28, r25
   16330:	d0 09       	sbc	r29, r0
   16332:	c0 f7       	brcc	.-16     	; 0x16324 <__ftoa_engine+0x10a>
   16334:	e1 0c       	add	r14, r1
   16336:	f1 1e       	adc	r15, r17
   16338:	43 1f       	adc	r20, r19
   1633a:	56 1f       	adc	r21, r22
   1633c:	c9 1f       	adc	r28, r25
   1633e:	d0 1d       	adc	r29, r0
   16340:	7e f4       	brtc	.+30     	; 0x16360 <__ftoa_engine+0x146>
   16342:	70 33       	cpi	r23, 0x30	; 48
   16344:	11 f4       	brne	.+4      	; 0x1634a <__ftoa_engine+0x130>
   16346:	8a 95       	dec	r24
   16348:	e6 cf       	rjmp	.-52     	; 0x16316 <__ftoa_engine+0xfc>
   1634a:	e8 94       	clt
   1634c:	01 50       	subi	r16, 0x01	; 1
   1634e:	30 f0       	brcs	.+12     	; 0x1635c <__ftoa_engine+0x142>
   16350:	08 0f       	add	r16, r24
   16352:	0a f4       	brpl	.+2      	; 0x16356 <__ftoa_engine+0x13c>
   16354:	00 27       	eor	r16, r16
   16356:	02 17       	cp	r16, r18
   16358:	08 f4       	brcc	.+2      	; 0x1635c <__ftoa_engine+0x142>
   1635a:	20 2f       	mov	r18, r16
   1635c:	23 95       	inc	r18
   1635e:	02 2f       	mov	r16, r18
   16360:	7a 33       	cpi	r23, 0x3A	; 58
   16362:	28 f0       	brcs	.+10     	; 0x1636e <__ftoa_engine+0x154>
   16364:	79 e3       	ldi	r23, 0x39	; 57
   16366:	7d 93       	st	X+, r23
   16368:	2a 95       	dec	r18
   1636a:	e9 f7       	brne	.-6      	; 0x16366 <__ftoa_engine+0x14c>
   1636c:	10 c0       	rjmp	.+32     	; 0x1638e <__ftoa_engine+0x174>
   1636e:	7d 93       	st	X+, r23
   16370:	2a 95       	dec	r18
   16372:	89 f6       	brne	.-94     	; 0x16316 <__ftoa_engine+0xfc>
   16374:	06 94       	lsr	r0
   16376:	97 95       	ror	r25
   16378:	67 95       	ror	r22
   1637a:	37 95       	ror	r19
   1637c:	17 95       	ror	r17
   1637e:	17 94       	ror	r1
   16380:	e1 18       	sub	r14, r1
   16382:	f1 0a       	sbc	r15, r17
   16384:	43 0b       	sbc	r20, r19
   16386:	56 0b       	sbc	r21, r22
   16388:	c9 0b       	sbc	r28, r25
   1638a:	d0 09       	sbc	r29, r0
   1638c:	98 f0       	brcs	.+38     	; 0x163b4 <__ftoa_engine+0x19a>
   1638e:	23 95       	inc	r18
   16390:	7e 91       	ld	r23, -X
   16392:	73 95       	inc	r23
   16394:	7a 33       	cpi	r23, 0x3A	; 58
   16396:	08 f0       	brcs	.+2      	; 0x1639a <__ftoa_engine+0x180>
   16398:	70 e3       	ldi	r23, 0x30	; 48
   1639a:	7c 93       	st	X, r23
   1639c:	20 13       	cpse	r18, r16
   1639e:	b8 f7       	brcc	.-18     	; 0x1638e <__ftoa_engine+0x174>
   163a0:	7e 91       	ld	r23, -X
   163a2:	70 61       	ori	r23, 0x10	; 16
   163a4:	7d 93       	st	X+, r23
   163a6:	30 f0       	brcs	.+12     	; 0x163b4 <__ftoa_engine+0x19a>
   163a8:	83 95       	inc	r24
   163aa:	71 e3       	ldi	r23, 0x31	; 49
   163ac:	7d 93       	st	X+, r23
   163ae:	70 e3       	ldi	r23, 0x30	; 48
   163b0:	2a 95       	dec	r18
   163b2:	e1 f7       	brne	.-8      	; 0x163ac <__ftoa_engine+0x192>
   163b4:	11 24       	eor	r1, r1
   163b6:	ef 90       	pop	r14
   163b8:	ff 90       	pop	r15
   163ba:	0f 91       	pop	r16
   163bc:	1f 91       	pop	r17
   163be:	cf 91       	pop	r28
   163c0:	df 91       	pop	r29
   163c2:	99 27       	eor	r25, r25
   163c4:	87 fd       	sbrc	r24, 7
   163c6:	90 95       	com	r25
   163c8:	08 95       	ret

000163ca <__ctype_isfalse>:
__ctype_isfalse():
   163ca:	99 27       	eor	r25, r25
   163cc:	88 27       	eor	r24, r24

000163ce <__ctype_istrue>:
__ctype_istrue():
   163ce:	08 95       	ret

000163d0 <strncasecmp_P>:
strncasecmp_P():
   163d0:	fb 01       	movw	r30, r22
   163d2:	dc 01       	movw	r26, r24
   163d4:	41 50       	subi	r20, 0x01	; 1
   163d6:	50 40       	sbci	r21, 0x00	; 0
   163d8:	88 f0       	brcs	.+34     	; 0x163fc <strncasecmp_P+0x2c>
   163da:	8d 91       	ld	r24, X+
   163dc:	81 34       	cpi	r24, 0x41	; 65
   163de:	1c f0       	brlt	.+6      	; 0x163e6 <strncasecmp_P+0x16>
   163e0:	8b 35       	cpi	r24, 0x5B	; 91
   163e2:	0c f4       	brge	.+2      	; 0x163e6 <strncasecmp_P+0x16>
   163e4:	80 5e       	subi	r24, 0xE0	; 224
   163e6:	65 91       	lpm	r22, Z+
   163e8:	61 34       	cpi	r22, 0x41	; 65
   163ea:	1c f0       	brlt	.+6      	; 0x163f2 <strncasecmp_P+0x22>
   163ec:	6b 35       	cpi	r22, 0x5B	; 91
   163ee:	0c f4       	brge	.+2      	; 0x163f2 <strncasecmp_P+0x22>
   163f0:	60 5e       	subi	r22, 0xE0	; 224
   163f2:	86 1b       	sub	r24, r22
   163f4:	61 11       	cpse	r22, r1
   163f6:	71 f3       	breq	.-36     	; 0x163d4 <strncasecmp_P+0x4>
   163f8:	99 0b       	sbc	r25, r25
   163fa:	08 95       	ret
   163fc:	88 1b       	sub	r24, r24
   163fe:	fc cf       	rjmp	.-8      	; 0x163f8 <strncasecmp_P+0x28>

00016400 <strnlen_P>:
strnlen_P():
   16400:	fc 01       	movw	r30, r24
   16402:	05 90       	lpm	r0, Z+
   16404:	61 50       	subi	r22, 0x01	; 1
   16406:	70 40       	sbci	r23, 0x00	; 0
   16408:	01 10       	cpse	r0, r1
   1640a:	d8 f7       	brcc	.-10     	; 0x16402 <strnlen_P+0x2>
   1640c:	80 95       	com	r24
   1640e:	90 95       	com	r25
   16410:	8e 0f       	add	r24, r30
   16412:	9f 1f       	adc	r25, r31
   16414:	08 95       	ret

00016416 <memset>:
memset():
   16416:	dc 01       	movw	r26, r24
   16418:	01 c0       	rjmp	.+2      	; 0x1641c <memset+0x6>
   1641a:	6d 93       	st	X+, r22
   1641c:	41 50       	subi	r20, 0x01	; 1
   1641e:	50 40       	sbci	r21, 0x00	; 0
   16420:	e0 f7       	brcc	.-8      	; 0x1641a <memset+0x4>
   16422:	08 95       	ret

00016424 <strnlen>:
strnlen():
   16424:	fc 01       	movw	r30, r24
   16426:	61 50       	subi	r22, 0x01	; 1
   16428:	70 40       	sbci	r23, 0x00	; 0
   1642a:	01 90       	ld	r0, Z+
   1642c:	01 10       	cpse	r0, r1
   1642e:	d8 f7       	brcc	.-10     	; 0x16426 <strnlen+0x2>
   16430:	80 95       	com	r24
   16432:	90 95       	com	r25
   16434:	8e 0f       	add	r24, r30
   16436:	9f 1f       	adc	r25, r31
   16438:	08 95       	ret

0001643a <strrev>:
strrev():
   1643a:	dc 01       	movw	r26, r24
   1643c:	fc 01       	movw	r30, r24
   1643e:	67 2f       	mov	r22, r23
   16440:	71 91       	ld	r23, Z+
   16442:	77 23       	and	r23, r23
   16444:	e1 f7       	brne	.-8      	; 0x1643e <strrev+0x4>
   16446:	32 97       	sbiw	r30, 0x02	; 2
   16448:	04 c0       	rjmp	.+8      	; 0x16452 <strrev+0x18>
   1644a:	7c 91       	ld	r23, X
   1644c:	6d 93       	st	X+, r22
   1644e:	70 83       	st	Z, r23
   16450:	62 91       	ld	r22, -Z
   16452:	ae 17       	cp	r26, r30
   16454:	bf 07       	cpc	r27, r31
   16456:	c8 f3       	brcs	.-14     	; 0x1644a <strrev+0x10>
   16458:	08 95       	ret

0001645a <fputc>:
fputc():
   1645a:	0f 93       	push	r16
   1645c:	1f 93       	push	r17
   1645e:	cf 93       	push	r28
   16460:	df 93       	push	r29
   16462:	18 2f       	mov	r17, r24
   16464:	09 2f       	mov	r16, r25
   16466:	eb 01       	movw	r28, r22
   16468:	8b 81       	ldd	r24, Y+3	; 0x03
   1646a:	81 fd       	sbrc	r24, 1
   1646c:	09 c0       	rjmp	.+18     	; 0x16480 <fputc+0x26>
   1646e:	1f ef       	ldi	r17, 0xFF	; 255
   16470:	0f ef       	ldi	r16, 0xFF	; 255
   16472:	81 2f       	mov	r24, r17
   16474:	90 2f       	mov	r25, r16
   16476:	df 91       	pop	r29
   16478:	cf 91       	pop	r28
   1647a:	1f 91       	pop	r17
   1647c:	0f 91       	pop	r16
   1647e:	08 95       	ret
   16480:	82 ff       	sbrs	r24, 2
   16482:	14 c0       	rjmp	.+40     	; 0x164ac <fputc+0x52>
   16484:	2e 81       	ldd	r18, Y+6	; 0x06
   16486:	3f 81       	ldd	r19, Y+7	; 0x07
   16488:	8c 81       	ldd	r24, Y+4	; 0x04
   1648a:	9d 81       	ldd	r25, Y+5	; 0x05
   1648c:	28 17       	cp	r18, r24
   1648e:	39 07       	cpc	r19, r25
   16490:	3c f4       	brge	.+14     	; 0x164a0 <fputc+0x46>
   16492:	e8 81       	ld	r30, Y
   16494:	f9 81       	ldd	r31, Y+1	; 0x01
   16496:	cf 01       	movw	r24, r30
   16498:	01 96       	adiw	r24, 0x01	; 1
   1649a:	99 83       	std	Y+1, r25	; 0x01
   1649c:	88 83       	st	Y, r24
   1649e:	10 83       	st	Z, r17
   164a0:	8e 81       	ldd	r24, Y+6	; 0x06
   164a2:	9f 81       	ldd	r25, Y+7	; 0x07
   164a4:	01 96       	adiw	r24, 0x01	; 1
   164a6:	9f 83       	std	Y+7, r25	; 0x07
   164a8:	8e 83       	std	Y+6, r24	; 0x06
   164aa:	e3 cf       	rjmp	.-58     	; 0x16472 <fputc+0x18>
   164ac:	e8 85       	ldd	r30, Y+8	; 0x08
   164ae:	f9 85       	ldd	r31, Y+9	; 0x09
   164b0:	81 2f       	mov	r24, r17
   164b2:	19 95       	eicall
   164b4:	89 2b       	or	r24, r25
   164b6:	a1 f3       	breq	.-24     	; 0x164a0 <fputc+0x46>
   164b8:	da cf       	rjmp	.-76     	; 0x1646e <fputc+0x14>

000164ba <__ultoa_invert>:
__ultoa_invert():
   164ba:	fa 01       	movw	r30, r20
   164bc:	aa 27       	eor	r26, r26
   164be:	28 30       	cpi	r18, 0x08	; 8
   164c0:	51 f1       	breq	.+84     	; 0x16516 <__ultoa_invert+0x5c>
   164c2:	20 31       	cpi	r18, 0x10	; 16
   164c4:	81 f1       	breq	.+96     	; 0x16526 <__ultoa_invert+0x6c>
   164c6:	e8 94       	clt
   164c8:	6f 93       	push	r22
   164ca:	6e 7f       	andi	r22, 0xFE	; 254
   164cc:	6e 5f       	subi	r22, 0xFE	; 254
   164ce:	7f 4f       	sbci	r23, 0xFF	; 255
   164d0:	8f 4f       	sbci	r24, 0xFF	; 255
   164d2:	9f 4f       	sbci	r25, 0xFF	; 255
   164d4:	af 4f       	sbci	r26, 0xFF	; 255
   164d6:	b1 e0       	ldi	r27, 0x01	; 1
   164d8:	3e d0       	rcall	.+124    	; 0x16556 <__ultoa_invert+0x9c>
   164da:	b4 e0       	ldi	r27, 0x04	; 4
   164dc:	3c d0       	rcall	.+120    	; 0x16556 <__ultoa_invert+0x9c>
   164de:	67 0f       	add	r22, r23
   164e0:	78 1f       	adc	r23, r24
   164e2:	89 1f       	adc	r24, r25
   164e4:	9a 1f       	adc	r25, r26
   164e6:	a1 1d       	adc	r26, r1
   164e8:	68 0f       	add	r22, r24
   164ea:	79 1f       	adc	r23, r25
   164ec:	8a 1f       	adc	r24, r26
   164ee:	91 1d       	adc	r25, r1
   164f0:	a1 1d       	adc	r26, r1
   164f2:	6a 0f       	add	r22, r26
   164f4:	71 1d       	adc	r23, r1
   164f6:	81 1d       	adc	r24, r1
   164f8:	91 1d       	adc	r25, r1
   164fa:	a1 1d       	adc	r26, r1
   164fc:	20 d0       	rcall	.+64     	; 0x1653e <__ultoa_invert+0x84>
   164fe:	09 f4       	brne	.+2      	; 0x16502 <__ultoa_invert+0x48>
   16500:	68 94       	set
   16502:	3f 91       	pop	r19
   16504:	2a e0       	ldi	r18, 0x0A	; 10
   16506:	26 9f       	mul	r18, r22
   16508:	11 24       	eor	r1, r1
   1650a:	30 19       	sub	r19, r0
   1650c:	30 5d       	subi	r19, 0xD0	; 208
   1650e:	31 93       	st	Z+, r19
   16510:	de f6       	brtc	.-74     	; 0x164c8 <__ultoa_invert+0xe>
   16512:	cf 01       	movw	r24, r30
   16514:	08 95       	ret
   16516:	46 2f       	mov	r20, r22
   16518:	47 70       	andi	r20, 0x07	; 7
   1651a:	40 5d       	subi	r20, 0xD0	; 208
   1651c:	41 93       	st	Z+, r20
   1651e:	b3 e0       	ldi	r27, 0x03	; 3
   16520:	0f d0       	rcall	.+30     	; 0x16540 <__ultoa_invert+0x86>
   16522:	c9 f7       	brne	.-14     	; 0x16516 <__ultoa_invert+0x5c>
   16524:	f6 cf       	rjmp	.-20     	; 0x16512 <__ultoa_invert+0x58>
   16526:	46 2f       	mov	r20, r22
   16528:	4f 70       	andi	r20, 0x0F	; 15
   1652a:	40 5d       	subi	r20, 0xD0	; 208
   1652c:	4a 33       	cpi	r20, 0x3A	; 58
   1652e:	18 f0       	brcs	.+6      	; 0x16536 <__ultoa_invert+0x7c>
   16530:	49 5d       	subi	r20, 0xD9	; 217
   16532:	31 fd       	sbrc	r19, 1
   16534:	40 52       	subi	r20, 0x20	; 32
   16536:	41 93       	st	Z+, r20
   16538:	02 d0       	rcall	.+4      	; 0x1653e <__ultoa_invert+0x84>
   1653a:	a9 f7       	brne	.-22     	; 0x16526 <__ultoa_invert+0x6c>
   1653c:	ea cf       	rjmp	.-44     	; 0x16512 <__ultoa_invert+0x58>
   1653e:	b4 e0       	ldi	r27, 0x04	; 4
   16540:	a6 95       	lsr	r26
   16542:	97 95       	ror	r25
   16544:	87 95       	ror	r24
   16546:	77 95       	ror	r23
   16548:	67 95       	ror	r22
   1654a:	ba 95       	dec	r27
   1654c:	c9 f7       	brne	.-14     	; 0x16540 <__ultoa_invert+0x86>
   1654e:	00 97       	sbiw	r24, 0x00	; 0
   16550:	61 05       	cpc	r22, r1
   16552:	71 05       	cpc	r23, r1
   16554:	08 95       	ret
   16556:	9b 01       	movw	r18, r22
   16558:	ac 01       	movw	r20, r24
   1655a:	0a 2e       	mov	r0, r26
   1655c:	06 94       	lsr	r0
   1655e:	57 95       	ror	r21
   16560:	47 95       	ror	r20
   16562:	37 95       	ror	r19
   16564:	27 95       	ror	r18
   16566:	ba 95       	dec	r27
   16568:	c9 f7       	brne	.-14     	; 0x1655c <__ultoa_invert+0xa2>
   1656a:	62 0f       	add	r22, r18
   1656c:	73 1f       	adc	r23, r19
   1656e:	84 1f       	adc	r24, r20
   16570:	95 1f       	adc	r25, r21
   16572:	a0 1d       	adc	r26, r0
   16574:	08 95       	ret

00016576 <__cmpsf2>:
__cmpsf2():
   16576:	0e 94 fd b2 	call	0x165fa	; 0x165fa <__fp_cmp>
   1657a:	08 f4       	brcc	.+2      	; 0x1657e <__cmpsf2+0x8>
   1657c:	81 e0       	ldi	r24, 0x01	; 1
   1657e:	08 95       	ret

00016580 <__floatunsisf>:
__floatunsisf():
   16580:	e8 94       	clt
   16582:	09 c0       	rjmp	.+18     	; 0x16596 <__floatsisf+0x12>

00016584 <__floatsisf>:
   16584:	97 fb       	bst	r25, 7
   16586:	3e f4       	brtc	.+14     	; 0x16596 <__floatsisf+0x12>
   16588:	90 95       	com	r25
   1658a:	80 95       	com	r24
   1658c:	70 95       	com	r23
   1658e:	61 95       	neg	r22
   16590:	7f 4f       	sbci	r23, 0xFF	; 255
   16592:	8f 4f       	sbci	r24, 0xFF	; 255
   16594:	9f 4f       	sbci	r25, 0xFF	; 255
   16596:	99 23       	and	r25, r25
   16598:	a9 f0       	breq	.+42     	; 0x165c4 <__floatsisf+0x40>
   1659a:	f9 2f       	mov	r31, r25
   1659c:	96 e9       	ldi	r25, 0x96	; 150
   1659e:	bb 27       	eor	r27, r27
   165a0:	93 95       	inc	r25
   165a2:	f6 95       	lsr	r31
   165a4:	87 95       	ror	r24
   165a6:	77 95       	ror	r23
   165a8:	67 95       	ror	r22
   165aa:	b7 95       	ror	r27
   165ac:	f1 11       	cpse	r31, r1
   165ae:	f8 cf       	rjmp	.-16     	; 0x165a0 <__floatsisf+0x1c>
   165b0:	fa f4       	brpl	.+62     	; 0x165f0 <__floatsisf+0x6c>
   165b2:	bb 0f       	add	r27, r27
   165b4:	11 f4       	brne	.+4      	; 0x165ba <__floatsisf+0x36>
   165b6:	60 ff       	sbrs	r22, 0
   165b8:	1b c0       	rjmp	.+54     	; 0x165f0 <__floatsisf+0x6c>
   165ba:	6f 5f       	subi	r22, 0xFF	; 255
   165bc:	7f 4f       	sbci	r23, 0xFF	; 255
   165be:	8f 4f       	sbci	r24, 0xFF	; 255
   165c0:	9f 4f       	sbci	r25, 0xFF	; 255
   165c2:	16 c0       	rjmp	.+44     	; 0x165f0 <__floatsisf+0x6c>
   165c4:	88 23       	and	r24, r24
   165c6:	11 f0       	breq	.+4      	; 0x165cc <__floatsisf+0x48>
   165c8:	96 e9       	ldi	r25, 0x96	; 150
   165ca:	11 c0       	rjmp	.+34     	; 0x165ee <__floatsisf+0x6a>
   165cc:	77 23       	and	r23, r23
   165ce:	21 f0       	breq	.+8      	; 0x165d8 <__floatsisf+0x54>
   165d0:	9e e8       	ldi	r25, 0x8E	; 142
   165d2:	87 2f       	mov	r24, r23
   165d4:	76 2f       	mov	r23, r22
   165d6:	05 c0       	rjmp	.+10     	; 0x165e2 <__floatsisf+0x5e>
   165d8:	66 23       	and	r22, r22
   165da:	71 f0       	breq	.+28     	; 0x165f8 <__floatsisf+0x74>
   165dc:	96 e8       	ldi	r25, 0x86	; 134
   165de:	86 2f       	mov	r24, r22
   165e0:	70 e0       	ldi	r23, 0x00	; 0
   165e2:	60 e0       	ldi	r22, 0x00	; 0
   165e4:	2a f0       	brmi	.+10     	; 0x165f0 <__floatsisf+0x6c>
   165e6:	9a 95       	dec	r25
   165e8:	66 0f       	add	r22, r22
   165ea:	77 1f       	adc	r23, r23
   165ec:	88 1f       	adc	r24, r24
   165ee:	da f7       	brpl	.-10     	; 0x165e6 <__floatsisf+0x62>
   165f0:	88 0f       	add	r24, r24
   165f2:	96 95       	lsr	r25
   165f4:	87 95       	ror	r24
   165f6:	97 f9       	bld	r25, 7
   165f8:	08 95       	ret

000165fa <__fp_cmp>:
__fp_cmp():
   165fa:	99 0f       	add	r25, r25
   165fc:	00 08       	sbc	r0, r0
   165fe:	55 0f       	add	r21, r21
   16600:	aa 0b       	sbc	r26, r26
   16602:	e0 e8       	ldi	r30, 0x80	; 128
   16604:	fe ef       	ldi	r31, 0xFE	; 254
   16606:	16 16       	cp	r1, r22
   16608:	17 06       	cpc	r1, r23
   1660a:	e8 07       	cpc	r30, r24
   1660c:	f9 07       	cpc	r31, r25
   1660e:	c0 f0       	brcs	.+48     	; 0x16640 <__fp_cmp+0x46>
   16610:	12 16       	cp	r1, r18
   16612:	13 06       	cpc	r1, r19
   16614:	e4 07       	cpc	r30, r20
   16616:	f5 07       	cpc	r31, r21
   16618:	98 f0       	brcs	.+38     	; 0x16640 <__fp_cmp+0x46>
   1661a:	62 1b       	sub	r22, r18
   1661c:	73 0b       	sbc	r23, r19
   1661e:	84 0b       	sbc	r24, r20
   16620:	95 0b       	sbc	r25, r21
   16622:	39 f4       	brne	.+14     	; 0x16632 <__fp_cmp+0x38>
   16624:	0a 26       	eor	r0, r26
   16626:	61 f0       	breq	.+24     	; 0x16640 <__fp_cmp+0x46>
   16628:	23 2b       	or	r18, r19
   1662a:	24 2b       	or	r18, r20
   1662c:	25 2b       	or	r18, r21
   1662e:	21 f4       	brne	.+8      	; 0x16638 <__fp_cmp+0x3e>
   16630:	08 95       	ret
   16632:	0a 26       	eor	r0, r26
   16634:	09 f4       	brne	.+2      	; 0x16638 <__fp_cmp+0x3e>
   16636:	a1 40       	sbci	r26, 0x01	; 1
   16638:	a6 95       	lsr	r26
   1663a:	8f ef       	ldi	r24, 0xFF	; 255
   1663c:	81 1d       	adc	r24, r1
   1663e:	81 1d       	adc	r24, r1
   16640:	08 95       	ret

00016642 <__mulsf3>:
__mulsf3():
   16642:	0e 94 34 b3 	call	0x16668	; 0x16668 <__mulsf3x>
   16646:	0c 94 a5 b3 	jmp	0x1674a	; 0x1674a <__fp_round>
   1664a:	0e 94 97 b3 	call	0x1672e	; 0x1672e <__fp_pscA>
   1664e:	38 f0       	brcs	.+14     	; 0x1665e <__mulsf3+0x1c>
   16650:	0e 94 9e b3 	call	0x1673c	; 0x1673c <__fp_pscB>
   16654:	20 f0       	brcs	.+8      	; 0x1665e <__mulsf3+0x1c>
   16656:	95 23       	and	r25, r21
   16658:	11 f0       	breq	.+4      	; 0x1665e <__mulsf3+0x1c>
   1665a:	0c 94 8e b3 	jmp	0x1671c	; 0x1671c <__fp_inf>
   1665e:	0c 94 94 b3 	jmp	0x16728	; 0x16728 <__fp_nan>
   16662:	11 24       	eor	r1, r1
   16664:	0c 94 d9 b3 	jmp	0x167b2	; 0x167b2 <__fp_szero>

00016668 <__mulsf3x>:
__mulsf3x():
   16668:	0e 94 b6 b3 	call	0x1676c	; 0x1676c <__fp_split3>
   1666c:	70 f3       	brcs	.-36     	; 0x1664a <__mulsf3+0x8>

0001666e <__mulsf3_pse>:
   1666e:	95 9f       	mul	r25, r21
   16670:	c1 f3       	breq	.-16     	; 0x16662 <__mulsf3+0x20>
   16672:	95 0f       	add	r25, r21
   16674:	50 e0       	ldi	r21, 0x00	; 0
   16676:	55 1f       	adc	r21, r21
   16678:	62 9f       	mul	r22, r18
   1667a:	f0 01       	movw	r30, r0
   1667c:	72 9f       	mul	r23, r18
   1667e:	bb 27       	eor	r27, r27
   16680:	f0 0d       	add	r31, r0
   16682:	b1 1d       	adc	r27, r1
   16684:	63 9f       	mul	r22, r19
   16686:	aa 27       	eor	r26, r26
   16688:	f0 0d       	add	r31, r0
   1668a:	b1 1d       	adc	r27, r1
   1668c:	aa 1f       	adc	r26, r26
   1668e:	64 9f       	mul	r22, r20
   16690:	66 27       	eor	r22, r22
   16692:	b0 0d       	add	r27, r0
   16694:	a1 1d       	adc	r26, r1
   16696:	66 1f       	adc	r22, r22
   16698:	82 9f       	mul	r24, r18
   1669a:	22 27       	eor	r18, r18
   1669c:	b0 0d       	add	r27, r0
   1669e:	a1 1d       	adc	r26, r1
   166a0:	62 1f       	adc	r22, r18
   166a2:	73 9f       	mul	r23, r19
   166a4:	b0 0d       	add	r27, r0
   166a6:	a1 1d       	adc	r26, r1
   166a8:	62 1f       	adc	r22, r18
   166aa:	83 9f       	mul	r24, r19
   166ac:	a0 0d       	add	r26, r0
   166ae:	61 1d       	adc	r22, r1
   166b0:	22 1f       	adc	r18, r18
   166b2:	74 9f       	mul	r23, r20
   166b4:	33 27       	eor	r19, r19
   166b6:	a0 0d       	add	r26, r0
   166b8:	61 1d       	adc	r22, r1
   166ba:	23 1f       	adc	r18, r19
   166bc:	84 9f       	mul	r24, r20
   166be:	60 0d       	add	r22, r0
   166c0:	21 1d       	adc	r18, r1
   166c2:	82 2f       	mov	r24, r18
   166c4:	76 2f       	mov	r23, r22
   166c6:	6a 2f       	mov	r22, r26
   166c8:	11 24       	eor	r1, r1
   166ca:	9f 57       	subi	r25, 0x7F	; 127
   166cc:	50 40       	sbci	r21, 0x00	; 0
   166ce:	9a f0       	brmi	.+38     	; 0x166f6 <__mulsf3_pse+0x88>
   166d0:	f1 f0       	breq	.+60     	; 0x1670e <__mulsf3_pse+0xa0>
   166d2:	88 23       	and	r24, r24
   166d4:	4a f0       	brmi	.+18     	; 0x166e8 <__mulsf3_pse+0x7a>
   166d6:	ee 0f       	add	r30, r30
   166d8:	ff 1f       	adc	r31, r31
   166da:	bb 1f       	adc	r27, r27
   166dc:	66 1f       	adc	r22, r22
   166de:	77 1f       	adc	r23, r23
   166e0:	88 1f       	adc	r24, r24
   166e2:	91 50       	subi	r25, 0x01	; 1
   166e4:	50 40       	sbci	r21, 0x00	; 0
   166e6:	a9 f7       	brne	.-22     	; 0x166d2 <__mulsf3_pse+0x64>
   166e8:	9e 3f       	cpi	r25, 0xFE	; 254
   166ea:	51 05       	cpc	r21, r1
   166ec:	80 f0       	brcs	.+32     	; 0x1670e <__mulsf3_pse+0xa0>
   166ee:	0c 94 8e b3 	jmp	0x1671c	; 0x1671c <__fp_inf>
   166f2:	0c 94 d9 b3 	jmp	0x167b2	; 0x167b2 <__fp_szero>
   166f6:	5f 3f       	cpi	r21, 0xFF	; 255
   166f8:	e4 f3       	brlt	.-8      	; 0x166f2 <__mulsf3_pse+0x84>
   166fa:	98 3e       	cpi	r25, 0xE8	; 232
   166fc:	d4 f3       	brlt	.-12     	; 0x166f2 <__mulsf3_pse+0x84>
   166fe:	86 95       	lsr	r24
   16700:	77 95       	ror	r23
   16702:	67 95       	ror	r22
   16704:	b7 95       	ror	r27
   16706:	f7 95       	ror	r31
   16708:	e7 95       	ror	r30
   1670a:	9f 5f       	subi	r25, 0xFF	; 255
   1670c:	c1 f7       	brne	.-16     	; 0x166fe <__mulsf3_pse+0x90>
   1670e:	fe 2b       	or	r31, r30
   16710:	88 0f       	add	r24, r24
   16712:	91 1d       	adc	r25, r1
   16714:	96 95       	lsr	r25
   16716:	87 95       	ror	r24
   16718:	97 f9       	bld	r25, 7
   1671a:	08 95       	ret

0001671c <__fp_inf>:
   1671c:	97 f9       	bld	r25, 7
   1671e:	9f 67       	ori	r25, 0x7F	; 127
   16720:	80 e8       	ldi	r24, 0x80	; 128
   16722:	70 e0       	ldi	r23, 0x00	; 0
   16724:	60 e0       	ldi	r22, 0x00	; 0
   16726:	08 95       	ret

00016728 <__fp_nan>:
   16728:	9f ef       	ldi	r25, 0xFF	; 255
   1672a:	80 ec       	ldi	r24, 0xC0	; 192
   1672c:	08 95       	ret

0001672e <__fp_pscA>:
   1672e:	00 24       	eor	r0, r0
   16730:	0a 94       	dec	r0
   16732:	16 16       	cp	r1, r22
   16734:	17 06       	cpc	r1, r23
   16736:	18 06       	cpc	r1, r24
   16738:	09 06       	cpc	r0, r25
__fp_pscA():
   1673a:	08 95       	ret

0001673c <__fp_pscB>:
__fp_pscB():
   1673c:	00 24       	eor	r0, r0
   1673e:	0a 94       	dec	r0
   16740:	12 16       	cp	r1, r18
   16742:	13 06       	cpc	r1, r19
   16744:	14 06       	cpc	r1, r20
   16746:	05 06       	cpc	r0, r21
   16748:	08 95       	ret

0001674a <__fp_round>:
__fp_round():
   1674a:	09 2e       	mov	r0, r25
   1674c:	03 94       	inc	r0
   1674e:	00 0c       	add	r0, r0
   16750:	11 f4       	brne	.+4      	; 0x16756 <__fp_round+0xc>
   16752:	88 23       	and	r24, r24
   16754:	52 f0       	brmi	.+20     	; 0x1676a <__fp_round+0x20>
   16756:	bb 0f       	add	r27, r27
   16758:	40 f4       	brcc	.+16     	; 0x1676a <__fp_round+0x20>
   1675a:	bf 2b       	or	r27, r31
   1675c:	11 f4       	brne	.+4      	; 0x16762 <__fp_round+0x18>
   1675e:	60 ff       	sbrs	r22, 0
   16760:	04 c0       	rjmp	.+8      	; 0x1676a <__fp_round+0x20>
   16762:	6f 5f       	subi	r22, 0xFF	; 255
   16764:	7f 4f       	sbci	r23, 0xFF	; 255
   16766:	8f 4f       	sbci	r24, 0xFF	; 255
   16768:	9f 4f       	sbci	r25, 0xFF	; 255
   1676a:	08 95       	ret

0001676c <__fp_split3>:
__fp_split3():
   1676c:	57 fd       	sbrc	r21, 7
   1676e:	90 58       	subi	r25, 0x80	; 128
   16770:	44 0f       	add	r20, r20
   16772:	55 1f       	adc	r21, r21
   16774:	59 f0       	breq	.+22     	; 0x1678c <__fp_splitA+0x10>
   16776:	5f 3f       	cpi	r21, 0xFF	; 255
   16778:	71 f0       	breq	.+28     	; 0x16796 <__fp_splitA+0x1a>
   1677a:	47 95       	ror	r20

0001677c <__fp_splitA>:
   1677c:	88 0f       	add	r24, r24
   1677e:	97 fb       	bst	r25, 7
   16780:	99 1f       	adc	r25, r25
   16782:	61 f0       	breq	.+24     	; 0x1679c <__fp_splitA+0x20>
   16784:	9f 3f       	cpi	r25, 0xFF	; 255
   16786:	79 f0       	breq	.+30     	; 0x167a6 <__fp_splitA+0x2a>
   16788:	87 95       	ror	r24
   1678a:	08 95       	ret
   1678c:	12 16       	cp	r1, r18
   1678e:	13 06       	cpc	r1, r19
   16790:	14 06       	cpc	r1, r20
   16792:	55 1f       	adc	r21, r21
   16794:	f2 cf       	rjmp	.-28     	; 0x1677a <__fp_split3+0xe>
   16796:	46 95       	lsr	r20
   16798:	f1 df       	rcall	.-30     	; 0x1677c <__fp_splitA>
   1679a:	08 c0       	rjmp	.+16     	; 0x167ac <__fp_splitA+0x30>
   1679c:	16 16       	cp	r1, r22
   1679e:	17 06       	cpc	r1, r23
   167a0:	18 06       	cpc	r1, r24
   167a2:	99 1f       	adc	r25, r25
   167a4:	f1 cf       	rjmp	.-30     	; 0x16788 <__fp_splitA+0xc>
   167a6:	86 95       	lsr	r24
   167a8:	71 05       	cpc	r23, r1
   167aa:	61 05       	cpc	r22, r1
   167ac:	08 94       	sec
   167ae:	08 95       	ret

000167b0 <__fp_zero>:
__fp_zero():
   167b0:	e8 94       	clt

000167b2 <__fp_szero>:
   167b2:	bb 27       	eor	r27, r27
   167b4:	66 27       	eor	r22, r22
   167b6:	77 27       	eor	r23, r23
   167b8:	cb 01       	movw	r24, r22
   167ba:	97 f9       	bld	r25, 7
   167bc:	08 95       	ret

000167be <eeprom_read_byte>:
eeprom_read_byte():
   167be:	f9 99       	sbic	0x1f, 1	; 31
   167c0:	fe cf       	rjmp	.-4      	; 0x167be <eeprom_read_byte>
   167c2:	92 bd       	out	0x22, r25	; 34
   167c4:	81 bd       	out	0x21, r24	; 33
   167c6:	f8 9a       	sbi	0x1f, 0	; 31
   167c8:	99 27       	eor	r25, r25
   167ca:	80 b5       	in	r24, 0x20	; 32
   167cc:	08 95       	ret

000167ce <eeprom_write_byte>:
eeprom_write_byte():
   167ce:	26 2f       	mov	r18, r22

000167d0 <eeprom_write_r18>:
   167d0:	f9 99       	sbic	0x1f, 1	; 31
   167d2:	fe cf       	rjmp	.-4      	; 0x167d0 <eeprom_write_r18>
   167d4:	1f ba       	out	0x1f, r1	; 31
   167d6:	92 bd       	out	0x22, r25	; 34
   167d8:	81 bd       	out	0x21, r24	; 33
   167da:	20 bd       	out	0x20, r18	; 32
   167dc:	0f b6       	in	r0, 0x3f	; 63
   167de:	f8 94       	cli
   167e0:	fa 9a       	sbi	0x1f, 2	; 31
   167e2:	f9 9a       	sbi	0x1f, 1	; 31
   167e4:	0f be       	out	0x3f, r0	; 63
   167e6:	01 96       	adiw	r24, 0x01	; 1
   167e8:	08 95       	ret

000167ea <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   167ea:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   167ec:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   167ee:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   167f0:	0e 94 6e b4 	call	0x168dc	; 0x168dc <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   167f4:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   167f6:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   167f8:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   167fa:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   167fc:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   167fe:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   16800:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   16802:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   16804:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   16806:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   16808:	08 95       	ret

0001680a <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   1680a:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   1680c:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   1680e:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   16810:	07 c0       	rjmp	.+14     	; 0x16820 <__udivmodhi4_ep>

00016812 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   16812:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   16814:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   16816:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   16818:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   1681a:	10 f0       	brcs	.+4      	; 0x16820 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   1681c:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   1681e:	b7 0b       	sbc	r27, r23

00016820 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   16820:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   16822:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   16824:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   16826:	a9 f7       	brne	.-22     	; 0x16812 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   16828:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   1682a:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   1682c:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   1682e:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   16830:	08 95       	ret

00016832 <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   16832:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   16834:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   16836:	16 f4       	brtc	.+4      	; 0x1683c <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   16838:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   1683a:	07 d0       	rcall	.+14     	; 0x1684a <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   1683c:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   1683e:	09 d0       	rcall	.+18     	; 0x16852 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   16840:	0e 94 05 b4 	call	0x1680a	; 0x1680a <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   16844:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   16846:	05 d0       	rcall	.+10     	; 0x16852 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   16848:	3e f4       	brtc	.+14     	; 0x16858 <__divmodhi4_exit>

0001684a <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   1684a:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   1684c:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   1684e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   16850:	08 95       	ret

00016852 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   16852:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   16854:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   16856:	7f 4f       	sbci	r23, 0xFF	; 255

00016858 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   16858:	08 95       	ret

0001685a <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   1685a:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   1685c:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   1685e:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   16860:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   16862:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   16864:	0d c0       	rjmp	.+26     	; 0x16880 <__udivmodsi4_ep>

00016866 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   16866:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   16868:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   1686a:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   1686c:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   1686e:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   16870:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   16872:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   16874:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   16876:	20 f0       	brcs	.+8      	; 0x16880 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   16878:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   1687a:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   1687c:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   1687e:	f5 0b       	sbc	r31, r21

00016880 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   16880:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   16882:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   16884:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   16886:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   16888:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   1688a:	69 f7       	brne	.-38     	; 0x16866 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   1688c:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   1688e:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   16890:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   16892:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   16894:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   16896:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   16898:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   1689a:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   1689c:	08 95       	ret

0001689e <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   1689e:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   168a0:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   168a2:	1e f4       	brtc	.+6      	; 0x168aa <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   168a4:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   168a6:	0e 94 66 b4 	call	0x168cc	; 0x168cc <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   168aa:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   168ac:	07 d0       	rcall	.+14     	; 0x168bc <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   168ae:	0e 94 2d b4 	call	0x1685a	; 0x1685a <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   168b2:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   168b4:	03 d0       	rcall	.+6      	; 0x168bc <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   168b6:	4e f4       	brtc	.+18     	; 0x168ca <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   168b8:	0c 94 66 b4 	jmp	0x168cc	; 0x168cc <__negsi2>

000168bc <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   168bc:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   168be:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   168c0:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   168c2:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   168c4:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   168c6:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   168c8:	5f 4f       	sbci	r21, 0xFF	; 255

000168ca <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   168ca:	08 95       	ret

000168cc <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   168cc:	90 95       	com	r25
   168ce:	80 95       	com	r24
   168d0:	70 95       	com	r23
   168d2:	61 95       	neg	r22
   168d4:	7f 4f       	sbci	r23, 0xFF	; 255
   168d6:	8f 4f       	sbci	r24, 0xFF	; 255
   168d8:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   168da:	08 95       	ret

000168dc <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   168dc:	0e 94 79 b4 	call	0x168f2	; 0x168f2 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   168e0:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   168e2:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   168e4:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   168e6:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   168e8:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   168ea:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   168ec:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   168ee:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   168f0:	08 95       	ret

000168f2 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   168f2:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   168f4:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   168f6:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   168f8:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   168fa:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   168fc:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   168fe:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   16900:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   16902:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   16904:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   16906:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   16908:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   1690a:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   1690c:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   1690e:	08 95       	ret

00016910 <__subsf3>:
__subsf3():
   16910:	50 58       	subi	r21, 0x80	; 128

00016912 <__addsf3>:
   16912:	bb 27       	eor	r27, r27
   16914:	aa 27       	eor	r26, r26
   16916:	0e 94 a0 b4 	call	0x16940	; 0x16940 <__addsf3x>
   1691a:	0c 94 a5 b3 	jmp	0x1674a	; 0x1674a <__fp_round>
__addsf3():
   1691e:	0e 94 97 b3 	call	0x1672e	; 0x1672e <__fp_pscA>
   16922:	38 f0       	brcs	.+14     	; 0x16932 <__addsf3+0x20>
   16924:	0e 94 9e b3 	call	0x1673c	; 0x1673c <__fp_pscB>
   16928:	20 f0       	brcs	.+8      	; 0x16932 <__addsf3+0x20>
   1692a:	39 f4       	brne	.+14     	; 0x1693a <__addsf3+0x28>
   1692c:	9f 3f       	cpi	r25, 0xFF	; 255
   1692e:	19 f4       	brne	.+6      	; 0x16936 <__addsf3+0x24>
   16930:	26 f4       	brtc	.+8      	; 0x1693a <__addsf3+0x28>
   16932:	0c 94 94 b3 	jmp	0x16728	; 0x16728 <__fp_nan>
   16936:	0e f4       	brtc	.+2      	; 0x1693a <__addsf3+0x28>
   16938:	e0 95       	com	r30
   1693a:	e7 fb       	bst	r30, 7
   1693c:	0c 94 8e b3 	jmp	0x1671c	; 0x1671c <__fp_inf>

00016940 <__addsf3x>:
__addsf3x():
   16940:	e9 2f       	mov	r30, r25
   16942:	0e 94 b6 b3 	call	0x1676c	; 0x1676c <__fp_split3>
   16946:	58 f3       	brcs	.-42     	; 0x1691e <__addsf3+0xc>
   16948:	ba 17       	cp	r27, r26
   1694a:	62 07       	cpc	r22, r18
   1694c:	73 07       	cpc	r23, r19
   1694e:	84 07       	cpc	r24, r20
   16950:	95 07       	cpc	r25, r21
   16952:	20 f0       	brcs	.+8      	; 0x1695c <__addsf3x+0x1c>
   16954:	79 f4       	brne	.+30     	; 0x16974 <__addsf3x+0x34>
   16956:	a6 f5       	brtc	.+104    	; 0x169c0 <__addsf3x+0x80>
   16958:	0c 94 d8 b3 	jmp	0x167b0	; 0x167b0 <__fp_zero>
   1695c:	0e f4       	brtc	.+2      	; 0x16960 <__addsf3x+0x20>
   1695e:	e0 95       	com	r30
   16960:	0b 2e       	mov	r0, r27
   16962:	ba 2f       	mov	r27, r26
   16964:	a0 2d       	mov	r26, r0
   16966:	0b 01       	movw	r0, r22
   16968:	b9 01       	movw	r22, r18
   1696a:	90 01       	movw	r18, r0
   1696c:	0c 01       	movw	r0, r24
   1696e:	ca 01       	movw	r24, r20
   16970:	a0 01       	movw	r20, r0
   16972:	11 24       	eor	r1, r1
   16974:	ff 27       	eor	r31, r31
   16976:	59 1b       	sub	r21, r25
   16978:	99 f0       	breq	.+38     	; 0x169a0 <__addsf3x+0x60>
   1697a:	59 3f       	cpi	r21, 0xF9	; 249
   1697c:	50 f4       	brcc	.+20     	; 0x16992 <__addsf3x+0x52>
   1697e:	50 3e       	cpi	r21, 0xE0	; 224
   16980:	68 f1       	brcs	.+90     	; 0x169dc <__addsf3x+0x9c>
   16982:	1a 16       	cp	r1, r26
   16984:	f0 40       	sbci	r31, 0x00	; 0
   16986:	a2 2f       	mov	r26, r18
   16988:	23 2f       	mov	r18, r19
   1698a:	34 2f       	mov	r19, r20
   1698c:	44 27       	eor	r20, r20
   1698e:	58 5f       	subi	r21, 0xF8	; 248
   16990:	f3 cf       	rjmp	.-26     	; 0x16978 <__addsf3x+0x38>
   16992:	46 95       	lsr	r20
   16994:	37 95       	ror	r19
   16996:	27 95       	ror	r18
   16998:	a7 95       	ror	r26
   1699a:	f0 40       	sbci	r31, 0x00	; 0
   1699c:	53 95       	inc	r21
   1699e:	c9 f7       	brne	.-14     	; 0x16992 <__addsf3x+0x52>
   169a0:	7e f4       	brtc	.+30     	; 0x169c0 <__addsf3x+0x80>
   169a2:	1f 16       	cp	r1, r31
   169a4:	ba 0b       	sbc	r27, r26
   169a6:	62 0b       	sbc	r22, r18
   169a8:	73 0b       	sbc	r23, r19
   169aa:	84 0b       	sbc	r24, r20
   169ac:	ba f0       	brmi	.+46     	; 0x169dc <__addsf3x+0x9c>
   169ae:	91 50       	subi	r25, 0x01	; 1
   169b0:	a1 f0       	breq	.+40     	; 0x169da <__addsf3x+0x9a>
   169b2:	ff 0f       	add	r31, r31
   169b4:	bb 1f       	adc	r27, r27
   169b6:	66 1f       	adc	r22, r22
   169b8:	77 1f       	adc	r23, r23
   169ba:	88 1f       	adc	r24, r24
   169bc:	c2 f7       	brpl	.-16     	; 0x169ae <__addsf3x+0x6e>
   169be:	0e c0       	rjmp	.+28     	; 0x169dc <__addsf3x+0x9c>
   169c0:	ba 0f       	add	r27, r26
   169c2:	62 1f       	adc	r22, r18
   169c4:	73 1f       	adc	r23, r19
   169c6:	84 1f       	adc	r24, r20
   169c8:	48 f4       	brcc	.+18     	; 0x169dc <__addsf3x+0x9c>
   169ca:	87 95       	ror	r24
   169cc:	77 95       	ror	r23
   169ce:	67 95       	ror	r22
   169d0:	b7 95       	ror	r27
   169d2:	f7 95       	ror	r31
   169d4:	9e 3f       	cpi	r25, 0xFE	; 254
   169d6:	08 f0       	brcs	.+2      	; 0x169da <__addsf3x+0x9a>
   169d8:	b0 cf       	rjmp	.-160    	; 0x1693a <__addsf3+0x28>
   169da:	93 95       	inc	r25
   169dc:	88 0f       	add	r24, r24
   169de:	08 f0       	brcs	.+2      	; 0x169e2 <__addsf3x+0xa2>
   169e0:	99 27       	eor	r25, r25
   169e2:	ee 0f       	add	r30, r30
   169e4:	97 95       	ror	r25
   169e6:	87 95       	ror	r24
   169e8:	08 95       	ret

000169ea <__divsf3>:
   169ea:	0e 94 09 b5 	call	0x16a12	; 0x16a12 <__divsf3x>
   169ee:	0c 94 a5 b3 	jmp	0x1674a	; 0x1674a <__fp_round>
   169f2:	0e 94 9e b3 	call	0x1673c	; 0x1673c <__fp_pscB>
   169f6:	58 f0       	brcs	.+22     	; 0x16a0e <__divsf3+0x24>
   169f8:	0e 94 97 b3 	call	0x1672e	; 0x1672e <__fp_pscA>
   169fc:	40 f0       	brcs	.+16     	; 0x16a0e <__divsf3+0x24>
   169fe:	29 f4       	brne	.+10     	; 0x16a0a <__divsf3+0x20>
   16a00:	5f 3f       	cpi	r21, 0xFF	; 255
   16a02:	29 f0       	breq	.+10     	; 0x16a0e <__divsf3+0x24>
   16a04:	0c 94 8e b3 	jmp	0x1671c	; 0x1671c <__fp_inf>
   16a08:	51 11       	cpse	r21, r1
   16a0a:	0c 94 d9 b3 	jmp	0x167b2	; 0x167b2 <__fp_szero>
__divsf3():
   16a0e:	0c 94 94 b3 	jmp	0x16728	; 0x16728 <__fp_nan>

00016a12 <__divsf3x>:
__divsf3x():
   16a12:	0e 94 b6 b3 	call	0x1676c	; 0x1676c <__fp_split3>
   16a16:	68 f3       	brcs	.-38     	; 0x169f2 <__divsf3+0x8>

00016a18 <__divsf3_pse>:
   16a18:	99 23       	and	r25, r25
   16a1a:	b1 f3       	breq	.-20     	; 0x16a08 <__divsf3+0x1e>
   16a1c:	55 23       	and	r21, r21
   16a1e:	91 f3       	breq	.-28     	; 0x16a04 <__divsf3+0x1a>
   16a20:	95 1b       	sub	r25, r21
   16a22:	55 0b       	sbc	r21, r21
   16a24:	bb 27       	eor	r27, r27
   16a26:	aa 27       	eor	r26, r26
   16a28:	62 17       	cp	r22, r18
   16a2a:	73 07       	cpc	r23, r19
   16a2c:	84 07       	cpc	r24, r20
   16a2e:	38 f0       	brcs	.+14     	; 0x16a3e <__divsf3_pse+0x26>
   16a30:	9f 5f       	subi	r25, 0xFF	; 255
   16a32:	5f 4f       	sbci	r21, 0xFF	; 255
   16a34:	22 0f       	add	r18, r18
   16a36:	33 1f       	adc	r19, r19
   16a38:	44 1f       	adc	r20, r20
   16a3a:	aa 1f       	adc	r26, r26
   16a3c:	a9 f3       	breq	.-22     	; 0x16a28 <__divsf3_pse+0x10>
   16a3e:	35 d0       	rcall	.+106    	; 0x16aaa <__divsf3_pse+0x92>
   16a40:	0e 2e       	mov	r0, r30
   16a42:	3a f0       	brmi	.+14     	; 0x16a52 <__divsf3_pse+0x3a>
   16a44:	e0 e8       	ldi	r30, 0x80	; 128
   16a46:	32 d0       	rcall	.+100    	; 0x16aac <__divsf3_pse+0x94>
   16a48:	91 50       	subi	r25, 0x01	; 1
   16a4a:	50 40       	sbci	r21, 0x00	; 0
   16a4c:	e6 95       	lsr	r30
   16a4e:	00 1c       	adc	r0, r0
   16a50:	ca f7       	brpl	.-14     	; 0x16a44 <__divsf3_pse+0x2c>
   16a52:	2b d0       	rcall	.+86     	; 0x16aaa <__divsf3_pse+0x92>
   16a54:	fe 2f       	mov	r31, r30
   16a56:	29 d0       	rcall	.+82     	; 0x16aaa <__divsf3_pse+0x92>
   16a58:	66 0f       	add	r22, r22
   16a5a:	77 1f       	adc	r23, r23
   16a5c:	88 1f       	adc	r24, r24
   16a5e:	bb 1f       	adc	r27, r27
   16a60:	26 17       	cp	r18, r22
   16a62:	37 07       	cpc	r19, r23
   16a64:	48 07       	cpc	r20, r24
   16a66:	ab 07       	cpc	r26, r27
   16a68:	b0 e8       	ldi	r27, 0x80	; 128
   16a6a:	09 f0       	breq	.+2      	; 0x16a6e <__divsf3_pse+0x56>
   16a6c:	bb 0b       	sbc	r27, r27
   16a6e:	80 2d       	mov	r24, r0
   16a70:	bf 01       	movw	r22, r30
   16a72:	ff 27       	eor	r31, r31
   16a74:	93 58       	subi	r25, 0x83	; 131
   16a76:	5f 4f       	sbci	r21, 0xFF	; 255
   16a78:	3a f0       	brmi	.+14     	; 0x16a88 <__divsf3_pse+0x70>
   16a7a:	9e 3f       	cpi	r25, 0xFE	; 254
   16a7c:	51 05       	cpc	r21, r1
   16a7e:	78 f0       	brcs	.+30     	; 0x16a9e <__divsf3_pse+0x86>
   16a80:	0c 94 8e b3 	jmp	0x1671c	; 0x1671c <__fp_inf>
   16a84:	0c 94 d9 b3 	jmp	0x167b2	; 0x167b2 <__fp_szero>
   16a88:	5f 3f       	cpi	r21, 0xFF	; 255
   16a8a:	e4 f3       	brlt	.-8      	; 0x16a84 <__divsf3_pse+0x6c>
   16a8c:	98 3e       	cpi	r25, 0xE8	; 232
   16a8e:	d4 f3       	brlt	.-12     	; 0x16a84 <__divsf3_pse+0x6c>
   16a90:	86 95       	lsr	r24
   16a92:	77 95       	ror	r23
   16a94:	67 95       	ror	r22
   16a96:	b7 95       	ror	r27
   16a98:	f7 95       	ror	r31
   16a9a:	9f 5f       	subi	r25, 0xFF	; 255
   16a9c:	c9 f7       	brne	.-14     	; 0x16a90 <__divsf3_pse+0x78>
   16a9e:	88 0f       	add	r24, r24
   16aa0:	91 1d       	adc	r25, r1
   16aa2:	96 95       	lsr	r25
   16aa4:	87 95       	ror	r24
   16aa6:	97 f9       	bld	r25, 7
   16aa8:	08 95       	ret
   16aaa:	e1 e0       	ldi	r30, 0x01	; 1
   16aac:	66 0f       	add	r22, r22
   16aae:	77 1f       	adc	r23, r23
   16ab0:	88 1f       	adc	r24, r24
   16ab2:	bb 1f       	adc	r27, r27
   16ab4:	62 17       	cp	r22, r18
   16ab6:	73 07       	cpc	r23, r19
   16ab8:	84 07       	cpc	r24, r20
   16aba:	ba 07       	cpc	r27, r26
   16abc:	20 f0       	brcs	.+8      	; 0x16ac6 <__divsf3_pse+0xae>
   16abe:	62 1b       	sub	r22, r18
   16ac0:	73 0b       	sbc	r23, r19
   16ac2:	84 0b       	sbc	r24, r20
   16ac4:	ba 0b       	sbc	r27, r26
   16ac6:	ee 1f       	adc	r30, r30
   16ac8:	88 f7       	brcc	.-30     	; 0x16aac <__divsf3_pse+0x94>
   16aca:	e0 95       	com	r30
   16acc:	08 95       	ret

00016ace <__fixsfsi>:
   16ace:	0e 94 6e b5 	call	0x16adc	; 0x16adc <__fixunssfsi>
   16ad2:	68 94       	set
   16ad4:	b1 11       	cpse	r27, r1
   16ad6:	0c 94 d9 b3 	jmp	0x167b2	; 0x167b2 <__fp_szero>
   16ada:	08 95       	ret

00016adc <__fixunssfsi>:
   16adc:	0e 94 be b3 	call	0x1677c	; 0x1677c <__fp_splitA>
   16ae0:	88 f0       	brcs	.+34     	; 0x16b04 <__fixunssfsi+0x28>
   16ae2:	9f 57       	subi	r25, 0x7F	; 127
   16ae4:	98 f0       	brcs	.+38     	; 0x16b0c <__fixunssfsi+0x30>
   16ae6:	b9 2f       	mov	r27, r25
   16ae8:	99 27       	eor	r25, r25
   16aea:	b7 51       	subi	r27, 0x17	; 23
   16aec:	b0 f0       	brcs	.+44     	; 0x16b1a <__fixunssfsi+0x3e>
__fixunssfsi():
   16aee:	e1 f0       	breq	.+56     	; 0x16b28 <__fixunssfsi+0x4c>
   16af0:	66 0f       	add	r22, r22
   16af2:	77 1f       	adc	r23, r23
   16af4:	88 1f       	adc	r24, r24
   16af6:	99 1f       	adc	r25, r25
   16af8:	1a f0       	brmi	.+6      	; 0x16b00 <__fixunssfsi+0x24>
   16afa:	ba 95       	dec	r27
   16afc:	c9 f7       	brne	.-14     	; 0x16af0 <__fixunssfsi+0x14>
   16afe:	14 c0       	rjmp	.+40     	; 0x16b28 <__fixunssfsi+0x4c>
   16b00:	b1 30       	cpi	r27, 0x01	; 1
   16b02:	91 f0       	breq	.+36     	; 0x16b28 <__fixunssfsi+0x4c>
   16b04:	0e 94 d8 b3 	call	0x167b0	; 0x167b0 <__fp_zero>
   16b08:	b1 e0       	ldi	r27, 0x01	; 1
   16b0a:	08 95       	ret
   16b0c:	0c 94 d8 b3 	jmp	0x167b0	; 0x167b0 <__fp_zero>
   16b10:	67 2f       	mov	r22, r23
   16b12:	78 2f       	mov	r23, r24
   16b14:	88 27       	eor	r24, r24
   16b16:	b8 5f       	subi	r27, 0xF8	; 248
   16b18:	39 f0       	breq	.+14     	; 0x16b28 <__fixunssfsi+0x4c>
   16b1a:	b9 3f       	cpi	r27, 0xF9	; 249
   16b1c:	cc f3       	brlt	.-14     	; 0x16b10 <__fixunssfsi+0x34>
   16b1e:	86 95       	lsr	r24
   16b20:	77 95       	ror	r23
   16b22:	67 95       	ror	r22
   16b24:	b3 95       	inc	r27
   16b26:	d9 f7       	brne	.-10     	; 0x16b1e <__fixunssfsi+0x42>
   16b28:	3e f4       	brtc	.+14     	; 0x16b38 <__fixunssfsi+0x5c>
   16b2a:	90 95       	com	r25
   16b2c:	80 95       	com	r24
   16b2e:	70 95       	com	r23
   16b30:	61 95       	neg	r22
   16b32:	7f 4f       	sbci	r23, 0xFF	; 255
   16b34:	8f 4f       	sbci	r24, 0xFF	; 255
   16b36:	9f 4f       	sbci	r25, 0xFF	; 255
   16b38:	08 95       	ret

00016b3a <__gesf2>:
__gesf2():
   16b3a:	0e 94 fd b2 	call	0x165fa	; 0x165fa <__fp_cmp>
   16b3e:	08 f4       	brcc	.+2      	; 0x16b42 <__gesf2+0x8>
   16b40:	8f ef       	ldi	r24, 0xFF	; 255
   16b42:	08 95       	ret

00016b44 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   16b44:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   16b46:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   16b48:	04 c0       	rjmp	.+8      	; 0x16b52 <__udivmodqi4_ep>

00016b4a <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   16b4a:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   16b4c:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   16b4e:	08 f0       	brcs	.+2      	; 0x16b52 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   16b50:	96 1b       	sub	r25, r22

00016b52 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   16b52:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   16b54:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   16b56:	c9 f7       	brne	.-14     	; 0x16b4a <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   16b58:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   16b5a:	08 95       	ret

00016b5c <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   16b5c:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   16b5e:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   16b60:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   16b62:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   16b64:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   16b66:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   16b68:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   16b6a:	19 94       	eijmp

00016b6c <realloc>:
realloc():
   16b6c:	4f 92       	push	r4
   16b6e:	5f 92       	push	r5
   16b70:	6f 92       	push	r6
   16b72:	7f 92       	push	r7
   16b74:	8f 92       	push	r8
   16b76:	9f 92       	push	r9
   16b78:	af 92       	push	r10
   16b7a:	bf 92       	push	r11
   16b7c:	cf 92       	push	r12
   16b7e:	df 92       	push	r13
   16b80:	ef 92       	push	r14
   16b82:	ff 92       	push	r15
   16b84:	0f 93       	push	r16
   16b86:	1f 93       	push	r17
   16b88:	cf 93       	push	r28
   16b8a:	df 93       	push	r29
   16b8c:	8c 01       	movw	r16, r24
   16b8e:	00 97       	sbiw	r24, 0x00	; 0
   16b90:	99 f4       	brne	.+38     	; 0x16bb8 <realloc+0x4c>
   16b92:	cb 01       	movw	r24, r22
   16b94:	df 91       	pop	r29
   16b96:	cf 91       	pop	r28
   16b98:	1f 91       	pop	r17
   16b9a:	0f 91       	pop	r16
   16b9c:	ff 90       	pop	r15
   16b9e:	ef 90       	pop	r14
   16ba0:	df 90       	pop	r13
   16ba2:	cf 90       	pop	r12
   16ba4:	bf 90       	pop	r11
   16ba6:	af 90       	pop	r10
   16ba8:	9f 90       	pop	r9
   16baa:	8f 90       	pop	r8
   16bac:	7f 90       	pop	r7
   16bae:	6f 90       	pop	r6
   16bb0:	5f 90       	pop	r5
   16bb2:	4f 90       	pop	r4
   16bb4:	0c 94 8a ae 	jmp	0x15d14	; 0x15d14 <malloc>
   16bb8:	fc 01       	movw	r30, r24
   16bba:	e6 0f       	add	r30, r22
   16bbc:	f7 1f       	adc	r31, r23
   16bbe:	9c 01       	movw	r18, r24
   16bc0:	22 50       	subi	r18, 0x02	; 2
   16bc2:	31 09       	sbc	r19, r1
   16bc4:	e2 17       	cp	r30, r18
   16bc6:	f3 07       	cpc	r31, r19
   16bc8:	08 f4       	brcc	.+2      	; 0x16bcc <realloc+0x60>
   16bca:	ae c0       	rjmp	.+348    	; 0x16d28 <realloc+0x1bc>
   16bcc:	d9 01       	movw	r26, r18
   16bce:	cd 91       	ld	r28, X+
   16bd0:	dc 91       	ld	r29, X
   16bd2:	11 97       	sbiw	r26, 0x01	; 1
   16bd4:	c6 17       	cp	r28, r22
   16bd6:	d7 07       	cpc	r29, r23
   16bd8:	20 f1       	brcs	.+72     	; 0x16c22 <realloc+0xb6>
   16bda:	c5 30       	cpi	r28, 0x05	; 5
   16bdc:	d1 05       	cpc	r29, r1
   16bde:	78 f0       	brcs	.+30     	; 0x16bfe <realloc+0x92>
   16be0:	ce 01       	movw	r24, r28
   16be2:	04 97       	sbiw	r24, 0x04	; 4
   16be4:	86 17       	cp	r24, r22
   16be6:	97 07       	cpc	r25, r23
   16be8:	50 f0       	brcs	.+20     	; 0x16bfe <realloc+0x92>
   16bea:	c6 1b       	sub	r28, r22
   16bec:	d7 0b       	sbc	r29, r23
   16bee:	22 97       	sbiw	r28, 0x02	; 2
   16bf0:	c1 93       	st	Z+, r28
   16bf2:	d1 93       	st	Z+, r29
   16bf4:	6d 93       	st	X+, r22
   16bf6:	7c 93       	st	X, r23
   16bf8:	cf 01       	movw	r24, r30
   16bfa:	0e 94 26 af 	call	0x15e4c	; 0x15e4c <free>
   16bfe:	c8 01       	movw	r24, r16
   16c00:	df 91       	pop	r29
   16c02:	cf 91       	pop	r28
   16c04:	1f 91       	pop	r17
   16c06:	0f 91       	pop	r16
   16c08:	ff 90       	pop	r15
   16c0a:	ef 90       	pop	r14
   16c0c:	df 90       	pop	r13
   16c0e:	cf 90       	pop	r12
   16c10:	bf 90       	pop	r11
   16c12:	af 90       	pop	r10
   16c14:	9f 90       	pop	r9
   16c16:	8f 90       	pop	r8
   16c18:	7f 90       	pop	r7
   16c1a:	6f 90       	pop	r6
   16c1c:	5f 90       	pop	r5
   16c1e:	4f 90       	pop	r4
   16c20:	08 95       	ret
   16c22:	5b 01       	movw	r10, r22
   16c24:	ac 1a       	sub	r10, r28
   16c26:	bd 0a       	sbc	r11, r29
   16c28:	4c 01       	movw	r8, r24
   16c2a:	8c 0e       	add	r8, r28
   16c2c:	9d 1e       	adc	r9, r29
   16c2e:	a0 91 3d 13 	lds	r26, 0x133D	; 0x80133d <__flp>
   16c32:	b0 91 3e 13 	lds	r27, 0x133E	; 0x80133e <__flp+0x1>
   16c36:	51 2c       	mov	r5, r1
   16c38:	41 2c       	mov	r4, r1
   16c3a:	f1 2c       	mov	r15, r1
   16c3c:	e1 2c       	mov	r14, r1
   16c3e:	10 97       	sbiw	r26, 0x00	; 0
   16c40:	31 f5       	brne	.+76     	; 0x16c8e <realloc+0x122>
   16c42:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <__brkval>
   16c46:	90 91 3c 13 	lds	r25, 0x133C	; 0x80133c <__brkval+0x1>
   16c4a:	88 15       	cp	r24, r8
   16c4c:	99 05       	cpc	r25, r9
   16c4e:	09 f0       	breq	.+2      	; 0x16c52 <realloc+0xe6>
   16c50:	5c c0       	rjmp	.+184    	; 0x16d0a <realloc+0x19e>
   16c52:	46 16       	cp	r4, r22
   16c54:	57 06       	cpc	r5, r23
   16c56:	08 f0       	brcs	.+2      	; 0x16c5a <realloc+0xee>
   16c58:	58 c0       	rjmp	.+176    	; 0x16d0a <realloc+0x19e>
   16c5a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__malloc_heap_end>
   16c5e:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   16c62:	00 97       	sbiw	r24, 0x00	; 0
   16c64:	41 f4       	brne	.+16     	; 0x16c76 <realloc+0x10a>
   16c66:	8d b7       	in	r24, 0x3d	; 61
   16c68:	9e b7       	in	r25, 0x3e	; 62
   16c6a:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   16c6e:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   16c72:	84 1b       	sub	r24, r20
   16c74:	95 0b       	sbc	r25, r21
   16c76:	e8 17       	cp	r30, r24
   16c78:	f9 07       	cpc	r31, r25
   16c7a:	08 f0       	brcs	.+2      	; 0x16c7e <realloc+0x112>
   16c7c:	55 c0       	rjmp	.+170    	; 0x16d28 <realloc+0x1bc>
   16c7e:	f0 93 3c 13 	sts	0x133C, r31	; 0x80133c <__brkval+0x1>
   16c82:	e0 93 3b 13 	sts	0x133B, r30	; 0x80133b <__brkval>
   16c86:	f9 01       	movw	r30, r18
   16c88:	71 83       	std	Z+1, r23	; 0x01
   16c8a:	60 83       	st	Z, r22
   16c8c:	b8 cf       	rjmp	.-144    	; 0x16bfe <realloc+0x92>
   16c8e:	8d 91       	ld	r24, X+
   16c90:	9c 91       	ld	r25, X
   16c92:	11 97       	sbiw	r26, 0x01	; 1
   16c94:	12 96       	adiw	r26, 0x02	; 2
   16c96:	6c 90       	ld	r6, X
   16c98:	12 97       	sbiw	r26, 0x02	; 2
   16c9a:	13 96       	adiw	r26, 0x03	; 3
   16c9c:	7c 90       	ld	r7, X
   16c9e:	13 97       	sbiw	r26, 0x03	; 3
   16ca0:	a8 15       	cp	r26, r8
   16ca2:	b9 05       	cpc	r27, r9
   16ca4:	59 f5       	brne	.+86     	; 0x16cfc <realloc+0x190>
   16ca6:	6c 01       	movw	r12, r24
   16ca8:	42 e0       	ldi	r20, 0x02	; 2
   16caa:	c4 0e       	add	r12, r20
   16cac:	d1 1c       	adc	r13, r1
   16cae:	ca 14       	cp	r12, r10
   16cb0:	db 04       	cpc	r13, r11
   16cb2:	20 f1       	brcs	.+72     	; 0x16cfc <realloc+0x190>
   16cb4:	ac 01       	movw	r20, r24
   16cb6:	4a 19       	sub	r20, r10
   16cb8:	5b 09       	sbc	r21, r11
   16cba:	da 01       	movw	r26, r20
   16cbc:	12 96       	adiw	r26, 0x02	; 2
   16cbe:	15 97       	sbiw	r26, 0x05	; 5
   16cc0:	80 f0       	brcs	.+32     	; 0x16ce2 <realloc+0x176>
   16cc2:	62 82       	std	Z+2, r6	; 0x02
   16cc4:	73 82       	std	Z+3, r7	; 0x03
   16cc6:	51 83       	std	Z+1, r21	; 0x01
   16cc8:	40 83       	st	Z, r20
   16cca:	d9 01       	movw	r26, r18
   16ccc:	6d 93       	st	X+, r22
   16cce:	7c 93       	st	X, r23
   16cd0:	e1 14       	cp	r14, r1
   16cd2:	f1 04       	cpc	r15, r1
   16cd4:	71 f0       	breq	.+28     	; 0x16cf2 <realloc+0x186>
   16cd6:	d7 01       	movw	r26, r14
   16cd8:	13 96       	adiw	r26, 0x03	; 3
   16cda:	fc 93       	st	X, r31
   16cdc:	ee 93       	st	-X, r30
   16cde:	12 97       	sbiw	r26, 0x02	; 2
   16ce0:	8e cf       	rjmp	.-228    	; 0x16bfe <realloc+0x92>
   16ce2:	22 96       	adiw	r28, 0x02	; 2
   16ce4:	8c 0f       	add	r24, r28
   16ce6:	9d 1f       	adc	r25, r29
   16ce8:	f9 01       	movw	r30, r18
   16cea:	91 83       	std	Z+1, r25	; 0x01
   16cec:	80 83       	st	Z, r24
   16cee:	f3 01       	movw	r30, r6
   16cf0:	ef cf       	rjmp	.-34     	; 0x16cd0 <realloc+0x164>
   16cf2:	f0 93 3e 13 	sts	0x133E, r31	; 0x80133e <__flp+0x1>
   16cf6:	e0 93 3d 13 	sts	0x133D, r30	; 0x80133d <__flp>
   16cfa:	81 cf       	rjmp	.-254    	; 0x16bfe <realloc+0x92>
   16cfc:	48 16       	cp	r4, r24
   16cfe:	59 06       	cpc	r5, r25
   16d00:	08 f4       	brcc	.+2      	; 0x16d04 <realloc+0x198>
   16d02:	2c 01       	movw	r4, r24
   16d04:	7d 01       	movw	r14, r26
   16d06:	d3 01       	movw	r26, r6
   16d08:	9a cf       	rjmp	.-204    	; 0x16c3e <realloc+0xd2>
   16d0a:	cb 01       	movw	r24, r22
   16d0c:	0e 94 8a ae 	call	0x15d14	; 0x15d14 <malloc>
   16d10:	7c 01       	movw	r14, r24
   16d12:	00 97       	sbiw	r24, 0x00	; 0
   16d14:	49 f0       	breq	.+18     	; 0x16d28 <realloc+0x1bc>
   16d16:	ae 01       	movw	r20, r28
   16d18:	b8 01       	movw	r22, r16
   16d1a:	0e 94 9c b6 	call	0x16d38	; 0x16d38 <memcpy>
   16d1e:	c8 01       	movw	r24, r16
   16d20:	0e 94 26 af 	call	0x15e4c	; 0x15e4c <free>
   16d24:	87 01       	movw	r16, r14
   16d26:	6b cf       	rjmp	.-298    	; 0x16bfe <realloc+0x92>
   16d28:	10 e0       	ldi	r17, 0x00	; 0
   16d2a:	00 e0       	ldi	r16, 0x00	; 0
   16d2c:	68 cf       	rjmp	.-304    	; 0x16bfe <realloc+0x92>

00016d2e <abort>:
abort():
   16d2e:	81 e0       	ldi	r24, 0x01	; 1
   16d30:	90 e0       	ldi	r25, 0x00	; 0
   16d32:	f8 94       	cli
   16d34:	0c 94 57 b7 	jmp	0x16eae	; 0x16eae <_exit>

00016d38 <memcpy>:
memcpy():
   16d38:	fb 01       	movw	r30, r22
   16d3a:	dc 01       	movw	r26, r24
   16d3c:	02 c0       	rjmp	.+4      	; 0x16d42 <memcpy+0xa>
   16d3e:	01 90       	ld	r0, Z+
   16d40:	0d 92       	st	X+, r0
   16d42:	41 50       	subi	r20, 0x01	; 1
   16d44:	50 40       	sbci	r21, 0x00	; 0
   16d46:	d8 f7       	brcc	.-10     	; 0x16d3e <memcpy+0x6>
   16d48:	08 95       	ret

00016d4a <strcat>:
strcat():
   16d4a:	fb 01       	movw	r30, r22
   16d4c:	dc 01       	movw	r26, r24
   16d4e:	0d 90       	ld	r0, X+
   16d50:	00 20       	and	r0, r0
   16d52:	e9 f7       	brne	.-6      	; 0x16d4e <strcat+0x4>
   16d54:	11 97       	sbiw	r26, 0x01	; 1
   16d56:	01 90       	ld	r0, Z+
   16d58:	0d 92       	st	X+, r0
   16d5a:	00 20       	and	r0, r0
   16d5c:	e1 f7       	brne	.-8      	; 0x16d56 <strcat+0xc>
   16d5e:	08 95       	ret

00016d60 <strchr>:
strchr():
   16d60:	fc 01       	movw	r30, r24
   16d62:	81 91       	ld	r24, Z+
   16d64:	86 17       	cp	r24, r22
   16d66:	21 f0       	breq	.+8      	; 0x16d70 <strchr+0x10>
   16d68:	88 23       	and	r24, r24
   16d6a:	d9 f7       	brne	.-10     	; 0x16d62 <strchr+0x2>
   16d6c:	99 27       	eor	r25, r25
   16d6e:	08 95       	ret
   16d70:	31 97       	sbiw	r30, 0x01	; 1
   16d72:	cf 01       	movw	r24, r30
   16d74:	08 95       	ret

00016d76 <strcmp>:
strcmp():
   16d76:	fb 01       	movw	r30, r22
   16d78:	dc 01       	movw	r26, r24
   16d7a:	8d 91       	ld	r24, X+
   16d7c:	01 90       	ld	r0, Z+
   16d7e:	80 19       	sub	r24, r0
   16d80:	01 10       	cpse	r0, r1
   16d82:	d9 f3       	breq	.-10     	; 0x16d7a <strcmp+0x4>
   16d84:	99 0b       	sbc	r25, r25
   16d86:	08 95       	ret

00016d88 <strcpy>:
strcpy():
   16d88:	fb 01       	movw	r30, r22
   16d8a:	dc 01       	movw	r26, r24
   16d8c:	01 90       	ld	r0, Z+
   16d8e:	0d 92       	st	X+, r0
   16d90:	00 20       	and	r0, r0
   16d92:	e1 f7       	brne	.-8      	; 0x16d8c <strcpy+0x4>
   16d94:	08 95       	ret

00016d96 <strncmp>:
strncmp():
   16d96:	fb 01       	movw	r30, r22
   16d98:	dc 01       	movw	r26, r24
   16d9a:	41 50       	subi	r20, 0x01	; 1
   16d9c:	50 40       	sbci	r21, 0x00	; 0
   16d9e:	30 f0       	brcs	.+12     	; 0x16dac <strncmp+0x16>
   16da0:	8d 91       	ld	r24, X+
   16da2:	01 90       	ld	r0, Z+
   16da4:	80 19       	sub	r24, r0
   16da6:	19 f4       	brne	.+6      	; 0x16dae <strncmp+0x18>
   16da8:	00 20       	and	r0, r0
   16daa:	b9 f7       	brne	.-18     	; 0x16d9a <strncmp+0x4>
   16dac:	88 1b       	sub	r24, r24
   16dae:	99 0b       	sbc	r25, r25
   16db0:	08 95       	ret

00016db2 <strncpy>:
strncpy():
   16db2:	fb 01       	movw	r30, r22
   16db4:	dc 01       	movw	r26, r24
   16db6:	41 50       	subi	r20, 0x01	; 1
   16db8:	50 40       	sbci	r21, 0x00	; 0
   16dba:	48 f0       	brcs	.+18     	; 0x16dce <strncpy+0x1c>
   16dbc:	01 90       	ld	r0, Z+
   16dbe:	0d 92       	st	X+, r0
   16dc0:	00 20       	and	r0, r0
   16dc2:	c9 f7       	brne	.-14     	; 0x16db6 <strncpy+0x4>
   16dc4:	01 c0       	rjmp	.+2      	; 0x16dc8 <strncpy+0x16>
   16dc6:	1d 92       	st	X+, r1
   16dc8:	41 50       	subi	r20, 0x01	; 1
   16dca:	50 40       	sbci	r21, 0x00	; 0
   16dcc:	e0 f7       	brcc	.-8      	; 0x16dc6 <strncpy+0x14>
   16dce:	08 95       	ret

00016dd0 <printf>:
printf():
   16dd0:	cf 93       	push	r28
   16dd2:	df 93       	push	r29
   16dd4:	cd b7       	in	r28, 0x3d	; 61
   16dd6:	de b7       	in	r29, 0x3e	; 62
   16dd8:	ae 01       	movw	r20, r28
   16dda:	4a 5f       	subi	r20, 0xFA	; 250
   16ddc:	5f 4f       	sbci	r21, 0xFF	; 255
   16dde:	fa 01       	movw	r30, r20
   16de0:	61 91       	ld	r22, Z+
   16de2:	71 91       	ld	r23, Z+
   16de4:	af 01       	movw	r20, r30
   16de6:	80 91 25 13 	lds	r24, 0x1325	; 0x801325 <__iob+0x2>
   16dea:	90 91 26 13 	lds	r25, 0x1326	; 0x801326 <__iob+0x3>
   16dee:	0e 94 f3 aa 	call	0x155e6	; 0x155e6 <vfprintf>
   16df2:	df 91       	pop	r29
   16df4:	cf 91       	pop	r28
   16df6:	08 95       	ret

00016df8 <puts>:
puts():
   16df8:	0f 93       	push	r16
   16dfa:	1f 93       	push	r17
   16dfc:	cf 93       	push	r28
   16dfe:	df 93       	push	r29
   16e00:	e0 91 25 13 	lds	r30, 0x1325	; 0x801325 <__iob+0x2>
   16e04:	f0 91 26 13 	lds	r31, 0x1326	; 0x801326 <__iob+0x3>
   16e08:	23 81       	ldd	r18, Z+3	; 0x03
   16e0a:	ec 01       	movw	r28, r24
   16e0c:	10 e0       	ldi	r17, 0x00	; 0
   16e0e:	00 e0       	ldi	r16, 0x00	; 0
   16e10:	21 fd       	sbrc	r18, 1
   16e12:	08 c0       	rjmp	.+16     	; 0x16e24 <puts+0x2c>
   16e14:	0f ef       	ldi	r16, 0xFF	; 255
   16e16:	1f ef       	ldi	r17, 0xFF	; 255
   16e18:	14 c0       	rjmp	.+40     	; 0x16e42 <puts+0x4a>
   16e1a:	19 95       	eicall
   16e1c:	89 2b       	or	r24, r25
   16e1e:	11 f0       	breq	.+4      	; 0x16e24 <puts+0x2c>
   16e20:	0f ef       	ldi	r16, 0xFF	; 255
   16e22:	1f ef       	ldi	r17, 0xFF	; 255
   16e24:	89 91       	ld	r24, Y+
   16e26:	60 91 25 13 	lds	r22, 0x1325	; 0x801325 <__iob+0x2>
   16e2a:	70 91 26 13 	lds	r23, 0x1326	; 0x801326 <__iob+0x3>
   16e2e:	db 01       	movw	r26, r22
   16e30:	18 96       	adiw	r26, 0x08	; 8
   16e32:	ed 91       	ld	r30, X+
   16e34:	fc 91       	ld	r31, X
   16e36:	81 11       	cpse	r24, r1
   16e38:	f0 cf       	rjmp	.-32     	; 0x16e1a <puts+0x22>
   16e3a:	8a e0       	ldi	r24, 0x0A	; 10
   16e3c:	19 95       	eicall
   16e3e:	89 2b       	or	r24, r25
   16e40:	49 f7       	brne	.-46     	; 0x16e14 <puts+0x1c>
   16e42:	c8 01       	movw	r24, r16
   16e44:	df 91       	pop	r29
   16e46:	cf 91       	pop	r28
   16e48:	1f 91       	pop	r17
   16e4a:	0f 91       	pop	r16
   16e4c:	08 95       	ret

00016e4e <sprintf>:
sprintf():
   16e4e:	0f 93       	push	r16
   16e50:	1f 93       	push	r17
   16e52:	cf 93       	push	r28
   16e54:	df 93       	push	r29
   16e56:	cd b7       	in	r28, 0x3d	; 61
   16e58:	de b7       	in	r29, 0x3e	; 62
   16e5a:	2e 97       	sbiw	r28, 0x0e	; 14
   16e5c:	0f b6       	in	r0, 0x3f	; 63
   16e5e:	f8 94       	cli
   16e60:	de bf       	out	0x3e, r29	; 62
   16e62:	0f be       	out	0x3f, r0	; 63
   16e64:	cd bf       	out	0x3d, r28	; 61
   16e66:	0e 89       	ldd	r16, Y+22	; 0x16
   16e68:	1f 89       	ldd	r17, Y+23	; 0x17
   16e6a:	86 e0       	ldi	r24, 0x06	; 6
   16e6c:	8c 83       	std	Y+4, r24	; 0x04
   16e6e:	1a 83       	std	Y+2, r17	; 0x02
   16e70:	09 83       	std	Y+1, r16	; 0x01
   16e72:	8f ef       	ldi	r24, 0xFF	; 255
   16e74:	9f e7       	ldi	r25, 0x7F	; 127
   16e76:	9e 83       	std	Y+6, r25	; 0x06
   16e78:	8d 83       	std	Y+5, r24	; 0x05
   16e7a:	ae 01       	movw	r20, r28
   16e7c:	46 5e       	subi	r20, 0xE6	; 230
   16e7e:	5f 4f       	sbci	r21, 0xFF	; 255
   16e80:	68 8d       	ldd	r22, Y+24	; 0x18
   16e82:	79 8d       	ldd	r23, Y+25	; 0x19
   16e84:	ce 01       	movw	r24, r28
   16e86:	01 96       	adiw	r24, 0x01	; 1
   16e88:	0e 94 f3 aa 	call	0x155e6	; 0x155e6 <vfprintf>
   16e8c:	2f 81       	ldd	r18, Y+7	; 0x07
   16e8e:	38 85       	ldd	r19, Y+8	; 0x08
   16e90:	02 0f       	add	r16, r18
   16e92:	13 1f       	adc	r17, r19
   16e94:	f8 01       	movw	r30, r16
   16e96:	10 82       	st	Z, r1
   16e98:	2e 96       	adiw	r28, 0x0e	; 14
   16e9a:	0f b6       	in	r0, 0x3f	; 63
   16e9c:	f8 94       	cli
   16e9e:	de bf       	out	0x3e, r29	; 62
   16ea0:	0f be       	out	0x3f, r0	; 63
   16ea2:	cd bf       	out	0x3d, r28	; 61
   16ea4:	df 91       	pop	r29
   16ea6:	cf 91       	pop	r28
   16ea8:	1f 91       	pop	r17
   16eaa:	0f 91       	pop	r16
   16eac:	08 95       	ret

00016eae <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   16eae:	f8 94       	cli

00016eb0 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   16eb0:	ff cf       	rjmp	.-2      	; 0x16eb0 <__stop_program>
